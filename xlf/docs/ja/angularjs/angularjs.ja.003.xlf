<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="27533abdf37da8420a124cdfff17869288101509" translate="yes" xml:space="preserve">
          <source>AngularJS UI Map (Google Maps)</source>
          <target state="translated">AngularJS UIマップ(Googleマップ</target>
        </trans-unit>
        <trans-unit id="4bfbeef31141b3d561aa7fbd5547bc14fd515a39" translate="yes" xml:space="preserve">
          <source>AngularJS also pays attention to CSS class changes on elements by triggering the &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;remove&lt;/strong&gt; hooks. This means that if a CSS class is added to or removed from an element then an animation can be executed in between, before the CSS class addition or removal is finalized. (Keep in mind that AngularJS will only be able to capture class changes if an &lt;strong&gt;interpolated expression&lt;/strong&gt; or the &lt;strong&gt;ng-class&lt;/strong&gt; directive is used on the element.)</source>
          <target state="translated">AngularJSは、&lt;strong&gt;追加&lt;/strong&gt;フックと&lt;strong&gt;削除&lt;/strong&gt;フックをトリガーして、要素のCSSクラスの変更にも注意を払います。つまり、CSSクラスが要素に追加または要素から削除された場合、CSSクラスの追加または削除が完了する前に、その間にアニメーションを実行できます。 （AngularJSは、要素で&lt;strong&gt;補間式&lt;/strong&gt;または&lt;strong&gt;ng-class&lt;/strong&gt;ディレクティブが使用されている場合にのみ、クラスの変更をキャプチャできることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="4f88fe3aac6229871b3db2ee53f14d289253d6fe" translate="yes" xml:space="preserve">
          <source>AngularJS also provides the &lt;a href=&quot;../api/ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module, which provides mocking for your tests. This is used to inject and mock AngularJS services within unit tests. In addition, it is able to extend other modules so they are synchronous. Having tests synchronous keeps them much cleaner and easier to work with. One of the most useful parts of ngMock is &lt;a href=&quot;../api/ngmock/service/%24httpbackend&quot;&gt;&lt;code&gt;$httpBackend&lt;/code&gt;&lt;/a&gt;, which lets us mock XHR requests in tests, and return sample data instead.</source>
          <target state="translated">AngularJSには、&lt;a href=&quot;../api/ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt;提供するngMockモジュールも用意されています。これは、単体テスト内でAngularJSサービスをインジェクトおよびモックするために使用されます。さらに、他のモジュールを拡張して同期させることができます。テストを同期させることで、テストをよりクリーンで簡単に操作できます。ngMockの最も有用な部分の1つは&lt;a href=&quot;../api/ngmock/service/%24httpbackend&quot;&gt; &lt;code&gt;$httpBackend&lt;/code&gt; &lt;/a&gt;。これにより、テストでXHRリクエストをモックし、代わりにサンプルデータを返すことができます。</target>
        </trans-unit>
        <trans-unit id="d001fe84458eea653438a88cf62e275bc3871980" translate="yes" xml:space="preserve">
          <source>AngularJS also provides the following additional methods and events to both jQuery and jqLite:</source>
          <target state="translated">AngularJSでは、jQueryとjqLiteの両方に以下のようなメソッドやイベントを追加で提供しています。</target>
        </trans-unit>
        <trans-unit id="a8c5f79197dfa3de08bf76fd8a1637d31da7b391" translate="yes" xml:space="preserve">
          <source>AngularJS and Cordova</source>
          <target state="translated">AngularJSとCordova</target>
        </trans-unit>
        <trans-unit id="238b92e9c0ec431391c26fbce2a871d3a4d73b04" translate="yes" xml:space="preserve">
          <source>AngularJS applications cannot be nested within each other.</source>
          <target state="translated">AngularJSアプリケーションは互いに入れ子にすることはできません。</target>
        </trans-unit>
        <trans-unit id="f3ee826c3209863e648113706ae9e0875449b60b" translate="yes" xml:space="preserve">
          <source>AngularJS applies the &lt;code&gt;name = 'X';&lt;/code&gt; to the model.</source>
          <target state="translated">AngularJSは &lt;code&gt;name = 'X';&lt;/code&gt; 適用します。モデルに。</target>
        </trans-unit>
        <trans-unit id="8ea8fc92595d21993d4f0e0cfb641e521696f8ce" translate="yes" xml:space="preserve">
          <source>AngularJS apps don't have a main method. Instead modules declaratively specify how an application should be bootstrapped. There are several advantages to this approach:</source>
          <target state="translated">AngularJSアプリはメインメソッドを持ちません。その代わりに、モジュールはアプリケーションがどのようにブートストラップされるべきかを宣言的に指定します。このアプローチにはいくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="372bbe31b132ff0ef41b524bb7d70b9d4f2e094f" translate="yes" xml:space="preserve">
          <source>AngularJS comes pre-bundled with common directives which are useful for building any app. We also expect that you will create directives that are specific to your app. These extensions become a Domain Specific Language for building your application.</source>
          <target state="translated">AngularJSには、どんなアプリを作るのにも便利な一般的なディレクティブがあらかじめバンドルされています。また、あなたのアプリに特化したディレクティブを作成することも想定しています。これらの拡張機能はアプリケーションを構築するためのドメイン固有の言語になります。</target>
        </trans-unit>
        <trans-unit id="3ee0456d833564d457cddbf2538f4498b02003a6" translate="yes" xml:space="preserve">
          <source>AngularJS comes with &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; built-in, which makes testing components much easier, because you can pass in a component's dependencies and stub or mock them as you wish.</source>
          <target state="translated">AngularJSには&lt;a href=&quot;di&quot;&gt;依存性注入が&lt;/a&gt;組み込まれており、コンポーネントの依存関係を渡して、必要に応じてそれらをスタブまたはモックできるため、コンポーネントのテストがはるかに簡単になります。</target>
        </trans-unit>
        <trans-unit id="96f3285e4781ee5ee9e3f9586554d6b66101a2f5" translate="yes" xml:space="preserve">
          <source>AngularJS comes with a set of these directives built-in, like &lt;code&gt;ngBind&lt;/code&gt;, &lt;code&gt;ngModel&lt;/code&gt;, and &lt;code&gt;ngClass&lt;/code&gt;. Much like you create controllers and services, you can create your own directives for AngularJS to use. When AngularJS &lt;a href=&quot;bootstrap&quot;&gt;bootstraps&lt;/a&gt; your application, the &lt;a href=&quot;compiler&quot;&gt;HTML compiler&lt;/a&gt; traverses the DOM matching directives against the DOM elements.</source>
          <target state="translated">AngularJSのように、内蔵されたこれらのディレクティブのセットが付属してい &lt;code&gt;ngBind&lt;/code&gt; 、 &lt;code&gt;ngModel&lt;/code&gt; 、および &lt;code&gt;ngClass&lt;/code&gt; 。コントローラーとサービスを作成するのと同じように、AngularJSが使用する独自のディレクティブを作成できます。AngularJSがアプリケーションを&lt;a href=&quot;bootstrap&quot;&gt;ブートストラップ&lt;/a&gt;するとき、&lt;a href=&quot;compiler&quot;&gt;HTMLコンパイラ&lt;/a&gt;はDOM要素に対してDOMマッチングディレクティブをトラバースします。</target>
        </trans-unit>
        <trans-unit id="d39b93d98b5677b7abce8f8d1889ee8550f46ef8" translate="yes" xml:space="preserve">
          <source>AngularJS does not use JavaScript's &lt;code&gt;eval()&lt;/code&gt; to evaluate expressions. Instead AngularJS's &lt;a href=&quot;../api/ng/service/%24parse&quot;&gt;$parse&lt;/a&gt; service processes these expressions.</source>
          <target state="translated">AngularJSはJavaScriptの &lt;code&gt;eval()&lt;/code&gt; を使用して式を評価しません。代わりに、AngularJSの&lt;a href=&quot;../api/ng/service/%24parse&quot;&gt;$ parse&lt;/a&gt;サービスがこれらの式を処理します。</target>
        </trans-unit>
        <trans-unit id="dd88c4c5702cceb2c3a9986c7e71401a0e0bd457" translate="yes" xml:space="preserve">
          <source>AngularJS enters the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop. The loop is made up of two smaller loops which process &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt; queue and the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list. The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop keeps iterating until the model stabilizes, which means that the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt; queue is empty and the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list does not detect any changes.</source>
          <target state="translated">AngularJSは&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;ループに入ります。ループは、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;キューと&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$ watch&lt;/a&gt;リストを処理する2つの小さなループで構成されています。&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ダイジェスト&lt;/a&gt;ループは、モデルが安定するまでことをその手段、反復し続ける&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsyncの&lt;/a&gt;キューが空である&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$のウォッチ&lt;/a&gt;リストは、任意の変更を検出しません。</target>
        </trans-unit>
        <trans-unit id="0850944e4a8643e355e181af91bde09626c238b5" translate="yes" xml:space="preserve">
          <source>AngularJS executes the &lt;code&gt;stimulusFn()&lt;/code&gt;, which typically modifies application state.</source>
          <target state="translated">AngularJSは、通常はアプリケーションの状態を変更する &lt;code&gt;stimulusFn()&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="7379667c8fedda0e1bbafd8c3ac9dcea1c105672" translate="yes" xml:space="preserve">
          <source>AngularJS exits the execution context, which in turn exits the &lt;code&gt;keydown&lt;/code&gt; event and with it the JavaScript execution context.</source>
          <target state="translated">AngularJSは実行コンテキストを終了します。実行コンテキストは &lt;code&gt;keydown&lt;/code&gt; イベントを終了し、それとともにJavaScript実行コンテキストを終了します。</target>
        </trans-unit>
        <trans-unit id="bba6c16db1c0ce833cf612e719600df9bc77f3c2" translate="yes" xml:space="preserve">
          <source>AngularJS expression evaluating to URL. If the source is a string constant, make sure you wrap it in &lt;strong&gt;single&lt;/strong&gt; quotes, e.g. &lt;code&gt;src=&quot;'myPartialTemplate.html'&quot;&lt;/code&gt;.</source>
          <target state="translated">URLに評価されるAngularJS式。ソースが文字列定数の場合は、必ず &lt;code&gt;src=&quot;'myPartialTemplate.html'&quot;&lt;/code&gt; のように、&lt;strong&gt;一&lt;/strong&gt;重引用符で囲んでください。</target>
        </trans-unit>
        <trans-unit id="8b431f1a46f9d869b200da468e97d361380bd907" translate="yes" xml:space="preserve">
          <source>AngularJS expression that must evaluate to a &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; parsable into a &lt;code&gt;Number&lt;/code&gt;. Used as value for the &lt;code&gt;maxlength&lt;/code&gt;&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;validator&lt;/a&gt;.</source>
          <target state="translated">評価されなければならないAngularJS式 &lt;code&gt;Number&lt;/code&gt; または &lt;code&gt;String&lt;/code&gt; に解析可能な &lt;code&gt;Number&lt;/code&gt; 。 &lt;code&gt;maxlength&lt;/code&gt; &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;バリデーターの&lt;/a&gt;値として使用されます。</target>
        </trans-unit>
        <trans-unit id="e509280278241209839b7c1ec5757ce68bdfb9b3" translate="yes" xml:space="preserve">
          <source>AngularJS expression that must evaluate to a &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; parsable into a &lt;code&gt;Number&lt;/code&gt;. Used as value for the &lt;code&gt;minlength&lt;/code&gt;&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;validator&lt;/a&gt;.</source>
          <target state="translated">評価されなければならないAngularJS式 &lt;code&gt;Number&lt;/code&gt; または &lt;code&gt;String&lt;/code&gt; に解析可能な &lt;code&gt;Number&lt;/code&gt; 。 &lt;code&gt;minlength&lt;/code&gt; &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;バリデーターの&lt;/a&gt;値として使用されます。</target>
        </trans-unit>
        <trans-unit id="88a4cc08f5767fe1829d07df54e5e6060eec74d4" translate="yes" xml:space="preserve">
          <source>AngularJS expression that must evaluate to a &lt;code&gt;RegExp&lt;/code&gt; or a &lt;code&gt;String&lt;/code&gt; parsable into a &lt;code&gt;RegExp&lt;/code&gt;, or a &lt;code&gt;RegExp&lt;/code&gt; literal. See above for more details.</source>
          <target state="translated">評価されなければならないAngularJS表現 &lt;code&gt;RegExp&lt;/code&gt; または &lt;code&gt;String&lt;/code&gt; に構文解析可能な &lt;code&gt;RegExp&lt;/code&gt; 、または &lt;code&gt;RegExp&lt;/code&gt; リテラル。詳細については、上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="97d4f64fec36f6812a573ef75120b96770cdad0c" translate="yes" xml:space="preserve">
          <source>AngularJS expression to be executed when input changes due to user interaction with the input element.</source>
          <target state="translated">ユーザーの入力要素とのインタラクションによって入力が変化したときに実行されるAngularJS式。</target>
        </trans-unit>
        <trans-unit id="08da89807326e11b25bd5469155826eee0eb7644" translate="yes" xml:space="preserve">
          <source>AngularJS expression to be executed when selected option(s) changes due to user interaction with the select element.</source>
          <target state="translated">ユーザーがselect要素とのインタラクションによって選択されたオプションが変更された場合に実行されるAngularJS式。</target>
        </trans-unit>
        <trans-unit id="b77654d0d620a0bfe652bc39fe58df9e3f4b1cce" translate="yes" xml:space="preserve">
          <source>AngularJS expression to be executed when the ngModel value changes due to user interaction with the input element.</source>
          <target state="translated">ユーザーの入力要素とのインタラクションによって ngModel の値が変化した場合に実行される AngularJS の式。</target>
        </trans-unit>
        <trans-unit id="956ed48496ede5414992c2573a69c215f3d99597" translate="yes" xml:space="preserve">
          <source>AngularJS expression to which &lt;code&gt;ngModel&lt;/code&gt; will be be set when the radio is selected. Should be used instead of the &lt;code&gt;value&lt;/code&gt; attribute if you need a non-string &lt;code&gt;ngModel&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, ...).</source>
          <target state="translated">無線が選択されたときに &lt;code&gt;ngModel&lt;/code&gt; が設定されるAngularJS式。文字列以外の &lt;code&gt;ngModel&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; 、 &lt;code&gt;array&lt;/code&gt; 、...）が必要な場合は、 &lt;code&gt;value&lt;/code&gt; 属性の代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2ef64a93a14456208c9b105e55c9d36b5bf65d39" translate="yes" xml:space="preserve">
          <source>AngularJS expression, whose value will be bound to the &lt;code&gt;value&lt;/code&gt; attribute and &lt;code&gt;value&lt;/code&gt; property of the element.</source>
          <target state="translated">AngularJS式。その値は要素の &lt;code&gt;value&lt;/code&gt; 属性と &lt;code&gt;value&lt;/code&gt; プロパティにバインドされます。</target>
        </trans-unit>
        <trans-unit id="7d0313fcc5ce776c2589c8549f299e088d7b5bfb" translate="yes" xml:space="preserve">
          <source>AngularJS expression. If it evaluates to &lt;code&gt;true&lt;/code&gt;, it sets the &lt;code&gt;required&lt;/code&gt; attribute to the element and adds the &lt;code&gt;required&lt;/code&gt;&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;&lt;code&gt;validator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">AngularJS式。 &lt;code&gt;true&lt;/code&gt; と評価された場合、 &lt;code&gt;required&lt;/code&gt; 属性を要素に設定し、 &lt;code&gt;required&lt;/code&gt; &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt; &lt;code&gt;validator&lt;/code&gt; &lt;/a&gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="fc7f82d84685139363df50752ba4a48add9d5732" translate="yes" xml:space="preserve">
          <source>AngularJS expressions are JavaScript-like code snippets that are mainly placed in interpolation bindings such as &lt;code&gt;&amp;lt;span title=&quot;{{ attrBinding }}&quot;&amp;gt;{{ textBinding }}&amp;lt;/span&amp;gt;&lt;/code&gt;, but also used directly in directive attributes such as &lt;code&gt;ng-click=&quot;functionExpression()&quot;&lt;/code&gt;.</source>
          <target state="translated">AngularJS式は、JavaScriptのようなコードスニペットで、主に &lt;code&gt;&amp;lt;span title=&quot;{{ attrBinding }}&quot;&amp;gt;{{ textBinding }}&amp;lt;/span&amp;gt;&lt;/code&gt; などの補間バインディングに配置されますが、 &lt;code&gt;ng-click=&quot;functionExpression()&quot;&lt;/code&gt; などのディレクティブ属性でも直接使用されますclick = &quot;functionExpression（）&quot;。</target>
        </trans-unit>
        <trans-unit id="f061af2fccf05b8fcd05482367cef5c7ff26b4bc" translate="yes" xml:space="preserve">
          <source>AngularJS expressions are like JavaScript expressions with the following differences:</source>
          <target state="translated">AngularJSの式はJavaScriptの式のようなもので、以下のような違いがあります。</target>
        </trans-unit>
        <trans-unit id="09c3ce274e777d18b85eef65fd68287cb37a9819" translate="yes" xml:space="preserve">
          <source>AngularJS expressions do not have direct access to global variables like &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; or &lt;code&gt;location&lt;/code&gt;. This restriction is intentional. It prevents accidental access to the global state &amp;ndash; a common source of subtle bugs.</source>
          <target state="translated">AngularJS式は、 &lt;code&gt;window&lt;/code&gt; 、 &lt;code&gt;document&lt;/code&gt; 、 &lt;code&gt;location&lt;/code&gt; などのグローバル変数に直接アクセスできません。この制限は意図的なものです。微妙なバグの一般的な原因であるグローバルな状態への偶発的なアクセスを防ぎます。</target>
        </trans-unit>
        <trans-unit id="e07171b2ee4be74089fb92963274de2dc91e580d" translate="yes" xml:space="preserve">
          <source>AngularJS frees you from the following pains:</source>
          <target state="translated">AngularJSを使うことで、以下のような苦痛から解放されます。</target>
        </trans-unit>
        <trans-unit id="fdb9cdb2309b4f5036d4198e942b004700a1e259" translate="yes" xml:space="preserve">
          <source>AngularJS has some features that can conflict with certain restrictions that are applied when using &lt;a href=&quot;https://developer.mozilla.org/en/Security/CSP&quot;&gt;CSP (Content Security Policy)&lt;/a&gt; rules.</source>
          <target state="translated">AngularJSには、&lt;a href=&quot;https://developer.mozilla.org/en/Security/CSP&quot;&gt;CSP（コンテンツセキュリティポリシー）&lt;/a&gt;ルールを使用するときに適用される特定の制限と競合する可能性があるいくつかの機能があります。</target>
        </trans-unit>
        <trans-unit id="8c32413e579d205cc826666f39f4cffe4b82b826" translate="yes" xml:space="preserve">
          <source>AngularJS hooks are prefixed with &lt;code&gt;$&lt;/code&gt;, such as &lt;code&gt;$onInit&lt;/code&gt;. Angular hooks are prefixed with &lt;code&gt;ng&lt;/code&gt;, such as &lt;code&gt;ngOnInit&lt;/code&gt;.</source>
          <target state="translated">AngularJSフックの前に &lt;code&gt;$&lt;/code&gt; 、 &lt;code&gt;$onInit&lt;/code&gt; などの$が付きます。Angularフックの先頭には &lt;code&gt;ngOnInit&lt;/code&gt; のように &lt;code&gt;ng&lt;/code&gt; が付いています。</target>
        </trans-unit>
        <trans-unit id="8080861f70c5e3379f7f21148b3d91ee5e39f3d3" translate="yes" xml:space="preserve">
          <source>AngularJS hooks can be defined on the controller prototype or added to the controller inside its constructor. In Angular you can only define hooks on the prototype of the Component class.</source>
          <target state="translated">AngularJSのフックはコントローラのプロトタイプ上で定義することも、コンストラクタ内でコントローラに追加することもできます。AngularではComponentクラスのプロトタイプにのみフックを定義できます。</target>
        </trans-unit>
        <trans-unit id="752e75fd10d996a8acb5cb76944e3500f3b826d7" translate="yes" xml:space="preserve">
          <source>AngularJS implements all of the basic HTML form controls (&lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/select&quot;&gt;select&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/textarea&quot;&gt;textarea&lt;/a&gt;), which should be sufficient for most cases. However, if you need more flexibility, you can write your own form control as a directive.</source>
          <target state="translated">AngularJSはすべての基本的なHTMLフォームコントロール（&lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/select&quot;&gt;select&lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/textarea&quot;&gt;textarea&lt;/a&gt;）を実装しており、ほとんどの場合これで十分です。ただし、さらに柔軟性が必要な場合は、独自のフォームコントロールをディレクティブとして作成できます。</target>
        </trans-unit>
        <trans-unit id="cfc02d97cc07b688ab2870592f09f7fc31cc0e3f" translate="yes" xml:space="preserve">
          <source>AngularJS initializes automatically upon &lt;code&gt;DOMContentLoaded&lt;/code&gt; event or when the &lt;code&gt;angular.js&lt;/code&gt; script is evaluated if at that time &lt;code&gt;document.readyState&lt;/code&gt; is set to &lt;code&gt;'complete'&lt;/code&gt;. At this point AngularJS looks for the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive which designates your application root. If the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive is found then AngularJS will:</source>
          <target state="translated">AngularJSは、 &lt;code&gt;DOMContentLoaded&lt;/code&gt; イベント時に、またはその時点で &lt;code&gt;document.readyState&lt;/code&gt; が &lt;code&gt;'complete'&lt;/code&gt; に設定されている場合、 &lt;code&gt;angular.js&lt;/code&gt; スクリプトが評価されるときに自動的に初期化します。この時点で、AngularJSはアプリケーションルートを指定する&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;ディレクティブを探します。&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;ディレクティブが見つかった場合、AngularJSは次のことを行います。</target>
        </trans-unit>
        <trans-unit id="4435ce23f59a011ed31e42f4b0b893d57d8d3ed1" translate="yes" xml:space="preserve">
          <source>AngularJS invokes certain functions (like service factories and controllers) via the injector. You need to annotate these functions so that the injector knows what services to inject into the function. There are three ways of annotating your code with service name information:</source>
          <target state="translated">AngularJSはインジェクタを介して特定の関数(サービスファクトリやコントローラなど)を呼び出します。これらの関数にアノテーションを付ける必要があるので、インジェクターがどのようなサービスを関数にインジェクトすべきかを知ることができます。コードにサービス名の情報をアノテーションするには3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="13bc8c54b543141e4c682ca99d8268eedb15c59a" translate="yes" xml:space="preserve">
          <source>AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. AngularJS's data binding and dependency injection eliminate much of the code you would otherwise have to write. And it all happens within the browser, making it an ideal partner with any server technology.</source>
          <target state="translated">AngularJSは動的なWebアプリケーションのための構造的なフレームワークです。HTMLをテンプレート言語として使用することができ、HTMLの構文を拡張してアプリケーションのコンポーネントを明確かつ簡潔に表現することができます。AngularJSのデータバインディングと依存性インジェクションにより、通常書かなければならないコードの多くを排除することができます。また、すべての処理はブラウザ内で行われるため、あらゆるサーバー技術との理想的なパートナーとなります。</target>
        </trans-unit>
        <trans-unit id="afa69d76d77331bc697c05156c2d935319818e67" translate="yes" xml:space="preserve">
          <source>AngularJS is built around the belief that declarative code is better than imperative when it comes to building UIs and wiring software components together, while imperative code is excellent for expressing business logic.</source>
          <target state="translated">AngularJSは、UIの構築やソフトウェアコンポーネントの配線においては命令的コードよりも宣言的コードの方が優れており、一方で命令的コードはビジネスロジックを表現するのに優れているという信念のもとに構築されています。</target>
        </trans-unit>
        <trans-unit id="c3edf37d74a9cf2efaa5aedcb37dbfd1f8ca4b39" translate="yes" xml:space="preserve">
          <source>AngularJS is different. The AngularJS compiler consumes the DOM, not string templates. The result is a linking function, which when combined with a scope model results in a live view. The view and scope model bindings are transparent. The developer does not need to make any special calls to update the view. And because &lt;code&gt;innerHTML&lt;/code&gt; is not used, you won't accidentally clobber user input. Furthermore, AngularJS directives can contain not just text bindings, but behavioral constructs as well.</source>
          <target state="translated">AngularJSは違います。 AngularJSコンパイラは、文字列テンプレートではなくDOMを使用します。結果はリンク機能であり、スコープモデルと組み合わせるとライブビューになります。ビューとスコープモデルのバインディングは透過的です。開発者は、ビューを更新するために特別な呼び出しを行う必要はありません。また、 &lt;code&gt;innerHTML&lt;/code&gt; は使用されないため、ユーザー入力を誤って壊すことはありません。さらに、AngularJSディレクティブには、テキストバインディングだけでなく、動作構成も含めることができます。</target>
        </trans-unit>
        <trans-unit id="ac9efc5db18aabed4da31047d240fa2301008411" translate="yes" xml:space="preserve">
          <source>AngularJS is not a single piece in the overall puzzle of building the client-side of a web application. It handles all of the DOM and AJAX glue code you once wrote by hand and puts it in a well-defined structure. This makes AngularJS opinionated about how a CRUD (Create, Read, Update, Delete) application should be built. But while it is opinionated, it also tries to make sure that its opinion is just a starting point you can easily change. AngularJS comes with the following out-of-the-box:</source>
          <target state="translated">AngularJSはウェブアプリケーションのクライアントサイドを構築する全体的なパズルの中の一つのピースではありません。AngularJSはかつて手書きで書いたDOMとAJAXのグルーコードをすべて処理し、それをきちんと定義された構造の中に入れます。このためAngularJSはCRUD(Create,Read,Update,Delete)アプリケーションがどのように構築されるべきかについて意見を述べています。しかし、意見を述べる一方で、その意見は簡単に変更できる出発点に過ぎないことを確認しようともしています。AngularJSには以下のようなアウトオブボックスが付属しています。</target>
        </trans-unit>
        <trans-unit id="9ef3b6f1388704d540c31540844164208295dbc6" translate="yes" xml:space="preserve">
          <source>AngularJS is what HTML would have been, had it been designed for applications. HTML is a great declarative language for static documents. It does not contain much in the way of creating applications, and as a result building web applications is an exercise in &lt;em&gt;what do I have to do to trick the browser into doing what I want?&lt;/em&gt;</source>
          <target state="translated">AngularJSは、アプリケーション用に設計されていれば、HTMLと同じでした。HTMLは静的ドキュメントの優れた宣言型言語です。アプリケーションの作成方法はあまり含まれていないため、結果としてWebアプリケーションを構築する&lt;em&gt;ことは、ブラウザーをだまして自分のやりたいことを実行させるため&lt;/em&gt;に&lt;em&gt;何をしなければならないかという課題です。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="544f9941cafe249e5d00dbb4906eca8c99f8d603" translate="yes" xml:space="preserve">
          <source>AngularJS is written with testability in mind, but it still requires that you do the right thing. We tried to make the right thing easy, but if you ignore these guidelines you may end up with an untestable application.</source>
          <target state="translated">AngularJSはテスト可能性を念頭に置いて書かれていますが、それでも正しいことをする必要があります。正しいことを簡単にしようとしましたが、これらのガイドラインを無視すると、テスト不可能なアプリケーションになってしまうかもしれません。</target>
        </trans-unit>
        <trans-unit id="7383699805e691e0daff8aa72c18b8f3565bd40d" translate="yes" xml:space="preserve">
          <source>AngularJS mailing list</source>
          <target state="translated">AngularJSメーリングリスト</target>
        </trans-unit>
        <trans-unit id="478efa9ac782264ed3b06bb9dbddc3848b85e795" translate="yes" xml:space="preserve">
          <source>AngularJS modifies the normal JavaScript flow by providing its own event processing loop. This splits the JavaScript into classical and AngularJS execution context. Only operations which are applied in the AngularJS execution context will benefit from AngularJS data-binding, exception handling, property watching, etc... You can also use $apply() to enter the AngularJS execution context from JavaScript. Keep in mind that in most places (controllers, services) $apply has already been called for you by the directive which is handling the event. An explicit call to $apply is needed only when implementing custom event callbacks, or when working with third-party library callbacks.</source>
          <target state="translated">AngularJSは独自のイベント処理ループを提供することで、通常のJavaScriptの流れを修正します。これにより、JavaScriptは古典的なコンテキストとAngularJSの実行コンテキストに分割されます。AngularJS実行コンテキストで適用される操作だけがAngularJSのデータバインディング、例外処理、プロパティウォッチングなどの恩恵を受けることができます。JavaScriptからAngularJS実行コンテキストに入るには$apply()を使うこともできます。ほとんどの場所(コントローラやサービス)では、イベントを処理しているディレクティブによって$applyがすでに呼び出されていることを覚えておいてください。明示的に $apply を呼び出す必要があるのは、カスタムイベントコールバックを実装する場合や、サードパーティのライブラリコールバックを使う場合だけです。</target>
        </trans-unit>
        <trans-unit id="716ba022bcc260438c543a5bdaff3cdd08b11838" translate="yes" xml:space="preserve">
          <source>AngularJS offers several useful services (like &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt;), but for most applications you'll also want to &lt;a href=&quot;services#creating-services.html&quot;&gt;create your own&lt;/a&gt;.</source>
          <target state="translated">AngularJSはいくつかの便利なサービス（&lt;a href=&quot;../api/ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;）を提供しますが、ほとんどのアプリケーションでは&lt;a href=&quot;services#creating-services.html&quot;&gt;独自のサービス&lt;/a&gt;を作成することもできます。</target>
        </trans-unit>
        <trans-unit id="e3aaca8b19ef9d3c826824478ea3168cc956a6ed" translate="yes" xml:space="preserve">
          <source>AngularJS on Mobile Guide</source>
          <target state="translated">モバイルでのAngularJSガイド</target>
        </trans-unit>
        <trans-unit id="1c673989115ebb8289f93a363391b8b8d9bb8a78" translate="yes" xml:space="preserve">
          <source>AngularJS on YouTube</source>
          <target state="translated">AngularJSをYouTubeで見る</target>
        </trans-unit>
        <trans-unit id="8ffafd56c64e9c99454bda8b427b893a982e760f" translate="yes" xml:space="preserve">
          <source>AngularJS provides animation hooks for common directives such as &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;, and &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt;, as well as custom directives via the &lt;code&gt;$animate&lt;/code&gt; service. These animation hooks are set in place to trigger animations during the life cycle of various directives and when triggered, will attempt to perform a CSS Transition, CSS Keyframe Animation or a JavaScript callback Animation (depending on whether an animation is placed on the given directive). Animations can be placed using vanilla CSS by following the naming conventions set in place by AngularJS or with JavaScript code, defined as a factory.</source>
          <target state="translated">AngularJSは、以下のような一般的なディレクティブのアニメーションフック提供&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;、および&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt;を経由して、だけでなく、カスタムディレクティブを &lt;code&gt;$animate&lt;/code&gt; サービス。これらのアニメーションフックは、さまざまなディレクティブのライフサイクル中にアニメーションをトリガーするように設定されており、トリガーされると、CSS遷移、CSSキーフレームアニメーション、またはJavaScriptコールバックアニメーション（アニメーションが指定されたディレクティブに配置されているかどうかに応じて）を実行しようとします。 。 AngularJSによって設定された命名規則に従うか、ファクトリとして定義されたJavaScriptコードを使用することにより、バニラCSSを使用してアニメーションを配置できます。</target>
        </trans-unit>
        <trans-unit id="3917cb70aac3e073835c7ae97b53a67291ace6ea" translate="yes" xml:space="preserve">
          <source>AngularJS provides basic implementation for most common HTML5 &lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt; types: (&lt;a href=&quot;../api/ng/input/input%5Btext%5D&quot;&gt;text&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bnumber%5D&quot;&gt;number&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Burl%5D&quot;&gt;url&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bemail%5D&quot;&gt;email&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bdate%5D&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bradio%5D&quot;&gt;radio&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bcheckbox%5D&quot;&gt;checkbox&lt;/a&gt;), as well as some directives for validation (&lt;code&gt;required&lt;/code&gt;, &lt;code&gt;pattern&lt;/code&gt;, &lt;code&gt;minlength&lt;/code&gt;, &lt;code&gt;maxlength&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;).</source>
          <target state="translated">AngularJSは、最も一般的なHTML5 &lt;a href=&quot;../api/ng/directive/input&quot;&gt;入力&lt;/a&gt;タイプの基本的な実装を提供します：（&lt;a href=&quot;../api/ng/input/input%5Btext%5D&quot;&gt;text&lt;/a&gt;、&lt;a href=&quot;../api/ng/input/input%5Bnumber%5D&quot;&gt;number&lt;/a&gt;、&lt;a href=&quot;../api/ng/input/input%5Burl%5D&quot;&gt;url&lt;/a&gt;、&lt;a href=&quot;../api/ng/input/input%5Bemail%5D&quot;&gt;email&lt;/a&gt;、&lt;a href=&quot;../api/ng/input/input%5Bdate%5D&quot;&gt;date&lt;/a&gt;、&lt;a href=&quot;../api/ng/input/input%5Bradio%5D&quot;&gt;radio&lt;/a&gt;、&lt;a href=&quot;../api/ng/input/input%5Bcheckbox%5D&quot;&gt;checkbox&lt;/a&gt;）、および検証のためのいくつかのディレクティブ（ &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;pattern&lt;/code&gt; 、 &lt;code&gt;minlength&lt;/code&gt; 、 &lt;code&gt;maxlength&lt;/code&gt; 、 &lt;code&gt;min&lt;/code&gt; 、 &lt;code&gt;max&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="56f632ed3f689df64ece7da7819dff3bf22b0ccc" translate="yes" xml:space="preserve">
          <source>AngularJS provides specific directives for many events, such as &lt;a href=&quot;ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt;, so in most cases it is not necessary to use &lt;code&gt;ngOn&lt;/code&gt;. However, AngularJS does not support all events (e.g. the &lt;code&gt;drop&lt;/code&gt; event in the example above), and new events might be introduced in later DOM standards.</source>
          <target state="translated">AngularJSは&lt;a href=&quot;ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;などの多くのイベントに特定のディレクティブを提供するため、ほとんどの場合、 &lt;code&gt;ngOn&lt;/code&gt; を使用する必要はありません。ただし、AngularJSはすべてのイベント（たとえば、上記の例の &lt;code&gt;drop&lt;/code&gt; イベント）をサポートしておらず、新しいイベントが後のDOM標準で導入される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ba2758214e55fedd29b874bf821efa5fd7b1f6d5" translate="yes" xml:space="preserve">
          <source>AngularJS provides the following default transformations:</source>
          <target state="translated">AngularJSでは以下のようなデフォルトのトランスフォームが用意されています。</target>
        </trans-unit>
        <trans-unit id="05b59926978c6bbf9d44f2a94498561c9bef96bc" translate="yes" xml:space="preserve">
          <source>AngularJS separates number and datetime format rule sets into different files, each file for a particular locale. You can find a list of currently supported locales &lt;a href=&quot;https://github.com/angular/angular.js/tree/master/src/ngLocale&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">AngularJSは、数値および日時形式のルールセットを異なるファイルに分離します。各ファイルは特定のロケール用です。現在サポートされているロケールのリストは&lt;a href=&quot;https://github.com/angular/angular.js/tree/master/src/ngLocale&quot;&gt;ここにあります&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="edbbd8f92b2e2e904ae46011fc03753d219bc5d3" translate="yes" xml:space="preserve">
          <source>AngularJS services are substitutable objects that are wired together using &lt;a href=&quot;di&quot;&gt;dependency injection (DI)&lt;/a&gt;. You can use services to organize and share code across your app.</source>
          <target state="translated">AngularJSサービスは、&lt;a href=&quot;di&quot;&gt;依存性注入（DI）&lt;/a&gt;を使用して相互に接続された置換可能なオブジェクトです。サービスを使用して、アプリ全体でコードを整理および共有できます。</target>
        </trans-unit>
        <trans-unit id="d69f80a7b3cac2616bf246adcaf4efc8679fe0a9" translate="yes" xml:space="preserve">
          <source>AngularJS services are:</source>
          <target state="translated">AngularJSのサービスは</target>
        </trans-unit>
        <trans-unit id="7422e70c60bc15b4ce5aee88f1fa3d09ecfa4487" translate="yes" xml:space="preserve">
          <source>AngularJS simplifies application development by presenting a higher level of abstraction to the developer. Like any abstraction, it comes at a cost of flexibility. In other words, not every app is a good fit for AngularJS. AngularJS was built with the CRUD application in mind. Luckily CRUD applications represent the majority of web applications. To understand what AngularJS is good at, though, it helps to understand when an app is not a good fit for AngularJS.</source>
          <target state="translated">AngularJSは開発者により高い抽象度を提示することでアプリケーション開発を簡素化します。他の抽象化と同様に、柔軟性を犠牲にしています。言い換えれば、すべてのアプリがAngularJSに適しているわけではありません。AngularJSはCRUDアプリケーションを念頭に置いて作られています。幸運にもCRUDアプリケーションはウェブアプリケーションの大半を占めています。しかし、AngularJSが何を得意としているかを理解するには、アプリがAngularJSに適していない場合を理解するのに役立つ。</target>
        </trans-unit>
        <trans-unit id="fe3ac4e24f01511fd93bb16d06effbc2d6379f34" translate="yes" xml:space="preserve">
          <source>AngularJS strongly relies on contextual escaping for the security of bindings: disabling or modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners, changes to this service will also influence users, so be extra careful and document your changes.</source>
          <target state="translated">AngularJSはバインディングのセキュリティのためにコンテキストエスケープに強く依存しています。これを無効にしたり変更したりするとクロスサイトスクリプティング(XSS)の脆弱性を引き起こす可能性があります。ライブラリの所有者にとっては、このサービスへの変更はユーザーにも影響しますので、特に注意して変更点を文書化してください。</target>
        </trans-unit>
        <trans-unit id="4431411ecab45405bde7dd419d71acb67b3391ca" translate="yes" xml:space="preserve">
          <source>AngularJS supports i18n/l10n for &lt;a href=&quot;../api/ng/filter/date&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/ng/filter/number&quot;&gt;number&lt;/a&gt; and &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;currency&lt;/a&gt; filters.</source>
          <target state="translated">AngularJSは、&lt;a href=&quot;../api/ng/filter/date&quot;&gt;日付&lt;/a&gt;、&lt;a href=&quot;../api/ng/filter/number&quot;&gt;数値&lt;/a&gt;、&lt;a href=&quot;../api/ng/filter/currency&quot;&gt;通貨の&lt;/a&gt;フィルターでi18n / l10nをサポートしています。</target>
        </trans-unit>
        <trans-unit id="3a4ebceac2caf5ebdf9c2c4c4dc59c26f35d27a5" translate="yes" xml:space="preserve">
          <source>AngularJS takes another approach. It attempts to minimize the impedance mismatch between document centric HTML and what an application needs by creating new HTML constructs. AngularJS teaches the browser new syntax through a construct we call &lt;em&gt;directives&lt;/em&gt;. Examples include:</source>
          <target state="translated">AngularJSは別のアプローチを取ります。新しいHTML構造を作成することにより、ドキュメント中心のHTMLとアプリケーションが必要とするものの間のインピーダンスの不一致を最小限に抑えようとします。AngularJSは、&lt;em&gt;ディレクティブ&lt;/em&gt;と呼ばれる構造を通じてブラウザの新しい構文を教えます。例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="769e07375c5ab3bf0b0051ac78640da73f4c7868" translate="yes" xml:space="preserve">
          <source>AngularJS templates work differently. First the template (which is the uncompiled HTML along with any additional markup or directives) is compiled on the browser. The compilation step produces a live view. Any changes to the view are immediately reflected in the model, and any changes in the model are propagated to the view. The model is the single-source-of-truth for the application state, greatly simplifying the programming model for the developer. You can think of the view as simply an instant projection of your model.</source>
          <target state="translated">AngularJSのテンプレートの動作は異なります。最初にテンプレート(コンパイルされていないHTMLと追加のマークアップやディレクティブ)がブラウザ上でコンパイルされます。コンパイルステップではライブビューが生成されます。ビューへの変更はすぐにモデルに反映され、モデルの変更はビューに伝搬されます。モデルはアプリケーションの状態のための単一の真実のソースであり、開発者のためのプログラミングモデルを大幅に簡素化します。ビューは、単にモデルを瞬時に投影したものと考えることができます。</target>
        </trans-unit>
        <trans-unit id="bfc125702fe4d5d98bdb594a33013e8322f09d18" translate="yes" xml:space="preserve">
          <source>AngularJS will detect if it has been loaded into the browser more than once and only allow the first loaded script to be bootstrapped and will report a warning to the browser console for each of the subsequent scripts. This prevents strange results in applications, where otherwise multiple instances of AngularJS try to work on the DOM.</source>
          <target state="translated">AngularJSはブラウザに複数回ロードされたかどうかを検出し、最初にロードされたスクリプトのみブートストラップを許可し、それ以降のスクリプトごとにブラウザコンソールに警告を報告します。これにより、複数のAngularJSインスタンスがDOM上で動作しようとするアプリケーションでの奇妙な結果を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="015dbed2a049b3782ded1815109d25f8af8a31a3" translate="yes" xml:space="preserve">
          <source>AngularJS will strip the prefix, before processing the JSON.</source>
          <target state="translated">AngularJSはJSONを処理する前に接頭辞を削除します。</target>
        </trans-unit>
        <trans-unit id="3086e18c373e1b050a89b62431f812b993b265f5" translate="yes" xml:space="preserve">
          <source>AngularJS's &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;currency filter&lt;/a&gt; allows you to use the default currency symbol from the &lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;locale service&lt;/a&gt;, or you can provide the filter with a custom currency symbol.</source>
          <target state="translated">AngularJSの&lt;a href=&quot;../api/ng/filter/currency&quot;&gt;通貨フィルターを&lt;/a&gt;使用すると、&lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;ロケールサービスの&lt;/a&gt;デフォルトの通貨記号を使用したり、フィルターにカスタム通貨記号を提供したりできます。</target>
        </trans-unit>
        <trans-unit id="a08db1303b33928851568ddd60cd23f21541a8af" translate="yes" xml:space="preserve">
          <source>AngularJS's &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;HTML compiler&lt;/a&gt; allows the developer to teach the browser new HTML syntax. The compiler allows you to attach behavior to any HTML element or attribute and even create new HTML elements or attributes with custom behavior. AngularJS calls these behavior extensions &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">AngularJSの&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;HTMLコンパイラー&lt;/a&gt;により、開発者はブラウザーに新しいHTML構文を教えることができます。コンパイラーを使用すると、任意のHTML要素または属性に動作を関連付けたり、カスタム動作で新しいHTML要素または属性を作成したりすることもできます。AngularJSはこれらの動作拡張&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブを&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="f50b6286f749aa08025813527659c6fc74af40dd" translate="yes" xml:space="preserve">
          <source>AngularJS's jqLite</source>
          <target state="translated">AngularJSのjqLite</target>
        </trans-unit>
        <trans-unit id="e609b570c930b204946ccb899b6f09e78d1083ec" translate="yes" xml:space="preserve">
          <source>AngularJS's sweet spot</source>
          <target state="translated">AngularJSのスイートスポット</target>
        </trans-unit>
        <trans-unit id="18bb073a29d517b8a3a42b434c49bfbd5a2b2a13" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setInterval&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is executed every &lt;code&gt;delay&lt;/code&gt; milliseconds.</source>
          <target state="translated">AngularJSの &lt;code&gt;window.setInterval&lt;/code&gt; のラッパー。 &lt;code&gt;fn&lt;/code&gt; 機能は、すべての実行された &lt;code&gt;delay&lt;/code&gt; ミリ秒。</target>
        </trans-unit>
        <trans-unit id="f3ddbcf960e64f545ec9cb831b76819fde7f2373" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setTimeout&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is wrapped into a try/catch block and delegates any exceptions to &lt;a href=&quot;%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">AngularJSの &lt;code&gt;window.setTimeout&lt;/code&gt; のラッパー。 &lt;code&gt;fn&lt;/code&gt; 機能は、try / catchブロックと代表者に任意の例外にラップされて&lt;a href=&quot;%24exceptionhandler&quot;&gt;$ exceptionHandlerのの&lt;/a&gt;サービス。</target>
        </trans-unit>
        <trans-unit id="e28ca8ee33fee303615de7b48a3ebaeeb4dda2c4" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setTimeout&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is wrapped into a try/catch block and delegates any exceptions to &lt;a href=&quot;service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">AngularJSの &lt;code&gt;window.setTimeout&lt;/code&gt; のラッパー。 &lt;code&gt;fn&lt;/code&gt; 機能は、try / catchブロックと代表者に任意の例外にラップされて&lt;a href=&quot;service/%24exceptionhandler&quot;&gt;$ exceptionHandlerのの&lt;/a&gt;サービス。</target>
        </trans-unit>
        <trans-unit id="edf5ebe5a67b68ae5fca138a2a5dfbc8054af2c8" translate="yes" xml:space="preserve">
          <source>AngularStrap for Bootstrap 3</source>
          <target state="translated">AngularStrap for Bootstrap 3</target>
        </trans-unit>
        <trans-unit id="aba9a35ec9eedc8eb79e6d0f03cd4eef93153ee8" translate="yes" xml:space="preserve">
          <source>Animating between value changes</source>
          <target state="translated">値の変更の間のアニメーション</target>
        </trans-unit>
        <trans-unit id="62afd21e88769f01ba1c9330803baad57564d6e9" translate="yes" xml:space="preserve">
          <source>Animation</source>
          <target state="translated">Animation</target>
        </trans-unit>
        <trans-unit id="7f5f07bd5a091d92689e50573c0da813d4d14d72" translate="yes" xml:space="preserve">
          <source>Animation Anchoring (via ng-animate-ref)</source>
          <target state="translated">アニメーションのアンカリング (via ng-animate-ref)</target>
        </trans-unit>
        <trans-unit id="c77dcdedc0f40e8dac08a08c8bef7255abb90e75" translate="yes" xml:space="preserve">
          <source>Animations</source>
          <target state="translated">Animations</target>
        </trans-unit>
        <trans-unit id="4fe25ebece61799897136d3106b7e79fe6ccfbc5" translate="yes" xml:space="preserve">
          <source>Animations are not available unless you include the &lt;a href=&quot;../api/nganimate&quot;&gt;&lt;code&gt;ngAnimate&lt;/code&gt; module&lt;/a&gt; as a dependency of your application.</source>
          <target state="translated">アプリケーションの依存関係として&lt;a href=&quot;../api/nganimate&quot;&gt; &lt;code&gt;ngAnimate&lt;/code&gt; モジュール&lt;/a&gt;を含めない限り、アニメーションは使用できません。</target>
        </trans-unit>
        <trans-unit id="c0594ee2973edc0be64f9dfa8e39acbf86b8a72a" translate="yes" xml:space="preserve">
          <source>Animations in &lt;code&gt;ngShow&lt;/code&gt;/&lt;code&gt;ngHide&lt;/code&gt; work with the show and hide events that are triggered when the directive expression is true and false. This system works like the animation system present with &lt;code&gt;ngClass&lt;/code&gt; except that you must also include the &lt;code&gt;!important&lt;/code&gt; flag to override the display property so that the elements are not actually hidden during the animation.</source>
          <target state="translated">&lt;code&gt;ngShow&lt;/code&gt; / &lt;code&gt;ngHide&lt;/code&gt; のアニメーションは、ディレクティブ式がtrueおよびfalseの場合にトリガーされるshowおよびhideイベントで機能します。このシステムは、 &lt;code&gt;ngClass&lt;/code&gt; に存在するアニメーションシステムと同様に機能しますが、アニメーション中に要素が実際に非表示にならないように、displayプロパティをオーバーライドする &lt;code&gt;!important&lt;/code&gt; フラグも含める必要があります。</target>
        </trans-unit>
        <trans-unit id="0b2a60876cb65fb0147911bedc0ad0bf15f7d3ff" translate="yes" xml:space="preserve">
          <source>Animations in AngularJS are completely based on CSS classes. As long as you have a CSS class attached to an HTML element within your application, you can apply animations to it. Let's say for example that we have an HTML template with a repeater like so:</source>
          <target state="translated">AngularJSのアニメーションは完全にCSSクラスに基づいています。アプリケーション内のHTML要素にCSSクラスをアタッチしておけば、その要素にアニメーションを適用することができます。例えば、次のようなリピーターを持つHTMLテンプレートがあるとしましょう。</target>
        </trans-unit>
        <trans-unit id="fff49af586e2c4e9b3f2dd501fcc0aaac06fb0d6" translate="yes" xml:space="preserve">
          <source>Animations in ngForm are triggered when any of the associated CSS classes are added and removed. These classes are: &lt;code&gt;.ng-pristine&lt;/code&gt;, &lt;code&gt;.ng-dirty&lt;/code&gt;, &lt;code&gt;.ng-invalid&lt;/code&gt; and &lt;code&gt;.ng-valid&lt;/code&gt; as well as any other validations that are performed within the form. Animations in ngForm are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</source>
          <target state="translated">ngFormのアニメーションは、関連するCSSクラスが追加および削除されるとトリガーされます。これらのクラスは、 &lt;code&gt;.ng-pristine&lt;/code&gt; 、 &lt;code&gt;.ng-dirty&lt;/code&gt; 、 &lt;code&gt;.ng-invalid&lt;/code&gt; 、 &lt;code&gt;.ng-valid&lt;/code&gt; 、およびフォーム内で実行されるその他の検証です。ngFormのアニメーションは、ngClassでの動作に似ており、CSSトランジション、キーフレーム、JSアニメーションを使用してアニメーションをフックできます。</target>
        </trans-unit>
        <trans-unit id="67b5c3728edc0e75f5c55a0c0056f00846acd15f" translate="yes" xml:space="preserve">
          <source>Animations on app bootstrap / page load</source>
          <target state="translated">アプリのブートストラップ/ページロード時のアニメーション</target>
        </trans-unit>
        <trans-unit id="2177639f84412abd63d8ce1ffb0f9712bb859c76" translate="yes" xml:space="preserve">
          <source>Animations within custom directives can also be established by injecting &lt;code&gt;$animate&lt;/code&gt; directly into your directive and making calls to it when needed.</source>
          <target state="translated">カスタムディレクティブ内のアニメーションは、 &lt;code&gt;$animate&lt;/code&gt; をディレクティブに直接挿入し、必要に応じてそれを呼び出すことによっても確立できます。</target>
        </trans-unit>
        <trans-unit id="29559d5d09175ad58fe92108a5edad256c28781a" translate="yes" xml:space="preserve">
          <source>Animations within models are triggered when any of the associated CSS classes are added and removed on the input element which is attached to the model. These classes include: &lt;code&gt;.ng-pristine&lt;/code&gt;, &lt;code&gt;.ng-dirty&lt;/code&gt;, &lt;code&gt;.ng-invalid&lt;/code&gt; and &lt;code&gt;.ng-valid&lt;/code&gt; as well as any other validations that are performed on the model itself. The animations that are triggered within ngModel are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</source>
          <target state="translated">モデル内のアニメーションは、関連するCSSクラスがモデルにアタッチされている入力要素に追加および削除されるとトリガーされます。これらのクラスには、 &lt;code&gt;.ng-pristine&lt;/code&gt; 、 &lt;code&gt;.ng-dirty&lt;/code&gt; 、 &lt;code&gt;.ng-invalid&lt;/code&gt; 、 &lt;code&gt;.ng-valid&lt;/code&gt; 、およびモデル自体で実行されるその他の検証が含まれます。ngModel内でトリガーされるアニメーションはngClassでの動作に似ており、CSSトランジション、キーフレーム、JSアニメーションを使用してアニメーションをフックできます。</target>
        </trans-unit>
        <trans-unit id="1859b1a59db69babc41c14f59a24c34e903944a3" translate="yes" xml:space="preserve">
          <source>Annotated constructor function.</source>
          <target state="translated">アノテートされたコンストラクタ関数。</target>
        </trans-unit>
        <trans-unit id="f2c8d59d42e7c3db1d26f04eb9b0478f66b9b7d5" translate="yes" xml:space="preserve">
          <source>Another scenario is adding a directive programmatically to a compiled element and then executing compile again. See the following &lt;strong&gt;faulty example&lt;/strong&gt;:</source>
          <target state="translated">別のシナリオは、コンパイルされた要素にプログラムでディレクティブを追加してから、コンパイルを再度実行することです。次の&lt;strong&gt;誤った例を&lt;/strong&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="969a0ecaa65eb289d9a2e9d6090f5991d37b5286" translate="yes" xml:space="preserve">
          <source>Another solution is to use a &lt;code&gt;track by&lt;/code&gt; clause, because then &lt;code&gt;ngOptions&lt;/code&gt; will track the identity of the item not by reference, but by the result of the &lt;code&gt;track by&lt;/code&gt; expression. For example, if your collection items have an id property, you would &lt;code&gt;track by item.id&lt;/code&gt;.</source>
          <target state="translated">別の解決策は &lt;code&gt;track by&lt;/code&gt; 句を使用することです。これは、 &lt;code&gt;ngOptions&lt;/code&gt; がアイテムのIDを参照ではなく式 &lt;code&gt;track by&lt;/code&gt; の結果によって追跡するためです。たとえば、コレクションアイテムにidプロパティがある場合 &lt;code&gt;track by item.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35ba7d28b3ce7cc7d01f098476d04b91469e1cbe" translate="yes" xml:space="preserve">
          <source>Another use-case for &lt;code&gt;ngOn&lt;/code&gt; is listening to &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;custom events&lt;/a&gt; fired by &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngOn&lt;/code&gt; のもう 1つの使用例は、&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素&lt;/a&gt;によってトリガーされた&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;カスタムイベントを&lt;/a&gt;リッスンすることです。</target>
        </trans-unit>
        <trans-unit id="c3bdf53bf457c9fc3e92bc2d910f483e037f083e" translate="yes" xml:space="preserve">
          <source>Any JavaScript object (including arrays and primitive types) to filter.</source>
          <target state="translated">フィルタリングする任意の JavaScript オブジェクト (配列やプリミティブ型を含む)。</target>
        </trans-unit>
        <trans-unit id="de4518bc294ed54cea1f8963368f0e3c1241d4ef" translate="yes" xml:space="preserve">
          <source>Any exception emitted from the &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;listeners&lt;/a&gt; will be passed onto the &lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;リスナー&lt;/a&gt;から発行された例外はすべて&lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$ exceptionHandler&lt;/a&gt;サービスに渡されます。</target>
        </trans-unit>
        <trans-unit id="eca8010205016887bae956d6ae88be83c9bd4978" translate="yes" xml:space="preserve">
          <source>Any exceptions from the execution of the expression are forwarded to the &lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">式の実行による&lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;例外&lt;/a&gt;は、$ exceptionHandlerサービスに転送されます。</target>
        </trans-unit>
        <trans-unit id="136f3a6017ec892c22b97b38e6ce1b5592c356e0" translate="yes" xml:space="preserve">
          <source>Any external event on a directive/component will not trigger a digest while the hosting scope is suspended - even if the event handler calls &lt;code&gt;$apply()&lt;/code&gt; or &lt;code&gt;$rootScope.$digest()&lt;/code&gt;.</source>
          <target state="translated">イベントハンドラーが &lt;code&gt;$apply()&lt;/code&gt; または &lt;code&gt;$rootScope.$digest()&lt;/code&gt; 呼び出した場合でも、ホスティングスコープが一時停止されている間、ディレクティブ/コンポーネントの外部イベントはダイジェストをトリガーしません。</target>
        </trans-unit>
        <trans-unit id="6e3b668fd7f49731bcb3c1e067c00ebcd8e78ada" translate="yes" xml:space="preserve">
          <source>Any other characters in the &lt;code&gt;format&lt;/code&gt; string will be output as-is.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 文字列内のその他の文字はそのまま出力されます。</target>
        </trans-unit>
        <trans-unit id="422ef3807aa704fa02f9a1d220d6afe5c46512c0" translate="yes" xml:space="preserve">
          <source>Any pending &lt;code&gt;ngModelOptions&lt;/code&gt; changes will take place immediately when an enclosing form is submitted. Note that &lt;code&gt;ngClick&lt;/code&gt; events will occur before the model is updated. Use &lt;code&gt;ngSubmit&lt;/code&gt; to have access to the updated model.</source>
          <target state="translated">含まれているフォームが送信されると、保留中の &lt;code&gt;ngModelOptions&lt;/code&gt; の変更が直ちに行われます。 &lt;code&gt;ngClick&lt;/code&gt; イベントは、モデルが更新される前に発生することに注意してください。 &lt;code&gt;ngSubmit&lt;/code&gt; を使用して、更新されたモデルにアクセスします。</target>
        </trans-unit>
        <trans-unit id="185b074a10fc46555a5d70fddc56be15b7205ef5" translate="yes" xml:space="preserve">
          <source>Any pending changes will take place immediately when an enclosing form is submitted via the &lt;code&gt;submit&lt;/code&gt; event. Note that &lt;code&gt;ngClick&lt;/code&gt; events will occur before the model is updated. Use &lt;code&gt;ngSubmit&lt;/code&gt; to have access to the updated model.</source>
          <target state="translated">保留中の変更は、 &lt;code&gt;submit&lt;/code&gt; イベントを介して同封のフォームが送信されるとすぐに反映されます。 &lt;code&gt;ngClick&lt;/code&gt; イベントは、モデルが更新される前に発生することに注意してください。 &lt;code&gt;ngSubmit&lt;/code&gt; を使用して、更新されたモデルにアクセスします。</target>
        </trans-unit>
        <trans-unit id="8f782e9cb5bbdcbf217e9814a968f5294ded104d" translate="yes" xml:space="preserve">
          <source>Any time your application needs to react to a change in the current URL or if you want to change the current URL in the browser.</source>
          <target state="translated">アプリケーションが現在の URL の変更に反応する必要がある場合や、ブラウザで現在の URL を変更したい場合はいつでも対応できます。</target>
        </trans-unit>
        <trans-unit id="b848ee45c3ed822427c3aa6d8e5ae09ef5cd1527" translate="yes" xml:space="preserve">
          <source>Any uncaught exception in AngularJS expressions is delegated to this service. The default implementation simply delegates to &lt;code&gt;$log.error&lt;/code&gt; which logs it into the browser console.</source>
          <target state="translated">AngularJS式のキャッチされない例外は、このサービスに委任されます。デフォルトの実装では、ブラウザコンソールにログを記録する &lt;code&gt;$log.error&lt;/code&gt; 委任するだけです。</target>
        </trans-unit>
        <trans-unit id="4b18dc74f28f4ae563b1962fe286aa979fa3353d" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to a[href] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">データバインディングを介してa [href]に割り当てられようとしているURLは、最初に正規化され、絶対URLに変換されます。その後、URLは &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; 正規表現と照合されます。一致するものが見つかった場合、元のURLがDOMに書き込まれます。それ以外の場合、絶対URLには &lt;code&gt;'unsafe:'&lt;/code&gt; 文字列がプレフィックスとして付けられ、その場合にのみDOMに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="66d8a5005f5b7a5ddb9208ba220fe6b30ba308b2" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to a[href] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">データバインディングを介してa [href]に割り当てられるURLは、最初に正規化され、絶対URLに変換されます。その後、URLは &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; 正規表現と照合されます。一致が見つかると、元のURLがDOMに書き込まれます。それ以外の場合、絶対URLの前には &lt;code&gt;'unsafe:'&lt;/code&gt; 文字列が付けられ、その後にのみDOMに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="2946adf5d679433deeba77fd311b6476cc2a4b48" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to img[src] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">データバインディングを介してimg [src]に割り当てられようとしているURLは、最初に正規化され、絶対URLに変換されます。その後、URLは &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; 正規表現と照合されます。一致するものが見つかった場合、元のURLがDOMに書き込まれます。それ以外の場合、絶対URLには &lt;code&gt;'unsafe:'&lt;/code&gt; 文字列がプレフィックスとして付けられ、その場合にのみDOMに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="d3d6dd2884ca2cb0baa2409af0223b0a1c7c139d" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to img[src] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">データバインディングを介してimg [src]に割り当てられるURLは、最初に正規化され、絶対URLに変換されます。その後、URLは &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; 正規表現と照合されます。一致が見つかると、元のURLがDOMに書き込まれます。それ以外の場合、絶対URLの先頭には &lt;code&gt;'unsafe:'&lt;/code&gt; 文字列が付けられ、その後にのみDOMに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="43f5d990f54d41e9398585a561e89b92ddaadd53" translate="yes" xml:space="preserve">
          <source>Apart from the &lt;strong&gt;Top Level Component&lt;/strong&gt; (&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;) which is associated with the &lt;a href=&quot;../service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;, every &lt;strong&gt;Routing Component&lt;/strong&gt; is associated with a &lt;code&gt;ChildRouter&lt;/code&gt;, which manages the routing for that &lt;strong&gt;Routing Component&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt;関連付けられている&lt;strong&gt;最上位コンポーネント&lt;/strong&gt;（$ routerRootComponent）を&lt;a href=&quot;../service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt;、すべての&lt;strong&gt;ルーティングコンポーネント&lt;/strong&gt;は、その&lt;strong&gt;ルーティングコンポーネントの&lt;/strong&gt;ルーティングを管理する &lt;code&gt;ChildRouter&lt;/code&gt; に関連付けられてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e402e007d5cf0eceb8bba2547d33af36db64dcdf" translate="yes" xml:space="preserve">
          <source>Apart from the ternary operator (&lt;code&gt;a ? b : c&lt;/code&gt;), you cannot write a control flow statement in an expression. The reason behind this is core to the AngularJS philosophy that application logic should be in controllers, not the views. If you need a real conditional, loop, or to throw from a view expression, delegate to a JavaScript method instead.</source>
          <target state="translated">三項演算子（ &lt;code&gt;a ? b : c&lt;/code&gt; ）を除いて、式に制御フローステートメントを記述することはできません。この背後にある理由は、アプリケーションロジックはビューではなくコントローラーにあるべきというAngularJSの哲学の核心です。実際の条件、ループ、またはビュー式からスローする必要がある場合は、代わりにJavaScriptメソッドに委任してください。</target>
        </trans-unit>
        <trans-unit id="d71de8152541f4a1b7fda48b87f3fe315656e14c" translate="yes" xml:space="preserve">
          <source>Application Structure</source>
          <target state="translated">アプリケーションの構造</target>
        </trans-unit>
        <trans-unit id="7fe601ec2e88419589f9146418e8e7af8c971aaa" translate="yes" xml:space="preserve">
          <source>Application Structure &amp;amp; Style Guides</source>
          <target state="translated">アプリケーションの構造とスタイルガイド</target>
        </trans-unit>
        <trans-unit id="e47fe9ae51aadfdd2d85b572285710bb9d6644ca" translate="yes" xml:space="preserve">
          <source>Application developers are free to define their own services by registering the service's name and &lt;strong&gt;service factory function&lt;/strong&gt;, with an AngularJS module.</source>
          <target state="translated">アプリケーション開発者は、AngularJSモジュールにサービスの名前と&lt;strong&gt;サービスファクトリ関数を&lt;/strong&gt;登録することで、独自のサービスを自由に定義できます。</target>
        </trans-unit>
        <trans-unit id="157fcee1bf70241b8658bd19f019bbfffbd57a6b" translate="yes" xml:space="preserve">
          <source>Application developers will rarely need to call this method directly. It is used internally, by &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setValidity.html&quot;&gt;NgModelController.$setValidity()&lt;/a&gt;, to propagate a control's validity state to the parent &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">アプリケーション開発者がこのメソッドを直接呼び出す必要はほとんどありません。&lt;a href=&quot;ngmodel.ngmodelcontroller#%24setValidity.html&quot;&gt;NgModelController。$ setValidity（）&lt;/a&gt;によって内部的に使用され、コントロールの有効性の状態を親の &lt;code&gt;FormController&lt;/code&gt; に伝達します。</target>
        </trans-unit>
        <trans-unit id="53162fc7151bee0f7c7ba8c31bf1c2355dfc4550" translate="yes" xml:space="preserve">
          <source>Architecture, file structure, components, one-way dataflow and best practices</source>
          <target state="translated">アーキテクチャ、ファイル構造、コンポーネント、一方向データフロー、ベストプラクティス</target>
        </trans-unit>
        <trans-unit id="c83a0088927a1633acaed10f539ea98bb1e204c3" translate="yes" xml:space="preserve">
          <source>Argument names</source>
          <target state="translated">引数名</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="f2d1a651267110941a7e3eba6df9faa2ed02c04d" translate="yes" xml:space="preserve">
          <source>Array containing URLs whose origins are trusted to receive the XSRF token. See the &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;Security Considerations&lt;/a&gt; sections for more details on XSRF.</source>
          <target state="translated">XSRFトークンの受信が信頼できるURLを含む配列。XSRFの詳細については、&lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;セキュリティに関する考慮事項の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="32c9d1434f0741f3d270e0c58ec7b6e77a762138" translate="yes" xml:space="preserve">
          <source>Array containing service factories for all synchronous or asynchronous &lt;a href=&quot;../service/%24http&quot;&gt;$http&lt;/a&gt; pre-processing of request or postprocessing of responses.</source>
          <target state="translated">すべての同期または非同期の&lt;a href=&quot;../service/%24http&quot;&gt;$ http&lt;/a&gt;要求の前処理または応答の後処理用のサービスファクトリを含む配列。</target>
        </trans-unit>
        <trans-unit id="557b5657af00498abd22b4555192836bb6d9557e" translate="yes" xml:space="preserve">
          <source>Array of config objects for currently pending requests. This is primarily meant to be used for debugging purposes.</source>
          <target state="translated">現在保留中のリクエストのための設定オブジェクトの配列。これは主にデバッグ目的で使用されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="dda0d43b5dd90aadcea7413aa4213f341abd201c" translate="yes" xml:space="preserve">
          <source>Array of expressions that will be individually watched using &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）&lt;/a&gt;を使用して個別に監視される式の配列</target>
        </trans-unit>
        <trans-unit id="16a28eaf7d1396d70aa69a55073aa5ed0d533006" translate="yes" xml:space="preserve">
          <source>Array of functions to execute whenever a change to &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt; has caused a change to &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;&lt;code&gt;$modelValue&lt;/code&gt;&lt;/a&gt;. It is called with no arguments, and its return value is ignored. This can be used in place of additional $watches against the model value.</source>
          <target state="translated">変更したときに実行する関数の配列&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt;に変更引き起こした&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt; &lt;code&gt;$modelValue&lt;/code&gt; &lt;/a&gt;。引数なしで呼び出され、戻り値は無視されます。これは、モデル値に対する追加の$ watchesの代わりに使用できます。</target>
        </trans-unit>
        <trans-unit id="1424ab51b27d79e61339e273ce91fa793a8714e8" translate="yes" xml:space="preserve">
          <source>Array of functions to execute, as a pipeline, whenever the bound ngModel expression changes programmatically. The &lt;code&gt;$formatters&lt;/code&gt; are not called when the value of the control is changed by user interaction.</source>
          <target state="translated">バインドされたngModel式がプログラムによって変更されるたびに、パイプラインとして実行する関数の配列。 &lt;code&gt;$formatters&lt;/code&gt; コントロールの値は、ユーザとの対話によって変更されたときに呼び出されません。</target>
        </trans-unit>
        <trans-unit id="02b2ca54d88c554ca4e1087c37aecbf0eac12226" translate="yes" xml:space="preserve">
          <source>Array of functions to execute, as a pipeline, whenever the control updates the ngModelController with a new &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt; from the DOM, usually via user input. See &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;&lt;code&gt;$setViewValue()&lt;/code&gt;&lt;/a&gt; for a detailed lifecycle explanation. Note that the &lt;code&gt;$parsers&lt;/code&gt; are not called when the bound ngModel expression changes programmatically.</source>
          <target state="translated">通常ユーザー入力を介して、コントロールがDOMからの新しい&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt; ngModelControllerを更新するたびに、パイプラインとして実行する関数の配列。ライフサイクルの詳細な説明については、&lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt; &lt;code&gt;$setViewValue()&lt;/code&gt; &lt;/a&gt;を参照してください。バインドされたngModel式がプログラムで変更された場合、 &lt;code&gt;$parsers&lt;/code&gt; parsersは呼び出されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8aa61e073a4c0baab4b05c142ba71754be4dbe3a" translate="yes" xml:space="preserve">
          <source>Array of keys to assign to regex matches in request url described above.</source>
          <target state="translated">上で説明したリクエストURLにマッチする正規表現に割り当てるキーの配列。</target>
        </trans-unit>
        <trans-unit id="dce6ae97df369ff12e95dc68ff11901fddbd2a92" translate="yes" xml:space="preserve">
          <source>Array of keys to assign to regex matches in request url described on &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$ httpBackendモックに&lt;/a&gt;記述されているリクエストURLの正規表現一致に割り当てるキーの配列。</target>
        </trans-unit>
        <trans-unit id="9c6621304506b22ca9a68ad77ea41a030e17c566" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#debug.html&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24log#debug.html&quot;&gt; &lt;code&gt;debug()&lt;/code&gt; &lt;/a&gt;を使用してログに記録されたメッセージの配列。</target>
        </trans-unit>
        <trans-unit id="57ea05d19a68d43106644cbce6da8d34187676e8" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt; &lt;code&gt;error()&lt;/code&gt; &lt;/a&gt;を使用してログに記録されたメッセージの配列。</target>
        </trans-unit>
        <trans-unit id="8151a9ffd2283d4619d532eaaac736b5d01ab54f" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#info.html&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24log#info.html&quot;&gt; &lt;code&gt;info()&lt;/code&gt; &lt;/a&gt;を使用してログに記録されたメッセージの配列。</target>
        </trans-unit>
        <trans-unit id="69d8c243e53bd946f150a38a73b18a8f0819eed0" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#log.html&quot;&gt;&lt;code&gt;log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24log#log.html&quot;&gt; &lt;code&gt;log()&lt;/code&gt; &lt;/a&gt;を使用してログに記録されたメッセージの配列。</target>
        </trans-unit>
        <trans-unit id="787bf1b8fa54bd835ba5079f6b4ece639ed7b9ed" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#warn.html&quot;&gt;&lt;code&gt;warn()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24log#warn.html&quot;&gt; &lt;code&gt;warn()&lt;/code&gt; &lt;/a&gt;を使用してログに記録されたメッセージの配列。</target>
        </trans-unit>
        <trans-unit id="0fb4bcb40bc5316de7a202017017eaefa3df7c7b" translate="yes" xml:space="preserve">
          <source>Array/array-like, string or number to be limited.</source>
          <target state="translated">配列/配列のようなもの、文字列や数を制限するもの。</target>
        </trans-unit>
        <trans-unit id="647955f61de2f76c3b41b2e5804a604deead0bcb" translate="yes" xml:space="preserve">
          <source>Articles, Videos, and Projects</source>
          <target state="translated">記事、ビデオ、プロジェクト</target>
        </trans-unit>
        <trans-unit id="7275de9628a1cc80191841f09611cfb2af505dfb" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;ngRepeat&lt;/code&gt; does its thing, each time a new item is added into the list, &lt;code&gt;ngRepeat&lt;/code&gt; will add an &lt;code&gt;ng-enter&lt;/code&gt; class to the element that is being added. When removed it will apply an &lt;code&gt;ng-leave&lt;/code&gt; class and when moved around it will apply an &lt;code&gt;ng-move&lt;/code&gt; class.</source>
          <target state="translated">以下のよう &lt;code&gt;ngRepeat&lt;/code&gt; はそのことをし、新しい項目がリストに追加されるたびに、 &lt;code&gt;ngRepeat&lt;/code&gt; が追加されます &lt;code&gt;ng-enter&lt;/code&gt; 追加されている要素にクラスを。削除すると &lt;code&gt;ng-leave&lt;/code&gt; クラスが適用され、 &lt;code&gt;ng-move&lt;/code&gt; するとng-moveクラスが適用されます。</target>
        </trans-unit>
        <trans-unit id="0695df435dac0ab2843253e78e2827b4f1a7f956" translate="yes" xml:space="preserve">
          <source>As a best practice, consider adding an &lt;code&gt;ng-strict-di&lt;/code&gt; directive on the same element as &lt;code&gt;ng-app&lt;/code&gt;:</source>
          <target state="translated">ベストプラクティスとして、 &lt;code&gt;ng-app&lt;/code&gt; と同じ要素に &lt;code&gt;ng-strict-di&lt;/code&gt; ディレクティブを追加することを検討してください：</target>
        </trans-unit>
        <trans-unit id="e65d701eca158f6dc26450435f4a299e994565af" translate="yes" xml:space="preserve">
          <source>As a result of &lt;code&gt;ngBind&lt;/code&gt;, &lt;code&gt;ngBindHtml&lt;/code&gt; or &lt;code&gt;{{...}}&lt;/code&gt; interpolations, binding data and CSS class &lt;code&gt;ng-binding&lt;/code&gt; are attached to the corresponding element.</source>
          <target state="translated">結果として &lt;code&gt;ngBind&lt;/code&gt; 、 &lt;code&gt;ngBindHtml&lt;/code&gt; または &lt;code&gt;{{...}}&lt;/code&gt; 補間、結合データおよびCSSクラス &lt;code&gt;ng-binding&lt;/code&gt; 対応する要素に取り付けられています。</target>
        </trans-unit>
        <trans-unit id="67db5c7bc5d719b0ac857083a55a856d06e77a01" translate="yes" xml:space="preserve">
          <source>As a result of that, &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; creates new scope and reinstantiates the controller.</source>
          <target state="translated">その結果、&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;は新しいスコープを作成し、コントローラーを再インスタンス化します。</target>
        </trans-unit>
        <trans-unit id="2325450d98839f1a7cf5c6905e3d4f5721cb3fd3" translate="yes" xml:space="preserve">
          <source>As already mentioned in the intro, the Provider recipe is the core recipe type and all the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe with the most abilities, but for most services it's overkill.</source>
          <target state="translated">イントロですでに述べたように、プロバイダレシピはコアレシピタイプであり、他のすべてのレシピタイプはその上にある構文上の砂糖です。最も多くの能力を持つ最も冗長なレシピですが、ほとんどのサービスにとってはやりすぎです。</target>
        </trans-unit>
        <trans-unit id="6ef852d71fd5d9cc1d2ec23dccfd5e8aa5b6791e" translate="yes" xml:space="preserve">
          <source>As already mentioned, the component helper makes it easier to structure your application with a component-based architecture. But what makes a component beyond the options that the component helper has?</source>
          <target state="translated">すでに述べたように、コンポーネントヘルパーは、コンポーネントベースのアーキテクチャでアプリケーションを簡単に構造化することができます。しかし、コンポーネントヘルパーが持っているオプションを超えたコンポーネントとは何でしょうか?</target>
        </trans-unit>
        <trans-unit id="66190f01e31088a12a65092a98ca24475f550877" translate="yes" xml:space="preserve">
          <source>As an array of injection names, where the last item in the array is the function to call.</source>
          <target state="translated">インジェクション名の配列として、配列の最後の項目が呼び出す関数となります。</target>
        </trans-unit>
        <trans-unit id="ab19f6eb4ea00d87f713b79c4d8c813abaeab501" translate="yes" xml:space="preserve">
          <source>As an example, &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt; uses &lt;a href=&quot;%24sce#parseAsHtml.html&quot;&gt;$sce.parseAsHtml(binding expression)&lt;/a&gt;. Here's the actual code (slightly simplified):</source>
          <target state="translated">例として、&lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt;は&lt;a href=&quot;%24sce#parseAsHtml.html&quot;&gt;$ sce.parseAsHtml（binding expression）を使用し&lt;/a&gt;ます。これが実際のコードです（少し単純化されています）：</target>
        </trans-unit>
        <trans-unit id="07153bae5bff22d9000ae9eab846630c563316f9" translate="yes" xml:space="preserve">
          <source>As applications grow in size and complexity, it becomes unrealistic to rely on manual testing to verify the correctness of new features, catch bugs and notice regressions. Unit tests are the first line of defense for catching bugs, but sometimes issues come up with integration between components which can't be captured in a unit test. End-to-end tests are made to find these problems.</source>
          <target state="translated">アプリケーションのサイズが大きくなり複雑になるにつれ、新機能の正しさを検証したり、バグを捕まえたり、リグレッションに気づいたりするために、手動テストに頼ることは非現実的になってきました。ユニットテストはバグを捕まえるための最初の防御線ですが、ユニットテストでは捕捉できないコンポーネント間の統合に問題が生じることがあります。エンドツーエンドテストは、これらの問題を発見するために作られています。</target>
        </trans-unit>
        <trans-unit id="6d7a55120448d479c287c566c8d98fb08b5ccd50" translate="yes" xml:space="preserve">
          <source>As discussed in the &lt;a href=&quot;concepts&quot;&gt;Concepts&lt;/a&gt; section of this guide, any objects (or primitives) assigned to the scope become model properties. Any methods assigned to the scope are available in the template/view, and can be invoked via AngularJS expressions and &lt;code&gt;ng&lt;/code&gt; event handler directives (e.g. &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ngClick&lt;/a&gt;).</source>
          <target state="translated">このガイドの&lt;a href=&quot;concepts&quot;&gt;「概念」&lt;/a&gt;セクションで説明したように、スコープに割り当てられたオブジェクト（またはプリミティブ）はモデルプロパティになります。スコープに割り当てられたメソッドはすべてテンプレート/ビューで使用でき、AngularJS式と &lt;code&gt;ng&lt;/code&gt; イベントハンドラーディレクティブ（&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ngClickなど&lt;/a&gt;）を介して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="543566b9bcbd90fce5b7b69e2eb29f4197ad9e3d" translate="yes" xml:space="preserve">
          <source>As mentioned in the syntax for plural and select, the embedded messages can contain AngularJS interpolation syntax. Since you can use MessageFormat extensions in AngularJS interpolation, this allows you to nest plural and gender expressions in any order.</source>
          <target state="translated">複数形やselectの構文で述べたように、埋め込まれたメッセージにはAngularJSの補間構文を含めることができます。AngularJSの補間ではMessageFormatの拡張機能を使うことができるので、複数形や性別表現を任意の順番で入れ子にすることができます。</target>
        </trans-unit>
        <trans-unit id="a72e1e24aff22427a315dbc60e5118663742eedc" translate="yes" xml:space="preserve">
          <source>As new &lt;code&gt;action&lt;/code&gt;s are inserted, the template &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element needs to be cloned and inserted into &lt;code&gt;ul&lt;/code&gt;. But cloning the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is not enough. It also needs to compile the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; so that its directives, like &lt;code&gt;{{action.description}}&lt;/code&gt;, evaluate against the right &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">新しい &lt;code&gt;action&lt;/code&gt; が挿入されると、テンプレートの &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素を複製して &lt;code&gt;ul&lt;/code&gt; に挿入する必要があります。ただし、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素の複製だけでは不十分です。また、 &lt;code&gt;{{action.description}}&lt;/code&gt; &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; をコンパイルして、{{action.description}}などのディレクティブが適切な&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;スコープ&lt;/a&gt;に対して評価されるようにする必要もあります。</target>
        </trans-unit>
        <trans-unit id="0ec13f23302b7d1dd1ac45a02e83f66da3e707c4" translate="yes" xml:space="preserve">
          <source>As of version 1.2, AngularJS ships with SCE enabled by default.</source>
          <target state="translated">バージョン1.2では、AngularJSはデフォルトでSCEを有効にして出荷されています。</target>
        </trans-unit>
        <trans-unit id="b8080a15a0ddec2d77c43863b3384640745b7f2b" translate="yes" xml:space="preserve">
          <source>As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application is being developed with the real backend api replaced with a mock, it is often desirable for certain category of requests to bypass the mock and issue a real http request (e.g. to fetch templates or static files from the webserver). To configure the backend with this behavior use the &lt;code&gt;passThrough&lt;/code&gt; request handler of &lt;code&gt;when&lt;/code&gt; instead of &lt;code&gt;respond&lt;/code&gt;.</source>
          <target state="translated">ユニットテストとは対照的に、エンドツーエンドのテストシナリオまたは実際のバックエンドAPIをモックに置き換えてアプリケーションを開発しているシナリオでは、特定のカテゴリのリクエストがモックをバイパスして発行することが望ましい場合がよくあります。実際のhttpリクエスト（例：ウェブサーバーからテンプレートまたは静的ファイルを取得するため）。この動作でバックエンドを設定するには使用し &lt;code&gt;passThrough&lt;/code&gt; の要求ハンドラの代わりに &lt;code&gt;respond&lt;/code&gt; 。 &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f031cf7748d485e3e97d83ef88851314a68f2046" translate="yes" xml:space="preserve">
          <source>As the name suggests, the &lt;strong&gt;isolate scope&lt;/strong&gt; of the directive isolates everything except models that you've explicitly added to the &lt;code&gt;scope: {}&lt;/code&gt; hash object. This is helpful when building reusable components because it prevents a component from changing your model state except for the models that you explicitly pass in.</source>
          <target state="translated">名前が示すように、ディレクティブの分離&lt;strong&gt;スコープ&lt;/strong&gt;は、&lt;strong&gt;スコープ&lt;/strong&gt;に明示的に追加したモデルを除くすべてを分離します &lt;code&gt;scope: {}&lt;/code&gt; ハッシュオブジェクト。これは、コンポーネントが明示的に渡したモデルを除いてモデルの状態を変更できないため、再利用可能なコンポーネントを構築するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1d9cf083e1eebce068119ed3315973988cd233c8" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;repeated-item&lt;/code&gt; class is present on the element that will be repeated and this class will be used as a reference within our application's CSS and/or JavaScript animation code to tell AngularJS to perform an animation.</source>
          <target state="translated">ご覧のように、 &lt;code&gt;repeated-item&lt;/code&gt; 要素にはrepeated-itemクラスがあり、このクラスは、アプリケーションのCSSおよび/またはJavaScriptアニメーションコード内の参照として使用され、AngularJSにアニメーションを実行するように指示します。</target>
        </trans-unit>
        <trans-unit id="de4fc7d19e5e0a6d0ac18488a8fccba793d3b358" translate="yes" xml:space="preserve">
          <source>Asking for dependencies solves the issue of hard coding, but it also means that the injector needs to be passed throughout the application. Passing the injector breaks the &lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;. To remedy this, we use a declarative notation in our HTML templates, to hand the responsibility of creating components over to the injector, as in this example:</source>
          <target state="translated">依存関係を要求することで、ハードコーディングの問題が解決しますが、アプリケーション全体でインジェクターを渡す必要があることも意味します。インジェクターを通過すると&lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;、デメテル&lt;/a&gt;の法則が破られます。これを修正するには、次の例のように、HTMLテンプレートで宣言表記を使用して、コンポーネントを作成する責任をインジェクターに渡します。</target>
        </trans-unit>
        <trans-unit id="924e7c843e8dc1ba6a3d43d631bd9b63c95a1131" translate="yes" xml:space="preserve">
          <source>Asking for dependencies solves the issue of hard coding, but it also means that the injector needs to be passed throughout the application. Passing the injector breaks the &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;. To remedy this, we use a declarative notation in our HTML templates, to hand the responsibility of creating components over to the injector, as in this example:</source>
          <target state="translated">依存関係を要求すると、ハードコーディングの問題が解決されますが、インジェクターをアプリケーション全体に渡す必要があることも意味します。インジェクターを通過すると&lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;、デメテル&lt;/a&gt;の法則が破られます。これを修正するために、次の例のように、HTMLテンプレートで宣言型表記を使用して、コンポーネントを作成する責任をインジェクターに渡します。</target>
        </trans-unit>
        <trans-unit id="602dca52ef2fb38805f8af26bdf588f7fcb1e4e4" translate="yes" xml:space="preserve">
          <source>Assert that all of the logging methods have no logged messages. If any messages are present, an exception is thrown.</source>
          <target state="translated">すべてのロギング・メソッドには、ログに記録されたメッセージがないことを保証します。メッセージがある場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="0e32c36e98ffeeb8e37e062d05cb463a7f175dbe" translate="yes" xml:space="preserve">
          <source>Assignable AngularJS expression to data-bind to.</source>
          <target state="translated">データをバインドするためのAngularJS式を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="fa624932ddb296ac5007e5591dd9bfb041b6cb1e" translate="yes" xml:space="preserve">
          <source>Assigning a property to &lt;code&gt;$scope&lt;/code&gt; creates or updates the model.</source>
          <target state="translated">プロパティを &lt;code&gt;$scope&lt;/code&gt; 割り当てると、モデルが作成または更新されます。</target>
        </trans-unit>
        <trans-unit id="adc58ef773100f1ac890b76704547adbe78e189d" translate="yes" xml:space="preserve">
          <source>Associates the provided element with a host parent element to allow the element to be animated even if it exists outside of the DOM structure of the AngularJS application. By doing so, any animation triggered via &lt;code&gt;$animate&lt;/code&gt; can be issued on the element despite being outside the realm of the application or within another application. Say for example if the application was bootstrapped on an element that is somewhere inside of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, but we wanted to allow for an element to be situated as a direct child of &lt;code&gt;document.body&lt;/code&gt;, then this can be achieved by pinning the element via &lt;code&gt;$animate.pin(element)&lt;/code&gt;. Keep in mind that calling &lt;code&gt;$animate.pin(element, parentElement)&lt;/code&gt; will not actually insert into the DOM anywhere; it will just create the association.</source>
          <target state="translated">提供された要素をホストの親要素に関連付けて、AngularJSアプリケーションのDOM構造の外部に存在する場合でも要素をアニメーション化できるようにします。そうすることで、 &lt;code&gt;$animate&lt;/code&gt; を介してトリガーされたアニメーションは、アプリケーションの領域外または別のアプリケーション内であっても、要素で発行できます。たとえば、アプリケーションが &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグ内のどこかにある要素でブートストラップされたが、要素を &lt;code&gt;document.body&lt;/code&gt; の直接の子として配置できるようにしたい場合、これは、経由要素 &lt;code&gt;$animate.pin(element)&lt;/code&gt; 。 &lt;code&gt;$animate.pin(element, parentElement)&lt;/code&gt; を呼び出すことに注意してください実際にはDOMに挿入されません。関連付けを作成するだけです。</target>
        </trans-unit>
        <trans-unit id="8a319250e7a62a6449653025f2ab2f88895ac77d" translate="yes" xml:space="preserve">
          <source>Asynchronous Loading</source>
          <target state="translated">非同期ローディング</target>
        </trans-unit>
        <trans-unit id="5bbd06015f69fbcbcdb24725f6bb1567275ce22b" translate="yes" xml:space="preserve">
          <source>At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's &lt;strong&gt;HTML compiler&lt;/strong&gt; (&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt;) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.</source>
          <target state="translated">大まかに言えば、ディレクティブはDOM要素（属性、要素名、コメント、CSSクラスなど）のマーカーであり、AngularJSの&lt;strong&gt;HTMLコンパイラ&lt;/strong&gt;（&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt;）に、指定された動作をそのDOM要素に（たとえば、イベントリスナーを介して）アタッチするように指示します。 、またはDOM要素とその子を変換します。</target>
        </trans-unit>
        <trans-unit id="fded031893dd4b58525b3e28e5c62e3f06e82a91" translate="yes" xml:space="preserve">
          <source>At first glance, it looks like removing the original &lt;code&gt;addMouseover&lt;/code&gt; attribute is all there is needed to make this example work. However, if the directive element or its children have other directives attached, they will be compiled and linked again, because the compiler doesn't keep track of which directives have been assigned to which elements.</source>
          <target state="translated">一見すると、この例を機能させるために必要なのは、元の &lt;code&gt;addMouseover&lt;/code&gt; 属性を削除することだけです。ただし、ディレクティブ要素またはその子に他のディレクティブがアタッチされている場合、コンパイラーはどのディレクティブがどの要素に割り当てられたかを追跡しないため、それらは再度コンパイルおよびリンクされます。</target>
        </trans-unit>
        <trans-unit id="16d656728db993e2d91d65f16fd40b8735a327f3" translate="yes" xml:space="preserve">
          <source>At first it might not be obvious why this extra complexity is worth the trouble. The payoff comes in the way of guarantees that promise and deferred APIs make, see &lt;a href=&quot;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&quot;&gt;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&lt;/a&gt;.</source>
          <target state="translated">最初は、この余分な複雑さが問題の価値がある理由は明らかではないかもしれません。見返りは、約束したAPIと据え置きAPIが行う保証の邪魔になります&lt;a href=&quot;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&quot;&gt;。https：//github.com/kriskowal/uncommonjs/blob/master/promises/specification.mdを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e100b35ab6c0fe1f3d2cdccfdad5402c15024472" translate="yes" xml:space="preserve">
          <source>At runtime the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; watches the expression and as items are added to the array it clones the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, creates a new &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; for the cloned &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element and calls the link function on the cloned &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">実行時に&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; は、&lt;/a&gt;式を監視し、アイテムが配列に追加されているように、クローン &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 、要素を新たに作成し、&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;スコープ&lt;/a&gt;にクローン化のための &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素をクローニングした上で、リンク関数を呼び出します &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31dab9e3efd9dd8deab1758a62454f3f213bdba8" translate="yes" xml:space="preserve">
          <source>At runtime: &lt;a href=&quot;../api/ng/service/%24animate#enabled.html&quot;&gt;$animate.enabled()&lt;/a&gt;</source>
          <target state="translated">実行時：&lt;a href=&quot;../api/ng/service/%24animate#enabled.html&quot;&gt;$ animate.enabled（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f67e221630aa693d76075a22c1ba1f64147ff501" translate="yes" xml:space="preserve">
          <source>At the end of &lt;code&gt;$apply&lt;/code&gt;, AngularJS performs a &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle on the root scope, which then propagates throughout all child scopes. During the &lt;code&gt;$digest&lt;/code&gt; cycle, all &lt;code&gt;$watch&lt;/code&gt;ed expressions or functions are checked for model mutation and if a mutation is detected, the &lt;code&gt;$watch&lt;/code&gt; listener is called.</source>
          <target state="translated">&lt;code&gt;$apply&lt;/code&gt; の最後に、AngularJSはルートスコープで&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;サイクルを実行し、その後、すべての子スコープ全体に伝播します。中に &lt;code&gt;$digest&lt;/code&gt; サイクル、すべての &lt;code&gt;$watch&lt;/code&gt; エド式または関数は、モデルの突然変異のためにチェックされ、変異が検出された場合、 &lt;code&gt;$watch&lt;/code&gt; リスナーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="811060f5b400ba59f43a01f37e35d2b7526adfec" translate="yes" xml:space="preserve">
          <source>At this point you may wonder why the compile process has separate compile and link phases. The short answer is that compile and link separation is needed any time a change in a model causes a change in the &lt;strong&gt;structure&lt;/strong&gt; of the DOM.</source>
          <target state="translated">この時点で、コンパイルプロセスにコンパイルフェーズとリンクフェーズが別々になっているのはなぜでしょうか。簡単に言えば、モデルの変更によってDOMの&lt;strong&gt;構造&lt;/strong&gt;が変更されるたびに、コンパイルとリンクの分離が必要になるということです。</target>
        </trans-unit>
        <trans-unit id="7d38f6daaef849032ab49cae508751fbd896de2c" translate="yes" xml:space="preserve">
          <source>Attaching new behavior to DOM elements, such as DOM event handling.</source>
          <target state="translated">DOM のイベント処理など、DOM 要素に新しい動作を追加します。</target>
        </trans-unit>
        <trans-unit id="f18ef5bd3a9704f6d7f339924ddd7e7a2c353300" translate="yes" xml:space="preserve">
          <source>Attribute values are not merged</source>
          <target state="translated">属性値はマージされません</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="9cf83f638488303498c3d24f3e3e27d978f4e28e" translate="yes" xml:space="preserve">
          <source>Attributes such as &lt;code&gt;disabled&lt;/code&gt; are called &lt;code&gt;boolean&lt;/code&gt; attributes, because their presence means &lt;code&gt;true&lt;/code&gt; and their absence means &lt;code&gt;false&lt;/code&gt;. We cannot use normal attribute bindings with them, because the HTML specification does not require browsers to preserve the values of boolean attributes. This means that if we put an AngularJS interpolation expression into such an attribute then the binding information would be lost, because the browser ignores the attribute value.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; などの属性は、存在が &lt;code&gt;true&lt;/code&gt; を意味し、不在が &lt;code&gt;false&lt;/code&gt; を意味するため、 &lt;code&gt;boolean&lt;/code&gt; 属性と呼ばれます。 HTML仕様ではブラウザがブール属性の値を保持する必要がないため、通常の属性バインディングは使用できません。これは、AngularJS補間式をそのような属性に入れると、ブラウザーが属性値を無視するため、バインディング情報が失われることを意味します。</target>
        </trans-unit>
        <trans-unit id="ec94b23d4cf5e5552507a5899b9e011b45a154d6" translate="yes" xml:space="preserve">
          <source>Augment the $delegate</source>
          <target state="translated">委任状を拡張します。</target>
        </trans-unit>
        <trans-unit id="41869ae502e1528f5e860a994dc5f7a5715f3cc3" translate="yes" xml:space="preserve">
          <source>Automatic Initialization</source>
          <target state="translated">自動初期化</target>
        </trans-unit>
        <trans-unit id="cf01601ec7b755876c4207df91db99430e5fd491" translate="yes" xml:space="preserve">
          <source>Automatic value adjustment also means that a range input element can never have the &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, or &lt;code&gt;max&lt;/code&gt; errors.</source>
          <target state="translated">自動値調整は、範囲入力要素に &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;min&lt;/code&gt; 、または &lt;code&gt;max&lt;/code&gt; エラーが発生しないことも意味します。</target>
        </trans-unit>
        <trans-unit id="1105b837870d87e705ed3933cf58b23765b1ac5f" translate="yes" xml:space="preserve">
          <source>Available task types:</source>
          <target state="translated">利用可能なタスクの種類。</target>
        </trans-unit>
        <trans-unit id="b158354eab7dcfad40f037bfff4be8583770ec91" translate="yes" xml:space="preserve">
          <source>Back to the initial question: How does the &lt;code&gt;InvoiceController&lt;/code&gt; get a reference to the &lt;code&gt;currencyConverter&lt;/code&gt; function? In AngularJS, this is done by simply defining arguments on the constructor function. With this, the injector is able to create the objects in the right order and pass the previously created objects into the factories of the objects that depend on them. In our example, the &lt;code&gt;InvoiceController&lt;/code&gt; has an argument named &lt;code&gt;currencyConverter&lt;/code&gt;. By this, AngularJS knows about the dependency between the controller and the service and calls the controller with the service instance as argument.</source>
          <target state="translated">最初の質問に &lt;code&gt;InvoiceController&lt;/code&gt; ます。InvoiceControllerはどのように &lt;code&gt;currencyConverter&lt;/code&gt; 関数への参照を取得しますか？ AngularJSでは、これはコンストラクタ関数で引数を定義するだけで行われます。これにより、インジェクターはオブジェクトを正しい順序で作成し、以前に作成したオブジェクトを、それらに依存するオブジェクトのファクトリーに渡すことができます。この例では、 &lt;code&gt;InvoiceController&lt;/code&gt; には &lt;code&gt;currencyConverter&lt;/code&gt; という名前の引数があります。これにより、AngularJSはコントローラーとサービス間の依存関係を認識し、サービスインスタンスを引数としてコントローラーを呼び出します。</target>
        </trans-unit>
        <trans-unit id="d9c883a905731bc3ab1e5b1797dcc17a576c4565" translate="yes" xml:space="preserve">
          <source>Back to top</source>
          <target state="translated">トップへ戻る</target>
        </trans-unit>
        <trans-unit id="667908f902838bdc241aa234ee74229ead2f1562" translate="yes" xml:space="preserve">
          <source>Backend definitions</source>
          <target state="translated">バックエンドの定義</target>
        </trans-unit>
        <trans-unit id="dd04a0ffb87db83b44ae4c32b0c0f5c8813e323e" translate="yes" xml:space="preserve">
          <source>Backend definitions allow you to define a fake backend for your application which doesn't assert if a particular request was made or not, it just returns a trained response if a request is made. The test will pass whether or not the request gets made during testing.</source>
          <target state="translated">バックエンドの定義では、特定のリクエストが行われたかどうかを保証することなく、リクエストが行われた場合に訓練されたレスポンスを返すだけの、アプリケーション用の偽のバックエンドを定義することができます。テストは、テスト中にリクエストが行われたかどうかに関わらず通過します。</target>
        </trans-unit>
        <trans-unit id="59f299125e1e43938ff9695b8c50f5b33268fea4" translate="yes" xml:space="preserve">
          <source>Base href constraints</source>
          <target state="translated">ベースの href 制約</target>
        </trans-unit>
        <trans-unit id="f8401938c390cf3e82bf20e8f5b954ce826b2925" translate="yes" xml:space="preserve">
          <source>Based on the context, other options may exist to mark a value as trusted / configure the behavior of &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt;. For example, to restrict the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context to specific origins, use the &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;resourceUrlBlacklist()&lt;/a&gt;.</source>
          <target state="translated">コンテキストに基づいて、他のオプションが存在し、値を信頼済みとしてマークする、または&lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;動作を構成することができます。たとえば、 &lt;code&gt;RESOURCE_URL&lt;/code&gt; コンテキストを特定のオリジンに制限するには、&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist（）&lt;/a&gt;および&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;resourceUrlBlacklist（）を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="966128c4ac23ffe813426a6e232622f047cdaa69" translate="yes" xml:space="preserve">
          <source>Based on the context, other options may exist to mark a value as trusted / configure the behavior of &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt;. For example, to restrict the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context to specific origins, use the &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList()&lt;/a&gt;.</source>
          <target state="translated">コンテキストに基づいて、値を信頼できるものとしてマークする/ &lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;動作を構成する他のオプションが存在する場合があります。たとえば、 &lt;code&gt;RESOURCE_URL&lt;/code&gt; コンテキストを特定のオリジンに制限するには、&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList（）&lt;/a&gt;および&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList（）を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="aa2c96dacf00c451ef465f6115a45a20bccf1256" translate="yes" xml:space="preserve">
          <source>Basic</source>
          <target state="translated">Basic</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="a630ca8deb35f0b3fd6f775e263194a67f9726ee" translate="yes" xml:space="preserve">
          <source>Basic transclusion</source>
          <target state="translated">基本的なトランスクルージョン</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="a8f4a3a1f0d4e06e71d9546076fd38b396b53d8c" translate="yes" xml:space="preserve">
          <source>Be aware that a scope may not be included in digests if it has a suspended ancestor, even if &lt;code&gt;$isSuspended()&lt;/code&gt; returns false.</source>
          <target state="translated">&lt;code&gt;$isSuspended()&lt;/code&gt; がfalseを返しても、祖先が一時停止している場合、スコープがダイジェストに含まれない場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="eb178cd3edcfd7946fd6725c07d458de69029a68" translate="yes" xml:space="preserve">
          <source>Be aware that the attribute values to match against cannot be expressions. They are interpreted as literal string values to match against. For example, &lt;strong&gt;&lt;code&gt;ng-switch-when=&quot;someVal&quot;&lt;/code&gt;&lt;/strong&gt; will match against the string &lt;code&gt;&quot;someVal&quot;&lt;/code&gt; not against the value of the expression &lt;code&gt;$scope.someVal&lt;/code&gt;.</source>
          <target state="translated">照合する属性値を式にすることはできないことに注意してください。それらは、照合するリテラル文字列値として解釈されます。たとえば、&lt;strong&gt; &lt;code&gt;ng-switch-when=&quot;someVal&quot;&lt;/code&gt; &lt;/strong&gt;は、文字列 &lt;code&gt;&quot;someVal&quot;&lt;/code&gt; と一致しますが、式 &lt;code&gt;$scope.someVal&lt;/code&gt; 値とは一致しません。</target>
        </trans-unit>
        <trans-unit id="d57c89c178c1084f792baa907f8b2cd67bfc1260" translate="yes" xml:space="preserve">
          <source>Be aware that the controller will be instantiated and attached to the scope as specified in the component definition object. If you do not provide a &lt;code&gt;$scope&lt;/code&gt; object in the &lt;code&gt;locals&lt;/code&gt; param then the helper will create a new isolated scope as a child of &lt;code&gt;$rootScope&lt;/code&gt;.</source>
          <target state="translated">コントローラはインスタンス化され、コンポーネント定義オブジェクトで指定されたスコープにアタッチされることに注意してください。 &lt;code&gt;locals&lt;/code&gt; パラメータに &lt;code&gt;$scope&lt;/code&gt; オブジェクトを指定しない場合、ヘルパーは新しい分離スコープを &lt;code&gt;$rootScope&lt;/code&gt; 子として作成します。</target>
        </trans-unit>
        <trans-unit id="6ed3cc776f278e962e755c71673491d092cfea71" translate="yes" xml:space="preserve">
          <source>Be aware that, before AngularJS 1.7.0, &lt;code&gt;a[href]&lt;/code&gt; and &lt;code&gt;img[src]&lt;/code&gt; used to sanitize their interpolated values directly rather than rely upon &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;&lt;code&gt;$sce.getTrusted&lt;/code&gt;&lt;/a&gt;. &lt;strong&gt;As of 1.7.0, this is no longer the case.&lt;/strong&gt; Now such interpolations are marked as requiring &lt;code&gt;$sce.URL&lt;/code&gt; (for &lt;code&gt;a[href]&lt;/code&gt;) or &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; (for &lt;code&gt;img[src]&lt;/code&gt;), so that the sanitization happens (via &lt;code&gt;$sce.getTrusted...&lt;/code&gt;) when the &lt;code&gt;$interpolate&lt;/code&gt; service evaluates the expressions.</source>
          <target state="translated">AngularJS 1.7.0以前では、 &lt;code&gt;a[href]&lt;/code&gt; と &lt;code&gt;img[src]&lt;/code&gt; は、&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt; &lt;code&gt;$sce.getTrusted&lt;/code&gt; &lt;/a&gt;依存するのではなく、補間された値を直接サニタイズするために使用されていたことに注意してください。&lt;strong&gt;1.7.0以降、これは当てはまりません。&lt;/strong&gt;現在、そのような補間は &lt;code&gt;$sce.URL&lt;/code&gt; （ &lt;code&gt;a[href]&lt;/code&gt; ）または &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; （ &lt;code&gt;img[src]&lt;/code&gt; ）を必要とするようにマークされているため、 &lt;code&gt;$interpolate&lt;/code&gt; 際に（ &lt;code&gt;$sce.getTrusted...&lt;/code&gt; を介して）サニタイズが行われます。サービスは式を評価します。</target>
        </trans-unit>
        <trans-unit id="2dc590986ab9f4a1c9c7cd048d14ee382cfa0665" translate="yes" xml:space="preserve">
          <source>Be careful when using &lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; in the same expression.</source>
          <target state="translated">同じ式で &lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt;と&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;を使用するときは注意してください。</target>
        </trans-unit>
        <trans-unit id="756d08e3929f443998e8b33d291e1c7ac910d9d7" translate="yes" xml:space="preserve">
          <source>Be ready to update rapidly when new security-centric patches are available.</source>
          <target state="translated">セキュリティを中心とした新しいパッチが利用可能になったら、迅速にアップデートする準備をしておきましょう。</target>
        </trans-unit>
        <trans-unit id="064da4156fc4de43ba0aa3698866646d47db5fcc" translate="yes" xml:space="preserve">
          <source>Be sure to check all relative links, images, scripts etc. AngularJS requires you to specify the url base in the head of your main html file (&lt;code&gt;&amp;lt;base href=&quot;/my-base/index.html&quot;&amp;gt;&lt;/code&gt;) unless &lt;code&gt;html5Mode.requireBase&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the html5Mode definition object passed to &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt;. With that, relative urls will always be resolved to this base url, even if the initial url of the document was different.</source>
          <target state="translated">すべての相対リンク、画像、スクリプトなどを必ず確認してください &lt;code&gt;html5Mode.requireBase&lt;/code&gt; 除き、メインのhtmlファイル（ &lt;code&gt;&amp;lt;base href=&quot;/my-base/index.html&quot;&amp;gt;&lt;/code&gt; ）のヘッドでURLベースを指定する必要があります &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt; 渡されるhtml5Mode定義オブジェクトで &lt;code&gt;false&lt;/code&gt; に設定されます。これにより、ドキュメントの最初のURLが異なっていても、相対URLは常にこのベースURLに解決されます。</target>
        </trans-unit>
        <trans-unit id="c6ccae1d4f176aa022cf0467d0a41874c687b05c" translate="yes" xml:space="preserve">
          <source>Bear in mind that calling &lt;code&gt;$http.jsonp&lt;/code&gt; gives the remote server (and, if the request is not secured, any Man-in-the-Middle attackers) instant remote code execution in your application: the result of these requests is handed off to the browser as a regular &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;$http.jsonp&lt;/code&gt; を呼び出すと、リモートサーバー（および、要求が保護されていない場合は、中間者攻撃者）がアプリケーションでリモートコードを即座に実行できることに注意してください。これらの要求の結果は、通常の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグとしてのブラウザ。</target>
        </trans-unit>
        <trans-unit id="913a9f820820f8fa1cd66701b894a4992b1a3a57" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;$location&lt;/code&gt; uses getters/setters, you can use &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; to bind it to &lt;code&gt;ngModel&lt;/code&gt;:</source>
          <target state="translated">ので &lt;code&gt;$location&lt;/code&gt; ゲッター/セッターを使用して、あなたが使用することができます &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; にバインドする &lt;code&gt;ngModel&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="66918714be29738338a327fa4d2ac2597587dfb7" translate="yes" xml:space="preserve">
          <source>Because AngularJS separates logic from the view layer, it keeps controllers easy to test. Let's take a look at how we might test the controller below, which provides &lt;code&gt;$scope.grade&lt;/code&gt;, which sets a property on the scope based on the length of the password.</source>
          <target state="translated">AngularJSはロジックをビューレイヤーから分離しているため、コントローラーのテストが容易になります。パスワードの長さに基づいてスコープにプロパティを設定する &lt;code&gt;$scope.grade&lt;/code&gt; を提供する以下のコントローラーをテストする方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1af7e1fd57a13d91c70dd236e289a06c3575397f" translate="yes" xml:space="preserve">
          <source>Because calling the &lt;code&gt;then&lt;/code&gt; method of a promise returns a new derived promise, it is easily possible to create a chain of promises:</source>
          <target state="translated">promiseの &lt;code&gt;then&lt;/code&gt; メソッドを呼び出すと、新しい派生promiseが返されるため、promiseのチェーンを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="9672864e0e40f75d7a0f50f10bc9d756a2e191b3" translate="yes" xml:space="preserve">
          <source>Because controllers are not available on the global scope, we need to use &lt;a href=&quot;../api/ngmock/function/angular.mock.inject&quot;&gt;&lt;code&gt;angular.mock.inject&lt;/code&gt;&lt;/a&gt; to inject our controller first. The first step is to use the &lt;code&gt;module&lt;/code&gt; function, which is provided by angular-mocks. This loads in the module it's given, so it is available in your tests. We pass this into &lt;code&gt;beforeEach&lt;/code&gt;, which is a function Jasmine provides that lets us run code before each test. Then we can use &lt;code&gt;inject&lt;/code&gt; to access &lt;code&gt;$controller&lt;/code&gt;, the service that is responsible for instantiating controllers.</source>
          <target state="translated">コントローラーはグローバルスコープでは利用できないため、最初に&lt;a href=&quot;../api/ngmock/function/angular.mock.inject&quot;&gt; &lt;code&gt;angular.mock.inject&lt;/code&gt; &lt;/a&gt;を使用してコントローラーを挿入する必要があります。最初のステップは、角度モックによって提供される &lt;code&gt;module&lt;/code&gt; 関数を使用することです。これは指定されたモジュールに読み込まれるため、テストで使用できます。これを &lt;code&gt;beforeEach&lt;/code&gt; に渡します。これは、各テストの前にコードを実行できるようにするJasmineが提供する関数です。次に、 &lt;code&gt;inject&lt;/code&gt; を使用して &lt;code&gt;$controller&lt;/code&gt; にアクセスできます。これは、コントローラーのインスタンス化を担当するサービスです。</target>
        </trans-unit>
        <trans-unit id="75d8d0e2449a8a637f5cd0e710800e69e1f06b91" translate="yes" xml:space="preserve">
          <source>Because ngAria hooks into the &lt;code&gt;ng-disabled&lt;/code&gt; directive, developers do not have to do anything to enable this feature. The &lt;code&gt;aria-disabled&lt;/code&gt; attribute is automatically managed simply as a silent side-effect of using &lt;code&gt;ng-disabled&lt;/code&gt; with the ngAria module.</source>
          <target state="translated">ngAriaは &lt;code&gt;ng-disabled&lt;/code&gt; ディレクティブにフックするため、開発者はこの機能を有効にするために何もする必要はありません。 &lt;code&gt;aria-disabled&lt;/code&gt; 属性が自動的に使用してのサイレント副作用として単純に管理されている &lt;code&gt;ng-disabled&lt;/code&gt; ngAriaモジュールと。</target>
        </trans-unit>
        <trans-unit id="e4f9e4a032b3c265ca8bc0abd382f689fad90b1d" translate="yes" xml:space="preserve">
          <source>Because of rewriting capability in HTML5 mode, your users will be able to open regular url links in legacy browsers and hashbang links in modern browser:</source>
          <target state="translated">HTML5モードでの書き換え機能により、ユーザーはレガシーブラウザでは通常のURLリンクを、モダンブラウザではハッシュバングリンクを開くことができるようになります。</target>
        </trans-unit>
        <trans-unit id="2bf8e5fddffa8c784285c98c1c4d48d93b7de849" translate="yes" xml:space="preserve">
          <source>Because of these caveats, we recommend avoiding this style of annotation.</source>
          <target state="translated">これらの注意点があるため、このスタイルの注釈は避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f831e48daf5bfcb79f6cbc1cd4201ba14ebde551" translate="yes" xml:space="preserve">
          <source>Because template loading is asynchronous the compiler will suspend compilation of directives on that element for later when the template has been resolved. In the meantime it will continue to compile and link sibling and parent elements as though this element had not contained any directives.</source>
          <target state="translated">テンプレートのロードは非同期なので、コンパイラはテンプレートが解決されると、その要素のディレクティブのコンパイルを一時停止します。それまでの間は、この要素にディレクティブが含まれていないかのように、兄弟要素と親要素のコンパイルとリンクを続けます。</target>
        </trans-unit>
        <trans-unit id="c2686aeaeb26c6b0f88a3e35dc78028d0d367579" translate="yes" xml:space="preserve">
          <source>Because the constants are fixed, they get applied before other provide methods. See &lt;a href=&quot;../../auto/service/%24provide#constant.html&quot;&gt;$provide.constant()&lt;/a&gt;.</source>
          <target state="translated">定数は固定されているため、他の提供メソッドの前に適用されます。&lt;a href=&quot;../../auto/service/%24provide#constant.html&quot;&gt;$ provide.constant（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe7c5eb34e275ba1c5c585a6d36df4df0abd8a0c" translate="yes" xml:space="preserve">
          <source>Because the view is just a projection of the model, the controller is completely separated from the view and unaware of it. This makes testing a snap because it is easy to test your controller in isolation without the view and the related DOM/browser dependency.</source>
          <target state="translated">ビューはモデルの投影にすぎないので、コントローラはビューから完全に分離されており、ビューを意識することはありません。これにより、ビューや関連する DOM/ブラウザの依存関係なしにコントローラを分離してテストすることができるので、テストが簡単になります。</target>
        </trans-unit>
        <trans-unit id="d2474582b13c2c5cbe322f103e9aa433011581de" translate="yes" xml:space="preserve">
          <source>Because these messages can themselves contain AngularJS expressions, you could also write this as follows:</source>
          <target state="translated">これらのメッセージ自体がAngularJSの式を含むことができるので、以下のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="e949293bb3141d39921183faafd54e8bcb4089c2" translate="yes" xml:space="preserve">
          <source>Becomes:</source>
          <target state="translated">Becomes:</target>
        </trans-unit>
        <trans-unit id="eac5d76c03a8af1becda5e52ec3a36ad44266321" translate="yes" xml:space="preserve">
          <source>Before animating, &lt;code&gt;ngAnimate&lt;/code&gt; checks if the animated element is inside the application DOM tree. If not, no animation is run. Usually, this is not a problem since most apps use the &lt;code&gt;html&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; elements as their root.</source>
          <target state="translated">アニメーション化する前に、 &lt;code&gt;ngAnimate&lt;/code&gt; はアニメーション化された要素がアプリケーションDOMツリー内にあるかどうかを確認します。そうでない場合、アニメーションは実行されません。ほとんどのアプリはルートとして &lt;code&gt;html&lt;/code&gt; または &lt;code&gt;body&lt;/code&gt; 要素を使用するため、通常、これは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="f9dea2dff9695dcee2903587ddf4721df61dee63" translate="yes" xml:space="preserve">
          <source>Before compilation</source>
          <target state="translated">コンパイル前</target>
        </trans-unit>
        <trans-unit id="f741ff2771fb251149a44e53c3845e34e949b99f" translate="yes" xml:space="preserve">
          <source>Before compilation:</source>
          <target state="translated">コンパイル前。</target>
        </trans-unit>
        <trans-unit id="d2ed330fba12b5acc7c29421a0cc662fa9ec96e4" translate="yes" xml:space="preserve">
          <source>Before we can write a directive, we need to know how AngularJS's &lt;a href=&quot;compiler&quot;&gt;HTML compiler&lt;/a&gt; determines when to use a given directive.</source>
          <target state="translated">ディレクティブを作成する前に、AngularJSの&lt;a href=&quot;compiler&quot;&gt;HTMLコンパイラー&lt;/a&gt;が特定のディレクティブをいつ使用するかを決定する方法を知る必要があります。</target>
        </trans-unit>
        <trans-unit id="a4244aeaf237de0bd45b29f36dc3172737bcea80" translate="yes" xml:space="preserve">
          <source>Before you start creating interceptors, be sure to understand the &lt;a href=&quot;%24q&quot;&gt;$q and deferred/promise APIs&lt;/a&gt;.</source>
          <target state="translated">インターセプターの作成を開始する前に、&lt;a href=&quot;%24q&quot;&gt;$ qおよび遅延/約束API&lt;/a&gt;を理解してください。</target>
        </trans-unit>
        <trans-unit id="c9130bc666cd2fae643b177fd9066f63c8444f18" translate="yes" xml:space="preserve">
          <source>Below is a more detailed breakdown of the attributes handled by ngAria:</source>
          <target state="translated">以下、ngAriaが扱う属性の詳細な内訳をご紹介します。</target>
        </trans-unit>
        <trans-unit id="11bbabfeedc954ff982e0a78487164bd01cf2aef" translate="yes" xml:space="preserve">
          <source>Below is a pseudo code showing how a simplified dialog component may work.</source>
          <target state="translated">以下は、簡略化されたダイアログコンポーネントがどのように動作するかを示す擬似コードです。</target>
        </trans-unit>
        <trans-unit id="8780b9b9f2ecc23a18832842a6331d7e904cf4bd" translate="yes" xml:space="preserve">
          <source>Below is a quick example of animations being enabled for &lt;code&gt;ngShow&lt;/code&gt; and &lt;code&gt;ngHide&lt;/code&gt;:</source>
          <target state="translated">以下は、 &lt;code&gt;ngShow&lt;/code&gt; および &lt;code&gt;ngHide&lt;/code&gt; で有効にされているアニメーションの簡単な例です。</target>
        </trans-unit>
        <trans-unit id="be1db57587b85598644961ce203ff84d2d516194" translate="yes" xml:space="preserve">
          <source>Below is the corresponding code using the &lt;code&gt;$compile&lt;/code&gt; service. This should help give you an idea of what AngularJS does internally.</source>
          <target state="translated">以下は、 &lt;code&gt;$compile&lt;/code&gt; サービスを使用した対応するコードです。これは、AngularJSが内部で行うことを理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="95b8e9add7e9e88cd1012d17110827a722b230cd" translate="yes" xml:space="preserve">
          <source>Besides making it possible to bind different data to the scope inside a directive, using an isolated scope has another effect.</source>
          <target state="translated">ディレクティブの中のスコープに異なるデータをバインドすることができるようにする以外にも、 分離されたスコープを使うことで別の効果があります。</target>
        </trans-unit>
        <trans-unit id="93406408f653eced71823f50bb1a33f720c1359a" translate="yes" xml:space="preserve">
          <source>Besides the new file that contains the controller code, we also added an &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;&lt;code&gt;ng-controller&lt;/code&gt;&lt;/a&gt; directive to the HTML. This directive tells AngularJS that the new &lt;code&gt;InvoiceController&lt;/code&gt; is responsible for the element with the directive and all of the element's children. The syntax &lt;code&gt;InvoiceController as invoice&lt;/code&gt; tells AngularJS to instantiate the controller and save it in the variable &lt;code&gt;invoice&lt;/code&gt; in the current scope.</source>
          <target state="translated">コントローラーコードを含む新しいファイルに加えて、&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt; &lt;code&gt;ng-controller&lt;/code&gt; &lt;/a&gt;ディレクティブをHTMLに追加しました。このディレクティブは、AngularJSに、新しい &lt;code&gt;InvoiceController&lt;/code&gt; がディレクティブを持つ要素とその要素のすべての子を担当することを伝えます。シンタックス &lt;code&gt;InvoiceController as invoice&lt;/code&gt; 、コントローラのインスタンスを作成し、変数に保存するAngularJSを伝え &lt;code&gt;invoice&lt;/code&gt; 現在のスコープインチ</target>
        </trans-unit>
        <trans-unit id="5dce4dc5831fd9122f1e8fb1725d04397f36283e" translate="yes" xml:space="preserve">
          <source>Besides these few cases, you should use &lt;a href=&quot;../../../guide/component&quot;&gt;Components&lt;/a&gt; or &lt;a href=&quot;../../../guide/controller&quot;&gt;Controllers&lt;/a&gt; rather than &lt;code&gt;ngInit&lt;/code&gt; to initialize values on a scope.</source>
          <target state="translated">これらのいくつかのケースに加えて、スコープの値を初期化するには、 &lt;code&gt;ngInit&lt;/code&gt; ではなく&lt;a href=&quot;../../../guide/component&quot;&gt;コンポーネント&lt;/a&gt;または&lt;a href=&quot;../../../guide/controller&quot;&gt;コントローラー&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd3e4ab482cc2518af6697be2e20841e8a579b32" translate="yes" xml:space="preserve">
          <source>Beware that using &lt;code&gt;angular.module('myModule', [])&lt;/code&gt; will create the module &lt;code&gt;myModule&lt;/code&gt; and overwrite any existing module named &lt;code&gt;myModule&lt;/code&gt;. Use &lt;code&gt;angular.module('myModule')&lt;/code&gt; to retrieve an existing module.</source>
          <target state="translated">使用していることに注意してください &lt;code&gt;angular.module('myModule', [])&lt;/code&gt; モジュールを作成します &lt;code&gt;myModule&lt;/code&gt; と名前の既存のモジュール上書き &lt;code&gt;myModule&lt;/code&gt; 。使用 &lt;code&gt;angular.module('myModule')&lt;/code&gt; 、既存のモジュールを取得します。</target>
        </trans-unit>
        <trans-unit id="8807c9bb60191c14db0f1b18c1ea78b4f82dbc02" translate="yes" xml:space="preserve">
          <source>Bind to built-in DOM events</source>
          <target state="translated">組み込みの DOM イベントにバインド</target>
        </trans-unit>
        <trans-unit id="657d28f8e1850fbaf57c9e8970ad485efff54816" translate="yes" xml:space="preserve">
          <source>Bind to custom DOM events</source>
          <target state="translated">カスタム DOM イベントへのバインド</target>
        </trans-unit>
        <trans-unit id="d5b9dbf27d5fc4d4a4c313e066f87df8c57477db" translate="yes" xml:space="preserve">
          <source>Binding expressions to arbitrary properties poses a security risk, as properties like &lt;code&gt;innerHTML&lt;/code&gt; can insert potentially dangerous HTML into the application, e.g. script tags that execute malicious code. For this reason, &lt;code&gt;ngProp&lt;/code&gt; applies Strict Contextual Escaping with the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce service&lt;/a&gt;. This means vulnerable properties require their content to be &quot;trusted&quot;, based on the context of the property. For example, the &lt;code&gt;innerHTML&lt;/code&gt; is in the &lt;code&gt;HTML&lt;/code&gt; context, and the &lt;code&gt;iframe.src&lt;/code&gt; property is in the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context, which requires that values written to this property are trusted as a &lt;code&gt;RESOURCE_URL&lt;/code&gt;.</source>
          <target state="translated">式を任意のプロパティにバインドすると、セキュリティ上のリスクが発生します。これは、 &lt;code&gt;innerHTML&lt;/code&gt; などのプロパティが、危険な可能性のあるHTMLをアプリケーションに挿入する可能性があるためです（例：悪意のあるコードを実行するスクリプトタグ）。このため、 &lt;code&gt;ngProp&lt;/code&gt; は&lt;a href=&quot;../service/%24sce&quot;&gt;$ &lt;/a&gt;sce サービスで厳格なコンテキストエスケープを適用します。これは、脆弱なプロパティは、プロパティのコンテキストに基づいて、そのコンテンツが「信頼される」必要があることを意味します。たとえば、 &lt;code&gt;innerHTML&lt;/code&gt; は &lt;code&gt;HTML&lt;/code&gt; コンテキストにあり、 &lt;code&gt;iframe.src&lt;/code&gt; プロパティは &lt;code&gt;RESOURCE_URL&lt;/code&gt; コンテキストにあります。そのため、このプロパティに書き込まれる値は &lt;code&gt;RESOURCE_URL&lt;/code&gt; として信頼される必要があります。</target>
        </trans-unit>
        <trans-unit id="3c95abad5a4fb01b2daa804b21d3bcaa9976b850" translate="yes" xml:space="preserve">
          <source>Binding select to a non-string value via ngModel parsing / formatting</source>
          <target state="translated">ngModel のパース/フォーマットによる非文字列値への select のバインド</target>
        </trans-unit>
        <trans-unit id="87c4c92c7cc5c40f37665ead791df5e9d4951a3e" translate="yes" xml:space="preserve">
          <source>Binding the view into the model, which other directives such as &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; or &lt;code&gt;select&lt;/code&gt; require.</source>
          <target state="translated">以下のような他のディレクティブモデルにビューを結合 &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;textarea&lt;/code&gt; または &lt;code&gt;select&lt;/code&gt; が必要。</target>
        </trans-unit>
        <trans-unit id="bb8d1dbec2383b2ace68d315a5505325a07603fe" translate="yes" xml:space="preserve">
          <source>Binding to a getter/setter</source>
          <target state="translated">ゲッター/セッターへのバインド</target>
        </trans-unit>
        <trans-unit id="25ace093925e2814896e0582fd4ff55182dce1a7" translate="yes" xml:space="preserve">
          <source>Binding to boolean attributes</source>
          <target state="translated">ブール属性へのバインディング</target>
        </trans-unit>
        <trans-unit id="8bce3a109839f438e000945b18acdd32b0210c8c" translate="yes" xml:space="preserve">
          <source>Binding to camelCase properties</source>
          <target state="translated">キャメルケースのプロパティへのバインディング</target>
        </trans-unit>
        <trans-unit id="99b5983ad3dd8a0fefc84a6eff022b8d33c135fe" translate="yes" xml:space="preserve">
          <source>Binding to different contexts</source>
          <target state="translated">異なるコンテキストへのバインディング</target>
        </trans-unit>
        <trans-unit id="d0561b07cc318a1f09fc9de10ee57ff0d9c80f3a" translate="yes" xml:space="preserve">
          <source>Binding to form and control state</source>
          <target state="translated">フォームと制御状態へのバインディング</target>
        </trans-unit>
        <trans-unit id="ebd58a4a7b83d78b2f35d5de1c469945d20cbdfa" translate="yes" xml:space="preserve">
          <source>Binding to innerHTML with ngSanitize</source>
          <target state="translated">ngSanitizeによるinnerHTMLへのバインディング</target>
        </trans-unit>
        <trans-unit id="b6fc4d77d0ae47604bdf44f931ee45b700a34949" translate="yes" xml:space="preserve">
          <source>Binds the given expression to the value of the element.</source>
          <target state="translated">与えられた式を要素の値にバインドします。</target>
        </trans-unit>
        <trans-unit id="0b9d2b2362bc33581ba11fddcb0cf0590ebd3a7a" translate="yes" xml:space="preserve">
          <source>Blog</source>
          <target state="translated">Blog</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="443f17a7b86f51793bfee7a9b599be7411962f49" translate="yes" xml:space="preserve">
          <source>Both approaches described above require you to prepare different &lt;code&gt;index.html&lt;/code&gt; pages or JavaScript files for each locale that your app may use. You also need to configure your server to serve the correct file that corresponds to the desired locale.</source>
          <target state="translated">上記のどちらの方法でも、アプリが使用するロケールごとに、異なる &lt;code&gt;index.html&lt;/code&gt; ページまたはJavaScriptファイルを準備する必要があります。また、目的のロケールに対応する正しいファイルを提供するようにサーバーを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ca64c991bfb8f51ff1d5093045e9b7f736452f5" translate="yes" xml:space="preserve">
          <source>Both controllers and directives have reference to the scope, but not to each other. This arrangement isolates the controller from the directive as well as from the DOM. This is an important point since it makes the controllers view agnostic, which greatly improves the testing story of the applications.</source>
          <target state="translated">コントローラとディレクティブはどちらもスコープを参照しますが、お互いには参照しません。この配置により、コントローラは DOM と同様にディレクティブからも分離されます。これは重要なポイントです。コントローラのビューを不可知論的にし、アプリケーションのテストストーリーを大幅に改善します。</target>
        </trans-unit>
        <trans-unit id="40dcb3b95121f56d8a5d3c7eb1620ecb8cb8dc8b" translate="yes" xml:space="preserve">
          <source>Both methods return the &lt;code&gt;requestHandler&lt;/code&gt; object for possible overrides.</source>
          <target state="translated">両方のメソッドは、可能なオーバーライドのために &lt;code&gt;requestHandler&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="d46a182956cbe1896d122a91a94ab7a7d4100cc8" translate="yes" xml:space="preserve">
          <source>Both objects or values are of the same type and all of their properties are equal by comparing them with &lt;code&gt;angular.equals&lt;/code&gt;.</source>
          <target state="translated">オブジェクトまたは値は両方とも同じタイプであり、それらを &lt;code&gt;angular.equals&lt;/code&gt; と比較すると、すべてのプロパティが等しくなります。</target>
        </trans-unit>
        <trans-unit id="3e5005cfde41f6cbdc44666fa883267220053196" translate="yes" xml:space="preserve">
          <source>Both objects or values pass &lt;code&gt;===&lt;/code&gt; comparison.</source>
          <target state="translated">オブジェクトまたは値の両方が &lt;code&gt;===&lt;/code&gt; 比較を渡します。</target>
        </trans-unit>
        <trans-unit id="a125206df8681fa85102404723fa7cd9d26dd16c" translate="yes" xml:space="preserve">
          <source>Both requests and responses can be transformed using transformation functions: &lt;code&gt;transformRequest&lt;/code&gt; and &lt;code&gt;transformResponse&lt;/code&gt;. These properties can be a single function that returns the transformed value (&lt;code&gt;function(data, headersGetter, status)&lt;/code&gt;) or an array of such transformation functions, which allows you to &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;unshift&lt;/code&gt; a new transformation function into the transformation chain.</source>
          <target state="translated">要求と応答の両方は、変換関数 &lt;code&gt;transformRequest&lt;/code&gt; および &lt;code&gt;transformResponse&lt;/code&gt; を使用して変換できます。これらの特性は、戻り変換値（すなわち、単一の関数とすることができる &lt;code&gt;function(data, headersGetter, status)&lt;/code&gt; ）か、することができ、このような変換関数のアレイ、 &lt;code&gt;push&lt;/code&gt; 又は &lt;code&gt;unshift&lt;/code&gt; 変換チェーンに新しい変換関数を。</target>
        </trans-unit>
        <trans-unit id="75b4106a74d08ca7beaa672015bdedf0fbb0610c" translate="yes" xml:space="preserve">
          <source>Both server and the client must cooperate in order to eliminate these threats. AngularJS comes pre-configured with strategies that address these issues, but for this to work backend server cooperation is required.</source>
          <target state="translated">これらの脅威を排除するためには、サーバーとクライアントの両方が協力しなければなりません。AngularJSにはこれらの問題に対処するための戦略があらかじめ設定されていますが、これを機能させるためにはバックエンドサーバーの協力が必要です。</target>
        </trans-unit>
        <trans-unit id="d7a06053351dcacb0958c1d7874174fafa3e176f" translate="yes" xml:space="preserve">
          <source>Both services use the array notation to declare their dependencies.</source>
          <target state="translated">どちらのサービスも、依存関係を宣言するために配列表記を使用します。</target>
        </trans-unit>
        <trans-unit id="453b6ec0bdcf074f42019bd759bd4f46fe479c1d" translate="yes" xml:space="preserve">
          <source>Both values are NaN. (In JavaScript, NaN == NaN =&amp;gt; false. But we consider two NaN as equal)</source>
          <target state="translated">どちらの値もNaNです。（JavaScriptでは、NaN == NaN =&amp;gt; false。ただし、2つのNaNは等しいと見なします）</target>
        </trans-unit>
        <trans-unit id="8238aa1fee0718d12fd25bfcbae5d91e5efcde6e" translate="yes" xml:space="preserve">
          <source>Both values represent the same regular expression (In JavaScript, /abc/ == /abc/ =&amp;gt; false. But we consider two regular expressions as equal when their textual representation matches).</source>
          <target state="translated">両方の値が同じ正規表現を表します（JavaScriptでは、/ abc / == / abc / =&amp;gt; false。ただし、テキスト表現が一致する場合、2つの正規表現は等しいと見なされます）。</target>
        </trans-unit>
        <trans-unit id="236ab44b7fba5a5f64f75f18c707a81aa8471a1c" translate="yes" xml:space="preserve">
          <source>BreezeJS</source>
          <target state="translated">BreezeJS</target>
        </trans-unit>
        <trans-unit id="a0cdfd5795b7e2c68f3f565bde94c8cda195a6da" translate="yes" xml:space="preserve">
          <source>Broadcasted after a URL was changed.</source>
          <target state="translated">URLが変更された後に放送されました。</target>
        </trans-unit>
        <trans-unit id="5717f71e7e0404413a5bac0d197a4f54f36c5557" translate="yes" xml:space="preserve">
          <source>Broadcasted after a route change has happened successfully. The &lt;code&gt;resolve&lt;/code&gt; dependencies are now available in the &lt;code&gt;current.locals&lt;/code&gt; property.</source>
          <target state="translated">ルート変更が正常に行われた後にブロードキャストされます。依存関係の &lt;code&gt;resolve&lt;/code&gt; が &lt;code&gt;current.locals&lt;/code&gt; プロパティで利用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="db63277f54c549ffb9ccc9b41975c00069d4fd0b" translate="yes" xml:space="preserve">
          <source>Broadcasted before a URL will change.</source>
          <target state="translated">URLが変更される前にブロードキャストされます。</target>
        </trans-unit>
        <trans-unit id="a528b7c196e8ddc0cb9c7f059079eae85e556a77" translate="yes" xml:space="preserve">
          <source>Broadcasted before a route change. At this point the route services starts resolving all of the dependencies needed for the route change to occur. Typically this involves fetching the view template as well as any dependencies defined in &lt;code&gt;resolve&lt;/code&gt; route property. Once all of the dependencies are resolved &lt;code&gt;$routeChangeSuccess&lt;/code&gt; is fired.</source>
          <target state="translated">ルート変更前にブロードキャストされます。この時点で、ルートサービスは、ルートの変更を行うために必要なすべての依存関係の解決を開始します。通常、これには、ビューテンプレートと、ルート &lt;code&gt;resolve&lt;/code&gt; プロパティで定義された依存関係のフェッチが含まれます。すべての依存関係が解決されると、 &lt;code&gt;$routeChangeSuccess&lt;/code&gt; が起動されます。</target>
        </trans-unit>
        <trans-unit id="0e142877d6ef7e5d1e6c077814dcc5637d27b1f7" translate="yes" xml:space="preserve">
          <source>Broadcasted if a redirection function fails or any redirection or resolve promises are rejected.</source>
          <target state="translated">リダイレクト機能が失敗した場合、またはリダイレクトやリゾルブの約束が拒否された場合にブロードキャストされます。</target>
        </trans-unit>
        <trans-unit id="5cfcce92d36aeb1c520e9b5db15f22bee58c5791" translate="yes" xml:space="preserve">
          <source>Broadcasted if the same instance of a route (including template, controller instance, resolved dependencies, etc.) is being reused. This can happen if either &lt;code&gt;reloadOnSearch&lt;/code&gt; or &lt;code&gt;reloadOnUrl&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ルートの同じインスタンス（テンプレート、コントローラーインスタンス、解決された依存関係などを含む）が再利用されている場合にブロードキャストされます。これは、 &lt;code&gt;reloadOnSearch&lt;/code&gt; または &lt;code&gt;reloadOnUrl&lt;/code&gt; のいずれかが &lt;code&gt;false&lt;/code&gt; に設定されている場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5a8322d960d47320dc5989c276e6b8166c048003" translate="yes" xml:space="preserve">
          <source>Broadcasted when a scope and its children are being destroyed.</source>
          <target state="translated">スコープとその子供たちが壊滅している時に放送される。</target>
        </trans-unit>
        <trans-unit id="7d70e82b9c499004d1850cf08803f0ce4e7e5cfd" translate="yes" xml:space="preserve">
          <source>Browser in HTML5 Fallback mode (Hashbang mode)</source>
          <target state="translated">HTML5フォールバックモード(ハッシュバングモード)のブラウザ</target>
        </trans-unit>
        <trans-unit id="ecc6c180b9874f1a6748cfecac7f942eda9570d6" translate="yes" xml:space="preserve">
          <source>Browser in HTML5 mode</source>
          <target state="translated">HTML5モードのブラウザ</target>
        </trans-unit>
        <trans-unit id="e37c900dcb84282abb18dc7216453ee2a12ba08a" translate="yes" xml:space="preserve">
          <source>Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat &lt;code&gt;input[range]&lt;/code&gt; in a way that never allows the input to hold an invalid value. That means:</source>
          <target state="translated">範囲をサポートするブラウザー（最新のChrome、Safari、Firefox、Edge）は、入力が無効な値を保持することを決して許可しない方法で &lt;code&gt;input[range]&lt;/code&gt; 扱います。つまり、次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="e83b0bc612367cc74978d533e0e30cf24b965e7c" translate="yes" xml:space="preserve">
          <source>Built-in validation tokens:</source>
          <target state="translated">検証トークンを内蔵しています。</target>
        </trans-unit>
        <trans-unit id="02e264495bc8c8e6e9753884128090bbb591476a" translate="yes" xml:space="preserve">
          <source>But &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; has a dilemma.</source>
          <target state="translated">しかし、&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;にはジレンマがあります。</target>
        </trans-unit>
        <trans-unit id="59c3592d94e357cca81ab82eb84d5087a88626ed" translate="yes" xml:space="preserve">
          <source>But given that the token is just a string literal, sticking with the Value recipe is still more appropriate as it makes the code easier to follow.</source>
          <target state="translated">しかし、トークンが単なる文字列リテラルであることを考えると、コードをより簡単に従えるようにするためには、Valueレシピに固執することの方がまだ適切です。</target>
        </trans-unit>
        <trans-unit id="fce344d9abbbab9562c13cd7f34c0b9da8dd4d9c" translate="yes" xml:space="preserve">
          <source>But unlike &lt;a href=&quot;%24provide#value.html&quot;&gt;value&lt;/a&gt;, a constant can be injected into a module configuration function (see &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;) and it cannot be overridden by an AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">ただし、&lt;a href=&quot;%24provide#value.html&quot;&gt;value&lt;/a&gt;とは異なり、定数はモジュール構成関数に挿入でき（&lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; を&lt;/a&gt;参照）、AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;デコレーター&lt;/a&gt;によってオーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="405847fd05efd79761c86b02e94559369547dbc6" translate="yes" xml:space="preserve">
          <source>By adding an &lt;code&gt;$inject&lt;/code&gt; property onto a function the injection parameters can be specified.</source>
          <target state="translated">関数に &lt;code&gt;$inject&lt;/code&gt; プロパティを追加することで、注入パラメーターを指定できます。</target>
        </trans-unit>
        <trans-unit id="2fa2da9f3a76efbcb9284be63afad1a9da922618" translate="yes" xml:space="preserve">
          <source>By default $animate doesn't trigger any animations. This is because the &lt;code&gt;ngAnimate&lt;/code&gt; module isn't included and only when it is active then the animation hooks that &lt;code&gt;$animate&lt;/code&gt; triggers will be functional. Once active then all structural &lt;code&gt;ng-&lt;/code&gt; directives will trigger animations as they perform their DOM-related operations (enter, leave and move). Other directives such as &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and &lt;code&gt;ngMessages&lt;/code&gt; also provide support for animations.</source>
          <target state="translated">デフォルトでは、$ animateはアニメーションをトリガーしません。これは、 &lt;code&gt;ngAnimate&lt;/code&gt; モジュールが含まれておらず、それがアクティブな場合にのみ、 &lt;code&gt;$animate&lt;/code&gt; がトリガーするアニメーションフックが機能するためです。アクティブになると、すべての構造 &lt;code&gt;ng-&lt;/code&gt; ディレクティブは、DOM関連の操作（Enter、Leave、およびMove）を実行するときにアニメーションをトリガーします。以下のような他のディレクティブ &lt;code&gt;ngClass&lt;/code&gt; 、 &lt;code&gt;ngShow&lt;/code&gt; 、 &lt;code&gt;ngHide&lt;/code&gt; と &lt;code&gt;ngMessages&lt;/code&gt; はまた、アニメーションのためのサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="6a63f23b39aeafeeeef2f721b04b4097b6810a86" translate="yes" xml:space="preserve">
          <source>By default AngularJS attaches information about binding and scopes to DOM nodes, and adds CSS classes to data-bound elements:</source>
          <target state="translated">デフォルトではAngularJSはバインディングとスコープに関する情報をDOMノードにアタッチし、データバインドされた要素にCSSクラスを追加します。</target>
        </trans-unit>
        <trans-unit id="370ccd1eb19dc0d611cfd9491b8afea309b7a0df" translate="yes" xml:space="preserve">
          <source>By default AngularJS compiles and executes all directives inside comments and element classes. In order to perform this task, the AngularJS compiler must look for directives by:</source>
          <target state="translated">デフォルトではAngularJSはコメントや要素クラス内の全てのディレクティブをコンパイルして実行します。このタスクを実行するためには、AngularJSコンパイラがディレクティブを探す必要があります。</target>
        </trans-unit>
        <trans-unit id="1e2842d70be7f65d0a8c45bdabb3581c644cabee" translate="yes" xml:space="preserve">
          <source>By default you don't need to override anything in CSS and the animations will work around the display style.</source>
          <target state="translated">デフォルトではCSSで何も上書きする必要はなく、アニメーションは表示スタイルを中心に動作します。</target>
        </trans-unit>
        <trans-unit id="cfc9fd29727c805e8bcd27c2fd78719670ad599e" translate="yes" xml:space="preserve">
          <source>By default you don't need to override in CSS anything and the animations will work around the display style.</source>
          <target state="translated">デフォルトではCSSで何もオーバーライドする必要はなく、アニメーションは表示スタイルを中心に動作します。</target>
        </trans-unit>
        <trans-unit id="8e2db882ad5f7a39f81879fd1d5e758ebc4f4597" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll()&lt;/a&gt; will automatically detect changes to &lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; and scroll to the element matching the new hash.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScroll（）&lt;/a&gt;は&lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$ location.hash（）&lt;/a&gt;への変更を自動的に検出し、新しいハッシュに一致する要素までスクロールします。</target>
        </trans-unit>
        <trans-unit id="eb7793000636bd074d047602162058c73e34ad5e" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;$sce&lt;/code&gt; will throw an error if it detects untrusted HTML content, and will not bind the content. However, if you include the &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize module&lt;/a&gt;, it will try to sanitize the potentially dangerous HTML, e.g. strip non-trusted tags and attributes when binding to &lt;code&gt;innerHTML&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;$sce&lt;/code&gt; は信頼できないHTMLコンテンツを検出するとエラーをスローし、コンテンツをバインドしません。ただし、&lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitizeモジュール&lt;/a&gt;を含めると、 &lt;code&gt;innerHTML&lt;/code&gt; にバインドするときに、信頼できないタグや属性を削除するなど、潜在的に危険なHTMLをサニタイズしようとします。</target>
        </trans-unit>
        <trans-unit id="c70a53728f1b21d2741de003d4f7d107644ad595" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;$sce&lt;/code&gt; will throw an error if it detects untrusted HTML content, and will not bind the content. However, if you include the &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize module&lt;/a&gt;, it will try to sanitize the potentially dangerous HTML, e.g. strip non-whitelisted tags and attributes when binding to &lt;code&gt;innerHTML&lt;/code&gt;.</source>
          <target state="translated">既定では、 &lt;code&gt;$sce&lt;/code&gt; は信頼されていないHTMLコンテンツを検出するとエラーをスローし、コンテンツをバインドしません。ただし、&lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitizeモジュール&lt;/a&gt;を含めると、潜在的に危険なHTMLをサニタイズしようとします。たとえば、 &lt;code&gt;innerHTML&lt;/code&gt; にバインドするときに、ホワイトリストに登録されていないタグと属性を削除します。</target>
        </trans-unit>
        <trans-unit id="79c69d18163b4e263908e7612db7c38c1f192b89" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngMessages&lt;/code&gt; will only display one message for a particular key/value collection at any time. If more than one message (or error) key is currently true, then which message is shown is determined by the order of messages in the HTML template code (messages declared first are prioritised). This mechanism means the developer does not have to prioritize messages using custom JavaScript code.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;ngMessages&lt;/code&gt; は特定のキー/値コレクションに対して常に 1つのメッセージのみを表示します。現在複数のメッセージ（またはエラー）キーがtrueの場合、表示されるメッセージはHTMLテンプレートコード内のメッセージの順序によって決定されます（最初に宣言されたメッセージが優先されます）。このメカニズムは、開発者がカスタムJavaScriptコードを使用してメッセージに優先順位を付ける必要がないことを意味します。</target>
        </trans-unit>
        <trans-unit id="24c1da0bbb6770f2b962ebbc35b060bf09623b8f" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngModel&lt;/code&gt; watches the model by reference, not value. This is important to know when binding inputs to models that are objects (e.g. &lt;code&gt;Date&lt;/code&gt;) or collections (e.g. arrays). If only properties of the object or collection change, &lt;code&gt;ngModel&lt;/code&gt; will not be notified and so the input will not be re-rendered.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;ngModel&lt;/code&gt; は値ではなく参照によってモデルを監視します。これは、オブジェクト（たとえば &lt;code&gt;Date&lt;/code&gt; ）またはコレクション（たとえば配列）であるモデルに入力をバインドするときに知っておくことが重要です。オブジェクトまたはコレクションのプロパティのみが変更された場合、 &lt;code&gt;ngModel&lt;/code&gt; は通知されないため、入力は再レンダリングされません。</target>
        </trans-unit>
        <trans-unit id="7190d37e5aa54069ede2834cb78f273c5c43c428" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngModel&lt;/code&gt; watches the model by reference, not value. This is important to know when binding the select to a model that is an object or a collection.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;ngModel&lt;/code&gt; は値ではなく参照によってモデルを監視します。これは、selectをオブジェクトまたはコレクションであるモデルにバインドするときに知っておくことが重要です。</target>
        </trans-unit>
        <trans-unit id="6903112b079eaf8ffdf3aec857a1afc48c94199d" translate="yes" xml:space="preserve">
          <source>By default, AngularJS only loads templates from the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on the template URL. To load templates from other domains and/or protocols, you may either &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelist them&lt;/a&gt; or &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;wrap it&lt;/a&gt; into a trusted value.</source>
          <target state="translated">デフォルトでは、AngularJSは、アプリケーションドキュメントと同じドメインおよびプロトコルからのみテンプレートをロードします。これは、テンプレートURLで&lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;を呼び出すことによって行われます。他のドメインやプロトコルからテンプレートを読み込むには、テンプレートを&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;ホワイトリストに登録する&lt;/a&gt;か、信頼できる値に&lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;ラップし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6f1df63e0012ca7f538b0d74fdaec979f00c64c9" translate="yes" xml:space="preserve">
          <source>By default, AngularJS only loads templates from the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on the template URL. To load templates from other domains and/or protocols, you may either add them to the &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt; or &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; into trusted values.</source>
          <target state="translated">デフォルトでは、AngularJSはアプリケーションドキュメントと同じドメインとプロトコルからのみテンプレートをロードします。これは、テンプレートURLで&lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;を呼び出すことによって行われます。他のドメインおよび/またはプロトコルからテンプレートをロードするには、いずれかの彼らはに追加することが&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt;または&lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;それらをラップし&lt;/a&gt;、信頼できる値に。</target>
        </trans-unit>
        <trans-unit id="1966d304ab081cea6a8b5d7d37a52d0b976b638f" translate="yes" xml:space="preserve">
          <source>By default, animations are disabled when the AngularJS app &lt;a href=&quot;bootstrap&quot;&gt;bootstraps&lt;/a&gt;. If you are using the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive, this happens in the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, so immediately after the page has been loaded. Animations are disabled, so that UI and content are instantly visible. Otherwise, with many animations on the page, the loading process may become too visually overwhelming, and the performance may suffer.</source>
          <target state="translated">デフォルトでは、AngularJSアプリが&lt;a href=&quot;bootstrap&quot;&gt;ブートストラップ&lt;/a&gt;するとアニメーションは無効になります。&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;ディレクティブを使用している場合、これは &lt;code&gt;DOMContentLoaded&lt;/code&gt; イベントで発生するため、ページが読み込まれた直後に発生します。アニメーションが無効になっているため、UIとコンテンツがすぐに表示されます。そうしないと、ページに多くのアニメーションが表示されるため、読み込みプロセスが視覚的に圧倒され、パフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="df4843033cbd0e8a2de04acc71992eef26af1ccc" translate="yes" xml:space="preserve">
          <source>By default, any &lt;code&gt;ngAnimate&lt;/code&gt;-enabled directives will assume that &lt;code&gt;transition&lt;/code&gt; / &lt;code&gt;animation&lt;/code&gt; styles on the element are part of an &lt;code&gt;ngAnimate&lt;/code&gt; animation. This can lead to problems when the styles are actually for animations that are independent of &lt;code&gt;ngAnimate&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、すべての &lt;code&gt;ngAnimate&lt;/code&gt; 対応のディレクティブは、要素の &lt;code&gt;transition&lt;/code&gt; / &lt;code&gt;animation&lt;/code&gt; スタイルが &lt;code&gt;ngAnimate&lt;/code&gt; アニメーションの一部であると想定します。これは、スタイルが実際に &lt;code&gt;ngAnimate&lt;/code&gt; に依存しないアニメーション用である場合に問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="a89e6cd1f35ad33962ebab128b602ce984b62740" translate="yes" xml:space="preserve">
          <source>By default, any change to the content will trigger a model update and form validation. You can override this behavior using the &lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive to bind only to specified list of events. I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'blur' }&quot;&lt;/code&gt; will update and validate only after the control loses focus. You can set several events using a space delimited list. I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'mousedown blur' }&quot;&lt;/code&gt;</source>
          <target state="translated">デフォルトでは、コンテンツに変更を加えると、モデルの更新とフォームの検証がトリガーされます。&lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;ディレクティブを使用してこの動作をオーバーライドし、指定したイベントのリストのみにバインドできます。すなわち、 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'blur' }&quot;&lt;/code&gt; コントロールがフォーカスを失った後にのみ更新して検証します。スペース区切りのリストを使用して、複数のイベントを設定できます。すなわち、 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'mousedown blur' }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="500f830c32748a1f53ff5f9a7775baaecd3aa39e" translate="yes" xml:space="preserve">
          <source>By default, ngMock will create an injector per test case to ensure your tests do not affect each other. However, if we want to use &lt;code&gt;beforeAll()&lt;/code&gt;, ngMock will have to create the injector before any test cases are run, and share that injector through all the cases for that &lt;code&gt;describe&lt;/code&gt;. That is where &lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector()&lt;/a&gt; comes in. When it's called within a &lt;code&gt;describe&lt;/code&gt; block, a single injector is shared between all hooks and test cases run in that block.</source>
          <target state="translated">デフォルトでは、ngMockはテストケースごとにインジェクターを作成し、テストが互いに影響しないようにします。ただし、 &lt;code&gt;beforeAll()&lt;/code&gt; を使用する場合、ngMockはテストケースが実行される前にインジェクターを作成し、その &lt;code&gt;describe&lt;/code&gt; のすべてのケースでそのインジェクターを共有する必要があります。ところである&lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjectorは（）&lt;/a&gt;に入っています。それは内と呼ばれていた場合 &lt;code&gt;describe&lt;/code&gt; たブロックを、単一のインジェクタは、そのブロックで実行されるすべてのフックとテストケースの間で共有されています。</target>
        </trans-unit>
        <trans-unit id="85a705fceaf0b765e21238642283db4e9a9de198" translate="yes" xml:space="preserve">
          <source>By default, query parameters on request URLs are parsed into the &lt;code&gt;params&lt;/code&gt; object. So a request URL of &lt;code&gt;/list?q=searchstr&amp;amp;orderby=-name&lt;/code&gt; would set &lt;code&gt;params&lt;/code&gt; to be &lt;code&gt;{q: 'searchstr', orderby: '-name'}&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、リクエストURLのクエリパラメータは &lt;code&gt;params&lt;/code&gt; オブジェクトに解析されます。リクエストURLだから、 &lt;code&gt;/list?q=searchstr&amp;amp;orderby=-name&lt;/code&gt; 設定します &lt;code&gt;params&lt;/code&gt; する &lt;code&gt;{q: 'searchstr', orderby: '-name'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7198ac8768b77ff593616dc4b6e2aca0b18676a4" translate="yes" xml:space="preserve">
          <source>By default, the &quot;required&quot; error on the ngModelController is only set on a required select when the empty option is selected. This example adds a custom directive that also sets the error when the unknown option is selected.</source>
          <target state="translated">デフォルトでは、ngModelController の &quot;required&quot; エラーは、空のオプションが選択されている場合にのみ必須選択時に設定されます。この例では、不明なオプションが選択された場合にもエラーを設定するカスタムディレクティブを追加しています。</target>
        </trans-unit>
        <trans-unit id="e221e45c15e66ddc82e3f4a4feda670a95e982cd" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; method is used for tracking changes, and the equality check is based on object identity. However, if an object literal or an array literal is passed as the binding expression, the equality check is done by value (using the &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; function). It's also possible to watch the evaluated value shallowly with &lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;&lt;code&gt;$watchCollection&lt;/code&gt;&lt;/a&gt;: use &lt;code&gt;=*&lt;/code&gt; or &lt;code&gt;=*attr&lt;/code&gt;</source>
          <target state="translated">既定では、&lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;メソッドが変更の追跡に使用され、等価性チェックはオブジェクトIDに基づいています。ただし、オブジェクトリテラルまたは配列リテラルがバインディング式として渡される場合、等価チェックは値によって行われます（&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; &lt;/a&gt;関数を使用）。&lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt; &lt;code&gt;$watchCollection&lt;/code&gt; &lt;/a&gt;使用して、評価された値を浅く監視することもできます。 &lt;code&gt;=*&lt;/code&gt; または &lt;code&gt;=*attr&lt;/code&gt; を使用します</target>
        </trans-unit>
        <trans-unit id="0973385c3a816fcb28f0098577f72a074edba112" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; method is used for tracking changes, and the equality check is based on object identity. It's also possible to watch the evaluated value shallowly with &lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;&lt;code&gt;$watchCollection&lt;/code&gt;&lt;/a&gt;: use &lt;code&gt;&amp;lt;*&lt;/code&gt; or &lt;code&gt;&amp;lt;*attr&lt;/code&gt;</source>
          <target state="translated">既定では、&lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;メソッドが変更の追跡に使用され、等価性チェックはオブジェクトIDに基づいています。&lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt; &lt;code&gt;$watchCollection&lt;/code&gt; &lt;/a&gt;使用して評価値を浅く監視することもできます。 &lt;code&gt;&amp;lt;*&lt;/code&gt; または &lt;code&gt;&amp;lt;*attr&lt;/code&gt; を使用します</target>
        </trans-unit>
        <trans-unit id="eb24723013a0e6e79cb996d2a10e6b4c5257acc0" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;.ng-hide&lt;/code&gt; class will style the element with &lt;code&gt;display: none !important&lt;/code&gt;. If you wish to change the hide behavior with &lt;code&gt;ngShow&lt;/code&gt;/&lt;code&gt;ngHide&lt;/code&gt;, you can simply overwrite the styles for the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class. Note that the selector that needs to be used is actually &lt;code&gt;.ng-hide:not(.ng-hide-animate)&lt;/code&gt; to cope with extra animation classes that can be added.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;.ng-hide&lt;/code&gt; クラスは要素を &lt;code&gt;display: none !important&lt;/code&gt; スタイル設定します：none！important。 &lt;code&gt;ngShow&lt;/code&gt; / &lt;code&gt;ngHide&lt;/code&gt; で非表示の動作を変更したい場合は、単に &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスのスタイルを上書きできます。追加できるアニメーションクラスに対処するために、使用する必要があるセレクターは実際には &lt;code&gt;.ng-hide:not(.ng-hide-animate)&lt;/code&gt; であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fce47139951721d70fff4365f4ba57737c92ef63" translate="yes" xml:space="preserve">
          <source>By default, the template URL is restricted to the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on it. To load templates from other domains or protocols you may either &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelist them&lt;/a&gt; or &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; as trusted values. Refer to AngularJS's &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、テンプレートURLはアプリケーションドキュメントと同じドメインとプロトコルに制限されています。これを行うには、&lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;を呼び出します。他のドメインまたはプロトコルからテンプレートをロードするには、&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;それらをホワイトリストに登録する&lt;/a&gt;か、信頼できる値として&lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;ラップし&lt;/a&gt;ます。AngularJSの&lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escapingを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e18e1c3fdfab2d20000435b337eb4b86046b1731" translate="yes" xml:space="preserve">
          <source>By default, the template URL is restricted to the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on it. To load templates from other domains or protocols you may either add them to your &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trusted resource URL list&lt;/a&gt; or &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; as trusted values. Refer to AngularJS's &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、テンプレートURLはアプリケーションドキュメントと同じドメインとプロトコルに制限されています。これは、&lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;を呼び出すことによって行われます。他のドメインまたはプロトコルからテンプレートをロードするには、あなたはどちらかあなたにそれらを追加することができ&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;、信頼できるリソースのURLのリスト&lt;/a&gt;や&lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;それらをラップし&lt;/a&gt;、信頼できる値として。 AngularJSのを参照してください&lt;a href=&quot;../service/%24sce&quot;&gt;厳格な文脈エスケープ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32e44cbd14ed433730fe544c3bfd62ca5f7ab6e5" translate="yes" xml:space="preserve">
          <source>By default, trailing slashes will be stripped from the calculated URLs, which can pose problems with server backends that do not expect that behavior. This can be disabled by configuring the &lt;code&gt;$resourceProvider&lt;/code&gt; like this:</source>
          <target state="translated">デフォルトでは、末尾のスラッシュは計算されたURLから削除されます。これにより、その動作を予期しないサーバーバックエンドで問題が発生する可能性があります。これは、次のように &lt;code&gt;$resourceProvider&lt;/code&gt; 構成することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="523150288e3d3cbcdab71e7b4b769b8742b51985" translate="yes" xml:space="preserve">
          <source>By enabling this setting without taking other precautions, you might expose your application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned outside of the containing element and be rendered over other elements on the page (e.g. a login link). Such behavior can then result in phishing incidents.</source>
          <target state="translated">他の予防策を取らずにこの設定を有効にすると、アプリケーションがクリックハイジャック攻撃にさらされる可能性があります。このような攻撃では、サニタイズされた svg 要素が含まれる要素の外側に配置され、ページ上の他の要素(ログイン リンクなど)の上に表示される可能性があります。このような動作は、フィッシング事件を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="aa28a200094d0f8e4952a2572b5bf5b51a4cfccf" translate="yes" xml:space="preserve">
          <source>By implementing these methods, your component can hook into its lifecycle.</source>
          <target state="translated">これらのメソッドを実装することで、コンポーネントはそのライフサイクルにフックすることができます。</target>
        </trans-unit>
        <trans-unit id="29c9ccc283e35e9d7b41129880c9316c7594e9f5" translate="yes" xml:space="preserve">
          <source>By listening to this event, you can remove event listeners that might cause memory leaks. Listeners registered to scopes and elements are automatically cleaned up when they are destroyed, but if you registered a listener on a service, or registered a listener on a DOM node that isn't being deleted, you'll have to clean it up yourself or you risk introducing a memory leak.</source>
          <target state="translated">このイベントをリスナーすることで、メモリリークの原因となりそうなイベントリスナーを削除することができます。スコープやエレメントに登録されているリスナーは破棄されると自動的にクリーンアップされますが、サービスにリスナーを登録していたり、削除されていないDOMノードにリスナーを登録していたりすると、自分でクリーンアップしないとメモリリークが発生するリスクがあります。</target>
        </trans-unit>
        <trans-unit id="c171fe9b3aaa70bdfa6d6276dcd49d45e27676fa" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;transition: 0s&lt;/code&gt;, &lt;code&gt;ngAnimate&lt;/code&gt; will ignore the existing transition styles, and not try to animate them (Javascript animations will still execute, though). This can be used to prevent &lt;a href=&quot;animations#preventing-collisions-with-existing-animations-and-third-party-libraries.html&quot;&gt;issues with existing animations interfering with &lt;code&gt;ngAnimate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;transition: 0s&lt;/code&gt; 設定すると、 &lt;code&gt;ngAnimate&lt;/code&gt; は既存のトランジションスタイルを無視し、アニメーション化を試みません（ただし、JavaScriptアニメーションは引き続き実行されます）。これは&lt;a href=&quot;animations#preventing-collisions-with-existing-animations-and-third-party-libraries.html&quot;&gt;、既存のアニメーションが &lt;code&gt;ngAnimate&lt;/code&gt; に&lt;/a&gt;干渉する問題を防ぐために使用できます。</target>
        </trans-unit>
        <trans-unit id="763c7e134cede96adf42badc199f39b157262036" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;getterSetter&lt;/code&gt; property to true you are telling ngModel that the &lt;code&gt;ngModel&lt;/code&gt; expression on the scope refers to a &quot;getter/setter&quot; function rather than the value itself.</source>
          <target state="translated">&lt;code&gt;getterSetter&lt;/code&gt; プロパティをtrueに設定することにより、スコープの &lt;code&gt;ngModel&lt;/code&gt; 式が値自体ではなく「getter / setter」関数を参照することをngModelに伝えます。</target>
        </trans-unit>
        <trans-unit id="d37d16187a12d14dca29958bee98c95dd2595b03" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;!important&lt;/code&gt;, the show and hide behavior will work as expected despite any clash between CSS selector specificity (when &lt;code&gt;!important&lt;/code&gt; isn't used with any conflicting styles). If a developer chooses to override the styling to change how to hide an element then it is just a matter of using &lt;code&gt;!important&lt;/code&gt; in their own CSS code.</source>
          <target state="translated">&lt;code&gt;!important&lt;/code&gt; を使用することにより、CSSセレクターの特定 &lt;code&gt;!important&lt;/code&gt; が衝突しても（！importantが競合するスタイルで使用されていない場合）、表示と非表示の動作は期待どおりに機能します。開発者がスタイルをオーバーライドして要素を非表示にする方法を変更することを選択した場合は、独自のCSSコードで &lt;code&gt;!important&lt;/code&gt; を使用するだけです。</target>
        </trans-unit>
        <trans-unit id="ab7870cd0f2f0c17b236bdc86d6ea708504a5cb8" translate="yes" xml:space="preserve">
          <source>CSS + JS Animations Together</source>
          <target state="translated">CSS+JSアニメーションを一緒に</target>
        </trans-unit>
        <trans-unit id="43bd3c1e45e7e9c523e66a4eeb74db09cdd9706e" translate="yes" xml:space="preserve">
          <source>CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out what CSS classes differ between the starting element and the destination element. These different CSS classes will be added/removed on the anchor element and a transition will be applied (the transition that is provided in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since the cloned element is placed inside of root element which is likely close to the body element).</source>
          <target state="translated">CSS アンカリングはトランジションとキーフレームに依存しており、内部コードは開始要素と移動先要素の間でどのような CSS クラスが異なるのかを把握するのに十分な知能を持っています。これらの異なる CSS クラスはアンカー要素に追加/削除され、トランジションが適用されます(アンカークラスで提供されているトランジション)。つまり、ngAnimate は、どのクラスを追加したり削除したりすることで、要素の遷移を可能な限りスムーズかつ自動的に行うことができるようになります。アンカー要素が開始要素と同じに見えるように、DOM の入れ子構造に依存しないシンプルな CSS クラスを使用するようにしてください(クローンされた要素は、おそらく body 要素に近い root 要素の中に配置されるため)。</target>
        </trans-unit>
        <trans-unit id="0f55d5c092d0ff662c046991d7571e5ba312c6ba" translate="yes" xml:space="preserve">
          <source>CSS Class-based Animations</source>
          <target state="translated">CSS クラスベースのアニメーション</target>
        </trans-unit>
        <trans-unit id="bbe967875f19b43ebcf8ae9cc8592cc142b0fc64" translate="yes" xml:space="preserve">
          <source>CSS Staggering Animations</source>
          <target state="translated">CSSのスタッガードアニメーション</target>
        </trans-unit>
        <trans-unit id="21444efa9494abd66434381371c755d1d31f0244" translate="yes" xml:space="preserve">
          <source>CSS classes</source>
          <target state="translated">CSS クラス</target>
        </trans-unit>
        <trans-unit id="4785c5decce46adb9da8916ce47b654ac25c1fa0" translate="yes" xml:space="preserve">
          <source>CSS-based Animations</source>
          <target state="translated">CSSベースのアニメーション</target>
        </trans-unit>
        <trans-unit id="b0a851e9310143c493ee5626ebda91ac22925d52" translate="yes" xml:space="preserve">
          <source>CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML and CSS code we can create an animation that will be picked up by AngularJS when an underlying directive performs an operation.</source>
          <target state="translated">ngAnimateを使ったCSSベースのアニメーションは、JavaScriptのコードを全く必要としないという点でユニークです。HTMLコードとCSSコードの間で参照するCSSクラスを使用することで、基礎となるディレクティブが操作を実行したときにAngularJSに拾われるアニメーションを作成することができます。</target>
        </trans-unit>
        <trans-unit id="f2cd38d164b13f9a7249cbfb4a4b5ef9fc8b5c5d" translate="yes" xml:space="preserve">
          <source>Cache name of the template.</source>
          <target state="translated">テンプレートのキャッシュ名。</target>
        </trans-unit>
        <trans-unit id="4841830df2aa5c0a9fdc5cf539d835c1b65395ec" translate="yes" xml:space="preserve">
          <source>Cache object identified by the cacheId or undefined if no such cache.</source>
          <target state="translated">cacheId によって識別されるキャッシュオブジェクト、またはそのようなキャッシュがない場合は未定義。</target>
        </trans-unit>
        <trans-unit id="322c7ca089e85e4cdaa343c933e86bd05885e89f" translate="yes" xml:space="preserve">
          <source>Cached responses are returned asynchronously, in the same way as responses from the server.</source>
          <target state="translated">キャッシュされたレスポンスは、サーバからのレスポンスと同じように非同期に返されます。</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="78d83114a9f21cb004c811c700f1ebf657586754" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;compiler&quot;&gt;compile&lt;/a&gt; the element into an executable, bi-directionally bound application.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;を呼び出して、要素を実行可能な双方向にバインドされたアプリケーションに&lt;a href=&quot;compiler&quot;&gt;コンパイル&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="b162081de98877f8d47457aad07d35f7c7120470" translate="yes" xml:space="preserve">
          <source>Call this method as a setter to enable/disable eager instantiation of the &lt;a href=&quot;../service/%24route&quot;&gt;$route&lt;/a&gt; service upon application bootstrap. You can also call it as a getter (i.e. without any arguments) to get the current value of the &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag.</source>
          <target state="translated">このメソッドをセッターとして呼び出し、アプリケーションのブートストラップ時に&lt;a href=&quot;../service/%24route&quot;&gt;$ route&lt;/a&gt;サービスの熱心なインスタンス化を有効または無効にします。また、これをゲッターとして（つまり、引数なしで）呼び出して、 &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; フラグの現在の値を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="e14131abb69b67447b042d7e96d77593367604f4" translate="yes" xml:space="preserve">
          <source>Call this method to determine if this scope has been explicitly suspended. It will not tell you whether an ancestor has been suspended. To determine if this scope will be excluded from a digest triggered at the $rootScope, for example, you must check all its ancestors:</source>
          <target state="translated">このメソッドを呼び出して、このスコープが明示的にサスペンドされているかどうかを判断します。先祖がサスペンドされているかどうかはわかりません。このスコープが $rootScope でトリガーされたダイジェストから除外されるかどうかを判断するには、例えば、その先祖をすべてチェックする必要があります。</target>
        </trans-unit>
        <trans-unit id="f35d12cb9238244359750cfa0d0a76f474d059bf" translate="yes" xml:space="preserve">
          <source>Call this method to enable / disable the strict component bindings check. If enabled, the compiler will enforce that all scope / controller bindings of a &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;component&lt;/a&gt; that are not set as optional with &lt;code&gt;?&lt;/code&gt;, must be provided when the directive is instantiated. If not provided, the compiler will throw the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$compile:missingattr error&lt;/a&gt;.</source>
          <target state="translated">厳密なコンポーネントバインディングチェックを有効または無効にするには、このメソッドを呼び出します。有効にした場合、コンパイラは、すべてのスコープ/コントローラのバインディングことを強制されます&lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;コンポーネント&lt;/a&gt;で、オプションとして設定されていませんか &lt;code&gt;?&lt;/code&gt; 、ディレクティブをインスタンス化するときに指定する必要があります。指定しない場合、コンパイラーは&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$ compile：missingattrエラー&lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="bc607bf3e373e4f665a14de95e82b50012f066fc" translate="yes" xml:space="preserve">
          <source>Call this method to enable / disable the strict component bindings check. If enabled, the compiler will enforce that all scope / controller bindings of a &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;component&lt;/a&gt; that are not set as optional with &lt;code&gt;?&lt;/code&gt;, must be provided when the directive is instantiated. If not provided, the compiler will throw the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$compile:missingattr error&lt;/a&gt;.</source>
          <target state="translated">このメソッドを呼び出して、厳密なコンポーネントバインディングチェックを有効/無効にします。有効にすると、コンパイラーは、 &lt;code&gt;?&lt;/code&gt; でオプションとして設定されていない&lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;/&lt;a href=&quot;%24compileprovider#component.html&quot;&gt;コンポーネントの&lt;/a&gt;すべてのスコープ/コントローラーバインディングを強制します。、ディレクティブをインスタンス化するときに指定する必要があります。指定しない場合、コンパイラは&lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$ compile：missingattrエラー&lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="cc4eaaf9dbe4e310951ac61cd764aaa491556cb9" translate="yes" xml:space="preserve">
          <source>Call this method to enable/disable various debug runtime information in the compiler such as adding binding information and a reference to the current scope on to DOM elements. If enabled, the compiler will add the following to DOM elements that have been bound to the scope</source>
          <target state="translated">このメソッドを呼び出すと、コンパイラのデバッグ実行時の様々な情報(バインディング情報や現在のスコープへの参照を DOM 要素に追加するなど)を有効/無効にできます。有効にすると、コンパイラはスコープにバインドされている DOM 要素に以下の情報を追加します。</target>
        </trans-unit>
        <trans-unit id="1440403750e2ed45b458c5ac229f85fb683fa150" translate="yes" xml:space="preserve">
          <source>Callback called whenever the return value of any expression in &lt;code&gt;watchExpressions&lt;/code&gt; changes The &lt;code&gt;newValues&lt;/code&gt; array contains the current values of the &lt;code&gt;watchExpressions&lt;/code&gt;, with the indexes matching those of &lt;code&gt;watchExpression&lt;/code&gt; and the &lt;code&gt;oldValues&lt;/code&gt; array contains the previous values of the &lt;code&gt;watchExpressions&lt;/code&gt;, with the indexes matching those of &lt;code&gt;watchExpression&lt;/code&gt; The &lt;code&gt;scope&lt;/code&gt; refers to the current scope.</source>
          <target state="translated">任意の式の戻り値たびにコールバックが呼び出さ &lt;code&gt;watchExpressions&lt;/code&gt; が変化 &lt;code&gt;newValues&lt;/code&gt; のアレイの現在の値が含ま &lt;code&gt;watchExpressions&lt;/code&gt; をするものマッチングインデックスと、 &lt;code&gt;watchExpression&lt;/code&gt; をと &lt;code&gt;oldValues&lt;/code&gt; のアレイの前の値含ま &lt;code&gt;watchExpressions&lt;/code&gt; をするものマッチングインデックスと、 &lt;code&gt;watchExpression&lt;/code&gt; ザを &lt;code&gt;scope&lt;/code&gt; は現在のスコープを指します。</target>
        </trans-unit>
        <trans-unit id="d70eaf5bd89066c1b42f522abbd8dee8568dd708" translate="yes" xml:space="preserve">
          <source>Callback called whenever the value of &lt;code&gt;watchExpression&lt;/code&gt; changes.</source>
          <target state="translated">&lt;code&gt;watchExpression&lt;/code&gt; の値が変更されるたびに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="2c689cdead0e90f013714cd4077f4ea01b650f8c" translate="yes" xml:space="preserve">
          <source>Callbacks and Promises</source>
          <target state="translated">コールバックと約束</target>
        </trans-unit>
        <trans-unit id="6f75995f3b255bdefeacf9e236456a83f540b1a9" translate="yes" xml:space="preserve">
          <source>Called when the view needs to be updated. It is expected that the user of the ng-model directive will implement this method.</source>
          <target state="translated">ビューを更新する必要があるときに呼び出されます。ng-model ディレクティブのユーザがこのメソッドを実装することが期待されます。</target>
        </trans-unit>
        <trans-unit id="63675a1d70484b5f1fc1c3405a8ded5f332fcc61" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;$digest()&lt;/code&gt; directly on a descendant of a suspended scope will still run the watchers for that scope and its descendants. When digesting we only check whether the current scope is locally suspended, rather than checking whether it has a suspended ancestor.</source>
          <target state="translated">中断されたスコープの子孫で直接 &lt;code&gt;$digest()&lt;/code&gt; 呼び出すと、そのスコープとその子孫のウォッチャーが実行されます。ダイジェストするときは、現在のスコープがローカルで中断されているかどうかを確認するだけで、祖先が中断されているかどうかは確認しません。</target>
        </trans-unit>
        <trans-unit id="49fc3e72976c3ca65e702be767e99bb84f601ccf" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;$resume()&lt;/code&gt; on a scope that has a suspended ancestor will not cause the scope to be included in future digests until all its ancestors have been resumed.</source>
          <target state="translated">中断された祖先を持つスコープで &lt;code&gt;$resume()&lt;/code&gt; を呼び出しても、すべての祖先が再開されるまで、スコープは将来のダイジェストに含まれません。</target>
        </trans-unit>
        <trans-unit id="20c938d13e09b0f80b5576ad14ce6af88219cf0d" translate="yes" xml:space="preserve">
          <source>Calling the linking function returns the element of the template. It is either the original element passed in, or the clone of the element if the &lt;code&gt;cloneAttachFn&lt;/code&gt; is provided.</source>
          <target state="translated">リンク関数を呼び出すと、テンプレートの要素が返されます。渡された元の要素か、 &lt;code&gt;cloneAttachFn&lt;/code&gt; が指定されている場合は要素のクローンです。</target>
        </trans-unit>
        <trans-unit id="e6781591ce11dba9f9d2938ebe354ec4a507a51c" translate="yes" xml:space="preserve">
          <source>Calling these methods invoke &lt;a href=&quot;../../ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; with the specified http method, destination and parameters. When the data is returned from the server then the object is an instance of the resource class. The actions &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; are available on it as methods with the &lt;code&gt;$&lt;/code&gt; prefix. This allows you to easily perform CRUD operations (create, read, update, delete) on server-side data like this:</source>
          <target state="translated">これらのメソッドを呼び出すと、指定したhttpメソッド、宛先、およびパラメーターを使用して&lt;a href=&quot;../../ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;が呼び出されます。データがサーバーから返される場合、オブジェクトはリソースクラスのインスタンスです。アクションの &lt;code&gt;save&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;delete&lt;/code&gt; は、 &lt;code&gt;$&lt;/code&gt; 接頭辞が付いたメソッドとして使用できます。これにより、次のようなサーバー側データでCRUD操作（作成、読み取り、更新、削除）を簡単に実行できます。</target>
        </trans-unit>
        <trans-unit id="31893b7919db92062b0a54add3dc3c1b08b461ce" translate="yes" xml:space="preserve">
          <source>Calling these methods invokes &lt;code&gt;$http&lt;/code&gt; on the &lt;code&gt;url&lt;/code&gt; template with the given HTTP &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;headers&lt;/code&gt;.</source>
          <target state="translated">これらのメソッドを呼び出すと、指定されたHTTP &lt;code&gt;method&lt;/code&gt; 、 &lt;code&gt;params&lt;/code&gt; 、 &lt;code&gt;headers&lt;/code&gt; して、 &lt;code&gt;url&lt;/code&gt; テンプレートで &lt;code&gt;$http&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="91a3b32b3f576fa1a25afa0ab7e2394916694e74" translate="yes" xml:space="preserve">
          <source>Calling this function with false disables the compilation of directives on comments for the whole application. This results in a compilation performance gain, as the compiler doesn't have to check comments when looking for directives. This should however only be used if you are sure that no comment directives are used in the application (including any 3rd party directives).</source>
          <target state="translated">この関数を false で呼び出すと、アプリケーション全体のコメントに対するディレクティブのコンパイルを無効にします。これは、コンパイラがディレクティブを探すときにコメントをチェックする必要がないので、 コンパイルのパフォーマンスを向上させます。しかし、これはアプリケーションでコメントディレクティブが使用されていないことが確実な場合にのみ使用してください (サードパーティのディレクティブを含む)。</target>
        </trans-unit>
        <trans-unit id="fbbb4b5eaa44b0b5551e31e4b0525bc03141436e" translate="yes" xml:space="preserve">
          <source>Calling this function with false disables the compilation of directives on element classes for the whole application. This results in a compilation performance gain, as the compiler doesn't have to check element classes when looking for directives. This should however only be used if you are sure that no class directives are used in the application (including any 3rd party directives).</source>
          <target state="translated">この関数を false で呼び出すと、アプリケーション全体の要素クラスに対するディレクティブのコンパイルを無効にします。これは、コンパイラがディレクティブを探すときに要素クラスをチェックする必要がないので、コンパイルのパフォーマンスを向上させます。ただし、これはアプリケーションでクラスディレクティブが使用されていないことが確認されている場合にのみ使用してください (サードパーティのディレクティブを含む)。</target>
        </trans-unit>
        <trans-unit id="1a4aefee23fa0c2ddc499c67e421bc097332c1e9" translate="yes" xml:space="preserve">
          <source>Can I disable SCE completely?</source>
          <target state="translated">SCEを完全に無効にすることはできますか?</target>
        </trans-unit>
        <trans-unit id="38a4b640b107f7de6465c3ff929cb568050eaed3" translate="yes" xml:space="preserve">
          <source>Can be one of:</source>
          <target state="translated">そのうちの一つになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3816f23c92cddb7d9eb035e560daee147a023eaf" translate="yes" xml:space="preserve">
          <source>Cancel an update and reset the input element's value to prevent an update to the &lt;code&gt;$modelValue&lt;/code&gt;, which may be caused by a pending debounced event or because the input is waiting for some future event.</source>
          <target state="translated">更新をキャンセルし、入力要素の値をリセットして、保留中のデバウンスイベントまたは入力が将来のイベントを待機していることが原因である可能性がある &lt;code&gt;$modelValue&lt;/code&gt; 更新を防止します。</target>
        </trans-unit>
        <trans-unit id="da189d192d9888fffe6e40083bb8393ace97b3e9" translate="yes" xml:space="preserve">
          <source>Cancelling requests</source>
          <target state="translated">リクエストのキャンセル</target>
        </trans-unit>
        <trans-unit id="838a9d672c095a05992dfe53058bf7ccd9ff411d" translate="yes" xml:space="preserve">
          <source>Cancels a task associated with the &lt;code&gt;promise&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;promise&lt;/code&gt; に関連付けられているタスクをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="5fc80b14e6aaae3cc1ada473f23aa327b69f4333" translate="yes" xml:space="preserve">
          <source>Cancels a task associated with the &lt;code&gt;promise&lt;/code&gt;. As a result of this, the promise will be resolved with a rejection.</source>
          <target state="translated">&lt;code&gt;promise&lt;/code&gt; に関連付けられているタスクをキャンセルします。この結果、約束は拒否されて解決されます。</target>
        </trans-unit>
        <trans-unit id="edecf4dc2de919262a28ba9a2f7840added3c399" translate="yes" xml:space="preserve">
          <source>Cancels the provided animation and applies the end state of the animation. Note that this does not cancel the underlying operation, e.g. the setting of classes or adding the element to the DOM.</source>
          <target state="translated">提供されたアニメーションをキャンセルし、アニメーションの終了状態を適用します。クラスの設定や DOM への要素の追加など、基本的な操作はキャンセルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="43a94b1cd16e828fd25f079b0c6f119d1c492ce3" translate="yes" xml:space="preserve">
          <source>Case Studies</source>
          <target state="translated">ケーススタディ</target>
        </trans-unit>
        <trans-unit id="f2e31c0705378a0ca912d442b249a5361708204c" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;$route&lt;/code&gt; service to reload the current route even if &lt;a href=&quot;../../ng/service/%24location&quot;&gt;$location&lt;/a&gt; hasn't changed.</source>
          <target state="translated">原因 &lt;code&gt;$route&lt;/code&gt; 場合でも、現在のルートを再ロードするサービスを&lt;a href=&quot;../../ng/service/%24location&quot;&gt;$場所が&lt;/a&gt;変更されていません。</target>
        </trans-unit>
        <trans-unit id="60afdcebb41362038962725243c0aed09552fc50" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;$route&lt;/code&gt; service to update the current URL, replacing current route parameters with those specified in &lt;code&gt;newParams&lt;/code&gt;. Provided property names that match the route's path segment definitions will be interpolated into the location's path, while remaining properties will be treated as query params.</source>
          <target state="translated">原因 &lt;code&gt;$route&lt;/code&gt; に指定されたもので、現在のルートパラメーター置換し、現在のURLを更新するサービスを &lt;code&gt;newParams&lt;/code&gt; を。ルートのパスセグメント定義に一致する指定されたプロパティ名は、場所のパスに補間されますが、残りのプロパティはクエリパラメータとして扱われます。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="72d71a668e56adbe90d2fa9fb6ee8972c0b66e4a" translate="yes" xml:space="preserve">
          <source>Chaining promises</source>
          <target state="translated">約束事の連鎖</target>
        </trans-unit>
        <trans-unit id="58e493046d8fd6e3081b6c746a33e60405b9effa" translate="yes" xml:space="preserve">
          <source>Change path when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">パラメータで呼び出されたときにパスを変更し、 &lt;code&gt;$location&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dca2424dc0deb99a58c19e534f338127124d9aab" translate="yes" xml:space="preserve">
          <source>Change path, search and hash, when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">パラメータで呼び出されたときにパス、検索、ハッシュを変更し、 &lt;code&gt;$location&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="da91b66135a4f77c9cc08ce3eaa7130f2a6d2b72" translate="yes" xml:space="preserve">
          <source>Change search part when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">パラメータで呼び出されたときに検索部分を変更し、 &lt;code&gt;$location&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c02c34ae53310357e58911c775459e9c3de3ba96" translate="yes" xml:space="preserve">
          <source>Change the URL.</source>
          <target state="translated">URLを変更します。</target>
        </trans-unit>
        <trans-unit id="927385537fbe1015a617be665c6693f672fb3a52" translate="yes" xml:space="preserve">
          <source>Change the history state object when called with one parameter and return &lt;code&gt;$location&lt;/code&gt;. The state object is later passed to &lt;code&gt;pushState&lt;/code&gt; or &lt;code&gt;replaceState&lt;/code&gt;.</source>
          <target state="translated">1つのパラメーターで呼び出されたときに履歴状態オブジェクトを変更し、 &lt;code&gt;$location&lt;/code&gt; を返します。状態オブジェクトは後で &lt;code&gt;pushState&lt;/code&gt; または &lt;code&gt;replaceState&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="1fa9f4c8eaa824574dae37f62154980d60ca28a4" translate="yes" xml:space="preserve">
          <source>Change the validity state of the form, and notify the parent form (if any).</source>
          <target state="translated">フォームの有効状態を変更し、親フォーム(あれば)に通知する。</target>
        </trans-unit>
        <trans-unit id="667e7970ed20e88c4e980d20c8d0629557dd7400" translate="yes" xml:space="preserve">
          <source>Change the validity state, and notify the form.</source>
          <target state="translated">有効状態を変更し、フォームに通知する。</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="1403f945a22ede84f416992deee9c6911dc2c57f" translate="yes" xml:space="preserve">
          <source>Changes the address bar.</source>
          <target state="translated">アドレスバーを変更します。</target>
        </trans-unit>
        <trans-unit id="318dfbf2d67fa7b4fded5ca142121201dcf2c9ef" translate="yes" xml:space="preserve">
          <source>Changes the address in the browser's address bar.</source>
          <target state="translated">ブラウザのアドレスバーのアドレスを変更します。</target>
        </trans-unit>
        <trans-unit id="5b764ac2b679596bebc6492993329bbb0d3fd0d8" translate="yes" xml:space="preserve">
          <source>Changes the hash fragment when called with a parameter and returns &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">パラメータで呼び出されたときにハッシュフラグメントを変更し、 &lt;code&gt;$location&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c0bb203b42d991b17fac172d8578a01b132de763" translate="yes" xml:space="preserve">
          <source>Changes to the model inside &lt;code&gt;$doCheck&lt;/code&gt; will trigger new turns of the digest loop, which will cause the changes to be propagated throughout the application. Angular does not allow the &lt;code&gt;ngDoCheck&lt;/code&gt; hook to trigger a change outside of the component. It will either throw an error or do nothing depending upon the state of &lt;code&gt;enableProdMode()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$doCheck&lt;/code&gt; 内のモデルへの変更は、ダイジェストループの新しいターンをトリガーします。これにより、変更がアプリケーション全体に伝播されます。Angularは &lt;code&gt;ngDoCheck&lt;/code&gt; フックがコンポーネントの外で変更をトリガーすることを許可しません。 &lt;code&gt;enableProdMode()&lt;/code&gt; の状態に応じて、エラーをスローするか、何もしません。</target>
        </trans-unit>
        <trans-unit id="7409e3021a2ae10433e51958a73352a869dfdffa" translate="yes" xml:space="preserve">
          <source>Changing parameters dynamically</source>
          <target state="translated">パラメータを動的に変更する</target>
        </trans-unit>
        <trans-unit id="5e785584860674d65fa52977c48c6a2d8ab7530e" translate="yes" xml:space="preserve">
          <source>ChildRouter</source>
          <target state="translated">ChildRouter</target>
        </trans-unit>
        <trans-unit id="395f9525e05660c43c121056b86241cf54b50bdc" translate="yes" xml:space="preserve">
          <source>Choose: &lt;code&gt;angular-[version].js&lt;/code&gt; for a human-readable file, suitable for development and debugging.</source>
          <target state="translated">次の &lt;code&gt;angular-[version].js&lt;/code&gt; 選択します。開発およびデバッグに適した、人間が読み取れるファイルのangular- [version] .js。</target>
        </trans-unit>
        <trans-unit id="2d01471977547f403988a18fa90d7812ed92cad5" translate="yes" xml:space="preserve">
          <source>Choose: &lt;code&gt;angular-[version].min.js&lt;/code&gt; for a compressed and obfuscated file, suitable for use in production.</source>
          <target state="translated">&lt;code&gt;angular-[version].min.js&lt;/code&gt; での使用に適した、圧縮および難読化されたファイルの場合は、angular- [version] .min.jsを選択します。</target>
        </trans-unit>
        <trans-unit id="e0fa5d9e8c5bdec155184c067e6fec7c8bb15af2" translate="yes" xml:space="preserve">
          <source>Choosing between ngRepeat and ngOptions</source>
          <target state="translated">ngRepeatとngOptionsの選択</target>
        </trans-unit>
        <trans-unit id="6f950f66f6524d1d6d701a16679a2f3ae7d90d78" translate="yes" xml:space="preserve">
          <source>Chrome Accessibility Developer Tools</source>
          <target state="translated">Chrome アクセシビリティデベロッパーツール</target>
        </trans-unit>
        <trans-unit id="71c207df916db009b3057f6560a48a47fcc25310" translate="yes" xml:space="preserve">
          <source>Class actions return an empty instance (with the additional properties listed below). Instance actions return a promise for the operation.</source>
          <target state="translated">クラスアクションは空のインスタンスを返します(以下にリストされた追加のプロパティを持つ)。インスタンスアクションは操作の約束を返します。</target>
        </trans-unit>
        <trans-unit id="6ec0ce07d9481bf4db4c020b148a12c1b4c3112a" translate="yes" xml:space="preserve">
          <source>Class and ngClass animation hooks</source>
          <target state="translated">クラスと ngClass のアニメーションフック</target>
        </trans-unit>
        <trans-unit id="2a0863a04b4ee272c83f2a94dd23442cc0eb6c51" translate="yes" xml:space="preserve">
          <source>Class-based animations (animations that are triggered via &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and some other directives) have a slightly different naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added and removed.</source>
          <target state="translated">クラスベースのアニメーション（ &lt;code&gt;ngClass&lt;/code&gt; 、 &lt;code&gt;ngShow&lt;/code&gt; 、 &lt;code&gt;ngHide&lt;/code&gt; およびその他のディレクティブを介してトリガーされるアニメーション）は、命名規則がわずかに異なります。クラスベースのアニメーションは基本的なものなので、追加および削除されるクラスで標準のトランジションまたはキーフレームを参照できます。</target>
        </trans-unit>
        <trans-unit id="9191759140319ff20e9dd16485bf237db76b0c98" translate="yes" xml:space="preserve">
          <source>Clears the cache object of any entries.</source>
          <target state="translated">すべてのエントリのキャッシュオブジェクトをクリアします。</target>
        </trans-unit>
        <trans-unit id="e515212a1c11de2835082ada05e6ec961879403e" translate="yes" xml:space="preserve">
          <source>Click here &lt;a href=&quot;../../ng/service/%24animate&quot;&gt;to learn more about animations with &lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;アニメーションの詳細については、ここをクリックしてください。</target>
        </trans-unit>
        <trans-unit id="f4fed55c7291e2ae4022dc03f74858153d78fbbe" translate="yes" xml:space="preserve">
          <source>Click here &lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;to read the documentation for $animateCss&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;$ animateCssのドキュメントを読むには、&lt;/a&gt;ここをクリックしてください。</target>
        </trans-unit>
        <trans-unit id="32484b33993cf9537f02013fd9f85c2ec6cd936f" translate="yes" xml:space="preserve">
          <source>Clicking on the &quot;show&quot; button will open the dialog. The dialog will have a title, which is data bound to &lt;code&gt;username&lt;/code&gt;, and it will also have a body which we would like to transclude into the dialog.</source>
          <target state="translated">「表示」ボタンをクリックするとダイアログが開きます。ダイアログには、 &lt;code&gt;username&lt;/code&gt; にバインドされたデータであるタイトルがあり、ダイアログに変換したい本文も含まれます。</target>
        </trans-unit>
        <trans-unit id="c724973f7e774a94420a9f7d99e10433c417d579" translate="yes" xml:space="preserve">
          <source>Clicks on a link in the page.</source>
          <target state="translated">ページ内のリンクをクリックします。</target>
        </trans-unit>
        <trans-unit id="730424b9edeae148b8ff6d50d8ca98ceee4c119c" translate="yes" xml:space="preserve">
          <source>Clicks on a link.</source>
          <target state="translated">リンクをクリックします。</target>
        </trans-unit>
        <trans-unit id="9ab2e40fdeb36ffa03fcf8447b001724a990908a" translate="yes" xml:space="preserve">
          <source>Clicks the back or forward button (or clicks a History link).</source>
          <target state="translated">戻るまたは進むボタンをクリックします(または履歴リンクをクリックします)。</target>
        </trans-unit>
        <trans-unit id="74d1f7b3edab4ca6a434b8e934d29da720f08e4a" translate="yes" xml:space="preserve">
          <source>Clicks the back or forward button in the browser (or clicks a History link).</source>
          <target state="translated">ブラウザの戻る・進むボタンをクリック(または履歴リンクをクリック)します。</target>
        </trans-unit>
        <trans-unit id="bbfa773e5a63a5ea58c9b6207e608ca0120e592a" translate="yes" xml:space="preserve">
          <source>Close</source>
          <target state="translated">Close</target>
        </trans-unit>
        <trans-unit id="09ef3902bc825a92dc2ab7a4572699d9bb63ce7f" translate="yes" xml:space="preserve">
          <source>Code licensed under &lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;The MIT License&lt;/a&gt;. Documentation licensed under &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;MIT&lt;/a&gt;ライセンスの下でライセンスされるコード。&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0の&lt;/a&gt;下でライセンスされるドキュメント。</target>
        </trans-unit>
        <trans-unit id="7b4bfbac3452bbd16abfec5bd10dc813908247ac" translate="yes" xml:space="preserve">
          <source>Code licensed under &lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;The MIT License&lt;/a&gt;. Documentation licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;MIT&lt;/a&gt;ライセンスの下でライセンスされたコード。&lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY3.0で&lt;/a&gt;ライセンスされているドキュメント。</target>
        </trans-unit>
        <trans-unit id="2dfc49fb8ca872a4cafc6a47501eb288da5ef7b5" translate="yes" xml:space="preserve">
          <source>CoffeeScript Tutorial</source>
          <target state="translated">CoffeeScriptチュートリアル</target>
        </trans-unit>
        <trans-unit id="c548b316d570083f3666806fff6f562e7eab1bab" translate="yes" xml:space="preserve">
          <source>Combines multiple promises into a single promise that is resolved when all of the input promises are resolved.</source>
          <target state="translated">複数のプロミスを1つのプロミスに結合し、入力されたプロミスがすべて解決されたときに解決されます。</target>
        </trans-unit>
        <trans-unit id="fd5f82d40e47be64b2bc3a51357dc831a7c9ccc1" translate="yes" xml:space="preserve">
          <source>Combining directives with different scope defintions</source>
          <target state="translated">異なるスコープ定義を持つディレクティブを組み合わせる</target>
        </trans-unit>
        <trans-unit id="3030caa6c289f4c08d71dfe3a1f33564ff7465d0" translate="yes" xml:space="preserve">
          <source>Commit a pending update to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">保留中の更新を &lt;code&gt;$modelValue&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="a521630b4593fb9bacca2130761b0f7eae72e200" translate="yes" xml:space="preserve">
          <source>Commit all form controls pending updates to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$modelValue&lt;/code&gt; への更新を保留しているすべてのフォームコントロールをコミットします。</target>
        </trans-unit>
        <trans-unit id="7dcd19b6ea69063f828f5ff860efae73d6849a4b" translate="yes" xml:space="preserve">
          <source>Common Accessibility Patterns</source>
          <target state="translated">一般的なアクセシビリティのパターン</target>
        </trans-unit>
        <trans-unit id="dcd05a800dce1c0a95f1b07835a587a1fa065ad4" translate="yes" xml:space="preserve">
          <source>Community Resources</source>
          <target state="translated">コミュニティリソース</target>
        </trans-unit>
        <trans-unit id="f087c397aade898e8ebf5017a565387063b4caf7" translate="yes" xml:space="preserve">
          <source>Comparator which is used in determining if values retrieved using &lt;code&gt;expression&lt;/code&gt; (when it is not a function) should be considered a match based on the expected value (from the filter expression) and actual value (from the object in the array).</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; を使用して取得した値（関数でない場合）を、期待値（フィルター式から）と実際の値（配列内のオブジェクトから）に基づいて一致すると見なすかどうかを決定するために使用されるコンパレーター。</target>
        </trans-unit>
        <trans-unit id="666fd1f458daf70bc53cddeb4eeb774d87e18c31" translate="yes" xml:space="preserve">
          <source>Compare for object equality using &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; instead of comparing for reference equality.</source>
          <target state="translated">参照の等価性を比較する代わりに、&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; &lt;/a&gt;を使用してオブジェクトの等価性を比較します。</target>
        </trans-unit>
        <trans-unit id="3877d9f9528e5e589937b6c5e2e2222e153bc4a4" translate="yes" xml:space="preserve">
          <source>Comparing $location to window.location</source>
          <target state="translated">ロケーションと window.location の比較</target>
        </trans-unit>
        <trans-unit id="e9bfd3462dbe8e77bcf76ca7642f0a152f0c0338" translate="yes" xml:space="preserve">
          <source>Comparison between Directive definition and Component definition</source>
          <target state="translated">指令定義とコンポーネント定義の比較</target>
        </trans-unit>
        <trans-unit id="53cb52234319d0132a4da6be7bbd0b5b04aa75f1" translate="yes" xml:space="preserve">
          <source>Comparison of the two approaches</source>
          <target state="translated">2つのアプローチの比較</target>
        </trans-unit>
        <trans-unit id="70d88717d38b547780477523d9cbf84942fc4774" translate="yes" xml:space="preserve">
          <source>Comparison with life-cycle hooks in the new Angular</source>
          <target state="translated">新しいAngularのライフサイクルフックとの比較</target>
        </trans-unit>
        <trans-unit id="17ab47599110d104d7ae0defacdd1ff429aa3f51" translate="yes" xml:space="preserve">
          <source>Compile the element, but restrict the maximum priority, so that any already compiled directives (including the &lt;code&gt;addOptions&lt;/code&gt; directive) are not compiled again.</source>
          <target state="translated">要素をコンパイルしますが、最大の優先順位を制限して、すでにコンパイルされたディレクティブ（ &lt;code&gt;addOptions&lt;/code&gt; ディレクティブを含む）が再度コンパイルされないようにします。</target>
        </trans-unit>
        <trans-unit id="341a20e237ff5c4b89204a3d4d8c8af5f8aa63bb" translate="yes" xml:space="preserve">
          <source>Compiler</source>
          <target state="translated">Compiler</target>
        </trans-unit>
        <trans-unit id="1782e5208f00a046cef2996ed8671fed74f08a08" translate="yes" xml:space="preserve">
          <source>Compiler is an AngularJS service which traverses the DOM looking for attributes. The compilation process happens in two phases.</source>
          <target state="translated">CompilerはAngularJSのサービスで、DOMを横断して属性を探します。コンパイル処理は2つのフェーズで行われます。</target>
        </trans-unit>
        <trans-unit id="fa46964e2997513f5edb8da69c2a884d9e0d6812" translate="yes" xml:space="preserve">
          <source>Compiles a string with markup into an interpolation function. This service is used by the HTML &lt;a href=&quot;%24compile&quot;&gt;$compile&lt;/a&gt; service for data binding. See &lt;a href=&quot;../provider/%24interpolateprovider&quot;&gt;$interpolateProvider&lt;/a&gt; for configuring the interpolation markup.</source>
          <target state="translated">マークアップ付きの文字列を補間関数にコンパイルします。このサービスは、データバインディングのためにHTML &lt;a href=&quot;%24compile&quot;&gt;$ compile&lt;/a&gt;サービスによって使用されます。補間マークアップの構成については、&lt;a href=&quot;../provider/%24interpolateprovider&quot;&gt;$ interpolateProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="eca1135b84c5a41b83e29f018e5f8bc1af9b4725" translate="yes" xml:space="preserve">
          <source>Compiles a string with markup into an interpolation function. This service is used by the HTML &lt;a href=&quot;service/%24compile&quot;&gt;$compile&lt;/a&gt; service for data binding. See &lt;a href=&quot;provider/%24interpolateprovider&quot;&gt;$interpolateProvider&lt;/a&gt; for configuring the interpolation markup.</source>
          <target state="translated">マークアップ付きの文字列を補間関数にコンパイルします。このサービスは、データバインディングのためにHTML &lt;a href=&quot;service/%24compile&quot;&gt;$ compile&lt;/a&gt;サービスによって使用されます。補間マークアップの構成については、&lt;a href=&quot;provider/%24interpolateprovider&quot;&gt;$ interpolateProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="35e0dd7e6479d72ea347ebf52f30653b69adb513" translate="yes" xml:space="preserve">
          <source>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; and the template together.</source>
          <target state="translated">HTML文字列またはDOMをテンプレートにコンパイルし、テンプレート関数を生成します。テンプレート関数は、&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;とテンプレートをリンクするために使用できます。</target>
        </trans-unit>
        <trans-unit id="443f4ce80e9a994956ec0834e6c655a3bb098864" translate="yes" xml:space="preserve">
          <source>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; and the template together.</source>
          <target state="translated">HTML文字列またはDOMをテンプレートにコンパイルし、テンプレート関数を生成します。テンプレート関数は、&lt;a href=&quot;type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;とテンプレートをリンクするために使用できます。</target>
        </trans-unit>
        <trans-unit id="952c4e08cf22564bbdb9648e98a02a3602d26f59" translate="yes" xml:space="preserve">
          <source>Complementary Libraries</source>
          <target state="translated">補完的な図書館</target>
        </trans-unit>
        <trans-unit id="1660cae935161f6c4359132ab0d198129c40fd5d" translate="yes" xml:space="preserve">
          <source>Complete list of shortcut methods:</source>
          <target state="translated">ショートカット方法の完全なリスト。</target>
        </trans-unit>
        <trans-unit id="ddddba8622d54a1019f55ac5d840e4b03ae004df" translate="yes" xml:space="preserve">
          <source>Completely Replace the $delegate</source>
          <target state="translated">完全に $delegate を置き換える</target>
        </trans-unit>
        <trans-unit id="78347206801a061c0decedac37c91767431b4537" translate="yes" xml:space="preserve">
          <source>Complex Models (objects or collections)</source>
          <target state="translated">複雑なモデル(オブジェクトまたはコレクション</target>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes" xml:space="preserve">
          <source>Component</source>
          <target state="translated">Component</target>
        </trans-unit>
        <trans-unit id="a85196f04b4052b5f8e757116e9ed52d626cea29" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;)</source>
          <target state="translated">コンポーネント定義オブジェクト（簡略化された&lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;ディレクティブ定義オブジェクト&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="52b1bdba92bb54788ab2cdeee061c0e16d336346" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;), with the following properties (all optional):</source>
          <target state="translated">次のプロパティを持つコンポーネント定義オブジェクト（簡略化された&lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;ディレクティブ定義オブジェクト&lt;/a&gt;）（すべてオプション）：</target>
        </trans-unit>
        <trans-unit id="77dc9cfc7cb3b52a950028db1a5820bbb36a0ff5" translate="yes" xml:space="preserve">
          <source>Component definitions are very simple and do not require as much configuration as defining general directives. Component definitions usually consist only of a template and a controller backing it.</source>
          <target state="translated">コンポーネントの定義は非常にシンプルで、一般的なディレクティブを定義するほどの設定は必要ありません。コンポーネントの定義は通常、テンプレートとそれを支えるコントローラだけで構成されています。</target>
        </trans-unit>
        <trans-unit id="4fe71f615894962f769e3b09ee4b063dd3104c07" translate="yes" xml:space="preserve">
          <source>Component-based application architecture</source>
          <target state="translated">コンポーネントベースのアプリケーションアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="412108d00dc3d78512b7f514b082a1dc5a2a25c0" translate="yes" xml:space="preserve">
          <source>ComponentInstruction</source>
          <target state="translated">ComponentInstruction</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="052de9b4663f1da6b0dad6763f0e84f04970f1d5" translate="yes" xml:space="preserve">
          <source>Components are also useful as route templates (e.g. when using &lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute&lt;/a&gt;). In a component-based application, every view is a component:</source>
          <target state="translated">コンポーネントは、ルートテンプレートとしても役立ちます（たとえば、&lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute&lt;/a&gt;を使用する場合）。コンポーネントベースのアプリケーションでは、すべてのビューがコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="8baa065a5cba8d6c52c78a61ff9c9163ba5e3d7e" translate="yes" xml:space="preserve">
          <source>Components as route templates</source>
          <target state="translated">ルートテンプレートとしてのコンポーネント</target>
        </trans-unit>
        <trans-unit id="bf44683e2124b402afd1667eddfc51003f631e51" translate="yes" xml:space="preserve">
          <source>Components can be registered using the &lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;.component()&lt;/code&gt;&lt;/a&gt; method of an AngularJS module (returned by &lt;a href=&quot;module&quot;&gt;&lt;code&gt;angular.module()&lt;/code&gt;&lt;/a&gt;). The method takes two arguments:</source>
          <target state="translated">コンポーネントは、AngularJSモジュールの&lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;.component()&lt;/code&gt; &lt;/a&gt;メソッドを使用して登録できます（&lt;a href=&quot;module&quot;&gt; &lt;code&gt;angular.module()&lt;/code&gt; &lt;/a&gt;によって返されます）。このメソッドは2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="1ede4134b45566bbb53a326a5ba30ed2337d4b16" translate="yes" xml:space="preserve">
          <source>Components that have their dependencies injected allow them to be easily mocked on a test by test basis, without having to mess with any global variables that could inadvertently affect another test.</source>
          <target state="translated">依存関係が注入されているコンポーネントは、不注意で他のテストに影響を与える可能性のあるグローバル変数をいじらなくても、テストごとに簡単にモックすることができます。</target>
        </trans-unit>
        <trans-unit id="db2bb3f2d36cc8fea7cbf33806f6b7360ab29060" translate="yes" xml:space="preserve">
          <source>Comprehensive Directive API</source>
          <target state="translated">包括的な指令API</target>
        </trans-unit>
        <trans-unit id="c05bafdb56031bb64da1f1d1861f60118932c605" translate="yes" xml:space="preserve">
          <source>Concept</source>
          <target state="translated">Concept</target>
        </trans-unit>
        <trans-unit id="cc8d5c03c91b4ff4e34ca056bb24f3fb67fdffdd" translate="yes" xml:space="preserve">
          <source>Conceptual Overview</source>
          <target state="translated">概念的な概要</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="71c2b150a06049925dc940ff0b7ba9b28de4537b" translate="yes" xml:space="preserve">
          <source>Configure $http service to combine processing of multiple http responses received at around the same time via &lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$rootScope.$applyAsync&lt;/a&gt;. This can result in significant performance improvement for bigger applications that make many HTTP requests concurrently (common during application bootstrap).</source>
          <target state="translated">$ httpサービスを構成して、&lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ rootScope。$ applyAsyncを&lt;/a&gt;介してほぼ同時に受信した複数のhttp応答の処理を結合します。これにより、多数のHTTPリクエストを同時に実行する大規模なアプリケーションのパフォーマンスが大幅に向上する可能性があります（アプリケーションのブートストラップ中に一般的です）。</target>
        </trans-unit>
        <trans-unit id="7896d76d615866e43aa8573a41f4d68ecbe909a3" translate="yes" xml:space="preserve">
          <source>Configure $parse service to add literal values that will be present as literal at expressions.</source>
          <target state="translated">式の際にリテラルとして存在する値を追加するように$parseサービスを設定します。</target>
        </trans-unit>
        <trans-unit id="401014f049aff69ca01aa4c69560adc72e65a93d" translate="yes" xml:space="preserve">
          <source>Configure several aspects of error handling in AngularJS if used as a setter or return the current configuration if used as a getter. The following options are supported:</source>
          <target state="translated">セッターとして使用した場合はAngularJSのエラー処理のいくつかの側面を設定し、ゲッターとして使用した場合は現在の設定を返します。以下のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="7ed62ca7d00be1bd9be3f6f28effdd940c0a125d" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装を構成して、 &lt;code&gt;$exceptionHandler&lt;/code&gt; 渡されたエラーを再スローまたはログに記録します。</target>
        </trans-unit>
        <trans-unit id="fa7b44a578c9b66e6eac734e95b3a649678bb56b" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装を構成して、 &lt;code&gt;$exceptionHandler&lt;/code&gt; 渡されたエラーを再スローまたはログに記録します。</target>
        </trans-unit>
        <trans-unit id="ab33277d4bc70753dadfe4b4b47939a3bafacc65" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装を構成して、 &lt;code&gt;$exceptionHandler&lt;/code&gt; 渡されたエラーを再スローまたはログに記録します。</target>
        </trans-unit>
        <trans-unit id="ef688c3bf06b49c7583d5229b5b135310e872abe" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize</source>
          <target state="translated">ngPluralize の設定</target>
        </trans-unit>
        <trans-unit id="25493fa5f58d0b23af0328cbcc8d72f1b7096ef8" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize with offset</source>
          <target state="translated">オフセットで ngPluralize を設定する</target>
        </trans-unit>
        <trans-unit id="614cb97d5550e6a973dc4d4e5e71bacf0e254a0a" translate="yes" xml:space="preserve">
          <source>Connecting to the scope</source>
          <target state="translated">スコープへの接続</target>
        </trans-unit>
        <trans-unit id="bd1ca2146ad14cf9d26b89eef58c53c8846544f1" translate="yes" xml:space="preserve">
          <source>Consider a base href set as follows: &lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; (i.e. the application exists in the &quot;folder&quot; called &lt;code&gt;/base&lt;/code&gt;). The URL &lt;code&gt;/base&lt;/code&gt; is actually outside the application (it refers to the &lt;code&gt;base&lt;/code&gt; file found in the root &lt;code&gt;/&lt;/code&gt; folder).</source>
          <target state="translated">次のようにbase hrefセットを検討してください： &lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; （つまり、アプリケーションは &lt;code&gt;/base&lt;/code&gt; という「フォルダー」に存在します）。 URL &lt;code&gt;/base&lt;/code&gt; は実際にはアプリケーションの外部にあります（ルート &lt;code&gt;/&lt;/code&gt; フォルダーにある &lt;code&gt;base&lt;/code&gt; ファイルを指します）。</target>
        </trans-unit>
        <trans-unit id="b75dc57f6ba4e3ce850116dfdcb6fffec204312d" translate="yes" xml:space="preserve">
          <source>Consider a text input with an autocomplete list (for fruit), where the items are objects with a name and an id. A user enters &lt;code&gt;ap&lt;/code&gt; and then selects &lt;code&gt;Apricot&lt;/code&gt; from the list. Based on this, the autocomplete widget will call &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt;, but the rendered value will still be &lt;code&gt;ap&lt;/code&gt;. The widget can then call &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; to run the model -&amp;gt; view pipeline again, which formats the object to the string &lt;code&gt;Apricot&lt;/code&gt;, then updates the &lt;code&gt;$viewValue&lt;/code&gt;, and finally renders it in the DOM.</source>
          <target state="translated">アイテムが名前とIDを持つオブジェクトである、オートコンプリートリスト（フルーツ用）を使用したテキスト入力について考えます。ユーザーは &lt;code&gt;ap&lt;/code&gt; を入力し、リストから &lt;code&gt;Apricot&lt;/code&gt; を選択します。これに基づいて、オートコンプリートウィジェットは &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt; を呼び出しますが、レンダリングされた値は引き続き &lt;code&gt;ap&lt;/code&gt; になります。次に、ウィジェットは &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; を呼び出してモデルを表示し、パイプラインを表示します。これにより、オブジェクトが文字列 &lt;code&gt;Apricot&lt;/code&gt; にフォーマットされ、 &lt;code&gt;$viewValue&lt;/code&gt; 更新され、最後にDOMにレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="a18df99124cdd530d7ee713a96afbde420b4e68f" translate="yes" xml:space="preserve">
          <source>Consider the following example, which illustrates a typical use case of &lt;code&gt;ngMessages&lt;/code&gt;. Within the form &lt;code&gt;myForm&lt;/code&gt; we have a text input named &lt;code&gt;myField&lt;/code&gt; which is bound to the scope variable &lt;code&gt;field&lt;/code&gt; using the &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; の一般的な使用例を示す次の例を検討してください。 &lt;code&gt;myForm&lt;/code&gt; フォーム内には、&lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;ディレクティブを使用してスコープ変数 &lt;code&gt;field&lt;/code&gt; バインドされている &lt;code&gt;myField&lt;/code&gt; という名前のテキスト入力があります。</target>
        </trans-unit>
        <trans-unit id="067758acc9cf591a779af4e3d644186dd0af02ba" translate="yes" xml:space="preserve">
          <source>Consider this module, which includes a &lt;code&gt;willBreak&lt;/code&gt; service that uses implicit DI:</source>
          <target state="translated">暗黙のDIを使用する &lt;code&gt;willBreak&lt;/code&gt; サービスが含まれている次のモジュールを考えてみます。</target>
        </trans-unit>
        <trans-unit id="8067f2d7407363afa44d0fb08f79e6b26296396e" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSP&lt;/a&gt; (but don't rely only on CSP)</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSPの&lt;/a&gt;使用を検討してください（ただし、CSPのみに依存しないでください）</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="d694aced80a769dd56d5ff19d56f4662c3bdd367" translate="yes" xml:space="preserve">
          <source>Constant Recipe</source>
          <target state="translated">定番レシピ</target>
        </trans-unit>
        <trans-unit id="baf6a951c27a9234a81559df8b9c866456740fa7" translate="yes" xml:space="preserve">
          <source>Constant value.</source>
          <target state="translated">定数値。</target>
        </trans-unit>
        <trans-unit id="b99e72117469b9970f18ba5d75fe3d0de1866186" translate="yes" xml:space="preserve">
          <source>Constant, message, exception or an object representing the rejection reason.</source>
          <target state="translated">定数、メッセージ、例外、または拒絶理由を表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="64d5e2c2aff5afc784db4e0bcb2cdc6862d0f0f0" translate="yes" xml:space="preserve">
          <source>Construction function for creating new instance of the service.</source>
          <target state="translated">サービスのインスタンスを新規作成するための構築関数です。</target>
        </trans-unit>
        <trans-unit id="e4b290eee7ee9eca877a7e01bf49e3ec181e017e" translate="yes" xml:space="preserve">
          <source>Content Security Policy</source>
          <target state="translated">コンテンツセキュリティポリシー</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="802338f12e55179b2d6cd860935bf05175261d07" translate="yes" xml:space="preserve">
          <source>Context which &lt;code&gt;fn&lt;/code&gt; should be evaluated in.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; が評価されるコンテキスト。</target>
        </trans-unit>
        <trans-unit id="18b017e5b4b89d6ff684844a26fb098545f160cf" translate="yes" xml:space="preserve">
          <source>Contribute</source>
          <target state="translated">Contribute</target>
        </trans-unit>
        <trans-unit id="4e9871e0a8defabedbf3524a3226fa9d74385b59" translate="yes" xml:space="preserve">
          <source>Contributing to AngularJS</source>
          <target state="translated">AngularJSへの貢献</target>
        </trans-unit>
        <trans-unit id="86cf9b9a051872b3598a096da04f48dd25d0af73" translate="yes" xml:space="preserve">
          <source>Control of the AngularJS templates makes applications vulnerable even if there was a completely secure sandbox:</source>
          <target state="translated">AngularJSのテンプレートを制御すると、完全に安全なサンドボックスがあったとしてもアプリケーションが脆弱になります。</target>
        </trans-unit>
        <trans-unit id="a36a5ffa6e0dcfb64fac1b2b3d6fb176de9689de" translate="yes" xml:space="preserve">
          <source>Controller</source>
          <target state="translated">Controller</target>
        </trans-unit>
        <trans-unit id="99ffd59ebbf0e37afa0e0d929b94eba513e392bc" translate="yes" xml:space="preserve">
          <source>Controller &amp;mdash; The &lt;code&gt;ngController&lt;/code&gt; directive specifies a Controller class; the class contains business logic behind the application to decorate the scope with functions and values</source>
          <target state="translated">Controller &amp;mdash; &lt;code&gt;ngController&lt;/code&gt; ディレクティブはControllerクラスを指定します。クラスには、アプリケーションの背後にビジネスロジックが含まれ、スコープを関数と値で装飾します</target>
        </trans-unit>
        <trans-unit id="ccb3847c75d985adc6744eb79ac9c9cee18abe79" translate="yes" xml:space="preserve">
          <source>Controller constructor fn (optionally decorated with DI annotations in the array notation).</source>
          <target state="translated">コントローラのコンストラクタ fn (オプションで配列表記のDIアノテーションで装飾されます).</target>
        </trans-unit>
        <trans-unit id="c27dec249f237841f7387d65d26a7c0ce88c6c18" translate="yes" xml:space="preserve">
          <source>Controller constructor function.</source>
          <target state="translated">コントローラのコンストラクタ関数です。</target>
        </trans-unit>
        <trans-unit id="9d19a84c7ff095475b0ae33d1170893261391e4f" translate="yes" xml:space="preserve">
          <source>Controller constructor function. The controller is instantiated before the pre-linking phase and can be accessed by other directives (see &lt;code&gt;require&lt;/code&gt; attribute). This allows the directives to communicate with each other and augment each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:</source>
          <target state="translated">コントローラーコンストラクター関数。コントローラは、事前リンクフェーズの前にインスタンス化され、他のディレクティブからアクセスできます（ &lt;code&gt;require&lt;/code&gt; 属性を参照）。これにより、ディレクティブが相互に通信し、相互の動作を強化できます。コントローラは、次のローカルで注入可能（およびブラケット表記をサポート）です。</target>
        </trans-unit>
        <trans-unit id="a9aaeb41d0885b4404238f900eeab9f49522f6e5" translate="yes" xml:space="preserve">
          <source>Controller methods can also take arguments, as demonstrated in the following variation of the previous example.</source>
          <target state="translated">コントローラ・メソッドは引数を取ることもできます。</target>
        </trans-unit>
        <trans-unit id="e71925aefd89c1562fed9afbd32f746da1e7c9c5" translate="yes" xml:space="preserve">
          <source>Controller methods can be created through direct assignment to scope (see the &lt;code&gt;chiliSpicy&lt;/code&gt; method)</source>
          <target state="translated">スコープへの直接割り当てを通じてコン​​トローラーメソッドを作成できます（ &lt;code&gt;chiliSpicy&lt;/code&gt; メソッドを参照）</target>
        </trans-unit>
        <trans-unit id="abab164d91275a7c27f69b9901af5a808932f134" translate="yes" xml:space="preserve">
          <source>Controller name to check.</source>
          <target state="translated">チェックするコントローラー名</target>
        </trans-unit>
        <trans-unit id="d164658172a7f4d47214d163beff14e7b08173e9" translate="yes" xml:space="preserve">
          <source>Controller name, or an object map of controllers where the keys are the names and the values are the constructors.</source>
          <target state="translated">コントローラ名、またはコントローラのオブジェクトマップで、キーが名前、値がコンストラクタとなります。</target>
        </trans-unit>
        <trans-unit id="fd28161568c4e8e181bf8b34d2eb64190067fd07" translate="yes" xml:space="preserve">
          <source>Controllers</source>
          <target state="translated">Controllers</target>
        </trans-unit>
        <trans-unit id="fbc681066b21fc1c3641cf2f3c220b9b2bb08d7e" translate="yes" xml:space="preserve">
          <source>Controllers and Scopes</source>
          <target state="translated">コントローラとスコープ</target>
        </trans-unit>
        <trans-unit id="911140cd3f21770764dea61bf3752956262c1067" translate="yes" xml:space="preserve">
          <source>Controllers are &quot;classes&quot; or &quot;constructor functions&quot; that are responsible for providing the application behavior that supports the declarative markup in the template. The recommended way of declaring Controllers is using the array notation:</source>
          <target state="translated">コントローラは「クラス」または「コンストラクタ関数」であり、テンプレート内の宣言的なマークアップをサポートするアプリケーションの動作を提供する責任があります。推奨されるコントローラの宣言方法は配列表記法を使うことです。</target>
        </trans-unit>
        <trans-unit id="5b5d98f528a42620b2cc0825785014474de8791d" translate="yes" xml:space="preserve">
          <source>Controllers can be attached to the DOM in different ways. For each of them, AngularJS will instantiate a new Controller object, using the specified Controller's &lt;strong&gt;constructor function&lt;/strong&gt;:</source>
          <target state="translated">コントローラーはさまざまな方法でDOMに接続できます。それらのそれぞれについて、AngularJSは指定されたControllerの&lt;strong&gt;コンストラクター関数&lt;/strong&gt;を使用して、新しいControllerオブジェクトをインスタンス化し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1c6d830a012a42e0e3e98e8d7391642d69b5f9c0" translate="yes" xml:space="preserve">
          <source>Controllers define methods (behavior) that can mutate the model (properties on the scope).</source>
          <target state="translated">コントローラは、モデルを変異させることができるメソッド(動作)を定義します(スコープ上のプロパティ)。</target>
        </trans-unit>
        <trans-unit id="70c782bc574579d2517b6cec8967686212a0d454" translate="yes" xml:space="preserve">
          <source>Controllers may register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the model. These watches execute immediately after the controller behavior executes.</source>
          <target state="translated">コントローラはモデルに&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;時計&lt;/a&gt;を登録できます。これらのウォッチは、コントローラーの動作が実行された直後に実行されます。</target>
        </trans-unit>
        <trans-unit id="058997bd1ff2c8ff837142c06062cc669ac555e1" translate="yes" xml:space="preserve">
          <source>Controllers use scopes to expose controller methods to templates (see &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;).</source>
          <target state="translated">コントローラーはスコープを使用して、コントローラーメソッドをテンプレートに公開します（&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controllerを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7dd94c9d2ce116f0c4c53ed1b007067b7b712d4c" translate="yes" xml:space="preserve">
          <source>Controls (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.</source>
          <target state="translated">コントロール（ &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;textarea&lt;/code&gt; ）は、ユーザーがデータを入力する方法です。フォームは、関連するコントロールをグループ化するためのコントロールのコレクションです。</target>
        </trans-unit>
        <trans-unit id="e170fcf2efd35c14b97e47909e1264edfdda6632" translate="yes" xml:space="preserve">
          <source>Convert the &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, or &lt;code&gt;_&lt;/code&gt;-delimited name to &lt;code&gt;camelCase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、または &lt;code&gt;_&lt;/code&gt; で区切られた名前を &lt;code&gt;camelCase&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="933184608bdac4f3c6c004f83098137beaa3d86f" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;を関数に変換します。</target>
        </trans-unit>
        <trans-unit id="2eea8ad796d2916c4ebaeca90af5bde7b4d8a77a" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function. This is like &lt;a href=&quot;%24parse&quot;&gt;$parse&lt;/a&gt; and is identical when the expression is a literal constant. Otherwise, it wraps the expression in a call to &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted(&lt;em&gt;type&lt;/em&gt;, &lt;em&gt;result&lt;/em&gt;)&lt;/a&gt;</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;を関数に変換します。これは&lt;a href=&quot;%24parse&quot;&gt;$ parseに&lt;/a&gt;似ており、式がリテラル定数の場合と同じです。それ以外の場合は、式を&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$ sce.getTrusted（&lt;/a&gt;&lt;em&gt;type&lt;/em&gt;、&lt;em&gt;result&lt;/em&gt;）の呼び出しにラップします&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f52436d3294322d69775a94b63db34d958c64e34" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;式&lt;/a&gt;を関数に変換します。</target>
        </trans-unit>
        <trans-unit id="241b70e1e8de1ff6cda970c4d284ff5a349664ae" translate="yes" xml:space="preserve">
          <source>Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with &lt;code&gt;x-&lt;/code&gt; or &lt;code&gt;data-&lt;/code&gt;) to its normalized, camelCase form.</source>
          <target state="translated">属性名（たとえば、ダッシュ/コロン/アンダースコアで区切られた文字列、オプションで接頭辞 &lt;code&gt;x-&lt;/code&gt; または &lt;code&gt;data-&lt;/code&gt; が付いている）を、正規化されたキャメルケース形式に変換します。</target>
        </trans-unit>
        <trans-unit id="0849392d519f4aa3fac0a65873ae6d050016e1fe" translate="yes" xml:space="preserve">
          <source>Converts string to lowercase.</source>
          <target state="translated">文字列を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="b79ed60a960e0da09dfacee4601fd97afa217eb9" translate="yes" xml:space="preserve">
          <source>Converts string to uppercase.</source>
          <target state="translated">文字列を大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="c872753511d558c4ce512746cf585786dd025a3c" translate="yes" xml:space="preserve">
          <source>Core Concepts</source>
          <target state="translated">コアコンセプト</target>
        </trans-unit>
        <trans-unit id="2e84aab6976a7309d079e90c2b70df72a431d11c" translate="yes" xml:space="preserve">
          <source>Counts all the direct and indirect child scopes of the current scope.</source>
          <target state="translated">現在のスコープの直接および間接的な子スコープをすべて数えます。</target>
        </trans-unit>
        <trans-unit id="443961121af9afe27d68ec052ba843a27eaf31a0" translate="yes" xml:space="preserve">
          <source>Counts all the watchers of direct and indirect child scopes of the current scope.</source>
          <target state="translated">現在のスコープの直接・間接子スコープのウォッチャーをすべてカウントします。</target>
        </trans-unit>
        <trans-unit id="a16536d78dc34897436003938234d72482a1d526" translate="yes" xml:space="preserve">
          <source>Courses</source>
          <target state="translated">Courses</target>
        </trans-unit>
        <trans-unit id="389e36945902ac4da978f24ea80f3d5bbd64c891" translate="yes" xml:space="preserve">
          <source>Crawling your app</source>
          <target state="translated">あなたのアプリをクロール</target>
        </trans-unit>
        <trans-unit id="45608ebdcb44d27d42f32d60acd39e85de71b39c" translate="yes" xml:space="preserve">
          <source>Create a new injector that can provide components defined in our &lt;code&gt;myModule&lt;/code&gt; module and request our &lt;code&gt;greeter&lt;/code&gt; service from the injector. (This is usually done automatically by AngularJS bootstrap).</source>
          <target state="translated">私たちの中で定義されたコンポーネントを提供することができ、新たなインジェクター作成 &lt;code&gt;myModule&lt;/code&gt; モジュールを、私たちの要求 &lt;code&gt;greeter&lt;/code&gt; インジェクタからのサービスを。（これは通常、AngularJSブートストラップによって自動的に行われます）。</target>
        </trans-unit>
        <trans-unit id="971013bc0a9711b010a8dd9b707cb3697b7f4d5f" translate="yes" xml:space="preserve">
          <source>Create a new instance of JS type. The method takes a constructor function, invokes the new operator, and supplies all of the arguments to the constructor function as specified by the constructor annotation.</source>
          <target state="translated">JS 型の新しいインスタンスを作成します。このメソッドはコンストラクタ関数を受け取り、new 演算子を呼び出し、コンストラクタ注釈で指定されたコンストラクタ関数へのすべての引数を供給します。</target>
        </trans-unit>
        <trans-unit id="9cc6657b1652167630bc2a55c743f36c28dcc171" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Deferred&lt;/code&gt; object which represents a task which will finish in the future.</source>
          <target state="translated">今後終了するタスクを表す &lt;code&gt;Deferred&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="d11bba0687af96cbd2d8bb53eeba0343f2e22377" translate="yes" xml:space="preserve">
          <source>Creates a deep copy of &lt;code&gt;source&lt;/code&gt;, which should be an object or an array. This functions is used internally, mostly in the change-detection code. It is not intended as an all-purpose copy function, and has several limitations (see below).</source>
          <target state="translated">オブジェクトまたは配列である &lt;code&gt;source&lt;/code&gt; のディープコピーを作成します。この関数は、主に変更検出コードで内部的に使用されます。これは、多目的コピー機能を意図したものではなく、いくつかの制限があります（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="afa1484b840a9ffabd1ceb69c929659784229740" translate="yes" xml:space="preserve">
          <source>Creates a new array or string containing only a specified number of elements. The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of &lt;code&gt;limit&lt;/code&gt;. Other array-like objects are also supported (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input, it is converted to a string.</source>
          <target state="translated">指定された数の要素のみを含む新しい配列または文字列を作成します。要素は、 &lt;code&gt;limit&lt;/code&gt; の値と符号（正または負）で指定された、ソース配列、文字列、または数値の最初または最後から取得されます。他の配列のようなオブジェクトもサポートされています（例：配列サブクラス、NodeLists、jqLit​​e / jQueryコレクションなど）。数値を入力として使用すると、文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="be3c2e6c2da6bbf270113921436fdebc0aadccf9" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for DELETE requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">DELETEリクエストの新しいバックエンド定義を作成します。詳細については &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e535501af031225c35fb51be3e57cd8b30dbbd81" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for GET requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">GETリクエストの新しいバックエンド定義を作成します。詳細については &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="356cc2f1fc79ace6115ff3114750774f5192302f" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for HEAD requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">HEADリクエストの新しいバックエンド定義を作成します。詳細については &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="049cbbc849e59668c71cc30e7a114207708c87cf" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for JSONP requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">JSONPリクエストの新しいバックエンド定義を作成します。詳細については &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a1e3e71e874615b87146e6893453eeadfaf6659" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PATCH requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">PATCHリクエストの新しいバックエンド定義を作成します。詳細については &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="eda4d8b9cd6e902637dd9ad1e48fec7c8bb7cd5c" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for POST requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">POSTリクエストの新しいバックエンド定義を作成します。詳細については &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="25a82e38306940d53cc0431c2027b19ad9784508" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PUT requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">PUTリクエストの新しいバックエンド定義を作成します。詳細については &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="15f03f22d3c9680dc729ef2ccf8e1606ba4e48fa" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition that compares only with the requested route.</source>
          <target state="translated">要求されたルートとのみ比較する新しいバックエンド定義を作成します。</target>
        </trans-unit>
        <trans-unit id="f48cdf8dae7db1d48c0c6ef4dea9caf8360e67d3" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition.</source>
          <target state="translated">新しいバックエンド定義を作成します。</target>
        </trans-unit>
        <trans-unit id="e4122c824ad9684d95a45783de97719b5e6982d9" translate="yes" xml:space="preserve">
          <source>Creates a new child &lt;a href=&quot;%24rootscope.scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">新しい子&lt;a href=&quot;%24rootscope.scope&quot;&gt;スコープを&lt;/a&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="de053e738e592f1089fb9a006cc3b78b9a9bb916" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for DELETE requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">DELETE要求に対する新しい要求の期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e36dcfb22e2a05490dc118fb61c929695cfc0cd2" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for GET requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">GETリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="caa7758c7686ac3d104ccfccb9c7de838c640b7d" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for HEAD requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">HEADリクエストに対して新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="dbdab2ed8f022128732b490b699f2be275275bdd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for JSONP requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">JSONPリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a3d06136b6563a9d9eca8d2c71cc5612b1d724c" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PATCH requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">PATCHリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ee017574d4a1cc6b2b83a364ba45ecf9253c34cd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for POST requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">POSTリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5406609dce34fb161e5e19a023b5cd524a033c97" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PUT requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">PUTリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0be9180abbbad424813f1fc95de7b10c2c836e34" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation that compares only with the requested route.</source>
          <target state="translated">要求されたルートとのみ比較する新しいリクエスト期待値を作成します。</target>
        </trans-unit>
        <trans-unit id="a30b5b3ceb57067554cf2b1480796fa683e821bd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation.</source>
          <target state="translated">新しいリクエスト期待値を作成します。</target>
        </trans-unit>
        <trans-unit id="b87ac50e12a922afd057ef55f3f8b4babfd88906" translate="yes" xml:space="preserve">
          <source>Creates a promise that is resolved as rejected with the specified &lt;code&gt;reason&lt;/code&gt;. This api should be used to forward rejection in a chain of promises. If you are dealing with the last promise in a promise chain, you don't need to worry about it.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; 拒否されたものとして解決されるプロミスを作成します。このAPIは、一連の約束の中で拒否を転送するために使用する必要があります。プロミスチェーンの最後のプロミスを処理する場合は、心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2d3b67b5019f3d6a71328d9460125c9c206f73df" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">サービスの取得と依存関係の注入に使用できるインジェクターオブジェクトを作成します（&lt;a href=&quot;../../../guide/di&quot;&gt;依存関係の注入を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7356a349c1f5567bb5bd540f22f1fb39ae0a858c" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">サービスの取得と依存関係の注入に使用できるインジェクターオブジェクトを作成します（&lt;a href=&quot;../../guide/di&quot;&gt;依存関係の注入を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8695fdeaecdde9d69786b268e43f9db9c6275ac8" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;../service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;インスタンスを作成して構成します。</target>
        </trans-unit>
        <trans-unit id="02881b14df84f6433db6e90021eea6be086eb518" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;インスタンスを作成して構成します。</target>
        </trans-unit>
        <trans-unit id="7b5cfadde58f93508e998389a777198ca3f108c0" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;インスタンスを作成して構成します。</target>
        </trans-unit>
        <trans-unit id="edbda21e00ea49fe435ceaf70927ac4e177701c4" translate="yes" xml:space="preserve">
          <source>Creates and wires objects and functions</source>
          <target state="translated">オブジェクトと機能の作成と配線</target>
        </trans-unit>
        <trans-unit id="ffcaf8830fe68d1b1f68ba57b8709c9d5b6199de" translate="yes" xml:space="preserve">
          <source>Creating Directives</source>
          <target state="translated">ディレクティブの作成</target>
        </trans-unit>
        <trans-unit id="a700dae1bd51c2c95667196a1753a5f50b43b0b7" translate="yes" xml:space="preserve">
          <source>Creating Directives that Communicate</source>
          <target state="translated">伝える指示書の作成</target>
        </trans-unit>
        <trans-unit id="8fbe66dd12a5b3a3552d7672f77f9a38a3123301" translate="yes" xml:space="preserve">
          <source>Creating Services</source>
          <target state="translated">サービスの作成</target>
        </trans-unit>
        <trans-unit id="c10c8a9d5669bca0e2013728d5dfd0cb881a0713" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Adds Event Listeners</source>
          <target state="translated">イベントリスナーを追加するディレクティブの作成</target>
        </trans-unit>
        <trans-unit id="f13dcfd72af44ef370551b4c95c6f4d5f8e82c46" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Manipulates the DOM</source>
          <target state="translated">DOM を操作するディレクティブの作成</target>
        </trans-unit>
        <trans-unit id="4908e625ec5c3fbe3253cd44e110565c0a03e356" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Wraps Other Elements</source>
          <target state="translated">他の要素をラップするディレクティブを作成する</target>
        </trans-unit>
        <trans-unit id="00480fa3f76205fbcff45fe1d9ab6fe1895c433a" translate="yes" xml:space="preserve">
          <source>Creating aliases for these properties is possible with &lt;a href=&quot;nginit&quot;&gt;&lt;code&gt;ngInit&lt;/code&gt;&lt;/a&gt;. This may be useful when, for instance, nesting ngRepeats.</source>
          <target state="translated">これらのプロパティのエイリアスを作成するには、&lt;a href=&quot;nginit&quot;&gt; &lt;code&gt;ngInit&lt;/code&gt; を使用し&lt;/a&gt;ます。これは、たとえばngRepeatをネストする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="4273e44c3ccf98604f4bbe4a2ea0575d5e6e7b94" translate="yes" xml:space="preserve">
          <source>Creating and configuring a Component</source>
          <target state="translated">コンポーネントの作成と設定</target>
        </trans-unit>
        <trans-unit id="d2c811c7456325eb8da1fc874215e55532d587bd" translate="yes" xml:space="preserve">
          <source>Creating custom actions</source>
          <target state="translated">カスタムアクションの作成</target>
        </trans-unit>
        <trans-unit id="b9844587b0d135a1f842558883719b722f871819" translate="yes" xml:space="preserve">
          <source>Creating custom filters</source>
          <target state="translated">カスタムフィルタの作成</target>
        </trans-unit>
        <trans-unit id="b5746d62259c2e464d484d43c4e1554d32d064d9" translate="yes" xml:space="preserve">
          <source>Creating local properties on widget scope creates two problems:</source>
          <target state="translated">ウィジェットスコープにローカルプロパティを作成すると、2つの問題が発生します。</target>
        </trans-unit>
        <trans-unit id="e2a4b56bb483692f538a3505e58481eb966e8ce9" translate="yes" xml:space="preserve">
          <source>Creation versus Retrieval</source>
          <target state="translated">作成と検索</target>
        </trans-unit>
        <trans-unit id="5af074006d430540128f3bf6a44cb8c6f303320b" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF) Protection</source>
          <target state="translated">クロスサイトリクエストフォージェリ(XSRF)の保護</target>
        </trans-unit>
        <trans-unit id="c8673739ea7c8a0f8b25ce9b61f288f6a98b1451" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF/CSRF)</source>
          <target state="translated">クロスサイトリクエストフォージェリ(XSRF/CSRF</target>
        </trans-unit>
        <trans-unit id="7fef8120d67245c18d2d3c23d1ec55c168fe972d" translate="yes" xml:space="preserve">
          <source>Currency symbol</source>
          <target state="translated">通貨記号</target>
        </trans-unit>
        <trans-unit id="3dd4bbd8be3d3584f64ec9d144ad17acc82acc08" translate="yes" xml:space="preserve">
          <source>Currency symbol or identifier to be displayed.</source>
          <target state="translated">表示される通貨記号または識別子。</target>
        </trans-unit>
        <trans-unit id="8fc66fe26d9d8793cd1000496300cf9f2f548b32" translate="yes" xml:space="preserve">
          <source>Current RegExp if called without value or self for chaining otherwise.</source>
          <target state="translated">値なしで呼び出された場合は現在のRegExp、そうでない場合はチェーン化のためにselfを使用します。</target>
        </trans-unit>
        <trans-unit id="f226ae8b1558106c8adc6746637c3dbe2b31d834" translate="yes" xml:space="preserve">
          <source>Current route information.</source>
          <target state="translated">現在のルート情報。</target>
        </trans-unit>
        <trans-unit id="1c94bf3985b8bccc15be49b6d0743db478a47075" translate="yes" xml:space="preserve">
          <source>Current value when called without a new value or self for chaining otherwise.</source>
          <target state="translated">新しい値なしで呼び出されたときの現在の値、またはそれ以外の場合はチェーン化のためにselfを使用します。</target>
        </trans-unit>
        <trans-unit id="6334d13a652b9fde3f48f69b6ce9c655418ee599" translate="yes" xml:space="preserve">
          <source>Current/previous route information.</source>
          <target state="translated">現在・過去のルート情報。</target>
        </trans-unit>
        <trans-unit id="0c6c0c1904e8345998b07d175a1de44245761ead" translate="yes" xml:space="preserve">
          <source>Currently, ngAria interfaces with the following directives:</source>
          <target state="translated">現在のところ、ngAriaは以下のディレクティブとのインターフェースを持っています。</target>
        </trans-unit>
        <trans-unit id="4edef8165e277d94077897e6b7f0af7494905313" translate="yes" xml:space="preserve">
          <source>Currently, the &lt;strong&gt;Component Router&lt;/strong&gt; module must be installed via &lt;code&gt;npm&lt;/code&gt;/&lt;code&gt;yarn&lt;/code&gt;, it is not available on Bower or the Google CDN.</source>
          <target state="translated">現在、&lt;strong&gt;コンポーネントルーター&lt;/strong&gt;モジュールは &lt;code&gt;npm&lt;/code&gt; / &lt;code&gt;yarn&lt;/code&gt; を介してインストールする必要があり、BowerまたはGoogle CDNでは使用できません。</target>
        </trans-unit>
        <trans-unit id="11e09346e5e227c0f25baf70a4c23438004527d4" translate="yes" xml:space="preserve">
          <source>Currently, the ngMessages module only contains the code for the &lt;code&gt;ngMessages&lt;/code&gt;, &lt;code&gt;ngMessagesInclude&lt;/code&gt;&lt;code&gt;ngMessage&lt;/code&gt;, &lt;code&gt;ngMessageExp&lt;/code&gt; and &lt;code&gt;ngMessageDefault&lt;/code&gt; directives.</source>
          <target state="translated">現在、ngMessagesモジュールには、 &lt;code&gt;ngMessages&lt;/code&gt; 、 &lt;code&gt;ngMessagesInclude&lt;/code&gt; &lt;code&gt;ngMessage&lt;/code&gt; 、 &lt;code&gt;ngMessageExp&lt;/code&gt; 、および &lt;code&gt;ngMessageDefault&lt;/code&gt; ディレクティブのコードのみが含まれています。</target>
        </trans-unit>
        <trans-unit id="74d5d1b5bbf2644cec8eb6da6dea035b822c7813" translate="yes" xml:space="preserve">
          <source>Custom Validation</source>
          <target state="translated">カスタムバリデーション</target>
        </trans-unit>
        <trans-unit id="9b15bde65e9d230027d2d89ae778a8a3108d5df6" translate="yes" xml:space="preserve">
          <source>Custom error message displayed after the user interacted with a control (i.e. when &lt;code&gt;$touched&lt;/code&gt; is set)</source>
          <target state="translated">ユーザーがコントロールを操作した後に表示されるカスタムエラーメッセージ（つまり、 &lt;code&gt;$touched&lt;/code&gt; が設定されている場合）</target>
        </trans-unit>
        <trans-unit id="b78660829b757d40d1cf02c5a67f5153479dc66e" translate="yes" xml:space="preserve">
          <source>Custom error message displayed upon submitting the form (&lt;code&gt;$submitted&lt;/code&gt; is set), even if the user didn't interact with a control</source>
          <target state="translated">ユーザーがコントロールを操作しなかった場合でも、フォームの送信時に表示されるカスタムエラーメッセージ（ &lt;code&gt;$submitted&lt;/code&gt; が設定されています）</target>
        </trans-unit>
        <trans-unit id="d33be98b55db6c87b9f4e29aaa56cfc52eb74725" translate="yes" xml:space="preserve">
          <source>Custom model update triggers</source>
          <target state="translated">カスタムモデルの更新トリガー</target>
        </trans-unit>
        <trans-unit id="7a16736ffe7d57250d06a87b758621a6d4a77ba3" translate="yes" xml:space="preserve">
          <source>DOM control structures for repeating, showing and hiding DOM fragments.</source>
          <target state="translated">DOM フラグメントを繰り返し、表示、非表示にするための DOM 制御構造体。</target>
        </trans-unit>
        <trans-unit id="9a03bb780a978fe1bf04b76b90365ca5e1cd807d" translate="yes" xml:space="preserve">
          <source>DOM element which is the root of AngularJS application.</source>
          <target state="translated">AngularJSアプリケーションのルートとなるDOM要素。</target>
        </trans-unit>
        <trans-unit id="854d235e232e068ef083bf90af82bc89c9fe562d" translate="yes" xml:space="preserve">
          <source>Dart</source>
          <target state="translated">Dart</target>
        </trans-unit>
        <trans-unit id="f20dcbd9b08fb9703f8879bef939587ab26fc293" translate="yes" xml:space="preserve">
          <source>Data Binding</source>
          <target state="translated">データバインディング</target>
        </trans-unit>
        <trans-unit id="7865e224a6bf57800137c76704b7833654f7c47d" translate="yes" xml:space="preserve">
          <source>Data Binding in AngularJS Templates</source>
          <target state="translated">AngularJSテンプレートでのデータバインディング</target>
        </trans-unit>
        <trans-unit id="1ab20277bfa22894e79f0856de3b27a40d577c50" translate="yes" xml:space="preserve">
          <source>Data Binding in Classical Template Systems</source>
          <target state="translated">古典的なテンプレートシステムにおけるデータバインディング</target>
        </trans-unit>
        <trans-unit id="ac99f5c112abda52d4e6d7eedc74c9f89d12480b" translate="yes" xml:space="preserve">
          <source>Data Modeling &lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS-Data-Angular&lt;/a&gt;</source>
          <target state="translated">データモデリング&lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS-Data-Angular&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="translated">データバインディング</target>
        </trans-unit>
        <trans-unit id="156ab9c87cd161d279876149b77acd0b58d8fe2b" translate="yes" xml:space="preserve">
          <source>Data binding, as in &lt;code&gt;{{}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{}}&lt;/code&gt; のようなデータバインディング。</target>
        </trans-unit>
        <trans-unit id="e6ebec9e3c5afe4e96b7b5d0a2b400ca889458eb" translate="yes" xml:space="preserve">
          <source>Data properties used by the &lt;a href=&quot;../function/angular.element#methods.html&quot;&gt;&lt;code&gt;scope()&lt;/code&gt;/&lt;code&gt;isolateScope()&lt;/code&gt; methods&lt;/a&gt; to return the element's scope.</source>
          <target state="translated">要素のスコープを返すために&lt;a href=&quot;../function/angular.element#methods.html&quot;&gt; &lt;code&gt;scope()&lt;/code&gt; / &lt;code&gt;isolateScope()&lt;/code&gt; メソッドで&lt;/a&gt;使用されるデータプロパティ。</target>
        </trans-unit>
        <trans-unit id="f722ccac00c1317dd3e7eb7f3ac23bac8fb4eb14" translate="yes" xml:space="preserve">
          <source>Data-binding in AngularJS apps is the automatic synchronization of data between the model and view components. The way that AngularJS implements data-binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. When the model changes, the view reflects the change, and vice versa.</source>
          <target state="translated">AngularJSアプリのデータバインディングとは、モデルとビューコンポーネントの間でデータを自動的に同期させることです。AngularJSがデータバインディングを実装する方法では、モデルをアプリケーションの唯一の真実のソースとして扱うことができます。ビューは常にモデルの投影です。モデルが変更されると、ビューはその変更を反映し、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="77a57d575cbd23f1439b67b6fdff07165e77bcc2" translate="yes" xml:space="preserve">
          <source>Date to format either as Date object, milliseconds (string or number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is specified in the string input, the time is considered to be in the local timezone.</source>
          <target state="translated">Date オブジェクト、ミリ秒(文字列または数値)、または様々な ISO 8601 datetime 文字列フォーマット(例:yyyyy-MM-ddTHH:mm:ss.sssZ、およびyyy-MM-ddTHH:mmZ、yyy-MM-dd、yyyMMddTHHmmssZ などの短縮版)のいずれかでフォーマットする Date。文字列入力にタイムゾーンが指定されていない場合、時刻はローカルタイムゾーンにあるとみなされます。</target>
        </trans-unit>
        <trans-unit id="1ebe58a75d08e8dfda58bd2413fc709aa1379c08" translate="yes" xml:space="preserve">
          <source>Debouncing updates</source>
          <target state="translated">デバウンスのアップデート</target>
        </trans-unit>
        <trans-unit id="a2e23b650a15e5c693ca1445133d5ee60d9d20b4" translate="yes" xml:space="preserve">
          <source>Decorators</source>
          <target state="translated">Decorators</target>
        </trans-unit>
        <trans-unit id="5e42ebfd421aa36ad532cb84814016fb095d849b" translate="yes" xml:space="preserve">
          <source>Decorators are a design pattern that is used to separate modification or &lt;em&gt;decoration&lt;/em&gt; of a class without modifying the original source code. In AngularJS, decorators are functions that allow a service, directive or filter to be modified prior to its usage.</source>
          <target state="translated">デコレータは、元のソースコードを変更せずにクラスの変更または&lt;em&gt;装飾&lt;/em&gt;を分離するために使用されるデザインパターンです。AngularJSでは、デコレーターは、サービス、ディレクティブ、またはフィルターを使用前に変更できるようにする関数です。</target>
        </trans-unit>
        <trans-unit id="a7868dadf07f1c7850edc7089cb77140b698014a" translate="yes" xml:space="preserve">
          <source>Decorators have different rules for different services. This is because services are registered in different ways. Services are selected by name, however filters and directives are selected by appending &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; or &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; to the end of the name. The &lt;code&gt;$delegate&lt;/code&gt; provided is dictated by the type of service.</source>
          <target state="translated">デコレータには、サービスごとに異なるルールがあります。これは、サービスがさまざまな方法で登録されているためです。サービスは名前で選択されますが、フィルターとディレクティブは名前の最後に &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; または &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; を追加することで選択されます。 &lt;code&gt;$delegate&lt;/code&gt; 提供は、サービスの種類によって決定されます。</target>
        </trans-unit>
        <trans-unit id="09211fe2da464fdb5a53e646de8838c5aaa9ef4f" translate="yes" xml:space="preserve">
          <source>Deeply extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">深く先オブジェクト延び &lt;code&gt;dst&lt;/code&gt; から自分の列挙プロパティをコピーすることによって、 &lt;code&gt;src&lt;/code&gt; にオブジェクト（複数可） &lt;code&gt;dst&lt;/code&gt; 。複数の &lt;code&gt;src&lt;/code&gt; オブジェクトを指定できます。元のオブジェクトを保持したい場合は、空のオブジェクトをターゲットとして渡すことにより、オブジェクトを保持できます： &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48d349eb48cca72baf0fba3472796293caf10dff" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">次のルールに従ってオブジェクトを文字列に変換するデフォルトの&lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; paramsシリアライザ：</target>
        </trans-unit>
        <trans-unit id="e18582a087571d146a0e46c24129165fcade2bbe" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">次のルールに従ってオブジェクトを文字列に変換するデフォルトの&lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; paramsシリアライザ：</target>
        </trans-unit>
        <trans-unit id="272d05ca374dc5c4d632482aeb433788c4ec30ec" translate="yes" xml:space="preserve">
          <source>Default Transformations</source>
          <target state="translated">デフォルトの変換</target>
        </trans-unit>
        <trans-unit id="e5f063eb61d4592c613ead4c13dd985673caf4ef" translate="yes" xml:space="preserve">
          <source>Default events, extra triggers, and catch-all debounce values</source>
          <target state="translated">デフォルトイベント、追加トリガー、キャッチオールデバウンス値</target>
        </trans-unit>
        <trans-unit id="31d4d566cb937a1de4b2420380b5397c1828e7ea" translate="yes" xml:space="preserve">
          <source>Default implementation of $animate that doesn't perform any animations, instead just synchronously performs DOM updates and resolves the returned runner promise.</source>
          <target state="translated">animate のデフォルトの実装では、アニメーションを実行せず、ただ同期的に DOM の更新を行い、返されたランナープラムを解決します。</target>
        </trans-unit>
        <trans-unit id="2c5bb4ffb680656f0530a451ee96703523ca759b" translate="yes" xml:space="preserve">
          <source>Default values for &lt;code&gt;url&lt;/code&gt; parameters. These can be overridden in &lt;code&gt;actions&lt;/code&gt; methods. If a parameter value is a function, it will be called every time a param value needs to be obtained for a request (unless the param was overridden). The function will be passed the current data value as an argument.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; パラメータのデフォルト値。これらは &lt;code&gt;actions&lt;/code&gt; メソッドでオーバーライドできます。パラメータ値が関数の場合、（paramがオーバーライドされない限り）リクエストに対してparam値を取得する必要があるたびに呼び出されます。関数には、現在のデータ値が引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="317bbd656753a9dd8ea52dce97e89a2822b25653" translate="yes" xml:space="preserve">
          <source>Default:</source>
          <target state="translated">Default:</target>
        </trans-unit>
        <trans-unit id="1edc1c012a2ea4113df21912c28c7ea3c9ec3a61" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'!'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'!'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f38409cbc5f1ef34d4d1682cfb27697f30ae623" translate="yes" xml:space="preserve">
          <source>Default: true. When used without argument, it returns the current value.</source>
          <target state="translated">デフォルト:true。引数なしで使用された場合、現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="f8652ebd1a1875dc842cac2cb6d36ca46a049174" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="797eed95d0237127f8eda8c263a529ceb7fafcb9" translate="yes" xml:space="preserve">
          <source>Defaults to false. If no value is specified, returns the current configured value.</source>
          <target state="translated">既定値は false です。値を指定しない場合は、現在の設定値を返します。</target>
        </trans-unit>
        <trans-unit id="fcabacc99098c666fe2451c159c66618bff14d10" translate="yes" xml:space="preserve">
          <source>Deferred Bootstrap</source>
          <target state="translated">繰延ブートストラップ</target>
        </trans-unit>
        <trans-unit id="74c52f18a0d6437fe8a1f390cd629d4d1f6fb607" translate="yes" xml:space="preserve">
          <source>Define an animation on the affected elements.</source>
          <target state="translated">影響を受ける要素にアニメーションを定義します。</target>
        </trans-unit>
        <trans-unit id="0d1872060c4b7a4227a5bb96f09173f2a080f3cf" translate="yes" xml:space="preserve">
          <source>Defines an animation hook that can be later used with &lt;a href=&quot;../service/%24animate&quot;&gt;$animate&lt;/a&gt; service and directives that use this service.</source>
          <target state="translated">&lt;a href=&quot;../service/%24animate&quot;&gt;$ animate&lt;/a&gt;サービスおよびこのサービスを使用するディレクティブで後で使用できるアニメーションフックを定義します。</target>
        </trans-unit>
        <trans-unit id="6cbc7c52232bf21d30296e7e147625b5fda618ff" translate="yes" xml:space="preserve">
          <source>Defines the security context for DOM properties bound by ng-prop-*.</source>
          <target state="translated">ng-prop-*によってバインドされる DOM プロパティのセキュリティコンテキストを定義します。</target>
        </trans-unit>
        <trans-unit id="32989cdf0067cee754e3070b85d64e05afb480b3" translate="yes" xml:space="preserve">
          <source>Delay in milliseconds.</source>
          <target state="translated">ミリ秒単位の遅延。</target>
        </trans-unit>
        <trans-unit id="3302581e2ec4f0f6eeb35f27969f476b33fc5b38" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt;&lt;/a&gt;. As such, takes any input, and either returns a value that's safe to use in the specified context, or throws an exception. This function is aware of trusted values created by the &lt;code&gt;trustAs&lt;/code&gt; function and its shorthands, and when contexts are appropriate, returns the unwrapped value as-is. Finally, this function can also throw when there is no way to turn &lt;code&gt;maybeTrusted&lt;/code&gt; in a safe value (e.g., no sanitization is available or possible.)</source>
          <target state="translated">&lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt; &lt;/a&gt;へのデリゲート。そのため、任意の入力を受け取り、指定されたコンテキストで安全に使用できる値を返すか、例外をスローします。この関数は、 &lt;code&gt;trustAs&lt;/code&gt; 関数とその省略形によって作成された信頼できる値を認識し、コンテキストが適切な場合は、ラップされていない値をそのまま返します。最後に、この関数は、 &lt;code&gt;maybeTrusted&lt;/code&gt; を安全な値に変更する方法がない場合にもスローできます（たとえば、サニタイズが利用できないか、可能ではありません）。</target>
        </trans-unit>
        <trans-unit id="f25baa776bc468f235f2d35f9972a7ad7ed42aa2" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;. As such, returns a wrapped object that represents your value, and the trust you have in its safety for the given context. AngularJS can then use that value as-is in bindings of the specified secure context. This is used in bindings for &lt;code&gt;ng-bind-html&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt;, and most &lt;code&gt;src&lt;/code&gt; attribute interpolations. See &lt;a href=&quot;%24sce&quot;&gt;$sce&lt;/a&gt; for strict contextual escaping.</source>
          <target state="translated">&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;へのデリゲート。そのため、値を表すラップされたオブジェクトと、指定されたコンテキストに対するその安全性に対する信頼を返します。AngularJSは、指定された安全なコンテキストのバインディングでその値をそのまま使用できます。これは、 &lt;code&gt;ng-bind-html&lt;/code&gt; 、 &lt;code&gt;ng-include&lt;/code&gt; 、およびほとんどの &lt;code&gt;src&lt;/code&gt; 属性補間のバインディングで使用されます。厳密なコンテキストエスケープについては、&lt;a href=&quot;%24sce&quot;&gt;$ sce&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="37499fbdb55b6f4f8b4ca5691cd7ea820e28edff" translate="yes" xml:space="preserve">
          <source>Demonstration of nesting</source>
          <target state="translated">ネスティングのデモンストレーション</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="6e0ef472d186db187fa4eb4f242e7f5f04004e20" translate="yes" xml:space="preserve">
          <source>Dependencies and Order of execution</source>
          <target state="translated">依存関係と実行順序</target>
        </trans-unit>
        <trans-unit id="83a3432efddfe802976a8d09a38d176492fb9172" translate="yes" xml:space="preserve">
          <source>Dependency Annotation</source>
          <target state="translated">依存関係のアノテーション</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依存性注入</target>
        </trans-unit>
        <trans-unit id="bac2d51482e3737a082e50bda9cc403b422810db" translate="yes" xml:space="preserve">
          <source>Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.</source>
          <target state="translated">依存性インジェクション(DI)は、コンポーネントがその依存性をどのように把握するかを扱うソフトウェア設計パターンです。</target>
        </trans-unit>
        <trans-unit id="6a2482ebf1a4a0d728e1de1670f37f634d9570f4" translate="yes" xml:space="preserve">
          <source>Dependency Injection in AngularJS</source>
          <target state="translated">AngularJSでの依存性インジェクション</target>
        </trans-unit>
        <trans-unit id="4047c105d9cf170d730f33a2033d59df30b22746" translate="yes" xml:space="preserve">
          <source>Dependency Injection is pervasive throughout AngularJS. You can use it when defining components or when providing &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; blocks for a module.</source>
          <target state="translated">依存性注入は、AngularJS全体に行き渡っています。コンポーネントを定義するとき、または提供するときは、それを使用することができ &lt;code&gt;run&lt;/code&gt; し、 &lt;code&gt;config&lt;/code&gt; モジュールのブロックを。</target>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="8201f6ff0e5004a4bfccdbd8144af27f2013f8eb" translate="yes" xml:space="preserve">
          <source>Deregister a control from the form.</source>
          <target state="translated">フォームからコントロールの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="2af89a89cef15b822c0d0acc729909c302781d81" translate="yes" xml:space="preserve">
          <source>Deregisters an event listener based on the event which has been associated with the provided element. This method can be used in three different ways depending on the arguments:</source>
          <target state="translated">指定された要素に関連付けられたイベントに基づいてイベントリスナーの登録を解除します。このメソッドは、引数に応じて3つの異なる方法で使用することができます。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="e3f132e020453df1a9acbebf0586c70543cd8c33" translate="yes" xml:space="preserve">
          <source>Deserialized JSON string.</source>
          <target state="translated">デシリアライズされたJSON文字列。</target>
        </trans-unit>
        <trans-unit id="4cd052d554151d1dc02fd9731f9a485e9108a179" translate="yes" xml:space="preserve">
          <source>Deserialized cookie value.</source>
          <target state="translated">デシリアライズされたクッキーの値。</target>
        </trans-unit>
        <trans-unit id="1a80bbcd8ea1a814fe2e5d77c9178e1038921990" translate="yes" xml:space="preserve">
          <source>Deserializes a JSON string.</source>
          <target state="translated">JSON 文字列をデシリアライズします。</target>
        </trans-unit>
        <trans-unit id="c27667616e652be84cc2c1b6b99515c219d63d79" translate="yes" xml:space="preserve">
          <source>Design Principles of AngularJS (video)</source>
          <target state="translated">AngularJSの設計原理(動画</target>
        </trans-unit>
        <trans-unit id="dfc06cd40e8bbe5fdfe5911a99ffee939388a01e" translate="yes" xml:space="preserve">
          <source>Destination into which the source is copied. If provided, must be of the same type as &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">ソースのコピー先の宛先。指定する場合は、 &lt;code&gt;source&lt;/code&gt; と同じタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="888c51c1c5c27c5b36b8738901ae380a900d1853" translate="yes" xml:space="preserve">
          <source>Destination object.</source>
          <target state="translated">宛先オブジェクト。</target>
        </trans-unit>
        <trans-unit id="a1e2c0b92bdd88f0fcb0c37a3c357ef7f0dfaccb" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object entirely, removing it from the &lt;a href=&quot;../service/%24cachefactory&quot;&gt;$cacheFactory&lt;/a&gt; set.</source>
          <target state="translated">&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトを完全に破棄し、&lt;a href=&quot;../service/%24cachefactory&quot;&gt;$ cacheFactory&lt;/a&gt;セットから削除します。</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="3d2a0d7f87ba443d5d9d80e16047385ccffb8fd6" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;Function&lt;/code&gt; かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="4113c903a447369d1069839fa1070f046a4c3170" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;Number&lt;/code&gt; かどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="e163b7686cbd75d6ac0afa43f59a2a1afdecef9a" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;String&lt;/code&gt; かどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="1cf350f5a8069497935175567e278f51b713aa42" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a DOM element (or wrapped jQuery element).</source>
          <target state="translated">参照が DOM 要素 (またはラップされた jQuery 要素)であるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="d525fdf8b5a9d0d2c0f715b9068dd493ccd6f25b" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;Array&lt;/code&gt; かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="b2be2458af6292b2bcac1469ec435b958dd083b5" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Object&lt;/code&gt;. Unlike &lt;code&gt;typeof&lt;/code&gt; in JavaScript, &lt;code&gt;null&lt;/code&gt;s are not considered to be objects. Note that JavaScript arrays are objects.</source>
          <target state="translated">参照が &lt;code&gt;Object&lt;/code&gt; かどうかを判別します。JavaScriptの &lt;code&gt;typeof&lt;/code&gt; とは異なり、 &lt;code&gt;null&lt;/code&gt; はオブジェクトとは見なされません。JavaScript配列はオブジェクトであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f1973ee38e2820392df6987b25ac623a3df111fa" translate="yes" xml:space="preserve">
          <source>Determines if a reference is defined.</source>
          <target state="translated">参照が定義されているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="5acbddde98e2e5498cdcbbd393b69655ebfab3fd" translate="yes" xml:space="preserve">
          <source>Determines if a reference is undefined.</source>
          <target state="translated">参照が未定義かどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="f3d374285cfc5534564499c4ffd11134b73c0553" translate="yes" xml:space="preserve">
          <source>Determines if a value is a date.</source>
          <target state="translated">値が日付であるかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="03fe2f186b89e2d26eec4a0369aec723c0e6b2e2" translate="yes" xml:space="preserve">
          <source>Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and objects.</source>
          <target state="translated">2つのオブジェクトまたは2つの値が等価かどうかを判定します。値の型、正規表現、配列、オブジェクトをサポートします。</target>
        </trans-unit>
        <trans-unit id="9e4bd027f55486bc01eb5c3e7f889479826c89f5" translate="yes" xml:space="preserve">
          <source>Develop</source>
          <target state="translated">Develop</target>
        </trans-unit>
        <trans-unit id="45e199c34f2e47d26bd6cf3b0bc418229f9353d7" translate="yes" xml:space="preserve">
          <source>Developer Guide</source>
          <target state="translated">開発者ガイド</target>
        </trans-unit>
        <trans-unit id="8b51dbd8f299bc7c073294b641b3f766d5ad2466" translate="yes" xml:space="preserve">
          <source>Didn't find what you're looking for here? Check out the &lt;a href=&quot;guide/external-resources&quot;&gt;External AngularJS resources guide&lt;/a&gt;.</source>
          <target state="translated">ここで探しているものが見つかりませんでしたか？チェックアウト&lt;a href=&quot;guide/external-resources&quot;&gt;外部AngularJSのリソースガイドを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2886baaf05b749277028afeb9b687e96ffae3fa3" translate="yes" xml:space="preserve">
          <source>Differences between Kris Kowal's Q and $q</source>
          <target state="translated">クリス・コワルのQと$qの違い</target>
        </trans-unit>
        <trans-unit id="0a4e32e999a601265a21ab8df0f84e0f0c01e628" translate="yes" xml:space="preserve">
          <source>Differences from the ICU MessageFormat syntax</source>
          <target state="translated">ICU MessageFormat構文との違い</target>
        </trans-unit>
        <trans-unit id="82ee6eee6c53c6516212864425aaba8fdf0037c2" translate="yes" xml:space="preserve">
          <source>Different DOM between &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;templateUrl&lt;/code&gt;: &lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;#10612&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; と &lt;code&gt;templateUrl&lt;/code&gt; の DOMが異なる：&lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;＃10612&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="164e0b79063f11a2936cf830fb48b8c7054cc118" translate="yes" xml:space="preserve">
          <source>Directive</source>
          <target state="translated">Directive</target>
        </trans-unit>
        <trans-unit id="fda754562558210f994489b54b2697a96dc73fa2" translate="yes" xml:space="preserve">
          <source>Directive Definition Object</source>
          <target state="translated">ディレクティブ定義オブジェクト</target>
        </trans-unit>
        <trans-unit id="e9cd5ca17a7c95f80bd097f0322c1ccdcc4c3d5b" translate="yes" xml:space="preserve">
          <source>Directive Info</source>
          <target state="translated">指令情報</target>
        </trans-unit>
        <trans-unit id="67e1beffb6df3ce747606244ee286332d2ea20a6" translate="yes" xml:space="preserve">
          <source>Directive Support</source>
          <target state="translated">ディレクティブサポート</target>
        </trans-unit>
        <trans-unit id="1f833a7af0a6aaa31ef34696128cfbeafe3eed41" translate="yes" xml:space="preserve">
          <source>Directive components in ng</source>
          <target state="translated">ngにおける指令成分</target>
        </trans-unit>
        <trans-unit id="4cc0bdd0eee78ccef5ca412ee771d3f81c05f4a4" translate="yes" xml:space="preserve">
          <source>Directive components in ngAnimate</source>
          <target state="translated">ngAnimate のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="844df4f4bdaa7d4d1ccd12b056cbe1adfcc021cb" translate="yes" xml:space="preserve">
          <source>Directive components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="de98d7620ad6306ead111be196ed86e3671c7290" translate="yes" xml:space="preserve">
          <source>Directive components in ngMessages</source>
          <target state="translated">ngMessages のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="3e59659ae9dccbcaae81c53c6bc245083968f924" translate="yes" xml:space="preserve">
          <source>Directive components in ngRoute</source>
          <target state="translated">ngRoute のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="91447be933b3e2599ebeeeffc119c8212eeed0af" translate="yes" xml:space="preserve">
          <source>Directive components in ngTouch</source>
          <target state="translated">ngTouch のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="d6115f4adc06b0e052bc4ff5724424c7b78aeddd" translate="yes" xml:space="preserve">
          <source>Directive controllers can provide the following methods that are called by AngularJS at points in the life-cycle of the directive:</source>
          <target state="translated">ディレクティブコントローラは、ディレクティブのライフサイクルの中でAngularJSによって呼び出される以下のメソッドを提供することができます。</target>
        </trans-unit>
        <trans-unit id="302daa750770cb865e5e869c5d3fb8ea941e26e5" translate="yes" xml:space="preserve">
          <source>Directive name, or an object map of directives where the keys are the names and the values are the factories.</source>
          <target state="translated">ディレクティブ名、または、キーが名前、値がファクトリであるディレクティブのオブジェクトマップ。</target>
        </trans-unit>
        <trans-unit id="7490be6dee2947f333e03a7200032b150a8f8592" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;をインスタンス化するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="d24b0ceb64605261d7559cd1d1e867e4d882600f" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;をインスタンス化するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="8735ba9d320dcda668a0816d217511ecea07ecf0" translate="yes" xml:space="preserve">
          <source>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</source>
          <target state="translated">トランスクルージョンを使用する最も近い親ディレクティブのトランスクルージョンされたDOMの挿入点をマークするディレクティブ。</target>
        </trans-unit>
        <trans-unit id="746cc62cda06834c2b42e5ffe56a1badbb306cd7" translate="yes" xml:space="preserve">
          <source>Directive types</source>
          <target state="translated">ディレクティブの種類</target>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="336c7042caff79e8e52e079db85c30958078de48" translate="yes" xml:space="preserve">
          <source>Directives are not deduplicated before compilation</source>
          <target state="translated">コンパイル前にディレクティブが重複排除されない</target>
        </trans-unit>
        <trans-unit id="0050d5ca31968a90a87b0b2b5fe12a4a6f033632" translate="yes" xml:space="preserve">
          <source>Directives are not re-compiled</source>
          <target state="translated">ディレクティブは再コンパイルされません</target>
        </trans-unit>
        <trans-unit id="8d67d16379fb0c5fb472d4b6392bed6f0a88bbfa" translate="yes" xml:space="preserve">
          <source>Directives can require the controllers of other directives to enable communication between each other. This can be achieved in a component by providing an object mapping for the &lt;code&gt;require&lt;/code&gt; property. The object keys specify the property names under which the required controllers (object values) will be bound to the requiring component's controller.</source>
          <target state="translated">ディレクティブは、相互間の通信を可能にするために他のディレクティブのコントローラーを必要とする場合があります。これは、 &lt;code&gt;require&lt;/code&gt; プロパティにオブジェクトマッピングを提供することにより、コンポーネントで実現できます。オブジェクトキーは、必要なコントローラー（オブジェクト値）が必要なコンポーネントのコントローラーにバインドされるプロパティ名を指定します。</target>
        </trans-unit>
        <trans-unit id="b5ec19ceda57dbf701f9e59456ca25e9c7b1a674" translate="yes" xml:space="preserve">
          <source>Directives in AngularJS are responsible for encapsulating complex functionality within custom HTML tags, attributes, classes or comments. Unit tests are very important for directives because the components you create with directives may be used throughout your application and in many different contexts.</source>
          <target state="translated">AngularJSのディレクティブは複雑な機能をカスタムHTMLタグ、属性、クラス、コメントの中にカプセル化する役割があります。ディレクティブで作成したコンポーネントはアプリケーション全体や様々なコンテキストで使用される可能性があるため、ユニットテストはディレクティブにとって非常に重要です。</target>
        </trans-unit>
        <trans-unit id="bdc211594d3e011463f460b1b6ff16a3553721bd" translate="yes" xml:space="preserve">
          <source>Directives like &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt;&lt;code&gt;ngFocus&lt;/code&gt;&lt;/a&gt; expose a &lt;code&gt;$event&lt;/code&gt; object within the scope of that expression. The object is an instance of a &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery Event Object&lt;/a&gt; when jQuery is present or a similar jqLite object.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt; &lt;code&gt;ngFocus&lt;/code&gt; &lt;/a&gt;などのディレクティブは、その式のスコープ内で &lt;code&gt;$event&lt;/code&gt; オブジェクトを公開します。このオブジェクトは、jQueryが存在する場合のjQuery &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;イベントオブジェクト&lt;/a&gt;または同様のjqLit​​eオブジェクトのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="c1a4a2c2973a0873e68e2f49c1573b963ac2f7f6" translate="yes" xml:space="preserve">
          <source>Directives like &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt;&lt;code&gt;ngFocus&lt;/code&gt;&lt;/a&gt; expose a &lt;code&gt;$event&lt;/code&gt; object within the scope of that expression. The object is an instance of a &lt;a href=&quot;https://api.jquery.com/category/events/event-object/&quot;&gt;jQuery Event Object&lt;/a&gt; when jQuery is present or a similar jqLite object.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt; &lt;code&gt;ngFocus&lt;/code&gt; &lt;/a&gt;などのディレクティブは、その式のスコープ内で &lt;code&gt;$event&lt;/code&gt; オブジェクトを公開します。オブジェクトは、jQueryが存在する場合のjQuery&lt;a href=&quot;https://api.jquery.com/category/events/event-object/&quot;&gt;イベントオブジェクト&lt;/a&gt;または同様のjqLit​​eオブジェクトのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="6434913d2a02f2df51c8dfef0163eab8e24c7df1" translate="yes" xml:space="preserve">
          <source>Directives often have a &lt;strong&gt;link function&lt;/strong&gt;. A link function allows the directive to register listeners to the specific cloned DOM element instance as well as to copy content into the DOM from the scope.</source>
          <target state="translated">多くの場合、ディレクティブには&lt;strong&gt;リンク機能があります&lt;/strong&gt;。リンク関数を使用すると、特定の複製されたDOM要素インスタンスにリスナーを登録したり、スコープからDOMにコンテンツをコピーしたりできます。</target>
        </trans-unit>
        <trans-unit id="033d63aa44ddfb57d03dea3272e0203cf62b3238" translate="yes" xml:space="preserve">
          <source>Directives that Create Scopes</source>
          <target state="translated">スコープを作成するディレクティブ</target>
        </trans-unit>
        <trans-unit id="a74321a33161090e50af4b36d898258f47549ad8" translate="yes" xml:space="preserve">
          <source>Directives that use transclusion are treated specially by the compiler. Before their compile function is called, the contents of the directive's element are removed from the element and provided via a transclusion function. The directive's template is then appended to the directive's element, to which it can then insert the transcluded content into its template.</source>
          <target state="translated">トランスクルージョンを使用するディレクティブはコンパイラによって特別に扱われます。コンパイル関数が呼ばれる前に、ディレクティブの要素の内容が要素から取り除かれて、 トランスクルージョン関数によって提供されます。その後、ディレクティブのテンプレートがディレクティブの要素に追加され、そのテンプレートにトランスクルージョンされた内容を挿入することができます。</target>
        </trans-unit>
        <trans-unit id="4bdab4ccc71e22e8ec90abeea9ccfd1df46ff179" translate="yes" xml:space="preserve">
          <source>Directives that want to modify the DOM typically use the &lt;code&gt;link&lt;/code&gt; option to register DOM listeners as well as update the DOM. It is executed after the template has been cloned and is where directive logic will be put.</source>
          <target state="translated">DOMを変更するディレクティブは、通常、 &lt;code&gt;link&lt;/code&gt; オプションを使用してDOMリスナーを登録し、DOMを更新します。テンプレートが複製された後に実行され、ディレクティブロジックが配置されます。</target>
        </trans-unit>
        <trans-unit id="e5140a8ef3a9bc2683f73052c7fd79865733a8ce" translate="yes" xml:space="preserve">
          <source>Dirty checking can be done with three strategies: By reference, by collection contents, and by value. The strategies differ in the kinds of changes they detect, and in their performance characteristics.</source>
          <target state="translated">ダーティチェックは3つの戦略で行うことができます。参照によるもの、コレクションの内容によるもの、および値によるものです。これらのストラテジーは、検出する変更の種類とパフォーマンスの特徴が異なります。</target>
        </trans-unit>
        <trans-unit id="f7eed9ee6c74c9630f8e771d832431d6115feaf3" translate="yes" xml:space="preserve">
          <source>Dirty checking the scope for property changes is a common operation in AngularJS and for this reason the dirty checking function must be efficient. Care should be taken that the dirty checking function does not do any DOM access, as DOM access is orders of magnitude slower than property access on JavaScript object.</source>
          <target state="translated">プロパティ変更のスコープをダーティチェックすることはAngularJSでは一般的な操作であり、そのためダーティチェック関数は効率的でなければなりません。ダーティチェック関数はDOMアクセスを行わないように注意しなければなりません。DOMアクセスはJavaScriptオブジェクトのプロパティアクセスよりも桁違いに遅いからです。</target>
        </trans-unit>
        <trans-unit id="14f2ccf9e7d630a13a9a51eb1a154be01aba9e61" translate="yes" xml:space="preserve">
          <source>Disable comment and css class directives</source>
          <target state="translated">コメントと css クラスのディレクティブを無効にする</target>
        </trans-unit>
        <trans-unit id="17f67c438b25665408ced77a0f973ff152910ec2" translate="yes" xml:space="preserve">
          <source>Disabling Debug Data</source>
          <target state="translated">デバッグデータの無効化</target>
        </trans-unit>
        <trans-unit id="4c52842f01d8ff2a00e9728305157459d5a938ec" translate="yes" xml:space="preserve">
          <source>Disabling Specific Attributes</source>
          <target state="translated">特定の属性を無効にする</target>
        </trans-unit>
        <trans-unit id="de84716cee60c5cb4c6d2f6f25d3ac55ddcd7e00" translate="yes" xml:space="preserve">
          <source>Disabling attributes</source>
          <target state="translated">属性を無効にする</target>
        </trans-unit>
        <trans-unit id="20ef6ef888eb023c4461090d2f38a7acea56c9fa" translate="yes" xml:space="preserve">
          <source>Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting (XSS) vulnerability in your application.</source>
          <target state="translated">自動エスケープを無効にすることは非常に危険であり、通常、アプリケーションにクロスサイトスクリプティング(XSS)の脆弱性が発生します。</target>
        </trans-unit>
        <trans-unit id="1f51a2a3fb5aa9f0b2bf05d11e6cc36721611e66" translate="yes" xml:space="preserve">
          <source>Disabling ngAria on Specific Elements</source>
          <target state="translated">特定の要素でngAriaを無効にする</target>
        </trans-unit>
        <trans-unit id="e408de586a7e2622fd333d5e79f8788540adc05a" translate="yes" xml:space="preserve">
          <source>Disallow argument name annotation inference.</source>
          <target state="translated">引数名のアノテーション推論を許可しない。</target>
        </trans-unit>
        <trans-unit id="85016ac7fabd0f269f3323d663fd847b3d8b64a4" translate="yes" xml:space="preserve">
          <source>Discuss</source>
          <target state="translated">Discuss</target>
        </trans-unit>
        <trans-unit id="22d9c848e577ae1fec59456eee03bc9ea644ba34" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; downwards to all child scopes (and their children) notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">イベント &lt;code&gt;name&lt;/code&gt; をすべての子スコープ（およびその子）に&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;、登録されている$ rootScope.Scopeリスナーに通知します。</target>
        </trans-unit>
        <trans-unit id="522ab92da5006452539dc8ace74860c58110db39" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; upwards through the scope hierarchy notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">登録された&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;リスナーに通知するスコープ階層を介してイベント &lt;code&gt;name&lt;/code&gt; 上方にディスパッチします。</target>
        </trans-unit>
        <trans-unit id="d77fffba57484870bc54fe43094d3c654c48c5c8" translate="yes" xml:space="preserve">
          <source>Displaying a default message</source>
          <target state="translated">デフォルトのメッセージを表示する</target>
        </trans-unit>
        <trans-unit id="6a1d6df1044462482aefb148d802e6a902833016" translate="yes" xml:space="preserve">
          <source>Displaying multiple messages at the same time</source>
          <target state="translated">複数のメッセージを同時に表示する</target>
        </trans-unit>
        <trans-unit id="8fcd11662cedbe647c35df6e222817acbf87bac8" translate="yes" xml:space="preserve">
          <source>Do not bootstrap your app on an element with a directive that uses &lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt;, such as &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">使用するディレクティブを持つ要素の上にアプリをブートストラップしない&lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;トランスクルーを&lt;/a&gt;など、&lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;。これを行うと、アプリの&lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;とアプリの&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;インジェクターが&lt;/a&gt;置き換わり、アニメーションが機能しなくなり、アプリの外部からインジェクターにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="734e169c6f35eeaf3a86656e7f1c0d72ba2de6cc" translate="yes" xml:space="preserve">
          <source>Do not mix client and server templates</source>
          <target state="translated">クライアントテンプレートとサーバーテンプレートを混在させない</target>
        </trans-unit>
        <trans-unit id="19e892e136c9dc029952e0d0040cde8bbcc0893d" translate="yes" xml:space="preserve">
          <source>Do not run user input through &lt;code&gt;$scope.$eval&lt;/code&gt; (or any of the other expression parsing functions listed above)</source>
          <target state="translated">&lt;code&gt;$scope.$eval&lt;/code&gt; （または上記の他の式解析関数）を介してユーザー入力を実行しないでください</target>
        </trans-unit>
        <trans-unit id="a1222a753c501c7c58fabe9476767ef0ea0a4fda" translate="yes" xml:space="preserve">
          <source>Do not use a directive that uses &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt; on the same element as &lt;code&gt;ngApp&lt;/code&gt;. This includes directives such as &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">&lt;code&gt;ngApp&lt;/code&gt; と同じ要素で&lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;トランスクルージョン&lt;/a&gt;を使用するディレクティブを使用しないでください。これは、次のようなディレクティブが含ま&lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; を&lt;/a&gt;。これを行うと、アプリの&lt;a href=&quot;../service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;とアプリの&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;インジェクターが&lt;/a&gt;置き換わり、アニメーションが機能しなくなり、アプリの外部からインジェクターにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="a6b92442e50d6cf9ef2638015c4dcbb08c6765ea" translate="yes" xml:space="preserve">
          <source>Do not use controllers to:</source>
          <target state="translated">コントローラを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="c4e0abe2eab7806b524f5f539063aa767372787f" translate="yes" xml:space="preserve">
          <source>Do not use user input to generate templates dynamically</source>
          <target state="translated">テンプレートを動的に生成するためにユーザー入力を使用しない</target>
        </trans-unit>
        <trans-unit id="cd9568f76d3ffc3f4943b3b399abc721db51ae70" translate="yes" xml:space="preserve">
          <source>Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the lack of CSS animations by using the &lt;code&gt;$animateCss&lt;/code&gt; service to trigger our own tweaked-out, CSS-based animations directly from our own JS-based animation code:</source>
          <target state="translated">これは、CSSアニメーションとJSアニメーションを一緒に使用できないことを意味しますか？JSベースのアニメーションは常に優先度が高くなりますか？ &lt;code&gt;$animateCss&lt;/code&gt; サービスを使用して、CSSベースのアニメーションを独自のJSベースのアニメーションコードから直接トリガーすることで、CSSアニメーションの不足を補うことができます。</target>
        </trans-unit>
        <trans-unit id="13dee9f67e174a94349cf987cddd8a72fc3af4b8" translate="yes" xml:space="preserve">
          <source>Double Compilation</source>
          <target state="translated">ダブルコンパイル</target>
        </trans-unit>
        <trans-unit id="46cf9c3355e52010c4d12ff1852420f2537d0b53" translate="yes" xml:space="preserve">
          <source>Double Compilation, and how to avoid it</source>
          <target state="translated">二重コンパイルとそれを回避する方法</target>
        </trans-unit>
        <trans-unit id="c28ddab1c668724f14783f5d982dad57dfddbb6f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. A common scenario where this happens is a directive that calls &lt;code&gt;$compile&lt;/code&gt; in a directive link function on the directive element. In the following &lt;strong&gt;faulty example&lt;/strong&gt;, a directive adds a mouseover behavior to a button with &lt;code&gt;ngClick&lt;/code&gt; on it:</source>
          <target state="translated">DOMのコンパイル済みの部分が再度コンパイルされると、二重コンパイルが発生します。これは望ましくない影響であり、ディレクティブの誤動作、パフォーマンスの問題、メモリリークにつながる可能性があります。これが発生する一般的なシナリオは、ディレクティブ要素のディレクティブリンク関数で &lt;code&gt;$compile&lt;/code&gt; を呼び出すディレクティブです。次の&lt;strong&gt;誤った例&lt;/strong&gt;では、ディレクティブにより、 &lt;code&gt;ngClick&lt;/code&gt; が設定されたボタンにマウスオーバー動作が追加されます。</target>
        </trans-unit>
        <trans-unit id="2fe3ba6f7aec148d2830c036bfffa7e3396f913f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. Refer to the Compiler Guide &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;section on double compilation&lt;/a&gt; for an in-depth explanation and ways to avoid it.</source>
          <target state="translated">DOMのコンパイル済みの部分が再度コンパイルされると、二重コンパイルが発生します。これは望ましくない影響であり、ディレクティブの誤動作、パフォーマンスの問題、メモリリークにつながる可能性があります。詳細な説明とそれを回避する方法については、&lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;ダブルコンパイルに関する&lt;/a&gt;コンパイラガイドのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b56ef3a0351d8185f34ae1615da191674f9fba40" translate="yes" xml:space="preserve">
          <source>Double compilation should therefore be avoided. In the above example, only the new element should be compiled:</source>
          <target state="translated">したがって、二重コンパイルは避けなければなりません。上記の例では、新しい要素のみをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="a479c9c34e878d07b4d67a73a48f432ad7dc53c8" translate="yes" xml:space="preserve">
          <source>Download</source>
          <target state="translated">Download</target>
        </trans-unit>
        <trans-unit id="6591272ff03229f7f47a34cd608993dac9711a87" translate="yes" xml:space="preserve">
          <source>Due to the differences in change-detection, you may get many more calls to &lt;code&gt;$doCheck&lt;/code&gt; in AngularJS than you would to &lt;code&gt;ngDoCheck&lt;/code&gt; in Angular.</source>
          <target state="translated">変更検出の違いにより、Angularで &lt;code&gt;ngDoCheck&lt;/code&gt; を実行するよりも、AngularJSで &lt;code&gt;$doCheck&lt;/code&gt; を呼び出す方がはるかに多くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="690ee2fd00601f8dae9435fe866cd934f63d5b6f" translate="yes" xml:space="preserve">
          <source>During a property comparison, properties of &lt;code&gt;function&lt;/code&gt; type and properties with names that begin with &lt;code&gt;$&lt;/code&gt; are ignored.</source>
          <target state="translated">プロパティの比較中、 &lt;code&gt;function&lt;/code&gt; タイプのプロパティと &lt;code&gt;$&lt;/code&gt; で始まる名前のプロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="d17774f2703ffb3b3466892ed055619a54364b52" translate="yes" xml:space="preserve">
          <source>During application bootstrap, before AngularJS goes off creating all services, it configures and instantiates all providers. We call this the configuration phase of the application life-cycle. During this phase, services aren't accessible because they haven't been created yet.</source>
          <target state="translated">アプリケーションの起動時には、AngularJSがすべてのサービスを作成する前に、すべてのプロバイダを設定してインスタンス化します。これをアプリケーションライフサイクルの設定フェーズと呼んでいます。このフェーズでは、サービスはまだ作成されていないのでアクセスできません。</target>
        </trans-unit>
        <trans-unit id="291ab189948f99ffa87d61aff0be223080b9841a" translate="yes" xml:space="preserve">
          <source>During template linking, directives register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the scope. These watches will be used to propagate model values to the DOM.</source>
          <target state="translated">テンプレートのリンク中に、ディレクティブはスコープに&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;監視&lt;/a&gt;を登録します。これらのウォッチは、モデル値をDOMに伝達するために使用されます。</target>
        </trans-unit>
        <trans-unit id="45531da9cbed4e6e4ee65fe4cf35c23297ce9dea" translate="yes" xml:space="preserve">
          <source>During testing this implementation is swapped with &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;mock $httpBackend&lt;/a&gt; which can be trained with responses.</source>
          <target state="translated">テスト中、この実装は&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;モック$ httpBackend&lt;/a&gt;と交換され、応答でトレーニングできます。</target>
        </trans-unit>
        <trans-unit id="84cba5a8d27805fd2532e7744606781e2d24ef87" translate="yes" xml:space="preserve">
          <source>During the compilation phase, the &lt;a href=&quot;compiler&quot;&gt;compiler&lt;/a&gt; matches &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; against the DOM template. The directives usually fall into one of two categories:</source>
          <target state="translated">コンパイル・フェーズで、&lt;a href=&quot;compiler&quot;&gt;コンパイラが&lt;/a&gt;一致する&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt; DOMテンプレートに対しては。ディレクティブは通常、次の2つのカテゴリのいずれかに分類されます。</target>
        </trans-unit>
        <trans-unit id="552c6c3ebea05d341417ee364fae8ea2af019067" translate="yes" xml:space="preserve">
          <source>During the compilation phase:</source>
          <target state="translated">コンパイルの段階で。</target>
        </trans-unit>
        <trans-unit id="a493125bd9c880c4ca97eb29a7017d3a9e3e64ce" translate="yes" xml:space="preserve">
          <source>During the compilation process the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;compiler&lt;/a&gt; uses the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$interpolate&lt;/a&gt; service to see if text nodes and element attributes contain interpolation markup with embedded expressions.</source>
          <target state="translated">コンパイルプロセス中に、&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;コンパイラー&lt;/a&gt;は&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$ interpolate&lt;/a&gt;サービスを使用して、テキストノードと要素の属性に式が埋め込まれた補間マークアップが含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="6439c34c3206ba861da0f9bf5fc84e0b928b58c7" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$animateProvider.classNameFilter()&lt;/a&gt;</source>
          <target state="translated">構成中：&lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$ animateProvider.classNameFilter（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="60166faf8b960cb144a5a5dfe16f5efce800297f" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$animateProvider.customFilter()&lt;/a&gt;</source>
          <target state="translated">構成中：&lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$ animateProvider.customFilter（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d16957e61a3abc0b2789679717c815f5765897" translate="yes" xml:space="preserve">
          <source>During the runtime phase:</source>
          <target state="translated">ランタイムの段階で。</target>
        </trans-unit>
        <trans-unit id="ac637ea8f1b2151f1dfdc40a4954ea8a48a7d7d3" translate="yes" xml:space="preserve">
          <source>During unit testing, we want our unit tests to run quickly and have no external dependencies so we don&amp;rsquo;t want to send &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests to a real server. All we really need is to verify whether a certain request has been sent or not, or alternatively just let the application make requests, respond with pre-trained responses and assert that the end result is what we expect it to be.</source>
          <target state="translated">ユニットテストでは、ユニットテストをすばやく実行し、外部依存関係がないようにするため、&lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt;または&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;リクエストを実際のサーバーに送信しないようにします。実際に必要なのは、特定のリクエストが送信されたかどうかを確認すること、またはアプリケーションにリクエストを送信させ、事前トレーニング済みのレスポンスで応答させ、最終結果が期待どおりであることを表明することだけです。</target>
        </trans-unit>
        <trans-unit id="4a62884f26d7cd6341ee0128f77937db24ff3ffb" translate="yes" xml:space="preserve">
          <source>During unit testing, we want our unit tests to run quickly and have no external dependencies so we don&amp;rsquo;t want to send &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests to a real server. All we really need is to verify whether a certain request has been sent or not, or alternatively just let the application make requests, respond with pre-trained responses and assert that the end result is what we expect it to be.</source>
          <target state="translated">単体テスト中は、単体テストを迅速に実行し、外部の依存関係を持たないようにする必要があるため、&lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt;または&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;リクエストを実サーバーに送信したくありません。本当に必要なのは、特定のリクエストが送信されたかどうかを確認するか、アプリケーションにリクエストを送信させ、事前にトレーニングされたレスポンスで応答し、最終結果が期待どおりであることを表明することだけです。</target>
        </trans-unit>
        <trans-unit id="871ea4da49e00d79d13d56d3eec2853372598b41" translate="yes" xml:space="preserve">
          <source>Dynamic Messaging</source>
          <target state="translated">ダイナミックメッセージング</target>
        </trans-unit>
        <trans-unit id="bac036281464cca8457fab7f160594b9b956bffb" translate="yes" xml:space="preserve">
          <source>Dynamic responses</source>
          <target state="translated">動的応答</target>
        </trans-unit>
        <trans-unit id="ddfdb597e007e1dc4eda14345e693ee956382336" translate="yes" xml:space="preserve">
          <source>Dynamically changing an interpolated value</source>
          <target state="translated">補間された値を動的に変更する</target>
        </trans-unit>
        <trans-unit id="7ffa068184121937557c12ca97fdaa8b198c8c8e" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; formats the number 12 as a currency using the &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;$12.00&lt;/code&gt;.</source>
          <target state="translated">たとえば、マークアップ &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; は、&lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt;フィルターを使用して、数値12を通貨としてフォーマットします。結果の値は &lt;code&gt;$12.00&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="706f3f2c466550baf6f8cff74045985c0b276d2f" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; formats the number 1234 with 2 decimal points using the &lt;a href=&quot;../api/ng/filter/number&quot;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;1,234.00&lt;/code&gt;.</source>
          <target state="translated">例：マークアップ &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; は、&lt;a href=&quot;../api/ng/filter/number&quot;&gt; &lt;code&gt;number&lt;/code&gt; &lt;/a&gt;フィルターを使用して、数値1234を2つの小数点でフォーマットします。結果の値は &lt;code&gt;1,234.00&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a2a94632ee79f879ff70c670fc140a79667aac46" translate="yes" xml:space="preserve">
          <source>E2E Testing</source>
          <target state="translated">E2Eテスト</target>
        </trans-unit>
        <trans-unit id="46cb077541331f9a16fef73d47f33279ef781780" translate="yes" xml:space="preserve">
          <source>ES6, Webpack, and JSPM Starter Project</source>
          <target state="translated">ES6、Webpack、JSPMスタータープロジェクト</target>
        </trans-unit>
        <trans-unit id="ba63fe9fd9974e102c02ef7d910d4b8dddc1fa17" translate="yes" xml:space="preserve">
          <source>ES6/Typescript Best Practices</source>
          <target state="translated">ES6/Typescript のベストプラクティス</target>
        </trans-unit>
        <trans-unit id="648a21d0cd9f5c2567ffd87e39c8a17cf279fb77" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../directive/form&quot;&gt;form&lt;/a&gt; directive creates an instance of &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">各&lt;a href=&quot;../directive/form&quot;&gt;フォーム&lt;/a&gt;ディレクティブは、 &lt;code&gt;FormController&lt;/code&gt; のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="d1c0d67675138588c0dc00ee3cda517b7f653e50" translate="yes" xml:space="preserve">
          <source>Each AngularJS application has exactly one &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;root scope&lt;/a&gt;, but may have any number of child scopes.</source>
          <target state="translated">各AngularJSアプリケーションには&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;ルートスコープ&lt;/a&gt;が1つだけありますが、子スコープをいくつでも持つことができます。</target>
        </trans-unit>
        <trans-unit id="829715aa8f2829bcf5c7f7ab2b1d5e696bd672e1" translate="yes" xml:space="preserve">
          <source>Each directive's &lt;code&gt;compile&lt;/code&gt; functions are executed. Each &lt;code&gt;compile&lt;/code&gt; function has a chance to modify the DOM. Each &lt;code&gt;compile&lt;/code&gt; function returns a &lt;code&gt;link&lt;/code&gt; function. These functions are composed into a &quot;combined&quot; link function, which invokes each directive's returned &lt;code&gt;link&lt;/code&gt; function.</source>
          <target state="translated">各ディレクティブの &lt;code&gt;compile&lt;/code&gt; 関数が実行されます。各 &lt;code&gt;compile&lt;/code&gt; 関数は、DOMを変更する機会があります。各 &lt;code&gt;compile&lt;/code&gt; 関数は &lt;code&gt;link&lt;/code&gt; 関数を返します。これらの関数は「結合された」リンク関数にまとめられ、各ディレクティブから返された &lt;code&gt;link&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="03ce87fe012858dd28022ce0344110a91c5c56e7" translate="yes" xml:space="preserve">
          <source>Each element in these arrays must be one of the following:</source>
          <target state="translated">これらの配列の各要素は、以下のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="0788a57602c88bc63b92f1ea44577c3c1372677f" translate="yes" xml:space="preserve">
          <source>Each function in the &lt;code&gt;$validators&lt;/code&gt; object receives the &lt;code&gt;modelValue&lt;/code&gt; and the &lt;code&gt;viewValue&lt;/code&gt; as parameters. AngularJS will then call &lt;code&gt;$setValidity&lt;/code&gt; internally with the function's return value (&lt;code&gt;true&lt;/code&gt;: valid, &lt;code&gt;false&lt;/code&gt;: invalid). The validation functions are executed every time an input is changed (&lt;code&gt;$setViewValue&lt;/code&gt; is called) or whenever the bound &lt;code&gt;model&lt;/code&gt; changes. Validation happens after successfully running &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$formatters&lt;/code&gt;, respectively. Failed validators are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt;&lt;code&gt;ngModelController.$error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$validators&lt;/code&gt; オブジェクトの各関数は、 &lt;code&gt;modelValue&lt;/code&gt; および &lt;code&gt;viewValue&lt;/code&gt; をパラメーターとして受け取ります。 AngularJSは、関数の戻り値を使用して内部的に &lt;code&gt;$setValidity&lt;/code&gt; を呼び出します（ &lt;code&gt;true&lt;/code&gt; ：有効、 &lt;code&gt;false&lt;/code&gt; ：無効）。検証関数は、入力が変更されるたび（ &lt;code&gt;$setViewValue&lt;/code&gt; が呼び出されるたび）、またはバインドされた &lt;code&gt;model&lt;/code&gt; が変更されるたびに実行されます。検証は、それぞれ &lt;code&gt;$parsers&lt;/code&gt; および &lt;code&gt;$formatters&lt;/code&gt; 正常に実行した後に行われます。失敗したバリデーターは&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt; &lt;code&gt;ngModelController.$error&lt;/code&gt; &lt;/a&gt;キーによって保存されます。</target>
        </trans-unit>
        <trans-unit id="12306c46ee9f9ac44368ea23daa3a0afc971061b" translate="yes" xml:space="preserve">
          <source>Each function in the &lt;code&gt;$validators&lt;/code&gt; object receives the &lt;code&gt;modelValue&lt;/code&gt; and the &lt;code&gt;viewValue&lt;/code&gt; as parameters. AngularJS will then call &lt;code&gt;$setValidity&lt;/code&gt; internally with the function's return value (&lt;code&gt;true&lt;/code&gt;: valid, &lt;code&gt;false&lt;/code&gt;: invalid). The validation functions are executed every time an input is changed (&lt;code&gt;$setViewValue&lt;/code&gt; is called) or whenever the bound &lt;code&gt;model&lt;/code&gt; changes. Validation happens after successfully running &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$formatters&lt;/code&gt;, respectively. Failed validators are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error.html&quot;&gt;&lt;code&gt;ngModelController.$error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$validators&lt;/code&gt; オブジェクトの各関数は、 &lt;code&gt;modelValue&lt;/code&gt; と &lt;code&gt;viewValue&lt;/code&gt; をパラメーターとして受け取ります。 AngularJSは、関数の戻り値（ &lt;code&gt;true&lt;/code&gt; ：有効、 &lt;code&gt;false&lt;/code&gt; ：無効）を使用して内部的に &lt;code&gt;$setValidity&lt;/code&gt; を呼び出します。検証関数は、入力が変更されるたび（ &lt;code&gt;$setViewValue&lt;/code&gt; が呼び出される）、またはバインドされた &lt;code&gt;model&lt;/code&gt; が変更されるたびに実行されます。検証は、それぞれ &lt;code&gt;$parsers&lt;/code&gt; と &lt;code&gt;$formatters&lt;/code&gt; 正常に実行した後に行われます。失敗したバリデーターは、キーによって&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error.html&quot;&gt; &lt;code&gt;ngModelController.$error&lt;/code&gt; &lt;/a&gt;格納されます。</target>
        </trans-unit>
        <trans-unit id="1a059e84dcbee7d4310b371af5bf3f354749be0d" translate="yes" xml:space="preserve">
          <source>Each item in the &lt;strong&gt;RouteConfig&lt;/strong&gt; for a &lt;strong&gt;Routing Component&lt;/strong&gt; is an instance of this type. It can have the following properties:</source>
          <target state="translated">各項目&lt;strong&gt;RouteConfig&lt;/strong&gt;ための&lt;strong&gt;ルーティングコンポーネントは、&lt;/strong&gt;このタイプのインスタンスです。次のプロパティを持つことができます。</target>
        </trans-unit>
        <trans-unit id="72b188f1d17688bd4f986f5bc1d938df3660b4a5" translate="yes" xml:space="preserve">
          <source>Each key value in the parameter object is first bound to url template if present and then any excess keys are appended to the url search query after the &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">パラメータオブジェクトの各キー値は、存在する場合は最初にURLテンプレートにバインドされ、次に &lt;code&gt;?&lt;/code&gt; の後に余分なキーがURL検索クエリに追加されます。。</target>
        </trans-unit>
        <trans-unit id="c4db4dc45436f4f1a0c0c82c0e2621975a9bac1c" translate="yes" xml:space="preserve">
          <source>Each module can only be loaded once per injector. Usually an AngularJS app has only one injector and modules are only loaded once. Each test has its own injector and modules are loaded multiple times.</source>
          <target state="translated">各モジュールはインジェクタごとに一度しかロードできません。通常、AngularJSアプリはインジェクターが1つしかなく、モジュールは1回しかロードされません。各テストにはそれぞれ独自のインジェクターがあり、モジュールは複数回ロードされます。</target>
        </trans-unit>
        <trans-unit id="b8c6e4ddcbc08750f981caaf013164d265bbf24d" translate="yes" xml:space="preserve">
          <source>Each provide access to a &lt;code&gt;$delegate&lt;/code&gt;, which is the instantiated service/directive/filter, prior to being passed to the service that required it.</source>
          <target state="translated">それぞれが、それを必要とするサービスに渡される前に、インスタンス化されたサービス/ディレクティブ/フィルターである &lt;code&gt;$delegate&lt;/code&gt; へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="dda93b9c00ecb491f2d026174b8fa5dbb60e68ea" translate="yes" xml:space="preserve">
          <source>Each recipe belongs to an &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJS module&lt;/a&gt;. An AngularJS module is a bag that holds one or more recipes. And since manually keeping track of module dependencies is no fun, a module can contain information about dependencies on other modules as well.</source>
          <target state="translated">各レシピは&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJSモジュールに&lt;/a&gt;属しています。AngularJSモジュールは、1つ以上のレシピを保持するバッグです。また、モジュールの依存関係を手動で追跡するのは面白くないので、モジュールには他のモジュールへの依存関係に関する情報も含めることができます。</target>
        </trans-unit>
        <trans-unit id="9f3ae98a5b0c131a547a93b487b4c98012168788" translate="yes" xml:space="preserve">
          <source>Each version of AngularJS 1 up to, but not including 1.6, contained an expression sandbox, which reduced the surface area of the vulnerability but never removed it. &lt;strong&gt;In AngularJS 1.6 we removed this sandbox as developers kept relying upon it as a security feature even though it was always possible to access arbitrary JavaScript code if one could control the AngularJS templates or expressions of applications.&lt;/strong&gt;</source>
          <target state="translated">AngularJS 1の各バージョン（1.6を含まない）には式のサンドボックスが含まれていたため、脆弱性の表面領域は減少しましたが、削除されませんでした。&lt;strong&gt;AngularJS 1.6では、このサンドボックスを削除しました。これは、開発者がAngularJSテンプレートまたはアプリケーションの式を制御できれば、常に任意のJavaScriptコードにアクセスできるにもかかわらず、セキュリティ機能としてこのサンドボックスに依存し続けたためです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b51b7017f03b60f98505f01afc9017f64fb597b6" translate="yes" xml:space="preserve">
          <source>Each web application you build is composed of objects that collaborate to get stuff done. These objects need to be instantiated and wired together for the app to work. In AngularJS apps most of these objects are instantiated and wired together automatically by the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector service&lt;/a&gt;.</source>
          <target state="translated">構築する各Webアプリケーションは、共同作業を行うオブジェクトで構成されています。アプリを機能させるには、これらのオブジェクトをインスタンス化して相互に接続する必要があります。AngularJSアプリでは、これらのオブジェクトのほとんどがインスタンス化され、&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;インジェクターサービス&lt;/a&gt;によって自動的に一緒に配線されます。</target>
        </trans-unit>
        <trans-unit id="e08245380fe45ed1dc1a39461e8430df197a0e09" translate="yes" xml:space="preserve">
          <source>Earlier we mentioned that we also have special purpose objects that are different from services. These objects extend the framework as plugins and therefore must implement interfaces specified by AngularJS. These interfaces are Controller, Directive, Filter and Animation.</source>
          <target state="translated">先ほど、サービスとは異なる特別な目的のオブジェクトも存在することを述べました。これらのオブジェクトはプラグインとしてフレームワークを拡張するため、AngularJSで指定されたインターフェースを実装しなければなりません。これらのインターフェースはController,Directive,Filter,Animationです。</target>
        </trans-unit>
        <trans-unit id="dca48544769c52bf3b58c672f5cd3b5c747bc2f2" translate="yes" xml:space="preserve">
          <source>Effects of DOM Element re-use</source>
          <target state="translated">DOM要素の再利用の効果</target>
        </trans-unit>
        <trans-unit id="c199d835c658f8ab6c23a79e307ea446a630dc73" translate="yes" xml:space="preserve">
          <source>Either a wrapped jQuery/jqLite node or a DOMElement</source>
          <target state="translated">ラップされた jQuery/jqLite ノードまたは DOMElement のいずれか。</target>
        </trans-unit>
        <trans-unit id="c5dbec72523ae614966440682a91c6aefb466e1e" translate="yes" xml:space="preserve">
          <source>Element or HTML string to compile into a template function.</source>
          <target state="translated">テンプレート関数にコンパイルするための要素またはHTML文字列。</target>
        </trans-unit>
        <trans-unit id="9cbfd00aa5e38787a6022e42110687cd2450a209" translate="yes" xml:space="preserve">
          <source>Else compare the types themselves alphabetically.</source>
          <target state="translated">アルファベット順にタイプを比較します。</target>
        </trans-unit>
        <trans-unit id="92f004dc1ae3f95af43091d25f176aad7eb1a397" translate="yes" xml:space="preserve">
          <source>Else if one of the values is null, consider it &quot;greater than&quot; the other.</source>
          <target state="translated">一方の値がnullの場合は、他方の値よりも大きいとみなします。</target>
        </trans-unit>
        <trans-unit id="55716b221770b19d94c322e504ec2f031d1a376c" translate="yes" xml:space="preserve">
          <source>Email us at &lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security@angularjs.org&lt;/a&gt; to report any potential security issues in AngularJS.</source>
          <target state="translated">AngularJSの潜在的なセキュリティ問題を報告するには、&lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security&lt;/a&gt; @ angularjs.orgに電子メールを送信してください。</target>
        </trans-unit>
        <trans-unit id="099bc2374fc25e458767acd089b2e0b4bbe06521" translate="yes" xml:space="preserve">
          <source>Embedding interpolation markup inside expressions</source>
          <target state="translated">式の内部に補間マークアップを埋め込む</target>
        </trans-unit>
        <trans-unit id="b2d9626fab94fe46dbc23e11d5145543e8c891df" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is reloaded.</source>
          <target state="translated">ngIncludeコンテンツがリロードされるたびに発行されます。</target>
        </trans-unit>
        <trans-unit id="d69747c18e6a7823e2827479f46edbc548e716c8" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is requested.</source>
          <target state="translated">ngIncludeコンテンツが要求されるたびに発行されます。</target>
        </trans-unit>
        <trans-unit id="ccb5524240b958659fec098886cb27f13b421044" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngView content is reloaded.</source>
          <target state="translated">ngViewの内容がリロードされるたびに出力されます。</target>
        </trans-unit>
        <trans-unit id="5352199744d0f4dd2b1904c169630303a8240bd4" translate="yes" xml:space="preserve">
          <source>Emitted when a template HTTP request yields an erroneous response (status &amp;lt; 200 || status &amp;gt; 299)</source>
          <target state="translated">テンプレートHTTPリクエストが誤った応答を返したときに発生します（ステータス&amp;lt;200 ||ステータス&amp;gt; 299）</target>
        </trans-unit>
        <trans-unit id="faf2ad99147d30fa634f5fda5836e1dedfa19477" translate="yes" xml:space="preserve">
          <source>Enable animations outside of the application DOM tree: &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$animate.pin()&lt;/a&gt;</source>
          <target state="translated">アプリケーションDOMツリーの外部でアニメーションを有効にします：&lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$ animate.pin（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2ab88d7ccb6db7d12a00ccd002d5025b4173f0a" translate="yes" xml:space="preserve">
          <source>Enable or disable SVG support in the sanitizer.</source>
          <target state="translated">サニタイザーでの SVG サポートを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="f1d9379845b51d7e57e166ae34919d84964f1127" translate="yes" xml:space="preserve">
          <source>Enables a subset of svg to be supported by the sanitizer.</source>
          <target state="translated">サニタイザーがサポートする svg のサブセットを有効にします。</target>
        </trans-unit>
        <trans-unit id="143c725b84ea6f36aaaba38361a8a7f2268adbf9" translate="yes" xml:space="preserve">
          <source>Enables binding AngularJS expressions to onsubmit events.</source>
          <target state="translated">AngularJSの式をonsubmitイベントにバインドできるようにします。</target>
        </trans-unit>
        <trans-unit id="c80853334b84e1e011526ce6f6d2efcbb632d3b2" translate="yes" xml:space="preserve">
          <source>Enables/disables SCE and returns the current value.</source>
          <target state="translated">SCE を有効/無効にし、現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="1bfefb111e5dac345b0aa3b3c4a4f406e1870b9d" translate="yes" xml:space="preserve">
          <source>Enables/disables various ARIA attributes</source>
          <target state="translated">各種ARIA属性の有効化/無効化</target>
        </trans-unit>
        <trans-unit id="7abd6ccf643ae77e58fc651912d7d14afe3ed6be" translate="yes" xml:space="preserve">
          <source>End-to-end tests can use modules to override configuration.</source>
          <target state="translated">エンドツーエンドのテストでは、モジュールを使用して設定を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="fe10676ae39073acdfb80a439f4190fce12dba21" translate="yes" xml:space="preserve">
          <source>Enter a name in the Live Preview text box; the greeting below the text box changes instantly.</source>
          <target state="translated">ライブプレビューのテキストボックスに名前を入力すると、テキストボックスの下に表示される挨拶が瞬時に変わります。</target>
        </trans-unit>
        <trans-unit id="205fcd69afe3a8ebda34fa883e6cd9e9b086948b" translate="yes" xml:space="preserve">
          <source>Enter the AngularJS execution context by calling &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;&lt;code&gt;.&lt;/code&gt;&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;&lt;code&gt;(stimulusFn)&lt;/code&gt;, where &lt;code&gt;stimulusFn&lt;/code&gt; is the work you wish to do in the AngularJS execution context.</source>
          <target state="translated">&lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;を呼び出して、AngularJS実行コンテキストに入ります &lt;code&gt;.&lt;/code&gt; &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply &lt;/a&gt; &lt;code&gt;(stimulusFn)&lt;/code&gt; 、ここで &lt;code&gt;stimulusFn&lt;/code&gt; は、AngularJS実行コンテキストで実行する作業です。</target>
        </trans-unit>
        <trans-unit id="a5a37a82bd01c55087378b21c459ede66319d8f7" translate="yes" xml:space="preserve">
          <source>Error Reference</source>
          <target state="translated">エラーリファレンス</target>
        </trans-unit>
        <trans-unit id="a25c35bd8f4f9cad8579a43221ea776b2a563e82" translate="yes" xml:space="preserve">
          <source>Escaped Interpolation</source>
          <target state="translated">エスケープ補間</target>
        </trans-unit>
        <trans-unit id="218d2e528de2ed5dec55ef5059999f6d6c7e1a86" translate="yes" xml:space="preserve">
          <source>Escaped interpolation markers are only replaced with the actual interpolation markers in rendered output when the $interpolate service processes the text. So, for HTML elements interpolated by &lt;a href=&quot;%24compile&quot;&gt;$compile&lt;/a&gt;, or otherwise interpolated with the &lt;code&gt;mustHaveExpression&lt;/code&gt; parameter set to &lt;code&gt;true&lt;/code&gt;, the interpolated text must contain an unescaped interpolation expression. As such, this is typically useful only when user-data is used in rendering a template from the server, or when otherwise untrusted data is used by a directive.</source>
          <target state="translated">エスケープされた補間マーカーは、$ interpolateサービスがテキストを処理するときに、レンダリングされた出力で実際の補間マーカーにのみ置き換えられます。したがって、&lt;a href=&quot;%24compile&quot;&gt;$ compile&lt;/a&gt;によって補間された、または &lt;code&gt;mustHaveExpression&lt;/code&gt; パラメータを &lt;code&gt;true&lt;/code&gt; に設定して補間されたHTML要素の場合、補間されたテキストにはエスケープされていない補間式が含まれている必要があります。そのため、これは通常、サーバーからのテンプレートのレンダリングにユーザーデータが使用されている場合、またはディレクティブによって信頼されていないデータが使用されている場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="4d57d4ba2f3a7f358a90f37c48fff5bd229f3431" translate="yes" xml:space="preserve">
          <source>Escaping / Quoting</source>
          <target state="translated">エスケープ/引用</target>
        </trans-unit>
        <trans-unit id="fea6dd1103565fa6cc8bae9d51b299f77b6e645c" translate="yes" xml:space="preserve">
          <source>Evaluate the &lt;code&gt;greeting&lt;/code&gt;&lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; against the scope retrieved above, and assign the result to the text of the enclosing DOM element.</source>
          <target state="translated">上記で取得したスコープに対して &lt;code&gt;greeting&lt;/code&gt; &lt;a href=&quot;expression&quot;&gt;式を&lt;/a&gt;評価し、結果を囲んでいるDOM要素のテキストに割り当てます。</target>
        </trans-unit>
        <trans-unit id="cda22f8a7b7689be1d88d76ef009399f12f6bf88" translate="yes" xml:space="preserve">
          <source>Evaluate the given expression when the user changes the input. The expression is evaluated immediately, unlike the JavaScript onchange event which only triggers at the end of a change (usually, when the user leaves the form element or presses the return key).</source>
          <target state="translated">ユーザーが入力を変更したときに、与えられた式を評価します。JavaScript の onchange イベントが変更の最後にのみトリガーされるのとは異なり、式は即座に評価されます (通常、ユーザーがフォーム要素から離れるかリターンキーを押したときにトリガーされます)。</target>
        </trans-unit>
        <trans-unit id="f056dd1c6d8bd104d6ba75bafcd760d12a08ca72" translate="yes" xml:space="preserve">
          <source>Evaluated as &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;. The expression value should evaluate to an object or an array which is observed on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. Any shallow change within the collection will trigger a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;として評価されます。式の値は、各&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;サイクルで観察されるオブジェクトまたは配列に評価される必要があります。コレクション内の浅い変更は、 &lt;code&gt;listener&lt;/code&gt; 呼び出しをトリガーします。</target>
        </trans-unit>
        <trans-unit id="a86c33fdabaa7b7c9f6110edee9f0ffd2acc28e1" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">式を評価し、結果のHTMLを安全な方法で要素に挿入します。デフォルトでは、結果のHTMLコンテンツは&lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;サービスを使用してサニタイズされます。この機能を利用するには、たとえば、モジュールの依存関係に（コアAngularJSではなく）&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を含めることにより、 &lt;code&gt;$sanitize&lt;/code&gt; が利用可能であることを確認します。モジュールの依存関係で&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を使用するには、アプリケーションに &quot;angular-sanitize.js&quot;を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="9076a3c6b5f726943b0322ab3cf79864f11e9902" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">式を評価し、結果のHTMLを安全な方法で要素に挿入します。デフォルトでは、結果のHTMLコンテンツは&lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;サービスを使用してサニタイズされます。この機能を利用するには、たとえば、モジュールの依存関係に（コアAngularJSではなく）&lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を含めることにより、 &lt;code&gt;$sanitize&lt;/code&gt; が利用可能であることを確認します。モジュールの依存関係で&lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を使用するには、アプリケーションに &quot;angular-sanitize.js&quot;を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="4fae0324b81717cfd0179935deb08738f4958c28" translate="yes" xml:space="preserve">
          <source>Event name to broadcast.</source>
          <target state="translated">放送するイベント名。</target>
        </trans-unit>
        <trans-unit id="9ae944309054d536d760fa0eef00f071c6363b43" translate="yes" xml:space="preserve">
          <source>Event name to emit.</source>
          <target state="translated">排出するイベント名を指定します。</target>
        </trans-unit>
        <trans-unit id="9a3b19e98675ab2f955bd6ef73c0dffd2dc79c70" translate="yes" xml:space="preserve">
          <source>Event name to listen on.</source>
          <target state="translated">リッスンするイベント名。</target>
        </trans-unit>
        <trans-unit id="efd8912106134f28159a082b13ebc510cdb36ce0" translate="yes" xml:space="preserve">
          <source>Event object (see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">イベントオブジェクト（&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5256cf2d05f2a2afff96813dfafbe9056fe17f54" translate="yes" xml:space="preserve">
          <source>Event object, see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">イベントオブジェクト。&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="89991e609ea2e58df8701321c81f1c2b67ca16f0" translate="yes" xml:space="preserve">
          <source>Event that triggered the update.</source>
          <target state="translated">更新のきっかけとなったイベント。</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="dc6ee5b710b84a06b1994d13c09750db60be49d9" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">すべてのアプリケーションには、1つのルート&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;スコープがあり&lt;/a&gt;ます。他のすべてのスコープは、ルートスコープの子孫スコープです。スコープは、モデルの変更を監視するメカニズムを介して、モデルとビューを分離します。また、イベントの発行/放送およびサブスクリプション機能も提供します。&lt;a href=&quot;../../../guide/scope&quot;&gt;スコープ&lt;/a&gt;の開発者ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c6fed10186b9a7e4a176e17c80c83b6d2a93e97a" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">すべてのアプリケーションには、1つのルート&lt;a href=&quot;type/%24rootscope.scope&quot;&gt;スコープがあり&lt;/a&gt;ます。他のすべてのスコープは、ルートスコープの子孫スコープです。スコープは、モデルの変更を監視するメカニズムを介して、モデルとビューを分離します。また、イベントの発行/放送およびサブスクリプション機能も提供します。&lt;a href=&quot;../../guide/scope&quot;&gt;スコープ&lt;/a&gt;の開発者ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="8932161648474502d4579225b7a5010ba4feeb3a" translate="yes" xml:space="preserve">
          <source>Everything you need to build a CRUD app in a cohesive set: Data-binding, basic templating directives, form validation, routing, deep-linking, reusable components and dependency injection.</source>
          <target state="translated">CRUDアプリを構築するために必要なすべてがまとまったセットになっています。データバインディング、基本的なテンプレート化ディレクティブ、フォームバリデーション、ルーティング、ディープリンク、再利用可能なコンポーネント、依存性インジェクション。</target>
        </trans-unit>
        <trans-unit id="9eed938865a4ca53d208e8ce6cf848543e153677" translate="yes" xml:space="preserve">
          <source>Exact matches always win over keyword matches. Therefore, if you define both &lt;code&gt;=0&lt;/code&gt; and &lt;code&gt;zero&lt;/code&gt;, when the value of the expression is zero, the &lt;code&gt;=0&lt;/code&gt; message is the one that will be selected. (The duplicate keyword categories are helpful when used with the optional &lt;code&gt;offset&lt;/code&gt; syntax described later.)</source>
          <target state="translated">完全一致は常にキーワード一致よりも優先されます。したがって、 &lt;code&gt;=0&lt;/code&gt; と &lt;code&gt;zero&lt;/code&gt; 両方を定義すると、式の値が0のときに &lt;code&gt;=0&lt;/code&gt; メッセージが選択されます。（重複するキーワードカテゴリは、後で説明するオプションの &lt;code&gt;offset&lt;/code&gt; 構文とともに使用すると便利です。）</target>
        </trans-unit>
        <trans-unit id="1b2e441413acb202181b009a7cb2e30e8082e0bf" translate="yes" xml:space="preserve">
          <source>Exact matches are written as the equal sign followed by the exact value. &lt;code&gt;=0&lt;/code&gt;, &lt;code&gt;=1&lt;/code&gt;, &lt;code&gt;=2&lt;/code&gt; and &lt;code&gt;=123&lt;/code&gt; are all examples of exact matches. Note that there should be no space between the equal sign and the numeric value.</source>
          <target state="translated">完全一致は、等号とそれに続く正確な値として記述されます。 &lt;code&gt;=0&lt;/code&gt; 、 &lt;code&gt;=1&lt;/code&gt; 、 &lt;code&gt;=2&lt;/code&gt; および &lt;code&gt;=123&lt;/code&gt; はすべて完全一致の例です。等号と数値の間にはスペースを入れないでください。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="17aeb04f751fae1ae3f4ad0b2a7c8e59cbb96c5e" translate="yes" xml:space="preserve">
          <source>Example Applications</source>
          <target state="translated">応用例</target>
        </trans-unit>
        <trans-unit id="7c784376e50e16848980dbe227261dcf8fd3cd3c" translate="yes" xml:space="preserve">
          <source>Example configuration</source>
          <target state="translated">設定例</target>
        </trans-unit>
        <trans-unit id="916ba94adedad329829de9e3198135460b08ea09" translate="yes" xml:space="preserve">
          <source>Example of a component tree</source>
          <target state="translated">コンポーネントツリーの例</target>
        </trans-unit>
        <trans-unit id="1ee0a88badf0098cd9392d2a3a772e37baa2fda5" translate="yes" xml:space="preserve">
          <source>Example of what a typical jasmine tests looks like with the inject method.</source>
          <target state="translated">代表的なジャスミンのテストが注入法でどのように見えるかの例。</target>
        </trans-unit>
        <trans-unit id="07f064f0c6b85d5dffb3101177b89f9992c1c9c7" translate="yes" xml:space="preserve">
          <source>Example test:</source>
          <target state="translated">例題テスト。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="62dfa7f10882e77a87092f507d379f2402d87987" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c32374b44f69dd61e35af260b06e3345095cb0e9" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5706b247d2f0a121689f2b656388525706d03e11" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="7bb6af775c57b33034454a0b76f9d211912e7f56" translate="yes" xml:space="preserve">
          <source>Exception associated with the error.</source>
          <target state="translated">エラーに関連する例外。</target>
        </trans-unit>
        <trans-unit id="3c931b480d9d9bfc8842e1d02f1f24126be988bc" translate="yes" xml:space="preserve">
          <source>Execute this function after injector creation. Useful for application initialization.</source>
          <target state="translated">インジェクタ作成後にこの関数を実行します。アプリケーションの初期化に便利です。</target>
        </trans-unit>
        <trans-unit id="086045d75cb70d0de25ecacb2e252ee609998080" translate="yes" xml:space="preserve">
          <source>Execute this function on module load. Useful for service configuration.</source>
          <target state="translated">モジュールロード時にこの関数を実行します。サービスの設定に便利です。</target>
        </trans-unit>
        <trans-unit id="60db8af3d71e63425912639e5639bd857a345c69" translate="yes" xml:space="preserve">
          <source>Executed after the child elements are linked.</source>
          <target state="translated">子要素がリンクされた後に実行されます。</target>
        </trans-unit>
        <trans-unit id="2f8e9afcb55d879e3172b4ff3edb0f541f0a203d" translate="yes" xml:space="preserve">
          <source>Executed before the child elements are linked. Not safe to do DOM transformation since the compiler linking function will fail to locate the correct elements for linking.</source>
          <target state="translated">子要素がリンクされる前に実行されます。コンパイラのリンク関数がリンクのための正しい要素を見つけるのに失敗するので、DOM 変換を行うのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="a474756a35892f6f1337f53303e90f0d73ff2f19" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;expression&lt;/code&gt; on the current scope and returns the result. Any exceptions in the expression are propagated (uncaught). This is useful when evaluating AngularJS expressions.</source>
          <target state="translated">現在のスコープで &lt;code&gt;expression&lt;/code&gt; を実行し、結果を返します。式内の例外はすべて伝達されます（キャッチされません）。これは、AngularJS式を評価するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4d7dabbbb9314a685e95e955e06bc8dd0125cef5" translate="yes" xml:space="preserve">
          <source>Executes the expression on the current scope at a later point in time.</source>
          <target state="translated">後日、現在のスコープで式を実行します。</target>
        </trans-unit>
        <trans-unit id="9df4399b6f3ff9926ed5500724ef427c968e367d" translate="yes" xml:space="preserve">
          <source>Exposes the current URL in the browser address bar, so you can</source>
          <target state="translated">ブラウザのアドレスバーに現在の URL を表示します。</target>
        </trans-unit>
        <trans-unit id="628cde53fd14624d568dab4d3637fdef86c20b64" translate="yes" xml:space="preserve">
          <source>Expression evaluation is forgiving to undefined and null. In JavaScript, evaluating &lt;code&gt;a.b.c&lt;/code&gt; throws an exception if &lt;code&gt;a&lt;/code&gt; is not an object. While this makes sense for a general purpose language, the expression evaluations are primarily used for data binding, which often look like this:</source>
          <target state="translated">式の評価は未定義およびnullを許容します。JavaScriptでは、 &lt;code&gt;a&lt;/code&gt; がオブジェクトでない場合、 &lt;code&gt;a.b.c&lt;/code&gt; を評価すると例外がスローされます。これは汎用言語では理にかなっていますが、式の評価は主にデータバインディングに主に使用されます。</target>
        </trans-unit>
        <trans-unit id="0accf77dcec253c18fdfdc78fc6ec09ea004edfb" translate="yes" xml:space="preserve">
          <source>Expression that is evaluated on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. A change in the return value triggers a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">各&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;サイクルで評価される式。戻り値が変化すると、 &lt;code&gt;listener&lt;/code&gt; 呼び出されます。</target>
        </trans-unit>
        <trans-unit id="85ae6863e6e6040f384b4b6dc569f9eb4a64e58c" translate="yes" xml:space="preserve">
          <source>Expression to evaluate when a new partial is loaded.</source>
          <target state="translated">新しいパーシャルがロードされたときに評価する式。</target>
        </trans-unit>
        <trans-unit id="77456688d291ad4f5b4e8d91f041eeb7a5e2de52" translate="yes" xml:space="preserve">
          <source>Expression to evaluate whenever the view updates.</source>
          <target state="translated">ビューが更新されるたびに評価する式。</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="cf78f62fb7990fb89d458935ffb1846f90b586a1" translate="yes" xml:space="preserve">
          <source>Expressions, like the one defined for the &lt;code&gt;ngClick&lt;/code&gt; directive in the example below, are evaluated with respect to the current scope. Therefore, there is no risk of inadvertently coding in a dependency on a global value in such an expression.</source>
          <target state="translated">以下の例で &lt;code&gt;ngClick&lt;/code&gt; ディレクティブに定義されているような式は、現在のスコープに関して評価されます。したがって、このような式のグローバル値への依存関係を誤ってコーディングするリスクはありません。</target>
        </trans-unit>
        <trans-unit id="7baf9e4023c205c51428907b8b5f7094a18f4b9f" translate="yes" xml:space="preserve">
          <source>Extends the built-in list of valid attributes, i.e. attributes that are considered safe and are not stripped off during sanitization.</source>
          <target state="translated">有効な属性の組み込みリストを拡張します。</target>
        </trans-unit>
        <trans-unit id="c966928e5c88a4a9f1ab15febec0c95a059f8e2a" translate="yes" xml:space="preserve">
          <source>Extends the built-in lists of valid HTML/SVG elements, i.e. elements that are considered safe and are not stripped off during sanitization. You can extend the following lists of elements:</source>
          <target state="translated">有効な HTML/SVG 要素のビルトインリストを拡張します。以下の要素リストを拡張することができます。</target>
        </trans-unit>
        <trans-unit id="2b14b339ebedbd999c77e9b9f5c7d22127b40d2f" translate="yes" xml:space="preserve">
          <source>Extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">先オブジェクト延び &lt;code&gt;dst&lt;/code&gt; から自分の列挙プロパティをコピーすることによって、 &lt;code&gt;src&lt;/code&gt; にオブジェクト（複数可） &lt;code&gt;dst&lt;/code&gt; 。複数の &lt;code&gt;src&lt;/code&gt; オブジェクトを指定できます。元のオブジェクトを保持したい場合は、空のオブジェクトをターゲットとして渡すことにより、オブジェクトを保持できます： &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed06ca00010de70fa6e3ffdb999c3f9e5c99bcb6" translate="yes" xml:space="preserve">
          <source>External AngularJS resources</source>
          <target state="translated">外部のAngularJSリソース</target>
        </trans-unit>
        <trans-unit id="be313f8149a2d30f8327ee70864cf3d4946285a6" translate="yes" xml:space="preserve">
          <source>External Resources</source>
          <target state="translated">外部リソース</target>
        </trans-unit>
        <trans-unit id="39ad1c4756a089e469b5ec792fe50629bec8336f" translate="yes" xml:space="preserve">
          <source>Extract the contents of the element where the directive appears and make it available to the directive. The contents are compiled and provided to the directive as a &lt;strong&gt;transclusion function&lt;/strong&gt;. See the &lt;a href=&quot;%24compile#transclusion.html&quot;&gt;Transclusion&lt;/a&gt; section below.</source>
          <target state="translated">ディレクティブが出現する要素のコンテンツを抽出し、ディレクティブで使用できるようにします。内容はコンパイルされ、&lt;strong&gt;トランスクルージョン関数&lt;/strong&gt;としてディレクティブに提供され&lt;strong&gt;ます&lt;/strong&gt;。下記の&lt;a href=&quot;%24compile#transclusion.html&quot;&gt;トランスクルージョンの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="3156b346a064c1db3b4dfdc8e539af534a00f477" translate="yes" xml:space="preserve">
          <source>Factory Methods</source>
          <target state="translated">ファクトリーメソッド</target>
        </trans-unit>
        <trans-unit id="ef4319d2d02cf8972a8e4e597c5b497d7352cc3d" translate="yes" xml:space="preserve">
          <source>Factory Recipe</source>
          <target state="translated">ファクトリーレシピ</target>
        </trans-unit>
        <trans-unit id="c8e6696140d2e75575a027e3db926b81e7fa86b8" translate="yes" xml:space="preserve">
          <source>Factory and Service are the most commonly used recipes. The only difference between them is that the Service recipe works better for objects of a custom type, while the Factory can produce JavaScript primitives and functions.</source>
          <target state="translated">Factory と Service は最も一般的に使用されるレシピです。これらの間の唯一の違いは、FactoryがJavaScriptのプリミティブや関数を生成できるのに対し、Serviceレシピはカスタムタイプのオブジェクトに対してよりよく機能するということです。</target>
        </trans-unit>
        <trans-unit id="028dd1450ba58561838de3f298fd05498d14e273" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of an animation.</source>
          <target state="translated">アニメーションの新しいインスタンスを作成するためのファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="3ee6fd00a202d032c40a78907b76870f53db49dc" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of directives.</source>
          <target state="translated">ディレクティブの新しいインスタンスを作成するためのファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="00b5e72ae89de1590849f21e6c25c0567db4d3f8" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of filter.</source>
          <target state="translated">フィルタの新規インスタンスを作成するためのファクトリ関数です。</target>
        </trans-unit>
        <trans-unit id="cc3812a493330e545d9923589baae8e606e23d7f" translate="yes" xml:space="preserve">
          <source>Factory function used to create XMLHttpRequest objects.</source>
          <target state="translated">XMLHttpRequestオブジェクトを作成するためのファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="66507c8df90678391bccbb22d7912a1e54a7b768" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">&lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトを構築し、それらにアクセスできるようにするファクトリ。</target>
        </trans-unit>
        <trans-unit id="6a2e0291c6da34749a8ac6df7b544977c583fc48" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">&lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトを構築し、それらにアクセスできるようにするファクトリ。</target>
        </trans-unit>
        <trans-unit id="33ad5a927dac4ab275ae4ea2e1b605163a18a5a6" translate="yes" xml:space="preserve">
          <source>Failed interpolated expressions in &lt;code&gt;ng-href&lt;/code&gt; attributes can easily go unnoticed. We can decorate &lt;code&gt;ngHref&lt;/code&gt; to warn us of those conditions.</source>
          <target state="translated">&lt;code&gt;ng-href&lt;/code&gt; 属性の補間式が失敗すると、簡単に気付かれなくなる可能性があります。 &lt;code&gt;ngHref&lt;/code&gt; を装飾して、これらの条件を警告することができます。</target>
        </trans-unit>
        <trans-unit id="022a478813680131790030507e1c1390d5280b3b" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用するアプリケーションのエンドツーエンドのテストまたはバックエンドなしの開発に適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="576115681ace0f2ae10133aafeaa28843f3bceae" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用するアプリケーションのエンドツーエンドのテストまたはバックエンドなしの開発に適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="b961aa07954a84612068135eb6d91115ca7b9b12" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用するアプリケーションのエンドツーエンドのテストまたはバックエンドなしの開発に適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="2bea11d5d7c3b57fb31b4af107d8e23ff5f192ac" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用する単体テストアプリケーションに適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="dc58c413dd761b834fc17ee464cbf2c2b1de608e" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用する単体テストアプリケーションに適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="0f28b305a959cfe601c149a9dfacea0ea1a23943" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用する単体テストアプリケーションに適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="2b6546af28f173c1cc2dec94a741c3e78cbdbce9" translate="yes" xml:space="preserve">
          <source>Fallback for legacy browsers</source>
          <target state="translated">レガシーブラウザのフォールバック</target>
        </trans-unit>
        <trans-unit id="28db5b5a50621fb409af99bca4f8b752427e4a5c" translate="yes" xml:space="preserve">
          <source>Feature &amp;amp; Bug Tracker</source>
          <target state="translated">機能とバグトラッカー</target>
        </trans-unit>
        <trans-unit id="37565aacce4ed29b047384a80a69fe751d32457a" translate="yes" xml:space="preserve">
          <source>Features / Recipe type</source>
          <target state="translated">特徴・レシピの種類</target>
        </trans-unit>
        <trans-unit id="04e7c6a718bae0ab2d3f26efc985083798ff0736" translate="yes" xml:space="preserve">
          <source>Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.</source>
          <target state="translated">また、トランジションとキーフレームを組み合わせたり、同じ要素に他のCSSクラスを適用したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="5c17b605508aeec026cd4b0eba633087d6e85345" translate="yes" xml:space="preserve">
          <source>Feel free to use other structural directives such as ng-if and ng-switch to further control what messages are active and when. Be careful, if you place ng-message on the same element as these structural directives, AngularJS may not be able to determine if a message is active or not. Therefore it is best to place the ng-message on a child element of the structural directive.</source>
          <target state="translated">ng-ifやng-switchのような他の構造ディレクティブを自由に使って、いつどのメッセージがアクティブかをさらに制御してください。注意してほしいのは、ng-messageをこれらの構造ディレクティブと同じ要素に配置すると、AngularJSはメッセージがアクティブかどうかを判断できなくなる可能性があるということです。そのため、構造ディレクティブの子要素にng-messageを配置するのがベストです。</target>
        </trans-unit>
        <trans-unit id="b5c660cb22aa8077dd6a3d7e39e98d1eba6cd24e" translate="yes" xml:space="preserve">
          <source>Fetches, compiles and includes an external HTML fragment.</source>
          <target state="translated">外部の HTML フラグメントを取得、コンパイル、インクルードします。</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="958cb2148933330b690b4c6657039b40197736c4" translate="yes" xml:space="preserve">
          <source>Filter components in ng</source>
          <target state="translated">ngのフィルタ成分</target>
        </trans-unit>
        <trans-unit id="313a96c8d6aa3fcf071911deb5c09c4a10f87451" translate="yes" xml:space="preserve">
          <source>Filter components in ngSanitize</source>
          <target state="translated">ngSanitize のフィルタコンポーネント</target>
        </trans-unit>
        <trans-unit id="0fa8c3951ddd4bf377d1a463b75966dd0eab1fcd" translate="yes" xml:space="preserve">
          <source>Filter name - this must be a valid AngularJS expression identifier</source>
          <target state="translated">フィルタ名-これは有効なAngularJS式の識別子でなければなりません。</target>
        </trans-unit>
        <trans-unit id="590dca26d3697ff206c7510b4a1ea098ac9d1127" translate="yes" xml:space="preserve">
          <source>Filter output &amp;mdash; Use &lt;a href=&quot;filter&quot;&gt;AngularJS filters&lt;/a&gt; instead.</source>
          <target state="translated">出力のフィルター&amp;mdash; 代わりに&lt;a href=&quot;filter&quot;&gt;AngularJSフィルターを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="699dd39da1d524706c0ac40e80676a65a7ee3d75" translate="yes" xml:space="preserve">
          <source>Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To achieve this a filter definition consists of a factory function which is annotated with dependencies and is responsible for creating a filter function.</source>
          <target state="translated">フィルタは入力を出力に変換する関数にすぎません。しかし、フィルタは依存関係を注入する必要があります。これを実現するためには、フィルタ定義は依存関係をアノテーションしたファクトリ関数で構成され、フィルタ関数の作成を担当します。</target>
        </trans-unit>
        <trans-unit id="4f123f5fc885990f073d8e875ec587859f544592" translate="yes" xml:space="preserve">
          <source>Filters are used for formatting data displayed to the user.</source>
          <target state="translated">フィルタは、ユーザーに表示されるデータをフォーマットするために使用されます。</target>
        </trans-unit>
        <trans-unit id="529dad0d0ff38bfbf459af3aac0d7bf3af26d043" translate="yes" xml:space="preserve">
          <source>Filters can be applied to expressions in view templates using the following syntax:</source>
          <target state="translated">フィルタは、以下の構文を使用してビューテンプレートの式に適用することができます。</target>
        </trans-unit>
        <trans-unit id="b0c6a437ea6f5579b59312d1da2316b3e28c48c6" translate="yes" xml:space="preserve">
          <source>Filters can be applied to the result of another filter. This is called &quot;chaining&quot; and uses the following syntax:</source>
          <target state="translated">フィルタは、別のフィルタの結果に適用することができます。これは「連鎖」と呼ばれ、以下の構文を使用します。</target>
        </trans-unit>
        <trans-unit id="55335aa85bcb3866e73d19fd2d724a8e66a43b7f" translate="yes" xml:space="preserve">
          <source>Filters format the value of an expression for display to the user. They can be used in view templates, controllers or services. AngularJS comes with a collection of &lt;a href=&quot;../api/ng/filter&quot;&gt;built-in filters&lt;/a&gt;, but it is easy to define your own as well.</source>
          <target state="translated">フィルターは、ユーザーに表示する式の値をフォーマットします。ビューテンプレート、コントローラー、またはサービスで使用できます。AngularJSには&lt;a href=&quot;../api/ng/filter&quot;&gt;組み込みのフィルターの&lt;/a&gt;コレクションが付属していますが、独自のフィルターを定義することも簡単です。</target>
        </trans-unit>
        <trans-unit id="682562f1b49ae6b0a648c1ac925de5d406869964" translate="yes" xml:space="preserve">
          <source>Filters may have arguments. The syntax for this is</source>
          <target state="translated">フィルタは引数を持つことができます。そのための構文は</target>
        </trans-unit>
        <trans-unit id="30c736d62b49c588e1fe0f61717e96ddba143772" translate="yes" xml:space="preserve">
          <source>Filters that are marked as &lt;code&gt;$stateful&lt;/code&gt; are also executed on each $digest. See &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;Stateful filters&lt;/a&gt; for more information. Note that no AngularJS core filters are $stateful.</source>
          <target state="translated">&lt;code&gt;$stateful&lt;/code&gt; としてマークされているフィルターは、各$ digestでも実行されます。詳細については、&lt;a href=&quot;filter#stateful-filters.html&quot;&gt;ステートフルフィルター&lt;/a&gt;を参照してください。AngularJSコアフィルターは$ statefulではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="20d457ead64e7d7328649c07d1839f14e1100651" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;the banned resource URL list overrides the trusted resource URL list&lt;/strong&gt; and has the final say.</source>
          <target state="translated">最後に&lt;strong&gt;、禁止されたリソースのURLリストは、信頼できるリソースのURLリスト&lt;/strong&gt;を&lt;strong&gt;上書きし&lt;/strong&gt;、最終決定権を持ちます。</target>
        </trans-unit>
        <trans-unit id="66c30abd8d699d84caba4d7a205c80691b2213c7" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;the blacklist overrides the whitelist&lt;/strong&gt; and has the final say.</source>
          <target state="translated">最後に&lt;strong&gt;、ブラックリストはホワイトリストをオーバーライドし&lt;/strong&gt;、最終決定権を持ちます。</target>
        </trans-unit>
        <trans-unit id="3b6d818fbadda9b37e12f8c2201c1880d5bffeaf" translate="yes" xml:space="preserve">
          <source>Finally, Jasmine provides matchers which let you make assertions:</source>
          <target state="translated">最後に、Jasmineはアサーションを行うためのマッターを提供しています。</target>
        </trans-unit>
        <trans-unit id="b20b914a19775c7d6d718aa11a19eb2c2aea25c1" translate="yes" xml:space="preserve">
          <source>Finally, in an attempt to simplify things, if a predicate returns an object as the extracted value for an item, &lt;code&gt;orderBy&lt;/code&gt; will try to convert that object to a primitive value, before passing it to the comparator. The following rules govern the conversion:</source>
          <target state="translated">最後に、物事を単純化するために、述語がアイテムの抽出値としてオブジェクトを返す場合、 &lt;code&gt;orderBy&lt;/code&gt; はそのオブジェクトをプリミティブ値に変換してから、コンパレーターに渡します。次のルールが変換を管理します。</target>
        </trans-unit>
        <trans-unit id="07f4fb01f5ca9fb0f54a74c5ff4ac147e27960d5" translate="yes" xml:space="preserve">
          <source>Finally, load the module in your application by adding it as a dependent module:</source>
          <target state="translated">最後に、依存モジュールとして追加することで、アプリケーションにモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="fdccbab2920c960c12560765b2c4dd6408e9e441" translate="yes" xml:space="preserve">
          <source>Find out more information about each directive by reading the &lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria Developer Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria開発者ガイドを&lt;/a&gt;読んで、各ディレクティブの詳細を確認してください。</target>
        </trans-unit>
        <trans-unit id="ffa9aa79cbd2923d9b3db7b608c702e52b23423e" translate="yes" xml:space="preserve">
          <source>Finds links in text input and turns them into html links. Supports &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; and plain email address links.</source>
          <target state="translated">テキスト入力でリンクを検索し、それらをHTMLリンクに変換します。 &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; およびプレーンメールアドレスリンクをサポートします。</target>
        </trans-unit>
        <trans-unit id="b477acda5b9a9fa11e6ec90588718df5fca3ceb9" translate="yes" xml:space="preserve">
          <source>Fire up a screen reader such as VoiceOver or NVDA to check for ARIA support. &lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;Helpful screen reader tips.&lt;/a&gt;</source>
          <target state="translated">VoiceOverやNVDAなどのスクリーンリーダーを起動して、ARIAサポートを確認します。&lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;役立つスクリーンリーダーのヒント。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="255e96fff7006defdcfa0768091004d2cadf02d1" translate="yes" xml:space="preserve">
          <source>First create an AngularJS module that will hold the service definition. (The empty array passed as the second parameter means that this module does not depend on any other modules.)</source>
          <target state="translated">まず、サービス定義を保持するAngularJSモジュールを作成します。(2番目のパラメータとして渡される空の配列は、このモジュールが他のモジュールに依存しないことを意味します)。</target>
        </trans-unit>
        <trans-unit id="d323989dc2db49f0060887626146a6c49dae68b2" translate="yes" xml:space="preserve">
          <source>First let's talk about the &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;API for registering directives&lt;/a&gt;. Much like controllers, directives are registered on modules. To register a directive, you use the &lt;code&gt;module.directive&lt;/code&gt; API. &lt;code&gt;module.directive&lt;/code&gt; takes the &lt;a href=&quot;directive#matching-directives.html&quot;&gt;normalized&lt;/a&gt; directive name followed by a &lt;strong&gt;factory function.&lt;/strong&gt; This factory function should return an object with the different options to tell &lt;code&gt;$compile&lt;/code&gt; how the directive should behave when matched.</source>
          <target state="translated">まず、&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブを登録するため&lt;/a&gt;のAPIについて説明します。コントローラーのように、ディレクティブはモジュールに登録されます。ディレクティブを登録するには、 &lt;code&gt;module.directive&lt;/code&gt; API を使用します。 &lt;code&gt;module.directive&lt;/code&gt; は、&lt;a href=&quot;directive#matching-directives.html&quot;&gt;正規化された&lt;/a&gt;ディレクティブ名に続いて&lt;strong&gt;ファクトリ関数を&lt;/strong&gt;取り&lt;strong&gt;ます。&lt;/strong&gt;このファクトリ関数は、さまざまなオプションを持つオブジェクトを返して、一致した場合のディレクティブの動作を &lt;code&gt;$compile&lt;/code&gt; に指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="ae0317278d634cdf9897fb0dfd8c37d7e85a15db" translate="yes" xml:space="preserve">
          <source>First, download the file:</source>
          <target state="translated">まず、ファイルをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="4eed0a516dc6dad6334d232395f61bdc71c7a4f5" translate="yes" xml:space="preserve">
          <source>First, get the file:</source>
          <target state="translated">まず、ファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="9c40c3b47461dae52bbb2ce1715c3e7c4122872e" translate="yes" xml:space="preserve">
          <source>First, there is a new JavaScript file that contains a &lt;a href=&quot;controller&quot;&gt;controller&lt;/a&gt;. More accurately, the file specifies a constructor function that will be used to create the actual controller instance. The purpose of controllers is to expose variables and functionality to expressions and directives.</source>
          <target state="translated">まず、&lt;a href=&quot;controller&quot;&gt;コントローラー&lt;/a&gt;を含む新しいJavaScriptファイルがあります。より正確には、ファイルは実際のコントローラーインスタンスの作成に使用されるコンストラクター関数を指定します。コントローラーの目的は、変数と機能を式とディレクティブに公開することです。</target>
        </trans-unit>
        <trans-unit id="77d9204eade0f099f5e0ab2bbd55d4646d3a83bf" translate="yes" xml:space="preserve">
          <source>Flickering when using ngHide to toggle between elements</source>
          <target state="translated">ngHide を使用して要素間の切り替えを行う際にちらつきが発生する</target>
        </trans-unit>
        <trans-unit id="b5ab32c1bf51cc481c9ab3c08fe93a1b77113b2e" translate="yes" xml:space="preserve">
          <source>Flickering when using ngShow to toggle between elements</source>
          <target state="translated">ngShow を使用して要素間の切り替えを行うとフリッカーが発生する</target>
        </trans-unit>
        <trans-unit id="dd43887b63ddf9f9facc6f00c39c0b0cb59061d5" translate="yes" xml:space="preserve">
          <source>Flushes all currently pending tasks and executes the corresponding callbacks.</source>
          <target state="translated">現在保留中のすべてのタスクをフラッシュし、対応するコールバックを実行します。</target>
        </trans-unit>
        <trans-unit id="a90504300f4ff98f08eb7ca5fb07f8b7ddb64a04" translate="yes" xml:space="preserve">
          <source>Flushes pending requests using the trained responses. Requests are flushed in the order they were made, but it is also possible to skip one or more requests (for example to have them flushed later). This is useful for simulating scenarios where responses arrive from the server in any order.</source>
          <target state="translated">訓練されたレスポンスを使用して、保留中のリクエストをフラッシュします。リクエストは実行された順にフラッシュされますが、1つ以上のリクエストをスキップすることも可能です (例えば、後でフラッシュさせるなど)。これは、サーバからのレスポンスが任意の順番で届くシナリオをシミュレートするのに便利です。</target>
        </trans-unit>
        <trans-unit id="638b971934a555c5935d2b23812b0728737ef511" translate="yes" xml:space="preserve">
          <source>Flushes the queue of pending tasks.</source>
          <target state="translated">保留中のタスクのキューをフラッシュします。</target>
        </trans-unit>
        <trans-unit id="8fccbd9b557140b0032b7f8e325d55f44d855fc4" translate="yes" xml:space="preserve">
          <source>Flushing HTTP requests</source>
          <target state="translated">HTTP リクエストをフラッシュする</target>
        </trans-unit>
        <trans-unit id="a9fc15bcc3e40c2b04001a849fdf3aa1b08d270c" translate="yes" xml:space="preserve">
          <source>Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">この配列で許可されている項目の説明については、&lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;このリンク&lt;/a&gt;をクリックしてください。</target>
        </trans-unit>
        <trans-unit id="094d6476ce6c9b2413458a029d80353731b269a4" translate="yes" xml:space="preserve">
          <source>Following the AngularJS expression, you would denote the plural extension syntax by the &lt;code&gt;, plural,&lt;/code&gt; syntax element. The spaces there are optional.</source>
          <target state="translated">AngularJS式に続いて &lt;code&gt;, plural,&lt;/code&gt; 構文要素で複数形拡張構文を示します。スペースはオプションです。</target>
        </trans-unit>
        <trans-unit id="77b5d91136a3bc63a58e377a55c5cfbbe4b179c4" translate="yes" xml:space="preserve">
          <source>For CSS that's safe to source into the application. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">アプリケーションにソースを出しても大丈夫なCSSの場合。現在は未使用です。独自のディレクティブで自由に使ってください。</target>
        </trans-unit>
        <trans-unit id="93453f79c27232e1015010a01e85d73371266175" translate="yes" xml:space="preserve">
          <source>For HTML that's safe to source into the application. The &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt; directive uses this context for bindings. If an unsafe value is encountered and the &lt;a href=&quot;../../ngsanitize&quot;&gt;$sanitize&lt;/a&gt; module is present this will sanitize the value instead of throwing an error.</source>
          <target state="translated">アプリケーションへのソースとして安全なHTMLの場合。&lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtmlの&lt;/a&gt;ディレクティブは、バインディングのために、このコンテキストを使用しています。安全でない値が検出され、&lt;a href=&quot;../../ngsanitize&quot;&gt;$ sanitize&lt;/a&gt;モジュールが存在する場合、これはエラーをスローする代わりに値を無害化します。</target>
        </trans-unit>
        <trans-unit id="26c9ca3b2c358ad13d5820190c1ba8d9939ab41e" translate="yes" xml:space="preserve">
          <source>For JavaScript that is safe to execute in your application's context. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">アプリケーションのコンテキストで実行しても安全なJavaScriptの場合。現在は未使用です。独自のディレクティブで自由に使ってください。</target>
        </trans-unit>
        <trans-unit id="c53dc4f36928109e16191d24a777b2f91435bd6c" translate="yes" xml:space="preserve">
          <source>For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application. Examples include &lt;code&gt;ng-include&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; bindings for tags other than &lt;code&gt;IMG&lt;/code&gt; (e.g. &lt;code&gt;IFRAME&lt;/code&gt;, &lt;code&gt;OBJECT&lt;/code&gt;, etc.)</source>
          <target state="translated">リンクとしてたどることが安全であるだけでなく、そのコンテンツもアプリケーションに含めることが安全であるURLの場合。例には、 &lt;code&gt;IMG&lt;/code&gt; 以外のタグの &lt;code&gt;ng-include&lt;/code&gt; 、 &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; バインディング（ &lt;code&gt;IFRAME&lt;/code&gt; 、 &lt;code&gt;OBJECT&lt;/code&gt; など）が含まれます。</target>
        </trans-unit>
        <trans-unit id="679d8901367dd69ff1b551c6d19359134975c76f" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to follow as links. Is automatically converted from string by sanitizing when needed. Note that &lt;code&gt;$sce.URL&lt;/code&gt; makes a stronger statement about the URL than &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; does and therefore contexts requiring values trusted for &lt;code&gt;$sce.URL&lt;/code&gt; can be used anywhere that values trusted for &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; are required.</source>
          <target state="translated">リンク先として安全にアクセスできるURLの場合。必要に応じてサニタイズすることにより、文字列から自動的に変換されます。なお、 &lt;code&gt;$sce.URL&lt;/code&gt; よりURLについての強い声明ます &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 値を必要とするため、コンテキストがために信頼されないと、 &lt;code&gt;$sce.URL&lt;/code&gt; 値がために、信頼できる場所であればどこでも使用することができます &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 必要とされているが。</target>
        </trans-unit>
        <trans-unit id="460be5bd6859be623406a9b95efc4d427c933c3d" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to render as media. Is automatically converted from string by sanitizing when needed.</source>
          <target state="translated">メディアとしてレンダリングしても安全なURLの場合。必要に応じてサニタイズすることで自動的に文字列から変換されます。</target>
        </trans-unit>
        <trans-unit id="56a3631774eba60c1d32538706994f443230d184" translate="yes" xml:space="preserve">
          <source>For a full breakdown of each method available on &lt;code&gt;$animate&lt;/code&gt;, see the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$animate&lt;/code&gt; で使用できる各メソッドの詳細については、&lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;APIドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee537291a987f36791c6713c21d3132becf867bb" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">各アニメーションイベント中に含まれるステップの詳細については、&lt;a href=&quot;../api/ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API docsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0c2ee5a6e688447faa7359cb736c719caeff0771" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">各アニメーションイベント中に含まれるステップの詳細については、&lt;a href=&quot;ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API docsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9eb4e7bb485c4f2c498bc194e7c524491dc3a750" translate="yes" xml:space="preserve">
          <source>For a higher level of abstraction, please check out the &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt; service.</source>
          <target state="translated">より高度な抽象化については、&lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$ resource&lt;/a&gt;サービスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="d076559b1af0412b2156be6fe715805d27e234d9" translate="yes" xml:space="preserve">
          <source>For an overview of this service and the functionnality it provides in AngularJS, see the main page for &lt;a href=&quot;%24sce&quot;&gt;SCE&lt;/a&gt;. The current page is targeted for developers who need to alter how SCE works in their application, which shouldn't be needed in most cases.</source>
          <target state="translated">このサービスの概要と、AngularJSで提供される機能については、&lt;a href=&quot;%24sce&quot;&gt;SCEの&lt;/a&gt;メインページを参照してください。現在のページは、アプリケーションでSCEの動作を変更する必要がある開発者を対象としています。これは、ほとんどの場合必要ありません。</target>
        </trans-unit>
        <trans-unit id="b35f9509f0816b491b39c105cf33a4c232d76568" translate="yes" xml:space="preserve">
          <source>For basic examples, how to use &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">基本的な例、 &lt;code&gt;ngModel&lt;/code&gt; の使用方法については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="18cb02d5b2d6faa6bcd2abc7c6cf94b02170c3a3" translate="yes" xml:space="preserve">
          <source>For best practices on using &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; の使用に関するベストプラクティスについては、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="77d34f60b8e72f532f193ec3320fc033253270d4" translate="yes" xml:space="preserve">
          <source>For browsers that support the HTML5 history API, &lt;code&gt;$location&lt;/code&gt; uses the HTML5 history API to write path and search. If the history API is not supported by a browser, &lt;code&gt;$location&lt;/code&gt; supplies a Hashbang URL. This frees you from having to worry about whether the browser viewing your app supports the history API or not; the &lt;code&gt;$location&lt;/code&gt; service makes this transparent to you.</source>
          <target state="translated">HTML5履歴APIをサポートするブラウザーの場合、 &lt;code&gt;$location&lt;/code&gt; はHTML5履歴APIを使用してパスと検索を記述します。履歴APIがブラウザーでサポートされていない場合、 &lt;code&gt;$location&lt;/code&gt; はハッシュバングURLを提供します。これにより、アプリを表示しているブラウザーが履歴APIをサポートしているかどうかを心配する必要がなくなります。 &lt;code&gt;$location&lt;/code&gt; サービスはあなたに、この透明になります。</target>
        </trans-unit>
        <trans-unit id="667b86f65118c83e9387d50ae6fab23e51925cb5" translate="yes" xml:space="preserve">
          <source>For cases where the attribute name is the same as the value you want to bind to inside the directive's scope, you can use this shorthand syntax:</source>
          <target state="translated">属性名がディレクティブのスコープ内でバインドしたい値と同じである場合には、この短縮構文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="214f9ccc5f52486bf94285f84eb26c0f1f87ae2a" translate="yes" xml:space="preserve">
          <source>For dynamically creating &lt;code&gt;href&lt;/code&gt; attributes for a tags, see the &lt;a href=&quot;nghref&quot;&gt;&lt;code&gt;ngHref&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">タグの &lt;code&gt;href&lt;/code&gt; 属性を動的に作成する方法については、&lt;a href=&quot;nghref&quot;&gt; &lt;code&gt;ngHref&lt;/code&gt; &lt;/a&gt;ディレクティブを参照してください。</target>
        </trans-unit>
        <trans-unit id="d2cb21c62c7124bee8beb4118b76b5e301e11b61" translate="yes" xml:space="preserve">
          <source>For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look like this:</source>
          <target state="translated">例えば、トランスクルージョンとアイソレーテッドスコープを使うディレクティブを考えてみましょう。DOM の階層は次のようになります。</target>
        </trans-unit>
        <trans-unit id="37c999fd77efd0888b9cb38aaca6a3de81ed8a47" translate="yes" xml:space="preserve">
          <source>For example given the following fragment of HTML</source>
          <target state="translated">例えば、次のような HTML の断片があります。</target>
        </trans-unit>
        <trans-unit id="7928c96ad76339cd8a1a495f2757512494975f25" translate="yes" xml:space="preserve">
          <source>For example if we wanted to do a CSS animation for &lt;code&gt;ngHide&lt;/code&gt; then we place an animation on the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class:</source>
          <target state="translated">たとえば、 &lt;code&gt;ngHide&lt;/code&gt; の CSSアニメーションを実行したい場合、アニメーションを &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスに配置します。</target>
        </trans-unit>
        <trans-unit id="68db25a901df945b32772fe453b1fa47d47a8252" translate="yes" xml:space="preserve">
          <source>For example if your server needs to return:</source>
          <target state="translated">例えば、サーバーが戻る必要がある場合。</target>
        </trans-unit>
        <trans-unit id="da9cd80863fc9d60fc99be6bca25f3975ab8cf3f" translate="yes" xml:space="preserve">
          <source>For example on *nix, to create an angular.js file that contains localization rules for german locale, you can do the following:</source>
          <target state="translated">例えば、*nixの場合、ドイツ語ロケールのローカライズルールを含むangular.jsファイルを作成するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="e64d608c66f058026befe85feab000c0e8eb56f7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; would result in &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; は &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8dd342ed97c8f1fdb9f8a8fbf2799eee0ccdcc8c" translate="yes" xml:space="preserve">
          <source>For example, an element acts as a loading spinner. It has an infinite css animation on it, and also an &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; directive, for which no animations are defined:</source>
          <target state="translated">たとえば、要素は読み込みスピナーとして機能します。それには無限のcssアニメーションがあり、アニメーションが定義されていない&lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;ディレクティブもあります。</target>
        </trans-unit>
        <trans-unit id="7cf18d17856b16f1490eddc7ee8f166885da6706" translate="yes" xml:space="preserve">
          <source>For example, considering this template:</source>
          <target state="translated">例えば、このテンプレートを考えてみます。</target>
        </trans-unit>
        <trans-unit id="5c917b642410469c8ea7e90f8a294d625b0e2286" translate="yes" xml:space="preserve">
          <source>For example, given &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; and directive definition of &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt;, then the isolated scope property &lt;code&gt;localModel&lt;/code&gt; will reflect the value of &lt;code&gt;parentModel&lt;/code&gt; on the parent scope. Any changes to &lt;code&gt;parentModel&lt;/code&gt; will be reflected in &lt;code&gt;localModel&lt;/code&gt;, but changes in &lt;code&gt;localModel&lt;/code&gt; will not reflect in &lt;code&gt;parentModel&lt;/code&gt;. There are however two caveats:</source>
          <target state="translated">たとえば、 &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; と &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt; ディレクティブ定義：{localModel： '&amp;lt;myAttr'}を &lt;code&gt;localModel&lt;/code&gt; すると、分離されたスコーププロパティlocalModelは、親スコープの &lt;code&gt;parentModel&lt;/code&gt; の値を反映します。変更 &lt;code&gt;parentModel&lt;/code&gt; はに反映されます &lt;code&gt;localModel&lt;/code&gt; が、変動 &lt;code&gt;localModel&lt;/code&gt; はに反映されません &lt;code&gt;parentModel&lt;/code&gt; 。ただし、2つの注意点があります。</target>
        </trans-unit>
        <trans-unit id="f49496495571ad1faf93be95dab230558d27e175" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;'internal-link'&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; が &lt;code&gt;'internal-link'&lt;/code&gt; に設定されている場合：</target>
        </trans-unit>
        <trans-unit id="c8160364ec09deefcb004bae9314f54d4f6ba323" translate="yes" xml:space="preserve">
          <source>For example, if an input control is added that is already &lt;code&gt;$dirty&lt;/code&gt; and has &lt;code&gt;$error&lt;/code&gt; properties, calling &lt;code&gt;$setDirty()&lt;/code&gt; and &lt;code&gt;$validate()&lt;/code&gt; afterwards will propagate the state to the parent form.</source>
          <target state="translated">たとえば、すでに &lt;code&gt;$dirty&lt;/code&gt; 、 &lt;code&gt;$error&lt;/code&gt; プロパティを持つ入力コントロールが追加された場合、 &lt;code&gt;$setDirty()&lt;/code&gt; および &lt;code&gt;$validate()&lt;/code&gt; 呼び出すと、状態が親フォームに伝播されます。</target>
        </trans-unit>
        <trans-unit id="4100a3af8d122712b1181599580e9e97e167970c" translate="yes" xml:space="preserve">
          <source>For example, it can be used for specifying the &quot;Accept&quot; header that is sent to the server, when requesting a template.</source>
          <target state="translated">例えば、テンプレートをリクエストする際に、サーバに送信する &quot;Accept &quot;ヘッダを指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b6c81880bfa28e2a7d53ec485327343074412001" translate="yes" xml:space="preserve">
          <source>For example, routes like &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; will match &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; and extract:</source>
          <target state="translated">たとえば、 &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; ようなルートは、 &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; editに一致して抽出します。</target>
        </trans-unit>
        <trans-unit id="1b54425e1ee99911055acc84ab0ce4f407e3493d" translate="yes" xml:space="preserve">
          <source>For example, the following forms are all equivalent and match the &lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt;&lt;code&gt;ngBind&lt;/code&gt;&lt;/a&gt; directive:</source>
          <target state="translated">たとえば、次の形式はすべて同等であり、&lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt; &lt;code&gt;ngBind&lt;/code&gt; &lt;/a&gt;ディレクティブと一致します。</target>
        </trans-unit>
        <trans-unit id="8a1d556c82b4cdccf6ac8ff718e0e8e16f73d570" translate="yes" xml:space="preserve">
          <source>For example, the parameter &lt;code&gt;_myService_&lt;/code&gt; would be resolved as the reference &lt;code&gt;myService&lt;/code&gt;. Since it is available in the function body as &lt;code&gt;_myService_&lt;/code&gt;, we can then assign it to a variable defined in an outer scope.</source>
          <target state="translated">たとえば、パラメーター &lt;code&gt;_myService_&lt;/code&gt; は、参照 &lt;code&gt;myService&lt;/code&gt; として解決されます。関数本体では &lt;code&gt;_myService_&lt;/code&gt; として使用できるため、外部スコープで定義された変数に割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="0c9ab0c654c0f4dd1405a9253a4855d8cd4a37ec" translate="yes" xml:space="preserve">
          <source>For example, the transclude object &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; maps &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; elements to the &lt;code&gt;slotA&lt;/code&gt; slot, which can be accessed via the &lt;code&gt;$transclude&lt;/code&gt; function or via the &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">たとえば、 &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; オブジェクト{slotA： '？myCustomElement'}は、 &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;slotA&lt;/code&gt; スロットにマップします。これは、 &lt;code&gt;$transclude&lt;/code&gt; &lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt;関数またはngTranscludeディレクティブを介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="63e8ba7e3633e731a37f59a5f71a0246863d5260" translate="yes" xml:space="preserve">
          <source>For example, these are valid expressions in AngularJS:</source>
          <target state="translated">例えば、これらはAngularJSで有効な式です。</target>
        </trans-unit>
        <trans-unit id="96705da955a8375dd1945d20693b46a51ee66c61" translate="yes" xml:space="preserve">
          <source>For example, to bind to &lt;code&gt;viewBox&lt;/code&gt;, we can write:</source>
          <target state="translated">たとえば、 &lt;code&gt;viewBox&lt;/code&gt; にバインドするには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="0ccfc76b489a9482967cab3c080c55bf14ba5ead" translate="yes" xml:space="preserve">
          <source>For example, we could fix the example above by instead writing:</source>
          <target state="translated">例えば、上記の例を、代わりに書くことで修正することができます。</target>
        </trans-unit>
        <trans-unit id="e7d01ec6314e26035b376c51a5d51073e752c597" translate="yes" xml:space="preserve">
          <source>For example, you can specify a new &lt;code&gt;update&lt;/code&gt; action that uses the &lt;code&gt;PUT&lt;/code&gt; HTTP verb:</source>
          <target state="translated">たとえば、 &lt;code&gt;PUT&lt;/code&gt; HTTP動詞を使用する新しい &lt;code&gt;update&lt;/code&gt; アクションを指定できます。</target>
        </trans-unit>
        <trans-unit id="24b9b4933809e915effa8985612fb6a246c52bde" translate="yes" xml:space="preserve">
          <source>For example, you should not use interpolation in the value of the &lt;code&gt;style&lt;/code&gt; attribute (e.g. &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt;) &lt;strong&gt;and&lt;/strong&gt; at the same time use a directive that changes the content of that attribute, such as &lt;code&gt;ngStyle&lt;/code&gt;.</source>
          <target state="translated">たとえば、あなたがの値で補間を使用すべきではありません &lt;code&gt;style&lt;/code&gt; 属性（例： &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt; ）&lt;strong&gt;と&lt;/strong&gt;同じ時間の使用で、 &lt;code&gt;ngStyle&lt;/code&gt; など、その属性のコンテンツを変更するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="3d34c040e0936e358901f3aa689af5cf27ff974b" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed802f940e232dd5f65c3ca8779aee1a29358982" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;album in artist.albums&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;album in artist.albums&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="681d399129810dbe00c67bb783ff5c6fc3cb9abd" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; .</source>
          <target state="translated">次に例を示し &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3361e3ce4a7b68bb7099adb908017c58b77d7659" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter:x as results&lt;/code&gt; will store the fragment of the repeated items as &lt;code&gt;results&lt;/code&gt;, but only after the items have been processed through the filter.</source>
          <target state="translated">次に例を示し &lt;code&gt;item in items | filter:x as results&lt;/code&gt; 繰り返すアイテムの断片格納する &lt;code&gt;results&lt;/code&gt; 、のみアイテム後フィルタを通して処理されています。</target>
        </trans-unit>
        <trans-unit id="94485d1a8b6086205e13bc75af843d115c8cdeb9" translate="yes" xml:space="preserve">
          <source>For extra convenience, &lt;code&gt;whenRoute&lt;/code&gt; and &lt;code&gt;expectRoute&lt;/code&gt; shortcuts are available. These methods offer colon delimited matching of the url path, ignoring the query string and trailing slashes. This allows declarations similar to how application routes are configured with &lt;code&gt;$routeProvider&lt;/code&gt;. Because these methods convert the definition url to regex, declaration order is important. Combined with query parameter parsing, the following is possible:</source>
          <target state="translated">利便性を &lt;code&gt;whenRoute&lt;/code&gt; ため、whenRouteおよび &lt;code&gt;expectRoute&lt;/code&gt; ショートカットを使用できます。これらのメソッドは、クエリ文字列と末尾のスラッシュを無視して、URLパスのコロン区切りのマッチングを提供します。これにより、 &lt;code&gt;$routeProvider&lt;/code&gt; 使用してアプリケーションルートを構成する方法と同様の宣言が可能になります。これらのメソッドは定義URLを正規表現に変換するため、宣言の順序が重要です。クエリパラメータの解析と組み合わせると、次のことが可能になります。</target>
        </trans-unit>
        <trans-unit id="072be915c36eea0008ba664485e0bec787e012a1" translate="yes" xml:space="preserve">
          <source>For folks with a jQuery background</source>
          <target state="translated">jQueryのバックグラウンドをお持ちの方へ</target>
        </trans-unit>
        <trans-unit id="d4be5a755dc40ef55c3ed316c05fba77165d707c" translate="yes" xml:space="preserve">
          <source>For further information check out the guide on &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;Matching Directives&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;マッチングディレクティブに関する&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4ec6b925164277672546a7d8d723f7a6f4124b26" translate="yes" xml:space="preserve">
          <source>For further information check out the guide on &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;Matching Directives&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;マッチングディレクティブ&lt;/a&gt;のガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4b43ddc504c929290eacba4d8a365ed1210996ec" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also flush non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">歴史的な理由により、このメソッドは&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;および&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsyncを&lt;/a&gt;介してスケジュールされた&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; promiseやタスクなど、 &lt;code&gt;$timeout&lt;/code&gt; 保留中のタスクもフラッシュします。</target>
        </trans-unit>
        <trans-unit id="96d5709584b09a9673009d4b874368aa832eb8de" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also verify non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as pending &lt;a href=&quot;../../ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; requests, in-progress &lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; transitions, unresolved &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">歴史的な理由から、このメソッドは、保留中の&lt;a href=&quot;../../ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;リクエスト、進行中の&lt;a href=&quot;../../ngroute/service/%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt;遷移、未解決の&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt; promise&lt;/a&gt;および&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;と$ evalAsyncを介してスケジュールされたタスクなど、 &lt;code&gt;$timeout&lt;/code&gt; 保留中のタスクも検証します。</target>
        </trans-unit>
        <trans-unit id="e79547ae737496ef4b830c418e98203529ffd5b3" translate="yes" xml:space="preserve">
          <source>For in-depth discussion about DI, see &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; at Wikipedia, &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control&lt;/a&gt; by Martin Fowler, or read about DI in your favorite software design pattern book.</source>
          <target state="translated">DIの詳細については、Wikipediaの&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt;、Martin Fowlerによる&lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Controlを参照&lt;/a&gt;するか、お気に入りのソフトウェア設計パターンブックでDIについて読んでください。</target>
        </trans-unit>
        <trans-unit id="325851ef53ccfda4a45fa92ff787b47ce95a55db" translate="yes" xml:space="preserve">
          <source>For in-depth discussion about DI, see &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; at Wikipedia, &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control&lt;/a&gt; by Martin Fowler, or read about DI in your favorite software design pattern book.</source>
          <target state="translated">DIの詳細については、ウィキペディアの&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;依存性注入&lt;/a&gt;、Martin Fowlerによる&lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;制御の反転を&lt;/a&gt;参照するか、お気に入りのソフトウェアデザインパターンブックでDIについて読んでください。</target>
        </trans-unit>
        <trans-unit id="4c4430f0a9c683776764888172731ad0be5f3a21" translate="yes" xml:space="preserve">
          <source>For information on how the compiler works, see the &lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTML Compiler&lt;/a&gt; section of the Developer Guide.</source>
          <target state="translated">コンパイラーの動作については、開発者ガイドの&lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTMLコンパイラーの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fcbd9cf327acae20f4980fb68635ba5be10e8a9e" translate="yes" xml:space="preserve">
          <source>For instance in a long running Single Page Application (SPA), one user may &quot;log out&quot;, but then another user may access the application without refreshing, in which case all the cached data is still available.</source>
          <target state="translated">例えば、長時間稼働しているシングルページアプリケーション(SPA)では、あるユーザが「ログアウト」しても、別のユーザがリフレッシュせずにアプリケーションにアクセスしても、キャッシュされたデータはすべて利用可能です。</target>
        </trans-unit>
        <trans-unit id="9c5ae6d931fb112afe199ee277a04174d9d1b69e" translate="yes" xml:space="preserve">
          <source>For instance, the required directive does this to work out if the input has data or not.</source>
          <target state="translated">例えば、入力がデータを持っているかどうかを調べるために、 required ディレクティブはこのようにしています。</target>
        </trans-unit>
        <trans-unit id="1ed68e337042bafa1e8676ab786bd6c545ca56f2" translate="yes" xml:space="preserve">
          <source>For instance, what if we wanted to create a directive that lets a user drag an element?</source>
          <target state="translated">例えば、ユーザが要素をドラッグできるようなディレクティブを作りたいとしたらどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="83e081f1429ea35f9cc98daf2caa2c7900084512" translate="yes" xml:space="preserve">
          <source>For more about how to configure services, see &lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;Provider Recipe&lt;/a&gt;.</source>
          <target state="translated">サービスの構成方法の詳細については、&lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;プロバイダーのレシピを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c9f8258461de9d031c72dc478ab759f9f3d6a71" translate="yes" xml:space="preserve">
          <source>For more details on the &lt;code&gt;link&lt;/code&gt; option refer to the &lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; オプションの詳細については、&lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="03fb612774d8f4c26b5bffdddde2f8da0d09c268" translate="yes" xml:space="preserve">
          <source>For more details, please refer to our &lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;design doc&lt;/a&gt;. You can read more about the ICU MessageFormat syntax at &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;Formatting Messages | ICU User Guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;設計ドキュメント&lt;/a&gt;を参照してください。ICU MessageFormat構文の詳細については、&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;メッセージのフォーマット| ICUユーザーガイド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6b5d56555aab13e3ab69162ff339401d9009f51" translate="yes" xml:space="preserve">
          <source>For more examples, and an in-depth guide, see the &lt;a href=&quot;../../../guide/component&quot;&gt;component guide&lt;/a&gt;.</source>
          <target state="translated">その他の例と詳細なガイドについては、&lt;a href=&quot;../../../guide/component&quot;&gt;コンポーネントガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e45ef233283f4eb561fb40a1c85a858803109abf" translate="yes" xml:space="preserve">
          <source>For more information about how AngularJS filters work, and how to create your own filters, see &lt;a href=&quot;../../../guide/filter&quot;&gt;Filters&lt;/a&gt; in the AngularJS Developer Guide.</source>
          <target state="translated">AngularJSが作業をフィルタリングし、独自のフィルタを作成する方法方法の詳細については、&lt;a href=&quot;../../../guide/filter&quot;&gt;フィルタ&lt;/a&gt; AngularJS開発者ガイドを。</target>
        </trans-unit>
        <trans-unit id="b5c7cb088f3bf1b4252226980a33761384c56cfe" translate="yes" xml:space="preserve">
          <source>For more information on Protractor, view &lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;getting started&lt;/a&gt; or the &lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;api docs&lt;/a&gt;.</source>
          <target state="translated">分度器の詳細については、&lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;はじめに&lt;/a&gt;または&lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;APIドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="0f69dd7fc3c71f3f0a9159c16aeda75238563b96" translate="yes" xml:space="preserve">
          <source>For more information on Protractor, view &lt;a href=&quot;https://angular.github.io/protractor/#/getting-started&quot;&gt;getting started&lt;/a&gt; or the &lt;a href=&quot;https://angular.github.io/protractor/#/api&quot;&gt;api docs&lt;/a&gt;.</source>
          <target state="translated">分度器の詳細については、&lt;a href=&quot;https://angular.github.io/protractor/#/getting-started&quot;&gt;はじめに&lt;/a&gt;または&lt;a href=&quot;https://angular.github.io/protractor/#/api&quot;&gt;apiドキュメントを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7d9777dd9e23921be5e65fe03cbf4547e45948c" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;アクセスしてください。</target>
        </trans-unit>
        <trans-unit id="5007e5f43b46ae511f7cfe86c43883e38fb85306" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;Web Storage Security&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;Web Storage Security&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="17050d011e437da353406dbb3de303d540a80ce8" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../../../guide/%24location&quot;&gt;Developer Guide: Using $location&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../guide/%24location&quot;&gt;開発者ガイド：$ locationの使用を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="d42a33c1c8d9f173d6a9033c03f236de6cab9c91" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;../../../guide/bootstrap&quot;&gt;Bootstrap guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../guide/bootstrap&quot;&gt;ブートストラップガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84f28113af9b7c7d485ded6f76a10650aebf1bfa" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DI Guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DIガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9ec0f18a27efe3a5bbaaa7c9a76fdead7442a493" translate="yes" xml:space="preserve">
          <source>For more on dependencies, see the &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; docs.</source>
          <target state="translated">依存関係の詳細については、&lt;a href=&quot;di&quot;&gt;依存関係注入の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ae1dd7c814f6a02ea749e951d697e01de287e16d" translate="yes" xml:space="preserve">
          <source>For more on the &lt;code&gt;restrict&lt;/code&gt; property, see the &lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;API docs&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;restrict&lt;/code&gt; プロパティを参照してください&lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;APIドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="08deef231a5f13117b873e36e123085e74358098" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt; &lt;/a&gt;ドキュメントページを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b9e3aa3cc39fa5b8b3356d069b3b85b223b9d68" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt;&lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt; &lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt; の&lt;/a&gt;ドキュメントページを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb0970fb80040dd5e4119122a4b3d870ad0ab13b" translate="yes" xml:space="preserve">
          <source>For mutations to be properly observed, you should make them only within the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope.$apply()&lt;/a&gt;. AngularJS APIs do this implicitly, so no extra &lt;code&gt;$apply&lt;/code&gt; call is needed when doing synchronous work in controllers, or asynchronous work with &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$http&lt;/a&gt;, &lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; or &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$interval&lt;/a&gt; services.</source>
          <target state="translated">変異が適切に観察されるようにするには、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope。$ apply（）&lt;/a&gt;内でのみ変異を作成する必要があります。AngularJS APIはこれを暗黙的に実行するため、コントローラーで同期作業を行う場合、または&lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$ http&lt;/a&gt;、&lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$ timeout、&lt;/a&gt;または&lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$ interval&lt;/a&gt;サービスで非同期作業を行う場合、追加の &lt;code&gt;$apply&lt;/code&gt; 呼び出しは必要ありません。</target>
        </trans-unit>
        <trans-unit id="70cabd8c2e94395b437f880992a54a0646b1ec62" translate="yes" xml:space="preserve">
          <source>For ngAria to do its magic, simply include the module &lt;code&gt;ngAria&lt;/code&gt; as a dependency. The following directives are supported: &lt;code&gt;ngModel&lt;/code&gt;, &lt;code&gt;ngChecked&lt;/code&gt;, &lt;code&gt;ngReadonly&lt;/code&gt;, &lt;code&gt;ngRequired&lt;/code&gt;, &lt;code&gt;ngValue&lt;/code&gt;, &lt;code&gt;ngDisabled&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt;, &lt;code&gt;ngClick&lt;/code&gt;, &lt;code&gt;ngDblClick&lt;/code&gt;, and &lt;code&gt;ngMessages&lt;/code&gt;.</source>
          <target state="translated">ngAriaが魔法をかけるには、依存関係としてモジュール &lt;code&gt;ngAria&lt;/code&gt; を含めるだけです。次のディレクティブがサポートされています： &lt;code&gt;ngModel&lt;/code&gt; 、 &lt;code&gt;ngChecked&lt;/code&gt; 、 &lt;code&gt;ngReadonly&lt;/code&gt; 、 &lt;code&gt;ngRequired&lt;/code&gt; 、 &lt;code&gt;ngValue&lt;/code&gt; 、 &lt;code&gt;ngDisabled&lt;/code&gt; 、 &lt;code&gt;ngShow&lt;/code&gt; 、 &lt;code&gt;ngHide&lt;/code&gt; 、 &lt;code&gt;ngClick&lt;/code&gt; 、 &lt;code&gt;ngDblClick&lt;/code&gt; 、および &lt;code&gt;ngMessages&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7935b6948cbce976a835b91d5bd505582812c0c4" translate="yes" xml:space="preserve">
          <source>For purposes of global error handling, authentication, or any kind of synchronous or asynchronous pre-processing of request or postprocessing of responses, it is desirable to be able to intercept requests before they are handed to the server and responses before they are handed over to the application code that initiated these requests. The interceptors leverage the &lt;a href=&quot;%24q&quot;&gt;promise APIs&lt;/a&gt; to fulfill this need for both synchronous and asynchronous pre-processing.</source>
          <target state="translated">グローバルエラー処理、認証、または要求の同期または非同期の前処理または応答の後処理のために、サーバーに渡される前に要求を、渡される前に応答をインターセプトできることが望ましいこれらの要求を開始したアプリケーションコード。インターセプターは、&lt;a href=&quot;%24q&quot;&gt;Promise API&lt;/a&gt;を利用して、同期および非同期の両方の前処理に対するこのニーズを満たします。</target>
        </trans-unit>
        <trans-unit id="b64ebc99af83053596191ba8428a4a73a05f9e05" translate="yes" xml:space="preserve">
          <source>For testing AngularJS applications there are certain tools that you should use that will make testing much easier to set up and run.</source>
          <target state="translated">AngularJSアプリケーションのテストには、テストのセットアップと実行をより簡単にするツールがあります。</target>
        </trans-unit>
        <trans-unit id="a0981365eff2fc36be0abaf1d7aab40944bee960" translate="yes" xml:space="preserve">
          <source>For the best result, the &lt;code&gt;angular.js&lt;/code&gt; script must be loaded in the head section of the html document; alternatively, the css rule above must be included in the external stylesheet of the application.</source>
          <target state="translated">最良の結果を得るには、htmlドキュメントのheadセクションに &lt;code&gt;angular.js&lt;/code&gt; スクリプトをロードする必要があります。または、上記のcssルールをアプリケーションの外部スタイルシートに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="1cbfa677b41097f6715ec9bae88d486586566c4e" translate="yes" xml:space="preserve">
          <source>For the case of HTML, you might use a library, either on the client side, or on the server side, to sanitize unsafe HTML before binding to the value and rendering it in the document.</source>
          <target state="translated">HTMLの場合は、クライアント側でもサーバ側でもライブラリを使って、安全でないHTMLを値にバインドしてドキュメントでレンダリングする前にサニタイズすることがあります。</target>
        </trans-unit>
        <trans-unit id="807df2e76c7472af78eccb593edb0cfe6ff5aaf1" translate="yes" xml:space="preserve">
          <source>For the following examples, we'll use the prefix &lt;code&gt;my&lt;/code&gt; (e.g. &lt;code&gt;myCustomer&lt;/code&gt;).</source>
          <target state="translated">次の例では、接頭辞 &lt;code&gt;my&lt;/code&gt; を使用します（例： &lt;code&gt;myCustomer&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="960d746344ec6d94fdf45b4493cec7cf2ec6fcad" translate="yes" xml:space="preserve">
          <source>For the general details about this service in AngularJS, read the main page for &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">AngularJSでのこのサービスの一般的な詳細については、&lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping（SCE）の&lt;/a&gt;メインページを参照してください。</target>
        </trans-unit>
        <trans-unit id="18276b32129c935a3f68b3699c65cc3ed663b628" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS prevents the default action (form submission to the server) unless the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element has an &lt;code&gt;action&lt;/code&gt; attribute specified.</source>
          <target state="translated">このため、AngularJSは、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素に &lt;code&gt;action&lt;/code&gt; 属性が指定されていない限り、デフォルトのアクション（サーバーへのフォーム送信）を防止します。</target>
        </trans-unit>
        <trans-unit id="59a0dc0f6babb8c929909c5324c52ffba8f70e1b" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS provides special &lt;code&gt;ng&lt;/code&gt;-prefixed directives for the following boolean attributes: &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;&lt;code&gt;disabled&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;&lt;code&gt;required&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt;&lt;code&gt;selected&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;&lt;code&gt;readOnly&lt;/code&gt;&lt;/a&gt; , and &lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この理由から、AngularJSは次のブール属性に対して特別な &lt;code&gt;ng&lt;/code&gt; -prefixedディレクティブを提供します：&lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt; &lt;code&gt;disabled&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt; &lt;code&gt;required&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt; &lt;code&gt;selected&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt; &lt;code&gt;checked&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt; &lt;code&gt;readOnly&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3230a2f947a8018219006b3929f539fd927003d2" translate="yes" xml:space="preserve">
          <source>For this, inject a dependency with the name &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; into your controller/service/directive. E.g. a filter called &lt;code&gt;number&lt;/code&gt; is injected by using the dependency &lt;code&gt;numberFilter&lt;/code&gt;. The injected argument is a function that takes the value to format as first argument, and filter parameters starting with the second argument.</source>
          <target state="translated">このため、 &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; という名前の依存関係をコントローラー/サービス/ディレクティブに挿入します。たとえば、依存関係 &lt;code&gt;numberFilter&lt;/code&gt; を使用して、 &lt;code&gt;number&lt;/code&gt; というフィルターを挿入します。注入された引数は、最初の引数としてフォーマットする値を取り、2番目の引数で始まるパラメーターをフィルター処理する関数です。</target>
        </trans-unit>
        <trans-unit id="79c0422145c2571f4818e372784001318ee45548" translate="yes" xml:space="preserve">
          <source>For those elements using ngModel, ngAria will dynamically bind and update the following ARIA attributes (if they have not been explicitly specified by the developer):</source>
          <target state="translated">ngModel を使用している要素に対して、ngAria は以下の ARIA 属性を動的にバインドして更新します(開発者によって明示的に指定されていない場合)。</target>
        </trans-unit>
        <trans-unit id="5364d19c24f92cd90b7c73685bff662a0a4cfa1a" translate="yes" xml:space="preserve">
          <source>For unit testing applications that use &lt;code&gt;$http&lt;/code&gt; service, see &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; サービスを使用する単体テストアプリケーションについては、&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$ httpBackend mockを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="052fb3b37ae2bbf010c88dd3bc6c08df91652edd" translate="yes" xml:space="preserve">
          <source>Forgiving</source>
          <target state="translated">Forgiving</target>
        </trans-unit>
        <trans-unit id="abc67155e14921e60c9bacfaf13e79f8e7ecfc81" translate="yes" xml:space="preserve">
          <source>Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error. Keep in mind that while client-side validation plays an important role in providing good user experience, it can easily be circumvented and thus can not be trusted. Server-side validation is still necessary for a secure application.</source>
          <target state="translated">フォームとコントロールは検証サービスを提供し、フォームを送信する前に無効な入力をユーザーに通知することができます。ユーザーはエラーを修正する方法について即座にフィードバックを得ることができるので、サーバーサイドのバリデーションだけで行うよりも優れたユーザーエクスペリエンスを提供します。クライアントサイドバリデーションは良いユーザーエクスペリエンスを提供する上で重要な役割を果たしていますが、簡単に回避することができるため、信頼できないことを覚えておいてください。サーバーサイドの検証は、安全なアプリケーションにはまだ必要です。</target>
        </trans-unit>
        <trans-unit id="1eedca47903886a532d39ee2257b013bc5c557cd" translate="yes" xml:space="preserve">
          <source>Format input &amp;mdash; Use &lt;a href=&quot;forms&quot;&gt;AngularJS form controls&lt;/a&gt; instead.</source>
          <target state="translated">入力のフォーマット&amp;mdash; 代わりに&lt;a href=&quot;forms&quot;&gt;AngularJSフォームコントロールを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b9fd294ed8b67f7239254353f7b9ddfee62002f1" translate="yes" xml:space="preserve">
          <source>Format of items in &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt;/&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklist&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt; / &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklistの&lt;/a&gt;アイテムの形式</target>
        </trans-unit>
        <trans-unit id="d29adb3f4ca339ebdff8dbe1aaae081f33e02725" translate="yes" xml:space="preserve">
          <source>Format of items in &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt;/&lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;TrustedResourceUrlList&lt;/a&gt; / &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt;内のアイテムの形式</target>
        </trans-unit>
        <trans-unit id="8e17b9df66528716e814be197136b7a326516c1c" translate="yes" xml:space="preserve">
          <source>Formats &lt;code&gt;date&lt;/code&gt; to a string based on the requested &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">フォーマットの &lt;code&gt;date&lt;/code&gt; 、要求に基づいて、文字列に &lt;code&gt;format&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb856525f448d550db676ecb20ddcdce2f9183a5" translate="yes" xml:space="preserve">
          <source>Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.</source>
          <target state="translated">数値を通貨としてフォーマットします (例:$1,234.56)。通貨記号を指定しない場合は、現在のロケールのデフォルト記号を使用します。</target>
        </trans-unit>
        <trans-unit id="69675ca3093ae5e95c7f23454bbb0ec2a3e3a132" translate="yes" xml:space="preserve">
          <source>Formats a number as text.</source>
          <target state="translated">数値をテキストとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="43567c9dea743d47cb7123053dbe369243a548e8" translate="yes" xml:space="preserve">
          <source>Formatted number.</source>
          <target state="translated">フォーマットされた番号。</target>
        </trans-unit>
        <trans-unit id="a511d54043ebc3e9c36c28add78796a0f3f9f424" translate="yes" xml:space="preserve">
          <source>Formatted string or the input if input is not recognized as date/millis.</source>
          <target state="translated">入力がdate/millisとして認識されない場合は、フォーマットされた文字列または入力。</target>
        </trans-unit>
        <trans-unit id="feaca5c695540ca4a17380a6775827911844a0ef" translate="yes" xml:space="preserve">
          <source>Formatters are used to format / convert the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;&lt;code&gt;$modelValue&lt;/code&gt;&lt;/a&gt; for display in the control.</source>
          <target state="translated">フォーマッターは、コントロールに表示する&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt; &lt;code&gt;$modelValue&lt;/code&gt; &lt;/a&gt;をフォーマット/変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e6e18ee88ca6b32cea05d0e3080d8f655d9521b6" translate="yes" xml:space="preserve">
          <source>Formatting rules (see Description). If not specified, &lt;code&gt;mediumDate&lt;/code&gt; is used.</source>
          <target state="translated">書式設定ルール（説明を参照）。指定しない場合は、 &lt;code&gt;mediumDate&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="3f0b06a027f8381260596b559c5a0e8d57007109" translate="yes" xml:space="preserve">
          <source>Formatting the value of time and datetime-local</source>
          <target state="translated">時刻とdatetime-localの値の書式設定</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="34e426cd3274227d580489998337e732030d7d3c" translate="yes" xml:space="preserve">
          <source>Free Course</source>
          <target state="translated">フリーコース</target>
        </trans-unit>
        <trans-unit id="b1cc7a14b45bb59084312de228fdaae722b439c3" translate="yes" xml:space="preserve">
          <source>From a testability point of view, the separation of the controller and the view is desirable, because it allows us to test the behavior without being distracted by the rendering details.</source>
          <target state="translated">テスト性の観点からは、コントローラとビューを分離することが望ましいです。</target>
        </trans-unit>
        <trans-unit id="ff161838502e7c8b317b65fb969c906dab1f4586" translate="yes" xml:space="preserve">
          <source>From the perspective of dealing with error handling, deferred and promise APIs are to asynchronous programming what &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt; keywords are to synchronous programming.</source>
          <target state="translated">エラー処理を処理する観点から見ると、据え置きAPIとプロミスAPIは非同期プログラミングであり、 &lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、および &lt;code&gt;throw&lt;/code&gt; キーワードは同期プログラミングです。</target>
        </trans-unit>
        <trans-unit id="d73e691376909588e8dda5cc25ad70145db6e2ea" translate="yes" xml:space="preserve">
          <source>Fulfills multiple requests</source>
          <target state="translated">複数のリクエストに対応</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="7e9e8ac7651cc9a1d61043f76ffdf8a16490138a" translate="yes" xml:space="preserve">
          <source>Function components in ng</source>
          <target state="translated">ngの機能構成要素</target>
        </trans-unit>
        <trans-unit id="299be8740244752c39ca3ccf8a970cee133c25c2" translate="yes" xml:space="preserve">
          <source>Function components in ngMock</source>
          <target state="translated">ngMockの関数コンポーネント</target>
        </trans-unit>
        <trans-unit id="c76a84b175d34bf214149af2c9e8f9e13e2e4fcc" translate="yes" xml:space="preserve">
          <source>Function for creating new instance of the service.</source>
          <target state="translated">サービスのインスタンスを新規作成するための関数です。</target>
        </trans-unit>
        <trans-unit id="7090d50b6c70bb19d3d516b59283dff809cdae61" translate="yes" xml:space="preserve">
          <source>Function for which dependent service names need to be retrieved as described above.</source>
          <target state="translated">上記のように依存するサービス名を取得する必要がある関数。</target>
        </trans-unit>
        <trans-unit id="c4ac49e1d1511eed6fbb89bab7baa0e4b33a477d" translate="yes" xml:space="preserve">
          <source>Function that will be called whenever the interpolated value of the attribute changes. See the &lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;Interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">属性の補間値が変更されるたびに呼び出される関数。詳細については、&lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b463c12a5f308c5c4aafc3e574eff48f177aef97" translate="yes" xml:space="preserve">
          <source>Function that wraps the &lt;code&gt;fn&lt;/code&gt; with all the specified bindings.</source>
          <target state="translated">指定されたすべてのバインディングで &lt;code&gt;fn&lt;/code&gt; をラップする関数。</target>
        </trans-unit>
        <trans-unit id="fca9f3655fbd49d7d73e9fc899dae1611e2d1e66" translate="yes" xml:space="preserve">
          <source>Function to be bound.</source>
          <target state="translated">拘束される関数。</target>
        </trans-unit>
        <trans-unit id="719583f650cbb51ca93d209fd7733efacca091e6" translate="yes" xml:space="preserve">
          <source>Function to call when the event is emitted.</source>
          <target state="translated">イベントが発生したときに呼び出す関数です。</target>
        </trans-unit>
        <trans-unit id="195099197fbc90af0bf8f3534cf2c2ffbe52076f" translate="yes" xml:space="preserve">
          <source>Function which is responsible for resolving or rejecting the newly created promise. The first parameter is a function which resolves the promise, the second parameter is a function which rejects the promise.</source>
          <target state="translated">新しく作成されたプロミスの解決または拒否を行う関数。最初のパラメータはプロミスを解決する関数で、2番目のパラメータはプロミスを拒否する関数です。</target>
        </trans-unit>
        <trans-unit id="dbcc17581b648df6a6e5ecca84fd052cd7f998ad" translate="yes" xml:space="preserve">
          <source>Fundamentals in 60 Minutes (video)</source>
          <target state="translated">60分でわかる基礎知識(ビデオ</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="03be4828bd04065e742a929df12bd3febf535195" translate="yes" xml:space="preserve">
          <source>Future route information.</source>
          <target state="translated">今後のルート情報。</target>
        </trans-unit>
        <trans-unit id="4f00f495f1b31beea48aec4250e15a8cb8f378e0" translate="yes" xml:space="preserve">
          <source>Games and GUI editors are examples of applications with intensive and tricky DOM manipulation. These kinds of apps are different from CRUD apps, and as a result are probably not a good fit for AngularJS. In these cases it may be better to use a library with a lower level of abstraction, such as &lt;code&gt;jQuery&lt;/code&gt;.</source>
          <target state="translated">ゲームおよびGUIエディターは、集中的でトリッキーなDOM操作を行うアプリケーションの例です。これらの種類のアプリはCRUDアプリとは異なり、その結果、おそらくAngularJSには適していません。このような場合は、 &lt;code&gt;jQuery&lt;/code&gt; など、抽象度の低いライブラリを使用する方がよい場合があります。</target>
        </trans-unit>
        <trans-unit id="8a754c61c2ced0c5ff79a1827e02c9d643d6d926" translate="yes" xml:space="preserve">
          <source>Gender</source>
          <target state="translated">Gender</target>
        </trans-unit>
        <trans-unit id="022ad2aec8e03d3aeffcc6353469c736894859fc" translate="yes" xml:space="preserve">
          <source>Gender (aka select) Syntax</source>
          <target state="translated">性別(別名セレクト)構文</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="37a13a917db9fd6aaad1b1420d262dd85b0845b4" translate="yes" xml:space="preserve">
          <source>General Learning Resources</source>
          <target state="translated">一般的な学習リソース</target>
        </trans-unit>
        <trans-unit id="fbfff011ffdaef489b35073be8fbf243896fd8d0" translate="yes" xml:space="preserve">
          <source>General Use</source>
          <target state="translated">一般的な使用</target>
        </trans-unit>
        <trans-unit id="ed7feb5b4fe5b0b70af5a852a8c4193e523ae7ea" translate="yes" xml:space="preserve">
          <source>General overview of the API</source>
          <target state="translated">APIの概要</target>
        </trans-unit>
        <trans-unit id="098a776c18aed363a9dd217893658630e8cd72e8" translate="yes" xml:space="preserve">
          <source>General usage</source>
          <target state="translated">一般的な使用法</target>
        </trans-unit>
        <trans-unit id="8245f1469399dc21184c708cfafeb02fe22720e6" translate="yes" xml:space="preserve">
          <source>Get access to a cache object by the &lt;code&gt;cacheId&lt;/code&gt; used when it was created.</source>
          <target state="translated">作成時に使用された &lt;code&gt;cacheId&lt;/code&gt; によってキャッシュオブジェクトへのアクセスを取得します。</target>
        </trans-unit>
        <trans-unit id="e2634d2ab675dfb52782612c8c407712d90ab4ae" translate="yes" xml:space="preserve">
          <source>Get information about all the caches that have been created</source>
          <target state="translated">作成されたすべてのキャッシュの情報を取得する</target>
        </trans-unit>
        <trans-unit id="b7660cf3196f07e0a3ec7d200a945203c052a995" translate="yes" xml:space="preserve">
          <source>Getter and setter methods</source>
          <target state="translated">ゲッターとセッターのメソッド</target>
        </trans-unit>
        <trans-unit id="9633645141a566c014c4723a2e74a10b5b9548d9" translate="yes" xml:space="preserve">
          <source>Getters (calls to methods without parameters) return decoded values for the following methods &lt;code&gt;path()&lt;/code&gt;, &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;hash()&lt;/code&gt;.</source>
          <target state="translated">ゲッター（パラメーターなしのメソッドの呼び出し）は、次のメソッドのデコードされた値を返します &lt;code&gt;path()&lt;/code&gt; 、 &lt;code&gt;search()&lt;/code&gt; 、 &lt;code&gt;hash()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="125fce7f6e4e46718b4324a9e531f51dac5b5239" translate="yes" xml:space="preserve">
          <source>Gitter</source>
          <target state="translated">Gitter</target>
        </trans-unit>
        <trans-unit id="8f89c3a7b049617c085d0669638c1304642c269d" translate="yes" xml:space="preserve">
          <source>Give your directive the &lt;code&gt;terminal&lt;/code&gt; property and a higher priority than directives that should not be compiled twice. In the example, the compiler will only compile directives which have a priority of 100 or higher.</source>
          <target state="translated">ディレクティブに &lt;code&gt;terminal&lt;/code&gt; プロパティを指定し、2回コンパイルしないでください。この例では、コンパイラーは優先順位が100以上のディレクティブのみをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="a4944830e9ab64a911c6a61e799488b1d408b662" translate="yes" xml:space="preserve">
          <source>Given a function, the injector can infer the names of the services to inject by examining the function declaration and extracting the parameter names. In the above example, &lt;code&gt;$scope&lt;/code&gt; and &lt;code&gt;greeter&lt;/code&gt; are two services which need to be injected into the function.</source>
          <target state="translated">関数を指定すると、インジェクターは、関数宣言を調べてパラメーター名を抽出することにより、注入するサービスの名前を推測できます。上記の例では、 &lt;code&gt;$scope&lt;/code&gt; と &lt;code&gt;greeter&lt;/code&gt; は、関数に注入する必要がある2つのサービスです。</target>
        </trans-unit>
        <trans-unit id="8e22639ca85295c0d8a371689da6f4b5266c177d" translate="yes" xml:space="preserve">
          <source>Given a template &lt;code&gt;/path/:verb&lt;/code&gt; and parameter &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; results in URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt;.</source>
          <target state="translated">テンプレート &lt;code&gt;/path/:verb&lt;/code&gt; とパラメーター &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; を指定すると、URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="da53969ab67a277a2236b7677eabc9291e416b28" translate="yes" xml:space="preserve">
          <source>Given an expression that starts with &lt;code&gt;::&lt;/code&gt;, when a digest loop is entered and expression is dirty-checked, store the value as V</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; で始まる式が指定されている場合、ダイジェストループに入って式がダーティチェックされると、値をVとして保存します。</target>
        </trans-unit>
        <trans-unit id="fd29881d160148e4919339fe869d1ba4998c6ef7" translate="yes" xml:space="preserve">
          <source>Given an object and a security context in which to assign it, returns a value that's safe to use in this context, which was represented by the parameter. To do so, this function either unwraps the safe type it has been given (for instance, a &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; result), or it might try to sanitize the value given, depending on the context and sanitizer availablility.</source>
          <target state="translated">オブジェクトとそれを割り当てるセキュリティコンテキストを指定すると、このコンテキストで安全に使用できる値を返します。この値は、パラメーターで表されていました。そのために、この関数は、指定された安全なタイプ（たとえば、&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;結果）をラップ解除するか、コンテキストとサニタイザーの可用性に応じて、指定された値をサニタイズしようとする場合があります。</target>
        </trans-unit>
        <trans-unit id="9a257da8c321c097fe8fe5cc955c19057fa2bffc" translate="yes" xml:space="preserve">
          <source>Given the following error object for our example (which informs us that the field &lt;code&gt;myField&lt;/code&gt; currently has both the &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; errors):</source>
          <target state="translated">この例の次のエラーオブジェクトがあるとします（これにより、フィールド &lt;code&gt;myField&lt;/code&gt; には現在、 &lt;code&gt;required&lt;/code&gt; エラーと &lt;code&gt;email&lt;/code&gt; エラーの両方があることが通知されます）。</target>
        </trans-unit>
        <trans-unit id="f9f18e9100167b3cbe391107f9b9896237d584ce" translate="yes" xml:space="preserve">
          <source>Given the nature of &lt;code&gt;ngModelOptions&lt;/code&gt;, the value displayed inside input fields in the view might be different from the value in the actual model. This means that if you update the model you should also invoke &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; on the relevant input field in order to make sure it is synchronized with the model and that any debounced action is canceled.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; の性質上、ビューの入力フィールド内に表示される値は、実際のモデルの値と異なる場合があります。これは、モデルを更新する場合、モデルと確実に同期し、デバウンスされたアクションがキャンセルされるように、関連する入力フィールドで&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;も呼び出す必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="120a32f853f560c1d2bd012c26941580cd618e1e" translate="yes" xml:space="preserve">
          <source>Given this array of items on the $scope:</source>
          <target state="translated">この配列が$scope上の項目であることを考えると、このようになります。</target>
        </trans-unit>
        <trans-unit id="660a89b0fbdf53826bcc57234ddbd04675201f3d" translate="yes" xml:space="preserve">
          <source>Given this complex combination of CSS classes, styles and options, &lt;code&gt;$animateCss&lt;/code&gt; will figure everything out and make the animation happen.</source>
          <target state="translated">CSSクラス、スタイル、オプションのこの複雑な組み合わせを考えると、 &lt;code&gt;$animateCss&lt;/code&gt; はすべてを理解し、アニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="f77562ae0f3df5f61f357418891b85a82b5f1b10" translate="yes" xml:space="preserve">
          <source>Google+</source>
          <target state="translated">Google+</target>
        </trans-unit>
        <trans-unit id="99e8c59f379e7741fc044ae1510082583a27eb98" translate="yes" xml:space="preserve">
          <source>Grouping of HTML into reusable components.</source>
          <target state="translated">HTMLを再利用可能なコンポーネントにグループ化する。</target>
        </trans-unit>
        <trans-unit id="3ba448f1c251a3f30a4894252c910f2f06e1790f" translate="yes" xml:space="preserve">
          <source>Grouping related tests within &lt;code&gt;describe&lt;/code&gt; blocks and describing each individual test within an &lt;code&gt;it&lt;/code&gt; call keeps your tests self documenting.</source>
          <target state="translated">&lt;code&gt;describe&lt;/code&gt; ブロック内で関連するテストをグループ化し、 &lt;code&gt;it&lt;/code&gt; 呼び出し内で個々のテストをそれぞれ記述することで、テストを自己文書化できます。</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="4857fab7166afc1434fd0e5b087340d9d836a21f" translate="yes" xml:space="preserve">
          <source>Guide: Forms</source>
          <target state="translated">ご利用案内 フォーム</target>
        </trans-unit>
        <trans-unit id="082638bfa9b018580d30a942ed8e17ec72bfee8f" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;select&lt;/code&gt; element with AngularJS data-binding.</source>
          <target state="translated">AngularJSデータバインディングを使用したHTML &lt;code&gt;select&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="1ed7cdfdbf49bfaa13fce98fe7cec3a1c300e160" translate="yes" xml:space="preserve">
          <source>HTML Compiler</source>
          <target state="translated">HTML コンパイラ</target>
        </trans-unit>
        <trans-unit id="8103e94886ef5d4fe535735e02a17a98d0a0dda5" translate="yes" xml:space="preserve">
          <source>HTML Sanitization</source>
          <target state="translated">HTMLサニタイズ</target>
        </trans-unit>
        <trans-unit id="dcfc59be6d6b598114227a2015e59e2456f6c3a9" translate="yes" xml:space="preserve">
          <source>HTML checkbox.</source>
          <target state="translated">HTMLチェックボックス。</target>
        </trans-unit>
        <trans-unit id="956dfc4aa08de7e5a58a5878e750adab8be1a7a5" translate="yes" xml:space="preserve">
          <source>HTML compilation happens in three phases:</source>
          <target state="translated">HTMLのコンパイルは3つのフェーズで行われます。</target>
        </trans-unit>
        <trans-unit id="365711f3aa530a2399266a71af0d94bbd34fb790" translate="yes" xml:space="preserve">
          <source>HTML compiler</source>
          <target state="translated">HTMLコンパイラ</target>
        </trans-unit>
        <trans-unit id="9eb40b7d07d13c87ed32d2291d04e9ac3fc3ab1c" translate="yes" xml:space="preserve">
          <source>HTML has a lot of constructs for formatting the HTML for static documents in a declarative fashion. For example if something needs to be centered, there is no need to provide instructions to the browser how the window size needs to be divided in half so that the center is found, and that this center needs to be aligned with the text's center. Simply add an &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; attribute to any element to achieve the desired behavior. Such is the power of declarative language.</source>
          <target state="translated">HTMLには、静的ドキュメントのHTMLを宣言的な方法でフォーマットするための多くの構成要素があります。たとえば、何かを中央に配置する必要がある場合、ウィンドウのサイズを半分に分割して中央を見つけ、この中央をテキストの中央に揃える必要がある方法をブラウザに指示する必要はありません。要素に &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; 属性を追加するだけで、目的の動作を実現できます。これが宣言型言語の力です。</target>
        </trans-unit>
        <trans-unit id="bd11a5d2ff3115a84c7177fab98a96885225b6f0" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML入力要素コントロール。&lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;と一緒に使用すると、データバインディング、入力状態制御、および検証が提供されます。入力コントロールは、HTML5入力タイプに従い、古いブラウザーのHTML5検証動作をポリフィルします。</target>
        </trans-unit>
        <trans-unit id="75cd325edf2be9c413b3f9e3b95e9fce9dfbe8ca" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML入力要素コントロール。&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;と一緒に使用すると、データバインディング、入力状態制御、および検証が提供されます。入力コントロールは、HTML5入力タイプに従い、古いブラウザーのHTML5検証動作をポリフィルします。</target>
        </trans-unit>
        <trans-unit id="b52ce58ede873fa3ffe8c4f4b95938da98b79e53" translate="yes" xml:space="preserve">
          <source>HTML input.</source>
          <target state="translated">HTMLを入力します。</target>
        </trans-unit>
        <trans-unit id="3002c557c6e602f4fc52a7ef3b7fe2ffd052cecd" translate="yes" xml:space="preserve">
          <source>HTML link rewriting</source>
          <target state="translated">HTMLリンク書き換え</target>
        </trans-unit>
        <trans-unit id="0e0f1476dcc9c91e2471380aac237c3c16762a4f" translate="yes" xml:space="preserve">
          <source>HTML markup that may:</source>
          <target state="translated">可能性のあるHTMLマークアップ。</target>
        </trans-unit>
        <trans-unit id="f58f18b2a197f082495e5aabb52b36faf0d3e7ac" translate="yes" xml:space="preserve">
          <source>HTML radio button.</source>
          <target state="translated">HTMLラジオボタンです。</target>
        </trans-unit>
        <trans-unit id="673e4be38003649fd68400ae693d19b8570e48ea" translate="yes" xml:space="preserve">
          <source>HTML string or DOMElement to be wrapped into jQuery.</source>
          <target state="translated">jQueryにラップするHTML文字列またはDOMElement。</target>
        </trans-unit>
        <trans-unit id="28dfba92f8df7dc9094d96723e46d403afe9cf5f" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;directive/input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">AngularJSデータバインディングによるHTML textarea要素コントロール。この要素のデータバインディングプロパティと検証プロパティは、&lt;a href=&quot;directive/input&quot;&gt;input要素の&lt;/a&gt;プロパティとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="90fae27fbf7cecfb835c5ded77341c01b96b78d4" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">AngularJSデータバインディングによるHTML textarea要素コントロール。この要素のデータバインディングプロパティと検証プロパティは、&lt;a href=&quot;input&quot;&gt;input要素の&lt;/a&gt;プロパティとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="380dca5d29ff8bcbe21b89ea209d96e274ac2a42" translate="yes" xml:space="preserve">
          <source>HTML with additional markup</source>
          <target state="translated">マークアップを追加したHTML</target>
        </trans-unit>
        <trans-unit id="23e0aec9dcd186ca573c4b402ff2facf4bbfa786" translate="yes" xml:space="preserve">
          <source>HTML5 constraint validation and allowInvalid</source>
          <target state="translated">HTML5 制約の検証と allowInvalid</target>
        </trans-unit>
        <trans-unit id="919928d7bcf7b5802913b51423e1f3fc331681f0" translate="yes" xml:space="preserve">
          <source>HTML5 mode</source>
          <target state="translated">HTML5モード</target>
        </trans-unit>
        <trans-unit id="147cce8975179e5500fc1bb079891e026beac7f0" translate="yes" xml:space="preserve">
          <source>HTTP Requests</source>
          <target state="translated">HTTPリクエスト</target>
        </trans-unit>
        <trans-unit id="6e5a031619e754e2aaded2be7edff5361ccb3202" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">XMLHttpRequestオブジェクトまたはJSONPに委任し、ブラウザの非互換性を処理する&lt;a href=&quot;%24http&quot;&gt;サービス&lt;/a&gt;によって使用されるHTTPバックエンド。</target>
        </trans-unit>
        <trans-unit id="0843ce217fdeb5d4a43dd425f0f9a5e92422e97d" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;service/%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">XMLHttpRequestオブジェクトまたはJSONPに委任し、ブラウザの非互換性を処理する&lt;a href=&quot;service/%24http&quot;&gt;サービス&lt;/a&gt;によって使用されるHTTPバックエンド。</target>
        </trans-unit>
        <trans-unit id="11ed26cd0ecb017842889c5368f7817eb65b4c04" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current definition.</source>
          <target state="translated">HTTP ヘッダまたは http ヘッダオブジェクトを受け取り、現在の定義と一致した場合に真を返す関数。</target>
        </trans-unit>
        <trans-unit id="e9f0ada937e7482930d25244a71bfc57dc18e31b" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current expectation.</source>
          <target state="translated">HTTP ヘッダまたは http ヘッダオブジェクトを受け取り、ヘッダが現在の期待値と一致した場合に真を返す関数。</target>
        </trans-unit>
        <trans-unit id="4da8efbb95087f4efaddd53fa5a5d02998d8073e" translate="yes" xml:space="preserve">
          <source>HTTP headers.</source>
          <target state="translated">HTTPヘッダ。</target>
        </trans-unit>
        <trans-unit id="69dcbdcaea66e534100430f491b74862af6545a6" translate="yes" xml:space="preserve">
          <source>HTTP method of the request (GET, POST, PUT, ..)</source>
          <target state="translated">リクエストの HTTP メソッド (GET,POST,PUT,...)</target>
        </trans-unit>
        <trans-unit id="e7f701abbb4892632f63163af61f703f4d792e54" translate="yes" xml:space="preserve">
          <source>HTTP method.</source>
          <target state="translated">HTTPメソッドを使用しています。</target>
        </trans-unit>
        <trans-unit id="739b34082ae180864afd2da55be339a290e09a21" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</source>
          <target state="translated">データ文字列を受信し、データが期待通りであればtrueを返すHTTPリクエストボディまたは関数、リクエストボディがJSON形式であればObjectを返します。</target>
        </trans-unit>
        <trans-unit id="d86c6c3cef60e8657176cf9663c203f4df35ae7e" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected.</source>
          <target state="translated">データ文字列を受け取り、データが期待通りであれば真を返すHTTPリクエストボディまたは関数。</target>
        </trans-unit>
        <trans-unit id="b3becea06d0acfa7255eb772d6dcbbb225cf0343" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current definition.</source>
          <target state="translated">HTTP url または url を受け取り、url が現在の定義と一致した場合に true を返す関数。</target>
        </trans-unit>
        <trans-unit id="f52106e31df4471f850e4bc7609166aea45564e9" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current expectation.</source>
          <target state="translated">HTTP url あるいは url を受け取り、url が現在の期待値と一致した場合に true を返す関数。</target>
        </trans-unit>
        <trans-unit id="99507adf96330288819643c1bf1b9641131bf84a" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives an url and returns true if the url matches the current expectation.</source>
          <target state="translated">HTTP url あるいは url を受け取り、url が現在の期待値と一致した場合に true を返す関数。</target>
        </trans-unit>
        <trans-unit id="ce3a987c846205d185fc2edc4fe91e7d5c5a336c" translate="yes" xml:space="preserve">
          <source>HTTP url string that supports colon param matching.</source>
          <target state="translated">コロンパラメータのマッチングをサポートする HTTP url 文字列。</target>
        </trans-unit>
        <trans-unit id="f9d5d6116a9799462a571a9c71dd9f844beb5ac1" translate="yes" xml:space="preserve">
          <source>Hash with custom settings that should extend the default &lt;code&gt;$resourceProvider&lt;/code&gt; behavior. The supported options are:</source>
          <target state="translated">&lt;code&gt;$resourceProvider&lt;/code&gt; のデフォルトの動作を拡張するカスタム設定のハッシュ。サポートされているオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="23feba264c938cd5a816b433a94ce03d183ea1f6" translate="yes" xml:space="preserve">
          <source>Hash with declaration of custom actions that will be available in addition to the default set of resource actions (see below). If a custom action has the same key as a default action (e.g. &lt;code&gt;save&lt;/code&gt;), then the default action will be &lt;em&gt;overwritten&lt;/em&gt;, and not extended.</source>
          <target state="translated">リソースアクションのデフォルトセットに加えて利用できるカスタムアクションの宣言を含むハッシュ（以下を参照）。カスタムアクションにデフォルトアクションと同じキーがある場合（例： &lt;code&gt;save&lt;/code&gt; ）、デフォルトアクションは&lt;em&gt;上書きされ&lt;/em&gt;、拡張されません。</target>
        </trans-unit>
        <trans-unit id="cfaff8179045261bcc9e2cdcac0ab24460c6b352" translate="yes" xml:space="preserve">
          <source>Hashbang and HTML5 Modes</source>
          <target state="translated">ハッシュバングと HTML5 モード</target>
        </trans-unit>
        <trans-unit id="1b0dd8a962c1421c7d52d29272d65b7f22a06a41" translate="yes" xml:space="preserve">
          <source>Hashbang mode</source>
          <target state="translated">ハッシュバングモード</target>
        </trans-unit>
        <trans-unit id="152790ca6a4f5a814b879804ca53c1db52354436" translate="yes" xml:space="preserve">
          <source>Hashbang mode (default mode)</source>
          <target state="translated">ハッシュバングモード(デフォルトモード</target>
        </trans-unit>
        <trans-unit id="dc65de69cf1204a0d8f6a65f23b5cbdc59c7f6f2" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;directive/form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">&lt;a href=&quot;directive/form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;ディレクティブ内にコントロールグループを作成できるようにするヘルパーディレクティブ。これらの「子フォーム」は、たとえば、コントロールのサブグループの有効性を判断するために使用できます。</target>
        </trans-unit>
        <trans-unit id="15d728397a26dc6b863f20082f5868fb493c86c9" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">&lt;a href=&quot;form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;ディレクティブ内にコントロールグループを作成できるようにするヘルパーディレクティブ。これらの「子フォーム」は、たとえば、コントロールのサブグループの有効性を判断するために使用できます。</target>
        </trans-unit>
        <trans-unit id="eace3f9f2323bbf0fc546742d11cd0621ca25ee4" translate="yes" xml:space="preserve">
          <source>Here a some examples of creating constants:</source>
          <target state="translated">定数の作成例を紹介します。</target>
        </trans-unit>
        <trans-unit id="5e4c893051b4707f0e5b1249e7e81bc432fd4fb1" translate="yes" xml:space="preserve">
          <source>Here are a few examples of how you would usually define components:</source>
          <target state="translated">ここでは、通常コンポーネントを定義する方法の例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="22cfeeec8cbcab5dc8c92c408c3caa8cfedfcb3d" translate="yes" xml:space="preserve">
          <source>Here are some examples of creating value services.</source>
          <target state="translated">ここでは、価値あるサービスを生み出すための事例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="2572f0dbd83dbe653e314f42e4e17d11e1e31488" translate="yes" xml:space="preserve">
          <source>Here is a directive which makes any element draggable. Notice the &lt;code&gt;draggable&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">以下は、要素をドラッグ可能にするディレクティブです。 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;draggable&lt;/code&gt; 属性に注意してください。</target>
        </trans-unit>
        <trans-unit id="62a4417e4f911e91ec77edfd2357c79ffed4f432" translate="yes" xml:space="preserve">
          <source>Here is a simple form for editing user contact information. Adding, removing, clearing, and greeting are methods declared on the controller (see source tab). These methods can easily be called from the AngularJS markup. Any changes to the data are automatically reflected in the View without the need for a manual update.</source>
          <target state="translated">ユーザーの連絡先情報を編集するための簡単なフォームです。追加、削除、クリア、挨拶はコントローラ上で宣言されたメソッドです(ソースタブ参照)。これらのメソッドはAngularJSのマークアップから簡単に呼び出すことができます。データに変更があった場合、手動で更新しなくても自動的にViewに反映されます。</target>
        </trans-unit>
        <trans-unit id="34352a17a8a9151e3590aa194b3aa02094f7b560" translate="yes" xml:space="preserve">
          <source>Here is a tab pane example built from components:</source>
          <target state="translated">ここでは、コンポーネントから構築されたタブペインの例を示します。</target>
        </trans-unit>
        <trans-unit id="1d069503fae353633f357af5e3a2b89070c3ed31" translate="yes" xml:space="preserve">
          <source>Here is an example of a simple test:</source>
          <target state="translated">簡単なテストの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="50474d9c5b7e0f79dfee63bb5d1c04123879a0cc" translate="yes" xml:space="preserve">
          <source>Here is an example of loading a bundle of modules, with a utility method called &lt;code&gt;getScript&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;getScript&lt;/code&gt; というユーティリティメソッドを使用して、モジュールのバンドルをロードする例を示します。</target>
        </trans-unit>
        <trans-unit id="5880ff63c8f632463ae878d297d5b56bfbfbdc24" translate="yes" xml:space="preserve">
          <source>Here is an example of manually initializing AngularJS:</source>
          <target state="translated">AngularJSを手動で初期化する例です。</target>
        </trans-unit>
        <trans-unit id="8c04abad1ef15232b7d33e41e2d2c33485dde663" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service</source>
          <target state="translated">サービスの登録例です。</target>
        </trans-unit>
        <trans-unit id="5e759d842c3481da215b710834ed2ca1a95f87df" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service using &lt;a href=&quot;%24provide#service.html&quot;&gt;$provide.service(class)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24provide#service.html&quot;&gt;$ provide.service（class）&lt;/a&gt;を使用してサービスを登録する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="1a29f24b6a2342f727b445e40478dc68dee15260" translate="yes" xml:space="preserve">
          <source>Here is an example of using the injector service:</source>
          <target state="translated">インジェクタサービスの利用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="c6658c30a573eda1a06af398c5b3162bb3669f48" translate="yes" xml:space="preserve">
          <source>Here is an example of what the template definition for the &lt;code&gt;dialog&lt;/code&gt; widget may look like.</source>
          <target state="translated">以下は、 &lt;code&gt;dialog&lt;/code&gt; ウィジェットのテンプレート定義がどのように見えるかの例です。</target>
        </trans-unit>
        <trans-unit id="efb89522d8e99553f459d6f83b6cca9501f43b08" translate="yes" xml:space="preserve">
          <source>Here is the explanation of how the &lt;code&gt;Hello world&lt;/code&gt; example achieves the data-binding effect when the user enters text into the text field.</source>
          <target state="translated">ここでは、ユーザーがテキストフィールドにテキストを入力したときに、 &lt;code&gt;Hello world&lt;/code&gt; の例がデータバインディング効果をどのように実現するかについて説明します。</target>
        </trans-unit>
        <trans-unit id="dddbe54fb40a9da471f8ece2fdb9b87dab4acbf1" translate="yes" xml:space="preserve">
          <source>Here is what a secure configuration for this scenario might look like:</source>
          <target state="translated">このシナリオの安全な設定は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e3c1dfdb750e0373bfa4303b6efe8294d9bfd88d" translate="yes" xml:space="preserve">
          <source>Here we decorate the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service to convert warnings to errors by intercepting calls to &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$log.warn()&lt;/a&gt;.</source>
          <target state="translated">ここでは、&lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$ log.warn（）の&lt;/a&gt;呼び出しをインターセプトすることにより、警告をエラーに変換する&lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt;サービスを装飾します。</target>
        </trans-unit>
        <trans-unit id="e815a124520499322845f10059e60c7b540cfceb" translate="yes" xml:space="preserve">
          <source>Here we pass an array whose elements consist of a list of strings (the names of the dependencies) followed by the function itself.</source>
          <target state="translated">ここでは、要素が文字列のリスト (依存関係の名前)の後に関数自身が続く配列を渡します。</target>
        </trans-unit>
        <trans-unit id="68c7479252208403902f6aa1ed6ea1da9bebafb9" translate="yes" xml:space="preserve">
          <source>Here we've seen the main use cases for directives. Each of these samples acts as a good starting point for creating your own directives.</source>
          <target state="translated">ここでは、ディレクティブの主な使用例を見てきました。これらのサンプルはそれぞれ、独自のディレクティブを作成するための良い出発点となります。</target>
        </trans-unit>
        <trans-unit id="60e05935ab8bb78195f78bcb2800807eccda1fc0" translate="yes" xml:space="preserve">
          <source>Here you can see two &lt;code&gt;$location&lt;/code&gt; instances that show the difference between &lt;strong&gt;Html5 mode&lt;/strong&gt; and &lt;strong&gt;Html5 Fallback mode&lt;/strong&gt;. Note that to simulate different levels of browser support, the &lt;code&gt;$location&lt;/code&gt; instances are connected to a fakeBrowser service, which you don't have to set up in actual projects.</source>
          <target state="translated">ここでは、&lt;strong&gt;Html5モード&lt;/strong&gt;と&lt;strong&gt;Html5フォールバックモードの&lt;/strong&gt;違いを示す2つの &lt;code&gt;$location&lt;/code&gt; インスタンスを確認でき&lt;strong&gt;ます&lt;/strong&gt;。ブラウザーサポートのさまざまなレベルをシミュレートするために、 &lt;code&gt;$location&lt;/code&gt; インスタンスは、実際のプロジェクトで設定する必要のないfakeBrowserサービスに接続されていることに注意してください。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="85689592e66dcddab07a025f0a7c7fa876676daf" translate="yes" xml:space="preserve">
          <source>Here's an example directive declared with a Directive Definition Object:</source>
          <target state="translated">ここでは、ディレクティブ定義オブジェクトで宣言されたディレクティブの例を示します。</target>
        </trans-unit>
        <trans-unit id="98ab52376054b0ae6a09ea8fc36acb184a3cb5d2" translate="yes" xml:space="preserve">
          <source>Here's an example of a binding in a privileged context:</source>
          <target state="translated">ここでは、特権的なコンテキストでのバインディングの例を示します。</target>
        </trans-unit>
        <trans-unit id="bc027285afdb7e2491e24d412648e4821006ff8a" translate="yes" xml:space="preserve">
          <source>Here's an example where you might see flickering:</source>
          <target state="translated">ちらつきが見られる例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="7c311fcba1d54c9fe55032b814cda6cb881db5cd" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;EXPRESSION&lt;/code&gt; is an AngularJS expression that evaluates to the gender of the person that is used to select the message that should be displayed.</source>
          <target state="translated">ここで、 &lt;code&gt;EXPRESSION&lt;/code&gt; はAngularJS式であり、表示するメッセージの選択に使用される人の性別を評価します。</target>
        </trans-unit>
        <trans-unit id="e23108d1c2e1059fd8d1e90bb0a080a1d96f5b9d" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; is an expression that evaluates to a numeric value based on which the displayed message should change based on pluralization rules.</source>
          <target state="translated">ここで、 &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; は、複数の規則に基づいて、表示されるメッセージがどのように変化するかに基づいて評価される数値です。</target>
        </trans-unit>
        <trans-unit id="73eb7dfae55511c85ac87046d8ad655d3b07d514" translate="yes" xml:space="preserve">
          <source>History state object that was before it was changed.</source>
          <target state="translated">変更前の履歴状態オブジェクト。</target>
        </trans-unit>
        <trans-unit id="b5c1c159a3e483ad357e69c27c87a0816f3f5eba" translate="yes" xml:space="preserve">
          <source>Holds the list of modules which the injector will load before the current module is loaded.</source>
          <target state="translated">現在のモジュールがロードされる前にインジェクタがロードするモジュールのリストを保持します。</target>
        </trans-unit>
        <trans-unit id="c20a5f818418ae5d1d96d68d2a880b61a688edbd" translate="yes" xml:space="preserve">
          <source>How directives are compiled</source>
          <target state="translated">ディレクティブのコンパイル方法</target>
        </trans-unit>
        <trans-unit id="b4be41c74e5a460177988dde73728bedd08a211a" translate="yes" xml:space="preserve">
          <source>How do I use animations in my own directives?</source>
          <target state="translated">自分のディレクティブでアニメーションを使うにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="683b2a3eb2b6d989ff0fc60d2e062d97e39208a2" translate="yes" xml:space="preserve">
          <source>How does AngularJS support i18n/l10n?</source>
          <target state="translated">AngularJSはどのようにi18n/l10nをサポートしていますか?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
