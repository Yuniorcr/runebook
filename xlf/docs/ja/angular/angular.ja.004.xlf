<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="ea642d50993a11f50b36f50c416de1e3afc29587" translate="yes" xml:space="preserve">
          <source>A query options object.</source>
          <target state="translated">クエリオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="875f4a87e92836850f7d0d164c10b38034b2b733" translate="yes" xml:space="preserve">
          <source>A quick look at the &lt;code&gt;DashboardComponent&lt;/code&gt; constructor discourages the first approach:</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; コンストラクターをざっと見てみると、最初のアプローチは推奨されません。</target>
        </trans-unit>
        <trans-unit id="eac44c88992039f4fb91e0feae3853c7a87290d8" translate="yes" xml:space="preserve">
          <source>A re-usable component might be a child of multiple components. Imagine a component for rendering breaking news about a financial instrument. For business reasons, this news component makes frequent calls directly into its parent instrument as changing market data streams by.</source>
          <target state="translated">再利用可能なコンポーネントは、複数のコンポーネントの子になるかもしれません。金融商品に関するニュース速報を表示するコンポーネントを想像してみてください。ビジネス上の理由から、このニュース・コンポーネントは、市場のデータ・ストリームが変化すると、その親である金融商品に直接頻繁に呼び出しを行います。</target>
        </trans-unit>
        <trans-unit id="29188c6ddf29a94eeba4295076c9a342a62de5e6" translate="yes" xml:space="preserve">
          <source>A real hero is more than a name.</source>
          <target state="translated">本当のヒーローは名前だけじゃない</target>
        </trans-unit>
        <trans-unit id="14947a138fd23361ed204ab70416c15a2a54e6c1" translate="yes" xml:space="preserve">
          <source>A redirect route requires a &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; property to tell the router how to match a URL to the path of a route. The router throws an error if you don't. In this app, the router should select the route to the &lt;code&gt;HeroListComponent&lt;/code&gt; only when the &lt;em&gt;entire URL&lt;/em&gt; matches &lt;code&gt;''&lt;/code&gt;, so set the &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value to &lt;code&gt;'&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt;.</source>
          <target state="translated">リダイレクトルートには、URLをルートのパスに一致させる方法をルーターに指示するための &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; プロパティが必要です。そうしないと、ルーターはエラーをスローします。このアプリでは、ルーターは&lt;em&gt;、URL全体が&lt;/em&gt; &lt;code&gt;''&lt;/code&gt; に一致する場合にのみ、 &lt;code&gt;HeroListComponent&lt;/code&gt; へのルートを選択する必要があるため、 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 値を &lt;code&gt;'&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; &lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt; 'に設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="322068dffc0ade1ff151c1e8cdab19f338314894" translate="yes" xml:space="preserve">
          <source>A redirect route requires a &lt;code&gt;pathMatch&lt;/code&gt; property to tell the router how to match a URL to the path of a route. In this app, the router should select the route to the &lt;code&gt;HeroListComponent&lt;/code&gt; only when the &lt;em&gt;entire URL&lt;/em&gt; matches &lt;code&gt;''&lt;/code&gt;, so set the &lt;code&gt;pathMatch&lt;/code&gt; value to &lt;code&gt;'full'&lt;/code&gt;.</source>
          <target state="translated">リダイレクトルートには、URLをルートのパスに一致させる方法をルーターに指示するための &lt;code&gt;pathMatch&lt;/code&gt; プロパティが必要です。このアプリでは、ルーターは&lt;em&gt;URL全体が&lt;/em&gt; &lt;code&gt;''&lt;/code&gt; に一致する場合にのみ、 &lt;code&gt;HeroListComponent&lt;/code&gt; へのルートを選択する必要があるため、 &lt;code&gt;pathMatch&lt;/code&gt; 値を &lt;code&gt;'full'&lt;/code&gt; に設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="36f7f7b1b6c1f43c049a2ebdb10a9f819ec461db" translate="yes" xml:space="preserve">
          <source>A reference to an Angular application running on a page.</source>
          <target state="translated">ページ上で動作するAngularアプリケーションのリファレンスです。</target>
        </trans-unit>
        <trans-unit id="401eb455bc6f4c776b2dccfc14710b298a225039" translate="yes" xml:space="preserve">
          <source>A reference to the template that is stamped out for each item in the iterable.</source>
          <target state="translated">イテレート可能な項目ごとにスタンプアウトされるテンプレートへの参照。</target>
        </trans-unit>
        <trans-unit id="5a24dc890372e521028f35c106ed2f1cb927ba31" translate="yes" xml:space="preserve">
          <source>A reference to the underlying control.</source>
          <target state="translated">基礎となるコントロールへの参照。</target>
        </trans-unit>
        <trans-unit id="7996d7994050db578a326532c3dbd2894c0adf11" translate="yes" xml:space="preserve">
          <source>A regular expression to be used as is to test the values, or a string. If a string is passed, the &lt;code&gt;^&lt;/code&gt; character is prepended and the &lt;code&gt;$&lt;/code&gt; character is appended to the provided string (if not already present), and the resulting regular expression is used to test the values.</source>
          <target state="translated">値をテストするためにそのまま使用される正規表現、または文字列。文字列が渡されると、 &lt;code&gt;^&lt;/code&gt; 文字が先頭に追加され、提供された文字列に &lt;code&gt;$&lt;/code&gt; 文字が追加され（まだ存在しない場合）、結果の正規表現を使用して値がテストされます。</target>
        </trans-unit>
        <trans-unit id="a73fdf09e331223ac46a9c078644a2fd7fcd9c66" translate="yes" xml:space="preserve">
          <source>A repository of different Map diffing strategies used by NgClass, NgStyle, and others.</source>
          <target state="translated">NgClass、NgStyle などで使用されている異なるマップ差分ストラテジーのリポジトリ。</target>
        </trans-unit>
        <trans-unit id="cb8eb73672378bd21acb306ae11973b78a2d8b3b" translate="yes" xml:space="preserve">
          <source>A repository of different iterable diffing strategies used by NgFor, NgClass, and others.</source>
          <target state="translated">NgFor、NgClassなどで使用されている異なる反復可能な差分ストラテジーのリポジトリ。</target>
        </trans-unit>
        <trans-unit id="27483211b06ffa402c47221f575c346e77ca8f97" translate="yes" xml:space="preserve">
          <source>A request is rejected if the user denies permission, or if the browser blocks or does not support the Push API or ServiceWorkers. Check &lt;code&gt;&lt;a href=&quot;swpush#isEnabled&quot;&gt;SwPush.isEnabled&lt;/a&gt;&lt;/code&gt; to confirm status.</source>
          <target state="translated">ユーザーが許可を拒否した場合、またはブラウザーがPush APIまたはServiceWorkersをブロックまたはサポートしていない場合、要求は拒否されます。 &lt;code&gt;&lt;a href=&quot;swpush#isEnabled&quot;&gt;SwPush.isEnabled&lt;/a&gt;&lt;/code&gt; をチェックして、ステータスを確認します。</target>
        </trans-unit>
        <trans-unit id="19b207feff8dd38f63473783387846e4b8f4694c" translate="yes" xml:space="preserve">
          <source>A resolution is a process of flattening multiple nested arrays and converting individual providers into an array of &lt;code&gt;&lt;a href=&quot;resolvedreflectiveprovider&quot;&gt;ResolvedReflectiveProvider&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">解決は、ネストされた複数の配列をフラット化し、個々のプロバイダーを &lt;code&gt;&lt;a href=&quot;resolvedreflectiveprovider&quot;&gt;ResolvedReflectiveProvider&lt;/a&gt;&lt;/code&gt; の配列に変換するプロセスです。</target>
        </trans-unit>
        <trans-unit id="a1c3c3d085e282c76f310bb036a7eac8d0f84e78" translate="yes" xml:space="preserve">
          <source>A response that represents an error or failure, either from a non-successful HTTP status, an error while executing the request, or some other failure which occurred during the parsing of the response.</source>
          <target state="translated">HTTP ステータスが成功していない、リクエストの実行中にエラーが発生した、あるいはレスポンスの解析中に発生したその他の障害のいずれかによるエラーや障害を表すレスポンス。</target>
        </trans-unit>
        <trans-unit id="f70c3da48414bf75c125dc101e455797d04f0001" translate="yes" xml:space="preserve">
          <source>A reusable animation definition.</source>
          <target state="translated">再利用可能なアニメーションの定義。</target>
        </trans-unit>
        <trans-unit id="cdabf3135a889573b4d620fff18335445de9cd9e" translate="yes" xml:space="preserve">
          <source>A revised version of the &lt;code&gt;CachingInterceptor&lt;/code&gt; optionally returns an &lt;em&gt;observable&lt;/em&gt; that immediately emits the cached response, sends the request to the NPM web API anyway, and emits again later with the updated search results.</source>
          <target state="translated">&lt;code&gt;CachingInterceptor&lt;/code&gt; の改訂バージョンは、オプションで、キャッシュされた応答を即座に発行し、NPM Web APIに要求を送信し、更新された検索結果で後で再び発行する&lt;em&gt;オブザーバブル&lt;/em&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="6a4bbf0b3ca5dd008081ab260dca5b95fc3853e3" translate="yes" xml:space="preserve">
          <source>A route associates one or more URL paths with a component.</source>
          <target state="translated">ルートは、1 つ以上の URL パスをコンポーネントに関連付けます。</target>
        </trans-unit>
        <trans-unit id="74a035a1a0df73830bf78e88fdca0c0d30db6779" translate="yes" xml:space="preserve">
          <source>A route change activates the animation trigger, and a transition matching the state change is applied.</source>
          <target state="translated">ルート変更はアニメーショントリガーをアクティブにし、状態変更にマッチしたトランジションが適用されます。</target>
        </trans-unit>
        <trans-unit id="02faca1a4af3e4bf1d6f174e154de661a4824117" translate="yes" xml:space="preserve">
          <source>A route definition is a JavaScript object. Each route typically has two properties. The first property, &lt;code&gt;path&lt;/code&gt;, is a string that specifies the URL path for the route. The second property, &lt;code&gt;component&lt;/code&gt;, is a string that specifies what component your application should display for that path.</source>
          <target state="translated">ルート定義はJavaScriptオブジェクトです。通常、各ルートには2つのプロパティがあります。最初のプロパティは、 &lt;code&gt;path&lt;/code&gt; 、ルートのURLパスを指定する文字列です。2番目のプロパティ &lt;code&gt;component&lt;/code&gt; は、アプリケーションがそのパスに対して表示するコンポーネントを指定する文字列です。</target>
        </trans-unit>
        <trans-unit id="6c64bf97011375151692d4c68dff9ae5d5309663" translate="yes" xml:space="preserve">
          <source>A route definition refers to a component by its type with &lt;code&gt;component: CustomerListComponent&lt;/code&gt;.</source>
          <target state="translated">ルート定義は、コンポーネントを &lt;code&gt;component: CustomerListComponent&lt;/code&gt; タイプで参照します：CustomerListComponent。</target>
        </trans-unit>
        <trans-unit id="fdb7363555351c4639aac314739325b47288b9bf" translate="yes" xml:space="preserve">
          <source>A routed Angular application has one singleton instance of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service. When the browser's URL changes, that router looks for a corresponding &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; from which it can determine the component to display.</source>
          <target state="translated">ルーティングされたAngularアプリケーションには、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスのシングルトンインスタンスが1つあります。ブラウザのURLが変更されると、そのルーターは、表示するコンポーネントを決定できる対応する &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 探します。</target>
        </trans-unit>
        <trans-unit id="7e86358e50f0c60115516b0afea462258244b6af" translate="yes" xml:space="preserve">
          <source>A routed Angular application has one singleton instance of the &lt;em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/em&gt; service. When the browser's URL changes, that router looks for a corresponding &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; from which it can determine the component to display.</source>
          <target state="translated">ルーティングされたAngularアプリケーションには、&lt;em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/em&gt;サービスのシングルトンインスタンスが1つあります。ブラウザーのURLが変更されると、そのルーターは対応する &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 探し、そこから表示するコンポーネントを決定できます。</target>
        </trans-unit>
        <trans-unit id="02ec1f1924ffef864dec5f034d699d0e2085b2db" translate="yes" xml:space="preserve">
          <source>A routed application should support &quot;deep links&quot;. A &lt;em&gt;deep link&lt;/em&gt; is a URL that specifies a path to a component inside the app. For example, &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; is a &lt;em&gt;deep link&lt;/em&gt; to the hero detail page that displays the hero with &lt;code&gt;id: 42&lt;/code&gt;.</source>
          <target state="translated">ルーティングされたアプリケーションは「ディープリンク」をサポートする必要があります。&lt;em&gt;ディープリンクは&lt;/em&gt;アプリ内のコンポーネントへのパスを指定するURLです。たとえば、 &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; は、 &lt;code&gt;id: 42&lt;/code&gt; ヒーローを表示するヒーロー詳細ページへの&lt;em&gt;ディープリンク&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="4d567e1e3b972dc05d228702a7e27b4c14034add" translate="yes" xml:space="preserve">
          <source>A routed entry component</source>
          <target state="translated">ルート化されたエントリコンポーネント</target>
        </trans-unit>
        <trans-unit id="9a4649536ab16482113647620adfcb1f64a30922" translate="yes" xml:space="preserve">
          <source>A router has no routes until you configure it. The following example creates five route definitions, configures the router via the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method, and adds the result to the &lt;code&gt;AppModule&lt;/code&gt;'s &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">ルーターは、ユーザーが構成するまでルートを持ちません。次の例では、5つのルート定義を作成し、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを介してルーターを構成し、その結果を &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="8d43f0ef0ca2078e73bd486696685c5d5ef229cf" translate="yes" xml:space="preserve">
          <source>A router must be configured with a list of route definitions.</source>
          <target state="translated">ルータには、ルート定義のリストを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ee77f9045090764d9e6cd31e18052dea0804472" translate="yes" xml:space="preserve">
          <source>A router needs configuration whether it's the AngularJS or Angular or any other router.</source>
          <target state="translated">ルーターはAngularJSだろうがAngularだろうが設定が必要です。</target>
        </trans-unit>
        <trans-unit id="742ba5028666dfbd7b24f76943ebc6c0e1233cfe" translate="yes" xml:space="preserve">
          <source>A router outlet emits an activate event when a new component is instantiated, and a deactivate event when a component is destroyed.</source>
          <target state="translated">ルータアウトレットは、新しいコンポーネントがインスタンス化されると activate イベントを発し、コンポーネントが破壊されると deactivate イベントを発します。</target>
        </trans-unit>
        <trans-unit id="4d893f2f2f77e09f89f1c1ee2b15d6d25775c766" translate="yes" xml:space="preserve">
          <source>A routing module does not have its own declarations. Components, directives, and pipes are the responsibility of the feature module, not the routing module.</source>
          <target state="translated">ルーティングモジュールは独自の宣言を持ちません。コンポーネント、ディレクティブ、パイプはルーティングモジュールではなくフィーチャーモジュールの責任です。</target>
        </trans-unit>
        <trans-unit id="2a705a3baf3eb0fb5440338939869bf36ca0d6e2" translate="yes" xml:space="preserve">
          <source>A routing module provides routing configuration for another module and separates routing concerns from its companion module.</source>
          <target state="translated">ルーティングモジュールは、別のモジュールにルーティング設定を提供し、そのコンパニオンモジュールからルーティングに関する問題を分離します。</target>
        </trans-unit>
        <trans-unit id="9e0ec53544bcd207c27bdd63342d736233f25672" translate="yes" xml:space="preserve">
          <source>A routing module re-exports the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; as a convenience so that components of the companion module have access to router directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルーティングモジュールは便利な &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; としてRouterModuleを再エクスポートするため、コンパニオンモジュールのコンポーネントは &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; などのルーターディレクティブにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="1f1ba848458b2e10deffe2484e76ce0090f12dc2" translate="yes" xml:space="preserve">
          <source>A routing module should only be imported by its companion module.</source>
          <target state="translated">ルーティングモジュールは、そのコンパニオンモジュールからのみインポートされるべきです。</target>
        </trans-unit>
        <trans-unit id="6e4a38ab376f65d6f384d839be45273996d732c6" translate="yes" xml:space="preserve">
          <source>A routing module typically does the following:</source>
          <target state="translated">ルーティングモジュールは一般的に以下のことを行います。</target>
        </trans-unit>
        <trans-unit id="85a2bfb58cc0e40066d8cc4ec92ade33012df2f1" translate="yes" xml:space="preserve">
          <source>A rule can specify a period as time range, or as a single time value.</source>
          <target state="translated">ルールは、期間を時間範囲として、または単一の時間値として指定することができます。</target>
        </trans-unit>
        <trans-unit id="1dbf2cce68e5549ab5fc8b6799a2ca90688f851e" translate="yes" xml:space="preserve">
          <source>A running application continues to run with the same version of all files. It does not suddenly start receiving cached files from a newer version, which are likely incompatible.</source>
          <target state="translated">実行中のアプリケーションは、すべてのファイルの同じバージョンで実行し続けます。それは突然、互換性がない可能性が高い新しいバージョンからキャッシュされたファイルの受信を開始することはありません。</target>
        </trans-unit>
        <trans-unit id="499a4b6365d83f0f45eef66065c407c6f63a53b0" translate="yes" xml:space="preserve">
          <source>A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code. A schematic defines &lt;a href=&quot;glossary#rule&quot;&gt;rules&lt;/a&gt; that operate on a virtual file system called a &lt;a href=&quot;glossary#file-tree&quot;&gt;tree&lt;/a&gt;.</source>
          <target state="translated">ファイルとコードを作成、変更、リファクタリング、または移動してプログラミングプロジェクトを生成または変換する方法を定義する足場ライブラリ。回路図は、&lt;a href=&quot;glossary#file-tree&quot;&gt;ツリー&lt;/a&gt;と呼ばれる仮想ファイルシステムで動作する&lt;a href=&quot;glossary#rule&quot;&gt;ルール&lt;/a&gt;を定義します。</target>
        </trans-unit>
        <trans-unit id="fa44d1fe648c4b623410d8e081b47f8c6bc1115b" translate="yes" xml:space="preserve">
          <source>A schema definition associated with an NgModule.</source>
          <target state="translated">NgModule に関連付けられたスキーマ定義。</target>
        </trans-unit>
        <trans-unit id="28324b5ab9a75918825701e83102b3643e84e681" translate="yes" xml:space="preserve">
          <source>A schematic for the &lt;code&gt;ng add&lt;/code&gt; command can enhance the initial installation process for your users. The following steps will define this type of schematic.</source>
          <target state="translated">&lt;code&gt;ng add&lt;/code&gt; コマンドの回路図により、ユーザーの初期インストールプロセスを強化できます。次の手順では、このタイプの回路図を定義します。</target>
        </trans-unit>
        <trans-unit id="00274013a103be16cdc79882529e8b292f53bb4e" translate="yes" xml:space="preserve">
          <source>A schematic is a template-based code generator that supports complex logic. It is a set of instructions for transforming a software project by generating or modifying code. Schematics are packaged into &lt;a href=&quot;glossary#collection&quot;&gt;collections&lt;/a&gt; and installed with npm.</source>
          <target state="translated">回路図は、複雑なロジックをサポートするテンプレートベースのコードジェネレーターです。これは、コードを生成または変更してソフトウェアプロジェクトを変換するための一連の命令です。回路図は&lt;a href=&quot;glossary#collection&quot;&gt;コレクションに&lt;/a&gt;パッケージ化され、npmでインストールされます。</target>
        </trans-unit>
        <trans-unit id="7927b3f04761399102a081776a50fb3eb8e1643e" translate="yes" xml:space="preserve">
          <source>A scope function for the Web Tracing Framework (WTF).</source>
          <target state="translated">Web Tracing Framework (WTF)のスコープ機能。</target>
        </trans-unit>
        <trans-unit id="20497a1af5a153905fddec72f2f68e3bea176254" translate="yes" xml:space="preserve">
          <source>A search value reaches the service only if it's a new value and the user has stopped typing.</source>
          <target state="translated">検索値がサービスに到達するのは、それが新しい値であり、ユーザーが入力を停止した場合に限られます。</target>
        </trans-unit>
        <trans-unit id="8928b57af9034cfc3113833a8cc9214728c19f78" translate="yes" xml:space="preserve">
          <source>A second &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; function decorates the &lt;code&gt;loggerService&lt;/code&gt; constructor property. The only &lt;code&gt;LoggerService&lt;/code&gt; instance in the app is provided at the &lt;code&gt;AppComponent&lt;/code&gt; level. The host &lt;code&gt;HeroBioComponent&lt;/code&gt; doesn't have its own &lt;code&gt;LoggerService&lt;/code&gt; provider.</source>
          <target state="translated">2番目の &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 関数は、 &lt;code&gt;loggerService&lt;/code&gt; コンストラクタープロパティを装飾します。アプリ内の唯一の &lt;code&gt;LoggerService&lt;/code&gt; インスタンスは、 &lt;code&gt;AppComponent&lt;/code&gt; レベルで提供されます。ホスト &lt;code&gt;HeroBioComponent&lt;/code&gt; には、独自の &lt;code&gt;LoggerService&lt;/code&gt; プロバイダーはありません。</target>
        </trans-unit>
        <trans-unit id="b2209c9173e3f8d50fb398db9c74e9279308b293" translate="yes" xml:space="preserve">
          <source>A second function called &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; lets you run those same animations one after the other. Within &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, the animation steps consist of either &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function calls.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; と呼ばれる2番目の関数を使用すると、同じアニメーションを次々に実行できます。 &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 内のアニメーションステップは、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数呼び出しで構成されます。</target>
        </trans-unit>
        <trans-unit id="db03cff65aff6394642f3e77b7441a26efb12e0d" translate="yes" xml:space="preserve">
          <source>A secondary section heading is related to a main heading and &lt;em&gt;falls textually within&lt;/em&gt; the bounds of that main heading.</source>
          <target state="translated">2番目のセクションの見出しは、メインの見出しに関連付けられており、&lt;em&gt;テキストで&lt;/em&gt;はそのメインの見出しの境界&lt;em&gt;内に&lt;/em&gt;あります。</target>
        </trans-unit>
        <trans-unit id="897556bbdf26acf6542faa243ff0f6beeec0c43b" translate="yes" xml:space="preserve">
          <source>A separate NgModule that provides the necessary service providers and directives for navigating through application views.</source>
          <target state="translated">アプリケーションビューをナビゲートするために必要なサービスプロバイダとディレクティブを提供する独立したNgModule。</target>
        </trans-unit>
        <trans-unit id="4f7e1f9d4cced71dda1ebf170c0e8e0b521f3d4a" translate="yes" xml:space="preserve">
          <source>A serializable version of the event from &lt;code&gt;onPopState&lt;/code&gt; or &lt;code&gt;onHashChange&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;onPopState&lt;/code&gt; または &lt;code&gt;onHashChange&lt;/code&gt; からのイベントのシリアライズ可能なバージョン</target>
        </trans-unit>
        <trans-unit id="bd6c7f3e070927bbb3c135cde9d32a2a4f79fad1" translate="yes" xml:space="preserve">
          <source>A service for managing HTML &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">HTMLの &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; タグを管理するためのサービス。</target>
        </trans-unit>
        <trans-unit id="186e30ff0aea0409a1060146d23210d1933e91c6" translate="yes" xml:space="preserve">
          <source>A service spy, such as the &lt;code&gt;qetQuote()&lt;/code&gt; spy of the fake &lt;code&gt;TwainService&lt;/code&gt;, can give you that information and make assertions about the state of the view.</source>
          <target state="translated">偽の &lt;code&gt;TwainService&lt;/code&gt; の &lt;code&gt;qetQuote()&lt;/code&gt; スパイなどのサービススパイは、その情報を提供し、ビューの状態についてアサーションを行うことができます。</target>
        </trans-unit>
        <trans-unit id="70670cbdf35759376fdc687d58086435d3c7a0a3" translate="yes" xml:space="preserve">
          <source>A service that applications can use to interact with a browser's URL.</source>
          <target state="translated">アプリケーションがブラウザの URL と対話するために使用できるサービス。</target>
        </trans-unit>
        <trans-unit id="b658296c6fe9cdddfcd4f6dfb972ad4690b4f6cc" translate="yes" xml:space="preserve">
          <source>A service that can be used to get and add meta tags.</source>
          <target state="translated">メタタグを取得したり、追加したりできるサービスです。</target>
        </trans-unit>
        <trans-unit id="b2f6ff3d8a0d1fc326174778c442afc0d5fc6655" translate="yes" xml:space="preserve">
          <source>A service that can be used to get and set the title of a current HTML document.</source>
          <target state="translated">現在のHTMLドキュメントのタイトルを取得・設定できるサービスです。</target>
        </trans-unit>
        <trans-unit id="3a48ad5f23dc32cb9b39e0864173605539fa750b" translate="yes" xml:space="preserve">
          <source>A service that is provided to each route component that contains route specific information such as route parameters, static data, resolve data, global query params, and the global fragment.</source>
          <target state="translated">ルートパラメータ、静的データ、解決データ、グローバルクエリパラメータ、グローバルフラグメントなどのルート固有の情報を含む、各ルートコンポーネントに提供されるサービス。</target>
        </trans-unit>
        <trans-unit id="7def59e5c57b6b6eebfe3444204178853e21593f" translate="yes" xml:space="preserve">
          <source>A service that provides navigation among views and URL manipulation capabilities.</source>
          <target state="translated">ビュー間のナビゲーションやURL操作機能を提供するサービスです。</target>
        </trans-unit>
        <trans-unit id="a65ba35ee354bb8dcdf3d93a99e7ba722d67bb4b" translate="yes" xml:space="preserve">
          <source>A service that provides navigation and URL manipulation capabilities.</source>
          <target state="translated">ナビゲーションやURL操作機能を提供するサービスです。</target>
        </trans-unit>
        <trans-unit id="165b76769ff8ffcdbb0dac7d8565023cf996eb79" translate="yes" xml:space="preserve">
          <source>A set of CSS style properties.</source>
          <target state="translated">CSSスタイルプロパティのセット。</target>
        </trans-unit>
        <trans-unit id="b41c5694278624138f799e74044ab8ef5c4a41ec" translate="yes" xml:space="preserve">
          <source>A set of CSS styles associated with this state, created using the &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function. This set of styles persists on the element once the state has been reached.</source>
          <target state="translated">使用して作成し、この状態に関連付けられているCSSスタイルのセット、 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数。このスタイルのセットは、状態に到達すると、要素に保持されます。</target>
        </trans-unit>
        <trans-unit id="7299f56aeec68cc3f32c42d11d47f588e1b76737" translate="yes" xml:space="preserve">
          <source>A set of CSS styles or HTML styles associated with an animation state. The value can be any of the following:</source>
          <target state="translated">アニメーションの状態に関連付けられたCSSスタイルまたはHTMLスタイルのセット。値は以下のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="aed6bba5fddfaceede4e9e47b8f848a5df28edb9" translate="yes" xml:space="preserve">
          <source>A set of animation styles with optional offset data. The optional &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; value for a style specifies a percentage of the total animation time at which that style is applied.</source>
          <target state="translated">オプションのオフセットデータを含むアニメーションスタイルのセット。スタイルのオプションの &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 値は、そのスタイルが適用される総アニメーション時間のパーセンテージを指定します。</target>
        </trans-unit>
        <trans-unit id="20025d90204b23bc2c4a58f27ec4341cd91e1835" translate="yes" xml:space="preserve">
          <source>A set of animation styles with optional offset data. The optional &lt;code&gt;offset&lt;/code&gt; value for a style specifies a percentage of the total animation time at which that style is applied.</source>
          <target state="translated">オプションのオフセットデータを含むアニメーションスタイルのセット。スタイルのオプションの &lt;code&gt;offset&lt;/code&gt; 値は、そのスタイルが適用される合計アニメーション時間のパーセンテージを指定します。</target>
        </trans-unit>
        <trans-unit id="3a39ac6a5cf5e3a0526385dd947e6b5b4b10ab86" translate="yes" xml:space="preserve">
          <source>A set of arguments to pass to the handler method when the event occurs.</source>
          <target state="translated">イベントが発生したときにハンドラメソッドに渡す引数のセット。</target>
        </trans-unit>
        <trans-unit id="b69416e2e979402db61b9a90c7c686f250c2936a" translate="yes" xml:space="preserve">
          <source>A set of components that should be compiled along with this component. For each component listed here, Angular creates a &lt;a href=&quot;componentfactory&quot;&gt;&lt;code&gt;ComponentFactory&lt;/code&gt;&lt;/a&gt; and stores it in the &lt;a href=&quot;componentfactoryresolver&quot;&gt;&lt;code&gt;ComponentFactoryResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントと共にコンパイルする必要があるコンポーネントのセット。ここにリストされているコンポーネントごとに、Angularは&lt;a href=&quot;componentfactory&quot;&gt; &lt;code&gt;ComponentFactory&lt;/code&gt; &lt;/a&gt;を作成し、それをComponentFactoryResolverに格納し&lt;a href=&quot;componentfactoryresolver&quot;&gt; &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d541ee3bb7bdc858fdbe640242004d6c3574b73f" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;&lt;a href=&quot;router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドで提供されるルーターモジュールの設定オプションのセット。</target>
        </trans-unit>
        <trans-unit id="db0c7a52799241ff11d3cbf03e465aa12662b595" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;&lt;a href=&quot;routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドで提供されるルーターモジュールの設定オプションのセット。</target>
        </trans-unit>
        <trans-unit id="5cee5b66f041ec4d3d4181db314ead6026b65cc9" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;forRoot()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;forRoot()&lt;/code&gt; メソッドで提供されるルーターモジュールの構成オプションのセット。</target>
        </trans-unit>
        <trans-unit id="296bab81b147e9d5f9deb0abd5624f61cb75e34d" translate="yes" xml:space="preserve">
          <source>A set of dependency providers for platforms created with the new factory.</source>
          <target state="translated">新しいファクトリで作成されたプラットフォーム用の依存関係プロバイダのセット。</target>
        </trans-unit>
        <trans-unit id="2f9f31dbf4c58ee11c9c7cafc16fbd9e630c335a" translate="yes" xml:space="preserve">
          <source>A set of developer-defined parameters that modify styling and timing when an animation action starts. An array of key-value pairs, where the provided value is used as a default.</source>
          <target state="translated">アニメーションアクションの開始時にスタイリングとタイミングを変更する開発者定義のパラメータのセット。キーと値のペアの配列で、指定された値がデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="cda6f3a81bf6fa1d317017a56a36707356b07794" translate="yes" xml:space="preserve">
          <source>A set of operators applied to an observable is a recipe&amp;mdash;that is, a set of instructions for producing the values you&amp;rsquo;re interested in. By itself, the recipe doesn&amp;rsquo;t do anything. You need to call &lt;code&gt;subscribe()&lt;/code&gt; to produce a result through the recipe.</source>
          <target state="translated">オブザーバブルに適用される演算子のセットはレシピです。つまり、関心のある値を生成するための一連の命令です。レシピ自体は何もしません。 &lt;code&gt;subscribe()&lt;/code&gt; を呼び出して、レシピを通じて結果を生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="a4ef0905149ca734533ddf7caa55241124189d7b" translate="yes" xml:space="preserve">
          <source>A set of options that can include a time delay and additional developer-defined parameters.</source>
          <target state="translated">時間遅延と開発者定義の追加パラメータを含むことができるオプションのセット。</target>
        </trans-unit>
        <trans-unit id="7985d70b6da47d4fec6acf039e047d5b6d1572b8" translate="yes" xml:space="preserve">
          <source>A set of schematics that customize the &lt;code&gt;ng generate&lt;/code&gt; sub-command option defaults for this project. See &lt;a href=&quot;workspace-config#schematics&quot;&gt;Generation schematics&lt;/a&gt; below.</source>
          <target state="translated">このプロジェクトの &lt;code&gt;ng generate&lt;/code&gt; サブコマンドオプションのデフォルトをカスタマイズする一連の回路図。以下の&lt;a href=&quot;workspace-config#schematics&quot;&gt;生成回路図を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1c6f62509b38d65e25be8d89556b5a09dfbb7fbc" translate="yes" xml:space="preserve">
          <source>A set of styles used in the step.</source>
          <target state="translated">ステップで使用されるスタイルのセット。</target>
        </trans-unit>
        <trans-unit id="d32224487a00478c027aca367dcd59df918d5161" translate="yes" xml:space="preserve">
          <source>A set of supported event names for gestures to be used in Angular. Angular supports all built-in recognizers, as listed in &lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJS documentation&lt;/a&gt;.</source>
          <target state="translated">Angularで使用されるジェスチャーでサポートされているイベント名のセット。Angularは、&lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJSのドキュメントに&lt;/a&gt;記載されているすべての組み込み認識機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="bb96e6d9cba636f695a0e3953f6fedf6e88639a2" translate="yes" xml:space="preserve">
          <source>A set of supported event names for gestures to be used in Angular. Angular supports all built-in recognizers, as listed in &lt;a href=&quot;https://hammerjs.github.io/&quot;&gt;HammerJS documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cf8919ea34c404a49fa4a02115691af647ed4f" translate="yes" xml:space="preserve">
          <source>A simple example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="bb4c77f231253ed725d7018a0a81f0fc0e2d83c1" translate="yes" xml:space="preserve">
          <source>A simple example might be a button that sends users to your company website, that would be included in all apps that your company builds.</source>
          <target state="translated">シンプルな例としては、ユーザーを会社のウェブサイトに送るボタンがありますが、これは会社が構築するすべてのアプリに含まれます。</target>
        </trans-unit>
        <trans-unit id="ab3504c2abf7afad713f07541dc7d00888949cea" translate="yes" xml:space="preserve">
          <source>A simple example of an upgradable component is one that just has a template and a controller:</source>
          <target state="translated">アップグレード可能なコンポーネントの簡単な例としては、テンプレートとコントローラだけのものがあります。</target>
        </trans-unit>
        <trans-unit id="831871173da9a3d98859cf2d8c0391fd2eb59db2" translate="yes" xml:space="preserve">
          <source>A simple registry that maps &lt;code&gt;Components&lt;/code&gt; to generated &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; classes that can be used to create instances of components. Use to obtain the factory for a given component type, then use the factory's &lt;code&gt;create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">&lt;code&gt;Components&lt;/code&gt; をインスタンスの作成に使用できる生成された &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; クラスにマップする単純なレジストリ。を使用して、特定のコンポーネントタイプのファクトリを取得し、ファクトリの &lt;code&gt;create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="038f8b4a10895ec9960fbff4945296bdba224d59" translate="yes" xml:space="preserve">
          <source>A simple registry that maps &lt;code&gt;Components&lt;/code&gt; to generated &lt;code&gt;&lt;a href=&quot;core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; classes that can be used to create instances of components. Use to obtain the factory for a given component type, then use the factory's &lt;code&gt;create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">&lt;code&gt;Components&lt;/code&gt; をインスタンスの作成に使用できる生成された &lt;code&gt;&lt;a href=&quot;core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; クラスにマップする単純なレジストリ。を使用して、特定のコンポーネントタイプのファクトリを取得し、ファクトリの &lt;code&gt;create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="10044643dfe192b31c7905ba4ef722a290bd6c2d" translate="yes" xml:space="preserve">
          <source>A simple structural directive like this one creates an &lt;a href=&quot;../api/core/embeddedviewref&quot;&gt;&lt;em&gt;embedded view&lt;/em&gt;&lt;/a&gt; from the Angular-generated &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and inserts that view in a &lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;em&gt;view container&lt;/em&gt;&lt;/a&gt; adjacent to the directive's original &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; host element.</source>
          <target state="translated">このような単純な構造ディレクティブは、Angularが生成した &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; から&lt;a href=&quot;../api/core/embeddedviewref&quot;&gt;&lt;em&gt;埋め込みビュー&lt;/em&gt;&lt;/a&gt;を作成し、そのビューをディレクティブの元の &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ホスト要素に隣接する&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;em&gt;ビューコンテナーに&lt;/em&gt;&lt;/a&gt;挿入します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c50ef7c9d0ce699d0fb2c42cd53b333d4175593e" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;app.use()&lt;/code&gt; treats all other URLs as requests for static assets such as JavaScript, image, and style files.</source>
          <target state="translated">単一の &lt;code&gt;app.use()&lt;/code&gt; は、他のすべてのURLを、JavaScript、画像、スタイルファイルなどの静的アセットのリクエストとして扱います。</target>
        </trans-unit>
        <trans-unit id="6ae992f684a1e028d028d133f8cb994b73fe3c8f" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;server.use()&lt;/code&gt; treats all other URLs as requests for static assets such as JavaScript, image, and style files.</source>
          <target state="translated">単一の &lt;code&gt;server.use()&lt;/code&gt; は、他のすべてのURLをJavaScript、画像、スタイルファイルなどの静的アセットのリクエストとして扱います。</target>
        </trans-unit>
        <trans-unit id="f477973774e5df37770d2d52b18d6a9388386d89" translate="yes" xml:space="preserve">
          <source>A single async validator or array of async validator functions</source>
          <target state="translated">単一の非同期バリデータまたは非同期バリデータ関数の配列</target>
        </trans-unit>
        <trans-unit id="268541f7ed03574fdff1f3db74a50de2b9970447" translate="yes" xml:space="preserve">
          <source>A single async validator or array of async validator functions.</source>
          <target state="translated">単一の非同期バリデータまたは非同期バリデータ関数の配列。</target>
        </trans-unit>
        <trans-unit id="657bff2669641b3b4dbecfeb9504dbb0338142a2" translate="yes" xml:space="preserve">
          <source>A single workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is created at the top level of the workspace. This is where you can set per-project defaults for CLI command options, and specify configurations to use when the CLI builds a project for different targets.</source>
          <target state="translated">単一のワークスペース構成ファイル &lt;code&gt;angular.json&lt;/code&gt; は、ワークスペースの最上位に作成されます。ここで、CLIコマンドオプションのプロジェクトごとのデフォルトを設定し、CLIがさまざまなターゲットのプロジェクトをビルドするときに使用する構成を指定できます。</target>
        </trans-unit>
        <trans-unit id="5d6ef6cd0b6fc6f9f557a972f0f18f5be6fca3db" translate="yes" xml:space="preserve">
          <source>A singleton service is a service for which only one instance exists in an app.</source>
          <target state="translated">シングルトンサービスとは、アプリ内に1つのインスタンスしか存在しないサービスのことです。</target>
        </trans-unit>
        <trans-unit id="ac41fd92f261eb788e4ee3ddf422ff33e2eeca72" translate="yes" xml:space="preserve">
          <source>A special animation control binding called &lt;code&gt;@.disabled&lt;/code&gt; can be placed on an HTML element to disable animations on that element, as well as any nested elements. When true, the &lt;code&gt;@.disabled&lt;/code&gt; binding prevents all animations from rendering.</source>
          <target state="translated">&lt;code&gt;@.disabled&lt;/code&gt; と呼ばれる特別なアニメーションコントロールバインディングをHTML要素に配置して、その要素およびネストされた要素のアニメーションを無効にすることができます。trueの場合、 &lt;code&gt;@.disabled&lt;/code&gt; バインディングにより、すべてのアニメーションがレンダリングされなくなります。</target>
        </trans-unit>
        <trans-unit id="28a932b87bea89ca4c6d50864f98e96e807d3475" translate="yes" xml:space="preserve">
          <source>A special-purpose library or API; see &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;Domain-specific language&lt;/a&gt;. Angular extends TypeScript with domain-specific languages for a number of domains relevant to Angular apps, defined in NgModules such as &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt;, &lt;a href=&quot;forms&quot;&gt;forms&lt;/a&gt;, and &lt;a href=&quot;router&quot;&gt;routing and navigation&lt;/a&gt;.</source>
          <target state="translated">専用ライブラリまたはAPI; &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;ドメイン固有言語を&lt;/a&gt;参照してください。AngularはTypeScriptを拡張し、&lt;a href=&quot;animations&quot;&gt;アニメーション&lt;/a&gt;、&lt;a href=&quot;forms&quot;&gt;フォーム&lt;/a&gt;、&lt;a href=&quot;router&quot;&gt;ルーティング、ナビゲーション&lt;/a&gt;などのNgModulesで定義された、Angularアプリに関連するいくつかのドメインのドメイン固有言語を使用します。</target>
        </trans-unit>
        <trans-unit id="8d1c91cfd2fa14b6be729ec66d8172ea27c64e6a" translate="yes" xml:space="preserve">
          <source>A spy directive can provide insight into a DOM object that you cannot change directly. Obviously you can't touch the implementation of a native &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. You can't modify a third party component either. But you can watch both with a directive.</source>
          <target state="translated">スパイディレクティブは、直接変更できないDOMオブジェクトへの洞察を提供できます。もちろん、ネイティブの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; の実装には触れられません。サードパーティのコンポーネントも変更できません。ただし、ディレクティブを使用して両方を監視できます。</target>
        </trans-unit>
        <trans-unit id="5427f01892950cfa52619b7725aa1951b62e38aa" translate="yes" xml:space="preserve">
          <source>A spy directive like this can provide insight into a DOM object that you cannot change directly. You can't touch the implementation of a native &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, or modify a third party component. You can, however watch these elements with a directive.</source>
          <target state="translated">このようなスパイディレクティブは、直接変更できないDOMオブジェクトへの洞察を提供できます。ネイティブの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; の実装に触れたり、サードパーティのコンポーネントを変更したりすることはできません。ただし、ディレクティブを使用してこれらの要素を監視することはできます。</target>
        </trans-unit>
        <trans-unit id="7a34ef45b9243824ac8ad104edcd27a0ba07fb88" translate="yes" xml:space="preserve">
          <source>A spy for &lt;a href=&quot;../location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;../location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;のスパイ。</target>
        </trans-unit>
        <trans-unit id="069d78528aa32feecf64a53f5cad5729aab0a2e3" translate="yes" xml:space="preserve">
          <source>A spy for &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;のスパイ。</target>
        </trans-unit>
        <trans-unit id="70bf824cd7347a77618ce7faa1c6b086d7a03e3f" translate="yes" xml:space="preserve">
          <source>A state-change string takes the form &quot;state1 =&amp;gt; state2&quot;, where each side is a defined animation state, or an asterix (*) to refer to a dynamic start or end state.</source>
          <target state="translated">状態変更文字列は、「state1 =&amp;gt; state2」の形式をとります。各サイドは、定義されたアニメーション状態、または動的な開始または終了状態を示すアスタリスク（*）です。</target>
        </trans-unit>
        <trans-unit id="33d604ab8f39d07d37d2c30931848cefcdeac188" translate="yes" xml:space="preserve">
          <source>A static analysis tool that checks TypeScript code for readability, maintainability, and functionality errors.</source>
          <target state="translated">TypeScript コードの可読性、保守性、機能性のエラーをチェックする静的解析ツール。</target>
        </trans-unit>
        <trans-unit id="df0b2f1e108e2b0b27eaa546a2ef0116df1fff42" translate="yes" xml:space="preserve">
          <source>A static server routinely returns &lt;code&gt;index.html&lt;/code&gt; when it receives a request for &lt;code&gt;http://www.mysite.com/&lt;/code&gt;. But it rejects &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; and returns a &lt;code&gt;404 - Not Found&lt;/code&gt; error &lt;em&gt;unless&lt;/em&gt; it is configured to return &lt;code&gt;index.html&lt;/code&gt; instead.</source>
          <target state="translated">静的サーバーは、 &lt;code&gt;http://www.mysite.com/&lt;/code&gt; に対するリクエストを受け取ると、日常的に &lt;code&gt;index.html&lt;/code&gt; を返します。ただし、代わりに &lt;code&gt;index.html&lt;/code&gt; を返すように構成されてい&lt;em&gt;ない限り&lt;/em&gt;、 &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; を拒否し、 &lt;code&gt;404 - Not Found&lt;/code&gt; エラーを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb8aebeb140e3e794e8e71e965ce9b6a1d9b29a4" translate="yes" xml:space="preserve">
          <source>A strategy for extracting and merging URLs. Used for AngularJS to Angular migrations.</source>
          <target state="translated">URLを抽出してマージするための戦略。AngularJSからAngularへの移行に使用します。</target>
        </trans-unit>
        <trans-unit id="2e0742331cebdd301468cdb2b697b7e4360d857a" translate="yes" xml:space="preserve">
          <source>A strategy for re-using routes.</source>
          <target state="translated">ルートを再利用するための戦略。</target>
        </trans-unit>
        <trans-unit id="aff9c7c5b6b50fb73398838cd6862bb27d6daa66" translate="yes" xml:space="preserve">
          <source>A strategy for tracking changes over time to an iterable. Used by &lt;a href=&quot;../common/ngforof&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; to respond to changes in an iterable by effecting equivalent changes in the DOM.</source>
          <target state="translated">時間の経過に伴う変化をイテラブルに追跡するための戦略。DOMで同等の変更を行うことにより、&lt;a href=&quot;../common/ngforof&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt;変更に応答するためにNgForOfによって使用されます。</target>
        </trans-unit>
        <trans-unit id="9abae0d3fd0569dcd3f80cc31ed35dfda23db8af" translate="yes" xml:space="preserve">
          <source>A strategy for tracking changes over time to an iterable. Used by &lt;a href=&quot;common/ngforof&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; to respond to changes in an iterable by effecting equivalent changes in the DOM.</source>
          <target state="translated">時間の経過に伴う変化をイテラブルに追跡するための戦略。DOMで同等の変更を行うことにより、&lt;a href=&quot;common/ngforof&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt;変更に応答するためにNgForOfによって使用されます。</target>
        </trans-unit>
        <trans-unit id="0d666977cdc5d148eaadf69ff83a95bc8b0bbf90" translate="yes" xml:space="preserve">
          <source>A string containing the currency symbol or its name, such as &quot;$&quot; or &quot;Canadian Dollar&quot;. Used in output string, but does not affect the operation of the function.</source>
          <target state="translated">通貨記号またはその名前を含む文字列、例えば&quot;$&quot;や &quot;Canadian Dollar &quot;など。出力文字列で使用されますが、関数の動作には影響しません。</target>
        </trans-unit>
        <trans-unit id="d4f53e9917e374bd5c7a6e00fdeaf07cbebd1ecf" translate="yes" xml:space="preserve">
          <source>A string defining the template reference and optionally the context object for the template.</source>
          <target state="translated">テンプレート参照を定義する文字列。</target>
        </trans-unit>
        <trans-unit id="4218b63c689582c9116fc1d347ea4cff053ba011" translate="yes" xml:space="preserve">
          <source>A string of the form &lt;code&gt;path/to/file#exportName&lt;/code&gt; that acts as a URL for a set of routes to load, or a function that returns such a set.</source>
          <target state="translated">ロードする一連のルートのURLとして機能する &lt;code&gt;path/to/file#exportName&lt;/code&gt; 形式の文字列、またはそのようなセットを返す関数。</target>
        </trans-unit>
        <trans-unit id="5bb334481e943a7ec420d73477b9b7576ee9a9e4" translate="yes" xml:space="preserve">
          <source>A string of the form &lt;code&gt;path/to/file#exportName&lt;/code&gt; that acts as a URL for a set of routes to load.</source>
          <target state="translated">ロードする一連のルートのURLとして機能する &lt;code&gt;path/to/file#exportName&lt;/code&gt; 形式の文字列。</target>
        </trans-unit>
        <trans-unit id="18b1ff791f4ab843946300c849836dd8ec44680e" translate="yes" xml:space="preserve">
          <source>A string that Angular prepends to generated selectors. Can be customized to identify an app or feature area.</source>
          <target state="translated">Angularが生成されたセレクタに前置する文字列。アプリや機能領域を識別するためにカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="2914dab73943ac122db80220566ef9b74288319a" translate="yes" xml:space="preserve">
          <source>A structural directive in a template controls whether that template is rendered at run time, based on its input expression. To help the compiler catch template type errors, you should specify as closely as possible the required type of a directive's input expression when it occurs inside the template.</source>
          <target state="translated">テンプレート内の構造ディレクティブは、その入力式に基づいて、そのテンプレートが実行時にレンダリングされるかどうかを制御します。コンパイラがテンプレートの型のエラーをキャッチするのを助けるために、テンプレートの内部で発生するディレクティブの入力式の必要な型を可能な限り正確に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1d99e39af1598920c88efd736f47a905616a5462" translate="yes" xml:space="preserve">
          <source>A structural directive puts a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; to work as you'll see when you &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own structural directive&lt;/a&gt;.</source>
          <target state="translated">構造ディレクティブは、&lt;a href=&quot;structural-directives#unless&quot;&gt;独自の構造ディレクティブ&lt;/a&gt;を記述したときにわかるように、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; を機能させます。</target>
        </trans-unit>
        <trans-unit id="a7c157be16fc3a14b41213b09c95f55bf3708632" translate="yes" xml:space="preserve">
          <source>A structural directive that adds or removes templates (displaying or hiding views) when the next match expression matches the switch expression.</source>
          <target state="translated">次のマッチ式がスイッチ式にマッチしたときに、テンプレートを追加したり削除したりする(ビューを表示したり非表示にしたりする)構造ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="f748235af1be7e44e4598bbe98b3686222a813aa" translate="yes" xml:space="preserve">
          <source>A structural directive that conditionally includes a template based on the value of an expression coerced to Boolean. When the expression evaluates to true, Angular renders the template provided in a &lt;code&gt;then&lt;/code&gt; clause, and when false or null, Angular renders the template provided in an optional &lt;code&gt;else&lt;/code&gt; clause. The default template for the &lt;code&gt;else&lt;/code&gt; clause is blank.</source>
          <target state="translated">ブールに強制変換された式の値に基づくテンプレートを条件付きで含む構造ディレクティブ。式の評価がtrueの場合、Angularは &lt;code&gt;then&lt;/code&gt; 句で提供されるテンプレートをレンダリングし、falseまたはnullの場合、Angularはオプションの &lt;code&gt;else&lt;/code&gt; 句で提供されるテンプレートをレンダリングします。 &lt;code&gt;else&lt;/code&gt; 句のデフォルトのテンプレートは空白です。</target>
        </trans-unit>
        <trans-unit id="dd4680b4f9240c47bd096bcd0bf902e137cd81a4" translate="yes" xml:space="preserve">
          <source>A structure that provides metadata for a class. See &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">クラスのメタデータを提供する構造。&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7e009ff3bda9c17a3c21c70b9219d153da51904f" translate="yes" xml:space="preserve">
          <source>A subanimation can be queried by a parent and then later animated with the &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">サブアニメーションは、親によって照会され、後で &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; 関数でアニメーション化できます。</target>
        </trans-unit>
        <trans-unit id="41fa62814924dac89aa9ada1e279e24e67392f1e" translate="yes" xml:space="preserve">
          <source>A subscription to change, connect, and disconnect events in the custom element.</source>
          <target state="translated">カスタム要素のイベントを変更、接続、切断するためのサブスクリプション。</target>
        </trans-unit>
        <trans-unit id="6fc60237d9049bfebb9bf3c583da975aa13fe821" translate="yes" xml:space="preserve">
          <source>A subsection with &lt;strong&gt;markdown&lt;/strong&gt; formatted text.</source>
          <target state="translated">&lt;strong&gt;マークダウン&lt;/strong&gt;形式のテキストを含むサブセクション。</target>
        </trans-unit>
        <trans-unit id="75df14fc8d3c539ffce328700d6c2714508f544d" translate="yes" xml:space="preserve">
          <source>A synchronous &lt;code&gt;beforeEach()&lt;/code&gt; that performs the remaining setup.</source>
          <target state="translated">残りのセットアップを実行する同期 &lt;code&gt;beforeEach()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a1951e4b3a7997f917a0a8771a1c00faa7de411" translate="yes" xml:space="preserve">
          <source>A synchronous validator function, or an array of such functions, or an &lt;code&gt;&lt;a href=&quot;abstractcontroloptions&quot;&gt;AbstractControlOptions&lt;/a&gt;&lt;/code&gt; object that contains validation functions and a validation trigger.</source>
          <target state="translated">同期バリデータ関数、そのような関数の配列、または検証関数と検証トリガーを含む &lt;code&gt;&lt;a href=&quot;abstractcontroloptions&quot;&gt;AbstractControlOptions&lt;/a&gt;&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="befde9c22219217404a7df139ccb595c7e831e70" translate="yes" xml:space="preserve">
          <source>A tag attribute and value to match against, to identify an existing tag. A string in the format &lt;code&gt;&quot;tag_attribute=&lt;/code&gt;value string&lt;code&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">既存のタグを識別するために照合するタグの属性と値。書式の文字列 &lt;code&gt;&quot;tag_attribute=&lt;/code&gt; 値文字列 &lt;code&gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6e224e4f989af7846e2dfe04c39a6706011c1c1" translate="yes" xml:space="preserve">
          <source>A tag attribute and value to match against, to identify an existing tag. A string in the format &lt;code&gt;&quot;tag_attribute=&lt;/code&gt;value string&lt;code&gt;&quot;&lt;/code&gt;. If not supplied, matches a tag with the same &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;property&lt;/code&gt; attribute value as the replacement tag.</source>
          <target state="translated">既存のタグを識別するために照合するタグの属性と値。書式の文字列 &lt;code&gt;&quot;tag_attribute=&lt;/code&gt; 値文字列 &lt;code&gt;&quot;&lt;/code&gt; 。指定しない場合、置換タグと同じ &lt;code&gt;name&lt;/code&gt; または &lt;code&gt;property&lt;/code&gt; 属性値を持つタグと一致します。</target>
        </trans-unit>
        <trans-unit id="8e602fb0822cd1e41b2e8635d1b7e2ee92f0fc30" translate="yes" xml:space="preserve">
          <source>A target for global event notifications. One of &quot;window&quot;, &quot;document&quot;, or &quot;body&quot;.</source>
          <target state="translated">グローバルイベント通知の対象。window&quot;、&quot;document&quot;、&quot;body &quot;のいずれか。</target>
        </trans-unit>
        <trans-unit id="c49e4e510fb773309907c7090d51199cb5646ab2" translate="yes" xml:space="preserve">
          <source>A technique for adding a component to the DOM at run time. Requires that you exclude the component from compilation and then connect it to Angular's change-detection and event-handling framework when you add it to the DOM.</source>
          <target state="translated">実行時にコンポーネントを DOM に追加するテクニックです。コンポーネントをコンパイルから除外し、DOMに追加する際にAngularの変更検出とイベント処理フレームワークに接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e91a35d0e33492ee4275f0669de02e4f926b6fa" translate="yes" xml:space="preserve">
          <source>A technique that generates static application pages on the server, and can generate and serve those pages in response to requests from browsers. It can also pre-generate pages as HTML files that you serve later.</source>
          <target state="translated">サーバー上に静的なアプリケーションページを生成し、ブラウザからのリクエストに応じてそれらのページを生成して提供することができる技術です。また、ページを HTML ファイルとして事前に生成し、後で提供することもできます。</target>
        </trans-unit>
        <trans-unit id="638899fd7ea8912375736917813c496e0c94cec3" translate="yes" xml:space="preserve">
          <source>A template &lt;em&gt;reference&lt;/em&gt; variable (&lt;code&gt;#phone&lt;/code&gt;) is not the same as a template &lt;em&gt;input&lt;/em&gt; variable (&lt;code&gt;let phone&lt;/code&gt;) such as in an &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;Structural Directives&lt;/em&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">テンプレート&lt;em&gt;参照&lt;/em&gt;変数（ &lt;code&gt;#phone&lt;/code&gt; ）は、&lt;a href=&quot;template-syntax#template-input-variable&quot;&gt; &lt;code&gt;*ngFor&lt;/code&gt; &lt;/a&gt;などのテンプレート&lt;em&gt;入力&lt;/em&gt;変数（ &lt;code&gt;let phone&lt;/code&gt; ）とは異なります。詳細については、&lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;構造指令&lt;/em&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1dfbac8c9633ea6918e4e33ebf0a38f1b1944721" translate="yes" xml:space="preserve">
          <source>A template &lt;strong&gt;expression&lt;/strong&gt; produces a value and appears within the double curly braces, &lt;code&gt;{{ }}&lt;/code&gt;. Angular executes the expression and assigns it to a property of a binding target; the target could be an HTML element, a component, or a directive.</source>
          <target state="translated">テンプレート&lt;strong&gt;式&lt;/strong&gt;は値を生成し、二重中括弧 &lt;code&gt;{{ }}&lt;/code&gt; 内に表示されます。Angularは式を実行し、それをバインディングターゲットのプロパティに割り当てます。ターゲットは、HTML要素、コンポーネント、またはディレクティブです。</target>
        </trans-unit>
        <trans-unit id="3399fe86e1c043a76a747559ebc2584954d3d035" translate="yes" xml:space="preserve">
          <source>A template &lt;strong&gt;statement&lt;/strong&gt; responds to an &lt;strong&gt;event&lt;/strong&gt; raised by a binding target such as an element, component, or directive. You'll see template statements in the &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; section, appearing in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt;.</source>
          <target state="translated">テンプレート&lt;strong&gt;ステートメント&lt;/strong&gt;は、要素、コンポーネント、ディレクティブなどのバインディングターゲットによって発生した&lt;strong&gt;イベントに&lt;/strong&gt;応答します。 &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt; のように、 &lt;code&gt;=&lt;/code&gt; 記号の右側の引用符で囲まれた&lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベントバインディング&lt;/a&gt;セクションにテンプレートステートメントが表示されます。</target>
        </trans-unit>
        <trans-unit id="3ba264b05103cceb73a697cb4002c6fe302d7682" translate="yes" xml:space="preserve">
          <source>A template can also have any number of &lt;em&gt;named&lt;/em&gt; outlets. Each named outlet has its own set of routes with their own components. Multiple outlets can be displaying different content, determined by different routes, all at the same time.</source>
          <target state="translated">テンプレートには、&lt;em&gt;名前付き&lt;/em&gt;アウトレットをいくつでも含めることができます。それぞれの名前付きアウトレットには、独自のコンポーネントを持つ独自のルートのセットがあります。複数のアウトレットが、さまざまなルートによって決定されるさまざまなコンテンツをすべて同時に表示できます。</target>
        </trans-unit>
        <trans-unit id="c74619a725ffaff0db4df371ddffbe5b0ac4fb3a" translate="yes" xml:space="preserve">
          <source>A template can also have any number of named outlets. Each named outlet has its own set of routes with their own components. Multiple outlets can display different content, determined by different routes, all at the same time.</source>
          <target state="translated">テンプレートは任意の数の名前付きアウトレットを持つこともできます。それぞれの名前付きアウトレットは、それぞれのコンポーネントを持つ独自のルートのセットを持っています。複数のアウトレットは、異なるルートによって決定された異なるコンテンツを同時に表示することができます。</target>
        </trans-unit>
        <trans-unit id="e53e96f015d564a357a09d35601208b867f150ce" translate="yes" xml:space="preserve">
          <source>A template can use exported declarables from any imported module, including those from modules that are imported indirectly and re-exported. For example, &lt;code&gt;ModuleA&lt;/code&gt; imports &lt;code&gt;ModuleB&lt;/code&gt;, and also exports it, which makes the declarables from &lt;code&gt;ModuleB&lt;/code&gt; available wherever &lt;code&gt;ModuleA&lt;/code&gt; is imported.</source>
          <target state="translated">テンプレートは、間接的にインポートされて再エクスポートされたモジュールからの宣言を含む、インポートされたモジュールからエクスポートされた宣言を使用できます。例えば、 &lt;code&gt;ModuleA&lt;/code&gt; の輸入 &lt;code&gt;ModuleB&lt;/code&gt; からdeclarablesになりた、ともそれをエクスポート &lt;code&gt;ModuleB&lt;/code&gt; がどこに利用できる &lt;code&gt;ModuleA&lt;/code&gt; がインポートされます。</target>
        </trans-unit>
        <trans-unit id="390c41bd3a5d88b462a0eb30f1966d9bfe67ea64" translate="yes" xml:space="preserve">
          <source>A template combines HTML with Angular markup that can modify HTML elements before they are displayed. Template &lt;em&gt;directives&lt;/em&gt; provide program logic, and &lt;em&gt;binding markup&lt;/em&gt; connects your application data and the DOM. There are two types of data binding:</source>
          <target state="translated">テンプレートは、HTMLとAngularマークアップを組み合わせて、HTML要素を表示する前に変更できるようにします。テンプレート&lt;em&gt;ディレクティブ&lt;/em&gt;はプログラムロジックを提供し、&lt;em&gt;バインディングマークアップ&lt;/em&gt;はアプリケーションデータとDOMを接続します。データバインディングには次の2つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="26d7d91bd3438a33922e9f989bb798c48de79ba5" translate="yes" xml:space="preserve">
          <source>A template combines straight HTML with Angular &lt;a href=&quot;glossary#data-binding&quot;&gt;data-binding&lt;/a&gt; syntax, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#template-expression&quot;&gt;template expressions&lt;/a&gt; (logical constructs). The Angular elements insert or calculate values that modify the HTML elements before the page is displayed.</source>
          <target state="translated">テンプレートは、ストレートHTMLとAngular &lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;構文、&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;、&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート式&lt;/a&gt;（論理構造）を組み合わせたものです。Angular要素は、ページが表示される前にHTML要素を変更する値を挿入または計算します。</target>
        </trans-unit>
        <trans-unit id="dc29d430b581a8b3e55bd43c8c421f291754c56b" translate="yes" xml:space="preserve">
          <source>A template combines straight HTML with Angular &lt;a href=&quot;glossary#data-binding&quot;&gt;data-binding&lt;/a&gt; syntax, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#template-expression&quot;&gt;template expressions&lt;/a&gt; (logical constructs). The Angular elements insert or calculate values that modify the HTML elements before the page is displayed. Learn more about Angular template language in the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; guide.</source>
          <target state="translated">テンプレートは、ストレートHTMLと、Angular&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;構文、&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;、および&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート式&lt;/a&gt;（論理構造）を組み合わせたものです。Angular要素は、ページが表示される前にHTML要素を変更する値を挿入または計算します。&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;ガイドでAngularテンプレート言語の詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ca4b36d852a5dbc636450f6d6cb045bf3c47fd25" translate="yes" xml:space="preserve">
          <source>A template expression should evaluate to the type of value that the target property expects. For example, return a string if the target property expects a string, a number if it expects a number, or an object if it expects an object.</source>
          <target state="translated">テンプレート式は、ターゲット・プロパティが期待する値のタイプに合わせて評価する必要があります。例えば、ターゲット・プロパティが文字列を期待している場合は文字列を、数値を期待している場合は数値を、オブジェクトを期待している場合はオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="8d2e74a99424e6bcbe0ee669cd69bc0cd5375754" translate="yes" xml:space="preserve">
          <source>A template expression should not change any application state other than the value of the target property.</source>
          <target state="translated">テンプレート式は、ターゲット・プロパティの値以外のアプリケーションの状態を変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="8bcf2e0744c70c16fe32c87be0430556dbba2654" translate="yes" xml:space="preserve">
          <source>A template file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.html&lt;/code&gt;</source>
          <target state="translated">テンプレートファイル &lt;code&gt;&amp;lt;component-name&amp;gt;.component.html&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcf8ef69c4517e917aa5941f39aaaa4f67449dac" translate="yes" xml:space="preserve">
          <source>A template is a block of HTML that tells Angular how to render the component in your application. You can define a template for your component in one of two ways: by referencing an external file, or directly within the component.</source>
          <target state="translated">テンプレートはHTMLのブロックで、アプリケーション内のコンポーネントをどのようにレンダリングするかをAngularに指示します。コンポーネントのテンプレートを定義するには、外部ファイルを参照する方法と、コンポーネント内で直接定義する方法の2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="e33dd4bd068742d5ab887b97cccd5bd5dce1b8d8" translate="yes" xml:space="preserve">
          <source>A template is associated with a &lt;a href=&quot;glossary#component&quot;&gt;component class&lt;/a&gt; through the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. The template code can be provided inline, as the value of the &lt;code&gt;template&lt;/code&gt; property, or in a separate HTML file linked through the &lt;code&gt;templateUrl&lt;/code&gt; property.</source>
          <target state="translated">テンプレートは、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータを&lt;/a&gt;介して&lt;a href=&quot;glossary#component&quot;&gt;コンポーネントクラスに&lt;/a&gt;関連付けられます。テンプレートコードは、 &lt;code&gt;template&lt;/code&gt; プロパティの値としてインラインで提供することも、 &lt;code&gt;templateUrl&lt;/code&gt; プロパティを介してリンクされた別のHTMLファイルで提供することもできます。</target>
        </trans-unit>
        <trans-unit id="f48dc3bdb1500520689adb8438d8eb72cfeab345" translate="yes" xml:space="preserve">
          <source>A template is associated with a &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; class through the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. The HTML can be provided inline, as the value of the &lt;code&gt;template&lt;/code&gt; property, or in a separate HTML file linked through the &lt;code&gt;templateUrl&lt;/code&gt; property.</source>
          <target state="translated">テンプレートは、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータを&lt;/a&gt;介して&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;クラスに関連付けられます。HTMLは、 &lt;code&gt;template&lt;/code&gt; プロパティの値としてインラインで、または &lt;code&gt;templateUrl&lt;/code&gt; プロパティを介してリンクされた別のHTMLファイルで提供できます。</target>
        </trans-unit>
        <trans-unit id="79091c1a52a2c3efbb6119802157bc2315a22661" translate="yes" xml:space="preserve">
          <source>A template looks like regular HTML, except that it also contains Angular &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt;, which alters the HTML based on your app's logic and the state of app and DOM data. Your template can use &lt;em&gt;data binding&lt;/em&gt; to coordinate the app and DOM data, &lt;em&gt;pipes&lt;/em&gt; to transform data before it is displayed, and &lt;em&gt;directives&lt;/em&gt; to apply app logic to what gets displayed.</source>
          <target state="translated">テンプレートは通常のHTMLのように見えますが、アプリのロジックとアプリの状態とDOMデータに基づいてHTMLを変更するAngular &lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;も含まれています。テンプレートは、&lt;em&gt;データバインディング&lt;/em&gt;を使用してアプリとDOMデータを調整し、&lt;em&gt;パイプ&lt;/em&gt;を使用して&lt;em&gt;データを&lt;/em&gt;表示する前に変換し、&lt;em&gt;ディレクティブ&lt;/em&gt;を使用して、表示されるものにアプリロジックを適用できます。</target>
        </trans-unit>
        <trans-unit id="7c5bb4b558793d400799ee501153dd43050c0f50" translate="yes" xml:space="preserve">
          <source>A template reference variable as a string (e.g. query &lt;code&gt;&amp;lt;my-component #cmp&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('cmp')&lt;/code&gt;)</source>
          <target state="translated">文字列としてテンプレート参照変数（例えばクエリ &lt;code&gt;&amp;lt;my-component #cmp&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('cmp')&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a64371e181e13f663c10dd5156afe9284379b619" translate="yes" xml:space="preserve">
          <source>A template statement &lt;em&gt;has a side effect&lt;/em&gt;. That's the whole point of an event. It's how you update application state from user action.</source>
          <target state="translated">テンプレートステートメント&lt;em&gt;には副作用があります&lt;/em&gt;。それがイベントの要点です。ユーザーのアクションからアプリケーションの状態を更新する方法です。</target>
        </trans-unit>
        <trans-unit id="057331b0bba82c6918603985ae29364ad82f9aad" translate="yes" xml:space="preserve">
          <source>A template string</source>
          <target state="translated">テンプレート文字列</target>
        </trans-unit>
        <trans-unit id="44907ef29b35716829be6e0df33741d8a03a2331" translate="yes" xml:space="preserve">
          <source>A template to show if the condition expression evaluates to false.</source>
          <target state="translated">条件式がFalseとして評価されるかどうかを示すテンプレート。</target>
        </trans-unit>
        <trans-unit id="e5e7d10908e311e46e226f49b73a51107d39d05e" translate="yes" xml:space="preserve">
          <source>A template to show if the condition expression evaluates to true.</source>
          <target state="translated">条件式が真と評価されるかどうかを示すテンプレート。</target>
        </trans-unit>
        <trans-unit id="92d3bf38d68206a60bfa9d1ecf60b0c1ac977333" translate="yes" xml:space="preserve">
          <source>A template variable can refer to the following:</source>
          <target state="translated">テンプレート変数は以下を参照することができます。</target>
        </trans-unit>
        <trans-unit id="082f2b84e3cf46271310c2eefe1584ca33c55ef0" translate="yes" xml:space="preserve">
          <source>A template with no substitutions</source>
          <target state="translated">置換のないテンプレート</target>
        </trans-unit>
        <trans-unit id="11a65ba35becc62fa80f1bb7d7ca46f919cd6a55" translate="yes" xml:space="preserve">
          <source>A template with substitutions</source>
          <target state="translated">置換が可能なテンプレート</target>
        </trans-unit>
        <trans-unit id="d55dc070f82d41692707274fa414fd9f75b4f218" translate="yes" xml:space="preserve">
          <source>A test cannot get to child injector services from the fixture injector. And &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; can't configure them either.</source>
          <target state="translated">テストは、フィクスチャインジェクタから子インジェクタサービスに到達できません。また、 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; もそれらを構成できません。</target>
        </trans-unit>
        <trans-unit id="3396b2f93458c83e5c6436663b0c4629c04034fb" translate="yes" xml:space="preserve">
          <source>A test file for the &lt;code&gt;HeroDetailComponent&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; クラスのテストファイル。</target>
        </trans-unit>
        <trans-unit id="a5e89591a33721c9c03642dd549672c070aa717e" translate="yes" xml:space="preserve">
          <source>A testing specification file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.spec.ts&lt;/code&gt;</source>
          <target state="translated">テスト仕様ファイル &lt;code&gt;&amp;lt;component-name&amp;gt;.component.spec.ts&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b2009af28e4f188315adb0666f75bfca6c5c409" translate="yes" xml:space="preserve">
          <source>A timezone offset (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US timezone abbreviation. When not supplied, uses the end-user's local system timezone.</source>
          <target state="translated">タイムゾーンオフセット（ &lt;code&gt;'+0430'&lt;/code&gt; など）、または標準のUTC / GMTまたは米国大陸のタイムゾーンの省略形。指定しない場合、エンドユーザーのローカルシステムのタイムゾーンを使用します。</target>
        </trans-unit>
        <trans-unit id="3431cf9e8ee99a6d7d9fd3952d9c908a92bcfaba" translate="yes" xml:space="preserve">
          <source>A token for third-party components that can register themselves with NgProbe.</source>
          <target state="translated">NgProbeに自分自身を登録できるサードパーティコンポーネント用のトークン。</target>
        </trans-unit>
        <trans-unit id="a9a9d7fdd066f2cb6c96314f0d24057d8fb2d63e" translate="yes" xml:space="preserve">
          <source>A token that indicates an opaque platform ID.</source>
          <target state="translated">不透明なプラットフォームIDを示すトークン。</target>
        </trans-unit>
        <trans-unit id="0a3fbe53af4b12fee9f2a0eafc013a35704bbb6c" translate="yes" xml:space="preserve">
          <source>A token that indicates an opaque platform id.</source>
          <target state="translated">不透明なプラットフォームIDを示すトークン。</target>
        </trans-unit>
        <trans-unit id="dc797053d7adf8d5699b3d3c81f1fe17f0afb422" translate="yes" xml:space="preserve">
          <source>A token which indicates the root directory of the application</source>
          <target state="translated">アプリケーションのルートディレクトリを示すトークン</target>
        </trans-unit>
        <trans-unit id="750533e8c4c0470f8b0ed496f42ee55152feb250" translate="yes" xml:space="preserve">
          <source>A tool for implementing &lt;a href=&quot;glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; of an Angular application. When integrated with an app, Universal generates and serves static pages on the server in response to requests from browsers. The initial static page serves as a fast-loading placeholder while the full application is being prepared for normal execution in the browser.</source>
          <target state="translated">Angularアプリケーションの&lt;a href=&quot;glossary#server-side-rendering&quot;&gt;サーバー側レンダリング&lt;/a&gt;を実装するためのツール。Universalは、アプリと統合されると、ブラウザーからのリクエストに応じてサーバー上に静的ページを生成して提供します。最初の静的ページは、ブラウザでの通常の実行のためにアプリケーション全体が準備されている間、高速読み込みのプレースホルダーとして機能します。</target>
        </trans-unit>
        <trans-unit id="86777609ab9ebd69c3463a9cbae4498b9a7f9dba" translate="yes" xml:space="preserve">
          <source>A tool that configures and implements navigation among states and &lt;a href=&quot;glossary#view&quot;&gt;views&lt;/a&gt; within an Angular app.</source>
          <target state="translated">Angularアプリ内の状態と&lt;a href=&quot;glossary#view&quot;&gt;ビュー&lt;/a&gt;間のナビゲーションを構成および実装するツール。</target>
        </trans-unit>
        <trans-unit id="c54f42d3f2be1b7a7ae5c194f6735dcf1a14ce7e" translate="yes" xml:space="preserve">
          <source>A transformation is represented by an &lt;code&gt;Action&lt;/code&gt;. There are four action types: &lt;code&gt;&lt;a href=&quot;schematics-authoring&quot;&gt;Create&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Rename&lt;/code&gt;, &lt;code&gt;Overwrite&lt;/code&gt;, and &lt;code&gt;Delete&lt;/code&gt;.</source>
          <target state="translated">変換は &lt;code&gt;Action&lt;/code&gt; によって表されます。アクションタイプには、 &lt;code&gt;&lt;a href=&quot;schematics-authoring&quot;&gt;Create&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Rename&lt;/code&gt; 、 &lt;code&gt;Overwrite&lt;/code&gt; 、および &lt;code&gt;Delete&lt;/code&gt; の 4つがあります。</target>
        </trans-unit>
        <trans-unit id="9d6ff053e068aad00a4ddd675c703d373675737c" translate="yes" xml:space="preserve">
          <source>A transformation is represented by an &lt;code&gt;Action&lt;/code&gt;. There are four action types: &lt;code&gt;Create&lt;/code&gt;, &lt;code&gt;Rename&lt;/code&gt;, &lt;code&gt;Overwrite&lt;/code&gt;, and &lt;code&gt;Delete&lt;/code&gt;.</source>
          <target state="translated">変換は &lt;code&gt;Action&lt;/code&gt; 表されます。アクションタイプには、 &lt;code&gt;Create&lt;/code&gt; 、 &lt;code&gt;Rename&lt;/code&gt; 、 &lt;code&gt;Overwrite&lt;/code&gt; 、 &lt;code&gt;Delete&lt;/code&gt; 4つがあります。</target>
        </trans-unit>
        <trans-unit id="d1cb3643786137426ab03452ee4b52f1154d1746" translate="yes" xml:space="preserve">
          <source>A transition of &lt;code&gt;* =&amp;gt; void&lt;/code&gt; applies when the element leaves a view, regardless of what state it was in before it left.</source>
          <target state="translated">&lt;code&gt;* =&amp;gt; void&lt;/code&gt; 遷移は、要素がビューを離れるときに適用されます。要素が去る前の状態に関係はありません。</target>
        </trans-unit>
        <trans-unit id="05cb012e28ee419aa65bdc4e6520a11fc4ae45fa" translate="yes" xml:space="preserve">
          <source>A transition of &lt;code&gt;void =&amp;gt; *&lt;/code&gt; applies when the element enters a view, regardless of what state it assumes when entering.</source>
          <target state="translated">要素がビューに入るとき、入るときにどのような状態になるかに関わらず、 &lt;code&gt;void =&amp;gt; *&lt;/code&gt; 遷移が適用されます。</target>
        </trans-unit>
        <trans-unit id="ae50d3a159b63d59db6835e63e990ed69b823e6c" translate="yes" xml:space="preserve">
          <source>A tree of related views that can be acted on as a unit. The root view is a component's &lt;em&gt;host view&lt;/em&gt;. A host view can be the root of a tree of &lt;em&gt;embedded views&lt;/em&gt;, collected in a &lt;em&gt;view container&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;) attached to an anchor element in the hosting component. The view hierarchy is a key part of Angular &lt;a href=&quot;glossary#change-detection&quot;&gt;change detection&lt;/a&gt;.</source>
          <target state="translated">ユニットとして機能できる関連ビューのツリー。ルートビューは、コンポーネントの&lt;em&gt;ホストビュー&lt;/em&gt;です。ホストビューは、ホスティングコンポーネントのアンカー要素にアタッチされた&lt;em&gt;ビューコンテナ&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; ）に収集された&lt;em&gt;埋め込みビューの&lt;/em&gt;ツリーのルートにすることができます。ビュー階層は、角度&lt;a href=&quot;glossary#change-detection&quot;&gt;変化検出の&lt;/a&gt;重要な部分です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6e59e7be860571130a89e00f1b9b8b7f8d38f516" translate="yes" xml:space="preserve">
          <source>A tree of related views that can be acted on as a unit. The root view is a component's &lt;em&gt;host view&lt;/em&gt;. A host view can be the root of a tree of &lt;em&gt;embedded views&lt;/em&gt;, collected in a &lt;em&gt;view container&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;) attached to an anchor element in the hosting component. The view hierarchy is a key part of Angular change detection.</source>
          <target state="translated">ユニットとして動作できる関連ビューのツリー。ルートビューは、コンポーネントの&lt;em&gt;ホストビュー&lt;/em&gt;です。ホストビューは、ホストコンポーネントのアンカー要素にアタッチされた&lt;em&gt;ビューコンテナー&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; ）に収集された、&lt;em&gt;埋め込みビューの&lt;/em&gt;ツリーのルートになることができます。ビュー階層は、角度変化検出の重要な部分です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a02ea2a87c37f17abc59ef229c4fd425acb9c7da" translate="yes" xml:space="preserve">
          <source>A type describing supported iterable types.</source>
          <target state="translated">サポートされている反復可能な型を記述した型。</target>
        </trans-unit>
        <trans-unit id="0503256c30d3856cec6c86a359e1fe6f813617cc" translate="yes" xml:space="preserve">
          <source>A type guard function &lt;em&gt;narrows&lt;/em&gt; the expected type of an input expression to a subset of types that might be passed to the directive within the template at run time. You can provide such a function to help the type-checker infer the proper type for the expression at compile time.</source>
          <target state="translated">型ガード関数は、入力式の予想される型を、実行時にテンプレート内のディレクティブに渡される可能性のある型のサブセットに&lt;em&gt;絞り込み&lt;/em&gt;ます。このような関数を提供して、型チェッカーがコンパイル時に式の適切な型を推測できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="33e690ef836ea3f977ab4c03c92edfc886056a6d" translate="yes" xml:space="preserve">
          <source>A type which has an &lt;code&gt;InjectorDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;InjectorDef&lt;/code&gt; 静的フィールドを持つタイプ。</target>
        </trans-unit>
        <trans-unit id="f80508473c7b513f595b1cb4b98a01bc9da3485e" translate="yes" xml:space="preserve">
          <source>A type-checking error that you cannot resolve with any of the recommended methods can be the result of a bug in the template type-checker itself. If you get errors that require falling back to basic mode, it is likely to be such a bug. If this happens, please &lt;a href=&quot;https://github.com/angular/angular/issues&quot;&gt;file an issue&lt;/a&gt; so the team can address it.</source>
          <target state="translated">推奨される方法では解決できない型チェックエラーは、テンプレート型チェッカー自体のバグの結果である可能性があります。基本モードにフォールバックする必要があるエラーが発生した場合は、そのようなバグである可能性があります。これが発生した場合は、チームが対処できるように&lt;a href=&quot;https://github.com/angular/angular/issues&quot;&gt;問題&lt;/a&gt;を提出してください。</target>
        </trans-unit>
        <trans-unit id="ae35e25b3a17753868983fbc14ff9da764e93c33" translate="yes" xml:space="preserve">
          <source>A type-safe key to use with &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で使用するタイプセーフなキー。</target>
        </trans-unit>
        <trans-unit id="a94b413e4eb2a589981d65abc4b675155b3b29ec" translate="yes" xml:space="preserve">
          <source>A type-safe key to use with &lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で使用するタイプセーフなキー。</target>
        </trans-unit>
        <trans-unit id="0d98ac55299036bd42506b5415a7d31cbe5c1907" translate="yes" xml:space="preserve">
          <source>A typical Angular &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; has two properties:</source>
          <target state="translated">典型的なAngular &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; には2つのプロパティがあります：</target>
        </trans-unit>
        <trans-unit id="24a4ca795d901e7c49a75e02fe55ebd39322b087" translate="yes" xml:space="preserve">
          <source>A typical application has multiple &lt;em&gt;feature areas&lt;/em&gt;, each dedicated to a particular business purpose.</source>
          <target state="translated">典型的なアプリケーションには複数の&lt;em&gt;機能領域があり&lt;/em&gt;、それぞれが特定のビジネス目的専用です。</target>
        </trans-unit>
        <trans-unit id="f656950592185e57e214008ee404a88c8a15dff5" translate="yes" xml:space="preserve">
          <source>A typical application has multiple feature areas, each dedicated to a particular business purpose with its own folder.</source>
          <target state="translated">典型的なアプリケーションには複数の機能エリアがあり、それぞれが特定のビジネス目的に特化した専用のフォルダを持っています。</target>
        </trans-unit>
        <trans-unit id="26787fe4fae606ede8cac23bac2c0cb951bed0bf" translate="yes" xml:space="preserve">
          <source>A typical approach is to divide the setup logic into two separate &lt;code&gt;beforeEach()&lt;/code&gt; functions:</source>
          <target state="translated">典型的なアプローチは、セットアップロジックを2つの個別の &lt;code&gt;beforeEach()&lt;/code&gt; 関数に分割することです。</target>
        </trans-unit>
        <trans-unit id="7c474d7be28289c26fb2cb0462ed89fae7757973" translate="yes" xml:space="preserve">
          <source>A typical document is divided into sections.</source>
          <target state="translated">一般的な文書は、セクションに分かれています。</target>
        </trans-unit>
        <trans-unit id="b5b9f703ac80e450aa4a443b41089755919ef872" translate="yes" xml:space="preserve">
          <source>A typical observable creates a new, independent execution for each subscribed observer. When an observer subscribes, the observable wires up an event handler and delivers values to that observer. When a second observer subscribes, the observable then wires up a new event handler and delivers values to that second observer in a separate execution.</source>
          <target state="translated">典型的なオブザーバブルは、サブスクライブされたオブザーバごとに新しい独立した実行を作成します。オブザーバがサブスクライブすると、オブザーバはイベントハンドラを配線し、そのオブザーバに値を配信します。2 番目のオブザーバがサブスクライブすると、オブザーバブルは新しいイベントハンドラを配線し、別の実行でその 2 番目のオブザーバに値を配信します。</target>
        </trans-unit>
        <trans-unit id="7eabee7b22161b44ff415f2896826a49c8a000d0" translate="yes" xml:space="preserve">
          <source>A unique ID that the router assigns to every router navigation.</source>
          <target state="translated">ルータがすべてのルータのナビゲーションに割り当てる一意のID。</target>
        </trans-unit>
        <trans-unit id="29e9cf47b6056f1b3b0cda3416faf873adbe8c8e" translate="yes" xml:space="preserve">
          <source>A unique identifying string for the new renderer, used when creating unique styles for encapsulation.</source>
          <target state="translated">新しいレンダラーの一意の識別文字列で、カプセル化のために一意のスタイルを作成する際に使用します。</target>
        </trans-unit>
        <trans-unit id="f3182da4f20c4f27c308548ad05030cad96917d2" translate="yes" xml:space="preserve">
          <source>A unique object used for retrieving items from the &lt;a href=&quot;core/reflectiveinjector&quot;&gt;&lt;code&gt;ReflectiveInjector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;core/reflectiveinjector&quot;&gt; &lt;code&gt;ReflectiveInjector&lt;/code&gt; &lt;/a&gt;から項目を取得するために使用される一意のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4a0d2765e60989cc727ab39d030ef625be61f3b9" translate="yes" xml:space="preserve">
          <source>A unique object used for retrieving items from the &lt;a href=&quot;reflectiveinjector&quot;&gt;&lt;code&gt;ReflectiveInjector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;reflectiveinjector&quot;&gt; &lt;code&gt;ReflectiveInjector&lt;/code&gt; &lt;/a&gt;から項目を取得するために使用される一意のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b3a652fe176680f1e89a47b89c194765f8151b6d" translate="yes" xml:space="preserve">
          <source>A user opens the app for the first time and the service worker caches the latest version of the app. Let's assume the app's cached assets include &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;main.&amp;lt;main-hash-1&amp;gt;.js&lt;/code&gt; and &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt;.</source>
          <target state="translated">ユーザーが初めてアプリを開き、ServiceWorkerがアプリの最新バージョンをキャッシュします。アプリのキャッシュアセットに &lt;code&gt;index.html&lt;/code&gt; 、 &lt;code&gt;main.&amp;lt;main-hash-1&amp;gt;.js&lt;/code&gt; 、 &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt; 含まれていると仮定します。</target>
        </trans-unit>
        <trans-unit id="fcec1b9a7310dc3bbc9f1127516c0c07560407ac" translate="yes" xml:space="preserve">
          <source>A user-defined event.</source>
          <target state="translated">ユーザー定義のイベント。</target>
        </trans-unit>
        <trans-unit id="47141a912c3b81d6dba9a3002b028c3101fe15d6" translate="yes" xml:space="preserve">
          <source>A validator is a function that processes a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; or collection of controls and returns an error map or null. A null map means that validation has passed.</source>
          <target state="translated">バリデーターは、 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; またはコントロールのコレクションを処理し、エラーマップまたはnullを返す関数です。nullマップは、検証が成功したことを意味します。</target>
        </trans-unit>
        <trans-unit id="92f5a26322860fd17d5f20b77b21fc93ff771bd2" translate="yes" xml:space="preserve">
          <source>A value of any type to convert into a JSON-format string.</source>
          <target state="translated">JSON形式の文字列に変換する任意の型の値。</target>
        </trans-unit>
        <trans-unit id="784ae6364da5e286e850c7f0e05dd419d1544771" translate="yes" xml:space="preserve">
          <source>A variable defined in a template that references an instance associated with an element, such as a directive instance, component instance, template as in &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;, or DOM element. After declaring a template reference variable on an element in a template, you can access values from that variable elsewhere within the same template. The following example defines a template reference variable named &lt;code&gt;#phone&lt;/code&gt;.</source>
          <target state="translated">ディレクティブインスタンス、コンポーネントインスタンス、TemplateRefのような &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 、DOM要素など、要素に関連付けられたインスタンスを参照するテンプレートで定義された変数。テンプレート内の要素でテンプレート参照変数を宣言した後、同じテンプレート内の他の場所でその変数の値にアクセスできます。次の例では、 &lt;code&gt;#phone&lt;/code&gt; という名前のテンプレート参照変数を定義しています。</target>
        </trans-unit>
        <trans-unit id="42ec4d1e4e503f137f8b089944e907a8be6250c1" translate="yes" xml:space="preserve">
          <source>A view container instance can contain other view containers, creating a &lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;view hierarchy&lt;/a&gt;.</source>
          <target state="translated">ビューコンテナインスタンスには他のビューコンテナを含めることができ、&lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;ビュー階層を&lt;/a&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="c584c12a9194e47599b4dcef87afa7f889356068" translate="yes" xml:space="preserve">
          <source>A view hierarchy can include views from components in the same NgModule, but it also can (and often does) include views from components that are defined in different NgModules.</source>
          <target state="translated">ビュー階層には、同じNgModule内のコンポーネントからのビューを含めることができますが、異なるNgModuleで定義されているコンポーネントからのビューを含めることもできます(そして、多くの場合そうなります)。</target>
        </trans-unit>
        <trans-unit id="8985a30015f187d6df9a40f361288d108a8e8f30" translate="yes" xml:space="preserve">
          <source>A view is specifically represented by a &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; instance associated with the component. A view that belongs to a component is called a &lt;em&gt;host view&lt;/em&gt;. Views are typically collected into &lt;a href=&quot;glossary#view-tree&quot;&gt;view hierarchies&lt;/a&gt;.</source>
          <target state="translated">ビューは、コンポーネントに関連付けられた &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; インスタンスによって具体的に表されます。コンポーネントに属するビューは、&lt;em&gt;ホストビュー&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。ビューは通常、&lt;a href=&quot;glossary#view-tree&quot;&gt;ビュー階層&lt;/a&gt;に収集されます。</target>
        </trans-unit>
        <trans-unit id="e744a48c4fc96b96af3c0831c0429217d4b218d0" translate="yes" xml:space="preserve">
          <source>A way to group related &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt;. NgModules are delivered within scoped packages whose names begin with the Angular &lt;em&gt;scope name&lt;/em&gt;&lt;code&gt;@angular&lt;/code&gt;. For example, &lt;code&gt;@angular/core&lt;/code&gt;, &lt;code&gt;@angular/common&lt;/code&gt;, &lt;code&gt;@angular/forms&lt;/code&gt;, and &lt;code&gt;@angular/router&lt;/code&gt;.</source>
          <target state="translated">関連する&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージ&lt;/a&gt;をグループ化する方法。NgModuleは、名前がAngular &lt;em&gt;スコープ名&lt;/em&gt; &lt;code&gt;@angular&lt;/code&gt; で始まるスコープパッケージ内で提供されます。たとえば、 &lt;code&gt;@angular/core&lt;/code&gt; 、 &lt;code&gt;@angular/common&lt;/code&gt; 、 &lt;code&gt;@angular/forms&lt;/code&gt; 、および &lt;code&gt;@angular/router&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="aea6c080165c9b1cf1ca290f294a0e1e15d1219a" translate="yes" xml:space="preserve">
          <source>A way to initialize and launch an app or system.</source>
          <target state="translated">アプリやシステムを初期化して起動する方法。</target>
        </trans-unit>
        <trans-unit id="7386e404d9bca25eb46437dd2f5f7e5376095d89" translate="yes" xml:space="preserve">
          <source>A way to insert DOM content from outside a component into the component's view in a designated spot.</source>
          <target state="translated">コンポーネントの外にある DOM コンテンツを、指定した場所にあるコンポーネントのビューに挿入する方法。</target>
        </trans-unit>
        <trans-unit id="7de84fa517d0600bd34fbe77f23fae98b2c2394a" translate="yes" xml:space="preserve">
          <source>A web platform feature, currently supported by most browsers and available in other browsers through polyfills (see &lt;a href=&quot;browser-support&quot;&gt;Browser support&lt;/a&gt;).</source>
          <target state="translated">現在ほとんどのブラウザーでサポートされており、ポリフィルを介して他のブラウザーで使用できるWebプラットフォーム機能（&lt;a href=&quot;browser-support&quot;&gt;ブラウザーサポートを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="595d9d021ac9ec18186ee36c4c1e98457e5b9f3a" translate="yes" xml:space="preserve">
          <source>A well-functioning application should gracefully handle when users attempt to navigate to a part of your application that does not exist. To add this functionality to your application, you set up a wildcard route. The Angular router selects this route any time the requested URL doesn't match any router paths.</source>
          <target state="translated">正常に機能するアプリケーションは、ユーザーが存在しないアプリケーションの一部に移動しようとしたときに、 優雅に処理しなければなりません。アプリケーションにこの機能を追加するには、ワイルドカードルートを設定します。リクエストされたURLがルーターのパスと一致しない場合はいつでもAngularルーターがこのルートを選択します。</target>
        </trans-unit>
        <trans-unit id="68fd370f3c2389b536d7c29f5f1aee8181643f5f" translate="yes" xml:space="preserve">
          <source>A widget NgModule should consist entirely of declarations, most of them exported. It would rarely have providers.</source>
          <target state="translated">ウィジェットのNgModuleは宣言だけで構成され、そのほとんどはエクスポートされます。プロバイダを持つことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="0491ffa865b132d34096600025fe291f6f649744" translate="yes" xml:space="preserve">
          <source>A widget module makes components, directives, and pipes available to external modules. Many third-party UI component libraries are widget modules.</source>
          <target state="translated">ウィジェットモジュールは、コンポーネント、ディレクティブ、パイプを外部モジュールで利用できるようにします。多くのサードパーティ製UIコンポーネントライブラリはウィジェットモジュールです。</target>
        </trans-unit>
        <trans-unit id="c123c286126cb911939d4328d7538af26bafd125" translate="yes" xml:space="preserve">
          <source>A widget module should consist entirely of declarations, most of them exported.</source>
          <target state="translated">ウィジェットモジュールは宣言のみで構成され、そのほとんどはエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="d1363cd47892a9e54fc21353cc398b80d7bfd896" translate="yes" xml:space="preserve">
          <source>A widget module should rarely have providers.</source>
          <target state="translated">ウィジェットモジュールはプロバイダを持つことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="0082cc99be7ad2573dfa020b500df472d84044de" translate="yes" xml:space="preserve">
          <source>A wrapper around a native element inside of a View.</source>
          <target state="translated">ビュー内のネイティブ要素のラッパー。</target>
        </trans-unit>
        <trans-unit id="afc7591428b1b6a54e9db05889bcff4050b741ba" translate="yes" xml:space="preserve">
          <source>A wrapper around an NgModule that associates it with &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;providers&lt;/a&gt;. Usage without a generic type is deprecated.</source>
          <target state="translated">NgModuleを&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;プロバイダーに&lt;/a&gt;関連付けるラッパー。ジェネリック型を使用しない使用は非推奨です。</target>
        </trans-unit>
        <trans-unit id="908202c892d3d8c8cebf9a1e1f5f1b232d6fe34c" translate="yes" xml:space="preserve">
          <source>A wrapper around an NgModule that associates it with &lt;a href=&quot;../guide/glossary#provider&quot;&gt;providers&lt;/a&gt;. Usage without a generic type is deprecated.</source>
          <target state="translated">NgModuleを&lt;a href=&quot;../guide/glossary#provider&quot;&gt;プロバイダーに&lt;/a&gt;関連付けるラッパー。ジェネリック型を使用しない使用は非推奨です。</target>
        </trans-unit>
        <trans-unit id="569a153621b06d91c3e611e12a0d1a67f46c9acd" translate="yes" xml:space="preserve">
          <source>A wrapper around an NgModule that associates it with the providers.</source>
          <target state="translated">NgModule をプロバイダに関連付けるラッパー。</target>
        </trans-unit>
        <trans-unit id="a0a181daba184ac420bae95b36b395b6c75dbb20" translate="yes" xml:space="preserve">
          <source>A wrapper around the &lt;code&gt;XMLHttpRequest&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; コンストラクターのラッパー。</target>
        </trans-unit>
        <trans-unit id="75bb7803f168acde23c0c49a75c88932db96fef8" translate="yes" xml:space="preserve">
          <source>A yes or no question; ideal for Boolean options.</source>
          <target state="translated">イエスかノーかの質問で、ブール値のオプションに最適です。</target>
        </trans-unit>
        <trans-unit id="9380472e5eeed9e1a820e4f9a691e60741cf67bc" translate="yes" xml:space="preserve">
          <source>A zone client can take action before and after an async operation completes.</source>
          <target state="translated">ゾーンクライアントは、非同期操作が完了する前後にアクションを取ることができます。</target>
        </trans-unit>
        <trans-unit id="6d95c1847219c633950f8f1ceca9761315abfc19" translate="yes" xml:space="preserve">
          <source>AD</source>
          <target state="translated">AD</target>
        </trans-unit>
        <trans-unit id="1457b381fbb905cddb3d309bf2f4371efb24967b" translate="yes" xml:space="preserve">
          <source>ANALYZE_FOR_ENTRY_COMPONENTS</source>
          <target state="translated">ANALYZE_FOR_ENTRY_COMPONENTS</target>
        </trans-unit>
        <trans-unit id="2b8ac4ee175e506d03dd47a6d47d857b5404a60d" translate="yes" xml:space="preserve">
          <source>ANIMATION_MODULE_TYPE</source>
          <target state="translated">ANIMATION_MODULE_TYPE</target>
        </trans-unit>
        <trans-unit id="9e0fc4041d028fe347fad5a2d9a2729531ddfbdf" translate="yes" xml:space="preserve">
          <source>AOT Diagnostic messages</source>
          <target state="translated">AOT診断メッセージ</target>
        </trans-unit>
        <trans-unit id="ed24a95265e2f144a3985e9d5b4af5aa0f7371c2" translate="yes" xml:space="preserve">
          <source>AOT and Ivy</source>
          <target state="translated">AOT と Ivy</target>
        </trans-unit>
        <trans-unit id="a6ce97b9cd64e5df34ac5b291f41f70ac7fbb820" translate="yes" xml:space="preserve">
          <source>AOT compilation with Ivy is faster and should be used by default. In the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, set the default build options for your project to always use AOT compilation.</source>
          <target state="translated">Ivyを使用したAOTコンパイルはより高速であり、デフォルトで使用する必要があります。で &lt;code&gt;angular.json&lt;/code&gt; ワークスペースの設定ファイル、常にAOTコンパイルを使用するには、プロジェクトのデフォルトのビルドオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="fa86e2641c59340bd601b8ba7d2119a138b6f83d" translate="yes" xml:space="preserve">
          <source>AOT compilation with Ivy is faster and should be used by default. In the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, set the default build options for your project to always use AOT compilation. When using application internationalization (i18n) with Ivy, &lt;a href=&quot;i18n#merge&quot;&gt;translation merging&lt;/a&gt; also requires the use of AOT compilation.</source>
          <target state="translated">Ivyを使用したAOTコンパイルは高速であり、デフォルトで使用する必要があります。で &lt;code&gt;angular.json&lt;/code&gt; ワークスペースの設定ファイル、常にAOTコンパイルを使用するには、プロジェクトのデフォルトのビルドオプションを設定します。Ivyでアプリケーションの国際化（i18n）を使用する場合、&lt;a href=&quot;i18n#merge&quot;&gt;翻訳のマージに&lt;/a&gt;もAOTコンパイルを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fb9ad954685895e815ce7f2a24207d6e334321af" translate="yes" xml:space="preserve">
          <source>AOT compile the hybrid app</source>
          <target state="translated">AOTがハイブリッドアプリをコンパイル</target>
        </trans-unit>
        <trans-unit id="87e195220135cb979d8a07cb24ff7765a85af43d" translate="yes" xml:space="preserve">
          <source>AOT metadata errors</source>
          <target state="translated">AOTメタデータエラー</target>
        </trans-unit>
        <trans-unit id="7defd4c0d43ba96bdc1455de9f1d62e39a502a4f" translate="yes" xml:space="preserve">
          <source>AOT needs to load any AngularJS files that are in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in the AngularJS &lt;code&gt;index.html&lt;/code&gt;. An easy way to copy them is to add each to the &lt;code&gt;copy-dist-files.js&lt;/code&gt; file.</source>
          <target state="translated">AOT は、AngularJS &lt;code&gt;index.html&lt;/code&gt; の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグにあるAngularJS ファイルをロードする必要があります。それらをコピーする簡単な方法は、それぞれを &lt;code&gt;copy-dist-files.js&lt;/code&gt; ファイルに追加することです。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="9e0c33812161cfe4887e0c04f78c15bd5e61ff42" translate="yes" xml:space="preserve">
          <source>API or Feature</source>
          <target state="translated">APIまたは機能</target>
        </trans-unit>
        <trans-unit id="0fff39d2724fe501cdfd4a22ce613e0e0ec0c56f" translate="yes" xml:space="preserve">
          <source>API/Option</source>
          <target state="translated">API/Option</target>
        </trans-unit>
        <trans-unit id="24be048b8aaf0aecd39a25ebabd04a1dfbbff1a4" translate="yes" xml:space="preserve">
          <source>APP SUPPORT FILES</source>
          <target state="translated">アプリサポートファイル</target>
        </trans-unit>
        <trans-unit id="b8dd61424a1e8acf7ab12bf422537b7caa2d8a51" translate="yes" xml:space="preserve">
          <source>APPLICATION-SPECIFIC CONFIG FILES</source>
          <target state="translated">APPLICATION-SPECIFIC CONFIG FILES</target>
        </trans-unit>
        <trans-unit id="7838fa4fc1d83550cc50eefcb69cbd49986dec3b" translate="yes" xml:space="preserve">
          <source>APP_BASE_HREF</source>
          <target state="translated">APP_BASE_HREF</target>
        </trans-unit>
        <trans-unit id="e3f9a5cb4b1bf9f7b5e4a1785e57db0e2f3d3875" translate="yes" xml:space="preserve">
          <source>APP_BOOTSTRAP_LISTENER</source>
          <target state="translated">APP_BOOTSTRAP_LISTENER</target>
        </trans-unit>
        <trans-unit id="4f6efcda7c9b006c9c3205c1c2a919389bca11e9" translate="yes" xml:space="preserve">
          <source>APP_ID</source>
          <target state="translated">APP_ID</target>
        </trans-unit>
        <trans-unit id="367132b55d2d5e5d02cd3daf8fe2432e965920f5" translate="yes" xml:space="preserve">
          <source>APP_INITIALIZER</source>
          <target state="translated">APP_INITIALIZER</target>
        </trans-unit>
        <trans-unit id="eb73501aa2a666ce6cdb48a50e68af7107aae3af" translate="yes" xml:space="preserve">
          <source>ARIA specification and authoring practices</source>
          <target state="translated">ARIA仕様とオーサリングの実践</target>
        </trans-unit>
        <trans-unit id="9cfd34f083e5ba936648207be86e862772727935" translate="yes" xml:space="preserve">
          <source>ASP.NET 4.x Project</source>
          <target state="translated">ASP.NET 4.xプロジェクト</target>
        </trans-unit>
        <trans-unit id="c34da2b2d91c5e754231cd2ed1aab8be5964f186" translate="yes" xml:space="preserve">
          <source>AUTO_STYLE</source>
          <target state="translated">AUTO_STYLE</target>
        </trans-unit>
        <trans-unit id="f929923568568a4da2be1535144326032933ceb7" translate="yes" xml:space="preserve">
          <source>Abbreviated</source>
          <target state="translated">Abbreviated</target>
        </trans-unit>
        <trans-unit id="feaebecb323d018f6b3268b9f60b3217020dd1c5" translate="yes" xml:space="preserve">
          <source>Abide by the unidirectional data flow rule</source>
          <target state="translated">一方向データフローのルールに従う</target>
        </trans-unit>
        <trans-unit id="eb504ba616a4717b3ecb24820c6b3de4e3cc9b0d" translate="yes" xml:space="preserve">
          <source>About this guide</source>
          <target state="translated">このガイドについて</target>
        </trans-unit>
        <trans-unit id="0a9143d47fb8f5c8ce72c187dbb4f2c8bedf3de9" translate="yes" xml:space="preserve">
          <source>Absolutely.</source>
          <target state="translated">Absolutely.</target>
        </trans-unit>
        <trans-unit id="0f7874c26836804debef6beaae8a9b411cc84311" translate="yes" xml:space="preserve">
          <source>AbstractControl</source>
          <target state="translated">AbstractControl</target>
        </trans-unit>
        <trans-unit id="95b5294224d9b3b7ee74690ec2ba8150fa28a063" translate="yes" xml:space="preserve">
          <source>AbstractControlDirective</source>
          <target state="translated">AbstractControlDirective</target>
        </trans-unit>
        <trans-unit id="a85cd1fc05d53f5f528e32f0696603068e07725e" translate="yes" xml:space="preserve">
          <source>AbstractControlOptions</source>
          <target state="translated">AbstractControlOptions</target>
        </trans-unit>
        <trans-unit id="d9c4da7c847756ecf47d6e7661a78796ecc6932b" translate="yes" xml:space="preserve">
          <source>AbstractFormGroupDirective</source>
          <target state="translated">AbstractFormGroupDirective</target>
        </trans-unit>
        <trans-unit id="8da95c3112e20bafa962dd96d67921e23da58f48" translate="yes" xml:space="preserve">
          <source>AbstractType</source>
          <target state="translated">AbstractType</target>
        </trans-unit>
        <trans-unit id="59a3413d743eddad76795b85c491b59c6c8853f4" translate="yes" xml:space="preserve">
          <source>Abstraction on top of APIs</source>
          <target state="translated">APIの上での抽象化</target>
        </trans-unit>
        <trans-unit id="428e19e9e12f24d9f2005b934a813793d85c7758" translate="yes" xml:space="preserve">
          <source>Accelerated debugging and performance profiling with Angular DevTools</source>
          <target state="translated">Angular DevToolsによるデバッグとパフォーマンスプロファイリングの高速化</target>
        </trans-unit>
        <trans-unit id="a817b1091a9c22ad081e2de21e641873685f98ae" translate="yes" xml:space="preserve">
          <source>Accepts an optional argument that moves the virtual clock forward by the specified number of milliseconds, clearing asynchronous activities scheduled within that timeframe. See &lt;a href=&quot;testing#tick&quot;&gt;discussion above&lt;/a&gt;.</source>
          <target state="translated">仮想クロックを指定されたミリ秒単位で進めるオプションの引数を受け入れ、その時間枠内でスケジュールされた非同期アクティビティをクリアします。&lt;a href=&quot;testing#tick&quot;&gt;上記の説明を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a254a9def8a95988feffbefd9a92d48affe6839a" translate="yes" xml:space="preserve">
          <source>Accepts an optional argument that moves the virtual clock forward by the specified number of milliseconds, clearing asynchronous activities scheduled within that timeframe. See &lt;a href=&quot;testing-components-scenarios#tick&quot;&gt;discussion above&lt;/a&gt;.</source>
          <target state="translated">指定されたミリ秒数だけ仮想クロックを前方に移動するオプションの引数を受け入れ、その時間枠内にスケジュールされた非同期アクティビティをクリアします。&lt;a href=&quot;testing-components-scenarios#tick&quot;&gt;上記の説明を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2d4ddc28b3740e2c984f99503c7979b4c9792440" translate="yes" xml:space="preserve">
          <source>Access a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instance by placing a directive on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element (or directive prefixed with &lt;code&gt;*&lt;/code&gt;). The &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; for the embedded view is injected into the constructor of the directive, using the &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素（または接頭辞が &lt;code&gt;*&lt;/code&gt; のディレクティブ）にディレクティブを配置して、 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; インスタンスにアクセスします。 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 埋め込みビューのために用い、指令のコンストラクタに注入さ &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; のトークン。</target>
        </trans-unit>
        <trans-unit id="4fe9f9569ccd9b850020bd4b68cd44cf94f2bea4" translate="yes" xml:space="preserve">
          <source>Access individual controls in the group</source>
          <target state="translated">グループ内の個々のコントロールにアクセスする</target>
        </trans-unit>
        <trans-unit id="3bd6071c0d4d4fdb171f32ed6d48526da908cca3" translate="yes" xml:space="preserve">
          <source>Access the &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; control with a getter method.</source>
          <target state="translated">getterメソッドを使用して &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; コントロールにアクセスします。</target>
        </trans-unit>
        <trans-unit id="e8452e7ba1da7691017f4ee4304fc673e6f0bb4a" translate="yes" xml:space="preserve">
          <source>Access the &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; of an element by placing a &lt;code&gt;&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; injected with &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; on the element, or use a &lt;code&gt;&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; query.</source>
          <target state="translated">アクセス &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 配置することにより、要素の &lt;code&gt;&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; を注入 &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 要素上、または使用 &lt;code&gt;&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; のクエリを。</target>
        </trans-unit>
        <trans-unit id="ce12460889befb2c6aeea85d232ba50839031e52" translate="yes" xml:space="preserve">
          <source>Access the component instance through the fixture and confirm it exists with a Jasmine expectation:</source>
          <target state="translated">フィクスチャを通してコンポーネントのインスタンスにアクセスし、Jasmineの期待値で存在を確認します。</target>
        </trans-unit>
        <trans-unit id="65af474c2ce5a9f03ce39c585f67f4a85352d27c" translate="yes" xml:space="preserve">
          <source>Access the event object with the &lt;code&gt;$event&lt;/code&gt; argument passed to the output event handler:</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 引数を出力イベントハンドラーに渡して、イベントオブジェクトにアクセスします。</target>
        </trans-unit>
        <trans-unit id="377065746e81f30b11ac698cada8b989e39c4a25" translate="yes" xml:space="preserve">
          <source>Access the group by name</source>
          <target state="translated">名前でグループにアクセスする</target>
        </trans-unit>
        <trans-unit id="65b5d0e60ff544cacfedacd4d4b25cfce22cf7b6" translate="yes" xml:space="preserve">
          <source>Access the overall form status</source>
          <target state="translated">フォーム全体の状態にアクセスする</target>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="cd53bbcc3ef555cef8aef4cd3865d30e34e01e3b" translate="yes" xml:space="preserve">
          <source>Accessibility - Google Web Fundamentals</source>
          <target state="translated">アクセシビリティ-Google ウェブの基礎</target>
        </trans-unit>
        <trans-unit id="69aa472d0ca05d859e2569266226a800dc96ebee" translate="yes" xml:space="preserve">
          <source>Accessibility Resources and Code Examples</source>
          <target state="translated">アクセシビリティに関するリソースとコード例</target>
        </trans-unit>
        <trans-unit id="c76a505ae270ff75148ad28548783d5d27bdc1f8" translate="yes" xml:space="preserve">
          <source>Accessibility attributes</source>
          <target state="translated">アクセシビリティの属性</target>
        </trans-unit>
        <trans-unit id="109b3888496c6d4d396c3784a78f2ef96407235a" translate="yes" xml:space="preserve">
          <source>Accessibility in Angular</source>
          <target state="translated">Angularでのアクセシビリティ</target>
        </trans-unit>
        <trans-unit id="6be07fa864b6aa88516e6a26cd48a52b1bc1ad24" translate="yes" xml:space="preserve">
          <source>Accessing a template variable within &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 内のテンプレート変数へのアクセス</target>
        </trans-unit>
        <trans-unit id="5fc23cfa97105024867addb00d2cc8f18e74f266" translate="yes" xml:space="preserve">
          <source>Accessing in a nested template</source>
          <target state="translated">ネストされたテンプレートでのアクセス</target>
        </trans-unit>
        <trans-unit id="d0fa71c858210347e2968839cb5d0fa8c7d7cf97" translate="yes" xml:space="preserve">
          <source>Accessing query parameters and fragments</source>
          <target state="translated">クエリパラメータとフラグメントへのアクセス</target>
        </trans-unit>
        <trans-unit id="50c48bd5b8278d51c8a1d76f35a5de300302f98d" translate="yes" xml:space="preserve">
          <source>Accordingly, a routing guard can return an &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; or a &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; and the router will wait for the observable to resolve to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">したがって、ルーティングガードは &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; または &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; を返すことができ、ルーターはオブザーバブルが &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; に解決されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="fe7ef692ecf6fbf5ffd81dba5751890fa9bec6e7" translate="yes" xml:space="preserve">
          <source>Accordingly, the &lt;em&gt;link parameters array&lt;/em&gt; has &lt;em&gt;two&lt;/em&gt; items: the routing &lt;em&gt;path&lt;/em&gt; and a &lt;em&gt;route parameter&lt;/em&gt; that specifies the &lt;code&gt;id&lt;/code&gt; of the selected hero.</source>
          <target state="translated">したがって、&lt;em&gt;リンクパラメーター配列に&lt;/em&gt;は、ルーティング&lt;em&gt;パス&lt;/em&gt;と、選択したヒーローの &lt;code&gt;id&lt;/code&gt; を指定する&lt;em&gt;ルートパラメーターの&lt;/em&gt;&lt;em&gt;2つの&lt;/em&gt;項目があります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3b89e6944ccf59dc8e5282a7ab12a98550bedec1" translate="yes" xml:space="preserve">
          <source>Accordingly, the &lt;em&gt;link parameters array&lt;/em&gt; has two items: the routing &lt;em&gt;path&lt;/em&gt; and a &lt;em&gt;route parameter&lt;/em&gt; that specifies the &lt;code&gt;id&lt;/code&gt; of the selected hero.</source>
          <target state="translated">したがって、&lt;em&gt;リンクパラメータ配列に&lt;/em&gt;は、ルーティング&lt;em&gt;パス&lt;/em&gt;と選択したヒーローの &lt;code&gt;id&lt;/code&gt; を指定する&lt;em&gt;ルートパラメータの&lt;/em&gt;2つの項目があります。</target>
        </trans-unit>
        <trans-unit id="307094c1dc908f6f3886b8acb63db299f5b02050" translate="yes" xml:space="preserve">
          <source>Acquire the hero with that &lt;code&gt;id&lt;/code&gt; from the server via the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; を介してサーバーからその &lt;code&gt;id&lt;/code&gt; を持つヒーローを取得します</target>
        </trans-unit>
        <trans-unit id="82870c0cce5897721a9489d5d73fb0c52839cf70" translate="yes" xml:space="preserve">
          <source>Activated route</source>
          <target state="translated">活性化されたルート</target>
        </trans-unit>
        <trans-unit id="794c493d158037b9698e41b416ae5ef5793dac99" translate="yes" xml:space="preserve">
          <source>ActivatedRoute</source>
          <target state="translated">ActivatedRoute</target>
        </trans-unit>
        <trans-unit id="6add898d4d5413d812feee7c890c5421a4b7149b" translate="yes" xml:space="preserve">
          <source>ActivatedRoute params and queryParams properties</source>
          <target state="translated">ActivatedRoute パラメータと queryParams プロパティ</target>
        </trans-unit>
        <trans-unit id="2bd22a4d53b9c97bd663bdbc8791d94b18d02f28" translate="yes" xml:space="preserve">
          <source>ActivatedRouteSnapshot</source>
          <target state="translated">ActivatedRouteSnapshot</target>
        </trans-unit>
        <trans-unit id="204b72e97c4752ded21a3362fdcde4b2639b4293" translate="yes" xml:space="preserve">
          <source>Activates a reusable animation. Used with &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">再利用可能なアニメーションをアクティブにします。 &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="8e40bc92630ef5d50c6c2dfcdf9254fff9180d01" translate="yes" xml:space="preserve">
          <source>ActivationEnd</source>
          <target state="translated">ActivationEnd</target>
        </trans-unit>
        <trans-unit id="32dd68023e3907e5c24fd1583232c83b2c6e46d0" translate="yes" xml:space="preserve">
          <source>ActivationEnd`</source>
          <target state="translated">ActivationEnd`</target>
        </trans-unit>
        <trans-unit id="5c0a175ec8a530bff0295cd8daab5114e6e95235" translate="yes" xml:space="preserve">
          <source>ActivationStart</source>
          <target state="translated">ActivationStart</target>
        </trans-unit>
        <trans-unit id="a733b809d2f1233496ab516eed0f3ef75cf3791a" translate="yes" xml:space="preserve">
          <source>Active</source>
          <target state="translated">Active</target>
        </trans-unit>
        <trans-unit id="6e159832dbdf12e00bf06037be4688396deea347" translate="yes" xml:space="preserve">
          <source>Active Ends</source>
          <target state="translated">アクティブエンド</target>
        </trans-unit>
        <trans-unit id="a5325119b52bb8168182fe50c18511f8d177a326" translate="yes" xml:space="preserve">
          <source>Active attempts to interact with the service worker, such as calling &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt;, return rejected promises.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt; の呼び出しなど、Service Workerとの対話をアクティブに試みると、拒否されたPromiseが返されます。</target>
        </trans-unit>
        <trans-unit id="a1917d94679e620038f3ead27125a83248fc69a2" translate="yes" xml:space="preserve">
          <source>Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]&lt;/code&gt; input binding with the &lt;code&gt;{ exact: true }&lt;/code&gt; expression. By using &lt;code&gt;{ exact: true }&lt;/code&gt;, a given &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; will only be active if its URL is an exact match to the current URL.</source>
          <target state="translated">アクティブなルートリンクはルートツリーの各レベルを介してカスケードダウンするため、親と子のルーターリンクを同時にアクティブにすることができます。この動作をオーバーライドするには、 &lt;code&gt;{ exact: true }&lt;/code&gt; 式を使用して &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]&lt;/code&gt; 入力バインディングにバインドします。 &lt;code&gt;{ exact: true }&lt;/code&gt; を使用すると、特定の &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; は、そのURLが現在のURLと完全に一致する場合にのみアクティブになります。</target>
        </trans-unit>
        <trans-unit id="b560ca1665a284a23072009581af923a4438d647" translate="yes" xml:space="preserve">
          <source>Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the &lt;code&gt;[routerLinkActiveOptions]&lt;/code&gt; input binding with the &lt;code&gt;{ exact: true }&lt;/code&gt; expression. By using &lt;code&gt;{ exact: true }&lt;/code&gt;, a given &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; will only be active if its URL is an exact match to the current URL.</source>
          <target state="translated">アクティブなルートリンクは、ルートツリーの各レベルを介してカスケードされるため、親ルーターリンクと子ルーターリンクを同時にアクティブにすることができます。この動作をオーバーライドするには、 &lt;code&gt;{ exact: true }&lt;/code&gt; 式を使用して &lt;code&gt;[routerLinkActiveOptions]&lt;/code&gt; 入力バインディングにバインドできます。 &lt;code&gt;{ exact: true }&lt;/code&gt; を使用すると、特定の &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; は、そのURLが現在のURLと完全に一致する場合にのみアクティブになります。</target>
        </trans-unit>
        <trans-unit id="35861d2d31d89b47d85b528c09cc715631b815d9" translate="yes" xml:space="preserve">
          <source>Active router links</source>
          <target state="translated">アクティブルータのリンク</target>
        </trans-unit>
        <trans-unit id="37b1c561bca580bb994b0e5d093be6ab592df8a4" translate="yes" xml:space="preserve">
          <source>Acts as a placeholder that Angular dynamically fills based on the current router state.</source>
          <target state="translated">現在のルーターの状態に基づいてAngularが動的に埋めるプレースホルダとして機能します。</target>
        </trans-unit>
        <trans-unit id="362d51e485a5ede5ae2646cf9e070ec1747d7f2c" translate="yes" xml:space="preserve">
          <source>Acts as the identity function when given a non-forward-ref value.</source>
          <target state="translated">非フォワード参照値が与えられたときに、同一性関数として動作します。</target>
        </trans-unit>
        <trans-unit id="396a77f5610e3812bebfa8b8db9a7c77a059e0fe" translate="yes" xml:space="preserve">
          <source>Adapter interface for retrieving the &lt;code&gt;&lt;a href=&quot;core/testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; service associated for a particular context.</source>
          <target state="translated">特定のコンテキストに関連付けられている &lt;code&gt;&lt;a href=&quot;core/testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; サービスを取得するためのアダプターインターフェイス。</target>
        </trans-unit>
        <trans-unit id="57d55220bc209fce13be971cfa46f83d93fc4bca" translate="yes" xml:space="preserve">
          <source>Adapter interface for retrieving the &lt;code&gt;&lt;a href=&quot;testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; service associated for a particular context.</source>
          <target state="translated">特定のコンテキストに関連付けられている &lt;code&gt;&lt;a href=&quot;testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; サービスを取得するためのアダプターインターフェイス。</target>
        </trans-unit>
        <trans-unit id="3f4a639136be5c62f45bacf8afdbec98e1d5129e" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes&amp;mdash;components, directives, and pipes&amp;mdash;to a &lt;code&gt;declarations&lt;/code&gt; list.</source>
          <target state="translated">追加&lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;申告&lt;/a&gt;クラスコンポーネント、ディレクティブ、およびパイプ-に &lt;code&gt;declarations&lt;/code&gt; リストを。</target>
        </trans-unit>
        <trans-unit id="3560f20daf5611e3b375968ed597beb5c4f0158b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array to register Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; providers globally.</source>
          <target state="translated">追加 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をする &lt;code&gt;AppModule&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 配列を角度の登録に &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をグローバルプロバイダを。</target>
        </trans-unit>
        <trans-unit id="0048cdde3ea2a8ccae7c94a3c7465652b7d6785b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the app module (&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をアプリモジュールの &lt;code&gt;imports&lt;/code&gt; 配列（ &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ）に追加します。</target>
        </trans-unit>
        <trans-unit id="8f99cfb58142d03bb6f653ac95acc4f30459e350" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を追加</target>
        </trans-unit>
        <trans-unit id="6d4608c0294735118be24cb2d456a578029e2f1c" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;HeroService.getHero()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService.getHero()&lt;/code&gt; を追加します</target>
        </trans-unit>
        <trans-unit id="182b5d83f0a65e9a325c4c2db7a7c77175219e27" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;HeroService.updateHero()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService.updateHero()&lt;/code&gt; を追加します</target>
        </trans-unit>
        <trans-unit id="7e46f0329680a6f0e82967b1bf73efd1343668f0" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;PhoneDetailComponent&lt;/code&gt; component to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;em&gt;declarations&lt;/em&gt; and &lt;em&gt;entryComponents&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;PhoneDetailComponent&lt;/code&gt; コンポーネントを &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;em&gt;宣言&lt;/em&gt;と&lt;em&gt;entryComponentsに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="43ddfc069f86e4fd77627aa8a21d9d1ff6fa458e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;getHeroes()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getHeroes()&lt;/code&gt; を追加</target>
        </trans-unit>
        <trans-unit id="8aded543b54bcc2d04b10175a1390c9cd687831f" translate="yes" xml:space="preserve">
          <source>Add Angular and the other new dependencies to &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">Angularとその他の新しい依存関係を &lt;code&gt;package.json&lt;/code&gt; に追加します</target>
        </trans-unit>
        <trans-unit id="cdc2a64b8de6ed4a80e0a1c10a9bc27e773e1c56" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that contains a suitable error message.</source>
          <target state="translated">適切なエラーメッセージを含む &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="deb2eb3ba8a87a88474cb922247dab94efb0148d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element and, within that, an anchor element that, when clicked, triggers navigation to the &lt;code&gt;HeroesComponent&lt;/code&gt;. The revised &lt;code&gt;AppComponent&lt;/code&gt; template looks like this:</source>
          <target state="translated">&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; 要素を追加し、その中にアンカー要素を &lt;code&gt;HeroesComponent&lt;/code&gt; ます。この要素をクリックすると、HeroesComponentへのナビゲーションがトリガーされます。改訂された &lt;code&gt;AppComponent&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="84449015e98d2c7fe2ee538001f75df10dcd526d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array and inject the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class, too, but give &lt;code&gt;emoji&lt;/code&gt; a different value. Here, it has a value of 🐶 (puppy).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を追加し、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; クラスに &lt;code&gt;AnimalService&lt;/code&gt; も挿入しますが、 &lt;code&gt;emoji&lt;/code&gt; は別の値を指定します。ここでは、値は🐶（子犬）です。</target>
        </trans-unit>
        <trans-unit id="19eab91cf54346d4591c110eddb2a9e3fe610d00" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with a third animal, 🦔 (hedgehog), to the &lt;code&gt;app.component.ts&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata:</source>
          <target state="translated">3番目の動物🦔（hedgehog）を含む &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を &lt;code&gt;app.component.ts&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; メタデータに追加します。</target>
        </trans-unit>
        <trans-unit id="21c3d8f9d4e4a561165b7fb36b05d17fcaaa6aee" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider with that factory function.</source>
          <target state="translated">そのファクトリー関数で &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロバイダーを追加します。</target>
        </trans-unit>
        <trans-unit id="8b8be01024834f997542431f0f27598795d33e2d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard that only loads the &lt;code&gt;AdminModule&lt;/code&gt; once the user is logged in &lt;em&gt;and&lt;/em&gt; attempts to access the admin feature area.</source>
          <target state="translated">追加 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; の唯一の負荷があること、ガードを &lt;code&gt;AdminModule&lt;/code&gt; ユーザー一度はログインしている&lt;em&gt;と&lt;/em&gt;、管理機能領域にアクセスしようとする試み。</target>
        </trans-unit>
        <trans-unit id="a66287fd7e34d94cdf9088a6d5121c2dd8823a0f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; to the shell template where views are displayed.</source>
          <target state="translated">ビューが表示されるシェルテンプレートに &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="898b1572932b2c74532c4d3ff9e91aaf920c8e7a" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; to the shell template where views will be displayed.</source>
          <target state="translated">ビューが表示されるシェルテンプレートに &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="4e9ef507bc9bbcaa25673401bd1c8c3768c7b26f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;DashboardComponent&lt;/code&gt; using the CLI:</source>
          <target state="translated">CLIを使用して &lt;code&gt;DashboardComponent&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="bde6cb9ecfe126921ce28e9ac1927149053f7c35" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; to the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater that filters the list of heroes to just those heroes who can fly.</source>
          <target state="translated">&lt;code&gt;FlyingHeroesPipe&lt;/code&gt; を &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピーターに追加します。このリピーターは、ヒーローのリストをフィルタリングして、飛行できるヒーローだけにフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="0c5228cde0f61bf1fe1e9a1fc6b78ec86b356bae" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;class&lt;/code&gt; statement that includes the code for the component.</source>
          <target state="translated">コンポーネントのコードを含む &lt;code&gt;class&lt;/code&gt; ステートメントを追加します。</target>
        </trans-unit>
        <trans-unit id="ebea1b8c68f8b57d6ea7ed08f19b491fdea8c3ba" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;color&lt;/code&gt; property to the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; に &lt;code&gt;color&lt;/code&gt; プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="9d2845f19e415459d2b685418f253bf866faaae0" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;confirm()&lt;/code&gt; method to the &lt;code&gt;DialogService&lt;/code&gt; to prompt the user to confirm their intent. The &lt;code&gt;window.confirm&lt;/code&gt; is a &lt;em&gt;blocking&lt;/em&gt; action that displays a modal dialog and waits for user interaction.</source>
          <target state="translated">&lt;code&gt;DialogService&lt;/code&gt; に &lt;code&gt;confirm()&lt;/code&gt; メソッドを追加して、ユーザーに意図を確認するように求めます。 &lt;code&gt;window.confirm&lt;/code&gt; である&lt;em&gt;ブロッキング&lt;/em&gt;作用ディスプレイそのモーダルダイアログとのユーザ対話を待ちます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="07c984e260e0d86a29c178f15bac41e31fbc5270" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;confirm()&lt;/code&gt; method to the &lt;code&gt;DialogService&lt;/code&gt; to prompt the user to confirm their intent. The &lt;code&gt;window.confirm&lt;/code&gt; is a blocking action that displays a modal dialog and waits for user interaction.</source>
          <target state="translated">&lt;code&gt;DialogService&lt;/code&gt; に &lt;code&gt;confirm()&lt;/code&gt; メソッドを追加して、ユーザーに意図の確認を求めます。 &lt;code&gt;window.confirm&lt;/code&gt; は、ユーザーとの対話のためのモーダルダイアログを待つを表示するブロッキング動作です。</target>
        </trans-unit>
        <trans-unit id="7b557d38d8fd3a5d1bbdd3ec8cdee76d8578c406" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;crisis-center&lt;/code&gt; route to the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; に &lt;code&gt;crisis-center&lt;/code&gt; ルートを追加します。</target>
        </trans-unit>
        <trans-unit id="f5094eea4018e25225f0949e73b6925ca16ebd3f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;getHeroes&lt;/code&gt; method to return the &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;getHeroes&lt;/code&gt; メソッドを追加して、&lt;em&gt;模擬ヒーロー&lt;/em&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="d89939689ff55adc6378e0312ee22d86c2aa3cc4" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;goBack()&lt;/code&gt;&lt;em&gt;method&lt;/em&gt; to the component class that navigates backward one step in the browser's history stack using the &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service that you &lt;a href=&quot;toh-pt5#hero-detail-ctor&quot;&gt;injected previously&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt5#hero-detail-ctor&quot;&gt;以前に注入&lt;/a&gt;した &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスを使用して、ブラウザーの履歴スタック内の1ステップ前にナビゲートする &lt;code&gt;goBack()&lt;/code&gt; &lt;em&gt;メソッド&lt;/em&gt;をコンポーネントクラスに追加します。</target>
        </trans-unit>
        <trans-unit id="c70e30c1bf0e3c3f35945c6bb0fc4e9abc4165e2" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero detail&lt;/code&gt; route</source>
          <target state="translated">&lt;code&gt;hero detail&lt;/code&gt; ルートを追加する</target>
        </trans-unit>
        <trans-unit id="0223569a1885b0f40d10946d1a27ca7bebab7a92" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;hero&lt;/code&gt; プロパティを追加する</target>
        </trans-unit>
        <trans-unit id="3273615e0d9f1a028c3a5cef8cc50901a513ea6d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property to the &lt;code&gt;HeroesComponent&lt;/code&gt; for a hero named &quot;Windstorm.&quot;</source>
          <target state="translated">「 &lt;code&gt;HeroesComponent&lt;/code&gt; 」という名前の &lt;code&gt;hero&lt;/code&gt; プロパティをHeroesComponentに追加します。</target>
        </trans-unit>
        <trans-unit id="fb815b37da4170c9251a154ccd7f101a8dd58cc3" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property, preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）デコレータが前に付く &lt;code&gt;hero&lt;/code&gt; プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="69dd6f97661bf507742e04c4dec2321055ba1ead" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;highlightColor&lt;/code&gt; property to the directive class like this:</source>
          <target state="translated">次のように、 &lt;code&gt;highlightColor&lt;/code&gt; プロパティをディレクティブクラスに追加します。</target>
        </trans-unit>
        <trans-unit id="effefff8a43380c9868d530aa7177bf7e683d5be" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;name&lt;/code&gt; attribute to each form-input control.</source>
          <target state="translated">各フォーム入力コントロールに &lt;code&gt;name&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="daee761e14a6d096302bcb9b00298daacb4fb0f4" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;redirect&lt;/code&gt; route that translates the initial relative URL (&lt;code&gt;''&lt;/code&gt;) to the desired default path (&lt;code&gt;/heroes&lt;/code&gt;).</source>
          <target state="translated">初期相対URL（ &lt;code&gt;''&lt;/code&gt; ）を目的のデフォルトパス（ &lt;code&gt;/heroes&lt;/code&gt; ）に変換する &lt;code&gt;redirect&lt;/code&gt; ルートを追加します。</target>
        </trans-unit>
        <trans-unit id="fdb1a55cca337dcbbc924e4007ede18ee678b8b7" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;resolve&lt;/code&gt; object to the component's &lt;code&gt;route&lt;/code&gt; configuration.</source>
          <target state="translated">コンポーネントの &lt;code&gt;route&lt;/code&gt; 構成に &lt;code&gt;resolve&lt;/code&gt; オブジェクトを追加します。</target>
        </trans-unit>
        <trans-unit id="8304c6b9c747fb294f214dc50a4427c23e2355cf" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;useFactory&lt;/code&gt; provider with that factory function.</source>
          <target state="translated">そのファクトリ関数を使用して &lt;code&gt;useFactory&lt;/code&gt; プロバイダーを追加します。</target>
        </trans-unit>
        <trans-unit id="b81c844dbf17b7c6764af67e1b67f3cd93c194a2" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;viewProviders&lt;/code&gt; array and inject the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class, too, but give &lt;code&gt;emoji&lt;/code&gt; a different value. Here, it has a value of 🐶 (puppy).</source>
          <target state="translated">追加 &lt;code&gt;viewProviders&lt;/code&gt; の配列をして注入 &lt;code&gt;AnimalService&lt;/code&gt; の中で &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; あまりにも、クラスが、与え &lt;code&gt;emoji&lt;/code&gt; 異なる値を。ここでは、🐶（子犬）の値があります。</target>
        </trans-unit>
        <trans-unit id="e26a42f22a4f00731aa00214bf7e956bd46b73b0" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;viewProviders&lt;/code&gt; array with a third animal, 🦔 (hedgehog), to the &lt;code&gt;app.component.ts&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata:</source>
          <target state="translated">3番目の動物🦔（hedgehog）を含む &lt;code&gt;viewProviders&lt;/code&gt; 配列を &lt;code&gt;app.component.ts&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; メタデータに追加します。</target>
        </trans-unit>
        <trans-unit id="0809d1c91317af80188c3279f6943dddacff5baf" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;Dashboard&lt;/em&gt; view.</source>
          <target state="translated">&lt;em&gt;ダッシュボード&lt;/em&gt;ビューを追加し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4ff1fb620609d244c46e936c77a53c5496ded93f" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;go back&lt;/em&gt; button to the bottom of the component template and bind it to the component's &lt;code&gt;goBack()&lt;/code&gt; method.</source>
          <target state="translated">コンポーネントテンプレートの下部に&lt;em&gt;戻る&lt;/em&gt;ボタンを追加し、コンポーネントの &lt;code&gt;goBack()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="1322afa34cceab2fcb9586335d92cdcade328a40" translate="yes" xml:space="preserve">
          <source>Add a &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; guard that only loads the &lt;code&gt;AdminModule&lt;/code&gt; once the user is logged in &lt;em&gt;and&lt;/em&gt; attempts to access the admin feature area.</source>
          <target state="translated">追加&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; の&lt;/strong&gt;唯一の負荷があること、ガードを &lt;code&gt;AdminModule&lt;/code&gt; ユーザー一度はログインしている&lt;em&gt;と&lt;/em&gt;、管理機能領域にアクセスしようとする試み。</target>
        </trans-unit>
        <trans-unit id="36f9e17f822a223539dae26ca1231dffbb479235" translate="yes" xml:space="preserve">
          <source>Add a &lt;strong&gt;wildcard&lt;/strong&gt; route to intercept invalid URLs and handle them gracefully. A &lt;em&gt;wildcard&lt;/em&gt; route has a path consisting of two asterisks. It matches &lt;em&gt;every&lt;/em&gt; URL. The router will select &lt;em&gt;this&lt;/em&gt; route if it can't match a route earlier in the configuration. A wildcard route can navigate to a custom &quot;404 Not Found&quot; component or &lt;a href=&quot;router#redirect&quot;&gt;redirect&lt;/a&gt; to an existing route.</source>
          <target state="translated">&lt;strong&gt;ワイルドカード&lt;/strong&gt;ルートを追加して、無効なURLをインターセプトし、適切に処理します。&lt;em&gt;ワイルドカード&lt;/em&gt;経路は2つのアスタリスクからなる経路を有します。&lt;em&gt;すべての&lt;/em&gt; URL に一致します。ルーターは、構成の初期のルートと一致しない場合、&lt;em&gt;この&lt;/em&gt;ルートを選択します。ワイルドカードルートは、カスタムの「404 Not Found」コンポーネントに移動したり、既存のルートに&lt;a href=&quot;router#redirect&quot;&gt;リダイレクト&lt;/a&gt;したりできます。</target>
        </trans-unit>
        <trans-unit id="eb9ad994a306d5e3f0dac069d6b525c6144c6e51" translate="yes" xml:space="preserve">
          <source>Add a binding to the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; template to visualize the result:</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; テンプレートにバインディングを追加して、結果を視覚化します。</target>
        </trans-unit>
        <trans-unit id="185c4f471b2e40e64ba5f97bb89a83cc6b2e41f8" translate="yes" xml:space="preserve">
          <source>Add a button so users can share a product with friends. Bind the button's &lt;code&gt;click&lt;/code&gt; event to the &lt;code&gt;share()&lt;/code&gt; method (in &lt;code&gt;product-list.component.ts&lt;/code&gt;). Event binding uses a set of parentheses, &lt;code&gt;( )&lt;/code&gt;, around the event, as in the following &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">ボタンを追加して、ユーザーが製品を友達と共有できるようにします。ボタンの &lt;code&gt;click&lt;/code&gt; イベントを（ &lt;code&gt;product-list.component.ts&lt;/code&gt; 内の &lt;code&gt;share()&lt;/code&gt; メソッドにバインドします。イベントバインディングでは、次の &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素のように、イベントの前後に一連の括弧 &lt;code&gt;( )&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bdc953992c09d61b11a1e734a2904d5cc5a5c716" translate="yes" xml:space="preserve">
          <source>Add a button with the label &quot;Buy&quot;, and bind the &lt;code&gt;click()&lt;/code&gt; event to the &lt;code&gt;addToCart()&lt;/code&gt; method:</source>
          <target state="translated">「購入」というラベルの付いたボタンを追加し、 &lt;code&gt;click()&lt;/code&gt; イベントを &lt;code&gt;addToCart()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="0f3a862c0909767facfe88f9a549e1ffdfd8b1ad" translate="yes" xml:space="preserve">
          <source>Add a cart component, which displays the items in the cart.</source>
          <target state="translated">カート内のアイテムを表示するカートコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="5aa434bbd8551556eff7a3a10609f92a7b4c69c1" translate="yes" xml:space="preserve">
          <source>Add a cart component, which displays the items you added to your cart.</source>
          <target state="translated">カートに追加したアイテムを表示するカートコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="d7c6983360c85102afcd7cd7c6c276e29242b247" translate="yes" xml:space="preserve">
          <source>Add a click event binding</source>
          <target state="translated">クリックイベントバインディングの追加</target>
        </trans-unit>
        <trans-unit id="cef39296159e8e7b5c240bc8238ac9d8c6ae5109" translate="yes" xml:space="preserve">
          <source>Add a click event binding to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; like this:</source>
          <target state="translated">次のように、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; にクリックイベントバインディングを追加します。</target>
        </trans-unit>
        <trans-unit id="63187bdb091b40565887c341d3fb7ca17b0df008" translate="yes" xml:space="preserve">
          <source>Add a conditional error message to the &lt;em&gt;name&lt;/em&gt; input box, as in the following example.</source>
          <target state="translated">次の例のように、&lt;em&gt;名前&lt;/em&gt;入力ボックスに条件付きエラーメッセージを追加します。</target>
        </trans-unit>
        <trans-unit id="a822817b55404ecf7fe71067c767e4fcf31ccac2" translate="yes" xml:space="preserve">
          <source>Add a control to this form.</source>
          <target state="translated">このフォームにコントロールを追加します。</target>
        </trans-unit>
        <trans-unit id="cab59b94246c9a18905faa353a28be60f5eab5a2" translate="yes" xml:space="preserve">
          <source>Add a control to this group.</source>
          <target state="translated">このグループにコントロールを追加します。</target>
        </trans-unit>
        <trans-unit id="2d89a7d5583b52b6d6525b3b34eeef56c38af48a" translate="yes" xml:space="preserve">
          <source>Add a dashboard navigation link to the &lt;code&gt;AppComponent&lt;/code&gt; shell template, just above the &lt;em&gt;Heroes&lt;/em&gt; link.</source>
          <target state="translated">&lt;em&gt;ヒーロー&lt;/em&gt;リンクのすぐ上にあるダッシュボードナビゲーションリンクを &lt;code&gt;AppComponent&lt;/code&gt; シェルテンプレートに追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee94227c33c07e1c24e4e5adb5f118a15e9e65a0" translate="yes" xml:space="preserve">
          <source>Add a dashboard view</source>
          <target state="translated">ダッシュボードビューの追加</target>
        </trans-unit>
        <trans-unit id="4e39c4f6ceec4b4b2e4e3361f85b74f7b3b28895" translate="yes" xml:space="preserve">
          <source>Add a default route</source>
          <target state="translated">デフォルトのルートを追加する</target>
        </trans-unit>
        <trans-unit id="9719bf1b8a8fa35bc215db281ad48dfa08278aab" translate="yes" xml:space="preserve">
          <source>Add a details section</source>
          <target state="translated">詳細セクションの追加</target>
        </trans-unit>
        <trans-unit id="e612a293c0724c3508c59b5b89399bdae8f9a904" translate="yes" xml:space="preserve">
          <source>Add a group of controls to this form.</source>
          <target state="translated">このフォームにコントロールのグループを追加します。</target>
        </trans-unit>
        <trans-unit id="020929122421e2ed06e78a6cb3615837244cecd8" translate="yes" xml:space="preserve">
          <source>Add a link from the cart page to the shipping page:</source>
          <target state="translated">カートページから配送ページへのリンクを追加します。</target>
        </trans-unit>
        <trans-unit id="7ab064c1e28e4aa58137cb1bd7fa31f6addde323" translate="yes" xml:space="preserve">
          <source>Add a link from the cart view to the shipping view:</source>
          <target state="translated">カートビューから配送ビューへのリンクを追加します。</target>
        </trans-unit>
        <trans-unit id="1b09296091f649517aef9c1ef93b3afd99d35b64" translate="yes" xml:space="preserve">
          <source>Add a nav bar to the shell template with anchor tags, &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">アンカータグ、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して、シェルテンプレートにナビゲーションバーを追加します。</target>
        </trans-unit>
        <trans-unit id="2bbee8538ab17d504f4be598d200c8c3b2e7a0ae" translate="yes" xml:space="preserve">
          <source>Add a navigation link (&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">ナビゲーションリンクを追加する（ &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b367e5a23e3448e784824d7af249cabb9ee76d03" translate="yes" xml:space="preserve">
          <source>Add a new hero</source>
          <target state="translated">新しいヒーローを追加</target>
        </trans-unit>
        <trans-unit id="40835f4ea8b193fb5050ee0b06e0a4cdd3c9dfdf" translate="yes" xml:space="preserve">
          <source>Add a private &lt;code&gt;heroService&lt;/code&gt; parameter of type &lt;code&gt;HeroService&lt;/code&gt; to the constructor.</source>
          <target state="translated">タイプが &lt;code&gt;HeroService&lt;/code&gt; のプライベート &lt;code&gt;heroService&lt;/code&gt; パラメーターをコンストラクターに追加します。</target>
        </trans-unit>
        <trans-unit id="4b762a4f2ebf8ababf82b0c9189c42e653747928" translate="yes" xml:space="preserve">
          <source>Add a route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches a path to the &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; へのパスに一致するルートを &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="ab28df382c483b738a050fc59f245b4da3452fff" translate="yes" xml:space="preserve">
          <source>Add a router outlet to tell the Angular router where to place the activated components in the DOM.</source>
          <target state="translated">アクティベートされたコンポーネントを DOM 内のどこに配置するかを Angular ルーターに伝えるためのルーターアウトレットを追加します。</target>
        </trans-unit>
        <trans-unit id="f6ab96d92bcf27538444f441c451dab0fe97ae2b" translate="yes" xml:space="preserve">
          <source>Add a second &lt;strong&gt;input&lt;/strong&gt; property to &lt;code&gt;HighlightDirective&lt;/code&gt; called &lt;code&gt;defaultColor&lt;/code&gt;:</source>
          <target state="translated">第二の追加&lt;strong&gt;の入力&lt;/strong&gt;にプロパティを &lt;code&gt;HighlightDirective&lt;/code&gt; と呼ばれる &lt;code&gt;defaultColor&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="0360118b87d7c084a3d4de92fd385ba9d82b44a8" translate="yes" xml:space="preserve">
          <source>Add a secondary route</source>
          <target state="translated">セカンダリールートの追加</target>
        </trans-unit>
        <trans-unit id="67f2d5ad7d4c0f53d3994b3037346c2b3a7dabae" translate="yes" xml:space="preserve">
          <source>Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to retrieve shipping data from a &lt;code&gt;.json&lt;/code&gt; file.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;.json&lt;/code&gt; ファイルから配送データを取得することにより、カート内の商品の配送価格を取得する配送コンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="df85b17cb0ee99d3e13548d05a32d7c0a58b916a" translate="yes" xml:space="preserve">
          <source>Add a wildcard route to intercept invalid URLs and handle them gracefully. A wildcard route has a path consisting of two asterisks. It matches every URL. Thus, the router selects this wildcard route if it can't match a route earlier in the configuration. A wildcard route can navigate to a custom &quot;404 Not Found&quot; component or &lt;a href=&quot;router-tutorial-toh#redirect&quot;&gt;redirect&lt;/a&gt; to an existing route.</source>
          <target state="translated">ワイルドカードルートを追加して、無効なURLをインターセプトし、それらを適切に処理します。ワイルドカードルートには、2つのアスタリスクで構成されるパスがあります。すべてのURLに一致します。したがって、ルータは、設定の初期のルートと一致できない場合、このワイルドカードルートを選択します。ワイルドカードルートは、カスタムの「404 Not Found」コンポーネントに移動したり、既存のルートに&lt;a href=&quot;router-tutorial-toh#redirect&quot;&gt;リダイレクト&lt;/a&gt;したりできます。</target>
        </trans-unit>
        <trans-unit id="6670b3ecbb4947a0775a0511be5562a2546551aa" translate="yes" xml:space="preserve">
          <source>Add a worker creation snippet in a sibling file of the same name.</source>
          <target state="translated">同名の兄弟ファイルにワーカー作成スニペットを追加します。</target>
        </trans-unit>
        <trans-unit id="53a090c0cbe5f393b4f72c0d53099df40e3e19ee" translate="yes" xml:space="preserve">
          <source>Add additional messages to hero service</source>
          <target state="translated">ヒーローサービスに追加メッセージを追加</target>
        </trans-unit>
        <trans-unit id="8a72840865c6d30c75b7583a9277122b64be3c06" translate="yes" xml:space="preserve">
          <source>Add an &quot;Admin&quot; link to the &lt;code&gt;AppComponent&lt;/code&gt; shell so that users can get to this feature.</source>
          <target state="translated">ユーザーがこの機能にアクセスできるように、「管理」リンクを &lt;code&gt;AppComponent&lt;/code&gt; シェルに追加します。</target>
        </trans-unit>
        <trans-unit id="a91ab35b602db9385b1ae8779a44b0cd6b1984e1" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; at the top,</source>
          <target state="translated">上部に &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; を追加し、</target>
        </trans-unit>
        <trans-unit id="24c4502c2264205bcee1737bc30aa0ee46ca9d07" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;&lt;a href=&quot;../api/router/scroll#anchor&quot;&gt;anchor&lt;/a&gt;&lt;/code&gt; element so you can jump to a certain point on the page.</source>
          <target state="translated">ページの特定のポイントにジャンプできるように &lt;code&gt;&lt;a href=&quot;../api/router/scroll#anchor&quot;&gt;anchor&lt;/a&gt;&lt;/code&gt; 要素を追加します。</target>
        </trans-unit>
        <trans-unit id="c7d4ba0fb65e47e4771cc8eb4c3813048bf92910" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;anchor&lt;/code&gt; element so you can jump to a certain point on the page.</source>
          <target state="translated">ページ上の特定のポイントにジャンプできるように、 &lt;code&gt;anchor&lt;/code&gt; 要素を追加します。</target>
        </trans-unit>
        <trans-unit id="10310394c0ff287daff71666336f98250844947c" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;animations&lt;/code&gt; array to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata that contains the &lt;code&gt;slideInAnimation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slideInAnimation&lt;/code&gt; を含む &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;メタデータに &lt;code&gt;animations&lt;/code&gt; 配列を追加します。</target>
        </trans-unit>
        <trans-unit id="b6710fdef5071c7587eb69e5c4821c27c6547053" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;animations&lt;/code&gt; array to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata's that contains the &lt;code&gt;slideInAnimation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slideInAnimation&lt;/code&gt; を含む &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;メタデータに &lt;code&gt;animations&lt;/code&gt; 配列を追加します。</target>
        </trans-unit>
        <trans-unit id="c0511deb3d9404e119de6815d1e1fb84dc05c2ca" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;ngSubmit&lt;/code&gt; event listener to the &lt;code&gt;form&lt;/code&gt; tag with the &lt;code&gt;onSubmit()&lt;/code&gt; callback method.</source>
          <target state="translated">&lt;code&gt;onSubmit()&lt;/code&gt; コールバックメソッドを使用して、 &lt;code&gt;ngSubmit&lt;/code&gt; イベントリスナーを &lt;code&gt;form&lt;/code&gt; タグに追加します。</target>
        </trans-unit>
        <trans-unit id="a3ec368ee4d735782b2fa273a86fd1b22faf2bdd" translate="yes" xml:space="preserve">
          <source>Add an &lt;em&gt;item&lt;/em&gt; node for your guide page as a child of the appropriate &lt;em&gt;header&lt;/em&gt; node. It probably looks something like this one.</source>
          <target state="translated">ガイドページの&lt;em&gt;アイテム&lt;/em&gt;ノードを適切な&lt;em&gt;ヘッダー&lt;/em&gt;ノードの子として追加します。おそらくこのようなものです。</target>
        </trans-unit>
        <trans-unit id="72b3e470d4f46dc5b655b73f7cb688598b57a288" translate="yes" xml:space="preserve">
          <source>Add an admin feature module</source>
          <target state="translated">管理機能モジュールの追加</target>
        </trans-unit>
        <trans-unit id="065d79ddcd8ef4cbfce2bde87eff9b4a21deb35b" translate="yes" xml:space="preserve">
          <source>Add an outlet named &quot;popup&quot; in the &lt;code&gt;AppComponent&lt;/code&gt;, directly below the unnamed outlet.</source>
          <target state="translated">名前のないアウトレットのすぐ下の &lt;code&gt;AppComponent&lt;/code&gt; に「popup」というアウトレットを追加します。</target>
        </trans-unit>
        <trans-unit id="c3ad9fae4902afb2d22aab11c7c7122afe3cb1b3" translate="yes" xml:space="preserve">
          <source>Add and remove CSS class names from an element's &lt;code&gt;class&lt;/code&gt; attribute with a &lt;strong&gt;class binding&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;クラスバインディングを使用&lt;/strong&gt;して、要素の &lt;code&gt;class&lt;/code&gt; 属性にCSSクラス名を追加および削除します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebc7d586988be901bf1dcd135e15130d4271ae30" translate="yes" xml:space="preserve">
          <source>Add another feature module</source>
          <target state="translated">別の機能モジュールを追加</target>
        </trans-unit>
        <trans-unit id="83553ff42a9fe1b0b7cd5ccc05916aaaf1b48824" translate="yes" xml:space="preserve">
          <source>Add application styles</source>
          <target state="translated">アプリケーションスタイルの追加</target>
        </trans-unit>
        <trans-unit id="6874ce7f78e90d16a31435155e6fa0b2b97fdd6c" translate="yes" xml:space="preserve">
          <source>Add bindings to the &lt;code&gt;ChildComponent&lt;/code&gt; and the &lt;code&gt;AppComponent&lt;/code&gt; templates. In the &lt;code&gt;ChildComponent&lt;/code&gt; template, add the following binding:</source>
          <target state="translated">バインディングを追加 &lt;code&gt;ChildComponent&lt;/code&gt; と &lt;code&gt;AppComponent&lt;/code&gt; のテンプレート。で &lt;code&gt;ChildComponent&lt;/code&gt; のテンプレートは、以下のバインディングを追加します。</target>
        </trans-unit>
        <trans-unit id="6e92e364ebed8c2a5a1a8e64de16ee2cc836b8bd" translate="yes" xml:space="preserve">
          <source>Add custom CSS for visual feedback</source>
          <target state="translated">ビジュアルフィードバック用のカスタムCSSを追加</target>
        </trans-unit>
        <trans-unit id="558badc8a9869f5c75cbd78715d1c871dd8f4a13" translate="yes" xml:space="preserve">
          <source>Add custom CSS to provide visual feedback on the status.</source>
          <target state="translated">カスタムCSSを追加して、ステータスの視覚的なフィードバックを提供します。</target>
        </trans-unit>
        <trans-unit id="8fd1501a03328a721bc2b3c83701735e84f6e4de" translate="yes" xml:space="preserve">
          <source>Add custom CSS to provide visual feedback.</source>
          <target state="translated">カスタムCSSを追加して視覚的なフィードバックを提供します。</target>
        </trans-unit>
        <trans-unit id="b11bcc0560cc0fedef2d7534656122746af6fdc3" translate="yes" xml:space="preserve">
          <source>Add dashboard link to the shell</source>
          <target state="translated">シェルにダッシュボードリンクを追加する</target>
        </trans-unit>
        <trans-unit id="4cd616df747d101eb1e05b09e9806cae816c5dd5" translate="yes" xml:space="preserve">
          <source>Add definitions for the &lt;code&gt;ng-*&lt;/code&gt; CSS classes.</source>
          <target state="translated">&lt;code&gt;ng-*&lt;/code&gt; CSSクラスの定義を追加します。</target>
        </trans-unit>
        <trans-unit id="4baa429880b9ffc3372db13f7438523250984f35" translate="yes" xml:space="preserve">
          <source>Add editable fields to update a model with two-way data binding.</source>
          <target state="translated">双方向データバインディングでモデルを更新するための編集可能なフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="b8182a8c9da9e5a40dc463384bfe15403d49fc19" translate="yes" xml:space="preserve">
          <source>Add guard and resolver service providers to the NgModule's providers.</source>
          <target state="translated">NgModuleのプロバイダにガードとリゾルバのサービスプロバイダを追加します。</target>
        </trans-unit>
        <trans-unit id="a4f062174e363530ba2b7114cc81bec10ce69af3" translate="yes" xml:space="preserve">
          <source>Add helpful descriptions and meanings</source>
          <target state="translated">役に立つ説明と意味を追加</target>
        </trans-unit>
        <trans-unit id="2eaeed60de365bb5468814ae23f30eb82eac1d08" translate="yes" xml:space="preserve">
          <source>Add heroes functionality</source>
          <target state="translated">ヒーロー機能を追加</target>
        </trans-unit>
        <trans-unit id="91c46c8ac0746a670e328085f340040aed238b68" translate="yes" xml:space="preserve">
          <source>Add in-app navigation with routing</source>
          <target state="translated">ルーティングでアプリ内ナビゲーションを追加</target>
        </trans-unit>
        <trans-unit id="e17ca50f78ba999694962acd9cd433f915376536" translate="yes" xml:space="preserve">
          <source>Add input fields for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; attribute binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; form controls for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; to their input fields. The final complete component is as follows:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; 入力フィールドを追加します。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 属性バインディングを使用して、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; &lt;code&gt;checkoutForm&lt;/code&gt; フォームコントロールを入力フィールドにバインドします。最終的な完全なコンポーネントは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="913bb1292105665155e69ec153ed609204adeb60" translate="yes" xml:space="preserve">
          <source>Add input fields for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; attribute binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; form controls for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; to their input fields. The final complete component is shown below:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; 入力フィールドを追加します。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 属性バインディングを使用して、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; &lt;code&gt;checkoutForm&lt;/code&gt; フォームコントロールを入力フィールドにバインドします。最終的な完全なコンポーネントを以下に示します。</target>
        </trans-unit>
        <trans-unit id="3a872bc80b94d603f69ec286fe3c8a03eaf19a91" translate="yes" xml:space="preserve">
          <source>Add logic to handle the validation status.</source>
          <target state="translated">検証ステータスを処理するロジックを追加します。</target>
        </trans-unit>
        <trans-unit id="ab141913508f673f30373ec22d2f90af03bb1c3c" translate="yes" xml:space="preserve">
          <source>Add only &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes to an NgModule's &lt;code&gt;declarations&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;declarations&lt;/code&gt; &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;可能な&lt;/a&gt;クラスのみをNgModuleの宣言リストに追加します。</target>
        </trans-unit>
        <trans-unit id="ccae50a19752da301fe31954fbb8425f6cac0c8e" translate="yes" xml:space="preserve">
          <source>Add or remove several CSS classes simultaneously with &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; と同時に複数のCSSクラスを追加または削除します。</target>
        </trans-unit>
        <trans-unit id="04098c5df332b887b1b69ea6a9b2bb0ae8f0620c" translate="yes" xml:space="preserve">
          <source>Add powers with &lt;code&gt;*ngFor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*ngFor&lt;/code&gt; で累乗を追加</target>
        </trans-unit>
        <trans-unit id="110d8765a212752a0d788afe8d11d67a8aeca05a" translate="yes" xml:space="preserve">
          <source>Add private CSS styles to &lt;code&gt;hero-search.component.css&lt;/code&gt; as listed in the &lt;a href=&quot;toh-pt6#herosearchcomponent&quot;&gt;final code review&lt;/a&gt; below.</source>
          <target state="translated">下記の&lt;a href=&quot;toh-pt6#herosearchcomponent&quot;&gt;最終的なコードレビューに&lt;/a&gt;リストされているように、プライベートCSSスタイルを &lt;code&gt;hero-search.component.css&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="5d9462e914b11dbf729d242f7fe08726e37f909a" translate="yes" xml:space="preserve">
          <source>Add router configuration to the NgModule's import.</source>
          <target state="translated">NgModuleのインポートにルータの設定を追加します。</target>
        </trans-unit>
        <trans-unit id="83258ee6700fe22a4bb3a97f03d2dfde8f15d1db" translate="yes" xml:space="preserve">
          <source>Add routing (a URL pattern) for the cart component.</source>
          <target state="translated">カートコンポーネントのルーティング(URLパターン)を追加します。</target>
        </trans-unit>
        <trans-unit id="315a11c2127d0033673c94374becd4aaec9a355d" translate="yes" xml:space="preserve">
          <source>Add schematics</source>
          <target state="translated">回路図の追加</target>
        </trans-unit>
        <trans-unit id="47b444c3155edf48537081c48320158b81013f10" translate="yes" xml:space="preserve">
          <source>Add search to the Dashboard</source>
          <target state="translated">ダッシュボードに検索を追加</target>
        </trans-unit>
        <trans-unit id="c77793aecadc69eab86def982b0073cbb93f4891" translate="yes" xml:space="preserve">
          <source>Add services</source>
          <target state="translated">サービスの追加</target>
        </trans-unit>
        <trans-unit id="407c4e4ebc265f1152ba29994434476ffa6b1e82" translate="yes" xml:space="preserve">
          <source>Add similar &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; bindings and &lt;code&gt;name&lt;/code&gt; attributes to &lt;em&gt;Alter Ego&lt;/em&gt; and &lt;em&gt;Hero Power&lt;/em&gt;. You'll ditch the input box binding message and add a new binding (at the top) to the component's &lt;code&gt;diagnostic&lt;/code&gt; property. Then you can confirm that two-way data binding works &lt;em&gt;for the entire hero model&lt;/em&gt;.</source>
          <target state="translated">同様の &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; バインディングと &lt;code&gt;name&lt;/code&gt; 属性を&lt;em&gt;Alter Ego&lt;/em&gt;と&lt;em&gt;Hero Powerに&lt;/em&gt;追加します。入力ボックスバインディングメッセージを破棄し、新しいバインディング（上部）をコンポーネントの &lt;code&gt;diagnostic&lt;/code&gt; プロパティに追加します。次に、双方向データバインディング&lt;em&gt;がヒーローモデル全体で&lt;/em&gt;機能することを確認できます。</target>
        </trans-unit>
        <trans-unit id="2bc0af17437367030e939964625be667cfb010e1" translate="yes" xml:space="preserve">
          <source>Add similar &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; bindings and &lt;code&gt;name&lt;/code&gt; attributes to &lt;strong&gt;Alter Ego&lt;/strong&gt; and &lt;strong&gt;Hero Power&lt;/strong&gt;.</source>
          <target state="translated">同様の追加 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; バインディングと &lt;code&gt;name&lt;/code&gt; に属性を&lt;strong&gt;分身&lt;/strong&gt;と&lt;strong&gt;ヒーローパワー&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d2b3f86b38cb2dde1ef5065d8b22c6e0110a2bcf" translate="yes" xml:space="preserve">
          <source>Add slashes to the end of the name.</source>
          <target state="translated">名前の最後にスラッシュを追加します。</target>
        </trans-unit>
        <trans-unit id="8cd936bcdf1c06fd74532b527176e8c812700cb2" translate="yes" xml:space="preserve">
          <source>Add slashes to the end of the name. It is now touched and dirty.</source>
          <target state="translated">名前の最後にスラッシュを追加します。触れて汚れた状態になりました。</target>
        </trans-unit>
        <trans-unit id="0550c5a07a1c0dcc7a56e45baf44916075288a7a" translate="yes" xml:space="preserve">
          <source>Add some styles to apply when the list item is selected.</source>
          <target state="translated">リスト項目が選択されたときに適用するスタイルを追加します。</target>
        </trans-unit>
        <trans-unit id="c5414ad2c5935b6f6b81963ba55375bf2c13950b" translate="yes" xml:space="preserve">
          <source>Add support for legacy browsers like Internet Explorer using differential loading.</source>
          <target state="translated">差分読み込みを使用して、Internet Explorer のようなレガシーブラウザのサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="4e25fad2d2863d50af41e193a0affb5fba19770a" translate="yes" xml:space="preserve">
          <source>Add template files</source>
          <target state="translated">テンプレートファイルの追加</target>
        </trans-unit>
        <trans-unit id="45494eaf3d2416a77062c0b4d0001d67e91ffd3a" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element just after the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for this application, set the &lt;code&gt;href&lt;/code&gt; value in &lt;code&gt;index.html&lt;/code&gt; as shown here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; タグの直後に &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素を追加します。この &lt;code&gt;app&lt;/code&gt; 場合のように、アプリフォルダーがアプリケーションルートである場合は、次に示すように &lt;code&gt;index.html&lt;/code&gt; に &lt;code&gt;href&lt;/code&gt; 値を設定します。</target>
        </trans-unit>
        <trans-unit id="7f9455fdcd2db20256999a9379ce57b8a990d6ed" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element just after the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for this application, set the &lt;code&gt;href&lt;/code&gt; value in &lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt;&lt;em&gt;exactly&lt;/em&gt; as shown here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; タグの直後に &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素を追加します。 &lt;code&gt;app&lt;/code&gt; フォルダーがアプリケーションルートである場合、このアプリケーションの場合と同様に、&lt;strong&gt; &lt;code&gt;index.html&lt;/code&gt; &lt;/strong&gt;の &lt;code&gt;href&lt;/code&gt; 値を次のように&lt;em&gt;正確&lt;/em&gt;に設定します。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="401b47aa633ce6fd0108939ca4e6362163b1958e" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, using two-way data binding syntax &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">双方向データバインディング構文 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt; &lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;）] = &quot;...&quot;を使用して、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブを追加します。</target>
        </trans-unit>
        <trans-unit id="a95c1b1b2b94b9931f706ade782f0c64278d07c6" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; object to the &lt;code&gt;router.navigate()&lt;/code&gt; method that navigates you to the &lt;code&gt;/login&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;/login&lt;/code&gt; ルートに移動する &lt;code&gt;router.navigate()&lt;/code&gt; メソッドに &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; オブジェクトを追加します。</target>
        </trans-unit>
        <trans-unit id="7809d7d93d8d8c2ef77c8d40851c147a8ae0bdb9" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; ディレクティブを追加します。</target>
        </trans-unit>
        <trans-unit id="e83a0d78e320049911e3936af97267e19e1e5a5d" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; hero property</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ヒーロープロパティを追加する</target>
        </trans-unit>
        <trans-unit id="1238288f2af7671f7984451ba7bf6b13fe071ab7" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;@angular/fire&lt;/code&gt; schematics that will handle your deployment using &lt;code&gt;ng add @angular/fire&lt;/code&gt;.</source>
          <target state="translated">追加 &lt;code&gt;@angular/fire&lt;/code&gt; 使用して展開を処理する回路図 &lt;code&gt;ng add @angular/fire&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5dce54b9215c3ca22af64b7a5b4aa23a1c6a8ec3" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;AppRoutingModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; を追加する</target>
        </trans-unit>
        <trans-unit id="524c94c18049eabcf94b120aa354fd0d2d3c943c" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;Guard&lt;/code&gt; to the crisis detail route in &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; array property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; 配列プロパティを使用して、guard &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; の危機詳細ルートに &lt;code&gt;Guard&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="7b6c098652257e821945f213c328182f48fad2b1" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;Guard&lt;/code&gt; to the crisis detail route in &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; using the &lt;code&gt;canDeactivate&lt;/code&gt; array property.</source>
          <target state="translated">&lt;code&gt;canDeactivate&lt;/code&gt; 配列プロパティを使用して、 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; の危機詳細ルートに &lt;code&gt;Guard&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="1003fe175e2dd94446095c09e6b6620803939a0d" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;LoginComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LoginComponent&lt;/code&gt; を追加します</target>
        </trans-unit>
        <trans-unit id="ccc1be62085ec733e656d1b1b5ebeed7389554e8" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; strategy to the &lt;code&gt;AppRoutingModule&lt;/code&gt; providers array so it can be injected elsewhere in the app.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; プロバイダー配列に &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 戦略を追加して、アプリの他の場所に注入できるようにします。</target>
        </trans-unit>
        <trans-unit id="03e48913a9f5fd74a227113197dc26c859b66743" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; strategy to the &lt;code&gt;AppRoutingModule&lt;/code&gt; providers array so you can inject it elsewhere in the app.</source>
          <target state="translated">&lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 戦略を &lt;code&gt;AppRoutingModule&lt;/code&gt; プロバイダー配列に追加して、アプリの他の場所に挿入できるようにします。</target>
        </trans-unit>
        <trans-unit id="480a9d9da11c13fa2186a0678c4789bf9795fb33" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;address&lt;/code&gt; form group containing the &lt;code&gt;street&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;zip&lt;/code&gt; fields to the &lt;code&gt;ProfileEditor&lt;/code&gt; template.</source>
          <target state="translated">&lt;code&gt;street&lt;/code&gt; 、 &lt;code&gt;city&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;zip&lt;/code&gt; フィールドを含む &lt;code&gt;address&lt;/code&gt; フォームグループを &lt;code&gt;ProfileEditor&lt;/code&gt; テンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="9c7c31da3e750a8e32a8e1508ea2c5877158d643" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;delete()&lt;/code&gt; handler to the component class.</source>
          <target state="translated">&lt;code&gt;delete()&lt;/code&gt; ハンドラーをコンポーネントクラスに追加します。</target>
        </trans-unit>
        <trans-unit id="537fee4674204d15546023152c655ac018628fc3" translate="yes" xml:space="preserve">
          <source>Add the &lt;em&gt;CheckmarkPipe&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;CheckmarkPipeを&lt;/em&gt;追加する&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c4a17c685f9166b6dd73f21ad74478ecc3dfb360" translate="yes" xml:space="preserve">
          <source>Add the &lt;em&gt;LoginComponent&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;LoginComponentを&lt;/em&gt;追加する&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e595eb4e5629fba187523d4d67334582bb922a69" translate="yes" xml:space="preserve">
          <source>Add the Angular router</source>
          <target state="translated">Angularルーターを追加する</target>
        </trans-unit>
        <trans-unit id="a7067487bde72912bc32222bb63da44e0cbe00b4" translate="yes" xml:space="preserve">
          <source>Add the Bootstrap CSS file to the &quot;styles&quot; array:</source>
          <target state="translated">style」配列にBootstrapのCSSファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="788a7f1435d8e605cc5c4f56a0f055007ae60c45" translate="yes" xml:space="preserve">
          <source>Add the Router Outlet</source>
          <target state="translated">ルータアウトレットの追加</target>
        </trans-unit>
        <trans-unit id="6ecf7d301e120b4a58d039786905132e5b7b17ca" translate="yes" xml:space="preserve">
          <source>Add the ability to navigate between the &lt;em&gt;Heroes&lt;/em&gt; and &lt;em&gt;Dashboard&lt;/em&gt; views.</source>
          <target state="translated">&lt;em&gt;ヒーロー&lt;/em&gt;ビューと&lt;em&gt;ダッシュボード&lt;/em&gt;ビューの間を移動する機能を追加します。</target>
        </trans-unit>
        <trans-unit id="f7e2426390337e60becf33182abe694cadb9fe52" translate="yes" xml:space="preserve">
          <source>Add the click event handler</source>
          <target state="translated">クリックイベントハンドラの追加</target>
        </trans-unit>
        <trans-unit id="ad72b9c6abfbbbe3312d99a3bff6e2256f92606e" translate="yes" xml:space="preserve">
          <source>Add the component class name to the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">コンポーネントクラス名を &lt;code&gt;declarations&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="7151a548f087adf025cecc68ba3a8f52d7eca575" translate="yes" xml:space="preserve">
          <source>Add the dashboard route</source>
          <target state="translated">ダッシュボードのルートを追加する</target>
        </trans-unit>
        <trans-unit id="203ca6f461ddbefc62dfa3039a19792cf63cca55" translate="yes" xml:space="preserve">
          <source>Add the default route somewhere &lt;em&gt;above&lt;/em&gt; the wildcard route. It's just above the wildcard route in the following excerpt showing the complete &lt;code&gt;appRoutes&lt;/code&gt; for this milestone.</source>
          <target state="translated">ワイルドカードルートの&lt;em&gt;上&lt;/em&gt;のどこかにデフォルトルートを追加します。このマイルストーンの完全な &lt;code&gt;appRoutes&lt;/code&gt; を示す次の抜粋では、ワイルドカードルートのすぐ上にあります。</target>
        </trans-unit>
        <trans-unit id="1963c978d5e21dc9c5425538a9a4b6bab6b449a0" translate="yes" xml:space="preserve">
          <source>Add the factory function</source>
          <target state="translated">工場出荷時の機能を追加</target>
        </trans-unit>
        <trans-unit id="de4bb5213e63549ca334089fd56344bb1e599059" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;[class.selected]&lt;/code&gt; binding to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; in the &lt;code&gt;HeroesComponent&lt;/code&gt; template:</source>
          <target state="translated">次の &lt;code&gt;[class.selected]&lt;/code&gt; バインディングを &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートの &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="55dd3db3ee551d474ca23cf2dbe6f03b7eb5e979" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;addHero()&lt;/code&gt; method to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">次の &lt;code&gt;addHero()&lt;/code&gt; メソッドを &lt;code&gt;HeroService&lt;/code&gt; クラスに追加します。</target>
        </trans-unit>
        <trans-unit id="b77ba07b5fce74196dfb8de6a7815fe316e12807" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;import&lt;/code&gt; statement.</source>
          <target state="translated">次の &lt;code&gt;import&lt;/code&gt; ステートメントを追加します。</target>
        </trans-unit>
        <trans-unit id="4a15eb2536beea1005cec68501c5559c0ee70f4b" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;onSelect()&lt;/code&gt; method, which assigns the clicked hero from the template to the component's &lt;code&gt;selectedHero&lt;/code&gt;.</source>
          <target state="translated">クリックされたヒーローをテンプレートからコンポーネントの &lt;code&gt;selectedHero&lt;/code&gt; に割り当てる次の &lt;code&gt;onSelect()&lt;/code&gt; メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="f0f064872909e5f0fc82d9a7616bf06812ac7126" translate="yes" xml:space="preserve">
          <source>Add the following HTML &lt;em&gt;immediately below&lt;/em&gt; the &lt;em&gt;Alter Ego&lt;/em&gt; group:</source>
          <target state="translated">以下のHTMLを追加&lt;em&gt;直下&lt;/em&gt;&lt;em&gt;アルターエゴの&lt;/em&gt;グループ：</target>
        </trans-unit>
        <trans-unit id="fc2589b5414b85cb1ff857bc45f360f5639642cf" translate="yes" xml:space="preserve">
          <source>Add the following button element to the &lt;code&gt;HeroesComponent&lt;/code&gt; template, after the hero name in the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">繰り返される &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のヒーロー名の後に、次のボタン要素を &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="5a6f4e757eee5977b078ed8e00ea18bb9638517d" translate="yes" xml:space="preserve">
          <source>Add the following code in &lt;code&gt;src/typings.d.ts&lt;/code&gt;.</source>
          <target state="translated">次のコードを &lt;code&gt;src/typings.d.ts&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="f9c0b60ec7201d990150eef8aa94f1107e3b4fa5" translate="yes" xml:space="preserve">
          <source>Add the following code in &lt;code&gt;src/typings.d.ts&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;src/typings.d.ts&lt;/code&gt; 次のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="f21cce86ef93d7473d26a8919f3461df9e29a091" translate="yes" xml:space="preserve">
          <source>Add the following code to your &lt;code&gt;svg.component.svg&lt;/code&gt; file:</source>
          <target state="translated">次のコードを &lt;code&gt;svg.component.svg&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="ddce7ccd00ce11e7e21a51a655f19868eb056b89" translate="yes" xml:space="preserve">
          <source>Add the following code to your factory function.</source>
          <target state="translated">ファクトリー関数に以下のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="4a57f8275852a186fdbefe442695b8d49e11f67f" translate="yes" xml:space="preserve">
          <source>Add the following content to the new proxy file:</source>
          <target state="translated">新しいプロキシファイルに以下の内容を追加します。</target>
        </trans-unit>
        <trans-unit id="c9605c6de77435b086651273344bcc1d56aa9255" translate="yes" xml:space="preserve">
          <source>Add the following imports:</source>
          <target state="translated">以下の輸入品を追加します。</target>
        </trans-unit>
        <trans-unit id="24d2ab2e1d0674bcd525ac4301acb8cfc9897f1d" translate="yes" xml:space="preserve">
          <source>Add the following to your &lt;code&gt;devDependencies&lt;/code&gt; in your project's &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">プロジェクトの &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;devDependencies&lt;/code&gt; に以下を追加します</target>
        </trans-unit>
        <trans-unit id="093cec2b9274476c658b86701d9081c197fcc8c6" translate="yes" xml:space="preserve">
          <source>Add the localize package</source>
          <target state="translated">ローカライズパッケージの追加</target>
        </trans-unit>
        <trans-unit id="cfc67cd7835b7089b0b3a8304bb309cd413d6260" translate="yes" xml:space="preserve">
          <source>Add the new file to the project as a sibling to &lt;code&gt;index.html&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; の兄弟として新しいファイルをプロジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="1051e7b41c871379ce9f035916034c6c6d41c45c" translate="yes" xml:space="preserve">
          <source>Add the product descriptions. On the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, use an &lt;code&gt;*&lt;a href=&quot;api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive so that Angular only creates the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element if the current product has a description.</source>
          <target state="translated">製品の説明を追加します。オン &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素、使用 &lt;code&gt;*&lt;a href=&quot;api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 角度だけ作成するよう指示を &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 現在の製品が記述されている場合、要素を。</target>
        </trans-unit>
        <trans-unit id="68d5651877a44ba3f24e7ccef506aa087346b4af" translate="yes" xml:space="preserve">
          <source>Add the same &lt;code&gt;AuthGuard&lt;/code&gt; to the &lt;code&gt;component-less&lt;/code&gt; admin route to protect all other child routes at one time instead of adding the &lt;code&gt;AuthGuard&lt;/code&gt; to each route individually.</source>
          <target state="translated">各ルートに個別に &lt;code&gt;AuthGuard&lt;/code&gt; を追加する代わりに、 &lt;code&gt;component-less&lt;/code&gt; 管理者ルートに同じ &lt;code&gt;AuthGuard&lt;/code&gt; を追加して、一度に他のすべての子ルートを保護します。</target>
        </trans-unit>
        <trans-unit id="95f5018ed753f06b9ceefdb141d293d3fb786ae4" translate="yes" xml:space="preserve">
          <source>Add the services as private variables to the constructor so that Angular injects them (makes them visible to the component).</source>
          <target state="translated">コンストラクタにサービスをプライベート変数として追加し、Angularがサービスをインジェクトするようにします(コンポーネントから見えるようにします)。</target>
        </trans-unit>
        <trans-unit id="5ccc80ef1b883c021ac46ae3dea76bdc9c94b772" translate="yes" xml:space="preserve">
          <source>Add the template HTML below after the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; closing the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; element.</source>
          <target state="translated">以下のテンプレートHTMLを、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; &amp;gt;がformGroupName要素を閉じた後に追加します。</target>
        </trans-unit>
        <trans-unit id="bb92c4abe8557f2d7d345a6632fbe74200e43fb6" translate="yes" xml:space="preserve">
          <source>Add the validator to the field in the form.</source>
          <target state="translated">フォームのフィールドにバリデータを追加します。</target>
        </trans-unit>
        <trans-unit id="0fd30c6a13796e411d8a941f42d23c96bdea73d9" translate="yes" xml:space="preserve">
          <source>Add these class definitions to a new &lt;code&gt;forms.css&lt;/code&gt; file.</source>
          <target state="translated">これらのクラス定義を新しい &lt;code&gt;forms.css&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="08992a4a5c9ccd87853e5a2dd74a7b308e8abe90" translate="yes" xml:space="preserve">
          <source>Add this &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; element to the &lt;code&gt;index.html&lt;/code&gt;. It replaces the old AngularJS &lt;code&gt;ng-view&lt;/code&gt; directive:</source>
          <target state="translated">この &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;index.html&lt;/code&gt; に追加します。古いAngularJS &lt;code&gt;ng-view&lt;/code&gt; ディレクティブを置き換えます。</target>
        </trans-unit>
        <trans-unit id="5e6c651992023e2db1bf098d75f8e5904243eb40" translate="yes" xml:space="preserve">
          <source>Add this directive to the &lt;code&gt;declarations&lt;/code&gt; array of the AppModule.</source>
          <target state="translated">このディレクティブをAppModuleの &lt;code&gt;declarations&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="2da14b8396dcda84eb7c24d80f95149fdd93d513" translate="yes" xml:space="preserve">
          <source>Add your routes to your application.</source>
          <target state="translated">アプリケーションにルートを追加します。</target>
        </trans-unit>
        <trans-unit id="922675049b014ebfcdc115bb25996b2e9a66d549" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;&amp;lt;live-example&amp;gt;&amp;lt;/live-example&amp;gt;&lt;/code&gt; to the page generates the two default links.</source>
          <target state="translated">追加する &lt;code&gt;&amp;lt;live-example&amp;gt;&amp;lt;/live-example&amp;gt;&lt;/code&gt; ページは、2つのデフォルトのリンクを生成します。</target>
        </trans-unit>
        <trans-unit id="e2243e38c9b9d2d491ac653861f42e3b0679135a" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;export&lt;/code&gt; doesn't work when the compiler needs the &lt;em&gt;actual value&lt;/em&gt; in order to generate code. For example, it doesn't work for the &lt;code&gt;template&lt;/code&gt; property.</source>
          <target state="translated">コンパイラーがコードを生成するために&lt;em&gt;実際の値&lt;/em&gt;を必要とする場合、 &lt;code&gt;export&lt;/code&gt; 追加は機能しません。たとえば、 &lt;code&gt;template&lt;/code&gt; プロパティでは機能しません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="51ebe15885e1d23542dd2ea65ca996d65c2d207b" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;export&lt;/code&gt; often works for variables referenced in metadata such as &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;animations&lt;/code&gt; because the compiler can generate &lt;em&gt;references&lt;/em&gt; to the exported variables in these expressions. It doesn't need the &lt;em&gt;values&lt;/em&gt; of those variables.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; 追加すると、 &lt;code&gt;providers&lt;/code&gt; や &lt;code&gt;animations&lt;/code&gt; などのメタデータで参照されている変数に対して機能することがよくあります。これは、コンパイラーがこれらの式でエクスポートされた変数への&lt;em&gt;参照&lt;/em&gt;を生成できるためです。これらの変数の&lt;em&gt;値&lt;/em&gt;は必要ありません。</target>
        </trans-unit>
        <trans-unit id="73c05dea2f6045a6ab0b0141f2228bfae1da4a5e" translate="yes" xml:space="preserve">
          <source>Adding The Angular Router And Bootstrap</source>
          <target state="translated">Angular RouterとBootstrapを追加する</target>
        </trans-unit>
        <trans-unit id="42cdd7c85ef202bd8e15530db8d1f015839230b7" translate="yes" xml:space="preserve">
          <source>Adding a 404 page</source>
          <target state="translated">404ページの追加</target>
        </trans-unit>
        <trans-unit id="8b07e292ec36cfffa9bf6db5c80ac3f1e704fabc" translate="yes" xml:space="preserve">
          <source>Adding a Web Worker</source>
          <target state="translated">ウェブワーカーの追加</target>
        </trans-unit>
        <trans-unit id="283a5c95ad520ccd21cbdbc93a6bfeef280fcc02" translate="yes" xml:space="preserve">
          <source>Adding a basic form control</source>
          <target state="translated">基本的なフォームコントロールの追加</target>
        </trans-unit>
        <trans-unit id="3797d75eea052400c99af56aab9acb4efe36e4d2" translate="yes" xml:space="preserve">
          <source>Adding a hero results in a new hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. The spy's &lt;code&gt;ngOnInit()&lt;/code&gt; logs that event.</source>
          <target state="translated">ヒーローを追加すると、新しいヒーロー &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; が作成されます。スパイの &lt;code&gt;ngOnInit()&lt;/code&gt; はそのイベントを記録します。</target>
        </trans-unit>
        <trans-unit id="28d2a7e95c52e8a42120833923f4cf54d6029d23" translate="yes" xml:space="preserve">
          <source>Adding a library to the runtime global scope</source>
          <target state="translated">ランタイムグローバルスコープにライブラリを追加する</target>
        </trans-unit>
        <trans-unit id="d3ccff775835290c3a128ace87621dd407763a67" translate="yes" xml:space="preserve">
          <source>Adding a maximum length validator</source>
          <target state="translated">最大長バリデータの追加</target>
        </trans-unit>
        <trans-unit id="494a8737b67971dffa71048bb3c7fb3bea9dd8a9" translate="yes" xml:space="preserve">
          <source>Adding a minimum length validator</source>
          <target state="translated">最小長バリデータの追加</target>
        </trans-unit>
        <trans-unit id="f16c1a5e99ec210cafaff11287b5840cc4a99091" translate="yes" xml:space="preserve">
          <source>Adding a pattern validator</source>
          <target state="translated">パターンバリデータの追加</target>
        </trans-unit>
        <trans-unit id="721e3edbe8fdc9ba83d0bbb1713c2a14187f993d" translate="yes" xml:space="preserve">
          <source>Adding a redirect</source>
          <target state="translated">リダイレクトの追加</target>
        </trans-unit>
        <trans-unit id="9e46d1f4ff66b89003f86bb0e3b35dbd3f8f9747" translate="yes" xml:space="preserve">
          <source>Adding a required checkbox validator using template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームを使用した必須チェックボックスバリデータの追加</target>
        </trans-unit>
        <trans-unit id="fb58a5f686b6ace9b126e4f8cb5d3bc1407c9241" translate="yes" xml:space="preserve">
          <source>Adding a required validator using template-driven forms</source>
          <target state="translated">テンプレート駆動型のフォームを使って必須のバリデータを追加する</target>
        </trans-unit>
        <trans-unit id="ff1dd5c0e9955484dceb4a5b434bb9221bf949cf" translate="yes" xml:space="preserve">
          <source>Adding a schematic to a collection</source>
          <target state="translated">コレクションへの回路図の追加</target>
        </trans-unit>
        <trans-unit id="91d669aa4d61f96fec2573e664601ea346ab6c18" translate="yes" xml:space="preserve">
          <source>Adding a service worker to your project</source>
          <target state="translated">プロジェクトにサービスワーカーを追加する</target>
        </trans-unit>
        <trans-unit id="658030002117a761f4fc3965eb3cb02b87cd7749" translate="yes" xml:space="preserve">
          <source>Adding a target</source>
          <target state="translated">ターゲットの追加</target>
        </trans-unit>
        <trans-unit id="877cefe11f29758cc9d580dce08f1554b6d0419d" translate="yes" xml:space="preserve">
          <source>Adding a web worker</source>
          <target state="translated">ウェブワーカーの追加</target>
        </trans-unit>
        <trans-unit id="6525e7fcbcff7c4689063f7e684e4f978b5680bf" translate="yes" xml:space="preserve">
          <source>Adding an &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; property binding to &lt;code&gt;currentClasses&lt;/code&gt; sets the element's classes accordingly:</source>
          <target state="translated">追加 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; のへの結合性 &lt;code&gt;currentClasses&lt;/code&gt; をそれに応じて、要素のクラスを設定します。</target>
        </trans-unit>
        <trans-unit id="9b6d9feaeaa572aa7a12cbeeb46228faa046d0bc" translate="yes" xml:space="preserve">
          <source>Adding an &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; property binding to &lt;code&gt;currentStyles&lt;/code&gt; sets the element's styles accordingly:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; プロパティバインディングを &lt;code&gt;currentStyles&lt;/code&gt; に追加すると、それに応じて要素のスタイルが設定されます。</target>
        </trans-unit>
        <trans-unit id="b3fcd62ed94aad6b449fe5d37db647399301bd22" translate="yes" xml:space="preserve">
          <source>Adding an alias</source>
          <target state="translated">エイリアスの追加</target>
        </trans-unit>
        <trans-unit id="be0779a18da1ecedddf53b5dd41b56034940339f" translate="yes" xml:space="preserve">
          <source>Adding an email validator</source>
          <target state="translated">メールバリデータの追加</target>
        </trans-unit>
        <trans-unit id="5873fb7b91415ba593dcaeb0713567140d858f49" translate="yes" xml:space="preserve">
          <source>Adding and removing the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; disables and enables the button. However, the value of the &lt;em&gt;attribute&lt;/em&gt; is irrelevant, which is why you cannot enable a button by writing &lt;code&gt;&amp;lt;button disabled=&quot;false&quot;&amp;gt;Still Disabled&amp;lt;/button&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;を追加および削除すると、ボタンが無効になり、有効になります。ただし、&lt;em&gt;属性&lt;/em&gt;の値は無関係であるため、 &lt;code&gt;&amp;lt;button disabled=&quot;false&quot;&amp;gt;Still Disabled&amp;lt;/button&amp;gt;&lt;/code&gt; 記述してボタンを有効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="648930c2950fb0406df768753faa95e49e3c3c19" translate="yes" xml:space="preserve">
          <source>Adding and updating headers</source>
          <target state="translated">ヘッダーの追加と更新</target>
        </trans-unit>
        <trans-unit id="414790a41b5fe4974982ea7d7a722b357bb14c4e" translate="yes" xml:space="preserve">
          <source>Adding animations to the routed component</source>
          <target state="translated">ルーテッドコンポーネントにアニメーションを追加する</target>
        </trans-unit>
        <trans-unit id="fda140b3f5d36ebc641033e4026894261eb9a06a" translate="yes" xml:space="preserve">
          <source>Adding components for routing</source>
          <target state="translated">ルーティングのためのコンポーネントの追加</target>
        </trans-unit>
        <trans-unit id="690cf519534e614e173d15c737ef28e58825c554" translate="yes" xml:space="preserve">
          <source>Adding cross-validation to reactive forms</source>
          <target state="translated">リアクティブフォームへのクロスバリデーションの追加</target>
        </trans-unit>
        <trans-unit id="4bf3c593121d22498ba07ac28983dbfb969dc27f" translate="yes" xml:space="preserve">
          <source>Adding cross-validation to template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームにクロスバリデーションを追加する</target>
        </trans-unit>
        <trans-unit id="d38e641d4284fc56ac2105390c8e04c9bcc24c74" translate="yes" xml:space="preserve">
          <source>Adding custom validators to reactive forms</source>
          <target state="translated">リアクティブフォームにカスタムバリデータを追加する</target>
        </trans-unit>
        <trans-unit id="2d30307baa7c6ec2b5ec92c7f1425e1e5c3e35a9" translate="yes" xml:space="preserve">
          <source>Adding custom validators to template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームへのカスタムバリデータの追加</target>
        </trans-unit>
        <trans-unit id="d91d275ac43cb2fc356c392e516cde5427ae957f" translate="yes" xml:space="preserve">
          <source>Adding headers</source>
          <target state="translated">ヘッダの追加</target>
        </trans-unit>
        <trans-unit id="fbda794fe69b52e8ca3b23d8ba75916fc4762eb1" translate="yes" xml:space="preserve">
          <source>Adding navigation</source>
          <target state="translated">ナビゲーションの追加</target>
        </trans-unit>
        <trans-unit id="0c2ebad7a136b54e97bbbca2a675a16b3e11a5cd" translate="yes" xml:space="preserve">
          <source>Adding or removing controls from a form array</source>
          <target state="translated">フォーム配列からコントロールを追加または削除する</target>
        </trans-unit>
        <trans-unit id="a492d6ac1e58e89d4043aee23965954b03767c9f" translate="yes" xml:space="preserve">
          <source>Adding routable animations</source>
          <target state="translated">ルーティングアニメーションの追加</target>
        </trans-unit>
        <trans-unit id="e51afa8885ddb250bc942ce4e7bb672819fa4c34" translate="yes" xml:space="preserve">
          <source>Adding text bindings into i18n translations that are not present in the source template itself will throw a runtime error (previously, including extra bindings in translations was permitted).</source>
          <target state="translated">ソーステンプレート自体に存在しないテキストバインディングをi18n翻訳に追加すると、実行時エラーが発生します(以前は、翻訳に余分なバインディングを含めることは許可されていました)。</target>
        </trans-unit>
        <trans-unit id="44098854a5d46f22020dccf5f5c7b58428f76dad" translate="yes" xml:space="preserve">
          <source>Adding the configured &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt; is sufficient for minimal route configurations. However, as the application grows, &lt;a href=&quot;router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;refactor the routing configuration&lt;/a&gt; into a separate file and create a &lt;a href=&quot;router-tutorial-toh#routing-module&quot;&gt;Routing Module&lt;/a&gt;. A routing module is a special type of &lt;code&gt;Service Module&lt;/code&gt; dedicated to routing.</source>
          <target state="translated">最小限のルート構成には、構成 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; をAppModuleに追加する &lt;code&gt;AppModule&lt;/code&gt; で十分です。ただし、アプリケーションが大きくなるにつれて、&lt;a href=&quot;router-tutorial-toh#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;ルーティング構成&lt;/a&gt;を別のファイルにリファクタリングし、&lt;a href=&quot;router-tutorial-toh#routing-module&quot;&gt;ルーティングモジュール&lt;/a&gt;を作成します。ルーティングモジュールは、ルーティング専用の特殊なタイプの &lt;code&gt;Service Module&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7afaaaaff6b0338bff5cfe09fad06c92c7b68221" translate="yes" xml:space="preserve">
          <source>Adding the configured &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt; is sufficient for simple route configurations. As the application grows, you'll want to &lt;a href=&quot;router#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;refactor the routing configuration&lt;/a&gt; into a separate file and create a &lt;strong&gt;&lt;a href=&quot;router#routing-module&quot;&gt;Routing Module&lt;/a&gt;&lt;/strong&gt;, a special type of &lt;code&gt;Service Module&lt;/code&gt; dedicated to the purpose of routing in feature modules.</source>
          <target state="translated">構成追加 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;AppModule&lt;/code&gt; する単純な経路設定のために十分です。アプリケーションが大きくなるにつれて、&lt;a href=&quot;router#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;ルーティング構成&lt;/a&gt;を別のファイルにリファクタリングして、機能モジュールでのルーティングの目的に特化した特別なタイプの &lt;code&gt;Service Module&lt;/code&gt; ある&lt;strong&gt;&lt;a href=&quot;router#routing-module&quot;&gt;Routing Module&lt;/a&gt;&lt;/strong&gt;を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d37533032f719d87e66cb4d921f78f0010ff74bd" translate="yes" xml:space="preserve">
          <source>Adding to reactive forms</source>
          <target state="translated">反応性のあるフォームへの追加</target>
        </trans-unit>
        <trans-unit id="b1f50c4eeaf9acc84dcece41369d505b6c8bd4aa" translate="yes" xml:space="preserve">
          <source>Adding to template driven forms</source>
          <target state="translated">テンプレート駆動型フォームへの追加</target>
        </trans-unit>
        <trans-unit id="f741528e94d7a9119da6fdc2d64562b32a16957c" translate="yes" xml:space="preserve">
          <source>Adding to template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームへの追加</target>
        </trans-unit>
        <trans-unit id="b7115da5ee1dd5dc00ecc6407565a2a418a39adf" translate="yes" xml:space="preserve">
          <source>Adding two-way data binding</source>
          <target state="translated">双方向データバインディングの追加</target>
        </trans-unit>
        <trans-unit id="6db8ab49fda1d426dada84500bdbaf2cf643416a" translate="yes" xml:space="preserve">
          <source>Additional animation functionality is provided in other Angular modules for animation testing, for route-based animations, and for programmatic animation controls that allow an end user to fast forward and reverse an animation sequence.</source>
          <target state="translated">他のAngularモジュールにはアニメーションテスト用のアニメーション機能や、ルートベースのアニメーション、エンドユーザーがアニメーションシーケンスを早送りしたり反転したりすることができるプログラマティックなアニメーションコントロール用のアニメーション機能が用意されています。</target>
        </trans-unit>
        <trans-unit id="9eacfc7680c8185a25a0e3cdfcd8ab3a2e2abf6f" translate="yes" xml:space="preserve">
          <source>Additional applications and libraries go into a &lt;code&gt;projects&lt;/code&gt; folder in the workspace.</source>
          <target state="translated">追加のアプリケーションとライブラリは、ワークスペースの &lt;code&gt;projects&lt;/code&gt; フォルダーに配置されます。</target>
        </trans-unit>
        <trans-unit id="bedd0f993181b4d07bc3bc6af81ff195b60d9f72" translate="yes" xml:space="preserve">
          <source>Additional build and test options</source>
          <target state="translated">追加のビルドおよびテストオプション</target>
        </trans-unit>
        <trans-unit id="260fab856b8044e628c955f8e2996502a9cd44c2" translate="yes" xml:space="preserve">
          <source>Additional developer-defined data provided to the component via &lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. By default, no additional data is passed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を介してコンポーネントに提供される開発者定義の追加データ。デフォルトでは、追加のデータは渡されません。</target>
        </trans-unit>
        <trans-unit id="5a5f4834a14c0e07023d98f08f36b4cdc502079c" translate="yes" xml:space="preserve">
          <source>Additional pages and sections describe some basic programming techniques for Angular apps.</source>
          <target state="translated">追加ページとセクションでは、Angularアプリの基本的なプログラミングテクニックをいくつか説明しています。</target>
        </trans-unit>
        <trans-unit id="93ceccadb707587960fc3d2012d50d5f7a465692" translate="yes" xml:space="preserve">
          <source>Additional project-specific configuration files are used by tools, such as &lt;code&gt;package.json&lt;/code&gt; for the &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package manager&lt;/a&gt;, &lt;code&gt;tsconfig.json&lt;/code&gt; for &lt;a href=&quot;glossary#transpile&quot;&gt;TypeScript transpilation&lt;/a&gt;, and &lt;code&gt;tslint.json&lt;/code&gt; for &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;.</source>
          <target state="translated">追加のプロジェクト固有の設定ファイルは、次のようなツールによって使用されている &lt;code&gt;package.json&lt;/code&gt; のための&lt;a href=&quot;glossary#npm-package&quot;&gt;NPMパッケージマネージャ&lt;/a&gt;、 &lt;code&gt;tsconfig.json&lt;/code&gt; のための&lt;a href=&quot;glossary#transpile&quot;&gt;活字体のtranspilation&lt;/a&gt;、および &lt;code&gt;tslint.json&lt;/code&gt; ため&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a15fa56393dfeea6e8ddbb0e0c2a6f3cc24b93de" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
          <target state="translated">その他のリソース</target>
        </trans-unit>
        <trans-unit id="1ff0faf5f35505f92cf1420c27a17de350a98cce" translate="yes" xml:space="preserve">
          <source>Additional section headings</source>
          <target state="translated">追加セクションの見出し</target>
        </trans-unit>
        <trans-unit id="e47b689409182e07809c31b0adadfeb5e600976c" translate="yes" xml:space="preserve">
          <source>Additional strictness flags allow you to enable and disable specific types of strict template type checking. See &lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt;troubleshooting template errors&lt;/a&gt;.</source>
          <target state="translated">追加の厳密性フラグを使用すると、特定のタイプの厳密なテンプレートタイプチェックを有効または無効にできます。&lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt;テンプレートエラーのトラブルシューティングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bc4d8802d50adf700ee7745602435ef1dca90b25" translate="yes" xml:space="preserve">
          <source>Additional templates, represented by &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; objects, can define alternative or &lt;em&gt;embedded&lt;/em&gt; views, which can be referenced from multiple components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; オブジェクトによって表される追加のテンプレートは、複数のコンポーネントから参照できる代替ビューまたは&lt;em&gt;埋め込み&lt;/em&gt;ビューを定義できます。</target>
        </trans-unit>
        <trans-unit id="088c64e0c38f1273482efc76508d604e23f1b814" translate="yes" xml:space="preserve">
          <source>Additional type information that can be added to the NgElement class, for properties that are added based on the inputs and methods of the underlying component.</source>
          <target state="translated">基礎となるコンポーネントの入力とメソッドに基づいて追加されるプロパティのために、NgElementクラスに追加することができる追加の型情報。</target>
        </trans-unit>
        <trans-unit id="82315284cec71ac2461e7ad6e31ada0cc3b6903b" translate="yes" xml:space="preserve">
          <source>Additionally, Angular can bundle &lt;em&gt;component styles&lt;/em&gt; with components, enabling a more modular design than regular stylesheets.</source>
          <target state="translated">さらに、Angularは&lt;em&gt;コンポーネントスタイル&lt;/em&gt;をコンポーネントにバンドルできるため、通常のスタイルシートよりもモジュール化されたデザインを実現できます。</target>
        </trans-unit>
        <trans-unit id="c3b6cb992315a8d1d32c6b4d1ab51dfbb9d56994" translate="yes" xml:space="preserve">
          <source>Additionally, add the same to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">さらに、同じものを &lt;code&gt;AppComponent&lt;/code&gt; テンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="f7661d2796641b2435dba5fb54171a642e99cdd2" translate="yes" xml:space="preserve">
          <source>Additionally, if a &lt;code&gt;factory&lt;/code&gt; is specified you can also specify the &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; option, which overrides the above behavior and marks the token as belonging to a particular &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. As mentioned above, &lt;code&gt;'root'&lt;/code&gt; is the default value for &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;factory&lt;/code&gt; が指定されている場合は、上記の動作をオーバーライドし、トークンを特定の &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;ngmodule&quot;&gt;NgModuleに&lt;/a&gt;属するものとしてマークする、 &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; オプションも指定できます。上記のように、 &lt;code&gt;'root'&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; のデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="5245afb59dc302a57de59d8190ec202e0f6538c5" translate="yes" xml:space="preserve">
          <source>Additionally, if a &lt;code&gt;factory&lt;/code&gt; is specified you can also specify the &lt;code&gt;providedIn&lt;/code&gt; option, which overrides the above behavior and marks the token as belonging to a particular &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. As mentioned above, &lt;code&gt;'root'&lt;/code&gt; is the default value for &lt;code&gt;providedIn&lt;/code&gt;.</source>
          <target state="translated">場合はさらに、 &lt;code&gt;factory&lt;/code&gt; 指定されます。また、指定することができ &lt;code&gt;providedIn&lt;/code&gt; の特定に属するものとしてトークンを上記の行動やマークをオーバーライドするオプション、 &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。上記のように、 &lt;code&gt;'root'&lt;/code&gt; は &lt;code&gt;providedIn&lt;/code&gt; のデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="e0b88e35ac14332a034dbf89e614b7db0e8bcdc3" translate="yes" xml:space="preserve">
          <source>Additionally, you can combine all of the modifiers except &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; and of course &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 、そしてもちろん &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; を除くすべての修飾子を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="dcbe742fd9c09dceae25ade7dd875522a02fe0b7" translate="yes" xml:space="preserve">
          <source>Additionally, you can combine all of the modifiers except &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; and of course &lt;code&gt;@Skipself()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 、およびもちろん &lt;code&gt;@Skipself()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; を除くすべての修飾子を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="451e70bdf0857a9eb4b8c2da5e6655131127aab1" translate="yes" xml:space="preserve">
          <source>Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.</source>
          <target state="translated">数値に基づいて DOM サブツリーを追加・削除します。複数化に対応。</target>
        </trans-unit>
        <trans-unit id="f61a37a92c2c3bd50a6b27f14df53a5edffb0311" translate="yes" xml:space="preserve">
          <source>Adds a developer-defined type to the filename, in the format &quot;name.type.ts&quot;.</source>
          <target state="translated">name.type.ts &quot;という形式で、開発者定義の型をファイル名に追加します。</target>
        </trans-unit>
        <trans-unit id="6f5e15f33e44ddcdc5cfe51d4943af58290c22aa" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">フォームに新しい &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンスを追加します。</target>
        </trans-unit>
        <trans-unit id="d24328bc2deef9fdef91cbbfdd2400a31dd071a7" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">フォームに新しい &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンスを追加します。</target>
        </trans-unit>
        <trans-unit id="2204ef6786c6b08dbd91058a06e9d433c1331369" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンスをフォームに追加します。</target>
        </trans-unit>
        <trans-unit id="26134db49e40fbb9d7a014790a01d0a514b896a3" translate="yes" xml:space="preserve">
          <source>Adds and removes CSS classes on an HTML element.</source>
          <target state="translated">HTML要素にCSSクラスを追加・削除します。</target>
        </trans-unit>
        <trans-unit id="6b369330aa93ce181ea1ffaa2ac04418c236585a" translate="yes" xml:space="preserve">
          <source>Adds directives and providers for in-app navigation among views defined in an application. Use the Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to declaratively specify application states and manage state transitions.</source>
          <target state="translated">アプリケーションで定義されたビュー間でアプリ内ナビゲーションを行うためのディレクティブとプロバイダーを追加します。Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを使用して、アプリケーションの状態を宣言的に指定し、状態遷移を管理します。</target>
        </trans-unit>
        <trans-unit id="21531783082d0830f3fb1f45fe62788a90adf2b3" translate="yes" xml:space="preserve">
          <source>Adds directives and providers for in-app navigation among views defined in an application. Use the Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to declaratively specify application states and manage state transitions.</source>
          <target state="translated">アプリケーションで定義されたビュー間でアプリ内ナビゲーションを行うためのディレクティブとプロバイダーを追加します。Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを使用して、アプリケーションの状態を宣言的に指定し、状態遷移を管理します。</target>
        </trans-unit>
        <trans-unit id="cd7e636e1f1b30f6355bd2d646250762388c223f" translate="yes" xml:space="preserve">
          <source>Adds duration options to control animation styling and timing for a child animation.</source>
          <target state="translated">子アニメーションのアニメーションのスタイリングとタイミングを制御するためのデュレーションオプションを追加しました。</target>
        </trans-unit>
        <trans-unit id="2b895b67b8ce76b68d05dcf6666168717ad32953" translate="yes" xml:space="preserve">
          <source>Adds guard and resolver service providers to the module's providers.</source>
          <target state="translated">ガードとリゾルバのサービスプロバイダをモジュールのプロバイダに追加します。</target>
        </trans-unit>
        <trans-unit id="755299c48d7bf746122237e386cb6af5c4ba8328" translate="yes" xml:space="preserve">
          <source>Adds meta tags for &lt;code&gt;theme-color&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;theme-color&lt;/code&gt; のメタタグを追加します。</target>
        </trans-unit>
        <trans-unit id="968fdcd37c8a10fb41a3f93fc08b5a74ea4db1e5" translate="yes" xml:space="preserve">
          <source>Adds more details to output logging.</source>
          <target state="translated">出力ロギングの詳細を追加します。</target>
        </trans-unit>
        <trans-unit id="eb181f1de9d0b9f6a3f1c71fa1932a623e310dc3" translate="yes" xml:space="preserve">
          <source>Adds router configuration to the module's imports.</source>
          <target state="translated">モジュールのインポートにルータの設定を追加します。</target>
        </trans-unit>
        <trans-unit id="4df31ffcefb2b65518aaabe80fe3bd9d9f1ff84b" translate="yes" xml:space="preserve">
          <source>Adds router directives and providers.</source>
          <target state="translated">ルータのディレクティブとプロバイダを追加します。</target>
        </trans-unit>
        <trans-unit id="f0837e6c33d87ca045ca5e6f04a38d390052dafe" translate="yes" xml:space="preserve">
          <source>Adds support for HammerJS.</source>
          <target state="translated">HammerJSのサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="e937eef586f33048065a6d83817b03c7f5e23029" translate="yes" xml:space="preserve">
          <source>Adds support for an external library to your project.</source>
          <target state="translated">プロジェクトに外部ライブラリのサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="613165752772588a92addd968d55b1f2bd4c8504" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;@angular/service-worker&lt;/code&gt; package to your project.</source>
          <target state="translated">&lt;code&gt;@angular/service-worker&lt;/code&gt; パッケージをプロジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="2b4dc2151cde4490334d4e384c13d264bb07f33c" translate="yes" xml:space="preserve">
          <source>Adds the following scaffold code to &lt;code&gt;src/app/app.component.ts&lt;/code&gt; to use the worker.</source>
          <target state="translated">次のスキャフォールドコードを &lt;code&gt;src/app/app.component.ts&lt;/code&gt; に追加して、ワーカーを使用します。</target>
        </trans-unit>
        <trans-unit id="1614100c8837c1739c3bf551c37c0891cdb58b9f" translate="yes" xml:space="preserve">
          <source>Adds the following scaffold code to &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; to receive messages.</source>
          <target state="translated">次のスキャフォールドコードを &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; に追加して、メッセージを受信します。</target>
        </trans-unit>
        <trans-unit id="a95ad245bbc008d7cc09cc996f5e65cb58f25cf6" translate="yes" xml:space="preserve">
          <source>Adds the npm package for a published library to your workspace, and configures the project in the current working directory (or the default project if you are not in a project directory) to use that library, as specified by the library's schematic. For example, adding &lt;code&gt;@angular/pwa&lt;/code&gt; configures your project for PWA support:</source>
          <target state="translated">ライブラリの回路図で指定されているように、公開されたライブラリのnpmパッケージをワークスペースに追加し、現在の作業ディレクトリ（プロジェクトディレクトリにない場合はデフォルトプロジェクト）のプロジェクトを構成して、そのライブラリを使用します。たとえば、 &lt;code&gt;@angular/pwa&lt;/code&gt; 追加すると、プロジェクトがPWAサポート用に構成されます。</target>
        </trans-unit>
        <trans-unit id="62b1dbd814dc4f358ea1d7dde27e66fb54fc5e5d" translate="yes" xml:space="preserve">
          <source>Adjusts the styles of the host and child views to control their relative positions during the transition.</source>
          <target state="translated">ホストビューと子ビューのスタイルを調整して、遷移時の相対位置を制御します。</target>
        </trans-unit>
        <trans-unit id="a9597d9ee11a8d07aedf74f517b6b888ccd31d0e" translate="yes" xml:space="preserve">
          <source>Adopt these two conventions in your own projects for &lt;em&gt;every kind&lt;/em&gt; of test file.</source>
          <target state="translated">&lt;em&gt;あらゆる種類&lt;/em&gt;のテストファイルについて、独自のプロジェクトでこれらの2つの規則を採用してください。</target>
        </trans-unit>
        <trans-unit id="f7d73e5d6f0b5c68b5528964b60905cb1e539834" translate="yes" xml:space="preserve">
          <source>Advanced configuration</source>
          <target state="translated">高度な設定</target>
        </trans-unit>
        <trans-unit id="5126940d744a6dff391a643edf858b06f00785ed" translate="yes" xml:space="preserve">
          <source>Advanced usage</source>
          <target state="translated">高度な使い方</target>
        </trans-unit>
        <trans-unit id="b5d3d1aaf47ddd6289313289a44dc070669bfc83" translate="yes" xml:space="preserve">
          <source>Advice for library authors</source>
          <target state="translated">図書館の著者へのアドバイス</target>
        </trans-unit>
        <trans-unit id="58096d3b580b40d1f884a9b46c91dffe0e68c327" translate="yes" xml:space="preserve">
          <source>After (choice 1 - use reactive forms):</source>
          <target state="translated">後(選択肢1-反応形を使う)。</target>
        </trans-unit>
        <trans-unit id="f9921cfd687f0c9e226be2f78a3b062eb0f6a704" translate="yes" xml:space="preserve">
          <source>After (choice 2 - use template-driven forms):</source>
          <target state="translated">後(選択肢2-テンプレート駆動型のフォームを使用)。</target>
        </trans-unit>
        <trans-unit id="3ab47cdfc89bec9fac8c0dee5b75416d76b80716" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;loadComponent()&lt;/code&gt; selects an ad, it uses &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to resolve a &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; for each specific component. The &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; then creates an instance of each component.</source>
          <target state="translated">後 &lt;code&gt;loadComponent()&lt;/code&gt; が広告を選択し、それが使用 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; を解決するため &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 各特定コンポーネントのを。次に、 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; は各コンポーネントのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="9fb00e37b227919be0aad314249b616191ba52b3" translate="yes" xml:space="preserve">
          <source>After a few changes, the &lt;code&gt;BannerComponent&lt;/code&gt; presents a dynamic title by binding to the component's &lt;code&gt;title&lt;/code&gt; property like this.</source>
          <target state="translated">いくつかの変更後、 &lt;code&gt;BannerComponent&lt;/code&gt; は、このようにコンポーネントの &lt;code&gt;title&lt;/code&gt; プロパティにバインドすることにより、動的なタイトルを表示します。</target>
        </trans-unit>
        <trans-unit id="f52eba13529b700c95fcb5b95431666a75841e79" translate="yes" xml:space="preserve">
          <source>After a few moments, a new project, &lt;code&gt;angular-router-sample&lt;/code&gt;, is ready.</source>
          <target state="translated">しばらくすると、新しいプロジェクト、 &lt;code&gt;angular-router-sample&lt;/code&gt; の準備が整います。</target>
        </trans-unit>
        <trans-unit id="d73f75b5fbde281c2a56c1e7a51d961f6ce8031e" translate="yes" xml:space="preserve">
          <source>After a navigation completes, the router writes an object containing this value together with a &lt;code&gt;navigationId&lt;/code&gt; to &lt;code&gt;history.state&lt;/code&gt;. The value is written when &lt;code&gt;location.go()&lt;/code&gt; or &lt;code&gt;location.replaceState()&lt;/code&gt; is called before activating this route.</source>
          <target state="translated">ナビゲーションが完了すると、ルーターはこの値を含むオブジェクトを、 &lt;code&gt;navigationId&lt;/code&gt; とともに &lt;code&gt;history.state&lt;/code&gt; に書き込みます。この値は、このルートをアクティブにする前に &lt;code&gt;location.go()&lt;/code&gt; または &lt;code&gt;location.replaceState()&lt;/code&gt; が呼び出されたときに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="d3b2f342293b83d4653a40d0d03796f8f9357644" translate="yes" xml:space="preserve">
          <source>After asynchronous validation begins, the form control enters a &lt;code&gt;pending&lt;/code&gt; state. You can inspect the control's &lt;code&gt;pending&lt;/code&gt; property and use it to give visual feedback about the ongoing validation operation.</source>
          <target state="translated">非同期検証が開始された後、フォームコントロールは &lt;code&gt;pending&lt;/code&gt; 状態になります。コントロールの &lt;code&gt;pending&lt;/code&gt; プロパティを検査し、それを使用して、進行中の検証操作に関する視覚的なフィードバックを提供できます。</target>
        </trans-unit>
        <trans-unit id="b79df42799ec10695c520a6481dd82d8fc694c4e" translate="yes" xml:space="preserve">
          <source>After asynchronous validation begins, the form control enters a &lt;code&gt;pending&lt;/code&gt; state. You can inspect the control's &lt;code&gt;pending&lt;/code&gt; property and use it to give visual feedback about the ongoing validation.</source>
          <target state="translated">非同期検証の開始後、フォームコントロールは &lt;code&gt;pending&lt;/code&gt; 状態になります。コントロールの &lt;code&gt;pending&lt;/code&gt; プロパティを検査し、それを使用して、進行中の検証に関する視覚的なフィードバックを提供できます。</target>
        </trans-unit>
        <trans-unit id="1d0672649ba42b772c0f758558681bf65c2927e0" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;TestBed.inject&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">&lt;code&gt;TestBed.inject&lt;/code&gt; を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成は現在の仕様の期間中凍結されます。</target>
        </trans-unit>
        <trans-unit id="1949057a22110c4f9e7c99ac7d9df533785aff6c" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;compileComponents&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">&lt;code&gt;compileComponents&lt;/code&gt; を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成は現在の仕様の期間中フリーズされます。</target>
        </trans-unit>
        <trans-unit id="a643cff95be73e7ada55a9e30505cef7897bfafd" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;get&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成は現在の仕様の期間中フリーズされます。</target>
        </trans-unit>
        <trans-unit id="1fed1c4462312ad23f49ad51074811e7c8bbd213" translate="yes" xml:space="preserve">
          <source>After completing all tutorial steps, the final app will look like this: .</source>
          <target state="translated">すべてのチュートリアルが完了すると、最終的なアプリは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="696e6cddb6abbbb7365bc7effa9b0e9e22c936f4" translate="yes" xml:space="preserve">
          <source>After configuring &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, you call its &lt;code&gt;createComponent()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を構成した後、その &lt;code&gt;createComponent()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9e0b80f068a3dc7233fd3da3591afc15239e870f" translate="yes" xml:space="preserve">
          <source>After configuring the routes, tell the Angular router where to render the views when matched with a route. You can set a router outlet by inserting a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; container inside the root &lt;code&gt;AppComponent&lt;/code&gt; template.</source>
          <target state="translated">ルートを設定した後、ルートと一致したときにビューをレンダリングする場所をAngularルーターに伝えます。ルート &lt;code&gt;AppComponent&lt;/code&gt; テンプレート内に &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; コンテナーを挿入することにより、ルーターアウトレットを設定できます。</target>
        </trans-unit>
        <trans-unit id="b2a28e2451f609ec3b8c9cfc853ca69f5800dc42" translate="yes" xml:space="preserve">
          <source>After each &lt;em&gt;successful&lt;/em&gt; navigation, the router looks in its configuration for an unloaded module that it can preload. Whether it preloads a module, and which modules it preloads, depends upon the &lt;em&gt;preload strategy&lt;/em&gt;.</source>
          <target state="translated">ナビゲーションが&lt;em&gt;成功&lt;/em&gt;するたびに、ルーターはその構成を調べて、プリロードできるアンロードされたモジュールを探します。モジュールを&lt;em&gt;プリロード&lt;/em&gt;するかどうか、およびどのモジュールを&lt;em&gt;プリロード&lt;/em&gt;するかは、&lt;em&gt;プリロード戦略&lt;/em&gt;によって異なります。</target>
        </trans-unit>
        <trans-unit id="419172c8f41df56ca4ec63737a151d4364c46122" translate="yes" xml:space="preserve">
          <source>After each call, the &lt;code&gt;onKey()&lt;/code&gt; method appends the contents of the input box value to the list in the component's &lt;code&gt;values&lt;/code&gt; property, followed by a separator character (|). The &lt;a href=&quot;template-syntax#interpolation&quot;&gt;interpolation&lt;/a&gt; displays the accumulating input box changes from the &lt;code&gt;values&lt;/code&gt; property.</source>
          <target state="translated">各呼び出しの後、 &lt;code&gt;onKey()&lt;/code&gt; メソッドは、コンポーネントの &lt;code&gt;values&lt;/code&gt; プロパティのリストに入力ボックスの値の内容を追加し、その後に区切り文字（|）を追加します。&lt;a href=&quot;template-syntax#interpolation&quot;&gt;補間&lt;/a&gt;表示蓄積入力ボックスから変化 &lt;code&gt;values&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="86ef0babb7311e7718ffde937912e0848ffb0148" translate="yes" xml:space="preserve">
          <source>After each successful navigation, the router looks in its configuration for an unloaded module that it can preload. Whether it preloads a module, and which modules it preloads, depends upon the preload strategy.</source>
          <target state="translated">ルータは、各ナビゲーションが成功するたびに、プリロード可能なアンロードされたモジュー ルをその設定で探します。モジュールをプリロードするかどうか、どのモジュールをプリロードするかは、プリロード戦略に依存します。</target>
        </trans-unit>
        <trans-unit id="008e39459cd91bca6dfdd98e174699d09c6fccd2" translate="yes" xml:space="preserve">
          <source>After importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; injection token from &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;, write the &lt;code&gt;NoopInterceptor&lt;/code&gt; provider like this:</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;から &lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; インジェクショントークンをインポートした後、次のように &lt;code&gt;NoopInterceptor&lt;/code&gt; プロバイダーを記述します。</target>
        </trans-unit>
        <trans-unit id="83c406a785dd29fda73c73fc2726e47d708215b9" translate="yes" xml:space="preserve">
          <source>After importing the &lt;code&gt;Hero&lt;/code&gt; class, the &lt;code&gt;AppComponent.heroes&lt;/code&gt; property can return a &lt;em&gt;typed&lt;/em&gt; array of &lt;code&gt;Hero&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;Hero&lt;/code&gt; クラスをインポートした後、 &lt;code&gt;AppComponent.heroes&lt;/code&gt; プロパティは、 &lt;code&gt;Hero&lt;/code&gt; オブジェクトの&lt;em&gt;型指定された&lt;/em&gt;配列を返すことができます。</target>
        </trans-unit>
        <trans-unit id="908459e9f22ef8c117d2224aed3f0083328f5571" translate="yes" xml:space="preserve">
          <source>After installing the module, the app will make requests to and receive responses from the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; without knowing that the &lt;em&gt;In-memory Web API&lt;/em&gt; is intercepting those requests, applying them to an in-memory data store, and returning simulated responses.</source>
          <target state="translated">モジュールをインストールした後、アプリは、&lt;em&gt;インメモリWeb API&lt;/em&gt;がそれらのリクエストをインターセプトし、それらをインメモリデータストアに適用し、シミュレートされたレスポンスを返すことを知らなくても、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; にリクエストを送信し、HttpClientからレスポンスを受信し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7bd34b69bb5906237552bfa55433f2c99da72dca" translate="yes" xml:space="preserve">
          <source>After merging, you can serve each distributable copy of the app using server-side language detection or different subdirectories, as described in the next section about &lt;a href=&quot;i18n#deploy-locales&quot;&gt;deploying multiple locales&lt;/a&gt;.</source>
          <target state="translated">マージ後、&lt;a href=&quot;i18n#deploy-locales&quot;&gt;複数のロケールのデプロイ&lt;/a&gt;に関する次のセクションで説明するように、サーバー側の言語検出またはさまざまなサブディレクトリを使用して、アプリの配布可能な各コピーを提供できます。</target>
        </trans-unit>
        <trans-unit id="4f0baed191f44ae58456adfc0362749f9effe3c0" translate="yes" xml:space="preserve">
          <source>After navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, you expect to see the details of the selected hero. You need &lt;em&gt;two&lt;/em&gt; pieces of information: the routing path to the component and the hero's &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動すると、選択したヒーローの詳細が表示されるはずです。コンポーネントへのルーティングパスとヒーローの &lt;code&gt;id&lt;/code&gt; &lt;em&gt;2つ&lt;/em&gt;の情報が必要です。</target>
        </trans-unit>
        <trans-unit id="124684c6689f62086ef066ebcbdf42bc37881112" translate="yes" xml:space="preserve">
          <source>After navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, you expect to see the details of the selected hero. You need two pieces of information: the routing path to the component and the hero's &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動すると、選択したヒーローの詳細が表示されます。コンポーネントへのルーティングパスとヒーローの &lt;code&gt;id&lt;/code&gt; 2つの情報が必要です。</target>
        </trans-unit>
        <trans-unit id="8891651d49a6b5f2cdf808069ac4a7ebf6ae655d" translate="yes" xml:space="preserve">
          <source>After preparing a template for translation, use the Angular CLI &lt;code&gt;extract-i18n&lt;/code&gt; command to extract the marked text in the template into a &lt;em&gt;source language&lt;/em&gt; file. The marked text includes text marked with &lt;code&gt;i18n&lt;/code&gt; and attributes marked with &lt;code&gt;i18n-&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; as described in the previous section. Follow these steps:</source>
          <target state="translated">翻訳用のテンプレートを準備した後、Angular CLIの &lt;code&gt;extract-i18n&lt;/code&gt; コマンドを使用して、テンプレート内のマークされたテキストを&lt;em&gt;ソース言語&lt;/em&gt;ファイルに抽出します。マークされたテキストには、前のセクションで説明したように、 &lt;code&gt;i18n&lt;/code&gt; でマークされたテキストと &lt;code&gt;i18n-&lt;/code&gt; &lt;em&gt;属性で&lt;/em&gt;マークされた属性が含まれます。次の手順を実行します：</target>
        </trans-unit>
        <trans-unit id="960ce8665627fc91d6bf44ca2315df1872412834" translate="yes" xml:space="preserve">
          <source>After preparing your app for an international audience, use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to localize your app by performing the following tasks:</source>
          <target state="translated">海外のユーザー向けにアプリを準備したら、&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、次のタスクを実行してアプリをローカライズします。</target>
        </trans-unit>
        <trans-unit id="e5cc19cafc387e05e410e89f41afd0efcd0c1414" translate="yes" xml:space="preserve">
          <source>After putting a few items in the cart, users can now review their items, enter name and address, and submit their purchase:</source>
          <target state="translated">カートにいくつかの商品を入れた後、ユーザーは商品を確認し、名前と住所を入力し、購入を送信することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="f78e3695162eabe7baf026648dfba1227bdde24c" translate="yes" xml:space="preserve">
          <source>After putting a few items in the cart, users can now review their items, enter their name and address, and submit their purchase:</source>
          <target state="translated">カートにいくつかの商品を入れた後、ユーザーは商品を確認し、名前と住所を入力し、購入を送信することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="e03e757be9acc140f73ee6244153323fd294fc41" translate="yes" xml:space="preserve">
          <source>After reading the contents into a string, parse the configuration into a JSON object, typed to the &lt;code&gt;WorkspaceSchema&lt;/code&gt;.</source>
          <target state="translated">内容を文字列に読み取った後、構成を解析してJSONオブジェクトに変換し、 &lt;code&gt;WorkspaceSchema&lt;/code&gt; に入力します。</target>
        </trans-unit>
        <trans-unit id="34315c2a12a11033b196feb54799145cf720a985" translate="yes" xml:space="preserve">
          <source>After reporting the error to the console, the handler constructs a user friendly message and returns a safe value to the app so the app can keep working.</source>
          <target state="translated">コンソールにエラーを報告した後、ハンドラはユーザーフレンドリーなメッセージを構築し、アプリが作業を継続できるように安全な値をアプリに返します。</target>
        </trans-unit>
        <trans-unit id="83d2da68a0ee9c48b717bc70206a4279e94449f1" translate="yes" xml:space="preserve">
          <source>After revision, the core of the form should look like this:</source>
          <target state="translated">修正後、フォームの核心部分はこのようになるはずです。</target>
        </trans-unit>
        <trans-unit id="8e0baa03c5ec2030c3efd05bc4b8e0cca8e1205f" translate="yes" xml:space="preserve">
          <source>After running this command you will notice that the &lt;code&gt;angular.json&lt;/code&gt; configuration file has been updated to add two new targets, with a few other changes.</source>
          <target state="translated">このコマンドを実行すると、 &lt;code&gt;angular.json&lt;/code&gt; 構成ファイルが更新され、他のいくつかの変更が加えられた2つの新しいターゲットが追加されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="eac16cd44b7936bb92ae25b6779b27d5c6b96c42" translate="yes" xml:space="preserve">
          <source>After some time passes, the observable chain completes and the async validation is done. The &lt;code&gt;pending&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, and the form validity is updated.</source>
          <target state="translated">しばらくすると、監視可能なチェーンが完了し、非同期検証が行われます。 &lt;code&gt;pending&lt;/code&gt; フラグがに設定されている &lt;code&gt;false&lt;/code&gt; 、およびフォームの妥当性が更新されます。</target>
        </trans-unit>
        <trans-unit id="a974e632f712d8adbb93b00a5fd9e9171197a717" translate="yes" xml:space="preserve">
          <source>After some time passes, the observable chain completes and the asynchronous validation is done. The &lt;code&gt;pending&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, and the form validity is updated.</source>
          <target state="translated">しばらくすると、監視可能なチェーンが完了し、非同期検証が実行されます。 &lt;code&gt;pending&lt;/code&gt; フラグがに設定されている &lt;code&gt;false&lt;/code&gt; 、およびフォームの妥当性が更新されます。</target>
        </trans-unit>
        <trans-unit id="4cda21b5ba00559965830c79885173ab47e4d5e9" translate="yes" xml:space="preserve">
          <source>After some time, a new version of the app is deployed to the server. This newer version includes the files &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;main.&amp;lt;main-hash-2&amp;gt;.js&lt;/code&gt; and &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-2&amp;gt;.js&lt;/code&gt; (note that the hashes are different now, because the content of the files has changed). The old version is no longer available on the server.</source>
          <target state="translated">しばらくすると、新しいバージョンのアプリがサーバーにデプロイされます。この新しいバージョンには、ファイル &lt;code&gt;index.html&lt;/code&gt; 、 &lt;code&gt;main.&amp;lt;main-hash-2&amp;gt;.js&lt;/code&gt; 、 &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-2&amp;gt;.js&lt;/code&gt; が含まれています（ファイルの内容が異なるため、ハッシュが異なることに注意してください）変更されました）。古いバージョンはサーバーで使用できなくなりました。</target>
        </trans-unit>
        <trans-unit id="01a51cf41f4c8935554a93ce2847c4b25e728651" translate="yes" xml:space="preserve">
          <source>After submit, swap out the finished form for different content on the page.</source>
          <target state="translated">送信後、完成したフォームをページ上の別の内容にスワップアウトします。</target>
        </trans-unit>
        <trans-unit id="5fd5602bf74389e7adc143f2ca100a6303afe748" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, add the &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configure it with the &lt;code&gt;InMemoryDataService&lt;/code&gt;.</source>
          <target state="translated">後 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 、追加 &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; をする &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; アレイとを使用して設定 &lt;code&gt;InMemoryDataService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db93e549ab6aee486147223c94fcf8b921e25c93" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; metadata comes the directive's controller class, called &lt;code&gt;HighlightDirective&lt;/code&gt;, which contains the (currently empty) logic for the directive. Exporting &lt;code&gt;HighlightDirective&lt;/code&gt; makes the directive accessible.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; メタデータの後に、ディレクティブの（現在は空の）ロジックを含む、 &lt;code&gt;HighlightDirective&lt;/code&gt; と呼ばれるディレクティブのコントローラークラスが続きます。 &lt;code&gt;HighlightDirective&lt;/code&gt; をエクスポートすると、ディレクティブにアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="09df22d81d68e93da0bbcb8201f423cdfa08c85f" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;import&lt;/code&gt; statement, add a &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">後に &lt;code&gt;import&lt;/code&gt; 文の追加、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータ。</target>
        </trans-unit>
        <trans-unit id="54bbcb802a76f1768ba4c84338e5804ce691385a" translate="yes" xml:space="preserve">
          <source>After the &lt;em&gt;link parameters array&lt;/em&gt;, add an object with a &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; property set to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The router then calculates the target URL based on the active route's location.</source>
          <target state="translated">&lt;em&gt;リンクパラメータ配列の&lt;/em&gt;後に、 &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; プロパティが &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; に設定されたオブジェクトを追加します。次に、ルーターはアクティブなルートの場所に基づいてターゲットURLを計算します。</target>
        </trans-unit>
        <trans-unit id="ca29a3e54927c9300e363e2c9f6149f82a71a127" translate="yes" xml:space="preserve">
          <source>After the &lt;em&gt;link parameters array&lt;/em&gt;, add an object with a &lt;code&gt;relativeTo&lt;/code&gt; property set to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The router then calculates the target URL based on the active route's location.</source>
          <target state="translated">&lt;em&gt;リンクパラメータ配列の&lt;/em&gt;後に、 &lt;code&gt;relativeTo&lt;/code&gt; プロパティが &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; に設定されたオブジェクトを追加します。次に、ルーターはアクティブなルートの場所に基づいてターゲットURLを計算します。</target>
        </trans-unit>
        <trans-unit id="7bf50ab32f282dd4ec21fd3291f4baa2c752ec72" translate="yes" xml:space="preserve">
          <source>After the browser refreshes you can navigate freely between the two views by clicking the links.</source>
          <target state="translated">ブラウザが更新された後、リンクをクリックすることで、2つのビュー間を自由に移動することができます。</target>
        </trans-unit>
        <trans-unit id="3b526911261e54097bd46512826f0d84fb5a514b" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the app should run as before, showing a list of heroes and a hero detail view when you click on a hero name.</source>
          <target state="translated">ブラウザをリフレッシュした後、アプリは以前と同じように実行され、ヒーロー名をクリックするとヒーローのリストとヒーローの詳細表示が表示されます。</target>
        </trans-unit>
        <trans-unit id="42fa6cf8b20d6dc5f57b8f4a17f18ee0d574f97d" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the application is broken.</source>
          <target state="translated">ブラウザを更新したら、アプリが壊れてしまいました。</target>
        </trans-unit>
        <trans-unit id="46d6f82df55a653f3faad167f152f46db5094bdc" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the list of heroes appears.</source>
          <target state="translated">ブラウザが更新されると、ヒーローの一覧が表示されます。</target>
        </trans-unit>
        <trans-unit id="bc6532651982e9b93beffa6bd020bc11046b1209" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the list of names reappears. The details area is blank. Click a hero in the list of heroes and its details appear. The app seems to be working again. The heroes appear in a list and details about the clicked hero appear at the bottom of the page.</source>
          <target state="translated">ブラウザを更新すると、名前の一覧が再び表示されます。詳細エリアは空白になっています。ヒーロー一覧でヒーローをクリックすると詳細が表示されます。アプリは再び動作しているようです。ヒーローが一覧で表示され、クリックしたヒーローの詳細がページ下部に表示されます。</target>
        </trans-unit>
        <trans-unit id="7659d9da0a61e0aae6492e6646b8c9535def19f1" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the router loads the &lt;code&gt;DashboardComponent&lt;/code&gt; and the browser address bar shows the &lt;code&gt;/dashboard&lt;/code&gt; URL.</source>
          <target state="translated">ブラウザが更新されると、ルーターが &lt;code&gt;DashboardComponent&lt;/code&gt; をロードし、ブラウザのアドレスバーに &lt;code&gt;/dashboard&lt;/code&gt; URLが表示されます。</target>
        </trans-unit>
        <trans-unit id="0640fb3fc7fb52ddfb8e650b89dff61362d5f7a6" translate="yes" xml:space="preserve">
          <source>After the command produces an optimal build of your application (equivalent to &lt;code&gt;ng deploy --prod&lt;/code&gt;), it'll upload the production assets to Firebase.</source>
          <target state="translated">コマンドがアプリケーションの最適なビルドを生成した後（ &lt;code&gt;ng deploy --prod&lt;/code&gt; と同等）は、運用アセットをFirebaseにアップロードします。</target>
        </trans-unit>
        <trans-unit id="483b9518a2e29ad9c684bb70f280dcc5ada210de" translate="yes" xml:space="preserve">
          <source>After the end of each successful navigation lifecycle, the router builds a tree of &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; objects that make up the current state of the router. You can access the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; from anywhere in the application using the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service and the &lt;code&gt;&lt;a href=&quot;../api/router/router#routerState&quot;&gt;routerState&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">成功する各ナビゲーションライフサイクルの終了後、ルーターは、ルーターの現在の状態を構成する &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; オブジェクトのツリーを構築します。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスと &lt;code&gt;&lt;a href=&quot;../api/router/router#routerState&quot;&gt;routerState&lt;/a&gt;&lt;/code&gt; プロパティを使用して、アプリケーションのどこからでも現在の &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="559cacfa2058938711e1691701393100dccc89aa" translate="yes" xml:space="preserve">
          <source>After the end of each successful navigation lifecycle, the router builds a tree of &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; objects that make up the current state of the router. You can access the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; from anywhere in the application using the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service and the &lt;code&gt;routerState&lt;/code&gt; property.</source>
          <target state="translated">ナビゲーションライフサイクルが成功するたびに、ルーターは、ルーターの現在の状態を構成する &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; オブジェクトのツリーを構築します。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスと &lt;code&gt;routerState&lt;/code&gt; プロパティを使用して、アプリケーションのどこからでも現在の &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="0f5243cfeda101fda77f99ad21d8e0070af98e8a" translate="yes" xml:space="preserve">
          <source>After the import statements is a class with the &lt;strong&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">importステートメントの後には、&lt;strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータを&lt;/a&gt;含むクラスがあります。</target>
        </trans-unit>
        <trans-unit id="9971305116ca9c868d98b3be89949b39ec63ad5d" translate="yes" xml:space="preserve">
          <source>After the initial scaffolding, you will need to refactor your code to use the Web Worker by sending messages to and from.</source>
          <target state="translated">最初のスキャフォールディングの後、Web Worker との間でメッセージを送受信することで、Web Worker を使用するためにコードをリファクタリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="0f5ecb7050161de366e5e91b7e62fd6949d0e0bf" translate="yes" xml:space="preserve">
          <source>After the pluralization category, put the default English text in braces (&lt;code&gt;{}&lt;/code&gt;).</source>
          <target state="translated">複数形のカテゴリーの後に、デフォルトの英語のテキストを中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で囲みます。</target>
        </trans-unit>
        <trans-unit id="6117653ddbcfd36b252b8f52eca81bb3feb255c8" translate="yes" xml:space="preserve">
          <source>After the pluralization category, put the default text (English) within braces (&lt;code&gt;{}&lt;/code&gt;).</source>
          <target state="translated">複数化カテゴリの後に、デフォルトのテキスト（英語）を中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で囲みます。</target>
        </trans-unit>
        <trans-unit id="7aaa7f92f66008daa88b0514882f49868900fff5" translate="yes" xml:space="preserve">
          <source>After the refactoring in this tutorial, &lt;code&gt;HeroesComponent&lt;/code&gt; will be lean and focused on supporting the view. It will also be easier to unit-test with a mock service.</source>
          <target state="translated">このチュートリアルのリファクタリング後、 &lt;code&gt;HeroesComponent&lt;/code&gt; は無駄のない状態になり、ビューのサポートに焦点が当てられます。また、模擬サービスを使用した単体テストも簡単になります。</target>
        </trans-unit>
        <trans-unit id="1607c7514275273290ea2ed08706763dcb961cbf" translate="yes" xml:space="preserve">
          <source>After the transition of all our internal tooling to Ivy has completed, we want to remove the legacy View Engine for smaller Angular conceptual overhead, smaller package size, lower maintenance cost, and lower complexity of the codebase.</source>
          <target state="translated">すべての内部ツールのIvyへの移行が完了した後、Angularの概念的なオーバーヘッドの縮小、パッケージサイズの縮小、メンテナンスコストの低減、コードベースの複雑さの低減のために、レガシーのView Engineを削除したいと考えています。</target>
        </trans-unit>
        <trans-unit id="9d71b7bc24e4e4f91a441c9bafe797e0957e6170" translate="yes" xml:space="preserve">
          <source>After these changes, &lt;code&gt;npm start&lt;/code&gt; no longer works. You must choose to configure &lt;em&gt;either&lt;/em&gt; for F5 with IIS &lt;em&gt;or&lt;/em&gt; for &lt;code&gt;npm start&lt;/code&gt; with the lite-server.</source>
          <target state="translated">これらの変更後、 &lt;code&gt;npm start&lt;/code&gt; は機能しなくなります。あなたは、設定することを選択しなければならない&lt;em&gt;のいずれか&lt;/em&gt; F5のためにIISで&lt;em&gt;または&lt;/em&gt;のために &lt;code&gt;npm start&lt;/code&gt; LITE-サーバと。</target>
        </trans-unit>
        <trans-unit id="ab081b5a38b64d0a0f0125f67d617ea6ec938685" translate="yes" xml:space="preserve">
          <source>After these changes, the folder structure is as follows:</source>
          <target state="translated">これらの変更後のフォルダ構造は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4a81e5af1ec083b54117df3e04dc53564d570b55" translate="yes" xml:space="preserve">
          <source>After these changes, the folder structure looks like this:</source>
          <target state="translated">これらの変更を行うと、フォルダ構造は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="a2667ee7cd16887925dc0a58bfc5a8027ba6483a" translate="yes" xml:space="preserve">
          <source>After these revisions, the form template should look like the following:</source>
          <target state="translated">これらの修正後、フォームテンプレートは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="70bfcc0137b88df51dbf757d780aa43b22057bf9" translate="yes" xml:space="preserve">
          <source>After these steps, the &lt;code&gt;AppModule&lt;/code&gt; should look like this:</source>
          <target state="translated">これらの手順の後、 &lt;code&gt;AppModule&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="271311210f9d7845ddfa1653eb8a3eedc0ea57b8" translate="yes" xml:space="preserve">
          <source>After these steps, the file should look like this.</source>
          <target state="translated">これらの手順の後、ファイルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6d8f89045f7e2acb9275de066e103479b5097428" translate="yes" xml:space="preserve">
          <source>After this, the service is injectable anywhere in AngularJS code:</source>
          <target state="translated">この後、サービスはAngularJSのコード内のどこにでもインジェクション可能です。</target>
        </trans-unit>
        <trans-unit id="fcde218b3f76c0d5a06408da878317fa4d98e74a" translate="yes" xml:space="preserve">
          <source>After you build your library and schematics, you can install the schematics collection to run against your project. The steps below show you how to generate a service using the schematic you created above.</source>
          <target state="translated">ライブラリと回路図を構築したら、プロジェクトに対して実行するための回路図コレクションをインストールします。以下の手順では、上記で作成した回路図を使用してサービスを生成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="39eb8f3e1e50fb4d2205dbbe04a4d31291e11491" translate="yes" xml:space="preserve">
          <source>After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the &lt;code&gt;formControl&lt;/code&gt; binding provided by &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; included in &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンポーネントクラスでコントロールを作成したら、それをテンプレートのフォームコントロール要素に関連付ける必要があります。更新使用して、フォームコントロールとテンプレート &lt;code&gt;formControl&lt;/code&gt; によって提供される結合 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; はに含ま &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4199daa79f54a94136c76ec2bbe71b18bdd5c53" translate="yes" xml:space="preserve">
          <source>After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the &lt;code&gt;formControl&lt;/code&gt; binding provided by &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, which is also included in the &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンポーネントクラスでコントロールを作成したら、それをテンプレートのフォームコントロール要素に関連付ける必要があります。使用して、フォームコントロールとテンプレート更新 &lt;code&gt;formControl&lt;/code&gt; によって提供される結合 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; もに含まれ、 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="76d09f5c5a1b31fc0a33ce5c5425e8a7ad874311" translate="yes" xml:space="preserve">
          <source>After you generate this initial scaffold, you must refactor your code to use the web worker by sending messages to and from the worker.</source>
          <target state="translated">この初期足場を生成した後、ワーカーとの間でメッセージを送受信することで、ウェブワーカーを使用するためにコードをリファクタリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="fbf361f75395728462ca66efab4faaa84acc5f29" translate="yes" xml:space="preserve">
          <source>After you understand the basic Angular building blocks, you can begin to learn more about the features and tools that are available to help you develop and deliver Angular applications. Here are some key features.</source>
          <target state="translated">Angularの基本的なビルディングブロックを理解したら、Angularアプリケーションの開発と配信に役立つ機能やツールについて学び始めましょう。主な機能をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="71c4f421cb6721f6023e9cb1a29bf2474d332734" translate="yes" xml:space="preserve">
          <source>After you understand the basic Angular building blocks, you can learn more about the features and tools that can help you develop and deliver Angular applications.</source>
          <target state="translated">Angularの基本的なビルディングブロックを理解した後は、Angularアプリケーションの開発や配信に役立つ機能やツールについて詳しく知ることができます。</target>
        </trans-unit>
        <trans-unit id="ed53a81c228abae3e127057c4f013ec9f3b3b916" translate="yes" xml:space="preserve">
          <source>After you update the model in the component class, update the template to connect the form group instance and its input elements.</source>
          <target state="translated">コンポーネントクラスのモデルを更新したら、フォームグループのインスタンスとその入力要素を接続するテンプレートを更新します。</target>
        </trans-unit>
        <trans-unit id="9242fad2522050b6c8f084a728f83cbf3740d7ba" translate="yes" xml:space="preserve">
          <source>After you've set up your app for testing, you may find the following testing guides useful.</source>
          <target state="translated">テスト用にアプリを設定した後、以下のテストガイドが役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="81238a0e0e1b409a73b6a61a83fb32b90b53ec60" translate="yes" xml:space="preserve">
          <source>After your application instantiates a component or directive by calling its constructor, Angular calls the hook methods you have implemented at the appropriate point in the lifecycle of that instance.</source>
          <target state="translated">アプリケーションがコンストラクタを呼び出してコンポーネントやディレクティブのインスタンスを作成した後、Angularはインスタンスのライフサイクルの適切な時点で実装したフックメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="13f2d652f70945cb85fc5562fc3600a535ffb359" translate="yes" xml:space="preserve">
          <source>After:</source>
          <target state="translated">After:</target>
        </trans-unit>
        <trans-unit id="bf736dd76163b3c028eaca0186965ed06ab740d9" translate="yes" xml:space="preserve">
          <source>AfterContent</source>
          <target state="translated">AfterContent</target>
        </trans-unit>
        <trans-unit id="22e7a3bedea783cbdeab7bd8a1c5c1a6933d48cc" translate="yes" xml:space="preserve">
          <source>AfterContent hooks</source>
          <target state="translated">AfterContentフック</target>
        </trans-unit>
        <trans-unit id="396ee41ee88aacc341467dae99af0924912509a1" translate="yes" xml:space="preserve">
          <source>AfterContentChecked</source>
          <target state="translated">AfterContentChecked</target>
        </trans-unit>
        <trans-unit id="b2505c44737fd6fda2403d1f31157a2aa14b58ec" translate="yes" xml:space="preserve">
          <source>AfterContentInit</source>
          <target state="translated">AfterContentInit</target>
        </trans-unit>
        <trans-unit id="366ba05d3fa1b33c450e5743e4c241f267857737" translate="yes" xml:space="preserve">
          <source>AfterView</source>
          <target state="translated">AfterView</target>
        </trans-unit>
        <trans-unit id="0e548cdea94b6d14670caf854978f7ac93fb98bb" translate="yes" xml:space="preserve">
          <source>AfterViewChecked</source>
          <target state="translated">AfterViewChecked</target>
        </trans-unit>
        <trans-unit id="f4ad582e07b30bc57425e6b367e57a5676f5f7b1" translate="yes" xml:space="preserve">
          <source>AfterViewInit</source>
          <target state="translated">AfterViewInit</target>
        </trans-unit>
        <trans-unit id="2b9c1b59aec1e136bb7f39d1dffbf0f3269f6892" translate="yes" xml:space="preserve">
          <source>Again, as with Angular components, register the provider with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; by adding it to the module's &lt;code&gt;providers&lt;/code&gt; list.</source>
          <target state="translated">ここでも、Angularコンポーネントと同様に、プロバイダーをモジュールの &lt;code&gt;providers&lt;/code&gt; リストに追加して、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="a1f06ddfc491ba69f7991b805ea8e721d693d361" translate="yes" xml:space="preserve">
          <source>Against the &lt;code&gt;ElementInjector&lt;/code&gt; hierarchy (its parents)</source>
          <target state="translated">&lt;code&gt;ElementInjector&lt;/code&gt; の階層（その親）</target>
        </trans-unit>
        <trans-unit id="0e761a2c37c7ad2715a5ceccd5ba263aacc9de9a" translate="yes" xml:space="preserve">
          <source>Against the &lt;code&gt;ModuleInjector&lt;/code&gt; hierarchy (its parents)</source>
          <target state="translated">&lt;code&gt;ModuleInjector&lt;/code&gt; の階層（その親）</target>
        </trans-unit>
        <trans-unit id="bb53434eb9efd590bd6925bbf73497bd1d9c7abc" translate="yes" xml:space="preserve">
          <source>Ahead-of-time (AOT) compilation</source>
          <target state="translated">アヘッドオブタイム(AOT)コンパイル</target>
        </trans-unit>
        <trans-unit id="d0efe0b2c75c1c670b3146f5f276e23a667f15ec" translate="yes" xml:space="preserve">
          <source>Alerts</source>
          <target state="translated">Alerts</target>
        </trans-unit>
        <trans-unit id="0bf7a49c8ea017edc7f2032bbb4b0c95e81f0ea3" translate="yes" xml:space="preserve">
          <source>Alerts and Calllouts</source>
          <target state="translated">アラートとコールアウト</target>
        </trans-unit>
        <trans-unit id="066f0c42fdd1884232f453f149b68056ff56c08a" translate="yes" xml:space="preserve">
          <source>Alerts and Callouts</source>
          <target state="translated">アラートとコールアウト</target>
        </trans-unit>
        <trans-unit id="9089f32a47f1474eff56fa0a9c798f852209325c" translate="yes" xml:space="preserve">
          <source>Alerts and callouts present warnings, extra detail or references to other pages. They can also be used to provide commentary that &lt;em&gt;enriches&lt;/em&gt; the reader's understanding of the content being presented.</source>
          <target state="translated">アラートとコールアウトは、警告、追加の詳細、または他のページへの参照を示します。彼らはまた、解説を提供するために使用することができます&lt;em&gt;豊かに&lt;/em&gt;提示されているコンテンツの読者の理解を。</target>
        </trans-unit>
        <trans-unit id="7804d4cc875a2b345b93ae440e9d3d6a2f4d4cb0" translate="yes" xml:space="preserve">
          <source>Alerts draw attention to short important points. Alerts should not be used for multi-line content (use &lt;a href=&quot;docs-style-guide#callouts&quot;&gt;callouts&lt;/a&gt; instead).</source>
          <target state="translated">アラートは、短い重要なポイントに注意を引きます。アラートは複数行のコンテンツには使用しないでください（代わりに&lt;a href=&quot;docs-style-guide#callouts&quot;&gt;コールアウトを&lt;/a&gt;使用してください）。</target>
        </trans-unit>
        <trans-unit id="04259816ace1ebe56c853a8763558570c008514a" translate="yes" xml:space="preserve">
          <source>Alias</source>
          <target state="translated">Alias</target>
        </trans-unit>
        <trans-unit id="ac120c6d632c0aafed10d7ef62acaa6d28479bb6" translate="yes" xml:space="preserve">
          <source>Alias inputs and outputs in the metadata using a colon-delimited (&lt;code&gt;:&lt;/code&gt;) string with the directive property name on the left and the public alias on the right:</source>
          <target state="translated">コロン区切りを使用してメタデータにおけるエイリアスの入力と出力（ &lt;code&gt;:&lt;/code&gt; ）右に左にディレクティブプロパティ名を文字列や公共別名：</target>
        </trans-unit>
        <trans-unit id="faa3adcf19e6bd4a892728c2e0aceda3aee71007" translate="yes" xml:space="preserve">
          <source>Alias providers: &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">エイリアスプロバイダー： &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc91876e2ac4c3057217ce8b3905f1aa8b8895d3" translate="yes" xml:space="preserve">
          <source>Alias providers: &lt;code&gt;useExisting&lt;/code&gt;</source>
          <target state="translated">エイリアスプロバイダー： &lt;code&gt;useExisting&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="262c295e8156615b23a9b9a21875280876ff6fe3" translate="yes" xml:space="preserve">
          <source>Aliased class providers</source>
          <target state="translated">エイリアス化されたクラス・プロバイダ</target>
        </trans-unit>
        <trans-unit id="abaa4cbe0d1cb4558df323bbdd250e590d8ef07c" translate="yes" xml:space="preserve">
          <source>Aliases: -C</source>
          <target state="translated">エイリアス。-C</target>
        </trans-unit>
        <trans-unit id="12e8d87619a5b14f34a496b823d54d6c51209a45" translate="yes" xml:space="preserve">
          <source>Aliases: -D</source>
          <target state="translated">エイリアス:-D</target>
        </trans-unit>
        <trans-unit id="bca726a706e0cb987a708ca99e96eb229c4ee2e7" translate="yes" xml:space="preserve">
          <source>Aliases: -S</source>
          <target state="translated">エイリアス:-S</target>
        </trans-unit>
        <trans-unit id="470172253d7a0681d0e6784a4350baa5c20d4c7e" translate="yes" xml:space="preserve">
          <source>Aliases: -b</source>
          <target state="translated">エイリアス。-b</target>
        </trans-unit>
        <trans-unit id="2b618ef645988dbdfa96c6d0dd9b31d701ea7892" translate="yes" xml:space="preserve">
          <source>Aliases: -c</source>
          <target state="translated">エイリアス:-c</target>
        </trans-unit>
        <trans-unit id="21c330a0e2a2e6fdb8fdc16b0cfc8dfca9621ef7" translate="yes" xml:space="preserve">
          <source>Aliases: -d</source>
          <target state="translated">エイリアス:-d</target>
        </trans-unit>
        <trans-unit id="53241387fa776157e1ac709db2bc0b9ff4269351" translate="yes" xml:space="preserve">
          <source>Aliases: -f</source>
          <target state="translated">エイリアス:-f</target>
        </trans-unit>
        <trans-unit id="f888e82379026d00996152912a3ff9af72da352f" translate="yes" xml:space="preserve">
          <source>Aliases: -g</source>
          <target state="translated">エイリアス:-g</target>
        </trans-unit>
        <trans-unit id="bb9dd7df504aed89801306b3b923af073484cd3d" translate="yes" xml:space="preserve">
          <source>Aliases: -m</source>
          <target state="translated">エイリアス:-m</target>
        </trans-unit>
        <trans-unit id="952d01c1396bf00dc43b948288f5644768618c70" translate="yes" xml:space="preserve">
          <source>Aliases: -o</source>
          <target state="translated">エイリアス:-o</target>
        </trans-unit>
        <trans-unit id="33465e48b30d9b87760e03b4bb2dcf9485e72b0c" translate="yes" xml:space="preserve">
          <source>Aliases: -p</source>
          <target state="translated">エイリアス:-p</target>
        </trans-unit>
        <trans-unit id="febb997df0041b129449bb01c60c3ab7719f4b0c" translate="yes" xml:space="preserve">
          <source>Aliases: -s</source>
          <target state="translated">エイリアス:-s</target>
        </trans-unit>
        <trans-unit id="881d4fb37b8ea4b85e378da2acccae617df1bc81" translate="yes" xml:space="preserve">
          <source>Aliases: -t</source>
          <target state="translated">エイリアス:-t</target>
        </trans-unit>
        <trans-unit id="2b36dfa50916141297a3b84dc3d7b4f0ef1e1849" translate="yes" xml:space="preserve">
          <source>Aliases: -v</source>
          <target state="translated">エイリアス:-v</target>
        </trans-unit>
        <trans-unit id="773b2f76a828881e99082e584a105ac17854ae4c" translate="yes" xml:space="preserve">
          <source>Aliasing in the metadata</source>
          <target state="translated">メタデータのエイリアス</target>
        </trans-unit>
        <trans-unit id="12aeae68aab8c241da4ec948e46d9fc4b87c3bee" translate="yes" xml:space="preserve">
          <source>Aliasing inputs and outputs</source>
          <target state="translated">入力と出力のエイリアス化</target>
        </trans-unit>
        <trans-unit id="cbf22d2da5af310a1d6c29300763bcccdf5470a5" translate="yes" xml:space="preserve">
          <source>Aliasing with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;/&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; デコレーターのエイリアス</target>
        </trans-unit>
        <trans-unit id="9b2b0d9f150b1cf5ad45ddd02b66c50057628f62" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;standard DOM event objects&lt;/a&gt; have a &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; property, a reference to the element that raised the event. In this case, &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; refers to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element&lt;/a&gt; and &lt;code&gt;event.target.value&lt;/code&gt; returns the current contents of that element.</source>
          <target state="translated">すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;標準DOMイベントオブジェクトに&lt;/a&gt;は、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; プロパティ、つまりイベントを発生させた要素への参照があります。この場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素&lt;/a&gt;を &lt;code&gt;event.target.value&lt;/code&gt; 、event.target.valueはその要素の現在のコンテンツを返します。</target>
        </trans-unit>
        <trans-unit id="ef6c45b243cc8c7684094d620c0717caf5d06ab2" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods return an RxJS &lt;code&gt;Observable&lt;/code&gt; of something.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドは、何かのRxJS &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="eb5599b660b0c79a86b5a28beaddb416d3aedf11" translate="yes" xml:space="preserve">
          <source>All Angular components, directives and pipes must be declared in an NgModule.</source>
          <target state="translated">Angularのコンポーネント、ディレクティブ、パイプはすべてNgModuleで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="7d9b146ee1db2a813d81bdee2810d2562076d624" translate="yes" xml:space="preserve">
          <source>All apps start by &lt;a href=&quot;bootstrapping&quot;&gt;bootstrapping a root NgModule&lt;/a&gt;. You can organize your other NgModules any way you wish.</source>
          <target state="translated">すべてのアプリは&lt;a href=&quot;bootstrapping&quot;&gt;、ルートNgModuleをブートストラップすることから始まり&lt;/a&gt;ます。他のNgModuleを任意の方法で整理できます。</target>
        </trans-unit>
        <trans-unit id="47f1a89f57ee46d779c84c05d4e22158f2e9d3d7" translate="yes" xml:space="preserve">
          <source>All behavior is based on the expected behavior of the JavaScript API &lt;code&gt;Array.prototype.slice()&lt;/code&gt; and &lt;code&gt;String.prototype.slice()&lt;/code&gt;.</source>
          <target state="translated">すべての動作は、JavaScript API &lt;code&gt;Array.prototype.slice()&lt;/code&gt; および &lt;code&gt;String.prototype.slice()&lt;/code&gt; の予想される動作に基づいています。</target>
        </trans-unit>
        <trans-unit id="83f4574e35f933628564acc9e9670adf27bc7144" translate="yes" xml:space="preserve">
          <source>All but Chrome, Firefox, Edge, IE 11 and Safari 10</source>
          <target state="translated">Chrome、Firefox、Edge、IE 11、Safari 10以外はすべて</target>
        </trans-unit>
        <trans-unit id="78cf0dfc4ff02c126ec8a635233f5056f63a2233" translate="yes" xml:space="preserve">
          <source>All but a few guide pages are &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;markdown&lt;/a&gt; files with an &lt;code&gt;.md&lt;/code&gt; extension.</source>
          <target state="translated">すべてが、いくつかの案内ページがある&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;マークダウン&lt;/a&gt;を持つファイル &lt;code&gt;.md&lt;/code&gt; 拡張子。</target>
        </trans-unit>
        <trans-unit id="f6163b0506b3d6cee19ae1ba67afebd88a78b3f5" translate="yes" xml:space="preserve">
          <source>All callbacks provided via this token will be called for every component that is bootstrapped. Signature of the callback:</source>
          <target state="translated">このトークンを介して提供されるすべてのコールバックは、ブートストラップされるすべてのコンポーネントに対して呼び出されます。コールバックのシグネチャ。</target>
        </trans-unit>
        <trans-unit id="14f06e49365898f255f67b62a79edfa0c4ccb24e" translate="yes" xml:space="preserve">
          <source>All classes that use Angular DI must have an Angular decorator like &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; (previously, undecorated classes were allowed in AOT mode only or if injection flags were used). See further &lt;a href=&quot;ivy-compatibility-examples#undecorated-classes&quot;&gt;details&lt;/a&gt;.</source>
          <target state="translated">Angular DIを使用するすべてのクラスには、 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; や &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; などのAngularデコレータが必要です（以前は、装飾されていないクラスはAOTモードでのみ、またはインジェクションフラグが使用されている場合にのみ許可されていました）。詳細を&lt;a href=&quot;ivy-compatibility-examples#undecorated-classes&quot;&gt;参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6d4518e763e3cfc934ceb005f87993289fc3d75" translate="yes" xml:space="preserve">
          <source>All content is one asset per file. Each component, service, and pipe is in its own file. All third party vendor scripts are stored in another folder and not in the &lt;code&gt;src&lt;/code&gt; folder. You didn't write them and you don't want them cluttering &lt;code&gt;src&lt;/code&gt;. Use the naming conventions for files in this guide. &lt;a href=&quot;styleguide#toc&quot;&gt;Back to top&lt;/a&gt;</source>
          <target state="translated">すべてのコンテンツはファイルごとに1つのアセットです。各コンポーネント、サービス、およびパイプは、独自のファイルにあります。サードパーティベンダーのスクリプトはすべて、 &lt;code&gt;src&lt;/code&gt; フォルダーではなく別のフォルダーに保存されます。あなたはそれらを書かなかったし、彼らが &lt;code&gt;src&lt;/code&gt; を乱雑にしたくないのです。このガイドでは、ファイルの命名規則を使用します。&lt;a href=&quot;styleguide#toc&quot;&gt;トップに戻る&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4ed2d8bd132c629609779d7b7c0ee7dd1066456" translate="yes" xml:space="preserve">
          <source>All entry points</source>
          <target state="translated">すべてのエントリーポイント</target>
        </trans-unit>
        <trans-unit id="2d9456ba0cf30f1f1f1d87dee95529f33f56b70b" translate="yes" xml:space="preserve">
          <source>All exports</source>
          <target state="translated">すべての輸出</target>
        </trans-unit>
        <trans-unit id="555a5a2314312f0604886df5753dde617de5c81b" translate="yes" xml:space="preserve">
          <source>All guides and cookbooks have &lt;em&gt;at least these core files&lt;/em&gt;. Each file has a distinct purpose and evolves independently as the application grows.</source>
          <target state="translated">すべてのガイドとクックブックには&lt;em&gt;、少なくともこれらのコアファイルがあります&lt;/em&gt;。各ファイルには異なる目的があり、アプリケーションの成長に応じて独立して進化します。</target>
        </trans-unit>
        <trans-unit id="d50f7516add2e23a302a6561abd45a450301530f" translate="yes" xml:space="preserve">
          <source>All heading text should be in &quot;Sentence case&quot;, which means the first word is capitalized and all other words are lower case.</source>
          <target state="translated">すべての見出しテキストは、最初の単語は大文字で、それ以外の単語は小文字であることを意味する「センテンスケース」でなければなりません。</target>
        </trans-unit>
        <trans-unit id="1d20c95590619af50ebe88a44377237c9334e6cc" translate="yes" xml:space="preserve">
          <source>All lazy-loaded modules are routed feature modules by definition.</source>
          <target state="translated">すべてのレイジーロードされたモジュールは、定義上、ルーティングされたフィーチャモジュールです。</target>
        </trans-unit>
        <trans-unit id="ba497163aacd2f415fc3983fbe5ba57cdc70e6dc" translate="yes" xml:space="preserve">
          <source>All locale data used by Angular are extracted from the Unicode Consortium's &lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;Common Locale Data Repository (CLDR)&lt;/a&gt;.</source>
          <target state="translated">Angularが使用するすべてのロケールデータは、Unicodeコンソーシアムの&lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;Common Locale Data Repository（CLDR）&lt;/a&gt;から抽出されます。</target>
        </trans-unit>
        <trans-unit id="fa94ed73b28264b28c71949c216d5b8431fb586e" translate="yes" xml:space="preserve">
          <source>All observables returned from &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods are &lt;em&gt;cold&lt;/em&gt; by design. Execution of the HTTP request is &lt;em&gt;deferred&lt;/em&gt;, allowing you to extend the observable with additional operations such as &lt;code&gt;tap&lt;/code&gt; and &lt;code&gt;catchError&lt;/code&gt; before anything actually happens.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドから返されるすべてのオブザーバブルは、設計上&lt;em&gt;コールド&lt;/em&gt;です。HTTPリクエストの実行は&lt;em&gt;遅延されるため&lt;/em&gt;、実際に何かが発生する前に、 &lt;code&gt;tap&lt;/code&gt; や &lt;code&gt;catchError&lt;/code&gt; などの追加操作でオブザーバブルを拡張できます。</target>
        </trans-unit>
        <trans-unit id="9bcf03575f88913e03cd13ed033b90e1cf77192a" translate="yes" xml:space="preserve">
          <source>All occurrences of a text message that have the same meaning will have the same translation. A text message that is associated with different meanings can have different translations.</source>
          <target state="translated">同じ意味を持つテキストメッセージのすべての出現は、同じ翻訳を持つことになります。異なる意味に関連付けられたテキストメッセージは、異なる翻訳を持つことができます。</target>
        </trans-unit>
        <trans-unit id="4d561a31794ae7f01849587f849895e07f7350e8" translate="yes" xml:space="preserve">
          <source>All of our major releases are supported for 18 months.</source>
          <target state="translated">当社の主要リリースはすべて18ヶ月間サポートされています。</target>
        </trans-unit>
        <trans-unit id="54bd78bf36660977460696089ef9b9012bc21577" translate="yes" xml:space="preserve">
          <source>All of the &lt;code&gt;wtf*&lt;/code&gt; APIs are deprecated and will be removed in a future version.</source>
          <target state="translated">すべての &lt;code&gt;wtf*&lt;/code&gt; APIは推奨されておらず、将来のバージョンでは削除されます。</target>
        </trans-unit>
        <trans-unit id="f299f3554bce53f9ba35ead474380491f94ae4a3" translate="yes" xml:space="preserve">
          <source>All of the app's code goes in a folder named &lt;code&gt;src&lt;/code&gt;. All feature areas are in their own folder, with their own NgModule.</source>
          <target state="translated">アプリのコードはすべて &lt;code&gt;src&lt;/code&gt; という名前のフォルダーに格納されます。すべての機能領域は、独自のNgModuleを持つ独自のフォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="2bda062345e26cb4d38caed6b23d71db7155d42c" translate="yes" xml:space="preserve">
          <source>All of these validators are synchronous, so they are passed as the second argument. Notice that you can support multiple validators by passing the functions in as an array.</source>
          <target state="translated">これらのバリデータはすべて同期的なものなので、第二引数として渡されます。関数を配列として渡すことで複数のバリデータをサポートできることに注意しましょう。</target>
        </trans-unit>
        <trans-unit id="d488a3cf97211143ed0272eeccebfa97e0734fe1" translate="yes" xml:space="preserve">
          <source>All projects within a workspace share a &lt;a href=&quot;workspace-config&quot;&gt;CLI configuration context&lt;/a&gt;. The top level of the workspace contains workspace-wide configuration files, configuration files for the root-level application, and subfolders for the root-level application source and test files.</source>
          <target state="translated">ワークスペース内のすべてのプロジェクトは、&lt;a href=&quot;workspace-config&quot;&gt;CLI構成コンテキストを&lt;/a&gt;共有します。ワークスペースのトップレベルには、ワークスペース全体の構成ファイル、ルートレベルのアプリケーションの構成ファイル、およびルートレベルのアプリケーションのソースファイルとテストファイルのサブフォルダーが含まれています。</target>
        </trans-unit>
        <trans-unit id="a86a11f9cc83cd667f2d3d836dd4b6097c3be72e" translate="yes" xml:space="preserve">
          <source>All requests forward up to the root injector, whether you configured it with the &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; method, or registered all providers with &lt;code&gt;root&lt;/code&gt; in their own services.</source>
          <target state="translated">すべての要求は、 &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; メソッドで構成したか、すべてのプロバイダーを独自のサービスの &lt;code&gt;root&lt;/code&gt; に登録したかに関係なく、ルートインジェクターに転送されます。</target>
        </trans-unit>
        <trans-unit id="5b5501ac272d63e35e4b7b552543df240cc9bf18" translate="yes" xml:space="preserve">
          <source>All requests forward up to the root injector, whether you configured it with the &lt;code&gt;bootstrapModule()&lt;/code&gt; method, or registered all providers with &lt;code&gt;root&lt;/code&gt; in their own services.</source>
          <target state="translated">&lt;code&gt;bootstrapModule()&lt;/code&gt; メソッドを使用して構成したか、すべてのプロバイダーを独自のサービスに &lt;code&gt;root&lt;/code&gt; で登録したかに関係なく、すべての要求はルートインジェクターに転送されます。</target>
        </trans-unit>
        <trans-unit id="b677df98f9a1a137700099cd172a9afc9ac44548" translate="yes" xml:space="preserve">
          <source>All response headers.</source>
          <target state="translated">すべての応答ヘッダー。</target>
        </trans-unit>
        <trans-unit id="266c93cc98a1c67666c9fe3051964b12a0907d45" translate="yes" xml:space="preserve">
          <source>All router components must be entry components. Because this would require you to add the component in two places (router and &lt;code&gt;entryComponents&lt;/code&gt;) the Compiler is smart enough to recognize that this is a router definition and automatically add the router component into &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">すべてのルーターコンポーネントはエントリコンポーネントである必要があります。コンポーネントを2つの場所（ルーターと &lt;code&gt;entryComponents&lt;/code&gt; ）に追加する必要があるため、コンパイラーはこれがルーター定義であることを認識し、ルーターコンポーネントを &lt;code&gt;entryComponents&lt;/code&gt; に自動的に追加するのに十分スマートです。</target>
        </trans-unit>
        <trans-unit id="a9765742971c0ed0a559afb35d2f98bc069ab358" translate="yes" xml:space="preserve">
          <source>All section heading text should be in &quot;Sentence case&quot;, which means the first word is capitalized and all other words are lower case.</source>
          <target state="translated">すべてのセクションの見出しテキストは、最初の単語は大文字で、他のすべての単語は小文字であることを意味する &quot;Sentence case &quot;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2010b5aa68dd1960b60a188558d3a3c6eeae422a" translate="yes" xml:space="preserve">
          <source>All selectors of directives exported from imported NgModules.</source>
          <target state="translated">インポートされたNgModulesからエクスポートされたディレクティブのすべてのセレクタ。</target>
        </trans-unit>
        <trans-unit id="45c6daa1221c6438e83b827fcf4272388107dbac" translate="yes" xml:space="preserve">
          <source>All selectors of directives listed in `declarations`.</source>
          <target state="translated">declarations`でリストされているディレクティブのすべてのセレクタ。</target>
        </trans-unit>
        <trans-unit id="98ef1fe3f08289d9ae2ac5ecaabbe70f1ac0a3e8" translate="yes" xml:space="preserve">
          <source>All three types of schematics can be part of a collection that you package with your library.</source>
          <target state="translated">この3種類の回路図はすべて、ライブラリと一緒にパッケージ化したコレクションの一部とすることができます。</target>
        </trans-unit>
        <trans-unit id="58563d44c99aee179d2102d631ab6d3346ac6f2a" translate="yes" xml:space="preserve">
          <source>All transitions are defined within an animation trigger, along with named states that the transitions change to and from.</source>
          <target state="translated">すべてのトランジションは、アニメーションのトリガー内で定義され、トランジションが変化する名前付きの状態と一緒に定義されています。</target>
        </trans-unit>
        <trans-unit id="9de972c3116895d08cfcc214fa1b19703f026642" translate="yes" xml:space="preserve">
          <source>Allowed value are &lt;code&gt;&lt;a href=&quot;no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;custom_elements_schema&quot;&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">許可される値は &lt;code&gt;&lt;a href=&quot;no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;custom_elements_schema&quot;&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="85ebcd6cf8feaeb9992b2b6b1a1a230f5cedb4e3" translate="yes" xml:space="preserve">
          <source>Allowed values are given with each enumerated option description, with the default value in &lt;strong&gt;bold&lt;/strong&gt;.</source>
          <target state="translated">許可された値は、列挙された各オプションの説明とともに示され、デフォルト値は&lt;strong&gt;太字で&lt;/strong&gt;示されてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4e34237b214ab32caacdba55ef91ee24b78df885" translate="yes" xml:space="preserve">
          <source>Allowed values in an &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; object that configure when the router performs the initial navigation operation.</source>
          <target state="translated">ルーターが初期ナビゲーション操作を実行する &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; を構成するExtraOptionsオブジェクトの許可された値。</target>
        </trans-unit>
        <trans-unit id="f4ca59384f608db4264a261808beb5325f2b8151" translate="yes" xml:space="preserve">
          <source>Allowed values in an &lt;code&gt;&lt;a href=&quot;router/extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; object that configure when the router performs the initial navigation operation.</source>
          <target state="translated">ルーターが初期ナビゲーション操作を実行する &lt;code&gt;&lt;a href=&quot;router/extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; を構成するExtraOptionsオブジェクトの許可された値。</target>
        </trans-unit>
        <trans-unit id="085f06d4e071e6f66eb3b9679caf4d86014b1610" translate="yes" xml:space="preserve">
          <source>Allows Angular Component to be used from AngularJS.</source>
          <target state="translated">AngularJSからAngular Componentを使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="ecc1a07f7db604b095e8b41e2cae741aacdd37b3" translate="yes" xml:space="preserve">
          <source>Allows Angular service to be accessible from AngularJS.</source>
          <target state="translated">AngularJSからAngularサービスにアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="59ef65ca89ef98a0952a53d7803e4341b9f60c56" translate="yes" xml:space="preserve">
          <source>Allows AngularJS Component to be used from Angular.</source>
          <target state="translated">AngularJSコンポーネントをAngularから利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="7649d729717525a48003b77dd85cd213286b2180" translate="yes" xml:space="preserve">
          <source>Allows AngularJS service to be accessible from Angular.</source>
          <target state="translated">AngularJSサービスがAngularからアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="e1d91523ef6bb6743c7eb228ff012768c84d644c" translate="yes" xml:space="preserve">
          <source>Allows a sequential change between styles within a specified time interval. Use within &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;. Can include multiple &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls within each &lt;code&gt;keyframe()&lt;/code&gt;. Uses array syntax.</source>
          <target state="translated">指定された時間間隔内でスタイル間の順次変更を許可します。 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 内で使用します。各 &lt;code&gt;keyframe()&lt;/code&gt; 内に複数の &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 呼び出しを含めることができます。配列構文を使用します。</target>
        </trans-unit>
        <trans-unit id="896073ffe89ca14af5b6f2040d67893e62df843b" translate="yes" xml:space="preserve">
          <source>Allows animations on child components to be run within the same timeframe as the parent.</source>
          <target state="translated">子コンポーネントのアニメーションを親と同じ時間枠内で実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="750378a75cfd1eaf3050ded6f436f0e7bb6f1a79" translate="yes" xml:space="preserve">
          <source>Allows injecting dependencies in &lt;code&gt;beforeEach()&lt;/code&gt; and &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; と &lt;code&gt;it()&lt;/code&gt; に依存関係を注入できるようにします。</target>
        </trans-unit>
        <trans-unit id="08a3edd872030b372214771d089e67457cc59fb7" translate="yes" xml:space="preserve">
          <source>Allows overriding default compiler providers and settings which are defined in test_injector.js</source>
          <target state="translated">test_injector.js で定義されているデフォルトのコンパイラプロバイダと設定をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="fa49e14d9829d89b458a57fab56ecfd9673e4927" translate="yes" xml:space="preserve">
          <source>Allows overriding default providers, directives, pipes, modules of the test injector, which are defined in test_injector.js</source>
          <target state="translated">test_injector.js で定義されているテストインジェクタのデフォルトのプロバイダ、ディレクティブ、パイプ、モジュールをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="a7f2d8c5d430d7ae3ff698eb19d82a712bf21944" translate="yes" xml:space="preserve">
          <source>Allows to refer to references which are not yet defined.</source>
          <target state="translated">まだ定義されていない参照を参照できるようにします。</target>
        </trans-unit>
        <trans-unit id="066113a73a472127f1591d76a5f3fc93d93b6b02" translate="yes" xml:space="preserve">
          <source>Allows to register a callback that will be called when the module is destroyed.</source>
          <target state="translated">モジュールが破壊されたときに呼び出されるコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="9c93cb9606768ab8734f0311d8db95d0ea5cabf8" translate="yes" xml:space="preserve">
          <source>Allows to simulate the loading of ng modules in tests.</source>
          <target state="translated">テストでの ng モジュールのロードをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="a50d82a97b9831022bdfe098f21ced7b0b9170de" translate="yes" xml:space="preserve">
          <source>Allows you to assign styles to an HTML element using CSS. You can use CSS directly, as in the first example, or you can call a method from the component.</source>
          <target state="translated">CSSを使ってHTML要素にスタイルを割り当てることができます。最初の例のようにCSSを直接使用することもできますし、コンポーネントからメソッドを呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="b4aea37dbba3d6a7adb34731ae74b6c78ca2fdd7" translate="yes" xml:space="preserve">
          <source>Almost all Angular projects should use the default HTML5 style. It produces URLs that are easier for users to understand and it preserves the option to do server-side rendering.</source>
          <target state="translated">ほとんどすべてのAngularプロジェクトはデフォルトのHTML5スタイルを使うべきです。これはユーザーが理解しやすいURLを生成し、サーバーサイドレンダリングを行うオプションを保持します。</target>
        </trans-unit>
        <trans-unit id="7fe4a6401091a9411a2acc365ceb4c77d0b91d13" translate="yes" xml:space="preserve">
          <source>Almost all Angular projects should use the default HTML5 style. It produces URLs that are easier for users to understand. And it preserves the option to do &lt;em&gt;server-side rendering&lt;/em&gt; later.</source>
          <target state="translated">ほとんどすべてのAngularプロジェクトは、デフォルトのHTML5スタイルを使用する必要があります。ユーザーが理解しやすいURLを生成します。また、後で&lt;em&gt;サーバー側レンダリング&lt;/em&gt;を実行するオプションも保持されます。</target>
        </trans-unit>
        <trans-unit id="f37c30bf61c438336e2b7098bddfc566db04ad3f" translate="yes" xml:space="preserve">
          <source>Almost all HTML syntax is valid template syntax. However, because an Angular template is part of an overall webpage, and not the entire page, you don't need to include elements such as &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;. You can focus exclusively on the part of the page you are developing.</source>
          <target state="translated">ほとんどすべてのHTML構文は有効なテンプレート構文です。ただし、Angularテンプレートはページ全体ではなく、Webページ全体の一部であるため、 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; などの要素を含める必要はありません。開発しているページの部分だけに集中できます。</target>
        </trans-unit>
        <trans-unit id="b12fb3ea7a7ec8044072cb233aff081382cfe796" translate="yes" xml:space="preserve">
          <source>Also be sure to remove the &lt;code&gt;ItemsModule&lt;/code&gt; from the &lt;code&gt;AppModule&lt;/code&gt;. For step-by-step instructions on lazy loading modules, continue with the following sections of this page.</source>
          <target state="translated">また、 &lt;code&gt;ItemsModule&lt;/code&gt; からItemsModuleを必ず削除して &lt;code&gt;AppModule&lt;/code&gt; 。遅延読み込みモジュールの詳細な手順については、このページの次のセクションに進んでください。</target>
        </trans-unit>
        <trans-unit id="09bc2f90624b9bf3ca83b868a4cb571e445219e2" translate="yes" xml:space="preserve">
          <source>Also in &lt;code&gt;index.html&lt;/code&gt;, change the scripts to use &lt;code&gt;/node_modules&lt;/code&gt; with a slash instead of &lt;code&gt;node_modules&lt;/code&gt; without the slash.</source>
          <target state="translated">また、 &lt;code&gt;index.html&lt;/code&gt; で、スラッシュなしの &lt;code&gt;node_modules&lt;/code&gt; ではなく、スラッシュ付きの &lt;code&gt;/node_modules&lt;/code&gt; を使用するようにスクリプトを変更します。</target>
        </trans-unit>
        <trans-unit id="c34ca58802e9ae1bf05a9e1e9808cfff54b066f4" translate="yes" xml:space="preserve">
          <source>Also included in the &lt;code&gt;@angular/service-worker&lt;/code&gt; NPM package is a small script &lt;code&gt;safety-worker.js&lt;/code&gt;, which when loaded will unregister itself from the browser. This script can be used as a last resort to get rid of unwanted service workers already installed on client pages.</source>
          <target state="translated">また、 &lt;code&gt;@angular/service-worker&lt;/code&gt; NPMパッケージには、読み込まれたときにブラウザーから登録を解除する小さなスクリプト &lt;code&gt;safety-worker.js&lt;/code&gt; が含まれています。このスクリプトは、クライアントページに既にインストールされている不要なService Workerを取り除く最後の手段として使用できます。</target>
        </trans-unit>
        <trans-unit id="3e77b90384ba1376f2a7fc2a2fdb84d02d1ce375" translate="yes" xml:space="preserve">
          <source>Also remove any &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; you find, together with the associated AngularJS factory or directive declarations. Since you no longer have downgraded components, you no longer list them in &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">また、見つかったすべての &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; を、関連するAngularJSファクトリーまたはディレクティブ宣言とともに削除します。ダウングレードされたコンポーネントがなくなったので、それらを &lt;code&gt;entryComponents&lt;/code&gt; にリストしなくなりました。</target>
        </trans-unit>
        <trans-unit id="3eed6879744930f3ade3d793b4f2c2ad9e696f16" translate="yes" xml:space="preserve">
          <source>Also runs detectChanges once so that any existing change is detected.</source>
          <target state="translated">また、既存の変更を検出するために detectChanges を一度実行します。</target>
        </trans-unit>
        <trans-unit id="80c4a57c8598fa805c421acf31759c6f916a295a" translate="yes" xml:space="preserve">
          <source>Also, there are a couple of Protractor API calls in the PhoneCat test code that are using the AngularJS &lt;code&gt;$location&lt;/code&gt; service under the hood. As that service is no longer present after the upgrade, replace those calls with ones that use WebDriver's generic URL APIs instead. The first of these is the redirection spec:</source>
          <target state="translated">また、内部でAngularJS &lt;code&gt;$location&lt;/code&gt; サービスを使用しているPhoneCatテストコードには、いくつかのProtractor API呼び出しがあります。アップグレード後はそのサービスが存在しないため、代わりにWebDriverの汎用URL APIを使用する呼び出しに置き換えてください。これらの最初はリダイレクト仕様です：</target>
        </trans-unit>
        <trans-unit id="e9ec4ab463e95d961d6a661f97b761b3ce157450" translate="yes" xml:space="preserve">
          <source>Alter the name of a crisis. Notice that the corresponding name in the crisis list does &lt;em&gt;not&lt;/em&gt; change.</source>
          <target state="translated">危機の名前を変える。危機リストの対応する名前&lt;em&gt;は&lt;/em&gt;変更され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ef2efebfb6fde29b1d7a5cd7f44ec2ef3ac1afb6" translate="yes" xml:space="preserve">
          <source>Alter the name. Click the &quot;Back&quot; button and the app returns to the heroes list which displays the changed hero name. Notice that the name change took effect immediately.</source>
          <target state="translated">名前を変更します。戻る」ボタンをクリックすると、変更されたヒーロー名が表示されるヒーローリストに戻ります。名前の変更はすぐに有効になります。</target>
        </trans-unit>
        <trans-unit id="5c537167fc57c766db36bca741f44f76ff80afb8" translate="yes" xml:space="preserve">
          <source>Alternate build configurations</source>
          <target state="translated">代替のビルド構成</target>
        </trans-unit>
        <trans-unit id="538b10e3e67e9b4ea5cac16016344363816eb454" translate="yes" xml:space="preserve">
          <source>Alternative class providers</source>
          <target state="translated">代替クラスの提供者</target>
        </trans-unit>
        <trans-unit id="317529f453f868f828b3061a5492c704c5ebd726" translate="yes" xml:space="preserve">
          <source>Alternative syntax</source>
          <target state="translated">代替構文</target>
        </trans-unit>
        <trans-unit id="7fffe38e0d7a10037e8a311175b76b5eba5d4a82" translate="yes" xml:space="preserve">
          <source>Alternatively you can pass an HTTP method as the first parameter, a URL string as the second, and an options hash containing the request body as the third. See &lt;code&gt;addBody()&lt;/code&gt;. In this case, the specified &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;observe&lt;/code&gt; options determine the type of returned observable.</source>
          <target state="translated">または、最初のパラメーターとしてHTTPメソッドを渡し、2番目のパラメーターとしてURL文字列を渡し、3番目のパラメーターとして要求本文を含むオプションハッシュを渡すこともできます。 &lt;code&gt;addBody()&lt;/code&gt; を参照してください。この場合、指定された &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;observe&lt;/code&gt; オプションは、返される監視対象のタイプを決定します。</target>
        </trans-unit>
        <trans-unit id="70ee3db78fa8b847067a4fcd326c7e95030cc8ca" translate="yes" xml:space="preserve">
          <source>Alternatively you can pass an HTTP method as the first parameter, a URL string as the second, and an options hash containing the request body as the third. See &lt;code&gt;addBody()&lt;/code&gt;. In this case, the specified &lt;code&gt;responseType&lt;/code&gt; and &lt;code&gt;observe&lt;/code&gt; options determine the type of returned observable.</source>
          <target state="translated">または、最初のパラメーターとしてHTTPメソッド、2番目のパラメーターとしてURL文字列、3番目のパラメーターとしてリクエスト本文を含むオプションハッシュを渡すことができます。 &lt;code&gt;addBody()&lt;/code&gt; を参照してください。この場合、指定された &lt;code&gt;responseType&lt;/code&gt; および &lt;code&gt;observe&lt;/code&gt; オプションによって、返されるobservableのタイプが決まります。</target>
        </trans-unit>
        <trans-unit id="04a6b5805d15fcdd219083f0cbf17fc9bb490bc5" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;subscribe()&lt;/code&gt; method can accept callback function definitions in line, for &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;complete&lt;/code&gt; handlers. For example, the following &lt;code&gt;subscribe()&lt;/code&gt; call is the same as the one that specifies the predefined observer:</source>
          <target state="translated">あるいは、 &lt;code&gt;subscribe()&lt;/code&gt; メソッドは、 &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、および &lt;code&gt;complete&lt;/code&gt; ハンドラーのコールバック関数定義をインラインで受け入れることができます。たとえば、次の &lt;code&gt;subscribe()&lt;/code&gt; 呼び出しは、事前定義されたオブザーバーを指定するものと同じです。</target>
        </trans-unit>
        <trans-unit id="e64d9fb1e1f706bc80662aea5f2fb80fb60883b5" translate="yes" xml:space="preserve">
          <source>Alternatively, use the &lt;code&gt;on-&lt;/code&gt; prefix, known as the canonical form:</source>
          <target state="translated">または、正規形と呼ばれる &lt;code&gt;on-&lt;/code&gt; 接頭辞を使用します。</target>
        </trans-unit>
        <trans-unit id="7ed2dd30905d320449fc9e53a46cc64ce34b13be" translate="yes" xml:space="preserve">
          <source>Alternatively, you can add a new file, &lt;code&gt;.browserslistrc&lt;/code&gt;, to the project directory, that specifies browsers you want to support:</source>
          <target state="translated">または、サポートするブラウザを指定する新しいファイル &lt;code&gt;.browserslistrc&lt;/code&gt; をプロジェクトディレクトリに追加できます。</target>
        </trans-unit>
        <trans-unit id="d3a282109fd2c8a8f7ad5940bdac4b9f189f1e55" translate="yes" xml:space="preserve">
          <source>Alternatively, you can call &lt;code&gt;request.error()&lt;/code&gt; with an &lt;code&gt;ErrorEvent&lt;/code&gt;.</source>
          <target state="translated">または、 &lt;code&gt;ErrorEvent&lt;/code&gt; を使用して &lt;code&gt;request.error()&lt;/code&gt; を呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="98bf87f428bccd5b0338c78eadf52aaa7a6089b5" translate="yes" xml:space="preserve">
          <source>Alternatively, you can choose to surface a separate warning for each instance of this pattern with a config value of &lt;code&gt;&quot;always&quot;&lt;/code&gt;. This may help to track down where in the code the pattern is being used as the code is being updated.</source>
          <target state="translated">または、このパターンのインスタンスごとに構成値 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 個別の警告を表示するように選択できます。これは、コードが更新されているときに、コードがパターンのどこで使用されているかを追跡するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5d6c050b861181c863e8cb7973a125de6756b8a9" translate="yes" xml:space="preserve">
          <source>Alternatively, you can fix it by exporting &lt;code&gt;foo&lt;/code&gt; with the expectation that &lt;code&gt;foo&lt;/code&gt; will be assigned at runtime when you actually know its value.</source>
          <target state="translated">また、あなたはエクスポートして、それを修正することができ &lt;code&gt;foo&lt;/code&gt; 期待して &lt;code&gt;foo&lt;/code&gt; はあなたが実際にその価値を知っているとき、実行時に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="19c181f0dfa7e4b222a989a1cf6835c473ecb0d0" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass a plain function, which is expected to return a promise resolving to an &lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt; (i.e. an instance of your Angular module). The function is called with an array of extra &lt;a href=&quot;../api/core/staticprovider&quot;&gt;Providers&lt;/a&gt; that are expected to be available on the returned &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;. For example, if you are using &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt; or &lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;, you can pass the &lt;code&gt;extraProviders&lt;/code&gt; array to them:</source>
          <target state="translated">あるいは、&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;（つまり、Angularモジュールのインスタンス）に解決するpromiseを返すことが期待されるプレーンな関数を渡すことができます。この関数は、返された &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt; の&lt;a href=&quot;../api/core/injector&quot;&gt;インジェクター&lt;/a&gt;で利用できると予想される追加の&lt;a href=&quot;../api/core/staticprovider&quot;&gt;プロバイダーの&lt;/a&gt;配列で呼び出されます。たとえば、&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;または&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;を使用している場合は、 &lt;code&gt;extraProviders&lt;/code&gt; 配列を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="46f8c220ab71228f6530683c11b7ac9ef6c94316" translate="yes" xml:space="preserve">
          <source>Alternatively, you can specify a custom id in the &lt;code&gt;i18n&lt;/code&gt; attribute by using the prefix &lt;code&gt;@@&lt;/code&gt;. The example below defines the custom id &lt;code&gt;introductionHeader&lt;/code&gt;:</source>
          <target state="translated">または、プレフィックス &lt;code&gt;@@&lt;/code&gt; を使用して、 &lt;code&gt;i18n&lt;/code&gt; 属性でカスタムIDを指定できます。定義カスタムID以下の例 &lt;code&gt;introductionHeader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb7c49667809bfe94e1dbbd87a5ce803ffe6ceb8" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn client&lt;/a&gt; for downloading and installing npm packages.</source>
          <target state="translated">または、ypm &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;クライアント&lt;/a&gt;を使用してnpmパッケージをダウンロードおよびインストールすることもできます。</target>
        </trans-unit>
        <trans-unit id="e9fbf3395b93f5da053cf8f1ade99d229665c121" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the HTML &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">また、あなたはHTMLを使用することができます &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; タグを。</target>
        </trans-unit>
        <trans-unit id="01b948062d123fd97df131865c3c30c4c143ee9f" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">または、HTMLの &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="5ad999c866c8bd0df67936adc07a5029b68e2cc3" translate="yes" xml:space="preserve">
          <source>Alternatively, you could accumulate the individual keys themselves by substituting &lt;code&gt;event.key&lt;/code&gt; for &lt;code&gt;event.target.value&lt;/code&gt; in which case the same user input would produce:</source>
          <target state="translated">あるいは、 &lt;code&gt;event.target.value&lt;/code&gt; の代わりに &lt;code&gt;event.key&lt;/code&gt; を使用して、個々のキー自体を蓄積することもできます。その場合、同じユーザー入力で次のように生成されます。</target>
        </trans-unit>
        <trans-unit id="4dc002b021fdf91ff604ee57f3cc129ef280a957" translate="yes" xml:space="preserve">
          <source>Alternatively, you could make a component-specific &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard for the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method provides you with the current instance of the &lt;code&gt;component&lt;/code&gt;, the current &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; in case you needed to access some external information. This would be useful if you only wanted to use this guard for this component and needed to get the component's properties or confirm whether the router should allow navigation away from it.</source>
          <target state="translated">また、あなたは、コンポーネント固有の作ることができる &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; のためのガード &lt;code&gt;CrisisDetailComponent&lt;/code&gt; を。 &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; メソッドは、現在のインスタンスを提供します &lt;code&gt;component&lt;/code&gt; 、現在 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; あなたには、いくつかの外部情報にアクセスするために必要な場合です。これは、このガードをこのコンポーネントにのみ使用する必要があり、コンポーネントのプロパティを取得したり、ルーターがコンポーネントからのナビゲーションを許可するかどうかを確認したりする必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="1db281f9fe5fb6dc1260a395e782108dc7443b4b" translate="yes" xml:space="preserve">
          <source>Alternatively, you could make a component-specific &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard for the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. The &lt;code&gt;canDeactivate()&lt;/code&gt; method provides you with the current instance of the &lt;code&gt;component&lt;/code&gt;, the current &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; in case you needed to access some external information. This would be useful if you only wanted to use this guard for this component and needed to get the component's properties or confirm whether the router should allow navigation away from it.</source>
          <target state="translated">また、あなたは、コンポーネント固有の作ることができる &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; のためのガード &lt;code&gt;CrisisDetailComponent&lt;/code&gt; を。 &lt;code&gt;canDeactivate()&lt;/code&gt; メソッドは、現在のインスタンスを提供します &lt;code&gt;component&lt;/code&gt; 、現在 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; あなたには、いくつかの外部情報にアクセスするために必要な場合です。これは、このガードをこのコンポーネントにのみ使用し、コンポーネントのプロパティを取得する必要がある場合、またはルーターがコンポーネントからのナビゲーションを許可する必要があるかどうかを確認する必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2246c16c08b61d99b022d0d6c7301776becfb045" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; is a valid Angular directive, it isn't available by default.</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; が有効な角度指令である、それはデフォルトでは使用できません。</target>
        </trans-unit>
        <trans-unit id="99c7fb8e8fe2caa5683ecf66a4f0b8dc02a8734c" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;HeroService&lt;/code&gt; has no access to &lt;code&gt;UserService&lt;/code&gt;, the factory function does. You inject both &lt;code&gt;Logger&lt;/code&gt; and &lt;code&gt;UserService&lt;/code&gt; into the factory provider and let the injector pass them along to the factory function.</source>
          <target state="translated">が &lt;code&gt;HeroService&lt;/code&gt; がへのアクセスがありません &lt;code&gt;UserService&lt;/code&gt; のを、工場出荷時の機能はありません。 &lt;code&gt;Logger&lt;/code&gt; と &lt;code&gt;UserService&lt;/code&gt; の両方をファクトリプロバイダーに注入し、インジェクターにそれらをファクトリー関数に渡します。</target>
        </trans-unit>
        <trans-unit id="a71de44f8d521e498fa4c517279e05613ba8baef" translate="yes" xml:space="preserve">
          <source>Although developers strive to avoid it, many visual effects and third-party tools, such as jQuery, require DOM access. As a result, you might need to access a component's DOM element.</source>
          <target state="translated">開発者はそれを避けるように努力していますが、多くの視覚効果や jQuery などのサードパーティ製ツールは DOM アクセスを必要とします。その結果、コンポーネントの DOM 要素にアクセスする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="c63a4c9db8fae775d2c9b2460c0753c92e1ed4e5" translate="yes" xml:space="preserve">
          <source>Although in this example you're modelling a job application for heroes, there are no references to any specific hero question outside the objects returned by &lt;code&gt;QuestionService&lt;/code&gt;.</source>
          <target state="translated">この例では、ヒーローの求人アプリケーションをモデリングしていますが、 &lt;code&gt;QuestionService&lt;/code&gt; によって返されるオブジェクトの外にある特定のヒーローの質問への参照はありません。</target>
        </trans-unit>
        <trans-unit id="cc91b6a47c2c9426e25d4160f55077985fca9671" translate="yes" xml:space="preserve">
          <source>Although interceptors are capable of modifying requests and responses, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; instance properties are &lt;code&gt;readonly&lt;/code&gt;, rendering them largely immutable. They are immutable for a good reason: an app might retry a request several times before it succeeds, which means that the interceptor chain can re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</source>
          <target state="translated">インターセプターはリクエストとレスポンスを変更できますが、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; インスタンスと &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; インスタンスのプロパティは &lt;code&gt;readonly&lt;/code&gt; 、ほとんど不変になります。これらは正当な理由で不変です。アプリが成功する前にリクエストを数回再試行する場合があります。つまり、インターセプターチェーンは同じリクエストを複数回再処理できます。インターセプターが元の要求オブジェクトを変更できる場合、再試行された操作は、元の要求ではなく、変更された要求から開始されます。不変性により、インターセプターは試行ごとに同じ要求を確認できます。</target>
        </trans-unit>
        <trans-unit id="eda7b93e32221f3afb3cbb94c32a8763a782190c" translate="yes" xml:space="preserve">
          <source>Although interceptors are capable of mutating requests and responses, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; instance properties are &lt;code&gt;readonly&lt;/code&gt;, rendering them largely immutable.</source>
          <target state="translated">インターセプターは要求と応答を変更することができますが、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; インスタンスプロパティは &lt;code&gt;readonly&lt;/code&gt; 、ほとんど不変です。</target>
        </trans-unit>
        <trans-unit id="140a2bef2ba1a6526c1ddea73a80aa5c89e23cae" translate="yes" xml:space="preserve">
          <source>Although invisible, the component&amp;mdash;and all of its descendant components&amp;mdash;tie up resources. The performance and memory burden can be substantial, responsiveness can degrade, and the user sees nothing.</source>
          <target state="translated">非表示ですが、コンポーネント（およびそのすべての子孫コンポーネント）はリソースを占有します。パフォーマンスとメモリの負荷が大きくなり、応答性が低下し、ユーザーには何も見えなくなります。</target>
        </trans-unit>
        <trans-unit id="d31505d453cadf512a3068c4535ce6c154083088" translate="yes" xml:space="preserve">
          <source>Although it doesn't actually log in, it has an &lt;code&gt;isLoggedIn&lt;/code&gt; flag to tell you whether the user is authenticated. Its &lt;code&gt;login()&lt;/code&gt; method simulates an API call to an external service by returning an observable that resolves successfully after a short pause. The &lt;code&gt;redirectUrl&lt;/code&gt; property stores the URL that the user wanted to access so you can navigate to it after authentication.</source>
          <target state="translated">実際にはログインしませんが、ユーザーが認証されているかどうかを示す &lt;code&gt;isLoggedIn&lt;/code&gt; フラグがあります。その &lt;code&gt;login()&lt;/code&gt; メソッドは、短い一時停止後に正常に解決されるオブザーバブルを返すことにより、外部サービスへのAPI呼び出しをシミュレートします。 &lt;code&gt;redirectUrl&lt;/code&gt; のプロパティを格納し、認証後にナビゲートすることができるように、ユーザーがアクセスしたいとURL。</target>
        </trans-unit>
        <trans-unit id="8a59cd2708af00e8af91086a976046b0bcef21a1" translate="yes" xml:space="preserve">
          <source>Although it doesn't actually log in, it has what you need for this discussion. It has an &lt;code&gt;isLoggedIn&lt;/code&gt; flag to tell you whether the user is authenticated. Its &lt;code&gt;login&lt;/code&gt; method simulates an API call to an external service by returning an observable that resolves successfully after a short pause. The &lt;code&gt;redirectUrl&lt;/code&gt; property will store the attempted URL so you can navigate to it after authenticating.</source>
          <target state="translated">実際にはログインしませんが、このディスカッションに必要なものが含まれています。 &lt;code&gt;isLoggedIn&lt;/code&gt; フラグがあり、ユーザーが認証されているかどうかがわかります。その &lt;code&gt;login&lt;/code&gt; メソッドは、短い一時停止後に正常に解決されるオブザーバブルを返すことにより、外部サービスへのAPI呼び出しをシミュレートします。 &lt;code&gt;redirectUrl&lt;/code&gt; のあなたが認証した後、それにナビゲートすることができるようにプロパティが試みられURLを格納します。</target>
        </trans-unit>
        <trans-unit id="b709afe389b87b25545ae196d4d825808c5ef733" translate="yes" xml:space="preserve">
          <source>Although it's harmless to add components to this list, it's best to add only the components that are truly &lt;em&gt;entry components&lt;/em&gt;. Don't include components that &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;are referenced&lt;/a&gt; in the templates of other components.</source>
          <target state="translated">このリストにコンポーネントを追加しても問題はありませんが、本当に&lt;em&gt;エントリコンポーネントで&lt;/em&gt;あるコンポーネントのみを追加することをお勧めし&lt;em&gt;ます&lt;/em&gt;。他のコンポーネントのテンプレートで&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;参照さ&lt;/a&gt;れているコンポーネントを含めないでください。</target>
        </trans-unit>
        <trans-unit id="e6f1c72ed2810faf50b8f3333c1f8b5b5403cdef" translate="yes" xml:space="preserve">
          <source>Although it's possible to write complex template expressions, it's a better practice to avoid them.</source>
          <target state="translated">複雑なテンプレート表現を書くことは可能ですが、それは避けた方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="4a1e0521995f02fa13a22d0497e6341f339bfdd5" translate="yes" xml:space="preserve">
          <source>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. As such, the Router provides support for the matrix notation across browsers.</source>
          <target state="translated">マトリックス記法は HTML 標準には登場しなかったが、これは合法であり、親ルートと子ルートに属するパラメータを分離する方法として、ブラウザのルーティングシステムの間で普及した。そのため、Router はブラウザ全体でマトリックス記法をサポートしています。</target>
        </trans-unit>
        <trans-unit id="b526ddc47425d94439f76e0b41ef7dc4ee102f58" translate="yes" xml:space="preserve">
          <source>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. The Router is such a system and provides support for the matrix notation across browsers.</source>
          <target state="translated">マトリックス記法が HTML 標準になることはありませんでしたが、これは合法であり、親ルートと子ルートに属するパラメータを分離する方法として、ブラウザのルーティングシステムの間で普及しました。Router はそのようなシステムであり、ブラウザ全体でマトリックス記法をサポートしています。</target>
        </trans-unit>
        <trans-unit id="8d8e9edc4365018503a0aa8ba523d7e123f26f73" translate="yes" xml:space="preserve">
          <source>Although not discussed here, there's an example of &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;getHeroNo404()&lt;/code&gt; method included in the sample source code.</source>
          <target state="translated">ここでは説明しませんが、サンプルのソースコードに含まれている &lt;code&gt;getHeroNo404()&lt;/code&gt; メソッドの &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; の例があります。</target>
        </trans-unit>
        <trans-unit id="6d18ca4365d2bef502c303f63c22228b94396427" translate="yes" xml:space="preserve">
          <source>Although not discussed here, there's an example of &lt;code&gt;map()&lt;/code&gt; in the &lt;code&gt;getHeroNo404()&lt;/code&gt; method included in the sample source code.</source>
          <target state="translated">ここでは説明しませんが、サンプルソースコードに含まれている &lt;code&gt;getHeroNo404()&lt;/code&gt; メソッドに &lt;code&gt;map()&lt;/code&gt; の例があります。</target>
        </trans-unit>
        <trans-unit id="1791d4dc1123e82f2994b8a2caf82568ea2a7c6d" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;AppConfig&lt;/code&gt; interface plays no role in dependency injection, it supports typing of the configuration object within the class.</source>
          <target state="translated">けれども &lt;code&gt;AppConfig&lt;/code&gt; インタフェースは、依存性注入で何の役割を果たしていない、それはクラス内の構成オブジェクトのタイピングをサポートしています。</target>
        </trans-unit>
        <trans-unit id="fd82dd1db7d08ae6c8e08528e4b276fa2f0da283" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;compose&lt;/code&gt; route is configured to the &quot;popup&quot; outlet, that's not sufficient for connecting the route to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. You have to specify the named outlet in a &lt;em&gt;link parameters array&lt;/em&gt; and bind it to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with a property binding.</source>
          <target state="translated">が &lt;code&gt;compose&lt;/code&gt; ルートが「ポップアップ」コンセントに設定されている、それはへの経路を接続するための十分ではありません &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; のディレクティブ。&lt;em&gt;リンクパラメータ配列&lt;/em&gt;で名前付きアウトレットを指定し、プロパティバインディングを使用して &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; にバインドする必要があります。</target>
        </trans-unit>
        <trans-unit id="db12662de437927b080487074c85c43b5bbd2b73" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;compose&lt;/code&gt; route is pinned to the &quot;popup&quot; outlet, that's not sufficient for wiring the route to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. You have to specify the named outlet in a &lt;em&gt;link parameters array&lt;/em&gt; and bind it to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with a property binding.</source>
          <target state="translated">が &lt;code&gt;compose&lt;/code&gt; ルートが「ポップアップ」コンセントに固定され、それはへのルートを配線するために十分ではありません &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; のディレクティブ。&lt;em&gt;リンクパラメータ配列&lt;/em&gt;で名前付きアウトレットを指定し、プロパティバインディングで &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; にバインドする必要があります。</target>
        </trans-unit>
        <trans-unit id="780d733a048de3df146f7716ae29aeb8ee30bf5d" translate="yes" xml:space="preserve">
          <source>Although the Angular CLI is the easiest way to create an Angular component, you can also create a component manually. This section describes how to create the core component file within an existing Angular project.</source>
          <target state="translated">Angular CLIはAngularコンポーネントを作成する最も簡単な方法ですが、手動でコンポーネントを作成することもできます。ここでは、既存のAngularプロジェクト内でコアコンポーネントファイルを作成する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="6c1c3ccb2170fee61a8a53ce46a7cfc550989c39" translate="yes" xml:space="preserve">
          <source>Although the admin dashboard &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; only contains a relative slash without an additional URL segment, it is a match to any route within the admin feature area. You only want the &lt;code&gt;Dashboard&lt;/code&gt; link to be active when the user visits that route. Adding an additional binding to the &lt;code&gt;Dashboard&lt;/code&gt; routerLink,&lt;code&gt;[routerLinkActiveOptions]=&quot;{ exact: true }&quot;&lt;/code&gt;, marks the &lt;code&gt;./&lt;/code&gt; link as active when the user navigates to the &lt;code&gt;/admin&lt;/code&gt; URL and not when navigating to any of the child routes.</source>
          <target state="translated">管理ダッシュボード &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; には、追加のURLセグメントのない相対スラッシュのみが含まれていますが、管理機能領域内のすべてのルートに一致します。ユーザーがそのルートにアクセスしたときにのみ &lt;code&gt;Dashboard&lt;/code&gt; リンクをアクティブにする必要があります。 &lt;code&gt;Dashboard&lt;/code&gt; routerLinkに追加のバインディング &lt;code&gt;[routerLinkActiveOptions]=&quot;{ exact: true }&quot;&lt;/code&gt; 追加すると、ユーザーが &lt;code&gt;/admin&lt;/code&gt; URLに移動したときではなく、子ルートに移動したときに &lt;code&gt;./&lt;/code&gt; リンクがアクティブとしてマークされます。</target>
        </trans-unit>
        <trans-unit id="1d7c4334ace67bdbb9ee7db7773185ffcfb0f003" translate="yes" xml:space="preserve">
          <source>Although the admin dashboard &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; only contains a relative slash without an additional URL segment, it is considered a match to any route within the admin feature area. You only want the &lt;code&gt;Dashboard&lt;/code&gt; link to be active when the user visits that route. Adding an additional binding to the &lt;code&gt;Dashboard&lt;/code&gt; routerLink,&lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt;, marks the &lt;code&gt;./&lt;/code&gt; link as active when the user navigates to the &lt;code&gt;/admin&lt;/code&gt; URL and not when navigating to any of the child routes.</source>
          <target state="translated">管理ダッシュボードの &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; には、追加のURLセグメントのない相対スラッシュのみが含まれていますが、管理機能領域内のすべてのルートと一致すると見なされます。ユーザーがそのルートにアクセスしたときにのみ &lt;code&gt;Dashboard&lt;/code&gt; リンクをアクティブにする必要があります。 &lt;code&gt;Dashboard&lt;/code&gt; routerLink、 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt; に追加のバインディングを追加すると、ユーザーが &lt;code&gt;/admin&lt;/code&gt; URLに移動したときに &lt;code&gt;./&lt;/code&gt; リンクがアクティブであり、子ルートのいずれかに移動していない場合にマークが付けられます。</target>
        </trans-unit>
        <trans-unit id="b4df6da97c99904265a96515d7f37a5422025257" translate="yes" xml:space="preserve">
          <source>Although the component delegates hero deletion to the &lt;code&gt;HeroService&lt;/code&gt;, it remains responsible for updating its own list of heroes. The component's &lt;code&gt;delete()&lt;/code&gt; method immediately removes the &lt;em&gt;hero-to-delete&lt;/em&gt; from that list, anticipating that the &lt;code&gt;HeroService&lt;/code&gt; will succeed on the server.</source>
          <target state="translated">コンポーネントはヒーローの削除を &lt;code&gt;HeroService&lt;/code&gt; に委任しますが、独自のヒーローのリストを更新する責任があります。コンポーネントの &lt;code&gt;delete()&lt;/code&gt; メソッドは、削除する&lt;em&gt;ヒーロー&lt;/em&gt;をそのリストからすぐに削除し、 &lt;code&gt;HeroService&lt;/code&gt; がサーバーで成功することを予測します。</target>
        </trans-unit>
        <trans-unit id="bea5a0e7aa0c7807f055d55ca7e78a9c93ccea40" translate="yes" xml:space="preserve">
          <source>Although the tests in this guide all run in the browser, some apps might run on a different platform at least some of the time.</source>
          <target state="translated">このガイドのテストはすべてブラウザで実行されますが、アプリによっては、少なくとも一部の時間は別のプラットフォームで実行される場合があります。</target>
        </trans-unit>
        <trans-unit id="f1308d7fdf10956a614e10b524f57beab992dc1b" translate="yes" xml:space="preserve">
          <source>Although this example uses variable assignment to initialize the components, you could instead declare and initialize the properties using a constructor:</source>
          <target state="translated">この例では変数の割り当てを使用してコンポーネントを初期化していますが、代わりにコンストラクタを使用してプロパティを宣言して初期化することもできます。</target>
        </trans-unit>
        <trans-unit id="a895ffd8578e7962e8e90dd15f55eb1a1de64833" translate="yes" xml:space="preserve">
          <source>Although this testing guide follows the traditional style and the default &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI schematics&lt;/a&gt; generate test files with &lt;code&gt;beforeEach()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, feel free to adopt &lt;em&gt;this alternative approach&lt;/em&gt; in your own projects.</source>
          <target state="translated">このテストガイドは従来のスタイルに従っており、デフォルトの&lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI回路図&lt;/a&gt;は &lt;code&gt;beforeEach()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を使用してテストファイルを生成しますが、独自のプロジェクトで&lt;em&gt;この代替アプローチを&lt;/em&gt;自由に採用してください。</target>
        </trans-unit>
        <trans-unit id="7ae6deb63cacc642fcbb0f61179c36a85def2080" translate="yes" xml:space="preserve">
          <source>Although tokens used only as type specifiers are removed when converted to JavaScript, all tokens used for dependency injection are needed at runtime. These effectively change &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() other: OtherComponent)&lt;/code&gt; to &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() @&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;(OtherComponent) other)&lt;/code&gt;. The token is now in a value position, and causes the tree shaker to retain the reference.</source>
          <target state="translated">型指定子としてのみ使用されるトークンはJavaScriptに変換されると削除されますが、依存性注入に使用されるすべてのトークンは実行時に必要です。これらの効果の変更 &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() other: OtherComponent)&lt;/code&gt; に &lt;code&gt;constructor(@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;() @&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;(OtherComponent) other)&lt;/code&gt; 。これでトークンが値の位置になり、ツリーシェーカーが参照を保持します。</target>
        </trans-unit>
        <trans-unit id="7bc7decf04e5716adb169e2e1f89f0d3c435dadc" translate="yes" xml:space="preserve">
          <source>Although you can bootstrap an AngularJS app in code, many applications bootstrap declaratively with the &lt;code&gt;ng-app&lt;/code&gt; directive, giving it the name of the application's module (&lt;code&gt;movieHunter&lt;/code&gt;).</source>
          <target state="translated">AngularJSアプリをコードでブートストラップすることはできますが、多くのアプリケーションは &lt;code&gt;ng-app&lt;/code&gt; ディレクティブを使用して宣言的にブートストラップし、アプリケーションのモジュールの名前（ &lt;code&gt;movieHunter&lt;/code&gt; ）を与えます。</target>
        </trans-unit>
        <trans-unit id="e02c0ab9f3b340b1e4977e3101e04e64e8d94dda" translate="yes" xml:space="preserve">
          <source>Although you're not getting the behavior you want, Angular isn't broken. It's just using a different change-detection algorithm that ignores changes to the list or any of its items.</source>
          <target state="translated">望む動作が得られていませんが、Angularは壊れているわけではありません。リストやその項目への変更を無視する別の変更検出アルゴリズムを使っているだけです。</target>
        </trans-unit>
        <trans-unit id="655bcd6a216624937d6672a34cb20e4a684201c0" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;export&lt;/code&gt; the component class so you can &lt;code&gt;import&lt;/code&gt; it elsewhere ... like in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">常にコンポーネントクラスを &lt;code&gt;export&lt;/code&gt; して、 &lt;code&gt;AppModule&lt;/code&gt; のように他の場所に &lt;code&gt;import&lt;/code&gt; できるようにします。</target>
        </trans-unit>
        <trans-unit id="c021e093164e1f74b3f35d8e47a96ac3223c76a9" translate="yes" xml:space="preserve">
          <source>Always get the service from an injector</source>
          <target state="translated">必ずインジェクターからサービスを受ける</target>
        </trans-unit>
        <trans-unit id="610fe60a986b98fb96b6924a7703fe7732269b5c" translate="yes" xml:space="preserve">
          <source>Always specify the complete absolute path when calling router's &lt;code&gt;navigateByUrl()&lt;/code&gt; method.</source>
          <target state="translated">ルータの &lt;code&gt;navigateByUrl()&lt;/code&gt; メソッドを呼び出すときは、常に完全な絶対パスを指定してください。</target>
        </trans-unit>
        <trans-unit id="f5eae7714eb02f1ae104fb1f70b87e3fab6854b2" translate="yes" xml:space="preserve">
          <source>Amazon Cloud S3</source>
          <target state="translated">アマゾンクラウドS3</target>
        </trans-unit>
        <trans-unit id="7c060c43d1d915450d5cd5013ceedc7d9a2b52c6" translate="yes" xml:space="preserve">
          <source>Amend the &lt;code&gt;@angular/core&lt;/code&gt; import statement to include the &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; symbol.</source>
          <target state="translated">改正 &lt;code&gt;@angular/core&lt;/code&gt; 含めるようにimport文を &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 記号を。</target>
        </trans-unit>
        <trans-unit id="5b644c0a4c24e03ca14f068fc823dd64c778bf06" translate="yes" xml:space="preserve">
          <source>Among other features, Ivy introduces more comprehensive type-checking within templates. For details, see &lt;a href=&quot;template-typecheck&quot;&gt;Template Type-checking&lt;/a&gt;.</source>
          <target state="translated">他の機能の中でも、Ivyはテンプレート内でより包括的なタイプチェックを導入しています。詳細については、&lt;a href=&quot;template-typecheck&quot;&gt;テンプレートタイプのチェックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a63ef4162e15e9f9a4264c4f633e746ec995f377" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../guide/observables&quot;&gt;Observable&lt;/a&gt; factory function: A function that returns an &lt;code&gt;Observable&lt;/code&gt;. The function will be used at runtime to obtain and subscribe to the &lt;code&gt;Observable&lt;/code&gt; and the ServiceWorker will be registered as soon as the first value is emitted.</source>
          <target state="translated">&lt;a href=&quot;../../guide/observables&quot;&gt;観察可能な&lt;/a&gt;ファクトリ関数：返す関数 &lt;code&gt;Observable&lt;/code&gt; 。この関数は実行時に &lt;code&gt;Observable&lt;/code&gt; を取得してサブスクライブするために使用され、最初の値が発行されるとすぐにServiceWorkerが登録されます。</target>
        </trans-unit>
        <trans-unit id="7890dafd42800e1e635e68de3df438822747d36f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route.</source>
          <target state="translated">&lt;a href=&quot;../api/router/activationstart&quot;&gt;イベントは、&lt;/a&gt;ルータがルートをアクティブに開始したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="c39d1e22c53c2af9b2d4c377c45f82b0b1e2bcef" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route.</source>
          <target state="translated">&lt;a href=&quot;../api/router/activationstart&quot;&gt;イベントは、&lt;/a&gt;ルータがルートをアクティブに終了したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="2c21e55545fc6566ca7c2bfeac477e90a12a69d4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/childactivationend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route's children.</source>
          <target state="translated">&lt;a href=&quot;../api/router/childactivationend&quot;&gt;イベントは、&lt;/a&gt;ルータがルートの子供を活性化が完了したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="e3327c4a4dd53191f4e45bd3a9702873e5e1df07" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/childactivationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route's children.</source>
          <target state="translated">&lt;a href=&quot;../api/router/childactivationstart&quot;&gt;イベントは、&lt;/a&gt;ルータがルートの子供を活性化し始めたときにトリガ。</target>
        </trans-unit>
        <trans-unit id="72902f835d2457adbf3f424d7ed6aa5fbedee83b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/guardscheckend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Guards phase of routing successfully.</source>
          <target state="translated">&lt;a href=&quot;../api/router/guardscheckend&quot;&gt;イベントは、&lt;/a&gt;ルータが正常にルーティングのガードフェーズを終了したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="7c9902eb347e259e539ce1420cfbf9fcb004d4a7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Guards phase of routing.</source>
          <target state="translated">&lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;イベントは、&lt;/a&gt;ルータは、ルーティングのガードフェーズを開始したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="69e584daf4625901168aeeeb9d5204b8f03542cf" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationcancel&quot;&gt;event&lt;/a&gt; triggered when navigation is canceled. This can happen when a &lt;a href=&quot;router#guards&quot;&gt;Route Guard&lt;/a&gt; returns false during navigation, or redirects by returning a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationcancel&quot;&gt;イベントは&lt;/a&gt;、ナビゲーションがキャンセルされたときにトリガ。これは、&lt;a href=&quot;router#guards&quot;&gt;ルートガード&lt;/a&gt;がナビゲーション中にfalseを返した場合、または &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すことによってリダイレクトされた場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="49db32d68fee43ab6e8e76805f82f499be0c9fd4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationcancel&quot;&gt;event&lt;/a&gt; triggered when navigation is canceled. This can happen when a &lt;a href=&quot;router-tutorial-toh#guards&quot;&gt;Route Guard&lt;/a&gt; returns false during navigation, or redirects by returning a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationcancel&quot;&gt;イベントは&lt;/a&gt;、ナビゲーションがキャンセルされたときにトリガ。これは、&lt;a href=&quot;router-tutorial-toh#guards&quot;&gt;ルートガード&lt;/a&gt;がナビゲーション中にfalseを返すか、 &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すことによってリダイレクトする場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="71250dfa39f645ca9272ff2924abdbb047e81e1c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationend&quot;&gt;event&lt;/a&gt; triggered when navigation ends successfully.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationend&quot;&gt;イベントは&lt;/a&gt;、ナビゲーションが正常に終了したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="5449cdb5f08ea0b83a8503bf2aa7e372f857eeb8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationerror&quot;&gt;event&lt;/a&gt; triggered when navigation fails due to an unexpected error.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationerror&quot;&gt;イベントは、&lt;/a&gt;ナビゲーションが予期しないエラーのために失敗したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="a2ae571a3340d4a75539962ff60108d48d5c9537" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationstart&quot;&gt;event&lt;/a&gt; triggered when navigation starts.</source>
          <target state="translated">&lt;a href=&quot;../api/router/navigationstart&quot;&gt;イベントは、&lt;/a&gt;ナビゲーションが開始したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="426962608c573ea20e84f4af471ba7aecd0d4a37" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/resolveend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Resolve phase of routing successfuly.</source>
          <target state="translated">&lt;a href=&quot;../api/router/resolveend&quot;&gt;イベントは、&lt;/a&gt;ルータはsuccessfulyルーティングの解決フェーズを終了したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="fd22e501f75afe5ba52de290c4ca9f9d39a2d35d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/resolvestart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Resolve phase of routing.</source>
          <target state="translated">&lt;a href=&quot;../api/router/resolvestart&quot;&gt;イベントは、&lt;/a&gt;ルータは、ルーティングの解決フェーズを開始したときにトリガ。</target>
        </trans-unit>
        <trans-unit id="ea85ce4a6e9ac1b58d76f15ffef657cbbddf2c3f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;event&lt;/a&gt; triggered after a route has been lazy loaded.</source>
          <target state="translated">ルートが遅延ロードされた後にトリガーされる&lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;イベント&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c0e692d2c146b893b035f9f9829067876ae851d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;event&lt;/a&gt; triggered before the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;router#asynchronous-routing&quot;&gt;lazy loads&lt;/a&gt; a route configuration.</source>
          <target state="translated">&lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;イベントは&lt;/a&gt;前にトリガ &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;router#asynchronous-routing&quot;&gt;怠惰なロード&lt;/a&gt;ルートの設定。</target>
        </trans-unit>
        <trans-unit id="713cc0f8fae10897af2b4e3e7c5687c0d5a96c5b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;event&lt;/a&gt; triggered before the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;router-tutorial-toh#asynchronous-routing&quot;&gt;lazy loads&lt;/a&gt; a route configuration.</source>
          <target state="translated">&lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;イベントは&lt;/a&gt;前にトリガ &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;router-tutorial-toh#asynchronous-routing&quot;&gt;怠惰なロード&lt;/a&gt;ルートの設定。</target>
        </trans-unit>
        <trans-unit id="899c0961591582cac03b97b9fe13c8147d2c81ea" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routesrecognized&quot;&gt;event&lt;/a&gt; triggered when the Router parses the URL and the routes are recognized.</source>
          <target state="translated">&lt;a href=&quot;../api/router/routesrecognized&quot;&gt;イベントは、&lt;/a&gt;ルータがURLを解析し、ルートが認識されたときにトリガ。</target>
        </trans-unit>
        <trans-unit id="69ea6deb0af3e15d693596cfbf4f88b319c82d8b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/scroll&quot;&gt;event&lt;/a&gt; that represents a scrolling event.</source>
          <target state="translated">&lt;a href=&quot;../api/router/scroll&quot;&gt;イベント&lt;/a&gt;のスクロールイベントを表します。</target>
        </trans-unit>
        <trans-unit id="47b5f065a7dd417173397ba045ea5ec984d41ba8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directive&lt;/a&gt; changes the appearance or behavior of an element, component, or another directive. For example, the built-in &lt;a href=&quot;built-in-directives#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive changes several element styles at the same time.</source>
          <target state="translated">&lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;属性の&lt;/em&gt;ディレクティブは、&lt;/a&gt;要素、コンポーネント、または他のディレクティブの外観や動作を変更します。たとえば、組み込みの&lt;a href=&quot;built-in-directives#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;ディレクティブは、複数の要素スタイルを同時に変更します。</target>
        </trans-unit>
        <trans-unit id="c1d7ddd4c6221de6325bfd2f11d8ba52144db874" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directive&lt;/a&gt; changes the appearance or behavior of an element, component, or another directive. For example, the built-in &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive changes several element styles at the same time.</source>
          <target state="translated">&lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;属性の&lt;/em&gt;ディレクティブは、&lt;/a&gt;要素、コンポーネント、または他のディレクティブの外観や動作を変更します。たとえば、組み込みの&lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;ディレクティブは、いくつかの要素スタイルを同時に変更します。</target>
        </trans-unit>
        <trans-unit id="f87ce62d86cce8464606f29fc379d5a13e173a7c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt; is a class marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator with a metadata object that describes how that particular part of the app fits together with the other parts. NgModules are specific to Angular. While classes with an &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator are by convention kept in their own files, they differ from JavaScript modules because they include this metadata.</source>
          <target state="translated">アン&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModuleは&lt;/a&gt;でマークされたクラスである &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; どのアプリフィットの特定の部分が一緒に他の部分と記述するメタデータオブジェクトとデコレータ。NgModuleはAngularに固有です。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータを持つクラスは、慣例により独自のファイルに保持されますが、このメタデータが含まれているため、JavaScriptモジュールとは異なります。</target>
        </trans-unit>
        <trans-unit id="381caa57d2775be37deef699cc2ad5d0b0696312" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt; expression is ideal because it is free of side effects and improves Angular's change detection performance. In Angular terms, an idempotent expression always returns &lt;em&gt;exactly the same thing&lt;/em&gt; until one of its dependent values changes.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;冪等の&lt;/a&gt;それは副作用の自由であり、角度の変化を検出性能を向上するための式が理想的です。Angularの用語では、べき等式は、依存値の1つが変更されるまで&lt;em&gt;、&lt;/em&gt;常に&lt;em&gt;まったく同じものを&lt;/em&gt;返します。</target>
        </trans-unit>
        <trans-unit id="ca5e0929440033b5793e264cd56bccd1cc748753" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;npm-packages&quot;&gt;npm package&lt;/a&gt; that plugs gaps in a browser's JavaScript implementation. See &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt; for polyfills that support particular functionality for particular platforms.</source>
          <target state="translated">&lt;a href=&quot;npm-packages&quot;&gt;NPMパッケージ&lt;/a&gt;ブラウザのJavaScriptの実装のギャップをプラグ。特定のプラットフォームの特定の機能を&lt;a href=&quot;browser-support&quot;&gt;サポート&lt;/a&gt;するポリフィルのブラウザサポートを参照してください。</target>
        </trans-unit>
        <trans-unit id="219f19f290eb214e9b46b6b243f29af829538794" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; root element is detected as an SVG element automatically, without the prefix.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; ルート要素は、プレフィックスなしで、自動的にSVG要素として検出されます。</target>
        </trans-unit>
        <trans-unit id="8e73ae230a1248e9c7e2883b99036f3d5f240f5f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; presents the list of messages in repeated &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">アン &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 繰り返し内のメッセージのリストを提示 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素を。</target>
        </trans-unit>
        <trans-unit id="f2f90242a3b15020a7dda505cb0f3db9126f9d69" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">AngularJSコアサービスを提供するためにインポートする &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; には、ハイブリッドアップグレードアプリケーションのブートストラップに使用されるインスタンスメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="e4b5b7b463e93a6c1bdc30c63b8e5d59fb4e799f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method does not begin its HTTP request until you call &lt;code&gt;subscribe()&lt;/code&gt; on the observable returned by that method. This is true for &lt;em&gt;all&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;&lt;em&gt;methods&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を呼び出すまでの方法は、そのHTTPリクエストを開始しません &lt;code&gt;subscribe()&lt;/code&gt; そのメソッドによって返された観測可能に。これは、&lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; &lt;em&gt;メソッドに&lt;/em&gt;当てはまり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3486e52a9ca74e105c9d47272170fbe086672a4e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の非同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3fc1b81c07404d7fb201c7c09fb069d006db201" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9acb76cd675cf3db071a0fd0b62776f333e09782" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">AngularJSコアサービスを提供するためにインポートする &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; には、ハイブリッドアップグレードアプリケーションのブートストラップに使用されるインスタンスメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="a705ac5afb0c3c72cf40d0a78a176ebc767e55b7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の非同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23717595533a9e7f86e6906ec79bd920cab4e792" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c48cdd99d250e9b5794feac11e209b12cc845dae" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; is backed by a render-specific element. In the browser, this is usually a DOM element.</source>
          <target state="translated">アン &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; はレンダリング固有の要素によって支えられています。ブラウザでは、これは通常DOM要素です。</target>
        </trans-unit>
        <trans-unit id="0902cc5f82cdfcbcb355b954a52dc73cbbfff74b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; configuration object that controls how navigation is performed.</source>
          <target state="translated">ナビゲーションの実行方法を制御する &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; 構成オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ec99dc581b15e270f8a008cf6fe23c15b13a4e6e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; is a replacement for a &lt;code&gt;new&lt;/code&gt; operator, which can automatically resolve the constructor dependencies.</source>
          <target state="translated">アン &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; のための代替である &lt;code&gt;new&lt;/code&gt; 自動的にコンストラクタの依存関係を解決することができます演算子、。</target>
        </trans-unit>
        <trans-unit id="b1291a4011084cae6a49c7568f00d5c3f842045f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property should normally be initialized to an Angular &lt;a href=&quot;../api/core/eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; with values flowing out of the component as &lt;a href=&quot;template-syntax#event-binding&quot;&gt;events&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; プロパティは、通常の角に初期化されるべき&lt;a href=&quot;../api/core/eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;値は、コンポーネントの流出と&lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベント&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c0efdf314434e0bdd77bc0f5a83a46140513339" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; instance begins publishing values only when someone subscribes to it. You subscribe by calling the &lt;code&gt;subscribe()&lt;/code&gt; method of the instance, passing an observer object to receive the notifications.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; インスタンスは、誰かがそれに加入している場合にのみ、値を公開開始します。サブスクライブするには、インスタンスの &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出し、オブザーバーオブジェクトを渡して通知を受け取ります。</target>
        </trans-unit>
        <trans-unit id="496291c15f69bd4995a0ab9d8aaf7bfd7fe93e3b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the URL &lt;a href=&quot;router#fragment&quot;&gt;fragment&lt;/a&gt; available to all routes.</source>
          <target state="translated">すべてのルートで使用可能なURL &lt;a href=&quot;router#fragment&quot;&gt;フラグメント&lt;/a&gt;の &lt;code&gt;Observable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ebbb34c674042ddab3f18b8288006f1608e8cb94" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the URL &lt;a href=&quot;router-tutorial-toh#fragment&quot;&gt;fragment&lt;/a&gt; available to all routes.</source>
          <target state="translated">すべてのルートで使用可能なURL&lt;a href=&quot;router-tutorial-toh#fragment&quot;&gt;フラグメント&lt;/a&gt;の &lt;code&gt;Observable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4fa68903eb03e9a2e62a2a57a0c8d5942de1bfa" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the route path(s), represented as an array of strings for each part of the route path.</source>
          <target state="translated">ルートパスの各部分の文字列の配列として表される、ルートパスの &lt;code&gt;Observable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="04f30cfd0bce06b1acdce10f416a6eb14bf52ffb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">アン &lt;code&gt;Observable&lt;/code&gt; 含ま&lt;a href=&quot;../api/router/parammap&quot;&gt;マップ&lt;/a&gt;の&lt;a href=&quot;router#query-parameters&quot;&gt;クエリパラメータ&lt;/a&gt;のすべてのルートが利用可能に。マップは、クエリパラメータからの単一および複数の値の取得をサポートしています。</target>
        </trans-unit>
        <trans-unit id="1025632f96a98d4b5173ce9d2c6eed1251883f7b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the &lt;a href=&quot;router-tutorial-toh#query-parameters&quot;&gt;query parameters&lt;/a&gt; available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">アン &lt;code&gt;Observable&lt;/code&gt; 含ま&lt;a href=&quot;../api/router/parammap&quot;&gt;マップ&lt;/a&gt;の&lt;a href=&quot;router-tutorial-toh#query-parameters&quot;&gt;クエリパラメータ&lt;/a&gt;のすべてのルートが利用可能に。マップは、クエリパラメータからの単一および複数の値の取得をサポートしています。</target>
        </trans-unit>
        <trans-unit id="43be0a230743764c26dd920f3024d4f1250bc9f5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the required and &lt;a href=&quot;router#optional-route-parameters&quot;&gt;optional parameters&lt;/a&gt; specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">AN &lt;code&gt;Observable&lt;/code&gt; 含ま&lt;a href=&quot;../api/router/parammap&quot;&gt;マップ&lt;/a&gt;必須の&lt;a href=&quot;router#optional-route-parameters&quot;&gt;オプションのパラメータ&lt;/a&gt;経路に特定します。マップは、同じパラメーターから単一および複数の値を取得することをサポートします。</target>
        </trans-unit>
        <trans-unit id="439965d6e53f3022fdfa1a09f892680a0a4945e2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the required and &lt;a href=&quot;router-tutorial-toh#optional-route-parameters&quot;&gt;optional parameters&lt;/a&gt; specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">AN &lt;code&gt;Observable&lt;/code&gt; 含ま&lt;a href=&quot;../api/router/parammap&quot;&gt;マップ&lt;/a&gt;必須の&lt;a href=&quot;router-tutorial-toh#optional-route-parameters&quot;&gt;オプションのパラメータ&lt;/a&gt;経路に特定します。マップは、同じパラメーターからの単一および複数の値の取得をサポートします。</target>
        </trans-unit>
        <trans-unit id="8f7e21dd9af9c63a178fb6539d2db368c3122537" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains the &lt;code&gt;data&lt;/code&gt; object provided for the route. Also contains any resolved values from the &lt;a href=&quot;router#resolve-guard&quot;&gt;resolve guard&lt;/a&gt;.</source>
          <target state="translated">アン &lt;code&gt;Observable&lt;/code&gt; 含まれている &lt;code&gt;data&lt;/code&gt; 経路の提供のオブジェクトを。また、&lt;a href=&quot;router#resolve-guard&quot;&gt;解決ガード&lt;/a&gt;からの解決された値も含まれます。</target>
        </trans-unit>
        <trans-unit id="6c577b17009c4019b5a8a7d58a36748a2c2a3ce0" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains the &lt;code&gt;data&lt;/code&gt; object provided for the route. Also contains any resolved values from the &lt;a href=&quot;router-tutorial-toh#resolve-guard&quot;&gt;resolve guard&lt;/a&gt;.</source>
          <target state="translated">アン &lt;code&gt;Observable&lt;/code&gt; 含まれている &lt;code&gt;data&lt;/code&gt; 経路の提供のオブジェクトを。また、&lt;a href=&quot;router-tutorial-toh#resolve-guard&quot;&gt;解決ガード&lt;/a&gt;から解決された値も含まれます。</target>
        </trans-unit>
        <trans-unit id="659371a63d96eaa9846b4e62b2ecd146eb8fb3a8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;e2e/&lt;/code&gt; folder at the top level contains source files for a set of end-to-end tests that correspond to the root-level application, along with test-specific configuration files.</source>
          <target state="translated">トップレベルの &lt;code&gt;e2e/&lt;/code&gt; フォルダーには、ルートレベルのアプリケーションに対応する一連のエンドツーエンドテストのソースファイルと、テスト固有の構成ファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="d5f9c8ae60c205e172f05d9395ece9247067727b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ngOnInit()&lt;/code&gt; is a good place for a component to fetch its initial data. For an example, see the &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;.</source>
          <target state="translated">アン &lt;code&gt;ngOnInit()&lt;/code&gt; はその初期データをフェッチするためのコンポーネントのために良い場所です。例については、&lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour ofHeroesチュートリアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a393989fd86c0b1fb47b08868996156fe76ee83d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ngOnInit()&lt;/code&gt; is a good place for a component to fetch its initial data. The &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroes Tutorial&lt;/a&gt; guide shows how.</source>
          <target state="translated">アン &lt;code&gt;ngOnInit()&lt;/code&gt; はその初期データをフェッチするためのコンポーネントのために良い場所です。&lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;英雄チュートリアルのツアー&lt;/a&gt;どのようにガイドを示しています。</target>
        </trans-unit>
        <trans-unit id="40bf5611d5635b162977a8f19c777ed4e7ce75d7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of body returns an observable of &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; with the same &lt;code&gt;T&lt;/code&gt; body type.</source>
          <target state="translated">body の &lt;code&gt;observe&lt;/code&gt; 値は、同じ &lt;code&gt;T&lt;/code&gt; ボディタイプのオブザーバブル &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="09173ee04df6635197986a7dcb62f7c7941d2cfe" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of events returns an observable of the raw &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; stream, including progress events by default.</source>
          <target state="translated">&lt;code&gt;observe&lt;/code&gt; イベントの値は、生の観測可能返し &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; のデフォルトでは、progressイベントを含むストリーム、。</target>
        </trans-unit>
        <trans-unit id="c6c6a2eb3f2af282b7e5e7ba7956f7e168813b54" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of response returns an observable of &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;, where the &lt;code&gt;T&lt;/code&gt; parameter depends on the &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and any optionally provided type parameter.</source>
          <target state="translated">&lt;code&gt;observe&lt;/code&gt; 応答の値の観察戻り &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt; 場合、 &lt;code&gt;T&lt;/code&gt; のパラメータが依存 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; 及び任意随意設け型パラメータ。</target>
        </trans-unit>
        <trans-unit id="d02ab364b63f0d847dba8d71957b97935e618308" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of response returns an observable of &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;, where the &lt;code&gt;T&lt;/code&gt; parameter depends on the &lt;code&gt;responseType&lt;/code&gt; and any optionally provided type parameter.</source>
          <target state="translated">responseの &lt;code&gt;observe&lt;/code&gt; 値は、 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt; observableを返します。ここで、 &lt;code&gt;T&lt;/code&gt; パラメーターは &lt;code&gt;responseType&lt;/code&gt; およびオプションで提供されるtypeパラメーターに依存します。</target>
        </trans-unit>
        <trans-unit id="26ce9d0a751c4b4bca560fdfc4e8290382f4ff8b" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;Admin&lt;/em&gt; area to manage the list of crises and heroes.</source>
          <target state="translated">危機とヒーローのリストを管理するための&lt;em&gt;管理&lt;/em&gt;領域。</target>
        </trans-unit>
        <trans-unit id="b19e97dba2208f0862e676d34764de4f98f851d9" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;add schematic&lt;/em&gt; allows developers to install your library in an Angular workspace using &lt;code&gt;ng add&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;追加の回路図は、&lt;/em&gt;開発者が使用して角度のワークスペースで、あなたのライブラリをインストールすることができます &lt;code&gt;ng add&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ec44fe7f1a288919612b48c15847deaef368424" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;attribute directive&lt;/em&gt; modifies the behavior of an element, component or another directive. Its name reflects the way the directive is applied: as an attribute on a host element.</source>
          <target state="translated">&lt;em&gt;属性ディレクティブは、&lt;/em&gt;コンポーネントまたは別の指令、要素の動作を変更します。その名前は、ディレクティブが適用される方法を反映しています：ホスト要素の属性として。</target>
        </trans-unit>
        <trans-unit id="0ec56b57e883f5387676814357ed484d6aaa7704" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;update schematic&lt;/em&gt; can tell the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command how to update your library's dependencies and adjust for breaking changes when you release a new version.</source>
          <target state="translated">&lt;em&gt;更新の概略を&lt;/em&gt;伝えることができます &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; ライブラリの依存関係を更新し、新しいバージョンをリリース変更内容を破壊するために調整する方法コマンドを。</target>
        </trans-unit>
        <trans-unit id="3d974c9e9a2c3ede30e5346cca23d7a8a49874ed" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;update schematic&lt;/em&gt; can tell the &lt;code&gt;ng update&lt;/code&gt; command how to update your library's dependencies and adjust for breaking changes when you release a new version.</source>
          <target state="translated">&lt;em&gt;更新の概略を&lt;/em&gt;伝えることができます &lt;code&gt;ng update&lt;/code&gt; ライブラリの依存関係を更新し、新しいバージョンをリリース変更内容を破壊するために調整する方法コマンドを。</target>
        </trans-unit>
        <trans-unit id="761f41f255dd677b107e4bd110cf2558311066df" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;Attribute&lt;/strong&gt; directive changes the appearance or behavior of a DOM element.</source>
          <target state="translated">&lt;strong&gt;属性の&lt;/strong&gt;ディレクティブは、DOM要素の外観や動作を変更します。</target>
        </trans-unit>
        <trans-unit id="360a55bcdc221a2a622ac71ccb7b30ec33c1e145" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;../guide/event-binding&quot;&gt;event binding&lt;/a&gt; binds the button's click event to &lt;code&gt;MessageService.clear()&lt;/code&gt;.</source>
          <target state="translated">Angular&lt;a href=&quot;../guide/event-binding&quot;&gt;イベントバインディング&lt;/a&gt;は、ボタンのクリックイベントを &lt;code&gt;MessageService.clear()&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="ac0f1891644c942a2466a1e07ed0df2da374772f" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; binds the button's click event to &lt;code&gt;MessageService.clear()&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;イベントバインディング&lt;/a&gt;は、ボタンのクリックイベントを &lt;code&gt;MessageService.clear()&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="43775620687c736b758a71c493e7f6e17f5e85cc" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; packaged as a &lt;a href=&quot;glossary#custom-element&quot;&gt;custom element&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#custom-element&quot;&gt;カスタム要素&lt;/a&gt;としてパッケージ化されたAngular &lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7d10a3ad012872f7ef8bb8e2bb8056b9624d030" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive in its template that displays views based on router navigations.</source>
          <target state="translated">角度&lt;a href=&quot;glossary#component&quot;&gt;成分を&lt;/a&gt;持つ &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ディスプレイビューはルータナビゲーションに基づいていることをそのテンプレート内のディレクティブ。</target>
        </trans-unit>
        <trans-unit id="ae5befb0e78f74df39d0a2413426de6480b4eff1" translate="yes" xml:space="preserve">
          <source>An Angular HTML form template.</source>
          <target state="translated">AngularのHTMLフォームテンプレートです。</target>
        </trans-unit>
        <trans-unit id="c46699afa49393f6d4cbd5edc2fb078febaadc48" translate="yes" xml:space="preserve">
          <source>An Angular NgModule is a class with the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator&amp;mdash;JavaScript modules don't have to have the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. Angular's &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; and they serve a similar purpose.</source>
          <target state="translated">アン角度NgModuleが持つクラスである &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータ-のJavaScriptモジュールを持っている必要はありません &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータを。Angularの &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; には &lt;code&gt;imports&lt;/code&gt; と &lt;code&gt;exports&lt;/code&gt; あり、それらは同様の目的を果たします。</target>
        </trans-unit>
        <trans-unit id="318d525298ccecf3917c9882251bdba1ace41170" translate="yes" xml:space="preserve">
          <source>An Angular app needs at least one module that serves as the root module. As you add features to your app, you can add them in modules. The following are frequently used Angular modules with examples of some of the things they contain:</source>
          <target state="translated">Angularアプリには、ルートモジュールとして機能するモジュールが少なくとも1つ必要です。アプリに機能を追加していくと、モジュールに追加することができます。以下に、よく使われるAngularモジュールとその内容の例を示します。</target>
        </trans-unit>
        <trans-unit id="17e4e945b590d3025d8261eb8ed46e27c36c3781" translate="yes" xml:space="preserve">
          <source>An Angular app runs in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays by resolving &lt;a href=&quot;glossary#data-binding&quot;&gt;data bindings&lt;/a&gt;.</source>
          <target state="translated">Angularアプリは、データの変更をチェックし、&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディングを&lt;/a&gt;解決して表示する情報を更新することにより、非同期イベントに応答できるゾーンで実行されます。</target>
        </trans-unit>
        <trans-unit id="a83164b2c79029071aa75bdc4ec8a64b92ea5118" translate="yes" xml:space="preserve">
          <source>An Angular app&amp;mdash;you can generate a basic Angular app using the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;.</source>
          <target state="translated">Angularアプリ-AngularCLIを使用して基本的なAngularアプリを生成でき&lt;a href=&quot;cli&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f5a58a2db54c37533d8743189ca00c22cff5f930" translate="yes" xml:space="preserve">
          <source>An Angular application comprises a tree of components, in which each Angular component has a specific purpose and responsibility.</source>
          <target state="translated">Angularアプリケーションはコンポーネントのツリーで構成されており、各Angularコンポーネントは特定の目的と責任を持っています。</target>
        </trans-unit>
        <trans-unit id="224c83ccdc365f0fb95c344a9b94b58e6e776da8" translate="yes" xml:space="preserve">
          <source>An Angular application consists mainly of components and their HTML templates. Because the components and templates provided by Angular cannot be understood by the browser directly, Angular applications require a compilation process before they can run in a browser.</source>
          <target state="translated">Angularアプリケーションは主にコンポーネントとそのHTMLテンプレートで構成されています。Angularが提供するコンポーネントやテンプレートはブラウザでは直接理解できないため、Angularアプリケーションはブラウザで動作させる前にコンパイル処理を必要とします。</target>
        </trans-unit>
        <trans-unit id="abdf235f2e0f6378bc1eb3fb7b12653a48e94457" translate="yes" xml:space="preserve">
          <source>An Angular application has multiple injectors, arranged in a tree hierarchy that parallels the component tree. Each injector creates a singleton instance of a dependency. That same instance is injected wherever that injector provides that service. A particular service can be provided and created at any level of the injector hierarchy, which means that there can be multiple instances of a service if it is provided by multiple injectors.</source>
          <target state="translated">Angularアプリケーションには複数のインジェクターがあり、コンポーネントツリーと平行したツリー階層に配置されています。各インジェクターは依存関係のシングルトンインスタンスを作成します。同じインスタンスは、そのインジェクターがそのサービスを提供する場所であればどこにでも注入されます。特定のサービスはインジェクタ階層のどのレベルでも提供・作成することができ、複数のインジェクタによって提供されるサービスは複数のインスタンスを持つことができます。</target>
        </trans-unit>
        <trans-unit id="901f5d47e5b42b0f1b83f5de4ab44ccaaf9f4393" translate="yes" xml:space="preserve">
          <source>An Angular class or other definition that provides a dependency using the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; mechanism. An injectable &lt;a href=&quot;glossary#service&quot;&gt;service&lt;/a&gt; class must be marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. Other items, such as constant values, can also be injectable.</source>
          <target state="translated">&lt;a href=&quot;glossary#di&quot;&gt;依存関係注入&lt;/a&gt;メカニズムを使用して依存関係を提供するAngularクラスまたはその他の定義。インジェクタブル&lt;a href=&quot;glossary#service&quot;&gt;サービス&lt;/a&gt;クラスは、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;でマークする必要があります。定数値などの他の項目も注入できます。</target>
        </trans-unit>
        <trans-unit id="ca9a64e3c4625a8c6e8d002351029891fd08daa2" translate="yes" xml:space="preserve">
          <source>An Angular component can be &quot;downgraded&quot; to an AngularJS component. This is achieved by defining an AngularJS directive, which bootstraps the Angular component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントは、AngularJSコンポーネントに「ダウングレード」できます。これは、AngularJSディレクティブを定義することによって実現されます。これは、DOM内のその場所でAngularコンポーネントをブートストラップします。 &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="94ed2170f6f1643869b56898066095381b91d979" translate="yes" xml:space="preserve">
          <source>An Angular component can be downgraded to an AngularJS component directive. This creates an AngularJS directive, which bootstraps the Angular component in that location.</source>
          <target state="translated">AngularコンポーネントをAngularJSコンポーネントディレクティブにダウングレードすることができます。これはAngularJSディレクティブを作成し、その場所でAngularコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="84e3e11bc265bb72484f1b08eb8f80c960cc9617" translate="yes" xml:space="preserve">
          <source>An Angular component class is responsible for exposing data and handling most of the view's display and user-interaction logic through &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;.</source>
          <target state="translated">Angularコンポーネントクラスは、データを公開し、&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディングを&lt;/a&gt;介してビューの表示とユーザーインタラクションロジックのほとんどを処理します。</target>
        </trans-unit>
        <trans-unit id="7e69f08f5089ce0be09fa77cc573534bb33bf463" translate="yes" xml:space="preserve">
          <source>An Angular component requires a template defined using &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt;. You cannot have both statements in a component.</source>
          <target state="translated">Angularコンポーネントには、 &lt;code&gt;template&lt;/code&gt; または &lt;code&gt;templateUrl&lt;/code&gt; を使用して定義されたテンプレートが必要です。コンポーネントに両方のステートメントを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="055dd8ce39f4854631f9678e6236d3d89f44ba38" translate="yes" xml:space="preserve">
          <source>An Angular component with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; that displays views based on router navigations.</source>
          <target state="translated">ルーターのナビゲーションに基づいてビューを表示する &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を備えたAngularコンポーネント。</target>
        </trans-unit>
        <trans-unit id="0583a50b83c1574e7c5305e71080338ec56fc21b" translate="yes" xml:space="preserve">
          <source>An Angular form has two parts: an HTML-based &lt;em&gt;template&lt;/em&gt; and a component &lt;em&gt;class&lt;/em&gt; to handle data and user interactions programmatically. Begin with the class because it states, in brief, what the hero editor can do.</source>
          <target state="translated">Angularフォームには、HTMLベースの&lt;em&gt;テンプレート&lt;/em&gt;と、データとユーザーの対話をプログラムで処理するコンポーネント&lt;em&gt;クラスの&lt;/em&gt; 2つの部分があります。ヒーローエディターに何ができるかを簡単に説明しているので、クラスから始めます。</target>
        </trans-unit>
        <trans-unit id="feb425f8a5e188113a133b8bf3ee82774575750d" translate="yes" xml:space="preserve">
          <source>An Angular library is an Angular &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt; that differs from an app in that it cannot run on its own. A library must be imported and used in an app.</source>
          <target state="translated">Angularライブラリは、それ自体では実行できないという点でアプリとは異なるAngular &lt;a href=&quot;glossary#project&quot;&gt;プロジェクト&lt;/a&gt;です。ライブラリをインポートして、アプリで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="39a17a3341ed73b84cf9c19e3784f7825b103d30" translate="yes" xml:space="preserve">
          <source>An AngularJS component can be &quot;upgraded&quot;&quot; to an Angular component. This is achieved by defining an Angular directive, which bootstraps the AngularJS component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJSコンポーネントは、Angularコンポーネントに「アップグレード」できます。これは、Angularディレクティブを定義して、DOM内のその場所でAngularJSコンポーネントをブートストラップすることによって実現されます &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d7fbbc51dcdac1c27708c03be77bb73e12702b44" translate="yes" xml:space="preserve">
          <source>An AngularJS component can be upgraded to an Angular component. This creates an Angular directive, which bootstraps the AngularJS component directive in that location.</source>
          <target state="translated">AngularJSコンポーネントをAngularコンポーネントにアップグレードすることができます。これは Angular ディレクティブを作成し、その場所に AngularJS コンポーネントディレクティブをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="4a64cb5ebfd2cbf42d2f183810699373d7988f5d" translate="yes" xml:space="preserve">
          <source>An AngularJS component directive that is fully aligned with the Angular architecture may look something like this:</source>
          <target state="translated">Angularアーキテクチャに完全に合わせたAngularJSのコンポーネントディレクティブは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8a975ebf31d46d77cfdf5f77c89cee15a4b405cd" translate="yes" xml:space="preserve">
          <source>An HTML file for the component template.</source>
          <target state="translated">コンポーネントテンプレートのHTMLファイル。</target>
        </trans-unit>
        <trans-unit id="adeafd3c56d09b94f0aa3048fdb5f004ce4b1a22" translate="yes" xml:space="preserve">
          <source>An HTML template that declares what renders on the page</source>
          <target state="translated">ページに表示するものを宣言するHTMLテンプレート</target>
        </trans-unit>
        <trans-unit id="a3f4bdfe7e7387bc48b45d52ab3ae4d5c67454c6" translate="yes" xml:space="preserve">
          <source>An HTTP request/response body that represents serialized parameters, per the MIME type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.</source>
          <target state="translated">MIMEタイプ &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; ごとに、シリアル化されたパラメーターを表すHTTP要求/応答本文。</target>
        </trans-unit>
        <trans-unit id="e3a02c74d3b66bdb47a53584bb85ba7824e6d06f" translate="yes" xml:space="preserve">
          <source>An InjectionToken that gets the current &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;createInjector()&lt;/code&gt;-style injectors.</source>
          <target state="translated">現在取得アンInjectionToken &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 用 &lt;code&gt;createInjector()&lt;/code&gt; スタイルのインジェクタ。</target>
        </trans-unit>
        <trans-unit id="6d36e3d0c45ffd3f37a9efa12c23d595fbbad196" translate="yes" xml:space="preserve">
          <source>An InjectionToken that gets the current &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;createInjector()&lt;/code&gt;-style injectors.</source>
          <target state="translated">現在取得アンInjectionToken &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 用 &lt;code&gt;createInjector()&lt;/code&gt; スタイルのインジェクタ。</target>
        </trans-unit>
        <trans-unit id="148344ddb54e50e9920be9a68ce56bf37e875498" translate="yes" xml:space="preserve">
          <source>An NgModule bounds &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; only. Declarables are the only classes that matter to the &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt;.</source>
          <target state="translated">NgModuleは&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;宣言可能なクラス&lt;/a&gt;のみをバインドします。Declarableは、&lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angularコンパイラ&lt;/a&gt;にとって重要な唯一のクラスです。</target>
        </trans-unit>
        <trans-unit id="4d727575727c196322384a842e972193fc9ad53b" translate="yes" xml:space="preserve">
          <source>An NgModule can export a combination of its own declarations, selected imported classes, and imported NgModules.</source>
          <target state="translated">NgModule は、自身の宣言、選択されたインポートされたクラス、およびインポートされた NgModule の組み合わせをエクスポートすることができます。</target>
        </trans-unit>
        <trans-unit id="4aa58c70086cf419b25738e1a24be53c81f07b1d" translate="yes" xml:space="preserve">
          <source>An NgModule can only export the &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; it owns or imports from other modules. It doesn't declare or export any other kind of class.</source>
          <target state="translated">NgModuleは、それが所有するか、他のモジュールからインポートする宣言可能な&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;クラス&lt;/a&gt;のみをエクスポートできます。他の種類のクラスを宣言またはエクスポートしません。</target>
        </trans-unit>
        <trans-unit id="fb24463a305716f436894ea4dafb6375e5e171c3" translate="yes" xml:space="preserve">
          <source>An NgModule can re-export entire NgModules, which effectively re-exports all of their exported classes. Angular's own &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; exports a couple of NgModules like this:</source>
          <target state="translated">NgModuleはNgModule全体を再エクスポートできます。これにより、エクスポートされたすべてのクラスが効果的に再エクスポートされます。Angular独自の &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; は、次のようないくつかのNgModuleをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="048f4d3b7b842d7e07d1105320c9847be1e9da43" translate="yes" xml:space="preserve">
          <source>An NgModule describes how the application parts fit together. Every application has at least one Angular module, the &lt;em&gt;root&lt;/em&gt; module that you bootstrap to launch the application. By convention, it is usually called &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">NgModuleは、アプリケーションパーツがどのように適合するかを記述します。すべてのアプリケーションには、少なくとも1つのAngularモジュールがあります。これは、アプリケーションを起動するためにブートストラップする&lt;em&gt;ルート&lt;/em&gt;モジュールです。慣例により、通常は &lt;code&gt;AppModule&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="122e8ebc77547582400ee9d0ace68901d052aab8" translate="yes" xml:space="preserve">
          <source>An NgModule describes how the application parts fit together. Every application has at least one Angular module, the &lt;em&gt;root&lt;/em&gt; module, which must be present for bootstrapping the application on launch. By convention and by default, this NgModule is named &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">NgModuleは、アプリケーションパーツがどのように組み合わされるかを記述します。すべてのアプリケーションには、少なくとも1つのAngularモジュールである&lt;em&gt;ルート&lt;/em&gt;モジュールがあります。&lt;em&gt;ルート&lt;/em&gt;モジュールは、起動時にアプリケーションをブートストラップするために存在する必要があります。慣例により、デフォルトでは、このNgModuleの名前は &lt;code&gt;AppModule&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c2a07c3d512aeae1808c13ce81a7518d850dce90" translate="yes" xml:space="preserve">
          <source>An NgModule is a class marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; takes a metadata object that describes how to compile a component's template and how to create an injector at runtime. It identifies the module's own components, directives, and pipes, making some of them public, through the &lt;code&gt;exports&lt;/code&gt; property, so that external components can use them. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; can also add service providers to the application dependency injectors.</source>
          <target state="translated">アンNgModuleはでマークされたクラスである &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータ。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、コンポーネントのテンプレートをコンパイルする方法と実行時にインジェクターを作成する方法を記述するメタデータオブジェクトを取ります。モジュールの独自のコンポーネント、ディレクティブ、パイプを特定し、 &lt;code&gt;exports&lt;/code&gt; プロパティを介してそれらの一部を公開して、外部コンポーネントがそれらを使用できるようにします。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、サービスプロバイダーをアプリケーションの依存関係インジェクターに追加することもできます。</target>
        </trans-unit>
        <trans-unit id="0755b300d2bc07deab147985dc0808edcf9b55fc" translate="yes" xml:space="preserve">
          <source>An NgModule is defined by a class decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</source>
          <target state="translated">NgModuleは、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 装飾されたクラスによって定義されます。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; デコレータは特性モジュールを記述する単一のメタデータオブジェクトをとる関数です。最も重要なプロパティは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="eeae2a085063e0e52b29bf2aee06c172b48c61d8" translate="yes" xml:space="preserve">
          <source>An Observable that contains a map of the query parameters available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">すべてのルートで利用可能なクエリパラメータのマップを含む Observable。このマップは、クエリパラメータからの単一または複数の値の取得をサポートします。</target>
        </trans-unit>
        <trans-unit id="953a469034adc1d17c45b7ae97fc349098337f6a" translate="yes" xml:space="preserve">
          <source>An Observable that contains a map of the required and optional parameters specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">ルートに固有の必須およびオプションのパラメータのマップを含む Observable。このマップは、同じパラメータからの単一または複数の値の取得をサポートします。</target>
        </trans-unit>
        <trans-unit id="b8ab961cde1a70f46035707afbe89037b6b39bfd" translate="yes" xml:space="preserve">
          <source>An SVG snippet template needs an &lt;code&gt;svg:&lt;/code&gt; prefix on its root element to disambiguate the SVG element from an HTML component.</source>
          <target state="translated">SVGスニペットテンプレートでは、HTMLコンポーネントからSVG要素を明確にするために、ルート要素に &lt;code&gt;svg:&lt;/code&gt; プレフィックスが必要です。</target>
        </trans-unit>
        <trans-unit id="cd68f31ec23fc069bc97d065b7bda95baed68b56" translate="yes" xml:space="preserve">
          <source>An absolute URL. The function does not apply any delta to the current URL.</source>
          <target state="translated">絶対 URL。この関数は、現在の URL にデルタを適用しません。</target>
        </trans-unit>
        <trans-unit id="6a263e9eee9f25c9947b72eea9d3a402cdb8053a" translate="yes" xml:space="preserve">
          <source>An absolute path for a defined route. The function does not apply any delta to the current URL.</source>
          <target state="translated">定義されたルートの絶対パス。この関数は、現在の URL にデルタを適用しません。</target>
        </trans-unit>
        <trans-unit id="000c69911cb6c7d1b91ec58dcd30afe1c065b726" translate="yes" xml:space="preserve">
          <source>An abstract class for inserting the root test component element in a platform independent way.</source>
          <target state="translated">プラットフォームに依存しない方法でルートテストコンポーネント要素を挿入するための抽象クラスです。</target>
        </trans-unit>
        <trans-unit id="b4296fe66f2a24f1df22fa35742a65ee2ddbb569" translate="yes" xml:space="preserve">
          <source>An abstract class is usually a base class that you can extend. In this app, however there is no class that inherits from &lt;code&gt;MinimalLogger&lt;/code&gt;. The &lt;code&gt;LoggerService&lt;/code&gt; and the &lt;code&gt;DateLoggerService&lt;/code&gt; could have inherited from &lt;code&gt;MinimalLogger&lt;/code&gt;, or they could have implemented it instead, in the manner of an interface. But they did neither. &lt;code&gt;MinimalLogger&lt;/code&gt; is used only as a dependency injection token.</source>
          <target state="translated">抽象クラスは通常、拡張可能な基本クラスです。ただし、このアプリでは、 &lt;code&gt;MinimalLogger&lt;/code&gt; から継承するクラスはありません。 &lt;code&gt;LoggerService&lt;/code&gt; と &lt;code&gt;DateLoggerService&lt;/code&gt; は、から継承している可能性が &lt;code&gt;MinimalLogger&lt;/code&gt; 、またはそれらは界面の方法で、代わりにそれを実装している可能性があります。しかし、どちらもしませんでした。 &lt;code&gt;MinimalLogger&lt;/code&gt; は、依存性注入トークンとしてのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="e9ea8fa94bedea0363391bb71430a1a20bedce5c" translate="yes" xml:space="preserve">
          <source>An add schematic can also update a project with configuration changes, add additional dependencies (such as polyfills), or scaffold package-specific initialization code. For example, the &lt;code&gt;@angular/pwa&lt;/code&gt; schematic turns your application into a PWA by adding an app manifest and service worker, and the &lt;code&gt;@angular/elements&lt;/code&gt; schematic adds the &lt;code&gt;document-register-element.js&lt;/code&gt; polyfill and dependencies for Angular Elements.</source>
          <target state="translated">また、回路図を追加すると、構成の変更でプロジェクトを更新したり、追加の依存関係（ポリフィルなど）を追加したり、足場パッケージ固有の初期化コードを追加したりできます。たとえば、 &lt;code&gt;@angular/pwa&lt;/code&gt; 回路図は、アプリマニフェストとサービスワーカーを追加することでアプリケーションをPWAに変換し、 &lt;code&gt;@angular/elements&lt;/code&gt; 回路図は、Angular Elements の &lt;code&gt;document-register-element.js&lt;/code&gt; ポリフィルと依存関係を追加します。</target>
        </trans-unit>
        <trans-unit id="d13680ec950010fd10b49de481b4c84b7ce6a765" translate="yes" xml:space="preserve">
          <source>An add schematic is typically supplied with a library, so that the library can be added to an existing project with &lt;code&gt;ng add&lt;/code&gt;. The &lt;code&gt;add&lt;/code&gt; command uses your package manager to download new dependencies, and invokes an installation script that is implemented as a schematic.</source>
          <target state="translated">add回路図には通常ライブラリが付属しているため、 &lt;code&gt;ng add&lt;/code&gt; を使用してライブラリを既存のプロジェクトに追加できます。 &lt;code&gt;add&lt;/code&gt; コマンドは、新しい依存関係をダウンロードするには、あなたのパッケージマネージャを使用し、概略図として実装されているインストールスクリプトを起動します。</target>
        </trans-unit>
        <trans-unit id="24978e18969beb5970538c790506a8b202bafe4b" translate="yes" xml:space="preserve">
          <source>An address is a good example of information that can be grouped together. Form groups can accept both form control and form group instances as children. This makes composing complex form models easier to maintain and logically group together. To create a nested group in &lt;code&gt;profileForm&lt;/code&gt;, add a nested &lt;code&gt;address&lt;/code&gt; element to the form group instance.</source>
          <target state="translated">住所は、グループ化できる情報の良い例です。フォームグループは、フォームコントロールとフォームグループインスタンスの両方を子として受け入れることができます。これにより、複雑なフォームモデルの作成が容易になり、論理的にグループ化できます。 &lt;code&gt;profileForm&lt;/code&gt; にネストされたグループを作成するには、フォームグループインスタンスにネストされた &lt;code&gt;address&lt;/code&gt; 要素を追加します。</target>
        </trans-unit>
        <trans-unit id="fbe686fd3d18059b9a2de729a643f10662342143" translate="yes" xml:space="preserve">
          <source>An alert or callout &lt;em&gt;must not&lt;/em&gt; contain anything &lt;em&gt;essential&lt;/em&gt; to that understanding. Don't put a critical instruction or a tutorial step in a subsection.</source>
          <target state="translated">アラートまたはコールアウトは&lt;em&gt;してはならない&lt;/em&gt;ものを含んで&lt;em&gt;不可欠の&lt;/em&gt;ことを理解します。重要な指示やチュートリアルのステップをサブセクションに入れないでください。</target>
        </trans-unit>
        <trans-unit id="00c713d285573373b81643d5061ba989b838ab82" translate="yes" xml:space="preserve">
          <source>An alternative way, that only requires defining each custom element's type once, is augmenting the &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt;, which TypeScript uses to infer the type of a returned element based on its tag name (for DOM methods such as &lt;code&gt;document.createElement()&lt;/code&gt;, &lt;code&gt;document.querySelector()&lt;/code&gt;, etc.):</source>
          <target state="translated">別の方法として、各カスタム要素のタイプを1回定義するだけで済み、 &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt; を拡張します。これは、TypeScriptがタグ名に基づいて返された要素のタイプを推測するために使用し &lt;code&gt;document.createElement()&lt;/code&gt; などのDOMメソッドの場合）、 &lt;code&gt;document.querySelector()&lt;/code&gt; など）：</target>
        </trans-unit>
        <trans-unit id="74d83efe7c03fbe91b9f3bcaf5056860a5cc2f6b" translate="yes" xml:space="preserve">
          <source>An animation can influence an end user to &lt;em&gt;perceive&lt;/em&gt; the operation as faster, even when it isn't. Thus, a simple animation can be a cost-effective way to keep users happy, rather than seeking to improve the speed of a server call and having to compensate for circumstances beyond your control, such as an unreliable network connection.</source>
          <target state="translated">アニメーションは、そうでない場合でも、エンドユーザーが操作をより速く&lt;em&gt;感じるように&lt;/em&gt;影響を与える可能性があります。したがって、単純なアニメーションは、サーバー呼び出しの速度を向上させたり、信頼できないネットワーク接続などの制御できない状況を補う必要がなく、ユーザーを満足させるための費用対効果の高い方法です。</target>
        </trans-unit>
        <trans-unit id="f1a2cf38a615729fb3f11d85b93701a4402341a7" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 宣言の配列を含むアニメーション定義オブジェクト。</target>
        </trans-unit>
        <trans-unit id="153ea2d07efd5e1e6518224e5b06af7966325c2f" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 宣言の配列を含むアニメーション定義オブジェクト。</target>
        </trans-unit>
        <trans-unit id="853f9bcb68e4ea413401f09e0440f7461b8af150" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of state and transition declarations.</source>
          <target state="translated">状態宣言と遷移宣言の配列を含むアニメーション定義オブジェクト。</target>
        </trans-unit>
        <trans-unit id="8a821ff6927c3292569d9090589163fc3c9aa6c9" translate="yes" xml:space="preserve">
          <source>An animation reference object.</source>
          <target state="translated">アニメーション参照オブジェクト。</target>
        </trans-unit>
        <trans-unit id="2cf8c3e888172d6c728a4c7f3a60383d2c87ff99" translate="yes" xml:space="preserve">
          <source>An animation requires a &lt;em&gt;trigger&lt;/em&gt;, so that it knows when to start. The &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function collects the states and transitions, and gives the animation a name, so that you can attach it to the triggering element in the HTML template.</source>
          <target state="translated">アニメーションは&lt;em&gt;トリガーを&lt;/em&gt;必要とするため、いつ開始するかがわかります。 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数は、状態と遷移を収集し、あなたがHTMLテンプレートでトリガー要素にアタッチすることができるように、アニメーションに名前を与えます。</target>
        </trans-unit>
        <trans-unit id="3e5d760f7a3bae69c188904174ade8019ac8edb4" translate="yes" xml:space="preserve">
          <source>An app can send PUT requests using the HTTP client service. The following &lt;code&gt;HeroesService&lt;/code&gt; example, like the POST example, replaces a resource with updated data.</source>
          <target state="translated">アプリは、HTTPクライアントサービスを使用してPUTリクエストを送信できます。次の &lt;code&gt;HeroesService&lt;/code&gt; の例は、POSTの例と同様に、リソースを更新されたデータに置き換えます。</target>
        </trans-unit>
        <trans-unit id="4a41ec5f95a446f50fb15cf0bd8ce27c67f0eb3d" translate="yes" xml:space="preserve">
          <source>An app should give the user useful feedback when data access fails. A raw error object is not particularly useful as feedback. In addition to detecting that an error has occurred, you need to get error details and use those details to compose a user-friendly response.</source>
          <target state="translated">アプリは、データ アクセスに失敗したときにユーザーに有用なフィードバックを与える必要があります。生のエラーオブジェクトは、フィードバックとして特に有用ではありません。エラーが発生したことを検出することに加えて、エラーの詳細を取得し、それらの詳細を使用してユーザーフレンドリーな応答を構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="f31a2cd8172701f8176647e6f4deca92daaccebe" translate="yes" xml:space="preserve">
          <source>An app will send a PUT request to completely replace a resource with updated data. The following &lt;code&gt;HeroesService&lt;/code&gt; example is just like the POST example.</source>
          <target state="translated">アプリはPUTリクエストを送信して、リソースを更新されたデータで完全に置き換えます。次の &lt;code&gt;HeroesService&lt;/code&gt; の例は、POSTの例と同じです。</target>
        </trans-unit>
        <trans-unit id="08d1f63a5c6d8dd57d9894f60a7bfc80b1a4e371" translate="yes" xml:space="preserve">
          <source>An app's components typically define many views, arranged hierarchically. Angular provides the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to help you define navigation paths among views. The router provides sophisticated in-browser navigational capabilities.</source>
          <target state="translated">アプリのコンポーネントは通常、階層的に配置された多くのビューを定義します。Angularは、ビュー間のナビゲーションパスを定義するのに役立つ &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを提供します。ルーターは、高度なブラウザー内ナビゲーション機能を提供します。</target>
        </trans-unit>
        <trans-unit id="ab7bcd611c180d61f273bc0f9ef27d36dfdab3b1" translate="yes" xml:space="preserve">
          <source>An application can subscribe to &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; observable to be notified when a user clicks on a notification. For example:</source>
          <target state="translated">アプリケーションは、ユーザーが通知をクリックしたときに通知される &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; オブザーバブルをサブスクライブできます。例えば：</target>
        </trans-unit>
        <trans-unit id="c9718459a067afc4d9d2901e781c24a2a67e4039" translate="yes" xml:space="preserve">
          <source>An array entry for the &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;scripts&lt;/code&gt; options can be a simple path string, or an object that points to an extra entry-point file. The associated builder will load that file and its dependencies as a separate bundle during the build. With a configuration object, you have the option of naming the bundle for the entry point, using a &lt;code&gt;bundleName&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; および &lt;code&gt;scripts&lt;/code&gt; オプションの配列エントリは、単純なパス文字列、または追加のエントリポイントファイルを指すオブジェクトにすることができます。関連するビルダーは、ビルド中にそのファイルとその依存関係を個別のバンドルとしてロードします。設定オブジェクトでは、 &lt;code&gt;bundleName&lt;/code&gt; フィールドを使用して、エントリポイントのバンドルに名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="f6e77b0b12875d380070bf15ea40936f15a6e856" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that define the navigation paths for the application.</source>
          <target state="translated">アプリケーションのナビゲーションパスを定義する &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="2e17973e3b986f0fe51b0b29e8a8a3054aac454f" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that define the navigation paths for the submodule.</source>
          <target state="translated">サブモジュールのナビゲーションパスを定義する &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="78fd4b888290426cb729569fbcc07df27c92b26d" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate a child of the component. By default, any user can activate a child.</source>
          <target state="translated">現在のユーザーがコンポーネントの子をアクティブ化できるかどうかを判断するために &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用されるDIトークンの配列。デフォルトでは、すべてのユーザーが子をアクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="6ebf193ce1e81f1e29cdfa0592849a6727b6a98e" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to deactivate the component. By default, any user can deactivate.</source>
          <target state="translated">現在のユーザーがコンポーネントを非アクティブ化できるかどうかを判断するために、 &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用されるDIトークンの配列。デフォルトでは、すべてのユーザーが非アクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="e9ac0547b9e7d50ef7867b566a6ff6650ca3ea97" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to load the component. By default, any user can load.</source>
          <target state="translated">現在のユーザーがコンポーネントの読み込みを許可されているかどうかを判断するために、 &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用されるDIトークンの配列。デフォルトでは、すべてのユーザーがロードできます。</target>
        </trans-unit>
        <trans-unit id="873e546e1ac7df5612119d4e3ff6a29525ac34b9" translate="yes" xml:space="preserve">
          <source>An array of URL fragments with which to construct the new URL tree. If the path is static, can be the literal URL string. For a dynamic path, pass an array of path segments, followed by the parameters for each segment. The fragments are applied to the current URL tree or the one provided in the &lt;code&gt;relativeTo&lt;/code&gt; property of the options object, if supplied.</source>
          <target state="translated">新しいURLツリーを構築するためのURLフラグメントの配列。パスが静的である場合は、リテラルURL文字列にすることができます。動的パスの場合は、パスセグメントの配列を渡し、その後に各セグメントのパラメーターを渡します。フラグメントは、現在のURLツリー、またはオプションオブジェクトの &lt;code&gt;relativeTo&lt;/code&gt; プロパティで提供されているもの（指定されている場合）に適用されます。</target>
        </trans-unit>
        <trans-unit id="2940985d03565202a55d6a104daa669ec05d29b3" translate="yes" xml:space="preserve">
          <source>An array of URL fragments with which to construct the target URL. If the path is static, can be the literal URL string. For a dynamic path, pass an array of path segments, followed by the parameters for each segment. The fragments are applied to the current URL or the one provided in the &lt;code&gt;relativeTo&lt;/code&gt; property of the options object, if supplied.</source>
          <target state="translated">ターゲットURLを構築するためのURLフラグメントの配列。パスが静的である場合は、リテラルURL文字列にすることができます。動的パスの場合は、パスセグメントの配列を渡し、その後に各セグメントのパラメーターを渡します。フラグメントは、現在のURL、またはオプションオブジェクトの &lt;code&gt;relativeTo&lt;/code&gt; プロパティで提供されているURL（指定されている場合）に適用されます。</target>
        </trans-unit>
        <trans-unit id="ae39554eae86a4d64a9fdb529096eb2b79364390" translate="yes" xml:space="preserve">
          <source>An array of animation step objects.</source>
          <target state="translated">アニメーションステップオブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="f99aba27ddb3e9a1611aa598c8ceb36b851409de" translate="yes" xml:space="preserve">
          <source>An array of animation styles.</source>
          <target state="translated">アニメーションスタイルの配列。</target>
        </trans-unit>
        <trans-unit id="938fa39e1f51c4ab052524820d5860359507a2f0" translate="yes" xml:space="preserve">
          <source>An array of child &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that specifies a nested route configuration.</source>
          <target state="translated">ネストされたルート設定を指定する子 &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="0edd9ac18793ee073ea3aabdfbcfff60f42d2100" translate="yes" xml:space="preserve">
          <source>An array of child controls or control configs. Each child control is given an index when it is registered.</source>
          <target state="translated">子コントロールまたはコントロール設定の配列。各子コントロールには、登録時にインデックスが与えられます。</target>
        </trans-unit>
        <trans-unit id="b26827b9a483db95d70a5b32edec9f7eeb17162f" translate="yes" xml:space="preserve">
          <source>An array of child controls. Each child control is given an index where it is registered.</source>
          <target state="translated">子コントロールの配列。各子コントロールには、登録されているインデックスが与えられます。</target>
        </trans-unit>
        <trans-unit id="9b54d3fb3ef2c358aeb1752efb0ed3c0fabe3497" translate="yes" xml:space="preserve">
          <source>An array of commands to apply.</source>
          <target state="translated">適用するコマンドの配列。</target>
        </trans-unit>
        <trans-unit id="2152bc4eb46fc4163f9c3942dc1535de09a80686" translate="yes" xml:space="preserve">
          <source>An array of dependency-injection tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate the component. By default, any user can activate.</source>
          <target state="translated">現在のユーザーがコンポーネントのアクティブ化を許可されているかどうかを判断するために、 &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用される依存性注入トークンの配列。デフォルトでは、すべてのユーザーがアクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="5e3b57d965761f24eeb916e84feb687611633061" translate="yes" xml:space="preserve">
          <source>An array of directives imported from another module. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt; because the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; already declares it.</source>
          <target state="translated">別のモジュールからインポートされたディレクティブの配列。例えば、宣言していません &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; から &lt;code&gt;@angular/forms&lt;/code&gt; ので &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; はすでにそれを宣言する。</target>
        </trans-unit>
        <trans-unit id="2e01570e046471a7a45896ef34ac7217adb7671c" translate="yes" xml:space="preserve">
          <source>An array of directives imported from another package. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt;</source>
          <target state="translated">別のパッケージからインポートされたディレクティブの配列。たとえば、 &lt;code&gt;@angular/forms&lt;/code&gt; から &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; を宣言しないでください。</target>
        </trans-unit>
        <trans-unit id="c9951be90f174b4103642b20c910d1924c5c6d73" translate="yes" xml:space="preserve">
          <source>An array of key-value style pairs.</source>
          <target state="translated">キーと値のスタイルペアの配列。</target>
        </trans-unit>
        <trans-unit id="66295ef82d2f1ab3bcf346f0fcb4e92b84d95dcc" translate="yes" xml:space="preserve">
          <source>An array of observed attribute names for the custom element, derived by transforming input property names from the source component.</source>
          <target state="translated">ソース・コンポーネントから入力プロパティ名を変換して得られる、カスタム要素の観測された属性名の配列。</target>
        </trans-unit>
        <trans-unit id="7afefdc87251682711b749d3eb9ba8e9cbe0656a" translate="yes" xml:space="preserve">
          <source>An array of string control names, e.g. &lt;code&gt;['address', 'street']&lt;/code&gt;</source>
          <target state="translated">文字列コントロール名の配列。例： &lt;code&gt;['address', 'street']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b76cbac2f90bdb301d7a2818c80e539a3c7976c" translate="yes" xml:space="preserve">
          <source>An array of style files to add to the global context of the project. Angular CLI supports CSS imports and all major CSS preprocessors: &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass/scss&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;, and &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">プロジェクトのグローバルコンテキストに追加するスタイルファイルの配列。Angular CLIは、CSSインポートとすべての主要なCSSプリプロセッサ（&lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass / scss&lt;/a&gt;、&lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;、および&lt;a href=&quot;http://stylus-lang.com/&quot;&gt;スタイラス）を&lt;/a&gt;サポートしています。詳しくは、以下の&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;スタイルとスクリプトの設定を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a33987e88de67a1793f7544151a198f4f03c2e0d" translate="yes" xml:space="preserve">
          <source>An array of tag definitions to match or create.</source>
          <target state="translated">一致または作成するタグ定義の配列。</target>
        </trans-unit>
        <trans-unit id="e27d63f99fc67d312604ea9ee9c6b65762ab5602" translate="yes" xml:space="preserve">
          <source>An array that the router interprets as a routing instruction. You can bind that array to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; or pass the array as an argument to the &lt;code&gt;Router.navigate&lt;/code&gt; method.</source>
          <target state="translated">ルーターがルーティング命令として解釈する配列。その配列を &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; にバインドするか、配列を引数として &lt;code&gt;Router.navigate&lt;/code&gt; メソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="861576caffeca135d6970293ddc50aeae0da4952" translate="yes" xml:space="preserve">
          <source>An asterisk (*), to use auto-styling, where styles are derived from the element being animated and applied to the animation when it starts.</source>
          <target state="translated">アスタリスク (*)は、自動スタイリングを使用するためのもので、アニメーションが開始されたときにアニメーションの要素からスタイルが派生して適用されます。</target>
        </trans-unit>
        <trans-unit id="85c093ac8ffcfa867935ecc8abfeb1ece5cb34f9" translate="yes" xml:space="preserve">
          <source>An asterisk &lt;code&gt;*&lt;/code&gt; or &lt;em&gt;wildcard&lt;/em&gt; matches any animation state. This is useful for defining transitions that apply regardless of the HTML element's start or end state.</source>
          <target state="translated">アスタリスク &lt;code&gt;*&lt;/code&gt; または&lt;em&gt;ワイルドカードは&lt;/em&gt;、任意のアニメーション状態に一致します。これは、HTML要素の開始状態または終了状態に関係なく適用される遷移を定義するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d2c79a074e3226945b2f718538f0cac88a9d5cd4" translate="yes" xml:space="preserve">
          <source>An async &lt;code&gt;beforeEach()&lt;/code&gt; that compiles the components</source>
          <target state="translated">コンポーネントをコンパイルする非同期 &lt;code&gt;beforeEach()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b30c39a90b9eb055d07e0fe54a86ab3c86a6eda9" translate="yes" xml:space="preserve">
          <source>An attribute directive minimally requires building a controller class annotated with &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, which specifies the selector that identifies the attribute. The controller class implements the desired directive behavior.</source>
          <target state="translated">属性ディレクティブでは、属性を識別するセレクターを指定する &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; で注釈が付けられたコントローラークラスを構築する必要があります。コントローラクラスは、必要なディレクティブの動作を実装します。</target>
        </trans-unit>
        <trans-unit id="abe92ff3d2c0bf40f87b15fcf882a5d02f6a804f" translate="yes" xml:space="preserve">
          <source>An attribute directive that updates styles for the containing HTML element. Sets one or more style properties, specified as colon-separated key-value pairs. The key is a style name, with an optional &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; suffix (such as 'top.px', 'font-style.em'). The value is an expression to be evaluated. The resulting non-null value, expressed in the given unit, is assigned to the given style property. If the result of evaluation is null, the corresponding style is removed.</source>
          <target state="translated">含まれているHTML要素のスタイルを更新する属性ディレクティブ。コロンで区切られたキーと値のペアとして指定された、1つ以上のスタイルプロパティを設定します。キーはスタイル名で、オプションの &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; サフィックス（ 'top.px'、 'font-style.em'など）が付いています。値は評価される式です。結果のnull以外の値は、特定の単位で表され、特定のスタイルプロパティに割り当てられます。評価の結果がnullの場合、対応するスタイルは削除されます。</target>
        </trans-unit>
        <trans-unit id="00708a626fb7b0f03fc253c32c37767743db5166" translate="yes" xml:space="preserve">
          <source>An element property between enclosing square brackets identifies the target property. The target property in the following code is the image element's &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="translated">角括弧で囲まれた要素プロパティは、ターゲットプロパティを識別します。次のコードのターゲットプロパティは、image要素の &lt;code&gt;src&lt;/code&gt; プロパティです。</target>
        </trans-unit>
        <trans-unit id="9b24495f5005b7c33475d93c0b8c85637f99d1d3" translate="yes" xml:space="preserve">
          <source>An element that would be a shadow DOM host in native encapsulation has a generated &lt;code&gt;_nghost&lt;/code&gt; attribute. This is typically the case for component host elements.</source>
          <target state="translated">ネイティブカプセル化でシャドウDOMホストになる要素には、生成された &lt;code&gt;_nghost&lt;/code&gt; 属性があります。これは通常、コンポーネントのホスト要素の場合です。</target>
        </trans-unit>
        <trans-unit id="3f8c815124d91c2fc5997a18a121c1e43c5849b4" translate="yes" xml:space="preserve">
          <source>An element within a component's view has a &lt;code&gt;_ngcontent&lt;/code&gt; attribute that identifies to which host's emulated shadow DOM this element belongs.</source>
          <target state="translated">コンポーネントのビュー内の要素には、この要素が属するホストのエミュレートされたシャドウDOMを識別する &lt;code&gt;_ngcontent&lt;/code&gt; 属性があります。</target>
        </trans-unit>
        <trans-unit id="50e94825f745e933e83821947b32eef815608bd5" translate="yes" xml:space="preserve">
          <source>An empty programmatic controller for reusable animations. Used internally when animations are disabled, to avoid checking for the null case when an animation player is expected.</source>
          <target state="translated">再利用可能なアニメーション用の空のプログラマティックコントローラ。アニメーションが無効化されている場合に内部的に使用され、アニメーションプレイヤーが期待されている場合にヌルケースのチェックを回避します。</target>
        </trans-unit>
        <trans-unit id="ed30450a13cb9d35e8439583113edc0ba728506e" translate="yes" xml:space="preserve">
          <source>An encapsulation policy for the template and CSS styles. One of:</source>
          <target state="translated">テンプレートとCSSスタイルのカプセル化ポリシー。の一つ。</target>
        </trans-unit>
        <trans-unit id="c0d78d1758f0450a2a872695da025c9d5f74b2f8" translate="yes" xml:space="preserve">
          <source>An end-to-end (e2e) framework for Angular apps. Built on top of &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJS&lt;/a&gt;.</source>
          <target state="translated">Angularアプリのエンドツーエンド（e2e）フレームワーク。&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJSの&lt;/a&gt;上に構築されています。</target>
        </trans-unit>
        <trans-unit id="21691cd602a408abe7003eba565465e96100654c" translate="yes" xml:space="preserve">
          <source>An end-to-end test project (in the e2e subfolder).</source>
          <target state="translated">エンドツーエンドのテストプロジェクト(e2eサブフォルダ内)。</target>
        </trans-unit>
        <trans-unit id="af60cca801f9270a2ac760cef8104b5168df0bab" translate="yes" xml:space="preserve">
          <source>An entry component is any component that Angular loads &lt;em&gt;imperatively&lt;/em&gt; by type.</source>
          <target state="translated">エントリコンポーネントは、Angularがタイプ&lt;em&gt;ごとに強制的に&lt;/em&gt;ロードするコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="520ebcf19ed2e8582e1e23356f207f7c8557c18b" translate="yes" xml:space="preserve">
          <source>An entry component is any component that Angular loads imperatively, (which means you&amp;rsquo;re not referencing it in the template), by type. You specify an entry component by bootstrapping it in an NgModule, or including it in a routing definition.</source>
          <target state="translated">エントリコンポーネントは、Angularが型によって強制的にロードする（つまり、テンプレートで参照しない）コンポーネントです。エントリコンポーネントを指定するには、NgModuleでブートストラップするか、ルーティング定義に含めます。</target>
        </trans-unit>
        <trans-unit id="82270f943c0fc2fd25dd54fa68af7719850dddec" translate="yes" xml:space="preserve">
          <source>An event emitted when a new version of the app has been downloaded and activated.</source>
          <target state="translated">新しいバージョンのアプリがダウンロードされ、アクティベートされたときに発行されるイベントです。</target>
        </trans-unit>
        <trans-unit id="48d381a39eba1f1a2428a868079d462a7aeb50e8" translate="yes" xml:space="preserve">
          <source>An event emitted when a new version of the app is available.</source>
          <target state="translated">アプリの新しいバージョンが利用可能になったときに発行されるイベントです。</target>
        </trans-unit>
        <trans-unit id="d8b059555adbe8f67929f9bd713b460344b5c46d" translate="yes" xml:space="preserve">
          <source>An event emitted when the version of the app used by the service worker to serve this client is in a broken state that cannot be recovered from and a full page reload is required.</source>
          <target state="translated">このクライアントにサービスを提供するためにサービスワーカーが使用しているアプリのバージョンが、復旧できない壊れた状態にあり、全ページのリロードが必要な場合に発行されるイベントです。</target>
        </trans-unit>
        <trans-unit id="5f859b22e49aae9499ff79db84034121aa16f513" translate="yes" xml:space="preserve">
          <source>An event indicating that the request was sent to the server. Useful when a request may be retried multiple times, to distinguish between retries on the final event stream.</source>
          <target state="translated">リクエストがサーバーに送られたことを示すイベント。リクエストが複数回再試行される可能性がある場合に、最終的なイベントストリームでの再試行を区別するのに便利です。</target>
        </trans-unit>
        <trans-unit id="9f03c6d306c2112882c6a9ff7babb869d7b460be" translate="yes" xml:space="preserve">
          <source>An event stream for routing events in this NgModule.</source>
          <target state="translated">この NgModule のイベントをルーティングするためのイベントストリーム。</target>
        </trans-unit>
        <trans-unit id="3d7eb391832c5ed9e7dbb68d3c82c8ad415923bf" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the Guard phase of routing.</source>
          <target state="translated">ルーティングの Guard フェーズの終了時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="b5a43600d43e0d7f206b35a9f776d6d2f3d76290" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの Resolve フェーズの終了時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="fe8df6a007856d3efe69109b534e4f1717bb8417" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングのResolveフェーズのアクティブ化部分の終了時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="7c5dc3b5c6dd3914c069ea105811ad81563ab0a4" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの Resolve フェーズの子アクティブ化部分の終了時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="15f0a189e2487ac88e2d4db8817074ffbe2aa465" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the Guard phase of routing.</source>
          <target state="translated">ルーティングの Guard フェーズの開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="c5e5ee18107806be14081a1525e3498a3843b09e" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングのResolveフェーズのアクティブ化部分の開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="9ea7570ad5b425b7d9a9e4e2875bb8e236c63db8" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの Resolve フェーズの子アクティブ化部分の開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="8df532e1a0fd9fd1688012d2fd01b43742a57d58" translate="yes" xml:space="preserve">
          <source>An event triggered at the the start of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの Resolve フェーズの開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="253d4698f507f43fb4f138e171a5603c169e6b04" translate="yes" xml:space="preserve">
          <source>An event triggered before lazy loading a route configuration.</source>
          <target state="translated">ルート設定を遅延ロードする前にトリガされるイベント。</target>
        </trans-unit>
        <trans-unit id="76c49a5cb92ffd70c824965b9f42fd4ce45e7e75" translate="yes" xml:space="preserve">
          <source>An event triggered by scrolling.</source>
          <target state="translated">スクロールによって引き起こされるイベント。</target>
        </trans-unit>
        <trans-unit id="ce7314f14718cef6d4f51d25b4d25720245fbf87" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation ends successfully.</source>
          <target state="translated">ナビゲーションが正常に終了したときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="1ee0707fd824da0de403c96b737123ba95a464d8" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation fails due to an unexpected error.</source>
          <target state="translated">予期せぬエラーによりナビゲーションが失敗した場合に発生するイベント。</target>
        </trans-unit>
        <trans-unit id="4238fb65031dc9605ba87d9f0fff4bf6e9d4cbd3" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation is canceled, directly or indirectly.</source>
          <target state="translated">直接または間接的にナビゲーションがキャンセルされたときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="2e5ceb1b4c5d718acfff7e6d601ab5914f386423" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation is canceled, directly or indirectly. This can happen when a route guard returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ナビゲーションが直接的または間接的にキャンセルされたときにトリガーされるイベント。これは、ルートガードが &lt;code&gt;false&lt;/code&gt; を返すか、 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すことによってリダイレクトを開始した場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6e5df78c88138a26c79a71f34606ee06d8baf0fa" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation is canceled, directly or indirectly. This can happen when a route guard returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ナビゲーションが直接的または間接的にキャンセルされたときにトリガーされるイベント。これは、ルートガードが &lt;code&gt;false&lt;/code&gt; を返すか、 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すことによってリダイレクトを開始した場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="33bb43f2f8b4617aa8b509c9aa64c24d761d2224" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation starts.</source>
          <target state="translated">ナビゲーションの開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="22293e5381cfc4742bf52876ed6736a5a5826956" translate="yes" xml:space="preserve">
          <source>An event triggered when a route has been lazy loaded.</source>
          <target state="translated">ルートが遅延ロードされたときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="55363e49b885f6858dfa81382ac98d5cf71873c4" translate="yes" xml:space="preserve">
          <source>An event triggered when routes are recognized.</source>
          <target state="translated">ルートが認識されたときに発生するイベント。</target>
        </trans-unit>
        <trans-unit id="7e1901e8c0041a6d1ea4f1605828d40b98b1883e" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;MyCustomComponent&lt;/code&gt; class, which in JavaScript is be represented by the &lt;code&gt;MyCustomComponent&lt;/code&gt; constructor function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; の例は &lt;code&gt;MyCustomComponent&lt;/code&gt; クラスで、JavaScriptでは &lt;code&gt;MyCustomComponent&lt;/code&gt; コンストラクター関数によって表されます。</target>
        </trans-unit>
        <trans-unit id="af90c4ac17e3898273f1737d8b15998b17fd8b89" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;MyCustomComponent&lt;/code&gt; class, which in JavaScript is represented by the &lt;code&gt;MyCustomComponent&lt;/code&gt; constructor function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; の例は &lt;code&gt;MyCustomComponent&lt;/code&gt; クラスで、JavaScriptでは &lt;code&gt;MyCustomComponent&lt;/code&gt; コンストラクター関数で表されます。</target>
        </trans-unit>
        <trans-unit id="21d43a6950a7e56133de93d4c9f621a2861922c7" translate="yes" xml:space="preserve">
          <source>An example of producing side effects</source>
          <target state="translated">副作用を生み出す例</target>
        </trans-unit>
        <trans-unit id="1d5adc14822f75158d6c5cd26073d6f3aa532ea8" translate="yes" xml:space="preserve">
          <source>An example of what goes into a declarations array follows:</source>
          <target state="translated">宣言配列に入るものの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="aaac8a7d4859b53786074dfb913b0fcbffa894f9" translate="yes" xml:space="preserve">
          <source>An example that uses both</source>
          <target state="translated">両方を使用する例</target>
        </trans-unit>
        <trans-unit id="8f997a90370a05fd947363bc944f2091bb627c9b" translate="yes" xml:space="preserve">
          <source>An execution context for a set of asynchronous tasks. Useful for debugging, profiling, and testing apps that include asynchronous operations such as event processing, promises, and calls to remote servers.</source>
          <target state="translated">一連の非同期タスクの実行コンテキスト。イベント処理、プロミス、リモートサーバへの呼び出しなどの非同期操作を含むアプリのデバッグ、プロファイリング、テストに便利です。</target>
        </trans-unit>
        <trans-unit id="13b6181d7b35ce64a903a0013d72e45b403c9e64" translate="yes" xml:space="preserve">
          <source>An expression may also refer to properties of the &lt;em&gt;template's&lt;/em&gt; context such as a template input variable,</source>
          <target state="translated">式は、テンプレート入力変数など、&lt;em&gt;テンプレートの&lt;/em&gt;コンテキストのプロパティを参照する場合もあります。</target>
        </trans-unit>
        <trans-unit id="abc3de7d68044167c106cb4666b4476c9f78e7e9" translate="yes" xml:space="preserve">
          <source>An expression that describes a state change.</source>
          <target state="translated">状態の変化を表す表現。</target>
        </trans-unit>
        <trans-unit id="4e9dd8fe2f87c25f59015739842c4048179f4a27" translate="yes" xml:space="preserve">
          <source>An icon to use for this application in the bookmark bar.</source>
          <target state="translated">ブックマークバーでこのアプリケーションに使用するアイコンです。</target>
        </trans-unit>
        <trans-unit id="010b45774596984624a0a539cd324f8a04170e87" translate="yes" xml:space="preserve">
          <source>An identifying name for the new element, unique within the namespace.</source>
          <target state="translated">名前空間内で一意な、新しい要素の識別名。</target>
        </trans-unit>
        <trans-unit id="2f2a84b30278a5736d58839d9cbed284d382fee8" translate="yes" xml:space="preserve">
          <source>An identifying string.</source>
          <target state="translated">識別文字列。</target>
        </trans-unit>
        <trans-unit id="321ae4ea852d397f5e8c8c2ab74118963a1b5c2a" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;preload&lt;/code&gt; must return an &lt;code&gt;Observable&lt;/code&gt;. If the route does preload, it returns the observable returned by calling the loader function. If the route does not preload, it returns an &lt;code&gt;Observable&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preload&lt;/code&gt; の実装は、 &lt;code&gt;Observable&lt;/code&gt; を返す必要があります。ルートがプリロードする場合は、ローダー関数を呼び出して返されたオブザーバブルを返します。ルートがプリロードしない場合、 &lt;code&gt;null&lt;/code&gt; の &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f26b26e037d4dafb2598887c06f9e13ff1dada92" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;preload&lt;/code&gt; must return an &lt;code&gt;Observable&lt;/code&gt;. If the route should preload, it returns the observable returned by calling the loader function. If the route should &lt;em&gt;not&lt;/em&gt; preload, it returns an &lt;code&gt;Observable&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preload&lt;/code&gt; の実装は &lt;code&gt;Observable&lt;/code&gt; を返す必要があります。ルートがプリロードする必要がある場合、ローダー関数を呼び出して返されたオブザーバブルを返します。ルートがプリロードされるべきでは&lt;em&gt;ない&lt;/em&gt;場合、それは &lt;code&gt;null&lt;/code&gt; の &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="34f205e2b23ffe79df4ed0d6614e52beb270510e" translate="yes" xml:space="preserve">
          <source>An important alert.</source>
          <target state="translated">重要な警告だ</target>
        </trans-unit>
        <trans-unit id="7a0aa966364fd27e3f5561134e767a3d22292508" translate="yes" xml:space="preserve">
          <source>An important part of inter-linking dependencies is linking the two main modules together. This is where &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; comes in. Use it to create an AngularJS module&amp;mdash;one that you can use as a dependency in your main AngularJS module&amp;mdash;that will bootstrap your main Angular module and kick off the Angular part of the hybrid app. In a sense, it &quot;downgrades&quot; an Angular module to an AngularJS module.</source>
          <target state="translated">相互リンクの依存関係の重要な部分は、2つのメインモジュールをリンクすることです。これが &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; の出番です。これを使用して、AngularJSモジュール（メインのAngularJSモジュールの依存関係として使用できるモジュール）を作成します。これは、メインのAngularモジュールをブートストラップし、ハイブリッドアプリのAngular部分を開始します。ある意味では、AngularモジュールをAngularJSモジュールに「ダウングレード」します。</target>
        </trans-unit>
        <trans-unit id="ab48629b7689b97b24ca0b4882d2d3231b1a3b2b" translate="yes" xml:space="preserve">
          <source>An important point</source>
          <target state="translated">重要なポイント</target>
        </trans-unit>
        <trans-unit id="ed53c740060de1f8ed241d39eeda4823a21a4860" translate="yes" xml:space="preserve">
          <source>An impure</source>
          <target state="translated">不純な</target>
        </trans-unit>
        <trans-unit id="12aba83ea86ac796e838bb36582bc62046067932" translate="yes" xml:space="preserve">
          <source>An impure caching pipe</source>
          <target state="translated">不純なキャッシングパイプ</target>
        </trans-unit>
        <trans-unit id="1ea978cb2e1e36fb4a70cc831345c53ddda16051" translate="yes" xml:space="preserve">
          <source>An initial skeleton app project, also called &lt;code&gt;angular-tour-of-heroes&lt;/code&gt; (in the &lt;code&gt;src&lt;/code&gt; subfolder).</source>
          <target state="translated">&lt;code&gt;angular-tour-of-heroes&lt;/code&gt; （ &lt;code&gt;src&lt;/code&gt; サブフォルダー内）とも呼ばれる初期のスケルトンアプリプロジェクト。</target>
        </trans-unit>
        <trans-unit id="684d4fd3e575d1f3658b87fda7811795222f7d50" translate="yes" xml:space="preserve">
          <source>An injectable &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; for gesture recognition. Configures specific event recognition.</source>
          <target state="translated">ジェスチャー認識のための注射可能な&lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJSマネージャー&lt;/a&gt;。特定のイベント認識を構成します。</target>
        </trans-unit>
        <trans-unit id="166c0edb820e2bd83ea00440e06f5c76c5a42787" translate="yes" xml:space="preserve">
          <source>An injectable &lt;a href=&quot;https://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; for gesture recognition. Configures specific event recognition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57404a3f8f2b06b4a9a8d4c525e78bb9596739f" translate="yes" xml:space="preserve">
          <source>An injectable service for executing work inside or outside of the Angular zone.</source>
          <target state="translated">Angularゾーンの内外で作業を実行するためのインジェクト可能なサービス。</target>
        </trans-unit>
        <trans-unit id="14d3b55eeed336a9ad62e5019f3e2718f4231406" translate="yes" xml:space="preserve">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントまたはディレクティブ内でプログラムによってアニメーションシーケンスを生成する注入可能なサービス。 &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; によって提供されます。</target>
        </trans-unit>
        <trans-unit id="0cc6e94c0fa46ea1d4f9498c818950af4fca8285" translate="yes" xml:space="preserve">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントまたはディレクティブ内でプログラムによってアニメーションシーケンスを生成する注入可能なサービス。 &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; によって提供されます。</target>
        </trans-unit>
        <trans-unit id="36689b6e9bdc70cc4224cf76d38b74712cd514ab" translate="yes" xml:space="preserve">
          <source>An injectable service that provides event management for Angular through a browser plug-in.</source>
          <target state="translated">ブラウザのプラグインでAngularのイベント管理を提供するインジェクト可能なサービスです。</target>
        </trans-unit>
        <trans-unit id="77754ebc786ee25c6412a201040016a7021c3eb2" translate="yes" xml:space="preserve">
          <source>An injectable service that provides factory methods for creating control instances.</source>
          <target state="translated">コントロールインスタンスを作成するためのファクトリーメソッドを提供するインジェクト可能なサービス。</target>
        </trans-unit>
        <trans-unit id="b6db0da0e2ea0ddb022d862a7cffe1db1b964118" translate="yes" xml:space="preserve">
          <source>An injection token. (Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;).</source>
          <target state="translated">注入トークン。（通常は &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; のインスタンスですが、 &lt;code&gt;any&lt;/code&gt; することができます）。</target>
        </trans-unit>
        <trans-unit id="c26157bc44c92eb491ad786930dfb1f795c4cbb9" translate="yes" xml:space="preserve">
          <source>An injection token. Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">注入トークン。通常は &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; のインスタンスですが、 &lt;code&gt;any&lt;/code&gt; インスタンスでもかまいません。</target>
        </trans-unit>
        <trans-unit id="652138f88939ea014fbae7aa304e8948053f1891" translate="yes" xml:space="preserve">
          <source>An injector creates dependencies, and maintains a &lt;em&gt;container&lt;/em&gt; of dependency instances that it reuses if possible.</source>
          <target state="translated">インジェクターは依存関係を作成し、可能であれば再利用する依存関係インスタンスの&lt;em&gt;コンテナー&lt;/em&gt;を維持します。</target>
        </trans-unit>
        <trans-unit id="9e27f51512e0a5635f6bf58fdb2c50c6038e307e" translate="yes" xml:space="preserve">
          <source>An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.</source>
          <target state="translated">インジェクターは依存関係のシングルトンインスタンスを提供し、この同じインスタンスを複数のコンポーネントに注入することができます。</target>
        </trans-unit>
        <trans-unit id="cb056887b035ea4cad1a0a3629cae07df2758572" translate="yes" xml:space="preserve">
          <source>An inline template for an Angular component. If provided, do not supply a template file using &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントのインラインテンプレート。提供されている場合、templateUrlを使用してテンプレートファイルを提供しないで &lt;code&gt;templateUrl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7117a4f34cbbcdc94a365e8e29ebcb260dbafc7" translate="yes" xml:space="preserve">
          <source>An inner template can access template variables that the outer template defines.</source>
          <target state="translated">内部テンプレートは、外部テンプレートが定義するテンプレート変数にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="12722bfa1da4de0ba2c43d261a9de445ffeefb87" translate="yes" xml:space="preserve">
          <source>An instance of this class is returned as an event parameter when an animation callback is captured for an animation either during the start or done phase.</source>
          <target state="translated">このクラスのインスタンスは、アニメーションの開始フェーズまたは終了フェーズの間にアニメーションのコールバックがキャプチャされたときに、イベントパラメータとして返されます。</target>
        </trans-unit>
        <trans-unit id="816e6be2b2fa74b464d5b2a881dae8af20cb83e3" translate="yes" xml:space="preserve">
          <source>An interceptor that alters headers can be used for a number of different operations, including:</source>
          <target state="translated">ヘッダーを変更するインターセプターは、以下のような多くの異なる操作に使用することができます。</target>
        </trans-unit>
        <trans-unit id="9146ec3aa23e8cf25a3395bbb20839d604c7a736" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to check if the lazy loaded module should be loaded. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">遅延ロードされたモジュールがロードされるかどうかをチェックするために ルータが最初にコールすべきクラスを定義するためのインターフェイスです。boolean|UrlTree または boolean|UrlTree に解決する Observable/Promise を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="6a938b52cef6ce82227e8252bf81a0112ba711aa" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should activate the child route. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">ルータが子ルートを有効にするかどうかを判断するために 最初に呼び出すクラスを定義するためのインターフェイスです。boolean|UrlTree あるいは boolean|UrlTree に解決する Observable/Promise を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="000a11bfba255074626058505b1d21f8b78bbe21" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should activate this component. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">ルータがこのコンポーネントをアクティブにするかどうかを判断するために 最初にコールすべきクラスを定義するためのインターフェイスです。boolean|UrlTree あるいは boolean|UrlTree に解決する Observable/Promise を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="b4e8a5b77f471bb6811774face810e9cbf43b14d" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should deactivate this component after a navigation. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">ルータがナビゲーションの後にこのコンポーネントを無効にするかどうかを判断するために 最初に呼び出すクラスを定義するためのインターフェイスです。boolean|UrlTree または boolean|UrlTree に解決する Observable/Promise を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3e995f1eb4c099a6b16ff48012d56d513be3a14a" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</source>
          <target state="translated">ルータがルートをレンダリングする前にルートデータを解決するために最初に呼び出すクラスを定義するためのインターフェイス。値を返すか、値に解決する Observable/Promise を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="82597c22511f52de70969beecef4f3b3898eaa24" translate="yes" xml:space="preserve">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブによって実装されるインターフェース。</target>
        </trans-unit>
        <trans-unit id="1a14f9da95e6f6ff982b6626eb7c8628c5efdd37" translate="yes" xml:space="preserve">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブによって実装されるインターフェース。</target>
        </trans-unit>
        <trans-unit id="8335c6297a5a6cba86cf2d3d45984a8f36d407fb" translate="yes" xml:space="preserve">
          <source>An interface implemented by all Angular type decorators, which allows them to be used as decorators as well as Angular syntax.</source>
          <target state="translated">すべてのAngular型デコレータによって実装されているインターフェイスで、Angularの構文と同様にデコレータとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="3251b8b344b69e19ad57135081e0c24c46b50288" translate="yes" xml:space="preserve">
          <source>An interface implemented by classes that perform asynchronous validation.</source>
          <target state="translated">非同期検証を行うクラスによって実装されるインターフェイス。</target>
        </trans-unit>
        <trans-unit id="245737c8ad1fc4ff34dc1309e4af6d2a74cb1268" translate="yes" xml:space="preserve">
          <source>An interface implemented by classes that perform synchronous validation.</source>
          <target state="translated">同期検証を行うクラスによって実装されるインターフェイス。</target>
        </trans-unit>
        <trans-unit id="3553332395db0f3216b86aa5d6d3855e57638927" translate="yes" xml:space="preserve">
          <source>An interface that a function passed into &lt;a href=&quot;core/forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">&lt;a href=&quot;core/forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; に&lt;/a&gt;渡された関数が実装する必要のあるインターフェース。</target>
        </trans-unit>
        <trans-unit id="27ca29f9f070d1b99e4a907d433e49c3c9473f07" translate="yes" xml:space="preserve">
          <source>An interface that a function passed into &lt;a href=&quot;forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">&lt;a href=&quot;forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; に&lt;/a&gt;渡された関数が実装する必要のあるインターフェース。</target>
        </trans-unit>
        <trans-unit id="bbe82c81f390998fc2ac12e6a34f4c68ebf29846" translate="yes" xml:space="preserve">
          <source>An interface that allows you to tap into the lifecycle of &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt; and &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt; as they are created, updated, and destroyed.</source>
          <target state="translated">&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;および&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;が作成、更新、および破棄されるときに、それらのライフサイクルを利用できるようにするインターフェース。</target>
        </trans-unit>
        <trans-unit id="d84af51a9faa209f199da3634be1aa93a907fb58" translate="yes" xml:space="preserve">
          <source>An interface that is implemented by pipes in order to perform a transformation. Angular invokes the &lt;code&gt;transform&lt;/code&gt; method with the value of a binding as the first argument, and any parameters as the second argument in list form.</source>
          <target state="translated">変換を実行するためにパイプによって実装されるインターフェース。Angularは、リスト形式で最初の引数としてバインディングの値を、2番目の引数としてパラメータを使用して、 &lt;code&gt;transform&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="c36481e852a7d993e92e4ce11d6b4beef0f3fdd1" translate="yes" xml:space="preserve">
          <source>An internal callback method triggered before the instance is destroyed. Removes the group from its parent group.</source>
          <target state="translated">インスタンスが破棄される前にトリガーされる内部コールバック メソッド。親グループからグループを削除します。</target>
        </trans-unit>
        <trans-unit id="b7240884a65be7f42acffdd93220a4238efbb924" translate="yes" xml:space="preserve">
          <source>An internal callback method triggered on the instance after the inputs are set. Registers the group with its parent group.</source>
          <target state="translated">入力が設定された後にインスタンス上でトリガされる内部コールバックメソッド。グループを親グループに登録します。</target>
        </trans-unit>
        <trans-unit id="459b33ae0fa271dad1c7cca97ee631d68755d38d" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; によって使用される &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の内部的に解決された表現。</target>
        </trans-unit>
        <trans-unit id="1d15a7d32fabd101f937535387a49e1f6c6b6998" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; によって使用される &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の内部的に解決された表現。</target>
        </trans-unit>
        <trans-unit id="65e2c36a1d8f607a0d4bae22e070ff4a3a76b579" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; を解決することによって作成されたファクトリ関数の内部的に解決された表現。</target>
        </trans-unit>
        <trans-unit id="46810c6b6144599b1f85ccf176d9da78c21a7d6f" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; を解決することによって作成されたファクトリ関数の内部的に解決された表現。</target>
        </trans-unit>
        <trans-unit id="fc05d68b0ca26dd2f9ba579fc3670a3efd223e13" translate="yes" xml:space="preserve">
          <source>An introduction to a few core router concepts will help orient you to the details that follow.</source>
          <target state="translated">いくつかのコアルータの概念を紹介することで、それに続く詳細にあなたを方向付けるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c5fc8580ca92e73035b10dc5866e8d34b5b6db8c" translate="yes" xml:space="preserve">
          <source>An object containing JavaScript script files to add to the global context of the project. The scripts are loaded exactly as if you had added them in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside &lt;code&gt;index.html&lt;/code&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">プロジェクトのグローバルコンテキストに追加するJavaScriptスクリプトファイルを含むオブジェクト。スクリプトは、 &lt;code&gt;index.html&lt;/code&gt; 内の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグに追加した場合とまったく同じようにロードされます。詳しくは、以下の&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;スタイルとスクリプトの設定を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="0798b0518cd85723d5bc73026ce32f7acc7ee37e" translate="yes" xml:space="preserve">
          <source>An object containing an identifier for the app to transition. The ID must match between the client and server versions of the app.</source>
          <target state="translated">移行するアプリの識別子を含むオブジェクトです。IDは、アプリのクライアント版とサーバー版の間で一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="34a705cd2ace4927bf00eb0c703ea16e82b4ece4" translate="yes" xml:space="preserve">
          <source>An object containing any errors generated by failing validation, or null if there are no errors.</source>
          <target state="translated">検証に失敗したことで発生したエラーを含むオブジェクト、またはエラーがない場合はNULL。</target>
        </trans-unit>
        <trans-unit id="c8e4c11b42659fb04de7da11d6fd9484b2d147cb" translate="yes" xml:space="preserve">
          <source>An object containing files and their compile-time replacements. See more in &lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;Configure target-specific file replacements&lt;/a&gt;.</source>
          <target state="translated">ファイルとそのコンパイル時の置換を含むオブジェクト。詳しくは、&lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;ターゲット固有のファイル置換の構成を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="dc0d6006c1674c97b20fc570175b89cf3a3b1ef7" translate="yes" xml:space="preserve">
          <source>An object containing option-value pairs to pass to style preprocessors. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">スタイルプリプロセッサに渡すオプションと値のペアを含むオブジェクト。詳しくは、以下の&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;スタイルとスクリプトの設定を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="8b744df23ce437f3884fe3ab329fc10884f3b60c" translate="yes" xml:space="preserve">
          <source>An object containing paths to static assets to add to the global context of the project. The default paths point to the project's icon file and its &lt;code&gt;assets&lt;/code&gt; folder. See more in &lt;a href=&quot;workspace-config#asset-config&quot;&gt;Assets configuration&lt;/a&gt; below.</source>
          <target state="translated">プロジェクトのグローバルコンテキストに追加する静的アセットへのパスを含むオブジェクト。デフォルトのパスは、プロジェクトのアイコンファイルとその &lt;code&gt;assets&lt;/code&gt; フォルダーを指します。詳しくは、以下の&lt;a href=&quot;workspace-config#asset-config&quot;&gt;アセット構成を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c1e5ceffe1e3f920b94a5c9ee9b8bf7c6e2c0d19" translate="yes" xml:space="preserve">
          <source>An object containing properties that modify the navigation strategy.</source>
          <target state="translated">ナビゲーション戦略を変更するプロパティを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="454bf511ebc9e0613519ea5b260dc6ce1bee629f" translate="yes" xml:space="preserve">
          <source>An object containing properties that modify the navigation strategy. The function ignores any properties in the &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; that would change the provided URL.</source>
          <target state="translated">ナビゲーション戦略を変更するプロパティを含むオブジェクト。この関数は、提供されたURLを変更する &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; のプロパティを無視します。</target>
        </trans-unit>
        <trans-unit id="6f909378a9aeab923299b7bb339184fd3aef25aa" translate="yes" xml:space="preserve">
          <source>An object containing the &lt;code&gt;serverPublicKey&lt;/code&gt; string.</source>
          <target state="translated">&lt;code&gt;serverPublicKey&lt;/code&gt; 文字列を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5f857b8189df6a05941e1ba626bb7cbf578f2264" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">前回 &lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）が呼び出されてからの &lt;code&gt;Iterable&lt;/code&gt; コレクションの変更を説明するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8c315ec84a38122ef7c3d9a113c4504cd2522faa" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">前回 &lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）が呼び出されてからの &lt;code&gt;Iterable&lt;/code&gt; コレクションの変更を説明するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5a1b257dd7d2442d3adda69d2fa3d7cdd2995179" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">前回 &lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）が呼び出されてからの &lt;code&gt;Map&lt;/code&gt; または &lt;code&gt;{[k:string]: string}&lt;/code&gt; の変更を説明するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6ac36e997ec5fd21bda35b2901d01da4f1df4548" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">前回 &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）が呼び出されてからの &lt;code&gt;Map&lt;/code&gt; または &lt;code&gt;{[k:string]: string}&lt;/code&gt; の変更を説明するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="0f356d25ccaadcbb052958e84e4c538216b2666e" translate="yes" xml:space="preserve">
          <source>An object in the Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;dependency-injection&lt;/a&gt; system that can find a named dependency in its cache or create a dependency using a configured &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;. Injectors are created for NgModules automatically as part of the bootstrap process and are inherited through the component hierarchy.</source>
          <target state="translated">キャッシュ内の名前付き依存関係を検索したり、構成された&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;を使用して依存関係を作成したりできる、Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;依存関係注入&lt;/a&gt;システム内のオブジェクト。インジェクターは、ブートストラッププロセスの一部としてNgModuleに対して自動的に作成され、コンポーネント階層を介して継承されます。</target>
        </trans-unit>
        <trans-unit id="cc3b15aff9557888b414af3f20c881c83fc21164" translate="yes" xml:space="preserve">
          <source>An object of configuration options</source>
          <target state="translated">設定オプションのオブジェクト</target>
        </trans-unit>
        <trans-unit id="55a40c09435669e6d09baa4867c14de1eba936e3" translate="yes" xml:space="preserve">
          <source>An object passed to the &lt;code&gt;subscribe()&lt;/code&gt; method for an &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt;. The object defines the callbacks for the &lt;a href=&quot;glossary#subscriber&quot;&gt;subscriber&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#observable&quot;&gt;オブザーバブルの&lt;/a&gt; &lt;code&gt;subscribe()&lt;/code&gt; メソッドに渡されるオブジェクト。オブジェクトは、&lt;a href=&quot;glossary#subscriber&quot;&gt;サブスクライバ&lt;/a&gt;のコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="38838b7add8c95848485a408672d3653e1be9aa8" translate="yes" xml:space="preserve">
          <source>An object specifying lazy-loaded child routes.</source>
          <target state="translated">遅延ロードされた子ルートを指定するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="91849ac8b00c354cb7ee440dea61bd355a282235" translate="yes" xml:space="preserve">
          <source>An object that can specify either or both cookie name or header name.</source>
          <target state="translated">クッキー名またはヘッダー名のどちらか、または両方を指定できるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e59674c185a2660e9ab9f2a6044d9674f4444c9e" translate="yes" xml:space="preserve">
          <source>An object that implements one of the &lt;a href=&quot;../api/core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt; interfaces. A provider object defines how to obtain an injectable dependency associated with a &lt;a href=&quot;glossary#token&quot;&gt;DI token&lt;/a&gt;. An &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; uses the provider to create a new instance of a dependency for a class that requires it.</source>
          <target state="translated">&lt;a href=&quot;../api/core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;インターフェイスの1つを実装するオブジェクト。プロバイダーオブジェクトは、&lt;a href=&quot;glossary#token&quot;&gt;DIトークンに&lt;/a&gt;関連付けられた注入可能な依存関係を取得する方法を定義します。&lt;a href=&quot;glossary#injector&quot;&gt;インジェクタは&lt;/a&gt;、それを必要とするクラスの依存関係の新しいインスタンスを作成するには、プロバイダを使用しています。</target>
        </trans-unit>
        <trans-unit id="882038f9e81095e5a1e8b2e8ac4378d8a2d5727e" translate="yes" xml:space="preserve">
          <source>An object that provides parent context for this element. Often an ancestor component instance that governs this element.</source>
          <target state="translated">この要素の親コンテキストを提供するオブジェクト。多くの場合、この要素を支配する祖先コンポーネントのインスタンス。</target>
        </trans-unit>
        <trans-unit id="c4b1689270e4d44ba822baf6c09fa4f36f7e04ec" translate="yes" xml:space="preserve">
          <source>An observable can deliver multiple values of any type&amp;mdash;literals, messages, or events, depending on the context. The API for receiving values is the same whether the values are delivered synchronously or asynchronously. Because setup and teardown logic are both handled by the observable, your application code only needs to worry about subscribing to consume values, and when done, unsubscribing. Whether the stream was keystrokes, an HTTP response, or an interval timer, the interface for listening to values and stopping listening is the same.</source>
          <target state="translated">オブザーバブルは、コンテキストに応じて、リテラル、メッセージ、イベントなど、あらゆるタイプの複数の値を配信できます。値を受信するためのAPIは、値が同期または非同期で配信されるかどうかにかかわらず同じです。セットアップロジックとティアダウンロジックの両方がオブザーバブルによって処理されるため、アプリケーションコードは、サブスクライブして値を消費し、完了したらサブスクライブを解除することのみを考慮する必要があります。ストリームがキーストローク、HTTP応答、インターバルタイマーのいずれであっても、値をリッスンするインターフェイスとリッスンを停止するインターフェイスは同じです。</target>
        </trans-unit>
        <trans-unit id="8f7904892d5fae208a614b0e764892eb392d2990" translate="yes" xml:space="preserve">
          <source>An observable of the URL fragment shared by all the routes.</source>
          <target state="translated">すべてのルートで共有されているURLフラグメントのオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="9886415c12cd9cb121b3e54e248babdfc816c0c5" translate="yes" xml:space="preserve">
          <source>An observable of the URL segments matched by this route.</source>
          <target state="translated">このルートでマッチしたURLセグメントのオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="78107a7f3c08dd96478ee59348f7bde390f4ab63" translate="yes" xml:space="preserve">
          <source>An observable of the matrix parameters scoped to this route.</source>
          <target state="translated">このルートにスコープされた行列パラメータのオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="1e605d70e4839e622078c536e593bcab71033051" translate="yes" xml:space="preserve">
          <source>An observable of the query parameters shared by all the routes.</source>
          <target state="translated">すべてのルートで共有されるクエリパラメータのオブザーバブル。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
