<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="c812f6529ca065b3990e70e2407682a3f9b80ef0" translate="yes" xml:space="preserve">
          <source>The first segment name can be prepended with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;./&lt;/code&gt;, or &lt;code&gt;../&lt;/code&gt;:</source>
          <target state="translated">最初のセグメント名で付加することができる &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;./&lt;/code&gt; または &lt;code&gt;../&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be494398bc29b0cab8b00ca0ac7181001cb339b3" translate="yes" xml:space="preserve">
          <source>The first test creates a &lt;code&gt;ValueService&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; and passes it to the &lt;code&gt;MasterService&lt;/code&gt; constructor.</source>
          <target state="translated">最初のテストは &lt;code&gt;new&lt;/code&gt; で &lt;code&gt;ValueService&lt;/code&gt; を作成し、それを &lt;code&gt;MasterService&lt;/code&gt; コンストラクターに渡します。</target>
        </trans-unit>
        <trans-unit id="e5c06683cd16e03e55d325b4c0dc8a1f41e8cc0c" translate="yes" xml:space="preserve">
          <source>The first test shows the benefit of automatic change detection.</source>
          <target state="translated">1回目のテストでは、自動変化検出のメリットが示されています。</target>
        </trans-unit>
        <trans-unit id="aa509a8a6923fb66806ca57c1af7a5c17aa9333e" translate="yes" xml:space="preserve">
          <source>The first two lines, with the bindings, are there from previous steps. The new parts are &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; allows you to project content, and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; inside the &lt;code&gt;ChildComponent&lt;/code&gt; template makes the &lt;code&gt;InspectorComponent&lt;/code&gt; a child component of &lt;code&gt;ChildComponent&lt;/code&gt;.</source>
          <target state="translated">バインディングを含む最初の2行は、前のステップからのものです。新しい部分は &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; です。 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; ではコンテンツを投影でき、 &lt;code&gt;ChildComponent&lt;/code&gt; テンプレート内の &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; は &lt;code&gt;InspectorComponent&lt;/code&gt; を &lt;code&gt;ChildComponent&lt;/code&gt; の子コンポーネントにします。</target>
        </trans-unit>
        <trans-unit id="c7f348f21943da7baa131bdaaaeacb38df6dc474" translate="yes" xml:space="preserve">
          <source>The first two paths are the routes to the &lt;code&gt;CustomersModule&lt;/code&gt; and the &lt;code&gt;OrdersModule&lt;/code&gt;. The final entry defines a default route. The empty path matches everything that doesn't match an earlier path.</source>
          <target state="translated">最初の2つのパスは &lt;code&gt;CustomersModule&lt;/code&gt; と &lt;code&gt;OrdersModule&lt;/code&gt; へのルートです。最後のエントリは、デフォルトルートを定義します。空のパスは、以前のパスと一致しないすべてのものと一致します。</target>
        </trans-unit>
        <trans-unit id="dc8e7d683a61ef16411f45a78aa24508cfc2fdad" translate="yes" xml:space="preserve">
          <source>The first unit contains the text that was outside of the &lt;code&gt;select&lt;/code&gt;. In place of the &lt;code&gt;select&lt;/code&gt; is a placeholder, &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt;, that represents the &lt;code&gt;select&lt;/code&gt; message. Translate the text and move around the placeholder if necessary, but don't remove it. If you remove the placeholder, the ICU expression will not be present in your translated app.</source>
          <target state="translated">最初のユニットには、 &lt;code&gt;select&lt;/code&gt; の外にあったテキストが含まれています。 &lt;code&gt;select&lt;/code&gt; の代わりに、 &lt;code&gt;select&lt;/code&gt; メッセージを表すプレースホルダー &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt; があります。テキストを翻訳し、必要に応じてプレースホルダーを移動しますが、削除しないでください。プレースホルダーを削除すると、翻訳されたアプリにICU式が表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="a43bddb336b6d795fd036d0b5ceb9112cbcc9c51" translate="yes" xml:space="preserve">
          <source>The fix - hide empty details with &lt;em&gt;*ngIf&lt;/em&gt;</source>
          <target state="translated">修正- &lt;em&gt;* ngIfで&lt;/em&gt;空の詳細を隠す&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c4e5c41140f56ca78f4718c5d160184adeef566" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; applies to both scripts and styles. You can supply a value such as the following to apply optimization to one or the other:</source>
          <target state="translated">フラグ &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; は、スクリプトとスタイルの両方に適用されます。次のような値を指定して、どちらかに最適化を適用できます。</target>
        </trans-unit>
        <trans-unit id="8cae6ccc26c43113c77ba86a6a7f857871cb6761" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; outputs source maps for both scripts and styles. You can configure the option to apply to one or the other. You can also choose to output hidden source maps, or resolve vendor package source maps. For example:</source>
          <target state="translated">フラグ &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; は、スクリプトとスタイルの両方のソースマップを出力します。どちらかに適用するオプションを構成できます。非表示のソースマップを出力するか、ベンダーパッケージのソースマップを解決するかを選択することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="3f3ed63d6d77ed1a3c84fa9fd5bacb244d6a6a3c" translate="yes" xml:space="preserve">
          <source>The folllowing sections highlight some core router concepts.</source>
          <target state="translated">以下のセクションでは、ルータのコアとなる概念をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="1493706ed03721d1c78b58ccff4d87d10377338c" translate="yes" xml:space="preserve">
          <source>The follow example shows how to use radio buttons in a reactive form. When using radio buttons in a reactive form, radio buttons in the same group should have the same &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt;. Providing a &lt;code&gt;name&lt;/code&gt; attribute is optional.</source>
          <target state="translated">次の例は、リアクティブフォームでラジオボタンを使用する方法を示しています。リアクティブフォームでラジオボタンを使用する場合、同じグループのラジオボタンは同じ &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; を持つ必要があります。提供する &lt;code&gt;name&lt;/code&gt; 属性はオプションです。</target>
        </trans-unit>
        <trans-unit id="310dc1587f604138be8759e6a89d07e7cc01679f" translate="yes" xml:space="preserve">
          <source>The follow example shows you how to use a multi-select control with a reactive form.</source>
          <target state="translated">以下の例は、リアクティブフォームでマルチセレクトコントロールを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8c6f2a7b56c63473c3a42c22b17753fcb52e791f" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="translated">次の &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; メソッドはエラーを報告し、アプリケーションが引き続き機能するように無害な結果を返します。</target>
        </trans-unit>
        <trans-unit id="785ab51680d18375d227cf4bdd9454c50b68a18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="translated">次の &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; は多くの &lt;code&gt;HeroService&lt;/code&gt; メソッドで共有されるため、さまざまなニーズを満たすために一般化されています。</target>
        </trans-unit>
        <trans-unit id="9fac4999708b255d65710166eee053bb3a438369" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ActivatedRouteStub&lt;/code&gt; class serves as a test double for &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次の &lt;code&gt;ActivatedRouteStub&lt;/code&gt; クラスは、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; のテストdoubleとして機能します。</target>
        </trans-unit>
        <trans-unit id="e61ca55af810cb77b591c0e8d0cf9110b85b7a31" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a base class for a set of controls that can represent the question and its answer in the form.</source>
          <target state="translated">次の &lt;code&gt;QuestionBase&lt;/code&gt; は、質問とその回答をフォームで表すことができる一連のコントロールの基本クラスです。</target>
        </trans-unit>
        <trans-unit id="b2b988a26abe5c751d6ffb4eba65994971ffa485" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a fundamental question class.</source>
          <target state="translated">次の &lt;code&gt;QuestionBase&lt;/code&gt; は、基本的な質問クラスです。</target>
        </trans-unit>
        <trans-unit id="c06281078d15555932d1ae78c47b2ddcf06d4228" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;WelcomeComponent&lt;/code&gt; depends on the &lt;code&gt;UserService&lt;/code&gt; to know the name of the user to greet.</source>
          <target state="translated">次の &lt;code&gt;WelcomeComponent&lt;/code&gt; は、挨拶するユーザーの名前を知るために &lt;code&gt;UserService&lt;/code&gt; に依存しています。</target>
        </trans-unit>
        <trans-unit id="f0f7c8570c75a7fbfc3c92a94edaa5d338b173de" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;devDependencies&lt;/code&gt; are provided in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">次の &lt;code&gt;devDependencies&lt;/code&gt; は、新しいAngularワークスペースのデフォルトの &lt;code&gt;package.json&lt;/code&gt; ファイルで提供されます。</target>
        </trans-unit>
        <trans-unit id="36e2b7d7bec0be04c77013b1d36bd5f9bd31299b" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;go()&lt;/code&gt; function navigates to the &lt;code&gt;list&lt;/code&gt; route by interpreting the destination URI as relative to the activated &lt;code&gt;child&lt;/code&gt; route</source>
          <target state="translated">次の &lt;code&gt;go()&lt;/code&gt; 関数は、アクティブ化された &lt;code&gt;child&lt;/code&gt; ルートを基準にして宛先URIを解釈することにより、 &lt;code&gt;list&lt;/code&gt; ルートに移動します</target>
        </trans-unit>
        <trans-unit id="c66deeeadbe10c60879e8a84f1e34c983c81d32e" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="translated">次の &lt;code&gt;handleError()&lt;/code&gt; メソッドは、エラーを報告してから無害な結果を返すため、アプリケーションは引き続き機能します。</target>
        </trans-unit>
        <trans-unit id="116cc41ee5347f1fb8e9c5ef258684090ee5b82d" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="translated">次の &lt;code&gt;handleError()&lt;/code&gt; は、多くの &lt;code&gt;HeroService&lt;/code&gt; メソッドで共有されるため、さまざまなニーズを満たすように一般化されています。</target>
        </trans-unit>
        <trans-unit id="0a445c25398c4982342ee1c37ee98932b7260ab6" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;searchHeroes&lt;/code&gt; method queries for heroes whose names contain the search term. Start by importing &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">次の &lt;code&gt;searchHeroes&lt;/code&gt; メソッドは、名前に検索語が含まれているヒーローをクエリします。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="91fa256b1d95446c100727849d7fffe9e6eee18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;sizerComponent&lt;/code&gt; has a &lt;code&gt;size&lt;/code&gt; value property and a &lt;code&gt;sizeChange&lt;/code&gt; event. The &lt;code&gt;size&lt;/code&gt; property is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, so data can flow into the &lt;code&gt;sizerComponent&lt;/code&gt;. The &lt;code&gt;sizeChange&lt;/code&gt; event is an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, which allows data to flow out of the &lt;code&gt;sizerComponent&lt;/code&gt; to the parent component.</source>
          <target state="translated">次の &lt;code&gt;sizerComponent&lt;/code&gt; は &lt;code&gt;size&lt;/code&gt;値プロパティと &lt;code&gt;sizeChange&lt;/code&gt; イベントを持っています。&lt;code&gt;size&lt;/code&gt; プロパティは &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input()&lt;/a&gt;&lt;/code&gt; なので、データは &lt;code&gt;sizerComponent&lt;/code&gt; に流れることができます。&lt;code&gt;sizeChange&lt;/code&gt; イベントは &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;@Output()&lt;/a&gt;&lt;/code&gt; で、&lt;code&gt;sizerComponent&lt;/code&gt; から親コンポーネントにデータを流すことができます。</target>
        </trans-unit>
        <trans-unit id="cf12f77efe304835f70e6db2fb5c41f976783ba1" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;AfterContent&lt;/em&gt; hooks take action based on changing values in a &lt;em&gt;content child&lt;/em&gt;, which can only be reached by querying for them via the property decorated with &lt;a href=&quot;../api/core/contentchild&quot;&gt;@ContentChild&lt;/a&gt;.</source>
          <target state="translated">次の&lt;em&gt;AfterContent&lt;/em&gt;フックは、&lt;em&gt;コンテンツの子の&lt;/em&gt;値の変更に基づいてアクションを実行します。これは、&lt;a href=&quot;../api/core/contentchild&quot;&gt;@ ContentChildで&lt;/a&gt;装飾されたプロパティを介してクエリを実行することによってのみ到達できます。</target>
        </trans-unit>
        <trans-unit id="116e174584a29bb6840145432c80d1ed6f312131" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;code-example&lt;/em&gt; displays the sample's &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">次の&lt;em&gt;コード例&lt;/em&gt;は、サンプルの &lt;code&gt;app.module.ts&lt;/code&gt; を表示しています。</target>
        </trans-unit>
        <trans-unit id="7ff1e333381c65ecbd5243d727c0316791951c07" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;negative&lt;/em&gt; example defines the &lt;code&gt;AppComponent&lt;/code&gt;, bootstraps the app, defines the &lt;code&gt;Hero&lt;/code&gt; model object, and loads heroes from the server all in the same file. &lt;em&gt;Don't do this&lt;/em&gt;.</source>
          <target state="translated">次の&lt;em&gt;否定的な&lt;/em&gt;例では、 &lt;code&gt;AppComponent&lt;/code&gt; を定義し、アプリをブートストラップし、 &lt;code&gt;Hero&lt;/code&gt; モデルオブジェクトを定義し、サーバーからヒーローをすべて同じファイルに読み込みます。&lt;em&gt;これを行わないでください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f753905a9a1f06f9639773508814519f5c2d410a" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 11.0.0*:</source>
          <target state="translated">以下のAPIはバージョン11.0.0*から削除されました。</target>
        </trans-unit>
        <trans-unit id="994aa1e70e47f4c7e017a337b6ce6547e5ba554b" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 8.0.0:</source>
          <target state="translated">以下のAPIはバージョン8.0.0から削除されました。</target>
        </trans-unit>
        <trans-unit id="51bbe99f451aed6b8246ad5a220ae097d1d5bcbc" translate="yes" xml:space="preserve">
          <source>The following Angular packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace. For a complete list of Angular packages, see the &lt;a href=&quot;http://angular.io/api?type=package&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">次のAngularパッケージは、新しいAngularワークスペースのデフォルトの &lt;code&gt;package.json&lt;/code&gt; ファイルに依存関係として含まれています。Angularパッケージの完全なリストについては、&lt;a href=&quot;http://angular.io/api?type=package&quot;&gt;APIリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ccafe2208c4727216714f0e1d0a16ecb2aadd2a4" translate="yes" xml:space="preserve">
          <source>The following Angular packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace. For a complete list of Angular packages, see the &lt;a href=&quot;https://angular.io/api?type=package&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065d02b28e6329bb68299c785507b5b63ab4c196" translate="yes" xml:space="preserve">
          <source>The following JavaScript and template expression syntax is not allowed:</source>
          <target state="translated">以下のJavaScriptおよびテンプレート式の構文は許可されていません。</target>
        </trans-unit>
        <trans-unit id="c9c87c138794393175620ac93451cef9321aa8cd" translate="yes" xml:space="preserve">
          <source>The following Node Express code routes all remaining requests to &lt;code&gt;/dist&lt;/code&gt;, and returns a &lt;code&gt;404 - NOT FOUND&lt;/code&gt; error if the file isn't found.</source>
          <target state="translated">次のNode Expressコードは、残りのすべてのリクエストを &lt;code&gt;/dist&lt;/code&gt; にルーティングし、ファイルが見つからない場合は &lt;code&gt;404 - NOT FOUND&lt;/code&gt; エラーを返します。</target>
        </trans-unit>
        <trans-unit id="42602365e9f9b5d3751f97c026342dbe6e9a0a12" translate="yes" xml:space="preserve">
          <source>The following Node.js Express code routes all remaining requests to &lt;code&gt;/dist&lt;/code&gt;, and returns a &lt;code&gt;404 - NOT FOUND&lt;/code&gt; error if the file isn't found.</source>
          <target state="translated">次のNode.jsExpressコードは、残りのすべてのリクエストを &lt;code&gt;/dist&lt;/code&gt; にルーティングし、ファイルが見つからない場合は &lt;code&gt;404 - NOT FOUND&lt;/code&gt; エラーを返します。</target>
        </trans-unit>
        <trans-unit id="b65644eda0c104813298601e0f97875c503d3e04" translate="yes" xml:space="preserve">
          <source>The following animation functions accept &lt;code&gt;&lt;a href=&quot;animationoptions&quot;&gt;AnimationOptions&lt;/a&gt;&lt;/code&gt; data:</source>
          <target state="translated">次のアニメーション関数は &lt;code&gt;&lt;a href=&quot;animationoptions&quot;&gt;AnimationOptions&lt;/a&gt;&lt;/code&gt; データを受け入れます。</target>
        </trans-unit>
        <trans-unit id="1767c5d430aa307e12d6375ef28cd7b7f4045947" translate="yes" xml:space="preserve">
          <source>The following application structure configures build targets for production and staging environments:</source>
          <target state="translated">以下のアプリケーション構成では、本番環境とステージング環境のビルドターゲットを設定します。</target>
        </trans-unit>
        <trans-unit id="a46e859c7f6f419e5a00b12a40b726bdaa8d73c6" translate="yes" xml:space="preserve">
          <source>The following are all in &lt;code&gt;src/&lt;/code&gt;</source>
          <target state="translated">以下はすべて &lt;code&gt;src/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9f939245f394ca4dc27650e24cf49bae0b34e97" translate="yes" xml:space="preserve">
          <source>The following are metadata errors you may encounter, with explanations and suggested corrections.</source>
          <target state="translated">以下は、あなたが遭遇する可能性のあるメタデータのエラーを、解説と修正案とともに紹介しています。</target>
        </trans-unit>
        <trans-unit id="51abe71aa0569567b6c0aa9179e570dc48c94b6e" translate="yes" xml:space="preserve">
          <source>The following are optional practices that may be required in special cases:</source>
          <target state="translated">以下は、特殊な場合に必要になる可能性のある任意の練習です。</target>
        </trans-unit>
        <trans-unit id="a6716986e0c6713342e583a29289a90b2926bb94" translate="yes" xml:space="preserve">
          <source>The following calls request navigation to a dynamic route path relative to the current URL.</source>
          <target state="translated">以下の呼び出しは、現在の URL からの相対的な動的ルートパスへのナビゲーションを要求します。</target>
        </trans-unit>
        <trans-unit id="387b2a0ab6debbcc744a145f5f656fc83ebacd58" translate="yes" xml:space="preserve">
          <source>The following calls request navigation to an absolute path.</source>
          <target state="translated">以下の呼び出しは、絶対パスへのナビゲーションを要求します。</target>
        </trans-unit>
        <trans-unit id="c3ebc8d8ec464f34b73d550cada30c074e9d8e13" translate="yes" xml:space="preserve">
          <source>The following classes are applied as the properties become true:</source>
          <target state="translated">プロパティが真になると、以下のクラスが適用されます。</target>
        </trans-unit>
        <trans-unit id="ce6439485b50c16d62436ad7f675d84cb36c7da0" translate="yes" xml:space="preserve">
          <source>The following code adds a route object to your routing configuration using the &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; property and custom matcher, and the &lt;code&gt;component&lt;/code&gt; property with &lt;code&gt;AngularJSComponent&lt;/code&gt;.</source>
          <target state="translated">次のコードは、 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; プロパティとカスタムマッチャー、および &lt;code&gt;AngularJSComponent&lt;/code&gt; の &lt;code&gt;component&lt;/code&gt; プロパティを使用して、ルーティングオブジェクトをルーティング構成に追加します。</target>
        </trans-unit>
        <trans-unit id="28e2cb78b7b1af48f76a5dad16de0e5a0f60b030" translate="yes" xml:space="preserve">
          <source>The following code adds a route object to your routing configuration using the &lt;code&gt;matcher&lt;/code&gt; property and custom matcher, and the &lt;code&gt;component&lt;/code&gt; property with &lt;code&gt;AngularJSComponent&lt;/code&gt;.</source>
          <target state="translated">次のコードは、 &lt;code&gt;matcher&lt;/code&gt; プロパティとcustom matcherを使用してルーティング構成にルートオブジェクトを追加し、 &lt;code&gt;AngularJSComponent&lt;/code&gt; を使用して &lt;code&gt;component&lt;/code&gt; プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="6b49010b9d59d96e69b509c32c65368c8bb333ca" translate="yes" xml:space="preserve">
          <source>The following code allows the possibility of a null result:</source>
          <target state="translated">以下のコードでは、NULL結果の可能性があります。</target>
        </trans-unit>
        <trans-unit id="7b6b1c6e0fefe9a409bb2943db47b7d0229ca42c" translate="yes" xml:space="preserve">
          <source>The following code create the validator class, &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt;, which implements the &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">次のコードは、 &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; インターフェイスを実装するバリデータークラス &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="8424f6423c006de8373a39e981e029928c19ba67" translate="yes" xml:space="preserve">
          <source>The following code creates a new hero instance, so that the initial form can show an example hero.</source>
          <target state="translated">以下のコードは、初期フォームに例のヒーローを表示できるように、新しいヒーローのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="207af549f2a57a4ef9618be51c8a3e2c03508d70" translate="yes" xml:space="preserve">
          <source>The following code defines a variable that creates such an object to play the logger role.</source>
          <target state="translated">次のコードでは、このようなオブジェクトを作成してロガーの役割を果たす変数を定義しています。</target>
        </trans-unit>
        <trans-unit id="7e32964f8010bdc34e31bfb91a4480490d6ce73b" translate="yes" xml:space="preserve">
          <source>The following code example binds an observable of message strings (&lt;code&gt;message$&lt;/code&gt;) to a view with the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">次のコード例は、監視可能なメッセージ文字列（ &lt;code&gt;message$&lt;/code&gt; ）を &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプを使用してビューにバインドします。</target>
        </trans-unit>
        <trans-unit id="944943590bdc4de5c8de2d0b7552a7f08e445f6e" translate="yes" xml:space="preserve">
          <source>The following code example shows two component definitions:</source>
          <target state="translated">次のコード例では、2 つのコンポーネント定義を示しています。</target>
        </trans-unit>
        <trans-unit id="bc98599fa439c892b8ee3bde3044cd007c164e5f" translate="yes" xml:space="preserve">
          <source>The following code filters for request URLs with no extensions and treats them as navigation requests.</source>
          <target state="translated">以下のコードは、拡張子のないリクエストURLをフィルタリングし、ナビゲーションリクエストとして扱います。</target>
        </trans-unit>
        <trans-unit id="b62717a01c0ebe8dcbd15846d84cdba0d340a646" translate="yes" xml:space="preserve">
          <source>The following code from the example shows the setup in the root module.</source>
          <target state="translated">以下の例のコードは、ルートモジュールでの設定を示しています。</target>
        </trans-unit>
        <trans-unit id="232a93911c7f9e165be968ea82fb38e17cc7aba4" translate="yes" xml:space="preserve">
          <source>The following code in the component file (&lt;code&gt;app.component.ts&lt;/code&gt;) uses an environment variable defined in the configuration files.</source>
          <target state="translated">コンポーネントファイル（ &lt;code&gt;app.component.ts&lt;/code&gt; ）の次のコードは、構成ファイルで定義された環境変数を使用します。</target>
        </trans-unit>
        <trans-unit id="a259128394545a0cdd616395eda9a258c0d5a746" translate="yes" xml:space="preserve">
          <source>The following code listens to the &lt;code&gt;keyup&lt;/code&gt; event and passes the entire event payload (&lt;code&gt;$event&lt;/code&gt;) to the component event handler.</source>
          <target state="translated">次のコードは、 &lt;code&gt;keyup&lt;/code&gt; イベントをリッスンし、イベントペイロード全体（ &lt;code&gt;$event&lt;/code&gt; ）をコンポーネントイベントハンドラーに渡します。</target>
        </trans-unit>
        <trans-unit id="54f666028961c7601a6ac4549faa071dafb7e5c5" translate="yes" xml:space="preserve">
          <source>The following code shows how a class subscribes to router events.</source>
          <target state="translated">次のコードは、クラスがルータのイベントをサブスクライブする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b6ee722ae2338abfea4bf64cfdf2b4e4a323bf4f" translate="yes" xml:space="preserve">
          <source>The following code shows how the pipe transforms numbers into text strings, according to various format specifications, where the caller's default locale is &lt;code&gt;en-US&lt;/code&gt;.</source>
          <target state="translated">次のコードは、さまざまなフォーマット仕様に従って、パイプが数値をテキスト文字列に変換する方法を示しています。呼び出し元のデフォルトのロケールは &lt;code&gt;en-US&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e9169bce6fd95909d94bce497bf7fe756a737b5f" translate="yes" xml:space="preserve">
          <source>The following code shows the complete implementation of &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;, which extends &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; to inherit its characteristics. The example shows that you don't have to change anything else&amp;mdash;the only difference is setting the &lt;code&gt;pure&lt;/code&gt; flag as &lt;code&gt;false&lt;/code&gt; in the pipe metadata.</source>
          <target state="translated">次のコードは、 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; の完全な実装を示しています。これは、 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; を拡張してその特性を継承します。この例は、他に何も変更する必要がないことを示しています。唯一の違いは、パイプメタデータで &lt;code&gt;pure&lt;/code&gt; フラグを &lt;code&gt;false&lt;/code&gt; に設定することです。</target>
        </trans-unit>
        <trans-unit id="1572d276e3e8a623d34b2dfb6a97d7ddcc66232f" translate="yes" xml:space="preserve">
          <source>The following code shows two examples in &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">次のコードは、 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; の 2つの例を示しています。</target>
        </trans-unit>
        <trans-unit id="ca561d6e698b6ce6c7a5587a06ea7b5eae7cb485" translate="yes" xml:space="preserve">
          <source>The following code snippet binds the trigger to the value of the &lt;code&gt;isOpen&lt;/code&gt; property.</source>
          <target state="translated">次のコードスニペットは、トリガーを &lt;code&gt;isOpen&lt;/code&gt; プロパティの値にバインドします。</target>
        </trans-unit>
        <trans-unit id="32ca63854052fa10af413f92da12af47fa20fa26" translate="yes" xml:space="preserve">
          <source>The following code snippet defines a reusable animation named &lt;code&gt;slideInAnimation&lt;/code&gt;.</source>
          <target state="translated">次のコードスニペットは、 &lt;code&gt;slideInAnimation&lt;/code&gt; という名前の再利用可能なアニメーションを定義しています。</target>
        </trans-unit>
        <trans-unit id="d17bb68d10f427ddf4a4632d3ac1379a666c167a" translate="yes" xml:space="preserve">
          <source>The following code snippets illustrate how the same kind of operation is defined using observables and promises.</source>
          <target state="translated">以下のコードスニペットは、観測値とプロミスを使用して同じ種類の操作がどのように定義されているかを示しています。</target>
        </trans-unit>
        <trans-unit id="77c06d585e1c57c62a339f4be318d4b09751da75" translate="yes" xml:space="preserve">
          <source>The following command creates a new schematic named &lt;code&gt;hello-world&lt;/code&gt; in a new project folder of the same name.</source>
          <target state="translated">次のコマンドは、同じ名前の新しいプロジェクトフォルダーに &lt;code&gt;hello-world&lt;/code&gt; という名前の新しい回路図を作成します。</target>
        </trans-unit>
        <trans-unit id="d7dc620d5c50c64dafc6745227a4e03e0545f533" translate="yes" xml:space="preserve">
          <source>The following command uses the Angular CLI to generate a basic Angular app with an app routing module, called &lt;code&gt;AppRoutingModule&lt;/code&gt;, which is an NgModule where you can configure your routes. The app name in the following example is &lt;code&gt;routing-app&lt;/code&gt;.</source>
          <target state="translated">次のコマンドでは、と呼ばれるアプリルーティングモジュール、との基本的な角度アプリ生成する角度CLIを使用しています &lt;code&gt;AppRoutingModule&lt;/code&gt; 、あなたのルートを設定することができNgModuleです。次の例のアプリ名は &lt;code&gt;routing-app&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5acc54feb882ebbac18464ca297042fc0ca8c059" translate="yes" xml:space="preserve">
          <source>The following component implements an input field for a single control, using reactive forms. In this example, the form model is the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">次のコンポーネントは、リアクティブフォームを使用して、単一のコントロールの入力フィールドを実装します。この例では、フォームモデルは &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="91c87e36e4dadbb4543baa1e1f887338a6ff8774" translate="yes" xml:space="preserve">
          <source>The following component implements the same input field for a single control, using template-driven forms.</source>
          <target state="translated">以下のコンポーネントは、テンプレート駆動のフォームを使用して、単一のコントロールのための同じ入力フィールドを実装しています。</target>
        </trans-unit>
        <trans-unit id="47e4f157bb24c73c005140ee31c2f0af5a539547" translate="yes" xml:space="preserve">
          <source>The following component uses a JSON pipe to convert an object to JSON format, and displays the string in both formats for comparison.</source>
          <target state="translated">次のコンポーネントは、JSONパイプを使用してオブジェクトをJSON形式に変換し、比較のために両方の形式で文字列を表示します。</target>
        </trans-unit>
        <trans-unit id="a4e73fb6567ee27bc5e536fab09dba759f3ae4ad" translate="yes" xml:space="preserve">
          <source>The following component uses a date pipe to display the current date in different formats.</source>
          <target state="translated">以下のコンポーネントは、日付パイプを使用して、現在の日付をさまざまな形式で表示します。</target>
        </trans-unit>
        <trans-unit id="c20b43358d59e5c00a015727d1c851c4cbec1dd1" translate="yes" xml:space="preserve">
          <source>The following configuration defines the possible routes for the application.</source>
          <target state="translated">以下の設定では、アプリケーションで使用可能な経路を定義します。</target>
        </trans-unit>
        <trans-unit id="ca39f7a403d669b466851af463789f6e4308a101" translate="yes" xml:space="preserve">
          <source>The following configurations determine your requirements.</source>
          <target state="translated">以下の構成で要件を決定します。</target>
        </trans-unit>
        <trans-unit id="37934d0845c28e4e189707be23ac4515a0438aa9" translate="yes" xml:space="preserve">
          <source>The following converts the previous example to retry the request before catching the error:</source>
          <target state="translated">以下の例では、エラーをキャッチする前にリクエストを再試行するように変換しています。</target>
        </trans-unit>
        <trans-unit id="8258d45ac121784086056f6acff3cfa09c66cc88" translate="yes" xml:space="preserve">
          <source>The following cross validation examples show how to do the following:</source>
          <target state="translated">以下のクロスバリデーションの例では、以下のようにしています。</target>
        </trans-unit>
        <trans-unit id="5d2058782c0a59d8185af68b28963481193d3751" translate="yes" xml:space="preserve">
          <source>The following decorators can declare Angular class types:</source>
          <target state="translated">以下のデコレータはAngularクラスの型を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="b44b0135ecfd3641259d5c6556966fc2994b72cf" translate="yes" xml:space="preserve">
          <source>The following diagram captures all of the navigation options.</source>
          <target state="translated">次の図は、すべてのナビゲーション・オプションを示しています。</target>
        </trans-unit>
        <trans-unit id="563510ccae86add1b61054ac67bd1da0863f8431" translate="yes" xml:space="preserve">
          <source>The following diagram is of an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the same child component and shows the different parts of each:</source>
          <target state="translated">次の図は、同じ子コンポーネントの &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; で、それぞれの異なる部分を示しています。</target>
        </trans-unit>
        <trans-unit id="591e8f32bccd8c8b57626b7087c74554befd117f" translate="yes" xml:space="preserve">
          <source>The following diagram represents the relationship between the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; and its parent injectors as the previous paragraphs describe.</source>
          <target state="translated">次の図は、前の段落で説明したように、 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; とその親インジェクターの間の関係を表しています。</target>
        </trans-unit>
        <trans-unit id="26751bcaf4afd7af2879868c81908003d5733ad4" translate="yes" xml:space="preserve">
          <source>The following diagram shows the different parts of the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; child component.</source>
          <target state="translated">次の図が示すの異なる部分 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; に &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; 子要素。</target>
        </trans-unit>
        <trans-unit id="ed076baca5f93bb827a0ebb7900fe0b5704ff542" translate="yes" xml:space="preserve">
          <source>The following diagram shows the four forms of data binding markup. Each form has a direction: to the DOM, from the DOM, or both.</source>
          <target state="translated">次の図は、データバインディングのマークアップの4つの形式を示しています。それぞれの形式には、DOMへの方向、DOMからの方向、またはその両方があります。</target>
        </trans-unit>
        <trans-unit id="3ff2b63c1da7916f7659e48bbf8ccdc6bd4a5549" translate="yes" xml:space="preserve">
          <source>The following diagram shows this structure:</source>
          <target state="translated">このような構成を以下の図に示します。</target>
        </trans-unit>
        <trans-unit id="9fa0d05a015dffbd3dbbf6348e7361b2ca025cfb" translate="yes" xml:space="preserve">
          <source>The following example adds a meaning:</source>
          <target state="translated">次の例では、意味を追加しています。</target>
        </trans-unit>
        <trans-unit id="3f4fd24519d8e834ff080d55e6e16761f7df4b09" translate="yes" xml:space="preserve">
          <source>The following example adds a method to the component class to update the value of the control to &lt;em&gt;Nancy&lt;/em&gt; using the &lt;code&gt;setValue()&lt;/code&gt; method.</source>
          <target state="translated">次の例では、コンポーネントクラスにメソッドを追加して、 &lt;code&gt;setValue()&lt;/code&gt; メソッドを使用してコントロールの値を&lt;em&gt;Nancy&lt;/em&gt;に更新します。</target>
        </trans-unit>
        <trans-unit id="b731d707c04b9ff277f25b650229ef6f45c476c3" translate="yes" xml:space="preserve">
          <source>The following example allows MainModule to use anything exported by &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次の例では、MainModuleは、によってエクスポート何でも使用することができます &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="7e3d1e0a85720c04ef199ae72e6f46958ca6cce4" translate="yes" xml:space="preserve">
          <source>The following example allows the CommonModule to use the &lt;code&gt;NgFor&lt;/code&gt; directive.</source>
          <target state="translated">次の例では、CommonModuleが &lt;code&gt;NgFor&lt;/code&gt; ディレクティブを使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="45fe3ed797a186015a0cfa6d91a33480e11ad5a4" translate="yes" xml:space="preserve">
          <source>The following example applies a &lt;code&gt;background-color&lt;/code&gt; style to all &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; elements &lt;em&gt;inside&lt;/em&gt; the component, only if some ancestor element has the CSS class &lt;code&gt;theme-light&lt;/code&gt;.</source>
          <target state="translated">次の例では、一部の祖先要素にCSSクラス &lt;code&gt;theme-light&lt;/code&gt; がある場合にのみ、コンポーネント&lt;em&gt;内の&lt;/em&gt;すべての &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 要素に &lt;code&gt;background-color&lt;/code&gt; スタイルを適用します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcedff2617d143735174c4ca651ed186d806ae5d" translate="yes" xml:space="preserve">
          <source>The following example binds the &lt;code&gt;&lt;a href=&quot;observables-in-angular&quot;&gt;time&lt;/a&gt;&lt;/code&gt; observable to the component's view. The observable continuously updates the view with the current time.</source>
          <target state="translated">次の例では、監視可能な &lt;code&gt;&lt;a href=&quot;observables-in-angular&quot;&gt;time&lt;/a&gt;&lt;/code&gt; をコンポーネントのビューにバインドしています。オブザーバブルは現在の時間でビューを継続的に更新します。</target>
        </trans-unit>
        <trans-unit id="4c04fe18ae9aa81dd238702d74da5b50a2583245" translate="yes" xml:space="preserve">
          <source>The following example binds the &lt;code&gt;time&lt;/code&gt; observable to the component's view. The observable continuously updates the view with the current time.</source>
          <target state="translated">次の例では、監視可能な &lt;code&gt;time&lt;/code&gt; をコンポーネントのビューにバインドします。オブザーバブルは、現在の時刻でビューを継続的に更新します。</target>
        </trans-unit>
        <trans-unit id="bafa3ddbef652a6f97e49fffd0328f98ee3fcea1" translate="yes" xml:space="preserve">
          <source>The following example calls &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; to set a CSS style to different values for successive keyframes.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; を呼び出して、CSSスタイルを連続するキーフレームの異なる値に設定します。</target>
        </trans-unit>
        <trans-unit id="0671a448ae63e4cb68f7209c639aa1632e6f7057" translate="yes" xml:space="preserve">
          <source>The following example calls &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; to set a single CSS style.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; を呼び出して単一のCSSスタイルを設定しています。</target>
        </trans-unit>
        <trans-unit id="dfb6d00028ff27179561f6fed50ebb86d09c8572" translate="yes" xml:space="preserve">
          <source>The following example creates a component displaying live data. The component detaches its change detector from the main change detector tree when the &lt;code&gt;live&lt;/code&gt; property is set to false, and reattaches it when the property becomes true.</source>
          <target state="translated">次の例では、ライブデータを表示するコンポーネントを作成します。コンポーネントは、 &lt;code&gt;live&lt;/code&gt; プロパティがfalseに設定されている場合、変更検出器をメインの変更検出器ツリーから切り離し、プロパティがtrueになると再接続します。</target>
        </trans-unit>
        <trans-unit id="f5b7e02751c775b6689a5a269eedf3d607677675" translate="yes" xml:space="preserve">
          <source>The following example creates a component with two data-bound properties, specified by the &lt;code&gt;inputs&lt;/code&gt; value.</source>
          <target state="translated">次の例では、 &lt;code&gt;inputs&lt;/code&gt; 値で指定された2つのデータバインドプロパティを持つコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="4a138338fc9f07d95c1f950a00fae4a52cc4f81e" translate="yes" xml:space="preserve">
          <source>The following example creates a component with two data-bound properties.</source>
          <target state="translated">次の例では、2 つのデータ結合プロパティを持つコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="0f0ff213b825e8918f93f78a47edd9c9a56bde24" translate="yes" xml:space="preserve">
          <source>The following example creates a component with two input properties, one of which is given a special binding name.</source>
          <target state="translated">次の例では、2 つの入力プロパティを持つコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="0c51372431a03bd36f35d2c48736c377de868f16" translate="yes" xml:space="preserve">
          <source>The following example creates a directive that sets the &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;invalid&lt;/code&gt; properties on the DOM element that has an &lt;code&gt;&lt;a href=&quot;../forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive on it.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;../forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブを持つDOM要素に &lt;code&gt;valid&lt;/code&gt; &lt;code&gt;invalid&lt;/code&gt; プロパティと無効なプロパティを設定するディレクティブを作成します。</target>
        </trans-unit>
        <trans-unit id="333a0212a994822e8ab4992b9f7ed1b517596272" translate="yes" xml:space="preserve">
          <source>The following example creates an &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; configured to create &lt;code&gt;Engine&lt;/code&gt; and &lt;code&gt;Car&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;Engine&lt;/code&gt; および &lt;code&gt;Car&lt;/code&gt; を作成するように構成された &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="261fd3f531a548336b8cf0d6d57d647deef38d68" translate="yes" xml:space="preserve">
          <source>The following example creates an animation trigger reference based on the provided name value. The provided animation value is expected to be an array consisting of state and transition declarations.</source>
          <target state="translated">以下の例では、提供された名前の値に基づいてアニメーション・トリガー参照を作成します。提供されたアニメーションの値は、状態宣言と遷移宣言からなる配列であることが予想されます。</target>
        </trans-unit>
        <trans-unit id="3e167dc197936d169a63ff9f25201dd911edd390" translate="yes" xml:space="preserve">
          <source>The following example creates the NgModule for a browser platform.</source>
          <target state="translated">次の例では、ブラウザプラットフォーム用のNgModuleを作成します。</target>
        </trans-unit>
        <trans-unit id="3277b779a9456f491e177e8fe52fa5751e71048c" translate="yes" xml:space="preserve">
          <source>The following example declares a directive that attaches a click listener to a button and counts clicks.</source>
          <target state="translated">以下の例では、ボタンにクリックリスナーを付けてクリック数をカウントするディレクティブを宣言しています。</target>
        </trans-unit>
        <trans-unit id="504d46b60ab6517d99f721584f7a281f08c56708" translate="yes" xml:space="preserve">
          <source>The following example defines a class that is injected in the HelloWorld NgModule:</source>
          <target state="translated">次の例では、HelloWorld NgModuleに注入されるクラスを定義しています。</target>
        </trans-unit>
        <trans-unit id="385249fea62104b3bc69d09ea2ae99a43dc7cb10" translate="yes" xml:space="preserve">
          <source>The following example defines a component with a large list of read-only data that is expected to change constantly, many times per second. To improve performance, we want to check and update the list less often than the changes actually occur. To do that, we detach the component's change detector and perform an explicit local check every five seconds.</source>
          <target state="translated">次の例では、1 秒間に何度も常に変化することが予想される読み取り専用のデータの大きなリストを持つコンポーネントを定義しています。パフォーマンスを向上させるために、変更が実際に発生する頻度よりも少ない頻度でリストをチェックして更新したいと考えています。そのためには、コンポーネントの変更検出器を切り離し、5 秒ごとに明示的なローカル・チェックを実行します。</target>
        </trans-unit>
        <trans-unit id="6e6eb011e3e72553c3a4d874fcea4f9f80ad1046" translate="yes" xml:space="preserve">
          <source>The following example defines a custom matcher function for AngularJS routes.</source>
          <target state="translated">以下の例では、AngularJSのルート用のカスタムマッチャー関数を定義しています。</target>
        </trans-unit>
        <trans-unit id="6a3036da832689739a091b0f5b4fbe8cbce113b6" translate="yes" xml:space="preserve">
          <source>The following example defines a reusable animation, providing some default parameter values.</source>
          <target state="translated">以下の例では、再利用可能なアニメーションを定義し、いくつかのデフォルトのパラメータ値を提供しています。</target>
        </trans-unit>
        <trans-unit id="c4be5375d4ae1b710f5883a9b833a341dfa60738" translate="yes" xml:space="preserve">
          <source>The following example defines a transition that starts by hiding the element, then makes sure that it animates properly to whatever state is currently active for trigger:</source>
          <target state="translated">次の例では、要素の非表示から始まり、現在トリガーがアクティブな状態に適切にアニメーションすることを確認するトランジションを定義しています。</target>
        </trans-unit>
        <trans-unit id="59d269fe60be0cf59ef8983da7cfaf8a22a3507d" translate="yes" xml:space="preserve">
          <source>The following example defines a view that allows the user to enter text, and then uses the pipe to convert the input text to all lower case.</source>
          <target state="translated">次の例では、ユーザーがテキストを入力し、パイプを使用して入力テキストをすべて小文字に変換するビューを定義しています。</target>
        </trans-unit>
        <trans-unit id="de85f7b251499fdbddb9828b1c8a500e43ecd131" translate="yes" xml:space="preserve">
          <source>The following example defines an error handler in the previously defined &lt;a href=&quot;http#config-service&quot;&gt;ConfigService&lt;/a&gt;.</source>
          <target state="translated">次の例では、以前に定義した&lt;a href=&quot;http#config-service&quot;&gt;ConfigService&lt;/a&gt;でエラーハンドラーを定義します。</target>
        </trans-unit>
        <trans-unit id="2dd01b7d1d707577758b12b7d6fc268e56d4a131" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; functions on the entry of an animated element.</source>
          <target state="translated">次の例では、使用する方法を示し &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; アニメーション要素のエントリに機能しています。</target>
        </trans-unit>
        <trans-unit id="e5ef1ffd5f6872d82c8f5eb05e935bc0c0603c90" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the proper sequence.</source>
          <target state="translated">以下の例は、適切な順序を示しています。</target>
        </trans-unit>
        <trans-unit id="377c3b4ed328075137db38354abc57c58a5b4a94" translate="yes" xml:space="preserve">
          <source>The following example exports the &lt;code&gt;NgFor&lt;/code&gt; directive from CommonModule.</source>
          <target state="translated">次の例では、 &lt;code&gt;NgFor&lt;/code&gt; からNgForディレクティブをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="8ec43848bb22f931f54c78e2adc9c33e204c2ff9" translate="yes" xml:space="preserve">
          <source>The following example features an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; where a user can enter a value and click a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that raises an event. The &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; then relays the data to the parent component.</source>
          <target state="translated">次の例は、ユーザーが値を入力し、イベントを発生させる &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; をクリックできる &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を特徴としています。次に、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; はデータを親コンポーネントに中継します。</target>
        </trans-unit>
        <trans-unit id="7c2c37760771f2d4e3d4a9c840bfb0e78addacbb" translate="yes" xml:space="preserve">
          <source>The following example has a trigger called &lt;code&gt;shrinkOut&lt;/code&gt;, used when an HTML element leaves the page. The animation takes whatever height the element has before it leaves, and animates from that height to zero.</source>
          <target state="translated">次の例には、HTML要素がページを離れるときに使用される &lt;code&gt;shrinkOut&lt;/code&gt; というトリガーがあります。アニメーションは、要素が離れる前の高さを取得し、その高さからゼロまでアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="80671a11690d1c6494820edc2f6918cd9870b63f" translate="yes" xml:space="preserve">
          <source>The following example illustrates this technique with the same &lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;Countdown Timer&lt;/a&gt; example. Neither its appearance nor its behavior will change. The child &lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;CountdownTimerComponent&lt;/a&gt; is the same as well.</source>
          <target state="translated">次の例は、同じ&lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;カウントダウンタイマーの&lt;/a&gt;例でこの手法を示しています。外観も動作も変わりません。子&lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;CountdownTimerComponent&lt;/a&gt;も同じです。</target>
        </trans-unit>
        <trans-unit id="f2c958ac19c1f229e0c9f4de4229570b20e7b798" translate="yes" xml:space="preserve">
          <source>The following example implementation matches HTML files.</source>
          <target state="translated">以下の実装例では、HTMLファイルにマッチしています。</target>
        </trans-unit>
        <trans-unit id="0bde1488f5ed2afee2dd79346076b401b722545f" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; function that checks whether the current user has permission to activate the requested route.</source>
          <target state="translated">次の例では、現在のユーザーが要求されたルートをアクティブ化する権限を持っているかどうかを確認する &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 関数を実装しています。</target>
        </trans-unit>
        <trans-unit id="c9c16cff4c4c72cc796f626ff5b6981cb670f366" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; function that checks whether the current user has permission to activate the requested child route.</source>
          <target state="translated">次の例では、現在のユーザーが要求された子ルートをアクティブ化する権限を持っているかどうかを確認する &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; 関数を実装します。</target>
        </trans-unit>
        <trans-unit id="d6690dc4e20a6bde732de2f6cb912585b4590cf4" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; function that checks whether the current user has permission to deactivate the requested route.</source>
          <target state="translated">次の例では、現在のユーザーが要求されたルートを非アクティブ化する権限を持っているかどうかを確認する &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 関数を実装しています。</target>
        </trans-unit>
        <trans-unit id="2ee3507c685538c2dd0613e2b0dafb884a01255d" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; function that decides whether the current user has permission to load requested child routes.</source>
          <target state="translated">次の例では、現在のユーザーが要求された子ルートをロードする権限を持っているかどうかを判断する &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 関数を実装しています。</target>
        </trans-unit>
        <trans-unit id="30ed014fa8f93ea875391728f160d5fe44d9e077" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;resolve()&lt;/code&gt; method that retrieves the data needed to activate the requested route.</source>
          <target state="translated">次の例では、要求されたルートをアクティブ化するために必要なデータを取得 &lt;code&gt;resolve()&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="2c3792394410d254743db935a2aab67da86c1faa" translate="yes" xml:space="preserve">
          <source>The following example implements the &lt;code&gt;&lt;a href=&quot;asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interface to create an async validator directive with a custom error key.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; インターフェースを実装して、カスタムエラーキーを持つ非同期バリデータディレクティブを作成します。</target>
        </trans-unit>
        <trans-unit id="035c3ba944d5fe1b15a68ebe378593a7d721c291" translate="yes" xml:space="preserve">
          <source>The following example implements the &lt;code&gt;&lt;a href=&quot;validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interface to create a validator directive with a custom error key.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; インターフェースを実装して、カスタムエラーキーを使用してValidatorディレクティブを作成します。</target>
        </trans-unit>
        <trans-unit id="5eb87a08cab370632dc43d4ddfafe2891498ebc8" translate="yes" xml:space="preserve">
          <source>The following example initializes a component with route information extracted from the snapshot of the root node at the time of creation.</source>
          <target state="translated">以下の例では、作成時のルートノードのスナップショットから抽出したルート情報でコンポーネントを初期化しています。</target>
        </trans-unit>
        <trans-unit id="3ef52a0e90fba19edb4803bf4f6127977778df17" translate="yes" xml:space="preserve">
          <source>The following example initializes the control using an options object.</source>
          <target state="translated">以下の例では、オプションオブジェクトを使用してコントロールを初期化しています。</target>
        </trans-unit>
        <trans-unit id="42da70226282f1977da6d7ab28f8de7521500fdd" translate="yes" xml:space="preserve">
          <source>The following example initializes the control with a form state object. The &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;disabled&lt;/code&gt; keys are required in this case.</source>
          <target state="translated">次の例では、フォームの状態オブジェクトを使用してコントロールを初期化しています。この &lt;code&gt;value&lt;/code&gt; 、値と &lt;code&gt;disabled&lt;/code&gt; キーが必要です。</target>
        </trans-unit>
        <trans-unit id="a2bb4e5bcae5441af519dafa4dbfbb031b95886b" translate="yes" xml:space="preserve">
          <source>The following example initializes the control with a sync validator.</source>
          <target state="translated">以下の例では、同期バリデータでコントロールを初期化しています。</target>
        </trans-unit>
        <trans-unit id="3b75e86861a97b045bc93ed007c41a8143776dfe" translate="yes" xml:space="preserve">
          <source>The following example of non-tree-shakable providers in Angular configures a service provider for the injector of an NgModule.</source>
          <target state="translated">次の例は、Angularでツリーシェイカブルではないプロバイダの例で、NgModuleのインジェクタ用のサービスプロバイダを設定しています。</target>
        </trans-unit>
        <trans-unit id="ec9e15e6d86e0c21d5745d7731be95a7ec60e570" translate="yes" xml:space="preserve">
          <source>The following example of the long form is from the JSON schema for the schematic that the CLI uses to &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;generate applications&lt;/a&gt;. It defines the prompt that allows users to choose which style preprocessor they want to use for the application being created. By using the long form, the schematic can provide more explicit formatting of the menu choices.</source>
          <target state="translated">以下の長い形式の例は、CLIが&lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;アプリケーションの生成に&lt;/a&gt;使用する回路図のJSONスキーマからのものです。作成するアプリケーションに使用するスタイルプリプロセッサをユーザーが選択できるプロンプトを定義します。長い形式を使用することにより、回路図はメニュー選択のより明確なフォーマットを提供できます。</target>
        </trans-unit>
        <trans-unit id="4f37dc68477f1bcc7af7bb9d791a86fea3c7c903" translate="yes" xml:space="preserve">
          <source>The following example puts &lt;code&gt;MinimalLogger&lt;/code&gt; to use in a simplified version of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">次の例では、置く &lt;code&gt;MinimalLogger&lt;/code&gt; をの簡易版での使用に &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e9fea711c729f49958474fdb5f92f9b366656d5" translate="yes" xml:space="preserve">
          <source>The following example queries for inner elements and animates them individually using &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">次の例では、内部要素を照会し、 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; を使用してそれらを個別にアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="f694530f5219eedcd4de38cb0d70bea2e6819f53" translate="yes" xml:space="preserve">
          <source>The following example re-implements the previous test with &lt;code&gt;DebugElement.query()&lt;/code&gt; and the browser's &lt;code&gt;By.css&lt;/code&gt; method.</source>
          <target state="translated">次の例では、 &lt;code&gt;DebugElement.query()&lt;/code&gt; とブラウザーの &lt;code&gt;By.css&lt;/code&gt; メソッドを使用して、前のテストを再実装しています。</target>
        </trans-unit>
        <trans-unit id="3382236c8e2f90c0af65e6c8d53fd60d3630e149" translate="yes" xml:space="preserve">
          <source>The following example registers a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; with first name and last name controls, and listens for the &lt;em&gt;ngSubmit&lt;/em&gt; event when the button is clicked.</source>
          <target state="translated">次の例では、姓と名のコントロールで &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を登録し、ボタンがクリックされたときに&lt;em&gt;ngSubmit&lt;/em&gt;イベントを&lt;em&gt;待機し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7d806233c265cf7577c4168fb2ec4e2bbcf34c20" translate="yes" xml:space="preserve">
          <source>The following example registers a custom validator directive. Adding the validator to the existing collection of validators requires the &lt;code&gt;multi: true&lt;/code&gt; option.</source>
          <target state="translated">次の例では、カスタムバリデータディレクティブを登録します。バリデーターを既存のバリデーターのコレクションに追加するには、 &lt;code&gt;multi: true&lt;/code&gt; オプションが必要です。</target>
        </trans-unit>
        <trans-unit id="01ae3fed79d829eaaae19c04e6f33068fa10cc52" translate="yes" xml:space="preserve">
          <source>The following example registers a nested &lt;em&gt;name&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; within an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and provides methods to retrieve the nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and individual controls.</source>
          <target state="translated">次の例は、ネストされた登録&lt;em&gt;名&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を既存の内 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、およびネストされた取得するための方法を提供 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、個々のコントロール。</target>
        </trans-unit>
        <trans-unit id="b5fc93b65bd63a01c4718e5f76612eff4c955c45" translate="yes" xml:space="preserve">
          <source>The following example registers another DOM event handler that listens for key-press events.</source>
          <target state="translated">次の例では、キープレスイベントをリッスンする別の DOM イベントハンドラを登録しています。</target>
        </trans-unit>
        <trans-unit id="322a6b3ef3f219a7bbd14499563b3ea72dcbac17" translate="yes" xml:space="preserve">
          <source>The following example returns a control with an initial value in a disabled state.</source>
          <target state="translated">以下の例では、初期値が無効な状態のコントロールを返します。</target>
        </trans-unit>
        <trans-unit id="bd9a13546ebb781b29fe8fced2d785a6e6d63b38" translate="yes" xml:space="preserve">
          <source>The following example rewrites the method with types:</source>
          <target state="translated">次の例では、型を使ってメソッドを書き換えています。</target>
        </trans-unit>
        <trans-unit id="c6ec9dd1508ebf2608cf1ab6c08758e8aba93be1" translate="yes" xml:space="preserve">
          <source>The following example sets the &lt;code&gt;OnPush&lt;/code&gt; change-detection strategy for a component (&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt;, rather than the default &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;), then forces a second check after an interval. See &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;live demo&lt;/a&gt;.</source>
          <target state="translated">次の例では、設定 &lt;code&gt;OnPush&lt;/code&gt; 成分（のために変化検出戦略を &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; はなく、デフォルトの &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; 、次に間隔の後第2のチェックを強制します）。&lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;ライブデモを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="176b987e54c53c61b674500333ce29ebfaf895b0" translate="yes" xml:space="preserve">
          <source>The following example sets the &lt;code&gt;OnPush&lt;/code&gt; change-detection strategy for a component (&lt;code&gt;CheckOnce&lt;/code&gt;, rather than the default &lt;code&gt;CheckAlways&lt;/code&gt;), then forces a second check after an interval. See &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;live demo&lt;/a&gt;.</source>
          <target state="translated">次の例では、設定 &lt;code&gt;OnPush&lt;/code&gt; 成分（のために変化検出戦略を &lt;code&gt;CheckOnce&lt;/code&gt; はなく、デフォルトの &lt;code&gt;CheckAlways&lt;/code&gt; 、次に間隔の後第2のチェックを強制します）。&lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;ライブデモを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="82aad8e63e1fb2e5e4cb8c0d93a974a17106eb21" translate="yes" xml:space="preserve">
          <source>The following example shows &lt;code&gt;NgFor&lt;/code&gt; applied to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">次の例は、単純な &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に適用された &lt;code&gt;NgFor&lt;/code&gt; を示しています。</target>
        </trans-unit>
        <trans-unit id="2b7471662574d24b0b47321a72e97d944e3b5e0c" translate="yes" xml:space="preserve">
          <source>The following example shows &lt;code&gt;NgFor&lt;/code&gt; applied to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. (Don't forget the asterisk (&lt;code&gt;*&lt;/code&gt;) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">次の例は、単純な &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に適用された &lt;code&gt;NgFor&lt;/code&gt; を示しています。（ &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; の前にあるアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）を忘れないでください。）</target>
        </trans-unit>
        <trans-unit id="d68000c7fea362289b489d24fd97b1dc2dbbceb3" translate="yes" xml:space="preserve">
          <source>The following example shows a class constructor that specifies a custom provider of a dependency using the parameter decorator.</source>
          <target state="translated">次の例は、パラメータ・デコレータを使用して依存関係のカスタム・プロバイダを指定するクラス・コンストラクタを示しています。</target>
        </trans-unit>
        <trans-unit id="c562dfbb69c1a98a82e37e0a6c0f37cf9ac5b1f6" translate="yes" xml:space="preserve">
          <source>The following example shows an event binding that implements a click handler:</source>
          <target state="translated">次の例では、クリックハンドラを実装したイベントバインディングを示しています。</target>
        </trans-unit>
        <trans-unit id="827b0895f274d258fe81610150a89118db592505" translate="yes" xml:space="preserve">
          <source>The following example shows both translation units after translating:</source>
          <target state="translated">以下の例では、翻訳後に両方の翻訳単位を表示しています。</target>
        </trans-unit>
        <trans-unit id="38acb08759fa7468886194d08506e9a0ce5417d4" translate="yes" xml:space="preserve">
          <source>The following example shows controls using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; within a form:</source>
          <target state="translated">次の例は、フォーム内で &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用するコントロールを示しています。</target>
        </trans-unit>
        <trans-unit id="0d5715ce74957eecb1458b1165c7db883217a11a" translate="yes" xml:space="preserve">
          <source>The following example shows how a component is initialized with information from the snapshot of the root node's state at the time of creation.</source>
          <target state="translated">次の例では、作成時のルート・ノードの状態のスナップショットからの情報でコンポーネントを初期化する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e1e7f20571895e868a1c8bbfb2febc742c23aa30" translate="yes" xml:space="preserve">
          <source>The following example shows how a service class is properly marked so that a supporting service can be injected upon creation.</source>
          <target state="translated">次の例では、サービスクラスが適切にマークされているので、作成時にサポートサービスが注入できるようになっています。</target>
        </trans-unit>
        <trans-unit id="be72fc12fe5cf4dad5083e92e226c1dd40573ed3" translate="yes" xml:space="preserve">
          <source>The following example shows how cases can be nested:</source>
          <target state="translated">次の例では、ケースを入れ子にする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2b046373177ebf89ea2deca1d2f5103060b13b2b" translate="yes" xml:space="preserve">
          <source>The following example shows how queries are defined and when their results are available in lifecycle hooks:</source>
          <target state="translated">次の例では、クエリがどのように定義され、その結果がいつライフサイクルフックで利用可能になるかを示しています。</target>
        </trans-unit>
        <trans-unit id="c077632398f31fdc18f53e137b5295be8371c9e1" translate="yes" xml:space="preserve">
          <source>The following example shows how the router can populate the &lt;code&gt;entryComponents&lt;/code&gt; field of an NgModule based on a router configuration that refers to components.</source>
          <target state="translated">次の例は、コンポーネントを参照するルーター構成に基づいて、NgModuleの &lt;code&gt;entryComponents&lt;/code&gt; フィールドにルーターが入力する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="63a7f69dde5a277969a1a4e4fe6f70e7f6051430" translate="yes" xml:space="preserve">
          <source>The following example shows how this works for the &lt;code&gt;LibHeaderComponent&lt;/code&gt;.</source>
          <target state="translated">次の例は、これが &lt;code&gt;LibHeaderComponent&lt;/code&gt; に対してどのように機能するかを示しています。</target>
        </trans-unit>
        <trans-unit id="66e1fdebf35092f3863e2ae7d931c94e7887b327" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例では、ngModel バインディングにアタッチされた入力にチェックボックス必須のバリデータを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="368867db6cc44008c62a0af9b4d9460201a18a2f" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a maximum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は ngModel バインディングにアタッチされた入力に最大長のバリデータを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d7fbccbb32b0f48876d290f593a4fb03cdd589f5" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a minimum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は ngModel バインディングにアタッチされた入力に最小長のバリデータを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4f808c8af5c2d51dc9eb174377afd8b05d67af5d" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a pattern validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例では、ngModel バインディングにアタッチされた入力にパターンバリデータを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="fff28e8f05131a85b2053d418fcdb7c05fec28f8" translate="yes" xml:space="preserve">
          <source>The following example shows how to add an email validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は ngModel バインディングにアタッチされた入力にメールバリデータを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1c6423f6e2b9133747ffa3e301b8f9cca3c1a40b" translate="yes" xml:space="preserve">
          <source>The following example shows how to build a dynamic ad banner.</source>
          <target state="translated">以下の例では、動的な広告バナーを構築する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ee45e1a32fc4fd748ecba48456000a2fcf666eb2" translate="yes" xml:space="preserve">
          <source>The following example shows how to capture the form values from the &quot;ngSubmit&quot; event.</source>
          <target state="translated">以下の例では、&quot;ngSubmit &quot;イベントからフォームの値をキャプチャする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a17c4cc6c273f2e36b72b19714be8b47409588fe" translate="yes" xml:space="preserve">
          <source>The following example shows how to construct a component using information from a currently activated route.</source>
          <target state="translated">以下の例では、現在有効化されている経路の情報を使用してコンポーネントを構築する方法を示します。</target>
        </trans-unit>
        <trans-unit id="6daf8cd22d12b0f67faa1ae29e1763c675f0abe5" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;iterablediffer&quot;&gt;&lt;code&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">次の例は、ファクトリの既存のリストを拡張する方法を示しています。これは、このコンポーネントとその子のインジェクターにのみ適用されます。この手順は、新しい&lt;a href=&quot;iterablediffer&quot;&gt; &lt;code&gt;IterableDiffer&lt;/code&gt; を&lt;/a&gt;使用可能にするために必要なすべてです。</target>
        </trans-unit>
        <trans-unit id="83d90a3054ebd2d5ef9a349704d34a8e5393cb26" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;keyvaluediffer&quot;&gt;&lt;code&gt;KeyValueDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">次の例は、ファクトリの既存のリストを拡張する方法を示しています。これは、このコンポーネントとその子のインジェクターにのみ適用されます。この手順は、新しい&lt;a href=&quot;keyvaluediffer&quot;&gt; &lt;code&gt;KeyValueDiffer&lt;/code&gt; を&lt;/a&gt;使用可能にするために必要なすべてです。</target>
        </trans-unit>
        <trans-unit id="6b4c2655698aa0d2203e75b1289d0487cadd44e2" translate="yes" xml:space="preserve">
          <source>The following example shows how to find and focus the main content header in the DOM after navigation.</source>
          <target state="translated">次の例では、ナビゲーションの後に DOM 内のメインコンテンツヘッダを見つけてフォーカスする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="51b27d39b057cf93861bc4cc7466e579ed4f5751" translate="yes" xml:space="preserve">
          <source>The following example shows how to make a simple progress bar accessible by using host binding to control accessibility-related attributes.</source>
          <target state="translated">次の例では、ホストバインディングを使用してアクセス性関連の属性を制御することで、シンプルなプログレスバーをアクセス可能にする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c073c8370f0fb140a2c5b53a1c60c97c7e0c7fcd" translate="yes" xml:space="preserve">
          <source>The following example shows how to register a standalone control and set its value.</source>
          <target state="translated">以下の例では、スタンドアロンコントロールを登録し、その値を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7a085757bc3f13deb2551df0f93cb8afa2b12e6b" translate="yes" xml:space="preserve">
          <source>The following example shows how to register multiple form controls within a form group and set their value.</source>
          <target state="translated">以下の例では、フォームグループ内に複数のフォームコントロールを登録し、その値を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="753777b9371d3ae9ecb481a0c637e9a066a45072" translate="yes" xml:space="preserve">
          <source>The following example shows how to send and display a message each time the user clicks on a hero, showing a history of the user's selections. This will be helpful when you get to the next section on &lt;a href=&quot;toh-pt5&quot;&gt;Routing&lt;/a&gt;.</source>
          <target state="translated">次の例は、ユーザーがヒーローをクリックするたびにメッセージを送信および表示する方法を示し、ユーザーの選択の履歴を示しています。これは、&lt;a href=&quot;toh-pt5&quot;&gt;ルーティング&lt;/a&gt;に関する次のセクションに進むときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="930bda03e66eaebd95b1046a1962b91ce72793e6" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the &lt;code&gt;enableIvy&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; in order to opt out of Ivy.</source>
          <target state="translated">次の例は、Ivyをオプトアウトするために &lt;code&gt;enableIvy&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="30eabaeacb625269edcf1666307b88665a375dcc" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in a child component that pushes data from an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to an array in the parent component.</source>
          <target state="translated">次の例は、HTMLの &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; から親コンポーネントの配列にデータをプッシュする子コンポーネントに &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a4a8014d1e2c1017305a9a1388855d8f4840149a" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in a child component that pushes data you enter in an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to an array in the parent component.</source>
          <target state="translated">次の例は、HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に入力したデータを親コンポーネントの配列にプッシュする子コンポーネントで &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="59c573eec5946e813c45e18762fdeb1633ef0ed4" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a checkbox with a reactive form.</source>
          <target state="translated">次の例では、リアクティブフォームでチェックボックスを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cc2f6dbf31261ec056919eb80f43040dc8866c26" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a number input with a reactive form.</source>
          <target state="translated">以下の例では、リアクティブフォームで数値入力を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cbeaaa1764396b191a1fa427696ca459afa3e019" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a range input with a reactive form.</source>
          <target state="translated">以下の例では、リアクティブフォームで範囲入力を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2958492ec328342f9b159f183a274c8962939e29" translate="yes" xml:space="preserve">
          <source>The following example shows how to use an input element that activates the default value accessor (in this case, a text field).</source>
          <target state="translated">以下の例では、デフォルト値アクセサ(この場合はテキストフィールド)を有効にする入力要素を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1373b177c05a62a912a3ee24e9df3148944e063e" translate="yes" xml:space="preserve">
          <source>The following example shows how to use more than one case to display the same view:</source>
          <target state="translated">以下の例では、複数のケースを使用して同じビューを表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="57f6f5878666eda756817f7b7efb36774821b332" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this feature:</source>
          <target state="translated">以下の例では、この機能の使用方法を説明します。</target>
        </trans-unit>
        <trans-unit id="6afcdea92b2f9be1919de79ba7cbfe3d0ac7d219" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this token to configure the root app injector with a base href value, so that the DI framework can supply the dependency anywhere in the app.</source>
          <target state="translated">次の例では、DIフレームワークがアプリ内のどこにでも依存関係を供給できるように、このトークンを使用してベース href 値でルートアプリのインジェクタを構成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="21b73d4c6eefa6f6b8440ab7e8d3a63891d22e87" translate="yes" xml:space="preserve">
          <source>The following example shows how you can pipe a failed request to the &lt;code&gt;retry()&lt;/code&gt; operator before passing it to the error handler.</source>
          <target state="translated">次の例は、失敗した要求をエラーハンドラーに渡す前に、 &lt;code&gt;retry()&lt;/code&gt; オペレーターにパイプする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4e3a34aedb9bfaf54b7c7dd0dfc38839f2bb3bda" translate="yes" xml:space="preserve">
          <source>The following example shows how you modify the &lt;code&gt;server.ts&lt;/code&gt; file to provide the &lt;code&gt;AppServerModuleNgFactory&lt;/code&gt; as the bootstrap module.</source>
          <target state="translated">次の例は、 &lt;code&gt;server.ts&lt;/code&gt; ファイルを変更して &lt;code&gt;AppServerModuleNgFactory&lt;/code&gt; をブートストラップモジュールとして提供する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ed75cbe6bb40317bb4bb2c531bc2db64f9e0314d" translate="yes" xml:space="preserve">
          <source>The following example shows how, when an old token has expired, you can update the authorization header before making the next request.</source>
          <target state="translated">次の例では、古いトークンが期限切れになったときに、次のリクエストを行う前に認証ヘッダを更新する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5d099819839fc1d380d48e3ae14ffad753838d5c" translate="yes" xml:space="preserve">
          <source>The following example shows that &lt;code&gt;AppComponent&lt;/code&gt; declares its dependence on &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContext&lt;/code&gt;.</source>
          <target state="translated">次の例は、 &lt;code&gt;AppComponent&lt;/code&gt; が &lt;code&gt;LoggerService&lt;/code&gt; および &lt;code&gt;UserContext&lt;/code&gt; への依存を宣言していることを示しています。</target>
        </trans-unit>
        <trans-unit id="e29f6dab32f69c4fc81f0d98153b2a1746783d30" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt; so that all locales defined in the build configuration are built:</source>
          <target state="translated">次の例は、 &lt;code&gt;angular.json&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; に設定された &lt;code&gt;&quot;localize&quot;&lt;/code&gt; オプションを示しています。これにより、ビルド構成で定義されたすべてのロケールがビルドされます。</target>
        </trans-unit>
        <trans-unit id="9eab0e12b63f05899de75dd09db3f2df2fc6187d" translate="yes" xml:space="preserve">
          <source>The following example shows the result of transforming various strings into title case.</source>
          <target state="translated">以下の例では、各種文字列をタイトルケースに変換した結果を示しています。</target>
        </trans-unit>
        <trans-unit id="997f1dc43f8aed6fbbf9fd368a2a5dd9ea934b79" translate="yes" xml:space="preserve">
          <source>The following example shows the shorthand syntax with some options, contained in an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">次の例は、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素に含まれるいくつかのオプションを含む略記構文を示しています。</target>
        </trans-unit>
        <trans-unit id="a09b23068c66780f14d250956e96be5e43143ec4" translate="yes" xml:space="preserve">
          <source>The following example shows the tree-shakable equivalent to the &lt;code&gt;ServiceModule&lt;/code&gt; example above.</source>
          <target state="translated">次の例は、上記の &lt;code&gt;ServiceModule&lt;/code&gt; の例と同等のツリーを揺さぶることができます。</target>
        </trans-unit>
        <trans-unit id="1d184cef72e57c09334c7d9ea86b425dc3afa8c4" translate="yes" xml:space="preserve">
          <source>The following example shows two event emitters that emit on an interval. One emits an output every second, while the other emits every five seconds.</source>
          <target state="translated">次の例は、間隔をおいて出力する 2 つのイベントエミッタを示しています。1つは1秒ごとに出力し、もう1つは5秒ごとに出力します。</target>
        </trans-unit>
        <trans-unit id="4fa0134b226089dfa9e52f6ee7309d2a93b5af04" translate="yes" xml:space="preserve">
          <source>The following example shows you an alternate way to set the name attribute. Here, an attribute identified as name is used within a custom form control component. To still be able to specify the NgModel's name, you must specify it using the &lt;code&gt;ngModelOptions&lt;/code&gt; input instead.</source>
          <target state="translated">次の例は、name属性を設定する別の方法を示しています。ここでは、名前として識別された属性がカスタムフォームコントロールコンポーネント内で使用されています。NgModelの名前を引き続き指定できるようにするには、代わりに &lt;code&gt;ngModelOptions&lt;/code&gt; 入力を使用して指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1dffb0edfdea8768fda5ebffcf29790b5b84c38b" translate="yes" xml:space="preserve">
          <source>The following example shows you an alternate way to set the name attribute. The name attribute is used within a custom form component, and the name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; property serves a different purpose.</source>
          <target state="translated">次の例は、name属性を設定する別の方法を示しています。name属性はカスタムフォームコンポーネント内で使用され、name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; プロパティは別の目的を果たします。</target>
        </trans-unit>
        <trans-unit id="988b27a653275f3bff65878a5b895d72cd36c77e" translate="yes" xml:space="preserve">
          <source>The following example shows you how to change the &quot;updateOn&quot; option from its default using ngFormOptions.</source>
          <target state="translated">次の例では、ngFormOptionsを使用して &quot;updateOn &quot;オプションをデフォルトから変更する方法を示します。</target>
        </trans-unit>
        <trans-unit id="1e3b26c117fe86b059fd6e1a2232c67d9b63c33b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to combine controls together in a sub-group of the form.</source>
          <target state="translated">次の例は、フォームのサブグループにコントロールを結合する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7d204404893de6271980acee275f77cae148739b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to display the current value using interpolation in the template.</source>
          <target state="translated">以下の例では、テンプレート内で補間を利用して現在の値を表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4e608b8fa3a6ec40fbf7c4e18bae5bb29410e2d4" translate="yes" xml:space="preserve">
          <source>The following example shows you how to manage an array of &lt;em&gt;aliases&lt;/em&gt; in &lt;code&gt;ProfileEditor&lt;/code&gt;.</source>
          <target state="translated">次の例は、 &lt;code&gt;ProfileEditor&lt;/code&gt; で&lt;em&gt;エイリアスの&lt;/em&gt;配列を管理する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9dc1f820ec5c4e31a3ed11dfe150c2b8b75987f2" translate="yes" xml:space="preserve">
          <source>The following example shows you how to use a standalone ngModel control within a form. This controls the display of the form, but doesn't contain form data.</source>
          <target state="translated">次の例では、フォーム内でスタンドアロンの ngModel コントロールを使用する方法を示しています。これはフォームの表示を制御しますが、フォームのデータは含まれません。</target>
        </trans-unit>
        <trans-unit id="0a96a492f032a547b6f9125b434d8ea060fd4733" translate="yes" xml:space="preserve">
          <source>The following example stores the provided function as an internal method.</source>
          <target state="translated">以下の例では、提供された関数を内部メソッドとして格納します。</target>
        </trans-unit>
        <trans-unit id="dff5d128062231c449f19fedce3237c98b922507" translate="yes" xml:space="preserve">
          <source>The following example targets all &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements, from the host element down through this component to all of its child elements in the DOM.</source>
          <target state="translated">次の例では、ホスト要素からこのコンポーネントを経由してDOM内のすべての子要素に至るまで、すべての &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 要素をターゲットにしています。</target>
        </trans-unit>
        <trans-unit id="fa3b01423ddb68412ec695cd4482c822e7a7e696" translate="yes" xml:space="preserve">
          <source>The following example tries to set the component's &lt;code&gt;template&lt;/code&gt; property to the value of the exported &lt;code&gt;someTemplate&lt;/code&gt; variable which is declared but &lt;em&gt;unassigned&lt;/em&gt;.</source>
          <target state="translated">次の例では、コンポーネントの &lt;code&gt;template&lt;/code&gt; プロパティを、宣言されているが&lt;em&gt;割り当てられていない&lt;/em&gt;、エクスポートされた &lt;code&gt;someTemplate&lt;/code&gt; 変数の値に設定しようとして&lt;em&gt;い&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="251fedbc0f6af371679f4fa156ce7e3909346a2e" translate="yes" xml:space="preserve">
          <source>The following example uses a template reference variable to implement a keystroke loopback in a simple template.</source>
          <target state="translated">次の例では、テンプレート参照変数を使用して、シンプルなテンプレートにキーストロークループバックを実装しています。</target>
        </trans-unit>
        <trans-unit id="44de5ab363b46660288190c053d7a6213ed61eaa" translate="yes" xml:space="preserve">
          <source>The following example uses auto-styling to allow a component to animate from a height of 0 up to the height of the parent element:</source>
          <target state="translated">次の例では、オートスタイリングを使用して、高さ 0 から親要素の高さまでのコンポーネントをアニメーションさせています。</target>
        </trans-unit>
        <trans-unit id="069cb9c50eee1cb12d158d3323cefcaab458ccbe" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access individual controls within the group using dot syntax.</source>
          <target state="translated">次の例では、&lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;メソッドを使用して、ドット構文を使用してグループ内の個々のコントロールにアクセスします。</target>
        </trans-unit>
        <trans-unit id="d4b4122ac3506b5e300f9fe1f7412e28b945f0eb" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access the associated &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">次の例では、&lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;メソッドを使用して、関連付けられた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; にアクセスします</target>
        </trans-unit>
        <trans-unit id="0ec44a3326cea8016f405a38962d167a49282ce9" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;ignore&lt;/code&gt; field to exclude certain files in the assets folder from being copied into the build:</source>
          <target state="translated">次の例では、 &lt;code&gt;ignore&lt;/code&gt; フィールドを使用して、assetsフォルダー内の特定のファイルをビルドにコピーされないように除外しています。</target>
        </trans-unit>
        <trans-unit id="3e56ffd819165612fe56a5992a4923c230d0d1e1" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator in a component constructor.</source>
          <target state="translated">次の例では、コンポーネントのコンストラクタでデコレータを使用しています。</target>
        </trans-unit>
        <trans-unit id="a8c7463a3393222be8d46d4da5183bba8a942e94" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator to inject the string literal &lt;code&gt;text&lt;/code&gt; in a directive.</source>
          <target state="translated">次の例では、デコレータを使用して、ディレクティブに文字列リテラル &lt;code&gt;text&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="ca768a6447856248e05d7cc58b53fac8ddd37f3d" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator to inject the string literal &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="translated">次の例では、デコレータを使用して文字列リテラル &lt;code&gt;text&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="eb5ef26847f4c6bb4576ebd5051a24fffc69f9b8" translate="yes" xml:space="preserve">
          <source>The following example writes a value to the native DOM element.</source>
          <target state="translated">次の例では、ネイティブの DOM 要素に値を書き込みます。</target>
        </trans-unit>
        <trans-unit id="0448b018d57bb9f2222c8c20ea401d05a44b3304" translate="yes" xml:space="preserve">
          <source>The following example, the &lt;code&gt;searchHeroes()&lt;/code&gt; method queries for heroes whose names contain the search term.</source>
          <target state="translated">次の例では、 &lt;code&gt;searchHeroes()&lt;/code&gt; メソッドは、名前に検索語が含まれているヒーローを照会します。</target>
        </trans-unit>
        <trans-unit id="72f05bc4e050c0a036b7ee9e401d609482e4015f" translate="yes" xml:space="preserve">
          <source>The following examples create animation styles that collect a set of CSS property values:</source>
          <target state="translated">以下の例では、CSS プロパティ値のセットを収集するアニメーション スタイルを作成しています。</target>
        </trans-unit>
        <trans-unit id="459e7a5210520be2ebdc86dc38684f6553aa04d7" translate="yes" xml:space="preserve">
          <source>The following examples define transitions between the two defined states (and default states), using various options:</source>
          <target state="translated">以下の例では、さまざまなオプションを使用して、2 つの定義された状態 (およびデフォルト状態)間の遷移を定義しています。</target>
        </trans-unit>
        <trans-unit id="6c7c13798e2458b819d456bfdd01d7da3d7c6730" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate how to modify default change-detection behavior to perform explicit detection when needed.</source>
          <target state="translated">以下の例は、デフォルトの変更検出動作を変更して、必要に応じて明示的な検出を実行する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="266b3c28a99dcc0271b98aca24752e14498d4846" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate the call sequence and relative frequency of the various lifecycle events, and how the hooks can be used separately or together for components and directives.</source>
          <target state="translated">以下の例では、さまざまなライフサイクルイベントの呼び出し順序と相対的な頻度、およびフックがコンポーネントやディレクティブに対して別々に、または一緒にどのように使用できるかを示しています。</target>
        </trans-unit>
        <trans-unit id="a2dba34eb7491a58432ad4932be25b6ceb269f40" translate="yes" xml:space="preserve">
          <source>The following examples revisit two of the &lt;code&gt;TwainComponent&lt;/code&gt; tests with marble testing.</source>
          <target state="translated">次の例では、大理石のテストを &lt;code&gt;TwainComponent&lt;/code&gt; 2つのTwainComponentテストを再確認します。</target>
        </trans-unit>
        <trans-unit id="7ce6c370d2612e821d0b2613bfab293f81f00781" translate="yes" xml:space="preserve">
          <source>The following examples show a &lt;code&gt;.browserslistrc&lt;/code&gt; and &lt;code&gt;tsconfig.json&lt;/code&gt; file for a newly created Angular application. In this configuration, legacy browsers such as IE 9-11 are ignored, and the compilation target is ES2015.</source>
          <target state="translated">次の例は示して &lt;code&gt;.browserslistrc&lt;/code&gt; と &lt;code&gt;tsconfig.json&lt;/code&gt; 新しく作成された角度のアプリケーションのファイルを。この構成では、IE 9-11などのレガシーブラウザーは無視され、コンパイル対象はES2015です。</target>
        </trans-unit>
        <trans-unit id="fe4d1dc55bed59fbfefe7303b68660eabb2d82d0" translate="yes" xml:space="preserve">
          <source>The following examples show a simple standalone control using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用した簡単なスタンドアロンコントロールを示しています。</target>
        </trans-unit>
        <trans-unit id="40c3a547833ea48c38e9ba12166d16ea92ec9ffb" translate="yes" xml:space="preserve">
          <source>The following examples show how to add a single form control. In the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</source>
          <target state="translated">以下の例は、単一のフォームコントロールを追加する方法を示しています。この例では、ユーザーが入力フィールドに名前を入力し、その入力値をキャプチャし、フォームコントロール要素の現在の値を表示しています。</target>
        </trans-unit>
        <trans-unit id="5d6f06a8de95d33332632f7f30628896d5e665bb" translate="yes" xml:space="preserve">
          <source>The following examples show how to refactor the &lt;code&gt;ProfileEditor&lt;/code&gt; component to use the form builder service to create form control and form group instances.</source>
          <target state="translated">次の例は、 &lt;code&gt;ProfileEditor&lt;/code&gt; コンポーネントをリファクタリングして、フォームビルダーサービスを使用してフォームコントロールとフォームグループインスタンスを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4fc88102b63983b94153026634db490e12748eb6" translate="yes" xml:space="preserve">
          <source>The following examples show how to use a select control in a reactive form.</source>
          <target state="translated">以下の例では、リアクティブフォームでセレクトコントロールを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="237f9f6e9900e6f0dc1fc654e095fe6275c71b7a" translate="yes" xml:space="preserve">
          <source>The following examples show various &lt;code&gt;timings&lt;/code&gt; specifications.</source>
          <target state="translated">次の例は、さまざまな &lt;code&gt;timings&lt;/code&gt; 仕様を示しています。</target>
        </trans-unit>
        <trans-unit id="5f4d2b0076660bb96fee07f703fa6b241bb56e96" translate="yes" xml:space="preserve">
          <source>The following examples shows how to register a standalone control and set its value.</source>
          <target state="translated">以下の例では、スタンドアロンコントロールを登録し、その値を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8514f98ee54c6d7f9e2628e3962d79053cdd4d14" translate="yes" xml:space="preserve">
          <source>The following exported values can be aliased to local variables:</source>
          <target state="translated">以下のエクスポートされた値は、ローカル変数にエイリアスすることができます。</target>
        </trans-unit>
        <trans-unit id="48152eb7bf1f90cbf4d34795f898cd8c86489514" translate="yes" xml:space="preserve">
          <source>The following figure shows the final form.</source>
          <target state="translated">下図は最終形態を示しています。</target>
        </trans-unit>
        <trans-unit id="62e616b6d0095e3bb10360974145d786228761d7" translate="yes" xml:space="preserve">
          <source>The following format message in the component template binds to the component's &lt;code&gt;gender&lt;/code&gt; property, which outputs one of the following string values: &quot;male&quot;, &quot;female&quot; or &quot;other&quot;. The message maps those values to the appropriate translations:</source>
          <target state="translated">コンポーネントテンプレートの次の形式のメッセージは、コンポーネントの &lt;code&gt;gender&lt;/code&gt; プロパティにバインドされ、「male」、「female」、「other」のいずれかの文字列値を出力します。メッセージはこれらの値を適切な翻訳にマッピングします：</target>
        </trans-unit>
        <trans-unit id="cd2c50363a1ac131bdc0802c1585f2ee2c72aede" translate="yes" xml:space="preserve">
          <source>The following fragment shows how a component gets the root node of the current state to establish its own route tree:</source>
          <target state="translated">次のフラグメントは、コンポーネントが現在の状態のルートノードを取得して独自のルートツリーを確立する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="257cd6c433a723247e55e6b1ea41d9b5ac15489c" translate="yes" xml:space="preserve">
          <source>The following hooks take action based on changing values &lt;em&gt;within the child view&lt;/em&gt;, which can only be reached by querying for the child view via the property decorated with &lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild&lt;/a&gt;.</source>
          <target state="translated">次のフックは&lt;em&gt;、子ビュー内の&lt;/em&gt;値の変更に基づいてアクションを実行し&lt;em&gt;ます&lt;/em&gt;。これは、&lt;a href=&quot;../api/core/viewchild&quot;&gt;@ ViewChildで&lt;/a&gt;装飾されたプロパティを介して子ビューをクエリすることによってのみ到達できます。</target>
        </trans-unit>
        <trans-unit id="e81974601b5eeac5fe055890e3562d697f17cbf9" translate="yes" xml:space="preserve">
          <source>The following image shows the effect of mousing over the &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">次の画像は、 &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; タグに対するマウスの効果を示しています。</target>
        </trans-unit>
        <trans-unit id="0be1b281c327a57359a32dbec200dbb405ead34f" translate="yes" xml:space="preserve">
          <source>The following invokes the defined animation with a call to &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;, passing in override parameter values.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; を呼び出して定義済みのアニメーションを呼び出し、オーバーライドパラメータ値を渡します。</target>
        </trans-unit>
        <trans-unit id="27db2b5bc00e4f188ea46c5deb7fb5587ac85224" translate="yes" xml:space="preserve">
          <source>The following is a &lt;code&gt;setCurrentStyles()&lt;/code&gt; method that sets a component property, &lt;code&gt;currentStyles&lt;/code&gt;, with an object that defines three styles, based on the state of three other component properties:</source>
          <target state="translated">以下は、他の3つのコンポーネントプロパティの状態に基づいて3つのスタイルを定義するオブジェクトを使用して、コンポーネントプロパティ &lt;code&gt;currentStyles&lt;/code&gt; を設定する &lt;code&gt;setCurrentStyles()&lt;/code&gt; メソッドです。</target>
        </trans-unit>
        <trans-unit id="610692584293dfd2fb6fcb4af8bd9c779e7a454d" translate="yes" xml:space="preserve">
          <source>The following is a child &lt;code&gt;CountdownTimerComponent&lt;/code&gt; that repeatedly counts down to zero and launches a rocket. It has &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods that control the clock and it displays a countdown status message in its own template.</source>
          <target state="translated">以下は、ゼロまで繰り返しカウントダウンしてロケットを発射する子 &lt;code&gt;CountdownTimerComponent&lt;/code&gt; です。それは持って &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; クロックを制御する方法を、それは、独自のテンプレートでカウントダウンステータスメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="e9268067c94938c5caa50ff3139fd9e04179824a" translate="yes" xml:space="preserve">
          <source>The following is a list of the example applications in the &lt;a href=&quot;docs&quot;&gt;Angular documentation&lt;/a&gt;.</source>
          <target state="translated">以下は、&lt;a href=&quot;docs&quot;&gt;Angularドキュメントの&lt;/a&gt;サンプルアプリケーションのリストです。</target>
        </trans-unit>
        <trans-unit id="f42fb5dd79eeb75c35a53b5e4c7e7cf062c235af" translate="yes" xml:space="preserve">
          <source>The following is a two-element array when specifying a route parameter:</source>
          <target state="translated">以下は、経路パラメータを指定する場合の2要素配列です。</target>
        </trans-unit>
        <trans-unit id="7326f4531184dc8d93c37051d97ac9e13cd1c12e" translate="yes" xml:space="preserve">
          <source>The following is a typical example.</source>
          <target state="translated">以下はその代表的な例です。</target>
        </trans-unit>
        <trans-unit id="55843c76bb937b5c99ade8fb44814616949b7628" translate="yes" xml:space="preserve">
          <source>The following is an example of how the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; view trees are combined into a single logical tree:</source>
          <target state="translated">以下は、 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; ビューツリーを単一の論理ツリーに組み合わせる方法の例です。</target>
        </trans-unit>
        <trans-unit id="664fbc064070f409303fb12c41e2bb73522bd8a0" translate="yes" xml:space="preserve">
          <source>The following is an example of how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to link the two modules.</source>
          <target state="translated">以下は、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用して2つのモジュールをリンクする方法の例です。</target>
        </trans-unit>
        <trans-unit id="8607bb858867baa84b109da9d0c1ff3859efd04b" translate="yes" xml:space="preserve">
          <source>The following is an example of specifying a bootstrapped component, &lt;code&gt;AppComponent&lt;/code&gt;, in a basic &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">以下は、基本的な &lt;code&gt;app.module.ts&lt;/code&gt; でブートストラップされたコンポーネント &lt;code&gt;AppComponent&lt;/code&gt; を指定する例です。</target>
        </trans-unit>
        <trans-unit id="453ca73d33c283d35d71394c3a21baf84fabbce3" translate="yes" xml:space="preserve">
          <source>The following is an example of writing the disabled property to a native DOM element:</source>
          <target state="translated">ネイティブのDOM要素にdisabledプロパティを書き込む例です。</target>
        </trans-unit>
        <trans-unit id="c86223c1070b4610146f7c7d0ac81f5f24cd9255" translate="yes" xml:space="preserve">
          <source>The following is another code sample using the wildcard state together with the previous example using the &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states. Instead of defining each state-to-state transition pair, any transition to &lt;code&gt;closed&lt;/code&gt; takes 1 second, and any transition to &lt;code&gt;open&lt;/code&gt; takes 0.5 seconds.</source>
          <target state="translated">以下は、ワイルドカード状態を使用した別のコードサンプルと、 &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; 状態を使用した前の例です。各状態から状態への遷移ペアを定義する代わりに、 &lt;code&gt;closed&lt;/code&gt; 状態への遷移には1秒かかり、 &lt;code&gt;open&lt;/code&gt; への遷移には0.5秒かかります。</target>
        </trans-unit>
        <trans-unit id="47af1b19b7fb7b2b7952f70164ec8967201e7e99" translate="yes" xml:space="preserve">
          <source>The following is the expanded browser console output of the &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;()&lt;/code&gt; function with the name of &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下は、 &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;()&lt;/code&gt; という名前の &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; （）関数の拡張ブラウザコンソール出力です。</target>
        </trans-unit>
        <trans-unit id="8fb7a4128454c301515b108ffaddee95b06eee50" translate="yes" xml:space="preserve">
          <source>The following line adds the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configures it with the &lt;code&gt;routes&lt;/code&gt; in one step by calling &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次の行は、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 配列に追加し、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、1ステップで &lt;code&gt;routes&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="4c213d3006636281ad2c616f5600a638669bd1bc" translate="yes" xml:space="preserve">
          <source>The following link adds a query parameter and a fragment to the generated URL:</source>
          <target state="translated">次のリンクは、生成されたURLにクエリパラメータとフラグメントを追加します。</target>
        </trans-unit>
        <trans-unit id="301a3f6c250317996f1a7e73563e3c1f2daa213c" translate="yes" xml:space="preserve">
          <source>The following matcher matches HTML files.</source>
          <target state="translated">以下のマッチャーはHTMLファイルにマッチします。</target>
        </trans-unit>
        <trans-unit id="83a0220d96181a0c46c53a96148b7b6bcc5e42fa" translate="yes" xml:space="preserve">
          <source>The following minimal &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; example builds upon a specified &lt;a href=&quot;router-tutorial-toh#a-crisis-center-with-child-routes&quot;&gt;default child route&lt;/a&gt; for the crisis center.</source>
          <target state="translated">次の最小限の &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; の例は、危機管理センターの指定された&lt;a href=&quot;router-tutorial-toh#a-crisis-center-with-child-routes&quot;&gt;デフォルトの子ルートに&lt;/a&gt;基づいています。</target>
        </trans-unit>
        <trans-unit id="e33bb6a1447bcd26785782ccf0ad8a16d36a357d" translate="yes" xml:space="preserve">
          <source>The following options are available for configuring the AOT template compiler.</source>
          <target state="translated">AOT テンプレートコンパイラの設定には以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="085ddba18b2c5265e10006f356e68568d4824afc" translate="yes" xml:space="preserve">
          <source>The following options are available for configuring the AoT template compiler.</source>
          <target state="translated">AoTテンプレートコンパイラの設定には、以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="bc78819d810ff269dc610903ab67d72f0566f184" translate="yes" xml:space="preserve">
          <source>The following pattern is deprecated:</source>
          <target state="translated">以下のパターンは非推奨です。</target>
        </trans-unit>
        <trans-unit id="dfcc5dab05630152017f437c01aea4388857e4f2" translate="yes" xml:space="preserve">
          <source>The following polyfills are used to test the framework itself. They are a good starting point for an application.</source>
          <target state="translated">以下のポリフィルはフレームワーク自体をテストするために使用されます。これらはアプリケーションの良い出発点です。</target>
        </trans-unit>
        <trans-unit id="e3d0650581e15a43999d42a2416501047b4f3a7b" translate="yes" xml:space="preserve">
          <source>The following properties, at the top level of the file, configure the workspace.</source>
          <target state="translated">ファイルの最上位にある以下のプロパティは、ワークスペースを構成します。</target>
        </trans-unit>
        <trans-unit id="7e985ef8314fd51479546a4ad9e18907e6515ed5" translate="yes" xml:space="preserve">
          <source>The following provider object uses the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key to associate the variable with the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">次のプロバイダーオブジェクトは、 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; キーを使用して変数を &lt;code&gt;Logger&lt;/code&gt; トークンに関連付けます。</target>
        </trans-unit>
        <trans-unit id="c08151db40c7e46fba3e11d6139b40cc883c8c3d" translate="yes" xml:space="preserve">
          <source>The following provider object uses the &lt;code&gt;useValue&lt;/code&gt; key to associate the variable with the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">次のプロバイダーオブジェクトは、 &lt;code&gt;useValue&lt;/code&gt; キーを使用して、変数を &lt;code&gt;Logger&lt;/code&gt; トークンに関連付けます。</target>
        </trans-unit>
        <trans-unit id="bbc0fd0eea4d2a8cddd9a7e3f0326bee5acde118" translate="yes" xml:space="preserve">
          <source>The following revised version of the &lt;code&gt;CachingInterceptor&lt;/code&gt; optionally returns an observable that immediately emits the cached response, sends the request on to the npm web API, and emits again later with the updated search results.</source>
          <target state="translated">次の改訂版の &lt;code&gt;CachingInterceptor&lt;/code&gt; は、オプションで、キャッシュされた応答をすぐに発行し、リクエストをnpm Web APIに送信し、更新された検索結果とともに後で再度発行するオブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="99189183b4cb84682cca267b2e990eeba8a565d5" translate="yes" xml:space="preserve">
          <source>The following route creates sibling components with multiple outlets. When navigating to &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt;, the router creates the 'Team' component next to the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</source>
          <target state="translated">次のルートは、複数のアウトレットを持つ兄弟コンポーネントを作成します。移動するときは &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt; 、ルータは「チーム」コンポーネント[チャット]コンポーネントの横を作成します。「Chat」コンポーネントは「aux」コンセントに配置されます。</target>
        </trans-unit>
        <trans-unit id="9dd6c9b80bc0194ec4f3aac76cae7d2d01f577d8" translate="yes" xml:space="preserve">
          <source>The following route specifies that when navigating to, for example, &lt;code&gt;/team/11/user/bob&lt;/code&gt;, the router creates the 'Team' component with the 'User' child component in it.</source>
          <target state="translated">次のルートは、たとえば &lt;code&gt;/team/11/user/bob&lt;/code&gt; に移動するときに、ルーターが「ユーザー」子コンポーネントを含む「チーム」コンポーネントを作成することを指定しています。</target>
        </trans-unit>
        <trans-unit id="98cd7483f8aba2a02696564fcb82530e8aa235b9" translate="yes" xml:space="preserve">
          <source>The following route uses the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; property to ignore a segment of a given URL when looking for a child path.</source>
          <target state="translated">次のルートは、 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; プロパティを使用して、子パスを探すときに、指定されたURLのセグメントを無視します。</target>
        </trans-unit>
        <trans-unit id="38d574a5fe52f7e7cedf53283a1b043980e8df72" translate="yes" xml:space="preserve">
          <source>The following route uses the &lt;code&gt;redirectTo&lt;/code&gt; property to ignore a segment of a given URL when looking for a child path.</source>
          <target state="translated">次のルートは、 &lt;code&gt;redirectTo&lt;/code&gt; プロパティを使用して、子パスを検索するときに特定のURLのセグメントを無視します。</target>
        </trans-unit>
        <trans-unit id="2b01e0c8059fc0401e8549e70d7dcf5bc5f7ee96" translate="yes" xml:space="preserve">
          <source>The following route uses wild-card notation to specify a component that is always instantiated regardless of where you navigate to.</source>
          <target state="translated">次のルートでは、どこに移動しても常にインスタンス化されるコンポーネントを指定するためにワイルドカード表記を使用しています。</target>
        </trans-unit>
        <trans-unit id="a6454d98dfd985ac59580f707d0a349be9a74d91" translate="yes" xml:space="preserve">
          <source>The following section refactors the &lt;code&gt;ProfileEditor&lt;/code&gt; component to use the form builder service to create form control and form group instances.</source>
          <target state="translated">次のセクションでは、 &lt;code&gt;ProfileEditor&lt;/code&gt; コンポーネントをリファクタリングして、フォームビルダーサービスを使用してフォームコントロールとフォームグループのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="5465ea2f359e32bfe1a37ff57e84812529ef826d" translate="yes" xml:space="preserve">
          <source>The following sections excerpt methods of the sample's &lt;code&gt;HeroesService&lt;/code&gt;.</source>
          <target state="translated">以下のセクションでは、サンプルの &lt;code&gt;HeroesService&lt;/code&gt; のメソッドを抜粋しています。</target>
        </trans-unit>
        <trans-unit id="a76c578936ab27254fb8d939de7a81db9437d38c" translate="yes" xml:space="preserve">
          <source>The following sections, comprising most of this guide, explore common component testing scenarios</source>
          <target state="translated">このガイドの大部分を占める以下のセクションでは、一般的なコンポーネントテストのシナリオについて説明します。</target>
        </trans-unit>
        <trans-unit id="7fdb271994a4a327f199629fee13b3b5218174bf" translate="yes" xml:space="preserve">
          <source>The following selectors are supported.</source>
          <target state="translated">以下のセレクタに対応しています。</target>
        </trans-unit>
        <trans-unit id="5b0248f72441058a2d81893bf871c0a2c0bb3d1c" translate="yes" xml:space="preserve">
          <source>The following shows &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; guarding two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s. The &lt;code&gt;currentCustomer&lt;/code&gt; name appears only when there is a &lt;code&gt;currentCustomer&lt;/code&gt;. The &lt;code&gt;nullCustomer&lt;/code&gt; will not be displayed as long as it is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">以下は、2つの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; を示しています。 &lt;code&gt;currentCustomer&lt;/code&gt; のがある場合にのみ名前が表示されます &lt;code&gt;currentCustomer&lt;/code&gt; 。 &lt;code&gt;nullCustomer&lt;/code&gt; は限りそのまま表示されません &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d137ad25db2cc877ca5df59f56e9a6b890ee5500" translate="yes" xml:space="preserve">
          <source>The following shows the new and the old implementations side-by-side.</source>
          <target state="translated">以下に、新実装と旧実装を並べて示します。</target>
        </trans-unit>
        <trans-unit id="a9c2c91816517be8d1534ac705647c061fa6dd7b" translate="yes" xml:space="preserve">
          <source>The following shows the translation to French:</source>
          <target state="translated">以下はフランス語への翻訳です。</target>
        </trans-unit>
        <trans-unit id="e1bd79b4d2db06b7589c87d8dbd16316e269179c" translate="yes" xml:space="preserve">
          <source>The following shows use with the &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; decorator, and allows for a null result.</source>
          <target state="translated">次の例では、 &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; デコレータを使用して、nullの結果を許可しています。</target>
        </trans-unit>
        <trans-unit id="f6128302a128007a3c40e5752360cf21b438bb75" translate="yes" xml:space="preserve">
          <source>The following simple example injects a class into a component using the view provider specified in component metadata:</source>
          <target state="translated">以下の簡単な例では、コンポーネントのメタデータで指定されたビュー・プロバイダを使用して、コンポーネントにクラスを注入しています。</target>
        </trans-unit>
        <trans-unit id="2668cfb6dea5ec9ebd2fd1c44ae5228da3864e94" translate="yes" xml:space="preserve">
          <source>The following snapshot reflects the state of the log after the user clicked the &lt;em&gt;Create...&lt;/em&gt; button and then the &lt;em&gt;Destroy...&lt;/em&gt; button.</source>
          <target state="translated">次のスナップショットは、ユーザーが[&lt;em&gt;作成...&lt;/em&gt; ]ボタンをクリックしてから[&lt;em&gt;破棄...&lt;/em&gt; ]ボタンをクリックした後のログの状態を反映しています。</target>
        </trans-unit>
        <trans-unit id="01444f8aa1fd63fbea66ed3fbc4d76b3181f9147" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define an on-changes handler for an input property.</source>
          <target state="translated">次のスニペットは、入力プロパティの変更時ハンドラを定義するために、コンポーネントがこのインターフェイスを実装する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a2cf27e61d910f2a3062d16cd2b48905ec197f2c" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own after-check functionality.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自のアフターチェック機能を定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="02c938106305027d23ab75882704caf8994a7b24" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own content initialization method.</source>
          <target state="translated">次のスニペットは、コンポーネントが独自のコンテンツ初期化メソッドを定義するために、このインターフェイスを実装する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0e8fbeff69628590a0b295ba498767902ead9d66" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own custom clean-up method.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自のカスタム・クリーンアップ・メソッドを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="411e84ca8d7c03f76c1b14b61d983ec8bab6408f" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own initialization method.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自の初期化メソッドを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="94805b48a3f8993b901ee028c3968016d01e3964" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own view initialization method.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自のビュー初期化メソッドを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1aff607a58501ecf10894e98220ffe4cf493e1de" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to invoke it own change-detection cycle.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自の変更検出サイクルを呼び出す方法を示しています。</target>
        </trans-unit>
        <trans-unit id="84fb0039bc53f48ed5527f7a01426ed661c5dac7" translate="yes" xml:space="preserve">
          <source>The following still have type &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">以下はまだタイプ &lt;code&gt;any&lt;/code&gt; を持っています。</target>
        </trans-unit>
        <trans-unit id="385410d96fd0d1ada306ab805640a6a9fe3ab05f" translate="yes" xml:space="preserve">
          <source>The following support packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">次のサポートパッケージは、新しいAngularワークスペースのデフォルトの &lt;code&gt;package.json&lt;/code&gt; ファイルに依存関係として含まれています。</target>
        </trans-unit>
        <trans-unit id="79640a37e7e2636b4e4ea578ebf213b6e60d68d0" translate="yes" xml:space="preserve">
          <source>The following table contains our current target release dates for the next two major versions of Angular:</source>
          <target state="translated">以下の表は、次の2つのメジャーバージョンのAngularの現在の目標リリース日を示しています。</target>
        </trans-unit>
        <trans-unit id="4ca2b1e7ed53f03929a56107550cff032e43e862" translate="yes" xml:space="preserve">
          <source>The following table demonstrates how Angular desugars microsyntax.</source>
          <target state="translated">次の表は、Angularがmicroyntaxをどのようにデスガーするかを示しています。</target>
        </trans-unit>
        <trans-unit id="7733978f307b95f03a15335e16eb927c523fa06b" translate="yes" xml:space="preserve">
          <source>The following table describes which expressions the collector can and cannot fold:</source>
          <target state="translated">次の表に、コレクターが折りたたむことができる式とできない式を示します。</target>
        </trans-unit>
        <trans-unit id="ea4cc4b6a04dc9392df32863008f5ff336d7bacc" translate="yes" xml:space="preserve">
          <source>The following table lists the base classes and services used to create and manage reactive form controls. For complete syntax details, see the API reference documentation for the &lt;a href=&quot;../api/forms&quot;&gt;Forms package&lt;/a&gt;.</source>
          <target state="translated">次の表に、リアクティブフォームコントロールの作成と管理に使用される基本クラスとサービスを示します。構文の詳細については、&lt;a href=&quot;../api/forms&quot;&gt;Formsパッケージの&lt;/a&gt;APIリファレンスドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6559ccde890d8fce0c896cbfc0b32736ad161e0e" translate="yes" xml:space="preserve">
          <source>The following table lists the exercises with brief descriptions. The sample code is also used to illustrate specific tasks in the following sections.</source>
          <target state="translated">以下の表は、簡単な説明付きの練習問題をリストアップしたものです。また、サンプルコードは、以下のセクションで特定のタスクを説明するために使用されています。</target>
        </trans-unit>
        <trans-unit id="4e03431838c501d28cce8ddc5c46d3be138f46e9" translate="yes" xml:space="preserve">
          <source>The following table provides the status for Angular versions under support.</source>
          <target state="translated">以下の表では、サポート中のAngularのバージョンのステータスを確認することができます。</target>
        </trans-unit>
        <trans-unit id="57be5a19d38053f7f9bb0d9a654f257ce99b8126" translate="yes" xml:space="preserve">
          <source>The following table summarizes class binding syntax.</source>
          <target state="translated">以下の表は、クラスバインディングの構文をまとめたものです。</target>
        </trans-unit>
        <trans-unit id="4f4bdba3679b1b07309153eecf2dd0e53141c7ad" translate="yes" xml:space="preserve">
          <source>The following table summarizes style binding syntax.</source>
          <target state="translated">以下の表は、スタイルバインディングの構文をまとめたものです。</target>
        </trans-unit>
        <trans-unit id="d96b5c739c1826895418b2145bbddbdded331ea4" translate="yes" xml:space="preserve">
          <source>The following table summarizes the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">次の表は、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータプロパティをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="ec0e9b4d8aa5d8b2d27bfc3494a79157f56e2067" translate="yes" xml:space="preserve">
          <source>The following table summarizes the key characteristics of each category.</source>
          <target state="translated">各カテゴリーの主な特徴をまとめてみました。</target>
        </trans-unit>
        <trans-unit id="94f36be6c96bfbef3f8339094d4d44cbc04cfe6a" translate="yes" xml:space="preserve">
          <source>The following table summarizes the key characteristics of each feature module group.</source>
          <target state="translated">以下の表は、各機能モジュールグループの主な特徴をまとめたものです。</target>
        </trans-unit>
        <trans-unit id="fec16611f597670fac267bce5d690f6c5abe4600" translate="yes" xml:space="preserve">
          <source>The following tables describe each portion of the microsyntax grammar.</source>
          <target state="translated">以下の表は、microsyntax文法の各部分を説明しています。</target>
        </trans-unit>
        <trans-unit id="1057a8bdc07041a51b4140ab877a59a6b160587d" translate="yes" xml:space="preserve">
          <source>The following tabs show the example app and its translation files:</source>
          <target state="translated">次のタブには、サンプルアプリとその翻訳ファイルが表示されます。</target>
        </trans-unit>
        <trans-unit id="4ce840172e7aa3dbc7025dbe2e8ba9084075ce24" translate="yes" xml:space="preserve">
          <source>The following template binds the value of &lt;code&gt;htmlSnippet&lt;/code&gt;, once by interpolating it into an element's content, and once by binding it to the &lt;code&gt;innerHTML&lt;/code&gt; property of an element:</source>
          <target state="translated">次のテンプレートは、 &lt;code&gt;htmlSnippet&lt;/code&gt; の値をバインドします。1つは要素のコンテンツに補間することによって、もう1つは要素の &lt;code&gt;innerHTML&lt;/code&gt; プロパティにバインドすることです。</target>
        </trans-unit>
        <trans-unit id="95542803d1818e7b9ddf8543ea3d2f5e00675e56" translate="yes" xml:space="preserve">
          <source>The following template breaks down into two separate &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances, an outer one and an inner one.</source>
          <target state="translated">次のテンプレートは、外部と内部の2つの別々の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; インスタンスに分類されます。</target>
        </trans-unit>
        <trans-unit id="0cd0ff39268d1599e7449c7cc25bc25785f4bad2" translate="yes" xml:space="preserve">
          <source>The following test alternative calls the native element's own &lt;code&gt;click()&lt;/code&gt; method, which is perfectly fine for &lt;em&gt;this component&lt;/em&gt;.</source>
          <target state="translated">次の代替テストでは、ネイティブ要素の独自の &lt;code&gt;click()&lt;/code&gt; メソッドを呼び出し&lt;em&gt;ます&lt;/em&gt;。これは、&lt;em&gt;このコンポーネントに&lt;/em&gt;は完全に適し&lt;em&gt;ています&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3e38312f70780e3491f68ec661365696be0e3289" translate="yes" xml:space="preserve">
          <source>The following test clicks the displayed hero and confirms that &lt;code&gt;Router.navigateByUrl&lt;/code&gt; is called with the expected url.</source>
          <target state="translated">次のテストでは、表示されたヒーローをクリックして、予想されるURL で &lt;code&gt;Router.navigateByUrl&lt;/code&gt; が呼び出されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="a6dfa1bb416d8e0295cb8c255d10104e0c62ad38" translate="yes" xml:space="preserve">
          <source>The following test confirms the expected behavior when the service returns an &lt;code&gt;ErrorObservable&lt;/code&gt;.</source>
          <target state="translated">次のテストは、サービスが &lt;code&gt;ErrorObservable&lt;/code&gt; を返したときに予想される動作を確認します。</target>
        </trans-unit>
        <trans-unit id="eeefd0a90ed65af64e72aa2c46c4435e2cb08978" translate="yes" xml:space="preserve">
          <source>The following test verifies that the hero name is propagated to the template via a binding.</source>
          <target state="translated">以下のテストでは、ヒーロー名がバインディングを介してテンプレートに伝搬されるかどうかを検証しています。</target>
        </trans-unit>
        <trans-unit id="669b416d81d58828e3baeba2592b6d7bdb997a78" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from model to view.</source>
          <target state="translated">以下のテストでは、モデルからビューへのデータの流れを検証しています。</target>
        </trans-unit>
        <trans-unit id="9493bee7e41e07ddded061eefd4c86697f978133" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from view to model.</source>
          <target state="translated">以下のテストでは、ビューからモデルへのデータの流れを検証します。</target>
        </trans-unit>
        <trans-unit id="f74f9a34c41218f6c8d1f966bf27413f11fe65fe" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a reactive form.</source>
          <target state="translated">以下のテストでは、先ほどのお気に入りのカラーコンポーネントを使用して、リアクティブフォームのビューからモデルへのデータフローとモデルからビューへのデータフローを検証しています。</target>
        </trans-unit>
        <trans-unit id="43b51a454408bcc622da34659c907ba79ec26345" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a template-driven form.</source>
          <target state="translated">以下のテストでは、先に述べたお気に入りのカラーコンポーネントを使用して、テンプレート駆動型のフォームのビューからモデル、モデルからビューへのデータの流れを検証しています。</target>
        </trans-unit>
        <trans-unit id="07991e618eba8ae671a9d5c312ffbbe1eb329052" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite-color components from previous examples to verify the view-to-model and model-to-view data flows for a reactive form.</source>
          <target state="translated">以下のテストでは、以前の例で使用したお気に入り色のコンポーネントを使用して、リアクティブ・フォームのビューからモデルへ、モデルからビューへのデータ・フローを検証しています。</target>
        </trans-unit>
        <trans-unit id="7fd03907907ea2e83f365fb45a4c105b4acdfd13" translate="yes" xml:space="preserve">
          <source>The following top-level configuration properties are available for each project, under &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">次のトップレベルの設定プロパティは、各プロジェクトの &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="719cf068b30a073ae7c7ca76c77d852b85d9551d" translate="yes" xml:space="preserve">
          <source>The following values have been &lt;a href=&quot;../../guide/releases#deprecation-practices&quot;&gt;deprecated&lt;/a&gt; since v11, and should not be used for new applications.</source>
          <target state="translated">次の値はv11以降&lt;a href=&quot;../../guide/releases#deprecation-practices&quot;&gt;非推奨に&lt;/a&gt;なっており、新しいアプリケーションには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="b03a59d1f8804dfcf035424cc521a63f6f97fe2c" translate="yes" xml:space="preserve">
          <source>The form clears, and the &lt;em&gt;required&lt;/em&gt; bars to the left of the input box are red, indicating invalid &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;power&lt;/code&gt; properties. Notice that the error messages are hidden. This is because the form is pristine; you haven't changed anything yet.</source>
          <target state="translated">フォームがクリアされ、入力ボックスの左側にある&lt;em&gt;必要な&lt;/em&gt;バーが赤になり、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;power&lt;/code&gt; プロパティが無効であることを示します。エラーメッセージが非表示になっていることに注意してください。これは、フォームが元の状態であるためです。まだ何も変更していません。</target>
        </trans-unit>
        <trans-unit id="75147566e331317e0ebd38d4c23e1fe75b6e9f20" translate="yes" xml:space="preserve">
          <source>The form control assigned to &lt;code&gt;name&lt;/code&gt; is displayed when the component is added to a template.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 割り当てられたフォームコントロールは、コンポーネントがテンプレートに追加されるときに表示されます。</target>
        </trans-unit>
        <trans-unit id="2230bb7f6f181d5dab7f244d6c86fa35f9398e04" translate="yes" xml:space="preserve">
          <source>The form has the following structure:</source>
          <target state="translated">フォームは以下のような構造になっています。</target>
        </trans-unit>
        <trans-unit id="7cc30137cd558d3c2066780eb04c527c530dfbea" translate="yes" xml:space="preserve">
          <source>The form highlights some design features that make it easier to use. For instance, the two required fields have a green bar on the left to make them easy to spot. These fields have initial values, so the form is valid and the &lt;strong&gt;Submit&lt;/strong&gt; button is enabled.</source>
          <target state="translated">フォームは、使いやすくするいくつかのデザイン機能を強調しています。たとえば、2つの必須フィールドの左側には、見つけやすいように緑色のバーがあります。これらのフィールドには初期値があるため、フォームは有効であり、[&lt;strong&gt;送信&lt;/strong&gt;]ボタンが有効になっています。</target>
        </trans-unit>
        <trans-unit id="b34e294f68df7549c748b9444818ff001b758168" translate="yes" xml:space="preserve">
          <source>The form input element emits an &quot;input&quot; event with the latest value.</source>
          <target state="translated">フォーム入力要素は、最新の値を持つ &quot;input &quot;イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="515af28d9b0919435290e3f0065658e5e8a23b42" translate="yes" xml:space="preserve">
          <source>The form is displayed in the application layout defined by the root component's template.</source>
          <target state="translated">フォームは、ルートコンポーネントのテンプレートで定義されたアプリケーションレイアウトで表示されます。</target>
        </trans-unit>
        <trans-unit id="2f3a91f61b6bd00a1be8db5548608284e0a9b995" translate="yes" xml:space="preserve">
          <source>The form layout and details are defined in the &lt;code&gt;HeroFormComponent&lt;/code&gt; class.</source>
          <target state="translated">フォームのレイアウトと詳細は、 &lt;code&gt;HeroFormComponent&lt;/code&gt; クラスで定義されています。</target>
        </trans-unit>
        <trans-unit id="0a60bc15f336549703c0f8729f6ffdccc7787238" translate="yes" xml:space="preserve">
          <source>The form makes the hero applicant choose one superpower from a fixed list of agency-approved powers. The predefined list of &lt;code&gt;powers&lt;/code&gt; is part of the data model, maintained internally in &lt;code&gt;HeroFormComponent&lt;/code&gt;. The Angular &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf directive&lt;/a&gt; iterates over the data values to populate the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">このフォームでは、ヒーローの申請者は、代理店が承認した権限の固定リストから1つの超大国を選択します。事前定義された &lt;code&gt;powers&lt;/code&gt; リストはデータモデルの一部であり、 &lt;code&gt;HeroFormComponent&lt;/code&gt; の内部で維持されます。Angular &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOfディレクティブ&lt;/a&gt;は、データ値を反復処理して &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素にデータを入力します。</target>
        </trans-unit>
        <trans-unit id="a8655729b1ee08ecff05e7625d507f952f92fcd0" translate="yes" xml:space="preserve">
          <source>The form model is defined in the component class. To reflect the model in the view, you'll need a checkout form.</source>
          <target state="translated">フォームモデルはコンポーネントクラスで定義されています。モデルをビューに反映させるには、チェックアウトフォームが必要です。</target>
        </trans-unit>
        <trans-unit id="0ee382bec575b1f6da6bbb9cd31af78bff011d9e" translate="yes" xml:space="preserve">
          <source>The form model is the source of truth for the control, so when you click the button, the value of the input is changed within the component class, overriding its current value.</source>
          <target state="translated">フォームモデルはコントロールの真理の源なので、ボタンをクリックすると、コンポーネントクラス内で入力の値が変更され、現在の値が上書きされます。</target>
        </trans-unit>
        <trans-unit id="2b5a84ea0eb09a364844c5d9b46df413273dce48" translate="yes" xml:space="preserve">
          <source>The form no longer exports any directives, and instead uses the &lt;code&gt;name&lt;/code&gt; getter defined in the component class.</source>
          <target state="translated">フォームはディレクティブをエクスポートせず、代わりにコンポーネントクラスで定義された &lt;code&gt;name&lt;/code&gt; ゲッターを使用します。</target>
        </trans-unit>
        <trans-unit id="1e2111c046072ad114cbf43f25b98a7beaed6ec4" translate="yes" xml:space="preserve">
          <source>The form template uses dynamic data binding of metadata to render the form without making any hardcoded assumptions about specific questions. It adds both control metadata and validation criteria dynamically.</source>
          <target state="translated">フォームテンプレートは、特定の質問についてハードコードされた仮定を行わずにフォームをレンダリングするために、メタデータの動的なデータバインディングを使用します。コントロールメタデータと検証基準の両方を動的に追加します。</target>
        </trans-unit>
        <trans-unit id="032272358147305d26fc0da1087985990fc8ac90" translate="yes" xml:space="preserve">
          <source>The form you create uses input validation and styling to improve the user experience. It has a Submit button that is only enabled when all user input is valid, and flags invalid input with color coding and error messages.</source>
          <target state="translated">作成したフォームは、ユーザーエクスペリエンスを向上させるために入力の検証とスタイリングを使用します。このフォームには、すべてのユーザー入力が有効な場合にのみ有効な Submit ボタンがあり、無効な入力には色分けとエラーメッセージでフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="509be382f4074b27cbcce6b529d160eac650cf40" translate="yes" xml:space="preserve">
          <source>The form-design concepts that are presented in &lt;a href=&quot;forms-overview&quot;&gt;Introduction to Forms&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;forms-overview&quot;&gt;フォームの概要に&lt;/a&gt;示されているフォームデザインの概念。</target>
        </trans-unit>
        <trans-unit id="c4afd0129b7e117b92146615638d0e4e2006fecc" translate="yes" xml:space="preserve">
          <source>The format for the currency indicator. One of the following:</source>
          <target state="translated">通貨インジケーターのフォーマットです。以下のいずれか。</target>
        </trans-unit>
        <trans-unit id="eee651f151097d3f793f7dd68113adcb34cf7213" translate="yes" xml:space="preserve">
          <source>The format type.</source>
          <target state="translated">フォーマットの種類。</target>
        </trans-unit>
        <trans-unit id="cd068df6dcd825ce5052a96a9a61c9e6c6f8bd76" translate="yes" xml:space="preserve">
          <source>The format, &lt;code&gt;wide&lt;/code&gt; or &lt;code&gt;narrow&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wide&lt;/code&gt; または &lt;code&gt;narrow&lt;/code&gt; のフォーマット。</target>
        </trans-unit>
        <trans-unit id="526712cace2051a3820458eac477a227870a4798" translate="yes" xml:space="preserve">
          <source>The fragment of the URL</source>
          <target state="translated">URLのフラグメント</target>
        </trans-unit>
        <trans-unit id="0d182f34bb720d02d0ff9daf3877acfc53926309" translate="yes" xml:space="preserve">
          <source>The framework passes the event argument&amp;mdash;represented by &lt;code&gt;$event&lt;/code&gt;&amp;mdash;to the handler method, and the method processes it:</source>
          <target state="translated">フレームワークはイベント引数（ &lt;code&gt;$event&lt;/code&gt; 表される）をハンドラーメソッドに渡し、メソッドはそれを処理します。</target>
        </trans-unit>
        <trans-unit id="cb343064f13dd87a34e507dfccab96b02bd2aebe" translate="yes" xml:space="preserve">
          <source>The full URL string</source>
          <target state="translated">フルURL文字列</target>
        </trans-unit>
        <trans-unit id="88085ca27e5b06d61296a4f74c271a308a999e84" translate="yes" xml:space="preserve">
          <source>The full URL string.</source>
          <target state="translated">フルURLの文字列。</target>
        </trans-unit>
        <trans-unit id="7f0cbd8363677df2b3ea5c867b26387e1ee8078d" translate="yes" xml:space="preserve">
          <source>The full path for the TypeScript configuration file, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースからの相対的な TypeScript 設定ファイルのフルパス。</target>
        </trans-unit>
        <trans-unit id="8023b8cae23a8f17607eebcdfccedf1316888f2a" translate="yes" xml:space="preserve">
          <source>The full path for the main entry point to the app, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースを基準とした、アプリのメイン エントリ ポイントのフル パス。</target>
        </trans-unit>
        <trans-unit id="9fcf0e0bdd67b2fc8e34d78b3c0248617ad77ccf" translate="yes" xml:space="preserve">
          <source>The full path for the new output directory, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースからの相対的な新しい出力ディレクトリのフルパス。</target>
        </trans-unit>
        <trans-unit id="eed94568aa1a8e2503cf46beaf9ea9475b325fba" translate="yes" xml:space="preserve">
          <source>The full path for the polyfills file, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースからのポリフィルファイルのフルパス。</target>
        </trans-unit>
        <trans-unit id="72ca397dc507125a0d20ad46ccbf197c1c42a7a1" translate="yes" xml:space="preserve">
          <source>The full response including the body was received.</source>
          <target state="translated">本体を含めた全面的な回答が寄せられた。</target>
        </trans-unit>
        <trans-unit id="e6503b9b0cc09112e25c5a60b6304d09a44f4ed9" translate="yes" xml:space="preserve">
          <source>The full source for the final version of the app can be seen and downloaded from the live example.</source>
          <target state="translated">アプリの最終版の完全なソースは、ライブの例から見ることができ、ダウンロードすることができます。</target>
        </trans-unit>
        <trans-unit id="381767d18e02a1d03c4532942528a8274eb1a0f8" translate="yes" xml:space="preserve">
          <source>The function is a factory that takes a regular expression to detect a &lt;em&gt;specific&lt;/em&gt; forbidden name and returns a validator function.</source>
          <target state="translated">この関数は、正規表現を使用して&lt;em&gt;特定の&lt;/em&gt;禁止名を検出し、バリデーター関数を返すファクトリです。</target>
        </trans-unit>
        <trans-unit id="ae6e08f7e449effe9eff51219d47a00a65d9c956" translate="yes" xml:space="preserve">
          <source>The function is actually a factory that takes a regular expression to detect a &lt;em&gt;specific&lt;/em&gt; forbidden name and returns a validator function.</source>
          <target state="translated">関数は実際には、&lt;em&gt;特定の&lt;/em&gt;禁止された名前を検出する正規表現を取り、バリデーター関数を返すファクトリーです。</target>
        </trans-unit>
        <trans-unit id="1d412e78ade63cd36beea6536ba9aa555201e8d3" translate="yes" xml:space="preserve">
          <source>The function or array of functions that is used to determine the validity of this control synchronously.</source>
          <target state="translated">この制御の有効性を同期的に判断するために使用される関数または関数の配列。</target>
        </trans-unit>
        <trans-unit id="3307879f1e1ad0cd4a7e5b11ee9be259024ca976" translate="yes" xml:space="preserve">
          <source>The function or array of functions that is used to determine validity of this control asynchronously.</source>
          <target state="translated">このコントロールの有効性を非同期的に判断するために使用される関数または関数の配列。</target>
        </trans-unit>
        <trans-unit id="67edd48add1f937127d1513bd511b6b290bb7ee3" translate="yes" xml:space="preserve">
          <source>The function receives two inputs, the iteration index and the associated node data.</source>
          <target state="translated">この関数は,反復インデックスと関連するノードデータの2つの入力を受け取ります.</target>
        </trans-unit>
        <trans-unit id="48c80eeebb68498080f87297bd6cc25ebeabb884" translate="yes" xml:space="preserve">
          <source>The function receives two inputs, the iteration index and the node object ID.</source>
          <target state="translated">この関数は,反復インデックスとノードオブジェクトIDの2つの入力を受け取ります.</target>
        </trans-unit>
        <trans-unit id="be32b3ac1b2eb072a21ff75621b7e08425ea08f2" translate="yes" xml:space="preserve">
          <source>The function retrieves candidate heroes from the &lt;code&gt;HeroService&lt;/code&gt;, takes &lt;code&gt;2&lt;/code&gt; of them to be the runners-up, and returns their concatenated names. Look at the  for the full source code.</source>
          <target state="translated">関数を検索候補ヒーロー &lt;code&gt;HeroService&lt;/code&gt; 、かかる &lt;code&gt;2&lt;/code&gt; 次点であること、それらの、およびその連結された名前を返します。完全なソースコードについては、を参照してください。</target>
        </trans-unit>
        <trans-unit id="a09d2a5d397e66aa18cf75d4bb9e37f09ac8bfb3" translate="yes" xml:space="preserve">
          <source>The function returns the string of names, which Angular than injects into the &lt;code&gt;runnersUp&lt;/code&gt; parameter of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">関数は名前の文字列を返し、Angularはこれを &lt;code&gt;runnersUp&lt;/code&gt; パラメータに &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="fc8a8d17b8274bbc32ca0cfca58f30d95ef0f38d" translate="yes" xml:space="preserve">
          <source>The function takes a winning &lt;code&gt;Hero&lt;/code&gt; and a &lt;code&gt;HeroService&lt;/code&gt; as arguments. Angular supplies these arguments from injected values identified by the two &lt;em&gt;tokens&lt;/em&gt; in the &lt;code&gt;deps&lt;/code&gt; array.</source>
          <target state="translated">この関数は、勝者の &lt;code&gt;Hero&lt;/code&gt; と &lt;code&gt;HeroService&lt;/code&gt; を引数として受け取ります。Angular は、 &lt;code&gt;deps&lt;/code&gt; 配列の2つの&lt;em&gt;トークン&lt;/em&gt;によって識別される注入された値からこれらの引数を提供します。</target>
        </trans-unit>
        <trans-unit id="31440253640d5ed429fa75f18730c0d235e3f060" translate="yes" xml:space="preserve">
          <source>The function takes the following arguments and returns a &lt;code&gt;&lt;a href=&quot;urlmatchresult&quot;&gt;UrlMatchResult&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">この関数は次の引数を取り、 &lt;code&gt;&lt;a href=&quot;urlmatchresult&quot;&gt;UrlMatchResult&lt;/a&gt;&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="7fd4d00a7d9c89b4d22e796a799455efec2aec0f" translate="yes" xml:space="preserve">
          <source>The function that determines the asynchronous validity of this control.</source>
          <target state="translated">このコントロールの非同期の有効性を決定する関数です。</target>
        </trans-unit>
        <trans-unit id="75f21eecd9b997cf943218446152125dac02ddc1" translate="yes" xml:space="preserve">
          <source>The function that determines the synchronous validity of this control.</source>
          <target state="translated">この制御の同期有効性を決定する関数です。</target>
        </trans-unit>
        <trans-unit id="eacd0ae3756065fbd9d730ed2a30bf73a52ee8d3" translate="yes" xml:space="preserve">
          <source>The function that is used to determine the validity of this control asynchronously.</source>
          <target state="translated">このコントロールの有効性を非同期的に判断するために使用される関数です。</target>
        </trans-unit>
        <trans-unit id="83224324684148d775d842c5d56d85d841618895" translate="yes" xml:space="preserve">
          <source>The function that is used to determine the validity of this control synchronously.</source>
          <target state="translated">この制御の有効性を同期的に判断するために使用される関数です。</target>
        </trans-unit>
        <trans-unit id="d803c301c76f8288ebe095ce71c1b673cdc5a088" translate="yes" xml:space="preserve">
          <source>The function will only ever return 1 (&lt;code&gt;one&lt;/code&gt;) or 5 (&lt;code&gt;other&lt;/code&gt;). The &lt;code&gt;few&lt;/code&gt; category will never match. If none of the pluralization categories match, Angular will try to match &lt;code&gt;other&lt;/code&gt;. Use &lt;code&gt;other&lt;/code&gt; as the standard fallback for a missing category.</source>
          <target state="translated">この関数は、1（ &lt;code&gt;one&lt;/code&gt; ）または5（ &lt;code&gt;other&lt;/code&gt; ）のみを返します。 &lt;code&gt;few&lt;/code&gt; カテゴリが一致することはありません。複数化カテゴリのいずれも一致しない場合、Angularは &lt;code&gt;other&lt;/code&gt; カテゴリと一致しようとします。欠落しているカテゴリの標準フォールバックとして &lt;code&gt;other&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="65f7a04d29635cdb37413f0c3e472d4e275bd987" translate="yes" xml:space="preserve">
          <source>The functional API provided by the &lt;code&gt;@angular/animations&lt;/code&gt; module provides a domain-specific language (DSL) for creating and controlling animations in Angular applications. See the &lt;a href=&quot;../api/animations&quot;&gt;API reference&lt;/a&gt; for a complete listing and syntax details of the core functions and related data structures.</source>
          <target state="translated">&lt;code&gt;@angular/animations&lt;/code&gt; モジュールによって提供される機能APIは、Angularアプリケーションでアニメーションを作成および制御するためのドメイン固有言語（DSL）を提供します。コア関数と関連するデータ構造の完全なリストと構文の詳細については、&lt;a href=&quot;../api/animations&quot;&gt;APIリファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="39cc10df89d390f57860b9af6c0adb017e7434d2" translate="yes" xml:space="preserve">
          <source>The gathering of CLI analytics data is disabled by default, and must be enabled at the project level by individual users. It cannot be enabled at the project level for all users.</source>
          <target state="translated">CLI分析データの収集はデフォルトでは無効になっており、個々のユーザーがプロジェクトレベルで有効にする必要があります。すべてのユーザーがプロジェクトレベルで有効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="fdd0a7a0c40007f4996ec51aa08759927de0515e" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;ngsw-config.json&lt;/code&gt; includes a limited list of cachable fonts and images extentions. In some cases, you might want to modify the glob pattern to suit your needs.</source>
          <target state="translated">生成された &lt;code&gt;ngsw-config.json&lt;/code&gt; には、キャッシュ可能なフォントと画像拡張の限定リストが含まれています。場合によっては、必要に応じてグロブパターンを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="7d22ac5ee61233dbc8345586d9bf0c281c321c14" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;ngsw-config.json&lt;/code&gt; includes a limited list of cacheable fonts and images extensions. In some cases, you might want to modify the glob pattern to suit your needs.</source>
          <target state="translated">生成された &lt;code&gt;ngsw-config.json&lt;/code&gt; には、キャッシュ可能なフォントと画像拡張子の限定リストが含まれています。場合によっては、ニーズに合わせてglobパターンを変更したいことがあります。</target>
        </trans-unit>
        <trans-unit id="4a279bf5db87a97440dc1aee59aa3be18678bef7" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; is as follows:</source>
          <target state="translated">生成される &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e616c4f20e747c4816f0eec1d31528b85dafd2e4" translate="yes" xml:space="preserve">
          <source>The generated file looks like this:</source>
          <target state="translated">生成されたファイルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="04803306c35b1db59a8611c4f1c5567aec8e4351" translate="yes" xml:space="preserve">
          <source>The generated output would look something like this:</source>
          <target state="translated">生成された出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="141073788fe40a99ac2d4c89d2b31fce8314ca6b" translate="yes" xml:space="preserve">
          <source>The generator creates starter files for all three parts of the component:</source>
          <target state="translated">ジェネレーターは、コンポーネントの3つのパーツすべてのスターターファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="bf05807c104db04e8ba4b4172fe1e0d537908a8f" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;ng run&lt;/code&gt; CLI command takes as its first argument a target string of the form &lt;em&gt;project:target[:configuration]&lt;/em&gt;.</source>
          <target state="translated">一般的な &lt;code&gt;ng run&lt;/code&gt; CLIコマンドは、最初の引数として、&lt;em&gt;project：target [：configuration]&lt;/em&gt;という形式のターゲット文字列を取り&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7ec0f9f9bac30ff11b631988c34462992f22407b" translate="yes" xml:space="preserve">
          <source>The given URL path.</source>
          <target state="translated">与えられたURLのパス。</target>
        </trans-unit>
        <trans-unit id="ab814f412c1f1d0bae00400afb55a1234e1acc6e" translate="yes" xml:space="preserve">
          <source>The goal is to group the &lt;code&gt;Crisis Center&lt;/code&gt; management routes under the &lt;code&gt;admin&lt;/code&gt; path. You don't need a component to do it. A &lt;em&gt;component-less&lt;/em&gt; route makes it easier to &lt;a href=&quot;router#can-activate-child-guard&quot;&gt;guard child routes&lt;/a&gt;.</source>
          <target state="translated">目標は、 &lt;code&gt;Crisis Center&lt;/code&gt; 管理センターの管理ルートを &lt;code&gt;admin&lt;/code&gt; パスの下にグループ化することです。そのためのコンポーネントは必要ありません。&lt;em&gt;コンポーネントレス&lt;/em&gt;ルートは、それが簡単にできるようになり&lt;a href=&quot;router#can-activate-child-guard&quot;&gt;、子ルートを守ります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd9023eeedf5f8bbb0b9df05835717a6643881d4" translate="yes" xml:space="preserve">
          <source>The goal of the &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; is to present question types defined in your model. You only have two types of questions at this point but you can imagine many more. The &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; statement in the template determines which type of question to display. The switch uses directives with the &lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;&lt;code&gt;formControlName&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/forms/formgroupdirective&quot;&gt;&lt;code&gt;formGroup&lt;/code&gt;&lt;/a&gt; selectors. Both directives are defined in &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; の目標は、モデルで定義された質問タイプを提示することです。現時点では2種類の質問しかありませんが、さらに多くの質問を想像することができます。テンプレートの &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; ステートメントは、表示する質問のタイプを決定します。スイッチは、&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt; &lt;code&gt;formControlName&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/forms/formgroupdirective&quot;&gt; &lt;code&gt;formGroup&lt;/code&gt; &lt;/a&gt;セレクターでディレクティブを使用します。両方のディレクティブは &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="65800738d999ab526c0c89e0de424c8c1ee0f456" translate="yes" xml:space="preserve">
          <source>The goal of this project is to improve the experience and remove legacy dependency by transitioning the language service to Ivy. Today the language service still uses the View Engine compiler and type checking, even for Ivy applications. We want to use the Ivy template parser and improved type checking for the Angular Language service to match application behavior. This migration will also be a step towards unblocking the removal of View Engine, which will simplify Angular, reduce the npm package size, and improve the framework's maintainability.</source>
          <target state="translated">このプロジェクトの目標は、言語サービスをIvyに移行することでエクスペリエンスを向上させ、レガシーな依存関係を取り除くことです。現在、言語サービスは Ivy アプリケーションでも View Engine コンパイラと型チェックを使用しています。私たちは、アプリケーションの動作に合わせてAngular LanguageサービスにIvyのテンプレートパーサーと改良された型チェックを使用したいと考えています。また、今回の移行はView Engineの削除のブロック解除に向けた一歩となり、Angularの簡素化、npmのパッケージサイズの縮小、フレームワークの保守性の向上につながります。</target>
        </trans-unit>
        <trans-unit id="7e3f53bd2e127f2d6cf985d6eab8a081c2e42cae" translate="yes" xml:space="preserve">
          <source>The greater danger is that &lt;strong&gt;a future rewording of the header text would break&lt;/strong&gt; a link to this section.</source>
          <target state="translated">より大きな危険は&lt;strong&gt;、ヘッダーテキストの将来の言い換えが&lt;/strong&gt;このセクションへのリンクを&lt;strong&gt;壊す&lt;/strong&gt;ことです。</target>
        </trans-unit>
        <trans-unit id="1459c8d453ff8ac4153c0dff3f06d25103f5fe41" translate="yes" xml:space="preserve">
          <source>The grouping element may break the template appearance because CSS styles neither expect nor accommodate the new layout. For example, suppose you have the following paragraph layout.</source>
          <target state="translated">CSSスタイルが新しいレイアウトを想定しておらず、またそれに対応していないため、グループ化要素はテンプレートの外観を崩す可能性があります。例えば、以下のような段落レイアウトがあるとします。</target>
        </trans-unit>
        <trans-unit id="186b7c1a6bbbaa6de4d2aef72af8c57b23e404a3" translate="yes" xml:space="preserve">
          <source>The guard &lt;em&gt;might&lt;/em&gt; return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</source>
          <target state="translated">ガード&lt;em&gt;は&lt;/em&gt;、ブール値の回答を同期的に返す場合があります。しかし、多くの場合、警備員は同期して答えを出すことができません。ガードは、ユーザーに質問をしたり、変更をサーバーに保存したり、新しいデータを取得したりできます。これらはすべて非同期操作です。</target>
        </trans-unit>
        <trans-unit id="0fc0ed396ad120f8ab7fb06539802837af254017" translate="yes" xml:space="preserve">
          <source>The guard might return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</source>
          <target state="translated">ガードはそのブール値の答えを同期的に返すかもしれません。しかし、多くの場合、ガードは同期的に答えを生成できません。ガードは、ユーザに質問をしたり、サーバに変更を保存したり、新しいデータを取得したりします。これらはすべて非同期操作です。</target>
        </trans-unit>
        <trans-unit id="0fb3fdf4c451ff27c87e95fb3c718c6ebc299464" translate="yes" xml:space="preserve">
          <source>The guide assumes that you're familiar with building basic Angular apps, as described in the following sections:</source>
          <target state="translated">ガイドは、以下のセクションで説明するように、基本的なAngularアプリの構築に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="1e22bed2867320095b59b4361abac2b59605d915" translate="yes" xml:space="preserve">
          <source>The guide presents tests of a sample application created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. This sample application is much like the one created in the &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial&lt;/a&gt;. The sample application and all tests in this guide are available for inspection and experimentation:</source>
          <target state="translated">このガイドでは、&lt;a href=&quot;cli&quot;&gt;Angular CLIで&lt;/a&gt;作成されたサンプルアプリケーションのテストについて説明します。このサンプルアプリケーションは、&lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt;チュートリアル&lt;em&gt;で&lt;/em&gt;&lt;/a&gt;作成したものとよく似ています。このガイドのサンプルアプリケーションとすべてのテストは、検査と実験に使用できます。</target>
        </trans-unit>
        <trans-unit id="421303822387da04a3b56e711c4f3ea0bceaf8e8" translate="yes" xml:space="preserve">
          <source>The guide proceeds as a sequence of milestones as if you were building the app step-by-step. But, it is not a tutorial and it glosses over details of Angular application construction that are more thoroughly covered elsewhere in the documentation.</source>
          <target state="translated">ガイドはまるでアプリをステップバイステップで構築しているかのように、一連のマイルストーンとして進行します。しかし、これはチュートリアルではなく、ドキュメントの他の場所でより徹底的にカバーされているAngularアプリケーションの構築の詳細にも光を当てています。</target>
        </trans-unit>
        <trans-unit id="56409968972545a88fbd9eded9e76b93ccbbcd50" translate="yes" xml:space="preserve">
          <source>The guideline uses the shortcut &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse.</source>
          <target state="translated">ガイドラインでは、ショートカット &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; を使用して、これらのさまざまなファイルを表しています。このショートカットを使用すると、このガイドのファイル構造が読みやすくなり、簡潔になります。</target>
        </trans-unit>
        <trans-unit id="a864f76394ca2c5a51fde927a0643f0c50460ce3" translate="yes" xml:space="preserve">
          <source>The guidelines described here serve two purposes:</source>
          <target state="translated">ここに記載されているガイドラインは、2つの目的を持っています。</target>
        </trans-unit>
        <trans-unit id="b0a2f7576dc2aba3e59c6760ed5a75c175747324" translate="yes" xml:space="preserve">
          <source>The guidelines that follow will refer to different parts of a URL. This diagram outlines what those parts refer to:</source>
          <target state="translated">以下のガイドラインでは、URL の異なる部分を参照しています。この図は、これらの部分が何を参照しているかを概説しています。</target>
        </trans-unit>
        <trans-unit id="c5c246736ceb17671549829f83857f93c2185c15" translate="yes" xml:space="preserve">
          <source>The handler returns an RxJS &lt;code&gt;ErrorObservable&lt;/code&gt; with a user-friendly error message. The following code updates the &lt;code&gt;getConfig()&lt;/code&gt; method, using a &lt;a href=&quot;pipes&quot;&gt;pipe&lt;/a&gt; to send all observables returned by the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call to the error handler.</source>
          <target state="translated">ハンドラーは、ユーザーフレンドリーなエラーメッセージとともに &lt;code&gt;ErrorObservable&lt;/code&gt; を返します。次のコードは、&lt;a href=&quot;pipes&quot;&gt;パイプ&lt;/a&gt;を使用して &lt;code&gt;getConfig()&lt;/code&gt; メソッドを更新し、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 呼び出しによって返されたすべてのオブザーバブルをエラーハンドラーに送信します。</target>
        </trans-unit>
        <trans-unit id="1888c94c63bc6d73016893cf4e85b80718910a2a" translate="yes" xml:space="preserve">
          <source>The handlers delegate to a helper method that sets the color on the host DOM element, &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">ハンドラーは、ホストDOM要素 &lt;code&gt;el&lt;/code&gt; の色を設定するヘルパーメソッドに委譲します。</target>
        </trans-unit>
        <trans-unit id="46bf71e9a7c208fa128b6a06edf63925677b2a2e" translate="yes" xml:space="preserve">
          <source>The has string</source>
          <target state="translated">の文字列を持っています。</target>
        </trans-unit>
        <trans-unit id="36d211182de9d369a5c0e06f411a8bd524c5be83" translate="yes" xml:space="preserve">
          <source>The header name for which to append the value or values.</source>
          <target state="translated">値または値を追加するヘッダー名。</target>
        </trans-unit>
        <trans-unit id="058ee19fdaf510e45aeedc80b99f91c108d23a1a" translate="yes" xml:space="preserve">
          <source>The header name for which to append the values.</source>
          <target state="translated">値を追加するヘッダー名。</target>
        </trans-unit>
        <trans-unit id="f7ae4cade9263fbb970a7b0cf00131afd1c12bb5" translate="yes" xml:space="preserve">
          <source>The header name from which to retrieve values.</source>
          <target state="translated">値を取得するヘッダー名。</target>
        </trans-unit>
        <trans-unit id="5c71c1c8b2b761ca699cfa043cb799e05f3e6574" translate="yes" xml:space="preserve">
          <source>The header name to check for existence.</source>
          <target state="translated">存在を確認するヘッダー名。</target>
        </trans-unit>
        <trans-unit id="1af3be1a7d51a18f36d735ad45a99c8687d62de5" translate="yes" xml:space="preserve">
          <source>The header name.</source>
          <target state="translated">ヘッダー名です。</target>
        </trans-unit>
        <trans-unit id="1fb8a670c061e1780c533d1cfa92b7cada304777" translate="yes" xml:space="preserve">
          <source>The helper method, &lt;code&gt;highlight&lt;/code&gt;, was extracted from the constructor. The revised constructor simply declares the injected &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ヘルパーメソッド &lt;code&gt;highlight&lt;/code&gt; は、コンストラクターから抽出されました。改訂されたコンストラクターは、注入された &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 宣言するだけです。</target>
        </trans-unit>
        <trans-unit id="77deeab503fd68fae60b1683faba0eaee8d11b6b" translate="yes" xml:space="preserve">
          <source>The helper sets up global variables to hold the shared Angular and AngularJS injectors.</source>
          <target state="translated">ヘルパーは共有のAngularとAngularJSインジェクタを保持するためのグローバル変数を設定します。</target>
        </trans-unit>
        <trans-unit id="4ae082078f4b7ac534ba00e2fb2f643830e768fa" translate="yes" xml:space="preserve">
          <source>The hero &lt;em&gt;Alter Ego&lt;/em&gt; is optional so you can leave that be.</source>
          <target state="translated">ヒーローの&lt;em&gt;Alter Ego&lt;/em&gt;はオプションなので、そのままにすることができます。</target>
        </trans-unit>
        <trans-unit id="71c6566d940a46db02f0c867ecf070621fd765b9" translate="yes" xml:space="preserve">
          <source>The hero agency is planning an ad campaign with several different ads cycling through the banner. New ad components are added frequently by several different teams. This makes it impractical to use a template with a static component structure.</source>
          <target state="translated">ヒーローエージェンシーは、複数の異なる広告がバナーを循環する広告キャンペーンを企画しています。新しい広告コンポーネントは、複数の異なるチームによって頻繁に追加されます。このため、静的なコンポーネント構造を持つテンプレートを使用することは現実的ではありません。</target>
        </trans-unit>
        <trans-unit id="16a3fb0d9729195d9e9c53c82925e2ac408ea4a3" translate="yes" xml:space="preserve">
          <source>The hero editor</source>
          <target state="translated">主人公の編集者</target>
        </trans-unit>
        <trans-unit id="8763e74d500e6e70efa6309067129b019b2ca2e7" translate="yes" xml:space="preserve">
          <source>The hero editor.</source>
          <target state="translated">主人公の編集者。</target>
        </trans-unit>
        <trans-unit id="0728ae26bedae4b1d12eb889d15f0b5193a7c81f" translate="yes" xml:space="preserve">
          <source>The hero form uses the &lt;code&gt;.ng-valid&lt;/code&gt; and &lt;code&gt;.ng-invalid&lt;/code&gt; classes to set the color of each form control's border.</source>
          <target state="translated">ヒーローフォームは、 &lt;code&gt;.ng-valid&lt;/code&gt; クラスと &lt;code&gt;.ng-invalid&lt;/code&gt; クラスを使用して、各フォームコントロールの境界線の色を設定します。</target>
        </trans-unit>
        <trans-unit id="21d7974b34602306dfbd0d2ab859c721b4a0b3f4" translate="yes" xml:space="preserve">
          <source>The hero items in the &lt;code&gt;HeroesComponent&lt;/code&gt; are &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements whose click events are bound to the component's &lt;code&gt;onSelect()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; のヒーローアイテムは、クリックイベントがコンポーネントの &lt;code&gt;onSelect()&lt;/code&gt; メソッドにバインドされている &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素です。</target>
        </trans-unit>
        <trans-unit id="a40bab6e7b4b8a2395efb8fec835b41b2c0a4ad9" translate="yes" xml:space="preserve">
          <source>The hero management file structure is as follows:</source>
          <target state="translated">ヒーロー管理のファイル構造は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="592678c7214943d825426d0e4505fa4a585ef418" translate="yes" xml:space="preserve">
          <source>The hero must choose one superpower from a fixed list of agency-approved powers. You maintain that list internally (in &lt;code&gt;HeroFormComponent&lt;/code&gt;).</source>
          <target state="translated">主人公は、代理店が承認したパワーの固定リストから1つのスーパーパワーを選択する必要があります。そのリストは内部で維持します（ &lt;code&gt;HeroFormComponent&lt;/code&gt; 内）。</target>
        </trans-unit>
        <trans-unit id="473bad574572a351e437cb9cd6317f908f41d643" translate="yes" xml:space="preserve">
          <source>The hero routes are currently defined in &lt;em&gt;two&lt;/em&gt; places: in the &lt;code&gt;HeroesRoutingModule&lt;/code&gt;, by way of the &lt;code&gt;HeroesModule&lt;/code&gt;, and in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">英雄のルートは、現在で定義されている&lt;em&gt;2&lt;/em&gt;ヶ所：中 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; の方法により &lt;code&gt;HeroesModule&lt;/code&gt; 、とに &lt;code&gt;AppRoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f19285967f93c66c1135ea6b51d4527818be9887" translate="yes" xml:space="preserve">
          <source>The hero routes are currently defined in two places: in the &lt;code&gt;HeroesRoutingModule&lt;/code&gt;, by way of the &lt;code&gt;HeroesModule&lt;/code&gt;, and in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">ヒーロー路線は現在、2つの場所で定義されています。中 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; の方法により &lt;code&gt;HeroesModule&lt;/code&gt; 、とに &lt;code&gt;AppRoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ea57673d1088103c595c56fde675da1370e3de5" translate="yes" xml:space="preserve">
          <source>The heroes feature has two interacting components, the hero list and the hero detail. The list view is self-sufficient; you navigate to it, it gets a list of heroes and displays them.</source>
          <target state="translated">ヒーロー機能には、ヒーローリストとヒーロー詳細という2つの相互作用するコンポーネントがあります。リストビューは自己完結型で、そこに移動するとヒーローのリストを取得して表示します。</target>
        </trans-unit>
        <trans-unit id="16cef4fba3814a586861ff7e84698831dc62613c" translate="yes" xml:space="preserve">
          <source>The heroes feature has two interacting components, the hero list and the hero detail. When you navigate to list view, it gets a list of heroes and displays them. When you click on a hero, the detail view has to display that particular hero.</source>
          <target state="translated">ヒーロー機能には、ヒーローリストとヒーロー詳細という2つの相互作用するコンポーネントがあります。リストビューに移動すると、ヒーローのリストが表示されます。ヒーローをクリックすると、詳細ビューにはその特定のヒーローが表示されます。</target>
        </trans-unit>
        <trans-unit id="f0c577a68776a18a7768c488dfda878388c07de5" translate="yes" xml:space="preserve">
          <source>The heroes feature module is almost complete, but what is a feature without some smooth transitions?</source>
          <target state="translated">ヒーロー機能モジュールはほぼ完成していますが、いくつかのスムーズなトランジションなしで機能とは何でしょうか?</target>
        </trans-unit>
        <trans-unit id="79f13609e0fe6dc3309e380f997fe13b9aeef97b" translate="yes" xml:space="preserve">
          <source>The heroes list should be attractive and should respond visually when users hover over and select a hero from the list.</source>
          <target state="translated">ヒーローリストは魅力的なものでなければならず、ユーザーがリストの上にカーソルを置いてヒーローを選択したときに視覚的に反応しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d763cf67760997b5781cdf955015acbbec99c511" translate="yes" xml:space="preserve">
          <source>The heroes web API expects a special header in HTTP save requests. That header is in the &lt;code&gt;httpOptions&lt;/code&gt; constant defined in the &lt;code&gt;HeroService&lt;/code&gt;. Add the following to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">ヒーローのWeb APIでは、HTTP保存リクエストに特別なヘッダーが必要です。そのヘッダーは、 &lt;code&gt;httpOptions&lt;/code&gt; 定義された &lt;code&gt;HeroService&lt;/code&gt; 定数にあります。以下を &lt;code&gt;HeroService&lt;/code&gt; クラスに追加します。</target>
        </trans-unit>
        <trans-unit id="c4ed054e89ac71c314e694ffe3da8a0d1e37e7a6" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;OnChangesParentComponent&lt;/code&gt; binds to them as follows.</source>
          <target state="translated">ホストの &lt;code&gt;OnChangesParentComponent&lt;/code&gt; は、次のようにそれらにバインドします。</target>
        </trans-unit>
        <trans-unit id="608f0a4d7c94f588eb779efe72dc12c1fb0cf77f" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;OnChangesParentComponent&lt;/code&gt; binds to them like this:</source>
          <target state="translated">ホスト &lt;code&gt;OnChangesParentComponent&lt;/code&gt; は、次のようにそれらにバインドします。</target>
        </trans-unit>
        <trans-unit id="d475d2c0839b834e5922c40096508e379732daa1" translate="yes" xml:space="preserve">
          <source>The host dependency injector. For example, the root element's component instance injector.</source>
          <target state="translated">ホストの依存関係インジェクタ。例えば、ルート要素のコンポーネントインスタンスインジェクタ。</target>
        </trans-unit>
        <trans-unit id="2bd45aa129171fd60686da527ebfb1ef5a231daf" translate="yes" xml:space="preserve">
          <source>The host or anchor &lt;a href=&quot;../../guide/glossary#element&quot;&gt;element&lt;/a&gt; for this component instance.</source>
          <target state="translated">このコンポーネントインスタンスのホストまたはアンカー&lt;a href=&quot;../../guide/glossary#element&quot;&gt;要素&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfc936f22e5ed98433d5e69d8eb10f97974dcf08" translate="yes" xml:space="preserve">
          <source>The hosting parent component binds to the &lt;code&gt;deleteRequest&lt;/code&gt; event of the &lt;code&gt;ItemDetailComponent&lt;/code&gt; as follows.</source>
          <target state="translated">ホスティング親コンポーネントは、次のように &lt;code&gt;ItemDetailComponent&lt;/code&gt; の &lt;code&gt;deleteRequest&lt;/code&gt; イベントにバインドします。</target>
        </trans-unit>
        <trans-unit id="61778c1078d4aebe3161ba35e60e62c15c8e7eba" translate="yes" xml:space="preserve">
          <source>The i18n template translation process has four phases:</source>
          <target state="translated">i18nテンプレートの翻訳プロセスには4つのフェーズがあります。</target>
        </trans-unit>
        <trans-unit id="3bb0192b3b6c38a7290682d21f4eba34e038374d" translate="yes" xml:space="preserve">
          <source>The identities of elements in the iterator can change while the data does not. This can happen, for example, if the iterator is produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response produces objects with different identities, and Angular must tear down the entire DOM and rebuild it (as if all old elements were deleted and all new elements inserted).</source>
          <target state="translated">データが変化しない間に、イテレータ内の要素の身元が変化することがあります。これは例えば、イテレータがサーバーへのRPCから生成され、そのRPCが再実行された場合などに起こります。データが変更されていなくても、2回目のレスポンスでは異なるアイデンティティのオブジェクトが生成され、AngularはDOM全体を解体して再構築しなければなりません(古い要素をすべて削除して新しい要素をすべて挿入したかのように)。</target>
        </trans-unit>
        <trans-unit id="ac727768ada490816c6d8682036d5ff4e29f9e9f" translate="yes" xml:space="preserve">
          <source>The identity validator implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; interface. It takes an Angular control object as an argument and returns either null if the form is valid, or &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">IDバリデーターは &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; インターフェイスを実装します。Angularコントロールオブジェクトを引数として取り、フォームが有効な場合はnullを返し、そうでない場合は &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1244038c275380a06d0292b3f58a8b0808bee9d4" translate="yes" xml:space="preserve">
          <source>The immediate &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; children. Walk the tree by descending through &lt;code&gt;children&lt;/code&gt;.</source>
          <target state="translated">直接の &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; の子。 &lt;code&gt;children&lt;/code&gt; 降りて木を歩く。</target>
        </trans-unit>
        <trans-unit id="f77264c0b692bee3b01df77a4b0b94e2da9de660" translate="yes" xml:space="preserve">
          <source>The immediate goal is to test the &lt;code&gt;DashboardHeroComponent&lt;/code&gt;, not the &lt;code&gt;DashboardComponent&lt;/code&gt;, so, try the second and third options.</source>
          <target state="translated">当面の目標は、テストすることです &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 、ない &lt;code&gt;DashboardComponent&lt;/code&gt; を、その第2、第3のオプションを試してみてください。</target>
        </trans-unit>
        <trans-unit id="34262de4d07947d5d97708446c0ec864a64190a5" translate="yes" xml:space="preserve">
          <source>The implementation in &lt;em&gt;this&lt;/em&gt; tutorial will continue to deliver &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;この&lt;/em&gt;チュートリアルの実装は&lt;em&gt;、&lt;/em&gt;&lt;em&gt;模擬ヒーロー&lt;/em&gt;を引き続き提供します。</target>
        </trans-unit>
        <trans-unit id="e94c2bbfc1793deccefaf24d2d6ac1efaedf0ef3" translate="yes" xml:space="preserve">
          <source>The important bit in the &lt;code&gt;server.ts&lt;/code&gt; file is the &lt;code&gt;ngExpressEngine()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;server.ts&lt;/code&gt; ファイルの重要なビットは、 &lt;code&gt;ngExpressEngine()&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="4e58b37a7644668715bd2ab968359ab5ecae4a62" translate="yes" xml:space="preserve">
          <source>The imported &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; symbol provides Angular the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">インポートされた &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; シンボルは、Angular &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレーターを提供します。</target>
        </trans-unit>
        <trans-unit id="5eeb64088704a52b165f30312582ba6990110783" translate="yes" xml:space="preserve">
          <source>The imports at the top of the array are JavaScript import statements while the &lt;code&gt;imports&lt;/code&gt; array within &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; is Angular specific. For more information on the difference, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">配列の上部にあるインポートはJavaScriptインポートステートメントであり、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;内の &lt;code&gt;imports&lt;/code&gt; 配列はAngular固有です。違いの詳細については、「&lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScriptモジュールとNgModules&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ad0735a040b2f744ace16714d841b50eb7a90b9" translate="yes" xml:space="preserve">
          <source>The impure</source>
          <target state="translated">不純なもの</target>
        </trans-unit>
        <trans-unit id="47a8f6ad06b99c5e37173f0330783e47b4a54b62" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">インクリメントおよびデクリメント演算子 &lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01460b62b5e6cc1d2c666542b25ca8af1ab36172" translate="yes" xml:space="preserve">
          <source>The index at which to insert the new component's host view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">新しいコンポーネントのホストビューをこのコンテナに挿入するインデックス。指定しない場合は、新しいビューを最後のエントリとして追加します。</target>
        </trans-unit>
        <trans-unit id="28088325c17c4696121e5d42d44e8ba470905c1b" translate="yes" xml:space="preserve">
          <source>The individual form controls are now collected within a group. A &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance provides its model value as an object reduced from the values of each control in the group. A form group instance has the same properties (such as &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;untouched&lt;/code&gt;) and methods (such as &lt;code&gt;setValue()&lt;/code&gt;) as a form control instance.</source>
          <target state="translated">個々のフォームコントロールがグループ内で収集されるようになりました。 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; のインスタンスは、グループ内の各コントロールの値から減少対象としてのモデル値を提供します。フォームグループのインスタンスは、同じ（等の性質を有する &lt;code&gt;value&lt;/code&gt; と &lt;code&gt;untouched&lt;/code&gt; ）と（例えば、メソッド &lt;code&gt;setValue()&lt;/code&gt; フォームコントロールインスタンスとして）。</target>
        </trans-unit>
        <trans-unit id="7b9f0a384d42c6657ae3c3a445c88ae80d87dd5f" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;size&lt;/code&gt; is an input value from a property binding. Clicking the buttons increases or decreases the &lt;code&gt;size&lt;/code&gt;, within min/max value constraints, and then raises, or emits, the &lt;code&gt;sizeChange&lt;/code&gt; event with the adjusted size.</source>
          <target state="translated">初期 &lt;code&gt;size&lt;/code&gt; は、プロパティバインディングからの入力値です。ボタンをクリックすると、最小値/最大値の制約内で &lt;code&gt;size&lt;/code&gt; が増減し、サイズが調整された &lt;code&gt;sizeChange&lt;/code&gt; イベントが発生または発生します。</target>
        </trans-unit>
        <trans-unit id="f4f9e997670b8acc1e6bb32a313594d221ffead4" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;tsconfig.json&lt;/code&gt; for an Angular app typically looks like this example:</source>
          <target state="translated">Angularアプリの最初の &lt;code&gt;tsconfig.json&lt;/code&gt; は通常、次の例のようになります。</target>
        </trans-unit>
        <trans-unit id="fef48a0a41abc39f0125846fb0fbd53cddedd428" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;tsconfig.json&lt;/code&gt; for an Angular workspace typically looks like the following example.</source>
          <target state="translated">Angularワークスペースの最初の &lt;code&gt;tsconfig.json&lt;/code&gt; は、通常、次の例のようになります。</target>
        </trans-unit>
        <trans-unit id="36c86209ef6735b83750a965d091a573bb9dc18d" translate="yes" xml:space="preserve">
          <source>The initial DOM to use to bootstrap the server application.</source>
          <target state="translated">サーバアプリケーションのブートストラップに使用する最初の DOM。</target>
        </trans-unit>
        <trans-unit id="9b0d2a1d3adcf62fd7edfaae947dfbf0fa526cbd" translate="yes" xml:space="preserve">
          <source>The initial admin routing configuration:</source>
          <target state="translated">初期の admin ルーティング設定です。</target>
        </trans-unit>
        <trans-unit id="5c133f6e7cbbe3a8e6d914657ad0e65a743fcb2c" translate="yes" xml:space="preserve">
          <source>The initial app created by &lt;code&gt;ng new&lt;/code&gt; is at the top level of the workspace file structure.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; によって作成された最初のアプリは、ワークスペースファイル構造の最上位にあります。</target>
        </trans-unit>
        <trans-unit id="7b9c95f356d9d8aaf3b5a580d30becc255eceae3" translate="yes" xml:space="preserve">
          <source>The initial app project contains a simple Welcome app, ready to run.</source>
          <target state="translated">最初のアプリプロジェクトには、シンプルなウェルカムアプリが含まれており、実行する準備ができています。</target>
        </trans-unit>
        <trans-unit id="1c618598365a8b0089eeb0d06f473e1e7f5e9801" translate="yes" xml:space="preserve">
          <source>The initial app that you create with &lt;code&gt;ng new app_name&lt;/code&gt; is listed under &quot;projects&quot;:</source>
          <target state="translated">&lt;code&gt;ng new app_name&lt;/code&gt; を使用して作成する最初のアプリは、「プロジェクト」の下にリストされます。</target>
        </trans-unit>
        <trans-unit id="fccb43ed5c07fe0c3365da2b045c6f6d6ee71c9c" translate="yes" xml:space="preserve">
          <source>The initial schema that you have created tells the CLI where to find the schematic that supports the &lt;code&gt;ng add&lt;/code&gt; command. Now you are ready to create that schematic.</source>
          <target state="translated">作成した最初のスキーマは、 &lt;code&gt;ng add&lt;/code&gt; コマンドをサポートする回路図の場所をCLIに通知します。これで、その回路図を作成する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="274d6987906a4ae7a1535a899b14ab18fe115084" translate="yes" xml:space="preserve">
          <source>The initial schematic gets the same name as the project folder, and is generated in &lt;code&gt;src/hello-world&lt;/code&gt;. You can add related schematics to this collection, and modify the generated skeleton code to define your schematic's functionality. Each schematic name must be unique within the collection.</source>
          <target state="translated">最初の回路図はプロジェクトフォルダーと同じ名前になり、 &lt;code&gt;src/hello-world&lt;/code&gt; に生成されます。このコレクションに関連する回路図を追加し、生成されたスケルトンコードを変更して、回路図の機能を定義できます。各回路図名は、コレクション内で一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="3f1077954cbb6cddea88a17c0ce828d622aecc79" translate="yes" xml:space="preserve">
          <source>The initial template defines the layout for a form with two form groups and a submit button. The form groups correspond to two properties of the Hero data model, name and alterEgo. Each group has a label and a box for user input.</source>
          <target state="translated">初期テンプレートでは、2つのフォームグループと送信ボタンを持つフォームのレイアウトを定義しています。フォームグループはHeroデータモデルの2つのプロパティ、nameと alterEgoに対応しています。各グループにはラベルとユーザー入力用のボックスがあります。</target>
        </trans-unit>
        <trans-unit id="af0b72c3bd2192ad6b4afd6a48ff421774caeae0" translate="yes" xml:space="preserve">
          <source>The injected &lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../api/forms/ng_value_accessor&quot;&gt;NG_VALUE_ACCESSOR&lt;/a&gt;&lt;/code&gt; is now readonly. See &lt;a href=&quot;https://github.com/angular/angular/pull/29723&quot;&gt;PR 29273&lt;/a&gt;.</source>
          <target state="translated">注入された &lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../api/forms/ng_value_accessor&quot;&gt;NG_VALUE_ACCESSOR&lt;/a&gt;&lt;/code&gt; は読み取り専用になりました。&lt;a href=&quot;https://github.com/angular/angular/pull/29723&quot;&gt;PR29273を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe3d0e9c54c6b1dffc213d25bb122ab550dcfc75" translate="yes" xml:space="preserve">
          <source>The injection token for the event-manager plug-in service.</source>
          <target state="translated">event-manager プラグインサービスのインジェクショントークン。</target>
        </trans-unit>
        <trans-unit id="1383ded669e589d4e6653269a2fad194b6361cf5" translate="yes" xml:space="preserve">
          <source>The injector determines the starting location in the logical tree and an ending location of the search. The injector begins with the starting location and looks for the token at each level in the logical tree. If the token is found it is returned.</source>
          <target state="translated">インジェクタは、論理ツリー内の開始位置と検索の終了位置を決定します。インジェクターは、開始位置から開始し、論理ツリーの各レベルでトークンを探します。トークンが見つかった場合は、それが返されます。</target>
        </trans-unit>
        <trans-unit id="909976c4bf2fdb45732e4e4857727780da327ef6" translate="yes" xml:space="preserve">
          <source>The injector is responsible for creating service instances and injecting them into classes like &lt;code&gt;HeroListComponent&lt;/code&gt;. You rarely create an Angular injector yourself. Angular creates injectors for you as it executes the app, starting with the &lt;em&gt;root injector&lt;/em&gt; that it creates during the &lt;a href=&quot;bootstrapping&quot;&gt;bootstrap process&lt;/a&gt;.</source>
          <target state="translated">インジェクターは、サービスインスタンスを作成し、それらを &lt;code&gt;HeroListComponent&lt;/code&gt; などのクラスにインジェクトする責任があります。Angularインジェクターを自分で作成することはほとんどありません。Angularは、アプリを実行するときに、&lt;a href=&quot;bootstrapping&quot;&gt;ブートストラッププロセス&lt;/a&gt;中に作成した&lt;em&gt;ルートインジェクターからインジェクター&lt;/em&gt;を作成します。</target>
        </trans-unit>
        <trans-unit id="391362c6611913ba88dda520d9dcb87894ef5621" translate="yes" xml:space="preserve">
          <source>The injector needs providers for both this new logging service and its dependent &lt;code&gt;UserService&lt;/code&gt;. Configure this alternative logger with the &lt;code&gt;useClass&lt;/code&gt; provider-definition key, like &lt;code&gt;BetterLogger&lt;/code&gt;. The following array specifies both providers in the &lt;code&gt;providers&lt;/code&gt; metadata option of the parent module or component.</source>
          <target state="translated">インジェクターには、この新しいロギングサービスとそれに依存する &lt;code&gt;UserService&lt;/code&gt; の両方のプロバイダーが必要です。この代替ロガーを &lt;code&gt;useClass&lt;/code&gt; ような &lt;code&gt;BetterLogger&lt;/code&gt; プロバイダー定義キーで設定します。次の配列は、親モジュールまたはコンポーネントの &lt;code&gt;providers&lt;/code&gt; メタデータオプションで両方のプロバイダーを指定します。</target>
        </trans-unit>
        <trans-unit id="6dc65614e224404ed54dd6ea0d9ada092c4337fc" translate="yes" xml:space="preserve">
          <source>The injector provides the dependency value by invoking a factory function, that you provide as the value of the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; key. Notice that this form of provider has a third key, &lt;code&gt;deps&lt;/code&gt;, which specifies dependencies for the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">インジェクターは、 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; キーの値として提供するファクトリー関数を呼び出すことにより、依存関係の値を提供します。この形式のプロバイダーには、 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数の依存関係を指定する3番目のキー &lt;code&gt;deps&lt;/code&gt; があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f5ec281fc106ebd717eab1bd2c8f717ac4c445bf" translate="yes" xml:space="preserve">
          <source>The injector provides the dependency value by invoking a factory function, that you provide as the value of the &lt;code&gt;useFactory&lt;/code&gt; key. Notice that this form of provider has a third key, &lt;code&gt;deps&lt;/code&gt;, which specifies dependencies for the &lt;code&gt;useFactory&lt;/code&gt; function.</source>
          <target state="translated">インジェクターは、 &lt;code&gt;useFactory&lt;/code&gt; キーの値として提供するファクトリ関数を呼び出すことにより、依存関係の値を提供します。この形式のプロバイダーには、 &lt;code&gt;useFactory&lt;/code&gt; 関数の依存関係を指定する3番目のキー &lt;code&gt;deps&lt;/code&gt; があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="229351c113a20fd8ba46021033876ef36da7993a" translate="yes" xml:space="preserve">
          <source>The injector that contains all of the providers of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; のすべてのプロバイダーを含むインジェクター。</target>
        </trans-unit>
        <trans-unit id="c95f5722ed83490db02364ac66c92b54bf76fcb4" translate="yes" xml:space="preserve">
          <source>The injector that contains all of the providers of the NgModule.</source>
          <target state="translated">NgModule のすべてのプロバイダを含むインジェクタ。</target>
        </trans-unit>
        <trans-unit id="81535b8cfa3709335ca6968ad04963647fb0e43c" translate="yes" xml:space="preserve">
          <source>The injector to use as the parent for the new component.</source>
          <target state="translated">新しいコンポーネントの親として使用するインジェクタ。</target>
        </trans-unit>
        <trans-unit id="e753944a9f0476e23faa1642765ef1111249bf50" translate="yes" xml:space="preserve">
          <source>The injector to use for retrieving the component's factory.</source>
          <target state="translated">コンポーネントの工場出荷時を取得するために使用するインジェクタ。</target>
        </trans-unit>
        <trans-unit id="e9818ffe0b5312214e6049d23aa468b35f9eca71" translate="yes" xml:space="preserve">
          <source>The inner, &lt;code&gt;class-skeleton&lt;/code&gt; region appears twice, once to capture the code that opens the class definition and once to capture the code that closes the class definition.</source>
          <target state="translated">内部の &lt;code&gt;class-skeleton&lt;/code&gt; 領域は2回表示されます。1回はクラス定義を開くコードをキャプチャするため、もう1回はクラス定義を閉じるコードをキャプチャするためです。</target>
        </trans-unit>
        <trans-unit id="97d15b5fd5023fac9a06d495428eae8299fd604c" translate="yes" xml:space="preserve">
          <source>The input element emits an &quot;input&quot; event with the value &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">input要素は、値が&lt;em&gt;Blueの&lt;/em&gt;「input」イベントを&lt;em&gt;発行し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="fc9e87d921dc9b1bdcc50fcb458dbe460f355cb0" translate="yes" xml:space="preserve">
          <source>The input that you provide to the link is treated as a delta to the current URL. For instance, suppose the current URL is &lt;code&gt;/user/(box//aux:team)&lt;/code&gt;. The link &lt;code&gt;&amp;lt;a [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/a&amp;gt;&lt;/code&gt; creates the URL &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt;. See &lt;a href=&quot;router#createUrlTree&quot;&gt;createUrlTree&lt;/a&gt; for more information.</source>
          <target state="translated">リンクに提供する入力は、現在のURLへのデルタとして扱われます。たとえば、現在のURLが &lt;code&gt;/user/(box//aux:team)&lt;/code&gt; ます。リンク &lt;code&gt;&amp;lt;a [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/a&amp;gt;&lt;/code&gt; &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt; jim']&quot;&amp;gt; Jim &amp;lt;/a&amp;gt;は、URL / user /（jim // aux：team）を作成します。詳細については、&lt;a href=&quot;router#createUrlTree&quot;&gt;createUrlTree&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="45f218bc069eb983ea0aa82f12ad5468e38fbc56" translate="yes" xml:space="preserve">
          <source>The inputs of the component.</source>
          <target state="translated">コンポーネントの入力。</target>
        </trans-unit>
        <trans-unit id="9ef9848eb3b4dd6a2af93f2352e54e04d6d6e735" translate="yes" xml:space="preserve">
          <source>The instance of the component class created by &lt;code&gt;TestBed.createComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TestBed.createComponent&lt;/code&gt; によって作成されたコンポーネントクラスのインスタンス。</target>
        </trans-unit>
        <trans-unit id="c42b5877f82b6791369b1b504388d13d671ec5cd" translate="yes" xml:space="preserve">
          <source>The instance of the root component class.</source>
          <target state="translated">ルート・コンポーネント・クラスのインスタンス。</target>
        </trans-unit>
        <trans-unit id="796a3b1682a165dd05dc7257a0f42400175385a8" translate="yes" xml:space="preserve">
          <source>The instance to convert.</source>
          <target state="translated">変換するインスタンス。</target>
        </trans-unit>
        <trans-unit id="f38cf766ca85d67c16df92fd25bac9022b740c83" translate="yes" xml:space="preserve">
          <source>The interesting part of the URL follows the &lt;code&gt;...&lt;/code&gt;:</source>
          <target state="translated">URLの興味深い部分は &lt;code&gt;...&lt;/code&gt; の後に続きます。</target>
        </trans-unit>
        <trans-unit id="702e5fcb69842a35326d93ae27b71240dfadc43a" translate="yes" xml:space="preserve">
          <source>The interfaces are optional for JavaScript and Typescript developers from a purely technical perspective. The JavaScript language doesn't have interfaces. Angular can't see TypeScript interfaces at runtime because they disappear from the transpiled JavaScript.</source>
          <target state="translated">インターフェースは、純粋に技術的な観点から、JavaScript や Typescript の開発者にとってはオプションです。JavaScript言語にはインターフェースはありません。Angularは実行時にTypeScriptのインターフェイスを見ることができませんが、それはトランスパイルされたJavaScriptから消えてしまうからです。</target>
        </trans-unit>
        <trans-unit id="73fe62cb28dec38fb5ac135676c55e085cff63ba" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">内部 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="64d50ef5373d507409c34fbaedaf9a35c68a6991" translate="yes" xml:space="preserve">
          <source>The internal Architect tool delegates work to handler functions called &lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders&lt;/em&gt;&lt;/a&gt;. A builder handler function receives two arguments; a set of input &lt;code&gt;options&lt;/code&gt; (a JSON object), and a &lt;code&gt;context&lt;/code&gt; (a &lt;code&gt;BuilderContext&lt;/code&gt; object).</source>
          <target state="translated">内部Architectツールは、&lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;ビルダー&lt;/em&gt;&lt;/a&gt;と呼ばれるハンドラー関数に作業を委任します。ビルダーハンドラー関数は2つの引数を受け取ります。入力 &lt;code&gt;options&lt;/code&gt; セット（JSONオブジェクト）、および &lt;code&gt;context&lt;/code&gt; （ &lt;code&gt;BuilderContext&lt;/code&gt; オブジェクト）。</target>
        </trans-unit>
        <trans-unit id="1b4b0b78851e7752da5d2f642ad23a0e8de7822f" translate="yes" xml:space="preserve">
          <source>The interpolation braces in &lt;code&gt;{{1 + 1}}&lt;/code&gt; surround the template expression &lt;code&gt;1 + 1&lt;/code&gt;. In the property binding, a template expression appears in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{1 + 1}}&lt;/code&gt; の内挿ブレースは、テンプレート式 &lt;code&gt;1 + 1&lt;/code&gt; 囲みます。プロパティバインディングでは、テンプレート式は &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt; のように &lt;code&gt;=&lt;/code&gt; 記号の右側に引用符で囲まれて表示されます。</target>
        </trans-unit>
        <trans-unit id="93f9b2c51a7af4c4eb35603e8cb48e22004d9e33" translate="yes" xml:space="preserve">
          <source>The interpolation live example demonstrates all of the syntax and code snippets described in this section.</source>
          <target state="translated">補間ライブの例では、このセクションで説明されているすべての構文とコードスニペットを実演しています。</target>
        </trans-unit>
        <trans-unit id="c6187909f50cd0be17663a5d887e024df5706953" translate="yes" xml:space="preserve">
          <source>The item.</source>
          <target state="translated">アイテムです。</target>
        </trans-unit>
        <trans-unit id="b27c5c8196dbfc8a53c04f22e7d7da67c2563040" translate="yes" xml:space="preserve">
          <source>The key is a supported event name to be configured, and the options object contains a set of properties, with override values to be applied to the named recognizer event. For example, to disable recognition of the rotate event, specify &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt;.</source>
          <target state="translated">キーは、サポートされる構成済みのイベント名であり、optionsオブジェクトには、名前付き認識イベントに適用されるオーバーライド値を含む一連のプロパティが含まれています。たとえば、回転イベントの認識を無効にするには、 &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3afe8949a36dd6edcd0b52b40e17cb1882c7d22a" translate="yes" xml:space="preserve">
          <source>The key is the DOM event that the directive listens to. To listen to global events, add the target to the event name. The target can be &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">キーは、ディレクティブがリッスンするDOMイベントです。グローバルイベントをリッスンするには、ターゲットをイベント名に追加します。ターゲットは、 &lt;code&gt;window&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;body&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d099ac2195e7034049ce33d2c88e04c7c5b2615d" translate="yes" xml:space="preserve">
          <source>The key is the DOM event that the directive listens to. To listen to global events, add the target to the event name. The target can be &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">重要なのは、ディレクティブがリッスンするDOMイベントです。グローバルイベントをリッスンするには、ターゲットをイベント名に追加します。ターゲットは、 &lt;code&gt;window&lt;/code&gt; 、 &lt;code&gt;document&lt;/code&gt; または &lt;code&gt;body&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7889af82f4b022dadb547ae2824efe7a6bb47207" translate="yes" xml:space="preserve">
          <source>The key is to make the code more reusable, easier to read, and less mistake prone.</source>
          <target state="translated">重要なのは、コードをより再利用しやすく、読みやすく、間違いやすいコードにしないことです。</target>
        </trans-unit>
        <trans-unit id="cdbe02fa8964f612bbf73ee656e19f8d119c6afa" translate="yes" xml:space="preserve">
          <source>The key name.</source>
          <target state="translated">鍵の名前。</target>
        </trans-unit>
        <trans-unit id="23003367b3f2a200b40029cbe762bd40e77959fd" translate="yes" xml:space="preserve">
          <source>The key point here is that you have to export it so you can import it elsewhere. Next, import it into the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, in this example &lt;code&gt;app.module.ts&lt;/code&gt;, with a JavaScript import statement:</source>
          <target state="translated">ここで重要なのは、他の場所にインポートできるようにエクスポートする必要があるということです。次に、にインポートする &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; この例では、 &lt;code&gt;app.module.ts&lt;/code&gt; JavaScriptのimport文で、：</target>
        </trans-unit>
        <trans-unit id="d0fa848ad3856bedad82e6c7874b70da382521e0" translate="yes" xml:space="preserve">
          <source>The key point here is that you have to export it so you can import it elsewhere. Next, import it into the NgModule, in this example &lt;code&gt;app.module.ts&lt;/code&gt;, with a JavaScript import statement:</source>
          <target state="translated">ここで重要なのは、他の場所にインポートできるようにエクスポートする必要があることです。次に、JavaScriptインポートステートメントを使用して、この例では &lt;code&gt;app.module.ts&lt;/code&gt; のNgModuleにインポートします。</target>
        </trans-unit>
        <trans-unit id="5da31d71b1f60f0adaeccb267bd7eb24f7673f75" translate="yes" xml:space="preserve">
          <source>The key point is that you control the hero job application questions entirely through the objects returned from &lt;code&gt;QuestionService&lt;/code&gt;. Questionnaire maintenance is a simple matter of adding, updating, and removing objects from the &lt;code&gt;questions&lt;/code&gt; array.</source>
          <target state="translated">重要な点は、 &lt;code&gt;QuestionService&lt;/code&gt; から返されたオブジェクトを介してヒーロージョブアプリケーションの質問を完全に制御することです。質問表の保守は、 &lt;code&gt;questions&lt;/code&gt; 配列からオブジェクトを追加、更新、および削除するという単純な問題です。</target>
        </trans-unit>
        <trans-unit id="5d0681bffbfdd03e7e32f7464f13ef4c498fb543" translate="yes" xml:space="preserve">
          <source>The key takeaway is that when binding to a child component's property in a parent component&amp;mdash;that is, what's in square brackets&amp;mdash;you must decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component.</source>
          <target state="translated">重要なポイントは、親コンポーネント内の子コンポーネントのプロパティにバインドする場合、つまり角括弧内にあるものにバインドする場合、子コンポーネントで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; してプロパティを装飾する必要があることです。</target>
        </trans-unit>
        <trans-unit id="6c5cd796012caba3f50ab44f1a501f9433b217c1" translate="yes" xml:space="preserve">
          <source>The key thing to understand about a hybrid application is that every element in the DOM is owned by exactly one of the two frameworks. The other framework ignores it. If an element is owned by AngularJS, Angular treats it as if it didn't exist, and vice versa.</source>
          <target state="translated">ハイブリッドアプリケーションについて理解しておくべき重要なことは、DOM内のすべての要素は、2つのフレームワークのうちの正確に1つが所有しているということです。もう一方のフレームワークはそれを無視します。ある要素がAngularJSによって所有されている場合、Angularはその要素が存在しないかのように扱い、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="82a5cbcd9ee629368a7dbf46b633770937978193" translate="yes" xml:space="preserve">
          <source>The keyword to search for, as provided in the search bar in angular.io.</source>
          <target state="translated">angular.ioの検索バーで提供されている、検索するキーワード。</target>
        </trans-unit>
        <trans-unit id="7139f105d9119f519815353fa125bb9a5a6a2aef" translate="yes" xml:space="preserve">
          <source>The language is simply HTML5. You're presenting two of the &lt;code&gt;Hero&lt;/code&gt; fields, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt;, and opening them up for user input in input boxes.</source>
          <target state="translated">言語は単にHTML5です。ここでは、2つの &lt;code&gt;Hero&lt;/code&gt; フィールド &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;alterEgo&lt;/code&gt; を表示し、入力ボックスでユーザーが入力できるようにフィールドを開いています。</target>
        </trans-unit>
        <trans-unit id="feb75538a2560e199fdfa7762dd5353f05b9f3bf" translate="yes" xml:space="preserve">
          <source>The last line of the log is the most important. It shows that Karma ran three tests that all passed.</source>
          <target state="translated">ログの最後の行が最も重要です。これは、Karmaが3つのテストを行い、すべて合格したことを示しています。</target>
        </trans-unit>
        <trans-unit id="6f3dbbe32e0d357b0c757ddb40c409623490dee3" translate="yes" xml:space="preserve">
          <source>The last route with the &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;**&lt;/code&gt; is a wildcard route. The router selects this route if the requested URL doesn't match any of the paths earlier in the list and sends the user to the &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; が &lt;code&gt;**&lt;/code&gt; の最後のルートは、ワイルドカードルートです。要求されたURLがリストの前のパスのいずれとも一致しない場合、ルーターはこのルートを選択し、ユーザーを &lt;code&gt;PageNotFoundComponent&lt;/code&gt; に送信します。</target>
        </trans-unit>
        <trans-unit id="a7b74ae411865b1ed27412a302e7dcc77c02a30f" translate="yes" xml:space="preserve">
          <source>The last step, verifying that no requests remain outstanding, is common enough for you to move it into an &lt;code&gt;afterEach()&lt;/code&gt; step:</source>
          <target state="translated">最後のステップは、未解決のリクエストがないことを確認することであり、 &lt;code&gt;afterEach()&lt;/code&gt; ステップに移動するのに十分一般的です。</target>
        </trans-unit>
        <trans-unit id="6634b9650ac8fa95d9ff2877842e12f8d187606e" translate="yes" xml:space="preserve">
          <source>The last update tick/run counters give the time since specific events happened related to the idle queue. The &quot;Last update run&quot; counter shows the last time idle tasks were actually executed. &quot;Last update tick&quot; shows the time since the last event after which the queue might be processed.</source>
          <target state="translated">最終更新ティック/ランカウンタは、アイドルキューに関連した特定のイベントが発生してからの時間を示します。&quot;Last update run&quot; カウンタは、アイドルタスクが実際に実行された最後の時間を示します。&quot;最終更新ティック &quot;カウンタは、キューが処理される可能性のある最後のイベントが発生してからの時間を示します。</target>
        </trans-unit>
        <trans-unit id="e78818a7cecf54088477301d548000e53b92b7d2" translate="yes" xml:space="preserve">
          <source>The latest &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;rc&lt;/code&gt; pre-release version of the documentation is available at &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;.</source>
          <target state="translated">ドキュメントの最新の &lt;code&gt;next&lt;/code&gt; または &lt;code&gt;rc&lt;/code&gt; プレリリースバージョンは、&lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;で入手できます。</target>
        </trans-unit>
        <trans-unit id="7505ed32fffc9d3847991eef5fbba124922106c7" translate="yes" xml:space="preserve">
          <source>The lazy loaded scenario</source>
          <target state="translated">怠惰にロードされたシナリオ</target>
        </trans-unit>
        <trans-unit id="c3bdd32d919036a2592743a6c73032960479a538" translate="yes" xml:space="preserve">
          <source>The lazy loading and re-configuration happen just once, when the route is &lt;em&gt;first&lt;/em&gt; requested; the module and routes are available immediately for subsequent requests.</source>
          <target state="translated">遅延読み込みと再構成は、ルートが&lt;em&gt;最初に&lt;/em&gt;リクエストされたときに一度だけ行われます。モジュールとルートは、後続のリクエストですぐに使用できます。</target>
        </trans-unit>
        <trans-unit id="890f7a7962fc803e17826b68ce985c5f777f7466" translate="yes" xml:space="preserve">
          <source>The lazy loading and re-configuration happen just once, when the route is first requested; the module and routes are available immediately for subsequent requests.</source>
          <target state="translated">遅延ロードと再設定は、ルートが最初にリクエストされたときに一度だけ行われます。</target>
        </trans-unit>
        <trans-unit id="c57c903a85bd033e12fde20ee11764d762c10386" translate="yes" xml:space="preserve">
          <source>The library must be rebuilt on every change. When linking a library, make sure that the build step runs in watch mode, and that the library's &lt;code&gt;package.json&lt;/code&gt; configuration points at the correct entry points. For example, &lt;code&gt;main&lt;/code&gt; should point at a JavaScript file, not a TypeScript file.</source>
          <target state="translated">ライブラリは変更のたびに再構築する必要があります。ライブラリをリンクするときは、ビルドステップが監視モードで実行され、ライブラリの &lt;code&gt;package.json&lt;/code&gt; 構成が正しいエントリポイントを指していることを確認してください。たとえば、 &lt;code&gt;main&lt;/code&gt; はTypeScriptファイルではなく、JavaScriptファイルを指す必要があります。</target>
        </trans-unit>
        <trans-unit id="e3fae2f43d6b145b898cf826f421cd45ab8a46ba" translate="yes" xml:space="preserve">
          <source>The lightweight injection token design pattern consists of using a small abstract class as an injection token, and providing the actual implementation at a later stage. The abstract class is retained (not tree-shaken), but it is small and has no material impact on the application size.</source>
          <target state="translated">軽量インジェクショントークンの設計パターンは、インジェクショントークンとして小さな抽象クラスを使用し、後の段階で実際の実装を提供することで構成されています。抽象クラスは保持されますが(ツリーシェイクされません)、それは小さく、アプリケーションのサイズに実質的な影響を与えません。</target>
        </trans-unit>
        <trans-unit id="13e7f9ae63068e388eb142c63a69b2e6ee8f8e62" translate="yes" xml:space="preserve">
          <source>The lightweight injection token design pattern is especially important for library developers. It ensures that when an application uses only some of your library's capabilities, the unused code can be eliminated from the client's app bundle.</source>
          <target state="translated">軽量インジェクショントークンのデザインパターンは、ライブラリ開発者にとって特に重要です。これは、アプリケーションがライブラリの機能の一部だけを使用する場合に、クライアントのアプリバンドルから未使用のコードを排除することができることを保証します。</target>
        </trans-unit>
        <trans-unit id="cea08446497238e4babf505cd66b26e387fd09b7" translate="yes" xml:space="preserve">
          <source>The line, &lt;code&gt;&amp;lt;h4&amp;gt;{{ product.price | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; }}&amp;lt;/h4&amp;gt;&lt;/code&gt;, uses the &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; pipe to transform &lt;code&gt;product.price&lt;/code&gt; from a number to a currency string. A pipe is a way you can transform data in your HTML template. For more information about Angular pipes, see &lt;a href=&quot;../guide/pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">行、 &lt;code&gt;&amp;lt;h4&amp;gt;{{ product.price | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; }}&amp;lt;/h4&amp;gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; パイプを使用して &lt;code&gt;product.price&lt;/code&gt; を数値から通貨文字列に変換します。パイプは、HTMLテンプレートのデータを変換する方法です。角パイプの詳細については、&lt;a href=&quot;../guide/pipes&quot;&gt;パイプを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44499b604f2c8a7fb9248b301fa86fbddbe0d759" translate="yes" xml:space="preserve">
          <source>The links are styled as colored blocks by the &lt;code&gt;dashboard.component.css&lt;/code&gt;.</source>
          <target state="translated">リンクは、 &lt;code&gt;dashboard.component.css&lt;/code&gt; によって色付きのブロックとしてスタイル設定されます。</target>
        </trans-unit>
        <trans-unit id="70f5c6325d761fe1e544503d9e54f38c460d44c0" translate="yes" xml:space="preserve">
          <source>The links don't go anywhere yet but &lt;a href=&quot;toh-pt5#hero-details&quot;&gt;they will shortly&lt;/a&gt;.</source>
          <target state="translated">リンクはまだどこにも行きませんが&lt;a href=&quot;toh-pt5#hero-details&quot;&gt;、まもなく表示され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1a2bdb6c32f442bc5dc6ab7fffdac703a44af59c" translate="yes" xml:space="preserve">
          <source>The linting configuration to use.</source>
          <target state="translated">使用するリンティング設定。</target>
        </trans-unit>
        <trans-unit id="cb5b67e650373461ed8bddbd8ff4e58af97dc7be" translate="yes" xml:space="preserve">
          <source>The list of async validators applied to control.</source>
          <target state="translated">制御に適用される非同期バリデータのリスト。</target>
        </trans-unit>
        <trans-unit id="a0b532d757d03e389d179b94a37fe57febba7478" translate="yes" xml:space="preserve">
          <source>The list of children of this group</source>
          <target state="translated">このグループの子供たちの一覧</target>
        </trans-unit>
        <trans-unit id="795b91e111cdd26a419fb100996cd8d6c70ea1eb" translate="yes" xml:space="preserve">
          <source>The list of heroes is unchanged. No hero row is highlighted.</source>
          <target state="translated">ヒーローのリストは変更されません。ヒーローの列がハイライトされていません。</target>
        </trans-unit>
        <trans-unit id="49857ea47c4cab38f72361229ffb02aa45872afe" translate="yes" xml:space="preserve">
          <source>The list of heroes.</source>
          <target state="translated">英雄の一覧です。</target>
        </trans-unit>
        <trans-unit id="5fa24d8b936262f7c95d2d68e29587ae556a36db" translate="yes" xml:space="preserve">
          <source>The list of validators applied to a control.</source>
          <target state="translated">コントロールに適用されるバリデータのリスト。</target>
        </trans-unit>
        <trans-unit id="0aadeca54e3dfecbee61ea33dcad37c9d04279da" translate="yes" xml:space="preserve">
          <source>The live example &lt;em&gt;does&lt;/em&gt; highlight the selected row because it demonstrates the final state of the application which includes the steps you're &lt;em&gt;about&lt;/em&gt; to cover. At the moment this guide is describing the state of affairs &lt;em&gt;prior&lt;/em&gt; to those steps.</source>
          <target state="translated">実際の例では&lt;em&gt;ない&lt;/em&gt;、それはあなたがしているステップを含むアプリケーションの最終的な状態を示しているため、選択した行をハイライト&lt;em&gt;について&lt;/em&gt;カバーにを。現時点では、このガイドはこれらのステップの&lt;em&gt;前&lt;/em&gt;の状況を説明しています。</target>
        </trans-unit>
        <trans-unit id="901614f59731b265c4298a51f6591ca36d90b9ba" translate="yes" xml:space="preserve">
          <source>The live example demonstrates all of the syntax and code snippets described in this page.</source>
          <target state="translated">ライブの例では、このページで説明されているすべての構文とコードスニペットを実演しています。</target>
        </trans-unit>
        <trans-unit id="7c99dbd847d2edb666ec41151e3e184ee3bbc26b" translate="yes" xml:space="preserve">
          <source>The live example demonstrates the lifecycle hooks in action through a series of exercises presented as components under the control of the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">ライブの例では、ルート &lt;code&gt;AppComponent&lt;/code&gt; の制御下にあるコンポーネントとして提示される一連の演習を通じて、ライフサイクルフックの動作を示します。</target>
        </trans-unit>
        <trans-unit id="fa3db618c2285059545d9ccee1ad73d37fb3481e" translate="yes" xml:space="preserve">
          <source>The live example demonstrates the use of lifecycle hooks through a series of exercises presented as components under the control of the root &lt;code&gt;AppComponent&lt;/code&gt;. In each case a &lt;em&gt;parent&lt;/em&gt; component serves as a test rig for a &lt;em&gt;child&lt;/em&gt; component that illustrates one or more of the lifecycle hook methods.</source>
          <target state="translated">実例では、ルート &lt;code&gt;AppComponent&lt;/code&gt; の制御下にあるコンポーネントとして提示される一連の演習を通じて、ライフサイクルフックの使用法を示しています。各場合において&lt;em&gt;、親&lt;/em&gt;コンポーネントは用試験装置として機能する&lt;em&gt;子&lt;/em&gt;ライフサイクルフック方法の一つ以上を示すコンポーネント。</target>
        </trans-unit>
        <trans-unit id="8e604124b200d483830f1b601a11ceaa96f50692" translate="yes" xml:space="preserve">
          <source>The locale (&lt;code&gt;fr&lt;/code&gt; or &lt;code&gt;en-US&lt;/code&gt; for instance).</source>
          <target state="translated">ロケール（たとえば、 &lt;code&gt;fr&lt;/code&gt; または &lt;code&gt;en-US&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bc0d61c0534e7b5e89350cd2ca0eac665647cb36" translate="yes" xml:space="preserve">
          <source>The locale code.</source>
          <target state="translated">ロケールコード。</target>
        </trans-unit>
        <trans-unit id="dd0ba90791fe2c1551d163b9e264ade3c06599d7" translate="yes" xml:space="preserve">
          <source>The locale identifiers used by CLDR and Angular are based on &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. These specifications change over time; the following table maps previous identifiers to current ones at time of writing:</source>
          <target state="translated">CLDRとAngularで使用されるロケール識別子は&lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47に&lt;/a&gt;基づいています。これらの仕様は時間とともに変化します。次の表は、執筆時点で以前の識別子を現在のものにマップしています。</target>
        </trans-unit>
        <trans-unit id="3654c4df9d402ec66e65601b3977777d4df35e6d" translate="yes" xml:space="preserve">
          <source>The location strategy.</source>
          <target state="translated">立地戦略。</target>
        </trans-unit>
        <trans-unit id="7b62a0bd0b13a459b84264c8b7eac3dce9b81198" translate="yes" xml:space="preserve">
          <source>The log entries appear as the string value of the &lt;em&gt;power&lt;/em&gt; property changes. But the &lt;code&gt;ngOnChanges&lt;/code&gt; does not catch changes to &lt;code&gt;hero.name&lt;/code&gt; That's surprising at first.</source>
          <target state="translated">&lt;em&gt;電源&lt;/em&gt;プロパティの文字列値が変化すると、ログエントリが表示されます。しかし &lt;code&gt;ngOnChanges&lt;/code&gt; はへの変更をキャッチしません &lt;code&gt;hero.name&lt;/code&gt; 最初は驚きです。</target>
        </trans-unit>
        <trans-unit id="3128593ceae27bf4eb065a974f4a2233b8191700" translate="yes" xml:space="preserve">
          <source>The log entries appear as the string value of the &lt;em&gt;power&lt;/em&gt; property changes. Notice, however, that the &lt;code&gt;ngOnChanges()&lt;/code&gt; method does not catch changes to &lt;code&gt;hero.name&lt;/code&gt;. This is because Angular calls the hook only when the value of the input property changes. In this case, &lt;code&gt;hero&lt;/code&gt; is the input property, and the value of the &lt;code&gt;hero&lt;/code&gt; property is the &lt;em&gt;reference to the hero object&lt;/em&gt;. The object reference did not change when the value of its own &lt;code&gt;name&lt;/code&gt; property changed.</source>
          <target state="translated">&lt;em&gt;power&lt;/em&gt;プロパティの文字列値が変更されると、ログエントリが表示されます。ただし、 &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドは &lt;code&gt;hero.name&lt;/code&gt; への変更をキャッチしないことに注意してください。これは、Angularが入力プロパティの値が変更された場合にのみフックを呼び出すためです。この場合、 &lt;code&gt;hero&lt;/code&gt; は入力プロパティであり、 &lt;code&gt;hero&lt;/code&gt; プロパティの値は&lt;em&gt;heroオブジェクトへの参照&lt;/em&gt;です。自身の &lt;code&gt;name&lt;/code&gt; プロパティの値が変更されても、オブジェクト参照は変更されませんでした。</target>
        </trans-unit>
        <trans-unit id="5371caa0a34b7cd92da5480bcaa60ece14b870cf" translate="yes" xml:space="preserve">
          <source>The logic tree for this example of &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; is as follows:</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の例のロジックツリーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="db8a04173b4b0a04499c47d1829ce78acfaf0f09" translate="yes" xml:space="preserve">
          <source>The logic tree for this example of &lt;code&gt;viewProviders&lt;/code&gt; is as follows:</source>
          <target state="translated">この &lt;code&gt;viewProviders&lt;/code&gt; の例のロジックツリーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="17661a2f13ce821c0bf724013752f42c941fc3fb" translate="yes" xml:space="preserve">
          <source>The logical tree looks like this with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">論理ツリーは、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; の &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; すると次のようになります。</target>
        </trans-unit>
        <trans-unit id="6c1735a0aa10b7541d3734c71e401644ee7a31a3" translate="yes" xml:space="preserve">
          <source>The logical tree representation shows why this is:</source>
          <target state="translated">論理ツリー表現では、その理由を示しています。</target>
        </trans-unit>
        <trans-unit id="1d531fc78d2d733781719c1f451152d073ed41f9" translate="yes" xml:space="preserve">
          <source>The main Angular modules for animations are &lt;code&gt;@angular/animations&lt;/code&gt; and &lt;code&gt;@angular/platform-browser&lt;/code&gt;. When you create a new project using the CLI, these dependencies are automatically added to your project.</source>
          <target state="translated">アニメーションの主なAngularモジュールは &lt;code&gt;@angular/animations&lt;/code&gt; と &lt;code&gt;@angular/platform-browser&lt;/code&gt; 。CLIを使用して新しいプロジェクトを作成すると、これらの依存関係がプロジェクトに自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="7263be48b2699ade73a8888b18237441585c4155" translate="yes" xml:space="preserve">
          <source>The main CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, contains a &lt;code&gt;fileReplacements&lt;/code&gt; section in the configuration for each build target, which allows you to replace any file with a target-specific version of that file. This is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging.</source>
          <target state="translated">メインのCLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; には、各ビルドターゲットの構成に &lt;code&gt;fileReplacements&lt;/code&gt; セクションが含まれています。これにより、任意のファイルをそのファイルのターゲット固有のバージョンに置き換えることができます。これは、本番環境やステージングなど、特定の環境をターゲットとするビルドにターゲット固有のコードまたは変数を含める場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bc356e186170cb322f0a32a7caaa8cd2b339ae78" translate="yes" xml:space="preserve">
          <source>The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags here manually.</source>
          <target state="translated">誰かがサイトにアクセスしたときに表示されるメインのHTMLページ。CLIは、アプリのビルド時にすべてのJavaScriptファイルとCSSファイルを自動的に追加するため、通常、ここで手動で &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; タグを追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="17744529805032738d2ce1337233da25a724ce4c" translate="yes" xml:space="preserve">
          <source>The main entry point for your application. Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and bootstraps the application's root module (AppModule) to run in the browser. You can also use the &lt;a href=&quot;aot-compiler&quot;&gt;AOT compiler&lt;/a&gt; without changing any code by appending the &lt;code&gt;--aot&lt;/code&gt; flag to the CLI &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; commands.</source>
          <target state="translated">アプリケーションのメインエントリポイント。アプリケーションを&lt;a href=&quot;glossary#jit&quot;&gt;JITコンパイラー&lt;/a&gt;でコンパイルし、アプリケーションのルートモジュール（AppModule）をブートストラップしてブラウザーで実行します。 &lt;code&gt;--aot&lt;/code&gt; フラグをCLI &lt;code&gt;build&lt;/code&gt; および &lt;code&gt;serve&lt;/code&gt; コマンドに追加することにより、コードを変更せずに&lt;a href=&quot;aot-compiler&quot;&gt;AOTコンパイラー&lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d0f2908e2176918f5ec05936850fcaeb40f2aee6" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">ユニットテストのメインのエントリーポイントで、Angular固有の設定が含まれています。通常、このファイルを編集する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5b6bdd0aa0401fe9344207ee1da20b9b5122cf9c" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some library-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">ユニットテストのメインのエントリーポイントであり、ライブラリ固有の設定もあります。通常、このファイルを編集する必要はありません。</target>
        </trans-unit>
        <trans-unit id="82234ab06c7273360d9dcd17147814d4ef5d22aa" translate="yes" xml:space="preserve">
          <source>The main form is visible from the start because the &lt;code&gt;submitted&lt;/code&gt; property is false until you submit the form, as this fragment from the &lt;code&gt;HeroFormComponent&lt;/code&gt; shows:</source>
          <target state="translated">&lt;code&gt;HeroFormComponent&lt;/code&gt; からのこのフラグメントが示すように、フォームを送信するまで送信 &lt;code&gt;submitted&lt;/code&gt; プロパティはfalseであるため、メインフォームは最初から表示されます。</target>
        </trans-unit>
        <trans-unit id="89228ab70b4f42a9a833463f6fddc8df700cd69f" translate="yes" xml:space="preserve">
          <source>The main section heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">メインセクションの見出しの後には空行を入れ、その見出しの内容を記載します。</target>
        </trans-unit>
        <trans-unit id="bedc39e25a378ea1e74b444633eb2567c1be4edd" translate="yes" xml:space="preserve">
          <source>The marble library constructs the corresponding observable, which the test sets as the &lt;code&gt;getQuote&lt;/code&gt; spy's return value.</source>
          <target state="translated">大理石のライブラリは、対応するオブザーバブルを作成します。テストでは、これを &lt;code&gt;getQuote&lt;/code&gt; スパイの戻り値として設定します。</target>
        </trans-unit>
        <trans-unit id="c152d7d77841879fc15850ada302d9a7604f9a5f" translate="yes" xml:space="preserve">
          <source>The markdown is as follows:</source>
          <target state="translated">マークダウンは以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="8748eb03cd3a2a31a452da21e18e8fe67fa2c88f" translate="yes" xml:space="preserve">
          <source>The markup for the above example is:</source>
          <target state="translated">上記の例のマークアップは</target>
        </trans-unit>
        <trans-unit id="82140eb18cda68dafbe96adfecdd4de9ecc691a0" translate="yes" xml:space="preserve">
          <source>The match url, &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt;, will rewrite every request. You'll have to adjust this if you want some requests to get through, such as web API requests.</source>
          <target state="translated">一致URL &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt; 、すべての要求を書き換えます。Web APIリクエストなどの一部のリクエストを通過させたい場合は、これを調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ad0897b9ee03f741fd1c01511860b55ea1d75e0" translate="yes" xml:space="preserve">
          <source>The matrix parameters associated with a segment</source>
          <target state="translated">セグメントに関連付けられた行列パラメータ</target>
        </trans-unit>
        <trans-unit id="a76d5b3e6982be276ae88de5739d5fed54638bd2" translate="yes" xml:space="preserve">
          <source>The matrix parameters scoped to this route</source>
          <target state="translated">このルートに適用される行列パラメータ</target>
        </trans-unit>
        <trans-unit id="90e33c849863252496fc8d6d880afd0e291d9d8e" translate="yes" xml:space="preserve">
          <source>The maximum threshold for error relative to the baseline.</source>
          <target state="translated">ベースラインに対する誤差の最大閾値。</target>
        </trans-unit>
        <trans-unit id="53883cb7c75145e23e98e86bbe3bd3c7cc0a7688" translate="yes" xml:space="preserve">
          <source>The maximum threshold for warning relative to the baseline.</source>
          <target state="translated">ベースラインに対する警告の最大閾値。</target>
        </trans-unit>
        <trans-unit id="513958a5ccc3ab354e2a78eb9e9b0f96ec58220c" translate="yes" xml:space="preserve">
          <source>The mechanism by which the Angular framework synchronizes the state of an application's UI with the state of the data. The change detector checks the current state of the data model whenever it runs, and maintains it as the previous state to compare on the next iteration.</source>
          <target state="translated">AngularフレームワークがアプリケーションのUIの状態とデータの状態を同期させる仕組み。変更検出器は実行するたびにデータモデルの現在の状態をチェックし、次の反復時に比較するために前の状態として保持します。</target>
        </trans-unit>
        <trans-unit id="87bec61d846af1bc84cef595bb56f5dd04dd2458" translate="yes" xml:space="preserve">
          <source>The messages will look better when you add the private CSS styles to &lt;code&gt;messages.component.css&lt;/code&gt; as listed in one of the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt; tabs below.</source>
          <target state="translated">プライベートCSSスタイルを &lt;code&gt;messages.component.css&lt;/code&gt; に追加すると、以下の&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;「最終コードレビュー」&lt;/a&gt;タブの1つにリストされているように、メッセージがより見やすくなります。</target>
        </trans-unit>
        <trans-unit id="f85700447fab8625b23e50aafd91dead8193e775" translate="yes" xml:space="preserve">
          <source>The metadata for a component class associates it with a &lt;em&gt;template&lt;/em&gt; that defines a view. A template combines ordinary HTML with Angular &lt;em&gt;directives&lt;/em&gt; and &lt;em&gt;binding markup&lt;/em&gt; that allow Angular to modify the HTML before rendering it for display.</source>
          <target state="translated">コンポーネントクラスのメタデータは、ビューを定義する&lt;em&gt;テンプレートに&lt;/em&gt;関連付けます。テンプレートは、通常のHTMLとAngular &lt;em&gt;ディレクティブ&lt;/em&gt;および&lt;em&gt;バインディングマークアップ&lt;/em&gt;を組み合わせて、AngularがHTMLを表示用にレンダリングする前に変更できるようにします。</target>
        </trans-unit>
        <trans-unit id="b6b4287af878accde817a3a3ec85445a29b32903" translate="yes" xml:space="preserve">
          <source>The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view. In particular, it associates a &lt;em&gt;template&lt;/em&gt; with the component, either directly with inline code, or by reference. Together, the component and its template describe a &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">コンポーネントのメタデータは、コンポーネントとそのビューを作成および表示するために必要な主要なビルディングブロックを取得する場所をAngularに指示します。特に、インラインコードと直接、または参照により、&lt;em&gt;テンプレート&lt;/em&gt;をコンポーネントに関連付けます。一緒に、コンポーネントとそのテンプレートは&lt;em&gt;ビューを&lt;/em&gt;記述し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2f487cef4aac90b4da53c7fc9e447312b42cba73" translate="yes" xml:space="preserve">
          <source>The metadata for a service class provides the information Angular needs to make it available to components through &lt;em&gt;dependency injection (DI)&lt;/em&gt;.</source>
          <target state="translated">サービスクラスのメタデータは、Angularが&lt;em&gt;依存性注入（DI）&lt;/em&gt;を通じてコン​​ポーネントで利用できるようにするために必要な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="da2ac4fe5a7aeb6c5ff2fac4828b395f67c727b6" translate="yes" xml:space="preserve">
          <source>The method is called &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; because you configure the router at the application's root level. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</source>
          <target state="translated">アプリケーションのルートレベルでルーターを構成するため、このメソッドは &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; と呼ばれます。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドは、ルーティングするために必要なサービス・プロバイダーとの指令を供給し、現在のブラウザのURLに基づいて初期のナビゲーションを行います。</target>
        </trans-unit>
        <trans-unit id="b7e8112bc543348cbdfdfacbd8dc0c43b7ff54f1" translate="yes" xml:space="preserve">
          <source>The method is called &lt;code&gt;forRoot()&lt;/code&gt; because you configure the router at the application's root level. The &lt;code&gt;forRoot()&lt;/code&gt; method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</source>
          <target state="translated">アプリケーションのルートレベルでルーターを構成するため、このメソッドは &lt;code&gt;forRoot()&lt;/code&gt; と呼ばれます。 &lt;code&gt;forRoot()&lt;/code&gt; メソッドは、ルーティングするために必要なサービス・プロバイダーとの指令を供給し、現在のブラウザのURLに基づいて初期のナビゲーションを行います。</target>
        </trans-unit>
        <trans-unit id="f94bbf603605c0e2d8cf99c4a32636376256c78c" translate="yes" xml:space="preserve">
          <source>The method returns immediately with an empty array if there is no search term. The rest of it closely resembles &lt;code&gt;getHeroes()&lt;/code&gt;, the only significant difference being the URL, which includes a query string with the search term.</source>
          <target state="translated">検索語がない場合、メソッドは空の配列ですぐに戻ります。それ以外の部分は &lt;code&gt;getHeroes()&lt;/code&gt; に非常によく似ています。唯一の大きな違いは、検索用語を含むクエリ文字列を含むURLです。</target>
        </trans-unit>
        <trans-unit id="b8bd6826e2d0fcb10e3e7991b3567fdd80af26cd" translate="yes" xml:space="preserve">
          <source>The method that is called when the disabled status changes.</source>
          <target state="translated">無効化された状態が変化したときに呼び出されるメソッドです。</target>
        </trans-unit>
        <trans-unit id="ce97f7be34496d68074082adcce30ef92c9fdc1b" translate="yes" xml:space="preserve">
          <source>The method that is called when the value changes</source>
          <target state="translated">値が変化したときに呼び出されるメソッド</target>
        </trans-unit>
        <trans-unit id="962f054aa845ba6ec1c4ab8efa6ec09198bf5182" translate="yes" xml:space="preserve">
          <source>The method then, like any validator, returns &lt;code&gt;null&lt;/code&gt; if the form is valid, and &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; if it is not. This validator handles any potential errors with the &lt;code&gt;catchError&lt;/code&gt; operator. In this case, the validator treats the &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; error as a successful validation, because failure to make a validation request does not necessarily mean that the alter ego is invalid. You could handle the error differently and return the &lt;code&gt;ValidationError&lt;/code&gt; object instead.</source>
          <target state="translated">このメソッドは、他のバリデーターと同様に、フォームが有効な場合は &lt;code&gt;null&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; を返します。このバリデーターは、 &lt;code&gt;catchError&lt;/code&gt; オペレーターを使用して潜在的なエラーを処理します。この場合、検証要求を行わなかったからといって、分身が無効であるとは限らないため、バリデーターは &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; エラーを検証の成功として扱います。エラーを別の方法で処理し、代わりに &lt;code&gt;ValidationError&lt;/code&gt; オブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="6db6edec01a98f400bce87dd07f007a8049e3a79" translate="yes" xml:space="preserve">
          <source>The methods now return observables of type &lt;code&gt;PhoneData&lt;/code&gt; and &lt;code&gt;PhoneData[]&lt;/code&gt;. This is a type you don't have yet. Add a simple interface for it:</source>
          <target state="translated">メソッドは、タイプ &lt;code&gt;PhoneData&lt;/code&gt; および &lt;code&gt;PhoneData[]&lt;/code&gt; オブザーバブルを返すようになりました。まだ手に入らないタイプです。そのための単純なインターフェースを追加します。</target>
        </trans-unit>
        <trans-unit id="1f8e626c9a26aabb72b198cad89d9bbfb757820a" translate="yes" xml:space="preserve">
          <source>The microsyntax parser title-cases all directives and prefixes them with the directive's attribute name, such as &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; input properties, &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;trackBy&lt;/code&gt;, become &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt;, respectively. That's how the directive learns that the list is &lt;code&gt;heroes&lt;/code&gt; and the track-by function is &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">microsyntaxパーサーはすべてのディレクティブのタイトルを &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 、ngForなどのディレクティブの属性名をプレフィックスとして付加します。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 入力プロパティの &lt;code&gt;of&lt;/code&gt; および &lt;code&gt;trackBy&lt;/code&gt; は、それぞれ &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt; になります。このようにして、ディレクティブはリストが &lt;code&gt;heroes&lt;/code&gt; あり、トラックバイ関数が &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt; であることを学習します。</target>
        </trans-unit>
        <trans-unit id="2cc0f751d86f93164b56bc95c817abc075bbb44e" translate="yes" xml:space="preserve">
          <source>The microsyntax parser title-cases all directives and prefixes them with the directive's attribute name, such as &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; input properties, &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;trackBy&lt;/code&gt;, become &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;ngForTrackBy&lt;/code&gt;, respectively. That's how the directive learns that the list is &lt;code&gt;heroes&lt;/code&gt; and the track-by function is &lt;code&gt;trackById&lt;/code&gt;.</source>
          <target state="translated">マイクロ構文パーサーは、すべてのディレクティブをタイトルケースにし、それらの前に &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; などのディレクティブの属性名を付けます。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 入力プロパティの &lt;code&gt;of&lt;/code&gt; と &lt;code&gt;trackBy&lt;/code&gt; は、それぞれ &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;ngForTrackBy&lt;/code&gt; になります。このようにして、ディレクティブはリストが &lt;code&gt;heroes&lt;/code&gt; あり、track-by関数が &lt;code&gt;trackById&lt;/code&gt; であることを学習します。</target>
        </trans-unit>
        <trans-unit id="2f96b0734984c3136ba1534c85bf98f17087789f" translate="yes" xml:space="preserve">
          <source>The microtasks queue is drained at the very start of this function and after any timer callback has been executed.</source>
          <target state="translated">マイクロタスクキューは、この関数の開始時とタイマーコールバックが実行された後に排出されます。</target>
        </trans-unit>
        <trans-unit id="e526a37fcc75b530dfc85c73dede19ed15c064c6" translate="yes" xml:space="preserve">
          <source>The minification hazard is also compelling, if less obvious. Imagine a sorting pipe applied to a list of heroes. The list might be sorted by hero &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;planet&lt;/code&gt; of origin properties in the following way:</source>
          <target state="translated">明らかでないとしても、縮小の危険は説得力があります。ヒーローのリストに適用された並べ替えパイプを想像してみてください。このリストは、次の方法でヒーロー &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;planet&lt;/code&gt; のプロパティによってソートされます。</target>
        </trans-unit>
        <trans-unit id="bd932f1b587e9efc31a4eaca3808cc0ea987cfe9" translate="yes" xml:space="preserve">
          <source>The minimum requirement for developing Angular applications with Visual Studio is Update 3. Earlier versions do not follow the best practices for developing applications with TypeScript. To view your version of Visual Studio 2015, go to &lt;code&gt;Help | About Visual Studio&lt;/code&gt;.</source>
          <target state="translated">Visual Studioを使用してAngularアプリケーションを開発するための最小要件はUpdate 3です。以前のバージョンは、TypeScriptを使用してアプリケーションを開発するためのベストプラクティスに従っていません。Visual Studio 2015のバージョンを表示するには、 &lt;code&gt;Help | About Visual Studio&lt;/code&gt; にアクセスしてください。Visual Studioについて。</target>
        </trans-unit>
        <trans-unit id="68295edfe2e8f66e1f3a2395dc30f8973b6dac7d" translate="yes" xml:space="preserve">
          <source>The minimum threshold for error relative to the baseline.</source>
          <target state="translated">ベースラインに対する誤差の最小閾値。</target>
        </trans-unit>
        <trans-unit id="cd6ff93775e18fec4a2607b05a0e4e27b92ea554" translate="yes" xml:space="preserve">
          <source>The minimum threshold for warning relative to the baseline.</source>
          <target state="translated">ベースラインに対する警告の最小閾値。</target>
        </trans-unit>
        <trans-unit id="0b1963b4bbd40e94677e855aa6f7fa65aebec820" translate="yes" xml:space="preserve">
          <source>The missing &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">欠落している &lt;code&gt;FormsModule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d2da31ed6256743738e7430a7ee34e71e732e9c" translate="yes" xml:space="preserve">
          <source>The model matcher relies on AngularJS &lt;code&gt;ng-model&lt;/code&gt;</source>
          <target state="translated">モデルマッチャーはAngularJS &lt;code&gt;ng-model&lt;/code&gt; に依存しています</target>
        </trans-unit>
        <trans-unit id="b0bae318ee369692c49367c249df5e47fb9b292a" translate="yes" xml:space="preserve">
          <source>The model-to-view diagram shows how a programmatic change to the model is propagated to the view through the following steps.</source>
          <target state="translated">このダイアグラムでは、モデルへのプログラム的な変更が、以下の手順でどのようにビューに伝搬されるかを示しています。</target>
        </trans-unit>
        <trans-unit id="2b8ab532aba116bc7b0be679d9f1dd21f26ec26a" translate="yes" xml:space="preserve">
          <source>The model-to-view diagram shows how data flows from model to view when the &lt;code&gt;favoriteColor&lt;/code&gt; changes from &lt;em&gt;Blue&lt;/em&gt; to &lt;em&gt;Red&lt;/em&gt;, through the following steps</source>
          <target state="translated">モデルからビューへの図は、 &lt;code&gt;favoriteColor&lt;/code&gt; が&lt;em&gt;青&lt;/em&gt;から&lt;em&gt;赤に&lt;/em&gt;変化したときにモデルからビューにデータがどのように流れるかを次の手順で示しています</target>
        </trans-unit>
        <trans-unit id="1b612c6bfda69609e1109102317e5bc624c35366" translate="yes" xml:space="preserve">
          <source>The module ID of the module that contains the component. The component must be able to resolve relative URLs for templates and styles. SystemJS exposes the &lt;code&gt;__moduleName&lt;/code&gt; variable within each module. In CommonJS, this can be set to &lt;code&gt;module.id&lt;/code&gt;.</source>
          <target state="translated">コンポーネントを含むモジュールのモジュールID。コンポーネントは、テンプレートとスタイルの相対URLを解決できる必要があります。SystemJSは、各モジュール内の &lt;code&gt;__moduleName&lt;/code&gt; 変数を公開します。CommonJSでは、これは &lt;code&gt;module.id&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="24999c2480339abdb977d3c623a6abb6da2d0ad2" translate="yes" xml:space="preserve">
          <source>The module ID to use for importing a flat module (when &lt;code&gt;flatModuleOutFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;). References generated by the template compiler use this module name when importing symbols from the flat module. Ignored if &lt;code&gt;flatModuleOutFile&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">フラットモジュールのインポートに使用するモジュールID（ &lt;code&gt;flatModuleOutFile&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合）。テンプレートコンパイラによって生成された参照は、フラットモジュールからシンボルをインポートするときにこのモジュール名を使用します。 &lt;code&gt;flatModuleOutFile&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="7d1e56193d42e549f91f73ce49b0feaa87bbedad" translate="yes" xml:space="preserve">
          <source>The module ID to use for importing a flat module (when &lt;code&gt;flatModuleOutFile&lt;/code&gt; is true). References generated by the template compiler use this module name when importing symbols from the flat module. Ignored if &lt;code&gt;flatModuleOutFile&lt;/code&gt; is false.</source>
          <target state="translated">フラットモジュールのインポートに使用するモジュールID（ &lt;code&gt;flatModuleOutFile&lt;/code&gt; がtrueの場合）。テンプレートコンパイラによって生成された参照は、フラットモジュールからシンボルをインポートするときにこのモジュール名を使用します。 &lt;code&gt;flatModuleOutFile&lt;/code&gt; がfalseの場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="5455a8d2855bb168b7bc39366f2e640359d610c2" translate="yes" xml:space="preserve">
          <source>The module definition passed to &lt;code&gt;configureTestingModule&lt;/code&gt; is a subset of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">&lt;code&gt;configureTestingModule&lt;/code&gt; に渡されるモジュール定義は、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータプロパティのサブセットです。</target>
        </trans-unit>
        <trans-unit id="f9ff3126a97dd2fd2099d3e56f0696f54b70dd23" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;declarations&lt;/code&gt; array tells Angular which components belong to that module. As you create more components, add them to &lt;code&gt;declarations&lt;/code&gt;.</source>
          <target state="translated">モジュールの &lt;code&gt;declarations&lt;/code&gt; 配列は、そのコンポーネントがどのモジュールに属しているかをAngularに伝えます。さらにコンポーネントを作成したら、それらを &lt;code&gt;declarations&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="77ab0288332bb3f75ca93faaa0848559f0efc9c4" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;imports&lt;/code&gt; array appears exclusively in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata object. It tells Angular about other NgModules that this particular module needs to function properly.</source>
          <target state="translated">モジュールの &lt;code&gt;imports&lt;/code&gt; 配列は、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータオブジェクトにのみ表示されます。この特定のモジュールが適切に機能する必要があることを他のNgModuleについてAngularに伝えます。</target>
        </trans-unit>
        <trans-unit id="37bab47b6d2fddd6ff6f0de2be55dffe5f0d68d5" translate="yes" xml:space="preserve">
          <source>The modules sets up the router to be used for testing. It provides spy implementations of &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt;, and &lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt;&lt;code&gt;NgModuleFactoryLoader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モジュールは、テストに使用されるルーターをセットアップします。 &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 、および&lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt; &lt;code&gt;NgModuleFactoryLoader&lt;/code&gt; の&lt;/a&gt;スパイ実装を提供します。</target>
        </trans-unit>
        <trans-unit id="b8f968dae1b11cc243c9d8715ef10f99f4c40e38" translate="yes" xml:space="preserve">
          <source>The most common property binding sets an element property to a component property value. An example is binding the &lt;code&gt;src&lt;/code&gt; property of an image element to a component's &lt;code&gt;itemImageUrl&lt;/code&gt; property:</source>
          <target state="translated">最も一般的なプロパティバインディングは、要素プロパティをコンポーネントプロパティ値に設定します。たとえば、画像要素の &lt;code&gt;src&lt;/code&gt; プロパティをコンポーネントの &lt;code&gt;itemImageUrl&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="0e2d09ba31c42d96a1468928f0746f68810289cf" translate="yes" xml:space="preserve">
          <source>The most common use of schematics, however, is to integrate an Angular library with the Angular CLI. You can do this by creating the schematic files directly within the library project in an Angular workspace, without using the Schematics CLI. See &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">ただし、回路図の最も一般的な用途は、AngularライブラリをAngular CLIと統合することです。これを行うには、Schematics CLIを使用せずに、Angularワークスペースのライブラリプロジェクト内で回路図ファイルを直接作成します。&lt;a href=&quot;schematics-for-libraries&quot;&gt;ライブラリの回路図を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f03ef21da8a8d1525f2de629dfd2cc725b3a1d3c" translate="yes" xml:space="preserve">
          <source>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via &lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt; and if needed, these tasks can reenter the Angular zone via &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;.</source>
          <target state="translated">このサービスの最も一般的な用途は、AngularによるUIの更新やエラー処理を必要としない、1つ以上の非同期タスクで構成される作業を開始するときのパフォーマンスを最適化することです。そのようなタスクは&lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt;を介して開始でき、必要に応じて、これらのタスクは&lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;を介してAngularゾーンに再び入ることができます。</target>
        </trans-unit>
        <trans-unit id="0354cd5c6e461fee6e64880bb33502f1d53e4525" translate="yes" xml:space="preserve">
          <source>The most common validation is making a field required. The following example shows how to add a required validation to the &lt;code&gt;firstName&lt;/code&gt; control and display the result of validation.</source>
          <target state="translated">最も一般的な検証は、フィールドを必須にすることです。次の例は、 &lt;code&gt;firstName&lt;/code&gt; コントロールに必要な検証を追加し、検証の結果を表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d721ef30c8c2d93ee7d6cc51782e960cbb70e267" translate="yes" xml:space="preserve">
          <source>The most common validation is making a field required. This section describes how to add a required validation to the &lt;code&gt;firstName&lt;/code&gt; control.</source>
          <target state="translated">最も一般的な検証は、フィールドを必須にすることです。このセクションでは、 &lt;code&gt;firstName&lt;/code&gt; コントロールに必要な検証を追加する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="5bfdb12a001db3d37570c28c95a12f339133fefb" translate="yes" xml:space="preserve">
          <source>The most common way to get a hold of shared services is through Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection&lt;/a&gt;, rather than through the module system (importing a module will result in a new service instance, which is not a typical usage).</source>
          <target state="translated">共有サービスを取得する最も一般的な方法は、モジュールシステムではなく、Angular &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt;を使用することです（モジュールをインポートすると、新しいサービスインスタンスが生成されますが、これは一般的な使用方法ではありません）。</target>
        </trans-unit>
        <trans-unit id="a8d2e49dd96691f76f1b0107dae749dd4d4cfd1a" translate="yes" xml:space="preserve">
          <source>The most important &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator annotates the top-level &lt;strong&gt;AppModule&lt;/strong&gt; class.</source>
          <target state="translated">最も重要な &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータは、最上位の&lt;strong&gt;AppModule&lt;/strong&gt;クラスに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="696217913dab3bcc82d27ff3f8a194e99b19b4d3" translate="yes" xml:space="preserve">
          <source>The most recent stable released version of Angular appears in the &lt;a href=&quot;../index&quot;&gt;Angular documentation&lt;/a&gt; at the bottom of the left side navigation. For example, &lt;code&gt;stable (v5.2.9)&lt;/code&gt;.</source>
          <target state="translated">Angularの最新の安定リリースバージョンは、左側のナビゲーションの下部にある&lt;a href=&quot;../index&quot;&gt;Angularドキュメントに&lt;/a&gt;表示されます。たとえば、 &lt;code&gt;stable (v5.2.9)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7b203ac14927d287cb1b24febc038b8400723e19" translate="yes" xml:space="preserve">
          <source>The most straight forward way to get accurate typings is to cast the return value of the relevant DOM methods to the correct type. For that, you can use the &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; types (both exported from &lt;code&gt;@angular/elements&lt;/code&gt;):</source>
          <target state="translated">正確な型付けを行う最も簡単な方法は、関連するDOMメソッドの戻り値を正しい型にキャストすることです。そのためには、使用することができます &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; 種類を（両方からエクスポートされ &lt;code&gt;@angular/elements&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="6a00a106ce13b09ae830b89d6a9ec79692548add" translate="yes" xml:space="preserve">
          <source>The name control sets up two built-in validators&amp;mdash;&lt;code&gt;Validators.required&lt;/code&gt; and &lt;code&gt;Validators.minLength(4)&lt;/code&gt;&amp;mdash;and one custom validator, &lt;code&gt;forbiddenNameValidator&lt;/code&gt;. For more details see the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section in this guide.</source>
          <target state="translated">名前コントロールは、2つの組み込みバリデーター &lt;code&gt;Validators.required&lt;/code&gt; と &lt;code&gt;Validators.minLength(4)&lt;/code&gt; と、1つのカスタムバリデーター &lt;code&gt;forbiddenNameValidator&lt;/code&gt; をセットアップします。詳細については、このガイドの「&lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーター」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd303e4295a148f60c77b1b8f935a0d9785ceabf" translate="yes" xml:space="preserve">
          <source>The name for the control</source>
          <target state="translated">コントロールの名前</target>
        </trans-unit>
        <trans-unit id="3f5bffaecc38c665fdf4934a9248d6901b121e04" translate="yes" xml:space="preserve">
          <source>The name of binding variable</source>
          <target state="translated">バインディング変数の名前</target>
        </trans-unit>
        <trans-unit id="ee11a869e2d385aca970768492e28306d0c02610" translate="yes" xml:space="preserve">
          <source>The name of related Universal app.</source>
          <target state="translated">関連するユニバーサルアプリの名前です。</target>
        </trans-unit>
        <trans-unit id="f31111a73d24d0ea080510639dab3203d39876c6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; used to render the route. For an unnamed outlet, the outlet name is &lt;em&gt;primary&lt;/em&gt;.</source>
          <target state="translated">ルートのレンダリングに使用される &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; の名前。名前のないコンセントの場合、コンセント名は&lt;em&gt;primary&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="374b365f9ef09a5c20199d4b6c524488b9c9eac6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; used to render the route. For an unnamed outlet, the outlet name is primary.</source>
          <target state="translated">ルートのレンダリングに使用される &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; の名前。名前のないアウトレットの場合、アウトレット名がプライマリです。</target>
        </trans-unit>
        <trans-unit id="2830e043f06ce13b7965727721f4eeda24ae55dd" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the input property is bound.</source>
          <target state="translated">入力プロパティがバインドされている DOM プロパティの名前。</target>
        </trans-unit>
        <trans-unit id="9ea6252fe6bfcbe28e4a7dbd02f705de12a2b425" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the output property is bound.</source>
          <target state="translated">出力プロパティがバインドされている DOM プロパティの名前。</target>
        </trans-unit>
        <trans-unit id="a34788f4dbd8d335c3d16d2725eb10d84db5f8eb" translate="yes" xml:space="preserve">
          <source>The name of the Karma configuration file.</source>
          <target state="translated">Karmaの設定ファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="7bc259cccdbc4feb53380144d564c6c9acfe48ea" translate="yes" xml:space="preserve">
          <source>The name of the NgModule.</source>
          <target state="translated">NgModuleの名前です。</target>
        </trans-unit>
        <trans-unit id="31c15168aefcb147a81f6d56a4fb545633af3cbb" translate="yes" xml:space="preserve">
          <source>The name of the Protractor configuration file.</source>
          <target state="translated">分度器の設定ファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="a5161c8757038b183e435833dbc3d24f71cae7ec" translate="yes" xml:space="preserve">
          <source>The name of the TSLint configuration file.</source>
          <target state="translated">TSLint設定ファイルの名前。</target>
        </trans-unit>
        <trans-unit id="f4e2073f1c9d163ee7d923261881502e64ca10d8" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file for tests.</source>
          <target state="translated">テスト用のTypeScript設定ファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="ca18d6818e4f88c372ec7928897bf20767d10b87" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file.</source>
          <target state="translated">TypeScriptの設定ファイル名。</target>
        </trans-unit>
        <trans-unit id="23b607725624b97d6681994d12395b88f5004fa9" translate="yes" xml:space="preserve">
          <source>The name of the application directory.</source>
          <target state="translated">アプリケーションディレクトリの名前です。</target>
        </trans-unit>
        <trans-unit id="9bf434ae63b3e0efedb894f4541221d8148e3143" translate="yes" xml:space="preserve">
          <source>The name of the application folder.</source>
          <target state="translated">アプリケーションフォルダの名前です。</target>
        </trans-unit>
        <trans-unit id="98dd415e8f45a9d589f3ab22fe8844e6831aaeb3" translate="yes" xml:space="preserve">
          <source>The name of the attribute that has changed.</source>
          <target state="translated">変更された属性の名前です。</target>
        </trans-unit>
        <trans-unit id="51e356de047f692621f1ac826eda16393c2f1d57" translate="yes" xml:space="preserve">
          <source>The name of the attribute whose value can be injected.</source>
          <target state="translated">値を注入できる属性名。</target>
        </trans-unit>
        <trans-unit id="0049c017534779feed3c5a4e10e97646ee097a91" translate="yes" xml:space="preserve">
          <source>The name of the bundle (for &lt;code&gt;type=bundle&lt;/code&gt;).</source>
          <target state="translated">バンドルの名前（ &lt;code&gt;type=bundle&lt;/code&gt; の場合）。</target>
        </trans-unit>
        <trans-unit id="b095d5334d88f321e32a2bec17d4998f29183ab5" translate="yes" xml:space="preserve">
          <source>The name of the component.</source>
          <target state="translated">コンポーネントの名前です。</target>
        </trans-unit>
        <trans-unit id="298fb556486176a59b92ee293ee40dc19082796f" translate="yes" xml:space="preserve">
          <source>The name of the enum.</source>
          <target state="translated">列挙型の名前です。</target>
        </trans-unit>
        <trans-unit id="4ac12cbaf7ddc32136d2246eea1e25012d5463a2" translate="yes" xml:space="preserve">
          <source>The name of the event to listen for.</source>
          <target state="translated">リスニングするイベントの名前。</target>
        </trans-unit>
        <trans-unit id="3effaffa0019768d26589b5c5f6cbf735fb6f172" translate="yes" xml:space="preserve">
          <source>The name of the index file</source>
          <target state="translated">インデックスファイルの名前</target>
        </trans-unit>
        <trans-unit id="dd8fbb4b7c6c6ffa46e3d5696e9bed15930b9636" translate="yes" xml:space="preserve">
          <source>The name of the interceptor.</source>
          <target state="translated">迎撃者の名前です。</target>
        </trans-unit>
        <trans-unit id="d4bad0ca50233e344d10d5f4399e54a6b4d776fb" translate="yes" xml:space="preserve">
          <source>The name of the interface.</source>
          <target state="translated">インターフェースの名前です。</target>
        </trans-unit>
        <trans-unit id="e0dae223e862076c307be059fb3da2195512e15e" translate="yes" xml:space="preserve">
          <source>The name of the library.</source>
          <target state="translated">図書館の名前です。</target>
        </trans-unit>
        <trans-unit id="0e4e86dc522df63f846535a545048ecb92d2ef5a" translate="yes" xml:space="preserve">
          <source>The name of the main entry-point file.</source>
          <target state="translated">メインのエントリーポイントファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="1ae438b15dd77fd8ad30e891d288ec894f9c8b5a" translate="yes" xml:space="preserve">
          <source>The name of the new app.</source>
          <target state="translated">新しいアプリの名前です。</target>
        </trans-unit>
        <trans-unit id="c05ae963758a0b1ea71e624aa37d935aad1862cc" translate="yes" xml:space="preserve">
          <source>The name of the new class.</source>
          <target state="translated">新しいクラスの名前。</target>
        </trans-unit>
        <trans-unit id="1cc12f20eb95c9010460b29584ae08cc288e4233" translate="yes" xml:space="preserve">
          <source>The name of the new directive.</source>
          <target state="translated">新しいディレクティブの名前。</target>
        </trans-unit>
        <trans-unit id="96eddd4bb283e97a16b4571fb2343a6f659a5dbf" translate="yes" xml:space="preserve">
          <source>The name of the new resolver.</source>
          <target state="translated">新しいリゾルバの名前。</target>
        </trans-unit>
        <trans-unit id="e94c910c3587ab8593febb3f805bcd0616accd65" translate="yes" xml:space="preserve">
          <source>The name of the new route guard.</source>
          <target state="translated">新ルートガードの名前。</target>
        </trans-unit>
        <trans-unit id="05fef20c845e23cfb269d81a5518f8c2dc19a116" translate="yes" xml:space="preserve">
          <source>The name of the new workspace and initial project.</source>
          <target state="translated">新しいワークスペースと初期プロジェクトの名前です。</target>
        </trans-unit>
        <trans-unit id="4f3f5dc853fd89760b7214e5ccac1a838a94a12a" translate="yes" xml:space="preserve">
          <source>The name of the pipe.</source>
          <target state="translated">パイプの名前です。</target>
        </trans-unit>
        <trans-unit id="84108afbf0ae3d52386033a2d683d8a1ae512bb7" translate="yes" xml:space="preserve">
          <source>The name of the polyfills file.</source>
          <target state="translated">ポリフィルファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="60a0ead0a1aaa4e2f2b4233c956828d7b450a96e" translate="yes" xml:space="preserve">
          <source>The name of the project in which to create the enum. Default is the configured default project for the workspace.</source>
          <target state="translated">列挙型を作成するプロジェクトの名前。既定値は、ワークスペースで構成された既定のプロジェクトです。</target>
        </trans-unit>
        <trans-unit id="acc889a5813553b91add89b3f03c313d7a4b86e6" translate="yes" xml:space="preserve">
          <source>The name of the project to build. Can be an application or a library.</source>
          <target state="translated">ビルドするプロジェクトの名前です。アプリケーションまたはライブラリにすることができます。</target>
        </trans-unit>
        <trans-unit id="5db5ca31c4c34286b71367170d486bbec874adc3" translate="yes" xml:space="preserve">
          <source>The name of the project to deploy.</source>
          <target state="translated">デプロイするプロジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="877a3cd4d86d1c683955bcdb8afd34543824fbc6" translate="yes" xml:space="preserve">
          <source>The name of the project to lint.</source>
          <target state="translated">lintへのプロジェクト名。</target>
        </trans-unit>
        <trans-unit id="0c0ea6bda23de88805444a87357d6fc67352074e" translate="yes" xml:space="preserve">
          <source>The name of the project.</source>
          <target state="translated">プロジェクトの名前です。</target>
        </trans-unit>
        <trans-unit id="5cca2fedb252b808c68e0001d796a768f14fe5b8" translate="yes" xml:space="preserve">
          <source>The name of the related client app.</source>
          <target state="translated">関連するクライアントアプリの名前です。</target>
        </trans-unit>
        <trans-unit id="0e1d1073f831d9e075296e86ca7a2b766cf84ddc" translate="yes" xml:space="preserve">
          <source>The name of the related client app. Required in place of &quot;project&quot;.</source>
          <target state="translated">関連するクライアントアプリの名前です。project」の代わりに必要です。</target>
        </trans-unit>
        <trans-unit id="2b4489e5f4e2653828a596bc22eebe8452c680c4" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule class.</source>
          <target state="translated">ルートNgModuleクラスの名前。</target>
        </trans-unit>
        <trans-unit id="39f772f8508b793cd949b7d95f84bb953733b091" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule file.</source>
          <target state="translated">ルートNgModuleファイルの名前。</target>
        </trans-unit>
        <trans-unit id="b9c1e32c2285950cd5c0ea125336cadcabee7ee5" translate="yes" xml:space="preserve">
          <source>The name of the root module class.</source>
          <target state="translated">ルートモジュールクラスの名前。</target>
        </trans-unit>
        <trans-unit id="e79f3a656af3a23c870229cdcf812e615d254ba2" translate="yes" xml:space="preserve">
          <source>The name of the root module file</source>
          <target state="translated">ルートモジュールファイルの名前</target>
        </trans-unit>
        <trans-unit id="b9fb5011772f2fe11e2099c647d76e3ab58ce091" translate="yes" xml:space="preserve">
          <source>The name of the routing NgModule should parallel the name of its companion NgModule, using the suffix &lt;code&gt;Routing&lt;/code&gt;. For example, &lt;code&gt;ContactModule&lt;/code&gt; in &lt;code&gt;contact.module.ts&lt;/code&gt; has a routing NgModule named &lt;code&gt;ContactRoutingModule&lt;/code&gt; in &lt;code&gt;contact-routing.module.ts&lt;/code&gt;.</source>
          <target state="translated">ルーティングNgModuleの名前は、接尾辞 &lt;code&gt;Routing&lt;/code&gt; を使用して、そのコンパニオンNgModuleの名前と平行する必要があります。例えば、 &lt;code&gt;ContactModule&lt;/code&gt; で &lt;code&gt;contact.module.ts&lt;/code&gt; はルーティングNgModule名前有する &lt;code&gt;ContactRoutingModule&lt;/code&gt; に &lt;code&gt;contact-routing.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1af03b5050c51d9047b1136086eb139e2bfa56a" translate="yes" xml:space="preserve">
          <source>The name of the routing module should parallel the name of its companion module, using the suffix &quot;Routing&quot;. For example, &lt;code&gt;FooModule&lt;/code&gt; in &lt;code&gt;foo.module.ts&lt;/code&gt; has a routing module named &lt;code&gt;FooRoutingModule&lt;/code&gt; in &lt;code&gt;foo-routing.module.ts&lt;/code&gt;. If the companion module is the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;AppRoutingModule&lt;/code&gt; adds router configuration to its imports with &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;. All other routing modules are children that import &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt;.</source>
          <target state="translated">ルーティングモジュールの名前は、サフィックス「ルーティング」を使用して、対応するモジュールの名前と対応させる必要があります。例えば、 &lt;code&gt;FooModule&lt;/code&gt; で &lt;code&gt;foo.module.ts&lt;/code&gt; は名前ルーティングモジュール有する &lt;code&gt;FooRoutingModule&lt;/code&gt; で &lt;code&gt;foo-routing.module.ts&lt;/code&gt; 。コンパニオンモジュールがルート &lt;code&gt;AppModule&lt;/code&gt; の場合、 &lt;code&gt;AppRoutingModule&lt;/code&gt; は &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; を使用して、インポートにルーター構成を追加します。他のすべてのルーティングモジュールは、 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; をインポートする子です。</target>
        </trans-unit>
        <trans-unit id="5cb7b85a598a028b7c4208d8cba347b086c65cad" translate="yes" xml:space="preserve">
          <source>The name of the service.</source>
          <target state="translated">サービス名です。</target>
        </trans-unit>
        <trans-unit id="eb80b5650274c357613ae29fbc7ee992a7295266" translate="yes" xml:space="preserve">
          <source>The name of the state from which the animation is triggered.</source>
          <target state="translated">アニメーションが起動された状態の名前。</target>
        </trans-unit>
        <trans-unit id="642538b3255d34b3733d341540a32bdf0783bc44" translate="yes" xml:space="preserve">
          <source>The name of the state in which the animation completes.</source>
          <target state="translated">アニメーションが完了する状態の名前。</target>
        </trans-unit>
        <trans-unit id="9e83f52375e1bbe1dd110ed6d2d07fc578d60fbe" translate="yes" xml:space="preserve">
          <source>The name of the style.</source>
          <target state="translated">スタイルの名前です。</target>
        </trans-unit>
        <trans-unit id="d5dd95f899057794c059b568058ef2fda9777be8" translate="yes" xml:space="preserve">
          <source>The name of the test entry-point file.</source>
          <target state="translated">テストエントリーポイントファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="f00cd6c1142679bd0fe1c3ebd4ca78600af96a2c" translate="yes" xml:space="preserve">
          <source>The name of the worker.</source>
          <target state="translated">作業員の名前です。</target>
        </trans-unit>
        <trans-unit id="6c69a9d664620bbeca7664bd75d1ad6ed2baaaed" translate="yes" xml:space="preserve">
          <source>The names of package(s) to update.</source>
          <target state="translated">更新するパッケージの名前。</target>
        </trans-unit>
        <trans-unit id="1abdc0f45b3ba1f3f4aab750a1abd18ac0401e50" translate="yes" xml:space="preserve">
          <source>The namespace for the new element.</source>
          <target state="translated">新しい要素の名前空間。</target>
        </trans-unit>
        <trans-unit id="9443280c899669a2c6c547ccf058f0563c8d9971" translate="yes" xml:space="preserve">
          <source>The namespace in which the attribute is defined.</source>
          <target state="translated">属性が定義されている名前空間。</target>
        </trans-unit>
        <trans-unit id="5706a1bb56e527d4bef0f37bae074bd6120e33cc" translate="yes" xml:space="preserve">
          <source>The namespace.</source>
          <target state="translated">名前空間。</target>
        </trans-unit>
        <trans-unit id="5de4b279d3860800c1274a15257bfb7aa3d5e166" translate="yes" xml:space="preserve">
          <source>The native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element doesn't have a &lt;code&gt;form&lt;/code&gt; property, but the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive does, which allows disabling the submit button if the &lt;code&gt;itemForm.form.valid&lt;/code&gt; is invalid and passing the entire form control tree to the parent component's &lt;code&gt;onSubmit()&lt;/code&gt; method.</source>
          <target state="translated">ネイティブ &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素には &lt;code&gt;form&lt;/code&gt; プロパティはありませんが、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブにはあります。これにより、 &lt;code&gt;itemForm.form.valid&lt;/code&gt; が無効な場合に送信ボタンを無効にし、フォームコントロールツリー全体を親コンポーネントの &lt;code&gt;onSubmit()&lt;/code&gt; メソッドに渡すことができます。 。</target>
        </trans-unit>
        <trans-unit id="f53c7525b5762013b1501a0e4c46863466a89451" translate="yes" xml:space="preserve">
          <source>The native DOM element at the root of the component.</source>
          <target state="translated">コンポーネントのルートにあるネイティブの DOM 要素。</target>
        </trans-unit>
        <trans-unit id="29761c2a932d59dd3f7b79be5a29968749831e65" translate="yes" xml:space="preserve">
          <source>The native element at the root of the component.</source>
          <target state="translated">コンポーネントのルートにあるネイティブ要素。</target>
        </trans-unit>
        <trans-unit id="dff590b09b3db22a6980b41fca483eda9e9a641b" translate="yes" xml:space="preserve">
          <source>The navigation links at the top, left, and bottom of the screen are generated from the JSON configuration file, &lt;code&gt;content/navigation.json&lt;/code&gt;.</source>
          <target state="translated">画面の上部、左側、下部のナビゲーションリンクは、JSON構成ファイル &lt;code&gt;content/navigation.json&lt;/code&gt; から生成されます。</target>
        </trans-unit>
        <trans-unit id="3403c9d3de501a04ade350bc06e6b24f8560df85" translate="yes" xml:space="preserve">
          <source>The navigation state that was previously supplied to the &lt;code&gt;pushState&lt;/code&gt; call, when the navigation is triggered by a &lt;code&gt;popstate&lt;/code&gt; event. Otherwise null.</source>
          <target state="translated">ナビゲーションが &lt;code&gt;popstate&lt;/code&gt; イベントによってトリガーされたときに、以前に &lt;code&gt;pushState&lt;/code&gt; 呼び出しに提供されたナビゲーション状態。それ以外の場合はnull。</target>
        </trans-unit>
        <trans-unit id="4c5c2daf86d485506deecd53ed0077e779f790db" translate="yes" xml:space="preserve">
          <source>The need for this polyfill was removed in Angular version 8.0 (&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;see #14473&lt;/a&gt;), rendering the presence of the poylfill in most Angular applications unnecessary. Because the polyfill can be depended on by 3rd-party libraries, instead of removing it from all Angular projects, we are deprecating the requirement for this polyfill as of version 8.0. This should give library authors and application developers sufficient time to evaluate if they need the polyfill, and perform any refactoring necessary to remove the dependency on it.</source>
          <target state="translated">このポリフィルの必要性は、Angularバージョン8.0（&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;＃14473を参照&lt;/a&gt;）で削除され、ほとんどのAngularアプリケーションでのポリフィルの存在が不要になりました。ポリフィルはすべてのAngularプロジェクトから削除するのではなく、サードパーティライブラリに依存している可能性があるため、バージョン8.0以降、このポリフィルの要件は廃止されます。これにより、ライブラリの作成者とアプリケーション開発者は、ポリフィルが必要かどうかを評価し、依存関係を削除するために必要なリファクタリングを実行するための十分な時間を確保できます。</target>
        </trans-unit>
        <trans-unit id="9926b8eddb28f5b61fe9e5c8e2449b04b9fca67b" translate="yes" xml:space="preserve">
          <source>The net result is an AngularJS directive called &lt;code&gt;heroDetail&lt;/code&gt;, that you can use like any other directive in AngularJS templates.</source>
          <target state="translated">最終的な結果は &lt;code&gt;heroDetail&lt;/code&gt; と呼ばれるAngularJSディレクティブであり、AngularJSテンプレートの他のディレクティブと同じように使用できます。</target>
        </trans-unit>
        <trans-unit id="363efe528cca3a39d4ac1f20d51e40123493e611" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;Phone&lt;/code&gt; service has the same features as the original, &lt;code&gt;ngResource&lt;/code&gt;-based service. Because it's an Angular service, you register it with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">新しい &lt;code&gt;Phone&lt;/code&gt; サービスには、元の &lt;code&gt;ngResource&lt;/code&gt; ベースのサービスと同じ機能があります。これはAngularサービスなので、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; プロバイダーに登録します。</target>
        </trans-unit>
        <trans-unit id="df21a5f33d940b8fd543f9a1645f478b67bd8405" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;PhoneListComponent&lt;/code&gt; uses the Angular &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, located in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;. Add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports, declare the new &lt;code&gt;PhoneListComponent&lt;/code&gt; and finally add it to &lt;code&gt;entryComponents&lt;/code&gt; since you downgraded it:</source>
          <target state="translated">新しい &lt;code&gt;PhoneListComponent&lt;/code&gt; はアンギュラ使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; の中にある、ディレクティブを &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; インポートに追加し、新しい &lt;code&gt;PhoneListComponent&lt;/code&gt; を宣言して、ダウングレードしたので最後にそれを &lt;code&gt;entryComponents&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="b4153d9c7e00866dc99a220129088a88c0dd7d73" translate="yes" xml:space="preserve">
          <source>The new API is a smaller, easier, and more powerful way to make HTTP requests in Angular. The new API simplifies the default ergonomics: There is no need to map by invoking the &lt;code&gt;.json()&lt;/code&gt; method. It also supports typed return values and interceptors.</source>
          <target state="translated">新しいAPIは、AngularでHTTPリクエストを行うための、より小さく、より簡単で、より強力な方法です。新しいAPIは、デフォルトのエルゴノミクスを簡素化します &lt;code&gt;.json()&lt;/code&gt; メソッドを呼び出すことによってマップする必要はありません。また、型付きの戻り値とインターセプターもサポートします。</target>
        </trans-unit>
        <trans-unit id="4ba87e5244a7f2ae127d3527851072feaa64a3a5" translate="yes" xml:space="preserve">
          <source>The new app's configuration appears in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, under its project name.</source>
          <target state="translated">新しいアプリの構成は、 &lt;code&gt;angular.json&lt;/code&gt; ワークスペース構成ファイルの &lt;code&gt;projects&lt;/code&gt; セクションに、プロジェクト名の下に表示されます。</target>
        </trans-unit>
        <trans-unit id="97e1064b6ccb7a71d78b43cbdff3f66b187e3101" translate="yes" xml:space="preserve">
          <source>The new application is running in Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新しいアプリケーションはAngularゾーンで実行されているため、 &lt;code&gt;$apply()&lt;/code&gt; 呼び出す必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="1207f1b47a2ceddd5399dbc4b8537238ef541e74" translate="yes" xml:space="preserve">
          <source>The new application is running in an Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新しいアプリケーションはAngularゾーンで実行されているため、 &lt;code&gt;$apply()&lt;/code&gt; 呼び出す必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="4423c5e4eb8a9a3a8985a9f33bbfac8fd49ec627" translate="yes" xml:space="preserve">
          <source>The new application's configuration appears in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, under its project name.</source>
          <target state="translated">新しいアプリケーションの構成は、 &lt;code&gt;angular.json&lt;/code&gt; ワークスペース構成ファイルの &lt;code&gt;projects&lt;/code&gt; セクションにプロジェクト名で表示されます。</target>
        </trans-unit>
        <trans-unit id="b35b343343c03348a9572e3228bb3c952b9ac234" translate="yes" xml:space="preserve">
          <source>The new child node.</source>
          <target state="translated">新しい子ノード。</target>
        </trans-unit>
        <trans-unit id="9840b56c4f6874ecf576985d09a05dbfa2eb89c5" translate="yes" xml:space="preserve">
          <source>The new child nodes.</source>
          <target state="translated">新しい子ノードです。</target>
        </trans-unit>
        <trans-unit id="4b58eb8174eac708d6b4490ec1c0c1d10ce4c92f" translate="yes" xml:space="preserve">
          <source>The new product alert component takes a product as input from the product list. With that input, it shows or hides the &quot;Notify Me&quot; button, based on the price of the product. The Phone XL price is over $700, so the &quot;Notify Me&quot; button appears on that product.</source>
          <target state="translated">新商品アラートコンポーネントは、商品リストからの入力として商品を受け取ります。その入力をもとに、製品の価格に応じて &quot;Notify Me&quot; ボタンを表示または非表示にします。Phone XLの価格は700ドル以上なので、その製品には「Notify Me」ボタンが表示されます。</target>
        </trans-unit>
        <trans-unit id="e6f1054918bbc968acfe9e3749cce36a53bf28d3" translate="yes" xml:space="preserve">
          <source>The new project is automatically configured for Ivy. Specifically, the enableIvy option is set to &lt;code&gt;true&lt;/code&gt; in the project's &lt;code&gt;tsconfig.app.json&lt;/code&gt; file.</source>
          <target state="translated">新しいプロジェクトがIvy用に自動的に構成されます。具体的には、プロジェクトの &lt;code&gt;tsconfig.app.json&lt;/code&gt; ファイルでenableIvyオプションが &lt;code&gt;true&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="5856f08aacd129df52897b888ec3e203f8a35f92" translate="yes" xml:space="preserve">
          <source>The new route uses a path, &lt;code&gt;**&lt;/code&gt;. This path is how Angular identifies a wildcard route. Any route that does not match an existing route in your configuration will use this route.</source>
          <target state="translated">新しいルートはパス &lt;code&gt;**&lt;/code&gt; を使用します。このパスは、Angularがワイルドカードルートを識別する方法です。構成内の既存のルートと一致しないルートは、このルートを使用します。</target>
        </trans-unit>
        <trans-unit id="d6aa8f89505f75cf8c09ee6eb7157b95f50f181b" translate="yes" xml:space="preserve">
          <source>The new shipping component isn't hooked into any other component yet, but you can see it in the preview pane by entering the URL specified by its route. The URL has the pattern: &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; where the &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; part may be different for your StackBlitz project.</source>
          <target state="translated">新しい配送コンポーネントはまだ他のコンポーネントにフックされていませんが、ルートで指定されたURLを入力すると、プレビューペインに表示されます。：URLはパターンがある &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 一部があなたのStackBlitzプロジェクトのために異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="3743d1eecb933641cda77a717298bd354faf0984" translate="yes" xml:space="preserve">
          <source>The new value</source>
          <target state="translated">新しい値</target>
        </trans-unit>
        <trans-unit id="021d55f858f59001a051bc43ae234648f75e1184" translate="yes" xml:space="preserve">
          <source>The new value emitted by &lt;code&gt;ngModelChange&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelChange&lt;/code&gt; によって発行された新しい値。</target>
        </trans-unit>
        <trans-unit id="c8570bda1df02aa4830c29774e26bf3a60827bab" translate="yes" xml:space="preserve">
          <source>The new value for the control that matches the structure of the group.</source>
          <target state="translated">グループの構造と一致するコントロールの新しい値。</target>
        </trans-unit>
        <trans-unit id="ad6dd37b94567d0ed30940d4cbe011a866a03911" translate="yes" xml:space="preserve">
          <source>The new value for the control.</source>
          <target state="translated">コントロールの新しい値。</target>
        </trans-unit>
        <trans-unit id="2118e7142b9bc910be772dcc7fd3cdf8497c8881" translate="yes" xml:space="preserve">
          <source>The new value for the directive's control.</source>
          <target state="translated">ディレクティブの制御のための新しい値。</target>
        </trans-unit>
        <trans-unit id="bdb50e4b11bfbe575629c662f2a9a5650543a293" translate="yes" xml:space="preserve">
          <source>The new value for the element</source>
          <target state="translated">要素の新しい値</target>
        </trans-unit>
        <trans-unit id="7b746bb6b747d0bb853f7c9fc94c0337260bae7e" translate="yes" xml:space="preserve">
          <source>The new value for the form.</source>
          <target state="translated">フォームの新しい値。</target>
        </trans-unit>
        <trans-unit id="61b8b2c4fe44f460d9964c15d7ca4f73c9a6c794" translate="yes" xml:space="preserve">
          <source>The new value for the view</source>
          <target state="translated">ビューの新しい値</target>
        </trans-unit>
        <trans-unit id="021a9d13fa37792c9492e99195cbcb8204d81b7b" translate="yes" xml:space="preserve">
          <source>The new value for the view model.</source>
          <target state="translated">ビューモデルの新しい値です。</target>
        </trans-unit>
        <trans-unit id="b9b227961e3d04545a92b5ce44cb233f0e0e2e32" translate="yes" xml:space="preserve">
          <source>The new value of the attribute.</source>
          <target state="translated">属性の新しい値。</target>
        </trans-unit>
        <trans-unit id="979eb5744be34e7601501a529cdae1a63ed19682" translate="yes" xml:space="preserve">
          <source>The new value or array of values.</source>
          <target state="translated">新しい値または値の配列。</target>
        </trans-unit>
        <trans-unit id="7b08063f6e4b837b85157e98f41e7848cc96e9ca" translate="yes" xml:space="preserve">
          <source>The new value to add.</source>
          <target state="translated">新たに追加する価値。</target>
        </trans-unit>
        <trans-unit id="5846611ef08161b895e9cfae56a1ecdbe7079b9d" translate="yes" xml:space="preserve">
          <source>The new value.</source>
          <target state="translated">新しい値です。</target>
        </trans-unit>
        <trans-unit id="f0ee706f3bb39b349be9aafea079617b78668c88" translate="yes" xml:space="preserve">
          <source>The new version waits for the &lt;code&gt;Observable&lt;/code&gt; to emit the array of heroes&amp;mdash;which could happen now or several minutes from now. The &lt;code&gt;subscribe()&lt;/code&gt; method passes the emitted array to the callback, which sets the component's &lt;code&gt;heroes&lt;/code&gt; property.</source>
          <target state="translated">新しいバージョンは、 &lt;code&gt;Observable&lt;/code&gt; が一連の​​英雄を放出するのを待ちます。これは、現在または数分後に発生する可能性があります。 &lt;code&gt;subscribe()&lt;/code&gt; メソッドは、コンポーネントのセットコールバックに放出されたアレイを通過 &lt;code&gt;heroes&lt;/code&gt; プロパティを。</target>
        </trans-unit>
        <trans-unit id="c61fd74c6478e58dddf9101895e08ed5f52a84e1" translate="yes" xml:space="preserve">
          <source>The new workspace folder is given the specified project name, and contains configuration files at the top level.</source>
          <target state="translated">新しいワークスペースフォルダには、指定されたプロジェクト名が与えられ、トップレベルの設定ファイルが含まれます。</target>
        </trans-unit>
        <trans-unit id="ba1a5a973d20feba0e6b33242fbe750ff2e79612" translate="yes" xml:space="preserve">
          <source>The next example captures the &lt;code&gt;index&lt;/code&gt; in a variable named &lt;code&gt;i&lt;/code&gt; and displays it with the item name.</source>
          <target state="translated">次の例では、 &lt;code&gt;i&lt;/code&gt; という名前の変数に &lt;code&gt;index&lt;/code&gt; を取り込み、アイテム名とともに表示します。</target>
        </trans-unit>
        <trans-unit id="84bf25f63e5b5153b6a3a8c5328d60b284fe5dc3" translate="yes" xml:space="preserve">
          <source>The next example displays multiple code tabs, each with its own header. It demonstrates control over display of line numbers at both the &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; levels.</source>
          <target state="translated">次の例では、それぞれ独自のヘッダーを持つ複数のコードタブを表示します。 &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; レベルと&amp;lt;code-pane&amp;gt;レベルの両方で行番号の表示を制御する方法を示します。</target>
        </trans-unit>
        <trans-unit id="7d0379ee3e31cc2f63af55d84bcfdb086a5ca311" translate="yes" xml:space="preserve">
          <source>The next example performs the following steps to verify the model-to-view data flow.</source>
          <target state="translated">次の例では、以下のステップを実行して、モデルからビューへのデータフローを検証します。</target>
        </trans-unit>
        <trans-unit id="7c3416618b3de0af96c0f13e3867441de913c924" translate="yes" xml:space="preserve">
          <source>The next example targets the host element again, but only when it also has the &lt;code&gt;active&lt;/code&gt; CSS class.</source>
          <target state="translated">次の例では、ホスト要素を再度ターゲットにしますが、 &lt;code&gt;active&lt;/code&gt; CSSクラスも含まれている場合のみです。</target>
        </trans-unit>
        <trans-unit id="4a21e1e01c2158020152df86d39427a773fea8dd" translate="yes" xml:space="preserve">
          <source>The next examples focus on hook details.</source>
          <target state="translated">次の例では、フックの詳細に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="e227a13b6f5a7d5bee882fe1ac94c2d4c537d093" translate="yes" xml:space="preserve">
          <source>The next few sections review some of the coding choices in the app.</source>
          <target state="translated">次のいくつかのセクションでは、アプリ内のコーディングの選択肢のいくつかをレビューします。</target>
        </trans-unit>
        <trans-unit id="d607f1c8543b34b78c9b0ce11c65aed7ab530f0e" translate="yes" xml:space="preserve">
          <source>The next interceptor in the chain, or the backend if no interceptors remain in the chain.</source>
          <target state="translated">チェーン内の次のインターセプター、またはチェーン内にインターセプターが残っていない場合はバックエンド。</target>
        </trans-unit>
        <trans-unit id="3e4bb896f2f48b5d9aa0754ab76dc8fdd2fa0d3b" translate="yes" xml:space="preserve">
          <source>The next parent injector in the hierarchy is the &lt;code&gt;NullInjector()&lt;/code&gt;, which is the top of the tree. If you've gone so far up the tree that you are looking for a service in the &lt;code&gt;NullInjector()&lt;/code&gt;, you'll get an error unless you've used &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; because ultimately, everything ends at the &lt;code&gt;NullInjector()&lt;/code&gt; and it returns an error or, in the case of &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;. For more information on &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, see the &lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt;&lt;code&gt;@Optional()&lt;/code&gt; section&lt;/a&gt; of this guide.</source>
          <target state="translated">階層の次の親インジェクターは、ツリーの最上部である &lt;code&gt;NullInjector()&lt;/code&gt; です。あなたがサービスを探していることを、ツリーまで、これまで行ってきた場合 &lt;code&gt;NullInjector()&lt;/code&gt; あなたが使用していない限り、あなたはエラーになります &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; で、最終的に、すべてが終わっているため &lt;code&gt;NullInjector()&lt;/code&gt; とそれ以下の場合には、エラーを返すか、 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;null&lt;/code&gt; を。詳細については &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 、参照&lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt; &lt;code&gt;@Optional()&lt;/code&gt; セクション&lt;/a&gt;は、このガイドのを。</target>
        </trans-unit>
        <trans-unit id="2215641d1cc412c6d30b3543117da1326b1d8612" translate="yes" xml:space="preserve">
          <source>The next part of the file is where you configure your routes. &lt;em&gt;Routes&lt;/em&gt; tell the Router which view to display when a user clicks a link or pastes a URL into the browser address bar.</source>
          <target state="translated">ファイルの次の部分は、ルートを構成する場所です。&lt;em&gt;ルート&lt;/em&gt;は、ユーザーがリンクをクリックするか、URLをブラウザーのアドレスバーに貼り付けたときに表示するビューをルーターに通知します。</target>
        </trans-unit>
        <trans-unit id="ffbc544c39aedf6dbed7b7a9601dc1ca2eadd500" translate="yes" xml:space="preserve">
          <source>The next section expands the app's capabilities by adding a new component&amp;mdash;a product alert&amp;mdash;as a child of the product list component.</source>
          <target state="translated">次のセクションでは、製品リストコンポーネントの子として新しいコンポーネント（製品アラート）を追加して、アプリの機能を拡張します。</target>
        </trans-unit>
        <trans-unit id="e1966fcbb6a04574ff0577930e9c4f4e9d6e0dcf" translate="yes" xml:space="preserve">
          <source>The next section shows how to use template reference variables to address this problem.</source>
          <target state="translated">次のセクションでは、この問題に対処するためにテンプレート参照変数を使用する方法を示します。</target>
        </trans-unit>
        <trans-unit id="b8bc4af8ca3880db42ed25822aa4664e92d79782" translate="yes" xml:space="preserve">
          <source>The next section though, where &lt;code&gt;InspectorComponent&lt;/code&gt; is a child component of &lt;code&gt;ChildComponent&lt;/code&gt;, &lt;code&gt;InspectorComponent&lt;/code&gt; is inside the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;, so when it asks for the &lt;code&gt;AnimalService&lt;/code&gt;, it sees the 🐶 (puppy).</source>
          <target state="translated">ただし、次のセクションでは、 &lt;code&gt;InspectorComponent&lt;/code&gt; が &lt;code&gt;ChildComponent&lt;/code&gt; の子コンポーネントである場合、 &lt;code&gt;InspectorComponent&lt;/code&gt; は &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内にあるため、 &lt;code&gt;AnimalService&lt;/code&gt; を要求すると、the（子犬）が表示されます。</target>
        </trans-unit>
        <trans-unit id="d59c51bbebc61089285e2a0c88cc2af2c45f0029" translate="yes" xml:space="preserve">
          <source>The next step is to add a binding to the &lt;code&gt;ChildComponent&lt;/code&gt; template.</source>
          <target state="translated">次のステップは、 &lt;code&gt;ChildComponent&lt;/code&gt; テンプレートにバインディングを追加することです。</target>
        </trans-unit>
        <trans-unit id="f76de710868e11d870476fe11d149898bf04eeee" translate="yes" xml:space="preserve">
          <source>The next step is to bind the input controls to the corresponding &lt;code&gt;Hero&lt;/code&gt; properties with two-way data binding, so that they respond to user input by updating the data model, and also respond to programmatic changes in the data by updating the display.</source>
          <target state="translated">次のステップは、双方向データバインディングを使用して入力コントロールを対応する &lt;code&gt;Hero&lt;/code&gt; プロパティにバインドし、データモデルを更新することでユーザー入力に応答し、表示を更新することでデータのプログラムによる変更に応答することです。</target>
        </trans-unit>
        <trans-unit id="1ac5a9d05f16c0b0c07e2483f2426a42fa242157" translate="yes" xml:space="preserve">
          <source>The next step is to bind the property in the parent component's template. In this example, the parent component template is &lt;code&gt;app.component.html&lt;/code&gt;.</source>
          <target state="translated">次のステップは、親コンポーネントのテンプレートでプロパティをバインドすることです。この例では、親コンポーネントテンプレートは &lt;code&gt;app.component.html&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="06656dd8fd58ec3c830e42d3bef15b1d6ea80756" translate="yes" xml:space="preserve">
          <source>The next step is to create a new alert feature that takes a product as an input. The alert checks the product's price, and, if the price is greater than $700, displays a &quot;Notify Me&quot; button that lets users sign up for notifications when the product goes on sale.</source>
          <target state="translated">次のステップは、製品を入力として受け取る新しいアラート機能を作成することです。アラートは製品の価格をチェックし、価格が700ドル以上の場合は「Notify Me」ボタンを表示し、製品が発売されたときに通知を受けるためにサインアップできるようにします。</target>
        </trans-unit>
        <trans-unit id="90b831079de1c7557999e837b31d0f72e7c2ee44" translate="yes" xml:space="preserve">
          <source>The next step is to define an object model that can describe all scenarios needed by the form functionality. The hero application process involves a form with a lot of questions. The &lt;em&gt;question&lt;/em&gt; is the most fundamental object in the model.</source>
          <target state="translated">次のステップは、フォームの機能に必要なすべてのシナリオを記述できるオブジェクトモデルを定義することです。ヒーロー申請プロセスには、多くの質問があるフォームが含まれます。&lt;em&gt;質問は、&lt;/em&gt;モデルの中で最も基本的なオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="fb2e63ba1bd8fdeb7779c136f5fcfde3c35d6213" translate="yes" xml:space="preserve">
          <source>The next version of the documentation is available at &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;. This includes any documentation for Beta or Release Candidate features and APIs.</source>
          <target state="translated">ドキュメントの次のバージョンは&lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;で入手できます。これには、ベータ版またはリリース候補版の機能とAPIのドキュメントが含まれます。</target>
        </trans-unit>
        <trans-unit id="4a180ac00e9f3dbf51f785693d56733d6c28e423" translate="yes" xml:space="preserve">
          <source>The ng module for the server.</source>
          <target state="translated">サーバー用のNGモジュールです。</target>
        </trans-unit>
        <trans-unit id="31db521a10f7d13d6ad0164b67edb26307449751" translate="yes" xml:space="preserve">
          <source>The ng module for the worker app side.</source>
          <target state="translated">ワーカーアプリ側のNGモジュール。</target>
        </trans-unit>
        <trans-unit id="86a442380fdcdb994033a6dea7124eb5d66e6cae" translate="yes" xml:space="preserve">
          <source>The ngUpgrade library in Angular is a very useful tool for upgrading anything but the smallest of applications. With it you can mix and match AngularJS and Angular components in the same application and have them interoperate seamlessly. That means you don't have to do the upgrade work all at once, since there's a natural coexistence between the two frameworks during the transition period.</source>
          <target state="translated">AngularのngUpgradeライブラリは、小規模なアプリケーション以外のアップグレードに非常に便利なツールです。これを使えば、同じアプリケーション内でAngularJSとAngularコンポーネントを混在させてシームレスに相互運用することができます。移行期間中は2つのフレームワークが自然に共存するので、一度にアップグレード作業をする必要はありません。</target>
        </trans-unit>
        <trans-unit id="0107243ec8cbe329d40de532f38d6e455ea3c867" translate="yes" xml:space="preserve">
          <source>The node.</source>
          <target state="translated">ノードです。</target>
        </trans-unit>
        <trans-unit id="04ba803c94c0cf27fa47cf0f40112d507c07b504" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator ( &lt;code&gt;!&lt;/code&gt; )</source>
          <target state="translated">null以外のアサーション演算子（ &lt;code&gt;!&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b8aa84c688682535f84bf8169abdd6d8bb08e9fc" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator should be used sparingly as refactoring of the component might break this constraint.</source>
          <target state="translated">コンポーネントのリファクタリングを行うと、この制約が破られる可能性があるため、non-null アサーション演算子は控えめに使用してください。</target>
        </trans-unit>
        <trans-unit id="931e7b111d738b68a612433a6d150f27f4217c3a" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, is optional with the exception that you must use it when you turn on strict null checks.</source>
          <target state="translated">null以外のアサーション演算子、 &lt;code&gt;!&lt;/code&gt; はオプションですが、厳密なnullチェックをオンにするときに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="064948efac2b67f533858ab0ec1a225c30e6d6d0" translate="yes" xml:space="preserve">
          <source>The npm package for the build tool used to create this target. The default builder for an application (&lt;code&gt;ng build myApp&lt;/code&gt;) is &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt;, which uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; package bundler. Note that a different builder is used for building a library (&lt;code&gt;ng build myLib&lt;/code&gt;).</source>
          <target state="translated">このターゲットの作成に使用されるビルドツールのnpmパッケージ。アプリケーションのデフォルトビルダー（ &lt;code&gt;ng build myApp&lt;/code&gt; ）は &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt; で、&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;パッケージバンドルを使用します。ライブラリの構築には別のビルダーが使用されることに注意してください（ &lt;code&gt;ng build myLib&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="10d444c3a0885867d29c65fc0e0878dd94476c43" translate="yes" xml:space="preserve">
          <source>The npm packages for the &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;mandatory&lt;/em&gt; polyfills&lt;/a&gt; (such as &lt;code&gt;zone.js&lt;/code&gt;) are installed automatically for you when you create your project with &lt;code&gt;ng new&lt;/code&gt;, and their corresponding &lt;code&gt;import&lt;/code&gt; statements are already enabled in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">以下のためのNPMパッケージ&lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;必須&lt;/em&gt; polyfills&lt;/a&gt;（のような &lt;code&gt;zone.js&lt;/code&gt; は、あなたとあなたのプロジェクトを作成するときに）あなたのために自動的にインストールされている &lt;code&gt;ng new&lt;/code&gt; 、およびそれらに対応する &lt;code&gt;import&lt;/code&gt; 文はすでに有効になっている &lt;code&gt;src/polyfills.ts&lt;/code&gt; 設定ファイル。</target>
        </trans-unit>
        <trans-unit id="9b47812f77184b9bdc5b1bad108b3a1b65438513" translate="yes" xml:space="preserve">
          <source>The number to be formatted as a percentage.</source>
          <target state="translated">パーセンテージとしてフォーマットされる数字。</target>
        </trans-unit>
        <trans-unit id="f5e154c108150e674adc32b02686eba52434ecc2" translate="yes" xml:space="preserve">
          <source>The number to be formatted as currency.</source>
          <target state="translated">通貨としてフォーマットされる番号。</target>
        </trans-unit>
        <trans-unit id="b8da88e922ca8c42e90b1e7116243bf395b37127" translate="yes" xml:space="preserve">
          <source>The number to be formatted.</source>
          <target state="translated">フォーマットされる番号。</target>
        </trans-unit>
        <trans-unit id="3f218a15291c3c94b883e1d87d28d7c7a5476b0c" translate="yes" xml:space="preserve">
          <source>The number to format.</source>
          <target state="translated">フォーマットする番号。</target>
        </trans-unit>
        <trans-unit id="3b8a293a9d221bf54d50d885baa3a93087f6de40" translate="yes" xml:space="preserve">
          <source>The object that matches the structure of the group.</source>
          <target state="translated">グループの構造に一致するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1ed19258bb078822c2e224f36b5e607033a8910c" translate="yes" xml:space="preserve">
          <source>The observable &lt;code&gt;Subscription&lt;/code&gt; will be handled by the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; and the component's &lt;code&gt;hero&lt;/code&gt; property will be (re)set with the retrieved hero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 可能な &lt;code&gt;Subscription&lt;/code&gt; はAsyncPipeによって処理され、コンポーネントの &lt;code&gt;hero&lt;/code&gt; プロパティは取得されたヒーローで（再）設定されます。</target>
        </trans-unit>
        <trans-unit id="9652db2fe25fc5b8589f982bd18c51dc7f8cff2d" translate="yes" xml:space="preserve">
          <source>The observable events of related services, such as &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt;, are not triggered.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt; などの関連サービスの監視可能なイベントはトリガーされません。</target>
        </trans-unit>
        <trans-unit id="9a424717c78d2ac09e12f0cde7f7e48fa3de1bd5" translate="yes" xml:space="preserve">
          <source>The observable returned must be finite, meaning it must complete at some point. To convert an infinite observable into a finite one, pipe the observable through a filtering operator such as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, or &lt;code&gt;takeUntil&lt;/code&gt;.</source>
          <target state="translated">返されるオブザーバブルは有限でなければなりません。つまり、ある時点で完了する必要があります。無限のオブザーバブルを有限のものに変換するには、 &lt;code&gt;first&lt;/code&gt; 、 &lt;code&gt;last&lt;/code&gt; 、 &lt;code&gt;take&lt;/code&gt; 、または &lt;code&gt;takeUntil&lt;/code&gt; などのフィルタリング演算子を介してオブザーバブルをパイプします。</target>
        </trans-unit>
        <trans-unit id="5a4603bc298dae8927b9677ed9905edb1e9450fd" translate="yes" xml:space="preserve">
          <source>The observer pattern is a software design pattern in which an object, called the &lt;em&gt;subject&lt;/em&gt;, maintains a list of its dependents, called &lt;em&gt;observers&lt;/em&gt;, and notifies them automatically of state changes. This pattern is similar (but not identical) to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&quot;&gt;publish/subscribe&lt;/a&gt; design pattern.</source>
          <target state="translated">オブザーバーパターンは、&lt;em&gt;サブジェクト&lt;/em&gt;と呼ばれるオブジェクトが&lt;em&gt;オブザーバー&lt;/em&gt;と呼ばれる依存関係のリストを維持し、状態の変化を自動的に通知するソフトウェアデザインパターンです。このパターンは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&quot;&gt;パブリッシュ/サブスクライブ&lt;/a&gt;デザインパターンと似ています（ただし同一ではありません）。</target>
        </trans-unit>
        <trans-unit id="3294239ebf17d384dfbf808355d9e127fde196ec" translate="yes" xml:space="preserve">
          <source>The official name of our builder is now &lt;code&gt;@example/command-runner:command&lt;/code&gt;. The first part of this is the package name (resolved using node resolution), and the second part is the builder name (resolved using the &lt;code&gt;builders.json&lt;/code&gt; file).</source>
          <target state="translated">ビルダーの正式名称は &lt;code&gt;@example/command-runner:command&lt;/code&gt; 。この最初の部分はパッケージ名（ノード解決を使用して解決）で、2番目の部分はビルダー名（ &lt;code&gt;builders.json&lt;/code&gt; ファイルを使用して解決）です。</target>
        </trans-unit>
        <trans-unit id="6da0f2f589e2727df45996f865813ce81bafd8dc" translate="yes" xml:space="preserve">
          <source>The offline template compiler prevents a whole class of vulnerabilities called template injection, and greatly improves application performance. Use the offline template compiler in production deployments; don't dynamically generate templates. Angular trusts template code, so generating templates, in particular templates containing user data, circumvents Angular's built-in protections. For information about dynamically constructing forms in a safe way, see the &lt;a href=&quot;dynamic-form&quot;&gt;Dynamic Forms&lt;/a&gt; guide page.</source>
          <target state="translated">オフラインテンプレートコンパイラは、テンプレートインジェクションと呼ばれる脆弱性のクラス全体を防ぎ、アプリケーションのパフォーマンスを大幅に向上させます。本番環境でのオフラインテンプレートコンパイラの使用。テンプレートを動的に生成しません。Angularはテンプレートコードを信頼するので、テンプレート、特にユーザーデータを含むテンプレートを生成すると、Angularの組み込み保護が回避されます。安全な方法でフォームを動的に構築する方法については、&lt;a href=&quot;dynamic-form&quot;&gt;動的フォームの&lt;/a&gt;ガイドページを参照してください。</target>
        </trans-unit>
        <trans-unit id="6c7235c164fd39687b519a25c40e459410556d6a" translate="yes" xml:space="preserve">
          <source>The only resources that have hashes in the &lt;code&gt;ngsw.json&lt;/code&gt; manifest are resources that were present in the &lt;code&gt;dist&lt;/code&gt; directory at the time the manifest was built. Other resources, especially those loaded from CDNs, have content that is unknown at build time or are updated more frequently than the app is deployed.</source>
          <target state="translated">&lt;code&gt;ngsw.json&lt;/code&gt; マニフェストにハッシュを持つ唯一のリソースは、マニフェストが作成されたときに &lt;code&gt;dist&lt;/code&gt; ディレクトリに存在していたリソースです。その他のリソース、特にCDNから読み込まれたリソースには、ビルド時に不明なコンテンツが含まれているか、アプリのデプロイよりも頻繁に更新されます。</target>
        </trans-unit>
        <trans-unit id="f4bcd43dc4907e02b316af7146976c21f6e2dfd6" translate="yes" xml:space="preserve">
          <source>The only step needed to provide initial &lt;code&gt;ng add&lt;/code&gt; support is to trigger an installation task using the &lt;code&gt;SchematicContext&lt;/code&gt;. The task uses the user's preferred package manager to add the library to the project's &lt;code&gt;package.json&lt;/code&gt; configuration file, and install it in the project&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; directory.</source>
          <target state="translated">最初の &lt;code&gt;ng add&lt;/code&gt; サポートを提供するために必要な唯一の手順は、 &lt;code&gt;SchematicContext&lt;/code&gt; を使用してインストールタスクをトリガーすることです。タスクは、ユーザーの優先パッケージマネージャーを使用して、ライブラリをプロジェクトの &lt;code&gt;package.json&lt;/code&gt; 構成ファイルに追加し、プロジェクトの &lt;code&gt;node_modules&lt;/code&gt; ディレクトリにインストールします。</target>
        </trans-unit>
        <trans-unit id="2912e68aa8582b70396e57e3457bf64276abecb2" translate="yes" xml:space="preserve">
          <source>The only substantive change is the pipe in the template. You can confirm in the live example that the &lt;em&gt;flying heroes&lt;/em&gt; display updates as you add heroes, even when you mutate the &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">唯一の実質的な変更は、テンプレート内のパイプです。 &lt;code&gt;heroes&lt;/code&gt; 配列を変更した場合でも、ヒーローを追加すると&lt;em&gt;飛行中のヒーローが&lt;/em&gt;更新を表示することをライブの例で確認できます。</target>
        </trans-unit>
        <trans-unit id="f109536b44b3294896f12b200cc7c6870edc45c6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;aliases&lt;/code&gt; array specifies one or more strings that can be used to invoke the schematic. For example, the schematic for the Angular CLI &amp;ldquo;generate&amp;rdquo; command has an alias &amp;ldquo;g&amp;rdquo;, allowing you to use the command &lt;code&gt;ng g&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;aliases&lt;/code&gt; 配列は、回路図を呼び出すために使用できる1つ以上の文字列を指定します。たとえば、Angular CLIの「generate」コマンドの回路図にはエイリアス「g」があり、 &lt;code&gt;ng g&lt;/code&gt; コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="0bf8db3667ef2b53d6cae67ff56052e554006755" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;foo&lt;/code&gt; route parameter is harmless and continues to be ignored.</source>
          <target state="translated">オプションの &lt;code&gt;foo&lt;/code&gt; routeパラメータは無害であり、無視され続けます。</target>
        </trans-unit>
        <trans-unit id="e40e92c59f16a06b5b028c69ad645f6c06a6aae8" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;foo&lt;/code&gt; route parameter is harmless and the router continues to ignore it.</source>
          <target state="translated">オプションの &lt;code&gt;foo&lt;/code&gt; routeパラメータは無害であり、ルータはそれを無視し続けます。</target>
        </trans-unit>
        <trans-unit id="c3e1faed39e73b09b3398a7ff71cedb3207da8d3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;schema&lt;/code&gt; property points to a JSON schema file that defines the command-line options available to the schematic.</source>
          <target state="translated">オプションの &lt;code&gt;schema&lt;/code&gt; プロパティは、回路図で使用できるコマンドラインオプションを定義するJSONスキーマファイルを指します。</target>
        </trans-unit>
        <trans-unit id="c789a1755156dab1f29d2365875888242e710fed" translate="yes" xml:space="preserve">
          <source>The optional route parameters are not separated by &quot;?&quot; and &quot;&amp;amp;&quot; as they would be in the URL query string. They are &lt;strong&gt;separated by semicolons &quot;;&quot;&lt;/strong&gt; This is &lt;em&gt;matrix URL&lt;/em&gt; notation&amp;mdash;something you may not have seen before.</source>
          <target state="translated">オプションのルートパラメータは「？」で区切られていません および「＆」は、URLクエリ文字列に含まれるためです。それらは&lt;strong&gt;セミコロン「;」で区切られます。&lt;/strong&gt;これは、&lt;em&gt;マトリックスURL&lt;/em&gt;表記です。これまでに見たことのないものです。</target>
        </trans-unit>
        <trans-unit id="6cf50f6bad5201a772a4de797df1b382728af19a" translate="yes" xml:space="preserve">
          <source>The optional route parameters are not separated by &quot;?&quot; and &quot;&amp;amp;&quot; as they would be in the URL query string. They are separated by semicolons &quot;;&quot;. This is matrix URL notation.</source>
          <target state="translated">オプションのルートパラメータは「？」で区切られていません URLクエリ文字列に含まれる「＆」。それらはセミコロン &quot;;&quot;で区切られます。これはマトリックスURL表記です。</target>
        </trans-unit>
        <trans-unit id="8a35351d188a98c16c0b786429358c0c165ee4c9" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, and &lt;code&gt;scripts&lt;/code&gt; can have either simple path string values, or object values with specific fields. The &lt;code&gt;sourceMap&lt;/code&gt; and &lt;code&gt;optimization&lt;/code&gt; options can be set to a simple Boolean value with a command flag, but can also be given a complex value using the configuration file. The following sections provide more details of how these complex values are used in each case.</source>
          <target state="translated">オプション &lt;code&gt;assets&lt;/code&gt; 、 &lt;code&gt;styles&lt;/code&gt; 、および &lt;code&gt;scripts&lt;/code&gt; には、単純なパス文字列値、または特定のフィールドを持つオブジェクト値のいずれかを含めることができます。 &lt;code&gt;sourceMap&lt;/code&gt; と &lt;code&gt;optimization&lt;/code&gt; オプションは、コマンドフラグを使用して、単純なブール値に設定することができ、また、構成ファイルを使用して、複雑な価値を与えることができます。以下のセクションでは、これらの複雑な値がそれぞれの場合にどのように使用されるかについて詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="5a7271913fb719bd7b5e39dde45d44587b784fb2" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the array level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">オプションオブジェクトは、各子コントロールの &lt;code&gt;updateOn&lt;/code&gt; プロパティのデフォルト値を設定するために使用されます。あなたが設定した場合 &lt;code&gt;updateOn&lt;/code&gt; をする &lt;code&gt;'blur'&lt;/code&gt; 「ぼかし」に、アレイレベルで、すべての子コントロールのデフォルト、子供は異なる明示的に指定していない限り、 &lt;code&gt;updateOn&lt;/code&gt; の値を。</target>
        </trans-unit>
        <trans-unit id="6e5341d5e74eb1a6542f76853fe596992c982b9a" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the group level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">オプションオブジェクトは、各子コントロールの &lt;code&gt;updateOn&lt;/code&gt; プロパティのデフォルト値を設定するために使用されます。あなたが設定した場合 &lt;code&gt;updateOn&lt;/code&gt; をする &lt;code&gt;'blur'&lt;/code&gt; 「ぼかし」にグループレベルで、すべての子コントロールのデフォルト、子供は異なる明示的に指定していない限り、 &lt;code&gt;updateOn&lt;/code&gt; の値を。</target>
        </trans-unit>
        <trans-unit id="746585f9d309cd4a0ba0d2fbf9b96110e934c17e" translate="yes" xml:space="preserve">
          <source>The options object provides default values for the two inputs that we defined; &lt;code&gt;command&lt;/code&gt;, which is the Unix command to execute, and &lt;code&gt;args&lt;/code&gt;, an array that contains the file to operate on.</source>
          <target state="translated">オプションオブジェクトは、定義した2つの入力のデフォルト値を提供します。 &lt;code&gt;command&lt;/code&gt; を実行するには、UNIXのコマンドで、かつ &lt;code&gt;args&lt;/code&gt; 、上で動作するファイルを含む配列。</target>
        </trans-unit>
        <trans-unit id="a808828e19354aac449233df39a10e00fae8dee0" translate="yes" xml:space="preserve">
          <source>The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime.</source>
          <target state="translated">オプションは、実行時にディレクティブがどのように処理され、 インスタンス化され、使用されるかを決定する設定メタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="05c7ae2f84882bcfa37ddd31c179aced5dca729d" translate="yes" xml:space="preserve">
          <source>The order of class declaration matters in TypeScript. You can't refer directly to a class until it's been defined.</source>
          <target state="translated">TypeScriptではクラスの宣言の順番が重要です。クラスが定義されるまでは、直接クラスを参照することはできません。</target>
        </trans-unit>
        <trans-unit id="806f30750f611f41f4fdf8dfec26b3c766793543" translate="yes" xml:space="preserve">
          <source>The order of execution is: BaseGuard, ChildGuard, BaseDataResolver, ChildDataResolver.</source>
          <target state="translated">実行順序は、BaseGuard、ChildGuard、BaseDataResolver、ChildDataResolverです。</target>
        </trans-unit>
        <trans-unit id="d6e130fe2786cc33658ab0a390d2374bb95a033b" translate="yes" xml:space="preserve">
          <source>The order of route configuration is important because the router accepts the first route that matches a navigation request path.</source>
          <target state="translated">ルータはナビゲーション要求パスに一致する最初のルートを受け入れるので、ルート設定の順序は重要です。</target>
        </trans-unit>
        <trans-unit id="6c7cad94283dc8992d7c11c563fd215a38191432" translate="yes" xml:space="preserve">
          <source>The order of route configuration matters. The router accepts the first route that matches a navigation request path.</source>
          <target state="translated">ルート設定の順番が重要です。ルータは、ナビゲーション要求パスに一致する最初のルートを受け入れます。</target>
        </trans-unit>
        <trans-unit id="5a0b34b391ca8d26ee25fe344b77918441a9ac0e" translate="yes" xml:space="preserve">
          <source>The order of routes is important because the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; uses a first-match wins strategy when matching routes, so more specific routes should be placed above less specific routes. List routes with a static path first, followed by an empty path route, which matches the default route. The &lt;a href=&quot;router#setting-up-wildcard-routes&quot;&gt;wildcard route&lt;/a&gt; comes last because it matches every URL and the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; selects it only if no other routes match first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; はルートを照合するときに最初の一致の勝ち戦略を使用するため、ルートの順序は重要です。したがって、より具体的なルートは、あまり具体的でないルートの上に配置する必要があります。最初に静的パスを使用してルートをリストし、次にデフォルトルートと一致する空のパスルートをリストします。&lt;a href=&quot;router#setting-up-wildcard-routes&quot;&gt;ワイルドカードのルートは、&lt;/a&gt;それがすべてのURLと一致しているため最後になる &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 、他のルートが最初に一致しない場合にのみ、それを選択します。</target>
        </trans-unit>
        <trans-unit id="41216db2f85115d74834c152bfa23e599dd9f3f6" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second</source>
          <target state="translated">元の &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; 状態。元の高さ、色、不透明度が1秒の時間枠で変化します。</target>
        </trans-unit>
        <trans-unit id="cb417f35db2b3c266ee5c90059c45737b13dbb00" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second.</source>
          <target state="translated">元の &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; 状態。高さ、色、不透明度が元々変化し、1秒の時間枠で発生します。</target>
        </trans-unit>
        <trans-unit id="5c3fc45bc2db2f7c8beca6fdc1270fdd65714fae" translate="yes" xml:space="preserve">
          <source>The original response continues untouched back up through the chain of interceptors to the application caller.</source>
          <target state="translated">オリジナルのレスポンスは、アプリケーションの呼び出し元へのインターセプターの連鎖を通って、そのまま戻ってきます。</target>
        </trans-unit>
        <trans-unit id="8475e386138bc203bd52458f303f075a4b824138" translate="yes" xml:space="preserve">
          <source>The other feature module's routing module is configured similarly.</source>
          <target state="translated">他のフィーチャモジュールのルーティングモジュールも同様に構成されています。</target>
        </trans-unit>
        <trans-unit id="ac2033a02f00fb6e865ead163931aca26717c78d" translate="yes" xml:space="preserve">
          <source>The other possible &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;'prefix'&lt;/code&gt; which tells the router to match the redirect route when the &lt;em&gt;remaining&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;begins&lt;/em&gt;&lt;/strong&gt; with the redirect route's &lt;em&gt;prefix&lt;/em&gt; path.</source>
          <target state="translated">その他の可能な &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 値は &lt;code&gt;'prefix'&lt;/code&gt; で、&lt;em&gt;残りの&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;が&lt;/em&gt;&lt;/strong&gt;リダイレクトルートの&lt;em&gt;プレフィックス&lt;/em&gt;パスで&lt;strong&gt;&lt;em&gt;始まる&lt;/em&gt;&lt;/strong&gt;場合に、ルーターにリダイレクトルートと一致するように指示します。</target>
        </trans-unit>
        <trans-unit id="c690d1d77a35de6a3687ffe8576dfd74e6fa1564" translate="yes" xml:space="preserve">
          <source>The other possible &lt;code&gt;pathMatch&lt;/code&gt; value is &lt;code&gt;'prefix'&lt;/code&gt; which tells the router to match the redirect route when the remaining URL begins with the redirect route's prefix path. This doesn't apply to this sample app because if the &lt;code&gt;pathMatch&lt;/code&gt; value were &lt;code&gt;'prefix'&lt;/code&gt;, every URL would match &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">他の可能な &lt;code&gt;pathMatch&lt;/code&gt; 値は &lt;code&gt;'prefix'&lt;/code&gt; これは、残りのURLがリダイレクトルートのプレフィックスパスで始まる場合に、リダイレクトルートと一致するようにルーターに指示します。 &lt;code&gt;pathMatch&lt;/code&gt; 値が &lt;code&gt;'prefix'&lt;/code&gt; の場合、すべてのURLが &lt;code&gt;''&lt;/code&gt; に一致するため、これはこのサンプルアプリには適用されません。</target>
        </trans-unit>
        <trans-unit id="6cdebc7919635d8158a944f0c5d968998171539f" translate="yes" xml:space="preserve">
          <source>The other reference is in the &lt;em&gt;value position&lt;/em&gt;-- that is, LibHeaderComponent is the value of the &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; parameter decorator: &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;(LibHeaderComponent)&lt;/code&gt;.</source>
          <target state="translated">もう1つの参照は&lt;em&gt;値の位置&lt;/em&gt;にあり&lt;em&gt;ます。&lt;/em&gt;つまり、LibHeaderComponentは &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; パラメーターデコレーターの値です： &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;(LibHeaderComponent)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="683021b4260938edc921d666701a253150e18ddb" translate="yes" xml:space="preserve">
          <source>The outer and inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances are assembled into views as follows:</source>
          <target state="translated">外側と内側の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; インスタンスは、次のようにビューにアセンブルされます。</target>
        </trans-unit>
        <trans-unit id="db438b04615ada9c6a8e0f3ec02854c6d2f5ac5b" translate="yes" xml:space="preserve">
          <source>The outgoing HTTP request method.</source>
          <target state="translated">送信側のHTTPリクエストメソッド。</target>
        </trans-unit>
        <trans-unit id="ab71fe70e254aa60e106538ded89aa5355abd19f" translate="yes" xml:space="preserve">
          <source>The outgoing URL with all URL parameters set.</source>
          <target state="translated">すべてのURLパラメータを設定した送信URL。</target>
        </trans-unit>
        <trans-unit id="29b0a52a0f9e42ada2a44024b4ce3442efa10abc" translate="yes" xml:space="preserve">
          <source>The outgoing request object to handle.</source>
          <target state="translated">処理する送信リクエストオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4e584659815c873b9863b2023a8d1da485d88c69" translate="yes" xml:space="preserve">
          <source>The outlet name of the route</source>
          <target state="translated">ルートの出口名</target>
        </trans-unit>
        <trans-unit id="427ee8154382c38b7d171dfb79623a53e63a0fd6" translate="yes" xml:space="preserve">
          <source>The outlet name of the route, a constant.</source>
          <target state="translated">ルートの出口名、定数。</target>
        </trans-unit>
        <trans-unit id="bcedcd9799379281170f96329a0199438fc48892" translate="yes" xml:space="preserve">
          <source>The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types.</source>
          <target state="translated">出力配列はキー順に並べられます。デフォルトでは、比較対象は Unicode のポイント値となります。キーが複雑な型の場合は、オプションで compareFn を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="7e3805c6cd01668729e336d07b3bf6176de112bf" translate="yes" xml:space="preserve">
          <source>The output directory for build results.</source>
          <target state="translated">ビルド結果の出力ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="3f8aa866a39412d582722989844ba25d2bbcc37b" translate="yes" xml:space="preserve">
          <source>The output folder is &lt;code&gt;dist/project-name/&lt;/code&gt; by default. To output to a different folder, change the &lt;code&gt;outputPath&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、出力フォルダーは &lt;code&gt;dist/project-name/&lt;/code&gt; です。別のフォルダに出力するように、変更 &lt;code&gt;outputPath&lt;/code&gt; で &lt;code&gt;angular.json&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="fa555da87eea14ed125658bcb8bbbf275e304596" translate="yes" xml:space="preserve">
          <source>The output in the view would be:</source>
          <target state="translated">ビューでの出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="61eeb6aa93a200e68991925d7feb4a198a9bbc45" translate="yes" xml:space="preserve">
          <source>The output locations are printed in the output.</source>
          <target state="translated">出力された場所には、出力された場所が印刷されます。</target>
        </trans-unit>
        <trans-unit id="36f38bb92f919b4487aa12bfc0fbbe03a7e4f8ef" translate="yes" xml:space="preserve">
          <source>The outputs of the component.</source>
          <target state="translated">コンポーネントの出力です。</target>
        </trans-unit>
        <trans-unit id="b8c774af30b04ee8bc9afcca4c83e98bbbdacecb" translate="yes" xml:space="preserve">
          <source>The overall structure of the &lt;code&gt;updateHero()&lt;/code&gt; method is similar to that of &lt;code&gt;getHeroes()&lt;/code&gt;, but it uses &lt;code&gt;http.put()&lt;/code&gt; to persist the changed hero on the server. Add the following to the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">全体的な構造 &lt;code&gt;updateHero()&lt;/code&gt; メソッドは、のと同様である &lt;code&gt;getHeroes()&lt;/code&gt; 、それは使用 &lt;code&gt;http.put()&lt;/code&gt; がサーバ上で変更主人公を持続します。以下を &lt;code&gt;HeroService&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="12119367c4766736842fde0c43c23fc7012b447d" translate="yes" xml:space="preserve">
          <source>The override tests</source>
          <target state="translated">オーバーライドテスト</target>
        </trans-unit>
        <trans-unit id="f744d7b55b54e113c573c6873b082577a9af8827" translate="yes" xml:space="preserve">
          <source>The package manager used to install dependencies.</source>
          <target state="translated">依存関係をインストールするために使用するパッケージマネージャです。</target>
        </trans-unit>
        <trans-unit id="cecd7ea3164b66bdc1ebb3846e85c8cad94a7d0d" translate="yes" xml:space="preserve">
          <source>The package to be added.</source>
          <target state="translated">追加されるパッケージ。</target>
        </trans-unit>
        <trans-unit id="605c3739fd71bc00a4ed1ba45664e517e73bc270" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; are essential to &lt;em&gt;running&lt;/em&gt; applications.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; セクションにリストされているパッケージは、アプリケーションの&lt;em&gt;実行に&lt;/em&gt;不可欠です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e74bdc0c13790fb1dd4454fda328d83e51487c05" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;dependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; are essential to &lt;em&gt;running&lt;/em&gt; applications.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;dependencies&lt;/code&gt; セクションにリストされているパッケージは、アプリケーションの&lt;em&gt;実行に&lt;/em&gt;不可欠です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="80dcc126c1685ed6246cc6c4e4f678dbe5b7a91b" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;devDependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; help you develop the application on your local machine. You don't deploy them with the production application.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;devDependencies&lt;/code&gt; セクションにリストされているパッケージは、ローカルマシンでアプリケーションを開発するのに役立ちます。本番アプリケーションではそれらをデプロイしません。</target>
        </trans-unit>
        <trans-unit id="a91b89dd5ef65469422d3ef6e3e02edce3d9a4f2" translate="yes" xml:space="preserve">
          <source>The page is reloaded/refreshed.</source>
          <target state="translated">ページの再読込/更新を行っています。</target>
        </trans-unit>
        <trans-unit id="b2b646185b55821ee60d26f71064b66b6eee386d" translate="yes" xml:space="preserve">
          <source>The page no longer displays properly because you changed the hero from a string to an object.</source>
          <target state="translated">ヒーローを文字列からオブジェクトに変更したため、ページが正常に表示されなくなりました。</target>
        </trans-unit>
        <trans-unit id="45bba286f5d6066ed3bf3bcd1c4ffd4a6469b7b6" translate="yes" xml:space="preserve">
          <source>The page requests an update be immediately activated via the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">このページでは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; サービスを介してすぐに更新をアクティブ化するよう要求しています。</target>
        </trans-unit>
        <trans-unit id="d7114b73bd8fae35327a37dbe1c3217b440f55ff" translate="yes" xml:space="preserve">
          <source>The page you see is the &lt;em&gt;application shell&lt;/em&gt;. The shell is controlled by an Angular &lt;strong&gt;component&lt;/strong&gt; named &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">表示されるページは&lt;em&gt;アプリケーションシェル&lt;/em&gt;です。シェルは &lt;code&gt;AppComponent&lt;/code&gt; という名前のAngular &lt;strong&gt;コンポーネント&lt;/strong&gt;によって制御されます。</target>
        </trans-unit>
        <trans-unit id="dc0d5bcdb4927dad0eb89021491daf6f6e13f7e8" translate="yes" xml:space="preserve">
          <source>The parameter name.</source>
          <target state="translated">パラメータ名です。</target>
        </trans-unit>
        <trans-unit id="f11e186d7179311f50be914a4fe6431b1ffd3f4d" translate="yes" xml:space="preserve">
          <source>The parameter simultaneously defines a private &lt;code&gt;heroService&lt;/code&gt; property and identifies it as a &lt;code&gt;HeroService&lt;/code&gt; injection site.</source>
          <target state="translated">パラメータは同時にプライベート &lt;code&gt;heroService&lt;/code&gt; プロパティを定義し、それを &lt;code&gt;HeroService&lt;/code&gt; インジェクションサイトとして識別します。</target>
        </trans-unit>
        <trans-unit id="a471c31a25dfc4c5093392a2386d76746208b100" translate="yes" xml:space="preserve">
          <source>The parameter value can be any valid template expression, (see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;Template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page) such as a string literal or a component property. In other words, you can control the format through a binding the same way you control the birthday value through a binding.</source>
          <target state="translated">パラメータ値には、文字列リテラルやコンポーネントプロパティなど、任意の有効なテンプレート式（[ &lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文]&lt;/a&gt;ページの[ &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式]&lt;/a&gt;セクションを参照）を使用できます。つまり、バインディングを介して誕生日の値を制御するのと同じ方法で、バインディングを介して形式を制御できます。</target>
        </trans-unit>
        <trans-unit id="a2f2e40ff634b01ef533833632126053be3035ce" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;AppComponent&lt;/code&gt; doesn't need to know about the dependencies of dependencies. Declare what's needed in the constructor (in this case &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContextService&lt;/code&gt;) and the framework resolves the nested dependencies.</source>
          <target state="translated">親 &lt;code&gt;AppComponent&lt;/code&gt; は、依存関係の依存関係を知る必要はありません。コンストラクターで何が必要かを宣言し（この場合は &lt;code&gt;LoggerService&lt;/code&gt; および &lt;code&gt;UserContextService&lt;/code&gt; ）、フレームワークはネストされた依存関係を解決します。</target>
        </trans-unit>
        <trans-unit id="eb7dc6ea9c849b17c83ab843ef634a845e0cc4b4" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;HeroBiosComponent&lt;/code&gt; binds a value to &lt;code&gt;heroId&lt;/code&gt;. &lt;code&gt;ngOnInit&lt;/code&gt; passes that ID to the service, which fetches and caches the hero. The getter for the &lt;code&gt;hero&lt;/code&gt; property pulls the cached hero from the service. The template displays this data-bound property.</source>
          <target state="translated">親 &lt;code&gt;HeroBiosComponent&lt;/code&gt; はに値をバインドし &lt;code&gt;heroId&lt;/code&gt; 。 &lt;code&gt;ngOnInit&lt;/code&gt; はそのIDをサービスに渡し、サービスはヒーローをフェッチしてキャッシュします。 &lt;code&gt;hero&lt;/code&gt; プロパティのゲッターは、キャッシュされたヒーローをサービスから取得します。テンプレートは、このデータバインドプロパティを表示します。</target>
        </trans-unit>
        <trans-unit id="6cd3e3252a82b27dd42c44952cca27ac0ef0a581" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;VoteTakerComponent&lt;/code&gt; binds an event handler called &lt;code&gt;onVoted()&lt;/code&gt; that responds to the child event payload &lt;code&gt;$event&lt;/code&gt; and updates a counter.</source>
          <target state="translated">親の &lt;code&gt;VoteTakerComponent&lt;/code&gt; は、子イベントのペイロード &lt;code&gt;$event&lt;/code&gt; 応答してカウンタを更新する &lt;code&gt;onVoted()&lt;/code&gt; と呼ばれるイベントハンドラをバインドします。</target>
        </trans-unit>
        <trans-unit id="a6895c8ceeed733901d1a5ee2c80a8927e951506" translate="yes" xml:space="preserve">
          <source>The parent component cannot data bind to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods nor to its &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">親コンポーネントは、子の &lt;code&gt;start&lt;/code&gt; メソッドと &lt;code&gt;stop&lt;/code&gt; メソッド、および &lt;code&gt;seconds&lt;/code&gt; プロパティにデータバインドできません。</target>
        </trans-unit>
        <trans-unit id="ccf3b5f4773641faf3c55a350577e0c6cd3528dd" translate="yes" xml:space="preserve">
          <source>The parent component class and template</source>
          <target state="translated">親コンポーネントクラスとテンプレート</target>
        </trans-unit>
        <trans-unit id="b69dbb3eb5bb7d6ff61f200cca2db7e39afc938d" translate="yes" xml:space="preserve">
          <source>The parent control.</source>
          <target state="translated">親のコントロール。</target>
        </trans-unit>
        <trans-unit id="1d5682396420bbc4186bac1b479e30f0a2e910c6" translate="yes" xml:space="preserve">
          <source>The parent must cooperate by providing an &lt;em&gt;alias&lt;/em&gt; to itself in the name of a class interface token.</source>
          <target state="translated">親は、クラスインターフェイストークンの名前で自分自身に&lt;em&gt;エイリアス&lt;/em&gt;を提供することにより、協力する必要があります。</target>
        </trans-unit>
        <trans-unit id="934dc6ecfaf214b64d3b92a5c9d8431b54cdb963" translate="yes" xml:space="preserve">
          <source>The parent node in the url tree</source>
          <target state="translated">url ツリーの親ノード</target>
        </trans-unit>
        <trans-unit id="8fd36ababa58725780954fcf5f9d1c970d8528ab" translate="yes" xml:space="preserve">
          <source>The parent node.</source>
          <target state="translated">親ノード。</target>
        </trans-unit>
        <trans-unit id="0a0f0dc2aaf6c1c595258b9e8784715a84b50c67" translate="yes" xml:space="preserve">
          <source>The parent of this player, if any.</source>
          <target state="translated">このプレイヤーの親がいる場合は、その親。</target>
        </trans-unit>
        <trans-unit id="67d15ddca6f8e438ee84b955f2b25fe3a494f70e" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree</source>
          <target state="translated">ルータの状態ツリーにあるこのルートの親</target>
        </trans-unit>
        <trans-unit id="2903a28e9071275ef7593599182782527f1f0ab5" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree.</source>
          <target state="translated">ルータのステートツリー内のこのルートの親。</target>
        </trans-unit>
        <trans-unit id="da18e4e25f47d18df9195287587b131efcbb8846" translate="yes" xml:space="preserve">
          <source>The parentheses around &lt;code&gt;click&lt;/code&gt; tell Angular to listen for the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element's &lt;code&gt;click&lt;/code&gt; event. When the user clicks in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, Angular executes the &lt;code&gt;onSelect(hero)&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; 周りの括弧は、Angularに &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;click&lt;/code&gt; イベントをリッスンするように指示します。ユーザーが &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; をクリックすると、Angularは &lt;code&gt;onSelect(hero)&lt;/code&gt; 式を実行します。</target>
        </trans-unit>
        <trans-unit id="29591102485816b32c99b4b31ce4e781fbd9a2cd" translate="yes" xml:space="preserve">
          <source>The partial response body as downloaded so far.</source>
          <target state="translated">これまでにダウンロードした部分応答体</target>
        </trans-unit>
        <trans-unit id="a0035afe05127ba28a95a7b2b648e50cf8b95d4b" translate="yes" xml:space="preserve">
          <source>The passed-in providers can be an array of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;, or a recursive array of more providers.</source>
          <target state="translated">渡されるプロバイダーは、 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の配列、またはより多くのプロバイダーの再帰的な配列です。</target>
        </trans-unit>
        <trans-unit id="23b9cd25cc8870c80722d2ac4c13f170a781fd85" translate="yes" xml:space="preserve">
          <source>The pasted HTML refers to a &lt;code&gt;selectedHero&lt;/code&gt;. The new &lt;code&gt;HeroDetailComponent&lt;/code&gt; can present &lt;em&gt;any&lt;/em&gt; hero, not just a selected hero. So replace &quot;selectedHero&quot; with &quot;hero&quot; everywhere in the template.</source>
          <target state="translated">貼り付けられたHTMLは、 &lt;code&gt;selectedHero&lt;/code&gt; を参照します。新しい &lt;code&gt;HeroDetailComponent&lt;/code&gt; は、選択されたヒーローだけでなく、&lt;em&gt;あらゆる&lt;/em&gt;ヒーローを表示できます。したがって、テンプレートのすべての場所で「selectedHero」を「hero」に置き換えます。</target>
        </trans-unit>
        <trans-unit id="2571c9d77bbaccfdb1c7e7ad5cf492440d3e60a6" translate="yes" xml:space="preserve">
          <source>The path at which to create the library's public API file, relative to the workspace root.</source>
          <target state="translated">ワークスペース・ルートからの相対的なライブラリのパブリック API ファイルを作成するパス。</target>
        </trans-unit>
        <trans-unit id="deb5ccf2b009e5d123d0a690e376af4b80917816" translate="yes" xml:space="preserve">
          <source>The path can be absolute or relative to the current working directory where the command is executed. For example, to run the schematic we just generated (which has no required options), use the following command.</source>
          <target state="translated">パスは、コマンドを実行する現在の作業ディレクトリへの絶対パスまたは相対パスを指定します。例えば、先ほど生成した回路図(必須オプションはありません)を実行するには、以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="c044146e6280c52cf5a46b481e94eb7064916400" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route</source>
          <target state="translated">ルータのステートツリーのルートからこのルートまでのパス</target>
        </trans-unit>
        <trans-unit id="ffce671b3d1acbfaba292b2709f2546bc87cd1c1" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route.</source>
          <target state="translated">ルータのステートツリーのルートからこのルートへのパス。</target>
        </trans-unit>
        <trans-unit id="7fab43da3241a041866863ee81b54bc3174d0c77" translate="yes" xml:space="preserve">
          <source>The path of the route to the destination component.</source>
          <target state="translated">宛先コンポーネントへのルートのパス。</target>
        </trans-unit>
        <trans-unit id="7815a518ee4716a2b1120142147e7d95775a8e78" translate="yes" xml:space="preserve">
          <source>The path of the source directory.</source>
          <target state="translated">ソースディレクトリのパス。</target>
        </trans-unit>
        <trans-unit id="5a4facd2991ea2981fac7027d7268d40140867a3" translate="yes" xml:space="preserve">
          <source>The path part of a URL segment</source>
          <target state="translated">URL セグメントのパス部分</target>
        </trans-unit>
        <trans-unit id="57501241fca71416c36ef15c3a51d7c6e44f1317" translate="yes" xml:space="preserve">
          <source>The path string</source>
          <target state="translated">パス文字列</target>
        </trans-unit>
        <trans-unit id="1a9c4ada156081d91a1927cd0a28c70af244c81e" translate="yes" xml:space="preserve">
          <source>The path to match against. Cannot be used together with a custom &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function. A URL string that uses router matching notation. Can be a wild card (&lt;code&gt;**&lt;/code&gt;) that matches any URL (see Usage Notes below). Default is &quot;/&quot; (the root path).</source>
          <target state="translated">照合するパス。カスタム &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 関数と一緒に使用することはできません。ルーター一致表記を使用するURL文字列。任意のURLに一致するワイルドカード（ &lt;code&gt;**&lt;/code&gt; ）を使用できます（以下の使用上の注意を参照）。デフォルトは &quot;/&quot;（ルートパス）です。</target>
        </trans-unit>
        <trans-unit id="26cfa4e4510f3f3cc3401b03b8d84ea4dd0bb17b" translate="yes" xml:space="preserve">
          <source>The path to match against. Cannot be used together with a custom &lt;code&gt;matcher&lt;/code&gt; function. A URL string that uses router matching notation. Can be a wild card (&lt;code&gt;**&lt;/code&gt;) that matches any URL (see Usage Notes below). Default is &quot;/&quot; (the root path).</source>
          <target state="translated">照合するパス。カスタム &lt;code&gt;matcher&lt;/code&gt; 機能と併用することはできません。ルーターマッチング表記を使用するURL文字列。任意のURLに一致するワイルドカード（ &lt;code&gt;**&lt;/code&gt; ）にすることができます（以下の使用上の注意を参照）。デフォルトは「/」（ルートパス）です。</target>
        </trans-unit>
        <trans-unit id="9ea7c1cb9a5d01a52764c83bce6591f48a706bc8" translate="yes" xml:space="preserve">
          <source>The path to the 'street' control from the root form would be 'address' -&amp;gt; 'street'.</source>
          <target state="translated">ルートフォームから「ストリート」コントロールへのパスは、「アドレス」-&amp;gt;「ストリート」になります。</target>
        </trans-unit>
        <trans-unit id="3ef9964ab8f09b8e12ab9dd768d9f14677db6668" translate="yes" xml:space="preserve">
          <source>The path to this group from the top-level directive.</source>
          <target state="translated">トップレベルディレクティブからこのグループへのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="81b3c5aa5a142e56a8cc65e9cb4384f3838d042c" translate="yes" xml:space="preserve">
          <source>The path to this group.</source>
          <target state="translated">このグループへの道。</target>
        </trans-unit>
        <trans-unit id="c5155f988648d9eafa70e267b1c2b7d6a2bb54ed" translate="yes" xml:space="preserve">
          <source>The path where new projects will be created, relative to the new workspace root.</source>
          <target state="translated">新しいワークスペース ルートからの相対的な、新しいプロジェクトが作成されるパス。</target>
        </trans-unit>
        <trans-unit id="6bff124c5ff1260658dbe66420f0ad585635ee2f" translate="yes" xml:space="preserve">
          <source>The path where style resources will be placed, relative to outputPath.</source>
          <target state="translated">スタイルリソースが配置されるパス。</target>
        </trans-unit>
        <trans-unit id="efc330a017153f448a0111c70f94ac011295b24b" translate="yes" xml:space="preserve">
          <source>The path-match strategy 'full' matches against the entire URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</source>
          <target state="translated">パスマッチストラテジーの 'full' は URL 全体にマッチします。空のパスのルートをリダイレクトするときにこれを行うことが重要です。そうしないと、空のパスは任意の URL のプレフィックスなので、ルータはリダイレクト先に移動してもリダイレクトを適用してしまい、無限ループを作ってしまいます。</target>
        </trans-unit>
        <trans-unit id="7aedc08e6bf2368ad910279f0b057e807d83e9f8" translate="yes" xml:space="preserve">
          <source>The path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.</source>
          <target state="translated">パスマッチングの方法を 'prefix' あるいは 'full' のいずれかで指定します。デフォルトは 'prefix' です。</target>
        </trans-unit>
        <trans-unit id="10817689f142f9440662eeb6d05887794bb18bb9" translate="yes" xml:space="preserve">
          <source>The pathname where the app will be served.</source>
          <target state="translated">アプリが提供されるパス名です。</target>
        </trans-unit>
        <trans-unit id="ddea77aa7e88eee7c5407247c21aa1d815f8f4fa" translate="yes" xml:space="preserve">
          <source>The pipe class implements the &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface's &lt;code&gt;transform&lt;/code&gt; method that accepts an input value followed by optional parameters and returns the transformed value.</source>
          <target state="translated">pipeクラスは、入力値とそれに続くオプションのパラメーターを受け入れ、変換された値を返す &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; インターフェースの &lt;code&gt;transform&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="f73953d503dce99e3f2e6da39da4ce7debe6ac7d" translate="yes" xml:space="preserve">
          <source>The pipe name to use in template bindings. Typically uses &lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase&lt;/a&gt; because the name cannot contain hyphens.</source>
          <target state="translated">テンプレートバインディングで使用するパイプ名。名前にハイフンを含めることができないため、通常は&lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCaseを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="345412f14368a1f164257004a17666a92c69e9a0" translate="yes" xml:space="preserve">
          <source>The pipe operator (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">パイプ演算子（ &lt;code&gt;|&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="47f93ef7f7a798e2556f7e8b9c63fade54c0a39a" translate="yes" xml:space="preserve">
          <source>The pipe operator has a higher precedence than the ternary operator (&lt;code&gt;?:&lt;/code&gt;), which means &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; is parsed as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt;. Nevertheless, for a number of reasons, the pipe operator cannot be used without parentheses in the first and second operands of &lt;code&gt;?:&lt;/code&gt;. A good practice is to use parentheses in the third operand too.</source>
          <target state="translated">（パイプ演算子は三項演算子よりも高い優先順位有する &lt;code&gt;?:&lt;/code&gt; ）、意味しますか &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; b：c | Xとして解析されますか &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt; b：（c | x）。それにもかかわらず、いくつかの理由により、パイプ演算子は &lt;code&gt;?:&lt;/code&gt; の最初と2番目のオペランドに括弧がないと使用できません。3番目のオペランドでも括弧を使用することをお勧めします。&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;&lt;/a&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb53ab914374ca101ddcf09cb39e0b44e334194e" translate="yes" xml:space="preserve">
          <source>The pipe operator has a higher precedence than the ternary operator (&lt;code&gt;?:&lt;/code&gt;), which means &lt;code&gt;a ? b : c | x&lt;/code&gt; is parsed as &lt;code&gt;a ? b : (c | x)&lt;/code&gt;. Nevertheless, for a number of reasons, the pipe operator cannot be used without parentheses in the first and second operands of &lt;code&gt;?:&lt;/code&gt;. A good practice is to use parentheses in the third operand too.</source>
          <target state="translated">パイプ演算子は、三項演算子（ &lt;code&gt;?:&lt;/code&gt; ：）よりも優先順位が高く、これは &lt;code&gt;a ? b : c | x&lt;/code&gt; を意味します。b：c | xは &lt;code&gt;a ? b : (c | x)&lt;/code&gt; として解析されます b：（c | x）。それにもかかわらず、いくつかの理由から、パイプ演算子は、 &lt;code&gt;?:&lt;/code&gt; の第1オペランドと第2オペランドに括弧がないと使用できません。3番目のオペランドにも括弧を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ed50cd1104edcdf07f478c9622d53824cc197dcf" translate="yes" xml:space="preserve">
          <source>The pipe operator passes the result of an expression on the left to a pipe function on the right.</source>
          <target state="translated">パイプ演算子は、左の式の結果を右のパイプ関数に渡します。</target>
        </trans-unit>
        <trans-unit id="8eb7ba48d7c30018b592c2a263ffe9de1745ef67" translate="yes" xml:space="preserve">
          <source>The pipes discussed earlier in this page are implemented with pure functions. The built-in &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; is a pure pipe with a pure function implementation. So are the &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; and &lt;code&gt;FlyingHeroesPipe&lt;/code&gt;. A few steps back, you reviewed the &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;&amp;mdash;an impure pipe with a pure function.</source>
          <target state="translated">このページで前述したパイプは、純粋な関数で実装されています。組み込みの &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; は、純粋な関数を実装した純粋なパイプです。だから、ある &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; と &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 。数ステップ後、 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; (純粋な関数を含む不純なパイプ）を確認しました。</target>
        </trans-unit>
        <trans-unit id="120783f4944d7609420e4fa2d8de1cd7b96a2fd4" translate="yes" xml:space="preserve">
          <source>The popup should stay open, even when switching between pages in the application, until the user closes it by sending the message or canceling. Clearly you can't put the popup in the same outlet as the other pages.</source>
          <target state="translated">ポップアップは、アプリケーション内のページを切り替えても、ユーザーがメッセージを送信するかキャンセルするかして閉じるまで開いたままにしておく必要があります。明らかに、ポップアップを他のページと同じコンセントに置くことはできません。</target>
        </trans-unit>
        <trans-unit id="bfe8a90e0b39cf0e03648ad7ceb8f68c1e9609e0" translate="yes" xml:space="preserve">
          <source>The port to use to serve the application.</source>
          <target state="translated">アプリケーションにサービスを提供するために使用するポート。</target>
        </trans-unit>
        <trans-unit id="d900c6fbbdec6ccc354680413a57b4ab661e72cc" translate="yes" xml:space="preserve">
          <source>The practice of cloning a request to set new headers is so common that there's a &lt;code&gt;setHeaders&lt;/code&gt; shortcut for it:</source>
          <target state="translated">新しいヘッダーを設定するリクエストのクローンを作成する習慣は非常に一般的で、そのための &lt;code&gt;setHeaders&lt;/code&gt; ショートカットがあります。</target>
        </trans-unit>
        <trans-unit id="d79f7ddd3370cdaec456ab22eea48dab91ad8972" translate="yes" xml:space="preserve">
          <source>The practices described in this document apply to Angular 2.0 and later. If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">このドキュメントで説明されているプラ​​クティスは、Angular 2.0以降に適用されます。現在AngularJSを使用している場合は&lt;a href=&quot;upgrade&quot;&gt;、AngularJSからのアップグレードを&lt;/a&gt;参照してください。&lt;em&gt;AngularJS&lt;/em&gt;は、Angularのすべてのv1.xバージョンの名前です。</target>
        </trans-unit>
        <trans-unit id="1b61f5ed114256e63478f78b9527841ff42f1f55" translate="yes" xml:space="preserve">
          <source>The predicate is any method that takes a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns a &lt;em&gt;truthy&lt;/em&gt; value. The following example finds all &lt;code&gt;DebugElements&lt;/code&gt; with a reference to a template local variable named &quot;content&quot;:</source>
          <target state="translated">述語は、 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; を取り、&lt;em&gt;真の&lt;/em&gt;値を返す任意のメソッドです。次の例では、「content」という名前のテンプレートローカル変数への参照を持つすべての &lt;code&gt;DebugElements&lt;/code&gt; を検索します。</target>
        </trans-unit>
        <trans-unit id="ce3e8a27555504e35c1b0cf83f429a0f13cb6911" translate="yes" xml:space="preserve">
          <source>The preemptive error message tells you to compile explicitly with &lt;code&gt;compileComponents()&lt;/code&gt;.</source>
          <target state="translated">プリエンプティブエラーメッセージは、 &lt;code&gt;compileComponents()&lt;/code&gt; を使用して明示的にコンパイルするように指示します。</target>
        </trans-unit>
        <trans-unit id="531aa0c92c5d9b66edd1abb9d99a1c78f864e5f1" translate="yes" xml:space="preserve">
          <source>The preferred solution is to add a &lt;code&gt;redirect&lt;/code&gt; route that translates the initial relative URL (&lt;code&gt;''&lt;/code&gt;) to the desired default path (&lt;code&gt;/heroes&lt;/code&gt;). The browser address bar shows &lt;code&gt;.../heroes&lt;/code&gt; as if you'd navigated there directly.</source>
          <target state="translated">推奨される解決策は、初期相対URL（ &lt;code&gt;''&lt;/code&gt; ）を目的のデフォルトパス（ &lt;code&gt;/heroes&lt;/code&gt; ）に変換する &lt;code&gt;redirect&lt;/code&gt; ルートを追加することです。ブラウザのアドレスバーに &lt;code&gt;.../heroes&lt;/code&gt; が表示され、そこに直接移動したように見えます。</target>
        </trans-unit>
        <trans-unit id="323804b4601311b642368194508cfb069c1a6100" translate="yes" xml:space="preserve">
          <source>The preferred way to configure the strategy is to add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">戦略を構成するための推奨される方法は、 &lt;code&gt;index.html&lt;/code&gt; の &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt;要素&lt;/a&gt;タグを追加することです。</target>
        </trans-unit>
        <trans-unit id="be94b295da6b6dfbe7f415ce1a95d804f5cc29c3" translate="yes" xml:space="preserve">
          <source>The preferred way to un-ignore a file is to update the &lt;code&gt;content/examples/.gitignore&lt;/code&gt; like this:</source>
          <target state="translated">ファイルの無視を &lt;code&gt;content/examples/.gitignore&lt;/code&gt; する好ましい方法は、次のようにcontent / examples / .gitignoreを更新することです：</target>
        </trans-unit>
        <trans-unit id="1f0086cdbedbb14fe8c9bfa9cacc9506b54363c6" translate="yes" xml:space="preserve">
          <source>The prefix to apply to generated selectors for the initial project.</source>
          <target state="translated">最初のプロジェクトで生成されたセレクタに適用する接頭辞。</target>
        </trans-unit>
        <trans-unit id="25c273d85b73af2578dc0a29b3ba9b91dc63aba8" translate="yes" xml:space="preserve">
          <source>The prefix to apply to the generated component selector.</source>
          <target state="translated">生成されたコンポーネントセレクタに適用する接頭辞。</target>
        </trans-unit>
        <trans-unit id="cfd2a19c32615eb586fdc1467f3daf305549c48a" translate="yes" xml:space="preserve">
          <source>The preloader optimistically loads all router configurations to make navigations into lazily-loaded sections of the application faster.</source>
          <target state="translated">プリローダは、楽観的にすべてのルータ設定をロードして、アプリケーションのレイジーロードされたセクションへのナビゲートを高速化します。</target>
        </trans-unit>
        <trans-unit id="f42acc2b5381961d93f1b9bb1b38efec3174a5c2" translate="yes" xml:space="preserve">
          <source>The preloader runs in the background. When the router bootstraps, the preloader starts listening to all navigation events. After every such event, the preloader will check if any configurations can be loaded lazily.</source>
          <target state="translated">プリローダはバックグラウンドで動作します。ルータが起動すると、プリローダはすべてのナビゲーションイベントをリッスンし始めます。そのようなイベントが発生するたびに、プリローダは、任意の設定が怠惰にロードできるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="5d55f652f32922a327beff0bc5b2217e949bdf3d" translate="yes" xml:space="preserve">
          <source>The presence of &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tags in the component's template.</source>
          <target state="translated">コンポーネントのテンプレート内の &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; タグの存在。</target>
        </trans-unit>
        <trans-unit id="00d3e678b5578ba56bc0d2cfcaf26815fef02171" translate="yes" xml:space="preserve">
          <source>The presence of the implicit template object has implications for the nesting of structural directives. For more on this subject, see &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">暗黙のテンプレートオブジェクトの存在は、構造ディレクティブのネストに影響します。この問題の詳細については、&lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;構造指令を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b42061155850ee530a76aac5296dde7e21feb2b3" translate="yes" xml:space="preserve">
          <source>The presence of this method is a signal to the Ivy template type-check compiler that the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; structural directive renders its template with a specific context type.</source>
          <target state="translated">このメソッドの存在は、 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 構造ディレクティブが特定のコンテキストタイプでテンプレートをレンダリングすることをIvyテンプレートタイプチェックコンパイラに通知します。</target>
        </trans-unit>
        <trans-unit id="212d838a9ee4a99758a2a681d1aa10ca58ec1f2c" translate="yes" xml:space="preserve">
          <source>The presence of this method is a signal to the Ivy template type-check compiler that the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; structural directive renders its template with a specific context type.</source>
          <target state="translated">このメソッドの存在は、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 構造ディレクティブが特定のコンテキストタイプでテンプレートをレンダリングすることをIvyテンプレートタイプチェックコンパイラに通知します。</target>
        </trans-unit>
        <trans-unit id="86f41d9e1229109e3648daa0169e96c673c401bf" translate="yes" xml:space="preserve">
          <source>The presence of this static field is a signal to the Ivy template type check compiler that when the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; structural directive renders its template, the type of the expression bound to &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; should be narrowed in some way. For &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, the binding expression itself is used to narrow its type, which allows the strictNullChecks feature of TypeScript to work with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この静的フィールドの存在は、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 構造ディレクティブがテンプレートをレンダリングするときに、ngIfにバインドされた式のタイプを何らかの方法で狭める必要があるというIvyテンプレートタイプチェックコンパイラーへの &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; です。ため &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 、バインディング式自体はで動作する活字体のstrictNullChecks機能を可能にする、その種類、狭めるために使用される &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="d3d52fcf10501054e6ada11540d5b2872f70a568" translate="yes" xml:space="preserve">
          <source>The preview pane immediately updates to display the name of each product in the list.</source>
          <target state="translated">プレビューペインは即座に更新され、リスト内の各商品名が表示されます。</target>
        </trans-unit>
        <trans-unit id="b63f811b9f449d96dbde8ef1bdf22a1122a338c0" translate="yes" xml:space="preserve">
          <source>The preview pane on the right shows the starting state of the sample Angular app. It defines a frame with a top bar (containing the store name and checkout icon) and the title for a product list (which will be populated and dynamically updated with data from the application).</source>
          <target state="translated">右側のプレビューペインはサンプルのAngularアプリの起動状態を示しています。トップバー(店名とチェックアウトアイコンを含む)と商品リストのタイトル(アプリケーションからのデータを使って動的に更新されます)を持つフレームを定義しています。</target>
        </trans-unit>
        <trans-unit id="e48d8699ea4367c454a0431ca00856d48e5fe151" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;TwainComponent&lt;/code&gt; tests simulated an asynchronous observable response from the &lt;code&gt;TwainService&lt;/code&gt; with the &lt;code&gt;asyncData&lt;/code&gt; and &lt;code&gt;asyncError&lt;/code&gt; utilities.</source>
          <target state="translated">以前の &lt;code&gt;TwainComponent&lt;/code&gt; テストは、 &lt;code&gt;asyncData&lt;/code&gt; および &lt;code&gt;asyncError&lt;/code&gt; ユーティリティを &lt;code&gt;TwainService&lt;/code&gt; して、TwainServiceからの非同期の監視可能な応答をシミュレートしました。</target>
        </trans-unit>
        <trans-unit id="5364db2c3b6e95db6ec36a33c11635ccee48e801" translate="yes" xml:space="preserve">
          <source>The previous &lt;em&gt;Hero of the Month&lt;/em&gt; example used the &lt;code&gt;MinimalLogger&lt;/code&gt; class as the token for a provider of &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">前の&lt;em&gt;ヒーロー・オブ・ザ・マンスの&lt;/em&gt;例では、 &lt;code&gt;MinimalLogger&lt;/code&gt; クラスを &lt;code&gt;LoggerService&lt;/code&gt; のプロバイダーのトークンとして使用しました。</target>
        </trans-unit>
        <trans-unit id="ab5d9f1002775378705c23acd28f52fb378eb33d" translate="yes" xml:space="preserve">
          <source>The previous example presents such a name collision. The component has a &lt;code&gt;customer&lt;/code&gt; property and the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; defines a &lt;code&gt;customer&lt;/code&gt; template variable.</source>
          <target state="translated">前の例は、このような名前の衝突を示しています。コンポーネントには &lt;code&gt;customer&lt;/code&gt; プロパティがあり、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;customer&lt;/code&gt; テンプレート変数を定義します。</target>
        </trans-unit>
        <trans-unit id="3ec517832673bf93688f5797ba759fb5bcbd4451" translate="yes" xml:space="preserve">
          <source>The previous page showed how to &lt;a href=&quot;displaying-data&quot;&gt;display data&lt;/a&gt;. This page demonstrated event binding techniques.</source>
          <target state="translated">前のページでは、&lt;a href=&quot;displaying-data&quot;&gt;データの表示&lt;/a&gt;方法を示しました。このページでは、イベントバインディング手法を示しました。</target>
        </trans-unit>
        <trans-unit id="be70e2fb63cc0bc0498435ac852b45171caea274" translate="yes" xml:space="preserve">
          <source>The previous section features a simple two-state transition. Now create an animation with multiple steps run in sequence using &lt;em&gt;keyframes&lt;/em&gt;.</source>
          <target state="translated">前のセクションでは、単純な2つの状態の遷移について説明します。次に、&lt;em&gt;キーフレーム&lt;/em&gt;を使用して複数のステップを順番に実行するアニメーションを作成します。</target>
        </trans-unit>
        <trans-unit id="40f4c684187ee76e174e3c81ad8531be7d342ffe" translate="yes" xml:space="preserve">
          <source>The previous sections of this guide referred to RxJS &lt;code&gt;Observables&lt;/code&gt; and operators such as &lt;code&gt;catchError&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt;. You will encounter more RxJS artifacts as you continue below.</source>
          <target state="translated">このガイドの前のセクションでは、RxJS &lt;code&gt;Observables&lt;/code&gt; と、 &lt;code&gt;catchError&lt;/code&gt; や &lt;code&gt;retry&lt;/code&gt; などの演算子について言及しました。以下を続行すると、RxJSアーティファクトがさらに発生します。</target>
        </trans-unit>
        <trans-unit id="36939dd7e21e25efe97977bcc704881e41916a95" translate="yes" xml:space="preserve">
          <source>The previous simple example showed passing in a string. To pass in an object, the syntax and thinking are the same.</source>
          <target state="translated">先ほどの簡単な例では、文字列を渡すことを示しました。オブジェクトを渡すには、構文も考え方も同じです。</target>
        </trans-unit>
        <trans-unit id="56f2a62246eea5c3c9cdaa4780c32f7e493575ed" translate="yes" xml:space="preserve">
          <source>The previous tests played the role of the host &lt;code&gt;DashboardComponent&lt;/code&gt; themselves. But does the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; work correctly when properly data-bound to a host component?</source>
          <target state="translated">以前のテストは、ホスト &lt;code&gt;DashboardComponent&lt;/code&gt; 自体の役割を果たしました。しかし、ホストコンポーネントに適切にデータバインドされている場合、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; は正しく機能しますか？</target>
        </trans-unit>
        <trans-unit id="5bf3abe312936fd7f8c715b3c6575f72f4cc1b47" translate="yes" xml:space="preserve">
          <source>The previous value of the attribute.</source>
          <target state="translated">属性の前の値。</target>
        </trans-unit>
        <trans-unit id="1dfa467560796beba789d3214a05abeb3f64d6a8" translate="yes" xml:space="preserve">
          <source>The previous version assigns an array of heroes to the component's &lt;code&gt;heroes&lt;/code&gt; property. The assignment occurs &lt;em&gt;synchronously&lt;/em&gt;, as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.</source>
          <target state="translated">以前のバージョンでは、ヒーローの配列をコンポーネントの &lt;code&gt;heroes&lt;/code&gt; プロパティに割り当てていました。割り当ては&lt;em&gt;同期的&lt;/em&gt;に行われます。まるでサーバーがヒーローを瞬時に返すか、サーバーの応答を待っている間にブラウザーがUIをフリーズさせるかのようです。</target>
        </trans-unit>
        <trans-unit id="72231ecb9078c4b31429d32906f226cb03e9377c" translate="yes" xml:space="preserve">
          <source>The primary navigation part has changed; the secondary route is the same.</source>
          <target state="translated">一次航法部分が変更になりましたが、二次航法は同じです。</target>
        </trans-unit>
        <trans-unit id="3c9d8bf0259e3eb63f943c6785b8b6a011914253" translate="yes" xml:space="preserve">
          <source>The primary routing outlet.</source>
          <target state="translated">主なルーティングアウトレット。</target>
        </trans-unit>
        <trans-unit id="486f9745b09ef70dd0d395c0292014660ec3a6b7" translate="yes" xml:space="preserve">
          <source>The process of &lt;code&gt;HeroService&lt;/code&gt; injection looks something like this.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; インジェクションのプロセスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f2e3b6f36c0c22bc94631be9ba69dd603b5d41ff" translate="yes" xml:space="preserve">
          <source>The product details component already uses the cart service (&lt;code&gt;CartService&lt;/code&gt;) to add products to the cart.</source>
          <target state="translated">商品詳細コンポーネントは、カートサービス（ &lt;code&gt;CartService&lt;/code&gt; ）を使用して商品をカートに追加しています。</target>
        </trans-unit>
        <trans-unit id="063dcedd30b66eda148abcead7f2283490fe96f9" translate="yes" xml:space="preserve">
          <source>The product details component already uses the cart service to add products to the cart.</source>
          <target state="translated">商品詳細コンポーネントは、すでにカートサービスを使用してカートに商品を追加しています。</target>
        </trans-unit>
        <trans-unit id="5fc59453ebfb71879792adaabb0b4d604e811daa" translate="yes" xml:space="preserve">
          <source>The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. This section shows you how to use the Angular Router to combine the &lt;code&gt;products&lt;/code&gt; data and route information to display the specific details for each product.</source>
          <target state="translated">製品詳細コンポーネントは、各製品の表示を処理します。Angular Routerは、ブラウザーのURLと定義されたルートに基づいてコンポーネントを表示します。このセクションでは、Angular Routerを使用して &lt;code&gt;products&lt;/code&gt; データとルート情報を組み合わせ、各製品の特定の詳細を表示する方法を示します。</target>
        </trans-unit>
        <trans-unit id="8021e87038c33d08539a200b856644645d4e9ce1" translate="yes" xml:space="preserve">
          <source>The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. You'll use the Angular Router to combine the &lt;code&gt;products&lt;/code&gt; data and route information to display the specific details for each product.</source>
          <target state="translated">商品詳細コンポーネントは、各商品の表示を処理します。Angularルーターは、ブラウザーのURLと定義されたルートに基づいてコンポーネントを表示します。Angularルーターを使用して、 &lt;code&gt;products&lt;/code&gt; データとルート情報を組み合わせ、各製品の特定の詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="7eb6cfe553c75eff3acf81ec96aea3ac0265c8bb" translate="yes" xml:space="preserve">
          <source>The project also contains some animations. You won't upgrade them in this version of the guide. Turn to the &lt;a href=&quot;animations&quot;&gt;Angular animations&lt;/a&gt; guide to learn about that.</source>
          <target state="translated">プロジェクトにはいくつかのアニメーションも含まれています。このバージョンのガイドではそれらをアップグレードしません。回す&lt;a href=&quot;animations&quot;&gt;角度アニメーションの&lt;/a&gt;ことを学ぶためのガイド。</target>
        </trans-unit>
        <trans-unit id="2939b42883b8e20eda57b1ac4db86db02bffcfea" translate="yes" xml:space="preserve">
          <source>The project pane on the left shows the source files that make up the application, including all of the infrastructure and configuration files. The currently selected file shows up in the editor pane in the middle.</source>
          <target state="translated">左側のプロジェクトペインには、すべてのインフラストラクチャと設定ファイルを含む、アプリケーションを構成するソースファイルが表示されます。現在選択されているファイルは、中央のエディタペインに表示されます。</target>
        </trans-unit>
        <trans-unit id="cb22493e5247fcf1b73099aacb2b51c7edb8e5bf" translate="yes" xml:space="preserve">
          <source>The project you create with the CLI is immediately ready to test. Just run the &lt;a href=&quot;cli/test&quot;&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/a&gt; CLI command:</source>
          <target state="translated">CLIで作成したプロジェクトは、すぐにテストする準備ができています。&lt;a href=&quot;cli/test&quot;&gt; &lt;code&gt;ng test&lt;/code&gt; &lt;/a&gt; CLIコマンドを実行するだけです：</target>
        </trans-unit>
        <trans-unit id="a1cfa2d4e83385878d411d839ce7a7cdbd9c013f" translate="yes" xml:space="preserve">
          <source>The projected content of &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; sees the 🐳 (whale), not the 🐶 (puppy), because the 🐶 (puppy) is inside the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; can only see the 🐶 (puppy) if it is also within the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; の投影されたコンテンツは、🐶（子犬）ではなく🐳（クジラ）を認識します。これは、the（子犬）が &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内にあるためです。 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; それは内にある場合にのみ🐶（子犬）を見ることができます &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9686155e75a6fd586dab49af5a597ad88553139" translate="yes" xml:space="preserve">
          <source>The projects below are not associated with a particular Angular version. We'll release them on completion, and they will be part of a specific version based on our release schedule, following semantic versioning. For example, features are released in the next minor after they are complete, or the next major if they include breaking changes.</source>
          <target state="translated">以下のプロジェクトは特定のAngularのバージョンとは関係ありません。これらのプロジェクトは完成した時点でリリースされ、セマンティックバージョニングに従ってリリーススケジュールに基づいて特定のバージョンに含まれることになります。例えば、機能は完成後に次のマイナーでリリースされますし、変更点があれば次のメジャーでリリースされます。</target>
        </trans-unit>
        <trans-unit id="6e36792ea583ac976f37bafa9de7316d9520835d" translate="yes" xml:space="preserve">
          <source>The prompt runtime automatically validates the provided response against the constraints provided in the JSON schema. If the value is not acceptable, the user is prompted for a new value. This ensures that any values passed to the schematic meet the expectations of the schematic's implementation, so that you do not need to add additional checks within the schematic's code.</source>
          <target state="translated">プロンプトランタイムは、提供されたレスポンスをJSONスキーマで提供された制約に対して自動的に検証します。値が受け入れられない場合は、新しい値の入力を求められます。これにより、回路図に渡された値が回路図の実装の期待値を満たしていることが保証されるため、回路図のコード内で追加のチェックを行う必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="7cf0ecec69996d92571eb4e4bd556aced4c3efe0" translate="yes" xml:space="preserve">
          <source>The properties of an &lt;code&gt;$event&lt;/code&gt; object vary depending on the type of DOM event. For example, a mouse event includes different information than an input box editing event.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; オブジェクトのプロパティは、DOMイベントのタイプによって異なります。たとえば、マウスイベントには、入力ボックス編集イベントとは異なる情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="97a76f1a52bc3c879b21278ea18563262a1e410d" translate="yes" xml:space="preserve">
          <source>The properties of the &lt;code&gt;nativeElement&lt;/code&gt; depend upon the runtime environment. You could be running these tests on a &lt;em&gt;non-browser&lt;/em&gt; platform that doesn't have a DOM or whose DOM-emulation doesn't support the full &lt;code&gt;HTMLElement&lt;/code&gt; API.</source>
          <target state="translated">&lt;code&gt;nativeElement&lt;/code&gt; のプロパティは、ランタイム環境によって異なります。これらのテストは、DOMがないか、DOMエミュレーションが完全な &lt;code&gt;HTMLElement&lt;/code&gt; APIをサポートしていない&lt;em&gt;ブラウザー以外の&lt;/em&gt;プラットフォームで実行している可能性があります。</target>
        </trans-unit>
        <trans-unit id="c04dcd4d9e3fdfb316a49d102b3473f76bd1e0d6" translate="yes" xml:space="preserve">
          <source>The property name.</source>
          <target state="translated">物件名です。</target>
        </trans-unit>
        <trans-unit id="7df460d20d043603559a67d7974d835f9f0eed3f" translate="yes" xml:space="preserve">
          <source>The provided classes are added to the element when the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; becomes the current active route.</source>
          <target state="translated">提供されたクラスは、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; が現在アクティブなルートになるときに要素に追加されます。</target>
        </trans-unit>
        <trans-unit id="d85cdc71036be543ee35d535e12c877802678983" translate="yes" xml:space="preserve">
          <source>The provided functions are injected at application startup and executed during app initialization. If any of these functions returns a Promise, initialization does not complete until the Promise is resolved.</source>
          <target state="translated">提供される関数は、アプリケーションの起動時に注入され、アプリの初期化時に実行されます。これらの関数のいずれかがプロミスを返した場合、プロミスが解決されるまで初期化は完了しません。</target>
        </trans-unit>
        <trans-unit id="06f0a18f14adb7eed8c7062f18e58fdc76b4204f" translate="yes" xml:space="preserve">
          <source>The provided sample application creates the &lt;code&gt;Hero&lt;/code&gt; class which defines the data model reflected in the form.</source>
          <target state="translated">提供されているサンプルアプリケーションは、フォームに反映されるデータモデルを定義する &lt;code&gt;Hero&lt;/code&gt; クラスを作成します。</target>
        </trans-unit>
        <trans-unit id="5b4910a760b25a51893dd6345e06c7f8b33600d7" translate="yes" xml:space="preserve">
          <source>The provider factory function (returned by &lt;code&gt;runnersUpFactory()&lt;/code&gt;) returns the actual dependency object, the string of names.</source>
          <target state="translated">プロバイダーファクトリー関数（ &lt;code&gt;runnersUpFactory()&lt;/code&gt; によって返される）は、実際の依存関係オブジェクトである名前の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b4c17117d8a92a8817f56060d61fb1bd4c763cc5" translate="yes" xml:space="preserve">
          <source>The provider object can have a third option, &lt;code&gt;multi: true&lt;/code&gt;, which you can use with &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; to register multiple handlers for the provide event.</source>
          <target state="translated">プロバイダーオブジェクトには3番目のオプション &lt;code&gt;multi: true&lt;/code&gt; を設定できます。このオプションを &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; と一緒に使用して、provideイベントの複数のハンドラーを登録できます。</target>
        </trans-unit>
        <trans-unit id="02b3d62f3fe1096d970290346afe693026ae8245" translate="yes" xml:space="preserve">
          <source>The providers array is where you list the services the app needs. When you list services here, they are available app-wide. You can scope them when using feature modules and lazy loading. For more information, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">プロバイダー配列は、アプリが必要とするサービスをリストする場所です。ここにサービスをリストすると、アプリ全体で利用できます。機能モジュールと遅延読み込みを使用する場合は、スコープを設定できます。詳細については、「&lt;a href=&quot;providers&quot;&gt;プロバイダー&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="dbfe5beb656c4962d3cf4b97d176386634f50d45" translate="yes" xml:space="preserve">
          <source>The public API for schematics defines classes that represent the basic concepts.</source>
          <target state="translated">回路図の公開APIでは、基本的な概念を表すクラスを定義しています。</target>
        </trans-unit>
        <trans-unit id="de6f6ac52bec399fd6660c2b4b054e9a39440b12" translate="yes" xml:space="preserve">
          <source>The public API for your library is maintained in the &lt;code&gt;public-api.ts&lt;/code&gt; file in your library folder. Anything exported from this file is made public when your library is imported into an application. Use an NgModule to expose services and components.</source>
          <target state="translated">ライブラリのパブリックAPI は、ライブラリフォルダーの &lt;code&gt;public-api.ts&lt;/code&gt; ファイルで管理されています。このファイルからエクスポートされたものはすべて、ライブラリがアプリケーションにインポートされるときに公開されます。NgModuleを使用して、サービスとコンポーネントを公開します。</target>
        </trans-unit>
        <trans-unit id="48f569ff47916066fbb6670275a32be0c08ff2bc" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;&lt;a href=&quot;../api/core/wrappedvalue&quot;&gt;WrappedValue&lt;/a&gt;&lt;/code&gt; is to allow the same object instance to be treated as different for the purposes of change detection. It is commonly used with the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe in the case where the &lt;code&gt;Observable&lt;/code&gt; produces the same instance of the value.</source>
          <target state="translated">目的 &lt;code&gt;&lt;a href=&quot;../api/core/wrappedvalue&quot;&gt;WrappedValue&lt;/a&gt;&lt;/code&gt; は同じオブジェクト・インスタンスが変化検出の目的のために異なるように処理することができるようにすることです。これは通常、 &lt;code&gt;Observable&lt;/code&gt; が値の同じインスタンスを生成する場合に &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプで使用されます。</target>
        </trans-unit>
        <trans-unit id="d054d0b6719a9e60f44011ba13eb8f4c3e083451" translate="yes" xml:space="preserve">
          <source>The query parameters shared by all the routes</source>
          <target state="translated">すべてのルートで共有されるクエリパラメータ</target>
        </trans-unit>
        <trans-unit id="4231089991bd8ff6dd16d350b35cc226cbd300f3" translate="yes" xml:space="preserve">
          <source>The query params of the URL</source>
          <target state="translated">URLのクエリパラメータ</target>
        </trans-unit>
        <trans-unit id="2e3c5b3a02d06abe266f2cfa14e56837b6f3527d" translate="yes" xml:space="preserve">
          <source>The query results to store</source>
          <target state="translated">保存するクエリの結果</target>
        </trans-unit>
        <trans-unit id="ad7aeea31c0c6f526df9d9af5712f3c533c2d889" translate="yes" xml:space="preserve">
          <source>The query returns &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; wrappers around the matching elements.</source>
          <target state="translated">クエリは、一致する要素の周りの &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; ラッパーを返します。</target>
        </trans-unit>
        <trans-unit id="420962f6ff64d28c5e044d0cc2355bfc2ea5030a" translate="yes" xml:space="preserve">
          <source>The query returns a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; for the paragraph.</source>
          <target state="translated">クエリは、 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d9af7bb5d4e8ad84a327ab8455d86b884cbad452" translate="yes" xml:space="preserve">
          <source>The quick-info feature allows you to hover to see where components, directives, modules, and so on come from. You can then click &quot;Go to definition&quot; or press F12 to go directly to the definition.</source>
          <target state="translated">クイックインフォ機能では、コンポーネント、ディレクティブ、モジュールなどがどこから来ているのかをホバリングして確認することができます。そして、&quot;定義に行く &quot;をクリックするか、F12を押して直接定義に行くことができます。</target>
        </trans-unit>
        <trans-unit id="50926fb8f24e0f7a0c8fd99de16fa0fdad121aad" translate="yes" xml:space="preserve">
          <source>The reader requests a page by its Page URL. The doc viewer fetches the corresponding JSON file, interprets it, and renders it as fully-formed HTML page.</source>
          <target state="translated">読み手はページのURLを指定してページを要求します。docビューアは、対応するJSONファイルを取得し、それを解釈し、完全なHTMLページとしてレンダリングします。</target>
        </trans-unit>
        <trans-unit id="161d1b9d874c147636f786db6462e2b921a846dc" translate="yes" xml:space="preserve">
          <source>The real &lt;code&gt;RouterLinkDirective&lt;/code&gt; is quite complicated and entangled with other components and directives of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. It requires challenging setup to mock and use in tests.</source>
          <target state="translated">実際の &lt;code&gt;RouterLinkDirective&lt;/code&gt; は非常に複雑で、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; の他のコンポーネントやディレクティブと絡み合っています。テストでモックして使用するには、難しい設定が必要です。</target>
        </trans-unit>
        <trans-unit id="ecdc6110a6ce9753c3654ca5a8b42bdbffa31c5a" translate="yes" xml:space="preserve">
          <source>The reason Angular ignores the changed array element is that the &lt;em&gt;reference&lt;/em&gt; to the array hasn't changed. Since the array is the same, Angular does not update the display.</source>
          <target state="translated">Angularが変更された配列要素を無視する理由は、配列への&lt;em&gt;参照&lt;/em&gt;が変更されていないためです。配列は同じであるため、Angularは表示を更新しません。</target>
        </trans-unit>
        <trans-unit id="7ceba990815347e65fc419a07143830d7018fac5" translate="yes" xml:space="preserve">
          <source>The reason is &lt;em&gt;tree shaking&lt;/em&gt;. For production apps you want to load the smallest, fastest code possible. The code should contain only the classes that you actually need. It should exclude a component that's never used, whether or not that component is declared.</source>
          <target state="translated">その理由は、&lt;em&gt;木を揺さぶること&lt;/em&gt;です。プロダクションアプリでは、可能な限り最小かつ最速のコードをロードします。コードには、実際に必要なクラスのみを含める必要があります。そのコンポーネントが宣言されているかどうかに関係なく、使用されていないコンポーネントを除外する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a078f105d135e610ac0d0702bdd6e7a40c0fae9" translate="yes" xml:space="preserve">
          <source>The reason is simplicity. Structural directives can do complex things with the host element and its descendents. When two directives lay claim to the same host element, which one takes precedence? Which should go first, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;NgFor&lt;/code&gt;? Can the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; cancel the effect of the &lt;code&gt;NgFor&lt;/code&gt;? If so (and it seems like it should be so), how should Angular generalize the ability to cancel for other structural directives?</source>
          <target state="translated">理由は単純さです。構造ディレクティブは、ホスト要素とその子孫で複雑なことを実行できます。2つのディレクティブが同じホスト要素を要求するとき、どちらが優先されますか？ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; とNgForのどちらを最初に実行する必要が &lt;code&gt;NgFor&lt;/code&gt; ますか？することができます &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; はの効果キャンセル &lt;code&gt;NgFor&lt;/code&gt; を？そうである場合（そうであるように思われる場合）、Angularは他の構造的ディレクティブをキャンセルする機能をどのように一般化する必要がありますか？</target>
        </trans-unit>
        <trans-unit id="ea64c30fa849f9f4bda29f5d5bb7b6758b713072" translate="yes" xml:space="preserve">
          <source>The recently-developed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; Web Platform feature is currently supported natively in a number of browsers.</source>
          <target state="translated">最近開発された&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素の&lt;/a&gt;Webプラットフォーム機能は、現在、多くのブラウザーでネイティブにサポートされています。</target>
        </trans-unit>
        <trans-unit id="fafb040a487d878e72e67cd8a770eb670b009039" translate="yes" xml:space="preserve">
          <source>The recently-developed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; Web Platform feature is currently supported natively in a number of browsers. Support is pending or planned in other browsers.</source>
          <target state="translated">最近開発された&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素&lt;/a&gt; Webプラットフォーム機能は、現在いくつかのブラウザーでネイティブにサポートされています。他のブラウザでのサポートは保留中または計画中です。</target>
        </trans-unit>
        <trans-unit id="bae2bdba102ddc09fc48c1dbc2f8e6e630be2a64" translate="yes" xml:space="preserve">
          <source>The recommended solution is to pass the full request URL to the &lt;code&gt;options&lt;/code&gt; argument of &lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule()&lt;/a&gt; or &lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory()&lt;/a&gt; (depending on what you use to render &lt;code&gt;AppServerModule&lt;/code&gt; on the server). This option is the least intrusive as it does not require any changes to the app. Here, &quot;request URL&quot; refers to the URL of the request as a response to which the app is being rendered on the server. For example, if the client requested &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt; and you are rendering the app on the server to respond to that request, &lt;code&gt;options.url&lt;/code&gt; should be set to &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt;.</source>
          <target state="translated">推奨される解決策は、完全な要求URLを&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule（）&lt;/a&gt;または&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory（）&lt;/a&gt;の &lt;code&gt;options&lt;/code&gt; 引数に渡すことです（サーバーで &lt;code&gt;AppServerModule&lt;/code&gt; をレンダリングするために使用するものによって異なります）。このオプションは、アプリに変更を加える必要がないため、最も邪魔になりません。ここで、「リクエストURL」とは、アプリがサーバー上でレンダリングされる応答としてのリクエストのURLを指します。たとえば、クライアントが &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt; をリクエストし、そのリクエストに応答するようにサーバー上でアプリをレンダリングする場合、 &lt;code&gt;options.url&lt;/code&gt; を &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt; に設定する必要があります。ダッシュボード。</target>
        </trans-unit>
        <trans-unit id="fa75dd5d0bada1f47ade184135ab747fbf80a41c" translate="yes" xml:space="preserve">
          <source>The redirect path can be relative, as shown in this example, or absolute. If we change the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; value in the example to the absolute URL segment '/user/:name', the result URL is also absolute, '/user/jim'.</source>
          <target state="translated">この例に示すように、リダイレクトパスは相対パスでも絶対パスでもかまいません。この例の &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 値を絶対URLセグメント '/ user /：name'に変更すると、結果のURLも絶対 '/ user / jim'になります。</target>
        </trans-unit>
        <trans-unit id="f32a6895b918b3a1380a339e0611773862b1a3d1" translate="yes" xml:space="preserve">
          <source>The redirect path can be relative, as shown in this example, or absolute. If we change the &lt;code&gt;redirectTo&lt;/code&gt; value in the example to the absolute URL segment '/user/:name', the result URL is also absolute, '/user/jim'.</source>
          <target state="translated">リダイレクトパスは、この例に示すように相対パスにすることも、絶対パスにすることもできます。我々は変更する場合 &lt;code&gt;redirectTo&lt;/code&gt; の絶対URLセグメントに例の値を「/ユーザー/：名」、結果のURLも絶対、「/ユーザー/ジム」です。</target>
        </trans-unit>
        <trans-unit id="ce8f45225aa19c5dcf369c6d23b7264529fa54d7" translate="yes" xml:space="preserve">
          <source>The reference value of itemForm, without the ngForm attribute value, would be the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;. There is, however, a difference between a Component and a Directive in that a &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; will be referenced without specifying the attribute value, and a &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; will not change the implicit reference (that is, the element).</source>
          <target state="translated">itemFormの基準値は、ngForm属性値なし、となり&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;。コンポーネントと指令との差が、ある &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 属性値を指定せずに参照され、 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; （元素）暗黙の参照を変更しないであろうが。</target>
        </trans-unit>
        <trans-unit id="163fc73e89da2b739cc30475016c72000469a778" translate="yes" xml:space="preserve">
          <source>The reference variable&amp;rsquo;s &lt;code&gt;valid&lt;/code&gt; property on input controls to check if a control is valid and show or hide error messages.</source>
          <target state="translated">コントロールが有効かどうかを確認し、エラーメッセージを表示または非表示にするための、入力コントロールの参照変数の &lt;code&gt;valid&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="3e74d5a063ed6ad113dcb0dc04276262826975d9" translate="yes" xml:space="preserve">
          <source>The reference variable&amp;rsquo;s &lt;code&gt;valid&lt;/code&gt; property on input controls to check if a control is valid and show/hide error messages.</source>
          <target state="translated">入力コントロールの参照変数の &lt;code&gt;valid&lt;/code&gt; プロパティ。コントロールが有効かどうかを確認し、エラーメッセージを表示/非表示にします。</target>
        </trans-unit>
        <trans-unit id="8e1c54c7687dd1cbc34b9457b4da8f1141636f2c" translate="yes" xml:space="preserve">
          <source>The registered async validator function for the control</source>
          <target state="translated">コントロールに登録されている非同期バリデータ機能</target>
        </trans-unit>
        <trans-unit id="14569c3edda6f10cb9b8ea1799a88a50904561f7" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a blur event occurs on the input element.</source>
          <target state="translated">入力要素にぼかしイベントが発生したときに呼び出される登録されたコールバック関数。</target>
        </trans-unit>
        <trans-unit id="83a100bf5139d939736b31435c736c0e17e4ef73" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change event occurs on the input element.</source>
          <target state="translated">入力要素に変更イベントが発生したときに呼び出される登録されたコールバック関数です。</target>
        </trans-unit>
        <trans-unit id="8325421c1589c4b1cafcd0c9b1b460010fe4dabd" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change or input event occurs on the input element.</source>
          <target state="translated">入力要素に変更や入力イベントが発生したときに呼び出される登録されたコールバック関数です。</target>
        </trans-unit>
        <trans-unit id="60864d0a7b033aeeb5697aea8e9fe00704ce69b5" translate="yes" xml:space="preserve">
          <source>The registered callback function called when an input event occurs on the input element.</source>
          <target state="translated">入力要素に入力イベントが発生したときに呼び出される登録されたコールバック関数。</target>
        </trans-unit>
        <trans-unit id="3f720157232b77c5ba1d4c879a427fa93efc8bc0" translate="yes" xml:space="preserve">
          <source>The registered synchronous validator function for the control</source>
          <target state="translated">制御用に登録されている同期バリデータ機能</target>
        </trans-unit>
        <trans-unit id="611af0e0b9e0bf773539c9b919be8a53d47c0b03" translate="yes" xml:space="preserve">
          <source>The related &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests will assert that methods of the &lt;code&gt;HeroDetailService&lt;/code&gt; were called by spying on the service methods. Accordingly, the stub implements its methods as spies:</source>
          <target state="translated">関連する &lt;code&gt;HeroDetailComponent&lt;/code&gt; テストは、サービスメソッドをスパイすることによって &lt;code&gt;HeroDetailService&lt;/code&gt; のメソッドが呼び出されたことをアサートします。したがって、スタブはそのメソッドをスパイとして実装します。</target>
        </trans-unit>
        <trans-unit id="0eb0173de0887207bb65b45ebe9f9fe125988a13" translate="yes" xml:space="preserve">
          <source>The relative path or absolute URL of a template file for an Angular component. If provided, do not supply an inline template using &lt;code&gt;template&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントのテンプレートファイルの相対パスまたは絶対URL。提供されている場合、templateを使用してインラインテンプレートを提供しないで &lt;code&gt;template&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2a5f769df13524fc33173a60f95e5ebec2a8cc9" translate="yes" xml:space="preserve">
          <source>The relevant &lt;em&gt;Crisis Center&lt;/em&gt; code for this milestone follows.</source>
          <target state="translated">このマイルストーンに関連する&lt;em&gt;危機センターの&lt;/em&gt;コードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c6d8f146635ec792e8f8c55e052740e83174a7d4" translate="yes" xml:space="preserve">
          <source>The relevant Crisis Center code for this milestone follows.</source>
          <target state="translated">本マイルストーンに該当するクライシスセンターコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0d0deacb390033b07f881710f00f8c4672d1dd5d" translate="yes" xml:space="preserve">
          <source>The relevant part of the URL follows the &lt;code&gt;...&lt;/code&gt;:</source>
          <target state="translated">URLの関連部分は次のとおり &lt;code&gt;...&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fde1ac3dfd43433ca4e661ed9e84a40407308eaf" translate="yes" xml:space="preserve">
          <source>The remainder of this page discusses selected exercises in further detail.</source>
          <target state="translated">このページの残りの部分では、選択した演習についてさらに詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="c8e8b3d7ca0d64b17a2fb3f293951af67e52afb0" translate="yes" xml:space="preserve">
          <source>The remaining tests confirm the logic of the component when the service returns different values. The second test validates the effect of changing the user name. The third test checks that the component displays the proper message when there is no logged-in user.</source>
          <target state="translated">残りのテストでは、サービスが異なる値を返すときのコンポーネントのロジックを確認します。2 番目のテストでは、ユーザー名を変更した場合の効果を検証します。3 番目のテストでは、ログインしたユーザーがいない場合にコンポーネントが適切なメッセージを表示するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d7142c777489862d6522489ad8690b6cad01d02e" translate="yes" xml:space="preserve">
          <source>The repeater matcher relies on AngularJS &lt;code&gt;ng-repeat&lt;/code&gt;</source>
          <target state="translated">リピーターマッチャーはAngularJS &lt;code&gt;ng-repeat&lt;/code&gt; に依存しています</target>
        </trans-unit>
        <trans-unit id="91ad245b7614259a383728070796f36b7c6a8e1a" translate="yes" xml:space="preserve">
          <source>The request body</source>
          <target state="translated">リクエストボディ</target>
        </trans-unit>
        <trans-unit id="8baeab2869311562a541f4781282737e0d643863" translate="yes" xml:space="preserve">
          <source>The request body, or &lt;code&gt;null&lt;/code&gt; if one isn't set.</source>
          <target state="translated">リクエストの本文。設定されていない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6f77845fbe311e08dbeaef52a6fd2daf4e328ed" translate="yes" xml:space="preserve">
          <source>The request object.</source>
          <target state="translated">リクエストオブジェクト。</target>
        </trans-unit>
        <trans-unit id="295297cd89c4bbc0045b1baf52143c439e6a5d78" translate="yes" xml:space="preserve">
          <source>The request was sent out over the wire.</source>
          <target state="translated">電線越しに依頼を出しました。</target>
        </trans-unit>
        <trans-unit id="cc47fc94ef80a1928c330c84f157fee95dfbc73f" translate="yes" xml:space="preserve">
          <source>The requests keep forwarding up until Angular finds an injector that can handle the request or runs out of ancestor &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">Angularがリクエストを処理できるインジェクターを見つけるか、祖先の &lt;code&gt;ElementInjector&lt;/code&gt; を使い果たすまで、リクエストは転送を続けます。</target>
        </trans-unit>
        <trans-unit id="4bca2438c6c78d7f3598583261e82a87e4585f19" translate="yes" xml:space="preserve">
          <source>The required character width.</source>
          <target state="translated">必要な文字幅。</target>
        </trans-unit>
        <trans-unit id="e78685155e9f5bf3ed47c8190c17fafaf81b4db7" translate="yes" xml:space="preserve">
          <source>The required grammatical form.</source>
          <target state="translated">必要な文法形式。</target>
        </trans-unit>
        <trans-unit id="66a6422279a07572ce1f83994a45c30611298f7f" translate="yes" xml:space="preserve">
          <source>The resolver that can retrieve the component factories declared in the &lt;code&gt;entryComponents&lt;/code&gt; property of the module.</source>
          <target state="translated">モジュールの &lt;code&gt;entryComponents&lt;/code&gt; プロパティで宣言されたコンポーネントファクトリを取得できるリゾルバ。</target>
        </trans-unit>
        <trans-unit id="6a56567a9d466e6d132c390ae6771774b8bf936d" translate="yes" xml:space="preserve">
          <source>The resource URL.</source>
          <target state="translated">リソースのURLです。</target>
        </trans-unit>
        <trans-unit id="2806bdfe81615de27dd71c7273cdcf5fec886325" translate="yes" xml:space="preserve">
          <source>The resources to add/update.</source>
          <target state="translated">追加/更新するリソース。</target>
        </trans-unit>
        <trans-unit id="722bde3a779c6b7c44b072db8c9bef73a7dcee92" translate="yes" xml:space="preserve">
          <source>The resources to edit.</source>
          <target state="translated">編集するためのリソース。</target>
        </trans-unit>
        <trans-unit id="b3b51cad36d2295674a88b5feb5f325a8dd9c5d1" translate="yes" xml:space="preserve">
          <source>The response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</source>
          <target state="translated">レスポンスボディは、必要なすべてのデータを返すわけではありません。サーバーは、アプリケーションのワークフローにとって重要な特定の条件を示すために、特別なヘッダやステータスコードを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="9b93e53ea5820a1f628a4de1e5b36ddaf81f432c" translate="yes" xml:space="preserve">
          <source>The response body, or &lt;code&gt;null&lt;/code&gt; if one was not returned.</source>
          <target state="translated">応答の本文。返されなかった場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99668b05017e2aa5e864a17012f39fce4777e24e" translate="yes" xml:space="preserve">
          <source>The response status code and headers were received.</source>
          <target state="translated">応答ステータスコードとヘッダを受信しました。</target>
        </trans-unit>
        <trans-unit id="31138b87e6e07d760fa91a8f35bc7d6cef938655" translate="yes" xml:space="preserve">
          <source>The rest are stubs.</source>
          <target state="translated">残りは半券です。</target>
        </trans-unit>
        <trans-unit id="527a427539693b3f88205ed83bab6a41153d480e" translate="yes" xml:space="preserve">
          <source>The rest of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, including its class attribute, moved inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">クラス属性を含む残りの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素内に移動しました。</target>
        </trans-unit>
        <trans-unit id="c743d737d76a8c6fba14ac64a1884a8a176429a0" translate="yes" xml:space="preserve">
          <source>The rest of the articles in this section specifically address the Angular implementation of service workers.</source>
          <target state="translated">このセクションの残りの記事では、サービスワーカーのAngular実装について具体的に取り上げています。</target>
        </trans-unit>
        <trans-unit id="62158bbbf1c618865ea1d81d423f963b4dce87ef" translate="yes" xml:space="preserve">
          <source>The rest of the file is boilerplate setup code anticipating more advanced tests that &lt;em&gt;might&lt;/em&gt; become necessary if the component evolves into something substantial.</source>
          <target state="translated">ファイルの残りの部分は、コンポーネントが実質的なものに進化した場合に必要になる&lt;em&gt;可能性&lt;/em&gt;がある、より高度なテストを想定した定型のセットアップコードです。</target>
        </trans-unit>
        <trans-unit id="72f013f648fdb7d77ec051dfbd8e0aae42973747" translate="yes" xml:space="preserve">
          <source>The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation. You can review it and download it from the live example.</source>
          <target state="translated">シナリオコードの残りの部分は、ドキュメントの他の場所で学ぶことができる他のAngularの機能やテクニックに依存しています。それをレビューしたり、ライブサンプルからダウンロードしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="9db844629762b7e377da3fb6860ee3d92e73f3e4" translate="yes" xml:space="preserve">
          <source>The result is shown below, with the hero's telephone number from &lt;code&gt;HeroContactComponent&lt;/code&gt; projected above the hero description.</source>
          <target state="translated">結果は次のとおりです &lt;code&gt;HeroContactComponent&lt;/code&gt; からのヒーローの電話番号がヒーローの説明の上に投影されています。</target>
        </trans-unit>
        <trans-unit id="cf49885d2cf1bce6d0595e7a953482bda25b0935" translate="yes" xml:space="preserve">
          <source>The result of an expression might require some transformation before you're ready to use it in a binding. For example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</source>
          <target state="translated">式の結果は、バインディングで使用する前に変換が必要な場合があります。例えば、数値を通貨として表示したり、テキストを大文字に変更したり、リストをフィルタリングしてソートしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="70660d474935bb5c58cc521f6669d3b23f3ad648" translate="yes" xml:space="preserve">
          <source>The result of the expression is passed to the pipe's &lt;code&gt;transform()&lt;/code&gt; method.</source>
          <target state="translated">式の結果は、パイプの &lt;code&gt;transform()&lt;/code&gt; メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="bf135bfcdaf4cfe03aad3aa70f5998ea60da6489" translate="yes" xml:space="preserve">
          <source>The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.</source>
          <target state="translated">このパイプの結果は、入力が突然変異しても再評価されません。変更検出サイクルごとに日付を再フォーマットする必要がないようにするには、日付を不変オブジェクトとして扱い、パイプを再び実行する必要があるときに参照を変更します。</target>
        </trans-unit>
        <trans-unit id="d97171b33cc95fa04a1a197b4ffa2b5984f4d336" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; class is as follows:</source>
          <target state="translated">結果の &lt;code&gt;CartComponent&lt;/code&gt; クラスは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="826ce97508a4661aa985a17e8919e5c33ad0cebf" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; class should look like this:</source>
          <target state="translated">結果の &lt;code&gt;CartComponent&lt;/code&gt; クラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="24a207b68d80e19aed8ce6e6e9b80997323c25b0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; template is as follows:</source>
          <target state="translated">結果の &lt;code&gt;CartComponent&lt;/code&gt; テンプレートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a571031ddb791d5885d8b255dffe7c11b80344d0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">結果の &lt;code&gt;CartComponent&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="abe704b8eceeacf1b67a89d121ecca1aade1a14f" translate="yes" xml:space="preserve">
          <source>The resulting configuration does not wire up AngularJS digests to Zone hooks. It is the responsibility of the test writer to call &lt;code&gt;$rootScope.$apply&lt;/code&gt;, as necessary, to trigger AngularJS handlers of async events from Angular.</source>
          <target state="translated">結果の構成では、AngularJSダイジェストがゾーンフックに関連付けられません。Angularから非同期イベントのAngularJSハンドラーをトリガーするために、必要に応じて &lt;code&gt;$rootScope.$apply&lt;/code&gt; を呼び出すのはテスト作成者の責任です。</target>
        </trans-unit>
        <trans-unit id="bcbab465692903fa7cd8359d43327dd68fd697f4" translate="yes" xml:space="preserve">
          <source>The resulting crisis center is a foundation for introducing a new concept&amp;mdash;&lt;strong&gt;child routing&lt;/strong&gt;. You can leave &lt;em&gt;Heroes&lt;/em&gt; in its current state as a contrast with the &lt;em&gt;Crisis Center&lt;/em&gt; and decide later if the differences are worthwhile.</source>
          <target state="translated">結果として生じる危機センターは、新しい概念、つまり&lt;strong&gt;子ルーティング&lt;/strong&gt;を導入するための基盤となり&lt;strong&gt;ます&lt;/strong&gt;。あなたは残すことができます&lt;em&gt;英雄&lt;/em&gt;とのコントラストと現在の状態で&lt;em&gt;危機センター&lt;/em&gt;との違いは価値がある場合は、後で決めます。</target>
        </trans-unit>
        <trans-unit id="60c61e192f37012d32b9480674b367cba80cbbd6" translate="yes" xml:space="preserve">
          <source>The resulting crisis center is a foundation for introducing a new concept&amp;mdash;child routing. You can leave Heroes in its current state as a contrast with the Crisis Center.</source>
          <target state="translated">結果として生じる危機センターは、新しい概念である子ルーティングを導入するための基盤です。クライシスセンターとは対照的に、ヒーローを現在の状態のままにしておくことができます。</target>
        </trans-unit>
        <trans-unit id="de4d48c6b6c99ee6545e5af2a4c9556b34785c31" translate="yes" xml:space="preserve">
          <source>The resulting path is &lt;code&gt;/crisis-center/1&lt;/code&gt;.</source>
          <target state="translated">結果のパスは &lt;code&gt;/crisis-center/1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3119670930697faa92fa40415fd5310703990877" translate="yes" xml:space="preserve">
          <source>The reusable animation to start.</source>
          <target state="translated">再利用可能なアニメーションを開始します。</target>
        </trans-unit>
        <trans-unit id="472e6e96b50dda645bba8c0360d28b358fbda1d8" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;CachingInterceptor&lt;/code&gt; sets up a server request whether there's a cached value or not, using the same &lt;code&gt;sendRequest()&lt;/code&gt; method described &lt;a href=&quot;http#send-request&quot;&gt;above&lt;/a&gt;. The &lt;code&gt;results$&lt;/code&gt; observable makes the request when subscribed.</source>
          <target state="translated">改訂 &lt;code&gt;CachingInterceptor&lt;/code&gt; の同じ使用して、キャッシュされた値かどうか、がありますかどうかをサーバ要求設定 &lt;code&gt;sendRequest()&lt;/code&gt; メソッドを説明&lt;a href=&quot;http#send-request&quot;&gt;上記&lt;/a&gt;。 &lt;code&gt;results$&lt;/code&gt; 観測可能になり加入要求を。</target>
        </trans-unit>
        <trans-unit id="c31f00e06ff51792a57ab30c7e7548ddc8902084" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;CachingInterceptor&lt;/code&gt; sets up a server request whether there's a cached value or not, using the same &lt;code&gt;sendRequest()&lt;/code&gt; method described &lt;a href=&quot;http#send-request&quot;&gt;above&lt;/a&gt;. The &lt;code&gt;results$&lt;/code&gt; observable will make the request when subscribed.</source>
          <target state="translated">改訂 &lt;code&gt;CachingInterceptor&lt;/code&gt; の同じ使用して、キャッシュされた値かどうか、がありますかどうかをサーバ要求設定 &lt;code&gt;sendRequest()&lt;/code&gt; メソッドを説明&lt;a href=&quot;http#send-request&quot;&gt;上記&lt;/a&gt;。 &lt;code&gt;results$&lt;/code&gt; 加入したときに観察が要求を行います。</target>
        </trans-unit>
        <trans-unit id="be95ae4bd6dde666442aa0c4fe5f5b09117ba06c" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; class file should look like this:</source>
          <target state="translated">改訂された &lt;code&gt;HeroesComponent&lt;/code&gt; クラスファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="8f5283cba25861d79d0e19a7a740a98060be3788" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">改訂された &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="168dcf13af40558015f7fe59904918a61ab032a2" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppComponent&lt;/code&gt; is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router renders components.</source>
          <target state="translated">ルート &lt;code&gt;AppComponent&lt;/code&gt; はアプリケーションシェルです。タイトル、2つのリンクがあるナビゲーションバー、およびルーターがコンポーネントをレンダリングするルーターアウトレットがあります。</target>
        </trans-unit>
        <trans-unit id="63cda66359a819e7cbb619142c9b706aff15c48f" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppComponent&lt;/code&gt; is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router swaps components on and off the page. Here's what you get:</source>
          <target state="translated">ルート &lt;code&gt;AppComponent&lt;/code&gt; はアプリケーションシェルです。タイトル、2つのリンクのあるナビゲーションバー、ルーターがコンポーネントをページ上とページ外で交換するルーターアウトレットがあります。ここにあなたが得るものがあります：</target>
        </trans-unit>
        <trans-unit id="0f0329ffe5ecceeb131961f70f4acb552bdcbfe8" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppModule&lt;/code&gt; is the only module that should import service modules.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; は、サービスモジュールをインポートする必要がある唯一のモジュールです。</target>
        </trans-unit>
        <trans-unit id="7f5301de53c9b02b6a4c13d8a8f9976bf232fc20" translate="yes" xml:space="preserve">
          <source>The root NgModule &lt;code&gt;AppModule&lt;/code&gt; generated by the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; for a new app project demonstrates how you use both kinds of modules:</source>
          <target state="translated">ルートNgModule &lt;code&gt;AppModule&lt;/code&gt; によって生成された&lt;a href=&quot;cli&quot;&gt;角度CLI&lt;/a&gt;新しいアプリのプロジェクトのためには、あなたは、モジュールの両方の種類を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2d4dc216979dbff965fe6fdd06ceb74df6763d41" translate="yes" xml:space="preserve">
          <source>The root NgModule starts with &lt;code&gt;import&lt;/code&gt; statements to import JavaScript modules. It then configures the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; with the following arrays:</source>
          <target state="translated">ルートNgModuleで始まる &lt;code&gt;import&lt;/code&gt; JavaScriptのモジュールをインポートするステートメント。次に、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を次の配列で構成します。</target>
        </trans-unit>
        <trans-unit id="92c90ae30fd5c691212cf46563dac3961bb08cdc" translate="yes" xml:space="preserve">
          <source>The root application module, &lt;code&gt;AppModule&lt;/code&gt;, of almost every browser application should import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">ほとんどすべてのブラウザアプリケーションのルートアプリケーションモジュールである &lt;code&gt;AppModule&lt;/code&gt; は、 &lt;code&gt;@angular/platform-browser&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="bbda7caf7baa01267a84d3e9deab3bbca8a3fdbd" translate="yes" xml:space="preserve">
          <source>The root directory of the app.</source>
          <target state="translated">アプリのルートディレクトリです。</target>
        </trans-unit>
        <trans-unit id="6a64de3e02b9fca633213b81541751cd41ab0a11" translate="yes" xml:space="preserve">
          <source>The root element to search from</source>
          <target state="translated">検索するルート要素</target>
        </trans-unit>
        <trans-unit id="671d824111bab81ec8318377b2e219bfaa96820d" translate="yes" xml:space="preserve">
          <source>The root folder for this project's files, relative to the workspace folder. Empty for the initial app, which resides at the top level of the workspace.</source>
          <target state="translated">このプロジェクトのファイルのルート フォルダは、ワークスペース フォルダからの相対的なものです。ワークスペースのトップレベルにある最初のアプリの場合は空です。</target>
        </trans-unit>
        <trans-unit id="54dbf3939551d85e7abddf427d6a6ad0d92df9b4" translate="yes" xml:space="preserve">
          <source>The root folder for this project's source files.</source>
          <target state="translated">このプロジェクトのソースファイルのルートフォルダです。</target>
        </trans-unit>
        <trans-unit id="b1ec0372f1cddf50e90c0a7dde345a963fecb42f" translate="yes" xml:space="preserve">
          <source>The root module is all you need in a simple application with a few components. As the app grows, you refactor the root module into &lt;a href=&quot;feature-modules&quot;&gt;feature modules&lt;/a&gt; that represent collections of related functionality. You then import these modules into the root module.</source>
          <target state="translated">ルートモジュールは、いくつかのコンポーネントを持つ単純なアプリケーションで必要なすべてです。アプリが成長するにつれて、ルートモジュールを関連する機能のコレクションを表す&lt;a href=&quot;feature-modules&quot;&gt;機能モジュールに&lt;/a&gt;リファクタリングします。次に、これらのモジュールをルートモジュールにインポートします。</target>
        </trans-unit>
        <trans-unit id="da27980955945e04ad4a054ed93c8229a2cdc100" translate="yes" xml:space="preserve">
          <source>The root nodes for this embedded view.</source>
          <target state="translated">この埋め込みビューのルートノード。</target>
        </trans-unit>
        <trans-unit id="3397f990a2e5dcb255a1ff4ae7da260d1d6f2244" translate="yes" xml:space="preserve">
          <source>The root of the problem is at least one of the components involved in the test specifies an external template or CSS file as the following version of the &lt;code&gt;BannerComponent&lt;/code&gt; does.</source>
          <target state="translated">問題の原因は、テストに含まれるコンポーネントの少なくとも1つが、次のバージョンの &lt;code&gt;BannerComponent&lt;/code&gt; と同様に、外部テンプレートまたはCSSファイルを指定していることです。</target>
        </trans-unit>
        <trans-unit id="43d23a95dcd95d02fff170aa27124ad27dadf776" translate="yes" xml:space="preserve">
          <source>The root of the router state</source>
          <target state="translated">ルータ状態のルート</target>
        </trans-unit>
        <trans-unit id="4972cd8af27405ae6af97b76c474d6f24b212689" translate="yes" xml:space="preserve">
          <source>The root of the router state.</source>
          <target state="translated">ルータ状態のルート。</target>
        </trans-unit>
        <trans-unit id="2877c97510f1f533a0813b5a4c64f21f27b1ea42" translate="yes" xml:space="preserve">
          <source>The root segment group of the URL tree</source>
          <target state="translated">URLツリーのルートセグメントグループ</target>
        </trans-unit>
        <trans-unit id="242d314a6c2586f09781ee20f1069bf96dfafb5a" translate="yes" xml:space="preserve">
          <source>The route &lt;code&gt;/crisis-center&lt;/code&gt; opens the &lt;code&gt;crisis-center&lt;/code&gt; component.</source>
          <target state="translated">ルート &lt;code&gt;/crisis-center&lt;/code&gt; は、 &lt;code&gt;crisis-center&lt;/code&gt; コンポーネントを開きます。</target>
        </trans-unit>
        <trans-unit id="c67a049394357ddbd5756805abca85b9c82dad23" translate="yes" xml:space="preserve">
          <source>The route &lt;code&gt;/heroes-list&lt;/code&gt; opens the &lt;code&gt;heroes-list&lt;/code&gt; component.</source>
          <target state="translated">ルート &lt;code&gt;/heroes-list&lt;/code&gt; は、 &lt;code&gt;heroes-list&lt;/code&gt; コンポーネントを開きます。</target>
        </trans-unit>
        <trans-unit id="3c8a01ed9794c16c0a0e02ced63c7a78d14e47e4" translate="yes" xml:space="preserve">
          <source>The route array for the new configuration.</source>
          <target state="translated">新しい設定のためのルート配列。</target>
        </trans-unit>
        <trans-unit id="bef3a96e68be9a7e3e4e120593f324d30c516bbd" translate="yes" xml:space="preserve">
          <source>The route configuration to provide.</source>
          <target state="translated">提供するルート構成。</target>
        </trans-unit>
        <trans-unit id="c73d7a5fdb6e04fbea56a19afdcaf95a1328d979" translate="yes" xml:space="preserve">
          <source>The route configuration used for the route that contains the origin path.</source>
          <target state="translated">オリジンパスを含む経路に使用する経路設定です。</target>
        </trans-unit>
        <trans-unit id="4e196abefd449c7a38cdaa9e24641456ced4d25e" translate="yes" xml:space="preserve">
          <source>The route parameters correspond to the path variables defined in the route. The &lt;code&gt;productId&lt;/code&gt; is provided from the URL that was matched to the route. You use the &lt;code&gt;productId&lt;/code&gt; to display the details for each unique product.</source>
          <target state="translated">ルートパラメータは、ルートで定義されたパス変数に対応します。 &lt;code&gt;productId&lt;/code&gt; ルートにマッチしたURLから提供されています。 &lt;code&gt;productId&lt;/code&gt; を使用して、一意の各製品の詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="595f51af1731c8de65319d83dd1fb2e31ca5e6e4" translate="yes" xml:space="preserve">
          <source>The route parameters correspond to the path variables you define in the route. The URL that matches the route provides the &lt;code&gt;productId&lt;/code&gt;. Angular uses the &lt;code&gt;productId&lt;/code&gt; to display the details for each unique product.</source>
          <target state="translated">ルートパラメータは、ルートで定義したパス変数に対応しています。ルートに一致するURLは &lt;code&gt;productId&lt;/code&gt; を提供します。Angularは &lt;code&gt;productId&lt;/code&gt; を使用して、一意の各製品の詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="66d3701516f8bcdfaf06a82d17fcdba4c47e9b5a" translate="yes" xml:space="preserve">
          <source>The route path and parameters are available through an injected router service called the &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;. It has a great deal of useful information including:</source>
          <target state="translated">ルートパスとパラメータは、&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;と呼ばれる注入されたルーターサービスを通じて利用できます。以下を含む多くの有用な情報があります。</target>
        </trans-unit>
        <trans-unit id="d1f012c5745d0ca7adf488982b001bebc88d2038" translate="yes" xml:space="preserve">
          <source>The route path for a lazy-loaded module. When supplied, creates a component in the new module, and adds the route to that component in the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided in the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">遅延ロードされたモジュールのルートパス。指定すると、新しいモジュールにコンポーネントが作成され、 &lt;code&gt;--module&lt;/code&gt; オプションで指定されたモジュールで宣言された &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列にそのコンポーネントへのルートが追加されます。</target>
        </trans-unit>
        <trans-unit id="f851c13eed7f013f3276fc1f09b0556e9f7b748d" translate="yes" xml:space="preserve">
          <source>The route to consider.</source>
          <target state="translated">検討するルート。</target>
        </trans-unit>
        <trans-unit id="e5fc4b54a42e423066458d8e19e63d73e48616e9" translate="yes" xml:space="preserve">
          <source>The route's parent &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; when this route is a &lt;a href=&quot;router#child-routing-component&quot;&gt;child route&lt;/a&gt;.</source>
          <target state="translated">このルートが&lt;a href=&quot;router#child-routing-component&quot;&gt;子ルートの&lt;/a&gt;場合、ルートの親 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20d1064839631812bc36de653a61eab94e893397" translate="yes" xml:space="preserve">
          <source>The route's parent &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; when this route is a &lt;a href=&quot;router-tutorial-toh#child-routing-component&quot;&gt;child route&lt;/a&gt;.</source>
          <target state="translated">このルートが&lt;a href=&quot;router-tutorial-toh#child-routing-component&quot;&gt;子ルートの&lt;/a&gt;場合、ルートの親 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d93e27b6f01a3844669a04c09c59a34752da5a4" translate="yes" xml:space="preserve">
          <source>The router &lt;code&gt;navigate()&lt;/code&gt; method takes the same one-item &lt;em&gt;link parameters array&lt;/em&gt; that you can bind to a &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; directive. It holds the path to the &lt;code&gt;HeroListComponent&lt;/code&gt;:</source>
          <target state="translated">ルーターの &lt;code&gt;navigate()&lt;/code&gt; メソッドは、 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt; ]ディレクティブにバインドできるものと同じ1項目の&lt;em&gt;リンクパラメーター配列&lt;/em&gt;を取ります。 &lt;code&gt;HeroListComponent&lt;/code&gt; へのパスを保持します：</target>
        </trans-unit>
        <trans-unit id="ff45d5a87a74679f399b1959935f568d12a35bbf" translate="yes" xml:space="preserve">
          <source>The router &lt;code&gt;navigate&lt;/code&gt; method takes the same one-item &lt;em&gt;link parameters array&lt;/em&gt; that you can bind to a &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; directive. It holds the &lt;em&gt;path to the &lt;code&gt;HeroListComponent&lt;/code&gt;&lt;/em&gt;:</source>
          <target state="translated">router &lt;code&gt;navigate&lt;/code&gt; メソッドは、 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt; ]ディレクティブにバインドできるのと同じ1アイテムの&lt;em&gt;リンクパラメーター配列&lt;/em&gt;を受け取ります。&lt;em&gt; &lt;code&gt;HeroListComponent&lt;/code&gt; &lt;/em&gt;&lt;em&gt;へ&lt;/em&gt;の&lt;em&gt;パスを&lt;/em&gt;保持し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6adcc63174d5c2a81f7c61ec96d14f7c1aa0c0c" translate="yes" xml:space="preserve">
          <source>The router adds the lazy module's providers and the providers of its imported NgModules to this child injector.</source>
          <target state="translated">ルータは、遅延モジュールのプロバイダと、インポートしたNgModulesのプロバイダをこの子インジェクタに追加します。</target>
        </trans-unit>
        <trans-unit id="464e7a2dded2eb7cef76bc15857f7a52ef5cb36b" translate="yes" xml:space="preserve">
          <source>The router assumed that your route specification targeted the &lt;em&gt;unnamed&lt;/em&gt; primary outlet and created these objects for you.</source>
          <target state="translated">ルーターは、ルート指定が&lt;em&gt;名前のない&lt;/em&gt;プライマリアウトレットをターゲットとし、これらのオブジェクトを作成すると想定しました。</target>
        </trans-unit>
        <trans-unit id="e7af2a8eb9140969e3964052e77e8f3909253e1f" translate="yes" xml:space="preserve">
          <source>The router assumed that your route specification targeted the unnamed primary outlet and created these objects for you.</source>
          <target state="translated">ルータは、あなたのルート指定が無名のプライマリアウトレットをターゲットにしていると仮定して、あなたのためにこれらのオブジェクトを作成しました。</target>
        </trans-unit>
        <trans-unit id="7aa34b1ee03c56dc6ef8b31a485775f2ad59c9bb" translate="yes" xml:space="preserve">
          <source>The router calls the &lt;code&gt;preload()&lt;/code&gt; method with two arguments:</source>
          <target state="translated">ルータは、次の2つの引数を使用して &lt;code&gt;preload()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="86314416e2f5eb8bbfe8d314a88dba892d7a1414" translate="yes" xml:space="preserve">
          <source>The router calls the &lt;code&gt;preload&lt;/code&gt; method with two arguments:</source>
          <target state="translated">ルーターは、2つの引数を指定して &lt;code&gt;preload&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="1021602580631729060d4ea9a3955538ce37e03f" translate="yes" xml:space="preserve">
          <source>The router calls the resolver in any case where the the user could navigate away so you don't have to code for each use case.</source>
          <target state="translated">ルータは、ユーザーが移動する可能性のあるあらゆるケースでリゾルバを呼び出すので、ユースケースごとにコーディングする必要はありません。</target>
        </trans-unit>
        <trans-unit id="0b7b212269847557351f8b5a3f629304f4a10730" translate="yes" xml:space="preserve">
          <source>The router composes the destination URL from the array like this: &lt;code&gt;localhost:4200/hero/15&lt;/code&gt;.</source>
          <target state="translated">ルーターは、 &lt;code&gt;localhost:4200/hero/15&lt;/code&gt; のような配列から宛先URLを作成します。</target>
        </trans-unit>
        <trans-unit id="3e64c73914c5847d2de53b2cd6e0ad0774bfb328" translate="yes" xml:space="preserve">
          <source>The router defines navigation among views on a single page, as opposed to navigation among pages. It interprets URL-like links to determine which views to create or destroy, and which components to load or unload. It allows you to take advantage of &lt;a href=&quot;glossary#lazy-load&quot;&gt;lazy loading&lt;/a&gt; in your Angular apps.</source>
          <target state="translated">ルーターは、ページ間のナビゲーションではなく、単一ページ上のビュー間のナビゲーションを定義します。URLのようなリンクを解釈して、作成または破棄するビュー、およびロードまたはアンロードするコンポーネントを決定します。Angularアプリで&lt;a href=&quot;glossary#lazy-load&quot;&gt;遅延読み込み&lt;/a&gt;を利用できます。</target>
        </trans-unit>
        <trans-unit id="c17670c71f8c023ad90633a12d89c42440504772" translate="yes" xml:space="preserve">
          <source>The router displays the components of these routes in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;CrisisCenterComponent&lt;/code&gt;, not in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">ルータディスプレイにおけるこれらの経路の成分 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;CrisisCenterComponent&lt;/code&gt; ないで、 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;AppComponent&lt;/code&gt; シェル。</target>
        </trans-unit>
        <trans-unit id="5c928e0d20717c8c5f4b3a4efd2288875d0f9b06" translate="yes" xml:space="preserve">
          <source>The router draws upon its registry of definitions when the browser URL changes or when application code tells the router to navigate along a route path.</source>
          <target state="translated">ルータは、ブラウザの URL が変更されたとき、またはアプリケーションコードがルートパスに沿ってナビゲートするようにルータに指示したときに、定義のレジストリに基づいて描画します。</target>
        </trans-unit>
        <trans-unit id="71c39ba8cef1c1fda2c9bf53a95cec225bee482f" translate="yes" xml:space="preserve">
          <source>The router either never preloads, or preloads every lazy loaded module. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; also supports &lt;a href=&quot;router-tutorial-toh#custom-preloading&quot;&gt;custom preloading strategies&lt;/a&gt; for fine control over which modules to preload and when.</source>
          <target state="translated">ルータは、遅延ロードされたすべてのモジュールをプリロードしないか、プリロードします。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; また、サポート&lt;a href=&quot;router-tutorial-toh#custom-preloading&quot;&gt;カスタムプリロード戦略&lt;/a&gt;プリロードとするときに、モジュールを細かく制御のために。</target>
        </trans-unit>
        <trans-unit id="a093fc77d863ec9bd9a835484c18df4bd2839243" translate="yes" xml:space="preserve">
          <source>The router embedded the &lt;code&gt;id&lt;/code&gt; value in the navigation URL because you had defined it as a route parameter with an &lt;code&gt;:id&lt;/code&gt; placeholder token in the route &lt;code&gt;path&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; ： &lt;code&gt;:id&lt;/code&gt; プレースホルダートークンを使用してルートパラメーターとして定義したため、ルーターはナビゲーションURLに &lt;code&gt;id&lt;/code&gt; 値を埋め込みました。</target>
        </trans-unit>
        <trans-unit id="0703ea253b9b207877f837c0ebf348dabd5b539b" translate="yes" xml:space="preserve">
          <source>The router extracts the route parameter (&lt;code&gt;id:15&lt;/code&gt;) from the URL and supplies it to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; via the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">ルーターはURLからルートパラメーター（ &lt;code&gt;id:15&lt;/code&gt; ）を抽出し、それを &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; サービスを介して &lt;code&gt;HeroDetailComponent&lt;/code&gt; に提供します。</target>
        </trans-unit>
        <trans-unit id="36f288f65a85dc5f52b243320808ca5d7d00fb50" translate="yes" xml:space="preserve">
          <source>The router interprets a link URL according to your app's view navigation rules and data state. You can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source. The router logs activity in the browser's history, so the back and forward buttons work as well.</source>
          <target state="translated">ルータは、アプリのビュー ナビゲーション ルールとデータの状態に応じてリンク URL を解釈します。ユーザーがボタンをクリックしたり、ドロップボックスから選択したりしたとき、または任意のソースからの他の刺激に反応して、新しいビューにナビゲートできます。ルーターはブラウザの履歴にアクティビティを記録するので、戻るボタンや進むボタンも同様に機能します。</target>
        </trans-unit>
        <trans-unit id="40f94c674310a595511f95be3e481296d4f01b3b" translate="yes" xml:space="preserve">
          <source>The router is keeping track of two separate branches in a navigation tree and generating a representation of that tree in the URL.</source>
          <target state="translated">ルータは、ナビゲーションツリー内の2つの別々のブランチを追跡し、そのツリーの表現をURLに生成しています。</target>
        </trans-unit>
        <trans-unit id="66882268b7107bf893e0fd15fa3db80248536e98" translate="yes" xml:space="preserve">
          <source>The router keeps track of separate branches in a navigation tree for each named outlet and generates a representation of that tree in the URL. The URL for a secondary route uses the following syntax to specify both the primary and secondary routes at the same time:</source>
          <target state="translated">ルータは、指定されたアウトレットごとにナビゲーションツリーの個別の分岐を追跡し、そのツリーの表現を URL で生成します。このような場合は、次のような構文を使用して、プライマリルートとセカンダリルートの両方を同時に指定します。</target>
        </trans-unit>
        <trans-unit id="3a054f785d39ee8f97217df707c9c5b56c07bd19" translate="yes" xml:space="preserve">
          <source>The router lets you display full product details in separate &lt;a href=&quot;../guide/glossary#view&quot;&gt;views&lt;/a&gt;, each with its own URL. Routing enables navigation from one view to the next (within the same page) as users perform tasks such as the following:</source>
          <target state="translated">ルーターを使用すると、製品の詳細を個別の&lt;a href=&quot;../guide/glossary#view&quot;&gt;ビューに表示でき&lt;/a&gt;、それぞれに独自のURLがあります。ルーティングにより、ユーザーが次のようなタスクを実行するときに、あるビューから次のビュー（同じページ内）へのナビゲーションが可能になります。</target>
        </trans-unit>
        <trans-unit id="6f1fff5319d8f72c72ec0476e40e8b1da2d77ed9" translate="yes" xml:space="preserve">
          <source>The router link directive always treats the provided input as a delta to the current url.</source>
          <target state="translated">ルータリンクディレクティブは常に現在の URL へのデルタとして扱います。</target>
        </trans-unit>
        <trans-unit id="170614389397ec9d97f973262e58d5663453a227" translate="yes" xml:space="preserve">
          <source>The router maps URL-like paths to views instead of pages. When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser's behavior, and shows or hides view hierarchies.</source>
          <target state="translated">ルーターは URL ライクなパスをページの代わりにビューにマッピングします。ユーザーがリンクをクリックするなど、ブラウザで新しいページを読み込むようなアクションを実行すると、ルータはブラウザの動作を妨害し、ビュー階層を表示したり非表示にしたりします。</target>
        </trans-unit>
        <trans-unit id="45c7188ec7a83f5f718d2d88747d152f1b97733f" translate="yes" xml:space="preserve">
          <source>The router matches such &lt;em&gt;absolute&lt;/em&gt; paths to routes starting from the top of the route configuration.</source>
          <target state="translated">ルーターは、ルート構成の先頭から開始して、そのような&lt;em&gt;絶対&lt;/em&gt;パスをルートに一致させます。</target>
        </trans-unit>
        <trans-unit id="260b325d8fbd13b4d85a84d5257a3b927692e3d5" translate="yes" xml:space="preserve">
          <source>The router matches such absolute paths to routes starting from the top of the route configuration.</source>
          <target state="translated">ルータは、このような絶対パスを、ルート設定の先頭から始まるルートにマッチさせます。</target>
        </trans-unit>
        <trans-unit id="05d009d175fdb7f12138aac1b07043d6aa4d44ba" translate="yes" xml:space="preserve">
          <source>The router merges the parameters, data, and resolve of the componentless parent into the parameters, data, and resolve of the children.</source>
          <target state="translated">ルータは、コンポーネントレスの親のパラメータ、データ、および解決策を子のパラメータ、データ、および解決策にマージします。</target>
        </trans-unit>
        <trans-unit id="67b6bd438f9d975bb93513d155cfcc4f597fa576" translate="yes" xml:space="preserve">
          <source>The router module navigates among your app pages when the browser URL changes. For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">ルーターモジュールは、ブラウザーのURLが変更されるとアプリページ間を移動します。詳細については、「&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="be14d8494a5c5cba61dae579b492b85dc78e0eca" translate="yes" xml:space="preserve">
          <source>The router outlet serves as a placeholder when the routed components will be rendered below it.</source>
          <target state="translated">ルータアウトレットは、ルーティングされたコンポーネントがその下にレンダリングされるときのプレースホルダとして機能します。</target>
        </trans-unit>
        <trans-unit id="205ac6f2823531bd65a03da2553248b34bba37ad" translate="yes" xml:space="preserve">
          <source>The router outlet serves as a placeholder where the routed components are rendered.</source>
          <target state="translated">ルータアウトレットは、ルーティングされたコンポーネントがレンダリングされるプレースホルダとして機能します。</target>
        </trans-unit>
        <trans-unit id="9249dc1011c1c73ac0719c7ec4542ea400fe2bc1" translate="yes" xml:space="preserve">
          <source>The router selects the route with a &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;first match wins&lt;/em&gt;&lt;/a&gt; strategy. Because a wildcard route is the least specific route, place it last in the route configuration.</source>
          <target state="translated">ルータは、&lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;最初の一致が勝つ&lt;/em&gt;&lt;/a&gt;戦略でルートを選択します。ワイルドカードルートは最も具体性の低いルートであるため、ルート構成の最後に配置します。</target>
        </trans-unit>
        <trans-unit id="736e289b0385ec3ddda27eea926de4105245493a" translate="yes" xml:space="preserve">
          <source>The router selects the route with a &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;first match wins&lt;/em&gt;&lt;/a&gt; strategy. Wildcard routes are the least specific routes in the route configuration. Be sure it is the &lt;em&gt;last&lt;/em&gt; route in the configuration.</source>
          <target state="translated">ルーターは、&lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;最初に一致する勝利&lt;/em&gt;&lt;/a&gt;戦略を持つルートを選択します。ワイルドカードルートは、ルート構成で最も特定度の低いルートです。それが構成の&lt;em&gt;最後の&lt;/em&gt;ルートであることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e483aae32dfdd13e3ceb796d853bc5f1c51b3ffb" translate="yes" xml:space="preserve">
          <source>The router sets the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; method's &lt;code&gt;route&lt;/code&gt; parameter to the intended destination URL. The &lt;code&gt;checkLogin()&lt;/code&gt; method redirects to that URL once the user has logged in.</source>
          <target state="translated">ルーターは、 &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; メソッドの &lt;code&gt;route&lt;/code&gt; パラメーターを目的の宛先URLに設定します。 &lt;code&gt;checkLogin()&lt;/code&gt; そのURLへのリダイレクト方法をユーザーがログインした後。</target>
        </trans-unit>
        <trans-unit id="81f377b7ecef81dc2ac99914cdf382b4423ea9ab" translate="yes" xml:space="preserve">
          <source>The router sets the &lt;code&gt;canLoad()&lt;/code&gt; method's &lt;code&gt;route&lt;/code&gt; parameter to the intended destination URL. The &lt;code&gt;checkLogin()&lt;/code&gt; method redirects to that URL once the user has logged in.</source>
          <target state="translated">ルーターは、 &lt;code&gt;canLoad()&lt;/code&gt; メソッドの &lt;code&gt;route&lt;/code&gt; パラメーターを目的の宛先URLに設定します。 &lt;code&gt;checkLogin()&lt;/code&gt; そのURLへのリダイレクト方法をユーザーがログインした後。</target>
        </trans-unit>
        <trans-unit id="ed56f7656ac08b3e0ee8155fb0a3581dada87c03" translate="yes" xml:space="preserve">
          <source>The router supports both styles with two &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">ルーターは、2つの &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; プロバイダーで両方のスタイルをサポートします。</target>
        </trans-unit>
        <trans-unit id="a62638a6e21e4759de70853b67830c5266f6a0ab" translate="yes" xml:space="preserve">
          <source>The router supports directory-like syntax in a &lt;em&gt;link parameters list&lt;/em&gt; to help guide route name lookup:</source>
          <target state="translated">ルーターは、&lt;em&gt;リンクパラメーターリスト&lt;/em&gt;でディレクトリのような構文をサポートし、ルート名の検索をガイドします。</target>
        </trans-unit>
        <trans-unit id="8bf5781b34bee9259b2e2f8cf4416f1697ff1181" translate="yes" xml:space="preserve">
          <source>The router supports multiple guard interfaces:</source>
          <target state="translated">ルータは複数のガードインターフェースをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c0bca771ad18c103f1c47fc1e5a1d2836da9bf81" translate="yes" xml:space="preserve">
          <source>The router supports navigation with optional parameters as well as required route parameters. Define &lt;em&gt;optional&lt;/em&gt; parameters in a separate object &lt;em&gt;after&lt;/em&gt; you define the required route parameters.</source>
          <target state="translated">ルーターは、オプションのパラメーターと必須のルートパラメーターを使用したナビゲーションをサポートしています。定義&lt;em&gt;オプションの&lt;/em&gt;別のオブジェクトのパラメータを&lt;em&gt;した後&lt;/em&gt;、あなたが必要なルートパラメータを定義します。</target>
        </trans-unit>
        <trans-unit id="9ca0d340393e78553af88ef8e5ffc5378d31a126" translate="yes" xml:space="preserve">
          <source>The router supports navigation with optional parameters as well as required route parameters. Define optional parameters in a separate object &lt;em&gt;after&lt;/em&gt; you define the required route parameters.</source>
          <target state="translated">ルータは、オプションのパラメータと必須のルートパラメータを使用したナビゲーションをサポートしています。必要なルートパラメータを定義した&lt;em&gt;後&lt;/em&gt;、別のオブジェクトでオプションのパラメータを定義します。</target>
        </trans-unit>
        <trans-unit id="721de1b66d75f02ba2445c6313fdbe78c22b055a" translate="yes" xml:space="preserve">
          <source>The router uses the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; for navigation. &lt;code&gt;pushState&lt;/code&gt; allows you to customize in-app URL paths; for example, &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt;. The in-app URLs can be indistinguishable from server URLs.</source>
          <target state="translated">ルーターは、ブラウザーの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt;をナビゲーションに使用します。 &lt;code&gt;pushState&lt;/code&gt; を使用すると、アプリ内URLパスをカスタマイズできます。たとえば、 &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt; です。アプリ内URLはサーバーURLと見分けがつかない場合があります。</target>
        </trans-unit>
        <trans-unit id="b44e894ea1b945e0628e82828fbe796cf336ea56" translate="yes" xml:space="preserve">
          <source>The router uses the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; for navigation. Thanks to &lt;code&gt;pushState&lt;/code&gt;, you can make in-app URL paths look the way you want them to look, e.g. &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt;. The in-app URLs can be indistinguishable from server URLs.</source>
          <target state="translated">ルーターは、ナビゲーションにブラウザーの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt;を使用します。 &lt;code&gt;pushState&lt;/code&gt; のおかげで、アプリ内のURLパスを希望どおりに見せることができます（例： &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt; )。アプリ内URLは、サーバーURLと区別できない場合があります。</target>
        </trans-unit>
        <trans-unit id="53d9befd3cd261f060f5decb29960135724d8489" translate="yes" xml:space="preserve">
          <source>The router works at the root level so if you put providers in a component, even &lt;code&gt;AppComponent&lt;/code&gt;, lazy loaded modules, which rely on the router, can&amp;rsquo;t see them.</source>
          <target state="translated">ルーターはルートレベルで機能するので、コンポーネントにプロバイダーを配置すると、ルーターに依存する遅延読み込みされたモジュールである &lt;code&gt;AppComponent&lt;/code&gt; でさえ、それらを見ることができません。</target>
        </trans-unit>
        <trans-unit id="0ba9dade3e3b9ffdda20ce10c97f537f8ff12442" translate="yes" xml:space="preserve">
          <source>The router's &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface is optional. The &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; doesn't inherit from a base class. The router looks for that method and calls it if found.</source>
          <target state="translated">ルーターの &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; インターフェースはオプションです。 &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; は、基本クラスから継承しません。ルーターはそのメソッドを探し、見つかった場合はそれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="40bd61970480593d5a81861e4cee600f3fafc0bf" translate="yes" xml:space="preserve">
          <source>The routes are no longer in one file. They are distributed across two modules, &lt;code&gt;AppRoutingModule&lt;/code&gt; and &lt;code&gt;HeroesRoutingModule&lt;/code&gt;.</source>
          <target state="translated">ルートは1つのファイルに含まれなくなりました。それらは &lt;code&gt;AppRoutingModule&lt;/code&gt; と &lt;code&gt;HeroesRoutingModule&lt;/code&gt; の 2つのモジュールに分散されています。</target>
        </trans-unit>
        <trans-unit id="924c6afc19bb9b612a4c9d01a15918f63fca5da1" translate="yes" xml:space="preserve">
          <source>The routing module is helpful as your app grows and when the configuration includes specialized guard and resolver services.</source>
          <target state="translated">ルーティングモジュールは、アプリの成長に合わせて、また構成に特殊なガードサービスやリゾルバサービスが含まれている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8fc7cb4d33cdf592cf3bc7e516d00d9c23978486" translate="yes" xml:space="preserve">
          <source>The routing module, often called the &lt;code&gt;AppRoutingModule&lt;/code&gt;, replaces the routing configuration in the root or feature module.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; と呼ばれることが多いルーティングモジュールは、ルートモジュールまたは機能モジュールのルーティング構成を置き換えます。</target>
        </trans-unit>
        <trans-unit id="c8bfeafd59576a5466c5d56c7ed9d1a4b51bcaed" translate="yes" xml:space="preserve">
          <source>The running application displays three heroes:</source>
          <target state="translated">実行中のアプリでは、3人のヒーローが表示されます。</target>
        </trans-unit>
        <trans-unit id="d2037d2f70edf3081cd81efee594d118f23f5b88" translate="yes" xml:space="preserve">
          <source>The safe navigation operator ( &lt;code&gt;?&lt;/code&gt; ) and null property paths</source>
          <target state="translated">安全なナビゲーション演算子（ &lt;code&gt;?&lt;/code&gt; ）とnullプロパティパス</target>
        </trans-unit>
        <trans-unit id="e085db54661fcc65281a95cf0450e05e179ee59e" translate="yes" xml:space="preserve">
          <source>The safe navigation operator (&lt;code&gt;?&lt;/code&gt;) means that the &lt;code&gt;employer&lt;/code&gt; field is optional and if &lt;code&gt;undefined&lt;/code&gt;, the rest of the expression should be ignored.</source>
          <target state="translated">安全なナビゲーション演算子（ &lt;code&gt;?&lt;/code&gt; ）は、 &lt;code&gt;employer&lt;/code&gt; フィールドがオプションであり、 &lt;code&gt;undefined&lt;/code&gt; の場合、式の残りの部分は無視されることを意味します。</target>
        </trans-unit>
        <trans-unit id="59c72d8464ed8d8df3745406023437ff7ed29782" translate="yes" xml:space="preserve">
          <source>The safest way to get the injected service, the way that &lt;strong&gt;&lt;em&gt;always works&lt;/em&gt;&lt;/strong&gt;, is to &lt;strong&gt;get it from the injector of the &lt;em&gt;component-under-test&lt;/em&gt;&lt;/strong&gt;. The component injector is a property of the fixture's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">注入されたサービスを取得する最も安全な方法は、&lt;strong&gt;&lt;em&gt;常に機能し&lt;/em&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;em&gt;テスト対象のコンポーネント&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;のインジェクタから取得すること&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;です。コンポーネントインジェクタは、フィクスチャの &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; のプロパティです。</target>
        </trans-unit>
        <trans-unit id="939660064b29633f3b868d36327576ca89ac09ec" translate="yes" xml:space="preserve">
          <source>The same built-in validators that are available as attributes in template-driven forms, such as &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, are all available to use as functions from the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class. For a full list of built-in validators, see the &lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; API reference.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; など、テンプレート駆動型フォームの属性として使用できるものと同じ組み込みバリデーターは、すべて &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; クラスの関数として使用できます。組み込みのバリデーターの完全なリストについては、&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; APIリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="067302b47e77195f2f26c14e3937a22efcc89d72" translate="yes" xml:space="preserve">
          <source>The same configuration options can also be provided through the CLI with your existing &lt;code&gt;production&lt;/code&gt; configuration.</source>
          <target state="translated">同じ構成オプションを、既存の &lt;code&gt;production&lt;/code&gt; 構成でCLIを介して提供することもできます。</target>
        </trans-unit>
        <trans-unit id="37e5c8808646d445a2065fb32b692fb91593936b" translate="yes" xml:space="preserve">
          <source>The same service that performs your server transactions should also perform error inspection, interpretation, and resolution.</source>
          <target state="translated">サーバートランザクションを実行する同じサービスでも、エラーの検査、解釈、解決を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="88ea22179fb824484880c2c0d1c934b0fdd8761e" translate="yes" xml:space="preserve">
          <source>The same text elements with different &lt;em&gt;meanings&lt;/em&gt; are extracted with separate IDs. For example, if the word &quot;right&quot; appears with the meaning &lt;code&gt;correct&lt;/code&gt; (as in &quot;You are right&quot;) in one place, and with the meaning &lt;code&gt;direction&lt;/code&gt; (as in &quot;Turn right&quot;) in another place, the word is translated differently and merged back into the app as different translation entries.</source>
          <target state="translated">&lt;em&gt;意味の&lt;/em&gt;異なる同じテキスト要素が別々のIDで抽出されます。たとえば、「右」という単語が &lt;code&gt;correct&lt;/code&gt; 意味（「あなたは正しい」のように）である場所に表示され、 &lt;code&gt;direction&lt;/code&gt; の意味（「右に曲がる」のように）で別の場所に表示される場合、その単語は異なる翻訳になり、異なる翻訳エントリとしてアプリにマージされました。</target>
        </trans-unit>
        <trans-unit id="16cde22da225d9a04d00eca0b15817fbe6af3692" translate="yes" xml:space="preserve">
          <source>The sample app and its translation file are now as follows:</source>
          <target state="translated">サンプルアプリとその翻訳ファイルは以下のようになりました。</target>
        </trans-unit>
        <trans-unit id="2018f14311878602d2320f5e56ba6ac75859ef04" translate="yes" xml:space="preserve">
          <source>The sample app does not require a data server. It relies on the &lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;, which replaces the &lt;em&gt;HttpClient&lt;/em&gt; module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;. The replacement service simulates the behavior of a REST-like backend.</source>
          <target state="translated">サンプルアプリはデータサーバーを必要としません。これは、&lt;em&gt;HttpClient&lt;/em&gt;モジュールの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; を置き換える&lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;に依存しています。置換サービスは、RESTのようなバックエンドの動作をシミュレートします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d9639d7d5642ac0cfa45c5189886107eb05e6058" translate="yes" xml:space="preserve">
          <source>The sample app for this guide doesn't have a server that accepts uploaded files. The &lt;code&gt;UploadInterceptor&lt;/code&gt; in &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; intercepts and short-circuits upload requests by returning an observable of simulated events.</source>
          <target state="translated">このガイドのサンプルアプリには、アップロードされたファイルを受け入れるサーバーがありません。 &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; の &lt;code&gt;UploadInterceptor&lt;/code&gt; は、シミュレートされたイベントのオブザーバブルを返すことにより、アップロード要求をインターセプトおよび短絡します。</target>
        </trans-unit>
        <trans-unit id="18a8f2d6b2521db5c000b09605bd6653cdd054b3" translate="yes" xml:space="preserve">
          <source>The sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them.</source>
          <target state="translated">本ガイドのサンプルアプリには、ヒーローをフェッチして追加・削除・更新ができる「Tour of Heroes」の例の簡易版が収録されています。</target>
        </trans-unit>
        <trans-unit id="bd98dd1aa7ebf63714ed70c77d9c5c0dbaace3a4" translate="yes" xml:space="preserve">
          <source>The sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them. The following sections show examples of the data-update methods from the sample's &lt;code&gt;HeroesService&lt;/code&gt;.</source>
          <target state="translated">このガイドのサンプルアプリには、ヒーローを取得し、ユーザーがヒーローを追加、削除、更新できるようにする「TourofHeroes」の例の簡略版が含まれています。次のセクションでは、サンプルの &lt;code&gt;HeroesService&lt;/code&gt; からのデータ更新メソッドの例を示します。</target>
        </trans-unit>
        <trans-unit id="006cff79a45782fa6207fcb043d6c24706576a90" translate="yes" xml:space="preserve">
          <source>The sample app has an &lt;code&gt;AuthService&lt;/code&gt; that produces an authorization token. Here is its &lt;code&gt;AuthInterceptor&lt;/code&gt; that injects that service to get the token and adds an authorization header with that token to every outgoing request:</source>
          <target state="translated">サンプルアプリには、認証トークンを生成する &lt;code&gt;AuthService&lt;/code&gt; があります。以下は、そのサービスを注入してトークンを取得し、そのトークンを含む認証ヘッダーをすべての送信リクエストに追加する &lt;code&gt;AuthInterceptor&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4b25f5e76871ab40b71bff3adfc28a5e339486c0" translate="yes" xml:space="preserve">
          <source>The sample app imports &lt;code&gt;GreetingModule&lt;/code&gt; and uses its &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method one time, in &lt;code&gt;AppModule&lt;/code&gt;. Registering it once like this prevents multiple instances.</source>
          <target state="translated">サンプルアプリは &lt;code&gt;GreetingModule&lt;/code&gt; をインポートし、その &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを &lt;code&gt;AppModule&lt;/code&gt; で 1回使用します。このように一度登録すると、複数のインスタンスが防止されます。</target>
        </trans-unit>
        <trans-unit id="3d5566f26037b1279c82bb0b83438b569cab6209" translate="yes" xml:space="preserve">
          <source>The sample app imports &lt;code&gt;GreetingModule&lt;/code&gt; and uses its &lt;code&gt;forRoot()&lt;/code&gt; method one time, in &lt;code&gt;AppModule&lt;/code&gt;. Registering it once like this prevents multiple instances.</source>
          <target state="translated">サンプルアプリ輸入 &lt;code&gt;GreetingModule&lt;/code&gt; 及びその使用 &lt;code&gt;forRoot()&lt;/code&gt; 内のメソッド1時間、 &lt;code&gt;AppModule&lt;/code&gt; 。このように一度登録すると、複数のインスタンスを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="bbdc02b77eadf3cafece29a3b6adb0bfb784c563" translate="yes" xml:space="preserve">
          <source>The sample application</source>
          <target state="translated">サンプルアプリケーション</target>
        </trans-unit>
        <trans-unit id="3bad0c6f1f3a97ac6c5ed1daf3fec0440d87ec3a" translate="yes" xml:space="preserve">
          <source>The sample application doesn't talk to a server. Fortunately, you have another way to demonstrate an asynchronous router hook.</source>
          <target state="translated">このサンプルアプリケーションはサーバとは通信しません。幸いなことに、非同期ルータフックを実演する別の方法があります。</target>
        </trans-unit>
        <trans-unit id="d6e9e62f3340a5b7bae48635a40efe5af7a7bf97" translate="yes" xml:space="preserve">
          <source>The sample application for this tutorial helps the Hero Employment Agency find crises for heroes to solve.</source>
          <target state="translated">このチュートリアルのサンプルアプリケーションは、ヒーロー就職エージェントが解決するためのヒーローのための危機を見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2103219c7d79a26e0ff1f6660f7abac30fdaafba" translate="yes" xml:space="preserve">
          <source>The sample application in action</source>
          <target state="translated">アクションのサンプルアプリケーション</target>
        </trans-unit>
        <trans-unit id="1127033a52632203fbf3f5f1079ad39c14f5ea44" translate="yes" xml:space="preserve">
          <source>The sample application's &lt;code&gt;HighlightDirective&lt;/code&gt; sets the background color of an element based on either a data bound color or a default color (lightgray). It also sets a custom property of the element (&lt;code&gt;customProperty&lt;/code&gt;) to &lt;code&gt;true&lt;/code&gt; for no reason other than to show that it can.</source>
          <target state="translated">サンプルアプリケーションの &lt;code&gt;HighlightDirective&lt;/code&gt; は、データバインドされた色またはデフォルトの色（ライトグレー）に基づいて要素の背景色を設定します。また、要素のカスタムプロパティ（ &lt;code&gt;customProperty&lt;/code&gt; ）を、それが可能であることを示す以外に理由なく &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="dc8fd67bc712a242a84db80063d64dc1c8dbd84a" translate="yes" xml:space="preserve">
          <source>The sample code applies the directive's &lt;code&gt;myHighlight&lt;/code&gt; attribute to two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, first without a value (yielding the default color) and then with an assigned color value.</source>
          <target state="translated">サンプルコードは、ディレクティブの &lt;code&gt;myHighlight&lt;/code&gt; 属性を2つの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; タグに適用します。最初は値なし（デフォルトの色を生成）で、次に割り当てられた色の値があります。</target>
        </trans-unit>
        <trans-unit id="379e5310111b19fac04c5edbb88f65ff520ab130" translate="yes" xml:space="preserve">
          <source>The sample form in this guide is used by the &lt;em&gt;Hero Employment Agency&lt;/em&gt; to maintain personal information about heroes. Every hero needs a job. This form helps the agency match the right hero with the right crisis.</source>
          <target state="translated">このガイドのサンプルフォームは、&lt;em&gt;ヒーローの&lt;/em&gt;個人情報を維持するために&lt;em&gt;ヒーロー職業紹介所&lt;/em&gt;によって使用されます。すべてのヒーローには仕事が必要です。このフォームは、代理店が適切なヒーローと適切な危機を一致させるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1cdce23d28dd1f2b7da807f6e9aa5f945c0a228f" translate="yes" xml:space="preserve">
          <source>The sample form uses some style classes from &lt;a href=&quot;http://getbootstrap.com/css/&quot;&gt;Twitter Bootstrap&lt;/a&gt;: &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt;. To use these styles, the app's style sheet imports the library.</source>
          <target state="translated">サンプルフォームは、いくつかのスタイルからクラス使用しています&lt;a href=&quot;http://getbootstrap.com/css/&quot;&gt;Twitterのブートストラップ&lt;/a&gt;： &lt;code&gt;container&lt;/code&gt; 、 &lt;code&gt;form-group&lt;/code&gt; 、 &lt;code&gt;form-control&lt;/code&gt; 、および &lt;code&gt;btn&lt;/code&gt; 。これらのスタイルを使用するために、アプリのスタイルシートはライブラリをインポートします。</target>
        </trans-unit>
        <trans-unit id="b4c357483fbca3561b110b150693b24ea9c304f2" translate="yes" xml:space="preserve">
          <source>The sample form uses some style classes from &lt;a href=&quot;https://getbootstrap.com/css/&quot;&gt;Twitter Bootstrap&lt;/a&gt;: &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt;. To use these styles, the app's style sheet imports the library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6231d5bf243f4874525430c1c1584ebea7435e57" translate="yes" xml:space="preserve">
          <source>The sample in this guide uses the default XLIFF 1.2 format.</source>
          <target state="translated">このガイドのサンプルでは、デフォルトのXLIFF 1.2フォーマットを使用しています。</target>
        </trans-unit>
        <trans-unit id="180848306acfa9ca7d56cebe3f38672d87a67bb8" translate="yes" xml:space="preserve">
          <source>The sample includes an &lt;em&gt;npm package search&lt;/em&gt; feature.</source>
          <target state="translated">サンプルには、&lt;em&gt;npmパッケージ検索&lt;/em&gt;機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="64704b7b5364cf1f994994b077e96754cf4434c3" translate="yes" xml:space="preserve">
          <source>The sample routing application does not include routing by default. When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to create a project that does use routing, set the &lt;code&gt;--routing&lt;/code&gt; option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command) or a new app (using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate app&lt;/code&gt;&lt;/a&gt; command), specify the &lt;code&gt;--routing&lt;/code&gt; option. This tells the CLI to include the &lt;code&gt;@angular/router&lt;/code&gt; npm package and create a file named &lt;code&gt;app-routing.module.ts&lt;/code&gt;. You can then use routing in any NgModule that you add to the project or app.</source>
          <target state="translated">サンプルルーティングアプリケーションには、デフォルトでルーティングが含まれていません。あなたが使用する場合は&lt;a href=&quot;cli&quot;&gt;角度CLIを&lt;/a&gt;使用するルーティングを行うプロジェクトを作成するには、設定 &lt;code&gt;--routing&lt;/code&gt; プロジェクトやアプリのオプションを、各NgModuleについて。新しいプロジェクト（CLI &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;コマンドを使用）または新しいアプリ（&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate app&lt;/code&gt; &lt;/a&gt;コマンドを使用）を作成または初期化するときは、 &lt;code&gt;--routing&lt;/code&gt; オプションを指定します。これは、CLIに &lt;code&gt;@angular/router&lt;/code&gt; npmパッケージを含め、 &lt;code&gt;app-routing.module.ts&lt;/code&gt; という名前のファイルを作成するように指示します。その後、プロジェクトまたはアプリに追加する任意のNgModuleでルーティングを使用できます。</target>
        </trans-unit>
        <trans-unit id="845d81bff91c35f9ca3a0e8902c70651cdbae3e9" translate="yes" xml:space="preserve">
          <source>The sample routing application does not include routing by default. When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to create a project that will use routing, set the &lt;code&gt;--routing&lt;/code&gt; option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command) or a new app (using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate app&lt;/code&gt;&lt;/a&gt; command), specify the &lt;code&gt;--routing&lt;/code&gt; option. This tells the CLI to include the &lt;code&gt;@angular/router&lt;/code&gt; npm package and create a file named &lt;code&gt;app-routing.module.ts&lt;/code&gt;. You can then use routing in any NgModule that you add to the project or app.</source>
          <target state="translated">サンプルのルーティングアプリケーションには、デフォルトではルーティングが含まれていません。あなたが使用する場合は&lt;a href=&quot;cli&quot;&gt;角度CLIを&lt;/a&gt;ルーティングを使用するプロジェクトを作成するには、設定 &lt;code&gt;--routing&lt;/code&gt; プロジェクトやアプリのオプションを、各NgModuleについて。新しいプロジェクト（CLI &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;コマンドを使用）または新しいアプリ（&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate app&lt;/code&gt; &lt;/a&gt;コマンドを使用）を作成または初期化する場合は、 &lt;code&gt;--routing&lt;/code&gt; オプションを指定します。これは、CLIに &lt;code&gt;@angular/router&lt;/code&gt; npmパッケージを含め、 &lt;code&gt;app-routing.module.ts&lt;/code&gt; という名前のファイルを作成するように指示します。その後、プロジェクトまたはアプリに追加した任意のNgModuleでルーティングを使用できます。</target>
        </trans-unit>
        <trans-unit id="48715b36d405c3c723bb6e1a83d110dfa8e48522" translate="yes" xml:space="preserve">
          <source>The sample source code for this page, located in &lt;code&gt;context/examples/docs-style-guide&lt;/code&gt;, contains examples of every code snippet markup described in this section.</source>
          <target state="translated">&lt;code&gt;context/examples/docs-style-guide&lt;/code&gt; にあるこのページのサンプルソースコードには、このセクションで説明するすべてのコードスニペットマークアップの例が含まれています。</target>
        </trans-unit>
        <trans-unit id="f97b4d7dd36c622166d42d22b9b96141f0cd7661" translate="yes" xml:space="preserve">
          <source>The sample web server for this guide is based on the popular &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework.</source>
          <target state="translated">このガイドのサンプルWebサーバーは、一般的な&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;フレームワークに基づいています。</target>
        </trans-unit>
        <trans-unit id="f1d88c2387cd1e3449b58fad506e327b13a8cf48" translate="yes" xml:space="preserve">
          <source>The sample's &lt;code&gt;CraigComponent&lt;/code&gt; explores this question. &lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;Looking back&lt;/a&gt;, you see that the &lt;code&gt;Alex&lt;/code&gt; component &lt;em&gt;extends&lt;/em&gt; (&lt;em&gt;inherits&lt;/em&gt;) from a class named &lt;code&gt;Base&lt;/code&gt;.</source>
          <target state="translated">サンプルの &lt;code&gt;CraigComponent&lt;/code&gt; はこの質問を調査します。&lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;振り返る&lt;/a&gt;と、 &lt;code&gt;Alex&lt;/code&gt; コンポーネント&lt;em&gt;が&lt;/em&gt; &lt;code&gt;Base&lt;/code&gt; という名前のクラスから&lt;em&gt;拡張&lt;/em&gt;（&lt;em&gt;継承&lt;/em&gt;）していることがわかります。</target>
        </trans-unit>
        <trans-unit id="b7f1caebac3561b1bd11adb25a659f920576c1e5" translate="yes" xml:space="preserve">
          <source>The schema defines the types and default values of variables used in the schematic. For example, the hypothetical &quot;Hello World&quot; schematic might have the following schema.</source>
          <target state="translated">スキーマは、回路図で使用される変数の型とデフォルト値を定義します。例えば、仮想的な &quot;Hello World &quot;のスキーマは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="28cbf3d458ff001f8ea8f2ca87d3187c8823c817" translate="yes" xml:space="preserve">
          <source>The schema for a &lt;code&gt;stackblitz.json&lt;/code&gt; hasn't been documented yet but looking at the &lt;code&gt;stackblitz.json&lt;/code&gt; files in the example folders should tell you most of what you need to know.</source>
          <target state="translated">&lt;code&gt;stackblitz.json&lt;/code&gt; のスキーマはまだ文書化されていませんが、サンプルフォルダーの &lt;code&gt;stackblitz.json&lt;/code&gt; ファイルを見ると、知っておくべきことのほとんどがわかるはずです。</target>
        </trans-unit>
        <trans-unit id="4ddb5588b2b1fc36ef16d673582bc1ea813181ee" translate="yes" xml:space="preserve">
          <source>The schematic collection can be a powerful tool for creating, modifying, and maintaining any software project, but is particularly useful for customizing Angular projects to suit the particular needs of your own organization. You might use schematics, for example, to generate commonly-used UI patterns or specific components, using predefined templates or layouts. You can use schematics to enforce architectural rules and conventions, making your projects consistent and inter-operative.</source>
          <target state="translated">スケマティックコレクションは、あらゆるソフトウェアプロジェクトの作成、修正、メンテナンスのための強力なツールですが、特に組織の特定のニーズに合わせて Angular プロジェクトをカスタマイズするのに便利です。例えば、よく使われるUIパターンや特定のコンポーネントを、定義済みのテンプレートやレイアウトを使って生成するために、スケマティックを使うことができます。スケマティックを使用してアーキテクチャのルールや規約を強制し、プロジェクトを一貫性のある相互運用性のあるものにすることができます。</target>
        </trans-unit>
        <trans-unit id="93cfe4e4adbbfded84c6c8f071cc59a7887190fb" translate="yes" xml:space="preserve">
          <source>The schematic or collection:schematic to generate.</source>
          <target state="translated">生成する回路図またはコレクション:回路図。</target>
        </trans-unit>
        <trans-unit id="644126d257f84f676df9b8c93031e7697e56a4cb" translate="yes" xml:space="preserve">
          <source>The scope for the new routing module.</source>
          <target state="translated">新しいルーティングモジュールのスコープ。</target>
        </trans-unit>
        <trans-unit id="5d45510eb393444a2c062d97a89bb09d19beb1e7" translate="yes" xml:space="preserve">
          <source>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</source>
          <target state="translated">参照変数のスコープはテンプレート全体です。そのため、実行時の値が予測できなくなるので、同じテンプレート内で同じ変数名を複数回定義しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="5760dd13dc5237be2a7e34da16871a6fc9a53718" translate="yes" xml:space="preserve">
          <source>The scope of the service instance is the parent component and its children. Components outside this component subtree have no access to the service or their communications.</source>
          <target state="translated">サービス インスタンスのスコープは、親コンポーネントとその子コンポーネントです。このコンポーネントサブツリーの外にあるコンポーネントは、サービスやその通信にアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="ed54e7c3473aae483d10d6a344247055bd214d68" translate="yes" xml:space="preserve">
          <source>The scoping rules outlined earlier apply to each of these loading patterns.</source>
          <target state="translated">先に概説したスコープルールは、これらのローディングパターンのそれぞれに適用されます。</target>
        </trans-unit>
        <trans-unit id="6ca21198000899209ea533a19e8cd0f64d9427fc" translate="yes" xml:space="preserve">
          <source>The search box on the Dashboard page is ignored.</source>
          <target state="translated">ダッシュボードページの検索ボックスは無視されます。</target>
        </trans-unit>
        <trans-unit id="42ac7068ce0b0eff086a7cd61efd10c482ea26ac" translate="yes" xml:space="preserve">
          <source>The search object</source>
          <target state="translated">検索オブジェクト</target>
        </trans-unit>
        <trans-unit id="986d1babf2cbea214b8a121acd469431369cde38" translate="yes" xml:space="preserve">
          <source>The second &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; aliases the child component property name &lt;code&gt;masterName&lt;/code&gt; as &lt;code&gt;'master'&lt;/code&gt;.</source>
          <target state="translated">二 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 子コンポーネントのプロパティ名の別名 &lt;code&gt;masterName&lt;/code&gt; として &lt;code&gt;'master'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="890b72d0bae3cb1fcd8858dc63a35a3adb6d2b0e" translate="yes" xml:space="preserve">
          <source>The second and third test reveal an important limitation. The Angular testing environment does &lt;em&gt;not&lt;/em&gt; know that the test changed the component's &lt;code&gt;title&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; service responds to &lt;em&gt;asynchronous activities&lt;/em&gt; such as promise resolution, timers, and DOM events. But a direct, synchronous update of the component property is invisible. The test must call &lt;code&gt;fixture.detectChanges()&lt;/code&gt; manually to trigger another cycle of change detection.</source>
          <target state="translated">2番目と3番目のテストは、重要な制限を明らかにします。Angularテスト環境は、テストによってコンポーネントの &lt;code&gt;title&lt;/code&gt; 変更されたことを認識していませ&lt;em&gt;ん&lt;/em&gt;。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; のへのサービス応答&lt;em&gt;の非同期活動&lt;/em&gt;などの約束解像度、タイマー、およびDOMイベントなど。ただし、コンポーネントプロパティの直接の同期更新は表示されません。テストでは、変更検出の別のサイクルをトリガーするために、 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; を手動で呼び出す必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
