<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="507213e3087048a335abbd087b122b29d7274391" translate="yes" xml:space="preserve">
          <source>Here is the markup for the first of these callouts.</source>
          <target state="translated">以下は、これらのコールアウトの最初のマークアップです。</target>
        </trans-unit>
        <trans-unit id="9b90d7defb29486440935655cf61803f05d03963" translate="yes" xml:space="preserve">
          <source>Here is the markup for these alerts.</source>
          <target state="translated">これらのアラートのマークアップは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7ae5b951b35f869a8a6b02613f7eda4975f89343" translate="yes" xml:space="preserve">
          <source>Here is the markup for this file tree.</source>
          <target state="translated">このファイルツリーのマークアップは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a2fe150369bad5a348a282aa3a05ad8386dd51fe" translate="yes" xml:space="preserve">
          <source>Here is the markup for this table.</source>
          <target state="translated">このテーブルのマークアップは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ffbf137688538ebb74fc8824377d23da85c0e7ed" translate="yes" xml:space="preserve">
          <source>Here is the parent, &lt;code&gt;CountdownViewChildParentComponent&lt;/code&gt;:</source>
          <target state="translated">これが親の &lt;code&gt;CountdownViewChildParentComponent&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="305818b1af808bc21c8b481f7c4cdc0dcded567c" translate="yes" xml:space="preserve">
          <source>Here is the revised &lt;code&gt;HeroService&lt;/code&gt; that injects &lt;code&gt;Logger&lt;/code&gt;, side by side with the previous service for comparison.</source>
          <target state="translated">以下は、比較のために以前のサービスと並べて &lt;code&gt;Logger&lt;/code&gt; を挿入する改訂された &lt;code&gt;HeroService&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1b66536e9ef97cef4faab2e6486b3e3341657864" translate="yes" xml:space="preserve">
          <source>Here is the source from the &lt;code&gt;src/app/&lt;/code&gt; folder.</source>
          <target state="translated">これは &lt;code&gt;src/app/&lt;/code&gt; フォルダーからのソースです。</target>
        </trans-unit>
        <trans-unit id="defdb414b6ad2449a9c07d869f058f5e58f4b417" translate="yes" xml:space="preserve">
          <source>Here it binds the &lt;code&gt;hero.name&lt;/code&gt; property to the HTML textbox so that data can flow &lt;em&gt;in both directions:&lt;/em&gt; from the &lt;code&gt;hero.name&lt;/code&gt; property to the textbox, and from the textbox back to the &lt;code&gt;hero.name&lt;/code&gt;.</source>
          <target state="translated">ここではそれが結合 &lt;code&gt;hero.name&lt;/code&gt; のデータが流れることができるように、HTMLテキストボックスにプロパティを&lt;em&gt;：両方向で&lt;/em&gt;から &lt;code&gt;hero.name&lt;/code&gt; のテキストボックスにプロパティ、およびテキストボックスにバックから &lt;code&gt;hero.name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08272db39313455a9af93a6df856a1e60bf114b3" translate="yes" xml:space="preserve">
          <source>Here they are together, after translation:</source>
          <target state="translated">ここでは、翻訳後の彼らが一緒になっています。</target>
        </trans-unit>
        <trans-unit id="cdcad7df3e4cfd3543f37881241493108acfc809" translate="yes" xml:space="preserve">
          <source>Here we decided that &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; error is treated as a successful validation, because failure to make a validation request does not necessarily mean that the alter ego is invalid. You could handle the error differently and return the &lt;code&gt;ValidationError&lt;/code&gt; object instead.</source>
          <target state="translated">ここでは、検証リクエストの作成に失敗しても必ずしも変更エゴが無効であるとは限らないため、 &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; エラーは検証の成功として扱われると判断しました。エラーを別の方法で処理し、代わりに &lt;code&gt;ValidationError&lt;/code&gt; オブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="79f90147ab759834dc4640b93285fd5ae43cb71a" translate="yes" xml:space="preserve">
          <source>Here we see the parent and child working together.</source>
          <target state="translated">ここでは、親子で協力している姿が見られます。</target>
        </trans-unit>
        <trans-unit id="8771b8deaa3683dcf7a75cf6959eaf7df50ecaa9" translate="yes" xml:space="preserve">
          <source>Here you can see the use of a &lt;code&gt;click()&lt;/code&gt; event binding and the property binding syntax (&lt;code&gt;[attr.fill]=&quot;fillColor&quot;&lt;/code&gt;).</source>
          <target state="translated">ここでは、 &lt;code&gt;click()&lt;/code&gt; イベントバインディングの使用とプロパティバインディング構文（ &lt;code&gt;[attr.fill]=&quot;fillColor&quot;&lt;/code&gt; ）を確認できます。</target>
        </trans-unit>
        <trans-unit id="511a4f717c3a359e7f572279ad68d540c4bb458e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a test that runs the command builder. The test uses the builder to run the &lt;code&gt;ls&lt;/code&gt; command, then validates that it ran successfully and listed the proper files.</source>
          <target state="translated">コマンドビルダーを実行するテストの例を次に示します。テストはビルダーを使用して &lt;code&gt;ls&lt;/code&gt; コマンドを実行し、それが正常に実行されたことを検証し、適切なファイルをリストします。</target>
        </trans-unit>
        <trans-unit id="c7af86c25dbdcade0b3ecf3d8ae93ad1b2dba979" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a test that runs the command builder. The test uses the builder to run the &lt;code&gt;node --print 'foo'&lt;/code&gt; command, then validates that the &lt;code&gt;logger&lt;/code&gt; contains an entry for &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">コマンドビルダーを実行するテストの例を次に示します。このテストでは、ビルダーを使用して &lt;code&gt;node --print 'foo'&lt;/code&gt; コマンドを実行し、 &lt;code&gt;logger&lt;/code&gt; に &lt;code&gt;foo&lt;/code&gt; のエントリが含まれていることを検証します。</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">次に例を示します。</target>
        </trans-unit>
        <trans-unit id="d2ea21d3443d959148c1cadad9c432d2da8241bc" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the code for the final version of the application:</source>
          <target state="translated">アプリケーションの最終バージョンのコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="29d75374abffd4bb69efcb9d1c150b3130b488ef" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; that takes a &lt;code&gt;UserServiceConfig&lt;/code&gt; object:</source>
          <target state="translated">次に、 &lt;code&gt;UserServiceConfig&lt;/code&gt; オブジェクトを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 示します。</target>
        </trans-unit>
        <trans-unit id="8ce266b9f7140d8aadcec223f123a37e1acef56f" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; in action.</source>
          <target state="translated">これが &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; の動作です。</target>
        </trans-unit>
        <trans-unit id="210602b8fc8ab2d5642913c9982cbff1a4f4b065" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;HeroContactComponent&lt;/code&gt;, which demonstrates the qualifying decorators.</source>
          <target state="translated">以下は、適格なデコレーターを示す &lt;code&gt;HeroContactComponent&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d9307f3ff504a7d92b897a830111a7e46368cf89" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;forRoot()&lt;/code&gt; that takes a &lt;code&gt;UserServiceConfig&lt;/code&gt; object:</source>
          <target state="translated">ここだ &lt;code&gt;forRoot()&lt;/code&gt; とる &lt;code&gt;UserServiceConfig&lt;/code&gt; のオブジェクトは：</target>
        </trans-unit>
        <trans-unit id="267c0db0ea651fe8d15656fadfdbd9b520beca00" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;AfterView&lt;/em&gt; in action:</source>
          <target state="translated">これが&lt;em&gt;AfterViewの&lt;/em&gt;動作です：</target>
        </trans-unit>
        <trans-unit id="a1651a820337a1810f83cfeaae7fc899365266c2" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;Alex&lt;/em&gt; and family in action.</source>
          <target state="translated">これが&lt;em&gt;アレックス&lt;/em&gt;と家族の行動です。</target>
        </trans-unit>
        <trans-unit id="abf25e2fea0f9e2ba609a88d3e7f6d6c72dae972" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;Alice&lt;/em&gt;, &lt;em&gt;Barry&lt;/em&gt;, and family in action.</source>
          <target state="translated">ここだ&lt;em&gt;アリス&lt;/em&gt;、&lt;em&gt;バリー&lt;/em&gt;、およびアクションで家族が。</target>
        </trans-unit>
        <trans-unit id="2373344a9550daa83bd9efe5a057e0eb47e2963c" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;Barry&lt;/em&gt;.</source>
          <target state="translated">こちらが&lt;em&gt;バリー&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="58dfcfb5bd2344e21c4f9234e1a0a787c9ad52c8" translate="yes" xml:space="preserve">
          <source>Here's a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test that demonstrates the data flow you'd expect in the real world.</source>
          <target state="translated">以下は、実際に期待するデータフローを示す &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; テストです。</target>
        </trans-unit>
        <trans-unit id="3b04099851b53646b03c500d744979f7ed478b27" translate="yes" xml:space="preserve">
          <source>Here's a &lt;code&gt;provider&lt;/code&gt; example of the problem.</source>
          <target state="translated">これが問題の &lt;code&gt;provider&lt;/code&gt; 例です。</target>
        </trans-unit>
        <trans-unit id="332ad9d1d1c0ec3216151d16383d075136fa7637" translate="yes" xml:space="preserve">
          <source>Here's a brief description of each exercise:</source>
          <target state="translated">それぞれの運動について簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="342d9dca61b9e4422f88fa45aa82e665fc20fb7d" translate="yes" xml:space="preserve">
          <source>Here's a child view that displays a hero's name in an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; にヒーローの名前を表示する子ビューは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2dc49e2bfd96abcc48b54d3c3672ed317de547d8" translate="yes" xml:space="preserve">
          <source>Here's a closer look at the code.</source>
          <target state="translated">コードを詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="c8cfdd2d432c327dabf4c942f49ee2de0e323ab4" translate="yes" xml:space="preserve">
          <source>Here's a component with an input field for a single control implemented using reactive forms.</source>
          <target state="translated">リアクティブフォームを使用して実装された単一のコントロールの入力フィールドを持つコンポーネントは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="771c4365239b6adac9b51419ce8e2170cdf8bc02" translate="yes" xml:space="preserve">
          <source>Here's a conforming example</source>
          <target state="translated">以下に適合例を示します。</target>
        </trans-unit>
        <trans-unit id="67c50f15b5597454aa71b847527a69b00db4940f" translate="yes" xml:space="preserve">
          <source>Here's a full-featured application of &lt;code&gt;NgFor&lt;/code&gt;, written both ways:</source>
          <target state="translated">&lt;code&gt;NgFor&lt;/code&gt; の全機能を備えたアプリケーションを以下に示します。</target>
        </trans-unit>
        <trans-unit id="9d07ea3700c1b14d35ec087c49afa25711851988" translate="yes" xml:space="preserve">
          <source>Here's a pertinent excerpt from the template:</source>
          <target state="translated">ここにテンプレートからの適切な抜粋があります。</target>
        </trans-unit>
        <trans-unit id="2d7220461d3f8c562324ad099c90d86389d03dea" translate="yes" xml:space="preserve">
          <source>Here's a revised version that defaults to &lt;code&gt;parent&lt;/code&gt; but also accepts an optional second parameter for a different parent class interface.</source>
          <target state="translated">デフォルトは &lt;code&gt;parent&lt;/code&gt; が、別の親クラスインターフェースのオプションの2番目のパラメーターも受け入れる改訂バージョンです。</target>
        </trans-unit>
        <trans-unit id="e1e1e0ffc9b6aee2fef781d2718e2fd868a214ee" translate="yes" xml:space="preserve">
          <source>Here's a simple root NgModule definition.</source>
          <target state="translated">ここに簡単なルートNgModuleの定義があります。</target>
        </trans-unit>
        <trans-unit id="13b657074051b1dd3d3aaa6052c01e4cd48c1ba0" translate="yes" xml:space="preserve">
          <source>Here's a summary of the stand-alone functions, in order of likely utility:</source>
          <target state="translated">単体の機能を、実用性の高い順にまとめてみました。</target>
        </trans-unit>
        <trans-unit id="d52092227c7976ce49b8aa2a6d6cca685babff11" translate="yes" xml:space="preserve">
          <source>Here's a test demonstrating the component's behavior when the observed &lt;code&gt;id&lt;/code&gt; refers to an existing hero:</source>
          <target state="translated">観察された &lt;code&gt;id&lt;/code&gt; 既存のヒーローを参照する場合のコンポーネントの動作を示すテストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ffd0ce6376a8b892a0a4dd44632d7f49de3e0e31" translate="yes" xml:space="preserve">
          <source>Here's a visual idea of where this tutorial leads, beginning with the &quot;Dashboard&quot; view and the most heroic heroes:</source>
          <target state="translated">ここでは、「ダッシュボード」ビューと最も英雄的な英雄たちから始まる、このチュートリアルがどのように進むのか、視覚的なアイデアをご紹介します。</target>
        </trans-unit>
        <trans-unit id="a58b171fff7fdf9107296da5f6e8439cb68ac2fa" translate="yes" xml:space="preserve">
          <source>Here's an embedded live example for this guide.</source>
          <target state="translated">このガイドには、ライブの例が組み込まれています。</target>
        </trans-unit>
        <trans-unit id="f8987e6cd96e95c2cfb4f4fd4c1bed76aaee7fc7" translate="yes" xml:space="preserve">
          <source>Here's an example in which the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; is two-way bound to the &lt;code&gt;SizerComponent&lt;/code&gt;:</source>
          <target state="translated">ここではその一例だ &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; が双方向にバインドされ &lt;code&gt;SizerComponent&lt;/code&gt; は：</target>
        </trans-unit>
        <trans-unit id="2bdfacca7ab5d0824f43836325291190197ca019" translate="yes" xml:space="preserve">
          <source>Here's an example of a service class that logs to the browser console.</source>
          <target state="translated">ブラウザのコンソールにログを記録するサービスクラスの例です。</target>
        </trans-unit>
        <trans-unit id="99e679bc16af7a1f9d179d8466452325faeeffb8" translate="yes" xml:space="preserve">
          <source>Here's an example of an error message added to the &lt;em&gt;name&lt;/em&gt; input box:</source>
          <target state="translated">&lt;em&gt;名前&lt;/em&gt;入力ボックスに追加されたエラーメッセージの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="a801f1de6030e88253033ddfef1b99db9927d97d" translate="yes" xml:space="preserve">
          <source>Here's an example of basic metadata for &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; の基本的なメタデータの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="45774d5d345882a71ea0fc59337a3b86d4253823" translate="yes" xml:space="preserve">
          <source>Here's an example of binding to the &lt;code&gt;colSpan&lt;/code&gt; property. Notice that it's not &lt;code&gt;colspan&lt;/code&gt;, which is the attribute, spelled with a lowercase &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;colSpan&lt;/code&gt; プロパティへのバインドの例を次に示します。これは、小文字 &lt;code&gt;s&lt;/code&gt; で綴られた属性である &lt;code&gt;colspan&lt;/code&gt; ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4dbc92e76d1afd27809635974b4f4a7190dd2709" translate="yes" xml:space="preserve">
          <source>Here's an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console:</source>
          <target state="translated">ここでは、受信したメッセージをコンソールにログに記録するオブザーバを使って、シンプルなオブザーバブルを作成して購読する例を示します。</target>
        </trans-unit>
        <trans-unit id="044030613cb78d7ccdd179ec6255d8b66b6c4172" translate="yes" xml:space="preserve">
          <source>Here's an example of using keyframes to create a pulse effect:</source>
          <target state="translated">ここでは、キーフレームを使ってパルス効果を出す例を紹介します。</target>
        </trans-unit>
        <trans-unit id="fff667011fdbcb48393c9cb30c030e165456b690" translate="yes" xml:space="preserve">
          <source>Here's an example of using the &lt;code&gt;catchError&lt;/code&gt; operator to do this:</source>
          <target state="translated">これは、 &lt;code&gt;catchError&lt;/code&gt; 演算子を使用してこれを行う例です。</target>
        </trans-unit>
        <trans-unit id="541970f9030afc36a95c731be207ea924fb5f0f4" translate="yes" xml:space="preserve">
          <source>Here's an example that demonstrates the basic usage model by showing how an observable could be used to provide geolocation updates.</source>
          <target state="translated">ここでは、ジオロケーションの更新を提供するために観測可能なオブジェクトをどのように使うかを示すことで、基本的な使用法のモデルを示しています。</target>
        </trans-unit>
        <trans-unit id="2639f3ab4611df11a6c31d7f75243294cbb8cbd4" translate="yes" xml:space="preserve">
          <source>Here's an example that excerpts certain scripts from &lt;code&gt;package.json&lt;/code&gt; into a partial file named &lt;code&gt;package.1.json&lt;/code&gt;.</source>
          <target state="translated">以下は、 &lt;code&gt;package.json&lt;/code&gt; から特定のスクリプトを抜粋して、 &lt;code&gt;package.1.json&lt;/code&gt; という名前の部分ファイルに入れる例です。</target>
        </trans-unit>
        <trans-unit id="61f04271f847d0c8988094c50219a148be404036" translate="yes" xml:space="preserve">
          <source>Here's an example.</source>
          <target state="translated">一例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="51e85e4e8113fb3e1f07e1727e78d73f5f0043e6" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
          <target state="translated">一例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="9e0c943ae02f8fdb73167474d07a54374b16f800" translate="yes" xml:space="preserve">
          <source>Here's an illustrative example.</source>
          <target state="translated">ここでは例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="e88db74062a516f02d9d37bb5e8b39b0a74ea59d" translate="yes" xml:space="preserve">
          <source>Here's another code sample using the wildcard state together with our previous example using the &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states. Instead of defining each state-to-state transition pair, we're now saying that any transition to &lt;code&gt;closed&lt;/code&gt; takes 1 second, and any transition to &lt;code&gt;open&lt;/code&gt; takes 0.5 seconds.</source>
          <target state="translated">ワイルドカード状態を使用した別のコードサンプルと、 &lt;code&gt;open&lt;/code&gt; た状態と &lt;code&gt;closed&lt;/code&gt; 状態を使用した前の例を次に示します。状態から状態への各遷移ペアを定義する代わりに、 &lt;code&gt;closed&lt;/code&gt; への遷移には1 秒かかり、 &lt;code&gt;open&lt;/code&gt; への遷移には0.5秒かかると言います。</target>
        </trans-unit>
        <trans-unit id="70eda6d168054a0865515e0443b33d2b23af65a0" translate="yes" xml:space="preserve">
          <source>Here's another test that calls &lt;code&gt;HTMLElement.querySelector&lt;/code&gt; to get the paragraph element and look for the banner text:</source>
          <target state="translated">&lt;code&gt;HTMLElement.querySelector&lt;/code&gt; を呼び出して段落要素を取得し、バナーテキストを探す別のテストを次に示します。</target>
        </trans-unit>
        <trans-unit id="3dc08816743a52195484363d2e3c24a2b3c9d87d" translate="yes" xml:space="preserve">
          <source>Here's another test that changes the component's &lt;code&gt;title&lt;/code&gt; property &lt;em&gt;before&lt;/em&gt; calling &lt;code&gt;fixture.detectChanges()&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; を呼び出す&lt;em&gt;前に&lt;/em&gt;コンポーネントの &lt;code&gt;title&lt;/code&gt; プロパティを変更する別のテストを示します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3627df60550e33b9632085fa920812ce9f528a36" translate="yes" xml:space="preserve">
          <source>Here's are the two corresponding code snippets displayed side-by-side.</source>
          <target state="translated">ここでは、2つの対応するコードスニペットが並んで表示されています。</target>
        </trans-unit>
        <trans-unit id="3f7ca5ab98fbaecc24dee9341e08f0fa1f44c1a9" translate="yes" xml:space="preserve">
          <source>Here's how it works.</source>
          <target state="translated">その仕組みをご紹介します。</target>
        </trans-unit>
        <trans-unit id="c9765338cf911741bd6fdd71fe0e9d288e68f815" translate="yes" xml:space="preserve">
          <source>Here's how the harness should work when you're done coding.</source>
          <target state="translated">コーディングが終わったら、ハーネスはどのように動作するかを説明します。</target>
        </trans-unit>
        <trans-unit id="f8b16882caea78c4ae20585288bb3408690cd2a3" translate="yes" xml:space="preserve">
          <source>Here's how the user will experience this version of the app:</source>
          <target state="translated">ここでは、ユーザーがこのバージョンのアプリをどのように体験するかを説明します。</target>
        </trans-unit>
        <trans-unit id="4288a1aa86a0ff0cdf195279ed93bc028ad830c8" translate="yes" xml:space="preserve">
          <source>Here's how to set the attribute without binding in plain HTML:</source>
          <target state="translated">ここでは、プレーンHTMLでバインディングなしで属性を設定する方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="ad7f50209fddbb04ba01574e4233f2906ad1ab57" translate="yes" xml:space="preserve">
          <source>Here's how you might begin:</source>
          <target state="translated">ここからが本題です。</target>
        </trans-unit>
        <trans-unit id="7e296845164394524708679f8487b23c5b3b8bb1" translate="yes" xml:space="preserve">
          <source>Here's how you might rewrite one of the &lt;code&gt;MasterService&lt;/code&gt; tests in that style.</source>
          <target state="translated">次に、 &lt;code&gt;MasterService&lt;/code&gt; テストの1つをそのスタイルで書き換える方法を示します。</target>
        </trans-unit>
        <trans-unit id="3016acc8c67f96365b961ff1184679e2556919c4" translate="yes" xml:space="preserve">
          <source>Here's how you might update the authorization header (after the old token expired) before making the next request.</source>
          <target state="translated">次のリクエストを行う前に (古いトークンが期限切れになった後に)認可ヘッダを更新する方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="9117f64adc27738efa3e0c09ed2e0b5bf8192560" translate="yes" xml:space="preserve">
          <source>Here's the &quot;flying hero&quot; at a more reasonable scale.</source>
          <target state="translated">もっとリーズナブルなスケールの「空飛ぶヒーロー」がこちら。</target>
        </trans-unit>
        <trans-unit id="2022823e06097841ddac1cf7e8178ca2d42a4a76" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; implementation, which follows the pattern for custom pipes described earlier.</source>
          <target state="translated">ここだ &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; のカスタムパイプのパターンは、前述の次の実装は、。</target>
        </trans-unit>
        <trans-unit id="6a3af23f4d1dd133edc136f6262b5e7bda291ff3" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;HeroDetailComponent&lt;/code&gt; constructor:</source>
          <target state="translated">次に、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; コンストラクタを示します。</target>
        </trans-unit>
        <trans-unit id="db5c622d4af61973b5a850f38a6b8490ea24df97" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;NameParentComponent&lt;/code&gt; demonstrating name variations including a name with all spaces:</source>
          <target state="translated">次に、すべてのスペースを含む名前を含む名前のバリエーションを示す &lt;code&gt;NameParentComponent&lt;/code&gt; を示します。</target>
        </trans-unit>
        <trans-unit id="1356893ffa40f8e92ce29acc0e9093499ed4e4f0" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;src&lt;/code&gt; attribute for the &quot;flying hero&quot; image belonging to this page.</source>
          <target state="translated">このページに属する「空飛ぶヒーロー」画像の &lt;code&gt;src&lt;/code&gt; 属性は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1934e4bbd6b06ebbe4498a926009f4a666e04fd4" translate="yes" xml:space="preserve">
          <source>Here's the &lt;em&gt;Crisis Center&lt;/em&gt; URL in this &quot;HTML5 pushState&quot; style:</source>
          <target state="translated">この「HTML5 pushState」スタイルの&lt;em&gt;危機管理センターの&lt;/em&gt; URLは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="47777d17bb1bca6811982891736189adcfcc5a34" translate="yes" xml:space="preserve">
          <source>Here's the Crisis Center URL in this &quot;HTML5 pushState&quot; style:</source>
          <target state="translated">この「HTML5 pushState」スタイルのクライシスセンターのURLがこちらです。</target>
        </trans-unit>
        <trans-unit id="d6f4728904a893243df57b9fc8571044a55d17d1" translate="yes" xml:space="preserve">
          <source>Here's the app in action:</source>
          <target state="translated">アプリの動作はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="9cf2ae56853b24b74c07fa91778a1f965ca1c2a0" translate="yes" xml:space="preserve">
          <source>Here's the brief markup that produced that lengthy snippet:</source>
          <target state="translated">これがその長いスニペットを生成した簡単なマークアップです。</target>
        </trans-unit>
        <trans-unit id="36ec26250a6311e0f6a9d15c00b167cc53c0abd4" translate="yes" xml:space="preserve">
          <source>Here's the complete &lt;code&gt;beforeEach()&lt;/code&gt;, using &lt;code&gt;TestBed.get()&lt;/code&gt;:</source>
          <target state="translated">ここでは完全だ &lt;code&gt;beforeEach()&lt;/code&gt; 使用して、 &lt;code&gt;TestBed.get()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e8038d4fe87223086f55bcb456ce49a9519717a6" translate="yes" xml:space="preserve">
          <source>Here's the complete &lt;code&gt;beforeEach()&lt;/code&gt;, using &lt;code&gt;TestBed.inject()&lt;/code&gt;:</source>
          <target state="translated">ここでは完全だ &lt;code&gt;beforeEach()&lt;/code&gt; 使用して、 &lt;code&gt;TestBed.inject()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="caecf0d5e0ff532d9b371ee05fe69b6c8e3e14b9" translate="yes" xml:space="preserve">
          <source>Here's the complete &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; file with its imports.</source>
          <target state="translated">インポートされた完全な &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; ファイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2f2a29a3cb9bc753449f5909dcff9ed14073cee1" translate="yes" xml:space="preserve">
          <source>Here's the complete test for getting a quote:</source>
          <target state="translated">見積もりを取るための完全テストはこちらです。</target>
        </trans-unit>
        <trans-unit id="6bdcaeaf4077794f77927b6985a2ac0d9be095d9" translate="yes" xml:space="preserve">
          <source>Here's the component's full definition:</source>
          <target state="translated">ここにコンポーネントの完全な定義があります。</target>
        </trans-unit>
        <trans-unit id="62549f1989670813f8a7b7667c8ee151d97fb907" translate="yes" xml:space="preserve">
          <source>Here's the component, its template and styles:</source>
          <target state="translated">これがコンポーネントとそのテンプレートとスタイルです。</target>
        </trans-unit>
        <trans-unit id="df996b8eb08a97d6354f014409427c8d6fcd7be4" translate="yes" xml:space="preserve">
          <source>Here's the conditional paragraph again, this time using &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">もう一度条件付き段落を示します。今回は &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="730aeb3d5f96c7f97f79d7090b9eeccf0261bbcb" translate="yes" xml:space="preserve">
          <source>Here's the final code:</source>
          <target state="translated">これが最終的なコードです。</target>
        </trans-unit>
        <trans-unit id="7743a871c540a8d90d5f0b6b681eb8c8d191f7eb" translate="yes" xml:space="preserve">
          <source>Here's the full, final code for the service:</source>
          <target state="translated">これがサービスの最終的なコードです。</target>
        </trans-unit>
        <trans-unit id="e3f4b1fdcb29f542c15eed5d6f2f98b35f3afc23" translate="yes" xml:space="preserve">
          <source>Here's the latest version of the directive class.</source>
          <target state="translated">ここにディレクティブクラスの最新版があります。</target>
        </trans-unit>
        <trans-unit id="b5b53ab66de81e52c96d692e7bcaea312637cb34" translate="yes" xml:space="preserve">
          <source>Here's the marble testing version of the &lt;code&gt;getQuote()&lt;/code&gt; error test.</source>
          <target state="translated">&lt;code&gt;getQuote()&lt;/code&gt; エラーテストの大理石のテストバージョンを以下に示します。</target>
        </trans-unit>
        <trans-unit id="656487aec53e8c241399400466ff6b0fbb361893" translate="yes" xml:space="preserve">
          <source>Here's the markup for an &quot;avoid&quot; example in the &lt;a href=&quot;styleguide#style-05-03&quot;&gt;&lt;em&gt;Angular Style Guide&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;styleguide#style-05-03&quot;&gt;&lt;em&gt;Angular Style Guideの&lt;/em&gt;&lt;/a&gt;「avoid」の例のマークアップです。</target>
        </trans-unit>
        <trans-unit id="f1ce66c2b3fdb31cf1b0adc605c91b0e16e6d5e3" translate="yes" xml:space="preserve">
          <source>Here's the markup for that example.</source>
          <target state="translated">その例のマークアップです。</target>
        </trans-unit>
        <trans-unit id="da8d856731f03ffe7562995f38730f23d3dcb96a" translate="yes" xml:space="preserve">
          <source>Here's the meat of the spec file setup.</source>
          <target state="translated">スペックファイルの設定のお肉です。</target>
        </trans-unit>
        <trans-unit id="99883629747b9a103f8b3ab3da4d0b4cb0439481" translate="yes" xml:space="preserve">
          <source>Here's the output for the &lt;em&gt;main&lt;/em&gt; bundle of an example app called &lt;code&gt;cli-quickstart&lt;/code&gt;.</source>
          <target state="translated">これが &lt;code&gt;cli-quickstart&lt;/code&gt; というサンプルアプリの&lt;em&gt;メイン&lt;/em&gt;バンドルの出力です。</target>
        </trans-unit>
        <trans-unit id="c32dfe48fc6e040a3debbf88b61e369677d91a75" translate="yes" xml:space="preserve">
          <source>Here's the output of a button-pushing sequence:</source>
          <target state="translated">ボタンを押すシーケンスの出力です。</target>
        </trans-unit>
        <trans-unit id="22bc28d071c5b0a1f933b3662d1adf54f39987a7" translate="yes" xml:space="preserve">
          <source>Here's the previous &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, re-written with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; utility.</source>
          <target state="translated">これが以前の &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; テストで、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ユーティリティで書き直されています。</target>
        </trans-unit>
        <trans-unit id="3d6a6f8889834e3c8b1d65a05fdb25a7e2ea6f68" translate="yes" xml:space="preserve">
          <source>Here's the previous &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, re-written with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; utility.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; （）ユーティリティで書き直された以前の &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; テストです。</target>
        </trans-unit>
        <trans-unit id="65a50a9d22ad026dc17457d2ea667e0410123692" translate="yes" xml:space="preserve">
          <source>Here's the previous test, re-implemented with &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;:</source>
          <target state="translated">以下は、 &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; で再実装された前のテストです。</target>
        </trans-unit>
        <trans-unit id="f50475caf51709451a53cec5e964746fb2405109" translate="yes" xml:space="preserve">
          <source>Here's the previous test, rewritten using the click helper.</source>
          <target state="translated">クリックヘルパーを使って書き換えた前回のテストです。</target>
        </trans-unit>
        <trans-unit id="050ad561b8eadf86d74804f473be2ddd0edda3a5" translate="yes" xml:space="preserve">
          <source>Here's the same component with an input field for a single control implemented using template-driven forms.</source>
          <target state="translated">ここでは、テンプレート駆動型のフォームを使用して実装された単一のコントロールの入力フィールドを持つ同じコンポーネントを紹介します。</target>
        </trans-unit>
        <trans-unit id="d438fa0e2d2375bfdd5eb47ca1ad28ae5f460ffb" translate="yes" xml:space="preserve">
          <source>Here's the sample in action as the user makes changes.</source>
          <target state="translated">ここでは、ユーザーが変更を行う際のサンプルをご紹介します。</target>
        </trans-unit>
        <trans-unit id="53f0e5e27eee1572f4b2943467931546bb2cebe6" translate="yes" xml:space="preserve">
          <source>Here's the updated directive in full:</source>
          <target state="translated">以下、更新された指令の全文です。</target>
        </trans-unit>
        <trans-unit id="8292c62a5b64fea28e8eeec99f093a51f5489800" translate="yes" xml:space="preserve">
          <source>Here's what the new class for the phone list component controller looks like:</source>
          <target state="translated">電話リストコンポーネントコントローラの新しいクラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="07b8c34ac5381e60250f5c47082ce1167ad4448b" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;movie&lt;/code&gt; is a user-defined local variable.</source>
          <target state="translated">ここで、 &lt;code&gt;movie&lt;/code&gt; はユーザー定義のローカル変数です。</target>
        </trans-unit>
        <trans-unit id="6153c1c7b9b946f59eac67deb18a944d2418c87d" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;ref.value&lt;/code&gt; doesn't work. The structural directive, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; instantiates the template twice because &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over the two items in the array. It is impossible to define what the &lt;code&gt;ref.value&lt;/code&gt; reference signifies.</source>
          <target state="translated">ここでは、 &lt;code&gt;ref.value&lt;/code&gt; は機能しません。構造的なディレクティブは、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; はので、二度のテンプレートをインスタンス化 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は、アレイ内の2つのアイテムの上に反復します。 &lt;code&gt;ref.value&lt;/code&gt; 参照が何を意味するかを定義することは不可能です。</target>
        </trans-unit>
        <trans-unit id="c11022e9ff6694cd10c93ffc254eca3c356cc71f" translate="yes" xml:space="preserve">
          <source>Here, during type checking of the template for &lt;code&gt;AppComponent&lt;/code&gt;, the &lt;code&gt;[user]=&quot;selectedUser&quot;&lt;/code&gt; binding corresponds with the &lt;code&gt;UserDetailComponent.user&lt;/code&gt; input. Therefore, Angular assigns the &lt;code&gt;selectedUser&lt;/code&gt; property to &lt;code&gt;UserDetailComponent.user&lt;/code&gt;, which would result in an error if their types were incompatible. TypeScript checks the assignment according to its type system, obeying flags such as &lt;code&gt;strictNullChecks&lt;/code&gt; as they are configured in the application.</source>
          <target state="translated">ここで、 &lt;code&gt;AppComponent&lt;/code&gt; のテンプレートの型チェック中に、 &lt;code&gt;[user]=&quot;selectedUser&quot;&lt;/code&gt; バインディングは &lt;code&gt;UserDetailComponent.user&lt;/code&gt; 入力に対応します。したがって、Angularは &lt;code&gt;selectedUser&lt;/code&gt; プロパティを &lt;code&gt;UserDetailComponent.user&lt;/code&gt; に割り当てます。これにより、タイプに互換性がない場合にエラーが発生します。 TypeScriptは、アプリケーションで構成されている &lt;code&gt;strictNullChecks&lt;/code&gt; などのフラグに従って、型システムに従って割り当てをチェックします。</target>
        </trans-unit>
        <trans-unit id="0324e49eae3f4d465824bf23cdd72a64935bdeb9" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt; selector, or child directive, is embedded within a &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt;, which serves as the child's context.</source>
          <target state="translated">ここで、 &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt; セレクターまたは子ディレクティブは、子のコンテキストとして機能する &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt; 内に埋め込まれています。</target>
        </trans-unit>
        <trans-unit id="5b29c9df7ecf00768cae1dfd0a130eb35958e0ad" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;disabled&lt;/code&gt; input of the component is being passed on to the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in the template. All of this works as expected, as long as a &lt;code&gt;boolean&lt;/code&gt; value is bound to the input. But, suppose a consumer uses this input in the template as an attribute:</source>
          <target state="translated">ここでは、コンポーネントの &lt;code&gt;disabled&lt;/code&gt; 入力がテンプレートの &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; に渡されています。 &lt;code&gt;boolean&lt;/code&gt; 値が入力にバインドされている限り、これはすべて期待どおりに機能します。しかし、消費者がテンプレートのこの入力を属性として使用するとします。</target>
        </trans-unit>
        <trans-unit id="5b6b1d3cce2b45f1e510f65dbcb1fa0284af0c29" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;keyup&lt;/code&gt; event binding sends every keystroke to the component's &lt;code&gt;search()&lt;/code&gt; method. The following snippet implements debouncing for this input using RxJS operators.</source>
          <target state="translated">ここで、 &lt;code&gt;keyup&lt;/code&gt; イベントバインディングは、すべてのキーストロークをコンポーネントの &lt;code&gt;search()&lt;/code&gt; メソッドに送信します。次のスニペットは、RxJS演算子を使用してこの入力のデバウンスを実装します。</target>
        </trans-unit>
        <trans-unit id="4cf7703c8c869b0d3156f399825f1391be789300" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;prepareRoute()&lt;/code&gt; method takes the value of the outlet directive (established through &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt;) and returns a string value representing the state of the animation based on the custom data of the current active route. You can use this data to control which transition to execute for each route.</source>
          <target state="translated">ここで、 &lt;code&gt;prepareRoute()&lt;/code&gt; メソッドはoutletディレクティブの値（＃outlet &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt; を介して確立されます）を受け取り、現在アクティブなルートのカスタムデータに基づいてアニメーションの状態を表す文字列値を返します。このデータを使用して、ルートごとに実行する遷移を制御できます。</target>
        </trans-unit>
        <trans-unit id="4444abe3b6c8e06daabc19a62213ba0a77348697" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;prepareRoute()&lt;/code&gt; method takes the value of the output directive (established through &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt;) and returns a string value representing the state of the animation based on the custom data of the current active route. You can use this data to control which transition to execute for each route.</source>
          <target state="translated">ここで、 &lt;code&gt;prepareRoute()&lt;/code&gt; メソッドは（＃outlet &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt; によって確立された）出力ディレクティブの値を取り、現在アクティブなルートのカスタムデータに基づいてアニメーションの状態を表す文字列値を返します。このデータを使用して、各ルートで実行する遷移を制御できます。</target>
        </trans-unit>
        <trans-unit id="db4f248c7a227dfd8248ff1d0b824a2832aa56db" translate="yes" xml:space="preserve">
          <source>Here, the &lt;em&gt;base URL&lt;/em&gt; is the &lt;code&gt;heroesURL&lt;/code&gt; defined in the &lt;a href=&quot;toh-pt6#heroes-and-http&quot;&gt;Heroes and HTTP&lt;/a&gt; section (&lt;code&gt;api/heroes&lt;/code&gt;) and &lt;em&gt;id&lt;/em&gt; is the number of the hero that you want to retrieve. For example, &lt;code&gt;api/heroes/11&lt;/code&gt;.</source>
          <target state="translated">ここで、&lt;em&gt;ベースURL&lt;/em&gt;は&lt;a href=&quot;toh-pt6#heroes-and-http&quot;&gt;HeroesおよびHTTP&lt;/a&gt;セクションで定義された &lt;code&gt;heroesURL&lt;/code&gt; （ &lt;code&gt;api/heroes&lt;/code&gt; ）であり、&lt;em&gt;id&lt;/em&gt;は取得するヒーローの番号です。たとえば、 &lt;code&gt;api/heroes/11&lt;/code&gt; です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4080166bd678f2eca4714c474d2799cbcb87810f" translate="yes" xml:space="preserve">
          <source>Here, the defined &lt;code&gt;resolve()&lt;/code&gt; function is provided as part of the &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; object in the router configuration:</source>
          <target state="translated">ここで、定義された &lt;code&gt;resolve()&lt;/code&gt; 関数は、ルーター構成の &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクトの一部として提供されます。</target>
        </trans-unit>
        <trans-unit id="2e5ad69bacbe348316f6f630fe53b52c3b4a48c0" translate="yes" xml:space="preserve">
          <source>Here, the defined guard function is provided as part of the &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; object in the router configuration:</source>
          <target state="translated">ここで、定義されたガード機能は、ルーター構成の &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクトの一部として提供されます。</target>
        </trans-unit>
        <trans-unit id="66b196af8dfb1088f63537fb83ba051a0f53c06f" translate="yes" xml:space="preserve">
          <source>Here, the services and their values are the same, but &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; stops the injector from looking any further than the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; for &lt;code&gt;FlowerService&lt;/code&gt;, so it doesn't find it and returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">ここでは、サービスとその値は同じですが、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; よりもそれ以上探してから注射器を停止し &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; のための &lt;code&gt;FlowerService&lt;/code&gt; をそれと返す見つからないように、 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aca1b7a82a6d95098cb364094dad936a099e0db9" translate="yes" xml:space="preserve">
          <source>Hero &lt;em&gt;Power&lt;/em&gt; selection is required. You can add the same kind of error handling to the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; if you want, but it's not imperative because the selection box already constrains the power to valid values.</source>
          <target state="translated">ヒーロー&lt;em&gt;パワーの&lt;/em&gt;選択が必要です。必要に応じて、同じ種類のエラー処理を &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; に追加できますが、選択ボックスはすでに有効な値にパワーを制限しているため、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="8d272839c4c67f0a7feb7b568fa8e3446ba7617c" translate="yes" xml:space="preserve">
          <source>Hero data access services (also stubbed).</source>
          <target state="translated">ヒーローデータアクセスサービス(スタブも)。</target>
        </trans-unit>
        <trans-unit id="26c04b546596b8ec97053a1f0220517d0d8abd39" translate="yes" xml:space="preserve">
          <source>Hero feature routing requirements</source>
          <target state="translated">ヒーロー機能のルーティング要件</target>
        </trans-unit>
        <trans-unit id="b4fc9a6cb0d706d6d18b352e7c32ae4c311e5f0c" translate="yes" xml:space="preserve">
          <source>Heroes and HTTP</source>
          <target state="translated">英雄とHTTP</target>
        </trans-unit>
        <trans-unit id="49b093aef09840217c66c59f78c8bd0a260179f8" translate="yes" xml:space="preserve">
          <source>Heroes list: optionally selecting a hero</source>
          <target state="translated">ヒーローリスト:オプションでヒーローを選択</target>
        </trans-unit>
        <trans-unit id="526386faf0ef30d00c69495be0b464de4aa1decd" translate="yes" xml:space="preserve">
          <source>Hides the element by making it completely transparent and infinitely narrow, by setting its opacity and width to 0.</source>
          <target state="translated">要素の不透明度と幅を 0 に設定することで、要素を完全に透明にして無限に狭くすることで隠します。</target>
        </trans-unit>
        <trans-unit id="4ee5157ec195c6552c32bed0fef0ec3413f5f0a8" translate="yes" xml:space="preserve">
          <source>Hiding an element is different from removing it with &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;. For comparison, the following example shows how to control the visibility of an element with a &lt;a href=&quot;attribute-binding#class-binding&quot;&gt;class&lt;/a&gt; or &lt;a href=&quot;attribute-binding#style-binding&quot;&gt;style&lt;/a&gt; binding.</source>
          <target state="translated">要素を非表示にすることは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; を使用して要素を削除することとは異なります。比較のために、次の例は、&lt;a href=&quot;attribute-binding#class-binding&quot;&gt;クラス&lt;/a&gt;または&lt;a href=&quot;attribute-binding#style-binding&quot;&gt;スタイル&lt;/a&gt;バインディングを使用して要素の可視性を制御する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="89da5a8471af66d6f336800d1e48f784de69b323" translate="yes" xml:space="preserve">
          <source>Hiding an element is different from removing it with &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;. For comparison, the following example shows how to control the visibility of an element with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class&lt;/a&gt; or &lt;a href=&quot;template-syntax#style-binding&quot;&gt;style&lt;/a&gt; binding.</source>
          <target state="translated">要素を非表示にすることは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; で要素を非表示にすることとは異なります。比較のために、次の例は、&lt;a href=&quot;template-syntax#class-binding&quot;&gt;クラス&lt;/a&gt;または&lt;a href=&quot;template-syntax#style-binding&quot;&gt;スタイル&lt;/a&gt;バインディングを使用して要素の可視性を制御する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="f6dfa102549e88b4ab47ff6c2781028644ccca90" translate="yes" xml:space="preserve">
          <source>Hierarchical dependency injection</source>
          <target state="translated">階層的な依存性注入</target>
        </trans-unit>
        <trans-unit id="8a3b1b147046025a15fb8a7690182f292845ab57" translate="yes" xml:space="preserve">
          <source>Hierarchical injectors</source>
          <target state="translated">階層型インジェクター</target>
        </trans-unit>
        <trans-unit id="b544fd8897e805cb5efd919039294bee77b58063" translate="yes" xml:space="preserve">
          <source>High level view</source>
          <target state="translated">ハイレベルビュー</target>
        </trans-unit>
        <trans-unit id="1ea040e47ad5e315c0b6823679ca9344c5c85d16" translate="yes" xml:space="preserve">
          <source>Higher developer consistency with commit message standardization</source>
          <target state="translated">コミットメッセージの標準化による開発者の一貫性の向上</target>
        </trans-unit>
        <trans-unit id="b3e0a103daa9ae3f375b2654f0a482c7c0d36297" translate="yes" xml:space="preserve">
          <source>Hook</source>
          <target state="translated">Hook</target>
        </trans-unit>
        <trans-unit id="1f938b440e9146fcac04f1ceca1a771e15ff6a3b" translate="yes" xml:space="preserve">
          <source>Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule annotation.</source>
          <target state="translated">NgModule アノテーションでブートストラップ配列を使わずに、アプリケーションを手動でブートストラップするためのフックです。</target>
        </trans-unit>
        <trans-unit id="ee8d3d098543b8a4b311d8a110ff1f09abc900ff" translate="yes" xml:space="preserve">
          <source>Hook method</source>
          <target state="translated">フック方式</target>
        </trans-unit>
        <trans-unit id="13797342eb3712b307083382e2ff0e78600433a5" translate="yes" xml:space="preserve">
          <source>Hooking into the component lifecycle</source>
          <target state="translated">コンポーネントのライフサイクルへのフック</target>
        </trans-unit>
        <trans-unit id="3960ec4ca5fb5e5d8cdb2cc1c5121c003e426517" translate="yes" xml:space="preserve">
          <source>Host</source>
          <target state="translated">Host</target>
        </trans-unit>
        <trans-unit id="900e91ae8e4d410ba8ad214c662d46c413ba8c8a" translate="yes" xml:space="preserve">
          <source>Host to listen on.</source>
          <target state="translated">聞くためのホスト。</target>
        </trans-unit>
        <trans-unit id="854842ca941102874ac3fd35d9a644fe6a4e58d2" translate="yes" xml:space="preserve">
          <source>HostBinding</source>
          <target state="translated">HostBinding</target>
        </trans-unit>
        <trans-unit id="04423f0c0fb006f39c47ae77e76519ec61dae9e9" translate="yes" xml:space="preserve">
          <source>HostListener</source>
          <target state="translated">HostListener</target>
        </trans-unit>
        <trans-unit id="16d6f89a6d102237e8b5809f2f6a83253c134541" translate="yes" xml:space="preserve">
          <source>Hosting an Angular app anywhere else</source>
          <target state="translated">他の場所でAngularアプリをホスティングする</target>
        </trans-unit>
        <trans-unit id="b2661e7c9fe866cee0abd12edc765c9ea4167169" translate="yes" xml:space="preserve">
          <source>Hosting an Angular app on Firebase</source>
          <target state="translated">FirebaseでAngularアプリをホスティングする</target>
        </trans-unit>
        <trans-unit id="c9e203bd41e585a498a9ea3bfa7c58968ec8d5be" translate="yes" xml:space="preserve">
          <source>Hosting the built project</source>
          <target state="translated">構築されたプロジェクトのホスティング</target>
        </trans-unit>
        <trans-unit id="b2e4d2264a6740b74155a1ebd270d51ac74c7499" translate="yes" xml:space="preserve">
          <source>Hour 0-23</source>
          <target state="translated">時間 0-23</target>
        </trans-unit>
        <trans-unit id="e2e437b5f33c50fbf282a8b8ce3d5a4d0deeb077" translate="yes" xml:space="preserve">
          <source>Hour 1-12</source>
          <target state="translated">1-12時間</target>
        </trans-unit>
        <trans-unit id="cd7d764988e4f76f3f7fbbaaa971d2513fb11bb0" translate="yes" xml:space="preserve">
          <source>How &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; works</source>
          <target state="translated">どのように &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 作品</target>
        </trans-unit>
        <trans-unit id="9bc4d8fa298867247715dc77fcde7869860686cb" translate="yes" xml:space="preserve">
          <source>How &lt;code&gt;forRoot()&lt;/code&gt; works</source>
          <target state="translated">どのように &lt;code&gt;forRoot()&lt;/code&gt; 作品</target>
        </trans-unit>
        <trans-unit id="983fbf13b55a5e7fb496619c191e81853401c3d8" translate="yes" xml:space="preserve">
          <source>How &lt;code&gt;ngUpgrade&lt;/code&gt; Works</source>
          <target state="translated">どのように &lt;code&gt;ngUpgrade&lt;/code&gt; 作品</target>
        </trans-unit>
        <trans-unit id="d6d941bd9de7fb7dc2069cff40c89a86c6b8c2dd" translate="yes" xml:space="preserve">
          <source>How AOT works</source>
          <target state="translated">AOTの仕組み</target>
        </trans-unit>
        <trans-unit id="33f509892f89a76ff518df83752d09bab480dac2" translate="yes" xml:space="preserve">
          <source>How Angular assigns values to template variables</source>
          <target state="translated">Angularがテンプレート変数に値を割り当てる方法</target>
        </trans-unit>
        <trans-unit id="ff5ca3d4267bdd4688ef2f3810892f694a4f2ec9" translate="yes" xml:space="preserve">
          <source>How a reference variable gets its value</source>
          <target state="translated">参照変数の値の取得方法</target>
        </trans-unit>
        <trans-unit id="979c9d03c7fcc312615e96357da09f8be513691a" translate="yes" xml:space="preserve">
          <source>How can I tell if an NgModule or service was previously loaded?</source>
          <target state="translated">NgModuleやサービスが以前にロードされたかどうかを確認するにはどうすればよいですか?</target>
        </trans-unit>
        <trans-unit id="124b4b601ae7d0767a932ff315c4ae92f3fc2d45" translate="yes" xml:space="preserve">
          <source>How change detection works</source>
          <target state="translated">変化検出の仕組み</target>
        </trans-unit>
        <trans-unit id="9048d32b5da3d51d17fa1ee3d4c03154ff798961" translate="yes" xml:space="preserve">
          <source>How do I restrict service scope to a module?</source>
          <target state="translated">サービス範囲をモジュールに制限するには?</target>
        </trans-unit>
        <trans-unit id="42da5511b4616e973fcfac7075b36f7d501b52f9" translate="yes" xml:space="preserve">
          <source>How do you bind to a second property when you're already binding to the &lt;code&gt;appHighlight&lt;/code&gt; attribute name?</source>
          <target state="translated">&lt;code&gt;appHighlight&lt;/code&gt; 属性名に既にバインドしているときに、2番目のプロパティにどのようにバインドしますか？</target>
        </trans-unit>
        <trans-unit id="511988e08b2a40201c02270364cefca596e7c32b" translate="yes" xml:space="preserve">
          <source>How do you combat this problem? With asynchronous routing, which loads feature modules &lt;em&gt;lazily&lt;/em&gt;, on request. Lazy loading has multiple benefits.</source>
          <target state="translated">この問題にどのように対処しますか？リクエストに応じ&lt;em&gt;て&lt;/em&gt;機能モジュールを&lt;em&gt;レイジー&lt;/em&gt;にロードする非同期ルーティング。遅延読み込みには複数の利点があります。</target>
        </trans-unit>
        <trans-unit id="a416099edf7824be4ef297d434f0d54367f5e352" translate="yes" xml:space="preserve">
          <source>How does Angular find components, directives, and pipes in a template?What is a</source>
          <target state="translated">Angularはどのようにしてテンプレート内のコンポーネント、ディレクティブ、パイプを見つけるのですか?</target>
        </trans-unit>
        <trans-unit id="3191620388b1773dd5d13b4c654d9f88a6f22136" translate="yes" xml:space="preserve">
          <source>How does the target &lt;code&gt;HeroDetailComponent&lt;/code&gt; learn about that &lt;code&gt;id&lt;/code&gt;? Don't analyze the URL. Let the router do it.</source>
          <target state="translated">ターゲットの &lt;code&gt;HeroDetailComponent&lt;/code&gt; はその &lt;code&gt;id&lt;/code&gt; どのように学習しますか？URLを分析しないでください。ルーターに任せてください。</target>
        </trans-unit>
        <trans-unit id="499d7e268f9c16c28dbe88d3eb572a2620838701" translate="yes" xml:space="preserve">
          <source>How event binding works</source>
          <target state="translated">イベントバインディングの仕組み</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="997851a5869594d4c098e863b5fa4094939bdbc3" translate="yes" xml:space="preserve">
          <source>How meanings control text extraction and merging</source>
          <target state="translated">意味がテキストの抽出と結合をどのように制御するか</target>
        </trans-unit>
        <trans-unit id="a1269b34a684f55e0b793348bbcd441f6ac9f34a" translate="yes" xml:space="preserve">
          <source>How ngUpgrade Works</source>
          <target state="translated">ngUpgrade の仕組み</target>
        </trans-unit>
        <trans-unit id="b9f4e37b7f4ec8a20702b18e475d1c919dc443c6" translate="yes" xml:space="preserve">
          <source>How preloading works</source>
          <target state="translated">プリロードの仕組み</target>
        </trans-unit>
        <trans-unit id="223c761d3efb8aa4fcdd8c630361b5e28186b485" translate="yes" xml:space="preserve">
          <source>How the Language Service works</source>
          <target state="translated">言語サービスの仕組み</target>
        </trans-unit>
        <trans-unit id="a349db6c3c3e4bc124d0c086f320cf2dc99ff08d" translate="yes" xml:space="preserve">
          <source>How to debug errors with Ivy</source>
          <target state="translated">Ivyでエラーをデバッグする方法</target>
        </trans-unit>
        <trans-unit id="1b8475727e660463a6a5ca3ce7a6ab63829de5ff" translate="yes" xml:space="preserve">
          <source>How to handle a navigation request to the current URL. One of:</source>
          <target state="translated">現在のURLへのナビゲーションリクエストを処理する方法 の一つです。</target>
        </trans-unit>
        <trans-unit id="3acd7184a15f7cd60ff8b0cb2f254e98af8fe7db" translate="yes" xml:space="preserve">
          <source>How to handle missing translations for i18n.</source>
          <target state="translated">i18nの翻訳が見つからない場合の対処法。</target>
        </trans-unit>
        <trans-unit id="a4312d2c2305c9665e2aa88c16af0276c80bbfb1" translate="yes" xml:space="preserve">
          <source>How to handle query parameters in a router link. One of:</source>
          <target state="translated">ルータリンクでのクエリパラメータの扱い方 の一つです。</target>
        </trans-unit>
        <trans-unit id="133736070cd8def498e352ae2671acf3d2603a1b" translate="yes" xml:space="preserve">
          <source>How to handle query parameters in the router link for the next navigation. One of:</source>
          <target state="translated">次のナビゲーションのためのルータリンクでのクエリパラメータの扱い方 の一つです。</target>
        </trans-unit>
        <trans-unit id="a516bf86adc981bbb12eae05bdf591c9d762031d" translate="yes" xml:space="preserve">
          <source>How to make a feature module</source>
          <target state="translated">フィーチャーモジュールの作り方</target>
        </trans-unit>
        <trans-unit id="42d423686e07004d3ccb86759ad8206a78194665" translate="yes" xml:space="preserve">
          <source>How to merge parameters, data, and resolved data from parent to child routes. One of:</source>
          <target state="translated">親ルートから子ルートへのパラメータ、データ、解決済みデータをマージする方法 の1つです。</target>
        </trans-unit>
        <trans-unit id="ab680df21ca4ccde1eb27c6ee6427aabbfd91cc4" translate="yes" xml:space="preserve">
          <source>How to use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）の使い方</target>
        </trans-unit>
        <trans-unit id="271d720e4f07fc899b89ada24293400628fb4402" translate="yes" xml:space="preserve">
          <source>How to use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/output&quot;&gt;出力&lt;/a&gt;（）の使用方法</target>
        </trans-unit>
        <trans-unit id="2452bce6c068e1419f34d2c7498e5898f5e3f4a3" translate="yes" xml:space="preserve">
          <source>How to write your own structural directive.</source>
          <target state="translated">自作の構造指示書の書き方</target>
        </trans-unit>
        <trans-unit id="23a119c365a39049b543486146aabe9cd6498db5" translate="yes" xml:space="preserve">
          <source>How two-way binding works</source>
          <target state="translated">双方向バインディングの仕組み</target>
        </trans-unit>
        <trans-unit id="abfc475c30ad52628f2cdc20da996ccdb18abcc8" translate="yes" xml:space="preserve">
          <source>How you provide services via an &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; (or &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;) decorator determines their visibility. The following sections demonstrate &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; along with ways to modify service visibility with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; （または &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; ）デコレーターを介してサービスを提供する方法によって、それらの可視性が決まります。次のセクションでは、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; サービスの可視性を変更する方法を示します。</target>
        </trans-unit>
        <trans-unit id="d59e9db4583cfeade655bda1cee43c9a4d0bf9b2" translate="yes" xml:space="preserve">
          <source>How you provide services via an &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; (or &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;) decorator determines their visibility. The following sections demonstrate &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt; along with ways to modify service visibility with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; （または &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; ）デコレータを介してサービスを提供する方法によって、サービスの可視性が決まります。次のセクションでは、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;viewProviders&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; サービスの可視性を変更する方法とともに示します。</target>
        </trans-unit>
        <trans-unit id="3c06ea1a10cb3f7599812cd4dd0520ada6ed15d2" translate="yes" xml:space="preserve">
          <source>How you provide this information depends upon whether you compile with the JIT compiler or the AOT compiler.</source>
          <target state="translated">この情報をどのように提供するかは、JITコンパイラでコンパイルするかAOTコンパイラでコンパイルするかによって異なります。</target>
        </trans-unit>
        <trans-unit id="42af694ff0648a4162e6e3bb0c6873e411523ff3" translate="yes" xml:space="preserve">
          <source>However the template binding syntax will always use the Angular style, e.g. square brackets (&lt;code&gt;[...]&lt;/code&gt;) for property binding.</source>
          <target state="translated">ただし、テンプレートバインディング構文は常にプロパティのバインディングに角かっこ（ &lt;code&gt;[...]&lt;/code&gt; ）などのAngularスタイルを使用します。</target>
        </trans-unit>
        <trans-unit id="dbda69fe90fc2df22f7e5b8531e85b712730ae09" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; observables are among the exceptions because &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and its observables are insulated from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; itself. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; destroys a routed component when it is no longer needed along with the injected &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">しかし、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; の観測があるため、例外の一つである &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; その観測から絶縁されている &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 自体。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; それはもはや注入さとともに必要とされ、ルーティングされたコンポーネントの破壊 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a52ad01a1e6f8429d7b5fd705ab3383b484815aa" translate="yes" xml:space="preserve">
          <source>However, a pure pipe with an array as input may not work the way you want. To demonstrate this issue, change the previous example to filter the list of heroes to just those heroes who can fly. Use the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; in the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater as shown in the following code. The tabs for the example show the following:</source>
          <target state="translated">ただし、入力として配列を持つ純粋なパイプは、希望どおりに機能しない場合があります。この問題を示すために、前の例を変更して、ヒーローのリストを飛行できるヒーローだけにフィルターします。次のコードに示すように、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;リピーターで &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; を使用します。この例のタブは、次のことを示しています。</target>
        </trans-unit>
        <trans-unit id="78384c3742fdf68b1246d1ffbeeb9846d7e95bf3" translate="yes" xml:space="preserve">
          <source>However, a token doesn't have to be a class and even when it is a class, it doesn't have to be the same type as the returned object. That's the subject of the next section.</source>
          <target state="translated">ただし、トークンはクラスである必要はなく、クラスであっても返されるオブジェクトと同じ型である必要はありません。それが次のセクションのテーマです。</target>
        </trans-unit>
        <trans-unit id="a51870768d3d98c605578aafcc0c0d074ca996ed" translate="yes" xml:space="preserve">
          <source>However, accessing a template variable from outside the parent template doesn't work.</source>
          <target state="translated">しかし、親テンプレートの外部からテンプレート変数にアクセスしてもうまくいきません。</target>
        </trans-unit>
        <trans-unit id="b3116f3e696e3745d93dc36e6d542835460c30c1" translate="yes" xml:space="preserve">
          <source>However, behind the scenes, Angular uses a logical view representation as follows when resolving injection requests:</source>
          <target state="translated">しかし、裏ではAngularはインジェクションリクエストを解決する際に以下のような論理的なビュー表現を使用しています。</target>
        </trans-unit>
        <trans-unit id="693f46cb5ca176639aee0593be73408376b61903" translate="yes" xml:space="preserve">
          <source>However, certain JavaScript syntax is not allowed:</source>
          <target state="translated">ただし、特定のJavaScriptの構文は許可されていません。</target>
        </trans-unit>
        <trans-unit id="16c8b7823d939bc8f045eae68088694acbb86125" translate="yes" xml:space="preserve">
          <source>However, due to the way Angular stores injection tokens, it is possible that such an unused component or service can end up in the bundle anyway. This page describes a dependency-injection design pattern that supports proper tree-shaking by using lightweight injection tokens.</source>
          <target state="translated">しかし、Angularのインジェクショントークンの格納方法のため、そのような未使用のコンポーネントやサービスがいずれにせよバンドルの中で終わってしまう可能性があります。このページでは、軽量なインジェクショントークンを使って適切なツリーシェイクをサポートする依存性インジェクションのデザインパターンについて説明します。</target>
        </trans-unit>
        <trans-unit id="0553864b7141e33b190505316313eab2ee87daa6" translate="yes" xml:space="preserve">
          <source>However, executing a pipe to update the display with every change would slow down your app's performance. So Angular uses a faster change-detection algorithm for executing a pipe, as described in the next section.</source>
          <target state="translated">しかし、変更のたびに表示を更新するためにパイプを実行すると、アプリのパフォーマンスが遅くなってしまいます。そこでAngularでは、次のセクションで説明するように、パイプを実行するためにより高速な変更検出アルゴリズムを使用しています。</target>
        </trans-unit>
        <trans-unit id="98c48d0fa6289215af7e49a79607c8e0ccd6333d" translate="yes" xml:space="preserve">
          <source>However, if you run the tests in a &lt;strong&gt;non-CLI environment&lt;/strong&gt;, tests of this component may fail. For example, if you run the &lt;code&gt;BannerComponent&lt;/code&gt; tests in a web coding environment such as &lt;a href=&quot;https://plnkr.co/&quot;&gt;plunker&lt;/a&gt;, you'll see a message like this one:</source>
          <target state="translated">ただし、&lt;strong&gt;CLI以外の環境&lt;/strong&gt;でテストを実行すると、このコンポーネントのテストが失敗する場合があります。あなたが実行した場合たとえば、 &lt;code&gt;BannerComponent&lt;/code&gt; のようなウェブコーディング環境でのテスト&lt;a href=&quot;https://plnkr.co/&quot;&gt;plunkerを&lt;/a&gt;、あなたはこのようなメッセージが表示されます：</target>
        </trans-unit>
        <trans-unit id="34e226b688a864f31651d20b9d5626cdbd2a322e" translate="yes" xml:space="preserve">
          <source>However, in practice, Angular simply ignores two-way bindings to template variables. Starting in version 8, attempting to write to template variables is deprecated. In a future version, we will throw to indicate that the write is not supported.</source>
          <target state="translated">しかし、実際にはAngularはテンプレート変数への双方向のバインディングを無視しています。バージョン8から、テンプレート変数への書き込みは非推奨となりました。将来のバージョンでは、書き込みがサポートされていないことを示すために throw するようになります。</target>
        </trans-unit>
        <trans-unit id="5f46d3bcb10089005d7612c3f9cc519539d288fe" translate="yes" xml:space="preserve">
          <source>However, injecting the real service rarely works well as most dependent services are difficult to create and control.</source>
          <target state="translated">しかし、ほとんどの依存サービスは作成や制御が難しいため、実際のサービスを注入してもうまくいくことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="9233cd0b325f45f872324e3cd65f528e0634c2ca" translate="yes" xml:space="preserve">
          <source>However, selective child animations can still be run on a disabled parent in one of the following ways:</source>
          <target state="translated">しかし、選択的な子アニメーションは、以下のいずれかの方法で障害のある親の上で実行することができます。</target>
        </trans-unit>
        <trans-unit id="319f88f562107ebe58d7c5640582471d82bf98d7" translate="yes" xml:space="preserve">
          <source>However, some translation systems require a specific form or syntax for the ID. To address this requirement, you can mark text with &lt;em&gt;custom&lt;/em&gt; IDs. While most developers don't need to use custom IDs, some may want to use IDs that have a unique syntax to convey additional metadata (such as the library, component, or area of the app in which the text appears).</source>
          <target state="translated">ただし、一部の翻訳システムでは、IDに特定の形式または構文が必要です。この要件に対処するために、&lt;em&gt;カスタム&lt;/em&gt;IDでテキストをマークできます。ほとんどの開発者はカスタムIDを使用する必要はありませんが、追加のメタデータ（ライブラリ、コンポーネント、テキストが表示されるアプリの領域など）を伝達するために一意の構文を持つIDを使用したい場合もあります。</target>
        </trans-unit>
        <trans-unit id="29af858dd493651d68cc842edbeb89ea3c49cdf1" translate="yes" xml:space="preserve">
          <source>However, testing a single use case is unlikely to explore the full range of a directive's capabilities. Finding and testing all components that use the directive is tedious, brittle, and almost as unlikely to afford full coverage.</source>
          <target state="translated">しかし、一つのユースケースをテストするだけでは、ディレクティブの機能の全範囲を調べることはできません。ディレクティブを使うすべてのコンポーネントを見つけてテストするのは面倒で、もろく、完全にカバーできる可能性はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="63c4f7ceb30a9aea5c8f145005bfe8df2bd99995" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;AnimalService&lt;/code&gt;, which is provided in the &lt;code&gt;AppComponent&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array, is visible.</source>
          <target state="translated">しかし、 &lt;code&gt;AnimalService&lt;/code&gt; に設けられ、 &lt;code&gt;AppComponent&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; のアレイは、表示されています。</target>
        </trans-unit>
        <trans-unit id="6d2f98825b9add3ac5515eab04960da13e1e316a" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;AnimalService&lt;/code&gt;, which is provided in the &lt;code&gt;AppComponent&lt;/code&gt;&lt;code&gt;viewProviders&lt;/code&gt; array, is visible.</source>
          <target state="translated">しかし、 &lt;code&gt;AnimalService&lt;/code&gt; に設けられ、 &lt;code&gt;AppComponent&lt;/code&gt; &lt;code&gt;viewProviders&lt;/code&gt; のアレイは、表示されています。</target>
        </trans-unit>
        <trans-unit id="409b0b30eacfefc2c2ac82f07ea268d1b0b9bb37" translate="yes" xml:space="preserve">
          <source>However, this might feel like an unwelcome surprise if you expect the module's services to be visible only to the components declared by that feature module. If the &lt;code&gt;HeroModule&lt;/code&gt; provides the &lt;code&gt;HeroService&lt;/code&gt; and the root &lt;code&gt;AppModule&lt;/code&gt; imports &lt;code&gt;HeroModule&lt;/code&gt;, any class that knows the &lt;code&gt;HeroService&lt;/code&gt;&lt;em&gt;type&lt;/em&gt; can inject that service, not just the classes declared in the &lt;code&gt;HeroModule&lt;/code&gt;.</source>
          <target state="translated">ただし、モジュールのサービスがその機能モジュールによって宣言されたコンポーネントのみに表示されることを期待する場合、これは歓迎されない驚きのように感じるかもしれません。場合 &lt;code&gt;HeroModule&lt;/code&gt; が提供 &lt;code&gt;HeroService&lt;/code&gt; とルート &lt;code&gt;AppModule&lt;/code&gt; の輸入 &lt;code&gt;HeroModule&lt;/code&gt; を、知っている任意のクラス &lt;code&gt;HeroService&lt;/code&gt; の&lt;em&gt;タイプは、&lt;/em&gt;そのサービスを注入することができるだけでなく、クラスがで宣言さ &lt;code&gt;HeroModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30edf6e204f52b61f2571aecc7c209f88b84ea1f" translate="yes" xml:space="preserve">
          <source>However, this will work:</source>
          <target state="translated">しかし、これはうまくいきます。</target>
        </trans-unit>
        <trans-unit id="d6af0af1a9e9d11d2d6ee59278094f54f71c5e1d" translate="yes" xml:space="preserve">
          <source>However, to set &lt;em&gt;many&lt;/em&gt; inline styles at the same time, use the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">ただし、&lt;em&gt;多くの&lt;/em&gt;インラインスタイルを同時に設定するには、 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="d76129a2020266d4c676249304bb9a0e0d5fd584" translate="yes" xml:space="preserve">
          <source>However, when Angular expands the shorthand syntax, it creates another &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag, with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; directives. The anchor element containing the template for the &quot;then&quot; clause becomes the content of this unlabeled &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">ただし、Angularが短縮構文を展開すると、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して別の &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; タグが作成されます。「then」句のテンプレートを含むアンカー要素は、このラベルのない &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; タグのコンテンツになります。</target>
        </trans-unit>
        <trans-unit id="56d575a6c0a58c4606bda23eaa28f170e0ba3f40" translate="yes" xml:space="preserve">
          <source>However, when Angular expands the shorthand syntax, it creates another &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag, with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;ngIfElse&lt;/code&gt; directives. The anchor element containing the template for the &quot;then&quot; clause becomes the content of this unlabeled &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">ただし、Angularが短縮構文を展開すると、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;ngIfElse&lt;/code&gt; ディレクティブを使用して別の &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; タグが作成されます。「then」句のテンプレートを含むアンカー要素は、このラベルのない &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; タグのコンテンツになります。</target>
        </trans-unit>
        <trans-unit id="88d996735fae87b45148458d37047b283d694373" translate="yes" xml:space="preserve">
          <source>However, with &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;itemForm&lt;/code&gt; is a reference to the &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; directive with the ability to track the value and validity of every control in the form.</source>
          <target state="translated">ただし、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; では、 &lt;code&gt;itemForm&lt;/code&gt; は&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;ディレクティブへの参照であり、フォーム内のすべてのコントロールの値と有効性を追跡できます。</target>
        </trans-unit>
        <trans-unit id="4f61b26fdb00998634e95b429fc277a6dcf31568" translate="yes" xml:space="preserve">
          <source>However, you almost always inject services into application classes using Angular dependency injection and you should have tests that reflect that usage pattern. Angular testing utilities make it easy to investigate how injected services behave.</source>
          <target state="translated">しかし、ほとんどの場合、Angularの依存性インジェクションを使ってアプリケーションクラスにサービスを注入することが多いので、その使用パターンを反映したテストを用意する必要があります。Angularのテストユーティリティを使えば、注入されたサービスがどのように振る舞うかを簡単に調べることができます。</target>
        </trans-unit>
        <trans-unit id="8e1a2e9c4edb38cc5f33c8a92e731a540c8a4e2e" translate="yes" xml:space="preserve">
          <source>However, you might be troubled by the fact that the real service doesn't quite behave this way. The real service sends requests to a remote server. A server takes time to respond and the response certainly won't be available immediately as in the previous two tests.</source>
          <target state="translated">しかし、実際のサービスがこのような振る舞いをしていないことに悩むかもしれません。実際のサービスはリモートサーバにリクエストを送ります。サーバは応答するのに時間がかかり、前の2つのテストのように応答がすぐに得られることは確かにありません。</target>
        </trans-unit>
        <trans-unit id="07028f666590e3943a2a7158467fb00b0a46d178" translate="yes" xml:space="preserve">
          <source>HttpBackend</source>
          <target state="translated">HttpBackend</target>
        </trans-unit>
        <trans-unit id="74f0d45346780c9a2f7d9ba9c77d099f9ae02d4f" translate="yes" xml:space="preserve">
          <source>HttpClient</source>
          <target state="translated">HttpClient</target>
        </trans-unit>
        <trans-unit id="3dfdf9e078469afa983319e9dbcfec4b07dc38ed" translate="yes" xml:space="preserve">
          <source>HttpClientJsonpModule</source>
          <target state="translated">HttpClientJsonpModule</target>
        </trans-unit>
        <trans-unit id="601f075dcbf43fc07aee8d1626b1bb0090dc3e86" translate="yes" xml:space="preserve">
          <source>HttpClientModule</source>
          <target state="translated">HttpClientModule</target>
        </trans-unit>
        <trans-unit id="ca61ddc922f1c4bb126860b1fcceb0121f1e72b7" translate="yes" xml:space="preserve">
          <source>HttpClientTestingModule</source>
          <target state="translated">HttpClientTestingModule</target>
        </trans-unit>
        <trans-unit id="b0e4475f7bcbcf9e3bfc2d2b8cb35a87cd9da63f" translate="yes" xml:space="preserve">
          <source>HttpClientXsrfModule</source>
          <target state="translated">HttpClientXsrfModule</target>
        </trans-unit>
        <trans-unit id="31b51a48c6488640e3d7d12f81484cc7692bc954" translate="yes" xml:space="preserve">
          <source>HttpDownloadProgressEvent</source>
          <target state="translated">HttpDownloadProgressEvent</target>
        </trans-unit>
        <trans-unit id="631eed221a0a5e1227ee747dedc56a6e5cd04856" translate="yes" xml:space="preserve">
          <source>HttpErrorResponse</source>
          <target state="translated">HttpErrorResponse</target>
        </trans-unit>
        <trans-unit id="b601dad14c6ceb3e36baf63c5302eab72656db35" translate="yes" xml:space="preserve">
          <source>HttpEvent</source>
          <target state="translated">HttpEvent</target>
        </trans-unit>
        <trans-unit id="a25e2886e345f200e99c43296e545f2ec17e87d9" translate="yes" xml:space="preserve">
          <source>HttpEventType</source>
          <target state="translated">HttpEventType</target>
        </trans-unit>
        <trans-unit id="34a6f13d629874a5d2af931439592d54346c6458" translate="yes" xml:space="preserve">
          <source>HttpHandler</source>
          <target state="translated">HttpHandler</target>
        </trans-unit>
        <trans-unit id="13819588a41868e3eb12c563e1b5ce196d242ce8" translate="yes" xml:space="preserve">
          <source>HttpHeaderResponse</source>
          <target state="translated">HttpHeaderResponse</target>
        </trans-unit>
        <trans-unit id="47652085284b8b02e10d108308cf4fafe0936706" translate="yes" xml:space="preserve">
          <source>HttpHeaders</source>
          <target state="translated">HttpHeaders</target>
        </trans-unit>
        <trans-unit id="8184f8a7796e7947f825158c72ba880534cdf906" translate="yes" xml:space="preserve">
          <source>HttpInterceptor</source>
          <target state="translated">HttpInterceptor</target>
        </trans-unit>
        <trans-unit id="306e8873cd28a3d318c8259a4ca9675c917ea59c" translate="yes" xml:space="preserve">
          <source>HttpParameterCodec</source>
          <target state="translated">HttpParameterCodec</target>
        </trans-unit>
        <trans-unit id="f0370ec95bcf0338af85d0d9ee233cbf9b147f0e" translate="yes" xml:space="preserve">
          <source>HttpParams</source>
          <target state="translated">HttpParams</target>
        </trans-unit>
        <trans-unit id="49286b34daf58a4360367b78695303f96afd888f" translate="yes" xml:space="preserve">
          <source>HttpProgressEvent</source>
          <target state="translated">HttpProgressEvent</target>
        </trans-unit>
        <trans-unit id="876884817603f1994832b258f47c862ce8f79db8" translate="yes" xml:space="preserve">
          <source>HttpRequest</source>
          <target state="translated">HttpRequest</target>
        </trans-unit>
        <trans-unit id="98a81a35f1584d5f5070065dbea832e61fb0bf0f" translate="yes" xml:space="preserve">
          <source>HttpResponse</source>
          <target state="translated">HttpResponse</target>
        </trans-unit>
        <trans-unit id="41598c5b775fa5c84b8eee569b34c38dcacdd477" translate="yes" xml:space="preserve">
          <source>HttpResponseBase</source>
          <target state="translated">HttpResponseBase</target>
        </trans-unit>
        <trans-unit id="91259ca5dbf5ee0c7be0ec1ecec66070797276f8" translate="yes" xml:space="preserve">
          <source>HttpSentEvent</source>
          <target state="translated">HttpSentEvent</target>
        </trans-unit>
        <trans-unit id="0ec2efbe19ba7e3ef035c35046c8d7e07d7af284" translate="yes" xml:space="preserve">
          <source>HttpTestingController</source>
          <target state="translated">HttpTestingController</target>
        </trans-unit>
        <trans-unit id="2594ee986b764be8ea778008c933b096d5b6bf37" translate="yes" xml:space="preserve">
          <source>HttpUploadProgressEvent</source>
          <target state="translated">HttpUploadProgressEvent</target>
        </trans-unit>
        <trans-unit id="97816692d8c249075784ff4511d32cb3200d0fae" translate="yes" xml:space="preserve">
          <source>HttpUrlEncodingCodec</source>
          <target state="translated">HttpUrlEncodingCodec</target>
        </trans-unit>
        <trans-unit id="0aa97445f8cf4a27064f48a9964e2e2e5accb9b5" translate="yes" xml:space="preserve">
          <source>HttpUserEvent</source>
          <target state="translated">HttpUserEvent</target>
        </trans-unit>
        <trans-unit id="d81289e5fca4f39bab401bd23f2b00141a74346a" translate="yes" xml:space="preserve">
          <source>HttpXhrBackend</source>
          <target state="translated">HttpXhrBackend</target>
        </trans-unit>
        <trans-unit id="7869711a68093e11cb599a1fe14c17baa6ba3dd6" translate="yes" xml:space="preserve">
          <source>HttpXsrfTokenExtractor</source>
          <target state="translated">HttpXsrfTokenExtractor</target>
        </trans-unit>
        <trans-unit id="801f2493757c72ca45a5c235d90ad1ca581f7755" translate="yes" xml:space="preserve">
          <source>Human-readable format of exponential. Example: 1.2x103</source>
          <target state="translated">指数の人間が読める形式。例:1.2x103</target>
        </trans-unit>
        <trans-unit id="02b7c47c72c0e2f2d5177bd712fd4bfe5eec025c" translate="yes" xml:space="preserve">
          <source>Hybrid Angular applications</source>
          <target state="translated">ハイブリッドAngularアプリケーション</target>
        </trans-unit>
        <trans-unit id="6ed0186e952f0fc2ad82383289a170a0c73f97bd" translate="yes" xml:space="preserve">
          <source>I18nPluralPipe</source>
          <target state="translated">I18nPluralPipe</target>
        </trans-unit>
        <trans-unit id="abc1f616112daf4b387de1e6658364fdc11d58ba" translate="yes" xml:space="preserve">
          <source>I18nSelectPipe</source>
          <target state="translated">I18nSelectPipe</target>
        </trans-unit>
        <trans-unit id="6d2560c581ebaf3afab03757b7c3c7c2fc658887" translate="yes" xml:space="preserve">
          <source>ICU parsing happens at runtime, so only text, HTML tags and text bindings are allowed inside ICU cases (previously, directives were also permitted inside ICUs).</source>
          <target state="translated">ICUのパースは実行時に行われるので、ICUケース内ではテキスト、HTMLタグ、テキストバインディングのみが許可されます(以前は、ICU内ではディレクティブも許可されていました)。</target>
        </trans-unit>
        <trans-unit id="843165076cf3bd0349681e4beeed1c6874126cc4" translate="yes" xml:space="preserve">
          <source>ID of the option element</source>
          <target state="translated">オプション要素のID</target>
        </trans-unit>
        <trans-unit id="877c0ac1ba5622c5882fedcdd9a0af40b83febbd" translate="yes" xml:space="preserve">
          <source>IDs conform to the Unicode Common Locale Data Repository (CLDR). For more information about Unicode locale identifiers, see the &lt;a href=&quot;http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers&quot;&gt;CLDR core specification&lt;/a&gt;.</source>
          <target state="translated">IDは、Unicode Common Locale Data Repository（CLDR）に準拠しています。Unicodeロケール識別子の詳細については、&lt;a href=&quot;http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers&quot;&gt;CLDRコア仕様を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9ff31bb53dfc2bff233e882d367714fba682d7dc" translate="yes" xml:space="preserve">
          <source>IE</source>
          <target state="translated">IE</target>
        </trans-unit>
        <trans-unit id="e99eab8a5ebe9abaa8723fd9f1ddbf2c7d1a25dc" translate="yes" xml:space="preserve">
          <source>IE 10, IE 11</source>
          <target state="translated">IE 10、IE 11</target>
        </trans-unit>
        <trans-unit id="09500d66bc1c080dec280867c70d89f272b9554c" translate="yes" xml:space="preserve">
          <source>IE 11</source>
          <target state="translated">イーエックスアイエックス</target>
        </trans-unit>
        <trans-unit id="8e9963ae494f00fdfda1290439172d2aa12514d1" translate="yes" xml:space="preserve">
          <source>IE 9</source>
          <target state="translated">イーエヌイー9</target>
        </trans-unit>
        <trans-unit id="8c7d126d16997b97355174dcda4c6bb9cf8e2b48" translate="yes" xml:space="preserve">
          <source>IE Mobile</source>
          <target state="translated">IEモバイル</target>
        </trans-unit>
        <trans-unit id="60b82a5cb94fb01631398c058b59f037ae77f375" translate="yes" xml:space="preserve">
          <source>IIFE</source>
          <target state="translated">IIFE</target>
        </trans-unit>
        <trans-unit id="3449c1aa01ef7a63b3d78a29f229155083bed4a6" translate="yes" xml:space="preserve">
          <source>INITIAL_CONFIG</source>
          <target state="translated">INITIAL_CONFIG</target>
        </trans-unit>
        <trans-unit id="7242c809890f5e50a88ffd8ad02f9da60184dd4a" translate="yes" xml:space="preserve">
          <source>INJECTOR</source>
          <target state="translated">INJECTOR</target>
        </trans-unit>
        <trans-unit id="5157ac1ff7f65b428bec7bef08cc132329b63c6d" translate="yes" xml:space="preserve">
          <source>ISO8601 basic format</source>
          <target state="translated">ISO8601基本フォーマット</target>
        </trans-unit>
        <trans-unit id="39097fa6a5275ab54197cd03bbe174e778b7eb1c" translate="yes" xml:space="preserve">
          <source>ISO8601 extended format + Z indicator for offset 0 (= XXXXX)</source>
          <target state="translated">ISO8601拡張フォーマット+オフセット0(=XXXXXX)のZインジケータ</target>
        </trans-unit>
        <trans-unit id="63c464b08623002f37661266e75b01e33a159ea0" translate="yes" xml:space="preserve">
          <source>Ideally, a component's job is to enable the user experience and nothing more. A component should present properties and methods for data binding, in order to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a &lt;em&gt;model&lt;/em&gt;).</source>
          <target state="translated">理想的には、コンポーネントの仕事は、ユーザーエクスペリエンスのみを有効にすることです。コンポーネントは、ビュー（テンプレートによってレンダリングされる）とアプリケーションロジック（&lt;em&gt;モデルの&lt;/em&gt;概念を含むことが多い）の間を仲介するために、データバインディングのプロパティとメソッドを提示する必要があります。</target>
        </trans-unit>
        <trans-unit id="273acb31b215d9e49019afd7c3e7cf8d4a83de16" translate="yes" xml:space="preserve">
          <source>Ideally, if an application isn't injecting a service, Angular shouldn't include it in the final output. However, Angular has to be able to identify at build time whether the app will require the service or not. Because it's always possible to inject a service directly using &lt;code&gt;injector.get(Service)&lt;/code&gt;, Angular can't identify all of the places in your code where this injection could happen, so it has no choice but to include the service in the injector. Thus, services in the NgModule &lt;code&gt;providers&lt;/code&gt; array or at component level are not tree-shakable.</source>
          <target state="translated">理想的には、アプリケーションがサービスを注入していない場合、Angularはそれを最終出力に含めるべきではありません。ただし、Angularは、アプリがサービスを必要とするかどうかをビルド時に識別できる必要があります。 &lt;code&gt;injector.get(Service)&lt;/code&gt; を使用してサービスを直接インジェクトすることは常に可能であるため、Angularはこのインジェクションが発生する可能性のあるコード内のすべての場所を特定できないため、インジェクタにサービスを含める以外に選択肢はありません。したがって、NgModule &lt;code&gt;providers&lt;/code&gt; 配列またはコンポーネントレベルのサービスは、ツリーを揺らすことができません。</target>
        </trans-unit>
        <trans-unit id="c0c74f9c69e219a901e496db780fa7e03049a871" translate="yes" xml:space="preserve">
          <source>Ideally, users should be able to click a link to navigate rather than pasting a route URL into the address bar.</source>
          <target state="translated">理想的には、ユーザーがアドレスバーにルートURLを貼り付けるのではなく、リンクをクリックして移動できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="06b6ace8ca3f18249e8ba4ea9090c0f34564ce1c" translate="yes" xml:space="preserve">
          <source>Identifier</source>
          <target state="translated">Identifier</target>
        </trans-unit>
        <trans-unit id="f58ce3d35d93d2140b71abc0fa1b54986940d04d" translate="yes" xml:space="preserve">
          <source>Identifies and handles a given HTTP request.</source>
          <target state="translated">指定された HTTP リクエストを識別し、処理します。</target>
        </trans-unit>
        <trans-unit id="faa69bd85cc69080cb6a8a871ae2448b19bdf3da" translate="yes" xml:space="preserve">
          <source>Identifies and handles a given JSONP request.</source>
          <target state="translated">与えられたJSONPリクエストを識別し、処理します。</target>
        </trans-unit>
        <trans-unit id="dee8349d1c84482e40f15df8442baac4ca99ef95" translate="yes" xml:space="preserve">
          <source>Identifies requests with the method JSONP and shifts them to the &lt;code&gt;&lt;a href=&quot;http/jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メソッドJSONPでリクエストを識別し、それらを &lt;code&gt;&lt;a href=&quot;http/jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt; にシフトします。</target>
        </trans-unit>
        <trans-unit id="f8df9c229b309d13b4e14007cc922a7bc063af20" translate="yes" xml:space="preserve">
          <source>Identifies requests with the method JSONP and shifts them to the &lt;code&gt;&lt;a href=&quot;jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メソッドJSONPでリクエストを識別し、それらを &lt;code&gt;&lt;a href=&quot;jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt; にシフトします。</target>
        </trans-unit>
        <trans-unit id="839e3114e3b9d3a3fa48867a14c4e9afe0357710" translate="yes" xml:space="preserve">
          <source>Identifies the call or event that triggered the navigation. An &lt;code&gt;imperative&lt;/code&gt; trigger is a call to &lt;code&gt;router.navigateByUrl()&lt;/code&gt; or &lt;code&gt;router.navigate()&lt;/code&gt;.</source>
          <target state="translated">ナビゲーションをトリガーした呼び出しまたはイベントを識別します。 &lt;code&gt;imperative&lt;/code&gt; トリガがへの呼び出しである &lt;code&gt;router.navigateByUrl()&lt;/code&gt; または &lt;code&gt;router.navigate()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25ab5ba8ca530f5f158154b68ffbcf85362be05b" translate="yes" xml:space="preserve">
          <source>Identifies the new platform factory.</source>
          <target state="translated">新しいプラットフォーム工場を識別します。</target>
        </trans-unit>
        <trans-unit id="38af51b71aa8062ad05f52bc1d4222fe545ab1aa" translate="yes" xml:space="preserve">
          <source>Identify</source>
          <target state="translated">Identify</target>
        </trans-unit>
        <trans-unit id="2a58e4f2e431bfd56df14f3e8c74e1585ce5f28d" translate="yes" xml:space="preserve">
          <source>Identify the active route</source>
          <target state="translated">アクティブなルートを特定する</target>
        </trans-unit>
        <trans-unit id="e4f148f2d6935d4ae76200aaec633ed31b1033b2" translate="yes" xml:space="preserve">
          <source>Identity reference</source>
          <target state="translated">アイデンティティの参照</target>
        </trans-unit>
        <trans-unit id="f24e9c9588c68667b970bc698f5d8988ec03b9be" translate="yes" xml:space="preserve">
          <source>Idle task queue</source>
          <target state="translated">アイドルタスクキュー</target>
        </trans-unit>
        <trans-unit id="6bb4d315363a95a4fbf146f2054fbe340f1c9487" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the view still renders but the displayed value is blank; you see only &quot;The item name is:&quot; with nothing after it.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; 、ビューはまだレンダリングするが、表示される値は空白です。「アイテム名は：」のみが表示され、その後には何も表示されません。</target>
        </trans-unit>
        <trans-unit id="6da6a54b219d1bf81b2cc66cad7dd0e7ddd6117a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; is the default &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt;, you can pass a type interface for the resulting object as a type parameter to the call.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; がデフォルトの &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; の場合、結果のオブジェクトの型インターフェースを型パラメーターとして呼び出しに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="9f61235f17a9a61f1406e160be41b27344ea51d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;@angular/localize&lt;/code&gt; is not installed, the Angular CLI may generate an error when you try to build a localized version of your app.</source>
          <target state="translated">場合 &lt;code&gt;@angular/localize&lt;/code&gt; インストールされていないアプリのローカライズされたバージョンをビルドしようとすると、角度CLIがエラーを生成することがあります。</target>
        </trans-unit>
        <trans-unit id="20046da8dd9cbe89cc7285da01207f6baa79e09b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the given options, the module will behave as if service workers are not supported by the browser, and the service worker will not be registered.</source>
          <target state="translated">特定のオプションで &lt;code&gt;enabled&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、モジュールはService Workerがブラウザーでサポートされていないかのように動作し、Service Workerは登録されません。</target>
        </trans-unit>
        <trans-unit id="e98a50040a0048fe1d6d721d215eaf87a57c6337" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ignoreCancelled&lt;/code&gt; is not set (the default), &lt;code&gt;verify()&lt;/code&gt; will also fail if cancelled requests were not explicitly matched.</source>
          <target state="translated">&lt;code&gt;ignoreCancelled&lt;/code&gt; が設定されていない場合（デフォルト）、キャンセルされた要求が明示的に一致しなかった場合も、 &lt;code&gt;verify()&lt;/code&gt; は失敗します。</target>
        </trans-unit>
        <trans-unit id="2634a7b2c56c056a6b1cbec3a8b79516051dae63" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;item&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the view still renders but the displayed value is blank; you see only &quot;The item name is:&quot; with nothing after it.</source>
          <target state="translated">場合は &lt;code&gt;item&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; 、ビューはまだレンダリングするが、表示される値は空白です。「アイテム名は：」のみが表示され、その後には何も表示されません。</target>
        </trans-unit>
        <trans-unit id="748b753025529c55a842c6d9f6660a18d272f322" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;myapp&lt;/code&gt; is the directory containing your app's distributable files, you would typically make available different versions for different locales in locale directories such as &lt;code&gt;myapp/fr&lt;/code&gt; for the French version and &lt;code&gt;myapp.com/es&lt;/code&gt; for the Spanish version.</source>
          <target state="translated">&lt;code&gt;myapp&lt;/code&gt; がアプリの配布可能なファイルを含むディレクトリである場合、通常、フランス語バージョンの &lt;code&gt;myapp/fr&lt;/code&gt; やスペイン語バージョンの &lt;code&gt;myapp.com/es&lt;/code&gt; など、ロケールディレクトリ内のロケールごとに異なるバージョンを利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="b8d8422f2e65706b8497bcc51a57226f6a6115f7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parentItem&lt;/code&gt; were some other type, you would need to specify &lt;code&gt;childItem&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; as that type as well.</source>
          <target state="translated">場合 &lt;code&gt;parentItem&lt;/code&gt; は、他のいくつかのタイプだった、次のように指定する必要があります &lt;code&gt;childItem&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; だけでなく、その型として。</target>
        </trans-unit>
        <trans-unit id="88c7c960113eaa483cbd792b988036fe861c77b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;resourcesOutputPath&lt;/code&gt; or &lt;code&gt;assets&lt;/code&gt; paths are modified after the generation of configuration file, you need to change the paths manually in &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;resourcesOutputPath&lt;/code&gt; または &lt;code&gt;assets&lt;/code&gt; パスが設定ファイルの作成後に変更されている、あなたは手動でパスを変更する必要が &lt;code&gt;ngsw-config.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59e9c7fd5ea287685b778a83b66934b4552cf074" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;responseType&lt;/code&gt; is the default &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt;, you can pass a type interface for the resulting object as a type parameter to the call.</source>
          <target state="translated">場合 &lt;code&gt;responseType&lt;/code&gt; はデフォルトで &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; 、あなたが呼び出しに型パラメータとして生成されるオブジェクトの型のインターフェイスを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2c26dcf1ae594af2316d44c7bd3b0f361e602408" translate="yes" xml:space="preserve">
          <source>If Angular doesn't find the provider in any &lt;code&gt;ElementInjector&lt;/code&gt;s, it goes back to the element where the request originated and looks in the &lt;code&gt;ModuleInjector&lt;/code&gt; hierarchy. If Angular still doesn't find the provider, it throws an error.</source>
          <target state="translated">Elementが &lt;code&gt;ElementInjector&lt;/code&gt; で見つからない場合、Angularはリクエストが発生した要素に戻り、 &lt;code&gt;ModuleInjector&lt;/code&gt; 階層を調べます。それでもAngularがプロバイダーを見つけられない場合、エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="7e29b3f5e2dff7dd76052d8ccd8eddda8abe0ae1" translate="yes" xml:space="preserve">
          <source>If AnimationBuilder is used, enables scrubbing support for IE/Edge and Safari. (Chrome and Firefox support this natively).</source>
          <target state="translated">AnimationBuilderを使用している場合は、IE/EdgeとSafariのスクラブサポートを有効にします。(ChromeとFirefoxはこれをネイティブでサポートしています)。</target>
        </trans-unit>
        <trans-unit id="41891637b47b87d8458f07c4a6cafe2c7fdb3d2b" translate="yes" xml:space="preserve">
          <source>If NgModule A provides a service for token 'X' and imports an NgModule B that also provides a service for token 'X', then NgModule A's service definition &quot;wins&quot;.</source>
          <target state="translated">NgModule A がトークン 'X' 用のサービスを提供し、トークン 'X' 用のサービスを提供する NgModule B をインポートした場合、NgModule A のサービス定義は &quot;勝ち&quot; となります。</target>
        </trans-unit>
        <trans-unit id="c1eecfae70b492bc24007ffa2294728a9dfa495c" translate="yes" xml:space="preserve">
          <source>If a cachable request is found in the cache, the interceptor returns an &lt;code&gt;of()&lt;/code&gt;&lt;em&gt;observable&lt;/em&gt; with the cached response, by-passing the &lt;code&gt;next&lt;/code&gt; handler (and all other interceptors downstream).</source>
          <target state="translated">キャッシュ可能な要求がキャッシュ内で見つかった場合、インターセプターはキャッシュされた応答で&lt;em&gt;監視可能な&lt;/em&gt; &lt;code&gt;of()&lt;/code&gt; を返し、 &lt;code&gt;next&lt;/code&gt; ハンドラー（および他のすべてのインターセプターダウンストリーム）をバイパスします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a557a16e0123df7fbc078703591e93ef301867af" translate="yes" xml:space="preserve">
          <source>If a cachable request is not in cache, the code calls &lt;code&gt;sendRequest&lt;/code&gt;.</source>
          <target state="translated">キャッシュ可能な要求がキャッシュにない場合、コードは &lt;code&gt;sendRequest&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e31a4be0de140cda7feef27f0475c0e43572b63f" translate="yes" xml:space="preserve">
          <source>If a cacheable request is found in the cache, the interceptor returns an &lt;code&gt;of()&lt;/code&gt;&lt;em&gt;observable&lt;/em&gt; with the cached response, by-passing the &lt;code&gt;next&lt;/code&gt; handler (and all other interceptors downstream).</source>
          <target state="translated">キャッシュ可能なリクエストがキャッシュ内で見つかった場合、インターセプターはキャッシュされた応答で&lt;em&gt;監視可能な&lt;/em&gt; &lt;code&gt;of()&lt;/code&gt; を返し、 &lt;code&gt;next&lt;/code&gt; ハンドラー（およびダウンストリームの他のすべてのインターセプター）をバイパスします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a4ef8fc972b8795ff9dbbaa46f63a9c20d56144c" translate="yes" xml:space="preserve">
          <source>If a cacheable request is not in cache, the code calls &lt;code&gt;sendRequest()&lt;/code&gt;. This function creates a &lt;a href=&quot;http#immutability&quot;&gt;request clone&lt;/a&gt; without headers, because the npm API forbids them. The function then forwards the clone of the request to &lt;code&gt;next.handle()&lt;/code&gt; which ultimately calls the server and returns the server's response.</source>
          <target state="translated">キャッシュ可能なリクエストがキャッシュにない場合、コードは &lt;code&gt;sendRequest()&lt;/code&gt; を呼び出します。npm APIがヘッダーを禁止しているため、この関数はヘッダーなしで&lt;a href=&quot;http#immutability&quot;&gt;リクエストクローン&lt;/a&gt;を作成します。次に、関数は要求のクローンを &lt;code&gt;next.handle()&lt;/code&gt; に転送し、next.handle（）は最終的にサーバーを呼び出し、サーバーの応答を返します。</target>
        </trans-unit>
        <trans-unit id="25a21150a7b49171680b296303c8c3068307fd81" translate="yes" xml:space="preserve">
          <source>If a component isn't an &lt;em&gt;entry component&lt;/em&gt; and isn't found in a template, the tree shaker will throw it away. So, it's best to add only the components that are truly entry components to help keep your app as trim as possible.</source>
          <target state="translated">コンポーネントが&lt;em&gt;エントリコンポーネント&lt;/em&gt;ではなく、テンプレートにもない場合、ツリーシェーカーはその&lt;em&gt;コンポーネント&lt;/em&gt;を破棄します。したがって、アプリをできる限りトリムするために、本当にエントリコンポーネントであるコンポーネントのみを追加するのが最善です。</target>
        </trans-unit>
        <trans-unit id="82977af04a1be023e2632c7ce2dc1d6a584c85e0" translate="yes" xml:space="preserve">
          <source>If a component isn't an &lt;em&gt;entry component&lt;/em&gt; or wasn't found in a template, the compiler omits it.</source>
          <target state="translated">コンポーネントが&lt;em&gt;エントリコンポーネントで&lt;/em&gt;はないか、テンプレートで見つからなかった場合、コンパイラはそれを省略します。</target>
        </trans-unit>
        <trans-unit id="928fd4fa526ed6eda7f59b8933282d6e07b0b85b" translate="yes" xml:space="preserve">
          <source>If a component, directive, or pipe belongs to a module in the &lt;code&gt;imports&lt;/code&gt; array, ​&lt;em&gt;don't&lt;/em&gt;​ re-declare it in the &lt;code&gt;declarations&lt;/code&gt; array. If you wrote it and it should belong to this module, ​&lt;em&gt;do&lt;/em&gt;​ declare it in the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">コンポーネント、指令、又はパイプは、モジュールに属する場合 &lt;code&gt;imports&lt;/code&gt; 配列、&lt;em&gt;ない&lt;/em&gt;に再宣言を &lt;code&gt;declarations&lt;/code&gt; アレイ。あなたはそれを書いたし、それがこのモジュールに属している必要がある場合は、&lt;em&gt;ない&lt;/em&gt;でそれを宣言する &lt;code&gt;declarations&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="5412001a6342f943d1164b11e4f80c199052baef" translate="yes" xml:space="preserve">
          <source>If a library doesn't have typings available at &lt;code&gt;@types/&lt;/code&gt;, you can still use it by manually adding typings for it. To do this:</source>
          <target state="translated">ライブラリの &lt;code&gt;@types/&lt;/code&gt; で使用可能な型がない場合でも、手動で型を追加することで使用できます。これをする：</target>
        </trans-unit>
        <trans-unit id="fdb8960b3596db71a2d8f8b8dc45d058f36e0a1e" translate="yes" xml:space="preserve">
          <source>If a link in the page is a root URL (has an &lt;code&gt;authority&lt;/code&gt;), the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; is not used. In this way, an &lt;code&gt;&lt;a href=&quot;../api/common/app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; with an authority will cause all links created by Angular to ignore the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; value.</source>
          <target state="translated">ページ内のリンクがルートURL（ &lt;code&gt;authority&lt;/code&gt; 持っている）の場合、 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; は使用されません。このように、権限を持つ &lt;code&gt;&lt;a href=&quot;../api/common/app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; により、Angularによって作成されたすべてのリンクが &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; basehref &amp;gt;値を無視します。</target>
        </trans-unit>
        <trans-unit id="5b23cd84551a7f7a976d6aeb6c17b5809a2ed511" translate="yes" xml:space="preserve">
          <source>If a matching request has been made, fail with an error message including the given request description, if any.</source>
          <target state="translated">マッチするリクエストがあった場合は、与えられたリクエストの説明を含むエラーメッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="37dfd42ae1c031038225c47cb260140e0566ea26" translate="yes" xml:space="preserve">
          <source>If a module defines both providers and declarations (components, directives, pipes), then loading the module in multiple feature modules would duplicate the registration of the service. This could result in multiple service instances and the service would no longer behave as a singleton.</source>
          <target state="translated">モジュールがプロバイダと宣言(コンポーネント、ディレクティブ、パイプ)の両方を定義している場合、複数の機能モジュールでモジュールをロードすると、サービスの登録が重複してしまいます。その結果、複数のサービスインスタンスが発生する可能性があり、サービスはシングルトンとして動作しなくなります。</target>
        </trans-unit>
        <trans-unit id="153c1d112fedc7715f021056fb6893af4681c150" translate="yes" xml:space="preserve">
          <source>If a particular file fails validation, the Angular service worker attempts to re-fetch the content using a &quot;cache-busting&quot; URL parameter to eliminate the effects of browser or intermediate caching. If that content also fails validation, the service worker considers the entire version of the app to be invalid and it stops serving the app. If necessary, the service worker enters a safe mode where requests fall back on the network, opting not to use its cache if the risk of serving invalid, broken, or outdated content is high.</source>
          <target state="translated">特定のファイルが検証に失敗した場合、Angularのサービスワーカーはブラウザや中間キャッシュの影響を排除するために「キャッシュバッシング」URLパラメータを使ってコンテンツの再取得を試みます。そのコンテンツも検証に失敗した場合、サービスワーカーはアプリのバージョン全体を無効とみなし、アプリの提供を停止します。必要に応じて、サービスワーカーはリクエストがネットワーク上にフォールバックするセーフモードに入り、無効なコンテンツ、壊れているコンテンツ、または古くなったコンテンツを提供するリスクが高い場合は、キャッシュを使用しないことを選択します。</target>
        </trans-unit>
        <trans-unit id="772ddfa5b7d68e2c32169f0370cc73c59e176504" translate="yes" xml:space="preserve">
          <source>If a previous search request is still &lt;em&gt;in-flight&lt;/em&gt; (as when the network connection is poor), it cancels that request and sends a new one.</source>
          <target state="translated">以前の検索要求がまだ処理&lt;em&gt;中の&lt;/em&gt;場合（ネットワーク接続が悪い場合など）、その要求はキャンセルされ、新しい要求が送信されます。</target>
        </trans-unit>
        <trans-unit id="b53118bae5db34ffb1b4cf25da459ef342963d97" translate="yes" xml:space="preserve">
          <source>If a provider cannot be configured in this way (perhaps because it has no sensible default value), then register application-wide providers in the root &lt;code&gt;AppModule&lt;/code&gt;, not in the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">（それは賢明なデフォルト値を持っていないなどの理由で）プロバイダはこのように構成することができない場合は、ルートでアプリケーション全体のプロバイダを登録 &lt;code&gt;AppModule&lt;/code&gt; 、ないで &lt;code&gt;AppComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7eb25f225ddf9c958a4a310cf508da2c8b8d3cae" translate="yes" xml:space="preserve">
          <source>If a region of the DOM (or the entire application) has its animations disabled, the animation trigger callbacks still fire, but for zero seconds. When the callback fires, it provides an instance of an &lt;code&gt;&lt;a href=&quot;animationevent&quot;&gt;AnimationEvent&lt;/a&gt;&lt;/code&gt;. If animations are disabled, the &lt;code&gt;.disabled&lt;/code&gt; flag on the event is true.</source>
          <target state="translated">DOMの領域（またはアプリケーション全体）のアニメーションが無効になっている場合でも、アニメーショントリガーコールバックは発生しますが、ゼロ秒間です。コールバックが起動すると、 &lt;code&gt;&lt;a href=&quot;animationevent&quot;&gt;AnimationEvent&lt;/a&gt;&lt;/code&gt; のインスタンスが提供されます。アニメーションが無効になっている場合、イベントの &lt;code&gt;.disabled&lt;/code&gt; フラグはtrueです。</target>
        </trans-unit>
        <trans-unit id="ed6f22701aa659882520ee8999e4722594b619bd" translate="yes" xml:space="preserve">
          <source>If a route is protected by &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; guards, the preloaded will not load it.</source>
          <target state="translated">ルートが &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; ガードによって保護されている場合、プリロードされてもロードされません。</target>
        </trans-unit>
        <trans-unit id="31211ceb25db282c2778b0e7f523e65a2928bb5b" translate="yes" xml:space="preserve">
          <source>If a route is protected by &lt;code&gt;canLoad&lt;/code&gt; guards, the preloaded will not load it.</source>
          <target state="translated">ルートが &lt;code&gt;canLoad&lt;/code&gt; ガードによって保護されている場合、プリロードされたルートはロードされません。</target>
        </trans-unit>
        <trans-unit id="a9439dbdfd08109c95a98837df7b16acd71a7577" translate="yes" xml:space="preserve">
          <source>If a synchronous error happens it will be rethrown and not reported via &lt;code&gt;onError&lt;/code&gt;.</source>
          <target state="translated">同期エラーが発生した場合は再スローされ、 &lt;code&gt;onError&lt;/code&gt; を介して報告されません。</target>
        </trans-unit>
        <trans-unit id="1193b9b4175de5acb12984919c9136d2c89a4f85" translate="yes" xml:space="preserve">
          <source>If a token is injected with the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; flag, the module injector is not searched for that token (previously, tokens marked with these flags would still search at the module level).</source>
          <target state="translated">トークンはを注入されている場合は &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; フラグ、モジュールインジェクタはそのトークンが検索されていない（以前に、これらのフラグの付いたトークンまだモジュールレベルで検索します）。</target>
        </trans-unit>
        <trans-unit id="00daec30c96e47a317ac6daa4260ebf84859c21c" translate="yes" xml:space="preserve">
          <source>If a trigger binding value is a Boolean, it can be matched using a transition expression that compares true and false or 1 and 0. For example:</source>
          <target state="translated">トリガ・バインディング値がブール値の場合、true と false、または 1 と 0 を比較する遷移式を使用して一致させることができます。 例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="126cac6a6045858048bd7e923d7b34e4f134314c" translate="yes" xml:space="preserve">
          <source>If a trigger contains a boolean value as a binding value, then this value can be matched using a &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; expression that compares &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">トリガーにバインディング値としてブール値が含まれている場合、この値は、 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; 、または &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;0&lt;/code&gt; を比較する &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 式を使用して一致させることができます。</target>
        </trans-unit>
        <trans-unit id="e50e34462749ac65c8cf4317ed5676213f6e2090" translate="yes" xml:space="preserve">
          <source>If a user enters that URL into the browser address bar, the router should recognize the pattern and go to the same &quot;Magneta&quot; detail view.</source>
          <target state="translated">ユーザーがブラウザのアドレスバーにそのURLを入力すると、ルーターはそのパターンを認識し、同じ「Magneta」の詳細表示に移動するはずです。</target>
        </trans-unit>
        <trans-unit id="f6919a849126284f296a0ff57039a9cf7b8e4a82" translate="yes" xml:space="preserve">
          <source>If an expression is not foldable, the collector writes it to &lt;code&gt;.metadata.json&lt;/code&gt; as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; for the compiler to resolve.</source>
          <target state="translated">式を折りたたむことができない場合、コレクターはそれを &lt;code&gt;.metadata.json&lt;/code&gt; に&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;として書き込み、コンパイラーが解決します。</target>
        </trans-unit>
        <trans-unit id="3776c3775f99b8ca1455c46376b27adc6b1e4aab" translate="yes" xml:space="preserve">
          <source>If an expression uses unsupported syntax, the collector writes an error node to the &lt;code&gt;.metadata.json&lt;/code&gt; file. The compiler later reports the error if it needs that piece of metadata to generate the application code.</source>
          <target state="translated">式でサポートされていない構文が使用されている場合、コレクターはエラーノードを &lt;code&gt;.metadata.json&lt;/code&gt; ファイルに書き込みます。アプリケーションコードを生成するためにそのメタデータが必要な場合、コンパイラは後でエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="2c1ea63fe3e751750d668900003cfb0b2fc2138e" translate="yes" xml:space="preserve">
          <source>If any of the passed-in parameter values are missing from this call, the default values are used. If one or more parameter values are missing before a step is animated, &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; throws an error.</source>
          <target state="translated">渡されたパラメーター値のいずれかがこの呼び出しで欠落している場合、デフォルト値が使用されます。ステップがアニメーション化される前に1つ以上のパラメーター値が欠落している場合、 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="8297839eeda1d6ac628fdcf349ff15b398e9f7ec" translate="yes" xml:space="preserve">
          <source>If any requests are outstanding, fail with an error message indicating which requests were not handled.</source>
          <target state="translated">未処理のリクエストがある場合は、どのリクエストが処理されなかったかを示すエラーメッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="78a0a0f3d87236bcde7fe383b154888d25e30118" translate="yes" xml:space="preserve">
          <source>If compiling with the ViewEngine renderer, do not use this in a production server environment. Use pre-compiled &lt;a href=&quot;../core/ngmodulefactory&quot;&gt;&lt;code&gt;NgModuleFactory&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;rendermodulefactory&quot;&gt;&lt;code&gt;renderModuleFactory&lt;/code&gt;&lt;/a&gt; instead. If compiling with the Ivy renderer, this method is the recommended rendering method for platform-server.</source>
          <target state="translated">ViewEngineレンダラーを使用してコンパイルする場合は、実稼働サーバー環境でこれを使用しないでください。代わりに、事前にコンパイルされた&lt;a href=&quot;../core/ngmodulefactory&quot;&gt; &lt;code&gt;NgModuleFactory&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;rendermodulefactory&quot;&gt; &lt;code&gt;renderModuleFactory&lt;/code&gt; &lt;/a&gt;とともに使用してください。Ivyレンダラーでコンパイルする場合、この方法はプラットフォームサーバーに推奨されるレンダリング方法です。</target>
        </trans-unit>
        <trans-unit id="1fe08f5539ac4bc33409018c8e77a3cf182d48db" translate="yes" xml:space="preserve">
          <source>If desired, open the Output window (&lt;code&gt;View&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;) to watch the npm commands execute.</source>
          <target state="translated">必要に応じて、出力ウィンドウ（ &lt;code&gt;View&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; ）を開いて、npmコマンドの実行を監視します。</target>
        </trans-unit>
        <trans-unit id="a7351ddc6a7cd3e167d6abe4319ab53c493d68c8" translate="yes" xml:space="preserve">
          <source>If don't add the interface for the script-defined extension, your IDE shows an error:</source>
          <target state="translated">スクリプト定義拡張のインターフェイスを追加しないと、IDEはエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="ac260a05c0b8dad2568206edbc95161f250ef807" translate="yes" xml:space="preserve">
          <source>If false, will error out if installed packages are incompatible with the update.</source>
          <target state="translated">false の場合、インストールされているパッケージが更新プログラムと互換性がない場合にエラーとなります。</target>
        </trans-unit>
        <trans-unit id="f032cf6d2b03e78a246739a8908cb417e0108e0e" translate="yes" xml:space="preserve">
          <source>If forms are a central part of your application, scalability is very important. Being able to reuse form models across components is critical.</source>
          <target state="translated">フォームがアプリケーションの中心的な部分である場合、スケーラビリティは非常に重要です。コンポーネント間でフォームモデルを再利用できることは非常に重要です。</target>
        </trans-unit>
        <trans-unit id="db9bfb7eb5ad6beada080172eda6cd3931052021" translate="yes" xml:space="preserve">
          <source>If inside an embedded view (e.g. &lt;code&gt;*&lt;a href=&quot;../../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;*&lt;a href=&quot;../../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;), retrieves the context of the embedded view that the element is part of. Otherwise retrieves the instance of the component whose view owns the element (in this case, the result is the same as calling &lt;code&gt;&lt;a href=&quot;nggetowningcomponent&quot;&gt;getOwningComponent&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">埋め込みビュー内にある場合（たとえば、 &lt;code&gt;*&lt;a href=&quot;../../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;*&lt;a href=&quot;../../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ）、要素が含まれている埋め込みビューのコンテキストを取得します。それ以外の場合は、ビューが要素を所有しているコンポーネントのインスタンスを取得します（この場合、結果は &lt;code&gt;&lt;a href=&quot;nggetowningcomponent&quot;&gt;getOwningComponent&lt;/a&gt;&lt;/code&gt; の呼び出しと同じです）。</target>
        </trans-unit>
        <trans-unit id="5315ddf9835a63fe9abe1f91461e4e5c8b284a75" translate="yes" xml:space="preserve">
          <source>If inside an embedded view (e.g. &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;), retrieves the context of the embedded view that the element is part of. Otherwise retrieves the instance of the component whose view owns the element (in this case, the result is the same as calling &lt;code&gt;&lt;a href=&quot;global/nggetowningcomponent&quot;&gt;getOwningComponent&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">埋め込みビュー内にある場合（たとえば、 &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ）、要素が含まれている埋め込みビューのコンテキストを取得します。それ以外の場合は、ビューが要素を所有しているコンポーネントのインスタンスを取得します（この場合、結果は &lt;code&gt;&lt;a href=&quot;global/nggetowningcomponent&quot;&gt;getOwningComponent&lt;/a&gt;&lt;/code&gt; の呼び出しと同じです）。</target>
        </trans-unit>
        <trans-unit id="534d625f4fac3eff1e93003d98e3e44e789a243b" translate="yes" xml:space="preserve">
          <source>If it doesn't return a valid &lt;code&gt;Crisis&lt;/code&gt;, return an empty &lt;code&gt;Observable&lt;/code&gt;, canceling the previous in-flight navigation to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; and navigate the user back to the &lt;code&gt;CrisisListComponent&lt;/code&gt;. The update resolver service looks like this:</source>
          <target state="translated">有効な &lt;code&gt;Crisis&lt;/code&gt; を返さない場合は、空の &lt;code&gt;Observable&lt;/code&gt; を返し、 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; への前の機内ナビゲーションをキャンセルし、ユーザーを &lt;code&gt;CrisisListComponent&lt;/code&gt; に戻します。更新リゾルバーサービスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1196f5aa5aa0dd7720977e806de967ce00602e90" translate="yes" xml:space="preserve">
          <source>If it doesn't return a valid &lt;code&gt;Crisis&lt;/code&gt;, then return an empty &lt;code&gt;Observable&lt;/code&gt;, cancel the previous in-progress navigation to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;, and navigate the user back to the &lt;code&gt;CrisisListComponent&lt;/code&gt;. The updated resolver service looks like this:</source>
          <target state="translated">有効な &lt;code&gt;Crisis&lt;/code&gt; が返されない場合は、空の &lt;code&gt;Observable&lt;/code&gt; を返し、 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; への前の進行中のナビゲーションをキャンセルして、ユーザーを &lt;code&gt;CrisisListComponent&lt;/code&gt; に戻します。更新されたリゾルバーサービスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="94cc9640df1c6d475f62695048e0d376c2bec854" translate="yes" xml:space="preserve">
          <source>If it returns &lt;code&gt;false&lt;/code&gt;, the navigation process stops and the user stays put.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; が返された場合、ナビゲーションプロセスは停止し、ユーザーはそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="934263a7e8d3127facc33238735344f25d2875f1" translate="yes" xml:space="preserve">
          <source>If it returns &lt;code&gt;true&lt;/code&gt;, the navigation process continues.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; が返された場合、ナビゲーションプロセスが続行されます。</target>
        </trans-unit>
        <trans-unit id="c061c62da9990fa021cd80362e45d9d595bd3cad" translate="yes" xml:space="preserve">
          <source>If it returns a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, the current navigation cancels and a new navigation is initiated to the &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返す場合、現在のナビゲーションはキャンセルされ、返された &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="ccea769affa3066668cea7a19a1c6abd478fefbc" translate="yes" xml:space="preserve">
          <source>If it's the consumer's decision whether a provider is available application-wide or not, then register providers in modules (&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt;) instead of registering in components (&lt;code&gt;@Component.providers&lt;/code&gt;).</source>
          <target state="translated">プロバイダーがアプリケーション全体で使用できるかどうかがコンシューマーの決定である場合は、コンポーネント（ &lt;code&gt;@Component.providers&lt;/code&gt; ）に登録する代わりに、プロバイダーをモジュール（ &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="3de1670255b8a935f81404283d68b60a57924133" translate="yes" xml:space="preserve">
          <source>If matching by URL isn't sufficient, it's possible to implement your own matching function. For example, you could look for an outgoing request that has an authorization header:</source>
          <target state="translated">URL によるマッチングでは不十分な場合は、独自のマッチング機能を実装することも可能です。例えば、認可ヘッダを持つ送信リクエストを探すことができます。</target>
        </trans-unit>
        <trans-unit id="056b912650db2b88322b88ec9db23fdbd1b15e9c" translate="yes" xml:space="preserve">
          <source>If necessary, listen to the directive's &lt;code&gt;ngSubmit&lt;/code&gt; event to be notified when the user has triggered a form submission. The &lt;code&gt;ngSubmit&lt;/code&gt; event emits the original form submission event.</source>
          <target state="translated">必要に応じて、ユーザーがフォーム &lt;code&gt;ngSubmit&lt;/code&gt; をトリガーしたときに通知されるディレクティブのngSubmitイベントをリッスンします。 &lt;code&gt;ngSubmit&lt;/code&gt; のイベントは、元のフォーム送信イベントを発します。</target>
        </trans-unit>
        <trans-unit id="1d1b279b18b25539f878e1f938bbd94f7b8453bd" translate="yes" xml:space="preserve">
          <source>If no names are supplied, the default cookie name is &lt;code&gt;XSRF-TOKEN&lt;/code&gt; and the default header name is &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">名前を指定しない場合、デフォルトのCookie名は &lt;code&gt;XSRF-TOKEN&lt;/code&gt; で、デフォルトのヘッダー名は &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d46fc13fcfb33c04d67d471d163a937c0bfbc809" translate="yes" xml:space="preserve">
          <source>If no parameters are specified, the function rounds off to the nearest value using this &lt;a href=&quot;https://en.wikibooks.org/wiki/Arithmetic/Rounding&quot;&gt;rounding method&lt;/a&gt;. The behavior differs from that of the JavaScript &lt;code&gt;Math.round()&lt;/code&gt; function. In the following case for example, the pipe rounds down where &lt;code&gt;Math.round()&lt;/code&gt; rounds up:</source>
          <target state="translated">パラメータが指定されていない場合、関数はこの&lt;a href=&quot;https://en.wikibooks.org/wiki/Arithmetic/Rounding&quot;&gt;丸め方法&lt;/a&gt;を使用して最も近い値に丸めます。この動作は、JavaScript &lt;code&gt;Math.round()&lt;/code&gt; 関数の動作とは異なります。たとえば、次の場合、パイプは &lt;code&gt;Math.round()&lt;/code&gt; が切り上げる場所を切り捨てます。</target>
        </trans-unit>
        <trans-unit id="4697ce1b28fc4ca20feccfb80e7cc0346431c557" translate="yes" xml:space="preserve">
          <source>If no path is given, this method checks for the error on the current control.</source>
          <target state="translated">パスが与えられていない場合、このメソッドは現在のコントロールのエラーをチェックします。</target>
        </trans-unit>
        <trans-unit id="18e3524ed61782df3f426fecd17d77f48f0bf410" translate="yes" xml:space="preserve">
          <source>If no provider is found in the root injector, the DI framework throws an error.</source>
          <target state="translated">ルート・インジェクタでプロバイダが見つからない場合、DI フレームワークはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="df3e28bc99646e24bb4e26e24b47cf0ecf85e067" translate="yes" xml:space="preserve">
          <source>If no such request has been made, or more than one such request has been made, fail with an error message including the given request description, if any.</source>
          <target state="translated">そのようなリクエストが行われていない場合、または複数のリクエストが行われている場合は、与えられたリクエストの説明を含むエラーメッセージを表示して失敗する。</target>
        </trans-unit>
        <trans-unit id="30d7bba1ab11ca5cea6604c658835a3fa2b9e7f3" translate="yes" xml:space="preserve">
          <source>If no such type can be inferred, this method will return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">そのような型を推測できない場合、このメソッドは &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9f484cd2e0ac3fa9d4d2037af3783405320d1ccb" translate="yes" xml:space="preserve">
          <source>If none of the keys of the &lt;code&gt;mapping&lt;/code&gt; match the &lt;code&gt;value&lt;/code&gt;, then the content of the &lt;code&gt;other&lt;/code&gt; key is returned when present, otherwise an empty string is returned.</source>
          <target state="translated">キーのいずれも場合 &lt;code&gt;mapping&lt;/code&gt; 一致しない &lt;code&gt;value&lt;/code&gt; 、その後の内容 &lt;code&gt;other&lt;/code&gt; 存在、そうでなければ空のストリングが返されたときにキーが返されます。</target>
        </trans-unit>
        <trans-unit id="5289261bc01c41048f4a824110cc30dce1f1853c" translate="yes" xml:space="preserve">
          <source>If not supplied, the value is taken from &lt;code&gt;&lt;a href=&quot;compileroptions&quot;&gt;CompilerOptions&lt;/a&gt;&lt;/code&gt;. The default compiler option is &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定しない場合、値は &lt;code&gt;&lt;a href=&quot;compileroptions&quot;&gt;CompilerOptions&lt;/a&gt;&lt;/code&gt; から取得されます。デフォルトのコンパイラオプションは &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a785f84f703473ade0c0ff1fe9607c482a6c9fd7" translate="yes" xml:space="preserve">
          <source>If null or undefined, the view engine won't call it. This is used as a performance optimization for production mode.</source>
          <target state="translated">nullまたは未定義の場合、ビューエンジンはこれを呼び出しません。これは、プロダクションモードのパフォーマンスの最適化として使用されます。</target>
        </trans-unit>
        <trans-unit id="b27c861d54587f90dcd31f70995af48c38707d2e" translate="yes" xml:space="preserve">
          <source>If part of the Angular upgrade plan is to also take TypeScript into use, it makes sense to bring in the TypeScript compiler even before the upgrade itself begins. This means there's one less thing to learn and think about during the actual upgrade. It also means you can start using TypeScript features in your AngularJS code.</source>
          <target state="translated">Angularのアップグレード計画の一部としてTypeScriptも使用するのであれば、アップグレードが始まる前にTypeScriptコンパイラを導入するのは理にかなっています。これは、実際のアップグレードの間に学ぶことや考えることが一つ減ることを意味します。また、AngularJSのコードでTypeScriptの機能を使い始めることもできます。</target>
        </trans-unit>
        <trans-unit id="e616c57ff16a9892f31e3e14cf215a3a317fefba" translate="yes" xml:space="preserve">
          <source>If provided, a new value for the given configuration key.</source>
          <target state="translated">指定された場合、指定された設定キーの新しい値。</target>
        </trans-unit>
        <trans-unit id="abca8a3c87f57071bd98c098938909b796da3ecb" translate="yes" xml:space="preserve">
          <source>If provided, overrides the configured injector.</source>
          <target state="translated">設定されている場合は、設定されたインジェクタを上書きします。</target>
        </trans-unit>
        <trans-unit id="32bd8e69ead64639bd08877d0b56a7d222032521" translate="yes" xml:space="preserve">
          <source>If selecting the native &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element in a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; where the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;s are created via &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, use the &lt;code&gt;[selected]&lt;/code&gt; property of an &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; instead of binding to the &lt;code&gt;[value]&lt;/code&gt; property of the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element (previously, you could bind to either.) &lt;a href=&quot;ivy-compatibility-examples#select-value-binding&quot;&gt;details&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; が &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;を介して作成される &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; でネイティブの &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素を選択する場合は、&amp;lt;select&amp;gt;の &lt;code&gt;[value]&lt;/code&gt; プロパティにバインドする代わりに、 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; の &lt;code&gt;[selected]&lt;/code&gt; プロパティを使用し &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素（以前は、どちらかにバインドできました。）&lt;a href=&quot;ivy-compatibility-examples#select-value-binding&quot;&gt;詳細&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a11ccb963889053d0a672c70d6f2544753338193" translate="yes" xml:space="preserve">
          <source>If set, the &lt;code&gt;templateUrl&lt;/code&gt; and &lt;code&gt;styleUrl&lt;/code&gt; are resolved relative to the component.</source>
          <target state="translated">設定されている場合、 &lt;code&gt;templateUrl&lt;/code&gt; と &lt;code&gt;styleUrl&lt;/code&gt; はコンポーネントに対して相対的に解決されます。</target>
        </trans-unit>
        <trans-unit id="5392a170eaea5c2707b51db35874eb84acc7dff0" translate="yes" xml:space="preserve">
          <source>If that doesn't work, an option of last resort is to turn off full mode entirely with &lt;code&gt;fullTemplateTypeCheck: false&lt;/code&gt;, as we've made a special effort to make Angular version 9 backwards compatible in this case.</source>
          <target state="translated">それが機能しない場合、最後の手段のオプションは、 &lt;code&gt;fullTemplateTypeCheck: false&lt;/code&gt; を使用してフルモードを完全にオフにすることです。この場合、Angularバージョン9に下位互換性を持たせるために特別な努力をしました。</target>
        </trans-unit>
        <trans-unit id="368133d05f6469fb1d0a68d64ec9d0ec08d47a2d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt; generated code for every declared component, it would defeat the purpose of the tree shaker.</source>
          <target state="translated">&lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angularコンパイラが&lt;/a&gt;宣言されたすべてのコンポーネントのコードを生成した場合、ツリーシェーカーの目的に反することになります。</target>
        </trans-unit>
        <trans-unit id="8223942c2b882d46175361a2625981bac0326595" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; includes a &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; part, the &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; is only used if the &lt;code&gt;path&lt;/code&gt; of a link in the page is empty and has no &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt;. This means that a &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; is only included when using &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; 含まれる &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; 一部を、 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; 場合にのみ使用される &lt;code&gt;path&lt;/code&gt; のページ内のリンクのは、空であり、持っていない &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; 。つまり、 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; を使用する場合にのみ含まれます。</target>
        </trans-unit>
        <trans-unit id="b04069fd9407468f4ab42b45f803e9f28a2fc222" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--prod&lt;/code&gt; command line flag is also used, it is applied first, and its settings can be overridden by any configurations specified via the &lt;code&gt;--configuration&lt;/code&gt; flag.</source>
          <target state="translated">場合 &lt;code&gt;--prod&lt;/code&gt; コマンド・ライン・フラグも使用され、それが最初に適用され、その設定を介して指定された任意の構成で上書きでき &lt;code&gt;--configuration&lt;/code&gt; のフラグ。</target>
        </trans-unit>
        <trans-unit id="65f23ab622908a00b35e36a91d40431ece26a111" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; were allowed to continue, the tests would run and fail mysteriously before the compiler could finished.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; の続行が許可された場合、コンパイラーが完了する前にテストが実行され、不思議なことに失敗します。</target>
        </trans-unit>
        <trans-unit id="560f12bb9fc58e2ddbb891d578b749239f1e6db9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; didn&amp;rsquo;t have &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; then each feature module would instantiate a new &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; instance, which would break the application as there can only be one &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;. By using the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method, the root application module imports &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; and gets a &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, and all feature modules import &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; which does not instantiate another &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; は持っていなかった &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 、各機能モジュールは、新しいインスタンスう &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; だけがあることができ、アプリケーションを破るインスタンス、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを使用することにより、ルートアプリケーションモジュールは &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; をインポートして &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を取得し、すべての機能モジュールは別の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; インスタンス化しない &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="164bda4ad7759a6e7de3a29bb761c4da6091e441" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; didn&amp;rsquo;t have &lt;code&gt;forRoot()&lt;/code&gt; then each feature module would instantiate a new &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; instance, which would break the application as there can only be one &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;. By using the &lt;code&gt;forRoot()&lt;/code&gt; method, the root application module imports &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; and gets a &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, and all feature modules import &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; which does not instantiate another &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; は持っていなかった &lt;code&gt;forRoot()&lt;/code&gt; 、各機能モジュールは、新しいインスタンスう &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; だけがあることができ、アプリケーションを破るインスタンス、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;forRoot()&lt;/code&gt; メソッドを使用することにより、ルートアプリケーションモジュールは &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; をインポートして &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を取得し、すべての機能モジュールは別の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; インスタンス化しない &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="479d4c87591e468174bfa0a3f8dc2135cb777c4e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for the sample application, set the &lt;code&gt;href&lt;/code&gt; value &lt;em&gt;exactly&lt;/em&gt; as shown here.</source>
          <target state="translated">場合は &lt;code&gt;app&lt;/code&gt; フォルダはアプリケーションのルートである、それは、サンプルアプリケーションのためであるように、設定され &lt;code&gt;href&lt;/code&gt; の値を&lt;em&gt;正確に&lt;/em&gt;ここに示されているよう。</target>
        </trans-unit>
        <trans-unit id="302f79ea1b195ceb97811e3dba2bfd0daa9bce81" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;example-bank.com&lt;/code&gt; server lacks XSRF protection, it can't tell the difference between a legitimate request from the application and the forged request from &lt;code&gt;evil.com&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;example-bank.com&lt;/code&gt; サーバーにXSRF保護が不足している場合、アプリケーションからの正当なリクエストと &lt;code&gt;evil.com&lt;/code&gt; からの偽造リクエストの違いを判別できません。</target>
        </trans-unit>
        <trans-unit id="bf6319afad7af346a06791442f233428685da15e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;, Angular is more aggressive in its type-checking within templates. In particular:</source>
          <target state="translated">場合 &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; のフラグがに設定されている &lt;code&gt;true&lt;/code&gt; 角度は、テンプレート内の型チェックでより積極的です。特に：</target>
        </trans-unit>
        <trans-unit id="94b7a597e02911683f0b073db5c9c1edeec80b49" translate="yes" xml:space="preserve">
          <source>If the Angular service worker does not have a hash to validate a given resource, it still caches its contents but it honors the HTTP caching headers by using a policy of &quot;stale while revalidate.&quot; That is, when HTTP caching headers for a cached resource indicate that the resource has expired, the Angular service worker continues to serve the content and it attempts to refresh the resource in the background. This way, broken unhashed resources do not remain in the cache beyond their configured lifetimes.</source>
          <target state="translated">Angularサービスワーカーがリソースを検証するためのハッシュを持っていない場合、コンテンツはキャッシュされますが、&quot;stale while revalidate &quot;というポリシーを使ってHTTPキャッシングヘッダを尊重します。つまり、キャッシュされたリソースのHTTPキャッシングヘッダがリソースの有効期限が切れたことを示すと、Angularのサービスワーカーはコンテンツを提供し続け、バックグラウンドでリソースを更新しようとします。こうすることで、壊れたアンハッシュ化されたリソースが設定された寿命を超えてキャッシュに残ることはありません。</target>
        </trans-unit>
        <trans-unit id="c75c80c65f60ead7cd10749d4edad5c9af502525" translate="yes" xml:space="preserve">
          <source>If the JSON file is too big, you could copy the nodes-of-interest into markdown backticks.</source>
          <target state="translated">JSONファイルが大きすぎる場合は、関心のあるノードをマークダウンのバックスティックにコピーすることができます。</target>
        </trans-unit>
        <trans-unit id="be0a39c89a60cb3ed7e054bd374ca82555b74b91" translate="yes" xml:space="preserve">
          <source>If the StackBlitz preview pane isn't showing what you expect, save and then click the refresh button.</source>
          <target state="translated">StackBlitz のプレビューペインが思ったように表示されない場合は、保存してから更新ボタンをクリックしてください。</target>
        </trans-unit>
        <trans-unit id="a2bff59b5e87ba98607bcbcc161c9e072991847d" translate="yes" xml:space="preserve">
          <source>If the above &lt;code&gt;ng build&lt;/code&gt; command throws an error about missing packages, append the missing dependencies in your local project's &lt;code&gt;package.json&lt;/code&gt; file to match the one in the downloaded StackBlitz project.</source>
          <target state="translated">上記の &lt;code&gt;ng build&lt;/code&gt; コマンドが不足しているパッケージに関するエラーをスローする場合、ローカルプロジェクトの &lt;code&gt;package.json&lt;/code&gt; ファイルに不足している依存関係を追加して、ダウンロードしたStackBlitzプロジェクトの依存関係と一致させます。</target>
        </trans-unit>
        <trans-unit id="8e4c8672ca49b8f0e25eeaa8741e82bde770f9e1" translate="yes" xml:space="preserve">
          <source>If the app uses the Angular router, you must configure the server to return the application's host page (&lt;code&gt;index.html&lt;/code&gt;) when asked for a file that it does not have.</source>
          <target state="translated">アプリがAngularルーターを使用している場合は、アプリに含まれていないファイルを要求されたときに、アプリのホストページ（ &lt;code&gt;index.html&lt;/code&gt; ）を返すようにサーバーを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d1da36d7cd60fadceb7bc9ecf82d1339e902cc81" translate="yes" xml:space="preserve">
          <source>If the client of a library intends to use a symbol in an annotation, the template compiler does not normally report this until the client uses the symbol. This option allows detection of these errors during the build phase of the library and is used, for example, in producing Angular libraries themselves.</source>
          <target state="translated">ライブラリのクライアントがアノテーションでシンボルを使用しようとした場合、テンプレートコンパイラは通常、クライアントがシンボルを使用するまでこのエラーを報告しません。このオプションを使うと、ライブラリのビルド段階でこれらのエラーを検出することができ、例えばAngularライブラリ自体を作成する際に使用されます。</target>
        </trans-unit>
        <trans-unit id="1d578310a8295a0eae72f65936eb8dd58a18fbd2" translate="yes" xml:space="preserve">
          <source>If the component behaves as expected, clicking the hero's element should tell the component's &lt;code&gt;selected&lt;/code&gt; property to emit the &lt;code&gt;hero&lt;/code&gt; object.</source>
          <target state="translated">コンポーネントが期待どおりに動作する場合、ヒーローの要素をクリックすると、コンポーネントの &lt;code&gt;selected&lt;/code&gt; プロパティが &lt;code&gt;hero&lt;/code&gt; オブジェクトを出力するように指示されます。</target>
        </trans-unit>
        <trans-unit id="8788c70542a02c168cea8e8d4e5e044281bdef0f" translate="yes" xml:space="preserve">
          <source>If the condition is falsy and the view hasn't been created previously, tell the &lt;em&gt;view container&lt;/em&gt; to create the &lt;em&gt;embedded view&lt;/em&gt; from the template.</source>
          <target state="translated">条件が偽であり、ビューが以前に作成されていない場合は、テンプレートから&lt;em&gt;埋め込みビュー&lt;/em&gt;を作成するように&lt;em&gt;ビューコンテナー&lt;/em&gt;に指示し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a064b2a59ee6bd35d516ff89dac85e3c0a88034" translate="yes" xml:space="preserve">
          <source>If the condition is truthy and the view is currently displayed, clear the container which also destroys the view.</source>
          <target state="translated">条件が真実で、現在ビューが表示されている場合は、ビューも破壊するコンテナをクリアします。</target>
        </trans-unit>
        <trans-unit id="048b744ffc4be73f307d5360e389b7f46a5ac039" translate="yes" xml:space="preserve">
          <source>If the consumer has Angular's strictest type checking for templates enabled, this creates a problem: the empty string &lt;code&gt;''&lt;/code&gt; is not actually assignable to the &lt;code&gt;disabled&lt;/code&gt; field, which will create a type error when the attribute form is used.</source>
          <target state="translated">コンシューマーでAngularのテンプレートに対する最も厳密な型チェックが有効になっている場合、これにより問題が発生します。空の文字列 &lt;code&gt;''&lt;/code&gt; は実際には &lt;code&gt;disabled&lt;/code&gt; フィールドに割り当てられないため、属性フォームを使用すると型エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5c3cec2a13320fb2f220fb170d31aec1e1a03ce0" translate="yes" xml:space="preserve">
          <source>If the control has any children, also marks all children as &lt;code&gt;untouched&lt;/code&gt; and recalculates the &lt;code&gt;touched&lt;/code&gt; status of all parent controls.</source>
          <target state="translated">コントロールに子がある場合は、すべての子を &lt;code&gt;untouched&lt;/code&gt; としてマークし、すべての親コントロールの &lt;code&gt;touched&lt;/code&gt; 状態を再計算します。</target>
        </trans-unit>
        <trans-unit id="d1a83898ee5cd6fc850d88e2ec839126c806da54" translate="yes" xml:space="preserve">
          <source>If the control has any children, marks all children as &lt;code&gt;pristine&lt;/code&gt;, and recalculates the &lt;code&gt;pristine&lt;/code&gt; status of all parent controls.</source>
          <target state="translated">コントロールに子がある場合、すべての子を &lt;code&gt;pristine&lt;/code&gt; としてマークし、すべての親コントロールの &lt;code&gt;pristine&lt;/code&gt; 状態を再計算します。</target>
        </trans-unit>
        <trans-unit id="8453b196ce8fbdb1fe41ff331de4cbcbc668e2ae" translate="yes" xml:space="preserve">
          <source>If the control has children, all children are also disabled.</source>
          <target state="translated">コントロールに子供がいる場合は、すべての子供も障害者となります。</target>
        </trans-unit>
        <trans-unit id="6da51976abd22faef9516a71a664e1ede6e2d1c6" translate="yes" xml:space="preserve">
          <source>If the control is not present, false is returned.</source>
          <target state="translated">コントロールが存在しない場合は、falseが返されます。</target>
        </trans-unit>
        <trans-unit id="20413c6d38ae984baf834f94a3ed5662a7f00e9c" translate="yes" xml:space="preserve">
          <source>If the current tab needs to be updated to the latest app version immediately, it can ask to do so with the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activateUpdate&quot;&gt;activateUpdate()&lt;/a&gt;&lt;/code&gt; method:</source>
          <target state="translated">現在のタブをすぐに最新のアプリバージョンに更新する必要がある場合は、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activateUpdate&quot;&gt;activateUpdate()&lt;/a&gt;&lt;/code&gt; メソッドを使用して更新するように要求できます。</target>
        </trans-unit>
        <trans-unit id="e4f4d6a93d3808ee9961bf48da7a9b89bc08b791" translate="yes" xml:space="preserve">
          <source>If the current tab needs to be updated to the latest app version immediately, it can ask to do so with the &lt;code&gt;activateUpdate()&lt;/code&gt; method:</source>
          <target state="translated">現在のタブをすぐに最新のアプリバージョンに更新する必要がある場合は、 &lt;code&gt;activateUpdate()&lt;/code&gt; メソッドを使用して更新するように要求できます。</target>
        </trans-unit>
        <trans-unit id="9104853be208753a61ab17ecc634fd45d2546fb7" translate="yes" xml:space="preserve">
          <source>If the current working directory is not the right place for your project, you can change to a more appropriate directory by running &lt;code&gt;cd &amp;lt;path-to-other-directory&amp;gt;&lt;/code&gt; first.</source>
          <target state="translated">現在の作業ディレクトリがプロジェクトに適していない場合は、最初に &lt;code&gt;cd &amp;lt;path-to-other-directory&amp;gt;&lt;/code&gt; を実行して、より適切なディレクトリに変更できます。</target>
        </trans-unit>
        <trans-unit id="d973a83d1ca3ed65eb47b556837d050dedf92561" translate="yes" xml:space="preserve">
          <source>If the errors are gone, switch back to Ivy by removing the changes to the &lt;code&gt;tsconfig.json&lt;/code&gt; and review the list of expected changes below.</source>
          <target state="translated">エラーがなくなった場合は、 &lt;code&gt;tsconfig.json&lt;/code&gt; への変更を削除してIvyに戻り、以下の予想される変更のリストを確認してください。</target>
        </trans-unit>
        <trans-unit id="50bc482af4aa021a010a1117f830ab47823cf166" translate="yes" xml:space="preserve">
          <source>If the event belongs to a directive or component, &lt;code&gt;$event&lt;/code&gt; has the shape that the directive or component produces.</source>
          <target state="translated">イベントがディレクティブまたはコンポーネントに属している場合、 &lt;code&gt;$event&lt;/code&gt; はディレクティブまたはコンポーネントが生成する形状になります。</target>
        </trans-unit>
        <trans-unit id="f6f468153c2449365e7f2867ef5d5f456b77cbd7" translate="yes" xml:space="preserve">
          <source>If the event belongs to a directive&amp;mdash;recall that components are directives&amp;mdash;&lt;code&gt;$event&lt;/code&gt; has whatever shape the directive produces.</source>
          <target state="translated">イベントがディレクティブに属している場合（コンポーネントはディレクティブであることを思い出してください）、 &lt;code&gt;$event&lt;/code&gt; はディレクティブが生成するすべての形状を持っています。</target>
        </trans-unit>
        <trans-unit id="73152167c48aecc5313121b22afebd7bc3185f3b" translate="yes" xml:space="preserve">
          <source>If the event lacks a listener or there's some other problem, consider calling &lt;code&gt;nativeElement.dispatchEvent(eventObject)&lt;/code&gt;.</source>
          <target state="translated">イベントにリスナーがない場合やその他の問題がある場合は、 &lt;code&gt;nativeElement.dispatchEvent(eventObject)&lt;/code&gt; を呼び出すことを検討してください。</target>
        </trans-unit>
        <trans-unit id="13a1756e7082ebba2ca9b175bf1d707be6dc83b3" translate="yes" xml:space="preserve">
          <source>If the field is omitted, it defaults to:</source>
          <target state="translated">フィールドが省略された場合は、デフォルト値になります。</target>
        </trans-unit>
        <trans-unit id="4d62e6f61d2836ab8838dd3181e91ea4e13db082" translate="yes" xml:space="preserve">
          <source>If the final step in a transition is a call to &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; that uses a timing value with no style data, that step is automatically considered the final animation arc, for the element to reach the final state. Angular automatically adds or removes CSS styles to ensure that the element is in the correct final state.</source>
          <target state="translated">トランジションの最後のステップが、スタイルデータのないタイミング値を使用する &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; の呼び出しである場合、そのステップは、要素が最終状態に到達するための最終的なアニメーションアークと自動的に見なされます。AngularはCSSスタイルを自動的に追加または削除して、要素が正しい最終状態になるようにします。</target>
        </trans-unit>
        <trans-unit id="6b3ef72f24c3673b2a628ad0ad40c170035fde2f" translate="yes" xml:space="preserve">
          <source>If the first segment begins with &lt;code&gt;../&lt;/code&gt;, the router goes up one level in the route tree.</source>
          <target state="translated">最初のセグメントが &lt;code&gt;../&lt;/code&gt; で始まる場合、ルーターはルートツリーの1レベル上に移動します。</target>
        </trans-unit>
        <trans-unit id="fae4a4530bb21f9338bdba40c855940d55fb7608" translate="yes" xml:space="preserve">
          <source>If the first segment begins with &lt;code&gt;./&lt;/code&gt;, or doesn't begin with a slash, the router looks in the children of the current activated route.</source>
          <target state="translated">最初のセグメントが &lt;code&gt;./&lt;/code&gt; で始まる場合、またはスラッシュで始まらない場合、ルーターは現在アクティブ化されているルートの子を調べます。</target>
        </trans-unit>
        <trans-unit id="e4a660dbc7897b28c034041b6f65be22015a8b7e" translate="yes" xml:space="preserve">
          <source>If the first segment begins with &lt;code&gt;./&lt;/code&gt;, or doesn't begin with a slash, the router will instead look in the children of the current activated route.</source>
          <target state="translated">最初のセグメントが &lt;code&gt;./&lt;/code&gt; で始まる場合、またはスラッシュで始まっていない場合、ルーターは代わりに現在アクティブなルートの子を調べます。</target>
        </trans-unit>
        <trans-unit id="282a734855bf60155a2ce97a0efd7f8533f10efb" translate="yes" xml:space="preserve">
          <source>If the first segment begins with &lt;code&gt;/&lt;/code&gt;, the router looks up the route from the root of the app.</source>
          <target state="translated">最初のセグメントが &lt;code&gt;/&lt;/code&gt; で始まる場合、ルーターはアプリのルートからルートを検索します。</target>
        </trans-unit>
        <trans-unit id="cea0080cb58c9233caaaea94f5f228089d34ea6f" translate="yes" xml:space="preserve">
          <source>If the first segment begins with &lt;code&gt;/&lt;/code&gt;, the router will look up the route from the root of the app.</source>
          <target state="translated">最初のセグメントが &lt;code&gt;/&lt;/code&gt; で始まる場合、ルーターはアプリのルートからルートを検索します。</target>
        </trans-unit>
        <trans-unit id="0078130fe6400ab8b49e0bc6c85e056609de7e16" translate="yes" xml:space="preserve">
          <source>If the fixture is currently &lt;em&gt;stable&lt;/em&gt;, returns &lt;code&gt;true&lt;/code&gt;. If there are async tasks that have not completed, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">フィクスチャが現在&lt;em&gt;安定して&lt;/em&gt;いる場合は、 &lt;code&gt;true&lt;/code&gt; を返します。完了していない非同期タスクがある場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0b70a09df109c3ad19c3522771be006c2c3948dd" translate="yes" xml:space="preserve">
          <source>If the generated &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator does not include the &lt;code&gt;{ &lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root' }&lt;/code&gt; statement, then insert it as shown above.</source>
          <target state="translated">生成された &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレーターに &lt;code&gt;{ &lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root' }&lt;/code&gt; ステートメントが含まれていない場合は、上記のように挿入します。</target>
        </trans-unit>
        <trans-unit id="15068daa68072149e6fa5ce056eb1f52cac90044" translate="yes" xml:space="preserve">
          <source>If the global library you need to use does not have global typings, you can declare them manually as &lt;code&gt;any&lt;/code&gt; in &lt;code&gt;src/typings.d.ts&lt;/code&gt;. For example:</source>
          <target state="translated">あなたが使用する必要があるグローバルライブラリはグローバルなタイピングを持っていない場合は、として手動で宣言することができる &lt;code&gt;any&lt;/code&gt; 中 &lt;code&gt;src/typings.d.ts&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="6cb1ed9802e9478d929162c54da4c8d6fd30657e" translate="yes" xml:space="preserve">
          <source>If the injector doesn't have a provider for a requested token, it delegates the request to its parent injector, where the process repeats until there are no more injectors. If the search fails, the injector throws an error&amp;mdash;unless the request was &lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;optional&lt;/a&gt;.</source>
          <target state="translated">インジェクターに要求されたトークンのプロバイダーがない場合、そのインジェクターは親インジェクターに要求を委任し、インジェクターがなくなるまでプロセスが繰り返されます。検索が失敗した場合、リクエストが&lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;オプションで&lt;/a&gt;ない限り、インジェクターはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="4a0b3bfb715b52caecc873a2889e0c4f7e9a1de0" translate="yes" xml:space="preserve">
          <source>If the injector has already cached an instance of the service associated with the token, it provides that instance. If it doesn't, it needs to make one using the provider associated with the token.</source>
          <target state="translated">トークンに関連付けられたサービスのインスタンスがすでにキャッシュされている場合は、そのインスタンスを提供します。キャッシュされていない場合は、トークンに関連付けられたプロバイダを使用してインスタンスを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="3b4f4ffe72bd420b5f6a4c66dbf5e65cc68e96f5" translate="yes" xml:space="preserve">
          <source>If the link is static, you can use the directive as follows: &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">：リンクが静的である場合は、次のようにディレクティブを使用することができます &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c85a5f245c5fa8e89c1c6d997ca02517847957ee" translate="yes" xml:space="preserve">
          <source>If the name fails to match a property of a known directive or element, Angular reports an &amp;ldquo;unknown directive&amp;rdquo; error.</source>
          <target state="translated">名前が既知のディレクティブまたは要素のプロパティと一致しない場合、Angularは「不明なディレクティブ」エラーを報告します。</target>
        </trans-unit>
        <trans-unit id="4f09d2765c657029543ee7a53587171de5cd4ed6" translate="yes" xml:space="preserve">
          <source>If the name fails to match an element event or an output property of a known directive, Angular reports an &amp;ldquo;unknown directive&amp;rdquo; error.</source>
          <target state="translated">名前が要素イベントまたは既知のディレクティブの出力プロパティと一致しない場合、Angularは「不明なディレクティブ」エラーを報告します。</target>
        </trans-unit>
        <trans-unit id="f2b0f2311e32c89d65b510e7b22f6094eeb2fc32" translate="yes" xml:space="preserve">
          <source>If the network request does not complete after 0ms (i.e. immediately), fall back to the cache (ignoring cache age).</source>
          <target state="translated">0ms後(つまりすぐに)にネットワークリクエストが完了しなかった場合は、キャッシュにフォールバックします(キャッシュの年齢は無視します)。</target>
        </trans-unit>
        <trans-unit id="d5ceb0f467be96dbdbfe940dd848a6bc931fbff8" translate="yes" xml:space="preserve">
          <source>If the pipe accepts multiple parameters, separate the values with colons. For example, &lt;code&gt;{{ amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;:'EUR':'Euros '}}&lt;/code&gt; adds the second parameter, the string literal &lt;code&gt;'Euros '&lt;/code&gt;, to the output string. You can use any valid template expression as a parameter, such as a string literal or a component property.</source>
          <target state="translated">パイプが複数のパラメーターを受け入れる場合は、値をコロンで区切ります。たとえば、 &lt;code&gt;{{ amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;:'EUR':'Euros '}}&lt;/code&gt; は、2番目のパラメーターである文字列リテラル &lt;code&gt;'Euros '&lt;/code&gt; を出力文字列に追加します。文字列リテラルやコンポーネントプロパティなど、任意の有効なテンプレート式をパラメータとして使用できます。</target>
        </trans-unit>
        <trans-unit id="1b3d0f7fd76ea32112a2485de9c0071e3eac7cd6" translate="yes" xml:space="preserve">
          <source>If the pipe has internal state (that is, the result depends on state other than its arguments), set &lt;code&gt;pure&lt;/code&gt; to false. In this case, the pipe is invoked on each change-detection cycle, even if the arguments have not changed.</source>
          <target state="translated">パイプに内部状態がある場合（つまり、結果が引数以外の状態に依存している場合）、 &lt;code&gt;pure&lt;/code&gt; をfalse に設定します。この場合、引数が変更されていなくても、変更検出サイクルごとにパイプが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4763dcf43d2d8abf4591a273eb238b96e963dfb9" translate="yes" xml:space="preserve">
          <source>If the policy is set to &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; and the component has no &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; specified, the policy is automatically switched to &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポリシーが &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; に設定されていて、コンポーネントに &lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; が指定されていない場合、ポリシーは自動的に &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt; に切り替えられます。</target>
        </trans-unit>
        <trans-unit id="528533bd9f3f7e28532ec0e9f917dad69f8c023f" translate="yes" xml:space="preserve">
          <source>If the policy is set to &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; and the component has no &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;styleUrls&lt;/code&gt; specified, the policy is automatically switched to &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポリシーが &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; に設定されていて、コンポーネントに &lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;styleUrls&lt;/code&gt; が指定されていない場合、ポリシーは自動的に &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt; に切り替えられます。</target>
        </trans-unit>
        <trans-unit id="2d810ad667c3b20ef3b51707d2be9b432b64b1cf" translate="yes" xml:space="preserve">
          <source>If the polyfill you want is not already in &lt;code&gt;polyfills.ts&lt;/code&gt; file, add the &lt;code&gt;import&lt;/code&gt; statement by hand.</source>
          <target state="translated">必要なポリフィルが &lt;code&gt;polyfills.ts&lt;/code&gt; ファイルにない場合は、手動で &lt;code&gt;import&lt;/code&gt; 文を追加します。</target>
        </trans-unit>
        <trans-unit id="dbeae5467dc3bcad5134cf5b5566370850d4809d" translate="yes" xml:space="preserve">
          <source>If the request fails on the server, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; returns an &lt;em&gt;error&lt;/em&gt; object instead of a successful response.</source>
          <target state="translated">サーバーで要求が失敗した場合、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は成功した応答ではなく&lt;em&gt;エラー&lt;/em&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="59935f40339f370a775c93f8ebfe64fdb8501b4a" translate="yes" xml:space="preserve">
          <source>If the request is not cachable, the interceptor simply forwards the request to the next handler in the chain.</source>
          <target state="translated">リクエストがキャッシュできない場合、インターセプターは単にチェーン内の次のハンドラーにリクエストを転送します。</target>
        </trans-unit>
        <trans-unit id="5e9cbfa57bb0afe989236f55b4bfa5b227f9e699" translate="yes" xml:space="preserve">
          <source>If the request is not cacheable, the interceptor simply forwards the request to the next handler in the chain.</source>
          <target state="translated">リクエストがキャッシュ可能でない場合、インターセプターは単にチェーン内の次のハンドラにリクエストを転送します。</target>
        </trans-unit>
        <trans-unit id="48e69ae093510c60c5092e955910531474a7b0eb" translate="yes" xml:space="preserve">
          <source>If the resource does not exist in the cache, wait for the network request anyway.</source>
          <target state="translated">キャッシュにリソースが存在しない場合は、とにかくネットワークリクエストを待ちます。</target>
        </trans-unit>
        <trans-unit id="7ac51969f4d26381b937d7506df3c5ca028390e8" translate="yes" xml:space="preserve">
          <source>If the router determines that the current application state requires particular functionality, and the module that defines it hasn't been loaded, the router can &lt;em&gt;lazy-load&lt;/em&gt; the module on demand.</source>
          <target state="translated">現在のアプリケーションの状態に特定の機能が必要であるとルーターが判断し、それを定義するモジュールが読み込まれていない場合、ルーターは必要に応じてモジュールを&lt;em&gt;遅延読み込み&lt;/em&gt;できます。</target>
        </trans-unit>
        <trans-unit id="078a62a59d26aee3fda2d3094d8e784f2342103f" translate="yes" xml:space="preserve">
          <source>If the same text elements have different &lt;em&gt;descriptions&lt;/em&gt; but the same &lt;em&gt;meaning&lt;/em&gt;, they are extracted only once, with only one ID. That one translation entry is merged back into the app wherever the same text elements appear.</source>
          <target state="translated">同じテキスト要素の&lt;em&gt;説明&lt;/em&gt;が異なるが&lt;em&gt;意味&lt;/em&gt;が同じ&lt;em&gt;である&lt;/em&gt;場合、それらは1回だけ抽出され、IDは1つだけです。その1つの翻訳エントリは、同じテキスト要素が表示される場所でアプリにマージされます。</target>
        </trans-unit>
        <trans-unit id="55c33d001b1da373abf39836eea39311b1acb30e" translate="yes" xml:space="preserve">
          <source>If the target event name, &lt;code&gt;myClick&lt;/code&gt; fails to match an element event or an output property of &lt;code&gt;ClickDirective&lt;/code&gt;, Angular reports an &quot;unknown directive&quot; error.</source>
          <target state="translated">対象イベント名場合は、 &lt;code&gt;myClick&lt;/code&gt; は、要素イベントまたはの出力特性と一致するように失敗し &lt;code&gt;ClickDirective&lt;/code&gt; を、角度は「不明なディレクティブ」エラーを報告します。</target>
        </trans-unit>
        <trans-unit id="8394b2e767bb12ed5ce19f8e2789f404b7484f75" translate="yes" xml:space="preserve">
          <source>If the token is not found, the injector looks for the closest parent &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; to delegate the request to.</source>
          <target state="translated">トークンが見つからない場合、インジェクターはリクエストを委任する最も近い親 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; を探します。</target>
        </trans-unit>
        <trans-unit id="ecf78ef653c4d34586962407b03b480fcd055de0" translate="yes" xml:space="preserve">
          <source>If the user clicks &quot;Magneta&quot;, that hero should render with a distinctive but subtle background color like this:</source>
          <target state="translated">ユーザーが「Magneta」をクリックした場合、そのヒーローはこのように特徴的だが微妙な背景色でレンダリングされるはずです。</target>
        </trans-unit>
        <trans-unit id="c189f0f17a7b1f805b9f00a96ea0807e51814fa1" translate="yes" xml:space="preserve">
          <source>If the user is accessing your app via a browser that does not support service workers, the service worker is not registered and related behavior such as offline cache management and push notifications does not happen. More specifically:</source>
          <target state="translated">ユーザーがサービスワーカーをサポートしていないブラウザでアプリにアクセスしている場合、サービスワーカーが登録されておらず、オフラインでのキャッシュ管理やプッシュ通知などの関連動作は発生しません。具体的には</target>
        </trans-unit>
        <trans-unit id="c7bb75e93c7ef1a5eb66e798e8f358b5eede9fc4" translate="yes" xml:space="preserve">
          <source>If the user is not logged in, you store the attempted URL the user came from using the &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; and tell the router to navigate to a login page&amp;mdash;a page you haven't created yet. This secondary navigation automatically cancels the current navigation; &lt;code&gt;checkLogin()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; just to be clear about that.</source>
          <target state="translated">ユーザーがログインしていない場合は、 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; を使用してユーザーがアクセスしたURLを保存し、ルーターにログインページ（まだ作成していないページ）に移動するように伝えます。このセカンダリナビゲーションは、現在のナビゲーションを自動的にキャンセルします。 &lt;code&gt;checkLogin()&lt;/code&gt; は、明確にするために &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0e9fef2eafd5b1ccdde39a85d15a3e1d179c35d6" translate="yes" xml:space="preserve">
          <source>If the user is not logged in, you store the attempted URL the user came from using the &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; and tell the router to redirect to a login page&amp;mdash;a page you haven't created yet. Returning a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to cancel the current navigation and schedule a new one to redirect the user.</source>
          <target state="translated">ユーザーがログインしていない場合は、 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; を使用してユーザーが取得したURLを保存し、まだ作成していないログインページにリダイレクトするようにルーターに指示します。戻る &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; は伝え &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 現在のナビゲーションをキャンセルして、ユーザーをリダイレクトするために新しいものをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="de7fbb24093105b8d981322fd4ad3921dd415377" translate="yes" xml:space="preserve">
          <source>If the values do not match, the hero's identity remains secret, and we can safely return null. Otherwise, the hero's identity is revealed and we must mark the form as invalid by returning an error object.</source>
          <target state="translated">値が一致しない場合、ヒーローの身元は秘密のままであり、安全に null を返すことができます。そうでなければ、ヒーローの身元が明らかになり、エラーオブジェクトを返すことでフォームを無効なものとしてマークしなければなりません。</target>
        </trans-unit>
        <trans-unit id="192705fa856a62452b2da969a8912e6b8a173d58" translate="yes" xml:space="preserve">
          <source>If the values do not match, the hero's identity remains secret, both are valid, and the validator returns null. If they do match, the hero's identity is revealed and the validator must mark the form as invalid by returning an error object.</source>
          <target state="translated">値が一致しない場合、ヒーローの身元は秘密のままで、両方とも有効で、バリデータは null を返します。値が一致した場合、ヒーローの身元が明らかになり、バリデータはエラーオブジェクトを返してフォームを無効にしなければなりません。</target>
        </trans-unit>
        <trans-unit id="bda3fcdf84185ee6e87bd031022a93fa36ad65dc" translate="yes" xml:space="preserve">
          <source>If the variable specifies a name on the right-hand side, such as &lt;code&gt;#var=&quot;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;, the variable refers to the directive or component on the element with a matching &lt;code&gt;exportAs&lt;/code&gt; name.</source>
          <target state="translated">変数が &lt;code&gt;#var=&quot;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; = &quot; ngModel &quot;などの右側の名前を指定している場合、変数は、一致する &lt;code&gt;exportAs&lt;/code&gt; 名を持つ要素のディレクティブまたはコンポーネントを参照します。</target>
        </trans-unit>
        <trans-unit id="96ad008e2ef13ed8ed5f5c2ec956a424d99e7a41" translate="yes" xml:space="preserve">
          <source>If there are any pending timers at the end of the function, an exception will be thrown.</source>
          <target state="translated">関数の終了時に保留中のタイマーがある場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="f9a670037bd4af4276da780403250f1a42128b74" translate="yes" xml:space="preserve">
          <source>If there are inconsistencies (for example, if peer dependencies cannot be matched by a simple &lt;a href=&quot;https://semver.io/&quot;&gt;semver&lt;/a&gt; range), the command generates an error and does not change anything in the workspace.</source>
          <target state="translated">不整合がある場合（たとえば、ピアの依存関係を単純な&lt;a href=&quot;https://semver.io/&quot;&gt;サーバー&lt;/a&gt;範囲で照合できない場合）、コマンドはエラーを生成し、ワークスペース内の何も変更しません。</target>
        </trans-unit>
        <trans-unit id="68b1ed93992996f8ce266b19d9921f1a6b7679ba" translate="yes" xml:space="preserve">
          <source>If there are multiple bindings to the same class name, Angular uses &lt;a href=&quot;style-precedence&quot;&gt;styling precedence&lt;/a&gt; to determine which binding to use.</source>
          <target state="translated">同じクラス名へのバインディングが複数ある場合、Angularは&lt;a href=&quot;style-precedence&quot;&gt;スタイリングの優先順位&lt;/a&gt;を使用して使用するバインディングを決定します。</target>
        </trans-unit>
        <trans-unit id="4b17fa9f251dc2328f40733768f4df7c53d0e774" translate="yes" xml:space="preserve">
          <source>If there are multiple bindings to the same style attribute, Angular uses &lt;a href=&quot;style-precedence&quot;&gt;styling precedence&lt;/a&gt; to determine which binding to use.</source>
          <target state="translated">同じスタイル属性へのバインディングが複数ある場合、Angularは&lt;a href=&quot;style-precedence&quot;&gt;スタイリングの優先順位&lt;/a&gt;を使用して使用するバインディングを決定します。</target>
        </trans-unit>
        <trans-unit id="6bce86d8e3129408ac34398b75eca72346010c23" translate="yes" xml:space="preserve">
          <source>If there are multiple matching elements, staggers in each element starting at the top of the page, with a 50-millisecond delay between each element.</source>
          <target state="translated">マッチする要素が複数ある場合は、ページの先頭から各要素をスタガリングし、各要素間に50ミリ秒の遅延を与えます。</target>
        </trans-unit>
        <trans-unit id="5d0e50c9ab16f52d7179be4c30d0ae22030f6696" translate="yes" xml:space="preserve">
          <source>If there are no &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; values specified in the style entries, the offsets are calculated automatically.</source>
          <target state="translated">スタイルエントリで &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 値が指定されていない場合、オフセットは自動的に計算されます。</target>
        </trans-unit>
        <trans-unit id="fd9120ef266d5131d0f02db2be350a2e53f38db9" translate="yes" xml:space="preserve">
          <source>If there are no &lt;code&gt;offset&lt;/code&gt; values specified in the style entries, the offsets are calculated automatically.</source>
          <target state="translated">スタイルエントリに &lt;code&gt;offset&lt;/code&gt; 値が指定されていない場合、オフセットは自動的に計算されます。</target>
        </trans-unit>
        <trans-unit id="ca5c24cb964d2798172bebc6b28f39e9832c4073" translate="yes" xml:space="preserve">
          <source>If there are no matches, a view with the &lt;code&gt;&lt;a href=&quot;common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; directive is rendered.</source>
          <target state="translated">一致するものがない場合は、 &lt;code&gt;&lt;a href=&quot;common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; ディレクティブを含むビューがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="bdfacb45406d5e8b6f34dd5b25ce44a85e6145b1" translate="yes" xml:space="preserve">
          <source>If there are no matches, a view with the &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; directive is rendered.</source>
          <target state="translated">一致しない場合、 &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; ディレクティブを含むビューがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="469567e644a4eb10f45ac06d4145cbb3283b05ab" translate="yes" xml:space="preserve">
          <source>If there is a cached value, the code &lt;em&gt;pipes&lt;/em&gt; the cached response onto &lt;code&gt;results$&lt;/code&gt;, producing a recomposed observable that emits twice, the cached response first (and immediately), followed later by the response from the server. Subscribers see a sequence of &lt;em&gt;two&lt;/em&gt; responses.</source>
          <target state="translated">キャッシュされた値がある場合、コードはキャッシュされた応答を &lt;code&gt;results$&lt;/code&gt; に&lt;em&gt;パイプして&lt;/em&gt;、キャッシュされた応答を最初に（そしてすぐに）2回出力する再構成オブザーバブルを生成し、その後サーバーからの応答を続けます。サブスクライバーには、&lt;em&gt;2つの&lt;/em&gt;応答のシーケンスが表示されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f51b2e133050bbccba4bfd98827887fed42575f" translate="yes" xml:space="preserve">
          <source>If there is a cached value, the code &lt;em&gt;pipes&lt;/em&gt; the cached response onto &lt;code&gt;results$&lt;/code&gt;, producing a recomposed observable that emits twice, the cached response first (and immediately), followed later by the response from the server. Subscribers see a sequence of two responses.</source>
          <target state="translated">キャッシュされた値がある場合、コードはキャッシュされた応答を &lt;code&gt;results$&lt;/code&gt; に&lt;em&gt;パイプし&lt;/em&gt;、2回発行する再構成されたオブザーバブルを生成します。サブスクライバーには、2つの応答のシーケンスが表示されます。</target>
        </trans-unit>
        <trans-unit id="861f9ce42be463b31e5de676232a75f5183b6ba2" translate="yes" xml:space="preserve">
          <source>If there is a search term, the code constructs an options object with an HTML URL-encoded search parameter. If the term is &quot;cat&quot;, for example, the GET request URL would be &lt;code&gt;api/heroes?name=cat&lt;/code&gt;.</source>
          <target state="translated">検索語がある場合、コードはHTMLURLエンコードされた検索パラメーターを使用してオプションオブジェクトを作成します。たとえば、用語が「cat」の場合、GETリクエストのURLは &lt;code&gt;api/heroes?name=cat&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="99c30904c74feea9735c68b368b80ff51127fb2d" translate="yes" xml:space="preserve">
          <source>If there is a search term, the code constructs an options object with an HTML URL-encoded search parameter. If the term were &quot;foo&quot;, the GET request URL would be &lt;code&gt;api/heroes?name=foo&lt;/code&gt;.</source>
          <target state="translated">検索語がある場合、コードはHTML URLエンコードされた検索パラメーターを使用してオプションオブジェクトを作成します。用語が「foo」の場合、GETリクエストURLは &lt;code&gt;api/heroes?name=foo&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="d8a482ba206dfd36e3f36762fb13f8b6559b18b8" translate="yes" xml:space="preserve">
          <source>If there is a section of text that you would like to translate, you can wrap it in a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag. However, if you don't want to create a new DOM element merely to facilitate translation, you can wrap the text in an &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; element. The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is transformed into an html comment:</source>
          <target state="translated">翻訳したいテキストのセクションがある場合は、 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; タグで囲むことができます。ただし、翻訳を容易にするためだけに新しいDOM要素を作成したくない場合は、テキストを &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 要素でラップできます。 &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; HTMLコメントに変換されます。</target>
        </trans-unit>
        <trans-unit id="95d0282529a24fb4dad5c5e40dfcf058c88875dc" translate="yes" xml:space="preserve">
          <source>If there is both an unbound class attribute and a &lt;code&gt;[class]&lt;/code&gt; binding, the classes in the unbound attribute will also be added (previously, the class binding would overwrite classes in the unbound attribute).</source>
          <target state="translated">非バインドクラス属性と &lt;code&gt;[class]&lt;/code&gt; バインディングの両方がある場合、非バインド属性のクラスも追加されます（以前は、クラスバインディングは非バインド属性のクラスを上書きしていました）。</target>
        </trans-unit>
        <trans-unit id="789a03391ec493accfaf2648ace4780e8da1f3e8" translate="yes" xml:space="preserve">
          <source>If there is no structural directive and you merely wrap some elements in a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;, those elements disappear. That's the fate of the middle &quot;Hip!&quot; in the phrase &quot;Hip! Hip! Hooray!&quot;.</source>
          <target state="translated">構造ディレクティブがなく、いくつかの要素を &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; でラップするだけの場合、それらの要素は非表示になります。それが真ん中の「Hip！」の運命です。「Hip！Hip！Hooray！」というフレーズ。</target>
        </trans-unit>
        <trans-unit id="c0a56b8fffce47376883198a8d9baa521d322597" translate="yes" xml:space="preserve">
          <source>If there's no cached value, the interceptor returns &lt;code&gt;results$&lt;/code&gt;.</source>
          <target state="translated">キャッシュされた値がない場合、インターセプターは &lt;code&gt;results$&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="2c9573a993697b7205978825080a3f70b90ace3b" translate="yes" xml:space="preserve">
          <source>If these performance and minification considerations don't apply to you, you can always create your own such pipes (similar to the &lt;a href=&quot;pipes#impure-flying-heroes&quot;&gt;FlyingHeroesPipe&lt;/a&gt;) or find them in the community.</source>
          <target state="translated">これらのパフォーマンスと縮小に関する考慮事項が当てはまらない場合は、独自のパイプ（&lt;a href=&quot;pipes#impure-flying-heroes&quot;&gt;FlyingHeroesPipe&lt;/a&gt;と同様）をいつでも作成するか、コミュニティで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="128c120be1c661795cc994725f81beabd4448f98" translate="yes" xml:space="preserve">
          <source>If this NgModule were the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;UserService&lt;/code&gt; would be a singleton and available throughout the app. Though you may see it coded this way, using the &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator on the service itself is preferable as of Angular 6.0 as it makes your services tree-shakable.</source>
          <target state="translated">このNgModuleがルート &lt;code&gt;AppModule&lt;/code&gt; である場合、 &lt;code&gt;UserService&lt;/code&gt; はシングルトンであり、アプリ全体で使用できます。このようにコード化されているように見えるかもしれませんが、サービス自体で &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレータの &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; プロパティを使用することは、サービスをツリーシェイク可能にするため、Angular 6.0以降で推奨されます。</target>
        </trans-unit>
        <trans-unit id="52b616c30fcd1c3179a4f94d2ff26bd944939a69" translate="yes" xml:space="preserve">
          <source>If this NgModule were the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;UserService&lt;/code&gt; would be a singleton and available throughout the app. Though you may see it coded this way, using the &lt;code&gt;providedIn&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator on the service itself is preferable as of Angular 6.0 as it makes your services tree-shakable.</source>
          <target state="translated">このNgModuleがルート &lt;code&gt;AppModule&lt;/code&gt; である場合、 &lt;code&gt;UserService&lt;/code&gt; はシングルトンであり、アプリ全体で利用できます。このようにコーディングされているように見えるかもしれませんが、サービス自体で &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレータの &lt;code&gt;providedIn&lt;/code&gt; プロパティを使用すると、サービスがツリーシェイク可能になるため、Angular6.0以降の方が適しています。</target>
        </trans-unit>
        <trans-unit id="a961d773c3ebb64dd1d2a5bb5b8857c41c94da34" translate="yes" xml:space="preserve">
          <source>If this is something you wanted to do, it would be a good idea to enable the &lt;code&gt;noImplicitAny&lt;/code&gt; configuration option in &lt;code&gt;tsconfig.json&lt;/code&gt;. This would cause the TypeScript compiler to display a warning when there's any code that does not yet have type annotations. You could use it as a guide to inform us about how close you are to having a fully annotated project.</source>
          <target state="translated">これはあなたがやってみたかった何かがある場合は、有効にするには良いアイデアでしょう &lt;code&gt;noImplicitAny&lt;/code&gt; のコンフィギュレーションオプション &lt;code&gt;tsconfig.json&lt;/code&gt; を。これにより、まだタイプアノテーションを持たないコードがある場合、TypeScriptコンパイラは警告を表示します。これをガイドとして使用して、完全に注釈が付けられたプロジェクトにどれだけ近いかを知らせることができます。</target>
        </trans-unit>
        <trans-unit id="d8b697c68c21ca2b9972cd7df3c8b2c2521e942f" translate="yes" xml:space="preserve">
          <source>If this pattern does not satisfy your business needs, you can use &lt;code&gt;&lt;a href=&quot;validators#pattern&quot;&gt;Validators.pattern()&lt;/a&gt;&lt;/code&gt; to validate the value against a different pattern.</source>
          <target state="translated">このパターンがビジネスニーズを満たさない場合、 &lt;code&gt;&lt;a href=&quot;validators#pattern&quot;&gt;Validators.pattern()&lt;/a&gt;&lt;/code&gt; を使用して、別のパターンに対して値を検証できます。</target>
        </trans-unit>
        <trans-unit id="12a97be36f3f8b698fee41e85a55b88f80921851" translate="yes" xml:space="preserve">
          <source>If true, this directive/component will be skipped by the AOT compiler and so will always be compiled using JIT.</source>
          <target state="translated">true の場合、このディレクティブ/コンポーネントは AOT コンパイラによってスキップされ、常に JIT を使ってコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="dee5d11f125e7906a2306bcec4c66b607231b73c" translate="yes" xml:space="preserve">
          <source>If true, this module will be skipped by the AOT compiler and so will always be compiled using JIT.</source>
          <target state="translated">true の場合、このモジュールは AOT コンパイラによってスキップされ、常に JIT を使用してコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="ba78200d25bae586b98c7c392474b61cabfe4a71" translate="yes" xml:space="preserve">
          <source>If value is trusted for the context, this method will unwrap the contained safe value and use it directly. Otherwise, value will be sanitized to be safe in the given context, for example by replacing URLs that have an unsafe protocol part (such as &lt;code&gt;javascript:&lt;/code&gt;). The implementation is responsible to make sure that the value can definitely be safely used in the given context.</source>
          <target state="translated">値がコンテキストに対して信頼されている場合、このメソッドは含まれている安全な値をアンラップして直接使用します。それ以外の場合、値は指定されたコンテキストで安全になるようにサニタイズされます。たとえば、安全でないプロトコル部分（ &lt;code&gt;javascript:&lt;/code&gt; など）を含むURLを置き換えることによってです。実装は、値が特定のコンテキストで確実に安全に使用できることを確認する責任があります。</target>
        </trans-unit>
        <trans-unit id="3bb452304863c61a02b99678f43105cff45695b0" translate="yes" xml:space="preserve">
          <source>If we create a new project with &lt;code&gt;ng new builder-test&lt;/code&gt;, the generated &lt;code&gt;angular.json&lt;/code&gt; file looks something like this, with only default builder configurations.</source>
          <target state="translated">&lt;code&gt;ng new builder-test&lt;/code&gt; を使用して新しいプロジェクトを作成すると、生成された &lt;code&gt;angular.json&lt;/code&gt; ファイルは次のようになり、デフォルトのビルダー構成のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="410d7d19eeff8be9f91595a2a6c28a3630cc8b2e" translate="yes" xml:space="preserve">
          <source>If we neglected to add, &lt;code&gt;#docplaster&lt;/code&gt;, the processor would insert the &lt;em&gt;default&lt;/em&gt; plaster - an ellipsis comment - between the fragments. Try removing the &lt;code&gt;#docplaster&lt;/code&gt; comment yourself to see the effect.</source>
          <target state="translated">&lt;code&gt;#docplaster&lt;/code&gt; の追加を怠った場合、プロセッサはフラグメントの間に&lt;em&gt;デフォルトの&lt;/em&gt;石膏（省略記号のコメント）を挿入し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;#docplaster&lt;/code&gt; コメントを自分で削除して、効果を確認してください。</target>
        </trans-unit>
        <trans-unit id="539d94c8fe072123800e0f9db24c1874e3e30bba" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;mutate&lt;/em&gt; the array, no pipe is invoked and the display isn't updated; if you &lt;em&gt;replace&lt;/em&gt; the array, the pipe executes and the display is updated. The Flying Heroes application extends the code with checkbox switches and additional displays to help you experience these effects.</source>
          <target state="translated">配列を&lt;em&gt;変更し&lt;/em&gt;た場合、パイプは呼び出されず、表示は更新されません。配列を&lt;em&gt;置き換える&lt;/em&gt;と、パイプが実行され、表示が更新されます。Flying Heroesアプリケーションは、チェックボックススイッチと追加のディスプレイを使用してコードを拡張し、これらの効果を体験できるようにします。</target>
        </trans-unit>
        <trans-unit id="0fabf2886d8095e393384ce3f692c1d6440c63c9" translate="yes" xml:space="preserve">
          <source>If you add &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; to the constructor for &lt;code&gt;AnimalService&lt;/code&gt;, the result is 🐶 (puppy) because the injector finds the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. Here is the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; in the constructor:</source>
          <target state="translated">あなたが追加した場合 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; のコンストラクタに &lt;code&gt;AnimalService&lt;/code&gt; インジェクタが見つかったので、結果は（子犬）🐶ある &lt;code&gt;AnimalService&lt;/code&gt; を中に &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列とコンストラクターの &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;（）は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="020ce77fbfa16628a9d3b03c2b40dcb957a7f20a" translate="yes" xml:space="preserve">
          <source>If you add &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; to the constructor for &lt;code&gt;AnimalService&lt;/code&gt;, the result is 🐶 (puppy) because the injector finds the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. Here is the &lt;code&gt;viewProviders&lt;/code&gt; array in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; を &lt;code&gt;AnimalService&lt;/code&gt; のコンストラクターに追加すると、インジェクターが &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; で &lt;code&gt;AnimalService&lt;/code&gt; を検出するため、結果は🐶（子犬）になります。ここで &lt;code&gt;viewProviders&lt;/code&gt; の中に配列 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; クラスと &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;ホスト&lt;/a&gt;（）コンストラクタでは：</target>
        </trans-unit>
        <trans-unit id="057296fa1750840f11cd0280d602d1818f95536d" translate="yes" xml:space="preserve">
          <source>If you already have an app that was created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, you can create a service using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate&lt;/code&gt;&lt;/a&gt; CLI command in the root project directory. Replace &lt;em&gt;User&lt;/em&gt; with the name of your service.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;で作成されたアプリがすでにある場合は、ルートプロジェクトディレクトリで&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate&lt;/code&gt; &lt;/a&gt; CLIコマンドを使用してサービスを作成できます。&lt;em&gt;User&lt;/em&gt;をサービスの名前に置き換え&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2ff6e048cc33df5338739033fa8346eb0d4a951f" translate="yes" xml:space="preserve">
          <source>If you already have projects running on your machine that use other versions of Node.js and npm, consider using &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; to manage the multiple versions of Node.js and npm.</source>
          <target state="translated">他のバージョンのNode.jsおよびnpmを使用するプロジェクトがすでにマシンで実行されている場合は、&lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt;を使用して複数のバージョンのNode.jsおよびnpmを管理することを検討してください。</target>
        </trans-unit>
        <trans-unit id="90d4d7fe6344c11a6f7bcd7a21dbd7b7bce219e6" translate="yes" xml:space="preserve">
          <source>If you are a library author, you should keep using the View Engine compiler as of version 9. By having all libraries continue to use View Engine, you will maintain compatibility with default v9 applications that use Ivy, as well as with applications that have opted to continue using View Engine.</source>
          <target state="translated">ライブラリを作成している場合は、バージョン 9 の時点で View Engine コンパイラを使用し続ける必要があります。すべてのライブラリで View Engine を引き続き使用することで、Ivy を使用するデフォルトの v9 アプリケーションや View Engine を使用し続けることを選択したアプリケーションとの互換性を維持することができます。</target>
        </trans-unit>
        <trans-unit id="20b03c67a88235e36acc0fc42c3d9208b7a04ffe" translate="yes" xml:space="preserve">
          <source>If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">現在AngularJSを使用している場合は&lt;a href=&quot;upgrade&quot;&gt;、AngularJSからのアップグレードを&lt;/a&gt;参照してください。&lt;em&gt;AngularJS&lt;/em&gt;は、Angularのすべてのv1.xバージョンの名前です。</target>
        </trans-unit>
        <trans-unit id="2a8730eb4263adf9633421f884873db3bc272d64" translate="yes" xml:space="preserve">
          <source>If you are hiding large component trees, consider &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; as a more efficient alternative to showing/hiding.</source>
          <target state="translated">大きなコンポーネントツリーを非表示にする場合は、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; を表示/非表示のより効率的な代替手段として検討してください。</target>
        </trans-unit>
        <trans-unit id="dd74353d5cb9e62ae95981a79ed374fcaa9e6433" translate="yes" xml:space="preserve">
          <source>If you are implementing a custom renderer, you must implement this interface.</source>
          <target state="translated">カスタム レンダラーを実装する場合は、このインターフェイスを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="abfbbb4531d989e45009d6d362b78e141a014fd3" translate="yes" xml:space="preserve">
          <source>If you are new to Angular, see &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt;. Getting Started helps you quickly learn the essentials of Angular, in the context of building a basic online store app. It leverages the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment, so you don't need to set up your local environment until you're ready.</source>
          <target state="translated">Angularを初めて使用する場合は、「&lt;a href=&quot;start&quot;&gt;はじめに」を&lt;/a&gt;参照してください。Getting Startedは、基本的なオンラインストアアプリを構築する上で、Angularの本質をすばやく学ぶのに役立ちます。&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;オンライン開発環境を利用しているため、準備ができるまでローカル環境をセットアップする必要はありません。</target>
        </trans-unit>
        <trans-unit id="3a2afbd5d04b514e212ac51be4531329265f23e7" translate="yes" xml:space="preserve">
          <source>If you are new to Angular, see the &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt; tutorial. Getting Started helps you quickly learn the essentials of Angular, in the context of building a basic online store app.</source>
          <target state="translated">Angularを初めて使用する場合は、&lt;a href=&quot;start&quot;&gt;入門&lt;/a&gt;チュートリアルをご覧ください。Getting Startedは、基本的なオンラインストアアプリを構築する上で、Angularの本質をすばやく学ぶのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="8c411ae285cef2e50450b7be137b68af40349548" translate="yes" xml:space="preserve">
          <source>If you are new to Angular, you might want to start with &lt;a href=&quot;start&quot;&gt;Try it now!&lt;/a&gt;, which introduces the essentials of Angular in the context of a ready-made basic online store app that you can examine and modify. This standalone tutorial takes advantage of the interactive &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; environment for online development. You don't need to set up your local environment until you're ready.</source>
          <target state="translated">Angularを初めて使用する場合は、「&lt;a href=&quot;start&quot;&gt;今すぐ試す&lt;/a&gt;」から始めてください。、これは、調査および変更できる既製の基本的なオンラインストアアプリのコンテキストでAngularの基本を紹介します。このスタンドアロンチュートリアルでは、インタラクティブな&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;環境を利用してオンライン開発を行います。準備が整うまで、ローカル環境をセットアップする必要はありません。</target>
        </trans-unit>
        <trans-unit id="429a085eabc08ae949cb917701bc53d58671e9e8" translate="yes" xml:space="preserve">
          <source>If you are not using the CLI, add your polyfill scripts directly to the host web page (&lt;code&gt;index.html&lt;/code&gt;).</source>
          <target state="translated">CLIを使用していない場合は、ポリフィルスクリプトをホストのWebページ（ &lt;code&gt;index.html&lt;/code&gt; ）に直接追加します。</target>
        </trans-unit>
        <trans-unit id="c294d47814c324598c601f2919036c6333fbcffe" translate="yes" xml:space="preserve">
          <source>If you are updating from &lt;strong&gt;one major version to another,&lt;/strong&gt; then we recommend that you &lt;strong&gt;don't skip major versions.&lt;/strong&gt; Follow the instructions to incrementally update to the next major version, testing and validating at each step. For example, if you want to update from version 6.x.x to version 8.x.x, we recommend that you update to the latest 7.x.x release first. After successfully updating to 7.x.x, you can then update to 8.x.x.</source>
          <target state="translated">&lt;strong&gt;あるメジャーバージョンから別のメジャーバージョンに&lt;/strong&gt;更新する場合は、&lt;strong&gt;メジャーバージョンを&lt;/strong&gt;&lt;strong&gt;スキップしない&lt;/strong&gt;ことをお勧めします&lt;strong&gt;。&lt;/strong&gt;指示に従って、次のメジャーバージョンに段階的に更新し、各ステップでテストおよび検証します。たとえば、バージョン6.xxからバージョン8.xxに更新する場合は、最初に最新の7.xxリリースに更新することをお勧めします。7.xxに正常に更新した後、8.xxに更新できます</target>
        </trans-unit>
        <trans-unit id="5f232055071ca555fe05e8263d44377d3060b3a6" translate="yes" xml:space="preserve">
          <source>If you are updating within the &lt;strong&gt;same major version,&lt;/strong&gt; then you can skip any intermediate versions and update directly to the targeted version. For example, you can update directly from 7.0.0 to 7.2.11.</source>
          <target state="translated">&lt;strong&gt;同じメジャーバージョン&lt;/strong&gt;内で更新する場合は、中間バージョンをスキップして、ターゲットバージョンに直接更新できます。たとえば、7.0.0から7.2.11に直接更新できます。</target>
        </trans-unit>
        <trans-unit id="d7ada1beb7f1a3e0619c779fa66d5b774aef356f" translate="yes" xml:space="preserve">
          <source>If you are using AngularJS Material, you can install the type definitions via:</source>
          <target state="translated">AngularJSのMaterialを使用している場合は、型定義を経由してインストールします。</target>
        </trans-unit>
        <trans-unit id="5a19f97e563c43c87d702bca0ca63c624178ab00" translate="yes" xml:space="preserve">
          <source>If you are using one of the &lt;code&gt;@nguniversal/*-engine&lt;/code&gt; packages (such as &lt;code&gt;@nguniversal/express-engine&lt;/code&gt;), this is taken care for you automatically. You don't need to do anything to make relative URLs work on the server.</source>
          <target state="translated">&lt;code&gt;@nguniversal/express-engine&lt;/code&gt; &lt;code&gt;@nguniversal/*-engine&lt;/code&gt; パッケージの1つ（@ nguniversal / express-engineなど）を使用している場合、これは自動的に処理されます。サーバー上で相対URLを機能させるために何もする必要はありません。</target>
        </trans-unit>
        <trans-unit id="6c7a81b8180cf07eda11450c5d99572d22e01ced" translate="yes" xml:space="preserve">
          <source>If you change the text, the extractor does &lt;em&gt;not&lt;/em&gt; change the ID. As a result, you don't have to take the extra step of updating the translation. The drawback of using custom IDs is that if you change the text, your translation may be out-of-sync with the newly changed source text.</source>
          <target state="translated">テキストを変更しても、エクストラクタはIDを変更しませ&lt;em&gt;ん&lt;/em&gt;。その結果、翻訳を更新するという余分な手順を踏む必要はありません。カスタムIDを使用することの欠点は、テキストを変更すると、翻訳が新しく変更されたソーステキストと同期しなくなる可能性があることです。</target>
        </trans-unit>
        <trans-unit id="aa30f67180396da593aeadb4e26b8ee85e38af3d" translate="yes" xml:space="preserve">
          <source>If you choose to inject your pipe into a class, you must provide it in the &lt;code&gt;providers&lt;/code&gt; array of your &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パイプをクラスに注入することを選択した場合、それを &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;providers&lt;/code&gt; 配列に提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f9a5cf2285ce2f7f1005a024b906069e5899271e" translate="yes" xml:space="preserve">
          <source>If you click the dashboard hero &quot;Magneta,&quot; the router opens a &quot;Hero Details&quot; view where you can change the hero's name.</source>
          <target state="translated">ダッシュボードのヒーロー「Magneta」をクリックすると、ルーターはヒーローの名前を変更できる「ヒーローの詳細」ビューを開きます。</target>
        </trans-unit>
        <trans-unit id="8f68cc79c216b6b956bc04df5f4512033049017d" translate="yes" xml:space="preserve">
          <source>If you comment out the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; decorator, Angular walks up the injector ancestor tree until it finds the logger at the &lt;code&gt;AppComponent&lt;/code&gt; level. The logger logic kicks in and the hero display updates with the &quot;!!!&quot; marker to indicate that the logger was found.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; デコレーターをコメントアウトすると、Angularは &lt;code&gt;AppComponent&lt;/code&gt; レベルでロガーが見つかるまで、インジェクターの祖先ツリーをたどります。ロガーロジックが起動し、ヒーローの表示が「!!!」で更新されます。ロガーが見つかったことを示すマーカー。</target>
        </trans-unit>
        <trans-unit id="655f88a25378a8e0bba92c48a89431e31a18d04a" translate="yes" xml:space="preserve">
          <source>If you configure an app-wide provider in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; of &lt;code&gt;AppModule&lt;/code&gt;, it overrides one configured for &lt;code&gt;root&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata. You can do this to configure a non-default provider of a service that is shared with multiple apps.</source>
          <target state="translated">あなたはアプリ全体のプロバイダを設定する場合は &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; の &lt;code&gt;AppModule&lt;/code&gt; 、それは一つのために設定より優先され &lt;code&gt;root&lt;/code&gt; で &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; メタデータ。これを行うと、複数のアプリで共有されるサービスのデフォルト以外のプロバイダーを設定できます。</target>
        </trans-unit>
        <trans-unit id="53b5c56d5542295c8b28d30b021bb969efead9f2" translate="yes" xml:space="preserve">
          <source>If you create a new version of your library that introduces potential breaking changes, you can provide an &lt;em&gt;update schematic&lt;/em&gt; to enable the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command to automatically resolve any such changes in the project being updated.</source>
          <target state="translated">潜在的な互換性のない変更を導入するライブラリの新しいバージョンを作成する場合は、&lt;em&gt;更新回路図&lt;/em&gt;を提供して、 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; コマンドが更新中のプロジェクトのそのような変更を自動的に解決できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="36bf0876067bb7a664673feee8ac35025366695a" translate="yes" xml:space="preserve">
          <source>If you create a new version of your library that introduces potential breaking changes, you can provide an &lt;em&gt;update schematic&lt;/em&gt; to enable the &lt;code&gt;ng update&lt;/code&gt; command to automatically resolve any such changes in the project being updated.</source>
          <target state="translated">あなたが紹介潜在的な破壊が変化することをあなたのライブラリーの新しいバージョンを作成する場合は、提供することができ&lt;em&gt;、更新の概略を&lt;/em&gt;有効にするために &lt;code&gt;ng update&lt;/code&gt; 自動的に更新されているプロジェクト内の任意のこのような変化を解決するためのコマンドを。</target>
        </trans-unit>
        <trans-unit id="f94f6f1acbb8efed36c81082ca18afd759387bb6" translate="yes" xml:space="preserve">
          <source>If you create an application using Angular's strict mode, you will also have an additional &lt;code&gt;package.json&lt;/code&gt; file in the &lt;code&gt;src/app&lt;/code&gt; directory. For more information, see &lt;a href=&quot;strict-mode&quot;&gt;Strict mode&lt;/a&gt;.</source>
          <target state="translated">Angularのストリクトモードを使用してアプリケーションを作成する場合は、 &lt;code&gt;src/app&lt;/code&gt; ディレクトリに追加の &lt;code&gt;package.json&lt;/code&gt; ファイルもあります。詳細については、「&lt;a href=&quot;strict-mode&quot;&gt;厳密モード&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d6a642206c4a5d0b4ac72237fc880c34a1dcc940" translate="yes" xml:space="preserve">
          <source>If you create project with `Angular/CLI`, it is already imported in `src/test.ts`.</source>
          <target state="translated">Angular/CLI`でプロジェクトを作成した場合、それはすでに `src/test.ts` にインポートされています。</target>
        </trans-unit>
        <trans-unit id="00d9ca9f25be57d4c4bdc4c5699c96a4ab982c59" translate="yes" xml:space="preserve">
          <source>If you declare the real components, you'll also have to declare &lt;em&gt;their&lt;/em&gt; nested components and provide for &lt;em&gt;all&lt;/em&gt; services injected in &lt;em&gt;any&lt;/em&gt; component in the tree.</source>
          <target state="translated">実際のコンポーネントを宣言する場合は、&lt;em&gt;それらの&lt;/em&gt;ネストされたコンポーネントも宣言し、ツリー内の&lt;em&gt;任意の&lt;/em&gt;コンポーネントに注入された&lt;em&gt;すべての&lt;/em&gt;サービスを提供する必要が&lt;em&gt;あり&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c8c8eecaa76ff1b26ee4f0a3dbfa27a318e146eb" translate="yes" xml:space="preserve">
          <source>If you declare the variable on a component, the variable refers to the component instance.</source>
          <target state="translated">コンポーネント上で変数を宣言した場合、その変数はコンポーネントのインスタンスを参照します。</target>
        </trans-unit>
        <trans-unit id="3e2e7ebc41078b5a92d731d4eb706af50528ef2b" translate="yes" xml:space="preserve">
          <source>If you declare the variable on a standard HTML tag, the variable refers to the element.</source>
          <target state="translated">標準のHTMLタグで変数を宣言した場合、その変数は要素を参照します。</target>
        </trans-unit>
        <trans-unit id="537074c689f36a996573ec7830a8b959e5b1d799" translate="yes" xml:space="preserve">
          <source>If you declare the variable on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element, the variable refers to a &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instance, which represents the template. For more information on &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;, see the &lt;a href=&quot;structural-directives#the-ng-template&quot;&gt;ng-template&lt;/a&gt; section of &lt;a href=&quot;structural-directives&quot;&gt;Structural directives&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素で変数を宣言すると、変数はテンプレートを表す &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; インスタンスを参照します。詳細については &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 、参照&lt;a href=&quot;structural-directives#the-ng-template&quot;&gt;ngのテンプレート&lt;/a&gt;のセクション&lt;a href=&quot;structural-directives&quot;&gt;構造ディレクティブを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="27f3473cbc8bd4910ed874d931585deebed2a0eb" translate="yes" xml:space="preserve">
          <source>If you delete the hero name, the form displays a validation error in an attention-grabbing style:</source>
          <target state="translated">ヒーロー名を削除すると、フォームは注目のスタイルでバリデーションエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="be89fadd89408e928a800bd50abe498bb92298a3" translate="yes" xml:space="preserve">
          <source>If you develop angular locally with &lt;code&gt;ng serve&lt;/code&gt;, a &lt;code&gt;websocket&lt;/code&gt; connection is set up automatically between browser and local dev server, so when your code changes, the browser can automatically refresh.</source>
          <target state="translated">あなたが使用してローカルに角度開発した場合 &lt;code&gt;ng serve&lt;/code&gt; 、 &lt;code&gt;websocket&lt;/code&gt; 接続がそうするとき、あなたのコードの変更、ブラウザや地元のdevのサーバー間で自動的に設定され、ブラウザが自動的に更新することができます。</target>
        </trans-unit>
        <trans-unit id="76ffe5939fdb8b0e744ee8649f7d7239d2f7e34f" translate="yes" xml:space="preserve">
          <source>If you disable Ivy and the project uses internationalization, you can also remove the &lt;code&gt;@angular/localize&lt;/code&gt; runtime component from the project's polyfills file located be default at &lt;code&gt;src/polyfills.ts&lt;/code&gt;.</source>
          <target state="translated">Ivyを無効にし、プロジェクトで国際化を使用している場合は、デフォルトで &lt;code&gt;src/polyfills.ts&lt;/code&gt; /polyfills.tsにあるプロジェクトのpolyfillsファイルから@angular &lt;code&gt;@angular/localize&lt;/code&gt; ランタイムコンポーネントを削除することもできます。</target>
        </trans-unit>
        <trans-unit id="b13b1ae3a623247c92184a19c0620a0d0b0dd8f0" translate="yes" xml:space="preserve">
          <source>If you disable Ivy, you might also want to reconsider whether to make AOT compilation the default for your application development, as described &lt;a href=&quot;ivy#aot-and-ivy&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">Ivyを無効にする場合は、&lt;a href=&quot;ivy#aot-and-ivy&quot;&gt;上記のように&lt;/a&gt;、AOTコンパイルをアプリケーション開発のデフォルトにするかどうかを再検討することもできます。</target>
        </trans-unit>
        <trans-unit id="1b7663d2e6e6cb92add7a2eeb86377cd1a6f1568" translate="yes" xml:space="preserve">
          <source>If you do combine a component and service in the same file, it is important to define the service first, and then the component. If you define the component before the service, you get a run-time null reference error.</source>
          <target state="translated">同じファイルにコンポーネントとサービスを結合する場合、最初にサービスを定義してからコンポーネントを定義することが重要です。サービスの前にコンポーネントを定義すると、ランタイムのヌル参照エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="70b72ee7901f1dbf6fe44eed029ec0919535d96c" translate="yes" xml:space="preserve">
          <source>If you do import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; into a lazy loaded feature module, Angular returns an error telling you to use &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; を遅延ロードされた機能モジュールにインポートすると、Angularは代わりに &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; を使用するように指示するエラーを返します。</target>
        </trans-unit>
        <trans-unit id="d0a50f188d24b28b62b5d94fe7caa482234cb014" translate="yes" xml:space="preserve">
          <source>If you do need to populate initial values into your form, using a one-way binding for &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; tends to be sufficient as long as you use the exported form's value rather than the domain model's value on submit.</source>
          <target state="translated">フォームに初期値を入力する必要がある場合は、送信時にドメインモデルの値ではなくエクスポートされたフォームの値を使用する限り、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; に一方向バインディングを使用するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="8172efb07c1070141d767274a73b38bf7814dfc1" translate="yes" xml:space="preserve">
          <source>If you do, be sure to set the &lt;code&gt;id&lt;/code&gt; attribute - not the &lt;code&gt;name&lt;/code&gt; attribute! The docs generator will not convert the &lt;code&gt;name&lt;/code&gt; to the proper link URL.</source>
          <target state="translated">その場合は、 &lt;code&gt;name&lt;/code&gt; 属性ではなく、必ず &lt;code&gt;id&lt;/code&gt; 属性を設定してください。docsジェネレーターは &lt;code&gt;name&lt;/code&gt; を適切なリンクURLに変換しません。</target>
        </trans-unit>
        <trans-unit id="51cf49223fe57ab0167336d62a454c5e60d9cfb3" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t already have an app, you can follow the steps below to create one with the CLI. If you already have an app, skip to &lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;Configure the routes&lt;/a&gt;. Enter the following command where &lt;code&gt;customer-app&lt;/code&gt; is the name of your app:</source>
          <target state="translated">アプリをまだお持ちでない場合は、以下の手順に従ってCLIでアプリを作成できます。すでにアプリをお持ちの場合は&lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;、ルートの設定&lt;/a&gt;にスキップしてください。次のコマンドを入力します &lt;code&gt;customer-app&lt;/code&gt; はアプリの名前です。</target>
        </trans-unit>
        <trans-unit id="0690d6c4fb6fbd319b60dd809c871d4c4ae2c535" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t already have an app, you can follow the steps below to create one with the CLI. If you do already have an app, skip to &lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;Configure the routes&lt;/a&gt;. Enter the following command where &lt;code&gt;customer-app&lt;/code&gt; is the name of your app:</source>
          <target state="translated">アプリがまだない場合は、以下の手順に従ってCLIでアプリを作成できます。すでにアプリをお持ちの場合は&lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;、ルートの設定に&lt;/a&gt;進んでください。次のコマンドを入力します &lt;code&gt;customer-app&lt;/code&gt; はアプリの名前です。</target>
        </trans-unit>
        <trans-unit id="8ca2994953a96781a0944879ae63e39a49e4701b" translate="yes" xml:space="preserve">
          <source>If you don't add the interface for the script-defined extension, your IDE shows an error:</source>
          <target state="translated">スクリプト定義拡張のインターフェイスを追加しないと、IDE はエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="459d0b6f0027ff890051041d8277b8b47d8f99dc" translate="yes" xml:space="preserve">
          <source>If you don't have it, install &lt;strong&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs&quot;&gt;Visual Studio 2015 Update 3&lt;/a&gt;&lt;/strong&gt;. Or use &lt;code&gt;Tools | Extensions and Updates&lt;/code&gt; to update to Update 3 directly from Visual Studio 2015.</source>
          <target state="translated">お持ちでない場合は、&lt;strong&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs&quot;&gt;Visual Studio 2015 Update 3を&lt;/a&gt;&lt;/strong&gt;インストールしてください。または、 &lt;code&gt;Tools | Extensions and Updates&lt;/code&gt; 使用する| Visual Studio 2015から直接Update 3に更新する拡張機能と更新プログラム。</target>
        </trans-unit>
        <trans-unit id="48ed7036b0a82e03171cab5edf597919553bb1d3" translate="yes" xml:space="preserve">
          <source>If you don't provide a unit when specifying dimension, Angular assumes a default unit of pixels, or px. Expressing 50 pixels as &lt;code&gt;50&lt;/code&gt; is the same as saying &lt;code&gt;'50px'&lt;/code&gt;.</source>
          <target state="translated">寸法を指定するときに単位を指定しない場合、Angularはデフォルトのピクセル単位またはpxを想定します。50ピクセルを &lt;code&gt;50&lt;/code&gt; として表現することは、 &lt;code&gt;'50px'&lt;/code&gt; と言うことと同じです。</target>
        </trans-unit>
        <trans-unit id="d1b561dc3312390e8ea84f90f931f5ed36b0f473" translate="yes" xml:space="preserve">
          <source>If you don't use the CLI, you have two options:</source>
          <target state="translated">CLIを使わない場合は、2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="5bc2f915897fc1447035a5647974d463c55c174d" translate="yes" xml:space="preserve">
          <source>If you find that changes to your library are not reflected in your app, your app is probably using an old build of the library.</source>
          <target state="translated">ライブラリへの変更がアプリに反映されない場合、アプリは古いビルドのライブラリを使用している可能性があります。</target>
        </trans-unit>
        <trans-unit id="0a3bdf9252cbd8653710b518a7e90d39fa7fc1cf" translate="yes" xml:space="preserve">
          <source>If you find that you need to solve the same problem in more than one app (or want to share your solution with other developers), you have a candidate for a library. A simple example might be a button that sends users to your company website, that would be included in all apps that your company builds.</source>
          <target state="translated">複数のアプリで同じ問題を解決する必要がある場合(または他の開発者と解決策を共有したい場合)、ライブラリの候補があります。単純な例としては、ユーザーを会社のウェブサイトに送るボタンがありますが、これは会社が構築するすべてのアプリに含まれています。</target>
        </trans-unit>
        <trans-unit id="3a8aa489382d8d4aec77f8acd02f621cf2ccce35" translate="yes" xml:space="preserve">
          <source>If you find your application becomes unresponsive while processing data, using Web Workers can help.</source>
          <target state="translated">データ処理中にアプリケーションが応答しなくなった場合は、Web Worker を使用することで解決できます。</target>
        </trans-unit>
        <trans-unit id="0433bd29313c70f90dc0cba136f09aa567988ee1" translate="yes" xml:space="preserve">
          <source>If you get a template parse error when trying to use inputs or outputs, but you know that the properties do indeed exist, double check that your properties are annotated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; or that you've declared them in an &lt;code&gt;inputs&lt;/code&gt;/&lt;code&gt;outputs&lt;/code&gt; array:</source>
          <target state="translated">入力または出力を使用しようとしたときにテンプレート解析エラーが発生したが、プロパティが実際に存在することがわかっている場合は、プロパティに &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 注釈が付けられているか、またはプロパティで宣言されていることを再確認してください &lt;code&gt;inputs&lt;/code&gt; / &lt;code&gt;outputs&lt;/code&gt; 配列：</target>
        </trans-unit>
        <trans-unit id="495b88195246c2e62adc198264cd5c3fefd8628b" translate="yes" xml:space="preserve">
          <source>If you go directly to the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz online development environment&lt;/a&gt; and choose to &lt;a href=&quot;https://stackblitz.com/fork/angular&quot;&gt;start a new Angular workspace&lt;/a&gt;, you get a generic stub application, rather than this &lt;a href=&quot;https://angular.io/start#new-project&quot;&gt;illustrative sample&lt;/a&gt;. Once you have been introduced to the basic concepts here, this can be helpful for working interactively while you are learning Angular.</source>
          <target state="translated">&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitzオンライン開発環境&lt;/a&gt;に直接アクセスし&lt;a href=&quot;https://stackblitz.com/fork/angular&quot;&gt;、新しいAngularワークスペース&lt;/a&gt;を開始することを選択した場合、この&lt;a href=&quot;https://angular.io/start#new-project&quot;&gt;例示的なサンプル&lt;/a&gt;ではなく、汎用のスタブアプリケーションを取得します。ここで基本的な概念を紹介したら、Angularを学習しているときにインタラクティブに作業するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bf717436302dddc92f72725596accc08d3335c31" translate="yes" xml:space="preserve">
          <source>If you had an expression that changed the value of something else that you were binding to, that change of value would be a side effect. Angular might or might not display the changed value. If Angular does detect the change, it throws an error.</source>
          <target state="translated">もし、バインディングしている他の何かの値を変更する式があったとしたら、その値の変更は副作用になります。Angularは変更された値を表示しないかもしれませんし、しないかもしれません。Angularが変更を検出した場合、エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="574c59f8b77bf5e82b23eb72c796ed67b3d2fb05" translate="yes" xml:space="preserve">
          <source>If you had any AngularJS services in the project, those would also be a good candidate for converting to classes, since like controllers, they're also constructor functions. But you only have the &lt;code&gt;Phone&lt;/code&gt; factory in this project, and that's a bit special since it's an &lt;code&gt;ngResource&lt;/code&gt; factory. So you won't be doing anything to it in the preparation stage. You'll instead turn it directly into an Angular service.</source>
          <target state="translated">プロジェクトにAngularJSサービスがある場合、それらもコントローラーと同様にコンストラクター関数であるため、クラスに変換するのに適しています。ただし、このプロジェクトには &lt;code&gt;Phone&lt;/code&gt; ファクトリーしかありません &lt;code&gt;ngResource&lt;/code&gt; ファクトリーであるため、これは少し特別です。したがって、準備段階では何​​もしません。代わりに、それを直接Angularサービスに変換します。</target>
        </trans-unit>
        <trans-unit id="1fed1253af78f190067c1aae4775c40631199cc8" translate="yes" xml:space="preserve">
          <source>If you have a content-rich app, such as the Angular app that presents this documentation, custom elements let you give your content providers sophisticated Angular functionality without requiring knowledge of Angular. For example, an Angular guide like this one is added directly to the DOM by the Angular navigation tools, but can include special elements like &lt;code&gt;&amp;lt;code-snippet&amp;gt;&lt;/code&gt; that perform complex operations. All you need to tell your content provider is the syntax of your custom element. They don't need to know anything about Angular, or anything about your component's data structures or implementation.</source>
          <target state="translated">このドキュメントを表示するAngularアプリなど、コンテンツが豊富なアプリがある場合、カスタム要素を使用すると、Angularの知識がなくてもコンテンツプロバイダーに高度なAngular機能を提供できます。たとえば、このようなAngularガイドは、AngularナビゲーションツールによってDOMに直接追加されますが、複雑な操作を実行する &lt;code&gt;&amp;lt;code-snippet&amp;gt;&lt;/code&gt; などの特別な要素を含めることができます。コンテンツプロバイダーに伝える必要があるのは、カスタム要素の構文だけです。 Angularについて、またはコンポーネントのデータ構造や実装について、何も知る必要はありません。</target>
        </trans-unit>
        <trans-unit id="f19944a29f8b906f6f0c8e4343ee837260ae1269" translate="yes" xml:space="preserve">
          <source>If you have a floating image inside an alert, callout, or a subsection, it is a good idea to apply the &lt;code&gt;clear-fix&lt;/code&gt; class to the &lt;code&gt;div&lt;/code&gt; to ensure that the image doesn't overflow its container. For example:</source>
          <target state="translated">アラート、吹き出し、またはサブセクション内にフローティング画像がある場合は、 &lt;code&gt;clear-fix&lt;/code&gt; クラスを &lt;code&gt;div&lt;/code&gt; に適用して、画像がコンテナーからオーバーフローしないようにすることをお勧めします。例えば：</target>
        </trans-unit>
        <trans-unit id="6397857065b35ce89a9f398af1b26fb9b1516f71" translate="yes" xml:space="preserve">
          <source>If you have developed functionality that is suitable for reuse, you can create your own libraries. These libraries can be used locally in your workspace, or you can publish them as &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt; to share with other projects or other Angular developers. These packages can be published to the npm registry, a private npm Enterprise registry, or a private package management system that supports npm packages. See &lt;a href=&quot;creating-libraries&quot;&gt;Creating Libraries&lt;/a&gt;.</source>
          <target state="translated">再利用に適した機能を開発した場合は、独自のライブラリを作成できます。これらのライブラリは、ワークスペースでローカルに使用できます。または、他のプロジェクトまたは他のAngular開発者と共有する&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージ&lt;/a&gt;として公開できます。これらのパッケージは、npmレジストリ、プライベートnpmエンタープライズレジストリ、またはnpmパッケージをサポートするプライベートパッケージ管理システムに公開できます。&lt;a href=&quot;creating-libraries&quot;&gt;ライブラリの作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b1d5fced1eafeb19e09e69c636133d8617598ad9" translate="yes" xml:space="preserve">
          <source>If you have more than two paragraphs, consider creating a new page or making it part of the main content.</source>
          <target state="translated">2段落以上ある場合は、新しいページを作成するか、メインコンテンツの一部にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="ce43e9168848245cd1d0950e4a6be2522d8f2b68" translate="yes" xml:space="preserve">
          <source>If you have registered a provider for the same DI token at different levels, the first one Angular encounters is the one it uses to resolve the dependency. If, for example, a provider is registered locally in the component that needs a service, Angular doesn't look for another provider of the same service.</source>
          <target state="translated">同じDIトークンのプロバイダを異なるレベルで登録している場合、Angularが最初に遭遇するのは依存関係を解決するために使用するプロバイダです。例えば、サービスを必要とするコンポーネントにローカルでプロバイダが登録されている場合、Angularは同じサービスの別のプロバイダを探しません。</target>
        </trans-unit>
        <trans-unit id="244fbbf115dfe5706448ffdb4e279457395f14e1" translate="yes" xml:space="preserve">
          <source>If you haven't already, remove all references to the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;app.module.ts&lt;/code&gt;, as well as any &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; for AngularJS services, and the &lt;code&gt;app/ajs-upgraded-providers.ts&lt;/code&gt; file.</source>
          <target state="translated">まだ行っていない場合は、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; へのすべての参照をapp.module.tsから &lt;code&gt;app.module.ts&lt;/code&gt; 、AngularJSサービスの&lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;ファクトリプロバイダー&lt;/a&gt;と &lt;code&gt;app/ajs-upgraded-providers.ts&lt;/code&gt; ファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="4963feaec493218114281088952fb43b33cce3a9" translate="yes" xml:space="preserve">
          <source>If you haven't created custom validators before, start by reviewing the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators section&lt;/a&gt;.</source>
          <target state="translated">以前にカスタムバリデーターを作成したことがない場合は、&lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーターセクション&lt;/a&gt;を確認することから始めます。</target>
        </trans-unit>
        <trans-unit id="7c789fcd7125f7745fca41c10481fb3d352702dd" translate="yes" xml:space="preserve">
          <source>If you intend to have multiple projects in a workspace, you can skip the initial application generation when you create the workspace, and give the workspace a unique name. The following command creates a workspace with all of the workspace-wide configuration files, but no root-level application.</source>
          <target state="translated">ワークスペース内に複数のプロジェクトを作成する場合は、ワークスペースの作成時に最初のアプリケーション生成をスキップして、ワークスペースに一意の名前を付けることができます。以下のコマンドは、ワークスペース全体の構成ファイルをすべて含むワークスペースを作成しますが、ルート レベルのアプリケーションは作成しません。</target>
        </trans-unit>
        <trans-unit id="6ed99352b2d6234cc28fecffcc038922fe7627c2" translate="yes" xml:space="preserve">
          <source>If you look at the &lt;code&gt;http-server&lt;/code&gt; logs, you can see the service worker requesting &lt;code&gt;/ngsw.json&lt;/code&gt;. This is how the service worker checks for updates.</source>
          <target state="translated">あなたが見れば &lt;code&gt;http-server&lt;/code&gt; のログには、サービスを要求する労働者を見ることができ &lt;code&gt;/ngsw.json&lt;/code&gt; を。これは、Service Workerが更新を確認する方法です。</target>
        </trans-unit>
        <trans-unit id="09c234e78616a8f1ab6267a5b6637fade99d397d" translate="yes" xml:space="preserve">
          <source>If you look at the Network tab, you can verify that the service worker is active.</source>
          <target state="translated">ネットワーク]タブを見ると、サービスワーカーがアクティブになっていることが確認できます。</target>
        </trans-unit>
        <trans-unit id="9c5701cee3aaff758a219be513eeb916029ac2eb" translate="yes" xml:space="preserve">
          <source>If you look at the template for the &lt;code&gt;name&lt;/code&gt; input again, it is fairly similar to the template-driven example.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 入力のテンプレートをもう一度見ると、テンプレート駆動型の例とかなり似ています。</target>
        </trans-unit>
        <trans-unit id="73a79269220380ef80051827e018d68abab94031" translate="yes" xml:space="preserve">
          <source>If you look at the template for the name input again, it is fairly similar to the template-driven example.</source>
          <target state="translated">改めて名前入力のテンプレートを見てみると、テンプレート駆動の例とかなり似ています。</target>
        </trans-unit>
        <trans-unit id="be1adaa34051feae1f602d2f495e70b203a2addd" translate="yes" xml:space="preserve">
          <source>If you look in the Cache Storage viewer, the cache is frequently out of date. Right click the Cache Storage title and refresh the caches.</source>
          <target state="translated">キャッシュストレージのビューアを見ると、キャッシュが古くなっていることが多いです。キャッシュストレージのタイトルを右クリックして、キャッシュを更新します。</target>
        </trans-unit>
        <trans-unit id="e240ddeb830d887bc58d8e84732b2ed378e0c98b" translate="yes" xml:space="preserve">
          <source>If you mean to lazy-load a module, be careful not import it in a file that's eagerly loaded when the app starts (such as the root &lt;code&gt;AppModule&lt;/code&gt;). If you do that, the module will be loaded immediately.</source>
          <target state="translated">モジュールを遅延読み込みする場合は、アプリの起動時に &lt;code&gt;AppModule&lt;/code&gt; 読み込まれるファイル（ルートAppModuleなど）にインポートしないように注意してください。その場合、モジュールはすぐに読み込まれます。</target>
        </trans-unit>
        <trans-unit id="7a3230dc41e776853084f72cc170bbaf7e500a78" translate="yes" xml:space="preserve">
          <source>If you mean to lazy-load a module, be careful not to import it in a file that's eagerly loaded when the app starts (such as the root &lt;code&gt;AppModule&lt;/code&gt;). If you do that, the module will be loaded immediately.</source>
          <target state="translated">モジュールを遅延ロードする場合は、アプリの起動時に熱心にロードされるファイル（ルート &lt;code&gt;AppModule&lt;/code&gt; など）にモジュールをインポートしないように注意してください。これを行うと、モジュールはすぐにロードされます。</target>
        </trans-unit>
        <trans-unit id="16773d19362678c6fc8bb45ee7f72f374bcbc644" translate="yes" xml:space="preserve">
          <source>If you must alter a request, clone it first and modify the clone before passing it to &lt;code&gt;next.handle()&lt;/code&gt;. You can clone and modify the request in a single step, as shown in the following example.</source>
          <target state="translated">リクエストを変更する必要がある場合は、最初にクローンを作成し、クローンを変更してから &lt;code&gt;next.handle()&lt;/code&gt; に渡します。次の例に示すように、リクエストを1つのステップで複製および変更できます。</target>
        </trans-unit>
        <trans-unit id="dd2ad358ff3a296ca464afc454eed23c1c38e476" translate="yes" xml:space="preserve">
          <source>If you must guard against this kind of &quot;provider corruption&quot;, &lt;em&gt;don't rely on a launch-time module's &lt;code&gt;providers&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">この種の「プロバイダーの破損」を防ぐ必要がある場合&lt;em&gt;は、起動時モジュールの&lt;/em&gt;&lt;em&gt; &lt;code&gt;providers&lt;/code&gt; &lt;/em&gt;&lt;em&gt;依存しない&lt;/em&gt;で&lt;em&gt;ください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3304f68a08d3080d984d8dc5da4dcc423149911b" translate="yes" xml:space="preserve">
          <source>If you must inject an instance of an ambient type, you can finesse the problem in four steps:</source>
          <target state="translated">アンビエントタイプのインスタンスを注入しなければならない場合は、4つのステップで問題を解決できます。</target>
        </trans-unit>
        <trans-unit id="d7e18b086d212d4c106b0c8fad4ba48df8021509" translate="yes" xml:space="preserve">
          <source>If you must load the module eagerly, when the application starts, &lt;em&gt;provide the service in a component instead.&lt;/em&gt;</source>
          <target state="translated">モジュールを熱心にロードする必要がある場合は、アプリケーションの起動時に、&lt;em&gt;代わりにコンポーネントでサービスを提供してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="54606fa4b1a1f3287874eefffbe1a9f2ddc23e2d" translate="yes" xml:space="preserve">
          <source>If you must modify the request body, follow these steps.</source>
          <target state="translated">リクエストボディを修正する必要がある場合は、以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="e8ac82fe8517410b1d40420bd85029d758cdda8a" translate="yes" xml:space="preserve">
          <source>If you must mutate the request body, copy it first, change the copy, &lt;code&gt;clone()&lt;/code&gt; the request, and set the clone's body with the new body, as in the following example.</source>
          <target state="translated">リクエストの本文を変更する必要がある場合は、次の例のように、最初にコピーして、コピーを変更し、リクエストを &lt;code&gt;clone()&lt;/code&gt; して、クローンの本文に新しい本文を設定します。</target>
        </trans-unit>
        <trans-unit id="5deab0538bd8714b4af9c382cd8cc938823e841f" translate="yes" xml:space="preserve">
          <source>If you must read a target element property or call one of its methods, see the API reference for &lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt; and &lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;.</source>
          <target state="translated">ターゲット要素のプロパティを読み取るか、そのメソッドの1つを呼び出す必要がある場合は、&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;および&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChildの&lt;/a&gt; APIリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="4c8d2326e60e33ffa20c7c4182475e5223e4a351" translate="yes" xml:space="preserve">
          <source>If you need an &lt;em&gt;optional&lt;/em&gt; polyfill, you must install its npm package, then uncomment or create the corresponding import statement in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">&lt;em&gt;オプションの&lt;/em&gt;ポリフィルが必要な場合は、npmパッケージをインストールしてから、 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 構成ファイルで対応するインポートステートメントのコメントを外すか作成します。</target>
        </trans-unit>
        <trans-unit id="9bc172afb1ec77e9f642e2976433da99d4796934" translate="yes" xml:space="preserve">
          <source>If you need the previous behavior then set it by creating a &lt;code&gt;&lt;a href=&quot;../core/default_currency_code&quot;&gt;DEFAULT_CURRENCY_CODE&lt;/a&gt;&lt;/code&gt; provider in your application &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">以前の動作が必要な場合は、アプリケーション &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../core/default_currency_code&quot;&gt;DEFAULT_CURRENCY_CODE&lt;/a&gt;&lt;/code&gt; プロバイダーを作成して設定します。</target>
        </trans-unit>
        <trans-unit id="beb15ada72d6e27c5b0260646179c4bf9acb237d" translate="yes" xml:space="preserve">
          <source>If you need the previous behavior then set it by creating a &lt;code&gt;&lt;a href=&quot;default_currency_code&quot;&gt;DEFAULT_CURRENCY_CODE&lt;/a&gt;&lt;/code&gt; provider in your application &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">以前の動作が必要な場合は、アプリケーション &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;default_currency_code&quot;&gt;DEFAULT_CURRENCY_CODE&lt;/a&gt;&lt;/code&gt; プロバイダーを作成して設定します。</target>
        </trans-unit>
        <trans-unit id="2e3109a970d92c304a276ac634765200cb2660a8" translate="yes" xml:space="preserve">
          <source>If you need to access a backend that is not on &lt;code&gt;localhost&lt;/code&gt;, set the &lt;code&gt;changeOrigin&lt;/code&gt; option as well. For example:</source>
          <target state="translated">&lt;code&gt;localhost&lt;/code&gt; にないバックエンドにアクセスする必要がある場合は、 &lt;code&gt;changeOrigin&lt;/code&gt; オプションも設定します。例えば：</target>
        </trans-unit>
        <trans-unit id="7385333e0134701bca8a7465de13704c98317745" translate="yes" xml:space="preserve">
          <source>If you need to avoid randomly generated value to be used as an application id, you can provide a custom value via a DI provider  configuring the root &lt;a href=&quot;injector&quot;&gt;&lt;code&gt;Injector&lt;/code&gt;&lt;/a&gt; using this token.</source>
          <target state="translated">ランダムに生成された値がアプリケーションIDとして使用されるのを避ける必要がある場合は、このトークンを使用してルート&lt;a href=&quot;injector&quot;&gt; &lt;code&gt;Injector&lt;/code&gt; &lt;/a&gt;を構成するDIプロバイダーを介してカスタム値を提供できます。</target>
        </trans-unit>
        <trans-unit id="9f78d5b2a7cf462a861acdc7e39dc21266ddf374" translate="yes" xml:space="preserve">
          <source>If you need to convert user input into a trusted value, use a controller method. The following template allows users to enter a YouTube video ID and load the corresponding video in an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; attribute is a resource URL security context, because an untrusted source can, for example, smuggle in file downloads that unsuspecting users could execute. So call a method on the controller to construct a trusted video URL, which causes Angular to allow binding into &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">ユーザー入力を信頼できる値に変換する必要がある場合は、コントローラーメソッドを使用します。次のテンプレートを使用すると、ユーザーはYouTube動画IDを入力して、対応する動画を &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; に読み込むことができます。 &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; 信頼できないソースは、例えば、疑いを持たないユーザーが実行できることを、ファイルのダウンロードに密輸できるため、属性は、リソースのURLのセキュリティコンテキストです。したがって、コントローラーのメソッドを呼び出して、信頼できるビデオURLを構築します。これにより、Angularは &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; へのバインドを許可します。</target>
        </trans-unit>
        <trans-unit id="29f9ab2a5ca9fca7da3c0139902ffd0aad1ea2c6" translate="yes" xml:space="preserve">
          <source>If you need to display alternate text depending on the value of a variable, you need to translate all of the alternates.</source>
          <target state="translated">変数の値に応じて代替テキストを表示する必要がある場合は、すべての代替テキストを翻訳する必要があります。</target>
        </trans-unit>
        <trans-unit id="5583bc38486dde54355c7bd2036697b8c05b7dab" translate="yes" xml:space="preserve">
          <source>If you need to make a change that inverts the expected data flow, you must trigger a new change detection cycle to allow that change to be rendered. The examples illustrate how to make such changes safely.</source>
          <target state="translated">期待されるデータ フローを反転させるような変更を行う必要がある場合は、新しい変更検出サイクルをトリガーして、その変更がレンダリングされるようにする必要があります。この例では、そのような変更を安全に行う方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="b1f2654a458aa911b15f130929a6854dd20ee84a" translate="yes" xml:space="preserve">
          <source>If you need to make an HTTP request in response to user input, it's not efficient to send a request for every keystroke. It's better to wait until the user stops typing and then send a request. This technique is known as debouncing.</source>
          <target state="translated">ユーザーの入力に応答して HTTP リクエストを行う必要がある場合、キーストロークごとにリクエストを送信するのは効率的ではありません。ユーザーが入力を止めるまで待ってからリクエストを送信する方が良いでしょう。このテクニックはデバウンスとして知られています。</target>
        </trans-unit>
        <trans-unit id="a3250f2b9a593c69bfc2b1d2c08f0d20870d9f6a" translate="yes" xml:space="preserve">
          <source>If you need to opt-out from using Bazel, you can restore the backup files:</source>
          <target state="translated">Bazelの使用をオプトアウトする必要がある場合は、バックアップファイルを復元することができます。</target>
        </trans-unit>
        <trans-unit id="6bb9cbf31fbab37e1847d62faf286db820a17f95" translate="yes" xml:space="preserve">
          <source>If you need to optionally bypass the proxy, or dynamically change the request before it's sent, add the bypass option, as shown in this JavaScript example.</source>
          <target state="translated">オプションでプロキシをバイパスしたり、 リクエストを送信する前に動的に変更したりする必要がある場合は、 この JavaScript の例のようにバイパスオプションを追加してください。</target>
        </trans-unit>
        <trans-unit id="9ebc63e4b9f1212654ea17d217d2e04a30598b57" translate="yes" xml:space="preserve">
          <source>If you need to respond to duplicate requests in your test, use the &lt;code&gt;match()&lt;/code&gt; API instead of &lt;code&gt;expectOne()&lt;/code&gt;. It takes the same arguments but returns an array of matching requests. Once returned, these requests are removed from future matching and you are responsible for flushing and verifying them.</source>
          <target state="translated">テストで重複したリクエストに応答する必要がある場合は、 &lt;code&gt;expectOne()&lt;/code&gt; の代わりに &lt;code&gt;match()&lt;/code&gt; APIを使用してください。同じ引数を取りますが、一致するリクエストの配列を返します。返されると、これらのリクエストは今後のマッチングから削除され、ユーザーがそれらをフラッシュして検証する必要があります。</target>
        </trans-unit>
        <trans-unit id="e6da32d2aee99ed52ecee5a0adbf5cdb5a48c9d5" translate="yes" xml:space="preserve">
          <source>If you need to see what events are happening during the navigation lifecycle, there is the &lt;code&gt;enableTracing&lt;/code&gt; option as part of the router's default configuration. This outputs each router event that took place during each navigation lifecycle to the browser console. Use &lt;code&gt;enableTracing&lt;/code&gt; only for debugging purposes. You set the &lt;code&gt;enableTracing: true&lt;/code&gt; option in the object passed as the second argument to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">ナビゲーションライフサイクル中に発生しているイベントを確認する必要がある場合は、ルーターのデフォルト構成の一部として &lt;code&gt;enableTracing&lt;/code&gt; オプションがあります。これにより、各ナビゲーションライフサイクル中に発生した各ルーターイベントがブラウザコンソールに出力されます。 &lt;code&gt;enableTracing&lt;/code&gt; は、デバッグ目的でのみ使用してください。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドに2番目の引数として渡されるオブジェクトに &lt;code&gt;enableTracing: true&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="04c73ded6e0a3395b3dfd9ed41d7828a67bbbf93" translate="yes" xml:space="preserve">
          <source>If you need to see what events are happening during the navigation lifecycle, there is the &lt;strong&gt;enableTracing&lt;/strong&gt; option as part of the router's default configuration. This outputs each router event that took place during each navigation lifecycle to the browser console. This should only be used for &lt;em&gt;debugging&lt;/em&gt; purposes. You set the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;: true&lt;/code&gt; option in the object passed as the second argument to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">ナビゲーションライフサイクル中に発生しているイベントを確認する必要がある場合は、ルーターのデフォルト構成の一部として&lt;strong&gt;enableTracing&lt;/strong&gt;オプションがあります。これにより、各ナビゲーションライフサイクル中に発生した各ルーターイベントがブラウザーコンソールに出力されます。これは&lt;em&gt;デバッグ&lt;/em&gt;目的でのみ使用してください。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドの2番目の引数として渡されるオブジェクトに &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;: true&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="05239027809e9357cdeac1b33f2e9f9ad3528fa3" translate="yes" xml:space="preserve">
          <source>If you neglect to &lt;code&gt;subscribe()&lt;/code&gt;, the service will not send the delete request to the server. As a rule, an &lt;code&gt;Observable&lt;/code&gt;&lt;em&gt;does nothing&lt;/em&gt; until something subscribes.</source>
          <target state="translated">&lt;code&gt;subscribe()&lt;/code&gt; を省略した場合、サービスは削除要求をサーバーに送信しません。原則として、 &lt;code&gt;Observable&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;何かがサブスクライブするまで何&lt;em&gt;もしません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2bb56c6624ae91a5bea7e0fafc4658c9a36bf145" translate="yes" xml:space="preserve">
          <source>If you neglect to declare them, the Angular compiler won't recognize the &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tags in the &lt;code&gt;AppComponent&lt;/code&gt; template and will throw an error.</source>
          <target state="translated">それらの宣言を怠ると、Angularコンパイラーは &lt;code&gt;AppComponent&lt;/code&gt; テンプレートの &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; タグを認識せず、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="71dab46c6a678dfa01d392650ea86b654326f74b" translate="yes" xml:space="preserve">
          <source>If you neglect to make the test function async (e.g., forget to use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; as described below), you'll see this error message</source>
          <target state="translated">テスト関数を非同期にすることを怠った場合（たとえば、下記のように &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; を使用し忘れた場合）、このエラーメッセージが表示されます</target>
        </trans-unit>
        <trans-unit id="f4864022129ceef9f74cba424383807e7e0f747d" translate="yes" xml:space="preserve">
          <source>If you neglect to make the test function async (e.g., forget to use &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; as described below), you'll see this error message</source>
          <target state="translated">テスト関数を非同期にすることを怠った場合（たとえば、以下で説明するように &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; の使用を忘れた場合）、このエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="1dafb68babd363c5daa6a75a57bc8244a72755a1" translate="yes" xml:space="preserve">
          <source>If you notice that the size of your application's main bundle has increased with Ivy, you may want to check the following:</source>
          <target state="translated">Ivyでアプリケーションのメインバンドルのサイズが大きくなっていることに気づいた場合は、以下を確認してみてください。</target>
        </trans-unit>
        <trans-unit id="a16062c9a5d0f73bb6c757b4c2accd4e8ddb5ef7" translate="yes" xml:space="preserve">
          <source>If you now add &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; (in addition to the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;) to the &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;FlowerService&lt;/code&gt;, the result will be &lt;code&gt;null&lt;/code&gt;. This is because &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; limits the upper bound of the search to the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. Here's the idea in the logical tree:</source>
          <target state="translated">あなたは今追加した場合 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; （に加えて &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; へ） &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;FlowerService&lt;/code&gt; 、結果になります &lt;code&gt;null&lt;/code&gt; 。これは、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; が検索の上限を &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; に制限するためです。論理ツリーのアイデアは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="bad60c66209070a16ad3d561eadc496aed10c245" translate="yes" xml:space="preserve">
          <source>If you opt out of Ivy and your application uses &lt;a href=&quot;universal&quot;&gt;Angular Universal&lt;/a&gt; to render Angular applications on the server, you must also change the way the server performs bootstrapping.</source>
          <target state="translated">Ivyをオプトアウトし、アプリケーションが&lt;a href=&quot;universal&quot;&gt;Angular Universal&lt;/a&gt;を使用してサーバー上でAngularアプリケーションをレンダリングする場合は、サーバーがブートストラップを実行する方法も変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="81d30c47f20d917822d2488c8b61db4df77908bc" translate="yes" xml:space="preserve">
          <source>If you pass the command a set of libraries to update (or the &lt;code&gt;--all&lt;/code&gt; flag), it updates those libraries, their peer dependencies, and the peer dependencies that depend on them.</source>
          <target state="translated">更新するライブラリのセット（または &lt;code&gt;--all&lt;/code&gt; フラグ）をコマンドに渡すと、それらのライブラリ、それらのピア依存関係、およびそれらに依存するピア依存関係が更新されます。</target>
        </trans-unit>
        <trans-unit id="1bea4d710733901849b05721b28d48be60b80605" translate="yes" xml:space="preserve">
          <source>If you paste &lt;code&gt;localhost:4200/detail/11&lt;/code&gt; in the browser address bar, the router navigates to the detail view for the hero with &lt;code&gt;id: 11&lt;/code&gt;, &quot;Dr Nice&quot;.</source>
          <target state="translated">ブラウザのアドレスバーに &lt;code&gt;localhost:4200/detail/11&lt;/code&gt; を貼り付けると、ルーターは、 &lt;code&gt;id: 11&lt;/code&gt; 「ニース博士」のヒーローの詳細ビューに移動します。</target>
        </trans-unit>
        <trans-unit id="b16393ced398a24e5cb38175dcbb00a542ed2e61" translate="yes" xml:space="preserve">
          <source>If you plan to have multiple applications in the workspace, you can create an empty workspace by setting the &lt;code&gt;--createApplication&lt;/code&gt; option to false. You can then use &lt;code&gt;ng generate application&lt;/code&gt; to create an initial application. This allows a workspace name different from the initial app name, and ensures that all applications reside in the &lt;code&gt;/projects&lt;/code&gt; subfolder, matching the structure of the configuration file.</source>
          <target state="translated">ワークスペースに複数のアプリケーションを &lt;code&gt;--createApplication&lt;/code&gt; 場合は、-createApplicationオプションをfalseに設定して、空のワークスペースを作成できます。次に、 &lt;code&gt;ng generate application&lt;/code&gt; を使用して、初期アプリケーションを作成できます。これにより、最初のアプリ名とは異なるワークスペース名が許可され、すべてのアプリケーションが &lt;code&gt;/projects&lt;/code&gt; サブフォルダーに存在し、構成ファイルの構造と一致するようになります。</target>
        </trans-unit>
        <trans-unit id="a7f498a38745493c47fdb50885cc56ca61f9d272" translate="yes" xml:space="preserve">
          <source>If you plan to have multiple apps in the workspace, you can create an empty workspace by setting the &lt;code&gt;--createApplication&lt;/code&gt; option to false. You can then use &lt;code&gt;ng generate application&lt;/code&gt; to create an initial app. This allows a workspace name different from the initial app name, and ensures that all apps reside in the &lt;code&gt;/projects&lt;/code&gt; subfolder, matching the structure of the configuration file.</source>
          <target state="translated">ワークスペースに複数のアプリを配置する予定の場合は、 &lt;code&gt;--createApplication&lt;/code&gt; オプションをfalseに設定することにより、空のワークスペースを作成できます。次に、 &lt;code&gt;ng generate application&lt;/code&gt; を使用して初期アプリを作成できます。これにより、最初のアプリ名とは異なるワークスペース名が許可され、すべてのアプリが &lt;code&gt;/projects&lt;/code&gt; サブフォルダーに存在し、構成ファイルの構造と一致することが保証されます。</target>
        </trans-unit>
        <trans-unit id="2c9da46a1c1c85d39407dcd30d927647ba079020" translate="yes" xml:space="preserve">
          <source>If you plan to use specific animation functions in component files, import those functions from &lt;code&gt;@angular/animations&lt;/code&gt;.</source>
          <target state="translated">コンポーネントファイルで特定のアニメーション関数を使用する場合は、それらの関数を &lt;code&gt;@angular/animations&lt;/code&gt; からインポートします。</target>
        </trans-unit>
        <trans-unit id="058a384d58caba78f973912e1c7261709321db73" translate="yes" xml:space="preserve">
          <source>If you prefer a &lt;code&gt;File | New Project&lt;/code&gt; experience and are using &lt;strong&gt;ASP.NET Core&lt;/strong&gt;, then consider the &lt;em&gt;experimental&lt;/em&gt;&lt;a href=&quot;http://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/&quot;&gt;ASP.NET Core + Angular template for Visual Studio 2015&lt;/a&gt;. Note that the resulting code does not map to the docs. Adjust accordingly.</source>
          <target state="translated">&lt;code&gt;File | New Project&lt;/code&gt; を希望する場合| 新しいプロジェクトの経験があり、&lt;strong&gt;ASP.NET Core&lt;/strong&gt;を使用している場合は&lt;a href=&quot;http://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/&quot;&gt;、Visual Studio 2015&lt;/a&gt;の&lt;em&gt;実験的な&lt;/em&gt;ASP.NET Core + Angularテンプレートを検討してください。結果のコードはドキュメントにマップされないことに注意してください。適宜調整してください。</target>
        </trans-unit>
        <trans-unit id="40537ceb386711b8d7aebae59078f6588b332d47" translate="yes" xml:space="preserve">
          <source>If you provided &lt;code&gt;VillainsService&lt;/code&gt; in the root &lt;code&gt;AppModule&lt;/code&gt; (where you registered the &lt;code&gt;HeroesService&lt;/code&gt;), that would make the &lt;code&gt;VillainsService&lt;/code&gt; visible everywhere in the application, including the &lt;em&gt;Hero&lt;/em&gt; workflows. If you later modified the &lt;code&gt;VillainsService&lt;/code&gt;, you could break something in a hero component somewhere.</source>
          <target state="translated">あなたが提供されている場合 &lt;code&gt;VillainsService&lt;/code&gt; をルートに &lt;code&gt;AppModule&lt;/code&gt; （あなたが登録 &lt;code&gt;HeroesService&lt;/code&gt; を）、それはなるだろう &lt;code&gt;VillainsService&lt;/code&gt; を含めて、アプリケーション内のどこでも見える&lt;em&gt;ヒーローが&lt;/em&gt;ワークフロー。後で &lt;code&gt;VillainsService&lt;/code&gt; を変更した場合、ヒーローコンポーネントのどこかで何かが壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="34e894d4b2433bfdb374e1411f1d2796623ea1fa" translate="yes" xml:space="preserve">
          <source>If you ran the app now and started typing in the &lt;em&gt;Name&lt;/em&gt; input box, adding and deleting characters, you'd see them appear and disappear from the interpolated text. At some point it might look like this:</source>
          <target state="translated">今すぐアプリを実行して、&lt;em&gt;名前&lt;/em&gt;入力ボックスへの入力、文字の追加と削除を開始すると、それらの文字が表示され、補間されたテキストから消えます。ある時点で、次のようになります。</target>
        </trans-unit>
        <trans-unit id="32f30f3a80132757d89d194ab176d54b3533a611" translate="yes" xml:space="preserve">
          <source>If you register global service providers or share providers across multiple NgModules, use the &lt;a href=&quot;singleton-services&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; and &lt;code&gt;forChild()&lt;/code&gt; design patterns&lt;/a&gt; provided by the &lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;.</source>
          <target state="translated">グローバルサービスプロバイダーを登録するか、複数のNgModule間でプロバイダーを共有する場合は、&lt;a href=&quot;singleton-services&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; &lt;code&gt;forChild()&lt;/code&gt; &lt;/a&gt;によって提供されるforRoot（）およびforChild（）デザインパターンを&lt;a href=&quot;../api/router/routermodule&quot;&gt;使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="eef190ef5d0b1e7b6837c2e3d11da6d23edc990e" translate="yes" xml:space="preserve">
          <source>If you register global service providers or share providers across multiple NgModules, use the &lt;a href=&quot;singleton-services&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; and &lt;code&gt;forChild()&lt;/code&gt; patterns&lt;/a&gt; provided by the &lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;.</source>
          <target state="translated">グローバルサービスプロバイダーを登録するか、複数のNgModule間でプロバイダーを共有する場合は、&lt;a href=&quot;singleton-services&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; &lt;code&gt;forChild()&lt;/code&gt; &lt;/a&gt;によって提供されるforRoot（）およびforChild（）パターンを&lt;a href=&quot;../api/router/routermodule&quot;&gt;使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8e78fb432ea926eaccd578fd4c24d9a2cfa237ad" translate="yes" xml:space="preserve">
          <source>If you rely on the behavior that the same object instance should cause change detection, you have two options:</source>
          <target state="translated">同じオブジェクトインスタンスが変更検出を起こすべきだという動作に依存している場合は、2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="ddd4700cea7271c0c90205b90dda623d6197e16f" translate="yes" xml:space="preserve">
          <source>If you restore the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; decorator and comment out &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt;, the app throws an exception when it cannot find the required logger at the host component level.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; デコレータを復元して &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; をコメントアウトすると、ホストコンポーネントレベルで必要なロガーが見つからない場合、アプリは例外をスローします。</target>
        </trans-unit>
        <trans-unit id="33bb5c55ad4aa9d09fe4482cd02e6d0fd59b9479" translate="yes" xml:space="preserve">
          <source>If you run other &lt;code&gt;macroTask&lt;/code&gt; such as &lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt;, &lt;code&gt;Unknown macroTask scheduled in fake &lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt; test&lt;/code&gt; error will be thrown.</source>
          <target state="translated">あなたが他の実行する場合 &lt;code&gt;macroTask&lt;/code&gt; など &lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt; 、 &lt;code&gt;Unknown macroTask scheduled in fake &lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt; test&lt;/code&gt; エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="37c45632d720c861eb9466ce577279a844106c86" translate="yes" xml:space="preserve">
          <source>If you run other macro tasks such as &lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt;, an &lt;em&gt;&quot;Unknown macroTask scheduled in fake async test&quot;&lt;/em&gt; error will be thrown.</source>
          <target state="translated">&lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt; などの他のマクロタスクを実行すると、&lt;em&gt;「偽の非同期テストでスケジュールされた不明なmacroTask」&lt;/em&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="3f9f75108fc42c095c35521bcb513aee44b2b9d0" translate="yes" xml:space="preserve">
          <source>If you run tests in a &lt;strong&gt;non-CLI environment&lt;/strong&gt;, the tests may fail with a message like this one:</source>
          <target state="translated">&lt;strong&gt;非CLI環境&lt;/strong&gt;でテストを実行すると、テストは次のようなメッセージで失敗する場合があります。</target>
        </trans-unit>
        <trans-unit id="d43bbf23fa3e23d5c174913c8419dd08b9a38280" translate="yes" xml:space="preserve">
          <source>If you run the app now and change every hero model property, the form might display like this:</source>
          <target state="translated">今アプリを実行して、すべてのヒーローモデルのプロパティを変更すると、このようなフォームが表示されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d950e9a165ba31caa3f90eca764582f6ada8b451" translate="yes" xml:space="preserve">
          <source>If you run the app right now, you see the list of powers in the selection control. The input elements are not yet bound to data values or events, so they are still blank and have no behavior.</source>
          <target state="translated">今アプリを実行すると、選択コントロールにパワーのリストが表示されています。入力要素はまだデータ値やイベントにバインドされていないので、空白のままで何の挙動もありません。</target>
        </trans-unit>
        <trans-unit id="65b31d00b7e322159d3096cefef0ef38c3b1e7fc" translate="yes" xml:space="preserve">
          <source>If you run the application now, you find that the button is enabled&amp;mdash;although it doesn't do anything useful yet.</source>
          <target state="translated">ここでアプリケーションを実行すると、ボタンは有効になっていることがわかります。ただし、ボタンはまだ何の役にも立ちません。</target>
        </trans-unit>
        <trans-unit id="27b6400e05079e321c67fb69ac2f1ea5f2e11f6d" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;OnPush&lt;/code&gt; (&quot;CheckOnce&quot;) change-detection strategy, the change detector runs only when &lt;a href=&quot;../api/core/changedetectorref&quot;&gt;explicitly invoked&lt;/a&gt;, or when it is triggered by an &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; reference change or event handler. This typically improves performance. For more information, see &lt;a href=&quot;https://web.dev/faster-angular-change-detection/&quot;&gt;Optimize Angular's change detection&lt;/a&gt;.</source>
          <target state="translated">あなたが設定した場合 &lt;code&gt;OnPush&lt;/code&gt; （「CheckOnce」）チェンジ検出戦略を、変化検出器は、ときにのみ実行され&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;、明示的に呼び出される&lt;/a&gt;、またはそれがによってトリガされたときに &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 基準変化やイベントハンドラ。これにより、通常、パフォーマンスが向上します。詳細については、「&lt;a href=&quot;https://web.dev/faster-angular-change-detection/&quot;&gt;Angularの変更検出の最適化&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="70b574c62b73c7ab82961bbe1d311a4be5bc48ca" translate="yes" xml:space="preserve">
          <source>If you still have issues after troubleshooting with these flags, you can fall back to full mode by disabling &lt;code&gt;strictTemplates&lt;/code&gt;.</source>
          <target state="translated">これらのフラグを使用してトラブルシューティングを行っても問題が解決しない場合は、 &lt;code&gt;strictTemplates&lt;/code&gt; を無効にすることでフルモードにフォールバックできます。</target>
        </trans-unit>
        <trans-unit id="1afbfd71a7b0f3746a5b9d786267c74b5e8c9f70" translate="yes" xml:space="preserve">
          <source>If you tell the router to navigate to the detail component and display &quot;Magneta&quot;, you expect a hero id to appear in the browser URL like this:</source>
          <target state="translated">ルーターに詳細コンポーネントに移動して「Magneta」を表示するように指示すると、ブラウザのURLにこのようなヒーローIDが表示されると予想されます。</target>
        </trans-unit>
        <trans-unit id="8dddbeadfd16ceb49ed31d2988e2ee1b9782e74c" translate="yes" xml:space="preserve">
          <source>If you think you'll reuse this debouncing logic, consider moving it to a utility function or into the &lt;code&gt;PackageSearchService&lt;/code&gt; itself.</source>
          <target state="translated">このデバウンスロジックを再利用する場合は、ユーティリティ関数または &lt;code&gt;PackageSearchService&lt;/code&gt; 自体に移動することを検討してください。</target>
        </trans-unit>
        <trans-unit id="d7a151abe2fd8d0a7aaa7a6bd6a8df4082f73f7c" translate="yes" xml:space="preserve">
          <source>If you throttle your network speed so that the client-side scripts take longer to download (instructions below), you'll notice:</source>
          <target state="translated">クライアント側のスクリプトのダウンロードに時間がかかるようにネットワーク速度を調整すると(以下の手順)、気がつくでしょう。</target>
        </trans-unit>
        <trans-unit id="92b0949b67e72c8422501e07cc4ce8c75521a33c" translate="yes" xml:space="preserve">
          <source>If you try to alias &lt;code&gt;OldLogger&lt;/code&gt; to &lt;code&gt;NewLogger&lt;/code&gt; with &lt;code&gt;useClass&lt;/code&gt;, you end up with two different &lt;code&gt;NewLogger&lt;/code&gt; instances in your app.</source>
          <target state="translated">エイリアスにしようと &lt;code&gt;OldLogger&lt;/code&gt; に &lt;code&gt;NewLogger&lt;/code&gt; で &lt;code&gt;useClass&lt;/code&gt; 、次の2つの異なるで終わる &lt;code&gt;NewLogger&lt;/code&gt; のあなたのアプリ内のインスタンス。</target>
        </trans-unit>
        <trans-unit id="b1333d31e83b576427ff734b7c88ade3261f5d51" translate="yes" xml:space="preserve">
          <source>If you upgrade this component and use it from Angular, you can populate the component tag with contents that will then get transcluded:</source>
          <target state="translated">このコンポーネントをアップグレードしてAngularから使用すると、コンポーネントタグにコンテンツを埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="5229aaba988a521b48efab8fecc2aefe3f2fe23e" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;NgFor&lt;/code&gt; with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</source>
          <target state="translated">大きなリストで &lt;code&gt;NgFor&lt;/code&gt; を使用する場合、アイテムの削除や追加など、1つのアイテムに小さな変更を加えると、DOM操作のカスケードがトリガーされる可能性があります。たとえば、サーバーを再クエリすると、それらのアイテムが以前に表示されていたとしても、すべての新しいアイテムオブジェクトを含むリストがリセットされる可能性があります。この場合、Angularは新しいオブジェクト参照の新しいリストのみを参照し、古いDOM要素をすべての新しいDOM要素で置き換えるしかありません。</target>
        </trans-unit>
        <trans-unit id="a75130a39257f6837aa70edb1e7ee3064bb9921f" translate="yes" xml:space="preserve">
          <source>If you use dynamic values to generate the link, you can pass an array of path segments, followed by the params for each segment.</source>
          <target state="translated">リンクを生成するために動的な値を使用する場合は、パスセグメントの配列を渡し、その後に各セグメントのパラメータを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="95db25e1e7afc248a2cd0fe9b287c943fda5d02b" translate="yes" xml:space="preserve">
          <source>If you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to generate an app, the default &lt;code&gt;AppModule&lt;/code&gt; is as follows:</source>
          <target state="translated">あなたが使用している場合は&lt;a href=&quot;cli&quot;&gt;角度CLIを&lt;/a&gt;アプリを生成するために、デフォルトの &lt;code&gt;AppModule&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a6967c4ab3b314fa46aff194dc20ed6a9dd2b60b" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper function to run unit tests (for details, read the &lt;a href=&quot;testing#async-test-with-fakeasync&quot;&gt;Testing guide&lt;/a&gt;), you need to import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ヘルパー関数を使用して単体テストを実行する場合（詳細については、&lt;a href=&quot;testing#async-test-with-fakeasync&quot;&gt;テストガイド&lt;/a&gt;を参照）、テストセットアップファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="033eb7a2799b446ce985cbf252d18f61a08af7e8" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; helper function to run unit tests (for details, read the &lt;a href=&quot;testing-components-scenarios#fake-async&quot;&gt;Testing guide&lt;/a&gt;), you need to import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; ヘルパー関数を使用して単体テストを実行する場合（詳細については、&lt;a href=&quot;testing-components-scenarios#fake-async&quot;&gt;テストガイド&lt;/a&gt;を参照してください）、テストセットアップファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="b72f1ab9aecc24257c6414e938470c94360b2550" translate="yes" xml:space="preserve">
          <source>If you use the Angular CLI, configure this flag in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">Angular CLIを使用する場合は、このフラグを &lt;code&gt;src/test.ts&lt;/code&gt; で構成します。</target>
        </trans-unit>
        <trans-unit id="6d271b502194e43198b4eb10238cbab362121ae6" translate="yes" xml:space="preserve">
          <source>If you use the JIT compiler, specify the warning level in the compiler config at bootstrap by adding the 'MissingTranslationStrategy' property. The example below shows how to set the warning level to error.</source>
          <target state="translated">JITコンパイラを使用する場合は、bootstrap時のコンパイラ設定で'MissingTranslationStrategy'プロパティを追加して警告レベルを指定します。以下の例では、警告レベルをエラーに設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ce978a5f13cee676ff853adc3785a5db0dc00166" translate="yes" xml:space="preserve">
          <source>If you use the following deprecated i18n pipes: &lt;a href=&quot;../api/common/deprecateddatepipe&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecatedcurrencypipe&quot;&gt;currency&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecateddecimalpipe&quot;&gt;decimal&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecatedpercentpipe&quot;&gt;percent&lt;/a&gt;</source>
          <target state="translated">次の非推奨のi18nパイプを使用する場合：&lt;a href=&quot;../api/common/deprecateddatepipe&quot;&gt;日付&lt;/a&gt;、&lt;a href=&quot;../api/common/deprecatedcurrencypipe&quot;&gt;通貨&lt;/a&gt;、&lt;a href=&quot;../api/common/deprecateddecimalpipe&quot;&gt;10進数&lt;/a&gt;、&lt;a href=&quot;../api/common/deprecatedpercentpipe&quot;&gt;パーセント&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a047e1b38f5fe9531800dc758286f59e23bce528" translate="yes" xml:space="preserve">
          <source>If you view your application in the browser, you should see these two links. When you click on a link, the corresponding component appears.</source>
          <target state="translated">ブラウザでアプリケーションを表示すると、以下の2つのリンクが表示されるはずです。リンクをクリックすると、対応するコンポーネントが表示されます。</target>
        </trans-unit>
        <trans-unit id="c4bd37b0cb03c780077913bd95b8118fa17a9f1d" translate="yes" xml:space="preserve">
          <source>If you want &lt;code&gt;ngc&lt;/code&gt; to report syntax errors immediately rather than produce a &lt;code&gt;.metadata.json&lt;/code&gt; file with errors, set the &lt;code&gt;strictMetadataEmit&lt;/code&gt; option in the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;.</source>
          <target state="translated">あなたがしたい場合は &lt;code&gt;ngc&lt;/code&gt; すぐにというよりも農産物のレポート構文エラーに &lt;code&gt;.metadata.json&lt;/code&gt; エラーのあるファイルを、設定 &lt;code&gt;strictMetadataEmit&lt;/code&gt; の活字体の構成ファイル内のオプションを、 &lt;code&gt;tsconfig.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2fa45246f68238edb8ee3d51625ac4a281cc12a" translate="yes" xml:space="preserve">
          <source>If you want &lt;code&gt;ngc&lt;/code&gt; to report syntax errors immediately rather than produce a &lt;code&gt;.metadata.json&lt;/code&gt; file with errors, set the &lt;code&gt;strictMetadataEmit&lt;/code&gt; option in the TypeScript configuration file.</source>
          <target state="translated">エラーのある &lt;code&gt;.metadata.json&lt;/code&gt; ファイルを生成するのではなく、 &lt;code&gt;ngc&lt;/code&gt; が構文エラーをすぐに報告するようにしたい場合は、TypeScript構成ファイルで &lt;code&gt;strictMetadataEmit&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="9181cff9d2f0ac3faceb9204a24748172c73f1ab" translate="yes" xml:space="preserve">
          <source>If you want a particular piece of code to trigger change detection in the AngularJS part of the app, you need to wrap it in &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope.$apply()&lt;/a&gt;. Similarly, for triggering change detection in Angular you would use &lt;a href=&quot;../api/core/ngzone#run&quot;&gt;ngZone.run()&lt;/a&gt;.</source>
          <target state="translated">アプリのAngularJS部分で特定のコードが変更検出をトリガーするようにするには、それを&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope。$ apply（）で&lt;/a&gt;ラップする必要があります。同様に、Angularで変更検出をトリガーするには、&lt;a href=&quot;../api/core/ngzone#run&quot;&gt;ngZone.run（）&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="2c3fae0cd6000e2662a9b617f542c44356a243f5" translate="yes" xml:space="preserve">
          <source>If you want changes to persist, you must write them back to the server.</source>
          <target state="translated">変更を持続させたい場合は、サーバーに書き戻す必要があります。</target>
        </trans-unit>
        <trans-unit id="52bcde3eec9eaea3236dc449439b8e942dbe703e" translate="yes" xml:space="preserve">
          <source>If you want some injectables to be shared among all downgraded modules, you can provide them as &lt;code&gt;&lt;a href=&quot;../../core/staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt;s, when creating the &lt;code&gt;&lt;a href=&quot;../../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; (e.g. via &lt;code&gt;&lt;a href=&quot;../../platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">一部の &lt;code&gt;&lt;a href=&quot;../../core/staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt; をダウングレードされたすべてのモジュール間で共有する場合は、 &lt;code&gt;&lt;a href=&quot;../../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; を作成するときに（たとえば、 &lt;code&gt;&lt;a href=&quot;../../platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../../platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;&lt;/code&gt; を介して）、それらをStaticProviderとして提供できます。</target>
        </trans-unit>
        <trans-unit id="05f65a50533a43590941f359728f24c16a80ebbd" translate="yes" xml:space="preserve">
          <source>If you want to create code-coverage reports every time you test, you can set the following option in the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;:</source>
          <target state="translated">テストのたびにコードカバレッジレポートを作成する場合は、CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; で次のオプションを設定できます。</target>
        </trans-unit>
        <trans-unit id="7751b871f96409ec0fd06919c70ee1e168709cf2" translate="yes" xml:space="preserve">
          <source>If you want to execute something when the app is stable, you have to wait for the application to be stable before starting your polling process.</source>
          <target state="translated">アプリが安定しているときに何かを実行したい場合は、アプリが安定しているのを待ってからポーリング処理を開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="72f364ed3fa3f7c00f99fac9b35717046eda7479" translate="yes" xml:space="preserve">
          <source>If you want to import locale data for other languages, you can do it manually:</source>
          <target state="translated">他の言語のロケールデータをインポートしたい場合は、手動で行うことができます。</target>
        </trans-unit>
        <trans-unit id="4f8bd9d90c1d0e27214fa6232ead13c884e44f0f" translate="yes" xml:space="preserve">
          <source>If you want to manage NgModule loading and the use of dependencies and services, see the following:</source>
          <target state="translated">NgModuleの読み込みや依存関係やサービスの利用を管理したい場合は、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="b1c4888fd74929044c99840ccfb42fc5c433838a" translate="yes" xml:space="preserve">
          <source>If you want to preload a module &lt;em&gt;and&lt;/em&gt; guard against unauthorized access, drop the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; guard method and rely on the &lt;a href=&quot;router#can-activate-guard&quot;&gt;canActivate()&lt;/a&gt; guard alone.</source>
          <target state="translated">モジュールをプリロードして不正アクセス&lt;em&gt;から&lt;/em&gt;保護する場合は、 &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; ガードメソッドを&lt;a href=&quot;router#can-activate-guard&quot;&gt;削除&lt;/a&gt;し、canActivate（）ガードのみに依存します。</target>
        </trans-unit>
        <trans-unit id="1bd8c04744a232665205b0d8c9ce098c53ab9cba" translate="yes" xml:space="preserve">
          <source>If you want to preload a module as well as guard against unauthorized access, remove the &lt;code&gt;canLoad()&lt;/code&gt; guard method and rely on the &lt;a href=&quot;router-tutorial-toh#can-activate-guard&quot;&gt;canActivate()&lt;/a&gt; guard alone.</source>
          <target state="translated">モジュールをプリロードし、不正アクセスから保護する場合は、 &lt;code&gt;canLoad()&lt;/code&gt; ガードメソッドを削除し、&lt;a href=&quot;router-tutorial-toh#can-activate-guard&quot;&gt;canActivate（）&lt;/a&gt;ガードのみに依存します。</target>
        </trans-unit>
        <trans-unit id="e574770511b728920629db82475c655722befaa3" translate="yes" xml:space="preserve">
          <source>If you want to produce a progressive web app and are using &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt; to grade the project, add the following &lt;code&gt;browserslist&lt;/code&gt; entry to your &lt;code&gt;package.json&lt;/code&gt; file, in order to eliminate the &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/old-flexbox&quot;&gt;old flexbox&lt;/a&gt; prefixes:</source>
          <target state="translated">プログレッシブウェブアプリを作成し、&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt;を使用してプロジェクトを評価する場合は、次の &lt;code&gt;browserslist&lt;/code&gt; エントリを &lt;code&gt;package.json&lt;/code&gt; ファイルに追加して、&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/old-flexbox&quot;&gt;古いflexbox&lt;/a&gt;プレフィックスを削除します。</target>
        </trans-unit>
        <trans-unit id="9654c2a4c45b0218af8cbaae154038e0b00ad445" translate="yes" xml:space="preserve">
          <source>If you want to run ES5 code during development, you could disable differential loading completely. To maintain the benefits of differential loading, however, a better option is to define multiple configurations for &lt;code&gt;ng serve&lt;/code&gt;, &lt;code&gt;ng e2e&lt;/code&gt;, and &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">開発中にES5コードを実行する場合は、差分読み込みを完全に無効にすることができます。ただし、差動負荷の利点を維持するには、 &lt;code&gt;ng serve&lt;/code&gt; 、 &lt;code&gt;ng e2e&lt;/code&gt; 、および &lt;code&gt;ng test&lt;/code&gt; に対して複数の構成を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5d7009f42e7627d060101333c56524a2c640bb2d" translate="yes" xml:space="preserve">
          <source>If you want to support such a case, you need to define the &lt;code&gt;macroTask&lt;/code&gt; you want to support in &lt;code&gt;beforeEach()&lt;/code&gt;. For example:</source>
          <target state="translated">そのような場合をサポートしたい場合は、 &lt;code&gt;beforeEach()&lt;/code&gt; でサポートしたい &lt;code&gt;macroTask&lt;/code&gt; を定義する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="1b56e40098d70369a4d83fcac231ca5af8aa5cce" translate="yes" xml:space="preserve">
          <source>If you want to support such a case, you need to define the macro task you want to support in &lt;code&gt;beforeEach()&lt;/code&gt;. For example:</source>
          <target state="translated">このような場合をサポートしたい場合は、 &lt;code&gt;beforeEach()&lt;/code&gt; でサポートしたいマクロタスクを定義する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="f2764b90b69b4cf903c2c31d61b196574003141d" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;strictTemplates&lt;/code&gt; and &lt;code&gt;strictNullChecks&lt;/code&gt; together, you can opt out of strict null type checking specifically for input bindings via &lt;code&gt;strictNullInputTypes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strictTemplates&lt;/code&gt; と &lt;code&gt;strictNullChecks&lt;/code&gt; を一緒に使用する場合は、strictNullInputTypesを介して、特に入力バインディングの &lt;code&gt;strictNullInputTypes&lt;/code&gt; 型チェックをオプトアウトできます。</target>
        </trans-unit>
        <trans-unit id="6c98ab8bb06c1699ee5d9fd496aa7660ad732c8b" translate="yes" xml:space="preserve">
          <source>If you want to use this component from AngularJS, you need to &lt;em&gt;downgrade&lt;/em&gt; it using the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method. The result is an AngularJS &lt;em&gt;directive&lt;/em&gt;, which you can then register in the AngularJS module:</source>
          <target state="translated">AngularJSからこのコンポーネントを使用する場合は、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; （）メソッドを使用してダウン&lt;em&gt;グレード&lt;/em&gt;する必要があります。結果は、AngularJS &lt;em&gt;ディレクティブです&lt;/em&gt;。これは、AngularJSモジュールに登録できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d09a0a0eb3acca8806d03b8b527badb4d19f0b41" translate="yes" xml:space="preserve">
          <source>If you want your template to span multiple lines, you can use backticks (&lt;code&gt; ` &lt;/code&gt;). For example:</source>
          <target state="translated">テンプレートを複数の行にまたがる場合は、バッククォート（ &lt;code&gt; ` &lt;/code&gt; ）を使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="4fb183e6a6ca4b3daf2ebb1dcb39b4bdc36e09a2" translate="yes" xml:space="preserve">
          <source>If you wanted to, you could redefine the &lt;code&gt;AppComponent&lt;/code&gt; template with &lt;em&gt;Crisis Center&lt;/em&gt; routes exclusively:</source>
          <target state="translated">必要に &lt;code&gt;AppComponent&lt;/code&gt; て、&lt;em&gt;Crisis Center&lt;/em&gt;ルートのみを使用してAppComponentテンプレートを再定義できます。</target>
        </trans-unit>
        <trans-unit id="bf62d295b1f1f68706351f1e160a6f3ac4994401" translate="yes" xml:space="preserve">
          <source>If you were to replace &lt;code&gt;useExisting&lt;/code&gt; with &lt;code&gt;useClass&lt;/code&gt;, then you&amp;rsquo;d be registering a new class instance, one that doesn&amp;rsquo;t have a &lt;code&gt;forbiddenName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;useExisting&lt;/code&gt; を &lt;code&gt;useClass&lt;/code&gt; に置き換える場合は、 &lt;code&gt;forbiddenName&lt;/code&gt; を持たない新しいクラスインスタンスを登録することになります。</target>
        </trans-unit>
        <trans-unit id="1a47d1cb386ad250a0bc5d99819cbf7f3ff10e68" translate="yes" xml:space="preserve">
          <source>If you were translating to other languages, you would repeat these steps for each target language.</source>
          <target state="translated">他の言語に翻訳する場合は、ターゲット言語ごとにこの手順を繰り返します。</target>
        </trans-unit>
        <trans-unit id="acd7dfd6b09abe0f861b08835a3b16b4feaacf7e" translate="yes" xml:space="preserve">
          <source>If you were using a real world API, there might be some delay before the data to display is returned from the server. You don't want to display a blank component while waiting for the data.</source>
          <target state="translated">現実世界のAPIを使用していた場合、表示するデータがサーバーから返されるまでに多少の遅延が発生する可能性があります。データを待っている間に空白のコンポーネントを表示するのは避けたいですよね。</target>
        </trans-unit>
        <trans-unit id="9374a8c08fe1c474c361e4aaa7e0f9b479d03bd7" translate="yes" xml:space="preserve">
          <source>If you work behind a corporate proxy, the backend cannot directly proxy calls to any URL outside your local network. In this case, you can configure the backend proxy to redirect calls through your corporate proxy using an agent:</source>
          <target state="translated">企業プロキシを使用している場合、バックエンドはローカルネットワーク外のURLに直接プロキシコールを送信することはできません。この場合、エージェントを使用して企業プロキシを経由してコールをリダイレクトするようにバックエンドのプロキシを設定することができます。</target>
        </trans-unit>
        <trans-unit id="2391ba640bc65fc5eb8023b8dd979ece264d84dd" translate="yes" xml:space="preserve">
          <source>If you write &lt;code&gt;&amp;lt;map [city]=&quot;user.address.city&quot;&amp;gt;&lt;/code&gt;, the compiler verifies the following:</source>
          <target state="translated">&lt;code&gt;&amp;lt;map [city]=&quot;user.address.city&quot;&amp;gt;&lt;/code&gt; と書くと、コンパイラは次のことを確認します。</target>
        </trans-unit>
        <trans-unit id="12d0a113abd4c3fccdbb49cb154c353de7ca8ffc" translate="yes" xml:space="preserve">
          <source>If you wrote something like this:</source>
          <target state="translated">こんなことを書いていたら</target>
        </trans-unit>
        <trans-unit id="21014f48c5ba788700f412d0e8fe50ad6d65a568" translate="yes" xml:space="preserve">
          <source>If you'd like to use something other than &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;, you can configure the interpolation delimiter via the &lt;a href=&quot;../api/core/component#interpolation&quot;&gt;interpolation&lt;/a&gt; option in the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">&lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; 以外のものを使用&lt;a href=&quot;../api/core/component#interpolation&quot;&gt;する&lt;/a&gt;場合は、 &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータの内挿オプションを使用して内挿区切り文字を構成できます。</target>
        </trans-unit>
        <trans-unit id="bf74ecdbbfc67de6df0331823b22e879c6590cb2" translate="yes" xml:space="preserve">
          <source>If you're building with the CLI, you can write style files in &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;, or &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt; and specify those files in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; metadata with the appropriate extensions (&lt;code&gt;.scss&lt;/code&gt;, &lt;code&gt;.less&lt;/code&gt;, &lt;code&gt;.styl&lt;/code&gt;) as in the following example:</source>
          <target state="translated">CLIを使用して構築している場合は、&lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass&lt;/a&gt;、&lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;、または&lt;a href=&quot;http://stylus-lang.com/&quot;&gt;スタイラス&lt;/a&gt;でスタイルファイルを記述し、 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; メタデータで適切な拡張子（ &lt;code&gt;.scss&lt;/code&gt; 、 &lt;code&gt;.less&lt;/code&gt; 、 &lt;code&gt;.styl&lt;/code&gt; ）を使用してこれらのファイルを指定できます。例：</target>
        </trans-unit>
        <trans-unit id="e80d11e637a28a96a2ac8d8109c31270514af284" translate="yes" xml:space="preserve">
          <source>If you're completely new to Angular, you might want to try the &lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;Try it now&lt;/strong&gt;&lt;/a&gt; quick-start app first. It is based on a ready-made partially-completed project, which you can examine and modify in the StackBlitz interactive development environment, where you can see the results in real time.</source>
          <target state="translated">Angularをまったく使用したことがない場合は、最初に「&lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;今&lt;/strong&gt;&lt;/a&gt;すぐ&lt;strong&gt;試す&lt;/strong&gt;」クイックスタートアプリを試して&lt;strong&gt;みること&lt;/strong&gt;をお勧めします。これは、既成の部分的に完成したプロジェクトに基づいており、StackBlitzインタラクティブ開発環境で調査および変更できます。この環境では、結果をリアルタイムで確認できます。</target>
        </trans-unit>
        <trans-unit id="c72a02ff92e827a8fbee6caf4e7a5b90fac5a766" translate="yes" xml:space="preserve">
          <source>If you're deploying to a self-managed server or there's no builder for your favorite cloud platform, you can either create a builder that allows you to use the &lt;code&gt;ng deploy&lt;/code&gt; command, or read through this guide to learn how to manually deploy your app.</source>
          <target state="translated">自己管理サーバーにデプロイする場合、またはお気に入りのクラウドプラットフォーム用のビルダーがない場合は、 &lt;code&gt;ng deploy&lt;/code&gt; コマンドを使用できるようにするビルダーを作成するか、このガイドを読んで手動でアプリをデプロイする方法を学ぶことができます。</target>
        </trans-unit>
        <trans-unit id="6ef5fa39f7f818bc7d60070f619114bc8c792d6e" translate="yes" xml:space="preserve">
          <source>If you're following along with these code snippets, note that you must import the RxJS observable and operator symbols that appear in those snippets. These &lt;code&gt;ConfigService&lt;/code&gt; imports are typical.</source>
          <target state="translated">これらのコードスニペットを使用している場合は、これらのスニペットに表示されるRxJS監視可能シンボルと演算子シンボルをインポートする必要があることに注意してください。これらの &lt;code&gt;ConfigService&lt;/code&gt; インポートは一般的です。</target>
        </trans-unit>
        <trans-unit id="5621695378eed2b9f2b258f1815ee171408f7b7e" translate="yes" xml:space="preserve">
          <source>If you're just reading this tutorial to learn about &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, you can &lt;a href=&quot;toh-pt6#import-heroes&quot;&gt;skip over&lt;/a&gt; this step. If you're coding along with this tutorial, stay here and add the In-memory Web API now.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; について学ぶためにこのチュートリアルを読んでいるだけの場合は&lt;a href=&quot;toh-pt6#import-heroes&quot;&gt;、&lt;/a&gt;この手順をスキップできます。このチュートリアルに沿ってコーディングする場合は、ここにいて、インメモリWeb APIを追加してください。</target>
        </trans-unit>
        <trans-unit id="8c2b83a475d5fdd415759000ce764903884f7b3b" translate="yes" xml:space="preserve">
          <source>If you're new to Angular, see the &lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;Getting Started tutorial.&lt;/strong&gt;&lt;/a&gt; The Getting Started tutorial covers the same major topics as this Tour of Heroes&amp;mdash;components, template syntax, routing, services, and accessing data via HTTP&amp;mdash;in a condensed format, following the most current best practices.</source>
          <target state="translated">Angularを初めて使用する場合は、&lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;入門チュートリアルを&lt;/strong&gt;&lt;/a&gt;ご覧&lt;strong&gt;ください。&lt;/strong&gt;入門チュートリアルでは、最新のベストプラクティスに従って、このヒーローズツアーと同じ主要なトピック（コンポーネント、テンプレート構文、ルーティング、サービス、HTTPを介したデータへのアクセス）を要約形式で扱います。</target>
        </trans-unit>
        <trans-unit id="67ea25a303d22f5bebe608e745f2d7c92d9c27bb" translate="yes" xml:space="preserve">
          <source>If you're new to forms, start by reviewing the &lt;a href=&quot;forms&quot;&gt;Forms&lt;/a&gt; and &lt;a href=&quot;reactive-forms&quot;&gt;Reactive Forms&lt;/a&gt; guides.</source>
          <target state="translated">フォームを初めて使用する場合は、まず&lt;a href=&quot;forms&quot;&gt;フォーム&lt;/a&gt;と&lt;a href=&quot;reactive-forms&quot;&gt;反応フォームの&lt;/a&gt;ガイドを確認してください。</target>
        </trans-unit>
        <trans-unit id="4c7691dbf6e3a09bc8b03a72148e35329112bda1" translate="yes" xml:space="preserve">
          <source>If you're seeing errors, first temporarily &lt;a href=&quot;ivy#opting-out-of-angular-ivy&quot;&gt;turn off Ivy&lt;/a&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt; and re-start your app.</source>
          <target state="translated">エラーが発生した場合は、最初に &lt;code&gt;tsconfig.json&lt;/code&gt; で&lt;a href=&quot;ivy#opting-out-of-angular-ivy&quot;&gt;Ivy&lt;/a&gt;を一時的にオフにして、アプリを再起動します。</target>
        </trans-unit>
        <trans-unit id="611869e2c178bc8e06f9bea14da6d2fc3233f1ae" translate="yes" xml:space="preserve">
          <source>If you're still seeing the errors, they are not specific to Ivy. In this case, you may want to consult the &lt;a href=&quot;updating-to-version-11&quot;&gt;general update guide&lt;/a&gt;. If you've opted into any of the new, stricter type-checking settings, you may also want to check out the &lt;a href=&quot;template-typecheck&quot;&gt;template type-checking guide&lt;/a&gt;.</source>
          <target state="translated">それでもエラーが表示される場合は、Ivyに固有のものではありません。この場合、&lt;a href=&quot;updating-to-version-11&quot;&gt;一般的な更新ガイド&lt;/a&gt;を参照することをお勧めします。新しい、より厳密な型チェック設定のいずれかを選択した場合は、&lt;a href=&quot;template-typecheck&quot;&gt;テンプレートの型チェックガイド&lt;/a&gt;も確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0fc7d26ca33d3f9ccba91fcbfc3ae3f0632834a5" translate="yes" xml:space="preserve">
          <source>If you're testing in an incognito window, open a second blank tab. This will keep the incognito and the cache state alive during your test.</source>
          <target state="translated">インコグニートウィンドウでテストしている場合は、2つ目の空白のタブを開きます。これにより、テスト中はインコグニートとキャッシュの状態が維持されます。</target>
        </trans-unit>
        <trans-unit id="f84e473555acc9f8c96286d3976054a4ce8ac07e" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, you must provide a &lt;a href=&quot;app_base_href&quot;&gt;&lt;code&gt;APP_BASE_HREF&lt;/code&gt;&lt;/a&gt; or add a &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; element to the document.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; を使用している場合は、&lt;a href=&quot;app_base_href&quot;&gt; &lt;code&gt;APP_BASE_HREF&lt;/code&gt; を指定する&lt;/a&gt;か、ドキュメントに &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; basehref &amp;gt;要素を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="e626c7acd05b782e31724065bc7d5d37adec57da" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, you must provide a &lt;a href=&quot;app_base_href&quot;&gt;&lt;code&gt;APP_BASE_HREF&lt;/code&gt;&lt;/a&gt; or add a base element to the document. This URL prefix that will be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; を使用している場合は、&lt;a href=&quot;app_base_href&quot;&gt; &lt;code&gt;APP_BASE_HREF&lt;/code&gt; を指定する&lt;/a&gt;か、ドキュメントに基本要素を追加する必要があります。このURLプレフィックスは、URLを生成および認識するときに保持されます。</target>
        </trans-unit>
        <trans-unit id="3f30bbc0759dc1d64fa256c2ae612a954da0aa58" translate="yes" xml:space="preserve">
          <source>If you're using the CLI, &lt;code&gt;ng update&lt;/code&gt; should &lt;a href=&quot;migration-module-with-providers&quot;&gt;migrate your code automatically&lt;/a&gt;. If you're not using the CLI, you can add any missing generic types to your application manually. For example:</source>
          <target state="translated">CLIを使用している場合、 &lt;code&gt;ng update&lt;/code&gt; は&lt;a href=&quot;migration-module-with-providers&quot;&gt;コードを自動的に移行&lt;/a&gt;する必要があります。CLIを使用していない場合は、不足しているジェネリック型をアプリケーションに手動で追加できます。例えば：</target>
        </trans-unit>
        <trans-unit id="fa080613189cdefb468866b8c597532b9871a918" translate="yes" xml:space="preserve">
          <source>If you've never published a package in npm before, you must create a user account. Read more in &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;Publishing npm Packages&lt;/a&gt;.</source>
          <target state="translated">これまでにnpmでパッケージを公開したことがない場合は、ユーザーアカウントを作成する必要があります。詳しくは、&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;npmパッケージの公開&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="192e8b89a85f5cc6081ab74c317c7b8d1b4b6c1a" translate="yes" xml:space="preserve">
          <source>If your Browserslist configuration includes support for any legacy browsers, the build target in the TypeScript configuration determines whether the build will support differential loading.</source>
          <target state="translated">Browserslist の設定にレガシーブラウザのサポートが含まれている場合、TypeScript の設定にあるビルドターゲットは、ビルドが差分読み込みをサポートするかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="7b10a12a2f9c3567ac4e099dd03881046723129f" translate="yes" xml:space="preserve">
          <source>If your app had many feature areas, the app component trees might look like this:</source>
          <target state="translated">アプリに多くの機能領域がある場合、アプリのコンポーネント ツリーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c4813331be931a7f2a2b0d56270ac5204b124311" translate="yes" xml:space="preserve">
          <source>If your app happens to bootstrap or dynamically load a component &lt;em&gt;by type&lt;/em&gt; in some other manner, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">アプリが別の方法でコンポーネントをブートストラップしたり&lt;em&gt;、タイプ&lt;/em&gt; &lt;code&gt;entryComponents&lt;/code&gt; に動的にロードしたりする場合は、entryComponentsに明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="9aae5606fbeadd60c35706fd07fdcf7e6df68610" translate="yes" xml:space="preserve">
          <source>If your app uses routing, you need to teach the server to always return &lt;code&gt;index.html&lt;/code&gt; when the user asks for an HTML page for reasons explained in the &lt;a href=&quot;deployment#fallback&quot;&gt;Deployment&lt;/a&gt; guide.</source>
          <target state="translated">アプリがルーティングを使用する場合、ユーザーが&lt;a href=&quot;deployment#fallback&quot;&gt;デプロイメント&lt;/a&gt;ガイドで説明されている理由でHTMLページを要求したときに常に &lt;code&gt;index.html&lt;/code&gt; を返すようにサーバーに指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="5042fa1f08d3dcd4e1ea2367cfbbc1aaa6404362" translate="yes" xml:space="preserve">
          <source>If your backend service uses different names for the XSRF token cookie or header, use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientxsrfmodule#withOptions&quot;&gt;HttpClientXsrfModule.withOptions()&lt;/a&gt;&lt;/code&gt; to override the defaults.</source>
          <target state="translated">バックエンドサービスがXSRFトークンのCookieまたはヘッダーに異なる名前を使用している場合は、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientxsrfmodule#withOptions&quot;&gt;HttpClientXsrfModule.withOptions()&lt;/a&gt;&lt;/code&gt; を使用してデフォルトをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="95cc76e94f96c5568597c8ef92eb23b8f2b51d0e" translate="yes" xml:space="preserve">
          <source>If your builder calls another builder, it may need to read a passed target string. You can parse this string into an object by using the &lt;code&gt;targetFromTargetString()&lt;/code&gt; utility function from &lt;code&gt;@angular-devkit/architect&lt;/code&gt;.</source>
          <target state="translated">ビルダーが別のビルダーを呼び出す場合、渡されたターゲット文字列を読み取る必要がある場合があります。 &lt;code&gt;@angular-devkit/architect&lt;/code&gt; の &lt;code&gt;targetFromTargetString()&lt;/code&gt; ユーティリティ関数を使用して、この文字列をオブジェクトに解析できます。</target>
        </trans-unit>
        <trans-unit id="875f3a37dffcb0d70c53bfe9801cfac977a1c2c0" translate="yes" xml:space="preserve">
          <source>If your builder returns an Observable, it should clean up in the teardown logic of that Observable.</source>
          <target state="translated">ビルダーが Observable を返す場合は、その Observable の teardown ロジックをクリーンアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="f683916cf8a11dda2039edae9c97697849fd354d" translate="yes" xml:space="preserve">
          <source>If your installation and setup was successful, you should see a page similar to the following.</source>
          <target state="translated">インストールとセットアップに成功すると、以下のようなページが表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="333ae1afb3d296c7877eaffccff73532b882ea8a" translate="yes" xml:space="preserve">
          <source>If your library code or its templates depend on other libraries (such a Angular Material, for instance), you must configure your library with those dependencies.</source>
          <target state="translated">ライブラリのコードやテンプレートが他のライブラリ(例えば Angular Material など)に依存している場合は、それらの依存関係を考慮してライブラリを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="57fc0eeed0d306a2db798e20abb14abed289e8cc" translate="yes" xml:space="preserve">
          <source>If your library code or its templates depend on other libraries (such as Angular Material, for instance), you must configure your library with those dependencies.</source>
          <target state="translated">ライブラリのコードやテンプレートが他のライブラリ(例えば Angular Material など)に依存している場合は、それらの依存関係を考慮してライブラリを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="14dc0564ebd063d8a83bbddec3a63a2e4959a0d9" translate="yes" xml:space="preserve">
          <source>If your library provides optional services that might not be used by all client applications, support proper tree-shaking for that case by using the &lt;a href=&quot;lightweight-injection-tokens&quot;&gt;lightweight token design pattern&lt;/a&gt;.</source>
          <target state="translated">ライブラリがすべてのクライアントアプリケーションで使用されない可能性のあるオプションのサービスを提供している場合は、&lt;a href=&quot;lightweight-injection-tokens&quot;&gt;軽量トークンデザインパターン&lt;/a&gt;を使用して、その場合の適切なツリーシェイクをサポートします。</target>
        </trans-unit>
        <trans-unit id="3af6c56bc2cbb8e4946e71f47ee9c9fb9c31b970" translate="yes" xml:space="preserve">
          <source>If your structural directive provides a context to the instantiated template, you can properly type it inside the template by providing a static &lt;code&gt;ngTemplateContextGuard&lt;/code&gt; function. The following snippet shows an example of such a function.</source>
          <target state="translated">構造ディレクティブがインスタンス化されたテンプレートにコンテキストを提供する場合、静的 &lt;code&gt;ngTemplateContextGuard&lt;/code&gt; 関数を提供することにより、テンプレート内に適切に入力できます。次のスニペットは、そのような関数の例を示しています。</target>
        </trans-unit>
        <trans-unit id="bc86b4b32c1ba7ddb5fb732813d619704067dcce" translate="yes" xml:space="preserve">
          <source>If your template needs to display different text messages depending on the value of a variable, you need to translate all of those alternative text messages.</source>
          <target state="translated">テンプレートが変数の値によって異なるテキストメッセージを表示する必要がある場合、それらの代替テキストメッセージをすべて翻訳する必要があります。</target>
        </trans-unit>
        <trans-unit id="e6e3128717267a5e06be8d6ef96ba80886bdd514" translate="yes" xml:space="preserve">
          <source>If your tests aren't working as you expect them to, you can inspect and debug them in the browser.</source>
          <target state="translated">テストが期待通りに動作しない場合は、ブラウザでテストを検査したりデバッグしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="e93ea9b6cea140a6464d1b0779bee5174f1506aa" translate="yes" xml:space="preserve">
          <source>If, for some reason, you are not using an &lt;code&gt;@nguniversal/*-engine&lt;/code&gt; package, you may need to handle it yourself.</source>
          <target state="translated">何らかの理由で &lt;code&gt;@nguniversal/*-engine&lt;/code&gt; パッケージを使用していない場合は、自分で処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="64ff3add03a839c971e70ed84614968956996987" translate="yes" xml:space="preserve">
          <source>Ignore the warnings.</source>
          <target state="translated">警告は無視してください。</target>
        </trans-unit>
        <trans-unit id="b2a8f807164b329c0df9d6e96e08d4ec7fe93e8e" translate="yes" xml:space="preserve">
          <source>Ignore: do nothing.</source>
          <target state="translated">無視:何もしない。</target>
        </trans-unit>
        <trans-unit id="852440e173c82baa5ce49593ea14c314bd9d03ea" translate="yes" xml:space="preserve">
          <source>Ignores any animations that are performed when the user first opens or navigates to this page. The filter narrows what is already there, so it assumes that any HTML elements to be animated already exist in the DOM.</source>
          <target state="translated">ユーザーが最初にこのページを開いたとき、あるいはこのページに移動したときに実行されるアニメーションを無視します。このフィルタは既に存在するものを絞り込むので、アニメーションされる HTML 要素が DOM に既に存在すると仮定します。</target>
        </trans-unit>
        <trans-unit id="8b821c78f2fce2425c050c6804d937d1ae4b77c5" translate="yes" xml:space="preserve">
          <source>Illustrating the &quot;pristine&quot; state</source>
          <target state="translated">原始的な」状態をイラストで表現</target>
        </trans-unit>
        <trans-unit id="e535f7686926290a845fe4d42be0c97df203fcb9" translate="yes" xml:space="preserve">
          <source>Image compression</source>
          <target state="translated">画像圧縮</target>
        </trans-unit>
        <trans-unit id="cd2057f0131f9a4e6f1956e4114499c55873edf5" translate="yes" xml:space="preserve">
          <source>Image dimensions</source>
          <target state="translated">画像寸法</target>
        </trans-unit>
        <trans-unit id="132d44a4489514731c7a32cfff5792dd08c9e636" translate="yes" xml:space="preserve">
          <source>Image location</source>
          <target state="translated">画像レンタル</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="9ae8f90b310c8e0aba39397a83acf0bf54cb8fae" translate="yes" xml:space="preserve">
          <source>Images and fonts directly under the configured &lt;code&gt;outputPath&lt;/code&gt; (by default &lt;code&gt;./dist/&amp;lt;project-name&amp;gt;/&lt;/code&gt;) or &lt;code&gt;resourcesOutputPath&lt;/code&gt;. See &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; for more information about these options.</source>
          <target state="translated">設定された &lt;code&gt;outputPath&lt;/code&gt; （デフォルトでは &lt;code&gt;./dist/&amp;lt;project-name&amp;gt;/&lt;/code&gt; ）または &lt;code&gt;resourcesOutputPath&lt;/code&gt; の直下の画像とフォント。これらのオプションの詳細については、&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b68d291250edab27a9181298df02309fd2e3984d" translate="yes" xml:space="preserve">
          <source>Images should be specified in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">画像は &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; タグで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f197407a881860639854b84140d3e15ce892c317" translate="yes" xml:space="preserve">
          <source>Imagine an application that helps the &lt;em&gt;Hero Employment Agency&lt;/em&gt; run its business. Heroes need work and the agency finds crises for them to solve.</source>
          <target state="translated">&lt;em&gt;Hero Employment Agency&lt;/em&gt;がビジネスを運営するのに役立つアプリケーションを想像してみてください。ヒーローは仕事を必要とし、エージェンシーは彼らが解決する危機を見つけます。</target>
        </trans-unit>
        <trans-unit id="480c3b6df4de5ea5f608379d1979bb198fa722ac" translate="yes" xml:space="preserve">
          <source>Imagine one branch of a component hierarchy: &lt;em&gt;Alice&lt;/em&gt; -&amp;gt; &lt;em&gt;Barry&lt;/em&gt; -&amp;gt; &lt;em&gt;Carol&lt;/em&gt;. Both &lt;em&gt;Alice&lt;/em&gt; and &lt;em&gt;Barry&lt;/em&gt; implement the `Parent' class interface.</source>
          <target state="translated">コンポーネント階層の1つのブランチを想像してください：&lt;em&gt;Alice-&lt;/em&gt; &amp;gt; &lt;em&gt;Barry-&lt;/em&gt; &amp;gt; &lt;em&gt;Carol&lt;/em&gt;。&lt;em&gt;アリス&lt;/em&gt;と&lt;em&gt;バリーは&lt;/em&gt;どちらも「親」クラスのインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="926d786c1286080b30759a09b32fbae972285d95" translate="yes" xml:space="preserve">
          <source>Imagine that &lt;code&gt;LoggerService&lt;/code&gt; had a large API, much larger than the actual three methods and a property. You might want to shrink that API surface to just the members you actually need. In this example, the &lt;code&gt;MinimalLogger&lt;/code&gt;&lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;class-interface&lt;/a&gt; reduces the API to two members:</source>
          <target state="translated">&lt;code&gt;LoggerService&lt;/code&gt; に大きなAPIがあり、実際の3つのメソッドとプロパティよりもはるかに大きいと想像してください。そのAPIサーフェスを、実際に必要なメンバーだけに縮小したい場合があります。この例では、 &lt;code&gt;MinimalLogger&lt;/code&gt; &lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;クラスインターフェイス&lt;/a&gt;により、APIが2つのメンバーに削減されます。</target>
        </trans-unit>
        <trans-unit id="4a368b18b59eaf096cd5d55aaf4c6822025e3a9d" translate="yes" xml:space="preserve">
          <source>Imagine that in the child component, you had a different value, &lt;code&gt;🍁&lt;/code&gt; (maple leaf) but you wanted to use the parent's value instead. This is when you'd use &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">子コンポーネントで異なる値 &lt;code&gt;🍁&lt;/code&gt; （カエデの葉）があり、代わりに親の値を使用したいとします。これは、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 使用する場合です。</target>
        </trans-unit>
        <trans-unit id="2ee7873715fc3090e9ad491d7196215a12eb7e13" translate="yes" xml:space="preserve">
          <source>Imagine that you don't want to inject &lt;code&gt;UserService&lt;/code&gt; directly into &lt;code&gt;HeroService&lt;/code&gt;, because you don't want to complicate that service with security-sensitive information. &lt;code&gt;HeroService&lt;/code&gt; won't have direct access to the user information to decide who is authorized and who isn't.</source>
          <target state="translated">あなたが注入したくないことを想像し &lt;code&gt;UserService&lt;/code&gt; のを直接に &lt;code&gt;HeroService&lt;/code&gt; あなたは機密性の高い情報とそのサービスを複雑にしたくないので、。 &lt;code&gt;HeroService&lt;/code&gt; は、誰が許可され、誰が許可されていないかを決定するために、ユーザー情報に直接アクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="d9912f3cc2a458038df837cf86a4c8e01af50ffb" translate="yes" xml:space="preserve">
          <source>Imagine the effort to disable these distractions, just to prove a point that can be made satisfactorily with a &lt;em&gt;test host&lt;/em&gt; like this one:</source>
          <target state="translated">これらの注意散漫を無効にするための取り組みを想像してみてください。このような&lt;em&gt;テストホストで&lt;/em&gt;十分に作成できる点を証明するだけです。</target>
        </trans-unit>
        <trans-unit id="0dcb05aedf3662e3047235d20c9b3a53209ea247" translate="yes" xml:space="preserve">
          <source>Imagine the following malicious content.</source>
          <target state="translated">以下のような悪質な内容を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="70af22099196223b8485c95684bbf8824a9afa2b" translate="yes" xml:space="preserve">
          <source>Immutability</source>
          <target state="translated">Immutability</target>
        </trans-unit>
        <trans-unit id="6e5a32a1bd41d5b21404f176ae361427aff05142" translate="yes" xml:space="preserve">
          <source>Immutable</source>
          <target state="translated">Immutable</target>
        </trans-unit>
        <trans-unit id="569ee13fa32b96c143a875b5c890f64353650f46" translate="yes" xml:space="preserve">
          <source>Implement lifecycle hook interfaces</source>
          <target state="translated">ライフサイクルフックインターフェースの実装</target>
        </trans-unit>
        <trans-unit id="ffb9191c0762a011976a2b595a59e6ed196362d4" translate="yes" xml:space="preserve">
          <source>Implement the &lt;a href=&quot;../api/core/pipetransform&quot;&gt;&lt;code&gt;PipeTransform&lt;/code&gt;&lt;/a&gt; interface in your custom pipe class to perform the transformation.</source>
          <target state="translated">カスタムパイプクラスに&lt;a href=&quot;../api/core/pipetransform&quot;&gt; &lt;code&gt;PipeTransform&lt;/code&gt; &lt;/a&gt;インターフェイスを実装して、変換を実行します。</target>
        </trans-unit>
        <trans-unit id="e3166f82b7179b9d5e343a6c1eee18f1c699887d" translate="yes" xml:space="preserve">
          <source>Implement this callback to add a class to an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOM の要素にクラスを追加します。</target>
        </trans-unit>
        <trans-unit id="577c7009c5183eabdac20b5ae98cf2ede05d4833" translate="yes" xml:space="preserve">
          <source>Implement this callback to add a comment to the DOM of the host element.</source>
          <target state="translated">host 要素の DOM にコメントを追加するために、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="03cf7ca65ecc8c31118b1e6114f8595bc1760a21" translate="yes" xml:space="preserve">
          <source>Implement this callback to add text to the DOM of the host element.</source>
          <target state="translated">ホスト要素の DOM にテキストを追加するために、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="f5bc42dfa7008f7e03d763d440ce48675c0a4f5b" translate="yes" xml:space="preserve">
          <source>Implement this callback to create an instance of the host element.</source>
          <target state="translated">ホスト要素のインスタンスを作成するために、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="a0d9d7c045b4660c412fe767ad1945d44a190961" translate="yes" xml:space="preserve">
          <source>Implement this callback to destroy the renderer or the host element.</source>
          <target state="translated">このコールバックを実装して、レンダラーまたはホスト要素を破棄します。</target>
        </trans-unit>
        <trans-unit id="1c9baa60b18459f8baab069c307bd286cedb293c" translate="yes" xml:space="preserve">
          <source>Implement this callback to get the next sibling node of a given node in the host element's DOM.</source>
          <target state="translated">このコールバックを実装して、ホスト要素の DOM 内で指定されたノードの次の兄弟ノードを取得します。</target>
        </trans-unit>
        <trans-unit id="fdeb7236f29bdbcca4a28a7f60641e8db151e4d5" translate="yes" xml:space="preserve">
          <source>Implement this callback to get the parent of a given node in the host element's DOM.</source>
          <target state="translated">このコールバックを実装して、ホスト要素の DOM 内の指定されたノードの親を取得します。</target>
        </trans-unit>
        <trans-unit id="134030fd845fadd1044c12a523dec32ffc73a9fc" translate="yes" xml:space="preserve">
          <source>Implement this callback to insert a child node at a given position in a parent node in the host element DOM.</source>
          <target state="translated">ホスト要素 DOM の親ノードの指定した位置に子ノードを挿入するために、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="bba6d890df9d055ea2386440926e0760d35d6b14" translate="yes" xml:space="preserve">
          <source>Implement this callback to prepare an element to be bootstrapped as a root element, and return the element instance.</source>
          <target state="translated">このコールバックを実装して、ルート要素としてブートストラップされる要素を準備し、要素のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="ca1ed2bafa9cae106f863767732584ec8416ebed" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove a child node from the host element's DOM.</source>
          <target state="translated">子ノードをホスト要素の DOM から削除するために、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="d323d4a580fdb4dc8916989b8e38d19f0831ebb4" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove a class from an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOM の要素からクラスを削除します。</target>
        </trans-unit>
        <trans-unit id="50a573388aabcf7019870235d46465e72add8981" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove an attribute from an element in the DOM.</source>
          <target state="translated">DOM の要素から属性を削除するために、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="36eb90bfa5ed19d7a1a9ae6ff464b8e1d00e7822" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove the value from a CSS style for an element in the DOM.</source>
          <target state="translated">DOM 内の要素の CSS スタイルから値を削除するために、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="555fb860b7a59c008619fb082a93ee194e1886c7" translate="yes" xml:space="preserve">
          <source>Implement this callback to set a CSS style for an element in the DOM.</source>
          <target state="translated">このコールバックを実装し、DOM 内の要素に CSS スタイルを設定します。</target>
        </trans-unit>
        <trans-unit id="7b1aa6bced0b52983533c898e87d4ea15fb2264a" translate="yes" xml:space="preserve">
          <source>Implement this callback to set an attribute value for an element in the DOM.</source>
          <target state="translated">このコールバックを実装し、DOM の要素に属性値を設定します。</target>
        </trans-unit>
        <trans-unit id="e0fc11b0c038ee4ed0794e274a3324cb43d219c5" translate="yes" xml:space="preserve">
          <source>Implement this callback to set the value of a node in the host element.</source>
          <target state="translated">ホスト要素のノードの値を設定するためのコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="bb15ad08125f75b3cf386d55995af65d420d6eee" translate="yes" xml:space="preserve">
          <source>Implement this callback to set the value of a property of an element in the DOM.</source>
          <target state="translated">DOM 内の要素のプロパティの値を設定するためのコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="59c3759a3daa56cba4ea89b70baf1e4097d64636" translate="yes" xml:space="preserve">
          <source>Implement this callback to start an event listener.</source>
          <target state="translated">イベントリスナーを起動するためのコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="4a6751f61ff0fba38731f86b6104c29d3704780e" translate="yes" xml:space="preserve">
          <source>Implement this interface to create a custom form control directive that integrates with Angular forms.</source>
          <target state="translated">Angularフォームと統合したカスタムフォームコントロールディレクティブを作成するためのインターフェイスを実装します。</target>
        </trans-unit>
        <trans-unit id="21c4d35ad75af1e5854d9c5288b3b50d18350a45" translate="yes" xml:space="preserve">
          <source>Implementing Custom Async Validator</source>
          <target state="translated">カスタム非同期バリデータの実装</target>
        </trans-unit>
        <trans-unit id="c0bdb7edcf97857a7cf5d9afdad73552296e66b0" translate="yes" xml:space="preserve">
          <source>Implementing a custom async validator</source>
          <target state="translated">カスタムの非同期バリデータの実装</target>
        </trans-unit>
        <trans-unit id="28243ccf2d1e04cdb0f4eea07160bd6fba54a67c" translate="yes" xml:space="preserve">
          <source>Implements Angular's core functionality, low-level services, and utilities.</source>
          <target state="translated">Angularのコア機能、低レベルのサービス、ユーティリティを実装しています。</target>
        </trans-unit>
        <trans-unit id="1740cef38e5186da8de62ac9e31ab0bf9006ec4e" translate="yes" xml:space="preserve">
          <source>Implements Angular's custom-element API, which enables you to package components as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt;.</source>
          <target state="translated">Angularのカスタム要素APIを実装します。これにより、コンポーネントを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素&lt;/a&gt;としてパッケージ化できます。</target>
        </trans-unit>
        <trans-unit id="18cc1a97ca823e213e9814192dbdd3119bf93a10" translate="yes" xml:space="preserve">
          <source>Implements a domain-specific language (DSL) for defining web animation sequences for HTML elements as multiple transformations over time.</source>
          <target state="translated">HTML 要素のウェブアニメーションシーケンスを、時間の経過とともに複数の変換として定義するためのドメイン固有の言語 (DSL)を実装します。</target>
        </trans-unit>
        <trans-unit id="975968eede10c072691f7af0d54dd2799c41ab94" translate="yes" xml:space="preserve">
          <source>Implements a service worker for Angular apps. Adding a service worker to an Angular app is one of the steps for turning it into a Progressive Web App (also known as a PWA).</source>
          <target state="translated">Angularアプリのサービスワーカーを実装します。Angularアプリにサービスワーカーを追加することは、プログレッシブWebアプリ(PWAとも呼ばれる)にするためのステップの1つです。</target>
        </trans-unit>
        <trans-unit id="f7bebe0232fe9f34fb464a7863f9d6804c6723a6" translate="yes" xml:space="preserve">
          <source>Implements a set of directives and providers to communicate with native DOM elements when building forms to capture user input.</source>
          <target state="translated">ユーザーの入力を取り込むためにフォームを作成する際にネイティブの DOM 要素と通信するためのディレクティブとプロバイダのセットを実装します。</target>
        </trans-unit>
        <trans-unit id="4b32fab568e6f74138e5d102955133034be90ff5" translate="yes" xml:space="preserve">
          <source>Implements an &lt;code&gt;ngDoCheck()&lt;/code&gt; method with custom change detection. See how often Angular calls this hook and watch it post changes to a log.</source>
          <target state="translated">カスタム変更検出を備えた &lt;code&gt;ngDoCheck()&lt;/code&gt; メソッドを実装します。Angularがこのフックを呼び出す頻度を確認し、変更がログにポストされるのを確認してください。</target>
        </trans-unit>
        <trans-unit id="5bd7689d46e5b12bf1f904331f09df5b9e867cb3" translate="yes" xml:space="preserve">
          <source>Implements an HTTP client API for Angular apps that relies on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface exposed by browsers.</source>
          <target state="translated">ブラウザーによって公開される &lt;code&gt;XMLHttpRequest&lt;/code&gt; インターフェイスに依存するAngularアプリ用のHTTPクライアントAPIを実装します。</target>
        </trans-unit>
        <trans-unit id="0f6cbc91e3625eeea332217fda3f6cdf01f146c8" translate="yes" xml:space="preserve">
          <source>Implements an iterable interface, therefore it can be used in both ES6 javascript &lt;code&gt;for (var i of items)&lt;/code&gt; loops as well as in Angular templates with &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let i of myList&quot;&lt;/code&gt;.</source>
          <target state="translated">反復可能なインターフェースを実装するため、ES6のJavaScript &lt;code&gt;for (var i of items)&lt;/code&gt; ループと &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let i of myList&quot;&lt;/code&gt; を使用したAngularテンプレートの両方で使用できます。</target>
        </trans-unit>
        <trans-unit id="ce097c59bce28c3d2b175a67db71e336843e0494" translate="yes" xml:space="preserve">
          <source>Implements basic Angular directives and pipes, such as NgIf, NgForOf, DecimalPipe, and so on.</source>
          <target state="translated">NgIf,NgForOf,DecimalPipeなどの基本的なAngularディレクティブやパイプを実装します。</target>
        </trans-unit>
        <trans-unit id="2351e708261f2053ab218553d2efe10bd33f3716" translate="yes" xml:space="preserve">
          <source>Implements fundamental Angular framework functionality, including directives and pipes, location services used in routing, HTTP services, localization support, and so on.</source>
          <target state="translated">ディレクティブやパイプ、ルーティングで使用されるロケーションサービス、HTTPサービス、ローカリゼーションのサポートなど、Angularフレームワークの基本的な機能を実装しています。</target>
        </trans-unit>
        <trans-unit id="58efc13dfdbddc59a6ed790f4530168ed9884583" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;ngDoCheck()&lt;/code&gt; method with custom change detection. Watch the hook post changes to a log to see how often Angular calls this hook.</source>
          <target state="translated">カスタム変更検出を使用して &lt;code&gt;ngDoCheck()&lt;/code&gt; メソッドを実装します。フックポストがログに変更されるのを見て、Angularがこのフックを呼び出す頻度を確認してください。</target>
        </trans-unit>
        <trans-unit id="d9bdfd53eb804076b673eff6ed90636bddf4f862" translate="yes" xml:space="preserve">
          <source>Implements the Angular Router service , which enables navigation from one view to the next as users perform application tasks.</source>
          <target state="translated">ユーザーがアプリケーションタスクを実行する際に、1つのビューから次のビューへのナビゲーションを可能にする Angular Router サービスを実装しています。</target>
        </trans-unit>
        <trans-unit id="a92aec084fd1d304417af86c26c892bf2549ddb2" translate="yes" xml:space="preserve">
          <source>Implements the functionality needed for a custom element.</source>
          <target state="translated">カスタム要素に必要な機能を実装します。</target>
        </trans-unit>
        <trans-unit id="2582b4c30d27c0a060dad9d9e2d031711195f67c" translate="yes" xml:space="preserve">
          <source>Implicit, created by directives</source>
          <target state="translated">暗黙的に、ディレクティブによって作成されます。</target>
        </trans-unit>
        <trans-unit id="26fb786f09465d1d0559a46e5842f496183733aa" translate="yes" xml:space="preserve">
          <source>Implied by promise resolution.</source>
          <target state="translated">約束の解決によって暗示される。</target>
        </trans-unit>
        <trans-unit id="568d13bdb851bce85938a6391267ed336fc53a69" translate="yes" xml:space="preserve">
          <source>Import &lt;a href=&quot;ngmodule-faq#q-browser-vs-common-module&quot;&gt;BrowserModule&lt;/a&gt; only in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; にのみ&lt;a href=&quot;ngmodule-faq#q-browser-vs-common-module&quot;&gt;BrowserModuleを&lt;/a&gt;インポートします。</target>
        </trans-unit>
        <trans-unit id="0f742f1b5efa266c3528e372a7535ae4f8d7abfb" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;パッケージから &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="c480c63f6212aebe6f4eeb21595cbebe365b2e21" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; package at the top of the file with the other imports. As there are a number of other imports, this code snippet omits them for brevity. Be sure to leave the existing imports in place.</source>
          <target state="translated">他のインポートとともに、ファイルの先頭にある &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;パッケージから &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートします。他にも多くのインポートがあるため、このコードスニペットでは簡潔にするためにそれらを省略しています。必ず既存のインポートをそのままにしておいてください。</target>
        </trans-unit>
        <trans-unit id="b4a640252aff8611ffd100e6d553596024dc2232" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;パッケージから &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="db1318647a94b0878ebad6624d74ed324806e391" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; in the child component class:</source>
          <target state="translated">子コンポーネントクラスに &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="15c4f41e277258769c0a0df5aa685cd02c57d1f7" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt; if your components have &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; two-way binding expressions.</source>
          <target state="translated">コンポーネントに &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; &lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;）]双方向バインディング式がある場合は、 &lt;code&gt;@angular/forms&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="8d73845fe8377c59bacd2d1ab426a96ffca230bf" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">インポート &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; は、使用する &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="78a45ea4a26ee0f0dd7af27e0a27299f67d70efd" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt;, which introduces the animation capabilities into your Angular root application module.</source>
          <target state="translated">Angularルートアプリケーションモジュールにアニメーション機能を導入する &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="352357fecdfec53327503352c52cf046f13b707c" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; to your component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; をコンポーネントにインポートします。</target>
        </trans-unit>
        <trans-unit id="9bbd5188871ef20fa807f263a6fcc71ea078f98d" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt; package, and the &lt;code&gt;products&lt;/code&gt; array from &lt;code&gt;../products&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/router&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; をインポートし、 &lt;code&gt;../products&lt;/code&gt; / &lt;code&gt;products&lt;/code&gt; から製品の配列をインポートします。</target>
        </trans-unit>
        <trans-unit id="6f12799296738ca1edfd6212d2a0f1ed1c4bb38b" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; into your routing module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; をルーティングモジュールにインポートします。</target>
        </trans-unit>
        <trans-unit id="f9dc372cd0ffd6143fbc7365768919e6aaef1084" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/router&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@angular/router&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; をインポートします</target>
        </trans-unit>
        <trans-unit id="438e3ddee4912def34ac11f57a93ce076783f46e" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/core&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="ba4323afb2767c261fa10794db535d2c4b34bb19" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;@angular/core&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="29ea81b3ca52ff6ccaed6e2c7a98e218c8668bbe" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to use the Router service in your app. For more usage information, see the &lt;a href=&quot;../guide/router&quot;&gt;Routing and Navigation&lt;/a&gt; guide.</source>
          <target state="translated">アプリでルーターサービスを使用するには、 &lt;code&gt;&lt;a href=&quot;router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; をインポートします。使用方法の詳細については、&lt;a href=&quot;../guide/router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="378da8def68b035dc56d150d5c3f316640430460" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;AppServerModuleNgFactory&lt;/code&gt; from the &lt;code&gt;app.server.module.ngfactory&lt;/code&gt; virtual file.</source>
          <target state="translated">&lt;code&gt;app.server.module.ngfactory&lt;/code&gt; 仮想ファイルから &lt;code&gt;AppServerModuleNgFactory&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="fea0622df7e35e3d25926c1db11132831d661da2" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FormsModule&lt;/code&gt; をインポート</target>
        </trans-unit>
        <trans-unit id="b2f696d4d9afce8de6cbc91e4145a3e2c8ec8ee4" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; into &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; を &lt;code&gt;AppRoutingModule&lt;/code&gt; にインポートします。</target>
        </trans-unit>
        <trans-unit id="ffeed5ccfb791ceee55f7360554286bcadd6091b" translate="yes" xml:space="preserve">
          <source>Import &lt;em&gt;shared&lt;/em&gt; and &lt;em&gt;feature&lt;/em&gt; modules when this module's components incorporate their components, directives, and pipes.</source>
          <target state="translated">このモジュールのコンポーネントにコンポーネント、ディレクティブ、パイプが組み込まれている場合は、&lt;em&gt;共有&lt;/em&gt;モジュールと&lt;em&gt;機能&lt;/em&gt;モジュールをインポート&lt;em&gt;し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="fcb63212ad3831fc17aec3ffcf8d331ecd00b985" translate="yes" xml:space="preserve">
          <source>Import NgModules whose public (exported) &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable classes&lt;/a&gt; you need to reference in this module's component templates.</source>
          <target state="translated">このモジュールのコンポーネントテンプレートで参照する必要があるパブリック（エクスポートされた）&lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;宣言可能なクラス&lt;/a&gt;を持つNgModuleをインポートします。</target>
        </trans-unit>
        <trans-unit id="04ceef49142e281571f7a59729fdddb7c109183a" translate="yes" xml:space="preserve">
          <source>Import a domain NgModule exactly once into another NgModule, such as a domain NgModule, or into the root NgModule (&lt;code&gt;AppModule&lt;/code&gt;) of an app that contains only a few NgModules.</source>
          <target state="translated">ドメインNgModuleをドメインNgModuleなどの別のNgModuleに、または少数のNgModuleのみを含むアプリのルートNgModule（ &lt;code&gt;AppModule&lt;/code&gt; ）に1回だけインポートします。</target>
        </trans-unit>
        <trans-unit id="f1f2839eab72da958afeb3a4698c2ccac390a557" translate="yes" xml:space="preserve">
          <source>Import a feature module</source>
          <target state="translated">フィーチャーモジュールのインポート</target>
        </trans-unit>
        <trans-unit id="d2c025183c7eeec9309814c88e2a9cdf1b259bbc" translate="yes" xml:space="preserve">
          <source>Import a routing NgModule only into its companion NgModule. If the companion NgModule is the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;AppRoutingModule&lt;/code&gt; adds router configuration to its imports with &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;. All other routing NgModules are children that import &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt;.</source>
          <target state="translated">ルーティングNgModuleをそのコンパニオンNgModuleにのみインポートします。コンパニオンNgModuleがルートである場合 &lt;code&gt;AppModule&lt;/code&gt; 、 &lt;code&gt;AppRoutingModule&lt;/code&gt; はとの輸入にルータの設定を追加します &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; 。他のすべてのルーティングNgModuleは、 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; をインポートする子です。</target>
        </trans-unit>
        <trans-unit id="2547f241c308c031518bf3f1c55b103af9729c3c" translate="yes" xml:space="preserve">
          <source>Import a scoped package in the same way that you import a normal package.</source>
          <target state="translated">スコープされたパッケージを、通常のパッケージをインポートするのと同じ方法でインポートします。</target>
        </trans-unit>
        <trans-unit id="98c0c896fabb3fc1a98419d0cde75db05d6430f1" translate="yes" xml:space="preserve">
          <source>Import a shared module</source>
          <target state="translated">共有モジュールのインポート</target>
        </trans-unit>
        <trans-unit id="1be630c78b766b9bfc94f1c5ca957111764f2798" translate="yes" xml:space="preserve">
          <source>Import a validator function in your form component.</source>
          <target state="translated">フォームコンポーネントにバリデータ関数をインポートします。</target>
        </trans-unit>
        <trans-unit id="301c1658c4350b2d60d09948ca85c6196aed28d1" translate="yes" xml:space="preserve">
          <source>Import and add the &lt;code&gt;HeroDetailComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt; to the &lt;code&gt;declarations&lt;/code&gt; array in the &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; と &lt;code&gt;HeroListComponent&lt;/code&gt; をインポートし、HeroesModuleの &lt;code&gt;declarations&lt;/code&gt; 配列に &lt;code&gt;HeroesModule&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d8ca796a8e658eeeab1bd1e834d4a664c92619c7" translate="yes" xml:space="preserve">
          <source>Import crisis center module into the &lt;code&gt;AppModule&lt;/code&gt; routes</source>
          <target state="translated">危機センターモジュールを &lt;code&gt;AppModule&lt;/code&gt; ルートにインポートする</target>
        </trans-unit>
        <trans-unit id="4d7b5a83713e856ce30b92012a4b00341ee61e76" translate="yes" xml:space="preserve">
          <source>Import global variants of the locale data</source>
          <target state="translated">ロケールデータのグローバルなバリアントをインポート</target>
        </trans-unit>
        <trans-unit id="a526dbed5b0f6c824f5d7a0643b8d713cf803b67" translate="yes" xml:space="preserve">
          <source>Import it from</source>
          <target state="translated">からのインポート</target>
        </trans-unit>
        <trans-unit id="d8154fd791df3beb7ab66f72f5ba6f3d510c808c" translate="yes" xml:space="preserve">
          <source>Import it into the appropriate module.</source>
          <target state="translated">適切なモジュールにインポートします。</target>
        </trans-unit>
        <trans-unit id="a6810958c8daa7a96c72da65b232b80dd64c7181" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator (instead of the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator).</source>
          <target state="translated">（ &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータの代わりに） &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレータをインポートします。</target>
        </trans-unit>
        <trans-unit id="050ba3274203d622f3595bab0a8e5dd2c4cc5deb" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; symbols; you'll need them for &lt;em&gt;any&lt;/em&gt; structural directive.</source>
          <target state="translated">インポート &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; のシンボルを、あなたはそれらを必要があります&lt;em&gt;任意の&lt;/em&gt;構造的なディレクティブ。</target>
        </trans-unit>
        <trans-unit id="e9c23b8c549ecba1a1c10a72bc128051038d670e" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; class from &lt;code&gt;@angular/forms&lt;/code&gt; to use for type information. The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is ready to create a &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">タイプ情報に使用する &lt;code&gt;@angular/forms&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; クラスをインポートします。 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; のサービスを作成する準備ができている &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のインスタンスを。</target>
        </trans-unit>
        <trans-unit id="92f9ac3c714a7700d00a99c56956a7e1f3d62f58" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="e331c6fc4a9ff134af60b891774820b42da2edbc" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; class from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="773ffa7003e87f00942ce0c9d6c491f40289c3fb" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="6cc9c61e025989b9b55d14be9d8b9c70af1b9fc4" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; / FormsパッケージからFormBuilderサービスをインポートします。</target>
        </trans-unit>
        <trans-unit id="cdcf4dcbdeddf625623188d87e4fefc41dd00403" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="9ee21c30a536f294238a29e1d4bea732f6f4ae02" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; tokens from the router package.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; れた &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; 、およびParamMapトークンをルーターパッケージからインポートします。</target>
        </trans-unit>
        <trans-unit id="686b0adef0de155a88d75b0bde6fbed3829d7341" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your top level &lt;a href=&quot;../../core/ngmodule&quot;&gt;Angular `NgModule`&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; を最上位の&lt;a href=&quot;../../core/ngmodule&quot;&gt;Angular `NgModule`に&lt;/a&gt;インポートします。</target>
        </trans-unit>
        <trans-unit id="b85dd077949ee00c90306c755fc5f7d11a648b41" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;AppRoutingModule&lt;/code&gt; into &lt;code&gt;AppModule&lt;/code&gt; and add it to the &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; を &lt;code&gt;AppModule&lt;/code&gt; にインポートし、それを &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="0e1cedd5069238c18718cd52f3d74737564819a6" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;CartService&lt;/code&gt; from the &lt;code&gt;cart.service.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;cart.service.ts&lt;/code&gt; ファイルから &lt;code&gt;CartService&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="9d8c5fb1b2237d87ff7cd78a6f3f8b61baca81de" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;CrisisListComponent&lt;/code&gt;, &lt;code&gt;HeroListComponent&lt;/code&gt;, and &lt;code&gt;PageNotFoundComponent&lt;/code&gt; symbols just like you did in the &lt;code&gt;app.module.ts&lt;/code&gt;. Then move the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; imports and routing configuration, including &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;, into this routing module.</source>
          <target state="translated">インポート &lt;code&gt;CrisisListComponent&lt;/code&gt; 、 &lt;code&gt;HeroListComponent&lt;/code&gt; 、および &lt;code&gt;PageNotFoundComponent&lt;/code&gt; のシンボルあなたにやっただけのよう &lt;code&gt;app.module.ts&lt;/code&gt; 。次に、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; インポートと &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; を含むルーティング構成をこのルーティングモジュールに移動します。</target>
        </trans-unit>
        <trans-unit id="817cc00c391e59b9be4fb99905645f2cf9d9b070" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;DashboardComponent&lt;/code&gt; in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; に &lt;code&gt;DashboardComponent&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="d891b2d94c07cfdb42e46213e234080c12a97992" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;Hero&lt;/code&gt; and &lt;code&gt;HEROES&lt;/code&gt;.</source>
          <target state="translated">インポート &lt;code&gt;Hero&lt;/code&gt; と &lt;code&gt;HEROES&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df33ccfbc6cae37532f2258ca69433e9f6f71ae9" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="dfb4992a4374e8dc70168e213e70e9f20129c7fe" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;SharedModule&lt;/code&gt; in your &lt;em&gt;feature&lt;/em&gt; modules, both those loaded when the app starts and those you lazy load later.</source>
          <target state="translated">&lt;code&gt;SharedModule&lt;/code&gt; を&lt;em&gt;機能&lt;/em&gt;モジュールにインポートします。これは、アプリの起動時に読み込まれるものと、後で遅延読み込みされるものの両方です。</target>
        </trans-unit>
        <trans-unit id="e3f7d1044aa8460beba08aa7ce9ae927fdb4849c" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;catchError&lt;/code&gt; symbol from &lt;code&gt;rxjs/operators&lt;/code&gt;, along with some other operators you'll need later.</source>
          <target state="translated">&lt;code&gt;rxjs/operators&lt;/code&gt; から &lt;code&gt;catchError&lt;/code&gt; シンボルをインポートします。後で必要になる他のいくつかの演算子も一緒にインポートします。</target>
        </trans-unit>
        <trans-unit id="d41e2af4e0f9d40ee19656d61d24f3e6c1da5575" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;switchMap&lt;/code&gt; operator because you need it later to process the &lt;code&gt;Observable&lt;/code&gt; route parameters.</source>
          <target state="translated">&lt;code&gt;switchMap&lt;/code&gt; &lt;code&gt;Observable&lt;/code&gt; ルートパラメータを処理するために必要になるため、switchMap演算子をインポートします。</target>
        </trans-unit>
        <trans-unit id="3a18d1695f508fdb02f8c454df1c248c094d7b2f" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;switchMap&lt;/code&gt; operator to perform an operation on the &lt;code&gt;Observable&lt;/code&gt; of route parameter map.</source>
          <target state="translated">&lt;code&gt;switchMap&lt;/code&gt; オペレーターをインポートして、 &lt;code&gt;Observable&lt;/code&gt; of routeパラメーターマップで操作を実行します。</target>
        </trans-unit>
        <trans-unit id="d43444878db13fcb283c40d8be13224eada6b8e0" translate="yes" xml:space="preserve">
          <source>Import the appropriate language translation file as a string constant.</source>
          <target state="translated">適切な言語翻訳ファイルを文字列定数としてインポートします。</target>
        </trans-unit>
        <trans-unit id="89a6ca85268363383daef55ec399cdadb37634d3" translate="yes" xml:space="preserve">
          <source>Import the cart service.</source>
          <target state="translated">カートサービスをインポートします。</target>
        </trans-unit>
        <trans-unit id="070bfc8700bcdc05ea975d46b92b9598f201fffa" translate="yes" xml:space="preserve">
          <source>Import the defined schema interface that provides the type information for your schematic's options.</source>
          <target state="translated">回路図のオプションのタイプ情報を提供する定義済みスキーマインターフェースをインポートします。</target>
        </trans-unit>
        <trans-unit id="c4871a12d8b10b0a07d1e0cdc5dfb8d463cfc5f3" translate="yes" xml:space="preserve">
          <source>Import the feature area NgModule into the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">インポート機能領域にNgModule &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42b7a45134de162ef0f09f141c0fbcd920dd4711" translate="yes" xml:space="preserve">
          <source>Import the hero components from their new locations in the &lt;code&gt;src/app/heroes/&lt;/code&gt; folder and define the two hero routes.</source>
          <target state="translated">ヒーローコンポーネントを &lt;code&gt;src/app/heroes/&lt;/code&gt; フォルダーの新しい場所からインポートし、2つのヒーロールートを定義します。</target>
        </trans-unit>
        <trans-unit id="33f2a24119b9f7ce0e76c5987bc26dfad28027be" translate="yes" xml:space="preserve">
          <source>Import the hero components from their new locations in the &lt;code&gt;src/app/heroes/&lt;/code&gt; folder, define the two hero routes.</source>
          <target state="translated">&lt;code&gt;src/app/heroes/&lt;/code&gt; フォルダーの新しい場所からヒーローコンポーネントをインポートし、2つのヒーロールートを定義します。</target>
        </trans-unit>
        <trans-unit id="5bc40a5fef2a78698029cd1054594de418f9b5e0" translate="yes" xml:space="preserve">
          <source>Import the routing module into the application and create a routing configuration that defines the possible routes.</source>
          <target state="translated">ルーティングモジュールをアプリケーションにインポートし、可能なルートを定義するルーティング設定を作成します。</target>
        </trans-unit>
        <trans-unit id="a46b7288ec43274590d4dd5dc8714f1e9dcd9766" translate="yes" xml:space="preserve">
          <source>Import this module at the root of your application so that Angular can work with HammerJS to detect gesture events.</source>
          <target state="translated">このモジュールをアプリケーションのルートにインポートして、AngularがHammerJSでジェスチャーイベントを検出できるようにします。</target>
        </trans-unit>
        <trans-unit id="f9d1848dcd28345f99c78b328167a595cb31adbb" translate="yes" xml:space="preserve">
          <source>Import this resolver in the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; and add a &lt;code&gt;&lt;a href=&quot;../api/router/route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; object to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; route configuration.</source>
          <target state="translated">このリゾルバーを &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; インポートし、 &lt;code&gt;&lt;a href=&quot;../api/router/route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; オブジェクトを &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ルート構成に追加します。</target>
        </trans-unit>
        <trans-unit id="c9a38ebeeddaeaf5236d69826e1b8200c968d798" translate="yes" xml:space="preserve">
          <source>Import this resolver in the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; and add a &lt;code&gt;resolve&lt;/code&gt; object to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; route configuration.</source>
          <target state="translated">このリゾルバーを &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; にインポートし、 &lt;code&gt;resolve&lt;/code&gt; オブジェクトを &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ルート構成に追加します。</target>
        </trans-unit>
        <trans-unit id="3d353b4a94d95b503455bd4b11f19b1ff8a01486" translate="yes" xml:space="preserve">
          <source>Import this resolver into your module's routing module.</source>
          <target state="translated">このリゾルバをモジュールのルーティングモジュールにインポートします。</target>
        </trans-unit>
        <trans-unit id="7a061c456d72a9a382bb6f470489d23ae0404d27" translate="yes" xml:space="preserve">
          <source>Import what you need from it as you would from any other Angular package.</source>
          <target state="translated">他のAngularパッケージと同じように必要なものをインポートします。</target>
        </trans-unit>
        <trans-unit id="f1ec2e5b75cafd71f4d2cf17bbe28874aadd8762" translate="yes" xml:space="preserve">
          <source>Import widget modules in any module whose component templates need the widgets.</source>
          <target state="translated">コンポーネントテンプレートがウィジェットを必要とするモジュールのウィジェットモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="8834a6fc5ae307bddfaa532d30816daae0c4e180" translate="yes" xml:space="preserve">
          <source>Important options include the &lt;em&gt;observe&lt;/em&gt; and &lt;em&gt;responseType&lt;/em&gt; properties.</source>
          <target state="translated">重要なオプションには、&lt;em&gt;observe&lt;/em&gt;プロパティと&lt;em&gt;responseType&lt;/em&gt;プロパティが含まれます。</target>
        </trans-unit>
        <trans-unit id="473b18365dce3edd8127f1624f5b4519efa7841b" translate="yes" xml:space="preserve">
          <source>Importantly, it doesn't check embedded views, such as &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, other &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; embedded view.</source>
          <target state="translated">重要なのは、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 、その他の &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 埋め込みビューなどの埋め込みビューをチェックしないことです。</target>
        </trans-unit>
        <trans-unit id="4ebe828e74096e229b55fc62674259b224c8b59f" translate="yes" xml:space="preserve">
          <source>Imported by</source>
          <target state="translated">輸入元</target>
        </trans-unit>
        <trans-unit id="ca029c525e020e030b5763e634cdfa9684f0ec75" translate="yes" xml:space="preserve">
          <source>Imported providers are easily replaced by providers from another imported NgModule. Such replacement might be by design. It could be unintentional and have adverse consequences.</source>
          <target state="translated">インポートされたプロバイダは、別のインポートされた NgModule のプロバイダで簡単に置き換えられます。このような置き換えは意図的なものかもしれません。それは意図しないものであり、悪影響を及ぼす可能性があります。</target>
        </trans-unit>
        <trans-unit id="4c410a4e7ce454cc0a669f85789fcc7292be2656" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; also frees feature modules for use on &lt;em&gt;any&lt;/em&gt; target platform, not just browsers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートすると、機能モジュールが解放され&lt;em&gt;、&lt;/em&gt;ブラウザだけでなく、&lt;em&gt;あらゆる&lt;/em&gt;ターゲットプラットフォームで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="0926c5352a1ed8fd6d4008f3a9505f53d26d0c72" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; into your &lt;code&gt;AppModule&lt;/code&gt; doesn't just register the service worker, it also provides a few services you can use to interact with the service worker and control the caching of your app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; をAppModuleにインポートすると、 &lt;code&gt;AppModule&lt;/code&gt; が登録されるだけでなく、Service Workerとのやり取りやアプリのキャッシュの制御に使用できるいくつかのサービスも提供されます。</target>
        </trans-unit>
        <trans-unit id="bf8398dc7932850ef3407d2abc867f5242eaa718" translate="yes" xml:space="preserve">
          <source>Importing a feature module</source>
          <target state="translated">フィーチャーモジュールのインポート</target>
        </trans-unit>
        <trans-unit id="b15db4d28a6b8ab83dd5b14c0f07467630615c89" translate="yes" xml:space="preserve">
          <source>Importing a module does &lt;em&gt;not&lt;/em&gt; automatically re-export the imported module's imports. Module 'B' can't use &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; just because it imported module 'A' which imported &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;. Module 'B' must import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; itself.</source>
          <target state="translated">モジュールをインポートしても、インポートされたモジュールのインポート&lt;em&gt;は&lt;/em&gt;自動的には再エクスポートされませ&lt;em&gt;ん&lt;/em&gt;。モジュール「B」は使用できません &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を、それがインポートされたモジュール「A」にインポートという理由だけで &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; を。モジュール「B」は &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 自体をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="50f4da678c72bbf5ccb3812d54bcbc40fe9377ba" translate="yes" xml:space="preserve">
          <source>Importing modules</source>
          <target state="translated">モジュールのインポート</target>
        </trans-unit>
        <trans-unit id="6c6759a5009501ce940b68c3c6c4d0a88982af01" translate="yes" xml:space="preserve">
          <source>Importing the component's feature module can be the easiest way to configure tests when there are many mutual dependencies within the module and the module is small, as feature modules tend to be.</source>
          <target state="translated">コンポーネントの機能モジュールをインポートすることは、モジュール内に多くの相互依存関係があり、機能モジュールが小さくなりがちな場合に、テストを構成するための最も簡単な方法となります。</target>
        </trans-unit>
        <trans-unit id="21270ddcd2b8b36dcd36ba9dc2e65ba937443e00" translate="yes" xml:space="preserve">
          <source>Importing the feature area NgModule into the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">機能エリアNgModuleをインポート &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a3c1a6c640cbb3ff72c5cdbdda365799c5166c1" translate="yes" xml:space="preserve">
          <source>Importing your new components</source>
          <target state="translated">新しいコンポーネントのインポート</target>
        </trans-unit>
        <trans-unit id="2dc45a2a577a313a667ab95b3f67c568aecf86f0" translate="yes" xml:space="preserve">
          <source>Imports and registers the service worker in the app module.</source>
          <target state="translated">アプリモジュールのサービスワーカーをインポートして登録します。</target>
        </trans-unit>
        <trans-unit id="a83a0fc0cd6287cabf3642ac5ae77c9a4a861c22" translate="yes" xml:space="preserve">
          <source>Imports and route configuration</source>
          <target state="translated">インポートとルート設定</target>
        </trans-unit>
        <trans-unit id="3814cab387da7b9062d6ab2735ba73f5e9829045" translate="yes" xml:space="preserve">
          <source>Imports other modules with the components, directives, and pipes that components in the current module need.</source>
          <target state="translated">現在のモジュールのコンポーネントが必要とするコンポーネント、ディレクティブ、パイプを持つ他のモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="d61c28aebf6d9a308688684bd0963349f916d660" translate="yes" xml:space="preserve">
          <source>Imports the animation symbols that build the animation triggers, control state, and manage transitions between states.</source>
          <target state="translated">アニメーションのトリガーを構築し、状態を制御し、状態間の遷移を管理するアニメーションシンボルをインポートします。</target>
        </trans-unit>
        <trans-unit id="969b1f7fd31248b651ab09920846952d22265f1a" translate="yes" xml:space="preserve">
          <source>Improve debugging with better Angular error messages</source>
          <target state="translated">より良い Angular エラーメッセージでデバッグを改善</target>
        </trans-unit>
        <trans-unit id="fea98dc51784321beb1402d5791647e70f12893b" translate="yes" xml:space="preserve">
          <source>Improve overall data quality by validating user input for accuracy and completeness.</source>
          <target state="translated">ユーザー入力の正確性と完全性を検証することで、全体的なデータ品質を向上させます。</target>
        </trans-unit>
        <trans-unit id="a3b0e66bdae797196b6b8788ae8a0c136f597b0d" translate="yes" xml:space="preserve">
          <source>Improve performance by pre-fetching route data and lazy loading feature modules.</source>
          <target state="translated">ルートデータのプリフェッチと遅延ロード機能モジュールにより、パフォーマンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="d44c2ca2637e46280e6e09bd5b6ff5f7c525f378" translate="yes" xml:space="preserve">
          <source>Improve performance on mobile and low-powered devices</source>
          <target state="translated">モバイルや低消費電力デバイスでのパフォーマンスを向上</target>
        </trans-unit>
        <trans-unit id="eeeab4f650457717006bfb970c8280a15fa896ca" translate="yes" xml:space="preserve">
          <source>Improved build performance with ngc as a tsc plugin distribution</source>
          <target state="translated">ngc を tsc プラグインディストリビューションとして使用することで、ビルドのパフォーマンスが向上しました。</target>
        </trans-unit>
        <trans-unit id="4a27691e865b7979531873ee280a5a3243bcb0f1" translate="yes" xml:space="preserve">
          <source>Improved developer onboarding with refreshed introductory documentation</source>
          <target state="translated">入門文書を刷新し、開発者のオンボーディングを改善しました。</target>
        </trans-unit>
        <trans-unit id="769e1298b6774dc3ae80f0664e3cf40ae3aa8a3e" translate="yes" xml:space="preserve">
          <source>Improved test times and debugging with automatic test environment tear down</source>
          <target state="translated">テスト環境の自動ティアダウンによるテスト時間とデバッグの改善</target>
        </trans-unit>
        <trans-unit id="3c9b3986f782d4faa661a57a4c4f5fd5422669f8" translate="yes" xml:space="preserve">
          <source>Improving template type checking for custom directives</source>
          <target state="translated">カスタムディレクティブのテンプレートタイプチェックの改善</target>
        </trans-unit>
        <trans-unit id="c0414193d62ac6c0f1bf1c02847690c0c2c4c6f1" translate="yes" xml:space="preserve">
          <source>Impure pipes</source>
          <target state="translated">不純パイプ</target>
        </trans-unit>
        <trans-unit id="6b0407cc45edc7407381780a1a2e8b0dc444dee0" translate="yes" xml:space="preserve">
          <source>Impure pipes are called whenever change detection runs for a component, which could be every few milliseconds for &lt;code&gt;CheckAlways&lt;/code&gt;. To avoid performance problems, call the server only when the requested URL changes, as shown in the following example, and use the pipe to cache the server response. The tabs show the following:</source>
          <target state="translated">不純なパイプは、コンポーネントの変更検出が実行されるたびに呼び出されます &lt;code&gt;CheckAlways&lt;/code&gt; 場合は数ミリ秒ごとになる可能性があります。パフォーマンスの問題を回避するには、次の例に示すように、要求されたURLが変更されたときにのみサーバーを呼び出し、パイプを使用してサーバーの応答をキャッシュします。タブには次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="88c8cdf511a1c885e6f77a48066eec8b1854da94" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, a function that operates on a &lt;a href=&quot;glossary#file-tree&quot;&gt;file tree&lt;/a&gt; to create, delete, or modify files in a specific manner.</source>
          <target state="translated">では&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;、で動作する機能&lt;a href=&quot;glossary#file-tree&quot;&gt;ファイルツリーには&lt;/a&gt;、作成、削除、または特定の方法でファイルを変更します。</target>
        </trans-unit>
        <trans-unit id="b691bd4b8205b08475f3b410f51f0a0d3db24979" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, a virtual file system represented by the &lt;code&gt;Tree&lt;/code&gt; class. Schematic &lt;a href=&quot;glossary#rule&quot;&gt;rules&lt;/a&gt; take a tree object as input, operate on them, and return a new tree object.</source>
          <target state="translated">では&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;、仮想ファイルシステムは、によって表される &lt;code&gt;Tree&lt;/code&gt; クラス。スケマティック&lt;a href=&quot;glossary#rule&quot;&gt;ルール&lt;/a&gt;は、ツリーオブジェクトを入力として受け取り、それらを操作して、新しいツリーオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="24e713671eb935b94463bbfce75319fb7e81b738" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http#adding-headers&quot;&gt;Adding headers&lt;/a&gt;, the &lt;code&gt;HeroesService&lt;/code&gt; set the default headers by passing an options object (&lt;code&gt;httpOptions&lt;/code&gt;) to its save methods. You can do more.</source>
          <target state="translated">&lt;a href=&quot;http#adding-headers&quot;&gt;ヘッダを追加&lt;/a&gt;、 &lt;code&gt;HeroesService&lt;/code&gt; は、オプションのオブジェクト（通過させることにより、デフォルトヘッダを設定 &lt;code&gt;httpOptions&lt;/code&gt; を、その保存方法）。あなたはもっとすることができます。</target>
        </trans-unit>
        <trans-unit id="419fc7b32aa230897c77ab6ce882d85080a20dfc" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, install the extension from the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;Extensions: Marketplace&lt;/a&gt;. You can open the marketplace from the editor using the Extensions icon on the left menu pane, or use VS Quick Open (⌘+P on Mac, CTRL+P on Windows) and type &quot;? ext&quot;.</source>
          <target state="translated">では&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studioのコード&lt;/a&gt;から拡張インストール&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;市場：拡張機能&lt;/a&gt;。左側のメニューペインの拡張機能アイコンを使用してエディターからマーケットプレイスを開くか、VSクイックオープン（Macでは⌘+ P、WindowsではCTRL + P）を使用して「？ext」と入力します。</target>
        </trans-unit>
        <trans-unit id="8b5b24ded6357d77d1fbb26f1eab50bd8beae2b5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;, enable the plugin &lt;a href=&quot;https://plugins.jetbrains.com/plugin/6971-angular-and-angularjs&quot;&gt;Angular and AngularJS&lt;/a&gt;.</source>
          <target state="translated">で&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;、プラグインの有効&lt;a href=&quot;https://plugins.jetbrains.com/plugin/6971-angular-and-angularjs&quot;&gt;角度とAngularJSを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0de07a30f188c92d5f5c9abf71459a306a224cdb" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;, you must install the language service package as a project dependency.</source>
          <target state="translated">で&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;は、プロジェクトの依存関係などの言語サービスパッケージをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="189f9093d7a12a56913779caf0448dafddac81fa" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;, the Language Service supports only in-line templates when installed as a plug-in. You need a custom Sublime plug-in (or modifications to the current plug-in) for completions in HTML files.</source>
          <target state="translated">で&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;崇高なテキスト&lt;/a&gt;プラグインとしてインストールすると、言語サービスは、唯一のインラインテンプレートをサポートしています。HTMLファイルで補完するには、カスタムのSublimeプラグイン（または現在のプラグインの変更）が必要です。</target>
        </trans-unit>
        <trans-unit id="c5f51ca55d5ad2c30fa2f2f2c23e29a882d2b6a5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;ivy&quot;&gt;Angular Ivy&lt;/a&gt;, the template type checker has been completely rewritten to be more capable as well as stricter, meaning it can catch a variety of new errors that the previous type checker would not detect.</source>
          <target state="translated">では&lt;a href=&quot;ivy&quot;&gt;角度アイビー&lt;/a&gt;、テンプレート型チェッカーは完全にそれが前の型チェッカーが検出しないであろうと、新たなエラーの様々なをキャッチすることができることを意味し、より厳しいだけでなく、より多くのことができるように書き直されました。</target>
        </trans-unit>
        <trans-unit id="6adea1758de937c6940c286e654edf1f70a7341d" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;HeroService&lt;/code&gt;, import the &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">で &lt;code&gt;HeroService&lt;/code&gt; 、インポート &lt;code&gt;MessageService&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="941837469f8f7292381b4b5d7fb8f52141c4b5b9" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ProfileEditorComponent&lt;/code&gt;, use the &lt;code&gt;updateProfile&lt;/code&gt; method with the example below to update the first name and street address for the user.</source>
          <target state="translated">&lt;code&gt;ProfileEditorComponent&lt;/code&gt; 、使用 &lt;code&gt;updateProfile&lt;/code&gt; のユーザのための最初の名前と住所を更新するために、以下の例と方法。</target>
        </trans-unit>
        <trans-unit id="c4552c52e0555afb5d7c5f59701433a331470a05" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;angular.json&lt;/code&gt; add two new configuration sections under the &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; targets to point to the new TypeScript configuration.</source>
          <target state="translated">で &lt;code&gt;angular.json&lt;/code&gt; の下に二つの新しいコンフィギュレーション・セクションを追加し &lt;code&gt;build&lt;/code&gt; し、 &lt;code&gt;serve&lt;/code&gt; の新しい活字体の構成にポイントにターゲットを。</target>
        </trans-unit>
        <trans-unit id="afca841ae46663ab78571026445492242945a6dc" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app.component.ts&lt;/code&gt;, &lt;code&gt;currentItems&lt;/code&gt; is an array of objects in the same shape as the &lt;code&gt;Item&lt;/code&gt; object in &lt;code&gt;items.ts&lt;/code&gt;, with an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.component.ts&lt;/code&gt; 、 &lt;code&gt;currentItems&lt;/code&gt; は同じ形状のオブジェクトの配列である &lt;code&gt;Item&lt;/code&gt; にオブジェクト &lt;code&gt;items.ts&lt;/code&gt; と、 &lt;code&gt;id&lt;/code&gt; および &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88a62840642f50411d045256c59444f30c7be873" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, add a route for product details, with a &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;products/:productId&lt;/code&gt; and &lt;code&gt;ProductDetailsComponent&lt;/code&gt; for the &lt;code&gt;component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.module.ts&lt;/code&gt; と、製品の詳細についてはルートを追加 &lt;code&gt;path&lt;/code&gt; の &lt;code&gt;products/:productId&lt;/code&gt; と &lt;code&gt;ProductDetailsComponent&lt;/code&gt; ための &lt;code&gt;component&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c81e966129850cf415f6248bea69d0b9ed06ad7c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, add a route for shipping. Specify a &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;shipping&lt;/code&gt; and a component of &lt;code&gt;ShippingComponent&lt;/code&gt;.</source>
          <target state="translated">で &lt;code&gt;app.module.ts&lt;/code&gt; 、出荷のためにルートを追加します。指定 &lt;code&gt;path&lt;/code&gt; の &lt;code&gt;shipping&lt;/code&gt; とのコンポーネント &lt;code&gt;ShippingComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="6d895fdb94f9534c8a2f82b3d299e8227073cbd3" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, remove the &lt;code&gt;AdminModule&lt;/code&gt; import statement from the top of the file and remove the &lt;code&gt;AdminModule&lt;/code&gt; from the NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">で &lt;code&gt;app.module.ts&lt;/code&gt; 、削除 &lt;code&gt;AdminModule&lt;/code&gt; ファイルの先頭からのインポート文を削除して &lt;code&gt;AdminModule&lt;/code&gt; を NgModuleのから &lt;code&gt;imports&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="66c95ce78c49c2b818a248ba1ca84d28c18823cf" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;cart.component.ts&lt;/code&gt;, define an &lt;code&gt;onSubmit()&lt;/code&gt; method to process the form. Use the &lt;code&gt;CartService#clearCart()&lt;/code&gt; method to empty the cart items and reset the form after it is submitted. (In a real-world app, this method also would submit the data to an external server.)</source>
          <target state="translated">&lt;code&gt;cart.component.ts&lt;/code&gt; 、定義 &lt;code&gt;onSubmit()&lt;/code&gt; フォームを処理する方法。 &lt;code&gt;CartService#clearCart()&lt;/code&gt; メソッドを使用してカートアイテムを空にし、送信後にフォームをリセットします。 （実際のアプリでは、このメソッドもデータを外部サーバーに送信します。）</target>
        </trans-unit>
        <trans-unit id="03b649f3d6c4a1c2196ae63a64954a5fc383db3c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;cart.component.ts&lt;/code&gt;, define an &lt;code&gt;onSubmit()&lt;/code&gt; method to process the form. Use the &lt;code&gt;CartService&lt;/code&gt;&lt;code&gt;clearCart()&lt;/code&gt; method to empty the cart items and reset the form after its submission. In a real-world app, this method would also submit the data to an external server. The entire cart component class is as follows:</source>
          <target state="translated">&lt;code&gt;cart.component.ts&lt;/code&gt; 、定義 &lt;code&gt;onSubmit()&lt;/code&gt; フォームを処理する方法。 &lt;code&gt;CartService&lt;/code&gt; &lt;code&gt;clearCart()&lt;/code&gt; メソッドを使用して、カートアイテムを空にし、送信後にフォームをリセットします。実際のアプリでは、このメソッドはデータを外部サーバーにも送信します。カートコンポーネントクラス全体は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0b5334d2075d36a21eeb7a9fdb6756d0e3353959" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;index.html&lt;/code&gt;, change base href from &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;base href=&quot;/src/&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; から、変更ベースHREF &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; に &lt;code&gt;&amp;lt;base href=&quot;/src/&quot;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d4c2508f6f46eaa4133ffeeaac2bf21600b45b7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;product-list.component.html&lt;/code&gt;, bind the &lt;code&gt;app-product-alerts&lt;/code&gt; component (which is what displays the &quot;Notify Me&quot; button) to the &lt;code&gt;onNotify()&lt;/code&gt; method of the product list component.</source>
          <target state="translated">&lt;code&gt;product-list.component.html&lt;/code&gt; 、バインド &lt;code&gt;app-product-alerts&lt;/code&gt; に（「私に通知」ボタンを表示するものである）成分 &lt;code&gt;onNotify()&lt;/code&gt; 製品リスト部品の方法。</target>
        </trans-unit>
        <trans-unit id="c03f59b331ed7156718b1228952832ea7836769c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;src/systemjs.config.js&lt;/code&gt;, near the top of the file, change the npm &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;/node_modules/&lt;/code&gt; with a slash.</source>
          <target state="translated">&lt;code&gt;src/systemjs.config.js&lt;/code&gt; 、ファイルの先頭付近、NPM変更 &lt;code&gt;path&lt;/code&gt; に &lt;code&gt;/node_modules/&lt;/code&gt; スラッシュを。</target>
        </trans-unit>
        <trans-unit id="3bc1fafefe77f9932ae7d735645c4d33c9cc2eeb" translate="yes" xml:space="preserve">
          <source>In Angular CLI version 8 and higher, applications are built using &lt;em&gt;differential loading&lt;/em&gt;, a strategy where the CLI builds two separate bundles as part of your deployed application.</source>
          <target state="translated">Angular CLIバージョン8以降では、アプリケーションは&lt;em&gt;差分読み込み&lt;/em&gt;を使用して構築されます。これは、CLIがデプロイされたアプリケーションの一部として2つの個別のバンドルを構築する戦略です。</target>
        </trans-unit>
        <trans-unit id="e1431faabdc821757fa86b84a541dce584ba7634" translate="yes" xml:space="preserve">
          <source>In Angular CLI version 8 and higher, differential loading is enabled by default for the &lt;code&gt;ng build&lt;/code&gt; command. The &lt;code&gt;ng serve&lt;/code&gt;, &lt;code&gt;ng test&lt;/code&gt;, and &lt;code&gt;ng e2e&lt;/code&gt; commands, however, generate a single ES2015 build which cannot run in older browsers that don't support the modules, such as IE 11.</source>
          <target state="translated">Angular CLIバージョン8以降では、 &lt;code&gt;ng build&lt;/code&gt; コマンドの差分読み込みがデフォルトで有効になっています。 &lt;code&gt;ng serve&lt;/code&gt; 、 &lt;code&gt;ng test&lt;/code&gt; 、そして &lt;code&gt;ng e2e&lt;/code&gt; コマンド、しかし、そのようなIE 11などのモジュールをサポートしていない古いブラウザで実行することができない単一ES2015ビルドを生成します。</target>
        </trans-unit>
        <trans-unit id="7b1d3994bf24bcb2d7b3fdd86f51dccd601e9753" translate="yes" xml:space="preserve">
          <source>In Angular terminology, a platform is the context in which an Angular application runs. The most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server.</source>
          <target state="translated">Angularの用語では、プラットフォームとはAngularアプリケーションが動作するコンテキストのことです。Angularアプリケーションの最も一般的なプラットフォームはWebブラウザですが、モバイルデバイス用のオペレーティングシステムやWebサーバーである場合もあります。</target>
        </trans-unit>
        <trans-unit id="46dd64bbc88ed581429aca94fdd9f3452d9971db" translate="yes" xml:space="preserve">
          <source>In Angular things are different. While change detection still occurs after every event, no one needs to call &lt;code&gt;scope.$apply()&lt;/code&gt; for that to happen. This is because all Angular code runs inside something called the &lt;a href=&quot;../api/core/ngzone&quot;&gt;Angular zone&lt;/a&gt;. Angular always knows when the code finishes, so it also knows when it should kick off change detection. The code itself doesn't have to call &lt;code&gt;scope.$apply()&lt;/code&gt; or anything like it.</source>
          <target state="translated">Angularでは物事が異なります。変更の検出はすべてのイベントの後に発生しますが、そのために &lt;code&gt;scope.$apply()&lt;/code&gt; を呼び出す必要はありません。これは、すべてのAngularコードが&lt;a href=&quot;../api/core/ngzone&quot;&gt;Angularゾーン&lt;/a&gt;と呼ばれるものの内部で実行されるためです。Angularはコードがいつ終了するかを常に知っているので、変更検出をいつ開始すべきかについても知っています。コード自体は、 &lt;code&gt;scope.$apply()&lt;/code&gt; またはそのようなものを呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="d45210191612fe3bb5ec53b02b0be46f15c8ce7c" translate="yes" xml:space="preserve">
          <source>In Angular version 9, the template type checker checks whether a binding expression's type is compatible with that of the corresponding directive input. As an example, consider the following component:</source>
          <target state="translated">Angularバージョン9では、テンプレート型チェッカーはバインディング式の型が対応するディレクティブ入力の型と互換性があるかどうかをチェックします。例として、以下のコンポーネントを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="4c74df3bafb8f0880b2718e644a5bb702ff44a77" translate="yes" xml:space="preserve">
          <source>In Angular you use similar syntax with the pipe (|) character to filter output, but now you call them &lt;strong&gt;pipes&lt;/strong&gt;. Many (but not all) of the built-in filters from AngularJS are built-in pipes in Angular.</source>
          <target state="translated">Angularでは、パイプ（|）文字を使用して同様の構文を使用して出力をフィルター処理しますが、ここではそれらを&lt;strong&gt;pipes&lt;/strong&gt;と呼びます。AngularJSの組み込みフィルターの多く（すべてではない）は、Angularの組み込みパイプです。</target>
        </trans-unit>
        <trans-unit id="95111c94dbd226bf1c1dbcb0a6c5aa4131254f48" translate="yes" xml:space="preserve">
          <source>In Angular, &lt;code&gt;href&lt;/code&gt; is no longer used for routing. Routing uses &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;, as shown in the following example.</source>
          <target state="translated">Angularでは、 &lt;code&gt;href&lt;/code&gt; はルーティングに使用されなくなりました。次の例に示すように、ルーティングでは &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5776268b8d76370b45f02f052a40cf650053642c" translate="yes" xml:space="preserve">
          <source>In Angular, &lt;strong&gt;two-way binding&lt;/strong&gt; is denoted by &lt;code&gt;[()]&lt;/code&gt;, descriptively referred to as a &quot;banana in a box&quot;. This syntax is a shortcut for defining both property binding (from the component to the view) and event binding (from the view to the component), thereby providing two-way binding.</source>
          <target state="translated">Angularでは、&lt;strong&gt;双方向のバインディング&lt;/strong&gt;は &lt;code&gt;[()]&lt;/code&gt; ボックス内のバナナ]と説明的に呼ばれる[（）]で表されます。この構文は、プロパティバインディング（コンポーネントからビューへ）とイベントバインディング（ビューからコンポーネントへ）の両方を定義するためのショートカットであり、双方向のバインディングを提供します。</target>
        </trans-unit>
        <trans-unit id="f933bc6fc4b7b3378ae37914c32604c21b7bac57" translate="yes" xml:space="preserve">
          <source>In Angular, a &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt; that provides functionality that can be included in other Angular apps. A library isn't a complete Angular app and can't run independently. (To add re-usable Angular functionality to non-Angular web apps, you can use Angular &lt;a href=&quot;glossary#angular-element&quot;&gt;custom elements&lt;/a&gt;.)</source>
          <target state="translated">Angularにおいて、他のAngularアプリに含めることができる機能を提供する&lt;a href=&quot;glossary#project&quot;&gt;プロジェクト&lt;/a&gt;。ライブラリは完全なAngularアプリではなく、独立して実行することはできません。（再利用可能なAngular機能を非Angular Webアプリに追加するには、Angular &lt;a href=&quot;glossary#angular-element&quot;&gt;カスタム要素を&lt;/a&gt;使用できます。）</target>
        </trans-unit>
        <trans-unit id="95d6afe08573bb93eca1cae171a8aa8ac1cf2775" translate="yes" xml:space="preserve">
          <source>In Angular, a &lt;em&gt;template&lt;/em&gt; is a chunk of HTML. Within a template, you can use special syntax to leverage many of Angular's features.</source>
          <target state="translated">Angularでは、&lt;em&gt;テンプレート&lt;/em&gt;はHTMLのチャンクです。テンプレート内で、特別な構文を使用して、Angularの機能の多くを活用できます。</target>
        </trans-unit>
        <trans-unit id="4d102678eee21e14e16ac6c77664ce7f07fe617f" translate="yes" xml:space="preserve">
          <source>In Angular, a class with the &lt;a href=&quot;glossary#injectable&quot;&gt;@Injectable()&lt;/a&gt; decorator that encapsulates non-UI logic and code that can be reused across an application. Angular distinguishes components from services to increase modularity and reusability.</source>
          <target state="translated">Angularで、アプリケーション全体で再利用できる非UIロジックとコードをカプセル化する&lt;a href=&quot;glossary#injectable&quot;&gt;@Injectable（）&lt;/a&gt;デコレーターを含むクラス。Angularはコンポーネントとサービスを区別して、モジュール性と再利用性を高めています。</target>
        </trans-unit>
        <trans-unit id="42472280db2836f2049c258a790c8995069f17d9" translate="yes" xml:space="preserve">
          <source>In Angular, a set of related &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; collected in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;.</source>
          <target state="translated">Angularでは、&lt;a href=&quot;glossary#npm-package&quot;&gt;npmパッケージで&lt;/a&gt;収集された関連する&lt;a href=&quot;glossary#schematic&quot;&gt;回路図の&lt;/a&gt;セット。</target>
        </trans-unit>
        <trans-unit id="e67a287fde6cc9945eb3f6d9f0c4d95950a65f6b" translate="yes" xml:space="preserve">
          <source>In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable.</source>
          <target state="translated">Angularでは、中括弧で囲まれたテンプレート式はまだ一方通行のバインディングを表しています。これは要素の値をコンポーネントのプロパティにバインドします。バインディングのコンテキストは暗黙的であり、常に関連付けられたコンポーネントであるため、参照変数は必要ありません。</target>
        </trans-unit>
        <trans-unit id="43af6c84f806d548cba3d9e875a82ca2c2ac11d1" translate="yes" xml:space="preserve">
          <source>In Angular, an app's root NgModule (&lt;code&gt;AppModule&lt;/code&gt;) has a &lt;code&gt;bootstrap&lt;/code&gt; property that identifies the app's top-level &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt;. During the bootstrap process, Angular creates and inserts these components into the &lt;code&gt;index.html&lt;/code&gt; host web page. You can bootstrap multiple apps in the same &lt;code&gt;index.html&lt;/code&gt;. Each app contains its own components.</source>
          <target state="translated">Angularでは、アプリのルートNgModule（ &lt;code&gt;AppModule&lt;/code&gt; ）には、アプリの最上位&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;を識別する &lt;code&gt;bootstrap&lt;/code&gt; プロパティがあります。Angularはブートストラッププロセス中に、これらのコンポーネントを作成し、 &lt;code&gt;index.html&lt;/code&gt; ホストWebページに挿入します。同じ &lt;code&gt;index.html&lt;/code&gt; で複数のアプリをブートストラップできます。各アプリには独自のコンポーネントが含まれています。</target>
        </trans-unit>
        <trans-unit id="854deb5a01aad6ed0edbb17479ccae63f79a55ba" translate="yes" xml:space="preserve">
          <source>In Angular, component CSS styles are encapsulated into the component's view and don't affect the rest of the application.</source>
          <target state="translated">Angularでは、コンポーネントのCSSスタイルはコンポーネントのビューにカプセル化され、他のアプリケーションには影響しません。</target>
        </trans-unit>
        <trans-unit id="bbb7472c46802d488a515304f6fc524e7754d847" translate="yes" xml:space="preserve">
          <source>In Angular, components are the main primitive from which user interfaces are built. You define the different portions of the UI as components and compose them into a full user experience.</source>
          <target state="translated">Angularでは、コンポーネントはユーザーインターフェースを構築するための主要なプリミティブです。UIのさまざまな部分をコンポーネントとして定義し、それらを完全なユーザーエクスペリエンスに構成します。</target>
        </trans-unit>
        <trans-unit id="d57111c7e00014610f562bb31fefc30b6f3895c6" translate="yes" xml:space="preserve">
          <source>In Angular, dependencies are typically services, but they also can be values, such as strings or functions. An &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; for an app (created automatically during bootstrap) instantiates dependencies when needed, using a configured &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; of the service or value.</source>
          <target state="translated">Angularでは、依存関係は通常サービスですが、文字列や関数などの値にすることもできます。アプリの&lt;a href=&quot;glossary#injector&quot;&gt;インジェクター&lt;/a&gt;（ブートストラップ中に自動的に作成される）は、サービスまたは値の構成された&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;を使用して、必要に応じて依存関係をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="49a00199a43ff42e00e1d7703a54a94326ede49c" translate="yes" xml:space="preserve">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; directive works similarly. It includes/excludes CSS classes based on an expression.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; ディレクティブは同様に機能します。式に基づくCSSクラスを含める/除外します。</target>
        </trans-unit>
        <trans-unit id="3bf0e4f69a8ebfd62b6c1ef86d6048033054f53f" translate="yes" xml:space="preserve">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; directive works similarly. It sets a CSS style on an HTML element based on an expression.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; ディレクティブは同様に機能します。式に基づいてHTML要素にCSSスタイルを設定します。</target>
        </trans-unit>
        <trans-unit id="d14c88becd3c4b7ad223e1c52839e5fb106a2219" translate="yes" xml:space="preserve">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; directive works similarly. It displays an element whose &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; matches the current &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; expression value.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; ディレクティブは同様に機能します。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; が現在の &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; 式の値と一致する要素を表示します。</target>
        </trans-unit>
        <trans-unit id="7fa35db99b5e7128d37e25c36e032619af14914f" translate="yes" xml:space="preserve">
          <source>In Angular, the DI framework provides declared dependencies to a class when that class is instantiated. This guide explains how DI works in Angular, and how you use it to make your apps flexible, efficient, and robust, as well as testable and maintainable.</source>
          <target state="translated">Angularでは、DIフレームワークはクラスがインスタンス化されたときにクラスに宣言された依存関係を提供します。このガイドでは、DIがAngularでどのように機能するのか、また、アプリを柔軟性、効率性、堅牢性、テスト性、保守性を高めるためにどのように使用するのかを説明します。</target>
        </trans-unit>
        <trans-unit id="56cf5a3785dda1a9e94cccd5c7f98706c65752e1" translate="yes" xml:space="preserve">
          <source>In Angular, the best practice is to load and configure the router in a separate, top-level module that is dedicated to routing and imported by the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">Angularのベストプラクティスは、ルーティング専用でルート &lt;code&gt;AppModule&lt;/code&gt; によってインポートされる個別の最上位モジュールにルーターを読み込んで構成することです。</target>
        </trans-unit>
        <trans-unit id="59cb913403e7197319cc31442b4a8397dc93031f" translate="yes" xml:space="preserve">
          <source>In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator.</source>
          <target state="translated">Angularでは、テンプレートが関連するコントローラを指定しなくなりました。代わりに、コンポーネントはコンポーネントクラスのデコレータの一部として関連するテンプレートを指定します。</target>
        </trans-unit>
        <trans-unit id="5d2ddeeb7cdda93a0f1d676dfcb267a980c9fb20" translate="yes" xml:space="preserve">
          <source>In Angular, transition states can be defined explicitly through the &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; function, or using the predefined &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt; states.</source>
          <target state="translated">Angularでは、遷移状態は、 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; 関数を使用するか、事前定義された &lt;code&gt;*&lt;/code&gt; （ワイルドカード）および &lt;code&gt;void&lt;/code&gt; 状態を使用して明示的に定義できます。</target>
        </trans-unit>
        <trans-unit id="25736a6eef4ea1a73caec95ccf80b14819cbeacf" translate="yes" xml:space="preserve">
          <source>In Angular, transition states can be defined explicitly through the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function, or using the predefined &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt; states.</source>
          <target state="translated">Angularでは、遷移状態は &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 関数を通じて、または事前定義された &lt;code&gt;*&lt;/code&gt; （ワイルドカード）と &lt;code&gt;void&lt;/code&gt; 状態を使用して明示的に定義できます。</target>
        </trans-unit>
        <trans-unit id="4e131d233620271698d30ea65871deadb93e35a0" translate="yes" xml:space="preserve">
          <source>In Angular, use JSONP by including &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports. In the following example, the &lt;code&gt;searchHeroes()&lt;/code&gt; method uses a JSONP request to query for heroes whose names contain the search term.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; インポートに含めることでJSONPを使用します。次の例では、 &lt;code&gt;searchHeroes()&lt;/code&gt; メソッドはJSONPリクエストを使用して、名前に検索用語が含まれるヒーローをクエリします。</target>
        </trans-unit>
        <trans-unit id="95bc62450c4a6ad00b962b6c8b2526a974d4070b" translate="yes" xml:space="preserve">
          <source>In Angular, you can set multiple styles without any animation. However, without further refinement, the button instantly transforms with no fade, no shrinkage, or other visible indicator that a change is occurring.</source>
          <target state="translated">Angularでは、アニメーションなしで複数のスタイルを設定することができます。しかし、これ以上細かく設定しなくても、フェードや縮小など変化が起きていることを目に見える形で示すことなく、ボタンは瞬時に変形します。</target>
        </trans-unit>
        <trans-unit id="db7fc84f2aa2ba81061de8add0ab492452e7b00b" translate="yes" xml:space="preserve">
          <source>In Angular, you can use the &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata to define a style sheet for a particular component.</source>
          <target state="translated">Angularでは、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;メタデータの &lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; プロパティを使用して、特定のコンポーネントのスタイルシートを定義できます。</target>
        </trans-unit>
        <trans-unit id="b15804b26932b791e746d66ee9a7371c2cdd16b6" translate="yes" xml:space="preserve">
          <source>In Angular, you can use the &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;styleUrls&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata to define a style sheet for a particular component.</source>
          <target state="translated">Angularでは、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;メタデータの &lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;styleUrls&lt;/code&gt; プロパティを使用して、特定のコンポーネントのスタイルシートを定義できます。</target>
        </trans-unit>
        <trans-unit id="917fd81c1d70d9d7fbe4bfbac7c25842ecbe5775" translate="yes" xml:space="preserve">
          <source>In Angular, you create a component class to contain the data model and control methods. Use the TypeScript &lt;code&gt;export&lt;/code&gt; keyword to export the class so that the functionality can be imported into NgModules.</source>
          <target state="translated">Angularでは、データモデルとコントロールメソッドを含むコンポーネントクラスを作成します。TypeScript &lt;code&gt;export&lt;/code&gt; キーワードを使用してクラスをエクスポートし、機能をNgModulesにインポートできるようにします。</target>
        </trans-unit>
        <trans-unit id="9d13198215c21edc80169cd08c0e85464770e5e5" translate="yes" xml:space="preserve">
          <source>In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a &lt;code&gt;MovieService&lt;/code&gt;. The first parameter's TypeScript type tells Angular what to inject, even after minification.</source>
          <target state="translated">Angularでは、依存関係を引数としてコンポーネントクラスコンストラクターに渡します。この例では &lt;code&gt;MovieService&lt;/code&gt; を注入します。最初のパラメーターのTypeScriptタイプは、縮小後であっても、何を注入するかをAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="2befa90df23e1fd4a51bf9026307335169223d9a" translate="yes" xml:space="preserve">
          <source>In Angular, you use property binding; there is no built-in &lt;em&gt;hide&lt;/em&gt; directive. For more information, see &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show&lt;/a&gt;.</source>
          <target state="translated">Angularでは、プロパティバインディングを使用します。組み込みの&lt;em&gt;非表示&lt;/em&gt;ディレクティブはありません。詳細については、&lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-showを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7cabd7a1d2e9dfa73456a5cfdfed14d83c3ff687" translate="yes" xml:space="preserve">
          <source>In AngularJS, an Angular module keeps track of controllers, services, and other code. The second argument defines the list of other modules that this module depends upon.</source>
          <target state="translated">AngularJSでは、Angularモジュールはコントローラ、サービス、その他のコードを追跡します。第二引数は、このモジュールが依存する他のモジュールのリストを定義します。</target>
        </trans-unit>
        <trans-unit id="59f6e03fe28a109551d993bba2ab50942b6034e7" translate="yes" xml:space="preserve">
          <source>In AngularJS, an expression in curly braces denotes one-way binding. This binds the value of the element to a property in the controller associated with this template.</source>
          <target state="translated">AngularJSでは、中括弧内の式は一方通行のバインディングを表します。これは要素の値をこのテンプレートに関連付けられたコントローラのプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="c6449941b0d5bd79435ee303f5b25fb1a3a1c3df" translate="yes" xml:space="preserve">
          <source>In AngularJS, an immediately invoked function expression (or IIFE) around controller code keeps it out of the global namespace.</source>
          <target state="translated">AngularJSでは、コントローラコードの周りに即座に呼び出された関数式(またはIIFE)があると、グローバルな名前空間から除外されます。</target>
        </trans-unit>
        <trans-unit id="3402c056b50a9d166afa19ff142bd9f2d0f52a15" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24location&quot;&gt;$location service&lt;/a&gt; handles all routing configuration and navigation, encoding and decoding of URLS, redirects, and interactions with browser APIs. Angular uses its own underlying &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service for all of these tasks.</source>
          <target state="translated">AngularJSでは、&lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24location&quot;&gt;$ locationサービス&lt;/a&gt;は、すべてのルーティング構成とナビゲーション、URLのエンコードとデコード、リダイレクト、およびブラウザーAPIとの対話を処理します。Angularはこれらすべてのタスクに独自の基盤となる &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスを使用します。</target>
        </trans-unit>
        <trans-unit id="eb398e0b3db43606304c259cfff7981355eca61f" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-class&lt;/code&gt; directive includes/excludes CSS classes based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS class name, and each value defined as a template expression that evaluates to a Boolean value.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-class&lt;/code&gt; ディレクティブは式に基づくCSSクラスを含める/除外します。その式は、多くの場合、CSSクラス名として定義されたオブジェクトの各キーと、ブール値に評価されるテンプレート式として定義された各値を持つキー値コントロールオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="818af6bd07f74440493d9b442a5bd574408dafb9" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-click&lt;/code&gt; directive allows you to specify custom behavior when an element is clicked.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-click&lt;/code&gt; ディレクティブを使用して、要素がクリックされたときのカスタム動作を指定できます。</target>
        </trans-unit>
        <trans-unit id="2fbad8407ae81e7c90d5bd49b9e78709b7734b35" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-controller&lt;/code&gt; directive attaches a controller to the view. Using the &lt;code&gt;ng-controller&lt;/code&gt; (or defining the controller as part of the routing) ties the view to the controller code associated with that view.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-controller&lt;/code&gt; ディレクティブはコントローラーをビューにアタッチします。 &lt;code&gt;ng-controller&lt;/code&gt; を使用する（またはルーティングの一部としてコントローラーを定義する）と、ビューがそのビューに関連付けられているコントローラーコードに関連付けられます。</target>
        </trans-unit>
        <trans-unit id="014cadcee952b130a89b2cacda8d8fb19ba39ecf" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-hide&lt;/code&gt; directive shows or hides the associated HTML element based on an expression. For more information, see &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show&lt;/a&gt;.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-hide&lt;/code&gt; ディレクティブは、式に基づいて関連するHTML要素を表示または非表示にします。詳細については、&lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-showを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="55692422426a5f190e228d159889d4e818c0c281" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-href&lt;/code&gt; is often used to activate a route as part of navigation.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-href&lt;/code&gt; は、ナビゲーションの一部としてルートをアクティブ化するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="98ac54bfebe79300df81d93eb3d99942dfa78df6" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-if&lt;/code&gt; directive removes or recreates a portion of the DOM, based on an expression. If the expression is false, the element is removed from the DOM.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-if&lt;/code&gt; ディレクティブは、式に基づいてDOMの一部を削除または再作成します。式がfalseの場合、要素はDOMから削除されます。</target>
        </trans-unit>
        <trans-unit id="bae5a3f3040e93734d778be2fb6b9823f2178635" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-model&lt;/code&gt; directive binds a form control to a property in the controller associated with the template. This provides &lt;strong&gt;two-way binding&lt;/strong&gt;, whereby any change made to the value in the view is synchronized with the model, and any change to the model is synchronized with the value in the view.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-model&lt;/code&gt; ディレクティブはテンプレートに関連付けられたコントローラーのプロパティにフォームコントロールをバインドします。これにより&lt;strong&gt;双方向バインディングが&lt;/strong&gt;提供されます。これにより、ビューの値に加えられた変更はモデルと同期され、モデルの変更はビューの値と同期されます。</target>
        </trans-unit>
        <trans-unit id="903b10b4d3b7257fdd75c38b26fddc8e2292ab92" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-repeat&lt;/code&gt; directive repeats the associated DOM element for each item in the specified collection.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-repeat&lt;/code&gt; ディレクティブは、指定されたコレクションの各アイテムに関連付けられたDOM要素を繰り返します。</target>
        </trans-unit>
        <trans-unit id="2ed583230e835e013e2faaccadd4c5987e0b6dcf" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-show&lt;/code&gt; directive shows or hides the associated DOM element, based on an expression.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-show&lt;/code&gt; ディレクティブは、式に基づいて、関連付けられたDOM要素を表示または非表示にします。</target>
        </trans-unit>
        <trans-unit id="71b37da7b6fe1a95ea082ca481f794b3337c391f" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-style&lt;/code&gt; directive sets a CSS style on an HTML element based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS property, and each value defined as an expression that evaluates to a value appropriate for the style.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-style&lt;/code&gt; ディレクティブは式に基づいてHTML要素にCSSスタイルを設定します。その式は、多くの場合、キー値コントロールオブジェクトであり、オブジェクトの各キーはCSSプロパティとして定義され、各値はスタイルに適した値に評価される式として定義されます。</target>
        </trans-unit>
        <trans-unit id="e0656ba1ea23edbe16f8089baec62aca2d5b8917" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-switch&lt;/code&gt; directive swaps the contents of an element by selecting one of the templates based on the current value of an expression.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-switch&lt;/code&gt; ディレクティブは、式の現在の値に基づいてテンプレートの1つを選択することにより、要素のコンテンツを交換します。</target>
        </trans-unit>
        <trans-unit id="1d52894dd4f10a8182acd7f3bd00849e805e2e2e" translate="yes" xml:space="preserve">
          <source>In AngularJS, you pass in any dependencies as controller function arguments. This example injects a &lt;code&gt;MovieService&lt;/code&gt;.</source>
          <target state="translated">AngularJSでは、コントローラー関数の引数として依存関係を渡します。この例では &lt;code&gt;MovieService&lt;/code&gt; を注入します。</target>
        </trans-unit>
        <trans-unit id="9ac4f51e9351e87b9cfd8dd2361b98292c81adc4" translate="yes" xml:space="preserve">
          <source>In AngularJS, you write the code for the model and methods in a controller function.</source>
          <target state="translated">AngularJSでは、コントローラ関数の中にモデルやメソッドのコードを書きます。</target>
        </trans-unit>
        <trans-unit id="4f4f7dccd62d663335cfb71ca12781b89ca1acf4" translate="yes" xml:space="preserve">
          <source>In AngularJS, you write the code that provides the model and the methods for the view in a &lt;strong&gt;controller&lt;/strong&gt;. In Angular, you build a &lt;strong&gt;component&lt;/strong&gt;.</source>
          <target state="translated">AngularJSでは、&lt;strong&gt;コントローラーの&lt;/strong&gt;ビューのモデルとメソッドを提供するコードを記述します。Angularでは、&lt;strong&gt;コンポーネント&lt;/strong&gt;を作成し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="17aa02fbd3f7b1d58bafeb9efaf4a3d0381fa09f" translate="yes" xml:space="preserve">
          <source>In HTML, these attributes are set using ordinary CSS styles such as color and opacity. In Angular, use the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function to specify a set of CSS styles for use with animations. You can collect a set of styles in an animation state, and give the state a name, such as &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="translated">HTMLでは、これらの属性は、色や不透明度などの通常のCSSスタイルを使用して設定されます。Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数を使用して、アニメーションで使用するCSSスタイルのセットを指定します。アニメーションの状態で一連のスタイルを収集し、状態に &lt;code&gt;open&lt;/code&gt; や &lt;code&gt;closed&lt;/code&gt; などの名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="2e23c70ae53e4e39b6efe1c2cca3a6e135570227" translate="yes" xml:space="preserve">
          <source>In JavaScript (ECMAScript), each file is a module and all objects defined in the file belong to that module. Objects can exported, making them public, and public objects can be imported for use by other modules.</source>
          <target state="translated">JavaScript (ECMAScript)では、各ファイルはモジュールであり、ファイル内で定義されたすべてのオブジェクトはそのモジュールに属します。オブジェクトはエクスポートして公開することができ、公開されたオブジェクトは他のモジュールで使用するためにインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="00113ac64c73beea3e7d378ff1f842ddd2316ba2" translate="yes" xml:space="preserve">
          <source>In JavaScript each &lt;em&gt;file&lt;/em&gt; is a module and all objects defined in the file belong to that module. The module declares some objects to be public by marking them with the &lt;code&gt;export&lt;/code&gt; key word. Other JavaScript modules use &lt;em&gt;import statements&lt;/em&gt; to access public objects from other modules.</source>
          <target state="translated">JavaScriptでは、各&lt;em&gt;ファイル&lt;/em&gt;はモジュールであり、ファイルで定義されたすべてのオブジェクトはそのモジュールに属します。モジュールは、いくつかのオブジェクトを &lt;code&gt;export&lt;/code&gt; キーワードでマークすることにより、それらを公開することを宣言します。他のJavaScriptモジュールは、&lt;em&gt;インポートステートメント&lt;/em&gt;を使用して他のモジュールからパブリックオブジェクトにアクセスします。</target>
        </trans-unit>
        <trans-unit id="fb85040b15049e982959bb2339113e3e8a73a679" translate="yes" xml:space="preserve">
          <source>In JavaScript, modules are individual files with JavaScript code in them. To make what&amp;rsquo;s in them available, you write an export statement, usually after the relevant code, like this:</source>
          <target state="translated">JavaScriptでは、モジュールはJavaScriptコードが含まれた個別のファイルです。それらの内容を利用できるようにするには、通常、関連するコードの後に​​次のようにexportステートメントを記述します。</target>
        </trans-unit>
        <trans-unit id="f61eadaf153a7ccf995f48d19a000c62df62384c" translate="yes" xml:space="preserve">
          <source>In Progress</source>
          <target state="translated">進行中</target>
        </trans-unit>
        <trans-unit id="9bdc952c572e3628d4fe93bd50574b4a309ba81b" translate="yes" xml:space="preserve">
          <source>In Sass and Stylus you can make use of the &lt;code&gt;includePaths&lt;/code&gt; functionality for both component and global styles, which allows you to add extra base paths that will be checked for imports.</source>
          <target state="translated">SassとStylus では、コンポーネントスタイルとグローバルスタイルの両方に &lt;code&gt;includePaths&lt;/code&gt; 機能を利用できます。これにより、インポートをチェックするベースパスを追加できます。</target>
        </trans-unit>
        <trans-unit id="92a7b3a74d45330ef286338b8bdb3743222ebf0d" translate="yes" xml:space="preserve">
          <source>In Visual Studio, select &lt;code&gt;File&lt;/code&gt; | &lt;code&gt;New&lt;/code&gt; | &lt;code&gt;Project&lt;/code&gt; from the menu.</source>
          <target state="translated">Visual Studioで、 &lt;code&gt;File&lt;/code&gt; | &lt;code&gt;New&lt;/code&gt; | &lt;code&gt;Project&lt;/code&gt; のメニューから。</target>
        </trans-unit>
        <trans-unit id="7a46a63cb5e6dd220a5995dd3ad65a3d4cfd3913" translate="yes" xml:space="preserve">
          <source>In Windows, by default, one application can only have 6 websocket connections, &lt;a href=&quot;https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&amp;amp;MSPPError=-2147217396#websocket_maxconn&quot;&gt;MSDN WebSocket Settings&lt;/a&gt;. So when IE is refreshed (manually or automatically by &lt;code&gt;ng serve&lt;/code&gt;), sometimes the websocket does not close properly. When websocket connections exceed the limitations, a &lt;code&gt;SecurityError&lt;/code&gt; will be thrown. This error will not affect the angular application, you can just restart IE to clear this error, or modify the windows registry to update the limitations.</source>
          <target state="translated">Windowsでは、デフォルトで、1つのアプリケーションが持つことができるのは、&lt;a href=&quot;https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&amp;amp;MSPPError=-2147217396#websocket_maxconn&quot;&gt;MSDN WebSocket設定という&lt;/a&gt; 6つのWebSocket接続だけです。そのため、IEが（手動または &lt;code&gt;ng serve&lt;/code&gt; によって自動的に）更新されると、WebSocketが適切に閉じないことがあります。WebSocket接続が制限を超えると、 &lt;code&gt;SecurityError&lt;/code&gt; がスローされます。このエラーは角度のあるアプリケーションには影響しません。IEを再起動してこのエラーをクリアするか、Windowsレジストリを変更して制限を更新できます。</target>
        </trans-unit>
        <trans-unit id="0e58c3e6bb3aef781aa7181c15464f286c38606f" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;toh-pt6&quot;&gt;later tutorial on HTTP&lt;/a&gt;, you'll learn that Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods return RxJS &lt;code&gt;Observable&lt;/code&gt;s. In this tutorial, you'll simulate getting data from the server with the RxJS &lt;code&gt;of()&lt;/code&gt; function.</source>
          <target state="translated">では&lt;a href=&quot;toh-pt6&quot;&gt;HTTP上のチュートリアルの後半&lt;/a&gt;には、角度のことを学びます &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をメソッドが返すRxJS &lt;code&gt;Observable&lt;/code&gt; 秒。このチュートリアルでは、RxJS &lt;code&gt;of()&lt;/code&gt; 関数を使用してサーバーからデータを取得する方法をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="3cf5e053e84e39697369f0ce6c53d2386e757b8d" translate="yes" xml:space="preserve">
          <source>In a common anti-XSRF technique, the application server sends a randomly generated authentication token in a cookie. The client code reads the cookie and adds a custom request header with the token in all subsequent requests. The server compares the received cookie value to the request header value and rejects the request if the values are missing or don't match.</source>
          <target state="translated">一般的なアンチ XSRF 技術では、アプリケーションサーバはクッキーの中にランダムに生成された認証トークンを送ります。クライアントコードはクッキーを読み、それ以降のすべてのリクエストにトークンを含むカスタムのリクエストヘッダーを追加します。サーバは受け取ったクッキーの値をリクエストヘッダの値と比較し、値が見つからない場合や一致しない場合はリクエストを拒否します。</target>
        </trans-unit>
        <trans-unit id="1d8d7cbdfb73e6a03899934d4c9da16af41b336d" translate="yes" xml:space="preserve">
          <source>In a cross-site request forgery (CSRF or XSRF), an attacker tricks the user into visiting a different web page (such as &lt;code&gt;evil.com&lt;/code&gt;) with malignant code that secretly sends a malicious request to the application's web server (such as &lt;code&gt;example-bank.com&lt;/code&gt;).</source>
          <target state="translated">クロスサイトリクエストフォージェリ（CSRFまたはXSRF）では、攻撃者が悪意のあるリクエストをアプリケーションのWebサーバー（例-など）に密かに送信する悪性コードを使用して、ユーザーをだまして別のWebページ（ &lt;code&gt;evil.com&lt;/code&gt; など）にアクセスさ &lt;code&gt;example-bank.com&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6dca33d40db6d10cf9713bad29c95abc927de179" translate="yes" xml:space="preserve">
          <source>In a game, you may want to implement a transformation that raises a value exponentially to increase a hero's power. For example, if the hero's score is 2, boosting the hero's power exponentially by 10 produces a score of 1024. You can use a custom pipe for this transformation.</source>
          <target state="translated">ゲームでは、ヒーローのパワーを指数関数的に上げる変換を実装したい場合があります。例えば、ヒーローのスコアが2の場合、ヒーローのパワーを指数関数的に10上げると1024のスコアが得られます。この変換にはカスタムパイプを使用することができます。</target>
        </trans-unit>
        <trans-unit id="c294d986a3a0791f76abb2659d73016c21090bb6" translate="yes" xml:space="preserve">
          <source>In a hybrid app you run both frameworks at the same time. This means that you need at least one module each from both AngularJS and Angular.</source>
          <target state="translated">ハイブリッドアプリでは、両方のフレームワークを同時に実行します。つまり、AngularJSとAngularの両方から少なくとも1つずつモジュールが必要になります。</target>
        </trans-unit>
        <trans-unit id="dd49097c4af31e8ff37d4dffaf61ab60999b9c63" translate="yes" xml:space="preserve">
          <source>In a hybrid application you run both versions of Angular at the same time. That means that you need at least one module each from both AngularJS and Angular. You will import &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; inside the NgModule, and then use it for bootstrapping the AngularJS module.</source>
          <target state="translated">ハイブリッドアプリケーションでは、Angularの両方のバージョンを同時に実行します。つまり、AngularJSとAngularの両方からそれぞれ少なくとも1つのモジュールが必要です。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 内にUpgradeModule をインポートし、それを使用してAngularJSモジュールをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="eecc29f766a5b275d626b33d41f80a280c20298d" translate="yes" xml:space="preserve">
          <source>In a large translation project, you would send the &lt;code&gt;messages.fr.xlf&lt;/code&gt; file to a French translator who would enter the translations using an XLIFF file editor.</source>
          <target state="translated">大規模な翻訳プロジェクトでは、XLIFFファイルエディターを使用して翻訳を入力するフランス語の翻訳者に &lt;code&gt;messages.fr.xlf&lt;/code&gt; ファイルを送信します。</target>
        </trans-unit>
        <trans-unit id="763a34fdd8fac0b4e83d70065f59dafe9753fced" translate="yes" xml:space="preserve">
          <source>In a likely implementation, the &lt;code&gt;&amp;lt;lib-card&amp;gt;&lt;/code&gt; component uses &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;()&lt;/code&gt; to obtain &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;lib-body&amp;gt;&lt;/code&gt;, as in the following.</source>
          <target state="translated">可能性のある実装では、次のように、 &lt;code&gt;&amp;lt;lib-card&amp;gt;&lt;/code&gt; コンポーネントは &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;()&lt;/code&gt; を使用して &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;lib-body&amp;gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="65d7af41d00fdcbff992b94c404b92c9d9626cd2" translate="yes" xml:space="preserve">
          <source>In a logical tree, this same idea might look like this:</source>
          <target state="translated">論理ツリーでは、この同じ考えは次のようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7696fb27896c9162de3bfeb3b997d19364c236ec" translate="yes" xml:space="preserve">
          <source>In a more complex translation, the information and context in the &lt;a href=&quot;i18n#help-translator&quot;&gt;description and meaning elements&lt;/a&gt; described previously would help you choose the right words for translation.</source>
          <target state="translated">より複雑な翻訳では、前述の&lt;a href=&quot;i18n#help-translator&quot;&gt;説明と意味要素&lt;/a&gt;の情報とコンテキストが、翻訳に適した単語を選択するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="622221c893367be5aa97d75408ed81b53a6c93b4" translate="yes" xml:space="preserve">
          <source>In a reactive form, the source of truth is the component class. Instead of adding validators through attributes in the template, you add validator functions directly to the form control model in the component class. Angular then calls these functions whenever the value of the control changes.</source>
          <target state="translated">リアクティブなフォームでは、真実のソースはコンポーネントクラスです。テンプレートの属性を通してバリデータを追加するのではなく、コンポーネントクラスのフォームコントロールモデルにバリデータ関数を直接追加します。Angularはコントロールの値が変わるたびにこれらの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="48d79754006d33a97227a0a4118efa5286db6a19" translate="yes" xml:space="preserve">
          <source>In a real application, the element that receives focus will depend on your specific application structure and layout. The focused element should put users in a position to immediately move into the main content that has just been routed into view. You should avoid situations where focus returns to the &lt;code&gt;body&lt;/code&gt; element after a route change.</source>
          <target state="translated">実際のアプリケーションでは、フォーカスを受け取る要素は、特定のアプリケーションの構造とレイアウトによって異なります。フォーカスされた要素により、ユーザーは、ビューにルーティングされたばかりのメインコンテンツにすぐに移動できるようになります。ルートの変更後にフォーカスが &lt;code&gt;body&lt;/code&gt; 要素に戻るような状況は避けてください。</target>
        </trans-unit>
        <trans-unit id="39db9cdd4eed1089be0ce0d095908e3625bd0e28" translate="yes" xml:space="preserve">
          <source>In a real world application, the &lt;code&gt;HeroesService&lt;/code&gt; is responsible for making an HTTP request to the hero database to check if the alter ego is available. From the validator's point of view, the actual implementation of the service is not important, so we can just code against the &lt;code&gt;HeroesService&lt;/code&gt; interface.</source>
          <target state="translated">実際のアプリケーションでは、 &lt;code&gt;HeroesService&lt;/code&gt; がヒーローデータベースにHTTPリクエストを送信して、分身が使用可能かどうかを確認します。バリデーターの観点からは、サービスの実際の実装は重要ではないので、 &lt;code&gt;HeroesService&lt;/code&gt; インターフェースに対してコーディングするだけです。</target>
        </trans-unit>
        <trans-unit id="4eaac616f5e5e17f7e21411145e0904350881321" translate="yes" xml:space="preserve">
          <source>In a real world application, the &lt;code&gt;HeroesService&lt;/code&gt; would be responsible for making an HTTP request to the hero database to check if the alter ego is available. From the validator's point of view, the actual implementation of the service is not important, so the example can just code against the &lt;code&gt;HeroesService&lt;/code&gt; interface.</source>
          <target state="translated">実際のアプリケーションでは、 &lt;code&gt;HeroesService&lt;/code&gt; がヒーローデータベースにHTTPリクエストを送信して、分身が利用可能かどうかを確認します。バリデーターの観点からは、サービスの実際の実装は重要ではないため、この例では &lt;code&gt;HeroesService&lt;/code&gt; インターフェースに対してコーディングするだけで済みます。</target>
        </trans-unit>
        <trans-unit id="65531fa3aa55e1677f978dd0f3bf9d63a3c9b899" translate="yes" xml:space="preserve">
          <source>In a single-page app, you change what the user sees by showing or hiding portions of the display that correspond to particular components, rather than going out to the server to get a new page. As users perform application tasks, they need to move between the different &lt;a href=&quot;glossary#view&quot;&gt;views&lt;/a&gt; that you have defined.</source>
          <target state="translated">シングルページアプリでは、サーバーにアクセスして新しいページを取得するのではなく、特定のコンポーネントに対応するディスプレイの部分を表示または非表示にすることで、ユーザーに表示される内容を変更します。ユーザーがアプリケーションタスクを実行するとき、ユーザーは定義したさまざまな&lt;a href=&quot;glossary#view&quot;&gt;ビュー&lt;/a&gt;間を移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4f059d661f6b60ab2d7cea20ac87eea7d864f29" translate="yes" xml:space="preserve">
          <source>In a string, as milliseconds: &lt;code&gt;'100ms'&lt;/code&gt;</source>
          <target state="translated">文字列、ミリ秒： &lt;code&gt;'100ms'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f2235358d12c7b39b876e3be62943c44b49d011" translate="yes" xml:space="preserve">
          <source>In a string, as seconds: &lt;code&gt;'0.1s'&lt;/code&gt;</source>
          <target state="translated">文字列、秒として： &lt;code&gt;'0.1s'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b02b6bf1c988cc6d5e45d6127bc131c047c48941" translate="yes" xml:space="preserve">
          <source>In a template-driven form the source of truth is the template. You do not have direct programmatic access to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance, as shown in Figure 2.</source>
          <target state="translated">テンプレート駆動型の形式では、信頼できる情報源はテンプレートです。図2に示すように、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスに直接プログラムでアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="94ab58ff64569d109e86670107a427804d9c8361" translate="yes" xml:space="preserve">
          <source>In a typical Angular project, the polyfill is not used in production builds, so removing it should not impact production applications. The goal behind this removal is overall simplification of the build setup and decrease in the number of external dependencies.</source>
          <target state="translated">典型的な Angular プロジェクトでは、ポリフィルは本番ビルドでは使用されないので、ポリフィルを削除しても本番アプリケーションに影響はありません。この削除の目的は、ビルドのセットアップを全体的に簡素化し、外部依存の数を減らすことです。</target>
        </trans-unit>
        <trans-unit id="f31913605e059fbded1813d77c660c2f567cb66a" translate="yes" xml:space="preserve">
          <source>In actual development you will typically use the &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;, a powerful command-line tool that lets you generate and modify applications. For a full step-by-step guide that shows how to use the CLI to create a new project and all of its parts, see &lt;a href=&quot;tutorial&quot;&gt;Tutorial: Tour of Heroes&lt;/a&gt;.</source>
          <target state="translated">実際の開発では、一般的に使用されます&lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;角度CLI&lt;/a&gt;、あなたが生成し、アプリケーションを修正することができます強力なコマンドラインツールを。CLIを使用して新しいプロジェクトとそのすべてのパーツを作成する方法を示す完全なステップバイステップガイドについては、&lt;a href=&quot;tutorial&quot;&gt;チュートリアル：ヒーローのツアーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="72b71fb915e61812888abd66b33694904bf21659" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;../&lt;/code&gt;, you can use &lt;code&gt;./&lt;/code&gt; or no leading slash to specify the current level.</source>
          <target state="translated">&lt;code&gt;../&lt;/code&gt; に加えて、。 &lt;code&gt;./&lt;/code&gt; または先頭のスラッシュなしを使用して、現在のレベルを指定できます。</target>
        </trans-unit>
        <trans-unit id="faa17f4e480d1c38b9b673c33c3726b0386461a6" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;component&lt;/code&gt;, the &lt;code&gt;data&lt;/code&gt; property of each route defines the key animation-specific configuration associated with a route. The &lt;code&gt;data&lt;/code&gt; property value is passed into &lt;code&gt;AppComponent&lt;/code&gt; when the route changes. You can also pass additional data in route config that is consumed within the animation. The data property value has to match the transitions defined in the &lt;code&gt;routeAnimation&lt;/code&gt; trigger, which we'll define later.</source>
          <target state="translated">加えて、 &lt;code&gt;path&lt;/code&gt; 及び &lt;code&gt;component&lt;/code&gt; 、 &lt;code&gt;data&lt;/code&gt; 各ルートのプロパティは、ルートに関連付けられたキーアニメーション固有の設定を定義します。 &lt;code&gt;data&lt;/code&gt; プロパティの値がに渡される &lt;code&gt;AppComponent&lt;/code&gt; ルートが変更されたとき。アニメーション内で使用される追加のデータをルート構成で渡すこともできます。 dataプロパティの値は、 &lt;code&gt;routeAnimation&lt;/code&gt; 定義するrouteAnimationトリガーで定義された遷移と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="518ce8e445924106f3aaaa4e7714894c154607fc" translate="yes" xml:space="preserve">
          <source>In addition to build optimizations, Angular also has a runtime production mode. Angular apps run in development mode by default, as you can see by the following message on the browser console:</source>
          <target state="translated">ビルドの最適化に加えて、Angularにはランタイムのプロダクションモードもあります。ブラウザコンソールの以下のメッセージでわかるように、Angularアプリはデフォルトでは開発モードで実行されます。</target>
        </trans-unit>
        <trans-unit id="92e4dba02fc399ceabf0edd421996ac182385627" translate="yes" xml:space="preserve">
          <source>In addition to components, there are two other kinds of directives: &lt;em&gt;structural&lt;/em&gt; and &lt;em&gt;attribute&lt;/em&gt;. Angular defines a number of directives of both kinds, and you can define your own using the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">コンポーネントに加えて、&lt;em&gt;構造&lt;/em&gt;と&lt;em&gt;属性という&lt;/em&gt; 2種類のディレクティブがあり&lt;em&gt;ます&lt;/em&gt;。Angularは両方の種類のディレクティブをいくつか定義しており、 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; デコレーターを使用して独自のディレクティブを定義できます。</target>
        </trans-unit>
        <trans-unit id="c4b67e633224044ac7bd833ae2a699b14035241e" translate="yes" xml:space="preserve">
          <source>In addition to containing or pointing to the template, the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata configures, for example, how the component can be referenced in HTML and what services it requires.</source>
          <target state="translated">テンプレートに含むまたはポインティングに加えて、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータ設定し、例えば、構成要素は、HTMLの中で参照することができますどのように、どのようなサービス、それが必要です。</target>
        </trans-unit>
        <trans-unit id="c324bf827f9e8b85ddf5cbe6b3ffb5a5a9dfb74d" translate="yes" xml:space="preserve">
          <source>In addition to fetching data from a server, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; supports other HTTP methods such as PUT, POST, and DELETE, which you can use to modify the remote data.</source>
          <target state="translated">サーバーからデータをフェッチすることに加えて、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は、リモートデータを変更するために使用できるPUT、POST、DELETEなどの他のHTTPメソッドをサポートします。</target>
        </trans-unit>
        <trans-unit id="039608b3a3dac9dddfb10f624ea1dc12072178c7" translate="yes" xml:space="preserve">
          <source>In addition to fetching data from the server, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; supports mutating requests, that is, sending data to the server with other HTTP methods such as PUT, POST, and DELETE.</source>
          <target state="translated">サーバーからのデータのフェッチに加えて、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は変更要求をサポートします。つまり、PUT、POST、DELETEなどの他のHTTPメソッドを使用してサーバーにデータを送信します。</target>
        </trans-unit>
        <trans-unit id="705df2c178e744c66c353109a34235be8b2f64f7" translate="yes" xml:space="preserve">
          <source>In addition to loading modules on-demand, you can load modules asynchronously with preloading.</source>
          <target state="translated">オンデマンドでモジュールをロードするだけでなく、プリロードで非同期にモジュールをロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="b29a9483bfd852b5d32af6d3606da4cd76cef0c6" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/testrequest#error&quot;&gt;error()&lt;/a&gt;&lt;/code&gt; handler that you provide on subscription, RxJS provides the &lt;code&gt;catchError&lt;/code&gt; operator that lets you handle known errors in the observable recipe.</source>
          <target state="translated">サブスクリプションで提供する &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/testrequest#error&quot;&gt;error()&lt;/a&gt;&lt;/code&gt; ハンドラーに加えて、RxJSには、 &lt;code&gt;catchError&lt;/code&gt; 可能なレシピの既知のエラーを処理できるcatchErrorオペレーターが用意されています。</target>
        </trans-unit>
        <trans-unit id="92c75e8ae8b6ad9aee1ec9b36daa2b6542f56b8d" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;error()&lt;/code&gt; handler that you provide on subscription, RxJS provides the &lt;code&gt;catchError&lt;/code&gt; operator that lets you handle known errors in the observable recipe.</source>
          <target state="translated">サブスクリプションで提供する &lt;code&gt;error()&lt;/code&gt; ハンドラーに加えて、RxJSは、 &lt;code&gt;catchError&lt;/code&gt; 可能なレシピの既知のエラーを処理できるcatchError演算子を提供します。</target>
        </trans-unit>
        <trans-unit id="4d17e5bcfee96b98472da1a3a4c26804c7ccb773" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;component&lt;/code&gt; properties, there's a new property called &lt;code&gt;outlet&lt;/code&gt;, which is set to &lt;code&gt;'popup'&lt;/code&gt;. This route now targets the popup outlet and the &lt;code&gt;ComposeMessageComponent&lt;/code&gt; will display there.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; と &lt;code&gt;component&lt;/code&gt; プロパティに加えて、 &lt;code&gt;outlet&lt;/code&gt; と呼ばれる新しいプロパティがあります。これは &lt;code&gt;'popup'&lt;/code&gt; に設定されています。このルートはポップアップアウトレットをターゲットにし、 &lt;code&gt;ComposeMessageComponent&lt;/code&gt; がそこに表示されます。</target>
        </trans-unit>
        <trans-unit id="99a32f2cf9ab38b55656a6b1806cd88678fd2727" translate="yes" xml:space="preserve">
          <source>In addition to the full mode behavior, Angular version 9:</source>
          <target state="translated">フルモードの動作に加えて、Angularバージョン9。</target>
        </trans-unit>
        <trans-unit id="c1e985521f9a2f7cb86a15d64a93de26e6cd3294" translate="yes" xml:space="preserve">
          <source>In addition to the name and description, each schematic has a &lt;code&gt;factory&lt;/code&gt; property that identifies the schematic&amp;rsquo;s entry point. In the example, you invoke the schematic's defined functionality by calling the &lt;code&gt;helloWorld()&lt;/code&gt; function in the main file, &lt;code&gt;hello-world/index.ts&lt;/code&gt;.</source>
          <target state="translated">名前と説明に加えて、各回路図には、回路図のエントリポイントを識別する &lt;code&gt;factory&lt;/code&gt; プロパティがあります。この例では、メインファイル &lt;code&gt;hello-world/index.ts&lt;/code&gt; の &lt;code&gt;helloWorld()&lt;/code&gt; 関数を呼び出すことにより、回路図の定義済み機能を呼び出します。</target>
        </trans-unit>
        <trans-unit id="712e3fe7e7a305ad3e3b3654a51a48abbd95e90e" translate="yes" xml:space="preserve">
          <source>In addition to upgrading AngularJS dependencies, you can also &lt;em&gt;downgrade&lt;/em&gt; Angular dependencies, so that you can use them from AngularJS. This can be useful when you start migrating services to Angular or creating new services in Angular while retaining components written in AngularJS.</source>
          <target state="translated">AngularJS依存関係のアップグレードに加えて、AngularJSから使用できるように、Angular依存関係を&lt;em&gt;ダウングレード&lt;/em&gt;することもできます。これは、AngularJSで記述されたコンポーネントを保持しながら、Angularへのサービスの移行やAngularでの新しいサービスの作成を開始するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a8a500fbb4767ecd8e3cddda60f46e32e83f4867" translate="yes" xml:space="preserve">
          <source>In addition, this pattern mixes template-driven and reactive forms strategies, which prevents taking advantage of the full benefits of either strategy. Setting the value in the template violates the template-agnostic principles behind reactive forms, whereas adding a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; layer in the class removes the convenience of defining forms in the template.</source>
          <target state="translated">さらに、このパターンでは、テンプレート駆動型とリアクティブフォームの戦略が混在しているため、どちらの戦略のメリットも十分に活用できません。テンプレートに値を設定すると、リアクティブフォームの背後にあるテンプレートに依存しない原則に違反しますが、クラスに &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; レイヤーを追加すると、テンプレートでフォームを定義する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="8190e8a3e053b6c71a891443caba3b79821b866e" translate="yes" xml:space="preserve">
          <source>In addition, this pattern mixes template-driven and reactive forms strategies, which we generally don't recommend because it doesn't take advantage of the full benefits of either strategy. Setting the value in the template violates the template-agnostic principles behind reactive forms, whereas adding a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; layer in the class removes the convenience of defining forms in the template.</source>
          <target state="translated">さらに、このパターンにはテンプレート駆動型と反応型のフォーム戦略が混在していますが、どちらの戦略のメリットも十分に活用されていないため、通常はお勧めしません。テンプレートに値を設定すると、リアクティブフォームの背後にあるテンプレートにとらわれない原則に違反しますが、クラスに &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; レイヤーを追加すると、テンプレートでフォームを定義する際の利便性が失われます。</target>
        </trans-unit>
        <trans-unit id="af0291fe53a38a32a912d25b30993b403d4fc87a" translate="yes" xml:space="preserve">
          <source>In alignment with the versioning scheme described above, we commit to support the following update paths:</source>
          <target state="translated">上記のバージョン管理スキームに合わせて、以下の更新パスをサポートすることを約束します。</target>
        </trans-unit>
        <trans-unit id="c0ecac3c059187a5fafe89e15d014bf2e83d301b" translate="yes" xml:space="preserve">
          <source>In an &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; parameter is the next interceptor in the chain.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; パラメータは、チェーン内の次のインターセプターです。</target>
        </trans-unit>
        <trans-unit id="d07e81908343ee4b3c3cdfd03defc53493e77ee0" translate="yes" xml:space="preserve">
          <source>In an Angular app, NgModules and JavaScript modules work together.</source>
          <target state="translated">Angularアプリでは、NgModulesとJavaScriptモジュールが連携して動作します。</target>
        </trans-unit>
        <trans-unit id="2995d3f69c1ef04572631628ef95d9cf0e177e02" translate="yes" xml:space="preserve">
          <source>In an AngularJS application you have a root AngularJS module, which will also be used to bootstrap the AngularJS application.</source>
          <target state="translated">AngularJSアプリケーションでは、ルートのAngularJSモジュールがあり、これはAngularJSアプリケーションのブートストラップにも使用されます。</target>
        </trans-unit>
        <trans-unit id="fd772c1089107ba4b1e2e24a4046b9da7897a2c2" translate="yes" xml:space="preserve">
          <source>In an SPA, all of your application's functions exist in a single HTML page. As users access your application's features, the browser needs to render only the parts that matter to the user, instead of loading a new page. This pattern can significantly improve your application's user experience.</source>
          <target state="translated">SPA では、アプリケーションのすべての機能が 1 つの HTML ページ内に存在します。ユーザーがアプリケーションの機能にアクセスすると、ブラウザは新しいページを読み込むのではなく、ユーザーにとって重要な部分だけをレンダリングする必要があります。このパターンは、アプリケーションのユーザーエクスペリエンスを大幅に向上させることができます。</target>
        </trans-unit>
        <trans-unit id="0e0bac0cafa0bf97240de46fb6da1f0f46ccf556" translate="yes" xml:space="preserve">
          <source>In an event binding, Angular configures an event handler for the target event. You can use event binding with your own custom events.</source>
          <target state="translated">イベントバインディングでは、Angularはターゲットイベントのイベントハンドラを設定します。独自のカスタムイベントでイベントバインディングを使用することができます。</target>
        </trans-unit>
        <trans-unit id="186700bd8ef16b21e5cb3f12259a7cc3c66151a7" translate="yes" xml:space="preserve">
          <source>In an event binding, Angular sets up an event handler for the target event.</source>
          <target state="translated">イベントバインディングでは、Angularは対象となるイベントのイベントハンドラを設定します。</target>
        </trans-unit>
        <trans-unit id="442397b093d27259b79b2a4c113aeacd3de8b1b6" translate="yes" xml:space="preserve">
          <source>In apps built with Angular versions prior to 6.0, services are registered NgModule &lt;code&gt;providers&lt;/code&gt; arrays as follows:</source>
          <target state="translated">6.0より前のAngularバージョンでビルドされたアプリでは、サービスは次のようにNgModule &lt;code&gt;providers&lt;/code&gt; 配列に登録されます。</target>
        </trans-unit>
        <trans-unit id="36a5631d9ccd89307b737000baab048281f5974e" translate="yes" xml:space="preserve">
          <source>In both AngularJS and Angular, modules help you organize your application into cohesive blocks of functionality.</source>
          <target state="translated">AngularJSとAngularの両方で、モジュールはアプリケーションを機能のまとまったブロックに整理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f57cddaa2037c3cca33aee4543b80713320351a7" translate="yes" xml:space="preserve">
          <source>In both cases, the parenthetical annotation provides the error that caused the service worker to enter the degraded state.</source>
          <target state="translated">いずれの場合も、親項注釈は、サービスワーカーが劣化状態に入る原因となったエラーを提供します。</target>
        </trans-unit>
        <trans-unit id="aab616ac7bc0cc1d96378c8b4324b09775cc128a" translate="yes" xml:space="preserve">
          <source>In both components you're relying on Angular's &lt;strong&gt;formGroup&lt;/strong&gt; to connect the template HTML to the underlying control objects, populated from the question model with display and validation rules.</source>
          <target state="translated">どちらのコンポーネントでも、Angularの&lt;strong&gt;formGroup&lt;/strong&gt;を使用して、テンプレートHTMLを、表示ルールと検証ルールが設定された質問モデルから入力された、基になるコントロールオブジェクトに接続します。</target>
        </trans-unit>
        <trans-unit id="9d09b6e2a4873e3a91fe8b87647db6546a2185d7" translate="yes" xml:space="preserve">
          <source>In browsers that support Custom Elements natively, the specification requires developers use ES2015 classes to define Custom Elements - developers can opt-in to this by setting the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;: &quot;es2015&quot;&lt;/code&gt; property in their project's &lt;code&gt;tsconfig.json&lt;/code&gt;. As Custom Element and ES2015 support may not be available in all browsers, developers can instead choose to use a polyfill to support older browsers and ES5 code.</source>
          <target state="translated">カスタム要素をネイティブでサポートするブラウザーでは、仕様では開発者がES2015クラスを使用してカスタム要素を定義する必要があります。開発者は、プロジェクトの &lt;code&gt;tsconfig.json&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;: &quot;es2015&quot;&lt;/code&gt; プロパティを設定することでこれにオプトインできます。カスタム要素とES2015のサポートはすべてのブラウザーで利用できるとは限らないため、開発者は代わりにポリフィルを使用して古いブラウザーとES5コードをサポートすることを選択できます。</target>
        </trans-unit>
        <trans-unit id="f37bb8d3eb739f6063c7dcad808c341026c89642" translate="yes" xml:space="preserve">
          <source>In browsers that support Custom Elements natively, the specification requires developers use ES2015 classes to define Custom Elements - developers can opt-in to this by setting the &lt;code&gt;target: &quot;es2015&quot;&lt;/code&gt; property in their project's &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt;. As Custom Element and ES2015 support may not be available in all browsers, developers can instead choose to use a polyfill to support older browsers and ES5 code.</source>
          <target state="translated">カスタム要素をネイティブにサポートするブラウザーでは、仕様により、開発者はES2015クラスを使用してカスタム要素を定義する必要があります。開発者は、プロジェクトの&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript構成ファイルで&lt;/a&gt; &lt;code&gt;target: &quot;es2015&quot;&lt;/code&gt; プロパティを設定することでこれにオプトインできます。カスタム要素とES2015のサポートはすべてのブラウザーで利用できるわけではないため、開発者は代わりにポリフィルを使用して古いブラウザーとES5コードをサポートすることを選択できます。</target>
        </trans-unit>
        <trans-unit id="79b4eea321a5de0ddf1c5f7ef405fd4e7f93c3ff" translate="yes" xml:space="preserve">
          <source>In case of a false positive like these, there are a few options:</source>
          <target state="translated">このような偽陽性の場合は、いくつかの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="6851ccebdc3d3c36a33544a460a1db498eebbcf2" translate="yes" xml:space="preserve">
          <source>In case of a key collision between current parameters and those in the &lt;code&gt;queryParams&lt;/code&gt; object, the new value is used.</source>
          <target state="translated">現在のパラメーターと &lt;code&gt;queryParams&lt;/code&gt; オブジェクトのパラメーターの間でキーが衝突した場合は、新しい値が使用されます。</target>
        </trans-unit>
        <trans-unit id="16c543a5f2150ce78c5c42b4020166d1185b5263" translate="yes" xml:space="preserve">
          <source>In cases like this you can use a &lt;em&gt;factory provider&lt;/em&gt;. Factory providers can also be useful when creating an instance of a dependency from a third-party library that wasn't designed to work with DI.</source>
          <target state="translated">このような場合、&lt;em&gt;ファクトリプロバイダーを&lt;/em&gt;使用でき&lt;em&gt;ます&lt;/em&gt;。ファクトリプロバイダーは、DIで動作するように設計されていないサードパーティライブラリから依存関係のインスタンスを作成するときにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="faae4cf3fede383457b93e931cc0ff31f3e03fdd" translate="yes" xml:space="preserve">
          <source>In certain cases, when you apply backticks around a term, it may auto-link to the API documentation. If you do not intend the term to be a link, use the following syntax:</source>
          <target state="translated">特定のケースでは、用語の周囲にバックトークを適用すると、API ドキュメントに自動リンクすることがあります。用語をリンクにしたくない場合は、以下の構文を使用してください。</target>
        </trans-unit>
        <trans-unit id="f8ea84d921ad7b0f2cb3c42488bb64d56b2bfc41" translate="yes" xml:space="preserve">
          <source>In collaboration with Google's security team, we're adding support for the new Trusted Types API. This web platform API will help developers build more secure web applications.</source>
          <target state="translated">Google のセキュリティチームと協力して、新しい Trusted Types API のサポートを追加します。この Web プラットフォーム API は、開発者がより安全な Web アプリケーションを構築するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="882fb17df5830c3e1bef3d000bb9f4170d23d509" translate="yes" xml:space="preserve">
          <source>In contrast to the non-AngularJS version &lt;code&gt;location.host&lt;/code&gt; which returns &lt;code&gt;hostname:port&lt;/code&gt;, this returns the &lt;code&gt;hostname&lt;/code&gt; portion only.</source>
          <target state="translated">&lt;code&gt;hostname:port&lt;/code&gt; を返す非AngularJSバージョンの &lt;code&gt;location.host&lt;/code&gt; とは対照的に、これは &lt;code&gt;hostname&lt;/code&gt; 部分のみを返します。</target>
        </trans-unit>
        <trans-unit id="87ccfab30a30e01a9400a0f86574039dd8079e53" translate="yes" xml:space="preserve">
          <source>In data binding, you declare the relationship between an HTML widget and a data source and let the framework handle the details. Data binding is an alternative to manually pushing application data values into HTML, attaching event listeners, pulling changed values from the screen, and updating application data values.</source>
          <target state="translated">データバインディングでは、HTML ウィジェットとデータソースの関係を宣言し、フレームワークに詳細を処理させます。データバインディングは、アプリケーションのデータ値を手動で HTML にプッシュしたり、イベントリスナーをアタッチしたり、変更された値を画面から引っ張ってきたり、アプリケーションのデータ値を更新したりする代わりの方法です。</target>
        </trans-unit>
        <trans-unit id="818ea6e396a842959f81b286c28f47f668e4c077" translate="yes" xml:space="preserve">
          <source>In developing a form, it's important to create a data-entry experience that guides the user efficiently and effectively through the workflow.</source>
          <target state="translated">フォームを開発する際には、ワークフローを通じてユーザーを効率的かつ効果的に誘導するデータ入力体験を作成することが重要です。</target>
        </trans-unit>
        <trans-unit id="a083380d8f26ba15bb7df0f10b038ec65342e2e3" translate="yes" xml:space="preserve">
          <source>In development mode, &lt;code&gt;&lt;a href=&quot;applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; also performs a second change detection cycle to ensure that no further changes are detected. If additional changes are picked up during this second cycle, bindings in the app have side-effects that cannot be resolved in a single change detection pass. In this case, Angular throws an error, since an Angular application can only have one change detection pass during which all change detection must complete.</source>
          <target state="translated">開発モードでは、 &lt;code&gt;&lt;a href=&quot;applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; は2回目の変更検出サイクルも実行して、それ以上変更が検出されないようにします。この2番目のサイクル中に追加の変更が検出された場合、アプリのバインディングには、1回の変更検出パスでは解決できない副作用があります。この場合、Angularアプリケーションはすべての変更検出を完了する必要がある1つの変更検出パスしか持てないため、Angularはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="811ec2dd2684204350fa7e95f0b850000a81e45e" translate="yes" xml:space="preserve">
          <source>In development mode, &lt;code&gt;&lt;a href=&quot;testing/tick&quot;&gt;tick&lt;/a&gt;()&lt;/code&gt; also performs a second change detection cycle to ensure that no further changes are detected. If additional changes are picked up during this second cycle, bindings in the app have side-effects that cannot be resolved in a single change detection pass. In this case, Angular throws an error, since an Angular application can only have one change detection pass during which all change detection must complete.</source>
          <target state="translated">開発モードでは、 &lt;code&gt;&lt;a href=&quot;testing/tick&quot;&gt;tick&lt;/a&gt;()&lt;/code&gt; は2番目の変更検出サイクルも実行して、それ以上の変更が検出されないようにします。この2番目のサイクル中に追加の変更が取得された場合、アプリのバインディングには、1回の変更検出パスでは解決できない副作用があります。この場合、Angularアプリケーションはすべての変更検出を完了する必要がある変更検出パスを1つしか持つことができないため、Angularはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="8edaa0e56f5e0453fa057164fddb4d07e168ba3e" translate="yes" xml:space="preserve">
          <source>In development, you typically start the server in the folder that holds &lt;code&gt;index.html&lt;/code&gt;. That's the root folder and you'd add &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; near the top of &lt;code&gt;index.html&lt;/code&gt; because &lt;code&gt;/&lt;/code&gt; is the root of the app.</source>
          <target state="translated">開発では、通常、サーバーを &lt;code&gt;index.html&lt;/code&gt; を保持するフォルダーから起動します。これは、ルートフォルダだとあなたが追加したい &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; の上部付近 &lt;code&gt;index.html&lt;/code&gt; ので &lt;code&gt;/&lt;/code&gt; アプリのルートです。</target>
        </trans-unit>
        <trans-unit id="d5e95ebfc9910d4c5b6ab6e521556a2778701651" translate="yes" xml:space="preserve">
          <source>In either case, a &lt;code&gt;next&lt;/code&gt; handler is required. The &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; handlers are optional.</source>
          <target state="translated">どちらの場合も、 &lt;code&gt;next&lt;/code&gt; ハンドラーが必要です。 &lt;code&gt;error&lt;/code&gt; と &lt;code&gt;complete&lt;/code&gt; ハンドラはオプションです。</target>
        </trans-unit>
        <trans-unit id="3ec537881a886f5726ad8dd47b7a8886c8935dfb" translate="yes" xml:space="preserve">
          <source>In either style, the template data bindings have the same access to the component's properties.</source>
          <target state="translated">どちらのスタイルでも、テンプレート・データ・バインディングはコンポーネントのプロパティに同じアクセス権を持っています。</target>
        </trans-unit>
        <trans-unit id="0009c17cd723f367233376c40644dec66747da7a" translate="yes" xml:space="preserve">
          <source>In fact, each &lt;code&gt;subscribe()&lt;/code&gt; initiates a separate, independent execution of the observable. Subscribing twice results in two HTTP requests.</source>
          <target state="translated">実際、各 &lt;code&gt;subscribe()&lt;/code&gt; は、オブザーバブルの個別の独立した実行を開始します。2回サブスクライブすると、2つのHTTPリクエストが発生します。</target>
        </trans-unit>
        <trans-unit id="5809f58a35d5011cd952f322fe5b7ab8b70d3f4d" translate="yes" xml:space="preserve">
          <source>In fact, if you try to declare it, Angular will throw an error because &lt;code&gt;HeroDetailComponent&lt;/code&gt; is declared in both the &lt;code&gt;HeroModule&lt;/code&gt; and the &lt;code&gt;DynamicTestModule&lt;/code&gt; created by the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実際、それを宣言しようとすると、Angularはエラーをスローします。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; は、HeroDetailComponentが、 &lt;code&gt;HeroModule&lt;/code&gt; と &lt;code&gt;DynamicTestModule&lt;/code&gt; によって作成された &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 両方で宣言されているためです。</target>
        </trans-unit>
        <trans-unit id="ec88266d9e04212fedf424f84a94840a7da988a9" translate="yes" xml:space="preserve">
          <source>In fact, many libraries declare and export components you'll never use. For example, a material design library will export all components because it doesn&amp;rsquo;t know which ones you will use. However, it is unlikely that you will use them all. For the ones you don't reference, the tree shaker drops these components from the final code package.</source>
          <target state="translated">実際、多くのライブラリは、使用しないコンポーネントを宣言してエクスポートします。たとえば、マテリアルデザインライブラリはどのコンポーネントを使用するかわからないため、すべてのコンポーネントをエクスポートします。ただし、すべてを使用することはほとんどありません。参照していないものについては、ツリーシェーカーはこれらのコンポーネントを最終的なコードパッケージから削除します。</target>
        </trans-unit>
        <trans-unit id="2d17b7b9c7ecdf9e0a0cf8fcb801a644d503a501" translate="yes" xml:space="preserve">
          <source>In fact, many libraries declare and export components you'll never use. If you don't reference them, the tree shaker drops these components from the final code package.</source>
          <target state="translated">実際、多くのライブラリでは、使用することのないコンポーネントを宣言したり、エクスポートしたりしています。それらを参照しないと、ツリーシェーカーはこれらのコンポーネントを最終的なコードパッケージから削除します。</target>
        </trans-unit>
        <trans-unit id="547d2a453086180e737f6fdfa0676b0213dec7f1" translate="yes" xml:space="preserve">
          <source>In general, a module collects a block of code dedicated to a single purpose. Angular uses standard JavaScript modules and also defines an Angular module, &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一般に、モジュールは単一の目的に特化したコードのブロックを収集します。Angularは標準のJavaScriptモジュールを使用し、Angularモジュール &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; も定義しています。</target>
        </trans-unit>
        <trans-unit id="4d77226bb13d928e95fd3b19205296b9adedfdf9" translate="yes" xml:space="preserve">
          <source>In general, a test should end with no queued tasks. When pending timer tasks are expected, call &lt;code&gt;&lt;a href=&quot;../api/core/testing/discardperiodictasks&quot;&gt;discardPeriodicTasks&lt;/a&gt;&lt;/code&gt; to flush the &lt;em&gt;task&lt;/em&gt; queue and avoid the error.</source>
          <target state="translated">一般に、テストはキューに入れられたタスクなしで終了します。保留中のタイマータスクが予想される場合は、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/discardperiodictasks&quot;&gt;discardPeriodicTasks&lt;/a&gt;&lt;/code&gt; を呼び出して&lt;em&gt;タスク&lt;/em&gt;キューをフラッシュし、エラーを回避します。</target>
        </trans-unit>
        <trans-unit id="7f269edbebd5dbd35be8d8d21f57ea38f14f0483" translate="yes" xml:space="preserve">
          <source>In general, a test should wait for micro-tasks to finish. When pending microtasks are expected, call &lt;code&gt;&lt;a href=&quot;../api/core/testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;&lt;/code&gt; to flush the &lt;em&gt;micro-task&lt;/em&gt; queue and avoid the error.</source>
          <target state="translated">一般に、テストはマイクロタスクが完了するのを待つ必要があります。保留中の&lt;em&gt;マイクロタスク&lt;/em&gt;が予想される場合は、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;&lt;/code&gt; を呼び出して&lt;em&gt;マイクロタスク&lt;/em&gt;キューをフラッシュし、エラーを回避します。</target>
        </trans-unit>
        <trans-unit id="86a59b8f427eaf262041822dcf531982a1f03fc3" translate="yes" xml:space="preserve">
          <source>In general, an observable &lt;em&gt;can&lt;/em&gt; return multiple values over time. An observable from &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; always emits a single value and then completes, never to emit again.</source>
          <target state="translated">一般に、オブザーバブル&lt;em&gt;は&lt;/em&gt;時間の経過とともに複数の値を返す可能性&lt;em&gt;があり&lt;/em&gt;ます。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; からのオブザーバブルは常に単一の値を発行してから完了し、再度発行することはありません。</target>
        </trans-unit>
        <trans-unit id="5e2d4d2d17239584190561155953d01ace2b72bc" translate="yes" xml:space="preserve">
          <source>In general, if your builder is watching an external event, you should separate your run into three phases.</source>
          <target state="translated">一般的に、ビルダーが外部イベントを見ている場合は、ランを3つのフェーズに分ける必要があります。</target>
        </trans-unit>
        <trans-unit id="aec22f95ac1b949b2998ae911c74abd01d2c15c8" translate="yes" xml:space="preserve">
          <source>In general, prefer a &lt;em&gt;required route parameter&lt;/em&gt; when the value is mandatory (for example, if necessary to distinguish one route path from another); prefer an &lt;em&gt;optional parameter&lt;/em&gt; when the value is optional, complex, and/or multivariate.</source>
          <target state="translated">一般に、値が必須である場合（たとえば、1つのルートパスを別のルートパスと区別する必要がある場合）は、&lt;em&gt;必須のルートパラメータを&lt;/em&gt;優先し&lt;em&gt;ます&lt;/em&gt;。値がオプション、複素数、および/または多変量の場合は、&lt;em&gt;オプションのパラメーターを&lt;/em&gt;優先し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="438e5f838247227524217c35d94e78235058f28b" translate="yes" xml:space="preserve">
          <source>In general, the options for which you can configure defaults correspond to the command options listed in the &lt;a href=&quot;cli&quot;&gt;CLI reference page&lt;/a&gt; for each command. Note that all options in the configuration file must use &lt;a href=&quot;glossary#case-conventions&quot;&gt;camelCase&lt;/a&gt;, rather than dash-case.</source>
          <target state="translated">一般に、デフォルトを設定できるオプションは、各コマンドの&lt;a href=&quot;cli&quot;&gt;CLIリファレンスページに&lt;/a&gt;リストされているコマンドオプションに対応しています。構成ファイル内のすべてのオプションは、ダッシュ&lt;a href=&quot;glossary#case-conventions&quot;&gt;ケース&lt;/a&gt;ではなくキャメルケースを使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="071332d3fcf4e07411ee877b3275e2eb0b4251fa" translate="yes" xml:space="preserve">
          <source>In general, use a required route parameter when the value is mandatory (for example, if necessary to distinguish one route path from another); and an optional parameter when the value is optional, complex, and/or multivariate.</source>
          <target state="translated">一般的に、値が必須の場合(例えば、ある経路パスと別の経路パスを区別するために必要な場合)には必須の経路パラメータを使用し、値が任意、複素数、および/または多変量の場合にはオプションのパラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="e77fd6b5b523bff7e8b440e29979790902cc0d10" translate="yes" xml:space="preserve">
          <source>In general, you can expect the following release cycle:</source>
          <target state="translated">一般的には、以下のようなリリースサイクルが期待できます。</target>
        </trans-unit>
        <trans-unit id="ec28d2e4f5ad480a00ce0f05033084610af0c773" translate="yes" xml:space="preserve">
          <source>In its constructor the class expects to get the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service. It will be injected to it and it is stored as a private field. The service is then used in the two instance methods, one of which loads the list of all phones, and the other loads the details of a specified phone:</source>
          <target state="translated">そのコンストラクターでは、クラスは &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスを取得することを期待しています。それに注入され、プライベートフィールドとして格納されます。次に、サービスは2つのインスタンスメソッドで使用されます。1つはすべての電話のリストをロードし、もう1つは指定された電話の詳細をロードします。</target>
        </trans-unit>
        <trans-unit id="10bee31fc3bb8a012058efc875f19fcd7d9d1a4b" translate="yes" xml:space="preserve">
          <source>In its current state of development, the list of heroes is unchanged. No hero row is highlighted.</source>
          <target state="translated">現在の開発状態では、ヒーローの一覧は変更されていません。ヒーローの列がハイライトされていません。</target>
        </trans-unit>
        <trans-unit id="66cd232fa17c1dc9aef0e27428be497a6d102fd7" translate="yes" xml:space="preserve">
          <source>In javascript, only the components specified will be respected (not the ordering, punctuations, ...) and details of the formatting will be dependent on the locale.</source>
          <target state="translated">javascript では、指定された要素のみが尊重され (順序や句読点、...)、書式の詳細はロケールに依存します。</target>
        </trans-unit>
        <trans-unit id="0d3338acd7b1b7ae166fab204760470f14dd0bf5" translate="yes" xml:space="preserve">
          <source>In keeping with the &lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;&lt;em&gt;Separation of Concerns&lt;/em&gt; principle&lt;/a&gt;, changes to the &lt;em&gt;Crisis Center&lt;/em&gt; won't affect the &lt;code&gt;AppModule&lt;/code&gt; or any other feature's component.</source>
          <target state="translated">合わせて&lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;&lt;em&gt;懸念の分離の&lt;/em&gt;原則&lt;/a&gt;に変更&lt;em&gt;クライシスセンターは&lt;/em&gt;影響しません &lt;code&gt;AppModule&lt;/code&gt; やその他の機能のコンポーネントを。</target>
        </trans-unit>
        <trans-unit id="853f8e6f2cb1e2c46ec738de217850a392edd833" translate="yes" xml:space="preserve">
          <source>In keeping with the &lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;Separation of Concerns principle&lt;/a&gt;, changes to the Crisis Center don't affect the &lt;code&gt;AppModule&lt;/code&gt; or any other feature's component.</source>
          <target state="translated">合わせて&lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;懸念原理の分離&lt;/a&gt;、危機センターへの変更は影響しません &lt;code&gt;AppModule&lt;/code&gt; やその他の機能のコンポーネントを。</target>
        </trans-unit>
        <trans-unit id="e479f9e9a5e9f21bc571985b868b0e91139c16e1" translate="yes" xml:space="preserve">
          <source>In many cases, a few extra change detection runs may not matter much. However, on larger or change-detection-heavy apps they can have a noticeable impact. By giving you more fine-grained control over the change detection propagation, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; allows you to achieve better performance for your hybrid apps.</source>
          <target state="translated">多くの場合、いくつかの追加の変更検出の実行はそれほど重要ではありません。ただし、大規模なアプリや変更検出の多いアプリでは、顕著な影響が出る可能性があります。変更検出の伝播をよりきめ細かく制御できるようにすることで、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、ハイブリッドアプリのパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="48a267ffb8eee102602f050323760c06153f17ce" translate="yes" xml:space="preserve">
          <source>In many cases, these things end up as type &lt;code&gt;any&lt;/code&gt;, which can cause subsequent parts of the expression to go unchecked.</source>
          <target state="translated">多くの場合、これらは &lt;code&gt;any&lt;/code&gt; 型として終了し、式の後続の部分がチェックされなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a95cdd0f6492c72732a9c49a995b576fef9af845" translate="yes" xml:space="preserve">
          <source>In modern JavaScript, every file is a module (see the &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;Modules&lt;/a&gt; page of the Exploring ES6 website). Within each file you write an &lt;code&gt;export&lt;/code&gt; statement to make parts of the module public.</source>
          <target state="translated">最新のJavaScriptでは、すべてのファイルがモジュールです（Exploring ES6 Webサイトの「&lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;モジュール&lt;/a&gt;」ページを参照）。各ファイル内で、モジュールの一部をパブリックにする &lt;code&gt;export&lt;/code&gt; ステートメントを記述します。</target>
        </trans-unit>
        <trans-unit id="6b3a1936e2bb54b1733be75ba49ac81b9f04f42d" translate="yes" xml:space="preserve">
          <source>In most cases, Angular sets the reference variable's value to the element on which it is declared. In the previous example, &lt;code&gt;phone&lt;/code&gt; refers to the phone number &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. The button's click handler passes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to the component's &lt;code&gt;callPhone()&lt;/code&gt; method.</source>
          <target state="translated">ほとんどの場合、Angularは参照変数の値を、それが宣言されている要素に設定します。前の例では、 &lt;code&gt;phone&lt;/code&gt; は電話番号 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を参照しています。ボタンのクリックハンドラは、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 値をコンポーネントの &lt;code&gt;callPhone()&lt;/code&gt; メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="33a9a0ed6ca328ae17278ce786bea9fc84b93e7f" translate="yes" xml:space="preserve">
          <source>In most cases, Angular sets the template variable's value to the element on which it occurs. In the previous example, &lt;code&gt;phone&lt;/code&gt; refers to the phone number &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. The button's click handler passes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to the component's &lt;code&gt;callPhone()&lt;/code&gt; method.</source>
          <target state="translated">ほとんどの場合、Angularはテンプレート変数の値をそれが発生する要素に設定します。前の例では、 &lt;code&gt;phone&lt;/code&gt; は電話番号 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を参照しています。ボタンのクリックハンドラーは、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 値をコンポーネントの &lt;code&gt;callPhone()&lt;/code&gt; メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="736ac1880b027df49f2ca9b04f5528a48697f8fd" translate="yes" xml:space="preserve">
          <source>In most cases, the target name is the name of a property, even when it appears to be the name of an attribute. In this example, &lt;code&gt;src&lt;/code&gt; is the name of the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element property.</source>
          <target state="translated">ほとんどの場合、ターゲット名は、属性の名前のように見える場合でも、プロパティの名前です。この例では、 &lt;code&gt;src&lt;/code&gt; は &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 要素プロパティの名前です。</target>
        </trans-unit>
        <trans-unit id="10ed2cfffaf26fc3e0aa3455fa0236693ac809c8" translate="yes" xml:space="preserve">
          <source>In most cases, the target name is the name of a property, even when it appears to be the name of an attribute. So in this case, &lt;code&gt;src&lt;/code&gt; is the name of the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element property.</source>
          <target state="translated">ほとんどの場合、ターゲット名は属性の名前のように見えても、プロパティの名前です。したがって、この場合、 &lt;code&gt;src&lt;/code&gt; は &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 要素のプロパティの名前です。</target>
        </trans-unit>
        <trans-unit id="721c8146db87ee4117c032bdef6f8eeff7ecb43e" translate="yes" xml:space="preserve">
          <source>In most cases, though, the changes made locally in a particular component are of no interest to the rest of the app. For example, if the user clicks a button that submits a form, the component usually handles the result of this action. That being said, there &lt;em&gt;are&lt;/em&gt; cases where you want to propagate changes to some other part of the app that may be controlled by the other framework. In such cases, you are responsible for notifying the interested parties by manually triggering change detection.</source>
          <target state="translated">ただし、ほとんどの場合、特定のコンポーネントでローカルに行われた変更は、アプリの他の部分には関係ありません。たとえば、ユーザーがフォームを送信するボタンをクリックすると、コンポーネントは通常、このアクションの結果を処理します。ことではあります、と述べ&lt;em&gt;ている&lt;/em&gt;あなたは、他のフレームワークによって制御することができるアプリのいくつかの他の部分に変更を伝播したい場合は。このような場合、変更検出を手動でトリガーして、関係者に通知する責任があります。</target>
        </trans-unit>
        <trans-unit id="769178628d41a1ca0bba1b67cab81af3ded8c26b" translate="yes" xml:space="preserve">
          <source>In most environments where both Angular and AngularJS are used to render the application, both frameworks are loaded in the initial bundle being sent to the client. This results in both increased bundle size and possible reduced performance.</source>
          <target state="translated">アプリケーションのレンダリングにAngularとAngularJSの両方を使用するほとんどの環境では、両方のフレームワークがクライアントに送信される最初のバンドルでロードされます。その結果、バンドルのサイズが大きくなり、パフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae2161128d8ce5a1609bf9b304c9b1e1e65fa23d" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;HeroListComponent&lt;/code&gt; to get heroes from &lt;code&gt;HeroService&lt;/code&gt;, it needs to ask for &lt;code&gt;HeroService&lt;/code&gt; to be injected, rather than creating its own &lt;code&gt;HeroService&lt;/code&gt; instance with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">ためには &lt;code&gt;HeroListComponent&lt;/code&gt; から英雄取得する &lt;code&gt;HeroService&lt;/code&gt; を、それがために依頼する必要が &lt;code&gt;HeroService&lt;/code&gt; はむしろ、独自作成するよりも、注入される &lt;code&gt;HeroService&lt;/code&gt; のでインスタンスを &lt;code&gt;new&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1486ae81ea2e7bfb9b8495d2847f181583dc9fa5" translate="yes" xml:space="preserve">
          <source>In order for service workers to be registered, the app must be accessed over HTTPS, not HTTP. Browsers ignore service workers on pages that are served over an insecure connection. The reason is that service workers are quite powerful, so extra care needs to be taken to ensure the service worker script has not been tampered with.</source>
          <target state="translated">サービスワーカーを登録するには、アプリはHTTPではなくHTTPSでアクセスする必要があります。ブラウザは、安全でない接続で提供されるページのサービス ワーカーを無視します。これは、サービスワーカーがかなり強力なため、サービスワーカーのスクリプトが改ざんされていないことを確認するために、特に注意が必要だからです。</target>
        </trans-unit>
        <trans-unit id="55fc82f93a9cf7270fcc2c4a6b145c2d1b0c0e64" translate="yes" xml:space="preserve">
          <source>In order to affect this browser's &lt;code&gt;history.state&lt;/code&gt; entry, the &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; parameter can be passed. This must be an object because the router will add the &lt;code&gt;navigationId&lt;/code&gt; property to this object before creating the new history item.</source>
          <target state="translated">このブラウザの &lt;code&gt;history.state&lt;/code&gt; エントリに影響を与えるために、 &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; パラメータを渡すことができます。ルーターは新しい履歴アイテムを作成する前にこのオブジェクトに &lt;code&gt;navigationId&lt;/code&gt; プロパティを追加するため、これはオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="9363114f7d8e640fa6e1518ff3f8b7dfb1b36de7" translate="yes" xml:space="preserve">
          <source>In order to avoid negatively affecting the initial rendering of the page, &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; waits for up to 30 seconds by default for the app to stabilize, before registering the ServiceWorker script. Constantly polling for updates, for example, with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval&quot;&gt;setInterval()&lt;/a&gt; or RxJS' &lt;a href=&quot;https://rxjs.dev/api/index/function/interval&quot;&gt;interval()&lt;/a&gt;, will prevent the app from stabilizing and the ServiceWorker script will not be registered with the browser until the 30 seconds upper limit is reached.</source>
          <target state="translated">ページの初期レンダリングに悪影響を与えないようにするために、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; は、ServiceWorkerスクリプトを登録する前に、アプリが安定するまでデフォルトで最大30秒待機します。たとえば、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval&quot;&gt;setInterval（）&lt;/a&gt;やRxJSの&lt;a href=&quot;https://rxjs.dev/api/index/function/interval&quot;&gt;interval（）&lt;/a&gt;を使用して更新を常にポーリングすると、アプリが安定しなくなり、ServiceWorkerスクリプトは30秒の上限に達するまでブラウザーに登録されません。</target>
        </trans-unit>
        <trans-unit id="a72bcb56b58b81db6f4bbe1304ae9715f5beb78e" translate="yes" xml:space="preserve">
          <source>In order to avoid negatively affecting the initial rendering, &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; will by default wait for the app to stabilize, before registering the ServiceWorker script. Constantly polling for updates, e.g. with &lt;code&gt;interval()&lt;/code&gt;, will prevent the app from stabilizing and the ServiceWorker script will never be registered with the browser.</source>
          <target state="translated">初期レンダリングへの悪影響を回避するために、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; はデフォルトでアプリが安定するのを待ってから、ServiceWorkerスクリプトを登録します。たとえば、 &lt;code&gt;interval()&lt;/code&gt; などを使用して常に更新をポーリングすると、アプリが安定せず、ServiceWorkerスクリプトがブラウザーに登録されることはありません。</target>
        </trans-unit>
        <trans-unit id="1661111f30e20e91e134221fa291556479a53887" translate="yes" xml:space="preserve">
          <source>In order to get a service from a dependency injector, you have to give it a &lt;a href=&quot;glossary#token&quot;&gt;token&lt;/a&gt;. Angular usually handles this transaction by specifying a constructor parameter and its type. The parameter type serves as the injector lookup token. Angular passes this token to the injector and assigns the result to the parameter.</source>
          <target state="translated">依存関係インジェクターからサービスを取得するには、それに&lt;a href=&quot;glossary#token&quot;&gt;トークン&lt;/a&gt;を与える必要があります。Angularは通常、コンストラクターパラメーターとそのタイプを指定することでこのトランザクションを処理します。パラメータタイプはインジェクタルックアップトークンとして機能します。Angularはこのトークンをインジェクターに渡し、結果をパラメーターに割り当てます。</target>
        </trans-unit>
        <trans-unit id="f94d1573a258bdbefa8fe3b0d0e6c36603f171fd" translate="yes" xml:space="preserve">
          <source>In order to prevent collisions in environments where multiple Angular apps share the same domain or subdomain, give each application a unique cookie name.</source>
          <target state="translated">複数のAngularアプリが同じドメインやサブドメインを共有している環境での衝突を防ぐために、それぞれのアプリに固有のクッキー名を与えます。</target>
        </trans-unit>
        <trans-unit id="780a866d90920d282e73259eea95fab806f34d7f" translate="yes" xml:space="preserve">
          <source>In order to prevent the native DOM form validation UI from interfering with Angular's form validation, Angular automatically adds the &lt;code&gt;novalidate&lt;/code&gt; attribute on any &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; whenever &lt;code&gt;FormModule&lt;/code&gt; or &lt;code&gt;ReactiveFormModule&lt;/code&gt; are imported into the application. If you want to explicitly enable native DOM validation UI with Angular forms, you can add the &lt;code&gt;ngNativeValidate&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">ネイティブDOMフォーム検証UIがAngularのフォーム検証に干渉するのを防ぐために、Angularは &lt;code&gt;FormModule&lt;/code&gt; または &lt;code&gt;ReactiveFormModule&lt;/code&gt; がアプリケーションにインポートされるたびに、任意の &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; に &lt;code&gt;novalidate&lt;/code&gt; 属性を自動的に追加します。 AngularフォームでネイティブDOM検証UIを明示的に有効にする場合は、 &lt;code&gt;ngNativeValidate&lt;/code&gt; 属性を &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素に追加できます。</target>
        </trans-unit>
        <trans-unit id="4207009e54950800ab6d8cc8ef740aa53fc90034" translate="yes" xml:space="preserve">
          <source>In order to show how subscribing works, we need to create a new observable. There is a constructor that you use to create new instances, but for illustration, we can use some methods from the RxJS library that create simple observables of frequently used types:</source>
          <target state="translated">サブスクライブがどのように動作するかを示すために、新しいオブザーバブルを作成する必要があります。新しいインスタンスを作成するために使用するコンストラクタがありますが、説明のために、よく使用される型のシンプルなオブザーバブルを作成するRxJSライブラリのいくつかのメソッドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f7421599f9ced2cc1d0119ff73276a78a40f53ee" translate="yes" xml:space="preserve">
          <source>In order to start using any &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; APIs, you still need to load the Angular framework as you would in a normal Angular app. You can see how this can be done with SystemJS by following the instructions in the &lt;a href=&quot;upgrade-setup&quot;&gt;Upgrade Setup&lt;/a&gt; guide, selectively copying code from the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github repository&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; APIの使用を開始するには、通常のAngularアプリと同じように、Angularフレームワークをロードする必要があります。&lt;a href=&quot;upgrade-setup&quot;&gt;アップグレードセットアップ&lt;/a&gt;ガイドの指示に従い、&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart githubリポジトリ&lt;/a&gt;からコードを選択的にコピーすることで、SystemJSでこれを行う方法を確認できます。</target>
        </trans-unit>
        <trans-unit id="3b399fc11c8e33350c9084a487ba836c3f3fbcb6" translate="yes" xml:space="preserve">
          <source>In order to use the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, you must first register the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt; package. Define an array of routes, &lt;code&gt;appRoutes&lt;/code&gt;, and pass them to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method returns a module that contains the configured &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service provider, plus other providers that the routing library requires. Once the application is bootstrapped, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; performs the initial navigation based on the current browser URL.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を使用するには、最初に &lt;code&gt;@angular/router&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を登録する必要があります。ルートの配列 &lt;code&gt;appRoutes&lt;/code&gt; を定義し、それらを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドに渡します。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドは、設定含むモジュール返す &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスプロバイダを、プラスルーティングライブラリが必要とする他のプロバイダ。アプリケーションがブートストラップされると、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; は現在のブラウザーのURLに基​​づいて初期ナビゲーションを実行します。</target>
        </trans-unit>
        <trans-unit id="4470d8f6deb5914d926efe231421cb63adc8fc6e" translate="yes" xml:space="preserve">
          <source>In order to use the Router, you must first register the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt; package. Define an array of routes, &lt;code&gt;appRoutes&lt;/code&gt;, and pass them to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method. It returns a module, containing the configured &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service provider, plus other providers that the routing library requires. Once the application is bootstrapped, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; performs the initial navigation based on the current browser URL.</source>
          <target state="translated">ルーターを使用するには、まず &lt;code&gt;@angular/router&lt;/code&gt; パッケージからルーター &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を登録する必要があります。ルートの配列 &lt;code&gt;appRoutes&lt;/code&gt; を定義し、それらを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドに渡します。構成された &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスプロバイダーと、ルーティングライブラリに必要なその他のプロバイダーを含むモジュールを返します。アプリケーションがブートストラップされると、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; は現在のブラウザーのURLに基​​づいて初期ナビゲーションを実行します。</target>
        </trans-unit>
        <trans-unit id="897444e729da5c78809ebd111c1752c8e27f14fc" translate="yes" xml:space="preserve">
          <source>In order to use the routable animations, wrap the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; inside an element, use the &lt;code&gt;@routeAnimation&lt;/code&gt; trigger, and bind it to the element.</source>
          <target state="translated">ルーティング可能なアニメーションを使用するには、 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を要素内にラップし、@ &lt;code&gt;@routeAnimation&lt;/code&gt; トリガーを使用して、要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="6297dda86acaaaf319ab64751d910390522f6fd8" translate="yes" xml:space="preserve">
          <source>In order to use the routable animations, you'll need to wrap the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; inside an element. You'll use the &lt;code&gt;@routeAnimation&lt;/code&gt; trigger and bind it to the element.</source>
          <target state="translated">ルーティング可能なアニメーションを使用するには、 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を要素内にラップする必要があります。 &lt;code&gt;@routeAnimation&lt;/code&gt; トリガーを使用して、要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="eeef063c79aeb4f50044a9152e97103442e703f1" translate="yes" xml:space="preserve">
          <source>In other words, when the user clicks this link, the router displays the component associated with the &lt;code&gt;compose&lt;/code&gt; route in the &lt;code&gt;popup&lt;/code&gt; outlet.</source>
          <target state="translated">つまり、ユーザーがこのリンクをクリックすると、ルーターは &lt;code&gt;compose&lt;/code&gt; ルートに関連付けられたコンポーネントを &lt;code&gt;popup&lt;/code&gt; アウトレットに表示します。</target>
        </trans-unit>
        <trans-unit id="4e52e5c3032e6187e657dc00cec1cd2b072053ce" translate="yes" xml:space="preserve">
          <source>In other words, you're required to use &lt;code&gt;../&lt;/code&gt; rather than &lt;code&gt;./&lt;/code&gt;.</source>
          <target state="translated">つまり、。 &lt;code&gt;./&lt;/code&gt; ではなく &lt;code&gt;../&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ba35e15dd4c15f46ec67b54f17b33214638dd487" translate="yes" xml:space="preserve">
          <source>In other words, you're required to use &lt;code&gt;../&lt;/code&gt; rather than &lt;code&gt;./&lt;/code&gt;. This is currently the default behavior. Setting this option to &lt;code&gt;corrected&lt;/code&gt; enables the fix.</source>
          <target state="translated">つまり、. &lt;code&gt;./&lt;/code&gt; ではなく &lt;code&gt;../&lt;/code&gt; を使用する必要があります。これは現在、デフォルトの動作です。このオプションを &lt;code&gt;corrected&lt;/code&gt; 設定すると、修正が有効になります。</target>
        </trans-unit>
        <trans-unit id="87df4a79a4f147a95a370ebf7d5c2192bfdcb408" translate="yes" xml:space="preserve">
          <source>In our example, the shell command either finishes or is still executing, so there&amp;rsquo;s no need for a progress report, but we can report status so that a parent builder that called our builder would know what&amp;rsquo;s going on. Use the &lt;code&gt;BuilderContext.reportStatus()&lt;/code&gt; method to generate a status string of any length. (Note that there&amp;rsquo;s no guarantee that a long string will be shown entirely; it could be cut to fit the UI that displays it.) Pass an empty string to remove the status.</source>
          <target state="translated">この例では、シェルコマンドは終了するか、まだ実行中であるため、進行状況レポートは必要ありませんが、ステータスをレポートして、ビルダーを呼び出した親ビルダーが何が起こっているかを知ることができます。 &lt;code&gt;BuilderContext.reportStatus()&lt;/code&gt; メソッドを使用して、任意の長さのステータス文字列を生成します。（長い文字列が完全に表示される保証はありません。それを表示するUIに合わせてカットされる可能性があります。）空の文字列を渡してステータスを削除します。</target>
        </trans-unit>
        <trans-unit id="56455dddd0518d118b14439b2bec10125d4d70c4" translate="yes" xml:space="preserve">
          <source>In our two-state button example, the wildcard isn't that useful because there are only two possible states, &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt;. Wildcard states are better when an element in one particular state has multiple potential states that it can change to. If our button can change from &lt;code&gt;open&lt;/code&gt; to either &lt;code&gt;closed&lt;/code&gt; or something like &lt;code&gt;inProgress&lt;/code&gt;, using a wildcard state could reduce the amount of coding needed.</source>
          <target state="translated">2つの状態のボタンの例では、2つの状態（ &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; )しかないため、ワイルドカードはそれほど役に立ちません。ワイルドカード状態は、ある特定の状態の要素に、変更可能な複数の潜在的な状態がある場合に適しています。ボタンが &lt;code&gt;open&lt;/code&gt; から &lt;code&gt;closed&lt;/code&gt; 状態、または &lt;code&gt;inProgress&lt;/code&gt; のような状態に変化する可能性がある場合、ワイルドカード状態を使用すると、必要なコーディングの量を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="f50e734f65a9ec214fd856de2782d754d78c4fd5" translate="yes" xml:space="preserve">
          <source>In practical terms, the &lt;code&gt;package.json&lt;/code&gt; of all &lt;code&gt;@angular&lt;/code&gt; packages has changed in the following way:</source>
          <target state="translated">実際には、すべての &lt;code&gt;@angular&lt;/code&gt; パッケージの &lt;code&gt;package.json&lt;/code&gt; は次のように変更されています。</target>
        </trans-unit>
        <trans-unit id="1caf8483b03bd6de160e2caf8712a24854fe9bca" translate="yes" xml:space="preserve">
          <source>In practice you will combine the two techniques in the same setup, as seen in this example.</source>
          <target state="translated">実際には、この例のように、同じセットアップで2つのテクニックを組み合わせることになります。</target>
        </trans-unit>
        <trans-unit id="19ce34decb85894b971f2d3e1bfcf73bc88fa732" translate="yes" xml:space="preserve">
          <source>In practice you would rarely, if ever, implement all of the interfaces the way this demo does.</source>
          <target state="translated">実際には、このデモのようにすべてのインターフェイスを実装することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="59bc493aece50f258b777e6728d20541b44060b9" translate="yes" xml:space="preserve">
          <source>In practice, this means that data in Angular flows downward during change detection. A parent component can easily change values in its child components because the parent is checked first. A failure could occur, however, if a child component tries to change a value in its parent during change detection (inverting the expected data flow), because the parent component has already been rendered. In development mode, Angular throws the &lt;code&gt;ExpressionChangedAfterItHasBeenCheckedError&lt;/code&gt; error if your app attempts to do this, rather than silently failing to render the new value.</source>
          <target state="translated">実際には、これは、変更の検出中にAngularのデータが下向きに流れることを意味します。親が最初にチェックされるため、親コンポーネントは子コンポーネントの値を簡単に変更できます。ただし、親コンポーネントが既にレンダリングされているため、変更検出中に子コンポーネントが親の値を変更しようとすると（予想されるデータフローが反転する）、障害が発生する可能性があります。開発モードでは、アプリがこれを実行しようとすると、Angularは新しい値のレンダリングに黙って失敗するのではなく、 &lt;code&gt;ExpressionChangedAfterItHasBeenCheckedError&lt;/code&gt; エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="72487f978bdb8dcb1ae15d26b5e9d260c3656cb7" translate="yes" xml:space="preserve">
          <source>In practice, you do not need to call &lt;code&gt;$apply()&lt;/code&gt;, regardless of whether it is in AngularJS or Angular. The &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; does it for us. You &lt;em&gt;can&lt;/em&gt; still call &lt;code&gt;$apply()&lt;/code&gt; so there is no need to remove such calls from existing code. Those calls just trigger additional AngularJS change detection checks in a hybrid application.</source>
          <target state="translated">実際には、AngularJSかAngularかに関係なく、 &lt;code&gt;$apply()&lt;/code&gt; を呼び出す必要はありません。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; は、私たちのためにそれをしません。 &lt;code&gt;$apply()&lt;/code&gt; 呼び出すこと&lt;em&gt;ができる&lt;/em&gt;ため、既存のコードからそのような呼び出しを削除する必要はありません。これらの呼び出しは、ハイブリッドアプリケーションで追加のAngularJS変更検出チェックをトリガーするだけです。</target>
        </trans-unit>
        <trans-unit id="56d227fe5a68e4aaa849b0aa5c4de2fef9bb36da" translate="yes" xml:space="preserve">
          <source>In practice, you'll serve a static version of the landing page to hold the user's attention. At the same time, you'll load the full Angular app behind it. The user perceives near-instant performance from the landing page and gets the full interactive experience after the full app loads.</source>
          <target state="translated">実際には、ユーザーの注意を引くためにランディングページの静的バージョンを提供します。同時に、その後ろにAngularのフルアプリをロードします。ユーザーはランディングページのパフォーマンスを瞬時に感じ、フルアプリがロードされた後に完全なインタラクティブ体験を得ることができます。</target>
        </trans-unit>
        <trans-unit id="e2ade5ef587790075852d0ae228268c6578796df" translate="yes" xml:space="preserve">
          <source>In production, change detection kicks in automatically when Angular creates a component or the user enters a keystroke or an asynchronous activity (e.g., AJAX) completes.</source>
          <target state="translated">実運用では、Angularがコンポーネントを作成したり、ユーザーがキーストロークを入力したり、非同期アクティビティ(AJAXなど)が完了したりすると、自動的に変更検出が行われます。</target>
        </trans-unit>
        <trans-unit id="2fca238085be2c83aa003fed9d03817a9fd8a50e" translate="yes" xml:space="preserve">
          <source>In reactive forms each form element in the view is directly linked to the form model (a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance). Updates from the view to the model and from the model to the view are synchronous and do not depend on how the UI is rendered.</source>
          <target state="translated">リアクティブフォームでは、ビュー内の各フォーム要素がフォームモデル（ &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンス）に直接リンクされます。ビューからモデルへの更新、およびモデルからビューへの更新は同期的であり、UIのレンダリング方法に依存しません。</target>
        </trans-unit>
        <trans-unit id="8936ace2212f0d937e8bae060b90d1889ddfbb89" translate="yes" xml:space="preserve">
          <source>In reactive forms, add a custom validator by passing the function directly to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リアクティブフォームでは、関数を直接 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; に渡して、カスタムバリデーターを追加します。</target>
        </trans-unit>
        <trans-unit id="8a8f761c448cb0a19d0d2a50bc0673ac4a1199f4" translate="yes" xml:space="preserve">
          <source>In reactive forms, custom validators are fairly simple to add. All you have to do is pass the function directly to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リアクティブフォームでは、カスタムバリデーターを追加するのはかなり簡単です。関数を直接 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; に渡すだけです。</target>
        </trans-unit>
        <trans-unit id="12b205922219ca09964fb9aa93ac6d2fb7837eb1" translate="yes" xml:space="preserve">
          <source>In response to a click event, call the component's click handler, &lt;code&gt;add()&lt;/code&gt;, and then clear the input field so that it's ready for another name. Add the following to the &lt;code&gt;HeroesComponent&lt;/code&gt; class:</source>
          <target state="translated">クリックイベントに応答して、コンポーネントのクリックハンドラー &lt;code&gt;add()&lt;/code&gt; を呼び出し、入力フィールドをクリアして、別の名前を入力できるようにします。 &lt;code&gt;HeroesComponent&lt;/code&gt; クラスに以下を追加します。</target>
        </trans-unit>
        <trans-unit id="1e6c06858e21d619cbdb8f3726f8b28d11719707" translate="yes" xml:space="preserve">
          <source>In simple examples, the dependency value is an &lt;em&gt;instance&lt;/em&gt;, and the class &lt;em&gt;type&lt;/em&gt; serves as its own lookup key. Here you get a &lt;code&gt;HeroService&lt;/code&gt; directly from the injector by supplying the &lt;code&gt;HeroService&lt;/code&gt; type as the token:</source>
          <target state="translated">簡単な例では、依存関係の値は&lt;em&gt;インスタンス&lt;/em&gt;であり、クラス&lt;em&gt;タイプ&lt;/em&gt;は独自のルックアップキーとして機能します。ここでは、 &lt;code&gt;HeroService&lt;/code&gt; タイプをトークンとして指定することにより、インジェクターから直接 &lt;code&gt;HeroService&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="d61cd7b51c3a752e9e5224c7c2a9c10d341bcf87" translate="yes" xml:space="preserve">
          <source>In simpler terms, you might say this of the first route:</source>
          <target state="translated">もっと簡単に言うと、第一ルートの場合はこんな感じになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="39a7262903072552ce7e1de93133df4200dff76f" translate="yes" xml:space="preserve">
          <source>In some cases you'll want to bypass the Angular CLI builder, and run the Bazel CLI directly. The Bazel CLI is in the &lt;code&gt;@bazel/bazel&lt;/code&gt; npm package. You can install it globally to get the &lt;code&gt;bazel&lt;/code&gt; command in your path, or use &lt;code&gt;$(npm bin)/bazel&lt;/code&gt; in place of bazel below.</source>
          <target state="translated">場合によっては、Angular CLIビルダーをバイパスして、Bazel CLIを直接実行する必要があります。 &lt;code&gt;@bazel/bazel&lt;/code&gt; CLIは@ bazel / bazel npmパッケージに含まれています。グローバルにインストールして、パスに &lt;code&gt;bazel&lt;/code&gt; コマンドを取得するか、以下のbazelの代わりに &lt;code&gt;$(npm bin)/bazel&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="c7d9f5a7f5bfd6aa1d897c40b145e3b00e9125c8" translate="yes" xml:space="preserve">
          <source>In some cases, the version of the app used by the service worker to serve a client might be in a broken state that cannot be recovered from without a full page reload.</source>
          <target state="translated">場合によっては、サービスワーカーがクライアントにサービスを提供する際に使用しているアプリのバージョンが、全ページリロードしないと復旧できないような壊れた状態になっていることがあります。</target>
        </trans-unit>
        <trans-unit id="2ab622d819a42312798e6536f01d0dc402cced7a" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to bypass the service worker entirely and let the browser handle the request instead. An example is when you rely on a feature that is currently not supported in service workers (e.g. &lt;a href=&quot;https://github.com/w3c/ServiceWorker/issues/1141&quot;&gt;reporting progress on uploaded files&lt;/a&gt;).</source>
          <target state="translated">場合によっては、Service Workerを完全にバイパスし、代わりにブラウザーにリクエストを処理させることができます。たとえば、Service Workerで現在サポートされていない機能に依存している場合（&lt;a href=&quot;https://github.com/w3c/ServiceWorker/issues/1141&quot;&gt;アップロードされたファイルの進行状況のレポートなど&lt;/a&gt;）です。</target>
        </trans-unit>
        <trans-unit id="61bb49903d1d4b8480b074b2d9731adbded4bf41" translate="yes" xml:space="preserve">
          <source>In some cases, you need to limit the search or accommodate a missing dependency. You can modify Angular's search behavior with the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; qualifying decorators on a service-valued parameter of the component's constructor.</source>
          <target state="translated">場合によっては、検索を制限するか、欠落している依存関係に対応する必要があります。コンポーネントのコンストラクターのサービス値パラメーターの &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 修飾修飾子を使用して、Angularの検索動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="9660b78fcdbbefc9e6c733e9357058335454ef4b" translate="yes" xml:space="preserve">
          <source>In some tests, you're more interested in how an injected service method was called and what values it returned, than what appears on screen.</source>
          <target state="translated">いくつかのテストでは、画面に表示されるものよりも、注入されたサービスメソッドがどのように呼ばれ、どのような値を返したかに興味があります。</target>
        </trans-unit>
        <trans-unit id="d234d3f817a0a34e6196f4aad3f42f5e028ff0f6" translate="yes" xml:space="preserve">
          <source>In specific situations, it might be necessary to disable sanitization, for example if the application genuinely needs to produce a &lt;code&gt;javascript:&lt;/code&gt; style link with a dynamic value in it. Users can bypass security by constructing a value with one of the &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; methods, and then binding to that value from the template.</source>
          <target state="translated">特定の状況では、たとえばアプリケーションが動的な値を含む &lt;code&gt;javascript:&lt;/code&gt; スタイルのリンクを本当に生成する必要がある場合など、サニタイズを無効にする必要がある場合があります。ユーザーは、 &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; メソッドの1つを使用して値を作成し、テンプレートからその値にバインドすることで、セキュリティをバイパスできます。</target>
        </trans-unit>
        <trans-unit id="d8e398ebcd66ab590bdd5d974fb4832daf67c817" translate="yes" xml:space="preserve">
          <source>In sum, you can write applications with one, two or more levels of routing. The link parameters array affords the flexibility to represent any routing depth and any legal sequence of route paths, (required) router parameters, and (optional) route parameter objects.</source>
          <target state="translated">まとめると、1 つ、2 つ以上のレベルのルーティングを持つアプリケーションを書くことができます。リンクパラメータ配列は、任意のルーティングの深さと、ルートパス、(必須の)ルータパラメータ、(オプションの)ルートパラメータオブジェクトの任意の順序を柔軟に表現することができます。</target>
        </trans-unit>
        <trans-unit id="623f5e0e06cac9546fad2e1d9d858205754ab9a5" translate="yes" xml:space="preserve">
          <source>In summary, you can write applications with one, two or more levels of routing. The link parameters array affords the flexibility to represent any routing depth and any legal sequence of route paths, (required) router parameters, and (optional) route parameter objects.</source>
          <target state="translated">要約すると、1 つ、2 つ以上のレベルのルーティングを持つアプリケーションを書くことができます。リンクパラメータ配列は、任意のルーティングの深さと、ルートパス、(必須の)ルータパラメータ、(オプションの)ルートパラメータオブジェクトの任意の順序を柔軟に表現することができます。</target>
        </trans-unit>
        <trans-unit id="c33d61663fac8d5f31f41cf19abfab91e3740d51" translate="yes" xml:space="preserve">
          <source>In summary, you want to delay rendering the routed component until all necessary data has been fetched.</source>
          <target state="translated">要約すると、必要なデータがすべてフェッチされるまで、ルーティングされたコンポーネントのレンダリングを遅らせたいということです。</target>
        </trans-unit>
        <trans-unit id="e104dcb833aabc752ad0a3c07890da8319df3538" translate="yes" xml:space="preserve">
          <source>In summary, you want to delay rendering the routed component until all necessary data have been fetched.</source>
          <target state="translated">要約すると、必要なデータがすべてフェッチされるまで、ルーティングされたコンポーネントのレンダリングを遅らせたいということです。</target>
        </trans-unit>
        <trans-unit id="83125967d52de259af9ac73a04025e6be705f964" translate="yes" xml:space="preserve">
          <source>In template driven forms, all &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags are automatically tagged as &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;. To import the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; but skip its usage in some forms, for example, to use native HTML5 validation, add the &lt;code&gt;ngNoForm&lt;/code&gt; and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags won't create an &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive. In reactive forms, using &lt;code&gt;ngNoForm&lt;/code&gt; is unnecessary because the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags are inert. In that case, you would refrain from using the &lt;code&gt;formGroup&lt;/code&gt; directive.</source>
          <target state="translated">テンプレート駆動型フォームでは、すべての &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグは自動的に &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; としてタグ付けされます。 &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートし、一部のフォームでの使用をスキップするには、たとえば、ネイティブHTML5検証を使用するには、 &lt;code&gt;ngNoForm&lt;/code&gt; を追加します。 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグは &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブを作成しません。リアクティブフォームでは、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグが不活性であるため、 &lt;code&gt;ngNoForm&lt;/code&gt; の使用は不要です。その場合は、 &lt;code&gt;formGroup&lt;/code&gt; ディレクティブの使用を控えます。</target>
        </trans-unit>
        <trans-unit id="477e647d8c0ecb9558b0cd8c664fca639f6f099b" translate="yes" xml:space="preserve">
          <source>In template driven forms, if you've imported &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, you don't have to do anything to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag in order to make use of &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;. Continue on to see how this works.</source>
          <target state="translated">テンプレート駆動型フォームでは、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートした場合、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を利用するために &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグに何もする必要はありません。これがどのように機能するかを確認してください。</target>
        </trans-unit>
        <trans-unit id="fdd04dd82ac2e2c71275724a71c50dd3e5b6d107" translate="yes" xml:space="preserve">
          <source>In template-driven forms, add a directive to the template, where the directive wraps the validator function. For example, the corresponding &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; serves as a wrapper around the &lt;code&gt;forbiddenNameValidator&lt;/code&gt;.</source>
          <target state="translated">テンプレート駆動型フォームでは、ディレクティブをテンプレートに追加します。ディレクティブはバリデーター関数をラップします。たとえば、対応する &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; は、 &lt;code&gt;forbiddenNameValidator&lt;/code&gt; のラッパーとして機能します。</target>
        </trans-unit>
        <trans-unit id="46f920b8d9ffd47931549ae3e7c7ae76ebf2545b" translate="yes" xml:space="preserve">
          <source>In template-driven forms, each form element is linked to a directive that manages the form model internally.</source>
          <target state="translated">テンプレート駆動型のフォームでは、各フォーム要素はフォームモデルを内部的に管理するディレクティブにリンクされています。</target>
        </trans-unit>
        <trans-unit id="8aa8be07d8ab554c9b5c8a2c06f23414c9fbd80f" translate="yes" xml:space="preserve">
          <source>In template-driven forms, each form element is linked to a directive that manages the form model internally. The diagrams below use the same favorite color example to demonstrate how data flows when an input field's value is changed from the view and then from the model.</source>
          <target state="translated">テンプレート駆動型のフォームでは、各フォーム要素は内部的にフォームモデルを管理するディレクティブにリンクされています。以下の図は、入力フィールドの値がビューから変更され、モデルから変更されたときにデータがどのように流れるかを示すために、同じお気に入りの色の例を使用しています。</target>
        </trans-unit>
        <trans-unit id="0bd7dd8b5ca1c595b363717724f3cb456665a859" translate="yes" xml:space="preserve">
          <source>In template-driven forms, the form model is implicit, rather than explicit. The directive &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; creates and manages a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance for a given form element.</source>
          <target state="translated">テンプレート駆動型フォームでは、フォームモデルは明示的ではなく暗黙的です。ディレクティブ &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; は、指定されたフォーム要素の &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成および管理します。</target>
        </trans-unit>
        <trans-unit id="93f3796113966b61681d92d3ea2c4e2687db94c5" translate="yes" xml:space="preserve">
          <source>In template-driven forms, the source of truth is the template.</source>
          <target state="translated">テンプレート駆動型のフォームでは、真実の源はテンプレートです。</target>
        </trans-unit>
        <trans-unit id="14ecbfdcfe9548e05316a56c993192cedabf9367" translate="yes" xml:space="preserve">
          <source>In template-driven forms, you don't have direct access to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance, so you can't pass the validator in like you can for reactive forms. Instead, you need to add a directive to the template.</source>
          <target state="translated">テンプレート駆動型フォームでは、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスに直接アクセスできないため、リアクティブフォームの場合のようにバリデーターを渡すことはできません。代わりに、テンプレートにディレクティブを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="48492c39622ecb3062934d6f8c81b07a54a70450" translate="yes" xml:space="preserve">
          <source>In terms of project structure, this is where the work begins:</source>
          <target state="translated">プロジェクトの仕組みとしては、ここからが仕事の始まりです。</target>
        </trans-unit>
        <trans-unit id="6af431ed4c05cfe4dc08e184fe613d756b260244" translate="yes" xml:space="preserve">
          <source>In terms of syntax, template expressions are similar to JavaScript. Many JavaScript expressions are legal template expressions, with a few exceptions.</source>
          <target state="translated">構文の点では、テンプレート式はJavaScriptに似ています。JavaScriptの式の多くは、いくつかの例外を除いて、合法的なテンプレート式です。</target>
        </trans-unit>
        <trans-unit id="09e5d39b1c7c8f014b6062dd7a1bc332ba6b3f66" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;router#optional-route-parameters&quot;&gt;route parameters&lt;/a&gt; example, you only dealt with parameters specific to the route, but what if you wanted optional parameters available to all routes? This is where query parameters come into play.</source>
          <target state="translated">で&lt;a href=&quot;router#optional-route-parameters&quot;&gt;ルートパラメーターの&lt;/a&gt;例は、唯一のルートにパラメータの特定を扱っていますが、すべてのルートが利用できるオプションのパラメータをどのような場合はどうでしょうか。ここでクエリパラメータが役立ちます。</target>
        </trans-unit>
        <trans-unit id="5ac26089710632524cad22cceefd6020163e7ab7" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;router-tutorial-toh#optional-route-parameters&quot;&gt;route parameters&lt;/a&gt; section, you only dealt with parameters specific to the route. However, you can use query parameters to get optional parameters available to all routes.</source>
          <target state="translated">で&lt;a href=&quot;router-tutorial-toh#optional-route-parameters&quot;&gt;ルートパラメーターの&lt;/a&gt;セクション、あなただけのルートへのパラメータの特定に対処します。ただし、クエリパラメータを使用して、すべてのルートで使用可能なオプションのパラメータを取得できます。</target>
        </trans-unit>
        <trans-unit id="0820c06ab8c6d0ef8a8fe1b0b929c48f6630bb66" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;toh-pt0#app-wide-styles&quot;&gt;first tutorial&lt;/a&gt;, you set the basic styles for the entire application in &lt;code&gt;styles.css&lt;/code&gt;. That stylesheet didn't include styles for this list of heroes.</source>
          <target state="translated">では&lt;a href=&quot;toh-pt0#app-wide-styles&quot;&gt;最初のチュートリアル&lt;/a&gt;、あなたは全体のアプリケーションのための基本的なスタイルを設定し &lt;code&gt;styles.css&lt;/code&gt; 。そのスタイルシートには、このヒーローのリストのスタイルは含まれていませんでした。</target>
        </trans-unit>
        <trans-unit id="9ff53014dbd002b257b76fc01a67c8662544ebee" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;toh-pt6&quot;&gt;HTTP tutorial&lt;/a&gt;, you'll call &lt;code&gt;HttpClient.get&amp;lt;Hero[]&amp;gt;()&lt;/code&gt; which also returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; that emits &lt;em&gt;a single value&lt;/em&gt;, an array of heroes from the body of the HTTP response.</source>
          <target state="translated">&lt;a href=&quot;toh-pt6&quot;&gt;HTTPチュートリアル&lt;/a&gt;、あなたが電話します &lt;code&gt;HttpClient.get&amp;lt;Hero[]&amp;gt;()&lt;/code&gt; も返す &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; 発する&lt;em&gt;単一の値&lt;/em&gt;、HTTP応答の本体からヒーローのアレイ。</target>
        </trans-unit>
        <trans-unit id="b1d8e3e61174d25c0c4cf9e3fb0410f3a8581bbc" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;workspace configuration file&lt;/a&gt;, an &quot;architect&quot; section provides configuration options for Architect builders.</source>
          <target state="translated">では&lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;、ワークスペースの設定ファイル&lt;/a&gt;、「建築家」セクションには、アーキテクトビルダーのための設定オプションを提供します。</target>
        </trans-unit>
        <trans-unit id="a2b4efd306cdfa6d091bc13bfe331154e2fde145" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator for a component.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; の@ Component（）デコレーター。</target>
        </trans-unit>
        <trans-unit id="11992fcba8b5395115e22e411c3650f43745f117" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator, notice the selector name, &lt;code&gt;ad-host&lt;/code&gt;; that's what you use to apply the directive to the element. The next section shows you how.</source>
          <target state="translated">では &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレータ、セレクタ名、気づく &lt;code&gt;ad-host&lt;/code&gt; ; これは、ディレクティブを要素に適用するために使用するものです。次のセクションでは、その方法を示します。</target>
        </trans-unit>
        <trans-unit id="ff586c6893dff74ac24103ccba179ce78c8fd44d" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator, notice the selector name, &lt;code&gt;adHost&lt;/code&gt;; that's what you use to apply the directive to the element. The next section shows you how.</source>
          <target state="translated">では &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレータ、セレクタ名、気づく &lt;code&gt;adHost&lt;/code&gt; を。これは、ディレクティブを要素に適用するために使用するものです。次のセクションでは、その方法を説明します。</target>
        </trans-unit>
        <trans-unit id="22feceeafd715b7f8da2f83c22752555ac3c93c1" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator for the service itself.</source>
          <target state="translated">サービス自体の &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータ。</target>
        </trans-unit>
        <trans-unit id="4f13851c0ebd5a6ff72bf789e168b55892a0232a" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator for an NgModule.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; の@ NgModule（）デコレータ。</target>
        </trans-unit>
        <trans-unit id="2274075c2bf540e16098ef50a72f44b04cdc14fd" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;AppComponent&lt;/code&gt; template, &lt;code&gt;fontSizePx&lt;/code&gt; is two-way bound to the &lt;code&gt;SizerComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt;テンプレートでは、&lt;code&gt;fontSizePx&lt;/code&gt;は&lt;code&gt;SizerComponent&lt;/code&gt;に双方向でバインドされています。</target>
        </trans-unit>
        <trans-unit id="6486f7643dd48c9967dcdd245700203deebedc2e" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;AppComponent&lt;/code&gt;, &lt;code&gt;fontSizePx&lt;/code&gt; establishes the initial &lt;code&gt;SizerComponent.size&lt;/code&gt; value by setting the value to &lt;code&gt;16&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; 、 &lt;code&gt;fontSizePx&lt;/code&gt; は初期確立 &lt;code&gt;SizerComponent.size&lt;/code&gt; のに値を設定することによって値を &lt;code&gt;16&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b03921e4e22315726b2588d9aecac260d6b1661" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;AppModule&lt;/code&gt;, import the &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; and the &lt;code&gt;InMemoryDataService&lt;/code&gt; class, which you will create in a moment.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; で、すぐに作成する &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; および &lt;code&gt;InMemoryDataService&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="962c3bfac2312dcb14ad043348facd5c496cbeb9" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;AppRoutingModule&lt;/code&gt;, you used the static &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method to register the routes and application level service providers. In a feature module you use the static &lt;code&gt;forChild()&lt;/code&gt; method.</source>
          <target state="translated">では &lt;code&gt;AppRoutingModule&lt;/code&gt; 、あなたは静的な使用 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; ルートとアプリケーション・レベル・サービス・プロバイダを登録する方法を。機能モジュールでは、静的な &lt;code&gt;forChild()&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="677f4f33e13f4a8b9fa933701588716ce9142d4f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;BUILD.bazel&lt;/code&gt; file, each rule must first be imported, using the &lt;code&gt;load&lt;/code&gt; statement. Then the rule is called with some attributes, and the result of calling the rule is that you've declared to Bazel how it can derive some outputs given some inputs and dependencies. Then later, when you run a &lt;code&gt;bazel&lt;/code&gt; command line, Bazel loads all the rules you've declared to determine an absolute ordering of what needs to be run. Note that only the rules needed to produce the requested output will actually be executed.</source>
          <target state="translated">で &lt;code&gt;BUILD.bazel&lt;/code&gt; のファイル、各ルールは、まず使用して、インポートする必要があり &lt;code&gt;load&lt;/code&gt; 声明を。次に、いくつかの属性を使用してルールが呼び出されます。ルールを呼び出した結果、Bazelに対して、入力と依存関係が与えられた場合に、どのように出力を導出するかを宣言しました。その後、 &lt;code&gt;bazel&lt;/code&gt; コマンドラインを実行すると、Bazelは宣言されたすべてのルールをロードして、実行する必要があるものの絶対的な順序を決定します。要求された出力を生成するために必要なルールのみが実際に実行されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ff73a4f29b4dafba90546044a92eb6295b78516d" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;CartComponent&lt;/code&gt; class, define the &lt;code&gt;checkoutForm&lt;/code&gt; property to store the form model.</source>
          <target state="translated">で &lt;code&gt;CartComponent&lt;/code&gt; のクラス定義 &lt;code&gt;checkoutForm&lt;/code&gt; の形状モデルを格納するプロパティ。</target>
        </trans-unit>
        <trans-unit id="01997d24bac7bafa6f0678f1e46558c3083893f4" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;CartService&lt;/code&gt; class, define an &lt;code&gt;items&lt;/code&gt; property to store the array of the current products in the cart.</source>
          <target state="translated">で &lt;code&gt;CartService&lt;/code&gt; のクラス定義 &lt;code&gt;items&lt;/code&gt; カート内の現在の製品の配列を格納するプロパティ。</target>
        </trans-unit>
        <trans-unit id="af276f659fcdc7e39c68c1ac45abbf64eb51dc71" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;CartService&lt;/code&gt; class, define an &lt;code&gt;items&lt;/code&gt; property to store the list (array) of the current products in the cart.</source>
          <target state="translated">で &lt;code&gt;CartService&lt;/code&gt; のクラス定義 &lt;code&gt;items&lt;/code&gt; カート内の現在の製品のリスト（配列）を格納するプロパティを。</target>
        </trans-unit>
        <trans-unit id="5867d4d5bfeee0f55a7464e033d66ab84c592db8" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;Hero Detail&lt;/code&gt; and &lt;code&gt;Crisis Detail&lt;/code&gt;, the app waited until the route was activated to fetch the respective hero or crisis.</source>
          <target state="translated">で &lt;code&gt;Hero Detail&lt;/code&gt; と &lt;code&gt;Crisis Detail&lt;/code&gt; ルートは、それぞれのヒーローや危機をフェッチするために活性化されるまで、アプリが待っていました。</target>
        </trans-unit>
        <trans-unit id="18c1043ce48596bb1dfc52c7f2a46397b1f7b0f8" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;HeroDetail&lt;/code&gt; component class, add the following &lt;code&gt;save()&lt;/code&gt; method, which persists hero name changes using the hero service &lt;code&gt;updateHero()&lt;/code&gt; method and then navigates back to the previous view.</source>
          <target state="translated">&lt;code&gt;HeroDetail&lt;/code&gt; コンポーネントクラスは、次のように追加 &lt;code&gt;save()&lt;/code&gt; ヒーローサービス使用ヒーロー名の変更を持続する方法、 &lt;code&gt;updateHero()&lt;/code&gt; メソッドを、次にバック前のビューにナビゲートします。</target>
        </trans-unit>
        <trans-unit id="2156da5df59cee5a225281c56c30a9cab56708ab" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;HeroService&lt;/code&gt;, import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">では &lt;code&gt;HeroService&lt;/code&gt; 、輸入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3b722dd2b3d365c95d5bd3fe88be0090f5c815d5" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ItemListComponent&lt;/code&gt; the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;items&lt;/code&gt;, has a type of &lt;code&gt;Item[]&lt;/code&gt;.</source>
          <target state="translated">で &lt;code&gt;ItemListComponent&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;items&lt;/code&gt; の種類有し &lt;code&gt;Item[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ca02e5a12bc00052325d452bf3f5957538434cc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;Phone&lt;/code&gt; service, you can explicitly annotate the &lt;code&gt;$resource&lt;/code&gt; service dependency as an &lt;code&gt;angular.resource.IResourceService&lt;/code&gt; - a type defined by the AngularJS typings.</source>
          <target state="translated">で &lt;code&gt;Phone&lt;/code&gt; サービスは、明示的に注釈を付けることができます &lt;code&gt;$resource&lt;/code&gt; としてサービスの依存関係 &lt;code&gt;angular.resource.IResourceService&lt;/code&gt; AngularJSのタイピングで定義された型を- 。</target>
        </trans-unit>
        <trans-unit id="a5e662caedf020f11cf3036766fb27dbfdab3cfd" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ProductAlertsComponent&lt;/code&gt; class definition, define a property named &lt;code&gt;product&lt;/code&gt; with an &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator. The &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator indicates that the property value passes in from the component's parent, the product list component.</source>
          <target state="translated">で &lt;code&gt;ProductAlertsComponent&lt;/code&gt; のクラス定義、プロパティの名前を定義 &lt;code&gt;product&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレータ。 &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレータは、プロパティの値は、コンポーネントの親、製品リストコンポーネントからに渡すことを示しています。</target>
        </trans-unit>
        <trans-unit id="36898b78d65205ea3838be208da032aa36540e47" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ProfileEditor&lt;/code&gt; component, add the &lt;code&gt;Validators.required&lt;/code&gt; static method as the second item in the array for the &lt;code&gt;firstName&lt;/code&gt; control.</source>
          <target state="translated">で &lt;code&gt;ProfileEditor&lt;/code&gt; の成分、追加 &lt;code&gt;Validators.required&lt;/code&gt; のための配列の2番目の項目として静的方法 &lt;code&gt;firstName&lt;/code&gt; 制御。</target>
        </trans-unit>
        <trans-unit id="92ee776b0a8c4703a5ed41d37503aaec513d8b04" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;angular.json&lt;/code&gt; configuration file, add the associated script files to the &quot;scripts&quot; array:</source>
          <target state="translated">で &lt;code&gt;angular.json&lt;/code&gt; の設定ファイル、「スクリプト」配列に関連したスクリプトファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="1a9899ccac78789435c820f6606e4531795090bf" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;angular.json&lt;/code&gt; file, each project has an &quot;architect&quot; section that contains targets which configure builders. Some of these targets correspond to &lt;a href=&quot;glossary#cli&quot;&gt;CLI commands&lt;/a&gt;, such as &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;lint&lt;/code&gt;.</source>
          <target state="translated">で &lt;code&gt;angular.json&lt;/code&gt; のファイル、各プロジェクトには、ターゲットのconfigureビルダーが含まれている「建築家」セクションがあります。これらのターゲットの一部は、 &lt;code&gt;build&lt;/code&gt; 、 &lt;code&gt;serve&lt;/code&gt; 、 &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;lint&lt;/code&gt; などの&lt;a href=&quot;glossary#cli&quot;&gt;CLIコマンド&lt;/a&gt;に対応しています。</target>
        </trans-unit>
        <trans-unit id="94de57a6cb371bf77619355ba9427137a477c222" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;app.component.ts&lt;/code&gt;, add a &lt;code&gt;logger()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;app.component.ts&lt;/code&gt; 、追加 &lt;code&gt;logger()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="62dde02e97dfc75cca7459efe150d4efeef31929" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;closed&lt;/code&gt; state, shown below, the button has a height of 100 pixels, an opacity of 0.5, and a background color of green.</source>
          <target state="translated">で &lt;code&gt;closed&lt;/code&gt; 、以下に示す状態では、ボタンは、100個のピクセルの高さは、0.5の不透明度、及び緑色の背景色を有しています。</target>
        </trans-unit>
        <trans-unit id="f0e79bc039a97e654def058d6c01677193e8e1ac" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;flying-heroes.component.html (v1)&lt;/code&gt; template, the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater displays the hero names.</source>
          <target state="translated">では &lt;code&gt;flying-heroes.component.html (v1)&lt;/code&gt; テンプレート、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピータは、英雄の名前が表示されます。</target>
        </trans-unit>
        <trans-unit id="94125f0a02fd08e44127e50aa5dff39b0e271acf" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;imports&lt;/code&gt; array, update the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; section as follows.</source>
          <target state="translated">&lt;code&gt;imports&lt;/code&gt; 配列、更新 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 次のようにセクション。</target>
        </trans-unit>
        <trans-unit id="b6237dfcfe55567721272937836c6e2f073f47d0" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;index.html&lt;/code&gt; file, update the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag to include the new style sheet.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; ファイル、更新 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 新しいスタイルシートを含めるようにタグを。</target>
        </trans-unit>
        <trans-unit id="166e5ae5219a736e7e64042d01444638aec53e58" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ngOnInit()&lt;/code&gt; method, &lt;em&gt;subscribe&lt;/em&gt; to route params and fetch the product based on the &lt;code&gt;productId&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; メソッド、&lt;em&gt;加入&lt;/em&gt;ルートのparamsへとに基づいて製品フェッチ &lt;code&gt;productId&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0435da30463a3a4f676343098e858808a78ebf7b" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ngOnInit()&lt;/code&gt; method, subscribe to route parameters and fetch the product based on the &lt;code&gt;productId&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; メソッド、ルートパラメータにサブスクライブに基づいて製品フェッチ &lt;code&gt;productId&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3ca67bc8f59ab32b93f10aa761e0dc952786bee" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ngOnInit()&lt;/code&gt; method, use the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service to retrieve the parameters for the route, pull the hero &lt;code&gt;id&lt;/code&gt; from the parameters, and retrieve the hero to display.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; メソッド、使用 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; の、ルートのパラメータを取得する主人公プルするサービス &lt;code&gt;id&lt;/code&gt; パラメータから、ディスプレイに主人公を取り出します。</target>
        </trans-unit>
        <trans-unit id="8a184e86e3a0e42b994b7ab8f4d3105c6d66f4be" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ngOnInit()&lt;/code&gt;&lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;lifecycle hook&lt;/a&gt; call &lt;code&gt;getHero()&lt;/code&gt; and define it as follows.</source>
          <target state="translated">で &lt;code&gt;ngOnInit()&lt;/code&gt; &lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;ライフサイクルフック&lt;/a&gt;コール &lt;code&gt;getHero()&lt;/code&gt; と次のように定義します。</target>
        </trans-unit>
        <trans-unit id="1ec1c3010006a416ad9d0a3a466d135533ea48e4" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;package.json&lt;/code&gt; file, add a &lt;code&gt;builders&lt;/code&gt; key that tells the Architect tool where to find our builder definition file.</source>
          <target state="translated">で &lt;code&gt;package.json&lt;/code&gt; のファイル、追加 &lt;code&gt;builders&lt;/code&gt; 私たちのビルダー定義ファイルを検索するアーキテクトツールを伝えるキーを。</target>
        </trans-unit>
        <trans-unit id="b9948e144c79c9c4f0b9dd0251b423e396dd63cb" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;product-list&lt;/code&gt; folder, open the template file &lt;code&gt;product-list.component.html&lt;/code&gt;.</source>
          <target state="translated">では &lt;code&gt;product-list&lt;/code&gt; 、フォルダ、テンプレートファイルを開く &lt;code&gt;product-list.component.html&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97dfb1a67e0acfe8f117f2fb6b7fbabfa7951806" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;schematics/&lt;/code&gt; folder, create an &lt;code&gt;ng-add/&lt;/code&gt; folder for your first schematic.</source>
          <target state="translated">では &lt;code&gt;schematics/&lt;/code&gt; フォルダの作成、 &lt;code&gt;ng-add/&lt;/code&gt; あなたの最初の概略のフォルダを。</target>
        </trans-unit>
        <trans-unit id="071be1c94586b5d59a7d3e0b251a1712459e1078" translate="yes" xml:space="preserve">
          <source>In the &lt;span name=&quot;ngmodules&quot;&gt;live example&lt;/span&gt; the root &lt;code&gt;AppModule&lt;/code&gt; imports the &lt;code&gt;GreetingModule&lt;/code&gt; and adds the &lt;code&gt;providers&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt; providers. Specifically, Angular accumulates all imported providers before appending the items listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt;. This sequence ensures that whatever you add explicitly to the &lt;code&gt;AppModule&lt;/code&gt; providers takes precedence over the providers of imported modules.</source>
          <target state="translated">では&lt;span name=&quot;ngmodules&quot;&gt;実際の例&lt;/span&gt;ルート &lt;code&gt;AppModule&lt;/code&gt; の輸入 &lt;code&gt;GreetingModule&lt;/code&gt; と追加 &lt;code&gt;providers&lt;/code&gt; する &lt;code&gt;AppModule&lt;/code&gt; プロバイダ。具体的には、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; リストされている項目を追加する前に、Angularはインポートされたすべてのプロバイダーを蓄積します。このシーケンスにより、 &lt;code&gt;AppModule&lt;/code&gt; プロバイダーに明示的に追加したものはすべて、インポートされたモジュールのプロバイダーよりも優先されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
