<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="d78cde4ebf8adc6402820de1a9ff2cfdd781a93f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://github.com/mhartington/vim-angular2-snippets&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;https://www.vim.org/&quot;&gt;Vim&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://github.com/mhartington/vim-angular2-snippets&quot;&gt;スニペット&lt;/a&gt;用&lt;a href=&quot;https://www.vim.org/&quot;&gt;のVim&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="a6f41699986d39d799bceff1c431cd2ab77823b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://github.com/orizens/sublime-angular2-snippets&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://github.com/orizens/sublime-angular2-snippets&quot;&gt;スニペット&lt;/a&gt;のための&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;崇高なテキスト&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="83b65137ae8950592159679b28b2e8c46f6729a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://github.com/orizens/sublime-angular2-snippets&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://github.com/orizens/sublime-angular2-snippets&quot;&gt;スニペット&lt;/a&gt;のための&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;崇高なテキスト&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="41ec4d969a410f664dc34b3fd2f353bcb573d205" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2&quot;&gt;スニペット&lt;/a&gt;用&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;のVisual Studioのコード&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="634508664461f7cdb59e0e1f093e99597ffb329f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using the name SharedModule when the contents of a shared module are referenced across the entire application.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;共有モジュールのコンテンツがアプリケーション全体で参照される場合は、SharedModuleという名前の使用を&lt;strong&gt;検討&lt;/strong&gt;して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b157426ab1709e92e2943d1ac9a63918d7e02346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt;&lt;em&gt;not&lt;/em&gt; providing services in shared modules. Services are usually singletons that are provided once for the entire application or in a particular feature module. There are exceptions, however. For example, in the sample code that follows, notice that the &lt;code&gt;SharedModule&lt;/code&gt; provides &lt;code&gt;FilterTextService&lt;/code&gt;. This is acceptable here because the service is stateless;that is, the consumers of the service aren't impacted by new instances.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;共有モジュールでサービスを提供し&lt;em&gt;ない&lt;/em&gt;ことを&lt;strong&gt;検討してください&lt;/strong&gt;。サービスは通常、アプリケーション全体または特定の機能モジュールで一度提供されるシングルトンです。ただし、例外があります。たとえば、次のサンプルコードでは、 &lt;code&gt;SharedModule&lt;/code&gt; がFilterTextServiceを提供していることに注意して &lt;code&gt;FilterTextService&lt;/code&gt; 。サービスはステートレスであるため、これは許容されます。つまり、サービスのコンシューマは新しいインスタンスの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="c04a7871021e285dcd75fe31e0335e710bc0ec24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a FormGroup instance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormGroupインスタンスを作成します&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0c01ac73caacc1886db45b8b819361cf42a9fc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create a nested group&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ネストされたグループを作成する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac00e428f072bd36633594b46edcf64c28c1666e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt;: Use &lt;code&gt;queryParamsHandling: &quot;preserve&quot;&lt;/code&gt; instead to preserve query parameters for the next navigation.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;：使用 &lt;code&gt;queryParamsHandling: &quot;preserve&quot;&lt;/code&gt; ではなく次のナビゲーション用のクエリパラメータを維持するために。</target>
        </trans-unit>
        <trans-unit id="08eec026d337b1bf8558f293be8118ccaf49af79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DISABLED&lt;/strong&gt;: This control is exempt from validation checks.</source>
          <target state="translated">&lt;strong&gt;無効&lt;/strong&gt;：このコントロールは検証チェックから除外されています。</target>
        </trans-unit>
        <trans-unit id="083896d6fad806eada6448347f24470017fcc823" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data request&lt;/strong&gt;: request URL that begins &lt;code&gt;/api&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;データ要求&lt;/strong&gt;： &lt;code&gt;/api&lt;/code&gt; で始まる要求URL 。</target>
        </trans-unit>
        <trans-unit id="091d76a7360a830e54feea860f18ff4abd95272f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Declaration syntax&lt;/strong&gt;: It's important to follow the route declaration syntax &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; to allow &lt;code&gt;ngc&lt;/code&gt; to discover the lazy-loaded module and the associated &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. You can find the complete list of allowed syntax constructs &lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;here&lt;/a&gt;. These restrictions will be relaxed with the release of Ivy since it'll no longer use &lt;code&gt;NgFactories&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;宣言構文&lt;/strong&gt;： &lt;code&gt;ngc&lt;/code&gt; が遅延ロードされたモジュールと関連するNgModuleを検出できるようにするには、ルート宣言構文 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; に従うことが &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; です。許可されている構文構成要素の完全なリストは、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;こちらにあります&lt;/a&gt;。これらの制限は &lt;code&gt;NgFactories&lt;/code&gt; 使用しないため、Ivyのリリースで緩和されます。</target>
        </trans-unit>
        <trans-unit id="a4ddafb3b2487eab805488a860bd8b25b5f90e98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Declaration syntax&lt;/strong&gt;: It's important to follow the route declaration syntax &lt;code&gt;loadChildren: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; to allow &lt;code&gt;ngc&lt;/code&gt; to discover the lazy-loaded module and the associated &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. You can find the complete list of allowed syntax constructs &lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;here&lt;/a&gt;. These restrictions will be relaxed with the release of Ivy since it'll no longer use &lt;code&gt;NgFactories&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;宣言構文&lt;/strong&gt;：ルート宣言構文 &lt;code&gt;loadChildren: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; &lt;code&gt;ngc&lt;/code&gt; 、ngcが遅延ロードされたモジュールと関連するNgModuleを検出できるようにすることが重要 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。許可されている構文構造の完全なリストは、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;ここにあります&lt;/a&gt;。これらの制限は、 &lt;code&gt;NgFactories&lt;/code&gt; を使用しなくなるため、Ivyのリリースで緩和されます。</target>
        </trans-unit>
        <trans-unit id="e08a1864513ad17ff1e02ee4250dd6ba4a5f1dea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Define a FormArray control&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormArrayコントロールを定義する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f2d372b8be67dc4125fd758497e5bdcb4514fcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; 'SystemJsNgModuleLoader' is deprecated, and this is part of its usage. Use 'import()' syntax instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;「SystemJsNgModuleLoader」は非推奨であり、これはその使用法の一部です。代わりに「import（）」構文を使用してください。</target>
        </trans-unit>
        <trans-unit id="37acc96ef7149015893622f741759188373e05e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since v5. Use &lt;code&gt;&lt;a href=&quot;static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; instead, which also supports &lt;a href=&quot;../../guide/aot-compiler&quot;&gt;Ahead-of-Time compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5以降非推奨。代わりに &lt;code&gt;&lt;a href=&quot;static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; を使用してください。これは&lt;a href=&quot;../../guide/aot-compiler&quot;&gt;Ahead-of-Timeコンパイル&lt;/a&gt;もサポートしています。</target>
        </trans-unit>
        <trans-unit id="4d4b4254c42c47aa78347eb6f65fba5443ee7b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since v5. Use &lt;code&gt;&lt;a href=&quot;upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; instead, which also supports &lt;a href=&quot;../guide/aot-compiler&quot;&gt;Ahead-of-Time compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5以降非推奨。代わりに &lt;code&gt;&lt;a href=&quot;upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; を使用してください。これは&lt;a href=&quot;../guide/aot-compiler&quot;&gt;Ahead-of-Timeコンパイル&lt;/a&gt;もサポートしています。</target>
        </trans-unit>
        <trans-unit id="58437f0c7a32c9615ebe367a3c355d86169b894b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since version 11.0. No longer required to disable CSS extraction for HMR.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;バージョン11.0以降非推奨。HMRのCSS抽出を無効にする必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="1ec7dee0c924a12f7ff6dcaa892b9d6562479590" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; No longer has an effect.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;効果はなくなりました。</target>
        </trans-unit>
        <trans-unit id="237fcba7286454f7f53e6f8e698891316f1b4be9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; No longer needed as the format will be determined automatically.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;フォーマットが自動的に決定されるため、不要になりました。</target>
        </trans-unit>
        <trans-unit id="925908e29eee06ea6b1741f8241acf7ccfbd338d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; No replacement</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代替なし</target>
        </trans-unit>
        <trans-unit id="7c546b5482233a467aaed30da70f3a8b63827c7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Since 9.0.0. With Ivy, this property is no longer necessary.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; 9.0.0以降。Ivyを使用すると、このプロパティは不要になります。</target>
        </trans-unit>
        <trans-unit id="bc65e52dcd7199859a3b65305d3b2d02d941e152" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Since version 9.0.0 with Ivy, entryComponents is no longer necessary.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;バージョン9.0.0とIvy以降、entryComponentsは不要になりました。</target>
        </trans-unit>
        <trans-unit id="7b367cccbf1e09c3b7bce2ac47695e9d4dc39eff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated in favor of the &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; function which uses the ES dynamic &lt;code&gt;import()&lt;/code&gt; expression. This offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨になり、ES動的 &lt;code&gt;import()&lt;/code&gt; 式を使用する &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; 関数が優先されます。これにより、実行時にESモジュールを動的にロードするためのより自然で標準ベースのメカニズムが提供されます。</target>
        </trans-unit>
        <trans-unit id="4bafcd07b9102c993074eff8bc3b23eed91b9dcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated in favor of the &lt;code&gt;&lt;a href=&quot;router/loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; function which uses the ES dynamic &lt;code&gt;import()&lt;/code&gt; expression. This offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨になり、ES動的 &lt;code&gt;import()&lt;/code&gt; 式を使用する &lt;code&gt;&lt;a href=&quot;router/loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; 関数が優先されます。これにより、実行時にESモジュールを動的にロードするためのより自然で標準ベースのメカニズムが提供されます。</target>
        </trans-unit>
        <trans-unit id="055b744590c12172216b33ec47b42a63844460f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; This will be determined from the list of supported browsers specified in the 'browserslist' file.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;これは、「browserslist」ファイルで指定されたサポートされているブラウザーのリストから決定されます。</target>
        </trans-unit>
        <trans-unit id="a63dda9f368c88ef2fff245cb161403739426aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;NG_BUILD_PROFILING&quot; environment variable instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &quot;NG_BUILD_PROFILING&quot;環境変数を使用してください。</target>
        </trans-unit>
        <trans-unit id="79863918cb6736bb85a9c7aa01746ebfcab22473" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;ng lint --fix&quot; directly instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「nglint--fix」を直接使用してください。</target>
        </trans-unit>
        <trans-unit id="c18146bb864bb1dbf3954c121c2e2146621b2b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;skipTests&quot; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「skipTests」を使用してください。</target>
        </trans-unit>
        <trans-unit id="66e19436326424896d1bed787c27b394d738df7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;style&quot; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「スタイル」を使用してください。</target>
        </trans-unit>
        <trans-unit id="235645297b66848d5f3d56aeedfc2fce025f2a77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'format' option instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「format」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="292744433bda85c52572ca69fd14429f11eb27e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'i18n' project level sub-option 'sourceLocale' instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「i18n」プロジェクトレベルのサブオプション「sourceLocale」を使用してください。</target>
        </trans-unit>
        <trans-unit id="570fee2dec045b864a46bcef60c28888fee2f67c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'locales' object in the project metadata instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、プロジェクトメタデータで「locales」オブジェクトを使用してください。</target>
        </trans-unit>
        <trans-unit id="83cca91b5f385b167c5a1aa9928d9c46fd0b9679" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use 'localize' instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「localize」を使用してください。</target>
        </trans-unit>
        <trans-unit id="507192ba6170d6bcd2a4ed7f46d17aa201bf0d81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="d8389585613c09c90d8257d4b7b4a67921be42ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;core/renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;core/renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; （および &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; ）を使用してください。</target>
        </trans-unit>
        <trans-unit id="f8726733bf1271b934c806c58289c37fdffbc5eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="7600dac2d80ec1e13a4db993717a94c16d88aea7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3151ef25a5cdd2ad83ba9f4d2625c2f7b1fb77e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; （および &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; ）を使用してください。</target>
        </trans-unit>
        <trans-unit id="65e5d991ddb21f4ff9912354e05cb597716afbc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3b27f889df31aaa0e329ccce7ac8d5b515c1bed8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;static/getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;static/getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="81b8b330a2f0d3d8717253f43f5789f21374f68e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;static/setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;static/setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5d36185e5d47e9acc688480cafb5a1147ca057fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;aot&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザービルダーの「aot」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="e7dd8f0137b6adb9e6afd60c5115cbb76e84d6a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;baseHref&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザービルダーで「baseHref」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="bf41d0b66bc1cfe09e3a797f7a6ce54259b25dd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;commonChunk&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザビルダーの「commonChunk」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="e121e1d932c7f49b989311bc1c0df90b48f1f5d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;deployUrl&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザービルダーで「deployUrl」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="a1fe7b0f8fb86e681da1624c976d2a19f27c8168" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;optimization&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザビルダーの「最適化」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="252dd704f6e641a65e4577e82f16a747c5a29268" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;progress&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザービルダーの「進行状況」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="02081a5ad1ecc03f12079613969dec1830126e47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;sourceMap&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザビルダーの「sourceMap」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="0505d731012f84abff066a4e3bbddb04b717a644" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &quot;vendorChunk&quot; option in the browser builder instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに、ブラウザビルダーの「vendorChunk」オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="68dc4f474fa2f8e171e4994ec68d005eb57ccfa5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8dcbdcbdc91a1c7c89aee2baf83673a141927cf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="42fc55fd12147abc3375b4e99dfc0d2e47cafbac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; all exports of this entry point are deprecated.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;このエントリポイントのすべてのエクスポートは非​​推奨です。</target>
        </trans-unit>
        <trans-unit id="9dd5753d046df275e32891f6bce86ec5baae5a64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v10 stop using. (No replacement, deemed unnecessary.)</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v10から使用を停止します。（交換は不要、不要とみなされます。）</target>
        </trans-unit>
        <trans-unit id="39b5621a21621d0cebccef1406b2807f1f105da0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v5</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5以降</target>
        </trans-unit>
        <trans-unit id="5de335e0f96c2b03317487d21a7fbb0026581bca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v5 - slow and brings in a lot of code, Use &lt;code&gt;Injector.create&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5から-低速で多くのコードを &lt;code&gt;Injector.create&lt;/code&gt; 代わりにInjector.createを使用してください。</target>
        </trans-unit>
        <trans-unit id="714378cbbe026cb8498d550e875517d6d3c88f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; in Angular v6 and will be removed in Angular v9.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; Angular v6では、Angular v9で削除されます。</target>
        </trans-unit>
        <trans-unit id="64d8aec8e2cb976e2adc6925069eaea4b2c0895a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; in v8, delete after v10. This API should be used only be generated code, and that code should now use ɵɵdefineInjectable instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v8では、v10以降に削除します。このAPIは生成されたコードのみで使用する必要があり、そのコードは代わりにɵɵdefineInjectableを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d2693e8709789eb21839270cd28f719582d31b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; platform-webworker is deprecated in Angular and will be removed in version 10</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; platform-webworkerはAngularで非推奨になり、バージョン10で削除されます</target>
        </trans-unit>
        <trans-unit id="f07546a2348e6b295898cbaa0322b3fb310e3d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2c193197c73a206e68c94449c1f2bb78a70fb157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="de8279388462f6f7ebfde5dd634d5703214cce70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8dc8e6700b79e4b74ede97c2acd1e560680178da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated in favor of the proposed ES dynamic &lt;code&gt;import()&lt;/code&gt; expression, which offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は推奨されないES動的 &lt;code&gt;import()&lt;/code&gt; 式に置き換えられ、実行時にESモジュールを動的にロードするためのより自然で標準ベースのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="5943c4ea89a53aefb708387c97aad12937f2ff21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated in favor of the proposed ES dynamic &lt;code&gt;import()&lt;/code&gt; expression, which offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は推奨されないES動的 &lt;code&gt;import()&lt;/code&gt; 式に置き換えられ、実行時にESモジュールを動的にロードするためのより自然で標準ベースのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="81681f4dcbfb6770c53a31c6d928d944d20c6253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8c995cc6b5b17eb7ebd3e27c35934db0107fc65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="873ff8967ff9d397276f3e98e6619d29bd23ca29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f50b6b8a7bb90d87da4a47e6f72d0e9ff80b29a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="11e39c20f48863dfab988889b74920f2ddc27662" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="84570c9c45665a858561e92aa28f0af1913f4e0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5075a7eacefa154459eeb9cff268cbaf4b768753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d3292cb4a773f93a7456116422f78a6cd47af09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7644da737215cae5ea50b5d936807d92d8145b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;loadChildren&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;loadChildren&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2407d5fe7ac13c5cc040854bd720396db1391041" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the Web Tracing Framework is no longer supported in Angular</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; Web Tracing FrameworkはAngularでサポートされなくなりました</target>
        </trans-unit>
        <trans-unit id="dfec05844f7fb08c3a0b3ea54156ac2585631aee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;&lt;a href=&quot;testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;, (expected removal in v12)</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; を使用してください（ v12で削除予定）</target>
        </trans-unit>
        <trans-unit id="7b02b0beebfbbcf7ed12a43495fd9d7256f7623e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;, (expected removal in v12)</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; を使用してください（ v12で削除予定）</target>
        </trans-unit>
        <trans-unit id="a170c8493a393e1a6491d43d6a70b59388a153e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; v4.0.0 - Should not be part of public API.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v4.0.0-パブリックAPIの一部であってはなりません。</target>
        </trans-unit>
        <trans-unit id="6938bb41cd33b5fe739c64f36738c5ddfbcccb7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; v4.0.0 - Use IterableChangeRecord instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v4.0.0-代わりにIterableChangeRecordを使用してください。</target>
        </trans-unit>
        <trans-unit id="b4a2d9d7036ccea7bde0ff0c57610643265b9bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35a0a9f9f1b99f34042e07869a539e2e61795ac9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;の使用 &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="e891144428fcc23c855970e639d89788b9be4a8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;の使用 &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="b733cd37134a6600d34fbded83ae0d2c8bda6c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v4.0.0 use Type</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;タイプv4.0.0から非&lt;strong&gt;推奨&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b7884c01f5310ada144bb105a9e85eb66c26786" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v5 use the new signature Injector.create(options)</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;v5から非&lt;strong&gt;推奨になり&lt;/strong&gt;ました。新しいシグネチャInjector.create（options）を使用してください。</target>
        </trans-unit>
        <trans-unit id="c2cfaf298ecb277b731ae6b17ef1fbe104888611" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v9.0.0 use TestBed.inject</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;v9.0.0から非&lt;strong&gt;推奨&lt;/strong&gt;TestBed.injectを使用</target>
        </trans-unit>
        <trans-unit id="6d2dec88f3a4c9ce3fef60b256b2e921ddb9bebe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; pending requests are now tracked with zones</source>
          <target state="translated">&lt;strong&gt;非推奨の&lt;/strong&gt;保留中のリクエストはゾーンで追跡されるようになりました</target>
        </trans-unit>
        <trans-unit id="6f0b0e0b151b9e709dfb47c7aa030e85bb10ded7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; pending requests are now tracked with zones.</source>
          <target state="translated">&lt;strong&gt;非推奨の&lt;/strong&gt;保留中のリクエストは、ゾーンで追跡されるようになりました。</target>
        </trans-unit>
        <trans-unit id="1b8bfe60f6374240970e3cfa55d7d3d5565a9b90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; platform-webworker is deprecated in Angular and will be removed in version 10</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;非&lt;strong&gt;推奨の&lt;/strong&gt;プラットフォームウェブワーカーはAngularで非推奨になり、バージョン10で削除されます</target>
        </trans-unit>
        <trans-unit id="e45e0e7df40e753d21891233da9ca5086932ed9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; use &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;, (expected removal in v12)</source>
          <target state="translated">&lt;strong&gt;非推奨の&lt;/strong&gt;使用 &lt;code&gt;&lt;a href=&quot;waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 、（v12での削除予定）</target>
        </trans-unit>
        <trans-unit id="a172b2318a0ac73a016d038f3895b65a067f2ca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation notice:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨の通知：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1266d586920ef18ddce67324d995ea05cb70d75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation period:&lt;/strong&gt; When an API or a feature is deprecated, it will still be present in the &lt;a href=&quot;releases#schedule&quot;&gt;next two major releases&lt;/a&gt;. After that, deprecated APIs and features will be candidates for removal. A deprecation can be announced in any release, but the removal of a deprecated API or feature will happen only in major release. Until a deprecated API or feature is removed, it will be maintained according to the LTS support policy, meaning that only critical and security issues will be fixed.</source>
          <target state="translated">&lt;strong&gt;非推奨期間：&lt;/strong&gt; APIまたは機能が非推奨になっても、&lt;a href=&quot;releases#schedule&quot;&gt;次の2つのメジャーリリース&lt;/a&gt;には引き続き含まれます。その後、廃止されたAPIと機能は削除の候補になります。廃止はどのリリースでも発表できますが、廃止予定のAPIまたは機能の削除はメジャーリリースでのみ行われます。廃止されたAPIまたは機能が削除されるまで、LTSサポートポリシーに従って維持されます。つまり、重大な問題とセキュリティの問題のみが修正されます。</target>
        </trans-unit>
        <trans-unit id="6b32e7a1846e16a68c42cec19b613a6be6550200" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation period:&lt;/strong&gt; When an API or a feature is deprecated, it will still be present in the next two major releases. After that, deprecated APIs and features will be candidates for removal. A deprecation can be announced in any release, but the removal of a deprecated API or feature will happen only in major release. Until a deprecated API or feature is removed, it will be maintained according to the LTS support policy, meaning that only critical and security issues will be fixed.</source>
          <target state="translated">&lt;strong&gt;非推奨期間：&lt;/strong&gt; APIまたは機能が非推奨になった場合でも、次の2つのメジャーリリースには引き続き存在します。その後、非推奨のAPIと機能が削除の候補になります。非推奨はどのリリースでも発表できますが、非推奨のAPIまたは機能の削除はメジャーリリースでのみ行われます。非推奨のAPIまたは機能が削除されるまで、LTSサポートポリシーに従って維持されます。つまり、重大なセキュリティの問題のみが修正されます。</target>
        </trans-unit>
        <trans-unit id="211456061da7605c0f7d7fe2185e98a50a608aa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different types of forms and control collection&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;さまざまな種類のフォームとコントロールコレクション&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e490a567338601ca92aa995586988ec011881076" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Display form status&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フォームのステータスを表示する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb4d435403c525da223a9ab3fd0e284efff153e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Display the component&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コンポーネントを表示する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8591e588a4ef13f20829b503acd0c139fc679eb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Display the form array in the template&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テンプレートにフォーム配列を表示する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="169b22285b5954c65589e3b420ceceefcef8857c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not set a width greater than 700px&lt;/strong&gt;. If you wish to display a larger image, provide a link to the actual image that the user can click on to see the full size image separately as in this example of &lt;code&gt;source-map-explorer&lt;/code&gt; output from the &quot;Ahead-of-time Compilation&quot; guide:</source>
          <target state="translated">&lt;strong&gt;幅を700pxより大きく設定しないでください&lt;/strong&gt;。より大きな画像を表示したい場合は、「事前コンパイル」からの &lt;code&gt;source-map-explorer&lt;/code&gt; 出力の例のように、ユーザーがクリックしてフルサイズの画像を個別に表示できる実際の画像へのリンクを提供します。ガイド：</target>
        </trans-unit>
        <trans-unit id="7173a0c15f40867cd98f8476ae7d5cdb6a6bf73e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use the markdown image syntax, ![...](...).&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マークダウン画像構文！[...]（...）は使用しないでください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f432a37145e9e2323569b0ab88283548219bde9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not write inline code snippets&lt;/strong&gt; unless you have a good reason and the editor's permission to do so. In all other cases, code snippets should be generated automatically from tested code samples.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;正当な理由と編集者の許可がない限り、&lt;strong&gt;インラインコードスニペットを記述しないでください&lt;/strong&gt;。その他の場合はすべて、テスト済みのコードサンプルからコードスニペットを自動的に生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="b68a65a9af9cc3205a64a644f43bc32a38a5b9be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not&lt;/strong&gt; include the &lt;code&gt;node_modules&lt;/code&gt; folder in the project. Let it be a hidden project folder.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;プロジェクトに &lt;code&gt;node_modules&lt;/code&gt; フォルダーを含め&lt;strong&gt;ないでください&lt;/strong&gt;。非表示のプロジェクトフォルダーにします。</target>
        </trans-unit>
        <trans-unit id="8f05db6d262a6a382fc2ef4024ee286a3fcf9e55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; Use lower camel case for naming the selectors of directives.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ディレクティブのセレクターの命名にはキャメル小文字を使用&lt;strong&gt;して&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="756af44694e036aa11de735bfbf199d32f2786b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; append the symbol name with the conventional suffix (such as &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;Service&lt;/code&gt;) for a thing of that type.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;そのタイプのものについては、従来のサフィックス（ &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Module&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Service&lt;/code&gt; ）をシンボル名に付加して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="153352eca009138a1ed3de98b472f90cc0492ab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; append the symbol name with the suffix &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シンボル名に &lt;code&gt;Module&lt;/code&gt; という接尾辞を付加して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="37cc7c63695406b59611ab5b71220b9b942cd9a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be DRY (Don't Repeat Yourself).</source>
          <target state="translated">&lt;strong&gt;でください&lt;/strong&gt; DRY（自分を繰り返してはいけない）こと。</target>
        </trans-unit>
        <trans-unit id="c5a1d13d2b57fdec4bb4f3b13a493236cbac36e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be consistent in your choice.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;あなたの選択で一貫しています。</target>
        </trans-unit>
        <trans-unit id="68c41f8439d82dd2f76a9c3edd87b07a05e58ca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be descriptive with file names and keep the contents of the file to exactly one component.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ファイル名で記述することと、正確に一つのコンポーネントにファイルの内容を保持します。</target>
        </trans-unit>
        <trans-unit id="c00c45caf95d9b87e21cebc918c822f1c67e55ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create a feature module named &lt;code&gt;SharedModule&lt;/code&gt; in a &lt;code&gt;shared&lt;/code&gt; folder; for example, &lt;code&gt;app/shared/shared.module.ts&lt;/code&gt; defines &lt;code&gt;SharedModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;という名前の機能モジュール作成 &lt;code&gt;SharedModule&lt;/code&gt; で &lt;code&gt;shared&lt;/code&gt; フォルダを、たとえば、 &lt;code&gt;app/shared/shared.module.ts&lt;/code&gt; は &lt;code&gt;SharedModule&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="b3f7274c450f242bd1ba80e7d18c68014eeea065" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create a new service once the service begins to exceed that singular purpose.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;サービスがその単一の目的を超え始めたら、新しいサービスを作成して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7adcd12c026b630a50f2eaa8c3033ca30ea97afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule for all distinct features in an application; for example, a &lt;code&gt;Heroes&lt;/code&gt; feature.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;アプリケーションのすべての異なる機能に対してNgModuleを作成して&lt;strong&gt;ください&lt;/strong&gt;。たとえば、 &lt;code&gt;Heroes&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="69d3cab88de69451416caa19d56f243518d871ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule for each feature area.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;機能領域ごとにNgModuleを作成&lt;strong&gt;し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3ab22382cbe44c9bb5ecdff51614d741b044724f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule in the app's root folder, for example, in &lt;code&gt;/src/app&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;では、例えば、アプリケーションのルートフォルダにNgModuleを作成 &lt;code&gt;/src/app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="931cae31695433c127504b614b08f067dfca3841" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create folders named for the feature area they represent.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;それらが表す機能領域にちなんだ名前のフォルダを作成&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1296916986b4fe85a5dc6245d682901f7c88adfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create services with a single responsibility that is encapsulated by its context.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;そのコンテキストによってカプセル化される単一の責任を持つサービスを作成して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3911b104409eb46eaffb8f55baf1bb235a71bca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; declare all components, directives, and pipes in the &lt;code&gt;SharedModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;内のすべてのコンポーネント、ディレクティブ、およびパイプ宣言 &lt;code&gt;SharedModule&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="cab5a59ccabfc8e97b46f17a6cf05b11ae4c097a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; declare components, directives, and pipes in a shared module when those items will be re-used and referenced by the components declared in other feature modules.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;他の機能モジュールで宣言されたコンポーネントによってそれらのアイテムが再利用および参照される場合は、共有モジュールでコンポーネント、ディレクティブ、およびパイプを宣言&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2e08a28c59698b76a3c21a4c94e7aafedc71ed80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define one thing, such as a service or component, per file.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;ファイルごとに、そのようなサービスやコンポーネントとして、一つのことを定義します。</target>
        </trans-unit>
        <trans-unit id="d68cc4de5d4cfb0cfd8658d935f47e92d04addcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define small functions</source>
          <target state="translated">&lt;strong&gt;でください&lt;/strong&gt;小さな関数を定義します</target>
        </trans-unit>
        <trans-unit id="68498585b290359393f79634b03a1d41b1555619" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define the structure to follow these four basic guidelines, listed in order of importance.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;重要度の高い順にリストされたこれら4つの基本的なガイドラインに従うように構造を定義して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="fd4aaef7172d067ebe063baf539a3102330db269" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; end the filename of a &lt;em&gt;RoutingModule&lt;/em&gt; with &lt;code&gt;-routing.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;のファイル名を終了&lt;em&gt;RoutingModule&lt;/em&gt;と &lt;code&gt;-routing.module.ts&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="424cdd9134c136b2534980399cb6591450120475" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; export all symbols from the &lt;code&gt;SharedModule&lt;/code&gt; that other feature modules need to use.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;からすべてのシンボルをエクスポート &lt;code&gt;SharedModule&lt;/code&gt; その他のフィーチャモジュールを使用する必要があること。</target>
        </trans-unit>
        <trans-unit id="02fea1f308ef53e59c993bb9bc4366768cca349c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; extract templates and styles into a separate file, when more than 3 lines.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;3行を超える場合は、テンプレートとスタイルを別のファイルに抽出&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cbfa824dec9159053869b1067a3c0d6f3f94ba8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; follow a pattern that describes the symbol's feature then its type. The recommended pattern is &lt;code&gt;feature.type.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シンボルの機能を説明し、次にそのタイプを説明するパターンに従って&lt;strong&gt;ください&lt;/strong&gt;。推奨されるパターンは &lt;code&gt;feature.type.ts&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6eebcad366f314fe260de69a328ff8c2f2670360" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; give the file name the &lt;code&gt;.module.ts&lt;/code&gt; extension.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ファイル名を与える &lt;code&gt;.module.ts&lt;/code&gt; の拡張子を。</target>
        </trans-unit>
        <trans-unit id="0206f75503529ff71eb1a9f28d948773b91ba4cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; give the filename the conventional suffix (such as &lt;code&gt;.component.ts&lt;/code&gt;, &lt;code&gt;.directive.ts&lt;/code&gt;, &lt;code&gt;.module.ts&lt;/code&gt;, &lt;code&gt;.pipe.ts&lt;/code&gt;, or &lt;code&gt;.service.ts&lt;/code&gt;) for a file of that type.</source>
          <target state="translated">&lt;strong&gt;でください&lt;/strong&gt;（のようなファイル名に、従来の接尾辞を与える &lt;code&gt;.component.ts&lt;/code&gt; 、 &lt;code&gt;.directive.ts&lt;/code&gt; 、 &lt;code&gt;.module.ts&lt;/code&gt; 、 &lt;code&gt;.pipe.ts&lt;/code&gt; 、または &lt;code&gt;.service.ts&lt;/code&gt; そのタイプのファイルのために）。</target>
        </trans-unit>
        <trans-unit id="deca3050ed9d3ec3756dcf8bb288319f1c89aa7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; have a near term view of implementation and a long term vision.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;な実装の短期的視野と長期的なビジョンを持っています。</target>
        </trans-unit>
        <trans-unit id="1ef24dc995d906797c68ee59d06da91798882a97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; implement the lifecycle hook interfaces.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ライフサイクルフックインタフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="c303aa380fb4cff0efa9842a334e696f89bf8355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; import all modules required by the assets in the &lt;code&gt;SharedModule&lt;/code&gt;; for example, &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;で資産に必要なすべてのモジュールをインポート &lt;code&gt;SharedModule&lt;/code&gt; を。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; やFormsModuleなど &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75234a1890e1015e5a48b582eb574e1f2e81ceb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; include error handling in the bootstrapping logic.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;ブートストラップ・ロジックでのエラー処理が含まれます。</target>
        </trans-unit>
        <trans-unit id="1b4288e4f5e6492bfb85103d603b71c7b7c3fd77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; is one that should always be followed. &lt;em&gt;Always&lt;/em&gt; might be a bit too strong of a word. Guidelines that literally should always be followed are extremely rare. On the other hand, you need a really unusual case for breaking a &lt;em&gt;Do&lt;/em&gt; guideline.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;常に従うべきです。&lt;em&gt;いつも&lt;/em&gt;少し強すぎるかもしれません。文字通り常に従うべきガイドラインは非常にまれです。一方、&lt;em&gt;Do&lt;/em&gt;ガイドラインを破るには、非常に珍しいケースが必要です。</target>
        </trans-unit>
        <trans-unit id="e55242ad22a5996fd3efca619637c447ce0b1b9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; keep a flat folder structure as long as possible.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;できるだけフラットなフォルダ構造を維持して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b5c5e12b6e545709ef990b9b53ec3a1738d52dac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; limit logic in a component to only that required for the view. All other logic should be delegated to services.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;ビューのために必要なことだけにコンポーネントに制限ロジックを。他のすべてのロジックはサービスに委任されるべきです。</target>
        </trans-unit>
        <trans-unit id="a405780eb84b6a3584c8828ad6ff23b25db43802" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;XHR呼び出し、ローカルストレージ、メモリへのスタッシング、またはその他のデータ操作を担当するデータサービスを作成&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2d3f678eccd25f031c48366493647554f7a63190" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; make locating code intuitive, simple, and fast.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;メイク位置決めコードは、直感的でシンプル、そして速いです。</target>
        </trans-unit>
        <trans-unit id="e25d22a2e3f2a399bf9997ba5b8d5226b619b332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; match the name of the symbol to the name of the file.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シンボルの名前をファイルの名前と一致さ&lt;strong&gt;せてください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a2a468f22f0e2cf16f02d394fd7aa6652b654e29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; move reusable logic to services and keep components simple and focused on their intended purpose.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;サービスに再利用可能なロジックを移動し、簡単なコンポーネントを維持し、それらの意図する目的に焦点を当てました。</target>
        </trans-unit>
        <trans-unit id="67d8007229973bd14357bad9c0f4868c63e332ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name end-to-end test specification files after the feature they test with a suffix of &lt;code&gt;.e2e-spec&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;の接尾辞を持つ彼らは、テスト機能の後に名前のエンド・ツー・エンドのテスト仕様書ファイルを &lt;code&gt;.e2e-spec&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6209ab419f047dd979588da17339d1739a1a5d92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name event handler methods with the prefix &lt;code&gt;on&lt;/code&gt; followed by the event name.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;プレフィックスと名前のイベントハンドラメソッド &lt;code&gt;on&lt;/code&gt; イベント名が続きます。</target>
        </trans-unit>
        <trans-unit id="1536253456bf0e4ec9a7138f3df678a22d93f3bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name events without the prefix &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;接頭辞なし名前のイベントを &lt;code&gt;on&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72fc7ff3699db165b0faefe0a32401113f7e6126" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name test specification files the same as the component they test.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;テスト仕様ファイルには、テストするコンポーネントと同じ名前を付けて&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="89d9cc996675ed4eb14697065bc91a26137ef04b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name test specification files with a suffix of &lt;code&gt;.spec&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;の接尾辞で名前テスト仕様ファイルを &lt;code&gt;.spec&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f5b17289f4aa199b0fec58c91dd947153469638" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the feature module file reflecting the name of the feature area and folder; for example, &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;フィーチャーエリアやフォルダの名前を反映した機能モジュールファイルに名前を付けます。たとえば、 &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d17bb3b39eaea3d8c5b89c34a73ec427f9f22626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the feature module symbol reflecting the name of the feature area, folder, and file; for example, &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; defines &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;フィーチャーエリア、フォルダ、およびファイルの名前を反映した機能モジュールのシンボルに名前を付けます。たとえば、 &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; は &lt;code&gt;HeroesModule&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="4a9a26cd9c372572cd4569cca774843691ba0be0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the file such that you instantly know what it contains and represents.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;あなたは即座にそれが含まれていると何を表しているか知っているように、ファイルに名前を付けます。</target>
        </trans-unit>
        <trans-unit id="c70f892ee9de9f7d55a2d38ec2d5b997e6f728cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the module after the feature and folder it resides in.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;モジュールの名前は、それが存在する機能とフォルダーにちなんで&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="efd18b6f8d4abdbb012bd94ccfb7a9da586da549" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the style file &lt;code&gt;[component-name].component.css&lt;/code&gt;, where [component-name] is the component name.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;スタイルファイル名 &lt;code&gt;[component-name].component.css&lt;/code&gt; [コンポーネント名]コンポーネント名です。</target>
        </trans-unit>
        <trans-unit id="c192d2ee4bc6771008c16522374e56e7e5ae7754" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the template file &lt;code&gt;[component-name].component.html&lt;/code&gt;, where [component-name] is the component name.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;テンプレートファイル名 &lt;code&gt;[component-name].component.html&lt;/code&gt; [コンポーネント名]コンポーネント名です。</target>
        </trans-unit>
        <trans-unit id="8c99293a7d9e3e2e4eb705e4024c72d986509327" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place private members after public members, alphabetized.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;アルファベット順、パブリックメンバー後にプライベートメンバーを。</target>
        </trans-unit>
        <trans-unit id="bb0ff2ae72c8cf540a6dad4708d9f9596090e2b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place properties up top followed by methods.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;方法に続いてトップまでの場所のプロパティを。</target>
        </trans-unit>
        <trans-unit id="99b2f3501de2951dca9a4141bea2870c4567b742" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place the feature module in the same named folder as the feature area; for example, in &lt;code&gt;app/heroes&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;機能領域と同じ名前のフォルダ内の機能モジュールを配置。たとえば、 &lt;code&gt;app/heroes&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d5722369208e41b13dca44b65f2447f50c92ce04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; provide a service with the app root injector in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator of the service.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; インジェクタブルデコレータでアプリルートインジェクタを使用してサービスを提供して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d5a28ed423d6944508a340974c6ad496a01b21a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put all of the app's code in a folder named &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;という名前のフォルダにアプリのコードのすべてを置く &lt;code&gt;src&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2479321a03fa6060bb58392a9372d807820bae8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put bootstrapping and platform logic for the app in a file named &lt;code&gt;main.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;という名前のファイルにアプリのためのブートストラップおよびプラットフォーム・ロジックを置く &lt;code&gt;main.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c919cf33f57f1e80a8e7baa542906d3184f4a29c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put presentation logic in the component class, and not in the template.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;コンポーネントクラスではなく、テンプレートにプレゼンテーションロジックを置きます。</target>
        </trans-unit>
        <trans-unit id="cd801119d3788db0f48b20b6a050db78823a218a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put the contents of lazy loaded features in a &lt;em&gt;lazy loaded folder&lt;/em&gt;. A typical &lt;em&gt;lazy loaded folder&lt;/em&gt; contains a &lt;em&gt;routing component&lt;/em&gt;, its child components, and their related assets and modules.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;で怠惰なロードされた機能の内容を入れて&lt;em&gt;遅延ロードされたフォルダ&lt;/em&gt;。典型的な&lt;em&gt;遅延読み込みフォルダに&lt;/em&gt;は、&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;、その子コンポーネント、およびそれらに関連するアセットとモジュールが含まれています。</target>
        </trans-unit>
        <trans-unit id="8a8c7e939be120f7d56d6b049da69611efadd66e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; refactor logic for making data operations and interacting with data to a service.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;データ操作を行うと、サービスにデータをやり取りするためのリファクタリング・ロジックを。</target>
        </trans-unit>
        <trans-unit id="2daf2a8ae4842cad7a27f0ac372d33a31a072bd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; specify &lt;em&gt;component-relative&lt;/em&gt; URLs, prefixed with &lt;code&gt;./&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;接頭辞が &lt;code&gt;./&lt;/code&gt; の&lt;em&gt;コンポーネント相対&lt;/em&gt; URLを指定&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1da2147e294f49dc4e51a0fc8aba0cbfd71c3af4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; spell non-element selectors in lower camel case unless the selector is meant to match a native HTML attribute.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;セレクタがネイティブのHTML属性と一致することを意図されていない限り、下キャメルケースには非要素セレクタを綴ります。</target>
        </trans-unit>
        <trans-unit id="19c1158dd3fd6095e86d920452f5e64ee07f3f10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; start small but keep in mind where the app is heading down the road.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;小さなものから始めましょう。ただし、アプリがどこに向かっているかを覚えておいて&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c1bb6de1f52d2c127414fe8186c82bd4d4fb21f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; structure the app such that you can &lt;strong&gt;L&lt;/strong&gt;ocate code quickly, &lt;strong&gt;I&lt;/strong&gt;dentify the code at a glance, keep the &lt;strong&gt;F&lt;/strong&gt;lattest structure you can, and &lt;strong&gt;T&lt;/strong&gt;ry to be DRY.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;な構造にすることができます、このようなアプリ&lt;strong&gt;Lの&lt;/strong&gt;迅速ocateコードを、&lt;strong&gt;私は&lt;/strong&gt;、一目でコードをdentify保つ&lt;strong&gt;F&lt;/strong&gt;することができますlattest構造を、そして&lt;strong&gt;Tの&lt;/strong&gt; ryはDRYします。</target>
        </trans-unit>
        <trans-unit id="447bce5b2ed3be44cfa8271a90f5d28bc8198718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; suffix a &lt;em&gt;RoutingModule&lt;/em&gt; class name with &lt;code&gt;RoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;サフィックス&lt;em&gt;RoutingModule&lt;/em&gt;でクラス名を &lt;code&gt;RoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fed7861c9f089246f8db40e8d0c87eb27430c622" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; suffix a service class name with &lt;code&gt;Service&lt;/code&gt;. For example, something that gets data or heroes should be called a &lt;code&gt;DataService&lt;/code&gt; or a &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;持つサービスクラス名サフィックス &lt;code&gt;Service&lt;/code&gt; 。たとえば、データまたはヒーローを取得するものは、 &lt;code&gt;DataService&lt;/code&gt; または &lt;code&gt;HeroService&lt;/code&gt; と呼ばれる必要があります。</target>
        </trans-unit>
        <trans-unit id="8c1509076fb6b5c6b9032dee4e08837628485074" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use &lt;a href=&quot;https://www.npmjs.com/package/codelyzer&quot;&gt;codelyzer&lt;/a&gt; to follow this guide.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;使用&lt;a href=&quot;https://www.npmjs.com/package/codelyzer&quot;&gt;codelyzerを&lt;/a&gt;、このガイドに従うこと。</target>
        </trans-unit>
        <trans-unit id="7985aba17e237de853ce430d0b75bfcc3a4a382c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use &lt;em&gt;dashed-case&lt;/em&gt; or &lt;em&gt;kebab-case&lt;/em&gt; for naming the element selectors of components.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントの要素セレクターに名前を付ける&lt;em&gt;場合は&lt;/em&gt;、&lt;em&gt;破線のケース&lt;/em&gt;または&lt;em&gt;ケバブのケース&lt;/em&gt;を使用し&lt;em&gt;て&lt;/em&gt;&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="bfac476b71f59566f5127a7d6239c65ac9e76752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a custom prefix for a component selector. For example, the prefix &lt;code&gt;toh&lt;/code&gt; represents &lt;strong&gt;T&lt;/strong&gt;our &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;H&lt;/strong&gt;eroes and the prefix &lt;code&gt;admin&lt;/code&gt; represents an admin feature area.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントセレクタにはカスタムプレフィックスを使用して&lt;strong&gt;ください&lt;/strong&gt;。たとえば、接頭辞 &lt;code&gt;toh&lt;/code&gt; 表し&lt;strong&gt;Tを&lt;/strong&gt;当社&lt;strong&gt;O&lt;/strong&gt; F &lt;strong&gt;Hの&lt;/strong&gt; eroesとプレフィックス &lt;code&gt;admin&lt;/code&gt; 管理機能の領域を表します。</target>
        </trans-unit>
        <trans-unit id="44139d62100dd05907211954f2365d5e0cf3e624" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a custom prefix for the selector of directives (e.g, the prefix &lt;code&gt;toh&lt;/code&gt; from &lt;strong&gt;T&lt;/strong&gt;our &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;H&lt;/strong&gt;eroes).</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ディレクティブのセレクタ（例えば、接頭辞のカスタム接頭辞を使用 &lt;code&gt;toh&lt;/code&gt; から&lt;strong&gt;T&lt;/strong&gt;当社&lt;strong&gt;O&lt;/strong&gt; F &lt;strong&gt;Hが&lt;/strong&gt; eroes）。</target>
        </trans-unit>
        <trans-unit id="893cd5a23c6adf14d9224cb52e6f1b4c5b9feb98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a hyphenated, lowercase element selector value; for example, &lt;code&gt;admin-users&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ハイフン付きの小文字の要素セレクタ値を使用して&lt;strong&gt;ください&lt;/strong&gt;。たとえば、 &lt;code&gt;admin-users&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00e52512f5585f991fce0b87893122af6eeaa8f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a prefix that identifies the feature area or the app itself.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;機能領域またはアプリ自体を識別するプレフィックスを使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="865b4dfe299fa61cb13a9f7a99c447b4684571d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use attribute directives when you have presentation logic without a template.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;テンプレートなしでプレゼンテーションロジックを持っている場合、使用属性ディレクティブを。</target>
        </trans-unit>
        <trans-unit id="2d7be5cdb6da4aa9b0f3cc0c614d6e58f2a88ef0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all assets named after what they represent.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;表すものにちなんで命名されたすべてのアセットには、一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="319543104179e3aa7703d59df00d4acd56fa2386" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all pipes, named after their feature. The pipe class name should use &lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt; (the general convention for class names), and the corresponding &lt;code&gt;name&lt;/code&gt; string should use &lt;em&gt;lowerCamelCase&lt;/em&gt;. The &lt;code&gt;name&lt;/code&gt; string cannot use hyphens (&quot;dash-case&quot; or &quot;kebab-case&quot;).</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;すべてのパイプには、その機能にちなんで名付けられた一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。パイプクラス名は&lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt;（クラス名の一般的な規則）を使用し、対応する &lt;code&gt;name&lt;/code&gt; 文字列は&lt;em&gt;lowerCamelCase&lt;/em&gt;を使用する必要があります。 &lt;code&gt;name&lt;/code&gt; 文字列にはハイフン（「ダッシュ・ケース」または「ケバブ・ケース」）を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="b74e052dcc626499e14cf9a52f2bdfa1b5f8157d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all services named after their feature.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;機能にちなんで名付けられたすべてのサービスに一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4c9c40f42be9d32aaef11f560a7b86ef8a31b067" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all symbols.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;すべてのシンボルに一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9368fc727343fb9f24f72163850b7f610e8ffe07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent type names for all components following a pattern that describes the component's feature then its type. A recommended pattern is &lt;code&gt;feature.type.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントの機能を説明し、次にそのタイプを説明するパターンに従って、すべてのコンポーネントに一貫したタイプ名を使用して&lt;strong&gt;ください&lt;/strong&gt;。推奨されるパターンは &lt;code&gt;feature.type.ts&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="49866936f0831aaf4d4f204e78c08decd834a494" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use conventional type names including &lt;code&gt;.service&lt;/code&gt;, &lt;code&gt;.component&lt;/code&gt;, &lt;code&gt;.pipe&lt;/code&gt;, &lt;code&gt;.module&lt;/code&gt;, and &lt;code&gt;.directive&lt;/code&gt;. Invent additional type names if you must but take care not to create too many.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;を含む従来型の名前を使用 &lt;code&gt;.service&lt;/code&gt; 、 &lt;code&gt;.component&lt;/code&gt; 、 &lt;code&gt;.pipe&lt;/code&gt; 、 &lt;code&gt;.module&lt;/code&gt; 、および &lt;code&gt;.directive&lt;/code&gt; を。必要な場合は追加の型名を作成しますが、作成しすぎないように注意してください。</target>
        </trans-unit>
        <trans-unit id="e07d96f35486f1c913032d39f6a0282e34f2b203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use dashes to separate words in the descriptive name.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;わかりやすい名前で別々の単語に使用ダッシュ。</target>
        </trans-unit>
        <trans-unit id="c7aeca36cad47faef79582924c00673db45ff311" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use dots to separate the descriptive name from the type.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;使用のドットがタイプからわかりやすい名前を分離します。</target>
        </trans-unit>
        <trans-unit id="0920db69d71e308d2a525382582255b9c6d2b7eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ファイルテンプレートまたはスニペットを使用して、一貫したスタイルとパターンに従うようにして&lt;strong&gt;ください&lt;/strong&gt;。以下は、一部のWeb開発エディターおよびIDEのテンプレートまたはスニペットです。</target>
        </trans-unit>
        <trans-unit id="6a1442fe05cfed1932fa984611b4f2d9c111baa9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use services as singletons within the same injector. Use them for sharing data and functionality.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;同じインジェクター内でサービスをシングルトンとして使用して&lt;strong&gt;ください&lt;/strong&gt;。データと機能を共有するために使用します。</target>
        </trans-unit>
        <trans-unit id="d1954bdb66547b33eb125161af1ae51c60026aaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; class decorator instead of the &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; parameter decorator when using types as tokens for the dependencies of a service.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;タイプをサービスの依存関係のトークンとして使用する場合は、 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;パラメータデコレータの代わりに &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; クラスデコレータを使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d96c2d225ea94c0493269430e8e01b86b50377cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; class decorators instead of the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; properties of the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/directive&quot;&gt;ディレクティブ&lt;/a&gt;メタデータと &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;メタデータの &lt;code&gt;inputs&lt;/code&gt; プロパティと &lt;code&gt;outputs&lt;/code&gt; プロパティの代わりに、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; クラスデコレーターを使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ea6b202748ee468df084f3ffd9d21ef72482343b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use upper camel case for class names.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;クラス名にはキャメル大文字を使用&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ea712f25fc8e27592da4c153217ffe7c46b0cd58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't modify your copy of Angular.&lt;/strong&gt; Private, customized versions of Angular tend to fall behind the current version and may not include important security fixes and enhancements. Instead, share your Angular improvements with the community and make a pull request.</source>
          <target state="translated">&lt;strong&gt;Angularのコピーを変更しないでください。&lt;/strong&gt;Angularのカスタマイズされたプライベートバージョンは、現在のバージョンよりも遅れる傾向があり、重要なセキュリティ修正や拡張機能が含まれていない場合があります。代わりに、Angularの改善点をコミュニティと共有し、プルリクエストを行ってください。</target>
        </trans-unit>
        <trans-unit id="1df1e3b37c9e9487b7a093241b0ebd0b4c61ce3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; Output file path for Build Event Protocol events</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ビルドイベントプロトコルイベントの&lt;strong&gt;実験的&lt;/strong&gt;出力ファイルパス</target>
        </trans-unit>
        <trans-unit id="d7d5340fc1d0f2bcd8470b4e061322e8767162d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; True to create a new app that uses the Ivy rendering engine.</source>
          <target state="translated">&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; Trueを指定して、Ivyレンダリングエンジンを使用する新しいアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="60e2fc730113a9b4a2361c46a5d80b8917ff611b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fastest :)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最速:)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f1cd8e78e0f2628c908640e71808899ed7c9c78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 1.&lt;/strong&gt; Clicking the button toggles the date format</source>
          <target state="translated">&lt;strong&gt;図1.&lt;/strong&gt;ボタンをクリックすると、日付形式が切り替わります</target>
        </trans-unit>
        <trans-unit id="8836bb311621b9f641e4387c6a9c6ae619924076" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 1.&lt;/strong&gt;&lt;em&gt;Direct access to forms model in a reactive form.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;図1.&lt;/strong&gt;&lt;em&gt;リアクティブフォームのフォームモデルへの直接アクセス。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="796507bcec3caa94dd42989ce74f71db967a2161" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 2.&lt;/strong&gt; Output from the &lt;code&gt;exponentialStrength&lt;/code&gt; pipe</source>
          <target state="translated">&lt;strong&gt;図&lt;/strong&gt; &lt;code&gt;exponentialStrength&lt;/code&gt; パイプからの出力</target>
        </trans-unit>
        <trans-unit id="d94a098e3546f9d591f7843c93d510067d71dfe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 2.&lt;/strong&gt;&lt;em&gt;Indirect access to forms model in a template-driven form.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;図2.&lt;/strong&gt;&lt;em&gt;テンプレート駆動型フォームのフォームモデルへの間接アクセス。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3244e9f57f17cc75d36840e987faeb21f638dada" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 3.&lt;/strong&gt; Changing the amount and boost factor for the &lt;code&gt;exponentialStrength&lt;/code&gt; pipe</source>
          <target state="translated">&lt;strong&gt;図&lt;/strong&gt; &lt;code&gt;exponentialStrength&lt;/code&gt; パイプの量とブースト係数の変更</target>
        </trans-unit>
        <trans-unit id="84737e65c89a22050ef42c2ff2cfa30802513e7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 4.&lt;/strong&gt; The &lt;code&gt;flyingHeroes&lt;/code&gt; pipe filtering the display to flying heroes</source>
          <target state="translated">&lt;strong&gt;図4 &lt;/strong&gt; &lt;code&gt;flyingHeroes&lt;/code&gt; のフライングヒーローに表示をフィルタリングパイプ</target>
        </trans-unit>
        <trans-unit id="deac895c6a99bc1ceac177a0fa33df8aaee45f14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 5.&lt;/strong&gt; The &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;fetch-json&lt;/code&gt; pipes displaying the heroes</source>
          <target state="translated">&lt;strong&gt;図5&lt;/strong&gt; &lt;code&gt;fetch&lt;/code&gt; と &lt;code&gt;fetch-json&lt;/code&gt; ヒーローを表示パイプ</target>
        </trans-unit>
        <trans-unit id="a864e18b9ef9c87eb6e54692693e9e87d007a12f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For all other scenarios,&lt;/strong&gt; see the current instructions in &lt;a href=&quot;setup-local&quot;&gt;Setting up the Local Environment and Workspace&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;他のすべてのシナリオ&lt;/strong&gt;については&lt;a href=&quot;setup-local&quot;&gt;、ローカル環境とワークスペースのセットアップの&lt;/a&gt;現在の手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="b51e1b4288724cd437a336f2abcf51a6f2513d0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generate a new &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;新しい &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; を生成します&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5bcae9fe29d4c9b343cd9a59bbc124b34fc7487f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generate form controls&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フォームコントロールを生成する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89146d6e3d4351b223f9827f8cc35449b49d651a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Group the nested form in the template&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ネストされたフォームをテンプレートにグループ化します&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="068e055d581fa26662ca24ee2708b7d339665834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt; is used when interpreting a value as HTML, for example, when binding to &lt;code&gt;innerHtml&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt;は、 &lt;code&gt;innerHtml&lt;/code&gt; にバインドするときなど、値をHTMLとして解釈するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="ec55ce407496fff6cba913b5e8d3de8262020472" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How &lt;em&gt;loadComponent()&lt;/em&gt; chooses an ad&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;loadComponent（）&lt;/em&gt;が広告を選択する方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a155722272a889f00945465fc2d20e670aa499d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INVALID&lt;/strong&gt;: This control has failed at least one validation check.</source>
          <target state="translated">&lt;strong&gt;INVALID&lt;/strong&gt;：このコントロールは、少なくとも1つの検証チェックに失敗しました。</target>
        </trans-unit>
        <trans-unit id="a43d47b6ee7516cf37b9d0f06355e10c5aa46f43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import a validator function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バリデーター関数をインポートする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="00f8c2720f609f8f0845d9278612a553af0b7df3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import the FormArray class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormArrayクラスをインポートします&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ec97e8c3ff0a0235e6902f1be773e9938350c6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import the FormBuilder class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormBuilderクラスをインポートします&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f84f922f1b11fef33c1749bfcf9a2a29798cfe29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; the In-memory Web API module has nothing to do with HTTP in Angular.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;インメモリWeb APIモジュールは、AngularのHTTPとは何の関係もありません。</target>
        </trans-unit>
        <trans-unit id="dc98c24cde56582c759cc530a597498b395d72a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In general:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;一般に：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f02ddca41e03136063c5d853a43814c190b1937" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In v10 the default currency code will be taken from the current locale.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;v10では、デフォルトの通貨コードは現在のロケールから取得されます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae4927abcb0b54412e8ca5b575ab2f2c843ea8b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In v11 the default currency code will be taken from the current locale identified by the &lt;code&gt;LOCAL_ID&lt;/code&gt; token. See the &lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;i18n guide&lt;/a&gt; for more information.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;v11では、デフォルトの通貨コードは、 &lt;code&gt;LOCAL_ID&lt;/code&gt; トークンで識別される現在のロケールから取得されます。詳細については、&lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;i18nガイド&lt;/a&gt;を参照してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="491e2bdf674c7d930c5d7d81d6c1e695174575bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Inject the FormBuilder service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;FormBuilderサービスを挿入します&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17cc65cb1582a263a64c49339ffe5f50dc31748a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interpolation&lt;/strong&gt; with double curly braces to display a component property.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントプロパティを表示するための二重中括弧による&lt;strong&gt;補間&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="68890d13fc54d083b646a4367430a9ad959bf417" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep current with the latest Angular library releases.&lt;/strong&gt; We regularly update the Angular libraries, and these updates may fix security defects discovered in previous versions. Check the Angular &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;change log&lt;/a&gt; for security-related updates.</source>
          <target state="translated">&lt;strong&gt;Angularライブラリの最新リリースを最新に保ちます。&lt;/strong&gt;Angularライブラリは定期的に更新されます。これらの更新により、以前のバージョンで発見されたセキュリティ上の欠陥が修正される場合があります。Angularの&lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;変更ログ&lt;/a&gt;でセキュリティ関連の更新を確認してください。</target>
        </trans-unit>
        <trans-unit id="564560214da2886c52516ade57692873955f9483" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep template statements simple&lt;/strong&gt; &amp;mdash; The &lt;code&gt;(blur)&lt;/code&gt; event is bound to two JavaScript statements. The first statement calls &lt;code&gt;addHero&lt;/code&gt;. The second statement, &lt;code&gt;newHero.value=''&lt;/code&gt;, clears the input box after a new hero is added to the list.</source>
          <target state="translated">&lt;strong&gt;テンプレートステートメントを単純に保つ&lt;/strong&gt; &amp;mdash; &lt;code&gt;(blur)&lt;/code&gt; イベントは2つのJavaScriptステートメントにバインドされます。最初のステートメントは &lt;code&gt;addHero&lt;/code&gt; を呼び出します。2番目のステートメント &lt;code&gt;newHero.value=''&lt;/code&gt; は、新しいヒーローがリストに追加された後に入力ボックスをクリアします。</target>
        </trans-unit>
        <trans-unit id="af85710506385e7bb680dd7711977f7a364f111e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Leave the default and the wildcard routes!&lt;/strong&gt; These are concerns at the top level of the application itself.</source>
          <target state="translated">&lt;strong&gt;デフォルトのルートとワイルドカードルートをそのまま使用します。&lt;/strong&gt;これらは、アプリケーション自体の最上位の問題です。</target>
        </trans-unit>
        <trans-unit id="e0c58a4d71e7c20be7a70adb2122afee35358aab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Library developers:&lt;/strong&gt; By default, the CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate library&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;package.json&lt;/code&gt; for the new library. That &lt;code&gt;package.json&lt;/code&gt; is used when publishing the library to npm. For more information, see the CLI wiki page &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot;&gt;Library Support&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;ライブラリ開発者：&lt;/strong&gt;デフォルトでは、CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate library&lt;/code&gt; &lt;/a&gt;は新しいライブラリの &lt;code&gt;package.json&lt;/code&gt; を作成します。その &lt;code&gt;package.json&lt;/code&gt; は、ライブラリをnpmに公開するときに使用されます。詳細については、CLI wikiページ&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot;&gt;Library Supportを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="86cb86bd9af54ff1bf806625c029fd79461ee4db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Major releases&lt;/strong&gt; contain significant new features, some but minimal developer assistance is expected during the update. When updating to a new major release, you may need to run update scripts, refactor code, run additional tests, and learn new APIs.</source>
          <target state="translated">&lt;strong&gt;メジャーリリースに&lt;/strong&gt;は重要な新機能&lt;strong&gt;が&lt;/strong&gt;含まれていますが、更新中は最小限の開発者支援が期待されます。新しいメジャーリリースに更新する場合、更新スクリプトの実行、コードのリファクタリング、追加のテストの実行、新しいAPIの学習が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="8e551d86ea1dd11410ef94a9979b35ff51c33723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make a field required&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フィールドを必須にする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8af40ba30977eb931b9405e6f7f841290c41fd55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Markup style:&lt;/strong&gt; How to include images, tables, alert boxes, and code snippets. Angular docs are written in Markdown, with custom extensions for this site. Correct markup ensures a consistent look-and-feel, and is essential for the doc to build and function correctly.</source>
          <target state="translated">&lt;strong&gt;マークアップスタイル：&lt;/strong&gt;画像、表、警告ボックス、コードスニペットを含める方法。AngularのドキュメントはMarkdownで書かれており、このサイトのカスタム拡張機能が付いています。正しいマークアップは一貫したルックアンドフィールを保証し、ドキュメントが正しく構築および機能するために不可欠です。</target>
        </trans-unit>
        <trans-unit id="049a66297d0463705501f4976e142df77e148c1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Markup style&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マークアップスタイル&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90b69a62ec932925abbbb8b8f39fa6f5cd1496f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Metadata Properties&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;メタデータプロパティ&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="3fabbc0c229a540fc47f545ceac94d3a9ec3b561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Minor releases&lt;/strong&gt; contain new smaller features. Minor releases are fully backward-compatible; no developer assistance is expected during update, but you can optionally modify your apps and libraries to begin using new APIs, features, and capabilities that were added in the release. We update peer dependencies in minor versions by expanding the supported versions, but we do not require projects to update these dependencies.</source>
          <target state="translated">&lt;strong&gt;マイナーリリースに&lt;/strong&gt;は、新しい小さな機能&lt;strong&gt;が&lt;/strong&gt;含まれています。マイナーリリースは完全に下位互換性があります。更新中は開発者の支援は必要ありませんが、必要に応じてアプリとライブラリを変更して、リリースで追加された新しいAPI、機能、機能の使用を開始できます。サポートされているバージョンを拡張して、マイナーバージョンのピアの依存関係を更新しますが、プロジェクトでこれらの依存関係を更新する必要はありません。</target>
        </trans-unit>
        <trans-unit id="72465ffeda7a3882d2d558cd2302a2ff0208ef07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;N.B.&lt;/strong&gt;: The &lt;a href=&quot;docs-style-guide#table-of-contents&quot;&gt;Table-of-contents&lt;/a&gt; generator only considers main (&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;) and secondary (&lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;) headings.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：&lt;a href=&quot;docs-style-guide#table-of-contents&quot;&gt;目次&lt;/a&gt;ジェネレーターは、メイン（ &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; ）とセカンダリ（ &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; ）の見出しのみを考慮します。</target>
        </trans-unit>
        <trans-unit id="c7c17e9e07c259e730be178446aa8f994896d165" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; In the logical tree, you'll see &lt;code&gt;@Provide&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which are not real HTML attributes but are here to demonstrate what is going on under the hood.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;論理ツリーでは、あなたが表示されます &lt;code&gt;@Provide&lt;/code&gt; を、 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 実際のHTML属性ではなく、フードの下で何が起こっているのかを証明するためにここにいます、。</target>
        </trans-unit>
        <trans-unit id="576bd38782c522977f1044640371e6f522967123" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Next:&lt;/strong&gt; The release that is under active development and testing. The next release is indicated by a release tag appended with the &lt;code&gt;-next&lt;/code&gt; identifier, such as &lt;code&gt;8.1.0-next.0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;次へ：&lt;/strong&gt;活発な開発とテストが行​​われているリリース。次のリリースは、 &lt;code&gt;8.1.0-next.0&lt;/code&gt; などの &lt;code&gt;-next&lt;/code&gt; 識別子が付加されたリリースタグで示されます。</target>
        </trans-unit>
        <trans-unit id="fc26bb0bac2e87e6a33e03a84d8073a942b5acca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NgModules&lt;/strong&gt; configure the injector and the compiler and help organize related things together.</source>
          <target state="translated">&lt;strong&gt;NgModule&lt;/strong&gt;はインジェクターとコンパイラーを構成し、関連するものを一緒に整理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="604f2dae86185035069b15b5576ddceeb2d17a2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Node.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Node.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="abbb940630dae1016ddb8972b14b8a607e45e0da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; After AngularJS is loaded and bootstrapped, listeners such as those wired up in your route configuration will continue to listen for route changes. To ensure listeners are shut down when AngularJS isn't being displayed, configure an &lt;code&gt;otherwise&lt;/code&gt; option with the &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider&quot;&gt;$routeProvider&lt;/a&gt; that renders an empty template. This assumes all other routes will be handled by Angular.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; AngularJSがロードされてブートストラップされた後、ルート構成で配線されたリスナーなどは、引き続きルートの変更をリッスンします。AngularJSが表示されていないときにリスナーが確実にシャットダウンされるようにするには、空のテンプレートをレンダリングする&lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider&quot;&gt;$ routeProvider&lt;/a&gt;で &lt;code&gt;otherwise&lt;/code&gt; オプションを構成します。これは、他のすべてのルートがAngularによって処理されることを前提としています。</target>
        </trans-unit>
        <trans-unit id="84565e184a7079ad301db28996a2be189b9b2c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of Angular version 7, the major versions of Angular core and the CLI are aligned. This means that in order to use the CLI as you develop an Angular app, the version of &lt;code&gt;@angular/core&lt;/code&gt; and the CLI need to be the same.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Angularバージョン7以降、AngularコアとCLIのメジャーバージョンが揃っています。つまり、Angularアプリを開発する際にCLIを使用するには、 &lt;code&gt;@angular/core&lt;/code&gt; とCLI のバージョンが同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="fb553c91b74e4311031c53b9d1ea080c9c1c369b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Because the returned control is of the type &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;, you need to provide an explicit type to access the method syntax for the form array instance.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;返されるコントロールは &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 型であるため、フォーム配列インスタンスのメソッド構文にアクセスするには、明示的な型を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="173467ffeee0a02f4abdbd1c4b8921f8862973c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Disabling animations application-wide is useful during end-to-end (E2E) testing.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;アプリケーション全体でアニメーションを無効にすると、エンドツーエンド（E2E）テストで役立ちます。</target>
        </trans-unit>
        <trans-unit id="b80bffc3666a8be5dc5959970b1701b5c9fef215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Display the value for the form group instance in the component template using the &lt;code&gt;value&lt;/code&gt; property and &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; プロパティと &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; を使用して、コンポーネントテンプレートのフォームグループインスタンスの値を表示します。</target>
        </trans-unit>
        <trans-unit id="849c96b35d21cf32e39f9e8ab9330c42b9df8336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For a more detailed list of classes and directives provided by &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;Reactive forms API&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; によって提供されるクラスとディレクティブのより詳細なリストについては、&lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;Reactive form API&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e34344de4fad6bff6dafd2139188dd68cab0985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For complete information about each kind of form, see &lt;a href=&quot;reactive-forms&quot;&gt;Reactive Forms&lt;/a&gt; and &lt;a href=&quot;forms&quot;&gt;Template-driven Forms&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;各種類のフォームの詳細については、「&lt;a href=&quot;reactive-forms&quot;&gt;リアクティブフォーム」&lt;/a&gt;と「&lt;a href=&quot;forms&quot;&gt;テンプレート駆動型フォーム&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6ec506b865466b027c42f0e29f5fc2193f97cb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For our purposes, an element entering or leaving a view is equivalent to being inserted or removed from the DOM.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ここでは、ビューに出入りする要素は、DOMに対して挿入または削除されることと同じです。</target>
        </trans-unit>
        <trans-unit id="2c62e5b49ead69322ff581dcd91127525ad86d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For this example, an element entering or leaving a view is equivalent to being inserted or removed from the DOM.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この例では、ビューに出入りする要素は、DOMに挿入またはDOMから削除されることと同じです。</target>
        </trans-unit>
        <trans-unit id="b04e34bb1adeef16a72b3f4a0de7ac3b86cc77b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are not using HTTPS, the service worker will only be registered when accessing the app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; HTTPSを使用していない場合、Service Workerは &lt;code&gt;localhost&lt;/code&gt; 上のアプリにアクセスするときにのみ登録されます。</target>
        </trans-unit>
        <trans-unit id="323b8213066a5d108dce9af40269e4d4acd4ba86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you have a module which has both providers and declarations, you &lt;em&gt;can&lt;/em&gt; use this technique to separate them out and you may see this pattern in legacy apps. However, since Angular 6.0, the best practice for providing services is with the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;あなたがプロバイダとの宣言の両方を持っているモジュールを持っている場合は、あなたが&lt;em&gt;することができ&lt;/em&gt;、それらを分離するために、この技術を使用して、レガシーアプリケーションでこのパターンを見ることができます。ただし、Angular 6.0以降、サービスを提供するためのベストプラクティスは &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; プロパティを使用することです。</target>
        </trans-unit>
        <trans-unit id="f1981263a98cc7412eabf46ce2969f37ef494537" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you have a module which has both providers and declarations, you &lt;em&gt;can&lt;/em&gt; use this technique to separate them out and you may see this pattern in legacy apps. However, since Angular 6.0, the best practice for providing services is with the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providedIn&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;あなたがプロバイダとの宣言の両方を持っているモジュールを持っている場合は、あなたが&lt;em&gt;することができ&lt;/em&gt;、それらを分離するために、この技術を使用して、レガシーアプリケーションでこのパターンを見ることができます。ただし、Angular 6.0以降、サービスを提供するためのベストプラクティスは、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;providedIn&lt;/code&gt; プロパティを使用することです。</target>
        </trans-unit>
        <trans-unit id="93fe757b8f474edb8b919c6de032eb70c090dde4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the component file, set the trigger that defines the animations as the value of the &lt;code&gt;animations:&lt;/code&gt; property in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;コンポーネントファイルで、アニメーションを定義するトリガーを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）デコレーターの &lt;code&gt;animations:&lt;/code&gt; プロパティの値として設定します。</target>
        </trans-unit>
        <trans-unit id="07b45ca098345fb8730718bca812767b05c6b8e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In this example, you're using a single control. When using the &lt;code&gt;setValue()&lt;/code&gt; method with a &lt;a href=&quot;reactive-forms#grouping-form-controls&quot;&gt;form group&lt;/a&gt; or &lt;a href=&quot;reactive-forms#creating-dynamic-forms&quot;&gt;form array&lt;/a&gt; instance, the value needs to match the structure of the group or array.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この例では、単一のコントロールを使用しています。&lt;a href=&quot;reactive-forms#grouping-form-controls&quot;&gt;フォームグループ&lt;/a&gt;または&lt;a href=&quot;reactive-forms#creating-dynamic-forms&quot;&gt;フォーム配列&lt;/a&gt;インスタンスで &lt;code&gt;setValue()&lt;/code&gt; メソッドを使用する場合、値はグループまたは配列の構造と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="544775094b9de2efd4191fb7b06c9b609abd91fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In this example, you're using a single control. When using the &lt;code&gt;setValue()&lt;/code&gt; method with a form group or form array instance, the value needs to match the structure of the group or array.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この例では、1つのコントロールを使用しています。フォームグループまたはフォーム配列インスタンスで &lt;code&gt;setValue()&lt;/code&gt; メソッドを使用する場合、値はグループまたは配列の構造と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="648089a4ca28a9c812bac324dc26cef959e97c37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Instead of a form control instance for each alias, you can compose another form group instance with additional fields. The process of defining a control for each item is the same.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;各エイリアスのフォームコントロールインスタンスの代わりに、追加のフィールドを持つ別のフォームグループインスタンスを作成できます。各アイテムのコントロールを定義するプロセスは同じです。</target>
        </trans-unit>
        <trans-unit id="bdd767ef6ea48a4df8e51d1d7c169a747290e349" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Please see the &lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;resolution rules&lt;/a&gt; section to understand the relationship between the &lt;code&gt;ModuleInjector&lt;/code&gt; tree and the &lt;code&gt;ElementInjector&lt;/code&gt; tree.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; ツリーと &lt;code&gt;ElementInjector&lt;/code&gt; ツリーの関係を理解するには、&lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;解決ルールの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7630581ca37f1a339343eb6890544c170e7948b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Remember that ngModel directive is defined as a part of Angular FormsModule and you need to include FormsModule in the imports: [...] section of the Angular module metadata, in which you want to use it.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; ngModelディレクティブはAngular FormsModuleの一部として定義されており、使用するAngularモジュールメタデータのimports：[...]セクションにFormsModuleを含める必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d393b3fbba36be410c476749955c63faafa043f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Right now, you'll also want to include the &lt;code&gt;--disable-gpu&lt;/code&gt; flag if you're running on Windows. See &lt;a href=&quot;https://crbug.com/737678&quot;&gt;crbug.com/737678&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;現在、Windowsで実行している場合は、 &lt;code&gt;--disable-gpu&lt;/code&gt; フラグも含める必要があります。&lt;a href=&quot;https://crbug.com/737678&quot;&gt;crbug.com/737678を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="65dd6a1a9c3f6fce10d971d553de5ef7de922d9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See a &lt;a href=&quot;animations#animation-api-summary&quot;&gt;summary of available animation functions&lt;/a&gt; at the end of this guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;参照&lt;a href=&quot;animations#animation-api-summary&quot;&gt;可能なアニメーション機能の概要を&lt;/a&gt;、このガイドの最後にあります。</target>
        </trans-unit>
        <trans-unit id="5572bda73663c35675a744e39de8d68631cdcfc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig&quot;&gt;LocationUpgradeConfig&lt;/a&gt;&lt;/code&gt; for more configuration options available to the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; メソッドで使用できるその他の構成オプションについては、 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig&quot;&gt;LocationUpgradeConfig&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bfd3b929a9097e1579b3d87589f89c6e691b80a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See the Material Design website's topic on &lt;a href=&quot;https://material.io/design/motion/speed.html#easing&quot;&gt;Natural easing curves&lt;/a&gt; for general information on easing curves.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;https://material.io/design/motion/speed.html#easing&quot;&gt;イージング曲線&lt;/a&gt;の一般的な情報については、マテリアルデザインWebサイトのトピック「自然なイージング曲線」を参照してください。</target>
        </trans-unit>
        <trans-unit id="258b80c7a9e61906876d0dbda43f1e64c5650b04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some additional notes on using styles within &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; 関数内でのスタイルの使用に関する追加の注意事項。</target>
        </trans-unit>
        <trans-unit id="5ac4129ff24615dbb03eabbed26139b3a94934ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The 'heroes' string inside the factory refers to the AngularJS &lt;code&gt;HeroesService&lt;/code&gt;. It is common in AngularJS apps to choose a service name for the token, for example &quot;heroes&quot;, and append the &quot;Service&quot; suffix to create the class name.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ファクトリー内の「heroes」ストリングは、AngularJS &lt;code&gt;HeroesService&lt;/code&gt; を参照します。AngularJSアプリでは、トークンのサービス名（ &quot;heroes&quot;など）を選択し、 &quot;Service&quot;サフィックスを追加してクラス名を作成するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="03b12efce734e6cab7a1ae05993b8844d5d79782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; function is used to group animation &lt;em&gt;steps&lt;/em&gt;, rather than animated elements.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;関数は、グループアニメーションに使用される&lt;em&gt;手順&lt;/em&gt;ではなく、アニメーション要素。</target>
        </trans-unit>
        <trans-unit id="22b535bfb86b4997c243ad124e9a68fb6a7f2818" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method is a pattern used to register application-wide providers. Read more about application-wide providers in the &lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;Singleton services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドは、アプリケーション全体のプロバイダを登録するために使用されるパターンです。&lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;シングルトンサービス&lt;/a&gt;ガイドで、アプリケーション全体のプロバイダーの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ce5009f76e5fedd39d33fd60393d55cde42d6371" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method is a pattern used to register application-wide providers. Read more about application-wide providers in the &lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;Singleton services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;RouterModule.forRoot&lt;/code&gt; の方法は、アプリケーション全体のプロバイダを登録するために使用されるパターンです。アプリケーション全体のプロバイダーの詳細については、&lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;シングルトンサービス&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5cab946a01d7e7f66d555faf928fa542eddfcb31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;data&lt;/code&gt; property names that you use can be arbitrary. For example, the name &lt;em&gt;animation&lt;/em&gt; used in the example above is an arbitrary choice.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;data&lt;/code&gt; あなたが任意で使用することをプロパティ名。たとえば、上記の例で使用されている&lt;em&gt;アニメーション&lt;/em&gt;の名前は任意の選択です。</target>
        </trans-unit>
        <trans-unit id="47d12f956cd259b3cf0f6b96b582eb6625c79bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;backgroundColor&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;reusable-animations&quot;&gt;time&lt;/a&gt;&lt;/code&gt; inputs are replaced during runtime.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;height&lt;/code&gt; 、 &lt;code&gt;opacity&lt;/code&gt; 、 &lt;code&gt;backgroundColor&lt;/code&gt; の、そして &lt;code&gt;&lt;a href=&quot;reusable-animations&quot;&gt;time&lt;/a&gt;&lt;/code&gt; の入力は、実行時に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="6b7dda64ca80a699175f367518c192a015d3dcd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;backgroundColor&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt; inputs are replaced during runtime.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;height&lt;/code&gt; 、 &lt;code&gt;opacity&lt;/code&gt; 、 &lt;code&gt;backgroundColor&lt;/code&gt; の、そして &lt;code&gt;time&lt;/code&gt; の入力は、実行時に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="7b0d3d594628c36d5459af055db9991ed02a9334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The button in the snippet above also has a &lt;code&gt;disabled&lt;/code&gt; binding attached to it to disable the button when &lt;code&gt;profileForm&lt;/code&gt; is invalid. You aren't performing any validation yet, so the button is always enabled. Basic form validation is covered in the &lt;a href=&quot;reactive-forms#basic-form-validation&quot;&gt;Validating form input&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;上記のスニペットのボタンには、 &lt;code&gt;profileForm&lt;/code&gt; が無効な場合にボタンを無効にするために、 &lt;code&gt;disabled&lt;/code&gt; バインディングが添付されています。まだ検証を実行していないため、ボタンは常に有効になっています。基本的なフォームの検証については、「&lt;a href=&quot;reactive-forms#basic-form-validation&quot;&gt;フォーム入力&lt;/a&gt;の検証」セクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="8de94c6706c2235098f7e6dec03fcc9ce5f419a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The button in the snippet above also has a &lt;code&gt;disabled&lt;/code&gt; binding attached to it to disable the button when &lt;code&gt;profileForm&lt;/code&gt; is invalid. You aren't performing any validation yet, so the button is always enabled. Simple form validation is covered in the &lt;a href=&quot;reactive-forms#simple-form-validation&quot;&gt;Simple form validation&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;上記のスニペットのボタンにも &lt;code&gt;disabled&lt;/code&gt; バインディングがアタッチされており、 &lt;code&gt;profileForm&lt;/code&gt; が無効な場合にボタンを無効にします。まだ検証を行っていないため、ボタンは常に有効になっています。単純なフォームの検証については、&lt;a href=&quot;reactive-forms#simple-form-validation&quot;&gt;単純なフォームの検証の&lt;/a&gt;セクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="0de5049ad50ebc54694924b374d7991952a2f7cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The example app uses &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; so the app does not throw an error, but the principles are the same.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;サンプルアプリでは &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 使用しているため、アプリはエラーをスローしませんが、原理は同じです。</target>
        </trans-unit>
        <trans-unit id="30a44395a19cec398a3a03e8a86843421b55639b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The following example uses &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; methods, which is discussed in the &lt;a href=&quot;complex-animation-sequences#complex-sequence&quot;&gt;complex sequences&lt;/a&gt; page.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;次の例では、&lt;a href=&quot;complex-animation-sequences#complex-sequence&quot;&gt;複雑なシーケンスの&lt;/a&gt;ページで説明されている &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; メソッドと&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;（）メソッドを使用しています。</target>
        </trans-unit>
        <trans-unit id="3cb725a34cbbdcad00d542f8a4dcd1262e42f009" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation. When doing so inside a guard, the guard should return &lt;code&gt;false&lt;/code&gt;;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ガードはルーターに他の場所に移動するように指示することもでき、現在のナビゲーションを効果的にキャンセルします。ガード内でそうする場合、ガードは &lt;code&gt;false&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="b663a8751d00b5e30925212fb1d4057d6634eade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The hierarchical structure of views is a key factor in the way Angular detects and responds to changes in the DOM and app data.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ビューの階層構造は、AngularがDOMとアプリデータの変更を検出してそれに対応する方法の重要な要素です。</target>
        </trans-unit>
        <trans-unit id="46abe182e7e350bab98adeb67b236ad65d2c0e46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The observable provided to the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; must also complete. If the observable does not complete, the navigation does not continue.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 提供されるオブザーバブルも完了する必要があります。オブザーバブルが完了しない場合、ナビゲーションは続行されません。</target>
        </trans-unit>
        <trans-unit id="1b8e7446cf968ffa0c95e4aded13d71f44252abb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The observable provided to the Router &lt;em&gt;must&lt;/em&gt; also complete. If the observable does not complete, the navigation will not continue.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ルーターに提供されるオブザーバブルも完了する&lt;em&gt;必要が&lt;/em&gt;あります。オブザーバブルが完了しない場合、ナビゲーションは続行されません。</target>
        </trans-unit>
        <trans-unit id="a786ef68a3e2fe7f725ac6134aca12369aa45c68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The transition states must match the &lt;code&gt;data&lt;/code&gt; property value defined in the route configuration.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;遷移状態は、ルート構成で定義された &lt;code&gt;data&lt;/code&gt; プロパティ値と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="23b01bc5dc25a207a691ea975f34d81a2c815bbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are two example apps where you can see this scenario; the more advanced &lt;span name=&quot;ngmodules&quot;&gt;NgModules live example&lt;/span&gt;, which contains &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; in the routing modules and the &lt;code&gt;GreetingModule&lt;/code&gt;, and the simpler &lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading live example&lt;/span&gt;. For an introductory explanation see the &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading Feature Modules&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このシナリオを確認できるアプリの例は2つあります。ルーティングモジュールと &lt;code&gt;GreetingModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; が含まれる、より高度な&lt;span name=&quot;ngmodules&quot;&gt;NgModulesライブサンプル&lt;/span&gt;と、より単純な&lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;遅延読み込みライブサンプル&lt;/span&gt;。導入の説明については、&lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;遅延読み込み機能モジュール&lt;/a&gt;ガイドをご覧ください。&lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2b56ec6016ea69adbe569916a412b24223c1a5db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are two example apps where you can see this scenario; the more advanced &lt;span name=&quot;ngmodules&quot;&gt;NgModules live example&lt;/span&gt;, which contains &lt;code&gt;forRoot()&lt;/code&gt; and &lt;code&gt;forChild()&lt;/code&gt; in the routing modules and the &lt;code&gt;GreetingModule&lt;/code&gt;, and the simpler &lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading live example&lt;/span&gt;. For an introductory explanation see the &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading Feature Modules&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このシナリオを確認できるアプリの例は2つあります。より高度な&lt;span name=&quot;ngmodules&quot;&gt;NgModulesライブサンプル&lt;/span&gt;。ルーティングモジュールと &lt;code&gt;GreetingModule&lt;/code&gt; に &lt;code&gt;forRoot()&lt;/code&gt; と &lt;code&gt;forChild()&lt;/code&gt; が含まれ、より単純なLazyLoading&lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;ライブサンプル&lt;/span&gt;です。導入の説明については、&lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;遅延読み込み機能モジュール&lt;/a&gt;ガイドを参照してください。&lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0fda353d0348bfea57e1e202af48841b1170919e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These wrappers help hide the complexity of the &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function. There are more wrappers for different backend technologies at the &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universal repository&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これらのラッパーは、 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; 関数の複雑さを隠すのに役立ちます。&lt;a href=&quot;https://github.com/angular/universal&quot;&gt;ユニバーサルリポジトリに&lt;/a&gt;は、さまざまなバックエンドテクノロジ用のラッパーがさらにあります。</target>
        </trans-unit>
        <trans-unit id="8d3b75f0b175c9c97572c03ae1d5772c234ec639" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These wrappers help hide the complexity of the &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function. There are more wrappers for different backend technologies at the &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universal repository&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これらのラッパーは、 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 関数の複雑さを隠すのに役立ちます。&lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universalリポジトリに&lt;/a&gt;は、さまざまなバックエンドテクノロジー用のラッパーがさらにあります。</target>
        </trans-unit>
        <trans-unit id="f53f2bd5bd0eadea8ec6717cdb6b0c8bc759ea73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This sample server doesn't handle data requests.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このサンプルサーバーはデータ要求を処理しません。</target>
        </trans-unit>
        <trans-unit id="08f8987127087d9842a4e4e5bdd3976ba48ec115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Use the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method in the root module, &lt;code&gt;AppModule&lt;/code&gt;, to register top-level application routes and providers. For feature modules, call the &lt;code&gt;RouterModule.forChild&lt;/code&gt; method to register additional routes.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;使用 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; のルートモジュール内のメソッド、 &lt;code&gt;AppModule&lt;/code&gt; 、最上位のアプリケーション経路とプロバイダを登録します。機能モジュールの場合、 &lt;code&gt;RouterModule.forChild&lt;/code&gt; メソッドを呼び出して、追加のルートを登録します。</target>
        </trans-unit>
        <trans-unit id="e9d01ccecc14509f8ee59afc2465d9bda2262e3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Usually, you declare the components and their templates in separate files. For the purposes of understanding how the injection system works, it is useful to look at them from the point of view of a combined logical tree. The term logical distinguishes it from the render tree (your application DOM tree). To mark the locations of where the component templates are located, this guide uses the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; pseudo element, which doesn't actually exist in the render tree and is present for mental model purposes only.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;通常、コンポーネントとそのテンプレートは別々のファイルで宣言します。インジェクションシステムがどのように機能するかを理解するためには、結合された論理ツリーの観点からそれらを見ると便利です。論理という用語は、レンダーツリー（アプリケーションのDOMツリー）と区別します。このガイドでは、コンポーネントテンプレートが配置されている場所にマークを付けるために、実際にはRender Treeに存在せず、メンタルモデルの目的でのみ存在する &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 疑似要素を使用します。</target>
        </trans-unit>
        <trans-unit id="70df557fb1fbaae3691456f5ebacd0a025f111c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; We listen to the 'change' event because 'input' events aren't fired for selects in Firefox and IE: &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&quot;&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&lt;/a&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&quot;&gt;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; FirefoxとIEでは、selectに対して「input」イベントが発生しないため、「change」イベントをリッスンし&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&quot;&gt;ます&lt;/a&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&quot;&gt;。https&lt;/a&gt;：//bugzilla.mozilla.org/show_bug.cgi ？id = 1024350 https://developer.microsoft .com / en-us / microsoft-edge / platform / issues / 4660045 /</target>
        </trans-unit>
        <trans-unit id="64f0154c22ebb29b72b8d1f8e6731d45b0bc1411" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you use the CLI to create your app, the root application module &lt;code&gt;app.module.ts&lt;/code&gt; is placed in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; CLIを使用してアプリを作成すると、ルートアプリケーションモジュール &lt;code&gt;app.module.ts&lt;/code&gt; が &lt;code&gt;src/app&lt;/code&gt; フォルダーに配置されます。</target>
        </trans-unit>
        <trans-unit id="de3ce3f39fa05daf713e1064fe0d6b9d129a4efc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Within each &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function call, an element can only be in one state at any given time. However, it's possible for multiple triggers to be active at once.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;各 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数呼び出し内では、要素は常に1つの状態にしかなりません。ただし、複数のトリガーを一度にアクティブにすることは可能です。</target>
        </trans-unit>
        <trans-unit id="30cc6ed75f891598162f289c4d2116513f3b3f5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can define the control with just the initial value, but if your controls need sync or async validation, add sync and async validators as the second and third items in the array.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;初期値のみでコントロールを定義できますが、コントロールで同期または非同期の検証が必要な場合は、配列の2番目と3番目の項目として同期および非同期バリデーターを追加します。</target>
        </trans-unit>
        <trans-unit id="93de3f0193cc4096f2bc013adc716b8f8c4795c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can leave all the &lt;code&gt;FlowerService&lt;/code&gt; related code in place as it will allow a comparison with the &lt;code&gt;AnimalService&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;すべて残すことができます &lt;code&gt;FlowerService&lt;/code&gt; それはとの比較ができますような場所に関連するコードを &lt;code&gt;AnimalService&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f5788bdbe71c7954ba5852cebff9a44a86b21bcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;https://angular.io/generated/zips/universal/universal.zip&quot;&gt;Download the finished sample code&lt;/a&gt;, which runs in a &lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg; Express&lt;/a&gt; server.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg;Express&lt;/a&gt;サーバーで実行される&lt;a href=&quot;https://angular.io/generated/zips/universal/universal.zip&quot;&gt;完成したサンプルコードをダウンロードし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="14d914790250c2b88bffd67e3cfbbb564bbd7ccd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;TestBed.get()&lt;/code&gt; was deprecated as of Angular version 9. To help minimize breaking changes, Angular introduces a new function called &lt;code&gt;TestBed.inject()&lt;/code&gt;, which you should use instead. For information on the removal of &lt;code&gt;TestBed.get()&lt;/code&gt;, see its entry in the &lt;a href=&quot;deprecations#index&quot;&gt;Deprecations index&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;TestBed.get()&lt;/code&gt; はAngularバージョン9で非推奨になりました&lt;strong&gt;。&lt;/strong&gt;重大な変更を最小限に抑えるために、Angularでは &lt;code&gt;TestBed.inject()&lt;/code&gt; という新しい関数が導入されています。これを代わりに使用する必要があります。 &lt;code&gt;TestBed.get()&lt;/code&gt; の削除については、&lt;a href=&quot;deprecations#index&quot;&gt;Deprecationsインデックスの&lt;/a&gt;エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="b58e0364158266d8c7c243829e51629d5c43a060" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Any&lt;/em&gt; web server technology can serve a Universal app as long as it can call Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function. The principles and decision points discussed here apply to any web server technology.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ユニバーサルの &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; （）関数を呼び出すことができる限り、&lt;em&gt;どの&lt;/em&gt;Webサーバーテクノロジーでもユニバーサルアプリを提供できます。ここで説明する原則と決定ポイントは、すべてのWebサーバーテクノロジに適用されます。</target>
        </trans-unit>
        <trans-unit id="5f06fc5732efa20e58ad7d9a972d9aa2088a985d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Any&lt;/em&gt; web server technology can serve a Universal app as long as it can call Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function. The principles and decision points discussed here apply to any web server technology.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Universalの &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; （）関数を呼び出すことができる限り、&lt;em&gt;どの&lt;/em&gt; WebサーバーテクノロジーでもUniversalアプリを提供できます。ここで説明する原則と決定ポイントは、すべてのWebサーバーテクノロジーに適用されます。</target>
        </trans-unit>
        <trans-unit id="2c0b0d88a724e3ac9f07e02d7cdf853120fecc49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;Download the finished sample code, which runs in a &lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg; Express&lt;/a&gt; server.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg;Express&lt;/a&gt;サーバーで実行される完成したサンプルコードをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="7b50cff5f4086fcebeb5e570446e27289b40ae27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; references&lt;/strong&gt; go in the &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 参照のみ&lt;/strong&gt;が &lt;code&gt;imports&lt;/code&gt; 配列に入ります。</target>
        </trans-unit>
        <trans-unit id="cee89df418d808246e9b86076caf2b0df6fd2c91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only one title (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;) per document!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ドキュメントごとに1つのタイトル（ &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; ）のみ！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f0b3abaa461296cdd8fc0abbaa308569071229" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PENDING&lt;/strong&gt;: This control is in the midst of conducting a validation check.</source>
          <target state="translated">&lt;strong&gt;保留中&lt;/strong&gt;：このコントロールは、検証チェックを行っている最中です。</target>
        </trans-unit>
        <trans-unit id="d9fc890426cc94f6989561c4686510d629b8c55d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pass values, not elements&lt;/strong&gt; &amp;mdash; Instead of passing the &lt;code&gt;newHero&lt;/code&gt; into the component's &lt;code&gt;addHero&lt;/code&gt; method, get the input box value and pass &lt;em&gt;that&lt;/em&gt; to &lt;code&gt;addHero&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;要素ではなく値&lt;/strong&gt;を渡す&amp;mdash; &lt;code&gt;newHero&lt;/code&gt; をコンポーネントの &lt;code&gt;addHero&lt;/code&gt; メソッドに渡す代わりに、入力ボックスの値を取得&lt;em&gt;し&lt;/em&gt;て &lt;code&gt;addHero&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="708b277a2f68a14cef92957000b3968f4e41c1c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Patch releases&lt;/strong&gt; are low risk, bug fix releases. No developer assistance is expected during update.</source>
          <target state="translated">&lt;strong&gt;パッチリリース&lt;/strong&gt;はリスクが低く、バグ修正リリースです。アップデート中は開発者の支援は必要ありません。</target>
        </trans-unit>
        <trans-unit id="0cd0b4a7c54363dce840ab7388d1519bac26c747" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast</source>
          <target state="translated">&lt;strong&gt;ピッチフォークパーカー記号論&lt;/strong&gt;、ルーフパーティーポップアップ&lt;em&gt;パレオ&lt;/em&gt;メッセンジャーバッグクレッドカーレスはトリュフォー年を乱した。記号論のウイルスフリーガンVHS、ショアディッチはマクスウィーニーを混乱させます。Intelligentsiaケールチップス副4ドルトースト</target>
        </trans-unit>
        <trans-unit id="4c432f70eff95dd8fce9c3f8f8ee240fdb5b538a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</source>
          <target state="translated">&lt;strong&gt;Pitchforkパーカー記号論&lt;/strong&gt;、ルーフパーティーポップアップ&lt;em&gt;パレオ&lt;/em&gt;メッセンジャーバッグクレルカルレストリュフォーyr。記号論のバイラルフリーガンVHS、ショーディッチはマックスウィーニーを破壊します。インテリジェンシアケールチップバイス4ドルトースト、シュリッツ十字架</target>
        </trans-unit>
        <trans-unit id="cefd81b08fbd8e4d1d9b8b740c6283f911489e3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast</source>
          <target state="translated">&lt;strong&gt;ピッチフォークパーカー記号論&lt;/strong&gt;、ルーフパーティーポップアップ&lt;em&gt;パレオ&lt;/em&gt;メッセンジャーメッセンジャーバッグクレドカルレスはトリュフォー年を乱した。記号論のウイルスフリーガンVHS、ショアディッチはマクスウィーニーを混乱させます。Intelligentsiaケールチップス副4ドルトースト</target>
        </trans-unit>
        <trans-unit id="95a1b4770819e0a29d5da0018adc297164c08a4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</source>
          <target state="translated">&lt;strong&gt;Pitchforkパーカー記号論&lt;/strong&gt;、ルーフパーティーポップアップ&lt;em&gt;パレオ&lt;/em&gt;メッセンジャーメッセンジャーバッグクレルカルレストリュフォーyr。記号論のバイラルフリーガンVHS、ショーディッチはマックスウィーニーを破壊します。インテリジェンシアケールチップバイス4ドルトースト、シュリッツ十字架</target>
        </trans-unit>
        <trans-unit id="473d3902f591877838d6a7ab6b5227c1d6bcd07a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prerequisite:&lt;/strong&gt; Make sure you have &lt;a href=&quot;setup-local#prerequisites&quot;&gt;Node.js&amp;reg; and npm installed&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;前提条件：&lt;/strong&gt;&lt;a href=&quot;setup-local#prerequisites&quot;&gt;Node.js&amp;reg;とnpmがインストールされ&lt;/a&gt;ていることを確認します。</target>
        </trans-unit>
        <trans-unit id="32ce9dea35eb6602b61f5e8553548d4ce67a0350" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prerequisites&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Prerequisites&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="709be87fd84c09acfc000c260a431956877eba9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; are more robust: they're more scalable, reusable, and testable. If forms are a key part of your application, or you're already using reactive patterns for building your application, use reactive forms.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;はより堅牢で、よりスケーラブルで、再利用可能で、テスト可能です。フォームがアプリケーションの重要な部分である場合、またはアプリケーションの構築にすでにリアクティブパターンを使用している場合は、リアクティブフォームを使用します。</target>
        </trans-unit>
        <trans-unit id="e685c5e24ec500b6b876387c87e2a2a6bfdb201e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; define custom validators as &lt;strong&gt;functions&lt;/strong&gt; that receive a control to validate.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;は、検証するコントロールを受け取る&lt;strong&gt;関数&lt;/strong&gt;としてカスタムバリデーター&lt;strong&gt;を&lt;/strong&gt;定義します。</target>
        </trans-unit>
        <trans-unit id="a045f7f19ab14d56ef2b515f6483230485fdd57a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; keep the data model pure by providing it as an immutable data structure. Each time a change is triggered on the data model, the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance returns a new data model rather than updating the existing data model. This gives you the ability to track unique changes to the data model through the control's observable. Change detection is more efficient because it only needs to update on unique changes. Because data updates follow reactive patterns, you can integrate with observable operators to transform data.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;は、不変のデータ構造として提供することにより、データモデルを純粋に保ちます。データモデルで変更がトリガーされる &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; に、FormControlインスタンスは、既存のデータモデルを更新するのではなく、新しいデータモデルを返します。これにより、コントロールの監視対象を介してデータモデルへの一意の変更を追跡することができます。変更の検出は、一意の変更に対してのみ更新する必要があるため、より効率的です。データの更新はリアクティブパターンに従うため、監視可能な演算子と統合してデータを変換できます。</target>
        </trans-unit>
        <trans-unit id="b740b48c800974f154bba8d1b973edfecff1e2dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; keep the data model pure by providing it as an immutable data structure. Each time a change is triggered on the data model, the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance returns a new data model rather than updating the existing data model. This gives you the ability to track unique changes to the data model through the control's observable. This provides one way for change detection to be more efficient because it only needs to update on unique changes. It also follows reactive patterns that integrate with observable operators to transform data.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;は、データモデルを不変のデータ構造として提供することにより、データモデルを純粋に保ちます。データモデルで変更がトリガーされる &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; に、FormControlインスタンスは、既存のデータモデルを更新するのではなく、新しいデータモデルを返します。これにより、コントロールのオブザーバブルを通じてデータモデルへの固有の変更を追跡できます。これは、一意の変更でのみ更新する必要があるため、変更検出をより効率的にする1つの方法を提供します。また、観察可能なオペレーターと統合してデータを変換する反応パターンに従います。</target>
        </trans-unit>
        <trans-unit id="fbb97dd1d93d98c721ec3da4ae659eab5c63a582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; provide access to low-level APIs and synchronous access to the form model, making creating large-scale forms easier.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;は、低レベルAPIへのアクセスとフォームモデルへの同期アクセスを提供し、大規模なフォームの作成を容易にします。</target>
        </trans-unit>
        <trans-unit id="075f1a0f2409ffebd1ffdbc27d628cb021f456ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; provide direct, explicit access to the underlying forms object model. Compared to template-driven forms, they are more robust: they're more scalable, reusable, and testable. If forms are a key part of your application, or you're already using reactive patterns for building your application, use reactive forms.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;は、基になるフォームオブジェクトモデルへの直接の明示的なアクセスを提供します。テンプレート駆動型フォームと比較して、より堅牢です。よりスケーラブルで、再利用可能で、テスト可能です。フォームがアプリケーションの重要な部分である場合、またはアプリケーションの構築にリアクティブパターンをすでに使用している場合は、リアクティブフォームを使用してください。</target>
        </trans-unit>
        <trans-unit id="9d63209425ff6ede2412db4302637e3c12254206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Register the control in the template&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テンプレートにコントロールを登録します&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cfb401a59a39c2e660837d81259c434d0a885126" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Register the reactive forms module&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;リアクティブフォームモジュールを登録する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11549f9940889bdcc6705f4f1c2b9f3cd0acf0c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Release candidate:&lt;/strong&gt; A release that is feature complete and in final testing. A release candidate is indicated by a release tag appended with the &lt;code&gt;-rc&lt;/code&gt; identifier, such as version &lt;code&gt;8.1.0-rc.0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;リリース候補：&lt;/strong&gt;機能が完全で、最終テスト中のリリース。リリース候補は、バージョン &lt;code&gt;8.1.0-rc.0&lt;/code&gt; など、 &lt;code&gt;-rc&lt;/code&gt; 識別子が付加されたリリースタグで示されます。</target>
        </trans-unit>
        <trans-unit id="838b09b5d8525736cd6aca78332e34f8ca1bb45a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Release candidate:&lt;/strong&gt; A release that is feature complete and in final testing. A release candidate is indicated by a release tag appended with the &lt;code&gt;rc&lt;/code&gt; identifier, such as version &lt;code&gt;8.1.0-rc&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;リリース候補：&lt;/strong&gt;機能が完全で、最終テスト中のリリース。リリース候補は、バージョン &lt;code&gt;8.1.0-rc&lt;/code&gt; などの &lt;code&gt;rc&lt;/code&gt; 識別子が付加されたリリースタグで示されます。</target>
        </trans-unit>
        <trans-unit id="d80cede24d8f6a6f5970fefe563196691a4ff05d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember:&lt;/strong&gt; you only get the &lt;em&gt;initial&lt;/em&gt; value of the parameter map with this technique. Stick with the observable &lt;code&gt;paramMap&lt;/code&gt; approach if there's even a chance that the router could re-use the component. This sample stays with the observable &lt;code&gt;paramMap&lt;/code&gt; strategy just in case.</source>
          <target state="translated">&lt;strong&gt;覚えておいてください：&lt;/strong&gt;あなたはこのテクニックでパラメータマップの&lt;em&gt;初期&lt;/em&gt;値を取得するだけです。ルーターがコンポーネントを再利用する可能性さえある場合は、 &lt;code&gt;paramMap&lt;/code&gt; 可能なparamMapアプローチを使用してください。このサンプルは、 &lt;code&gt;paramMap&lt;/code&gt; ため、監視可能なparamMap戦略を使用しています。</target>
        </trans-unit>
        <trans-unit id="4f446c02a52837521e5a6b51894f8db8590518d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reminder:&lt;/strong&gt; The &quot;QuickStart seed&quot; example was created prior to the Angular CLI, so there are some differences between what is described here and an Angular CLI application.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;「QuickStartシード」の例はAngular CLIより前に作成されたため、ここで説明する内容とAngular CLIアプリケーションとの間にはいくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="14427d3b847d480d9d47f56458454e25d491878e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource URL&lt;/strong&gt; is a URL that will be loaded and executed as code, for example, in &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;リソースURL&lt;/strong&gt;は、たとえば &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt; のコードとしてロードおよび実行されるURLです。</target>
        </trans-unit>
        <trans-unit id="03049e5993fa21ca8b206a4b8780ca4038880a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Running&lt;/strong&gt; For example, webpack compiles. This ends when webpack finishes and your builder emits a &lt;code&gt;BuilderOutput&lt;/code&gt; object.</source>
          <target state="translated">&lt;strong&gt;実行&lt;/strong&gt;たとえば、webpackがコンパイルされます。これは、webpackが終了し、ビルダーが &lt;code&gt;BuilderOutput&lt;/code&gt; オブジェクトを発行すると終了します。</target>
        </trans-unit>
        <trans-unit id="e07d610b5c16aa4b2bdca2a424387d9854e37e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Runtime:&lt;/strong&gt; Injector configuration via the &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt;ランタイム：&lt;/strong&gt; &lt;code&gt;providers&lt;/code&gt; 配列を介したインジェクター構成。</target>
        </trans-unit>
        <trans-unit id="b31d5dd2a2bc3b46b020204363d5d73e74f48bcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RxJS marble testing&lt;/strong&gt; is a great way to test observable scenarios, both simple and complex. You've likely seen the &lt;a href=&quot;http://rxmarbles.com/&quot;&gt;marble diagrams&lt;/a&gt; that illustrate how observables work. Marble testing uses a similar marble language to specify the observable streams and expectations in your tests.</source>
          <target state="translated">&lt;strong&gt;RxJSの大理石のテスト&lt;/strong&gt;は、単純なものから複雑なものまで、観察可能なシナリオをテストする優れた方法です。オブザーバブルがどのように機能するかを示す&lt;a href=&quot;http://rxmarbles.com/&quot;&gt;大理石の図&lt;/a&gt;を見たことがあります。大理石のテストでは、同様の大理石の言語を使用して、テストで観測可能なストリームと期待値を指定します。</target>
        </trans-unit>
        <trans-unit id="48825014938eb7915005039dae95b10cc2130328" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Save form data&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フォームデータを保存する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66fe1d46bd141ee07e93d23bcd1758af621ad8e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the &lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;を参照してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="43ea0d44435c8b67d128290fc1634480ad748492" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the Angular syntax in this &lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;こののAngular構文を参照してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6b304202d6b9b7d59ab65a8e6057866905abb614" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static asset&lt;/strong&gt;: all other requests.</source>
          <target state="translated">&lt;strong&gt;静的アセット&lt;/strong&gt;：他のすべてのリクエスト。</target>
        </trans-unit>
        <trans-unit id="cbf65f3b89682af8d30c19f2bd5eb2048c642179" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static:&lt;/strong&gt; Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured via the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt;静的：&lt;/strong&gt;ディレクティブセレクターについてコンパイラーに指示するコンパイラー構成と、テンプレート内のどこにディレクティブをセレクターマッチングを通じて適用するか。これは、 &lt;code&gt;declarations&lt;/code&gt; 配列を介して構成されます。</target>
        </trans-unit>
        <trans-unit id="976d3a67076ee0a889e6579cde70008f39c15b63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スタイルの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="223854d9e937adcab6eba006aec80e64f11c7c6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style&lt;/strong&gt; is used when binding CSS into the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;CSSを &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; プロパティにバインドするときに&lt;strong&gt;スタイル&lt;/strong&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="e8643df547d495e2f243fdba32a32e4e7a459fdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sync validators&lt;/strong&gt;: Synchronous functions that take a control instance and immediately return either a set of validation errors or &lt;code&gt;null&lt;/code&gt;. You can pass these in as the second argument when you instantiate a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;同期バリデーター&lt;/strong&gt;：コントロールインスタンスを取得し、検証エラーのセットまたは &lt;code&gt;null&lt;/code&gt; を即座に返す同期関数。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をインスタンス化するときに、これらを2番目の引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8d23c9b31a96802fe5f1117cb148697c5c8938e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sync validators&lt;/strong&gt;: functions that take a control instance and immediately return either a set of validation errors or &lt;code&gt;null&lt;/code&gt;. You can pass these in as the second argument when you instantiate a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;同期バリデーター&lt;/strong&gt;：コントロールインスタンスを取得し、すぐに一連の検証エラーまたは &lt;code&gt;null&lt;/code&gt; を返す関数。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をインスタンス化するときに、これらを2番目の引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="736217d05af049a7575b12dd321ddde95c5b4ec4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template binding works with &lt;em&gt;properties&lt;/em&gt; and &lt;em&gt;events&lt;/em&gt;, not &lt;em&gt;attributes&lt;/em&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テンプレートバインディングは、&lt;em&gt;属性&lt;/em&gt;ではなく&lt;em&gt;プロパティ&lt;/em&gt;と&lt;em&gt;イベント&lt;/em&gt;で機能し&lt;em&gt;ます&lt;/em&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a34fe84a9cb32717df61c02150c2c1128d88b5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; are tied to template &lt;strong&gt;directives&lt;/strong&gt;, and must provide custom validator directives that wrap validation functions.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型フォーム&lt;/strong&gt;はテンプレート&lt;strong&gt;ディレクティブ&lt;/strong&gt;に関連付けられており、検証関数をラップするカスタムバリデータディレクティブを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="39611775e2f3c33d40770f7b55ff0283d9358dcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; are useful for adding a simple form to an app, such as an email list signup form. They're easy to add to an app, but they don't scale as well as reactive forms. If you have very basic form requirements and logic that can be managed solely in the template, use template-driven forms.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型フォーム&lt;/strong&gt;は、メーリングリストの登録フォームなど、シンプルなフォームをアプリに追加するのに役立ちます。アプリに追加するのは簡単ですが、リアクティブフォームほどスケーリングされません。テンプレートのみで管理できる非常に基本的なフォーム要件とロジックがある場合は、テンプレート駆動型フォームを使用します。</target>
        </trans-unit>
        <trans-unit id="a1d2475a52a172617485b5340a76d953fe981997" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; rely on directives in the template to create and manipulate the underlying object model. They are useful for adding a simple form to an app, such as an email list signup form. They're easy to add to an app, but they don't scale as well as reactive forms. If you have very basic form requirements and logic that can be managed solely in the template, template-driven forms could be a good fit.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型フォーム&lt;/strong&gt;は、テンプレート内のディレクティブに依存して、基になるオブジェクトモデルを作成および操作します。メーリングリストの登録フォームなど、アプリに簡単なフォームを追加する場合に便利です。これらはアプリに簡単に追加できますが、リアクティブフォームほど拡張性はありません。テンプレートのみで管理できる非常に基本的なフォーム要件とロジックがある場合は、テンプレート駆動型フォームが適している可能性があります。</target>
        </trans-unit>
        <trans-unit id="f9f368e6ae6f90a6865c211b4fc3f51561734be3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven&lt;/strong&gt; forms focus on simple scenarios, are not as reusable, abstract away the low-level APIs, and provide asynchronous access to the form model. The abstraction with template-driven forms also surfaces in testing, where testing reactive forms requires less setup and no dependence on the change detection cycle when updating and validating the form and data models during testing.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型&lt;/strong&gt;フォームは単純なシナリオに重点を置いており、再利用可能ではなく、低レベルAPIを抽象化し、フォームモデルへの非同期アクセスを提供します。テンプレート駆動型フォームによる抽象化は、テスト中にも表面化します。リアクティブフォームのテストでは、セットアップが少なく、テスト中にフォームとデータモデルを更新および検証するときに、変更検出サイクルに依存しません。</target>
        </trans-unit>
        <trans-unit id="81a3d875ca1aa71ccfc79e48c2ebbd3e48d8d04e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven&lt;/strong&gt; forms rely on mutability with two-way data binding to update the data model in the component as changes are made in the template. Because there are no unique changes to track on the data model when using two-way data binding, change detection is less efficient at determining when updates are required.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型&lt;/strong&gt;フォームは、双方向のデータバインディングによる可変性に依存して、テンプレートに変更が加えられたときにコンポーネントのデータモデルを更新します。双方向データバインディングを使用する場合、データモデルで追跡する固有の変更はないため、変更が検出されるタイミングは、更新が必要かどうかを判断する際にあまり効率的ではありません。</target>
        </trans-unit>
        <trans-unit id="be2ae55753f8c992faf5420a53fdaffa8f81a22e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Angular i18n tools generated the ids for these translation units. Don't change them.&lt;/strong&gt; Each &lt;code&gt;id&lt;/code&gt; depends upon the content of the template text and its assigned meaning. If you change either the text or the meaning, then the &lt;code&gt;id&lt;/code&gt; changes. For more information, see the &lt;strong&gt;&lt;a href=&quot;i18n#custom-id&quot;&gt;translation file maintenance discussion&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Angular i18nツールは、これらの翻訳単位のIDを生成しました。それらを変更しないでください。&lt;/strong&gt;各 &lt;code&gt;id&lt;/code&gt; は、テンプレートテキストの内容と割り当てられた意味によって異なります。テキストまたは意味を変更すると、 &lt;code&gt;id&lt;/code&gt; が変更されます。詳細については、&lt;strong&gt;&lt;a href=&quot;i18n#custom-id&quot;&gt;翻訳ファイルのメンテナンスに関する説明を&lt;/a&gt;&lt;/strong&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a999cce0de293dd0ceb1486c064bdc0e80ff41df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The order of the routes in the configuration matters&lt;/strong&gt; and this is by design. The router uses a &lt;strong&gt;first-match wins&lt;/strong&gt; strategy when matching routes, so more specific routes should be placed above less specific routes. In the configuration above, routes with a static path are listed first, followed by an empty path route, that matches the default route. The wildcard route comes last because it matches &lt;em&gt;every URL&lt;/em&gt; and should be selected &lt;em&gt;only&lt;/em&gt; if no other routes are matched first.</source>
          <target state="translated">&lt;strong&gt;構成内のルートの順序は重要で&lt;/strong&gt;あり、これは設計によるものです。ルーターは、ルートを照合するときに&lt;strong&gt;最初に一致する勝利&lt;/strong&gt;戦略を使用するため、より具体的なルートは、それほど具体的でないルートの上に配置する必要があります。上記の構成では、静的パスを持つルートが最初にリストされ、その後にデフォルトのルートと一致する空のパスルートが続きます。ワイルドカードルートは&lt;em&gt;すべてのURL&lt;/em&gt;に一致するため、最後に来&lt;em&gt;ます&lt;/em&gt;。他に一致するルートが&lt;em&gt;ない&lt;/em&gt;場合に&lt;em&gt;のみ&lt;/em&gt;選択する必要があり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="38184a516af530c7b89c8dcda7bf8522761ad6d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;These same considerations apply to every structural directive, whether built-in or custom.&lt;/strong&gt; Before applying a structural directive, you might want to pause for a moment to consider the consequences of adding and removing elements and of creating and destroying components.</source>
          <target state="translated">&lt;strong&gt;これらと同じ考慮事項が、組み込みかカスタムかにかかわらず、すべての構造ディレクティブに適用されます。&lt;/strong&gt;構造ディレクティブを適用する前に、要素を追加および削除した結果、コンポーネントを作成および破棄した結果を検討するために、少し間を置くことができます。</target>
        </trans-unit>
        <trans-unit id="fe44a85d9ca6005e7244538960b40e24bc47858c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This Tour of Heroes tutorial&lt;/strong&gt; is the conceptual basis for many examples in this documentation set. Reading this introduction page provides sufficient context for working with those examples. You do not need to do this tutorial to understand those other examples. The Tour of Heroes tutorial is maintained here for context and continuity.</source>
          <target state="translated">&lt;strong&gt;この英雄ツアーのチュートリアル&lt;/strong&gt;は、このドキュメントセットの多くの例の概念的な基礎です。この紹介ページを読むと、これらの例を扱うのに十分なコンテキストが得られます。他の例を理解するために、このチュートリアルを実行する必要はありません。英雄ツアーのチュートリアルは、コンテキストと継続性のためにここで維持されます。</target>
        </trans-unit>
        <trans-unit id="d539cfba0c3e2c6f1af70df43cfa22fe53cecb73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This won't work at all unless you bind to an event&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;イベントにバインドしない限り、これはまったく機能しません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a80aeef417506b373f9b8e1ca32e8927d08fea94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Timing examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タイミングの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc6aade1857b98341ff9104631b04810b85d452" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; When testing Angular service workers, it's a good idea to use an incognito or private window in your browser to ensure the service worker doesn't end up reading from a previous leftover state, which can cause unexpected behavior.</source>
          <target state="translated">&lt;strong&gt;ヒント：&lt;/strong&gt; Angular Service Workerをテストするときは、ブラウザーでシークレットウィンドウまたはプライベートウィンドウを使用して、Service Workerが以前の残りの状態からの読み取りを行わず、予期しない動作が発生しないようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9b5c8b64ad9cd5d1fbda1a7ab6717ec8f07c6fb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt; Display the value for the form group instance in the component template using the &lt;code&gt;value&lt;/code&gt; property and &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ヒント&lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; プロパティと &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; を使用して、コンポーネントテンプレートにフォームグループインスタンスの値を表示します。</target>
        </trans-unit>
        <trans-unit id="ac9ade9e3d18db86ee1a787e995f2cceb063b935" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt; You can define the control with just the initial value, but if your controls need sync or async validation, add sync and async validators as the second and third items in the array.</source>
          <target state="translated">&lt;strong&gt;ヒント&lt;/strong&gt;初期値のみでコントロールを定義できますが、コントロールで同期または非同期の検証が必要な場合は、配列の2番目と3番目の項目として同期および非同期バリデーターを追加します。</target>
        </trans-unit>
        <trans-unit id="e8f5f0ccfa280e0fd5ba348e427d9b195ad85764" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;: Every progress event triggers change detection, so only turn them on if you need to report progress in the UI.</source>
          <target state="translated">&lt;strong&gt;ヒント&lt;/strong&gt;：すべての進行状況イベントは変更検出をトリガーするため、UIで進行状況を報告する必要がある場合にのみオンにしてください。</target>
        </trans-unit>
        <trans-unit id="bd60b7d4980bbe3b5620fc35b30681a7a890ea76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;: If you set the cloned request body to &lt;code&gt;undefined&lt;/code&gt;, Angular assumes you intend to leave the body as is.</source>
          <target state="translated">&lt;strong&gt;ヒント&lt;/strong&gt;：複製されたリクエストの本文を &lt;code&gt;undefined&lt;/code&gt; に設定すると、Angularは本文をそのままにしておくつもりであると想定します。</target>
        </trans-unit>
        <trans-unit id="fec66486a30dbc0bea95331ec287393af8d9b44a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two critical points&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2つの重要なポイント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4954c4b6c00b45986905694f1b1374d7bc1be911" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TypeScript interfaces are not valid tokens&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TypeScriptインターフェースは有効なトークンではありません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84d9cdef4598d181c02608e6adb684186a18b296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;URL&lt;/strong&gt; is used for URL properties, such as &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;URLは、&lt;/strong&gt;のようなURLのプロパティに使用され &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ca734d077c213c37139adbd1147c92fd552a7d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;URL&lt;/strong&gt; is used for URL properties, such as &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;URL&lt;/strong&gt;は、 &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; などのURLプロパティに使用されます。</target>
        </trans-unit>
        <trans-unit id="0bcaefa1fa57901abf47489e45d1501b61b8bd8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use template variables to refer to elements&lt;/strong&gt; &amp;mdash; The &lt;code&gt;newHero&lt;/code&gt; template variable refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. You can reference &lt;code&gt;newHero&lt;/code&gt; from any sibling or child of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;strong&gt;テンプレート変数を使用して要素を参照する&lt;/strong&gt; &amp;mdash; &lt;code&gt;newHero&lt;/code&gt; テンプレート変数は &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素&lt;strong&gt;を参照します&lt;/strong&gt;。 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素の兄弟または子から &lt;code&gt;newHero&lt;/code&gt; を参照できます。</target>
        </trans-unit>
        <trans-unit id="b677cf735946959b9d7588a08eb43b16500df0e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VALID&lt;/strong&gt;: This control has passed all validation checks.</source>
          <target state="translated">&lt;strong&gt;VALID&lt;/strong&gt;：このコントロールはすべての検証チェックに合格しました。</target>
        </trans-unit>
        <trans-unit id="fdf2f29be1ffedae6e6be14262266e47e87b960e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Validating user input&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ユーザー入力の検証&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81764712c192c7d252e1dde6e6432f8c34257ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Verifying view-to-model data flow&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ビューからモデルへのデータフローの検証&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1d3bd99f3963d7dd7451baa69dc655142691d45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Version 8 update&lt;/strong&gt;: When you update to version 8, the &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; command performs the transformation automatically. Prior to version 7, the &lt;code&gt;import()&lt;/code&gt; syntax only works in JIT mode (with view engine).</source>
          <target state="translated">&lt;strong&gt;バージョン8の更新&lt;/strong&gt;：&lt;strong&gt;バージョン8に更新する&lt;/strong&gt;と、&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;コマンドは自動的に変換を実行します。バージョン7より前は、 &lt;code&gt;import()&lt;/code&gt; 構文はJITモード（ビューエンジンを使用）でのみ機能します。</target>
        </trans-unit>
        <trans-unit id="5930284e7d08a06d52e13ae68f35a6d5e2eb49dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; calling this method with untrusted user data exposes your application to XSS security risks!</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;信頼できないユーザーデータを使用してこのメ​​ソッドを呼び出すと、アプリケーションがXSSセキュリティリスクにさらされます。</target>
        </trans-unit>
        <trans-unit id="f4b21eac31a19fb3c30a451eadfdc629a0028356" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Watching&lt;/strong&gt; Between two runs, watch an external event stream. For example, webpack watches the file system for any changes. This ends when webpack restarts building, and &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; is called. This goes back to step 1.</source>
          <target state="translated">&lt;strong&gt;鑑賞&lt;/strong&gt;二つの実験の間に、外部のイベントストリームを見ます。たとえば、webpackはファイルシステムの変更を監視します。これは、webpackがビルドを再開し、 &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; が呼び出されると終了します。これはステップ1に戻ります。</target>
        </trans-unit>
        <trans-unit id="1f4db7a717d8bafa0668ecb47f73ca0cc064ab40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A &lt;code&gt;RoutingModule&lt;/code&gt; is a module dedicated exclusively to configuring the Angular router. A consistent class and file name convention make these modules easy to spot and verify.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;A &lt;code&gt;RoutingModule&lt;/code&gt; は角度ルータの設定に特化したモジュールです。一貫したクラスとファイル名の規則により、これらのモジュールを簡単に見つけて確認できます。</target>
        </trans-unit>
        <trans-unit id="04589d2d9744514af189ea6e3054d6bf9d7d22f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A &lt;em&gt;component relative&lt;/em&gt; URL requires no change when you move the component files, as long as the files stay together.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;&lt;em&gt;コンポーネントの相対&lt;/em&gt;あなたがいる限り、ファイルが一緒にとどまるよう、コンポーネントファイルを移動すると、URLが変更を必要としません。</target>
        </trans-unit>
        <trans-unit id="c0e395c2378de24cfdc67c2df0ed44bfc442cd04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A developer can locate the code and identify what each file represents at a glance. The structure is as flat as it can be and there are no repetitive or redundant names.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;開発者はコードを見つけて、各ファイルが何を表しているかを一目で識別できます。構造は可能な限りフラットであり、繰り返しまたは冗長な名前はありません。</target>
        </trans-unit>
        <trans-unit id="1262a86b3590b85df017625720fbbcdc6d311c34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can easily be isolated for testing.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、テスト用に簡単に分離できます。</target>
        </trans-unit>
        <trans-unit id="d0befcba826a7c12a909b30a127b915f1633d173" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can easily be routed to both eagerly and lazily.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、熱心にも遅延にも簡単にルーティングできます。</target>
        </trans-unit>
        <trans-unit id="d8a9d11884cdfdbe0f14fccb1d35f8d0a08b3f3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can expose or hide its implementation from other modules.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、その実装を他のモジュールから公開または非表示にすることができます。</target>
        </trans-unit>
        <trans-unit id="eb107a6bf76e17297ad715b7d51e4fb71ad58b07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module defines clear boundaries between specific functionality and other application features.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、特定の機能と他のアプリケーション機能の間の明確な境界を定義します。</target>
        </trans-unit>
        <trans-unit id="6abe63ff1c16959d3bd6cc84f3dc2944004b35d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module helps clarify and make it easier to assign development responsibilities to different teams.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、開発の責任を明確にし、さまざまなチームへの割り当てを容易にするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c683cac77b133fcddf5376450cec6bbebe1f977d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module identifies distinct sets of related components that comprise the feature area.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、機能領域を構成する関連コンポーネントの個別のセットを識別します。</target>
        </trans-unit>
        <trans-unit id="85284312bcbd37c13bef3a0c96d45d476790c351" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A lazy loaded feature module that imports that shared module will make its own copy of the service and likely have undesirable results.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;その共有モジュールをインポートする遅延ロードされた機能モジュールは、サービスの独自のコピーを作成し、望ましくない結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="0740926be2e010643c4d521f9c1a255b48ee9178" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A single component can be the default export for its file which facilitates lazy loading with the router.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;単一のコンポーネントをそのファイルのデフォルトのエクスポートにして、ルーターでの遅延ロードを容易にすることができます。</target>
        </trans-unit>
        <trans-unit id="2811feb73a16c592296e6d07558d99d29370128b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; An element may have more than one attribute directive applied.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;要素には、複数の属性ディレクティブが適用されている場合があります。</target>
        </trans-unit>
        <trans-unit id="ba1c5353bbde10cde7e9da164e80017b227b5d57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Angular allows for an &lt;a href=&quot;binding-syntax&quot;&gt;alternative syntax&lt;/a&gt;&lt;code&gt;on-*&lt;/code&gt;. If the event itself was prefixed with &lt;code&gt;on&lt;/code&gt; this would result in an &lt;code&gt;on-onEvent&lt;/code&gt; binding expression.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angularでは、- &lt;code&gt;on-*&lt;/code&gt; &lt;a href=&quot;binding-syntax&quot;&gt;代替構文&lt;/a&gt;が可能です。イベント自体はが付いていた場合 &lt;code&gt;on&lt;/code&gt; 、このことになる &lt;code&gt;on-onEvent&lt;/code&gt; バインディング式。</target>
        </trans-unit>
        <trans-unit id="07f45f2bfe81970ab8ea36a5d55fe680e01ab2f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Angular allows for an &lt;a href=&quot;template-syntax#binding-syntax&quot;&gt;alternative syntax&lt;/a&gt;&lt;code&gt;on-*&lt;/code&gt;. If the event itself was prefixed with &lt;code&gt;on&lt;/code&gt; this would result in an &lt;code&gt;on-onEvent&lt;/code&gt; binding expression.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angularでは、&lt;a href=&quot;template-syntax#binding-syntax&quot;&gt;代替構文&lt;/a&gt; &lt;code&gt;on-*&lt;/code&gt; を使用できます。イベント自体はが付いていた場合 &lt;code&gt;on&lt;/code&gt; 、このことになる &lt;code&gt;on-onEvent&lt;/code&gt; バインディング式。</target>
        </trans-unit>
        <trans-unit id="9cc424a44b45f6cafa38c31a9508d5e7ed3a747c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Attribute directives don't have an associated template.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;属性ディレクティブには、関連付けられたテンプレートがありません。</target>
        </trans-unit>
        <trans-unit id="aa2f8a7961dc97adafb6e602f6fe6d05c58777f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Being DRY is important, but not crucial if it sacrifices the other elements of LIFT. That's why it's called &lt;em&gt;T-DRY&lt;/em&gt;. For example, it's redundant to name a template &lt;code&gt;hero-view.component.html&lt;/code&gt; because with the &lt;code&gt;.html&lt;/code&gt; extension, it is obviously a view. But if something is not obvious or departs from a convention, then spell it out.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;DRYであることは重要ですが、LIFTの他の要素を犠牲にする場合は重要ではありません。それが&lt;em&gt;T-DRY&lt;/em&gt;と呼ばれる理由です。たとえば、テンプレートに &lt;code&gt;hero-view.component.html&lt;/code&gt; という名前を付けることは冗長です。これは、 &lt;code&gt;.html&lt;/code&gt; 拡張子を使用すると、明らかにビューであるためです。しかし、何かが明白ではない、または慣例から逸脱している場合は、それを綴ってください。</target>
        </trans-unit>
        <trans-unit id="46a5882dc1138956f82e9db20a9f116859436e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Clear service names such as &lt;code&gt;Logger&lt;/code&gt; do not require a suffix.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;Logger&lt;/code&gt; などの明確なサービス名にはサフィックスは必要ありません。</target>
        </trans-unit>
        <trans-unit id="c5e29beaefad891bdb4e78135e60f691b8ac86b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components are easy to identify in the DOM.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントはDOMで簡単に識別できます。</target>
        </trans-unit>
        <trans-unit id="939cda78012273bade6ae1142aa81a9144c9418e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components have templates containing HTML and optional Angular template syntax. They display content. Developers place components on the page as they would native HTML elements and web components.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントには、HTMLとオプションのAngularテンプレート構文を含むテンプレートがあります。コンテンツを表示します。開発者は、ネイティブHTML要素やWebコンポーネントと同じように、コンポーネントをページに配置します。</target>
        </trans-unit>
        <trans-unit id="940f7a48e45cacbadbcff27f2d8f20fa574d2cfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components often have four files (e.g. &lt;code&gt;*.html&lt;/code&gt;, &lt;code&gt;*.css&lt;/code&gt;, &lt;code&gt;*.ts&lt;/code&gt;, and &lt;code&gt;*.spec.ts&lt;/code&gt;) and can clutter a folder quickly.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;多くの場合、コンポーネントには4つのファイル（たとえば、 &lt;code&gt;*.html&lt;/code&gt; 、 &lt;code&gt;*.css&lt;/code&gt; 、 &lt;code&gt;*.ts&lt;/code&gt; 、および &lt;code&gt;*.spec.ts&lt;/code&gt; ）があり、フォルダーがすぐにいっぱいになることがあります。</target>
        </trans-unit>
        <trans-unit id="cfc187a80923daabfa4dee51bab700e352640231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Consistent conventions make it easy to quickly identify and reference assets of different types.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;一貫した規則により、さまざまなタイプのアセットをすばやく簡単に識別および参照できます。</target>
        </trans-unit>
        <trans-unit id="a4b76ada1e8fb40c5c098a2792e6ab48605b126c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Directives are easily identified.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ディレクティブは簡単に識別できます。</target>
        </trans-unit>
        <trans-unit id="a8ca309d4fd0bb05fc8f73be6ad20dd69c1b4b95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Directly importing and using a module will load it immediately when the intention is to load it on demand.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;モジュールを直接インポートして使用すると、オンデマンドでロードするつもりである場合、すぐにロードされます。</target>
        </trans-unit>
        <trans-unit id="63f93ef339450c1d644d4b8bc49215522e7b59b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Easily identifies the module as the root of the same named feature.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;モジュールを同じ名前の機能のルートとして簡単に識別します。</target>
        </trans-unit>
        <trans-unit id="73dbf9307ea727c571221c71f2cde877ad26415b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Every app requires at least one root NgModule.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;すべてのアプリには、少なくとも1つのルートNgModuleが必要です。</target>
        </trans-unit>
        <trans-unit id="f8912034bee6bd2c5284db5f887a57bef1b8b60e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Follows a consistent convention for the startup logic of an app.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;アプリの起動ロジックの一貫した規則に従います。</target>
        </trans-unit>
        <trans-unit id="b3732e3216913d5a42241b40a6a21935436ea08b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Follows a familiar convention from other technology platforms.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;他のテクノロジープラットフォームの一般的な慣例に従います。</target>
        </trans-unit>
        <trans-unit id="78d7122abd3625d885a97bc3035d8a97f9e45e39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Helps keep the app structure small and easy to maintain in the early stages, while being easy to evolve as the app grows.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;アプリの構造を小さく維持し、初期の段階で維持しやすく、アプリの成長に合わせて簡単に進化できるようにします。</target>
        </trans-unit>
        <trans-unit id="7c687f1cf4f1c9edfdbe38a122d9615679ae98bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Helps reduce the app from becoming cluttered through organizing the content and keeping them aligned with the LIFT guidelines.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンテンツを整理し、それらをLIFTガイドラインに合わせることで、アプリが雑然とするのを減らすのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d4e1d1b6128e0b970c274cc418989255962ba5a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; If you ever need to rename the property or event name associated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, you can modify it in a single place.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; に関連付けられているプロパティまたはイベント名の名前を変更する必要がある場合は、1か所で変更できます。</target>
        </trans-unit>
        <trans-unit id="01e43bec054057c9a473876587798360338549a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; If you ever need to rename the property or event name associated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;, you can modify it in a single place.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;あなたがこれまでに関連付けられているプロパティまたはイベント名を変更する必要がある場合は &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 、あなたは1つの場所でそれを変更することができます。</target>
        </trans-unit>
        <trans-unit id="83dd1bd67fbbdf59da283e43e28d7ae77a9c9c2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; In most editors, syntax hints and code snippets aren't available when developing inline templates and styles. The Angular TypeScript Language Service (forthcoming) promises to overcome this deficiency for HTML templates in those editors that support it; it won't help with CSS styles.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ほとんどのエディターでは、インラインテンプレートとスタイルを開発する場合、構文ヒントとコードスニペットは使用できません。Angular TypeScript言語サービス（近日公開予定）は、HTMLテンプレートをサポートするエディターでのHTMLテンプレートのこの欠陥を克服することを約束します。CSSスタイルには役立ちません。</target>
        </trans-unit>
        <trans-unit id="ee9f32cdb67462e3204ef0425a24a68553bce2fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; It is easier and more readable to identify which properties in a class are inputs or outputs.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;クラスのどのプロパティが入力または出力であるかを識別する方が簡単で読みやすくなっています。</target>
        </trans-unit>
        <trans-unit id="228cd948e79db9c623be535c25f213d3d3422985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; It is easier to recognize that a symbol is a component by looking at the template's html.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テンプレートのhtmlを見ると、シンボルがコンポーネントであることを認識しやすくなります。</target>
        </trans-unit>
        <trans-unit id="79ce411eec9f34adba732b772f52ab1437a5c6df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テンプレートではなくクラスにコンポーネントのプレゼンテーションロジックを保持すると、テスト容易性、保守性、再利用性が向上します。</target>
        </trans-unit>
        <trans-unit id="d93d6d0f23e181ca837ab7816b2c6cdb20cae929" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the component slim, trim, and focused.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントをスリムに、トリムし、集中させます。</target>
        </trans-unit>
        <trans-unit id="c74fd3a0f632cf9983d3fc214a237c481bc302ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the element names consistent with the specification for &lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;Custom Elements&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;要素名を&lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;カスタム要素の&lt;/a&gt;仕様と一致させます。</target>
        </trans-unit>
        <trans-unit id="69b13800ded4a6eb0eb25b17500db5601452451b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ビューにバインドされているディレクティブで定義されているプロパティの名前を、属性名と一致させます。</target>
        </trans-unit>
        <trans-unit id="34b110dd651265ca74b8b4ee5f7e525579d16226" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; LIFT provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. To confirm your intuition about a particular structure, ask: &lt;em&gt;can I quickly open and start work in all of the related files for this feature&lt;/em&gt;?</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;LIFTは、拡張性に優れ、モジュール化された一貫性のある構造を提供し、コードをすばやく見つけることで開発者の効率を向上させます。特定の構造に関する直感を確認するには、次の質問&lt;em&gt;をします&lt;/em&gt;。&lt;em&gt;この機能に関連するすべてのファイルをすばやく開いて作業を開始できます&lt;/em&gt;か？</target>
        </trans-unit>
        <trans-unit id="1a5aca0a18ca16fb031760f494714dfe8bd1ce00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Large, inline templates and styles obscure the component's purpose and implementation, reducing readability and maintainability.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;大きなインラインテンプレートとスタイルは、コンポーネントの目的と実装を不明瞭にし、可読性と保守性を低下させます。</target>
        </trans-unit>
        <trans-unit id="95b9295db45695636c9832d0ca9938ce26b305a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Lifecycle interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ライフサイクルインターフェイスは、型指定されたメソッドシグネチャを規定します。これらのシグネチャを使用して、スペルと構文の間違いを報告します。</target>
        </trans-unit>
        <trans-unit id="da64dc6c75d0a87ea84b1bfbfac899dd0508402a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスのロジックは単体テストでより簡単に分離でき、コンポーネントの呼び出しロジックは簡単にモックできます。</target>
        </trans-unit>
        <trans-unit id="9c2cd1b895fc5ebbfbcffeab1bba27b93162f5fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic may be reused by multiple components when placed within a service and exposed via a function.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ロジックは、サービス内に配置され、関数を介して公開されると、複数のコンポーネントで再利用できます。</target>
        </trans-unit>
        <trans-unit id="7641b0ce40613b8b7c95fc331cc3600ee9efe337" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic will be contained in one place (the component class) instead of being spread in two places.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ロジックは2か所に分散されるのではなく、1か所（コンポーネントクラス）に含まれます。</target>
        </trans-unit>
        <trans-unit id="ac78f5ecc58fb086521b79c28011d6d15366f84d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Makes it easier to locate and identify the root module.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ルートモジュールを見つけて識別するのが容易になります。</target>
        </trans-unit>
        <trans-unit id="c36ddbd1e55599db4b36de94bc8884dcc20080f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Makes it easier to promote and share the component in other apps.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;他のアプリでのコンポーネントの宣伝と共有が簡単になります。</target>
        </trans-unit>
        <trans-unit id="b462dbb835ebea6ff2a4304b884761584cdaaf27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Names of folders and files should clearly convey their intent. For example, &lt;code&gt;app/heroes/hero-list.component.ts&lt;/code&gt; may contain a component that manages a list of heroes.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;フォルダとファイルの名前は、その意図を明確に伝える必要があります。たとえば、 &lt;code&gt;app/heroes/hero-list.component.ts&lt;/code&gt; には、ヒーローのリストを管理するコンポーネントを含めることができます。</target>
        </trans-unit>
        <trans-unit id="2cd26c7cf1e009ca7818e2e37e0cdab8a245cbdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;命名規則は、コンテンツを一目で見つけるための一貫した方法を提供するのに役立ちます。プロジェクト内の一貫性は不可欠です。チームとの一貫性が重要です。会社全体の一貫性は、驚異的な効率を提供します。</target>
        </trans-unit>
        <trans-unit id="a16fe1ecf423c1ef637c0ac4e22c582c55ccd18f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; NgModules make it easier to isolate, test, and reuse features.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;NgModuleを使用すると、機能の分離、テスト、再利用が簡単になります。</target>
        </trans-unit>
        <trans-unit id="a2bdf377dda9552be8d4adff954274c392ffa660" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; NgModules make it easy to lazy load routable features.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;NgModuleを使用すると、ルーティング可能な機能のレイジーロードが簡単になります。</target>
        </trans-unit>
        <trans-unit id="2dbc9a54c009895a704681c4abbe2acae1892ffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; No one wants to search for a file through seven levels of folders. A flat structure is easy to scan.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;7つのレベルのフォルダを介してファイルを検索する必要はありません。平らな構造はスキャンが簡単です。</target>
        </trans-unit>
        <trans-unit id="371af0d588614975ac80631a6277e61df99b795c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; One component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ファイルごとに1つのコンポーネントを使用すると、変数を共有したり、不要なクロージャーを作成したり、依存関係との不要なカップリングを作成したりする可能性があるファイル内のコンポーネントを組み合わせるときによく発生する隠れたバグを回避できます。</target>
        </trans-unit>
        <trans-unit id="23fe6f97cf7b97c5632fad61a075d9813272f3bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; One component per file makes it far easier to read, maintain, and avoid collisions with teams in source control.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ファイルごとに1つのコンポーネントを使用すると、ソース管理でのチームとの衝突の読み取り、保守、回避がはるかに容易になります。</target>
        </trans-unit>
        <trans-unit id="156a49dd95596cb5e1910e49cfb2894d05e2d1f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Placing members in a consistent sequence makes it easy to read and helps instantly identify which members of the component serve which purpose.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;メンバーを一貫した順序で配置すると、読みやすくなり、コンポーネントのどのメンバーがどの目的を果たしているかを即座に識別できます。</target>
        </trans-unit>
        <trans-unit id="dd52dbb328d25e75e5796399f02fe7e4ef7fcc70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Placing the decorator on the same line &lt;em&gt;usually&lt;/em&gt; makes for shorter code and still easily identifies the property as an input or output. Put it on the line above when doing so is clearly more readable.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;デコレータを同じ行に配置すると、&lt;em&gt;通常&lt;/em&gt;はコードが短くなり、プロパティを入力または出力として簡単に識別できます。読みやすくする場合は、上の行に入れてください。</target>
        </trans-unit>
        <trans-unit id="542f040e61234a8393cc2fb46e57220934925568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Prevents element name collisions with components in other apps and with native HTML elements.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;要素名が他のアプリのコンポーネントやネイティブHTML要素と衝突するのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="de9657cd860484482d608521d99bff9845e66793" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Prevents name collisions.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;名前の衝突を防ぎます。</target>
        </trans-unit>
        <trans-unit id="67487e9a7b5cc11689cc116920093851725cd844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference modules.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;モジュールをすばやく識別および参照するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="58422644ad41e1a065831ecac64fd138c67589d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference pipes.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;パイプをすばやく識別および参照するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="374a3fec339150ba2b843eaef8697cd18d692310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference services.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスをすばやく識別および参照するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="2bc680cfe4e4d3c901eb72d30b972fd3ecb5b82e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify end-to-end tests.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;エンドツーエンドのテストをすばやく特定する一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="6b865315fedffc33d1e166f9a0ee0f13e2d4eda7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify tests.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テストを迅速に識別するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="0b4e5eae96ab0e654b4e8d48cd47c3b6355b4593" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides pattern matching for &lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;karma&lt;/a&gt; or other test runners.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;&lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;カルマ&lt;/a&gt;または他のテストランナーのパターンマッチングを提供します。</target>
        </trans-unit>
        <trans-unit id="97c2e3263d2245e56ff1481bf4c0c4a5559d7e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides pattern matching for &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;karma&lt;/a&gt; or other test runners.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;&lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;カルマ&lt;/a&gt;または他のテストランナーにパターンマッチングを提供します。</target>
        </trans-unit>
        <trans-unit id="f5a3f93d744d9f63fd43b9d63144503583c2ce47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides pattern matching for test runners and build automation.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テストランナーとビルドの自動化にパターンマッチングを提供します。</target>
        </trans-unit>
        <trans-unit id="f36b0035ff9bed396c67a5eac59b0adb7b417532" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Removes dependencies and hides implementation details from the component.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;依存関係を削除し、実装の詳細をコンポーネントから隠します。</target>
        </trans-unit>
        <trans-unit id="6bcec3d26a77941dc7b7888da6c96b2adce22833" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Service names such as &lt;code&gt;Credit&lt;/code&gt; are nouns and require a suffix and should be named with a suffix when it is not obvious if it is a service or something else.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;Credit&lt;/code&gt; などのサービス名は名詞であり、サフィックスが必要であり、サービスか何かであるかが明確でない場合は、サフィックスを付けて名前を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="2c59855aa491026a9f90d721af2e37c9574062ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Services are ideal for sharing methods across a feature area or an app.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスは、機能領域またはアプリ全体でメソッドを共有するのに理想的です。</target>
        </trans-unit>
        <trans-unit id="d04fc6329854aa92b9b07981287ddf759c80af40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Services are ideal for sharing stateful in-memory data.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスは、ステートフルなインメモリデータの共有に最適です。</target>
        </trans-unit>
        <trans-unit id="0b0c75eb7454de8ebb65df15b000f0f00ac25b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to maintain.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな機能はメンテナンスが簡単です。</target>
        </trans-unit>
        <trans-unit id="46a37119db45b3abde6d62453aa73a346016d9ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to read.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="8ce7e1b2ea1ce4d48a6d89d7d7258cb05a272dec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to test, especially when they do one thing and serve one purpose.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は、特に1つのことを実行し、1つの目的を果たす場合に、テストが簡単です。</target>
        </trans-unit>
        <trans-unit id="3d5fec2bd249ca55b61637acabe970f213445438" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions help avoid hidden bugs that come with large functions that share variables with external scope, create unwanted closures, or unwanted coupling with dependencies.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は、外部スコープと変数を共有したり、不要なクロージャーを作成したり、依存関係との不要な結合を作成したりする大きな関数に付随する隠れたバグを回避するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d7af862514e2de136fa80a338391a45134a26d69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions promote reuse.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は再利用を促進します。</target>
        </trans-unit>
        <trans-unit id="55fa9a87dc53f6fb8b9cb9c3dbd8b91fa4439d68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Spend less time hunting and pecking for code, and become more efficient. Longer file names are far better than &lt;em&gt;short-but-obscure&lt;/em&gt; abbreviated names.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コードを探したりつまんだりする時間を短縮し、効率を高めます。長いファイル名は、&lt;em&gt;短く&lt;/em&gt;ても&lt;em&gt;あいまいな&lt;/em&gt;省略名よりもはるかに優れています。</target>
        </trans-unit>
        <trans-unit id="bb36cf42c22a06710f9daa2f5cb57ef4f882393d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;./&lt;/code&gt; prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;./&lt;/code&gt; プレフィックスは、相対URLの標準構文です。その接頭辞なしで行うAngularの現在の能力に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="6e9d2faf7d97e3162943dd7bd177c19da377b99c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata is only one term to remember and doesn't require extra ES imports.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; メタデータは、覚えておくべき唯一の用語であり、余分なESの輸入を必要としません。</target>
        </trans-unit>
        <trans-unit id="1f445da70362099b28e9ac7081a4264fc9eaa34e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;host&lt;/code&gt; metadata is only one term to remember and doesn't require extra ES imports.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;host&lt;/code&gt; メタデータは、覚えておくべき唯一の用語であり、余分なESの輸入を必要としません。</target>
        </trans-unit>
        <trans-unit id="b07e3f7e9bf20cfdb5fcc4963ca7e2dedc827101" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular Dependency Injection (DI) mechanism resolves a service's own dependencies based on the declared types of that service's constructor parameters.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angular Dependency Injection（DI）メカニズムは、サービスのコンストラクターパラメーターの宣言された型に基づいて、サービス自体の依存関係を解決します。</target>
        </trans-unit>
        <trans-unit id="9d2d736f1803c3ddb836cd66dcd10849e6f778d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular HTML parser is case sensitive and recognizes lower camel case.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angular HTMLパーサーは大文字と小文字を区別し、ラクダの小文字を認識します。</target>
        </trans-unit>
        <trans-unit id="278ee06b3b41700c164528c6006a02f08e4b912d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular injector is hierarchical.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angularインジェクターは階層的です。</target>
        </trans-unit>
        <trans-unit id="fb4e3183de0370836d208f02797380c826ae8617" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The LIFT guidelines are all covered.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;リフトのガイドラインはすべてカバーされています。</target>
        </trans-unit>
        <trans-unit id="fe9e050bab86c1ffbd191b1a30d210718a5292ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントの責任は、ビューのプレゼンテーションと情報収集です。データを取得する方法を気にする必要はありません。データを要求するユーザーを知っているだけです。データサービスを分離すると、それをデータサービスに取得する方法のロジックが移動し、コンポーネントをより簡単に、ビューに集中させることができます。</target>
        </trans-unit>
        <trans-unit id="a614e3f562640e92be2a71f4d9cfee595dbf229a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The details of data management, such as headers, HTTP methods, caching, error handling, and retry logic, are irrelevant to components and other data consumers.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ヘッダー、HTTPメソッド、キャッシング、エラー処理、再試行ロジックなどのデータ管理の詳細は、コンポーネントや他のデータコンシューマーには関係ありません。</target>
        </trans-unit>
        <trans-unit id="5ac4546d94ce9e713dceaf33efc111a345050f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The folder makes it easy to identify and isolate the feature content.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;このフォルダーを使用すると、機能のコンテンツを簡単に識別して分離できます。</target>
        </trans-unit>
        <trans-unit id="bbf594ac0333396e41fcd880058df192f3ece2a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The metadata declaration attached to the directive is shorter and thus more readable.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ディレクティブに添付されているメタデータ宣言は短く、読みやすくなっています。</target>
        </trans-unit>
        <trans-unit id="d399c257c9692973faee7e2443a4fdaebb5be4fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The naming conventions should simply help find desired code faster and make it easier to understand.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;命名規則は、必要なコードをより速く見つけ、理解しやすくするために役立つはずです。</target>
        </trans-unit>
        <trans-unit id="9023567514f1a5c8648f2d14c2036fa7d2b1cfbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The property associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; or the method associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; can be modified only in a single place&amp;mdash;in the directive's class. If you use the &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata property, you must modify both the property/method declaration in the directive's class and the metadata in the decorator associated with the directive.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; 関連付けられているプロパティまたは &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 関連付けられているメソッドは、1つの場所（ディレクティブのクラス）でのみ変更できます。 &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; メタデータプロパティを使用する場合は、ディレクティブのクラスのプロパティ/メソッド宣言と、ディレクティブに関連付けられたデコレータのメタデータの両方を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="a667206faeaec98c4af583965926e0494fbfc683" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The property associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; or the method associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; can be modified only in a single place&amp;mdash;in the directive's class. If you use the &lt;code&gt;host&lt;/code&gt; metadata property, you must modify both the property/method declaration in the directive's class and the metadata in the decorator associated with the directive.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;関連付けられたプロパティ &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; または関連付けられたメソッド &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 、単一の場所-でディレクティブのクラスに変更することができます。 &lt;code&gt;host&lt;/code&gt; メタデータプロパティを使用する場合は、ディレクティブのクラスのプロパティ/メソッド宣言と、ディレクティブに関連付けられたデコレータのメタデータの両方を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="f040d63ae1b831a345a8a815f6e19f07b2eb4d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This is consistent with built-in events such as button clicks.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;これは、ボタンのクリックなどの組み込みイベントと一致しています。</target>
        </trans-unit>
        <trans-unit id="0c7fe70cd15a7e29c72a0498423580cfdc75ea61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;2つの異なるコンポーネントがサービスの異なるインスタンスを必要とする場合、これは理想的ではありません。このシナリオでは、新しい個別のインスタンスを必要とするコンポーネントレベルでサービスを提供する方が適切です。</target>
        </trans-unit>
        <trans-unit id="a7340e0f3575e2046047131f4cb62ee616e9870e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This makes it easier to test (mock or real) the data calls when testing a component that uses a data service.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;これにより、データサービスを使用するコンポーネントをテストするときに、データコールのテスト（モックまたは実際）が容易になります。</target>
        </trans-unit>
        <trans-unit id="5292b998c4720c145931663c9f0afcdab144934a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; To work efficiently you must be able to find files quickly, especially when you do not know (or do not remember) the file &lt;em&gt;names&lt;/em&gt;. Keeping related files near each other in an intuitive location saves time. A descriptive folder structure makes a world of difference to you and the people who come after you.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;効率的に作業するには、特にファイル&lt;em&gt;名が&lt;/em&gt;わからない（または覚えていない）場合に、ファイルをすばやく検索できる必要があります。関連ファイルを直感的な場所で互いに近くに置くことで、時間を節約できます。説明的なフォルダ構造は、あなたとあなたの後を追う人々に世界の違いをもたらします。</target>
        </trans-unit>
        <trans-unit id="c04e4c59fda45f1e4aa5dc5f007017f9fd5b3322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Two names for the same property (one private, one public) is inherently confusing.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;同じプロパティの2つの名前（1つはプライベート、もう1つはパブリック）は本質的に混乱します。</target>
        </trans-unit>
        <trans-unit id="8104706a9f913d8ffb73065297d4460e3560d09b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names make it easy to find a specific file type using an editor or IDE's fuzzy search techniques.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;タイプ名を使用すると、エディターまたはIDEのあいまい検索手法を使用して、特定のファイルタイプを簡単に見つけることができます。</target>
        </trans-unit>
        <trans-unit id="614a4b4cb7643480df4076413389b81e1bf2f0bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names provide a consistent way to quickly identify what is in the file.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;タイプ名は、ファイルの内容をすばやく識別するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="dca7d2e6018c2f33185a5723145d3f45ecb49ccd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names provide pattern matching for any automated tasks.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;タイプ名は、自動タスクのパターンマッチングを提供します。</target>
        </trans-unit>
        <trans-unit id="5cf32259a6a149b346e42dfc65131b05d787fcf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Unabbreviated type names such as &lt;code&gt;.service&lt;/code&gt; are descriptive and unambiguous. Abbreviations such as &lt;code&gt;.srv&lt;/code&gt;, &lt;code&gt;.svc&lt;/code&gt;, and &lt;code&gt;.serv&lt;/code&gt; can be confusing.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;.serviceなどの &lt;code&gt;.service&lt;/code&gt; ていない型名は説明的で明確です。以下のような略語 &lt;code&gt;.srv&lt;/code&gt; 、 &lt;code&gt;.svc&lt;/code&gt; 、および &lt;code&gt;.serv&lt;/code&gt; が混乱することができます。</target>
        </trans-unit>
        <trans-unit id="cb98cc6d7953db2a6009be749552767d8a34910d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Upper camel case is conventional for identifying objects that can be instantiated using a constructor.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;キャメル大文字は、コンストラクターを使用してインスタンス化できるオブジェクトを識別するための従来型です。</target>
        </trans-unit>
        <trans-unit id="ad71d03bcb082d586eb4ec09e191fbb81ef4784d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service accepts only dependencies associated with type tokens, the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; syntax is much less verbose compared to using &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; on each individual constructor parameter.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスがタイプトークンに関連付けられた依存関係のみを受け入れる場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 構文は、個々のコンストラクターパラメーターごとに &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; を使用する場合に比べてはるかに簡潔になります。</target>
        </trans-unit>
        <trans-unit id="1e291754420a43c44695cd0d87edc4386d63facb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service has multiple responsibilities, every component or service that injects it now carries the weight of them all.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスに複数の責任がある場合、それを注入するすべてのコンポーネントまたはサービスは、それらすべての重みを担います。</target>
        </trans-unit>
        <trans-unit id="ecd61cbc612d48036b3203a7fcee069dd63437fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service has multiple responsibilities, it becomes difficult to test.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスに複数の責任がある場合、テストが困難になります。</target>
        </trans-unit>
        <trans-unit id="94a43d926c75940db64f94d3a768021df0616f72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When there are a lot of files, for example 10+, locating them is easier with a consistent folder structure and more difficult in a flat structure.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;多くのファイル（10以上など）がある場合は、一貫したフォルダー構造を使用するとファイルの検索が簡単になり、フラット構造ではファイルの検索が難しくなります。</target>
        </trans-unit>
        <trans-unit id="cc10eddeefb95f7a75a29a1a0d67027dc62f15bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When you provide the service to a root injector, that instance of the service is shared and available in every class that needs the service. This is ideal when a service is sharing methods or state.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ルートインジェクターにサービスを提供すると、そのサービスのインスタンスが共有され、サービスを必要とするすべてのクラスで利用できます。これは、サービスがメソッドまたは状態を共有している場合に理想的です。</target>
        </trans-unit>
        <trans-unit id="03ef8461d4efc0093bb002ee20959403d2fd5f5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When you register a service in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator of the service, optimization tools such as those used by the &lt;a href=&quot;cli&quot;&gt;Angular CLI's&lt;/a&gt; production builds can perform tree shaking and remove services that aren't used by your app.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; デコレーターにサービスを登録すると、&lt;a href=&quot;cli&quot;&gt;Angular CLIの&lt;/a&gt;本番環境ビルドで使用されるツールなどの最適化ツールがツリーの揺れを実行し、アプリで使用されていないサービスを削除できます。</target>
        </trans-unit>
        <trans-unit id="8a7c2b004c7ea14b9e097036f546c90cef37a5b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; You don't want each module to have its own separate instance of singleton services. Yet there is a real danger of that happening if the &lt;code&gt;SharedModule&lt;/code&gt; provides a service.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;各モジュールがシングルトンサービスの独自の個別のインスタンスを持つことは望ましくありません。しかし、 &lt;code&gt;SharedModule&lt;/code&gt; がサービスを提供する場合、それが実際に発生する危険があります。</target>
        </trans-unit>
        <trans-unit id="16bf87abbd424a3fed90100dce9703f5bc6cce6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; You should use an alias when the directive name is also an &lt;em&gt;input&lt;/em&gt; property, and the directive name doesn't describe the property.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ディレクティブ名も&lt;em&gt;入力&lt;/em&gt;プロパティであり、ディレクティブ名がプロパティを説明していない場合は、エイリアスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dfdef4b3079947025cd8bddf4f6530b08c1865b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; gives reasons for following the previous recommendations.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;以前の推奨事項に従う理由を示します。</target>
        </trans-unit>
        <trans-unit id="024123ca4b271ded41b1bae659b4fd92d8c26c8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt;&lt;code&gt;SharedModule&lt;/code&gt; exists to make commonly used components, directives and pipes available for use in the templates of components in many other modules.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;SharedModule&lt;/code&gt; は、一般的に使用されるコンポーネント、ディレクティブ、およびパイプを他の多くのモジュールのコンポーネントのテンプレートで使用できるようにするために存在します。</target>
        </trans-unit>
        <trans-unit id="e3678c7a0e748230934da9dd34b2e9b1dba606fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt;&lt;code&gt;SharedModule&lt;/code&gt; will contain components, directives and pipes that may need features from another common module; for example, &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;SharedModule&lt;/code&gt; には、別の共通モジュールの機能が必要になる可能性のあるコンポーネント、ディレクティブ、およびパイプが含まれます。例えば、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edb03112c51a4e11663ac3d5630e6b8865cb57e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Work within the context&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コンテキスト内で作業する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d8bf39083c5b8bd86f45a0335e844a8767d8843" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing style:&lt;/strong&gt; Word usage, grammar, capitalization, and punctuation. Adherence to Angular's writing guidelines ensures a consistent &quot;voice&quot;, helps ensure accuracy of the information, and facilitates use world-wide, by audiences with different backgrounds.</source>
          <target state="translated">&lt;strong&gt;ライティングスタイル：&lt;/strong&gt;単語の用法、文法、大文字、句読点。Angularのライティングガイドラインを順守することで、一貫した「声」が保証され、情報の正確性が保証され、さまざまな背景を持つ対象者による世界中での使用が容易になります。</target>
        </trans-unit>
        <trans-unit id="c22269fbbd3c4560d644e04e27c3fafe3a3ed683" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing style&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;文体&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c4286b19db97cef175c9a3173bfe836d4c98f6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can run the live example to see the complete reactive and template-driven example code.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ライブサンプルを実行して、完全な反応型でテンプレート駆動のサンプルコードを確認できます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47490898496c18c307d4ad5836bfe7ec31a36994" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You don't need to do anything to get &lt;em&gt;typings&lt;/em&gt; files for library packages that include &lt;code&gt;d.ts&lt;/code&gt; files. Angular packages include them already.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;あなたが得るために何かをする必要はありません&lt;em&gt;タイピングを&lt;/em&gt;含めるライブラリパッケージのファイル &lt;code&gt;d.ts&lt;/code&gt; のファイルを。Angularパッケージにはすでに含まれています。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7418ad94c4f5bffad199aa1037f6c20189206d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[(ngModel)]&lt;/strong&gt; is Angular's two-way data binding syntax.</source>
          <target state="translated">&lt;strong&gt;[（ngModel）]&lt;/strong&gt;は、Angularの双方向データバインディング構文です。</target>
        </trans-unit>
        <trans-unit id="2afaee467316580fca44222d6c9a7bbb351fd9ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array&lt;/strong&gt;: commands to pass to &lt;a href=&quot;router#createUrlTree&quot;&gt;Router#createUrlTree&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;array&lt;/strong&gt;：&lt;a href=&quot;router#createUrlTree&quot;&gt;Router＃createUrlTree&lt;/a&gt;に渡すコマンド。</target>
        </trans-unit>
        <trans-unit id="3fe1d3b73ec04a4f495bb01dc96b64677028d061" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;codelyzer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;codelyzer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80bda6ac72accbc1ca9816b620a3e9a6b118354f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;descendants&lt;/strong&gt; - True to include all descendants, otherwise include only direct children.</source>
          <target state="translated">&lt;strong&gt;子孫&lt;/strong&gt; -すべての子孫を含める場合はTrue、それ以外の場合は直接の子のみを含めます。</target>
        </trans-unit>
        <trans-unit id="adfdf22704311e6c562267346f98f332e0460601" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jasmine/... &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jasmine/... &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6371ee47035798a336b02cb24af48b8e42ede972" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;karma/... &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;karma/... &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7dd51ac3e89fdd6ac4f8af36c97748d2fc75ca6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt;: An alternative to setting the name attribute on the form control element. See the &lt;a href=&quot;ngmodel#using-ngmodel-on-a-standalone-control&quot;&gt;example&lt;/a&gt; for using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; as a standalone control.</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt;：フォームコントロール要素にname属性を設定する代わりの方法。 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; をスタンドアロンコントロールとして使用する&lt;a href=&quot;ngmodel#using-ngmodel-on-a-standalone-control&quot;&gt;例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9cb0a27ab2f16df5a1ff706cb37064ebce7953b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngFor&lt;/strong&gt; to display an array of items.</source>
          <target state="translated">&lt;strong&gt;ngFor&lt;/strong&gt;は、項目の配列を表示します。</target>
        </trans-unit>
        <trans-unit id="0ed64020b10c2028c643bac6c9fcbe35dc5bbabe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngIf&lt;/strong&gt; to conditionally display a chunk of HTML based on a boolean expression.</source>
          <target state="translated">&lt;strong&gt;ngIf&lt;/strong&gt;は、ブール式に基づいてHTMLのチャンクを条件付きで表示します。</target>
        </trans-unit>
        <trans-unit id="47382f2af3d2086517884d17290a4ba36eef83d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;npm dependencies:&lt;/strong&gt; We only make npm dependency updates that require changes to your apps in a major release. In minor releases, we update peer dependencies by expanding the supported versions, but we do not require projects to update these dependencies until a future major version. This means that during minor Angular releases, npm dependency updates within Angular applications and libraries are optional.</source>
          <target state="translated">&lt;strong&gt;npm依存関係：&lt;/strong&gt;メジャーリリースでは、アプリの変更が必要なnpm依存関係の更新のみを行います。マイナーリリースでは、サポートされているバージョンを拡張することにより、ピアの依存関係を更新しますが、将来のメジャーバージョンまでこれらの依存関係を更新するプロジェクトは必要ありません。つまり、Angularのマイナーリリースでは、Angularアプリケーションおよびライブラリ内のnpm依存関係の更新はオプションです。</target>
        </trans-unit>
        <trans-unit id="9f4c2d24b84bdce99f65869481cd20d948674c11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;npm package manager&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;npmパッケージマネージャー&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce0e911bd264afd68ea6095551b4e21a892593e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;null|undefined&lt;/strong&gt;: shorthand for an empty array of commands, i.e. &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;null | undefined&lt;/strong&gt;：コマンドの空の配列の省略形。つまり &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff81369876b9ff0fac39c86e3a98661d021aa73d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;protractor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;protractor&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cc4a187d86b8d960c2f4e934b7227d8c93b309e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - True to read a different token from the queried element.</source>
          <target state="translated">&lt;strong&gt;読み&lt;/strong&gt; -真の照会元素とは異なるトークンを読み取ること。</target>
        </trans-unit>
        <trans-unit id="30f9789d7f7887863149267a695a35393566e015" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - True to read a different token from the queried elements.</source>
          <target state="translated">&lt;strong&gt;読み&lt;/strong&gt; -真の照会要素は異なるトークンを読み取ること。</target>
        </trans-unit>
        <trans-unit id="9ca49cd5f5b70e9842596d3bca4fe1a47fee29c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - Used to read a different token from the queried element.</source>
          <target state="translated">&lt;strong&gt;読み&lt;/strong&gt;-照会元素とは異なるトークンを読み取るために使用されます。</target>
        </trans-unit>
        <trans-unit id="c549da8e043f83296dbc7cc92177e79519e1ad06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - Used to read a different token from the queried elements.</source>
          <target state="translated">&lt;strong&gt;読み&lt;/strong&gt;-照会の要素は異なるトークンを読み取るために使用されます。</target>
        </trans-unit>
        <trans-unit id="3be4c5497047480cc31393214ff3fbaf9f97818b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rxjs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;rxjs&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cb9d62b286f1e1937e2bbe02bd344681dc505e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;selector&lt;/strong&gt; - The directive type or the name used for querying.</source>
          <target state="translated">&lt;strong&gt;selector-&lt;/strong&gt;照会に使用されるディレクティブのタイプまたは名前。</target>
        </trans-unit>
        <trans-unit id="2d2f1fa325329675cba484c31321fb49a3aa1e9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;standalone&lt;/strong&gt;: When set to true, the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; will not register itself with its parent form, and acts as if it's not in the form. Defaults to false.</source>
          <target state="translated">&lt;strong&gt;standalone&lt;/strong&gt;：trueに設定されている場合、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; は自身をその親フォームに登録せず、フォームにないかのように動作します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="a659df3e0e18d400f5f1c9f0a685914845e1d1a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;standalone&lt;/strong&gt;: When set to true, the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; will not register itself with its parent form, and acts as if it's not in the form. Defaults to false. If no parent form exists, this option has no effect.</source>
          <target state="translated">&lt;strong&gt;スタンドアロン&lt;/strong&gt;：trueに設定すると、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; はそれ自体を親フォームに登録せず、フォームにないかのように動作します。デフォルトはfalseです。親フォームが存在しない場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="4377d50a201b9ca0ce8477872ea95c93e7314fe2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs</source>
          <target state="translated">&lt;strong&gt;static&lt;/strong&gt; -Trueは、変更検出が実行される前にクエリ結果を解決します</target>
        </trans-unit>
        <trans-unit id="ce06789f34cd111eacc6b321891b8144637e910d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs, false to resolve after change detection.</source>
          <target state="translated">&lt;strong&gt;static-&lt;/strong&gt;変更検出の実行前にクエリ結果を解決する場合はtrue、変更検出後に解決する場合はfalse。</target>
        </trans-unit>
        <trans-unit id="619c3e133b38c94fdf0071c363b8bee4c567c017" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs, false to resolve after change detection. Defaults to false.</source>
          <target state="translated">&lt;strong&gt;static-&lt;/strong&gt;変更検出が実行される前にクエリ結果を解決する場合はtrue、変更検出後に解決する場合はfalse。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="d5ed2d9ffc606a64df4f76c12e4c4f42ba0084a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;string&lt;/strong&gt;: shorthand for array of commands with just the string, i.e. &lt;code&gt;['/route']&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;文字列&lt;/strong&gt;：&lt;strong&gt;文字列&lt;/strong&gt;のみを含むコマンドの配列の省略形、つまり &lt;code&gt;['/route']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cf58d8bc4b5e24796ad859418cc2e60410160e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ts-node&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ts-node&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="252774e7da4ec3009c5f69ee513c9ab756bb91dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tslint&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tslint&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1fef399d9497a91dc61d25242d9621caf49e787" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;typescript&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;typescript&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6eac670ecd612eee291a7dc157fa6ca7b87c4a1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;updateOn&lt;/strong&gt;: Defines the event upon which the form control value and validity update. Defaults to 'change'. Possible values: &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;updateOn&lt;/strong&gt;：フォームコントロールの値と有効性が更新されるイベントを定義します。デフォルトは「変更」です。可能な値： &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f60e9ce82796fa904cd1cb51da24e3c3b5672849" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;updateOn&lt;/strong&gt;: Sets the default &lt;code&gt;updateOn&lt;/code&gt; value for all child &lt;code&gt;NgModels&lt;/code&gt; below it unless explicitly set by a child &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;ngModelOptions&lt;/code&gt;). Defaults to 'change'. Possible values: &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;updateOn&lt;/strong&gt;：デフォルト設定 &lt;code&gt;updateOn&lt;/code&gt; のすべての子の値 &lt;code&gt;NgModels&lt;/code&gt; 明示的に子で設定されていない限り、その下を &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 使用 &lt;code&gt;ngModelOptions&lt;/code&gt; を）。デフォルトは「変更」です。可能な値： &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eec75c43bf8e37fc0ef1b526f50f7ad95fab9da4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;zone.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;zone.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec143633e8d3b8f2a394a46e89f29ce13e3c7418" translate="yes" xml:space="preserve">
          <source>=0 (or any other number)</source>
          <target state="translated">= 0（またはその他の数値）</target>
        </trans-unit>
        <trans-unit id="f9a4761705689f5ac6b5ce45f553fd1667ad66c3" translate="yes" xml:space="preserve">
          <source>@angular-devkit/build-angular</source>
          <target state="translated">@angular-devkit/build-angular</target>
        </trans-unit>
        <trans-unit id="d0db3c16323ae567a43bd22a4e5c5863dbeba52e" translate="yes" xml:space="preserve">
          <source>@angular/animations</source>
          <target state="translated">@angular/animations</target>
        </trans-unit>
        <trans-unit id="a2394e88013e9804af09d9f4e105d293570226f5" translate="yes" xml:space="preserve">
          <source>@angular/animations/browser</source>
          <target state="translated">@angular/animations/browser</target>
        </trans-unit>
        <trans-unit id="9de55435d30ad98c6faf865f81f9182847e85786" translate="yes" xml:space="preserve">
          <source>@angular/animations/browser/testing</source>
          <target state="translated">@angular/animations/browser/testing</target>
        </trans-unit>
        <trans-unit id="279ff4d8c49a936d48c1a77f46101304c9937d57" translate="yes" xml:space="preserve">
          <source>@angular/common</source>
          <target state="translated">@angular/common</target>
        </trans-unit>
        <trans-unit id="35f25f67f51ac375c4414d902cd89df76b82b645" translate="yes" xml:space="preserve">
          <source>@angular/common/http</source>
          <target state="translated">@angular/common/http</target>
        </trans-unit>
        <trans-unit id="47f28773359d75fd992705276203e7d02f2b769c" translate="yes" xml:space="preserve">
          <source>@angular/common/http/testing</source>
          <target state="translated">@angular/common/http/testing</target>
        </trans-unit>
        <trans-unit id="3b355a74fcf516cb572de7a18d614db5303b78d7" translate="yes" xml:space="preserve">
          <source>@angular/common/testing</source>
          <target state="translated">@angular/common/testing</target>
        </trans-unit>
        <trans-unit id="7bea4c6cce38c2240da9a825337a1a9abcabfd01" translate="yes" xml:space="preserve">
          <source>@angular/common/upgrade</source>
          <target state="translated">@angular/common/upgrade</target>
        </trans-unit>
        <trans-unit id="7010d397973168cac1aaf54fc8228b617d553f9c" translate="yes" xml:space="preserve">
          <source>@angular/core</source>
          <target state="translated">@angular/core</target>
        </trans-unit>
        <trans-unit id="39bfc8055174be719b0e02e58c06f5e4b1620ba9" translate="yes" xml:space="preserve">
          <source>@angular/core/global</source>
          <target state="translated">@angular/core/global</target>
        </trans-unit>
        <trans-unit id="9bd54b448bd160b9bdf56afcc4057d60c863c351" translate="yes" xml:space="preserve">
          <source>@angular/core/testing</source>
          <target state="translated">@angular/core/testing</target>
        </trans-unit>
        <trans-unit id="ed082ffeab17b92963b8e0373f3af558b0f94176" translate="yes" xml:space="preserve">
          <source>@angular/elements</source>
          <target state="translated">@angular/elements</target>
        </trans-unit>
        <trans-unit id="61015e41645b01550c86b2d125f2df9790ce7401" translate="yes" xml:space="preserve">
          <source>@angular/forms</source>
          <target state="translated">@angular/forms</target>
        </trans-unit>
        <trans-unit id="e26f7552c4a1f57a5df62b630b09631ff0e15c6f" translate="yes" xml:space="preserve">
          <source>@angular/http</source>
          <target state="translated">@angular/http</target>
        </trans-unit>
        <trans-unit id="e5d1b49b65dd984864e1410b698461c7d36bda5e" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser</source>
          <target state="translated">@angular/platform-browser</target>
        </trans-unit>
        <trans-unit id="10e672eabc8358c20a1b99d0ae0d31870a79f19b" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser-dynamic</source>
          <target state="translated">@angular/platform-browser-dynamic</target>
        </trans-unit>
        <trans-unit id="6b0aa1ede02b7a3f684f0fe214d166f170c82f71" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser-dynamic/testing</source>
          <target state="translated">@angular/platform-browser-dynamic/testing</target>
        </trans-unit>
        <trans-unit id="2e11f0488a229e528fb4158f7aad4f7a6b2e6b25" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser/animations</source>
          <target state="translated">@angular/platform-browser/animations</target>
        </trans-unit>
        <trans-unit id="9e90112b14f3f9d7405ff5bbf5ac41f6fad23e16" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser/testing</source>
          <target state="translated">@angular/platform-browser/testing</target>
        </trans-unit>
        <trans-unit id="8527c36725a4add493230fab1d1ad63c30bb0603" translate="yes" xml:space="preserve">
          <source>@angular/platform-server</source>
          <target state="translated">@angular/platform-server</target>
        </trans-unit>
        <trans-unit id="410b9a42af4eeb82d92a052802bd26cc2f266e61" translate="yes" xml:space="preserve">
          <source>@angular/platform-server/testing</source>
          <target state="translated">@angular/platform-server/testing</target>
        </trans-unit>
        <trans-unit id="67f37ebc89fe2f40791a45ff79cc707894e40668" translate="yes" xml:space="preserve">
          <source>@angular/platform-webworker</source>
          <target state="translated">@angular/platform-webworker</target>
        </trans-unit>
        <trans-unit id="3643488d6d67c98970cbaf515cefbc9d56955a51" translate="yes" xml:space="preserve">
          <source>@angular/platform-webworker-dynamic</source>
          <target state="translated">@angular/platform-webworker-dynamic</target>
        </trans-unit>
        <trans-unit id="fc052c7d8c63d918f895798a4e19da09a87ad784" translate="yes" xml:space="preserve">
          <source>@angular/router</source>
          <target state="translated">@angular/router</target>
        </trans-unit>
        <trans-unit id="ab028ed01d9416a9fdc050529d3c99ec7d1e802e" translate="yes" xml:space="preserve">
          <source>@angular/router/testing</source>
          <target state="translated">@angular/router/testing</target>
        </trans-unit>
        <trans-unit id="a58e96f1bd36053d73916cb9200cae8facf5140e" translate="yes" xml:space="preserve">
          <source>@angular/router/upgrade</source>
          <target state="translated">@angular/router/upgrade</target>
        </trans-unit>
        <trans-unit id="9228aadf92cf122517fe58f2a91bd6ac28ad425e" translate="yes" xml:space="preserve">
          <source>@angular/service-worker</source>
          <target state="translated">@angular/service-worker</target>
        </trans-unit>
        <trans-unit id="d928864368b17a18265aaba4fdd5747c5ed71c42" translate="yes" xml:space="preserve">
          <source>@angular/upgrade</source>
          <target state="translated">@angular/upgrade</target>
        </trans-unit>
        <trans-unit id="81cf614360a6dce81230ded3f9d85bf8b6d75f48" translate="yes" xml:space="preserve">
          <source>@angular/upgrade/static</source>
          <target state="translated">@angular/upgrade/static</target>
        </trans-unit>
        <trans-unit id="2a3f18aae18753215405f0611d509473191a373f" translate="yes" xml:space="preserve">
          <source>@angular/upgrade/static/testing</source>
          <target state="translated">@angular/upgrade/static/testing</target>
        </trans-unit>
        <trans-unit id="e1f602c3db3647dc32a679dfdcfd6983aef7679b" translate="yes" xml:space="preserve">
          <source>@ngtools/webpack</source>
          <target state="translated">@ngtools/webpack</target>
        </trans-unit>
        <trans-unit id="5b23476195b1b525dc9af48da50385b5d8eb8dd2" translate="yes" xml:space="preserve">
          <source>@schematics/angular</source>
          <target state="translated">@schematics/angular</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="8bd005966c8583098ae25649268c453cb17489f3" translate="yes" xml:space="preserve">
          <source>A &quot;form submit&quot; is useless at the moment. To make it useful, bind the form's &lt;code&gt;ngSubmit&lt;/code&gt; event property to the hero form component's &lt;code&gt;onSubmit()&lt;/code&gt; method:</source>
          <target state="translated">「フォーム送信」は現時点では役に立ちません。これを便利にするには、フォームの &lt;code&gt;ngSubmit&lt;/code&gt; イベントプロパティをヒーローフォームコンポーネントの &lt;code&gt;onSubmit()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="65b987ca9a8742f1c3934c570876582add56deb6" translate="yes" xml:space="preserve">
          <source>A 0-based offset into the duration, in milliseconds.</source>
          <target state="translated">0ベースのオフセットをミリ秒単位でデュレーションに設定します。</target>
        </trans-unit>
        <trans-unit id="3665e1219b8b49a9a2f30755680374e3a4f069d1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; representing a unique string ID, used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;トークンDI&lt;/a&gt;一意の文字列IDを表すには、主に、ときに、アプリケーションの属性とCSSスタイルを前に付けるために使用さ&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulatedが&lt;/a&gt;使用されています。</target>
        </trans-unit>
        <trans-unit id="08724458362287c4dc27bb2e1240bedf41b5b53d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that indicates the root directory of the application</source>
          <target state="translated">A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;アプリケーションのルートディレクトリを示します</target>
        </trans-unit>
        <trans-unit id="1c42ab4a14101ed0dec6b884f9b19a1aa0652ede" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that maps to the dependency to be injected.</source>
          <target state="translated">A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;を注入するために、依存関係にマップされます。</target>
        </trans-unit>
        <trans-unit id="1bb62952d2aea1dd906af4604765f4b5473daf34" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that provides a set of callbacks to be called for every component that is bootstrapped.</source>
          <target state="translated">A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;ブートストラップされるすべてのコンポーネントに呼び出されるコールバックのセットを提供します。</target>
        </trans-unit>
        <trans-unit id="21e39378e8c575c88f71f6fb04c69ba604876653" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that you can use to provide one or more initialization functions.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DIは、トークン&lt;/a&gt;は、1つ以上の初期化機能を提供するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="c369980a900e3de5edbe23891b4c94301d43b1bc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router initializer that is called after the app is bootstrapped.</source>
          <target state="translated">A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;アプリがブートストラップされた後に呼び出される初期化子ルータの。</target>
        </trans-unit>
        <trans-unit id="84633910c748bad002ece66ced0127dfa10f310e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router service.</source>
          <target state="translated">A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;ルーターサービスのため。</target>
        </trans-unit>
        <trans-unit id="05cbce62175736deed161b23149e79909f9ee6aa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/structural-directives&quot;&gt;structural directive&lt;/a&gt; that renders a template for each item in a collection. The directive is placed on an element, which becomes the parent of the cloned templates.</source>
          <target state="translated">&lt;a href=&quot;../../guide/structural-directives&quot;&gt;構造ディレクティブ&lt;/a&gt;コレクション内の各項目のテンプレートをレンダリングします。ディレクティブは、クローンされたテンプレートの親になる要素に配置されます。</target>
        </trans-unit>
        <trans-unit id="bfa958f8e1093a8bce449e50451aecb42605adbf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;shorthand form&lt;/a&gt; of the directive, &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;condition&quot;&lt;/code&gt;, is generally used, provided as an attribute of the anchor element for the inserted template. Angular expands this into a more explicit version, in which the anchor element is contained in an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;速記形態&lt;/a&gt;指令のは、 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;condition&quot;&lt;/code&gt; 、一般挿入テンプレートのアンカー要素の属性として設けられ、使用されています。Angularはこれをより明確なバージョンに拡張し、アンカー要素は &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素に含まれています。</target>
        </trans-unit>
        <trans-unit id="c2a4d7b8c6a75b1c2ee19017270778a56eb5735c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; representing a unique string ID, used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;トークンDI&lt;/a&gt;一意の文字列IDを表すには、主に、ときに、アプリケーションの属性とCSSスタイルを前に付けるために使用さ&lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulatedが&lt;/a&gt;使用されています。</target>
        </trans-unit>
        <trans-unit id="1ebe84913a73fedea27bbf98b338d7abb64f79f1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that indicates the root directory of the application</source>
          <target state="translated">A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;アプリケーションのルートディレクトリを示します</target>
        </trans-unit>
        <trans-unit id="4b90691e5e8983b526b5473fd1988721a7c28b33" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that provides a set of callbacks to be called for every component that is bootstrapped.</source>
          <target state="translated">A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;ブートストラップされるすべてのコンポーネントに呼び出されるコールバックのセットを提供します。</target>
        </trans-unit>
        <trans-unit id="a38ba3385eab59d8b4bf0af53d8d55cce6490a4e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; that you can use to provide one or more initialization functions.</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DIは、トークン&lt;/a&gt;は、1つ以上の初期化機能を提供するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="7af8b7462c7bffa9c6b00d7e9a922cb942a24b41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router initializer that is called after the app is bootstrapped.</source>
          <target state="translated">A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;アプリがブートストラップされた後に呼び出される初期化子ルータの。</target>
        </trans-unit>
        <trans-unit id="2167e95d783d64dac9a3583e6f8be0cb7693f606" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router service.</source>
          <target state="translated">A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;ルーターサービスのため。</target>
        </trans-unit>
        <trans-unit id="671a4596a4f24339272ddfe627b37cb5ceee98f4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/structural-directives&quot;&gt;structural directive&lt;/a&gt; that renders a template for each item in a collection. The directive is placed on an element, which becomes the parent of the cloned templates.</source>
          <target state="translated">&lt;a href=&quot;../guide/structural-directives&quot;&gt;構造ディレクティブ&lt;/a&gt;コレクション内の各項目のテンプレートをレンダリングします。ディレクティブは、クローンされたテンプレートの親になる要素に配置されます。</target>
        </trans-unit>
        <trans-unit id="28d80578ea8ec69937675a545d7c84d8b53020fb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;common/locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;hash fragment&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;common/locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;ハッシュフラグメント&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="e86265c3cf6b32ff2fd9442d3886514cc4425a3f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;common/locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;path&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;common/locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;パス&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="4f6bad214ea94988f7a6681376ce3f9893d5acbc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; class and its associated &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt; define a view. A view is specifically represented by a &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; instance associated with a component. A view that belongs immediately to a component is called a &lt;em&gt;host view&lt;/em&gt;. Views are typically collected into &lt;a href=&quot;glossary#view-tree&quot;&gt;view hierarchies&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;クラスとそれに関連する&lt;a href=&quot;glossary#template&quot;&gt;テンプレートは、&lt;/a&gt;ビューを定義します。ビューは、コンポーネントに関連付けられた &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; インスタンスによって具体的に表されます。コンポーネントに直接属するビューは、&lt;em&gt;ホストビュー&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。ビューは通常、&lt;a href=&quot;glossary#view-tree&quot;&gt;ビュー階層&lt;/a&gt;に収集されます。</target>
        </trans-unit>
        <trans-unit id="07b53ec1c6e80e65a6a934302fe8fff443c524f5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; statement immediately before a field in a class definition that declares the type of that field. Some examples are &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">そのフィールドの型を宣言するクラス定義のフィールドの直前の&lt;a href=&quot;glossary#decorator&quot;&gt;デコレーター&lt;/a&gt;ステートメント。いくつかの例は、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; して &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63d4d003e26971bd02516b5ffbc56282868ab70a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.</source>
          <target state="translated">&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;指定されたタイプのものであるとクラスを宣言し、型にメタデータを、適切な提供するクラス定義、直前に表示されます。</target>
        </trans-unit>
        <trans-unit id="736883308dcb282a137dbd91ee5819bc7558057c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that acts as a placeholder in a routing component's template. Angular dynamically renders the template based on the current router state.</source>
          <target state="translated">ルーティングコンポーネントのテンプレートでプレースホルダーとして機能する&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;。Angularは現在のルーターの状態に基づいてテンプレートを動的にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="8cc6a0f6df125fb82286558ab003cc9ed2e64056" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#module&quot;&gt;JavaScript module&lt;/a&gt; that is intended to be imported by a user of &lt;a href=&quot;npm-packages&quot;&gt;an npm package&lt;/a&gt;. An entry-point module typically re-exports symbols from other internal modules. A package can contain multiple entry points. For example, the &lt;code&gt;@angular/core&lt;/code&gt; package has two entry-point modules, which can be imported using the module names &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/core/testing&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージの&lt;/a&gt;ユーザーがインポートすることを目的とした&lt;a href=&quot;glossary#module&quot;&gt;JavaScriptモジュール&lt;/a&gt;。エントリポイントモジュールは通常、他の内部モジュールからシンボルを再エクスポートします。パッケージには複数のエントリポイントを含めることができます。たとえば、 &lt;code&gt;@angular/core&lt;/code&gt; パッケージには2つのエントリポイントモジュールがあり、モジュール名 &lt;code&gt;@angular/core&lt;/code&gt; および &lt;code&gt;@angular/core/testing&lt;/code&gt; を使用してインポートできます。</target>
        </trans-unit>
        <trans-unit id="1bd839e877277ad1a0845539091b7fa0d61cf003" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://javascript.info/modules&quot;&gt;JavaScript module&lt;/a&gt; is an individual file with JavaScript code, usually containing a class or a library of functions for a specific purpose within your app. JavaScript modules let you spread your work across multiple files.</source>
          <target state="translated">&lt;a href=&quot;https://javascript.info/modules&quot;&gt;JavaScriptのモジュールは、&lt;/a&gt;通常、アプリ内での特定の目的のためのクラスや関数のライブラリーを含む、JavaScriptコードと、個々のファイルです。JavaScriptモジュールを使用すると、作業を複数のファイルに分散させることができます。</target>
        </trans-unit>
        <trans-unit id="add79b6cad225ba3d033ac5074d0537e68619577" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;hash fragment&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;ハッシュフラグメント&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="8cb01da6d278c41e8f500ba57266b78eeda4112f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;path&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;パス&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="2bbb0a47b63bbf8d048b90ba20a0504e312db21c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;テンプレートの参照変数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1bcafa0eb5b956163eeed4a6a75cabbad36df0ec" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;toh-pt5#routerlink&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt; attribute&lt;/a&gt; is set to &lt;code&gt;&quot;/heroes&quot;&lt;/code&gt;, the string that the router matches to the route to &lt;code&gt;HeroesComponent&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; is the selector for the &lt;a href=&quot;../api/router/routerlink&quot;&gt;&lt;code&gt;RouterLink&lt;/code&gt; directive&lt;/a&gt; that turns user clicks into router navigations. It's another of the public directives in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;a href=&quot;toh-pt5#routerlink&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; の属性が&lt;/a&gt;に設定されている &lt;code&gt;&quot;/heroes&quot;&lt;/code&gt; の文字列にルーティングするルータ一致していることを、 &lt;code&gt;HeroesComponent&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; はセレクタである&lt;a href=&quot;../api/router/routerlink&quot;&gt; &lt;code&gt;RouterLink&lt;/code&gt; の指令&lt;/a&gt;ルータナビゲーション中にユーザがクリックをオン。これは、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; のパブリックディレクティブの1つです。</target>
        </trans-unit>
        <trans-unit id="639a482ada343d0e5ad93bfc7d5a941c5b1a2260" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; isn't tied to route configuration, so update the associated router links to remain active when the new route is active. Update the &lt;code&gt;app.component.ts&lt;/code&gt; template for the &lt;code&gt;/heroes&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; はので、新しいルートがアクティブである場合、関連するルータのリンクがアクティブのままに更新し、ルート設定に縛られていません。更新 &lt;code&gt;app.component.ts&lt;/code&gt; 用テンプレート &lt;code&gt;/heroes&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="fc4971774abe3d8584810de15a2245c3c6cae43d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on a checkbox input element.</source>
          <target state="translated">値を書き込み、チェックボックス入力要素の変更をリッスンするための &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd9cf13f7f418773a9187ad3a6e120365e43541c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; which has an &lt;code&gt;InjectableDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; あり &lt;code&gt;InjectableDef&lt;/code&gt; の静的フィールドを。</target>
        </trans-unit>
        <trans-unit id="a1866590e2a9d78d0830efe2890f1b2b38203b59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; aggregates the values of each child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; into an array. It calculates its status by reducing the status values of its children. For example, if one of the controls in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; is invalid, the entire array becomes invalid.</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; は、それぞれの子の値集計 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; を配列に。子のステータス値を減らすことでステータスを計算します。たとえば、 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のいずれかのコントロールが無効な場合、配列全体が無効になります。</target>
        </trans-unit>
        <trans-unit id="7b89f06b9f87139e39972a1053c9bc6bca0c91bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; aggregates the values of each child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; into one object, with each control name as the key. It calculates its status by reducing the status values of its children. For example, if one of the controls in a group is invalid, the entire group becomes invalid.</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; は、それぞれの子の値集計 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をキーとして各コントロール名と、1つのオブジェクトに。子のステータス値を減らすことでステータスを計算します。たとえば、グループ内のいずれかのコントロールが無効な場合、グループ全体が無効になります。</target>
        </trans-unit>
        <trans-unit id="7ef598a60dce9571b1bf71d84f8e3c71d63ad355" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on a checkbox input element.</source>
          <target state="translated">値を書き込み、チェックボックス入力要素の変更をリッスンするための &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66c4eaf792aaeb8d31859e17fd96da17357b8f90" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; object specifying lazy-loaded child routes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; のレイジーロードされた子のルートを指定するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="63da7a685bae436a5baefed6056ea8939ddd6817" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; (e.g. query &lt;code&gt;&amp;lt;ng-template&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;) template;&lt;/code&gt;)</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; （例えばクエリ &lt;code&gt;&amp;lt;ng-template&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;) template;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a511714d8bf182dc76071d42430897aa3ecbec4c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; which has an &lt;code&gt;InjectableDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; あり &lt;code&gt;InjectableDef&lt;/code&gt; の静的フィールドを。</target>
        </trans-unit>
        <trans-unit id="be187422c88f7b9b30fb7c76cc4c7c623d036f19" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;upgrade/urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; that uses logic from AngularJS to serialize and parse URLs and URL parameters.</source>
          <target state="translated">AngularJSのロジックを使用して、URLとURLパラメーターをシリアル化および解析する &lt;code&gt;&lt;a href=&quot;upgrade/urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8aa0947cbfd3ce658b43f4a986bda6fe30e35bb0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; that uses logic from AngularJS to serialize and parse URLs and URL parameters.</source>
          <target state="translated">AngularJSのロジックを使用して、URLとURLパラメーターをシリアル化および解析する &lt;code&gt;&lt;a href=&quot;urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f670a48ce55883fb60d1e60146176438b4f9fc8f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rule&lt;/code&gt; can use external template files, transform them, and return another &lt;code&gt;Rule&lt;/code&gt; object with the transformed template. You can use the templating to generate any custom files required for your schematic.</source>
          <target state="translated">A &lt;code&gt;Rule&lt;/code&gt; 、外部のテンプレートファイルを使用してそれらを変換し、別の返すことができる &lt;code&gt;Rule&lt;/code&gt; 変換テンプレートを使用してオブジェクトを。テンプレートを使用して、回路図に必要なカスタムファイルを生成できます。</target>
        </trans-unit>
        <trans-unit id="6c67da25cb3690615ce138f76204d22676cb05cd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rule&lt;/code&gt; object defines a function that takes a &lt;code&gt;Tree&lt;/code&gt;, applies transformations, and returns a new &lt;code&gt;Tree&lt;/code&gt;. The main file for a schematic, &lt;code&gt;index.ts&lt;/code&gt;, defines a set of rules that implement the schematic's logic.</source>
          <target state="translated">&lt;code&gt;Rule&lt;/code&gt; オブジェクトが取る関数を定義 &lt;code&gt;Tree&lt;/code&gt; 、変換を適用し、新しい返し &lt;code&gt;Tree&lt;/code&gt; 。回路図のメインファイルである &lt;code&gt;index.ts&lt;/code&gt; は、回路図のロジックを実装する一連のルールを定義します。</target>
        </trans-unit>
        <trans-unit id="638c6d0fa216e5dc64a35311be5238d1c02fe4e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; is both a source of observable values and an &lt;code&gt;Observable&lt;/code&gt; itself. You can subscribe to a &lt;code&gt;Subject&lt;/code&gt; as you would any &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 観察可能な値のソースとの両方で &lt;code&gt;Observable&lt;/code&gt; 自体。 &lt;code&gt;Observable&lt;/code&gt; と同じように、 &lt;code&gt;Subject&lt;/code&gt; をサブスクライブできます。</target>
        </trans-unit>
        <trans-unit id="7f796e4fa4f68f7165ad948a94f7f1758ca29753" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;createComponent&lt;/code&gt; method creates a &lt;code&gt;page&lt;/code&gt; object and fills in the blanks once the &lt;code&gt;hero&lt;/code&gt; arrives.</source>
          <target state="translated">&lt;code&gt;createComponent&lt;/code&gt; の方法は、作成し &lt;code&gt;page&lt;/code&gt; オブジェクトを、一度の空白を埋め &lt;code&gt;hero&lt;/code&gt; 到着しました。</target>
        </trans-unit>
        <trans-unit id="78444a00c7b1487feeeec0402985a438a4edf3a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;download()&lt;/code&gt; method in the &lt;code&gt;DownloaderComponent&lt;/code&gt; initiates the request by subscribing to the service method.</source>
          <target state="translated">&lt;code&gt;download()&lt;/code&gt; メソッド &lt;code&gt;DownloaderComponent&lt;/code&gt; は、サービスメソッドに加入することによって要求を開始します。</target>
        </trans-unit>
        <trans-unit id="705022181dc8804afad6074ba8ac3e641784ceb5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;name&lt;/code&gt; is mandatory. It identifies this particular group of assets between versions of the configuration.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 必須です。構成のバージョン間でこの特定の資産グループを識別します。</target>
        </trans-unit>
        <trans-unit id="10c6052679f6bf0bc936d7c28d99e11c4be6ccb3" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Crisis Center&lt;/em&gt; for maintaining the list of crises for assignment to heroes.</source>
          <target state="translated">ヒーローへの割り当てのための危機のリストを維持するための&lt;em&gt;危機センター&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3f14306f923e2f4bf4cadb6ead21423f41ee343d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Heroes&lt;/em&gt; area for maintaining the list of heroes employed by the agency.</source>
          <target state="translated">エージェンシーが雇用しているヒーローのリストを維持するための&lt;em&gt;ヒーロー&lt;/em&gt;エリア。</target>
        </trans-unit>
        <trans-unit id="da081d80f84ace307cde80af3645ff2e9eef9fae" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;cold&lt;/em&gt; observable doesn't produce values until you subscribe to it. Most of your application observables are cold. All &lt;a href=&quot;http&quot;&gt;&lt;em&gt;HttpClient&lt;/em&gt;&lt;/a&gt; methods return cold observables.</source>
          <target state="translated">&lt;em&gt;冷たい&lt;/em&gt;あなたはそれに加入するまで観測可能では値を生成しません。アプリケーションのオブザーバブルのほとんどは寒いです。すべての&lt;a href=&quot;http&quot;&gt;&lt;em&gt;HttpClient&lt;/em&gt;&lt;/a&gt;メソッドは、コールドオブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="d7a613682601691a64063c88494e50a72e12af55" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component-under-test&lt;/em&gt; doesn't have to be injected with real services. In fact, it is usually better if they are test doubles (stubs, fakes, spies, or mocks). The purpose of the spec is to test the component, not the service, and real services can be trouble.</source>
          <target state="translated">&lt;em&gt;コンポーネント被試験は、&lt;/em&gt;実際のサービスを注入する必要はありません。実際、通常はテストダブル（スタブ、偽物、スパイ、モック）の方が適しています。仕様の目的は、サービスではなくコンポーネントをテストすることであり、実際のサービスでは問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4f385f7ae4f93d341a97d98233959d238340a77d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; controls a patch of screen called a &lt;a href=&quot;glossary#view&quot;&gt;&lt;em&gt;view&lt;/em&gt;&lt;/a&gt;. For example, individual components define and control each of the following views from the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;:</source>
          <target state="translated">&lt;em&gt;コンポーネント&lt;/em&gt;コントロールと呼ばれる画面のパッチ&lt;a href=&quot;glossary#view&quot;&gt;&lt;em&gt;図&lt;/em&gt;&lt;/a&gt;。たとえば、個々のコンポーネントは、&lt;a href=&quot;tutorial&quot;&gt;Tour ofHeroesチュートリアルの&lt;/a&gt;次の各ビューを定義および制御します。</target>
        </trans-unit>
        <trans-unit id="6780ccccda3402b96f6143330a19b3aeb1ffa0b6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; controls a patch of screen called a &lt;em&gt;view&lt;/em&gt;. For example, individual components define and control each of the following views from the &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt;:</source>
          <target state="translated">&lt;em&gt;コンポーネント&lt;/em&gt;コントロールと呼ばれる画面のパッチ&lt;em&gt;図&lt;/em&gt;。たとえば、個々のコンポーネントは、&lt;a href=&quot;tutorial&quot;&gt;チュートリアルの&lt;/a&gt;次の各ビューを定義および制御します。</target>
        </trans-unit>
        <trans-unit id="4e8f8fa8491a780054dbb51957cbec42c3bfabe7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; manages a region of HTML in the manner of a native HTML element. Technically it's a directive with a template.</source>
          <target state="translated">&lt;em&gt;コンポーネントは、&lt;/em&gt;ネイティブのHTML要素のようにHTMLの領域を管理します。技術的には、テンプレートを使用したディレクティブです。</target>
        </trans-unit>
        <trans-unit id="28cb0670dda43adba7b040a7a2903cac40bc4f8c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;different&lt;/em&gt; battery of tests can explore whether the application navigates as expected in the presence of conditions that influence guards such as whether the user is authenticated and authorized.</source>
          <target state="translated">&lt;em&gt;異なる&lt;/em&gt;条件の存在下で予想されるように一連の試験は影響は、ユーザが認証され、許可されているかどうかのようにガードするアプリケーションナビゲートするかどうかを探索することができます。</target>
        </trans-unit>
        <trans-unit id="1ecf60bb6e7234367c513185ab06b67468546b87" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;header&lt;/em&gt; node child can be an &lt;em&gt;item&lt;/em&gt; node or another &lt;em&gt;header&lt;/em&gt; node. If your guide page belongs under a sub-header, find that sub-header in the JSON.</source>
          <target state="translated">&lt;em&gt;ヘッダ&lt;/em&gt;ノードの子であることができる&lt;em&gt;アイテムの&lt;/em&gt;ノードまたは別の&lt;em&gt;ヘッダー&lt;/em&gt;ノード。ガイドページがサブヘッダーの下にある場合は、JSONでそのサブヘッダーを見つけます。</target>
        </trans-unit>
        <trans-unit id="a6e78c0c7440d9a1475224eac8e461df1f4d1910" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;hot&lt;/em&gt; observable is already producing values &lt;em&gt;before&lt;/em&gt; you subscribe to it. The &lt;a href=&quot;../api/router/router#events&quot;&gt;&lt;em&gt;Router.events&lt;/em&gt;&lt;/a&gt; observable, which reports router activity, is a &lt;em&gt;hot&lt;/em&gt; observable.</source>
          <target state="translated">&lt;em&gt;ホット&lt;/em&gt;観察できるが、すでに値を生産している&lt;em&gt;前に、&lt;/em&gt;あなたはそれを購読してください。&lt;a href=&quot;../api/router/router#events&quot;&gt;&lt;em&gt;Router.events&lt;/em&gt;&lt;/a&gt;ルータの活動を報告し、観察は、ある&lt;em&gt;ホット&lt;/em&gt;観察できます。</target>
        </trans-unit>
        <trans-unit id="429f08c3512fd957fd5ba7325869a0c3988fb427" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;locale&lt;/em&gt; identifies a region (such as a country) in which people speak a particular language or language variant. The locale determines the formatting and parsing of dates, times, numbers, and currencies as well as measurement units and the translated names for time zones, languages, and countries.</source>
          <target state="translated">&lt;em&gt;ロケールは&lt;/em&gt;、人々が特定の言語または言語の変種を話すいる（例えば国など）領域を特定します。ロケールは、日付、時刻、数値、通貨のフォーマットと解析、および測定単位とタイムゾーン、言語、国の翻訳名を決定します。</target>
        </trans-unit>
        <trans-unit id="2522563b2cdfe71f09ecb80ce5010241ee842471" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;marble frame&lt;/em&gt; is a virtual unit of testing time. Each symbol (&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;) marks the passing of one frame.</source>
          <target state="translated">&lt;em&gt;大理石フレームは、&lt;/em&gt;試験時間の仮想単位です。各記号（ &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;#&lt;/code&gt; ）は、1つのフレームの通過を示します。</target>
        </trans-unit>
        <trans-unit id="0287d9aa44943985aa24e920490c681de38a6f70" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;provider&lt;/em&gt; is an object that tells an injector how to obtain or create a dependency.</source>
          <target state="translated">&lt;em&gt;プロバイダは、&lt;/em&gt;依存関係を取得または作成する方法インジェクタを伝える目的です。</target>
        </trans-unit>
        <trans-unit id="dd4cdaab79b1c66984ce01f6287162f8aac9fe6e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;routed component&lt;/em&gt; is the destination of a &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; navigation. It can be trickier to test, especially when the route to the component &lt;em&gt;includes parameters&lt;/em&gt;. The &lt;code&gt;HeroDetailComponent&lt;/code&gt; is a &lt;em&gt;routed component&lt;/em&gt; that is the destination of such a route.</source>
          <target state="translated">&lt;em&gt;ルーティングコンポーネントは、&lt;/em&gt;先の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; ナビゲーション。特にコンポーネントへのルートに&lt;em&gt;パラメータが含まれ&lt;/em&gt;ている場合は、テストが難しい場合&lt;em&gt;があります&lt;/em&gt;。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; は、ある&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;そのような経路の宛先です。</target>
        </trans-unit>
        <trans-unit id="65403259921593d9fe9e203a711cab5ad7a29b69" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;routing component&lt;/em&gt; is a component that tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate to another component. The &lt;code&gt;DashboardComponent&lt;/code&gt; is a &lt;em&gt;routing component&lt;/em&gt; because the user can navigate to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; by clicking on one of the &lt;em&gt;hero buttons&lt;/em&gt; on the dashboard.</source>
          <target state="translated">&lt;em&gt;ルーティングコンポーネントは、&lt;/em&gt;指示成分である &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 別のコンポーネントにナビゲートします。 &lt;code&gt;DashboardComponent&lt;/code&gt; は、ある&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;ユーザがナビゲートすることができるので &lt;code&gt;HeroDetailComponent&lt;/code&gt; のいずれかをクリックすることによって、&lt;em&gt;主人公ボタン&lt;/em&gt;ダッシュボード。</target>
        </trans-unit>
        <trans-unit id="4a4ab23bceb89b16d9f1be68a2a55b882d1d9ca2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; the same as a &lt;a href=&quot;template-reference-variables&quot;&gt;template &lt;em&gt;reference&lt;/em&gt; variable&lt;/a&gt;, neither &lt;em&gt;semantically&lt;/em&gt; nor &lt;em&gt;syntactically&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;テンプレート入力変数が&lt;/em&gt;あり&lt;strong&gt;&lt;em&gt;ません&lt;/em&gt;&lt;/strong&gt;と同じ&lt;a href=&quot;template-reference-variables&quot;&gt;テンプレートの&lt;em&gt;参照&lt;/em&gt;変数&lt;/a&gt;も、&lt;em&gt;意味的に&lt;/em&gt;も&lt;em&gt;構文的&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f44fda8c801c30c6245fab7c9fb64928de21c181" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; the same as a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template &lt;em&gt;reference&lt;/em&gt; variable&lt;/a&gt;, neither &lt;em&gt;semantically&lt;/em&gt; nor &lt;em&gt;syntactically&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;テンプレート入力変数が&lt;/em&gt;あり&lt;strong&gt;&lt;em&gt;ません&lt;/em&gt;&lt;/strong&gt;と同じ&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;テンプレートの&lt;em&gt;参照&lt;/em&gt;変数&lt;/a&gt;も、&lt;em&gt;意味的に&lt;/em&gt;も&lt;em&gt;構文的&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3390432957501640594fa03bf4b3db1812ce6212" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is a variable whose value you can reference &lt;em&gt;within&lt;/em&gt; a single instance of the template. There are several such variables in this example: &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;. All are preceded by the keyword &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;テンプレート入力変数は、&lt;/em&gt;その値は、あなたが参照できる変数である&lt;em&gt;内&lt;/em&gt;テンプレートの単一のインスタンス。この例には、 &lt;code&gt;hero&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; のような変数がいくつかあります。すべての前にキーワード &lt;code&gt;let&lt;/code&gt; が付いています。</target>
        </trans-unit>
        <trans-unit id="ee6e5ce5d6e886a13946adcff6c81bdc58af57a9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is a variable whose value you can reference &lt;em&gt;within&lt;/em&gt; a single instance of the template. There are several such variables in this example: &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;odd&lt;/code&gt;. All are preceded by the keyword &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;テンプレート入力変数は、&lt;/em&gt;その値は、あなたが参照できる変数である&lt;em&gt;内&lt;/em&gt;テンプレートの単一のインスタンス。この例には、そのような変数がいくつかあります。 &lt;code&gt;hero&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、および &lt;code&gt;odd&lt;/code&gt; です。すべての前にキーワード &lt;code&gt;let&lt;/code&gt; が付きます。</target>
        </trans-unit>
        <trans-unit id="9ecfc556e297c7f984423ac98bb2b8133f9a4ac9" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;template reference variable&lt;/strong&gt; is often a reference to a DOM element within a template. It can also refer to a directive (which contains a component), an element, &lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;, or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;web component&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;テンプレートの参照変数は&lt;/strong&gt;、多くの場合、テンプレート内のDOM要素への参照です。ディレクティブ（コンポーネントを含む）、要素、&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;、または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Webコンポーネントを&lt;/a&gt;参照することもできます。</target>
        </trans-unit>
        <trans-unit id="b5ee6341ca20af13f54afad2702ef692ea841fe9" translate="yes" xml:space="preserve">
          <source>A Boolean expression or function that compares the previous and current animation states, and returns true if this transition should occur. Note that &quot;true&quot; and &quot;false&quot; match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the animation trigger element. The animation steps run when the expression evaluates to true.</source>
          <target state="translated">前のアニメーションの状態と現在のアニメーションの状態を比較し、この遷移が発生した場合にtrueを返すブール演算式または関数。true&quot; と &quot;false&quot; はそれぞれ 1 と 0 に一致することに注意してください。式は、アニメーションのトリガー要素で状態変化が起こるたびに評価されます。式が true に評価されると、アニメーションのステップが実行されます。</target>
        </trans-unit>
        <trans-unit id="599809fd82612316228fe38bb0ea1720a7b9dd5a" translate="yes" xml:space="preserve">
          <source>A CSS file for the component styles.</source>
          <target state="translated">コンポーネントスタイル用のCSSファイル。</target>
        </trans-unit>
        <trans-unit id="a9abdc794382f88b4186d350695b45ba965e727b" translate="yes" xml:space="preserve">
          <source>A CSS file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.css&lt;/code&gt;</source>
          <target state="translated">CSSファイル &lt;code&gt;&amp;lt;component-name&amp;gt;.component.css&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="325911946e6c51f270aa14d7b9014525fc242ae5" translate="yes" xml:space="preserve">
          <source>A CSS selector that defines how the component is used in a template</source>
          <target state="translated">テンプレート内でコンポーネントがどのように使用されるかを定義するCSSセレクタ。</target>
        </trans-unit>
        <trans-unit id="b4058f8c553b89231956449dda490106299e1981" translate="yes" xml:space="preserve">
          <source>A Chrome browser also opens and displays the test output in the &quot;Jasmine HTML Reporter&quot; like this.</source>
          <target state="translated">Chromeブラウザも開いて、こんな感じで「Jasmine HTML Reporter」にテスト出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="c0ba6f4f7f04ded94da4b082f8c0437a09402aaf" translate="yes" xml:space="preserve">
          <source>A DI Token representing a unique string id assigned to the application by Angular and used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">Angularによってアプリケーションに割り当てられた一意の文字列IDを表すDIトークンで、主にアプリケーション属性とCSSスタイルの接頭辞として&lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;が使用されている場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b7f7bf6e86152cf166fec0bfcc09711603e31bcb" translate="yes" xml:space="preserve">
          <source>A DI Token representing a unique string id assigned to the application by Angular and used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">Angularによってアプリケーションに割り当てられた一意の文字列IDを表すDIトークンで、主にアプリケーション属性とCSSスタイルの接頭辞として&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;が使用されている場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="7f16103dee940de0e134938036f3a37e0da8edf9" translate="yes" xml:space="preserve">
          <source>A DI Token representing the main rendering context. In a browser this is the DOM Document.</source>
          <target state="translated">メインのレンダリングコンテキストを表す DI トークン。ブラウザでは DOM Document となります。</target>
        </trans-unit>
        <trans-unit id="34a19c262ed7d9301354c9b8c7ce2cbc30aa8028" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">DIは、仮想作成するために使用できるトークン&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;移入します &lt;code&gt;entryComponents&lt;/code&gt; のそのに基づいたコンポーネントとNgModulesのフィールド &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; のプロパティ値を。 &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 値で（直接、またはネストされた配列またはマップで）参照されるすべてのコンポーネントは、 &lt;code&gt;entryComponents&lt;/code&gt; プロパティに追加されます。</target>
        </trans-unit>
        <trans-unit id="70232df0f593e7c10d143cfe89b64fce45313f70" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;useValue&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;useValue&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;useValue&lt;/code&gt; プロパティ値に基づいてコンポーネントとNgModulesの &lt;code&gt;entryComponents&lt;/code&gt; フィールドにデータを入力する仮想&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;を作成するために使用できるDIトークン。 &lt;code&gt;useValue&lt;/code&gt; 値で（直接またはネストされた配列またはマップで）参照されるすべてのコンポーネントは、 &lt;code&gt;entryComponents&lt;/code&gt; プロパティに追加されます。</target>
        </trans-unit>
        <trans-unit id="f4aaaddad79edba7b85207af000a6cde392c8d30" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">DIは、仮想作成するために使用できるトークン&lt;a href=&quot;../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;移入します &lt;code&gt;entryComponents&lt;/code&gt; のそのに基づいたコンポーネントとNgModulesのフィールド &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; のプロパティ値を。 &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 値で（直接、またはネストされた配列またはマップで）参照されるすべてのコンポーネントは、 &lt;code&gt;entryComponents&lt;/code&gt; プロパティに追加されます。</target>
        </trans-unit>
        <trans-unit id="372441ce210e4f82a7df974823f5d005424ddafd" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;useValue&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;useValue&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;useValue&lt;/code&gt; プロパティ値に基づいてコンポーネントとNgModulesの &lt;code&gt;entryComponents&lt;/code&gt; フィールドにデータを入力する仮想&lt;a href=&quot;../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;を作成するために使用できるDIトークン。 &lt;code&gt;useValue&lt;/code&gt; 値で（直接またはネストされた配列またはマップで）参照されるすべてのコンポーネントは、 &lt;code&gt;entryComponents&lt;/code&gt; プロパティに追加されます。</target>
        </trans-unit>
        <trans-unit id="6c6c6ad6dc434b59f3c338cdee09daa910f4fcb1" translate="yes" xml:space="preserve">
          <source>A Directive that adds the &lt;code&gt;required&lt;/code&gt; validator to checkbox controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたチェックボックスコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="b287f8f1214950d0e2f03c7ed6dc8f29f0a4fa20" translate="yes" xml:space="preserve">
          <source>A Directive that adds the &lt;code&gt;required&lt;/code&gt; validator to checkbox controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたチェックボックスコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="af60e9a597d2c5395c23f65dc9848a9ec136811f" translate="yes" xml:space="preserve">
          <source>A JSON schema associated with a schematic tells the Angular CLI what options are available to commands and subcommands, and determines the defaults. These defaults can be overridden by providing a different value for an option on the command line. See &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt; for information about how you can change the generation option defaults for your workspace.</source>
          <target state="translated">回路図に関連付けられたJSONスキーマは、コマンドとサブコマンドで使用可能なオプションをAngular CLIに通知し、デフォルトを決定します。これらのデフォルトは、コマンドラインのオプションに別の値を指定することで上書きできます。&lt;a href=&quot;workspace-config&quot;&gt;ワークスペース&lt;/a&gt;の生成オプションのデフォルトを変更する方法については、ワークスペースの設定を参照してください。</target>
        </trans-unit>
        <trans-unit id="576c3fc6feeabf272864a096aed610727c170f4b" translate="yes" xml:space="preserve">
          <source>A Node Express server is a pipeline of middleware that filters and processes requests one after the other. You configure the Node Express server pipeline with calls to &lt;code&gt;app.get()&lt;/code&gt; like this one for data requests.</source>
          <target state="translated">Node Expressサーバーは、リクエストを次々にフィルタリングして処理するミドルウェアのパイプラインです。Node Expressサーバーパイプラインは、データリクエスト用にこのような &lt;code&gt;app.get()&lt;/code&gt; を呼び出すように構成します。</target>
        </trans-unit>
        <trans-unit id="9866f48f960862f21acf4991655f3cc3f96cc63a" translate="yes" xml:space="preserve">
          <source>A Node.js Express server is a pipeline of middleware that filters and processes requests one after the other. You configure the Node.js Express server pipeline with calls to &lt;code&gt;server.get()&lt;/code&gt; like this one for data requests.</source>
          <target state="translated">Node.js Expressサーバーは、リクエストを次々にフィルタリングして処理するミドルウェアのパイプラインです。Node.js Expressサーバーパイプラインは、データリクエストに対してこのような &lt;code&gt;server.get()&lt;/code&gt; を呼び出すように構成します。</target>
        </trans-unit>
        <trans-unit id="638b2d1ff2d39b9a31cf3cdf34086dca5e31b768" translate="yes" xml:space="preserve">
          <source>A ReflectiveDependency injection container used for instantiating objects and resolving dependencies.</source>
          <target state="translated">オブジェクトのインスタンス化や依存関係の解決に使用する ReflectiveDependency インジェクションコンテナです。</target>
        </trans-unit>
        <trans-unit id="59dd0c3f0e2ab9dff2d45116e5f275a7bd7fc27d" translate="yes" xml:space="preserve">
          <source>A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property like &lt;code&gt;innerHTML&lt;/code&gt; that could cause Cross Site Scripting (XSS) security bugs when improperly handled.</source>
          <target state="translated">SecurityContextは、危険なセキュリティ上の影響がある場所にマークを付けます。たとえば、 &lt;code&gt;innerHTML&lt;/code&gt; などのDOMプロパティは、不適切に処理されたときにクロスサイトスクリプティング（XSS）セキュリティバグを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="abf2fe6e840b3478ea12942a2f906e769e970379" translate="yes" xml:space="preserve">
          <source>A TypeScript class to shape the &lt;strong&gt;model data&lt;/strong&gt; for your component and display properties of that model.</source>
          <target state="translated">コンポーネントの&lt;strong&gt;モデルデータ&lt;/strong&gt;を形成し、そのモデルのプロパティを表示するTypeScriptクラス。</target>
        </trans-unit>
        <trans-unit id="2ce514d5a29cc020eab107370f83c5964cc081c9" translate="yes" xml:space="preserve">
          <source>A TypeScript configuration can inherit settings from another file using the &lt;code&gt;extends&lt;/code&gt; property. The configuration options from the base file are loaded first, then overridden by those in the inheriting &lt;code&gt;tsconfig&lt;/code&gt; file.</source>
          <target state="translated">TypeScript構成は、 &lt;code&gt;extends&lt;/code&gt; プロパティを使用して別のファイルから設定を継承できます。基本ファイルの構成オプションが最初にロードされ、次に継承する &lt;code&gt;tsconfig&lt;/code&gt; ファイルのオプションによって上書きされます。</target>
        </trans-unit>
        <trans-unit id="63e98a8ebbd8b7b207fdc26cb7fdee82848968fd" translate="yes" xml:space="preserve">
          <source>A TypeScript configuration can inherit settings from another file using the &lt;code&gt;extends&lt;/code&gt; property. The configuration options from the base file are loaded first, then overridden by those in the inheriting configuration file.</source>
          <target state="translated">TypeScript構成は、 &lt;code&gt;extends&lt;/code&gt; プロパティを使用して別のファイルから設定を継承できます。ベースファイルの構成オプションが最初にロードされ、次に継承する構成ファイルの構成オプションによってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="bf52b0587c806c818b0e66032278502b10c27741" translate="yes" xml:space="preserve">
          <source>A TypeScript file with a component class named &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; という名前のコンポーネントクラスを含むTypeScriptファイル。</target>
        </trans-unit>
        <trans-unit id="75ee6a49dc9a24af9ee987b8b0f73148b94a0862" translate="yes" xml:space="preserve">
          <source>A TypeScript-like syntax that Angular evaluates within a &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;.</source>
          <target state="translated">Angularが&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;内で評価するTypeScriptに似た構文。</target>
        </trans-unit>
        <trans-unit id="f4e1869985246ff619d0cd09d72d769c0fca1a1b" translate="yes" xml:space="preserve">
          <source>A Typescript class that defines behavior</source>
          <target state="translated">ビヘイビアを定義するTypescriptクラス</target>
        </trans-unit>
        <trans-unit id="d9b532cb4e6dbf28e2ec99b1d5e242df8ee636f8" translate="yes" xml:space="preserve">
          <source>A URL like &lt;code&gt;~/detail/11&lt;/code&gt; would be a good URL for navigating to the &lt;em&gt;Hero Detail&lt;/em&gt; view of the hero whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;11&lt;/code&gt;.</source>
          <target state="translated">以下のようなURL &lt;code&gt;~/detail/11&lt;/code&gt; へナビゲートするための良好なURLになり&lt;em&gt;ヒーローの詳細&lt;/em&gt;英雄のビュー &lt;code&gt;id&lt;/code&gt; である &lt;code&gt;11&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5aa19c3e00b09eff21880f8aeb69b67bf3ae32ff" translate="yes" xml:space="preserve">
          <source>A URL string relative to the full URL string.</source>
          <target state="translated">完全なURL文字列からの相対的なURL文字列。</target>
        </trans-unit>
        <trans-unit id="93e7f0f463135d020d0e07a514b4e627a1b7f7fd" translate="yes" xml:space="preserve">
          <source>A URL that defines the ServiceWorker's registration scope; that is, what range of URLs it can control. It will be used when calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register&quot;&gt;ServiceWorkerContainer#register()&lt;/a&gt;.</source>
          <target state="translated">ServiceWorkerの登録スコープを定義するURL。つまり、制御できるURLの範囲です。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register&quot;&gt;ServiceWorkerContainer＃register（）を&lt;/a&gt;呼び出すときに使用されます。</target>
        </trans-unit>
        <trans-unit id="87928deb819d7b06c573721d3c82d53581b3ba5a" translate="yes" xml:space="preserve">
          <source>A URL to redirect to when the path matches. Absolute if the URL begins with a slash (/), otherwise relative to the path URL. When not present, router does not redirect.</source>
          <target state="translated">パスが一致したときにリダイレクトする URL。URL がスラッシュ (/)で始まる場合は絶対値、そうでない場合はパスの URL からの相対値。これがない場合、ルータはリダイレクトしません。</target>
        </trans-unit>
        <trans-unit id="23e44cf2c0692f9e95579ce06f4b68b8cc6db506" translate="yes" xml:space="preserve">
          <source>A URL to which to redirect when a the path matches. Absolute if the URL begins with a slash (/), otherwise relative to the path URL. When not present, router does not redirect.</source>
          <target state="translated">パスが一致したときにリダイレクトする URL。URL がスラッシュ (/)で始まる場合は絶対パス、そうでない場合はパスの URL からの相対パス。これがない場合、ルータはリダイレクトしません。</target>
        </trans-unit>
        <trans-unit id="46e53a936bddd1e6667ff7ab0bf8ab8e4d5e07b7" translate="yes" xml:space="preserve">
          <source>A Unicode locale identifier is composed of a Unicode language identifier and (optionally) the character &lt;code&gt;-&lt;/code&gt; followed by a locale extension. (For historical reasons the character &lt;code&gt;&lt;a href=&quot;i18n&quot;&gt;_&lt;/a&gt;&lt;/code&gt; is supported as an alternative to &lt;code&gt;-&lt;/code&gt;.) For example, in the locale id &lt;code&gt;fr-CA&lt;/code&gt; the &lt;code&gt;fr&lt;/code&gt; refers to the French language identifier, and the &lt;code&gt;CA&lt;/code&gt; refers to the locale extension Canada.</source>
          <target state="translated">A Unicodeは、識別子がUnicodeの言語識別子と（任意に）文字で構成されているロケール &lt;code&gt;-&lt;/code&gt; ロケール拡張が続きます。（歴史的な理由により、文字 &lt;code&gt;&lt;a href=&quot;i18n&quot;&gt;_&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;-&lt;/code&gt; の代わりとしてサポートされています。）たとえば、ロケールID &lt;code&gt;fr-CA&lt;/code&gt; では、 &lt;code&gt;fr&lt;/code&gt; はフランス語の識別子を指し、 &lt;code&gt;CA&lt;/code&gt; はロケール拡張カナダを指します。</target>
        </trans-unit>
        <trans-unit id="9619731a7e9d414367b09313d3267edcaa195536" translate="yes" xml:space="preserve">
          <source>A Universal web server responds to application page requests with static HTML rendered by the &lt;a href=&quot;universal#universal-engine&quot;&gt;Universal template engine&lt;/a&gt;. The server receives and responds to HTTP requests from clients (usually browsers), and serves static assets such as scripts, CSS, and images. It may respond to data requests, either directly or as a proxy to a separate data server.</source>
          <target state="translated">Universal Webサーバーは、&lt;a href=&quot;universal#universal-engine&quot;&gt;Universalテンプレートエンジン&lt;/a&gt;によってレンダリングされた静的HTMLでアプリケーションページ要求に応答します。サーバーはクライアント（通常はブラウザー）からのHTTPリクエストを受信して​​応答し、スクリプト、CSS、画像などの静的アセットを提供します。直接または別のデータサーバーへのプロキシとして、データ要求に応答できます。</target>
        </trans-unit>
        <trans-unit id="71378c7a7d2263bf11559901a0f4449137f58c6b" translate="yes" xml:space="preserve">
          <source>A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix parameters associated with the segment.</source>
          <target state="translated">UrlSegment は、2 つのスラッシュの間にある URL の一部です。これにはパスとセグメントに関連付けられた行列のパラメータが含まれます。</target>
        </trans-unit>
        <trans-unit id="9ed46c4fb7b79a723f886be252ac69b01f25f523" translate="yes" xml:space="preserve">
          <source>A base class for code shared between the &lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">コードの基本クラス間で共有 &lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;forms/formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="ca117d436dde1d68583371441cb3950ab4847f85" translate="yes" xml:space="preserve">
          <source>A base class for code shared between the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">コードの基本クラス間で共有 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="7182c0a975e83c1064ac742ba760051b64c40178" translate="yes" xml:space="preserve">
          <source>A base class for directives that contain multiple registered instances of &lt;code&gt;&lt;a href=&quot;forms/ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;. Only used by the forms module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; の複数の登録済みインスタンスを含むディレクティブの基本クラス。フォームモジュールでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="1e18bb4f3363c7c460512b62f5743a20a68eb8d9" translate="yes" xml:space="preserve">
          <source>A base class for directives that contain multiple registered instances of &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;. Only used by the forms module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; の複数の登録済みインスタンスを含むディレクティブの基本クラス。フォームモジュールでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="096190a79977c14741e1938c2c256ebfb9a219c4" translate="yes" xml:space="preserve">
          <source>A base class that all &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ベースのディレクティブが拡張する基本クラス。 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; オブジェクトをDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="51ae843d848f33537e790740031d0121996326dd" translate="yes" xml:space="preserve">
          <source>A base class that all &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ベースのディレクティブが拡張する基本クラス。 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; オブジェクトをDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="072ce3207529e3a0eed654da379d2b96537447aa" translate="yes" xml:space="preserve">
          <source>A base class that all control &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ベースのディレクティブを拡張する基本クラス。 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; オブジェクトをDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="d570abadc21d73601999397b7c63605397538b69" translate="yes" xml:space="preserve">
          <source>A base class that all control &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ベースのディレクティブを拡張する基本クラス。 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; オブジェクトをDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="467148334df27df20e018470d39d8ab381750677" translate="yes" xml:space="preserve">
          <source>A basic understanding of the following concepts:</source>
          <target state="translated">以下の概念を基本的に理解していること。</target>
        </trans-unit>
        <trans-unit id="a5ab0003f292345413eb8a2b94b3fc4996269aea" translate="yes" xml:space="preserve">
          <source>A basic understanding of the following:</source>
          <target state="translated">以下のことを基本的に理解していること。</target>
        </trans-unit>
        <trans-unit id="a565a4e2917d8bbeaa570825dfd8d8cdd077b189" translate="yes" xml:space="preserve">
          <source>A basic understanding of the information in &lt;a href=&quot;service-worker-intro&quot;&gt;Introduction to Angular service workers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service-worker-intro&quot;&gt;Angular Service Workerの概要&lt;/a&gt;の情報の基本的な理解。</target>
        </trans-unit>
        <trans-unit id="a34826f1e38a9b1a10c639f0eb97e5092f011d36" translate="yes" xml:space="preserve">
          <source>A better solution is to create an artificial test component that demonstrates all ways to apply the directive.</source>
          <target state="translated">より良い解決策は、ディレクティブを適用するすべての方法を示す人工的なテストコンポーネントを作ることです。</target>
        </trans-unit>
        <trans-unit id="b3b95dc7d1bbb973732d884b6bf8498d3091aab3" translate="yes" xml:space="preserve">
          <source>A boolean-valued function over a value, possibly including context information regarding that value's position in an array.</source>
          <target state="translated">値に対するブール値関数で、配列内でのその値の位置に関するコンテキスト情報を含む場合もあります。</target>
        </trans-unit>
        <trans-unit id="0f651a3110666c190aff69e1ee84ccbffa0efcba" translate="yes" xml:space="preserve">
          <source>A bootstrap component is automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">ブートストラップコンポーネントが &lt;code&gt;entryComponents&lt;/code&gt; に自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="f0400004f9940352eb2ae482000bca5e618a3b6f" translate="yes" xml:space="preserve">
          <source>A bootstrapped component &lt;em&gt;is&lt;/em&gt; an &lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;entry component&lt;/a&gt; that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router.</source>
          <target state="translated">ブートストラップコンポーネント&lt;em&gt;は&lt;/em&gt;、ブートストラッププロセス（アプリケーションの起動）中にAngularがDOMにロードする&lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;エントリコンポーネント&lt;/a&gt;です。他のエントリコンポーネントは、ルーターなどの他の方法で動的に読み込まれます。</target>
        </trans-unit>
        <trans-unit id="9023b1da9696cafc362036418ba09a6af6a2deb3" translate="yes" xml:space="preserve">
          <source>A bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router.</source>
          <target state="translated">ブートストラップされたコンポーネントとは、ブートストラップ処理(アプリケーションの起動)の際にAngularがDOMにロードするエントリーコンポーネントのことです。他のエントリコンポーネントはルータなどの他の方法で動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="a8adc65ce5e0b88cc440c6a6e5fc1619a8cd504b" translate="yes" xml:space="preserve">
          <source>A bootstrapped component is necessarily an entry component because bootstrapping is an imperative process, thus it needs to have an entry component.</source>
          <target state="translated">ブートストラップは必須のプロセスなので、ブートストラップされたコンポーネントは必然的にエントリーコンポーネントになります。</target>
        </trans-unit>
        <trans-unit id="2e1e0db9f76bce947aff0501f035cbc1621e10d2" translate="yes" xml:space="preserve">
          <source>A bootstrapped entry component</source>
          <target state="translated">ブートストラップされたエントリコンポーネント</target>
        </trans-unit>
        <trans-unit id="96324ec4fdb9bd57e96f70085ba8ca376c27e961" translate="yes" xml:space="preserve">
          <source>A breakpoint on the pipe's request for data shows the following:</source>
          <target state="translated">パイプのデータ要求のブレークポイントでは、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="873cd968444320daef92249ea6c5114569cffc7b" translate="yes" xml:space="preserve">
          <source>A build technique that creates two bundles for an application. One smaller bundle is for modern browsers. A second, larger bundle allows the application to run correctly in older browsers (such as IE11) that do not support all modern browser APIs.</source>
          <target state="translated">アプリケーション用に2つのバンドルを作成するビルド手法。1つの小さなバンドルは最新のブラウザ用です。2 番目の大きなバンドルは、すべてのモダンブラウザ API をサポートしていない古いブラウザ (IE11 など)でアプリケーションを正しく動作させることを可能にします。</target>
        </trans-unit>
        <trans-unit id="ed822ed7d2157779effe7d59d8a3822bc4ca3033" translate="yes" xml:space="preserve">
          <source>A buildable or runnable subset of a &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;, configured as an object in the &lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;workspace configuration file&lt;/a&gt;, and executed by an &lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt;&lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;ワークスペース構成ファイル&lt;/a&gt;でオブジェクトとして構成され、&lt;a href=&quot;glossary#architect&quot;&gt;Architect &lt;/a&gt;&lt;a href=&quot;glossary#builder&quot;&gt;ビルダー&lt;/a&gt;によって実行される、&lt;a href=&quot;glossary#project&quot;&gt;プロジェクトの&lt;/a&gt;ビルド可能または実行可能なサブセット。</target>
        </trans-unit>
        <trans-unit id="e4eee78994792230b0c3d32e29860f69abdfad63" translate="yes" xml:space="preserve">
          <source>A builder must have a defined target that associates it with a specific input configuration and &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;.</source>
          <target state="translated">ビルダーには、特定の入力構成と&lt;a href=&quot;glossary#project&quot;&gt;プロジェクトに&lt;/a&gt;関連付けるターゲットが定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="252f868c89435de5215834180cc5d8c0801b4fc7" translate="yes" xml:space="preserve">
          <source>A builder resides in a &quot;project&quot; folder that is similar in structure to an Angular workspace, with global configuration files at the top level, and more specific configuration in a source folder with the code files that define the behavior. For example, your &lt;code&gt;myBuilder&lt;/code&gt; folder could contain the following files.</source>
          <target state="translated">ビルダーは、Angularワークスペースと構造が似ている「プロジェクト」フォルダーにあり、トップレベルにグローバル構成ファイルがあり、動作を定義するコードファイルがあるソースフォルダーに特定の構成があります。たとえば、 &lt;code&gt;myBuilder&lt;/code&gt; フォルダーには次のファイルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="bb3f356af777f070b18dd60f447c94b1885caa8e" translate="yes" xml:space="preserve">
          <source>A callback invoked when rendering has begun.</source>
          <target state="translated">レンダリングが開始されたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="621621c14914731ff9cc461e46f4734dab9a9e3a" translate="yes" xml:space="preserve">
          <source>A callback invoked when rendering has completed.</source>
          <target state="translated">レンダリングが完了したときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="e30186c1d00b026b4228eadb9cb84965baed02c2" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after Angular has completed initialization of a component's view. It is invoked only once when the view is instantiated.</source>
          <target state="translated">Angularがコンポーネントのビューの初期化を完了した直後に呼び出されるコールバックメソッドです。ビューがインスタンス化されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7fe4cd97d1eea7a11fac142b1908b02db4f41095" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after Angular has completed initialization of all of the directive's content. It is invoked only once when the directive is instantiated.</source>
          <target state="translated">Angularがディレクティブのすべてのコンテンツの初期化を完了した直後に呼び出されるコールバックメソッドです。ディレクティブがインスタンス化されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1b7068e5aab5e739c2621bf44fb181a91e1b6ad2" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has checked data-bound properties if at least one has changed, and before the view and content children are checked.</source>
          <target state="translated">デフォルトの変更検出器が、少なくとも1つの変更があった場合にデータバインドプロパティをチェックした直後に、ビューとコンテンツの子要素をチェックする前に呼び出されるコールバックメソッド。</target>
        </trans-unit>
        <trans-unit id="ef37907408bda8f267bff550c619746d82491838" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has checked the directive's data-bound properties for the first time, and before any of the view or content children have been checked. It is invoked only once when the directive is instantiated.</source>
          <target state="translated">デフォルトの変更検出器が初めてディレクティブのデータバインドプロパティをチェックした直後に、 ビューやコンテンツの子プロセスがチェックされる前に呼び出されるコールバックメソッドです。これは、ディレクティブがインスタンス化されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="17be15e9e9f2799fb0b7f9e7adb5b4d25c276f51" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has completed checking all of the directive's content.</source>
          <target state="translated">デフォルトの変更検出器がディレクティブのすべての内容のチェックを完了した直後に呼び出されるコールバックメソッド。</target>
        </trans-unit>
        <trans-unit id="b3d49829f059326e4cc0c5d42cce6ef8ba22c75d" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has completed one change-check cycle for a component's view.</source>
          <target state="translated">デフォルトの変更検出器がコンポーネントのビューの1回の変更チェックサイクルを完了した直後に呼び出されるコールバックメソッドです。</target>
        </trans-unit>
        <trans-unit id="c9272d31a5c8ffd0e82b22a4c70a377c3c3a39ea" translate="yes" xml:space="preserve">
          <source>A callback method that performs change-detection, invoked after the default change-detector runs. See &lt;code&gt;&lt;a href=&quot;keyvaluediffers&quot;&gt;KeyValueDiffers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;iterablediffers&quot;&gt;IterableDiffers&lt;/a&gt;&lt;/code&gt; for implementing custom change checking for collections.</source>
          <target state="translated">デフォルトの変更検出器の実行後に呼び出される、変更検出を実行するコールバックメソッド。コレクションのカスタム変更チェックの実装については、 &lt;code&gt;&lt;a href=&quot;keyvaluediffers&quot;&gt;KeyValueDiffers&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;iterablediffers&quot;&gt;IterableDiffers&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d104cace8ea584693965d95cc9257a3a34349247" translate="yes" xml:space="preserve">
          <source>A callback method that performs custom clean-up, invoked immediately after a directive, pipe, or service instance is destroyed.</source>
          <target state="translated">ディレクティブやパイプ、サービスのインスタンスが破棄された直後に呼び出される、 カスタムのクリーンアップを行うコールバックメソッド。</target>
        </trans-unit>
        <trans-unit id="9d019ac3f68827f438b58c53accb84a0a9b5454e" translate="yes" xml:space="preserve">
          <source>A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.</source>
          <target state="translated">カスタムクリーンアップを行うコールバックメソッドで、ディレクティブやパイプ、サービスのインスタンスが破棄される直前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="56a268cd66316ce2f0d1944547dc2ba1885278a7" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name.</source>
          <target state="translated">他のHTML要素、属性、プロパティ、およびコンポーネントの動作をリッスンおよび変更できる&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;のカテゴリ。これらは通常、HTML属性として表されるため、名前になります。</target>
        </trans-unit>
        <trans-unit id="8f2bd0d4f0242fd6d93c7106c480965ba0a756a0" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that is responsible for shaping HTML layout by modifying the DOM&amp;amp;mdashthat is, adding, removing, or manipulating elements and their children.</source>
          <target state="translated">DOMを変更することによりHTMLレイアウトを形成する、つまり要素とその子を追加、削除、または操作する&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;のカテゴリ。</target>
        </trans-unit>
        <trans-unit id="e76eb415fce0aa3049c66f9205a3ceb92e3eb58d" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that is responsible for shaping HTML layout by modifying the DOM&amp;mdash;that is, adding, removing, or manipulating elements and their children.</source>
          <target state="translated">DOMを変更することによって、つまり要素とその子を追加、削除、または操作することによってHTMLレイアウトを形成する役割を担う&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;のカテゴリ。</target>
        </trans-unit>
        <trans-unit id="343aa9337e55f69912d6d719d5e5805b50eca679" translate="yes" xml:space="preserve">
          <source>A check that runs when form values change and reports whether the given values are correct and complete, according to the defined constraints. Reactive forms apply &lt;a href=&quot;form-validation#adding-to-reactive-forms&quot;&gt;validator functions&lt;/a&gt;. Template-driven forms use &lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;validator directives&lt;/a&gt;.</source>
          <target state="translated">フォームの値が変更されたときに実行されるチェックで、定義された制約に従って、指定された値が正しく完全であるかどうかを報告します。リアクティブフォームは&lt;a href=&quot;form-validation#adding-to-reactive-forms&quot;&gt;バリデーター関数&lt;/a&gt;を適用します。テンプレート駆動型フォームは&lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;バリデータディレクティブ&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="2d1c2e7542eff3bf00dff1a1de49e08d938a227b" translate="yes" xml:space="preserve">
          <source>A checkbox on the &lt;code&gt;PackageSearchComponent&lt;/code&gt; toggles a &lt;code&gt;withRefresh&lt;/code&gt; flag, which is one of the arguments to &lt;code&gt;PackageSearchService.search()&lt;/code&gt;. That &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method creates the custom &lt;code&gt;x-refresh&lt;/code&gt; header and adds it to the request before calling &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PackageSearchComponent&lt;/code&gt; のチェックボックスは、 &lt;code&gt;withRefresh&lt;/code&gt; フラグを切り替えます。これは、 &lt;code&gt;PackageSearchService.search()&lt;/code&gt; の引数の1つです。その &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッドは、カスタムの &lt;code&gt;x-refresh&lt;/code&gt; ヘッダーを作成し、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; を呼び出す前にリクエストに追加します。</target>
        </trans-unit>
        <trans-unit id="2238becdf367d5fbefe935937a36fa23a96446e7" translate="yes" xml:space="preserve">
          <source>A checkbox on the &lt;code&gt;PackageSearchComponent&lt;/code&gt; toggles a &lt;code&gt;withRefresh&lt;/code&gt; flag, which is one of the arguments to &lt;code&gt;PackageSearchService.search()&lt;/code&gt;. That &lt;code&gt;search()&lt;/code&gt; method creates the custom &lt;code&gt;x-refresh&lt;/code&gt; header and adds it to the request before calling &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PackageSearchComponent&lt;/code&gt; のチェックボックスは、 &lt;code&gt;PackageSearchService.search()&lt;/code&gt; の引数の1つである &lt;code&gt;withRefresh&lt;/code&gt; フラグを切り替えます。その &lt;code&gt;search()&lt;/code&gt; メソッドは、カスタム &lt;code&gt;x-refresh&lt;/code&gt; ヘッダーを作成し、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; を呼び出す前にそれをリクエストに追加します。</target>
        </trans-unit>
        <trans-unit id="a9042a7212d60671bc72001876e70a6d3a120216" translate="yes" xml:space="preserve">
          <source>A child route is like any other route, in that it needs both a &lt;code&gt;path&lt;/code&gt; and a &lt;code&gt;component&lt;/code&gt;. The one difference is that you place child routes in a &lt;code&gt;children&lt;/code&gt; array within the parent route.</source>
          <target state="translated">子ルートは、 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;component&lt;/code&gt; 両方を必要とするという点で、他のルートと同じです。1つの違いは、親ルート内の &lt;code&gt;children&lt;/code&gt; 配列に子ルートを配置することです。</target>
        </trans-unit>
        <trans-unit id="1ea2dba458600bddeca5f6a66246af12aba09d49" translate="yes" xml:space="preserve">
          <source>A chrome browser also opens and displays the test output in the &quot;Jasmine HTML Reporter&quot; like this.</source>
          <target state="translated">クロームブラウザもこのように「Jasmine HTML Reporter」を開いてテスト出力を表示しています。</target>
        </trans-unit>
        <trans-unit id="9be78a60e1ff57a5896ceaf2ec2f63d056169af5" translate="yes" xml:space="preserve">
          <source>A class definition preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;, which declares and serves as a manifest for a block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;が前に付くクラス定義。これは、アプリケーションドメイン、ワークフロー、または密接に関連する一連の機能専用のコードブロックの宣言およびマニフェストとして機能します。</target>
        </trans-unit>
        <trans-unit id="a192bac5ac356be2f3c56d06d6b531d551809cd4" translate="yes" xml:space="preserve">
          <source>A class interface should define &lt;em&gt;only&lt;/em&gt; the members that its consumers are allowed to call. Such a narrowing interface helps decouple the concrete class from its consumers.</source>
          <target state="translated">クラスインターフェイスは、そのコンシューマが呼び出すことを許可されているメンバー&lt;em&gt;のみ&lt;/em&gt;を定義する必要があります。このような狭まるインターフェースは、具象クラスをその消費者から切り離すのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c5a1d26cf05b83059365f38e429b8b641ab34688" translate="yes" xml:space="preserve">
          <source>A class that can modify the structure of the DOM or modify attributes in the DOM and component data model. A directive class definition is immediately preceded by a &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that supplies metadata.</source>
          <target state="translated">DOMの構造を変更したり、DOMおよびコンポーネントデータモデルの属性を変更したりできるクラス。ディレクティブクラスの定義の直前には、メタデータを提供する &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="da749411f2fbf9765df953ad7c145d5c80634633" translate="yes" xml:space="preserve">
          <source>A class that implements the &lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt; interface (or a function with the same signature as the &lt;a href=&quot;../api/router/resolve#resolve&quot;&gt;resolve() method&lt;/a&gt;) that you use to produce or retrieve data that is needed before navigation to a requested route can be completed.</source>
          <target state="translated">要求されたルートへのナビゲーションを完了する前に必要なデータを生成または取得するために使用する&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;インターフェイス（または&lt;a href=&quot;../api/router/resolve#resolve&quot;&gt;resolve（）メソッド&lt;/a&gt;と同じ署名を持つ関数）を実装するクラス。</target>
        </trans-unit>
        <trans-unit id="c3f170876358e49d15b030811c0281e79ed77fa5" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">&lt;a href=&quot;app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt;関数の実行状態を反映するクラス。</target>
        </trans-unit>
        <trans-unit id="5c93e2c1668e7ec5b3f463c413d9da40e845709b" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">実行中の&lt;a href=&quot;app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt;の状態を反映するクラス。</target>
        </trans-unit>
        <trans-unit id="2586244e33994880aee60d64079107cf48f5c7e6" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;core/app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">&lt;a href=&quot;core/app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt;関数の実行状態を反映するクラス。</target>
        </trans-unit>
        <trans-unit id="b03253d94c1c737d17ecfa0fa8c0a0fc7e00e3f9" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;core/app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">実行中の&lt;a href=&quot;core/app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt;の状態を反映するクラス。</target>
        </trans-unit>
        <trans-unit id="3dce19c2b15b60014a24e007692a61c4cec1cbb0" translate="yes" xml:space="preserve">
          <source>A class that's already declared in another NgModule</source>
          <target state="translated">別の NgModule で既に宣言されているクラス</target>
        </trans-unit>
        <trans-unit id="15e8cb7a8d71df2ff5451890d3605b823ff71848" translate="yes" xml:space="preserve">
          <source>A class that's already declared in another module, whether an app module, @NgModule, or third-party module.</source>
          <target state="translated">アプリモジュール、@NgModule、サードパーティモジュールなど、別のモジュールですでに宣言されているクラス。</target>
        </trans-unit>
        <trans-unit id="52cb7c70c205caf15acdbf3dad279a4fc5ab3692" translate="yes" xml:space="preserve">
          <source>A class type that you can add to the &lt;code&gt;declarations&lt;/code&gt; list of an &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;. You can declare &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt;, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#pipe&quot;&gt;pipes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModuleの&lt;/a&gt; &lt;code&gt;declarations&lt;/code&gt; リストに追加できるクラスタイプ。&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;、&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;、&lt;a href=&quot;glossary#pipe&quot;&gt;パイプを&lt;/a&gt;宣言できます。</target>
        </trans-unit>
        <trans-unit id="f05301aad6629d6cf06da9c65f1a123c52b3e017" translate="yes" xml:space="preserve">
          <source>A class which is preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;{}&lt;/code&gt; decorator and which defines a function that transforms input values to output values for display in a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. Angular defines various pipes, and you can define new pipes.</source>
          <target state="translated">先行するクラス &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;{}&lt;/code&gt; デコレータとの表示のための出力値と入力値を変換関数定義&lt;a href=&quot;glossary#view&quot;&gt;ビューを&lt;/a&gt;。Angularはさまざまなパイプを定義し、新しいパイプを定義できます。</target>
        </trans-unit>
        <trans-unit id="87e85a96b41d60c13372c16732fa1704cdf3acdf" translate="yes" xml:space="preserve">
          <source>A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that associates it with a companion &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;. Together, the component and template define a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. A component is a special type of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">クラス &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;コンパニオンに関連付ける&lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;。コンポーネントとテンプレートを組み合わせて、&lt;a href=&quot;glossary#view&quot;&gt;ビューを&lt;/a&gt;定義します。コンポーネントは特別なタイプの&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;です。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータは拡張 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; テンプレート指向の機能とのデコレータを。</target>
        </trans-unit>
        <trans-unit id="49388823188334dd547827fe77c4ca8ca1f425e1" translate="yes" xml:space="preserve">
          <source>A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that associates it with a companion &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;. Together, the component class and template define a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. A component is a special type of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">クラス &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;コンパニオンに関連付ける&lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;。コンポーネントクラスとテンプレートが一緒になって、&lt;a href=&quot;glossary#view&quot;&gt;ビューを&lt;/a&gt;定義します。コンポーネントは、特殊なタイプの&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;です。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータは拡張 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; テンプレート指向の機能とのデコレータを。</target>
        </trans-unit>
        <trans-unit id="937214eb5969e76a0181ee0c519da4e56333f19c" translate="yes" xml:space="preserve">
          <source>A codec for encoding and decoding URL parts.</source>
          <target state="translated">URL部分をエンコード、デコードするためのコーデック。</target>
        </trans-unit>
        <trans-unit id="7d302abe77a94aa1032491a8e0f377e95a4f168a" translate="yes" xml:space="preserve">
          <source>A codec for encoding and decoding parameters in URLs.</source>
          <target state="translated">URL のパラメータをエンコード、デコードするためのコーデック。</target>
        </trans-unit>
        <trans-unit id="ecea492f54194b72e7632959fcd3e275ec6d043f" translate="yes" xml:space="preserve">
          <source>A collection of Angular &lt;a href=&quot;glossary#project&quot;&gt;projects&lt;/a&gt; (that is, applications and libraries) powered by the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; that are typically co-located in a single source-control repository (such as &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;を利用したAngular &lt;a href=&quot;glossary#project&quot;&gt;プロジェクト&lt;/a&gt;（つまり、アプリケーションとライブラリ）のコレクションであり、通常は単一のソース管理リポジトリ（&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;など）に同じ場所に配置されます。</target>
        </trans-unit>
        <trans-unit id="e79ba2e8ac6b5b04c6c03c7ee3e2785eb9b7e5a0" translate="yes" xml:space="preserve">
          <source>A collection of child controls. The key for each child is the name under which it is registered.</source>
          <target state="translated">子コントロールのコレクション。各子のキーは、登録されている名前です。</target>
        </trans-unit>
        <trans-unit id="e3c018291c1c8e9ad7721160cc26f0757854e025" translate="yes" xml:space="preserve">
          <source>A collection of matrix and query URL parameters.</source>
          <target state="translated">マトリックスとクエリURLパラメータのコレクション。</target>
        </trans-unit>
        <trans-unit id="02b47ee82f7b322d5994b10809aa0af420e20886" translate="yes" xml:space="preserve">
          <source>A collection of schematics to use in generating the initial app.</source>
          <target state="translated">初期アプリを生成する際に使用する回路図集。</target>
        </trans-unit>
        <trans-unit id="35817c17df34196664d458d6da1bf6de8adafe3c" translate="yes" xml:space="preserve">
          <source>A collection of schematics to use in generating the initial application.</source>
          <target state="translated">初期アプリケーションを生成する際に使用する回路図集。</target>
        </trans-unit>
        <trans-unit id="49de467612a944b52b3ee2139bdfbfdf3eb1f6bd" translate="yes" xml:space="preserve">
          <source>A common UI pattern is to show a spinner while the async validation is being performed. The following example presents how to achieve this with template-driven forms:</source>
          <target state="translated">一般的な UI パターンは、非同期検証が実行されている間にスピナーを表示することです。次の例は、テンプレート駆動型のフォームでこれを実現する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8f2cc38548e3292bbe0d9ba879bd191b4f73c3e1" translate="yes" xml:space="preserve">
          <source>A common UI pattern is to show a spinner while the async validation is being performed. The following example shows how to achieve this in a template-driven form.</source>
          <target state="translated">一般的な UI パターンは、非同期検証が実行されている間にスピナーを表示することです。次の例は、テンプレート駆動型のフォームでこれを実現する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ce73dbb5d1ae47fbdffe9c0fd617787f054bac11" translate="yes" xml:space="preserve">
          <source>A common pattern in Angular is sharing data between a parent component and one or more child components. You can implement this pattern by using the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; directives.</source>
          <target state="translated">Angularの一般的なパターンは、親コンポーネントと1つ以上の子コンポーネント間でデータを共有することです。このパターンは、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ディレクティブを使用して実装できます。</target>
        </trans-unit>
        <trans-unit id="73601be2b237a028eed4e60c358bde8f29e0c28d" translate="yes" xml:space="preserve">
          <source>A common point of confusion is between the attribute, &lt;code&gt;colspan&lt;/code&gt;, and the property, &lt;code&gt;colSpan&lt;/code&gt;. Notice that these two names differ by only a single letter.</source>
          <target state="translated">よくある混乱のポイントは、属性 &lt;code&gt;colspan&lt;/code&gt; とプロパティ &lt;code&gt;colSpan&lt;/code&gt; の間です。これらの2つの名前は1文字だけ異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="69456c6f954b99f121b55678f6c07297aff78691" translate="yes" xml:space="preserve">
          <source>A common problem of web applications is their slow initial load time. A way to improve it is to apply more granular code-splitting on a component level. To encourage this practice, we&amp;rsquo;ll be working on more ergonomic code-splitting APIs.</source>
          <target state="translated">Webアプリケーションの一般的な問題は、初期ロード時間が遅いことです。これを改善する方法は、コンポーネントレベルでより詳細なコード分割を適用することです。このプラクティスを促進するために、より人間工学的なコード分割APIに取り組んでいきます。</target>
        </trans-unit>
        <trans-unit id="885e7fc7945af15a44a7433f76f715e8914300bc" translate="yes" xml:space="preserve">
          <source>A common way to handle events is to pass the event object, &lt;code&gt;$event&lt;/code&gt;, to the method handling the event. The &lt;code&gt;$event&lt;/code&gt; object often contains information the method needs, such as a user's name or an image URL.</source>
          <target state="translated">イベントを処理する一般的な方法は、イベントオブジェクト &lt;code&gt;$event&lt;/code&gt; 処理するメソッドに渡すことです。 &lt;code&gt;$event&lt;/code&gt; オブジェクトは、多くの場合、情報に、ユーザの名前などの方法が必要、または画像URLが含まれています。</target>
        </trans-unit>
        <trans-unit id="99b05c916350f6878980197b92e815e9e04cfceb" translate="yes" xml:space="preserve">
          <source>A component and its template together define a &lt;em&gt;view&lt;/em&gt;. A component can contain a &lt;em&gt;view hierarchy&lt;/em&gt;, which allows you to define arbitrarily complex areas of the screen that can be created, modified, and destroyed as a unit. A view hierarchy can mix views defined in components that belong to different NgModules. This is often the case, especially for UI libraries.</source>
          <target state="translated">コンポーネントとそのテンプレートによって、&lt;em&gt;ビューが&lt;/em&gt;定義され&lt;em&gt;ます&lt;/em&gt;。コンポーネントには&lt;em&gt;ビュー階層&lt;/em&gt;を含めることができます。これにより、1つの単位として作成、変更、破棄できる画面の複雑な領域を任意に定義できます。ビュー階層は、異なるNgModuleに属するコンポーネントで定義されたビューを混在させることができます。これは、特にUIライブラリの場合によく発生します。</target>
        </trans-unit>
        <trans-unit id="8beed4fbb0126f7f0007052e50e1d5d70b721129" translate="yes" xml:space="preserve">
          <source>A component can also be bootstrapped imperatively in the module's &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.</source>
          <target state="translated">コンポーネントは、モジュールの &lt;code&gt;ngDoBootstrap()&lt;/code&gt; メソッドで強制的にブートストラップすることもできます。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; プロパティには、これはエントリコンポーネントであり、それは、このコンポーネントを使用してアプリケーションをブートストラップするためのコードを生成する必要があることをコンパイラに指示します。</target>
        </trans-unit>
        <trans-unit id="349d889988965929270cf02c44fe4300103b85b1" translate="yes" xml:space="preserve">
          <source>A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an &lt;em&gt;injectable service class&lt;/em&gt;, you make those tasks available to any component. You can also make your app more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</source>
          <target state="translated">コンポーネントは、サーバーからのデータのフェッチ、ユーザー入力の検証、コンソールへの直接ロギングなどの特定のタスクをサービスに委任できます。そのような処理タスクを&lt;em&gt;注入可能なサービスクラス&lt;/em&gt;で定義することにより、それらのタスクを任意のコンポーネントで使用できるようにします。また、状況に応じて、同じ種類のサービスの異なるプロバイダーを注入することで、アプリをより適応性の高いものにすることもできます。</target>
        </trans-unit>
        <trans-unit id="b089964fae5995b808c695e4e6ccb3aa1ad7e195" translate="yes" xml:space="preserve">
          <source>A component class can provide services in two ways:</source>
          <target state="translated">コンポーネント・クラスは2つの方法でサービスを提供することができます。</target>
        </trans-unit>
        <trans-unit id="4e0698d00f7c06c14c5adbf78185465c6c2d62a2" translate="yes" xml:space="preserve">
          <source>A component consists of three things:</source>
          <target state="translated">コンポーネントは3つのもので構成されています。</target>
        </trans-unit>
        <trans-unit id="d3deadf277697045847584c362a7d410307968ce" translate="yes" xml:space="preserve">
          <source>A component could be exported for inclusion in an external component's template as well as dynamically loaded in a pop-up dialog.</source>
          <target state="translated">コンポーネントは、外部コンポーネントのテンプレートに含めるためにエクスポートしたり、ポップアップダイアログに動的にロードしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="4376fb2839e7c64ec0202336bf07980d7bed69f9" translate="yes" xml:space="preserve">
          <source>A component could be imported from another app module (so you can't declare it) and re-exported by this module.</source>
          <target state="translated">コンポーネントを別のアプリモジュールからインポートして(宣言できないように)、このモジュールで再エクスポートすることができます。</target>
        </trans-unit>
        <trans-unit id="c8224b2c88f45e2e0d1d4bc43fbec26ccaddb28a" translate="yes" xml:space="preserve">
          <source>A component definition that implements the abstract class.</source>
          <target state="translated">抽象クラスを実装したコンポーネント定義。</target>
        </trans-unit>
        <trans-unit id="3f0018d9ac3de8a0f037aa98debd4be0b91710f9" translate="yes" xml:space="preserve">
          <source>A component factory creates a pure, 100% JavaScript representation of the component that incorporates everything described in its &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata: the HTML, the binding instructions, the attached styles.</source>
          <target state="translated">コンポーネントファクトリは、コンポーネントの純粋な100％JavaScript表現を作成します。これには、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータに記述されているすべての要素（HTML、バインディング指示、添付されたスタイル）が組み込まれます。</target>
        </trans-unit>
        <trans-unit id="7ca9baec5343b3b87182e2a1a6324223b5db317e" translate="yes" xml:space="preserve">
          <source>A component file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.ts&lt;/code&gt;</source>
          <target state="translated">コンポーネントファイル &lt;code&gt;&amp;lt;component-name&amp;gt;.component.ts&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb8b1bfad611823c2a3c34eda791bc349a459653" translate="yes" xml:space="preserve">
          <source>A component has a lifecycle managed by Angular.</source>
          <target state="translated">コンポーネントにはAngularで管理されたライフサイクルがあります。</target>
        </trans-unit>
        <trans-unit id="280add6e8ec324a17cb196d50312c8e21c6ae6eb" translate="yes" xml:space="preserve">
          <source>A component instance has a lifecycle that starts when Angular instantiates the component class and renders the component view along with its child views. The lifecycle continues with change detection, as Angular checks to see when data-bound properties change, and updates both the view and the component instance as needed. The lifecycle ends when Angular destroys the component instance and removes its rendered template from the DOM. Directives have a similar lifecycle, as Angular creates, updates, and destroys instances in the course of execution.</source>
          <target state="translated">コンポーネントインスタンスにはライフサイクルがあり、Angularがコンポーネントクラスのインスタンスを作成し、子ビューと共にコンポーネントビューをレンダリングすることでライフサイクルが始まります。ライフサイクルは変更の検出とともに続き、Angularはデータバインドされたプロパティが変更されたかどうかをチェックし、必要に応じてビューとコンポーネントインスタンスの両方を更新します。ライフサイクルはAngularがコンポーネントインスタンスを破棄し、レンダリングされたテンプレートをDOMから削除することで終了します。ディレクティブも同様のライフサイクルを持ち、Angularは実行中にインスタンスを作成、更新、破棄します。</target>
        </trans-unit>
        <trans-unit id="dc5e2a63b05a82806539717c333ee5cad057e231" translate="yes" xml:space="preserve">
          <source>A component is a special type of directive, which means that just as &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; has a &lt;code&gt;providers&lt;/code&gt; property, &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; does too. This means that directives as well as components can configure providers, using the &lt;code&gt;providers&lt;/code&gt; property. When you configure a provider for a component or directive using the &lt;code&gt;providers&lt;/code&gt; property, that provider belongs to the &lt;code&gt;ElementInjector&lt;/code&gt; of that component or directive. Components and directives on the same element share an injector.</source>
          <target state="translated">コンポーネントは特別なタイプのディレクティブです。つまり、 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; に &lt;code&gt;providers&lt;/code&gt; プロパティがあるのと同じように、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; も同じです。つまり、ディレクティブだけでなくコンポーネントも、 &lt;code&gt;providers&lt;/code&gt; プロパティを使用してプロバイダーを構成できます。 &lt;code&gt;providers&lt;/code&gt; プロパティを使用してコンポーネントまたはディレクティブのプロバイダーを構成すると、そのプロバイダーはそのコンポーネントまたはディレクティブの &lt;code&gt;ElementInjector&lt;/code&gt; に属します。同じ要素のコンポーネントとディレクティブはインジェクターを共有します。</target>
        </trans-unit>
        <trans-unit id="eb35cf391db16a6090f219d3a04cb176787fe7d9" translate="yes" xml:space="preserve">
          <source>A component is technically a directive. However, components are so distinctive and central to Angular applications that Angular defines the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator, which extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">コンポーネントは技術的にはディレクティブです。ただし、コンポーネントは非常に独特で、Angularアプリケーションの中心であり、Angularは &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレーターを定義します。これにより、テンプレート指向の機能で &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; デコレーターが拡張されます。</target>
        </trans-unit>
        <trans-unit id="add1d0740c9dbeaff24d9a4e670b5061d080dadb" translate="yes" xml:space="preserve">
          <source>A component loaded &lt;em&gt;declaratively&lt;/em&gt; via its selector is &lt;em&gt;not&lt;/em&gt; an entry component.</source>
          <target state="translated">セレクタを介して&lt;em&gt;宣言的に&lt;/em&gt;ロードされたコンポーネント&lt;em&gt;は&lt;/em&gt;、エントリコンポーネントではあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="39781f405ce3d449d20cd226f0eed9481dbe5f83" translate="yes" xml:space="preserve">
          <source>A component must belong to an NgModule in order for it to be available to another component or application. To make it a member of an NgModule, list it in the &lt;code&gt;declarations&lt;/code&gt; field of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">コンポーネントは、別のコンポーネントまたはアプリケーションで使用できるように、NgModuleに属している必要があります。NgModuleのメンバーにするには、 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;declarations&lt;/code&gt; フィールドにリストします。</target>
        </trans-unit>
        <trans-unit id="8e42b0c392b91ddd75a931ad25526b427360d793" translate="yes" xml:space="preserve">
          <source>A component template can &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;reference&lt;/a&gt; another component, directive, or pipe when the reference is declared in this module or if the imported module has exported it. For example, a component can use the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt; directives only if the module has imported the Angular &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; (perhaps indirectly by importing &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">コンポーネントテンプレートは、参照がこのモジュールで宣言されている場合、またはインポートされたモジュールがエクスポートした場合、別のコンポーネント、ディレクティブ、またはパイプを&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;参照&lt;/a&gt;できます。たとえば、モジュールがAngular &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; を（おそらく &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートすることによって間接的に）インポートした場合にのみ、コンポーネントは &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;NgFor&lt;/code&gt; ディレクティブを使用できます。</target>
        </trans-unit>
        <trans-unit id="64cd250b9979025915cabb6d33b78c1f69b9d52e" translate="yes" xml:space="preserve">
          <source>A component that could serve as a parent &lt;em&gt;should&lt;/em&gt; implement the class interface as the &lt;code&gt;AliceComponent&lt;/code&gt; does.</source>
          <target state="translated">親として機能できるコンポーネントは、 &lt;code&gt;AliceComponent&lt;/code&gt; と同じようにクラスインターフェイスを実装する&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="941975be9e80c257e732d44a8ebcc5fc939e3e3a" translate="yes" xml:space="preserve">
          <source>A component that injects a lightweight injection token might need to invoke a method in the injected class. Because the token is now an abstract class, and the injectable component implements that class, you must also declare an abstract method in the abstract lightweight injection token class. The implementation of the method (with all of its code overhead) resides in the injectable component that can be tree-shaken. This allows the parent to communicate with the child (if it is present) in a type-safe manner.</source>
          <target state="translated">軽量インジェクション・トークンを注入するコンポーネントは、注入されたクラスのメソッドを呼び出す必要がある場合があります。トークンは抽象クラスになり、注入可能なコンポーネントはそのクラスを実装しているため、軽量インジェクション・トークンの抽象クラスでも抽象メソッドを宣言する必要があります。メソッドの実装(すべてのコードオーバーヘッドを含む)は、ツリーシェイク可能なインジェクト可能なコンポーネントに存在します。これにより、親は(存在すれば)子と型安全な方法で通信することができます。</target>
        </trans-unit>
        <trans-unit id="499d23697c7f20e6ec22c3119de0c4a05d9a58e5" translate="yes" xml:space="preserve">
          <source>A component with inputs and outputs typically appears inside the view template of a host component. The host uses a property binding to set the input property and an event binding to listen to events raised by the output property.</source>
          <target state="translated">入力と出力を持つコンポーネントは、通常、ホストコンポーネントのビューテンプレート内に表示されます。ホストは、入力プロパティを設定するためにプロパティバインディングを使用し、出力プロパティによって発生するイベントをリッスンするためにイベントバインディングを使用します。</target>
        </trans-unit>
        <trans-unit id="d3e1336ad22fdd6630c5534d49b4b6f33d95e613" translate="yes" xml:space="preserve">
          <source>A component you specify in a route definition.</source>
          <target state="translated">ルート定義で指定するコンポーネント。</target>
        </trans-unit>
        <trans-unit id="1921733ec87213ae324063a594427212b01dfd9e" translate="yes" xml:space="preserve">
          <source>A component, such as &lt;code&gt;ConfigComponent&lt;/code&gt;, injects the &lt;code&gt;ConfigService&lt;/code&gt; and calls the &lt;code&gt;getConfig&lt;/code&gt; service method.</source>
          <target state="translated">&lt;code&gt;ConfigComponent&lt;/code&gt; などのコンポーネントは、 &lt;code&gt;ConfigService&lt;/code&gt; を &lt;code&gt;getConfig&lt;/code&gt; 、getConfigサービスメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ddc9abdd56dcae660b1b5fdd43e549b91308f6a9" translate="yes" xml:space="preserve">
          <source>A component, unlike all other parts of an Angular application, combines an HTML template and a TypeScript class. The component truly is the template and the class &lt;em&gt;working together&lt;/em&gt;. To adequately test a component, you should test that they work together as intended.</source>
          <target state="translated">Angularアプリケーションの他のすべての部分とは異なり、コンポーネントはHTMLテンプレートとTypeScriptクラスを組み合わせたものです。コンポーネントは本当にテンプレートと&lt;em&gt;一緒に機能&lt;/em&gt;するクラスです。コンポーネントを適切にテストするには、コンポーネントが意図したとおりに機能することをテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="98e7a6058cbd18c8d57a0d87274cdac45aaecd6d" translate="yes" xml:space="preserve">
          <source>A configuration object that defines a single route. A set of routes are collected in a &lt;code&gt;&lt;a href=&quot;router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array to define a &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; configuration. The router attempts to match segments of a given URL against each route, using the configuration options defined in this object.</source>
          <target state="translated">単一のルートを定義する構成オブジェクト。 &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 構成を定義するために、一連のルートが &lt;code&gt;&lt;a href=&quot;router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列に収集されます。ルーターは、このオブジェクトで定義された構成オプションを使用して、特定のURLのセグメントを各ルートと照合しようとします。</target>
        </trans-unit>
        <trans-unit id="e647343b7b8f98c675920da38a07c8f9f188b5ed" translate="yes" xml:space="preserve">
          <source>A configuration object that defines a single route. A set of routes are collected in a &lt;code&gt;&lt;a href=&quot;routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array to define a &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; configuration. The router attempts to match segments of a given URL against each route, using the configuration options defined in this object.</source>
          <target state="translated">単一のルートを定義する構成オブジェクト。 &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 構成を定義するために、一連のルートが &lt;code&gt;&lt;a href=&quot;routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列に収集されます。ルーターは、このオブジェクトで定義された構成オプションを使用して、特定のURLのセグメントを各ルートと照合しようとします。</target>
        </trans-unit>
        <trans-unit id="4520e60162947e0d4f8bc410870de69a92317566" translate="yes" xml:space="preserve">
          <source>A configuration that initializes an NgElementConstructor with the dependencies and strategy it needs to transform a component into a custom element class.</source>
          <target state="translated">コンポーネントをカスタム要素クラスに変換するために必要な依存関係と戦略で NgElementConstructor を初期化する設定。</target>
        </trans-unit>
        <trans-unit id="5ee57bfc72b82baa4a0dd6579c0dbcb1d2fa549f" translate="yes" xml:space="preserve">
          <source>A configuration that provides initialization information to the created class.</source>
          <target state="translated">作成されたクラスに初期化情報を提供する設定。</target>
        </trans-unit>
        <trans-unit id="4b7a75de7a7dd9fd3c6c2e1cb2bcd7c662897553" translate="yes" xml:space="preserve">
          <source>A context object to attach to the &lt;a href=&quot;../core/embeddedviewref&quot;&gt;&lt;code&gt;EmbeddedViewRef&lt;/code&gt;&lt;/a&gt;. This should be an object, the object's keys will be available for binding by the local template &lt;code&gt;let&lt;/code&gt; declarations. Using the key &lt;code&gt;$implicit&lt;/code&gt; in the context object will set its value as default.</source>
          <target state="translated">&lt;a href=&quot;../core/embeddedviewref&quot;&gt; &lt;code&gt;EmbeddedViewRef&lt;/code&gt; &lt;/a&gt;にアタッチするコンテキストオブジェクト。これはオブジェクトである必要があります。オブジェクトのキーは、ローカルテンプレートの &lt;code&gt;let&lt;/code&gt; 宣言によるバインドに使用できます。コンテキストオブジェクトでキー &lt;code&gt;$implicit&lt;/code&gt; を使用すると、その値がデフォルトとして設定されます。</target>
        </trans-unit>
        <trans-unit id="8d2d4d92f8439cb0040f95f6d3290be29ab4aa19" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;dirty&lt;/code&gt; if the user has changed the value in the UI.</source>
          <target state="translated">ユーザーがUIで値を変更した場合、コントロールは &lt;code&gt;dirty&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9327f6896bdca186045601aa3c45f1660eb789f4" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;disabled&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;DISABLED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;DISABLED&lt;/code&gt; の場合、コントロールは &lt;code&gt;disabled&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="82fb23ab120d8e1d1e08017df8326c89e3cb2d80" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;enabled&lt;/code&gt; as long as its &lt;code&gt;status&lt;/code&gt; is not &lt;code&gt;DISABLED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;DISABLED&lt;/code&gt; でない限り、コントロールは &lt;code&gt;enabled&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f2ffd744d5627ca35c2757537e16fdf5ec3e29d2" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;invalid&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;INVALID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;INVALID&lt;/code&gt; の場合、コントロールは &lt;code&gt;invalid&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a47d095af794f1f2d7e0cc865234a5f4331e5e8f" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;pending&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;PENDING&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;PENDING&lt;/code&gt; の場合、コントロールは &lt;code&gt;pending&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2361448b385344eb49836b469c86903441a98793" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;pristine&lt;/code&gt; if the user has not yet changed the value in the UI.</source>
          <target state="translated">ユーザーがUIで値をまだ変更していない場合、コントロールは &lt;code&gt;pristine&lt;/code&gt; 状態です。</target>
        </trans-unit>
        <trans-unit id="8dedc3e5db6396d4275bcbc93943c800fcb96a11" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;untouched&lt;/code&gt; if the user has not yet triggered a &lt;code&gt;blur&lt;/code&gt; event on it.</source>
          <target state="translated">ユーザーがまだコントロールで &lt;code&gt;blur&lt;/code&gt; イベントをトリガーしていない場合、コントロールは変更 &lt;code&gt;untouched&lt;/code&gt; ません。</target>
        </trans-unit>
        <trans-unit id="662ee3af64fa768ec48be3840af08c1ff766946c" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;valid&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;VALID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;VALID&lt;/code&gt; の場合、コントロールは &lt;code&gt;valid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c96dbfe8e7a308aa5f340515594b71ba14d67cb" translate="yes" xml:space="preserve">
          <source>A control is marked &lt;code&gt;touched&lt;/code&gt; once the user has triggered a &lt;code&gt;blur&lt;/code&gt; event on it.</source>
          <target state="translated">ユーザーがコントロールで &lt;code&gt;blur&lt;/code&gt; イベントをトリガーすると、コントロールは &lt;code&gt;touched&lt;/code&gt; としてマークされます。</target>
        </trans-unit>
        <trans-unit id="077b31470ebd608b300ba3d8e68f55768bc26f76" translate="yes" xml:space="preserve">
          <source>A control is pending while the control performs async validation.</source>
          <target state="translated">コントロールが非同期検証を実行している間、コントロールは保留されています。</target>
        </trans-unit>
        <trans-unit id="20010f105963bf11938a19a5e0f2c55c1232a5a2" translate="yes" xml:space="preserve">
          <source>A corresponding function defines a set of parameters for each category, and collects them into a corresponding &lt;code&gt;&lt;a href=&quot;animationmetadata&quot;&gt;AnimationMetadata&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">対応する関数は、各カテゴリのパラメータのセットを定義し、それらを対応する &lt;code&gt;&lt;a href=&quot;animationmetadata&quot;&gt;AnimationMetadata&lt;/a&gt;&lt;/code&gt; オブジェクトに収集します。</target>
        </trans-unit>
        <trans-unit id="c4431d17b6bd0b4e139d23f69b87553db73c04b2" translate="yes" xml:space="preserve">
          <source>A couple of extra providers enable routing with &quot;hash&quot; URLs such as &lt;code&gt;#!/phones&lt;/code&gt; instead of the default &quot;push state&quot; strategy.</source>
          <target state="translated">いくつかの追加プロバイダーにより、デフォルトの「プッシュ状態」戦略の代わりに、 &lt;code&gt;#!/phones&lt;/code&gt; などの「ハッシュ」URLを使用したルーティングが可能になります。</target>
        </trans-unit>
        <trans-unit id="0b3b73324dced072c7c998b9b615730a1cfe9df7" translate="yes" xml:space="preserve">
          <source>A couple of observations:</source>
          <target state="translated">いくつか観察してみました。</target>
        </trans-unit>
        <trans-unit id="cead82c2a3576abd5bbfffd3a278cd74d11896ea" translate="yes" xml:space="preserve">
          <source>A crisis center with child routes</source>
          <target state="translated">子どもルートのある危機管理センター</target>
        </trans-unit>
        <trans-unit id="d696bc9b7e4bc40435fff12b3833af21db44d854" translate="yes" xml:space="preserve">
          <source>A critical alert.</source>
          <target state="translated">危機一髪。</target>
        </trans-unit>
        <trans-unit id="dda359a5b2152b76b3b7c5509f76dff57027bf0a" translate="yes" xml:space="preserve">
          <source>A critical point</source>
          <target state="translated">臨界点</target>
        </trans-unit>
        <trans-unit id="3c8bfeefb7c281566a1611017b18081b53645b6e" translate="yes" xml:space="preserve">
          <source>A cross-field validator is a &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validator&lt;/a&gt; that compares the values of different fields in a form and accepts or rejects them in combination. For example, you might have a form that offers mutually incompatible options, so that if the user can choose A or B, but not both. Some field values might also depend on others; a user might be allowed to choose B only if A is also chosen.</source>
          <target state="translated">クロスフィールドバリデーターは、フォーム内のさまざまなフィールドの値を比較し、それらを組み合わせて受け入れるか拒否する&lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーター&lt;/a&gt;です。たとえば、相互に互換性のないオプションを提供するフォームがある場合、ユーザーはAまたはBを選択できますが、両方を選択することはできません。一部のフィールド値は他の値にも依存する場合があります。ユーザーは、Aも選択されている場合にのみ、Bを選択できる場合があります。</target>
        </trans-unit>
        <trans-unit id="ce6317a4ac2bc019a91d33b9bae2729a5b87ff60" translate="yes" xml:space="preserve">
          <source>A custom URL-matching function. Cannot be used together with &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">カスタムURLマッチング関数。 &lt;code&gt;path&lt;/code&gt; 一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="fdafdc4619b6863a9e092a97e8ef06300d64b092" translate="yes" xml:space="preserve">
          <source>A custom element &lt;em&gt;hosts&lt;/em&gt; an Angular component, providing a bridge between the data and logic defined in the component and standard DOM APIs. Component properties and logic maps directly into HTML attributes and the browser's event system.</source>
          <target state="translated">カスタム要素&lt;em&gt;は&lt;/em&gt; Angularコンポーネントを&lt;em&gt;ホスト&lt;/em&gt;し、コンポーネントと標準のDOM APIで定義されたデータとロジックの間のブリッジを提供します。コンポーネントのプロパティとロジックは、HTML属性とブラウザのイベントシステムに直接マップされます。</target>
        </trans-unit>
        <trans-unit id="50fbd9a7a05110984303e83f01d313340150d8d9" translate="yes" xml:space="preserve">
          <source>A custom element extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. The browser maintains a &lt;code&gt;CustomElementRegistry&lt;/code&gt; of defined custom elements (also called Web Components), which maps an instantiable JavaScript class to an HTML tag.</source>
          <target state="translated">カスタム要素は、コンテンツがJavaScriptコードによって作成および制御されるタグを定義できるようにすることで、HTMLを拡張します。ブラウザは、インスタンス化可能なJavaScriptクラスをHTMLタグにマップする、定義済みのカスタム要素（Webコンポーネントとも呼ばれます）の &lt;code&gt;CustomElementRegistry&lt;/code&gt; を維持します。</target>
        </trans-unit>
        <trans-unit id="6c725e2134906977cd73632a4b80c11367108a21" translate="yes" xml:space="preserve">
          <source>A custom error handler for failed navigations.</source>
          <target state="translated">失敗したナビゲーションのためのカスタムエラーハンドラ。</target>
        </trans-unit>
        <trans-unit id="02d01b0f56b77bb7d6e1408ef6895eb591a41c22" translate="yes" xml:space="preserve">
          <source>A custom error handler for failed navigations. If the handler returns a value, the navigation Promise is resolved with this value. If the handler throws an exception, the navigation Promise is rejected with the exception.</source>
          <target state="translated">失敗したナビゲーションのためのカスタム・エラー・ハンドラ。ハンドラが値を返す場合、ナビゲーション・プロミスはこの値で解決されます。ハンドラが例外を投げる場合、ナビゲーションプロミスは例外で拒否されます。</target>
        </trans-unit>
        <trans-unit id="1ffa2867cc36c1d87f7f95eef71a929854ba1538" translate="yes" xml:space="preserve">
          <source>A custom event from an interceptor or a backend.</source>
          <target state="translated">インターセプターやバックエンドからのカスタムイベント。</target>
        </trans-unit>
        <trans-unit id="508d36eb8404c69db7405f018e84a6ca55036f9b" translate="yes" xml:space="preserve">
          <source>A custom handler for malformed URI errors. The handler is invoked when &lt;code&gt;encodedURI&lt;/code&gt; contains invalid character sequences. The default implementation is to redirect to the root URL, dropping any path or parameter information. The function takes three parameters:</source>
          <target state="translated">不正な形式のURIエラーのカスタムハンドラー。ハンドラーは、 &lt;code&gt;encodedURI&lt;/code&gt; に無効な文字シーケンスが含まれている場合に呼び出されます。デフォルトの実装では、ルートURLにリダイレクトし、パスまたはパラメーター情報をすべてドロップします。この関数は3つのパラメーターを取ります。</target>
        </trans-unit>
        <trans-unit id="8a2cf3cd14adbe7b98e625d7305635cef34ff8bf" translate="yes" xml:space="preserve">
          <source>A data flow model where the component tree is always checked for changes in one direction (parent to child), which prevents cycles in the change detection graph.</source>
          <target state="translated">コンポーネントツリーが常に一方向(親から子へ)の変化をチェックしているデータフローモデルで、変化検出グラフのサイクルを防止します。</target>
        </trans-unit>
        <trans-unit id="210dc781bd3eb286264d5aef72455eddddea7bdc" translate="yes" xml:space="preserve">
          <source>A data service encapsulates these details. It's easier to evolve these details inside the service without affecting its consumers. And it's easier to test the consumers with mock service implementations.</source>
          <target state="translated">データサービスは、これらの詳細をカプセル化します。サービスの消費者に影響を与えることなく、サービスの内部でこれらの詳細を進化させることが容易になります。また、モックサービスの実装で消費者をテストするのも簡単です。</target>
        </trans-unit>
        <trans-unit id="5fd0ebebf76062ac0cdbc96c6dac75750fffde56" translate="yes" xml:space="preserve">
          <source>A declarable belongs to one and only one NgModule. A module can list another module among its exports, in which case all of that module's public declaration are exported.</source>
          <target state="translated">宣言可能なものは、1つのNgModuleに属します。モジュールは、そのエクスポートの中に別のモジュールをリストアップすることができ、その場合、そのモジュールの公開宣言はすべてエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="d9d67cd229281a6464e06b9627732572303daf22" translate="yes" xml:space="preserve">
          <source>A declarable can only belong to one module, so only declare it in one &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. When you need it elsewhere, import the module that has the declarable you need in it.</source>
          <target state="translated">申告は、一つだけのモジュールに属し、その一つだけでそれを宣言することができます &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。他の場所で必要な場合は、必要な宣言型を含むモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="1a3c15ea9c54b23acd006a80632a4370109b2319" translate="yes" xml:space="preserve">
          <source>A decorator on a component class adds the metadata, including a pointer to the associated template.</source>
          <target state="translated">コンポーネント・クラスのデコレータは、関連するテンプレートへのポインタを含むメタデータを追加します。</target>
        </trans-unit>
        <trans-unit id="d9232145f0fa479629bee4a1403931108d3b67c5" translate="yes" xml:space="preserve">
          <source>A default implementation of the &lt;code&gt;&lt;a href=&quot;router/urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt; のデフォルト実装。</target>
        </trans-unit>
        <trans-unit id="be7410185cfb22d50bdb3dd5b8d69a91b30d1843" translate="yes" xml:space="preserve">
          <source>A default implementation of the &lt;code&gt;&lt;a href=&quot;urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt; のデフォルト実装。</target>
        </trans-unit>
        <trans-unit id="d5edf00cab75a5f261a00303a58b3784ef41af25" translate="yes" xml:space="preserve">
          <source>A delay value.</source>
          <target state="translated">遅延値。</target>
        </trans-unit>
        <trans-unit id="30019a94791709ed7ee12c9d2a7e97d0717eab83" translate="yes" xml:space="preserve">
          <source>A dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; configures an injector with a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt;, which that injector uses to provide the concrete, runtime version of a dependency value. The injector relies on the provider configuration to create instances of the dependencies that it injects into components, directives, pipes, and other services.</source>
          <target state="translated">依存関係&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;は、&lt;a href=&quot;glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;を使用してインジェクターを構成します。DIトークンは、依存関係値の具体的な実行時バージョンを提供するために使用します。インジェクターは、プロバイダー構成に依存して、コンポーネント、ディレクティブ、パイプ、およびその他のサービスに注入する依存関係のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="51f38719f370be9d130886d8c0bd44a8365fee81" translate="yes" xml:space="preserve">
          <source>A dependency can't always be created by the default method of instantiating a class. You learned about some other methods in &lt;a href=&quot;dependency-injection-providers&quot;&gt;Dependency Providers&lt;/a&gt;. The following &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; example demonstrates many of the alternatives and why you need them. It's visually simple: a few properties and the logs produced by a logger.</source>
          <target state="translated">依存関係は、クラスをインスタンス化するデフォルトの方法で常に作成できるとは限りません。&lt;a href=&quot;dependency-injection-providers&quot;&gt;依存関係プロバイダーで&lt;/a&gt;他のいくつかのメソッドについて学びました。次の &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; の例は、多くの選択肢と、それらが必要な理由を示しています。見た目はシンプルです。いくつかのプロパティと、ロガーによって生成されたログです。</target>
        </trans-unit>
        <trans-unit id="9f695238eb1ba6e7f4b219ba97b438b3b7e53b33" translate="yes" xml:space="preserve">
          <source>A dependency doesn't have to be a service&amp;mdash;it could be a function, for example, or a value.</source>
          <target state="translated">依存関係はサービスである必要はありません。たとえば、関数や値などです。</target>
        </trans-unit>
        <trans-unit id="15525a2b2d3a0191259341bf53ae12f208e1ea57" translate="yes" xml:space="preserve">
          <source>A design pattern and mechanism for creating and delivering some parts of an application (dependencies) to other parts of an application that require them.</source>
          <target state="translated">アプリケーションの一部(依存関係)を作成し、それを必要とするアプリケーションの他の部分に配信するための設計パターンとメカニズム。</target>
        </trans-unit>
        <trans-unit id="cbba6be02bb4ee14ea720baacb075129dc0348dc" translate="yes" xml:space="preserve">
          <source>A differ that tracks changes made to an object over time.</source>
          <target state="translated">時間の経過とともにオブジェクトに加えられた変更を追跡する差分。</target>
        </trans-unit>
        <trans-unit id="ba0e47b0105f6046e0b89617ee3f13f2bdf94e04" translate="yes" xml:space="preserve">
          <source>A directive &lt;em&gt;class&lt;/em&gt; is spelled in &lt;em&gt;UpperCamelCase&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;). A directive's &lt;em&gt;attribute name&lt;/em&gt; is spelled in &lt;em&gt;lowerCamelCase&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;). The guide refers to the directive &lt;em&gt;class&lt;/em&gt; when talking about its properties and what the directive does. The guide refers to the &lt;em&gt;attribute name&lt;/em&gt; when describing how you apply the directive to an element in the HTML template.</source>
          <target state="translated">ディレクティブ&lt;em&gt;クラスの&lt;/em&gt;スペルは、&lt;em&gt;UpperCamelCase&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ）です。ディレクティブの&lt;em&gt;属性名&lt;/em&gt;は&lt;em&gt;lowerCamelCase&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ）で綴られています。このガイドでは、そのプロパティとディレクティブの機能について説明するときに、ディレクティブ&lt;em&gt;クラスを&lt;/em&gt;参照しています。このガイドでは、HTMLテンプレートの要素にディレクティブを適用する方法を説明するときに、&lt;em&gt;属性名を&lt;/em&gt;参照してい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="94d1828685c2b046ca5fbb00127b0088df822914" translate="yes" xml:space="preserve">
          <source>A directive class is usually associated with an HTML element or attribute, and that element or attribute is often referred to as the directive itself. When Angular finds a directive in an HTML &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM.</source>
          <target state="translated">ディレクティブクラスは通常HTML要素または属性に関連付けられており、その要素または属性はしばしばディレクティブ自体と呼ばれます。AngularがHTML &lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;でディレクティブを見つけると、一致するディレクティブクラスインスタンスを作成し、インスタンスにブラウザーDOMのその部分を制御させます。</target>
        </trans-unit>
        <trans-unit id="e2eb8b30123eba9d5dc5274c6b45d8e83667dd30" translate="yes" xml:space="preserve">
          <source>A directive could hide the unwanted paragraph instead by setting its &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">ディレクティブは、 &lt;code&gt;display&lt;/code&gt; スタイルを &lt;code&gt;none&lt;/code&gt; に設定することにより、代わりに不要な段落を非表示にすることができます。</target>
        </trans-unit>
        <trans-unit id="fc3d1ce63988b28444f381ebc398b6bdf06ac41c" translate="yes" xml:space="preserve">
          <source>A directive has the same set of lifecycle hooks.</source>
          <target state="translated">ディレクティブは同じライフサイクルフックのセットを持っています。</target>
        </trans-unit>
        <trans-unit id="eb17837a767841446768a528a4105fa60a1be0ff" translate="yes" xml:space="preserve">
          <source>A directive must belong to exactly one NgModule. Do not re-declare a directive imported from another module. List the directive class in the &lt;code&gt;declarations&lt;/code&gt; field of an NgModule.</source>
          <target state="translated">ディレクティブは1つのNgModuleに属している必要があります。別のモジュールからインポートされたディレクティブを再宣言しないでください。NgModuleの &lt;code&gt;declarations&lt;/code&gt; フィールドにディレクティブクラスをリストします。</target>
        </trans-unit>
        <trans-unit id="06bab5b2f84f1d83b1636af97cad32ec246881f5" translate="yes" xml:space="preserve">
          <source>A directive that adds max length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最大長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="dc755aa288617ce267b9847c3b17e76a21d1135a" translate="yes" xml:space="preserve">
          <source>A directive that adds max length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最大長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="6e258f11d9d85d3806958b19413b937998de3ca2" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; mult-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最小長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="6108b6e8bd8eba3c4054af4d45141608b2f683ee" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最小長の検証を追加するディレクティブ。ディレクティブは、 &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="c576fdea0f4345495cbec00241aa643d607047f6" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; mult-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最小長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="8efc11bb0226ce15a8f8ef691ea95cb130ce8118" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最小長の検証を追加するディレクティブ。ディレクティブは、 &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="695db7155424e297167bd554b9d87c8adef8366a" translate="yes" xml:space="preserve">
          <source>A directive that adds regex pattern validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute. The regex must match the entire control value. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに正規表現パターン検証を追加するディレクティブ。正規表現は、制御値全体と一致する必要があります。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="0e7995cf0d230fbcb234007e53811a6559246b24" translate="yes" xml:space="preserve">
          <source>A directive that adds regex pattern validation to controls marked with the &lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute. The regex must match the entire control value. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに正規表現パターン検証を追加するディレクティブ。正規表現は、制御値全体と一致する必要があります。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="fecaa780233e30f2b7c4f880afba7d4f9c081262" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; validator to controls marked with the &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="66ea7083cabb25ae99d85dbbbd48442747569672" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; validator to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="e5b20651be4b4c212b50703b3396740bdd0ebf00" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;required&lt;/code&gt; validator to any controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="27d5b01c46cf928af7627e24610db90e1b702841" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;required&lt;/code&gt; validator to any controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="0540f8499c507f38f8fb31d44a122a56e3f34181" translate="yes" xml:space="preserve">
          <source>A distinct application feature or workflow may be &lt;em&gt;lazy loaded&lt;/em&gt; or &lt;em&gt;loaded on demand&lt;/em&gt; rather than when the application starts.</source>
          <target state="translated">個別のアプリケーション機能またはワークフローは、アプリケーションの起動時ではなく、&lt;em&gt;遅延ロード&lt;/em&gt;または&lt;em&gt;オンデマンド&lt;/em&gt;で&lt;em&gt;ロードされる&lt;/em&gt;場合があります。</target>
        </trans-unit>
        <trans-unit id="1eb6bea4ff9b8beaa04011a217d05d9557306c38" translate="yes" xml:space="preserve">
          <source>A domain NgModule organizes the code related to a certain function, containing all of the components, routing, and templates that make up the function. Your top component in the domain NgModule acts as the feature or domain's root, and is the only component you export. Private supporting subcomponents descend from it.</source>
          <target state="translated">ドメインNgModuleは、特定の機能に関連するコードを整理し、その機能を構成するすべてのコンポーネント、ルーティング、テンプレートを含んでいます。ドメインNgModuleの最上位のコンポーネントは、機能またはドメインのルートとして機能し、エクスポートする唯一のコンポーネントです。サポートするプライベートなサブコンポーネントはこれから派生します。</target>
        </trans-unit>
        <trans-unit id="0e65175079f38d7882ce624afc0a013c9135750a" translate="yes" xml:space="preserve">
          <source>A dot-delimited string or array of string/number values that define the path to the control.</source>
          <target state="translated">コントロールへのパスを定義するドット区切りの文字列または文字列/数値の配列。</target>
        </trans-unit>
        <trans-unit id="6b086b3a868f0313eed50c2f74d7d107c8d6b457" translate="yes" xml:space="preserve">
          <source>A download progress event was received.</source>
          <target state="translated">ダウンロード進行イベントが届きました。</target>
        </trans-unit>
        <trans-unit id="bf1fd3090342831e8febf29fa6ce244224f91de8" translate="yes" xml:space="preserve">
          <source>A download progress event.</source>
          <target state="translated">ダウンロード進行イベント。</target>
        </trans-unit>
        <trans-unit id="0b2f0df2707b012177ae022e3a57726cb45c379b" translate="yes" xml:space="preserve">
          <source>A dynamic form requires an object model that can describe all scenarios needed by the form functionality. The example hero-application form is a set of questions&amp;mdash;that is, each control in the form must ask a question and accept an answer.</source>
          <target state="translated">動的フォームには、フォーム機能に必要なすべてのシナリオを記述できるオブジェクトモデルが必要です。ヒーロー申請フォームの例は一連の質問です。つまり、フォーム内の各コントロールは質問をし、回答を受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="f9e9d69b64d87f54aef3ffc12cf639199159b805" translate="yes" xml:space="preserve">
          <source>A dynamic form uses a service to create grouped sets of input controls, based on the form model. The following &lt;code&gt;QuestionControlService&lt;/code&gt; collects a set of &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instances that consume the metadata from the question model. You can specify default values and validation rules.</source>
          <target state="translated">動的フォームは、サービスを使用して、フォームモデルに基づいて入力コントロールのグループ化されたセットを作成します。次の &lt;code&gt;QuestionControlService&lt;/code&gt; は、質問モデルからメタデータを使用する一連の &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを収集します。デフォルト値と検証ルールを指定できます。</target>
        </trans-unit>
        <trans-unit id="c274fbd2f10d6758f7cee43a610ad84394d5ef5e" translate="yes" xml:space="preserve">
          <source>A factory for creating a Compiler</source>
          <target state="translated">コンパイラを作成するためのファクトリー</target>
        </trans-unit>
        <trans-unit id="13178cecedfd2e1789373fa7414c20e56c226794" translate="yes" xml:space="preserve">
          <source>A factory function that returns a &lt;code&gt;&lt;a href=&quot;../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; instance associated with browser service providers.</source>
          <target state="translated">ブラウザサービスプロバイダーに関連付けられた &lt;code&gt;&lt;a href=&quot;../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; インスタンスを返すファクトリ関数。</target>
        </trans-unit>
        <trans-unit id="7f8d36a12b934ff22ab86e8c23f3cc869825223b" translate="yes" xml:space="preserve">
          <source>A factory function that returns a &lt;code&gt;&lt;a href=&quot;core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; instance associated with browser service providers.</source>
          <target state="translated">ブラウザサービスプロバイダーに関連付けられた &lt;code&gt;&lt;a href=&quot;core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; インスタンスを返すファクトリ関数。</target>
        </trans-unit>
        <trans-unit id="dcb9b28f9ee950cd3bc74acd3a0473356aed355b" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; から返されたファクトリオブジェクト。 &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="3bb2b6cb44a47bc6b53280d3511a8e67672f2032" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;build()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; から返されたファクトリオブジェクト。 &lt;code&gt;build()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="dfbb3a312624d276c0ae06bf2036ff66b531cb9d" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animations&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; から返されたファクトリオブジェクト。 &lt;code&gt;&lt;a href=&quot;animations&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="35e63cb078a72553634c9dd9e7e687d0c012cc2a" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;build()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; から返されたファクトリオブジェクト。 &lt;code&gt;build()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="950344dd2008bd842b31f199f0c2f6a76dc90bcc" translate="yes" xml:space="preserve">
          <source>A factory provider needs a factory function.</source>
          <target state="translated">工場の提供者には工場機能が必要です。</target>
        </trans-unit>
        <trans-unit id="9af1374f1b3a2d447374063ec0d712c6b3c1abfe" translate="yes" xml:space="preserve">
          <source>A feature module is an organizational best practice, as opposed to a concept of the core Angular API. A feature module delivers a cohesive set of functionality focused on a specific application need such as a user workflow, routing, or forms. While you can do everything within the root module, feature modules help you partition the app into focused areas. A feature module collaborates with the root module and with other modules through the services it provides and the components, directives, and pipes that it shares.</source>
          <target state="translated">機能モジュールは、コアとなるAngular APIの概念とは対照的な、組織的なベストプラクティスです。機能モジュールは、ユーザーのワークフロー、ルーティング、フォームなど、特定のアプリケーションのニーズに焦点を当てた、まとまりのある機能セットを提供します。ルートモジュール内ですべてを行うことができますが、機能モジュールはアプリをフォーカスした領域に分割するのに役立ちます。フィーチャーモジュールは、提供するサービスや共有するコンポーネント、ディレクティブ、パイプを通じて、ルートモジュールや他のモジュールと連携します。</target>
        </trans-unit>
        <trans-unit id="8a3f10b61215f1ebd7d50bf9977a58ca5d7430ea" translate="yes" xml:space="preserve">
          <source>A few HTML attributes have 1:1 mapping to properties; for example, &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">一部のHTML属性には、プロパティへの1：1マッピングがあります。たとえば、 &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cab7e438a119824aa31b72befbf1582a5325059e" translate="yes" xml:space="preserve">
          <source>A few examples are:</source>
          <target state="translated">いくつか例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="c6ee2c2b25cb84877c6a129970f10826dc9e4acb" translate="yes" xml:space="preserve">
          <source>A few of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance methods are not covered by static &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; methods. These are rarely needed.</source>
          <target state="translated">一部の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インスタンスメソッドは、静的な &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; &lt;em&gt;クラス&lt;/em&gt;メソッドでカバーされていません。これらはほとんど必要ありません。</target>
        </trans-unit>
        <trans-unit id="fe024a04a32763b23cf4aab61238ff280ef8b6c1" translate="yes" xml:space="preserve">
          <source>A few techniques are noteworthy:</source>
          <target state="translated">注目すべきは、いくつかのテクニックです。</target>
        </trans-unit>
        <trans-unit id="a9b6cd4fe72242d6d017b5e2e509342ea11bb39c" translate="yes" xml:space="preserve">
          <source>A few terms are unambiguously services. They typically indicate agency by ending in &quot;-er&quot;. You may prefer to name a service that logs messages &lt;code&gt;Logger&lt;/code&gt; rather than &lt;code&gt;LoggerService&lt;/code&gt;. Decide if this exception is agreeable in your project. As always, strive for consistency.</source>
          <target state="translated">いくつかの用語は明確にサービスです。通常、末尾が「-er」で代理店を示します。 &lt;code&gt;LoggerService&lt;/code&gt; ではなく、メッセージ &lt;code&gt;Logger&lt;/code&gt; を記録するサービスに名前を付けることをお勧めします。この例外がプロジェクトで同意できるかどうかを決定します。いつものように、一貫性のために努力してください。</target>
        </trans-unit>
        <trans-unit id="4b0543f1b2e2dc773052225d03a3ed8562e5819b" translate="yes" xml:space="preserve">
          <source>A file named &lt;code&gt;angular.json&lt;/code&gt; at the root level of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; provides workspace-wide and project-specific configuration defaults for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to the root workspace folder.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペースの&lt;/a&gt;ルートレベルにある &lt;code&gt;angular.json&lt;/code&gt; という名前のファイルは、Angular CLIによって提供されるビルドおよび開発ツールのワークスペース全体およびプロジェクト固有の構成のデフォルトを提供します。構成で指定されたパス値は、ルートワークスペースフォルダーを基準にしています。</target>
        </trans-unit>
        <trans-unit id="cdb64896ccc0908fbd528f490c377372ffb24bd2" translate="yes" xml:space="preserve">
          <source>A file named &lt;code&gt;angular.json&lt;/code&gt; at the root level of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; provides workspace-wide and project-specific configuration defaults for build and development tools that are provided by or integrated with the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペースの&lt;/a&gt;ルートレベルにある &lt;code&gt;angular.json&lt;/code&gt; という名前のファイルは、&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;によって提供または統合されたビルドおよび開発ツールのワークスペース全体およびプロジェクト固有の構成のデフォルトを提供します。</target>
        </trans-unit>
        <trans-unit id="1bef64fe13151ffc90fde1cc8e6483f43af6510c" translate="yes" xml:space="preserve">
          <source>A file specifies the root files and the compiler options required to compile a TypeScript project. For more information, see &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration&lt;/a&gt;.</source>
          <target state="translated">ファイルは、TypeScriptプロジェクトのコンパイルに必要なルートファイルとコンパイラオプションを指定します。詳細については、&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScriptの構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8c5daab9e4b40930ffc67ad08f9f7e944f2c8b0d" translate="yes" xml:space="preserve">
          <source>A final &lt;code&gt;&lt;a href=&quot;http/httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; which will dispatch the request via browser HTTP APIs to a backend.</source>
          <target state="translated">ブラウザのHTTP APIを介してリクエストをバックエンドにディスパッチする最後の &lt;code&gt;&lt;a href=&quot;http/httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63f7ebe21023a564f8979eb517f0a75bfaa7e096" translate="yes" xml:space="preserve">
          <source>A final &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; which will dispatch the request via browser HTTP APIs to a backend.</source>
          <target state="translated">ブラウザのHTTP APIを介してリクエストをバックエンドにディスパッチする最後の &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="081bb28f877d8dfbf9dbdced6031ad6c6eb21354" translate="yes" xml:space="preserve">
          <source>A flat module index &lt;code&gt;.d.ts&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; is created with the given &lt;code&gt;flatModuleOutFile&lt;/code&gt; name in the same location as the library index &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">フラットモジュールインデックス &lt;code&gt;.d.ts&lt;/code&gt; および &lt;code&gt;.js&lt;/code&gt; は、ライブラリインデックス &lt;code&gt;.d.ts&lt;/code&gt; ファイルと同じ場所に、指定された &lt;code&gt;flatModuleOutFile&lt;/code&gt; 名で作成されます。</target>
        </trans-unit>
        <trans-unit id="0b4ecb2d416525e8a678b698930a9d483c457446" translate="yes" xml:space="preserve">
          <source>A flip of the switch turns the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; into a &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;. The complete implementation is as follows:</source>
          <target state="translated">スイッチを切り替えると、 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; がFlyingHeroesImpurePipeに &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; ます。完全な実装は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="13b9a7ffb816d86aa53a81473dcdcdbcf06ce32d" translate="yes" xml:space="preserve">
          <source>A folder named after the component</source>
          <target state="translated">コンポーネントの名前を付けたフォルダ</target>
        </trans-unit>
        <trans-unit id="dbed245bdc8e12d2094d18b2dbd182078e9aa794" translate="yes" xml:space="preserve">
          <source>A form &lt;em&gt;array&lt;/em&gt; defines a dynamic form, where you can add and remove controls at run time. You can also nest form arrays to create more complex forms. For more about this option, see &lt;a href=&quot;reactive-forms#dynamic-forms&quot;&gt;Creating dynamic forms&lt;/a&gt; below.</source>
          <target state="translated">フォーム&lt;em&gt;配列&lt;/em&gt;は動的フォームを定義し、実行時にコントロールを追加および削除できます。フォーム配列をネストして、より複雑なフォームを作成することもできます。このオプションの詳細について&lt;a href=&quot;reactive-forms#dynamic-forms&quot;&gt;は、&lt;/a&gt;以下の動的フォームの作成を参照してください。</target>
        </trans-unit>
        <trans-unit id="036fcb5348c304b4a0e71c43763d3184767f86de" translate="yes" xml:space="preserve">
          <source>A form &lt;em&gt;group&lt;/em&gt; defines a form with a fixed set of controls that you can manage together. Form group basics are discussed in this section. You can also &lt;a href=&quot;reactive-forms#nested-groups&quot;&gt;nest form groups&lt;/a&gt; to create more complex forms.</source>
          <target state="translated">フォーム&lt;em&gt;グループ&lt;/em&gt;は、一緒に管理できるコントロールの固定セットを使用してフォームを定義します。このセクションでは、フォームグループの基本について説明します。&lt;a href=&quot;reactive-forms#nested-groups&quot;&gt;フォームグループ&lt;/a&gt;をネストして、より複雑なフォームを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="dce635877c967caa411bed07baa04183db074439" translate="yes" xml:space="preserve">
          <source>A form component class with a &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータを備えたフォームコンポーネントクラス。</target>
        </trans-unit>
        <trans-unit id="6f4dabb93ae061e849700a419e18e9419cfd943a" translate="yes" xml:space="preserve">
          <source>A form group tracks the status and changes for each of its controls, so if one of the controls changes, the parent control also emits a new status or value change. The model for the group is maintained from its members. After you define the model, you must update the template to reflect the model in the view.</source>
          <target state="translated">フォームグループはそれぞれのコントロールのステータスと変更を追跡するので、コントロールの1つが変更された場合、親コントロールも新しいステータスまたは値の変更を発します。グループのモデルは、そのメンバーから維持されます。モデルを定義した後、テンプレートを更新して、ビューにモデルを反映させる必要があります。</target>
        </trans-unit>
        <trans-unit id="7a2957cdc2fc7fde81eadc1298d620e085f6a3ce" translate="yes" xml:space="preserve">
          <source>A form of property &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt; in which a &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; between double-curly braces renders as text. That text can be concatenated with neighboring text before it is assigned to an element property or displayed between element tags, as in this example.</source>
          <target state="translated">プロパティのフォーム&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;する&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート発現&lt;/a&gt;ダブル中括弧の間には、テキストとしてレンダリング。この例のように、そのテキストは、要素のプロパティに割り当てられる前、または要素タグの間に表示される前に、隣接するテキストと連結できます。</target>
        </trans-unit>
        <trans-unit id="c440d6cf03478cfaa3881a3d89f9573911b226a4" translate="yes" xml:space="preserve">
          <source>A format for building Angular forms using HTML forms and input elements in the view. The alternative format uses the &lt;a href=&quot;glossary#reactive-forms&quot;&gt;reactive forms&lt;/a&gt; framework.</source>
          <target state="translated">ビューのHTMLフォームと入力要素を使用してAngularフォームを構築するためのフォーマット。代替フォーマットは、&lt;a href=&quot;glossary#reactive-forms&quot;&gt;反応型&lt;/a&gt;フレームワークを使用します。</target>
        </trans-unit>
        <trans-unit id="57e7a81c0b8f28e9f94e340a3a04b52c7a68cd88" translate="yes" xml:space="preserve">
          <source>A fragment in the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; is &lt;em&gt;never&lt;/em&gt; persisted.</source>
          <target state="translated">&lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; フラグメントが永続化される&lt;em&gt;こと&lt;/em&gt;はあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e5ef4a349b19270bd3bc9ebcc3f18e626f75c0cf" translate="yes" xml:space="preserve">
          <source>A framework for building Angular forms through code in a component. The alternative is a &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;template-driven form&lt;/a&gt;.</source>
          <target state="translated">コンポーネントのコードを通じてAngularフォームを構築するためのフレームワーク。代替は、&lt;a href=&quot;glossary#template-driven-forms&quot;&gt;テンプレート駆動型のフォーム&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0d14d0f7ea94f405fdbafc210a264d270af949aa" translate="yes" xml:space="preserve">
          <source>A full HTTP response, including a typed response body (which may be &lt;code&gt;null&lt;/code&gt; if one was not returned).</source>
          <target state="translated">型指定された応答本文を含む完全なHTTP応答（返されなかった場合は &lt;code&gt;null&lt;/code&gt; になる場合があります）。</target>
        </trans-unit>
        <trans-unit id="53e7772e1ee60e5a076a93eae9c41bb3210c50d4" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルートをURLと照合するための関数。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; の組み合わせが十分に表現力がない場合は、 &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; のカスタムURLマッチャーを実装します。 &lt;code&gt;path&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="e9a5b2284a01d9516c107bbd07154dbd90be0028" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt;.</source>
          <target state="translated">ルートをURLと照合するための関数。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;pathMatch&lt;/code&gt; の組み合わせが十分に表現力に &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; 場合は、Route.matcherのカスタムURLマッチャーを実装します。 &lt;code&gt;path&lt;/code&gt; および &lt;code&gt;pathMatch&lt;/code&gt; と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="09f1f8e31b5105534c849f46cebce0d49634b1a5" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルートをURLと照合するための関数。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; の組み合わせが十分に表現力がない場合は、 &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; のカスタムURLマッチャーを実装します。 &lt;code&gt;path&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="8732fc21158fcddfd5ed7d6c64cdb4f6eb4bb86e" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;pathMatch&lt;/code&gt;.</source>
          <target state="translated">ルートをURLと照合するための関数。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;pathMatch&lt;/code&gt; の組み合わせが十分に表現力に &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; 場合は、Route.matcherのカスタムURLマッチャーを実装します。 &lt;code&gt;path&lt;/code&gt; および &lt;code&gt;pathMatch&lt;/code&gt; と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="684e23c9356d6fb252eeb1d67716948d73324136" translate="yes" xml:space="preserve">
          <source>A function is executed each time a state change occurs in the animation trigger element. The animation steps run when the function returns true.</source>
          <target state="translated">アニメーションのトリガー要素で状態変化が起こるたびに関数が実行されます。この関数がtrueを返すと、アニメーションのステップが実行されます。</target>
        </trans-unit>
        <trans-unit id="574a3a8774d337c58b7e6859c4c8542cb2f2b41f" translate="yes" xml:space="preserve">
          <source>A function that defines how to obtain or generate values or messages to be published. This function is executed when a consumer calls the &lt;code&gt;subscribe()&lt;/code&gt; method of an &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt;.</source>
          <target state="translated">公開する値またはメッセージを取得または生成する方法を定義する関数。この関数は、コンシューマが&lt;a href=&quot;glossary#observable&quot;&gt;オブザーバブルの&lt;/a&gt; &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出すと実行されます。</target>
        </trans-unit>
        <trans-unit id="6275d4c0492c7115ec24bb20ae9c3d8f63aab167" translate="yes" xml:space="preserve">
          <source>A function that defines how to track changes for items in the iterable.</source>
          <target state="translated">イテレート可能な項目の変更を追跡する方法を定義する関数です。</target>
        </trans-unit>
        <trans-unit id="4fc9c1cc331c59974bdc21b79a630dbc89ff6bf9" translate="yes" xml:space="preserve">
          <source>A function that is called to resolve a collection of lazy-loaded routes.</source>
          <target state="translated">遅延ロードされたルートのコレクションを解決するために呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="2b0d15eb0823d656c6a5329e70e9894fc5c66cd4" translate="yes" xml:space="preserve">
          <source>A function that is called to resolve a collection of lazy-loaded routes. Must be an arrow function of the following form: &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;</source>
          <target state="translated">遅延ロードされたルートのコレクションを解決するために呼び出される関数。次の形式の矢印関数である必要があります： &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65bb3a74803d66f4dd1e37ce3b12aebc7e84490d" translate="yes" xml:space="preserve">
          <source>A function that is executed when a platform is initialized.</source>
          <target state="translated">プラットフォームが初期化されたときに実行される関数。</target>
        </trans-unit>
        <trans-unit id="ca9b1f1fd5952d3c22b4ec5faed5f044aba54c78" translate="yes" xml:space="preserve">
          <source>A function that modifies a class or property definition. Decorators (also called &lt;em&gt;annotations&lt;/em&gt;) are an experimental (stage 2) &lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;JavaScript language feature&lt;/a&gt;. TypeScript adds support for decorators.</source>
          <target state="translated">クラスまたはプロパティの定義を変更する関数。デコレーター（&lt;em&gt;アノテーション&lt;/em&gt;とも呼ばれます）は、実験的な（ステージ2）&lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;JavaScript言語機能です&lt;/a&gt;。TypeScriptはデコレーターのサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="c02f83e963294e99ed2772ac7ec52453259e650b" translate="yes" xml:space="preserve">
          <source>A function that receives a control and returns a Promise or observable that emits validation errors if present, otherwise null.</source>
          <target state="translated">コントロールを受け取り、Promiseまたはobservableを返す関数で、存在する場合は検証エラーを返します。</target>
        </trans-unit>
        <trans-unit id="c63c521dd24d8ae841280ee8807d80862d7fa73b" translate="yes" xml:space="preserve">
          <source>A function that receives a control and synchronously returns a map of validation errors if present, otherwise null.</source>
          <target state="translated">コントロールを受け取り、検証エラーが存在する場合は同期的に検証エラーのマップを返します。</target>
        </trans-unit>
        <trans-unit id="c50a6dbcee34631ac561a96933693a78f4413f26" translate="yes" xml:space="preserve">
          <source>A function that returns a set of routes to load.</source>
          <target state="translated">ロードするルートのセットを返す関数。</target>
        </trans-unit>
        <trans-unit id="498df6d36954e0cdff82d1b0509284d0281596a6" translate="yes" xml:space="preserve">
          <source>A function that uses the &lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt; API to perform a complex process such as &quot;build&quot; or &quot;test&quot;. The builder code is defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt; APIを使用して、「ビルド」や「テスト」などの複雑なプロセスを実行する関数。ビルダーコードは&lt;a href=&quot;glossary#npm-package&quot;&gt;npmパッケージで&lt;/a&gt;定義されています。</target>
        </trans-unit>
        <trans-unit id="cb7987e75f0c7e65838a518979f2220d3c5dca44" translate="yes" xml:space="preserve">
          <source>A function that will be executed when a platform is initialized.</source>
          <target state="translated">プラットフォームが初期化されたときに実行される関数。</target>
        </trans-unit>
        <trans-unit id="09d03f78f1c88deaa516cb82e14a686bff6bdbe1" translate="yes" xml:space="preserve">
          <source>A function that will be executed when an application is initialized.</source>
          <target state="translated">アプリケーションの初期化時に実行される関数です。</target>
        </trans-unit>
        <trans-unit id="06f5cc23cf462eb4020857f44f94a183b857febb" translate="yes" xml:space="preserve">
          <source>A function that will be executed when calling &lt;code&gt;&lt;a href=&quot;platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; just before current platform state is rendered to string.</source>
          <target state="translated">現在のプラットフォームの状態が文字列にレンダリングされる直前に &lt;code&gt;&lt;a href=&quot;platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; を呼び出すときに実行される関数。</target>
        </trans-unit>
        <trans-unit id="407a564f4ca570f6b9e0addb423af8b5d1261191" translate="yes" xml:space="preserve">
          <source>A function that will be executed when calling &lt;code&gt;&lt;a href=&quot;rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; just before current platform state is rendered to string.</source>
          <target state="translated">現在のプラットフォームの状態が文字列にレンダリングされる直前に &lt;code&gt;&lt;a href=&quot;rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; を呼び出すときに実行される関数。</target>
        </trans-unit>
        <trans-unit id="4d85a1e7e2608a6d01946ea8f34b3d4c9507f423" translate="yes" xml:space="preserve">
          <source>A function to call when the notification occurs. Receives the event object as an argument.</source>
          <target state="translated">通知が発生したときに呼び出す関数です。イベントオブジェクトを引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="0a7b93f0502276f70b84f75c408d27157e6276eb" translate="yes" xml:space="preserve">
          <source>A function to invoke to create a value for this &lt;code&gt;token&lt;/code&gt;. The function is invoked with resolved values of &lt;code&gt;token&lt;/code&gt;s in the &lt;code&gt;deps&lt;/code&gt; field.</source>
          <target state="translated">この &lt;code&gt;token&lt;/code&gt; 値を作成するために呼び出す関数。関数は、 &lt;code&gt;deps&lt;/code&gt; フィールドの &lt;code&gt;token&lt;/code&gt; sの解決された値で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2be97f407436eaa098a90855dde1a2d9662d7e64" translate="yes" xml:space="preserve">
          <source>A future guide update will explain how to write such tests with the &lt;code&gt;&lt;a href=&quot;../api/router/testing/routertestingmodule&quot;&gt;RouterTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">今後のガイドの更新では、このようなテストを &lt;code&gt;&lt;a href=&quot;../api/router/testing/routertestingmodule&quot;&gt;RouterTestingModule&lt;/a&gt;&lt;/code&gt; で作成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="dbf0f48bf91ee4d285d9f2dff879c99f8aa11e6b" translate="yes" xml:space="preserve">
          <source>A getter provides easy access to the aliases in the form array instance compared to repeating the &lt;code&gt;profileForm.get()&lt;/code&gt; method to get each instance. The form array instance represents an undefined number of controls in an array. It's convenient to access a control through a getter, and this approach is easy to repeat for additional controls.</source>
          <target state="translated">getterは、 &lt;code&gt;profileForm.get()&lt;/code&gt; メソッドを繰り返して各インスタンスを取得するのに比べて、フォーム配列インスタンスのエイリアスに簡単にアクセスできます。フォーム配列インスタンスは、配列内の未定義の数のコントロールを表します。ゲッターを介してコントロールにアクセスすると便利です。このアプローチは、追加のコントロールに対して繰り返すのが簡単です。</target>
        </trans-unit>
        <trans-unit id="82f3588be996e71607e620dec4b8b22179916c7f" translate="yes" xml:space="preserve">
          <source>A given Angular workspace contains several TypeScript configuration files. At the root &lt;code&gt;tsconfig.json&lt;/code&gt; file specifies the base TypeScript and Angular compiler options that all projects in the workspace inherit.</source>
          <target state="translated">特定のAngularワークスペースには、いくつかのTypeScript構成ファイルが含まれています。ルートの &lt;code&gt;tsconfig.json&lt;/code&gt; ファイルは、ワークスペース内のすべてのプロジェクトが継承する基本のTypeScriptおよびAngularコンパイラオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="56f28945da320dfacc6dd33fe0eed3c442d99b91" translate="yes" xml:space="preserve">
          <source>A global registry of &lt;a href=&quot;core/testability&quot;&gt;&lt;code&gt;Testability&lt;/code&gt;&lt;/a&gt; instances for specific elements.</source>
          <target state="translated">特定の要素の&lt;a href=&quot;core/testability&quot;&gt; &lt;code&gt;Testability&lt;/code&gt; &lt;/a&gt;インスタンスのグローバルレジストリ。</target>
        </trans-unit>
        <trans-unit id="5618156b292e64c15c0bffbcc031189cd9a6e28a" translate="yes" xml:space="preserve">
          <source>A global registry of &lt;a href=&quot;testability&quot;&gt;&lt;code&gt;Testability&lt;/code&gt;&lt;/a&gt; instances for specific elements.</source>
          <target state="translated">特定の要素の&lt;a href=&quot;testability&quot;&gt; &lt;code&gt;Testability&lt;/code&gt; &lt;/a&gt;インスタンスのグローバルレジストリ。</target>
        </trans-unit>
        <trans-unit id="9d98e2b1ee296918f8bf1519af8e2ae4db7c097d" translate="yes" xml:space="preserve">
          <source>A good example is a service that holds state for its companion component instance. You need a separate instance of the service for each component. Each service has its own work-state, isolated from the service-and-state of a different component. This is called &lt;em&gt;sandboxing&lt;/em&gt; because each service and component instance has its own sandbox to play in.</source>
          <target state="translated">良い例は、コンパニオンコンポーネントインスタンスの状態を保持するサービスです。コンポーネントごとにサービスの個別のインスタンスが必要です。各サービスには、異なるコンポーネントのサービスと状態から分離された独自の作業状態があります。これは&lt;em&gt;サンドボックス&lt;/em&gt;と呼ばれます。これは、各サービスとコンポーネントのインスタンスが、プレイする独自のサンドボックスを持っているためです。</target>
        </trans-unit>
        <trans-unit id="36b9a1d5726b573b8f66a1dbf1ebd460484186d9" translate="yes" xml:space="preserve">
          <source>A good example of usage can be found in the &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt; documentation. Here is the example component that listens for open and close events:</source>
          <target state="translated">使い方の良い例は、&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitterの&lt;/a&gt;ドキュメントにあります。openイベントとcloseイベントをリッスンするコンポーネントの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="153735462281f1d5fbb0b16f23b1e00c53898bed" translate="yes" xml:space="preserve">
          <source>A good use case for &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; is to inject a service but only if it is available on the current host element. To avoid errors in this situation, combine &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; の適切な使用例は、サービスを注入することですが、現在のホスト要素で利用できる場合に限られます。このような状況でエラーを回避するには、コンバイン &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a02a9374055e70b55c163943bf2dfb0d3025e311" translate="yes" xml:space="preserve">
          <source>A guard's return value controls the router's behavior:</source>
          <target state="translated">ガードの戻り値は、ルータの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="52d231725e5228c1fa44d9a29ca224825dcad7cf" translate="yes" xml:space="preserve">
          <source>A guide page might not have its own sample code. It might refer instead to a sample belonging to another page.</source>
          <target state="translated">ガイドページには、独自のサンプルコードがない場合があります。その代わりに、他のページのサンプルを参照している場合があります。</target>
        </trans-unit>
        <trans-unit id="373d8baae200062d8f1aba679aa04671175e5913" translate="yes" xml:space="preserve">
          <source>A handler for errors thrown by &lt;code&gt;Router.parseUrl(url)&lt;/code&gt; when &lt;code&gt;url&lt;/code&gt; contains an invalid character. The most common case is a &lt;code&gt;%&lt;/code&gt; sign that's not encoded and is not part of a percent encoded sequence.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; に無効な文字が含まれている場合に &lt;code&gt;Router.parseUrl(url)&lt;/code&gt; によってスローされるエラーのハンドラー。最も一般的なケースは、エンコードされておらず、パーセントエンコードされたシーケンスの一部ではない &lt;code&gt;%&lt;/code&gt; 記号です。</target>
        </trans-unit>
        <trans-unit id="3af5186a3f75b3f8ed4e7d06d1b2de4ace891926" translate="yes" xml:space="preserve">
          <source>A handler for navigation errors in this NgModule.</source>
          <target state="translated">この NgModule のナビゲーション・エラーのハンドラ。</target>
        </trans-unit>
        <trans-unit id="d6f5b29fab006347fbe778565dcba19bfc15a39b" translate="yes" xml:space="preserve">
          <source>A handler for receiving observable notifications implements the &lt;code&gt;Observer&lt;/code&gt; interface. It is an object that defines callback methods to handle the three types of notifications that an observable can send:</source>
          <target state="translated">&lt;code&gt;Observer&lt;/code&gt; 可能な通知を受信するためのハンドラーは、Observerインターフェースを実装します。これは、オブザーバブルが送信できる3種類の通知を処理するためのコールバックメソッドを定義するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="bbd1ea818b8b8cc66b97d6133471859a6b2bcbfe" translate="yes" xml:space="preserve">
          <source>A handler function that cleans up developer-defined data associated with a view. Called when the &lt;code&gt;destroy()&lt;/code&gt; method is invoked.</source>
          <target state="translated">ビューに関連付けられた開発者定義のデータをクリーンアップするハンドラー関数。 &lt;code&gt;destroy()&lt;/code&gt; メソッドが呼び出されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="73b133b2f9b5688dd4cf73515a44784b01f0232f" translate="yes" xml:space="preserve">
          <source>A handler function that cleans up developer-defined data associated with this component. Called when the &lt;code&gt;destroy()&lt;/code&gt; method is invoked.</source>
          <target state="translated">このコンポーネントに関連付けられた開発者定義のデータをクリーンアップするハンドラー関数。 &lt;code&gt;destroy()&lt;/code&gt; メソッドが呼び出されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4d0a754b9f1caec214fcfa4dc250cb8e06612308" translate="yes" xml:space="preserve">
          <source>A handler function to invoke when the event occurs.</source>
          <target state="translated">イベント発生時に呼び出すハンドラ関数。</target>
        </trans-unit>
        <trans-unit id="bdd43cd2d0035ee8e485339a327acee2ff269f8e" translate="yes" xml:space="preserve">
          <source>A harness component (&lt;code&gt;hero-list.component.ts&lt;/code&gt;) for demonstrating the request, using a template that defines two bindings to the pipe requesting the heroes from the &lt;code&gt;heroes.json&lt;/code&gt; file. The second binding chains the &lt;code&gt;fetch&lt;/code&gt; pipe with the built-in &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; to display the same hero data in JSON format.</source>
          <target state="translated">&lt;code&gt;heroes.json&lt;/code&gt; ファイルからヒーローをリクエストするパイプへの2つのバインディングを定義するテンプレートを使用して、リクエストをデモンストレーションするためのハーネスコンポーネント（ &lt;code&gt;hero-list.component.ts&lt;/code&gt; ）。2番目のバインディングは、 &lt;code&gt;fetch&lt;/code&gt; パイプを組み込みの &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; とチェーンして、同じヒーローデータをJSON形式で表示します。</target>
        </trans-unit>
        <trans-unit id="b778327d90fee7ae60c6ad90775c93d550967f48" translate="yes" xml:space="preserve">
          <source>A hashtable of changes represented by &lt;a href=&quot;core/simplechange&quot;&gt;&lt;code&gt;SimpleChange&lt;/code&gt;&lt;/a&gt; objects stored at the declared property name they belong to on a Directive or Component. This is the type passed to the &lt;code&gt;ngOnChanges&lt;/code&gt; hook.</source>
          <target state="translated">ディレクティブまたはコンポーネントで属している宣言されたプロパティ名に格納されている&lt;a href=&quot;core/simplechange&quot;&gt; &lt;code&gt;SimpleChange&lt;/code&gt; &lt;/a&gt;オブジェクトによって表される変更のハッシュテーブル。これは、 &lt;code&gt;ngOnChanges&lt;/code&gt; フックに渡されるタイプです。</target>
        </trans-unit>
        <trans-unit id="d4e8d3892e372c0fecf2681b537eb943a811ea11" translate="yes" xml:space="preserve">
          <source>A hashtable of changes represented by &lt;a href=&quot;simplechange&quot;&gt;&lt;code&gt;SimpleChange&lt;/code&gt;&lt;/a&gt; objects stored at the declared property name they belong to on a Directive or Component. This is the type passed to the &lt;code&gt;ngOnChanges&lt;/code&gt; hook.</source>
          <target state="translated">ディレクティブまたはコンポーネントで属している宣言されたプロパティ名に格納されている&lt;a href=&quot;simplechange&quot;&gt; &lt;code&gt;SimpleChange&lt;/code&gt; &lt;/a&gt;オブジェクトによって表される変更のハッシュテーブル。これは、 &lt;code&gt;ngOnChanges&lt;/code&gt; フックに渡されるタイプです。</target>
        </trans-unit>
        <trans-unit id="23cdcac8cec89bf89402c32764eb9b3e9b275427" translate="yes" xml:space="preserve">
          <source>A helper class that allows an AngularJS component to be used from Angular.</source>
          <target state="translated">AngularJSのコンポーネントをAngularから使えるようにするヘルパークラスです。</target>
        </trans-unit>
        <trans-unit id="6c66371275420dbc702a42de7ed21e787a1dc715" translate="yes" xml:space="preserve">
          <source>A helper function for creating an AngularJS module that can bootstrap an Angular module &quot;on-demand&quot; (possibly lazily) when a &lt;a href=&quot;downgradecomponent&quot;&gt;downgraded component&lt;/a&gt; needs to be instantiated.</source>
          <target state="translated">&lt;a href=&quot;downgradecomponent&quot;&gt;ダウングレードされたコンポーネント&lt;/a&gt;をインスタンス化する必要がある場合に、Angularモジュールを「オンデマンド」で（おそらく遅延して）ブートストラップできるAngularJSモジュールを作成するためのヘルパー関数。</target>
        </trans-unit>
        <trans-unit id="abc286a32a528d1cb231b557b350c31b9029cca3" translate="yes" xml:space="preserve">
          <source>A helper function for creating an AngularJS module that can bootstrap an Angular module &quot;on-demand&quot; (possibly lazily) when a &lt;a href=&quot;static/downgradecomponent&quot;&gt;downgraded component&lt;/a&gt; needs to be instantiated.</source>
          <target state="translated">&lt;a href=&quot;static/downgradecomponent&quot;&gt;ダウングレードされたコンポーネント&lt;/a&gt;をインスタンス化する必要がある場合に、Angularモジュールを「オンデマンド」で（おそらく遅延して）ブートストラップできるAngularJSモジュールを作成するためのヘルパー関数。</target>
        </trans-unit>
        <trans-unit id="6aa3cc78fa143b79bb810e7a95525bcaa700a185" translate="yes" xml:space="preserve">
          <source>A helper function that allows an Angular component to be used from AngularJS.</source>
          <target state="translated">AngularJSからAngularコンポーネントを利用できるようにするヘルパー機能です。</target>
        </trans-unit>
        <trans-unit id="0a3a953b7fe469f6cf7067a78cbb755f0880b3a3" translate="yes" xml:space="preserve">
          <source>A helper function to allow an Angular service to be accessible from AngularJS.</source>
          <target state="translated">AngularJSからAngularサービスにアクセスできるようにするヘルパー関数です。</target>
        </trans-unit>
        <trans-unit id="218c171a7af680e691b28ee2d67549dc7cc57f0a" translate="yes" xml:space="preserve">
          <source>A helper function to use when unit testing Angular services that depend upon upgraded AngularJS services.</source>
          <target state="translated">アップグレードされたAngularJSサービスに依存するAngularサービスをユニットテストする際に使用するヘルパー機能です。</target>
        </trans-unit>
        <trans-unit id="1c438535304fc370a33b0d75b83c50e099239580" translate="yes" xml:space="preserve">
          <source>A helper function to use when unit testing AngularJS services that depend upon downgraded Angular services.</source>
          <target state="translated">ダウングレードされたAngularサービスに依存するAngularJSサービスをユニットテストする際に使用するヘルパー機能です。</target>
        </trans-unit>
        <trans-unit id="4c0681f8b1ca2bf4c01c170aebc0476aee9eab99" translate="yes" xml:space="preserve">
          <source>A helpful or informational point</source>
          <target state="translated">役に立つ、または情報を提供してくれるポイント</target>
        </trans-unit>
        <trans-unit id="5769fbb6a2ba3dee049c9e2a7d142735dad4475e" translate="yes" xml:space="preserve">
          <source>A helpful, informational alert.</source>
          <target state="translated">役に立つ、情報満載のアラート。</target>
        </trans-unit>
        <trans-unit id="dcdb81e86768a1e46d29c2a150ac61709a280f33" translate="yes" xml:space="preserve">
          <source>A hierarchy of injectors at the NgModule and component level can provide different instances of a dependency to their own components and child components.</source>
          <target state="translated">NgModule とコンポーネントレベルでのインジェクタの階層は、依存関係の異なるインスタンスを自身のコンポーネントや子コンポーネントに提供することができます。</target>
        </trans-unit>
        <trans-unit id="4366034841ba9f2bd29774d71abf28ba67bd01db" translate="yes" xml:space="preserve">
          <source>A instance of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, which is a fundamental building block for Angular forms. Together with &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;, tracks the value, validation, and status of a form input element.</source>
          <target state="translated">Angularフォームの基本的なビルディングブロックである &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のインスタンス。 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; とともに、フォーム入力要素の値、検証、およびステータスを追跡します。</target>
        </trans-unit>
        <trans-unit id="ad9d81adf54afeac2ac2db2a4dc5e5612946defc" translate="yes" xml:space="preserve">
          <source>A key advantage of a synchronous &lt;code&gt;Observable&lt;/code&gt; is that you can often turn asynchronous processes into synchronous tests.</source>
          <target state="translated">同期 &lt;code&gt;Observable&lt;/code&gt; の主な利点は、非同期プロセスを同期テストに変換できることが多いことです。</target>
        </trans-unit>
        <trans-unit id="7ffd5c26435651b0e4c6aae79446e9bccf62a4ab" translate="yes" xml:space="preserve">
          <source>A key value pair. Usually used to represent the key value pairs from a Map or Object.</source>
          <target state="translated">キー値のペア。通常、マップまたはオブジェクトのキー値ペアを表現するために使用されます。</target>
        </trans-unit>
        <trans-unit id="35ebaa116f55fb19c13653c5a4874ae1a1f85ab4" translate="yes" xml:space="preserve">
          <source>A key value store that is transferred from the application on the server side to the application on the client side.</source>
          <target state="translated">サーバ側のアプリケーションからクライアント側のアプリケーションに転送されるキー値ストア。</target>
        </trans-unit>
        <trans-unit id="9cf4739e4864a807e655ff6fc1193445efde9673" translate="yes" xml:space="preserve">
          <source>A key, usually a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">キー、通常は &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7e7a6a0768ab93586cd67dd4bff584b1428ac83" translate="yes" xml:space="preserve">
          <source>A key-value style pair associating a CSS property with a value.</source>
          <target state="translated">CSSプロパティと値を関連付けたキー-値のスタイル・ペア。</target>
        </trans-unit>
        <trans-unit id="07649eafadeb3470a7ca6d2df2dcba49d7307f17" translate="yes" xml:space="preserve">
          <source>A keyframes sequence inserted in the middle that causes the button to appear to pulsate irregularly over the course of that same 1-second timeframe</source>
          <target state="translated">中央に挿入されたキーフレームのシーケンスで、同じ1秒の時間枠の中でボタンが不規則に脈動しているように見えるようにします。</target>
        </trans-unit>
        <trans-unit id="d879a2311ad4242e48672664ec6eea8b5c9c46f0" translate="yes" xml:space="preserve">
          <source>A keyframes sequence inserted in the middle that causes the button to appear to pulsate irregularly over the course of that same 1-second timeframe.</source>
          <target state="translated">中央に挿入されたキーフレームのシーケンスで、同じ1秒の時間枠の中でボタンが不規則に脈動しているように見えるようにします。</target>
        </trans-unit>
        <trans-unit id="dc5af4892de1c162b755ae21ea6a25382487862e" translate="yes" xml:space="preserve">
          <source>A later part of this tutorial, &lt;a href=&quot;https://angular.io/start/start/start-forms&quot;&gt;Use forms for user input&lt;/a&gt;, guides you through accessing this cart service from the view where the user checks out.</source>
          <target state="translated">このチュートリアルの後半の&lt;a href=&quot;https://angular.io/start/start/start-forms&quot;&gt;「ユーザー入力&lt;/a&gt;にフォームを使用する」では、ユーザーがチェックアウトするビューからこのカートサービスにアクセスする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="ed5250db05f438b41da2ac7f301688eb307df34e" translate="yes" xml:space="preserve">
          <source>A lazy-loaded module has its own injector which is typically a child of the application root injector.</source>
          <target state="translated">レイジーロードされたモジュールは、通常はアプリケーションのルートインジェクタの子である独自のインジェクタを持っています。</target>
        </trans-unit>
        <trans-unit id="7ef9f557aece216b8057965c804209b49b3fdec0" translate="yes" xml:space="preserve">
          <source>A lazy-loaded module has its own injector, typically a child of the app root injector. Lazy-loaded services are scoped to the lazy-loaded module's injector. If a lazy-loaded module also provides the &lt;code&gt;UserService&lt;/code&gt;, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root injector. Components in external modules continue to receive the instance provided by their injectors.</source>
          <target state="translated">遅延ロードされたモジュールには独自のインジェクターがあり、通常はアプリルートインジェクターの子です。遅延ロードされたサービスのスコープは、遅延ロードされたモジュールのインジェクターです。遅延ロードされたモジュールも &lt;code&gt;UserService&lt;/code&gt; を提供する場合、そのモジュールのコンテキスト内で（ルーターのナビゲーションなどによって）作成されたコンポーネントは、ルートインジェクター内のインスタンスではなく、サービスのローカルインスタンスを取得します。外部モジュールのコンポーネントは、インジェクターによって提供されるインスタンスを引き続き受け取ります。</target>
        </trans-unit>
        <trans-unit id="a7e8a8cb53a9e84a9b672a56f58c0fd34b652f66" translate="yes" xml:space="preserve">
          <source>A lazy-loaded routed feature module should not be imported by any module. Doing so would trigger an eager load, defeating the purpose of lazy loading.That means you won&amp;rsquo;t see them mentioned among the &lt;code&gt;AppModule&lt;/code&gt; imports. An eager loaded routed feature module must be imported by another module so that the compiler learns about its components.</source>
          <target state="translated">遅延ロードされたルーティング機能モジュールは、どのモジュールからもインポートできません。そうすることで、熱心なロードがトリガーされ、遅延ロードの目的が無効になります。 &lt;code&gt;AppModule&lt;/code&gt; 、AppModuleインポートの中でそれらが言及されることはありません。熱心に読み込まれたルーティング機能モジュールは、コンパイラがそのコンポーネントについて学習できるように、別のモジュールによってインポートされる必要があります。</target>
        </trans-unit>
        <trans-unit id="cf38daa709aad4b9820122674b7d4ef886b08249" translate="yes" xml:space="preserve">
          <source>A library can include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that allow it to integrate with the Angular CLI.</source>
          <target state="translated">ライブラリには、Angular CLIとの統合を可能にする&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;を含めることができます。</target>
        </trans-unit>
        <trans-unit id="7d4f03b11868674f6d12d1dbd9a318807b2f605a" translate="yes" xml:space="preserve">
          <source>A library typically includes &lt;em&gt;reusable code&lt;/em&gt; that defines components, services, and other Angular artifacts (pipes, directives, and so on) that you simply import into a project. A library is packaged into an npm package for publishing and sharing, and this package can also include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that provide instructions for generating or transforming code directly in your project, in the same way that the CLI creates a generic skeleton app with &lt;code&gt;ng generate component&lt;/code&gt;. A schematic that is combined with a library can, for example, provide the Angular CLI with the information it needs to generate a particular component defined in that library.</source>
          <target state="translated">ライブラリには通常、コンポーネント、サービス、およびプロジェクトにインポートするだけのその他のAngularアーティファクト（パイプ、ディレクティブなど）を定義する&lt;em&gt;再利用可能なコード&lt;/em&gt;が含まれています。ライブラリは、パブリッシュと共有のためにnpmパッケージにパッケージ化されています。このパッケージには、CLIが &lt;code&gt;ng generate component&lt;/code&gt; を使用して汎用スケルトンアプリを作成するのと同じ方法で、プロジェクトでコードを直接生成または変換する手順を提供する&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;を含めることもできます。ライブラリと組み合わせた回路図は、たとえば、そのライブラリで定義された特定のコンポーネントを生成するために必要な情報をAngular CLIに提供できます。</target>
        </trans-unit>
        <trans-unit id="ed2474d162c0dc4c057f468e012642c002c1cfc0" translate="yes" xml:space="preserve">
          <source>A library typically includes &lt;em&gt;reusable code&lt;/em&gt; that defines components, services, and other Angular artifacts (pipes, directives, and so on) that you simply import into a project. A library is packaged into an npm package for publishing and sharing. This package can also include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that provide instructions for generating or transforming code directly in your project, in the same way that the CLI creates a generic new component with &lt;code&gt;ng generate component&lt;/code&gt;. A schematic that is packaged with a library can, for example, provide the Angular CLI with the information it needs to generate a component that configures and uses a particular feature, or set of features, defined in that library. One example of this is Angular Material's navigation schematic which configures the CDK's &lt;code&gt;BreakpointObserver&lt;/code&gt; and uses it with Material's &lt;code&gt;MatSideNav&lt;/code&gt; and &lt;code&gt;MatToolbar&lt;/code&gt; components.</source>
          <target state="translated">ライブラリには通常、プロジェクトにインポートするだけのコンポーネント、サービス、およびその他のAngularアーティファクト（パイプ、ディレクティブなど）を定義する&lt;em&gt;再利用可能なコード&lt;/em&gt;が含まれています。ライブラリは、公開および共有するためにnpmパッケージにパッケージ化されています。このパッケージには、CLIが &lt;code&gt;ng generate component&lt;/code&gt; 使用して汎用の新しいコンポーネントを作成するのと同じ方法で、プロジェクトで直接コードを生成または変換するための手順を提供する&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;を含めることもできます。。ライブラリにパッケージ化された回路図は、たとえば、Angular CLIに、そのライブラリで定義された特定の機能または機能のセットを構成および使用するコンポーネントを生成するために必要な情報を提供できます。この一例は、CDKの &lt;code&gt;BreakpointObserver&lt;/code&gt; を構成し、それをMaterialの &lt;code&gt;MatSideNav&lt;/code&gt; および &lt;code&gt;MatToolbar&lt;/code&gt; コンポーネントで使用するAngularMaterialのナビゲーション回路図です。</target>
        </trans-unit>
        <trans-unit id="596a67fab33e6776bbb8c47b9b4b1a154dc3ae59" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that invokes a custom change-detection function for a directive, in addition to the check performed by the default change-detector.</source>
          <target state="translated">デフォルトの変更検出器で実行されるチェックに加えて、 ディレクティブのカスタム変更検出機能を呼び出すライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="f5600987ba08ad888ffa7d2d0414b589157e3ce2" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;&lt;a href=&quot;../forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがコンポーネントのビューを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;../forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="74bf55437402dbc91baac4770d54f43c351112cd" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;&lt;a href=&quot;forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがコンポーネントのビューを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="20a90d8865bd1763fece1eee2fb2e3e788e40046" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;ngAfterViewInit()&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがコンポーネントのビューを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理するために &lt;code&gt;ngAfterViewInit()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="02037844ae11c0ddc626fc9788d0fec5a64d460c" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;&lt;a href=&quot;../router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがディレクティブのすべてのコンテンツを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;../router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="c9cbef27669e26b8935599a3d2233bbbf3336e8b" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;&lt;a href=&quot;router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがディレクティブのすべてのコンテンツを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="fe878e63ea9efd6a965181e8df9b8b409664b48c" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;ngAfterContentInit()&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがディレクティブのすべてのコンテンツを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理するために &lt;code&gt;ngAfterContentInit()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="a447eef2fad87a38f1f484e3675661d2c2de2258" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. Define an &lt;code&gt;ngOnInit()&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがディレクティブのすべてのデータバインドプロパティを初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;ngOnInit()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="b8e1d5b9cc3d1757bb5eacdaa14e03c4921fb9c9" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after the default change detector has completed checking a component's view for changes.</source>
          <target state="translated">デフォルトの変更検出器がコンポーネントのビューの変更のチェックを完了した後に呼び出されるライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="d73ca980a113b1ee2561c99c3783810826f94701" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after the default change detector has completed checking all content of a directive.</source>
          <target state="translated">デフォルトの変更検出器がディレクティブのすべての内容のチェックを完了した後に呼ばれるライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="ce797f9362a30ca61eb81eee1f97135dbd0c504f" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called when a directive, pipe, or service is destroyed. Use for any custom cleanup that needs to occur when the instance is destroyed.</source>
          <target state="translated">ディレクティブ、パイプ、サービスが破棄されたときに呼び出されるライフサイクルフック。インスタンスが破棄されたときに必要なカスタムクリーンアップに使用します。</target>
        </trans-unit>
        <trans-unit id="0261386256f4b1b6dc2c7184bd9e29445ffda542" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called when any data-bound property of a directive changes. Define an &lt;code&gt;ngOnChanges()&lt;/code&gt; method to handle the changes.</source>
          <target state="translated">ディレクティブのデータバインドプロパティが変更されたときに呼び出されるライフサイクルフック。変更を処理する &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="96881da70e829f0f5ebaad0e2ee7ba44657e85de" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that provides additional developer-defined cleanup functionality for the component.</source>
          <target state="translated">コンポーネントに開発者定義の追加クリーンアップ機能を提供するライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="36b167505f89a514144de5bba64e918ad3c3801a" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that provides additional developer-defined cleanup functionality for views.</source>
          <target state="translated">開発者が定義したビューのクリーンアップ機能を追加で提供するライフサイクルフックです。</target>
        </trans-unit>
        <trans-unit id="b379a7fb75af4991c5a53bf872be9257ffe74642" translate="yes" xml:space="preserve">
          <source>A lifecycle method called before the directive's instance is destroyed. For internal use only.</source>
          <target state="translated">ディレクティブのインスタンスが破棄される前に呼ばれるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="ab00640507fd1fc5d13ec5591a77548bad5848e6" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive is initialized. For internal use only.</source>
          <target state="translated">ディレクティブが初期化されたときに呼び出されるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="e6a4a685929d3df5e89c8ac2c6f5c345f6d37471" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive's inputs are initialized. For internal use only.</source>
          <target state="translated">ディレクティブの入力が初期化されたときに呼び出されるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="f07bd6459b72dc9a3fa7e047a318fc584cf2c0eb" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive's inputs change. For internal use only.</source>
          <target state="translated">ディレクティブの入力が変更されたときに呼び出されるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="cea707b23b307b8db10888180bf74c8902fbf4c6" translate="yes" xml:space="preserve">
          <source>A lightweight injection token that is represented as an abstract class.</source>
          <target state="translated">抽象クラスとして表現される軽量なインジェクショントークン。</target>
        </trans-unit>
        <trans-unit id="d441fd8385d512e636f45c60eeda7ddc27d1cf23" translate="yes" xml:space="preserve">
          <source>A link parameters array holds the following ingredients for router navigation:</source>
          <target state="translated">リンクパラメータ配列は、ルータのナビゲーションのための以下の要素を保持しています。</target>
        </trans-unit>
        <trans-unit id="58c6440df7d73cd9db81817568cadd31dfc44944" translate="yes" xml:space="preserve">
          <source>A linter for Angular apps whose rules conform to the Angular &lt;a href=&quot;styleguide&quot;&gt;style guide&lt;/a&gt;.</source>
          <target state="translated">ルールがAngular &lt;a href=&quot;styleguide&quot;&gt;スタイルガイドに&lt;/a&gt;準拠しているAngularアプリのリンター。</target>
        </trans-unit>
        <trans-unit id="25576a240a63ef9260f06f43a3a241146b219362" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;../core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt;s. To use the router in a Worker enabled application you must include these providers when setting up the render thread.</source>
          <target state="translated">&lt;a href=&quot;../core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;のリスト。ワーカー対応アプリケーションでルーターを使用するには、レンダリングスレッドを設定するときにこれらのプロバイダーを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="dbd88ed75debb2734738dacd6286918848aec59b" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt;s. To use the router in a Worker enabled application you must include these providers when setting up the render thread.</source>
          <target state="translated">&lt;a href=&quot;core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;のリスト。ワーカー対応アプリケーションでルーターを使用するには、レンダリングスレッドを設定するときにこれらのプロバイダーを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="461fc971b126f7f03af8576b0fa4ea318da95075" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable&lt;/a&gt; classes, (&lt;em&gt;components&lt;/em&gt;, &lt;em&gt;directives&lt;/em&gt;, and &lt;em&gt;pipes&lt;/em&gt;) that &lt;em&gt;belong to this module&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;このモジュールに属する&lt;/em&gt;&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;宣言可能な&lt;/a&gt;クラス（&lt;em&gt;コンポーネント&lt;/em&gt;、&lt;em&gt;ディレクティブ&lt;/em&gt;、&lt;em&gt;パイプ&lt;/em&gt;）のリスト。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="437997829946a8147d613a76d425e66a9f9f384d" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector.</source>
          <target state="translated">インジェクターによって解決される &lt;code&gt;token&lt;/code&gt; のリスト。</target>
        </trans-unit>
        <trans-unit id="6126755f8fa0690fa2b6af2c29ffba01f3417269" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">インジェクターによって解決される &lt;code&gt;token&lt;/code&gt; のリスト。値のリストは、 &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数の引数として使用されます。</target>
        </trans-unit>
        <trans-unit id="9d38f61745044a029727c6551e2df969c26ca209" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;useClass&lt;/code&gt; constructor.</source>
          <target state="translated">インジェクターによって解決される &lt;code&gt;token&lt;/code&gt; のリスト。値のリストは、 &lt;code&gt;useClass&lt;/code&gt; コンストラクターの引数として使用されます。</target>
        </trans-unit>
        <trans-unit id="5e8a387d3d675f24d46b5ba1a01edf997dfa9c74" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;useFactory&lt;/code&gt; function.</source>
          <target state="translated">インジェクターによって解決される &lt;code&gt;token&lt;/code&gt; のリスト。値のリストは、 &lt;code&gt;useFactory&lt;/code&gt; 関数の引数として使用されます。</target>
        </trans-unit>
        <trans-unit id="dc8941f0d9127051ed123a4af396915f26da0c9b" translate="yes" xml:space="preserve">
          <source>A list of CommonJS packages that are allowed to be used without a build time warning.</source>
          <target state="translated">ビルド時の警告なしで使用が許可されているCommonJSパッケージの一覧です。</target>
        </trans-unit>
        <trans-unit id="daa742971c3327dc4f09d733597037dc4c47dd74" translate="yes" xml:space="preserve">
          <source>A list of URL patterns. URLs that match these patterns are cached according to this data group's policy. Only non-mutating requests (GET and HEAD) are cached.</source>
          <target state="translated">URL パターンのリスト。これらのパターンに一致する URL は、このデータグループのポリシーに従ってキャッシュされます。変形しないリクエスト (GET と HEAD)だけがキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="04d917307865bab1f1de2116c773bcb26a629379" translate="yes" xml:space="preserve">
          <source>A list of common rules for frontend development is documented in the README at &lt;a href=&quot;https://github.com/bazelbuild/rules_nodejs/&quot;&gt;https://github.com/bazelbuild/rules_nodejs/&lt;/a&gt;.</source>
          <target state="translated">フロントエンド開発の一般的なルールのリストは、&lt;a href=&quot;https://github.com/bazelbuild/rules_nodejs/&quot;&gt;https：//github.com/bazelbuild/rules_nodejs/&lt;/a&gt;にあるREADMEに記載されています。</target>
        </trans-unit>
        <trans-unit id="19ddc56400717fc21df5b63436fc1e8e5b32cd4d" translate="yes" xml:space="preserve">
          <source>A list of components that are automatically bootstrapped.</source>
          <target state="translated">自動的にブートストラップされるコンポーネントのリスト。</target>
        </trans-unit>
        <trans-unit id="171d42258c74d022d702af37e54b0e6f7307feba" translate="yes" xml:space="preserve">
          <source>A list of components that can be dynamically loaded into the view.</source>
          <target state="translated">ビューに動的にロードできるコンポーネントのリスト。</target>
        </trans-unit>
        <trans-unit id="7675d0663f37d145a8dac0c39cde405a75fbfa15" translate="yes" xml:space="preserve">
          <source>A list of control names that designates how to move from the current control to the control that should be queried for errors.</source>
          <target state="translated">現在のコントロールからエラーのために照会すべきコントロールへの移動方法を指定するコントロール名のリスト。</target>
        </trans-unit>
        <trans-unit id="037b00399bc82d29e1eb7b74fa9c1904a97de8a9" translate="yes" xml:space="preserve">
          <source>A list of declarations&amp;mdash;&lt;em&gt;component&lt;/em&gt;, &lt;em&gt;directive&lt;/em&gt;, and &lt;em&gt;pipe&lt;/em&gt; classes&amp;mdash;that an importing module can use.</source>
          <target state="translated">インポートモジュールが使用できる宣言（&lt;em&gt;コンポーネント&lt;/em&gt;、&lt;em&gt;ディレクティブ&lt;/em&gt;、および&lt;em&gt;パイプ&lt;/em&gt;クラス）のリスト。</target>
        </trans-unit>
        <trans-unit id="040d4431be42e331375255c125a4498782b8e650" translate="yes" xml:space="preserve">
          <source>A list of dependency-injection providers.</source>
          <target state="translated">依存性注入プロバイダのリスト。</target>
        </trans-unit>
        <trans-unit id="dba7bfe8eac022733a1026f8be32e943c473cfa2" translate="yes" xml:space="preserve">
          <source>A list of modules which should be folded into this module. Folded means it is as if all the imported NgModule's exported properties were declared here.</source>
          <target state="translated">このモジュールに折りたたまれるべきモジュールのリスト。Folded は、インポートされた NgModule のエクスポートされたプロパティがすべてここで宣言されているかのようにすることを意味します。</target>
        </trans-unit>
        <trans-unit id="75001e195c1445f429399b1de5c1f73f540ae88c" translate="yes" xml:space="preserve">
          <source>A little more setup triggers the initial data binding and gets references to the navigation links:</source>
          <target state="translated">もう少し設定すると、最初のデータバインディングがトリガーされ、ナビゲーションリンクへの参照が得られます。</target>
        </trans-unit>
        <trans-unit id="a1b8ef8f70baee99448943fc05106db9e9b9dd37" translate="yes" xml:space="preserve">
          <source>A loader function that can load the routed module asynchronously.</source>
          <target state="translated">ルーテッドモジュールを非同期にロードできるローダー関数。</target>
        </trans-unit>
        <trans-unit id="955b1d9d2579edfd071f8ec5104d74a47b0f744b" translate="yes" xml:space="preserve">
          <source>A locale code for the locale format rules to use.</source>
          <target state="translated">使用するロケール形式の規則のロケールコード。</target>
        </trans-unit>
        <trans-unit id="6a302a7e5064c906a79afc49ad5e1e7cc1a4799f" translate="yes" xml:space="preserve">
          <source>A locale code for the locale format rules to use. When not supplied, uses the value of &lt;code&gt;&lt;a href=&quot;../core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;, which is &lt;code&gt;en-US&lt;/code&gt; by default. See &lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;Setting your app locale&lt;/a&gt;.</source>
          <target state="translated">使用するロケール形式ルールのロケールコード。指定しない場合は、デフォルトで &lt;code&gt;en-US&lt;/code&gt; である &lt;code&gt;&lt;a href=&quot;../core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; の値が使用されます。&lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;アプリのロケールの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d6b80afc948d39c1beaa5b663a213d0d655e25c0" translate="yes" xml:space="preserve">
          <source>A locale code, such as &lt;code&gt;fr-FR&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fr-FR&lt;/code&gt; などのロケールコード。</target>
        </trans-unit>
        <trans-unit id="55f13cbcad722a8c24df8b8cb4a9cf2ae466e5a8" translate="yes" xml:space="preserve">
          <source>A locale is an identifier (id) that refers to a set of user preferences that tend to be shared within a region of the world, such as country. This document refers to a locale identifier as a &quot;locale&quot; or &quot;locale id&quot;.</source>
          <target state="translated">ロケールとは、国などの世界のある地域で共有される傾向のあるユーザの嗜好を表す識別子(id)のことである。この文書では、ロケール識別子を「ロケール」または「ロケールID」と呼ぶ。</target>
        </trans-unit>
        <trans-unit id="fa8d01003c5963b62891b79618c389e5eb505c86" translate="yes" xml:space="preserve">
          <source>A long-standing feature request is to add the ability to add directives to host elements. The feature will allow developers to augment their own components with additional behaviors without using inheritance. The project will require substantial effort in terms of the definition of APIs, semantics, and implementation.</source>
          <target state="translated">長年の機能要求は、ホスト要素にディレクティブを追加する機能を追加することです。この機能により、開発者は継承を使わずに独自のコンポーネントに追加の動作を追加することができます。このプロジェクトは、APIの定義、セマンティクス、実装の面でかなりの努力を必要とします。</target>
        </trans-unit>
        <trans-unit id="8ead34f42f629cf596c56bee9a9dd423fd7244a6" translate="yes" xml:space="preserve">
          <source>A lookup token associated with a dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;, for use with the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; system.</source>
          <target state="translated">&lt;a href=&quot;glossary#di&quot;&gt;依存関係注入&lt;/a&gt;システムで使用するための、依存関係&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダーに&lt;/a&gt;関連付けられたルックアップトークン。</target>
        </trans-unit>
        <trans-unit id="cae2a9afdd89956ff08fa75198655ba1a46444dc" translate="yes" xml:space="preserve">
          <source>A major release every 6 months</source>
          <target state="translated">6ヶ月ごとにメジャーリリース</target>
        </trans-unit>
        <trans-unit id="06d3323afdb781bed9079cfcfdee73be399d2d9a" translate="yes" xml:space="preserve">
          <source>A map of DI tokens used to look up data resolvers. See &lt;code&gt;&lt;a href=&quot;resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">データリゾルバーの検索に使用されるDIトークンのマップ。 &lt;code&gt;&lt;a href=&quot;resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c31bf3081c3f1b6360722ce5cdf2ba3f5dd1a977" translate="yes" xml:space="preserve">
          <source>A map that provides access to the required and optional parameters specific to a route. The map supports retrieving a single value with &lt;code&gt;get()&lt;/code&gt; or multiple values with &lt;code&gt;getAll()&lt;/code&gt;.</source>
          <target state="translated">ルートに固有の必須およびオプションのパラメーターへのアクセスを提供するマップ。マップは、 &lt;code&gt;get()&lt;/code&gt; を使用して単一の値を取得するか、 &lt;code&gt;getAll()&lt;/code&gt; を使用して複数の値を取得することをサポートします。</target>
        </trans-unit>
        <trans-unit id="e95f51729664a5488e099047c9717e5b096d40fe" translate="yes" xml:space="preserve">
          <source>A maximum total number of results to return from the query. If negative, results are limited from the end of the query list towards the beginning. By default, results are not limited.</source>
          <target state="translated">クエリから返す結果の最大合計数。負の値を指定した場合、結果はクエリリストの末尾から先頭に向かって制限されます。デフォルトでは、結果は制限されません。</target>
        </trans-unit>
        <trans-unit id="f0c63958f79d54f2fc16dbcbfe14c83a9f071add" translate="yes" xml:space="preserve">
          <source>A metadata override object can either add-and-remove elements in metadata properties or completely reset those properties. This example resets the component's &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">メタデータオーバーライドオブジェクトは、メタデータプロパティの要素を追加および削除するか、それらのプロパティを完全にリセットできます。この例では、コンポーネントの &lt;code&gt;providers&lt;/code&gt; メタデータをリセットします。</target>
        </trans-unit>
        <trans-unit id="8729d4f5019b394ddc337fc6d5ed4029a1e20a17" translate="yes" xml:space="preserve">
          <source>A method that controls navigation to a requested route in a routing application. Guards determine whether a route can be activated or deactivated, and whether a lazy-loaded module can be loaded.</source>
          <target state="translated">ルーティングアプリケーションで要求されたルートへのナビゲーションを制御する方法。ガードは、ルートをアクティブにするか非アクティブにするか、レイジーロードされたモジュールをロードできるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="69f0f2d5a2aa3accf83abdff396c8bd191b0d509" translate="yes" xml:space="preserve">
          <source>A microsyntax is translated to the normal binding syntax as follows:</source>
          <target state="translated">マイクロシンタックスは、以下のように通常のバインディング構文に変換されます。</target>
        </trans-unit>
        <trans-unit id="7130a4e571cb15db8a5b2e26dc8e7e32f1ac10b6" translate="yes" xml:space="preserve">
          <source>A mock implementation of &lt;a href=&quot;../locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;../locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; の&lt;/a&gt;モック実装。</target>
        </trans-unit>
        <trans-unit id="95d1322a42a6673477094ecc0b65d1e99ae45df8" translate="yes" xml:space="preserve">
          <source>A mock implementation of &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; の&lt;/a&gt;モック実装。</target>
        </trans-unit>
        <trans-unit id="7d0a0962e5c5198a576fa37cb7c736b87d6d1d71" translate="yes" xml:space="preserve">
          <source>A mock requests that was received and is ready to be answered.</source>
          <target state="translated">依頼を受けてすぐに答えられるようになった模擬依頼。</target>
        </trans-unit>
        <trans-unit id="f337bc6018903ffa46e9a382b840059a040e5962" translate="yes" xml:space="preserve">
          <source>A model can be as simple as a &quot;property bag&quot; that holds facts about a thing of application importance. That describes well the &lt;code&gt;Hero&lt;/code&gt; class with its three required fields (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;power&lt;/code&gt;) and one optional field (&lt;code&gt;alterEgo&lt;/code&gt;).</source>
          <target state="translated">モデルは、アプリケーションの重要事項に関する事実を保持する「プロパティバッグ」のように単純なものにすることができます。これは、3つの必須フィールド（ &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;power&lt;/code&gt; ）と1つのオプションフィールド（ &lt;code&gt;alterEgo&lt;/code&gt; ）を持つ &lt;code&gt;Hero&lt;/code&gt; クラスをよく表しています。</target>
        </trans-unit>
        <trans-unit id="ad0764647ed46ed5061fb6310ba8f8b5049da7f6" translate="yes" xml:space="preserve">
          <source>A module can list another module among its &lt;code&gt;exports&lt;/code&gt;, in which case all of that module's public components, directives, and pipes are exported.</source>
          <target state="translated">モジュールは、その &lt;code&gt;exports&lt;/code&gt; 中に別のモジュールをリストできます。その場合、そのモジュールのすべてのパブリックコンポーネント、ディレクティブ、およびパイプがエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="5f1c5c1da122f4fa01eb3c1494bcf50d1de1c0fe" translate="yes" xml:space="preserve">
          <source>A module that contains the deprecated i18n pipes.</source>
          <target state="translated">非推奨の i18n パイプを含むモジュール。</target>
        </trans-unit>
        <trans-unit id="32c9bd50d59c8005b8e4f899c9f2be6b8662aebc" translate="yes" xml:space="preserve">
          <source>A more complete example with additional options:</source>
          <target state="translated">オプションを追加した、より完全な例です。</target>
        </trans-unit>
        <trans-unit id="8d6dc22c64e24056f4ca8f4235696f04db5187ce" translate="yes" xml:space="preserve">
          <source>A multi-project workspace is suitable for an enterprise that uses a single repository and global configuration for all Angular projects (the &quot;monorepo&quot; model). A multi-project workspace also supports library development.</source>
          <target state="translated">マルチプロジェクトワークスペースは、すべてのAngularプロジェクトに対して単一のリポジトリとグローバルな設定を使用している企業に適しています(「モノレポ」モデル)。マルチプロジェクトワークスペースはライブラリ開発もサポートします。</target>
        </trans-unit>
        <trans-unit id="578c0bb115fcfcf57aae92bdf19077e287b885a7" translate="yes" xml:space="preserve">
          <source>A multi-provider token that represents the array of registered &lt;code&gt;&lt;a href=&quot;http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">登録された &lt;code&gt;&lt;a href=&quot;http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; オブジェクトの配列を表すマルチプロバイダートークン。</target>
        </trans-unit>
        <trans-unit id="3429f86b90f9abf229de77143f5159ec794aea18" translate="yes" xml:space="preserve">
          <source>A multi-provider token that represents the array of registered &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">登録された &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; オブジェクトの配列を表すマルチプロバイダートークン。</target>
        </trans-unit>
        <trans-unit id="7906e423263f41a5db0c9d24e8bd036737a8d5a4" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the validation &lt;code&gt;status&lt;/code&gt; of the control recalculates.</source>
          <target state="translated">コントロールの検証 &lt;code&gt;status&lt;/code&gt; が再計算されるたびにイベントを発行するマルチキャストオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="b781b78f56add6ca4e7aa83cd854c5af96b640a9" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the value of the control changes, in the UI or programmatically.</source>
          <target state="translated">コントロールの値が変更されるたびにイベントを発生させるマルチキャスト観測可能なオブザーバです。</target>
        </trans-unit>
        <trans-unit id="c57ad119f27d7b13c8173dac98d90680a4b7c61e" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the value of the control changes, in the UI or programmatically. It also emits an event each time you call enable() or disable() without passing along {emitEvent: false} as a function argument.</source>
          <target state="translated">コントロールの値が変更されるたびにイベントを発生させるマルチキャストのオブザーバブルです。また、関数の引数として {emitEvent:false}を渡さずに enable()または disable()を呼び出すたびにイベントを発行します。</target>
        </trans-unit>
        <trans-unit id="c5be72e441e1cbf5309a798f7996e0e22dfeca5c" translate="yes" xml:space="preserve">
          <source>A name or path that uniquely identifies this NgModule in &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt;. If left &lt;code&gt;undefined&lt;/code&gt;, the NgModule is not registered with &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一意このNgModuleを識別する名前またはパス &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt; 。左の場合は &lt;code&gt;undefined&lt;/code&gt; 、NgModuleはに登録されていません &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d6369ac3a2355e5d07efe81c0f6015ff9a6a7f8" translate="yes" xml:space="preserve">
          <source>A named build target, as specified in the &quot;configurations&quot; section of angular.json. Each named target is accompanied by a configuration of option defaults for that target.</source>
          <target state="translated">angular.jsonの &quot;configurations &quot;セクションで指定された名前付きビルドターゲット。それぞれの名前付きターゲットには、そのターゲットのデフォルトオプションの設定が付随しています。</target>
        </trans-unit>
        <trans-unit id="b0c4e5ba7f7e92e47ab468585168733f19b2c1d2" translate="yes" xml:space="preserve">
          <source>A named build target, as specified in the &quot;configurations&quot; section of angular.json. Each named target is accompanied by a configuration of option defaults for that target. Setting this explicitly overrides the &quot;--prod&quot; flag</source>
          <target state="translated">angular.jsonの &quot;configurations &quot;セクションで指定された名前付きビルドターゲット。それぞれの指定されたターゲットには、そのターゲットのデフォルトオプションの設定が付随しています。これを明示的に設定することで、&quot;--prod&quot; フラグを上書きします。</target>
        </trans-unit>
        <trans-unit id="35e09e8f6a0282a4b54c82b2def01ca54b74004d" translate="yes" xml:space="preserve">
          <source>A named builder configuration, defined in the &quot;configurations&quot; section of angular.json. The builder uses the named configuration to run the given target.</source>
          <target state="translated">angular.jsonの &quot;configurations &quot;セクションで定義された、名前付きビルダーの設定。ビルダーは指定されたターゲットを実行するために名前付きコンフィギュレーションを使います。</target>
        </trans-unit>
        <trans-unit id="b239fcc9e5b91abd9680f6c47f5d1819707bebf3" translate="yes" xml:space="preserve">
          <source>A navigation node has the following properties:</source>
          <target state="translated">ナビゲーション・ノードは以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="52a38a1d63f6d03db1e08268e77081ddcedf5a17" translate="yes" xml:space="preserve">
          <source>A nested expression is similar to the previous examples. As in the previous example, there are two translation units. The first one contains the text outside of the nested expression:</source>
          <target state="translated">入れ子式は前の例と同様です。前の例と同様に、2つの翻訳単位があります。最初のものは、入れ子になった式の外側のテキストを含みます。</target>
        </trans-unit>
        <trans-unit id="4f9bd18390c8ea037a93c12b58381b661d326629" translate="yes" xml:space="preserve">
          <source>A new injector has no providers. Angular initializes the injectors it creates with a set of preferred providers. You have to configure providers for your own app-specific dependencies.</source>
          <target state="translated">新しいインジェクターにはプロバイダがありません。Angularは作成したインジェクターを優先的なプロバイダのセットで初期化します。独自のアプリ固有の依存関係のためにプロバイダを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9920b70991fc5f7bbd0d91bb6a57f0531af7194a" translate="yes" xml:space="preserve">
          <source>A new workspace, with a root folder named &lt;code&gt;angular-tour-of-heroes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;angular-tour-of-heroes&lt;/code&gt; という名前のルートフォルダーを持つ新しいワークスペース。</target>
        </trans-unit>
        <trans-unit id="b7367aaef7bddc8b8c8dc6e00b934abdd2f64d3b" translate="yes" xml:space="preserve">
          <source>A newly generated app contains the source files for a root module, with a root component and template. Each app has a &lt;code&gt;src&lt;/code&gt; folder that contains the logic, data, and assets.</source>
          <target state="translated">新しく生成されたアプリには、ルートコンポーネントとテンプレートを含む、ルートモジュールのソースファイルが含まれています。各アプリには、ロジック、データ、アセットを含む &lt;code&gt;src&lt;/code&gt; フォルダーがあります。</target>
        </trans-unit>
        <trans-unit id="d846c1f199b2800f149643f1562a8855aa905f45" translate="yes" xml:space="preserve">
          <source>A nice aspect of this approach is that the component gets clean data values from the view. It no longer requires knowledge of the &lt;code&gt;$event&lt;/code&gt; and its structure.</source>
          <target state="translated">このアプローチの優れた点は、コンポーネントがビューからクリーンなデータ値を取得することです。 &lt;code&gt;$event&lt;/code&gt; とその構造の知識は必要ありません。</target>
        </trans-unit>
        <trans-unit id="d4f351e8229c9a97c430cacceb09aaa4f1945291" translate="yes" xml:space="preserve">
          <source>A no-op; the route is never stored since this strategy never detaches routes for later re-use.</source>
          <target state="translated">ルートは保存されません。このストラテジーでは、後で再利用するためにルートを切り離すことはないので、ルートは保存されません。</target>
        </trans-unit>
        <trans-unit id="f7bea64455863cb7a47256fbe5d769606742d500" translate="yes" xml:space="preserve">
          <source>A non-atomic deployment could result in the Angular service worker having visibility of partially updated content.</source>
          <target state="translated">アトミックではないデプロイでは、Angularサービスワーカーに部分的に更新されたコンテンツが表示される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5038f56560ea874f8af8e1f15e2b79f948a7daf0" translate="yes" xml:space="preserve">
          <source>A normal Angular application executes in the &lt;em&gt;browser&lt;/em&gt;, rendering pages in the DOM in response to user actions. Angular Universal executes on the &lt;em&gt;server&lt;/em&gt;, generating &lt;em&gt;static&lt;/em&gt; application pages that later get bootstrapped on the client. This means that the application generally renders more quickly, giving users a chance to view the application layout before it becomes fully interactive.</source>
          <target state="translated">通常のAngularアプリケーションは&lt;em&gt;ブラウザ&lt;/em&gt;で実行され、ユーザーの操作に応じてDOMにページをレンダリングします。Angular Universalは&lt;em&gt;サーバー&lt;/em&gt;上で実行され、後でクライアントでブートストラップされる&lt;em&gt;静的&lt;/em&gt;アプリケーションページを生成します。これは、アプリケーションのレンダリングが一般的に速くなり、完全にインタラクティブになる前にユーザーがアプリケーションのレイアウトを表示できるようになることを意味します。</target>
        </trans-unit>
        <trans-unit id="6f4fb46f2d63806c4ee58223f3276c1ec49fc7f1" translate="yes" xml:space="preserve">
          <source>A null player that must be imported to allow disabling of animations.</source>
          <target state="translated">アニメーションを無効にするためにインポートしなければならないNullプレーヤー。</target>
        </trans-unit>
        <trans-unit id="fd1b799ff07a117ff10fd1ea467b0942b98cf28f" translate="yes" xml:space="preserve">
          <source>A nullable value that is bound to a directive from a library which did not have &lt;code&gt;strictNullChecks&lt;/code&gt; enabled.</source>
          <target state="translated">&lt;code&gt;strictNullChecks&lt;/code&gt; が有効になっていないライブラリからのディレクティブにバインドされているnull許容値。</target>
        </trans-unit>
        <trans-unit id="89554a3efabf9fb390af7746887f03e36dff835a" translate="yes" xml:space="preserve">
          <source>A number of Angular CLI commands run a complex process on your code, such as linting, building, or testing. The commands use an internal tool called Architect to run &lt;em&gt;CLI builders&lt;/em&gt;, which apply another tool to accomplish the desired task.</source>
          <target state="translated">多くのAngular CLIコマンドは、コード上でリンティング、ビルド、テストなどの複雑なプロセスを実行します。コマンドは、Architectと呼ばれる内部ツールを使用して&lt;em&gt;CLIビルダー&lt;/em&gt;を実行し&lt;em&gt;ます。CLIビルダーは&lt;/em&gt;、別のツールを適用して目的のタスクを実行します。</target>
        </trans-unit>
        <trans-unit id="49d58886ff799d00cb5c13d4a1bb03aa1f2d809d" translate="yes" xml:space="preserve">
          <source>A object of key/value pairs for the set of changed inputs.</source>
          <target state="translated">変更された入力のセットのキーと値のペアのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4750c9e78af3bfad341001fe2ba5681170c6a43c" translate="yes" xml:space="preserve">
          <source>A page's platform is initialized implicitly when a platform is created via a platform factory (e.g. &lt;a href=&quot;../platform-browser/platformbrowser&quot;&gt;&lt;code&gt;platformBrowser&lt;/code&gt;&lt;/a&gt;), or explicitly by calling the &lt;a href=&quot;createplatform&quot;&gt;&lt;code&gt;createPlatform&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">ページのプラットフォームは、プラットフォームファクトリ（例：&lt;a href=&quot;../platform-browser/platformbrowser&quot;&gt; &lt;code&gt;platformBrowser&lt;/code&gt; &lt;/a&gt;）を介してプラットフォームが作成されるときに暗黙的に、または&lt;a href=&quot;createplatform&quot;&gt; &lt;code&gt;createPlatform&lt;/code&gt; &lt;/a&gt;関数を呼び出して明示的に初期化されます。</target>
        </trans-unit>
        <trans-unit id="651ec72899d5c2c6d5d6ec570ddbc877591ea92b" translate="yes" xml:space="preserve">
          <source>A parent animation can use the &lt;a href=&quot;../api/animations/query&quot;&gt;&lt;code&gt;query()&lt;/code&gt;&lt;/a&gt; function to collect inner elements located in disabled areas of the HTML template. Those elements can still animate.</source>
          <target state="translated">親アニメーションは&lt;a href=&quot;../api/animations/query&quot;&gt; &lt;code&gt;query()&lt;/code&gt; &lt;/a&gt;関数を使用して、HTMLテンプレートの無効な領域にある内部要素を収集できます。これらの要素は引き続きアニメーション化できます。</target>
        </trans-unit>
        <trans-unit id="1bf56c14e3173595a144a7896d73be753549c9f6" translate="yes" xml:space="preserve">
          <source>A parent component and its children share a service whose interface enables bi-directional communication &lt;em&gt;within the family&lt;/em&gt;.</source>
          <target state="translated">親コンポーネントとその子&lt;em&gt;は、家族内での&lt;/em&gt;双方向通信を可能にするインターフェースを持つサービスを共有します。</target>
        </trans-unit>
        <trans-unit id="e39a968c28d7edf3e3a84ccc968736ab545b1b85" translate="yes" xml:space="preserve">
          <source>A parent component cannot use data binding to read child properties or invoke child methods. You can do both by creating a template reference variable for the child element and then reference that variable &lt;em&gt;within the parent template&lt;/em&gt; as seen in the following example.</source>
          <target state="translated">親コンポーネントは、データバインディングを使用して子プロパティを読み取ったり、子メソッドを呼び出したりすることはできません。次の例に示すように、子要素のテンプレート参照変数を作成&lt;em&gt;し、親テンプレート内で&lt;/em&gt;その変数を参照することで、両方を実行できます。</target>
        </trans-unit>
        <trans-unit id="466ac96618e709a5938e7d500890ad9390c558cc" translate="yes" xml:space="preserve">
          <source>A partial HTTP response which only includes the status and header data, but no response body.</source>
          <target state="translated">ステータスとヘッダデータのみを含み、レスポンスボディを含まない部分的な HTTP レスポンス。</target>
        </trans-unit>
        <trans-unit id="8d17248c21e747b7c3ba8050b3294178aab908f1" translate="yes" xml:space="preserve">
          <source>A patch release almost every week</source>
          <target state="translated">ほぼ毎週パッチリリース</target>
        </trans-unit>
        <trans-unit id="3b1347adabeefbe94ca0e9afab41079a38ae42ff" translate="yes" xml:space="preserve">
          <source>A patch release and pre-release (&lt;code&gt;next&lt;/code&gt; or &lt;code&gt;rc&lt;/code&gt;) build almost every week</source>
          <target state="translated">パッチリリースとプレリリース（ &lt;code&gt;next&lt;/code&gt; または &lt;code&gt;rc&lt;/code&gt; ）はほぼ毎週ビルドされます</target>
        </trans-unit>
        <trans-unit id="58efc28f87e76a25d4064ff09cf311712d722706" translate="yes" xml:space="preserve">
          <source>A percentage of the total animate time at which the style is to be applied.</source>
          <target state="translated">スタイルが適用されるアニメーションの総時間のパーセンテージ。</target>
        </trans-unit>
        <trans-unit id="b708ec4a390f4e8a4776d5b2040d86b353d2a768" translate="yes" xml:space="preserve">
          <source>A period-delimited list of control names in one string, e.g. &lt;code&gt;'address.street'&lt;/code&gt;</source>
          <target state="translated">1つの文字列内のコントロール名のピリオド区切りリスト（例： &lt;code&gt;'address.street'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="18518b3ff9da4f8e4217369e6b3f79391cbd0b85" translate="yes" xml:space="preserve">
          <source>A pipe can accept any number of optional parameters to fine-tune its output. To add parameters to a pipe, follow the pipe name with a colon ( : ) and then the parameter value (such as &lt;code&gt;currency:'EUR'&lt;/code&gt;). If the pipe accepts multiple parameters, separate the values with colons (such as &lt;code&gt;slice:1:5&lt;/code&gt;)</source>
          <target state="translated">パイプは、その出力を微調整するために、オプションのパラメーターをいくつでも受け入れることができます。パイプにパラメーターを追加するには、パイプ名の後にコロン（：）を付け、その後にパラメーター値（ &lt;code&gt;currency:'EUR'&lt;/code&gt; など）を付けます。パイプが複数のパラメーターを受け入れる場合は、値をコロンで区切ります（ &lt;code&gt;slice:1:5&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="bedbc779498bd591c9a3dec452e89700422b56ad" translate="yes" xml:space="preserve">
          <source>A pipe class has one method, &lt;code&gt;transform&lt;/code&gt;, that manipulates the input value into a transformed output value. The &lt;code&gt;transform&lt;/code&gt; implementation rarely interacts with the DOM. Most pipes have no dependence on Angular other than the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; metadata and an interface.</source>
          <target state="translated">パイプクラスは一つの方法有する &lt;code&gt;transform&lt;/code&gt; 変換された出力値に入力値を操作します。 &lt;code&gt;transform&lt;/code&gt; の実装はめったにDOMと相互作用しません。 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; メタデータとインターフェイス以外のほとんどのパイプは、Angularに依存していません。</target>
        </trans-unit>
        <trans-unit id="e4ea89ce13888d2b06e69e1b0a34b1371b619c98" translate="yes" xml:space="preserve">
          <source>A pipe class must implement the &lt;code&gt;&lt;a href=&quot;pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface. For example, if the name is &quot;myPipe&quot;, use a template binding expression such as the following:</source>
          <target state="translated">パイプクラスは、 &lt;code&gt;&lt;a href=&quot;pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; インターフェースを実装する必要があります。たとえば、名前が「myPipe」の場合、次のようなテンプレートバインディング式を使用します。</target>
        </trans-unit>
        <trans-unit id="3904967e02839e6509820f8ec95a0def7d2d6acd" translate="yes" xml:space="preserve">
          <source>A pipe is a class decorated with pipe metadata.</source>
          <target state="translated">パイプは、パイプのメタデータで装飾されたクラスです。</target>
        </trans-unit>
        <trans-unit id="40549d115c085009897e81004613ce5f7153eebd" translate="yes" xml:space="preserve">
          <source>A pipe must belong to an NgModule in order for it to be available to a template. To make it a member of an NgModule, list it in the &lt;code&gt;declarations&lt;/code&gt; field of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">パイプは、テンプレートで使用できるように、NgModuleに属している必要があります。NgModuleのメンバーにするには、 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;declarations&lt;/code&gt; フィールドにリストします。</target>
        </trans-unit>
        <trans-unit id="0f6b8b153194c20c0187ec690e01210761a65ec6" translate="yes" xml:space="preserve">
          <source>A pipe takes in data as input and transforms it to a desired output. In this page, you'll use pipes to transform a component's birthday property into a human-friendly date.</source>
          <target state="translated">パイプは、データを入力として取り込み、目的の出力に変換します。このページでは、パイプを使用してコンポーネントの誕生日プロパティを人間に優しい日付に変換します。</target>
        </trans-unit>
        <trans-unit id="e35f19f9638c9d81846078d6ba2a979a2c496046" translate="yes" xml:space="preserve">
          <source>A policy for when to run guards and resolvers on a route.</source>
          <target state="translated">ルート上でガードとリゾルバをいつ実行するかのポリシー。</target>
        </trans-unit>
        <trans-unit id="6322e77ad4a4989fe85f21f6c16add46ed1d428c" translate="yes" xml:space="preserve">
          <source>A position in screen coordinates (a tuple with x and y values) or a function that returns the top offset position.</source>
          <target state="translated">画面座標上の位置(xとyの値を持つタプル)、または最上位のオフセット位置を返す関数。</target>
        </trans-unit>
        <trans-unit id="83b235867fe2026bbac0ac32946c8dbf281bfb3f" translate="yes" xml:space="preserve">
          <source>A position in screen coordinates (a tuple with x and y values).</source>
          <target state="translated">画面座標の位置(xとyの値を持つタプル)。</target>
        </trans-unit>
        <trans-unit id="41d8149577449727c17e0704c95f074c91db70d0" translate="yes" xml:space="preserve">
          <source>A potential use for animation callbacks could be to cover for a slow API call, such as a database lookup. For example, you could set up the &lt;strong&gt;InProgress&lt;/strong&gt; button to have its own looping animation where it pulsates or does some other visual motion while the backend system operation finishes.</source>
          <target state="translated">アニメーションコールバックの潜在的な用途は、データベースルックアップなどの遅いAPI呼び出しをカバーすることです。たとえば、&lt;strong&gt;InProgress&lt;/strong&gt;ボタンを設定して独自のループアニメーションを設定し、バックエンドシステムの操作が完了するまで脈動したり、他の視覚的な動きをしたりできます。</target>
        </trans-unit>
        <trans-unit id="6bfb9afe8113d548fbbb315af6723ac817365c83" translate="yes" xml:space="preserve">
          <source>A predefined &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; for the base href to be used with the &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;. The base href is the URL prefix that should be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; で使用されるベースhrefの定義済み&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;。ベースhrefは、URLを生成および認識するときに保持する必要があるURLプレフィックスです。</target>
        </trans-unit>
        <trans-unit id="9b55764d3eb54191c263b0e27dc2c991eb21fbc9" translate="yes" xml:space="preserve">
          <source>A predefined &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; for the base href to be used with the &lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;. The base href is the URL prefix that should be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; で使用されるベースhrefの定義済み&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;。ベースhrefは、URLを生成および認識するときに保持する必要があるURLプレフィックスです。</target>
        </trans-unit>
        <trans-unit id="557fd2b59c5e0790707cb4c256a2988eead2fed1" translate="yes" xml:space="preserve">
          <source>A predefined set of allowed values.</source>
          <target state="translated">事前に定義された許容値のセット。</target>
        </trans-unit>
        <trans-unit id="ddc74c636d6ca337e8c1942b0e65b5175ae71201" translate="yes" xml:space="preserve">
          <source>A prefix to apply to generated selectors.</source>
          <target state="translated">生成されたセレクタに適用する接頭辞。</target>
        </trans-unit>
        <trans-unit id="f85bc3007675f205f13a65c0814c7779fddfde0e" translate="yes" xml:space="preserve">
          <source>A process that allows apps to display data values to a user and respond to user actions (such as clicks, touches, and keystrokes).</source>
          <target state="translated">アプリがユーザーにデータの値を表示し、ユーザーのアクション(クリック、タッチ、キー操作など)に反応するためのプロセス。</target>
        </trans-unit>
        <trans-unit id="826b728e8dd71b33ef6978c05ec91c2dd062dc41" translate="yes" xml:space="preserve">
          <source>A process that speeds up application load time by splitting the application into multiple bundles and loading them on demand. For example, dependencies can be lazy loaded as needed&amp;mdash;as opposed to &lt;a href=&quot;glossary#eager-loading&quot;&gt;eager-loaded&lt;/a&gt; modules that are required by the root module and are thus loaded on launch.</source>
          <target state="translated">アプリケーションを複数のバンドルに分割してオンデマンドでロードすることにより、アプリケーションのロード時間を短縮するプロセス。たとえば、依存関係は必要に応じて遅延ロードできます。ルートモジュールが必要とする起動時に&lt;a href=&quot;glossary#eager-loading&quot;&gt;ロードさ&lt;/a&gt;れるイーガロードモジュールとは対照的です。</target>
        </trans-unit>
        <trans-unit id="cf702bb551fcbd63146fa58c0443c0e81f431dfb" translate="yes" xml:space="preserve">
          <source>A producer of multiple values, which it pushes to &lt;a href=&quot;glossary#subscriber&quot;&gt;subscribers&lt;/a&gt;. Used for asynchronous event handling throughout Angular. You execute an observable by subscribing to it with its &lt;code&gt;subscribe()&lt;/code&gt; method, passing callbacks for notifications of new values, errors, or completion.</source>
          <target state="translated">&lt;a href=&quot;glossary#subscriber&quot;&gt;サブスクライバー&lt;/a&gt;にプッシュする複数の値のプロデューサー。Angular全体の非同期イベント処理に使用されます。 &lt;code&gt;subscribe()&lt;/code&gt; メソッドを使用してオブザーバブルをサブスクライブし、新しい値、エラー、または完了の通知用のコールバックを渡すことにより、オブザーバブルを実行します。</target>
        </trans-unit>
        <trans-unit id="389a0d3db57aebec32082a719d81b168d371de7f" translate="yes" xml:space="preserve">
          <source>A programming language based on JavaScript that is notable for its optional typing system. TypeScript provides compile-time type checking and strong tooling support (such as code completion, refactoring, inline documentation, and intelligent search). Many code editors and IDEs support TypeScript either natively or with plug-ins.</source>
          <target state="translated">JavaScript をベースにしたプログラミング言語で、オプションの型付けシステムで注目されています。TypeScript はコンパイル時の型チェックと強力なツールサポート (コード補完、リファクタリング、インラインドキュメント、インテリジェント検索など)を提供します。多くのコードエディタや IDE がネイティブまたはプラグインで TypeScript をサポートしている。</target>
        </trans-unit>
        <trans-unit id="b1c6caa6538c99e13bd629cbb98b70f6d54abb0c" translate="yes" xml:space="preserve">
          <source>A project's &lt;code&gt;src/environments/&lt;/code&gt; folder contains the base configuration file, &lt;code&gt;environment.ts&lt;/code&gt;, which provides a default environment. You can add override defaults for additional environments, such as production and staging, in target-specific configuration files.</source>
          <target state="translated">プロジェクトの &lt;code&gt;src/environments/&lt;/code&gt; フォルダーには、デフォルトの環境を提供する基本構成ファイル &lt;code&gt;environment.ts&lt;/code&gt; が含まれています。ターゲット固有の構成ファイルで、本番環境やステージングなどの追加の環境のオーバーライドのデフォルトを追加できます。</target>
        </trans-unit>
        <trans-unit id="7d819f9cac8ab3585eb715c80934a771ae6e032e" translate="yes" xml:space="preserve">
          <source>A project, as generated by the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt;, contains the set of source files, resources, and configuration files that you need to develop and test the application using the CLI. Projects can also be created with the &lt;code&gt;ng generate application&lt;/code&gt; and &lt;code&gt;ng generate library&lt;/code&gt; commands.</source>
          <target state="translated">&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;によって生成されたプロジェクトには、CLIを使用してアプリケーションを開発およびテストするために必要なソースファイル、リソース、および構成ファイルのセットが含まれています。 &lt;code&gt;ng generate application&lt;/code&gt; コマンドと &lt;code&gt;ng generate library&lt;/code&gt; コマンドを使用してプロジェクトを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="686ac56db71d3e020a58d38031c96ea37deeab84" translate="yes" xml:space="preserve">
          <source>A property &lt;code&gt;ngTemplateGuard_(someInputProperty)&lt;/code&gt; lets you specify a more accurate type for an input expression within the template.</source>
          <target state="translated">プロパティ &lt;code&gt;ngTemplateGuard_(someInputProperty)&lt;/code&gt; を使用すると、テンプレート内の入力式に対してより正確なタイプを指定できます。</target>
        </trans-unit>
        <trans-unit id="3fcab1b27f2adf988a0e5f9ae8aa96c046251ada" translate="yes" xml:space="preserve">
          <source>A property name or method call should be the norm, but an occasional Boolean negation, &lt;code&gt;!&lt;/code&gt;, is OK. Otherwise, confine application and business logic to the component, where it is easier to develop and test.</source>
          <target state="translated">プロパティ名またはメソッド呼び出しは標準である必要がありますが、ときどきブール否定 &lt;code&gt;!&lt;/code&gt; 、大丈夫です。それ以外の場合は、アプリケーションとビジネスロジックをコンポーネントに限定し、コンポーネントの開発とテストが容易になります。</target>
        </trans-unit>
        <trans-unit id="303bcae98ffe1ea88fdce30e7edca4a926a46c15" translate="yes" xml:space="preserve">
          <source>A provider can be the service class itself, so that the injector can use &lt;code&gt;new&lt;/code&gt; to create an instance. You might also define more than one class to provide the same service in different ways, and configure different injectors with different providers.</source>
          <target state="translated">プロバイダーはサービスクラス自体にすることができるため、インジェクターは &lt;code&gt;new&lt;/code&gt; を使用してインスタンスを作成できます。また、同じサービスを異なる方法で提供するために複数のクラスを定義し、異なるプロバイダーで異なるインジェクターを構成することもできます。</target>
        </trans-unit>
        <trans-unit id="aee45ccd48ac20faac5b08fd2d4679dd8d03f8d9" translate="yes" xml:space="preserve">
          <source>A provider in the implementation of the lightweight injection token which associates the lightweight injection token with the implementation.</source>
          <target state="translated">軽量インジェクショントークンを実装に関連付ける軽量インジェクショントークンの実装におけるプロバイダ。</target>
        </trans-unit>
        <trans-unit id="9060af48d7b3ea4565ffc43d0325a160797c72c4" translate="yes" xml:space="preserve">
          <source>A provider is an instruction to the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt; system on how to obtain a value for a dependency. Most of the time, these dependencies are services that you create and provide.</source>
          <target state="translated">プロバイダーは、&lt;a href=&quot;dependency-injection&quot;&gt;依存関係&lt;/a&gt;の値を取得する方法に関する依存関係注入システムへの指示です。ほとんどの場合、これらの依存関係は、ユーザーが作成して提供するサービスです。</target>
        </trans-unit>
        <trans-unit id="94914bafc3d875ce4fd31120e0f5c1d6b0f53e09" translate="yes" xml:space="preserve">
          <source>A provider tells an injector &lt;em&gt;how to create the service&lt;/em&gt;. You must configure an injector with a provider before that injector can create a service (or provide any other kind of dependency).</source>
          <target state="translated">プロバイダーは、インジェクター&lt;em&gt;にサービスの作成方法を&lt;/em&gt;指示&lt;em&gt;します&lt;/em&gt;。インジェクターがサービスを作成（または他の種類の依存関係を提供）する前に、プロバイダーでインジェクターを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="7091a1c3bd9d92d76003ced6042cacb1636cf3ca" translate="yes" xml:space="preserve">
          <source>A provider token for a service that turns on &lt;a href=&quot;testing#automatic-change-detection&quot;&gt;automatic change detection&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing#automatic-change-detection&quot;&gt;自動変更検出を&lt;/a&gt;オンにするサービスのプロバイダートークン。</target>
        </trans-unit>
        <trans-unit id="aff177f3bc659050865683995b13f30d726c3e7c" translate="yes" xml:space="preserve">
          <source>A provider token for a service that turns on &lt;a href=&quot;testing-components-scenarios#automatic-change-detection&quot;&gt;automatic change detection&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing-components-scenarios#automatic-change-detection&quot;&gt;自動変更検出を&lt;/a&gt;オンにするサービスのプロバイダートークン。</target>
        </trans-unit>
        <trans-unit id="5e34ff74155cf2ee267810e5a88a88aaecf8f72b" translate="yes" xml:space="preserve">
          <source>A provider token used to configure the location upgrade module.</source>
          <target state="translated">ロケーション・アップグレード・モジュールを構成するために使用されるプロバイダ・トークン。</target>
        </trans-unit>
        <trans-unit id="35b952b56e93bc63b0bed6c15cf689e5aab13eab" translate="yes" xml:space="preserve">
          <source>A published library typically provides a README or other documentation on how to add that lib to your app. For an example, see &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; docs.</source>
          <target state="translated">公開されたライブラリは通常、アプリにそのlibを追加する方法に関するREADMEまたはその他のドキュメントを提供します。例については、&lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; docsを参照してください。</target>
        </trans-unit>
        <trans-unit id="243057217d1daaaa7e7f586b74d5a3196988fe2f" translate="yes" xml:space="preserve">
          <source>A pure pipe must use a pure function, which is one that processes inputs and returns values without side effects. In other words, given the same input, a pure function should always return the same output.</source>
          <target state="translated">純粋なパイプは、入力を処理して副作用なく値を返す純粋な関数を使用しなければなりません。言い換えれば、同じ入力が与えられた場合、純粋な関数は常に同じ出力を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="0781fc1f661b3bd269d0c78ccd7683277722e5fa" translate="yes" xml:space="preserve">
          <source>A pure pipe uses pure functions. Pure functions process inputs and return values without detectable side effects. Given the same input, they should always return the same output.</source>
          <target state="translated">ピュアパイプはピュア関数を使用します。ピュア関数は入力を処理し、検出可能な副作用なしに値を返します。同じ入力があっても、常に同じ出力を返す必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
