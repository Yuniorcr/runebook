<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="aabd7c813ffdc03e68f8ddf0d0e075e18a3d7a6d" translate="yes" xml:space="preserve">
          <source>In the Angular CLI, a standalone application or &lt;a href=&quot;glossary#library&quot;&gt;library&lt;/a&gt; that can be created or modified by a CLI command.</source>
          <target state="translated">Angular CLIで、CLIコマンドによって作成または変更できるスタンドアロンアプリケーションまたは&lt;a href=&quot;glossary#library&quot;&gt;ライブラリ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7b501033bcab7677bbf386ea844c636f41ee7a1" translate="yes" xml:space="preserve">
          <source>In the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, add the &lt;code&gt;proxyConfig&lt;/code&gt; option to the &lt;code&gt;serve&lt;/code&gt; target:</source>
          <target state="translated">CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; で、 &lt;code&gt;proxyConfig&lt;/code&gt; オプションを &lt;code&gt;serve&lt;/code&gt; ターゲットに追加します。</target>
        </trans-unit>
        <trans-unit id="61763a5a70701c3c12fbb07b3b6f0e84eaf7bbab" translate="yes" xml:space="preserve">
          <source>In the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, point to the JavaScript proxy configuration file:</source>
          <target state="translated">CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; で、JavaScriptプロキシ構成ファイルをポイントします。</target>
        </trans-unit>
        <trans-unit id="122be2b5ab964b68505d923b034cfdbee86e0ef4" translate="yes" xml:space="preserve">
          <source>In the DOM of a hybrid ngUpgrade application are components and directives from both AngularJS and Angular. These components communicate with each other by using the input and output bindings of their respective frameworks, which ngUpgrade bridges together. They may also communicate through shared injected dependencies, as described above.</source>
          <target state="translated">ハイブリッド ngUpgrade アプリケーションの DOM には、AngularJS と Angular の両方のコンポーネントとディレクティブがあります。これらのコンポーネントは、それぞれのフレームワークの入力と出力のバインディングを使用して相互に通信し、ngUpgrade はそれらを橋渡しします。また、上記で説明したように、共有のインジェクションされた依存関係を介して通信することもあります。</target>
        </trans-unit>
        <trans-unit id="da4aac216c4150aa0c4b76a0cbffacab0ba55a37" translate="yes" xml:space="preserve">
          <source>In the DOM of a running Angular application with emulated view encapsulation enabled, each DOM element has some extra attributes attached to it:</source>
          <target state="translated">エミュレートされたビューのカプセル化を有効にしたAngularアプリケーションのDOMでは、各DOM要素は追加の属性を持っています。</target>
        </trans-unit>
        <trans-unit id="967824d97e856f8a5701294372f66633e02cbd55" translate="yes" xml:space="preserve">
          <source>In the HTML template file, use the trigger name to attach the defined animations to the HTML element to be animated.</source>
          <target state="translated">HTMLテンプレートファイルでは、定義されたアニメーションをアニメーションさせるHTML要素にアタッチするためのトリガー名を使用します。</target>
        </trans-unit>
        <trans-unit id="083a121e6216962299890132cebbe02f632fa294" translate="yes" xml:space="preserve">
          <source>In the HTML template, the animation event is passed back via &lt;code&gt;$event&lt;/code&gt;, as &lt;code&gt;@trigger.start&lt;/code&gt; and &lt;code&gt;@trigger.done&lt;/code&gt;, where &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;&lt;/code&gt; is the name of the trigger being used. In our example, the trigger &lt;code&gt;openClose&lt;/code&gt; appears as follows.</source>
          <target state="translated">HTMLテンプレートでは、アニメーションイベントを経由して戻って渡される &lt;code&gt;$event&lt;/code&gt; 、として &lt;code&gt;@trigger.start&lt;/code&gt; と &lt;code&gt;@trigger.done&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;&lt;/code&gt; 使用されているトリガの名前です。この例では、トリガー &lt;code&gt;openClose&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9f68507ab6ee93f0f57a92342cc4e0c3de28bf7e" translate="yes" xml:space="preserve">
          <source>In the HTML template, the animation event is passed back via &lt;code&gt;$event&lt;/code&gt;, as &lt;code&gt;@trigger.start&lt;/code&gt; and &lt;code&gt;@trigger.done&lt;/code&gt;, where &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;&lt;/code&gt; is the name of the trigger being used. In this example, the trigger &lt;code&gt;openClose&lt;/code&gt; appears as follows.</source>
          <target state="translated">HTMLテンプレートでは、アニメーションイベントを経由して戻って渡される &lt;code&gt;$event&lt;/code&gt; 、として &lt;code&gt;@trigger.start&lt;/code&gt; と &lt;code&gt;@trigger.done&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;&lt;/code&gt; 使用されているトリガの名前です。この例では、トリガー &lt;code&gt;openClose&lt;/code&gt; は次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="dfcba8b351ad67cbd3018ae060d6b3b0cce679cf" translate="yes" xml:space="preserve">
          <source>In the Karma configuration file, &lt;code&gt;karma.conf.js&lt;/code&gt;, add a custom launcher called ChromeHeadlessCI below browsers:</source>
          <target state="translated">Karma構成ファイル &lt;code&gt;karma.conf.js&lt;/code&gt; で、ブラウザーの下にChromeHeadlessCIというカスタムランチャーを追加します。</target>
        </trans-unit>
        <trans-unit id="0d8933c6633530a939e7e7a904014c408f4331c7" translate="yes" xml:space="preserve">
          <source>In the Phone detail controller, you'll have two members: One for the phone that the user is looking at and another for the URL of the currently displayed image:</source>
          <target state="translated">電話の詳細コントローラには、2つのメンバーがあります。ひとつはユーザーが見ている電話、もうひとつは現在表示されている画像の URL です。</target>
        </trans-unit>
        <trans-unit id="0d1a2ab17dd8ff5eedf9e71bb387641a06044ce9" translate="yes" xml:space="preserve">
          <source>In the TypeScript configuration file, the &quot;target&quot; option in the &lt;code&gt;compilerOptions&lt;/code&gt; section determines the ECMAScript target version that the code is compiled to. Modern browsers support ES2015 natively, while ES5 is more commonly used to support legacy browsers.</source>
          <target state="translated">TypeScript構成ファイルでは、 &lt;code&gt;compilerOptions&lt;/code&gt; セクションの「target」オプションによって、コードのコンパイル先のECMAScriptターゲットバージョンが決まります。最新のブラウザーはES2015をネイティブにサポートしますが、ES5はレガシーブラウザーをサポートするためにより一般的に使用されます。</target>
        </trans-unit>
        <trans-unit id="e4df01dda361adbb05b79a30335d5fac348e1b3c" translate="yes" xml:space="preserve">
          <source>In the above code snippet, &lt;code&gt;transAnimation&lt;/code&gt; is made reusable by declaring it as an export variable.</source>
          <target state="translated">上記のコードスニペットでは、 &lt;code&gt;transAnimation&lt;/code&gt; をエクスポート変数として宣言することで再利用可能にしています。</target>
        </trans-unit>
        <trans-unit id="999956f8131dbd54f089f149eff9fb3d864570b4" translate="yes" xml:space="preserve">
          <source>In the above code, we applied the &lt;code&gt;void&lt;/code&gt; state when the HTML element isn't attached to a view.</source>
          <target state="translated">上記のコードでは、HTML要素がビューにアタッチされていないときに &lt;code&gt;void&lt;/code&gt; 状態を適用しました。</target>
        </trans-unit>
        <trans-unit id="6bcbc62f2692a7cad7cfffdc2e7cf4b7e559d979" translate="yes" xml:space="preserve">
          <source>In the above code, you applied the &lt;code&gt;void&lt;/code&gt; state when the HTML element isn't attached to a view.</source>
          <target state="translated">上記のコードでは、HTML要素がビューにアタッチされていないときに &lt;code&gt;void&lt;/code&gt; 状態を適用しました。</target>
        </trans-unit>
        <trans-unit id="cea6f478656e7fe4e653914666132b5379bca812" translate="yes" xml:space="preserve">
          <source>In the above example, a breakpoint on the pipe's request for data shows the following:</source>
          <target state="translated">上記の例では、パイプのデータ要求のブレークポイントは以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="4e34e2cb53ddbb0085cbc3e5a61b4772c7d5c3c2" translate="yes" xml:space="preserve">
          <source>In the above example:</source>
          <target state="translated">上記の例では</target>
        </trans-unit>
        <trans-unit id="8a1eba3971dbfd135fb71e9d8c51d2907a609acb" translate="yes" xml:space="preserve">
          <source>In the above scenario, the service worker is not able to serve an asset that would normally be cached. That particular app version is broken and there is no way to fix the state of the client without reloading the page. In such cases, the service worker notifies the client by sending an &lt;code&gt;&lt;a href=&quot;../api/service-worker/unrecoverablestateevent&quot;&gt;UnrecoverableStateEvent&lt;/a&gt;&lt;/code&gt; event. You can subscribe to &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;#unrecoverable&lt;/code&gt; to be notified and handle these errors.</source>
          <target state="translated">上記のシナリオでは、Service Workerは、通常はキャッシュされるアセットを提供できません。その特定のアプリのバージョンは壊れており、ページをリロードせずにクライアントの状態を修正する方法はありません。このような場合、サービスワーカーは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/unrecoverablestateevent&quot;&gt;UnrecoverableStateEvent&lt;/a&gt;&lt;/code&gt; イベントを送信してクライアントに通知します。 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;#unrecoverable&lt;/code&gt; にサブスクライブして、通知を受け、これらのエラーを処理できます。</target>
        </trans-unit>
        <trans-unit id="577e109d05bd16fdfef27736b2c5e520043e9b7f" translate="yes" xml:space="preserve">
          <source>In the ad banner, all components implement a common &lt;code&gt;AdComponent&lt;/code&gt; interface to standardize the API for passing data to the components.</source>
          <target state="translated">広告バナーでは、すべてのコンポーネントが共通の &lt;code&gt;AdComponent&lt;/code&gt; インターフェイスを実装して、コンポーネントにデータを渡すためのAPIを標準化します。</target>
        </trans-unit>
        <trans-unit id="19609a3f68be8a8d8459bb2350900bd1a47c1bf5" translate="yes" xml:space="preserve">
          <source>In the basic CLI-generated app, modules are eagerly loaded which means that they are all loaded when the app launches. Angular uses an injector system to make things available between modules. In an eagerly loaded app, the root application injector makes all of the providers in all of the modules available throughout the app.</source>
          <target state="translated">基本的なCLI生成アプリでは、モジュールは熱心にロードされ、アプリの起動時にすべてロードされます。Angularはインジェクタシステムを使用してモジュール間で利用できるようにします。イガーリーロードされたアプリでは、ルートアプリケーションのインジェクタがすべてのモジュールのプロバイダをアプリ全体で利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="d217fba68efca130ef3c06341acbd707ba067782" translate="yes" xml:space="preserve">
          <source>In the builder source directory, we have created a new test file &lt;code&gt;index.spec.ts&lt;/code&gt;. The code creates new instances of &lt;code&gt;JsonSchemaRegistry&lt;/code&gt; (for schema validation), &lt;code&gt;TestingArchitectHost&lt;/code&gt; (an in-memory implementation of &lt;code&gt;ArchitectHost&lt;/code&gt;), and &lt;code&gt;Architect&lt;/code&gt;.</source>
          <target state="translated">ビルダーのソースディレクトリに、新しいテストファイル &lt;code&gt;index.spec.ts&lt;/code&gt; を作成しました。コードは、 &lt;code&gt;JsonSchemaRegistry&lt;/code&gt; （スキーマ検証用）、 &lt;code&gt;TestingArchitectHost&lt;/code&gt; （ &lt;code&gt;ArchitectHost&lt;/code&gt; のメモリ内実装）、および &lt;code&gt;Architect&lt;/code&gt; の新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="d959bf9da8f9b9700248ea3b26f61fd618b0cb98" translate="yes" xml:space="preserve">
          <source>In the builder source directory, we have created a new test file &lt;code&gt;my-builder.spec.ts&lt;/code&gt;. The code creates new instances of &lt;code&gt;JsonSchemaRegistry&lt;/code&gt; (for schema validation), &lt;code&gt;TestingArchitectHost&lt;/code&gt; (an in-memory implementation of &lt;code&gt;ArchitectHost&lt;/code&gt;), and &lt;code&gt;Architect&lt;/code&gt;.</source>
          <target state="translated">ビルダーのソースディレクトリに、新しいテストファイル &lt;code&gt;my-builder.spec.ts&lt;/code&gt; を作成しました。このコードは、 &lt;code&gt;JsonSchemaRegistry&lt;/code&gt; （スキーマ検証用）、 &lt;code&gt;TestingArchitectHost&lt;/code&gt; （ &lt;code&gt;ArchitectHost&lt;/code&gt; のメモリ内実装）、および &lt;code&gt;Architect&lt;/code&gt; の新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="b4f98a695082e7fd1036ab253a946e35cc9beb2c" translate="yes" xml:space="preserve">
          <source>In the case of hybrid applications, the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; bridges the AngularJS and Angular approaches. Here's what happens:</source>
          <target state="translated">ハイブリッドアプリケーションの場合、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; はAngularJSとAngularのアプローチを橋渡しします。ここで何が起こるかです：</target>
        </trans-unit>
        <trans-unit id="91461870129c519bada0129bab899cc6a8400941" translate="yes" xml:space="preserve">
          <source>In the child</source>
          <target state="translated">子供のうちに</target>
        </trans-unit>
        <trans-unit id="514d6aabad56aee8cc774c96c1fb20cc55ba211e" translate="yes" xml:space="preserve">
          <source>In the child's template</source>
          <target state="translated">子のテンプレートでは</target>
        </trans-unit>
        <trans-unit id="4ba5c1d9c582fab11dbc6b441f66b76c1660fd68" translate="yes" xml:space="preserve">
          <source>In the code snippet above, the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator indicates unidirectional transitions, and &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; is bidirectional. Within the transition, &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; specifies how long the transition takes. In this case, the state change from &lt;code&gt;open&lt;/code&gt; to &lt;code&gt;closed&lt;/code&gt; takes one second, expressed here as &lt;code&gt;1s&lt;/code&gt;.</source>
          <target state="translated">上記のコードスニペットでは、 &lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子は一方向の遷移を示し、 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; =&amp;gt;は双方向です。トランジション内で、 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; はトランジションにかかる時間を指定します。この場合、 &lt;code&gt;open&lt;/code&gt; た状態から &lt;code&gt;closed&lt;/code&gt; た状態への状態の変化には1秒かかり、ここでは &lt;code&gt;1s&lt;/code&gt; と表されます。</target>
        </trans-unit>
        <trans-unit id="78631c8d5215d0ec4e7d6e3f883171b073d2d4ca" translate="yes" xml:space="preserve">
          <source>In the code snippet above, the HTML template binds a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element to a trigger named &lt;code&gt;openClose&lt;/code&gt; with a status expression of &lt;code&gt;isOpen&lt;/code&gt;, and with possible values of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. This is an alternative to the practice of creating two named states of &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;.</source>
          <target state="translated">上記のコードスニペットでは、HTMLテンプレートは &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;openClose&lt;/code&gt; という名前のトリガーに、 &lt;code&gt;isOpen&lt;/code&gt; のステータス式と、可能な値 &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; でバインドします。これは、 &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;close&lt;/code&gt; の 2つの名前付き状態を作成する方法の代替手段です。</target>
        </trans-unit>
        <trans-unit id="711a62a7d9cbae68bebfcfcc21e1d3cea5413624" translate="yes" xml:space="preserve">
          <source>In the component class, decorate a property with &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. The following example &lt;code&gt;newItemEvent&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; has a type of &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;, which means it's an event.</source>
          <target state="translated">コンポーネントクラスで、プロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; で装飾します。次の例の &lt;code&gt;newItemEvent&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; は、イベントのタイプがあり &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 。これは、イベントであることを意味します。</target>
        </trans-unit>
        <trans-unit id="c1b78f88da88a23dd477bf417a4c041c6b8167c0" translate="yes" xml:space="preserve">
          <source>In the component class, define a property named &lt;code&gt;notify&lt;/code&gt; with an &lt;code&gt;@&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator and an instance of &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt;. This allows the product alert component to emit an event when the value of the notify property changes.</source>
          <target state="translated">コンポーネントクラスで、 &lt;code&gt;@&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;（）デコレータと &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt; （）のインスタンスを使用して、 &lt;code&gt;notify&lt;/code&gt; という名前のプロパティを定義します。これにより、通知プロパティの値が変更されたときに、製品アラートコンポーネントがイベントを発行できます。</target>
        </trans-unit>
        <trans-unit id="cbb5316d37953947a7dc6e4e53440d5ca9eea88b" translate="yes" xml:space="preserve">
          <source>In the component code, in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata under the &lt;code&gt;animations:&lt;/code&gt; property, when the state evaluates to &lt;code&gt;true&lt;/code&gt; (meaning &quot;open&quot; here), the associated HTML element's height is a wildcard style or default. In this case, use whatever height the element already had before the animation started. When the element is &quot;closed,&quot; the element animates to a height of 0, which makes it invisible.</source>
          <target state="translated">コンポーネントコードの、 &lt;code&gt;animations:&lt;/code&gt; プロパティの &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータで、状態が &lt;code&gt;true&lt;/code&gt; （ここでは「open」を意味する）と評価されると、関連付けられたHTML要素の高さがワイルドカードスタイルまたはデフォルトになります。この場合、アニメーションの開始前に要素がすでに持っていた高さを使用します。要素が「閉じている」場合、要素は高さ0にアニメーション化され、非表示になります。</target>
        </trans-unit>
        <trans-unit id="750773967d6728414256aab053c5bf8fe9e2f436" translate="yes" xml:space="preserve">
          <source>In the component file, add a metadata property called &lt;code&gt;animations:&lt;/code&gt; within the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. You put the trigger that defines an animation within the &lt;code&gt;animations&lt;/code&gt; metadata property.</source>
          <target state="translated">コンポーネントファイルには、メタデータと呼ばれるプロパティを追加 &lt;code&gt;animations:&lt;/code&gt; 内 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータ。アニメーションを定義するトリガーを、 &lt;code&gt;animations&lt;/code&gt; メタデータプロパティ内に配置します。</target>
        </trans-unit>
        <trans-unit id="b647954d61a159e6208fef117f191a4dea85cacc" translate="yes" xml:space="preserve">
          <source>In the component file, add the hero-creation method to the hero data model.</source>
          <target state="translated">コンポーネントファイルで、ヒーローデータモデルにヒーロー作成メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="4196bcf6a715efdf0a9de2a019d7382007a47ed6" translate="yes" xml:space="preserve">
          <source>In the component file, the &lt;code&gt;:enter&lt;/code&gt; transition sets an initial opacity of 0, and then animates it to change that opacity to 1 as the element is inserted into the view.</source>
          <target state="translated">コンポーネントファイルでは、 &lt;code&gt;:enter&lt;/code&gt; トランジションが初期の不透明度を0に設定し、アニメーション化して、要素がビューに挿入されるときにその不透明度を1に変更します。</target>
        </trans-unit>
        <trans-unit id="2a6156782315dab6b8822877f620cda0f59ab064" translate="yes" xml:space="preserve">
          <source>In the component or file that uses the library, add the following code.</source>
          <target state="translated">ライブラリを使用するコンポーネントまたはファイルに、以下のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="8243140d8235a39ddc9786840d3f4bf1a925f034" translate="yes" xml:space="preserve">
          <source>In the component or file that uses the library, add the following code:</source>
          <target state="translated">ライブラリを使用するコンポーネントまたはファイルに、以下のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="87a9383fa91e555bd99945b3b362ea9dcee5dfa7" translate="yes" xml:space="preserve">
          <source>In the component template, the content might be used with interpolation:</source>
          <target state="translated">コンポーネントテンプレートでは、その内容を補間して使用することがあります。</target>
        </trans-unit>
        <trans-unit id="f702faec19daad8be0cca783fb00aba111958cee" translate="yes" xml:space="preserve">
          <source>In the component, use an &lt;code&gt;Observable&lt;/code&gt; to get the data from the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンポーネントで、 &lt;code&gt;Observable&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; からデータを取得します。</target>
        </trans-unit>
        <trans-unit id="3ae6371e7bf5654fb5d754771d4b6f032b299e13" translate="yes" xml:space="preserve">
          <source>In the console, you will see that the schematic was run and the &lt;code&gt;my-data.service.ts&lt;/code&gt; file was created in your app folder.</source>
          <target state="translated">コンソールで、回路図が実行され、 &lt;code&gt;my-data.service.ts&lt;/code&gt; ファイルがappフォルダーに作成されたことがわかります。</target>
        </trans-unit>
        <trans-unit id="db2383126f18633eaf688b99cb2074de976819a7" translate="yes" xml:space="preserve">
          <source>In the constructor of the &lt;code&gt;AppModule&lt;/code&gt;, use dependency injection to get a hold of the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; instance, and use it to bootstrap the AngularJS app in the &lt;code&gt;AppModule.ngDoBootstrap&lt;/code&gt; method. The &lt;code&gt;upgrade.bootstrap&lt;/code&gt; method takes the exact same arguments as &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; のコンストラクターで、依存関係注入を使用して &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; インスタンスを取得し、それを使用して、 &lt;code&gt;AppModule.ngDoBootstrap&lt;/code&gt; メソッドでAngularJSアプリをブートストラップします。 &lt;code&gt;upgrade.bootstrap&lt;/code&gt; の方法はとまったく同じ引数を取り&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="ab2886cc60ad2bc7616d008c0fde504da14578f6" translate="yes" xml:space="preserve">
          <source>In the context of a parent form, it's often unnecessary to include one-way or two-way binding, as the parent form syncs the value for you. You access its properties by exporting it into a local template variable using &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; such as (&lt;code&gt;#f=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt;). Use the variable where needed on form submission.</source>
          <target state="translated">親フォームは値を同期するため、親フォームのコンテキストでは、一方向または双方向のバインドを含める必要はありません。（ &lt;code&gt;#f=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; = &quot; ngForm &quot;）などの &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; を使用してローカルテンプレート変数にエクスポートすることにより、そのプロパティにアクセスします。フォームの送信時に必要な場所で変数を使用します。</target>
        </trans-unit>
        <trans-unit id="9f2d7dd8dafe93b7500c8077037b8da178a715a9" translate="yes" xml:space="preserve">
          <source>In the context of an Angular service worker, a &quot;version&quot; is a collection of resources that represent a specific build of the Angular app. Whenever a new build of the app is deployed, the service worker treats that build as a new version of the app. This is true even if only a single file is updated. At any given time, the service worker may have multiple versions of the app in its cache and it may be serving them simultaneously. For more information, see the &lt;a href=&quot;service-worker-devops#tabs&quot;&gt;App tabs&lt;/a&gt; section below.</source>
          <target state="translated">Angularサービスワーカーのコンテキストでは、「バージョン」は、Angularアプリの特定のビルドを表すリソースのコレクションです。アプリの新しいビルドがデプロイされると、Service Workerはそのビルドをアプリの新しいバージョンとして扱います。これは、単一のファイルのみが更新された場合にも当てはまります。いつでも、Service Workerのキャッシュにアプリの複数のバージョンがあり、それらを同時に提供している場合があります。詳細については、以下の「&lt;a href=&quot;service-worker-devops#tabs&quot;&gt;アプリタブ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="31e6c8b0cca98e1d45c93db3ef9b3d328609662f" translate="yes" xml:space="preserve">
          <source>In the course of this tutorial, you bind a sample form to data and handle user input using the following steps.</source>
          <target state="translated">このチュートリアルでは、サンプルフォームをデータにバインドし、以下の手順でユーザー入力を処理します。</target>
        </trans-unit>
        <trans-unit id="97dae99a0d255226f4238d22cccbbb910df66b7e" translate="yes" xml:space="preserve">
          <source>In the example above, Angular evaluates the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;itemImageUrl&lt;/code&gt; properties and fills in the blanks, first displaying some title text and then an image.</source>
          <target state="translated">上記の例では、角度は、評価 &lt;code&gt;title&lt;/code&gt; と &lt;code&gt;itemImageUrl&lt;/code&gt; 最初のいくつかのタイトルのテキストと、画像を表示する、ブランクのプロパティと塗りつぶしを。</target>
        </trans-unit>
        <trans-unit id="81fa08fa9b494460742d62ebecc855ff605ead0a" translate="yes" xml:space="preserve">
          <source>In the example above, the three options are specified according to that pluralization pattern. For talking about zero minutes, you use &lt;code&gt;=0 {just now}&lt;/code&gt;. For one minute, you use &lt;code&gt;=1 {one minute}&lt;/code&gt;. Any unmatched cardinality uses &lt;code&gt;other {{{minutes}} minutes ago}&lt;/code&gt;. You could choose to add patterns for two, three, or any other number if the pluralization rules were different. For the example of &quot;minute&quot;, only these three patterns are necessary in English.</source>
          <target state="translated">上記の例では、その複数化パターンに従って3つのオプションが指定されています。ゼロ分について話すために、あなたは &lt;code&gt;=0 {just now}&lt;/code&gt; を使用します。1分間は &lt;code&gt;=1 {one minute}&lt;/code&gt; を使用します。一致しないカーディナリティは、 &lt;code&gt;other {{{minutes}} minutes ago}&lt;/code&gt; ます。複数化のルールが異なる場合は、2、3、またはその他の数のパターンを追加することを選択できます。「分」の例では、英語ではこれら3つのパターンのみが必要です。</target>
        </trans-unit>
        <trans-unit id="550d39672c182d504b9a08b7ed75f156116ef64f" translate="yes" xml:space="preserve">
          <source>In the example above, you use the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; method with the same object to define the properties in the model. The value for each control name is an array containing the initial value as the first item in the array.</source>
          <target state="translated">上記の例では、同じオブジェクトで &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; メソッドを使用して、モデルのプロパティを定義します。各コントロール名の値は、配列の最初の項目として初期値を含む配列です。</target>
        </trans-unit>
        <trans-unit id="1f2d3286c150f077c26feea80a8021812e74c85b" translate="yes" xml:space="preserve">
          <source>In the example above, you use the &lt;code&gt;group()&lt;/code&gt; method with the same object to define the properties in the model. The value for each control name is an array containing the initial value as the first item in the array.</source>
          <target state="translated">上記の例では、同じオブジェクトで &lt;code&gt;group()&lt;/code&gt; メソッドを使用して、モデルのプロパティを定義しています。各コントロール名の値は、配列の最初の項目として初期値を含む配列です。</target>
        </trans-unit>
        <trans-unit id="1ba8d292e19c80620ac6c43293a763a286812912" translate="yes" xml:space="preserve">
          <source>In the example app, the &lt;code&gt;BannerComponent&lt;/code&gt; presents static title text in the HTML template.</source>
          <target state="translated">サンプルアプリでは、 &lt;code&gt;BannerComponent&lt;/code&gt; は静的なタイトルテキストをHTMLテンプレートに表示します。</target>
        </trans-unit>
        <trans-unit id="4bcfb2b53fd4dc6373ea6524bb4d8990492b6ddf" translate="yes" xml:space="preserve">
          <source>In the example below the custom id &lt;code&gt;myId&lt;/code&gt; is used for two different messages:</source>
          <target state="translated">以下の例では、カスタムID &lt;code&gt;myId&lt;/code&gt; が2つの異なるメッセージに使用されています。</target>
        </trans-unit>
        <trans-unit id="5ada26207b7af3fde1615048bf33c296c6978a3e" translate="yes" xml:space="preserve">
          <source>In the example below, an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag displays a simple English language greeting, &quot;Hello i18n!&quot;</source>
          <target state="translated">以下の例では、 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; タグは単純な英語の挨拶「Hello i18n！」を表示します。</target>
        </trans-unit>
        <trans-unit id="761e65706bb821211699b0101d7fa79785ca1c40" translate="yes" xml:space="preserve">
          <source>In the example case, the constraints are:</source>
          <target state="translated">例の場合、制約条件は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d36c3d786cc14bcc8155416686a9fb73a1c42c26" translate="yes" xml:space="preserve">
          <source>In the example of the simple root module above, the application module needs material from within &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;. To access that material, add it to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata &lt;code&gt;imports&lt;/code&gt; like this.</source>
          <target state="translated">上記の単純なルートモジュールの例では、アプリケーションモジュールには &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 内のマテリアルが必要です。そのマテリアルにアクセスするには、このように &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータ &lt;code&gt;imports&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="54c9f76e0c79a2bab0002fa1804da3ccf230830a" translate="yes" xml:space="preserve">
          <source>In the example, the &lt;code&gt;color&lt;/code&gt; style is set to the current value of the &lt;code&gt;colorPreference&lt;/code&gt; variable.</source>
          <target state="translated">この例では、 &lt;code&gt;color&lt;/code&gt; スタイルは &lt;code&gt;colorPreference&lt;/code&gt; 変数の現在の値に設定されています。</target>
        </trans-unit>
        <trans-unit id="eb7ba0a8d8a0d2a3fec268eda2d727b9e01b2be7" translate="yes" xml:space="preserve">
          <source>In the example, the compiler retains the &lt;code&gt;LibHeaderComponent&lt;/code&gt; token that occurs in the value position, which prevents the referenced component from being tree-shaken, even if the application developer does not actually use &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; anywhere. If &lt;code&gt;LibHeaderComponent&lt;/code&gt; is large (code, template, and styles), including it unnecessarily can significantly increase the size of the client application.</source>
          <target state="translated">この例では、コンパイラーは値の位置で発生する &lt;code&gt;LibHeaderComponent&lt;/code&gt; トークンを保持します。これにより、アプリケーション開発者が実際に &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; をどこでも使用しなくても、参照されるコンポーネントがツリーシェイクされるのを防ぎます。 &lt;code&gt;LibHeaderComponent&lt;/code&gt; が大きい場合（コード、テンプレート、およびスタイル）、それを不必要に含めると、クライアントアプリケーションのサイズが大幅に増加する可能性があります。</target>
        </trans-unit>
        <trans-unit id="92b5e03d39252fa9bf7d83cab030749ee5f4c3e4" translate="yes" xml:space="preserve">
          <source>In the example, the local state is the number &lt;code&gt;2&lt;/code&gt;, the number of runners up that the component should show. The state value is passed as an argument to &lt;code&gt;runnersUpFactory()&lt;/code&gt;. The &lt;code&gt;runnersUpFactory()&lt;/code&gt; returns the &lt;em&gt;provider factory function&lt;/em&gt;, which can use both the passed-in state value and the injected services &lt;code&gt;Hero&lt;/code&gt; and &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">この例では、ローカル状態は &lt;code&gt;2&lt;/code&gt; であり、コンポーネントが表示する必要がある上位ランナーの数です。状態値は、引数として &lt;code&gt;runnersUpFactory()&lt;/code&gt; に渡されます。 &lt;code&gt;runnersUpFactory()&lt;/code&gt; が返す&lt;em&gt;プロバイダ・ファクトリ関数&lt;/em&gt;を使用することができ、両方渡された状態値と注入サービス &lt;code&gt;Hero&lt;/code&gt; と &lt;code&gt;HeroService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8effc0805c439cacc9c0f76f324195e103dda94" translate="yes" xml:space="preserve">
          <source>In the first example, the &lt;code&gt;active&lt;/code&gt; class is applied to the element if &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; is true.</source>
          <target state="translated">最初の例では、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; がtrueの場合、 &lt;code&gt;active&lt;/code&gt; クラスが要素に適用されます。</target>
        </trans-unit>
        <trans-unit id="80c263cbce8c782dbf85361c2a0637996123f4a6" translate="yes" xml:space="preserve">
          <source>In the first example, the &lt;code&gt;active&lt;/code&gt; class is applied to the element if &lt;code&gt;isActive&lt;/code&gt; is true.</source>
          <target state="translated">最初の例では、 &lt;code&gt;isActive&lt;/code&gt; がtrueの場合、 &lt;code&gt;active&lt;/code&gt; クラスが要素に適用されます。</target>
        </trans-unit>
        <trans-unit id="27a19498c633dd57a4f9dced2864e307540358ac" translate="yes" xml:space="preserve">
          <source>In the first example, the &lt;code&gt;color&lt;/code&gt; style is set to the current value of the &lt;code&gt;colorPreference&lt;/code&gt; variable.</source>
          <target state="translated">最初の例では、 &lt;code&gt;color&lt;/code&gt; スタイルは &lt;code&gt;colorPreference&lt;/code&gt; 変数の現在の値に設定されています。</target>
        </trans-unit>
        <trans-unit id="c2c9e4a3b7e12aaeed408d98456f50d5888a5780" translate="yes" xml:space="preserve">
          <source>In the first example, when a user clicks the button, the &lt;code&gt;toggleImage()&lt;/code&gt; method in the associated component is executed.</source>
          <target state="translated">最初の例では、ユーザーがボタンをクリックすると、関連付けられたコンポーネントの &lt;code&gt;toggleImage()&lt;/code&gt; メソッドが実行されます。</target>
        </trans-unit>
        <trans-unit id="51f81f798ea0c7741e39924caa444daf3cc19a74" translate="yes" xml:space="preserve">
          <source>In the first example, when the user clicks the button, the &lt;code&gt;toggleImage()&lt;/code&gt; method in the controller referenced by the &lt;code&gt;vm&lt;/code&gt;&lt;code&gt;controller as&lt;/code&gt; alias is executed.</source>
          <target state="translated">最初の例では、ユーザーがボタンをクリックすると、エイリアス &lt;code&gt;controller as&lt;/code&gt; &lt;code&gt;vm&lt;/code&gt; コントローラーによって参照されるコントローラーの &lt;code&gt;toggleImage()&lt;/code&gt; メソッドが実行されます。</target>
        </trans-unit>
        <trans-unit id="c32207f14912960f8c997ef3cafe72412ad10f67" translate="yes" xml:space="preserve">
          <source>In the first technique, you create and declare stub versions of the components and directive that play little or no role in the tests.</source>
          <target state="translated">最初のテクニックでは、テストではほとんど役割を果たさないコンポーネントやディレクティブのスタブ版を作成して宣言します。</target>
        </trans-unit>
        <trans-unit id="108b8931e71d306a76dfcfce9f527d5a471ad881" translate="yes" xml:space="preserve">
          <source>In the following code snippet, &lt;code&gt;HeroesService&lt;/code&gt; is an Angular service that depends upon an AngularJS service, &lt;code&gt;titleCase&lt;/code&gt;.</source>
          <target state="translated">次のコードスニペットでは、 &lt;code&gt;HeroesService&lt;/code&gt; はAngularJSサービスである &lt;code&gt;titleCase&lt;/code&gt; に依存するAngularサービスです。</target>
        </trans-unit>
        <trans-unit id="e6676bc73be4bf155526fd49d72a84de468c0b2c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, &lt;code&gt;heroesService&lt;/code&gt; is a downgraded Angular service that we are accessing from AngularJS.</source>
          <target state="translated">次のコードスニペットで、 &lt;code&gt;heroesService&lt;/code&gt; は、AngularJSからアクセスするダウングレードされたAngularサービスです。</target>
        </trans-unit>
        <trans-unit id="fb78ea39c5a1ee00dc639658e1a750d3438ad7fa" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we are configuring the &lt;code&gt;$injector&lt;/code&gt; with two modules: The AngularJS &lt;code&gt;ng1AppModule&lt;/code&gt;, which is the AngularJS part of our hybrid application and the &lt;code&gt;Ng2AppModule&lt;/code&gt;, which is the Angular part.</source>
          <target state="translated">次のコードスニペットでは、我々が設定されている &lt;code&gt;$injector&lt;/code&gt; AngularJS：2つのモジュールと &lt;code&gt;ng1AppModule&lt;/code&gt; 当社のハイブリッドアプリケーションとのAngularJSの一部であり、 &lt;code&gt;Ng2AppModule&lt;/code&gt; 角部です。</target>
        </trans-unit>
        <trans-unit id="bf4a28c55f909788b70b87596cb2bfc51aafb4fc" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we are configuring the &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; with two modules: The AngularJS &lt;code&gt;ng1AppModule&lt;/code&gt;, which is the AngularJS part of our hybrid application and the &lt;code&gt;Ng2AppModule&lt;/code&gt;, which is the Angular part.</source>
          <target state="translated">次のコードスニペットでは、2つのモジュールで &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; を構成しています &lt;code&gt;ng1AppModule&lt;/code&gt; （ハイブリッドアプリケーションのAngularJS部分）と &lt;code&gt;Ng2AppModule&lt;/code&gt; （Angular部分）です。</target>
        </trans-unit>
        <trans-unit id="96af67a04e682b5cdce9f3c7c26caa5301abaf6c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we are configuring the TestBed with two imports. The &lt;code&gt;Ng2AppModule&lt;/code&gt; is the Angular part of our hybrid application and the &lt;code&gt;ng1AppModule&lt;/code&gt; is the AngularJS part.</source>
          <target state="translated">次のコードスニペットでは、2つのインポートを使用してTestBedを構成しています。 &lt;code&gt;Ng2AppModule&lt;/code&gt; は、私たちのハイブリッドアプリケーションの角部であると &lt;code&gt;ng1AppModule&lt;/code&gt; は AngularJS一部です。</target>
        </trans-unit>
        <trans-unit id="1089fa92e7d1b3e9f8331b6e2a577f4fccb3f18e" translate="yes" xml:space="preserve">
          <source>In the following code, the pipe only calls the server when the requested URL changes and it caches the server response. The code uses the &lt;a href=&quot;http&quot;&gt;Angular http&lt;/a&gt; client to retrieve data:</source>
          <target state="translated">次のコードでは、パイプは、要求されたURLが変更され、サーバーの応答をキャッシュするときにのみサーバーを呼び出します。コードは&lt;a href=&quot;http&quot;&gt;Angular http&lt;/a&gt;クライアントを使用してデータを取得します。</target>
        </trans-unit>
        <trans-unit id="03604da2fdf914c5e14b22f5a5170342aa59b0a0" translate="yes" xml:space="preserve">
          <source>In the following configuration, when navigating to &lt;code&gt;/team/11&lt;/code&gt;, the router instantiates the 'AllUsers' component.</source>
          <target state="translated">次の構成で、 &lt;code&gt;/team/11&lt;/code&gt; に移動すると、ルーターは「AllUsers」コンポーネントをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="c19512eeae1d510572e03aff79e442da189e3793" translate="yes" xml:space="preserve">
          <source>In the following example the code sets the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;code&gt;value&lt;/code&gt; property by binding to the &lt;code&gt;name&lt;/code&gt; property.</source>
          <target state="translated">次の例では、コードは &lt;code&gt;name&lt;/code&gt; プロパティにバインドすることによって &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="ddd2e72487db9568e443e8ac17f1325efafcf0bf" translate="yes" xml:space="preserve">
          <source>In the following example, 'MainChild' and 'AuxChild' are siblings. When navigating to 'parent/10/(a//aux:b)', the route instantiates the main child and aux child components next to each other. For this to work, the application component must have the primary and aux outlets defined.</source>
          <target state="translated">以下の例では、'MainChild'と'AuxChild'は兄弟です。parent/10/(a//aux:b)' に移動するとき、ルートは主子コンポーネントと補助子コンポーネントを隣り合わせにインスタンス化します。これを動作させるには、アプリケーションコンポーネントに主アウトレットと補助アウトレットが定義されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="9b1fde84a1cd92229e619c7056dab800c00030c3" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;RepeatPipe&lt;/code&gt; repeats a given value a given number of times.</source>
          <target state="translated">次の例では、 &lt;code&gt;RepeatPipe&lt;/code&gt; は指定された値を指定された回数繰り返します。</target>
        </trans-unit>
        <trans-unit id="f35e0eba3b9006549e40ff4f159f53a0132367aa" translate="yes" xml:space="preserve">
          <source>In the following example, a component defines two output properties that create event emitters. When the title is clicked, the emitter emits an open or close event to toggle the current visibility state.</source>
          <target state="translated">次の例では、コンポーネントがイベント エミッタを作成する 2 つの出力プロパティを定義しています。タイトルがクリックされると、エミッタは現在の可視性の状態を切り替えるための open または close イベントを出力します。</target>
        </trans-unit>
        <trans-unit id="daf2c7ac24c6883d82dbb39bacd2dd7aad01ed95" translate="yes" xml:space="preserve">
          <source>In the following example, a container element wraps a list of items stamped out by an &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. The container element contains an animation trigger that will later be set to query for each of the inner items.</source>
          <target state="translated">次の例では、コンテナ要素は &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; によって打ち出されたアイテムのリストをラップします。コンテナ要素にはアニメーショントリガーが含まれ、後で内部アイテムのそれぞれに対してクエリを実行するように設定されます。</target>
        </trans-unit>
        <trans-unit id="eda535300d18a5aaccbaa0e7a874fe9ca84d2dca" translate="yes" xml:space="preserve">
          <source>In the following example, an async validator ensures that heroes pick an alter ego that is not already taken. New heroes are constantly enlisting and old heroes are leaving the service, so the list of available alter egos cannot be retrieved ahead of time. To validate the potential alter ego entry, the validator must initiate an asynchronous operation to consult a central database of all currently enlisted heroes.</source>
          <target state="translated">次の例では、非同期バリデータを使用することで、ヒーローが分身を選択する際に、まだ選択されていない分身を確実に選択できるようにしています。新しいヒーローは絶えず入隊し、古いヒーローは退隊していくため、利用可能な分身のリストを事前に取得することはできません。分身の可能性を検証するには、現在入隊しているヒーローのデータベースを参照するために、非同期操作を開始しなければなりません。</target>
        </trans-unit>
        <trans-unit id="ba9f38c751750ffec0044f30b25ab52fed51d3f3" translate="yes" xml:space="preserve">
          <source>In the following example, both uses of the &lt;code&gt;OtherComponent&lt;/code&gt; token cause retention of &lt;code&gt;OtherComponent&lt;/code&gt; (that is, prevent it from being tree-shaken when it is not used).</source>
          <target state="translated">次の例では、両方の用途 &lt;code&gt;OtherComponent&lt;/code&gt; のトークン原因保持 &lt;code&gt;OtherComponent&lt;/code&gt; （で、それを使用しない場合は、ツリー振とうされてからそれを防ぐため）。</target>
        </trans-unit>
        <trans-unit id="b7d27f2282051c38c08c5ba5268a13c0e70b8f95" translate="yes" xml:space="preserve">
          <source>In the following example, casting &lt;code&gt;person&lt;/code&gt; to the &lt;code&gt;any&lt;/code&gt; type suppresses the error &lt;code&gt;Property address does not exist&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;person&lt;/code&gt; を &lt;code&gt;any&lt;/code&gt; タイプにキャストすると、エラー &lt;code&gt;Property address does not exist&lt;/code&gt; 抑制します。</target>
        </trans-unit>
        <trans-unit id="f0c0be80d970b7039b7040a00f1d4d013a07fb7a" translate="yes" xml:space="preserve">
          <source>In the following example, chained pipes first apply a format to a date value, then convert the formatted date to uppercase characters. The first tab for the &lt;code&gt;src/app/app.component.html&lt;/code&gt; template chains &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; to display the birthday as &lt;strong&gt;APR 15, 1988&lt;/strong&gt;. The second tab for the &lt;code&gt;src/app/app.component.html&lt;/code&gt; template passes the &lt;code&gt;fullDate&lt;/code&gt; parameter to &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; before chaining to &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt;, which produces &lt;strong&gt;FRIDAY, APRIL 15, 1988&lt;/strong&gt;.</source>
          <target state="translated">次の例では、チェーンパイプは最初にフォーマットを日付値に適用し、次にフォーマットされた日付を大文字に変換します。 &lt;code&gt;src/app/app.component.html&lt;/code&gt; テンプレートチェーンの &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; の最初のタブは、誕生&lt;strong&gt;日を1988年4月15&lt;/strong&gt;日として表示します。 &lt;code&gt;src/app/app.component.html&lt;/code&gt; テンプレートの2番目のタブは、 &lt;code&gt;fullDate&lt;/code&gt; パラメーターを &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; に渡してから &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; にチェーンします。これにより&lt;strong&gt;、1988年4月15&lt;/strong&gt;日金曜日が生成されます。</target>
        </trans-unit>
        <trans-unit id="71f0504b947cf5e51ff21890897ccd6044cad871" translate="yes" xml:space="preserve">
          <source>In the following example, changing the text in the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; changes the value in the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; because Angular immediately updates changes through the template variable, &lt;code&gt;ref1&lt;/code&gt;.</source>
          <target state="translated">次の例では、Angularがテンプレート変数 &lt;code&gt;ref1&lt;/code&gt; を介して変更を即座に更新するため、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; のテキストを変更すると &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の値が変更されます。</target>
        </trans-unit>
        <trans-unit id="07d4a2f467fef38713e2368d4993474e3b3049f6" translate="yes" xml:space="preserve">
          <source>In the following example, however, Angular &lt;a href=&quot;security#sanitization-and-security-contexts&quot;&gt;sanitizes&lt;/a&gt; the values before displaying them.</source>
          <target state="translated">次の例では、しかし、角度は&lt;a href=&quot;security#sanitization-and-security-contexts&quot;&gt;サニタイズ&lt;/a&gt;それらを表示する前に値を。</target>
        </trans-unit>
        <trans-unit id="7002095cfd601df6d3724b03478da2bfdf6f6ef9" translate="yes" xml:space="preserve">
          <source>In the following example, supplying the 'full' &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; strategy ensures that the router applies the redirect if and only if navigating to '/'.</source>
          <target state="translated">次の例では、「完全な」 &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 戦略を指定することで、「/」に移動する場合にのみ、ルーターがリダイレクトを適用するようにします。</target>
        </trans-unit>
        <trans-unit id="152808b4dfa2dfb2a4fba28e543e9d00b2e26e2f" translate="yes" xml:space="preserve">
          <source>In the following example, supplying the 'full' &lt;code&gt;pathMatch&lt;/code&gt; strategy ensures that the router applies the redirect if and only if navigating to '/'.</source>
          <target state="translated">次の例では、「full」 &lt;code&gt;pathMatch&lt;/code&gt; 戦略を指定すると、「/」に移動する場合にのみ、ルーターがリダイレクトを適用するようになります。</target>
        </trans-unit>
        <trans-unit id="f03d09f2145f0f8488d0b621cb15ad8cbf98ece8" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata object and the class constructor tell Angular how to create and display an instance of &lt;code&gt;TypicalComponent&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; メタデータオブジェクトとクラスコンストラクターがAngularに &lt;code&gt;TypicalComponent&lt;/code&gt; のインスタンスを作成および表示する方法を指示します。</target>
        </trans-unit>
        <trans-unit id="87c8b2b86175bcdf14e8fc1308d68a17c35a8a2f" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;childItem&lt;/code&gt; property of the &lt;code&gt;ItemDetailComponent&lt;/code&gt; expects a string, which is exactly what you're sending in the property binding:</source>
          <target state="translated">次の例では、 &lt;code&gt;childItem&lt;/code&gt; のプロパティ &lt;code&gt;ItemDetailComponent&lt;/code&gt; はあなたが結合特性に送っている正確に何である文字列を、想定しています。</target>
        </trans-unit>
        <trans-unit id="c653d272b91f35a022b3aaa5efde4f0e88ccbf1d" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;childItem&lt;/code&gt; property of the &lt;code&gt;ItemDetailComponent&lt;/code&gt; expects a string.</source>
          <target state="translated">次の例では、 &lt;code&gt;childItem&lt;/code&gt; のプロパティ &lt;code&gt;ItemDetailComponent&lt;/code&gt; は、文字列を期待しています。</target>
        </trans-unit>
        <trans-unit id="fe0c10c153d72102ce705c591678f282d3984439" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;person&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; properties are always set together, implying that &lt;code&gt;address&lt;/code&gt; is always non-null if &lt;code&gt;person&lt;/code&gt; is non-null. There is no convenient way to describe this constraint to TypeScript and the template compiler, but the error is suppressed in the example by using &lt;code&gt;address!.street&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;person&lt;/code&gt; プロパティと &lt;code&gt;address&lt;/code&gt; プロパティは常に一緒に設定されており、 &lt;code&gt;person&lt;/code&gt; がnullでない場合、 &lt;code&gt;address&lt;/code&gt; は常にnull でないことを示しています。TypeScriptとテンプレートコンパイラにこの制約を記述する便利な方法はありませんが、例では &lt;code&gt;address!.street&lt;/code&gt; を使用してエラーを抑制しています。</target>
        </trans-unit>
        <trans-unit id="5a8c2c89e4051bc66352ee40fcff2387a159fe44" translate="yes" xml:space="preserve">
          <source>In the following example, the dependency can be resolved by the local injector when instantiating the class itself, but not when instantiating a child.</source>
          <target state="translated">次の例では、クラス自体をインスタンス化する際にローカルのインジェクタによって依存関係を解決できますが、子クラスをインスタンス化する際には解決できません。</target>
        </trans-unit>
        <trans-unit id="6642cb00d9e5a2ab01358f07d9d792e0040e3173" translate="yes" xml:space="preserve">
          <source>In the following example, the dependency can be resolved when instantiating a child, but not when instantiating the class itself.</source>
          <target state="translated">次の例では、子のインスタンス化時には依存関係を解決できますが、クラス自体のインスタンス化時には解決できません。</target>
        </trans-unit>
        <trans-unit id="7e4d63a4f8062e875d1e6ed5ee6b5e59adf2c961" translate="yes" xml:space="preserve">
          <source>In the following example, the error &lt;code&gt;Property addresss does not exist&lt;/code&gt; is suppressed by casting &lt;code&gt;person&lt;/code&gt; to the &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">次の例では、「 &lt;code&gt;Property addresss does not exist&lt;/code&gt; というエラーは、 &lt;code&gt;person&lt;/code&gt; を &lt;code&gt;any&lt;/code&gt; タイプにキャストすることによって抑制されます。</target>
        </trans-unit>
        <trans-unit id="562706a4e12d6092424ac9d37c82b8da887b3ddb" translate="yes" xml:space="preserve">
          <source>In the following example, the hero form uses the &lt;code&gt;.ng-valid&lt;/code&gt; and &lt;code&gt;.ng-invalid&lt;/code&gt; classes to set the color of each form control's border.</source>
          <target state="translated">次の例では、ヒーローフォームは &lt;code&gt;.ng-valid&lt;/code&gt; クラスと &lt;code&gt;.ng-invalid&lt;/code&gt; クラスを使用して、各フォームコントロールの境界線の色を設定します。</target>
        </trans-unit>
        <trans-unit id="7663b43194ad1c35a2249f294f3b0c9a0ab1d18b" translate="yes" xml:space="preserve">
          <source>In the following example, the mock is a spy object.</source>
          <target state="translated">次の例では、モックはスパイオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="2b33cf5a735f73710d739825bb0ebb9e113d2114" translate="yes" xml:space="preserve">
          <source>In the following example, the offset values describe when each &lt;code&gt;backgroundColor&lt;/code&gt; value is applied. The color is red at the start, and changes to blue when 20% of the total time has elapsed.</source>
          <target state="translated">次の例では、オフセット値は、各 &lt;code&gt;backgroundColor&lt;/code&gt; 値がいつ適用されるかを示しています。最初は赤色で、合計時間の20％が経過すると青色に変わります。</target>
        </trans-unit>
        <trans-unit id="24025e5e5f590539cab86355ec040952c01584ba" translate="yes" xml:space="preserve">
          <source>In the following example, the optional, injected &lt;code&gt;UserServiceConfig&lt;/code&gt; extends the greeting &lt;code&gt;UserService&lt;/code&gt;. If a &lt;code&gt;UserServiceConfig&lt;/code&gt; exists, the &lt;code&gt;UserService&lt;/code&gt; sets the user name from that config.</source>
          <target state="translated">次の例では、オプションの注入された &lt;code&gt;UserServiceConfig&lt;/code&gt; が挨拶 &lt;code&gt;UserService&lt;/code&gt; を拡張しています。場合 &lt;code&gt;UserServiceConfig&lt;/code&gt; が存在する、 &lt;code&gt;UserService&lt;/code&gt; のはその設定からユーザ名を設定します。</target>
        </trans-unit>
        <trans-unit id="79980625496444d650c75674c1a6f2e716b5d188" translate="yes" xml:space="preserve">
          <source>In the following example, the parent &lt;code&gt;AlexComponent&lt;/code&gt; has several children including a &lt;code&gt;CathyComponent&lt;/code&gt;:</source>
          <target state="translated">次の例では、親 &lt;code&gt;AlexComponent&lt;/code&gt; にCathyComponentを含むいくつかの子があり &lt;code&gt;CathyComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97bde64184548aee2d9e6e03dbad3ef9c4f94d3b" translate="yes" xml:space="preserve">
          <source>In the following example, the property takes an enumerated value, so the schematic automatically chooses the list type, and creates a menu from the possible values.</source>
          <target state="translated">次の例では、プロパティが列挙された値を取るため、回路図では自動的にリストタイプが選択され、可能な値からメニューが作成されます。</target>
        </trans-unit>
        <trans-unit id="6c392769910b861e7b93dfe5e5804173fd59771a" translate="yes" xml:space="preserve">
          <source>In the following example, the template statement &lt;code&gt;deleteHero()&lt;/code&gt; appears in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt;.</source>
          <target state="translated">次の例では、テンプレートステートメント &lt;code&gt;deleteHero()&lt;/code&gt; は、 &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt; のように &lt;code&gt;=&lt;/code&gt; 記号の右側に引用符で囲まれて表示されます。</target>
        </trans-unit>
        <trans-unit id="c54e3333d43519134c5d78d38632858279c3d079" translate="yes" xml:space="preserve">
          <source>In the following example, the two-way binding means that &lt;code&gt;optionName&lt;/code&gt; should be written when the &lt;code&gt;valueChange&lt;/code&gt; event fires.</source>
          <target state="translated">ことを次の例では、双方向結合手段 &lt;code&gt;optionName&lt;/code&gt; 書かれなければならない &lt;code&gt;valueChange&lt;/code&gt; イベントが発生。</target>
        </trans-unit>
        <trans-unit id="681d32dc4e5adc22dab536e5b1be6eebdc4f1f76" translate="yes" xml:space="preserve">
          <source>In the following example, using groups on both &lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt; allow for two different timing configurations. They're applied to the same element in parallel, but run independently.</source>
          <target state="translated">次の例では、 &lt;code&gt;:enter&lt;/code&gt; と &lt;code&gt;:leave&lt;/code&gt; の両方でグループを使用すると、2つの異なるタイミング構成が可能になります。同じ要素に同時に適用されますが、独立して実行されます。</target>
        </trans-unit>
        <trans-unit id="8e243f96c1e3aa3da393a2b376a50bcdce46ecb5" translate="yes" xml:space="preserve">
          <source>In the following example, we bind the &lt;code&gt;colspan&lt;/code&gt; attribute to the expression &lt;code&gt;1 + 1&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;colspan&lt;/code&gt; 属性を式 &lt;code&gt;1 + 1&lt;/code&gt; バインドします。</target>
        </trans-unit>
        <trans-unit id="cd98385101f7ec15002cf4d6b360a40c88e98235" translate="yes" xml:space="preserve">
          <source>In the following section, validation is performed asynchronously to ensure that our heroes pick an alter ego that is not already taken. New heroes are constantly enlisting and old heroes are leaving the service. That means that we do not have the list of available alter egos ahead of time.</source>
          <target state="translated">次のセクションでは、ヒーローが分身を選択する際に、すでに選択されていない分身を確認するために非同期で検証が行われます。新しいヒーローは絶えず入隊し、古いヒーローは退隊していきます。つまり、利用可能な分身のリストを事前に把握していないということです。</target>
        </trans-unit>
        <trans-unit id="6c3b3d738b040ea34330a9874710677277ec5aa4" translate="yes" xml:space="preserve">
          <source>In the following section, we will make sure that our heroes do not reveal their true identities by filling out the Hero Form. We will do that by validating that the hero names and alter egos do not match.</source>
          <target state="translated">次のセクションでは、ヒーローがヒーローフォームに記入することで、ヒーローの正体がバレないようにします。ヒーローの名前と分身が一致していないことを確認します。</target>
        </trans-unit>
        <trans-unit id="d5e8ea1209a297ac53c182cdecd191c2bcbcffe8" translate="yes" xml:space="preserve">
          <source>In the following sections, we will create a new schematics collection using the CLI in order to introduce the files and file structure, and some of the basic concepts.</source>
          <target state="translated">以下のセクションでは、ファイルやファイル構造、基本的な概念の一部を紹介するために、CLIを使用して新しい回路図コレクションを作成します。</target>
        </trans-unit>
        <trans-unit id="0acace1863c72c536f219d9c87ba3c000a59f9d9" translate="yes" xml:space="preserve">
          <source>In the following snippet, &lt;code&gt;{{ currentCustomer }}&lt;/code&gt; is an example of interpolation.</source>
          <target state="translated">次のスニペットでは、 &lt;code&gt;{{ currentCustomer }}&lt;/code&gt; が補間の例です。</target>
        </trans-unit>
        <trans-unit id="f92a97dafecf0ff63df469ad3dbf2f7287a1ee03" translate="yes" xml:space="preserve">
          <source>In the following typical example, the &lt;code&gt;Logger&lt;/code&gt; class itself provides a &lt;code&gt;Logger&lt;/code&gt; instance.</source>
          <target state="translated">次の典型的な例では、 &lt;code&gt;Logger&lt;/code&gt; クラス自体が &lt;code&gt;Logger&lt;/code&gt; インスタンスを提供します。</target>
        </trans-unit>
        <trans-unit id="9263e2adc28d440e0cdfa9d945ab8ceef993f6ee" translate="yes" xml:space="preserve">
          <source>In the initial route configuration, you provided a simple setup with two routes used to configure the application for routing. This is perfectly fine for simple routing. As the application grows and you make use of more &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; features, such as guards, resolvers, and child routing, you'll naturally want to refactor the routing configuration into its own file. We recommend moving the routing information into a special-purpose module called a &lt;em&gt;Routing Module&lt;/em&gt;.</source>
          <target state="translated">最初のルート構成では、ルーティング用にアプリケーションを構成するために使用される2つのルートを使用した簡単なセットアップを提供しました。これは、単純なルーティングでは完全に問題ありません。アプリケーションが大きくなり、ガード、リゾルバー、子ルーティングなどの &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 機能をさらに利用するようになると、当然、ルーティング構成を独自のファイルにリファクタリングする必要があります。ルーティング情報を&lt;em&gt;Routing Module&lt;/em&gt;と呼ばれる専用モジュールに移動することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ecc8204fd046d58554a4265d4a7d62d6183d43e8" translate="yes" xml:space="preserve">
          <source>In the lazy-loaded module's routing module, add a route for the component.</source>
          <target state="translated">遅延負荷モジュールのルーティングモジュールで、コンポーネントのルートを追加します。</target>
        </trans-unit>
        <trans-unit id="8939bb7d20361052e28964c91af95d20bb24f0bb" translate="yes" xml:space="preserve">
          <source>In the logical tree, this would be represented as follows:</source>
          <target state="translated">論理ツリーでは、これは次のように表されます。</target>
        </trans-unit>
        <trans-unit id="e61466e206b3ec0ac4d4feec978969505b42cf15" translate="yes" xml:space="preserve">
          <source>In the marketplace, search for Angular Language Service extension, and click the &lt;strong&gt;Install&lt;/strong&gt; button.</source>
          <target state="translated">マーケットプレイスで、Angular Language Service拡張機能を検索し、[ &lt;strong&gt;インストール&lt;/strong&gt; ]ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="ee29ab8b4fc806fd90c92d9225b82f01c19a7e67" translate="yes" xml:space="preserve">
          <source>In the meantime, the user's browser decides to evict &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt; from its cache. Browsers may decide to evict specific (or all) resources from a cache in order to reclaim disk space.</source>
          <target state="translated">その間に、ユーザーのブラウザは、 &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt; をキャッシュから削除することを決定します。ブラウザは、ディスクスペースを再利用するために、特定の（またはすべての）リソースをキャッシュから削除することを決定する場合があります。</target>
        </trans-unit>
        <trans-unit id="135913a2ad9622082620cc8052cee479a2283783" translate="yes" xml:space="preserve">
          <source>In the microsyntax expression, set &lt;code&gt;trackBy&lt;/code&gt; to the &lt;code&gt;trackByItems()&lt;/code&gt; method.</source>
          <target state="translated">マイクロ構文式で、 &lt;code&gt;trackBy&lt;/code&gt; を &lt;code&gt;trackByItems()&lt;/code&gt; メソッドに設定します。</target>
        </trans-unit>
        <trans-unit id="1161c17590b5bc612006dc669107bf6f21e58fcd" translate="yes" xml:space="preserve">
          <source>In the most basic type-checking mode, with the &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; flag set to &lt;code&gt;false&lt;/code&gt;, Angular validates only top-level expressions in a template.</source>
          <target state="translated">&lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; フラグを &lt;code&gt;false&lt;/code&gt; に設定した最も基本的なタイプチェックモードでは、Angularはテンプレート内の最上位の式のみを検証します。</target>
        </trans-unit>
        <trans-unit id="aeae7e3450618ec2a6c67802527cba205d86410b" translate="yes" xml:space="preserve">
          <source>In the new files, change every mention of &quot;hero&quot; to &quot;crisis&quot;, and &quot;heroes&quot; to &quot;crises&quot;.</source>
          <target state="translated">新しいファイルでは、&quot;英雄 &quot;のすべての言及を &quot;危機 &quot;に変更し、&quot;英雄 &quot;を &quot;危機 &quot;に変更します。</target>
        </trans-unit>
        <trans-unit id="cab7ba9e3cb300cd56f89341c1fe5eaa7652a159" translate="yes" xml:space="preserve">
          <source>In the new version, you import the Angular HTTP module and call its &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service instead of &lt;code&gt;ngResource&lt;/code&gt;.</source>
          <target state="translated">新しいバージョンでは、Angular HTTPモジュールをインポートし、 &lt;code&gt;ngResource&lt;/code&gt; の代わりにその &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスを呼び出します。</target>
        </trans-unit>
        <trans-unit id="fa45dc36ef2e509c03cb485f20fb4a25dc19e3d0" translate="yes" xml:space="preserve">
          <source>In the next example, the component uses the default, aggressive change detection strategy to monitor and update its display of every hero in the &lt;code&gt;heroes&lt;/code&gt; array. Here's the template:</source>
          <target state="translated">次の例では、コンポーネントはデフォルトの積極的な変更検出戦略を使用して、 &lt;code&gt;heroes&lt;/code&gt; 配列内のすべてのヒーローの表示を監視および更新します。テンプレートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="21babd8c9e3406ba32d7975f643689c6321dff5c" translate="yes" xml:space="preserve">
          <source>In the next section, define an &lt;code&gt;onSelect()&lt;/code&gt; method in &lt;code&gt;HeroesComponent&lt;/code&gt; to display the hero that was defined in the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; expression.</source>
          <target state="translated">次のセクションでは、定義 &lt;code&gt;onSelect()&lt;/code&gt; 方法を &lt;code&gt;HeroesComponent&lt;/code&gt; で定義された主人公表示する &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; の発現。</target>
        </trans-unit>
        <trans-unit id="0e27fa6280b06a48c06de4d2223a0f2a93964163" translate="yes" xml:space="preserve">
          <source>In the normal course of HTML development, you create a visual structure with HTML elements, and you modify those elements by setting element attributes with string constants.</source>
          <target state="translated">通常のHTML開発では、HTML要素で視覚的な構造を作成し、文字列定数で要素の属性を設定することでそれらの要素を変更します。</target>
        </trans-unit>
        <trans-unit id="5df49583093875b25bd10a8f1c9aa47bad102a04" translate="yes" xml:space="preserve">
          <source>In the parent</source>
          <target state="translated">親の中で</target>
        </trans-unit>
        <trans-unit id="f6cd4009229c716121ae40e31ca29e7d231e9536" translate="yes" xml:space="preserve">
          <source>In the parent component class, designate a value for &lt;code&gt;currentItem&lt;/code&gt;:</source>
          <target state="translated">親コンポーネントクラスで、 &lt;code&gt;currentItem&lt;/code&gt; の値を指定します。</target>
        </trans-unit>
        <trans-unit id="4ed3fcdf2f49b1de9c02b587cd3980ece017f8c4" translate="yes" xml:space="preserve">
          <source>In the parent's template</source>
          <target state="translated">親のテンプレートでは</target>
        </trans-unit>
        <trans-unit id="193ba2131cd5b3d9617d379626162cf928d3798c" translate="yes" xml:space="preserve">
          <source>In the parent's template, bind the parent's method to the child's event.</source>
          <target state="translated">親のテンプレートで、親のメソッドを子のイベントにバインドします。</target>
        </trans-unit>
        <trans-unit id="9448f1e5e82adc8fa114ca01e663ddcb3ca64590" translate="yes" xml:space="preserve">
          <source>In the preview page, you should see a URL that looks like &lt;code&gt;https://&amp;lt;Project ID&amp;gt;.stackblitz.io&lt;/code&gt;.</source>
          <target state="translated">プレビューページに、 &lt;code&gt;https://&amp;lt;Project ID&amp;gt;.stackblitz.io&lt;/code&gt; のようなURLが表示されます。</target>
        </trans-unit>
        <trans-unit id="12b331a031d5526e2ce679556bb4798bc27c1678" translate="yes" xml:space="preserve">
          <source>In the preview pane, hold the pointer over a product name to see the bound name property value, which is the product name plus the word &quot;details&quot;. Interpolation &lt;code&gt;{{ }}&lt;/code&gt; lets you render the property value as text; property binding &lt;code&gt;[ ]&lt;/code&gt; lets you use the property value in a template expression.</source>
          <target state="translated">プレビューウィンドウで、ポインターを製品名の上に置くと、バインドされた名前のプロパティ値が表示されます。これは、製品名に「詳細」という語を加えたものです。補間 &lt;code&gt;{{ }}&lt;/code&gt; 使用すると、プロパティ値をテキストとしてレンダリングできます。プロパティバインディング &lt;code&gt;[ ]&lt;/code&gt; を使用すると、テンプレート式でプロパティ値を使用できます。</target>
        </trans-unit>
        <trans-unit id="f527efcbc5138dc59f029ba483544b213cb3a7c6" translate="yes" xml:space="preserve">
          <source>In the preview pane, you should see a URL that looks like &lt;code&gt;https://&amp;lt;Project ID&amp;gt;.stackblitz.io&lt;/code&gt;.</source>
          <target state="translated">プレビューペインに、 &lt;code&gt;https://&amp;lt;Project ID&amp;gt;.stackblitz.io&lt;/code&gt; ようなURLが表示されます。</target>
        </trans-unit>
        <trans-unit id="9b0f4cf5ae261da923380b748662b8cfdefddb57" translate="yes" xml:space="preserve">
          <source>In the previous code sample, the second &lt;code&gt;fetch&lt;/code&gt; pipe binding demonstrates more pipe chaining. It displays the same hero data in JSON format by chaining through to the built-in &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">前のコードサンプルでは、​​2番目の &lt;code&gt;fetch&lt;/code&gt; パイプバインディングがより多くのパイプチェーンを示しています。組み込みの &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; にチェーンすることにより、同じヒーローデータをJSON形式で表示します。</target>
        </trans-unit>
        <trans-unit id="01a420c7f79a44c801ee09dbcac8fa73d6879ec4" translate="yes" xml:space="preserve">
          <source>In the previous example, the call to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; did not specify any options. By default, it returned the JSON data contained in the response body.</source>
          <target state="translated">前の例では、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; の呼び出しでオプションが指定されていませんでした。デフォルトでは、応答本文に含まれているJSONデータを返しました。</target>
        </trans-unit>
        <trans-unit id="2ad8b81ae652063e5ec08425ca076c90868e19f1" translate="yes" xml:space="preserve">
          <source>In the previous example, the current state of the input box is lost if the user mouses away and clicks elsewhere on the page without first pressing &lt;em&gt;Enter&lt;/em&gt;. The component's &lt;code&gt;value&lt;/code&gt; property is updated only when the user presses &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">前の例では、ユーザーが最初に&lt;em&gt;Enterキーを&lt;/em&gt;押さずにマウスを離してページ上の他の場所をクリックした場合、入力ボックスの現在の状態は失われます。コンポーネントの &lt;code&gt;value&lt;/code&gt; プロパティは、ユーザーが&lt;em&gt;Enterキーを&lt;/em&gt;押したときにのみ更新されます。</target>
        </trans-unit>
        <trans-unit id="763460cc5323fe0919754ecc16f1acecffc53597" translate="yes" xml:space="preserve">
          <source>In the previous example, the then-clause template is specified inline, as the content of the tag that contains the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive. You can also specify a template that is defined externally, by referencing a labeled &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element. When you do this, you can change which template to use at runtime, as shown in the following example.</source>
          <target state="translated">前の例では、then-clauseテンプレートは、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ディレクティブを含むタグのコンテンツとしてインラインで指定されています。ラベル付きの &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素を参照して、外部で定義されているテンプレートを指定することもできます。これを行うと、次の例に示すように、実行時に使用するテンプレートを変更できます。</target>
        </trans-unit>
        <trans-unit id="4a19249881705cdc1b85acc1634672c260e4f10e" translate="yes" xml:space="preserve">
          <source>In the previous section, we saw a simple two-state transition. Now we'll create an animation with multiple steps run in sequence using &lt;em&gt;keyframes&lt;/em&gt;.</source>
          <target state="translated">前のセクションでは、単純な2つの状態遷移を確認しました。次に、&lt;em&gt;キーフレーム&lt;/em&gt;を使用して複数のステップを順番に実行するアニメーションを作成します。</target>
        </trans-unit>
        <trans-unit id="75e13f3b00323a0edd780a29605d91a4037e1e98" translate="yes" xml:space="preserve">
          <source>In the product alert template, &lt;code&gt;product-alerts.component.html&lt;/code&gt;, update the &quot;Notify Me&quot; button with an event binding to call the &lt;code&gt;notify.emit()&lt;/code&gt; method.</source>
          <target state="translated">製品アラートテンプレート &lt;code&gt;product-alerts.component.html&lt;/code&gt; で、[Notify Me]ボタンをイベントバインディングで更新して、 &lt;code&gt;notify.emit()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="0360d761f9068dfd9ca829b686f2df2fa1225044" translate="yes" xml:space="preserve">
          <source>In the real world, you might have to accumulate the users changes, validate across fields, validate on the server, or hold changes in a pending state until the user confirms them as a group or cancels and reverts all changes.</source>
          <target state="translated">現実の世界では、ユーザーの変更を蓄積したり、フィールドをまたいで検証したり、サーバー上で検証したり、ユーザーがグループとして確認したり、すべての変更をキャンセルして元に戻したりするまで、変更を保留状態で保持したりする必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ea818ef7af8d7132c773be77df3abe5612f313e0" translate="yes" xml:space="preserve">
          <source>In the real world, you might have to accumulate the users changes. You might have to validate across fields. You might have to validate on the server. You might have to hold changes in a pending state until the user confirms them &lt;em&gt;as a group&lt;/em&gt; or cancels and reverts all changes.</source>
          <target state="translated">現実の世界では、ユーザーの変更を蓄積する必要があるかもしれません。フィールド間で検証する必要がある場合があります。サーバーで検証する必要がある場合があります。ユーザーが&lt;em&gt;グループとして&lt;/em&gt;変更を確認するか、すべての変更をキャンセルして元に戻すまで、変更を保留状態で保持する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="04ff1f44e350c222b1e5578340bd8b97370a5ce6" translate="yes" xml:space="preserve">
          <source>In the root folder of your e2e tests project, create a new file named &lt;code&gt;protractor-ci.conf.js&lt;/code&gt;. This new file extends the original &lt;code&gt;protractor.conf.js&lt;/code&gt;.</source>
          <target state="translated">e2eテストプロジェクトのルートフォルダーに、 &lt;code&gt;protractor-ci.conf.js&lt;/code&gt; という名前の新しいファイルを作成します。この新しいファイルは、元の &lt;code&gt;protractor.conf.js&lt;/code&gt; を拡張したものです。</target>
        </trans-unit>
        <trans-unit id="e83762a98939c0a3a7a3035af5d78fda350610db" translate="yes" xml:space="preserve">
          <source>In the same file (&lt;code&gt;HeroesComponent&lt;/code&gt; class), define a component property called &lt;code&gt;heroes&lt;/code&gt; to expose the &lt;code&gt;HEROES&lt;/code&gt; array for binding.</source>
          <target state="translated">同じファイル（ &lt;code&gt;HeroesComponent&lt;/code&gt; クラス）で、 &lt;code&gt;heroes&lt;/code&gt; というコンポーネントプロパティを定義して、バインディング用の &lt;code&gt;HEROES&lt;/code&gt; 配列を公​​開します。</target>
        </trans-unit>
        <trans-unit id="de3aa6f39e38ab8dae66e318d5fbdd408f9fe728" translate="yes" xml:space="preserve">
          <source>In the second approach, add &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;TestBed.schemas&lt;/code&gt; metadata.</source>
          <target state="translated">2番目のアプローチでは、 &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;TestBed.schemas&lt;/code&gt; メタデータに追加します。</target>
        </trans-unit>
        <trans-unit id="ebf229663e5442007be46c7c1f0611fa1c4d2bac" translate="yes" xml:space="preserve">
          <source>In the second case, TypeScript infers the type of &lt;code&gt;options&lt;/code&gt; to be &lt;code&gt;{responseType: string}&lt;/code&gt;. The type is too wide to pass to &lt;code&gt;HttpClient.get&lt;/code&gt; which is expecting the type of &lt;code&gt;responseType&lt;/code&gt; to be one of the &lt;em&gt;specific&lt;/em&gt; strings. &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; is typed explicitly this way so that the compiler can report the correct return type based on the options you provided.</source>
          <target state="translated">2番目のケースでは、TypeScriptは &lt;code&gt;options&lt;/code&gt; のタイプを &lt;code&gt;{responseType: string}&lt;/code&gt; と推測します。タイプが広すぎて、 &lt;code&gt;responseType&lt;/code&gt; のタイプが&lt;em&gt;特定の&lt;/em&gt;文字列の1つであることを期待している &lt;code&gt;HttpClient.get&lt;/code&gt; に渡すことができません。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; はこの方法で明示的に入力されるため、コンパイラは指定されたオプションに基づいて正しい戻り値の型を報告できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="431f8caabee69341acea4b6f059e0ce718e1b02a" translate="yes" xml:space="preserve">
          <source>In the service worker configuration file &lt;code&gt;ngsw-config.json&lt;/code&gt;, &lt;code&gt;versionedFiles&lt;/code&gt; and &lt;code&gt;files&lt;/code&gt; have the same behavior. As of v6, &lt;code&gt;versionedFiles&lt;/code&gt; is deprecated; use &lt;code&gt;files&lt;/code&gt; instead.</source>
          <target state="translated">サービスワーカーの設定ファイルでは &lt;code&gt;ngsw-config.json&lt;/code&gt; 、 &lt;code&gt;versionedFiles&lt;/code&gt; および &lt;code&gt;files&lt;/code&gt; 同じ動作をします。v6以降、 &lt;code&gt;versionedFiles&lt;/code&gt; は非推奨になりました。使用し &lt;code&gt;files&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="bc40e4dc159163c26df92dd1a1e680e199a71f26" translate="yes" xml:space="preserve">
          <source>In the short form, the type is inferred from the property's type and constraints.</source>
          <target state="translated">短縮形では、プロパティの型と制約から型を推論します。</target>
        </trans-unit>
        <trans-unit id="d0f5a292f2cae7ab9d3d79db4add6202faa4eff6" translate="yes" xml:space="preserve">
          <source>In the table below, you can find a list of packages which implement deployment functionality to different platforms. The &lt;code&gt;deploy&lt;/code&gt; command for each package may require different command line options. You can read more by following the links associated with the package names below:</source>
          <target state="translated">次の表に、さまざまなプラットフォームへの展開機能を実装するパッケージのリストを示します。各パッケージの &lt;code&gt;deploy&lt;/code&gt; コマンドには、異なるコマンドラインオプションが必要な場合があります。以下のパッケージ名に関連付けられているリンクをたどることにより、詳細を読むことができます。</target>
        </trans-unit>
        <trans-unit id="80a71042ab5f19d1b606e00cd661194ad1abb6c7" translate="yes" xml:space="preserve">
          <source>In the template tree, select &lt;code&gt;Templates&lt;/code&gt; | &lt;code&gt;Visual C#&lt;/code&gt; (or &lt;code&gt;Visual Basic&lt;/code&gt;) | &lt;code&gt;Web&lt;/code&gt;.</source>
          <target state="translated">テンプレートツリーで、[ &lt;code&gt;Templates&lt;/code&gt; 、[ テンプレート]の順に選択します。 &lt;code&gt;Visual C#&lt;/code&gt; （または &lt;code&gt;Visual Basic&lt;/code&gt; ）| &lt;code&gt;Web&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53cc553ac138c2e23462667f98a5b59c505018c2" translate="yes" xml:space="preserve">
          <source>In the template type-checking phase, the Angular template compiler uses the TypeScript compiler to validate the binding expressions in templates. Enable this phase explicitly by adding the compiler option &lt;code&gt;&quot;fullTemplateTypeCheck&quot;&lt;/code&gt; in the &lt;code&gt;&quot;angularCompilerOptions&quot;&lt;/code&gt; of the project's &lt;code&gt;tsconfig.json&lt;/code&gt; (see &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular Compiler Options&lt;/a&gt;).</source>
          <target state="translated">テンプレートの型チェックフェーズでは、AngularテンプレートコンパイラはTypeScriptコンパイラを使用して、テンプレートのバインディング式を検証します。コンパイラオプション追加することによって明示的にこのフェーズを有効に &lt;code&gt;&quot;fullTemplateTypeCheck&quot;&lt;/code&gt; 中 &lt;code&gt;&quot;angularCompilerOptions&quot;&lt;/code&gt; プロジェクトのの &lt;code&gt;tsconfig.json&lt;/code&gt; （参照&lt;a href=&quot;angular-compiler-options&quot;&gt;角度コンパイラオプションを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a81a0084e724fa8d67181befb8d1973d9b649133" translate="yes" xml:space="preserve">
          <source>In the template, each control is displayed as a separate input field.</source>
          <target state="translated">テンプレートでは、各コントロールは別の入力フィールドとして表示されます。</target>
        </trans-unit>
        <trans-unit id="ebcb733aa3fcdeeca539a469b4874e83e11653a1" translate="yes" xml:space="preserve">
          <source>In the template, include the non-null assertion operator &lt;code&gt;!&lt;/code&gt; at the end of a nullable expression, such as &lt;code&gt;&amp;lt;user-detail [user]=&quot;user!&quot; /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートに、null以外のアサーション演算子を含めます &lt;code&gt;!&lt;/code&gt; &lt;code&gt;&amp;lt;user-detail [user]=&quot;user!&quot; /&amp;gt;&lt;/code&gt; などのnull許容式の最後 /&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="5f973f5113f94431e75ce55450b06c69738655c9" translate="yes" xml:space="preserve">
          <source>In the template, place a &quot;New Hero&quot; &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element at the bottom of the form.</source>
          <target state="translated">テンプレートで、フォームの下部に「NewHero」 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素を配置します。</target>
        </trans-unit>
        <trans-unit id="4d5b02da4c4c29131d5446cd9c56b5adca992c39" translate="yes" xml:space="preserve">
          <source>In the template, the &lt;code&gt;aria-label&lt;/code&gt; attribute ensures that the control is accessible to screen readers.</source>
          <target state="translated">テンプレートでは、 &lt;code&gt;aria-label&lt;/code&gt; 属性により、スクリーンリーダーがコントロールにアクセスできることが保証されます。</target>
        </trans-unit>
        <trans-unit id="a62513ae1ff1a6a6efa8b1e4006e3b394f8cda0b" translate="yes" xml:space="preserve">
          <source>In the template, you use the hash symbol, &lt;code&gt;#&lt;/code&gt;, to declare a template variable. The following template variable, &lt;code&gt;#phone&lt;/code&gt;, declares a &lt;code&gt;phone&lt;/code&gt; variable on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">テンプレートでは、ハッシュ記号 &lt;code&gt;#&lt;/code&gt; を使用してテンプレート変数を宣言します。次のテンプレート変数 &lt;code&gt;#phone&lt;/code&gt; は、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;phone&lt;/code&gt; 変数を宣言します。</target>
        </trans-unit>
        <trans-unit id="3123807d4c800f4e675338a3f651fcf553e5eb18" translate="yes" xml:space="preserve">
          <source>In the terminal window at the root of your project, install the &lt;code&gt;devDependencies&lt;/code&gt; with &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;:</source>
          <target state="translated">プロジェクトのルートにあるターミナルウィンドウで、 &lt;code&gt;npm&lt;/code&gt; または &lt;code&gt;yarn&lt;/code&gt; を &lt;code&gt;devDependencies&lt;/code&gt; してdevDependenciesをインストールします。</target>
        </trans-unit>
        <trans-unit id="65a72a975b3735dcf036c8f8c9493f16a7f24225" translate="yes" xml:space="preserve">
          <source>In the tree on the left, select &lt;code&gt;Projects and Solutions&lt;/code&gt; | &lt;code&gt;External Web Tools&lt;/code&gt;.</source>
          <target state="translated">左側のツリーで、[ &lt;code&gt;Projects and Solutions&lt;/code&gt; 選択します。 &lt;code&gt;External Web Tools&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ba4a7c7d59a8cba5b32269012bfcf935dd49cc8" translate="yes" xml:space="preserve">
          <source>In the two-state button example, the wildcard isn't that useful because there are only two possible states, &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt;. Wildcard states are better when an element in one particular state has multiple potential states that it can change to. If the button can change from &lt;code&gt;open&lt;/code&gt; to either &lt;code&gt;closed&lt;/code&gt; or something like &lt;code&gt;inProgress&lt;/code&gt;, using a wildcard state could reduce the amount of coding needed.</source>
          <target state="translated">2状態ボタンの例では、 &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; 2つの状態しか考えられないため、ワイルドカードはそれほど有用ではありません。ワイルドカード状態は、1つの特定の状態の要素に、変更可能な複数の潜在的な状態がある場合に適しています。ボタンが &lt;code&gt;open&lt;/code&gt; ている &lt;code&gt;closed&lt;/code&gt; から閉じている状態、または &lt;code&gt;inProgress&lt;/code&gt; のようなものに変わる可能性がある場合は、ワイルドカード状態を使用すると、必要なコーディングの量を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="5953890c3c12b1a1d4e4941138925956ddcb1936" translate="yes" xml:space="preserve">
          <source>In these cases, you can use a special wildcard &lt;code&gt;*&lt;/code&gt; property value under &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt;, so that the value of that particular style property is computed at runtime and then plugged into the animation.</source>
          <target state="translated">このような場合、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; （）で特別なワイルドカード &lt;code&gt;*&lt;/code&gt; プロパティ値を使用して、その特定のスタイルプロパティの値が実行時に計算され、アニメーションにプラグインされるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="2e96b145ad3ef101a9a5349da867c2602f97778e" translate="yes" xml:space="preserve">
          <source>In these situations, it is possible to &lt;em&gt;upgrade&lt;/em&gt; an AngularJS provider to Angular. This makes it possible to then inject it somewhere in Angular code. For example, you might have a service called &lt;code&gt;HeroesService&lt;/code&gt; in AngularJS:</source>
          <target state="translated">これらの状況では、AngularJSプロバイダーをAngular に&lt;em&gt;アップグレード&lt;/em&gt;することが可能です。これにより、Angularコードのどこかに挿入することができます。たとえば、AngularJSに &lt;code&gt;HeroesService&lt;/code&gt; というサービスがあるとします。</target>
        </trans-unit>
        <trans-unit id="540f547baf27d40ff42671c435006ba47fae2226" translate="yes" xml:space="preserve">
          <source>In this &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial, you will build an app that helps a staffing agency manage its stable of heroes.</source>
          <target state="translated">この&lt;em&gt;Tour of Heroes&lt;/em&gt;チュートリアルでは、人材派遣会社がヒーローの安定を管理するのに役立つアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="e98ea4cfef6e5f121ccbfc306924f5544139d4ea" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is displaying an array, but &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; can repeat items for any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterable&lt;/a&gt; object.</source>
          <target state="translated">この場合、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は、アレイを表示しているが、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は、任意の項目を繰り返すことができる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;反復可能&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="9152d9aaf0f4804a6151c4e1e55932c83c01c34e" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorates the property &lt;code&gt;item&lt;/code&gt;, which has a type of &lt;code&gt;string&lt;/code&gt;, however, &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; properties can have any type, such as &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;number&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, or &lt;code&gt;object&lt;/code&gt;. The value for &lt;code&gt;item&lt;/code&gt; comes from the parent component.</source>
          <target state="translated">この場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; は &lt;code&gt;string&lt;/code&gt; タイプを持つプロパティ &lt;code&gt;item&lt;/code&gt; 装飾しますが、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）プロパティは、 &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;number&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;boolean&lt;/code&gt; 、 &lt;code&gt;object&lt;/code&gt; など、任意のタイプを持つことができます。 &lt;code&gt;item&lt;/code&gt; の値は、親コンポーネントから取得されます。</target>
        </trans-unit>
        <trans-unit id="6b79b6ff431d28fff0de7299c5e8f98be33e351c" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorates the property &lt;code&gt;item&lt;/code&gt;, which has a type of &lt;code&gt;string&lt;/code&gt;, however, &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; properties can have any type, such as &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, or &lt;code&gt;object&lt;/code&gt;. The value for &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; will come from the parent component, which the next section covers.</source>
          <target state="translated">この場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; は、 &lt;code&gt;string&lt;/code&gt; 型のプロパティ &lt;code&gt;item&lt;/code&gt; を装飾しますが、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）プロパティは、 &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;boolean&lt;/code&gt; 、 &lt;code&gt;object&lt;/code&gt; などの任意の型を持つことができます。 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; の値は、次のセクションで説明する親コンポーネントから取得されます。</target>
        </trans-unit>
        <trans-unit id="eb00ef72a4a1581ddb03343a0b1a91065133fc3f" translate="yes" xml:space="preserve">
          <source>In this case, the URL is relative to the CSS file into which you're importing.</source>
          <target state="translated">この場合、URLはインポート先のCSSファイルからの相対的なものになります。</target>
        </trans-unit>
        <trans-unit id="28c41d5d9a09f8ff971841552d898d001d4abc7f" translate="yes" xml:space="preserve">
          <source>In this case, the compiler doesn't understand how to inject something with the &lt;code&gt;Window&lt;/code&gt; token.</source>
          <target state="translated">この場合、コンパイラは、 &lt;code&gt;Window&lt;/code&gt; トークンで何かを挿入する方法を理解していません。</target>
        </trans-unit>
        <trans-unit id="9c70127c467d27d51e62747cdfd36e0f50102f8e" translate="yes" xml:space="preserve">
          <source>In this case, the installed &lt;code&gt;@types/jquery&lt;/code&gt; doesn't include &lt;code&gt;myPlugin&lt;/code&gt;, so you need to add an interface in &lt;code&gt;src/typings.d.ts&lt;/code&gt;. For example:</source>
          <target state="translated">この場合、インストールされている &lt;code&gt;@types/jquery&lt;/code&gt; は &lt;code&gt;myPlugin&lt;/code&gt; が含まれていないため、 &lt;code&gt;src/typings.d.ts&lt;/code&gt; にインターフェースを追加する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="ef9a0cfbc3978a23bac648732aecf66dda795c0d" translate="yes" xml:space="preserve">
          <source>In this case, the value you'd get for &lt;code&gt;emoji&lt;/code&gt; would be &lt;code&gt;🌿&lt;/code&gt; (fern), not &lt;code&gt;🍁&lt;/code&gt; (maple leaf).</source>
          <target state="translated">この場合は、あなたが取得したい値 &lt;code&gt;emoji&lt;/code&gt; なり &lt;code&gt;🌿&lt;/code&gt; （シダ）、ない &lt;code&gt;🍁&lt;/code&gt; （カエデの葉）。</target>
        </trans-unit>
        <trans-unit id="bfd20680b9b498ed5f14027a21db5b47a1c4a2e2" translate="yes" xml:space="preserve">
          <source>In this case, there is an implied &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; around the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and the definition of the variable is outside of it. Accessing a template variable from the parent template works because the child template inherits the context from the parent template.</source>
          <target state="translated">この場合、 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の周りに暗黙の &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; があり、変数の定義はその外側にあります。子テンプレートは親テンプレートからコンテキストを継承するため、親テンプレートからテンプレート変数にアクセスすることはできます。</target>
        </trans-unit>
        <trans-unit id="4439bb06c28a004aad6a895a5a28f3b2a6d5d2b6" translate="yes" xml:space="preserve">
          <source>In this contrived example, &lt;code&gt;SortedHeroesComponent&lt;/code&gt; inherits from &lt;code&gt;HeroesBaseComponent&lt;/code&gt; to display a &lt;em&gt;sorted&lt;/em&gt; list of heroes.</source>
          <target state="translated">この不自然な例では、 &lt;code&gt;SortedHeroesComponent&lt;/code&gt; はから継承 &lt;code&gt;HeroesBaseComponent&lt;/code&gt; 表示する&lt;em&gt;ソート&lt;/em&gt;ヒーローのリスト。</target>
        </trans-unit>
        <trans-unit id="b5d0fc9c03a45683f8fef40516bc682df34feb20" translate="yes" xml:space="preserve">
          <source>In this demo, the &lt;code&gt;highlightColor&lt;/code&gt; property is an &lt;strong&gt;&lt;em&gt;input&lt;/em&gt;&lt;/strong&gt; property of the &lt;code&gt;HighlightDirective&lt;/code&gt;. You've seen it applied without an alias:</source>
          <target state="translated">このデモでは、 &lt;code&gt;highlightColor&lt;/code&gt; プロパティは &lt;code&gt;HighlightDirective&lt;/code&gt; の&lt;strong&gt;&lt;em&gt;入力&lt;/em&gt;&lt;/strong&gt;プロパティです。あなたはそれがエイリアスなしで適用されるのを見てきました：</target>
        </trans-unit>
        <trans-unit id="c8f2e72386b9b53a8533513dbcfa25c5d02a6eb9" translate="yes" xml:space="preserve">
          <source>In this example debug file, the update check is currently scheduled, as explained the next section.</source>
          <target state="translated">この例のデバッグファイルでは、次のセクションで説明するように、更新チェックは現在スケジュールされています。</target>
        </trans-unit>
        <trans-unit id="02d2c8724e6a540145a981a2031d64f7d39e59d8" translate="yes" xml:space="preserve">
          <source>In this example it is recommended to include the checking of &lt;code&gt;address&lt;/code&gt; in the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; as shown below:</source>
          <target state="translated">この例では、のチェックを含めることが推奨される &lt;code&gt;address&lt;/code&gt; で &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を以下のように：</target>
        </trans-unit>
        <trans-unit id="b774b69bbfb4a217d822daab677e5225b9498242" translate="yes" xml:space="preserve">
          <source>In this example the parent queries the token to obtain the child component, and stores the resulting component reference if it is present. Before calling a method in the child, the parent component checks to see if the child component is present. If the child component has been tree-shaken, there is no runtime reference to it, and no call to its method.</source>
          <target state="translated">この例では、親はトークンをクエリして子コンポーネントを取得し、その結果として得られたコンポーネント参照が存在する場合はそれを格納します。子のメソッドを呼び出す前に、親コンポーネントは子コンポーネントが存在するかどうかをチェックします。子コンポーネントがツリーシェイクされている場合、子コンポーネントへのランタイム参照はなく、そのメソッドの呼び出しもありません。</target>
        </trans-unit>
        <trans-unit id="12681fef4106e092359d97b4ddfc2ed1ade7f74a" translate="yes" xml:space="preserve">
          <source>In this example you can see that we must derive from the &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; base class but also provide an &lt;a href=&quot;../../core/directive&quot;&gt;`@Directive`&lt;/a&gt; decorator. This is because the AOT compiler requires that this information is statically available at compile time.</source>
          <target state="translated">この例では、 &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; 基本クラスから派生する必要があるだけでなく、&lt;a href=&quot;../../core/directive&quot;&gt;`@ Directive`&lt;/a&gt;デコレータも提供する必要があることがわかります。これは、AOTコンパイラでは、コンパイル時にこの情報が静的に利用可能である必要があるためです。</target>
        </trans-unit>
        <trans-unit id="b620465ba0900e951bd37550e9f4865b71f4e6f7" translate="yes" xml:space="preserve">
          <source>In this example you can see that we must derive from the &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; base class but also provide an &lt;a href=&quot;../../core/directive&quot;&gt;`@Directive`&lt;/a&gt; decorator. This is because the AoT compiler requires that this information is statically available at compile time.</source>
          <target state="translated">この例では、 &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; 基本クラスから派生する必要があるが、&lt;a href=&quot;../../core/directive&quot;&gt;`@ Directive`&lt;/a&gt;デコレーターも提供する必要があることがわかります。これは、AoTコンパイラーがこの情報をコンパイル時に静的に使用できるようにする必要があるためです。</target>
        </trans-unit>
        <trans-unit id="999cba4e5d3608eb750ca4d8169b051362b41fc2" translate="yes" xml:space="preserve">
          <source>In this example you upgraded a service class. You can use a TypeScript type annotation when you inject it. While it doesn't affect how the dependency is handled, it enables the benefits of static type checking. This is not required though, and any AngularJS service, factory, or provider can be upgraded.</source>
          <target state="translated">この例では、サービスクラスをアップグレードしました。インジェクションする際には、TypeScript の型アノテーションを使用することができます。これは依存関係の処理方法には影響しませんが、静的な型チェックの利点を有効にします。これは必須ではありませんが、AngularJSのサービス、ファクトリー、プロバイダであればどのようなものでもアップグレードできます。</target>
        </trans-unit>
        <trans-unit id="7763722043d3b5d9efcc966176e2b82c6d6a5d7f" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;AppComponent&lt;/code&gt; specifies a different &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; object (&lt;code&gt;currentItem&lt;/code&gt;) and passes it to the nested &lt;code&gt;ListItemComponent&lt;/code&gt;. &lt;code&gt;ListItemComponent&lt;/code&gt; was able to use &lt;code&gt;currentItem&lt;/code&gt; because it matches what an &lt;code&gt;Item&lt;/code&gt; object is according to &lt;code&gt;item.ts&lt;/code&gt;. The &lt;code&gt;item.ts&lt;/code&gt; file is where &lt;code&gt;ListItemComponent&lt;/code&gt; gets its definition of an &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;AppComponent&lt;/code&gt; は別の &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; オブジェクト（ &lt;code&gt;currentItem&lt;/code&gt; ）を指定し、それをネストされた &lt;code&gt;ListItemComponent&lt;/code&gt; に渡します。 &lt;code&gt;ListItemComponent&lt;/code&gt; は、 &lt;code&gt;item.ts&lt;/code&gt; によると &lt;code&gt;Item&lt;/code&gt; オブジェクトが一致するため、 &lt;code&gt;currentItem&lt;/code&gt; を使用できました。 &lt;code&gt;item.ts&lt;/code&gt; の場所ファイルがある &lt;code&gt;ListItemComponent&lt;/code&gt; は、その定義を取得 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b1113ef229de9681ba37dd24148caf319decf0c" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;HeroBiosComponent&lt;/code&gt; presents three instances of &lt;code&gt;HeroBioComponent&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;HeroBiosComponent&lt;/code&gt; は、の3つのインスタンス提示 &lt;code&gt;HeroBioComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="eb6d2e0877ff8bb6ab9b60da3559f19869b2670b" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;ItemListComponent&lt;/code&gt; is a child component of &lt;code&gt;AppComponent&lt;/code&gt; and the &lt;code&gt;items&lt;/code&gt; property expects an array of objects.</source>
          <target state="translated">この例では、 &lt;code&gt;ItemListComponent&lt;/code&gt; は &lt;code&gt;AppComponent&lt;/code&gt; の子コンポーネントであり、 &lt;code&gt;items&lt;/code&gt; プロパティはオブジェクトの配列を想定しています。</target>
        </trans-unit>
        <trans-unit id="bcdd5ca8e804eec05ea345bce2cc9b339710030a" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;address &lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; combines the current &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; controls with the new &lt;code&gt;street&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;zip&lt;/code&gt; controls. Even though the &lt;code&gt;address&lt;/code&gt; element in the form group is a child of the overall &lt;code&gt;profileForm&lt;/code&gt; element in the form group, the same rules apply with value and status changes. Changes in status and value from the nested form group propagate to the parent form group, maintaining consistency with the overall model.</source>
          <target state="translated">この例では、 &lt;code&gt;address &lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; は、現在の &lt;code&gt;firstName&lt;/code&gt; および &lt;code&gt;lastName&lt;/code&gt; コントロールと、新しい &lt;code&gt;street&lt;/code&gt; 、 &lt;code&gt;city&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;zip&lt;/code&gt; コントロールを組み合わせています。にもかかわらず、 &lt;code&gt;address&lt;/code&gt; 形式のグループ内の要素が全体的にの子である &lt;code&gt;profileForm&lt;/code&gt; のフォームグループ内の要素、同じ規則が値やステータス変更を適用します。ネストされたフォームグループからのステータスと値の変更は、親フォームグループに伝播し、モデル全体との一貫性を維持します。</target>
        </trans-unit>
        <trans-unit id="6568bcbea95dafb76ba6158489a1f4c7cfeff05d" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;address group&lt;/code&gt; combines the current &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; controls with the new &lt;code&gt;street&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;zip&lt;/code&gt; controls. Even though the &lt;code&gt;address&lt;/code&gt; element in the form group is a child of the overall &lt;code&gt;profileForm&lt;/code&gt; element in the form group, the same rules apply with value and status changes. Changes in status and value from the nested form group propagate to the parent form group, maintaining consistency with the overall model.</source>
          <target state="translated">この例では、 &lt;code&gt;address group&lt;/code&gt; は、現在の &lt;code&gt;firstName&lt;/code&gt; および &lt;code&gt;lastName&lt;/code&gt; コントロールを、新しい &lt;code&gt;street&lt;/code&gt; 、 &lt;code&gt;city&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;zip&lt;/code&gt; コントロールと組み合わせています。にもかかわらず、 &lt;code&gt;address&lt;/code&gt; 形式のグループ内の要素が全体的にの子である &lt;code&gt;profileForm&lt;/code&gt; のフォームグループ内の要素、同じ規則が値やステータス変更を適用します。ネストされたフォームグループからのステータスと値の変更は、モデル全体との一貫性を維持しながら、親フォームグループに伝播します。</target>
        </trans-unit>
        <trans-unit id="7cee86bfe07ecf66a51c7598a472099fbbc80f94" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;isStable&lt;/code&gt; will never emit &lt;code&gt;true&lt;/code&gt;, and the trace &quot;App is stable now&quot; will never get logged.</source>
          <target state="translated">この例では、 &lt;code&gt;isStable&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を発行することはなく、「アプリは現在安定しています」というトレースはログに記録されません。</target>
        </trans-unit>
        <trans-unit id="c79344ccbfa54921494830310030314d6d9e755c" translate="yes" xml:space="preserve">
          <source>In this example, Angular extracts the expression into two translation units. The first contains the text outside of the &lt;code&gt;select&lt;/code&gt; clause, and uses a placeholder for &lt;code&gt;select&lt;/code&gt; (&lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt;):</source>
          <target state="translated">この例では、Angularは式を2つの変換単位に抽出します。1つ目は、 &lt;code&gt;select&lt;/code&gt; 句の外側のテキストを含み、 &lt;code&gt;select&lt;/code&gt; （ &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt; ）のプレースホルダーを使用します。</target>
        </trans-unit>
        <trans-unit id="47e50b8623e6a33c605f9c63cfc99fe2a4fd5105" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;code&gt;CounterComponent&lt;/code&gt; logs a change (via &lt;code&gt;ngOnChanges&lt;/code&gt;) every time the parent component increments its input counter property. Meanwhile, the &lt;code&gt;SpyDirective&lt;/code&gt; from the previous example is applied to the &lt;code&gt;CounterComponent&lt;/code&gt; log where it watches log entries being created and destroyed.</source>
          <target state="translated">この例では、 &lt;code&gt;CounterComponent&lt;/code&gt; は（経由変更ログ &lt;code&gt;ngOnChanges&lt;/code&gt; ）親コンポーネントは、その入力カウンタプロパティをインクリメントするたびに。一方、 &lt;code&gt;SpyDirective&lt;/code&gt; 前の例からは、に適用される &lt;code&gt;CounterComponent&lt;/code&gt; に、ログエントリが作成され、破壊される監視ログ。</target>
        </trans-unit>
        <trans-unit id="eea996b3cfb2e36d293eb699e6a686b5dec933eb" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;code&gt;CounterComponent&lt;/code&gt; uses the &lt;code&gt;ngOnChanges()&lt;/code&gt; method to log a change every time the parent component increments its input &lt;code&gt;counter&lt;/code&gt; property.</source>
          <target state="translated">この例では、 &lt;code&gt;CounterComponent&lt;/code&gt; は &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドを使用して、親コンポーネントが入力 &lt;code&gt;counter&lt;/code&gt; プロパティをインクリメントするたびに変更をログに記録します。</target>
        </trans-unit>
        <trans-unit id="4795c3bc01ada269031f573d0bb0dec2cbfc2b88" translate="yes" xml:space="preserve">
          <source>In this example, clicking the button calls the &lt;code&gt;log()&lt;/code&gt; function, which outputs the value of &lt;code&gt;#ref3&lt;/code&gt; to the console. Because the &lt;code&gt;#ref&lt;/code&gt; variable is on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;, the value is &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この例では、ボタンをクリックすると &lt;code&gt;log()&lt;/code&gt; 関数が &lt;code&gt;#ref3&lt;/code&gt; れ、＃ref3の値がコンソールに出力されます。ので &lt;code&gt;#ref&lt;/code&gt; 変数が上にある &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 、値がある &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b34c27516f98552db8673b22efff281ea6a08dc6" translate="yes" xml:space="preserve">
          <source>In this example, if &lt;code&gt;favoriteHero&lt;/code&gt; is not set, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; displays, &quot;Please enter ...&quot;. If &lt;code&gt;favoriteHero&lt;/code&gt; is set, the app checks the movie hero by calling a component method. If that method returns &lt;code&gt;true&lt;/code&gt;, the app selects &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;true&quot;&lt;/code&gt; and displays: &quot;Excellent choice!&quot; If that methods returns &lt;code&gt;false&lt;/code&gt;, the app selects &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;false&quot;&lt;/code&gt; and displays: &quot;No movie, sorry!&quot;</source>
          <target state="translated">この例では、 &lt;code&gt;favoriteHero&lt;/code&gt; が設定されていない場合、 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; 値は &lt;code&gt;null&lt;/code&gt; であり、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; は「&amp;hellip;を入力してください」と表示します。場合 &lt;code&gt;favoriteHero&lt;/code&gt; は、コンポーネントのメソッドを呼び出すことで、アプリのチェック映画のヒーローに設定されています。そのメソッドが &lt;code&gt;true&lt;/code&gt; を返す場合、アプリは &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;true&quot;&lt;/code&gt; を選択し、「Excellent choice！」と表示します。そのメソッドが &lt;code&gt;false&lt;/code&gt; を返す場合、アプリは &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;false&quot;&lt;/code&gt; を選択し、「No movie、sorry！」と表示します。</target>
        </trans-unit>
        <trans-unit id="72f1f2d37ac6c79270b0a7d0849a98d48abc0296" translate="yes" xml:space="preserve">
          <source>In this example, if &lt;code&gt;favoriteHero&lt;/code&gt; is not set, the template displays &quot;Please enter ...&quot;. If &lt;code&gt;favoriteHero&lt;/code&gt; is set, it checks the movie hero by calling a controller method. If that method returns &lt;code&gt;true&lt;/code&gt;, the template displays &quot;Excellent choice!&quot;. If that methods returns &lt;code&gt;false&lt;/code&gt;, the template displays &quot;No movie, sorry!&quot;.</source>
          <target state="translated">この例では、 &lt;code&gt;favoriteHero&lt;/code&gt; が設定されていない場合、テンプレートには「&amp;hellip;を入力してください」と表示されます。 &lt;code&gt;favoriteHero&lt;/code&gt; が設定されている場合、コントローラーメソッドを呼び出して映画のヒーローをチェックします。そのメソッドが &lt;code&gt;true&lt;/code&gt; を返す場合、テンプレートには「Excellent choice！」と表示されます。そのメソッドが &lt;code&gt;false&lt;/code&gt; を返す場合、テンプレートには「ムービーなし、申し訳ありません！」と表示されます。</target>
        </trans-unit>
        <trans-unit id="af3bdcb5fef615d78019a726d74324f420e52102" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is hidden if the &lt;code&gt;favoriteHero&lt;/code&gt; variable is not truthy.</source>
          <target state="translated">この例では、 &lt;code&gt;favoriteHero&lt;/code&gt; 変数がtrueでない場合、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素は非表示になっています。</target>
        </trans-unit>
        <trans-unit id="45a0870a00e40b52bff70afae912dde516d98427" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is shown if the &lt;code&gt;favoriteHero&lt;/code&gt; variable is truthy.</source>
          <target state="translated">この例では、 &lt;code&gt;favoriteHero&lt;/code&gt; 変数がtrueの場合、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素が表示されます。</target>
        </trans-unit>
        <trans-unit id="eaed41066495437d45b6edacc8a7e191ea8479ea" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element is removed from the DOM unless the &lt;code&gt;movies&lt;/code&gt; array has a length greater than zero.</source>
          <target state="translated">この例では、 &lt;code&gt;movies&lt;/code&gt; 配列の長さがゼロより大きい場合を除き、 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 要素はDOMから削除されます。</target>
        </trans-unit>
        <trans-unit id="29ba1a50a860d713db88a878e1386a55649ba999" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element is removed from the DOM unless the &lt;code&gt;movies&lt;/code&gt; array has a length.</source>
          <target state="translated">この例では、 &lt;code&gt;movies&lt;/code&gt; 配列に長さがなければ、 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 要素はDOMから削除されます。</target>
        </trans-unit>
        <trans-unit id="9914b2e1524218e10a4fe48a32a9e8b2977bb5c9" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;BannerComponent&lt;/code&gt; is the only component to compile. Other examples configure the testing module with multiple components and may import application modules that hold yet more components. Any of them could be require external files.</source>
          <target state="translated">この例では、 &lt;code&gt;BannerComponent&lt;/code&gt; がコンパイルする唯一のコンポーネントです。他の例では、複数のコンポーネントでテストモジュールを構成し、さらに多くのコンポーネントを保持するアプリケーションモジュールをインポートする場合があります。それらのいずれも外部ファイルを必要とする可能性があります。</target>
        </trans-unit>
        <trans-unit id="3390a9441f57488ac443819ff9b1e78631a8db37" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;BannerComponent&lt;/code&gt; is the only component to compile. Other examples configure the testing module with multiple components and may import application modules that hold yet more components. Any of them could require external files.</source>
          <target state="translated">この例では、 &lt;code&gt;BannerComponent&lt;/code&gt; がコンパイルする唯一のコンポーネントです。他の例では、テストモジュールを複数のコンポーネントで構成し、さらに多くのコンポーネントを保持するアプリケーションモジュールをインポートする場合があります。それらのいずれも外部ファイルを必要とする可能性があります。</target>
        </trans-unit>
        <trans-unit id="119771170aaca742e78ea766c300375a30e9f747" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;LibCardComponent&lt;/code&gt; implementation no longer refers to &lt;code&gt;LibHeaderComponent&lt;/code&gt; in either the type position or the value position. This allows full tree shaking of &lt;code&gt;LibHeaderComponent&lt;/code&gt; to take place. The &lt;code&gt;LibHeaderToken&lt;/code&gt; is retained, but it is only a class declaration, with no concrete implementation. It is small and does not materially impact the application size when retained after compilation.</source>
          <target state="translated">この例では、 &lt;code&gt;LibCardComponent&lt;/code&gt; 実装は、型位置または値位置のいずれかで &lt;code&gt;LibHeaderComponent&lt;/code&gt; を参照しなくなりました。これにより、 &lt;code&gt;LibHeaderComponent&lt;/code&gt; の完全なツリーシェイクを実行できます。 &lt;code&gt;LibHeaderToken&lt;/code&gt; は保持されますが、それは具体的な実装で、唯一のクラス宣言です。これは小さく、コンパイル後に保持された場合、アプリケーションのサイズに大きな影響を与えません。</target>
        </trans-unit>
        <trans-unit id="021f289166efe72931574fd499284cc05ab8c72e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;LoadingState&amp;lt;T&amp;gt;&lt;/code&gt; type permits either of two states, &lt;code&gt;Loaded&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Loading&lt;/code&gt;. The expression used as the directive&amp;rsquo;s &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; input is of the umbrella type &lt;code&gt;LoadingState&lt;/code&gt;, as it&amp;rsquo;s unknown what the loading state is at that point.</source>
          <target state="translated">この例では、 &lt;code&gt;LoadingState&amp;lt;T&amp;gt;&lt;/code&gt; タイプは、 &lt;code&gt;Loaded&amp;lt;T&amp;gt;&lt;/code&gt; または &lt;code&gt;Loading&lt;/code&gt; の2つの状態のいずれかを許可します。ディレクティブの &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 入力として使用される式は、その時点でのロード状態が不明であるため、アンブレラタイプ &lt;code&gt;LoadingState&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5f0121c1cd7668454f283fbaa22a823417529960" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;TwainComponent.getQuote()&lt;/code&gt; method tells you that the &lt;code&gt;quote&lt;/code&gt; property returns an &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;TwainComponent.getQuote()&lt;/code&gt; メソッドは、 &lt;code&gt;quote&lt;/code&gt; プロパティが &lt;code&gt;Observable&lt;/code&gt; を返すことを示しています。</target>
        </trans-unit>
        <trans-unit id="a652a084958d1f1ea901db7f1428a4b9bc52595b" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;doSomething()&lt;/code&gt; method updates the screen when the hero name exceeds 10 characters, but waits a tick before updating &lt;code&gt;comment&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;doSomething()&lt;/code&gt; メソッドは、ヒーロー名が10文字を超えると画面を更新しますが、 &lt;code&gt;comment&lt;/code&gt; 更新する前にティックを待ちます。</target>
        </trans-unit>
        <trans-unit id="d8dc87778ed16f68aed10d08c1afb1cc4c8aa4f0" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;h1&lt;/code&gt; style applies only to the &lt;code&gt;HeroAppComponent&lt;/code&gt;, not to the nested &lt;code&gt;HeroMainComponent&lt;/code&gt; nor to &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags anywhere else in the application.</source>
          <target state="translated">この例では、 &lt;code&gt;h1&lt;/code&gt; スタイルは &lt;code&gt;HeroAppComponent&lt;/code&gt; にのみ適用され、ネストされた &lt;code&gt;HeroMainComponent&lt;/code&gt; にも、アプリケーションの他の場所の &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; タグにも適用されません。</target>
        </trans-unit>
        <trans-unit id="67de3693d36a539340b8927be4b004d3faaeb677" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;name&lt;/code&gt; control sets up two built-in validators&amp;mdash;&lt;code&gt;Validators.required&lt;/code&gt; and &lt;code&gt;Validators.minLength(4)&lt;/code&gt;&amp;mdash;and one custom validator, &lt;code&gt;forbiddenNameValidator&lt;/code&gt;. (For more details see &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators&lt;/a&gt; below.)</source>
          <target state="translated">この例では、 &lt;code&gt;name&lt;/code&gt; コントロールは2つの組み込み &lt;code&gt;Validators.minLength(4)&lt;/code&gt; &lt;code&gt;Validators.required&lt;/code&gt; とValidators.minLength（4））と1つのカスタムバリデーター &lt;code&gt;forbiddenNameValidator&lt;/code&gt; をセットアップします。（詳細については、以下の&lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーターを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="581286bbe5a7e8813d9bd8f6ce48e4c91dae6d3b" translate="yes" xml:space="preserve">
          <source>In this example, the Angular CLI compiles and bundles the Universal version of the app with the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time (AOT) compiler&lt;/a&gt;. A Node.js Express web server compiles HTML pages with Universal based on client requests.</source>
          <target state="translated">この例では、Angular CLIは、アプリのユニバーサルバージョンをコンパイルして&lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time（AOT）コンパイラーに&lt;/a&gt;バンドルします。Node.js Express Webサーバーは、クライアントの要求に基づいてUniversalを使用してHTMLページをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="70fdbfe2246483712f70ef97797c46fb0bec5603" translate="yes" xml:space="preserve">
          <source>In this example, the Angular CLI compiles and bundles the Universal version of the app with the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time (AoT) compiler&lt;/a&gt;. A Node Express web server compiles HTML pages with Universal based on client requests.</source>
          <target state="translated">この例では、Angular CLIはアプリのユニバーサルバージョンをコンパイルし、&lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time（AoT）コンパイラー&lt;/a&gt;とバンドルします。Node Express Webサーバーは、クライアントの要求に基づいて、UniversalでHTMLページをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="f1117862898e16209748d37073fb954a643784bc" translate="yes" xml:space="preserve">
          <source>In this example, the compiler disregards type incompatibilities in nullability, just as in TypeScript code. In the case of the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe, note that the expression needs to be wrapped in parentheses, as in &lt;code&gt;&amp;lt;user-detail [user]=&quot;(user$ | async)!&quot; /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">この例では、コンパイラはTypeScriptコードの場合と同様に、null可能性の型の非互換性を無視します。 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプの場合、 &lt;code&gt;&amp;lt;user-detail [user]=&quot;(user$ | async)!&quot; /&amp;gt;&lt;/code&gt; ように、式を括弧で囲む必要があることに注意してください。/&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="7f0c59ac145dae8f5ddcee4ccb7a940b3dee4652" translate="yes" xml:space="preserve">
          <source>In this example, the context of the &lt;code&gt;$event&lt;/code&gt; object, &lt;code&gt;hero&lt;/code&gt;, and &lt;code&gt;#heroForm&lt;/code&gt; is the template.</source>
          <target state="translated">この例では、 &lt;code&gt;$event&lt;/code&gt; オブジェクト、 &lt;code&gt;hero&lt;/code&gt; 、および &lt;code&gt;#heroForm&lt;/code&gt; のコンテキストがテンプレートです。</target>
        </trans-unit>
        <trans-unit id="3c77e55816f54a0b51362c2c86c1b0a18effa47f" translate="yes" xml:space="preserve">
          <source>In this example, the function receives the current &lt;code&gt;Tree&lt;/code&gt; and returns it without any modifications. If you need to, you can do additional setup when your package is installed, such as generating files, updating configuration, or any other initial setup your library requires.</source>
          <target state="translated">この例では、関数は現在の &lt;code&gt;Tree&lt;/code&gt; を受け取り、変更せずにそれを返します。必要に応じて、パッケージのインストール時に、ファイルの生成、設定の更新、またはライブラリに必要なその他の初期設定など、追加の設定を行うことができます。</target>
        </trans-unit>
        <trans-unit id="5f760e6853240f1a247368ea5cf4ca224bc0cab0" translate="yes" xml:space="preserve">
          <source>In this example, the metadata object passed to &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; simply declares &lt;code&gt;BannerComponent&lt;/code&gt;, the component to test.</source>
          <target state="translated">この例では、 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; に渡されるメタデータオブジェクトは、テストするコンポーネントである &lt;code&gt;BannerComponent&lt;/code&gt; を宣言するだけです。</target>
        </trans-unit>
        <trans-unit id="4fa761fa0db5279057ebbd7c918d23d617db68c2" translate="yes" xml:space="preserve">
          <source>In this example, the parent component is &lt;code&gt;AppComponent&lt;/code&gt;, but you could use any component in which you could nest the child.</source>
          <target state="translated">この例では、親コンポーネントは &lt;code&gt;AppComponent&lt;/code&gt; ですが、子をネストできる任意のコンポーネントを使用できます。</target>
        </trans-unit>
        <trans-unit id="1f6f8011b5dc464a23b1d8849f6646fc7783a339" translate="yes" xml:space="preserve">
          <source>In this example, the service worker has one version of the app cached and being used to serve two different tabs. Note that this version hash is the &quot;latest manifest hash&quot; listed above. Both clients are on the latest version. Each client is listed by its ID from the &lt;code&gt;Clients&lt;/code&gt; API in the browser.</source>
          <target state="translated">この例では、Service Workerには1つのバージョンのアプリがキャッシュされており、2つの異なるタブを提供するために使用されています。このバージョンのハッシュは、上記の「最新のマニフェストハッシュ」であることに注意してください。どちらのクライアントも最新バージョンです。各クライアントは、ブラウザの &lt;code&gt;Clients&lt;/code&gt; API からのIDで一覧表示されます。</target>
        </trans-unit>
        <trans-unit id="141adfd803373a7562c9907611167c881b44c8b3" translate="yes" xml:space="preserve">
          <source>In this example, the table row (&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;) element repeats for each movie object in the collection of movies.</source>
          <target state="translated">この例では、テーブルの行（ &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; ）要素は、映画のコレクション内の各映画オブジェクトに対して繰り返されます。</target>
        </trans-unit>
        <trans-unit id="e76b2c3a28485e6785406f24973109ce2379794c" translate="yes" xml:space="preserve">
          <source>In this example, the third route is a redirect so that the router defaults to the &lt;code&gt;first-component&lt;/code&gt; route. Notice that this redirect precedes the wildcard route. Here, &lt;code&gt;path: ''&lt;/code&gt; means to use the initial relative URL (&lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">この例では、3番目のルートはリダイレクトであるため、ルーターはデフォルトで &lt;code&gt;first-component&lt;/code&gt; ルートになります。このリダイレクトはワイルドカードルートの前にあることに注意してください。ここで、 &lt;code&gt;path: ''&lt;/code&gt; は、最初の相対URL（ &lt;code&gt;''&lt;/code&gt; ）を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="a1fc753a972a0e8642c389f78d449c6f46254fae" translate="yes" xml:space="preserve">
          <source>In this example, the trace &quot;App is stable now&quot; will be logged and then the counter starts incrementing every second.</source>
          <target state="translated">この例では、&quot;App is stable now &quot;というトレースがログに記録され、その後、カウンターが1秒ごとにインクリメントを開始します。</target>
        </trans-unit>
        <trans-unit id="e1adb1392f66f2621eeb646a78fc33dc4ca7ed9c" translate="yes" xml:space="preserve">
          <source>In this example, there are two additional child components, &lt;code&gt;child-a&lt;/code&gt;, and &lt;code&gt;child-b&lt;/code&gt;. Here, &lt;code&gt;FirstComponent&lt;/code&gt; has its own &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; and a second &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; in addition to the one in &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">この例では、2つの追加の子コンポーネントである &lt;code&gt;child-a&lt;/code&gt; と &lt;code&gt;child-b&lt;/code&gt; があります。ここで、 &lt;code&gt;FirstComponent&lt;/code&gt; は、自身の持つ &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; と第二 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; の1に加えて &lt;code&gt;AppComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="55313e1b1881081b73a426b4b5ede5214265a96f" translate="yes" xml:space="preserve">
          <source>In this example, there is a parent provider and injecting the service will return the value, however, injecting the service with &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; because &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; tells the injector to stop searching in the current host element.</source>
          <target state="translated">この例では、親プロバイダ、そこにあるとサービスを注入し、しかし、値を返すサービスを注入 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; を返します &lt;code&gt;null&lt;/code&gt; ので、 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 現在でストップ検索にインジェクタを伝えますホスト要素。</target>
        </trans-unit>
        <trans-unit id="e9fbe267e141148afaa5adfc5af6e3bf9cbfcb38" translate="yes" xml:space="preserve">
          <source>In this example, we have a new macro task (nested setTimeout), by default, when we &lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;&lt;/code&gt;, the setTimeout &lt;code&gt;outside&lt;/code&gt; and &lt;code&gt;nested&lt;/code&gt; will both be triggered.</source>
          <target state="translated">この例では、我々は我々がするとき、デフォルトでは、新しいマクロタスク（ネストされたのsetTimeoutを）持っている &lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;&lt;/code&gt; 、のsetTimeoutの &lt;code&gt;outside&lt;/code&gt; と &lt;code&gt;nested&lt;/code&gt; 意志の両方がトリガされます。</target>
        </trans-unit>
        <trans-unit id="db3b7288e76c9764175a504022fe6dac60eb02e9" translate="yes" xml:space="preserve">
          <source>In this example, we have a special trigger for the enter and leave animation called &lt;code&gt;myInsertRemoveTrigger&lt;/code&gt;. The HTML template contains the following code.</source>
          <target state="translated">この例では、 &lt;code&gt;myInsertRemoveTrigger&lt;/code&gt; と呼ばれる、開始および終了アニメーションの特別なトリガーがあります。HTMLテンプレートには、次のコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="4f23673ea8bd0a665773af3bb10e9ab0cc487c74" translate="yes" xml:space="preserve">
          <source>In this example, we have a trigger called &lt;code&gt;shrinkOut&lt;/code&gt;, used when an HTML element leaves the page. The animation takes whatever height the element has before it leaves, and animates from that height to zero.</source>
          <target state="translated">この例では、HTML要素がページを離れるときに使用される &lt;code&gt;shrinkOut&lt;/code&gt; というトリガーがあります。アニメーションは、要素が離れる前の高さを取得し、その高さからゼロまでアニメートします。</target>
        </trans-unit>
        <trans-unit id="d5449a4988ffee8945fd260d02e422915ed66b26" translate="yes" xml:space="preserve">
          <source>In this example, we tell the processor to put the fragments together without anything in between - without any &quot;plaster&quot;. Most sample files define this &lt;em&gt;empty plaster&lt;/em&gt;.</source>
          <target state="translated">この例では、「プラスター」なしでフラグメントを一緒に配置するようプロセッサーに指示しています。ほとんどのサンプルファイルでは、この&lt;em&gt;空の石膏が&lt;/em&gt;定義されてい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9f8e0d121e50e60163e599d82947e2d681ecf6cb" translate="yes" xml:space="preserve">
          <source>In this example, we'll name the trigger &lt;code&gt;openClose&lt;/code&gt;, and attach it to the &lt;code&gt;button&lt;/code&gt; element. The trigger describes the open and closed states, and the timings for the two transitions.</source>
          <target state="translated">この例では、トリガーに &lt;code&gt;openClose&lt;/code&gt; という名前を付け、 &lt;code&gt;button&lt;/code&gt; 要素にアタッチします。トリガーは、開いた状態と閉じた状態、および2つの遷移のタイミングを示します。</target>
        </trans-unit>
        <trans-unit id="0f166860e3bda6fd17d0325d2f54b8f0ba7afcd0" translate="yes" xml:space="preserve">
          <source>In this example, when the &lt;code&gt;isOpen&lt;/code&gt; expression evaluates to a defined state of &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt;, it notifies the trigger &lt;code&gt;openClose&lt;/code&gt; of a state change. Then it's up to the &lt;code&gt;openClose&lt;/code&gt; code to handle the state change and kick off a state change animation.</source>
          <target state="translated">この例では、 &lt;code&gt;isOpen&lt;/code&gt; 式が定義された &lt;code&gt;open&lt;/code&gt; または &lt;code&gt;closed&lt;/code&gt; の状態に評価されると、トリガー &lt;code&gt;openClose&lt;/code&gt; に状態の変化を通知します。次に、 &lt;code&gt;openClose&lt;/code&gt; コードが状態変更を処理し、状態変更アニメーションを開始します。</target>
        </trans-unit>
        <trans-unit id="8122141c419796ccece90e8861443226d3fc7efb" translate="yes" xml:space="preserve">
          <source>In this example, you hide the message when the control is either valid or &lt;em&gt;pristine&lt;/em&gt;. Pristine means the user hasn't changed the value since it was displayed in this form. If you ignore the &lt;code&gt;pristine&lt;/code&gt; state, you would hide the message only when the value is valid. If you arrive in this component with a new (blank) hero or an invalid hero, you'll see the error message immediately, before you've done anything.</source>
          <target state="translated">この例では、コントロールが有効または&lt;em&gt;元の状態の&lt;/em&gt;場合にメッセージを非表示にします。Pristineは、このフォームに表示されてからユーザーが値を変更していないことを意味します。 &lt;code&gt;pristine&lt;/code&gt; 状態を無視すると、値が有効な場合にのみメッセージが非表示になります。新しい（空白の）ヒーローまたは無効なヒーローと一緒にこのコンポーネントに到着した場合、何かをする前にすぐにエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="857e41f3d387f7cf872a74341b0658452c56adc6" translate="yes" xml:space="preserve">
          <source>In this example, you hide the message when the control is valid or pristine; &quot;pristine&quot; means the user hasn't changed the value since it was displayed in this form.</source>
          <target state="translated">この例では、コントロールが有効または原始的である場合にメッセージを非表示にしています。</target>
        </trans-unit>
        <trans-unit id="baf3737ace5606abd1ec8225579802cb34f52588" translate="yes" xml:space="preserve">
          <source>In this example, you retrieve the route parameter map from an &lt;code&gt;Observable&lt;/code&gt;. That implies that the route parameter map can change during the lifetime of this component.</source>
          <target state="translated">この例では、 &lt;code&gt;Observable&lt;/code&gt; からルートパラメータマップを取得します。つまり、ルートパラメータマップは、このコンポーネントの存続期間中に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="22dacf1b0042c1fad5409535bd55de92eadb09f0" translate="yes" xml:space="preserve">
          <source>In this guide, we go into greater depth on special transition states such as &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt;, and show how these special states are used for elements entering and leaving a view. The chapter also explores multiple animation triggers, animation callbacks and sequence-based animation using keyframes.</source>
          <target state="translated">このガイドでは、 &lt;code&gt;*&lt;/code&gt; （ワイルドカード）や &lt;code&gt;void&lt;/code&gt; などの特殊な遷移状態についてさらに詳しく説明し、ビューに出入りする要素にこれらの特殊な状態がどのように使用されるかを示します。この章では、キーフレームを使用した複数のアニメーショントリガー、アニメーションコールバック、シーケンスベースのアニメーションについても説明します。</target>
        </trans-unit>
        <trans-unit id="d391ee1c171a2767942bc43f6ae9952564664a67" translate="yes" xml:space="preserve">
          <source>In this implementation, the component should create and display a new hero. New heroes have &lt;code&gt;id=0&lt;/code&gt; and a blank &lt;code&gt;name&lt;/code&gt;. This test confirms that the component behaves as expected:</source>
          <target state="translated">この実装では、コンポーネントは新しいヒーローを作成して表示する必要があります。新しいヒーローの &lt;code&gt;id=0&lt;/code&gt; で、 &lt;code&gt;name&lt;/code&gt; は空白です。このテストは、コンポーネントが期待どおりに動作することを確認します。</target>
        </trans-unit>
        <trans-unit id="76cbc5a9e329031cf1bab2ff3296215a7ffaf283" translate="yes" xml:space="preserve">
          <source>In this last exercise, you learn to chain &lt;code&gt;Observable&lt;/code&gt; operators together so you can minimize the number of similar HTTP requests and consume network bandwidth economically.</source>
          <target state="translated">この最後の演習では、 &lt;code&gt;Observable&lt;/code&gt; オペレーターをチェーン化する方法を学習します。これにより、同様のHTTPリクエストの数を最小限に抑え、ネットワーク帯域幅を経済的に消費できます。</target>
        </trans-unit>
        <trans-unit id="9b0401f148735f00014a29894e7c27898d1d095b" translate="yes" xml:space="preserve">
          <source>In this mode, typed variables disallow &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; by default. The type checker throws an error if you leave a variable unassigned or try to assign &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to a variable whose type disallows &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">このモードでは、型付き変数は &lt;code&gt;null&lt;/code&gt; を許可せず、デフォルトでは &lt;code&gt;undefined&lt;/code&gt; です。あなたは変数の未割り当てを残したり、割り当てよう型チェッカーは、エラーをスロー &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 型が禁止した変数に &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="280da26e99ef856ec857edb7fba6fd1a43c74759" translate="yes" xml:space="preserve">
          <source>In this next section, you'll extend the crisis center with some new &lt;em&gt;administrative&lt;/em&gt; features. Those features aren't defined yet. But you can start by adding a new feature module named &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="translated">この次のセクションでは、いくつかの新しい&lt;em&gt;管理&lt;/em&gt;機能で危機&lt;em&gt;管理&lt;/em&gt;センターを拡張します。これらの機能はまだ定義されていません。ただし、最初に、 &lt;code&gt;AdminModule&lt;/code&gt; という名前の新しい機能モジュールを追加することができます。</target>
        </trans-unit>
        <trans-unit id="2e77ddac00429a19af490ee0fff3eb26cd48acc6" translate="yes" xml:space="preserve">
          <source>In this next section, you'll update the &lt;code&gt;CrisisCenterModule&lt;/code&gt; to load lazily by default and use the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy to load it (and &lt;em&gt;all other&lt;/em&gt; lazy loaded modules) as soon as possible.</source>
          <target state="translated">この次のセクションでは、 &lt;code&gt;CrisisCenterModule&lt;/code&gt; を更新してデフォルトでレイジーロードし、 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 戦略を使用してそれ（および&lt;em&gt;他のすべての&lt;/em&gt;レイジーロードされたモジュール）をできるだけ早くロードします。</target>
        </trans-unit>
        <trans-unit id="910d57aa8f2c9d322a7ddfffafff5a1e12be15d4" translate="yes" xml:space="preserve">
          <source>In this page, you'll create a component with a list of heroes. You'll display the list of hero names and conditionally show a message below the list.</source>
          <target state="translated">このページでは、ヒーローのリストを持つコンポーネントを作成します。ヒーロー名のリストを表示し、リストの下に条件付きでメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="5991263aee79edfabb240fd4a80ec9aca9c4f379" translate="yes" xml:space="preserve">
          <source>In this page, you'll expand the Tour of Heroes app to display a list of heroes, and allow users to select a hero and display the hero's details.</source>
          <target state="translated">このページでは、Tour of Heroesアプリを拡張してヒーローの一覧を表示し、ユーザーがヒーローを選択してヒーローの詳細を表示できるようにします。</target>
        </trans-unit>
        <trans-unit id="36e07abc829fe293c414ff2c42ec086b5bcaa116" translate="yes" xml:space="preserve">
          <source>In this page, you'll take the first step in that direction by moving the hero details into a separate, reusable &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">このページでは、ヒーローの詳細を別の再利用可能な &lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動して、その方向への最初のステップを実行します。</target>
        </trans-unit>
        <trans-unit id="41eadd61e2099c9b71eca402988c22d2dc4da72a" translate="yes" xml:space="preserve">
          <source>In this part of the tutorial, you'll do the following:</source>
          <target state="translated">このチュートリアルのこの部分では、次のようなことを行います。</target>
        </trans-unit>
        <trans-unit id="f9704e3a1c4e2e88d3b06005691f30d54c3fe8a0" translate="yes" xml:space="preserve">
          <source>In this sample app, an &lt;code&gt;Item&lt;/code&gt; is an object that has two properties; an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">このサンプルアプリでは、 &lt;code&gt;Item&lt;/code&gt; は2つのプロパティを持つオブジェクトです。 &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a920eb2f136fa29d3d8fd6be1642038fa8343dd7" translate="yes" xml:space="preserve">
          <source>In this sample, the &lt;code&gt;AboutComponent&lt;/code&gt; template hosts a &lt;code&gt;TwainComponent&lt;/code&gt;. The &lt;code&gt;TwainComponent&lt;/code&gt; displays Mark Twain quotes.</source>
          <target state="translated">このサンプルでは、 &lt;code&gt;AboutComponent&lt;/code&gt; テンプレートがTwainComponentをホストしてい &lt;code&gt;TwainComponent&lt;/code&gt; 。 &lt;code&gt;TwainComponent&lt;/code&gt; は、Mark Twain の見積もりを表示します。</target>
        </trans-unit>
        <trans-unit id="83a3e6ce2e81d5334705552ed704c13c7a012cad" translate="yes" xml:space="preserve">
          <source>In this sample, the &lt;code&gt;preload()&lt;/code&gt; method loads the route if the route's &lt;code&gt;data.preload&lt;/code&gt; flag is truthy.</source>
          <target state="translated">このサンプルでは、ルートの &lt;code&gt;data.preload&lt;/code&gt; フラグがtrueの場合、 &lt;code&gt;preload()&lt;/code&gt; メソッドがルートをロードします。</target>
        </trans-unit>
        <trans-unit id="d4570e44a44492eaf23a15501bcef8aeda6caf07" translate="yes" xml:space="preserve">
          <source>In this sample, the &lt;code&gt;preload&lt;/code&gt; method loads the route if the route's &lt;code&gt;data.preload&lt;/code&gt; flag is truthy.</source>
          <target state="translated">このサンプルでは、ルートの &lt;code&gt;data.preload&lt;/code&gt; フラグがtrue の場合、 &lt;code&gt;preload&lt;/code&gt; メソッドはルートをロードします。</target>
        </trans-unit>
        <trans-unit id="53df60f2bbc6ff801450ca15e253828f19eef2d8" translate="yes" xml:space="preserve">
          <source>In this sample, the forbidden name is &quot;bob&quot;, so the validator will reject any hero name containing &quot;bob&quot;. Elsewhere it could reject &quot;alice&quot; or any name that the configuring regular expression matches.</source>
          <target state="translated">このサンプルでは、禁止されている名前は「bob」なので、バリデータは「bob」を含むヒーロー名を拒否します。他の場所では、&quot;alice&quot; や設定されている正規表現にマッチする名前を拒否することもあります。</target>
        </trans-unit>
        <trans-unit id="c1cff468c4938260e2ee129abcb3fdbc441be47c" translate="yes" xml:space="preserve">
          <source>In this scenario, &lt;code&gt;ListItemComponent&lt;/code&gt; is nested within &lt;code&gt;AppComponent&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; property expects an object.</source>
          <target state="translated">このシナリオでは、 &lt;code&gt;ListItemComponent&lt;/code&gt; は &lt;code&gt;AppComponent&lt;/code&gt; 内にネストされ、 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; プロパティはオブジェクトを想定しています。</target>
        </trans-unit>
        <trans-unit id="bb1ad6d637c2681a211a37960e4482d763186a33" translate="yes" xml:space="preserve">
          <source>In this scenario, the user could click the heroes link, cancel, push the browser back button, or navigate away without saving.</source>
          <target state="translated">このシナリオでは、ユーザーはヒーローのリンクをクリックしたり、キャンセルしたり、ブラウザの戻るボタンを押したり、保存せずに移動したりすることができます。</target>
        </trans-unit>
        <trans-unit id="108f5e361f5279c807a1b95c7212da592113b5c1" translate="yes" xml:space="preserve">
          <source>In this section, you add a &quot;Buy&quot; button to the product details view and set up a cart service to store information about products in the cart.</source>
          <target state="translated">ここでは、商品詳細表示に「購入」ボタンを追加し、カートに商品情報を保存するカートサービスを設定します。</target>
        </trans-unit>
        <trans-unit id="866e463973eba9b6978ee8e41218dfba8d744659" translate="yes" xml:space="preserve">
          <source>In this section, you will see how to use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class to add URL query strings in your &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; クラスを使用して、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; に URLクエリ文字列を追加する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="031c1b1a94c645c385beb5a16ec41f21634daadf" translate="yes" xml:space="preserve">
          <source>In this section, you write an &lt;code&gt;UnlessDirective&lt;/code&gt; structural directive that does the opposite of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; displays the template content when the condition is &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;UnlessDirective&lt;/code&gt; displays the content when the condition is &lt;strong&gt;&lt;em&gt;false&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;UnlessDirective&lt;/code&gt; の逆の &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; を行うundirectDirective構造ディレクティブを記述します。 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; は、条件が &lt;code&gt;true&lt;/code&gt; の場合にテンプレートコンテンツを表示します。条件が&lt;strong&gt;&lt;em&gt;falseの&lt;/em&gt;&lt;/strong&gt;場合を &lt;code&gt;UnlessDirective&lt;/code&gt; 、Directiveはコンテンツを表示し&lt;strong&gt;&lt;em&gt;ます&lt;/em&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e63bcb3ea1e33ee82569b40699b6b77935276464" translate="yes" xml:space="preserve">
          <source>In this section, you'll add a &quot;Buy&quot; button to the product details page. You'll also set up a cart service to store information about products in the cart.</source>
          <target state="translated">ここでは、商品詳細ページに「購入」ボタンを追加します。また、カートに商品の情報を保存するカートサービスを設定します。</target>
        </trans-unit>
        <trans-unit id="41614ef975f51a1aa45b0453fbf9c5d863d0f122" translate="yes" xml:space="preserve">
          <source>In this section, you'll add a custom strategy that &lt;em&gt;only&lt;/em&gt; preloads routes whose &lt;code&gt;data.preload&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;. Recall that you can add anything to the &lt;code&gt;data&lt;/code&gt; property of a route.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;data.preload&lt;/code&gt; フラグが &lt;code&gt;true&lt;/code&gt; に設定されているルート&lt;em&gt;のみ&lt;/em&gt;をプリロードするカスタム戦略を追加します。ルートの &lt;code&gt;data&lt;/code&gt; プロパティには何でも追加できることを思い出してください。</target>
        </trans-unit>
        <trans-unit id="f368e147277bce5919185a90ecf1ce77809a6f65" translate="yes" xml:space="preserve">
          <source>In this section, you'll create the shopping cart. You'll:</source>
          <target state="translated">このセクションでは、ショッピングカートを作成します。あなたが作成します。</target>
        </trans-unit>
        <trans-unit id="3ea0b8c21cff6d2dfec5ecbd44d0d0beb599e670" translate="yes" xml:space="preserve">
          <source>In this section, you'll define two routes:</source>
          <target state="translated">ここでは、2つのルートを定義します。</target>
        </trans-unit>
        <trans-unit id="e48b893529d0a4f861fdf041e0a05ca27fb957eb" translate="yes" xml:space="preserve">
          <source>In this section, you'll enable navigation to the &lt;code&gt;HeroDetailsComponent&lt;/code&gt; and liberate it from the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、へのナビゲーションを可能にするだろう &lt;code&gt;HeroDetailsComponent&lt;/code&gt; やからそれを解放 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a56f98809a826693d78cbbbfd23fc132fc6017b" translate="yes" xml:space="preserve">
          <source>In this section, you'll extend the app to display full product details in separate pages, with their own URLs.</source>
          <target state="translated">このセクションでは、アプリを拡張して、商品の詳細を個別のページに表示するようにします。</target>
        </trans-unit>
        <trans-unit id="2b0c69edf13235c900832e080c6999a183c272d5" translate="yes" xml:space="preserve">
          <source>In this section, you'll finish the app by adding a form-based checkout feature. You'll create a form to collect user information as part of checkout.</source>
          <target state="translated">このセクションでは、フォームベースのチェックアウト機能を追加してアプリを完成させます。チェックアウトの一部としてユーザー情報を収集するフォームを作成します。</target>
        </trans-unit>
        <trans-unit id="0bd6664792b4ac76642b5f4d66e0875468eb9a2d" translate="yes" xml:space="preserve">
          <source>In this section, you'll learn to prepare and upgrade an application with &lt;code&gt;ngUpgrade&lt;/code&gt;. The example app is &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;Angular PhoneCat&lt;/a&gt; from &lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;the original AngularJS tutorial&lt;/a&gt;, which is where many of us began our Angular adventures. Now you'll see how to bring that application to the brave new world of Angular.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;ngUpgrade&lt;/code&gt; を使用してアプリケーションを準備およびアップグレードする方法を学びます。例のアプリはある&lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;角度PhoneCat&lt;/a&gt;から&lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;元AngularJSチュートリアル&lt;/a&gt;私たちの多くは私達の角度の冒険を始めたところです。今度は、そのアプリケーションをAngularの新しい世界に持ち込む方法を説明します。</target>
        </trans-unit>
        <trans-unit id="269f51a639c36e1471d48fe5ff3480c172f854ea" translate="yes" xml:space="preserve">
          <source>In this section, you'll listen for the hero item click event and update the hero detail.</source>
          <target state="translated">ここでは、ヒーローアイテムのクリックイベントを聞き、ヒーローの詳細を更新します。</target>
        </trans-unit>
        <trans-unit id="ce0395b82a4ff81ea97cdb312448ce93adb39b78" translate="yes" xml:space="preserve">
          <source>In this section, you'll update the cart component to use the cart service to display the products in the cart.</source>
          <target state="translated">このセクションでは、カート内の商品を表示するためにカートサービスを使用するためにカートコンポーネントを更新します。</target>
        </trans-unit>
        <trans-unit id="403a238e3ee56ad0c6dd6b48f47e5f1604928707" translate="yes" xml:space="preserve">
          <source>In this section, you'll update the product details component to use the cart service. You'll add a &quot;Buy&quot; button to the product details view. When the &quot;Buy&quot; button is clicked, you'll use the cart service to add the current product to the cart.</source>
          <target state="translated">ここでは、カートサービスを利用するために、商品詳細コンポーネントを更新します。商品詳細ビューに「購入」ボタンを追加します。購入」ボタンがクリックされると、カートサービスを使用して現在の商品をカートに追加します。</target>
        </trans-unit>
        <trans-unit id="4679907f079a44d062477a8ebc33625407f5d2e5" translate="yes" xml:space="preserve">
          <source>In this section, you'll use the HTTP client to retrieve shipping prices from an external file.</source>
          <target state="translated">このセクションでは、HTTP クライアントを使用して、外部ファイルから出荷価格を取得します。</target>
        </trans-unit>
        <trans-unit id="ab0be9ab1fa97bc67050d6fe01871e1e7b0d6047" translate="yes" xml:space="preserve">
          <source>In this step of the tutorial, you add a route that redirects the user to display the &lt;code&gt;/heroes-list&lt;/code&gt; component.</source>
          <target state="translated">チュートリアルのこのステップでは、 &lt;code&gt;/heroes-list&lt;/code&gt; コンポーネントを表示するようにユーザーをリダイレクトするルートを追加します。</target>
        </trans-unit>
        <trans-unit id="9b61ea9c73f9814540ae97c3ffffaa25de48d7af" translate="yes" xml:space="preserve">
          <source>In this test suite, the &lt;em&gt;only&lt;/em&gt; provider of &lt;code&gt;UserService&lt;/code&gt; is the root testing module, so it is safe to call &lt;code&gt;TestBed.get()&lt;/code&gt; as follows:</source>
          <target state="translated">このテストスイートでは、 &lt;code&gt;UserService&lt;/code&gt; の&lt;em&gt;唯一の&lt;/em&gt;プロバイダーはルートテストモジュールであるため、次のように &lt;code&gt;TestBed.get()&lt;/code&gt; を呼び出しても安全です。</target>
        </trans-unit>
        <trans-unit id="12fefbb22f8d1910173d08c25cf569bed05fd095" translate="yes" xml:space="preserve">
          <source>In this test suite, the &lt;em&gt;only&lt;/em&gt; provider of &lt;code&gt;UserService&lt;/code&gt; is the root testing module, so it is safe to call &lt;code&gt;TestBed.inject()&lt;/code&gt; as follows:</source>
          <target state="translated">このテストスイートでは、 &lt;code&gt;UserService&lt;/code&gt; の&lt;em&gt;唯一の&lt;/em&gt;プロバイダーはルートテストモジュールであるため、次のように &lt;code&gt;TestBed.inject()&lt;/code&gt; を安全に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b4f452c4e432a31d79ddbadb986cc809d85ed173" translate="yes" xml:space="preserve">
          <source>In this tutorial you will build a dynamic form that presents a basic questionaire. You will build an online application for heroes seeking employment. The agency is constantly tinkering with the application process, but by using the dynamic form you can create the new forms on the fly without changing the application code.</source>
          <target state="translated">このチュートリアルでは、基本的な質問を提示する動的なフォームを構築します。雇用を求めるヒーローのためのオンラインアプリケーションを構築します。代理店は常にアプリケーションプロセスをいじっていますが、ダイナミックフォームを使用することで、アプリケーションコードを変更することなく、その場で新しいフォームを作成することができます。</target>
        </trans-unit>
        <trans-unit id="3a18179f288ce84d2374dd0900930551cdf29b37" translate="yes" xml:space="preserve">
          <source>In this tutorial, &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; will return an &lt;code&gt;Observable&lt;/code&gt; because it will eventually use the Angular &lt;code&gt;HttpClient.get&lt;/code&gt; method to fetch the heroes and &lt;a href=&quot;../guide/http&quot;&gt;&lt;code&gt;HttpClient.get()&lt;/code&gt; returns an &lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルでは、最終的にAngular &lt;code&gt;HttpClient.get&lt;/code&gt; メソッドを使用してヒーローをフェッチし、&lt;a href=&quot;../guide/http&quot;&gt; &lt;code&gt;HttpClient.get()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;Observable&lt;/code&gt; を返すため、 &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; は &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b96485397f1891bdc067a73371f08a27a24de8c0" translate="yes" xml:space="preserve">
          <source>In this tutorial, you build your own app from the ground up, providing experience with the typical development process, as well as an introduction to basic app-design concepts, tools, and terminology.</source>
          <target state="translated">このチュートリアルでは、典型的な開発プロセスを体験しながら、基本的なアプリデザインの概念、ツール、用語の紹介をしながら、自分のアプリを一から構築していきます。</target>
        </trans-unit>
        <trans-unit id="25a44de4babd077d4a5b26746a125c8769135775" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll add the following data persistence features with help from Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このチュートリアルでは、Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; の助けを借りて、次のデータ永続化機能を追加します。</target>
        </trans-unit>
        <trans-unit id="06bb8951e44a68507e6e489ed686a8a717656ad3" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll create a &lt;code&gt;HeroService&lt;/code&gt; that all application classes can use to get heroes. Instead of creating that service with &lt;code&gt;new&lt;/code&gt;, you'll rely on Angular &lt;a href=&quot;../guide/dependency-injection&quot;&gt;&lt;em&gt;dependency injection&lt;/em&gt;&lt;/a&gt; to inject it into the &lt;code&gt;HeroesComponent&lt;/code&gt; constructor.</source>
          <target state="translated">このチュートリアルでは、すべてのアプリケーションクラスがヒーローを取得するために使用できる &lt;code&gt;HeroService&lt;/code&gt; を作成します。 &lt;code&gt;new&lt;/code&gt; を使用してそのサービスを作成する代わりに、Angular &lt;a href=&quot;../guide/dependency-injection&quot;&gt;&lt;em&gt;依存関係注入&lt;/em&gt;&lt;/a&gt;に&lt;em&gt;依存&lt;/em&gt;して、それを &lt;code&gt;HeroesComponent&lt;/code&gt; コンストラクターに注入します。</target>
        </trans-unit>
        <trans-unit id="1dbc39e7249eb4c5faa1c9f0d048d5c7f317eadd" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll create a &lt;code&gt;HeroService&lt;/code&gt; that all application classes can use to get heroes. Instead of creating that service with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; keyword&lt;/a&gt;, you'll rely on Angular &lt;a href=&quot;../guide/dependency-injection&quot;&gt;&lt;em&gt;dependency injection&lt;/em&gt;&lt;/a&gt; to inject it into the &lt;code&gt;HeroesComponent&lt;/code&gt; constructor.</source>
          <target state="translated">このチュートリアルでは、すべてのアプリケーションクラスがヒーローを取得するために使用できる &lt;code&gt;HeroService&lt;/code&gt; を作成します。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; キーワード&lt;/a&gt;でそのサービスを作成する代わりに、Angular&lt;a href=&quot;../guide/dependency-injection&quot;&gt;&lt;em&gt;依存性注入&lt;/em&gt;&lt;/a&gt;を使用して &lt;code&gt;HeroesComponent&lt;/code&gt; コンストラクターにサービスを注入します。</target>
        </trans-unit>
        <trans-unit id="e7cea9c259c2a7bf3c9e055e0e44722b8938e8d0" translate="yes" xml:space="preserve">
          <source>In this way you're using the Angular and JavaScript module systems &lt;em&gt;together&lt;/em&gt;. Although it's easy to confuse the two systems, which share the common vocabulary of &quot;imports&quot; and &quot;exports&quot;, you will become familiar with the different contexts in which they are used.</source>
          <target state="translated">このようにして、AngularとJavaScriptモジュールシステムを&lt;em&gt;一緒に&lt;/em&gt;使用します。「インポート」と「エクスポート」という共通の語彙を共有する2つのシステムを混同するのは簡単ですが、それらが使用されるさまざまなコンテキストに慣れるでしょう。</target>
        </trans-unit>
        <trans-unit id="a21cab056614ba2cdbfb90d04db7c7d0479ad584" translate="yes" xml:space="preserve">
          <source>In two-way binding, a data property value flows to the input box from the component as with property binding. The user's changes also flow back to the component, resetting the property to the latest value, as with event binding.</source>
          <target state="translated">双方向バインディングでは、データ プロパティ値は、プロパティ バインディングと同様にコンポーネントから入力ボックスに流れます。ユーザーの変更もまた、イベント・バインディングと同様に、プロパティを最新の値にリセットしてコンポーネントに戻ります。</target>
        </trans-unit>
        <trans-unit id="31fa5a791d28202748d016367736fc9b97f5d0f5" translate="yes" xml:space="preserve">
          <source>In typical use, application code asks for the dependencies in the constructor and they are resolved by the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常の使用では、アプリケーションコードはコンストラクターで依存関係を要求し、それらは &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; によって解決されます。</target>
        </trans-unit>
        <trans-unit id="57e2e8623c9d79c4da58de13b115b73b40ee0112" translate="yes" xml:space="preserve">
          <source>In v5, Angular replaced the &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector&quot;&gt;ReflectiveInjector&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;StaticInjector&lt;/code&gt;. The injector no longer requires the Reflect polyfill, reducing application size for most developers.</source>
          <target state="translated">v5では、Angularは &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector&quot;&gt;ReflectiveInjector&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;StaticInjector&lt;/code&gt; に置き換えました。インジェクターはもはや反射ポリフィルを必要とせず、ほとんどの開発者にとってアプリケーションのサイズを削減します。</target>
        </trans-unit>
        <trans-unit id="a84fd42297b1dcb30b0f64f06976c4d1727bfa6a" translate="yes" xml:space="preserve">
          <source>In version 4.3, Angular introduced new number, date, and currency pipes that increase standardization across browsers and eliminate the need for i18n polyfills. These pipes use the Unicode Common Locale Data Repository (CLDR) instead of the JS Intl API to provide extensive locale support.</source>
          <target state="translated">バージョン4.3では、ブラウザ間の標準化が進み、i18nポリフィルが不要になる新しい数字、日付、通貨のパイプが導入されました。これらのパイプはJS Intl APIの代わりにUnicode Common Locale Data Repository (CLDR)を使用しており、ロケールのサポートが充実しています。</target>
        </trans-unit>
        <trans-unit id="71d97d3019c4bcc2733ae13ec2df5b3eb65a683b" translate="yes" xml:space="preserve">
          <source>In version 5 and later, the compiler automatically performs this rewriting while emitting the &lt;code&gt;.js&lt;/code&gt; file.</source>
          <target state="translated">バージョン5以降では、コンパイラは &lt;code&gt;.js&lt;/code&gt; ファイルを出力しながら、この書き換えを自動的に実行します。</target>
        </trans-unit>
        <trans-unit id="c45bfe7a0bc278e7de4469f4b336dda62d4667b6" translate="yes" xml:space="preserve">
          <source>In version 5.0.0, Angular updated its standard pipes to use the CLRD implementation. At that time, Angular also added &lt;a href=&quot;../api/common/deprecatedi18npipesmodule&quot;&gt;&lt;code&gt;DeprecatedI18NPipesModule&lt;/code&gt;&lt;/a&gt; and related APIs to provide limited-time access to the old behavior. If you need to use these &lt;code&gt;Deprecated*&lt;/code&gt; pipes, see &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md#i18n-pipes&quot;&gt;Angular change log&lt;/a&gt; and the &lt;a href=&quot;https://docs.google.com/spreadsheets/d/12iygt-_cakNP1VO7MV9g4lq9NsxVWG4tSfc98HpHb0k/edit#gid=0&quot;&gt;Date Formats mappings&lt;/a&gt;.</source>
          <target state="translated">バージョン5.0.0では、AngularはCLRD実装を使用するように標準パイプを更新しました。当時、Angularは&lt;a href=&quot;../api/common/deprecatedi18npipesmodule&quot;&gt; &lt;code&gt;DeprecatedI18NPipesModule&lt;/code&gt; &lt;/a&gt;と関連API も追加して、古い動作への限られた時間のアクセスを提供します。これらの非 &lt;code&gt;Deprecated*&lt;/code&gt; パイプを使用する必要がある場合は、&lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md#i18n-pipes&quot;&gt;Angularの変更ログ&lt;/a&gt;と&lt;a href=&quot;https://docs.google.com/spreadsheets/d/12iygt-_cakNP1VO7MV9g4lq9NsxVWG4tSfc98HpHb0k/edit#gid=0&quot;&gt;日付形式のマッピングを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="9241b9e01cd99078b4ff06f46cefe6357b7cf80a" translate="yes" xml:space="preserve">
          <source>In version 8, the string syntax for the &lt;a href=&quot;../api/router/loadchildren&quot;&gt;&lt;code&gt;loadChildren&lt;/code&gt;&lt;/a&gt; route specification was deprecated, in favor of new syntax that uses &lt;code&gt;import()&lt;/code&gt; syntax.</source>
          <target state="translated">バージョン8では、&lt;a href=&quot;../api/router/loadchildren&quot;&gt; &lt;code&gt;loadChildren&lt;/code&gt; &lt;/a&gt;ルート仕様の文字列構文は廃止され、 &lt;code&gt;import()&lt;/code&gt; 構文を使用する新しい構文が採用されました。</target>
        </trans-unit>
        <trans-unit id="4f9ab07b83f4d06de00ebcc1eb973f38d10ad222" translate="yes" xml:space="preserve">
          <source>In version 9, Ivy is the default. For compatibility with current workflows during the update process, you can choose to opt out of Ivy and continue using the previous compiler, View Engine.</source>
          <target state="translated">バージョン 9 では、Ivy がデフォルトです。更新プロセス中の現在のワークフローとの互換性を保つために、Ivy をオプトアウトして以前のコンパイラである View Engine を使用し続けることができます。</target>
        </trans-unit>
        <trans-unit id="9edf1a71374f3d46fc3414dc47fc6036e0aaa971" translate="yes" xml:space="preserve">
          <source>In version 9, the server builder which is used for &lt;a href=&quot;app-shell&quot;&gt;App shell&lt;/a&gt; and &lt;a href=&quot;universal&quot;&gt;Angular Universal&lt;/a&gt; has the &lt;code&gt;bundleDependencies&lt;/code&gt; option enabled by default. If you opt-out of bundling dependencies you will need to run the standalone Angular compatibility compiler (&lt;code&gt;ngcc&lt;/code&gt;). This is needed because otherwise Node will be unable to resolve the Ivy version of the packages.</source>
          <target state="translated">バージョン9では、&lt;a href=&quot;app-shell&quot;&gt;Appシェル&lt;/a&gt;と&lt;a href=&quot;universal&quot;&gt;Angular Universalに&lt;/a&gt;使用されるサーバービルダーで、 &lt;code&gt;bundleDependencies&lt;/code&gt; オプションがデフォルトで有効になっています。依存関係のバンドルをオプトアウトする場合は、スタンドアロンのAngular互換性コンパイラー（ &lt;code&gt;ngcc&lt;/code&gt; ）を実行する必要があります。そうしないと、ノードがIvyバージョンのパッケージを解決できなくなるため、これが必要になります。</target>
        </trans-unit>
        <trans-unit id="65b1e0f69125d604941dd3273cdaf553c34f079e" translate="yes" xml:space="preserve">
          <source>In your Angular application, you need a component as a placeholder for your AngularJS content. This component uses the service you create to load and bootstrap your AngularJS app after the component is initialized.</source>
          <target state="translated">Angularアプリケーションでは、AngularJSコンテンツのプレースホルダとしてコンポーネントが必要です。このコンポーネントは、コンポーネントが初期化された後、作成したサービスを使用してAngularJSアプリをロードし、ブートストラップします。</target>
        </trans-unit>
        <trans-unit id="ca7e1be139d5918a6ba13a88e83f886ca1299b5f" translate="yes" xml:space="preserve">
          <source>In your StackBlitz project, make sure you have forked or saved your project.</source>
          <target state="translated">StackBlitzプロジェクトでは、プロジェクトをフォークしたか保存したかを確認してください。</target>
        </trans-unit>
        <trans-unit id="9e38ffcf83f81a498acb2fef8ccde38da9e38905" translate="yes" xml:space="preserve">
          <source>In your apps, import from the library by name:</source>
          <target state="translated">アプリでは、ライブラリから名前を付けてインポートします。</target>
        </trans-unit>
        <trans-unit id="fbadbb5b6473967b5312043c7bbc97ef238f1be3" translate="yes" xml:space="preserve">
          <source>In your browser, open &lt;a href=&quot;http://localhost:4200/&quot;&gt;http://localhost:4200/&lt;/a&gt; to see the new app run. When you use the &lt;a href=&quot;https://angular.io/cli/serve&quot;&gt;ng serve&lt;/a&gt; command to build an app and serve it locally, the server automatically rebuilds the app and reloads the page when you change any of the source files.</source>
          <target state="translated">ブラウザーで&lt;a href=&quot;http://localhost:4200/&quot;&gt;http：// localhost：4200 /&lt;/a&gt;を開いて、新しいアプリの実行を確認します。&lt;a href=&quot;https://angular.io/cli/serve&quot;&gt;ng serve&lt;/a&gt;コマンドを使用してアプリをビルドし、ローカルで提供する場合、ソースファイルを変更すると、サーバーが自動的にアプリを再構築し、ページをリロードします。</target>
        </trans-unit>
        <trans-unit id="34c360dd0f8faf40b5e6d4e59b4cc7a4861f4594" translate="yes" xml:space="preserve">
          <source>In your code editor, locate the file, &lt;code&gt;crisis-list.component.html&lt;/code&gt; and replace the placeholder content with the following HTML.</source>
          <target state="translated">コードエディタで、 &lt;code&gt;crisis-list.component.html&lt;/code&gt; ファイルを見つけ、プレースホルダーのコンテンツを次のHTMLに置き換えます。</target>
        </trans-unit>
        <trans-unit id="253ec15e24309b01fdf9d235fb65adb71c186cd2" translate="yes" xml:space="preserve">
          <source>In your code editor, locate the file, &lt;code&gt;heroes-list.component.html&lt;/code&gt; and replace the placeholder content with the following HTML.</source>
          <target state="translated">コードエディタで、ファイル &lt;code&gt;heroes-list.component.html&lt;/code&gt; を見つけて、プレースホルダーのコンテンツを次のHTMLに置き換えます。</target>
        </trans-unit>
        <trans-unit id="8ec4a6d13d43ea7dd54f7c5d72944d8815af444e" translate="yes" xml:space="preserve">
          <source>In your code editor, open the file, &lt;code&gt;app.component.html&lt;/code&gt; and replace its contents with the following HTML.</source>
          <target state="translated">コードエディタで、ファイル &lt;code&gt;app.component.html&lt;/code&gt; を開き、その内容を次のHTMLに置き換えます。</target>
        </trans-unit>
        <trans-unit id="f21b76242519b87008bb820433618b31f09a3a4a" translate="yes" xml:space="preserve">
          <source>In your editor's user preferences (&lt;code&gt;Cmd+,&lt;/code&gt; or &lt;code&gt;Ctrl+,&lt;/code&gt;), add the following:</source>
          <target state="translated">エディターのユーザー設定（ &lt;code&gt;Cmd+,&lt;/code&gt; または &lt;code&gt;Ctrl+,&lt;/code&gt; ）で、以下を追加します。</target>
        </trans-unit>
        <trans-unit id="727a7c9f30cdfd8d4dd3c2209d749ac7719e0931" translate="yes" xml:space="preserve">
          <source>In your guard class, implement the guard you want to use. The following example uses &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; to guard the route.</source>
          <target state="translated">ガードクラスで、使用するガードを実装します。次の例では、 &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; を使用してルートを保護します。</target>
        </trans-unit>
        <trans-unit id="e9d09b0521b2a8f8f641dc6031d35a9df0c68728" translate="yes" xml:space="preserve">
          <source>In your library project's &lt;code&gt;package.json&lt;/code&gt; file, add a &quot;schematics&quot; entry with the path to your schema file. The Angular CLI uses this entry to find named schematics in your collection when it runs commands.</source>
          <target state="translated">ライブラリプロジェクトの &lt;code&gt;package.json&lt;/code&gt; ファイルに、スキーマファイルへのパスを含む「schematics」エントリを追加します。Angular CLIはこのエントリを使用して、コマンドを実行するときにコレクション内の名前付き回路図を検索します。</target>
        </trans-unit>
        <trans-unit id="3b08d5f94915a160ca1817acb5c6f70371ec0b65" translate="yes" xml:space="preserve">
          <source>In your library's root folder, create a &lt;code&gt;schematics/&lt;/code&gt; folder.</source>
          <target state="translated">ライブラリのルートフォルダーに、 &lt;code&gt;schematics/&lt;/code&gt; フォルダーを作成します。</target>
        </trans-unit>
        <trans-unit id="1f1c44296526073034fe28dcedd37942e5286e42" translate="yes" xml:space="preserve">
          <source>In your new CLI generated app, replace the &lt;code&gt;/src&lt;/code&gt; folder with the one from your &lt;code&gt;StackBlitz&lt;/code&gt; download, and then perform a build.</source>
          <target state="translated">CLIで生成された新しいアプリで、 &lt;code&gt;/src&lt;/code&gt; フォルダーを &lt;code&gt;StackBlitz&lt;/code&gt; ダウンロードのフォルダーに置き換えてから、ビルドを実行します。</target>
        </trans-unit>
        <trans-unit id="196ec867c2435e7c91db397d1f83ee4ef616a06a" translate="yes" xml:space="preserve">
          <source>In your routing NgModule, re-export the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; as a convenience so that components of the companion NgModule have access to router directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルーティングNgModuleで、コンパニオンNgModuleのコンポーネントが &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; などのルーターディレクティブにアクセスできるように、便宜上、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を再エクスポートします。</target>
        </trans-unit>
        <trans-unit id="30cfc944e0b921f322a32900e990ff35bbccfcee" translate="yes" xml:space="preserve">
          <source>In your routing module, use the appropriate property in your &lt;code&gt;routes&lt;/code&gt; configuration. Here, &lt;code&gt;canActivate&lt;/code&gt; tells the router to mediate navigation to this particular route.</source>
          <target state="translated">ルーティングモジュールで、 &lt;code&gt;routes&lt;/code&gt; 構成の適切なプロパティを使用します。ここで、 &lt;code&gt;canActivate&lt;/code&gt; は、この特定のルートへのナビゲーションを仲介するようにルーターに指示します。</target>
        </trans-unit>
        <trans-unit id="399353050f6f971c4351995b83ecf4b94005b8cf" translate="yes" xml:space="preserve">
          <source>In your service, import the following router members, implement &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt;, and inject the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service:</source>
          <target state="translated">サービスで、次のルーターメンバーをインポートし、 &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; を実装して、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを挿入します。</target>
        </trans-unit>
        <trans-unit id="850625969ea40ebbce6399197743447eb486664b" translate="yes" xml:space="preserve">
          <source>In-app Routing and Navigation</source>
          <target state="translated">アプリ内ルーティングとナビゲーション</target>
        </trans-unit>
        <trans-unit id="b08704b5f05695c4e9631bc892eb0365d32b461a" translate="yes" xml:space="preserve">
          <source>In-app navigation: routing to views</source>
          <target state="translated">アプリ内ナビゲーション:ビューへのルーティング</target>
        </trans-unit>
        <trans-unit id="ce97d1ac42d70ee94d614eb0f89cf54d2d267038" translate="yes" xml:space="preserve">
          <source>Include an installation schematic so that &lt;code&gt;ng add&lt;/code&gt; can add your library to a project.</source>
          <target state="translated">&lt;code&gt;ng add&lt;/code&gt; がライブラリをプロジェクトに追加できるように、インストール回路図を含めます。</target>
        </trans-unit>
        <trans-unit id="08720542b91aacc8813c92e6ceea960b5ca4fe91" translate="yes" xml:space="preserve">
          <source>Include an update schematic so that &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; can update your library&amp;rsquo;s dependencies and provide migrations for breaking changes in new releases.</source>
          <target state="translated">&lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; がライブラリの依存関係を更新し、新しいリリースでの重大な変更に対する移行を提供できるように、更新回路図を含めます。</target>
        </trans-unit>
        <trans-unit id="6707611a40ef57bc0b4bbd844cd17854567e9ab1" translate="yes" xml:space="preserve">
          <source>Include an update schematic so that &lt;code&gt;ng update&lt;/code&gt; can update your library&amp;rsquo;s dependencies and provide migrations for breaking changes in new releases.</source>
          <target state="translated">&lt;code&gt;ng update&lt;/code&gt; がライブラリの依存関係を更新し、新しいリリースでの重大な変更のための移行を提供できるように、更新回路図を含めます。</target>
        </trans-unit>
        <trans-unit id="282924231e939d92199d1eca77627325f87ee961" translate="yes" xml:space="preserve">
          <source>Include generation schematics in your library so that &lt;code&gt;ng generate&lt;/code&gt; can scaffold your defined artifacts (components, services, tests, and so on) in a project.</source>
          <target state="translated">&lt;code&gt;ng generate&lt;/code&gt; がプロジェクトで定義されたアーティファクト（コンポーネント、サービス、テストなど）を足場できるように、生成回路図をライブラリに含めます。</target>
        </trans-unit>
        <trans-unit id="4bb4ec7c27202bd27c6403b4450d02067c520d2b" translate="yes" xml:space="preserve">
          <source>Include required infrastructure such as the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; などの必要なインフラストラクチャを含めます。</target>
        </trans-unit>
        <trans-unit id="ec6e7b9747e35ebc5f30dc0a428e02bb8ff75e90" translate="yes" xml:space="preserve">
          <source>Include the service in the &lt;code&gt;AppModule&lt;/code&gt; or in a module that is only imported by the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; または &lt;code&gt;AppModule&lt;/code&gt; によってのみインポートされるモジュールにサービスを含める</target>
        </trans-unit>
        <trans-unit id="8aba49aa4e1a02e3008081bffbd5efbadc7cf869" translate="yes" xml:space="preserve">
          <source>Include your pipe in the &lt;code&gt;declarations&lt;/code&gt; field of the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata in order for it to be available to a template. See the &lt;code&gt;app.module.ts&lt;/code&gt; file in the example app (live example). For details, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">テンプレートで使用できるようにするには、パイプを &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;declarations&lt;/code&gt; フィールドに含めます。サンプルアプリ（ &lt;code&gt;app.module.ts&lt;/code&gt; 例）のapp.module.tsファイルを参照してください。詳細については、&lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="497e47d580938603d6e2f90429b6ca666fccc44c" translate="yes" xml:space="preserve">
          <source>Includes &lt;a href=&quot;../api/core/provider&quot;&gt;providers&lt;/a&gt; and methods to compile and run the app on the client using the &lt;a href=&quot;aot-compiler&quot;&gt;JIT compiler&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;aot-compiler&quot;&gt;JITコンパイラー&lt;/a&gt;を使用してクライアント上でアプリをコンパイルおよび実行するための&lt;a href=&quot;../api/core/provider&quot;&gt;プロバイダー&lt;/a&gt;とメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="0ad6c20b67c9ef5c8bae321419d3e7b82dfca42c" translate="yes" xml:space="preserve">
          <source>Includes a link to add the &lt;code&gt;manifest.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;manifest.json&lt;/code&gt; ファイルを追加するためのリンクが含まれています。</target>
        </trans-unit>
        <trans-unit id="ec7fab0bf1d7fbc129b6a52468ce43ec265c54c5" translate="yes" xml:space="preserve">
          <source>Includes a link to add the &lt;code&gt;manifest.webmanifest&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;manifest.webmanifest&lt;/code&gt; ファイルを追加するためのリンクが含まれています。</target>
        </trans-unit>
        <trans-unit id="ede5524d447137c6007fc3872dcd98681351a7c8" translate="yes" xml:space="preserve">
          <source>Includes testability features, typed request and response objects, request and response interception, observable APIs, and streamlined error handling.</source>
          <target state="translated">テスト可能性の機能、型付けされたリクエストとレスポンスのオブジェクト、リクエストとレスポンスのインターセプト、観測可能なAPI、合理化されたエラー処理などが含まれています。</target>
        </trans-unit>
        <trans-unit id="9b0793ed118cccc9349319604ac83b01285a42ad" translate="yes" xml:space="preserve">
          <source>Including a route parameter (passing the Hero &lt;code&gt;id&lt;/code&gt; while routing to the &quot;Hero Detail&quot;).</source>
          <target state="translated">ルートパラメータを含める（「ヒーローの詳細」にルーティングするときにヒーロー &lt;code&gt;id&lt;/code&gt; を渡す）。</target>
        </trans-unit>
        <trans-unit id="98e74adf3229ab63477c62be5d7146a7e849046e" translate="yes" xml:space="preserve">
          <source>Inclusive Components</source>
          <target state="translated">インクルーシブコンポーネント</target>
        </trans-unit>
        <trans-unit id="7099fad44ed7e3e008c2391fbea8ece07dcd4d22" translate="yes" xml:space="preserve">
          <source>Increased security with native &lt;a href=&quot;https://web.dev/trusted-types/&quot;&gt;Trusted Types&lt;/a&gt; in Angular</source>
          <target state="translated">Angularのネイティブの&lt;a href=&quot;https://web.dev/trusted-types/&quot;&gt;信頼できるタイプによる&lt;/a&gt;セキュリティの向上</target>
        </trans-unit>
        <trans-unit id="d686caf322ed32f4566b224dd18bea8a4089d16d" translate="yes" xml:space="preserve">
          <source>Increases the number of pending request</source>
          <target state="translated">保留中のリクエスト数を増やす</target>
        </trans-unit>
        <trans-unit id="a1d5d5a9b2dbc095f06632faa7f8d2ec706001b6" translate="yes" xml:space="preserve">
          <source>Incremental builds can be run as a background process in your dev environment. To take advantage of this feature add the &lt;code&gt;--watch&lt;/code&gt; flag to the build command:</source>
          <target state="translated">インクリメンタルビルドは、開発環境のバックグラウンドプロセスとして実行できます。この機能を利用するには、ビルドコマンドに &lt;code&gt;--watch&lt;/code&gt; フラグを追加します。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="57a507dedf4559e07065957eca1175bc03ba365d" translate="yes" xml:space="preserve">
          <source>Index in the array to insert the control</source>
          <target state="translated">コントロールを挿入する配列のインデックス</target>
        </trans-unit>
        <trans-unit id="ee3ba6ae75b8a4c10a8036ec35138251054f277c" translate="yes" xml:space="preserve">
          <source>Index in the array to remove the control</source>
          <target state="translated">コントロールを削除する配列のインデックス</target>
        </trans-unit>
        <trans-unit id="66e18f43642f8990d457a1934bd052577f94b398" translate="yes" xml:space="preserve">
          <source>Index in the array to replace the control</source>
          <target state="translated">コントロールを置き換える配列のインデックス</target>
        </trans-unit>
        <trans-unit id="5f69ec55403ddc6ac8d13721d541e09482a7940b" translate="yes" xml:space="preserve">
          <source>Index in the array to retrieve the control</source>
          <target state="translated">コントロールを取得するための配列のインデックス</target>
        </trans-unit>
        <trans-unit id="6906761e076d1a610413de4171c8d5dea67905df" translate="yes" xml:space="preserve">
          <source>Indicates if the provider is a multi-provider or a regular provider.</source>
          <target state="translated">プロバイダがマルチプロバイダか通常のプロバイダかを示す。</target>
        </trans-unit>
        <trans-unit id="a226b2f1a87e5950fc108a1472b50623b2217451" translate="yes" xml:space="preserve">
          <source>Indicates that the result of a &lt;a href=&quot;core/pipe&quot;&gt;&lt;code&gt;Pipe&lt;/code&gt;&lt;/a&gt; transformation has changed even though the reference has not changed.</source>
          <target state="translated">参照が変更されていなくても、&lt;a href=&quot;core/pipe&quot;&gt; &lt;code&gt;Pipe&lt;/code&gt; &lt;/a&gt;変換の結果が変更されたことを示します。</target>
        </trans-unit>
        <trans-unit id="ef1f129438ed53e3939954fd8d48915df19e8c7b" translate="yes" xml:space="preserve">
          <source>Indicates that the result of a &lt;a href=&quot;pipe&quot;&gt;&lt;code&gt;Pipe&lt;/code&gt;&lt;/a&gt; transformation has changed even though the reference has not changed.</source>
          <target state="translated">参照が変更されていなくても、&lt;a href=&quot;pipe&quot;&gt; &lt;code&gt;Pipe&lt;/code&gt; &lt;/a&gt;変換の結果が変更されたことを示します。</target>
        </trans-unit>
        <trans-unit id="73f7d541bd341c43c84d9404f23680ea85ea9d12" translate="yes" xml:space="preserve">
          <source>Indicates when a location is initialized.</source>
          <target state="translated">場所が初期化されたときに表示されます。</target>
        </trans-unit>
        <trans-unit id="2339b8ad3625abec50c5fec9ccfe1b4c0adb5b6e" translate="yes" xml:space="preserve">
          <source>Indonesian</source>
          <target state="translated">Indonesian</target>
        </trans-unit>
        <trans-unit id="e30c5310c8d6f412a378028007bd3332f3ddf51a" translate="yes" xml:space="preserve">
          <source>Infers template context types where configured (for example, allowing correct type-checking of &lt;code&gt;NgFor&lt;/code&gt;).</source>
          <target state="translated">構成されているテンプレートコンテキストタイプを推測します（たとえば、 &lt;code&gt;NgFor&lt;/code&gt; の正しいタイプチェックを許可します）。</target>
        </trans-unit>
        <trans-unit id="ff0a8f1a1348503cfadffc6b2cad445ba983c4ab" translate="yes" xml:space="preserve">
          <source>Infers the correct type of &lt;code&gt;$event&lt;/code&gt; in component/directive, DOM, and animation event bindings.</source>
          <target state="translated">コンポーネント/ディレクティブ、DOM、およびアニメーションイベントバインディングで正しいタイプの &lt;code&gt;$event&lt;/code&gt; を推測します。</target>
        </trans-unit>
        <trans-unit id="cfaf4d7a931a957a0518549794c679bcfefd25f7" translate="yes" xml:space="preserve">
          <source>Infers the correct type of components/directives, including generics.</source>
          <target state="translated">ジェネリックを含むコンポーネント/ディレクティブの正しいタイプを推測します。</target>
        </trans-unit>
        <trans-unit id="0518dc3b51a7ad378102d238e804098cc7c8a2c5" translate="yes" xml:space="preserve">
          <source>Infers the correct type of local references to DOM elements, based on the tag name (for example, the type that &lt;code&gt;document.createElement&lt;/code&gt; would return for that tag).</source>
          <target state="translated">タグ名に基づいて、DOM要素へのローカル参照の正しいタイプを推測します（たとえば、 &lt;code&gt;document.createElement&lt;/code&gt; がそのタグに対して返すタイプ）。</target>
        </trans-unit>
        <trans-unit id="fe8a63fb884b51a65ffbab786ee171700ba71dca" translate="yes" xml:space="preserve">
          <source>Infinity, can be used with plus and minus. Example: &amp;infin;, +&amp;infin;, -&amp;infin;</source>
          <target state="translated">無限大、プラスとマイナスで使用できます。例：&amp;infin;、+&amp;infin;、-&amp;infin;</target>
        </trans-unit>
        <trans-unit id="71b2d6934c04d0811bdb26319c33abe4a79bac50" translate="yes" xml:space="preserve">
          <source>Information about a navigation operation. Retrieve the most recent navigation object with the &lt;a href=&quot;router#getcurrentnavigation&quot;&gt;Router.getCurrentNavigation() method&lt;/a&gt; .</source>
          <target state="translated">ナビゲーション操作に関する情報。&lt;a href=&quot;router#getcurrentnavigation&quot;&gt;Router.getCurrentNavigation（）メソッドを使用&lt;/a&gt;して最新のナビゲーションオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="b3dedb476a249b2a3aeb52da6fa5d5b4c4e0f38c" translate="yes" xml:space="preserve">
          <source>Information about a navigation operation. Retrieve the most recent navigation object with the &lt;a href=&quot;router/router#getcurrentnavigation&quot;&gt;Router.getCurrentNavigation() method&lt;/a&gt; .</source>
          <target state="translated">ナビゲーション操作に関する情報。&lt;a href=&quot;router/router#getcurrentnavigation&quot;&gt;Router.getCurrentNavigation（）メソッドを使用&lt;/a&gt;して最新のナビゲーションオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="17e8aa425129cc14c2dcfed09c7bb96d8d9d34ce" translate="yes" xml:space="preserve">
          <source>Information about a navigation operation. Retrieve the most recent navigation object with the &lt;code&gt;router.getCurrentNavigation()&lt;/code&gt; method.</source>
          <target state="translated">ナビゲーション操作に関する情報。 &lt;code&gt;router.getCurrentNavigation()&lt;/code&gt; メソッドを使用して、最新のナビゲーションオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="5d8911a7c835165927ce0fe2f98e8c5ee99367a3" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt; decorator</source>
          <target state="translated">&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;デコレータから継承</target>
        </trans-unit>
        <trans-unit id="dcd77ef0b804e5064dd803f77b8a828a13037e8e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; から継承</target>
        </trans-unit>
        <trans-unit id="b2e16c0ede4e151e344b0a7018a817ca81bff170" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt; から継承</target>
        </trans-unit>
        <trans-unit id="7b0e6fa8afe9fe66b319e4ffce4d5b04030afdd1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;controlcontainer&quot;&gt;ControlContainer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlcontainer&quot;&gt;ControlContainer&lt;/a&gt;&lt;/code&gt; から継承</target>
        </trans-unit>
        <trans-unit id="9aa6e1c6b872fa792c0cda39792e0c2d17339088" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;ngclassbase&quot;&gt;NgClassBase&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngclassbase&quot;&gt;NgClassBase&lt;/a&gt;&lt;/code&gt; から継承</target>
        </trans-unit>
        <trans-unit id="0b58cc13a8f7a9113f65b285338c3c8ecc3a76ce" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; から継承</target>
        </trans-unit>
        <trans-unit id="9240846abcc88d5bc03f7b8b3ea9b93dc9d94d85" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;ngstylebase&quot;&gt;NgStyleBase&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngstylebase&quot;&gt;NgStyleBase&lt;/a&gt;&lt;/code&gt; から継承</target>
        </trans-unit>
        <trans-unit id="77f97d1404eeb944941dce572340411b8745a17f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;requiredvalidator&quot;&gt;RequiredValidator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;requiredvalidator&quot;&gt;RequiredValidator&lt;/a&gt;&lt;/code&gt; から継承</target>
        </trans-unit>
        <trans-unit id="20a9fca8990fcc98b2b18559e85df597fd3a6518" translate="yes" xml:space="preserve">
          <source>Initial Tour of Heroes example application for beginning the tutorial. For more information, see &lt;a href=&quot;../tutorial/toh-pt0&quot;&gt;Create a new project&lt;/a&gt;.</source>
          <target state="translated">チュートリアルを開始するためのヒーローの初期ツアーサンプルアプリケーション。詳細については、「&lt;a href=&quot;../tutorial/toh-pt0&quot;&gt;新しいプロジェクトの作成&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f370e247cdb302508a8b07274aac235758f135a4" translate="yes" xml:space="preserve">
          <source>Initial git repository commit information.</source>
          <target state="translated">git リポジトリの初期コミット情報。</target>
        </trans-unit>
        <trans-unit id="571af2d87fcb6ae228307d5bca556e15b485b55f" translate="yes" xml:space="preserve">
          <source>Initial load</source>
          <target state="translated">初期負荷</target>
        </trans-unit>
        <trans-unit id="9295a6b527e07161cef57e1c1ccd71b70c89f70d" translate="yes" xml:space="preserve">
          <source>InitialNavigation</source>
          <target state="translated">InitialNavigation</target>
        </trans-unit>
        <trans-unit id="67c3a59c8fd61dc6486a966bfc500708124ba415" translate="yes" xml:space="preserve">
          <source>Initialize a control as disabled</source>
          <target state="translated">コントロールを無効化して初期化する</target>
        </trans-unit>
        <trans-unit id="4eebcc10a8e490cd62529c5e8e054755f7da1680" translate="yes" xml:space="preserve">
          <source>Initialize the AbstractControl instance.</source>
          <target state="translated">AbstractControlインスタンスを初期化します。</target>
        </trans-unit>
        <trans-unit id="2d9f5b3d7a71b9315bdd35eb72e500c9bc28970b" translate="yes" xml:space="preserve">
          <source>Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component's input properties. See details in &lt;a href=&quot;lifecycle-hooks#oninit&quot;&gt;Initializing a component or directive&lt;/a&gt; in this document.</source>
          <target state="translated">Angularが最初にデータバインドされたプロパティを表示し、ディレクティブまたはコンポーネントの入力プロパティを設定した後、ディレクティブまたはコンポーネントを初期化します。このドキュメントの&lt;a href=&quot;lifecycle-hooks#oninit&quot;&gt;コンポーネントまたはディレクティブの初期化の&lt;/a&gt;詳細を参照してください。</target>
        </trans-unit>
        <trans-unit id="9dc3a6c3f424e12509055f6982dc7843c5ee3f57" translate="yes" xml:space="preserve">
          <source>Initialize the directive/component after Angular first displays the data-bound properties and sets the directive/component's input properties.</source>
          <target state="translated">Angularが最初にデータバインドプロパティを表示し、ディレクティブやコンポーネントの入力プロパティを設定した後に、ディレクティブやコンポーネントを初期化します。</target>
        </trans-unit>
        <trans-unit id="a95372f851a37c7ccab21bff14bd44def255e637" translate="yes" xml:space="preserve">
          <source>Initialize the environment for testing with a compiler factory, a PlatformRef, and an angular module. These are common to every test in the suite.</source>
          <target state="translated">コンパイラファクトリ、PlatformRef、Angular モジュールでテスト環境を初期化します。これらはスイート内のすべてのテストに共通です。</target>
        </trans-unit>
        <trans-unit id="0c3674ebd78fe94c6d9fa6c8cfe3b72434b691fc" translate="yes" xml:space="preserve">
          <source>Initialize the testing environment for the entire test run.</source>
          <target state="translated">テスト実行全体のテスト環境を初期化します。</target>
        </trans-unit>
        <trans-unit id="aa1459b074a250001c22df0a6ff4d2a090a6bddc" translate="yes" xml:space="preserve">
          <source>Initializes a constructor instance.</source>
          <target state="translated">コンストラクタのインスタンスを初期化します。</target>
        </trans-unit>
        <trans-unit id="c9db2ae584e270a26cd5d19e6158467ad592c103" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the event-manager service.</source>
          <target state="translated">イベントマネージャサービスのインスタンスを初期化します。</target>
        </trans-unit>
        <trans-unit id="754ef6b0761c3646e19a5a7b638f7d2b30efe518" translate="yes" xml:space="preserve">
          <source>Initializes that property with the corresponding argument when creating an instance of the class.</source>
          <target state="translated">クラスのインスタンスを作成する際に、そのプロパティを対応する引数で初期化します。</target>
        </trans-unit>
        <trans-unit id="2699534e66ed5e13056581917d48556f49da8381" translate="yes" xml:space="preserve">
          <source>Initializes the animation.</source>
          <target state="translated">アニメーションを初期化します。</target>
        </trans-unit>
        <trans-unit id="d7bc389cad16303b5a27f5b7ab489c3a1a9d4378" translate="yes" xml:space="preserve">
          <source>Initializes the control with an initial state value, or with an object that contains both a value and a disabled status.</source>
          <target state="translated">コントロールを初期状態値で初期化するか、値と無効化された状態の両方を含むオブジェクトで初期化します。</target>
        </trans-unit>
        <trans-unit id="45131dcddc1529f6f3b00cd78ce30c35d914b381" translate="yes" xml:space="preserve">
          <source>Initializes the control with an initial value, or an object that defines the initial value and disabled state.</source>
          <target state="translated">コントロールを初期値、または初期値と無効状態を定義するオブジェクトで初期化します。</target>
        </trans-unit>
        <trans-unit id="37ee460935fc0f5ed51a8e919d18a3056e25d96f" translate="yes" xml:space="preserve">
          <source>Initializes the given channel and attaches a new &lt;a href=&quot;clientmessagebroker&quot;&gt;&lt;code&gt;ClientMessageBroker&lt;/code&gt;&lt;/a&gt; to it.</source>
          <target state="translated">指定されたチャネルを初期化し、&lt;a href=&quot;clientmessagebroker&quot;&gt; &lt;code&gt;ClientMessageBroker&lt;/code&gt; &lt;/a&gt;新しいClientMessageBrokerをアタッチします。</target>
        </trans-unit>
        <trans-unit id="642b54430a0eb721573dc494e1c4d52db3a4409f" translate="yes" xml:space="preserve">
          <source>Initializes the given channel and attaches a new &lt;a href=&quot;servicemessagebroker&quot;&gt;&lt;code&gt;ServiceMessageBroker&lt;/code&gt;&lt;/a&gt; to it.</source>
          <target state="translated">指定されたチャネルを初期化し、新しい&lt;a href=&quot;servicemessagebroker&quot;&gt; &lt;code&gt;ServiceMessageBroker&lt;/code&gt; &lt;/a&gt;をそれにアタッチします。</target>
        </trans-unit>
        <trans-unit id="45c1066fbea6cba9ced272d9562f0736aff32776" translate="yes" xml:space="preserve">
          <source>Initializing Form Controls</source>
          <target state="translated">フォームコントロールの初期化</target>
        </trans-unit>
        <trans-unit id="21a441852885d7b36abf9a2af6624106cec7028b" translate="yes" xml:space="preserve">
          <source>Initializing a component or directive</source>
          <target state="translated">コンポーネントやディレクティブの初期化</target>
        </trans-unit>
        <trans-unit id="1fe4e72a93c746bc6e02495144ba7947c1a26ff3" translate="yes" xml:space="preserve">
          <source>Initially, the form contains one &lt;code&gt;Alias&lt;/code&gt; field. To add another field, click the &lt;strong&gt;Add Alias&lt;/strong&gt; button. You can also validate the array of aliases reported by the form model displayed by &lt;code&gt;&lt;a href=&quot;../api/forms/form&quot;&gt;Form&lt;/a&gt; &lt;a href=&quot;reactive-forms&quot;&gt;Value&lt;/a&gt;&lt;/code&gt; at the bottom of the template.</source>
          <target state="translated">最初、フォームには1つの &lt;code&gt;Alias&lt;/code&gt; フィールドが含まれています。別のフィールドを追加するには、[ &lt;strong&gt;エイリアス&lt;/strong&gt;の&lt;strong&gt;追加&lt;/strong&gt; ]ボタンをクリックします。テンプレートの下部にある[ &lt;code&gt;&lt;a href=&quot;../api/forms/form&quot;&gt;Form&lt;/a&gt; &lt;a href=&quot;reactive-forms&quot;&gt;Value&lt;/a&gt;&lt;/code&gt; 表示されるフォームモデルによって報告されたエイリアスの配列を検証することもできます。</target>
        </trans-unit>
        <trans-unit id="42eadde3ebeedcb01845dc3c87d03e98510aa2f2" translate="yes" xml:space="preserve">
          <source>Initially, the form contains one &lt;code&gt;Alias&lt;/code&gt; field. To add another field, click the &lt;strong&gt;Add Alias&lt;/strong&gt; button. You can also validate the array of aliases reported by the form model displayed by &lt;code&gt;&lt;a href=&quot;../api/forms/form&quot;&gt;Form&lt;/a&gt; Value&lt;/code&gt; at the bottom of the template.</source>
          <target state="translated">最初、フォームには1つの &lt;code&gt;Alias&lt;/code&gt; フィールドが含まれています。別のフィールドを追加するには、[&lt;strong&gt;エイリアス&lt;/strong&gt;の&lt;strong&gt;追加&lt;/strong&gt;]ボタンをクリックします。テンプレートの下部にある &lt;code&gt;&lt;a href=&quot;../api/forms/form&quot;&gt;Form&lt;/a&gt; Value&lt;/code&gt; によって表示されるフォームモデルによって報告されるエイリアスの配列を検証することもできます。</target>
        </trans-unit>
        <trans-unit id="18f7dc17ff8fd13a734c298c804eb7b21097f85d" translate="yes" xml:space="preserve">
          <source>Initially, this &lt;code&gt;package.json&lt;/code&gt; includes &lt;em&gt;a starter set of packages&lt;/em&gt;, some of which are required by Angular and others that support common application scenarios. You add packages to &lt;code&gt;package.json&lt;/code&gt; as your application evolves. You may even remove some.</source>
          <target state="translated">最初に、この &lt;code&gt;package.json&lt;/code&gt; に&lt;em&gt;はスターターパッケージセットが&lt;/em&gt;含まれ&lt;em&gt;ています&lt;/em&gt;。Angularが必要とする&lt;em&gt;パッケージ&lt;/em&gt;もあれば、一般的なアプリケーションシナリオをサポートする&lt;em&gt;パッケージ&lt;/em&gt;もあります。アプリケーションの進化に &lt;code&gt;package.json&lt;/code&gt; て、package.jsonにパッケージを追加します。一部を削除することもできます。</target>
        </trans-unit>
        <trans-unit id="f0514cac9bc7568beb69cbbc30da8b406819cc6b" translate="yes" xml:space="preserve">
          <source>Inject</source>
          <target state="translated">Inject</target>
        </trans-unit>
        <trans-unit id="7268a66f5506231753b6382da0b8d3a4a8843b60" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into the &lt;code&gt;CartService&lt;/code&gt; constructor:</source>
          <target state="translated">ジェクト &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;CartService&lt;/code&gt; のコンストラクタ：</target>
        </trans-unit>
        <trans-unit id="a0b584ab9a7933f64f5ad564c80c4c66772a45ff" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into the constructor of the &lt;code&gt;CartService&lt;/code&gt; component class:</source>
          <target state="translated">注入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; のコンストラクタに &lt;code&gt;CartService&lt;/code&gt; コンポーネントクラス：</target>
        </trans-unit>
        <trans-unit id="169d2e7db743680da7bcee35e770f063b1748fe7" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; in the constructor of the component class so they are available to this component:</source>
          <target state="translated">注入 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 、彼らは、このコンポーネントで使用できるように、コンポーネントクラスのコンストラクタで：</target>
        </trans-unit>
        <trans-unit id="07e6446b3ec41eff6e77df6a94f68f05da7cbf47" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;&lt;a href=&quot;httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; to expect and flush requests in your tests.</source>
          <target state="translated">注入 &lt;code&gt;&lt;a href=&quot;httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; 期待すると、あなたのテストでフラッシュを要求。</target>
        </trans-unit>
        <trans-unit id="0952ea7f63acfd82b419fcf6cced10453de431df" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;defaultValue&lt;/code&gt; instead if token not found.</source>
          <target state="translated">注入 &lt;code&gt;defaultValue&lt;/code&gt; 代わりにトークン見つかりません。</target>
        </trans-unit>
        <trans-unit id="6f91c79ea7fa6708f138cf01e5ccc0fc1c490de0" translate="yes" xml:space="preserve">
          <source>Inject an instance of &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; by adding it to your application's constructor:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; のインスタンスをアプリケーションのコンストラクターに追加して、次のように挿入します。</target>
        </trans-unit>
        <trans-unit id="d35e138d7924df4f57c58f11f62047d6ce402802" translate="yes" xml:space="preserve">
          <source>Inject in HeroService, which uses the service to send a message.</source>
          <target state="translated">サービスを利用してメッセージを送信するHeroServiceのInject。</target>
        </trans-unit>
        <trans-unit id="b30cf752176e7d45dca92a9a96dfc9004399a587" translate="yes" xml:space="preserve">
          <source>Inject in MessagesComponent, which displays that message, and also displays the ID when the user clicks a hero.</source>
          <target state="translated">MessagesComponentにインジェクトして、そのメッセージを表示したり、ユーザーがヒーローをクリックしたときにIDを表示したりします。</target>
        </trans-unit>
        <trans-unit id="d1eeaaa0b805224cf7a0933509d9f3a0615a6f94" translate="yes" xml:space="preserve">
          <source>Inject into a derived class</source>
          <target state="translated">派生クラスへの注入</target>
        </trans-unit>
        <trans-unit id="b3f6806d5b467cb7c3bc8bc8ecba219c8ede60db" translate="yes" xml:space="preserve">
          <source>Inject it into the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; に挿入します</target>
        </trans-unit>
        <trans-unit id="3d776a9677bf6c1c0ad00a83d4d70c493a2bace4" translate="yes" xml:space="preserve">
          <source>Inject it into the dashboard's constructor.</source>
          <target state="translated">ダッシュボードのコンストラクタにインジェクトします。</target>
        </trans-unit>
        <trans-unit id="c6a769a7874598dad610ef89ad42c1d6435742d6" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; サービスを注入します。</target>
        </trans-unit>
        <trans-unit id="28003182cc950317a6abaadf804293a86af1d3ae" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor.</source>
          <target state="translated">注入 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;HeroListComponent&lt;/code&gt; のコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="420762bbb815b0bd858d87aa0d93b5c20b06538d" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;HeroService&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; services into the constructor, saving their values in private fields:</source>
          <target state="translated">注入 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;HeroService&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; プライベートフィールドにその値を保存し、コンストラクタにサービスを：</target>
        </trans-unit>
        <trans-unit id="2e1405e8adb50326460760ac57b28afebe1b1ae0" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;CartService&lt;/code&gt; so that the cart component can use it.</source>
          <target state="translated">注入 &lt;code&gt;CartService&lt;/code&gt; カートのコンポーネントは、それを使用できるように。</target>
        </trans-unit>
        <trans-unit id="a800bd5a4004e16e0370dad20e9742d5664827db" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;CartService&lt;/code&gt; to manage cart information.</source>
          <target state="translated">注入し &lt;code&gt;CartService&lt;/code&gt; をカート情報を管理すること。</target>
        </trans-unit>
        <trans-unit id="65162f531f207477535e62e7ea7492fac9f6c223" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;CrisisService&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; and implement the &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; method. That method could return a &lt;code&gt;Promise&lt;/code&gt;, an &lt;code&gt;Observable&lt;/code&gt;, or a synchronous return value.</source>
          <target state="translated">注入し &lt;code&gt;CrisisService&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; して実装する &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; メソッドを。そのメソッドは、 &lt;code&gt;Promise&lt;/code&gt; 、 &lt;code&gt;Observable&lt;/code&gt; 、または同期戻り値を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="0b16f99c02b8f10852282d8d6eebe4a3cc42a9b4" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;CrisisService&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; and implement the &lt;code&gt;resolve()&lt;/code&gt; method. That method could return a &lt;code&gt;Promise&lt;/code&gt;, an &lt;code&gt;Observable&lt;/code&gt;, or a synchronous return value.</source>
          <target state="translated">注入し &lt;code&gt;CrisisService&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; して実装する &lt;code&gt;resolve()&lt;/code&gt; メソッドを。そのメソッドは、 &lt;code&gt;Promise&lt;/code&gt; 、 &lt;code&gt;Observable&lt;/code&gt; 、または同期戻り値を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="b20e458e5aa5f29eda7fa30aedd57b1b45f296a2" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; を注入する</target>
        </trans-unit>
        <trans-unit id="e0008c9832891895e4197fb26311d64785b52f25" translate="yes" xml:space="preserve">
          <source>Inject the cart service by adding it to the &lt;code&gt;constructor()&lt;/code&gt;.</source>
          <target state="translated">カートサービスを &lt;code&gt;constructor()&lt;/code&gt; に追加して挿入します。</target>
        </trans-unit>
        <trans-unit id="dfe1510a03a138b089478140897f394368c5b8a7" translate="yes" xml:space="preserve">
          <source>Inject the cart service in the &lt;code&gt;ShippingComponent&lt;/code&gt; constructor:</source>
          <target state="translated">&lt;code&gt;ShippingComponent&lt;/code&gt; コンストラクターにカートサービスを挿入します。</target>
        </trans-unit>
        <trans-unit id="d16b7c4a0cd536e6bacd2ccd43f6080006784561" translate="yes" xml:space="preserve">
          <source>Inject the cart service into the &lt;code&gt;ShippingComponent&lt;/code&gt; class:</source>
          <target state="translated">カートサービスを &lt;code&gt;ShippingComponent&lt;/code&gt; クラスに挿入します。</target>
        </trans-unit>
        <trans-unit id="43ae56b717b1d07da26cefb067628e0d35f4e121" translate="yes" xml:space="preserve">
          <source>Inject the cart service.</source>
          <target state="translated">カートサービスを注入します。</target>
        </trans-unit>
        <trans-unit id="45806a7b832a7aa36033546e2909b1fb99fc8062" translate="yes" xml:space="preserve">
          <source>Inject the component's DOM element</source>
          <target state="translated">コンポーネントの DOM 要素を注入します。</target>
        </trans-unit>
        <trans-unit id="b9cc71265ff0cedc6025f851aa1090e10ae4106d" translate="yes" xml:space="preserve">
          <source>InjectFlags</source>
          <target state="translated">InjectFlags</target>
        </trans-unit>
        <trans-unit id="cd7616c62bcee7b28a2504d9962636cfb31a65c9" translate="yes" xml:space="preserve">
          <source>InjectSetupWrapper</source>
          <target state="translated">InjectSetupWrapper</target>
        </trans-unit>
        <trans-unit id="032faf52b4d806d5f16a644601453c9eb56123b1" translate="yes" xml:space="preserve">
          <source>Injectable</source>
          <target state="translated">Injectable</target>
        </trans-unit>
        <trans-unit id="408e9d9b7375e404fefb7bdc04837a04c20b6309" translate="yes" xml:space="preserve">
          <source>Injectable providers used in &lt;code&gt;@&lt;a href=&quot;core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; デコレーターで使用されるInjectableプロバイダー。</target>
        </trans-unit>
        <trans-unit id="7d89bf3bcb75ed56c72f7c17563209bdb5e2382a" translate="yes" xml:space="preserve">
          <source>Injectable providers used in &lt;code&gt;@&lt;a href=&quot;injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; デコレーターで使用されるInjectableプロバイダー。</target>
        </trans-unit>
        <trans-unit id="2a77ff4292cc82f8396306b5f586ac5f5ffc12ad" translate="yes" xml:space="preserve">
          <source>Injectable service that provides a low-level interface for modifying the UI.</source>
          <target state="translated">UIを変更するための低レベルのインターフェイスを提供する注射可能なサービス。</target>
        </trans-unit>
        <trans-unit id="156e1f6f9747e475b38a1e470e8d079a4be1aadb" translate="yes" xml:space="preserve">
          <source>InjectableProvider</source>
          <target state="translated">InjectableProvider</target>
        </trans-unit>
        <trans-unit id="448a62a5bd5844abb70fe1a20a84b72bb981925f" translate="yes" xml:space="preserve">
          <source>InjectableType</source>
          <target state="translated">InjectableType</target>
        </trans-unit>
        <trans-unit id="56d719f116fb18f959e9f077cb6114537d0a4be7" translate="yes" xml:space="preserve">
          <source>Injecting a class with a view provider</source>
          <target state="translated">ビュープロバイダでクラスをインジェクトする</target>
        </trans-unit>
        <trans-unit id="c9ee8821d919d7751df2bcbc666729c175774e79" translate="yes" xml:space="preserve">
          <source>Injecting services</source>
          <target state="translated">サービスの注入</target>
        </trans-unit>
        <trans-unit id="b141699eb731deeb1b3864e217053b13aad88af5" translate="yes" xml:space="preserve">
          <source>Injecting the real &lt;code&gt;UserService&lt;/code&gt; could be a nightmare. The real service might ask the user for login credentials and attempt to reach an authentication server. These behaviors can be hard to intercept. It is far easier and safer to create and register a test double in place of the real &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">実際の &lt;code&gt;UserService&lt;/code&gt; を注入することは悪夢になる可能性があります。実際のサービスは、ユーザーにログイン資格情報を要求し、認証サーバーへの到達を試みる場合があります。これらの動作は傍受するのが難しい場合があります。実際の &lt;code&gt;UserService&lt;/code&gt; の代わりにテストダブルを作成して登録する方がはるかに簡単で安全です。</target>
        </trans-unit>
        <trans-unit id="15703d66fca65cfd4fa012d37f65af1377c00996" translate="yes" xml:space="preserve">
          <source>Injection flags for DI.</source>
          <target state="translated">DI用のインジェクションフラグです。</target>
        </trans-unit>
        <trans-unit id="3fefed6e20021dd0a517b637697a6956a93a1560" translate="yes" xml:space="preserve">
          <source>Injection of the lightweight pattern, using &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;()&lt;/code&gt; を使用した軽量パターンの注入。</target>
        </trans-unit>
        <trans-unit id="0a3916cd31d033e233732648d3cdccd52f27b6e3" translate="yes" xml:space="preserve">
          <source>Injection token used to provide a &lt;a href=&quot;hammerloader&quot;&gt;&lt;code&gt;HammerLoader&lt;/code&gt;&lt;/a&gt; to Angular.</source>
          <target state="translated">Angularに&lt;a href=&quot;hammerloader&quot;&gt; &lt;code&gt;HammerLoader&lt;/code&gt; &lt;/a&gt;を提供するために使用される注入トークン。</target>
        </trans-unit>
        <trans-unit id="57c26333c9513bf60f948651b07cba48e8ae53ff" translate="yes" xml:space="preserve">
          <source>Injection token used to provide a &lt;a href=&quot;platform-browser/hammerloader&quot;&gt;&lt;code&gt;HammerLoader&lt;/code&gt;&lt;/a&gt; to Angular.</source>
          <target state="translated">Angularに&lt;a href=&quot;platform-browser/hammerloader&quot;&gt; &lt;code&gt;HammerLoader&lt;/code&gt; &lt;/a&gt;を提供するために使用される注入トークン。</target>
        </trans-unit>
        <trans-unit id="298d0251e89d6600ae4b408002fa0e4b1b404c23" translate="yes" xml:space="preserve">
          <source>InjectionToken</source>
          <target state="translated">InjectionToken</target>
        </trans-unit>
        <trans-unit id="2ca8a0d344a0e19a0d77c7ff904b9681383397eb" translate="yes" xml:space="preserve">
          <source>Injector</source>
          <target state="translated">Injector</target>
        </trans-unit>
        <trans-unit id="181fb401efe3b0268d07d54a65b4c3aee191549f" translate="yes" xml:space="preserve">
          <source>Injector hierarchy and service instances</source>
          <target state="translated">インジェクターの階層とサービスインスタンス</target>
        </trans-unit>
        <trans-unit id="6681c4b8cc73e181819eb4ae89965a8a02cef140" translate="yes" xml:space="preserve">
          <source>InjectorType</source>
          <target state="translated">InjectorType</target>
        </trans-unit>
        <trans-unit id="491d5d6666614da901294ee7bd33510be9f0dcaa" translate="yes" xml:space="preserve">
          <source>Injectors are inherited, which means that if a given injector can't resolve a dependency, it asks the parent injector to resolve it. A component can get services from its own injector, from the injectors of its component ancestors, from the injector of its parent NgModule, or from the &lt;code&gt;root&lt;/code&gt; injector.</source>
          <target state="translated">インジェクターは継承されます。つまり、特定のインジェクターが依存関係を解決できない場合、親インジェクターに依存関係の解決を要求します。コンポーネントは、独自のインジェクター、コンポーネントの祖先のインジェクター、親NgModuleのインジェクター、または &lt;code&gt;root&lt;/code&gt; インジェクターからサービスを取得できます。</target>
        </trans-unit>
        <trans-unit id="cba0bd0bb6098207c32cc66a9233a7a7ca6e5abc" translate="yes" xml:space="preserve">
          <source>Injectors in Angular have rules that you can leverage to achieve the desired visibility of injectables in your apps. By understanding these rules, you can determine in which NgModule, Component or Directive you should declare a provider.</source>
          <target state="translated">Angularのインジェクタにはルールがあり、アプリ内のインジェクタブルの可視性を確保するために利用できます。これらのルールを理解することで、NgModule、Component、Directiveのどの部分にプロバイダを宣言すべきかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="2d99dc5eac81a5aa984fbb526ba0c84043ed22e8" translate="yes" xml:space="preserve">
          <source>Injects a token from the currently active injector.</source>
          <target state="translated">現在アクティブなインジェクタからトークンを注入します。</target>
        </trans-unit>
        <trans-unit id="07d77bcc29918d26c0c5de34e66f5b60a93c70cd" translate="yes" xml:space="preserve">
          <source>Injects one or more services from the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; injector into a test function. It cannot inject a service provided by the component itself. See discussion of the &lt;a href=&quot;testing#get-injected-services&quot;&gt;debugElement.injector&lt;/a&gt;.</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インジェクターから1つ以上のサービスをテスト関数に注入します。コンポーネント自体が提供するサービスを挿入することはできません。&lt;a href=&quot;testing#get-injected-services&quot;&gt;debugElement.injectorの&lt;/a&gt;説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="ebfda58e347c4ba615c724f5aac71296dadfc9b8" translate="yes" xml:space="preserve">
          <source>Injects one or more services from the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; injector into a test function. It cannot inject a service provided by the component itself. See discussion of the &lt;a href=&quot;testing-components-scenarios#get-injected-services&quot;&gt;debugElement.injector&lt;/a&gt;.</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インジェクターから1つ以上のサービスをテスト関数に注入します。コンポーネント自体によって提供されるサービスを注入することはできません。&lt;a href=&quot;testing-components-scenarios#get-injected-services&quot;&gt;debugElement.injectorの&lt;/a&gt;説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb54a2c7aa72c7bb392f1b151e7266612f3ef4e8" translate="yes" xml:space="preserve">
          <source>Inline code-snippets</source>
          <target state="translated">インラインのコードスニペット</target>
        </trans-unit>
        <trans-unit id="d784c6f0a89bdbfeb9496814987b8c32870f48b5" translate="yes" xml:space="preserve">
          <source>Inline in the template HTML.</source>
          <target state="translated">テンプレートのHTMLにインラインで記述します。</target>
        </trans-unit>
        <trans-unit id="fc54e2872104e0208a49eb9c210abc9dea3a97c7" translate="yes" xml:space="preserve">
          <source>Inline template or external template URL of the component's view.</source>
          <target state="translated">コンポーネントのビューのインラインテンプレートまたは外部テンプレートのURL。</target>
        </trans-unit>
        <trans-unit id="3c5fc6f34e31d2439d02789f5061ec164e3d81e3" translate="yes" xml:space="preserve">
          <source>Inline, hand-coded snippets like this one are &lt;em&gt;not&lt;/em&gt; testable and, therefore, are intrinsically unreliable. This example belongs to the small set of pre-approved, inline snippets that includes user input in a command shell or the &lt;em&gt;output&lt;/em&gt; of some process.</source>
          <target state="translated">このようなインラインの手動でコード化されたスニペット&lt;em&gt;は&lt;/em&gt;テストできないため、本質的に信頼できません。この例は、コマンドシェルでのユーザー入力または一部のプロセスの&lt;em&gt;出力&lt;/em&gt;を含む、事前に承認されたインラインスニペットの小さなセットに属しています。</target>
        </trans-unit>
        <trans-unit id="b568d47f2e244743b1fd7472db836ef9769c21f8" translate="yes" xml:space="preserve">
          <source>Input</source>
          <target state="translated">Input</target>
        </trans-unit>
        <trans-unit id="630cbac3ad3755357bd8db01e781e15971700af2" translate="yes" xml:space="preserve">
          <source>Input Type</source>
          <target state="translated">入力タイプ</target>
        </trans-unit>
        <trans-unit id="82f4a61e5306720ccacc3322e115835fcae38855" translate="yes" xml:space="preserve">
          <source>Input and Output properties</source>
          <target state="translated">入力と出力のプロパティ</target>
        </trans-unit>
        <trans-unit id="6a18227787f1646b26acd2c3b05cd5b674174bc5" translate="yes" xml:space="preserve">
          <source>Input setter coercion</source>
          <target state="translated">入力セッター強制</target>
        </trans-unit>
        <trans-unit id="61bbcbfa889da817407bf948fa239f50c645e934" translate="yes" xml:space="preserve">
          <source>Input type</source>
          <target state="translated">入力タイプ</target>
        </trans-unit>
        <trans-unit id="33e5e7e82f76a11ddf2991effebf767de7f3deb5" translate="yes" xml:space="preserve">
          <source>Input validation</source>
          <target state="translated">入力の検証</target>
        </trans-unit>
        <trans-unit id="a9e020d632ebb33c3a6a2f5cc2af3d36d9ba1540" translate="yes" xml:space="preserve">
          <source>Input value</source>
          <target state="translated">入力値</target>
        </trans-unit>
        <trans-unit id="f1681e51507bda05aef42afafef4821ba7b10818" translate="yes" xml:space="preserve">
          <source>Input variables</source>
          <target state="translated">入力変数</target>
        </trans-unit>
        <trans-unit id="b1cf92c5a5350b19a2842a71f5dc2b70d785c5ad" translate="yes" xml:space="preserve">
          <source>Inputs and Outputs</source>
          <target state="translated">入力と出力</target>
        </trans-unit>
        <trans-unit id="13af01c384b8f6141cc7bc08db1b4b5b83bd95b2" translate="yes" xml:space="preserve">
          <source>Inputs and type-checking</source>
          <target state="translated">入力とタイプチェック</target>
        </trans-unit>
        <trans-unit id="76712fc3bc998bc9cc80a5bbd57bbfcecb460078" translate="yes" xml:space="preserve">
          <source>Insert a new &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; at the end of the array.</source>
          <target state="translated">配列の最後に新しい &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="a6f3c89a17ee2cf468c4630a524d6bd18db775d8" translate="yes" xml:space="preserve">
          <source>Insert a new &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; at the given &lt;code&gt;index&lt;/code&gt; in the array.</source>
          <target state="translated">配列の指定された &lt;code&gt;index&lt;/code&gt; に新しい &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="a763a3ea24b93a6618a09ee6d0076c1dae54d6ab" translate="yes" xml:space="preserve">
          <source>Insert an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; within the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; that displays properties of a &lt;code&gt;hero&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hero&lt;/code&gt; プロパティを表示する &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 内に&amp;lt;li&amp;gt;を挿入します。</target>
        </trans-unit>
        <trans-unit id="d0df1c34b6777b550f977e456758483fab9bfd30" translate="yes" xml:space="preserve">
          <source>Insert the following into the &lt;code&gt;HeroesComponent&lt;/code&gt; template, just after the heading:</source>
          <target state="translated">以下を、見出しの直後の &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートに挿入します。</target>
        </trans-unit>
        <trans-unit id="23f5944e1199c8f9232153ef3a60afa86a40d070" translate="yes" xml:space="preserve">
          <source>Inserts a view into this container.</source>
          <target state="translated">このコンテナにビューを挿入します。</target>
        </trans-unit>
        <trans-unit id="50011e1a54a656c04fc02bf9c77175e034f25652" translate="yes" xml:space="preserve">
          <source>Inserts an embedded view from a prepared &lt;code&gt;&lt;a href=&quot;../core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">準備された &lt;code&gt;&lt;a href=&quot;../core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; から埋め込みビューを挿入します。</target>
        </trans-unit>
        <trans-unit id="75d0650f178b6f787feea44111266946b9ecd87d" translate="yes" xml:space="preserve">
          <source>Inserts an embedded view from a prepared &lt;code&gt;&lt;a href=&quot;core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">準備された &lt;code&gt;&lt;a href=&quot;core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; から埋め込みビューを挿入します。</target>
        </trans-unit>
        <trans-unit id="f7a13f1a4948982fb94e88aa36e8881e135f85a8" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;*ngFor&lt;/code&gt;</source>
          <target state="translated">内側 &lt;code&gt;*ngFor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19ed5cba849af683656b54b43049a241ffe5b0d8" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;NgSwitch&lt;/code&gt; directives</source>
          <target state="translated">&lt;code&gt;NgSwitch&lt;/code&gt; ディレクティブの内部</target>
        </trans-unit>
        <trans-unit id="255b0977970291621f43e1151716c4e23e21af87" translate="yes" xml:space="preserve">
          <source>Inside an AngularJS component's controller we can get hold of the downgraded service via the name we gave when downgrading.</source>
          <target state="translated">AngularJSコンポーネントのコントローラの内部では、ダウングレード時に付けた名前を使ってダウングレードされたサービスを取得することができます。</target>
        </trans-unit>
        <trans-unit id="072282cc9231ad60c9cc9690bf8418d6381ccca7" translate="yes" xml:space="preserve">
          <source>Inside that directory four files are generated:</source>
          <target state="translated">そのディレクトリの中には、4つのファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="6d5ecf03917471adf142cf23f4f2c3c4b339b21a" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;src/&lt;/code&gt; folder, the &lt;code&gt;app/&lt;/code&gt; folder contains your project's logic and data. Angular components, templates, and styles go here.</source>
          <target state="translated">内部 &lt;code&gt;src/&lt;/code&gt; フォルダ、 &lt;code&gt;app/&lt;/code&gt; フォルダは、プロジェクトのロジックとデータが含まれています。Angularコンポーネント、テンプレート、スタイルはここにあります。</target>
        </trans-unit>
        <trans-unit id="43dc34d6ca14b24f422ae821aed69fec4d0746ee" translate="yes" xml:space="preserve">
          <source>Inside the feature module</source>
          <target state="translated">機能モジュールの内部</target>
        </trans-unit>
        <trans-unit id="99a0a59687e515effa9af831817de2a42be88bcb" translate="yes" xml:space="preserve">
          <source>Inside the interpolation expression, you flow the component's &lt;code&gt;birthday&lt;/code&gt; value through the &lt;a href=&quot;template-syntax#pipe&quot;&gt;pipe operator&lt;/a&gt; ( | ) to the &lt;a href=&quot;../api/common/datepipe&quot;&gt;Date pipe&lt;/a&gt; function on the right. All pipes work this way.</source>
          <target state="translated">補間式の内部では、コンポーネントの &lt;code&gt;birthday&lt;/code&gt; 値を&lt;a href=&quot;template-syntax#pipe&quot;&gt;パイプ演算子&lt;/a&gt;（|）を介して右側の&lt;a href=&quot;../api/common/datepipe&quot;&gt;日付パイプ&lt;/a&gt;関数に流します。すべてのパイプがこのように機能します。</target>
        </trans-unit>
        <trans-unit id="df4011fe1a09f1043a4b2b06cd1697fa041ae820" translate="yes" xml:space="preserve">
          <source>Inspect the bundles</source>
          <target state="translated">束を点検する</target>
        </trans-unit>
        <trans-unit id="215770189e6d0e21c2e4dcd73cf798410232e895" translate="yes" xml:space="preserve">
          <source>Inspect the router's configuration</source>
          <target state="translated">ルータの設定を調べる</target>
        </trans-unit>
        <trans-unit id="f5dd0a6a7ea6173ab33b717cf0e2c38499a6b62a" translate="yes" xml:space="preserve">
          <source>Inspecting generated CSS</source>
          <target state="translated">生成されたCSSの検査</target>
        </trans-unit>
        <trans-unit id="00f4891662ba21393eafa47f4ff9e723df6085f7" translate="yes" xml:space="preserve">
          <source>Inspecting the element in the browser tools reveals that the &lt;em&gt;name&lt;/em&gt; input box is &lt;em&gt;no longer pristine&lt;/em&gt;. The form remembers that you entered a name before clicking &lt;em&gt;New Hero&lt;/em&gt;. Replacing the hero object &lt;em&gt;did not restore the pristine state&lt;/em&gt; of the form controls.</source>
          <target state="translated">ブラウザツールで要素を調べると、&lt;em&gt;名前&lt;/em&gt;入力ボックスが&lt;em&gt;元の状態で&lt;/em&gt;は&lt;em&gt;なくなっ&lt;/em&gt;ていることがわかります。フォームには、[ &lt;em&gt;新しいヒーロー&lt;/em&gt; ]をクリックする前に名前を入力したことが記憶されています。ヒーローオブジェクトを置き換えても、フォームコントロールの&lt;em&gt;元の状態&lt;/em&gt;は&lt;em&gt;復元されませんでした&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3cffd5bd9bd048669135ad23ec9b71ceb62833ce" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://firebase.google.com/docs/cli&quot;&gt;Firebase CLI&lt;/a&gt; globally using &lt;code&gt;npm install -g firebase-tools&lt;/code&gt;.</source>
          <target state="translated">インストール&lt;a href=&quot;https://firebase.google.com/docs/cli&quot;&gt;Firebase CLIを&lt;/a&gt;グローバルで使用して &lt;code&gt;npm install -g firebase-tools&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="767d840fb58485232878c237b7ed2fe6e569ced7" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;fs-extra&lt;/code&gt; via &lt;code&gt;npm install fs-extra --save-dev&lt;/code&gt; for better file copying, and change &lt;code&gt;copy-dist-files.js&lt;/code&gt; to the following:</source>
          <target state="translated">&lt;code&gt;npm install fs-extra --save-dev&lt;/code&gt; を使用して &lt;code&gt;fs-extra&lt;/code&gt; をインストールし、ファイルのコピーを改善し、 &lt;code&gt;copy-dist-files.js&lt;/code&gt; を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="2b5240a912c78956650075c76cef901344fb7d53" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;source-map-explorer&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;source-map-explorer&lt;/code&gt; をインストールします。</target>
        </trans-unit>
        <trans-unit id="5722ef718aa35b09e478fcff4fbda0f369c92662" translate="yes" xml:space="preserve">
          <source>Install &lt;strong&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&amp;reg; and npm&lt;/a&gt;&lt;/strong&gt; if they are not already on your machine. See &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt; for supported versions and instructions.</source>
          <target state="translated">マシンにまだない場合は、&lt;strong&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&amp;reg;とnpm&lt;/a&gt;&lt;/strong&gt;をインストールします。サポートされているバージョンと手順については、&lt;a href=&quot;setup-local&quot;&gt;ローカル環境のセットアップ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8d135e6ccd34e326cce716adb2bf33aeca9a237" translate="yes" xml:space="preserve">
          <source>Install Angular into the project, along with the SystemJS module loader. Take a look at the results of the &lt;a href=&quot;upgrade-setup&quot;&gt;upgrade setup instructions&lt;/a&gt; and get the following configurations from there:</source>
          <target state="translated">AngularをSystemJSモジュールローダーと共にプロジェクトにインストールします。&lt;a href=&quot;upgrade-setup&quot;&gt;アップグレード設定手順の&lt;/a&gt;結果を見て、そこから次の構成を取得します。</target>
        </trans-unit>
        <trans-unit id="1261f2c456b1f62133aa270d8e5fd5d048b8b664" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;firebase-tools&lt;/code&gt; CLI that will handle your deployment using &lt;code&gt;npm install -g firebase-tools&lt;/code&gt;.</source>
          <target state="translated">インストール &lt;code&gt;firebase-tools&lt;/code&gt; 使用して展開を処理するCLI &lt;code&gt;npm install -g firebase-tools&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd383d8abcaf9309b3e8d4c4392877db6730239a" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;upgrade&lt;/code&gt; package via &lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; and add a mapping for the &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; を使用して &lt;code&gt;upgrade&lt;/code&gt; パッケージをインストールし、 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; パッケージのマッピングを追加します。</target>
        </trans-unit>
        <trans-unit id="2c6ba9043f36b22f823292eb108df95f5f18e948" translate="yes" xml:space="preserve">
          <source>Install the Angular CLI</source>
          <target state="translated">Angular CLIをインストールする</target>
        </trans-unit>
        <trans-unit id="987677d76fa5c1deda62223710a489453421d4ae" translate="yes" xml:space="preserve">
          <source>Install the Angular CLI globally.</source>
          <target state="translated">Angular CLIをグローバルにインストールします。</target>
        </trans-unit>
        <trans-unit id="6a32adb90b36db0ed2141c3193f082788870e5bd" translate="yes" xml:space="preserve">
          <source>Install the Angular CLI.</source>
          <target state="translated">Angular CLIをインストールします。</target>
        </trans-unit>
        <trans-unit id="bdcb3dfef60b666573c8ce1ed8b494f2716b38c6" translate="yes" xml:space="preserve">
          <source>Install the Angular Language Service package in the same location:</source>
          <target state="translated">Angular Language Serviceパッケージを同じ場所にインストールします。</target>
        </trans-unit>
        <trans-unit id="9d42883b764f1c8c553d34790e6e538c26173f08" translate="yes" xml:space="preserve">
          <source>Install the CLI using the &lt;code&gt;npm&lt;/code&gt; package manager:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; パッケージマネージャーを使用してCLIをインストールします。</target>
        </trans-unit>
        <trans-unit id="8a392da3b3f2f11041c5fe8719aff8e6bcc76e63" translate="yes" xml:space="preserve">
          <source>Install the In-memory Web API package from npm with the following command:</source>
          <target state="translated">npmからIn-memory Web APIパッケージを以下のコマンドでインストールします。</target>
        </trans-unit>
        <trans-unit id="6a2e11d433615c4e688e8c2e1a2f370f9f882859" translate="yes" xml:space="preserve">
          <source>Install the latest version of TypeScript in a local &lt;code&gt;node_modules&lt;/code&gt; directory:</source>
          <target state="translated">TypeScriptの最新バージョンをローカルの &lt;code&gt;node_modules&lt;/code&gt; ディレクトリにインストールします。</target>
        </trans-unit>
        <trans-unit id="a55b0d6eaf5833f9d1d83c86418e84d35b30f379" translate="yes" xml:space="preserve">
          <source>Install type definitions for the existing libraries that you're using but that don't come with prepackaged types: AngularJS and the Jasmine unit test framework.</source>
          <target state="translated">使用しているがパッケージ化された型が付属していない既存のライブラリの型定義をインストールします。AngularJSとJasmineのユニットテストフレームワークです。</target>
        </trans-unit>
        <trans-unit id="d251edf4bd4d2213540b80ec0286e5d42780e1b1" translate="yes" xml:space="preserve">
          <source>Install type definitions for the existing libraries that you're using but that don't come with prepackaged types: AngularJS, AngularJS Material, and the Jasmine unit test framework.</source>
          <target state="translated">使用しているがパッケージ化された型が付属していない既存のライブラリの型定義をインストールします。AngularJS、AngularJS Material、Jasmineユニットテストフレームワークです。</target>
        </trans-unit>
        <trans-unit id="007650eba9764fc0e78e4bc1bd31b1198fb68fbf" translate="yes" xml:space="preserve">
          <source>Installable typings files</source>
          <target state="translated">インストール可能なタイピングファイル</target>
        </trans-unit>
        <trans-unit id="590df37bbf3a109889319af6d9048be9a71e39d5" translate="yes" xml:space="preserve">
          <source>Installing Angular</source>
          <target state="translated">Angularのインストール</target>
        </trans-unit>
        <trans-unit id="93c51dd01f96d8f057ca0640853a63493a184144" translate="yes" xml:space="preserve">
          <source>Installing Angular CLI</source>
          <target state="translated">Angular CLIのインストール</target>
        </trans-unit>
        <trans-unit id="29ff101f42f25faf7396162f5dcaed389e809afb" translate="yes" xml:space="preserve">
          <source>Installing libraries</source>
          <target state="translated">ライブラリのインストール</target>
        </trans-unit>
        <trans-unit id="943d24405b833810f0fc6a9ac5fedf1d6c7c1920" translate="yes" xml:space="preserve">
          <source>Installing the Angular service worker is as simple as including an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. In addition to registering the Angular service worker with the browser, this also makes a few services available for injection which interact with the service worker and can be used to control it. For example, an application can ask to be notified when a new update becomes available, or an application can ask the service worker to check the server for available updates.</source>
          <target state="translated">Angular Service Workerのインストールは、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を含めるのと同じくらい簡単です。Angular Service Workerをブラウザーに登録することに加えて、これにより、Service Workerと対話し、それを制御するために使用できるいくつかのサービスをインジェクションに利用できるようになります。たとえば、アプリケーションは、新しい更新が利用可能になったときに通知を受けるように要求したり、アプリケーションを使用できるようにサーバーをチェックするようにService Workerに要求したりできます。</target>
        </trans-unit>
        <trans-unit id="35ca16d7e501ce1fe7afeb879255850001c28e41" translate="yes" xml:space="preserve">
          <source>Installs icon files to support the installed Progressive Web App (PWA).</source>
          <target state="translated">インストールされたProgressive Web App (PWA)をサポートするためのアイコンファイルをインストールします。</target>
        </trans-unit>
        <trans-unit id="20e716e0358bb09e7445aa9236e78946959e553b" translate="yes" xml:space="preserve">
          <source>Instantiate a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, with an initial value.</source>
          <target state="translated">初期値を使用して、 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="38aa8686f3352f5834571410dfa3840955e59d4b" translate="yes" xml:space="preserve">
          <source>Instantiates a single &lt;a href=&quot;../core/component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt; type and inserts its Host View into current View. &lt;code&gt;&lt;a href=&quot;ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; provides a declarative approach for dynamic component creation.</source>
          <target state="translated">単一の&lt;a href=&quot;../core/component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;タイプをインスタンス化し、そのホストビューを現在のビューに挿入します。 &lt;code&gt;&lt;a href=&quot;ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; は、動的コンポーネント作成のための宣言型アプローチを提供します。</target>
        </trans-unit>
        <trans-unit id="38063d7822dcc8a96973053e6ba2f0de5af9a983" translate="yes" xml:space="preserve">
          <source>Instantiates a single &lt;a href=&quot;core/component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt; type and inserts its Host View into current View. &lt;code&gt;&lt;a href=&quot;common/ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; provides a declarative approach for dynamic component creation.</source>
          <target state="translated">単一の&lt;a href=&quot;core/component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;タイプをインスタンス化し、そのホストビューを現在のビューに挿入します。 &lt;code&gt;&lt;a href=&quot;common/ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; は、動的コンポーネント作成のための宣言型アプローチを提供します。</target>
        </trans-unit>
        <trans-unit id="052c0bf072f0f51a894d30e77a4f689971e12fb7" translate="yes" xml:space="preserve">
          <source>Instantiates a single component and inserts its host view into this container.</source>
          <target state="translated">単一のコンポーネントをインスタンス化し、そのホストビューをこのコンテナに挿入します。</target>
        </trans-unit>
        <trans-unit id="a4ad199a6b556b860c928a9e27b923ade54a8ac0" translate="yes" xml:space="preserve">
          <source>Instantiates an embedded view and inserts it into this container.</source>
          <target state="translated">埋め込みビューのインスタンスを作成し、このコンテナに挿入します。</target>
        </trans-unit>
        <trans-unit id="f0776be631be3564e94e31e5dc32990150beac7b" translate="yes" xml:space="preserve">
          <source>Instantiates an embedded view based on this template, and attaches it to the view container.</source>
          <target state="translated">このテンプレートに基づいて埋め込まれたビューをインスタンス化し、ビューコンテナにアタッチします。</target>
        </trans-unit>
        <trans-unit id="786c58358d9228836c715a34ab083c47efb00357" translate="yes" xml:space="preserve">
          <source>Instantiates an object using a resolved provider in the context of the injector.</source>
          <target state="translated">インジェクタのコンテキストで、解決済みのプロバイダを使用してオブジェクトのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="a0357399dd1a1a04fdeed5dfc91f8d7b7be0a893" translate="yes" xml:space="preserve">
          <source>Instantiating the Angular module on-demand</source>
          <target state="translated">オンデマンドでAngularモジュールをインスタンス化する</target>
        </trans-unit>
        <trans-unit id="c4d60afbec7f43d48d04b31d9b35a7e492a2e8d9" translate="yes" xml:space="preserve">
          <source>Instead of adding the &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; route, define a &lt;code&gt;wildcard&lt;/code&gt; route and have it navigate to a &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; ルートを追加する代わりに、 &lt;code&gt;wildcard&lt;/code&gt; ルートを定義して、 &lt;code&gt;PageNotFoundComponent&lt;/code&gt; に移動します。</target>
        </trans-unit>
        <trans-unit id="43fb80c7057cc5fd575a66171218e4c5dcaa2c7b" translate="yes" xml:space="preserve">
          <source>Instead of adding the &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; route, define a &lt;code&gt;wildcard&lt;/code&gt; route instead and have it navigate to a simple &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; ルートを追加する代わりに、代わりに &lt;code&gt;wildcard&lt;/code&gt; ルートを定義して、単純な &lt;code&gt;PageNotFoundComponent&lt;/code&gt; に移動するようにします。</target>
        </trans-unit>
        <trans-unit id="4545e903884ce10d8860ee7224edb38d91aba382" translate="yes" xml:space="preserve">
          <source>Instead of defining all member classes in one giant file as in a JavaScript module, you list the module's classes in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">JavaScriptモジュールのように1つの巨大なファイルですべてのメンバークラスを定義する代わりに、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; リストにモジュールのクラスをリストします。</target>
        </trans-unit>
        <trans-unit id="bcea27d4a4ea890a7b5b46266c065c932d9159ff" translate="yes" xml:space="preserve">
          <source>Instead of handling the error directly, it returns an error handler function to &lt;code&gt;catchError&lt;/code&gt; that it has configured with both the name of the operation that failed and a safe return value.</source>
          <target state="translated">エラーを直接処理するのではなく、失敗した操作の名前と安全な戻り値の両方で構成した &lt;code&gt;catchError&lt;/code&gt; にエラーハンドラー関数を返します。</target>
        </trans-unit>
        <trans-unit id="2ced3569fe32156e54433459c9f7274b0cae7ecf" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorators to declare inputs and outputs, you can identify members in the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; arrays of the directive metadata, as in this example:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; デコレーターを使用して入力と出力を宣言する代わりに、次の例のように、ディレクティブメタデータの &lt;code&gt;inputs&lt;/code&gt; 配列と &lt;code&gt;outputs&lt;/code&gt; 配列のメンバーを識別できます。</target>
        </trans-unit>
        <trans-unit id="41c9b9e64f30d6ebdd7548f0f306b5e519819b75" translate="yes" xml:space="preserve">
          <source>Instead they return observables of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">代わりに、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; オブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="ce684a983c63ce2f1f454c04e646d6d8a3bc7367" translate="yes" xml:space="preserve">
          <source>Instead you can mock the dependency, use a dummy value, or create a &lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Spies&quot;&gt;spy&lt;/a&gt; on the pertinent service method.</source>
          <target state="translated">代わりに、依存関係を模擬したり、ダミー値を使用したり、関連するサービスメソッドに&lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Spies&quot;&gt;スパイ&lt;/a&gt;を作成したりできます。</target>
        </trans-unit>
        <trans-unit id="461b96eba4f5a430cd543bbe85601a5e70ae7271" translate="yes" xml:space="preserve">
          <source>Instead you'll write a &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;()&lt;/code&gt; guard method to redirect anonymous users to the login page when they try to enter the admin area.</source>
          <target state="translated">代わりに、 &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;()&lt;/code&gt; ガードメソッドを記述して、匿名ユーザーが管理領域に入ろうとしたときにログインページにリダイレクトするようにします。</target>
        </trans-unit>
        <trans-unit id="d3964f48718ba9278c74706508750ce239c41a70" translate="yes" xml:space="preserve">
          <source>Instead, &lt;code&gt;LibHeaderComponent&lt;/code&gt; itself implements the abstract &lt;code&gt;LibHeaderToken&lt;/code&gt; class. You can safely use that token as the provider in the component definition, allowing Angular to correctly inject the concrete type.</source>
          <target state="translated">代わりに、 &lt;code&gt;LibHeaderComponent&lt;/code&gt; 自体が抽象 &lt;code&gt;LibHeaderToken&lt;/code&gt; クラスを実装します。そのトークンをコンポーネント定義のプロバイダーとして安全に使用できるため、Angularは具象型を正しく挿入できます。</target>
        </trans-unit>
        <trans-unit id="49a4d7b52c2322fe3ec1102b059fd40a0edaba63" translate="yes" xml:space="preserve">
          <source>Instead, call &lt;code&gt;getHeroes()&lt;/code&gt; inside the &lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;&lt;em&gt;ngOnInit lifecycle hook&lt;/em&gt;&lt;/a&gt; and let Angular call &lt;code&gt;ngOnInit()&lt;/code&gt; at an appropriate time &lt;em&gt;after&lt;/em&gt; constructing a &lt;code&gt;HeroesComponent&lt;/code&gt; instance.</source>
          <target state="translated">代わりに、コール &lt;code&gt;getHeroes()&lt;/code&gt; 内の&lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;&lt;em&gt;ngOnInitライフサイクルフック&lt;/em&gt;&lt;/a&gt;と角呼び出してみましょう &lt;code&gt;ngOnInit()&lt;/code&gt; 適切な時間に&lt;em&gt;した後&lt;/em&gt;構築 &lt;code&gt;HeroesComponent&lt;/code&gt; のインスタンスを。</target>
        </trans-unit>
        <trans-unit id="fdd12a96a1f80e924cc94c2ae62043da14036314" translate="yes" xml:space="preserve">
          <source>Instead, download typings for your library (&lt;code&gt;npm install @types/jquery&lt;/code&gt;) and follow the library installation steps. This gives you access to the global variables exposed by that library.</source>
          <target state="translated">代わりに、ライブラリの &lt;code&gt;npm install @types/jquery&lt;/code&gt; ダウンロードし（npm install @ types / jquery）、ライブラリのインストール手順に従ってください。これにより、そのライブラリによって公開されるグローバル変数にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4b0bf66c25d9781be7cefa931b18abbac35f3e32" translate="yes" xml:space="preserve">
          <source>Instead, each &lt;code&gt;HeroBioComponent&lt;/code&gt; gets its &lt;em&gt;own&lt;/em&gt;&lt;code&gt;HeroCacheService&lt;/code&gt; instance by listing &lt;code&gt;HeroCacheService&lt;/code&gt; in its metadata &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">代わりに、各 &lt;code&gt;HeroBioComponent&lt;/code&gt; は、 &lt;code&gt;HeroCacheService&lt;/code&gt; をメタデータ &lt;code&gt;providers&lt;/code&gt; 配列にリストすることにより、&lt;em&gt;独自の&lt;/em&gt; &lt;code&gt;HeroCacheService&lt;/code&gt; インスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="0d305901f6c4d49bcedd325e78ae1b0860a4fb31" translate="yes" xml:space="preserve">
          <source>Instead, the &lt;code&gt;ngOnInit()&lt;/code&gt; method pipes the &lt;code&gt;searchTerms&lt;/code&gt; observable through a sequence of RxJS operators that reduce the number of calls to the &lt;code&gt;searchHeroes()&lt;/code&gt;, ultimately returning an observable of timely hero search results (each a &lt;code&gt;Hero[]&lt;/code&gt;).</source>
          <target state="translated">代わりに、 &lt;code&gt;ngOnInit()&lt;/code&gt; メソッドパイプ &lt;code&gt;searchTerms&lt;/code&gt; へのコールの数減らすRxJSオペレータのシーケンスを介して観察 &lt;code&gt;searchHeroes()&lt;/code&gt; 、最終的にタイムリー主人公検索結果の観察を返す（各 &lt;code&gt;Hero[]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3d9ebd1ce2ebf177d0250948ce46e33ab5af6b38" translate="yes" xml:space="preserve">
          <source>Instead, the compiler adopts a recursive strategy that generates code only for the components you use.</source>
          <target state="translated">代わりに、コンパイラは、使用するコンポーネントのためだけにコードを生成する再帰的な戦略を採用しています。</target>
        </trans-unit>
        <trans-unit id="8bd754a169b9bacb9390642cdd317359fddea194" translate="yes" xml:space="preserve">
          <source>Instead, the injector will begin at the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;ElementInjector&lt;/code&gt;. Remember that the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class provides the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with a value of 🐶 (puppy):</source>
          <target state="translated">代わりに、インジェクターは &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;ElementInjector&lt;/code&gt; から始まります。ことを忘れないでください &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; クラスが提供する &lt;code&gt;AnimalService&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の 🐶（子犬）の値を持つ配列を：</target>
        </trans-unit>
        <trans-unit id="2fc262139e9da7fc5a46366f8088811d41bc2d11" translate="yes" xml:space="preserve">
          <source>Instead, the injector will begin at the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;ElementInjector&lt;/code&gt;. Remember that the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class provides the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;viewProviders&lt;/code&gt; array with a value of 🐶 (puppy):</source>
          <target state="translated">代わりに、インジェクターは &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;ElementInjector&lt;/code&gt; から始まります。ことを忘れないでください &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; クラスが提供する &lt;code&gt;AnimalService&lt;/code&gt; で &lt;code&gt;viewProviders&lt;/code&gt; の🐶（子犬）の値を持つ配列を：</target>
        </trans-unit>
        <trans-unit id="17aa745e67d203c05d76b91653148f77342ccc8f" translate="yes" xml:space="preserve">
          <source>Instead, update the empty path route in &lt;code&gt;app-routing.module.ts&lt;/code&gt; to redirect to &lt;code&gt;/superheroes&lt;/code&gt;.</source>
          <target state="translated">代わりに、 &lt;code&gt;app-routing.module.ts&lt;/code&gt; の空のパスルートを更新して、 &lt;code&gt;/superheroes&lt;/code&gt; にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="f4d21a07e95b9953380838df336b7bcbf54fa876" translate="yes" xml:space="preserve">
          <source>Instead, you can provide the &lt;code&gt;VillainsService&lt;/code&gt; in the &lt;code&gt;providers&lt;/code&gt; metadata of the &lt;code&gt;VillainsListComponent&lt;/code&gt; like this:</source>
          <target state="translated">代わりに、あなたが提供することができます &lt;code&gt;VillainsService&lt;/code&gt; における &lt;code&gt;providers&lt;/code&gt; のメタデータ &lt;code&gt;VillainsListComponent&lt;/code&gt; このように：</target>
        </trans-unit>
        <trans-unit id="551fe93146e649cede5e84c7c64fdd5129d01274" translate="yes" xml:space="preserve">
          <source>Instead, you need a way to load a new component without a fixed reference to the component in the ad banner's template.</source>
          <target state="translated">代わりに、広告バナーのテンプレート内のコンポーネントを固定参照せずに新しいコンポーネントをロードする方法が必要です。</target>
        </trans-unit>
        <trans-unit id="3cd340c809823308a4cc4e69ad216846bec763e0" translate="yes" xml:space="preserve">
          <source>Instead, you'd use property binding and write it like this:</source>
          <target state="translated">代わりにプロパティバインディングを使って、このように書きます。</target>
        </trans-unit>
        <trans-unit id="935c5dd61b56d9204ed4186be8b2db4497e1e865" translate="yes" xml:space="preserve">
          <source>Integrate routing with your app</source>
          <target state="translated">ルーティングをアプリに統合</target>
        </trans-unit>
        <trans-unit id="5a59fb5b70ad75f96031a69bba18f29e2692a460" translate="yes" xml:space="preserve">
          <source>Integrating with the CLI</source>
          <target state="translated">CLIとの統合</target>
        </trans-unit>
        <trans-unit id="5613136c801d2ad2f323cc7ab35810249066fe2b" translate="yes" xml:space="preserve">
          <source>Integrating with the CLI using code-generation schematics</source>
          <target state="translated">コード生成回路図を使用したCLIとの統合</target>
        </trans-unit>
        <trans-unit id="3bd6ede907470fb16d3cec8333066bb3ecc44047" translate="yes" xml:space="preserve">
          <source>Intercept input property changes with &lt;code&gt;ngOnChanges()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; による入力プロパティの変更のインターセプト</target>
        </trans-unit>
        <trans-unit id="fd68d13ca9ca2470bae05c55573d064542db92fb" translate="yes" xml:space="preserve">
          <source>Intercept input property changes with a setter</source>
          <target state="translated">入力プロパティの変更をセッターでインターセプトする</target>
        </trans-unit>
        <trans-unit id="f77e1393f432e2814c4e2431fb8336cf5ac39ef5" translate="yes" xml:space="preserve">
          <source>Intercepting requests and responses</source>
          <target state="translated">リクエストとレスポンスの傍受</target>
        </trans-unit>
        <trans-unit id="763892b6e7a2d1ac84d61ec316cc6bf8b1d9cc3e" translate="yes" xml:space="preserve">
          <source>Interceptor order</source>
          <target state="translated">迎撃命令</target>
        </trans-unit>
        <trans-unit id="49b669e2ea2af9c86b0cdbcb202a2a4cee9dafbb" translate="yes" xml:space="preserve">
          <source>Interceptors can handle requests by themselves, without forwarding to &lt;code&gt;next.handle()&lt;/code&gt;.</source>
          <target state="translated">インターセプターは、 &lt;code&gt;next.handle()&lt;/code&gt; に転送せずに、自分でリクエストを処理できます。</target>
        </trans-unit>
        <trans-unit id="46734f11cb3498f3b31bc09aa4d5892c9572c37b" translate="yes" xml:space="preserve">
          <source>Interceptors can perform a variety of &lt;em&gt;implicit&lt;/em&gt; tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response.</source>
          <target state="translated">インターセプターは、すべてのHTTP要求/応答に対して、認証からロギングまで、ルーチンの標準的な方法でさまざまな&lt;em&gt;暗黙的&lt;/em&gt;なタスクを実行できます。</target>
        </trans-unit>
        <trans-unit id="78777651ce595557401c9f74bf00aced47fcba6c" translate="yes" xml:space="preserve">
          <source>Interceptors sit between the &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; interface and the &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">インターセプターは &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; インターフェースと &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; の間にあります。</target>
        </trans-unit>
        <trans-unit id="f1e0f70c8d07051766080d71ba2f745bf68b9ae3" translate="yes" xml:space="preserve">
          <source>Intercepts and handles an &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; をインターセプトして処理します。</target>
        </trans-unit>
        <trans-unit id="ee4ce4943c7c8f62cc7efe1749d8027783f80f63" translate="yes" xml:space="preserve">
          <source>Intercepts and handles an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; をインターセプトして処理します。</target>
        </trans-unit>
        <trans-unit id="51feddee76f6ae2ad0215641743746a9f5b45fb4" translate="yes" xml:space="preserve">
          <source>Interface for options provided to an &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; に提供されるオプションのインターフェース。</target>
        </trans-unit>
        <trans-unit id="2fcbaf5b57a8ead29b181bc23a1d29fcef1a8f14" translate="yes" xml:space="preserve">
          <source>Interface for options provided to an &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; に提供されるオプションのインターフェース。</target>
        </trans-unit>
        <trans-unit id="c3789cc9f6d7a24798ad678cfda27d1e007aa43c" translate="yes" xml:space="preserve">
          <source>Interface for the events emitted through the NgElementStrategy.</source>
          <target state="translated">NgElementStrategy によって発行されるイベントのためのインターフェイス。</target>
        </trans-unit>
        <trans-unit id="3deee779f810298f9a0e89f2ff8482ea01f5a511" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a child route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation is cancelled and a new navigation begins to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">子ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションがキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="bc42104552e7bf76c3652dc332a30f2a41ab427f" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a child route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation is cancelled and a new navigation begins to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">子ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションがキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="618b7ef5256168d128b4d93fe5abd44e6760f4d3" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a child route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">子ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返した場合、ナビゲーションは続行されます。いずれかのガードが &lt;code&gt;false&lt;/code&gt; を返した場合、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返した場合、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="ff140188a7896c0f0df7b9ddc4cf62e57c908572" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a child route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">子ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返した場合、ナビゲーションは続行されます。いずれかのガードが &lt;code&gt;false&lt;/code&gt; を返した場合、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返した場合、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="5f9ec727fd5f67833f4f7d28c1b4a64a95ad822a" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, the current navigation is cancelled and a new navigation begins to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションがキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="d370cd413b65e79295cc3a38df96afee0599824f" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, the current navigation is cancelled and a new navigation begins to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションがキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="1551571b2aa685eaa6e8ab4305875c5d8fb03db8" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返した場合、ナビゲーションは続行されます。いずれかのガードが &lt;code&gt;false&lt;/code&gt; を返した場合、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返した場合、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="db6235325e50211534e110c30d230e1939bbd7e2" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートをアクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返した場合、ナビゲーションは続行されます。いずれかのガードが &lt;code&gt;false&lt;/code&gt; を返した場合、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返した場合、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="ff66dd9940e5fc1eaf1f9f31562fd3ffff52df63" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be deactivated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation is cancelled and a new navigation begins to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートを非アクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションがキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="b846a1dd4c0cda77778910c5d707df7a5a6026fd" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be deactivated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation is cancelled and a new navigation begins to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートを非アクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェイス。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションがキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="2ab6f18536cd13083f15ab9129ff97d10da6e8d6" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be deactivated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートを非アクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェース。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返した場合、ナビゲーションは続行されます。いずれかのガードが &lt;code&gt;false&lt;/code&gt; を返した場合、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返した場合、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="679e3b4aabe2bdba94497f1ab16312f39b501277" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be deactivated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">ルートを非アクティブ化できるかどうかを決定するガードとしてクラスが実装できるインターフェース。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返した場合、ナビゲーションは続行されます。いずれかのガードが &lt;code&gt;false&lt;/code&gt; を返した場合、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返した場合、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="c42293e0f6055cbed8f6ec3d952ba787d4b46e25" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if children can be loaded.</source>
          <target state="translated">子をロードできるかどうかを決めるガードになるようにクラスが実装できるインターフェース。</target>
        </trans-unit>
        <trans-unit id="f8b9288cc98a27c1da610942b0801f722868ae04" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if children can be loaded. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation is cancelled and a new navigation starts to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">子をロードできるかどうかを決定するガードとしてクラスが実装できるインターフェース。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="9ec3033b72314d711e1348f87c857ff9df7af33d" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if children can be loaded. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation continues. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation is cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation is cancelled and a new navigation starts to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">子をロードできるかどうかを決定するガードとしてクラスが実装できるインターフェース。すべてのガードが &lt;code&gt;true&lt;/code&gt; を返す場合、ナビゲーションは続行されます。ガードが &lt;code&gt;false&lt;/code&gt; を返すと、ナビゲーションはキャンセルされます。ガードが &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すと、現在のナビゲーションはキャンセルされ、ガードから返された &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; への新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="364f380bef9f10b167def7bdabd0691206b530fd" translate="yes" xml:space="preserve">
          <source>Interface that classes can implement to be a data provider. A data provider class can be used with the router to resolve data during navigation. The interface defines a &lt;code&gt;&lt;a href=&quot;../core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; method that will be invoked when the navigation starts. The router will then wait for the data to be resolved before the route is finally activated.</source>
          <target state="translated">クラスがデータプロバイダーになるために実装できるインターフェイス。データプロバイダークラスをルーターと共に使用して、ナビゲーション中にデータを解決できます。インターフェースは、ナビゲーションの開始時に呼び出される &lt;code&gt;&lt;a href=&quot;../core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。ルーターは、ルートが最終的にアクティブになる前に、データが解決されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="336ad0810efbe57a2c014e406a008686e9defe4c" translate="yes" xml:space="preserve">
          <source>Interface that classes can implement to be a data provider. A data provider class can be used with the router to resolve data during navigation. The interface defines a &lt;code&gt;&lt;a href=&quot;core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; method that will be invoked when the navigation starts. The router will then wait for the data to be resolved before the route is finally activated.</source>
          <target state="translated">クラスがデータプロバイダーになるために実装できるインターフェイス。データプロバイダークラスをルーターと共に使用して、ナビゲーション中にデータを解決できます。インターフェースは、ナビゲーションの開始時に呼び出される &lt;code&gt;&lt;a href=&quot;core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。ルーターは、ルートが最終的にアクティブになる前に、データが解決されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="c21234c017f5d910ba8b68062b70053a6f22de69" translate="yes" xml:space="preserve">
          <source>Interface that classes can implement to be a data provider. A data provider class can be used with the router to resolve data during navigation. The interface defines a &lt;code&gt;resolve()&lt;/code&gt; method that is invoked when the navigation starts. The router waits for the data to be resolved before the route is finally activated.</source>
          <target state="translated">クラスがデータプロバイダーになるために実装できるインターフェース。データプロバイダークラスをルーターで使用して、ナビゲーション中にデータを解決できます。インターフェイスは、ナビゲーションの開始時に呼び出される &lt;code&gt;resolve()&lt;/code&gt; メソッドを定義します。ルータは、ルートが最終的にアクティブ化される前に、データが解決されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="cd29d518f005626eb95c3c088e7f4c477fbfc0c8" translate="yes" xml:space="preserve">
          <source>Interfaces are optional (technically)</source>
          <target state="translated">インターフェースはオプションです(技術的には</target>
        </trans-unit>
        <trans-unit id="0876cab9619be6a4ff7f8271f44afd88e6881f3c" translate="yes" xml:space="preserve">
          <source>Internal reference to the view model value.</source>
          <target state="translated">ビューモデル値への内部参照。</target>
        </trans-unit>
        <trans-unit id="c8abcefa3f2571ad565289956a9b68baa5b5d92e" translate="yes" xml:space="preserve">
          <source>Internal.</source>
          <target state="translated">Internal.</target>
        </trans-unit>
        <trans-unit id="5fc8faa1decb29c0de03ec7af94ce77c99a7f168" translate="yes" xml:space="preserve">
          <source>Internally, Angular creates &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances and registers them with an &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive that Angular attached to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. Each &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; is registered under the name you assigned to the &lt;code&gt;name&lt;/code&gt; attribute. Read more in the previous section, &lt;a href=&quot;forms#ngForm&quot;&gt;The NgForm directive&lt;/a&gt;.</source>
          <target state="translated">内部的には、Angularは &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、Angularが &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグに付加した &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブにそれらを登録します。各 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;name&lt;/code&gt; 属性に割り当てた名前で登録されます。詳細については、前のセクション&lt;a href=&quot;forms#ngForm&quot;&gt;のNgFormディレクティブをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fbce7514dd339094119f9b2d11f6944248b678c0" translate="yes" xml:space="preserve">
          <source>Internally, Autoprefixer relies on a library called &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist&lt;/a&gt; to figure out which browsers to support with prefixing. Browserlist looks for configuration options in a &lt;code&gt;browserslist&lt;/code&gt; property of the package configuration file, or in a configuration file named &lt;code&gt;.browserslistrc&lt;/code&gt;. Autoprefixer looks for the &lt;code&gt;browserslist&lt;/code&gt; configuration when it prefixes your CSS.</source>
          <target state="translated">内部的には、Autoprefixerは&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist&lt;/a&gt;と呼ばれるライブラリに依存して、どのブラウザをプレフィックスでサポートするかを判断します。Browserlist は、パッケージ構成ファイルの &lt;code&gt;browserslist&lt;/code&gt; プロパティ、または &lt;code&gt;.browserslistrc&lt;/code&gt; という名前の構成ファイルで構成オプションを探します。Autoprefixerは、CSSにプレフィックスを付けるときに &lt;code&gt;browserslist&lt;/code&gt; 構成を探します。</target>
        </trans-unit>
        <trans-unit id="4a58c18b307abf758e113f2eeb5fbc842f890084" translate="yes" xml:space="preserve">
          <source>Internally, all static methods cover methods of the current runtime &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance, which is also returned by the &lt;code&gt;&lt;a href=&quot;../api/core/testing/gettestbed&quot;&gt;getTestBed&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">内部的には、すべての静的メソッドは、現在のランタイム &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インスタンスのメソッドをカバーしています。これは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/gettestbed&quot;&gt;getTestBed&lt;/a&gt;()&lt;/code&gt; 関数によっても返されます。</target>
        </trans-unit>
        <trans-unit id="7fc8aa8e4bf0323d00c15a7a4943933fbf6fb9ae" translate="yes" xml:space="preserve">
          <source>Internationalization (i18n)</source>
          <target state="translated">国際化(i18n</target>
        </trans-unit>
        <trans-unit id="507e49b9434f4f57a7db4cbad55a28939d060bc6" translate="yes" xml:space="preserve">
          <source>Internationalization (i18n) Guide</source>
          <target state="translated">国際化(i18n)ガイド</target>
        </trans-unit>
        <trans-unit id="2ceac5014bae5904c30ddb08d140fc4b7928f48a" translate="yes" xml:space="preserve">
          <source>Interpolated content is always escaped&amp;mdash;the HTML isn't interpreted and the browser displays angle brackets in the element's text content.</source>
          <target state="translated">補間されたコンテンツは常にエスケープされます。HTMLは解釈されず、ブラウザーは要素のテキストコンテンツに山括弧を表示します。</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="c0d5f0c6fbe15f854b359c7977dd0323a5c988dc" translate="yes" xml:space="preserve">
          <source>Interpolation &lt;code&gt;{{ }}&lt;/code&gt;</source>
          <target state="translated">補間 &lt;code&gt;{{ }}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15241bfb250242f27aea0edbf654c3c0b6eff9c1" translate="yes" xml:space="preserve">
          <source>Interpolation &lt;code&gt;{{...}}&lt;/code&gt;</source>
          <target state="translated">補間 &lt;code&gt;{{...}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cad50a4f2d79b7204d7fa4ee552feedad7652e19" translate="yes" xml:space="preserve">
          <source>Interpolation Property Attribute Class Style</source>
          <target state="translated">補間プロパティ 属性 クラス スタイル</target>
        </trans-unit>
        <trans-unit id="9ece64b7320504fa399841a6d62c9a3dbd7784b2" translate="yes" xml:space="preserve">
          <source>Interpolation allows you to incorporate calculated strings into the text between HTML element tags and within attribute assignments. Template expressions are what you use to calculate those strings.</source>
          <target state="translated">補間では、計算された文字列を HTML 要素タグの間や属性の割り当て内のテキストに組み込むことができます。テンプレート式は、これらの文字列を計算するために使用するものです。</target>
        </trans-unit>
        <trans-unit id="37649b57fe7cf149ac8228d3effb6bd49c8873d2" translate="yes" xml:space="preserve">
          <source>Interpolation and Template Expressions</source>
          <target state="translated">補間とテンプレート式</target>
        </trans-unit>
        <trans-unit id="3c8d084daa415eab3f33192cfd217ea5a72927e7" translate="yes" xml:space="preserve">
          <source>Interpolation and template expressions</source>
          <target state="translated">補間とテンプレート式</target>
        </trans-unit>
        <trans-unit id="3d349805b5ca7ad2d64bafc375f7ad1fb4256432" translate="yes" xml:space="preserve">
          <source>Interpolation handles the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags differently than property binding but both approaches render the content harmlessly. The following is the browser output of the &lt;code&gt;evilTitle&lt;/code&gt; examples.</source>
          <target state="translated">補間は &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグをプロパティバインディングとは異なる方法で処理しますが、どちらの方法でもコンテンツは無害にレンダリングされます。以下は &lt;code&gt;evilTitle&lt;/code&gt; の例のブラウザ出力です。</target>
        </trans-unit>
        <trans-unit id="782432f138e6c2551df031091e97964894c9f91b" translate="yes" xml:space="preserve">
          <source>Interpolation handles the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags differently than property binding, but both approaches render the content harmlessly. The following is the browser output of the sanitized &lt;code&gt;evilTitle&lt;/code&gt; example.</source>
          <target state="translated">補間は、プロパティバインディングとは異なる方法で &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを処理しますが、どちらのアプローチでもコンテンツを無害にします。以下は、 &lt;code&gt;evilTitle&lt;/code&gt; されたevilTitleの例のブラウザー出力です。</target>
        </trans-unit>
        <trans-unit id="4d3d39599f1e253e5d15323a3b40cf507133a6e4" translate="yes" xml:space="preserve">
          <source>Interpolation is a convenient alternative to property binding in many cases. When rendering data values as strings, there is no technical reason to prefer one form to the other, though readability tends to favor interpolation. However, &lt;em&gt;when setting an element property to a non-string data value, you must use property binding&lt;/em&gt;.</source>
          <target state="translated">多くの場合、補間はプロパティバインディングの便利な代替手段です。データ値を文字列としてレンダリングする場合、読みやすさは補間を優先する傾向がありますが、1つの形式を他の形式よりも優先する技術的な理由はありません。ただし、&lt;em&gt;要素のプロパティを文字列以外のデータ値に設定する場合は、プロパティバインディングを使用する必要があります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7a70d18508c1f3509d81cd385ef5f470b52a349a" translate="yes" xml:space="preserve">
          <source>Interpolation refers to embedding expressions into marked up text. By default, interpolation uses as its delimiter the double curly braces, &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">補間とは、マークアップされたテキストに式を埋め込むことです。デフォルトでは、補間は区切り文字として二重中括弧 &lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="18549284fbd31fe50d2af013bc5f2f807b255c5d" translate="yes" xml:space="preserve">
          <source>Interpolation: &lt;code&gt;&amp;lt;comp greeting=&quot;Hello {{name}}!&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">補間： &lt;code&gt;&amp;lt;comp greeting=&quot;Hello {{name}}!&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="148008a6c97111d9a4baac98fac041378bd84ebd" translate="yes" xml:space="preserve">
          <source>Intl</source>
          <target state="translated">Intl</target>
        </trans-unit>
        <trans-unit id="b3e69f2a42a9ebe8a619598951f3e7f96f8435fa" translate="yes" xml:space="preserve">
          <source>Intl API</source>
          <target state="translated">国際API</target>
        </trans-unit>
        <trans-unit id="e11d234c418f535d475bc472816ff39f325d47a4" translate="yes" xml:space="preserve">
          <source>Introducing Angular pipes, a way to write display-value transformations that you can declare in your HTML.</source>
          <target state="translated">HTMLで宣言できる表示値変換の書き方「Angular pipes」を紹介します。</target>
        </trans-unit>
        <trans-unit id="39324c26031e2c93ca39870003886cbe2b2e25bf" translate="yes" xml:space="preserve">
          <source>Introducing another container element&amp;mdash;typically a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&amp;mdash;to group the elements under a single &lt;em&gt;root&lt;/em&gt; is usually harmless. &lt;em&gt;Usually&lt;/em&gt; ... but not &lt;em&gt;always&lt;/em&gt;.</source>
          <target state="translated">単一の&lt;em&gt;ルートの&lt;/em&gt;下に要素をグループ化するために別のコンテナー要素（通常は &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; )を導入しても、通常は無害です。&lt;em&gt;通常&lt;/em&gt; ... &lt;em&gt;常にで&lt;/em&gt;はありませ&lt;em&gt;ん&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e4f43f29bd2dc8b1b3dcc99d7b8cc0944588ec40" translate="yes" xml:space="preserve">
          <source>Introduction to Angular animations</source>
          <target state="translated">Angularアニメーション入門</target>
        </trans-unit>
        <trans-unit id="77fdbd720d56c685098d00d0ba39402f14f89357" translate="yes" xml:space="preserve">
          <source>Introduction to Angular concepts</source>
          <target state="translated">Angularの概念の紹介</target>
        </trans-unit>
        <trans-unit id="7a88af9c7af43c51b51f00d5d0cbef442684cf51" translate="yes" xml:space="preserve">
          <source>Introduction to Components</source>
          <target state="translated">コンポーネントの紹介</target>
        </trans-unit>
        <trans-unit id="037e78ee72bb786b3b99727257ded097b29ed22c" translate="yes" xml:space="preserve">
          <source>Introduction to Modules</source>
          <target state="translated">モジュールの紹介</target>
        </trans-unit>
        <trans-unit id="77695aa23083353741cc8e577e0d1f52b59146ec" translate="yes" xml:space="preserve">
          <source>Introduction to Services and DI</source>
          <target state="translated">サービス紹介とDI</target>
        </trans-unit>
        <trans-unit id="1891a5d7cdaa920a5fcf4904feb061ee52d40600" translate="yes" xml:space="preserve">
          <source>Introduction to Template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームの紹介</target>
        </trans-unit>
        <trans-unit id="47739d8d7f900214f17011b232b38873a5ba56b9" translate="yes" xml:space="preserve">
          <source>Introduction to components</source>
          <target state="translated">コンポーネントの紹介</target>
        </trans-unit>
        <trans-unit id="4338ab77cbd7d66a84347792c0bded85b09f38fe" translate="yes" xml:space="preserve">
          <source>Introduction to components and templates</source>
          <target state="translated">コンポーネントとテンプレートの紹介</target>
        </trans-unit>
        <trans-unit id="b56bd365155a67ad44616a3cfaa0c6f87e0813cf" translate="yes" xml:space="preserve">
          <source>Introduction to forms in Angular</source>
          <target state="translated">Angularでのフォームの紹介</target>
        </trans-unit>
        <trans-unit id="7cccb3d4fcea31dd15a08fa2a5f77cb23a273075" translate="yes" xml:space="preserve">
          <source>Introduction to modules</source>
          <target state="translated">モジュールの紹介</target>
        </trans-unit>
        <trans-unit id="0709e3f3783847d46c02c3e879b4d2aa32e91ee8" translate="yes" xml:space="preserve">
          <source>Introduction to reactive forms</source>
          <target state="translated">反応型の紹介</target>
        </trans-unit>
        <trans-unit id="de2848f98042a65b60c04421d206e68ca3490213" translate="yes" xml:space="preserve">
          <source>Introduction to services and dependency injection</source>
          <target state="translated">サービスと依存性インジェクションの紹介</target>
        </trans-unit>
        <trans-unit id="31bd018950090c5c6cd607bed84ff15ec170f2b3" translate="yes" xml:space="preserve">
          <source>Introductory application demonstrating Angular features. For more information, see &lt;a href=&quot;start&quot;&gt;Getting started&lt;/a&gt;.</source>
          <target state="translated">Angularの機能を示す入門アプリケーション。詳細については、「&lt;a href=&quot;start&quot;&gt;はじめに」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d784ef7dd559f90510b1c51d9366c7111e5f69d8" translate="yes" xml:space="preserve">
          <source>Introductory documentation for the root app.</source>
          <target state="translated">ルートアプリの紹介ドキュメント。</target>
        </trans-unit>
        <trans-unit id="aace78cff547d716715d45872adbd62b2b745412" translate="yes" xml:space="preserve">
          <source>Invert the selection specified by the 'grep' option.</source>
          <target state="translated">grep' オプションで指定された選択範囲を反転させます。</target>
        </trans-unit>
        <trans-unit id="ef11e3a45fcbddfa8943f16664c96693dbbd2dac" translate="yes" xml:space="preserve">
          <source>Invoke Push Notifications by pushing a message with the following payload.</source>
          <target state="translated">以下のペイロードを持つメッセージをプッシュすることで、プッシュ通知を起動します。</target>
        </trans-unit>
        <trans-unit id="88241a92475e9beecdb4c31ab3c1fdf7de6dab59" translate="yes" xml:space="preserve">
          <source>Invoke as decorator.</source>
          <target state="translated">デコレーターとして呼び出します。</target>
        </trans-unit>
        <trans-unit id="59d70d5937eb1157be8db1664978fb31d22e53bb" translate="yes" xml:space="preserve">
          <source>Invoke the tool on the command line through the &lt;code&gt;ng&lt;/code&gt; executable. Online help is available on the command line. Enter the following to list commands or options for a given command (such as &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt;) with a short description.</source>
          <target state="translated">&lt;code&gt;ng&lt;/code&gt; 実行可能ファイルを介してコマンドラインでツールを呼び出します。コマンドラインからオンラインヘルプを利用できます。次のコマンドを入力して、特定のコマンド（&lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt;など）のコマンドまたはオプションを短い説明とともに一覧表示します。</target>
        </trans-unit>
        <trans-unit id="bcf4fe5e09f5109017dca07a3cf2d814a91d3785" translate="yes" xml:space="preserve">
          <source>Invoke this method to explicitly process change detection and its side-effects.</source>
          <target state="translated">このメソッドを呼び出して、変更検出とその副作用を明示的に処理します。</target>
        </trans-unit>
        <trans-unit id="f71314c70f579581e6aeb34f93359ab3921893e3" translate="yes" xml:space="preserve">
          <source>Invokes the deploy builder for a specified project or for the default project in the workspace.</source>
          <target state="translated">指定されたプロジェクトまたはワークスペース内の既定のプロジェクトのデプロイ・ビルダを呼び出します。</target>
        </trans-unit>
        <trans-unit id="d1940ca4cbd9dbd0eb38f2bc2ef028f64f0e3ebe" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;{{ 'ok' | repeat:3 }}&lt;/code&gt; in a template produces &lt;code&gt;okokok&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{ 'ok' | repeat:3 }}&lt;/code&gt; を呼び出す| テンプレート内のrepeat：3}}は &lt;code&gt;okokok&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="8ecb88a0d7e8f36c9744ae06147a6fdb631de233" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;Lightswitch.clicked()&lt;/code&gt; bound to anything such that the user can invoke it?</source>
          <target state="translated">&lt;code&gt;Lightswitch.clicked()&lt;/code&gt; は、ユーザーが呼び出すことができるような何かにバインドされていますか？</target>
        </trans-unit>
        <trans-unit id="ac8f08f500ef6eac216f7e2f6acc17d63f159658" translate="yes" xml:space="preserve">
          <source>Is its own tax return editing session.</source>
          <target state="translated">独自の確定申告書編集会です。</target>
        </trans-unit>
        <trans-unit id="26b69a05483ffab3d41808c70bd31cc4f9e37b16" translate="yes" xml:space="preserve">
          <source>Is the &lt;code&gt;Lightswitch.message&lt;/code&gt; displayed?</source>
          <target state="translated">さ &lt;code&gt;Lightswitch.message&lt;/code&gt; が表示さ？</target>
        </trans-unit>
        <trans-unit id="3ccfab603206383b681f28870947bbf1d675dda5" translate="yes" xml:space="preserve">
          <source>Is the hero name displayed as expected (i.e, in uppercase)?</source>
          <target state="translated">ヒーロー名は期待通りに表示されていますか?</target>
        </trans-unit>
        <trans-unit id="62759ede6184ca8bf2ccab209b605f3ebc11e427" translate="yes" xml:space="preserve">
          <source>Is the welcome message displayed by the template of &lt;code&gt;WelcomeComponent&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;WelcomeComponent&lt;/code&gt; のテンプレートによってウェルカムメッセージが表示されますか？</target>
        </trans-unit>
        <trans-unit id="a59c6ce02a2484a37dbf441374573cec25db7336" translate="yes" xml:space="preserve">
          <source>It &lt;em&gt;creates&lt;/em&gt; the &lt;code&gt;TestHostComponent&lt;/code&gt; instead of the &lt;code&gt;DashboardHeroComponent&lt;/code&gt;.</source>
          <target state="translated">これは、&lt;em&gt;作成し&lt;/em&gt; &lt;code&gt;TestHostComponent&lt;/code&gt; の代わり &lt;code&gt;DashboardHeroComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="94b8e34baeefba35b8b89673f3480499d94bf056" translate="yes" xml:space="preserve">
          <source>It &lt;em&gt;declares&lt;/em&gt; both the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; and the &lt;code&gt;TestHostComponent&lt;/code&gt;.</source>
          <target state="translated">それは&lt;em&gt;宣言し&lt;/em&gt;、両方の &lt;code&gt;DashboardHeroComponent&lt;/code&gt; と &lt;code&gt;TestHostComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b21529cea838e2b6b15441950bdae0264cbbefbf" translate="yes" xml:space="preserve">
          <source>It accepts a &lt;code&gt;text/html&lt;/code&gt; response (as determined by the value of the &lt;code&gt;Accept&lt;/code&gt; header).</source>
          <target state="translated">これは、受け付け &lt;code&gt;text/html&lt;/code&gt; （の値によって決定されるように応答を &lt;code&gt;Accept&lt;/code&gt; ヘッダ）。</target>
        </trans-unit>
        <trans-unit id="aaf41bb3d14f2e414d4fcc67dfff4cef7f7b3b73" translate="yes" xml:space="preserve">
          <source>It accepts a domain model as an optional &lt;code&gt;&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;. If you have a one-way binding to &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;[]&lt;/code&gt; syntax, changing the domain model's value in the component class sets the value in the view. If you have a two-way binding with &lt;code&gt;[()]&lt;/code&gt; syntax (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to the domain model in your class.</source>
          <target state="translated">オプションの &lt;code&gt;&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; としてドメインモデルを受け入れます。 &lt;code&gt;[]&lt;/code&gt; 構文を &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; してngModelに一方向のバインディングがある場合、コンポーネントクラスでドメインモデルの値を変更すると、ビューの値が設定されます。 &lt;code&gt;[()]&lt;/code&gt; 構文（「banana-in-a-box構文」とも呼ばれます）を使用した双方向バインディングがある場合、UIの値は常にクラスのドメインモデルに同期されます。</target>
        </trans-unit>
        <trans-unit id="e2ae87480d790dfa92913ec2c7c57b94a67e403b" translate="yes" xml:space="preserve">
          <source>It accepts a domain model as an optional &lt;code&gt;&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;. If you have a one-way binding to &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;[]&lt;/code&gt; syntax, changing the value of the domain model in the component class sets the value in the view. If you have a two-way binding with &lt;code&gt;[()]&lt;/code&gt; syntax (also known as 'banana-box syntax'), the value in the UI always syncs back to the domain model in your class.</source>
          <target state="translated">オプションの &lt;code&gt;&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; としてドメインモデルを受け入れます。 &lt;code&gt;[]&lt;/code&gt; 構文を &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; してngModelに一方向バインディングがある場合、コンポーネントクラスのドメインモデルの値を変更すると、ビューに値が設定されます。 &lt;code&gt;[()]&lt;/code&gt; 構文（「バナナボックス構文」とも呼ばれる）を使用した双方向バインディングがある場合、UIの値は常にクラスのドメインモデルに同期されます。</target>
        </trans-unit>
        <trans-unit id="d1ef5600898e0ae01610d043a4a9f983f75191ed" translate="yes" xml:space="preserve">
          <source>It accepts both super-sets and sub-sets of the array without throwing an error.</source>
          <target state="translated">エラーをスローすることなく、配列のスーパーセットとサブセットの両方を受け付けます。</target>
        </trans-unit>
        <trans-unit id="4bccd25078f3c01228e73bdbae0161e45566c3cb" translate="yes" xml:space="preserve">
          <source>It accepts both super-sets and sub-sets of the group without throwing an error.</source>
          <target state="translated">グループのスーパーセットとサブセットの両方を、エラーをスローせずに受け付けることができます。</target>
        </trans-unit>
        <trans-unit id="c13d32540d684ec2971d8a6aa07a438b2688dad0" translate="yes" xml:space="preserve">
          <source>It accepts the string name of the nested &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; you want to link, and will look for a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; registered with that name in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance you passed into &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、ネストされたの文字列名受け入れ &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; あなたがリンクしたいが、と探します &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 親にその名前で登録 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; のあなたに渡されたインスタンス &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92bb130acb69f1ba28771910ed692ccf19a723f9" translate="yes" xml:space="preserve">
          <source>It accepts the string name of the nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to link, and looks for a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; registered with that name in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance you passed into &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リンクするネストされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の文字列名を受け入れ、FormGroupDirectiveに渡した親 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスでその名前で登録された &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f8a6c222dced75a612315602dfc6bf860b4fcfb4" translate="yes" xml:space="preserve">
          <source>It allows instantiating or even loading the Angular part lazily, which improves the initial loading time. In some cases this may waive the cost of running a second framework altogether.</source>
          <target state="translated">インスタンスを作成したり、Angularの部分を怠惰にロードしたりすることができ、初期ロード時間を改善します。場合によっては、2つ目のフレームワークを実行するコストを完全に免除することができます。</target>
        </trans-unit>
        <trans-unit id="8e63edca4aba60ae769633e65db45ce6b8cda1c2" translate="yes" xml:space="preserve">
          <source>It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to pay the cost up-front. For example, you can have an AngularJS application that uses Angular for specific routes and only instantiate the Angular modules if/when the user visits one of these routes.</source>
          <target state="translated">ハイブリッドアプリケーションのAngular部分のロード/ブートストラップを怠惰に行うことができ、前払いのコストを支払う必要がありません。例えば、特定のルートにAngularを使用するAngularJSアプリケーションを作成し、ユーザーがこれらのルートのいずれかにアクセスした場合にのみAngularモジュールをインスタンス化することができます。</target>
        </trans-unit>
        <trans-unit id="1fb8a3420da7cbbbfae709f23348ef16e743e69f" translate="yes" xml:space="preserve">
          <source>It also contains properties to access the &lt;a href=&quot;upgrademodule#injector&quot;&gt;root injector&lt;/a&gt;, the bootstrap &lt;code&gt;&lt;a href=&quot;../../core/ngzone&quot;&gt;NgZone&lt;/a&gt;&lt;/code&gt; and the &lt;a href=&quot;https://docs.angularjs.org/api/auto/service/%24injector&quot;&gt;AngularJS $injector&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;upgrademodule#injector&quot;&gt;ルートインジェクター&lt;/a&gt;、ブートストラップ &lt;code&gt;&lt;a href=&quot;../../core/ngzone&quot;&gt;NgZone&lt;/a&gt;&lt;/code&gt; 、&lt;a href=&quot;https://docs.angularjs.org/api/auto/service/%24injector&quot;&gt;AngularJS $ injector&lt;/a&gt;にアクセスするためのプロパティも含まれています。</target>
        </trans-unit>
        <trans-unit id="f071a0b65644eeeccb34ee7fdae07a260e0e9140" translate="yes" xml:space="preserve">
          <source>It also creates the following workspace and starter project files:</source>
          <target state="translated">また、以下のワークスペースとスタータープロジェクトファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="6c32f9929135cab965aabc48fd19faf6dd6dce8a" translate="yes" xml:space="preserve">
          <source>It also generates an initial test file for the component, &lt;code&gt;banner-external.component.spec.ts&lt;/code&gt;, that looks like this:</source>
          <target state="translated">また、コンポーネントの初期テストファイルである &lt;code&gt;banner-external.component.spec.ts&lt;/code&gt; も生成し、次のようになります。</target>
        </trans-unit>
        <trans-unit id="8efa0771b30ff267b601afb0f7067fc48209cdec" translate="yes" xml:space="preserve">
          <source>It also has a side-effect. &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; logs the &lt;code&gt;path&lt;/code&gt; of a selected route in its public &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">また、副作用もあります。 &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; は、ログに記録し &lt;code&gt;path&lt;/code&gt; の公開では、選択した経路の &lt;code&gt;preloadedModules&lt;/code&gt; の配列を。</target>
        </trans-unit>
        <trans-unit id="10fdc8fee72f7646b8b3adf2c52bb9b3221fcdfe" translate="yes" xml:space="preserve">
          <source>It appears within the template of a parent component, which binds a &lt;em&gt;hero&lt;/em&gt; to the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; property and listens for an event raised through the &lt;em&gt;selected&lt;/em&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">これは、親コンポーネントのテンプレート内に表示されます。これは、&lt;em&gt;ヒーロー&lt;/em&gt;を &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; プロパティにバインドし、&lt;em&gt;選択された&lt;/em&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; プロパティを通じて発生するイベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="f279ef89e1bf02c3528c17799c4418cc58336a95" translate="yes" xml:space="preserve">
          <source>It belongs to the optional &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and you must &lt;em&gt;opt-in&lt;/em&gt; to using it.</source>
          <target state="translated">これはオプションの &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; に属しており、使用するには&lt;em&gt;オプトイン&lt;/em&gt;する必要があり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="26023f5577f25d3446bc370676b0a6f86e7e8aba" translate="yes" xml:space="preserve">
          <source>It calls &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; の代わりに &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3420de52d9f27308e43685dc19d302c9fa7999ee" translate="yes" xml:space="preserve">
          <source>It calls &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;put()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;put()&lt;/code&gt; の代わりに &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e20098109d5ecc4ec6a976711ca2510fe455a018" translate="yes" xml:space="preserve">
          <source>It can be created manually, as follows:</source>
          <target state="translated">以下のように手動で作成することができます。</target>
        </trans-unit>
        <trans-unit id="4bc5d4c1a8b1283e28876118079505f0a82bc822" translate="yes" xml:space="preserve">
          <source>It can be problematic for an app if the version of resources it's receiving changes suddenly or without warning. See the &lt;a href=&quot;service-worker-devops#versions&quot;&gt;Versions&lt;/a&gt; section above for a description of such issues.</source>
          <target state="translated">アプリが受け取るリソースのバージョンが突然、または警告なしに変更される場合、アプリにとって問題になる可能性があります。このような問題の説明については、上記の「&lt;a href=&quot;service-worker-devops#versions&quot;&gt;バージョン」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="08426e933f904dc80c16feae7eab518a4a961cf1" translate="yes" xml:space="preserve">
          <source>It can be provided to this method in one of two formats:</source>
          <target state="translated">このメソッドには、2 つの形式のいずれかで提供することができます。</target>
        </trans-unit>
        <trans-unit id="0a5b556bf784cd334e9ae2c20c87115e67fc96c1" translate="yes" xml:space="preserve">
          <source>It can be used as a base class for custom route reuse strategies, i.e. you can create your own class that extends the &lt;code&gt;&lt;a href=&quot;baseroutereusestrategy&quot;&gt;BaseRouteReuseStrategy&lt;/a&gt;&lt;/code&gt; one.</source>
          <target state="translated">カスタムルート再利用戦略の基本クラスとして使用できます。つまり、 &lt;code&gt;&lt;a href=&quot;baseroutereusestrategy&quot;&gt;BaseRouteReuseStrategy&lt;/a&gt;&lt;/code&gt; クラスを拡張する独自のクラスを作成できます。</target>
        </trans-unit>
        <trans-unit id="7d56cfef604890a297d3766102bad859f461f7ec" translate="yes" xml:space="preserve">
          <source>It can't just reference the &lt;code&gt;id&lt;/code&gt; property of the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt;. The component has to &lt;em&gt;subscribe&lt;/em&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; observable and be prepared for the &lt;code&gt;id&lt;/code&gt; to change during its lifetime.</source>
          <target state="translated">単に &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;id&lt;/code&gt; プロパティを参照することはできません。コンポーネントは &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; オブザーバブルを&lt;em&gt;サブスクライブ&lt;/em&gt;し、その存続期間中に &lt;code&gt;id&lt;/code&gt; が変更される準備をする必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cfb1bbd0359c2cf1cb726dd86d8ce0539e6977ba" translate="yes" xml:space="preserve">
          <source>It declares and exports the utility pipe, directive, and component classes.</source>
          <target state="translated">ユーティリティパイプ、ディレクティブ、コンポーネントクラスの宣言とエクスポートを行います。</target>
        </trans-unit>
        <trans-unit id="d7d019223649a73995168e563585db9bbe9dadab" translate="yes" xml:space="preserve">
          <source>It defines a &lt;code&gt;heroes&lt;/code&gt; array property.</source>
          <target state="translated">&lt;code&gt;heroes&lt;/code&gt; 配列のプロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="a6f7ce9a8a99f6706e4390e417534249fdbde969" translate="yes" xml:space="preserve">
          <source>It describes features which are part of Angular Labs, and are not considered a stable, supported API.</source>
          <target state="translated">Angular Labsの一部であり、安定してサポートされているAPIとは考えられない機能を記述しています。</target>
        </trans-unit>
        <trans-unit id="8e59fc3b69ee2f0a812b49f8920bf497ae137922" translate="yes" xml:space="preserve">
          <source>It displays a short form with a header, an input box for the message, and two buttons, &quot;Send&quot; and &quot;Cancel&quot;.</source>
          <target state="translated">ヘッダー、メッセージの入力ボックス、「送信」と「キャンセル」の2つのボタンを持つ短いフォームを表示します。</target>
        </trans-unit>
        <trans-unit id="e74c4df29123d7f1b28af5c3920c37049db746dc" translate="yes" xml:space="preserve">
          <source>It displays a simple form with a header, an input box for the message, and two buttons, &quot;Send&quot; and &quot;Cancel&quot;.</source>
          <target state="translated">ヘッダー、メッセージの入力ボックス、「送信」と「キャンセル」の2つのボタンで構成されたシンプルなフォームを表示します。</target>
        </trans-unit>
        <trans-unit id="bf7952a8d431d45427cd14b51695264b8ed72382" translate="yes" xml:space="preserve">
          <source>It does not require you to change how you bootstrap your AngularJS app.</source>
          <target state="translated">AngularJSアプリのブートストラップ方法を変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="419e645994e8d30b7174dbb517386ed3b5affc24" translate="yes" xml:space="preserve">
          <source>It doesn't figure out the types of &lt;code&gt;#refs&lt;/code&gt;, the results of pipes, the type of &lt;code&gt;$event&lt;/code&gt; in event bindings, and so on.</source>
          <target state="translated">&lt;code&gt;#refs&lt;/code&gt; のタイプ、パイプの結果、イベントバインディングの &lt;code&gt;$event&lt;/code&gt; のタイプなどはわかりません。</target>
        </trans-unit>
        <trans-unit id="6b9ed176655d2ae7894637c252aa287ceb5d8d56" translate="yes" xml:space="preserve">
          <source>It enforces the use of component best practices like &lt;code&gt;controllerAs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;controllerAs&lt;/code&gt; のようなコンポーネントのベストプラクティスの使用を強制します。</target>
        </trans-unit>
        <trans-unit id="42cd08f715154702ba1bfcb5f060c73f70e0f76a" translate="yes" xml:space="preserve">
          <source>It expects the server to generate an id for the new hero, which it returns in the &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; to the caller.</source>
          <target state="translated">サーバーが新しいヒーローのIDを生成することを期待し、それを &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; で呼び出し元に返します。</target>
        </trans-unit>
        <trans-unit id="95d0bff9d24171d2c283dde8af92d28339fe8434" translate="yes" xml:space="preserve">
          <source>It forwards that request to &lt;code&gt;next.handle()&lt;/code&gt; which ultimately calls the server and returns the server's response.</source>
          <target state="translated">その要求を &lt;code&gt;next.handle()&lt;/code&gt; に転送し、最終的にサーバーを呼び出してサーバーの応答を返します。</target>
        </trans-unit>
        <trans-unit id="cff060b2c8359f3ecbce1c4cf07f83a9266ef3a7" translate="yes" xml:space="preserve">
          <source>It has Angular properties and methods that abstract interaction with the native element. This test calls the &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; with the &quot;click&quot; event name. The &quot;click&quot; event binding responds by calling &lt;code&gt;DashboardHeroComponent.click()&lt;/code&gt;.</source>
          <target state="translated">これには、ネイティブ要素との相互作用を抽象化するAngularプロパティとメソッドがあります。このテストは、「クリック」イベント名で &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; を呼び出します。「クリック」イベントバインディングは、 &lt;code&gt;DashboardHeroComponent.click()&lt;/code&gt; を呼び出すことによって応答します。</target>
        </trans-unit>
        <trans-unit id="77cb21518043d46f3f115c5e67031ef805971a8e" translate="yes" xml:space="preserve">
          <source>It has a legitimate purpose in this guide. It demonstrates how to find a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; element, click it, and inspect a result, without engaging the full router machinery. This is a skill you may need to test a more sophisticated component, one that changes the display, re-calculates parameters, or re-arranges navigation options when the user clicks the link.</source>
          <target state="translated">このガイドでは正当な目的があります。完全なルーター機構を使用せずに、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 要素を見つけてクリックし、結果を検査する方法を示します。これは、ユーザーがリンクをクリックしたときに表示を変更したり、パラメーターを再計算したり、ナビゲーションオプションを再配置したりする、より洗練されたコンポーネントをテストするために必要なスキルです。</target>
        </trans-unit>
        <trans-unit id="e4df5dc55e01418d5fe02e4482c23400263dcc59" translate="yes" xml:space="preserve">
          <source>It has a simple template that only includes the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;. This component just renders the contents of the active route and nothing else.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; のみを含むシンプルなテンプレートがあります。このコンポーネントは、アクティブなルートのコンテンツをレンダリングするだけで、他には何もレンダリングしません。</target>
        </trans-unit>
        <trans-unit id="9922a6848ec3f5a8b7802dc76ee7ad819c476823" translate="yes" xml:space="preserve">
          <source>It has good default values for directive attributes like &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;restrict&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;restrict&lt;/code&gt; のようなディレクティブ属性の適切なデフォルト値があります。</target>
        </trans-unit>
        <trans-unit id="1eec011488d2e2fc8d294fd38efcceda66f669ca" translate="yes" xml:space="preserve">
          <source>It has good default values for directive attributes like &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;restrict&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; や &lt;code&gt;restrict&lt;/code&gt; などのディレクティブ属性には適切なデフォルト値があります。</target>
        </trans-unit>
        <trans-unit id="bea15911cc873bfe30f8a513aaa359e498d5ee43" translate="yes" xml:space="preserve">
          <source>It imports the &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; because the module's component needs common directives.</source>
          <target state="translated">モジュールのコンポーネントには共通のディレクティブが必要であるため、 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="ad4bae11dc99871b8342e876ba6993b4893ae7e5" translate="yes" xml:space="preserve">
          <source>It improves performance by avoiding unnecessary change detection runs while giving the developer greater ability to customize.</source>
          <target state="translated">不必要な変更検出の実行を回避することでパフォーマンスを向上させると同時に、開発者にカスタマイズの能力を与えます。</target>
        </trans-unit>
        <trans-unit id="4164a929740068617e47d44247f8d7f7d80f5919" translate="yes" xml:space="preserve">
          <source>It is a &lt;em&gt;shell&lt;/em&gt; for the crisis management feature area, just as the &lt;code&gt;AppComponent&lt;/code&gt; is a shell to manage the high-level workflow.</source>
          <target state="translated">それは&lt;em&gt;、シェル&lt;/em&gt;と同じように、危機管理機能領域の &lt;code&gt;AppComponent&lt;/code&gt; がハイレベルのワークフローを管理するためのシェルです。</target>
        </trans-unit>
        <trans-unit id="39bf93eba307188a64bd26bb14fbc70e653f1001" translate="yes" xml:space="preserve">
          <source>It is a better practice to redistribute the component and its supporting classes into their own, dedicated files.</source>
          <target state="translated">コンポーネントとそれをサポートするクラスを、それぞれの専用ファイルに再配布するのが良い方法です。</target>
        </trans-unit>
        <trans-unit id="6769c0a53dc2a5685598a3855be2789b7ba33c3d" translate="yes" xml:space="preserve">
          <source>It is a shell for the crisis management feature area, just as the &lt;code&gt;AppComponent&lt;/code&gt; is a shell to manage the high-level workflow.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; が高レベルのワークフローを管理するためのシェルであるのと同様に、これは危機管理機能領域のシェルです。</target>
        </trans-unit>
        <trans-unit id="f4c906b1ec5168c0204d5b89211f8c14a110d92c" translate="yes" xml:space="preserve">
          <source>It is also rare but valid for an interceptor to return multiple responses on the event stream for a single request.</source>
          <target state="translated">また、1つのリクエストに対してイベントストリーム上で複数の応答を返すインターセプ ターも稀ではあるが有効である。</target>
        </trans-unit>
        <trans-unit id="7c3e6bd90e578a6d369fe153a9ba93c287cbf958" translate="yes" xml:space="preserve">
          <source>It is customary but not required to &lt;em&gt;precede&lt;/em&gt; the &lt;em&gt;closing HTML&lt;/em&gt; tag with a blank line as well.</source>
          <target state="translated">慣例です&lt;em&gt;が&lt;/em&gt;、&lt;em&gt;HTML終了&lt;/em&gt;タグの&lt;em&gt;前に&lt;/em&gt;空白行を&lt;em&gt;置く&lt;/em&gt;ことも必須で&lt;em&gt;は&lt;/em&gt;ありません。</target>
        </trans-unit>
        <trans-unit id="e2c901bdbe9622031dbf422258b1577bf6c7cfb3" translate="yes" xml:space="preserve">
          <source>It is highly recommended that you ensure that your app works even without service worker support in the browser. Although an unsupported browser ignores service worker caching, it will still report errors if the app attempts to interact with the service worker. For example, calling &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt; will return rejected promises. To avoid such an error, you can check whether the Angular service worker is enabled using &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#isEnabled&quot;&gt;SwUpdate.isEnabled&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">ブラウザでService Workerがサポートされていなくても、アプリが機能することを確認することを強くお勧めします。サポートされていないブラウザーはService Workerのキャッシュを無視しますが、アプリがService Workerとやり取りしようとすると、エラーが報告されます。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt; を呼び出すと、拒否されたPromiseが返されます。このようなエラーを回避するには、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#isEnabled&quot;&gt;SwUpdate.isEnabled&lt;/a&gt;()&lt;/code&gt; を使用してAngular Service Workerが有効になっているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="bca41d7798c2016edf356fbe8a535a8995b45502" translate="yes" xml:space="preserve">
          <source>It is important to note that service workers don't work behind redirect. You may have already encountered the error &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">Service Workerはリダイレクトの背後で動作しないことに注意することが重要です。既にエラーが発生している可能性があります &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb4e957d60d2a88226f503a54462cd580636fb97" translate="yes" xml:space="preserve">
          <source>It is important to note that service workers don't work behind redirect. You may have already encountered the error &lt;code&gt;The script resource is behind a redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">サービスワーカーはリダイレクトの背後で作業しないことに注意することが重要です。すでにエラーが発生している可能性があります &lt;code&gt;The script resource is behind a redirect, which is disallowed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6149684d6a8cae8e0ae20c1797198ea032977a49" translate="yes" xml:space="preserve">
          <source>It is important to note that the asynchronous validation happens after the synchronous validation, and is performed only if the synchronous validation is successful. This check allows forms to avoid potentially expensive async validation processes such as an HTTP request if more basic validation methods fail.</source>
          <target state="translated">非同期バリデーションは同期バリデーションの後に行われ、同期バリデーションが成功した場合にのみ実行されることに注意してください。このチェックにより、より基本的な検証方法が失敗した場合に、フォームはHTTPリクエストのような高価な非同期検証処理を回避することができます。</target>
        </trans-unit>
        <trans-unit id="96d7f100fd14c118e644c78eb99afbea37e0600c" translate="yes" xml:space="preserve">
          <source>It is important to remember that &lt;em&gt;HTML attribute&lt;/em&gt; and the &lt;em&gt;DOM property&lt;/em&gt; are different things, even when they have the same name. In Angular, the only role of HTML attributes is to initialize element and directive state.</source>
          <target state="translated">同じ名前であっても、&lt;em&gt;HTML属性&lt;/em&gt;と&lt;em&gt;DOMプロパティ&lt;/em&gt;は異なるものであることを覚えておくことが重要です。Angularでは、HTML属性の唯一の役割は要素とディレクティブの状態を初期化することです。</target>
        </trans-unit>
        <trans-unit id="b0fefa48f8275785f28ed330c1e6500e50579c8a" translate="yes" xml:space="preserve">
          <source>It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous code. The sanitizer leaves safe values intact.</source>
          <target state="translated">怪しいプロトコルで始まらないURLや、危険なコードを含まないHTMLスニペットなど、安全な値であれば、セキュリティをバイパスする必要はありません(推奨されません)。サニタイザは安全な値をそのまま残します。</target>
        </trans-unit>
        <trans-unit id="387f085f27e111a9c4bb8916669c057b5f6b9de7" translate="yes" xml:space="preserve">
          <source>It is now an error to assign values to template-only variables like &lt;code&gt;item&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let item of items&quot;&lt;/code&gt; (previously, the compiler would ignore these assignments).</source>
          <target state="translated">それは、今のようなテンプレートのみの変数に割り当てた値に誤りである &lt;code&gt;item&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let item of items&quot;&lt;/code&gt; （以前に、コンパイラはこれらの割り当てを無視します）。</target>
        </trans-unit>
        <trans-unit id="99529fc95ba91bf865b8bdc126836b31f7c4b6ea" translate="yes" xml:space="preserve">
          <source>It is often a good idea to &lt;em&gt;lock-in&lt;/em&gt; a good anchor name.</source>
          <target state="translated">多くの場合、適切なアンカー名を&lt;em&gt;固定&lt;/em&gt;することをお勧めし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4db5a6501589861c8253d34112728578aa1f6cad" translate="yes" xml:space="preserve">
          <source>It is possible for a schematic to provide all of its logic in the &lt;code&gt;index.ts&lt;/code&gt; file, without additional templates. You can create dynamic schematics for Angular, however, by providing components and templates in the &lt;code&gt;files/&lt;/code&gt; folder, like those in standalone Angular projects. The logic in the index file configures these templates by defining rules that inject data and modify variables.</source>
          <target state="translated">追加のテンプレートなしで、回路図がそのロジックのすべてを &lt;code&gt;index.ts&lt;/code&gt; ファイルで提供することが可能です。ただし、スタンドアロンのAngularプロジェクトと同様に、 &lt;code&gt;files/&lt;/code&gt; フォルダーにコンポーネントとテンプレートを提供することで、Angularの動的な回路図を作成できます。インデックスファイルのロジックは、データを挿入して変数を変更するルールを定義することにより、これらのテンプレートを構成します。</target>
        </trans-unit>
        <trans-unit id="276b591d0b815d8888e428d7faf78a45d3cb29e5" translate="yes" xml:space="preserve">
          <source>It is possible for a user to try to access a route that you have not defined. To account for this behavior, the best practice is to display a 404 page. In this section, you'll create a 404 page and update your route configuration to show that page for any unspecified routes.</source>
          <target state="translated">ユーザーが定義していないルートにアクセスしようとする可能性があります。この動作を考慮するには、404 ページを表示するのが最善の方法です。このセクションでは、404 ページを作成し、指定されていないルートに対してそのページを表示するようにルート設定を更新します。</target>
        </trans-unit>
        <trans-unit id="ffeddf5c1683cd01631856186ef36a7b7e49a9d5" translate="yes" xml:space="preserve">
          <source>It is possible to define the component first with the help of the &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; method as explained in this &lt;a href=&quot;http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html&quot;&gt;blog post&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html&quot;&gt;ブログ投稿で&lt;/a&gt;説明されているように、 &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; メソッドを使用してコンポーネントを定義することができます。</target>
        </trans-unit>
        <trans-unit id="2473f74c9fd722cdbf273d992f76f8c4263ad073" translate="yes" xml:space="preserve">
          <source>It is possible to downgrade multiple modules and include them in an AngularJS application. In that case, each downgraded module will be bootstrapped when an associated downgraded component or injectable needs to be instantiated.</source>
          <target state="translated">複数のモジュールをダウングレードしてAngularJSアプリケーションに含めることができます。その場合、ダウングレードされた各モジュールは、関連するダウングレードされたコンポーネントやインジェクトブルをインスタンス化する必要があるときにブートストラップされます。</target>
        </trans-unit>
        <trans-unit id="84af64f653bfc89c603108eaa38ffc63b5f37827" translate="yes" xml:space="preserve">
          <source>It is possible to use SVG as valid templates in Angular. All of the template syntax below is applicable to both SVG and HTML. Learn more in the SVG &lt;a href=&quot;https://www.w3.org/TR/SVG11/&quot;&gt;1.1&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/SVG2/&quot;&gt;2.0&lt;/a&gt; specifications.</source>
          <target state="translated">AngularではSVGを有効なテンプレートとして使用することが可能です。以下のテンプレート構文はすべて、SVGとHTMLの両方に適用できます。SVG &lt;a href=&quot;https://www.w3.org/TR/SVG11/&quot;&gt;1.1&lt;/a&gt;および&lt;a href=&quot;https://www.w3.org/TR/SVG2/&quot;&gt;2.0&lt;/a&gt;仕様で詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="84f6e26f10188c89b058327e2a32272c027943f0" translate="yes" xml:space="preserve">
          <source>It is recommended that you avoid depending on CommonJS modules in your Angular applications. Depending on CommonJS modules can prevent bundlers and minifiers from optimizing your application, which results in larger bundle sizes. Instead, it is recommended that you use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;ECMAScript modules&lt;/a&gt; in your entire application. For more information, see &lt;a href=&quot;https://web.dev/commonjs-larger-bundles/&quot;&gt;How CommonJS is making your bundles larger&lt;/a&gt;.</source>
          <target state="translated">AngularアプリケーションのCommonJSモジュールに依存しないようにすることをお勧めします。CommonJSモジュールによっては、バンドラーとミニファイアがアプリケーションを最適化できず、バンドルサイズが大きくなる可能性があります。代わりに、アプリケーション全体で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;ECMAScriptモジュール&lt;/a&gt;を使用することをお勧めします。詳細について&lt;a href=&quot;https://web.dev/commonjs-larger-bundles/&quot;&gt;は、CommonJSがバンドルを大きくする方法を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1031dd12dc6c396336a813b3dadae7f6f7e75ce9" translate="yes" xml:space="preserve">
          <source>It is recommended that you put the more specific asset groups higher in the list. For example, an asset group that matches &lt;code&gt;/foo.js&lt;/code&gt; should appear before one that matches &lt;code&gt;*.js&lt;/code&gt;.</source>
          <target state="translated">より具体的なアセットグループをリストの上位に配置することをお勧めします。たとえば、 &lt;code&gt;/foo.js&lt;/code&gt; に一致するアセットグループは、 &lt;code&gt;*.js&lt;/code&gt; 。jsに一致するアセットグループの前に表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="6801d16c249805651ee46dca90c0e3319d7bdd03" translate="yes" xml:space="preserve">
          <source>It is recommended that you put the more specific data groups higher in the list. For example, a data group that matches &lt;code&gt;/api/foo.json&lt;/code&gt; should appear before one that matches &lt;code&gt;/api/*.json&lt;/code&gt;.</source>
          <target state="translated">より具体的なデータグループをリストの上位に配置することをお勧めします。たとえば、 &lt;code&gt;/api/foo.json&lt;/code&gt; に一致するデータグループは、 &lt;code&gt;/api/*.json&lt;/code&gt; 。jsonに一致するデータグループの前に表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="423c72666d4582438903aed1e354553173f2f747" translate="yes" xml:space="preserve">
          <source>It is recommended that you set an element property with a &lt;a href=&quot;property-binding&quot;&gt;property binding&lt;/a&gt; whenever possible. However, sometimes you don't have an element property to bind. In those situations, you can use attribute binding.</source>
          <target state="translated">可能な限り、&lt;a href=&quot;property-binding&quot;&gt;プロパティバインディングを使用&lt;/a&gt;して要素プロパティを設定することをお勧めします。ただし、バインドする要素プロパティがない場合があります。そのような状況では、属性バインディングを使用できます。</target>
        </trans-unit>
        <trans-unit id="76d730517d126f32e97587e9cbc5e3cf785c0aea" translate="yes" xml:space="preserve">
          <source>It is the &lt;em&gt;root&lt;/em&gt; of the crisis center area, just as &lt;code&gt;AppComponent&lt;/code&gt; is the root of the entire application.</source>
          <target state="translated">これは、ある&lt;em&gt;ルート&lt;/em&gt;と同じように、危機の中心領域の &lt;code&gt;AppComponent&lt;/code&gt; は、アプリケーション全体のルートです。</target>
        </trans-unit>
        <trans-unit id="f0ce6c1a9e19d02a76258f37c5efc06fb5db9120" translate="yes" xml:space="preserve">
          <source>It is the root of the crisis center area, just as &lt;code&gt;AppComponent&lt;/code&gt; is the root of the entire application.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; がアプリケーション全体のルートであるように、これは危機の中心領域のルートです。</target>
        </trans-unit>
        <trans-unit id="c5288fb8c9de08ed91bcc1bec73e759d6ce69568" translate="yes" xml:space="preserve">
          <source>It is time to take off the training wheels and let the application begin its new life as a pure, shiny Angular app. The remaining tasks all have to do with removing code - which of course is every programmer's favorite task!</source>
          <target state="translated">トレーニングの車輪を外して、アプリケーションを純粋でピカピカのAngularアプリとして新しい生活を始める時が来ました。残りのタスクはコードを削除することです。</target>
        </trans-unit>
        <trans-unit id="ccb342aa8e1714c7437fd8ad1e8831908215d07c" translate="yes" xml:space="preserve">
          <source>It is valid for &lt;code&gt;.metadata.json&lt;/code&gt; files to contain errors. The template compiler reports these errors if the metadata is used to determine the contents of an annotation. The metadata collector cannot predict the symbols that are designed for use in an annotation, so it preemptively includes error nodes in the metadata for the exported symbols. The template compiler can then use the error nodes to report an error if these symbols are used.</source>
          <target state="translated">&lt;code&gt;.metadata.json&lt;/code&gt; ファイルにエラーが含まれていることは有効です。メタデータを使用して注釈の内容を判別すると、テンプレートコンパイラはこれらのエラーを報告します。メタデータコレクターは、注釈で使用するように設計されたシンボルを予測できないため、エクスポートされたシンボルのメタデータにエラーノードを事前に組み込みます。これらのシンボルが使用されている場合、テンプレートコンパイラはエラーノードを使用してエラーを報告できます。</target>
        </trans-unit>
        <trans-unit id="3d7207af03b5af04389d3df1257a354179fd4eef" translate="yes" xml:space="preserve">
          <source>It looks about the same as any other component you've seen in this guide. There are two noteworthy differences.</source>
          <target state="translated">見た目は、このガイドで見た他のコンポーネントとほぼ同じです。特筆すべき違いは2つあります。</target>
        </trans-unit>
        <trans-unit id="6e8998f7abfdb1faca5ef4124813aa06fd13c960" translate="yes" xml:space="preserve">
          <source>It looks similar to any other component in this guide, but there are two key differences.</source>
          <target state="translated">このガイドでは、他のどのコンポーネントとも似ていますが、2 つの重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="ce0f95ba15adcc1262d25210b5a0ac97badbdb0a" translate="yes" xml:space="preserve">
          <source>It may be advantageous to deviate from the &lt;em&gt;one-thing-per-file&lt;/em&gt; rule when you have a set of small, closely-related features that are better discovered and understood in a single file than as multiple files. Be wary of this loophole.</source>
          <target state="translated">複数のファイルとしてよりも1つのファイルでよりよく検出および理解される一連の小さな密接に関連する機能がある場合は、&lt;em&gt;ファイルごとに1つの&lt;/em&gt;ルールから逸脱することが有利な場合があります。この抜け穴に注意してください。</target>
        </trans-unit>
        <trans-unit id="13dbe81d25cc860ec205d64166f5c721b4b86799" translate="yes" xml:space="preserve">
          <source>It may be difficult to imagine how this directive actually works. In this section, you'll turn &lt;code&gt;AppComponent&lt;/code&gt; into a harness that lets you pick the highlight color with a radio button and bind your color choice to the directive.</source>
          <target state="translated">このディレクティブが実際にどのように機能するかを想像するのは難しいかもしれません。このセクションでは、 &lt;code&gt;AppComponent&lt;/code&gt; をハーネスに変換します。これにより、ラジオボタンでハイライトの色を選択し、色の選択肢をディレクティブにバインドできます。</target>
        </trans-unit>
        <trans-unit id="77eed6237424237999f7c2a34a9fb9ff0e0091ce" translate="yes" xml:space="preserve">
          <source>It may be more economical to create the forms dynamically, based on metadata that describes the business object model.</source>
          <target state="translated">ビジネス・オブジェクト・モデルを記述したメタデータに基づいて、フォームを動的に作成する方が経済的かもしれません。</target>
        </trans-unit>
        <trans-unit id="bacb242ddb0949af950399df1070a8a6e831b848" translate="yes" xml:space="preserve">
          <source>It might not look like the class has properties, but it does. The declaration of the constructor parameters takes advantage of a TypeScript shortcut.</source>
          <target state="translated">クラスがプロパティを持っているように見えないかもしれませんが、プロパティは持っています。コンストラクタのパラメータの宣言は、TypeScriptのショートカットを利用しています。</target>
        </trans-unit>
        <trans-unit id="e089e64834f141326fc0828463df856289d092cb" translate="yes" xml:space="preserve">
          <source>It must be known ahead of time so that IDEs can parse it without knowing the underlying semantics of the directive or what directives are present.</source>
          <target state="translated">事前に知っておかなければならないのは、IDE がディレクティブの基礎となるセマンティクスや、どのディレクティブが存在するかを知らなくても解析できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="cd59871da798733ed7ae9afa636c133a8f98ca66" translate="yes" xml:space="preserve">
          <source>It must translate to key-value attributes in the DOM.</source>
          <target state="translated">DOM の key-value 属性に変換しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b4b70d7ad2d5ef809560d50e542640d494da5baf" translate="yes" xml:space="preserve">
          <source>It navigates imperatively with the &lt;code&gt;&lt;a href=&quot;../api/router/router#navigate&quot;&gt;Router.navigate()&lt;/a&gt;&lt;/code&gt; method, passing in a &lt;a href=&quot;router#link-parameters-array&quot;&gt;link parameters array&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router#navigate&quot;&gt;Router.navigate()&lt;/a&gt;&lt;/code&gt; メソッドを使用して命令的にナビゲートし、&lt;a href=&quot;router#link-parameters-array&quot;&gt;リンクパラメータの配列&lt;/a&gt;を渡します。</target>
        </trans-unit>
        <trans-unit id="90f73e390a5723e407fe6308cf983a850544d1b6" translate="yes" xml:space="preserve">
          <source>It presents a list of questions, each bound to a &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; component element. The &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; tag matches the &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt;, the component responsible for rendering the details of each &lt;em&gt;individual&lt;/em&gt; question based on values in the data-bound question object.</source>
          <target state="translated">質問のリストが表示され、各質問は &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; コンポーネント要素にバインドされています。 &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; タグが一致し &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; 、それぞれの詳細レンダリングするためのコンポーネント責任を&lt;em&gt;個々&lt;/em&gt;のデータ・バインドされた問題のオブジェクトの値に基づいて質問を。</target>
        </trans-unit>
        <trans-unit id="82a5d3b75fdd687a86c692b5142357640cb12862" translate="yes" xml:space="preserve">
          <source>It provides some of the shared behavior that all controls and groups of controls have, like running validators, calculating status, and resetting state. It also defines the properties that are shared between all sub-classes, like &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;valid&lt;/code&gt;, and &lt;code&gt;dirty&lt;/code&gt;. It shouldn't be instantiated directly.</source>
          <target state="translated">バリデーターの実行、ステータスの計算、状態のリセットなど、すべてのコントロールとコントロールのグループが持つ共有動作の一部を提供します。また、 &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;valid&lt;/code&gt; 、 &lt;code&gt;dirty&lt;/code&gt; など、すべてのサブクラス間で共有されるプロパティも定義します。直接インスタンス化しないでください。</target>
        </trans-unit>
        <trans-unit id="d171e074941cff4fb7a54c6be8c58fcc87175574" translate="yes" xml:space="preserve">
          <source>It re-exports the &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を再エクスポートします。</target>
        </trans-unit>
        <trans-unit id="293d2ed2212503b7e45e9caa6fdd2a81620b6623" translate="yes" xml:space="preserve">
          <source>It renders properly.</source>
          <target state="translated">きちんとレンダリングしてくれます。</target>
        </trans-unit>
        <trans-unit id="0ae169fa3e47383715acb011e05d54b05113d563" translate="yes" xml:space="preserve">
          <source>It requires less boilerplate code.</source>
          <target state="translated">少ないボイラコードを必要とします。</target>
        </trans-unit>
        <trans-unit id="bef3630aa143887d2a90b2232f4fa65407f77fcf" translate="yes" xml:space="preserve">
          <source>It returns an &lt;code&gt;Observable&lt;/code&gt; that &lt;em&gt;resolves&lt;/em&gt; when the user eventually decides what to do: either to discard changes and navigate away (&lt;code&gt;true&lt;/code&gt;) or to preserve the pending changes and stay in the crisis editor (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">ユーザーが最終的に何をすべきかを決定&lt;em&gt;する&lt;/em&gt;ときに&lt;em&gt;解決&lt;/em&gt;する &lt;code&gt;Observable&lt;/code&gt; を返します：変更を破棄してナビゲートする（ &lt;code&gt;true&lt;/code&gt; ）か、保留中の変更を保持して危機エディターにとどまる（ &lt;code&gt;false&lt;/code&gt; ）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="86d9d6efd22f39114ebd226c95a029f0c8dc9071" translate="yes" xml:space="preserve">
          <source>It returns an &lt;code&gt;Observable&lt;/code&gt; that resolves when the user eventually decides what to do: either to discard changes and navigate away (&lt;code&gt;true&lt;/code&gt;) or to preserve the pending changes and stay in the crisis editor (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">これは、ユーザーが最終的に何をすべきかを決定したときに解決する &lt;code&gt;Observable&lt;/code&gt; を返します。変更を破棄して移動する（ &lt;code&gt;true&lt;/code&gt; ）か、保留中の変更を保持して危機エディターにとどまる（ &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f17b788f117ba6e453d05b278cd784e7b06521e5" translate="yes" xml:space="preserve">
          <source>It returns service responses in their original request order, even if the server returns them out of order.</source>
          <target state="translated">これは、サーバがサービスのレスポンスを順不同で返してきた場合でも、元のリクエスト順で返します。</target>
        </trans-unit>
        <trans-unit id="e8347f69be7f37a1644f92b33a93b2dee7c617e2" translate="yes" xml:space="preserve">
          <source>It should look something like this, depending on where you run it:</source>
          <target state="translated">どこで実行するかにもよりますが、このような感じになるはずです。</target>
        </trans-unit>
        <trans-unit id="fde1c30a4ed9c7ecc8b3522111845cd4f468613d" translate="yes" xml:space="preserve">
          <source>It takes a bit more work to get the child view into the parent component &lt;em&gt;class&lt;/em&gt;.</source>
          <target state="translated">子ビューを親コンポーネント&lt;em&gt;クラス&lt;/em&gt;に入れるには、もう少し作業が必要です。</target>
        </trans-unit>
        <trans-unit id="2f20885a1acc0aea1959ff23c8f48814d62d5065" translate="yes" xml:space="preserve">
          <source>It takes a function argument that returns an &lt;code&gt;Observable&lt;/code&gt;. &lt;code&gt;PackageSearchService.search&lt;/code&gt; returns an &lt;code&gt;Observable&lt;/code&gt;, as other data service methods do.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; を返す関数引数を取ります。 &lt;code&gt;PackageSearchService.search&lt;/code&gt; は、他のデータサービスメソッドと同様に、 &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="674f64671b4a8d0cb23d0caf55d87a3f7dde911d" translate="yes" xml:space="preserve">
          <source>It takes two arguments: the component type to override (&lt;code&gt;HeroDetailComponent&lt;/code&gt;) and an override metadata object. The &lt;a href=&quot;testing#metadata-override-object&quot;&gt;override metadata object&lt;/a&gt; is a generic defined as follows:</source>
          <target state="translated">2つの引数を取ります。オーバーライドするコンポーネントタイプ（ &lt;code&gt;HeroDetailComponent&lt;/code&gt; ）とオーバーライドメタデータオブジェクトです。&lt;a href=&quot;testing#metadata-override-object&quot;&gt;オーバーライドメタデータオブジェクトは、&lt;/a&gt;次のように定義された一般的です。</target>
        </trans-unit>
        <trans-unit id="fe763eb54958bc5bce1ca54318ae85f6b15cea14" translate="yes" xml:space="preserve">
          <source>It takes two arguments: the component type to override (&lt;code&gt;HeroDetailComponent&lt;/code&gt;) and an override metadata object. The &lt;a href=&quot;testing-utility-apis#metadata-override-object&quot;&gt;override metadata object&lt;/a&gt; is a generic defined as follows:</source>
          <target state="translated">オーバーライドするコンポーネントタイプ（ &lt;code&gt;HeroDetailComponent&lt;/code&gt; ）とオーバーライドメタデータオブジェクトの2つの引数を取ります。&lt;a href=&quot;testing-utility-apis#metadata-override-object&quot;&gt;オーバーライドメタデータオブジェクトは、&lt;/a&gt;次のように定義された一般的です。</target>
        </trans-unit>
        <trans-unit id="6b7ade15f2e40422ade0a9b4e8bd3a6ec4688da6" translate="yes" xml:space="preserve">
          <source>It takes two more parameters:</source>
          <target state="translated">さらに2つのパラメータが必要です。</target>
        </trans-unit>
        <trans-unit id="ca9ca3b7d869e7250ea3e82c4497b55685884167" translate="yes" xml:space="preserve">
          <source>It tells the injector to start its search for a &lt;code&gt;Parent&lt;/code&gt; dependency in a component &lt;em&gt;above&lt;/em&gt; itself, which &lt;em&gt;is&lt;/em&gt; what parent means.</source>
          <target state="translated">それはインジェクターにそれ自身の&lt;em&gt;上&lt;/em&gt;のコンポーネントの &lt;code&gt;Parent&lt;/code&gt; 依存関係の検索を開始するように指示します。これ&lt;em&gt;は&lt;/em&gt;親が意味することです。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87287c749aedf291db51189f1922d8e0ed42f2e2" translate="yes" xml:space="preserve">
          <source>It used to display the hero details on its own, before you cut that portion of the template. Now it will delegate to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">テンプレートのその部分をカットする前に、ヒーローの詳細をそれ自体で表示するために使用されていました。これで、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; に委譲されます。</target>
        </trans-unit>
        <trans-unit id="26603cbdf502504b4bafbb3d1bd7c3f1f9536e25" translate="yes" xml:space="preserve">
          <source>It will be either an instance of &lt;code&gt;TestBedViewEngine&lt;/code&gt; or &lt;code&gt;TestBedRender3&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;TestBedViewEngine&lt;/code&gt; または &lt;code&gt;TestBedRender3&lt;/code&gt; のいずれかのインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="b2aee283c41ff9b11753db47219f0539ccacca7d" translate="yes" xml:space="preserve">
          <source>It worked because the Angular CLI declared &lt;code&gt;HeroesComponent&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt; when it generated that component.</source>
          <target state="translated">これは、Angular CLIが &lt;code&gt;HeroesComponent&lt;/code&gt; でそのコンポーネントを生成したときに &lt;code&gt;AppModule&lt;/code&gt; 宣言したために機能しました。</target>
        </trans-unit>
        <trans-unit id="a18d731dddd044fda8c0206e03d977e14385f507" translate="yes" xml:space="preserve">
          <source>It works perfectly with long property paths such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;?.b?.c?.d&lt;/code&gt;.</source>
          <target state="translated">それは、次のような長いプロパティパスで完璧に動作 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;?.b?.c?.d&lt;/code&gt; 。&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b61828efce1a32f9f0c8ea1d12bb762c91b945f" translate="yes" xml:space="preserve">
          <source>It works perfectly with long property paths such as &lt;code&gt;a?.b?.c?.d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a?.b?.c?.d&lt;/code&gt; などの長いプロパティパスで完全に機能します。</target>
        </trans-unit>
        <trans-unit id="f1bf143650c4c43d18c8241673d0204f40c18a4a" translate="yes" xml:space="preserve">
          <source>It would be ideal to change the type of &lt;code&gt;value&lt;/code&gt; here, from &lt;code&gt;boolean&lt;/code&gt; to &lt;code&gt;boolean|''&lt;/code&gt;, to match the set of values which are actually accepted by the setter. TypeScript requires that both the getter and setter have the same type, so if the getter should return a &lt;code&gt;boolean&lt;/code&gt; then the setter is stuck with the narrower type.</source>
          <target state="translated">ここで &lt;code&gt;value&lt;/code&gt; のタイプを &lt;code&gt;boolean&lt;/code&gt; から &lt;code&gt;boolean|''&lt;/code&gt; に変更して、セッターが実際に受け入れる値のセットに一致させることが理想的です。TypeScriptでは、ゲッターとセッターの両方が同じタイプである必要があるため、ゲッターが &lt;code&gt;boolean&lt;/code&gt; を返す必要がある場合、セッターはより狭いタイプでスタックします。</target>
        </trans-unit>
        <trans-unit id="af0e2debe677c9c678729b2bc1cbfd09e3f7a0d9" translate="yes" xml:space="preserve">
          <source>It would be nice to have a button on the &lt;code&gt;HeroDetail&lt;/code&gt; view that can do that.</source>
          <target state="translated">これを実行できるボタンを &lt;code&gt;HeroDetail&lt;/code&gt; ビューに配置すると便利です。</target>
        </trans-unit>
        <trans-unit id="0051be8012a415185793f036c9c8e5128fc7e68d" translate="yes" xml:space="preserve">
          <source>It's a &lt;em&gt;one way&lt;/em&gt; data binding from the &lt;code&gt;selectedHero&lt;/code&gt; property of the &lt;code&gt;HeroesComponent&lt;/code&gt; to the &lt;code&gt;hero&lt;/code&gt; property of the target element, which maps to the &lt;code&gt;hero&lt;/code&gt; property of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">それはだ&lt;em&gt;一方向&lt;/em&gt;からデータバインディング &lt;code&gt;selectedHero&lt;/code&gt; ののプロパティ &lt;code&gt;HeroesComponent&lt;/code&gt; に &lt;code&gt;hero&lt;/code&gt; にマップターゲット要素のプロパティ &lt;code&gt;hero&lt;/code&gt; のプロパティ &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60b2581c46072f14693ad4b2115581cbacdca79b" translate="yes" xml:space="preserve">
          <source>It's a bit tighter and smaller, with fewer import statements (not shown).</source>
          <target state="translated">インポート文(表示されていません)が少なく、少しタイトで小さくなっています。</target>
        </trans-unit>
        <trans-unit id="69a8bddb93aeeda0022b562464f122f8b32da08f" translate="yes" xml:space="preserve">
          <source>It's a different story if you improperly import &lt;code&gt;GreetingModule&lt;/code&gt; into a lazy loaded module such as &lt;code&gt;CustomersModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CustomersModule&lt;/code&gt; などの遅延ロードされたモジュールに &lt;code&gt;GreetingModule&lt;/code&gt; を不適切にインポートした場合は、別の話になります。</target>
        </trans-unit>
        <trans-unit id="09434c75600174446486b9af36cce437fffe1ce2" translate="yes" xml:space="preserve">
          <source>It's a good idea to put unit test spec files in the same folder as the application source code files that they test:</source>
          <target state="translated">ユニットテストの仕様ファイルは、テストするアプリケーションのソースコードファイルと同じフォルダに置くのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="9bcfe973543c84bb66b75ce9b66043cdfd62ffa5" translate="yes" xml:space="preserve">
          <source>It's a little more involved if you are in an interpolation. If you have an interpolation of &lt;code&gt;{{data.---}}&lt;/code&gt; inside a &lt;code&gt;div&lt;/code&gt; and need the completion list after &lt;code&gt;data.---&lt;/code&gt;, the compiler can't use the HTML AST to find the answer. The HTML AST can only tell the compiler that there is some text with the characters &quot;&lt;code&gt;{{data.---}}&lt;/code&gt;&quot;. That's when the template parser produces an expression AST, which resides within the template AST. The Angular Language Services then looks at &lt;code&gt;data.---&lt;/code&gt; within its context, asks the TypeScript Language Service what the members of &lt;code&gt;data&lt;/code&gt; are, and returns the list of possibilities.</source>
          <target state="translated">補間を行っている場合は、もう少し複雑になります。あなたはの補間持っている場合は &lt;code&gt;{{data.---}}&lt;/code&gt; の内側 &lt;code&gt;div&lt;/code&gt; し、後に補完リストを必要とする &lt;code&gt;data.---&lt;/code&gt; 、コンパイラは、答えを見つけるためにHTML ASTを使用することはできません。 HTML ASTは、文字「 &lt;code&gt;{{data.---}}&lt;/code&gt; 」を含むテキストがあることのみをコンパイラに通知できます。これは、テンプレートパーサーがテンプレートAST内に存在する式ASTを生成するときです。次に、Angular Language Servicesは &lt;code&gt;data.---&lt;/code&gt; 調べます---そのコンテキスト内で、TypeScript言語サービスに &lt;code&gt;data&lt;/code&gt; のメンバーが何であるかを尋ね、可能性のリストを返します。</target>
        </trans-unit>
        <trans-unit id="fcb0348ea77c1a0b6ee18a979c38ff18f522a08c" translate="yes" xml:space="preserve">
          <source>It's a simpler and more efficient alternative to removing all elements one by one:</source>
          <target state="translated">すべての要素を1つずつ削除するよりもシンプルで効率的です。</target>
        </trans-unit>
        <trans-unit id="6a71d528e9fd07b4df2b1b862b68940c3e7e83b3" translate="yes" xml:space="preserve">
          <source>It's also possible to specify that a service should be provided in a particular &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. For example, if you don't want &lt;code&gt;UserService&lt;/code&gt; to be available to applications unless they import a &lt;code&gt;UserModule&lt;/code&gt; you've created, you can specify that the service should be provided in the module:</source>
          <target state="translated">それは、サービスが特に提供されるべきであることを指定することも可能です &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。たとえば、作成した &lt;code&gt;UserModule&lt;/code&gt; をインポートしない限り、アプリケーションで &lt;code&gt;UserService&lt;/code&gt; を使用したくない場合は、サービスをモジュールで提供するように指定できます。</target>
        </trans-unit>
        <trans-unit id="9552d457536c1b64a297fca25a1283d35d3a935d" translate="yes" xml:space="preserve">
          <source>It's also possible to use &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; with Observables. The example below binds the &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;time&lt;/a&gt;&lt;/code&gt; Observable to the view. The Observable continuously updates the view with the current time.</source>
          <target state="translated">Observablesで &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; を使用することも可能です。以下の例は、Observable &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;time&lt;/a&gt;&lt;/code&gt; をビューにバインドします。Observableは、現在の時間でビューを継続的に更新します。</target>
        </trans-unit>
        <trans-unit id="573c20ee769df0dbbf6c5bedf2b66b0de69acbe1" translate="yes" xml:space="preserve">
          <source>It's also possible to use &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; with Observables. The example below binds the &lt;code&gt;time&lt;/code&gt; Observable to the view. The Observable continuously updates the view with the current time.</source>
          <target state="translated">Observablesで &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; を使用することも可能です。以下の例では、 &lt;code&gt;time&lt;/code&gt; Observableをビューにバインドしています。Observableは、現在の時刻でビューを継続的に更新します。</target>
        </trans-unit>
        <trans-unit id="321bd8fb08a8edefb40590d92c8b9e018f5c3cce" translate="yes" xml:space="preserve">
          <source>It's also recommended to export the &lt;code&gt;heroesServiceFactory&lt;/code&gt; function so that Ahead-of-Time compilation can pick it up.</source>
          <target state="translated">Ahead-of-Timeコンパイルで &lt;code&gt;heroesServiceFactory&lt;/code&gt; できるように、heroesServiceFactory関数をエクスポートすることもお勧めします。</target>
        </trans-unit>
        <trans-unit id="f699da3b1f9e220fa97ad28cd922a1330c2a3881" translate="yes" xml:space="preserve">
          <source>It's an anemic model with few requirements and no behavior. Perfect for the demo.</source>
          <target state="translated">要件が少なくて挙動がない無気力なモデルです。デモに最適。</target>
        </trans-unit>
        <trans-unit id="f2f02356a25344321ea932ed9aa84284ad0b5391" translate="yes" xml:space="preserve">
          <source>It's better to pause and let the user decide what to do. If the user cancels, you'll stay put and allow more changes. If the user approves, the app can save.</source>
          <target state="translated">一時停止して、ユーザーがどうするかを決めるのが良いでしょう。ユーザーがキャンセルした場合は、そのままにして、より多くの変更を許可します。ユーザーが承認した場合、アプリは保存することができます。</target>
        </trans-unit>
        <trans-unit id="9f78888bb37d208c4ff42770338b7ad54c0ab57e" translate="yes" xml:space="preserve">
          <source>It's better to use the &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;#navigate&lt;/code&gt; service to trigger route changes. Use &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; only if you need to interact with or create normalized URLs outside of routing.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;#navigate&lt;/code&gt; サービスを使用してルートの変更をトリガーすることをお勧めします。ルーティングの外で正規化されたURLを操作または作成する必要がある場合にのみ、 &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="f8b602ffbddc224ba7425e27dba721fa66a2d522" translate="yes" xml:space="preserve">
          <source>It's called an &lt;em&gt;input&lt;/em&gt; property because data flows from the binding expression &lt;em&gt;into&lt;/em&gt; the directive. Without that input metadata, Angular rejects the binding; see &lt;a href=&quot;attribute-directives#why-input&quot;&gt;below&lt;/a&gt; for more about that.</source>
          <target state="translated">それは呼ばれてい&lt;em&gt;た入力&lt;/em&gt;データバインディング式から流れるためプロパティ&lt;em&gt;に&lt;/em&gt;指示。その入力メタデータがないと、Angularはバインディングを拒否します。詳細については、&lt;a href=&quot;attribute-directives#why-input&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a1c5b2c14f47a4acb6a4e31a66880f00d640c203" translate="yes" xml:space="preserve">
          <source>It's certainly a good idea to give the user some kind of feedback when data access fails. But displaying the raw error object returned by &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; is far from the best way to do it.</source>
          <target state="translated">データアクセスが失敗したときに、ユーザーに何らかのフィードバックを与えることは確かに良い考えです。ただし、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; から返された未処理のエラーオブジェクトを表示することは、最善の方法ではありません。</target>
        </trans-unit>
        <trans-unit id="f716eb9a6b02b45e7ef6afb1e41d83af97f96b96" translate="yes" xml:space="preserve">
          <source>It's difficult to identify the &lt;em&gt;selected hero&lt;/em&gt; in the list when all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements look alike.</source>
          <target state="translated">すべての &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素が同じように見える場合、リストで&lt;em&gt;選択したヒーロー&lt;/em&gt;を識別するのは困難です。</target>
        </trans-unit>
        <trans-unit id="f18821981bfd33d573d82ec783fb8b3c0ddffd55" translate="yes" xml:space="preserve">
          <source>It's easier to get to the input box with the template reference variable than to go through the &lt;code&gt;$event&lt;/code&gt; object. Here's a rewrite of the previous &lt;code&gt;keyup&lt;/code&gt; example that uses a template reference variable to get the user's input.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; オブジェクトを通過するよりも、テンプレート参照変数を使用して入力ボックスにアクセスする方が簡単です。これは、テンプレート参照変数を使用してユーザーの入力を取得する、前の &lt;code&gt;keyup&lt;/code&gt; 例を書き直したものです。</target>
        </trans-unit>
        <trans-unit id="13c09e93ba14e7c6aec0f030ed4749ec45cde327" translate="yes" xml:space="preserve">
          <source>It's faster to run without the debugger by pressing &lt;code&gt;Ctrl-F5&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ctrl-F5&lt;/code&gt; を押すと、デバッガーなしで実行した方が速くなります。</target>
        </trans-unit>
        <trans-unit id="c0a37d50ae18f2cda48cc6b441cf45b1f4e85db3" translate="yes" xml:space="preserve">
          <source>It's harder to target an element that is entering a view because it isn't in the DOM yet. So, use the aliases &lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt; to target HTML elements that are inserted or removed from a view.</source>
          <target state="translated">ビューに入る要素をターゲットにすることは、まだDOMにないため、困難です。したがって、エイリアス &lt;code&gt;:enter&lt;/code&gt; と &lt;code&gt;:leave&lt;/code&gt; を使用して、ビューに挿入またはビューから削除されるHTML要素をターゲットにします。</target>
        </trans-unit>
        <trans-unit id="9ce2298b180c8607f70e58c08e6ccdb870ec4f0c" translate="yes" xml:space="preserve">
          <source>It's identical to &lt;em&gt;Carol&lt;/em&gt;'s constructor except for the additional &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">追加の &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;デコレーターを除いて、これは&lt;em&gt;Carol&lt;/em&gt;のコンストラクターと同じです。</target>
        </trans-unit>
        <trans-unit id="eae527c8fde7a93b29c9ba68e0c762ac9e719b0c" translate="yes" xml:space="preserve">
          <source>It's important to note that this guarantee is &lt;strong&gt;stronger&lt;/strong&gt; than that provided by the normal web deployment model. Without a service worker, there is no guarantee that code lazily loaded later in a running app is from the same version as the initial code for the app.</source>
          <target state="translated">この保証は、通常のWeb配置モデルによって提供される保証&lt;strong&gt;より&lt;/strong&gt;も&lt;strong&gt;強力&lt;/strong&gt;であることに注意することが重要です。Service Workerがない場合、実行中のアプリで後で遅延ロードされるコードがアプリの初期コードと同じバージョンであることは保証されません。</target>
        </trans-unit>
        <trans-unit id="9db5b0bbcab65b4cd73852c1ab0915c241d74fda" translate="yes" xml:space="preserve">
          <source>It's important to note that you cannot register this worker directly, as old clients with cached state may not see a new &lt;code&gt;index.html&lt;/code&gt; which installs the different worker script. Instead, you must serve the contents of &lt;code&gt;safety-worker.js&lt;/code&gt; at the URL of the Service Worker script you are trying to unregister, and must continue to do so until you are certain all users have successfully unregistered the old worker. For most sites, this means that you should serve the safety worker at the old Service Worker URL forever.</source>
          <target state="translated">キャッシュされた状態の古いクライアントでは、別のワーカースクリプトをインストールする新しい &lt;code&gt;index.html&lt;/code&gt; が表示されない可能性があるため、このワーカーを直接登録できないことに注意することが重要です。代わりに、登録解除しようとしているService WorkerスクリプトのURLで &lt;code&gt;safety-worker.js&lt;/code&gt; コンテンツを提供する必要があり、すべてのユーザーが古いワーカーの登録を正常に解除したことが確認されるまで、提供を継続する必要があります。ほとんどのサイトでは、これは古いService WorkerのURLでセーフティワーカーに永続的にサービスを提供する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="e74e1f2339eafee8c333b7f5cf205b600c69bb1c" translate="yes" xml:space="preserve">
          <source>It's nice to tidy up and you'll be grateful to yourself later. Here's the class after pruning away the dead code.</source>
          <target state="translated">片付けるのは気持ちがいいし、あとで自分に感謝することになります。デッドコードを剪定した後のクラスはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="34494c9030345f1487599d11e1d17558d38fe1c0" translate="yes" xml:space="preserve">
          <source>It's no longer possible to overwrite lifecycle hooks with mocks on directive instances for testing (instead, modify the lifecycle hook on the directive type itself).</source>
          <target state="translated">テストのためにディレクティブインスタンスのライフサイクルフックをモックで上書きすることはできなくなりました(代わりに、ディレクティブタイプ自体のライフサイクルフックを修正してください)。</target>
        </trans-unit>
        <trans-unit id="a88c6800d206ae0cb17eaddfbc40c121f4954f34" translate="yes" xml:space="preserve">
          <source>It's not as simple as intercepting a request to the root address &lt;code&gt;/&lt;/code&gt;. The browser could ask for one of the application routes such as &lt;code&gt;/dashboard&lt;/code&gt;, &lt;code&gt;/heroes&lt;/code&gt;, or &lt;code&gt;/detail:12&lt;/code&gt;. In fact, if the app were only rendered by the server, &lt;em&gt;every&lt;/em&gt; app link clicked would arrive at the server as a navigation URL intended for the router.</source>
          <target state="translated">ルートアドレス &lt;code&gt;/&lt;/code&gt; へのリクエストをインターセプトするほど簡単ではありません。ブラウザは、 &lt;code&gt;/dashboard&lt;/code&gt; 、 &lt;code&gt;/heroes&lt;/code&gt; 、 &lt;code&gt;/detail:12&lt;/code&gt; などのアプリケーションルートの1つを要求する可能性があります。実際、アプリがサーバーによってのみレンダリングされる場合、クリックされた&lt;em&gt;すべての&lt;/em&gt;アプリリンクは、ルーター向けのナビゲーションURLとしてサーバーに到達します。</target>
        </trans-unit>
        <trans-unit id="4480eae9954dacdb424800801156a46c1ca47a25" translate="yes" xml:space="preserve">
          <source>It's not much fun updating the template to test the custom pipe. Upgrade the example to a &quot;Power Boost Calculator&quot; that combines your pipe and two-way data binding with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">カスタムパイプをテストするためにテンプレートを更新するのはそれほど楽しいことではありません。例を、パイプと &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; による双方向データバインディングを組み合わせた「Power Boost Calculator」にアップグレードします。</target>
        </trans-unit>
        <trans-unit id="36d858deb7acc1b44aba6f193eae181e7610542d" translate="yes" xml:space="preserve">
          <source>It's not possible to stub the component's &lt;code&gt;HeroDetailService&lt;/code&gt; in the &lt;code&gt;providers&lt;/code&gt; of the &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt;. Those are providers for the &lt;em&gt;testing module&lt;/em&gt;, not the component. They prepare the dependency injector at the &lt;em&gt;fixture level&lt;/em&gt;.</source>
          <target state="translated">これは、コンポーネントのスタブすることはできません &lt;code&gt;HeroDetailService&lt;/code&gt; の中 &lt;code&gt;providers&lt;/code&gt; の &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; 。これらはコンポーネントではなく、&lt;em&gt;テストモジュールの&lt;/em&gt;プロバイダーです。&lt;em&gt;フィクスチャレベル&lt;/em&gt;で依存関係インジェクターを準備し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7933cc3e6088270dbdd94b164b5a3e681402b77e" translate="yes" xml:space="preserve">
          <source>It's often better to create an appropriate folder for them in the &lt;code&gt;tests&lt;/code&gt; directory.</source>
          <target state="translated">多くの場合、 &lt;code&gt;tests&lt;/code&gt; ディレクトリに適切なフォルダを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="69b70cec57aa9f3f0a7a6b85e143f4fb3199dd40" translate="yes" xml:space="preserve">
          <source>It's often easier and more clear to filter with a standard &lt;code&gt;HTMLElement&lt;/code&gt; method such as &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelector()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelectorAll()&lt;/a&gt;&lt;/code&gt;, as you'll see in the next set of tests.</source>
          <target state="translated">次の一連のテストでわかるように、 &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelector()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelectorAll()&lt;/a&gt;&lt;/code&gt; などの標準の &lt;code&gt;HTMLElement&lt;/code&gt; メソッドでフィルタリングする方が簡単で明確な場合がよくあります。</target>
        </trans-unit>
        <trans-unit id="33dd8893cf93c4e6ca6f4628047b460d359f5f36" translate="yes" xml:space="preserve">
          <source>It's often easier and more clear to filter with a standard &lt;code&gt;HTMLElement&lt;/code&gt; method such as &lt;code&gt;querySelector()&lt;/code&gt; or &lt;code&gt;querySelectorAll()&lt;/code&gt;.</source>
          <target state="translated">多くの場合、 &lt;code&gt;querySelector()&lt;/code&gt; や &lt;code&gt;querySelectorAll()&lt;/code&gt; などの標準の &lt;code&gt;HTMLElement&lt;/code&gt; メソッドを使用してフィルタリングする方が簡単で明確です。</target>
        </trans-unit>
        <trans-unit id="de2e6fbff08a65946c5039baf520c82a6fb6449d" translate="yes" xml:space="preserve">
          <source>It's possible for &lt;code&gt;$locationChange&lt;/code&gt; events to happen, but for the browser URL (window.location) to remain unchanged. This &lt;code&gt;onChange&lt;/code&gt; callback will fire only when AngularJS actually updates the browser URL (window.location).</source>
          <target state="translated">&lt;code&gt;$locationChange&lt;/code&gt; イベントが発生する可能性がありますが、ブラウザーのURL（window.location）は変更されないままです。この &lt;code&gt;onChange&lt;/code&gt; コールバックは、AngularJSが実際にブラウザーのURL（window.location）を更新したときにのみ発生します。</target>
        </trans-unit>
        <trans-unit id="0cb9b96f78d78cd173396cf253b6e58b220b0340" translate="yes" xml:space="preserve">
          <source>It's possible to ask the service worker to check if any updates have been deployed to the server. The service worker checks for updates during initialization and on each navigation request&amp;mdash;that is, when the user navigates from a different address to your app. However, you might choose to manually check for updates if you have a site that changes frequently or want updates to happen on a schedule.</source>
          <target state="translated">サーバーに更新がデプロイされているかどうかを確認するようにServiceWorkerに依頼することができます。Service Workerは、初期化中およびナビゲーションリクエストごとに、つまり、ユーザーが別のアドレスからアプリに移動したときに更新を確認します。ただし、頻繁に変更されるサイトがある場合、またはスケジュールに従って更新を実行する場合は、更新を手動で確認することを選択できます。</target>
        </trans-unit>
        <trans-unit id="4d37c9df140e369670ed6bb296a85b5b6dfb223d" translate="yes" xml:space="preserve">
          <source>It's possible to ask the service worker to check if any updates have been deployed to the server. You might choose to do this if you have a site that changes frequently or want updates to happen on a schedule.</source>
          <target state="translated">サービスワーカーにアップデートがサーバーにデプロイされたかどうかを確認させることができます。頻繁に変更するサイトがある場合や、更新がスケジュール通りに行われるようにしたい場合は、この方法を選択するかもしれません。</target>
        </trans-unit>
        <trans-unit id="af32a95f4c2aebf2b62f7cd376de21ad5a8dffab" translate="yes" xml:space="preserve">
          <source>It's preferable to pre-fetch data from the server so it's ready the moment the route is activated. This also allows you to handle errors before routing to the component. There's no point in navigating to a crisis detail for an &lt;code&gt;id&lt;/code&gt; that doesn't have a record. It'd be better to send the user back to the &lt;code&gt;Crisis &lt;a href=&quot;../api/common/numbersymbol#List&quot;&gt;List&lt;/a&gt;&lt;/code&gt; that shows only valid crisis centers.</source>
          <target state="translated">ルートがアクティブになった瞬間に準備ができるように、サーバーからデータをプリフェッチすることをお勧めします。これにより、コンポーネントにルーティングする前にエラーを処理することもできます。レコードを持たない &lt;code&gt;id&lt;/code&gt; 危機の詳細に移動しても意味がありません。有効な危機管理センターのみが表示されている &lt;code&gt;Crisis &lt;a href=&quot;../api/common/numbersymbol#List&quot;&gt;List&lt;/a&gt;&lt;/code&gt; ユーザーを戻すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="871df3f9bf4a0065fd65bd1d8ff90e84ce8843d2" translate="yes" xml:space="preserve">
          <source>It's still an async test, calling &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt;, because the component itself calls &lt;code&gt;setTimeout()&lt;/code&gt; when processing errors.</source>
          <target state="translated">コンポーネント自体がエラーの処理時に &lt;code&gt;setTimeout()&lt;/code&gt; を呼び出すため、これはまだ非同期テストであり、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; および&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick（）を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="75b5fea13d499ea02d483d5825f4588a4c55e4de" translate="yes" xml:space="preserve">
          <source>It's still an async test, calling &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;, because the component itself calls &lt;code&gt;setTimeout()&lt;/code&gt; when processing errors.</source>
          <target state="translated">コンポーネント自体がエラーを処理するときに &lt;code&gt;setTimeout()&lt;/code&gt; を呼び出すため、これはまだ非同期テストであり、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="11cce46b02b398c680b8cd2e4906b38f9b8086dd" translate="yes" xml:space="preserve">
          <source>It's the brackets (&lt;code&gt;[]&lt;/code&gt;) that make it an attribute selector. Angular locates each element in the template that has an attribute named &lt;code&gt;appHighlight&lt;/code&gt; and applies the logic of this directive to that element.</source>
          <target state="translated">属性セレクターを構成するのは角括弧（ &lt;code&gt;[]&lt;/code&gt; ）です。Angularは、 &lt;code&gt;appHighlight&lt;/code&gt; という名前の属性を持つテンプレート内の各要素を見つけ、このディレクティブのロジックをその要素に適用します。</target>
        </trans-unit>
        <trans-unit id="d0e169e22ebee633303a5cfbc4f3efc6239042d4" translate="yes" xml:space="preserve">
          <source>It's time to add real features to the app's current placeholder crisis center.</source>
          <target state="translated">アプリの現在のプレースホルダ危機管理センターに本当の機能を追加する時が来ました。</target>
        </trans-unit>
        <trans-unit id="93572108533b695852669c26df4d5072f1d7409a" translate="yes" xml:space="preserve">
          <source>It's used throughout the application, perhaps most simply in the &lt;code&gt;AboutComponent&lt;/code&gt;:</source>
          <target state="translated">これは、アプリケーション全体で使用されます。おそらく最も単純に &lt;code&gt;AboutComponent&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="90d2c8844c1e3e393da4af416666932eaeab7062" translate="yes" xml:space="preserve">
          <source>IterableChangeRecord</source>
          <target state="translated">IterableChangeRecord</target>
        </trans-unit>
        <trans-unit id="65bf71a2aefacfda4d7b23bc058c87dadebdf19f" translate="yes" xml:space="preserve">
          <source>IterableChanges</source>
          <target state="translated">IterableChanges</target>
        </trans-unit>
        <trans-unit id="c04313d783fe0e607c4d190cf131f3656b1d8927" translate="yes" xml:space="preserve">
          <source>IterableDiffer</source>
          <target state="translated">IterableDiffer</target>
        </trans-unit>
        <trans-unit id="c7213c9ad2d27ea342b15057ff78294c56b1b169" translate="yes" xml:space="preserve">
          <source>IterableDifferFactory</source>
          <target state="translated">IterableDifferFactory</target>
        </trans-unit>
        <trans-unit id="4364a912da1d06d537974eb8581e6a149ccdd75d" translate="yes" xml:space="preserve">
          <source>IterableDiffers</source>
          <target state="translated">IterableDiffers</target>
        </trans-unit>
        <trans-unit id="b4f02bf069d0c4048fa93e0b57dc8e1868b21afd" translate="yes" xml:space="preserve">
          <source>Iterate over a set of operations which when applied to the original &lt;code&gt;Iterable&lt;/code&gt; will produce the new &lt;code&gt;Iterable&lt;/code&gt;.</source>
          <target state="translated">元の &lt;code&gt;Iterable&lt;/code&gt; に適用されると新しい &lt;code&gt;Iterable&lt;/code&gt; を生成する一連の操作を反復します。</target>
        </trans-unit>
        <trans-unit id="d9ffa02faa4bce072280e6f955939fc074385b0c" translate="yes" xml:space="preserve">
          <source>Iterate over all added items.</source>
          <target state="translated">追加されたすべての項目を反復処理します。</target>
        </trans-unit>
        <trans-unit id="7b02d8c737198c5290f7d076a7fb4c7d9d683e29" translate="yes" xml:space="preserve">
          <source>Iterate over all changes. &lt;code&gt;&lt;a href=&quot;iterablechangerecord&quot;&gt;IterableChangeRecord&lt;/a&gt;&lt;/code&gt; will contain information about changes to each item.</source>
          <target state="translated">すべての変更を繰り返します。 &lt;code&gt;&lt;a href=&quot;iterablechangerecord&quot;&gt;IterableChangeRecord&lt;/a&gt;&lt;/code&gt; には、各アイテムの変更に関する情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="beb98ba78ea6ecd3802b7151eadeefd5b1c99318" translate="yes" xml:space="preserve">
          <source>Iterate over all changes. &lt;code&gt;&lt;a href=&quot;keyvaluechangerecord&quot;&gt;KeyValueChangeRecord&lt;/a&gt;&lt;/code&gt; will contain information about changes to each item.</source>
          <target state="translated">すべての変更を繰り返します。 &lt;code&gt;&lt;a href=&quot;keyvaluechangerecord&quot;&gt;KeyValueChangeRecord&lt;/a&gt;&lt;/code&gt; には、各アイテムの変更に関する情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="29c0d96526568e9909421843c0f1afea4a690e7c" translate="yes" xml:space="preserve">
          <source>Iterate over all items which had their identity (as computed by the &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt;) changed.</source>
          <target state="translated">（ &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt; によって計算された）IDが変更されたすべてのアイテムを反復処理します。</target>
        </trans-unit>
        <trans-unit id="4e85b2b64bc908fceeecabec10e0065e19464566" translate="yes" xml:space="preserve">
          <source>Iterate over all keys for which values have changed.</source>
          <target state="translated">値が変更されたすべてのキーを繰り返し処理します。</target>
        </trans-unit>
        <trans-unit id="fb1385171738b82cea0b7d429c1042f5e8978d31" translate="yes" xml:space="preserve">
          <source>Iterate over all moved items.</source>
          <target state="translated">すべての移動したアイテムを反復します。</target>
        </trans-unit>
        <trans-unit id="cfb6e0e8a0c18815505bb8efd4f29e4d8ac463a0" translate="yes" xml:space="preserve">
          <source>Iterate over all removed items.</source>
          <target state="translated">削除されたすべてのアイテムを反復処理します。</target>
        </trans-unit>
        <trans-unit id="d45779a25ee648454d24aa9fdd02da54d493be84" translate="yes" xml:space="preserve">
          <source>Iterate over changes in the order of original &lt;code&gt;Iterable&lt;/code&gt; showing where the original items have moved.</source>
          <target state="translated">元のアイテムが移動した場所を示す元の &lt;code&gt;Iterable&lt;/code&gt; の順序で変更を反復します。</target>
        </trans-unit>
        <trans-unit id="66bd7b588566a69a193c5a2f36874c0414c74a1d" translate="yes" xml:space="preserve">
          <source>Iterate over changes in the order of original Map showing where the original items have moved.</source>
          <target state="translated">元のアイテムがどこに移動したかを示す元のマップの順序の変更を繰り返します。</target>
        </trans-unit>
        <trans-unit id="ea79adbb1c7288e6d303027d9db472281313ff38" translate="yes" xml:space="preserve">
          <source>Iterating through the values in a stream</source>
          <target state="translated">ストリーム内の値を繰り返し処理する</target>
        </trans-unit>
        <trans-unit id="6406032da55c56d8885f6b288e705bcb402f7d72" translate="yes" xml:space="preserve">
          <source>Its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request/mode&quot;&gt;mode&lt;/a&gt; is &lt;code&gt;navigation&lt;/code&gt;.</source>
          <target state="translated">その&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request/mode&quot;&gt;モード&lt;/a&gt;は &lt;code&gt;navigation&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9b563b2914e52ad780cc6bdd2b9a6539c97c4b58" translate="yes" xml:space="preserve">
          <source>Its URL matches certain criteria (see below).</source>
          <target state="translated">そのURLは、特定の条件(以下を参照)に一致します。</target>
        </trans-unit>
        <trans-unit id="2e88fcbebf8ad2a04b9f75bc715de634f8a37725" translate="yes" xml:space="preserve">
          <source>Its companion component class &lt;code&gt;flying-heroes.component.ts (v1)&lt;/code&gt; provides heroes, adds heroes into the array, and resets the array.</source>
          <target state="translated">そのコンパニオンコンポーネントクラス &lt;code&gt;flying-heroes.component.ts (v1)&lt;/code&gt; は、ヒーローを提供し、配列にヒーローを追加し、配列をリセットします。</target>
        </trans-unit>
        <trans-unit id="f3742ddc65ddad911e4f7f284021686e152498d7" translate="yes" xml:space="preserve">
          <source>Ivy</source>
          <target state="translated">Ivy</target>
        </trans-unit>
        <trans-unit id="6417fef38d8d9de0afac7152272dfc555180d824" translate="yes" xml:space="preserve">
          <source>Ivy and Universal/App shell</source>
          <target state="translated">アイビーとユニバーサル/アプリシェル</target>
        </trans-unit>
        <trans-unit id="160098452aad6512767e7539f0472d4967ddc942" translate="yes" xml:space="preserve">
          <source>Ivy and libraries</source>
          <target state="translated">Ivy とライブラリ</target>
        </trans-unit>
        <trans-unit id="46a052845c1cd470a77a7e698fb651d5f8c56d52" translate="yes" xml:space="preserve">
          <source>Ivy applications can be built with libraries that were created with the View Engine compiler. This compatibility is provided by a tool known as the Angular compatibility compiler (&lt;code&gt;ngcc&lt;/code&gt;). CLI commands run &lt;code&gt;ngcc&lt;/code&gt; as needed when performing an Angular build.</source>
          <target state="translated">Ivyアプリケーションは、ViewEngineコンパイラで作成されたライブラリを使用して構築できます。この互換性は、Angular互換性コンパイラ（ &lt;code&gt;ngcc&lt;/code&gt; ）と呼ばれるツールによって提供されます。CLIコマンドは、Angularビルドを実行するときに必要に応じて &lt;code&gt;ngcc&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="6172cf4831e34f113151cb2ac9635dff5d8d0b0d" translate="yes" xml:space="preserve">
          <source>Ivy compatibility guide</source>
          <target state="translated">アイビー互換性ガイド</target>
        </trans-unit>
        <trans-unit id="84a2abde412642218f0e5080324588754f35f7af" translate="yes" xml:space="preserve">
          <source>Ivy does not support merging i18n translations when using JIT mode. If you &lt;a href=&quot;ivy#opting-out-of-ivy-in-version-9&quot;&gt;disable Ivy&lt;/a&gt; and are using JIT mode, see &lt;a href=&quot;https://v8.angular.io/guide/i18n#merge-with-the-jit-compiler&quot;&gt;merging with the JIT compiler&lt;/a&gt;.</source>
          <target state="translated">Ivyは、JITモードを使用する場合のi18n翻訳のマージをサポートしていません。&lt;a href=&quot;ivy#opting-out-of-ivy-in-version-9&quot;&gt;Ivy&lt;/a&gt;を無効にし、JITモードを使用&lt;a href=&quot;https://v8.angular.io/guide/i18n#merge-with-the-jit-compiler&quot;&gt;している場合は、JITコンパイラとのマージを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f1683c48b5f7747723f4d8164bb4a3451f3cc60d" translate="yes" xml:space="preserve">
          <source>Ivy features and compatibility</source>
          <target state="translated">アイビーの特徴と相性</target>
        </trans-unit>
        <trans-unit id="533daa94e88ce1081e6444153c285b64693f39ce" translate="yes" xml:space="preserve">
          <source>Ivy is the code name for Angular's &lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;next-generation compilation and rendering pipeline&lt;/a&gt;. Starting with Angular version 8, you can choose to opt in to start using a preview version of Ivy and help in its continuing development and tuning.</source>
          <target state="translated">Ivyは、Angularの&lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;次世代のコンパイルおよびレンダリングパイプライン&lt;/a&gt;のコード名です。Angularバージョン8以降では、Ivyのプレビューバージョンの使用を開始することを選択でき、Ivyの継続的な開発と調整に役立ちます。</target>
        </trans-unit>
        <trans-unit id="33a8f2f4e1a0fb21c331debb10a11bb20a968878" translate="yes" xml:space="preserve">
          <source>Ivy is the code name for Angular's &lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;next-generation compilation and rendering pipeline&lt;/a&gt;. With the version 9 release of Angular, the new compiler and runtime instructions are used by default instead of the older compiler and runtime, known as &lt;a href=&quot;glossary#ve&quot;&gt;View Engine&lt;/a&gt;.</source>
          <target state="translated">Ivyは、Angularの&lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;次世代コンパイルおよびレンダリングパイプライン&lt;/a&gt;のコードネームです。Angularのバージョン9リリースでは、&lt;a href=&quot;glossary#ve&quot;&gt;View Engine&lt;/a&gt;と呼ばれる古いコンパイラーとランタイムの代わりに、新しいコンパイラーとランタイム命令がデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="914de7c4c667979756cde1759caaab274ed4150c" translate="yes" xml:space="preserve">
          <source>Ivy is the code name for Angular's &lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;next-generation compilation and rendering pipeline&lt;/a&gt;. With the version 9 release of Angular, the new compiler and runtime instructions are used by default instead of the older compiler and runtime, known as View Engine.</source>
          <target state="translated">Ivyは、Angularの&lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;次世代コンパイルおよびレンダリングパイプライン&lt;/a&gt;のコードネームです。Angularのバージョン9リリースでは、View Engineと呼ばれる古いコンパイラーとランタイムの代わりに、新しいコンパイラーとランタイム命令がデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="97c35ca691769b08824133a20d0b01e844696c10" translate="yes" xml:space="preserve">
          <source>JIT compilation is the default (as opposed to AOT compilation) when you run Angular's &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; CLI commands, and is a good choice during development. JIT mode is strongly discouraged for production use because it results in large application payloads that hinder the bootstrap performance.</source>
          <target state="translated">JITコンパイルは、Angularの &lt;code&gt;ng build&lt;/code&gt; および &lt;code&gt;ng serve&lt;/code&gt; CLIコマンドを実行するときのデフォルト（AOTコンパイルとは対照的）であり、開発中の良い選択です。JITモードは、アプリケーションのペイロードが大きくなり、ブートストラップのパフォーマンスが低下するため、本番環境での使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="100955a614a47a100a0c1d379a56348ad67eab92" translate="yes" xml:space="preserve">
          <source>JIT compilation is the default when you run the &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; (build only) or &lt;a href=&quot;cli/serve&quot;&gt;&lt;code&gt;ng serve&lt;/code&gt;&lt;/a&gt; (build and serve locally) CLI commands:</source>
          <target state="translated">&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;（ビルドのみ）または&lt;a href=&quot;cli/serve&quot;&gt; &lt;code&gt;ng serve&lt;/code&gt; &lt;/a&gt;（ローカルでビルドおよびサーブ）CLIコマンドを実行すると、JITコンパイルがデフォルトになります。</target>
        </trans-unit>
        <trans-unit id="f39e4bdefdba26f9731fa104f4dc571370e960e1" translate="yes" xml:space="preserve">
          <source>JSON files</source>
          <target state="translated">JSONファイル</target>
        </trans-unit>
        <trans-unit id="200ea8b30d97106e227dd426de9470d1b9e5f6dc" translate="yes" xml:space="preserve">
          <source>JSONP Example</source>
          <target state="translated">JSONPの例</target>
        </trans-unit>
        <trans-unit id="5126883581dd0d87d57ac5704c8df63b2bc61717" translate="yes" xml:space="preserve">
          <source>Jasmine &lt;em&gt;done()&lt;/em&gt;</source>
          <target state="translated">ジャスミン&lt;em&gt;done（）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b8ef1b9cd0e4f4d6572da9bde4bff2706b7e3ca" translate="yes" xml:space="preserve">
          <source>Jasmine also provides a &lt;code&gt;clock&lt;/code&gt; feature to mock dates. Angular automatically runs tests that are run after &lt;code&gt;jasmine.clock().install()&lt;/code&gt; is called inside a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; method until &lt;code&gt;jasmine.clock().uninstall()&lt;/code&gt; is called. &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; is not needed and throws an error if nested.</source>
          <target state="translated">ジャスミンは日付を模擬する &lt;code&gt;clock&lt;/code&gt; 機能も提供します。Angular は、 &lt;code&gt;jasmine.clock().uninstall()&lt;/code&gt; が呼び出されるまで、 &lt;code&gt;jasmine.clock().install()&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; メソッド内で呼び出された後に実行されるテストを自動的に実行します。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）は不要であり、ネストされている場合はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="e4e56910ea532a32775fa361c6e193dfb89d0f17" translate="yes" xml:space="preserve">
          <source>JavaScript Modules vs. NgModules</source>
          <target state="translated">JavaScript モジュールと NgModules の比較</target>
        </trans-unit>
        <trans-unit id="fdca30518a58215f071ba5c35508f58fe8c3fc88" translate="yes" xml:space="preserve">
          <source>JavaScript and Angular use modules to organize code, and though they organize it differently, Angular apps rely on both.</source>
          <target state="translated">JavaScriptとAngularはモジュールを使ってコードを整理しており、整理方法は異なりますが、Angularアプリは両方に依存しています。</target>
        </trans-unit>
        <trans-unit id="e427373b78bde22bea74df011ec7e3ebee573414" translate="yes" xml:space="preserve">
          <source>JavaScript features new to ES2015, like arrow functions, &lt;code&gt;let&lt;/code&gt;s and &lt;code&gt;const&lt;/code&gt;s, default function parameters, and destructuring assignments can also be gradually added to make the code more expressive.</source>
          <target state="translated">アロー関数、 &lt;code&gt;let&lt;/code&gt; sと &lt;code&gt;const&lt;/code&gt; 、デフォルトの関数パラメーター、構造化割り当てなどのES2015の新しいJavaScript機能を徐々に追加して、コードをより表現力豊かにすることもできます。</target>
        </trans-unit>
        <trans-unit id="813155b28b8ee2bbf4f6efd8be0aff1a8379446a" translate="yes" xml:space="preserve">
          <source>JavaScript modules</source>
          <target state="translated">JavaScriptモジュール</target>
        </trans-unit>
        <trans-unit id="6272c55fb8883905bd42232de7e38543bd97f3e0" translate="yes" xml:space="preserve">
          <source>JavaScript modules and NgModules can help you modularize your code, but they are very different. Angular apps rely on both kinds of modules.</source>
          <target state="translated">JavaScriptモジュールとNgModulesはコードをモジュール化するのに役立ちますが、両者は大きく異なります。Angularアプリは両方の種類のモジュールに依存しています。</target>
        </trans-unit>
        <trans-unit id="80315fb1334c813a6b687f8cf6aba6867ead2d1b" translate="yes" xml:space="preserve">
          <source>JavaScript modules help you namespace, preventing accidental global variables.</source>
          <target state="translated">JavaScriptのモジュールは、名前空間を助け、不慮のグローバル変数を防止します。</target>
        </trans-unit>
        <trans-unit id="638d218e5afc21a4aaced22467fdfeee6f031a25" translate="yes" xml:space="preserve">
          <source>JavaScript modules vs. NgModules</source>
          <target state="translated">JavaScript モジュールと NgModules の比較</target>
        </trans-unit>
        <trans-unit id="3b77e8995b03370ac676628ae0b22c65d3fac5b0" translate="yes" xml:space="preserve">
          <source>JavaScript modules: Files containing code</source>
          <target state="translated">JavaScript モジュール。コードを含むファイル</target>
        </trans-unit>
        <trans-unit id="7466df73c7a75f7fab07289c7c1fb62ec498abba" translate="yes" xml:space="preserve">
          <source>JitCompilerFactory</source>
          <target state="translated">JitCompilerFactory</target>
        </trans-unit>
        <trans-unit id="a22aee298933fd3299920aebce3877a6554d67bf" translate="yes" xml:space="preserve">
          <source>Join our community</source>
          <target state="translated">コミュニティに参加する</target>
        </trans-unit>
        <trans-unit id="b069d85c6c5a1040d5766e98392651c7573ae4fc" translate="yes" xml:space="preserve">
          <source>Join the Angular community</source>
          <target state="translated">Angularコミュニティに参加する</target>
        </trans-unit>
        <trans-unit id="87e6a6731c3d14a812bc4b63bb7fde49224e7eb9" translate="yes" xml:space="preserve">
          <source>Joins two parts of a URL with a slash if needed.</source>
          <target state="translated">必要に応じてURLの2つの部分をスラッシュで結合します。</target>
        </trans-unit>
        <trans-unit id="5476e9b9f4a192c11d46458bd1af59f8fb187f48" translate="yes" xml:space="preserve">
          <source>JsonPipe</source>
          <target state="translated">JsonPipe</target>
        </trans-unit>
        <trans-unit id="f9734727c3307bfa948623de46c33ca6cfb42687" translate="yes" xml:space="preserve">
          <source>JsonpClientBackend</source>
          <target state="translated">JsonpClientBackend</target>
        </trans-unit>
        <trans-unit id="6dc692df4f14103795aed4e22a3eac866f471215" translate="yes" xml:space="preserve">
          <source>JsonpInterceptor</source>
          <target state="translated">JsonpInterceptor</target>
        </trans-unit>
        <trans-unit id="46405c235890cb26d0b5a6bcba77b2127eb88a79" translate="yes" xml:space="preserve">
          <source>Jun 24, 2020</source>
          <target state="translated">2020年6月24日</target>
        </trans-unit>
        <trans-unit id="3d20c8ac3c0ebca318b90dcf112410be899903bd" translate="yes" xml:space="preserve">
          <source>Just as TypeScript catches type errors in your code, Angular checks the expressions and bindings within the templates of your application and can report any type errors it finds. Angular currently has three modes of doing this, depending on the value of the &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; and &lt;code&gt;strictTemplates&lt;/code&gt; flags in the &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt;.</source>
          <target state="translated">TypeScriptがコード内のタイプエラーをキャッチするのと同じように、Angularはアプリケーションのテンプレート内の式とバインディングをチェックし、見つかったタイプエラーを報告できます。アンギュラは、現在の値に応じて、これを行うための3つのモードがあり &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; と &lt;code&gt;strictTemplates&lt;/code&gt; の中フラグ&lt;a href=&quot;typescript-configuration&quot;&gt;活字体の設定ファイル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86ade25665aab98adbdecbd2678a114f46ce9f95" translate="yes" xml:space="preserve">
          <source>Just as a form control instance gives you control over a single input field, a form group instance tracks the form state of a group of form control instances (for example, a form). Each control in a form group instance is tracked by name when creating the form group. The following example shows how to manage multiple form control instances in a single group.</source>
          <target state="translated">フォームコントロールインスタンスが単一の入力フィールドをコントロールするように、フォームグループインスタンスはフォームコントロールインスタンスのグループ(例えばフォーム)のフォーム状態を追跡します。フォームグループインスタンス内の各コントロールは、フォームグループを作成する際に名前で追跡されます。次の例は、1 つのグループで複数のフォームコントロールインスタンスを管理する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7ba5c7cfe37fd57ce918bf417c82139cfd6e4c6d" translate="yes" xml:space="preserve">
          <source>Just as for components, the metadata for a directive associates the decorated class with a &lt;code&gt;selector&lt;/code&gt; element that you use to insert it into HTML. In templates, directives typically appear within an element tag as attributes, either by name or as the target of an assignment or a binding.</source>
          <target state="translated">コンポーネントと同様に、ディレクティブのメタデータは、装飾されたクラスを、HTMLへの挿入に使用する &lt;code&gt;selector&lt;/code&gt; 要素に関連付けます。テンプレートでは、ディレクティブは通常、要素タグ内に属性として、名前によって、または割り当てやバインディングのターゲットとして表示されます。</target>
        </trans-unit>
        <trans-unit id="952028f0e1b2702fd956f9f61aab0587b89f85ff" translate="yes" xml:space="preserve">
          <source>Just as in the &lt;code&gt;FlowerService&lt;/code&gt; example, if you add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; to the constructor for the &lt;code&gt;AnimalService&lt;/code&gt;, the injector won't look in the current &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt; for the &lt;code&gt;AnimalService&lt;/code&gt;.</source>
          <target state="translated">ちょうどのように &lt;code&gt;FlowerService&lt;/code&gt; のあなたが追加した場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; のコンストラクタに &lt;code&gt;AnimalService&lt;/code&gt; 、インジェクタは、現在では見ていないだろう &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; の &lt;code&gt;ElementInjector&lt;/code&gt; ため &lt;code&gt;AnimalService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50a3565cd343f55461efc882d3f1056f8f2843ef" translate="yes" xml:space="preserve">
          <source>Just as with the &lt;code&gt;FlowerService&lt;/code&gt; example, the &lt;code&gt;AnimalService&lt;/code&gt; is provided in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. This means that since the injector first looks in the &lt;code&gt;ElementInjector&lt;/code&gt; of the component, it finds the &lt;code&gt;AnimalService&lt;/code&gt; value of 🐶 (puppy). It doesn't need to continue searching the &lt;code&gt;ElementInjector&lt;/code&gt; tree, nor does it need to search the &lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">ちょうどのように &lt;code&gt;FlowerService&lt;/code&gt; の例、 &lt;code&gt;AnimalService&lt;/code&gt; が設けられている &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータ。これは、インジェクターが最初にコンポーネントの &lt;code&gt;ElementInjector&lt;/code&gt; を検索する &lt;code&gt;AnimalService&lt;/code&gt; 、Service（子犬）のAnimalService値を見つけることを意味します。 &lt;code&gt;ElementInjector&lt;/code&gt; ツリーを検索し続ける必要はなく、 &lt;code&gt;ModuleInjector&lt;/code&gt; を検索する必要もありません。</target>
        </trans-unit>
        <trans-unit id="bcbe13374c0b6e5160a92304e2958769789d6903" translate="yes" xml:space="preserve">
          <source>Just as you can project AngularJS content into Angular components, you can &lt;em&gt;transclude&lt;/em&gt; Angular content into AngularJS components, whenever you are using upgraded versions from them.</source>
          <target state="translated">あなたは角度成分にAngularJSコンテンツを投影できるのと同じように、あなたができる&lt;em&gt;transclude&lt;/em&gt;あなたが彼らからアップグレードしたバージョンを使用しているときはいつでも、AngularJS成分に角度内容を。</target>
        </trans-unit>
        <trans-unit id="1d3b5872a8da8780f730b9a6d692e8ef62ba276b" translate="yes" xml:space="preserve">
          <source>Just like Web and the entire web ecosystem, Angular is continuously improving. Angular balances continuous improvement with a strong focus on stability and making updates easy. Keeping your Angular app up-to-date enables you to take advantage of leading-edge new features, as well as optimizations and bug fixes.</source>
          <target state="translated">WebやWebのエコシステム全体がそうであるように、Angularも継続的に改善されています。Angularは継続的な改善と安定性への強いこだわり、アップデートの容易さのバランスをとっています。Angularアプリを最新の状態に保つことで、最適化やバグ修正だけでなく、最先端の新機能を利用することができます。</target>
        </trans-unit>
        <trans-unit id="5ca2b5f86d531d00a29d9169b827a1109624e083" translate="yes" xml:space="preserve">
          <source>Just like synchronous validators have the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interfaces, asynchronous validators have their own counterparts: &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidatorfn&quot;&gt;AsyncValidatorFn&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同期バリデーターに &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; インターフェースがあるのと同じように、非同期バリデーターには独自の対応物である &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidatorfn&quot;&gt;AsyncValidatorFn&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="d673c861402fe0c15e579d517c4f053b2fcbfefe" translate="yes" xml:space="preserve">
          <source>Just like with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, you can use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on a property of the child component but its type should be &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ちょうどと同じように &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; は、使用することができます &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 子コンポーネントのプロパティではなく、その種類はあるべき &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="817700a4464e4e191b283e342f94c1991f779ce0" translate="yes" xml:space="preserve">
          <source>Just the Stackblitz</source>
          <target state="translated">スタックブリッツだけ</target>
        </trans-unit>
        <trans-unit id="a1f18edf65e1f35b5d98a957b4ea1ca6278d408c" translate="yes" xml:space="preserve">
          <source>Karma configuration should then be changed so that it uses the application root dir as the base directory, instead of &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">次にKarma設定を変更して、 &lt;code&gt;app&lt;/code&gt; ではなくアプリケーションのルートディレクトリをベースディレクトリとして使用するようにします。</target>
        </trans-unit>
        <trans-unit id="42600b11fefe8ad521ad30fad8660704a0b4ffbf" translate="yes" xml:space="preserve">
          <source>Karma reporters to use. Directly passed to the karma runner.</source>
          <target state="translated">使うカルマ報告者。カルマランナーに直接渡す。</target>
        </trans-unit>
        <trans-unit id="b4460e678bcf89af04481e0ca8656d0cee5a316f" translate="yes" xml:space="preserve">
          <source>Keep constructors simple</source>
          <target state="translated">コンストラクタをシンプルにする</target>
        </trans-unit>
        <trans-unit id="8850b59a0703a38117329723734c5d92e2073bb3" translate="yes" xml:space="preserve">
          <source>Keep current by following the &lt;a href=&quot;https://blog.angular.io/&quot;&gt;Angular blog&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://blog.angular.io/&quot;&gt;Angularブログを&lt;/a&gt;フォローして最新情報を入手してください。</target>
        </trans-unit>
        <trans-unit id="3e0d5a5af4787be28dd80c60ff4a76f4d1dcf910" translate="yes" xml:space="preserve">
          <source>Keep in mind that a directive's data-bound input properties are not set until &lt;em&gt;after construction&lt;/em&gt;. If you need to initialize the directive based on those properties, set them when &lt;code&gt;ngOnInit()&lt;/code&gt; runs.</source>
          <target state="translated">ディレクティブのデータバインドされた入力プロパティは&lt;em&gt;、構築が完了する&lt;/em&gt;まで設定されないことに注意してください。これらのプロパティに基づいてディレクティブを初期化する必要がある場合は、 &lt;code&gt;ngOnInit()&lt;/code&gt; の実行時にそれらを設定します。</target>
        </trans-unit>
        <trans-unit id="d9e51787ad5d5b5ca81319e00bd3e2af12366b1b" translate="yes" xml:space="preserve">
          <source>Keep template statements minimal by using method calls or basic property assignments.</source>
          <target state="translated">メソッド呼び出しや基本的なプロパティの割り当てを使用して、テンプレート文を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="5de9b63aa5c026111c38b95e17436330040893dc" translate="yes" xml:space="preserve">
          <source>Keep this process running in the background, watching and recompiling as you make changes.</source>
          <target state="translated">このプロセスをバックグラウンドで実行しておき、変更を行う際には監視して再コンパイルします。</target>
        </trans-unit>
        <trans-unit id="75b190e26551d30888434ef5e10c264fd2094702" translate="yes" xml:space="preserve">
          <source>Keeping all features in one component as the application grows will not be maintainable. You'll want to split up large components into smaller sub-components, each focused on a specific task or workflow.</source>
          <target state="translated">アプリケーションの成長に合わせて、すべての機能を一つのコンポーネントにまとめておくことは、保守性に欠けるでしょう。大きなコンポーネントを小さなサブコンポーネントに分割し、それぞれが特定のタスクやワークフローに焦点を当てたものにしたいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="3950ebebea0b9fa7aab3b677f39dbcffdc5260a0" translate="yes" xml:space="preserve">
          <source>Keeping your Angular Projects Up-to-Date</source>
          <target state="translated">Angularプロジェクトを最新の状態に保つ</target>
        </trans-unit>
        <trans-unit id="009c1fdcb326fe22fdb96d8f6b762042126fa6be" translate="yes" xml:space="preserve">
          <source>Keeping your Angular projects up-to-date</source>
          <target state="translated">Angularプロジェクトを最新の状態に保つ</target>
        </trans-unit>
        <trans-unit id="0e98238c1a123f2c93163aa116c02a7491e9b3d0" translate="yes" xml:space="preserve">
          <source>Key differences</source>
          <target state="translated">主な違い</target>
        </trans-unit>
        <trans-unit id="d24f1a6439a067297b07682b27dca0466177ddc2" translate="yes" xml:space="preserve">
          <source>Key event filtering (with &lt;code&gt;key.enter&lt;/code&gt;)</source>
          <target state="translated">キーイベントフィルタリング（ &lt;code&gt;key.enter&lt;/code&gt; を使用）</target>
        </trans-unit>
        <trans-unit id="e6a63d973ce4fce07ea7910869aeaa58dcc486e5" translate="yes" xml:space="preserve">
          <source>Key takeaways:</source>
          <target state="translated">主な持ち帰り方法。</target>
        </trans-unit>
        <trans-unit id="bb3c05a548b50d8ab473aa91a3bc6c081c4b5c99" translate="yes" xml:space="preserve">
          <source>KeyValue</source>
          <target state="translated">KeyValue</target>
        </trans-unit>
        <trans-unit id="9b3401cf8def25530e9fd1c26637d0047a8726c9" translate="yes" xml:space="preserve">
          <source>KeyValueChangeRecord</source>
          <target state="translated">KeyValueChangeRecord</target>
        </trans-unit>
        <trans-unit id="73aa019b64cd0c76d411a1451198da70801d52c4" translate="yes" xml:space="preserve">
          <source>KeyValueChanges</source>
          <target state="translated">KeyValueChanges</target>
        </trans-unit>
        <trans-unit id="c9f3815ecee4aa3527346e46c9976e1e8f5842c1" translate="yes" xml:space="preserve">
          <source>KeyValueDiffer</source>
          <target state="translated">KeyValueDiffer</target>
        </trans-unit>
        <trans-unit id="b74cac1bdb5561f5eaed8f9096562dbc1cbfcbb5" translate="yes" xml:space="preserve">
          <source>KeyValueDifferFactory</source>
          <target state="translated">KeyValueDifferFactory</target>
        </trans-unit>
        <trans-unit id="c6bbedfd75cd733b25c3584df7236c67ccd8bcba" translate="yes" xml:space="preserve">
          <source>KeyValueDiffers</source>
          <target state="translated">KeyValueDiffers</target>
        </trans-unit>
        <trans-unit id="9ba558627c56c78559234ffc0ae09f6dc16dea1a" translate="yes" xml:space="preserve">
          <source>KeyValuePipe</source>
          <target state="translated">KeyValuePipe</target>
        </trans-unit>
        <trans-unit id="987e5e1f455e03766d3ef3740947f4db46336d53" translate="yes" xml:space="preserve">
          <source>Keyframes</source>
          <target state="translated">Keyframes</target>
        </trans-unit>
        <trans-unit id="6eb2cb65b6b265087cc2d5112489a6c3d6948a43" translate="yes" xml:space="preserve">
          <source>Keyframes include an &lt;em&gt;offset&lt;/em&gt; that defines the point in the animation where each style change occurs. Offsets are relative measures from zero to one, marking the beginning and end of the animation, respectively and should be applied to each of the keyframe's steps if used at least once.</source>
          <target state="translated">キーフレームには、各スタイルの変更が発生するアニメーションのポイントを定義する&lt;em&gt;オフセット&lt;/em&gt;が含まれています。オフセットは、0から1までの相対的な測定値であり、それぞれアニメーションの開始と終了を示します。少なくとも1回使用する場合は、キーフレームの各ステップに適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="893056aa39e96a084b3d311ebde22e7acf05fc70" translate="yes" xml:space="preserve">
          <source>Keyframes summary</source>
          <target state="translated">キーフレームの概要</target>
        </trans-unit>
        <trans-unit id="d6a03b41f716acfc6fd0ac6d70d7b37c373ace99" translate="yes" xml:space="preserve">
          <source>Keyframes with a pulsation</source>
          <target state="translated">脈動のあるキーフレーム</target>
        </trans-unit>
        <trans-unit id="258044e7b813d16f725b367c95a2d8e459f094fc" translate="yes" xml:space="preserve">
          <source>Keys have:</source>
          <target state="translated">キーは持っています。</target>
        </trans-unit>
        <trans-unit id="284add57ddefeac62dc890be8a4e8973296321db" translate="yes" xml:space="preserve">
          <source>Kicks off the animation and serves as a container for all other animation function calls. HTML template binds to &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt;. Use the first argument to declare a unique trigger name. Uses array syntax.</source>
          <target state="translated">アニメーションを開始し、他のすべてのアニメーション関数呼び出しのコンテナーとして機能します。HTMLテンプレートは &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt; にバインドします。最初の引数を使用して、一意のトリガー名を宣言します。配列構文を使用します。</target>
        </trans-unit>
        <trans-unit id="fa438cb50759fa5742977214c2ee1e81a57db99b" translate="yes" xml:space="preserve">
          <source>Kicks off the animation and serves as a container for all other animation function calls. HTML template binds to &lt;code&gt;triggerName&lt;/code&gt;. Use the first argument to declare a unique trigger name. Uses array syntax.</source>
          <target state="translated">アニメーションを開始し、他のすべてのアニメーション関数呼び出しのコンテナーとして機能します。HTMLテンプレートは &lt;code&gt;triggerName&lt;/code&gt; にバインドします。最初の引数を使用して、一意のトリガー名を宣言します。配列構文を使用します。</target>
        </trans-unit>
        <trans-unit id="b9a401030ae31427bf36aafaa6d13ce01e5c38e0" translate="yes" xml:space="preserve">
          <source>Kidding aside, pay attention to two key points:</source>
          <target state="translated">冗談はさておき、2つのポイントに注意してください。</target>
        </trans-unit>
        <trans-unit id="e4b6a725b52a13d1cccf14a76ba4d885abd9d4b0" translate="yes" xml:space="preserve">
          <source>Knowing that it is an &lt;code&gt;HTMLElement&lt;/code&gt; of some sort, you can use the standard HTML &lt;code&gt;querySelector&lt;/code&gt; to dive deeper into the element tree.</source>
          <target state="translated">ある種の &lt;code&gt;HTMLElement&lt;/code&gt; であることを知っているので、標準のHTML &lt;code&gt;querySelector&lt;/code&gt; を使用して、要素ツリーをさらに詳しく調べることができます。</target>
        </trans-unit>
        <trans-unit id="71131f7aee7025ef5618a88cee7db1bc11db3816" translate="yes" xml:space="preserve">
          <source>Knowledge of &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; is helpful, but not required.</source>
          <target state="translated">&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScriptの&lt;/a&gt;知識は役に立ちますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="c4b1aea668c6b62ca0106cddefaf0fd61af5def7" translate="yes" xml:space="preserve">
          <source>Knowledge of this structure can inform how you provide and inject your services, and give you complete control of service visibility.</source>
          <target state="translated">この構造の知識は、サービスを提供したり注入したりする方法を知らせ、サービスの可視性を完全にコントロールすることができます。</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="855b4c3da111de1cc3bf0426bb3c3d9b0c13d293" translate="yes" xml:space="preserve">
          <source>L (S)</source>
          <target state="translated">L(S</target>
        </trans-unit>
        <trans-unit id="ad97b692157548122b2491efcefede18a971027f" translate="yes" xml:space="preserve">
          <source>LIBRARY SOURCE FILES</source>
          <target state="translated">ライブラリソースファイル</target>
        </trans-unit>
        <trans-unit id="1460dc33fdc66db88bdcc5b32057457efeed3ce5" translate="yes" xml:space="preserve">
          <source>LL</source>
          <target state="translated">LL</target>
        </trans-unit>
        <trans-unit id="ae6269698bf58fd847def39ce4ac2fae66e5387f" translate="yes" xml:space="preserve">
          <source>LLL</source>
          <target state="translated">LLL</target>
        </trans-unit>
        <trans-unit id="366642afad85161718d3199bbb3eeec4323b4561" translate="yes" xml:space="preserve">
          <source>LLLL</source>
          <target state="translated">LLLL</target>
        </trans-unit>
        <trans-unit id="2f63457c6d31c1457c936d330e5d022b720e7ea8" translate="yes" xml:space="preserve">
          <source>LLLLL</source>
          <target state="translated">LLLLL</target>
        </trans-unit>
        <trans-unit id="46dbfd3ddbab363ec3229828156cfc7cbbf79e53" translate="yes" xml:space="preserve">
          <source>LOCALE_ID</source>
          <target state="translated">LOCALE_ID</target>
        </trans-unit>
        <trans-unit id="5054e68056df235551347e024191933731ac90af" translate="yes" xml:space="preserve">
          <source>LOCATION_INITIALIZED</source>
          <target state="translated">LOCATION_INITIALIZED</target>
        </trans-unit>
        <trans-unit id="b5e0fa918e23be61311591d33895ec581f8ea479" translate="yes" xml:space="preserve">
          <source>LOCATION_UPGRADE_CONFIGURATION</source>
          <target state="translated">LOCATION_UPGRADE_CONFIGURATION</target>
        </trans-unit>
        <trans-unit id="80fea83804bf0e1f73c7272f7a19c26bc52d63ef" translate="yes" xml:space="preserve">
          <source>LTS</source>
          <target state="translated">LTS</target>
        </trans-unit>
        <trans-unit id="c3cddb869a298772e4140a9d210d3c1e037f73e9" translate="yes" xml:space="preserve">
          <source>LTS Ends</source>
          <target state="translated">LTS終了</target>
        </trans-unit>
        <trans-unit id="ebe84b18d41b3defb8e3d74f6f0bd38e69c3d734" translate="yes" xml:space="preserve">
          <source>LTS fixes</source>
          <target state="translated">LTS の修正</target>
        </trans-unit>
        <trans-unit id="ddc05edf33a67ff62443367b7faa25ddb394059a" translate="yes" xml:space="preserve">
          <source>Language features outside of the compiler's &lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;restricted expression syntax&lt;/a&gt; can produce this error, as seen in the following example:</source>
          <target state="translated">次の例に示すように、コンパイラの&lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;制限された式構文&lt;/a&gt;外の言語機能は、このエラーを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="838123c690032c3d77f2cf978058b56afa0f2909" translate="yes" xml:space="preserve">
          <source>Language services include:</source>
          <target state="translated">言語サービスには以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="734fa40ff03686294aa0c60e9fa60f8ca7b15bcd" translate="yes" xml:space="preserve">
          <source>Large image files can be slow to load, harming the user experience. Always compress the image. Consider using an image compression web site such as &lt;a href=&quot;https://tinypng.com/&quot;&gt;tinypng&lt;/a&gt;.</source>
          <target state="translated">大きな画像ファイルは読み込みに時間がかかり、ユーザーエクスペリエンスに悪影響を与える可能性があります。常に画像を圧縮します。&lt;a href=&quot;https://tinypng.com/&quot;&gt;tinypng&lt;/a&gt;などの画像圧縮Webサイトの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="fdbfb45b871130cc5890d749d31a074e087dbb17" translate="yes" xml:space="preserve">
          <source>Last update check</source>
          <target state="translated">最終更新チェック</target>
        </trans-unit>
        <trans-unit id="70a03b91dbc99c3f4c22b136089730dab49465a9" translate="yes" xml:space="preserve">
          <source>Lastly, call it within the &lt;code&gt;imports&lt;/code&gt; list of the &lt;code&gt;AppModule&lt;/code&gt;. In the following snippet, other parts of the file are left out. For the complete file, see the , or continue to the next section of this document.</source>
          <target state="translated">最後に、 &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; リスト内で呼び出します。次のスニペットでは、ファイルの他の部分は省略されています。完全なファイルについては、を参照するか、このドキュメントの次のセクションに進んでください。</target>
        </trans-unit>
        <trans-unit id="512803435153cdf149e51c2b7560f6d2d5123dc7" translate="yes" xml:space="preserve">
          <source>Later in this guide you will create &lt;a href=&quot;router#heroes-functionality&quot;&gt;multiple routing modules&lt;/a&gt; and discover that you must import those routing modules &lt;a href=&quot;router#routing-module-order&quot;&gt;in the correct order&lt;/a&gt;.</source>
          <target state="translated">このガイドの後半では、&lt;a href=&quot;router#heroes-functionality&quot;&gt;複数のルーティングモジュール&lt;/a&gt;を作成&lt;a href=&quot;router#routing-module-order&quot;&gt;し、&lt;/a&gt;それらのルーティングモジュールを正しい順序でインポートする必要があることを発見します。</target>
        </trans-unit>
        <trans-unit id="1d334b9a4b3cf925264a3a1774fc490eb6e86a86" translate="yes" xml:space="preserve">
          <source>Later you'll call &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; with imports, providers, and more declarations to suit your testing needs. Optional &lt;code&gt;override&lt;/code&gt; methods can further fine-tune aspects of the configuration.</source>
          <target state="translated">後で &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; を呼び出し、インポート、プロバイダー、その他の宣言を使用して、テストのニーズに適合させます。オプションの &lt;code&gt;override&lt;/code&gt; メソッドは、構成の側面をさらに微調整できます。</target>
        </trans-unit>
        <trans-unit id="06d986c1b367afb8ba4fb3fbdad2551ff5cf409a" translate="yes" xml:space="preserve">
          <source>Later, in the &lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;Forms&lt;/a&gt; part of this tutorial, this cart service also will be accessed from the page where the user checks out.</source>
          <target state="translated">後でこのチュートリアルの&lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;フォームの&lt;/a&gt;部分で、このカートサービスは、ユーザーがチェックアウトするページからもアクセスされます。</target>
        </trans-unit>
        <trans-unit id="754103d0963cb240496afc2220bcce0c35ff57b6" translate="yes" xml:space="preserve">
          <source>Later, in the &lt;code&gt;ngOnInit&lt;/code&gt; method, you use the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service to retrieve the parameters for the route, pull the hero &lt;code&gt;id&lt;/code&gt; from the parameters and retrieve the hero to display.</source>
          <target state="translated">その後、 &lt;code&gt;ngOnInit&lt;/code&gt; メソッドで、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; サービスを使用してルートのパラメーターを取得し、パラメーターからヒーロー &lt;code&gt;id&lt;/code&gt; をプルして、表示するヒーローを取得します。</target>
        </trans-unit>
        <trans-unit id="e7547ca42bb362a9b11d36774bbdfcd704b4a366" translate="yes" xml:space="preserve">
          <source>Later, the tests will be able to easily check &lt;code&gt;selectedHero&lt;/code&gt; to verify that the &lt;code&gt;DashboardHeroComponent.selected&lt;/code&gt; event emitted the expected hero.</source>
          <target state="translated">その後、テストは &lt;code&gt;selectedHero&lt;/code&gt; を簡単にチェックして、 &lt;code&gt;DashboardHeroComponent.selected&lt;/code&gt; イベントが予期されたヒーローを放出したことを確認できます。</target>
        </trans-unit>
        <trans-unit id="5515a41b4344b9f65fe779948499e1d5d6f34c6d" translate="yes" xml:space="preserve">
          <source>Later, this guide shows you how to create &lt;a href=&quot;router-tutorial-toh#heroes-functionality&quot;&gt;multiple routing modules&lt;/a&gt; and import those routing modules &lt;a href=&quot;router-tutorial-toh#routing-module-order&quot;&gt;in the correct order&lt;/a&gt;.</source>
          <target state="translated">後で、このガイドでは、&lt;a href=&quot;router-tutorial-toh#heroes-functionality&quot;&gt;複数のルーティングモジュール&lt;/a&gt;を作成&lt;a href=&quot;router-tutorial-toh#routing-module-order&quot;&gt;し、&lt;/a&gt;それらのルーティングモジュールを正しい順序でインポートする方法を示します。</target>
        </trans-unit>
        <trans-unit id="21fda7ea70f96e74170c060719d7b5657f338386" translate="yes" xml:space="preserve">
          <source>Latest manifest hash</source>
          <target state="translated">最新のマニフェストハッシュ</target>
        </trans-unit>
        <trans-unit id="5e52348bd45eeec46b21e6ad2ead896b3cef0bb5" translate="yes" xml:space="preserve">
          <source>Launch the server by using the CLI command &lt;code&gt;ng serve&lt;/code&gt;, with the &lt;code&gt;--open&lt;/code&gt; option.</source>
          <target state="translated">CLIコマンドを使用してサーバを起動 &lt;code&gt;ng serve&lt;/code&gt; で、 &lt;code&gt;--open&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="7ee1107c3f31dfe72f1b2c8c9f4dbd7811c4a206" translate="yes" xml:space="preserve">
          <source>Launching your app</source>
          <target state="translated">アプリの起動</target>
        </trans-unit>
        <trans-unit id="8cdd14c7391daa639de4c11bd4f21bff8eb8dfdd" translate="yes" xml:space="preserve">
          <source>Launching your app with a root module</source>
          <target state="translated">ルートモジュールでアプリを起動する</target>
        </trans-unit>
        <trans-unit id="ae7bffee7c5009ade8cdb896ee38347b7b498008" translate="yes" xml:space="preserve">
          <source>Lazily retrieves the reference value from a forwardRef.</source>
          <target state="translated">forwardRefから参照値を取得します。</target>
        </trans-unit>
        <trans-unit id="9d8fd079f87e6df7079e2cb3921cb7d7a59ad6f7" translate="yes" xml:space="preserve">
          <source>Lazy Loaded folders</source>
          <target state="translated">遅延ロードされたフォルダ</target>
        </trans-unit>
        <trans-unit id="53a754e3d992d869269c4cb92a2837bbd5a07aee" translate="yes" xml:space="preserve">
          <source>Lazy Loading</source>
          <target state="translated">遅延読み込み</target>
        </trans-unit>
        <trans-unit id="b9db421e8fed8420ce1824b3ccff0707fa4d9adc" translate="yes" xml:space="preserve">
          <source>Lazy Loading AngularJS</source>
          <target state="translated">AngularJSの遅延読み込み</target>
        </trans-unit>
        <trans-unit id="e85192724b293a8f60c1280d0d24a8c45ab04f15" translate="yes" xml:space="preserve">
          <source>Lazy Loading Feature Modules</source>
          <target state="translated">遅延読み込み機能モジュール</target>
        </trans-unit>
        <trans-unit id="0db7bee2dbf162d4bb73916ab3193a20850ec970" translate="yes" xml:space="preserve">
          <source>Lazy Loading route configuration</source>
          <target state="translated">遅延ローディングルートの設定</target>
        </trans-unit>
        <trans-unit id="961dcc883b258c2d939be82886386097e05d2115" translate="yes" xml:space="preserve">
          <source>Lazy load the &lt;em&gt;crisis center&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;危機管理センターを&lt;/em&gt;遅延読み込み&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d4e26b5d436da7c36bc26793e58eaeec1fdc4705" translate="yes" xml:space="preserve">
          <source>Lazy load the crisis center</source>
          <target state="translated">危機管理センターを怠惰にロード</target>
        </trans-unit>
        <trans-unit id="8745c3d3f236ee4ba968248b7004084810969715" translate="yes" xml:space="preserve">
          <source>Lazy loading</source>
          <target state="translated">怠惰なローディング</target>
        </trans-unit>
        <trans-unit id="78f2517723ef00321461f6e4e944eac63fbf25bc" translate="yes" xml:space="preserve">
          <source>Lazy loading NgModules</source>
          <target state="translated">怠惰なロードのNgModules</target>
        </trans-unit>
        <trans-unit id="f002b47a9674f08e88a467d632ae3477aad802fe" translate="yes" xml:space="preserve">
          <source>Lazy loading an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; の遅延読み込み。</target>
        </trans-unit>
        <trans-unit id="52a025ef2198526b4b9361d282bbf81bda351341" translate="yes" xml:space="preserve">
          <source>Lazy loading basics</source>
          <target state="translated">怠惰なローディングの基本</target>
        </trans-unit>
        <trans-unit id="a70dd563d0cf22b10094a8634ce271d270a2f3d3" translate="yes" xml:space="preserve">
          <source>Lazy loading feature modules.</source>
          <target state="translated">怠惰なロード機能モジュール。</target>
        </trans-unit>
        <trans-unit id="dafd78a2060910a592eef7719a94d1cb70951800" translate="yes" xml:space="preserve">
          <source>Lazy loading speeds up application load time by splitting the application into multiple bundles and loading them on demand. To use lazy loading, provide the &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property instead of the &lt;code&gt;children&lt;/code&gt; property.</source>
          <target state="translated">遅延読み込みは、アプリケーションを複数のバンドルに分割してオンデマンドで読み込むことで、アプリケーションの読み込み時間を短縮します。遅延ロードを使用するには、提供 &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; のプロパティの代わりに、 &lt;code&gt;children&lt;/code&gt; プロパティを。</target>
        </trans-unit>
        <trans-unit id="f9a626761db78fd38db2cdd82e365bb22188a611" translate="yes" xml:space="preserve">
          <source>Lazy loading speeds up application load time by splitting the application into multiple bundles and loading them on demand. To use lazy loading, provide the &lt;code&gt;loadChildren&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; object, instead of the &lt;code&gt;children&lt;/code&gt; property.</source>
          <target state="translated">遅延読み込みは、アプリケーションを複数のバンドルに分割し、オンデマンドで読み込むことで、アプリケーションの読み込み時間を短縮します。遅延ロードを使用するには、提供 &lt;code&gt;loadChildren&lt;/code&gt; の中でプロパティを &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; の代わりに、オブジェクト &lt;code&gt;children&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="628c7bafd341d3b8b82c1179cbcc0927f03d5efc" translate="yes" xml:space="preserve">
          <source>Lazy-loaded modules and their components can inject &lt;code&gt;AppModule&lt;/code&gt; services; they can't inject &lt;code&gt;AppComponent&lt;/code&gt; services.</source>
          <target state="translated">遅延ロードされたモジュールとそのコンポーネントは、 &lt;code&gt;AppModule&lt;/code&gt; サービスを挿入できます。 &lt;code&gt;AppComponent&lt;/code&gt; サービスを注入することはできません。</target>
        </trans-unit>
        <trans-unit id="957a78005dabe65160b5a15925b793d1fa82108f" translate="yes" xml:space="preserve">
          <source>Lazy-loaded services are scoped to the lazy module's injector. If a lazy-loaded module also provides the &lt;code&gt;UserService&lt;/code&gt;, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root application injector.</source>
          <target state="translated">遅延ロードされたサービスは、遅延モジュールのインジェクターにスコープされます。遅延ロードされたモジュールも &lt;code&gt;UserService&lt;/code&gt; を提供する場合、そのモジュールのコンテキスト内で（ルーターのナビゲーションなどによって）作成されたコンポーネントは、ルートアプリケーションインジェクター内のインスタンスではなく、サービスのローカルインスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="d9c40704401e4873ac74e3957c70dadaa21ecc87" translate="yes" xml:space="preserve">
          <source>Lazy-loading feature modules</source>
          <target state="translated">遅延ロード機能モジュール</target>
        </trans-unit>
        <trans-unit id="3f620ff844008aa025233953d1ce142aa5cda2f1" translate="yes" xml:space="preserve">
          <source>Learn about &lt;code&gt;ngOnChanges()&lt;/code&gt; in the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; chapter.</source>
          <target state="translated">&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフックの&lt;/a&gt;章で &lt;code&gt;ngOnChanges()&lt;/code&gt; について学びます。</target>
        </trans-unit>
        <trans-unit id="14b272638be9bcb6a919ee9155d34a360ce378ea" translate="yes" xml:space="preserve">
          <source>Learn about marble testing</source>
          <target state="translated">マーブル検査について学ぶ</target>
        </trans-unit>
        <trans-unit id="e7fdfe1b303da9330f863be0ed83883e1c50ecd2" translate="yes" xml:space="preserve">
          <source>Learn about providers and the bootstrap process in the &lt;a href=&quot;dependency-injection#bootstrap&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection#bootstrap&quot;&gt;依存関係注入ガイド&lt;/a&gt;でプロバイダーとブートストラッププロセスについて学びます。</target>
        </trans-unit>
        <trans-unit id="da27a2f7b1e6d4b67b7e83f584c9c5f289cfc65d" translate="yes" xml:space="preserve">
          <source>Learn how to &lt;a href=&quot;https://github.com/ng-packagr/ng-packagr/blob/master/docs/copy-assets.md&quot;&gt;copy assets into your library as part of the build&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ng-packagr/ng-packagr/blob/master/docs/copy-assets.md&quot;&gt;ビルドの一部としてアセットをライブラリ&lt;/a&gt;にコピーする方法を学びます。</target>
        </trans-unit>
        <trans-unit id="a66275f34e1f5a7519630477918b8d4723a6bbad" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI tokens and providers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-providers&quot;&gt;DIトークンとプロバイダーの&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="929d9c410b56408fb863a3b3762f37617edbdee9" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;dependency-injection-providers&quot;&gt;different kinds of providers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-providers&quot;&gt;さまざまな種類のプロバイダーの&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="64e85116af3881f2b807a4ac93b6ca6a118e4228" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;where to configure providers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;プロバイダーの構成場所の&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="42696a9635d606ebe6044734ac2f34dd63e3b588" translate="yes" xml:space="preserve">
          <source>Learn more about Circle CI from &lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;Circle CI documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;Circle CIのドキュメント&lt;/a&gt;からCircle CIの詳細を学んでください。</target>
        </trans-unit>
        <trans-unit id="fbd3617cce085a5e8ca250fd33373a22ecbb1c83" translate="yes" xml:space="preserve">
          <source>Learn more about Travis CI testing from &lt;a href=&quot;https://docs.travis-ci.com/&quot;&gt;Travis CI documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.travis-ci.com/&quot;&gt;Travis CIドキュメント&lt;/a&gt;からTravis CIテストの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ab522e0dc334f2f66198b9d67ad8d7c7cf8fade9" translate="yes" xml:space="preserve">
          <source>Learn more about decorators on the web.</source>
          <target state="translated">ネットでデコレーターのことを詳しく知る</target>
        </trans-unit>
        <trans-unit id="3d9f8497153e69f1f8ced844ece70962ae1dc467" translate="yes" xml:space="preserve">
          <source>Learn more about how Angular uses &lt;a href=&quot;npm-packages&quot;&gt;Npm Packages&lt;/a&gt;.</source>
          <target state="translated">Angularが&lt;a href=&quot;npm-packages&quot;&gt;Npmパッケージを&lt;/a&gt;どのように使用するかについての詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="5b69eeeb2b9edc6d0b9216f8daf3d46902457fb8" translate="yes" xml:space="preserve">
          <source>Learn more about how the &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;injector hierarchy&lt;/a&gt; works.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;インジェクター階層が&lt;/a&gt;どのように機能するかについての詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="bce1b146d96af53018096aeb9c71ae57f7bbc6d0" translate="yes" xml:space="preserve">
          <source>Learn more about how to use the tool to &lt;a href=&quot;https://github.com/ng-packagr/ng-packagr/blob/master/docs/embed-assets-css.md&quot;&gt;embed assets in CSS&lt;/a&gt;.</source>
          <target state="translated">ツールを使用&lt;a href=&quot;https://github.com/ng-packagr/ng-packagr/blob/master/docs/embed-assets-css.md&quot;&gt;してCSSにアセット&lt;/a&gt;を埋め込む方法の詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="3ca3602b6be5394836ea6883fbc98df272116471" translate="yes" xml:space="preserve">
          <source>Learn more about nested injectors in &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;Hierarchical Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">ネストされたインジェクターの詳細については、「&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;階層的な依存関係の注入」を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2491968c7982a380d0f03c94567638e978e99d66" translate="yes" xml:space="preserve">
          <source>Learn more about parameter decorators in &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;Hierarchical Dependency Injectors&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;Hierarchical Dependency Injectorsの&lt;/a&gt;パラメーターデコレーターの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f0a54e4c772828f62d79c92c5650ee3ba4fd8547" translate="yes" xml:space="preserve">
          <source>Learn more about reactive and template-driven forms in the &lt;a href=&quot;forms-overview&quot;&gt;Introduction to forms in Angular&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;forms-overview&quot;&gt;Angularのフォーム&lt;/a&gt;の概要で、反応型およびテンプレート駆動型のフォームについて詳しく学んでください。</target>
        </trans-unit>
        <trans-unit id="70918ca856d1bb3ddb3a6cf983a40bf830f966f5" translate="yes" xml:space="preserve">
          <source>Learn more about the &lt;a href=&quot;dependency-injection-providers&quot;&gt;different kinds of providers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-providers&quot;&gt;さまざまな種類のプロバイダーの&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="143c65e04478f769cd31bc055ec2c74e5a0f04f2" translate="yes" xml:space="preserve">
          <source>Learn more about the &lt;a href=&quot;https://www.youtube.com/watch?v=anphffaCZrQ&quot;&gt;Compiler&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=S0o-4yc2n-8&quot;&gt;Runtime&lt;/a&gt; in these videos from our team.</source>
          <target state="translated">私たちのチームからのこれらのビデオで&lt;a href=&quot;https://www.youtube.com/watch?v=anphffaCZrQ&quot;&gt;コンパイラ&lt;/a&gt;と&lt;a href=&quot;https://www.youtube.com/watch?v=S0o-4yc2n-8&quot;&gt;ランタイムの&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="096d0c679238ccb9dceaa845a2ed7a9859c6fc35" translate="yes" xml:space="preserve">
          <source>Learn more about the JavaScript module system on the web.</source>
          <target state="translated">Web上のJavaScriptモジュールシステムについてはこちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b5b77382c3ceee8b94fb94d422b9199a86328115" translate="yes" xml:space="preserve">
          <source>Learn more about the injector hierarchy in &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;Hierarchical Dependency Injectors&lt;/a&gt;.</source>
          <target state="translated">インジェクター階層の詳細については、&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;階層的な依存関係インジェクターを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58a34f4059f910727e76619fb8f09151e30f4164" translate="yes" xml:space="preserve">
          <source>Learn more about zones in this &lt;a href=&quot;https://www.youtube.com/watch?v=3IqtmUscE_U&quot;&gt;Brian Ford video&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;https://www.youtube.com/watch?v=3IqtmUscE_U&quot;&gt;ブライアンフォードのビデオで&lt;/a&gt;ゾーンの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="5a06dd36c4697393e8591b0aebf3314fd66a43a1" translate="yes" xml:space="preserve">
          <source>Learn more from the &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt; guide.</source>
          <target state="translated">&lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;ガイドで詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="49ef03ab06d34819f0df49aacfb549f83abffb4f" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;attribute-directives&quot;&gt;属性ディレクティブを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="061e792bcfae6a72b414a42e4732a01bdfcc764a" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/a&gt;.</source>
          <target state="translated">詳しくは、&lt;a href=&quot;bootstrapping&quot;&gt;ブートストラップを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a2595474c0bb630d7c9233d6e9cb83f4e1984c4e" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection in Angular&lt;/a&gt;.</source>
          <target state="translated">詳細&lt;a href=&quot;dependency-injection&quot;&gt;は、AngularのDependency Injectionを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="d65e1d322ab658292d1ee386605706fe88f9423a" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injectionで&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="543454a1ea1ed89206ddafe40279ccb14fd61601" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;elements&quot;&gt;Angular Elements Overview&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;elements&quot;&gt;Angular Elements Overview&lt;/a&gt;で詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="d5562b1d6f1c92ab22ddd2839b427022bb5479b0" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot;&gt;The App Shell Model&lt;/a&gt;.</source>
          <target state="translated">詳細については&lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot;&gt;、App Shellモデルを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="69e83458aeba90795b2ec92b95ac860501f7f762" translate="yes" xml:space="preserve">
          <source>Learn more in Victor Savkin's &lt;a href=&quot;http://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes&quot;&gt;post on redirects&lt;/a&gt;.</source>
          <target state="translated">詳しくは、Victor Savkinの&lt;a href=&quot;http://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes&quot;&gt;リダイレクトに関する投稿を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ee5bfdc51cf5efa838170544062b01249b630636" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;../../guide/dependency-injection&quot;&gt;&quot;Dependency Injection Guide&quot;&lt;/a&gt;.</source>
          <target state="translated">詳しくは、&lt;a href=&quot;../../guide/dependency-injection&quot;&gt;「依存性注入ガイド」を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="1ea4f3e368bdb8ee46d30b3c881b3f2fae673597" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;../../guide/dependency-injection-in-action#skip&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../guide/dependency-injection-in-action#skip&quot;&gt;依存性注入ガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="8722cd7f2f8e80fc745d60c7437d08c266bd0da6" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; and &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt; guides.</source>
          <target state="translated">詳細については、&lt;a href=&quot;attribute-directives&quot;&gt;属性ディレクティブ&lt;/a&gt;と&lt;a href=&quot;structural-directives&quot;&gt;構造ディレクティブの&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="335b559673f68f2f45eacd159df851d58d214e55" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;router#preventing-unauthorized-access&quot;&gt;Routing and Navigation&lt;/a&gt; guide.</source>
          <target state="translated">詳細については、&lt;a href=&quot;router#preventing-unauthorized-access&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="f281d9bb8a624734a3f2318519573c93302200b0" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;testing&quot;&gt;Testing&lt;/a&gt; guide.</source>
          <target state="translated">詳細については、&lt;a href=&quot;testing&quot;&gt;テスト&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="123406725caa64a10ae164244ffa8356f20fb2c7" translate="yes" xml:space="preserve">
          <source>Learn more: See &lt;a href=&quot;../guide/architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt; for more information about services.</source>
          <target state="translated">詳細：&lt;a href=&quot;../guide/architecture-services&quot;&gt;サービスの&lt;/a&gt;詳細については、サービスと依存性注入の概要を参照してください。</target>
        </trans-unit>
        <trans-unit id="1fcac7e737821f3c88ed512904352d47d44d6e8e" translate="yes" xml:space="preserve">
          <source>Learn more: See &lt;a href=&quot;../guide/router&quot;&gt;Routing &amp;amp; Navigation&lt;/a&gt; for more information about the Angular router.</source>
          <target state="translated">詳細：Angularルーターの詳細については、&lt;a href=&quot;../guide/router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b9654aca29b333345621b40d474db8caace16011" translate="yes" xml:space="preserve">
          <source>Learn more: See the &lt;a href=&quot;../guide/http&quot;&gt;HttpClient guide&lt;/a&gt; for more information about Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">詳細：Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; の詳細については、&lt;a href=&quot;../guide/http&quot;&gt;HttpClientガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="cb1ae2aa745d0c404aecbc5148457ae04537a735" translate="yes" xml:space="preserve">
          <source>Learning Angular</source>
          <target state="translated">Angularの学習</target>
        </trans-unit>
        <trans-unit id="51a8db0b974271a01e08c116fc2ed02f73e9f5ca" translate="yes" xml:space="preserve">
          <source>Learning about new features</source>
          <target state="translated">新機能を学ぶ</target>
        </trans-unit>
        <trans-unit id="cc650de6468563e40595e1b2eb359a2020010fc2" translate="yes" xml:space="preserve">
          <source>Leave the default and the wildcard routes as these are still in use at the top level of the application.</source>
          <target state="translated">既定のルートとワイルドカードルートは、アプリケーションのトップレベルで使用されているため、そのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="04a7f280698f2243487f6b62f727ea79038a1f1b" translate="yes" xml:space="preserve">
          <source>Legacy JavaScript libraries that are not imported into an app can be added to the runtime global scope and loaded as if they were in a script tag. Configure the CLI to do this at build time using the &quot;scripts&quot; and &quot;styles&quot; options of the build target in the &lt;a href=&quot;workspace-config&quot;&gt;CLI configuration file&lt;/a&gt;, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">アプリにインポートされないレガシーJavaScriptライブラリは、ランタイムグローバルスコープに追加して、スクリプトタグ内にあるかのようにロードできます。設定し、「スクリプト」と「スタイル」でのビルドターゲットのオプション使用して、ビルド時にこれを行うためのCLI &lt;a href=&quot;workspace-config&quot;&gt;CLIコンフィギュレーションファイル&lt;/a&gt;、 &lt;code&gt;angular.json&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="eb7a7527cb3b41fff45bdf01cc4023654295db7c" translate="yes" xml:space="preserve">
          <source>Legacy values are deprecated since v4 and should not be used for new applications:</source>
          <target state="translated">レガシー値は v4 以降非推奨であり、新しいアプリケーションでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6c5bb53f486dae84d16877b1a814f7a9af911ad8" translate="yes" xml:space="preserve">
          <source>Length of the control array.</source>
          <target state="translated">制御配列の長さを指定します。</target>
        </trans-unit>
        <trans-unit id="79524b43bbfafb265085c4285b823ad36756f103" translate="yes" xml:space="preserve">
          <source>Less common changes</source>
          <target state="translated">一般的な変更点が少ない</target>
        </trans-unit>
        <trans-unit id="ddc8669a8abb9a8a2505c175a74ead6882464f81" translate="yes" xml:space="preserve">
          <source>Less explicit, created by directives</source>
          <target state="translated">あまり明示的ではなく、ディレクティブによって作成されます。</target>
        </trans-unit>
        <trans-unit id="7ea222e5b87aefaada7cfc3c3f8a56b08c51fc09" translate="yes" xml:space="preserve">
          <source>Let it control the highlight color with a property binding.</source>
          <target state="translated">プロパティバインディングでハイライトカラーを制御させます。</target>
        </trans-unit>
        <trans-unit id="004d38bc3d9031d71cb310214ca0b608ad86e5f7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a simple &lt;code&gt;angular.json&lt;/code&gt; file that puts target configurations into context.</source>
          <target state="translated">ターゲット構成をコンテキストに配置する単純な &lt;code&gt;angular.json&lt;/code&gt; ファイルを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="01795115ab37723d08f0d9b07ef9dfa96d603a40" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example that counts from 1 to 3, with a one-second delay after each number emitted.</source>
          <target state="translated">1から3までカウントする例を見てみましょう。各数値が出力された後、1秒の遅延があります。</target>
        </trans-unit>
        <trans-unit id="0676c335f0a95ff58af45724e2f7974f94d0ddb5" translate="yes" xml:space="preserve">
          <source>Let's add a new target that will run our builder to execute a particular command. This target will tell the builder to run &lt;code&gt;touch&lt;/code&gt; on a file, in order to update its modified date.</source>
          <target state="translated">ビルダーを実行して特定のコマンドを実行する新しいターゲットを追加しましょう。このターゲットは、変更された日付を更新するために、ファイルに &lt;code&gt;touch&lt;/code&gt; を実行するようビルダーに指示します。</target>
        </trans-unit>
        <trans-unit id="ffd15a05977d9b50a1e2b66ca7733331ed9bd1b5" translate="yes" xml:space="preserve">
          <source>Let's animate a simple transition that changes a single HTML element from one state to another. For example, you can specify that a button displays either &lt;strong&gt;Open&lt;/strong&gt; or &lt;strong&gt;Closed&lt;/strong&gt; based on the user's last action. When the button is in the &lt;code&gt;open&lt;/code&gt; state, it's visible and yellow. When it's the &lt;code&gt;closed&lt;/code&gt; state, it's transparent and green.</source>
          <target state="translated">単一のHTML要素をある状態から別の状態に変更する単純な遷移をアニメーション化してみましょう。たとえば、ボタンのいずれかを表示するように指定することができます&lt;strong&gt;オープン&lt;/strong&gt;または&lt;strong&gt;クローズは&lt;/strong&gt;、ユーザーの最後のアクションに基づきます。ボタンが &lt;code&gt;open&lt;/code&gt; 状態のときは、黄色で表示されます。それはだ場合は &lt;code&gt;closed&lt;/code&gt; 状態、それは透明と緑です。</target>
        </trans-unit>
        <trans-unit id="a182086c861ef403fccc741e4f9e3fffb9b4f5cd" translate="yes" xml:space="preserve">
          <source>Let's assume that we are routing from the &lt;em&gt;Home =&amp;gt; About&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;Home =&amp;gt; About&lt;/em&gt;からルーティングしているとしましょう。</target>
        </trans-unit>
        <trans-unit id="ee3e3e3afa20d18becc2636614b18f6aaf75e485" translate="yes" xml:space="preserve">
          <source>Let's assume that you have an Angular component called &lt;code&gt;ng2Heroes&lt;/code&gt; that needs to be made available in AngularJS templates.</source>
          <target state="translated">AngularJSテンプレートで使用可能にする必要がある &lt;code&gt;ng2Heroes&lt;/code&gt; と呼ばれるAngularコンポーネントがあるとします。</target>
        </trans-unit>
        <trans-unit id="3a0e89b617672fce2fabac2e7f5f5850f70a9142" translate="yes" xml:space="preserve">
          <source>Let's assume that you have an AngularJS component called &lt;code&gt;ng1Hero&lt;/code&gt; that needs to be made available in Angular templates.</source>
          <target state="translated">Angularテンプレートで利用可能にする必要がある &lt;code&gt;ng1Hero&lt;/code&gt; と呼ばれるAngularJSコンポーネントがあると仮定しましょう。</target>
        </trans-unit>
        <trans-unit id="51663bc4d8fc83af90e5716b6dec0d20f693b0a7" translate="yes" xml:space="preserve">
          <source>Let's change the example to display a message if there are more than three heroes.</source>
          <target state="translated">ヒーローが3人以上いる場合にメッセージを表示する例を変更してみましょう。</target>
        </trans-unit>
        <trans-unit id="b44579a57df4195be1460c0b0de8ed1fb8e88665" translate="yes" xml:space="preserve">
          <source>Let's illustrate a router transition animation by navigating between two routes, &lt;em&gt;Home&lt;/em&gt; and &lt;em&gt;About&lt;/em&gt; associated with the &lt;code&gt;HomeComponent&lt;/code&gt; and &lt;code&gt;AboutComponent&lt;/code&gt; views respectively. Both of these component views are children of the top-most view, hosted by &lt;code&gt;AppComponent&lt;/code&gt;. We'll implement a router transition animation that slides in the new view to the right and slides out the old view when the user navigates between the two routes.</source>
          <target state="translated">レッツは二つの経路、間のナビゲートにより、ルータの遷移アニメーションを示して&lt;em&gt;ホーム&lt;/em&gt;と&lt;em&gt;について&lt;/em&gt;関連付けられた &lt;code&gt;HomeComponent&lt;/code&gt; と &lt;code&gt;AboutComponent&lt;/code&gt; がそれぞれ表示します。これらのコンポーネントビューはどちらも、最上位のビューの子であり、 &lt;code&gt;AppComponent&lt;/code&gt; によってホストされます。新しいビューで右にスライドし、ユーザーが2つのルート間を移動すると古いビューをスライドアウトするルーター遷移アニメーションを実装します。</target>
        </trans-unit>
        <trans-unit id="51c9e9bb879b365c74c45744fdcb949bb94a2d8f" translate="yes" xml:space="preserve">
          <source>Let's imagine that instead of logging the counter value, you update a field of your component and display it in its template.</source>
          <target state="translated">カウンターの値をログに記録する代わりに、コンポーネントのフィールドを更新してテンプレートに表示することを想像してみましょう。</target>
        </trans-unit>
        <trans-unit id="26d1e55048167bc6baaf2e0793fb782ee863e26b" translate="yes" xml:space="preserve">
          <source>Let's imagine that you start a recurrent task (here incrementing a counter, using RxJS &lt;code&gt;interval&lt;/code&gt;), and at the same time subscribe to &lt;code&gt;isStable&lt;/code&gt;.</source>
          <target state="translated">繰り返しタスクを開始し（ここではRxJS &lt;code&gt;interval&lt;/code&gt; を使用してカウンターをインクリメントする）、同時に &lt;code&gt;isStable&lt;/code&gt; をサブスクライブするとします。</target>
        </trans-unit>
        <trans-unit id="b5946821487f82e01968f21fb28ca6f81745022b" translate="yes" xml:space="preserve">
          <source>Let's say you don't want to inject &lt;code&gt;UserService&lt;/code&gt; directly into &lt;code&gt;HeroService&lt;/code&gt;, because you don't want to complicate that service with security-sensitive information. &lt;code&gt;HeroService&lt;/code&gt; won't have direct access to the user information to decide who is authorized and who isn't.</source>
          <target state="translated">&lt;code&gt;UserService&lt;/code&gt; を直接 &lt;code&gt;HeroService&lt;/code&gt; に注入したくないとしましょう。そのサービスをセキュリティ上重要な情報で複雑にしたくないからです。 &lt;code&gt;HeroService&lt;/code&gt; は、ユーザー情報に直接アクセスして、誰が承認され、誰が承認されないかを決定することはできません。</target>
        </trans-unit>
        <trans-unit id="951a6b55c578c36b78a513bf32b448dca8905f11" translate="yes" xml:space="preserve">
          <source>Let's say you have an AngularJS service:</source>
          <target state="translated">AngularJSのサービスがあるとしましょう。</target>
        </trans-unit>
        <trans-unit id="4227a9febaa50aa231ec79ac6d7a0b59e1802b16" translate="yes" xml:space="preserve">
          <source>Let's see how Angular's &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; function works with the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;⁣&amp;shy;(⁠)&lt;/code&gt; function to set CSS style attributes. In this code snippet, multiple style attributes are set at the same time for the state. In the &lt;code&gt;open&lt;/code&gt; state, the button has a height of 200 pixels, an opacity of 1, and a background color of yellow.</source>
          <target state="translated">のは、角度の方法を見てみましょう &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; 関数はと連携 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;⁣&amp;shy;(⁠)&lt;/code&gt; セットCSSスタイル属性と機能。このコードスニペットでは、状態に対して複数のスタイル属性が同時に設定されています。 &lt;code&gt;open&lt;/code&gt; 状態、ボタンは、200個のピクセルの高さ、1の不透明度、及び黄色の背景色を有しています。</target>
        </trans-unit>
        <trans-unit id="3bfc635473c5d0a274aeaebda63d5676a80f9758" translate="yes" xml:space="preserve">
          <source>Let's see how Angular's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function works with the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;⁣&amp;shy;(⁠)&lt;/code&gt; function to set CSS style attributes. In this code snippet, multiple style attributes are set at the same time for the state. In the &lt;code&gt;open&lt;/code&gt; state, the button has a height of 200 pixels, an opacity of 1, and a background color of yellow.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 関数が &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;⁣&amp;shy;(⁠)&lt;/code&gt; ）関数と連携してCSSスタイル属性を設定する方法を見てみましょう。このコードスニペットでは、状態に対して複数のスタイル属性が同時に設定されています。 &lt;code&gt;open&lt;/code&gt; 状態、ボタンは、200個のピクセルの高さ、1の不透明度、及び黄色の背景色を有しています。</target>
        </trans-unit>
        <trans-unit id="b2ffa03a6796485c7010eeb3285db01c52a7f841" translate="yes" xml:space="preserve">
          <source>Let's start by creating the validator class.</source>
          <target state="translated">まずはバリデータクラスを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="99f7276b18539354571fb0b39a65472e8470d3e1" translate="yes" xml:space="preserve">
          <source>Let's take a look at another animation on the live example page. Under the Filter/Stagger tab, enter some text into the &lt;strong&gt;Search Heroes&lt;/strong&gt; text box, such as &lt;code&gt;Magnet&lt;/code&gt; or &lt;code&gt;tornado&lt;/code&gt;.</source>
          <target state="translated">ライブサンプルページの別のアニメーションを見てみましょう。[フィルター/交互配置]タブで、[ &lt;code&gt;Magnet&lt;/code&gt; や[ &lt;code&gt;tornado&lt;/code&gt; などのテキストを[ &lt;strong&gt;検索ヒーロー]&lt;/strong&gt;テキストボックスに入力します。</target>
        </trans-unit>
        <trans-unit id="a78a57bd9b98e941523e213b265835c6bf8b7325" translate="yes" xml:space="preserve">
          <source>Let's take the &lt;code&gt;Hero&lt;/code&gt; routes and migrate them to new URLs. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; checks for redirects in your configuration before navigating, so each redirect is triggered when needed. To support this change, you'll add redirects from the old routes to the new routes in the &lt;code&gt;heroes-routing.module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Hero&lt;/code&gt; ルートを取得して、新しいURLに移行しましょう。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 必要なときにナビゲートする前に、ご使用の構成でリダイレクトのためのチェックは、その各々のリダイレクトがトリガされます。この変更をサポートするために、古いルートから新しいルートへのリダイレクトを &lt;code&gt;heroes-routing.module&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="731147e6fd716658458f531b1b9ea06ed3c678b7" translate="yes" xml:space="preserve">
          <source>Lets you add a CSS class to an element when the link's route becomes active.</source>
          <target state="translated">リンクのルートがアクティブになったときに、要素にCSSクラスを追加できるようにします。</target>
        </trans-unit>
        <trans-unit id="cc9c5c8e30a394eae9d072458a3e300ebe3613cd" translate="yes" xml:space="preserve">
          <source>Lets you link to specific routes in your app.</source>
          <target state="translated">アプリ内の特定のルートにリンクできるようになります。</target>
        </trans-unit>
        <trans-unit id="185c8d387520a8df821ea96c64127c9ce02efa89" translate="yes" xml:space="preserve">
          <source>Leverage full framework capabilities with Zone.js opt-out</source>
          <target state="translated">Zone.jsのオプトアウトでフレームワークの機能をフル活用</target>
        </trans-unit>
        <trans-unit id="3fd4d244695eda3ce03c3906d63aa441208d0648" translate="yes" xml:space="preserve">
          <source>Libraries (unlike applications and their associated e2e projects) have their own &lt;code&gt;package.json&lt;/code&gt; configuration files.</source>
          <target state="translated">ライブラリー（アプリケーションやそれに関連付けられたe2eプロジェクトとは異なります）には、独自の &lt;code&gt;package.json&lt;/code&gt; 構成ファイルがあります。</target>
        </trans-unit>
        <trans-unit id="249a68415825c618581383ebd8e77e0d58a9f6d8" translate="yes" xml:space="preserve">
          <source>Libraries are published as &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt;, usually together with schematics that integrate them with the Angular CLI. To integrate reusable library code into an application, you need to install the package and import the provided functionality where you will use it. For most published Angular libraries, you can use the Angular CLI &lt;code&gt;ng add &amp;lt;lib_name&amp;gt;&lt;/code&gt; command.</source>
          <target state="translated">ライブラリは、通常それらをAngular CLIと統合する回路図とともに、&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージ&lt;/a&gt;として公開されます。再利用可能なライブラリコードをアプリケーションに統合するには、パッケージをインストールし、提供される機能を使用する場所にインポートする必要があります。公開されているほとんどのAngularライブラリでは、Angular CLI &lt;code&gt;ng add &amp;lt;lib_name&amp;gt;&lt;/code&gt; コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="9699d0766df04c3c3118cb5d84d81f7cbe5b396a" translate="yes" xml:space="preserve">
          <source>Libraries can be updated by their publishers, and also have their own dependencies which need to be kept current. To check for updates to your installed libraries, use the &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt; command&lt;/a&gt;.</source>
          <target state="translated">ライブラリは発行元が更新でき、最新に保つ必要のある独自の依存関係もあります。インストールされているライブラリの更新を確認するには、&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; コマンドを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="0376bb56d3bac292a79a960dea3ef8945bb90d1d" translate="yes" xml:space="preserve">
          <source>Libraries extend Angular's base functionality. For example, to add &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt; to an app, add the library package using &lt;code&gt;ng add @angular/forms&lt;/code&gt;, then import the &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; library in your application code. Similarly, adding the &lt;a href=&quot;service-worker-intro&quot;&gt;service worker&lt;/a&gt; library to an Angular application is one of the steps for turning an application into a &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;Progressive Web App&lt;/a&gt; (PWA). &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; is an example of a large, general-purpose library that provides sophisticated, reusable, and adaptable UI components.</source>
          <target state="translated">ライブラリは、Angularの基本機能を拡張します。たとえば、&lt;a href=&quot;reactive-forms&quot;&gt;リアクティブフォーム&lt;/a&gt;をアプリに追加するには、 &lt;code&gt;ng add @angular/forms&lt;/code&gt; を使用してライブラリパッケージを追加し、 &lt;code&gt;@angular/forms&lt;/code&gt; ライブラリから &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; をアプリケーションコードにインポートします。同様に、Angularアプリケーションに&lt;a href=&quot;service-worker-intro&quot;&gt;Service Worker&lt;/a&gt;ライブラリを追加することは、アプリケーションを&lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;プログレッシブWebアプリ&lt;/a&gt;（PWA）に変えるためのステップの1つです。&lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;は、洗練された、再利用可能で適応可能なUIコンポーネントを提供する大規模な汎用ライブラリの例です。</target>
        </trans-unit>
        <trans-unit id="0a8fcac923bdc2f041e17f19ca0ee882b12e109e" translate="yes" xml:space="preserve">
          <source>Library developers can use the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; to &lt;code&gt;generate&lt;/code&gt; scaffolding for a new library in an existing &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;, and can publish a library as an &lt;code&gt;npm&lt;/code&gt; package.</source>
          <target state="translated">ライブラリ開発者は、&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、既存の&lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペースに&lt;/a&gt;新しいライブラリのスキャフォールディングを &lt;code&gt;generate&lt;/code&gt; し、ライブラリを &lt;code&gt;npm&lt;/code&gt; パッケージとして公開できます。</target>
        </trans-unit>
        <trans-unit id="fa66e52846472f9fd27f98294eccf19a26b04dd3" translate="yes" xml:space="preserve">
          <source>Library packages often include typings in &lt;code&gt;.d.ts&lt;/code&gt; files; see examples in &lt;code&gt;node_modules/@angular/material&lt;/code&gt;. If your library's package does not include typings and your IDE complains, you may need to install the library's associated &lt;code&gt;@types/&amp;lt;lib_name&amp;gt;&lt;/code&gt; package.</source>
          <target state="translated">多くの場合、ライブラリパッケージには &lt;code&gt;.d.ts&lt;/code&gt; ファイルへの入力が含まれます。 &lt;code&gt;node_modules/@angular/material&lt;/code&gt; 例を参照してください。ライブラリのパッケージにタイピングが含まれておらず、IDEから問題がある場合は、ライブラリに関連付けられた &lt;code&gt;@types/&amp;lt;lib_name&amp;gt;&lt;/code&gt; パッケージをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="369dc2dcfb562bc1b488d8c1c0682319334ebd52" translate="yes" xml:space="preserve">
          <source>Library project files</source>
          <target state="translated">ライブラリのプロジェクトファイル</target>
        </trans-unit>
        <trans-unit id="5caffd27e3ec471b46ded28417241aa0b83195e8" translate="yes" xml:space="preserve">
          <source>Library typings</source>
          <target state="translated">ライブラリのタイピング</target>
        </trans-unit>
        <trans-unit id="9e9de5dc714b0ebcdc870442c864fb8d36ef6f88" translate="yes" xml:space="preserve">
          <source>Library-specific &lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt; configuration.</source>
          <target state="translated">ライブラリ固有の&lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="1462d279df315f445494a726cde98792d2ce8e8e" translate="yes" xml:space="preserve">
          <source>Library-specific &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; configuration.</source>
          <target state="translated">ライブラリ固有の&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="b7467e05747f314fdd1067fd36131c4e4aa55601" translate="yes" xml:space="preserve">
          <source>Library-specific &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration, including TypeScript and Angular template compiler options. See &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt;.</source>
          <target state="translated">TypeScriptおよびAngularテンプレートコンパイラオプションを含む、ライブラリ固有の&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;構成。&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="e91f6ba4ec02c67a796600daa345b1a2b526d763" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution License 4.0.</source>
          <target state="translated">クリエイティブ・コモンズ表示ライセンス4.0の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="4e48f698aadae9546857e8298a5bcd17843d6036" translate="yes" xml:space="preserve">
          <source>Lifecycle Hooks</source>
          <target state="translated">ライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="543997ccf23b19cef73c5b0ec7004f7141aabd78" translate="yes" xml:space="preserve">
          <source>Lifecycle event sequence</source>
          <target state="translated">ライフサイクルイベントシーケンス</target>
        </trans-unit>
        <trans-unit id="18f610992ae69af4410d455e6cbeb4fbb02b2d58" translate="yes" xml:space="preserve">
          <source>Lifecycle example set</source>
          <target state="translated">ライフサイクル例集</target>
        </trans-unit>
        <trans-unit id="b958ad9eb9a6b36ba54104b6bc92f5faa443cc61" translate="yes" xml:space="preserve">
          <source>Lifecycle examples</source>
          <target state="translated">ライフサイクル事例</target>
        </trans-unit>
        <trans-unit id="37857eb2e2aa8efab7a0ac716f62d18f83e34871" translate="yes" xml:space="preserve">
          <source>Lifecycle hooks</source>
          <target state="translated">ライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="b4399d677c3a4329e5891e6b3f01426b36bd04ad" translate="yes" xml:space="preserve">
          <source>Lifecycle hooks guide</source>
          <target state="translated">ライフサイクルフックガイド</target>
        </trans-unit>
        <trans-unit id="8ced92a0a018d03498243304ed4b11aebef88de0" translate="yes" xml:space="preserve">
          <source>Lifecycle method called after the view is initialized. For internal use only.</source>
          <target state="translated">ビューが初期化された後に呼び出されるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="8bcc83c9b4f7ee797688986e365040d42abe8375" translate="yes" xml:space="preserve">
          <source>Lifecycle method called before the directive's instance is destroyed. For internal use only.</source>
          <target state="translated">ディレクティブのインスタンスが破棄される前に呼ばれるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="c76a477802c13c19852bc378c8dbbea9cf0b4d8f" translate="yes" xml:space="preserve">
          <source>Lifecycle sequence</source>
          <target state="translated">ライフサイクルシーケンス</target>
        </trans-unit>
        <trans-unit id="4c3ad870fd2ee3048b365677c3d250426730e41f" translate="yes" xml:space="preserve">
          <source>Lightweight injection tokens are only useful with components. The Angular style guide suggests that you name components using the &quot;Component&quot; suffix. The example &quot;LibHeaderComponent&quot; follows this convention.</source>
          <target state="translated">軽量なインジェクショントークンはコンポーネントでのみ有用です。Angularのスタイルガイドでは、コンポーネントの名前には &quot;Component &quot;という接尾辞を使うことを推奨しています。例の「LibHeaderComponent」はこの規約に従っています。</target>
        </trans-unit>
        <trans-unit id="df16d57ee0cc4cdc69baadd4526493b4e9b3cea2" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;interpolation&quot;&gt;template expressions&lt;/a&gt;, template statements use a language that looks like JavaScript. However, the parser for template statements differs from the parser for template expressions. In addition, the template statements parser specifically supports both basic assignment, &lt;code&gt;=&lt;/code&gt;, and chaining expressions with semicolons, &lt;code&gt;;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;interpolation&quot;&gt;テンプレート式&lt;/a&gt;と同様に、テンプレートステートメントはJavaScriptのような言語を使用します。ただし、テンプレートステートメントのパーサーはテンプレート式のパーサーとは異なります。さらに、テンプレートステートメントパーサーは、基本的な割り当て &lt;code&gt;=&lt;/code&gt; と、セミコロンを使用した式のチェーン &lt;code&gt;;&lt;/code&gt; の両方を具体的にサポートします。。</target>
        </trans-unit>
        <trans-unit id="cbd1175e41951b23bc6a03577b221bca30219cd8" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;toh-pt4#observable-heroservice&quot;&gt;&lt;code&gt;getHeroes()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;getHero()&lt;/code&gt; has an asynchronous signature. It returns a &lt;em&gt;mock hero&lt;/em&gt; as an &lt;code&gt;Observable&lt;/code&gt;, using the RxJS &lt;code&gt;of()&lt;/code&gt; function.</source>
          <target state="translated">&lt;a href=&quot;toh-pt4#observable-heroservice&quot;&gt; &lt;code&gt;getHeroes()&lt;/code&gt; &lt;/a&gt;と同様に、 &lt;code&gt;getHero()&lt;/code&gt; には非同期署名があります。RxJS &lt;code&gt;of()&lt;/code&gt; 関数を使用して、&lt;em&gt;モックヒーロー&lt;/em&gt;を &lt;code&gt;Observable&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="f813a9b214ba457adfc3f3b7f635326573cb767b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;handle()&lt;/code&gt; method transforms an HTTP request into an &lt;code&gt;Observable&lt;/code&gt; of &lt;a href=&quot;http#httpevents&quot;&gt;&lt;code&gt;HttpEvents&lt;/code&gt;&lt;/a&gt; which ultimately include the server's response. The &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; method could inspect that observable and alter it before returning it to the caller.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; と同様に、 &lt;code&gt;handle()&lt;/code&gt; メソッドはHTTPリクエストを、最終的にサーバーの応答を含む&lt;a href=&quot;http#httpevents&quot;&gt; &lt;code&gt;HttpEvents&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;Observable&lt;/code&gt; に変換します。 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; メソッドは、その観察を検査し、呼び出し元に返す前にそれを変化させることができます。</target>
        </trans-unit>
        <trans-unit id="cac87216a54ce1ed331461ec55435eb45df8962d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances, you choose to pass in validators and async validators as part of an options object.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスと同様に、オプションオブジェクトの一部としてバリデーターと非同期バリデーターを渡すことを選択します。</target>
        </trans-unit>
        <trans-unit id="59351fc10bef4908180431ddc9136fdd2825ec9d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;EvenBetterLogger&lt;/code&gt;, &lt;code&gt;HeroService&lt;/code&gt; needs to know if the user is authorized to see secret heroes. That authorization can change during the course of a single application session, as when you log in a different user.</source>
          <target state="translated">&lt;code&gt;EvenBetterLogger&lt;/code&gt; と同様に、 &lt;code&gt;HeroService&lt;/code&gt; はユーザーが秘密のヒーローを見ることを許可されているかどうかを知る必要があります。別のユーザーでログインするときのように、単一のアプリケーションセッションの過程でその承認が変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="daf09706446fb58188e9e62e06dc4a762e1c0cea" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;intercept()&lt;/code&gt;, the &lt;code&gt;handle()&lt;/code&gt; method transforms an HTTP request into an &lt;code&gt;Observable&lt;/code&gt; of &lt;a href=&quot;http#interceptor-events&quot;&gt;&lt;code&gt;HttpEvents&lt;/code&gt;&lt;/a&gt; which ultimately include the server's response. The &lt;code&gt;intercept()&lt;/code&gt; method could inspect that observable and alter it before returning it to the caller.</source>
          <target state="translated">&lt;code&gt;intercept()&lt;/code&gt; と同様に、 &lt;code&gt;handle()&lt;/code&gt; メソッドはHTTPリクエストを最終的にサーバーの応答を含む&lt;a href=&quot;http#interceptor-events&quot;&gt; &lt;code&gt;HttpEvents&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;Observable&lt;/code&gt; に変換します。 &lt;code&gt;intercept()&lt;/code&gt; メソッドは、その観察を検査し、呼び出し元に返す前にそれを変化させることができます。</target>
        </trans-unit>
        <trans-unit id="2712b30047f7466a2e4dc145651016587aaff9e5" translate="yes" xml:space="preserve">
          <source>Like JavaScript modules, NgModules can import functionality from other NgModules, and allow their own functionality to be exported and used by other NgModules. For example, to use the router service in your app, you import the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModule.</source>
          <target state="translated">JavaScriptモジュールと同様に、NgModuleは他のNgModuleから機能をインポートでき、独自の機能をエクスポートして他のNgModuleで使用できます。たとえば、アプリでルーターサービスを使用するには、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModule をインポートします。</target>
        </trans-unit>
        <trans-unit id="9c551f24bba1fc42974492065f7f565414accad5" translate="yes" xml:space="preserve">
          <source>Like a &lt;a href=&quot;glossary#module&quot;&gt;JavaScript module&lt;/a&gt;, an NgModule can export functionality for use by other NgModules and import public functionality from other NgModules. The metadata for an NgModule class collects components, directives, and pipes that the application uses along with the list of imports and exports. See also &lt;a href=&quot;glossary#declarable&quot;&gt;declarable&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#module&quot;&gt;JavaScriptモジュール&lt;/a&gt;と同様に、NgModuleは他のNgModuleが使用する機能をエクスポートし、他のNgModuleからパブリック機能をインポートできます。NgModuleクラスのメタデータは、アプリケーションがインポートとエクスポートのリストとともに使用するコンポーネント、ディレクティブ、およびパイプを収集します。&lt;a href=&quot;glossary#declarable&quot;&gt;declarable&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="585189adbddf6995a44ae66c57e2a58943711031" translate="yes" xml:space="preserve">
          <source>Like all routers, it needs a place in the UI to display routed views. For Angular that's the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; and it belongs in a &lt;em&gt;root component&lt;/em&gt; at the top of the applications component tree.</source>
          <target state="translated">すべてのルーターと同様に、ルーティングされたビューを表示するには、UIに場所が必要です。Angularの場合は &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; あり、アプリケーションコンポーネントツリーの最上部にある&lt;em&gt;ルートコンポーネントに&lt;/em&gt;属しています。</target>
        </trans-unit>
        <trans-unit id="e9fb86eb5b7b244ce3a393d7bf88fb154e10ed44" translate="yes" xml:space="preserve">
          <source>Like any complex system, bugs or broken configurations can cause the Angular service worker to act in unforeseen ways. While its design attempts to minimize the impact of such problems, the Angular service worker contains several failsafe mechanisms in case an administrator ever needs to deactivate the service worker quickly.</source>
          <target state="translated">どんな複雑なシステムでもそうですが、バグや壊れた設定によって Angular サービスワーカーが予期せぬ動作をすることがあります。Angular サービスワーカーはそのような問題の影響を最小限に抑えようと設計されていますが、管理者がサービスワーカーをすぐに無効化しなければならない場合に備えて、いくつかのフェイルセーフ機構が用意されています。</target>
        </trans-unit>
        <trans-unit id="91b6a9c73693ab7273fd7bd5232e5b0489fdfe05" translate="yes" xml:space="preserve">
          <source>Like in AngularJS, Angular automatically mirrors many control properties onto the form control element as CSS classes. You can use these classes to style form control elements according to the state of the form. The following classes are currently supported:</source>
          <target state="translated">AngularJSと同様に、Angularは多くのコントロールプロパティをCSSクラスとしてフォームコントロール要素に自動的にミラーリングします。これらのクラスを使ってフォームの状態に応じてフォームコントロール要素のスタイルを設定することができます。現在サポートされているクラスは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6ba9bb36f4f12f28285f91a1591a915e06d43a4b" translate="yes" xml:space="preserve">
          <source>Like most shells, the &lt;code&gt;CrisisCenterComponent&lt;/code&gt; class is minimal because it has no business logic, and its template has no links, just a title and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; for the crisis center child component.</source>
          <target state="translated">ほとんどのシェルと同様に、 &lt;code&gt;CrisisCenterComponent&lt;/code&gt; クラスはビジネスロジックがなく、テンプレートにリンクがなく、危機センターの子コンポーネントのタイトルと &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; だけであるため最小限です。</target>
        </trans-unit>
        <trans-unit id="d328b7053c6feca70f5f37fd0b1b8634858620c3" translate="yes" xml:space="preserve">
          <source>Like most shells, the &lt;code&gt;CrisisCenterComponent&lt;/code&gt; class is very simple, simpler even than &lt;code&gt;AppComponent&lt;/code&gt;: it has no business logic, and its template has no links, just a title and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; for the crisis center child component.</source>
          <target state="translated">ほとんどのシェルと同様に、 &lt;code&gt;CrisisCenterComponent&lt;/code&gt; クラスはAppComponentよりも非常にシンプルでシンプル &lt;code&gt;AppComponent&lt;/code&gt; 。ビジネスロジックがなく、テンプレートにはリンクがなく、タイトルと危機センターの子コンポーネントの &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; だけがあります。</target>
        </trans-unit>
        <trans-unit id="ad5fbe7de515867968271cf92da0ab219dfe53ce" translate="yes" xml:space="preserve">
          <source>Like regular outlets, secondary outlets persists until you navigate away to a new component.</source>
          <target state="translated">通常のアウトレットと同様に、セカンダリアウトレットは、新しいコンポーネントに移動するまで持続します。</target>
        </trans-unit>
        <trans-unit id="3c960f51394e20fb877a0120ae9db80a6aba3cf3" translate="yes" xml:space="preserve">
          <source>Like template expressions, template &lt;em&gt;statements&lt;/em&gt; use a language that looks like JavaScript. The template statement parser differs from the template expression parser and specifically supports both basic assignment (&lt;code&gt;=&lt;/code&gt;) and chaining expressions (with &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;).</source>
          <target state="translated">テンプレート式のように、テンプレート&lt;em&gt;ステートメント&lt;/em&gt;はJavaScriptのように見える言語を使用します。テンプレートステートメントパーサーは、テンプレート式パーサーとは異なり、基本的な割り当て（ &lt;code&gt;=&lt;/code&gt; ）とチェーン式（ &lt;code&gt;;&lt;/code&gt; または &lt;code&gt;,&lt;/code&gt; ）の両方を具体的にサポートしています。</target>
        </trans-unit>
        <trans-unit id="83341afc572aa00f0348ef8d662d360d9825cc0f" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;ng serve&lt;/code&gt; command, this regenerates output files when source files change.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; コマンドと同様に、これはソースファイルが変更されたときに出力ファイルを再生成します。</target>
        </trans-unit>
        <trans-unit id="4690ba435c1d9c2e19677d724dba0cd8f8b810f8" translate="yes" xml:space="preserve">
          <source>Like the TypeScript compiler, The Angular AOT compiler also supports &lt;code&gt;extends&lt;/code&gt; in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; section of the TypeScript configuration file. The &lt;code&gt;extends&lt;/code&gt; property is at the top level, parallel to &lt;code&gt;compilerOptions&lt;/code&gt; and &lt;code&gt;angularCompilerOptions&lt;/code&gt;.</source>
          <target state="translated">活字体のコンパイラと同じように、角度AOTコンパイラはまた、支持体は、 &lt;code&gt;extends&lt;/code&gt; に &lt;code&gt;angularCompilerOptions&lt;/code&gt; 活字体のコンフィギュレーション・ファイルのセクション。 &lt;code&gt;extends&lt;/code&gt; プロパティは、トップレベルに平行で &lt;code&gt;compilerOptions&lt;/code&gt; と &lt;code&gt;angularCompilerOptions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9eb90305b666c99c946bb5838a4ddc083cb67f27" translate="yes" xml:space="preserve">
          <source>Like the TypeScript compiler, The Angular AoT compiler also supports &lt;code&gt;extends&lt;/code&gt; in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; section of the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;. The &lt;code&gt;extends&lt;/code&gt; property is at the top level, parallel to &lt;code&gt;compilerOptions&lt;/code&gt; and &lt;code&gt;angularCompilerOptions&lt;/code&gt;.</source>
          <target state="translated">活字体のコンパイラと同じように、角度IBMアカデミーコンパイラもサポート &lt;code&gt;extends&lt;/code&gt; に &lt;code&gt;angularCompilerOptions&lt;/code&gt; 活字体のコンフィギュレーション・ファイルのセクション、 &lt;code&gt;tsconfig.json&lt;/code&gt; 。 &lt;code&gt;extends&lt;/code&gt; プロパティは、トップレベルに平行で &lt;code&gt;compilerOptions&lt;/code&gt; と &lt;code&gt;angularCompilerOptions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6fbfb2e44912c9fae79f4fff1fd632c52f34ac5" translate="yes" xml:space="preserve">
          <source>Like the array bound to the &lt;em&gt;Contact&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppComponent&lt;/code&gt;, this one includes an object with an &lt;code&gt;outlets&lt;/code&gt; property. The &lt;code&gt;outlets&lt;/code&gt; property value is another object with outlet names for keys. The only named outlet is &lt;code&gt;'popup'&lt;/code&gt;.</source>
          <target state="translated">結合したアレイ状&lt;em&gt;の接触&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;AppComponent&lt;/code&gt; 、これは持つオブジェクト含む &lt;code&gt;outlets&lt;/code&gt; プロパティ。 &lt;code&gt;outlets&lt;/code&gt; プロパティ値は、キーの出口名の別の目的です。唯一の名前付きアウトレットは &lt;code&gt;'popup'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="71038456701c3916973173203244b127960e1aa5" translate="yes" xml:space="preserve">
          <source>Limit &lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;expression syntax&lt;/a&gt; to the supported subset of JavaScript.</source>
          <target state="translated">&lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;式の構文&lt;/a&gt;をJavaScriptのサポートされているサブセットに制限します。</target>
        </trans-unit>
        <trans-unit id="aeed6a8852492bee7de657e7a04fde558cde0b38" translate="yes" xml:space="preserve">
          <source>Limit service scope to a component subtree</source>
          <target state="translated">サービスのスコープをコンポーネントサブツリーに制限する</target>
        </trans-unit>
        <trans-unit id="673e281991136d9d7e9c64e2f080eb1b1ecac1ef" translate="yes" xml:space="preserve">
          <source>Limitation: The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; function won't work if the test body makes an &lt;code&gt;XMLHttpRequest&lt;/code&gt; (XHR) call. XHR calls within a test are rare, but if you need to call XHR, see &lt;a href=&quot;testing#async&quot;&gt;&lt;code&gt;async()&lt;/code&gt;&lt;/a&gt;, below.</source>
          <target state="translated">制限：テスト本体が &lt;code&gt;XMLHttpRequest&lt;/code&gt; （XHR）呼び出しを行う場合、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 関数は機能しません。テスト内でのXHR呼び出しはまれですが、XHRを呼び出す必要がある場合は、以下の&lt;a href=&quot;testing#async&quot;&gt; &lt;code&gt;async()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0d0f482405b1ca09a504168b85c0821c0a7b2c58" translate="yes" xml:space="preserve">
          <source>Limitation: The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; function won't work if the test body makes an &lt;code&gt;XMLHttpRequest&lt;/code&gt; (XHR) call. XHR calls within a test are rare, but if you need to call XHR, see &lt;a href=&quot;testing-components-scenarios#waitForAsync&quot;&gt;&lt;code&gt;waitForAsync()&lt;/code&gt;&lt;/a&gt;, below.</source>
          <target state="translated">制限：テスト本体が &lt;code&gt;XMLHttpRequest&lt;/code&gt; （XHR）呼び出しを行う場合、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 関数は機能しません。テスト内でのXHR呼び出しはまれですが、XHRを呼び出す必要がある場合は、以下の&lt;a href=&quot;testing-components-scenarios#waitForAsync&quot;&gt; &lt;code&gt;waitForAsync()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ded306388332ec989fda506a02d51aba128c7138" translate="yes" xml:space="preserve">
          <source>Limiting provider scope by lazy loading modules</source>
          <target state="translated">遅延ロードモジュールによるプロバイダスコープの制限</target>
        </trans-unit>
        <trans-unit id="89ab768d7c5f66203eca0f427be89355c7490b9e" translate="yes" xml:space="preserve">
          <source>Limiting provider scope with components</source>
          <target state="translated">コンポーネントでプロバイダの範囲を制限する</target>
        </trans-unit>
        <trans-unit id="dafc778c795eaafcbc7950d059ea632b0bbed413" translate="yes" xml:space="preserve">
          <source>Link parameters array</source>
          <target state="translated">リンクパラメータ配列</target>
        </trans-unit>
        <trans-unit id="ebeeb12b89ea951a3d70569f3a883c5068bcd2c5" translate="yes" xml:space="preserve">
          <source>Link tag</source>
          <target state="translated">リンクタグ</target>
        </trans-unit>
        <trans-unit id="05a4c3bd058773e937f5a60f7f7a6ac340bd0ee8" translate="yes" xml:space="preserve">
          <source>Link the library</source>
          <target state="translated">ライブラリをリンクする</target>
        </trans-unit>
        <trans-unit id="e95ec7effe5117842199bf6a8a33372713843750" translate="yes" xml:space="preserve">
          <source>Linked libraries</source>
          <target state="translated">リンクされたライブラリ</target>
        </trans-unit>
        <trans-unit id="5abd1d8d73b4555d463bfb879da84e8d8357edc1" translate="yes" xml:space="preserve">
          <source>List Example</source>
          <target state="translated">リスト例</target>
        </trans-unit>
        <trans-unit id="fe441653b156494ea24f494a301178e5b59c44e7" translate="yes" xml:space="preserve">
          <source>List heroes with &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForで&lt;/a&gt;ヒーローをリスト</target>
        </trans-unit>
        <trans-unit id="9554ab96c5780c8e77824d964ff8ec18697124d1" translate="yes" xml:space="preserve">
          <source>List of additional NgModule files that will be lazy loaded. Lazy router modules will be discovered automatically.</source>
          <target state="translated">遅延ロードされる追加のNgModuleファイルのリスト。遅延したルータモジュールは自動的に検出されます。</target>
        </trans-unit>
        <trans-unit id="cbce62cc871e24eefa3b59c5e93efe28fffa5a14" translate="yes" xml:space="preserve">
          <source>List of components not referenced in any reachable template, for example dynamically created from code.</source>
          <target state="translated">到達可能なテンプレートで参照されないコンポーネントのリスト(例えばコードから動的に作成されたものなど)。</target>
        </trans-unit>
        <trans-unit id="efe7666b861fee17fb6c8a4c39c06756c03bb105" translate="yes" xml:space="preserve">
          <source>List of components to bootstrap when this module is bootstrapped.</source>
          <target state="translated">このモジュールがブートストラップされたときにブートストラップされるコンポーネントのリスト。</target>
        </trans-unit>
        <trans-unit id="4095ea4985f0e38f002f69cf452dec18fa4bd79e" translate="yes" xml:space="preserve">
          <source>List of components, directives, and pipes that belong to this module.</source>
          <target state="translated">このモジュールに属するコンポーネント、ディレクティブ、パイプのリスト。</target>
        </trans-unit>
        <trans-unit id="c889ce564a34bf3ed0a510d34b49b021f11d1487" translate="yes" xml:space="preserve">
          <source>List of components, directives, and pipes visible to modules that import this module.</source>
          <target state="translated">このモジュールをインポートするモジュールから見えるコンポーネント、ディレクティブ、パイプのリスト。</target>
        </trans-unit>
        <trans-unit id="d1207345ca32d222a8e432068269adabe143d033" translate="yes" xml:space="preserve">
          <source>List of dependency injection providers for this directive and its children.</source>
          <target state="translated">このディレクティブとその子のための依存性注入プロバイダのリスト。</target>
        </trans-unit>
        <trans-unit id="fe1604c69069d34dff1de4bebbd2c00d202aad46" translate="yes" xml:space="preserve">
          <source>List of dependency injection providers scoped to this component's view.</source>
          <target state="translated">このコンポーネントのビューにスコープされた依存性インジェクションプロバイダのリスト。</target>
        </trans-unit>
        <trans-unit id="0764d9c4b1ea0aa7ca88575f1383a8a28c5e17ce" translate="yes" xml:space="preserve">
          <source>List of dependency injection providers visible both to the contents of this module and to importers of this module.</source>
          <target state="translated">このモジュールの内容とこのモジュールのインポーターの両方に見える依存性注入プロバイダのリスト。</target>
        </trans-unit>
        <trans-unit id="1f045cc2a6aef9ce1b80467ca9aa73e97e4a5cf7" translate="yes" xml:space="preserve">
          <source>List of hosts that are allowed to access the dev server.</source>
          <target state="translated">devサーバへのアクセスを許可しているホストのリスト。</target>
        </trans-unit>
        <trans-unit id="1705616178a33f362179ee1acbbd208dd8db8f30" translate="yes" xml:space="preserve">
          <source>List of inline CSS styles or external stylesheet URLs for styling the component&amp;rsquo;s view.</source>
          <target state="translated">コンポーネントのビューをスタイル設定するためのインラインCSSスタイルまたは外部スタイルシートURLのリスト。</target>
        </trans-unit>
        <trans-unit id="f5d4fc5e3688560af7a94670d8c7f9b85064b9c2" translate="yes" xml:space="preserve">
          <source>List of modules to import into this module. Everything from the imported modules is available to &lt;code&gt;declarations&lt;/code&gt; of this module.</source>
          <target state="translated">このモジュールにインポートするモジュールのリスト。インポートされたモジュールのすべては、このモジュールの &lt;code&gt;declarations&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="f0d5e8ade3dc66891a3b11ab132029d51b67ca80" translate="yes" xml:space="preserve">
          <source>List the generated bundles in the &lt;code&gt;dist/&lt;/code&gt; folder.</source>
          <target state="translated">生成されたバンドルを &lt;code&gt;dist/&lt;/code&gt; フォルダーにリストします。</target>
        </trans-unit>
        <trans-unit id="beb3e6d282efa5be1b17ff0ef3d00e6cf72f51b8" translate="yes" xml:space="preserve">
          <source>List the generated bundles in the &lt;code&gt;dist/project-name/&lt;/code&gt; folder.</source>
          <target state="translated">生成されたバンドルを &lt;code&gt;dist/project-name/&lt;/code&gt; フォルダーにリストします。</target>
        </trans-unit>
        <trans-unit id="73d6d61553d6923f0e56af93936294f91739b3f9" translate="yes" xml:space="preserve">
          <source>List-item separator. Example: &quot;one, two, and three&quot;</source>
          <target state="translated">リスト項目の区切り文字。例 &quot;1、2、3&quot;</target>
        </trans-unit>
        <trans-unit id="f819e377af6a253cf7b15c400531f8b31594b0b4" translate="yes" xml:space="preserve">
          <source>Listed below are the base classes and services used to create and manage form controls.</source>
          <target state="translated">以下に、フォームコントロールの作成と管理に使用される基本クラスとサービスを示します。</target>
        </trans-unit>
        <trans-unit id="a90c21e873b5d8262d59496442bc0220f95054ad" translate="yes" xml:space="preserve">
          <source>Listen for data from an input.</source>
          <target state="translated">入力からのデータをリッスンします。</target>
        </trans-unit>
        <trans-unit id="148541005c620fc1e1bb09453d368cfc1c05ad83" translate="yes" xml:space="preserve">
          <source>Listen for keystrokes, but provide a stream representing the value in the input.</source>
          <target state="translated">キーストロークをリッスンしますが、入力の値を表すストリームを提供します。</target>
        </trans-unit>
        <trans-unit id="37ea46b5942beaeb21bb4e06a14e4f7232d2a1b0" translate="yes" xml:space="preserve">
          <source>Listener</source>
          <target state="translated">Listener</target>
        </trans-unit>
        <trans-unit id="a6bab703979ffded38cb18ceafb2498266b4ba40" translate="yes" xml:space="preserve">
          <source>Listening for form submission</source>
          <target state="translated">フォーム提出のためのリスニング</target>
        </trans-unit>
        <trans-unit id="de906cfc91b32a32df4f149847ed0a39eecca3f3" translate="yes" xml:space="preserve">
          <source>Listening to progress events</source>
          <target state="translated">プログレスイベントの試聴</target>
        </trans-unit>
        <trans-unit id="f9528c7fd458964ab7b0b92b633774bce83a6ea7" translate="yes" xml:space="preserve">
          <source>Listens for an element change event.</source>
          <target state="translated">要素変更イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="461c42998bd4b841c62ede37f929ff1a1b0ebff3" translate="yes" xml:space="preserve">
          <source>Lists CSS files that supply styles for a project. The extension reflects the style preprocessor you have configured for the project.</source>
          <target state="translated">プロジェクトにスタイルを提供する CSS ファイルを一覧表示します。拡張子は、プロジェクト用に設定したスタイル・プリプロセッサを反映します。</target>
        </trans-unit>
        <trans-unit id="4155cc0df13221795a620210d3c6cbdaea741275" translate="yes" xml:space="preserve">
          <source>Lists available commands and their short descriptions.</source>
          <target state="translated">利用可能なコマンドとその簡単な説明を一覧表示します。</target>
        </trans-unit>
        <trans-unit id="16ed44692d8ad77b79438ff89f70547bfc2c8f59" translate="yes" xml:space="preserve">
          <source>Literal array</source>
          <target state="translated">リテラル配列</target>
        </trans-unit>
        <trans-unit id="5e5d6608e9c1043b497854f14ddd3f434365adbb" translate="yes" xml:space="preserve">
          <source>Literal boolean</source>
          <target state="translated">リテラルのブール値</target>
        </trans-unit>
        <trans-unit id="aefb6c535c633d3fd4c244f05f9150051f95d764" translate="yes" xml:space="preserve">
          <source>Literal null</source>
          <target state="translated">リテラルヌル</target>
        </trans-unit>
        <trans-unit id="f09a5cb4fe044da34e2089937646a3266bcb0772" translate="yes" xml:space="preserve">
          <source>Literal number</source>
          <target state="translated">文字数</target>
        </trans-unit>
        <trans-unit id="e873017807fac060c5a6a2540134ecd7af88ac3a" translate="yes" xml:space="preserve">
          <source>Literal object</source>
          <target state="translated">リテラルオブジェクト</target>
        </trans-unit>
        <trans-unit id="0dd2df3bdd58ea3fee6371ca12874b46ac5a08a5" translate="yes" xml:space="preserve">
          <source>Literal string</source>
          <target state="translated">リテラル文字列</target>
        </trans-unit>
        <trans-unit id="b57452dc90c7272633a6e55b09bbe97b6fc736c0" translate="yes" xml:space="preserve">
          <source>Live Example for named Stackblitz</source>
          <target state="translated">Stackblitzという名前のためのライブの例</target>
        </trans-unit>
        <trans-unit id="388c9001eb6fdc7be89eee00a249fe06fb40880d" translate="yes" xml:space="preserve">
          <source>Live Example with download-only</source>
          <target state="translated">ダウンロード専用のライブサンプル</target>
        </trans-unit>
        <trans-unit id="07ff11a723e5a565044db2e9077a5159e72c2853" translate="yes" xml:space="preserve">
          <source>Live Example without download</source>
          <target state="translated">ダウンロードなしのライブ例</target>
        </trans-unit>
        <trans-unit id="15dae1e0d363cb6cbea91c5b210a73bf0dfaf3ce" translate="yes" xml:space="preserve">
          <source>Live example from another guide</source>
          <target state="translated">他のガイドからの実例</target>
        </trans-unit>
        <trans-unit id="7df310a49c994290ecfc7e21b62d9c4caf2a0804" translate="yes" xml:space="preserve">
          <source>Live example with content label</source>
          <target state="translated">コンテンツラベルを使用したライブの例</target>
        </trans-unit>
        <trans-unit id="d66c6803c67f60624e428beacade6cb10972157a" translate="yes" xml:space="preserve">
          <source>Live examples</source>
          <target state="translated">実例</target>
        </trans-unit>
        <trans-unit id="8a7981f020f2c3393efbc6bb8b6d8826836467e9" translate="yes" xml:space="preserve">
          <source>Live examples (AKA &quot;stackblitz&quot;) are defined by one or more &lt;code&gt;stackblitz.json&lt;/code&gt; files in the root of a code sample folder. Each sample folder usually has a single unnamed definition file, the default &lt;code&gt;stackblitz.json&lt;/code&gt;.</source>
          <target state="translated">ライブサンプル（別名 &quot;stackblitz&quot;）は、コードサンプルフォルダーのルートにある1つ以上の &lt;code&gt;stackblitz.json&lt;/code&gt; ファイルによって定義されます。通常、各サンプルフォルダーには、名前のない単一の定義ファイル、デフォルトの &lt;code&gt;stackblitz.json&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="c411dac4ba609b8397b10861a22cedb488ad6bfe" translate="yes" xml:space="preserve">
          <source>Load the module lazily if you can. Angular gives a &lt;a href=&quot;ngmodule-faq#q-lazy-loaded-module-provider-visibility&quot;&gt;lazy-loaded module&lt;/a&gt; its own child injector. The module's providers are visible only within the component tree created with this injector.</source>
          <target state="translated">可能であれば、モジュールをレイジーにロードしてください。Angularは、&lt;a href=&quot;ngmodule-faq#q-lazy-loaded-module-provider-visibility&quot;&gt;遅延ロードされたモジュール&lt;/a&gt;に独自の子インジェクターを提供します。モジュールのプロバイダーは、このインジェクターで作成されたコンポーネントツリー内でのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="855626215880fd7dea9a3f607d78c18204bfbf46" translate="yes" xml:space="preserve">
          <source>Load the router library.</source>
          <target state="translated">ルーターライブラリをロードします。</target>
        </trans-unit>
        <trans-unit id="2fc4426cd416a32214c9b3b17bd86f3d1c1570cf" translate="yes" xml:space="preserve">
          <source>LoadChildren</source>
          <target state="translated">LoadChildren</target>
        </trans-unit>
        <trans-unit id="9f0b098c811d75663f50ef7845bc4eb008bd71e1" translate="yes" xml:space="preserve">
          <source>LoadChildrenCallback</source>
          <target state="translated">LoadChildrenCallback</target>
        </trans-unit>
        <trans-unit id="31112e015bc59afed4d726bc9b3b2423316d6d0e" translate="yes" xml:space="preserve">
          <source>Loading component styles</source>
          <target state="translated">コンポーネントスタイルの読み込み</target>
        </trans-unit>
        <trans-unit id="35b7de4928575370e540a435aa94cc96210fd6a0" translate="yes" xml:space="preserve">
          <source>Loading components</source>
          <target state="translated">コンポーネントの読み込み</target>
        </trans-unit>
        <trans-unit id="ef1b3efd0750b6cb1d1bea14f88b3643b10ef11c" translate="yes" xml:space="preserve">
          <source>Loading external stylesheets is a blocking operation, which means that the browser can&amp;rsquo;t start rendering your application until it loads all the referenced CSS. Having render-blocking resources in the header of a page can significantly impact its load performance, for example, its &lt;a href=&quot;https://web.dev/first-contentful-paint/&quot;&gt;first contentful paint&lt;/a&gt;. To make apps faster, we&amp;rsquo;ve been collaborating with the Google Chrome team on inlining critical CSS and loading the rest of the styles asynchronously.</source>
          <target state="translated">外部スタイルシートのロードはブロック操作です。つまり、参照されているすべてのCSSをロードするまで、ブラウザーはアプリケーションのレンダリングを開始できません。ページのヘッダーにレンダリングブロックリソースがあると、その読み込みパフォーマンスに大きな影響を与える可能性があります。たとえば、&lt;a href=&quot;https://web.dev/first-contentful-paint/&quot;&gt;最初のコンテンツの多いペイントなど&lt;/a&gt;です。アプリを高速化するために、Google Chromeチームと協力して、重要なCSSをインライン化し、残りのスタイルを非同期でロードしています。</target>
        </trans-unit>
        <trans-unit id="f359a44a5b3782750e70ce88ac64b11e5f3123ba" translate="yes" xml:space="preserve">
          <source>Local development in older browsers</source>
          <target state="translated">古いブラウザでのローカル展開</target>
        </trans-unit>
        <trans-unit id="d1e5308b3d59fa3cd12e651dd78e919dc9761776" translate="yes" xml:space="preserve">
          <source>Local references to DOM elements.</source>
          <target state="translated">DOM 要素へのローカル参照。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
