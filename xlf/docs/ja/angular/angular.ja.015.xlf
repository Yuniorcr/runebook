<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="21ecfa2595cc1f5b325b2c21cfbff7962334a60c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; options make the declared directives and pipes available for import by other NgModules.</source>
          <target state="translated">&lt;code&gt;exports&lt;/code&gt; オプションは、他のNgModulesによって輸入のための宣言ディレクティブとパイプが利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="4c7e18bb45ba4b5fd41913cd19bf2cb5879bd3d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract-i18n&lt;/code&gt; command can read and write files in three translation formats:</source>
          <target state="translated">&lt;code&gt;extract-i18n&lt;/code&gt; コマンドが読み込まれ、3つの翻訳形式でファイルを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="ba5be89352c9b3d4545a07684018a85c193a9e6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract-i18n&lt;/code&gt; command creates a source language file named &lt;code&gt;messages.xlf&lt;/code&gt; in your project's root directory using the &lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XML Localization Interchange File Format (XLIFF, version 1.2)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;extract-i18n&lt;/code&gt; コマンドは、指定されたソース言語ファイル作成 &lt;code&gt;messages.xlf&lt;/code&gt; を使用して、プロジェクトのルートディレクトリに&lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XMLローカリゼーション交換ファイル形式（XLIFF、バージョン1.2） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="924a0bda0e58b6d45eeda97233361e4d92152b9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;factory&lt;/code&gt; function returns the &lt;code&gt;localStorage&lt;/code&gt; property that is attached to the browser window object. The &lt;code&gt;&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; decorator is a constructor parameter used to specify a custom provider of a dependency. This custom provider can now be overridden during testing with a mock API of &lt;code&gt;localStorage&lt;/code&gt; instead of interacting with real browser APIs.</source>
          <target state="translated">&lt;code&gt;factory&lt;/code&gt; 関数は返す &lt;code&gt;localStorage&lt;/code&gt; ブラウザウィンドウオブジェクトに添付されたプロパティを。 &lt;code&gt;&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; デコレータは、依存関係のカスタムプロバイダを指定するために使用されるコンストラクタのパラメータです。このカスタムプロバイダーは、実際のブラウザーAPIと対話する代わりに、 &lt;code&gt;localStorage&lt;/code&gt; のモックAPIを使用してテスト中にオーバーライドできるようになりました。</target>
        </trans-unit>
        <trans-unit id="a9be60669d284e5d6102bee94f0946b335ed3c86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;factory&lt;/code&gt; function returns the &lt;code&gt;localStorage&lt;/code&gt; property that is attached to the browser window object. The &lt;code&gt;&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; decorator is a constructor parameter used to specify a custom provider of a dependency. This custom provider can now be overridden during testing with a mock API of &lt;code&gt;localStorage&lt;/code&gt; instead of interactive with real browser APIs.</source>
          <target state="translated">&lt;code&gt;factory&lt;/code&gt; 関数は返す &lt;code&gt;localStorage&lt;/code&gt; ブラウザウィンドウオブジェクトに添付されたプロパティを。 &lt;code&gt;&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; デコレータは、依存関係のカスタムプロバイダを指定するために使用されるコンストラクタのパラメータです。このカスタムプロバイダーは、実際のブラウザーAPIと対話するのではなく、テスト中に &lt;code&gt;localStorage&lt;/code&gt; のモックAPIでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="b00430e5bbaeadf8241fc073201ea7ecc5ca41b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;factory&lt;/code&gt; property points to the generated entry function. In this example, you invoke the &lt;code&gt;hello-world&lt;/code&gt; schematic by calling the &lt;code&gt;helloWorld()&lt;/code&gt; factory function.</source>
          <target state="translated">&lt;code&gt;factory&lt;/code&gt; プロパティは、生成されたエントリー機能を指します。この例では、 &lt;code&gt;helloWorld()&lt;/code&gt; ファクトリー関数を呼び出して、 &lt;code&gt;hello-world&lt;/code&gt; 回路図を呼び出します。</target>
        </trans-unit>
        <trans-unit id="fe36d75cc550ebe730a33a6d287578930b3b9f33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;favoriteColor&lt;/code&gt; value is updated in the component.</source>
          <target state="translated">コンポーネントの &lt;code&gt;favoriteColor&lt;/code&gt; 値が更新されます。</target>
        </trans-unit>
        <trans-unit id="127d59be8640df24f5583305129ef01af0da1a63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;fetch-json&lt;/code&gt; pipes display the heroes as shown in Figure 5.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; と &lt;code&gt;fetch-json&lt;/code&gt; 、図5に示すように、パイプは、ヒーローを表示します。</target>
        </trans-unit>
        <trans-unit id="7108ed3bcfda58185316e0339599c6526b1f2408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch&lt;/code&gt; pipe (&lt;code&gt;fetch-json.pipe.ts&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; パイプ（ &lt;code&gt;fetch-json.pipe.ts&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4a29f62b66251be3080836e417909a06fdd5cb52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixture.whenStable()&lt;/code&gt; returns a promise that resolves when the JavaScript engine's task queue becomes empty. In this example, the task queue becomes empty when the observable emits the first quote.</source>
          <target state="translated">&lt;code&gt;fixture.whenStable()&lt;/code&gt; 解決さJavaScriptエンジンのタスクキューが空になるという約束を返します。この例では、オブザーバブルが最初の引用を発行すると、タスクキューが空になります。</target>
        </trans-unit>
        <trans-unit id="881baa9041fdc7ad68bbc1a717633ee715f6da9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forChild()&lt;/code&gt; method creates an &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; that contains all the directives and the given routes, but does not include the &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;forChild()&lt;/code&gt; メソッドを作成 &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 指令および所定の経路のすべてを含むが、含まれていない &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービス。</target>
        </trans-unit>
        <trans-unit id="b6eefc0aaa0380bddfa4cf81ec05c3559e3ac941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; configuration method takes an &lt;code&gt;InMemoryDataService&lt;/code&gt; class that primes the in-memory database.</source>
          <target state="translated">&lt;code&gt;forRoot()&lt;/code&gt; の設定方法は、かかる &lt;code&gt;InMemoryDataService&lt;/code&gt; のインメモリデータベースをプライミングクラス。</target>
        </trans-unit>
        <trans-unit id="127fea156d178f36549610f61f489eddc6685d9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; method creates an &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; that contains all the directives, the given routes, and the &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service itself.</source>
          <target state="translated">&lt;code&gt;forRoot()&lt;/code&gt; メソッドを作成 &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; すべてのディレクティブ、所定の経路、及び含ま &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービス自体。</target>
        </trans-unit>
        <trans-unit id="55ac1b05d812482b7507362d51a4ec1a2580d80d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; method takes care of the &lt;em&gt;global&lt;/em&gt; injector configuration for the Router. The &lt;code&gt;forChild()&lt;/code&gt; method has no injector configuration. It uses directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;. For more information, see the &lt;a href=&quot;singleton-services#forRoot&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; pattern&lt;/a&gt; section of the &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;forRoot()&lt;/code&gt; メソッドは、の世話をする&lt;em&gt;グローバル&lt;/em&gt;ルータ用インジェクタ構成。 &lt;code&gt;forChild()&lt;/code&gt; メソッドは、インジェクタの構成を有していません。 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; などのディレクティブを使用します。詳細については、&lt;a href=&quot;singleton-services&quot;&gt;シングルトンサービス&lt;/a&gt;ガイドの&lt;a href=&quot;singleton-services#forRoot&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; パターンの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e68a2010e1bbb32a0b1a5eab0b289f3ed8d55958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; pattern</source>
          <target state="translated">&lt;code&gt;forRoot()&lt;/code&gt; パターン</target>
        </trans-unit>
        <trans-unit id="04c1a805b485019f2266bc642ca4eb018b5b6c5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; static method is a convention that makes it easy for developers to configure services and providers that are intended to be singletons. A good example of &lt;code&gt;forRoot()&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;forRoot()&lt;/code&gt; 静的メソッドは、シングルトンであることを意図しているのconfigureサービスやプロバイダに開発者のために簡単にそれを作る慣習です。 &lt;code&gt;forRoot()&lt;/code&gt; の良い例は、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドです。</target>
        </trans-unit>
        <trans-unit id="dba3238be00f6a9329dd14c8cde743d8af35af2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forbiddenNameValidator&lt;/code&gt; factory returns the configured validator function. That function takes an Angular control object and returns &lt;em&gt;either&lt;/em&gt; null if the control value is valid &lt;em&gt;or&lt;/em&gt; a validation error object. The validation error object typically has a property whose name is the validation key, &lt;code&gt;'forbiddenName'&lt;/code&gt;, and whose value is an arbitrary dictionary of values that you could insert into an error message, &lt;code&gt;{name}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forbiddenNameValidator&lt;/code&gt; の工場は、設定検証関数を返します。その関数は、角度制御オブジェクトを取得し、返す&lt;em&gt;いずれかの&lt;/em&gt;制御値が有効である場合はnullを&lt;em&gt;または&lt;/em&gt;検証エラーオブジェクト。検証エラーオブジェクトには通常、名前が検証キー &lt;code&gt;'forbiddenName'&lt;/code&gt; であり、値がエラーメッセージ &lt;code&gt;{name}&lt;/code&gt; に挿入できる値の任意の辞書であるプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="d6c47dfe0b4a9d194d93da6a53e2c28c4b4a6638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;freshness&lt;/code&gt; strategy usually results in more requests sent to the server, which can increase response latency. It is recommended that you use the default performance strategy whenever possible.</source>
          <target state="translated">&lt;code&gt;freshness&lt;/code&gt; 戦略は、通常より多くの要求の結果は、応答待ち時間を増やすことができ、サーバに送信しました。可能な限り、デフォルトのパフォーマンス戦略を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="85f621324bd7bc992e815895a148f44c50582aa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get()&lt;/code&gt; method takes two arguments; the endpoint URL from which to fetch, and an &lt;em&gt;options&lt;/em&gt; object that you can use to configure the request.</source>
          <target state="translated">&lt;code&gt;get()&lt;/code&gt; メソッドは2つの引数を取ります。フェッチ元のエンドポイントURL、およびリクエストの構成に使用できる&lt;em&gt;オプション&lt;/em&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="fd14df01685172b159816db8b4cc83eb319f6817" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getEventMessage&lt;/code&gt; method interprets each type of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; in the event stream.</source>
          <target state="translated">&lt;code&gt;getEventMessage&lt;/code&gt; の方法は、各タイプの解釈 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; イベントストリームです。</target>
        </trans-unit>
        <trans-unit id="0720e6119153b338ac8f3687fa78b44bc47f650b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getItems()&lt;/code&gt; method collects the items users add to the cart and returns each item with its associated quantity.</source>
          <target state="translated">&lt;code&gt;getItems()&lt;/code&gt; メソッドは、ユーザーがカートに追加するアイテムを収集し、それに関連する量で各項目を返します。</target>
        </trans-unit>
        <trans-unit id="a5b92c25379c77bec5a559ce651e63e02dcdcc9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goToItems()&lt;/code&gt; method interprets the destination URI as relative to the activated route and navigates to the &lt;code&gt;items&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;goToItems()&lt;/code&gt; メソッドの解釈に活性化された経路とナビゲートに対して、宛先URI &lt;code&gt;items&lt;/code&gt; ルート。</target>
        </trans-unit>
        <trans-unit id="1b27c3ddf198371aface3067fae60b5f34b13c19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero-birthday2.component.ts&lt;/code&gt; component binds the pipe's format parameter to the component's &lt;code&gt;format&lt;/code&gt; property in the &lt;code&gt;template&lt;/code&gt; section, and adds a button for a click event bound to the component's &lt;code&gt;toggleFormat()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;hero-birthday2.component.ts&lt;/code&gt; コンポーネントのコンポーネントにバインドパイプのformatパラメータ &lt;code&gt;format&lt;/code&gt; でプロパティ &lt;code&gt;template&lt;/code&gt; セクション、およびコンポーネントのにバインドされたクリックイベントのためのボタン追加 &lt;code&gt;toggleFormat()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="5467834f536bb386d92822c337a7b0060f16f33e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero-birthday2.component.ts&lt;/code&gt; component's &lt;code&gt;toggleFormat()&lt;/code&gt; method toggles the component's &lt;code&gt;format&lt;/code&gt; property between a short form (&lt;code&gt;'shortDate'&lt;/code&gt;) and a longer form (&lt;code&gt;'fullDate'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;hero-birthday2.component.ts&lt;/code&gt; コンポーネントの &lt;code&gt;toggleFormat()&lt;/code&gt; メソッドは、コンポーネントのトグル &lt;code&gt;format&lt;/code&gt; 短い形態（間プロパティ &lt;code&gt;'shortDate'&lt;/code&gt; ）と長いフォーム（ &lt;code&gt;'fullDate'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3a70ca7b9c1c4fe66b0b5e312918acfa718fb720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero&lt;/code&gt; property &lt;a href=&quot;../guide/inputs-outputs&quot;&gt;must be an &lt;em&gt;Input&lt;/em&gt; property&lt;/a&gt;, annotated with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator, because the &lt;em&gt;external&lt;/em&gt;&lt;code&gt;HeroesComponent&lt;/code&gt;&lt;a href=&quot;toh-pt3#heroes-component-template&quot;&gt;will bind to it&lt;/a&gt; like this.</source>
          <target state="translated">&lt;code&gt;hero&lt;/code&gt; プロパティが&lt;a href=&quot;../guide/inputs-outputs&quot;&gt;なければなりません&lt;em&gt;入力&lt;/em&gt;プロパティ&lt;/a&gt;で注釈を付け、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ので、デコレータ&lt;em&gt;外部&lt;/em&gt; &lt;code&gt;HeroesComponent&lt;/code&gt; は、&lt;a href=&quot;toh-pt3#heroes-component-template&quot;&gt;それに結合する&lt;/a&gt;。このように。</target>
        </trans-unit>
        <trans-unit id="39d503fba2d2e3b6c4480f750303d3e8aed59ed1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero&lt;/code&gt; property &lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt;must be an &lt;em&gt;Input&lt;/em&gt; property&lt;/a&gt;, annotated with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator, because the &lt;em&gt;external&lt;/em&gt;&lt;code&gt;HeroesComponent&lt;/code&gt;&lt;a href=&quot;toh-pt3#heroes-component-template&quot;&gt;will bind to it&lt;/a&gt; like this.</source>
          <target state="translated">&lt;code&gt;hero&lt;/code&gt; プロパティが&lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt;なければなりません&lt;em&gt;入力&lt;/em&gt;プロパティ&lt;/a&gt;で注釈を付け、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ので、デコレータ&lt;em&gt;外部&lt;/em&gt; &lt;code&gt;HeroesComponent&lt;/code&gt; は、&lt;a href=&quot;toh-pt3#heroes-component-template&quot;&gt;それに結合する&lt;/a&gt;。このように。</target>
        </trans-unit>
        <trans-unit id="a2edb9a418b0554b3bfc9b77ca9cc6ab8f255079" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;heroDe&lt;/code&gt; in the previous test is a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; that represents the hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;heroDe&lt;/code&gt; 前回のテストではあり &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 英雄を表す &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe76834c11e23bdf25e69d2b4d46892575be8ced" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;heroForm&lt;/code&gt; template variable is now a reference to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive instance that governs the form as a whole.</source>
          <target state="translated">&lt;code&gt;heroForm&lt;/code&gt; のテンプレート変数は、現在の基準である &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 全体としてフォームを支配指令インスタンス。</target>
        </trans-unit>
        <trans-unit id="6362acf07cbe2fa34576d50dba32d4d4e546c13b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;home&lt;/code&gt; and &lt;code&gt;about&lt;/code&gt; paths are associated with the &lt;code&gt;HomeComponent&lt;/code&gt; and &lt;code&gt;AboutComponent&lt;/code&gt; views. The route configuration tells the Angular router to instantiate the &lt;code&gt;HomeComponent&lt;/code&gt; and &lt;code&gt;AboutComponent&lt;/code&gt; views when the navigation matches the corresponding path.</source>
          <target state="translated">&lt;code&gt;home&lt;/code&gt; と &lt;code&gt;about&lt;/code&gt; パスが関連付けられている &lt;code&gt;HomeComponent&lt;/code&gt; と &lt;code&gt;AboutComponent&lt;/code&gt; 景色。ルート設定は、インスタンス化する角度ルータに指示 &lt;code&gt;HomeComponent&lt;/code&gt; をと &lt;code&gt;AboutComponent&lt;/code&gt; は、ナビゲーションは、対応するパスと一致した場合に見。</target>
        </trans-unit>
        <trans-unit id="2a02f37aa3baaa14054711339393bc3aef4719e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; value appears in the URL as (&lt;code&gt;;id=15;foo=foo&lt;/code&gt;), not in the URL path. The path for the &quot;Heroes&quot; route doesn't have an &lt;code&gt;:id&lt;/code&gt; token.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; （値としてURLに表示され &lt;code&gt;;id=15;foo=foo&lt;/code&gt; ）、ないURLパスです。「ヒーロー」ルートのパスには &lt;code&gt;:id&lt;/code&gt; トークンがありません。</target>
        </trans-unit>
        <trans-unit id="d2a37db1eb13b9ead8103b3a67181318ca13dfa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id=&quot;introductionHeader&quot;&quot;&lt;/code&gt; is a &lt;a href=&quot;i18n#custom-id&quot;&gt;custom ID&lt;/a&gt;, but without the &lt;code&gt;@@&lt;/code&gt; prefix required in the source HTML.</source>
          <target state="translated">&lt;code&gt;id=&quot;introductionHeader&quot;&quot;&lt;/code&gt; である&lt;a href=&quot;i18n#custom-id&quot;&gt;カスタムID&lt;/a&gt;が、なし &lt;code&gt;@@&lt;/code&gt; ソースHTMLで必要な接頭辞。</target>
        </trans-unit>
        <trans-unit id="bcbab5f11479981553cbc81516e984d3e5ea7327" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; validator implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; interface. It takes an Angular control object as an argument and returns either null if the form is valid, or &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; バリデータを実装 &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; のインターフェイスを。引数としてAngularコントロールオブジェクトを受け取り、フォームが有効な場合はnullを返し、そうでない場合は &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7232545d328800c53fff51138f5955f3e7f74341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; statement specifies an additional &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; symbol from the Angular &lt;code&gt;core&lt;/code&gt; library:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 文は、追加指定 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; の角度からシンボルを &lt;code&gt;core&lt;/code&gt; ライブラリ：</target>
        </trans-unit>
        <trans-unit id="049525d2c4f861b9a942bcdfc68610b177c1bcb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;imports&lt;/code&gt; array</source>
          <target state="translated">&lt;code&gt;imports&lt;/code&gt; 配列</target>
        </trans-unit>
        <trans-unit id="8c1be88d9d2352c6c3fbf36e60352a74ee41e8c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-memory-data.service.ts&lt;/code&gt; file replaces &lt;code&gt;mock-heroes.ts&lt;/code&gt;, which is now safe to delete.</source>
          <target state="translated">&lt;code&gt;in-memory-data.service.ts&lt;/code&gt; ファイルが置き換え &lt;code&gt;mock-heroes.ts&lt;/code&gt; 今削除しても安全です、。</target>
        </trans-unit>
        <trans-unit id="5948673b687ff09a4cbca50cc357fac757e1e338" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-memory-data.service.ts&lt;/code&gt; file will take over the function of &lt;code&gt;mock-heroes.ts&lt;/code&gt;. However, don't delete &lt;code&gt;mock-heroes.ts&lt;/code&gt; yet, as you still need it for a few more steps of this tutorial.</source>
          <target state="translated">&lt;code&gt;in-memory-data.service.ts&lt;/code&gt; ファイルは、機能引き継ぐ &lt;code&gt;mock-heroes.ts&lt;/code&gt; 。ただし、このチュートリアルのさらにいくつかの手順で必要になるため、 &lt;code&gt;mock-heroes.ts&lt;/code&gt; はまだ削除しないでください。</target>
        </trans-unit>
        <trans-unit id="1ddf450cc5e1c65a6c7b59f655887b0662ef9011" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index.html&lt;/code&gt; file is also modified during the build process to include script tags that enable differential loading. See the sample output below from the &lt;code&gt;index.html&lt;/code&gt; file produced during a build using &lt;code&gt;ng build&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; ファイルには、差動ロードを可能にするスクリプトタグを含めるようにビルドプロセス中に変更されます。 &lt;code&gt;ng build&lt;/code&gt; を使用したビルド中に生成された &lt;code&gt;index.html&lt;/code&gt; ファイルからの以下のサンプル出力を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfcc0a77d947eb184ba0eb6295bbbba9aa94afdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index.html&lt;/code&gt; will likely have script tags loading AngularJS files, so the &lt;code&gt;index.html&lt;/code&gt; for AOT must also load those files. An easy way to copy them is by adding each to the &lt;code&gt;copy-dist-files.js&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; には、おそらくAngularJSファイルをロードするスクリプトタグを持っていますので、 &lt;code&gt;index.html&lt;/code&gt; を AOTのためにも、これらのファイルをロードする必要があります。それらをコピーする簡単な方法は、それぞれを &lt;code&gt;copy-dist-files.js&lt;/code&gt; ファイルに追加することです。</target>
        </trans-unit>
        <trans-unit id="779016803ead9dfec62b8680c130c4c7b844144b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; property of the &lt;code&gt;NgFor&lt;/code&gt; directive context returns the zero-based index of the item in each iteration. You can capture the &lt;code&gt;index&lt;/code&gt; in a template input variable and use it in the template.</source>
          <target state="translated">&lt;code&gt;NgFor&lt;/code&gt; ディレクティブコンテキストの &lt;code&gt;index&lt;/code&gt; プロパティは、各反復でのアイテムの0ベースのインデックスを返します。テンプレートの入力変数に &lt;code&gt;index&lt;/code&gt; をキャプチャして、テンプレートで使用できます。</target>
        </trans-unit>
        <trans-unit id="e680efed95e08393f7d53fb276d913ac1224a8da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; function is often adequate for this purpose. But &lt;code&gt;inject&lt;/code&gt; throws an error if it can't provide the service.</source>
          <target state="translated">多くの場合、 &lt;code&gt;inject&lt;/code&gt; 機能はこの目的に適しています。ただし、サービスを提供できない場合、 &lt;code&gt;inject&lt;/code&gt; ジェクトはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="a871438d8f60cdf53bf645d03648573c77c8c396" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;installMode&lt;/code&gt; determines how these resources are initially cached. The &lt;code&gt;installMode&lt;/code&gt; can be either of two values:</source>
          <target state="translated">&lt;code&gt;installMode&lt;/code&gt; これらのリソースが最初にキャッシュされる方法を決定します。 &lt;code&gt;installMode&lt;/code&gt; 2つの値のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="7adafbc3d7e9fcd1852e26be325cfdf1980b4479" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;intercept&lt;/code&gt; method transforms a request into an &lt;code&gt;Observable&lt;/code&gt; that eventually returns the HTTP response. In this sense, each interceptor is fully capable of handling the request entirely by itself.</source>
          <target state="translated">&lt;code&gt;intercept&lt;/code&gt; 方法は、要求に変換 &lt;code&gt;Observable&lt;/code&gt; 最終的にHTTPレスポンスを返すことを。この意味で、各インターセプターは完全にそれ自体でリクエストを完全に処理することができます。</target>
        </trans-unit>
        <trans-unit id="2108a2ee63b2069a96b62e4fd1f9a5f2332d2859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; method dispatches an HTTP request that checks if the alter ego is available, and returns &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; as the result. The &lt;code&gt;validate()&lt;/code&gt; method pipes the response through the &lt;code&gt;map&lt;/code&gt; operator and transforms it into a validation result.</source>
          <target state="translated">&lt;code&gt;isAlterEgoTaken()&lt;/code&gt; メソッドは、チェック分身が利用可能である場合、戻るそのHTTPリクエストディスパッチ &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; 結果を。 &lt;code&gt;validate()&lt;/code&gt; メソッドパイプを介して応答 &lt;code&gt;map&lt;/code&gt; オペレータ及び検証結果への変換、それを。</target>
        </trans-unit>
        <trans-unit id="a15d1612279f7ffcaff9708155f1d1d8a675e7b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; method dispatches an HTTP request that checks if the alter ego is available, and returns &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; as the result. We pipe the response through the &lt;code&gt;map&lt;/code&gt; operator and transform it into a validation result. As always, we return &lt;code&gt;null&lt;/code&gt; if the form is valid, and &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; if it is not. We make sure to handle any potential errors with the &lt;code&gt;catchError&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;isAlterEgoTaken()&lt;/code&gt; メソッドは、チェック分身が利用可能である場合、戻るそのHTTPリクエストディスパッチ &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; 結果を。 &lt;code&gt;map&lt;/code&gt; オペレーターを介して応答をパイプし、それを検証結果に変換します。いつものように、フォームが有効な場合は &lt;code&gt;null&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; を返します。 &lt;code&gt;catchError&lt;/code&gt; 演算子を使用して、潜在的なエラーを確実に処理します。</target>
        </trans-unit>
        <trans-unit id="987a0d43d85abf3ebd433e3c46293440300bbf70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isCachable()&lt;/code&gt; function determines if the request is cachable. In this sample, only GET requests to the npm package search api are cachable.</source>
          <target state="translated">&lt;code&gt;isCachable()&lt;/code&gt; 要求がキャッシュ可能である場合、関数は決定します。このサンプルでは、​​npmパッケージ検索APIへのGETリクエストのみがキャッシュ可能です。</target>
        </trans-unit>
        <trans-unit id="74b06e437c6efb01a3288a4392197d8254eac202" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isCacheable()&lt;/code&gt; function determines if the request is cacheable. In this sample, only GET requests to the npm package search api are cacheable.</source>
          <target state="translated">&lt;code&gt;isCacheable()&lt;/code&gt; 要求がキャッシュ可能である場合、関数は決定します。このサンプルでは、​​npmパッケージ検索APIへのGETリクエストのみがキャッシュ可能です。</target>
        </trans-unit>
        <trans-unit id="81986ed4ffe8be92868d359a52c73e46a0bba3bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;karma.conf.js&lt;/code&gt; file is a partial Karma configuration file. The CLI constructs the full runtime configuration in memory, based on application structure specified in the &lt;code&gt;angular.json&lt;/code&gt; file, supplemented by &lt;code&gt;karma.conf.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;karma.conf.js&lt;/code&gt; のファイルは、部分的なカルマの設定ファイルです。CLIはで指定されたアプリケーションの構造に基づいて、メモリ内の完全なランタイム構成を構築 &lt;code&gt;angular.json&lt;/code&gt; ので補足ファイル、 &lt;code&gt;karma.conf.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5ea13e13bd51c93a963c4708123611462bd790e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keyup&lt;/code&gt; event binding sends every keystroke to the component's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;keyup&lt;/code&gt; 結合事象は、コンポーネントのにすべてのキーストロークを送信し &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="4d5d3ef5c47ecc1bce3f9257d6bf5a046e88f610" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let-i&lt;/code&gt; and &lt;code&gt;let-odd&lt;/code&gt; variables were defined as &lt;code&gt;let i=index&lt;/code&gt; and &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;=&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;. Angular sets them to the current value of the context's &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;let-i&lt;/code&gt; と &lt;code&gt;let-odd&lt;/code&gt; の変数は以下のように定義された &lt;code&gt;let i=index&lt;/code&gt; と &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;=&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 。Angularはそれらをコンテキストの &lt;code&gt;index&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; プロパティの現在の値に設定します。</target>
        </trans-unit>
        <trans-unit id="3ca5558e21840bcf4b3b38fc07d6a40c146f008d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let-i&lt;/code&gt; and &lt;code&gt;let-odd&lt;/code&gt; variables were defined as &lt;code&gt;let i=index&lt;/code&gt; and &lt;code&gt;let odd=odd&lt;/code&gt;. Angular sets them to the current value of the context's &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;odd&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;let-i&lt;/code&gt; と &lt;code&gt;let-odd&lt;/code&gt; の変数は以下のように定義された &lt;code&gt;let i=index&lt;/code&gt; と &lt;code&gt;let odd=odd&lt;/code&gt; 。Angularは、それらをコンテキストの &lt;code&gt;index&lt;/code&gt; と &lt;code&gt;odd&lt;/code&gt; プロパティの現在の値に設定します。</target>
        </trans-unit>
        <trans-unit id="d45ed2edc5561795b4fe88a5fd6a363a90124505" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword before &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; creates a template input variable called &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive iterates over the &lt;code&gt;items&lt;/code&gt; array returned by the parent component's &lt;code&gt;items&lt;/code&gt; property and sets &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; to the current item from the array during each iteration.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; キーワードの前のletキーワードは、 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; というテンプレート入力変数を作成し &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; オーバー指示反復 &lt;code&gt;items&lt;/code&gt; 親コンポーネントのによって返される配列 &lt;code&gt;items&lt;/code&gt; プロパティと設定 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; の各反復中にアレイから現在のアイテムに。</target>
        </trans-unit>
        <trans-unit id="ba4f5f1907debf2c5dcfc0006affb24e12d5c62d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword before &lt;code&gt;item&lt;/code&gt; creates a template input variable called &lt;code&gt;item&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive iterates over the &lt;code&gt;items&lt;/code&gt; array returned by the parent component's &lt;code&gt;items&lt;/code&gt; property and sets &lt;code&gt;item&lt;/code&gt; to the current item from the array during each iteration.</source>
          <target state="translated">&lt;code&gt;item&lt;/code&gt; の前の &lt;code&gt;let&lt;/code&gt; キーワードは、itemというテンプレート入力変数を作成し &lt;code&gt;item&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; オーバー指示反復 &lt;code&gt;items&lt;/code&gt; 親コンポーネントのによって返される配列 &lt;code&gt;items&lt;/code&gt; プロパティと設定 &lt;code&gt;item&lt;/code&gt; の各反復中にアレイから現在のアイテムに。</target>
        </trans-unit>
        <trans-unit id="67312891b24b8f98f7077e6a626334bbd888baf9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword declares a &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;template input variable&lt;/em&gt;&lt;/a&gt; that you reference within the template. The input variables in this example are &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;. The parser translates &lt;code&gt;let hero&lt;/code&gt;, &lt;code&gt;let i&lt;/code&gt;, and &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; into variables named &lt;code&gt;let-hero&lt;/code&gt;, &lt;code&gt;let-i&lt;/code&gt;, and &lt;code&gt;let-odd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; キーワードは、宣言し&lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;たテンプレートの入力変数&lt;/em&gt;&lt;/a&gt;は、テンプレート内の参照ということを。この例の入力変数は、 &lt;code&gt;hero&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; です。パーサーは &lt;code&gt;let hero&lt;/code&gt; 、 &lt;code&gt;let i&lt;/code&gt; 、 &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;let-hero&lt;/code&gt; 、 &lt;code&gt;let-i&lt;/code&gt; 、 &lt;code&gt;let-odd&lt;/code&gt; という名前の変数に変換します。</target>
        </trans-unit>
        <trans-unit id="634a292f8119dbc280342cc788d0714781558b4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword declares a &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;template input variable&lt;/em&gt;&lt;/a&gt; that you reference within the template. The input variables in this example are &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;odd&lt;/code&gt;. The parser translates &lt;code&gt;let hero&lt;/code&gt;, &lt;code&gt;let i&lt;/code&gt;, and &lt;code&gt;let odd&lt;/code&gt; into variables named &lt;code&gt;let-hero&lt;/code&gt;, &lt;code&gt;let-i&lt;/code&gt;, and &lt;code&gt;let-odd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; キーワードは、宣言し&lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;たテンプレートの入力変数&lt;/em&gt;&lt;/a&gt;は、テンプレート内の参照ということを。この例の入力変数は、 &lt;code&gt;hero&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、および &lt;code&gt;odd&lt;/code&gt; です。パーサーは &lt;code&gt;let hero&lt;/code&gt; 、 &lt;code&gt;let i&lt;/code&gt; 、および &lt;code&gt;let odd&lt;/code&gt; を &lt;code&gt;let-hero&lt;/code&gt; 、 &lt;code&gt;let-i&lt;/code&gt; 、および &lt;code&gt;let-odd&lt;/code&gt; という名前の変数に変換します。</target>
        </trans-unit>
        <trans-unit id="f257babd3730c1022992c731831065e7e6e340b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadComponent()&lt;/code&gt; method chooses an ad using some math.</source>
          <target state="translated">&lt;code&gt;loadComponent()&lt;/code&gt; メソッドは、いくつかの数学を使用して広告を選択します。</target>
        </trans-unit>
        <trans-unit id="d58598b12b02d1cfd9ce52912a2c6426fcdcb59b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadComponent()&lt;/code&gt; method is doing a lot of the heavy lifting here. Take it step by step. First, it picks an ad.</source>
          <target state="translated">ここでは、 &lt;code&gt;loadComponent()&lt;/code&gt; メソッドが多くの重労働を行っています。一歩一歩それを取ります。まず、広告を選びます。</target>
        </trans-unit>
        <trans-unit id="657da6bcc28ab42d092f42096554f848147cd763" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;messageService&lt;/code&gt; property &lt;strong&gt;must be public&lt;/strong&gt; because you're going to bind to it in the template.</source>
          <target state="translated">テンプレートでバインドするため、 &lt;code&gt;messageService&lt;/code&gt; プロパティ&lt;strong&gt;はパブリックで&lt;/strong&gt;ある&lt;strong&gt;必要があります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b39bef99ed6eb1d31b77310df12a7ce7fa0909da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;move&lt;/code&gt; method moves the provided source files to their destination when the schematic is applied.</source>
          <target state="translated">&lt;code&gt;move&lt;/code&gt; 概略が適用されるときの方法は、それらの宛先に提供されたソースファイルを移動させます。</target>
        </trans-unit>
        <trans-unit id="a555fd300f9beee4ec986089765c4c4f9d39addf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; is provided as a property from your factory function. It is the same &lt;code&gt;name&lt;/code&gt; you defined in the schema.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; お使いのファクトリ関数からプロパティとして提供されています。スキーマで定義した &lt;code&gt;name&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="8c15bebd1c9694615338dc82048275afeb2594dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; parameter should be the name of the AngularJS directive.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; パラメータがAngularJSディレクティブの名前でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9c4f8ad580b2ff5b5d69b95f0508568f8aa6cdb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property is &lt;code&gt;Sally&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; プロパティがある &lt;code&gt;Sally&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2858b8b17d6d9343e890b1e117c236f2f647306e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; notification sends a value such as a number, a string, or an object.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; の通知は、例えば、数、文字列、またはオブジェクトとして値を送信します。</target>
        </trans-unit>
        <trans-unit id="e81819a9cfe4af19f5636eb47d2ae1d60abe59cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="b44a1960d514a7a09b106ab46609d67cafa3ba79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; object represents the next interceptor in the chain of interceptors. The final &lt;code&gt;next&lt;/code&gt; in the chain is the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; backend handler that sends the request to the server and receives the server's response.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; の目的は、インターセプタのチェーン内の次のインターセプターを表します。チェーンの最後の &lt;code&gt;next&lt;/code&gt; は、リクエストをサーバーに送信してサーバーの応答を受信する &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; バックエンドハンドラーです。</target>
        </trans-unit>
        <trans-unit id="ef365b122d4f3b65df123f4627705808d9b58632" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command can be used to update your workspace's library dependencies. If you supply no options or use the help option, the command examines your workspace and suggests libraries to update.</source>
          <target state="translated">&lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; コマンドは、ワークスペースのライブラリの依存関係を更新するために使用することができます。オプションを指定しないか、helpオプションを使用すると、コマンドはワークスペースを調べ、更新するライブラリを提案します。</target>
        </trans-unit>
        <trans-unit id="661eb26df65f06b9bd2b124b6434e53befc743b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng add&lt;/code&gt; command uses a package manager such as &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; or &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt; to install the library package, and invokes schematics that are included in the package to other scaffolding within the project code, such as adding import statements, fonts, themes, and so on.</source>
          <target state="translated">&lt;code&gt;ng add&lt;/code&gt; コマンドは、次のようなパッケージマネージャを使用して&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;、NPM&lt;/a&gt;または&lt;a href=&quot;https://yarnpkg.com/&quot;&gt;糸&lt;/a&gt;ライブラリパッケージをインストールするには、そのようなので、上の追加import文、フォント、テーマ、および、プロジェクトのコード内の他の足場にパッケージに含まれている呼び出す回路図。</target>
        </trans-unit>
        <trans-unit id="402924763f2c69b9a547faff6eeb2122f32401e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng add&lt;/code&gt; command uses the npm package manager or &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt; to install the library package, and invokes schematics that are included in the package to other scaffolding within the project code, such as adding import statements, fonts, themes, and so on.</source>
          <target state="translated">&lt;code&gt;ng add&lt;/code&gt; コマンドは、NPMパッケージマネージャまたは使用する&lt;a href=&quot;https://yarnpkg.com/&quot;&gt;糸を&lt;/a&gt;ライブラリパッケージをインストールするために、そのようなimport文、フォント、テーマなどを追加するなど、プロジェクトのコード内の他の足場へのパッケージに含まれている呼び出す回路図、。</target>
        </trans-unit>
        <trans-unit id="d7bb80a2b7541f339e003710c97fc562d5c771d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng build&lt;/code&gt; command with the &lt;code&gt;--prod&lt;/code&gt; meta-flag (&lt;code&gt;ng build --prod&lt;/code&gt;) compiles with AOT by default.</source>
          <target state="translated">&lt;code&gt;ng build&lt;/code&gt; とコマンド &lt;code&gt;--prod&lt;/code&gt; メタフラグ（ &lt;code&gt;ng build --prod&lt;/code&gt; デフォルトではAOTで）コンパイル。</target>
        </trans-unit>
        <trans-unit id="151524c159dafe7685065a9676b66852e12e4f54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng extract-i18n&lt;/code&gt; command (with no options) generates a source language file named &lt;code&gt;messages.xlf&lt;/code&gt; in the project &lt;code&gt;src&lt;/code&gt; folder. Create &lt;em&gt;translation&lt;/em&gt; files for each language by copying the source language file. To avoid confusion with multiple translations, you should organize the language translation files by locale in a dedicated &lt;code&gt;locale&lt;/code&gt; folder under &lt;code&gt;src/&lt;/code&gt;. Use a filename extension that matches the associated locale, such as &lt;code&gt;messages.fr.xlf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng extract-i18n&lt;/code&gt; （オプションなし）コマンドは、指定されたソース言語ファイルを生成 &lt;code&gt;messages.xlf&lt;/code&gt; プロジェクトの中 &lt;code&gt;src&lt;/code&gt; フォルダを。ソース言語ファイルをコピーして、各言語の&lt;em&gt;翻訳&lt;/em&gt;ファイルを作成します。複数の翻訳との混同を避けるために、 &lt;code&gt;src/&lt;/code&gt; 下の専用 &lt;code&gt;locale&lt;/code&gt; フォルダにロケールごとに言語翻訳ファイルを整理する必要があります。 &lt;code&gt;messages.fr.xlf&lt;/code&gt; など、関連するロケールに一致するファイル名拡張子を使用します。</target>
        </trans-unit>
        <trans-unit id="2198a23cdfaca74ee5cad793b7e3cc90c0218b2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng generate&lt;/code&gt; command creates the &lt;code&gt;projects/my-lib&lt;/code&gt; folder in your workspace, which contains a component and a service inside an NgModule.</source>
          <target state="translated">&lt;code&gt;ng generate&lt;/code&gt; コマンドが作成し &lt;code&gt;projects/my-lib&lt;/code&gt; NgModule内部のコンポーネントとサービスが含まれているワークスペース内のフォルダを、。</target>
        </trans-unit>
        <trans-unit id="915b5365ccaeb02cfaf1faa3905f771f9e676ca8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng new&lt;/code&gt; command prompts you for information about features to include in the initial app project. Accept the defaults by pressing the Enter or Return key.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; 機能については、コマンドプロンプトあなたが最初のアプリのプロジェクトに含めます。EnterキーまたはReturnキーを押して、デフォルトを受け入れます。</target>
        </trans-unit>
        <trans-unit id="47140589baf6417447acb195c1530707c4399071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng new&lt;/code&gt; command prompts you for information about features to include in the initial app. Accept the defaults by pressing the Enter or Return key.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; 機能については、コマンドプロンプトあなたが最初のアプリに含めます。EnterキーまたはReturnキーを押して、デフォルトを受け入れます。</target>
        </trans-unit>
        <trans-unit id="d53cb4d3de04d121569ef7fced8acc26fcb00968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng serve&lt;/code&gt; command builds the app, starts the development server, watches the source files, and rebuilds the app as you make changes to those files.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; コマンドは、アプリケーションを構築する開発用サーバを起動し、ソースファイルを監視し、あなたがそれらのファイルに変更を加えると、アプリケーションを再構築します。</target>
        </trans-unit>
        <trans-unit id="decf48f9f57ece2b4916fc311b2c476376d5e095" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng serve&lt;/code&gt; command launches the server, watches your files, and rebuilds the app as you make changes to those files.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; コマンドが起動し、サーバーは、ファイルを監視し、あなたがそれらのファイルに変更を加えると、アプリケーションを再構築します。</target>
        </trans-unit>
        <trans-unit id="6cc6ec4618d0114656fc6e332ab1860f96ca810e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng test&lt;/code&gt; command builds the app in &lt;em&gt;watch mode&lt;/em&gt;, and launches the &lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma test runner&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ng test&lt;/code&gt; コマンドがでアプリを構築する&lt;em&gt;ウォッチモード&lt;/em&gt;、および起動&lt;a href=&quot;https://karma-runner.github.io&quot;&gt;カルマのテストランナーを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7dd4f9439ed1af7e0523f545b94e486b40d9a486" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng update&lt;/code&gt; command can be used to update your workspace's library dependencies. If you supply no options or use the help option, the command examines your workspace and suggests libraries to update.</source>
          <target state="translated">&lt;code&gt;ng update&lt;/code&gt; コマンドは、ワークスペースのライブラリの依存関係を更新するために使用することができます。オプションを指定しないか、ヘルプオプションを使用すると、コマンドはワークスペースを調べて、更新するライブラリを提案します。</target>
        </trans-unit>
        <trans-unit id="c7b6107217efb4567dcc9df7baefcf1ae3bd71db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng xi18n&lt;/code&gt; command generates a translation source file named &lt;code&gt;messages.xlf&lt;/code&gt; in the project &lt;code&gt;src&lt;/code&gt; folder. The next step is to translate the display strings in this source file into language-specific translation files. The example in this guide creates a French translation file.</source>
          <target state="translated">&lt;code&gt;ng xi18n&lt;/code&gt; コマンドは、名前の翻訳ソースファイルを生成 &lt;code&gt;messages.xlf&lt;/code&gt; をプロジェクトで &lt;code&gt;src&lt;/code&gt; フォルダを。次のステップは、このソースファイルの表示文字列を言語固有の翻訳ファイルに翻訳することです。このガイドの例では、フランス語の翻訳ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="94f0959cbc129968dc58b82a0ff7ada846d3170b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-href&lt;/code&gt; directive allows AngularJS to preprocess the &lt;code&gt;href&lt;/code&gt; property so that it can replace the binding expression with the appropriate URL before the browser fetches from that URL.</source>
          <target state="translated">&lt;code&gt;ng-href&lt;/code&gt; ディレクティブはAngularJSを前処理することを可能にする &lt;code&gt;href&lt;/code&gt; それはそのURLからブラウザをフェッチする前に、適切なURLとバインディング式を置き換えることができるようにプロパティを。</target>
        </trans-unit>
        <trans-unit id="7bd2c70c6651fab453eaa2bf35d388700b4f79b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-src&lt;/code&gt; directive allows AngularJS to preprocess the &lt;code&gt;src&lt;/code&gt; property so that it can replace the binding expression with the appropriate URL before the browser fetches from that URL.</source>
          <target state="translated">&lt;code&gt;ng-src&lt;/code&gt; ディレクティブは、AngularJSを前処理することを可能にする &lt;code&gt;src&lt;/code&gt; それがそのURLからブラウザをフェッチする前に、適切なURLとバインディング式を置き換えることができるようにプロパティを。</target>
        </trans-unit>
        <trans-unit id="857809768abb4476e5a1dc05028c8b640e255a37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-valid&lt;/code&gt;/&lt;code&gt;ng-invalid&lt;/code&gt; pair is particularly interesting, because you want to send a strong visual signal when the values are invalid. You also want to mark required fields.</source>
          <target state="translated">&lt;code&gt;ng-valid&lt;/code&gt; / &lt;code&gt;ng-invalid&lt;/code&gt; あなたは値が無効である、強力な視覚信号を送信するためのペアは、特に興味深いものです。また、必須フィールドをマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="3138ac0ec252ffe200dfb5a828a82de4ac40f99c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-valid&lt;/code&gt;/&lt;code&gt;ng-invalid&lt;/code&gt; pair is the most interesting, because you want to send a strong visual signal when the values are invalid. You also want to mark required fields. To create such visual feedback, add definitions for the &lt;code&gt;ng-*&lt;/code&gt; CSS classes.</source>
          <target state="translated">&lt;code&gt;ng-valid&lt;/code&gt; / &lt;code&gt;ng-invalid&lt;/code&gt; あなたは値が無効である、強力な視覚信号を送信するためのペアは、最も興味深いです。また、必須フィールドをマークする必要があります。このような視覚的なフィードバックを作成するには、 &lt;code&gt;ng-*&lt;/code&gt; CSSクラスの定義を追加します。</target>
        </trans-unit>
        <trans-unit id="84ce1e908b621b2c0b80729e1bdda280c58ec149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAfterViewInit()&lt;/code&gt; lifecycle hook is an important wrinkle. The timer component isn't available until &lt;em&gt;after&lt;/em&gt; Angular displays the parent view. So it displays &lt;code&gt;0&lt;/code&gt; seconds initially.</source>
          <target state="translated">&lt;code&gt;ngAfterViewInit()&lt;/code&gt; ライフサイクルフックは重要なしわです。タイマーコンポーネントは&lt;em&gt;、&lt;/em&gt; Angularが親ビューを表示するまで使用できません。したがって、最初は &lt;code&gt;0&lt;/code&gt; 秒と表示されます。</target>
        </trans-unit>
        <trans-unit id="9ed41a4355ac7ba51dd443b347ab879e887f8572" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngExpressEngine()&lt;/code&gt; function is a wrapper around Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function which turns a client's requests into server-rendered HTML pages. It accepts an object with the following properties:</source>
          <target state="translated">&lt;code&gt;ngExpressEngine()&lt;/code&gt; 関数は、汎用のラッパーです &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; サーバーレンダリングされたHTMLページにクライアントの要求をオン機能。次のプロパティを持つオブジェクトを受け入れます。</target>
        </trans-unit>
        <trans-unit id="55184b9fb03b4d4f4740d8b6e58fea5b03d407bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngExpressEngine()&lt;/code&gt; function is a wrapper around Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function which turns a client's requests into server-rendered HTML pages.</source>
          <target state="translated">&lt;code&gt;ngExpressEngine()&lt;/code&gt; 関数は、汎用のラッパーです &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; サーバーレンダリングされたHTMLページにクライアントの要求をオン機能。</target>
        </trans-unit>
        <trans-unit id="cea0266c75765dd1f7f192925449a11f3e7685c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngExpressEngine()&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; callback that resolves to the rendered page. It's up to the engine to decide what to do with that page. This engine's &lt;code&gt;Promise&lt;/code&gt; callback returns the rendered page to the web server, which then forwards it to the client in the HTTP response.</source>
          <target state="translated">&lt;code&gt;ngExpressEngine()&lt;/code&gt; 関数が返す &lt;code&gt;Promise&lt;/code&gt; コールバックをレンダリングされたページに解決されること。そのページで何をするかを決めるのはエンジン次第です。このエンジンの &lt;code&gt;Promise&lt;/code&gt; コールバックは、レンダリングされたページをWebサーバーに返し、WebサーバーはそれをHTTP応答でクライアントに転送します。</target>
        </trans-unit>
        <trans-unit id="e39bac5f0d896fc7bb83309ae7c71f4c31525445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method is your first opportunity to access those properties. Angular calls &lt;code&gt;ngOnChanges()&lt;/code&gt; before &lt;code&gt;ngOnInit()&lt;/code&gt; and many times after that. It only calls &lt;code&gt;ngOnInit()&lt;/code&gt; once.</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドは、これらのプロパティにアクセスするには、あなたの最初の機会です。Angularは &lt;code&gt;ngOnChanges()&lt;/code&gt; 前に &lt;code&gt;ngOnInit()&lt;/code&gt; を呼び出し、その後何度も呼び出します。 &lt;code&gt;ngOnInit()&lt;/code&gt; を呼び出すのは1回だけです。</target>
        </trans-unit>
        <trans-unit id="c3e892008e822e750da9095703e147a840b86ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method is your first opportunity to access those properties. Angular calls &lt;code&gt;ngOnChanges()&lt;/code&gt; before &lt;code&gt;ngOnInit()&lt;/code&gt;, but also many times after that. It only calls &lt;code&gt;ngOnInit()&lt;/code&gt; once.</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドは、これらのプロパティにアクセスするには、あなたの最初の機会です。Angularは &lt;code&gt;ngOnChanges()&lt;/code&gt; 前に &lt;code&gt;ngOnInit()&lt;/code&gt; 呼び出しますが、その後も何度も呼び出します。 &lt;code&gt;ngOnInit()&lt;/code&gt; を1回だけ呼び出します。</target>
        </trans-unit>
        <trans-unit id="8e25bbb9011f26f819a7cc6069e3c5f18a8997a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method queues an async task to set the value for the internal &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドは、内部の値を設定する非同期タスクキュー &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="6dbdf349a71f02e0e98a02bd939c4d3eec1858b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method takes an object that maps each changed property name to a &lt;a href=&quot;../api/core/simplechange&quot;&gt;SimpleChange&lt;/a&gt; object holding the current and previous property values. This hook iterates over the changed properties and logs them.</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドは、各変更されたプロパティ名をマッピングするオブジェクトとる&lt;a href=&quot;../api/core/simplechange&quot;&gt;SimpleChangeの&lt;/a&gt;現在および以前のプロパティ値を保持するオブジェクト。このフックは、変更されたプロパティを反復処理してログに記録します。</target>
        </trans-unit>
        <trans-unit id="a0b31050175bd4d7ae74733eff74e7b30f570426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnDestroy()&lt;/code&gt; method is also the time to notify another part of the application that the component is going away.</source>
          <target state="translated">&lt;code&gt;ngOnDestroy()&lt;/code&gt; メソッドは、コンポーネントが離れて起こっていることをアプリケーションの別の部分に通知するための時間です。</target>
        </trans-unit>
        <trans-unit id="efc6439222087df75fe7510b5276e62ea8e22f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; methods have more vital roles to play in real applications.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; と &lt;code&gt;ngOnDestroy()&lt;/code&gt; メソッドは、実際のアプリケーションで再生するために、より重要な役割を担っています。</target>
        </trans-unit>
        <trans-unit id="bc9511230c44a04ab98b667e3d7957d7db190375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnInit()&lt;/code&gt; is a &lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;lifecycle hook&lt;/a&gt;. Angular calls &lt;code&gt;ngOnInit()&lt;/code&gt; shortly after creating a component. It's a good place to put initialization logic.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; である&lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;ライフサイクルフック&lt;/a&gt;。Angularはコンポーネントを作成した直後に &lt;code&gt;ngOnInit()&lt;/code&gt; を呼び出します。これは、初期化ロジックを配置するのに適した場所です。</target>
        </trans-unit>
        <trans-unit id="981284d8fe4aa73e64020d62ee523dc61af1e4c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnInit()&lt;/code&gt; lifecycle hook calls &lt;code&gt;getHeroes()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; ライフサイクルフックを呼び出す &lt;code&gt;getHeroes()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6587607630a415e74bae14f92d2441487296dc7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngTemplateContextGuard&lt;/code&gt; static property declares the type of the template context.</source>
          <target state="translated">&lt;code&gt;ngTemplateContextGuard&lt;/code&gt; 静的プロパティは、テンプレートのコンテキストのタイプを宣言します。</target>
        </trans-unit>
        <trans-unit id="4d1333fb866dfc201e0e5e6735bb9286b5f00a7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngsw-config.json&lt;/code&gt; configuration file specifies which files and data URLs the Angular service worker should cache and how it should update the cached files and data. The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; processes the configuration file during &lt;code&gt;ng build --prod&lt;/code&gt;. Manually, you can process it with the &lt;code&gt;ngsw-config&lt;/code&gt; tool (where &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; is the name of the project being built):</source>
          <target state="translated">&lt;code&gt;ngsw-config.json&lt;/code&gt; 角度サービスワーカーがキャッシュすべきとどのようにそれがキャッシュされたファイルやデータを更新する必要があり、ファイルやデータのURL設定ファイルを指定します。&lt;a href=&quot;cli&quot;&gt;角度CLIは&lt;/a&gt;中に設定ファイルを処理し &lt;code&gt;ng build --prod&lt;/code&gt; 。手動で、 &lt;code&gt;ngsw-config&lt;/code&gt; ツール（ &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; はビルド中のプロジェクトの名前）を使用して処理できます。</target>
        </trans-unit>
        <trans-unit id="f3ce7551e4c509b11e24776b5f665ec3c2322ff6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;observe&lt;/code&gt; value determines the return type, according to what you are interested in observing.</source>
          <target state="translated">&lt;code&gt;observe&lt;/code&gt; 値は、あなたが見に興味を持っているかに応じて、戻り値の型を決定します。</target>
        </trans-unit>
        <trans-unit id="18b77fe3b5bee95f73d1fc1877c137e7a931d878" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onSubmit()&lt;/code&gt; method in the &lt;code&gt;ProfileEditor&lt;/code&gt; component captures the current value of &lt;code&gt;profileForm&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; to keep the form encapsulated and to provide the form value outside the component. The following example uses &lt;code&gt;console.warn&lt;/code&gt; to log a message to the browser console.</source>
          <target state="translated">&lt;code&gt;ProfileEditor&lt;/code&gt; コンポーネントの &lt;code&gt;onSubmit()&lt;/code&gt; メソッドは、profileFormの現在の値を &lt;code&gt;profileForm&lt;/code&gt; ます。 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; を使用して、フォームをカプセル化したままにし、コンポーネントの外部でフォームの値を提供します。次の例では、 &lt;code&gt;console.warn&lt;/code&gt; を使用してメッセージをブラウザコンソールに記録します。</target>
        </trans-unit>
        <trans-unit id="ddbbb7fe03501b2cd0af133be1faf50d5e969adf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimization&lt;/code&gt; and &lt;code&gt;sourceMap&lt;/code&gt; browser builder options can be either a Boolean or an Object for more fine-grained configuration. In this section we will explain how to fine tune these options.</source>
          <target state="translated">&lt;code&gt;optimization&lt;/code&gt; と &lt;code&gt;sourceMap&lt;/code&gt; のオプションビルダーブラウザはブール以上のきめ細かい設定のためのオブジェクトのいずれかになります。このセクションでは、これらのオプションを微調整する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="43a7d99c46c52d5a3ee1b0e0e32dce7d1e549f63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimization&lt;/code&gt; and &lt;code&gt;sourceMap&lt;/code&gt; command options are simple Boolean flags. You can supply an object as a configuration value for either of these to provide more detailed instruction.</source>
          <target state="translated">&lt;code&gt;optimization&lt;/code&gt; と &lt;code&gt;sourceMap&lt;/code&gt; コマンドオプションは、単純なブールフラグです。これらのいずれかの構成値としてオブジェクトを指定して、より詳細な指示を提供できます。</target>
        </trans-unit>
        <trans-unit id="06d19a4a4d049d946458a3b228278d9b59f8eeb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimization&lt;/code&gt; option applies to scripts, styles and fonts. You can supply a value such as the following to apply optimization to one or the other:</source>
          <target state="translated">&lt;code&gt;optimization&lt;/code&gt; オプションは、スクリプト、スタイルやフォントに適用されます。次のような値を指定して、どちらかに最適化を適用できます。</target>
        </trans-unit>
        <trans-unit id="68652e30cdd6035a39eaf435363a84fbca02e905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.path&lt;/code&gt; determines where the schematic template files are moved to once the schematic is applied.</source>
          <target state="translated">&lt;code&gt;options.path&lt;/code&gt; は、概略的なテンプレートファイルを模式的に適用された後に移動されている場所を決定します。</target>
        </trans-unit>
        <trans-unit id="ed45fc4fb586f918cbf123cc6aaa8ac13b46fa2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outDir&lt;/code&gt; maps to the library's output folder. By default, this is the &lt;code&gt;dist/my-lib&lt;/code&gt; folder at the root of your workspace.</source>
          <target state="translated">&lt;code&gt;outDir&lt;/code&gt; 、ライブラリの出力フォルダにマップされます。デフォルトでは、これはワークスペースのルートにある &lt;code&gt;dist/my-lib&lt;/code&gt; フォルダーです。</target>
        </trans-unit>
        <trans-unit id="5736e34f4ac101b818064275d103c11a91f96223" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputs&lt;/code&gt; property defines a set of &lt;code&gt;directiveProperty&lt;/code&gt; to &lt;code&gt;bindingProperty&lt;/code&gt; configuration:</source>
          <target state="translated">&lt;code&gt;outputs&lt;/code&gt; プロパティは、一連の定義 &lt;code&gt;directiveProperty&lt;/code&gt; に &lt;code&gt;bindingProperty&lt;/code&gt; の構成を：</target>
        </trans-unit>
        <trans-unit id="b99b37eb83ce95780d266653fe93326c72cd1e1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p span&lt;/code&gt; style, intended for use elsewhere, was inadvertently applied here.</source>
          <target state="translated">&lt;code&gt;p span&lt;/code&gt; 他の場所での使用を意図したスタイルは、不注意ここで適用されました。</target>
        </trans-unit>
        <trans-unit id="e3c80bfbed5536effebdc8bdda5d90d25e98e9b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt; for a new Angular workspace installs the &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt; package, which polyfills missing features for several popular browser.</source>
          <target state="translated">新しいAngularワークスペースの &lt;code&gt;package.json&lt;/code&gt; は&lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt;パッケージをインストールします。これは、いくつかの一般的なブラウザーで欠落している機能をポリフィルします。</target>
        </trans-unit>
        <trans-unit id="cc416378bdfc224793314f87016f1f4a90bf5826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt; is organized into two groups of packages:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; は、パッケージの二つのグループに編成されています。</target>
        </trans-unit>
        <trans-unit id="60d300e5b06b4652df36c13692d39407023ed327" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paramMap&lt;/code&gt; is a dictionary of route parameter values extracted from the URL. The &lt;code&gt;&quot;id&quot;&lt;/code&gt; key returns the &lt;code&gt;id&lt;/code&gt; of the hero to fetch.</source>
          <target state="translated">&lt;code&gt;paramMap&lt;/code&gt; は URLから抽出されたルートのパラメータ値の辞書です。 &lt;code&gt;&quot;id&quot;&lt;/code&gt; キーを返す &lt;code&gt;id&lt;/code&gt; 英雄のフェッチします。</target>
        </trans-unit>
        <trans-unit id="313f8e71b2fb55a766d7a1e9c76622430cf5aaac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paramMap&lt;/code&gt; processing is a bit tricky. When the map changes, you &lt;code&gt;get()&lt;/code&gt; the &lt;code&gt;id&lt;/code&gt; parameter from the changed parameters.</source>
          <target state="translated">&lt;code&gt;paramMap&lt;/code&gt; の処理は少しトリッキーです。マップが変更されると、変更されたパラメーターから &lt;code&gt;id&lt;/code&gt; パラメーターを &lt;code&gt;get()&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="14ce2d0b2c2b8d442f75a2419ce9d4c897bbebc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parentItem&lt;/code&gt; in &lt;code&gt;AppComponent&lt;/code&gt; is a string, which means that the expression, &lt;code&gt;parentItem&lt;/code&gt; within &lt;code&gt;[childItem]=&quot;parentItem&quot;&lt;/code&gt;, evaluates to a string.</source>
          <target state="translated">&lt;code&gt;parentItem&lt;/code&gt; で &lt;code&gt;AppComponent&lt;/code&gt; は手段発現、その文字列である &lt;code&gt;parentItem&lt;/code&gt; 内 &lt;code&gt;[childItem]=&quot;parentItem&quot;&lt;/code&gt; 文字列に評価します。</target>
        </trans-unit>
        <trans-unit id="83acc7ba56c6203cb3caa1c7d75835b469828f37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;component&lt;/code&gt; properties should be familiar. There's a new property, &lt;code&gt;outlet&lt;/code&gt;, set to &lt;code&gt;'popup'&lt;/code&gt;. This route now targets the popup outlet and the &lt;code&gt;ComposeMessageComponent&lt;/code&gt; will display there.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 及び &lt;code&gt;component&lt;/code&gt; 特性が精通している必要があります。 &lt;code&gt;'popup'&lt;/code&gt; に設定された新しいプロパティ、 &lt;code&gt;outlet&lt;/code&gt; があります。このルートはポップアップアウトレットをターゲットとし、 &lt;code&gt;ComposeMessageComponent&lt;/code&gt; がそこに表示されます。</target>
        </trans-unit>
        <trans-unit id="1547fce0daf2ce9593510cb48ca8ac8ab2ef2d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; here is set to an empty string because the path in &lt;code&gt;AppRoutingModule&lt;/code&gt; is already set to &lt;code&gt;customers&lt;/code&gt;, so this route in the &lt;code&gt;CustomersRoutingModule&lt;/code&gt;, is already within the &lt;code&gt;customers&lt;/code&gt; context. Every route in this routing module is a child route.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; のパスはすでに &lt;code&gt;customers&lt;/code&gt; に設定されているため、ここの &lt;code&gt;path&lt;/code&gt; は空の文字列に設定されています。したがって、 &lt;code&gt;CustomersRoutingModule&lt;/code&gt; のこのルートは、すでに &lt;code&gt;customers&lt;/code&gt; コンテキスト内にあります。このルーティングモジュールのすべてのルートは子ルートです。</target>
        </trans-unit>
        <trans-unit id="30a8ecd4a8783bad25fd9c461e2beeda627c4a13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; option in the schematic's schema is substituted by default with the current working directory. If the &lt;code&gt;path&lt;/code&gt; is not defined, use the &lt;code&gt;sourceRoot&lt;/code&gt; from the project configuration along with the &lt;code&gt;projectType&lt;/code&gt;.</source>
          <target state="translated">回路図のスキーマの &lt;code&gt;path&lt;/code&gt; オプションは、デフォルトで現在の作業ディレクトリに置き換えられます。 &lt;code&gt;path&lt;/code&gt; が定義されていない場合は、プロジェクト構成の &lt;code&gt;sourceRoot&lt;/code&gt; を &lt;code&gt;projectType&lt;/code&gt; とともに使用します。</target>
        </trans-unit>
        <trans-unit id="62481be786da43da1d0f9f8e1f68dbc62d533af9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathRewrite&lt;/code&gt; proxy configuration option lets you rewrite the URL path at run time. For example, you can specify the following &lt;code&gt;pathRewrite&lt;/code&gt; value to the proxy configuration to remove &quot;api&quot; from the end of a path.</source>
          <target state="translated">&lt;code&gt;pathRewrite&lt;/code&gt; プロキシ設定オプションを使用すると、実行時にURLパスを書き換えることができます。たとえば、プロキシ構成に次の &lt;code&gt;pathRewrite&lt;/code&gt; 値を指定して、パスの末尾から「api」を削除できます。</target>
        </trans-unit>
        <trans-unit id="1785d4a3a5bede37ebbe1b406daf1b64048c32dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipe()&lt;/code&gt; function is also a method on the RxJS &lt;code&gt;Observable&lt;/code&gt;, so you use this shorter form to define the same operation:</source>
          <target state="translated">&lt;code&gt;pipe()&lt;/code&gt; 関数もRxJSの方法で &lt;code&gt;Observable&lt;/code&gt; あなたが同じ操作を定義するには、この短いフォームを使用して、：</target>
        </trans-unit>
        <trans-unit id="d7e7c8187c4be0da91d7134cd8b83260a33409a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;postbuild&lt;/code&gt; script copies the schematic files after the &lt;code&gt;build&lt;/code&gt; script completes.</source>
          <target state="translated">&lt;code&gt;postbuild&lt;/code&gt; スクリプトをコピーした後、回路図ファイル &lt;code&gt;build&lt;/code&gt; スクリプトが完了。</target>
        </trans-unit>
        <trans-unit id="83f85d6ad4060b053a8ab58108f8c7af7c260fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;postinstall&lt;/code&gt; script will run on every installation of &lt;code&gt;node_modules&lt;/code&gt;, including those performed by &lt;code&gt;ng update&lt;/code&gt; and &lt;code&gt;ng add&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;postinstall&lt;/code&gt; スクリプトは、のすべてのインストールで実行されます &lt;code&gt;node_modules&lt;/code&gt; によって実行されるものも含め、 &lt;code&gt;ng update&lt;/code&gt; と &lt;code&gt;ng add&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d9a176b63dc85b5e46e29f971649dca0d030c2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;power-booster.component.ts&lt;/code&gt; component demonstrates how to use the pipe, specifying a value (&lt;code&gt;2&lt;/code&gt;) and the exponent parameter (&lt;code&gt;10&lt;/code&gt;). Figure 2 shows the output.</source>
          <target state="translated">&lt;code&gt;power-booster.component.ts&lt;/code&gt; 成分値（指定して、パイプを使用する方法を示し &lt;code&gt;2&lt;/code&gt; ）及び指数パラメータ（ &lt;code&gt;10&lt;/code&gt; ）。図2に出力を示します。</target>
        </trans-unit>
        <trans-unit id="40f54f6369cce6d94790b617c953d163b4600e42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; property holds the &lt;a href=&quot;dependency-injection#token&quot;&gt;token&lt;/a&gt; that serves as the key for both locating a dependency value and configuring the injector.</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; プロパティを保持する&lt;a href=&quot;dependency-injection#token&quot;&gt;トークン&lt;/a&gt;依存値を配置し、インジェクタの設定の両方のためのキーとして機能します。</target>
        </trans-unit>
        <trans-unit id="a6a8cd1e8964b491959fc9628f591fbf11bb2fd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; array</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 配列</target>
        </trans-unit>
        <trans-unit id="eb886a89d7d45147e0470f5ef761dd6a685b7e73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; array shows how you might use the different provider-definition keys; &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 別のプロバイダ定義のキーを使用する場合がありますどのように配列を示し; &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;useClass&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d98bd1406a5dd084ef8572318787a9a5c06f284d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; array shows how you might use the different provider-definition keys; &lt;code&gt;useValue&lt;/code&gt;, &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;useExisting&lt;/code&gt;, or &lt;code&gt;useFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 別のプロバイダ定義のキーを使用する場合がありますどのように配列を示し; &lt;code&gt;useValue&lt;/code&gt; 、 &lt;code&gt;useClass&lt;/code&gt; 、 &lt;code&gt;useExisting&lt;/code&gt; 、または &lt;code&gt;useFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="378b927aad6f36c10f879731b976a6e0020b6868" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; options configure the NgModule's injector to provide localization dependencies to members.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; オプションは、メンバーへの局在化の依存性を提供するために、NgModuleのインジェクターを設定します。</target>
        </trans-unit>
        <trans-unit id="a2194540daca9db4bdf4841e3d15d29a4b883bcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryParamsHandling&lt;/code&gt; feature also provides a &lt;code&gt;merge&lt;/code&gt; option, which preserves and combines the current query parameters with any provided query parameters when navigating.</source>
          <target state="translated">&lt;code&gt;queryParamsHandling&lt;/code&gt; の機能も提供して &lt;code&gt;merge&lt;/code&gt; オプション、ジャムをしてナビゲートする任意の提供のクエリパラメータを使用して現在のクエリパラメータを兼ね備えています。</target>
        </trans-unit>
        <trans-unit id="7a915b7bcf4b039c4d484c3a91457d8dafdb5258" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryParamsHandling&lt;/code&gt; feature also provides a &lt;code&gt;merge&lt;/code&gt; option, which will preserve and combine the current query parameters with any provided query parameters when navigating.</source>
          <target state="translated">&lt;code&gt;queryParamsHandling&lt;/code&gt; の機能も提供して &lt;code&gt;merge&lt;/code&gt; ナビゲートする際に任意の提供のクエリパラメータを使用して現在のクエリパラメータを維持し、結合しますオプションを、。</target>
        </trans-unit>
        <trans-unit id="4110d1ad5861201ed643c3622878a03e4b882b2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readonly&lt;/code&gt; assignment guard can't prevent deep updates and, in particular, it can't prevent you from modifying a property of a request body object.</source>
          <target state="translated">&lt;code&gt;readonly&lt;/code&gt; 割り当てガードは特に、それはリクエストボディオブジェクトのプロパティを変更することを防ぐことができない、深い更新を防止しすることはできません。</target>
        </trans-unit>
        <trans-unit id="4552a998362626aab9347940b3a60b9130370b8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ready&lt;/code&gt; callback function is invoked inside the Angular zone, therefore it does not require a call to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ready&lt;/code&gt; コールバック関数が角度ゾーン内で起動され、したがって、それはへの呼び出しを必要としない &lt;code&gt;$apply()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9b29f091624bf252b25bbd274d2afa6a162bf2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;region&lt;/code&gt; value, &lt;code&gt;&quot;class&quot;&lt;/code&gt;, is the name of the &lt;code&gt;#docregion&lt;/code&gt; in the source file. Confirm that by looking at &lt;code&gt;content/examples/docs-style-guide/src/app/app.module.ts&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;region&lt;/code&gt; 値が、 &lt;code&gt;&quot;class&quot;&lt;/code&gt; 、名前のある &lt;code&gt;#docregion&lt;/code&gt; ソースファイルインチ &lt;code&gt;content/examples/docs-style-guide/src/app/app.module.ts&lt;/code&gt; を見て確認します</target>
        </trans-unit>
        <trans-unit id="da87e99d42c13b635059d2acd261bddbab7185a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;required&lt;/code&gt; attribute is still present. While it's not necessary for validation purposes, you may want to keep it in your template for CSS styling or accessibility reasons.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性がまだ存在しています。検証の目的では必要ありませんが、CSSのスタイルやアクセシビリティの理由でテンプレートに保持することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="39107654150053cf81cb764fb0b18adc5eabcb3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;responseType&lt;/code&gt; value determines how a successful response body is parsed.</source>
          <target state="translated">&lt;code&gt;responseType&lt;/code&gt; の値は正常な応答本体が解析される方法を決定します。</target>
        </trans-unit>
        <trans-unit id="a430ac49ac8d8d424bc937de23c156f47d8f9114" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rootDir&lt;/code&gt; specifies that your &lt;code&gt;schematics/&lt;/code&gt; folder contains the input files to be compiled.</source>
          <target state="translated">&lt;code&gt;rootDir&lt;/code&gt; あなたのことを指定 &lt;code&gt;schematics/&lt;/code&gt; フォルダをコンパイルする入力ファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="b0360411d35f5172538620aa73c42c2a60819e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route.snapshot&lt;/code&gt; is a static image of the route information shortly after the component was created.</source>
          <target state="translated">&lt;code&gt;route.snapshot&lt;/code&gt; は、コンポーネントが作成された直後に経路情報の静止画像です。</target>
        </trans-unit>
        <trans-unit id="98c2a703b9341731e25cca1e1ac8295d6ba802c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route.snapshot&lt;/code&gt; provides the initial value of the route parameter map. You can access the parameters directly without subscribing or adding observable operators. It's much simpler to write and read:</source>
          <target state="translated">&lt;code&gt;route.snapshot&lt;/code&gt; は、ルートパラメータマップの初期値を提供します。監視可能なオペレーターをサブスクライブしたり追加したりせずに、パラメーターに直接アクセスできます。書き込みと読み取りがはるかに簡単です。</target>
        </trans-unit>
        <trans-unit id="8953d9203d44b502aeb08833c884cd6a43672586" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schematics&lt;/code&gt; object describes the named schematics that are part of this collection.</source>
          <target state="translated">&lt;code&gt;schematics&lt;/code&gt; オブジェクトは、このコレクションの一部であるという名前の回路図を示します。</target>
        </trans-unit>
        <trans-unit id="19be2e2a404eeed259e2935213f5db1066e7e258" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schematics&lt;/code&gt; property lists named schematics that belong to this collection. Each schematic has a plain-text description, and points to the generated entry function in the main file.</source>
          <target state="translated">&lt;code&gt;schematics&lt;/code&gt; このコレクションに属している回路図という名前のプロパティリスト。各回路図にはプレーンテキストの説明があり、メインファイルで生成されたエントリ関数をポイントします。</target>
        </trans-unit>
        <trans-unit id="94130bec33e1eb60cd02513d2b2f41b947b417a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope.$apply()&lt;/code&gt; is how AngularJS detects changes and updates data bindings. After every event that occurs, &lt;code&gt;scope.$apply()&lt;/code&gt; gets called. This is done either automatically by the framework, or manually by you.</source>
          <target state="translated">&lt;code&gt;scope.$apply()&lt;/code&gt; AngularJSの変更や更新データバインディングを検出する方法です。イベントが発生するたびに、 &lt;code&gt;scope.$apply()&lt;/code&gt; が呼び出されます。これは、フレームワークによって自動的に行われるか、手動で行われます。</target>
        </trans-unit>
        <trans-unit id="3c8fe632791fdc7a518369563a44ed949ab9ffe7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchTerms&lt;/code&gt; RxJS subject</source>
          <target state="translated">&lt;code&gt;searchTerms&lt;/code&gt; RxJS対象</target>
        </trans-unit>
        <trans-unit id="8c1b03055bc764bd760bdc91ac7b76ad9b62de32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchTerms&lt;/code&gt; property is an RxJS &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;searchTerms&lt;/code&gt; プロパティはRxJSのある &lt;code&gt;Subject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4280fbbc633dd4cab834f13d28eb3c3882a952a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchText$&lt;/code&gt; is the sequence of search-box values coming from the user. It's defined as an RxJS &lt;code&gt;Subject&lt;/code&gt;, which means it is a multicasting &lt;code&gt;Observable&lt;/code&gt; that can also emit values for itself by calling &lt;code&gt;next(value)&lt;/code&gt;, as happens in the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;searchText$&lt;/code&gt; 、ユーザからの検索ボックス値のシーケンスです。これはRxJS &lt;code&gt;Subject&lt;/code&gt; として定義されています。つまり、 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッドで発生するように、 &lt;code&gt;next(value)&lt;/code&gt; を呼び出すことで自身の値も出力できるマルチキャスト &lt;code&gt;Observable&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6916edc889efd59e821e9e69f594ee4b8ec65909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchText$&lt;/code&gt; is the sequence of search-box values coming from the user. It's defined as an RxJS &lt;code&gt;Subject&lt;/code&gt;, which means it is a multicasting &lt;code&gt;Observable&lt;/code&gt; that can also emit values for itself by calling &lt;code&gt;next(value)&lt;/code&gt;, as happens in the &lt;code&gt;search()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;searchText$&lt;/code&gt; 、ユーザからの検索ボックス値のシーケンスです。これはRxJS &lt;code&gt;Subject&lt;/code&gt; として定義されています。つまり、 &lt;code&gt;search()&lt;/code&gt; メソッドで発生するように、 &lt;code&gt;next(value)&lt;/code&gt; を呼び出すことによってそれ自体の値を発行することもできるマルチキャスト &lt;code&gt;Observable&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="76ad0c5b8da43c7b6de6250e8195a93c15204d6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; clause, similar to the &lt;code&gt;plural&lt;/code&gt; clause, marks choices for alternate text based on your defined string values. For example, the following clause in the component template binds to the component's &lt;code&gt;gender&lt;/code&gt; property, which outputs one of the following string values: &quot;male&quot;, &quot;female&quot; or &quot;other&quot;. The clause maps those values to the appropriate translations:</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; に似た句、 &lt;code&gt;plural&lt;/code&gt; 句、あなたの定義された文字列の値に基づいて、代替テキストのマークの選択肢。たとえば、コンポーネントテンプレートの次の句は、コンポーネントの &lt;code&gt;gender&lt;/code&gt; プロパティにバインドされ、「male」、「female」、または「other」のいずれかの文字列値を出力します。この句は、これらの値を適切な変換にマップします。</target>
        </trans-unit>
        <trans-unit id="f1ef4e3c3557c47427af418f305913be1f3a5488" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;selector&lt;/code&gt; attribute is a CSS selector that defines where on the page the component should go. In AngularJS you do matching based on component names, but in Angular you have these explicit selectors. This one will match elements with the name &lt;code&gt;phone-list&lt;/code&gt;, just like the AngularJS version did.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; 属性は、ページ上のコンポーネントが行くべき場所を定義するCSSセレクタです。AngularJSではコンポーネント名に基づいてマッチングを行いますが、Angularではこれらの明示的なセレクターがあります。これは、AngularJSバージョンと同じように、要素を &lt;code&gt;phone-list&lt;/code&gt; という名前で照合します。</target>
        </trans-unit>
        <trans-unit id="11d9b9f6d8cdb36365862fee5c7e6c716ebb3596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;selector&lt;/code&gt; identifies the component. The selector is the name you give the Angular component when it is rendered as an HTML element on the page. By convention, Angular component selectors begin with the prefix &lt;code&gt;app-&lt;/code&gt;, followed by the component name.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; コンポーネントを識別する。セレクターは、ページ上でHTML要素としてレンダリングされるときにAngularコンポーネントに付ける名前です。慣例により、Angularコンポーネントセレクターは接頭辞 &lt;code&gt;app-&lt;/code&gt; で始まり、その後にコンポーネント名が続きます。</target>
        </trans-unit>
        <trans-unit id="263b313ccd333a2262c31082a98e1e63586d8640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sendRequest&lt;/code&gt; function creates a &lt;a href=&quot;http#immutability&quot;&gt;request clone&lt;/a&gt; without headers because the npm api forbids them.</source>
          <target state="translated">&lt;code&gt;sendRequest&lt;/code&gt; 関数は、作成&lt;a href=&quot;http#immutability&quot;&gt;要求クローンを&lt;/a&gt; NPM APIはそれらを禁止しているため、ヘッダーなし。</target>
        </trans-unit>
        <trans-unit id="98e3960b4dadf77856e4c0c4890e9f3074235a7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup()&lt;/code&gt; function returns an object literal with the variables, such as &lt;code&gt;masterService&lt;/code&gt;, that a test might reference. You don't define &lt;em&gt;semi-global&lt;/em&gt; variables (e.g., &lt;code&gt;let masterService: MasterService&lt;/code&gt;) in the body of the &lt;code&gt;describe()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setup()&lt;/code&gt; 関数は、以下のような変数を持つオブジェクトリテラル返し &lt;code&gt;masterService&lt;/code&gt; テストが参照かもしれません。 &lt;code&gt;describe()&lt;/code&gt; の本文で&lt;em&gt;セミグローバル&lt;/em&gt;変数を定義しないでください（例 &lt;code&gt;let masterService: MasterService&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7e7f39203bb8b9c13e311f0f854788f391b2276e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sizerComponent&lt;/code&gt; template has two buttons that each bind the click event to the &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt; methods. When the user clicks one of the buttons, the &lt;code&gt;sizerComponent&lt;/code&gt; calls the corresponding method. Both methods, &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt;, call the &lt;code&gt;resize()&lt;/code&gt; method with a &lt;code&gt;+1&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;, which in turn raises the &lt;code&gt;sizeChange&lt;/code&gt; event with the new size value.</source>
          <target state="translated">&lt;code&gt;sizerComponent&lt;/code&gt; のテンプレートには、2つのボタンがあり、各バインドするクリックイベント &lt;code&gt;inc()&lt;/code&gt; と &lt;code&gt;dec()&lt;/code&gt; メソッド。ユーザーがボタンの1つをクリックすると、 &lt;code&gt;sizerComponent&lt;/code&gt; は対応するメソッドを呼び出します。両方の方法、 &lt;code&gt;inc()&lt;/code&gt; と &lt;code&gt;dec()&lt;/code&gt; 、呼び出し &lt;code&gt;resize()&lt;/code&gt; とメソッド &lt;code&gt;+1&lt;/code&gt; 又は &lt;code&gt;-1&lt;/code&gt; 、次に上げる &lt;code&gt;sizeChange&lt;/code&gt; の新しいサイズ値を有するイベントを。</target>
        </trans-unit>
        <trans-unit id="6e385289300fdc537b82f3617d6eaaaf051383e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source-map-explorer&lt;/code&gt; analyzes the source map generated with the bundle and draws a map of all dependencies, showing exactly which classes are included in the bundle.</source>
          <target state="translated">&lt;code&gt;source-map-explorer&lt;/code&gt; バンドルに生成されたソースマップを解析して、クラスがバンドルに含まれている正確に示し、すべての依存関係の地図を描きます。</target>
        </trans-unit>
        <trans-unit id="ccf897a30f41d2173f77117dd5c06f669759c5a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceMap&lt;/code&gt; option applies for both scripts and styles. You can also choose to output hidden source maps, or resolve vendor package source maps:</source>
          <target state="translated">&lt;code&gt;sourceMap&lt;/code&gt; のオプションは、スクリプトとスタイルの両方に適用されます。非表示のソースマップを出力するか、ベンダーパッケージのソースマップを解決するかを選択することもできます。</target>
        </trans-unit>
        <trans-unit id="9fb8a6726597db869ba6708ca7b5b6a4986d3a3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src/app/app.module.ts&lt;/code&gt; file has a good example of a nested region.</source>
          <target state="translated">&lt;code&gt;src/app/app.module.ts&lt;/code&gt; ファイルは、ネストされた地域の良い例があります。</target>
        </trans-unit>
        <trans-unit id="202bb3ece99aa9f958aaeb45fbc17d65040b889f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src/main.ts&lt;/code&gt; is a simple example of a file with a single &lt;em&gt;#docregion&lt;/em&gt; at the top of the file.</source>
          <target state="translated">&lt;code&gt;src/main.ts&lt;/code&gt; 単一持つファイルの簡単な例です&lt;em&gt;#docregion&lt;/em&gt;ファイルの先頭に。</target>
        </trans-unit>
        <trans-unit id="c4ebea686b86ed2e39ae542821868ac054705e37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src/ngsw-config.json&lt;/code&gt; configuration file specifies which files and data URLs the Angular service worker should cache and how it should update the cached files and data. The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; processes the configuration file during &lt;code&gt;ng build --prod&lt;/code&gt;. Manually, you can process it with the &lt;code&gt;ngsw-config&lt;/code&gt; tool:</source>
          <target state="translated">&lt;code&gt;src/ngsw-config.json&lt;/code&gt; 角度サービスワーカーがキャッシュすべきとどのようにそれがキャッシュされたファイルやデータを更新する必要があり、ファイルやデータのURL設定ファイルを指定します。&lt;a href=&quot;cli&quot;&gt;角度CLIは&lt;/a&gt;中に設定ファイルを処理し &lt;code&gt;ng build --prod&lt;/code&gt; 。手動で、 &lt;code&gt;ngsw-config&lt;/code&gt; ツールで処理できます。</target>
        </trans-unit>
        <trans-unit id="d1edd2e05f84370637e39aec6246e210e01c09b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;styles&lt;/code&gt; property takes an array of strings that contain the CSS rule declarations.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; プロパティは、CSSルールの宣言を含む文字列の配列をとります。</target>
        </trans-unit>
        <trans-unit id="77201400a17a80e45079ecd99dd04f439106322c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;submit&lt;/code&gt; event is emitted by the &lt;code&gt;form&lt;/code&gt; tag using the native DOM event. You trigger the event by clicking a button with &lt;code&gt;submit&lt;/code&gt; type. This allows the user to press the &lt;strong&gt;Enter&lt;/strong&gt; key to submit the completed form.</source>
          <target state="translated">&lt;code&gt;submit&lt;/code&gt; イベントがによって放出される &lt;code&gt;form&lt;/code&gt; ネイティブDOMイベントを使用してタグ。 &lt;code&gt;submit&lt;/code&gt; タイプのボタンをクリックして、イベントをトリガーします。これにより、ユーザーは&lt;strong&gt;Enter&lt;/strong&gt;キーを押して完成したフォームを送信できます。</target>
        </trans-unit>
        <trans-unit id="251e43a05f33d8e9cc990fef4b501d01abd583d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subscribe()&lt;/code&gt; method takes a JavaScript object (called an &lt;a href=&quot;glossary#observer&quot;&gt;observer&lt;/a&gt;) with up to three callbacks, one for each type of notification that an observable can deliver:</source>
          <target state="translated">&lt;code&gt;subscribe()&lt;/code&gt; メソッドは、（と呼ばれるJavaScriptオブジェクトとる&lt;a href=&quot;glossary#observer&quot;&gt;オブザーバーを&lt;/a&gt; 3つのコールバック、観測可能に提供できることを通知の各タイプごとに1つまでと）：</target>
        </trans-unit>
        <trans-unit id="5a5783ba2b920d9635fe9461bd4e46971ccf2eb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subscribe()&lt;/code&gt; method takes a success (&lt;code&gt;next&lt;/code&gt;) and fail (&lt;code&gt;error&lt;/code&gt;) callback. Make sure you provide &lt;em&gt;both&lt;/em&gt; callbacks so that you capture errors. Neglecting to do so produces an asynchronous uncaught observable error that the test runner will likely attribute to a completely different test.</source>
          <target state="translated">&lt;code&gt;subscribe()&lt;/code&gt; メソッドは、（成功を取り &lt;code&gt;next&lt;/code&gt; ）と（失敗 &lt;code&gt;error&lt;/code&gt; ）コールバックを。エラーをキャプチャできるように、&lt;em&gt;両方の&lt;/em&gt;コールバックを必ず提供してください。これを怠ると、非同期のキャッチされない観察可能なエラーが生成され、テストランナーは完全に異なるテストに起因する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8791607c61c0f05713a0307ef28d52145a479306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap()&lt;/code&gt; operator has three important characteristics.</source>
          <target state="translated">&lt;code&gt;switchMap()&lt;/code&gt; 演算子は、三つの重要な特性を有しています。</target>
        </trans-unit>
        <trans-unit id="86121707cc28f8a72bb7aa24c90f97195ae22d31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap()&lt;/code&gt; operator takes a function argument that returns an &lt;code&gt;Observable&lt;/code&gt;. In the example, &lt;code&gt;PackageSearchService.search&lt;/code&gt; returns an &lt;code&gt;Observable&lt;/code&gt;, as other data service methods do. If a previous search request is still in-flight (as when the network connection is poor), the operator cancels that request and sends a new one.</source>
          <target state="translated">&lt;code&gt;switchMap()&lt;/code&gt; 演算子は、返す関数引数取り &lt;code&gt;Observable&lt;/code&gt; 。この例では、 &lt;code&gt;PackageSearchService.search&lt;/code&gt; は、他のデータサービスメソッドと同様に、 &lt;code&gt;Observable&lt;/code&gt; を返します。以前の検索要求がまだ実行中の場合（ネットワーク接続が不十分な場合など）、オペレーターはその要求をキャンセルして新しい要求を送信します。</target>
        </trans-unit>
        <trans-unit id="35e89baf59c798f66de4b3a1d896130098da7dea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap&lt;/code&gt; operator also cancels previous in-flight requests. If the user re-navigates to this route with a new &lt;code&gt;id&lt;/code&gt; while the &lt;code&gt;HeroService&lt;/code&gt; is still retrieving the old &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;switchMap&lt;/code&gt; discards that old request and returns the hero for the new &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;switchMap&lt;/code&gt; のオペレータはまた、前の機内要求をキャンセルします。新しいとこのルートへのユーザーの再移動した場合 &lt;code&gt;id&lt;/code&gt; ながら &lt;code&gt;HeroService&lt;/code&gt; はまだ古い取得している &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;switchMap&lt;/code&gt; の古い要求と新しいのためのリターンヒーローをすることを破棄する &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7be7153b64c1432ee8505e6e1853e08c4af23b1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap&lt;/code&gt; operator does two things. It flattens the &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; that &lt;code&gt;HeroService&lt;/code&gt; returns and cancels previous pending requests. If the user re-navigates to this route with a new &lt;code&gt;id&lt;/code&gt; while the &lt;code&gt;HeroService&lt;/code&gt; is still retrieving the old &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;switchMap&lt;/code&gt; discards that old request and returns the hero for the new &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;switchMap&lt;/code&gt; の演算子は、2つのことを行います。それは平らに &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; その &lt;code&gt;HeroService&lt;/code&gt; のリターンを、前の保留中の要求を取り消します。 &lt;code&gt;HeroService&lt;/code&gt; がまだ古い &lt;code&gt;id&lt;/code&gt; 取得している間に、ユーザーが新しい &lt;code&gt;id&lt;/code&gt; このルートに再ナビゲートすると、 &lt;code&gt;switchMap&lt;/code&gt; はその古い要求を破棄し、新しい &lt;code&gt;id&lt;/code&gt; ヒーローを返します。</target>
        </trans-unit>
        <trans-unit id="9f92ffc98bcb36aa1c882663131002f05e065a2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;templateUrl&lt;/code&gt; property points to a separate file for the template HTML.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; のテンプレートHTMLのための別のファイルにプロパティポイント。</target>
        </trans-unit>
        <trans-unit id="e7b301cb1df5e9071174c9086184fff5dcc8819a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thresholds&lt;/code&gt; property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project.</source>
          <target state="translated">&lt;code&gt;thresholds&lt;/code&gt; プロパティは、ユニットテストがプロジェクトで実行されたときに80％のコードカバレッジの最小値を強制するためのツールを引き起こします。</target>
        </trans-unit>
        <trans-unit id="f998cca1a6cbbd1bfbc79167fe0b64cfb77fb4ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timings&lt;/code&gt; parameter takes a string defined in three parts.</source>
          <target state="translated">&lt;code&gt;timings&lt;/code&gt; パラメータは、3つの部分で定義された文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="83fc825d674ac468c5e028de026f937ce6df1287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform&lt;/code&gt; method is essential to a pipe. The &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt;&lt;em&gt;interface&lt;/em&gt; defines that method and guides both tooling and the compiler. Technically, it's optional; Angular looks for and executes the &lt;code&gt;transform&lt;/code&gt; method regardless.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 方法は、パイプには不可欠です。 &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; の&lt;em&gt;インタフェース&lt;/em&gt;定義方法及びガイドツールとコンパイラの両方こと。技術的には、これはオプションです。Angularは &lt;code&gt;transform&lt;/code&gt; メソッドを探して実行します。</target>
        </trans-unit>
        <trans-unit id="970c3e531a96b857b5407a5716c7ae81e934f401" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tsconfig.json&lt;/code&gt; looks like this:</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="1497abe2d60e017e56bc96d27cab2a044a44f729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url()&lt;/code&gt; method reads source files from your filesystem, relative to the schematic.</source>
          <target state="translated">&lt;code&gt;url()&lt;/code&gt; メソッドは、回路図と比較し、あなたのファイルシステムからソースファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="0bc1706a02388342ae67afeb45237c3d7508da61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useClass&lt;/code&gt; provider key lets you create and return a new instance of the specified class.</source>
          <target state="translated">&lt;code&gt;useClass&lt;/code&gt; のプロバイダキーは、ユーザーが作成し、指定されたクラスの新しいインスタンスを返すことができます。</target>
        </trans-unit>
        <trans-unit id="5681ccda9b1d2143ce5b503657b19dfe1f04e77f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useExisting&lt;/code&gt; provider key lets you map one token to another. In effect, the first token is an &lt;em&gt;alias&lt;/em&gt; for the service associated with the second token, creating two ways to access the same service object.</source>
          <target state="translated">&lt;code&gt;useExisting&lt;/code&gt; のプロバイダのキーを使用すると、別のトークンをマッピングすることができます。実際、最初のトークンは2番目のトークンに関連付けられたサービスの&lt;em&gt;エイリアス&lt;/em&gt;であり、同じサービスオブジェクトにアクセスする2つの方法を作成します。</target>
        </trans-unit>
        <trans-unit id="44beea326133a07d582e720ef9523e833171f6ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useFactory&lt;/code&gt; field tells Angular that the provider is a factory function whose implementation is &lt;code&gt;heroServiceFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;useFactory&lt;/code&gt; フィールドは、プロバイダがその実装であるファクトリ関数であることを角度を伝え &lt;code&gt;heroServiceFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0315670d1b1ee3186b18e2d0b131bffe28309147" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useFactory&lt;/code&gt; provider key lets you create a dependency object by calling a factory function, as in the following example.</source>
          <target state="translated">&lt;code&gt;useFactory&lt;/code&gt; プロバイダのキーを使用すると、次の例のように、ファクトリ関数を呼び出すことにより、依存関係オブジェクトを作成することができます。</target>
        </trans-unit>
        <trans-unit id="cd5ad9a619c838440e376c0440e8b7fcf44e692e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useHash&lt;/code&gt; property defaults to &lt;code&gt;false&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; defaults to an empty &lt;code&gt;string&lt;/code&gt;. Pass the configuration object to override the defaults.</source>
          <target state="translated">&lt;code&gt;useHash&lt;/code&gt; のにプロパティのデフォルト値 &lt;code&gt;false&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; の空のデフォルト &lt;code&gt;string&lt;/code&gt; 。構成オブジェクトを渡して、デフォルトをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="8309209875bd091e2230b33046bfd662f9462513" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useHash&lt;/code&gt; property defaults to &lt;code&gt;false&lt;/code&gt;, and the &lt;code&gt;hashPrefix&lt;/code&gt; defaults to an empty &lt;code&gt;string&lt;/code&gt;. Pass the configuration object to override the defaults.</source>
          <target state="translated">&lt;code&gt;useHash&lt;/code&gt; のにプロパティのデフォルト値 &lt;code&gt;false&lt;/code&gt; 、および &lt;code&gt;hashPrefix&lt;/code&gt; の空のデフォルト &lt;code&gt;string&lt;/code&gt; 。構成オブジェクトを渡して、デフォルトをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="5f73f12a1042cc5a37d5219d0bdd859b38d3d738" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useValue&lt;/code&gt; key lets you associate a fixed value with a DI token. Use this technique to provide &lt;em&gt;runtime configuration constants&lt;/em&gt; such as website base addresses and feature flags. You can also use a value provider in a unit test to provide mock data in place of a production data service.</source>
          <target state="translated">&lt;code&gt;useValue&lt;/code&gt; のキーを使用すると、DIトークンに固定値を関連付けることができます。この手法を使用して、Webサイトのベースアドレスや機能フラグなどの&lt;em&gt;ランタイム構成定数&lt;/em&gt;を提供し&lt;em&gt;ます&lt;/em&gt;。単体テストでバリュープロバイダーを使用して、本番データサービスの代わりにモックデータを提供することもできます。</target>
        </trans-unit>
        <trans-unit id="1ac27e4b9fb2cce116f77c1cedfc5db8b028a144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;validate()&lt;/code&gt; functions must return a Promise or an observable,</source>
          <target state="translated">&lt;code&gt;validate()&lt;/code&gt; 関数は、約束や、観察を返す必要があり、</target>
        </trans-unit>
        <trans-unit id="6d232eaaf4baaffc4ab4f10a822fa23f92ba3c9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;withRefresh&lt;/code&gt; option is explained &lt;a href=&quot;http#cache-refresh&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;withRefresh&lt;/code&gt; のオプションが説明されている&lt;a href=&quot;http#cache-refresh&quot;&gt;以下&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5a9827f2927350bd733138c7d14854c368b34cb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;workspace projects&lt;/code&gt; object contains all the project-specific configuration information.</source>
          <target state="translated">&lt;code&gt;workspace projects&lt;/code&gt; オブジェクトは、すべてのプロジェクト固有の設定情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="db4393ab4ed83533b6fd3b84f5541ee8b1e21f61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x-prompt&lt;/code&gt; field syntax supports a long form for cases where you require additional customization and control over the prompt. In this form, the &lt;code&gt;x-prompt&lt;/code&gt; field value is a JSON object with subfields that customize the behavior of the prompt.</source>
          <target state="translated">&lt;code&gt;x-prompt&lt;/code&gt; フィールドの構文を使用すると、プロンプトを超える追加のカスタマイズや制御を必要とする場合のための長い形式をサポートしています。この形式では、 &lt;code&gt;x-prompt&lt;/code&gt; フィールド値は、プロンプトの動作をカスタマイズするサブフィールドを持つJSONオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="3d90bb925c813a0b9d2c883e18e2532b96b08fd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{hero.name}}&lt;/code&gt;&lt;a href=&quot;displaying-data#interpolation&quot;&gt;&lt;em&gt;interpolation&lt;/em&gt;&lt;/a&gt; displays the component's &lt;code&gt;hero.name&lt;/code&gt; property value within the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;{{hero.name}}&lt;/code&gt; &lt;a href=&quot;displaying-data#interpolation&quot;&gt;&lt;em&gt;補間&lt;/em&gt;&lt;/a&gt;ディスプレイコンポーネントの &lt;code&gt;hero.name&lt;/code&gt; の内のプロパティ値 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="90d7daa71e62572b6bccfbeb192b5e244292312c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{hero.name}}&lt;/code&gt;&lt;a href=&quot;interpolation&quot;&gt;&lt;em&gt;interpolation&lt;/em&gt;&lt;/a&gt; displays the component's &lt;code&gt;hero.name&lt;/code&gt; property value within the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;{{hero.name}}&lt;/code&gt; &lt;a href=&quot;interpolation&quot;&gt;&lt;em&gt;補間&lt;/em&gt;&lt;/a&gt;ディスプレイコンポーネントの &lt;code&gt;hero.name&lt;/code&gt; の内のプロパティ値 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="600a6011a885e1574b4cf2f04310a223dfb82932" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;#docregion&lt;/em&gt; comment begins a code snippet region. Every line of code &lt;em&gt;after&lt;/em&gt; that comment belongs in the region &lt;em&gt;until&lt;/em&gt; the code fragment processor encounters the end of the file or a closing &lt;em&gt;#enddocregion&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;#docregionの&lt;/em&gt;コメントは、コードスニペット域を開始します。そのコードの&lt;em&gt;後の&lt;/em&gt;すべてのコード行は、コードフラグメントプロセッサがファイルの終わりまたは終了&lt;em&gt;#enddocregionに到達&lt;/em&gt;する&lt;em&gt;まで&lt;/em&gt;、リージョンに属します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="09ad083d54cf158dabf6073214d23611fea930ee" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;#docregion&lt;/em&gt; is the most important kind of code snippet markup.</source>
          <target state="translated">&lt;em&gt;#docregionは、&lt;/em&gt;コードスニペットのマークアップの中で最も重要なものです。</target>
        </trans-unit>
        <trans-unit id="c02d5e0186f7578d49fc4f8de24aab78e198fd8c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;#docregion&lt;/em&gt; with no name is the &lt;em&gt;default region&lt;/em&gt;. Do &lt;em&gt;not&lt;/em&gt; set the &lt;code&gt;region&lt;/code&gt; attribute when referring to the default &lt;em&gt;#docregion&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;#docregion&lt;/em&gt;名前のないです&lt;em&gt;デフォルトの地域&lt;/em&gt;。デフォルトの&lt;em&gt;#docregion&lt;/em&gt;を参照するときは、 &lt;code&gt;region&lt;/code&gt; 属性を設定し&lt;em&gt;ないで&lt;/em&gt;ください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="551fb2af6ce44839250b3c60015b1a1f9e111031" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&amp;lt;ベースHREF&amp;gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="59a4dbde46d9770b16233eaf16d19d577b5cf162" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterContent&lt;/em&gt; hooks concern &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt;, the child components that Angular projected into the component.</source>
          <target state="translated">&lt;em&gt;afterContentは&lt;/em&gt;懸念フック &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; 角度がコンポーネントに投影することを、子コンポーネントを。</target>
        </trans-unit>
        <trans-unit id="f0d2a411403b9c6d4f6d980b63bb02aa5a96e5e8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterContent&lt;/em&gt; sample explores the &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;()&lt;/code&gt; hooks that Angular calls &lt;em&gt;after&lt;/em&gt; Angular projects external content into the component.</source>
          <target state="translated">&lt;em&gt;afterContentの&lt;/em&gt;サンプルが探求 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;()&lt;/code&gt; は、その角度コールフック&lt;em&gt;後&lt;/em&gt;コンポーネントに角度プロジェクト外部コンテンツを。</target>
        </trans-unit>
        <trans-unit id="fe6a5ec79638be9e0a3986c4c022d9e46840c657" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterView&lt;/em&gt; hooks concern &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt;, the child components whose element tags appear &lt;em&gt;within&lt;/em&gt; the component's template.</source>
          <target state="translated">&lt;em&gt;AfterViewは&lt;/em&gt;懸念フック &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt; 、その要素タグが表示され、子コンポーネント&lt;em&gt;内&lt;/em&gt;のコンポーネントのテンプレートを。</target>
        </trans-unit>
        <trans-unit id="3dfed87bca66b44e4a6482e1ba65840ed36b5bf4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterView&lt;/em&gt; sample explores the &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt; hooks that Angular calls &lt;em&gt;after&lt;/em&gt; it creates a component's child views.</source>
          <target state="translated">&lt;em&gt;AfterView&lt;/em&gt;サンプル探る &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt; は、その角度の呼び出しをフックし&lt;em&gt;た後&lt;/em&gt;、それは、コンポーネントの子ビューを作成します。</target>
        </trans-unit>
        <trans-unit id="a02b3def534749278a0fa19f46335219b7a2c87a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Back&lt;/em&gt; and &lt;em&gt;Save&lt;/em&gt; buttons on the Details page don't work.</source>
          <target state="translated">[ 詳細]ページの[ &lt;em&gt;戻る&lt;/em&gt; ]ボタンと[ &lt;em&gt;保存]&lt;/em&gt;ボタンが機能しません。</target>
        </trans-unit>
        <trans-unit id="26812ee9d2705615518cee0d2be8d4b1f022ddbf" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;ComponentFixture&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ComponentFixture&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="17fe33d0dae8927c14c9294e1b5e47dcd88f9bc8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;DoCheck&lt;/em&gt; sample extends the &lt;em&gt;OnChanges&lt;/em&gt; sample with the following &lt;code&gt;ngDoCheck()&lt;/code&gt; hook:</source>
          <target state="translated">&lt;em&gt;DoCheckの&lt;/em&gt;サンプルが延び&lt;em&gt;OnChangesの&lt;/em&gt;以下で試料を &lt;code&gt;ngDoCheck()&lt;/code&gt; フック：</target>
        </trans-unit>
        <trans-unit id="66f7b097f518f662624a2fe89fa23bde67722c64" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Hero Employment Agency&lt;/em&gt; uses this form to maintain personal information about heroes. Every hero needs a job. It's the company mission to match the right hero with the right crisis.</source>
          <target state="translated">&lt;em&gt;ヒーロー雇用庁は&lt;/em&gt;英雄の個人情報を保持するためにこのフォームを使用しています。すべてのヒーローには仕事が必要です。適切なヒーローを適切な危機に対応させることが企業の使命です。</target>
        </trans-unit>
        <trans-unit id="d3402fb21166e9ae4d2d51d781786ab5a98ca52d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;History&lt;/em&gt; log demonstrates that messages travel in both directions between the parent &lt;code&gt;MissionControlComponent&lt;/code&gt; and the &lt;code&gt;AstronautComponent&lt;/code&gt; children, facilitated by the service:</source>
          <target state="translated">&lt;em&gt;履歴&lt;/em&gt;ログは、メッセージが親の間で両方向に移動することを実証している &lt;code&gt;MissionControlComponent&lt;/code&gt; と &lt;code&gt;AstronautComponent&lt;/code&gt; のサービスによって促進さ子供、：</target>
        </trans-unit>
        <trans-unit id="2b32c125ecd1669f448ec3bf41c296c4bafe6250" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Name&lt;/em&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control has the HTML5 &lt;code&gt;required&lt;/code&gt; attribute; the &lt;em&gt;Alter Ego&lt;/em&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control does not because &lt;code&gt;alterEgo&lt;/code&gt; is optional.</source>
          <target state="translated">&lt;em&gt;名前&lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; コントロールは、HTML5をしている &lt;code&gt;required&lt;/code&gt; 属性を。 &lt;code&gt;alterEgo&lt;/code&gt; はオプションであるため、&lt;em&gt;Alter Ego &lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; コントロールにはありません。</target>
        </trans-unit>
        <trans-unit id="e2265d664f6eff573fc5ee3934aa756169219d40" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;NgModel&lt;/em&gt; directive doesn't just track state; it updates the control with special Angular CSS classes that reflect the state. You can leverage those class names to change the appearance of the control.</source>
          <target state="translated">&lt;em&gt;NgModelの&lt;/em&gt;ディレクティブは、単に状態を追跡しません。状態を反映する特別なAngular CSSクラスでコントロールを更新します。これらのクラス名を利用して、コントロールの外観を変更できます。</target>
        </trans-unit>
        <trans-unit id="bbea351a6ffcf13594aaadf605f66f73429d2df2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Parent Finder&lt;/em&gt; sample is full of circular class references that are impossible to break.</source>
          <target state="translated">&lt;em&gt;親ファインダーの&lt;/em&gt;サンプルが破損することは不可能である円形クラス参照がいっぱいです。</target>
        </trans-unit>
        <trans-unit id="6c4600462959ddfa37d5891549dbb884fbecfd73" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Reset&lt;/em&gt; button clears the &lt;code&gt;heroes&lt;/code&gt; list. Angular removes all hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements from the DOM and destroys their spy directives at the same time. The spy's &lt;code&gt;ngOnDestroy()&lt;/code&gt; method reports its last moments.</source>
          <target state="translated">&lt;em&gt;リセット&lt;/em&gt;ボタンはクリア &lt;code&gt;heroes&lt;/code&gt; リストを。AngularはDOMからすべてのヒーローの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素を削除し、同時にそれらのスパイディレクティブを破棄します。スパイの &lt;code&gt;ngOnDestroy()&lt;/code&gt; メソッドは最後の瞬間を報告します。</target>
        </trans-unit>
        <trans-unit id="c1a352f4be8028751775aca111e668c0a33502ea" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Routing Module&lt;/em&gt;&lt;em&gt;replaces&lt;/em&gt; the routing configuration in the root or feature module. &lt;em&gt;Either&lt;/em&gt; configure routes in the Routing Module &lt;em&gt;or&lt;/em&gt; within the module itself but not in both.</source>
          <target state="translated">&lt;em&gt;ルーティングモジュールは、&lt;/em&gt;&lt;em&gt;置き換え&lt;/em&gt;ルートや機能モジュール内のルーティング設定を。ルーティングモジュール&lt;em&gt;または&lt;/em&gt;モジュール自体の&lt;em&gt;どちらかに&lt;/em&gt;ルートを構成しますが、両方には構成しません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c5f8f5d1924de13765832553932eb057250f18c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Save&lt;/em&gt; button is disabled until the form is in a valid state. When the form is valid, you can click &lt;em&gt;Save&lt;/em&gt; and the app renders the current form values as JSON. This proves that any user input is bound back to the data model. Saving and retrieving the data is an exercise for another time.</source>
          <target state="translated">フォームが有効な状態になるまで、[ &lt;em&gt;保存&lt;/em&gt; ]ボタンは無効になり&lt;em&gt;ます&lt;/em&gt;。フォームが有効な場合、[ &lt;em&gt;保存&lt;/em&gt; ]をクリックすると、アプリは現在のフォーム値をJSONとしてレンダリングします。これは、ユーザー入力がデータモデルにバインドされていることを証明します。データの保存と取得は、また別の課題です。</target>
        </trans-unit>
        <trans-unit id="7a30cd1086fc126cdbda17264a63b67bfd463386" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Tour of Heroes&lt;/em&gt; app that you build helps a staffing agency manage its stable of heroes. The app has many of the features you'd expect to find in any data-driven application. The finished app acquires and displays a list of heroes, edits a selected hero's detail, and navigates among different views of heroic data.</source>
          <target state="translated">&lt;em&gt;英雄のツアーは&lt;/em&gt;、あなたのビルドは、人材派遣会社は、英雄のその安定的な管理を支援することをアプリ。このアプリには、データ駆動型アプリケーションに期待される多くの機能があります。完成したアプリは、ヒーローのリストを取得して表示し、選択したヒーローの詳細を編集し、ヒーローデータのさまざまなビュー間を移動します。</target>
        </trans-unit>
        <trans-unit id="cece2edbaa93c78578f1816377db1a1619b69bba" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;attribute selector&lt;/em&gt; pattern explains the name of this kind of directive.</source>
          <target state="translated">&lt;em&gt;属性セレクタ&lt;/em&gt;パターンは、ディレクティブのこの種の名前を説明しています。</target>
        </trans-unit>
        <trans-unit id="1b48144f080e3a52ebd72bed691562e0a4b05ef3" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;cache-then-refresh&lt;/em&gt; option is triggered by the presence of a &lt;strong&gt;custom &lt;code&gt;x-refresh&lt;/code&gt; header&lt;/strong&gt;.</source>
          <target state="translated">&lt;em&gt;キャッシュその後、リフレッシュ&lt;/em&gt;オプションはの存在によってトリガーされ&lt;strong&gt;たカスタム &lt;code&gt;x-refresh&lt;/code&gt; ヘッダー&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cd03c6a4b57c507c800b037668226501ef677043" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;cache-then-refresh&lt;/em&gt; option is triggered by the presence of a custom &lt;code&gt;x-refresh&lt;/code&gt; header.</source>
          <target state="translated">&lt;em&gt;キャッシュその後、リフレッシュ&lt;/em&gt;オプションは、カスタムの存在によってトリガーされる &lt;code&gt;x-refresh&lt;/code&gt; ヘッダー。</target>
        </trans-unit>
        <trans-unit id="68bffbc638ce2bcff5ac27e43af13ce79019ebe1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;class&lt;/em&gt; is similar to the &lt;code&gt;HeroesComponent&lt;/code&gt; class.</source>
          <target state="translated">この&lt;em&gt;クラス&lt;/em&gt;は、 &lt;code&gt;HeroesComponent&lt;/code&gt; クラスに似ています。</target>
        </trans-unit>
        <trans-unit id="3b23511daee49c68fc0bd77c760d5aeb2fbfce17" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;consumer&lt;/em&gt; of an injected service doesn't need to know how to create that service. It's the job of the DI framework to create and cache dependencies. The consumer just needs to let the DI framework know which dependencies it needs.</source>
          <target state="translated">注入されたサービスの&lt;em&gt;コンシューマー&lt;/em&gt;は、そのサービスを作成する方法を知る必要はありません。依存関係を作成してキャッシュするのは、DIフレームワークの仕事です。コンシューマは、DIフレームワークに必要な依存関係を通知する必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="68169d61d2e3c28071db2b807cf1b4e1b903706c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;expression context&lt;/em&gt; is typically the &lt;em&gt;component&lt;/em&gt; instance. In the following snippets, the &lt;code&gt;recommended&lt;/code&gt; within double curly braces and the &lt;code&gt;itemImageUrl2&lt;/code&gt; in quotes refer to properties of the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;式コンテキストは&lt;/em&gt;典型的には&lt;em&gt;コンポーネント&lt;/em&gt;インスタンス。次のスニペットでは、二重中括弧内の &lt;code&gt;recommended&lt;/code&gt; と引用符で &lt;code&gt;itemImageUrl2&lt;/code&gt; れた &lt;code&gt;AppComponent&lt;/code&gt; プロパティを参照しています。</target>
        </trans-unit>
        <trans-unit id="547e485937ee9a8482d6c575e3337f47c2760a8f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;fixture&lt;/em&gt; methods cause Angular to perform certain tasks on the component tree. Call these method to trigger Angular behavior in response to simulated user action.</source>
          <target state="translated">&lt;em&gt;治具の&lt;/em&gt;角度原因メソッドは、コンポーネントツリー上の特定のタスクを実行します。これらのメソッドを呼び出して、シミュレートされたユーザーアクションに応じてAngularの動作をトリガーします。</target>
        </trans-unit>
        <trans-unit id="281c18d861de6375f500f8737ccbe1fc960a8a5e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;injector&lt;/em&gt; is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don't have to create injectors.</source>
          <target state="translated">&lt;em&gt;インジェクタは、&lt;/em&gt;主要なメカニズムです。必要に応じて、角度は、ブートストラッププロセス中にあなたのためのアプリケーション全体の注射器、および追加のインジェクターを作成します。あなたは、インジェクターを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="6c1ab60ab4f1d67de0ddd4e00da564b8cd65741d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;link parameters array&lt;/em&gt; contains an object with a single &lt;code&gt;outlets&lt;/code&gt; property whose value is another object keyed by one (or more) outlet names. In this case there is only the &quot;popup&quot; outlet property and its value is another &lt;em&gt;link parameters array&lt;/em&gt; that specifies the &lt;code&gt;compose&lt;/code&gt; route.</source>
          <target state="translated">&lt;em&gt;リンクパラメータアレイは、&lt;/em&gt;単一持つオブジェクト含ま &lt;code&gt;outlets&lt;/code&gt; プロパティの値が1つ（または複数）をキー別の目的である出口名。この場合、「ポップアップ」アウトレットプロパティのみがあり、その値は、 &lt;code&gt;compose&lt;/code&gt; ルートを指定する別の&lt;em&gt;リンクパラメータ配列&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="6f8f3c3b5c5041d24c8b8360e46b01aea381f4f8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;local variable&lt;/em&gt; approach is simple and easy. But it is limited because the parent-child wiring must be done entirely within the parent template. The parent component &lt;em&gt;itself&lt;/em&gt; has no access to the child.</source>
          <target state="translated">&lt;em&gt;ローカル変数の&lt;/em&gt;アプローチはシンプルで簡単です。ただし、親子配線は完全に親テンプレート内で行う必要があるため、制限があります。親コンポーネント&lt;em&gt;自体&lt;/em&gt;は子にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="70d69092db75bbbde8d71173eb3a75beeb8e0869" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;next&lt;/em&gt; object</source>
          <target state="translated">&lt;em&gt;次の&lt;/em&gt;オブジェクト</target>
        </trans-unit>
        <trans-unit id="680dc53f22865b98fcfe8ea1b8820ef44fdd9a8d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;observe&lt;/em&gt; option specifies how much of the response to return.</source>
          <target state="translated">&lt;em&gt;観察&lt;/em&gt;どのくらいのリターンへの応答のオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="d7c4875e7d9495788d2aae3a67d641c0812d162a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;overrideComponent&lt;/em&gt; method</source>
          <target state="translated">&lt;em&gt;overrideComponent&lt;/em&gt;方法</target>
        </trans-unit>
        <trans-unit id="ff0fbcfe3ea4fa514b574eaf8f3d059f8b33db8a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;path&lt;/em&gt; of the route to the destination component.</source>
          <target state="translated">宛先コンポーネントへのルートの&lt;em&gt;パス&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="630fa707e54c08a528f955e5bb95d477c9ced61b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;plural&lt;/em&gt; and &lt;em&gt;select&lt;/em&gt; ICU expressions are extracted separately, so they require special attention when preparing for translation.</source>
          <target state="translated">&lt;em&gt;複数&lt;/em&gt;と&lt;em&gt;選択し&lt;/em&gt;、翻訳のために準備するとき、彼らは特別な注意が必要なので、ICU式は、個別に抽出されています。</target>
        </trans-unit>
        <trans-unit id="b1863b3c0fe60749f25419b06a221dd2df30c597" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;responseType&lt;/em&gt; option specifies the format in which to return data.</source>
          <target state="translated">&lt;em&gt;responseTypeの&lt;/em&gt;オプションは、データが返される形式を指定します。</target>
        </trans-unit>
        <trans-unit id="7ec1d5444e649cbb29fb26c5ebedf34c9f05198a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;statement context&lt;/em&gt; is typically the component instance. The &lt;em&gt;deleteHero&lt;/em&gt; in &lt;code&gt;(click)=&quot;deleteHero()&quot;&lt;/code&gt; is a method of the data-bound component.</source>
          <target state="translated">&lt;em&gt;文のコンテキストは&lt;/em&gt;通常、コンポーネントインスタンスです。&lt;em&gt;deleteHero&lt;/em&gt;で &lt;code&gt;(click)=&quot;deleteHero()&quot;&lt;/code&gt; データバインドコンポーネントのメソッドです。</target>
        </trans-unit>
        <trans-unit id="8e1155de8d03b6d218f6065cbb5b9d44effee80c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;stub component&lt;/em&gt; approach has another advantage. While the stubs in &lt;em&gt;this&lt;/em&gt; example were empty, you could give them stripped-down templates and classes if your tests need to interact with them in some way.</source>
          <target state="translated">&lt;em&gt;スタブコンポーネント&lt;/em&gt;アプローチは別の利点を有します。&lt;em&gt;この&lt;/em&gt;例のスタブは空でしたが、テストが何らかの方法でそれらと相互作用する必要がある場合は、それらを取り除いたテンプレートとクラスを与えることができます。</target>
        </trans-unit>
        <trans-unit id="91f269fce15860a4bd882bdab5721a6f6a5432e6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;target&lt;/em&gt; of a binding is the property or event inside the binding punctuation: &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt; or &lt;code&gt;[()]&lt;/code&gt;.</source>
          <target state="translated">バインディングの&lt;em&gt;ターゲット&lt;/em&gt;は、バインディング句読点内のプロパティまたはイベントです： &lt;code&gt;[]&lt;/code&gt; 、 &lt;code&gt;()&lt;/code&gt; または &lt;code&gt;[()]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccdd54cecc0f13f83a35d6d76b84a2c2d17459f4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;tax-return-to-edit&lt;/em&gt; arrives via the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, which is implemented with getters and setters. The setter initializes the component's own instance of the &lt;code&gt;HeroTaxReturnService&lt;/code&gt; with the incoming return. The getter always returns what that service says is the current state of the hero. The component also asks the service to save and restore this tax return.</source>
          <target state="translated">&lt;em&gt;税・リターン・ツー・編集&lt;/em&gt;を経て到着 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ゲッターとセッターで実装されているプロパティ、。セッターは、 &lt;code&gt;HeroTaxReturnService&lt;/code&gt; のコンポーネント自体のインスタンスを着信リターンで初期化します。ゲッターは常にそのサービスが言っていることをヒーローの現在の状態として返します。コンポーネントはまた、この税申告を保存して復元するようにサービスに要求します。</target>
        </trans-unit>
        <trans-unit id="9e36ec033ef8853bb7773e0524c7bcf886af13b5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;template&lt;/em&gt; presents a grid of hero name links.</source>
          <target state="translated">&lt;em&gt;テンプレートには、&lt;/em&gt;英雄の名前リンクのグリッドを提示しています。</target>
        </trans-unit>
        <trans-unit id="636d367710cec9d2d29ffff2f2fd03967c9e996d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;tick()&lt;/em&gt; function</source>
          <target state="translated">&lt;em&gt;ダニ（）&lt;/em&gt;関数</target>
        </trans-unit>
        <trans-unit id="b73b5928bad05d3f6f07eeb7ee4604ca9d2c626e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Alter Ego&lt;/strong&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control element does not because &lt;code&gt;alterEgo&lt;/code&gt; is optional.</source>
          <target state="translated">&lt;code&gt;alterEgo&lt;/code&gt; はオプションであるため、&lt;strong&gt;Alter Ego &lt;/strong&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 制御要素はそうではありません。</target>
        </trans-unit>
        <trans-unit id="8d3bb42799c52e0ebb6f8e858f4a96af7a8b97fc" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Hero Power&lt;/strong&gt; select box is also required, but it doesn't need this kind of error handling because the selection box already constrains the selection to valid values.</source>
          <target state="translated">&lt;strong&gt;ヒーローパワー&lt;/strong&gt;ボックスをオンにしても必要とされますが、選択ボックスはすでに有効な値に選択を制約するためには、エラー処理のこの種を必要としません。</target>
        </trans-unit>
        <trans-unit id="4cbd7a46bb1ee20b0c8f13141e85002a327111af" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Main Concepts&lt;/strong&gt; section located in the table of contents contains several topics that explain how to connect the application data in your &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt; to your page-display &lt;a href=&quot;glossary#template&quot;&gt;templates&lt;/a&gt;, to create a complete interactive application.</source>
          <target state="translated">目次にある「&lt;strong&gt;メインコンセプト」&lt;/strong&gt;セクションには、&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;内のアプリケーションデータをページ表示&lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;に接続して完全なインタラクティブアプリケーションを作成する方法を説明するいくつかのトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="7175187c085f67353fe16a56cd79779c6b4d91da" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Name&lt;/strong&gt; input box is required and clearing it turns the bar red. That indicates that something is wrong, but the user doesn't know what is wrong or what to do about it. You can provide a helpful message by checking for and responding to the control's state.</source>
          <target state="translated">&lt;strong&gt;名前の&lt;/strong&gt;入力ボックスが必要で、それはバーが赤色に変わりクリアされます。これは、何かが間違っていることを示していますが、ユーザーは何が間違っているのか、それに対して何をすべきかを知りません。コントロールの状態を確認して応答することで、役立つメッセージを提供できます。</target>
        </trans-unit>
        <trans-unit id="cdbf6656d06da974b0c76f21411092c5e5610d43" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Name&lt;/strong&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control element has the HTML5 &lt;code&gt;required&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;strong&gt;名前&lt;/strong&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 制御要素は、HTML5持つ &lt;code&gt;required&lt;/code&gt; 属性を。</target>
        </trans-unit>
        <trans-unit id="38fe5f3ec6af8a496ebd01cf5cb597e571669f94" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;QuickStart seed&lt;/strong&gt; provides a basic QuickStart playground application and other files necessary for local development. Consequently, there are many files in the project folder on your machine, most of which you can &lt;a href=&quot;file-structure&quot;&gt;learn about later&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;クイックスタート種子は、&lt;/strong&gt;地域開発のために必要な基本的なクイックスタート遊び場アプリケーションや他のファイルを提供します。その結果、マシンのプロジェクトフォルダーには多くのファイルがあり、そのほとんどは&lt;a href=&quot;file-structure&quot;&gt;後で学ぶ&lt;/a&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="fb3aa4e6ae7ad082bbd31bada71f42f06ba8bb67" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Routing Module&lt;/strong&gt; has several characteristics:</source>
          <target state="translated">&lt;strong&gt;ルーティングモジュールは&lt;/strong&gt;、いくつかの特徴があります。</target>
        </trans-unit>
        <trans-unit id="849d1c8e18bd79ab64d5f8f2f782ae35aec1f5e0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Submit&lt;/strong&gt; button has some classes on it for styling. At this point, the form layout is all plain HTML5, with no bindings or directives.</source>
          <target state="translated">[&lt;strong&gt;送信&lt;/strong&gt;]ボタンには、スタイリング用のクラスがいくつかあります。この時点で、フォームのレイアウトはすべてプレーンなHTML5であり、バインディングやディレクティブはありません。</target>
        </trans-unit>
        <trans-unit id="8431cda422e11c057566eff6e247db10156e3002" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Submit&lt;/strong&gt; button is disabled because &lt;code&gt;profileForm&lt;/code&gt; is invalid due to the required &lt;code&gt;firstName&lt;/code&gt; form control. After you fill out the &lt;code&gt;firstName&lt;/code&gt; input, the form becomes valid and the &lt;strong&gt;Submit&lt;/strong&gt; button is enabled.</source>
          <target state="translated">必要な &lt;code&gt;firstName&lt;/code&gt; フォームコントロールが原因で &lt;code&gt;profileForm&lt;/code&gt; が無効であるため、[ &lt;strong&gt;送信&lt;/strong&gt; ]ボタンは無効になっています。あなたが記入した後 &lt;code&gt;firstName&lt;/code&gt; 入力を、フォームが有効となり、&lt;strong&gt;送信&lt;/strong&gt;ボタンが有効になっています。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fef189672083b94d3b83bc834df0b31d7afc9bf" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;empty path&lt;/strong&gt; in the fourth route represents the default path for the application, the place to go when the path in the URL is empty, as it typically is at the start. This default route redirects to the route for the &lt;code&gt;/heroes&lt;/code&gt; URL and, therefore, will display the &lt;code&gt;HeroesListComponent&lt;/code&gt;.</source>
          <target state="translated">4番目のルートの&lt;strong&gt;空のパス&lt;/strong&gt;は、アプリケーションのデフォルトパスを表します。これは、URLのパスが空である場合に行く場所です。このデフォルトルートは &lt;code&gt;/heroes&lt;/code&gt; URLのルートにリダイレクトするため、 &lt;code&gt;HeroesListComponent&lt;/code&gt; が表示されます。</target>
        </trans-unit>
        <trans-unit id="6a7f6d0dd6a950a502cb905ddc90e2fe09d4e93d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;target of a data-binding&lt;/strong&gt; is something in the DOM. Depending on the binding type, the target can be a property (element, component, or directive), an event (element, component, or directive), or sometimes an attribute name. The following table summarizes the targets for the different binding types.</source>
          <target state="translated">&lt;strong&gt;データバインディング&lt;/strong&gt;の&lt;strong&gt;ターゲットは&lt;/strong&gt; DOM内のものです。バインディングの種類に応じて、ターゲットはプロパティ（要素、コンポーネント、またはディレクティブ）、イベント（要素、コンポーネント、またはディレクティブ）、または属性名になります。次の表は、さまざまなバインディングタイプのターゲットをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="8a78166f7358622c21dbee58ca508e7e826a4e7b" translate="yes" xml:space="preserve">
          <source>The AOT collector does not support the arrow function, &lt;code&gt;() =&amp;gt; new Server()&lt;/code&gt;, in a metadata expression. It generates an error node in place of the function. When the compiler later interprets this node, it reports an error that invites you to turn the arrow function into an &lt;em&gt;exported function&lt;/em&gt;.</source>
          <target state="translated">AOTコレクターは、メタデータ式での矢印関数 &lt;code&gt;() =&amp;gt; new Server()&lt;/code&gt; サポートしていません。関数の代わりにエラーノードを生成します。コンパイラが後でこのノードを解釈すると、矢印関数を&lt;em&gt;エクスポート関数に&lt;/em&gt;変換するように促すエラーが報告&lt;em&gt;されます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4ec06e91967a3490f909670fcf275c0084d8ae3a" translate="yes" xml:space="preserve">
          <source>The AOT collector only understands a subset of JavaScript. Define metadata objects with the following limited syntax:</source>
          <target state="translated">AOT コレクターは JavaScript のサブセットしか理解できません。以下の限定された構文でメタデータオブジェクトを定義します。</target>
        </trans-unit>
        <trans-unit id="3309ff63faf07832967b0387fa813ffae5dc2636" translate="yes" xml:space="preserve">
          <source>The AOT compiler does not support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;function expressions&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, also called &lt;em&gt;lambda&lt;/em&gt; functions.</source>
          <target state="translated">AOTコンパイラは、&lt;em&gt;ラムダ&lt;/em&gt;関数とも呼ばれる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;関数式&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;矢印関数を&lt;/a&gt;サポートしていません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57076a87d98a096e595ee9049523e81bc3fea517" translate="yes" xml:space="preserve">
          <source>The AOT compiler does not support tagged template expressions; avoid them in metadata expressions.</source>
          <target state="translated">AOT コンパイラはタグ付きテンプレート式をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="17ec447b5468a57a4699fa18102b133cb26f2424" translate="yes" xml:space="preserve">
          <source>The Ahead-of-Time (AOT) compiler</source>
          <target state="translated">アヘッドオブタイム(AOT)コンパイラ</target>
        </trans-unit>
        <trans-unit id="0f58944803c6d64ef57d8af160113fc77e4a3dba" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;../api/router/routermodule&quot;&gt;&lt;code&gt;RouterModule&lt;/code&gt;&lt;/a&gt; exports two macro static methods, &lt;code&gt;forRoot&lt;/code&gt; and &lt;code&gt;forChild&lt;/code&gt;, to help declare root and child routes. Review the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/router/src/router_module.ts#L139&quot;&gt;source code&lt;/a&gt; for these methods to see how macros can simplify configuration of complex &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;../api/router/routermodule&quot;&gt; &lt;code&gt;RouterModule&lt;/code&gt; &lt;/a&gt;は、ルートと子ルートの宣言に役立つ2つのマクロ静的メソッド &lt;code&gt;forRoot&lt;/code&gt; および &lt;code&gt;forChild&lt;/code&gt; をエクスポートします。確認し&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/router/src/router_module.ts#L139&quot;&gt;、ソースコード&lt;/a&gt;マクロは、複合体の構成を簡素化することができる方法を確認するためにこれらのメソッドのために&lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47e66a7447f54311fa8c78fef83d2b71c3f6c662" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;../guide/attribute-binding#class-binding&quot;&gt;class binding&lt;/a&gt; makes it easy to add and remove a CSS class conditionally. Just add &lt;code&gt;[class.some-css-class]=&quot;some-condition&quot;&lt;/code&gt; to the element you want to style.</source>
          <target state="translated">Angular&lt;a href=&quot;../guide/attribute-binding#class-binding&quot;&gt;クラスバインディング&lt;/a&gt;を使用すると、CSSクラスを条件付きで簡単に追加および削除できます。スタイルを設定する要素に &lt;code&gt;[class.some-css-class]=&quot;some-condition&quot;&lt;/code&gt; を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="f3fb711c3b5e5fe0d0ccfb358c3cf8ff1a218dcc" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;../guide/template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt; makes it easy to add and remove a CSS class conditionally. Just add &lt;code&gt;[class.some-css-class]=&quot;some-condition&quot;&lt;/code&gt; to the element you want to style.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/template-syntax#class-binding&quot;&gt;クラスバインディング&lt;/a&gt;を使用すると、CSSクラスを条件付きで簡単に追加および削除できます。スタイルを設定する要素に &lt;code&gt;[class.some-css-class]=&quot;some-condition&quot;&lt;/code&gt; を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="b7237af6c841a21a08e75ad225a0026b3080167a" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;glossary#aot&quot;&gt;ahead-of-time (AOT) compiler&lt;/a&gt; converts your Angular HTML and TypeScript code into efficient JavaScript code during the build phase &lt;em&gt;before&lt;/em&gt; the browser downloads and runs that code. Compiling your application during the build process provides a faster rendering in the browser.</source>
          <target state="translated">Angular&lt;a href=&quot;glossary#aot&quot;&gt;事前（AOT）コンパイラー&lt;/a&gt;は、ブラウザーがそのコードをダウンロードして実行する&lt;em&gt;前&lt;/em&gt;のビルドフェーズで、AngularHTMLおよびTypeScriptコードを効率的なJavaScriptコードに変換します。ビルドプロセス中にアプリケーションをコンパイルすると、ブラウザーでのレンダリングが高速になります。</target>
        </trans-unit>
        <trans-unit id="7bd53a5dd11dba31d91be2abd7e3256203b19030" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is a grouping element that doesn't interfere with styles or layout because Angular &lt;em&gt;doesn't put it in the DOM&lt;/em&gt;.</source>
          <target state="translated">Angular &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; は、Angular &lt;em&gt;がDOMに&lt;/em&gt;配置&lt;em&gt;しない&lt;/em&gt;ため、スタイルやレイアウトを妨げないグループ化要素です。</target>
        </trans-unit>
        <trans-unit id="43bb5eb6f6a28633f87170e07fbe299b89367463" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; is an interesting example of an impure pipe. The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; accepts a &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;Observable&lt;/code&gt; as input and subscribes to the input automatically, eventually returning the emitted values.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; は、不純なパイプの興味深い例です。 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; は受け入れ &lt;code&gt;Promise&lt;/code&gt; または &lt;code&gt;Observable&lt;/code&gt; 最終的に放出された値を返す、自動的に入力に入力され、サブスクライブできます。</target>
        </trans-unit>
        <trans-unit id="044b107dfed7b9441c1745738d1ce4219937db11" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; pipe is similar although some of the parameters have changed.</source>
          <target state="translated">一部のパラメーターが変更されていますが、Angular &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; パイプも同様です。</target>
        </trans-unit>
        <trans-unit id="19b4e117f4e15eeed3be79f6eaca89eed51b2798" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; pipe is similar.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; パイプも同様です。</target>
        </trans-unit>
        <trans-unit id="3cd4a1df1710a1e282cc8be9a6f7e030631d0b5f" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;number&lt;/a&gt;&lt;/code&gt; pipe is similar. It provides more functionality when defining the decimal places, as shown in the second example above.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;number&lt;/a&gt;&lt;/code&gt; パイプも同様です。上記の2番目の例に示すように、小数点以下の桁数を定義するときに、より多くの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="7470cb8ba9aa4391c200e394d5eb3fd0ffc1a6a6" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; pipe does the same thing.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; パイプも同じことを行います。</target>
        </trans-unit>
        <trans-unit id="bfc3526882f1ce975b1c02e954b284474cb59122" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;lowercase&lt;/a&gt;&lt;/code&gt; pipe does the same thing.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;lowercase&lt;/a&gt;&lt;/code&gt; パイプは同じことをします。</target>
        </trans-unit>
        <trans-unit id="810425749aeb3185f4b3f49e48b3f7db25fa3041" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive inserts or removes an element based on a &lt;em&gt;truthy/falsy&lt;/em&gt; condition. To see it in action, add the following paragraph at the bottom of the template:</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ディレクティブは、&lt;em&gt;真/偽の&lt;/em&gt;条件に基づいて要素を挿入または削除します。動作を確認するには、テンプレートの下部に次の段落を追加します。</target>
        </trans-unit>
        <trans-unit id="bd5e639cdef0d9e6854735f421c2b0e44dd5b4a1" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; function creates an &lt;em&gt;indirect&lt;/em&gt; reference that Angular can resolve later.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; 関数は、Angularが後で解決できる&lt;em&gt;間接&lt;/em&gt;参照を作成します。</target>
        </trans-unit>
        <trans-unit id="2497b896b7688ae48300df106650c098f5fdf738" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; facilitates this kind of testing as you'll see in the sections below. But in many cases, &lt;em&gt;testing the component class alone&lt;/em&gt;, without DOM involvement, can validate much of the component's behavior in an easier, more obvious way.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; は、以下のセクションで説明するように、この種のテストを容易にします。ただし、多くの場合、DOMを使用せずに&lt;em&gt;コンポーネントクラスのみをテストする&lt;/em&gt;と、コンポーネントの動作の多くをより簡単で明確な方法で検証できます。</target>
        </trans-unit>
        <trans-unit id="875d83e7c9770ccfa8b1c529613a326325c96e1c" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; class has three static methods for common predicates:</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; クラスには、一般的な述語のための3つの静的メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="b679eb06adca30297563f49ac88eb9e497fa9839" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; (&quot;the router&quot;) borrows from this model. It can interpret a browser URL as an instruction to navigate to a client-generated view. It can pass optional parameters along to the supporting view component that help it decide what specific content to present. You can bind the router to links on a page and it will navigate to the appropriate application view when the user clicks a link. You can navigate imperatively when the user clicks a button, selects from a drop box, or in response to some other stimulus from any source. And the router logs activity in the browser's history journal so the back and forward buttons work as well.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; （ &quot;the router&quot;）はこのモデルから借りています。ブラウザのURLを、クライアントが生成したビューに移動するための命令として解釈できます。表示する特定のコンテンツを決定するのに役立つオプションのパラメーターをサポートするビューコンポーネントに渡すことができます。ルーターをページ上のリンクにバインドすると、ユーザーがリンクをクリックしたときに適切なアプリケーションビューに移動します。ユーザーがボタンをクリックしたとき、ドロップボックスから選択したとき、または任意のソースからの他の刺激に応答して、命令的にナビゲートできます。また、ルータはブラウザの履歴ジャーナルにアクティビティを記録するため、戻るボタンと進むボタンも機能します。</target>
        </trans-unit>
        <trans-unit id="bcb493c9e74833377850a9bc3a6c20403b7af18a" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModule provides a service that lets you define a navigation path among the different application states and view hierarchies in your app. It is modeled on the familiar browser navigation conventions:</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModuleは、さまざまなアプリケーションの状態間のナビゲーションパスを定義し、アプリの階層を表示できるサービスを提供します。おなじみのブラウザナビゲーション規則に基づいてモデル化されています。</target>
        </trans-unit>
        <trans-unit id="8b57ea74f53af589a0245e763366fd711bffc4ac" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; can raise &lt;em&gt;any data-bound event&lt;/em&gt; by its &lt;em&gt;event name&lt;/em&gt;. The second parameter is the event object passed to the handler.</source>
          <target state="translated">Angular &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; は、&lt;em&gt;イベント名&lt;/em&gt;によって&lt;em&gt;データバインドイベントを発生&lt;/em&gt;させることができます。2番目のパラメーターは、ハンドラーに渡されるイベントオブジェクトです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c3c8061180e2eb26c680deaa8488f18159bfd307" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;bootstrapModule&lt;/code&gt; method has a second &lt;code&gt;compilerOptions&lt;/code&gt; parameter that can influence the behavior of the compiler. You can use it to specify the translation providers:</source>
          <target state="translated">Angular &lt;code&gt;bootstrapModule&lt;/code&gt; メソッドには、 &lt;code&gt;compilerOptions&lt;/code&gt; の動作に影響を与える可能性のある2番目のcompilerOptionsパラメータがあります。これを使用して、翻訳プロバイダーを指定できます。</target>
        </trans-unit>
        <trans-unit id="bfa5f562ee24d3208771a463b736deb75b60079b" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;currency&lt;/code&gt; pipe is similar although some of the parameters have changed.</source>
          <target state="translated">Angular &lt;code&gt;currency&lt;/code&gt; Pipeも同様ですが、一部のパラメーターが変更されています。</target>
        </trans-unit>
        <trans-unit id="f62bb3c73f061003b3faf3aae067e7b55b5dafca" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;date&lt;/code&gt; pipe is similar.</source>
          <target state="translated">Angularの &lt;code&gt;date&lt;/code&gt; パイプも同様です。</target>
        </trans-unit>
        <trans-unit id="fcbe8e4317f36d2d4a4d3ef4bd8ffd65770ba540" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;i18n&lt;/code&gt; attribute marks translatable content. Place it on every element tag whose fixed text is to be translated.</source>
          <target state="translated">Angular &lt;code&gt;i18n&lt;/code&gt; 属性は、翻訳可能なコンテンツをマークします。固定テキストを翻訳するすべての要素タグに配置します。</target>
        </trans-unit>
        <trans-unit id="cdf01d2b5b0c515f0663f00d093f35293facf213" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;number&lt;/code&gt; pipe is similar. It provides more functionality when defining the decimal places, as shown in the second example above.</source>
          <target state="translated">角 &lt;code&gt;number&lt;/code&gt; パイプも同様です。上記の2番目の例に示すように、小数点以下の桁数を定義するときに、より多くの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="b99b3f86ef5c932dea53e89dd94423d13289d8bf" translate="yes" xml:space="preserve">
          <source>The Angular &lt;em&gt;NgSwitch&lt;/em&gt; is actually a set of cooperating directives: &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;em&gt;NgSwitch&lt;/em&gt;は、実際には &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; の一連の協調ディレクティブです。</target>
        </trans-unit>
        <trans-unit id="04175ded62d1fec12553cfb8f3f2c9d97972748f" translate="yes" xml:space="preserve">
          <source>The Angular &lt;em&gt;fixture&lt;/em&gt; provides the component's element directly through the &lt;code&gt;fixture.nativeElement&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;em&gt;フィクスチャ&lt;/em&gt;は、 &lt;code&gt;fixture.nativeElement&lt;/code&gt; を介してコンポーネントの要素を直接提供します。</target>
        </trans-unit>
        <trans-unit id="75a9f1c400fe3d6b4e3401b6477de45dccf239a7" translate="yes" xml:space="preserve">
          <source>The Angular &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; enables navigation from one &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt; to the next as users perform application tasks.</source>
          <target state="translated">Angular &lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;使用すると、ユーザーがアプリケーションタスクを実行するときに、&lt;a href=&quot;glossary#view&quot;&gt;ビュー間&lt;/a&gt;を移動できます。</target>
        </trans-unit>
        <trans-unit id="8e0346e973842ce7bf0908428389410a777108b7" translate="yes" xml:space="preserve">
          <source>The Angular AOT compiler extracts &lt;strong&gt;metadata&lt;/strong&gt; to interpret the parts of the application that Angular is supposed to manage. You can specify the metadata explicitly in &lt;strong&gt;decorators&lt;/strong&gt; such as &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, or implicitly in the constructor declarations of the decorated classes. The metadata tells Angular how to construct instances of your application classes and interact with them at runtime.</source>
          <target state="translated">Angular AOTコンパイラは、Angularが管理することになっているアプリケーションの部分を解釈するために&lt;strong&gt;メタデータ&lt;/strong&gt;を抽出します。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）や &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）などの&lt;strong&gt;デコレーターで&lt;/strong&gt;明示的に、またはデコレートされたクラスのコンストラクター宣言で暗黙的にメタデータを指定できます。メタデータは、アプリケーションクラスのインスタンスを構築し、実行時にそれらと対話する方法をAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="4b8a66ad73b412d255791431bd34d06ff172ffb0" translate="yes" xml:space="preserve">
          <source>The Angular Ahead-of-Time (AOT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code during the build phase &lt;em&gt;before&lt;/em&gt; the browser downloads and runs that code. Compiling your application during the build process provides a faster rendering in the browser.</source>
          <target state="translated">Angular Ahead-of-Time（AOT）コンパイラーは、ブラウザーがそのコードをダウンロードして実行する&lt;em&gt;前&lt;/em&gt;のビルドフェーズ中に、Angular HTMLおよびTypeScriptコードを効率的なJavaScriptコードに変換します。ビルドプロセス中にアプリケーションをコンパイルすると、ブラウザでのレンダリングが速くなります。</target>
        </trans-unit>
        <trans-unit id="a03f8200944a32e3f51a4b6988b1c544b8ca6333" translate="yes" xml:space="preserve">
          <source>The Angular CI process runs all end-to-end tests for every Angular PR. Angular re-tests the samples after every new version of a sample and every new version of Angular itself.</source>
          <target state="translated">Angular CIプロセスは、AngularのPRごとにすべてのエンドツーエンドテストを実行します。Angularは、サンプルの新バージョンが出るたびに、またAngular自体の新バージョンが出るたびに、サンプルを再テストします。</target>
        </trans-unit>
        <trans-unit id="fa5e030af9214f0f4cb5358ab971f2f3bbbe60cc" translate="yes" xml:space="preserve">
          <source>The Angular CLI &lt;code&gt;ng new&lt;/code&gt; command creates a workspace.</source>
          <target state="translated">Angular CLI &lt;code&gt;ng new&lt;/code&gt; コマンドは、ワークスペースを作成します。</target>
        </trans-unit>
        <trans-unit id="d07911428eda07c6d1e17ebfc74e10d6d40d3d5f" translate="yes" xml:space="preserve">
          <source>The Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; defines an empty &lt;code&gt;styles&lt;/code&gt; array when you create the component with the &lt;code&gt;--inline-style&lt;/code&gt; flag.</source>
          <target state="translated">Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;--inline-style&lt;/code&gt; フラグを使用してコンポーネントを作成するときに、空の &lt;code&gt;styles&lt;/code&gt; 配列を定義します。</target>
        </trans-unit>
        <trans-unit id="09643dead4d1c78b462efc30f8bde1402d517017" translate="yes" xml:space="preserve">
          <source>The Angular CLI command &lt;code&gt;ng deploy&lt;/code&gt; (introduced in version 8.3.0) executes the &lt;code&gt;deploy&lt;/code&gt;&lt;a href=&quot;cli-builder&quot;&gt;CLI builder&lt;/a&gt; associated with your project. A number of third-party builders implement deployment capabilities to different platforms. You can add any of them to your project by running &lt;code&gt;ng add [package name]&lt;/code&gt;.</source>
          <target state="translated">Angular CLIコマンド &lt;code&gt;ng deploy&lt;/code&gt; （バージョン8.3.0で導入）は、プロジェクトに関連付けられた &lt;code&gt;deploy&lt;/code&gt; &lt;a href=&quot;cli-builder&quot;&gt;CLIビルダーを&lt;/a&gt;実行します。多くのサードパーティビルダーが、さまざまなプラットフォームへの展開機能を実装しています。 &lt;code&gt;ng add [package name]&lt;/code&gt; 実行することで、プロジェクトにそれらを追加できます。</target>
        </trans-unit>
        <trans-unit id="a3d7512acefcea2947e134ca176993a0a2b9c106" translate="yes" xml:space="preserve">
          <source>The Angular CLI downloads and installs everything you need to test an Angular application with the &lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine test framework&lt;/a&gt;.</source>
          <target state="translated">Angular CLIは、&lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmineテストフレームワークで&lt;/a&gt; Angularアプリケーションをテストするために必要なすべてのものをダウンロードしてインストールします。</target>
        </trans-unit>
        <trans-unit id="268f17b44b8897aaaa4b843da9aee7dae34c98de" translate="yes" xml:space="preserve">
          <source>The Angular CLI generated an &lt;code&gt;AppModule&lt;/code&gt; class in &lt;code&gt;src/app/app.module.ts&lt;/code&gt; when it created the project. This is where you &lt;em&gt;opt-in&lt;/em&gt; to the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular CLIは、プロジェクトの作成時に &lt;code&gt;src/app/app.module.ts&lt;/code&gt; に &lt;code&gt;AppModule&lt;/code&gt; クラスを生成しました。あなたがここにある&lt;em&gt;オプトイン&lt;/em&gt;に &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="107493d097ae11fbcb314a2ed3716860a96fec1b" translate="yes" xml:space="preserve">
          <source>The Angular CLI handles differential loading for you as part of the &lt;em&gt;build&lt;/em&gt; process for deployment. The &lt;code&gt;ng build&lt;/code&gt; command produces the necessary bundles used for differential loading, based on your browser support requirements and compilation target.</source>
          <target state="translated">Angular CLIは、展開の&lt;em&gt;ビルド&lt;/em&gt;プロセスの一部として差分ロードを処理します。 &lt;code&gt;ng build&lt;/code&gt; コマンドは、お使いのブラウザのサポート要件とコンパイルターゲットに基づいて、差動ロードに使用に必要なバンドルを生成します。</target>
        </trans-unit>
        <trans-unit id="d5e857140d05ef6844404b8615a66b9f4c44b396" translate="yes" xml:space="preserve">
          <source>The Angular CLI includes a server, so that you can build and serve your app locally.</source>
          <target state="translated">Angular CLIにはサーバーが含まれているので、ローカルにアプリを構築してサービスを提供することができます。</target>
        </trans-unit>
        <trans-unit id="6cfbfae03eb19b3ecdbf1adb80b15d014200eb71" translate="yes" xml:space="preserve">
          <source>The Angular CLI includes a server, so that you can easily build and serve your app locally.</source>
          <target state="translated">Angular CLIにはサーバーが含まれているので、簡単にアプリを構築してローカルでサービスを提供することができます。</target>
        </trans-unit>
        <trans-unit id="99240af0e017c305ac2fe38f1420a6c01c217331" translate="yes" xml:space="preserve">
          <source>The Angular CLI installs the necessary Angular &lt;code&gt;npm&lt;/code&gt; packages and other dependencies. This can take a few minutes.</source>
          <target state="translated">Angular CLIは、必要なAngular &lt;code&gt;npm&lt;/code&gt; パッケージとその他の依存関係をインストールします。これには数分かかる場合があります。</target>
        </trans-unit>
        <trans-unit id="44dd54dfc8964065cd90136f8e3b10b3cf1a4390" translate="yes" xml:space="preserve">
          <source>The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes.</source>
          <target state="translated">Angular CLIは必要なAngular npmパッケージやその他の依存関係をインストールします。これには数分かかります。</target>
        </trans-unit>
        <trans-unit id="bf80b618388fecbd79473fee682b4084f17bfeb0" translate="yes" xml:space="preserve">
          <source>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.</source>
          <target state="translated">Angular CLIは、コマンドシェルから直接Angularアプリケーションの初期化、開発、足場固め、保守を行うためのコマンドラインインターフェイスツールです。</target>
        </trans-unit>
        <trans-unit id="e3450aeb1031f9a687d8114c58a874fc5f5cc28c" translate="yes" xml:space="preserve">
          <source>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications. You can use the tool directly in a command shell, or indirectly through an interactive UI such as &lt;a href=&quot;https://angularconsole.com&quot;&gt;Angular Console&lt;/a&gt;.</source>
          <target state="translated">Angular CLIは、Angularアプリケーションの初期化、開発、足場、および保守に使用するコマンドラインインターフェイスツールです。このツールは、コマンドシェルで直接使用することも、&lt;a href=&quot;https://angularconsole.com&quot;&gt;Angular Console&lt;/a&gt;などのインタラクティブなUIを介して間接的に使用することもできます。</target>
        </trans-unit>
        <trans-unit id="fae14f5aaf5497739ab1d6d16c0fd5b468b3e46c" translate="yes" xml:space="preserve">
          <source>The Angular CLI outputs warnings if it detects that your browser application depends on CommonJS modules. To disable these warnings, you can add the CommonJS module name to &lt;code&gt;allowedCommonJsDependencies&lt;/code&gt; option in the &lt;code&gt;build&lt;/code&gt; options located in &lt;code&gt;angular.json&lt;/code&gt; file.</source>
          <target state="translated">Angular CLIは、ブラウザーアプリケーションがCommonJSモジュールに依存していることを検出すると、警告を出力します。これらの警告を無効にするには、にCommonJSモジュール名を追加することができます &lt;code&gt;allowedCommonJsDependencies&lt;/code&gt; の中にオプション &lt;code&gt;build&lt;/code&gt; にあるオプション &lt;code&gt;angular.json&lt;/code&gt; ファイル。</target>
        </trans-unit>
        <trans-unit id="5197f50b0a17f7cf0952ce4e36557b69ebf6c2a8" translate="yes" xml:space="preserve">
          <source>The Angular CLI performs this step automatically. The CLI also sets up a &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array for your routes and configures the &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; arrays for &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">AngularCLIはこのステップを自動的に実行します。CLIは、 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列も設定し、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;（）の &lt;code&gt;imports&lt;/code&gt; および &lt;code&gt;exports&lt;/code&gt; 配列を構成します。</target>
        </trans-unit>
        <trans-unit id="755a2a64b5f04e3ccbf78d316586e03c34b19fb0" translate="yes" xml:space="preserve">
          <source>The Angular CLI performs this step for you. However, if you are creating an app manually or working with an existing, non-CLI app, verify that the imports and configuration are correct. The following is the default &lt;code&gt;AppModule&lt;/code&gt; using the CLI with the &lt;code&gt;--routing&lt;/code&gt; flag.</source>
          <target state="translated">AngularCLIがこのステップを実行します。ただし、アプリを手動で作成する場合、または既存の非CLIアプリで作業する場合は、インポートと構成が正しいことを確認してください。以下は、 &lt;code&gt;--routing&lt;/code&gt; フラグを &lt;code&gt;AppModule&lt;/code&gt; してCLIを使用するデフォルトのAppModuleです。</target>
        </trans-unit>
        <trans-unit id="af511e0852aa578eafccf55c3ef084749c706727" translate="yes" xml:space="preserve">
          <source>The Angular CLI tools.</source>
          <target state="translated">Angular CLIツールです。</target>
        </trans-unit>
        <trans-unit id="e7315acf64ffba967535cd146e3b147b69209359" translate="yes" xml:space="preserve">
          <source>The Angular CLI uses two configurations for differential loading:</source>
          <target state="translated">Angular CLIでは、差分ロードのために2つの設定を使用しています。</target>
        </trans-unit>
        <trans-unit id="0b647147cda79b8b71174240ba657c01cc0282ef" translate="yes" xml:space="preserve">
          <source>The Angular Framework, Angular CLI, and components used by Angular applications are packaged as &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm packages&lt;/a&gt; and distributed via the &lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm registry&lt;/a&gt;.</source>
          <target state="translated">Angular Framework、Angular CLI、およびAngularアプリケーションで使用されるコンポーネントは、&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npmパッケージ&lt;/a&gt;としてパッケージ化され、&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npmレジストリを&lt;/a&gt;介して配布されます。</target>
        </trans-unit>
        <trans-unit id="ac23c8d82634ad1235f0eec2bb7598c143df4b5f" translate="yes" xml:space="preserve">
          <source>The Angular Injector *</source>
          <target state="translated">アンギュラーインジェクタ</target>
        </trans-unit>
        <trans-unit id="18be8272f01590e93bfcd42d6f4136d2716d2a98" translate="yes" xml:space="preserve">
          <source>The Angular Language Service can forewarn you of mistakes in your code. In this example, Angular doesn't know what &lt;code&gt;orders&lt;/code&gt; is or where it comes from.</source>
          <target state="translated">Angular Language Serviceは、コードの誤りを事前に知らせます。この例では、Angularは &lt;code&gt;orders&lt;/code&gt; が何であるか、またはそれがどこから来たかを知りません。</target>
        </trans-unit>
        <trans-unit id="6596c329e39ca54d0c7f8e5df88c15b4e19b0aaf" translate="yes" xml:space="preserve">
          <source>The Angular Language Service provides code editors with a way to get completions, errors, hints, and navigation inside Angular templates. It works with external templates in separate HTML files, and also with in-line templates.</source>
          <target state="translated">Angular Language ServiceはコードエディタにAngularテンプレート内の補完、エラー、ヒント、ナビゲーションを取得する方法を提供します。別々のHTMLファイル内の外部テンプレートやインラインテンプレートでも動作します。</target>
        </trans-unit>
        <trans-unit id="3e67a34f16363de23bed96136c061107da748ea8" translate="yes" xml:space="preserve">
          <source>The Angular Router is an optional service that presents a particular component view for a given URL. It is not part of the Angular core and thus is in its own library package, &lt;code&gt;@angular/router&lt;/code&gt;.</source>
          <target state="translated">Angular Routerは、特定のURLの特定のコンポーネントビューを表示するオプションのサービスです。これはAngularコアの一部ではないため、独自のライブラリパッケージ &lt;code&gt;@angular/router&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd1cdcf22210d9763bd0c78281e3611dadc0f91d" translate="yes" xml:space="preserve">
          <source>The Angular Router is an optional service that presents a particular component view for a given URL. It is not part of the Angular core. It is in its own library package, &lt;code&gt;@angular/router&lt;/code&gt;. Import what you need from it as you would from any other Angular package.</source>
          <target state="translated">Angularルーターは、特定のURLの特定のコンポーネントビューを表示するオプションのサービスです。Angularコアの一部ではありません。独自のライブラリパッケージ &lt;code&gt;@angular/router&lt;/code&gt; 。他のAngularパッケージからインポートする場合と同様に、必要なものをインポートします。</target>
        </trans-unit>
        <trans-unit id="9eb08a795c65471995e5535981ebfa362dda2718" translate="yes" xml:space="preserve">
          <source>The Angular Update Guide provides customized update instructions, based on the current and target versions that you specify. It includes basic and advanced update paths, to match the complexity of your applications. It also includes troubleshooting information and any recommended manual changes to help you get the most out of the new release.</source>
          <target state="translated">Angularアップデートガイドでは、指定した現在のバージョンとターゲットバージョンに基づいて、カスタマイズされたアップデート方法を提供します。アプリケーションの複雑さに合わせて、基本的なアップデートパスと高度なアップデートパスが含まれています。また、新しいリリースを最大限に活用するためのトラブルシューティング情報や推奨されるマニュアルの変更も含まれています。</target>
        </trans-unit>
        <trans-unit id="b661c9f690153924a7c2703de890f3bc79be1136" translate="yes" xml:space="preserve">
          <source>The Angular ahead-of-time (AOT) compiler converts Angular HTML and TypeScript code into efficient JavaScript code during the build phase, before the browser downloads and runs that code. This is the best compilation mode for production environments, with decreased load time and increased performance compared to &lt;a href=&quot;glossary#jit&quot;&gt;just-in-time (JIT) compilation&lt;/a&gt;.</source>
          <target state="translated">Angular事前時間（AOT）コンパイラーは、ブラウザーがそのコードをダウンロードして実行する前に、ビルドフェーズ中にAngular HTMLおよびTypeScriptコードを効率的なJavaScriptコードに変換します。これは、実稼働環境に最適なコンパイルモードであり、&lt;a href=&quot;glossary#jit&quot;&gt;ジャストインタイム（JIT）コンパイル&lt;/a&gt;と比較してロード時間が短縮され、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="20c9ec499f8aa2e01b35b329a7f155394dc66c5b" translate="yes" xml:space="preserve">
          <source>The Angular application manages what the user sees and can do, achieving this through the interaction of a component class instance (the &lt;em&gt;component&lt;/em&gt;) and its user-facing template.</source>
          <target state="translated">Angularアプリケーションは、ユーザーが見たり実行したりできることを管理し、コンポーネントクラスインスタンス（&lt;em&gt;コンポーネント&lt;/em&gt;）とそのユーザー向けテンプレートの相互作用を通じてこれを実現します。</target>
        </trans-unit>
        <trans-unit id="60a34b9c53677e6872367240f8da49f2a0c10121" translate="yes" xml:space="preserve">
          <source>The Angular build tools.</source>
          <target state="translated">Angularのビルドツールです。</target>
        </trans-unit>
        <trans-unit id="89876cc2d5b7c9baf7d2993913b0abae3dac5cd8" translate="yes" xml:space="preserve">
          <source>The Angular compiler converts the application code you write into highly performant JavaScript code. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata plays an important role in guiding the compilation process.</source>
          <target state="translated">Angularコンパイラは、記述したアプリケーションコードを高性能のJavaScriptコードに変換します。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータは、コンパイルプロセスを導く上で重要な役割を果たしています。</target>
        </trans-unit>
        <trans-unit id="0307d0ec8fe91a6388457b087bee98707153506e" translate="yes" xml:space="preserve">
          <source>The Angular compiler creates the &lt;code&gt;BannerComponentStub&lt;/code&gt; for the &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; element and applies the &lt;code&gt;RouterLinkStubDirective&lt;/code&gt; to the anchors with the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute, but it ignores the &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">角度コンパイラが作成されます &lt;code&gt;BannerComponentStub&lt;/code&gt; のための &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; 要素を適用すると &lt;code&gt;RouterLinkStubDirective&lt;/code&gt; を持つアンカーに &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; の属性が、それは無視します &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; タグ。</target>
        </trans-unit>
        <trans-unit id="f2099e1bb42f72af03878b03cb23d738d02f0370" translate="yes" xml:space="preserve">
          <source>The Angular compiler extracts the metadata &lt;em&gt;once&lt;/em&gt; and generates a &lt;em&gt;factory&lt;/em&gt; for &lt;code&gt;TypicalComponent&lt;/code&gt;. When it needs to create a &lt;code&gt;TypicalComponent&lt;/code&gt; instance, Angular calls the factory, which produces a new visual element, bound to a new instance of the component class with its injected dependency.</source>
          <target state="translated">Angularコンパイラーはメタデータを&lt;em&gt;1回&lt;/em&gt;抽出し、 &lt;code&gt;TypicalComponent&lt;/code&gt; の&lt;em&gt;ファクトリー&lt;/em&gt;を生成します。 &lt;code&gt;TypicalComponent&lt;/code&gt; インスタンスを作成する必要がある場合、Angularはファクトリを呼び出します。ファクトリは、注入された依存関係を持つコンポーネントクラスの新しいインスタンスにバインドされた新しいビジュアル要素を生成します。</target>
        </trans-unit>
        <trans-unit id="7f25ae265c05f2ca418855270245f3c2089c6ef1" translate="yes" xml:space="preserve">
          <source>The Angular compiler finds a component or directive in a template when it can match the &lt;em&gt;selector&lt;/em&gt; of that component or directive to some HTML in that template.</source>
          <target state="translated">Angularコンパイラーは、コンポーネントまたはディレクティブの&lt;em&gt;セレクター&lt;/em&gt;をテンプレート内の一部のHTMLに一致させることができる場合、テンプレート内のコンポーネントまたはディレクティブを見つけます。</target>
        </trans-unit>
        <trans-unit id="2ec324b0b04115ae909396e8d599ab544a424d3c" translate="yes" xml:space="preserve">
          <source>The Angular compiler reads the template markup, combines it with the corresponding component class code, and emits &lt;em&gt;component factories&lt;/em&gt;.</source>
          <target state="translated">Angularコンパイラーはテンプレートマークアップを読み取り、対応するコンポーネントクラスコードと組み合わせて、&lt;em&gt;コンポーネントファクトリーを出力し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f5ebc9e9914857b1641e25cdad9ec2fbf7a0b1b5" translate="yes" xml:space="preserve">
          <source>The Angular compiler, which is invoked by the Angular CLI's &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; commands.</source>
          <target state="translated">Angular CLIの &lt;code&gt;ng build&lt;/code&gt; コマンドと &lt;code&gt;ng serve&lt;/code&gt; コマンドによって呼び出されるAngularコンパイラー。</target>
        </trans-unit>
        <trans-unit id="ac9db4e8ab53e00307263bffc47d982c1e256eae" translate="yes" xml:space="preserve">
          <source>The Angular extraction tool (described in &lt;a href=&quot;i18n#ng-xi18n&quot;&gt;Work with translation files&lt;/a&gt; in this guide) generates a translation unit entry for each &lt;code&gt;i18n&lt;/code&gt; attribute in a template. It assigns each translation unit a unique ID based on the &lt;em&gt;meaning&lt;/em&gt; and &lt;em&gt;description&lt;/em&gt;.</source>
          <target state="translated">角度抽出ツール（このガイドの&lt;a href=&quot;i18n#ng-xi18n&quot;&gt;翻訳ファイルの操作&lt;/a&gt;で説明）は、テンプレート内の各 &lt;code&gt;i18n&lt;/code&gt; 属性の翻訳単位エントリを生成します。&lt;em&gt;意味&lt;/em&gt;と&lt;em&gt;説明に&lt;/em&gt;基づいて、各翻訳ユニットに一意のIDを割り当てます。</target>
        </trans-unit>
        <trans-unit id="cdc01358f63d4bea105e06d264c95e64af6796fa" translate="yes" xml:space="preserve">
          <source>The Angular extraction tool preserves both the meaning and the description in the translation source file to facilitate contextually-specific translations, but only the combination of meaning and text message are used to generate the specific id of a translation. If you have two similar text messages with different meanings, they are extracted separately. If you have two similar text messages with different descriptions (not different meanings), then they are extracted only once.</source>
          <target state="translated">Angularの抽出ツールは、文脈に合わせた翻訳を容易にするために、翻訳ソースファイル内の意味と説明の両方を保持しますが、意味とテキストメッセージの組み合わせだけが翻訳の特定のIDを生成するために使用されます。異なる意味を持つ2つの類似したテキストメッセージがある場合、それらは別々に抽出されます。異なる説明(異なる意味ではない)を持つ2つの類似したテキストメッセージを持っている場合、それらは一度だけ抽出されます。</target>
        </trans-unit>
        <trans-unit id="56065a39a7119008e9a39c78658ad09336f7d947" translate="yes" xml:space="preserve">
          <source>The Angular extractor generates a file with a translation unit entry for each &lt;code&gt;i18n&lt;/code&gt; attribute in a template. As described previously (in &lt;a href=&quot;i18n#transaction-unit-ids&quot;&gt;How meanings control text extraction and merging&lt;/a&gt;), Angular assigns each translation unit a unique ID such as the following:</source>
          <target state="translated">Angular Extractorは、テンプレート内の各 &lt;code&gt;i18n&lt;/code&gt; 属性の変換単位エントリを含むファイルを生成します。前に説明したように（&lt;a href=&quot;i18n#transaction-unit-ids&quot;&gt;意味がテキストの抽出とマージを制御&lt;/a&gt;する方法で）、Angularは各翻訳ユニットに次のような一意のIDを割り当てます。</target>
        </trans-unit>
        <trans-unit id="c7bed172ef3f576a631fea5fc78a1554b8751f9a" translate="yes" xml:space="preserve">
          <source>The Angular form discussed in this page takes advantage of the following framework features to provide support for data modification, validation, and more.</source>
          <target state="translated">このページで説明するAngularのフォームは、以下のフレームワークの機能を利用して、データの修正やバリデーションなどをサポートしています。</target>
        </trans-unit>
        <trans-unit id="9401af39b6d9558ec8f95390db5e947910915008" translate="yes" xml:space="preserve">
          <source>The Angular form discussed in this page takes advantage of the following framework features to provide support for data modification, validation, and more:</source>
          <target state="translated">このページで説明するAngularのフォームは、以下のフレームワークの機能を利用して、データの修正やバリデーションなどをサポートしています。</target>
        </trans-unit>
        <trans-unit id="cfa9faecdc950e49e0de1c849935984c499cc08c" translate="yes" xml:space="preserve">
          <source>The Angular framework itself is loaded as a set of JavaScript modules.</source>
          <target state="translated">Angularフレームワーク自体はJavaScriptモジュールのセットとして読み込まれます。</target>
        </trans-unit>
        <trans-unit id="b614d48db6c124a58526470dfe61af1ee15a7578" translate="yes" xml:space="preserve">
          <source>The Angular just-in-time (JIT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code at run time, as part of bootstrapping.</source>
          <target state="translated">Angular just-in-time (JIT)コンパイラは、ブートストラップの一環として、Angular HTML と TypeScript コードを実行時に効率的な JavaScript コードに変換します。</target>
        </trans-unit>
        <trans-unit id="105f93ad850589d58764ef97e15115bfd2d26310" translate="yes" xml:space="preserve">
          <source>The Angular microsyntax lets you configure a directive in a compact, friendly string. The microsyntax parser translates that string into attributes on the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">Angularマイクロ構文を使用すると、ディレクティブをコンパクトでわかりやすい文字列で構成できます。マイクロ構文パーサーは、その文字列を &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; の属性に変換します。</target>
        </trans-unit>
        <trans-unit id="9143f5ef451f8d1a9405683f722d57d62564c553" translate="yes" xml:space="preserve">
          <source>The Angular module is not instantiated until the app actually needs it.</source>
          <target state="translated">アプリが実際に必要とするまでAngularモジュールはインスタンス化されません。</target>
        </trans-unit>
        <trans-unit id="07693af4435d3ea992bcd5d6d76e1a0c64d51494" translate="yes" xml:space="preserve">
          <source>The Angular module will be bootstrapped once (when requested for the first time) and the same reference will be used from that point onwards.</source>
          <target state="translated">Angularモジュールは一度ブートストラップされ(初めてリクエストされたとき)、その時点から同じリファレンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="248192779b7cf444374f15b0f0bd950ae02e3662" translate="yes" xml:space="preserve">
          <source>The Angular non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, serves the same purpose in an Angular template. For example, after you use &lt;a href=&quot;template-syntax#ngIf&quot;&gt;*ngIf&lt;/a&gt; to check that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; is defined, you can assert that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; properties are also defined.</source>
          <target state="translated">Angular非nullアサーション演算子、 &lt;code&gt;!&lt;/code&gt; 、Angularテンプレートで同じ目的を果たします。たとえば、&lt;a href=&quot;template-syntax#ngIf&quot;&gt;* ngIf&lt;/a&gt;を使用して &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; が定義されていることを確認した後、 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; プロパティも定義されていることをアサートできます。</target>
        </trans-unit>
        <trans-unit id="f8ea8a72b52be7e9e55271d6843b9cb7e8a6bc13" translate="yes" xml:space="preserve">
          <source>The Angular non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, serves the same purpose in an Angular template. For example, you can assert that &lt;code&gt;item&lt;/code&gt; properties are also defined.</source>
          <target state="translated">Angularの非nullアサーション演算子 &lt;code&gt;!&lt;/code&gt; 、Angularテンプレートで同じ目的を果たします。たとえば、 &lt;code&gt;item&lt;/code&gt; プロパティも定義されていると主張できます。</target>
        </trans-unit>
        <trans-unit id="ed5cca36be0033131d61848f431beb9c0a775bfc" translate="yes" xml:space="preserve">
          <source>The Angular platform is the entry point for Angular on a web page. Each page has exactly one platform, and services (such as reflection) which are common to every Angular application running on the page are bound in its scope.</source>
          <target state="translated">Angularプラットフォームはウェブページ上でのAngularのエントリーポイントです。各ページには正確に1つのプラットフォームがあり、ページ上で実行されているすべてのAngularアプリケーションに共通するサービス(リフレクションなど)はそのスコープに縛られています。</target>
        </trans-unit>
        <trans-unit id="655e7b4bd5e668ad1b165b930308d201753125e9" translate="yes" xml:space="preserve">
          <source>The Angular platform is the entry point for Angular on a web page. Each page has exactly one platform. Services (such as reflection) which are common to every Angular application running on the page are bound in its scope. A page's platform is initialized implicitly when a platform is created using a platform factory such as &lt;code&gt;PlatformBrowser&lt;/code&gt;, or explicitly by calling the &lt;code&gt;&lt;a href=&quot;core/createplatform&quot;&gt;createPlatform&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Angularプラットフォームは、Webページ上のAngularのエントリポイントです。各ページには、プラットフォームが1つだけあります。ページ上で実行されているすべてのAngularアプリケーションに共通のサービス（リフレクションなど）は、そのスコープにバインドされています。ページのプラットフォームは、 &lt;code&gt;PlatformBrowser&lt;/code&gt; などのプラットフォームファクトリを使用してプラットフォームが作成されるときに暗黙的に初期化されるか、 &lt;code&gt;&lt;a href=&quot;core/createplatform&quot;&gt;createPlatform&lt;/a&gt;()&lt;/code&gt; 関数を呼び出すことによって明示的に初期化されます。</target>
        </trans-unit>
        <trans-unit id="2a946c6be79932ce3cd70c89889bd3ece84c512a" translate="yes" xml:space="preserve">
          <source>The Angular platform is the entry point for Angular on a web page. Each page has exactly one platform. Services (such as reflection) which are common to every Angular application running on the page are bound in its scope. A page's platform is initialized implicitly when a platform is created using a platform factory such as &lt;code&gt;PlatformBrowser&lt;/code&gt;, or explicitly by calling the &lt;code&gt;&lt;a href=&quot;createplatform&quot;&gt;createPlatform&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Angularプラットフォームは、Webページ上のAngularのエントリポイントです。各ページには、プラットフォームが1つだけあります。ページ上で実行されているすべてのAngularアプリケーションに共通のサービス（リフレクションなど）は、そのスコープにバインドされています。ページのプラットフォームは、 &lt;code&gt;PlatformBrowser&lt;/code&gt; などのプラットフォームファクトリを使用してプラットフォームが作成されるときに暗黙的に初期化されるか、 &lt;code&gt;&lt;a href=&quot;createplatform&quot;&gt;createPlatform&lt;/a&gt;()&lt;/code&gt; 関数を呼び出すことによって明示的に初期化されます。</target>
        </trans-unit>
        <trans-unit id="51e83b347ed63e4f22ca0037f663340cff3e1b26" translate="yes" xml:space="preserve">
          <source>The Angular router comes with high-level animation functions that let you animate the transitions between views when a route changes. To produce an animation sequence when switching between routes, you need to define nested animation sequences. Start with the top-level component that hosts the view, and nest additional animations in the components that host the embedded views.</source>
          <target state="translated">Angular ルーターには高レベルのアニメーション機能が搭載されており、ルートが切り替わったときにビュー間の遷移をアニメーション化することができます。ルート間の切り替え時にアニメーションシーケンスを生成するには、ネストしたアニメーションシーケンスを定義する必要があります。ビューをホストしているトップレベルのコンポーネントから始めて、埋め込まれたビューをホストしているコンポーネントに追加のアニメーションを入れ子にします。</target>
        </trans-unit>
        <trans-unit id="d9f0032b42360a33f96c2700f66e29a088d29c3e" translate="yes" xml:space="preserve">
          <source>The Angular router passes route parameters differently. Correct the &lt;code&gt;PhoneDetail&lt;/code&gt; component constructor to expect an injected &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; object. Extract the &lt;code&gt;phoneId&lt;/code&gt; from the &lt;code&gt;ActivatedRoute.snapshot.params&lt;/code&gt; and fetch the phone data as before:</source>
          <target state="translated">Angularルーターはルートパラメーターを別の方法で渡します。注入された &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; オブジェクトを &lt;code&gt;PhoneDetail&lt;/code&gt; するようにPhoneDetailコンポーネントコンストラクターを修正します。前と同じように、 &lt;code&gt;ActivatedRoute.snapshot.params&lt;/code&gt; から &lt;code&gt;phoneId&lt;/code&gt; を抽出し、電話データをフェッチします。</target>
        </trans-unit>
        <trans-unit id="c8b73d6430f433c7da9f2d92333b1bf0785c4de0" translate="yes" xml:space="preserve">
          <source>The Angular router service solves these problems. Using the router, you can declaratively specify application states, manage state transitions while taking care of the URL, and load bundles on demand.</source>
          <target state="translated">これらの問題を解決してくれるのがAngularのルーターサービスです。ルーターを使うことで、アプリケーションの状態を宣言的に指定したり、URLを気にしながら状態遷移を管理したり、オンデマンドでバンドルをロードしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="dab83935ff401e86ed6557ca14b267ff0f454743" translate="yes" xml:space="preserve">
          <source>The Angular safe navigation operator, &lt;code&gt;?&lt;/code&gt;, guards against &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; values in property paths. Here, it protects against a view render failure if &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Angularセーフナビゲーションオペレーター &lt;code&gt;?&lt;/code&gt; 、プロパティパスの &lt;code&gt;null&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; 値から保護します。ここでは、 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合にビューのレンダリングが失敗するのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="8ddc74c782a2050af4c53d84e52e93568c0f322b" translate="yes" xml:space="preserve">
          <source>The Angular safe navigation operator, &lt;code&gt;?&lt;/code&gt;, guards against &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; values in property paths. Here, it protects against a view render failure if &lt;code&gt;item&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Angularの安全なナビゲーションオペレーター、 &lt;code&gt;?&lt;/code&gt; 、プロパティパスの &lt;code&gt;null&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; 値から保護します。ここでは、 &lt;code&gt;item&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合にビューのレンダリングエラーから保護します。</target>
        </trans-unit>
        <trans-unit id="7fbe3e7ab9f2d469c6b7858e6a2fd9557c1f66e1" translate="yes" xml:space="preserve">
          <source>The Angular service worker can use either of two caching strategies for data resources.</source>
          <target state="translated">Angularのサービスワーカーは、データリソースに対して2つのキャッシング戦略のどちらかを使用することができます。</target>
        </trans-unit>
        <trans-unit id="628376db8f0ac4a5e89fdb142bdb959ca43ed0a2" translate="yes" xml:space="preserve">
          <source>The Angular service worker exposes debugging information under the &lt;code&gt;ngsw/&lt;/code&gt; virtual directory. Currently, the single exposed URL is &lt;code&gt;ngsw/&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;. Here is an example of this debug page's contents:</source>
          <target state="translated">Angular Service Workerは、 &lt;code&gt;ngsw/&lt;/code&gt; 仮想ディレクトリの下にデバッグ情報を公開します。現在、単一の公開URLは &lt;code&gt;ngsw/&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; です。このデバッグページのコンテンツの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="af4ec1fe2fee6a89e95ee555d45246e775d5740e" translate="yes" xml:space="preserve">
          <source>The Angular service worker is a small script that runs in web browsers. From time to time, the service worker will be updated with bug fixes and feature improvements.</source>
          <target state="translated">Angularのサービスワーカーは、Webブラウザで動作する小さなスクリプトです。時々、サービスワーカーはバグ修正や機能改善などで更新されます。</target>
        </trans-unit>
        <trans-unit id="d3546f707eceba9f99b7dc3c4e5c9394adc9a4c1" translate="yes" xml:space="preserve">
          <source>The Angular service worker is aware of which versions are in use at any given moment and it cleans up versions when no tab is using them.</source>
          <target state="translated">Angularのサービスワーカーはその時点でどのバージョンが使用されているかを認識し、タブが使用していないときにはバージョンをクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="f2a5f7d21ae9f877f32d7f98ed2d1d923e4614b3" translate="yes" xml:space="preserve">
          <source>The Angular service worker is downloaded when the app is first opened and when the app is accessed after a period of inactivity. If the service worker has changed, the service worker will be updated in the background.</source>
          <target state="translated">Angularのサービスワーカーは、アプリを最初に開いた時と、一定期間アプリが利用されていない状態の後にアクセスした時にダウンロードされます。サービスワーカーが変更された場合、サービスワーカーはバックグラウンドで更新されます。</target>
        </trans-unit>
        <trans-unit id="a252a8e893b6b6b8b10ee8c9b4f3cd02606c9d40" translate="yes" xml:space="preserve">
          <source>The Angular service worker provides a guarantee: a running app will continue to run the same version of the app. If another instance of the app is opened in a new web browser tab, then the most current version of the app is served. As a result, that new tab can be running a different version of the app than the original tab.</source>
          <target state="translated">Angularサービスワーカーは保証を提供します:実行中のアプリは同じバージョンのアプリを実行し続けます。アプリの別のインスタンスが新しいウェブブラウザタブで開かれた場合、アプリの最新バージョンが提供されます。その結果、新しいタブは元のタブとは異なるバージョンのアプリを実行している可能性があります。</target>
        </trans-unit>
        <trans-unit id="fe402d3476432010b35039b6b27c73a7e145e854" translate="yes" xml:space="preserve">
          <source>The Angular service worker's behavior follows that design goal:</source>
          <target state="translated">Angularのサービスワーカーの動作は、その設計目標に沿っています。</target>
        </trans-unit>
        <trans-unit id="35fb47a111d3bbf54cae3962bd6417ce1c2ad683" translate="yes" xml:space="preserve">
          <source>The Angular team and many experienced Angular developers strongly recommend moving filtering and sorting logic into the component itself. The component can expose a &lt;code&gt;filteredHeroes&lt;/code&gt; or &lt;code&gt;sortedHeroes&lt;/code&gt; property and take control over when and how often to execute the supporting logic. Any capabilities that you would have put in a pipe and shared across the app can be written in a filtering/sorting service and injected into the component.</source>
          <target state="translated">Angularチームと経験豊富なAngular開発者の多くは、フィルタリングとソートのロジックをコンポーネント自体に移動することを強くお勧めします。コンポーネントは、 &lt;code&gt;filteredHeroes&lt;/code&gt; プロパティまたは &lt;code&gt;sortedHeroes&lt;/code&gt; プロパティを公開し、サポートロジックを実行するタイミングと頻度を制御できます。パイプに入れてアプリ全体で共有する機能は、フィルタリング/並べ替えサービスに記述してコンポーネントに注入できます。</target>
        </trans-unit>
        <trans-unit id="afddc4c461f42ac8c8b97eba88b298533d0bfa2c" translate="yes" xml:space="preserve">
          <source>The Angular team has worked hard to ensure Ivy is as backwards-compatible with the previous rendering engine (&quot;View Engine&quot;) as possible. However, in rare cases, minor changes were necessary to ensure that the Angular's behavior was predictable and consistent, correcting issues in the View Engine implementation. In order to smooth the transition, we have provided automated migrations wherever possible so your application and library code is migrated automatically by the CLI. That said, some applications will likely need to apply some manual updates.</source>
          <target state="translated">Angularチームは、Ivyが以前のレンダリングエンジン(「View Engine」)と可能な限り後方互換性があるように努力してきました。しかしまれに、Angularの動作を予測可能で一貫性のあるものにするためにマイナーな変更が必要な場合があり、View Engineの実装における問題点を修正しました。移行をスムーズに行うために、可能な限り自動移行を提供し、アプリケーションやライブラリコードがCLIによって自動的に移行されるようにしました。ただし、一部のアプリケーションでは、手動で更新を適用する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="caca85786341f11cf0a7293e6415cac816f540c6" translate="yes" xml:space="preserve">
          <source>The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators for specific scenarios. The next sections cover three of these operators:</source>
          <target state="translated">Angularのテンプレート式言語はJavaScriptの構文のサブセットを使用しており、特定のシナリオのためにいくつかの特別な演算子を追加しています。次のセクションでは、これらの演算子のうちの3つについて説明します。</target>
        </trans-unit>
        <trans-unit id="cbe6f2f94a12a95461a34df7f7964259a25e067b" translate="yes" xml:space="preserve">
          <source>The Angular testing utilities include the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt;, and a handful of functions that control the test environment. The &lt;a href=&quot;testing#testbed-api-summary&quot;&gt;&lt;em&gt;TestBed&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;testing#component-fixture-api-summary&quot;&gt;&lt;em&gt;ComponentFixture&lt;/em&gt;&lt;/a&gt; classes are covered separately.</source>
          <target state="translated">Angularテストユーティリティには、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; 、およびテスト環境を制御するいくつかの関数が含まれています。&lt;a href=&quot;testing#testbed-api-summary&quot;&gt;&lt;em&gt;テストベッド&lt;/em&gt;&lt;/a&gt;と&lt;a href=&quot;testing#component-fixture-api-summary&quot;&gt;&lt;em&gt;ComponentFixture&lt;/em&gt;&lt;/a&gt;クラスが別々に覆われています。</target>
        </trans-unit>
        <trans-unit id="0f47a7ce39ae098185a294fd9d6afdc9374f5cc2" translate="yes" xml:space="preserve">
          <source>The Angular testing utilities include the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt;, and a handful of functions that control the test environment. The &lt;a href=&quot;testing-utility-apis#testbed-api-summary&quot;&gt;&lt;em&gt;TestBed&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;testing-utility-apis#component-fixture-api-summary&quot;&gt;&lt;em&gt;ComponentFixture&lt;/em&gt;&lt;/a&gt; classes are covered separately.</source>
          <target state="translated">Angularテストユーティリティには、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; 、およびテスト環境を制御するいくつかの関数が含まれています。&lt;a href=&quot;testing-utility-apis#testbed-api-summary&quot;&gt;&lt;em&gt;テストベッド&lt;/em&gt;&lt;/a&gt;と&lt;a href=&quot;testing-utility-apis#component-fixture-api-summary&quot;&gt;&lt;em&gt;ComponentFixture&lt;/em&gt;&lt;/a&gt;クラスが別々に覆われています。</target>
        </trans-unit>
        <trans-unit id="00e6647d8c4f5f646f29b66e47261762ef67b7c3" translate="yes" xml:space="preserve">
          <source>The Angular workspace where the user has installed your library contains multiple projects (applications and libraries). The user can specify the project on the command line, or allow it to default. In either case, your code needs to identify the specific project to which this schematic is being applied, so that you can retrieve information from the project configuration.</source>
          <target state="translated">ユーザーがライブラリをインストールしたAngularワークスペースには、複数のプロジェクト(アプリケーションやライブラリ)が含まれています。ユーザーはコマンドラインでプロジェクトを指定することも、デフォルトのプロジェクトを許可することもできます。いずれの場合も、プロジェクト設定から情報を取得できるように、この回路図が適用されている特定のプロジェクトをコードで特定する必要があります。</target>
        </trans-unit>
        <trans-unit id="37b60b160b483ff496036f979d0455b028438655" translate="yes" xml:space="preserve">
          <source>The AngularJS &lt;code&gt;$injector&lt;/code&gt; for the upgrade application.</source>
          <target state="translated">アップグレードアプリケーション用のAngularJS &lt;code&gt;$injector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d5315ae95f5757a73971de6b5edb7c0835d0995" translate="yes" xml:space="preserve">
          <source>The AngularJS &lt;code&gt;&lt;a href=&quot;upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; for the upgrade application.</source>
          <target state="translated">アップグレードアプリケーションのAngularJS &lt;code&gt;&lt;a href=&quot;upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="423653fbea2bc7af48c7bd9f46190694e996131f" translate="yes" xml:space="preserve">
          <source>The AngularJS directive had a &lt;code&gt;checkmark&lt;/code&gt;&lt;em&gt;filter&lt;/em&gt;. Turn that into an Angular &lt;strong&gt;pipe&lt;/strong&gt;.</source>
          <target state="translated">AngularJSディレクティブには &lt;code&gt;checkmark&lt;/code&gt; &lt;em&gt;フィルターがありました&lt;/em&gt;。それをAngular &lt;strong&gt;pipeに&lt;/strong&gt;変えます。</target>
        </trans-unit>
        <trans-unit id="af1fbf592b50c90c013c4592c8797fd707e0871b" translate="yes" xml:space="preserve">
          <source>The AngularJS injector has an AngularJS router dependency called &lt;code&gt;$routeParams&lt;/code&gt;, which was injected into &lt;code&gt;PhoneDetails&lt;/code&gt; when it was still an AngularJS controller. You intend to inject it into the new &lt;code&gt;PhoneDetailsComponent&lt;/code&gt;.</source>
          <target state="translated">AngularJSインジェクターには &lt;code&gt;$routeParams&lt;/code&gt; と呼ばれるAngularJSルーターの依存関係があり、それがまだAngularJSコントローラーであったときに &lt;code&gt;PhoneDetails&lt;/code&gt; に注入されました。これを新しい &lt;code&gt;PhoneDetailsComponent&lt;/code&gt; に注入するつもりです。</target>
        </trans-unit>
        <trans-unit id="5d426c6e68e95c3032932fd384898742c4cdf7d7" translate="yes" xml:space="preserve">
          <source>The AoT compiler does not support tagged template expressions; avoid them in metadata expressions.</source>
          <target state="translated">AoT コンパイラはタグ付きテンプレート式をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="319355695648b782b2ef8282fd1ba6b0fb5992ad" translate="yes" xml:space="preserve">
          <source>The Application Shell</source>
          <target state="translated">アプリケーションシェル</target>
        </trans-unit>
        <trans-unit id="07d707d654b9db1b392eb58df6d0436c1594d090" translate="yes" xml:space="preserve">
          <source>The Architect target to run.</source>
          <target state="translated">実行するアーキテクトターゲット。</target>
        </trans-unit>
        <trans-unit id="e4be9c76b0e4b71fda293faca97b9a6d8c0bdc15" translate="yes" xml:space="preserve">
          <source>The Architect tool provides a set of builders. The &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt; command&lt;/a&gt; provides a set of targets for the initial application project. The &lt;a href=&quot;cli/generate#application&quot;&gt;&lt;code&gt;ng generate application&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cli/generate#library&quot;&gt;&lt;code&gt;ng generate library&lt;/code&gt;&lt;/a&gt; commands provide a set of targets for each new &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;. These targets, their options and configurations, can be customized to meet the needs of your project. For example, you may want to add a &quot;staging&quot; or &quot;testing&quot; configuration to a project's &quot;build&quot; target.</source>
          <target state="translated">Architectツールは、一連のビルダーを提供します。&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; コマンドは、&lt;/a&gt;アプリケーションの初期プロジェクトのターゲットのセットを提供します。&lt;a href=&quot;cli/generate#application&quot;&gt; &lt;code&gt;ng generate application&lt;/code&gt; &lt;/a&gt;し、&lt;a href=&quot;cli/generate#library&quot;&gt; &lt;code&gt;ng generate library&lt;/code&gt; &lt;/a&gt;コマンドがそれぞれの新しいのためのターゲットのセットを提供&lt;a href=&quot;glossary#project&quot;&gt;プロジェクトを&lt;/a&gt;。これらのターゲット、それらのオプションと構成は、プロジェクトのニーズに合わせてカスタマイズできます。たとえば、プロジェクトの「ビルド」ターゲットに「ステージング」または「テスト」構成を追加することができます。</target>
        </trans-unit>
        <trans-unit id="98622091c7e082d28fb1d1aee12f2d15a684fd7e" translate="yes" xml:space="preserve">
          <source>The Async pipe saves boilerplate in the component code. The component doesn't have to subscribe to the async data source, extract the resolved values and expose them for binding, and have to unsubscribe when it's destroyed (a potent source of memory leaks).</source>
          <target state="translated">Asyncパイプは、コンポーネントコードのボイラプレートを節約します。コンポーネントは、非同期データソースをサブスクライブしたり、解決された値を抽出してバインディングのために公開したり、破棄されたときにサブスクライブを解除したりする必要がありません (メモリリークの原因となります)。</target>
        </trans-unit>
        <trans-unit id="a093f7952b1838c4dd6aeda28ea5e1fc38030960" translate="yes" xml:space="preserve">
          <source>The Basics</source>
          <target state="translated">基本的なこと</target>
        </trans-unit>
        <trans-unit id="d038565a16aac226bd4ac01c0d0edf10f676271a" translate="yes" xml:space="preserve">
          <source>The Boolean expression to evaluate as the condition for showing a template.</source>
          <target state="translated">テンプレートを表示する条件として評価するブール式。</target>
        </trans-unit>
        <trans-unit id="b00950b6c88ca36515aea3fda70a4337ec7e16d4" translate="yes" xml:space="preserve">
          <source>The Browserslist configuration allows you to ignore browsers without ES2015 support. In this case, a single build is produced.</source>
          <target state="translated">Browserslistの設定では、ES2015に対応していないブラウザを無視することができます。この場合、単一のビルドが生成されます。</target>
        </trans-unit>
        <trans-unit id="d7567b31beb9558ff7dba046ce91751f2b441018" translate="yes" xml:space="preserve">
          <source>The Browserslist configuration file is included in your application &lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;project structure&lt;/a&gt; and provides the minimum browsers your application supports. See the &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist spec&lt;/a&gt; for complete configuration options.</source>
          <target state="translated">Browserslist構成ファイルは、アプリケーション&lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;プロジェクト構造に&lt;/a&gt;含まれており、アプリケーションがサポートする最小限のブラウザーを提供します。完全な構成オプションについては、&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslistの仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a8e793e92efbd3bfda3b03dee3bd1b71b6e869ea" translate="yes" xml:space="preserve">
          <source>The CLI &lt;code&gt;build&lt;/code&gt; command uses a different builder and invokes a different build tool for libraries than it does for applications.</source>
          <target state="translated">CLI &lt;code&gt;build&lt;/code&gt; コマンドは、異なるビルダーを使用し、アプリケーション用とは異なるライブラリ用のビルドツールを呼び出します。</target>
        </trans-unit>
        <trans-unit id="cefa3504277e4ce69bb8bd444d4e3b698be704b2" translate="yes" xml:space="preserve">
          <source>The CLI Builder API includes progress and status reporting tools, which can provide hints for certain functions and interfaces.</source>
          <target state="translated">CLI Builder APIには、特定の機能やインターフェースのヒントを提供できるプログレスやステータスレポートツールが含まれています。</target>
        </trans-unit>
        <trans-unit id="a227bf9384f47a8e8130c6145e670165e7b6db89" translate="yes" xml:space="preserve">
          <source>The CLI Builder API provides a new way of changing the behavior of the Angular CLI by using builders to execute custom logic.</source>
          <target state="translated">CLI Builder APIは、ビルダーを使ってカスタムロジックを実行することで、Angular CLIの動作を変更する新しい方法を提供します。</target>
        </trans-unit>
        <trans-unit id="497aad274b240601c7f91912c8f56b2c07944aa0" translate="yes" xml:space="preserve">
          <source>The CLI also adds &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; to feature routing modules. This way, Angular knows that the route list is only responsible for providing additional routes and is intended for feature modules. You can use &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; in multiple modules.</source>
          <target state="translated">CLIは、ルーティングモジュールを機能させるために、 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; も追加します。このようにして、Angularはルートリストが追加ルートの提供のみを担当し、機能モジュールを対象としていることを認識します。複数のモジュールで &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="e003e455d02dc123a8ac974ae7c477f9d1f63b09" translate="yes" xml:space="preserve">
          <source>The CLI also adds &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; to feature routing modules. This way, Angular knows that the route list is only responsible for providing additional routes and is intended for feature modules. You can use &lt;code&gt;forChild()&lt;/code&gt; in multiple modules.</source>
          <target state="translated">CLIは、 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; を機能ルーティングモジュールにも追加します。このように、Angularは、ルートリストが追加のルートの提供のみを担当し、機能モジュールを対象としていることを認識しています。 &lt;code&gt;forChild()&lt;/code&gt; は複数のモジュールで使用できます。</target>
        </trans-unit>
        <trans-unit id="8fc535c7f2308b068ad4b9779b7f1680bc5ff6a5" translate="yes" xml:space="preserve">
          <source>The CLI automatically added each feature module to the routes map at the application level. Finish this off by adding the default route. In &lt;code&gt;AppRoutingModule&lt;/code&gt;, update the &lt;code&gt;routes&lt;/code&gt; array with the following:</source>
          <target state="translated">CLIは、各機能モジュールをアプリケーションレベルでルートマップに自動的に追加しました。デフォルトルートを追加してこれを終了します。 &lt;code&gt;AppRoutingModule&lt;/code&gt; 、更新 &lt;code&gt;routes&lt;/code&gt; 次の配列を：</target>
        </trans-unit>
        <trans-unit id="4d4a19df84ae241a7d6d36271e33ebbc2de83a13" translate="yes" xml:space="preserve">
          <source>The CLI automatically added each feature module to the routes map at the application level. Finish this off by adding the default route. In the &lt;code&gt;app-routing.module.ts&lt;/code&gt; file, update the &lt;code&gt;routes&lt;/code&gt; array with the following:</source>
          <target state="translated">CLIは、アプリケーションレベルで各フィーチャモジュールをルートマップに自動的に追加しました。デフォルトルートを追加して、これを終了します。 &lt;code&gt;app-routing.module.ts&lt;/code&gt; ファイル、更新 &lt;code&gt;routes&lt;/code&gt; 次の配列を：</target>
        </trans-unit>
        <trans-unit id="40e4396ee6ff6f7efc8d22f8aab7c357291cb2d8" translate="yes" xml:space="preserve">
          <source>The CLI automatically appends &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, so if you were to write &lt;code&gt;first-component&lt;/code&gt;, your component would be &lt;code&gt;FirstComponentComponent&lt;/code&gt;.</source>
          <target state="translated">CLIは自動的に &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; を追加するため、 &lt;code&gt;first-component&lt;/code&gt; を作成する場合、コンポーネントは &lt;code&gt;FirstComponentComponent&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="9e89170bf76b307b4155c5c76bc1a7193e2cfc09" translate="yes" xml:space="preserve">
          <source>The CLI build process runs the pertinent CSS preprocessor.</source>
          <target state="translated">CLIビルドプロセスは、適切なCSSプリプロセッサを実行します。</target>
        </trans-unit>
        <trans-unit id="ec9a848601bcc0ff8bb0d93ca86877e1c801c9a0" translate="yes" xml:space="preserve">
          <source>The CLI can run unit tests and create code coverage reports. Code coverage reports show you any parts of our code base that may not be properly tested by your unit tests.</source>
          <target state="translated">CLI はユニットテストを実行し、コードカバレッジレポートを作成することができます。コードカバレッジレポートでは、ユニットテストで適切にテストされていない可能性のあるコードベースの部分が表示されます。</target>
        </trans-unit>
        <trans-unit id="09ef963a966d76d23f313b59169f46873874e2f7" translate="yes" xml:space="preserve">
          <source>The CLI can run unit tests and create code coverage reports. Code coverage reports show you any parts of your code base that may not be properly tested by your unit tests.</source>
          <target state="translated">CLI は、ユニットテストを実行し、コードカバレッジレポートを作成することができます。コードカバレッジレポートは、ユニットテストで適切にテストされていない可能性のあるコードベースの部分を表示します。</target>
        </trans-unit>
        <trans-unit id="cde5e1cc27e1ba5721adcfdbc19a938b7153a4a7" translate="yes" xml:space="preserve">
          <source>The CLI command &lt;code&gt;ng new&lt;/code&gt; creates a &lt;code&gt;package.json&lt;/code&gt; file when it creates the new workspace. This &lt;code&gt;package.json&lt;/code&gt; is used by all projects in the workspace, including the initial app project that is created by the CLI when it creates the workspace.</source>
          <target state="translated">CLIコマンド &lt;code&gt;ng new&lt;/code&gt; 作成されます &lt;code&gt;package.json&lt;/code&gt; のそれは新しいワークスペースを作成するときにファイルを。この &lt;code&gt;package.json&lt;/code&gt; は、ワークスペースの作成時にCLIによって作成される初期アプリプロジェクトを含む、ワークスペース内のすべてのプロジェクトで使用されます。</target>
        </trans-unit>
        <trans-unit id="107cf47d31ef2dc53110f777a2ab23d698cd86c8" translate="yes" xml:space="preserve">
          <source>The CLI creates &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt;, a corresponding test file &lt;code&gt;src/app/highlight.directive.spec.ts&lt;/code&gt;, and &lt;em&gt;declares&lt;/em&gt; the directive class in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">CLIは、作成 &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; 、対応するテストファイル &lt;code&gt;src/app/highlight.directive.spec.ts&lt;/code&gt; 、と&lt;em&gt;宣言し&lt;/em&gt;たルートにディレクティブクラスを &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43f97c1cdef4a721c1e2980898de65659eac4823" translate="yes" xml:space="preserve">
          <source>The CLI creates a new folder, &lt;code&gt;src/app/heroes/&lt;/code&gt;, and generates the three files of the &lt;code&gt;HeroesComponent&lt;/code&gt; along with a test file.</source>
          <target state="translated">CLIは新しいフォルダー &lt;code&gt;src/app/heroes/&lt;/code&gt; を作成し、 &lt;code&gt;HeroesComponent&lt;/code&gt; の 3つのファイルとテストファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="562195fe3077662b5420503e57124701828dc0ad" translate="yes" xml:space="preserve">
          <source>The CLI creates a new workspace and a simple Welcome app, ready to run.</source>
          <target state="translated">CLIは新しいワークスペースとシンプルなWelcomeアプリを作成し、実行する準備ができています。</target>
        </trans-unit>
        <trans-unit id="c76b8649bdc58625eb3fdf9b951e9796dccced1c" translate="yes" xml:space="preserve">
          <source>The CLI creates an initial test file for you by default when you ask it to generate a new component.</source>
          <target state="translated">CLIは、新しいコンポーネントの生成を要求すると、デフォルトで初期テストファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="b481cc4f2e36d975cb69b55ee8a2ea791c24d3e5" translate="yes" xml:space="preserve">
          <source>The CLI creates the component files in the &lt;code&gt;src/app/&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; folder and declares the &lt;code&gt;MessagesComponent&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">CLIは、内のコンポーネントファイルを作成し &lt;code&gt;src/app/&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; フォルダと宣言し &lt;code&gt;MessagesComponent&lt;/code&gt; で &lt;code&gt;AppModule&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f634da899e07e330e3945989266198f9dd7248a3" translate="yes" xml:space="preserve">
          <source>The CLI creates the component files in the &lt;code&gt;src/app/messages&lt;/code&gt; folder and declares the &lt;code&gt;MessagesComponent&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">CLIは、内のコンポーネントファイルを作成し &lt;code&gt;src/app/messages&lt;/code&gt; フォルダと宣言し &lt;code&gt;MessagesComponent&lt;/code&gt; で &lt;code&gt;AppModule&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c2fe0f772eeb3a795c33f5730abf4513989e1ce6" translate="yes" xml:space="preserve">
          <source>The CLI does not support running Angular itself in a web worker.</source>
          <target state="translated">CLIはウェブワーカーでのAngular自体の実行をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="d7552e6edb702636aac502cd8cfd91bc772afa18" translate="yes" xml:space="preserve">
          <source>The CLI generated a test file for the &lt;code&gt;AppComponent&lt;/code&gt; named &lt;code&gt;app.component.spec.ts&lt;/code&gt;.</source>
          <target state="translated">CLIは &lt;code&gt;AppComponent&lt;/code&gt; という名前の &lt;code&gt;app.component.spec.ts&lt;/code&gt; テストファイルを生成しました。</target>
        </trans-unit>
        <trans-unit id="c07dc10a94742c4bb5a9957fc3001dbe354c0f3e" translate="yes" xml:space="preserve">
          <source>The CLI generated three metadata properties:</source>
          <target state="translated">CLIは3つのメタデータプロパティを生成しました。</target>
        </trans-unit>
        <trans-unit id="e487350ab467b6173a436d5d4ae9f4ad9e39868c" translate="yes" xml:space="preserve">
          <source>The CLI generates the files for the &lt;code&gt;DashboardComponent&lt;/code&gt; and declares it in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">CLIは &lt;code&gt;DashboardComponent&lt;/code&gt; のファイルを生成し、それを &lt;code&gt;AppModule&lt;/code&gt; で宣言します。</target>
        </trans-unit>
        <trans-unit id="f2fb1c8beb04af8f237714937dc1863d998eb460" translate="yes" xml:space="preserve">
          <source>The CLI generates the three &lt;code&gt;HeroSearchComponent&lt;/code&gt; files and adds the component to the &lt;code&gt;AppModule&lt;/code&gt; declarations.</source>
          <target state="translated">CLIは3つの &lt;code&gt;HeroSearchComponent&lt;/code&gt; ファイルを生成し、 &lt;code&gt;AppModule&lt;/code&gt; 宣言にコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="447927c37568dec9cf9cbd281c45494d91a9a56c" translate="yes" xml:space="preserve">
          <source>The CLI loads and registers the locale data, places each generated version in a locale-specific directory to keep it separate from other locale versions, and puts the directories within the configured &lt;code&gt;outputPath&lt;/code&gt; for the project. For each application variant the &lt;code&gt;lang&lt;/code&gt; attribute of the &lt;code&gt;html&lt;/code&gt; element is set to the locale. The CLI also adjusts the HTML base HREF for each version of the app by adding the locale to the configured &lt;code&gt;baseHref&lt;/code&gt;.</source>
          <target state="translated">CLIは、ロケールデータをロードして登録し、生成された各バージョンをロケール固有のディレクトリに配置して、他のロケールバージョンと &lt;code&gt;outputPath&lt;/code&gt; し、プロジェクトに構成されたoutputPath内にディレクトリを配置します。アプリケーションバリアントごとに、 &lt;code&gt;html&lt;/code&gt; 要素の &lt;code&gt;lang&lt;/code&gt; 属性がロケールに設定されます。CLIは、構成された &lt;code&gt;baseHref&lt;/code&gt; にロケールを追加することにより、アプリの各バージョンのHTMLベースHREFも調整します。</target>
        </trans-unit>
        <trans-unit id="0a865953b65c01bef1508b821a18a24c3ddf118b" translate="yes" xml:space="preserve">
          <source>The CLI project is now set up to use the Angular service worker.</source>
          <target state="translated">これでCLIプロジェクトはAngularのサービスワーカーを使うように設定されました。</target>
        </trans-unit>
        <trans-unit id="a5d9a740a1ce9aabea72ad09bde9b5b2a4edf30b" translate="yes" xml:space="preserve">
          <source>The CLI queries the Browserslist configuration, and checks the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; to determine if support for legacy browsers is required. The combination of these two configurations determines whether multiple bundles are produced when you create a &lt;em&gt;build&lt;/em&gt;. When you create a development build using &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; and differential loading is enabled, the output produced is simpler and easier to debug, allowing you to rely less on sourcemaps of compiled code. When you create a production build using &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build --prod&lt;/code&gt;&lt;/a&gt;, the CLI uses the defined configurations above to determine the bundles to build for deployment of your application.</source>
          <target state="translated">CLIはBrowserslist構成を照会し、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; をチェックして、レガシーブラウザーのサポートが必要かどうかを判断します。これら2つの構成の組み合わせにより、&lt;em&gt;ビルドの&lt;/em&gt;作成時に複数のバンドルが生成されるかどうかが決まります。&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;を使用して開発ビルドを作成し、差分読み込みが有効になっている場合、生成される出力はデバッグがより簡単で簡単になり、コンパイル済みコードのソースマップに依存することが少なくなります。&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build --prod&lt;/code&gt; &lt;/a&gt;を使用して本番環境ビルドを作成すると、CLIは上記で定義された構成を使用して、アプリケーションのデプロイ用にビルドするバンドルを決定します。</target>
        </trans-unit>
        <trans-unit id="9ab80ceb4180fea29dd3ed369dd71b4e773daaf8" translate="yes" xml:space="preserve">
          <source>The CLI runs the &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpack Plugin&lt;/a&gt; which automatically recognizes lazy-loaded &lt;code&gt;NgModules&lt;/code&gt; and creates separate bundles for them.</source>
          <target state="translated">CLIは&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpackプラグイン&lt;/a&gt;を実行します。このプラグインは、遅延ロードされた &lt;code&gt;NgModules&lt;/code&gt; を自動的に認識し、それらのバンドルを個別に作成します。</target>
        </trans-unit>
        <trans-unit id="9f77f83623d98ca08196d70d7b704bf6aab56a56" translate="yes" xml:space="preserve">
          <source>The CLI runs the &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpack Plugin&lt;/a&gt; which automatically recognizes lazy-loaded &lt;code&gt;NgModules&lt;/code&gt; and creates separate bundles for them.</source>
          <target state="translated">CLIは、遅延読み込みされた &lt;code&gt;NgModules&lt;/code&gt; を自動的に認識し、それらに個別のバンドルを作成する&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/ngtools/webpack&quot;&gt;Angular Ahead-of-TimeWebpackプラグイン&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="5525140bd0a8e5581222783db91519ae612bd0be" translate="yes" xml:space="preserve">
          <source>The CLI takes care of Jasmine and Karma configuration for you.</source>
          <target state="translated">JasmineとKarmaの設定はCLIが代行してくれます。</target>
        </trans-unit>
        <trans-unit id="f3acaf66dda92c0d17299abf2258305e56011531" translate="yes" xml:space="preserve">
          <source>The CLI uses &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt; to ensure compatibility with different browser and browser versions. You may find it necessary to target specific browsers or exclude certain browser versions from your build.</source>
          <target state="translated">CLIは&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;を使用して、異なるブラウザーおよびブラウザーバージョンとの互換性を確保します。特定のブラウザーをターゲットにするか、ビルドから特定のブラウザーバージョンを除外する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="9a0e6928ac9fe75ef6b546726ef4323cbed6b649" translate="yes" xml:space="preserve">
          <source>The CSS &lt;code&gt;selector&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator specifies an element named &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;. That element is a placeholder in the body of your &lt;code&gt;index.html&lt;/code&gt; file:</source>
          <target state="translated">CSSの &lt;code&gt;selector&lt;/code&gt; で &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータは、指定された要素を指定する &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 。その要素は、 &lt;code&gt;index.html&lt;/code&gt; ファイルの本文のプレースホルダーです。</target>
        </trans-unit>
        <trans-unit id="740e3c1cdea94a0c07c6e845612438b44c70c7e2" translate="yes" xml:space="preserve">
          <source>The CSS classes are updated as follows, depending on the type of the expression evaluation:</source>
          <target state="translated">CSSクラスは、式の評価の種類に応じて以下のように更新されます。</target>
        </trans-unit>
        <trans-unit id="e54eff89405ec8c10d6f19133fc3bf85e640c99e" translate="yes" xml:space="preserve">
          <source>The CSS selector for this query.</source>
          <target state="translated">このクエリのCSSセレクタ。</target>
        </trans-unit>
        <trans-unit id="6c7f73c45ff8c0130785cd941b19dfcbde5b8c0e" translate="yes" xml:space="preserve">
          <source>The CSS selector that identifies this directive in a template and triggers instantiation of the directive.</source>
          <target state="translated">テンプレート内でこのディレクティブを識別し、ディレクティブのインスタンス化をトリガーするCSSセレクタ。</target>
        </trans-unit>
        <trans-unit id="9bfcb014ac0d0ab03137c5b7b21ee99ad5558efe" translate="yes" xml:space="preserve">
          <source>The CSS styles associated with this state.</source>
          <target state="translated">この状態に関連付けられたCSSスタイル。</target>
        </trans-unit>
        <trans-unit id="46f17cd8fea6f967e28bec5eeaa4def431c17955" translate="yes" xml:space="preserve">
          <source>The ChangeDetectorRef for the component</source>
          <target state="translated">コンポーネントのChangeDetectorRef</target>
        </trans-unit>
        <trans-unit id="ca1d76d56eaeb3857a3b30c857a59305b798ada4" translate="yes" xml:space="preserve">
          <source>The ComponentFactoryResolver to get hold of the ComponentFactories declared in the &lt;code&gt;entryComponents&lt;/code&gt; property of the module.</source>
          <target state="translated">モジュールの &lt;code&gt;entryComponents&lt;/code&gt; プロパティで宣言されたComponentFactoriesを取得するためのComponentFactoryResolver 。</target>
        </trans-unit>
        <trans-unit id="719c39204c291cea2ecbc86a653ba0b9ba5cac48" translate="yes" xml:space="preserve">
          <source>The DI framework lets you supply data to a component from an injectable &lt;em&gt;service&lt;/em&gt; class, defined in its own file. To demonstrate, we'll create an injectable service class that provides a list of heroes, and register that class as a provider of that service.</source>
          <target state="translated">DIフレームワークを使用すると、独自のファイルで定義された注入可能な&lt;em&gt;サービス&lt;/em&gt;クラスからコンポーネントにデータを提供できます。実例として、ヒーローのリストを提供する注入可能なサービスクラスを作成し、そのクラスをそのサービスのプロバイダーとして登録します。</target>
        </trans-unit>
        <trans-unit id="a6e4d23b100081f1b4bf84813996800b7b7e0b03" translate="yes" xml:space="preserve">
          <source>The DI token for setting the initial config for the platform.</source>
          <target state="translated">プラットフォームの初期設定を行うためのDIトークンです。</target>
        </trans-unit>
        <trans-unit id="9993b1eeb40876035f00bb4ad779bd1d89bff72d" translate="yes" xml:space="preserve">
          <source>The DOM attributes are parsed by the framework that owns the current template. So attributes in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.</source>
          <target state="translated">DOMの属性は現在のテンプレートを所有しているフレームワークによって解析されます。そのため、AngularJSテンプレートの属性はkebab-caseを使用しなければならず、AngularJSテンプレートはcamelCaseを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="40aba8e91dedb65b6b75ee94b6c800ec39ec06a8" translate="yes" xml:space="preserve">
          <source>The DOM element &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; will remain to be an AngularJS managed element, because it's defined in an AngularJS template. That also means you can apply additional AngularJS directives to it, but &lt;em&gt;not&lt;/em&gt; Angular directives. It is only in the template of the &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; where Angular steps in. This same rule also applies when you use AngularJS component directives from Angular.</source>
          <target state="translated">DOM要素 &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; は、AngularJSテンプレートで定義されているため、AngularJS管理対象要素のままです。つまり、追加のAngularJSディレクティブを適用できますが&lt;em&gt;、&lt;/em&gt; Angularディレクティブは適用でき&lt;em&gt;ません&lt;/em&gt;。これは、Angularがステップインする &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; のテンプレートにのみあります。この同じルールは、AngularからのAngularJSコンポーネントディレクティブを使用する場合にも適用されます。</target>
        </trans-unit>
        <trans-unit id="ef37725e8017d864dbbc0ce41db1775b05a49609" translate="yes" xml:space="preserve">
          <source>The DOM element to which to attach the animation.</source>
          <target state="translated">アニメーションをアタッチする DOM 要素。</target>
        </trans-unit>
        <trans-unit id="88ce3ced1c7d105ca467fac76be3733534705ffd" translate="yes" xml:space="preserve">
          <source>The DOM element.</source>
          <target state="translated">DOM 要素。</target>
        </trans-unit>
        <trans-unit id="d5b6648ab37ea69fa6db16f13fe369e9e3c17dd2" translate="yes" xml:space="preserve">
          <source>The DOM event to listen for.</source>
          <target state="translated">リスニングする DOM イベント。</target>
        </trans-unit>
        <trans-unit id="6928a76a137e5a6aa8b409d1e1866c18fe4c109d" translate="yes" xml:space="preserve">
          <source>The DOM property that is bound to a data property.</source>
          <target state="translated">データプロパティにバインドされている DOM プロパティ。</target>
        </trans-unit>
        <trans-unit id="fed37b463aa73566258c88f3425a4af03786431a" translate="yes" xml:space="preserve">
          <source>The DebugElement associated with the root element of this component.</source>
          <target state="translated">このコンポーネントのルート要素に関連付けられたDebugElement。</target>
        </trans-unit>
        <trans-unit id="698531beda7f91ea6b29506a74d0b3e9ca30258a" translate="yes" xml:space="preserve">
          <source>The ElementRef for the element at the root of the component.</source>
          <target state="translated">コンポーネントのルートにある要素のElementRef。</target>
        </trans-unit>
        <trans-unit id="0366d0d0ffb1591153e2e01125018d2c703fc4c6" translate="yes" xml:space="preserve">
          <source>The Filter/Stagger tab in the live example shows a list of heroes with an introductory sequence. The entire list of heroes cascades in, with a slight delay from top to bottom.</source>
          <target state="translated">ライブサンプルの Filter/Stagger タブでは、イントロダクションシーケンスのあるヒーローのリストが表示されています。ヒーローのリスト全体が、上から下に向かって少し遅れてカスケードしていきます。</target>
        </trans-unit>
        <trans-unit id="1ca923870d72f3903f980d65fb8b21ef21dad089" translate="yes" xml:space="preserve">
          <source>The HTML &lt;a href=&quot;router&quot;&gt;&lt;em&gt;&amp;lt;base href=&quot;...&quot;/&amp;gt;&lt;/em&gt;&lt;/a&gt; specifies a base path for resolving relative URLs to assets such as images, scripts, and style sheets. For example, given the &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt;, the browser resolves a URL such as &lt;code&gt;some/place/foo.jpg&lt;/code&gt; into a server request for &lt;code&gt;my/app/some/place/foo.jpg&lt;/code&gt;. During navigation, the Angular router uses the &lt;em&gt;base href&lt;/em&gt; as the base path to component, template, and module files.</source>
          <target state="translated">HTMLの&lt;a href=&quot;router&quot;&gt;&lt;em&gt;&amp;lt;base href = &quot;...&quot; /&amp;gt;&lt;/em&gt;&lt;/a&gt;は、画像、スクリプト、スタイルシートなどのアセットへの相対URLを解決するためのベースパスを指定します。たとえば、 &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt; と、ブラウザは &lt;code&gt;some/place/foo.jpg&lt;/code&gt; などのURL を &lt;code&gt;my/app/some/place/foo.jpg&lt;/code&gt; のサーバーリクエストに解決します。ナビゲーション中、Angularルーターは&lt;em&gt;base href&lt;/em&gt;をコンポーネント、テンプレート、およびモジュールファイルへのベースパスとして使用します。</target>
        </trans-unit>
        <trans-unit id="6934597188d99f726b47ffd4352dab662b44d834" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;base&lt;/code&gt; tag with the &lt;code&gt;href&lt;/code&gt; attribute specifies the base URI, or URL, for relative links. If you set the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option in &lt;code&gt;angular.json&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or to an array of locale IDs, the CLI adjusts the base &lt;code&gt;href&lt;/code&gt; for each version of the app by adding the locale to the configured &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt;. You can specify the &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt; for each locale in your workspace configuration file (&lt;code&gt;angular.json&lt;/code&gt;), as shown in the following example, which sets &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt; to an empty string:</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; 属性を持つHTML &lt;code&gt;base&lt;/code&gt; タグは、相対リンクのベースURIまたはURLを指定します。あなたが設定した場合 &lt;code&gt;&quot;localize&quot;&lt;/code&gt; でオプション &lt;code&gt;angular.json&lt;/code&gt; をする &lt;code&gt;true&lt;/code&gt; かロケールIDの配列に、CLIベース調整 &lt;code&gt;href&lt;/code&gt; に構成にロケールを追加することで、アプリのバージョンごとに &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt; 。あなたは指定することができ &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt; ワークスペースの設定ファイル（各ロケールに対して &lt;code&gt;angular.json&lt;/code&gt; 次の例に示すように設定する、） &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt; 空の文字列に：</target>
        </trans-unit>
        <trans-unit id="3d87779df17c7f23d08f5fc1783cce1d26501ce4" translate="yes" xml:space="preserve">
          <source>The HTML attribute &lt;code&gt;value&lt;/code&gt; specifies the &lt;em&gt;initial&lt;/em&gt; value; the DOM &lt;code&gt;value&lt;/code&gt; property is the &lt;em&gt;current&lt;/em&gt; value.</source>
          <target state="translated">HTML属性 &lt;code&gt;value&lt;/code&gt; は&lt;em&gt;初期&lt;/em&gt;値を指定します。DOM &lt;code&gt;value&lt;/code&gt; プロパティは&lt;em&gt;現在の&lt;/em&gt;値です。</target>
        </trans-unit>
        <trans-unit id="1c559ea997a344c5ea6c1ce9d3e4c628fd9a47c6" translate="yes" xml:space="preserve">
          <source>The HTML element &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and the Angular decorator &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; are different. This documentation is about component communication in Angular as it pertains to &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. For more information on the HTML element &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, see the &lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#the-input-element&quot;&gt;W3C Recommendation&lt;/a&gt;.</source>
          <target state="translated">HTML要素 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; とAngularデコレーター &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; は異なります。それはに関連するとして、このドキュメントでは、角度におけるコンポーネント間のコミュニケーションについてです &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 。HTML要素 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; の詳細については、&lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#the-input-element&quot;&gt;W3C勧告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a9dc8a4343ef71551d0c82a9eaadfd64de660f2a" translate="yes" xml:space="preserve">
          <source>The HTML element to receive event notifications.</source>
          <target state="translated">イベント通知を受信するためのHTML要素です。</target>
        </trans-unit>
        <trans-unit id="d14904cf4a58c3d8c0afeac7bf2f0cdc11c30fbe" translate="yes" xml:space="preserve">
          <source>The HTML for the list of heroes should look like this:</source>
          <target state="translated">英雄リストのHTMLは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f71b50d004800ebb1d4d3080fd26d84a67ac0e78" translate="yes" xml:space="preserve">
          <source>The HTML includes an &lt;em&gt;Edit&lt;/em&gt; button whose click event is bound to an expression that clears the &lt;code&gt;submitted&lt;/code&gt; flag.</source>
          <target state="translated">HTMLには、 &lt;code&gt;submitted&lt;/code&gt; フラグをクリアする式にバインドされたクリックイベントの&lt;em&gt;編集&lt;/em&gt;ボタンが含まれています。</target>
        </trans-unit>
        <trans-unit id="5fd12f6544608fc7b30088b6abc736ac21e18907" translate="yes" xml:space="preserve">
          <source>The HTML selector of the Universal app</source>
          <target state="translated">ユニバーサルアプリのHTMLセレクター</target>
        </trans-unit>
        <trans-unit id="fd9120ff3800ba174966eda03c783d69e8e4cda4" translate="yes" xml:space="preserve">
          <source>The HTML selector to use for this component.</source>
          <target state="translated">このコンポーネントで使用するHTMLセレクタ。</target>
        </trans-unit>
        <trans-unit id="e7578d99ffd7e1da8e3cea279451c4297b5806ca" translate="yes" xml:space="preserve">
          <source>The HTML selector to use for this directive.</source>
          <target state="translated">このディレクティブで使用する HTML セレクタ。</target>
        </trans-unit>
        <trans-unit id="2a36834f34b8455f136644a787a93d8cd1f575d0" translate="yes" xml:space="preserve">
          <source>The HTML template contains a trigger called &lt;code&gt;filterAnimation&lt;/code&gt;.</source>
          <target state="translated">HTMLテンプレートには、 &lt;code&gt;filterAnimation&lt;/code&gt; というトリガーが含まれています。</target>
        </trans-unit>
        <trans-unit id="1aa3f12e11c8cd99f37c0e90b346ffe248ed2a88" translate="yes" xml:space="preserve">
          <source>The HTML template that defines the view.</source>
          <target state="translated">ビューを定義するHTMLテンプレート。</target>
        </trans-unit>
        <trans-unit id="fb27ae2c8025973c57454777adc583cc3d95a51c" translate="yes" xml:space="preserve">
          <source>The HTTP client service offers the following major features.</source>
          <target state="translated">HTTPクライアントサービスでは、以下のような主な機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="25316bd1e8e7dd9558acd79051ccba3b8b0de428" translate="yes" xml:space="preserve">
          <source>The HTTP method.</source>
          <target state="translated">HTTPメソッドです。</target>
        </trans-unit>
        <trans-unit id="e004648df3406974846237d4e5339d7a5db71263" translate="yes" xml:space="preserve">
          <source>The HTTP module uses observables to handle AJAX requests and responses.</source>
          <target state="translated">HTTPモジュールはオブザーバーを使ってAJAXのリクエストとレスポンスを処理します。</target>
        </trans-unit>
        <trans-unit id="4063f45ae6db2ac3b918eaf7efd11f13ab6d0885" translate="yes" xml:space="preserve">
          <source>The HTTP options to send with the request.</source>
          <target state="translated">リクエストと一緒に送信するHTTPオプション。</target>
        </trans-unit>
        <trans-unit id="f569b6437ab842c7c172d6eaf1d50cb52cb3b0df" translate="yes" xml:space="preserve">
          <source>The Hero Editor</source>
          <target state="translated">ヒーローエディター</target>
        </trans-unit>
        <trans-unit id="789e49c75eaf57227f3c68b65a2f12a91300f2e7" translate="yes" xml:space="preserve">
          <source>The ICU clauses adhere to the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU Message Format&lt;/a&gt; specified in the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR pluralization rules&lt;/a&gt;.</source>
          <target state="translated">ICU句は、&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR複数化ルールで&lt;/a&gt;指定されている&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICUメッセージ形式に&lt;/a&gt;準拠しています。</target>
        </trans-unit>
        <trans-unit id="ad0024a992c3624450ab558546a68e7c18c3fd2c" translate="yes" xml:space="preserve">
          <source>The ID consists of a language identifier, such as &lt;code&gt;en&lt;/code&gt; for English or &lt;code&gt;fr&lt;/code&gt; for French, followed by a dash (&lt;code&gt;-&lt;/code&gt;) and a locale extension, such as &lt;code&gt;US&lt;/code&gt; for the United States or &lt;code&gt;CA&lt;/code&gt; for Canada. For example, &lt;code&gt;en-US&lt;/code&gt; refers to English in the United States, and &lt;code&gt;fr-CA&lt;/code&gt; refers to French in Canada. Angular uses this ID to find the correct corresponding locale data.</source>
          <target state="translated">IDは、英語の場合は &lt;code&gt;en&lt;/code&gt; 、フランス語の場合は &lt;code&gt;fr&lt;/code&gt; などの言語識別子と、それに続くダッシュ（ &lt;code&gt;-&lt;/code&gt; ）、および &lt;code&gt;US&lt;/code&gt; 場合はUS、カナダの場合は &lt;code&gt;CA&lt;/code&gt; などのロケール拡張子で構成されます。たとえば、 &lt;code&gt;en-US&lt;/code&gt; は米国では英語を指し、 &lt;code&gt;fr-CA&lt;/code&gt; はカナダではフランス語を指します。AngularはこのIDを使用して、対応する正しいロケールデータを検索します。</target>
        </trans-unit>
        <trans-unit id="506fcf27093bc174f67c1d402388302182ceec78" translate="yes" xml:space="preserve">
          <source>The ID of the anchor element.</source>
          <target state="translated">アンカー要素のID。</target>
        </trans-unit>
        <trans-unit id="ac7e7310379be287aa7d416f11a8dd96c9a6d0ee" translate="yes" xml:space="preserve">
          <source>The Idle Task Queue is the queue of all pending tasks that happen in the background in the service worker. If there are any tasks in the queue, they are listed with a description. In this example, the service worker has one such task scheduled, a post-initialization operation involving an update check and cleanup of stale caches.</source>
          <target state="translated">アイドルタスクキューは、サービスワーカーのバックグラウンドで発生するすべての保留中のタスクのキューです。待ち行列にタスクがある場合、それらは説明とともに一覧表示されます。この例では、サービスワーカーには、更新チェックと古いキャッシュのクリーンアップを含む初期化後の操作を行うタスクが 1 つスケジュールされています。</target>
        </trans-unit>
        <trans-unit id="b00f55586209c5611cf844fe2c21fbd033033eb7" translate="yes" xml:space="preserve">
          <source>The JSON schema that defines a schematic's options supports extensions to allow the declarative definition of prompts and their respective behavior. No additional logic or changes are required to the code of a schematic to support the prompts. The following JSON schema is a complete description of the long-form syntax for the &lt;code&gt;x-prompt&lt;/code&gt; field.</source>
          <target state="translated">回路図のオプションを定義するJSONスキーマは、プロンプトとそのそれぞれの動作を宣言的に定義できるようにする拡張機能をサポートしています。プロンプトをサポートするために、回路図のコードに追加のロジックや変更は必要ありません。次のJSONスキーマは、 &lt;code&gt;x-prompt&lt;/code&gt; フィールドの長い形式の構文の完全な説明です。</target>
        </trans-unit>
        <trans-unit id="6b14e7b839406e6c6e07b41831c981d00cdb2be0" translate="yes" xml:space="preserve">
          <source>The JSON schemas for the default schematics used by the CLI to generate projects and parts of projects are collected in the package &lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt;&lt;code&gt;@schematics/angular&lt;/code&gt;&lt;/a&gt;. The schema describes the options available to the CLI for each of the &lt;code&gt;ng generate&lt;/code&gt; sub-commands, as shown in the &lt;code&gt;--help&lt;/code&gt; output.</source>
          <target state="translated">CLIがプロジェクトとプロジェクトの一部を生成するために使用するデフォルトの回路図のJSONスキーマは、パッケージ&lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt; &lt;code&gt;@schematics/angular&lt;/code&gt; &lt;/a&gt;収集されます。このスキーマは、 &lt;code&gt;--help&lt;/code&gt; 出力に示されているように、 &lt;code&gt;ng generate&lt;/code&gt; サブコマンドごとにCLIで使用可能なオプションを記述しています。</target>
        </trans-unit>
        <trans-unit id="39ad755f2d2f00791e1d617d38aca11a845811ee" translate="yes" xml:space="preserve">
          <source>The JSON schemas for the default schematics used by the CLI to generate projects and parts of projects are collected in the package &lt;a href=&quot;https://raw.githubusercontent.com/angular/angular-cli/v7.0.0/packages/schematics/angular/application/schema.json&quot;&gt;&lt;code&gt;@schematics/angular&lt;/code&gt;&lt;/a&gt;. The schema describes the options available to the CLI for each of the &lt;code&gt;ng generate&lt;/code&gt; sub-commands, as shown in the &lt;code&gt;--help&lt;/code&gt; output.</source>
          <target state="translated">CLIがプロジェクトとプロジェクトの一部を生成するために使用するデフォルトの回路図のJSONスキーマは、パッケージ&lt;a href=&quot;https://raw.githubusercontent.com/angular/angular-cli/v7.0.0/packages/schematics/angular/application/schema.json&quot;&gt; &lt;code&gt;@schematics/angular&lt;/code&gt; &lt;/a&gt;収集されます。このスキーマは、 &lt;code&gt;--help&lt;/code&gt; 出力に示されているように、 &lt;code&gt;ng generate&lt;/code&gt; サブコマンドごとにCLIで使用可能なオプションを記述しています。</target>
        </trans-unit>
        <trans-unit id="f07f2ef6bdc0276dc66c13525614930ce905b490" translate="yes" xml:space="preserve">
          <source>The NPM registry to use.</source>
          <target state="translated">使用するNPMのレジストリ。</target>
        </trans-unit>
        <trans-unit id="ddfa2dc248ef3e69640a4a039271e3809480eb1f" translate="yes" xml:space="preserve">
          <source>The NgModule classes differ from JavaScript module in the following key ways:</source>
          <target state="translated">NgModule クラスは JavaScript モジュールとは次のような点で異なります。</target>
        </trans-unit>
        <trans-unit id="3c3d2df9acaceef7f08c09fa40d55f3607762e32" translate="yes" xml:space="preserve">
          <source>The NgModule instance.</source>
          <target state="translated">NgModule のインスタンス。</target>
        </trans-unit>
        <trans-unit id="0747755c8b239fe51fe8a94eabd907811f0aaa1b" translate="yes" xml:space="preserve">
          <source>The NgModule system is different from and unrelated to the JavaScript (ES2015) module system for managing collections of JavaScript objects. These are &lt;em&gt;complementary&lt;/em&gt; module systems that you can use together to write your apps.</source>
          <target state="translated">NgModuleシステムは、JavaScriptオブジェクトのコレクションを管理するためのJavaScript（ES2015）モジュールシステムとは異なり、無関係です。これらは、アプリを作成するために一緒に使用できる&lt;em&gt;補完的な&lt;/em&gt;モジュールシステムです。</target>
        </trans-unit>
        <trans-unit id="e78772f224ee2af36b30cd74fcf9b437c350b4e9" translate="yes" xml:space="preserve">
          <source>The PhoneCat project has both E2E Protractor tests and some Karma unit tests in it. Of these two, E2E tests can be dealt with much more easily: By definition, E2E tests access the application from the &lt;em&gt;outside&lt;/em&gt; by interacting with the various UI elements the app puts on the screen. E2E tests aren't really that concerned with the internal structure of the application components. That also means that, although you modify the project quite a bit during the upgrade, the E2E test suite should keep passing with just minor modifications. You didn't change how the application behaves from the user's point of view.</source>
          <target state="translated">PhoneCatプロジェクトには、E2E ProtractorテストといくつかのKarmaユニットテストの両方が含まれています。これら2つのうち、E2Eテストははるかに簡単に処理できます。定義により、E2Eテストは、アプリが画面に表示するさまざまなUI要素と対話することにより、&lt;em&gt;外部&lt;/em&gt;からアプリケーションにアクセスします。 E2Eテストは、アプリケーションコンポーネントの内部構造にはそれほど関係していません。つまり、アップグレード中にプロジェクトをかなり変更しても、E2Eテストスイートはわずかな変更を加えただけで成功するはずです。ユーザーの視点から見たアプリケーションの動作は変更していません。</target>
        </trans-unit>
        <trans-unit id="f2ae4909a5e215dd224a806bec7a9225a92ca5ec" translate="yes" xml:space="preserve">
          <source>The Popup Service example app (shown below) defines a component that you can either load dynamically or convert to a custom element.</source>
          <target state="translated">ポップアップ サービスのサンプル アプリ(以下に示す)では、動的にロードするか、カスタム要素に変換することができるコンポーネントを定義しています。</target>
        </trans-unit>
        <trans-unit id="84993d2db560df7bc9b4de2bc50d97c62f64d0f4" translate="yes" xml:space="preserve">
          <source>The Router also makes use of multiple providers associated with a single token. When you provide multiple sets of routes using &lt;a href=&quot;../api/router/routermodule#forroot&quot;&gt;RouterModule.forRoot&lt;/a&gt; and &lt;a href=&quot;../api/router/routermodule#forchild&quot;&gt;RouterModule.forChild&lt;/a&gt; in a single module, the &lt;a href=&quot;../api/router/routes&quot;&gt;ROUTES&lt;/a&gt; token combines all the different provided sets of routes into a single value.</source>
          <target state="translated">ルーターは、単一のトークンに関連付けられた複数のプロバイダーも利用します。1つのモジュールで&lt;a href=&quot;../api/router/routermodule#forroot&quot;&gt;RouterModule.forRoot&lt;/a&gt;と&lt;a href=&quot;../api/router/routermodule#forchild&quot;&gt;RouterModule.forChild&lt;/a&gt;を使用して複数のルートセットを提供する場合、&lt;a href=&quot;../api/router/routes&quot;&gt;ROUTES&lt;/a&gt;トークンは、提供されたさまざまなルートセットをすべて1つの値に結合します。</target>
        </trans-unit>
        <trans-unit id="06f152c32b945154045d8af9ca9b76a3d1746fea" translate="yes" xml:space="preserve">
          <source>The Router and Forms modules use observables to listen for and respond to user-input events.</source>
          <target state="translated">ルータとフォームモジュールは、オブザーバブルを使用して、ユーザ入力イベントをリッスンして応答します。</target>
        </trans-unit>
        <trans-unit id="6719949fe48b382a4f5d441956e3a39da43a1cf4" translate="yes" xml:space="preserve">
          <source>The RouterLink directive gives the router control over the anchor element. In this case, the route (URL) contains one fixed segment (&lt;code&gt;/products&lt;/code&gt;) and the final segment is variable, inserting the id property of the current product. For example, the URL for a product with an &lt;code&gt;id&lt;/code&gt; of 1 will be similar to &lt;code&gt;https://getting-started-myfork.stackblitz.io/products/1&lt;/code&gt;.</source>
          <target state="translated">RouterLinkディレクティブは、ルーターにアンカー要素を制御させます。この場合、ルート（URL）には1つの固定セグメント（ &lt;code&gt;/products&lt;/code&gt; ）が含まれており、最後のセグメントは可変であり、現在の製品のidプロパティを挿入します。たとえば、 &lt;code&gt;id&lt;/code&gt; が1の製品のURLは、 &lt;code&gt;https://getting-started-myfork.stackblitz.io/products/1&lt;/code&gt; のようになります。</target>
        </trans-unit>
        <trans-unit id="ec9884b83270d5dfad5b0c687a2bc2fbf8233d70" translate="yes" xml:space="preserve">
          <source>The RouterLink directive gives the router control over the anchor element. In this case, the route, or URL, contains one fixed segment, &lt;code&gt;/products&lt;/code&gt;, while the final segment is variable, inserting the id property of the current product. For example, the URL for a product with an &lt;code&gt;id&lt;/code&gt; of 1 will be similar to &lt;code&gt;https://getting-started-myfork.stackblitz.io/products/1&lt;/code&gt;.</source>
          <target state="translated">RouterLinkディレクティブは、アンカー要素に対するルーターの制御を提供します。この場合、ルートまたはURLには1つの固定セグメント &lt;code&gt;/products&lt;/code&gt; が含まれ、最後のセグメントは可変であり、現在の製品のidプロパティが挿入されます。たとえば、 &lt;code&gt;id&lt;/code&gt; が1の製品のURLは、 &lt;code&gt;https://getting-started-myfork.stackblitz.io/products/1&lt;/code&gt; のようになります。</target>
        </trans-unit>
        <trans-unit id="bb5da276658695e0be6ae79161628d231d307feb" translate="yes" xml:space="preserve">
          <source>The Routing Module has several characteristics:</source>
          <target state="translated">ルーティングモジュールにはいくつかの特徴があります。</target>
        </trans-unit>
        <trans-unit id="35fd3904247e990d23cf1026f75cc708c81d26d7" translate="yes" xml:space="preserve">
          <source>The Routing Module is a design choice whose value is most obvious when the configuration is complex and includes specialized guard and resolver services. It can seem like overkill when the actual configuration is dead simple.</source>
          <target state="translated">ルーティングモジュールは、設定が複雑で、特殊なガードサービスやリゾルバサービスを含む場合に、その価値が最も明らかになる設計上の選択です。実際のコンフィギュレーションが単純な場合には、やり過ぎのように思えるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b6fe2baca6e2f506f7a1094ee33169d007121a3d" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;last()&lt;/code&gt; operator emits the observable's last value before completing, which will be the test quote. The &lt;code&gt;subscribe&lt;/code&gt; callback calls &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to update the quote element with the test quote, in the same manner as the earlier tests.</source>
          <target state="translated">RxJSの &lt;code&gt;last()&lt;/code&gt; オペレーターは、完了する前にオブザーバブルの最後の値を出力します。これがテストの引用になります。 &lt;code&gt;subscribe&lt;/code&gt; コールバック呼び出しの &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; を以前の試験と同様に、テスト引用と引用の要素を更新します。</target>
        </trans-unit>
        <trans-unit id="e4ef5b64a22e5f089b247e3fce5803948ddbdd68" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;last()&lt;/code&gt; operator emits the observable's last value before completing, which will be the test quote. The &lt;code&gt;subscribe&lt;/code&gt; callback calls &lt;code&gt;detectChanges()&lt;/code&gt; to update the quote element with the test quote, in the same manner as the earlier tests.</source>
          <target state="translated">RxJS &lt;code&gt;last()&lt;/code&gt; 演算子は、完了する前にオブザーバブルの最後の値を出力します。これがテストクォートになります。 &lt;code&gt;subscribe&lt;/code&gt; コールバック呼び出しの &lt;code&gt;detectChanges()&lt;/code&gt; を以前の試験と同様に、テスト引用と引用の要素を更新します。</target>
        </trans-unit>
        <trans-unit id="dcaa953111009647a434b575f4fd13ea2b557407" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;tap&lt;/code&gt; operator (as in &quot;wiretap&quot;) lets the code inspect both success and error values passing through the observable without disturbing them.</source>
          <target state="translated">RxJSの &lt;code&gt;tap&lt;/code&gt; 演算子（「wiretap 」など）を使用すると、コードは、オブザーバブルを通過する成功値とエラー値の両方を妨害することなく検査できます。</target>
        </trans-unit>
        <trans-unit id="1d1cccc9cf3740247de7c91761afdad5881ffa16" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;tap&lt;/code&gt; operator captures whether the request succeeded or failed. The RxJS &lt;code&gt;finalize&lt;/code&gt; operator is called when the response observable either errors or completes (which it must), and reports the outcome to the &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">RxJS &lt;code&gt;tap&lt;/code&gt; オペレーターは、リクエストが成功したか失敗したかをキャプチャします。RxJS &lt;code&gt;finalize&lt;/code&gt; オペレーターは、監視可能な応答がエラーまたは完了（必須）のいずれかであるときに呼び出され、結果を &lt;code&gt;MessageService&lt;/code&gt; に報告します。</target>
        </trans-unit>
        <trans-unit id="827ac77d8ed61c8b49d2de8b0bdc53bf70d6d536" translate="yes" xml:space="preserve">
          <source>The RxJS library</source>
          <target state="translated">RxJS ライブラリ</target>
        </trans-unit>
        <trans-unit id="f0136a6174ce00439105cc5cccfc1cdfbe02fb4c" translate="yes" xml:space="preserve">
          <source>The Schematics framework provides a file templating system, which supports both path and content templates. The system operates on placeholders defined inside files or paths that loaded in the input &lt;code&gt;Tree&lt;/code&gt;. It fills these in using values passed into the &lt;code&gt;Rule&lt;/code&gt;.</source>
          <target state="translated">Schematicsフレームワークは、パステンプレートとコンテンツテンプレートの両方をサポートするファイルテンプレートシステムを提供します。システムは、入力 &lt;code&gt;Tree&lt;/code&gt; にロードされたファイルまたはパス内で定義されたプレースホルダーを操作します。 &lt;code&gt;Rule&lt;/code&gt; に渡された値を使用してこれらを埋めます。</target>
        </trans-unit>
        <trans-unit id="a709c4d8482569aaa0ad00942fcea4cbbe6b52ed" translate="yes" xml:space="preserve">
          <source>The ServiceWorker will redirect navigation requests that don't match any &lt;code&gt;asset&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; group to the specified &lt;a href=&quot;service-worker-config#index-file&quot;&gt;index file&lt;/a&gt;. A request is considered to be a navigation request if:</source>
          <target state="translated">ServiceWorkerは、 &lt;code&gt;asset&lt;/code&gt; または &lt;code&gt;data&lt;/code&gt; グループに一致しないナビゲーション要求を、指定された&lt;a href=&quot;service-worker-config#index-file&quot;&gt;インデックスファイルに&lt;/a&gt;リダイレクトします。次の場合、リクエストはナビゲーションリクエストと見なされます。</target>
        </trans-unit>
        <trans-unit id="05060365aca92ff57a2a8cb3fad933d606282ffe" translate="yes" xml:space="preserve">
          <source>The StackBlitz generator might provide the cart service in &lt;code&gt;app.module.ts&lt;/code&gt; by default. That differs from the example, which uses a bundle-optimization technique, an &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator with the &lt;code&gt;{ providedIn: 'root' }&lt;/code&gt; statement. For more information about services, see &lt;a href=&quot;../guide/architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">StackBlitzジェネレーターは、デフォルトで &lt;code&gt;app.module.ts&lt;/code&gt; でカートサービスを提供する場合があります。これは、バンドル最適化手法である &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータと &lt;code&gt;{ providedIn: 'root' }&lt;/code&gt; ステートメントを使用する例とは異なります。サービスの詳細については、「&lt;a href=&quot;../guide/architecture-services&quot;&gt;サービスと依存性注入の概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0a8e6705d088a4f6f8c71e996096d93779313a26" translate="yes" xml:space="preserve">
          <source>The SystemJS configuration file &lt;code&gt;systemjs.config.js&lt;/code&gt; to the project root directory.</source>
          <target state="translated">SystemJS構成ファイル &lt;code&gt;systemjs.config.js&lt;/code&gt; をプロジェクトのルートディレクトリに。</target>
        </trans-unit>
        <trans-unit id="55401394d273b717445755bd856afd574e272014" translate="yes" xml:space="preserve">
          <source>The Testability service provides testing hooks that can be accessed from the browser and by services such as Protractor. Each bootstrapped Angular application on the page will have an instance of Testability.</source>
          <target state="translated">TestabilityサービスはブラウザやProtractorなどのサービスからアクセスできるテストフックを提供します。ページ上の各ブートストラップされた Angular アプリケーションは Testability のインスタンスを持ちます。</target>
        </trans-unit>
        <trans-unit id="5766cb1be4ee9631ce9045b332f79763bfe74b65" translate="yes" xml:space="preserve">
          <source>The Tour of Heroes &lt;code&gt;HeroesComponent&lt;/code&gt; is currently getting and displaying fake data.</source>
          <target state="translated">Heroesのツアー &lt;code&gt;HeroesComponent&lt;/code&gt; は現在、偽のデータを取得して表示しています。</target>
        </trans-unit>
        <trans-unit id="d2f2b03e1a17c636938183bec1a40bd186d69702" translate="yes" xml:space="preserve">
          <source>The Tour of Heroes app displays a list of heroes in a Master/Detail view.</source>
          <target state="translated">Tour of Heroesアプリは、マスター/詳細ビューにヒーローのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="29d68459c27733c932fb0a3e9b100ffb25836775" translate="yes" xml:space="preserve">
          <source>The Tour of Heroes is a comprehensive tutorial that guides you through the process of building an application with many of Angular's most popular features.</source>
          <target state="translated">Tour of Heroesは、Angularの最も人気のある機能の多くを使ってアプリケーションを構築するプロセスをガイドする包括的なチュートリアルです。</target>
        </trans-unit>
        <trans-unit id="a4c698daff2c8aa5974a237e4112ae50ff6e51cc" translate="yes" xml:space="preserve">
          <source>The TypeScript and Angular have a wide range of options which can be used to configure type-checking features and generated output. For more information, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;Configuration inheritance with extends&lt;/a&gt; section of the TypeScript documentation.</source>
          <target state="translated">TypeScriptとAngularには、タイプチェック機能と生成された出力を構成するために使用できる幅広いオプションがあります。詳細については、TypeScriptドキュメントの「&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;extends&lt;/a&gt;を使用した構成の継承」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8568fa0f23ba2d73c5291a0c991f3fc03b8708b2" translate="yes" xml:space="preserve">
          <source>The TypeScript compiler does some of the analytic work of the first phase. It emits the &lt;code&gt;.d.ts&lt;/code&gt;&lt;em&gt;type definition files&lt;/em&gt; with type information that the AOT compiler needs to generate application code. At the same time, the AOT &lt;strong&gt;collector&lt;/strong&gt; analyzes the metadata recorded in the Angular decorators and outputs metadata information in &lt;strong&gt;&lt;code&gt;.metadata.json&lt;/code&gt;&lt;/strong&gt; files, one per &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">TypeScriptコンパイラーは、第1フェーズの分析作業の一部を実行します。これは、AOTコンパイラがアプリケーションコードを生成するために必要なタイプ情報を &lt;code&gt;.d.ts&lt;/code&gt; &lt;em&gt;タイプ定義ファイル&lt;/em&gt;を発行します。同時に、AOTの&lt;strong&gt;コレクタは&lt;/strong&gt;角度デコレータで記録されたメタデータを解析して、メタデータ情報を出力&lt;strong&gt; &lt;code&gt;.metadata.json&lt;/code&gt; の&lt;/strong&gt;ファイル、ごとに1 &lt;code&gt;.d.ts&lt;/code&gt; のファイルを。</target>
        </trans-unit>
        <trans-unit id="6e0a06e36760a2eff0336b6bc84af9dbdc59d36a" translate="yes" xml:space="preserve">
          <source>The TypeScript compiler generates a public field for each &lt;code&gt;public&lt;/code&gt; constructor parameter and automatically assigns the parameter&amp;rsquo;s value to that field when you create heroes.</source>
          <target state="translated">TypeScriptコンパイラーは、各 &lt;code&gt;public&lt;/code&gt; コンストラクターパラメーターのパブリックフィールドを生成し、ヒーローを作成するときにパラメーターの値をそのフィールドに自動的に割り当てます。</target>
        </trans-unit>
        <trans-unit id="544dc91fe288513548a9233bbe8426452eb2d737" translate="yes" xml:space="preserve">
          <source>The TypeScript language server, including the &lt;em&gt;tsc&lt;/em&gt; TypeScript compiler.</source>
          <target state="translated">TypeScript言語サーバー（&lt;em&gt;tsc&lt;/em&gt; TypeScriptコンパイラを含む）。</target>
        </trans-unit>
        <trans-unit id="585484bd3428c42d4450046039048a1e517dabea" translate="yes" xml:space="preserve">
          <source>The URL bound to the &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; attribute flows in to the directive's &lt;code&gt;linkParams&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; 属性にバインドされたURL は、ディレクティブの &lt;code&gt;linkParams&lt;/code&gt; プロパティに流れ込みます。</target>
        </trans-unit>
        <trans-unit id="d3b7615b7e3818d17d835d95dfcc876f7081b556" translate="yes" xml:space="preserve">
          <source>The URL for the current application state. This is used for initializing the platform's location. &lt;code&gt;protocol&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, and &lt;code&gt;port&lt;/code&gt; will be overridden if &lt;code&gt;baseUrl&lt;/code&gt; is set.</source>
          <target state="translated">現在のアプリケーション状態のURL。これは、プラットフォームの場所を初期化するために使用されます。 &lt;code&gt;baseUrl&lt;/code&gt; が設定されている場合、 &lt;code&gt;protocol&lt;/code&gt; 、 &lt;code&gt;hostname&lt;/code&gt; 、および &lt;code&gt;port&lt;/code&gt; はオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="e3b58a08584550f73eae9ff3e2376fdabaeb0c99" translate="yes" xml:space="preserve">
          <source>The URL fragment shared by all the routes</source>
          <target state="translated">すべてのルートで共有されるURLフラグメント</target>
        </trans-unit>
        <trans-unit id="7375623d6e6cb15b981147758fafc25c5fab9496" translate="yes" xml:space="preserve">
          <source>The URL in &lt;code&gt;&amp;lt;action type=&quot;Rewrite&quot; url=&quot;/src/&quot;/&amp;gt;&lt;/code&gt; should match the base href in &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">でURL &lt;code&gt;&amp;lt;action type=&quot;Rewrite&quot; url=&quot;/src/&quot;/&amp;gt;&lt;/code&gt; のベースHREF一致している必要があり &lt;code&gt;index.html&lt;/code&gt; をします。</target>
        </trans-unit>
        <trans-unit id="c30899e221cfea13e24ea0a470ee42b50353e939" translate="yes" xml:space="preserve">
          <source>The URL is the heroes resource URL plus the &lt;code&gt;id&lt;/code&gt; of the hero to delete.</source>
          <target state="translated">URLは、ヒーローのリソースURLと削除するヒーローの &lt;code&gt;id&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6c5643dddca94caf55142e6ccbe6d6ec8803e3a0" translate="yes" xml:space="preserve">
          <source>The URL is unchanged. The heroes web API knows which hero to update by looking at the hero's &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">URLは変更されていません。ヒーローのWeb APIは、ヒーローの &lt;code&gt;id&lt;/code&gt; することで、どのヒーローを更新するかを認識しています。</target>
        </trans-unit>
        <trans-unit id="08c013a55e0baa8ffe5403ca40144123b223ee92" translate="yes" xml:space="preserve">
          <source>The URL must not contain &lt;code&gt;__&lt;/code&gt;.</source>
          <target state="translated">URLに &lt;code&gt;__&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="81837d96bfb7f069e22ae8b8419daf579e0ede35" translate="yes" xml:space="preserve">
          <source>The URL must not contain a file extension (i.e. a &lt;code&gt;.&lt;/code&gt;) in the last path segment.</source>
          <target state="translated">URL の最後のパスセグメントには、ファイル拡張子（つまり &lt;code&gt;.&lt;/code&gt; ）を含めないでください。</target>
        </trans-unit>
        <trans-unit id="9c1a40ff35abb3598077b170eeaec00c0f54cc0e" translate="yes" xml:space="preserve">
          <source>The URL path</source>
          <target state="translated">URLパス</target>
        </trans-unit>
        <trans-unit id="c0dd8facec71b1ec87d76b9020042f5cba77847d" translate="yes" xml:space="preserve">
          <source>The URL segments matched by this route</source>
          <target state="translated">このルートでマッチしたURLセグメント</target>
        </trans-unit>
        <trans-unit id="cc2bde1fb3859667c3bfd03de6cc864cffab7897" translate="yes" xml:space="preserve">
          <source>The URL segments of this group. See &lt;code&gt;&lt;a href=&quot;urlsegment&quot;&gt;UrlSegment&lt;/a&gt;&lt;/code&gt; for more information</source>
          <target state="translated">このグループのURLセグメント。詳細については、 &lt;code&gt;&lt;a href=&quot;urlsegment&quot;&gt;UrlSegment&lt;/a&gt;&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="2b38217a179daea3d6656686b81dd85b6b4153c1" translate="yes" xml:space="preserve">
          <source>The URL string.</source>
          <target state="translated">URLの文字列です。</target>
        </trans-unit>
        <trans-unit id="52453743ef9a067eaee16ecf0d5bfffaa8d88e34" translate="yes" xml:space="preserve">
          <source>The URL that is the destination for this navigation.</source>
          <target state="translated">このナビゲーションの宛先となるURLです。</target>
        </trans-unit>
        <trans-unit id="82fa7104935e782b71b9ac41f1f70a9244a9aa62" translate="yes" xml:space="preserve">
          <source>The URL that the browser client (or live-reload client, if enabled) should use to connect to the development server. Use for a complex dev server setup, such as one with reverse proxies.</source>
          <target state="translated">ブラウザクライアント (またはライブリロードクライアントが有効な場合)が開発サーバーに接続するために使用する URL。リバースプロキシを使用するなど、複雑な開発サーバの設定に使用します。</target>
        </trans-unit>
        <trans-unit id="c519406384bbfabb8d794f38fa84b37a2a8a8261" translate="yes" xml:space="preserve">
          <source>The ability to alter the state of a value after its creation. &lt;a href=&quot;glossary#reactive-forms&quot;&gt;Reactive forms&lt;/a&gt; perform immutable changes in that each change to the data model produces a new data model rather than modifying the existing one. &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;Template-driven forms&lt;/a&gt; perform mutable changes with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;glossary#data-binding&quot;&gt;two-way data binding&lt;/a&gt; to modify the existing data model in place.</source>
          <target state="translated">作成後に値の状態を変更する機能。&lt;a href=&quot;glossary#reactive-forms&quot;&gt;リアクティブフォーム&lt;/a&gt;は、データモデルへの変更ごとに既存のデータモデルを変更するのではなく、新しいデータモデルを生成するという点で不変の変更を実行します。&lt;a href=&quot;glossary#template-driven-forms&quot;&gt;テンプレート駆動型フォーム&lt;/a&gt;は、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; と&lt;a href=&quot;glossary#data-binding&quot;&gt;双方向データバインディング&lt;/a&gt;を使用して変更可能な変更を実行し、既存のデータモデルを変更します。</target>
        </trans-unit>
        <trans-unit id="caa4182924ebe66fa358bd4a3e14ba6d81b491fb" translate="yes" xml:space="preserve">
          <source>The ability to configure one or more providers at different levels opens up useful possibilities. For a look at the following scenarios in a working app, see the heroes use case examples.</source>
          <target state="translated">異なるレベルで1つまたは複数のプロバイダを設定する機能は、有用な可能性を開きます。動作するアプリでの以下のシナリオについては、Heroesのユースケースの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="d357726f6694fec9b1683368af646f1226db5511" translate="yes" xml:space="preserve">
          <source>The ability to request &lt;a href=&quot;http#typed-response&quot;&gt;typed response objects&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http#typed-response&quot;&gt;型付き応答オブジェクト&lt;/a&gt;を要求する機能。</target>
        </trans-unit>
        <trans-unit id="50fe34565db9f623c1a4c2f1c8f3d0239b4b1371" translate="yes" xml:space="preserve">
          <source>The above command completes the following actions:</source>
          <target state="translated">上記のコマンドで以下の動作が完了します。</target>
        </trans-unit>
        <trans-unit id="d10343d799b7008227efc9a02b184cf8a761ab84" translate="yes" xml:space="preserve">
          <source>The above example demonstrates changing a component's code to accommodate a pipe.</source>
          <target state="translated">上記の例では、パイプに対応するためにコンポーネントのコードを変更しています。</target>
        </trans-unit>
        <trans-unit id="d5d6af0be00ddd39a1a4c1567712c9175938cf95" translate="yes" xml:space="preserve">
          <source>The absolute URL for the latter example, including the &lt;code&gt;localhost&lt;/code&gt; origin, is</source>
          <target state="translated">後者の例の絶対URLは、 &lt;code&gt;localhost&lt;/code&gt; オリジンを含めて、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="63cb971f43856a00f354567181daff31d8142b01" translate="yes" xml:space="preserve">
          <source>The absolute URL for the latter example, including the &lt;code&gt;localhost&lt;/code&gt; origin, is as follows:</source>
          <target state="translated">&lt;code&gt;localhost&lt;/code&gt; オリジンを含む後者の例の絶対URLは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c4e256b4477c3d36ae67c61de1ee6c1a8ff7190f" translate="yes" xml:space="preserve">
          <source>The abstract base class for the concrete form control classes &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It provides their common behaviors and properties.</source>
          <target state="translated">具体的なフォームコントロールクラス &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の抽象基本クラス。共通の動作とプロパティを提供します。</target>
        </trans-unit>
        <trans-unit id="402b1c3034ebb0af6c0f9e2efa6f13695bff7d6e" translate="yes" xml:space="preserve">
          <source>The abstraction of the form model promotes simplicity over structure. The template-driven form directive &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; is responsible for creating and managing the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance for a given form element. It's less explicit, but you no longer have direct control over the form model.</source>
          <target state="translated">フォームモデルの抽象化により、構造よりも単純さが促進されます。テンプレート駆動型フォームディレクティブ &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; は、特定のフォーム要素の &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成および管理します。それほど明確ではありませんが、フォームモデルを直接制御することはできません。</target>
        </trans-unit>
        <trans-unit id="e35904284dfba5a413162707ebab87af73ae1a76" translate="yes" xml:space="preserve">
          <source>The act of subscribing to an observable triggers its execution, associates callbacks with it, and creates a &lt;code&gt;Subscription&lt;/code&gt; object that lets you unsubscribe.</source>
          <target state="translated">オブザーバブルをサブスクライブすると、その実行がトリガーされ、コールバックが関連付けられ、 &lt;code&gt;Subscription&lt;/code&gt; を解除するSubscriptionオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="14342a1287cec6129e7b1a94b8d02bdf3a5f1f89" translate="yes" xml:space="preserve">
          <source>The actions and effects are as follows:</source>
          <target state="translated">作用・効果は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6c6b7761a008c0eacb4c9720e87a44ff177306a4" translate="yes" xml:space="preserve">
          <source>The ad banner uses a helper directive called &lt;code&gt;AdDirective&lt;/code&gt; to mark valid insertion points in the template.</source>
          <target state="translated">広告バナーは、 &lt;code&gt;AdDirective&lt;/code&gt; と呼ばれるヘルパーディレクティブを使用して、テンプレート内の有効な挿入ポイントをマークします。</target>
        </trans-unit>
        <trans-unit id="727d776b678ae681b954ef7437bc5f9ca400e1a0" translate="yes" xml:space="preserve">
          <source>The admin feature file structure looks like this:</source>
          <target state="translated">管理機能のファイル構造は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d83a95f34e4382511e2a151024543d721552d92d" translate="yes" xml:space="preserve">
          <source>The admin feature is now protected by the guard, albeit protected poorly.</source>
          <target state="translated">管理機能は、保護されていないにもかかわらず、ガードによって保護されるようになりました。</target>
        </trans-unit>
        <trans-unit id="4747864fdf4438dfdda6f414c25b73c364d2192c" translate="yes" xml:space="preserve">
          <source>The admin feature is now protected by the guard, but the guard requires more customization to work fully.</source>
          <target state="translated">管理者機能はガードで守られるようになりましたが、完全に機能させるにはもっとカスタマイズが必要です。</target>
        </trans-unit>
        <trans-unit id="96aed0c722ab88a83207ea9b85e25c7e2f416849" translate="yes" xml:space="preserve">
          <source>The admin feature module contains the &lt;code&gt;AdminComponent&lt;/code&gt; used for routing within the feature module, a dashboard route and two unfinished components to manage crises and heroes.</source>
          <target state="translated">管理機能モジュールには、機能モジュール内のルーティングに使用される &lt;code&gt;AdminComponent&lt;/code&gt; 、ダッシュボードルート、および危機とヒーローを管理するための2つの未完成のコンポーネントが含まれています。</target>
        </trans-unit>
        <trans-unit id="ab267a14770ddb26fa34604e27d4f4b4861c73ef" translate="yes" xml:space="preserve">
          <source>The aggregate value of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, including any disabled controls.</source>
          <target state="translated">無効なコントロールを含む、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の集計値。</target>
        </trans-unit>
        <trans-unit id="fd0a4fc774ffbf4fe8af10420d93bf7b1af6f41a" translate="yes" xml:space="preserve">
          <source>The aggregate value of the array, including any disabled controls.</source>
          <target state="translated">無効化されたコントロールを含む、配列の集約値。</target>
        </trans-unit>
        <trans-unit id="0f45a54234e4cd13b23944c4560457d66bc0cc78" translate="yes" xml:space="preserve">
          <source>The aliases control in the form group instance is now populated with a single control until more controls are added dynamically.</source>
          <target state="translated">フォームグループインスタンスのエイリアスコントロールは、より多くのコントロールが動的に追加されるまで、単一のコントロールで構成されるようになりました。</target>
        </trans-unit>
        <trans-unit id="84256de55279155b325c264a0950f97a32368023" translate="yes" xml:space="preserve">
          <source>The alternative display includes an &lt;em&gt;Edit&lt;/em&gt; button whose click event is bound to an expression that clears the &lt;code&gt;submitted&lt;/code&gt; flag.</source>
          <target state="translated">代替ディスプレイには、クリックイベントが &lt;code&gt;submitted&lt;/code&gt; フラグをクリアする式にバインドされている[&lt;em&gt;編集&lt;/em&gt;]ボタンが含まれています。</target>
        </trans-unit>
        <trans-unit id="e34fac3a099ab7998cdfc1b5ee75e1f1e111edc0" translate="yes" xml:space="preserve">
          <source>The alternative is a reactive form. For an introduction and comparison of both forms approaches, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to Angular Forms&lt;/a&gt;.</source>
          <target state="translated">代替は反応型です。両方のフォームアプローチの&lt;a href=&quot;forms-overview&quot;&gt;概要&lt;/a&gt;と比較については、Angular Formsの概要を参照してください。</target>
        </trans-unit>
        <trans-unit id="1941cf59d3da9ef9cde211095dfc431f3816eae8" translate="yes" xml:space="preserve">
          <source>The alternative is a template-driven form. For an introduction and comparison of both forms approaches, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to Angular Forms&lt;/a&gt;.</source>
          <target state="translated">代替は、テンプレート駆動型のフォームです。両方のフォームアプローチの&lt;a href=&quot;forms-overview&quot;&gt;概要&lt;/a&gt;と比較については、Angular Formsの概要を参照してください。</target>
        </trans-unit>
        <trans-unit id="2afb8502dfea931790e61f9165c97e230612b7ba" translate="yes" xml:space="preserve">
          <source>The anchor directive</source>
          <target state="translated">アンカー指令</target>
        </trans-unit>
        <trans-unit id="d6857daa67f01cf8f26a596689dfd09a6f899822" translate="yes" xml:space="preserve">
          <source>The anchor element in the parent view for this embedded view.</source>
          <target state="translated">この埋め込みビューの親ビューのアンカー要素。</target>
        </trans-unit>
        <trans-unit id="6c969a2cfd58f9109f69d4b274dd9f759efa168a" translate="yes" xml:space="preserve">
          <source>The angular i18n extractor tool generates a file with a translation unit entry for each &lt;code&gt;i18n&lt;/code&gt; attribute in a template. By default, it assigns each translation unit a unique id such as this one:</source>
          <target state="translated">角度付きi18n抽出ツールは、テンプレート内の各 &lt;code&gt;i18n&lt;/code&gt; 属性の変換単位エントリを含むファイルを生成します。デフォルトでは、各翻訳単位に次のような一意のIDを割り当てます。</target>
        </trans-unit>
        <trans-unit id="b4ed70517cf63237f526da9af09e8982010ac6a8" translate="yes" xml:space="preserve">
          <source>The animation &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function emits &lt;em&gt;callbacks&lt;/em&gt; when it starts and when it finishes. In the example below we have a component that contains an &lt;code&gt;openClose&lt;/code&gt; trigger.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数は、開始時と終了時に&lt;em&gt;コールバックを発行します&lt;/em&gt;。以下の例では、 &lt;code&gt;openClose&lt;/code&gt; トリガーを含むコンポーネントがあります。</target>
        </trans-unit>
        <trans-unit id="8f36fc312f8edc026c035d420a1e31c8179cfbb5" translate="yes" xml:space="preserve">
          <source>The animation &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function emits &lt;em&gt;callbacks&lt;/em&gt; when it starts and when it finishes. The example below features a component that contains an &lt;code&gt;openClose&lt;/code&gt; trigger.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数は、開始時と終了時に&lt;em&gt;コールバックを発行します&lt;/em&gt;。以下の例は、 &lt;code&gt;openClose&lt;/code&gt; トリガーを含むコンポーネントを特徴としています。</target>
        </trans-unit>
        <trans-unit id="32c58e882c1163e1488d4a8deb42e2f4a125fcae" translate="yes" xml:space="preserve">
          <source>The animation code does the following after styling the views:</source>
          <target state="translated">アニメーションのコードは、ビューをスタイリングした後に以下のような処理をしています。</target>
        </trans-unit>
        <trans-unit id="39510d97650c99c8d731a36b1b5cab49af76350b" translate="yes" xml:space="preserve">
          <source>The animation definition does several things:</source>
          <target state="translated">アニメーションの定義はいくつかのことをしています。</target>
        </trans-unit>
        <trans-unit id="5c15153dc0c0d7f3e168540e74067114fac5f559" translate="yes" xml:space="preserve">
          <source>The animation does the following:</source>
          <target state="translated">アニメーションは以下のようなことをします。</target>
        </trans-unit>
        <trans-unit id="359225b3095525891affab38ee53ef7bf8f5aa89" translate="yes" xml:space="preserve">
          <source>The animation is executed or triggered when the expression value changes to a new state.</source>
          <target state="translated">アニメーションは、式の値が新しい状態に変化したときに実行またはトリガーされます。</target>
        </trans-unit>
        <trans-unit id="e37c1ace322c9054988c345df432382153656a5c" translate="yes" xml:space="preserve">
          <source>The animation phase in which the callback was invoked, one of &quot;start&quot; or &quot;done&quot;.</source>
          <target state="translated">コールバックが呼び出されたアニメーションのフェーズ。</target>
        </trans-unit>
        <trans-unit id="880fbe2cde1e59f262c1b3a83415a83ff7f6bba6" translate="yes" xml:space="preserve">
          <source>The answer is grounded in a fundamental characteristic of the Angular dependency-injection system. An injector can add providers &lt;em&gt;until it's first used&lt;/em&gt;. Once an injector starts creating and delivering services, its provider list is frozen; no new providers are allowed.</source>
          <target state="translated">答えは、角度依存性注入システムの基本的な特性に基づいています。インジェクターは、&lt;em&gt;最初に使用されるまで&lt;/em&gt;プロバイダーを追加できます。インジェクターがサービスの作成と配信を開始すると、そのプロバイダーリストは凍結されます。新しいプロバイダーは許可されません。</target>
        </trans-unit>
        <trans-unit id="a0e08c28364e929009cd4fcd1fafe952fc3e50ec" translate="yes" xml:space="preserve">
          <source>The app ID to use in withServerTransition().</source>
          <target state="translated">withServerTransition()で使用するアプリID。</target>
        </trans-unit>
        <trans-unit id="25a56b32ae6b92c99875f10e2a3113c098b85214" translate="yes" xml:space="preserve">
          <source>The app and its translation file</source>
          <target state="translated">アプリとその翻訳ファイル</target>
        </trans-unit>
        <trans-unit id="db254e7060d83009dcee1a2432f520bc87c194ef" translate="yes" xml:space="preserve">
          <source>The app displays &quot;Miss Marple&quot; as the user instead of the default &quot;Sherlock Holmes&quot;.</source>
          <target state="translated">アプリでは、デフォルトの「シャーロック・ホームズ」の代わりに「ミス・マープル」をユーザーとして表示します。</target>
        </trans-unit>
        <trans-unit id="027095d9f26f0b5344d94ebc0591a3e4f039f94d" translate="yes" xml:space="preserve">
          <source>The app identifier to use for transition.</source>
          <target state="translated">トランジションに使用するアプリ識別子です。</target>
        </trans-unit>
        <trans-unit id="c5d365172cdf1df024ceeae484b684f201469335" translate="yes" xml:space="preserve">
          <source>The app is already set up to use the Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; and to use routing to navigate to the product list component you modified earlier. This section shows you how to define a route to show individual product details.</source>
          <target state="translated">アプリは、Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を使用し、ルーティングを使用して以前に変更した製品リストコンポーネントに移動するように既に設定されています。このセクションでは、個々の製品の詳細を表示するルートを定義する方法を示します。</target>
        </trans-unit>
        <trans-unit id="0ac4d8abd7c8f6886de0bd1d638135e72499484d" translate="yes" xml:space="preserve">
          <source>The app is already set up to use the Angular router and to use routing to navigate to the product list component you modified earlier. Let's define a route to show individual product details.</source>
          <target state="translated">アプリはすでにAngularルーターを使用し、ルーティングを使用して先ほど修正した商品一覧コンポーネントに移動するように設定されています。それでは、個別の商品詳細を表示するためのルートを定義してみましょう。</target>
        </trans-unit>
        <trans-unit id="afc7c88884fd7e0ec8cfc8b97f304e1f0a3e0b9e" translate="yes" xml:space="preserve">
          <source>The app now displays the name and description of each product in the list. Notice that the final product does not have a description paragraph. Because the product's description property is empty, Angular doesn't create the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element&amp;mdash;including the word &quot;Description&quot;.</source>
          <target state="translated">アプリはリスト内の各製品の名前と説明を表示します。最終製品には説明の段落がないことに注意してください。製品の説明プロパティが空であるため、Angularは&quot;説明&quot;という単語を含む &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素を作成しません。</target>
        </trans-unit>
        <trans-unit id="80b00fe83f126d464662ae9b7cb3f238f2be6cf8" translate="yes" xml:space="preserve">
          <source>The app now has a product list and sharing feature. In the process, you've learned to use five common features of Angular's template syntax:</source>
          <target state="translated">アプリに商品一覧と共有機能が追加されました。その過程で、Angularのテンプレート構文の5つの共通機能を使うことを学びました。</target>
        </trans-unit>
        <trans-unit id="0cdfea076c0644e956bc7ea95c84f491e7fb9c75" translate="yes" xml:space="preserve">
          <source>The app now shows unexpected behavior: When the user adds flying heroes, none of them appear under &quot;Heroes who fly.&quot; This happens because the code that adds a hero does so by pushing it onto the &lt;code&gt;heroes&lt;/code&gt; array:</source>
          <target state="translated">アプリに予期しない動作が表示されるようになりました。ユーザーが飛行ヒーローを追加すると、「飛行するヒーロー」の下に表示されません。これは、ヒーローを追加するコードが &lt;code&gt;heroes&lt;/code&gt; 配列にプッシュすることで追加するために発生します。</target>
        </trans-unit>
        <trans-unit id="4004b359d1942125b76739a78f40d94105d5d4b8" translate="yes" xml:space="preserve">
          <source>The app probably defines more than a dozen financial instrument components. If you're lucky, they all implement the same base class whose API your &lt;code&gt;NewsComponent&lt;/code&gt; understands.</source>
          <target state="translated">このアプリはおそらく、1ダース以上の金融商品コンポーネントを定義しています。運が良ければ、それらはすべて、 &lt;code&gt;NewsComponent&lt;/code&gt; が理解するAPIを持つ同じ基本クラスを実装します。</target>
        </trans-unit>
        <trans-unit id="dbbf8f3b96fb7d36c8dd7548739bff46943fc834" translate="yes" xml:space="preserve">
          <source>The app renders with a row of navigation buttons and the &lt;em&gt;Heroes&lt;/em&gt; view with its list of heroes.</source>
          <target state="translated">アプリは、ナビゲーションボタンの行と、&lt;em&gt;ヒーローの&lt;/em&gt;リストを含むヒーロービューでレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="8180573e4452faa80c9d5ca340e48884d6391a8a" translate="yes" xml:space="preserve">
          <source>The app root with the navigation links.</source>
          <target state="translated">ナビゲーションリンクのあるアプリルート。</target>
        </trans-unit>
        <trans-unit id="6a56d757961d70a0621db9660baa94da256fbc99" translate="yes" xml:space="preserve">
          <source>The app's code defines the data directly inside the component, which isn't best practice. In a simple demo, however, it's fine.</source>
          <target state="translated">アプリのコードは、コンポーネントの内部で直接データを定義していますが、これはベストプラクティスではありません。しかし、シンプルなデモでは問題ありません。</target>
        </trans-unit>
        <trans-unit id="ff5f015f00e1b7bcc2b5b1966f795b0d2d4559e6" translate="yes" xml:space="preserve">
          <source>The appendix material isn't essential. Continued reading is for the curious.</source>
          <target state="translated">付録の資料は必須ではない 続きを読むのは好奇心旺盛な人のためのものです。</target>
        </trans-unit>
        <trans-unit id="b9a3afbab00f003cf626b8798a7fe9cd10bab21f" translate="yes" xml:space="preserve">
          <source>The application builder uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; build tool, with default configuration options specified in the workspace configuration file (&lt;code&gt;angular.json&lt;/code&gt;) or with a named alternative configuration. A &quot;production&quot; configuration is created by default when you use the CLI to create the project, and you can use that configuration by specifying the &lt;code&gt;--configuration=&quot;production&quot;&lt;/code&gt; or the &lt;code&gt;--prod&lt;/code&gt; option.</source>
          <target state="translated">アプリケーションビルダーは、ワークスペース構成ファイル（ &lt;code&gt;angular.json&lt;/code&gt; ）で指定されたデフォルトの構成オプションまたは名前付きの代替構成を使用して、&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;ビルドツールを使用します。CLIを使用してプロジェクトを作成すると、デフォルトで「本番」構成が作成されます。この構成は、 &lt;code&gt;--prod&lt;/code&gt; &lt;code&gt;--configuration=&quot;production&quot;&lt;/code&gt; または--prodオプションを指定することで使用できます。</target>
        </trans-unit>
        <trans-unit id="9dd362d11a1ef5a6531528132f21de5203087f19" translate="yes" xml:space="preserve">
          <source>The application builder uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; build tool, with default configuration options specified in the workspace configuration file (&lt;code&gt;angular.json&lt;/code&gt;) or with a named alternative configuration. A &quot;production&quot; configuration is created by default when you use the CLI to create the project, and you can use that configuration by specifying the &lt;code&gt;--configuration=&quot;production&quot;&lt;/code&gt; or the &lt;code&gt;--prod=&quot;true&quot;&lt;/code&gt; option.</source>
          <target state="translated">アプリケーションビルダーは、ワークスペース構成ファイル（ &lt;code&gt;angular.json&lt;/code&gt; ）で指定されたデフォルト構成オプションを使用するか、名前付きの代替構成を使用して、&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;ビルドツールを使用します。CLIを使用してプロジェクトを作成すると、デフォルトで「本番」構成が作成され、 &lt;code&gt;--prod=&quot;true&quot;&lt;/code&gt; &lt;code&gt;--configuration=&quot;production&quot;&lt;/code&gt; または--prod = &quot;true&quot;オプションを指定することでその構成を使用できます。</target>
        </trans-unit>
        <trans-unit id="d185e637c749a1de6fd1f1bdb29eb36d9acb4054" translate="yes" xml:space="preserve">
          <source>The application continues to work just the same, and you can use &lt;code&gt;AppRoutingModule&lt;/code&gt; as the central place to maintain future routing configuration.</source>
          <target state="translated">アプリケーションは引き続き同じように &lt;code&gt;AppRoutingModule&lt;/code&gt; し、AppRoutingModuleを中心的な場所として使用して、将来のルーティング構成を維持できます。</target>
        </trans-unit>
        <trans-unit id="6b0dcdc763eccf27206af346ed5971a7a9acc7e5" translate="yes" xml:space="preserve">
          <source>The application enables the Forms feature and registers the created form component.</source>
          <target state="translated">アプリケーションは、フォーム機能を有効にし、作成したフォームコンポーネントを登録します。</target>
        </trans-unit>
        <trans-unit id="f896208078e253c6d0d2530b1eb7048144ab3290" translate="yes" xml:space="preserve">
          <source>The application fails if the user clicks that button because you haven't defined a &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; route yet.</source>
          <target state="translated">&lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; ルートをまだ定義していないためにユーザーがそのボタンをクリックすると、アプリケーションは失敗します。</target>
        </trans-unit>
        <trans-unit id="5a42b907321006905eeb06152c339b50f8d052cb" translate="yes" xml:space="preserve">
          <source>The application has a configured router. The shell component has a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; where it can display views produced by the router. It has &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;s that users can click to navigate via the router.</source>
          <target state="translated">アプリケーションにはルーターが設定されています。シェルコンポーネントには、ルーターによって生成されたビューを表示できる &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; があります。それは持ってい &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 、ユーザーがルーターを経由してナビゲートするためにクリックできるというのを。</target>
        </trans-unit>
        <trans-unit id="c989c3b0f1e6e8f53d9a09edb55240976ed8f5a3" translate="yes" xml:space="preserve">
          <source>The application has three main feature areas:</source>
          <target state="translated">このアプリケーションには、主に3つの特徴があります。</target>
        </trans-unit>
        <trans-unit id="3065b933415b7cf762046554acdd3e29eb0e7df7" translate="yes" xml:space="preserve">
          <source>The application is currently bootstrapped using the AngularJS &lt;code&gt;ng-app&lt;/code&gt; directive attached to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element of the host page. This will no longer work in the hybrid app. Switch to the &lt;a href=&quot;upgrade#bootstrapping-hybrid-applications&quot;&gt;ngUpgrade bootstrap&lt;/a&gt; method instead.</source>
          <target state="translated">アプリケーションは現在、ホストページの &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 要素に添付されたAngularJS &lt;code&gt;ng-app&lt;/code&gt; ディレクティブを使用してブートストラップされています。これは、ハイブリッドアプリでは機能しなくなります。代わりに、&lt;a href=&quot;upgrade#bootstrapping-hybrid-applications&quot;&gt;ngUpgradeブートストラップ&lt;/a&gt;メソッドに切り替えます。</target>
        </trans-unit>
        <trans-unit id="56483481d00ea138c4f54373a7ad2676459f0061" translate="yes" xml:space="preserve">
          <source>The application is still bootstrapped as a hybrid app. There's no need for that anymore.</source>
          <target state="translated">ハイブリッドアプリとしてブートストラップされたままです。もうその必要はありません。</target>
        </trans-unit>
        <trans-unit id="659c0372b9f399b6beeebc7431038c78d51f057e" translate="yes" xml:space="preserve">
          <source>The application launches by bootstrapping the root &lt;code&gt;AppModule&lt;/code&gt;, which is also referred to as an &lt;code&gt;entryComponent&lt;/code&gt;. Among other things, the bootstrapping process creates the component(s) listed in the &lt;code&gt;bootstrap&lt;/code&gt; array and inserts each one into the browser DOM.</source>
          <target state="translated">アプリケーションは、ルート &lt;code&gt;AppModule&lt;/code&gt; をブートストラップすることによって起動します。これは、 &lt;code&gt;entryComponent&lt;/code&gt; とも呼ばれます。とりわけ、ブートストラッププロセスは、 &lt;code&gt;bootstrap&lt;/code&gt; 配列にリストされたコンポーネントを作成し、それぞれをブラウザのDOMに挿入します。</target>
        </trans-unit>
        <trans-unit id="2612b202ec4ed4dd6768f7b59b7e18c77e0da23e" translate="yes" xml:space="preserve">
          <source>The application needs a &lt;strong&gt;default route&lt;/strong&gt; to a valid page. The default page for this app is the list of heroes. The app should navigate there as if the user clicked the &quot;Heroes&quot; link or pasted &lt;code&gt;localhost:4200/heroes&lt;/code&gt; into the address bar.</source>
          <target state="translated">アプリケーションには、有効なページへの&lt;strong&gt;デフォルトルート&lt;/strong&gt;が必要です。このアプリのデフォルトのページはヒーローのリストです。アプリは、ユーザーが「ヒーロー」リンクをクリックするか、 &lt;code&gt;localhost:4200/heroes&lt;/code&gt; をアドレスバーに貼り付けたかのようにそこに移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="092f74418595cfa6d21b651c2f1df92beae38cb2" translate="yes" xml:space="preserve">
          <source>The application needs a default route to a valid page. The default page for this app is the list of heroes. The app should navigate there as if the user clicked the &quot;Heroes&quot; link or pasted &lt;code&gt;localhost:4200/heroes&lt;/code&gt; into the address bar.</source>
          <target state="translated">アプリケーションには、有効なページへのデフォルトルートが必要です。このアプリのデフォルトページはヒーローのリストです。アプリは、ユーザーが「ヒーロー」リンクをクリックするか、 &lt;code&gt;localhost:4200/heroes&lt;/code&gt; をアドレスバーに貼り付けるかのように、そこに移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="56d4a232475d28d6ebfb5660d2c232d4d967e1c8" translate="yes" xml:space="preserve">
          <source>The application now has a basic title. Next you will create a new component to display hero information and place that component in the application shell.</source>
          <target state="translated">これでアプリケーションは基本的なタイトルを持つようになりました。次に、ヒーロー情報を表示するための新しいコンポーネントを作成し、そのコンポーネントをアプリケーションシェルに配置します。</target>
        </trans-unit>
        <trans-unit id="829934fd6d860a7ab62d3a61aa92f15b4a6b5b9a" translate="yes" xml:space="preserve">
          <source>The application startup process is called &lt;strong&gt;bootstrapping&lt;/strong&gt;.</source>
          <target state="translated">アプリケーションの起動プロセスは、&lt;strong&gt;ブートストラップ&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="2fe6858c50e849cafada85f8462c70c2503bf77f" translate="yes" xml:space="preserve">
          <source>The application still works. Clicking &quot;back&quot; returns to the hero list view.</source>
          <target state="translated">アプリはまだ動作しています。戻る」をクリックするとヒーローリストビューに戻ります。</target>
        </trans-unit>
        <trans-unit id="046b8cfa4320e7c42d24954dca5b601917075b16" translate="yes" xml:space="preserve">
          <source>The application that StackBlitz generates for this guide comes with predefined shipping data in &lt;code&gt;assets/shipping.json&lt;/code&gt;. Use this data to add shipping prices for items in the cart.</source>
          <target state="translated">StackBlitzは、このガイドのために生成するアプリケーションは、で定義済みの出荷データが付属してい &lt;code&gt;assets/shipping.json&lt;/code&gt; 。このデータを使用して、カート内の商品の送料を追加します。</target>
        </trans-unit>
        <trans-unit id="f8660ff77e53d3af1d6b5d25c45bdc8f5312cc9f" translate="yes" xml:space="preserve">
          <source>The application will fail if the user clicks that button because you haven't defined a &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; route yet.</source>
          <target state="translated">&lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; ルートをまだ定義していないため、ユーザーがそのボタンをクリックすると、アプリケーションは失敗します。</target>
        </trans-unit>
        <trans-unit id="ed54cdb1c808ba8673445f1d2779954ad42d3eed" translate="yes" xml:space="preserve">
          <source>The application-specific configuration files for the root application reside at the workspace root level. For a multi-project workspace, project-specific configuration files are in the project root, under &lt;code&gt;projects/project-name/&lt;/code&gt;.</source>
          <target state="translated">ルートアプリケーションのアプリケーション固有の構成ファイルは、ワークスペースのルートレベルにあります。マルチプロジェクトワークスペースの場合、プロジェクト固有の構成ファイルは、プロジェクトルートの &lt;code&gt;projects/project-name/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="13ff0efc21d065f969a6bbdb7ff0db29bd8d03e9" translate="yes" xml:space="preserve">
          <source>The architecture of an Angular application relies on certain fundamental concepts. The basic building blocks of the Angular framework are Angular components that are organized into &lt;em&gt;NgModules&lt;/em&gt;. NgModules collect related code into functional sets; an Angular app is defined by a set of NgModules. An app always has at least a &lt;em&gt;root module&lt;/em&gt; that enables bootstrapping, and typically has many more &lt;em&gt;feature modules&lt;/em&gt;.</source>
          <target state="translated">Angularアプリケーションのアーキテクチャは、特定の基本的な概念に依存しています。Angularフレームワークの基本的な構成要素は、&lt;em&gt;NgModulesに&lt;/em&gt;編成されたAngularコンポーネントです。NgModuleは、関連するコードを機能セットに収集します。Angularアプリは、一連のNgModuleによって定義されます。アプリには常に、ブートストラップを有効にする&lt;em&gt;ルートモジュール&lt;/em&gt;が少なくともあり、通常はさらに多くの&lt;em&gt;機能モジュールがあります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="212fe89436e2176aa80e03136d002159d641788a" translate="yes" xml:space="preserve">
          <source>The associated Angular directives are prefixed with &lt;code&gt;form&lt;/code&gt;, such as &lt;code&gt;formControl&lt;/code&gt;, &lt;code&gt;formGroup&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関連する角度指令が付いされ &lt;code&gt;form&lt;/code&gt; のような、 &lt;code&gt;formControl&lt;/code&gt; 、 &lt;code&gt;formGroup&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d1134f1a0eb2fdd5f3a8e0fb4e5b2e806b71dc5" translate="yes" xml:space="preserve">
          <source>The associated Angular directives are prefixed with &lt;code&gt;ng&lt;/code&gt; such as &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodelgroup&quot;&gt;ngModelGroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関連する角度指令が付いさ &lt;code&gt;ng&lt;/code&gt; のような &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodelgroup&quot;&gt;ngModelGroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b789263e42e1ba12a8ef45ee17e36b2666f38151" translate="yes" xml:space="preserve">
          <source>The asterisk (*) prefix</source>
          <target state="translated">アスタリスク (*)接頭辞</target>
        </trans-unit>
        <trans-unit id="cf3cb31b10ef2ee87b7198fc18b7ebdda8470524" translate="yes" xml:space="preserve">
          <source>The asterisk (*) syntax is more clear than the desugared form. Use &lt;a href=&quot;structural-directives#ng-container&quot;&gt;&amp;lt;ng-container&amp;gt;&lt;/a&gt; when there's no single element to host the directive.</source>
          <target state="translated">アスタリスク（*）の構文は、脱糖された形式よりも明確です。ディレクティブをホストする単一の要素がない場合は、&lt;a href=&quot;structural-directives#ng-container&quot;&gt;&amp;lt;ng-container&amp;gt;を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="751e6d020be23e3837cb4d0404a963f68690e654" translate="yes" xml:space="preserve">
          <source>The asterisk is &quot;syntactic sugar&quot; for something a bit more complicated. Internally, Angular translates the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; into a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;em&gt;element&lt;/em&gt;, wrapped around the host element, like this.</source>
          <target state="translated">アスタリスクは、もう少し複雑なものの「構文糖」です。内部的に、Angularは &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;を &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; &lt;em&gt;要素&lt;/em&gt;に変換し、このようにホスト要素を囲み&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3b4a29f29c11882e809acfcb05aa2c373ab6faac" translate="yes" xml:space="preserve">
          <source>The async &lt;em&gt;beforeEach&lt;/em&gt;</source>
          <target state="translated">非同期&lt;em&gt;beforeEach&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c45708a98d5362eedbae57d26a0c6334302defc" translate="yes" xml:space="preserve">
          <source>The async observable was produced by an &lt;code&gt;asyncData&lt;/code&gt; helper. The &lt;code&gt;asyncData&lt;/code&gt; helper is a utility function that you'll have to write yourself, or you can copy this one from the sample code.</source>
          <target state="translated">非同期オブザーバブルは &lt;code&gt;asyncData&lt;/code&gt; ヘルパーによって作成されました。 &lt;code&gt;asyncData&lt;/code&gt; のヘルパーは、あなた自身を記述する必要があります、またはあなたがサンプルコードからこれをコピーできるというユーティリティ関数です。</target>
        </trans-unit>
        <trans-unit id="20002a8d76c8443af179a912eabfe7d2bd723ba6" translate="yes" xml:space="preserve">
          <source>The async validators registered with this group.</source>
          <target state="translated">このグループに登録されている非同期バリデータ。</target>
        </trans-unit>
        <trans-unit id="2fbd14477caf9ebf68f9c80df83d21e5c5c18a6c" translate="yes" xml:space="preserve">
          <source>The attribute name.</source>
          <target state="translated">属性名です。</target>
        </trans-unit>
        <trans-unit id="46f07f08fc1b4870de9353911f6a05a26df4cdc3" translate="yes" xml:space="preserve">
          <source>The author of a guide page is responsible for the code sample that supports that page. The author must also write end-to-end tests for the sample.</source>
          <target state="translated">ガイドページの作成者は、そのページをサポートするコードサンプルの責任者です。作成者はサンプルのエンドツーエンドテストも書かなければなりません。</target>
        </trans-unit>
        <trans-unit id="c55158bff8f14a5af007abfba787b3d08fdaf5eb" translate="yes" xml:space="preserve">
          <source>The authority to change the &lt;code&gt;navigation.json&lt;/code&gt; file is limited to a few core team members. But for a new guide page, you should suggest a navigation title and position in the left-side navigation panel called the &quot;side nav&quot;.</source>
          <target state="translated">&lt;code&gt;navigation.json&lt;/code&gt; ファイルを変更する権限は、少数のコアチームメンバーに制限されています。ただし、新しいガイドページの場合は、「サイドナビゲーション」と呼ばれる左側のナビゲーションパネルでナビゲーションのタイトルと位置を提案する必要があります。</target>
        </trans-unit>
        <trans-unit id="c9cca8eb36b32cb72b65257ae685ecc71bda7db3" translate="yes" xml:space="preserve">
          <source>The balance of this guide is a set of appendices that elaborate some of the points you covered quickly above.</source>
          <target state="translated">このガイドのバランスは、上記のように素早くカバーしたポイントの一部を凝らした付録セットになっています。</target>
        </trans-unit>
        <trans-unit id="62e80f8200c53dbaacf1f70959c15d031920c2db" translate="yes" xml:space="preserve">
          <source>The base &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration for projects in the workspace. All other configuration files inherit from this base file. For more information, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;Configuration inheritance with extends&lt;/a&gt; section of the TypeScript documentation.</source>
          <target state="translated">ワークスペース内のプロジェクトの基本&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;構成。他のすべての構成ファイルは、このベースファイルを継承します。詳細については、TypeScriptドキュメントの「&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;extends&lt;/a&gt;を使用した構成の継承」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="522287acd1fcc8d0b65512fb495f5cbde0a52b11" translate="yes" xml:space="preserve">
          <source>The base URL for resolving absolute URL for HTTP requests. It must be set if &lt;code&gt;useAbsoluteUrl&lt;/code&gt; is true, and must consist of protocol, hostname, and optional port. This option has no effect if &lt;code&gt;useAbsoluteUrl&lt;/code&gt; is not enabled.</source>
          <target state="translated">HTTPリクエストの絶対URLを解決するためのベースURL。 &lt;code&gt;useAbsoluteUrl&lt;/code&gt; がtrueの場合に設定する必要があり、プロトコル、ホスト名、およびオプションのポートで構成されている必要があります。 &lt;code&gt;useAbsoluteUrl&lt;/code&gt; が有効になっていない場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="28e0d32989f227e01be5c403027f23cddf2ddede" translate="yes" xml:space="preserve">
          <source>The base URL for the URL</source>
          <target state="translated">のベースとなるURL</target>
        </trans-unit>
        <trans-unit id="57099de5f5cfe3bbdb7d5e04cfb9753de8a79ecf" translate="yes" xml:space="preserve">
          <source>The base class to implement.</source>
          <target state="translated">実装する基底クラス。</target>
        </trans-unit>
        <trans-unit id="3535061e9163fbc474fb7bea7e4b0e4221db4845" translate="yes" xml:space="preserve">
          <source>The base file &lt;code&gt;environment.ts&lt;/code&gt;, contains the default environment settings. For example:</source>
          <target state="translated">基本ファイル &lt;code&gt;environment.ts&lt;/code&gt; には、デフォルトの環境設定が含まれています。例えば：</target>
        </trans-unit>
        <trans-unit id="eba0a2970a5d5416f712668687e7f717166ec56a" translate="yes" xml:space="preserve">
          <source>The base for the URL</source>
          <target state="translated">URLのベース</target>
        </trans-unit>
        <trans-unit id="f719337e6149dc965109a2c27fc6710518952795" translate="yes" xml:space="preserve">
          <source>The baseline size for comparison.</source>
          <target state="translated">比較のためのベースラインサイズ。</target>
        </trans-unit>
        <trans-unit id="acd2918d5aedfdef3ee567f11a80ee9bf8efacd9" translate="yes" xml:space="preserve">
          <source>The basic NgModule</source>
          <target state="translated">基本的なNgModule</target>
        </trans-unit>
        <trans-unit id="effcca684bb65593213fc80d2f4bc7710498f947" translate="yes" xml:space="preserve">
          <source>The basic building blocks of an Angular application are &lt;em&gt;NgModules&lt;/em&gt;, which provide a compilation context for &lt;em&gt;components&lt;/em&gt;. NgModules collect related code into functional sets; an Angular app is defined by a set of NgModules. An app always has at least a &lt;em&gt;root module&lt;/em&gt; that enables bootstrapping, and typically has many more &lt;em&gt;feature modules&lt;/em&gt;.</source>
          <target state="translated">Angularアプリケーションの基本的な&lt;em&gt;構成要素&lt;/em&gt;は&lt;em&gt;NgModulesで&lt;/em&gt;、&lt;em&gt;コンポーネントに&lt;/em&gt;コンパイルコンテキストを提供し&lt;em&gt;ます&lt;/em&gt;。NgModuleは関連するコードを機能セットに収集します。AngularアプリはNgModuleのセットで定義されます。アプリには常に、少なくともブートストラップを可能にする&lt;em&gt;ルートモジュール&lt;/em&gt;があり、通常はさらに多くの&lt;em&gt;機能モジュールがあります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1cefca9c2b8409ec18d9ee7ef0e08cb1327edec9" translate="yes" xml:space="preserve">
          <source>The basic version can evolve to support a richer variety of questions, more graceful rendering, and superior user experience.</source>
          <target state="translated">基本バージョンでは、より豊富な質問に対応し、より優雅なレンダリング、優れたユーザーエクスペリエンスを実現するために進化させることができます。</target>
        </trans-unit>
        <trans-unit id="6650d02a072a3d2f1f14aae05a80f687c7755565" translate="yes" xml:space="preserve">
          <source>The basics of &lt;a href=&quot;architecture-components#template-syntax&quot;&gt;Angular template syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;architecture-components#template-syntax&quot;&gt;Angularテンプレート構文&lt;/a&gt;の基本。</target>
        </trans-unit>
        <trans-unit id="891e8b0d931b98e89c149cf4d8b8e9a75dec7e52" translate="yes" xml:space="preserve">
          <source>The basics of &lt;a href=&quot;template-syntax&quot;&gt;Angular template syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;template-syntax&quot;&gt;Angularテンプレート構文&lt;/a&gt;の基本。</target>
        </trans-unit>
        <trans-unit id="fcfb49ac405d1244456d49ab443227db937f7f95" translate="yes" xml:space="preserve">
          <source>The beauty of marble testing is in the visual definition of the observable streams. This test defines a &lt;a href=&quot;testing#cold-observable&quot;&gt;&lt;em&gt;cold&lt;/em&gt; observable&lt;/a&gt; that waits three &lt;a href=&quot;testing#marble-frame&quot;&gt;frames&lt;/a&gt; (&lt;code&gt;---&lt;/code&gt;), emits a value (&lt;code&gt;x&lt;/code&gt;), and completes (&lt;code&gt;|&lt;/code&gt;). In the second argument you map the value marker (&lt;code&gt;x&lt;/code&gt;) to the emitted value (&lt;code&gt;testQuote&lt;/code&gt;).</source>
          <target state="translated">大理石のテストの美しさは、観測可能なストリームの視覚的な定義にあります。このテストは、3 &lt;a href=&quot;testing#marble-frame&quot;&gt;フレーム&lt;/a&gt;待機（ &lt;code&gt;---&lt;/code&gt; ）、値（ &lt;code&gt;x&lt;/code&gt; ）を発行、完了（ &lt;code&gt;|&lt;/code&gt; ）する&lt;a href=&quot;testing#cold-observable&quot;&gt;&lt;em&gt;コールド&lt;/em&gt;オブザーバブル&lt;/a&gt;を定義します。2番目の引数では、値マーカー（ &lt;code&gt;x&lt;/code&gt; ）を放出された値（ &lt;code&gt;testQuote&lt;/code&gt; ）にマップします。</target>
        </trans-unit>
        <trans-unit id="043f7bfbada1679dd54dd8a56e0f46a600dbbd8c" translate="yes" xml:space="preserve">
          <source>The beauty of marble testing is in the visual definition of the observable streams. This test defines a &lt;a href=&quot;testing-components-scenarios#cold-observable&quot;&gt;&lt;em&gt;cold&lt;/em&gt; observable&lt;/a&gt; that waits three &lt;a href=&quot;testing-components-scenarios#marble-frame&quot;&gt;frames&lt;/a&gt; (&lt;code&gt;---&lt;/code&gt;), emits a value (&lt;code&gt;x&lt;/code&gt;), and completes (&lt;code&gt;|&lt;/code&gt;). In the second argument you map the value marker (&lt;code&gt;x&lt;/code&gt;) to the emitted value (&lt;code&gt;testQuote&lt;/code&gt;).</source>
          <target state="translated">大理石のテストの美しさは、観察可能なストリームの視覚的な定義にあります。このテストは、3&lt;a href=&quot;testing-components-scenarios#marble-frame&quot;&gt;フレーム&lt;/a&gt;（ &lt;code&gt;---&lt;/code&gt; ）を待機し、値（ &lt;code&gt;x&lt;/code&gt; ）を発行し、（ &lt;code&gt;|&lt;/code&gt; ）を完了する&lt;a href=&quot;testing-components-scenarios#cold-observable&quot;&gt;&lt;em&gt;コールド&lt;/em&gt;オブザーバブル&lt;/a&gt;を定義します。2番目の引数では、値マーカー（ &lt;code&gt;x&lt;/code&gt; ）を出力された値（ &lt;code&gt;testQuote&lt;/code&gt; ）にマップします。</target>
        </trans-unit>
        <trans-unit id="2edba611517a05b39ecce086b35051547ded4fc7" translate="yes" xml:space="preserve">
          <source>The behavior is similar when you write a constructor that requires an injected class-based dependency. When you define a constructor parameter with the &lt;code&gt;HeroService&lt;/code&gt; class type, Angular knows to inject the service associated with that &lt;code&gt;HeroService&lt;/code&gt; class token:</source>
          <target state="translated">注入されたクラスベースの依存関係を必要とするコンストラクターを作成するときの動作は似ています。 &lt;code&gt;HeroService&lt;/code&gt; クラスタイプでコンストラクターパラメーターを定義すると、Angularはその &lt;code&gt;HeroService&lt;/code&gt; クラストークンに関連付けられたサービスを注入することを認識します。</target>
        </trans-unit>
        <trans-unit id="32153d084333f937ba427f5295fec97c1fe75cf8" translate="yes" xml:space="preserve">
          <source>The binding conveys information about the event. This information can include data values such as an event object, string, or number named &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">バインディングは、イベントに関する情報を伝えます。この情報には、 &lt;code&gt;$event&lt;/code&gt; という名前のイベントオブジェクト、文字列、数値などのデータ値を含めることができます。</target>
        </trans-unit>
        <trans-unit id="7d0b9ef8d2bdf9e1a86196d518bf9f9db67ec13e" translate="yes" xml:space="preserve">
          <source>The binding executes the statement within a context that includes the DOM event object, &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">バインディングは、DOMイベントオブジェクト &lt;code&gt;$event&lt;/code&gt; を含むコンテキスト内でステートメントを実行します。</target>
        </trans-unit>
        <trans-unit id="e66feaf21874ec24c62d2c0bfdf3e80de0fdbb10" translate="yes" xml:space="preserve">
          <source>The binding matcher relies on AngularJS data binding</source>
          <target state="translated">バインディングマッチャーはAngularJSのデータバインディングに依存しています。</target>
        </trans-unit>
        <trans-unit id="fde66a8e4a2d1977e8552f1e09947ea468bf5e21" translate="yes" xml:space="preserve">
          <source>The bootstrap zone for the upgrade application</source>
          <target state="translated">アップグレードアプリケーションのブートストラップゾーン</target>
        </trans-unit>
        <trans-unit id="02e0a35afc164ea455b1247684f9f9299b769401" translate="yes" xml:space="preserve">
          <source>The bootstrapped root &lt;code&gt;AppComponent&lt;/code&gt; is an &lt;em&gt;entry component&lt;/em&gt;. True, its selector matches an element tag in &lt;code&gt;index.html&lt;/code&gt;. But &lt;code&gt;index.html&lt;/code&gt; isn't a component template and the &lt;code&gt;AppComponent&lt;/code&gt; selector doesn't match an element in any component template.</source>
          <target state="translated">ブートストラップされたルート &lt;code&gt;AppComponent&lt;/code&gt; は、&lt;em&gt;エントリコンポーネント&lt;/em&gt;です。True、そのセレクターは &lt;code&gt;index.html&lt;/code&gt; の要素タグと一致します。ただし、 &lt;code&gt;index.html&lt;/code&gt; はコンポーネントテンプレートではなく、 &lt;code&gt;AppComponent&lt;/code&gt; セレクターはどのコンポーネントテンプレートの要素とも一致しません。</target>
        </trans-unit>
        <trans-unit id="438a9cd3a363b134dfcd99e057df9d3a75cf0cef" translate="yes" xml:space="preserve">
          <source>The bootstrapped root component.</source>
          <target state="translated">ブートストラップされたルートコンポーネント。</target>
        </trans-unit>
        <trans-unit id="5399b75d7a78532d352ee3f6549ed287c3a81704" translate="yes" xml:space="preserve">
          <source>The brackets, &lt;code&gt;[]&lt;/code&gt;, cause Angular to evaluate the right-hand side of the assignment as a dynamic expression. Without the brackets, Angular treats the the right-hand side as a string literal and sets the property to that static value.</source>
          <target state="translated">角かっこ &lt;code&gt;[]&lt;/code&gt; を使用すると、Angularは割り当ての右側を動的な式として評価します。角かっこがない場合、Angularは右側を文字列リテラルとして扱い、プロパティをその静的な値に設定します。</target>
        </trans-unit>
        <trans-unit id="8ef4ee708285425cb9ef88beb31132640eba2132" translate="yes" xml:space="preserve">
          <source>The brackets, &lt;code&gt;[]&lt;/code&gt;, tell Angular to evaluate the template expression. If you omit the brackets, Angular treats the string as a constant and &lt;em&gt;initializes the target property&lt;/em&gt; with that string:</source>
          <target state="translated">角括弧 &lt;code&gt;[]&lt;/code&gt; は、テンプレート式を評価するようにAngularに指示します。角括弧を省略すると、Angularは文字列を定数として扱い、その文字列で&lt;em&gt;ターゲットプロパティ&lt;/em&gt;を&lt;em&gt;初期化&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="c1feb87ec9550df145615086e8f3767f244e3a08" translate="yes" xml:space="preserve">
          <source>The browser address bar shows &lt;code&gt;.../heroes&lt;/code&gt; as if you'd navigated there directly.</source>
          <target state="translated">ブラウザのアドレスバーには、直接そこに移動したかのように &lt;code&gt;.../heroes&lt;/code&gt; が表示されます。</target>
        </trans-unit>
        <trans-unit id="bd60d31fa4f304dfebce4165416af0762306c2cf" translate="yes" xml:space="preserve">
          <source>The browser does not download the service worker script and &lt;code&gt;ngsw.json&lt;/code&gt; manifest file.</source>
          <target state="translated">ブラウザーは、Service Workerスクリプトと &lt;code&gt;ngsw.json&lt;/code&gt; マニフェストファイルをダウンロードしません。</target>
        </trans-unit>
        <trans-unit id="4dff3dc3654746ecbf5404102b359a8b2ed8a409" translate="yes" xml:space="preserve">
          <source>The browser doesn't process the HTML and instead displays it raw, as follows.</source>
          <target state="translated">ブラウザはHTMLを処理せず、代わりに以下のように生で表示します。</target>
        </trans-unit>
        <trans-unit id="35b0e92376d69e4ef661396d137d20849c9d556f" translate="yes" xml:space="preserve">
          <source>The browser is a familiar model of application navigation:</source>
          <target state="translated">ブラウザはアプリケーションのナビゲーションでお馴染みのモデルです。</target>
        </trans-unit>
        <trans-unit id="15d36d861b545a684a9e5ea9c902708889325b8b" translate="yes" xml:space="preserve">
          <source>The browser now renders the following, omitting the previous examples for brevity:</source>
          <target state="translated">ブラウザは以下のように表示するようになりました。</target>
        </trans-unit>
        <trans-unit id="4e64586da0c751f5944b08cc25ed0266a7ab13d6" translate="yes" xml:space="preserve">
          <source>The browser refreshes and displays the app title and heroes link, but not the heroes list.</source>
          <target state="translated">ブラウザが更新され、アプリのタイトルとヒーローリンクは表示されますが、ヒーローリストは表示されません。</target>
        </trans-unit>
        <trans-unit id="133c2ebe14781b8826924474cf293ac9fc41ab61" translate="yes" xml:space="preserve">
          <source>The browser refreshes and displays the hero's information.</source>
          <target state="translated">ブラウザが更新され、主人公の情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="a8489bb56b8d3c19ce6ee0631e9a122a2265bf15" translate="yes" xml:space="preserve">
          <source>The browser refreshes and displays the new application title.</source>
          <target state="translated">ブラウザが更新され、新しいアプリケーションのタイトルが表示されます。</target>
        </trans-unit>
        <trans-unit id="10d2bffee74f9f32b1e61f1be54989dd1c6cc5fa" translate="yes" xml:space="preserve">
          <source>The browser refreshes and now the hero's name is displayed in capital letters.</source>
          <target state="translated">ブラウザが更新され、主人公の名前が大文字で表示されるようになりました。</target>
        </trans-unit>
        <trans-unit id="35ae0dc5e77b04c47f765fe14b310abb1d8a872a" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the app crashes with a compiler error. &lt;code&gt;HeroService&lt;/code&gt; doesn't have a &lt;code&gt;getHero()&lt;/code&gt; method. Add it now.</source>
          <target state="translated">ブラウザーが更新され、アプリがコンパイラエラーでクラッシュします。 &lt;code&gt;HeroService&lt;/code&gt; には &lt;code&gt;getHero()&lt;/code&gt; メソッドがありません。今すぐ追加してください。</target>
        </trans-unit>
        <trans-unit id="ddd180f39b4c9fc1fda12238a08d9a92883f1c13" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the app is working again. You can click a hero in the dashboard or in the heroes list and navigate to that hero's detail view.</source>
          <target state="translated">ブラウザが更新され、アプリが再び動作するようになります。ダッシュボードやヒーローリストでヒーローをクリックして、そのヒーローの詳細表示に移動することができます。</target>
        </trans-unit>
        <trans-unit id="e88d32f27973b4cfeee563874f1886550dc5ac79" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the app starts working again as it did before.</source>
          <target state="translated">ブラウザが更新され、以前と同じようにアプリが動き出す。</target>
        </trans-unit>
        <trans-unit id="ff713c5acce26c8a8f6436f37009b416e9435f49" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the page displays the list of heroes. Scroll to the bottom to see the message from the &lt;code&gt;HeroService&lt;/code&gt; in the message area. Click the &quot;clear&quot; button and the message area disappears.</source>
          <target state="translated">ブラウザが更新され、ページにヒーローのリストが表示されます。一番下までスクロールして、 &lt;code&gt;HeroService&lt;/code&gt; からのメッセージをメッセージ領域に表示します。「クリア」ボタンをクリックすると、メッセージ領域が消えます。</target>
        </trans-unit>
        <trans-unit id="cdb7b4eed65968a0c60496c1330166de228b5429" translate="yes" xml:space="preserve">
          <source>The browser should refresh and display the app title but not the list of heroes.</source>
          <target state="translated">ブラウザが更新され、アプリのタイトルは表示されますが、ヒーローのリストは表示されません。</target>
        </trans-unit>
        <trans-unit id="3980e997a7b117fe62ffce3f3b2a0b5e77fea676" translate="yes" xml:space="preserve">
          <source>The browser won't display an &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; within a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ブラウザは、 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 内に &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; を表示しません。</target>
        </trans-unit>
        <trans-unit id="14e80d1c5f056a696f1915bb5d74d05712d1d29b" translate="yes" xml:space="preserve">
          <source>The build process uses &lt;a href=&quot;glossary#ahead-of-time-aot-compilation&quot;&gt;ahead-of-time (AOT) compilation&lt;/a&gt; to produce a small, fast, ready-to-run app. With Ivy in Angular version 9, AOT is used by default for both development and production builds, and AOT is required to localize component templates.</source>
          <target state="translated">ビルドプロセスでは、&lt;a href=&quot;glossary#ahead-of-time-aot-compilation&quot;&gt;事前（AOT）コンパイル&lt;/a&gt;を使用して、小さく、高速で、すぐに実行できるアプリを作成します。Angularバージョン9のIvyでは、開発ビルドと本番ビルドの両方でデフォルトでAOTが使用され、コンポーネントテンプレートをローカライズするにはAOTが必要です。</target>
        </trans-unit>
        <trans-unit id="92146b9358486bbcf5077ab8741177ac14e2a2bf" translate="yes" xml:space="preserve">
          <source>The build step is important if you haven't published your library as an npm package and then installed the package back into your app from npm. For instance, if you clone your git repository and run &lt;code&gt;npm install&lt;/code&gt;, your editor will show the &lt;code&gt;my-lib&lt;/code&gt; imports as missing if you haven't yet built your library.</source>
          <target state="translated">ライブラリをnpmパッケージとして公開しておらず、パッケージをnpmからアプリに再度インストールしていない場合は、ビルドステップが重要です。たとえば、gitリポジトリのクローンを作成して &lt;code&gt;npm install&lt;/code&gt; を実行すると、ライブラリをまだ構築していない場合、エディターは &lt;code&gt;my-lib&lt;/code&gt; インポートを欠落していると表示します。</target>
        </trans-unit>
        <trans-unit id="b332d6a59c4de48eb194eed9848b874deab58d55" translate="yes" xml:space="preserve">
          <source>The build system for apps, &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt;, is based on &lt;code&gt;webpack&lt;/code&gt;, and is included in all new Angular CLI projects.</source>
          <target state="translated">アプリのビルドシステム &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt; は &lt;code&gt;webpack&lt;/code&gt; に基づいており、すべての新しいAngular CLIプロジェクトに含まれています。</target>
        </trans-unit>
        <trans-unit id="f7834a2399202ec039da155d28f4732ed390ded5" translate="yes" xml:space="preserve">
          <source>The build system for libraries is based on &lt;code&gt;ng-packagr&lt;/code&gt;. It is only added to your dependencies when you add a library using &lt;code&gt;ng generate library my-lib&lt;/code&gt;.</source>
          <target state="translated">ライブラリのビルドシステムは &lt;code&gt;ng-packagr&lt;/code&gt; に基づいています。 &lt;code&gt;ng generate library my-lib&lt;/code&gt; を使用してライブラリを追加する場合にのみ、依存関係に追加されます。</target>
        </trans-unit>
        <trans-unit id="e9d7c89f6355b9b74a563d2b71f0981c52287f26" translate="yes" xml:space="preserve">
          <source>The builder function is not executed until the scheduler returns a &lt;code&gt;BuilderRun&lt;/code&gt; control object. The CLI typically schedules tasks by calling the &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; function, and then resolves input options using the target definition in the &lt;code&gt;angular.json&lt;/code&gt; file.</source>
          <target state="translated">スケジューラーが &lt;code&gt;BuilderRun&lt;/code&gt; コントロールオブジェクトを返すまで、ビルダー関数は実行されません。CLIは通常、 &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; 関数を呼び出してタスクをスケジュールし、 &lt;code&gt;angular.json&lt;/code&gt; ファイルのターゲット定義を使用して入力オプションを解決します。</target>
        </trans-unit>
        <trans-unit id="60025dc689d82f5907f20636b33bf1a757ea740e" translate="yes" xml:space="preserve">
          <source>The builder handler function can be synchronous (return a value) or asynchronous (return a Promise), or it can watch and return multiple values (return an Observable). The return value or values must always be of type &lt;code&gt;BuilderOutput&lt;/code&gt;. This object contains a Boolean &lt;code&gt;success&lt;/code&gt; field and an optional &lt;code&gt;error&lt;/code&gt; field that can contain an error message.</source>
          <target state="translated">ビルダーハンドラー関数は、同期（値を返す）または非同期（Promiseを返す）にすることも、複数の値を監視して返す（Observableを返す）こともできます。戻り値は、常に &lt;code&gt;BuilderOutput&lt;/code&gt; 型である必要があります。このオブジェクトには、ブール値の &lt;code&gt;success&lt;/code&gt; フィールドと、エラーメッセージを含めることができるオプションの &lt;code&gt;error&lt;/code&gt; フィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="fbde09f90e553f00908e4a943a5ad8a525206f7a" translate="yes" xml:space="preserve">
          <source>The builder should always emit a &lt;code&gt;BuilderOutput&lt;/code&gt; object after each execution. Once it&amp;rsquo;s been executed, it can enter a watch mode, to be triggered by an external event. If an event triggers it to restart, the builder should execute the &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; function to tell Architect that it is running again. This prevents Architect from stopping the builder if another run is scheduled.</source>
          <target state="translated">ビルダーは、各実行後に常に &lt;code&gt;BuilderOutput&lt;/code&gt; オブジェクトを発行する必要があります。実行されると、監視モードになり、外部イベントによってトリガーされます。イベントがイベントをトリガーして再起動する場合、ビルダーは &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; 関数を実行して、それが再度実行されていることをArchitectに通知する必要があります。これにより、別の実行がスケジュールされている場合にArchitectがビルダーを停止するのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="f49f4287e9775e1849d1d16275e5c1d9b379ace2" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt; provides a way to diagnose a mysteriously failing data binding or to inspect an object for future binding.</source>
          <target state="translated">組み込みの&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;は、不思議なことに失敗したデータバインディングを診断したり、将来のバインディングについてオブジェクトを検査したりする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="dd3cba59a8ad93f9f11597609f818467f4d13876" translate="yes" xml:space="preserve">
          <source>The built-in AngularJS &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; filters do not exist in Angular, so you need to do the filtering and sorting yourself.</source>
          <target state="translated">組み込みのAngularJS &lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;orderBy&lt;/code&gt; フィルターはAngularには存在しないため、フィルタリングと並べ替えを自分で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="27c4675a67e0eef6db4eb2262eed281861d1655a" translate="yes" xml:space="preserve">
          <source>The built-in browser DOM APIs don't automatically protect you from security vulnerabilities. For example, &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;, the node available through &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;, and many third-party APIs contain unsafe methods. In the same way, if you interact with other libraries that manipulate the DOM, you likely won't have the same automatic sanitization as with Angular interpolations. Avoid directly interacting with the DOM and instead use Angular templates where possible.</source>
          <target state="translated">組み込みのブラウザDOM APIは、セキュリティの脆弱性から自動的に保護しません。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; を通じて利用できるノード、および多くのサードパーティAPIには、安全でないメソッドが含まれています。同様に、DOMを操作する他のライブラリとやり取りすると、Angular補間の場合と同じ自動サニタイズが行われない可能性があります。 DOMと直接やり取りすることは避け、可能な場合は代わりにAngularテンプレートを使用してください。</target>
        </trans-unit>
        <trans-unit id="27a7000125e6fd5e12b64464ee5108af7e83095b" translate="yes" xml:space="preserve">
          <source>The built-in browser DOM APIs don't automatically protect you from security vulnerabilities. For example, &lt;code&gt;document&lt;/code&gt;, the node available through &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;, and many third-party APIs contain unsafe methods. In the same way, if you interact with other libraries that manipulate the DOM, you likely won't have the same automatic sanitization as with Angular interpolations. Avoid directly interacting with the DOM and instead use Angular templates where possible.</source>
          <target state="translated">組み込みのブラウザーDOMAPIは、セキュリティの脆弱性からユーザーを自動的に保護しません。たとえば、 &lt;code&gt;document&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; を介して利用可能なノード、および多くのサードパーティAPIには、安全でないメソッドが含まれています。同様に、DOMを操作する他のライブラリと対話する場合、Angular補間の場合と同じ自動サニタイズが行われない可能性があります。DOMと直接対話することは避け、代わりに可能な場合はAngularテンプレートを使用してください。</target>
        </trans-unit>
        <trans-unit id="ba40c60b86170477c8de2f47167fe787c47e2c28" translate="yes" xml:space="preserve">
          <source>The built-in validators don't always match the exact use case of your application, so you sometimes need to create a custom validator.</source>
          <target state="translated">組み込みのバリデータがアプリケーションのユースケースに必ずしもマッチするとは限らないので、カスタムバリデータを作成する必要があることもあります。</target>
        </trans-unit>
        <trans-unit id="39744b033a42ddea775e1f902f35f4d12364d185" translate="yes" xml:space="preserve">
          <source>The bundle is injected by default, but you can set &lt;code&gt;inject&lt;/code&gt; to false to exclude the bundle from injection. For example, the following object values create and name a bundle that contains styles and scripts, and excludes it from injection:</source>
          <target state="translated">バンドルはデフォルトで注入されますが、 &lt;code&gt;inject&lt;/code&gt; からfalseに設定して、バンドルを注入から除外できます。たとえば、次のオブジェクト値は、スタイルとスクリプトを含むバンドルを作成して名前を付け、インジェクションから除外します。</target>
        </trans-unit>
        <trans-unit id="9ff88152d1671e545c950355e4856d89b2193246" translate="yes" xml:space="preserve">
          <source>The bundling configuration must take lazy loading into consideration. Because lazy-loaded modules aren't imported in JavaScript, bundlers exclude them by default. Bundlers don't know about the router configuration and can't create separate bundles for lazy-loaded modules. You would have to create these bundles manually.</source>
          <target state="translated">バンドルの設定では、レイジーロードを考慮しなければなりません。遅延ロードされたモジュールはJavaScriptではインポートされないため、バンドルラーはデフォルトで除外します。バンドルはルーターの設定を知らないので、レイジーロードされたモジュール用の個別のバンドルを作成することができません。これらのバンドルを手動で作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d8708bfa23fa52e22c67b7fb716a9c92a7fff5da" translate="yes" xml:space="preserve">
          <source>The callback function</source>
          <target state="translated">コールバック関数</target>
        </trans-unit>
        <trans-unit id="182e95510ced064ca2569f30358a8b0ad32b1752" translate="yes" xml:space="preserve">
          <source>The callback function name.</source>
          <target state="translated">コールバック関数名。</target>
        </trans-unit>
        <trans-unit id="1c1819b20078d68dd56a0742a60395369c73dff3" translate="yes" xml:space="preserve">
          <source>The callback function that is triggered for the listener when the URL changes.</source>
          <target state="translated">URLが変更されたときにリスナーにトリガーされるコールバック関数。</target>
        </trans-unit>
        <trans-unit id="f29546adb0a293b59216f583d9f5377716b2a139" translate="yes" xml:space="preserve">
          <source>The callback function that is triggered when an error occurs.</source>
          <target state="translated">エラーが発生したときにトリガされるコールバック関数。</target>
        </trans-unit>
        <trans-unit id="7e8f5213291a0dccb35f253ed9c74c78e2074d16" translate="yes" xml:space="preserve">
          <source>The callback function to register</source>
          <target state="translated">登録するコールバック関数</target>
        </trans-unit>
        <trans-unit id="324517c75dfdff3257b5e48b32727d2719bed16b" translate="yes" xml:space="preserve">
          <source>The callback function.</source>
          <target state="translated">コールバック関数です。</target>
        </trans-unit>
        <trans-unit id="44ad2e447a43167d715b851a2f95ea045f8de842" translate="yes" xml:space="preserve">
          <source>The callback in the updated component method receives a typed data object, which is easier and safer to consume:</source>
          <target state="translated">更新されたコンポーネントメソッドのコールバックは、型付きのデータオブジェクトを受け取るので、より簡単で安全にデータを消費することができます。</target>
        </trans-unit>
        <trans-unit id="f7989cb817f3892197b63d55f812a8feae326844" translate="yes" xml:space="preserve">
          <source>The callback method to update the model from the view when requested</source>
          <target state="translated">要求されたときにビューからモデルを更新するコールバックメソッド</target>
        </trans-unit>
        <trans-unit id="9de01ab978bcaa115dbc245728b09c7ed9d15018" translate="yes" xml:space="preserve">
          <source>The callback to invoke when Angular is stable or the timeout expires whichever comes first.</source>
          <target state="translated">Angularが安定しているかタイムアウトが切れたときに呼び出すコールバックです。</target>
        </trans-unit>
        <trans-unit id="f3a7dd48a909e9970fb1da807f08ca215abf3f7f" translate="yes" xml:space="preserve">
          <source>The callbacks attached to the component's &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; properties and/or the element's event properties.</source>
          <target state="translated">コンポーネントの &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; プロパティや要素のイベントプロパティにアタッチされたコールバック。</target>
        </trans-unit>
        <trans-unit id="8360f1396c197b509f36e79abbf7f8bed7725084" translate="yes" xml:space="preserve">
          <source>The change detection strategy to use in the new component.</source>
          <target state="translated">新しいコンポーネントで使用する変更検出戦略。</target>
        </trans-unit>
        <trans-unit id="d8068b6c20a86a548f92c8754f7e23bf2d24a0bb" translate="yes" xml:space="preserve">
          <source>The change detector for this component instance.</source>
          <target state="translated">このコンポーネントインスタンスの変更検出器。</target>
        </trans-unit>
        <trans-unit id="b15fbfe9cced7df5ea9485a05cd1a48449704aef" translate="yes" xml:space="preserve">
          <source>The change detector ignores changes to elements of an array, so the pipe doesn't run.</source>
          <target state="translated">変更検出器は配列の要素への変更を無視するので、パイプは実行されません。</target>
        </trans-unit>
        <trans-unit id="67f5cdf216cb0945406d5e4965afcbf10659fe3b" translate="yes" xml:space="preserve">
          <source>The change handler function, which take a URL and a location history state.</source>
          <target state="translated">URLと位置情報の履歴状態を取得する変更ハンドラ機能。</target>
        </trans-unit>
        <trans-unit id="3343e149a2f6f98e9fba5ecd1fe5527f3ae22370" translate="yes" xml:space="preserve">
          <source>The change tracking method plays a role in the efficiency of your application.</source>
          <target state="translated">変更追跡方法は、アプリケーションの効率化に一役買っています。</target>
        </trans-unit>
        <trans-unit id="3093bb2a5ab46a9af4b283f32aac491c34e27270" translate="yes" xml:space="preserve">
          <source>The change-detection strategy to use for this component.</source>
          <target state="translated">このコンポーネントに使用する変更検出ストラテジー。</target>
        </trans-unit>
        <trans-unit id="8d6b5bb93f2a36dfade3aee37283efde684f1ce3" translate="yes" xml:space="preserve">
          <source>The change-tracking method plays a role in the efficiency of your application.</source>
          <target state="translated">チェンジトラッキング方式は、アプリケーションの効率化に一役買っています。</target>
        </trans-unit>
        <trans-unit id="8d0536d0b3c762f5645d9b26cad792c0eb3a67f3" translate="yes" xml:space="preserve">
          <source>The changed properties.</source>
          <target state="translated">変更されたプロパティ。</target>
        </trans-unit>
        <trans-unit id="796e4cce084e241e06d5ee695cffadaaa1312b5b" translate="yes" xml:space="preserve">
          <source>The checked value</source>
          <target state="translated">チェックした値</target>
        </trans-unit>
        <trans-unit id="21eac29c346266d04fe1ecdfdafa7f73a1cb4c45" translate="yes" xml:space="preserve">
          <source>The child component class and template</source>
          <target state="translated">子コンポーネントクラスとテンプレート</target>
        </trans-unit>
        <trans-unit id="98bc7cef6b7350b74e17dc76fe9675f388d460b3" translate="yes" xml:space="preserve">
          <source>The child component exposes an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; property with which it &lt;code&gt;emits&lt;/code&gt; events when something happens. The parent binds to that event property and reacts to those events.</source>
          <target state="translated">子コンポーネントが公開する &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; それがどのとプロパティ &lt;code&gt;emits&lt;/code&gt; 何かが起こるとき、イベントを。親はそのイベントプロパティにバインドし、それらのイベントに反応します。</target>
        </trans-unit>
        <trans-unit id="336bbbacf94a88998e2de3b06f6103b4483a4bcd" translate="yes" xml:space="preserve">
          <source>The child component uses the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property to raise an event to notify the parent of the change. To raise an event, an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; must have the type of &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;, which is a class in &lt;code&gt;@angular/core&lt;/code&gt; that you use to emit custom events.</source>
          <target state="translated">子コンポーネントは、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; プロパティを使用してイベントを発生させ、親に変更を通知します。イベントを発生させるには、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; のタイプが &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; である必要があります。これは、カスタムイベントを発行するために使用する &lt;code&gt;@angular/core&lt;/code&gt; クラスです。</target>
        </trans-unit>
        <trans-unit id="de2ff0bbaa0c25d3965be8b69d52b30ddde19e03" translate="yes" xml:space="preserve">
          <source>The child node to query.</source>
          <target state="translated">クエリする子ノード。</target>
        </trans-unit>
        <trans-unit id="b838a97bc91f5bd4d3163e9eb632cf7f1cec63fa" translate="yes" xml:space="preserve">
          <source>The child node to remove.</source>
          <target state="translated">削除する子ノード。</target>
        </trans-unit>
        <trans-unit id="28113636f1f53ec2086b37193a976e332ddde875" translate="yes" xml:space="preserve">
          <source>The child route under the &lt;code&gt;AdminComponent&lt;/code&gt; has a &lt;code&gt;path&lt;/code&gt; and a &lt;code&gt;children&lt;/code&gt; property but it's not using a &lt;code&gt;component&lt;/code&gt;. This defines a &lt;em&gt;component-less&lt;/em&gt; route.</source>
          <target state="translated">&lt;code&gt;AdminComponent&lt;/code&gt; の下の子ルートには、 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;children&lt;/code&gt; プロパティがありますが、 &lt;code&gt;component&lt;/code&gt; を使用していません。これは、&lt;em&gt;コンポーネントのない&lt;/em&gt;ルートを定義し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8909b8dd5928a2ca32979b4c5eb8646b0c1ed1ee" translate="yes" xml:space="preserve">
          <source>The child selector is &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; with &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;deleteRequest&lt;/code&gt; being &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; properties in the child component class. The property &lt;code&gt;currentItem&lt;/code&gt; and the method &lt;code&gt;crossOffItem()&lt;/code&gt; are both in the parent component class.</source>
          <target state="translated">子セレクタは &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; と &lt;code&gt;item&lt;/code&gt; と &lt;code&gt;deleteRequest&lt;/code&gt; ビーイング &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 子コンポーネントクラスのプロパティ。プロパティ &lt;code&gt;currentItem&lt;/code&gt; とメソッド &lt;code&gt;crossOffItem()&lt;/code&gt; は、どちらも親コンポーネントクラスにあります。</target>
        </trans-unit>
        <trans-unit id="73fee6cefa43b5b1a569bd5a82fbaedf48efdb3f" translate="yes" xml:space="preserve">
          <source>The child's &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; property is an &lt;strong&gt;&lt;em&gt;output property&lt;/em&gt;&lt;/strong&gt;, typically adorned with an &lt;a href=&quot;inputs-outputs#output&quot;&gt;@Output() decorator&lt;/a&gt; as seen in this &lt;code&gt;VoterComponent&lt;/code&gt;:</source>
          <target state="translated">子の &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; プロパティは&lt;strong&gt;&lt;em&gt;出力プロパティであり&lt;/em&gt;&lt;/strong&gt;、通常、この &lt;code&gt;VoterComponent&lt;/code&gt; に示されているように&lt;a href=&quot;inputs-outputs#output&quot;&gt;@Output（）デコレータで装飾&lt;/a&gt;されています。</target>
        </trans-unit>
        <trans-unit id="3ebaac95fe3c0183cb6f4ac86416f49de1d80ee6" translate="yes" xml:space="preserve">
          <source>The child's &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; property is an &lt;strong&gt;&lt;em&gt;output property&lt;/em&gt;&lt;/strong&gt;, typically adorned with an &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;@Output decoration&lt;/a&gt; as seen in this &lt;code&gt;VoterComponent&lt;/code&gt;:</source>
          <target state="translated">子の &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; プロパティは&lt;strong&gt;&lt;em&gt;出力プロパティであり&lt;/em&gt;&lt;/strong&gt;、通常、この &lt;code&gt;VoterComponent&lt;/code&gt; 見られるように&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;@Output装飾で装飾&lt;/a&gt;されています。</target>
        </trans-unit>
        <trans-unit id="45c5e393302819e4131079c6fe541b42e859ee2b" translate="yes" xml:space="preserve">
          <source>The child's template has two controls. The first is an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with a &lt;a href=&quot;template-reference-variables&quot;&gt;template reference variable&lt;/a&gt; , &lt;code&gt;#newItem&lt;/code&gt;, where the user types in an item name. The &lt;code&gt;value&lt;/code&gt; property of the &lt;code&gt;#newItem&lt;/code&gt; variable stores what the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">子のテンプレートには2つのコントロールがあります。最初は、HTMLで &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を有する&lt;a href=&quot;template-reference-variables&quot;&gt;テンプレート基準変数&lt;/a&gt;、 &lt;code&gt;#newItem&lt;/code&gt; 項目名にユーザタイプ、。 &lt;code&gt;#newItem&lt;/code&gt; 変数の &lt;code&gt;value&lt;/code&gt; プロパティは、ユーザーが &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に入力した内容を格納します。</target>
        </trans-unit>
        <trans-unit id="4d21e7048f090003f6988e5a99ace595822566be" translate="yes" xml:space="preserve">
          <source>The child's template has two controls. The first is an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with a &lt;a href=&quot;template-syntax#ref-var&quot;&gt;template reference variable&lt;/a&gt; , &lt;code&gt;#newItem&lt;/code&gt;, where the user types in an item name. Whatever the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; gets stored in the &lt;code&gt;#newItem&lt;/code&gt; variable.</source>
          <target state="translated">子のテンプレートには2つのコントロールがあります。最初は、HTMLで &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を有する&lt;a href=&quot;template-syntax#ref-var&quot;&gt;テンプレート基準変数&lt;/a&gt;、 &lt;code&gt;#newItem&lt;/code&gt; 項目名にユーザタイプ、。ユーザーが &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に入力したものは &lt;code&gt;#newItem&lt;/code&gt; 変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="9815f861c67f39ad3a340bdc46586f227e38f0d3" translate="yes" xml:space="preserve">
          <source>The children of this route in the router state tree</source>
          <target state="translated">ルータの状態ツリーにあるこのルートの子</target>
        </trans-unit>
        <trans-unit id="88f283ebf90d73f7691965239f91c83b97c637c7" translate="yes" xml:space="preserve">
          <source>The children of this route in the router state tree.</source>
          <target state="translated">ルータ状態ツリー内のこのルートの子。</target>
        </trans-unit>
        <trans-unit id="cd478977dac1aaeeb2106c8d25bd353cbf9a9248" translate="yes" xml:space="preserve">
          <source>The choice between inline and separate HTML is a matter of taste, circumstances, and organization policy. Here the app uses inline HTML because the template is small and the demo is simpler without the additional HTML file.</source>
          <target state="translated">インライン HTML と分離 HTML の選択は、好み、状況、組織の方針の問題です。ここでは、テンプレートが小さく、追加の HTML ファイルがなくてもデモがシンプルなので、インライン HTML を使用しています。</target>
        </trans-unit>
        <trans-unit id="a4f2b79a3029d546fba201c93d23eabb4aa329ff" translate="yes" xml:space="preserve">
          <source>The class additionally declares three members: The array of phones, the name of the current sort key, and the search query. These are all things you have already been attaching to the controller but that weren't explicitly declared anywhere. The last one of these isn't actually used in the TypeScript code since it's only referred to in the template, but for the sake of clarity you should define all of the controller members.</source>
          <target state="translated">このクラスでは、さらに 3 つのメンバを宣言します。電話の配列、現在のソートキーの名前、そして検索クエリです。これらはすべてコントローラにアタッチしているものですが、明示的にはどこにも宣言されていません。これらのうち最後のものは、テンプレートの中でしか参照されていないので、TypeScript のコードでは実際には使用されませんが、わかりやすくするためにも、すべてのコントローラのメンバを定義しておくべきです。</target>
        </trans-unit>
        <trans-unit id="386c4da46833767828efb663588fa86f0b351c05" translate="yes" xml:space="preserve">
          <source>The class name.</source>
          <target state="translated">クラス名です。</target>
        </trans-unit>
        <trans-unit id="cfb8e2fa1ec41a7877ca2cf24377f2bbac37fc6a" translate="yes" xml:space="preserve">
          <source>The class we have created provides a service. The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator marks it as a service that can be injected, but Angular can't actually inject it anywhere until you configure an Angular &lt;a href=&quot;glossary#injector&quot;&gt;dependency injector&lt;/a&gt; with a &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; of that service.</source>
          <target state="translated">作成したクラスはサービスを提供します。 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータを注入することができるサービスとしてマークしていますが、角度を設定するまで、角度は、実際にどこにでもそれを注入することはできません&lt;a href=&quot;glossary#injector&quot;&gt;依存関係のインジェクターを&lt;/a&gt;して&lt;a href=&quot;glossary#provider&quot;&gt;、プロバイダ&lt;/a&gt;、そのサービスの。</target>
        </trans-unit>
        <trans-unit id="9bb76e82307d0c0d07213e61c7341ddb5167bded" translate="yes" xml:space="preserve">
          <source>The class-provider syntax is a shorthand expression that expands into a provider configuration, defined by the &lt;a href=&quot;../api/core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt; interface&lt;/a&gt;. The following code snippets shows how a class that is given as the &lt;code&gt;providers&lt;/code&gt; value is expanded into a full provider object.</source>
          <target state="translated">クラスプロバイダー構文は、&lt;a href=&quot;../api/core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; インターフェイスに&lt;/a&gt;定義されたプロバイダー構成に展開される省略表現です。次のコードスニペットは、 &lt;code&gt;providers&lt;/code&gt; 値として指定されたクラスが完全なプロバイダーオブジェクトに展開される方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e4378e45dd65db5c919f1a83b79501f5e742c2cc" translate="yes" xml:space="preserve">
          <source>The code behind it customizes how and where the DI framework provides dependencies. The use cases illustrate different ways to use the &lt;a href=&quot;dependency-injection-providers#provide&quot;&gt;&lt;em&gt;provide&lt;/em&gt; object literal&lt;/a&gt; to associate a definition object with a DI token.</source>
          <target state="translated">その背後にあるコードは、DIフレームワークが依存関係を提供する方法と場所をカスタマイズします。ユースケースは、&lt;a href=&quot;dependency-injection-providers#provide&quot;&gt;&lt;em&gt;提供&lt;/em&gt;オブジェクトリテラル&lt;/a&gt;を使用して定義オブジェクトをDIトークンに関連付けるさまざまな方法を示しています。</target>
        </trans-unit>
        <trans-unit id="970ee2781eada9efc03e7fd17ce53917ceee0e8f" translate="yes" xml:space="preserve">
          <source>The code binds to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, which allows the code to listen for changes.</source>
          <target state="translated">コードは &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;input&lt;/code&gt; イベントにバインドします。これにより、コードは変更をリッスンできます。</target>
        </trans-unit>
        <trans-unit id="f96fcb6e3857904aa9aa4b964b93a302cc574eb0" translate="yes" xml:space="preserve">
          <source>The code coverage percentages let you estimate how much of your code is tested. If your team decides on a set minimum amount to be unit tested, you can enforce this minimum with the Angular CLI.</source>
          <target state="translated">コードカバレッジパーセンテージでは、どの程度のコードがテストされているかを推定することができます。チームがユニットテストの最小値を決めた場合、Angular CLIでこの最小値を強制することができます。</target>
        </trans-unit>
        <trans-unit id="f5dce1db38cdc532ad3d7c72afd2efd8358fd816" translate="yes" xml:space="preserve">
          <source>The code for this color change might look like this.</source>
          <target state="translated">この色変更のコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="cbeac1c9a0c35dbccb31f978400fc2fe2a5e2a4a" translate="yes" xml:space="preserve">
          <source>The code imports the Angular core library and the &lt;code&gt;Hero&lt;/code&gt; model you just created.</source>
          <target state="translated">コードは、作成したAngularコアライブラリと &lt;code&gt;Hero&lt;/code&gt; モデルをインポートします。</target>
        </trans-unit>
        <trans-unit id="68f0a3da097460a4e1aa89208185bd3703ba9e66" translate="yes" xml:space="preserve">
          <source>The code must &lt;em&gt;detach&lt;/em&gt; the listener when the directive is destroyed to avoid memory leaks.</source>
          <target state="translated">コードは、ディレクティブが破棄されたときにリスナーを&lt;em&gt;切り離して&lt;/em&gt;、メモリリークを回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="46c6a7d6568026289889fe5df8dce62319144252" translate="yes" xml:space="preserve">
          <source>The code of the error to check</source>
          <target state="translated">チェックするエラーのコード</target>
        </trans-unit>
        <trans-unit id="6f27e3b52d7266eb93e97fdd4a94b9f45b555f31" translate="yes" xml:space="preserve">
          <source>The code of the locale whose currency code we want.</source>
          <target state="translated">通貨コードを取得したいロケールのコード。</target>
        </trans-unit>
        <trans-unit id="10c0011222fc6b4866ac8487498f45dd83f02549" translate="yes" xml:space="preserve">
          <source>The code sample below shows how to use this feature.</source>
          <target state="translated">以下のコードサンプルでは、この機能の使用方法を説明します。</target>
        </trans-unit>
        <trans-unit id="52a764918c407ee86da193bb47e766db1ee7d4cb" translate="yes" xml:space="preserve">
          <source>The code sets &lt;code&gt;packages$&lt;/code&gt; to this re-composed &lt;code&gt;Observable&lt;/code&gt; of search results. The template subscribes to &lt;code&gt;packages$&lt;/code&gt; with the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt; and displays search results as they arrive.</source>
          <target state="translated">コードは、 &lt;code&gt;packages$&lt;/code&gt; をこの再構成された &lt;code&gt;Observable&lt;/code&gt; の検索結果に設定します。テンプレートは&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipeで&lt;/a&gt; &lt;code&gt;packages$&lt;/code&gt; をサブスクライブし、到着時に検索結果を表示します。</target>
        </trans-unit>
        <trans-unit id="f6ed28c9f178e87589fbe392d21c577aea987e8f" translate="yes" xml:space="preserve">
          <source>The code snippet for this animation might look like this.</source>
          <target state="translated">このアニメーションのコードスニペットは次のようになります。</target>
        </trans-unit>
        <trans-unit id="688745f4df04e9e5819d70cbf741b8a833c173c4" translate="yes" xml:space="preserve">
          <source>The code with offsets specified would be as follows.</source>
          <target state="translated">オフセットを指定したコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="aa6d3cc42e5d49bc58e9f59a5de8ba857d85cdb3" translate="yes" xml:space="preserve">
          <source>The code you write in development using TypeScript is compiled and bundled into ES2015, the JavaScript syntax that is compatible with most browsers. All modern browsers support ES2015 and beyond, but in most cases, you still have to account for users accessing your application from a browser that doesn't. When targeting older browsers, &lt;a href=&quot;browser-support#polyfills&quot;&gt;polyfills&lt;/a&gt; can bridge the gap by providing functionality that doesn't exist in the older versions of JavaScript supported by those browsers.</source>
          <target state="translated">TypeScriptを使用して開発で記述したコードはコンパイルされ、ES2015にバンドルされます。これは、ほとんどのブラウザーと互換性のあるJavaScript構文です。最新のブラウザーはすべてES2015以降をサポートしていますが、ほとんどの場合、そうでないブラウザーからアプリケーションにアクセスするユーザーを考慮する必要があります。古いブラウザを対象とする場合、&lt;a href=&quot;browser-support#polyfills&quot;&gt;ポリフィル&lt;/a&gt;は、それらのブラウザがサポートする古いバージョンのJavaScriptには存在しない機能を提供することで、ギャップを埋めることができます。</target>
        </trans-unit>
        <trans-unit id="b7e52622776d7c1959881d2e660fa7a5fa2ffc44" translate="yes" xml:space="preserve">
          <source>The code you write isn't immediately executable. For example, components have templates that contain custom elements, attribute directives, Angular binding declarations, and some peculiar syntax that clearly isn't native HTML.</source>
          <target state="translated">書いたコードはすぐに実行できるものではありません。例えば、コンポーネントにはカスタム要素や属性ディレクティブ、Angularのバインディング宣言、明らかにネイティブHTMLではない独特の構文を含むテンプレートがあります。</target>
        </trans-unit>
        <trans-unit id="c98252757016faf472023968bc36999991222bc9" translate="yes" xml:space="preserve">
          <source>The collector accepts any function or static method that contains a single &lt;code&gt;return&lt;/code&gt; statement. The compiler, however, only supports macros in the form of functions or static methods that return an &lt;em&gt;expression&lt;/em&gt;.</source>
          <target state="translated">コレクターは、単一の &lt;code&gt;return&lt;/code&gt; ステートメントを含む任意の関数または静的メソッドを受け入れます。ただし、コンパイラは、&lt;em&gt;式&lt;/em&gt;を返す関数または静的メソッドの形式のマクロのみをサポートします。</target>
        </trans-unit>
        <trans-unit id="775ba5d48c201b80c8c8ae9cd1d70622bb775dd4" translate="yes" xml:space="preserve">
          <source>The collector can evaluate references to module-local &lt;code&gt;const&lt;/code&gt; declarations and initialized &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; declarations, effectively removing them from the &lt;code&gt;.metadata.json&lt;/code&gt; file.</source>
          <target state="translated">コレクターは、モジュールローカルの &lt;code&gt;const&lt;/code&gt; 宣言および初期化された &lt;code&gt;var&lt;/code&gt; と &lt;code&gt;let&lt;/code&gt; 宣言への参照を評価して、それらを &lt;code&gt;.metadata.json&lt;/code&gt; ファイルから効果的に削除できます。</target>
        </trans-unit>
        <trans-unit id="0f9ef0ca017a80f8e54b27d25998685f9c051e40" translate="yes" xml:space="preserve">
          <source>The collector can represent a function call or object creation with &lt;code&gt;new&lt;/code&gt; as long as the syntax is valid. The compiler, however, can later refuse to generate a call to a &lt;em&gt;particular&lt;/em&gt; function or creation of a &lt;em&gt;particular&lt;/em&gt; object.</source>
          <target state="translated">コレクターは、構文が有効である限り、関数呼び出しまたはオブジェクトの作成を &lt;code&gt;new&lt;/code&gt; で表すことができます。ただし、コンパイラは後で&lt;em&gt;特定の&lt;/em&gt;関数の呼び出しや&lt;em&gt;特定の&lt;/em&gt;オブジェクトの作成を拒否することができます。</target>
        </trans-unit>
        <trans-unit id="04cdce6617c90dd9e3023f3aef0d2359e60d969d" translate="yes" xml:space="preserve">
          <source>The collector makes no attempt to understand the metadata that it collects and outputs to &lt;code&gt;.metadata.json&lt;/code&gt;. It represents the metadata as best it can and records errors when it detects a metadata syntax violation. It's the compiler's job to interpret the &lt;code&gt;.metadata.json&lt;/code&gt; in the code generation phase.</source>
          <target state="translated">コレクターは、収集して &lt;code&gt;.metadata.json&lt;/code&gt; に出力するメタデータを理解しようとはしません。メタデータを可能な限り表現し、メタデータ構文違反を検出するとエラーを記録します。コード生成フェーズで &lt;code&gt;.metadata.json&lt;/code&gt; を解釈するのはコンパイラの仕事です。</target>
        </trans-unit>
        <trans-unit id="c94e729ff8a27c730c157a9c5bcc96f4b75e729a" translate="yes" xml:space="preserve">
          <source>The collector reduces this expression to its equivalent &lt;em&gt;folded&lt;/em&gt; string:</source>
          <target state="translated">コレクターは、この式を同等の&lt;em&gt;折り畳まれた&lt;/em&gt;文字列に減らします。</target>
        </trans-unit>
        <trans-unit id="2cb307c5d9a821cbeb1291555d897d427eb70d97" translate="yes" xml:space="preserve">
          <source>The colon (:) in the &lt;code&gt;path&lt;/code&gt; indicates that &lt;code&gt;:id&lt;/code&gt; is a placeholder for a specific hero &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のコロン（:)は、 &lt;code&gt;:id&lt;/code&gt; が特定のヒーロー &lt;code&gt;id&lt;/code&gt; プレースホルダーであることを示しています。</target>
        </trans-unit>
        <trans-unit id="822a3863f5cea533bb631122ed79d3a3234d1e18" translate="yes" xml:space="preserve">
          <source>The command also adds the &lt;code&gt;HeroDetailComponent&lt;/code&gt; as a declaration in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator of the &lt;code&gt;src/app/app.module.ts&lt;/code&gt; file.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;src/app/app.module.ts&lt;/code&gt; ファイルの &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;デコレーターの宣言として &lt;code&gt;HeroDetailComponent&lt;/code&gt; も追加します。</target>
        </trans-unit>
        <trans-unit id="ecfcfd92ddc1e6e65d554b28efd2166d3482d5a8" translate="yes" xml:space="preserve">
          <source>The command can be used to build a project of type &quot;application&quot; or &quot;library&quot;. When used to build a library, a different builder is invoked, and only the &lt;code&gt;ts-config&lt;/code&gt;, &lt;code&gt;configuration&lt;/code&gt;, and &lt;code&gt;watch&lt;/code&gt; options are applied. All other options apply only to building applications.</source>
          <target state="translated">このコマンドを使用して、「アプリケーション」または「ライブラリ」タイプのプロジェクトをビルドできます。ライブラリの構築に使用すると、別のビルダーが呼び出され、 &lt;code&gt;ts-config&lt;/code&gt; 、 &lt;code&gt;configuration&lt;/code&gt; 、および &lt;code&gt;watch&lt;/code&gt; オプションのみが適用されます。他のすべてのオプションは、アプリケーションのビルドにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="512e225eda6cc1639eea07b5d955a25e07759d5d" translate="yes" xml:space="preserve">
          <source>The command can read and write files in three translation formats:</source>
          <target state="translated">このコマンドは、3つの翻訳形式でファイルを読み書きすることができます。</target>
        </trans-unit>
        <trans-unit id="bf84844b9e75c71ac51168fed3b964af90b550ed" translate="yes" xml:space="preserve">
          <source>The command configures your app to use service workers by adding the service-worker package and generating the necessary support files.</source>
          <target state="translated">このコマンドは、サービスワーカーパッケージを追加し、必要なサポートファイルを生成することで、アプリがサービスワーカーを使用するように設定します。</target>
        </trans-unit>
        <trans-unit id="60cbb6bb9baee1657c5aabadd3c30a172960868d" translate="yes" xml:space="preserve">
          <source>The command creates the following &lt;code&gt;HeroService&lt;/code&gt; skeleton.</source>
          <target state="translated">このコマンドは、次の &lt;code&gt;HeroService&lt;/code&gt; スケルトンを作成します。</target>
        </trans-unit>
        <trans-unit id="fb7672e8c965167d0a611c29c3e95da6a052157c" translate="yes" xml:space="preserve">
          <source>The command creates the following folder structure.</source>
          <target state="translated">コマンドは以下のようなフォルダ構造を作成します。</target>
        </trans-unit>
        <trans-unit id="23f6fb999f367965df4e9072feb6668a104067e3" translate="yes" xml:space="preserve">
          <source>The command generates a skeleton &lt;code&gt;HeroService&lt;/code&gt; class in &lt;code&gt;src/app/hero.service.ts&lt;/code&gt; as follows:</source>
          <target state="translated">このコマンドは、次のように &lt;code&gt;src/app/hero.service.ts&lt;/code&gt; にスケルトン &lt;code&gt;HeroService&lt;/code&gt; クラスを生成します。</target>
        </trans-unit>
        <trans-unit id="f84057f8a139bc98948e34aa76f1de7682fe3a1c" translate="yes" xml:space="preserve">
          <source>The command generates the new named schematic inside your collection, with a main &lt;code&gt;index.ts&lt;/code&gt; file and its associated test spec. It also adds the name, description, and factory function for the new schematic to the collection's schema in the &lt;code&gt;collection.json&lt;/code&gt; file.</source>
          <target state="translated">このコマンドは、メインの &lt;code&gt;index.ts&lt;/code&gt; ファイルとそれに関連付けられたテスト仕様を使用して、コレクション内に新しい名前の付いた回路図を生成します。また、新しい回路図の名前、説明、およびファクトリー関数を、 &lt;code&gt;collection.json&lt;/code&gt; ファイル内のコレクションのスキーマに追加します。</target>
        </trans-unit>
        <trans-unit id="032b5d312dec4716aade5ccf6d268d0aee388017" translate="yes" xml:space="preserve">
          <source>The command is interactive. In this case, you must have or create a Firebase account, and authenticate using that account. The command prompts you to select a Firebase project for deployment</source>
          <target state="translated">コマンドは対話型です。この場合、Firebaseアカウントを持っているか作成し、そのアカウントを使って認証する必要があります。コマンドは、デプロイするFirebaseプロジェクトを選択するように促します。</target>
        </trans-unit>
        <trans-unit id="e0238e94e6ed6d69aeb9b7186b5420a4c6cccd58" translate="yes" xml:space="preserve">
          <source>The command passes the builder the set of default options specified in the &quot;options&quot; section. If you pass the &lt;code&gt;--configuration=production&lt;/code&gt; flag, it uses the override values specified in the &lt;code&gt;production&lt;/code&gt; alternative configuration. You can specify further option overrides individually on the command line. You might also add more alternative configurations to the &lt;code&gt;build&lt;/code&gt; target, to define other environments such as &lt;code&gt;stage&lt;/code&gt; or &lt;code&gt;qa&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、「オプション」セクションで指定されたデフォルトオプションのセットをビルダーに渡します。 &lt;code&gt;--configuration=production&lt;/code&gt; フラグを渡すと、 &lt;code&gt;production&lt;/code&gt; 代替構成で指定されたオーバーライド値が使用されます。コマンドラインで個別のオプションオーバーライドを個別に指定できます。 &lt;code&gt;build&lt;/code&gt; ターゲットにさらに別の構成を追加して、 &lt;code&gt;stage&lt;/code&gt; や &lt;code&gt;qa&lt;/code&gt; などの他の環境を定義することもできます。</target>
        </trans-unit>
        <trans-unit id="eb2912a10269d45a749dd2c9c3467ad9cb8c57d9" translate="yes" xml:space="preserve">
          <source>The command performs the following actions.</source>
          <target state="translated">コマンドは以下のアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="d05643aa6337d26acd02d68221885268cc4cdae7" translate="yes" xml:space="preserve">
          <source>The command replaces the original messages with translated text, and generates a new version of the app in the target language.</source>
          <target state="translated">このコマンドは、元のメッセージを翻訳されたテキストに置き換え、ターゲット言語で新しいバージョンのアプリを生成します。</target>
        </trans-unit>
        <trans-unit id="26f3e6fe9701a42c19f4d2b3080bd162ab88cf06" translate="yes" xml:space="preserve">
          <source>The command scaffolds the following:</source>
          <target state="translated">コマンドは以下のように足場を組みます。</target>
        </trans-unit>
        <trans-unit id="afe6b95bc4862f31c695e35a376168015bb8944a" translate="yes" xml:space="preserve">
          <source>The command takes an optional project name, as specified in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file. When a project name is not supplied, executes the &lt;code&gt;deploy&lt;/code&gt; builder for the default project.</source>
          <target state="translated">コマンドは、 &lt;code&gt;angular.json&lt;/code&gt; ワークスペース構成ファイルの &lt;code&gt;projects&lt;/code&gt; セクションで指定されているオプションのプロジェクト名を取ります。プロジェクト名が指定されていない場合、デフォルトプロジェクトの &lt;code&gt;deploy&lt;/code&gt; ビルダーを実行します。</target>
        </trans-unit>
        <trans-unit id="e2367757f500b2b5e14443d0ffa2b6ea5d19b891" translate="yes" xml:space="preserve">
          <source>The command-line output includes extra logging from Bazel. We plan to reduce this in the future.</source>
          <target state="translated">コマンドライン出力には、Bazelからの余分なロギングが含まれています。将来的にはこれを減らす予定です。</target>
        </trans-unit>
        <trans-unit id="deebac4a0e4d9463353e1ba094d4311ba5bced82" translate="yes" xml:space="preserve">
          <source>The comment text.</source>
          <target state="translated">コメント文です。</target>
        </trans-unit>
        <trans-unit id="f727b50279d21957a5ea426f3f6ef5d1c870a679" translate="yes" xml:space="preserve">
          <source>The common commands in Bazel are:</source>
          <target state="translated">バゼルでよく使われるコマンドは</target>
        </trans-unit>
        <trans-unit id="4dce573efdc896e6762e4abce3c4ef846a95893d" translate="yes" xml:space="preserve">
          <source>The commonly-needed services, pipes, and directives provided by the Angular team. The &lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;&lt;code&gt;HttpClientModule&lt;/code&gt;&lt;/a&gt; is also here, in the &lt;a href=&quot;../api/common/http&quot;&gt;&lt;code&gt;@angular/common/http&lt;/code&gt;&lt;/a&gt; subfolder. For more information, see the &lt;a href=&quot;http&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">Angularチームが提供する、一般的に必要とされるサービス、パイプ、およびディレクティブ。&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt; &lt;code&gt;HttpClientModule&lt;/code&gt; は&lt;/a&gt;で、ここにもある&lt;a href=&quot;../api/common/http&quot;&gt; &lt;code&gt;@angular/common/http&lt;/code&gt; &lt;/a&gt;サブフォルダ。詳細については、&lt;a href=&quot;http&quot;&gt;HttpClientガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="91fd0e342d19fa9a326ec600aa54532eda1d7b70" translate="yes" xml:space="preserve">
          <source>The companion component class provides heroes, adds heroes into the array, and can reset the array.</source>
          <target state="translated">コンパニオンコンポーネントクラスは、ヒーローを提供し、配列にヒーローを追加し、配列をリセットすることができます。</target>
        </trans-unit>
        <trans-unit id="68d35ebfa15210ab8b65604e0da1d1214dd4d36d" translate="yes" xml:space="preserve">
          <source>The compilation and rendering pipeline used by Angular before version 9. Compare &lt;a href=&quot;glossary#ivy&quot;&gt;Ivy&lt;/a&gt;.</source>
          <target state="translated">バージョン9以前角度によって使用されるコンパイルとレンダリングパイプラインは比較&lt;a href=&quot;glossary#ivy&quot;&gt;アイビーを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5a7467e3bed5cce9e9e9439293f13cf8bbe37b57" translate="yes" xml:space="preserve">
          <source>The compilation process is the same whether the translation file is in &lt;code&gt;.xlf&lt;/code&gt; format or in another format that Angular understands, such as &lt;code&gt;.xtb&lt;/code&gt;.</source>
          <target state="translated">翻訳ファイルが &lt;code&gt;.xlf&lt;/code&gt; 形式であっても、Angularが理解できる別の形式（ &lt;code&gt;.xtb&lt;/code&gt; など）であっても、コンパイルプロセスは同じです。</target>
        </trans-unit>
        <trans-unit id="20e023920577f4366d6e8bec0ad15d5c1dfa3ffb" translate="yes" xml:space="preserve">
          <source>The compiler also has some major limitations in this mode:</source>
          <target state="translated">また、このモードではコンパイラにもいくつかの大きな制限があります。</target>
        </trans-unit>
        <trans-unit id="8fbe0c27d00d7023e6067129fe8bbf4a24d10a6a" translate="yes" xml:space="preserve">
          <source>The compiler can only create instances of certain classes, supports only core decorators, and only supports calls to macros (functions or static methods) that return expressions.</source>
          <target state="translated">コンパイラは特定のクラスのインスタンスしか作成できず、コアデコレータのみをサポートし、式を返すマクロ(関数または静的メソッド)の呼び出しのみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="bee270b045da60269f4d9d82490b3eec3eb7fedb" translate="yes" xml:space="preserve">
          <source>The compiler can only reference &lt;em&gt;exported symbols&lt;/em&gt;.</source>
          <target state="translated">コンパイラは&lt;em&gt;エクスポートされたシンボル&lt;/em&gt;のみを参照でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f3502a185963958198b9a85072d430d31a7108b0" translate="yes" xml:space="preserve">
          <source>The compiler can only resolve references to &lt;strong&gt;&lt;em&gt;exported&lt;/em&gt;&lt;/strong&gt; symbols. The collector, however, can evaluate an expression during collection and record the result in the &lt;code&gt;.metadata.json&lt;/code&gt;, rather than the original expression. This allows you to make limited use of non-exported symbols within expressions.</source>
          <target state="translated">コンパイラは、&lt;strong&gt;&lt;em&gt;エクスポートされた&lt;/em&gt;&lt;/strong&gt;シンボルへの参照のみを解決できます。ただし、コレクターはコレクション中に式を評価し、元の式ではなく &lt;code&gt;.metadata.json&lt;/code&gt; に結果を記録できます。これにより、式内でエクスポートされていないシンボルを限定的に使用できます。</target>
        </trans-unit>
        <trans-unit id="3de2fe859e8aea7858d788054cb92a56c24aa22f" translate="yes" xml:space="preserve">
          <source>The compiler can understand simple enum values but not complex values such as those derived from computed properties.</source>
          <target state="translated">コンパイラは単純な列挙値は理解できますが、計算されたプロパティから派生するような複雑な値は理解できません。</target>
        </trans-unit>
        <trans-unit id="19f4a053ad2943ecc2598d242fc7f107dd7fdda1" translate="yes" xml:space="preserve">
          <source>The compiler cannot wait until runtime to get the template information. It must statically derive the value of the &lt;code&gt;someTemplate&lt;/code&gt; variable from the source code so that it can generate the component factory, which includes instructions for building the element based on the template.</source>
          <target state="translated">コンパイラは、ランタイムがテンプレート情報を取得するまで待機できません。テンプレートに基づいて要素を構築する手順を含むコンポーネントファクトリを生成できるように、ソースコードから &lt;code&gt;someTemplate&lt;/code&gt; 変数の値を静的に派生させる必要があります。</target>
        </trans-unit>
        <trans-unit id="d06c32faa1f9142e1197fcd5ba01c4a27e47837e" translate="yes" xml:space="preserve">
          <source>The compiler could not refer to the &lt;code&gt;template&lt;/code&gt; constant because it isn't exported. The collector, however, can fold the &lt;code&gt;template&lt;/code&gt; constant into the metadata definition by in-lining its contents. The effect is the same as if you had written:</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; 定数がエクスポートされていないため、コンパイラーはテンプレート定数を参照できませんでした。ただし、コレクターは、その内容をインライン化することにより、 &lt;code&gt;template&lt;/code&gt; 定数をメタデータ定義に組み込むことができます。結果は、次のように記述した場合と同じです。</target>
        </trans-unit>
        <trans-unit id="bd1ef8c2b73d68e5b22c9b1138d099eae1677b0f" translate="yes" xml:space="preserve">
          <source>The compiler does not currently support &lt;a href=&quot;aot-compiler#function-expression&quot;&gt;function expressions or lambda functions&lt;/a&gt;. For example, you cannot set a provider's &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; to an anonymous function or arrow function like this.</source>
          <target state="translated">コンパイラーは現在、&lt;a href=&quot;aot-compiler#function-expression&quot;&gt;関数式またはラムダ関数を&lt;/a&gt;サポートしていません。たとえば、プロバイダーの &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; をこのような無名関数または矢印関数に設定することはできません。</target>
        </trans-unit>
        <trans-unit id="8d63679f07b8e39bfb7c96d9e6a44e1bdd0523a8" translate="yes" xml:space="preserve">
          <source>The compiler does not currently support &lt;a href=&quot;aot-compiler#function-expression&quot;&gt;function expressions or lambda functions&lt;/a&gt;. For example, you cannot set a provider's &lt;code&gt;useFactory&lt;/code&gt; to an anonymous function or arrow function like this.</source>
          <target state="translated">コンパイラは現在、&lt;a href=&quot;aot-compiler#function-expression&quot;&gt;関数式またはラムダ関数を&lt;/a&gt;サポートしていません。たとえば、プロバイダーの &lt;code&gt;useFactory&lt;/code&gt; をこのような無名関数や矢印関数に設定することはできません。</target>
        </trans-unit>
        <trans-unit id="420d66550ed93c835ed583c6e68981a83a4d586b" translate="yes" xml:space="preserve">
          <source>The compiler does not support references to variables assigned by &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring&quot;&gt;destructuring&lt;/a&gt;.</source>
          <target state="translated">コンパイラは、によって割り当てられた変数への参照をサポートしていません&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring&quot;&gt;な破壊を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e2d31b8c52b289dfbc88a3b991740e86003b12c" translate="yes" xml:space="preserve">
          <source>The compiler does not verify that the value of &lt;code&gt;user.address.city&lt;/code&gt; is assignable to the city input of the &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt; component.</source>
          <target state="translated">コンパイラは、 &lt;code&gt;user.address.city&lt;/code&gt; の値が &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt; コンポーネントの都市入力に割り当て可能であることを確認しません。</target>
        </trans-unit>
        <trans-unit id="858c40dd3910dea8d82725091f2c0604dc6827af" translate="yes" xml:space="preserve">
          <source>The compiler does the rewriting during the emit of the &lt;code&gt;.js&lt;/code&gt; file. It does not, however, rewrite the &lt;code&gt;.d.ts&lt;/code&gt; file, so TypeScript doesn't recognize it as being an export. and it does not interfere with the ES module's exported API.</source>
          <target state="translated">コンパイラは、 &lt;code&gt;.js&lt;/code&gt; ファイルの発行中に書き換えを行います。ただし、 &lt;code&gt;.d.ts&lt;/code&gt; ファイルは書き換えられないため、TypeScriptはそれをエクスポートとして認識しません。また、ESモジュールのエクスポートされたAPIに干渉しません。</target>
        </trans-unit>
        <trans-unit id="157b36dfa249eaae0f0223d7b4e275b5742dd33b" translate="yes" xml:space="preserve">
          <source>The compiler encountered a JavaScript ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;tagged template expression&lt;/a&gt; such as the following.</source>
          <target state="translated">コンパイラは、次のようなJavaScript ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;タグ付きテンプレート式&lt;/a&gt;を検出しました。</target>
        </trans-unit>
        <trans-unit id="1f7ded75927c1788a32dd4918360a2ddcd0a071f" translate="yes" xml:space="preserve">
          <source>The compiler encountered a referenced to a locally defined symbol that either wasn't exported or wasn't initialized.</source>
          <target state="translated">エクスポートされていないか、初期化されていないローカル定義シンボルへの参照がありました。</target>
        </trans-unit>
        <trans-unit id="98ec5135addca132edc67362962593357c1995fe" translate="yes" xml:space="preserve">
          <source>The compiler erases &lt;em&gt;type position&lt;/em&gt; references after conversion from TypeScript, so they have no impact on tree-shaking.</source>
          <target state="translated">コンパイラはTypeScriptからの変換後に&lt;em&gt;型位置&lt;/em&gt;参照を消去するため、ツリーの揺れには影響しません。</target>
        </trans-unit>
        <trans-unit id="ca1bd41286b7b47d0a30a94f678cfe97b2c0aa55" translate="yes" xml:space="preserve">
          <source>The compiler finds a pipe if the pipe's &lt;em&gt;name&lt;/em&gt; appears within the pipe syntax of the template HTML.</source>
          <target state="translated">パイプの&lt;em&gt;名前&lt;/em&gt;がテンプレートHTMLのパイプ構文内にある場合、コンパイラーはパイプを検出します。</target>
        </trans-unit>
        <trans-unit id="85ca245c9abcc7994f5066093444c00be9929c1e" translate="yes" xml:space="preserve">
          <source>The compiler found a reference to an exported variable or static field that wasn't initialized. It needs the value of that variable to generate code.</source>
          <target state="translated">コンパイラは、初期化されていないエクスポートされた変数または静的フィールドへの参照を見つけました。コードを生成するには、その変数の値が必要です。</target>
        </trans-unit>
        <trans-unit id="8ae63bcc430b2dd230e7e26c813c3c02cb2734f3" translate="yes" xml:space="preserve">
          <source>The compiler generates the component factory, which includes the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; provider code, in a separate module. &lt;em&gt;That&lt;/em&gt; factory module can't reach back to &lt;em&gt;this&lt;/em&gt; source module to access the local (non-exported) &lt;code&gt;foo&lt;/code&gt; variable.</source>
          <target state="translated">コンパイラーは、 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; プロバイダーコードを含むコンポーネントファクトリを別のモジュールに生成します。&lt;em&gt;その&lt;/em&gt;ファクトリーモジュールは、&lt;em&gt;この&lt;/em&gt;ソースモジュールに戻ってローカル（エクスポートされていない） &lt;code&gt;foo&lt;/code&gt; 変数にアクセスすることができません。</target>
        </trans-unit>
        <trans-unit id="92ce2206bc50448555d44e682fc1007463818f9c" translate="yes" xml:space="preserve">
          <source>The compiler generates the component factory, which includes the &lt;code&gt;useValue&lt;/code&gt; provider code, in a separate module. &lt;em&gt;That&lt;/em&gt; factory module can't reach back to &lt;em&gt;this&lt;/em&gt; source module to access the local (non-exported) &lt;code&gt;foo&lt;/code&gt; variable.</source>
          <target state="translated">コンパイラーは、 &lt;code&gt;useValue&lt;/code&gt; プロバイダーコードを含むコンポーネントファクトリを別のモジュールに生成します。&lt;em&gt;その&lt;/em&gt;ファクトリモジュールは、&lt;em&gt;この&lt;/em&gt;ソースモジュールに戻って、ローカル（エクスポートされていない） &lt;code&gt;foo&lt;/code&gt; 変数にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="0712bff79b6ba8bd1174d1e3baa5133a297e4d4c" translate="yes" xml:space="preserve">
          <source>The compiler handles token references in these positions differently.</source>
          <target state="translated">コンパイラは、これらの位置のトークン参照を異なる方法で処理します。</target>
        </trans-unit>
        <trans-unit id="1c2d272b65afaacb9c96d83311fa7679569cb638" translate="yes" xml:space="preserve">
          <source>The compiler must retain &lt;em&gt;value position&lt;/em&gt; references at runtime, which prevents the component from being tree-shaken.</source>
          <target state="translated">コンパイラは実行時に&lt;em&gt;値の位置&lt;/em&gt;参照を保持する必要があります。これにより、コンポーネントがツリーシェイクされるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="4ada9db2a3fbbffaa6e62a942bdef132fbfb3595" translate="yes" xml:space="preserve">
          <source>The compiler needs the value of the &lt;code&gt;template&lt;/code&gt; property &lt;em&gt;right now&lt;/em&gt; to generate the component factory. The variable reference alone is insufficient. Prefixing the declaration with &lt;code&gt;export&lt;/code&gt; merely produces a new error, &quot;&lt;a href=&quot;aot-metadata-errors#only-initialized-variables&quot;&gt;&lt;code&gt;Only initialized variables and constants can be referenced&lt;/code&gt;&lt;/a&gt;&quot;.</source>
          <target state="translated">コンパイラは、コンポーネントファクトリを生成するために、&lt;em&gt;今すぐ&lt;/em&gt; &lt;code&gt;template&lt;/code&gt; プロパティの値を必要とします。変数参照だけでは不十分です。宣言の前に &lt;code&gt;export&lt;/code&gt; を付けると、「&lt;a href=&quot;aot-metadata-errors#only-initialized-variables&quot;&gt; &lt;code&gt;Only initialized variables and constants can be referenced&lt;/code&gt; &lt;/a&gt;」という新しいエラーが発生するだけです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="126c486c473104383ae1229ed43b46dfdfc50d01" translate="yes" xml:space="preserve">
          <source>The compiler only allows metadata that create instances of the class &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">コンパイラーは、 &lt;code&gt;@angular/core&lt;/code&gt; からクラス &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; のインスタンスを作成するメタデータのみを許可します。</target>
        </trans-unit>
        <trans-unit id="c9f89138d6d0f2fb62cfc6fb9e28cc12abb7395f" translate="yes" xml:space="preserve">
          <source>The compiler only supports metadata for the &lt;a href=&quot;../api/core#decorators&quot;&gt;Angular decorators in the &lt;code&gt;@angular/core&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">コンパイラ&lt;a href=&quot;../api/core#decorators&quot;&gt;は、 &lt;code&gt;@angular/core&lt;/code&gt; モジュール&lt;/a&gt;のAngularデコレータのメタデータのみをサポートします。</target>
        </trans-unit>
        <trans-unit id="dc097f6a4e195c52e2bb0c422611001de27e4295" translate="yes" xml:space="preserve">
          <source>The compiler starts with the entry components, then it generates code for the declared components it &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;finds&lt;/a&gt; in an entry component's template, then for the declared components it discovers in the templates of previously compiled components, and so on. At the end of the process, the compiler has generated code for every entry component and every component reachable from an entry component.</source>
          <target state="translated">コンパイラーはエントリー・コンポーネントから開始し、エントリー・コンポーネントのテンプレートで&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;検出さ&lt;/a&gt;れた宣言済みコンポーネントのコードを生成します。次に、以前にコンパイルされたコンポーネントのテンプレートで検出された宣言済みコンポーネントのコードなどを生成します。プロセスの最後に、コンパイラはすべてのエントリコンポーネントと、エントリコンポーネントから到達可能なすべてのコンポーネントのコードを生成しました。</target>
        </trans-unit>
        <trans-unit id="30de544841894f2a949ed7ed373dd95bbee68599" translate="yes" xml:space="preserve">
          <source>The compiler treats object literals containing the fields &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; specially, converting the expression initializing one of these fields into an exported variable that replaces the expression. This process of rewriting these expressions removes all the restrictions on what can be in them because the compiler doesn't need to know the expression's value&amp;mdash;it just needs to be able to generate a reference to the value.</source>
          <target state="translated">コンパイラは、フィールド &lt;code&gt;useClass&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;data&lt;/code&gt; を含むオブジェクトリテラルを特別に扱い、これらのフィールドの1つを初期化する式を、式を置き換えるエクスポートされた変数に変換します。これらの式を書き換えるこのプロセスは、コンパイラーが式の値を知る必要がないため、式に含まれる可能性のあるすべての制限を取り除きます。値への参照を生成できればよいだけです。</target>
        </trans-unit>
        <trans-unit id="465dc08186ad9c2bbff559d79ad3f0253ec651d2" translate="yes" xml:space="preserve">
          <source>The compiler treats object literals containing the fields &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;useValue&lt;/code&gt;, &lt;code&gt;useFactory&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; specially, converting the expression initializing one of these fields into an exported variable that replaces the expression. This process of rewriting these expressions removes all the restrictions on what can be in them because the compiler doesn't need to know the expression's value&amp;mdash;it just needs to be able to generate a reference to the value.</source>
          <target state="translated">コンパイラは、フィールド &lt;code&gt;useClass&lt;/code&gt; 、 &lt;code&gt;useValue&lt;/code&gt; 、 &lt;code&gt;useFactory&lt;/code&gt; 、および &lt;code&gt;data&lt;/code&gt; を含むオブジェクトリテラルを特別に処理し、これらのフィールドの1つを初期化する式を、式を置き換えるエクスポートされた変数に変換します。これらの式を書き換えるこのプロセスにより、コンパイラは式の値を知る必要がなく、値への参照を生成できる必要があるため、式に含めることができるものに関するすべての制限がなくなります。</target>
        </trans-unit>
        <trans-unit id="db26295d71e3539c97b99511069043f20a6fd3aa" translate="yes" xml:space="preserve">
          <source>The compiler treats this usage as if you had written:</source>
          <target state="translated">コンパイラはこの使用法をあたかも書いたかのように扱います。</target>
        </trans-unit>
        <trans-unit id="24b187f48898ccf4dbc0fdd64dfa738c3e7bfd6e" translate="yes" xml:space="preserve">
          <source>The compiler understands all syntax forms that the collector supports, but it may reject &lt;em&gt;syntactically&lt;/em&gt; correct metadata if the &lt;em&gt;semantics&lt;/em&gt; violate compiler rules.</source>
          <target state="translated">コンパイラーはコレクターがサポートするすべての構文形式を理解しますが、&lt;em&gt;セマンティクス&lt;/em&gt;がコンパイラー規則に違反している場合、&lt;em&gt;構文的に&lt;/em&gt;正しいメタデータを拒否する可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5929dc62de7601c08bcabe703705f0dbec26534b" translate="yes" xml:space="preserve">
          <source>The compiler will &lt;a href=&quot;aot-compiler#code-folding&quot;&gt;fold&lt;/a&gt; the expression into the provider as if you had written this.</source>
          <target state="translated">コンパイラがします&lt;a href=&quot;aot-compiler#code-folding&quot;&gt;倍&lt;/a&gt;あなたがこれを書いていたかのように、プロバイダへの発現を。</target>
        </trans-unit>
        <trans-unit id="138f31c0677c88cc7b7a7fd6bf76154f84ce3954" translate="yes" xml:space="preserve">
          <source>The compiler will recognize the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; element and the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute because you declared a corresponding &lt;code&gt;AppComponent&lt;/code&gt; and &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成で対応する &lt;code&gt;AppComponent&lt;/code&gt; と &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; を宣言したため、コンパイラーは &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 要素と &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 属性を認識します。</target>
        </trans-unit>
        <trans-unit id="715bb9b8568dd05e7eb02ef4fd3d2ba93fd18630" translate="yes" xml:space="preserve">
          <source>The completed directive code looks like this:</source>
          <target state="translated">完成したディレクティブのコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5053850abd39601781be8b25dae3426c32eb731b" translate="yes" xml:space="preserve">
          <source>The component DOM tests described in this guide often require extensive setup and advanced techniques whereas the &lt;a href=&quot;testing#component-class-testing&quot;&gt;unit tests&lt;/a&gt; are comparatively simple.</source>
          <target state="translated">このガイドで説明されているコンポーネントDOMテストは、多くの場合、広範なセットアップと高度な技術を必要としますが、&lt;a href=&quot;testing#component-class-testing&quot;&gt;単体テスト&lt;/a&gt;は比較的単純です。</target>
        </trans-unit>
        <trans-unit id="945dcf8f41bb23dc85788ad4c63aa881eb1cb6bf" translate="yes" xml:space="preserve">
          <source>The component defines a &lt;code&gt;deleteRequest&lt;/code&gt; property that returns an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;. When the user clicks &lt;em&gt;delete&lt;/em&gt;, the component invokes the &lt;code&gt;delete()&lt;/code&gt; method, telling the &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; to emit an &lt;code&gt;Item&lt;/code&gt; object.</source>
          <target state="translated">コンポーネント定義 &lt;code&gt;deleteRequest&lt;/code&gt; 返すプロパティ &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 。ユーザーが[ &lt;em&gt;削除]を&lt;/em&gt;クリック&lt;em&gt;する&lt;/em&gt;と、コンポーネントは &lt;code&gt;delete()&lt;/code&gt; メソッドを呼び出し、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;Item&lt;/code&gt; オブジェクトを発行するよう指示します。</target>
        </trans-unit>
        <trans-unit id="5fed15d886f224a42d47fdb41a31f93da40106cc" translate="yes" xml:space="preserve">
          <source>The component defines a &lt;code&gt;deleteRequest&lt;/code&gt; property that returns an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;. When the user clicks &lt;strong&gt;Delete&lt;/strong&gt;, the component invokes the &lt;code&gt;delete()&lt;/code&gt; method, telling the &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; to emit an &lt;code&gt;Item&lt;/code&gt; object.</source>
          <target state="translated">コンポーネント定義 &lt;code&gt;deleteRequest&lt;/code&gt; 返すプロパティ &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 。ユーザーが&lt;strong&gt;[削除]を&lt;/strong&gt;クリックすると、コンポーネントは &lt;code&gt;delete()&lt;/code&gt; メソッドを呼び出し、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;Item&lt;/code&gt; オブジェクトを発行するように指示します。</target>
        </trans-unit>
        <trans-unit id="8eb8273c79d0db2bd78752acb04c3573261ff2c7" translate="yes" xml:space="preserve">
          <source>The component defines an accessibility-enabled element with both the standard HTML attribute &lt;code&gt;role&lt;/code&gt;, and ARIA attributes. The ARIA attribute &lt;code&gt;aria-valuenow&lt;/code&gt; is bound to the user's input.</source>
          <target state="translated">コンポーネントは、標準のHTML属性 &lt;code&gt;role&lt;/code&gt; とARIA属性の両方を備えたアクセシビリティ対応要素を定義します。ARIA属性 &lt;code&gt;aria-valuenow&lt;/code&gt; はユーザーの入力にバインドされます。</target>
        </trans-unit>
        <trans-unit id="4f9ce139efb795e90ce6b8f3abad0b17a35b4fb0" translate="yes" xml:space="preserve">
          <source>The component definition also exports the class, &lt;code&gt;ProductAlertsComponent&lt;/code&gt;, which handles functionality for the component.</source>
          <target state="translated">コンポーネント定義は、コンポーネントの機能を処理するクラス &lt;code&gt;ProductAlertsComponent&lt;/code&gt; もエクスポートします。</target>
        </trans-unit>
        <trans-unit id="fa73e1af978181527b58e22c002fc64877e2e6db" translate="yes" xml:space="preserve">
          <source>The component directive example from above looks like this when expressed using the component API:</source>
          <target state="translated">上記のcomponentディレクティブの例は、component APIを使って表現するとこのようになります。</target>
        </trans-unit>
        <trans-unit id="7bc7b389fbcb64544804120818c464acab440078" translate="yes" xml:space="preserve">
          <source>The component file contains three transitions.</source>
          <target state="translated">コンポーネントファイルには、3つのトランジションが含まれています。</target>
        </trans-unit>
        <trans-unit id="05a22aee3a73845cd036df1c66514d97e0d66817" translate="yes" xml:space="preserve">
          <source>The component is instantiated by being listed in Angular template. This means that the host element is controlled by Angular, but the component's view will be controlled by AngularJS.</source>
          <target state="translated">コンポーネントはAngularテンプレートにリストアップされることでインスタンス化されます。つまり、ホスト要素はAngularで制御されますが、コンポーネントのビューはAngularJSで制御されることになります。</target>
        </trans-unit>
        <trans-unit id="634e741b6ed10e05a132403dcdaef42865cb78fc" translate="yes" xml:space="preserve">
          <source>The component is instantiated by being listed in AngularJS template. This means that the host element is controlled by AngularJS, but the component's view will be controlled by Angular.</source>
          <target state="translated">コンポーネントはAngularJSのテンプレートにリストアップされることでインスタンス化されます。つまり、ホスト要素はAngularJSで制御されますが、コンポーネントのビューはAngularで制御されることになります。</target>
        </trans-unit>
        <trans-unit id="87bfe9e9cc407bbc45693a944d489ceb1150ea14" translate="yes" xml:space="preserve">
          <source>The component isn't expecting a result from the delete operation, so it subscribes without a callback. Even though you are not using the result, you still have to subscribe. Calling the &lt;code&gt;subscribe()&lt;/code&gt; method &lt;em&gt;executes&lt;/em&gt; the observable, which is what initiates the DELETE request.</source>
          <target state="translated">コンポーネントは削除操作の結果を期待していないため、コールバックなしでサブスクライブします。結果を使用していなくても、サブスクライブする必要があります。 &lt;code&gt;subscribe()&lt;/code&gt; メソッド&lt;em&gt;を&lt;/em&gt;呼び出すと、オブザーバブルが&lt;em&gt;実行&lt;/em&gt;され、DELETEリクエストが開始されます。</target>
        </trans-unit>
        <trans-unit id="4b73c6bddfe52c8459168da819770d17a2a129c6" translate="yes" xml:space="preserve">
          <source>The component of the route</source>
          <target state="translated">ルートの構成要素</target>
        </trans-unit>
        <trans-unit id="4aa79cea92ca5f94c22df8eaa184e84e014458cf" translate="yes" xml:space="preserve">
          <source>The component of the route, a constant.</source>
          <target state="translated">ルートの構成要素、定数。</target>
        </trans-unit>
        <trans-unit id="1f39c6523ba2e6e387e161f0f9a129bc4867c79e" translate="yes" xml:space="preserve">
          <source>The component quickly becomes cluttered with data access minutia. The component becomes harder to understand, harder to test, and the data access logic can't be re-used or standardized.</source>
          <target state="translated">コンポーネントはすぐにデータアクセスの細かい部分でごちゃごちゃになります。コンポーネントの理解が難しくなり、テストが難しくなり、データ アクセス ロジックの再利用や標準化ができなくなります。</target>
        </trans-unit>
        <trans-unit id="7f56d078cb463ae3dcc2533c399d9111710a9122" translate="yes" xml:space="preserve">
          <source>The component renders as the following:</source>
          <target state="translated">コンポーネントは以下のようにレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="d642e45463b12cd87110e913308fd35c74b02d00" translate="yes" xml:space="preserve">
          <source>The component should only display the selected hero details if the &lt;code&gt;selectedHero&lt;/code&gt; exists.</source>
          <target state="translated">コンポーネントは、 &lt;code&gt;selectedHero&lt;/code&gt; が存在する場合にのみ、選択されたヒーローの詳細を表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd71cc1bc88a121f31376dc02838f1a5e74183b1" translate="yes" xml:space="preserve">
          <source>The component template interpolates the content as follows:</source>
          <target state="translated">コンポーネントテンプレートは、以下のように内容を補間します。</target>
        </trans-unit>
        <trans-unit id="c7dbc7c28ecb5af85fcbc4145f18fa9e1be06908" translate="yes" xml:space="preserve">
          <source>The component test file generated by the CLI calls &lt;code&gt;compileComponents()&lt;/code&gt; even though it is never required when running &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng test&lt;/code&gt; の実行時に必要とされない場合でも、CLIによって生成されたコンポーネントテストファイルは &lt;code&gt;compileComponents()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8a0311eba241fe09acc7a2c71109494bced8b04d" translate="yes" xml:space="preserve">
          <source>The component to instantiate when the path matches. Can be empty if child routes specify components.</source>
          <target state="translated">パスが一致したときにインスタンス化するコンポーネント。子ルートがコンポーネントを指定している場合は空にすることができます。</target>
        </trans-unit>
        <trans-unit id="7c07c7ab7dee70787d92839f5740c175aea5adee" translate="yes" xml:space="preserve">
          <source>The component to transform.</source>
          <target state="translated">変換するコンポーネント。</target>
        </trans-unit>
        <trans-unit id="c03142546a7a9067dc7bd0f3bdc5f667718c42e5" translate="yes" xml:space="preserve">
          <source>The component tree can be very deep and, most of the time, the nested components play no role in testing the component at the top of the tree.</source>
          <target state="translated">コンポーネント・ツリーは非常に奥が深く、ほとんどの場合、入れ子になっているコンポーネントは、ツリーの上部にあるコンポーネントのテストには何の役割も果たしていません。</target>
        </trans-unit>
        <trans-unit id="8e15674fa536b1448524d88911c6fd3a5af7c894" translate="yes" xml:space="preserve">
          <source>The component type.</source>
          <target state="translated">コンポーネントの種類。</target>
        </trans-unit>
        <trans-unit id="a025e9eb678c1adf18cef368c04d88f1706b83ff" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;birthday&lt;/code&gt; value flows through the &lt;a href=&quot;template-expression-operators#pipe&quot;&gt;pipe operator&lt;/a&gt; ( | ) to the &lt;a href=&quot;../api/common/datepipe&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">コンポーネントの &lt;code&gt;birthday&lt;/code&gt; 値は、&lt;a href=&quot;template-expression-operators#pipe&quot;&gt;パイプ演算子&lt;/a&gt;（|）を介して&lt;a href=&quot;../api/common/datepipe&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;関数に流れます。</target>
        </trans-unit>
        <trans-unit id="3a0e4aec9a04b168fe5b9cfc031aad8b684a6788" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;ngOnInit&lt;/code&gt; lifecycle hook calls the &lt;code&gt;HeroService&lt;/code&gt; method, not the constructor.</source>
          <target state="translated">コンポーネントの &lt;code&gt;ngOnInit&lt;/code&gt; ライフサイクルフックは、 &lt;code&gt;HeroService&lt;/code&gt; ではなく、HeroServiceメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="a393e0445991d1a36a41d0c3b83117e4d646235e" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;selected&lt;/code&gt; property returns an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;, which looks like an RxJS synchronous &lt;code&gt;Observable&lt;/code&gt; to consumers. The test subscribes to it &lt;em&gt;explicitly&lt;/em&gt; just as the host component does &lt;em&gt;implicitly&lt;/em&gt;.</source>
          <target state="translated">コンポーネントの &lt;code&gt;selected&lt;/code&gt; プロパティは、コンシューマにとってはRxJS同期 &lt;code&gt;Observable&lt;/code&gt; のように見える &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; を返します。ホストコンポーネントが&lt;em&gt;暗黙&lt;/em&gt;&lt;em&gt;的&lt;/em&gt;に行うように、テストは&lt;em&gt;明示的に&lt;/em&gt;サブスクライブします。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b1e101d4a9e06ccb23308352dafb1f38a636d4e4" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;selector&lt;/code&gt; value of &quot;app-hero-form&quot; means you can drop this form in a parent template using the &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">コンポーネントの &lt;code&gt;selector&lt;/code&gt; 値「app-hero-form」は、 &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; タグを使用してこのフォームを親テンプレートにドロップできることを意味します。</target>
        </trans-unit>
        <trans-unit id="1962b26c443a8f93187c9613e919572df2a309b4" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;showConfigResponse()&lt;/code&gt; method displays the response headers as well as the configuration:</source>
          <target state="translated">コンポーネントの &lt;code&gt;showConfigResponse()&lt;/code&gt; メソッドは、応答ヘッダーと構成を表示します。</target>
        </trans-unit>
        <trans-unit id="8bb55779cfa560056a11685cf4309c305487f8a0" translate="yes" xml:space="preserve">
          <source>The component's HTML selector.</source>
          <target state="translated">コンポーネントのHTMLセレクタ。</target>
        </trans-unit>
        <trans-unit id="45c242f97cfe38564c598a3971646c8412339c77" translate="yes" xml:space="preserve">
          <source>The conditional displays the data only if &lt;code&gt;userStream&lt;/code&gt; returns a value, so you don't need to use the &lt;a href=&quot;../../guide/template-expression-operators#safe-navigation-operator&quot;&gt;safe-navigation-operator&lt;/a&gt; (&lt;code&gt;?.&lt;/code&gt;) to guard against null values when accessing properties. You can display an alternative template while waiting for the data.</source>
          <target state="translated">条件付きは、 &lt;code&gt;userStream&lt;/code&gt; が値を返す場合にのみデータを表示するため、プロパティにアクセスするときにnull値を防ぐために&lt;a href=&quot;../../guide/template-expression-operators#safe-navigation-operator&quot;&gt;safe-navigation-operator&lt;/a&gt;（ &lt;code&gt;?.&lt;/code&gt; ）を使用する必要はありません。データを待っている間に代替テンプレートを表示できます。</target>
        </trans-unit>
        <trans-unit id="906d8cdaee971e09d03956839d141439a00f4e7f" translate="yes" xml:space="preserve">
          <source>The conditional displays the data only if &lt;code&gt;userStream&lt;/code&gt; returns a value, so you don't need to use the &lt;a href=&quot;../../guide/template-syntax#safe-navigation-operator&quot;&gt;safe-navigation-operator&lt;/a&gt; (&lt;code&gt;?.&lt;/code&gt;) to guard against null values when accessing properties. You can display an alternative template while waiting for the data.</source>
          <target state="translated">条件付きでは、 &lt;code&gt;userStream&lt;/code&gt; が値を返した場合にのみデータが表示されるので、プロパティにアクセスするときにnull値を防ぐために&lt;a href=&quot;../../guide/template-syntax#safe-navigation-operator&quot;&gt;safe-navigation-operator&lt;/a&gt;（ &lt;code&gt;?.&lt;/code&gt; ）を使用する必要はありません。データを待つ間、代替テンプレートを表示できます。</target>
        </trans-unit>
        <trans-unit id="d86de5c94963265bd4f854ea02275e5968f8001b" translate="yes" xml:space="preserve">
          <source>The configurable options for a default or targeted build generally correspond to the options available for the &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;cli/serve&quot;&gt;&lt;code&gt;ng serve&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;cli/test&quot;&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/a&gt; commands. For details of those options and their possible values, see the &lt;a href=&quot;cli&quot;&gt;CLI Reference&lt;/a&gt;.</source>
          <target state="translated">デフォルトまたはターゲットビルドの構成可能なオプションは、&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;cli/serve&quot;&gt; &lt;code&gt;ng serve&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;cli/test&quot;&gt; &lt;code&gt;ng test&lt;/code&gt; &lt;/a&gt;コマンドで使用可能なオプションに対応しています。これらのオプションと可能な値の詳細については、&lt;a href=&quot;cli&quot;&gt;CLIリファレンスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8683e9a1dac5420bfeea384e8f30a82f93d62bfe" translate="yes" xml:space="preserve">
          <source>The configuration file uses the JSON format. All file paths must begin with &lt;code&gt;/&lt;/code&gt;, which corresponds to the deployment directory&amp;mdash;usually &lt;code&gt;dist/&amp;lt;project-name&amp;gt;&lt;/code&gt; in CLI projects.</source>
          <target state="translated">構成ファイルはJSON形式を使用します。すべてのファイルパスは &lt;code&gt;/&lt;/code&gt; で始まる必要があります。これは、デプロイメントディレクトリ（通常、CLIプロジェクトでは &lt;code&gt;dist/&amp;lt;project-name&amp;gt;&lt;/code&gt; )に対応します。</target>
        </trans-unit>
        <trans-unit id="40e87f989f48f3ba9948b17f612ebb52c1eb9ad7" translate="yes" xml:space="preserve">
          <source>The configuration file uses the JSON format. All file paths must begin with &lt;code&gt;/&lt;/code&gt;, which is the deployment directory&amp;mdash;usually &lt;code&gt;dist&lt;/code&gt; in CLI projects.</source>
          <target state="translated">構成ファイルはJSON形式を使用します。すべてのファイルパスは、展開ディレクトリである &lt;code&gt;/&lt;/code&gt; で始まる必要があります。通常、CLIプロジェクトでは &lt;code&gt;dist&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9b69952674dd4b63a3a568c2873291a95fb4f9db" translate="yes" xml:space="preserve">
          <source>The configuration key to set or query, in JSON path format. For example: &quot;a[3].foo.bar[2]&quot;. If no new value is provided, returns the current value of this key.</source>
          <target state="translated">設定またはクエリする設定キーを JSON パス形式で指定します。例えば、以下のようになります。&quot;a[3].foo.bar[2]&quot; のようになります。新しい値が提供されない場合は、このキーの現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="eb6fc904e89e428b0083d3c15ea355abb65dfe2a" translate="yes" xml:space="preserve">
          <source>The configuration options generally correspond to the command options. You can override individual configuration defaults by specifying the corresponding options on the command line. The command can accept option names given in either dash-case or camelCase. Note that in the configuration file, you must specify names in camelCase.</source>
          <target state="translated">構成オプションは、通常、コマンドオプションに対応しています。コマンドラインで対応するオプションを指定することで、個々の構成の既定値を上書きすることができます。コマンドは、ダッシュケースまたはキャメルケースで指定されたオプション名を受け入れることができます。構成ファイルでは、キャメルケースで名前を指定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7b16623cd8cb243d6de3e15d7611a5847bcf2f77" translate="yes" xml:space="preserve">
          <source>The configuration to apply service worker to.</source>
          <target state="translated">サービスワーカーを適用するための設定です。</target>
        </trans-unit>
        <trans-unit id="c64e682f36d33924e7b55e376fb7962258b0cea6" translate="yes" xml:space="preserve">
          <source>The configuration used to match this route *</source>
          <target state="translated">このルートに合わせて使用した設定</target>
        </trans-unit>
        <trans-unit id="63af88f97d299ed29fc90f13430520c0ca49701b" translate="yes" xml:space="preserve">
          <source>The configuration used to match this route.</source>
          <target state="translated">このルートに合わせて使用した構成。</target>
        </trans-unit>
        <trans-unit id="68528e3bdae3eede6b9bd6f97339c8df83d69334" translate="yes" xml:space="preserve">
          <source>The configuration's injector is the initial injector set on the class, and used by default for each created instance.This behavior can be overridden with the static property to affect all newly created instances, or as a constructor argument for one-off creations.</source>
          <target state="translated">この動作は、新しく作成されたすべてのインスタンスに影響を与えるために static プロパティを使用してオーバーライドすることもできますし、1 回限りの作成ではコンストラクタの引数として使用することもできます。</target>
        </trans-unit>
        <trans-unit id="834a1e227c0c50a09a054c8e9e6ce66a5e71337b" translate="yes" xml:space="preserve">
          <source>The configurations key is optional, we'll leave it out for now.</source>
          <target state="translated">コンフィギュレーションキーはオプションですので、今のところは省きます。</target>
        </trans-unit>
        <trans-unit id="a6f51a44f469c2e24865a1040b3de3b6516154cf" translate="yes" xml:space="preserve">
          <source>The console output looks a bit like this:</source>
          <target state="translated">コンソール出力はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="72c105d38074b2df6181fbe4b841b458d3e091b7" translate="yes" xml:space="preserve">
          <source>The constructed paragraph renders strangely.</source>
          <target state="translated">構成された段落は奇妙に表示されます。</target>
        </trans-unit>
        <trans-unit id="c7fdd6a63e113f58fb8d465907d502d5baf57f6c" translate="yes" xml:space="preserve">
          <source>The constructor asks for an injected instance of &lt;code&gt;Logger&lt;/code&gt; and stores it in a private field called &lt;code&gt;logger&lt;/code&gt;. The &lt;code&gt;getHeroes()&lt;/code&gt; method logs a message when asked to fetch heroes.</source>
          <target state="translated">コンストラクターは &lt;code&gt;Logger&lt;/code&gt; の挿入されたインスタンスを要求し、それを &lt;code&gt;logger&lt;/code&gt; というプライベートフィールドに格納します。 &lt;code&gt;getHeroes()&lt;/code&gt; ヒーローを取得するために尋ねられたときの方法は、メッセージをログに記録します。</target>
        </trans-unit>
        <trans-unit id="36406f88f194439134400738d911a712dacb18ae" translate="yes" xml:space="preserve">
          <source>The constructor expects Angular to inject the &lt;code&gt;HeroService&lt;/code&gt; into a private &lt;code&gt;heroService&lt;/code&gt; property.</source>
          <target state="translated">コンストラクターは、Angularが &lt;code&gt;HeroService&lt;/code&gt; をプライベート &lt;code&gt;heroService&lt;/code&gt; プロパティに注入することを期待しています。</target>
        </trans-unit>
        <trans-unit id="02e6daf629ba2d69937d75255228c5dcdccc4d38" translate="yes" xml:space="preserve">
          <source>The constructor injects the &lt;code&gt;HeroesService&lt;/code&gt;, which defines the following interface.</source>
          <target state="translated">コンストラクターは、次のインターフェイスを定義する &lt;code&gt;HeroesService&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="7eab4a9cd938314dc3fba0ac964a8f9a79e0b72b" translate="yes" xml:space="preserve">
          <source>The constructor isn't an Angular hook &lt;em&gt;per se&lt;/em&gt;. The log confirms that input properties (the &lt;code&gt;name&lt;/code&gt; property in this case) have no assigned values at construction.</source>
          <target state="translated">コンストラクター&lt;em&gt;自体&lt;/em&gt;はAngularフックではありません。ログは、入力プロパティ（この場合は &lt;code&gt;name&lt;/code&gt; プロパティ）に作成時に値が割り当てられていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="a26127b5ec5fe19c64995c70e6ae4945b4c33a2f" translate="yes" xml:space="preserve">
          <source>The constructor tells Angular to inject the &lt;code&gt;GreetingModule&lt;/code&gt; into itself. The injection would be circular if Angular looked for &lt;code&gt;GreetingModule&lt;/code&gt; in the &lt;em&gt;current&lt;/em&gt; injector, but the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; decorator means &quot;look for &lt;code&gt;GreetingModule&lt;/code&gt; in an ancestor injector, above me in the injector hierarchy.&quot;</source>
          <target state="translated">コンストラクターは、Angularに &lt;code&gt;GreetingModule&lt;/code&gt; をそれ自体に挿入するように指示します。Angularが&lt;em&gt;現在の&lt;/em&gt;インジェクターで &lt;code&gt;GreetingModule&lt;/code&gt; を検索した場合、インジェクションは循環的ですが、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;（）デコレーターは、「インジェクター階層で私より上の祖先インジェクターで &lt;code&gt;GreetingModule&lt;/code&gt; を検索する」ことを意味します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2a0a07f08ada0f60a409bcf703aee3b141535d37" translate="yes" xml:space="preserve">
          <source>The content to replace with.</source>
          <target state="translated">置き換える内容です。</target>
        </trans-unit>
        <trans-unit id="434978912cc545b69caa64dbe5cbc7693818a867" translate="yes" xml:space="preserve">
          <source>The contents of &lt;code&gt;node_modules/some-package/images/&lt;/code&gt; will be available in &lt;code&gt;dist/some-package/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node_modules/some-package/images/&lt;/code&gt; の内容は、 &lt;code&gt;dist/some-package/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="de9762d967849535b472516dad70dc2a5e2d798a" translate="yes" xml:space="preserve">
          <source>The context for terms in an expression is a blend of the &lt;em&gt;template variables&lt;/em&gt;, the directive's &lt;em&gt;context&lt;/em&gt; object (if it has one), and the component's &lt;em&gt;members&lt;/em&gt;. If you reference a name that belongs to more than one of these namespaces, the template variable name takes precedence, followed by a name in the directive's &lt;em&gt;context&lt;/em&gt;, and, lastly, the component's member names.</source>
          <target state="translated">式内の用語のコンテキストは、&lt;em&gt;テンプレート変数&lt;/em&gt;、ディレクティブの&lt;em&gt;コンテキスト&lt;/em&gt;オブジェクト（存在する場合）、およびコンポーネントの&lt;em&gt;メンバーの&lt;/em&gt;組み合わせです。これらの名前空間の複数に属する名前を参照する場合は、テンプレート変数名が優先され、その後にディレクティブの&lt;em&gt;コンテキスト&lt;/em&gt;内の名前が続き、最後にコンポーネントのメンバー名が続きます。</target>
        </trans-unit>
        <trans-unit id="516e999a9dfd7f3d5bfbc11b52a151eecf3c24d1" translate="yes" xml:space="preserve">
          <source>The context for this view, inherited from the anchor element.</source>
          <target state="translated">このビューのコンテキスト。</target>
        </trans-unit>
        <trans-unit id="3c82f52221a89639198df33fedec6d9813e4dcee" translate="yes" xml:space="preserve">
          <source>The context in which to listen for events. Can be the entire window or document, the body of the document, or a specific DOM element.</source>
          <target state="translated">イベントをリッスンするためのコンテキスト。ウィンドウやドキュメント全体、ドキュメントの本文、あるいは特定の DOM 要素。</target>
        </trans-unit>
        <trans-unit id="f8c9c8d1c4b92136befec8a41da007e51cffd2d0" translate="yes" xml:space="preserve">
          <source>The context object passed into a rule provides access to utility functions and metadata that the schematic may need to work with, including a logging API to help with debugging. The context also defines a &lt;em&gt;merge strategy&lt;/em&gt; that determines how changes are merged from the staged tree into the base tree. A change can be accepted or ignored, or throw an exception.</source>
          <target state="translated">ルールに渡されるコンテキストオブジェクトは、デバッグに役立つロギングAPIを含む、回路図が動作する必要があるユーティリティ関数とメタデータへのアクセスを提供します。コンテキストは、ステージングされたツリーからベースツリーに変更をマージする方法を決定する&lt;em&gt;マージ戦略&lt;/em&gt;も定義します。変更を受け入れるか無視するか、例外をスローすることができます。</target>
        </trans-unit>
        <trans-unit id="ac7cbb9fe3e4587d9144d9bbb440b6a49b7cc42b" translate="yes" xml:space="preserve">
          <source>The context of a template statement can be the component class instance or the template. Because of this, template statements cannot refer to anything in the global namespace such as &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;document&lt;/code&gt;. For example, template statements can't call &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;Math.max()&lt;/code&gt;.</source>
          <target state="translated">テンプレートステートメントのコンテキストは、コンポーネントクラスインスタンスまたはテンプレートにすることができます。このため、テンプレートステートメントは、 &lt;code&gt;window&lt;/code&gt; や &lt;code&gt;document&lt;/code&gt; などのグローバル名前空間内の何も参照できません。たとえば、テンプレートステートメントは &lt;code&gt;console.log()&lt;/code&gt; または &lt;code&gt;Math.max()&lt;/code&gt; を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="62f2c493dfbb04d85e053c932b8ad74fee0d374f" translate="yes" xml:space="preserve">
          <source>The context property for &lt;code&gt;let-hero&lt;/code&gt; wasn't specified. Its intended source is implicit. Angular sets &lt;code&gt;let-hero&lt;/code&gt; to the value of the context's &lt;code&gt;$implicit&lt;/code&gt; property, which &lt;code&gt;NgFor&lt;/code&gt; has initialized with the hero for the current iteration.</source>
          <target state="translated">&lt;code&gt;let-hero&lt;/code&gt; のコンテキストプロパティが指定されていません。その意図されたソースは暗黙的です。Angularは &lt;code&gt;let-hero&lt;/code&gt; をコンテキストの &lt;code&gt;$implicit&lt;/code&gt; プロパティの値に設定します。これは、 &lt;code&gt;NgFor&lt;/code&gt; が現在の反復のヒーローで初期化したものです。</target>
        </trans-unit>
        <trans-unit id="c7a76e231011258158f2254b2b16d3db05a38e38" translate="yes" xml:space="preserve">
          <source>The control directive from which to get the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; を取得する制御ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="2bbb61d0c4df311e8b07462ca259b3c982a86148" translate="yes" xml:space="preserve">
          <source>The control directive to add to the form.</source>
          <target state="translated">フォームに追加する制御ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="8cf41ea4b3493c2c856c54199afc949817c4eac6" translate="yes" xml:space="preserve">
          <source>The control has been visited.</source>
          <target state="translated">コントロールが訪問されました。</target>
        </trans-unit>
        <trans-unit id="8285061d6a84be25121b021c12ee6bd37827dfdd" translate="yes" xml:space="preserve">
          <source>The control name to add to the collection</source>
          <target state="translated">コレクションに追加するコントロール名</target>
        </trans-unit>
        <trans-unit id="5410d4b9567d41805c92f96af4682275c27445e2" translate="yes" xml:space="preserve">
          <source>The control name to check for existence in the collection</source>
          <target state="translated">コレクション内で存在を確認するコントロール名</target>
        </trans-unit>
        <trans-unit id="27a6dcc8aa638e92c26671752f447bfd819f1fd0" translate="yes" xml:space="preserve">
          <source>The control name to register in the collection</source>
          <target state="translated">コレクションに登録するコントロール名</target>
        </trans-unit>
        <trans-unit id="ecc2af5b43a3852f887c5005940458e40013ceda" translate="yes" xml:space="preserve">
          <source>The control name to remove from the collection</source>
          <target state="translated">コレクションから削除するコントロール名</target>
        </trans-unit>
        <trans-unit id="ecdbba447a430bfa7169d3caa0fdd744eda0f7c5" translate="yes" xml:space="preserve">
          <source>The control name to replace in the collection</source>
          <target state="translated">コレクション内で置き換えるコントロール名</target>
        </trans-unit>
        <trans-unit id="9760257811426aae616bf4d1494569b4a3c52759" translate="yes" xml:space="preserve">
          <source>The control to validate against.</source>
          <target state="translated">に対して検証するコントロールです。</target>
        </trans-unit>
        <trans-unit id="5b425478a2596d27714c9aeca87c94e3908535ff" translate="yes" xml:space="preserve">
          <source>The control value accessor also calls the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#viewToModelUpdate&quot;&gt;NgModel.viewToModelUpdate()&lt;/a&gt;&lt;/code&gt; method which emits an &lt;code&gt;ngModelChange&lt;/code&gt; event.</source>
          <target state="translated">コントロール値アクセサーは、 &lt;code&gt;ngModelChange&lt;/code&gt; イベントを &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#viewToModelUpdate&quot;&gt;NgModel.viewToModelUpdate()&lt;/a&gt;&lt;/code&gt; するNgModel.viewToModelUpdate（）メソッドも呼び出します。</target>
        </trans-unit>
        <trans-unit id="bd98c4bcc74109310318a5dad8988a21d99457b6" translate="yes" xml:space="preserve">
          <source>The control value accessor attached to the input triggers the &lt;code&gt;setValue()&lt;/code&gt; method on the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">入力に接続されたコントロール値アクセサーは、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスで &lt;code&gt;setValue()&lt;/code&gt; メソッドをトリガーします。</target>
        </trans-unit>
        <trans-unit id="f1cc67d8c922fc67a0beca6d8cfcfeb12e494a15" translate="yes" xml:space="preserve">
          <source>The control value accessor listening for events on the form input element immediately relays the new value to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">フォーム入力要素のイベントをリッスンするコントロール値アクセサーは、新しい値をすぐに &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスに中継します。</target>
        </trans-unit>
        <trans-unit id="6d0f6693ae5ef3a6a4bffa9b91611a36bc4a2862" translate="yes" xml:space="preserve">
          <source>The control value accessor on the form input element updates the element with the new value.</source>
          <target state="translated">フォーム入力要素の制御値アクセサは、新しい値で要素を更新します。</target>
        </trans-unit>
        <trans-unit id="e1fe9f7a09b8a92372a5486a9d79fb459c696cac" translate="yes" xml:space="preserve">
          <source>The control value accessor updates the form input element in the view with the latest &lt;code&gt;favoriteColor&lt;/code&gt; value.</source>
          <target state="translated">コントロール値アクセサーは、ビューのフォーム入力要素を最新の &lt;code&gt;favoriteColor&lt;/code&gt; 値で更新します。</target>
        </trans-unit>
        <trans-unit id="57410b20d49ca1897c2b04634df3cd7ef8cf74c9" translate="yes" xml:space="preserve">
          <source>The control's value has changed.</source>
          <target state="translated">コントロールの値が変更されました。</target>
        </trans-unit>
        <trans-unit id="ca5764f6850cc69be0e8c8077aba090d028119b4" translate="yes" xml:space="preserve">
          <source>The control's value is valid.</source>
          <target state="translated">コントロールの値が有効です。</target>
        </trans-unit>
        <trans-unit id="e9901119ca7da8a80f5cee35a4eeb845a13e8315" translate="yes" xml:space="preserve">
          <source>The conversion process implements the &lt;code&gt;&lt;a href=&quot;../api/elements/ngelementconstructor&quot;&gt;NgElementConstructor&lt;/a&gt;&lt;/code&gt; interface, and creates a constructor class that is configured to produce a self-bootstrapping instance of your component.</source>
          <target state="translated">変換プロセスは &lt;code&gt;&lt;a href=&quot;../api/elements/ngelementconstructor&quot;&gt;NgElementConstructor&lt;/a&gt;&lt;/code&gt; インターフェイスを実装し、コンポーネントのセルフブートストラップインスタンスを生成するように構成されたコンストラクタクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="c62334e88935fbdcec541fa91d80d7ebfb110faa" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; serves as a wrapper around the &lt;code&gt;forbiddenNameValidator&lt;/code&gt;.</source>
          <target state="translated">対応する &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; は、 &lt;code&gt;forbiddenNameValidator&lt;/code&gt; のラッパーとして機能します。</target>
        </trans-unit>
        <trans-unit id="71f13dbbb53ef63c0ce04dd500aaa91a7309173e" translate="yes" xml:space="preserve">
          <source>The corresponding DOM element in the browser (null for WebWorkers).</source>
          <target state="translated">ブラウザの対応する DOM 要素 (WebWorkers の場合は null)。</target>
        </trans-unit>
        <trans-unit id="6c2cbb3d5c755eeb2e5b9b3e623ec0e5d0851a99" translate="yes" xml:space="preserve">
          <source>The corresponding component template looks like this:</source>
          <target state="translated">対応するコンポーネントテンプレートは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="32c9b0cfa7f7e663d7530ee0ae139a0a521b8ab6" translate="yes" xml:space="preserve">
          <source>The created object does not get cached by the injector.</source>
          <target state="translated">作成されたオブジェクトはインジェクタによってキャッシュされません。</target>
        </trans-unit>
        <trans-unit id="2dda5305b34fe50eac42c633b9209406f904f2ac" translate="yes" xml:space="preserve">
          <source>The creation API parses the component looking for input properties, and defines corresponding attributes for the custom element. It transforms the property names to make them compatible with custom elements, which do not recognize case distinctions. The resulting attribute names use dash-separated lowercase. For example, for a component with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;('myInputProp') inputProp&lt;/code&gt;, the corresponding custom element defines an attribute &lt;code&gt;my-input-prop&lt;/code&gt;.</source>
          <target state="translated">作成APIはコンポーネントを解析して入力プロパティを探し、カスタム要素の対応する属性を定義します。プロパティ名を変換して、大文字と小文字の区別を認識しないカスタム要素と互換性があるようにします。結果の属性名には、ダッシュで区切られた小文字が使用されます。たとえば、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;('myInputProp') inputProp&lt;/code&gt; 場合、対応するカスタム要素は属性 &lt;code&gt;my-input-prop&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="a7ada0b3e583a0ac804c845e4cb5c1762cf95099" translate="yes" xml:space="preserve">
          <source>The curious, dedicated reader might enjoy this lengthy blog post, &lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot;&gt;&quot;&lt;em&gt;Tasks, microtasks, queues and schedules&lt;/em&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">好奇心旺盛で熱心な読者は、この長いブログ記事&lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot;&gt;「&lt;em&gt;タスク、マイクロタスク、キュー、スケジュール&lt;/em&gt;」を&lt;/a&gt;お楽しみ&lt;em&gt;いただけます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9d763599e77a8e6d59d75f1dcf9f6e13a9029d04" translate="yes" xml:space="preserve">
          <source>The currency code.</source>
          <target state="translated">通貨コードです。</target>
        </trans-unit>
        <trans-unit id="1e961714f083647d9f7ae1dda7fc90792c835c30" translate="yes" xml:space="preserve">
          <source>The current &lt;code&gt;BannerComponent&lt;/code&gt; presents static title text in the HTML template.</source>
          <target state="translated">現在の &lt;code&gt;BannerComponent&lt;/code&gt; は、HTMLテンプレートに静的なタイトルテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="6b2680b0b6ad0710d65d5e5d0746df48e0918d04" translate="yes" xml:space="preserve">
          <source>The current &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; uses the RxJS &lt;code&gt;of()&lt;/code&gt; function to return an array of mock heroes as an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">現在の &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; はRxJS &lt;code&gt;of()&lt;/code&gt; 関数を使用して、モックヒーローの配列を &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; として返します。</target>
        </trans-unit>
        <trans-unit id="f0560dbef41d1c541841cce2b26360211c4eacaf" translate="yes" xml:space="preserve">
          <source>The current Navigation object if one exists</source>
          <target state="translated">現在のナビゲーションオブジェクトが存在する場合</target>
        </trans-unit>
        <trans-unit id="7657c044778fdf6db1068d532e80d6b9bbb7dca8" translate="yes" xml:space="preserve">
          <source>The current URL.</source>
          <target state="translated">現在のURLです。</target>
        </trans-unit>
        <trans-unit id="f730ad3ca5d926f1046ca241082281a7fc5a38ff" translate="yes" xml:space="preserve">
          <source>The current guidelines allow for a three-level navigation structure with two header levels. Don't add a third header level.</source>
          <target state="translated">現在のガイドラインでは、2つのヘッダーレベルを持つ3レベルのナビゲーション構造が認められています。3つ目のヘッダーレベルを追加しないでください。</target>
        </trans-unit>
        <trans-unit id="ba120156cf1c2d4ed712977962e77791a19b845b" translate="yes" xml:space="preserve">
          <source>The current snapshot of the router state</source>
          <target state="translated">ルータの状態の現在のスナップショット</target>
        </trans-unit>
        <trans-unit id="f8da6bf8a2bb6f6853fcc1eb9997ee7e13be10da" translate="yes" xml:space="preserve">
          <source>The current snapshot of this route</source>
          <target state="translated">このルートの現在のスナップショット</target>
        </trans-unit>
        <trans-unit id="21d77846b699af6d4d8754e17ac9142b0c9df316" translate="yes" xml:space="preserve">
          <source>The current state of routing in this NgModule.</source>
          <target state="translated">このNgModuleの現在のルーティングの状態。</target>
        </trans-unit>
        <trans-unit id="a53af39d47142b7e376378e57c34e7d410be02ee" translate="yes" xml:space="preserve">
          <source>The current state of the router including a tree of the currently activated routes together with convenience methods for traversing the route tree.</source>
          <target state="translated">現在アクティブになっているルートのツリーを含むルーターの現在の状態を、ルートツリーをトラバースするための便利な方法とともに表示します。</target>
        </trans-unit>
        <trans-unit id="c415c67c1ff9b11622afff6651c02db58a193f2a" translate="yes" xml:space="preserve">
          <source>The current value</source>
          <target state="translated">現在の値</target>
        </trans-unit>
        <trans-unit id="e0698114602d013efa358ad69baa59d634483f5a" translate="yes" xml:space="preserve">
          <source>The current value of the control.</source>
          <target state="translated">コントロールの現在値。</target>
        </trans-unit>
        <trans-unit id="166fd9baf2239e5db9cc405e59c759c3c4b062a1" translate="yes" xml:space="preserve">
          <source>The current version becomes invalid due to a failed hash.</source>
          <target state="translated">ハッシュが失敗したため、現在のバージョンは無効になります。</target>
        </trans-unit>
        <trans-unit id="0e72187959d2f6f8846ed4b702c80eccf7a5d636" translate="yes" xml:space="preserve">
          <source>The custom element feature extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. A custom element (also called a &lt;em&gt;web component&lt;/em&gt;) is recognized by a browser when it's added to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry&quot;&gt;CustomElementRegistry&lt;/a&gt;.</source>
          <target state="translated">カスタム要素機能はHTMLを拡張し、JavaScriptコードによってコンテンツが作成および制御されるタグを定義できるようにします。カスタム要素（&lt;em&gt;Webコンポーネント&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;）が&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry&quot;&gt;CustomElementRegistryに&lt;/a&gt;追加されると、ブラウザーによって認識されます。</target>
        </trans-unit>
        <trans-unit id="79531376d994372336113a8ca4d9f22bc6ea61d5" translate="yes" xml:space="preserve">
          <source>The custom id is persistent. The extractor tool does not change it when the translatable text changes. Therefore, you do not need to update the translation. This approach makes maintenance easier.</source>
          <target state="translated">カスタムIDは永続的です。抽出ツールは、翻訳可能なテキストが変更されてもそれを変更しません。したがって、翻訳を更新する必要はありません。このアプローチにより、メンテナンスが容易になります。</target>
        </trans-unit>
        <trans-unit id="602948966524c9d08153f6c90b9a75768c2a47aa" translate="yes" xml:space="preserve">
          <source>The data model for this type of form must represent a question. The example includes the &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt;, which defines a question as the fundamental object in the model.</source>
          <target state="translated">このタイプのフォームのデータモデルは、質問を表す必要があります。この例には、質問をモデルの基本オブジェクトとして定義する &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="6b5e4745435b5221cc9e2e4e96dbb049887d7068" translate="yes" xml:space="preserve">
          <source>The data-binding and injection contexts of embedded views created from this &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; inherit from the contexts of this location.</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; から作成された埋め込みビューのデータバインディングコンテキストとインジェクションコンテキストは、この場所のコンテキストを継承します。</target>
        </trans-unit>
        <trans-unit id="f5a2918cf9fc155916140d56e47a05739e0b8db4" translate="yes" xml:space="preserve">
          <source>The data-binding context of the embedded view, as declared in the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; usage.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; の使用法で宣言されている、埋め込みビューのデータバインディングコンテキスト。</target>
        </trans-unit>
        <trans-unit id="91f462d727aaa6e3286220f710d54dc9c89b65cd" translate="yes" xml:space="preserve">
          <source>The date expression: a &lt;code&gt;Date&lt;/code&gt; object, a number (milliseconds since UTC epoch), or an ISO string (&lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;https://www.w3.org/TR/NOTE-datetime&lt;/a&gt;).</source>
          <target state="translated">日付式： &lt;code&gt;Date&lt;/code&gt; オブジェクト、数値（UTCエポックからのミリ秒）、またはISO文字列（&lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;https://www.w3.org/TR/NOTE-datetime&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6be1ff2545cf2f4032129392887400693da8322e" translate="yes" xml:space="preserve">
          <source>The date to format, as a Date, or a number (milliseconds since UTC epoch) or an &lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO date-time string&lt;/a&gt;.</source>
          <target state="translated">日付としてフォーマットする日付、または数値（UTCエポックからのミリ秒）または&lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO日時文字列&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a32c99fba05678acf40c6cb230f29e12bd614202" translate="yes" xml:space="preserve">
          <source>The date-time components to include. See &lt;code&gt;&lt;a href=&quot;datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">含める日時コンポーネント。詳細については、 &lt;code&gt;&lt;a href=&quot;datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4682d1b62b750807cc0fad3edaa1edf9e246371a" translate="yes" xml:space="preserve">
          <source>The date/time components to include, using predefined options or a custom format string.</source>
          <target state="translated">定義済みのオプシ ョ ンまたはカ ス タ ム形式の文字列を使っ て、 含めたい日時の コ ン ポーネ ン ト を指定 し ます。</target>
        </trans-unit>
        <trans-unit id="d9f490b1b139b96680fa4c11b44dad3844d370ec" translate="yes" xml:space="preserve">
          <source>The declaring NgModule.</source>
          <target state="translated">宣言しているNgModule。</target>
        </trans-unit>
        <trans-unit id="98c201f69b3b13f5cb6ff04cc4ea1ccaa2f85377" translate="yes" xml:space="preserve">
          <source>The decorator requirement is imposed by TypeScript. TypeScript normally discards parameter type information when it &lt;a href=&quot;glossary#transpile&quot;&gt;transpiles&lt;/a&gt; the code to JavaScript. TypeScript preserves this information if the class has a decorator and the &lt;code&gt;emitDecoratorMetadata&lt;/code&gt; compiler option is set &lt;code&gt;true&lt;/code&gt; in TypeScript's &lt;code&gt;tsconfig.json&lt;/code&gt; configuration file. The CLI configures &lt;code&gt;tsconfig.json&lt;/code&gt; with &lt;code&gt;emitDecoratorMetadata: true&lt;/code&gt;.</source>
          <target state="translated">TypeScriptによってデコレータ要件が課せられます。TypeScriptは通常、コードをJavaScriptに&lt;a href=&quot;glossary#transpile&quot;&gt;変換&lt;/a&gt;するときにパラメーターの型情報を破棄します。TypeScriptは、クラスにデコレータがあり、 &lt;code&gt;emitDecoratorMetadata&lt;/code&gt; コンパイラオプションがTypeScriptの &lt;code&gt;tsconfig.json&lt;/code&gt; 構成ファイルで &lt;code&gt;true&lt;/code&gt; に設定されている場合、この情報を保持します。CLIは、 &lt;code&gt;emitDecoratorMetadata: true&lt;/code&gt; 使用して &lt;code&gt;tsconfig.json&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="4251b78ae593ecab9f27a838a16244d1b57f7e3e" translate="yes" xml:space="preserve">
          <source>The deep details of structural directives are covered in the &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt; guide, which explains the following:</source>
          <target state="translated">構造ディレクティブの詳細については、&lt;a href=&quot;structural-directives&quot;&gt;構造ディレクティブ&lt;/a&gt;ガイドで説明されています。</target>
        </trans-unit>
        <trans-unit id="712324aee1adee04b50e7221977f131f39e9ab45" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on input elements. The accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">値を書き込み、入力要素の変更をリッスンするためのデフォルトの &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。アクセサーは、 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="f7b6c4995ba6a4dfd9eaabf3e2d50d81a0d5b1e8" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on input elements. The accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">値を書き込み、入力要素の変更をリッスンするためのデフォルトの &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。アクセサーは、 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="4e719651b95774d5d34ffe3d1bbd55b00706ab7b" translate="yes" xml:space="preserve">
          <source>The default Renderer implementation is &lt;code&gt;DomRenderer&lt;/code&gt;. Also available is &lt;code&gt;WebWorkerRenderer&lt;/code&gt;.</source>
          <target state="translated">デフォルトのレンダラー実装は &lt;code&gt;DomRenderer&lt;/code&gt; です。 &lt;code&gt;WebWorkerRenderer&lt;/code&gt; も利用できます。</target>
        </trans-unit>
        <trans-unit id="8144ff44256c0840ffad9f04ff6fa0e5521432e2" translate="yes" xml:space="preserve">
          <source>The default application created by the Angular CLI only has one component, &lt;code&gt;AppComponent&lt;/code&gt;, so it is in both the &lt;code&gt;declarations&lt;/code&gt; and the &lt;code&gt;bootstrap&lt;/code&gt; arrays.</source>
          <target state="translated">Angular CLIによって作成されたデフォルトのアプリケーションには、 &lt;code&gt;AppComponent&lt;/code&gt; という 1つのコンポーネントしかないため、 &lt;code&gt;declarations&lt;/code&gt; と &lt;code&gt;bootstrap&lt;/code&gt; 配列の両方にあります。</target>
        </trans-unit>
        <trans-unit id="faf5e63ed78ca0e97a9ecedb41e45ca7f39187d5" translate="yes" xml:space="preserve">
          <source>The default behavior of registering once the application stabilizes (i.e. as soon as there are no pending micro- and macro-tasks) is designed to register the ServiceWorker as soon as possible but without affecting the application's first time load.</source>
          <target state="translated">アプリケーションが安定したら登録するというデフォルトの動作(すなわち、保留中のマイクロタスクやマクロタスクがないとすぐに)は、できるだけ早くServiceWorkerを登録するように設計されていますが、アプリケーションの初回ロードには影響を与えません。</target>
        </trans-unit>
        <trans-unit id="672d2814be4490a28b926b37ab8405f75d9fe39e" translate="yes" xml:space="preserve">
          <source>The default behavior of registering once the application stabilizes (i.e. as soon as there are no pending micro- and macro-tasks), is designed register the ServiceWorker as soon as possible but without affecting the application's first time load.</source>
          <target state="translated">アプリケーションが安定したら(すなわち、保留中のマイクロタスクやマクロタスクがないとすぐに)登録するというデフォルトの動作は、できるだけ早くServiceWorkerを登録するように設計されていますが、アプリケーションの初回ロードには影響を与えません。</target>
        </trans-unit>
        <trans-unit id="cce4ed312ef59874b902e6e384a1d10149839da4" translate="yes" xml:space="preserve">
          <source>The default browser opens and displays the Getting Started sample application.</source>
          <target state="translated">デフォルトのブラウザが開き、Getting Started サンプルアプリケーションが表示されます。</target>
        </trans-unit>
        <trans-unit id="0f5ba8741324b5f3ed216ef4d87ba588c6257ad8" translate="yes" xml:space="preserve">
          <source>The default change-detection algorithm looks for differences by comparing bound-property values by reference across change detection runs. You can use this hook to check for and respond to changes by some other means.</source>
          <target state="translated">デフォルトの変更検出アルゴリズムは、変更検出の実行中にバウンドプロパティの値を参照して比較することで違いを探します。このフックを使用することで、他の方法で変更をチェックして対応することができます。</target>
        </trans-unit>
        <trans-unit id="3bdda24538401899e9cf064e6950ae0505e59468" translate="yes" xml:space="preserve">
          <source>The default currency code is currently always &lt;code&gt;USD&lt;/code&gt; but this is deprecated from v9.</source>
          <target state="translated">デフォルトの通貨コードは現在常に &lt;code&gt;USD&lt;/code&gt; ですが、これはv9から非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="082b0e1b657a0cc56834735f1afbffb10d4ce270" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;&lt;a href=&quot;errorhandler&quot;&gt;ErrorHandler&lt;/a&gt;&lt;/code&gt; prints error messages to the &lt;code&gt;console&lt;/code&gt;. To intercept error handling, write a custom exception handler that replaces this default as appropriate for your app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;errorhandler&quot;&gt;ErrorHandler&lt;/a&gt;&lt;/code&gt; のデフォルトの実装では、 &lt;code&gt;console&lt;/code&gt; エラーメッセージが出力されます。エラー処理をインターセプトするには、アプリに応じてこのデフォルトを置き換えるカスタム例外ハンドラーを記述します。</target>
        </trans-unit>
        <trans-unit id="db3547e124faaafb5a7338dfb8bf9084eed6ca08" translate="yes" xml:space="preserve">
          <source>The default in v11 is &lt;code&gt;corrected&lt;/code&gt;.</source>
          <target state="translated">v11のデフォルトが &lt;code&gt;corrected&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3da2e963162d2e85424f83d2c8181d34306ac18d" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;false&lt;/code&gt;. Testers who prefer fine control over test behavior tend to keep it &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。テストの振る舞いを細かく制御することを好むテスターは、それを &lt;code&gt;false&lt;/code&gt; たままにする傾向があります。</target>
        </trans-unit>
        <trans-unit id="5ebb2e2795a7b0b2584064979361ec77fdedf64e" translate="yes" xml:space="preserve">
          <source>The default is defined as the first currency which is still in use.</source>
          <target state="translated">デフォルトは、まだ使用されている最初の通貨として定義されています。</target>
        </trans-unit>
        <trans-unit id="f3ba8d89cb5ef08f208e48a85b605b4310bf02cf" translate="yes" xml:space="preserve">
          <source>The default linting tool is &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;, and the default configuration is specified in the project's &lt;code&gt;tslint.json&lt;/code&gt; file.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;リンティング&lt;/a&gt;ツールはTSLintで、デフォルトの構成はプロジェクトの &lt;code&gt;tslint.json&lt;/code&gt; ファイルで指定されています。</target>
        </trans-unit>
        <trans-unit id="fa5bb1f5c1cbe109211dd889cbb9c6ae3627b274" translate="yes" xml:space="preserve">
          <source>The default path-match strategy is 'prefix', which means that the router checks URL elements from the left to see if the URL matches a specified path. For example, '/team/11/user' matches 'team/:id'.</source>
          <target state="translated">デフォルトのパスマッチ戦略は「prefix」で、ルータはURLの要素を左からチェックして、URLが指定されたパスにマッチするかどうかを確認することを意味します。たとえば、'/team/11/user' は 'team/:id' にマッチします。</target>
        </trans-unit>
        <trans-unit id="a47bf320097df757ab7493c282071f6bfda35329" translate="yes" xml:space="preserve">
          <source>The default project is the value of &lt;code&gt;defaultProject&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">デフォルトのプロジェクトは、の値である &lt;code&gt;defaultProject&lt;/code&gt; で &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41162e3fcbf077344fe0553550fad85de67bc73a" translate="yes" xml:space="preserve">
          <source>The default route should redirect to the &lt;code&gt;HeroListComponent&lt;/code&gt; only when the entire url is &lt;code&gt;''&lt;/code&gt;. Remember to restore the redirect to &lt;code&gt;pathMatch = 'full'&lt;/code&gt;.</source>
          <target state="translated">デフォルトルートは、URL全体が &lt;code&gt;''&lt;/code&gt; の場合にのみ &lt;code&gt;HeroListComponent&lt;/code&gt; にリダイレクトする必要があります。 &lt;code&gt;pathMatch = 'full'&lt;/code&gt; へのリダイレクトを復元することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="35028a29988fb7b9cfea4b5e01d0bd632d1882bd" translate="yes" xml:space="preserve">
          <source>The default route should redirect to the &lt;code&gt;HeroListComponent&lt;/code&gt;&lt;em&gt;only&lt;/em&gt; when the &lt;em&gt;entire&lt;/em&gt; url is &lt;code&gt;''&lt;/code&gt;. Remember to restore the redirect to &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt;.</source>
          <target state="translated">デフォルトのルートは&lt;em&gt;、&lt;/em&gt; URL &lt;em&gt;全体&lt;/em&gt;が &lt;code&gt;''&lt;/code&gt; の場合に&lt;em&gt;のみ&lt;/em&gt;、 &lt;code&gt;HeroListComponent&lt;/code&gt; にリダイレクトする必要があります。 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; = ' &lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt; 'へのリダイレクトを忘れずに復元してください。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="40dc3536f16b1ce21d8af7dde493b0505694ab3d" translate="yes" xml:space="preserve">
          <source>The definition of a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element to match or create.</source>
          <target state="translated">一致または作成する &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 要素の定義。</target>
        </trans-unit>
        <trans-unit id="29c7e53a19049e62c9da95d6a0a14c4a3484e84c" translate="yes" xml:space="preserve">
          <source>The dependency injector provides services to a component, such as the router service that lets you define navigation among views.</source>
          <target state="translated">依存関係インジェクターは、ビュー間のナビゲーションを定義できるルーター・サービスなど、コンポーネントにサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="b7a62bbd3b9e12b19e45e6db0e78136526c99fd6" translate="yes" xml:space="preserve">
          <source>The dependency object (returned by the factory function) is typically a class instance, but can be other things as well. In this example, the dependency object is a string of the names of the runners up to the &quot;Hero of the Month&quot; contest.</source>
          <target state="translated">依存関係オブジェクト(ファクトリー関数によって返される)は、通常はクラスのインスタンスですが、他のものであっても構いません。この例では、依存関係オブジェクトは &quot;Hero of the Month&quot; コンテストの出場者の名前の文字列です。</target>
        </trans-unit>
        <trans-unit id="0c7316f7415af94bc3bb1c1645bdc8512fc3d426" translate="yes" xml:space="preserve">
          <source>The detail view is different. It displays a particular hero. It can't know which hero to show on its own. That information must come from outside.</source>
          <target state="translated">詳細表示が違います。特定のヒーローを表示します。どのヒーローを表示すべきかは、自分ではわかりません。その情報は外部から得なければなりません。</target>
        </trans-unit>
        <trans-unit id="4c817e48763ae86e1867cf929f8071103e83a6b1" translate="yes" xml:space="preserve">
          <source>The details are specific to each kind of element and therefore the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive only works for an element supported by a &lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt; that adapts an element to this protocol. Angular provides &lt;em&gt;value accessors&lt;/em&gt; for all of the basic HTML form elements and the &lt;a href=&quot;forms&quot;&gt;Forms&lt;/a&gt; guide shows how to bind to them.</source>
          <target state="translated">詳細は要素の種類ごとに固有であるため、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブは、このプロトコルに要素を適合させる&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;によってサポートされる要素に対してのみ機能します。Angularはすべての基本的なHTMLフォーム要素に&lt;em&gt;値アクセサー&lt;/em&gt;を提供し、&lt;a href=&quot;forms&quot;&gt;フォーム&lt;/a&gt;ガイドはそれらにバインドする方法を示します。</target>
        </trans-unit>
        <trans-unit id="a724916e40e1a922d989c92b3ecf082d7928f9a8" translate="yes" xml:space="preserve">
          <source>The details child route requires an &lt;code&gt;id&lt;/code&gt; route parameter.</source>
          <target state="translated">詳細な子ルートには、 &lt;code&gt;id&lt;/code&gt; ルートパラメータが必要です。</target>
        </trans-unit>
        <trans-unit id="f0ac9df13cb70c5c72364ce763f333d5013d07ec" translate="yes" xml:space="preserve">
          <source>The details of Angular router configuration are best left to the &lt;a href=&quot;router&quot;&gt;Routing documentation&lt;/a&gt; which recommends that you create a &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; dedicated to router configuration (called a &lt;em&gt;Routing Module&lt;/em&gt;).</source>
          <target state="translated">Angularルーター構成の詳細は、ルーター構成専用の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; （&lt;em&gt;Routing Module&lt;/em&gt;と呼ばれる）を作成することを推奨する&lt;a href=&quot;router&quot;&gt;ルーティングドキュメントに&lt;/a&gt;任せるのが最適です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8a9f2a38fc0d832b04fd3ce2fa72347e9013e429" translate="yes" xml:space="preserve">
          <source>The diagnostic is evidence that values really are flowing from the input box to the model and back again.</source>
          <target state="translated">診断は、値が入力ボックスからモデルに本当に流れていて、また戻ってきている証拠です。</target>
        </trans-unit>
        <trans-unit id="6cfa18b3ca324abf3063bbd00b532a641ab1a8b0" translate="yes" xml:space="preserve">
          <source>The diagnostic line that shows interpolated values demonstrates that values are really flowing from the input box to the model and back again.</source>
          <target state="translated">補間された値を示す診断ラインは、入力ボックスからモデルに値が本当に流れてきて、また戻ってくることを示しています。</target>
        </trans-unit>
        <trans-unit id="21adcbdc5aef6ef62df6c7fe98623baf3748c6ed" translate="yes" xml:space="preserve">
          <source>The diagnostic near the top of the form confirms that all of your changes are reflected in the model.</source>
          <target state="translated">フォームの上部近くの診断では、あなたの変更がすべてモデルに反映されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="e6efeb726810925d371a1fb1a6d0474051cdf771" translate="yes" xml:space="preserve">
          <source>The difference between hiding and removing doesn't matter for a simple paragraph. It does matter when the host element is attached to a resource intensive component. Such a component's behavior continues even when hidden. The component stays attached to its DOM element. It keeps listening to events. Angular keeps checking for changes that could affect data bindings. Whatever the component was doing, it keeps doing.</source>
          <target state="translated">hidingとremoveの違いは、単純な段落では重要ではありません。ホスト要素がリソース集約的なコンポーネントに接続されている場合には問題になります。そのようなコンポーネントの動作は、非表示になっても継続します。コンポーネントは DOM 要素に接続されたままです。コンポーネントはイベントを聞き続けます。Angularはデータバインディングに影響を与える可能性のある変更をチェックし続けます。コンポーネントが何をしていたとしても、それは継続します。</target>
        </trans-unit>
        <trans-unit id="05f9c87a5a6b790829816cc1f58f2d347fb1340f" translate="yes" xml:space="preserve">
          <source>The difference is a matter of trust. Angular treats a component's template as &lt;em&gt;belonging&lt;/em&gt; to the component. The component and its template trust each other implicitly. Therefore, the component's own template may bind to &lt;em&gt;any&lt;/em&gt; property of that component, with or without the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">違いは信頼の問題です。Angularはコンポーネントのテンプレートをコンポーネントに&lt;em&gt;属する&lt;/em&gt;ものとして扱います。コンポーネントとそのテンプレートは、暗黙的に相互に信頼します。したがって、コンポーネント自体のテンプレートは、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;入力&lt;/a&gt;デコレーターの有無にかかわらず、そのコンポーネントの&lt;em&gt;任意の&lt;/em&gt;プロパティにバインド&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="34d8a0c8d3141d61c5f06db8d5d7c912587d8341" translate="yes" xml:space="preserve">
          <source>The difference is demonstrated in the examples above using the &lt;strong&gt;favorite color&lt;/strong&gt; input element.</source>
          <target state="translated">上記の例では、&lt;strong&gt;お気に入りの色&lt;/strong&gt;入力要素を使用して違いを示しています。</target>
        </trans-unit>
        <trans-unit id="d0b68e8984c3be4843fe55f903fdbda57abf5093" translate="yes" xml:space="preserve">
          <source>The difference is demonstrated in the previous examples that use the favorite-color input element.</source>
          <target state="translated">この違いは、好ましい色の入力要素を使用した前の例で示されています。</target>
        </trans-unit>
        <trans-unit id="ea05ec71ce84c9eace3d13785908f6ad65b675c9" translate="yes" xml:space="preserve">
          <source>The differences between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; end here. The rest of the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; APIs and concepts work in the exact same way for both types of hybrid apps. See &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; to learn about:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; の違いはここまでです。残りの &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; APIと概念は、両方のタイプのハイブリッドアプリでまったく同じように機能します。以下については&lt;a href=&quot;upgrade&quot;&gt;、AngularJS&lt;/a&gt;からのアップグレードを参照してください。</target>
        </trans-unit>
        <trans-unit id="6588061d3d1691e6fff573c5dfe4f13036d79c9f" translate="yes" xml:space="preserve">
          <source>The differences from the WHATWG version include:</source>
          <target state="translated">WHATWG版との違いは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c0cd765a4fa83561fb7b303deb68bf2d797c31c7" translate="yes" xml:space="preserve">
          <source>The different parts of the above declaration are as follows:</source>
          <target state="translated">上記の宣言の異なる部分は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8b57de4f61f7ca0b603af7696485495da36c5ceb" translate="yes" xml:space="preserve">
          <source>The directive (&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;) that marks where the router displays a view.</source>
          <target state="translated">ルーターがビューを表示する場所をマークするディレクティブ（ &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e2a943aff4c59b087f2ebcb886a4b3d822ed396d" translate="yes" xml:space="preserve">
          <source>The directive &lt;em&gt;attribute name&lt;/em&gt; should be spelled in &lt;em&gt;lowerCamelCase&lt;/em&gt; and begin with a prefix. Don't use &lt;code&gt;ng&lt;/code&gt;. That prefix belongs to Angular. Pick something short that fits you or your company. In this example, the prefix is &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">ディレクティブの&lt;em&gt;属性名&lt;/em&gt;は&lt;em&gt;lowerCamelCase&lt;/em&gt;で綴り、&lt;em&gt;プレフィックス&lt;/em&gt;で始める必要があります。 &lt;code&gt;ng&lt;/code&gt; は使用しないでください。そのプレフィックスはAngularに属しています。あなたやあなたの会社に合った短いものを選んでください。この例では、プレフィックスは &lt;code&gt;app&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ba6a347d4773ad30b8df5e51d0a337cc8bc69a55" translate="yes" xml:space="preserve">
          <source>The directive &lt;em&gt;class&lt;/em&gt; name ends in &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; per the &lt;a href=&quot;styleguide#02-03&quot;&gt;style guide&lt;/a&gt;. Angular's own directives do not.</source>
          <target state="translated">ディレクティブ&lt;em&gt;クラス&lt;/em&gt;名は、&lt;a href=&quot;styleguide#02-03&quot;&gt;スタイルガイド&lt;/a&gt;ごとの &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 終わります。Angular自身のディレクティブはそうではありません。</target>
        </trans-unit>
        <trans-unit id="51842e95f5cffa45ec0bfdc97ee2a7c20674dbdc" translate="yes" xml:space="preserve">
          <source>The directive class then implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interface, so that it can easily integrate with Angular forms. Here is the rest of the directive to help you get an idea of how it all comes together.</source>
          <target state="translated">次に、ディレクティブクラスは &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; インターフェイスを実装するため、Angularフォームと簡単に統合できます。これが、すべてがどのように組み合わされるかを理解するのに役立つ残りのディレクティブです。</target>
        </trans-unit>
        <trans-unit id="478c2c1ea3888dc7a9fd6ef30943705c388014aa" translate="yes" xml:space="preserve">
          <source>The directive class then implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interface, so that it can easily integrate with Angular forms. Here is the rest of the directive to help you get an idea of how it all comes together:</source>
          <target state="translated">その後、ディレクティブクラスは &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; インターフェイスを実装するため、Angularフォームと簡単に統合できます。以下は、すべてがどのように組み合わされるかを理解するのに役立つ残りのディレクティブです。</target>
        </trans-unit>
        <trans-unit id="b6bcdd91bdc7b44148909c3bc1149dbbef3ee183" translate="yes" xml:space="preserve">
          <source>The directive configures the component template to define how the user navigates to the route or URL. When the user clicks a product name, the app displays the details for that product.</source>
          <target state="translated">このディレクティブは、ユーザがどのようにルートや URL に移動するかを定義するためにコンポーネントテンプレートを設定します。ユーザが商品名をクリックすると、アプリはその商品の詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="fef982e6c8f1c3d4a71424e22b9ee7addfb89bda" translate="yes" xml:space="preserve">
          <source>The directive consumer expects to bind a true/false condition to &lt;code&gt;[appUnless]&lt;/code&gt;. That means the directive needs an &lt;code&gt;appUnless&lt;/code&gt; property, decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ディレクティブコンシューマは、true / false条件を &lt;code&gt;[appUnless]&lt;/code&gt; にバインドすることを期待しています。ディレクティブが必要であることを意味し &lt;code&gt;appUnless&lt;/code&gt; の飾らプロパティを、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e4d5899afdcb557b6934f6b0ba2aaa7025a8c64" translate="yes" xml:space="preserve">
          <source>The directive creates an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; and exposes it as a property.</source>
          <target state="translated">ディレクティブは &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; を作成し、それをプロパティとして公開します。</target>
        </trans-unit>
        <trans-unit id="3fce666c3d79d1e2430245c510a12d4b3059abdd" translate="yes" xml:space="preserve">
          <source>The directive defines &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; hooks that log messages to the parent via an injected &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">このディレクティブは、挿入された &lt;code&gt;LoggerService&lt;/code&gt; を介して親にメッセージを記録する &lt;code&gt;ngOnInit()&lt;/code&gt; および &lt;code&gt;ngOnDestroy()&lt;/code&gt; フックを定義します。</target>
        </trans-unit>
        <trans-unit id="db669c56bde0e0533c1d29dfee5bfc6ec09764ad" translate="yes" xml:space="preserve">
          <source>The directive for adding/removing classes from an HTML element when an associated &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; contained on or inside the element becomes active/inactive.</source>
          <target state="translated">エレメント上またはエレメント内に含まれる関連する &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; がアクティブ/非アクティブになるときに、HTMLエレメントからクラスを追加/削除するためのディレクティブ。</target>
        </trans-unit>
        <trans-unit id="7b6fd6a150b5d66afb816ae7295a48ec4f8688d7" translate="yes" xml:space="preserve">
          <source>The directive for binding a clickable HTML element to a route. Clicking an element with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directive that is bound to a</source>
          <target state="translated">クリック可能なHTML要素をルートにバインドするためのディレクティブ。にバインドされている &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; ディレクティブを持つ要素をクリックすると</target>
        </trans-unit>
        <trans-unit id="720f2f8cb29907d240dec98a3b152961aea40b80" translate="yes" xml:space="preserve">
          <source>The directive instance.</source>
          <target state="translated">ディレクティブのインスタンス。</target>
        </trans-unit>
        <trans-unit id="f9fd79ce44d9191d35df57d19db01b5aa188436a" translate="yes" xml:space="preserve">
          <source>The directive sets the background to a highlight color when the user mouses over the DOM element to which the directive is applied.</source>
          <target state="translated">このディレクティブは、ユーザがそのディレクティブが適用されている DOM 要素の上にマウスを置いたときに、背景をハイライト色に設定します。</target>
        </trans-unit>
        <trans-unit id="3179195806726150a32be026d2382af65d93e04a" translate="yes" xml:space="preserve">
          <source>The directive then calls &lt;code&gt;EventEmitter.emit(data)&lt;/code&gt; to emit an event, passing in message data, which can be anything.</source>
          <target state="translated">次に、ディレクティブは &lt;code&gt;EventEmitter.emit(data)&lt;/code&gt; を呼び出してイベントを発行し、メッセージデータを渡します。これは何でもかまいません。</target>
        </trans-unit>
        <trans-unit id="3dadb675af202c36e02cf9e0644a0f6784933e09" translate="yes" xml:space="preserve">
          <source>The directive's &lt;em&gt;selector&lt;/em&gt; is typically the directive's &lt;strong&gt;attribute name&lt;/strong&gt; in square brackets, &lt;code&gt;[appUnless]&lt;/code&gt;. The brackets define a CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;attribute selector&lt;/a&gt;.</source>
          <target state="translated">ディレクティブの&lt;em&gt;セレクター&lt;/em&gt;は、通常、角括弧で囲まれたディレクティブの&lt;strong&gt;属性名&lt;/strong&gt; &lt;code&gt;[appUnless]&lt;/code&gt; です。大括弧はCSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;属性セレクターを&lt;/a&gt;定義します。</target>
        </trans-unit>
        <trans-unit id="a65366dfec5fde7acab8128614c62e56b18c5c2e" translate="yes" xml:space="preserve">
          <source>The directory name to create the workspace in.</source>
          <target state="translated">ワークスペースを作成するディレクトリ名。</target>
        </trans-unit>
        <trans-unit id="0c859cde8538cadb116c397acbbea91d60134e68" translate="yes" xml:space="preserve">
          <source>The disabled status to set on the element</source>
          <target state="translated">要素に設定する無効状態</target>
        </trans-unit>
        <trans-unit id="0dedb18c8e3657fdad61ad7a842be7e630e26797" translate="yes" xml:space="preserve">
          <source>The disabled value</source>
          <target state="translated">無効化された値</target>
        </trans-unit>
        <trans-unit id="f237bd4f809c19acaa65706b33e3dc5e3b8749b9" translate="yes" xml:space="preserve">
          <source>The display looks the same, but the code is clearer.</source>
          <target state="translated">表示は同じように見えますが、コードがスッキリしています。</target>
        </trans-unit>
        <trans-unit id="d8bcb8d5d64520feb45a9a032da8776b213521b0" translate="yes" xml:space="preserve">
          <source>The displayed value changes as you update the form control element.</source>
          <target state="translated">フォームコントロール要素を更新すると、表示される値が変わります。</target>
        </trans-unit>
        <trans-unit id="166a9002f622127466458a0d9c6c3c60c8874330" translate="yes" xml:space="preserve">
          <source>The distinction between an HTML attribute and a DOM property is key to understanding how Angular binding works. &lt;strong&gt;Attributes are defined by HTML. Properties are accessed from DOM (Document Object Model) nodes.&lt;/strong&gt;</source>
          <target state="translated">HTML属性とDOMプロパティの違いは、Angularバインディングの仕組みを理解する上で重要です。&lt;strong&gt;属性はHTMLによって定義されます。プロパティはDOM（Document Object Model）ノードからアクセスされます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5be893a71b5822406de32b6141daaf6fcfc26fc8" translate="yes" xml:space="preserve">
          <source>The doc generation process consumes the markdown files in the &lt;code&gt;content/guide&lt;/code&gt; directory and produces JSON files in the &lt;code&gt;src/generated/docs/guide&lt;/code&gt; directory, which is also flat. Those JSON files contain a combination of document metadata and HTML content.</source>
          <target state="translated">ドキュメント生成プロセスは、 &lt;code&gt;content/guide&lt;/code&gt; ディレクトリのマークダウンファイルを使用し、 &lt;code&gt;src/generated/docs/guide&lt;/code&gt; ディレクトリにJSONファイルを生成します。これもフラットです。これらのJSONファイルには、ドキュメントメタデータとHTMLコンテンツの組み合わせが含まれています。</target>
        </trans-unit>
        <trans-unit id="757ded666a68b6c3ac40103b86cb3424cfc48bbf" translate="yes" xml:space="preserve">
          <source>The doc generation process erases these comments before displaying them in the doc viewer. It also strips them from stackblitz and sample code downloads.</source>
          <target state="translated">doc生成処理では、これらのコメントを消去してからdocビューアに表示します。また、スタックブリッツやサンプルコードのダウンロードからも削除されます。</target>
        </trans-unit>
        <trans-unit id="4c43f4f32a923e773c7cd6d68f1699d4b637e4d5" translate="yes" xml:space="preserve">
          <source>The doc generator reads the image dimensions from the file and adds width and height attributes to the &lt;code&gt;img&lt;/code&gt; tag automatically. If you want to control the size of the image, supply your own width and height attributes.</source>
          <target state="translated">docジェネレーターはファイルから画像の寸法を読み取り、幅と高さの属性を &lt;code&gt;img&lt;/code&gt; タグに自動的に追加します。画像のサイズを制御する場合は、独自の幅と高さの属性を指定します。</target>
        </trans-unit>
        <trans-unit id="0db28a33c3d601d7a77b4ee9b1f07754d91499dd" translate="yes" xml:space="preserve">
          <source>The doc tooling reports an error if the file identified in the path does not exist &lt;strong&gt;or is &lt;em&gt;git&lt;/em&gt;-ignored&lt;/strong&gt;.</source>
          <target state="translated">パスで識別されたファイルが存在しない&lt;strong&gt;か、&lt;em&gt;git&lt;/em&gt;無視&lt;/strong&gt;されている場合、docツールはエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="a8ce0feb69612f68f0f5866a34dd0b783bcf3d1b" translate="yes" xml:space="preserve">
          <source>The documentation generally refers to &lt;em&gt;elements&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; instances), as distinct from &lt;em&gt;DOM elements&lt;/em&gt; (which can be accessed directly if necessary).</source>
          <target state="translated">ドキュメントは、&lt;em&gt;DOM要素&lt;/em&gt;（必要に応じて直接アクセスできる）とは異なり、一般的に&lt;em&gt;要素&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; インスタンス）を参照します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6950b5369e17c747d6d6f1e74badedf7eff1e093" translate="yes" xml:space="preserve">
          <source>The double curly braces are Angular's &lt;em&gt;interpolation binding&lt;/em&gt; syntax. This interpolation binding presents the component's &lt;code&gt;title&lt;/code&gt; property value inside the HTML header tag.</source>
          <target state="translated">二重中括弧は、Angularの&lt;em&gt;補間バインディング&lt;/em&gt;構文です。この補間バインディングは、コンポーネントの &lt;code&gt;title&lt;/code&gt; プロパティ値をHTMLヘッダータグ内に表示します。</target>
        </trans-unit>
        <trans-unit id="60368b0fb0530b310d1b03d0c629cde2a42557de" translate="yes" xml:space="preserve">
          <source>The drop down works properly.</source>
          <target state="translated">ドロップダウンは正常に動作します。</target>
        </trans-unit>
        <trans-unit id="f7df533c465dacb0b3380c1fdf650cf2849bea23" translate="yes" xml:space="preserve">
          <source>The dynamic form itself will be represented by a container component, which you will add in a later step. Each question is represented in the form component's template by an &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; tag, which matches an instance of &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt;.</source>
          <target state="translated">動的フォーム自体は、後のステップで追加するコンテナコンポーネントによって表されます。各質問は、フォームコンポーネントのテンプレートで &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; タグによって表されます。これは、 &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; のインスタンスと一致します。</target>
        </trans-unit>
        <trans-unit id="d7022688694dc65a2c8f3c08da2b0a9b3ae17aba" translate="yes" xml:space="preserve">
          <source>The eagerly loaded scenario</source>
          <target state="translated">熱心に読み込んだシナリオ</target>
        </trans-unit>
        <trans-unit id="ea57f8da3c0e12c71f28c904fd0f0841386ae246" translate="yes" xml:space="preserve">
          <source>The easiest way to create a component is with the Angular CLI. You can also create a component manually.</source>
          <target state="translated">コンポーネントを作成する最も簡単な方法はAngular CLIです。手動でコンポーネントを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="c12f2ea045d53bad086859121475d2ad2a833c0a" translate="yes" xml:space="preserve">
          <source>The easiest way to display a component property is to bind the property name through interpolation. With interpolation, you put the property name in the view template, enclosed in double curly braces: &lt;code&gt;{{myHero}}&lt;/code&gt;.</source>
          <target state="translated">コンポーネントプロパティを表示する最も簡単な方法は、補間によってプロパティ名をバインドすることです。補間を使用して、プロパティ名をビューテンプレートに配置し、中括弧 &lt;code&gt;{{myHero}}&lt;/code&gt; で囲みます。</target>
        </trans-unit>
        <trans-unit id="2d1ec4c9b3516ed0310d2e6eabdaf99dbd349d4a" translate="yes" xml:space="preserve">
          <source>The easing value controls how the animation accelerates and decelerates during its runtime. Value is one of &lt;code&gt;ease&lt;/code&gt;, &lt;code&gt;ease-in&lt;/code&gt;, &lt;code&gt;ease-out&lt;/code&gt;, &lt;code&gt;ease-in-out&lt;/code&gt;, or a &lt;code&gt;cubic-bezier()&lt;/code&gt; function call. If not supplied, no easing is applied.</source>
          <target state="translated">イージング値は、アニメーションが実行時に加速および減速する方法を制御します。値は &lt;code&gt;ease&lt;/code&gt; 、 &lt;code&gt;ease-in&lt;/code&gt; 、 &lt;code&gt;ease-out&lt;/code&gt; 、 &lt;code&gt;ease-in-out&lt;/code&gt; 、または &lt;code&gt;cubic-bezier()&lt;/code&gt; 関数呼び出しのいずれかです。指定しない場合、イージングは​​適用されません。</target>
        </trans-unit>
        <trans-unit id="673d673b2746886a3adde806bd89c20b0680bdef" translate="yes" xml:space="preserve">
          <source>The element tag name, if it is an element.</source>
          <target state="translated">要素であれば、要素タグ名。</target>
        </trans-unit>
        <trans-unit id="d27c746aa80a187e9f22b16f7b95f9f1bed7667f" translate="yes" xml:space="preserve">
          <source>The element that will recognize gestures.</source>
          <target state="translated">ジェスチャーを認識する要素。</target>
        </trans-unit>
        <trans-unit id="e0442f5cd8f77d16465566da511146ed7ff5097c" translate="yes" xml:space="preserve">
          <source>The element to query, or a set of elements that contain Angular-specific characteristics, specified with one or more of the following tokens.</source>
          <target state="translated">クエリする要素、またはAngular固有の特性を含む要素のセットで、以下のトークンのうちの1つ以上を指定します。</target>
        </trans-unit>
        <trans-unit id="84276241b9685b6ea2701e6001dbf22cb649f9c1" translate="yes" xml:space="preserve">
          <source>The element to render.</source>
          <target state="translated">レンダリングする要素。</target>
        </trans-unit>
        <trans-unit id="9131974bc73e41cfa82641177ab47b4bbe64ec2b" translate="yes" xml:space="preserve">
          <source>The element to which the animation is attached.</source>
          <target state="translated">アニメーションが添付されている要素。</target>
        </trans-unit>
        <trans-unit id="46178d56386d4cf368fc2af3376e280cef598d8e" translate="yes" xml:space="preserve">
          <source>The element to which you apply a directive is its &lt;em&gt;host&lt;/em&gt; element. The &lt;code&gt;&amp;lt;happy-hero&amp;gt;&lt;/code&gt; is the host element for the happy &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;unknown-hero&amp;gt;&lt;/code&gt; is the host element for the &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブを適用する要素は、その&lt;em&gt;ホスト&lt;/em&gt;要素です。 &lt;code&gt;&amp;lt;happy-hero&amp;gt;&lt;/code&gt; 幸せのためにホスト要素である &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;unknown-hero&amp;gt;&lt;/code&gt; のホスト要素である &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21955f7341d9631161057f2409976b172f526079" translate="yes" xml:space="preserve">
          <source>The element's own component instance, if it has one.</source>
          <target state="translated">要素自身のコンポーネントのインスタンス。</target>
        </trans-unit>
        <trans-unit id="3bf4b7ea68f964a8343706cfd8e0de47b6ae2323" translate="yes" xml:space="preserve">
          <source>The element.</source>
          <target state="translated">要素です。</target>
        </trans-unit>
        <trans-unit id="4ad5959dbe7800ed816d9f5708f3fc045876a16c" translate="yes" xml:space="preserve">
          <source>The empty path in the fourth route represents the default path for the application&amp;mdash;the place to go when the path in the URL is empty, as it typically is at the start. This default route redirects to the route for the &lt;code&gt;/heroes&lt;/code&gt; URL and, therefore, displays the &lt;code&gt;HeroesListComponent&lt;/code&gt;.</source>
          <target state="translated">4番目のルートの空のパスは、アプリケーションのデフォルトパスを表します。これは、通常は先頭にあるため、URLのパスが空の場合に移動する場所です。このデフォルトルートは &lt;code&gt;/heroes&lt;/code&gt; URLのルートにリダイレクトされるため、 &lt;code&gt;HeroesListComponent&lt;/code&gt; が表示されます。</target>
        </trans-unit>
        <trans-unit id="f953b82a33a57fd342ecf714841bf89e003c89ed" translate="yes" xml:space="preserve">
          <source>The encoded key name.</source>
          <target state="translated">エンコードされたキー名。</target>
        </trans-unit>
        <trans-unit id="77a9b35bf33aad2c1e20f1db858b00aff0e15a54" translate="yes" xml:space="preserve">
          <source>The encoded value.</source>
          <target state="translated">符号化された値。</target>
        </trans-unit>
        <trans-unit id="b4d1c435b55c4bd54f0e5938665f180e3308a59f" translate="yes" xml:space="preserve">
          <source>The ending location just happens to be the same as the component itself, because it is the topmost component in this application.</source>
          <target state="translated">このアプリケーションでは最上位のコンポーネントなので、終了位置はたまたまコンポーネント自体と同じになります。</target>
        </trans-unit>
        <trans-unit id="53f8087657d38ede7c7b2e78926607c4e103415b" translate="yes" xml:space="preserve">
          <source>The endpoint URL.</source>
          <target state="translated">エンドポイントのURL。</target>
        </trans-unit>
        <trans-unit id="ce758382f5b525c72c93874bf2a5511cf0624108" translate="yes" xml:space="preserve">
          <source>The entire &lt;a href=&quot;http://v7.angular.io/api/http&quot;&gt;&lt;code&gt;@angular/http&lt;/code&gt;&lt;/a&gt; package has been removed. Use &lt;a href=&quot;../api/common/http&quot;&gt;&lt;code&gt;@angular/common/http&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;http://v7.angular.io/api/http&quot;&gt; &lt;code&gt;@angular/http&lt;/code&gt; &lt;/a&gt;パッケージ全体が削除されました。代わりに&lt;a href=&quot;../api/common/http&quot;&gt; &lt;code&gt;@angular/common/http&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="09267d94484132cc08f19cf699a998d66e34af3d" translate="yes" xml:space="preserve">
          <source>The entire cart component is shown below:</source>
          <target state="translated">カートコンポーネント全体を以下に示します。</target>
        </trans-unit>
        <trans-unit id="517d85bc6d5992973ef1adac25e14215d5732b6c" translate="yes" xml:space="preserve">
          <source>The entire template translation is complete. The next section describes how to load that translation into the app.</source>
          <target state="translated">テンプレート全体の翻訳が完了しました。次のセクションでは、その翻訳をアプリに読み込む方法を説明します。</target>
        </trans-unit>
        <trans-unit id="65be920f45735066f65d3093424f23271e09fd22" translate="yes" xml:space="preserve">
          <source>The error location is the beginning of the text node that contains the interpolation expression with the error. If the error is in an attribute binding such as &lt;code&gt;[value]=&quot;person.address.street&quot;&lt;/code&gt;, the error location is the location of the attribute that contains the error.</source>
          <target state="translated">エラーの場所は、エラーのある補間式を含むテキストノードの先頭です。エラーが &lt;code&gt;[value]=&quot;person.address.street&quot;&lt;/code&gt; などの属性バインディングにある場合、エラーの場所はエラーを含む属性の場所です。</target>
        </trans-unit>
        <trans-unit id="5b2800e5c7af1b4412b364a4614c015c995767e2" translate="yes" xml:space="preserve">
          <source>The event binding listens for the button's click events and calls the component's &lt;code&gt;onSave()&lt;/code&gt; method whenever a click occurs.</source>
          <target state="translated">イベントバインディングは、ボタンのクリックイベントをリッスンし、クリックが発生するたびにコンポーネントの &lt;code&gt;onSave()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="69ff142aa61a33181c0a1759ca603b78c8f65052" translate="yes" xml:space="preserve">
          <source>The event binding to the textbox's &lt;code&gt;input&lt;/code&gt; event calls the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">テキストボックスの &lt;code&gt;input&lt;/code&gt; イベントにバインドするイベントは、 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6ed6e9ce266d18a90fadd7e10b03d03c8dbd92d9" translate="yes" xml:space="preserve">
          <source>The event binding to the textbox's &lt;code&gt;input&lt;/code&gt; event calls the &lt;code&gt;search()&lt;/code&gt; method.</source>
          <target state="translated">テキストボックスの &lt;code&gt;input&lt;/code&gt; イベントにバインドされているイベントは、 &lt;code&gt;search()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6b1b6fe126f9ca22b76040da84e54d75ff818550" translate="yes" xml:space="preserve">
          <source>The event binding, &lt;code&gt;(newItemEvent)='addItem($event)'&lt;/code&gt;, connects the event in the child, &lt;code&gt;newItemEvent&lt;/code&gt;, to the method in the parent, &lt;code&gt;addItem()&lt;/code&gt;.</source>
          <target state="translated">イベントバインディング &lt;code&gt;(newItemEvent)='addItem($event)'&lt;/code&gt; は、子のイベント &lt;code&gt;newItemEvent&lt;/code&gt; を親の &lt;code&gt;addItem()&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3639fbd6435142847d3144a74c6667bfa653654c" translate="yes" xml:space="preserve">
          <source>The event binding, &lt;code&gt;(newItemEvent)='addItem($event)'&lt;/code&gt;, tells Angular to connect the event in the child, &lt;code&gt;newItemEvent&lt;/code&gt;, to the method in the parent, &lt;code&gt;addItem()&lt;/code&gt;, and that the event that the child is notifying the parent about is to be the argument of &lt;code&gt;addItem()&lt;/code&gt;. In other words, this is where the actual hand off of data takes place. The &lt;code&gt;$event&lt;/code&gt; contains the data that the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; in the child template UI.</source>
          <target state="translated">イベントバインディング &lt;code&gt;(newItemEvent)='addItem($event)'&lt;/code&gt; 、Angularに子のイベント &lt;code&gt;newItemEvent&lt;/code&gt; を親の &lt;code&gt;addItem()&lt;/code&gt; に接続し、子が親に通知しているイベントであることを通知しますaboutは &lt;code&gt;addItem()&lt;/code&gt; の引数になります。つまり、これが実際のデータの受け渡しが行われる場所です。 &lt;code&gt;$event&lt;/code&gt; データが含まれていることへのユーザーの種類 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 子テンプレートUIインチ</target>
        </trans-unit>
        <trans-unit id="ad8b492b040130403394a8b8405002e8fbe05184" translate="yes" xml:space="preserve">
          <source>The event name for control to update upon.</source>
          <target state="translated">更新時に更新するコントロールのイベント名。</target>
        </trans-unit>
        <trans-unit id="f4f20723f533d5e629777325cd0a3634e4a127e2" translate="yes" xml:space="preserve">
          <source>The event to listen for.</source>
          <target state="translated">聞くべきイベント。</target>
        </trans-unit>
        <trans-unit id="91ef2a7a591ac9092eaa2b69ce5e271726e45b75" translate="yes" xml:space="preserve">
          <source>The events occur in the following sequence:</source>
          <target state="translated">イベントは以下のような順序で発生します。</target>
        </trans-unit>
        <trans-unit id="54c1184dacbaa43055ccffb47a5d3e22a00bb1c7" translate="yes" xml:space="preserve">
          <source>The exact values of these attributes aren't important. They are automatically generated and you never refer to them in application code. But they are targeted by the generated component styles, which are in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of the DOM:</source>
          <target state="translated">これらの属性の正確な値は重要ではありません。これらは自動的に生成され、アプリケーションコードで参照することはありません。ただし、これらはDOMの &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; セクションにある生成されたコンポーネントスタイルのターゲットになります。</target>
        </trans-unit>
        <trans-unit id="4b7a62544532a45cb6e60791b758a5ec3dddf356" translate="yes" xml:space="preserve">
          <source>The example above casts the &lt;code&gt;$event&lt;/code&gt; as an &lt;code&gt;any&lt;/code&gt; type. That simplifies the code at a cost. There is no type information that could reveal properties of the event object and prevent silly mistakes.</source>
          <target state="translated">上記の例では、 &lt;code&gt;$event&lt;/code&gt; を &lt;code&gt;any&lt;/code&gt; タイプとしてキャストしています。これはコストをかけてコードを単純化します。イベントオブジェクトのプロパティを明らかにし、愚かな間違いを防ぐことができるタイプ情報はありません。</target>
        </trans-unit>
        <trans-unit id="273eb5d9b6efb1eb7fc204e5b2fd8c9a9f9a424d" translate="yes" xml:space="preserve">
          <source>The example above shows the preferred way to provide a service in a module. This method is preferred because it enables tree-shaking of the service if nothing injects it. If it's not possible to specify in the service which module should provide it, you can also declare a provider for the service within the module:</source>
          <target state="translated">上の例では、モジュール内でサービスを提供するための好ましい方法を示しています。この方法が好ましいのは、何も注入しなければサービスのツリーシェイクが可能になるからです。どのモジュールがサービスを提供すべきかをサービス内で指定できない場合は、モジュール内でサービスのプロバイダを宣言することもできます。</target>
        </trans-unit>
        <trans-unit id="b2e27e8c2c92276e05378262ff057e11c8b22f08" translate="yes" xml:space="preserve">
          <source>The example added a &lt;code&gt;name&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element and set it to &quot;name&quot;, which makes sense for the hero's name. Any unique value will do, but using a descriptive name is helpful.</source>
          <target state="translated">この例では、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素に &lt;code&gt;name&lt;/code&gt; 属性を追加し、それを「name」に設定しました。これは、ヒーローの名前にとって意味があります。一意の値であれば何でもかまいませんが、わかりやすい名前を使用すると便利です。</target>
        </trans-unit>
        <trans-unit id="effbc7d2c80d5854e16babc4c844f954f764345c" translate="yes" xml:space="preserve">
          <source>The example app features a second service, the &lt;code&gt;AnimalService&lt;/code&gt; to demonstrate &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サンプルアプリには、2番目のサービスである &lt;code&gt;AnimalService&lt;/code&gt; があり、viewProvidersを示してい &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c78f64c7b89201f40e03d1b69154355e19de092e" translate="yes" xml:space="preserve">
          <source>The example app features a second service, the &lt;code&gt;AnimalService&lt;/code&gt; to demonstrate &lt;code&gt;viewProviders&lt;/code&gt;.</source>
          <target state="translated">サンプルアプリは、 &lt;code&gt;AnimalService&lt;/code&gt; を示す2番目のサービスであるAnimalServiceを &lt;code&gt;viewProviders&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="1d59f9bd8904b6d345e194680af23a795fc7a0b5" translate="yes" xml:space="preserve">
          <source>The example app has a &lt;code&gt;FlowerService&lt;/code&gt; provided in &lt;code&gt;root&lt;/code&gt; with an &lt;code&gt;emoji&lt;/code&gt; value of &lt;code&gt;🌺&lt;/code&gt; (red hibiscus).</source>
          <target state="translated">サンプルアプリの &lt;code&gt;root&lt;/code&gt; は、 &lt;code&gt;🌺&lt;/code&gt; （赤いハイビスカス）の &lt;code&gt;emoji&lt;/code&gt; 値を持つ &lt;code&gt;FlowerService&lt;/code&gt; が用意されています。</target>
        </trans-unit>
        <trans-unit id="7e293a7ac30ffcbf40d0aa732b70cb22ea0ae688" translate="yes" xml:space="preserve">
          <source>The example below shows how to use a &lt;code&gt;plural&lt;/code&gt; ICU expression to display one of those three options based on when the update occurred:</source>
          <target state="translated">以下の例は、 &lt;code&gt;plural&lt;/code&gt; ICU式を使用して、更新の発生時に基づいてこれら3つのオプションの1つを表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="32f43e0dcae0b20b112d1f2cf6afab0db54ce258" translate="yes" xml:space="preserve">
          <source>The example catches errors as &lt;a href=&quot;http#error-details&quot;&gt;described above&lt;/a&gt;.</source>
          <target state="translated">この例で&lt;a href=&quot;http#error-details&quot;&gt;は、上記の&lt;/a&gt;エラーをキャッチします。</target>
        </trans-unit>
        <trans-unit id="fd77271eb13f69fabbed387e0cde0a99c8b25dd3" translate="yes" xml:space="preserve">
          <source>The example component, &lt;code&gt;OnChangesComponent&lt;/code&gt;, has two input properties: &lt;code&gt;hero&lt;/code&gt; and &lt;code&gt;power&lt;/code&gt;.</source>
          <target state="translated">サンプルコンポーネントの &lt;code&gt;OnChangesComponent&lt;/code&gt; には、 &lt;code&gt;hero&lt;/code&gt; と &lt;code&gt;power&lt;/code&gt; の 2つの入力プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="f9155530069679df1e8e17804347a08779c0b88f" translate="yes" xml:space="preserve">
          <source>The example conforms to the best practices for creating scalable solutions by defining a re-usable &lt;a href=&quot;glossary#service&quot;&gt;injectable service&lt;/a&gt; to perform the data-handling functionality. In addition to fetching data, the service can post-process the data, add error handling, and add retry logic.</source>
          <target state="translated">この例は、データ処理機能を実行するための再利用可能な&lt;a href=&quot;glossary#service&quot;&gt;注入&lt;/a&gt;可能なサービスを定義することにより、スケーラブルなソリューションを作成するためのベストプラクティスに準拠しています。このサービスは、データのフェッチに加えて、データの後処理、エラー処理の追加、および再試行ロジックの追加を行うことができます。</target>
        </trans-unit>
        <trans-unit id="f5ae9273f0a2796a26e3fdc2b5495b83160ccdd7" translate="yes" xml:space="preserve">
          <source>The example defines a &lt;code&gt;Parent&lt;/code&gt; class interface.</source>
          <target state="translated">この例では、 &lt;code&gt;Parent&lt;/code&gt; クラスインターフェイスを定義しています。</target>
        </trans-unit>
        <trans-unit id="78dfaeee725082d98ba4c1ba36ee3d43f4320105" translate="yes" xml:space="preserve">
          <source>The example does not perform any initialization or clean-up. It just tracks the appearance and disappearance of an element in the view by recording when the directive itself is instantiated and destroyed.</source>
          <target state="translated">この例は初期化やクリーンアップを行いません。ディレクティブ自体がインスタンス化されて破棄されたときに記録することで、 ビュー内の要素の出現と消失を追跡するだけです。</target>
        </trans-unit>
        <trans-unit id="b1a19339f0623e57becdf428e24d9054631f017e" translate="yes" xml:space="preserve">
          <source>The example in this cookbook is a dynamic form to build an online application experience for heroes seeking employment. The agency is constantly tinkering with the application process. You can create the forms on the fly &lt;em&gt;without changing the application code&lt;/em&gt;.</source>
          <target state="translated">このクックブックの例は、雇用を求めるヒーローのためのオンラインアプリケーションエクスペリエンスを構築するための動的なフォームです。代理店は常に申請プロセスをいじっています。&lt;em&gt;アプリケーションコードを変更せず&lt;/em&gt;に、その場でフォームを作成できます。</target>
        </trans-unit>
        <trans-unit id="21368d5aa0e0f57cc1e8629018f6a96fc88d7046" translate="yes" xml:space="preserve">
          <source>The example provides a model for a job application for heroes, but there are no references to any specific hero question other than the objects returned by &lt;code&gt;QuestionService&lt;/code&gt;. This separation of model and data allows you to repurpose the components for any type of survey as long as it's compatible with the &lt;em&gt;question&lt;/em&gt; object model.</source>
          <target state="translated">この例は、ヒーローの求人応募のモデルを提供しますが、 &lt;code&gt;QuestionService&lt;/code&gt; によって返されるオブジェクト以外の特定のヒーローの質問への参照はありません。このモデルとデータの分離により、&lt;em&gt;質問&lt;/em&gt;オブジェクトモデルと互換性がある限り、あらゆるタイプの調査のためにコンポーネントを再利用できます。</target>
        </trans-unit>
        <trans-unit id="fda3065caba1d5eb2c8f5fe0c2d8e9d5653e9812" translate="yes" xml:space="preserve">
          <source>The examples use cross-validation to ensure that heroes do not reveal their true identities by filling out the Hero Form. The validators do this by checking that the hero names and alter egos do not match.</source>
          <target state="translated">この例では、ヒーローがヒーローフォームに記入することで、ヒーローの正体が明らかにならないようにクロスバリデーションを使用しています。バリデータは、ヒーローの名前と分身が一致していないことを確認します。</target>
        </trans-unit>
        <trans-unit id="6bc3566154c29af35184ae0bd0cc18f2f2008688" translate="yes" xml:space="preserve">
          <source>The existing &lt;code&gt;AuthGuard&lt;/code&gt; already has the essential logic in its &lt;code&gt;checkLogin()&lt;/code&gt; method to support the &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard.</source>
          <target state="translated">既存の &lt;code&gt;AuthGuard&lt;/code&gt; には、 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; ガードをサポートするための &lt;code&gt;checkLogin()&lt;/code&gt; メソッドに不可欠なロジックがすでに含まれています。</target>
        </trans-unit>
        <trans-unit id="718c865b634d55ae8dfe4de1b660b49d34f475af" translate="yes" xml:space="preserve">
          <source>The existing AngularJS code works as before &lt;em&gt;and&lt;/em&gt; you are ready to start adding Angular code.</source>
          <target state="translated">既存のAngularJSコードは以前&lt;em&gt;と&lt;/em&gt;同じように機能し、Angularコードを追加する準備が整います。</target>
        </trans-unit>
        <trans-unit id="ab13d61d6ddb887413912e2f62c6e3e7fc4aac41" translate="yes" xml:space="preserve">
          <source>The existing child node before which &lt;code&gt;newChild&lt;/code&gt; is inserted.</source>
          <target state="translated">&lt;code&gt;newChild&lt;/code&gt; が挿入される前の既存の子ノード。</target>
        </trans-unit>
        <trans-unit id="f5fd876d33ea042d6b4add9cc8574eee41bd22c4" translate="yes" xml:space="preserve">
          <source>The existing child node that should precede the new node.</source>
          <target state="translated">新しいノードの前に置かれるべき既存の子ノード。</target>
        </trans-unit>
        <trans-unit id="d872770ece0f419b22a9305fbf0ce1956dbee659" translate="yes" xml:space="preserve">
          <source>The expanded provider configuration is an object literal with two properties.</source>
          <target state="translated">拡張プロバイダ設定は、2 つのプロパティを持つオブジェクトリテラルです。</target>
        </trans-unit>
        <trans-unit id="0a901e7e7f6e2f5a9cf69a27df265c2237d91887" translate="yes" xml:space="preserve">
          <source>The expected response type of the server.</source>
          <target state="translated">サーバーの予想されるレスポンスタイプ。</target>
        </trans-unit>
        <trans-unit id="756b02a42955f8fd84e0875c967bff67e4bc2260" translate="yes" xml:space="preserve">
          <source>The experience might be better if all of this were handled first, before the route is activated. A &lt;code&gt;CrisisDetailResolver&lt;/code&gt; service could retrieve a &lt;code&gt;Crisis&lt;/code&gt; or navigate away if the &lt;code&gt;Crisis&lt;/code&gt; does not exist &lt;em&gt;before&lt;/em&gt; activating the route and creating the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;.</source>
          <target state="translated">ルートがアクティブになる前に、これらすべてを最初に処理した方がエクスペリエンスは向上する可能性があります。 &lt;code&gt;CrisisDetailResolver&lt;/code&gt; のサービスが取得でき &lt;code&gt;Crisis&lt;/code&gt; かあれば離れて移動する &lt;code&gt;Crisis&lt;/code&gt; 存在しない&lt;em&gt;の前に&lt;/em&gt;ルートを活性化し、作成 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="231b4a30ec02743f59b6dc1ae1cd48da208d12aa" translate="yes" xml:space="preserve">
          <source>The experience might be better if all of this were handled first, before the route is activated. A &lt;code&gt;CrisisDetailResolver&lt;/code&gt; service could retrieve a &lt;code&gt;Crisis&lt;/code&gt; or navigate away, if the &lt;code&gt;Crisis&lt;/code&gt; did not exist, &lt;em&gt;before&lt;/em&gt; activating the route and creating the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;.</source>
          <target state="translated">ルートがアクティブ化される前に、これらすべてが最初に処理された方が、エクスペリエンスが向上する可能性があります。 &lt;code&gt;CrisisDetailResolver&lt;/code&gt; のサービスが取得でき &lt;code&gt;Crisis&lt;/code&gt; 場合、または離れて移動する &lt;code&gt;Crisis&lt;/code&gt; 、存在しなかった&lt;em&gt;前&lt;/em&gt;の経路を活性化し、作成 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="d0105ecd0834a0a52efb835dd0c06c79018cfc2a" translate="yes" xml:space="preserve">
          <source>The expression can invoke methods of the host component such as &lt;code&gt;getVal()&lt;/code&gt; in the following example:</source>
          <target state="translated">式は、次の例の &lt;code&gt;getVal()&lt;/code&gt; などのホストコンポーネントのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="bc38af0a3f6b603a4f52ccb0dc5abcee023d78a0" translate="yes" xml:space="preserve">
          <source>The expression string can contain multiple comma-separated statements; for example &quot;state1 =&amp;gt; state2, state3 =&amp;gt; state4&quot;.</source>
          <target state="translated">式の文字列には、複数のコンマ区切りのステートメントを含めることができます。たとえば、「state1 =&amp;gt; state2、state3 =&amp;gt; state4」です。</target>
        </trans-unit>
        <trans-unit id="a13861ade07df9e378c5d3fa8b540dff690597ea" translate="yes" xml:space="preserve">
          <source>The expression used in an &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive is used to narrow type unions in the Angular template compiler, the same way the &lt;code&gt;if&lt;/code&gt; expression does in TypeScript. For example, to avoid &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error in the template above, modify it to only emit the interpolation if the value of &lt;code&gt;person&lt;/code&gt; is initialized as shown below:</source>
          <target state="translated">で使用される式 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のディレクティブは、角度テンプレートコンパイラの狭いタイプ組合、同じように使用されている &lt;code&gt;if&lt;/code&gt; 式が活字体でありません。たとえば、上記のテンプレートで &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error を回避するには、次のように &lt;code&gt;person&lt;/code&gt; の値が初期化されている場合にのみ補間を生成するように修正します。</target>
        </trans-unit>
        <trans-unit id="ef8c01f4c0d7e68b89c220ac9f8c5253404cce00" translate="yes" xml:space="preserve">
          <source>The external typings for AngularJS may be uninstalled as well. The only ones you still need are for Jasmine and Angular polyfills. The &lt;code&gt;@angular/upgrade&lt;/code&gt; package and its mapping in &lt;code&gt;systemjs.config.js&lt;/code&gt; can also go.</source>
          <target state="translated">AngularJSの外部型付けもアンインストールされる場合があります。まだ必要なのは、ジャスミンと角度ポリフィルのみです。 &lt;code&gt;@angular/upgrade&lt;/code&gt; パッケージとでそのマッピング &lt;code&gt;systemjs.config.js&lt;/code&gt; はまた行くことができます。</target>
        </trans-unit>
        <trans-unit id="f9487dc824b5a06931326438975b3fa897554272" translate="yes" xml:space="preserve">
          <source>The extraction tool broke that into two translation units because ICU expressions are extracted separately.</source>
          <target state="translated">抽出ツールは、ICUの表現を別々に抽出するため、それを2つの翻訳単位に分割しています。</target>
        </trans-unit>
        <trans-unit id="9417ff966974590689ce184e11dd80a18dd2fcc6" translate="yes" xml:space="preserve">
          <source>The extraction tool uses the locale to add the app locale information into your translation source file. This information is not used by Angular, but external translation tools may need it.</source>
          <target state="translated">抽出ツールはロケールを使用して、アプリのロケール情報を翻訳ソースファイルに追加します。この情報はAngularでは使用されませんが、外部の翻訳ツールでは必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="85f84c0e0492c512641e357031e4b8a990681047" translate="yes" xml:space="preserve">
          <source>The factory function used to create an instance of the &lt;code&gt;&lt;a href=&quot;%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; in Angular, and provides an API-compatiable &lt;code&gt;$locationProvider&lt;/code&gt; for AngularJS.</source>
          <target state="translated">Angularで &lt;code&gt;&lt;a href=&quot;%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; インスタンスを作成するために使用されるファクトリ関数で、AngularJSにAPI互換の &lt;code&gt;$locationProvider&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="b0b48f7c53cdcc9a28c5b33f627658903f534c56" translate="yes" xml:space="preserve">
          <source>The factory function used to create an instance of the &lt;code&gt;&lt;a href=&quot;upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; in Angular, and provides an API-compatiable &lt;code&gt;$locationProvider&lt;/code&gt; for AngularJS.</source>
          <target state="translated">Angularで &lt;code&gt;&lt;a href=&quot;upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; インスタンスを作成するために使用されるファクトリ関数で、AngularJSにAPI互換の &lt;code&gt;$locationProvider&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="fff2a09918a1b2d112204afd22582dc9b903d3db" translate="yes" xml:space="preserve">
          <source>The factory to use.</source>
          <target state="translated">使用する工場です。</target>
        </trans-unit>
        <trans-unit id="45110d699eb402accd2b39408cf613ccace142aa" translate="yes" xml:space="preserve">
          <source>The feature module has its own routing module, &lt;code&gt;customers-routing.module.ts&lt;/code&gt;. The &lt;code&gt;AppRoutingModule&lt;/code&gt; imports the feature module, &lt;code&gt;CustomersModule&lt;/code&gt;, and &lt;code&gt;CustomersModule&lt;/code&gt; in turn imports the &lt;code&gt;CustomersRoutingModule&lt;/code&gt;.</source>
          <target state="translated">機能モジュールには、独自のルーティングモジュール、 &lt;code&gt;customers-routing.module.ts&lt;/code&gt; があります。 &lt;code&gt;AppRoutingModule&lt;/code&gt; 輸入機能モジュール、 &lt;code&gt;CustomersModule&lt;/code&gt; 、および &lt;code&gt;CustomersModule&lt;/code&gt; ターン輸入 &lt;code&gt;CustomersRoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c68df8d13f8a11bcd08a42b67de607bb1fe78496" translate="yes" xml:space="preserve">
          <source>The feature-specific route definition file &lt;code&gt;customers-routing.module.ts&lt;/code&gt; imports its own feature component defined in the &lt;code&gt;customers.component.ts&lt;/code&gt; file, along with the other JavaScript import statements. It then maps the empty path to the &lt;code&gt;CustomersComponent&lt;/code&gt;.</source>
          <target state="translated">機能固有のルート定義ファイル &lt;code&gt;customers-routing.module.ts&lt;/code&gt; は、 &lt;code&gt;customers.component.ts&lt;/code&gt; ファイルで定義された独自の機能コンポーネントを他のJavaScriptインポートステートメントとともにインポートします。次に、空のパスを &lt;code&gt;CustomersComponent&lt;/code&gt; にマップします。</target>
        </trans-unit>
        <trans-unit id="6957954dfc17f6637256e21496069d6d7edfa00a" translate="yes" xml:space="preserve">
          <source>The feature-specific routing module imports its own feature component, &lt;code&gt;CustomerListComponent&lt;/code&gt;, along with the other JavaScript import statements. It also adds the route to its own component.</source>
          <target state="translated">機能固有のルーティングモジュールは、独自の機能コンポーネントである &lt;code&gt;CustomerListComponent&lt;/code&gt; を、他のJavaScriptインポートステートメントとともにインポートします。また、ルートを独自のコンポーネントに追加します。</target>
        </trans-unit>
        <trans-unit id="b6679a077d80a4fae996b201686c099a780913b7" translate="yes" xml:space="preserve">
          <source>The features described in this guide &amp;mdash; and the more advanced features described in the related Angular animations guides &amp;mdash; are demonstrated in an example app available as a live example.</source>
          <target state="translated">このガイドで説明されている機能（および関連するAngularアニメーションガイドで説明されているより高度な機能）は、実例として利用できるサンプルアプリで示されています。</target>
        </trans-unit>
        <trans-unit id="5d913855a2f92d2ad9226bb9153c9058915ef08a" translate="yes" xml:space="preserve">
          <source>The fields given in the schema correspond to the allowed argument values and defaults for the CLI sub-command options. You can update your workspace schema file to set a different default for a sub-command option.</source>
          <target state="translated">スキーマで指定されたフィールドは、CLI サブコマンド・オプションの許可された引数の値と既定値に対応しています。ワークスペース スキーマ ファイルを更新して、サブコマンド オプションに異なるデフォルトを設定することができます。</target>
        </trans-unit>
        <trans-unit id="1e46781c8a8accd7cee0f511396c96eb0f907cd9" translate="yes" xml:space="preserve">
          <source>The file extension or preprocessor to use for style files.</source>
          <target state="translated">スタイルファイルに使用するファイル拡張子またはプリプロセッサ。</target>
        </trans-unit>
        <trans-unit id="4df1821dbd4788e87e9499318c4ec670cf47f860" translate="yes" xml:space="preserve">
          <source>The file extension to use for style files.</source>
          <target state="translated">スタイルファイルに使用するファイル拡張子。</target>
        </trans-unit>
        <trans-unit id="6406bc3d893f537b5bde48e17108b2279f261462" translate="yes" xml:space="preserve">
          <source>The file name reported in the error message, &lt;code&gt;my.component.ts.MyComponent.html&lt;/code&gt;, is a synthetic file generated by the template compiler that holds contents of the &lt;code&gt;MyComponent&lt;/code&gt; class template. The compiler never writes this file to disk. The line and column numbers are relative to the template string in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; annotation of the class, &lt;code&gt;MyComponent&lt;/code&gt; in this case. If a component uses &lt;code&gt;templateUrl&lt;/code&gt; instead of &lt;code&gt;template&lt;/code&gt;, the errors are reported in the HTML file referenced by the &lt;code&gt;templateUrl&lt;/code&gt; instead of a synthetic file.</source>
          <target state="translated">エラーメッセージで報告されるファイル名 &lt;code&gt;my.component.ts.MyComponent.html&lt;/code&gt; は、 &lt;code&gt;MyComponent&lt;/code&gt; クラステンプレートの内容を保持するテンプレートコンパイラによって生成される合成ファイルです。コンパイラーはこのファイルをディスクに書き込みません。行番号と列番号は、クラスの &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; アノテーションのテンプレート文字列（この場合は &lt;code&gt;MyComponent&lt;/code&gt; )に関連しています。コンポーネントが使用している場合 &lt;code&gt;templateUrl&lt;/code&gt; をするのではなく、 &lt;code&gt;template&lt;/code&gt; 、エラーがで参照されるHTMLファイルで報告されている &lt;code&gt;templateUrl&lt;/code&gt; の代わりに、合成ファイル。</target>
        </trans-unit>
        <trans-unit id="dc59a059fa420961f9dd7f4d741b5a2264a08f45" translate="yes" xml:space="preserve">
          <source>The files in &lt;code&gt;@angular/common/locales&lt;/code&gt; contain most of the locale data that you need, but some advanced formatting options might only be available in the extra dataset that you can import from &lt;code&gt;@angular/common/locales/extra&lt;/code&gt;. An error message informs you when this is the case.</source>
          <target state="translated">&lt;code&gt;@angular/common/locales&lt;/code&gt; 内のファイルには、必要なロケールデータのほとんどが含まれていますが、一部の高度な書式設定オプションは、 &lt;code&gt;@angular/common/locales/extra&lt;/code&gt; からインポートできる追加のデータセットでのみ使用できる場合があります。この場合は、エラーメッセージで通知されます。</target>
        </trans-unit>
        <trans-unit id="cc5da9fb73116aefd1be69567f1edca5171f0c86" translate="yes" xml:space="preserve">
          <source>The files in the &lt;code&gt;dist/my-project-name&lt;/code&gt; folder are static and can be hosted on any web server capable of serving files (&lt;code&gt;Node.js&lt;/code&gt;, Java, .NET) or any backend (Firebase, Google Cloud, App Engine, others).</source>
          <target state="translated">&lt;code&gt;dist/my-project-name&lt;/code&gt; フォルダー内のファイルは静的であり、ファイルを提供できる任意のWebサーバー（ &lt;code&gt;Node.js&lt;/code&gt; 、Java、.NET）または任意のバックエンド（Firebase、Google Cloud、App Engineなど）でホストできます。。</target>
        </trans-unit>
        <trans-unit id="cfd2525e778d44ca48268a14e2d4009355f67534" translate="yes" xml:space="preserve">
          <source>The files in the &lt;code&gt;dist/my-project-name&lt;/code&gt; folder are static. This means you can host them on any web server capable of serving files (such as &lt;code&gt;Node.js&lt;/code&gt;, Java, .NET), or any backend (such as Firebase, Google Cloud, or App Engine).</source>
          <target state="translated">&lt;code&gt;dist/my-project-name&lt;/code&gt; フォルダー内のファイルは静的です。つまり、ファイルを提供できる任意のWebサーバー（ &lt;code&gt;Node.js&lt;/code&gt; 、Java、.NETなど）または任意のバックエンド（Firebase、Google Cloud、App Engineなど）でホストできます。</target>
        </trans-unit>
        <trans-unit id="fef6eeb99c812c89811914cb86075f88c7c8f8c4" translate="yes" xml:space="preserve">
          <source>The files marked with &lt;code&gt;*&lt;/code&gt; are new and not in the original tutorial sample.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; でマークされたファイルは新規であり、元のチュートリアルサンプルにはありません。</target>
        </trans-unit>
        <trans-unit id="4958ad54ba499fda7072a0286fdc85fb538ec9d8" translate="yes" xml:space="preserve">
          <source>The filter works in real time as you type. Elements leave the page as you type each new letter and the filter gets progressively stricter. The heroes list gradually re-enters the page as you delete each letter in the filter box.</source>
          <target state="translated">このフィルターは、文字を入力している間にリアルタイムで動作します。新しい文字を入力するたびに要素がページから消えていき、フィルターは徐々に厳しくなっていきます。フィルタボックス内の文字を削除していくと、ヒーローリストが徐々にページに戻ってきます。</target>
        </trans-unit>
        <trans-unit id="f573bd26d52dc028307ae3e04564422e663eec0d" translate="yes" xml:space="preserve">
          <source>The final UI looks like this:</source>
          <target state="translated">最終的なUIはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="c5b275336e85842a3e2bdbdc55d315d60de9615b" translate="yes" xml:space="preserve">
          <source>The final ad banner looks like this:</source>
          <target state="translated">最終的な広告バナーはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="321d2b68064070be07256e2a5abc3418d809f653" translate="yes" xml:space="preserve">
          <source>The final form looks like this:</source>
          <target state="translated">最終形態はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="041dc8a5f34133da31fcc036e9813dc9a7c7dd5c" translate="yes" xml:space="preserve">
          <source>The final source code follows:</source>
          <target state="translated">最終的なソースコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4efdfc25a6effd16bf1e38707887ca8fdb33714e" translate="yes" xml:space="preserve">
          <source>The finished &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; looks like this:</source>
          <target state="translated">完成した &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="56cb402b12029a303e5d291a33be2607644acc0c" translate="yes" xml:space="preserve">
          <source>The first argument is the controller name. The second argument defines the string names of all dependencies injected into this controller, and a reference to the controller function.</source>
          <target state="translated">最初の引数はコントローラ名です。第二引数は、このコントローラに注入されたすべての依存関係の文字列名と、コントローラ関数への参照を定義します。</target>
        </trans-unit>
        <trans-unit id="f9457d5b3e7c5601a8125917a5c64688ac0a8255" translate="yes" xml:space="preserve">
          <source>The first bundle contains modern ES2015 syntax, takes advantage of built-in support in modern browsers, ships less polyfills, and results in a smaller bundle size.</source>
          <target state="translated">最初のバンドルには最新の ES2015 構文が含まれており、最新のブラウザでのビルトインサポートを利用し、ポリフィルの数を減らし、バンドルサイズを小さくしています。</target>
        </trans-unit>
        <trans-unit id="95633f9df24fc0ecf3fe00fc31e5e62805addea1" translate="yes" xml:space="preserve">
          <source>The first bundle contains modern ES2015 syntax. This bundle takes advantage of built-in support in modern browsers, ships fewer polyfills, and results in a smaller bundle size.</source>
          <target state="translated">最初のバンドルには、最新の ES2015 構文が含まれています。このバンドルは、最新のブラウザでのビルトインサポートを利用しており、ポリフィルの出荷数が少なく、バンドルサイズも小さくなっています。</target>
        </trans-unit>
        <trans-unit id="7f4b8a42566c14174c062c29a822d5296acfbeec" translate="yes" xml:space="preserve">
          <source>The first child of this route in the router state tree</source>
          <target state="translated">ルータの状態ツリーのこのルートの最初の子</target>
        </trans-unit>
        <trans-unit id="0cf5b8a30d51a55deb1ed42e3408e1848f44035a" translate="yes" xml:space="preserve">
          <source>The first child of this route in the router state tree.</source>
          <target state="translated">ルータの状態ツリー内のこのルートの最初の子。</target>
        </trans-unit>
        <trans-unit id="cbbf9616cd583ee698811321ffe898de8bb5be2c" translate="yes" xml:space="preserve">
          <source>The first configuration defines an array of two routes with minimal paths leading to the &lt;code&gt;CrisisListComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">最初の構成では、 &lt;code&gt;CrisisListComponent&lt;/code&gt; と &lt;code&gt;HeroListComponent&lt;/code&gt; につながる最小パスを持つ2つのルートの配列を定義します。</target>
        </trans-unit>
        <trans-unit id="90ce335c264ff739546ba0f108b7867bf473ab4e" translate="yes" xml:space="preserve">
          <source>The first configuration defines an array of two routes with simple paths leading to the &lt;code&gt;CrisisListComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt;. Generate the &lt;code&gt;CrisisList&lt;/code&gt; and &lt;code&gt;HeroList&lt;/code&gt; components.</source>
          <target state="translated">最初の構成は、 &lt;code&gt;CrisisListComponent&lt;/code&gt; および &lt;code&gt;HeroListComponent&lt;/code&gt; につながる単純なパスを持つ2つのルートの配列を定義します。 &lt;code&gt;CrisisList&lt;/code&gt; および &lt;code&gt;HeroList&lt;/code&gt; コンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="fc5ab8411a999f00314640e534a4f07a7e314733" translate="yes" xml:space="preserve">
          <source>The first entry is for a schematic named &lt;code&gt;ng-add&lt;/code&gt;. It contains the description, and points to the factory function that is called when your schematic is executed.</source>
          <target state="translated">最初のエントリは、 &lt;code&gt;ng-add&lt;/code&gt; という名前の回路図です。説明が含まれ、回路図が実行されたときに呼び出されるファクトリ関数を指します。</target>
        </trans-unit>
        <trans-unit id="86c941d39038cbf4e554b9137f55a474253a3b56" translate="yes" xml:space="preserve">
          <source>The first example performs the following steps to verify the view-to-model data flow.</source>
          <target state="translated">第1の実施例では、ビューからモデルへのデータフローを検証するために、以下のステップを実行する。</target>
        </trans-unit>
        <trans-unit id="f7c494230675324afd6a402aadf921b3773a5f5c" translate="yes" xml:space="preserve">
          <source>The first explicitly generated application goes into the &lt;code&gt;projects/&lt;/code&gt; folder along with all other projects in the workspace. Newly generated libraries are also added under &lt;code&gt;projects/&lt;/code&gt;. When you create projects this way, the file structure of the workspace is entirely consistent with the structure of the &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration file&lt;/a&gt;, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">最初に明示的に生成されたアプリケーションは、ワークスペース内の他のすべてのプロジェクトと一緒に &lt;code&gt;projects/&lt;/code&gt; フォルダーに入ります。新しく生成されたライブラリも &lt;code&gt;projects/&lt;/code&gt; 下に追加されます。あなたがこの方法でプロジェクトを作成すると、ワークスペースのファイル構造は、構造と完全に一致する&lt;a href=&quot;workspace-config&quot;&gt;ワークスペースの設定ファイル&lt;/a&gt;、 &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5daa0866ecdb0176ba5151f4125dd5f05620ba13" translate="yes" xml:space="preserve">
          <source>The first form is not actually rendered, only the finished product ends up in the DOM.</source>
          <target state="translated">最初のフォームは実際にはレンダリングされません。</target>
        </trans-unit>
        <trans-unit id="4f7f9d4b304e201ea1705223665d4d800899a939" translate="yes" xml:space="preserve">
          <source>The first injector configured with a provider supplies the dependency (a service instance or value) to the constructor.</source>
          <target state="translated">プロバイダで構成された第 1 のインジェクタは、依存関係(サービス インスタンスまたは値)をコンストラクタに供給します。</target>
        </trans-unit>
        <trans-unit id="78ec94cfb431864b60956eb8b8ac569aa3b4907a" translate="yes" xml:space="preserve">
          <source>The first is a sanity test; it confirms that the stubbed &lt;code&gt;UserService&lt;/code&gt; is called and working.</source>
          <target state="translated">最初は健全性テストです。これは、スタブ化された &lt;code&gt;UserService&lt;/code&gt; が呼び出されて機能していることを確認します。</target>
        </trans-unit>
        <trans-unit id="2fe10133ce5f0b8442b0b35164dad9dce4a33027" translate="yes" xml:space="preserve">
          <source>The first item in the array identifies the parent route (&lt;code&gt;/crisis-center&lt;/code&gt;).</source>
          <target state="translated">配列の最初の項目は、親ルート（ &lt;code&gt;/crisis-center&lt;/code&gt; ）を識別します。</target>
        </trans-unit>
        <trans-unit id="ef2dfd24b47c1df0d44ab06dc8c75e10571cb271" translate="yes" xml:space="preserve">
          <source>The first line indicates the driver state:</source>
          <target state="translated">1 行目はドライバの状態を示しています。</target>
        </trans-unit>
        <trans-unit id="6ae643662b050aa4b42fc55539a448dfb7866f94" translate="yes" xml:space="preserve">
          <source>The first parameter is &lt;code&gt;AppServerModule&lt;/code&gt;. It's the bridge between the Universal server-side renderer and the Angular application.</source>
          <target state="translated">最初のパラメーターは &lt;code&gt;AppServerModule&lt;/code&gt; です。これは、ユニバーサルサーバー側レンダラーとAngularアプリケーション間のブリッジです。</target>
        </trans-unit>
        <trans-unit id="62953bff7e26f22cabbf685caa0a5a1a6c295ca3" translate="yes" xml:space="preserve">
          <source>The first parameter is an object containing the locale data imported from &lt;code&gt;@angular/common/locales&lt;/code&gt;. By default, the imported locale data is registered with the locale id that is defined in the Angular locale data itself. If you want to register the imported locale data with another locale id, use the second parameter to specify a custom locale id. For example, Angular's locale data defines the locale id for French as &quot;fr&quot;. You can use the second parameter to associate the imported French locale data with the custom locale id &quot;fr-FR&quot; instead of &quot;fr&quot;.</source>
          <target state="translated">最初のパラメータは、 &lt;code&gt;@angular/common/locales&lt;/code&gt; からインポートされたロケールデータを含むオブジェクトです。デフォルトでは、インポートされたロケールデータは、Angularロケールデータ自体で定義されているロケールIDで登録されます。インポートしたロケールデータを別のロケールIDに登録する場合は、2番目のパラメーターを使用してカスタムロケールIDを指定します。たとえば、Angularのロケールデータはフランス語のロケールIDを「fr」として定義します。 2番目のパラメーターを使用して、インポートされたフランス語ロケールデータを「fr」ではなく「fr-FR」というカスタムロケールIDに関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="b4e326dc69f53ccaa57af61d7dcbe29b421b04c0" translate="yes" xml:space="preserve">
          <source>The first parameter is the &lt;em&gt;element-to-click&lt;/em&gt;. If you wish, you can pass a custom event object as the second parameter. The default is a (partial) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button&quot;&gt;left-button mouse event object&lt;/a&gt; accepted by many handlers including the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">最初のパラメータは&lt;em&gt;クリック&lt;/em&gt;する&lt;em&gt;要素&lt;/em&gt;です。必要に応じて、カスタムイベントオブジェクトを2番目のパラメータとして渡すことができます。デフォルトは、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブを含む多くのハンドラーによって受け入れられる（部分的な）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button&quot;&gt;左ボタンマウスイベントオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="f3697ff5f0aeb3ecb5abdfb5882b9887cea92e64" translate="yes" xml:space="preserve">
          <source>The first parameter is the key. It is bound to the component property (&lt;code&gt;minutes&lt;/code&gt;), which determines the number of minutes.</source>
          <target state="translated">最初のパラメーターはキーです。これは、 &lt;code&gt;minutes&lt;/code&gt; を決定するコンポーネントプロパティ（minutes）にバインドされています。</target>
        </trans-unit>
        <trans-unit id="f4f25fbb7333cd732b136fdcf04f2c24da137856" translate="yes" xml:space="preserve">
          <source>The first parameter of &lt;code&gt;&lt;a href=&quot;router#navigate&quot;&gt;navigate()&lt;/a&gt;&lt;/code&gt; is a delta to be applied to the current URL or the one provided in the &lt;code&gt;&lt;a href=&quot;navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; property of the second parameter (the &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router#navigate&quot;&gt;navigate()&lt;/a&gt;&lt;/code&gt; の最初のパラメーターは、現在のURLに適用されるデルタ、または2番目のパラメーター（ &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; ）の &lt;code&gt;&lt;a href=&quot;navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; プロパティで提供されるものです。</target>
        </trans-unit>
        <trans-unit id="9345528a3c56bcfad8473c4b0ab2f6cb3a19cf3d" translate="yes" xml:space="preserve">
          <source>The first parameter, &lt;code&gt;minutes&lt;/code&gt;, is bound to the component property (&lt;code&gt;minutes&lt;/code&gt;), which determines the number of minutes.</source>
          <target state="translated">最初のパラメータ &lt;code&gt;minutes&lt;/code&gt; は、分数を決定するコンポーネントプロパティ（ &lt;code&gt;minutes&lt;/code&gt; ）にバインドされています。</target>
        </trans-unit>
        <trans-unit id="7ef08564247507d1853a70de3837b4de95a01686" translate="yes" xml:space="preserve">
          <source>The first part, &lt;code&gt;duration&lt;/code&gt;, is required. The duration can be expressed in milliseconds as a simple number without quotes, or in seconds with quotes and a time specifier. For example, a duration of a tenth of a second can be expressed as follows:</source>
          <target state="translated">最初の部分である &lt;code&gt;duration&lt;/code&gt; は必須です。継続時間は、引用符なしの単純な数値としてミリ秒単位で、または引用符と時間指定子を使用して秒単位で表すことができます。たとえば、1/10秒の持続時間は次のように表すことができます。</target>
        </trans-unit>
        <trans-unit id="8129f1ba089dbdcf14610c20d5972d429db07c52" translate="yes" xml:space="preserve">
          <source>The first piece you'll port over to Angular is the &lt;code&gt;Phone&lt;/code&gt; service, which resides in &lt;code&gt;app/core/phone/phone.service.ts&lt;/code&gt; and makes it possible for components to load phone information from the server. Right now it's implemented with ngResource and you're using it for two things:</source>
          <target state="translated">Angularに移植する最初の部分は &lt;code&gt;Phone&lt;/code&gt; サービスです。これは &lt;code&gt;app/core/phone/phone.service.ts&lt;/code&gt; にあり、コンポーネントがサーバーから電話情報をロードできるようにします。現在、ngResourceで実装されており、次の2つの目的で使用しています。</target>
        </trans-unit>
        <trans-unit id="d409bc236492541655f27b252a1ca412eb1c6dd8" translate="yes" xml:space="preserve">
          <source>The first provider is the &lt;em&gt;de-sugared&lt;/em&gt;, expanded form of the most typical case in which the class to be created (&lt;code&gt;HeroService&lt;/code&gt;) is also the provider's dependency injection token. The short form is generally preferred; this long form makes the details explicit.</source>
          <target state="translated">最初のプロバイダーは、作成されるクラス（ &lt;code&gt;HeroService&lt;/code&gt; ）がプロバイダーの依存性注入トークンでもある、最も典型的なケースの&lt;em&gt;脱糖&lt;/em&gt;された拡張形式です。短い形式が一般的に好まれます。この長い形式により、詳細が明確になります。</target>
        </trans-unit>
        <trans-unit id="4833e5a707db3bf1798a161d416463da98bc30af" translate="yes" xml:space="preserve">
          <source>The first provides an existing instance of the &lt;code&gt;Hero&lt;/code&gt; class to use for the &lt;code&gt;Hero&lt;/code&gt; token, rather than requiring the injector to create a new instance with &lt;code&gt;new&lt;/code&gt; or use its own cached instance. Here, the token is the class itself.</source>
          <target state="translated">最初の既存のインスタンスを提供 &lt;code&gt;Hero&lt;/code&gt; に使用するクラスを &lt;code&gt;Hero&lt;/code&gt; むしろで新しいインスタンスを作成するために、注射器を必要とするよりも、トークン &lt;code&gt;new&lt;/code&gt; または独自のキャッシュされたインスタンスを使用します。ここで、トークンはクラス自体です。</target>
        </trans-unit>
        <trans-unit id="7e391d5af3994d07831d1d59d60f4b82bee03d07" translate="yes" xml:space="preserve">
          <source>The first route does the following:</source>
          <target state="translated">最初のルートでは以下のようなことを行います。</target>
        </trans-unit>
        <trans-unit id="d24e841b0aac44b0fa2a6d557695a951fb865d88" translate="yes" xml:space="preserve">
          <source>The first segment name can be prepended with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;./&lt;/code&gt;, or &lt;code&gt;../&lt;/code&gt;.</source>
          <target state="translated">最初のセグメント名で付加することができる &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;./&lt;/code&gt; または &lt;code&gt;../&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c812f6529ca065b3990e70e2407682a3f9b80ef0" translate="yes" xml:space="preserve">
          <source>The first segment name can be prepended with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;./&lt;/code&gt;, or &lt;code&gt;../&lt;/code&gt;:</source>
          <target state="translated">最初のセグメント名で付加することができる &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;./&lt;/code&gt; または &lt;code&gt;../&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be494398bc29b0cab8b00ca0ac7181001cb339b3" translate="yes" xml:space="preserve">
          <source>The first test creates a &lt;code&gt;ValueService&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; and passes it to the &lt;code&gt;MasterService&lt;/code&gt; constructor.</source>
          <target state="translated">最初のテストは &lt;code&gt;new&lt;/code&gt; で &lt;code&gt;ValueService&lt;/code&gt; を作成し、それを &lt;code&gt;MasterService&lt;/code&gt; コンストラクターに渡します。</target>
        </trans-unit>
        <trans-unit id="e5c06683cd16e03e55d325b4c0dc8a1f41e8cc0c" translate="yes" xml:space="preserve">
          <source>The first test shows the benefit of automatic change detection.</source>
          <target state="translated">1回目のテストでは、自動変化検出のメリットが示されています。</target>
        </trans-unit>
        <trans-unit id="aa509a8a6923fb66806ca57c1af7a5c17aa9333e" translate="yes" xml:space="preserve">
          <source>The first two lines, with the bindings, are there from previous steps. The new parts are &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; allows you to project content, and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; inside the &lt;code&gt;ChildComponent&lt;/code&gt; template makes the &lt;code&gt;InspectorComponent&lt;/code&gt; a child component of &lt;code&gt;ChildComponent&lt;/code&gt;.</source>
          <target state="translated">バインディングを含む最初の2行は、前のステップからのものです。新しい部分は &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; です。 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; ではコンテンツを投影でき、 &lt;code&gt;ChildComponent&lt;/code&gt; テンプレート内の &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; は &lt;code&gt;InspectorComponent&lt;/code&gt; を &lt;code&gt;ChildComponent&lt;/code&gt; の子コンポーネントにします。</target>
        </trans-unit>
        <trans-unit id="c7f348f21943da7baa131bdaaaeacb38df6dc474" translate="yes" xml:space="preserve">
          <source>The first two paths are the routes to the &lt;code&gt;CustomersModule&lt;/code&gt; and the &lt;code&gt;OrdersModule&lt;/code&gt;. The final entry defines a default route. The empty path matches everything that doesn't match an earlier path.</source>
          <target state="translated">最初の2つのパスは &lt;code&gt;CustomersModule&lt;/code&gt; と &lt;code&gt;OrdersModule&lt;/code&gt; へのルートです。最後のエントリは、デフォルトルートを定義します。空のパスは、以前のパスと一致しないすべてのものと一致します。</target>
        </trans-unit>
        <trans-unit id="dc8e7d683a61ef16411f45a78aa24508cfc2fdad" translate="yes" xml:space="preserve">
          <source>The first unit contains the text that was outside of the &lt;code&gt;select&lt;/code&gt;. In place of the &lt;code&gt;select&lt;/code&gt; is a placeholder, &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt;, that represents the &lt;code&gt;select&lt;/code&gt; message. Translate the text and move around the placeholder if necessary, but don't remove it. If you remove the placeholder, the ICU expression will not be present in your translated app.</source>
          <target state="translated">最初のユニットには、 &lt;code&gt;select&lt;/code&gt; の外にあったテキストが含まれています。 &lt;code&gt;select&lt;/code&gt; の代わりに、 &lt;code&gt;select&lt;/code&gt; メッセージを表すプレースホルダー &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt; があります。テキストを翻訳し、必要に応じてプレースホルダーを移動しますが、削除しないでください。プレースホルダーを削除すると、翻訳されたアプリにICU式が表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="a43bddb336b6d795fd036d0b5ceb9112cbcc9c51" translate="yes" xml:space="preserve">
          <source>The fix - hide empty details with &lt;em&gt;*ngIf&lt;/em&gt;</source>
          <target state="translated">修正- &lt;em&gt;* ngIfで&lt;/em&gt;空の詳細を隠す&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c4e5c41140f56ca78f4718c5d160184adeef566" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; applies to both scripts and styles. You can supply a value such as the following to apply optimization to one or the other:</source>
          <target state="translated">フラグ &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; は、スクリプトとスタイルの両方に適用されます。次のような値を指定して、どちらかに最適化を適用できます。</target>
        </trans-unit>
        <trans-unit id="8cae6ccc26c43113c77ba86a6a7f857871cb6761" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; outputs source maps for both scripts and styles. You can configure the option to apply to one or the other. You can also choose to output hidden source maps, or resolve vendor package source maps. For example:</source>
          <target state="translated">フラグ &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; は、スクリプトとスタイルの両方のソースマップを出力します。どちらかに適用するオプションを構成できます。非表示のソースマップを出力するか、ベンダーパッケージのソースマップを解決するかを選択することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="3f3ed63d6d77ed1a3c84fa9fd5bacb244d6a6a3c" translate="yes" xml:space="preserve">
          <source>The folllowing sections highlight some core router concepts.</source>
          <target state="translated">以下のセクションでは、ルータのコアとなる概念をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="1493706ed03721d1c78b58ccff4d87d10377338c" translate="yes" xml:space="preserve">
          <source>The follow example shows how to use radio buttons in a reactive form. When using radio buttons in a reactive form, radio buttons in the same group should have the same &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt;. Providing a &lt;code&gt;name&lt;/code&gt; attribute is optional.</source>
          <target state="translated">次の例は、リアクティブフォームでラジオボタンを使用する方法を示しています。リアクティブフォームでラジオボタンを使用する場合、同じグループのラジオボタンは同じ &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; を持つ必要があります。提供する &lt;code&gt;name&lt;/code&gt; 属性はオプションです。</target>
        </trans-unit>
        <trans-unit id="310dc1587f604138be8759e6a89d07e7cc01679f" translate="yes" xml:space="preserve">
          <source>The follow example shows you how to use a multi-select control with a reactive form.</source>
          <target state="translated">以下の例は、リアクティブフォームでマルチセレクトコントロールを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8c6f2a7b56c63473c3a42c22b17753fcb52e791f" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="translated">次の &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; メソッドはエラーを報告し、アプリケーションが引き続き機能するように無害な結果を返します。</target>
        </trans-unit>
        <trans-unit id="785ab51680d18375d227cf4bdd9454c50b68a18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="translated">次の &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; は多くの &lt;code&gt;HeroService&lt;/code&gt; メソッドで共有されるため、さまざまなニーズを満たすために一般化されています。</target>
        </trans-unit>
        <trans-unit id="9fac4999708b255d65710166eee053bb3a438369" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ActivatedRouteStub&lt;/code&gt; class serves as a test double for &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次の &lt;code&gt;ActivatedRouteStub&lt;/code&gt; クラスは、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; のテストdoubleとして機能します。</target>
        </trans-unit>
        <trans-unit id="e61ca55af810cb77b591c0e8d0cf9110b85b7a31" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a base class for a set of controls that can represent the question and its answer in the form.</source>
          <target state="translated">次の &lt;code&gt;QuestionBase&lt;/code&gt; は、質問とその回答をフォームで表すことができる一連のコントロールの基本クラスです。</target>
        </trans-unit>
        <trans-unit id="b2b988a26abe5c751d6ffb4eba65994971ffa485" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a fundamental question class.</source>
          <target state="translated">次の &lt;code&gt;QuestionBase&lt;/code&gt; は、基本的な質問クラスです。</target>
        </trans-unit>
        <trans-unit id="c06281078d15555932d1ae78c47b2ddcf06d4228" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;WelcomeComponent&lt;/code&gt; depends on the &lt;code&gt;UserService&lt;/code&gt; to know the name of the user to greet.</source>
          <target state="translated">次の &lt;code&gt;WelcomeComponent&lt;/code&gt; は、挨拶するユーザーの名前を知るために &lt;code&gt;UserService&lt;/code&gt; に依存しています。</target>
        </trans-unit>
        <trans-unit id="f0f7c8570c75a7fbfc3c92a94edaa5d338b173de" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;devDependencies&lt;/code&gt; are provided in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">次の &lt;code&gt;devDependencies&lt;/code&gt; は、新しいAngularワークスペースのデフォルトの &lt;code&gt;package.json&lt;/code&gt; ファイルで提供されます。</target>
        </trans-unit>
        <trans-unit id="36e2b7d7bec0be04c77013b1d36bd5f9bd31299b" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;go()&lt;/code&gt; function navigates to the &lt;code&gt;list&lt;/code&gt; route by interpreting the destination URI as relative to the activated &lt;code&gt;child&lt;/code&gt; route</source>
          <target state="translated">次の &lt;code&gt;go()&lt;/code&gt; 関数は、アクティブ化された &lt;code&gt;child&lt;/code&gt; ルートを基準にして宛先URIを解釈することにより、 &lt;code&gt;list&lt;/code&gt; ルートに移動します</target>
        </trans-unit>
        <trans-unit id="c66deeeadbe10c60879e8a84f1e34c983c81d32e" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="translated">次の &lt;code&gt;handleError()&lt;/code&gt; メソッドは、エラーを報告してから無害な結果を返すため、アプリケーションは引き続き機能します。</target>
        </trans-unit>
        <trans-unit id="116cc41ee5347f1fb8e9c5ef258684090ee5b82d" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="translated">次の &lt;code&gt;handleError()&lt;/code&gt; は、多くの &lt;code&gt;HeroService&lt;/code&gt; メソッドで共有されるため、さまざまなニーズを満たすように一般化されています。</target>
        </trans-unit>
        <trans-unit id="0a445c25398c4982342ee1c37ee98932b7260ab6" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;searchHeroes&lt;/code&gt; method queries for heroes whose names contain the search term. Start by importing &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">次の &lt;code&gt;searchHeroes&lt;/code&gt; メソッドは、名前に検索語が含まれているヒーローをクエリします。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="91fa256b1d95446c100727849d7fffe9e6eee18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;sizerComponent&lt;/code&gt; has a &lt;code&gt;size&lt;/code&gt; value property and a &lt;code&gt;sizeChange&lt;/code&gt; event. The &lt;code&gt;size&lt;/code&gt; property is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, so data can flow into the &lt;code&gt;sizerComponent&lt;/code&gt;. The &lt;code&gt;sizeChange&lt;/code&gt; event is an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, which allows data to flow out of the &lt;code&gt;sizerComponent&lt;/code&gt; to the parent component.</source>
          <target state="translated">次 &lt;code&gt;sizerComponent&lt;/code&gt; があり &lt;code&gt;size&lt;/code&gt; valueプロパティと &lt;code&gt;sizeChange&lt;/code&gt; のイベントを。 &lt;code&gt;size&lt;/code&gt; プロパティは、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; データに流れ込むことができるように、 &lt;code&gt;sizerComponent&lt;/code&gt; 。 &lt;code&gt;sizeChange&lt;/code&gt; のイベントがある &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; データの流出を可能にする、 &lt;code&gt;sizerComponent&lt;/code&gt; 親コンポーネントに。</target>
        </trans-unit>
        <trans-unit id="cf12f77efe304835f70e6db2fb5c41f976783ba1" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;AfterContent&lt;/em&gt; hooks take action based on changing values in a &lt;em&gt;content child&lt;/em&gt;, which can only be reached by querying for them via the property decorated with &lt;a href=&quot;../api/core/contentchild&quot;&gt;@ContentChild&lt;/a&gt;.</source>
          <target state="translated">次の&lt;em&gt;AfterContent&lt;/em&gt;フックは、&lt;em&gt;コンテンツの子の&lt;/em&gt;値の変更に基づいてアクションを実行します。これは、&lt;a href=&quot;../api/core/contentchild&quot;&gt;@ ContentChildで&lt;/a&gt;装飾されたプロパティを介してクエリを実行することによってのみ到達できます。</target>
        </trans-unit>
        <trans-unit id="116e174584a29bb6840145432c80d1ed6f312131" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;code-example&lt;/em&gt; displays the sample's &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">次の&lt;em&gt;コード例&lt;/em&gt;は、サンプルの &lt;code&gt;app.module.ts&lt;/code&gt; を表示しています。</target>
        </trans-unit>
        <trans-unit id="7ff1e333381c65ecbd5243d727c0316791951c07" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;negative&lt;/em&gt; example defines the &lt;code&gt;AppComponent&lt;/code&gt;, bootstraps the app, defines the &lt;code&gt;Hero&lt;/code&gt; model object, and loads heroes from the server all in the same file. &lt;em&gt;Don't do this&lt;/em&gt;.</source>
          <target state="translated">次の&lt;em&gt;否定的な&lt;/em&gt;例では、 &lt;code&gt;AppComponent&lt;/code&gt; を定義し、アプリをブートストラップし、 &lt;code&gt;Hero&lt;/code&gt; モデルオブジェクトを定義し、サーバーからヒーローをすべて同じファイルに読み込みます。&lt;em&gt;これを行わないでください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f753905a9a1f06f9639773508814519f5c2d410a" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 11.0.0*:</source>
          <target state="translated">以下のAPIはバージョン11.0.0*から削除されました。</target>
        </trans-unit>
        <trans-unit id="994aa1e70e47f4c7e017a337b6ce6547e5ba554b" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 8.0.0:</source>
          <target state="translated">以下のAPIはバージョン8.0.0から削除されました。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
