<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="213e711f52a371405007d940340a810da2cec071" translate="yes" xml:space="preserve">
          <source>Service worker configuration</source>
          <target state="translated">サービスワーカーの設定</target>
        </trans-unit>
        <trans-unit id="1a95e38073e2323975c4e77f63c0aa4646408c33" translate="yes" xml:space="preserve">
          <source>Service worker in action: a tour</source>
          <target state="translated">活動中のサービスワーカー:ツアー</target>
        </trans-unit>
        <trans-unit id="47c66d180e31b1cc93e9ad75212e0e3e19f310ee" translate="yes" xml:space="preserve">
          <source>Service worker in production</source>
          <target state="translated">生産におけるサービス労働者</target>
        </trans-unit>
        <trans-unit id="ade1379af8a87a9d51d05ff28dafbe574ceb984f" translate="yes" xml:space="preserve">
          <source>Service worker updates</source>
          <target state="translated">サービスワーカーの更新</target>
        </trans-unit>
        <trans-unit id="f1a171133ce6596d2e430d1bd9ae7f5bb45aa66f" translate="yes" xml:space="preserve">
          <source>Service worker versionedFiles</source>
          <target state="translated">サービスワーカーのversionedFiles</target>
        </trans-unit>
        <trans-unit id="5e6526c00f376a58521de24f68551dd520efff44" translate="yes" xml:space="preserve">
          <source>Service workers augment the traditional web deployment model and empower applications to deliver a user experience with the reliability and performance on par with natively-installed code. Adding a service worker to an Angular application is one of the steps for turning an application into a &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;Progressive Web App&lt;/a&gt; (also known as a PWA).</source>
          <target state="translated">Service Workerは、従来のWeb配置モデルを強化し、アプリケーションに権限を与えて、ネイティブにインストールされたコードと同等の信頼性とパフォーマンスを備えたユーザーエクスペリエンスを提供します。AngularアプリケーションにService Workerを追加することは、アプリケーションを&lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;プログレッシブWebアプリ&lt;/a&gt;（PWAとも呼ばれる）に変換するための手順の1つです。</target>
        </trans-unit>
        <trans-unit id="05d9d31cda49f702ca155a823fabe52cfd7b0d78" translate="yes" xml:space="preserve">
          <source>Service workers function as a network proxy. They intercept all outgoing HTTP requests made by the application and can choose how to respond to them. For example, they can query a local cache and deliver a cached response if one is available. Proxying isn't limited to requests made through programmatic APIs, such as &lt;code&gt;fetch&lt;/code&gt;; it also includes resources referenced in HTML and even the initial request to &lt;code&gt;index.html&lt;/code&gt;. Service worker-based caching is thus completely programmable and doesn't rely on server-specified caching headers.</source>
          <target state="translated">Service Workerはネットワークプロキシとして機能します。これらは、アプリケーションによって行われたすべての発信HTTPリクエストをインターセプトし、それらへの応答方法を選択できます。たとえば、ローカルキャッシュにクエリを実行し、キャッシュされた応答が利用可能な場合は応答を配信できます。プロキシは、 &lt;code&gt;fetch&lt;/code&gt; などのプログラムAPIを介して行われたリクエストに限定されません。また、HTMLで参照されるリソースや、 &lt;code&gt;index.html&lt;/code&gt; への最初のリクエストも含まれます。したがって、Service Workerベースのキャッシングは完全にプログラム可能であり、サーバー指定のキャッシングヘッダーに依存しません。</target>
        </trans-unit>
        <trans-unit id="a84dec1de2b44f33c58b7e0f7e1b6a3aa3370a9c" translate="yes" xml:space="preserve">
          <source>Service workers in Angular</source>
          <target state="translated">Angularのサービスワーカー</target>
        </trans-unit>
        <trans-unit id="fbe47937f29ddbaa88baab42e70ae59b890c12cb" translate="yes" xml:space="preserve">
          <source>ServiceMessageBroker</source>
          <target state="translated">ServiceMessageBroker</target>
        </trans-unit>
        <trans-unit id="cf408ba8f4f4e39affef2df94bc39449009cdbfe" translate="yes" xml:space="preserve">
          <source>ServiceMessageBrokerFactory</source>
          <target state="translated">ServiceMessageBrokerFactory</target>
        </trans-unit>
        <trans-unit id="22547292247ba751d19d43d00fed2e196c575dc7" translate="yes" xml:space="preserve">
          <source>ServiceWorkerModule</source>
          <target state="translated">ServiceWorkerModule</target>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="dc81df13273d226b0e1cb8e0b9492326f4cc0a8f" translate="yes" xml:space="preserve">
          <source>Services and controllers can be turned into &lt;em&gt;classes&lt;/em&gt;. That way they'll be a step closer to becoming Angular service and component classes, which will make life easier after the upgrade.</source>
          <target state="translated">サービスとコントローラーは&lt;em&gt;クラス&lt;/em&gt;に変えることができます。そうすることで、それらはAngularサービスおよびコンポーネントクラスに一歩近づき、アップグレード後の作業が楽になります。</target>
        </trans-unit>
        <trans-unit id="d6f38e4a46ab4366026c2b9fabca761864ce2181" translate="yes" xml:space="preserve">
          <source>Services and dependency injection</source>
          <target state="translated">サービスと依存関係のインジェクション</target>
        </trans-unit>
        <trans-unit id="04795178e6ef84113f6ba4f86e592ec8793c6edb" translate="yes" xml:space="preserve">
          <source>Services are a great way to share information among classes that &lt;em&gt;don't know each other&lt;/em&gt;. You'll create a &lt;code&gt;MessageService&lt;/code&gt; and inject it in two places:</source>
          <target state="translated">サービスは、&lt;em&gt;お互いを知らない&lt;/em&gt;クラス間で情報を共有するための優れた方法です。 &lt;code&gt;MessageService&lt;/code&gt; を作成し、2つの場所に挿入します。</target>
        </trans-unit>
        <trans-unit id="03d8aac425a91514530a541229c6232f51e72c37" translate="yes" xml:space="preserve">
          <source>Services are an integral part of Angular applications. In Angular, a service is an instance of a class that can be made available to any part of your application using Angular's &lt;a href=&quot;../guide/glossary#dependency-injection-di&quot;&gt;dependency injection system&lt;/a&gt;.</source>
          <target state="translated">サービスは、Angularアプリケーションの不可欠な部分です。Angularでは、サービスはクラスのインスタンスであり、Angularの&lt;a href=&quot;../guide/glossary#dependency-injection-di&quot;&gt;依存性注入システム&lt;/a&gt;を使用してアプリケーションの任意の部分で利用できます。</target>
        </trans-unit>
        <trans-unit id="287e789611aae413d7c2761283ceeec6b7ea8297" translate="yes" xml:space="preserve">
          <source>Services are often the easiest files to unit test. Here are some synchronous and asynchronous unit tests of the &lt;code&gt;ValueService&lt;/code&gt; written without assistance from Angular testing utilities.</source>
          <target state="translated">多くの場合、サービスは単体テストが最も簡単なファイルです。以下は、Angularテストユーティリティの支援なしで記述された &lt;code&gt;ValueService&lt;/code&gt; の同期および非同期の単体テストです。</target>
        </trans-unit>
        <trans-unit id="9305c2ae51bc6317f3b7e0f08420dbb9a45604bc" translate="yes" xml:space="preserve">
          <source>Services are singletons</source>
          <target state="translated">サービスはシングルトン</target>
        </trans-unit>
        <trans-unit id="839cb93496558a535f12b31d66bf5a34f34d95c6" translate="yes" xml:space="preserve">
          <source>Services are singletons &lt;em&gt;within the scope of an injector&lt;/em&gt;. That is, there is at most one instance of a service in a given injector.</source>
          <target state="translated">サービスは&lt;em&gt;、インジェクターの範囲内の&lt;/em&gt;シングルトンです。つまり、特定のインジェクタにはサービスのインスタンスが最大で1つあります。</target>
        </trans-unit>
        <trans-unit id="a288e60c8f7e7e905223f6ac8c505dcde6c5c899" translate="yes" xml:space="preserve">
          <source>Services are the place where you share data between parts of your application. For the online store, the cart service is where you store your cart data and methods.</source>
          <target state="translated">サービスは、アプリケーションのパーツ間でデータを共有する場所です。オンラインストアでは、カートサービスはカートのデータとメソッドを保存する場所です。</target>
        </trans-unit>
        <trans-unit id="1a2effe45976526a6c2870605e8ffd3001bd45af" translate="yes" xml:space="preserve">
          <source>Services can be used to share data across components:</source>
          <target state="translated">サービスは、コンポーネント間でデータを共有するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="762de451edb00a9b20f3307ccbb3c3d98d62cdf8" translate="yes" xml:space="preserve">
          <source>Services can depend on other services. For example, here's a &lt;code&gt;HeroService&lt;/code&gt; that depends on the &lt;code&gt;Logger&lt;/code&gt; service, and also uses &lt;code&gt;BackendService&lt;/code&gt; to get heroes. That service in turn might depend on the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service to fetch heroes asynchronously from a server.</source>
          <target state="translated">サービスは他のサービスに依存できます。例えば、ここにあり &lt;code&gt;HeroService&lt;/code&gt; に依存 &lt;code&gt;Logger&lt;/code&gt; サービス、また、使用しています &lt;code&gt;BackendService&lt;/code&gt; を英雄を取得します。そのサービスは、サーバーから非同期でヒーローをフェッチするために &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスに依存する場合があります。</target>
        </trans-unit>
        <trans-unit id="401c0f41762eda8ff2cea4cff5e794d5e393d21b" translate="yes" xml:space="preserve">
          <source>Services can have their own dependencies. &lt;code&gt;HeroService&lt;/code&gt; is very simple and doesn't have any dependencies of its own. Suppose, however, that you want it to report its activities through a logging service. You can apply the same &lt;em&gt;constructor injection&lt;/em&gt; pattern, adding a constructor that takes a &lt;code&gt;Logger&lt;/code&gt; parameter.</source>
          <target state="translated">サービスは独自の依存関係を持つことができます。 &lt;code&gt;HeroService&lt;/code&gt; は非常にシンプルで、独自の依存関係はありません。ただし、ロギングサービスを介してそのアクティビティを報告したいとします。同じ&lt;em&gt;コンストラクター注入&lt;/em&gt;パターンを適用して、 &lt;code&gt;Logger&lt;/code&gt; パラメーターを受け取るコンストラクターを追加できます。</target>
        </trans-unit>
        <trans-unit id="827e3e37481ca564382603de24f2e8a86efa9fd1" translate="yes" xml:space="preserve">
          <source>Services often depend on other services that Angular injects into the constructor. In many cases, it's easy to create and &lt;em&gt;inject&lt;/em&gt; these dependencies by hand while calling the service's constructor.</source>
          <target state="translated">多くの場合、サービスは、Angularがコンストラクターに注入する他のサービスに依存しています。多くの場合、サービスのコンストラクターを呼び出すときに、これらの依存関係を手動で作成して&lt;em&gt;挿入&lt;/em&gt;するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="3aee7269d5419be2872cc98e6def16b7c3d10a8f" translate="yes" xml:space="preserve">
          <source>Services should declare their own providers (rather than declaring providers in the NgModule or a component), so that they are &lt;em&gt;tree-shakable&lt;/em&gt;. This allows the compiler to leave the service out of the bundle if it never gets injected into the application that imports the library. For more about this, see &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;Tree-shakable providers&lt;/a&gt;.</source>
          <target state="translated">サービスは、NgModuleやコンポーネントでプロバイダーを宣言するのではなく、独自のプロバイダーを宣言して、&lt;em&gt;ツリーシェーク可能にする必要があり&lt;/em&gt;ます。これにより、ライブラリーをインポートするアプリケーションにサービスが注入されない場合、コンパイラーはサービスをバンドルから除外できます。これについて詳しくは、&lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;ツリーを揺さぶるプロバイダーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e82dfcf33341cfc227b80e32c5ea22e95b6eb8ea" translate="yes" xml:space="preserve">
          <source>Services that need other services</source>
          <target state="translated">他のサービスを必要とするサービス</target>
        </trans-unit>
        <trans-unit id="f848b0572f2356254f8426cf9aadf6c21acafad6" translate="yes" xml:space="preserve">
          <source>Services with dependencies</source>
          <target state="translated">依存関係を持つサービス</target>
        </trans-unit>
        <trans-unit id="875fd6861e3347ad594641b3f4346b9a8c43fa36" translate="yes" xml:space="preserve">
          <source>Serving static files safely</source>
          <target state="translated">静的ファイルを安全に扱う</target>
        </trans-unit>
        <trans-unit id="01d38b48a65d5fbee3c3b1c260d84db7448d9f37" translate="yes" xml:space="preserve">
          <source>Serving with &lt;code&gt;http-server&lt;/code&gt;</source>
          <target state="translated">でサービング &lt;code&gt;http-server&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f17c419e71b4e98023c7e72ce693f22d6afc01e1" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in the test.</source>
          <target state="translated">テストでブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="738cb3afa0421966b35119f3c60bb9e54dc062c6" translate="yes" xml:space="preserve">
          <source>Set a collection of style values using an expression that returns key-value pairs.</source>
          <target state="translated">キーと値のペアを返す式を使用して、スタイル値のコレクションを設定します。</target>
        </trans-unit>
        <trans-unit id="69b4a6a1b9b3546b5c8cee5617c41058437ce5e3" translate="yes" xml:space="preserve">
          <source>Set a custom id for persistence and maintenance</source>
          <target state="translated">永続性とメンテナンスのためのカスタムIDを設定する</target>
        </trans-unit>
        <trans-unit id="86c2a8c055de05a1bd2f84270398f0dbff8d26c6" translate="yes" xml:space="preserve">
          <source>Set animation timings, styles, keyframes, and transitions.</source>
          <target state="translated">アニメーションのタイミング、スタイル、キーフレーム、トランジションを設定します。</target>
        </trans-unit>
        <trans-unit id="471487a1a43d8d54584532e4c1207f67ffaa2bdf" translate="yes" xml:space="preserve">
          <source>Set default headers</source>
          <target state="translated">デフォルトのヘッダを設定する</target>
        </trans-unit>
        <trans-unit id="56d8bce48f1e5ed84bb4cf4b7454b851a30fa5d8" translate="yes" xml:space="preserve">
          <source>Set the &lt;a href=&quot;core/gettestability&quot;&gt;&lt;code&gt;GetTestability&lt;/code&gt;&lt;/a&gt; implementation used by the Angular testing framework.</source>
          <target state="translated">Angularテストフレームワークで使用される&lt;a href=&quot;core/gettestability&quot;&gt; &lt;code&gt;GetTestability&lt;/code&gt; &lt;/a&gt;実装を設定します。</target>
        </trans-unit>
        <trans-unit id="552e9310253e5b69ac0c8293430d68334ec09c09" translate="yes" xml:space="preserve">
          <source>Set the &lt;a href=&quot;gettestability&quot;&gt;&lt;code&gt;GetTestability&lt;/code&gt;&lt;/a&gt; implementation used by the Angular testing framework.</source>
          <target state="translated">Angularテストフレームワークで使用される&lt;a href=&quot;gettestability&quot;&gt; &lt;code&gt;GetTestability&lt;/code&gt; &lt;/a&gt;実装を設定します。</target>
        </trans-unit>
        <trans-unit id="054a7c89e7547798aa16254c5f250a3a4ad3110c" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; string to load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 文字列を設定してCrisisCenterModuleをロードし &lt;code&gt;CrisisCenterModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f573bd4f8c31617c5a64f08af3a4efaa8e4eb7d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt; to &lt;code&gt;es5&lt;/code&gt;.</source>
          <target state="translated">設定し &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 中 &lt;code&gt;compilerOptions&lt;/code&gt; に &lt;code&gt;es5&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="750f6c8de781b0a9bfdf9aecda1c404e9719facb" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;data.preload&lt;/code&gt; flag in the &lt;code&gt;crisis-center&lt;/code&gt; route in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">設定し &lt;code&gt;data.preload&lt;/code&gt; の中にフラグを &lt;code&gt;crisis-center&lt;/code&gt; でルート &lt;code&gt;AppRoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55875d634ce533933ff366c19098dc27280143e9" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;shippingCosts&lt;/code&gt; property using the &lt;code&gt;getShippingPrices()&lt;/code&gt; method from cart service.</source>
          <target state="translated">カートサービスの &lt;code&gt;getShippingPrices()&lt;/code&gt; メソッドを使用して、 &lt;code&gt;shippingCosts&lt;/code&gt; プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="b16b24857617917dc691c200f30eae236f5825e1" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;updateOn&lt;/code&gt; option to &lt;code&gt;'blur'&lt;/code&gt; to update on the blur &lt;code&gt;event&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; オプションを &lt;code&gt;'blur'&lt;/code&gt; に設定して、blur &lt;code&gt;event&lt;/code&gt; 更新します。</target>
        </trans-unit>
        <trans-unit id="64745b07552e13c9c61a550ec430816d59d4545f" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;updateOn&lt;/code&gt; option to &lt;code&gt;'submit'&lt;/code&gt; to update on a submit &lt;code&gt;event&lt;/code&gt;.</source>
          <target state="translated">送信 &lt;code&gt;event&lt;/code&gt; 更新するには、 &lt;code&gt;updateOn&lt;/code&gt; オプションを &lt;code&gt;'submit'&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="643460427f8dc3513c9eff9596a85daae5e1255a" translate="yes" xml:space="preserve">
          <source>Set the CSS &lt;em&gt;attribute selector&lt;/em&gt; that identifies the directive when applied to an element in a template.</source>
          <target state="translated">テンプレート内の要素に適用されるときにディレクティブを識別するCSS &lt;em&gt;属性セレクター&lt;/em&gt;を設定し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7e4c0854883b7166fb5c76f18fdd788456cb90b6" translate="yes" xml:space="preserve">
          <source>Set the complete value for the form group</source>
          <target state="translated">フォームグループの完全値を設定します。</target>
        </trans-unit>
        <trans-unit id="3d106312dcdcec010586e075d6c26577e1d33160" translate="yes" xml:space="preserve">
          <source>Set the font of the containing element to the result of an expression.</source>
          <target state="translated">式の結果に含まれる要素のフォントを設定します。</target>
        </trans-unit>
        <trans-unit id="08a6bf6ca8a531b700e00d9483de23606b228acf" translate="yes" xml:space="preserve">
          <source>Set the items using the cart service's &lt;code&gt;getItems()&lt;/code&gt; method. (You defined this method &lt;a href=&quot;https://angular.io/start/start/data#generate-cart-service&quot;&gt;when you generated &lt;code&gt;cart.service.ts&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">カートサービスの &lt;code&gt;getItems()&lt;/code&gt; メソッドを使用してアイテムを設定します。（このメソッドは&lt;a href=&quot;https://angular.io/start/start/data#generate-cart-service&quot;&gt;、 &lt;code&gt;cart.service.ts&lt;/code&gt; &lt;/a&gt;を生成したときに定義したものです。）</target>
        </trans-unit>
        <trans-unit id="50ad64b7d37e4ccb6b540e90cd0c3f10f634201c" translate="yes" xml:space="preserve">
          <source>Set the new value for the input to &lt;em&gt;Red&lt;/em&gt;, and dispatch the &quot;input&quot; event on the form input element.</source>
          <target state="translated">入力の新しい値を&lt;em&gt;Red&lt;/em&gt;に設定し、フォーム入力要素で「input」イベントを送出します。</target>
        </trans-unit>
        <trans-unit id="bae9fdb83bd247d251685df2b94426ce39765a6b" translate="yes" xml:space="preserve">
          <source>Set the proxy configuration file to &lt;code&gt;proxy.conf.js&lt;/code&gt; (instead of &lt;code&gt;proxy.conf.json&lt;/code&gt;), and specify configuration files as in the following example.</source>
          <target state="translated">プロキシ構成ファイルを（ &lt;code&gt;proxy.conf.js&lt;/code&gt; onではなく） &lt;code&gt;proxy.conf.json&lt;/code&gt; 設定し、次の例のように構成ファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="2520a4a20a770223794dbe482bd062cd28c97b3f" translate="yes" xml:space="preserve">
          <source>Set the router to compose HTML5 browser URLs.</source>
          <target state="translated">ルーターにHTML5ブラウザのURLを合成するように設定します。</target>
        </trans-unit>
        <trans-unit id="dece8573c3fa34cb3d93f7729f8d90e971614b31" translate="yes" xml:space="preserve">
          <source>Set the title of the current HTML document.</source>
          <target state="translated">現在のHTMLドキュメントのタイトルを設定します。</target>
        </trans-unit>
        <trans-unit id="cb1f4eb94fb2add08c2048ba41248f137bd52b32" translate="yes" xml:space="preserve">
          <source>Set the updateOn property for all controls in a form array</source>
          <target state="translated">フォーム配列内のすべてのコントロールに対して updateOn プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="3926d1813cf37caf94ee3a8384a5fde2db026aa4" translate="yes" xml:space="preserve">
          <source>Set the updateOn property for all controls in a form group</source>
          <target state="translated">フォームグループ内のすべてのコントロールの updateOn プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="27f14c9a108c4c2368f8e2a7f390858f90f8e047" translate="yes" xml:space="preserve">
          <source>Set the value corresponding to a key.</source>
          <target state="translated">キーに対応する値を設定します。</target>
        </trans-unit>
        <trans-unit id="a798734ef7e53b4ea12d96417cb4571dae5b053c" translate="yes" xml:space="preserve">
          <source>Set the value of an attribute directly with an &lt;strong&gt;attribute binding&lt;/strong&gt;. This is the only exception to the rule that a binding sets a target property and the only binding that creates and sets an attribute.</source>
          <target state="translated">&lt;strong&gt;属性バインディングを使用&lt;/strong&gt;して、&lt;strong&gt;属性&lt;/strong&gt;の値を直接設定します。これは、バインディングがターゲットプロパティを設定するルールの唯一の例外であり、属性を作成および設定する唯一のバインディングです。</target>
        </trans-unit>
        <trans-unit id="254ca05987dfc9294af58db7ae1faf489fcf3c04" translate="yes" xml:space="preserve">
          <source>Set the values for the controls in the form array</source>
          <target state="translated">フォーム配列にコントロールの値を設定します。</target>
        </trans-unit>
        <trans-unit id="ad7256a72229358f8f1fff2d736e08ee67e29e4b" translate="yes" xml:space="preserve">
          <source>Set the width of the containing element to a pixel value returned by an expression.</source>
          <target state="translated">含む要素の幅を、式で返されるピクセル値に設定します。</target>
        </trans-unit>
        <trans-unit id="a9b9fa97a9536da22e35167aab455d8ba3bdcf67" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; when you want the fixture to detect changes automatically.</source>
          <target state="translated">フィクスチャで変更を自動的に検出する場合は、これを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="a90835fe79ccd2570de94f05d1889c0923d56316" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; if you are using TypeScript's &lt;code&gt;--outFile&lt;/code&gt; option, because the metadata files are not valid for this style of TypeScript output. However, we do not recommend using &lt;code&gt;--outFile&lt;/code&gt; with Angular. Use a bundler, such as &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;, instead.</source>
          <target state="translated">TypeScriptの &lt;code&gt;--outFile&lt;/code&gt; オプションを使用して &lt;code&gt;true&lt;/code&gt; 場合は、trueに設定します。メタデータファイルは、このタイプのTypeScript出力では無効であるためです。ただし、Angularで &lt;code&gt;--outFile&lt;/code&gt; を使用することはお勧めしません。代わりに、&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;などのバンドラーを使用してください。</target>
        </trans-unit>
        <trans-unit id="e380ce578de81eeac21b4cb893328ae5bc78b83a" translate="yes" xml:space="preserve">
          <source>Set up an app</source>
          <target state="translated">アプリを設定する</target>
        </trans-unit>
        <trans-unit id="bda7e96787a89877d8fdebbf6da139aeb613ff36" translate="yes" xml:space="preserve">
          <source>Set up continuous integration</source>
          <target state="translated">継続的な統合の設定</target>
        </trans-unit>
        <trans-unit id="3c3bbc8e614a21bc15426359627dde34be082adf" translate="yes" xml:space="preserve">
          <source>Set up redirects</source>
          <target state="translated">リダイレクトの設定</target>
        </trans-unit>
        <trans-unit id="cb42dd6a3cc3c8004aae58d885663b83df29f707" translate="yes" xml:space="preserve">
          <source>Set up the UI</source>
          <target state="translated">UIを設定する</target>
        </trans-unit>
        <trans-unit id="89d6ff37f332c1500fe38f269eb3664b72e48057" translate="yes" xml:space="preserve">
          <source>Set up the component</source>
          <target state="translated">コンポーネントの設定</target>
        </trans-unit>
        <trans-unit id="d2e162d9db64b0698e4b22345a7f83bb0a91200d" translate="yes" xml:space="preserve">
          <source>Set up the component to be able to use the cart service.</source>
          <target state="translated">カートサービスを利用できるようにコンポーネントを設定します。</target>
        </trans-unit>
        <trans-unit id="6e7e0cbb51939113b1621b21fba7c90fa7c6e0f6" translate="yes" xml:space="preserve">
          <source>Set up the component to be able to use the cart service. (This is the same way you set up the product details component to use the cart service, above.)</source>
          <target state="translated">カートサービスを利用できるようにコンポーネントを設定します。(これは上記のカートサービスを利用できるように商品詳細コンポーネントを設定したのと同じです)。</target>
        </trans-unit>
        <trans-unit id="df44c5c40fedfcfaa9b61252fc1e75b7e4f01ca6" translate="yes" xml:space="preserve">
          <source>Set up the new product alerts component to receive a product as input:</source>
          <target state="translated">入力として製品を受け取るための新製品アラートコンポーネントを設定します。</target>
        </trans-unit>
        <trans-unit id="ede5f7c82c5d89346f5d1512d578f9ce634f5795" translate="yes" xml:space="preserve">
          <source>Set up your environment</source>
          <target state="translated">環境を整える</target>
        </trans-unit>
        <trans-unit id="b549d363bd3fe30c03af25da4c9fffb7bd845170" translate="yes" xml:space="preserve">
          <source>Set up your environment.</source>
          <target state="translated">環境を整える。</target>
        </trans-unit>
        <trans-unit id="8ffd5ac8c69b341adc77658d1521202e6a7a3af4" translate="yes" xml:space="preserve">
          <source>Set whether the fixture should autodetect changes.</source>
          <target state="translated">フィクスチャが変更を自動検出するかどうかを設定します。</target>
        </trans-unit>
        <trans-unit id="b227d5a952b1c47332083790ad263bc1da265b17" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;&lt;a href=&quot;animatetimings&quot;&gt;AnimateTimings&lt;/a&gt;&lt;/code&gt; for the parent animation. A string in the format &quot;duration [delay][easing]&quot;.</source>
          <target state="translated">親アニメーションの &lt;code&gt;&lt;a href=&quot;animatetimings&quot;&gt;AnimateTimings&lt;/a&gt;&lt;/code&gt; を設定します。「duration [delay] [easing]」形式の文字列。</target>
        </trans-unit>
        <trans-unit id="4e44e02e61a4d878b167f4125c5c23c79a43f22c" translate="yes" xml:space="preserve">
          <source>Sets AnimationStyles for the parent animation. A function call to either &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; that returns a collection of CSS style entries to be applied to the parent animation. When null, uses the styles from the destination state. This is useful when describing an animation step that will complete an animation; see &quot;Animating to the final state&quot; in &lt;code&gt;transitions()&lt;/code&gt;.</source>
          <target state="translated">親アニメーションのAnimationStylesを設定します。親アニメーションに適用されるCSSスタイルエントリのコレクションを返す &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; への関数呼び出し。nullの場合、宛先状態のスタイルを使用します。これは、アニメーションを完了するアニメーションステップを説明するときに役立ちます。 &lt;code&gt;transitions()&lt;/code&gt; の「最終状態へのアニメーション」を参照してください。</target>
        </trans-unit>
        <trans-unit id="eee73d6992a2fe8ba0db9c96625781e26477dfad" translate="yes" xml:space="preserve">
          <source>Sets a new value for the form control.</source>
          <target state="translated">フォームコントロールに新しい値を設定します。</target>
        </trans-unit>
        <trans-unit id="a20d959f0b210975fdf07b42d7c4fd5e4620519a" translate="yes" xml:space="preserve">
          <source>Sets a specific element property.</source>
          <target state="translated">特定の要素のプロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="a121f641721bb9e0761bf738a12aa240427f80a2" translate="yes" xml:space="preserve">
          <source>Sets a time-delay for initiating an animation action. A number and optional time unit, such as &quot;1s&quot; or &quot;10ms&quot; for one second and 10 milliseconds, respectively.The default unit is milliseconds. Default value is 0, meaning no delay.</source>
          <target state="translated">アニメーションアクションを開始するまでの時間を設定します。デフォルトの単位はミリ秒です。デフォルトはミリ秒です。デフォルト値は0で、遅延なしを意味します。</target>
        </trans-unit>
        <trans-unit id="a932f4c7dd055e4cb8d562239ee85515c3dbb28b" translate="yes" xml:space="preserve">
          <source>Sets errors on a form control when running validations manually, rather than automatically.</source>
          <target state="translated">自動ではなく手動でバリデーションを実行する際のフォームコントロールのエラーを設定します。</target>
        </trans-unit>
        <trans-unit id="0b6dd7ecdc8f413643674f0078a939de32e67a6c" translate="yes" xml:space="preserve">
          <source>Sets or modifies a value for a given header in a clone of the original instance. If the header already exists, its value is replaced with the given value in the returned object.</source>
          <target state="translated">元のインスタンスのクローン内の指定されたヘッダーの値を設定または変更します。ヘッダが既に存在する場合、その値は返されたオブジェクトの中の指定された値に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="2397a9be73764c91657ed2e8e9331d801f9f1ac9" translate="yes" xml:space="preserve">
          <source>Sets or overrides the provider for &lt;code&gt;MyService&lt;/code&gt; to the &lt;code&gt;MyMockService&lt;/code&gt; class.</source>
          <target state="translated">設定またはオーバーライドのプロバイダ &lt;code&gt;MyService&lt;/code&gt; に &lt;code&gt;MyMockService&lt;/code&gt; のクラスを。</target>
        </trans-unit>
        <trans-unit id="8017647d64f5622a2a2e980cc3fd8b7b73b0a18b" translate="yes" xml:space="preserve">
          <source>Sets or overrides the provider for &lt;code&gt;MyService&lt;/code&gt; to the &lt;code&gt;myFactory&lt;/code&gt; factory function.</source>
          <target state="translated">設定またはオーバーライドのプロバイダ &lt;code&gt;MyService&lt;/code&gt; に &lt;code&gt;myFactory&lt;/code&gt; ファクトリ関数。</target>
        </trans-unit>
        <trans-unit id="5359678b08dbb9c8698f03c822c55282927884df" translate="yes" xml:space="preserve">
          <source>Sets or overrides the provider for &lt;code&gt;MyValue&lt;/code&gt; to the value &lt;code&gt;41&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MyValue&lt;/code&gt; のプロバイダーを値 &lt;code&gt;41&lt;/code&gt; に設定またはオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="de7ff004dc80e320200e1a7704be95ad1bbacd64" translate="yes" xml:space="preserve">
          <source>Sets query parameters to the URL.</source>
          <target state="translated">クエリパラメータをURLに設定します。</target>
        </trans-unit>
        <trans-unit id="e6a02cc1912fbe5b1eaee5d99857f16a7dc50a8c" translate="yes" xml:space="preserve">
          <source>Sets the &quot;checked&quot; property on the input element.</source>
          <target state="translated">入力要素の &quot;checked &quot;プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="da002d54c6d3246f2cdc1e6a3aa0c856a808fe84" translate="yes" xml:space="preserve">
          <source>Sets the &quot;checked&quot; property value on the radio input element.</source>
          <target state="translated">ラジオ入力要素の &quot;checked &quot;プロパティ値を設定します。</target>
        </trans-unit>
        <trans-unit id="3135786e97ae04b89cdca47774eb2c8edccf52d1" translate="yes" xml:space="preserve">
          <source>Sets the &quot;disabled&quot; property on the input element.</source>
          <target state="translated">入力要素の &quot;disabled &quot;プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="21de3dd20a3bc2401e77a6b61d51fc64c7090752" translate="yes" xml:space="preserve">
          <source>Sets the &quot;disabled&quot; property on the range input element.</source>
          <target state="translated">範囲入力要素の &quot;disabled &quot;プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="4591735c1a7f3a834fcd4ccb9df9dabaae88da9d" translate="yes" xml:space="preserve">
          <source>Sets the &quot;disabled&quot; property on the select input element.</source>
          <target state="translated">select input要素の &quot;disabled &quot;プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="e141bb2dc2ee921e5386bed1af4e8e3ceecc01ac" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; on the radio input element and unchecks it.</source>
          <target state="translated">ラジオ入力要素の「値」を設定し、チェックを外します。</target>
        </trans-unit>
        <trans-unit id="9ce200a8d28d8ee1a9c60de06da13e10e7074909" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; property on one or of more of the select's options.</source>
          <target state="translated">セレクトの1つまたは複数のオプションの &quot;値 &quot;プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="83772bc6068280e41ba7718047fa8cc1aa198140" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; property on the input element.</source>
          <target state="translated">入力要素に &quot;value &quot;プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="edf6aa35e9c21401ffafce113e4d71886ad823b7" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; property on the input element. The &quot;selectedIndex&quot; property is also set if an ID is provided on the option element.</source>
          <target state="translated">input 要素に &quot;value &quot;プロパティを設定する。また、option要素にIDが与えられている場合には、&quot;selectedIndex &quot;プロパティを設定する。</target>
        </trans-unit>
        <trans-unit id="eba26ff48c5ca9a72408acad91118c751f9fb4bf" translate="yes" xml:space="preserve">
          <source>Sets the async validators that are active on this control. Calling this overwrites any existing async validators.</source>
          <target state="translated">このコントロールでアクティブな非同期バリデータを設定します。これを呼び出すと、既存の非同期バリデータが上書きされます。</target>
        </trans-unit>
        <trans-unit id="90149f8a604649d36656caedeaa2fa7f404a5cbc" translate="yes" xml:space="preserve">
          <source>Sets the default analytics enablement status for the project.</source>
          <target state="translated">プロジェクトのデフォルトの分析有効化ステータスを設定します。</target>
        </trans-unit>
        <trans-unit id="4f39aa7fa5866f335458aa91128888edd8ab9b33" translate="yes" xml:space="preserve">
          <source>Sets the hash fragment for the URL.</source>
          <target state="translated">URL のハッシュフラグメントを設定します。</target>
        </trans-unit>
        <trans-unit id="747797a1e092ad0fdf7555d5c08c92feda60fbfe" translate="yes" xml:space="preserve">
          <source>Sets the new value for the provided &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">提供された &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; ディレクティブの新しい値を設定します。</target>
        </trans-unit>
        <trans-unit id="662f5566c96ab5084f833c91a0950acff27445a7" translate="yes" xml:space="preserve">
          <source>Sets the new value for the provided &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">指定された &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; ディレクティブの新しい値を設定します。</target>
        </trans-unit>
        <trans-unit id="102090bbaec19cd5f3966d9344b4a79b6858332d" translate="yes" xml:space="preserve">
          <source>Sets the new value for the view model and emits an &lt;code&gt;ngModelChange&lt;/code&gt; event.</source>
          <target state="translated">ビューモデルの新しい値を設定し、 &lt;code&gt;ngModelChange&lt;/code&gt; イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="b8e4c683062158b6619cbd07649de6532a660474" translate="yes" xml:space="preserve">
          <source>Sets the parent of the control</source>
          <target state="translated">コントロールの親を設定します。</target>
        </trans-unit>
        <trans-unit id="14122933f8102c879cfceea80628ab8dd8faba10" translate="yes" xml:space="preserve">
          <source>Sets the position of the animation.</source>
          <target state="translated">アニメーションの位置を設定します。</target>
        </trans-unit>
        <trans-unit id="412ed66fceed305048c738bcb94b3d3f6db83ad5" translate="yes" xml:space="preserve">
          <source>Sets the synchronous validators that are active on this control. Calling this overwrites any existing sync validators.</source>
          <target state="translated">このコントロールでアクティブな同期バリデータを設定します。これを呼び出すと、既存の同期バリデータが上書きされます。</target>
        </trans-unit>
        <trans-unit id="a39e5878ffe7a1538d240efe308693b6c7032fa8" translate="yes" xml:space="preserve">
          <source>Sets the value for this &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の値を設定します。</target>
        </trans-unit>
        <trans-unit id="bae1f83b15a4a110189a04bd1602ff39e37141b1" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It accepts an array that matches the structure of the control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の値を設定します。コントロールの構造と一致する配列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="3afcf3e790c4814a63e533925614fde272d17fbb" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. It accepts an object that matches the structure of the group, with control names as keys.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の値を設定します。コントロール名をキーとして、グループの構造と一致するオブジェクトを受け入れます。</target>
        </trans-unit>
        <trans-unit id="d877d338ad8214880ec5d5a6a2e8b72b9e12d07d" translate="yes" xml:space="preserve">
          <source>Sets the value of the control. Abstract method (implemented in sub-classes).</source>
          <target state="translated">コントロールの値を設定します。抽象メソッド(サブクラスで実装)。</target>
        </trans-unit>
        <trans-unit id="3c9ce752c38de71c889aa96e373a758daa13e1cc" translate="yes" xml:space="preserve">
          <source>Sets up a location change listener to trigger &lt;code&gt;history.pushState&lt;/code&gt;. Works around the problem that &lt;code&gt;onPopState&lt;/code&gt; does not trigger &lt;code&gt;history.pushState&lt;/code&gt;. Must be called &lt;em&gt;after&lt;/em&gt; calling &lt;code&gt;UpgradeModule.bootstrap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;history.pushState&lt;/code&gt; をトリガーする場所変更リスナーを設定します。 &lt;code&gt;onPopState&lt;/code&gt; が &lt;code&gt;history.pushState&lt;/code&gt; をトリガーしないという問題を回避します。 &lt;code&gt;UpgradeModule.bootstrap&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;呼び出した&lt;em&gt;後に&lt;/em&gt;呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="daf2524202488a197baa7074fe2881fdd0894d6c" translate="yes" xml:space="preserve">
          <source>Sets up a new channel on the MessageBus. MUST be called before calling from or to on the channel. If runInZone is true then the source will emit events inside the angular zone and the sink will buffer messages and send only once the zone exits. if runInZone is false then the source will emit events inside the global zone and the sink will send messages immediately.</source>
          <target state="translated">MessageBus上に新しいチャンネルを設定します。チャンネルのfromまたはtoを呼び出す前に必ず呼び出さなければなりません。runInZoneがtrueの場合、ソースはアングルゾーン内でイベントを放出し、シンクはメッセージをバッファリングし、ゾーンが終了してから送信します。runInZoneがfalseの場合、ソースはグローバルゾーン内でイベントを放出し、シンクは直ちにメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="28c37f243460c3ab848efad572037128c4095293" translate="yes" xml:space="preserve">
          <source>Sets up a new channel on the MessageBusSink. MUST be called before calling to on the channel. If runInZone is true the sink will buffer messages and send only once the zone exits. if runInZone is false the sink will send messages immediately.</source>
          <target state="translated">MessageBusSinkに新しいチャンネルを設定します。チャンネルを呼び出す前に呼び出さなければなりません。runInZoneがtrueの場合、シンクはメッセージをバッファリングし、ゾーンが終了してから送信します。</target>
        </trans-unit>
        <trans-unit id="b713eca28144e3fd698b33f57e28971b26441d0c" translate="yes" xml:space="preserve">
          <source>Sets up a new channel on the MessageBusSource. MUST be called before calling from on the channel. If runInZone is true then the source will emit events inside the angular zone. if runInZone is false then the source will emit events inside the global zone.</source>
          <target state="translated">MessageBusSourceに新しいチャンネルを設定します。チャンネルから呼び出す前に必ず呼び出さなければなりません。runInZoneがtrueの場合、ソースは角度ゾーン内でイベントを放出します。</target>
        </trans-unit>
        <trans-unit id="989aad70fad315523dddb686f431b61c4e1b979e" translate="yes" xml:space="preserve">
          <source>Sets up the location change listener and performs the initial navigation.</source>
          <target state="translated">位置変更リスナーを設定し、最初のナビゲーションを実行します。</target>
        </trans-unit>
        <trans-unit id="e10ece235de8b79fbe9c667a5131988df7fc209c" translate="yes" xml:space="preserve">
          <source>Sets up the location change listener.</source>
          <target state="translated">位置変更リスナーを設定します。</target>
        </trans-unit>
        <trans-unit id="eedef89effaf95d3c7936187c744860cfa4d0c66" translate="yes" xml:space="preserve">
          <source>Sets up the router to be used for testing.</source>
          <target state="translated">テストに使用するルーターを設定します。</target>
        </trans-unit>
        <trans-unit id="11e0bea59e56f79670c39861d395c39c9a59d397" translate="yes" xml:space="preserve">
          <source>Sets up two-way data binding. Equivalent to: &lt;code&gt;&amp;lt;my-cmp [title]=&quot;name&quot; (titleChange)=&quot;name=$event&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">双方向データバインディングを設定します。同等： &lt;code&gt;&amp;lt;my-cmp [title]=&quot;name&quot; (titleChange)=&quot;name=$event&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6eb4c2d4d3750170085044ec1482b24d0a60b397" translate="yes" xml:space="preserve">
          <source>Setting component inputs</source>
          <target state="translated">コンポーネント入力の設定</target>
        </trans-unit>
        <trans-unit id="9b61d85a28211ede363fbf6ab2d3304348a6ae46" translate="yes" xml:space="preserve">
          <source>Setting component outputs</source>
          <target state="translated">コンポーネント出力の設定</target>
        </trans-unit>
        <trans-unit id="df5671cc8514926f1d118740d49af3cc59b3c235" translate="yes" xml:space="preserve">
          <source>Setting the ngModel name attribute through options</source>
          <target state="translated">オプションで ngModel の name 属性を設定する</target>
        </trans-unit>
        <trans-unit id="9ad7e9cc45b2ce82143e70a6114cab19d4c5156f" translate="yes" xml:space="preserve">
          <source>Setting the route parameters in the list view</source>
          <target state="translated">リストビューで経路パラメータを設定する</target>
        </trans-unit>
        <trans-unit id="7f58893d60ced0e9cf83b19c13175a67bcd2a2bd" translate="yes" xml:space="preserve">
          <source>Setting the update options</source>
          <target state="translated">更新オプションの設定</target>
        </trans-unit>
        <trans-unit id="52af24b7e1b67d0d1c334ca5f76c85ff390ef098" translate="yes" xml:space="preserve">
          <source>Setting up for a multi-project workspace</source>
          <target state="translated">マルチプロジェクトワークスペースの設定</target>
        </trans-unit>
        <trans-unit id="dbfb79dca5a3fa6f5492dcb0dbd760074c0a616b" translate="yes" xml:space="preserve">
          <source>Setting up the Local Environment and Workspace</source>
          <target state="translated">地域環境とワークスペースの設定</target>
        </trans-unit>
        <trans-unit id="2f9b39324341c8d17a913e140595007f008b9a69" translate="yes" xml:space="preserve">
          <source>Setting up the locale of your app</source>
          <target state="translated">アプリのロケールを設定する</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="3069b76decca4de1953abdd5da5d348417b5f47f" translate="yes" xml:space="preserve">
          <source>Setup (form model)</source>
          <target state="translated">セットアップ(フォームモデル</target>
        </trans-unit>
        <trans-unit id="317611c1fcbb4bcd2392365bc7cfce35166d7f65" translate="yes" xml:space="preserve">
          <source>Setup a callback function for your AngularJS bundle.</source>
          <target state="translated">AngularJSバンドルのコールバック関数を設定します。</target>
        </trans-unit>
        <trans-unit id="6569f8ceb2ac4c362c3c6ed73c3ed4ed88e2ae63" translate="yes" xml:space="preserve">
          <source>Setup for Upgrading from AngularJS</source>
          <target state="translated">AngularJSからアップグレードするための設定</target>
        </trans-unit>
        <trans-unit id="4d358b8c957d01b496bfc95e71038f36f44873ed" translate="yes" xml:space="preserve">
          <source>Setup in reactive forms</source>
          <target state="translated">リアクティブフォームでの設定</target>
        </trans-unit>
        <trans-unit id="e012efc5a4a9b0e21f2a00936b3667bbd9f54242" translate="yes" xml:space="preserve">
          <source>Setup in template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームでの設定</target>
        </trans-unit>
        <trans-unit id="db2e8af4bcf86370e056007702c205f71c33ef32" translate="yes" xml:space="preserve">
          <source>Setup with module imports</source>
          <target state="translated">モジュールのインポートによるセットアップ</target>
        </trans-unit>
        <trans-unit id="18272a259bf7d280b0ab91fe4bc2e08ba6fb586c" translate="yes" xml:space="preserve">
          <source>Setup, build, and deployment configuration</source>
          <target state="translated">セットアップ、ビルド、デプロイの設定</target>
        </trans-unit>
        <trans-unit id="5346a85c4699994813d2e863322e902611969b97" translate="yes" xml:space="preserve">
          <source>Share information across HTML elements using template reference variables.</source>
          <target state="translated">テンプレート参照変数を使用して、HTML要素間で情報を共有します。</target>
        </trans-unit>
        <trans-unit id="ab04c254355ee15b0d61dd39f23e2d299fb5f9df" translate="yes" xml:space="preserve">
          <source>Share this URL with a friend or colleague.</source>
          <target state="translated">このURLを友人や同僚と共有しましょう。</target>
        </trans-unit>
        <trans-unit id="7af3838e8ea6ac8d686935f882e1db1eaa0a1b28" translate="yes" xml:space="preserve">
          <source>Share your application</source>
          <target state="translated">アプリケーションを共有する</target>
        </trans-unit>
        <trans-unit id="6f17cb939aa9fc37636c921723119fbcfd9f5ca7" translate="yes" xml:space="preserve">
          <source>Shared feature module</source>
          <target state="translated">共有機能モジュール</target>
        </trans-unit>
        <trans-unit id="e387c96cf6c24ae5e9b8d657798469f0a1d4311e" translate="yes" xml:space="preserve">
          <source>Sharing Modules</source>
          <target state="translated">共有モジュール</target>
        </trans-unit>
        <trans-unit id="0fe7d82f25a3015040a206e54f9c1d3a9717c4c4" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>
        </trans-unit>
        <trans-unit id="10d6a094ec382ffc7598dae6966c496f706027f4" translate="yes" xml:space="preserve">
          <source>Short Form</source>
          <target state="translated">ショートフォーム</target>
        </trans-unit>
        <trans-unit id="7fd3c0e136d11edf17bca2d957fe2ddaeba002c5" translate="yes" xml:space="preserve">
          <source>Short localized GMT format</source>
          <target state="translated">地域化された短いGMT形式</target>
        </trans-unit>
        <trans-unit id="879d7ba413f699e986e20c3d3d898c08a3a9caf7" translate="yes" xml:space="preserve">
          <source>Short specific non location format (fallback to O)</source>
          <target state="translated">短い特定の非位置フォーマット(Oへのフォールバック</target>
        </trans-unit>
        <trans-unit id="5137dbab0b2003506a287bb55dc82e8e48713edb" translate="yes" xml:space="preserve">
          <source>Shorthand for &quot;--configuration=production&quot;. When true, sets the build configuration to the production target. By default, the production target is set up in the workspace configuration such that all builds make use of bundling, limited tree-shaking, and also limited dead code elimination.</source>
          <target state="translated">-configuration=production&quot; の略語。true の場合、ビルド構成をプロダクションターゲットに設定します。デフォルトでは、すべてのビルドでバンドル化、限定的なツリーシェイク、限定的なデッドコード排除を利用するように、ワークスペース設定でプロダクションターゲットが設定されています。</target>
        </trans-unit>
        <trans-unit id="60047bb09af867b84694f1ab1edd98f509d3f2ea" translate="yes" xml:space="preserve">
          <source>Shorthand form with &quot;then&quot; and &quot;else&quot; blocks:</source>
          <target state="translated">&quot;then &quot;と &quot;else &quot;のブロックを持つ短縮形。</target>
        </trans-unit>
        <trans-unit id="48b3b304ee8a75837d7e1a2198272bba7db1b706" translate="yes" xml:space="preserve">
          <source>Shorthand syntax</source>
          <target state="translated">速記構文</target>
        </trans-unit>
        <trans-unit id="ad6e919a37c2bb15acd1a3c92bceed37af0032e9" translate="yes" xml:space="preserve">
          <source>Shortly, you'll extend the &lt;code&gt;AdminDashboardComponent&lt;/code&gt; to inject this service and display its &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">まもなく、あなたは拡張します &lt;code&gt;AdminDashboardComponent&lt;/code&gt; このサービスを注入し、その表示する &lt;code&gt;preloadedModules&lt;/code&gt; の配列を。</target>
        </trans-unit>
        <trans-unit id="41078447ba168b4151c1f22c7d612b9d43abb567" translate="yes" xml:space="preserve">
          <source>Should I add application-wide providers to the root &lt;code&gt;AppModule&lt;/code&gt; or the root &lt;code&gt;AppComponent&lt;/code&gt;?</source>
          <target state="translated">私はルートにアプリケーション全体のプロバイダを追加する必要があります &lt;code&gt;AppModule&lt;/code&gt; またはルート &lt;code&gt;AppComponent&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="c55683c58f4cac80dad4e0811c2a2aedcd1ec133" translate="yes" xml:space="preserve">
          <source>Should I add other providers to a module or a component?</source>
          <target state="translated">モジュールやコンポーネントに他のプロバイダを追加する必要がありますか?</target>
        </trans-unit>
        <trans-unit id="2eca7c86d3882f8da12c2dee981a83d967d0bef1" translate="yes" xml:space="preserve">
          <source>Should I import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートする必要がありますか？</target>
        </trans-unit>
        <trans-unit id="ba5ab6cd6ad45ecc5b3b9258f0733e39ba06685a" translate="yes" xml:space="preserve">
          <source>Show All Hide All</source>
          <target state="translated">すべてを表示 すべてを隠す</target>
        </trans-unit>
        <trans-unit id="98ed9e62ac83f8affb24bdfb771d4c78acfc46cc" translate="yes" xml:space="preserve">
          <source>Show a warning when deploy-url/base-href use unsupported serve path values.</source>
          <target state="translated">deploy-url/base-href がサポートされていないサーブパスの値を使用している場合に警告を表示するようにしました。</target>
        </trans-unit>
        <trans-unit id="fee47023d6c1d39db9bc276ae03a1833249f3ca3" translate="yes" xml:space="preserve">
          <source>Show a warning when the --hmr option is enabled.</source>
          <target state="translated">オプション --hmr が有効な場合に警告を表示する。</target>
        </trans-unit>
        <trans-unit id="595aa38adc2f8b9fed110d5bfa2f70ca86323d2f" translate="yes" xml:space="preserve">
          <source>Show and hide validation error messages</source>
          <target state="translated">検証エラーメッセージの表示と非表示</target>
        </trans-unit>
        <trans-unit id="d1d3bf017782ea688647aff234d3d9891460821f" translate="yes" xml:space="preserve">
          <source>Show and hide validation-error messages.</source>
          <target state="translated">検証エラーメッセージの表示と非表示を切り替えます。</target>
        </trans-unit>
        <trans-unit id="d525989db2de63003e9d7ac134ab8213bd3059a2" translate="yes" xml:space="preserve">
          <source>Show circular dependency warnings on builds.</source>
          <target state="translated">ビルド時に循環する依存関係の警告を表示します。</target>
        </trans-unit>
        <trans-unit id="2a04fec163fa9ffa3e3c2220918566a6b06b6544" translate="yes" xml:space="preserve">
          <source>Show messages</source>
          <target state="translated">メッセージを表示する</target>
        </trans-unit>
        <trans-unit id="116bdf02eaa47b1dc3191504a363e4dec2a90998" translate="yes" xml:space="preserve">
          <source>Show output text.</source>
          <target state="translated">出力テキストを表示します。</target>
        </trans-unit>
        <trans-unit id="1d1c6ac7f305d28e5a2c67c497211de8cbcd51aa" translate="yes" xml:space="preserve">
          <source>Show the &lt;code&gt;HeroDetailComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; を表示する</target>
        </trans-unit>
        <trans-unit id="937c9e3d88b032267b4ce7212d8f4a304d4bd484" translate="yes" xml:space="preserve">
          <source>Show the &lt;code&gt;HeroesComponent&lt;/code&gt; view</source>
          <target state="translated">表示 &lt;code&gt;HeroesComponent&lt;/code&gt; のビューを</target>
        </trans-unit>
        <trans-unit id="fbe16ce7506b8430e45fd2d6aa176fdb23bdf664" translate="yes" xml:space="preserve">
          <source>Show the first page quickly</source>
          <target state="translated">最初のページを素早く表示</target>
        </trans-unit>
        <trans-unit id="d46fb55d5ef3f5ca69002f78750e89cc11f12836" translate="yes" xml:space="preserve">
          <source>Show the first page quickly with a &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint&quot;&gt;first-contentful paint (FCP)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint&quot;&gt;最初のコンテンツペイント（FCP）で&lt;/a&gt;最初のページをすばやく表示する</target>
        </trans-unit>
        <trans-unit id="3ac4c102351575a38b297d787d9721977a54ee21" translate="yes" xml:space="preserve">
          <source>Show the hero</source>
          <target state="translated">英雄を見せる</target>
        </trans-unit>
        <trans-unit id="0b09aa05d4dbcc3294f3d100b839df79351491b8" translate="yes" xml:space="preserve">
          <source>Show the hero object</source>
          <target state="translated">ヒーローオブジェクトを表示する</target>
        </trans-unit>
        <trans-unit id="c75dd76780712202bd0adeba943f333c0a6b3e23" translate="yes" xml:space="preserve">
          <source>Show/hide vs. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; と表示/非表示</target>
        </trans-unit>
        <trans-unit id="cef936621fc4177f5bc8e6ee413ffd5eaf576c1d" translate="yes" xml:space="preserve">
          <source>Showing an alternative template using &lt;code&gt;else&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; を使用して代替テンプレートを表示する</target>
        </trans-unit>
        <trans-unit id="45143a2ebe5a96d7ce5da2ddfd0ac908f7561a03" translate="yes" xml:space="preserve">
          <source>Showing an array property with &lt;strong&gt;*ngFor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;* ngForで&lt;/strong&gt;配列プロパティを&lt;strong&gt;表示する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44957916405bf69ccfa14f773068cbb0880a98b4" translate="yes" xml:space="preserve">
          <source>Showing component properties with interpolation</source>
          <target state="translated">補間を使ってコンポーネントのプロパティを表示する</target>
        </trans-unit>
        <trans-unit id="2a15b53f83d98c4a71991f1f90c66bebe097321d" translate="yes" xml:space="preserve">
          <source>Shows a help message for this command in the console.</source>
          <target state="translated">このコマンドのヘルプメッセージをコンソールに表示します。</target>
        </trans-unit>
        <trans-unit id="479f16fa7274887e86eb0096b93900ffb1452759" translate="yes" xml:space="preserve">
          <source>Shows how to project external content into a component and how to distinguish projected content from a component's view children. Demonstrates the &lt;code&gt;ngAfterContentInit&lt;/code&gt; and &lt;code&gt;ngAfterContentChecked&lt;/code&gt; hooks.</source>
          <target state="translated">外部コンテンツをコンポーネントに投影する方法と、投影されたコンテンツをコンポーネントのビューの子から区別する方法を示します。デモ &lt;code&gt;ngAfterContentInit&lt;/code&gt; と &lt;code&gt;ngAfterContentChecked&lt;/code&gt; フックを。</target>
        </trans-unit>
        <trans-unit id="b76af8097f5f260b3980092d825c8c219994a49b" translate="yes" xml:space="preserve">
          <source>Shows what Angular means by a &lt;em&gt;view&lt;/em&gt;. Demonstrates the &lt;code&gt;ngAfterViewInit&lt;/code&gt; and &lt;code&gt;ngAfterViewChecked&lt;/code&gt; hooks.</source>
          <target state="translated">Angularの意味を&lt;em&gt;ビューで示します&lt;/em&gt;。デモ &lt;code&gt;ngAfterViewInit&lt;/code&gt; と &lt;code&gt;ngAfterViewChecked&lt;/code&gt; フックを。</target>
        </trans-unit>
        <trans-unit id="197f7cb6804fc98916b8c143af535692e5856899" translate="yes" xml:space="preserve">
          <source>Shut down &lt;code&gt;http-server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; をシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="80c188a60dfe5e25b9e86ad3e1121715c6fefc2a" translate="yes" xml:space="preserve">
          <source>Sign for negative numbers. Example: -23</source>
          <target state="translated">負の数を表す記号。例:-23</target>
        </trans-unit>
        <trans-unit id="8f61988069ac7f7f4c5d04d0c6276c643329b712" translate="yes" xml:space="preserve">
          <source>Sign for percentage (out of 100). Example: 23.4%</source>
          <target state="translated">符号はパーセンテージ(100点満点中)を表します。例:23.4%の場合</target>
        </trans-unit>
        <trans-unit id="e35928f49dad3847e8aa9453d2820a74b253e2a9" translate="yes" xml:space="preserve">
          <source>Sign for permille (out of 1000). Example: 23.4&amp;permil;</source>
          <target state="translated">パーミルにサインします（1000のうち）。例：23.4&amp;permil;</target>
        </trans-unit>
        <trans-unit id="9a1a477292686ab46d2883534ba2c37ca337a194" translate="yes" xml:space="preserve">
          <source>Sign for positive numbers. Example: +23</source>
          <target state="translated">正の数を表す記号。例.+23</target>
        </trans-unit>
        <trans-unit id="2c4b77279f9c3a8d8d6ce565db42f31dc1ebcaaa" translate="yes" xml:space="preserve">
          <source>Sign up for a firebase account on &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://firebase.google.com/&quot;&gt;FirebaseでFirebase&lt;/a&gt;アカウントにサインアップします。</target>
        </trans-unit>
        <trans-unit id="597aee51bf1323c5684a20b90d36ad9cbffd87c2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;assetGroups&lt;/code&gt;, every data group has a &lt;code&gt;name&lt;/code&gt; which uniquely identifies it.</source>
          <target state="translated">&lt;code&gt;assetGroups&lt;/code&gt; と同様に、すべてのデータグループには、それを一意に識別する &lt;code&gt;name&lt;/code&gt; あります。</target>
        </trans-unit>
        <trans-unit id="0fd958e5fcafb24cbe43b49f4da58ce49f0d6f36" translate="yes" xml:space="preserve">
          <source>Similarly, if you add &lt;code&gt;&amp;lt;base href='/my/app'/&amp;gt;&lt;/code&gt; to the document and call &lt;code&gt;location.go('/foo')&lt;/code&gt;, the browser's URL will become &lt;code&gt;example.com/my/app/foo&lt;/code&gt;.</source>
          <target state="translated">同様に、ドキュメントに &lt;code&gt;&amp;lt;base href='/my/app'/&amp;gt;&lt;/code&gt; を追加して &lt;code&gt;location.go('/foo')&lt;/code&gt; を呼び出すと、ブラウザのURLは &lt;code&gt;example.com/my/app/foo&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="3ce6436140defa30b543c86237b650bfff348619" translate="yes" xml:space="preserve">
          <source>Similarly, if your library code depends on a service, that service needs to be migrated.</source>
          <target state="translated">同様に、ライブラリのコードがサービスに依存している場合は、そのサービスを移行する必要があります。</target>
        </trans-unit>
        <trans-unit id="fab82cd8c27f1b8cc74de2679b3ed8ed4b241092" translate="yes" xml:space="preserve">
          <source>Similarly, without mouse or keyboard events, a server-side app can't rely on a user clicking a button to show a component. The app must determine what to render based solely on the incoming client request. This is a good argument for making the app &lt;a href=&quot;router&quot;&gt;routable&lt;/a&gt;.</source>
          <target state="translated">同様に、マウスまたはキーボードのイベントがない場合、サーバー側のアプリは、ユーザーがボタンをクリックしてコンポーネントを表示することに依存できません。アプリは、受信するクライアント要求のみに基づいて、何をレンダリングするかを決定する必要があります。これは、アプリを&lt;a href=&quot;router&quot;&gt;ルーティング可能にする&lt;/a&gt;ための良い議論です。</target>
        </trans-unit>
        <trans-unit id="2cae9cec2b6c68d96f8336a324d888f726582b3e" translate="yes" xml:space="preserve">
          <source>Similarly, you can add a prompt to allow the user to decide whether the schematic will use color when executing its hello action. The schema with both prompts would be as follows.</source>
          <target state="translated">同様に、hello アクションを実行する際にカラーを使用するかどうかをユーザが決定できるようにプロンプトを追加することもできます。両方のプロンプトを使用したスキーマは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="de72ea9e60d3b0389fb7873c1d21268b088fa6d4" translate="yes" xml:space="preserve">
          <source>Simple</source>
          <target state="translated">Simple</target>
        </trans-unit>
        <trans-unit id="7efef6f32b9aee814f5e770483cd5c591105998c" translate="yes" xml:space="preserve">
          <source>Simple Configuration</source>
          <target state="translated">簡単な設定</target>
        </trans-unit>
        <trans-unit id="c15fa4b758d35cc97d9959bcc45edd294156d605" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="60607597b489cd2185394b7c6a6087b71ccc8b61" translate="yes" xml:space="preserve">
          <source>Simple as this is, you decide to add a test to confirm that component actually displays the right content where you think it should.</source>
          <target state="translated">このように簡単な場合は、コンポーネントが実際に正しい内容を表示しているかどうかを確認するためにテストを追加することにします。</target>
        </trans-unit>
        <trans-unit id="494dd9e99d48bafc3b98a35ff05944ed91b634e5" translate="yes" xml:space="preserve">
          <source>Simple deployment options</source>
          <target state="translated">シンプルな展開オプション</target>
        </trans-unit>
        <trans-unit id="19e643b42346b00691c93efb8f021c573d8605fe" translate="yes" xml:space="preserve">
          <source>Simple form validation</source>
          <target state="translated">シンプルなフォームバリデーション</target>
        </trans-unit>
        <trans-unit id="e5c3ae4da7e11d3fa7d67487f95d2ce84a38ba79" translate="yes" xml:space="preserve">
          <source>Simple form with expanded syntax:</source>
          <target state="translated">構文を拡張したシンプルなフォーム。</target>
        </trans-unit>
        <trans-unit id="d5334c5e164751baa720ada75302e4392b7ad9d7" translate="yes" xml:space="preserve">
          <source>Simple form with shorthand syntax:</source>
          <target state="translated">速記構文を持つシンプルなフォーム。</target>
        </trans-unit>
        <trans-unit id="4b80d81a8d2b3bc5c4a4d9cc396c5845bbf61518" translate="yes" xml:space="preserve">
          <source>SimpleChange</source>
          <target state="translated">SimpleChange</target>
        </trans-unit>
        <trans-unit id="e1500412a75fd0228298e32cacbe1fdf64be2796" translate="yes" xml:space="preserve">
          <source>SimpleChanges</source>
          <target state="translated">SimpleChanges</target>
        </trans-unit>
        <trans-unit id="7e746b9782ec7ce9bb91bd6b5f03eb84bb7be5a7" translate="yes" xml:space="preserve">
          <source>Simplicity</source>
          <target state="translated">Simplicity</target>
        </trans-unit>
        <trans-unit id="83ce935d34fce63b53340c34a2dd9b66f03f6976" translate="yes" xml:space="preserve">
          <source>Simulate a data server</source>
          <target state="translated">データサーバーのシミュレーション</target>
        </trans-unit>
        <trans-unit id="b1c23ba04df4a3b9f6db352b18230ce0d349d205" translate="yes" xml:space="preserve">
          <source>Simulate an update by adding a button to the template to update the user profile on demand.</source>
          <target state="translated">テンプレートにボタンを追加して、必要に応じてユーザープロファイルを更新することで、更新をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="6e969b818a3d3ee8b114032d6d34b6219a27cb74" translate="yes" xml:space="preserve">
          <source>Simulates the asynchronous passage of time for the timers in the fakeAsync zone by draining the macrotask queue until it is empty. The returned value is the milliseconds of time that would have been elapsed.</source>
          <target state="translated">fakeAsyncゾーン内のタイマーの非同期的な時間経過をシミュレートします。返される値は、経過したであろう時間のミリ秒です。</target>
        </trans-unit>
        <trans-unit id="84da2c8a5ac23d25052a8266f6eced994831d26b" translate="yes" xml:space="preserve">
          <source>Simulates the asynchronous passage of time for the timers in the fakeAsync zone.</source>
          <target state="translated">fakeAsyncゾーンのタイマーの非同期の時間経過をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="f067c24deb3c684333a746de5b20658653805d4b" translate="yes" xml:space="preserve">
          <source>Simulates the passage of time and the completion of pending asynchronous activities by flushing both &lt;em&gt;timer&lt;/em&gt; and &lt;em&gt;micro-task&lt;/em&gt; queues within the &lt;em&gt;fakeAsync test zone&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;fakeAsyncテストゾーン&lt;/em&gt;内の&lt;em&gt;タイマー&lt;/em&gt;キューと&lt;em&gt;マイクロタスク&lt;/em&gt;キューの両方をフラッシュすることにより、時間の経過と保留中の非同期アクティビティの完了をシミュレートします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="728eba54e4626c0dc386906cba6f1dec9f58eda8" translate="yes" xml:space="preserve">
          <source>Simulating a network issue</source>
          <target state="translated">ネットワーク問題のシミュレーション</target>
        </trans-unit>
        <trans-unit id="5b7b5254fc84b183cac494e5bc843bf74e5ef462" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; can't do anything with an &lt;code&gt;Observable&lt;/code&gt;, use the pipe character (&lt;code&gt;|&lt;/code&gt;) followed by &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt;. This identifies Angular's &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; and subscribes to an &lt;code&gt;Observable&lt;/code&gt; automatically so you won't have to do so in the component class.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;Observable&lt;/code&gt; では何もできないので、パイプ文字（ &lt;code&gt;|&lt;/code&gt; ）に続けて &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; を使用します。これにより、Angularの &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; が識別され、 &lt;code&gt;Observable&lt;/code&gt; が自動的にサブスクライブされるため、コンポーネントクラスでそうする必要はありません。</target>
        </trans-unit>
        <trans-unit id="ccc511f20164ec8b3ea1363b14ef6d787beae9b6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;AppRoutingModule&lt;/code&gt; already imports &lt;code&gt;HeroesComponent&lt;/code&gt;, you can use it in the &lt;code&gt;routes&lt;/code&gt; array:</source>
          <target state="translated">以来 &lt;code&gt;AppRoutingModule&lt;/code&gt; がすでにインポート &lt;code&gt;HeroesComponent&lt;/code&gt; を、あなたはそれを使用することができます &lt;code&gt;routes&lt;/code&gt; 配列：</target>
        </trans-unit>
        <trans-unit id="962544e4463cecaa2a5eccd0846f17ac5676aa3d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;HostComponent&lt;/code&gt; has &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; in its constructor, no matter what the parent of &lt;code&gt;HostComponent&lt;/code&gt; might have as a &lt;code&gt;flower.emoji&lt;/code&gt; value, the &lt;code&gt;HostComponent&lt;/code&gt; will use &lt;code&gt;🌼&lt;/code&gt; (yellow flower).</source>
          <target state="translated">以来 &lt;code&gt;HostComponent&lt;/code&gt; が持っている &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; そのコンストラクタで、親の何に関係なく &lt;code&gt;HostComponent&lt;/code&gt; が通りかもしれない &lt;code&gt;flower.emoji&lt;/code&gt; 値は、 &lt;code&gt;HostComponent&lt;/code&gt; が使用されます &lt;code&gt;🌼&lt;/code&gt; （黄色の花を）。</target>
        </trans-unit>
        <trans-unit id="1c1acbcf4a03f4f6cb03e96d8e61627a3240b9ef" translate="yes" xml:space="preserve">
          <source>Since TypeScript is a superset of ECMAScript 2015, which in turn is a superset of ECMAScript 5, &quot;switching&quot; to TypeScript doesn't necessarily require anything more than installing the TypeScript compiler and renaming files from &lt;code&gt;*.js&lt;/code&gt; to &lt;code&gt;*.ts&lt;/code&gt;. But just doing that is not hugely useful or exciting, of course. Additional steps like the following can give us much more bang for the buck:</source>
          <target state="translated">TypeScriptはECMAScript 2015のスーパーセットであり、ECMAScript 5のスーパーセットであるため、TypeScriptへの「切り替え」には、TypeScriptコンパイラーのインストールと &lt;code&gt;*.js&lt;/code&gt; から &lt;code&gt;*.ts&lt;/code&gt; へのファイル名の変更以外の必要はありません。しかし、それを行うだけでは、もちろん、それほど有用でもエキサイティングでもありません。次のような追加の手順により、費用を大幅に増やすことができます。</target>
        </trans-unit>
        <trans-unit id="46c4eb1abae75523ff8d7c6616050a503945e28d" translate="yes" xml:space="preserve">
          <source>Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a serialized tree. UrlTree is a data structure that provides a lot of affordances in dealing with URLs</source>
          <target state="translated">ルータの状態はツリーであり、URLはシリアル化された状態以外の何物でもないので、URLはシリアル化されたツリーです。UrlTreeはURLを扱う上で多くの利点を提供するデータ構造です。</target>
        </trans-unit>
        <trans-unit id="bba2044862c3385a2d83d2b95012ec936c86053a" translate="yes" xml:space="preserve">
          <source>Since an Angular application can't be bootstrapped on the entire HTML document (&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag) it is not possible to bind to the &lt;code&gt;text&lt;/code&gt; property of the &lt;code&gt;HTMLTitleElement&lt;/code&gt; elements (representing the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag). Instead, this service can be used to set and get the current title value.</source>
          <target state="translated">AngularアプリケーションはHTMLドキュメント全体（ &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; タグ）でブートストラップできないため、 &lt;code&gt;HTMLTitleElement&lt;/code&gt; 要素（ &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; タグを表す）の &lt;code&gt;text&lt;/code&gt; プロパティにバインドすることはできません。代わりに、このサービスを使用して、現在のタイトル値を設定および取得できます。</target>
        </trans-unit>
        <trans-unit id="5b4015d56f483550026621efe502a07ebdf32347" translate="yes" xml:space="preserve">
          <source>Since the HTML templates of Angular components will be loaded as well, you must help Karma out a bit so that it can route them to the right paths:</source>
          <target state="translated">AngularコンポーネントのHTMLテンプレートも読み込まれるので、Karmaが正しいパスに誘導できるように少し手助けをする必要があります。</target>
        </trans-unit>
        <trans-unit id="3beea211f1804990fa205b0b8d4b2454da8609e2" translate="yes" xml:space="preserve">
          <source>Since the built-in validators won't always match the exact use case of your application, sometimes you'll want to create a custom validator.</source>
          <target state="translated">組み込みのバリデータはアプリケーションのユースケースに必ずしもマッチするとは限らないので、カスタムバリデータを作りたくなることもあるでしょう。</target>
        </trans-unit>
        <trans-unit id="06f43cc29ccce4b6c6c49a26d957d26e51ac324b" translate="yes" xml:space="preserve">
          <source>Since there is no safe navigation operator and &lt;code&gt;nullItem&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, JavaScript and Angular would throw a &lt;code&gt;null&lt;/code&gt; reference error and break the rendering process of Angular:</source>
          <target state="translated">安全なナビゲーション演算子がなく、 &lt;code&gt;nullItem&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; であるため、JavaScriptとAngularは &lt;code&gt;null&lt;/code&gt; 参照エラーをスローし、Angular のレンダリングプロセスを中断します。</target>
        </trans-unit>
        <trans-unit id="d4292af90c079ddd0bad097dd58e04a53ac8506a" translate="yes" xml:space="preserve">
          <source>Since this is an AngularJS template, you can still use other AngularJS directives on the element, even though it has Angular binding attributes on it. For example, you can easily make multiple copies of the component using &lt;code&gt;ng-repeat&lt;/code&gt;:</source>
          <target state="translated">これはAngularJSテンプレートなので、Angularバインディング属性が設定されていても、要素で他のAngularJSディレクティブを使用できます。たとえば、 &lt;code&gt;ng-repeat&lt;/code&gt; を使用してコンポーネントの複数のコピーを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="a4f54ab1d843d6f199cc22382be08aad91e7faa7" translate="yes" xml:space="preserve">
          <source>Since you're going to be writing Angular code in TypeScript, it makes sense to bring in the TypeScript compiler even before you begin upgrading.</source>
          <target state="translated">AngularのコードをTypeScriptで書くことになるので、アップグレードを始める前にTypeScriptコンパイラを導入するのは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="b349521f8a5d735f2d1484bb3f738b4e8884f662" translate="yes" xml:space="preserve">
          <source>Single build</source>
          <target state="translated">単一の造り</target>
        </trans-unit>
        <trans-unit id="a5b8565636523cbc8d6b4fc97a65c9df60070482" translate="yes" xml:space="preserve">
          <source>Single build w/Conditional Polyfills</source>
          <target state="translated">条件付きポリフィルを使用したシングルビルド</target>
        </trans-unit>
        <trans-unit id="1fb523a0b4b744c4edc13339d42faf4f9861e15c" translate="yes" xml:space="preserve">
          <source>Single responsibility</source>
          <target state="translated">単一の責任</target>
        </trans-unit>
        <trans-unit id="c4e0470b624e71a21eece402feb2b959eb1a8809" translate="yes" xml:space="preserve">
          <source>Singleton services</source>
          <target state="translated">シングルトンサービス</target>
        </trans-unit>
        <trans-unit id="5087b8ce7b49664f4457f35e41654c6d9ce03a21" translate="yes" xml:space="preserve">
          <source>Size*</source>
          <target state="translated">Size*</target>
        </trans-unit>
        <trans-unit id="589b1dba4f995e2f0cb716ee31ddaf7065df280e" translate="yes" xml:space="preserve">
          <source>Skip installing dependency packages.</source>
          <target state="translated">依存パッケージのインストールをスキップします。</target>
        </trans-unit>
        <trans-unit id="60e0af83d452bdfc8e29942e8af2bc2cddc128ee" translate="yes" xml:space="preserve">
          <source>Skip the node that is requesting injection.</source>
          <target state="translated">インジェクションを要求しているノードをスキップします。</target>
        </trans-unit>
        <trans-unit id="275ea403ef1e8d6f4d8ca0f67913d7977992fb07" translate="yes" xml:space="preserve">
          <source>SkipSelf</source>
          <target state="translated">SkipSelf</target>
        </trans-unit>
        <trans-unit id="d146630209145a11dfca372720f62ac79a0f4f04" translate="yes" xml:space="preserve">
          <source>SlicePipe</source>
          <target state="translated">SlicePipe</target>
        </trans-unit>
        <trans-unit id="bfb9fc3d9e97f6ca55abf4fa8493e4cc86726842" translate="yes" xml:space="preserve">
          <source>Slides in the new view by animating the view with an easing function and duration.  This animation results in the &lt;code&gt;about&lt;/code&gt; view sliding from the left to right.</source>
          <target state="translated">イージング関数と継続時間を使用してビューをアニメーション化することにより、新しいビューでスライドします。このアニメーションの結果、 &lt;code&gt;about&lt;/code&gt; ビューが左から右にスライドします。</target>
        </trans-unit>
        <trans-unit id="b35160803242937e8123896c690c7d5ab471c973" translate="yes" xml:space="preserve">
          <source>Small functions</source>
          <target state="translated">小さな機能</target>
        </trans-unit>
        <trans-unit id="b37108b4eaa6fc62538c54def3b8931af9e3c84a" translate="yes" xml:space="preserve">
          <source>Smashing Magazine</source>
          <target state="translated">スマッシングマガジン</target>
        </trans-unit>
        <trans-unit id="7a6aa5d0640936328c9339939e57443885436a50" translate="yes" xml:space="preserve">
          <source>So far, we've learned simple animations of single HTML elements. Angular also lets you animate coordinated sequences, such as an entire grid or list of elements as they enter and leave a page. You can choose to run multiple animations in parallel, or run discrete animations sequentially, one following another.</source>
          <target state="translated">ここまでは、単一のHTML要素の簡単なアニメーションについて学びました。Angularでは、グリッド全体や要素のリストなど、ページに入ったり出たりする際に連動したシーケンスをアニメーションさせることもできます。複数のアニメーションを並行して実行することも、個別のアニメーションを連続して実行することもできます。</target>
        </trans-unit>
        <trans-unit id="5b6d23d1781fe83c088bfda2556066367800b3d8" translate="yes" xml:space="preserve">
          <source>So instead, you'll update the empty path route in &lt;code&gt;app-routing.module.ts&lt;/code&gt; to redirect to &lt;code&gt;/superheroes&lt;/code&gt;.</source>
          <target state="translated">そのため、代わりに &lt;code&gt;app-routing.module.ts&lt;/code&gt; の空のパスルートを更新して &lt;code&gt;/superheroes&lt;/code&gt; にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="bb0fb574accf6c56d426a9e2dd7ba1d2736f6193" translate="yes" xml:space="preserve">
          <source>So normally a hybrid application begins life as an AngularJS application, and it is AngularJS that processes the root template, e.g. the index.html. Angular then steps into the picture when an Angular component is used somewhere in an AngularJS template. That component's template will then be managed by Angular, and it may contain any number of Angular components and directives.</source>
          <target state="translated">通常、ハイブリッドアプリケーションはAngularJSアプリケーションとして始まり、ルートテンプレート、例えばindex.htmlなどを処理するのはAngularJSです。AngularJSのテンプレートのどこかでAngularコンポーネントが使われると、Angularが介入します。そのコンポーネントのテンプレートはAngularによって管理され、Angularのコンポーネントやディレクティブがいくつでも含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="9aa54b0dbadeeee6325c29cf3df6a0f16f99ee9b" translate="yes" xml:space="preserve">
          <source>So, you can write an Angular component and then use it from AngularJS code. This is useful when you start to migrate from lower-level components and work your way up. But in some cases it is more convenient to do things in the opposite order: To start with higher-level components and work your way down. This too can be done using the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt;. You can &lt;em&gt;upgrade&lt;/em&gt; AngularJS component directives and then use them from Angular.</source>
          <target state="translated">したがって、Angularコンポーネントを記述してから、AngularJSコードから使用できます。これは、下位レベルのコンポーネントからの移行を開始して作業を進めるときに役立ちます。しかし、逆の順序で行う方が便利な場合もあります。より高いレベルのコンポーネントから始めて、下に向かって作業することです。これも &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; を使用して行うことができます。AngularJSコンポーネントディレクティブを&lt;em&gt;アップグレード&lt;/em&gt;してから、Angularから使用でき&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b4f91bdb0e1b0e40fff4debcd0fea22f1999f491" translate="yes" xml:space="preserve">
          <source>Solution</source>
          <target state="translated">Solution</target>
        </trans-unit>
        <trans-unit id="2633258ffd3e68e79b7b1908dfbf24b90bb423a4" translate="yes" xml:space="preserve">
          <source>Some DOM properties don't have corresponding attributes; for example, &lt;code&gt;textContent&lt;/code&gt;.</source>
          <target state="translated">一部のDOMプロパティには対応する属性がありません。たとえば、 &lt;code&gt;textContent&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6ae4edc8a260d4601ea726f435b0a2e18cdf39f4" translate="yes" xml:space="preserve">
          <source>Some HTML attributes don't have corresponding properties; for example, &lt;code&gt;aria-*&lt;/code&gt;.</source>
          <target state="translated">一部のHTML属性には対応するプロパティがありません。たとえば、 &lt;code&gt;aria-*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c991dbf4394dac4f496aa181829243968713642" translate="yes" xml:space="preserve">
          <source>Some NgModules and their services should be loaded only once by the root &lt;code&gt;AppModule&lt;/code&gt;. Importing the module a second time by lazy loading a module could &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;produce errant behavior&lt;/a&gt; that may be difficult to detect and diagnose.</source>
          <target state="translated">一部のNgModuleとそのサービスは、ルート &lt;code&gt;AppModule&lt;/code&gt; によって一度だけロードする必要があります。モジュールを遅延読み込みし&lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;てもう一度&lt;/a&gt;モジュールをインポートすると、検出と診断が困難な誤動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a5ada9a0db0dd28905ee48dc3d4fd05c604c6200" translate="yes" xml:space="preserve">
          <source>Some additional options can only be set through the configuration file, either by direct editing or with the &lt;a href=&quot;cli/config&quot;&gt;&lt;code&gt;ng config&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">一部の追加オプションは、直接編集するか、&lt;a href=&quot;cli/config&quot;&gt; &lt;code&gt;ng config&lt;/code&gt; &lt;/a&gt;コマンドを使用して、構成ファイルを介してのみ設定できます。</target>
        </trans-unit>
        <trans-unit id="05f75196c5ccd5dff003febc77598f3649dbab45" translate="yes" xml:space="preserve">
          <source>Some additional options can only be set through the configuration file, either by direct editing or with the &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; command. These include &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, and &lt;code&gt;scripts&lt;/code&gt; objects that provide runtime-global resources to include in the project. Resources in CSS, such as images and fonts, are automatically written and fingerprinted at the root of the output folder.</source>
          <target state="translated">一部の追加オプションは、直接編集するか、 &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; コマンドを使用して、構成ファイルを介してのみ設定できます。これらには、プロジェクトに含めるランタイムグローバルリソースを提供する &lt;code&gt;assets&lt;/code&gt; 、 &lt;code&gt;styles&lt;/code&gt; 、 &lt;code&gt;scripts&lt;/code&gt; オブジェクトが含まれます。画像やフォントなどのCSSのリソースは、出力フォルダーのルートに自動的に書き込まれ、フィンガープリントが作成されます。</target>
        </trans-unit>
        <trans-unit id="a5b94075e4789af051517d68dc6a061a026bd244" translate="yes" xml:space="preserve">
          <source>Some applications will be easier to upgrade than others, and there are many ways to make it easier for yourself. It is possible to prepare and align AngularJS applications with Angular even before beginning the upgrade process. These preparation steps are all about making the code more decoupled, more maintainable, and better aligned with modern development tools. That means in addition to making the upgrade easier, you will also improve the existing AngularJS applications.</source>
          <target state="translated">アプリケーションによっては他のアプリケーションよりもアップグレードしやすいものもありますし、自分で簡単にできる方法もたくさんあります。アップグレードプロセスを始める前でも、AngularJSアプリケーションを準備してAngularに合わせることは可能です。これらの準備は、コードをより分離し、保守性を高め、最新の開発ツールとの整合性を高めるためのものです。つまり、アップグレードがより簡単になるだけでなく、既存のAngularJSアプリケーションも改善されるということです。</target>
        </trans-unit>
        <trans-unit id="d4c4b530fecc515d6dcb4d6c84aa1cccde0771d7" translate="yes" xml:space="preserve">
          <source>Some code examples display a file that has one or more similarly named companion files. For example, &lt;code&gt;hero.component.ts&lt;/code&gt; and &lt;code&gt;hero.component.html&lt;/code&gt;.</source>
          <target state="translated">一部のコード例では、類似した名前のコンパニオンファイルが1つ以上あるファイルを表示しています。たとえば、 &lt;code&gt;hero.component.ts&lt;/code&gt; や &lt;code&gt;hero.component.html&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c175426c0f368bc13a5e0cb52347003a8ea23739" translate="yes" xml:space="preserve">
          <source>Some developers may not be able to add the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element, perhaps because they don't have access to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; or the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">一部の開発者は、おそらく &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; または &lt;code&gt;index.html&lt;/code&gt; にアクセスできないため、 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素を追加できない場合があります。</target>
        </trans-unit>
        <trans-unit id="893e585286fde4fa67e702c66e778c6f757b99b4" translate="yes" xml:space="preserve">
          <source>Some developers prefer Visual Studio as their Integrated Development Environment (IDE).</source>
          <target state="translated">開発者の中には、統合開発環境(IDE)としてVisual Studioを好む人もいます。</target>
        </trans-unit>
        <trans-unit id="d13fc2a3eeb5b4b864ff86abf2468a36d19d3307" translate="yes" xml:space="preserve">
          <source>Some developers skip the Routing Module (for example, &lt;code&gt;AppRoutingModule&lt;/code&gt;) when the configuration is simple and merge the routing configuration directly into the companion module (for example, &lt;code&gt;AppModule&lt;/code&gt;).</source>
          <target state="translated">一部の開発者は、構成が単純な場合にルーティングモジュール（ &lt;code&gt;AppRoutingModule&lt;/code&gt; など）をスキップし、ルーティング構成をコンパニオンモジュール（ &lt;code&gt;AppModule&lt;/code&gt; など）に直接マージします。</target>
        </trans-unit>
        <trans-unit id="68c82fc9e96cd5bf4503daf934cdae5d3ee2859c" translate="yes" xml:space="preserve">
          <source>Some developers want the message to display only when the user makes an invalid change. Hiding the message while the control is &quot;pristine&quot; achieves that goal. You'll see the significance of this choice when you add a new hero to the form.</source>
          <target state="translated">開発者の中には、ユーザが無効な変更を行った場合にのみメッセージを表示させたいと考える人もいます。コントロールが &quot;原始的 &quot;な状態のときにメッセージを隠すことで、その目的を達成することができます。フォームに新しいヒーローを追加すると、この選択の重要性がわかります。</target>
        </trans-unit>
        <trans-unit id="6e98114d74a4f635cc3af1651be1c7c12e084f73" translate="yes" xml:space="preserve">
          <source>Some devices don't support JavaScript or execute JavaScript so poorly that the user experience is unacceptable. For these cases, you may require a server-rendered, no-JavaScript version of the app. This version, however limited, may be the only practical alternative for people who otherwise couldn't use the app at all.</source>
          <target state="translated">一部のデバイスは JavaScript をサポートしていなかったり、ユーザー エクスペリエンスが受け入れられないほど JavaScript の実行が悪かったりします。このような場合は、サーバーレンダリングされた、JavaScriptを使用しないアプリのバージョンが必要になる場合があります。このバージョンは限られていますが、そうでなければアプリを全く使用できない人にとっては、唯一の実用的な選択肢かもしれません。</target>
        </trans-unit>
        <trans-unit id="67aaf2c208d248384694dacec3e3cb24b1e785ed" translate="yes" xml:space="preserve">
          <source>Some environments or platforms, like &lt;code&gt;@angular/platform-server&lt;/code&gt; used in &lt;a href=&quot;universal&quot;&gt;Server-side Rendering&lt;/a&gt;, don't support Web Workers. You have to provide a fallback mechanism to perform the computations that the worker would perform to ensure your application will work in these environments.</source>
          <target state="translated">&lt;code&gt;@angular/platform-server&lt;/code&gt; &lt;a href=&quot;universal&quot;&gt;側のレンダリング&lt;/a&gt;で使用される@ angular / platform-serverなどの一部の環境またはプラットフォームは、Webワーカーをサポートしていません。アプリケーションがこれらの環境で確実に機能するようにワーカーが実行する計算を実行するためのフォールバックメカニズムを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f459a965438f121077b36b8f5d98ed13ae2fa699" translate="yes" xml:space="preserve">
          <source>Some features of Angular may require additional polyfills.</source>
          <target state="translated">Angularの機能によっては、追加のポリフィルが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="652cb417856953b2c85d53c33fd537306ae11936" translate="yes" xml:space="preserve">
          <source>Some legacy browsers still download both bundles, but only execute the appropriate scripts based on the attributes mentioned above. You can read more on the issue &lt;a href=&quot;https://github.com/philipwalton/webpack-esnext-boilerplate/issues/1&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">一部のレガシーブラウザは両方のバンドルをダウンロードしますが、上記の属性に基づいて適切なスクリプトのみを実行します。この問題について詳しくは、&lt;a href=&quot;https://github.com/philipwalton/webpack-esnext-boilerplate/issues/1&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5e683afd923f066295eb3ba18175aa6261d14ea" translate="yes" xml:space="preserve">
          <source>Some legal HTML doesn't make much sense in a template. The &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; elements have no useful role. Pretty much everything else is fair game.</source>
          <target state="translated">一部の合法的なHTMLはテンプレートではあまり意味がありません。 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素は、有用な役割を持っていません。他のほとんどすべてが公正なゲームです。</target>
        </trans-unit>
        <trans-unit id="70841f86386fe39f91e58b3488f2560c0f72b3dc" translate="yes" xml:space="preserve">
          <source>Some modules, like &lt;code&gt;AppModule&lt;/code&gt;, must be loaded from the start. But others can and should be lazy loaded. The &lt;code&gt;AdminModule&lt;/code&gt;, for example, is needed by a few authorized users, so you should only load it when requested by the right people.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; などの一部のモジュールは、最初からロードする必要があります。しかし、他の人は遅延読み込みが可能であり、またそうすべきです。 &lt;code&gt;AdminModule&lt;/code&gt; は、右の人々によって要求されたときに、例えば、いくつかの許可されたユーザによって必要とされているので、あなたはそれをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="a75dabef18d29e986ef8c7578bdf7c0413bbe653" translate="yes" xml:space="preserve">
          <source>Some noteworthy observations:</source>
          <target state="translated">いくつかの注目すべき観察。</target>
        </trans-unit>
        <trans-unit id="9b39c71b1e1a2ca83607b09ace431ca3689d5eab" translate="yes" xml:space="preserve">
          <source>Some observations:</source>
          <target state="translated">いくつかの観察。</target>
        </trans-unit>
        <trans-unit id="1b0a04594ac4a3d21846af15796e99cea045e104" translate="yes" xml:space="preserve">
          <source>Some of the ES2015+ operators</source>
          <target state="translated">ES2015+のオペレーターの一部</target>
        </trans-unit>
        <trans-unit id="b203713cf339db71c76ab99e8f1e0222e72c6fd8" translate="yes" xml:space="preserve">
          <source>Some of the metadata is in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorators that you added to your component classes. Other critical metadata is in &lt;a href=&quot;../guide/ngmodules&quot;&gt;&lt;code&gt;@NgModule&lt;/code&gt;&lt;/a&gt; decorators.</source>
          <target state="translated">一部のメタデータは、コンポーネントクラスに追加した &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレーターにあります。他の重要なメタデータは&lt;a href=&quot;../guide/ngmodules&quot;&gt; &lt;code&gt;@NgModule&lt;/code&gt; &lt;/a&gt;デコレータにあります。</target>
        </trans-unit>
        <trans-unit id="3ef85858173e182deb1f6adc35fffb5ed7ebfcb3" translate="yes" xml:space="preserve">
          <source>Some scripts extend other libraries; for instance with JQuery plugins:</source>
          <target state="translated">スクリプトの中には、JQuery プラグインなどで他のライブラリを拡張するものがあります。</target>
        </trans-unit>
        <trans-unit id="b9f04f496af857d2db0e0d672068b333364f9fdf" translate="yes" xml:space="preserve">
          <source>Some style binding styles have a unit extension. The following example conditionally sets the font size in &amp;ldquo;em&amp;rdquo; and &amp;ldquo;%&amp;rdquo; units.</source>
          <target state="translated">一部のスタイルバインディングスタイルには、単位拡張があります。次の例では、フォントサイズを「em」および「％」単位で条件付きで設定します。</target>
        </trans-unit>
        <trans-unit id="87ee9cc01ce8a12a1e228d485f58807d2d64a01c" translate="yes" xml:space="preserve">
          <source>Someday you'll want to repeat a block of HTML but only when a particular condition is true. You'll &lt;em&gt;try&lt;/em&gt; to put both an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; and an &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on the same host element. Angular won't let you. You may apply only one &lt;em&gt;structural&lt;/em&gt; directive to an element.</source>
          <target state="translated">いつか、特定の条件がtrueの場合にのみ、HTMLのブロックを繰り返したいと思うでしょう。あなたはよ&lt;em&gt;しようと&lt;/em&gt;両方入れて &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を同じホスト要素に。Angularはあなたを許しません。1つの要素に適用できる&lt;em&gt;構造&lt;/em&gt;ディレクティブは1つだけです。</target>
        </trans-unit>
        <trans-unit id="dfbcabd470eab905a90fa0ceb3a9288d47b1c007" translate="yes" xml:space="preserve">
          <source>Sometimes &quot;breaking changes&quot;, such as the removal of support for select APIs and features, are necessary to innovate and stay current with new best practices, changing dependencies, or changes in the (web) platform itself.</source>
          <target state="translated">時には、選択したAPIや機能のサポートの削除などの「変更を壊す」ことが、新しいベストプラクティスや依存関係の変更、または(Web)プラットフォーム自体の変更を革新し、最新の状態に保つために必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="49de1568c1ef3cb993b95f0727727351d8338828" translate="yes" xml:space="preserve">
          <source>Sometimes a binding expression triggers a type error during &lt;a href=&quot;aot-compiler&quot;&gt;AOT compilation&lt;/a&gt; and it is not possible or difficult to fully specify the type. To silence the error, you can use the &lt;code&gt;$any()&lt;/code&gt; cast function to cast the expression to the &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/basic-types.html#any&quot;&gt;&lt;code&gt;any&lt;/code&gt; type&lt;/a&gt; as in the following example:</source>
          <target state="translated">バインディング式が&lt;a href=&quot;aot-compiler&quot;&gt;AOTコンパイル&lt;/a&gt;中にタイプエラーをトリガーし、タイプを完全に指定することが不可能または困難な場合があります。エラーを抑制するには、 &lt;code&gt;$any()&lt;/code&gt; キャスト関数を使用して、次の例の&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/basic-types.html#any&quot;&gt; &lt;code&gt;any&lt;/code&gt; 式&lt;/a&gt;をany型にキャストします。</target>
        </trans-unit>
        <trans-unit id="22c0dd5f849dcef145063af39357c83c47ffec85" translate="yes" xml:space="preserve">
          <source>Sometimes a service depends on other services, which may depend on yet other services. The dependency injection framework resolves these nested dependencies in the correct order. At each step, the consumer of dependencies declares what it requires in its constructor, and lets the framework provide them.</source>
          <target state="translated">サービスが他のサービスに依存していることもあります。依存性インジェクションフレームワークは、これらの入れ子になった依存性を正しい順序で解決します。各ステップで、依存関係のコンシューマはコンストラクタで必要なものを宣言し、フレームワークに提供させます。</target>
        </trans-unit>
        <trans-unit id="d6ab589ef42dcecb24ea98bba5d742b803712e16" translate="yes" xml:space="preserve">
          <source>Sometimes an app needs to display a view or a portion of a view only under specific circumstances.</source>
          <target state="translated">アプリでは、特定の状況下でのみビューまたはビューの一部を表示する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="6c3f8101fc2112170a72478fb7f231c9aa240796" translate="yes" xml:space="preserve">
          <source>Sometimes applications genuinely need to include executable code, display an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; from some URL, or construct potentially dangerous URLs. To prevent automatic sanitization in any of these situations, you can tell Angular that you inspected a value, checked how it was generated, and made sure it will always be secure. But &lt;em&gt;be careful&lt;/em&gt;. If you trust a value that might be malicious, you are introducing a security vulnerability into your application. If in doubt, find a professional security reviewer.</source>
          <target state="translated">場合によっては、アプリケーションで実際に実行可能コードを &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; だり、URLから&amp;lt;iframe&amp;gt;を表示したり、危険な可能性のあるURLを作成したりする必要があります。これらの状況で自動サニタイズを防ぐには、値を検査し、値がどのように生成されたかを確認し、常に安全であることをAngularに通知します。しかし&lt;em&gt;、注意してください&lt;/em&gt;。悪意のある可能性のある値を信頼している場合、アプリケーションにセキュリティの脆弱性が生じています。疑問がある場合は、専門のセキュリティレビュー担当者を探してください。</target>
        </trans-unit>
        <trans-unit id="e0cab9b66ded5e80fee20b0576feaa22af6aee16" translate="yes" xml:space="preserve">
          <source>Sometimes applications transfer large amounts of data and those transfers can take a long time. File uploads are a typical example. Give the users a better experience by providing feedback on the progress of such transfers.</source>
          <target state="translated">アプリケーションが大量のデータを転送すると、転送に時間がかかることがあります。ファイルのアップロードはその典型的な例です。このような転送の進捗状況についてフィードバックを提供することで、ユーザーにより良い体験を提供します。</target>
        </trans-unit>
        <trans-unit id="cf2e10c43e5e90800b73756ce07244bbcedd633f" translate="yes" xml:space="preserve">
          <source>Sometimes however, &lt;code&gt;null&lt;/code&gt; values in the property path may be OK under certain circumstances, especially when the value starts out null but the data arrives eventually.</source>
          <target state="translated">ただし、特定の状況下では、特に値がnullで始まっていてもデータが最終的に到着する場合は、プロパティパスの &lt;code&gt;null&lt;/code&gt; 値が問題ない場合があります。</target>
        </trans-unit>
        <trans-unit id="afbfcf85cb461260370ada65947a3ffc928e7abf" translate="yes" xml:space="preserve">
          <source>Sometimes it's easier to provide a ready-made object rather than ask the injector to create it from a class. To inject an object you have already created, configure the injector with the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; option</source>
          <target state="translated">クラスから作成するようにインジェクタに依頼するよりも、既製のオブジェクトを提供する方が簡単な場合があります。すでに作成したオブジェクトを注入するには、 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; オプションを使用してインジェクターを構成します</target>
        </trans-unit>
        <trans-unit id="916f97cf23387473c8f6e5644aca380547c981d1" translate="yes" xml:space="preserve">
          <source>Sometimes it's useful to apply styles based on some condition &lt;em&gt;outside&lt;/em&gt; of a component's view. For example, a CSS theme class could be applied to the document &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, and you want to change how your component looks based on that.</source>
          <target state="translated">コンポーネントのビューの&lt;em&gt;外&lt;/em&gt;にある条件に基づいてスタイルを適用すると便利な場合があります。たとえば、CSSテーマクラスをドキュメントの &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 要素に適用し、それに基づいてコンポーネントの外観を変更したいとします。</target>
        </trans-unit>
        <trans-unit id="5c406639534428eae74420bbaf69bc64d5bb3873" translate="yes" xml:space="preserve">
          <source>Sometimes refers to a &lt;a href=&quot;glossary#dependency-injection&quot;&gt;dependency-injection&lt;/a&gt; binding between a &lt;a href=&quot;glossary#token&quot;&gt;token&lt;/a&gt; and a dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#token&quot;&gt;トークン&lt;/a&gt;と依存関係&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダーの&lt;/a&gt;間の&lt;a href=&quot;glossary#dependency-injection&quot;&gt;依存関係注入&lt;/a&gt;バインディングを指すこともあります。</target>
        </trans-unit>
        <trans-unit id="38e29bbe034f4e55ccadca72413de5d634c48c4e" translate="yes" xml:space="preserve">
          <source>Sometimes the error is transient and will go away automatically if you try again. For example, network interruptions are common in mobile scenarios, and trying again may produce a successful result.</source>
          <target state="translated">エラーは一過性のもので、再試行すれば自動的に解消されることもあります。例えば、ネットワークの中断はモバイルのシナリオでは一般的であり、再試行すると正常な結果が得られることがあります。</target>
        </trans-unit>
        <trans-unit id="ad442d3fdd67eb4c192c8f3016404b07efc76dfc" translate="yes" xml:space="preserve">
          <source>Sometimes the public name of an input/output property should be different from the internal name. While it is a best practice to avoid this situation, Angular does offer a solution.</source>
          <target state="translated">入出力プロパティの公開名が内部名と異なる場合があります。このような状況を避けるのがベストプラクティスですが、Angularは解決策を提供しています。</target>
        </trans-unit>
        <trans-unit id="c9af7e5c88e4113c8c33d69789e6b44b2076d8a8" translate="yes" xml:space="preserve">
          <source>Sometimes the section header text makes for an unattractive anchor. &lt;a href=&quot;docs-style-guide#ugly-long-section-header-anchors&quot;&gt;This one&lt;/a&gt; is pretty bad.</source>
          <target state="translated">場合によっては、セクションヘッダーのテキストが魅力的なアンカーになることがあります。&lt;a href=&quot;docs-style-guide#ugly-long-section-header-anchors&quot;&gt;これ&lt;/a&gt;はかなり悪いです。</target>
        </trans-unit>
        <trans-unit id="25dbb2d1d64aace8914c9a8f3da6a2dc60d4e5c5" translate="yes" xml:space="preserve">
          <source>Sometimes using the appropriate native element requires a container element. For example, the native &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element cannot have children, so any custom text entry components need to wrap an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with additional elements. While you might just include the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; in your custom component's template, this makes it impossible for users of the component to set arbitrary properties and attributes to the input element. Instead, you can create a container component that uses content projection to include the native control in the component's API.</source>
          <target state="translated">適切なネイティブ要素を使用するには、コンテナ要素が必要になる場合があります。たとえば、ネイティブの &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素は子を持つことができないため、カスタムテキスト入力コンポーネントは &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を追加の要素でラップする必要があります。カスタムコンポーネントのテンプレートに &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を含めるだけでも、コンポーネントのユーザーがinput要素に任意のプロパティと属性を設定することは不可能になります。代わりに、コンテンツプロジェクションを使用してコンポーネントのAPIにネイティブコントロールを含めるコンテナコンポーネントを作成できます。</target>
        </trans-unit>
        <trans-unit id="3ac07b67807f6a8d2a6a6fd612490e48e4e04483" translate="yes" xml:space="preserve">
          <source>Sometimes you don't know the value of a dimensional style property until runtime. For example, elements often have widths and heights that depend on their content and the screen size. These properties are often challenging to animate using CSS.</source>
          <target state="translated">時には、実行時まで寸法スタイル・プロパティの値がわからないこともあります。例えば、要素の幅や高さは、コンテンツや画面サイズに依存することがよくあります。これらのプロパティは、CSS を使用してアニメーション化するのが難しいことがよくあります。</target>
        </trans-unit>
        <trans-unit id="4ed6a463490243dcb2def9121489505c9fc9f592" translate="yes" xml:space="preserve">
          <source>Sometimes you need to clear the request body rather than replace it. If you set the cloned request body to &lt;code&gt;undefined&lt;/code&gt;, Angular assumes you intend to leave the body as is. That is not what you want. If you set the cloned request body to &lt;code&gt;null&lt;/code&gt;, Angular knows you intend to clear the request body.</source>
          <target state="translated">リクエストボディを置き換えるのではなく、クリアする必要がある場合があります。複製されたリクエストの本文を &lt;code&gt;undefined&lt;/code&gt; に設定すると、Angularは本文をそのままにするつもりであると想定します。それはあなたが望むものではありません。複製されたリクエストボディを &lt;code&gt;null&lt;/code&gt; に設定すると、Angularはリクエストボディをクリアするつもりであることを認識します。</target>
        </trans-unit>
        <trans-unit id="e989b7f389257a85d64fa80446bff97e952260a5" translate="yes" xml:space="preserve">
          <source>Sometimes you need to create a dependent value dynamically, based on information you won't have until run time. For example, you might need information that changes repeatedly in the course of the browser session. Also, your injectable service might not have independent access to the source of the information.</source>
          <target state="translated">実行時間までは得られない情報に基づいて、動的に依存値を作成する必要がある場合があります。たとえば、ブラウザのセッション中に繰り返し変化する情報が必要になるかもしれません。また、インジェクト可能なサービスが情報のソースに独立してアクセスできない場合もあります。</target>
        </trans-unit>
        <trans-unit id="7259258829117230ab23109501a352812f52835c" translate="yes" xml:space="preserve">
          <source>Sometimes you want multiple instances of a service at &lt;em&gt;the same level&lt;/em&gt; of the component hierarchy.</source>
          <target state="translated">コンポーネント階層の&lt;em&gt;同じレベル&lt;/em&gt;にあるサービスの複数のインスタンスが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="06c4fd63af0dc746f3373b72a6f8a9279dddac9e" translate="yes" xml:space="preserve">
          <source>Sometimes you want to display an example of bad code or bad design.</source>
          <target state="translated">悪いコードや悪いデザインの例を表示したいことがあります。</target>
        </trans-unit>
        <trans-unit id="e5d4f7b24f7f6d8872f71da1476619f69e40c15a" translate="yes" xml:space="preserve">
          <source>Sometimes, instead of starting an independent execution for each subscriber, you want each subscription to get the same values&amp;mdash;even if values have already started emitting. This might be the case with something like an observable of clicks on the document object.</source>
          <target state="translated">場合によっては、サブスクライバーごとに独立して実行を開始するのではなく、値が既に発行を開始している場合でも、各サブスクリプションで同じ値を取得する必要があります。これは、ドキュメントオブジェクトのクリックの観察可能性のようなものに当てはまる場合があります。</target>
        </trans-unit>
        <trans-unit id="38c10fcb09c207c1bb5c55d3634b3b93a859ff8a" translate="yes" xml:space="preserve">
          <source>Soon you can load Angular dependencies into the application via &lt;code&gt;index.html&lt;/code&gt;, but first you need to do some directory path adjustments. You'll need to load files from &lt;code&gt;node_modules&lt;/code&gt; and the project root instead of from the &lt;code&gt;/app&lt;/code&gt; directory as you've been doing to this point.</source>
          <target state="translated">すぐに &lt;code&gt;index.html&lt;/code&gt; を介してAngularの依存関係をアプリケーションにロードできるようになりますが、最初にディレクトリパスの調整を行う必要があります。この時点まで行ってきたように、 &lt;code&gt;/app&lt;/code&gt; ディレクトリからではなく、 &lt;code&gt;node_modules&lt;/code&gt; とプロジェクトルートからファイルをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="22a35fbebff47762d94faae1d7babdf97b0736bf" translate="yes" xml:space="preserve">
          <source>Source code</source>
          <target state="translated">ソースコード</target>
        </trans-unit>
        <trans-unit id="dccd6b0b6b5b1186e6e30c2ae5229fdc4632e9fd" translate="yes" xml:space="preserve">
          <source>Source code markup</source>
          <target state="translated">ソースコードのマークアップ</target>
        </trans-unit>
        <trans-unit id="51944448d51ed63f8b71259f667d572991b13a0b" translate="yes" xml:space="preserve">
          <source>Source file for tests.</source>
          <target state="translated">テスト用のソースファイル。</target>
        </trans-unit>
        <trans-unit id="2dfaa0d2d97365cc092010384e37e8702618042b" translate="yes" xml:space="preserve">
          <source>Source files for the root-level application project.</source>
          <target state="translated">ルートレベルのアプリケーションプロジェクトのソースファイル。</target>
        </trans-unit>
        <trans-unit id="8f07d985745ff117e05b2075b0685a36ecb5d3ea" translate="yes" xml:space="preserve">
          <source>Special characters used as literal characters are quoted with ASCII single quotes.</source>
          <target state="translated">リテラル文字として使用される特殊文字は、ASCIIシングルクォーテーションで引用されます。</target>
        </trans-unit>
        <trans-unit id="8c0463acdb13c9f21299a5b72807ab9eac6c7981" translate="yes" xml:space="preserve">
          <source>Special selectors</source>
          <target state="translated">スペシャルセレクター</target>
        </trans-unit>
        <trans-unit id="91c85cdd186d333f7a6d24ee61f9dcffbee3f1f5" translate="yes" xml:space="preserve">
          <source>Special values &lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt; initiate a transition on the entry and exit states, equivalent to &quot;void =&amp;gt; &lt;em&gt;&quot; and &quot;&lt;/em&gt; =&amp;gt; void&quot;.</source>
          <target state="translated">特別な値 &lt;code&gt;:enter&lt;/code&gt; および &lt;code&gt;:leave&lt;/code&gt; は、「void =&amp;gt; &lt;em&gt;」および「&lt;/em&gt; =&amp;gt; void」&lt;em&gt;と&lt;/em&gt;同等の、開始状態と終了状態の遷移を開始します。</target>
        </trans-unit>
        <trans-unit id="715adef1813fe743fd692801c9c30a164332f285" translate="yes" xml:space="preserve">
          <source>Special values &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt; initiate a transition when a numeric value has increased or decreased in value.</source>
          <target state="translated">特別な値 &lt;code&gt;:increment&lt;/code&gt; および &lt;code&gt;:decrement&lt;/code&gt; は、数値の値が増減したときに遷移を開始します。</target>
        </trans-unit>
        <trans-unit id="9f76f08c178d6051f1685c03b043bda781f3484e" translate="yes" xml:space="preserve">
          <source>Special values for state-change expressions</source>
          <target state="translated">状態変更式の特別な値</target>
        </trans-unit>
        <trans-unit id="7cd288dd75d4289419a0f8f2f0190edc346f7e75" translate="yes" xml:space="preserve">
          <source>Specifically, it is as if the list of modules whose exported components, directives, or pipes are referenced by the component templates were declared in this module.</source>
          <target state="translated">具体的には、エクスポートされたコンポーネント、ディレクティブ、パイプがコンポーネントテンプレートで参照されるモジュールのリストが、このモジュールで宣言されているかのようになります。</target>
        </trans-unit>
        <trans-unit id="d85c52f52591e014091971f46f808ca788e841cc" translate="yes" xml:space="preserve">
          <source>Specifically, the classes and functions in the &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; module allow the following:</source>
          <target state="translated">具体的には、 &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; モジュールのクラスと関数では、次のことが可能です。</target>
        </trans-unit>
        <trans-unit id="89c41b5f000ca9eae0da038c4c2562fc146ec362" translate="yes" xml:space="preserve">
          <source>Specifically, this guide showed how you can achieve better performance and greater flexibility in your hybrid apps by using &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule()&lt;/a&gt; instead of &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;.</source>
          <target state="translated">具体的には、このガイドでは、&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModuleの&lt;/a&gt;代わりにdowngradeModule &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;（）&lt;/a&gt;を使用して、ハイブリッドアプリのパフォーマンスと柔軟性を向上させる方法を示しました。</target>
        </trans-unit>
        <trans-unit id="f206880225dd3a28e161e67b013fb9818d73a109" translate="yes" xml:space="preserve">
          <source>Specifies a CSS selector that identifies this directive within a template. Supported selectors include &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;[attribute]&lt;/code&gt;, &lt;code&gt;.class&lt;/code&gt;, and &lt;code&gt;:not()&lt;/code&gt;.</source>
          <target state="translated">テンプレート内でこのディレクティブを識別するCSSセレクターを指定します。サポートされているセレクタは、 &lt;code&gt;element&lt;/code&gt; 、 &lt;code&gt;[attribute]&lt;/code&gt; 、 &lt;code&gt;.class&lt;/code&gt; ファイル、および &lt;code&gt;:not()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69f74f0128ed8b3251b4e7dbf826710d5ebfa149" translate="yes" xml:space="preserve">
          <source>Specifies a group of animation steps (&lt;em&gt;inner animations&lt;/em&gt;) to be run in parallel. Animation continues only after all inner animation steps have completed. Used within &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;().&lt;/code&gt;</source>
          <target state="translated">並行して実行するアニメーションステップのグループ（&lt;em&gt;内部アニメーション&lt;/em&gt;）を指定します。アニメーションは、すべての内部アニメーションステップが完了した後にのみ続行されます。 &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;().&lt;/code&gt; （）内で使用されます。</target>
        </trans-unit>
        <trans-unit id="37d60de96062cbae9258cdcb3c7d3e4639f09f03" translate="yes" xml:space="preserve">
          <source>Specifies a list of animation steps that are run sequentially, one by one.</source>
          <target state="translated">1 つずつ順次実行されるアニメーションのステップのリストを指定します。</target>
        </trans-unit>
        <trans-unit id="0a61ad296416ad71ea36b7350e3ccd9473acb817" translate="yes" xml:space="preserve">
          <source>Specifies a root URI to use for relative navigation.</source>
          <target state="translated">相対ナビゲーションに使用するルート URI を指定します。</target>
        </trans-unit>
        <trans-unit id="3ea0d046f01ef562b736f121145dd2adf0bff4e1" translate="yes" xml:space="preserve">
          <source>Specifies all files that are exported from your library.</source>
          <target state="translated">ライブラリからエクスポートされるすべてのファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="1f2d828d5052d8a7df9d1b71c02c8ee6706c1716" translate="yes" xml:space="preserve">
          <source>Specifies automatic styling.</source>
          <target state="translated">自動スタイリングを指定します。</target>
        </trans-unit>
        <trans-unit id="925486f914ee11e233011df33c896811ae05e9a4" translate="yes" xml:space="preserve">
          <source>Specifies if the component should have a selector or not.</source>
          <target state="translated">コンポーネントにセレクタを持たせるかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="2b4d15d3b0fa85381e492f8e06134b83d9633ed1" translate="yes" xml:space="preserve">
          <source>Specifies intentionally untracked files that &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; should ignore.</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;が無視する意図的に追跡されていないファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="1c4579f6d96179d8d72c82764857237e1344ee2a" translate="yes" xml:space="preserve">
          <source>Specifies that an injector should retrieve a dependency from any injector until reaching the host element of the current component. (Only used with Element Injector)</source>
          <target state="translated">現在のコンポーネントのホスト要素に到達するまで、任意のインジェクタから依存関係を取得することを指定します。(要素インジェクタでのみ使用)</target>
        </trans-unit>
        <trans-unit id="70628f74250e312617f8dd39119a36898f311c4f" translate="yes" xml:space="preserve">
          <source>Specifies the file that serves as the index page to satisfy navigation requests. Usually this is &lt;code&gt;/index.html&lt;/code&gt;.</source>
          <target state="translated">ナビゲーション要求を満たすためのインデックスページとして機能するファイルを指定します。通常、これは &lt;code&gt;/index.html&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c169d352e8435a1a1b43ccb67e78bb0b7f197345" translate="yes" xml:space="preserve">
          <source>Specifies the source language of the application.</source>
          <target state="translated">アプリケーションのソース言語を指定します。</target>
        </trans-unit>
        <trans-unit id="cb5267a9c8320157ef37cd6e0c2ee7a7697a32bb" translate="yes" xml:space="preserve">
          <source>Specifies the timing information for a transition. Optional values for &lt;code&gt;delay&lt;/code&gt; and &lt;code&gt;easing&lt;/code&gt;. Can contain &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls within.</source>
          <target state="translated">遷移のタイミング情報を指定します。 &lt;code&gt;delay&lt;/code&gt; と &lt;code&gt;easing&lt;/code&gt; オプション値。中に &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 呼び出しを含めることができます。</target>
        </trans-unit>
        <trans-unit id="814f5ed3722cd882c0f058a454546be0a851ad7d" translate="yes" xml:space="preserve">
          <source>Specifies which interfaces to implement.</source>
          <target state="translated">実装するインターフェースを指定します。</target>
        </trans-unit>
        <trans-unit id="94b04a35d9f8198258d4e5b072123fc9fa3773c4" translate="yes" xml:space="preserve">
          <source>Specify the Angular compiler factory, a &lt;code&gt;&lt;a href=&quot;../api/core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt;, and a default Angular testing module. Alternatives for non-browser platforms are available in the general form &lt;code&gt;@angular/platform-&amp;lt;platform_name&amp;gt;/testing/&amp;lt;platform_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコンパイラファクトリ、 &lt;code&gt;&lt;a href=&quot;../api/core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; 、およびデフォルトのAngularテストモジュールを指定します。ブラウザ以外のプラットフォームの代替は、一般的な形式 &lt;code&gt;@angular/platform-&amp;lt;platform_name&amp;gt;/testing/&amp;lt;platform_name&amp;gt;&lt;/code&gt; 利用できます。</target>
        </trans-unit>
        <trans-unit id="45db01e54fd08808e99ccb82fd3a69995f8c5c9d" translate="yes" xml:space="preserve">
          <source>Specifying a factory for the Angular module</source>
          <target state="translated">Angularモジュールのファクトリーを指定する</target>
        </trans-unit>
        <trans-unit id="ac30704104b1ce04b760d62c7dbe8a11f568ece5" translate="yes" xml:space="preserve">
          <source>Specifying the response type is a declaration to TypeScript that it should expect your response to be of the given type. This is a build-time check and doesn't guarantee that the server will actually respond with an object of this type. It is up to the server to ensure that the type specified by the server API is returned.</source>
          <target state="translated">レスポンスタイプを指定することは、レスポンスが指定されたタイプのものであることを TypeScript に宣言することです。これはビルド時のチェックであり、サーバが実際にこの型のオブジェクトで応答することを保証するものではありません。サーバ API で指定された型を確実に返すかどうかはサーバ次第です。</target>
        </trans-unit>
        <trans-unit id="2d2cb022bc3d26bd1407c4aa787d5e46e1ad4c3b" translate="yes" xml:space="preserve">
          <source>Speed</source>
          <target state="translated">Speed</target>
        </trans-unit>
        <trans-unit id="9fce3fbfe49053a5128e436f7b26e30fb85d8bbb" translate="yes" xml:space="preserve">
          <source>Spread in literal array</source>
          <target state="translated">リテラル配列での展開</target>
        </trans-unit>
        <trans-unit id="e08660b7e6bd062c7b3c878071df21183ee9e7e3" translate="yes" xml:space="preserve">
          <source>Sprinkle some CSS classes for styling (you'll add the CSS styles shortly).</source>
          <target state="translated">スタイリングのためにいくつかの CSS クラスを散りばめます (CSS スタイルはすぐに追加されます)。</target>
        </trans-unit>
        <trans-unit id="c4aff31a83bb2341093ada54047bcaf1e353b0b5" translate="yes" xml:space="preserve">
          <source>Spy</source>
          <target state="translated">Spy</target>
        </trans-unit>
        <trans-unit id="17f316034349b8045f94526199f11b875c7892e2" translate="yes" xml:space="preserve">
          <source>SpyLocation</source>
          <target state="translated">SpyLocation</target>
        </trans-unit>
        <trans-unit id="926ee2fe71735cd2fb34b65100e0f2541ec8d6a8" translate="yes" xml:space="preserve">
          <source>SpyNgModuleFactoryLoader</source>
          <target state="translated">SpyNgModuleFactoryLoader</target>
        </trans-unit>
        <trans-unit id="ad594f8eb8b706a77d5b72fcb52f7c4176a2498f" translate="yes" xml:space="preserve">
          <source>Spying &lt;code&gt;OnInit&lt;/code&gt; and &lt;code&gt;OnDestroy&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;OnInit&lt;/code&gt; と &lt;code&gt;OnDestroy&lt;/code&gt; のスパイ</target>
        </trans-unit>
        <trans-unit id="01a86ab8d916a588cd67adfcc533b8392050f4aa" translate="yes" xml:space="preserve">
          <source>Stable Release</source>
          <target state="translated">安定したリリース</target>
        </trans-unit>
        <trans-unit id="c54e8d606d901ea1d2b7420bc669f85bda9ba570" translate="yes" xml:space="preserve">
          <source>StackBlitz creates a starter Angular app with a top bar&amp;mdash;containing the store name and checkout icon&amp;mdash;and the title for a product list.</source>
          <target state="translated">StackBlitzは、ストア名とチェックアウトアイコンを含むトップバーと製品リストのタイトルを備えたスターターAngularアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="75c3592ee5216b4760722432c72530052e7228ee" translate="yes" xml:space="preserve">
          <source>StackBlitz is continually improving, so there may be slight differences in generated code, but the app's behavior will be the same.</source>
          <target state="translated">StackBlitzは常に改善を続けているため、生成されるコードに多少の違いがあるかもしれませんが、アプリの動作は同じです。</target>
        </trans-unit>
        <trans-unit id="9f3d51394bf6c911f7cc1bdd2d89cdbffa0e1a62" translate="yes" xml:space="preserve">
          <source>StackBlitz projects are public by default, allowing you to share your Angular app via the project URL. Keep in mind that this is a great way to share ideas and prototypes, but it is not intended for production hosting.</source>
          <target state="translated">StackBlitzのプロジェクトはデフォルトで公開されており、プロジェクトURLを使ってAngularアプリを共有することができます。アイデアやプロトタイプを共有するには最適な方法ですが、本番環境でのホスティングを目的としたものではないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="dc38ad881be5858e30b64c3c2517a2a445c83d47" translate="yes" xml:space="preserve">
          <source>StackBlitz tip: Any time the preview refreshes, the cart is cleared. If you make changes to the app, the page refreshes, and you'll need to buy products again to populate the cart.</source>
          <target state="translated">StackBlitzのヒント:プレビューが更新されるたびにカートはクリアされます。アプリに変更を加えるとページが更新され、カートに入れるには再度商品を購入する必要があります。</target>
        </trans-unit>
        <trans-unit id="3bdc77830eb317ca046038051340028ce397d5b1" translate="yes" xml:space="preserve">
          <source>StackBlitz tips</source>
          <target state="translated">スタックブリッツのヒント</target>
        </trans-unit>
        <trans-unit id="2839c407622223dee69071a7cb7a3304fbcac575" translate="yes" xml:space="preserve">
          <source>Staggers the starting time for animations for multiple elements.</source>
          <target state="translated">複数の要素のアニメーションの開始時間をずらす。</target>
        </trans-unit>
        <trans-unit id="10306aeb9ffa26e1ac21d26c6556b58df4d0c0a1" translate="yes" xml:space="preserve">
          <source>Standard markdown processors don't allow you to put markdown &lt;em&gt;within&lt;/em&gt; HTML tags. But the Angular documentation markdown processor &lt;strong&gt;supports markdown within HTML&lt;/strong&gt;, as long as you follow one rule:</source>
          <target state="translated">標準のマークダウンプロセッサでは、HTMLタグ&lt;em&gt;内&lt;/em&gt;にマークダウンを配置することはできません。ただし、Angularドキュメンテーションマークダウンプロセッサ&lt;strong&gt;は&lt;/strong&gt;、次の1つのルールに従っている限り、&lt;strong&gt;HTML内の&lt;/strong&gt;マークダウンを&lt;strong&gt;サポート&lt;/strong&gt;します。</target>
        </trans-unit>
        <trans-unit id="effd4c04f415988a30d340e6b2349d536c76c08c" translate="yes" xml:space="preserve">
          <source>Start Protractor's Element Explorer for debugging.</source>
          <target state="translated">デバッグのためにProtractorのエレメントエクスプローラを起動します。</target>
        </trans-unit>
        <trans-unit id="71b5afd2ee1799bf22dd9a125e16126cf1502a02" translate="yes" xml:space="preserve">
          <source>Start by adding a &lt;code&gt;searchHeroes()&lt;/code&gt; method to the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;searchHeroes()&lt;/code&gt; 、HeroServiceにsearchHeroes（）メソッドを &lt;code&gt;HeroService&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9055f4745fc865882af1cd7ec2d306b457f907a1" translate="yes" xml:space="preserve">
          <source>Start by creating an &lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;まずHttpInterceptorを&lt;/a&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="d1925f507e24371ecd98f89acdb423a02aae9e34" translate="yes" xml:space="preserve">
          <source>Start by creating an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; called &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 、AppModuleという &lt;code&gt;AppModule&lt;/code&gt; 作成します。</target>
        </trans-unit>
        <trans-unit id="6637113a3228737f2c681bb3420d290f5b963e05" translate="yes" xml:space="preserve">
          <source>Start by installing the &lt;code&gt;jasmine-marbles&lt;/code&gt; npm package. Then import the symbols you need.</source>
          <target state="translated">まず、 &lt;code&gt;jasmine-marbles&lt;/code&gt; npmパッケージをインストールします。次に、必要なシンボルをインポートします。</target>
        </trans-unit>
        <trans-unit id="a8b0ce20d4e8ff37c74c89fa788e16baef48db23" translate="yes" xml:space="preserve">
          <source>Start by reviewing this simplified version of the &lt;em&gt;heroes&lt;/em&gt; feature from the &lt;a href=&quot;../tutorial/index&quot;&gt;The Tour of Heroes&lt;/a&gt;. This simple version doesn't use DI; we'll walk through converting it to do so.</source>
          <target state="translated">まずは、&lt;a href=&quot;../tutorial/index&quot;&gt;The Tour of Heroesの&lt;/a&gt;&lt;em&gt;ヒーロー&lt;/em&gt;機能のこの簡略版を確認してください。このシンプルなバージョンはDIを使用しません。それを変換する手順を説明します。</target>
        </trans-unit>
        <trans-unit id="5a1a87886971a124aeae2d6c54174da5e34c0c86" translate="yes" xml:space="preserve">
          <source>Start immediately, run for 200ms. Use an acceleration curve to start slow and end at full velocity: &lt;code&gt;'0.2s ease-in'&lt;/code&gt;</source>
          <target state="translated">すぐに開始し、200ms実行します。加速曲線を使用して低速で開始し、最大速度で終了： &lt;code&gt;'0.2s ease-in'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce250aa26d33d7c5c114a7c6c755abad38181cf7" translate="yes" xml:space="preserve">
          <source>Start with &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; belonging to &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; and end with &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">始まる &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; に属する &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; と、エンド &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d59ad7f5c13a049bdc4c7c7f8907c7aa1f3bc02" translate="yes" xml:space="preserve">
          <source>Start with the production build:</source>
          <target state="translated">まずは本番ビルドから始めましょう。</target>
        </trans-unit>
        <trans-unit id="d1fb982ed171075bc061a33df44eef72f2d297ee" translate="yes" xml:space="preserve">
          <source>Starts a reusable animation that is created using the &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 関数を使用して作成された再利用可能なアニメーションを開始します。</target>
        </trans-unit>
        <trans-unit id="b05ed52a184ffa9eda578912108330e7d07be5d4" translate="yes" xml:space="preserve">
          <source>Starts a reusable animation that is created using the &lt;code&gt;&lt;a href=&quot;animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 関数を使用して作成された再利用可能なアニメーションを開始します。</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="6369528d29c83929c81fac4e7cf94669d79c139a" translate="yes" xml:space="preserve">
          <source>State-change functions</source>
          <target state="translated">状態変化機能</target>
        </trans-unit>
        <trans-unit id="8ff5a026360d2098037ad7db2df57536e397aac4" translate="yes" xml:space="preserve">
          <source>StateKey</source>
          <target state="translated">StateKey</target>
        </trans-unit>
        <trans-unit id="41c67fd6a75ac70825dab8295a0f3c1da04d6958" translate="yes" xml:space="preserve">
          <source>Statement context</source>
          <target state="translated">ステートメントコンテキスト</target>
        </trans-unit>
        <trans-unit id="32da3f61c0c194f415c6c857f58dd76daedf1e04" translate="yes" xml:space="preserve">
          <source>Statement guidelines</source>
          <target state="translated">ステートメントガイドライン</target>
        </trans-unit>
        <trans-unit id="749a016bf10749d6bbdfc0717392432e9f0401f6" translate="yes" xml:space="preserve">
          <source>Static methods</source>
          <target state="translated">静的メソッド</target>
        </trans-unit>
        <trans-unit id="9fd2157337067beb4c27d4c77db4f118810de715" translate="yes" xml:space="preserve">
          <source>Static methods implemented by the &lt;code&gt;TestBedViewEngine&lt;/code&gt; and &lt;code&gt;TestBedRender3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TestBedViewEngine&lt;/code&gt; および &lt;code&gt;TestBedRender3&lt;/code&gt; によって実装される静的メソッド</target>
        </trans-unit>
        <trans-unit id="f693c8e57f56be518aade11355181f9181d63004" translate="yes" xml:space="preserve">
          <source>Static properties</source>
          <target state="translated">静的なプロパティ</target>
        </trans-unit>
        <trans-unit id="4d1fa18513355c13c4b84cba89268f806425402e" translate="yes" xml:space="preserve">
          <source>StaticClassProvider</source>
          <target state="translated">StaticClassProvider</target>
        </trans-unit>
        <trans-unit id="419c921fa3db1c4990ca792260ce2f73c78c574d" translate="yes" xml:space="preserve">
          <source>StaticClassSansProvider</source>
          <target state="translated">StaticClassSansProvider</target>
        </trans-unit>
        <trans-unit id="f9ae247c7028a2e77634367f12d2edb442752ade" translate="yes" xml:space="preserve">
          <source>StaticProvider</source>
          <target state="translated">StaticProvider</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="a70c7f004f51dd841c8bf72d79a2b332be6588fc" translate="yes" xml:space="preserve">
          <source>Step 1: Create a file called &lt;code&gt;.travis.yml&lt;/code&gt; at the project root, with the following content:</source>
          <target state="translated">ステップ1：プロジェクトルートに &lt;code&gt;.travis.yml&lt;/code&gt; というファイルを作成し、次の内容を含めます。</target>
        </trans-unit>
        <trans-unit id="28218bb7cf960a24022b3fdfb128243da5874ea1" translate="yes" xml:space="preserve">
          <source>Step 1: Create a folder called &lt;code&gt;.circleci&lt;/code&gt; at the project root.</source>
          <target state="translated">ステップ1：プロジェクトのルートに &lt;code&gt;.circleci&lt;/code&gt; という名前のフォルダーを作成します。</target>
        </trans-unit>
        <trans-unit id="607bca37e5b2e80d7fe948b246b3b04ecfa2ae17" translate="yes" xml:space="preserve">
          <source>Step 1: Create a starter Angular app</source>
          <target state="translated">ステップ1:スターターAngularアプリを作成する</target>
        </trans-unit>
        <trans-unit id="13681cb262ad63d4559db4e51d2f4c77bcaa24be" translate="yes" xml:space="preserve">
          <source>Step 1: Creating a FormGroup instance</source>
          <target state="translated">ステップ 1:FormGroup のインスタンスを作成する</target>
        </trans-unit>
        <trans-unit id="6fdd00950f17cb0ed7de408cf20e796e85a488ab" translate="yes" xml:space="preserve">
          <source>Step 1: Creating a nested group</source>
          <target state="translated">ステップ1:入れ子になったグループの作成</target>
        </trans-unit>
        <trans-unit id="7a0bca33f0a6ae8c165fae2cc46a6e0486437bb5" translate="yes" xml:space="preserve">
          <source>Step 1: Enabling the animations module</source>
          <target state="translated">ステップ1:アニメーションモジュールを有効にする</target>
        </trans-unit>
        <trans-unit id="b1776a8b513151c65c791351046e9888d1c75f55" translate="yes" xml:space="preserve">
          <source>Step 1: Importing a validator function</source>
          <target state="translated">ステップ1:バリデータ関数のインポート</target>
        </trans-unit>
        <trans-unit id="280e917b7d2bc01916d99bab335193daaa951e5b" translate="yes" xml:space="preserve">
          <source>Step 1: Importing the FormArray class</source>
          <target state="translated">ステップ 1:FormArray クラスのインポート</target>
        </trans-unit>
        <trans-unit id="bf5a7e4c14cf243029e716ef4fbad27b7819cdc8" translate="yes" xml:space="preserve">
          <source>Step 1: Importing the FormBuilder class</source>
          <target state="translated">ステップ 1:FormBuilder クラスのインポート</target>
        </trans-unit>
        <trans-unit id="2aa14c5aa27be1102a9b8bc70464bc965f368f69" translate="yes" xml:space="preserve">
          <source>Step 1: Install the Angular CLI</source>
          <target state="translated">ステップ1:Angular CLIをインストールする</target>
        </trans-unit>
        <trans-unit id="e01f336fe0627c02c0bec9db097c78b1796632b1" translate="yes" xml:space="preserve">
          <source>Step 1: Prepare the application</source>
          <target state="translated">ステップ1:アプリケーションの準備</target>
        </trans-unit>
        <trans-unit id="f3712867d0750b16c35a60c9943f15cbb206f4c2" translate="yes" xml:space="preserve">
          <source>Step 1: Registering the reactive forms module</source>
          <target state="translated">ステップ1:リアクティブフォームモジュールの登録</target>
        </trans-unit>
        <trans-unit id="26f68e120685eff00e9e9b3c4ac9a460cd24573c" translate="yes" xml:space="preserve">
          <source>Step 2: Associating the FormGroup model and view</source>
          <target state="translated">ステップ 2:FormGroup モデルとビューの関連付け</target>
        </trans-unit>
        <trans-unit id="69846982085855e40a5e5389efe1ac7e0b7db5dc" translate="yes" xml:space="preserve">
          <source>Step 2: Commit your changes and push them to your repository.</source>
          <target state="translated">ステップ2:変更をコミットし、リポジトリにプッシュします。</target>
        </trans-unit>
        <trans-unit id="05867c5dba6d0ee12376ba9f91cb939b01d85f6d" translate="yes" xml:space="preserve">
          <source>Step 2: Create a workspace and initial application</source>
          <target state="translated">ステップ2:ワークスペースの作成と初期アプリケーションの作成</target>
        </trans-unit>
        <trans-unit id="1193eb17c80f8ca42ec7cac03cc199c653d6a6d8" translate="yes" xml:space="preserve">
          <source>Step 2: Create the Visual Studio ASP.NET project</source>
          <target state="translated">ステップ2:Visual Studio ASP.NETプロジェクトの作成</target>
        </trans-unit>
        <trans-unit id="cb371239493b6f1db9dc27c1572e74d840acdaae" translate="yes" xml:space="preserve">
          <source>Step 2: Create the app shell</source>
          <target state="translated">ステップ2:アプリシェルの作成</target>
        </trans-unit>
        <trans-unit id="9fa6645896c085d5f6025b9fa18f4e9d656aa4e6" translate="yes" xml:space="preserve">
          <source>Step 2: Defining a FormArray control</source>
          <target state="translated">ステップ 2:FormArray コントロールの定義</target>
        </trans-unit>
        <trans-unit id="32569184480d39b17301ace10107e123dda23ab3" translate="yes" xml:space="preserve">
          <source>Step 2: Generating and importing a new form control</source>
          <target state="translated">ステップ2:新しいフォームコントロールの生成とインポート</target>
        </trans-unit>
        <trans-unit id="9dd62b0172ed397c2fd2c17c30ab3f575d0170b3" translate="yes" xml:space="preserve">
          <source>Step 2: Grouping the nested form in the template</source>
          <target state="translated">ステップ2:テンプレートで入れ子になったフォームをグループ化する</target>
        </trans-unit>
        <trans-unit id="29c047c17af8a6b93bcb74992827a0ddce8c5ec9" translate="yes" xml:space="preserve">
          <source>Step 2: Importing animation functions into component files</source>
          <target state="translated">ステップ2:アニメーション機能をコンポーネントファイルにインポートする</target>
        </trans-unit>
        <trans-unit id="751f70297e2b3dba20b8015eab9ec68afe2e4b35" translate="yes" xml:space="preserve">
          <source>Step 2: In the new folder, create a file called &lt;code&gt;config.yml&lt;/code&gt; with the following content:</source>
          <target state="translated">ステップ2：新しいフォルダーに、次の内容を含む &lt;code&gt;config.yml&lt;/code&gt; というファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="5899c120f8c2a07d534d98589d289c508970e13e" translate="yes" xml:space="preserve">
          <source>Step 2: Injecting the FormBuilder service</source>
          <target state="translated">ステップ 2:FormBuilder サービスの注入</target>
        </trans-unit>
        <trans-unit id="d731444ae922a421682d474d2d547450f28ce971" translate="yes" xml:space="preserve">
          <source>Step 2: Making a field required</source>
          <target state="translated">ステップ2:必須フィールドの作成</target>
        </trans-unit>
        <trans-unit id="4500a32a41554fc237ce07f1730a865651be1182" translate="yes" xml:space="preserve">
          <source>Step 3: &lt;a href=&quot;https://travis-ci.org/auth&quot;&gt;Sign up for Travis CI&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;add your project&lt;/a&gt;. You'll need to push a new commit to trigger a build.</source>
          <target state="translated">ステップ3：&lt;a href=&quot;https://travis-ci.org/auth&quot;&gt;Travis CIにサインアップし&lt;/a&gt;&lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;、プロジェクト&lt;/a&gt;を追加します。ビルドをトリガーするには、新しいコミットをプッシュする必要があります。</target>
        </trans-unit>
        <trans-unit id="9b8fbf088289d7f0285fec5ef9b410ebbb640fd4" translate="yes" xml:space="preserve">
          <source>Step 3: Accessing the FormArray control</source>
          <target state="translated">ステップ 3:FormArray コントロールへのアクセス</target>
        </trans-unit>
        <trans-unit id="c85eca67ded9bdcbcf6feec3674112f877a8cb9e" translate="yes" xml:space="preserve">
          <source>Step 3: Adding the animation metadata property</source>
          <target state="translated">ステップ3:アニメーションのメタデータプロパティを追加する</target>
        </trans-unit>
        <trans-unit id="20d19721ef33709f163e149ee0ea8a5a03024a69" translate="yes" xml:space="preserve">
          <source>Step 3: Commit your changes and push them to your repository.</source>
          <target state="translated">ステップ3:変更をコミットし、リポジトリにプッシュします。</target>
        </trans-unit>
        <trans-unit id="48d4deda6a29de0da753e4aeef856b6305e8d550" translate="yes" xml:space="preserve">
          <source>Step 3: Copy the Angular project files into the ASP.NET project folder</source>
          <target state="translated">ステップ3:AngularプロジェクトファイルをASP.NETプロジェクトフォルダにコピーする</target>
        </trans-unit>
        <trans-unit id="005849058dc80d62a7f2d8a7ab2ae9ab9b745d64" translate="yes" xml:space="preserve">
          <source>Step 3: Generating form controls</source>
          <target state="translated">ステップ3:フォームコントロールの生成</target>
        </trans-unit>
        <trans-unit id="017f470b7d7749895b56fc4419f11fbb6bf10f98" translate="yes" xml:space="preserve">
          <source>Step 3: Registering the control in the template</source>
          <target state="translated">ステップ3:テンプレートにコントロールを登録する</target>
        </trans-unit>
        <trans-unit id="d70d1c45f5e3789dec8e23bd525c942db5b8fc7b" translate="yes" xml:space="preserve">
          <source>Step 3: Run the application</source>
          <target state="translated">ステップ3:アプリケーションの実行</target>
        </trans-unit>
        <trans-unit id="91ff2efe0d7b26ad2720b21c1dfcf98862e43810" translate="yes" xml:space="preserve">
          <source>Step 3: Verify the app is built with the shell content</source>
          <target state="translated">ステップ3:アプリがシェルコンテンツで構築されていることを確認する</target>
        </trans-unit>
        <trans-unit id="4b250d9e8fb17555e0e9336a36a06d98e847fa45" translate="yes" xml:space="preserve">
          <source>Step 4: &lt;a href=&quot;https://circleci.com/docs/2.0/first-steps/&quot;&gt;Sign up for Circle CI&lt;/a&gt; and &lt;a href=&quot;https://circleci.com/add-projects&quot;&gt;add your project&lt;/a&gt;. Your project should start building.</source>
          <target state="translated">ステップ4：&lt;a href=&quot;https://circleci.com/docs/2.0/first-steps/&quot;&gt;Circle CIにサインアップし&lt;/a&gt;&lt;a href=&quot;https://circleci.com/add-projects&quot;&gt;てプロジェクト&lt;/a&gt;を追加します。プロジェクトの構築が始まります。</target>
        </trans-unit>
        <trans-unit id="f76a02a29a9e5d7c472da0a39e2f0a3e742c7f77" translate="yes" xml:space="preserve">
          <source>Step 4: Displaying the form array in the template</source>
          <target state="translated">ステップ4:テンプレートにフォーム配列を表示する</target>
        </trans-unit>
        <trans-unit id="184db950bcad4c5561140a2400f15e24a5c78842" translate="yes" xml:space="preserve">
          <source>Step 4: Restore the required packages</source>
          <target state="translated">ステップ4:必要なパッケージをリストアする</target>
        </trans-unit>
        <trans-unit id="0ef1c21f79bdbe367b7d560790f576815ac4209d" translate="yes" xml:space="preserve">
          <source>Step 5: Build and run the app</source>
          <target state="translated">ステップ5:アプリをビルドして実行する</target>
        </trans-unit>
        <trans-unit id="cff6e99a14676bb106644324be04b5717cc9e1cf" translate="yes" xml:space="preserve">
          <source>Steps defined by &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls apply the styling data over time as specified by the timing data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 呼び出しで定義されたステップは、タイミングデータで指定されたスタイリングデータを時間とともに適用します。</target>
        </trans-unit>
        <trans-unit id="c8ed69821ec203d6829dbcc9d9d6fec704a81de6" translate="yes" xml:space="preserve">
          <source>Steps defined by &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls apply the styling data immediately.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 呼び出しで定義されたステップは、スタイルデータをすぐに適用します。</target>
        </trans-unit>
        <trans-unit id="3a07d30bad8c94218ad0f704b43802b2da976357" translate="yes" xml:space="preserve">
          <source>Stick with the default unless you have a compelling reason to resort to hash routes.</source>
          <target state="translated">ハッシュルートに頼らなければならないやむを得ない理由がない限り、デフォルトのままでいてください。</target>
        </trans-unit>
        <trans-unit id="2598500f4189f4c7d4d04fd55e20d7832c56f7b1" translate="yes" xml:space="preserve">
          <source>Still in the &lt;code&gt;HeroService&lt;/code&gt;, inject &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into the constructor in a private property called &lt;code&gt;&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">それでも中 &lt;code&gt;HeroService&lt;/code&gt; 、注入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; と呼ばれる私有財産でコンストラクタへ &lt;code&gt;&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86f183e2c301ae15282a1180211492bbcc7a6bac" translate="yes" xml:space="preserve">
          <source>Still, there might be cases where you want more control over when the ServiceWorker is registered (e.g. there might be a long-running timeout or polling interval, preventing the app to stabilize). The available option are:</source>
          <target state="translated">しかし、ServiceWorkerを登録するタイミングをもっとコントロールしたい場合もあるかもしれません(例えば、タイムアウトやポーリング間隔が長くてアプリが安定しない場合など)。利用可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b73dbe34e4ed8ad93ef32a3f7c640e997f88205c" translate="yes" xml:space="preserve">
          <source>Stopping and starting the service worker in the Service Worker pane triggers a check for updates.</source>
          <target state="translated">サービス ワーカー]ペインのサービス ワーカーを停止して起動すると、更新のチェックがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="04eff34316cb47c772b1bddbf1fbb113d1857149" translate="yes" xml:space="preserve">
          <source>Store contextual information about a &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; に関するコンテキスト情報を保存する</target>
        </trans-unit>
        <trans-unit id="77e71f586ded49562f9a0b742cf70a777d3efe78" translate="yes" xml:space="preserve">
          <source>Store contextual information about a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; に関するコンテキスト情報を保存する</target>
        </trans-unit>
        <trans-unit id="e48cfb3d3d03ba559addfbec1ad5e1a3182727e4" translate="yes" xml:space="preserve">
          <source>Store contextual information about the children (= nested) &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">子（=ネストされた） &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; に関するコンテキスト情報を格納します</target>
        </trans-unit>
        <trans-unit id="b1514487ea7bd392f7937b087b3478f147520b52" translate="yes" xml:space="preserve">
          <source>Store contextual information about the children (= nested) &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">子（=ネストされた） &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; に関するコンテキスト情報を格納します</target>
        </trans-unit>
        <trans-unit id="cfdd9b3462a479338e13a25805a7dc27b79d9eda" translate="yes" xml:space="preserve">
          <source>Store images in the &lt;code&gt;content/images&lt;/code&gt; directory in a folder with the same URL as the guide page. Images for this &quot;Authors Style Guide&quot; page belong in the &lt;code&gt;content/images/guide/docs-style-guide&lt;/code&gt; folder.</source>
          <target state="translated">ガイドページと同じURLのフォルダの &lt;code&gt;content/images&lt;/code&gt; ディレクトリに画像を保存します。この「Authors Style Guide」ページの &lt;code&gt;content/images/guide/docs-style-guide&lt;/code&gt; は、content / images / guide / docs-style-guideフォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="9ad7aff1545b9d1f97374f1368ea7cf2c5640b72" translate="yes" xml:space="preserve">
          <source>Store the callback function</source>
          <target state="translated">コールバック関数を格納する</target>
        </trans-unit>
        <trans-unit id="d09993861d6f0e8bb21791faac138e64e72017dd" translate="yes" xml:space="preserve">
          <source>Store the change function</source>
          <target state="translated">変更機能を格納する</target>
        </trans-unit>
        <trans-unit id="2917c752ee7cda1d6fe8f953f785c8563d7af0ab" translate="yes" xml:space="preserve">
          <source>Stores the HTML template to be selected on match.</source>
          <target state="translated">マッチ時に選択される HTML テンプレートを格納します。</target>
        </trans-unit>
        <trans-unit id="eee15be5321e455c5d3901a0e21c2d141f3a40fe" translate="yes" xml:space="preserve">
          <source>Stores the detached route.</source>
          <target state="translated">切り離されたルートを格納します。</target>
        </trans-unit>
        <trans-unit id="4d3522cdb0ae0a90b17fbc4ff367b18c0f4cdc60" translate="yes" xml:space="preserve">
          <source>Storing a &lt;code&gt;null&lt;/code&gt; value should erase the previously stored value.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値を保存すると、以前に保存された値が消去されます。</target>
        </trans-unit>
        <trans-unit id="0b616462c661d3e538d4d24f804c11817a37c5cb" translate="yes" xml:space="preserve">
          <source>Storing a conditional result in a variable</source>
          <target state="translated">条件付きの結果を変数に格納する</target>
        </trans-unit>
        <trans-unit id="9644d5734f03b7439ba40387bc3ec6021a0f2301" translate="yes" xml:space="preserve">
          <source>String Examples</source>
          <target state="translated">文字列の例</target>
        </trans-unit>
        <trans-unit id="7c9eda6cd62c61583722eabd843198abec4b7263" translate="yes" xml:space="preserve">
          <source>String of URL parameters.</source>
          <target state="translated">URL パラメータの文字列。</target>
        </trans-unit>
        <trans-unit id="ded6fb5d3578e6f25e85fa375454f30a56c30e74" translate="yes" xml:space="preserve">
          <source>String representing a URL.</source>
          <target state="translated">URL を表す文字列。</target>
        </trans-unit>
        <trans-unit id="0f280dc35cba0f462991f583348033840f71c044" translate="yes" xml:space="preserve">
          <source>String widths available for date-time formats. The specific character widths are locale-specific. Examples are given for &lt;code&gt;en-US&lt;/code&gt;.</source>
          <target state="translated">日時形式で使用できる文字列の幅。特定の文字幅はロケール固有です。 &lt;code&gt;en-US&lt;/code&gt; の例を示します。</target>
        </trans-unit>
        <trans-unit id="e6a8a3351cfd4833a09546bdefd4e5bfc730b525" translate="yes" xml:space="preserve">
          <source>String widths available for translations. The specific character widths are locale-specific. Examples are given for the word &quot;Sunday&quot; in English.</source>
          <target state="translated">翻訳に利用できる文字列の幅。特定の文字幅は、ローカリゼーション固有のものです。例は、英語の単語 &quot;Sunday &quot;のために与えられています。</target>
        </trans-unit>
        <trans-unit id="3c396638f94f562746728eb2c2021c54bc0758da" translate="yes" xml:space="preserve">
          <source>String: Use the given string value instead of a code or a symbol. For example, an empty string will suppress the currency &amp;amp; symbol.</source>
          <target state="translated">文字列：コードやシンボルの代わりに、指定された文字列値を使用します。たとえば、空の文字列は通貨と記号を抑制します。</target>
        </trans-unit>
        <trans-unit id="fa4c723eb81b8491af1570970a5d321d9aba6709" translate="yes" xml:space="preserve">
          <source>Strip the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; back to just its &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, wrap the badge and name in an anchor element (&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;), and add a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute to the anchor that is the same as in the dashboard template</source>
          <target state="translated">ストリップ &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ちょうどその背中に &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 、アンカー要素でバッジと名前をラップ（ &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; ）、および追加 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; のダッシュボードテンプレートの場合と同じであるアンカーに属性は、</target>
        </trans-unit>
        <trans-unit id="4ca86e4e4c4b88a4fd401574ce599d752ec15587" translate="yes" xml:space="preserve">
          <source>Structural Directives</source>
          <target state="translated">構造指令</target>
        </trans-unit>
        <trans-unit id="44645931c6cf45d2d828f7b54fea901da303dcfa" translate="yes" xml:space="preserve">
          <source>Structural directives</source>
          <target state="translated">構造指令</target>
        </trans-unit>
        <trans-unit id="8066b62e94107ae1169351af999664549945a21b" translate="yes" xml:space="preserve">
          <source>Structural directives are easy to recognize. An asterisk (*) precedes the directive attribute name as in this example.</source>
          <target state="translated">構造ディレクティブは簡単に認識できます。この例のように、ディレクティブの属性名の前にアスタリスク (*)を付けます。</target>
        </trans-unit>
        <trans-unit id="4ce0c591c6652f0c5882633624358c718ae028aa" translate="yes" xml:space="preserve">
          <source>Structural directives are responsible for HTML layout. They shape or reshape the DOM's &lt;em&gt;structure&lt;/em&gt;, typically by adding, removing, or manipulating elements.</source>
          <target state="translated">構造ディレクティブはHTMLレイアウトを担当します。通常、要素を追加、削除、または操作することにより、DOMの&lt;em&gt;構造&lt;/em&gt;を形成または再形成します。</target>
        </trans-unit>
        <trans-unit id="2f3e2ce91332d9933f8575349e3da3f714f37a09" translate="yes" xml:space="preserve">
          <source>Structural directives are responsible for HTML layout. They shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.</source>
          <target state="translated">構造ディレクティブは HTML のレイアウトを担当します。これらのディレクティブは DOM の構造を形作ったり再構築したりしますが、典型的には、それらが接続されているホスト要素を追加したり削除したり操作したりします。</target>
        </trans-unit>
        <trans-unit id="b01e264edb042adcbae3dc53ffa04a218c33e198" translate="yes" xml:space="preserve">
          <source>Structural directives&amp;mdash;change the DOM layout by adding and removing DOM elements.</source>
          <target state="translated">構造ディレクティブ-DOM要素を追加および削除してDOMレイアウトを変更します。</target>
        </trans-unit>
        <trans-unit id="14dde958744df7dbcb9c6e51cc208f4a18f03626" translate="yes" xml:space="preserve">
          <source>Structured</source>
          <target state="translated">Structured</target>
        </trans-unit>
        <trans-unit id="c64b6d8ab6a3167af6b211df05198e555a8951eb" translate="yes" xml:space="preserve">
          <source>Structures</source>
          <target state="translated">Structures</target>
        </trans-unit>
        <trans-unit id="c2ec7c3c78b23223f50b7bca6c140f83d82ecf3b" translate="yes" xml:space="preserve">
          <source>Stub method used to keep API compatible with AngularJS. This setting is configured through the LocationUpgradeModule's &lt;code&gt;&lt;a href=&quot;../../router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; method in your Angular app.</source>
          <target state="translated">APIをAngularJSと互換性を保つために使用されるスタブメソッド。この設定は、AngularアプリのLocationUpgradeModuleの &lt;code&gt;&lt;a href=&quot;../../router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; メソッドで構成されます。</target>
        </trans-unit>
        <trans-unit id="bcd07fedfd95e5214f741089e1d0a39e31c7b9e0" translate="yes" xml:space="preserve">
          <source>Stubbed &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; tests can confirm that a component with links and an outlet is setup properly, that the component has the links it should have, and that they are all pointing in the expected direction. These tests do not concern whether the app will succeed in navigating to the target component when the user clicks a link.</source>
          <target state="translated">Stubbed &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; テストは、リンクとアウトレットを備えたコンポーネントが正しく設定されていること、コンポーネントに必要なリンクがあり、それらがすべて予想される方向を指していることを確認できます。これらのテストは、ユーザーがリンクをクリックしたときにアプリがターゲットコンポーネントへの移動に成功するかどうかには関係ありません。</target>
        </trans-unit>
        <trans-unit id="354563d6d28e8670ae6ca88c776b6b1e603ace84" translate="yes" xml:space="preserve">
          <source>Stubbing the RouterLink and RouterOutlet is the best option for such limited testing goals. Relying on the real router would make them brittle. They could fail for reasons unrelated to the component. For example, a navigation guard could prevent an unauthorized user from visiting the &lt;code&gt;HeroListComponent&lt;/code&gt;. That's not the fault of the &lt;code&gt;AppComponent&lt;/code&gt; and no change to that component could cure the failed test.</source>
          <target state="translated">RouterLinkとRouterOutletをスタブ化することは、そのような限定されたテスト目標のための最良のオプションです。実際のルーターに依存すると、脆弱になります。コンポーネントに関係のない理由で失敗する可能性があります。たとえば、ナビゲーションガードは、権限のないユーザーが &lt;code&gt;HeroListComponent&lt;/code&gt; にアクセスするのを防ぐことができます。それは &lt;code&gt;AppComponent&lt;/code&gt; のせいではなく、そのコンポーネントへの変更が失敗したテストを修正することはできません。</target>
        </trans-unit>
        <trans-unit id="bdbd617c17e607896ba72fd053141808cddc6b7f" translate="yes" xml:space="preserve">
          <source>Stubbing unneeded components</source>
          <target state="translated">不要な部品のスタビング</target>
        </trans-unit>
        <trans-unit id="a86acaeeac75377170e5ebeec6d810b33b428d4e" translate="yes" xml:space="preserve">
          <source>Studying the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts&quot;&gt;source code for &lt;code&gt;NgIf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; is a great way to learn more.</source>
          <target state="translated">勉強&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts&quot;&gt;のためのソースコード &lt;code&gt;NgIf&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; は&lt;/a&gt;もっと学ぶための素晴らしい方法です。</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="8655d27a8c958b7c48581306ee9683f025d0cd25" translate="yes" xml:space="preserve">
          <source>Style 01-01</source>
          <target state="translated">スタイル 01-01</target>
        </trans-unit>
        <trans-unit id="4aea90a1ae5f7e9d4c6650d3266329a8cecc8b43" translate="yes" xml:space="preserve">
          <source>Style 01-02</source>
          <target state="translated">スタイル01-02</target>
        </trans-unit>
        <trans-unit id="f55a6e154fc6932171773407a6c17fdcd900b901" translate="yes" xml:space="preserve">
          <source>Style 02-01</source>
          <target state="translated">スタイル 02-01</target>
        </trans-unit>
        <trans-unit id="6fddbd8edac99f78150e7c1d42725d5789785492" translate="yes" xml:space="preserve">
          <source>Style 02-02</source>
          <target state="translated">スタイル 02-02</target>
        </trans-unit>
        <trans-unit id="e83e665367400b616d297ea377dbc6119ba6cbdb" translate="yes" xml:space="preserve">
          <source>Style 02-03</source>
          <target state="translated">スタイル 02-03</target>
        </trans-unit>
        <trans-unit id="6144b91d5b883e749f4a6dadb98b308696451257" translate="yes" xml:space="preserve">
          <source>Style 02-04</source>
          <target state="translated">スタイル 02-04</target>
        </trans-unit>
        <trans-unit id="706d717fa1cd34d44b82ec886fa969af7dd448eb" translate="yes" xml:space="preserve">
          <source>Style 02-05</source>
          <target state="translated">スタイル 02-05</target>
        </trans-unit>
        <trans-unit id="e5e296afaae2339d2d10b1d0d70d5ea42a6e134e" translate="yes" xml:space="preserve">
          <source>Style 02-06</source>
          <target state="translated">スタイル 02-06</target>
        </trans-unit>
        <trans-unit id="700efbe18a84b4498ff0a5ebd5c962481af97e6c" translate="yes" xml:space="preserve">
          <source>Style 02-07</source>
          <target state="translated">スタイル 02-07</target>
        </trans-unit>
        <trans-unit id="fa617f1fef663a84190b425a3e364b28ce517f96" translate="yes" xml:space="preserve">
          <source>Style 02-08</source>
          <target state="translated">スタイル 02-08</target>
        </trans-unit>
        <trans-unit id="493dae10b66d2babf905fe61eeb564d21b557225" translate="yes" xml:space="preserve">
          <source>Style 02-09</source>
          <target state="translated">スタイル 02-09</target>
        </trans-unit>
        <trans-unit id="b929d7404011b3f0cfc152ad9382a9949a1cda71" translate="yes" xml:space="preserve">
          <source>Style 02-10</source>
          <target state="translated">スタイル 02-10</target>
        </trans-unit>
        <trans-unit id="a3ef104ae9961a0a29543ccff47fb734c689f6bc" translate="yes" xml:space="preserve">
          <source>Style 02-11</source>
          <target state="translated">スタイル 02-11</target>
        </trans-unit>
        <trans-unit id="cf0a59581276c0fb0ac17b920d8ab64e28df0f46" translate="yes" xml:space="preserve">
          <source>Style 02-12</source>
          <target state="translated">スタイル02-12</target>
        </trans-unit>
        <trans-unit id="0b80a1901d32e9db876171df5848b9de86c71304" translate="yes" xml:space="preserve">
          <source>Style 04-01</source>
          <target state="translated">スタイル 04-01</target>
        </trans-unit>
        <trans-unit id="77218883e03332c65a62466d16ddcc85105e9150" translate="yes" xml:space="preserve">
          <source>Style 04-02</source>
          <target state="translated">スタイル 04-02</target>
        </trans-unit>
        <trans-unit id="ce385b3d475a45592807dd22eefd3c6861e19cdf" translate="yes" xml:space="preserve">
          <source>Style 04-03</source>
          <target state="translated">スタイル04-03</target>
        </trans-unit>
        <trans-unit id="c6882556fc4e054c2e09668d6fe2262be15b2173" translate="yes" xml:space="preserve">
          <source>Style 04-04</source>
          <target state="translated">スタイル 04-04</target>
        </trans-unit>
        <trans-unit id="f25601cdb2f6d47d54397476b43ec628290c8813" translate="yes" xml:space="preserve">
          <source>Style 04-05</source>
          <target state="translated">スタイル04-05</target>
        </trans-unit>
        <trans-unit id="cd207c5b27af4094bc7fcece72048e9fe4b0b2c3" translate="yes" xml:space="preserve">
          <source>Style 04-06</source>
          <target state="translated">スタイル 04-06</target>
        </trans-unit>
        <trans-unit id="29b1fb989c6d105f3c801e3564c0418a230b7adb" translate="yes" xml:space="preserve">
          <source>Style 04-07</source>
          <target state="translated">スタイル 04-07</target>
        </trans-unit>
        <trans-unit id="d63bbc77247f81425c9c05859638f65b164462ef" translate="yes" xml:space="preserve">
          <source>Style 04-08</source>
          <target state="translated">スタイル 04-08</target>
        </trans-unit>
        <trans-unit id="dca1a11207bd921006f3ac8d762e893d2d645267" translate="yes" xml:space="preserve">
          <source>Style 04-09</source>
          <target state="translated">スタイル 04-09</target>
        </trans-unit>
        <trans-unit id="6b7381fb1b2ee37a66fe9ef9dd56806aa709ad75" translate="yes" xml:space="preserve">
          <source>Style 04-10</source>
          <target state="translated">スタイル04-10</target>
        </trans-unit>
        <trans-unit id="8a233863a4b876d1c19bd360a9eec6d03c089985" translate="yes" xml:space="preserve">
          <source>Style 04-11</source>
          <target state="translated">スタイル04-11</target>
        </trans-unit>
        <trans-unit id="a060c3d3b207a8225c19405bbbce8cbf4f36a32c" translate="yes" xml:space="preserve">
          <source>Style 04-12</source>
          <target state="translated">スタイル04-12</target>
        </trans-unit>
        <trans-unit id="0c7621709de22e7cba3f9615798b8f5f3a64e76b" translate="yes" xml:space="preserve">
          <source>Style 05-02</source>
          <target state="translated">スタイル 05-02</target>
        </trans-unit>
        <trans-unit id="738649793a0b0ae075f2abf3b085c00b61e2cdf7" translate="yes" xml:space="preserve">
          <source>Style 05-03</source>
          <target state="translated">スタイル 05-03</target>
        </trans-unit>
        <trans-unit id="6cb17f91cfef9aa5b36b073b5e5ee75f36f7144c" translate="yes" xml:space="preserve">
          <source>Style 05-04</source>
          <target state="translated">スタイル 05-04</target>
        </trans-unit>
        <trans-unit id="c5353267445517bfdb843d1f18e524b3c9f1d89e" translate="yes" xml:space="preserve">
          <source>Style 05-12</source>
          <target state="translated">スタイル 05-12</target>
        </trans-unit>
        <trans-unit id="81e51acb9e3b52aaf70ff5492fe23a9bdb2a285a" translate="yes" xml:space="preserve">
          <source>Style 05-13</source>
          <target state="translated">スタイル 05-13</target>
        </trans-unit>
        <trans-unit id="72bf5c89871cf10f99b40d49149e1bdaf9e6590c" translate="yes" xml:space="preserve">
          <source>Style 05-14</source>
          <target state="translated">スタイル 05-14</target>
        </trans-unit>
        <trans-unit id="3ea64ee61c97d914db39262c73f88bff714ab595" translate="yes" xml:space="preserve">
          <source>Style 05-15</source>
          <target state="translated">スタイル 05-15</target>
        </trans-unit>
        <trans-unit id="238870d3a3bd622e67bfb4ac9f6ba99e117997c3" translate="yes" xml:space="preserve">
          <source>Style 05-16</source>
          <target state="translated">スタイル 05-16</target>
        </trans-unit>
        <trans-unit id="fa326bcb9a5dc57a51e1acfae6a4dea8cbd7f445" translate="yes" xml:space="preserve">
          <source>Style 05-17</source>
          <target state="translated">スタイル 05-17</target>
        </trans-unit>
        <trans-unit id="4ab096f0a78a037c3de35e63e70d27ce12ee3e43" translate="yes" xml:space="preserve">
          <source>Style 06-01</source>
          <target state="translated">スタイル 06-01</target>
        </trans-unit>
        <trans-unit id="5c9da24e465d26d22cc53eb4c417f9c22c4720f5" translate="yes" xml:space="preserve">
          <source>Style 06-03</source>
          <target state="translated">スタイル 06-03</target>
        </trans-unit>
        <trans-unit id="0f0d6f618ebd672575ae4573cea04bd000b11309" translate="yes" xml:space="preserve">
          <source>Style 07-01</source>
          <target state="translated">スタイル 07-01</target>
        </trans-unit>
        <trans-unit id="41700c9627c1716b093148da4f4ebbefad9e7201" translate="yes" xml:space="preserve">
          <source>Style 07-02</source>
          <target state="translated">スタイル 07-02</target>
        </trans-unit>
        <trans-unit id="2816de62afb72075811187fe54cfff1f66291ca1" translate="yes" xml:space="preserve">
          <source>Style 07-03</source>
          <target state="translated">スタイル 07-03</target>
        </trans-unit>
        <trans-unit id="7806af9da1ab012ff76791452da2609316bfa9af" translate="yes" xml:space="preserve">
          <source>Style 07-04</source>
          <target state="translated">スタイル 07-04</target>
        </trans-unit>
        <trans-unit id="44b3e7183c08194ef947158714922a67e94ddb8f" translate="yes" xml:space="preserve">
          <source>Style 08-01</source>
          <target state="translated">スタイル 08-01</target>
        </trans-unit>
        <trans-unit id="0ee5f0d1efe5d21182c59dc81789adf1c4a9e43b" translate="yes" xml:space="preserve">
          <source>Style 09-01</source>
          <target state="translated">スタイル09-01</target>
        </trans-unit>
        <trans-unit id="0810e6e1806946bed3058d5e8a4c6ea1abae7725" translate="yes" xml:space="preserve">
          <source>Style A-01</source>
          <target state="translated">スタイルA-01</target>
        </trans-unit>
        <trans-unit id="1efe377d1d77ee17e1305157c4de46739044c399" translate="yes" xml:space="preserve">
          <source>Style A-02</source>
          <target state="translated">スタイルA-02</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">スタイルガイド</target>
        </trans-unit>
        <trans-unit id="8a24de837c2eb6cdf18450f40f67b38197599a83" translate="yes" xml:space="preserve">
          <source>Style Guide: Pipe Names</source>
          <target state="translated">スタイルガイド。パイプの名前</target>
        </trans-unit>
        <trans-unit id="9307b7282569a9e06cf9f4b80692549de59cb8e8" translate="yes" xml:space="preserve">
          <source>Style binding</source>
          <target state="translated">スタイルバインディング</target>
        </trans-unit>
        <trans-unit id="d17d4ed499d56ddab01a94243ac75d53250a9e49" translate="yes" xml:space="preserve">
          <source>Style binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;, followed by a dot (&lt;code&gt;.&lt;/code&gt;) and the name of a CSS style property: &lt;code&gt;[style.style-property]&lt;/code&gt;.</source>
          <target state="translated">スタイルバインディング構文は、プロパティバインディングに似ています。角括弧の間の要素プロパティの代わりに、接頭辞 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; で始まり、その後にドット（ &lt;code&gt;.&lt;/code&gt; ）とCSSスタイルプロパティの名前が &lt;code&gt;[style.style-property]&lt;/code&gt; ます：[style.style-property]。</target>
        </trans-unit>
        <trans-unit id="798cb2eb99018bc816f3076a0a8bf26c5814e7f6" translate="yes" xml:space="preserve">
          <source>Style files in component metadata</source>
          <target state="translated">コンポーネントメタデータのスタイルファイル</target>
        </trans-unit>
        <trans-unit id="13b3e042bcc6d7cd5e0d140224554ba252a41539" translate="yes" xml:space="preserve">
          <source>Style preprocessor options</source>
          <target state="translated">スタイルプリプロセッサのオプション</target>
        </trans-unit>
        <trans-unit id="1aa693154d6248496022ececdb1dada7746d639d" translate="yes" xml:space="preserve">
          <source>Style scope</source>
          <target state="translated">スタイルスコープ</target>
        </trans-unit>
        <trans-unit id="db43570498a47b502419948a69d84fb9e317cd4f" translate="yes" xml:space="preserve">
          <source>Style sheets</source>
          <target state="translated">スタイルシート</target>
        </trans-unit>
        <trans-unit id="17a92ec390194ca839debbe0378b1e9f90a4c3f5" translate="yes" xml:space="preserve">
          <source>Style sheets give your application a nice look. In AngularJS, you specify the style sheets for your entire application. As the application grows over time, the styles for the many parts of the application merge, which can cause unexpected results. In Angular, you can still define style sheets for your entire application. But now you can also encapsulate a style sheet within a specific component.</source>
          <target state="translated">スタイルシートはあなたのアプリケーションに素敵な外観を与えます。AngularJSでは、アプリケーション全体のスタイルシートを指定します。アプリケーションが時間の経過とともに成長すると、アプリケーションの多くの部分のスタイルがマージされ、予期せぬ結果を引き起こす可能性があります。Angularでは、アプリケーション全体のスタイルシートを定義することができます。しかし、スタイルシートを特定のコンポーネント内にカプセル化することもできるようになりました。</target>
        </trans-unit>
        <trans-unit id="b7a277e6e718762252d1cac6bb0b6ea9b68bdf9c" translate="yes" xml:space="preserve">
          <source>Style strings added to the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; array &lt;em&gt;must be written in CSS&lt;/em&gt; because the CLI cannot apply a preprocessor to inline styles.</source>
          <target state="translated">CLIはプリプロセッサをインラインスタイルに適用できないため、 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; 配列に追加されたスタイル文字列&lt;em&gt;はCSSで記述する必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e113e16bbf082f9490cbf2b44611438e1391e832" translate="yes" xml:space="preserve">
          <source>Style the heroes</source>
          <target state="translated">英雄のスタイル</target>
        </trans-unit>
        <trans-unit id="5eab5630440ccf019fc5dc1802d69037b944404f" translate="yes" xml:space="preserve">
          <source>Style the selected hero</source>
          <target state="translated">選択したヒーローのスタイル</target>
        </trans-unit>
        <trans-unit id="82a3d10493dce218efe0f7977bfae55ae3c0ccfb" translate="yes" xml:space="preserve">
          <source>Style vocabulary</source>
          <target state="translated">スタイルボキャブラリー</target>
        </trans-unit>
        <trans-unit id="47f613f4bbd7675d5feb1ce896b4d6efd80377bc" translate="yes" xml:space="preserve">
          <source>StyleUrls</source>
          <target state="translated">StyleUrls</target>
        </trans-unit>
        <trans-unit id="5c2529a7512b8456ecfa00f92d655877dd8b90b6" translate="yes" xml:space="preserve">
          <source>Styles and scripts configuration</source>
          <target state="translated">スタイルとスクリプトの設定</target>
        </trans-unit>
        <trans-unit id="0edc5b2d63da3d85ebd67bd3beba07075c522b86" translate="yes" xml:space="preserve">
          <source>Styles and stylesheets identified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata are scoped to that specific component. The &lt;code&gt;heroes.component.css&lt;/code&gt; styles apply only to the &lt;code&gt;HeroesComponent&lt;/code&gt; and don't affect the outer HTML or the HTML in any other component.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータで識別されるスタイルとスタイルシートは、その特定のコンポーネントにスコープされます。 &lt;code&gt;heroes.component.css&lt;/code&gt; のスタイルはのみに適用され &lt;code&gt;HeroesComponent&lt;/code&gt; と外側のHTMLまたは他のコンポーネントでHTMLには影響を与えません。</target>
        </trans-unit>
        <trans-unit id="fd5b0bce26d4818e609d1581d3654fa0753fd8fd" translate="yes" xml:space="preserve">
          <source>Styles configuration</source>
          <target state="translated">スタイル設定</target>
        </trans-unit>
        <trans-unit id="1378d81e695cef4d64e37c64b8e8eff7fff2d2c2" translate="yes" xml:space="preserve">
          <source>Styles in component metadata</source>
          <target state="translated">コンポーネントのメタデータのスタイル</target>
        </trans-unit>
        <trans-unit id="23aae4ba9cb7cd71cc0f2c7b6470f5ac5c21722b" translate="yes" xml:space="preserve">
          <source>Styling the host and child components</source>
          <target state="translated">ホストコンポーネントと子コンポーネントのスタイリング</target>
        </trans-unit>
        <trans-unit id="6e1cd724f97ed48d626d171bc1b8f9491fcd67e0" translate="yes" xml:space="preserve">
          <source>Subclasses</source>
          <target state="translated">Subclasses</target>
        </trans-unit>
        <trans-unit id="9ce6ba148fe8d9ab4a1efa44f043d11727e7f6ee" translate="yes" xml:space="preserve">
          <source>Sublime Text</source>
          <target state="translated">崇高なテキスト</target>
        </trans-unit>
        <trans-unit id="f5d46536917e62bd1be2d18f9d2c7d548fb75de6" translate="yes" xml:space="preserve">
          <source>Submit the form with &lt;code&gt;ngSubmit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngSubmit&lt;/code&gt; を使用してフォームを送信します</target>
        </trans-unit>
        <trans-unit id="f52f8c0e6a97223779d22bf66c8e2fada6102bec" translate="yes" xml:space="preserve">
          <source>Submitting the form isn't terribly dramatic at the moment.</source>
          <target state="translated">フォームを提出することは、今のところ劇的ではありません。</target>
        </trans-unit>
        <trans-unit id="d6981f74767d6c63d6062ad21b3bdfcd0d0d6602" translate="yes" xml:space="preserve">
          <source>Subscribe</source>
          <target state="translated">Subscribe</target>
        </trans-unit>
        <trans-unit id="ad97311e7c2fb91310858358719a941b418273d5" translate="yes" xml:space="preserve">
          <source>Subscribe and listen to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices&quot;&gt;Web Push Notifications&lt;/a&gt; through Angular Service Worker.</source>
          <target state="translated">Angular Service Workerを通じて&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices&quot;&gt;Webプッシュ通知&lt;/a&gt;をサブスクライブして聞きます。</target>
        </trans-unit>
        <trans-unit id="55ffbbfe98a9e67c323baa04596ff3f3634355e1" translate="yes" xml:space="preserve">
          <source>Subscribe in &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; で購読する</target>
        </trans-unit>
        <trans-unit id="4147506e4124de00f100ef91b8a3f1c59c78221c" translate="yes" xml:space="preserve">
          <source>Subscribe to update notifications from the Service Worker, trigger update checks, and forcibly activate updates.</source>
          <target state="translated">サービスワーカーからの更新通知の購読、更新チェックのトリガー、強制的に更新を有効化します。</target>
        </trans-unit>
        <trans-unit id="a87fcf31451c4a5845a5c94b268b44533e029a5f" translate="yes" xml:space="preserve">
          <source>Subscribes to Web Push Notifications, after requesting and receiving user permission.</source>
          <target state="translated">ユーザーの許可を要求して受信した後、Web プッシュ通知を購読します。</target>
        </trans-unit>
        <trans-unit id="1e24453f7659eb1b1111775a54afd763fe517caf" translate="yes" xml:space="preserve">
          <source>Subscribes to a host element event (&lt;code&gt;click&lt;/code&gt;) with a directive/component method (&lt;code&gt;onClick&lt;/code&gt;), optionally passing an argument (&lt;code&gt;$event&lt;/code&gt;).</source>
          <target state="translated">ディレクティブ/コンポーネントメソッド（ &lt;code&gt;onClick&lt;/code&gt; ）を使用してホスト要素イベント（ &lt;code&gt;click&lt;/code&gt; ）をサブスクライブし、オプションで引数（ &lt;code&gt;$event&lt;/code&gt; ）を渡します。</target>
        </trans-unit>
        <trans-unit id="d095583b0ad0de9ed206550de2ce051cda4763bd" translate="yes" xml:space="preserve">
          <source>Subscribes to the platform's &lt;code&gt;popState&lt;/code&gt; events.</source>
          <target state="translated">プラットフォームの &lt;code&gt;popState&lt;/code&gt; イベントをサブスクライブします。</target>
        </trans-unit>
        <trans-unit id="bc85e879262a5f99c43a2b322c9fb5b8fbe5a21d" translate="yes" xml:space="preserve">
          <source>Subscribing</source>
          <target state="translated">Subscribing</target>
        </trans-unit>
        <trans-unit id="8fde48f31aff21f9652066ed6732f7e7dbae712e" translate="yes" xml:space="preserve">
          <source>Subscription</source>
          <target state="translated">Subscription</target>
        </trans-unit>
        <trans-unit id="473fb3dae53fd356007426bcc001827eca1f4ff9" translate="yes" xml:space="preserve">
          <source>Subsequent apps that you generate in the workspace reside in the &lt;code&gt;projects/&lt;/code&gt; subfolder.</source>
          <target state="translated">ワークスペースで生成する後続のアプリは、 &lt;code&gt;projects/&lt;/code&gt; サブフォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="bc7af4ebabce4f8a546ee140a3846cf69bfa6c68" translate="yes" xml:space="preserve">
          <source>Succeeds even if there was linting errors.</source>
          <target state="translated">リントエラーがあっても成功。</target>
        </trans-unit>
        <trans-unit id="c87c69d42dd464b89184cb9c765feccaddfed9cc" translate="yes" xml:space="preserve">
          <source>Such objects don't have application interfaces and therefore aren't well represented by a class. They're better represented by a token that is both unique and symbolic, a JavaScript object that has a friendly name but won't conflict with another token that happens to have the same name.</source>
          <target state="translated">このようなオブジェクトはアプリケーションインターフェイスを持っていないので、クラスではうまく表現できません。これらのオブジェクトは、ユニークでシンボリックなトークンによって表現されるのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="55c29209f134a45a30d7eba7a07fc67d5c7d8a6b" translate="yes" xml:space="preserve">
          <source>Such partial and intermediate files need their own names. Follow the doc sample naming convention. Add a number before the file extension as illustrated here:</source>
          <target state="translated">このような部分ファイルや中間ファイルには、それぞれ独自の名前が必要です。docサンプルの命名規則に従ってください。以下の図のように、ファイル拡張子の前に数字を追加します。</target>
        </trans-unit>
        <trans-unit id="26a490bcaf4c8b593e38570b5b856dec6204c072" translate="yes" xml:space="preserve">
          <source>Such tests are easy to find.</source>
          <target state="translated">このような検査は簡単に見つけることができます。</target>
        </trans-unit>
        <trans-unit id="06aee9edd367cbab035bb100ff86698218a24a6c" translate="yes" xml:space="preserve">
          <source>Such tests require creating the component's host element in the browser DOM, as Angular does, and investigating the component class's interaction with the DOM as described by its template.</source>
          <target state="translated">このようなテストでは、AngularのようにブラウザのDOMにコンポーネントのホスト要素を作成し、そのテンプレートに記述されているDOMとコンポーネントクラスの相互作用を調べる必要があります。</target>
        </trans-unit>
        <trans-unit id="5057182ef8774088bdb5234ca8a8f6c39dfa86d5" translate="yes" xml:space="preserve">
          <source>Suffix to add when computing the name of the factory module for a given module name.</source>
          <target state="translated">指定されたモジュール名の工場モジュール名を計算する際に追加するサフィックス。</target>
        </trans-unit>
        <trans-unit id="c694c6baead0b9fec8b7d19e3c3b3e94e68c5559" translate="yes" xml:space="preserve">
          <source>Suggested polyfills</source>
          <target state="translated">推奨されるポリフィル</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="36a34ea7dcfc6ffbb22285c0e1b244755a431fe7" translate="yes" xml:space="preserve">
          <source>Super-constructor for all responses.</source>
          <target state="translated">すべての応答のスーパーコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="4d9b4eacf1004ed910ee4ed98ce82a901369c93e" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; subsystem.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サブシステムのテストモジュールを提供します。</target>
        </trans-unit>
        <trans-unit id="d841e33650f585cec77c125afc74e973ec895855" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; subsystem.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サブシステムのテストモジュールを提供します。</target>
        </trans-unit>
        <trans-unit id="ed92fa9e8a12ebddb7e4fe08847d953cf04e775b" translate="yes" xml:space="preserve">
          <source>Supply a custom provider with &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/inject&quot;&gt;Injectを使用&lt;/a&gt;してカスタムプロバイダーを提供する</target>
        </trans-unit>
        <trans-unit id="fb6bfb683b08f86999ae88758ea765b871ea0886" translate="yes" xml:space="preserve">
          <source>Support for both &lt;a href=&quot;forms&quot;&gt;template-driven&lt;/a&gt; and &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;. For information about choosing the best forms approach for your app, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to forms&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;forms&quot;&gt;テンプレート駆動型&lt;/a&gt;と&lt;a href=&quot;reactive-forms&quot;&gt;反応型の&lt;/a&gt;両方のサポート。アプリに最適なフォームアプローチの選択については、フォームの&lt;a href=&quot;forms-overview&quot;&gt;概要を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="6015aea6d6a423f3219184739c58237f25d45fcf" translate="yes" xml:space="preserve">
          <source>Support for the development cycle</source>
          <target state="translated">開発サイクルのサポート</target>
        </trans-unit>
        <trans-unit id="372ca4c2c8a38a4b2b242eed719cb1a8e9d99f89" translate="yes" xml:space="preserve">
          <source>Support for the various Angular run-time platforms is provided by the &lt;code&gt;@angular/platform-*&lt;/code&gt; packages. These packages allow applications that make use of &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/common&lt;/code&gt; to execute in different environments by providing implementation for gathering user input and rendering UIs for the given platform. Isolating platform-specific functionality allows the developer to make platform-independent use of the rest of the framework.</source>
          <target state="translated">さまざまなAngularランタイムプラットフォームのサポートは、 &lt;code&gt;@angular/platform-*&lt;/code&gt; パッケージによって提供されます。これらのパッケージを使用すると、 &lt;code&gt;@angular/core&lt;/code&gt; および &lt;code&gt;@angular/common&lt;/code&gt; を使用するアプリケーションが、特定のプラットフォームのユーザー入力を収集してUIをレンダリングする実装を提供することにより、異なる環境で実行できます。プラットフォーム固有の機能を分離することにより、開発者はプラットフォームに依存しない残りのフレームワークを使用できます。</target>
        </trans-unit>
        <trans-unit id="c0412188bcfb5b8097ddeac6298bca4025080b18" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; element selector was deprecated in v6. It has been deprecated to be consistent with other core Angular selectors, which are typically written in kebab-case.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 要素セレクターの使用のサポートはv6で廃止されました。他のコアAngularセレクターとの一貫性のために非推奨になりました。これらは通常、ケバブケースで記述されます。</target>
        </trans-unit>
        <trans-unit id="830687a29f3f8ae36893b51a852df8d7e3509f45" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; element selector has been deprecated in Angular v6 and will be removed in Angular v9.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 要素セレクターの使用のサポートは、Angular v6では廃止され、Angular v9では削除されます。</target>
        </trans-unit>
        <trans-unit id="a564022cdf9de9547b8c4914ac55334ba4f6035c" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives was deprecated in version 6.</source>
          <target state="translated">リアクションフォームディレクティブでの &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 入力プロパティと &lt;code&gt;ngModelChange&lt;/code&gt; イベントの使用のサポートは、バージョン6で廃止されました。</target>
        </trans-unit>
        <trans-unit id="c0ab9213c409bdce1f6766b7561afbb3df924eb0" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives has been deprecated in Angular v6 and will be removed in Angular v7.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 入力プロパティと反応型フォームディレクティブでの &lt;code&gt;ngModelChange&lt;/code&gt; イベントの使用のサポートは、Angular v6で廃止され、Angular v7で削除されます。</target>
        </trans-unit>
        <trans-unit id="34ea22dd63bbc9c4be88fea09a83dfacdd1533b4" translate="yes" xml:space="preserve">
          <source>Support more macroTasks</source>
          <target state="translated">より多くのマクロタスクをサポート</target>
        </trans-unit>
        <trans-unit id="a09e60728ec31e51301e3117166fddf94a8baea0" translate="yes" xml:space="preserve">
          <source>Support multiple validators by passing the functions in as an array.</source>
          <target state="translated">関数を配列として渡すことで、複数のバリデータをサポートします。</target>
        </trans-unit>
        <trans-unit id="42d644d79b7c3f0b258e0ff900434475b7495f55" translate="yes" xml:space="preserve">
          <source>Support packages</source>
          <target state="translated">サポートパッケージ</target>
        </trans-unit>
        <trans-unit id="55b111d8249f52e207f12ff5fe56fb3473ed81b2" translate="yes" xml:space="preserve">
          <source>Support policy and schedule</source>
          <target state="translated">サポートポリシーとスケジュール</target>
        </trans-unit>
        <trans-unit id="48012bbbd369e7cf9dbf01a37cf616f579aef634" translate="yes" xml:space="preserve">
          <source>Supported Features</source>
          <target state="translated">サポートされている機能</target>
        </trans-unit>
        <trans-unit id="9c185d3e1b7aa6c33b8cde226ee45b7e6534974e" translate="yes" xml:space="preserve">
          <source>Supported binary operator</source>
          <target state="translated">サポートされているバイナリ演算子</target>
        </trans-unit>
        <trans-unit id="6dc1054caa7ede6eabeaab20afa9b88a18116373" translate="yes" xml:space="preserve">
          <source>Supported classes and functions</source>
          <target state="translated">対応しているクラスや機能</target>
        </trans-unit>
        <trans-unit id="452c87fb69e1c927c2dffbf878f867c26c6a461b" translate="yes" xml:space="preserve">
          <source>Supported decorators</source>
          <target state="translated">サポートされているデコレーター</target>
        </trans-unit>
        <trans-unit id="a9637b3c337e189d588ceb71a8c3e0c61c7b3d62" translate="yes" xml:space="preserve">
          <source>Supported natively as of version 63. In older versions: Set the &lt;code&gt;dom.webcomponents.enabled&lt;/code&gt; and &lt;code&gt;dom.webcomponents.customelements.enabled&lt;/code&gt; preferences to true.</source>
          <target state="translated">バージョン63以降、ネイティブでサポートされています。以前のバージョンの場合： &lt;code&gt;dom.webcomponents.enabled&lt;/code&gt; および &lt;code&gt;dom.webcomponents.customelements.enabled&lt;/code&gt; 設定をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="149e59e854d1a930b197517343595cab9c83d3d5" translate="yes" xml:space="preserve">
          <source>Supported natively.</source>
          <target state="translated">ネイティブに対応しています。</target>
        </trans-unit>
        <trans-unit id="bb6cc835f2a9162101b9f580bc00f613a031b252" translate="yes" xml:space="preserve">
          <source>Supported prefix operator</source>
          <target state="translated">サポートされているプレフィックス演算子</target>
        </trans-unit>
        <trans-unit id="6a66aec706ed285ace0836213a36cd2b9a69b52d" translate="yes" xml:space="preserve">
          <source>Supported update paths</source>
          <target state="translated">サポートされている更新パス</target>
        </trans-unit>
        <trans-unit id="7092a8531c4f0a36c977743d2fb6d4828df0fc89" translate="yes" xml:space="preserve">
          <source>Supported versions</source>
          <target state="translated">サポートされているバージョン</target>
        </trans-unit>
        <trans-unit id="68abb1b6a421b6a057714c502175fb1e4d0785a4" translate="yes" xml:space="preserve">
          <source>Supports delivery of Angular apps on a server, for use with &lt;a href=&quot;../guide/glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; (SSR).</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#server-side-rendering&quot;&gt;サーバーサイドレンダリング&lt;/a&gt;（SSR）で使用するための、サーバーでのAngularアプリの配信をサポートします。</target>
        </trans-unit>
        <trans-unit id="fb1ffb2f1d5a195313b3cdd770d1f6b7bf9c7009" translate="yes" xml:space="preserve">
          <source>Supports execution of Angular apps on different supported browsers.</source>
          <target state="translated">サポートされている異なるブラウザ上でのAngularアプリの実行をサポートします。</target>
        </trans-unit>
        <trans-unit id="72657c85f5b110b8ad4f655973c381d6d88dd9c3" translate="yes" xml:space="preserve">
          <source>Supports static, parameterized, redirect, and wildcard routes, as well as custom route data and resolve methods.</source>
          <target state="translated">スタティックルート、パラメータ化ルート、リダイレクトルート、ワイルドカードルート、カスタムルートデータと解決メソッドをサポートします。</target>
        </trans-unit>
        <trans-unit id="7011c39e6768e7218d6f19fe24834274bd8e3880" translate="yes" xml:space="preserve">
          <source>Supports the upgrade path from AngularJS to Angular, allowing components from both systems to be used in the same application.</source>
          <target state="translated">AngularJSからAngularへのアップグレードパスをサポートし、両システムのコンポーネントを同じアプリケーションで使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="ffa38c192edac80816d007088a189ee1553fd813" translate="yes" xml:space="preserve">
          <source>Suppose a module requires a customized &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; that adds a special header for all Http requests. If another module elsewhere in the application also customizes &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; or merely imports the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, it could override this module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; provider, losing the special header. The server will reject http requests from this module.</source>
          <target state="translated">モジュールが、すべてのHttpリクエストに特別なヘッダーを追加するカスタマイズされた &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; を必要とするとします。アプリケーションの他の場所にある別のモジュールも &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; をカスタマイズするか、単に &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートする場合、このモジュールの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; プロバイダーをオーバーライドして、特別なヘッダーを失う可能性があります。サーバーはこのモジュールからのhttpリクエストを拒否します。</target>
        </trans-unit>
        <trans-unit id="02d18e71b14a468fe5b6fe81d6582fa4ff952551" translate="yes" xml:space="preserve">
          <source>Suppose a parent component navigation bar had &quot;forward&quot; and &quot;back&quot; buttons that scrolled through the list of heroes. Each click navigated imperatively to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; with the next or previous &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">親コンポーネントのナビゲーションバーに、ヒーローのリストをスクロールする「進む」ボタンと「戻る」ボタンがあるとします。クリックする &lt;code&gt;HeroDetailComponent&lt;/code&gt; に、次または前の &lt;code&gt;id&lt;/code&gt; 持つHeroDetailComponentに強制的に移動しました。</target>
        </trans-unit>
        <trans-unit id="73875b081ad6712e3cca37634ad81e0aabf43018" translate="yes" xml:space="preserve">
          <source>Suppose an old component depends upon the &lt;code&gt;OldLogger&lt;/code&gt; class. &lt;code&gt;OldLogger&lt;/code&gt; has the same interface as &lt;code&gt;NewLogger&lt;/code&gt;, but for some reason you can't update the old component to use it.</source>
          <target state="translated">古いコンポーネントが &lt;code&gt;OldLogger&lt;/code&gt; クラスに依存しているとします。 &lt;code&gt;OldLogger&lt;/code&gt; のインターフェースは &lt;code&gt;NewLogger&lt;/code&gt; と同じですが、何らかの理由で古いコンポーネントを更新して使用できません。</target>
        </trans-unit>
        <trans-unit id="393692d189825d9307fd6c7fe80a2cd354ed6034" translate="yes" xml:space="preserve">
          <source>Suppose that the &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; had logic to manage and restore changes. That would be a pretty easy task for a simple hero tax return. In the real world, with a rich tax return data model, the change management would be tricky. You could delegate that management to a helper service, as this example does.</source>
          <target state="translated">仮定し &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; は、変更を管理し、復元するためのロジックを持っていました。これは、単純な英雄の確定申告ではかなり簡単な作業です。現実の世界では、豊富な納税申告データモデルがあり、変更管理はトリッキーです。この例のように、その管理をヘルパーサービスに委任できます。</target>
        </trans-unit>
        <trans-unit id="25aea682ecf4709d352723de7edbd90f7beb9d93" translate="yes" xml:space="preserve">
          <source>Suppose that you want to say that something was &quot;updated x minutes ago&quot;. In English, depending upon the number of minutes, you could display &quot;just now&quot;, &quot;one minute ago&quot;, or &quot;x minutes ago&quot; (with x being the actual number). Other languages might express the cardinality differently.</source>
          <target state="translated">何かが「x分前に更新されました」と言いたいとします。英語では、分数に応じて、&quot;just now&quot;、&quot;one minutes ago&quot;、または &quot;x minutes ago &quot;と表示することができます(xは実際の数です)。他の言語では、カーディナリティの表現が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="52f33491eb18bba650ee1a092238a98b0b605102" translate="yes" xml:space="preserve">
          <source>Suppose the user enters the letters &quot;abc&quot;, and then backspaces to remove them one by one. Here's what the UI displays:</source>
          <target state="translated">ユーザーが「abc」の文字を入力し、バックスペースで1つずつ削除していくとします。UIの表示は次のようになります。</target>
        </trans-unit>
        <trans-unit id="d7069d4f08e8837edb06ea21d283e4edd2d1b1de" translate="yes" xml:space="preserve">
          <source>Suppose we have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element and want to know its &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">我々が持っていると仮定し &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素を、その知りたい &lt;code&gt;type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c56e3107218078534c09e6533e96893d6ef445a" translate="yes" xml:space="preserve">
          <source>Suppose you want to read a configuration file and then generate a form based on that configuration. If that form will need additional customization by the user, it might work best as a schematic. However, if the forms will always be the same and not need much customization by developers, then you could create a dynamic component that takes the configuration and generates the form. In general, the more complex the customization, the more useful the schematic approach.</source>
          <target state="translated">設定ファイルを読み込んで、その設定に基づいてフォームを生成したいとします。そのフォームがユーザによる追加のカスタマイズを必要とする場合、それは回路図として最適に機能するかもしれません。しかし、フォームが常に同じで、開発者によるカスタマイズをあまり必要としないのであれば、設定を受け取ってフォームを生成する動的なコンポーネントを作成することができます。一般的には、カスタマイズが複雑であればあるほど、スケマティックなアプローチが有効です。</target>
        </trans-unit>
        <trans-unit id="59237b414b792a395067be846fe0e7beefa8df0b" translate="yes" xml:space="preserve">
          <source>Surely you noticed the asterisk (*) prefix to the directive name and wondered why it is necessary and what it does.</source>
          <target state="translated">きっと、ディレクティブ名の前にアスタリスク (*)がついていることに気がついて、 なぜそれが必要なのか、何をするのか、と疑問に思ったことでしょう。</target>
        </trans-unit>
        <trans-unit id="b214d7f5503a587eb43c1ce5ab34f417045155cc" translate="yes" xml:space="preserve">
          <source>Surprisingly, the &lt;code&gt;AdminModule&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; preload. Something is blocking it.</source>
          <target state="translated">驚いたことに、 &lt;code&gt;AdminModule&lt;/code&gt; はプリロードしませ&lt;em&gt;ん&lt;/em&gt;。何かがそれをブロックしています。</target>
        </trans-unit>
        <trans-unit id="8a925dc523db7e7f6a2babc32186c1a961796ab3" translate="yes" xml:space="preserve">
          <source>SwPush</source>
          <target state="translated">SwPush</target>
        </trans-unit>
        <trans-unit id="9f27068dde7716de3ec4b61fb1f7fbb0fa22a06e" translate="yes" xml:space="preserve">
          <source>SwRegistrationOptions</source>
          <target state="translated">SwRegistrationOptions</target>
        </trans-unit>
        <trans-unit id="79b152292931b9029acf6214e3a35f2f497eb2ba" translate="yes" xml:space="preserve">
          <source>SwUpdate</source>
          <target state="translated">SwUpdate</target>
        </trans-unit>
        <trans-unit id="12ff3885d54d4fd6b48e48b47e4fa9d91086d058" translate="yes" xml:space="preserve">
          <source>Switch directives work as well with native elements and web components too. For example, you could replace the &lt;code&gt;&amp;lt;app-best-item&amp;gt;&lt;/code&gt; switch case with the following.</source>
          <target state="translated">スイッチディレクティブは、ネイティブ要素やWebコンポーネントでも機能します。たとえば、 &lt;code&gt;&amp;lt;app-best-item&amp;gt;&lt;/code&gt; スイッチケースを次のように置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="33234fb80d85cf56feb93d467d387491c1b2475b" translate="yes" xml:space="preserve">
          <source>Switch the bootstrap method of the application from the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to the Angular way.</source>
          <target state="translated">アプリケーションのブートストラップメソッドを &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; からAngularに切り替えます。</target>
        </trans-unit>
        <trans-unit id="f6b6874ca57485e6385c6bf8186046e4a67f2559" translate="yes" xml:space="preserve">
          <source>Switching to &lt;em&gt;production mode&lt;/em&gt; makes it run faster by disabling development specific checks such as the dual change detection cycles.</source>
          <target state="translated">&lt;em&gt;本番モードに&lt;/em&gt;切り替えると、デュアル変更検出サイクルなどの開発固有のチェックが無効になるため、実行速度が速くなります。</target>
        </trans-unit>
        <trans-unit id="7f052c63532052c45dde829915673716b21669b2" translate="yes" xml:space="preserve">
          <source>Switching to TypeScript</source>
          <target state="translated">TypeScriptへの切り替え</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="bf651e969e01eb1f873351e5967dd48f8903f1bb" translate="yes" xml:space="preserve">
          <source>Symbol Name</source>
          <target state="translated">シンボル名</target>
        </trans-unit>
        <trans-unit id="0ffab2f658ffa680e2c69e9b420273e89027867e" translate="yes" xml:space="preserve">
          <source>Symbol reference expected</source>
          <target state="translated">シンボル参照期待値</target>
        </trans-unit>
        <trans-unit id="f3494e771ca3509c91264f0e82dd38b796ebd086" translate="yes" xml:space="preserve">
          <source>Symbol used between time units. Example: 10:52</source>
          <target state="translated">時間単位の間に使用される記号です。例:10:52</target>
        </trans-unit>
        <trans-unit id="e40de653307a889667fd3b8b60322928538d73e9" translate="yes" xml:space="preserve">
          <source>Symbols and file names</source>
          <target state="translated">シンボルとファイル名</target>
        </trans-unit>
        <trans-unit id="6eb4870d40315c26b4100eb0b4abc30c88c7e0eb" translate="yes" xml:space="preserve">
          <source>Symbols that can be used to replace placeholders in number patterns. Examples are based on &lt;code&gt;en-US&lt;/code&gt; values.</source>
          <target state="translated">数字パターンのプレースホルダーを置き換えるために使用できる記号。例は &lt;code&gt;en-US&lt;/code&gt; 値に基づいています。</target>
        </trans-unit>
        <trans-unit id="77c61919f7c0335c38d9155372ee85055a736cc1" translate="yes" xml:space="preserve">
          <source>Synchronous</source>
          <target state="translated">Synchronous</target>
        </trans-unit>
        <trans-unit id="81fcba9c890b5b9df0951a561afa635cb63d6429" translate="yes" xml:space="preserve">
          <source>Synchronous tests</source>
          <target state="translated">同期テスト</target>
        </trans-unit>
        <trans-unit id="efa1ae6c647ae04a352ce83e8b956e4548c0a09f" translate="yes" xml:space="preserve">
          <source>Synchronous validator function composed of all the synchronous validators registered with this directive.</source>
          <target state="translated">このディレクティブに登録されているすべての同期バリデータからなる同期バリデータ関数です。</target>
        </trans-unit>
        <trans-unit id="51c06766f034703a307b97a685afb1562f8e64c2" translate="yes" xml:space="preserve">
          <source>Syncs &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a form control element by name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; で既存の &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスのFormControlをフォームコントロール要素に同期します。</target>
        </trans-unit>
        <trans-unit id="f961f76d72f8572cbf883b0eda6d37d9322f25ac" translate="yes" xml:space="preserve">
          <source>Syncs a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a form control element by name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; で既存の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; のFormControlをフォームコントロール要素に同期します。</target>
        </trans-unit>
        <trans-unit id="8cd38404d1df6db7a6fae66425bda9b4e3309919" translate="yes" xml:space="preserve">
          <source>Syncs a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a form control element by name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; で既存の &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; のFormControlをフォームコントロール要素に同期します。</target>
        </trans-unit>
        <trans-unit id="086c4672a7169938b2a6514a98e7ed9e01527448" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">ネストされた &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスをDOM要素に同期します。</target>
        </trans-unit>
        <trans-unit id="fc865b5e1817fe14c0c7ea54ca007f535109e025" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">ネストされた &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスをDOM要素に同期します。</target>
        </trans-unit>
        <trans-unit id="ba2e022b2265fa63e13b98eafe19811e46520332" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">ネストされた &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; をDOM要素に同期します。</target>
        </trans-unit>
        <trans-unit id="70738eb6d2e19d76da3cfc549c9c13b9312021b2" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">ネストされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; をDOM要素に同期します。</target>
        </trans-unit>
        <trans-unit id="61af0c00422dee458259702f4176eec58c0c8042" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">ネストされた &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; をDOM要素に同期します。</target>
        </trans-unit>
        <trans-unit id="e43e097926a53a2908c4af6cd3bbae1f671e4adb" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">ネストされた &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; をDOM要素に同期します。</target>
        </trans-unit>
        <trans-unit id="ad27b48f5dbc27604bca1812e101c55e46e2eee1" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">スタンドアロンの &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスをフォームコントロール要素に同期します。</target>
        </trans-unit>
        <trans-unit id="fc68ea9b2876f7990354e54d126dd4bfe6d18749" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">スタンドアロンの &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスをフォームコントロール要素に同期します。</target>
        </trans-unit>
        <trans-unit id="7e74270b6f12da6ecbf8b3bf65beff6d58cc992b" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">スタンドアロンの &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスをフォームコントロール要素に同期します。</target>
        </trans-unit>
        <trans-unit id="1172a5b10335976e2b7c9c3fdc13f55d23facb32" translate="yes" xml:space="preserve">
          <source>Syncs an existing &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">既存の &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスをDOM要素に同期します。</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="3e2ad7607ba4c7d34af5aba42d88e71b8d7b2d5d" translate="yes" xml:space="preserve">
          <source>Syntax Examples</source>
          <target state="translated">構文例</target>
        </trans-unit>
        <trans-unit id="81b08f26e2d68214bb4f1a772ea8cdfa473815a1" translate="yes" xml:space="preserve">
          <source>Syntax examples</source>
          <target state="translated">構文例</target>
        </trans-unit>
        <trans-unit id="6691b44362a007fed00597742195f79ce997ae58" translate="yes" xml:space="preserve">
          <source>SystemJsNgModuleLoader</source>
          <target state="translated">SystemJsNgModuleLoader</target>
        </trans-unit>
        <trans-unit id="1ed04efd0b8e3b6249919e01cdc720a8e8ecf639" translate="yes" xml:space="preserve">
          <source>SystemJsNgModuleLoaderConfig</source>
          <target state="translated">SystemJsNgModuleLoaderConfig</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="08e80e877114a02316e2a85c727dc2ec2e8d050b" translate="yes" xml:space="preserve">
          <source>TRANSLATIONS</source>
          <target state="translated">TRANSLATIONS</target>
        </trans-unit>
        <trans-unit id="fb3e2ec398b2e2de9887ef22a66c4a02e397504f" translate="yes" xml:space="preserve">
          <source>TRANSLATIONS_FORMAT</source>
          <target state="translated">TRANSLATIONS_FORMAT</target>
        </trans-unit>
        <trans-unit id="bd652fbce1c3cb7239b3c2d66f09ef88cef2bb2f" translate="yes" xml:space="preserve">
          <source>Tab-pane example</source>
          <target state="translated">タブペインの例</target>
        </trans-unit>
        <trans-unit id="1a428989bd13dceabd89b698d9fa38eb8a0d175c" translate="yes" xml:space="preserve">
          <source>Table of contents</source>
          <target state="translated">目次</target>
        </trans-unit>
        <trans-unit id="193daf137ed8b89de36d47c3df5fd8f66c0e1d14" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="translated">Tables</target>
        </trans-unit>
        <trans-unit id="4bddf5a71780ecc0e28e12eabc19502b8eec1d47" translate="yes" xml:space="preserve">
          <source>Tagged template expressions are not supported</source>
          <target state="translated">タグ付きテンプレート表現はサポートされていません</target>
        </trans-unit>
        <trans-unit id="b934954a57aa53ca1df92279825e0d4c54b36857" translate="yes" xml:space="preserve">
          <source>Take a closer look at the methods in &lt;code&gt;ad-banner.component.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ad-banner.component.ts&lt;/code&gt; のメソッドを詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="eac79b3b60173923dd4dec55995d0549258112a1" translate="yes" xml:space="preserve">
          <source>Take care when writing a component that inherits from another component. If the base component has injected dependencies, you must re-provide and re-inject them in the derived class and then pass them down to the base class through the constructor.</source>
          <target state="translated">他のコンポーネントを継承するコンポーネントを書くときには注意が必要です。ベースのコンポーネントに依存関係が注入されている場合は、派生クラスで再提供して再注入し、コンストラクタを介してベースクラスに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="959d7ee2d7b3d044cad9c2f02a2ffab28937e75a" translate="yes" xml:space="preserve">
          <source>Take it a step further. Consider the following router link that navigates from the root of the application down to the &lt;em&gt;Dragon Crisis&lt;/em&gt;:</source>
          <target state="translated">さらに一歩進んでください。アプリケーションのルートから&lt;em&gt;Dragon Crisisに&lt;/em&gt;移動する次のルーターリンクを考えてみます。</target>
        </trans-unit>
        <trans-unit id="5e1997f28885ce15e075eba3fa736d8419f8699e" translate="yes" xml:space="preserve">
          <source>Take the final step and detach the admin feature set from the main application. The root &lt;code&gt;AppModule&lt;/code&gt; must neither load nor reference the &lt;code&gt;AdminModule&lt;/code&gt; or its files.</source>
          <target state="translated">最後のステップを実行し、メインアプリケーションから管理機能セットを切り離します。ルート &lt;code&gt;AppModule&lt;/code&gt; は、 &lt;code&gt;AdminModule&lt;/code&gt; またはそのファイルをロードしたり参照したりしてはなりません。</target>
        </trans-unit>
        <trans-unit id="e561ddf5a7dab6002aff68f7f2cbac99e4ca5385" translate="yes" xml:space="preserve">
          <source>Take the relevant parts of the crisis retrieval logic in &lt;code&gt;CrisisDetailComponent.ngOnInit&lt;/code&gt; and move them into the &lt;code&gt;CrisisDetailResolverService&lt;/code&gt;. Import the &lt;code&gt;Crisis&lt;/code&gt; model, &lt;code&gt;CrisisService&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; so you can navigate elsewhere if you can't fetch the crisis.</source>
          <target state="translated">危機検索ロジックの関連部分乗り &lt;code&gt;CrisisDetailComponent.ngOnInit&lt;/code&gt; をしてにそれらを移動 &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; 。危機を取得できない場合に他の場所に移動できるように、 &lt;code&gt;Crisis&lt;/code&gt; モデル、 &lt;code&gt;CrisisService&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; インポートします。</target>
        </trans-unit>
        <trans-unit id="b5ea73c38525ab2fdecbff1c0aa0160e994a362d" translate="yes" xml:space="preserve">
          <source>Takes an array of &lt;a href=&quot;iterabledifferfactory&quot;&gt;&lt;code&gt;IterableDifferFactory&lt;/code&gt;&lt;/a&gt; and returns a provider used to extend the inherited &lt;a href=&quot;iterablediffers&quot;&gt;&lt;code&gt;IterableDiffers&lt;/code&gt;&lt;/a&gt; instance with the provided factories and return a new &lt;a href=&quot;iterablediffers&quot;&gt;&lt;code&gt;IterableDiffers&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;iterabledifferfactory&quot;&gt; &lt;code&gt;IterableDifferFactory&lt;/code&gt; &lt;/a&gt;の配列を取り、継承された&lt;a href=&quot;iterablediffers&quot;&gt; &lt;code&gt;IterableDiffers&lt;/code&gt; &lt;/a&gt;インスタンスを提供されたファクトリで拡張し、新しい&lt;a href=&quot;iterablediffers&quot;&gt; &lt;code&gt;IterableDiffers&lt;/code&gt; &lt;/a&gt;インスタンスを返すために使用されるプロバイダーを返します。</target>
        </trans-unit>
        <trans-unit id="1783048e5410fe461b1992e43a0627a2db079105" translate="yes" xml:space="preserve">
          <source>Takes an array of &lt;a href=&quot;keyvaluedifferfactory&quot;&gt;&lt;code&gt;KeyValueDifferFactory&lt;/code&gt;&lt;/a&gt; and returns a provider used to extend the inherited &lt;a href=&quot;keyvaluediffers&quot;&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; instance with the provided factories and return a new &lt;a href=&quot;keyvaluediffers&quot;&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;keyvaluedifferfactory&quot;&gt; &lt;code&gt;KeyValueDifferFactory&lt;/code&gt; &lt;/a&gt;の配列を受け取り、提供されたファクトリで継承された&lt;a href=&quot;keyvaluediffers&quot;&gt; &lt;code&gt;KeyValueDiffers&lt;/code&gt; &lt;/a&gt;インスタンスを拡張するために使用されるプロバイダーを返し、新しい&lt;a href=&quot;keyvaluediffers&quot;&gt; &lt;code&gt;KeyValueDiffers&lt;/code&gt; &lt;/a&gt;インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="5a019a610b764a5ac0661621fc04397adf8ab98b" translate="yes" xml:space="preserve">
          <source>Takes the name of the project, as specified in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file. When a project name is not supplied, it will execute for all projects.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; ワークスペース構成ファイルの &lt;code&gt;projects&lt;/code&gt; セクションで指定されているプロジェクトの名前を取ります。プロジェクト名が指定されていない場合は、すべてのプロジェクトに対して実行されます。</target>
        </trans-unit>
        <trans-unit id="20daeff082d03a0b38c83ac26093ddda49f24ad0" translate="yes" xml:space="preserve">
          <source>Talk to the server through a service</source>
          <target state="translated">サービスを介してサーバーに話しかける</target>
        </trans-unit>
        <trans-unit id="9d79ab61a4348e4625bb78bbbf19b6ed3b9efae8" translate="yes" xml:space="preserve">
          <source>Talking to DOM API directly isn't a best practice.</source>
          <target state="translated">DOM API に直接話しかけるのはベストプラクティスではありません。</target>
        </trans-unit>
        <trans-unit id="31cc6a243c52473560fc05d841db5aeaed55aeb4" translate="yes" xml:space="preserve">
          <source>Tame the complexity with a &lt;code&gt;Page&lt;/code&gt; class that handles access to component properties and encapsulates the logic that sets them.</source>
          <target state="translated">コンポーネントのプロパティへのアクセスを処理し、それらを設定するロジックをカプセル化する &lt;code&gt;Page&lt;/code&gt; クラスを使用して複雑さを緩和します。</target>
        </trans-unit>
        <trans-unit id="98d70538f3b6756483784e61cbff4af80626f263" translate="yes" xml:space="preserve">
          <source>Tap into the Observable</source>
          <target state="translated">観測可能なものを利用する</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="ae9b707e7a77c61b2721b8988c5d55a82eceb725" translate="yes" xml:space="preserve">
          <source>Target configuration</source>
          <target state="translated">ターゲットの設定</target>
        </trans-unit>
        <trans-unit id="a14b9e2d8db8b39d7783f3b50bdd3cd885de75a2" translate="yes" xml:space="preserve">
          <source>Target event</source>
          <target state="translated">対象イベント</target>
        </trans-unit>
        <trans-unit id="e30cbaa2faccc704914fd3fc89ef1c63d8bda97b" translate="yes" xml:space="preserve">
          <source>Target strings</source>
          <target state="translated">対象となる文字列</target>
        </trans-unit>
        <trans-unit id="2e46f5c0d09cedf26b72fc0ef1be54d1d8560002" translate="yes" xml:space="preserve">
          <source>Target to extract from.</source>
          <target state="translated">抽出するターゲット。</target>
        </trans-unit>
        <trans-unit id="faf4691c6436e38baa1090283557c861280888fc" translate="yes" xml:space="preserve">
          <source>Target to serve.</source>
          <target state="translated">奉仕することを目標に</target>
        </trans-unit>
        <trans-unit id="00830f9fc21a74f272379fb547328f3109f36ad9" translate="yes" xml:space="preserve">
          <source>Targets are defined in the &lt;code&gt;angular.json&lt;/code&gt;&lt;a href=&quot;workspace-config&quot;&gt;CLI configuration file&lt;/a&gt;. A target specifies the builder to use, its default options configuration, and named alternative configurations. The Architect tool uses the target definition to resolve input options for a given run.</source>
          <target state="translated">ターゲットは、 &lt;code&gt;angular.json&lt;/code&gt; &lt;a href=&quot;workspace-config&quot;&gt;CLI構成ファイルで&lt;/a&gt;定義されます。ターゲットは、使用するビルダー、そのデフォルトのオプション構成、および名前付きの代替構成を指定します。Architectツールは、ターゲット定義を使用して、特定の実行の入力オプションを解決します。</target>
        </trans-unit>
        <trans-unit id="7bb0ddf9221c03b806b03c209e8366000124aa15" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="translated">Task</target>
        </trans-unit>
        <trans-unit id="73418a3fdba46d16932dc2fc9afcd9d8987e56c9" translate="yes" xml:space="preserve">
          <source>Teach &lt;em&gt;AuthGuard&lt;/em&gt; to authenticate</source>
          <target state="translated">&lt;em&gt;AuthGuard&lt;/em&gt;に認証を教える</target>
        </trans-unit>
        <trans-unit id="25507d522fc8f4937e463f4125763af49129dda6" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; results in a route hit when the &lt;em&gt;remaining&lt;/em&gt;, unmatched segments of the URL match &lt;code&gt;''&lt;/code&gt;. In this example, the redirect is in a top level route so the &lt;em&gt;remaining&lt;/em&gt; URL and the &lt;em&gt;entire&lt;/em&gt; URL are the same thing.</source>
          <target state="translated">技術的には、 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; は、URLの&lt;em&gt;残りの&lt;/em&gt;一致しないセグメントが一致したときにルートヒットを引き起こします &lt;code&gt;''&lt;/code&gt; 。この例では、リダイレクトは最上位のルートにあるため、&lt;em&gt;残りの&lt;/em&gt; URLとURL &lt;em&gt;全体&lt;/em&gt;は同じものになります。</target>
        </trans-unit>
        <trans-unit id="00a93838e750a0730a8d6f5c1fedce685237d2d9" translate="yes" xml:space="preserve">
          <source>Technically, Angular is matching the name to a directive &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, one of the property names listed in the directive's &lt;code&gt;inputs&lt;/code&gt; array or a property decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;. Such inputs map to the directive's own properties.</source>
          <target state="translated">技術的には、角度は、ディレクティブに名前を一致さ &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 、ディレクティブの中に記載されているプロパティ名の1 &lt;code&gt;inputs&lt;/code&gt; 配列または飾ら財産 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 。このような入力は、ディレクティブ自体のプロパティにマッピングされます。</target>
        </trans-unit>
        <trans-unit id="b63c149f79d0f3eff56cd6ac95c7fc7cf404954e" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; that you want the full response with the &lt;code&gt;observe&lt;/code&gt; option:</source>
          <target state="translated">知らせる &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 使用すると、との完全な応答をしたいという &lt;code&gt;observe&lt;/code&gt; オプションを：</target>
        </trans-unit>
        <trans-unit id="e72e5c26ac0705579a0a676c6f42c12b1eaa9288" translate="yes" xml:space="preserve">
          <source>Tell Visual Studio how to handle requests for route app pages by adding these rewrite rules near the bottom of the &lt;code&gt;web.config&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;web.config&lt;/code&gt; の下部近くにこれらの書き換えルールを追加して、ルートアプリページのリクエストを処理する方法をVisual Studioに通知します。</target>
        </trans-unit>
        <trans-unit id="fd2a05c99f33c07757e85e16590f2a556e55c4be" translate="yes" xml:space="preserve">
          <source>Tells the router if this URL should be processed.</source>
          <target state="translated">この URL を処理するかどうかをルータに通知します。</target>
        </trans-unit>
        <trans-unit id="a732bd01a721431b70704355d2b67249c978ef6b" translate="yes" xml:space="preserve">
          <source>Template &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt; variable names have their own namespaces. The &lt;code&gt;hero&lt;/code&gt; in &lt;code&gt;let hero&lt;/code&gt; is never the same variable as the &lt;code&gt;hero&lt;/code&gt; declared as &lt;code&gt;#hero&lt;/code&gt;.</source>
          <target state="translated">テンプレート&lt;em&gt;入力&lt;/em&gt;および&lt;em&gt;参照&lt;/em&gt;変数名には、独自の名前空間があります。 &lt;code&gt;hero&lt;/code&gt; 中 &lt;code&gt;let hero&lt;/code&gt; 同じ変数になることはありません &lt;code&gt;hero&lt;/code&gt; として宣言 &lt;code&gt;#hero&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="efb3147068725b40c3436e7283942bba6c112bbf" translate="yes" xml:space="preserve">
          <source>Template Syntax</source>
          <target state="translated">テンプレート構文</target>
        </trans-unit>
        <trans-unit id="fa0b782eed89b03079da5213bda92d328c3427f9" translate="yes" xml:space="preserve">
          <source>Template basics</source>
          <target state="translated">テンプレートの基本</target>
        </trans-unit>
        <trans-unit id="a1af2aeaf6c6487cc178cd2993fe7b1850971a31" translate="yes" xml:space="preserve">
          <source>Template context names take precedence over component context names. In &lt;code&gt;deleteHero(hero)&lt;/code&gt; above, the &lt;code&gt;hero&lt;/code&gt; is the template input variable, not the component's &lt;code&gt;hero&lt;/code&gt; property.</source>
          <target state="translated">テンプレートコンテキスト名は、コンポーネントコンテキスト名よりも優先されます。 &lt;code&gt;deleteHero(hero)&lt;/code&gt; 上記、 &lt;code&gt;hero&lt;/code&gt; テンプレート入力変数ではなく、コンポーネントのある &lt;code&gt;hero&lt;/code&gt; 性。</target>
        </trans-unit>
        <trans-unit id="966e03574060cf4a9841a3250497825600ba22a4" translate="yes" xml:space="preserve">
          <source>Template directives</source>
          <target state="translated">テンプレートディレクティブ</target>
        </trans-unit>
        <trans-unit id="22f6072957722cb25d4ed1dbd7d78214be5c501f" translate="yes" xml:space="preserve">
          <source>Template expression operators</source>
          <target state="translated">テンプレート式演算子</target>
        </trans-unit>
        <trans-unit id="2f36556182fc7cb18248ad8e7e7c234fbd3994a2" translate="yes" xml:space="preserve">
          <source>Template expressions</source>
          <target state="translated">テンプレート式</target>
        </trans-unit>
        <trans-unit id="b04a51d2287d24d74cc9ae7ed21f0d60df535ade" translate="yes" xml:space="preserve">
          <source>Template expressions cannot refer to anything in the global namespace, except &lt;code&gt;undefined&lt;/code&gt;. They can't refer to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;. Additionally, they can't call &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;Math.max()&lt;/code&gt; and they are restricted to referencing members of the expression context.</source>
          <target state="translated">テンプレート式は、 &lt;code&gt;undefined&lt;/code&gt; を除いて、グローバル名前空間内の何も参照できません。 &lt;code&gt;window&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 参照することはできません。さらに、 &lt;code&gt;console.log()&lt;/code&gt; または &lt;code&gt;Math.max()&lt;/code&gt; を呼び出すことはできず、式コンテキストのメンバーの参照に制限されています。</target>
        </trans-unit>
        <trans-unit id="f2d8f3b4a1d8af00d592cfd96bb7560d9f5866ed" translate="yes" xml:space="preserve">
          <source>Template inline or template file?</source>
          <target state="translated">テンプレートインラインかテンプレートファイルか?</target>
        </trans-unit>
        <trans-unit id="793aeab565d46f4d09daa487f15eafb8d01c9f1b" translate="yes" xml:space="preserve">
          <source>Template inline styles</source>
          <target state="translated">テンプレートのインラインスタイル</target>
        </trans-unit>
        <trans-unit id="d62c70e2c1bef2a7459f5c8ca8f10edf6b1dfe3a" translate="yes" xml:space="preserve">
          <source>Template input variable</source>
          <target state="translated">テンプレート入力変数</target>
        </trans-unit>
        <trans-unit id="f17cb990d8b43df9e431abefc871bb8bdc3335a8" translate="yes" xml:space="preserve">
          <source>Template input variables</source>
          <target state="translated">テンプレート入力変数</target>
        </trans-unit>
        <trans-unit id="276d9c745b9dcc1832f7aa2ab10c8b5f8828a8c0" translate="yes" xml:space="preserve">
          <source>Template link tags</source>
          <target state="translated">テンプレートリンクタグ</target>
        </trans-unit>
        <trans-unit id="71806c9bd79ddb04621f77d670bf1aba53662c4e" translate="yes" xml:space="preserve">
          <source>Template options</source>
          <target state="translated">テンプレートオプション</target>
        </trans-unit>
        <trans-unit id="110185098cd1b2e55b879ad1f4d0ed2e6537d738" translate="yes" xml:space="preserve">
          <source>Template reference variable considerations</source>
          <target state="translated">テンプレート参照変数の考察</target>
        </trans-unit>
        <trans-unit id="a8e4799378055749eb9da93d9510e6a7d58a3f24" translate="yes" xml:space="preserve">
          <source>Template reference variables (&lt;code&gt;#var&lt;/code&gt;)</source>
          <target state="translated">テンプレート参照変数（ &lt;code&gt;#var&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2af0573e0dd90a3ab5f9e206a130e358bd371c6e" translate="yes" xml:space="preserve">
          <source>Template statements</source>
          <target state="translated">テンプレート文</target>
        </trans-unit>
        <trans-unit id="5d2b93ac612841845d0661b85c29eb2b1cd1cd29" translate="yes" xml:space="preserve">
          <source>Template statements cannot refer to anything in the global namespace. They can't refer to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;. They can't call &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;Math.max&lt;/code&gt;.</source>
          <target state="translated">テンプレートステートメントは、グローバル名前空間の何も参照できません。 &lt;code&gt;window&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 参照することはできません。 &lt;code&gt;console.log&lt;/code&gt; または &lt;code&gt;Math.max&lt;/code&gt; を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="a2e4c3e156daaa11223357c6c7fee079f5ca4d6c" translate="yes" xml:space="preserve">
          <source>Template statements have side effects</source>
          <target state="translated">テンプレート文には副作用がある</target>
        </trans-unit>
        <trans-unit id="dd88988e24117f6f25330c54600c109c783b9beb" translate="yes" xml:space="preserve">
          <source>Template syntax</source>
          <target state="translated">テンプレートの構文</target>
        </trans-unit>
        <trans-unit id="89aee637286de733fbf004914edfe700df91d5ca" translate="yes" xml:space="preserve">
          <source>Template translations</source>
          <target state="translated">テンプレート翻訳</target>
        </trans-unit>
        <trans-unit id="2199cac1a49cc0b5bc0238a44ca609a8fdc777e0" translate="yes" xml:space="preserve">
          <source>Template validation produces error messages when a type error is detected in a template binding expression, similar to how type errors are reported by the TypeScript compiler against code in a &lt;code&gt;.ts&lt;/code&gt; file.</source>
          <target state="translated">型のエラーが &lt;code&gt;.ts&lt;/code&gt; ファイルのコードに対してTypeScriptコンパイラによって報告されるのと同様に、テンプレートの検証では、型のエラーがテンプレートバインディング式で検出されるとエラーメッセージが生成されます。</target>
        </trans-unit>
        <trans-unit id="a05afb3e2a0b85002981023973fd725884721e1f" translate="yes" xml:space="preserve">
          <source>Template variable references</source>
          <target state="translated">テンプレート変数の参照</target>
        </trans-unit>
        <trans-unit id="58ff34d9a94fa1bca16ea2429b64af9ee09f9766" translate="yes" xml:space="preserve">
          <source>Template-driven</source>
          <target state="translated">Template-driven</target>
        </trans-unit>
        <trans-unit id="947ab7967c8b9de424b7b48fb2e8825139f85613" translate="yes" xml:space="preserve">
          <source>Template-driven Forms</source>
          <target state="translated">テンプレート駆動型フォーム</target>
        </trans-unit>
        <trans-unit id="8e7766bb17d998e7bcccf98bd89bf899b82f86be" translate="yes" xml:space="preserve">
          <source>Template-driven forms</source>
          <target state="translated">テンプレート駆動型のフォーム</target>
        </trans-unit>
        <trans-unit id="eacc6fdad7fae7150f374795874d76dda2db76be" translate="yes" xml:space="preserve">
          <source>Template-driven validation</source>
          <target state="translated">テンプレート主導の検証</target>
        </trans-unit>
        <trans-unit id="49f5a0c2c82d30a031cbdf85339bb35e8de1b886" translate="yes" xml:space="preserve">
          <source>Template-reference variables such as &lt;code&gt;#heroForm&lt;/code&gt; and &lt;code&gt;#name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;#heroForm&lt;/code&gt; や &lt;code&gt;#name&lt;/code&gt; などのテンプレート参照変数。</target>
        </trans-unit>
        <trans-unit id="871350ea04e981df978b9ee88f97415601759ccc" translate="yes" xml:space="preserve">
          <source>TemplateRef</source>
          <target state="translated">TemplateRef</target>
        </trans-unit>
        <trans-unit id="ac46ec20b12e03a347c43dafd18b8503a6feac19" translate="yes" xml:space="preserve">
          <source>Templates and views</source>
          <target state="translated">テンプレートとビュー</target>
        </trans-unit>
        <trans-unit id="404ac9359f458c08768cf6531e667d2854940fba" translate="yes" xml:space="preserve">
          <source>Templates are the user-facing part of an Angular application and are written in HTML. The following table lists some of the key AngularJS template features with their equivalent Angular template syntax.</source>
          <target state="translated">テンプレートはAngularアプリケーションのユーザーインターフェース部分であり、HTMLで書かれています。次の表は、主要なAngularJSテンプレートの機能とそれに相当するAngularテンプレートの構文を示しています。</target>
        </trans-unit>
        <trans-unit id="7d179b96d34c29e0196caf2baca8ede8163168d8" translate="yes" xml:space="preserve">
          <source>Templates, directives, and data binding</source>
          <target state="translated">テンプレート、ディレクティブ、データバインディング</target>
        </trans-unit>
        <trans-unit id="33a55a545f80619e2e19f636478745467cc32004" translate="yes" xml:space="preserve">
          <source>Temporarily add a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; named &lt;code&gt;spy&lt;/code&gt; to the &lt;em&gt;Name&lt;/em&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag and use it to display the input's CSS classes.</source>
          <target state="translated">一時的に追加し&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;たテンプレートの参照変数&lt;/a&gt;という名前の &lt;code&gt;spy&lt;/code&gt; に&lt;em&gt;名前&lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグを入力してのCSSクラスを表示するためにそれを使用。</target>
        </trans-unit>
        <trans-unit id="7f931515810af2d942cb1d62e9908a51d3886a8a" translate="yes" xml:space="preserve">
          <source>Test &lt;em&gt;DashboardHeroComponent&lt;/em&gt; stand-alone</source>
          <target state="translated">スタンドアロンのテスト&lt;em&gt;DashboardHeroComponent&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa5885e1b1f33914443039f015df6b87c1a577a9" translate="yes" xml:space="preserve">
          <source>Test Type</source>
          <target state="translated">テストタイプ</target>
        </trans-unit>
        <trans-unit id="6896d81b81e460b5ab300516bb7a77d7c1527681" translate="yes" xml:space="preserve">
          <source>Test a component class on its own as you would test a service class.</source>
          <target state="translated">サービス・クラスをテストするように、コンポーネント・クラスを単独でテストします。</target>
        </trans-unit>
        <trans-unit id="2448fa765af5ce19934b50addc880031820bc7a1" translate="yes" xml:space="preserve">
          <source>Test debugging</source>
          <target state="translated">テストデバッグ</target>
        </trans-unit>
        <trans-unit id="c1fecee23c2fad624d9f5999f217bf731328967f" translate="yes" xml:space="preserve">
          <source>Test file name and location</source>
          <target state="translated">テストファイル名と場所</target>
        </trans-unit>
        <trans-unit id="0b4483791cb553bd9da8d0099a6a90f9bcbbbf63" translate="yes" xml:space="preserve">
          <source>Test it</source>
          <target state="translated">それをテストしてください。</target>
        </trans-unit>
        <trans-unit id="a8407b2c9b9349ac41ecd56aec5c890c53b0b024" translate="yes" xml:space="preserve">
          <source>Test it as a stand-alone component.</source>
          <target state="translated">スタンドアロンのコンポーネントとしてテストします。</target>
        </trans-unit>
        <trans-unit id="24d3085b21a512d75865d8bceffdd551bcf73352" translate="yes" xml:space="preserve">
          <source>Test it as used by &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; で使用されるようにテストします。</target>
        </trans-unit>
        <trans-unit id="cc31d0d30b6280bc2d5300ca22178dcce3ff5d97" translate="yes" xml:space="preserve">
          <source>Test it as used by a substitute for &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; の代わりに使用してテストします。</target>
        </trans-unit>
        <trans-unit id="8aa4d961b3eeea3f063253c0ba4dfe97056a0596" translate="yes" xml:space="preserve">
          <source>Test modules and platforms for individual platforms are available from '@angular/&amp;lt;platform_name&amp;gt;/testing'.</source>
          <target state="translated">個々のプラットフォームのテストモジュールとプラットフォームは、「@ angular / &amp;lt;platform_name&amp;gt; / testing」から入手できます。</target>
        </trans-unit>
        <trans-unit id="f6332a2e843d893064dd38a7519d7af9fee2c152" translate="yes" xml:space="preserve">
          <source>Test that &lt;strong&gt;&lt;em&gt;both&lt;/em&gt;&lt;/strong&gt; input properties are set initially and that button clicks trigger the expected &lt;code&gt;ngOnChanges&lt;/code&gt; calls and values:</source>
          <target state="translated">テストはそれを&lt;strong&gt;&lt;em&gt;両方の&lt;/em&gt;&lt;/strong&gt;入力特性は、初期設定され、そのボタンのクリックは、予想トリガ &lt;code&gt;ngOnChanges&lt;/code&gt; の呼び出しと値：</target>
        </trans-unit>
        <trans-unit id="b830fb4922eb986456c661bb752dde86c342564f" translate="yes" xml:space="preserve">
          <source>Test that clicking the &lt;em&gt;Agree&lt;/em&gt; and &lt;em&gt;Disagree&lt;/em&gt; buttons update the appropriate counters:</source>
          <target state="translated">クリックすることをテストし&lt;em&gt;同意&lt;/em&gt;し、&lt;em&gt;同意しない&lt;/em&gt;ボタンは、適切なカウンタを更新します。</target>
        </trans-unit>
        <trans-unit id="2ea1ba39844fea58edcd1af16ad25d6919716e86" translate="yes" xml:space="preserve">
          <source>Test that the seconds displayed in the parent template match the seconds displayed in the child's status message. Test also that clicking the &lt;em&gt;Stop&lt;/em&gt; button pauses the countdown timer:</source>
          <target state="translated">親テンプレートに表示される秒が、子のステータスメッセージに表示される秒と一致することをテストします。[ &lt;em&gt;停止&lt;/em&gt; ]ボタンをクリックすると、カウントダウンタイマーが一時停止することもテストします。</target>
        </trans-unit>
        <trans-unit id="45f1bff59c9d9d842f747fd8277989f00b5d93fc" translate="yes" xml:space="preserve">
          <source>Test the &quot;Share&quot; button:</source>
          <target state="translated">シェア」ボタンをテストします。</target>
        </trans-unit>
        <trans-unit id="d81f957521355323aeca520db19f5edf8e370479" translate="yes" xml:space="preserve">
          <source>Test the router by clicking a product name. The app displays the product details component, which currently always says &quot;product-details works!&quot; (We'll fix this in the next section.)</source>
          <target state="translated">商品名をクリックしてルーターをテストします。アプリには製品の詳細コンポーネントが表示されますが、現在は常に &quot;product-details works! (これは次のセクションで修正します)。</target>
        </trans-unit>
        <trans-unit id="1b3ebf0a33fd2cdd1645c2654b9fc72083bf1031" translate="yes" xml:space="preserve">
          <source>Test to see if the differ knows how to diff this kind of object.</source>
          <target state="translated">この種のオブジェクトをdiffする方法をdiffが知っているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="989e322a6f1139d1353ac93e44e55e319afbc019" translate="yes" xml:space="preserve">
          <source>Test whether a key exists in the store.</source>
          <target state="translated">ストアにキーが存在するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e619874937772363a1c2da2331f3ba776b465a2a" translate="yes" xml:space="preserve">
          <source>Test your cart component.</source>
          <target state="translated">カートのコンポーネントをテストします。</target>
        </trans-unit>
        <trans-unit id="99f07ad05e41dcec36a36e807face510d90d322b" translate="yes" xml:space="preserve">
          <source>Test your shipping prices feature:</source>
          <target state="translated">配送料の機能をテストします。</target>
        </trans-unit>
        <trans-unit id="be104cc054c0fcb9b37c08765773727a64cec717" translate="yes" xml:space="preserve">
          <source>TestBed</source>
          <target state="translated">TestBed</target>
        </trans-unit>
        <trans-unit id="9088ec50aaa13740a9d6dbb00c51142edc2e8808" translate="yes" xml:space="preserve">
          <source>TestBedStatic</source>
          <target state="translated">TestBedStatic</target>
        </trans-unit>
        <trans-unit id="7514db3c9bb60b98c0cfca5106beca4b49ed97ce" translate="yes" xml:space="preserve">
          <source>TestComponentRenderer</source>
          <target state="translated">TestComponentRenderer</target>
        </trans-unit>
        <trans-unit id="4b705f1f1aacbc87dfafe7ad9846c3e675f6db17" translate="yes" xml:space="preserve">
          <source>TestModuleMetadata</source>
          <target state="translated">TestModuleMetadata</target>
        </trans-unit>
        <trans-unit id="7b5b8bd0f077ed931708cc0d311b207cedc70ab6" translate="yes" xml:space="preserve">
          <source>TestRequest</source>
          <target state="translated">TestRequest</target>
        </trans-unit>
        <trans-unit id="c9e78f83c634dce62c7e36294672609e7678c20c" translate="yes" xml:space="preserve">
          <source>Testability</source>
          <target state="translated">Testability</target>
        </trans-unit>
        <trans-unit id="5cdf6feb6534f6bc92bba0edf1ff9781944b5a79" translate="yes" xml:space="preserve">
          <source>Testability hook</source>
          <target state="translated">テスト可能性フック</target>
        </trans-unit>
        <trans-unit id="da504355c0338312be93a22ec235340a0cd93b24" translate="yes" xml:space="preserve">
          <source>TestabilityRegistry</source>
          <target state="translated">TestabilityRegistry</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="f186e27eb7e517b4b8211f5e3987e28713883285" translate="yes" xml:space="preserve">
          <source>Testing HTTP requests</source>
          <target state="translated">HTTP リクエストのテスト</target>
        </trans-unit>
        <trans-unit id="57ba27a4c362253fca0f0eaa9ec92fa28974c2d1" translate="yes" xml:space="preserve">
          <source>Testing HTTP services</source>
          <target state="translated">HTTP サービスのテスト</target>
        </trans-unit>
        <trans-unit id="76004ae163e3baecfc0ef2edf0092063c811094c" translate="yes" xml:space="preserve">
          <source>Testing Utility APIs</source>
          <target state="translated">ユーティリティAPIのテスト</target>
        </trans-unit>
        <trans-unit id="3591b1f3793535608545f3b06aaac5398962d724" translate="yes" xml:space="preserve">
          <source>Testing a builder</source>
          <target state="translated">ビルダーのテスト</target>
        </trans-unit>
        <trans-unit id="118ae999614ef20321dc13d67908393c582ec10a" translate="yes" xml:space="preserve">
          <source>Testing components with dependencies</source>
          <target state="translated">依存関係を持つコンポーネントのテスト</target>
        </trans-unit>
        <trans-unit id="0c1a0b297a16cb16b5427fe7c2629cc52c7885ef" translate="yes" xml:space="preserve">
          <source>Testing configuration.</source>
          <target state="translated">設定をテストします。</target>
        </trans-unit>
        <trans-unit id="ce31601d12cfb46e7ca9204dea5a6c8548b4090c" translate="yes" xml:space="preserve">
          <source>Testing for errors</source>
          <target state="translated">エラーのテスト</target>
        </trans-unit>
        <trans-unit id="6d6a52e29c3585e98a136bdd3c004782df3376aa" translate="yes" xml:space="preserve">
          <source>Testing plays a large part in complex applications and a simpler testing strategy is useful when validating that your forms function correctly. Reactive forms and template-driven forms have different levels of reliance on rendering the UI to perform assertions based on form control and form field changes. The following examples demonstrate the process of testing forms with reactive and template-driven forms.</source>
          <target state="translated">複雑なアプリケーションではテストが大きな役割を果たしますが、フォームが正しく機能するかどうかを検証する際には、よりシンプルなテスト戦略が役立ちます。リアクティブなフォームとテンプレート駆動型のフォームは、フォームコントロールとフォームフィールドの変更に基づいてアサーションを実行するために UI をレンダリングすることに依存するレベルが異なります。以下の例では、リアクティブフォームとテンプレート駆動フォームを使用したフォームのテストプロセスを示しています。</target>
        </trans-unit>
        <trans-unit id="b05c22b69bf75d2207c5b9b5ed499a08af28e732" translate="yes" xml:space="preserve">
          <source>Testing reactive forms</source>
          <target state="translated">反応するフォームのテスト</target>
        </trans-unit>
        <trans-unit id="4468a085563566bac21b54d700de2a4f27490d54" translate="yes" xml:space="preserve">
          <source>Testing services with the &lt;em&gt;TestBed&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;TestBedによる&lt;/em&gt;サービスのテスト&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ecea04e4730b110b857580106d9bbe5105ac269a" translate="yes" xml:space="preserve">
          <source>Testing template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームのテスト</target>
        </trans-unit>
        <trans-unit id="697051d918a08244ddad35b32bd220aad30731f8" translate="yes" xml:space="preserve">
          <source>Testing the component &lt;em&gt;class&lt;/em&gt; is as easy as testing a service.</source>
          <target state="translated">コンポーネント&lt;em&gt;クラスの&lt;/em&gt;テストは、サービスのテストと同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="039c2cc87c7b0778c57ccee1c7470749c1926dca" translate="yes" xml:space="preserve">
          <source>Testing the specific use of the &lt;code&gt;HighlightDirective&lt;/code&gt; within the &lt;code&gt;AboutComponent&lt;/code&gt; requires only the techniques explored above (in particular the &lt;a href=&quot;testing#nested-component-tests&quot;&gt;&quot;Shallow test&quot;&lt;/a&gt; approach).</source>
          <target state="translated">&lt;code&gt;AboutComponent&lt;/code&gt; 内での &lt;code&gt;HighlightDirective&lt;/code&gt; の特定の使用をテストするには、上記で検討した手法（特に&lt;a href=&quot;testing#nested-component-tests&quot;&gt;「浅いテスト」&lt;/a&gt;アプローチ）のみが必要です。</target>
        </trans-unit>
        <trans-unit id="3d4f5b3e2a6878f7cf4f7973ba68c545ec004c46" translate="yes" xml:space="preserve">
          <source>Testing with &lt;em&gt;ActivatedRouteStub&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ActivatedRouteStubを使用した&lt;/em&gt;テスト&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7758900c8180a1d000869ec3a8a1ccd3ecff2333" translate="yes" xml:space="preserve">
          <source>Testing with a spy</source>
          <target state="translated">スパイを使ったテスト</target>
        </trans-unit>
        <trans-unit id="d02a000b264944782c696348f9263db99fe9a4a0" translate="yes" xml:space="preserve">
          <source>Testing without &lt;em&gt;beforeEach()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;beforeEach（）を使用し&lt;/em&gt;ないテスト&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="888d9d0f4ee5e8f0c157b91c6eb659ea756add43" translate="yes" xml:space="preserve">
          <source>Tests can explore how the &lt;code&gt;HeroDetailComponent&lt;/code&gt; responds to different &lt;code&gt;id&lt;/code&gt; parameter values by manipulating the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; injected into the component's constructor.</source>
          <target state="translated">テストでは、コンポーネントのコンストラクターに注入された &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を操作することにより、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; がさまざまな &lt;code&gt;id&lt;/code&gt; パラメーター値にどのように応答するかを調査できます。</target>
        </trans-unit>
        <trans-unit id="a149f72eba01c87f9d7e2acc8e6ccead108bd378" translate="yes" xml:space="preserve">
          <source>Tests can not only be retained through an upgrade process, but they can also be used as a valuable safety measure when ensuring that the application does not break during the upgrade. E2E tests are especially useful for this purpose.</source>
          <target state="translated">テストは、アップグレードプロセスを通して保持することができるだけでなく、アップグレード中にアプリケーションが壊れないことを確実にするための貴重な安全対策としても使用することができます。E2E テストは、この目的のために特に有用です。</target>
        </trans-unit>
        <trans-unit id="ef9720ff67e3a0f70d038c1f235e9be14b1f91b7" translate="yes" xml:space="preserve">
          <source>Tests click buttons of both the parent &lt;code&gt;MissionControlComponent&lt;/code&gt; and the &lt;code&gt;AstronautComponent&lt;/code&gt; children and verify that the history meets expectations:</source>
          <target state="translated">親 &lt;code&gt;MissionControlComponent&lt;/code&gt; と &lt;code&gt;AstronautComponent&lt;/code&gt; の両方の子のクリックボタンをテストし、履歴が期待どおりであることを確認します。</target>
        </trans-unit>
        <trans-unit id="9a1fb83f4107a4334b4d83ca00fd46b35664a0df" translate="yes" xml:space="preserve">
          <source>Tests that exercise the component need ...</source>
          <target state="translated">コンポーネントを動作させるテストは、必要に応じて...</target>
        </trans-unit>
        <trans-unit id="5e8952a23ac8b494d5a4aa2dfda252105e5ee80b" translate="yes" xml:space="preserve">
          <source>Tests the value using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expression&lt;/a&gt; pattern suitable for common usecases. The pattern is based on the definition of a valid email address in the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address&quot;&gt;WHATWG HTML specification&lt;/a&gt; with some enhancements to incorporate more RFC rules (such as rules related to domain names and the lengths of different parts of the address).</source>
          <target state="translated">一般的なユースケースに適した&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;正規表現&lt;/a&gt;パターンを使用して値をテストします。パターンは、&lt;a href=&quot;https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address&quot;&gt;WHATWG HTML仕様&lt;/a&gt;での有効な電子メールアドレスの定義に基づいており、RFCルール（ドメイン名に関連するルールやアドレスのさまざまな部分の長さなど）を組み込むようにいくつかの機能が強化されています。</target>
        </trans-unit>
        <trans-unit id="40db585145f66e7c1d97246b405cda4f5c923267" translate="yes" xml:space="preserve">
          <source>Textual description of response status code.</source>
          <target state="translated">応答ステータスコードのテキスト説明</target>
        </trans-unit>
        <trans-unit id="6eee3bad7a4f570555e555491652b44c30be408f" translate="yes" xml:space="preserve">
          <source>Textual input; ideal for string or number options.</source>
          <target state="translated">テキスト入力;文字列または数値オプションに最適です。</target>
        </trans-unit>
        <trans-unit id="45b58f88e69ae6780e1f2abce5d12c9d0d78969a" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;injector inheritance&lt;/a&gt;, you can still inject application-wide services into these components. A component's injector is a child of its parent component's injector, and inherits from all ancestor injectors all the way back to the application's &lt;em&gt;root&lt;/em&gt; injector. Angular can inject a service provided by any injector in that lineage.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;インジェクタの継承の&lt;/a&gt;おかげで、アプリケーション全体のサービスをこれらのコンポーネントに引き続き注入できます。コンポーネントのインジェクターは、親コンポーネントのインジェクターの子であり、すべての祖先インジェクターからアプリケーションの&lt;em&gt;ルート&lt;/em&gt;インジェクターに継承されます。Angularはその系統のあらゆるインジェクターによって提供されるサービスを注入することができます。</target>
        </trans-unit>
        <trans-unit id="b7988d61e2d1ccc1aba091cbcda9c3833787e86a" translate="yes" xml:space="preserve">
          <source>That &lt;em&gt;selected hero&lt;/em&gt; coloring is the work of the &lt;code&gt;.selected&lt;/code&gt; CSS class in the &lt;a href=&quot;toh-pt2#styles&quot;&gt;styles you added earlier&lt;/a&gt;. You just have to apply the &lt;code&gt;.selected&lt;/code&gt; class to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; when the user clicks it.</source>
          <target state="translated">その&lt;em&gt;選択されたヒーローの&lt;/em&gt;カラーリングは、&lt;a href=&quot;toh-pt2#styles&quot;&gt;以前に追加&lt;/a&gt;したスタイルの &lt;code&gt;.selected&lt;/code&gt; CSSクラスの作業です。ユーザーがクリックしたときに &lt;code&gt;.selected&lt;/code&gt; クラスを &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; に適用するだけです。</target>
        </trans-unit>
        <trans-unit id="997d534a801fe52469433556fdfc70812d5791b0" translate="yes" xml:space="preserve">
          <source>That &lt;em&gt;won't work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; is actually making requests of a remote server.</source>
          <target state="translated">それは&lt;em&gt;動作しません&lt;/em&gt;とき &lt;code&gt;HeroService&lt;/code&gt; が実際にリモートサーバの要求を行っています。</target>
        </trans-unit>
        <trans-unit id="855bfc37db8fbfcd6a69c185c541bcee572c7752" translate="yes" xml:space="preserve">
          <source>That brief syntax does a lot:</source>
          <target state="translated">その簡潔な構文はたくさんのことをしてくれます。</target>
        </trans-unit>
        <trans-unit id="baeabedfa4d2b67801841521af7799623a88f4c2" translate="yes" xml:space="preserve">
          <source>That doesn't match any of the concrete configured routes which means the router falls through to the wildcard route and displays the &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">これは、具体的に構成されたどのルートとも一致しません。つまり、ルーターはワイルドカードルートにフォールスルーし、 &lt;code&gt;PageNotFoundComponent&lt;/code&gt; を表示します。</target>
        </trans-unit>
        <trans-unit id="53890b190e7522b42925863c087bdb3871d6fd9d" translate="yes" xml:space="preserve">
          <source>That is the last you'll see of AngularJS! It has served us well but now it's time to say goodbye.</source>
          <target state="translated">これがAngularJSの最後の姿です。AngularJSは私たちによく仕えてきましたが、これでお別れの時が来ました。</target>
        </trans-unit>
        <trans-unit id="546cbdd2883bb656047b37ff93de8aac7a7774d3" translate="yes" xml:space="preserve">
          <source>That is why there are two ways to create the module: &lt;code&gt;RouterModule.forRoot&lt;/code&gt; and &lt;code&gt;RouterModule.forChild&lt;/code&gt;.</source>
          <target state="translated">そのため、モジュールを作成する方法には、 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; と &lt;code&gt;RouterModule.forChild&lt;/code&gt; の 2つがあります。</target>
        </trans-unit>
        <trans-unit id="78cd18b8b1563fee45858ef3948be6ae3918ea9b" translate="yes" xml:space="preserve">
          <source>That leaves only components bootstrapped using one of the imperative techniques, such as &lt;a href=&quot;../api/core/viewcontainerref#createComponent&quot;&gt;&lt;code&gt;ViewComponentRef.createComponent()&lt;/code&gt;&lt;/a&gt; as undiscoverable.</source>
          <target state="translated">これにより、&lt;a href=&quot;../api/core/viewcontainerref#createComponent&quot;&gt; &lt;code&gt;ViewComponentRef.createComponent()&lt;/code&gt; &lt;/a&gt;などの必須テクニックの1つを使用してブートストラップされたコンポーネントのみが検出不能になります。</target>
        </trans-unit>
        <trans-unit id="5d9c064530f05f389c5fbe1c71c58fb65ce76d57" translate="yes" xml:space="preserve">
          <source>That shows one hero. To list them all, add an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; to iterate through the list of heroes:</source>
          <target state="translated">それは一人のヒーローを示しています。それらすべてを一覧表示するには、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; に追加してヒーローのリストを反復処理します。</target>
        </trans-unit>
        <trans-unit id="60723467a2927bc85f77b7d415dfc59363db1a8f" translate="yes" xml:space="preserve">
          <source>That you can only apply &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;one structural directive&lt;/a&gt; to an element.</source>
          <target state="translated">要素に適用できる&lt;a href=&quot;structural-directives#one-per-element&quot;&gt;構造ディレクティブは1つ&lt;/a&gt;だけです。</target>
        </trans-unit>
        <trans-unit id="6e04a0a9c73bb1fbb17f9d8723aa29ee17f93b6c" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;preloading&lt;/em&gt;.</source>
          <target state="translated">それが&lt;em&gt;プリロード&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="e43e04a9dd6b720de1e5ae14bfbe69af946d80c7" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;really&lt;/em&gt; crisp. Only the &lt;em&gt;test doubles&lt;/em&gt; in the &lt;code&gt;providers&lt;/code&gt; remain. Even the &lt;code&gt;HeroDetailComponent&lt;/code&gt; declaration is gone.</source>
          <target state="translated">それは&lt;em&gt;本当に&lt;/em&gt;ぱりっとしたです。唯一の&lt;em&gt;テストダブル&lt;/em&gt;で &lt;code&gt;providers&lt;/code&gt; 残ります。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 宣言でさえなくなっています。</target>
        </trans-unit>
        <trans-unit id="c76bb94cbc84152062cf4a329790720f178cb281" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;two-way data binding&lt;/em&gt;. For more information, see &lt;a href=&quot;template-syntax#ngModel&quot;&gt;Two-way binding with NgModel&lt;/a&gt; on the the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">これが&lt;em&gt;双方向のデータバインディング&lt;/em&gt;です。詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModelを使用&lt;/a&gt;した双方向バインディング」を参照してください。</target>
        </trans-unit>
        <trans-unit id="3921dcb6884a1953a2a80655d084b46ece04b5af" translate="yes" xml:space="preserve">
          <source>That's because interceptors work at a lower level than those &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods. A single HTTP request can generate multiple &lt;em&gt;events&lt;/em&gt;, including upload and download progress events. The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; class itself is actually an event, whose type is &lt;code&gt;&lt;a href=&quot;../api/common/http/httpeventtype#Response&quot;&gt;HttpEventType.Response&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、インターセプターがそれらの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドよりも低いレベルで機能するためです。1つのHTTPリクエストで、アップロードやダウンロードの進行状況イベント&lt;em&gt;など&lt;/em&gt;、複数の&lt;em&gt;イベント&lt;/em&gt;を生成できます。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; クラス自体は、実際にはそのタイプである場合、ある &lt;code&gt;&lt;a href=&quot;../api/common/http/httpeventtype#Response&quot;&gt;HttpEventType.Response&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73090ab1ac428708459347276bf105c30a54c714" translate="yes" xml:space="preserve">
          <source>That's good, but it would be nice to &lt;em&gt;simultaneously&lt;/em&gt; apply the directive and set the color &lt;em&gt;in the same attribute&lt;/em&gt; like this.</source>
          <target state="translated">それは良いことですが、&lt;em&gt;同時に&lt;/em&gt;ディレクティブを適用&lt;em&gt;し、同じ属性&lt;/em&gt;にこのように色を設定するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="fdd51638c77368aee34229eb5d7f4a31418fff47" translate="yes" xml:space="preserve">
          <source>That's not a problem when the source code is in memory. But the &lt;code&gt;BannerComponent&lt;/code&gt; requires external files that the compiler must read from the file system, an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">ソースコードがメモリにある場合は問題ありません。ただし、 &lt;code&gt;BannerComponent&lt;/code&gt; には、コンパイラがファイルシステムから読み取る必要がある外部ファイルが必要です。これは、本質的に&lt;em&gt;非同期の&lt;/em&gt;操作です。</target>
        </trans-unit>
        <trans-unit id="6568d13ab9ecb29b6bc0a1b257bc515ba6d56377" translate="yes" xml:space="preserve">
          <source>That's not a problem when you run the CLI &lt;code&gt;ng test&lt;/code&gt; command because it &lt;em&gt;compiles the app before running the tests&lt;/em&gt;.</source>
          <target state="translated">CLI &lt;code&gt;ng test&lt;/code&gt; コマンドを実行する場合&lt;em&gt;、テストを実行する前にアプリをコンパイルする&lt;/em&gt;ため、これは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="75533f536e09008a2f4370b9a66ce6baff36ade1" translate="yes" xml:space="preserve">
          <source>That's not a problem. When three modules all import Module 'A', Angular evaluates Module 'A' once, the first time it encounters it, and doesn't do so again.</source>
          <target state="translated">それは問題ではありません。3つのモジュールがすべてモジュール'A'をインポートすると、Angularはモジュール'A'を最初に遭遇したときに一度だけ評価して、二度と評価しません。</target>
        </trans-unit>
        <trans-unit id="151a2e953c5878c8b2f49ccc710715719dae8e6b" translate="yes" xml:space="preserve">
          <source>That's possible by configuring the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; provider. First import it from the testing utility library:</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; プロバイダーを使用して &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を構成することで可能になります。まず、テストユーティリティライブラリからインポートします。</target>
        </trans-unit>
        <trans-unit id="139fd9b014e0c67851c103338e6f1bb39431603f" translate="yes" xml:space="preserve">
          <source>That's the only change you should make to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; class. There are no more properties. There's no presentation logic. This component simply receives a hero object through its &lt;code&gt;hero&lt;/code&gt; property and displays it.</source>
          <target state="translated">これが、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; クラスに加える必要がある唯一の変更です。これ以上プロパティはありません。プレゼンテーションロジックはありません。このコンポーネントは、単に &lt;code&gt;hero&lt;/code&gt; プロパティを通じてヒーローオブジェクトを受け取り、それを表示します。</target>
        </trans-unit>
        <trans-unit id="9c6da24822230ab8738da89d9e6d04f423c6f361" translate="yes" xml:space="preserve">
          <source>That's too much effort just to answer a few simple questions about links.</source>
          <target state="translated">リンクに関する簡単な質問に答えるだけでも大変なのに。</target>
        </trans-unit>
        <trans-unit id="c1bcf5a4b4646f6c696415537ab243683a1e6ff1" translate="yes" xml:space="preserve">
          <source>That's true at whatever level &lt;code&gt;A&lt;/code&gt; appears in a hierarchy of imported NgModules. When Module 'B' imports Module 'A', Module 'C' imports 'B', and Module 'D' imports &lt;code&gt;[C, B, A]&lt;/code&gt;, then 'D' triggers the evaluation of 'C', which triggers the evaluation of 'B', which evaluates 'A'. When Angular gets to the 'B' and 'A' in 'D', they're already cached and ready to go.</source>
          <target state="translated">これは、インポートされたNgModuleの階層に表示されるレベル &lt;code&gt;A&lt;/code&gt; に当てはまります。モジュール「B」がモジュール「A」をインポートし、モジュール「C」が「B」をインポートし、モジュール「D」が &lt;code&gt;[C, B, A]&lt;/code&gt; インポートすると、「D」が「C」の評価をトリガーし、評価がトリガーされます「A」を評価する「B」の Angularが「D」の「B」と「A」に到達すると、それらはすでにキャッシュされており、準備が整っています。</target>
        </trans-unit>
        <trans-unit id="eab482f8d705259ee9ad3c1b5e7791e025cccad6" translate="yes" xml:space="preserve">
          <source>That's where a popup will go, once you learn how to route a popup component to it.</source>
          <target state="translated">ポップアップコンポーネントのルートを覚えれば、ポップアップはそこに移動します。</target>
        </trans-unit>
        <trans-unit id="bd89378d819f44a785e6fb9e2f462ab1c7095c1d" translate="yes" xml:space="preserve">
          <source>That's why it's a best practice to separate presentation of data from data access by encapsulating data access in a separate service and delegating to that service in the component, even in simple cases like this one.</source>
          <target state="translated">そのため、今回のような単純なケースであっても、データアクセスを別のサービスにカプセル化し、コンポーネント内でそのサービスに委譲することで、データの表示とデータアクセスを分離することがベストプラクティスとなります。</target>
        </trans-unit>
        <trans-unit id="5d4537305ed4c11fbd605714ec89b0aa7ead00b2" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;em&gt;is required&lt;/em&gt;&quot; message in a nearby &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which you'll display only if the control is invalid.</source>
          <target state="translated">「&lt;em&gt;必要とされて&lt;/em&gt;近くにあるメッセージ」 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; あなたがコントロールが無効である場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="cb6da98142a6e890c992fc42a49312215d3df539" translate="yes" xml:space="preserve">
          <source>The &quot;Hello World&quot; schematic might, for example, ask the user for their name, and display that name in place of the default name &quot;world&quot;. To define such a prompt, add an &lt;code&gt;x-prompt&lt;/code&gt; property to the schema for the &lt;code&gt;name&lt;/code&gt; variable.</source>
          <target state="translated">たとえば、 &quot;Hello World&quot;の回路図は、ユーザーに名前を尋ね、デフォルトの名前 &quot;world&quot;の代わりにその名前を表示します。このようなプロンプトを定義するには、 &lt;code&gt;name&lt;/code&gt; 変数のスキーマに &lt;code&gt;x-prompt&lt;/code&gt; プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="d2bbaa39f4a35729b9133f4121bdad46ac1e7bd6" translate="yes" xml:space="preserve">
          <source>The &quot;click&quot; test &lt;em&gt;in this example&lt;/em&gt; is misleading. It tests the &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; rather than the &lt;em&gt;component&lt;/em&gt;. This is a common failing of directive stubs.</source>
          <target state="translated">&lt;em&gt;この例&lt;/em&gt;の「クリック」テストは誤解を招くものです。&lt;em&gt;コンポーネント&lt;/em&gt;ではなく、 &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; をテストし&lt;em&gt;ます&lt;/em&gt;。これは、ディレクティブスタブの一般的な障害です。</target>
        </trans-unit>
        <trans-unit id="faea2451a7960e46bcbe2d68d4b393ce90a1ad33" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot; for the value and validation status of a form input element at a given point in time. When using &lt;a href=&quot;glossary#reactive-forms&quot;&gt;reactive forms&lt;/a&gt;, the form model is created explicitly in the component class. When using &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;template-driven forms&lt;/a&gt;, the form model is implicitly created by directives.</source>
          <target state="translated">特定の時点でのフォーム入力要素の値と検証ステータスの「信頼できる情報源」。&lt;a href=&quot;glossary#reactive-forms&quot;&gt;リアクティブフォーム&lt;/a&gt;を使用する場合、フォームモデルはコンポーネントクラスで明示的に作成されます。&lt;a href=&quot;glossary#template-driven-forms&quot;&gt;テンプレート駆動型フォーム&lt;/a&gt;を使用する場合、フォームモデルはディレクティブによって暗黙的に作成されます。</target>
        </trans-unit>
        <trans-unit id="5f16bf1662cd8257f3371d70ecfe3dffbbd1ef48" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot; is the template. The validation is defined using attributes on the individual input elements.</source>
          <target state="translated">真理の源」はテンプレートです。バリデーションは、個々の入力要素の属性を使って定義されます。</target>
        </trans-unit>
        <trans-unit id="2b7f919d94c58fca886b43402bcc81835c791109" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot;, the form model, is defined in the component class.</source>
          <target state="translated">真理の源」であるフォームモデルは、コンポーネントクラスで定義されています。</target>
        </trans-unit>
        <trans-unit id="6dd684e5040381ad0ce17b5ddf5b549b7b739b86" translate="yes" xml:space="preserve">
          <source>The &quot;submit&quot; event object</source>
          <target state="translated">submit&quot; イベントオブジェクト</target>
        </trans-unit>
        <trans-unit id="359847ddb8d62a2bd8e853ea6598a7205ec1c46d" translate="yes" xml:space="preserve">
          <source>The &amp;lt;ng-template&amp;gt; is an Angular element for rendering HTML. It is never displayed directly. In fact, before rendering the view, Angular &lt;em&gt;replaces&lt;/em&gt; the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and its contents with a comment.</source>
          <target state="translated">&amp;lt;ng-template&amp;gt;は、HTMLをレンダリングするためのAngular要素です。直接表示されることはありません。実際には、ビューをレンダリングする前に、角度が&lt;em&gt;代わる&lt;/em&gt; &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 、コメントとその内容。</target>
        </trans-unit>
        <trans-unit id="f2bc11b9bff8891b1b4b95777be8093827f90cd6" translate="yes" xml:space="preserve">
          <source>The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.</source>
          <target state="translated">legacy_enabled」と「legacy_disabled」は、新しいアプリケーションには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="5a0607fc5a71f75025003113fba9d409eef3025c" translate="yes" xml:space="preserve">
          <source>The (*) before &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is required in this example. For more information, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; の前の（*）が必要です。詳細については、&lt;a href=&quot;structural-directives&quot;&gt;構造ディレクティブを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2eeefeb9f39958efc7cb49ff902890458efed5d3" translate="yes" xml:space="preserve">
          <source>The (*) before &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; is required in this example.</source>
          <target state="translated">この例では、 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; の前に（*）が必要です。</target>
        </trans-unit>
        <trans-unit id="79cf9ba3340b50f113c7f5c522857c8402ee3e8d" translate="yes" xml:space="preserve">
          <source>The 0-based index at which to insert the new view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">新しいビューをこのコンテナに挿入する0ベースのインデックス。指定しない場合は、新しいビューを最後のエントリとして追加します。</target>
        </trans-unit>
        <trans-unit id="64cb3c9ce2941cca665837b8c920ab81c42ebce7" translate="yes" xml:space="preserve">
          <source>The 0-based index at which to insert the view. If not specified, appends the new view as the last entry.</source>
          <target state="translated">ビューを挿入する0ベースのインデックス。指定しない場合は、新しいビューを最後のエントリとして追加します。</target>
        </trans-unit>
        <trans-unit id="9616203d2c83fbac5cabbb36c7f2845d852155d7" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to destroy. If not specified, the last view in the container is removed.</source>
          <target state="translated">破壊するビューの0ベースのインデックス。指定しなかった場合、コンテナ内の最後のビューが削除されます。</target>
        </trans-unit>
        <trans-unit id="b9fbb1d1b433e68cf1c7c1b6321eecebf8ac3993" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to detach. If not specified, the last view in the container is detached.</source>
          <target state="translated">切り離すビューの0ベースのインデックス。指定しない場合は、コンテナ内の最後のビューが切り離されます。</target>
        </trans-unit>
        <trans-unit id="c5fb1f0cba49a032643a41c63159622cd0d6fc49" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to retrieve.</source>
          <target state="translated">取得するビューの0ベースのインデックス。</target>
        </trans-unit>
        <trans-unit id="5e66a0e6fb18ae6b407f336df6eccb9c647f8d95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for this component instance.</source>
          <target state="translated">このコンポーネントインスタンスの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cca3012370d419e31b6d75cf098ab8e4d8294696" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for this view container.</source>
          <target state="translated">このビューコンテナの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依存関係インジェクタ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3a9d663e80b981cfdfa0a3ab710f96c7ea6bc4a5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;host view&lt;/a&gt; defined by the template for this component instance.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;ホストビュー&lt;/a&gt;このコンポーネントインスタンスのテンプレートによって定義されます。</target>
        </trans-unit>
        <trans-unit id="c1fca9b2eeb7fcdb4b750c3d77842055cb90ffb3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/animations/animationoptions&quot;&gt;AnimationOptions&lt;/a&gt; interface in Angular animations enables you to create animations that you can reuse across different components.</source>
          <target state="translated">Angularアニメーションの&lt;a href=&quot;../api/animations/animationoptions&quot;&gt;AnimationOptions&lt;/a&gt;インターフェイスを使用すると、さまざまなコンポーネント間で再利用できるアニメーションを作成できます。</target>
        </trans-unit>
        <trans-unit id="4619e6447ab97a35a308e3e9c3efbfde9436b6a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;&lt;code&gt;AsyncPipe&lt;/code&gt;&lt;/a&gt; subscribes (and unsubscribes) for you automatically.</source>
          <target state="translated">&lt;a href=&quot;../api/common/asyncpipe&quot;&gt; &lt;code&gt;AsyncPipe&lt;/code&gt; を&lt;/a&gt;自動的に加入（及び退会）。</target>
        </trans-unit>
        <trans-unit id="25ca1534cac8f8f9928b1c6bab67be9f0b8e9968" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt; subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.</source>
          <target state="translated">&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipeは&lt;/a&gt;、観察や約束に加入すると、それが放出された最新の値を返します。新しい値が発行されると、パイプは変更をチェックするコンポーネントをマークします。</target>
        </trans-unit>
        <trans-unit id="434328f2381c94483bc520c3c7a3f880f61ac182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt; provides an easy way to diagnose a mysteriously failing data binding or inspect an object for future binding.</source>
          <target state="translated">&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipeは&lt;/a&gt;結合不思議な障害の発生したデータを診断または将来の結合のためのオブジェクトを検査する簡単な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="13e16a47435e26b6e827703b1b62df1ed890aeda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; is an Angular service for interacting with the browser. You'll use it &lt;a href=&quot;toh-pt5#goback&quot;&gt;later&lt;/a&gt; to navigate back to the view that navigated here.</source>
          <target state="translated">&lt;a href=&quot;../api/common/location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt;ブラウザと対話するための角度サービスです。あなたはそれを使用します&lt;a href=&quot;toh-pt5#goback&quot;&gt;、後で&lt;/a&gt;ここにナビゲートビューに移動し、バックへ。</target>
        </trans-unit>
        <trans-unit id="63249ca017815dd12486b06a18f3fea91eecd138" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/ngforof&quot;&gt;&lt;code&gt;NgFor&lt;/code&gt; API guide&lt;/a&gt; describes additional &lt;code&gt;NgFor&lt;/code&gt; directive properties and context properties.</source>
          <target state="translated">&lt;a href=&quot;../api/common/ngforof&quot;&gt; &lt;code&gt;NgFor&lt;/code&gt; の APIガイドは&lt;/a&gt;、追加の説明 &lt;code&gt;NgFor&lt;/code&gt; ディレクティブプロパティおよびコンテキスト・プロパティを。</target>
        </trans-unit>
        <trans-unit id="5061a2f16c724493f890befa083acedce10d0a0d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt; is a test harness for interacting with the created component and its corresponding element.</source>
          <target state="translated">&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixtureは、&lt;/a&gt;作成されたコンポーネントとそれに対応する要素と相互作用するためのテストハーネスです。</target>
        </trans-unit>
        <trans-unit id="01125ede2a72c7a023c0c79cf22dbdcb8a08e761" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/forms/ngformselectorwarning&quot;&gt;&lt;code&gt;NgFormSelectorWarning&lt;/code&gt;&lt;/a&gt; directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">&lt;a href=&quot;../api/forms/ngformselectorwarning&quot;&gt; &lt;code&gt;NgFormSelectorWarning&lt;/code&gt; &lt;/a&gt;非推奨の場合指令は、単に表示警告するために使用される &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; のセレクタが使用されます。</target>
        </trans-unit>
        <trans-unit id="fc13089d19feff72cbef3b960dd6ca15d44a7b22" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/router/activatedroute&quot;&gt;&lt;code&gt;ActivatedRoute&lt;/code&gt;&lt;/a&gt; holds information about the route to this instance of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. This component is interested in the route's parameters extracted from the URL. The &quot;id&quot; parameter is the &lt;code&gt;id&lt;/code&gt; of the hero to display.</source>
          <target state="translated">&lt;a href=&quot;../api/router/activatedroute&quot;&gt; &lt;code&gt;ActivatedRoute&lt;/code&gt; は、&lt;/a&gt;このインスタンスへのルートについての情報を保持 &lt;code&gt;HeroDetailComponent&lt;/code&gt; を。このコンポーネントは、URLから抽出されたルートのパラメーターに関心があります。「id」パラメータは、表示するヒーローの &lt;code&gt;id&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="94a856463bc03963a039b172b04033375f6ce5d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt; is an injected router service that makes use of observables to get information about a route path and parameters. For example, &lt;code&gt;ActivateRoute.url&lt;/code&gt; contains an observable that reports the route path or paths. Here's an example:</source>
          <target state="translated">&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRouteは、&lt;/a&gt;観測の使用は、ルート・パスとパラメータに関する情報を取得することができ、ルータサービスを注入しています。たとえば、 &lt;code&gt;ActivateRoute.url&lt;/code&gt; には、1つまたは複数のルートパスを報告するオブザーバブルが含まれています。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="62420df0957330734448927a844114ed73ad730f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../common/platformlocation&quot;&gt;&lt;code&gt;PlatformLocation&lt;/code&gt;&lt;/a&gt; providers that should be added when the &lt;a href=&quot;../common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; is used in a worker context.</source>
          <target state="translated">&lt;a href=&quot;../common/platformlocation&quot;&gt; &lt;code&gt;PlatformLocation&lt;/code&gt; の&lt;/a&gt;時に追加されなければならないプロバイダ&lt;a href=&quot;../common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;ワーカーコンテキストで使用されています。</target>
        </trans-unit>
        <trans-unit id="692c832c00b68e76def217cb437b093b42460681" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for a router configuration.</source>
          <target state="translated">ルーター構成の&lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5b5f0bd73969076e99683691442f0e883b4d411" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../guide/template-syntax#ngFor&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt; is Angular's &lt;em&gt;repeater&lt;/em&gt; directive. It repeats the host element for each element in a list.</source>
          <target state="translated">&lt;a href=&quot;../guide/template-syntax#ngFor&quot;&gt; &lt;code&gt;*ngFor&lt;/code&gt; は&lt;/a&gt;角度のある&lt;em&gt;リピーター&lt;/em&gt;ディレクティブ。リスト内の要素ごとにホスト要素を繰り返します。</target>
        </trans-unit>
        <trans-unit id="44d0769a18e136933991f4231b7cee526e0c337d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; can generate a new &lt;code&gt;HeroService&lt;/code&gt; class in the &lt;code&gt;src/app/heroes&lt;/code&gt; folder with this command.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;角度CLIは、&lt;/a&gt;新しい生成することができ &lt;code&gt;HeroService&lt;/code&gt; の中にクラス &lt;code&gt;src/app/heroes&lt;/code&gt; 、このコマンドを使用して、フォルダ。</target>
        </trans-unit>
        <trans-unit id="85c2a8f734f521cd885970594379f4f530c76b78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; generates the following basic &lt;code&gt;AppModule&lt;/code&gt; when creating a new app.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;角度CLIは、&lt;/a&gt;次の基本的な生成 &lt;code&gt;AppModule&lt;/code&gt; を新しいアプリを作成するとき。</target>
        </trans-unit>
        <trans-unit id="bc67777d512b5dac31422e8bb3c4a7dc2b7d55df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; is a command-line tool for managing the Angular development cycle. Use it to create the initial filesystem scaffolding for a &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; or &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;, and to run &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that add and modify code for initial generic versions of various elements. The CLI supports all stages of the development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;角度CLIは、&lt;/a&gt;角度開発サイクルを管理するためのコマンドラインツールです。これを使用して、&lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペース&lt;/a&gt;または&lt;a href=&quot;glossary#project&quot;&gt;プロジェクト&lt;/a&gt;の初期ファイルシステムスキャフォールディングを作成し、さまざまな要素の初期汎用バージョンのコードを追加および変更する&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;を実行します。CLIは、ビルド、テスト、バンドル、デプロイメントなど、開発サイクルのすべての段階をサポートしています。</target>
        </trans-unit>
        <trans-unit id="53c454c6660fa02027dfe2117f75d263dd75f716" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; provides support for polyfills. If you are not using the CLI to create your projects, see &lt;a href=&quot;browser-support#non-cli&quot;&gt;Polyfill instructions for non-CLI users&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;角度CLIは&lt;/a&gt; polyfillsのサポートを提供します。CLIを使用してプロジェクトを作成していない場合は、CLIを使用しない&lt;a href=&quot;browser-support#non-cli&quot;&gt;ユーザー向けのPolyfillの手順を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b8bc93b8439f0639488ee5e20edda32b14cbf6ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli/run&quot;&gt;CLI command &lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; invokes a builder with a specific &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;. The &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration&lt;/a&gt; file, &lt;code&gt;angular.json&lt;/code&gt;, contains default configurations for built-in builders.</source>
          <target state="translated">&lt;a href=&quot;cli/run&quot;&gt;CLIコマンド &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt;、特定の持つビルダー呼び出し&lt;a href=&quot;glossary#target&quot;&gt;のターゲット設定を&lt;/a&gt;。&lt;a href=&quot;workspace-config&quot;&gt;ワークスペースのコンフィギュレーション・&lt;/a&gt;ファイル、 &lt;code&gt;angular.json&lt;/code&gt; は、内蔵のビルダーのデフォルト設定が含まれています。</target>
        </trans-unit>
        <trans-unit id="05d9831a7b65afdb6e46ec21735bf7261c84bb9d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;common/platformlocation&quot;&gt;&lt;code&gt;PlatformLocation&lt;/code&gt;&lt;/a&gt; providers that should be added when the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; is used in a worker context.</source>
          <target state="translated">&lt;a href=&quot;common/platformlocation&quot;&gt; &lt;code&gt;PlatformLocation&lt;/code&gt; の&lt;/a&gt;時に追加されなければならないプロバイダ&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;ワーカーコンテキストで使用されています。</target>
        </trans-unit>
        <trans-unit id="98107507289185f8873753970de1dfd7b6bad5b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#aot&quot;&gt;AOT compiler&lt;/a&gt; is part of a build process that produces a small, fast, ready-to-run application package, typically for production.</source>
          <target state="translated">&lt;a href=&quot;glossary#aot&quot;&gt;AOTコンパイラは&lt;/a&gt;、通常の生産のための小さい、速い、すぐに実行アプリケーションパッケージを生成ビルドプロセスの一部です。</target>
        </trans-unit>
        <trans-unit id="9c919d8f163d548522d373c5c6512d9de4f837b6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; uses schematics to generate and modify &lt;a href=&quot;glossary#project&quot;&gt;Angular projects&lt;/a&gt; and parts of projects.</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;角度CLIは、&lt;/a&gt;生成し、修正するために回路図を使用して&lt;a href=&quot;glossary#project&quot;&gt;角度のプロジェクト&lt;/a&gt;やプロジェクトの一部を。</target>
        </trans-unit>
        <trans-unit id="5e080e6d0c2bf1f3b9d47f8c9e27b3be01bc9faa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#cli&quot;&gt;CLI&lt;/a&gt;&lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt; command&lt;/a&gt; creates a file system directory (the &quot;workspace root&quot;). In the workspace root, it also creates the workspace &lt;a href=&quot;glossary#configuration&quot;&gt;configuration file&lt;/a&gt; (&lt;code&gt;angular.json&lt;/code&gt;) and, by default, an initial application project with the same name.</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;CLI &lt;/a&gt;&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; コマンドは、&lt;/a&gt;ファイルシステムディレクトリ（「ワークスペース・ルート」）を作成します。また、ワークスペースのルートで、ワークスペース&lt;a href=&quot;glossary#configuration&quot;&gt;構成ファイル&lt;/a&gt;（ &lt;code&gt;angular.json&lt;/code&gt; ）を作成し、デフォルトで、同じ名前の初期アプリケーションプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="3e06550cbd83b66c246b5afad89f993ba760a306" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#jit&quot;&gt;JITcompiler&lt;/a&gt; compiles your app in the browser as the app loads. To support translation with the JIT compiler, you must do the following:</source>
          <target state="translated">&lt;a href=&quot;glossary#jit&quot;&gt;JITcompilerは、&lt;/a&gt;アプリケーションの負荷などのブラウザでアプリをコンパイルします。JITコンパイラーによる変換をサポートするには、以下を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="4380b18e380108bb934a12302c8ada614bb694c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#router&quot;&gt;router&lt;/a&gt; makes use of lazy loading to load child views only when the parent view is activated. Similarly, you can build custom elements that can be loaded into an Angular app when needed.</source>
          <target state="translated">&lt;a href=&quot;glossary#router&quot;&gt;ルータは、&lt;/a&gt;親ビューがアクティブになったときにのみロード子ビューに遅延読み込みを使用しています。同様に、必要に応じてAngularアプリにロードできるカスタム要素を構築できます。</target>
        </trans-unit>
        <trans-unit id="0b1fe491d63ab7232b2eb74a097869b0b4d9d4d4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http#rxjs&quot;&gt;RxJS library&lt;/a&gt; offers several &lt;em&gt;retry&lt;/em&gt; operators that are worth exploring. The simplest is called &lt;code&gt;retry()&lt;/code&gt; and it automatically re-subscribes to a failed &lt;code&gt;Observable&lt;/code&gt; a specified number of times. &lt;em&gt;Re-subscribing&lt;/em&gt; to the result of an &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method call has the effect of reissuing the HTTP request.</source>
          <target state="translated">&lt;a href=&quot;http#rxjs&quot;&gt;RxJSライブラリ&lt;/a&gt;申し出いくつかの&lt;em&gt;再試行&lt;/em&gt;探検する価値ある事業者。最も簡単なのは &lt;code&gt;retry()&lt;/code&gt; で、失敗した &lt;code&gt;Observable&lt;/code&gt; に指定された回数だけ自動的に再サブスクライブします。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッド呼び出しの結果を&lt;em&gt;再サブスクライブ&lt;/em&gt;すると、HTTPリクエストが再発行されます。</target>
        </trans-unit>
        <trans-unit id="9137609ba3ac5720c2b2e7ec5b9d022983893e76" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://reactivex.io/documentation/operators/defer.html&quot;&gt;RxJS &lt;code&gt;defer()&lt;/code&gt; operator&lt;/a&gt; returns an observable. It takes a factory function that returns either a promise or an observable. When something subscribes to &lt;em&gt;defer&lt;/em&gt;'s observable, it adds the subscriber to a new observable created with that factory.</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/documentation/operators/defer.html&quot;&gt;RxJS &lt;code&gt;defer()&lt;/code&gt; 演算子は、&lt;/a&gt;観察を返します。これは、promiseまたはobservableを返すファクトリ関数を取ります。何かがに加入している場合は&lt;em&gt;延期&lt;/em&gt;観察できるのは、その工場で作成した新しい観測可能に加入者を追加します。</target>
        </trans-unit>
        <trans-unit id="2142d5fddf90916e933e41b73188b155d3c2310d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/config&quot;&gt;ng config&lt;/a&gt; command lets you set and retrieve configuration values from the command line, or you can edit the &lt;code&gt;angular.json&lt;/code&gt; file directly. Note that option names in the configuration file must use &lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase&lt;/a&gt;, while option names supplied to commands can use either camelCase or dash-case.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/cli/config&quot;&gt;ngの設定&lt;/a&gt;コマンドを使用すると、設定して、コマンドラインから設定値を取得、または編集することができます &lt;code&gt;angular.json&lt;/code&gt; のファイルを直接。設定ファイルのオプション名には&lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCaseを&lt;/a&gt;使用する必要がありますが、コマンドに提供されるオプション名にはcamelCaseまたはダッシュケースを使用できます。</target>
        </trans-unit>
        <trans-unit id="9cc4f900dedfc14aac5069c4089743ff6b85cb0f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;ng generate&lt;/a&gt; and &lt;a href=&quot;https://angular.io/cli/add&quot;&gt;ng add&lt;/a&gt; commands take as an argument the artifact or library to be generated or added to the current project. In addition to any general options, each artifact or library defines its own options in a &lt;em&gt;schematic&lt;/em&gt;. Schematic options are supplied to the command in the same format as immediate command options.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;生成NG&lt;/a&gt;と&lt;a href=&quot;https://angular.io/cli/add&quot;&gt;ngの追加&lt;/a&gt;コマンドは、アーティファクトやライブラリが生成されるか、現在のプロジェクトに追加する引数として取ります。一般的なオプションに加えて、各アーティファクトまたはライブラリは、&lt;em&gt;回路図で&lt;/em&gt;独自のオプションを定義します。回路図オプションは、即時コマンドオプションと同じ形式でコマンドに提供されます。</target>
        </trans-unit>
        <trans-unit id="c4ec4eb8426875bd373f4cb3f235396c3c74c24b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt; command creates an &lt;em&gt;Angular workspace&lt;/em&gt; folder and generates a new app skeleton. A workspace can contain multiple apps and libraries. The initial app created by the &lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt; command is at the top level of the workspace. When you generate an additional app or library in a workspace, it goes into a &lt;code&gt;projects/&lt;/code&gt; subfolder.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ngの新しい&lt;/a&gt;コマンドを作成し、&lt;em&gt;角度、ワークスペースの&lt;/em&gt;フォルダを、新たなアプリケーションのスケルトンを生成します。ワークスペースには、複数のアプリとライブラリを含めることができます。&lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt;コマンドで作成された最初のアプリは、ワークスペースの最上位にあります。ワークスペースで追加のアプリまたはライブラリを生成すると、 &lt;code&gt;projects/&lt;/code&gt; サブフォルダーに入ります。</target>
        </trans-unit>
        <trans-unit id="eef7029863bcbf19c4ab8578f83e597970534753" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&quot;&gt;&lt;code&gt;:not&lt;/code&gt; pseudo-class&lt;/a&gt; in &lt;code&gt;By.css('h2:not([highlight])')&lt;/code&gt; helps find &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; elements that &lt;em&gt;do not&lt;/em&gt; have the directive. &lt;code&gt;By.css('*:not([highlight])')&lt;/code&gt; finds &lt;em&gt;any&lt;/em&gt; element that does not have the directive.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&quot;&gt; &lt;code&gt;:not&lt;/code&gt; 擬似クラス&lt;/a&gt;で &lt;code&gt;By.css('h2:not([highlight])')&lt;/code&gt; を見つけることができます &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 要素&lt;em&gt;はありません&lt;/em&gt;ディレクティブを持っています。 &lt;code&gt;By.css('*:not([highlight])')&lt;/code&gt; は、ディレクティブを持たない要素を検索し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="67db0ba49bc8041f182dbf0749b95273e0b85a5b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors&quot;&gt;CSS element selector&lt;/a&gt;, &lt;code&gt;'app-heroes'&lt;/code&gt;, matches the name of the HTML element that identifies this component within a parent component's template.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors&quot;&gt;CSS要素セレクター&lt;/a&gt;、 &lt;code&gt;'app-heroes'&lt;/code&gt; 、HTML要素の名前と一致している親コンポーネントのテンプレート内で識別し、このコンポーネントが。</target>
        </trans-unit>
        <trans-unit id="3f5616648fe04a251f0e70271a427c668c007e56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing&quot;&gt; Chrome DevTools Network Performance page&lt;/a&gt; is a good place to start learning about measuring performance.</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing&quot;&gt;クロームデベロッパーツールネットワークパフォーマンスのページには、&lt;/a&gt;パフォーマンスの測定についての学習を開始するには良い場所です。</target>
        </trans-unit>
        <trans-unit id="43ba57fe4131496568fba480d9c4deb2e30cf2b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm package manager&lt;/a&gt; is used to distribute and load Angular modules and libraries.</source>
          <target state="translated">&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;NPMパッケージマネージャを&lt;/a&gt;配布し、角度のモジュールやライブラリをロードするために使用されます。</target>
        </trans-unit>
        <trans-unit id="ac72c33ceb0a0c850781b84bc6144a1744f50498" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;official JavaScript language specification&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;公式JavaScriptの言語仕様&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac53f3cd4e4f6d59ebf10978a8ce8de90ae0e6a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code, such as &lt;code&gt;USD&lt;/code&gt; for the US dollar and &lt;code&gt;EUR&lt;/code&gt; for the euro.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt;のような通貨コード、 &lt;code&gt;USD&lt;/code&gt; 米ドルとのための &lt;code&gt;EUR&lt;/code&gt; ユーロのために。</target>
        </trans-unit>
        <trans-unit id="385f6cc4dec76396876f06188f4cfe7a64f563f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code, such as &lt;code&gt;USD&lt;/code&gt; for the US dollar and &lt;code&gt;EUR&lt;/code&gt; for the euro. Used to determine the number of digits in the decimal part.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt;のような通貨コード、 &lt;code&gt;USD&lt;/code&gt; 米ドルとのための &lt;code&gt;EUR&lt;/code&gt; ユーロのために。小数部の桁数を決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c7822350707f34166034f9e5cf47f46ca41913fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/angular/angular/blob/master/aio/README.md&quot;&gt;aio/README.md&lt;/a&gt; explains how to install and use the tools to edit and test your changes.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/angular/blob/master/aio/README.md&quot;&gt;AIO / README.mdを&lt;/a&gt;インストールして使用するツールを編集し、変更をテストする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="cc21ed5107cd6c26d897a6320dc42ef7186143fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/danvk/source-map-explorer/blob/master/README.md&quot;&gt;source-map-explorer&lt;/a&gt; tool is a great way to inspect the generated JavaScript bundles after a production build.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/danvk/source-map-explorer/blob/master/README.md&quot;&gt;ソースマップ・エクスプローラの&lt;/a&gt;ツールは生産ビルド後に生成されたJavaScriptの束を検査するための素晴らしい方法です。</target>
        </trans-unit>
        <trans-unit id="64a5e24960a46bfcb09f65cc4c7ba6207874f001" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt; collects patterns and practices that have been proven to result in cleaner and more maintainable AngularJS applications. It contains a wealth of information about how to write and organize AngularJS code - and equally importantly - how &lt;strong&gt;not&lt;/strong&gt; to write and organize AngularJS code.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJSスタイルガイドは&lt;/a&gt;、よりクリーンで保守しAngularJSのアプリケーションをもたらすことが証明されているパターンやプラクティスを収集します。これには、AngularJSコードを作成して整理する方法に関する豊富な情報が含まれています-同様に重要な点として、AngularJSコードを作成および整理し&lt;strong&gt;ない&lt;/strong&gt;方法について&lt;strong&gt;も&lt;/strong&gt;同様です。</target>
        </trans-unit>
        <trans-unit id="698e33b75bcc5c76bbf260a0e698ed7db2e2c779" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;Folders-by-Feature Structure&lt;/a&gt; and &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;Modularity&lt;/a&gt; rules define similar principles on a higher level of abstraction: Different parts of the application should reside in different directories and NgModules.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;フォルダごとの機能構造&lt;/a&gt;と&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;モジュール性の&lt;/a&gt;規則は、抽象化のより高いレベルで同様の原理を定義する：アプリケーションの異なる部分が異なるディレクトリとNgModulesに存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1eaf3159835bb387f70ff080a284feaacf450754" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;Rule of 1&lt;/a&gt; states that there should be one component per file. This not only makes components easy to navigate and find, but will also allow us to migrate them between languages and frameworks one at a time. In this example application, each controller, component, service, and filter is in its own source file.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;1つのルール&lt;/a&gt;ファイルごとに1つの要素がなければならないと述べています。これにより、コンポーネントのナビゲートと検索が簡単になるだけでなく、言語とフレームワーク間でコンポーネントを1つずつ移行することができます。このサンプルアプリケーションでは、各コントローラー、コンポーネント、サービス、およびフィルターは独自のソースファイルにあります。</target>
        </trans-unit>
        <trans-unit id="50920f3757c6270704876b419b74fac4803e437f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; library, which is maintained by the Angular team, is a suite of reusable UI components that aims to be fully accessible. The &lt;a href=&quot;https://material.angular.io/cdk/categories&quot;&gt;Component Development Kit (CDK)&lt;/a&gt; includes the &lt;code&gt;a11y&lt;/code&gt; package that provides tools to support various areas of accessibility. For example:</source>
          <target state="translated">&lt;a href=&quot;https://material.angular.io/&quot;&gt;角度マテリアル&lt;/a&gt;角度チームによって維持されているライブラリは、目的が完全にアクセス可能にすることを、再利用可能なUIコンポーネントのスイートです。&lt;a href=&quot;https://material.angular.io/cdk/categories&quot;&gt;コンポーネントの開発キット（CDK）が&lt;/a&gt;含まれ &lt;code&gt;a11y&lt;/code&gt; のアクセスのさまざまな領域をサポートするためのツールを提供し、パッケージを。例えば：</target>
        </trans-unit>
        <trans-unit id="2368773fec7fbf22cc5ca45d72df2fac8cec9aea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/@types/angular&quot;&gt;AngularJS 1.x type definitions&lt;/a&gt; you installed are not officially maintained by the Angular team, but are quite comprehensive. It is possible to make an AngularJS 1.x application fully type-annotated with the help of these definitions.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/@types/angular&quot;&gt;AngularJS 1.1型定義&lt;/a&gt;がインストールは、正式に角度チームによって維持さが、非常に包括されていません。これらの定義を利用して、AngularJS 1.xアプリケーションを完全に型注釈付きにすることができます。</target>
        </trans-unit>
        <trans-unit id="df8b0b589273f8464eedbabbe41632c3bb97724d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt; tool is another good choice that can also help verify that your deployment was successful.</source>
          <target state="translated">&lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt;ツールはまた、あなたの展開が成功したことを確認することができます別の良い選択です。</target>
        </trans-unit>
        <trans-unit id="dd5702047983a31430a247a80e4531d5efed5bf6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;language-service&quot;&gt;Angular language service&lt;/a&gt; analyzes component templates and provides type and error information that TypeScript-aware editors can use to improve the developer's experience. For example, see the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;Angular language service extension for VS Code&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;language-service&quot;&gt;角度言語サービスは、&lt;/a&gt;コンポーネントテンプレートを分析し、活字体を意識した編集者は、開発者の経験を向上させるために使用できるタイプとエラー情報を提供します。たとえば&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;、VS CodeのAngular言語サービス拡張を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c536f9cf54af98d090a383c28c9f1b8859ffc4c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt; looks inside component templates for other components, directives, and pipes. When it finds one, that's a template reference.</source>
          <target state="translated">&lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;角度コンパイラは&lt;/a&gt;、他のコンポーネント、ディレクティブ、およびパイプ用コンポーネントテンプレート内で見えます。見つかった場合、それはテンプレート参照です。</target>
        </trans-unit>
        <trans-unit id="cb28f6b5f83114401b60f2c14cb2d1105c66e707" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;router#route-parameters&quot;&gt;Router&lt;/a&gt; guide covers &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; in more detail.</source>
          <target state="translated">&lt;a href=&quot;router#route-parameters&quot;&gt;ルータの&lt;/a&gt;ガイドカバーは &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; より詳細に。</target>
        </trans-unit>
        <trans-unit id="b3312268095b08aee685e29f5fcc7dcf523b79e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;structural-directives#ngFor&quot;&gt;&lt;code&gt;NgFor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;structural-directives#ngSwitch&quot;&gt;&lt;code&gt;NgSwitch...&lt;/code&gt;&lt;/a&gt; directives follow the same pattern.</source>
          <target state="translated">&lt;a href=&quot;structural-directives#ngFor&quot;&gt; &lt;code&gt;NgFor&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;structural-directives#ngSwitch&quot;&gt; &lt;code&gt;NgSwitch...&lt;/code&gt; &lt;/a&gt;ディレクティブは、同じパターンに従ってください。</target>
        </trans-unit>
        <trans-unit id="b6a97ff29bdea97643b100fb7e52172c9fc39e23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#feature-module-import&quot;&gt;previous test configuration&lt;/a&gt; replaces the real &lt;code&gt;HeroService&lt;/code&gt; with a &lt;code&gt;TestHeroService&lt;/code&gt; that intercepts server requests and fakes their responses.</source>
          <target state="translated">&lt;a href=&quot;testing#feature-module-import&quot;&gt;前回のテスト構成は、&lt;/a&gt;実際の置き換え &lt;code&gt;HeroService&lt;/code&gt; と &lt;code&gt;TestHeroService&lt;/code&gt; インターセプトサーバー要求とその応答を偽装しているが。</target>
        </trans-unit>
        <trans-unit id="03ec5cd730c49c54a94a2e4b7faaf1ebb0e7e823" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#routing-component&quot;&gt;discussion below&lt;/a&gt; covers testing components that require the router.</source>
          <target state="translated">&lt;a href=&quot;testing#routing-component&quot;&gt;以下&lt;/a&gt;の説明では、ルーターを必要とするコンポーネントのテストについて説明します。</target>
        </trans-unit>
        <trans-unit id="adf4fe467b8f5c7727686265229a15c837edbaa2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt; tests&lt;/a&gt; in an earlier section demonstrate how &lt;code&gt;createComponent&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; keep the tests short and &lt;em&gt;on message&lt;/em&gt;. There are no distractions: no waiting for promises to resolve and no searching the DOM for element values to compare.</source>
          <target state="translated">前のセクションの&lt;a href=&quot;testing#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt;テスト&lt;/a&gt;は、 &lt;code&gt;createComponent&lt;/code&gt; と &lt;code&gt;page&lt;/code&gt; がテストを短く、&lt;em&gt;メッセージ&lt;/em&gt;&lt;em&gt;どおりに&lt;/em&gt;保つ方法を示し&lt;em&gt;ています&lt;/em&gt;。気が散ることはありません。約束が解決されるのを待つ必要も、要素の値を比較するためにDOMを検索する必要もありません。</target>
        </trans-unit>
        <trans-unit id="5990c9bc12604596a4545a9863216ed43b448b8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;toh-pt4&quot;&gt;&lt;code&gt;HeroService&lt;/code&gt;&lt;/a&gt; gets hero data from the remote server and this component will use it to get the hero-to-display.</source>
          <target state="translated">&lt;a href=&quot;toh-pt4&quot;&gt; &lt;code&gt;HeroService&lt;/code&gt; は、&lt;/a&gt;リモートサーバから英雄データを取得し、このコンポーネントは、主人公・ツー・ディスプレイを得るためにそれを使用します。</target>
        </trans-unit>
        <trans-unit id="5350e6643395322b14e7706197ffdb8056e64e58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt; is the foundation for this walkthrough.</source>
          <target state="translated">&lt;a href=&quot;tutorial&quot;&gt;英雄のチュートリアルのツアーは、&lt;/a&gt;このチュートリアルのための基盤です。</target>
        </trans-unit>
        <trans-unit id="316fba5018bee07b56bf00591644765f20e7866a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;upgrade#change-detection&quot;&gt;Change Detection&lt;/a&gt; section of &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; only applies to apps that use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;. Though you handle change detection differently with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;, which is the focus of this guide, reading the &lt;a href=&quot;upgrade#change-detection&quot;&gt;Change Detection&lt;/a&gt; section provides helpful context for what follows.</source>
          <target state="translated">&lt;a href=&quot;upgrade&quot;&gt;AngularJSから&lt;/a&gt;のアップグレードの&lt;a href=&quot;upgrade#change-detection&quot;&gt;変更検出&lt;/a&gt;セクションは、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; を使用するアプリにのみ適用されます。このガイドの焦点である &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; （）を使用して変更の検出を異なる方法で処理しますが、&lt;a href=&quot;upgrade#change-detection&quot;&gt;変更の検出の&lt;/a&gt;セクションを読むと、以下の内容に役立つコンテキストが提供されます。</target>
        </trans-unit>
        <trans-unit id="ef97b3d65e2c4444165b198673fd089f9dda953a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt;&lt;/a&gt; file configures all projects in a &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; の&lt;/a&gt;ファイルには、内のすべてのプロジェクトを設定し&lt;a href=&quot;glossary#workspace&quot;&gt;、ワークスペース&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c7ea24427c05bad52d78a47c4199fcf3ce050def" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!&lt;/code&gt; prefix marks the pattern as being negative, meaning that only files that don't match the pattern will be included.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; 接頭辞は、パターンが負であることを示します。つまり、パターンに一致しないファイルのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="61301904b5174ce43d2617b3dc5fe99400fa5df9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#docplaster&lt;/code&gt; at the top is another bit of code snippet markup. It tells the processor how to join the fragments into a single snippet.</source>
          <target state="translated">上部の &lt;code&gt;#docplaster&lt;/code&gt; は、コードスニペットのもう1つのマークアップです。これは、フラグメントを単一のスニペットに結合する方法をプロセッサーに通知します。</target>
        </trans-unit>
        <trans-unit id="fbad649456e004310378e45c2eabd90470f600a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#timer&lt;/code&gt; local variable is gone from the component metadata. Instead, bind the buttons to the parent component's own &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods and present the ticking seconds in an interpolation around the parent component's &lt;code&gt;seconds&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;#timer&lt;/code&gt; ローカル変数は、コンポーネントのメタデータからなくなっています。代わりに、バインド親コンポーネントの独自のボタン &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; 親コンポーネントの周りの補間方法および存在刻々と過ぎ秒 &lt;code&gt;seconds&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="6f19dd2af8f997aeeaa2940384f71556312a3db5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; cast function also works with &lt;code&gt;this&lt;/code&gt; to allow access to undeclared members of the component.</source>
          <target state="translated">&lt;code&gt;$any()&lt;/code&gt; キャスト関数もで動作します &lt;code&gt;this&lt;/code&gt; コンポーネントの宣言されていないメンバーへのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="bee6c20e056eff2c3bd8d36a0225478bb77d96a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; cast function works anywhere in a binding expression where a method call is valid.</source>
          <target state="translated">&lt;code&gt;$any()&lt;/code&gt; キャスト関数は、メソッドの呼び出しが有効であるバインディング式でどこでも動作します。</target>
        </trans-unit>
        <trans-unit id="e59f595616973095579aee71daee6655f4b357cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; type cast function</source>
          <target state="translated">&lt;code&gt;$any()&lt;/code&gt; のタイプキャスト機能</target>
        </trans-unit>
        <trans-unit id="6e6759020b810407949d5836009ada40b0a64c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; is now a specific &lt;code&gt;KeyboardEvent&lt;/code&gt;. Not all elements have a &lt;code&gt;value&lt;/code&gt; property so it casts &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; to an input element. The &lt;code&gt;OnKey&lt;/code&gt; method more clearly expresses what it expects from the template and how it interprets the event.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 今、特定のある &lt;code&gt;KeyboardEvent&lt;/code&gt; です。すべての要素に &lt;code&gt;value&lt;/code&gt; プロパティがあるわけではないため、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; をinput要素にキャストします。 &lt;code&gt;OnKey&lt;/code&gt; 方法がより明確に、それはテンプレートから期待するもの、それはイベントをどのように解釈するかを表現しています。</target>
        </trans-unit>
        <trans-unit id="5af64ddd170cb432546c0bf2252c448f993a883b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; variable can be used in outputs to gain access to the object that was emitted. In this case it will be the &lt;code&gt;Hero&lt;/code&gt; object, because that is what was passed to &lt;code&gt;this.deleted.emit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 変数は、放出されたオブジェクトにアクセスするための出力で使用することができます。この場合、これは &lt;code&gt;Hero&lt;/code&gt; オブジェクトになります。これが &lt;code&gt;this.deleted.emit()&lt;/code&gt; に渡されたものだからです。</target>
        </trans-unit>
        <trans-unit id="c908b77e7e21c8de968461c845115562a2330563" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; variable contains the payload of the &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; event. Angular assigns the &lt;code&gt;$event&lt;/code&gt; value to the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; when the user clicks the buttons.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 変数が含まれているのペイロード &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; のイベントを。Angular は、ユーザーがボタンをクリックしたときに &lt;code&gt;$event&lt;/code&gt; &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 値をAppComponent.fontSizePxに割り当てます。</target>
        </trans-unit>
        <trans-unit id="e927e8d8b89416fbc605ae8612e17fa394a698fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$schema&lt;/code&gt; path is relative to the Angular Devkit collection schema.</source>
          <target state="translated">&lt;code&gt;$schema&lt;/code&gt; パスは角開発キットコレクションのスキーマに相対的です。</target>
        </trans-unit>
        <trans-unit id="9ee805ece33742d4de7f87a3da7383414135c5e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$schema&lt;/code&gt; property specifies the schema that the CLI uses for validation.</source>
          <target state="translated">&lt;code&gt;$schema&lt;/code&gt; プロパティは、検証のためのCLIの使用、そのスキーマを指定します。</target>
        </trans-unit>
        <trans-unit id="f59b81aa69f3638da4cee040a2bbe32b8dae6d8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; here represents an instance of a template. Notice that each component has its own &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ここの &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; は、テンプレートのインスタンスを表します。各コンポーネントには独自の &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="41ef35abf6bdecb3d0d2f8c0b5756abff98e77f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; container has an attribute directive that contains data about active routes and their states, based on the &lt;code&gt;data&lt;/code&gt; property that we set in the route configuration.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; コンテナはアクティブなルートとに基づいてそれらの状態に関するデータが含まれた属性ディレクティブ持つ &lt;code&gt;data&lt;/code&gt; 我々はルート設定で設定されていることプロパティを。</target>
        </trans-unit>
        <trans-unit id="79e422d60ab9df0e430e6c9d9a891769e0dfc46a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tells the router where to display routed views.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; ルーティングされたビューを表示するには、ルータに指示します。</target>
        </trans-unit>
        <trans-unit id="2e9c175f01fedfce94b31b57ef2e44a941e53e82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; currently provides the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with the value of 🐶 (puppy). Because the injector has only to look at the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt; for the &lt;code&gt;AnimalService&lt;/code&gt;, it never sees the 🐳 (whale).</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 現在提供 &lt;code&gt;AnimalService&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の 🐶（子犬）の値を持つ配列。インジェクターは、 &lt;code&gt;AnimalService&lt;/code&gt; の &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; の &lt;code&gt;ElementInjector&lt;/code&gt; を調べるだけでよいので、the（クジラ）を見ることはありません。</target>
        </trans-unit>
        <trans-unit id="238522607dbec39c2b10c2b4a047546ae6e03124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; tag in the example is an element that represents a new component, &lt;code&gt;HeroDetailComponent&lt;/code&gt;. &lt;code&gt;HeroDetailComponent&lt;/code&gt; (code not shown) defines the hero-detail child view of &lt;code&gt;HeroListComponent&lt;/code&gt;. Notice how custom components like this mix seamlessly with native HTML in the same layouts.</source>
          <target state="translated">この例の &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; タグは、新しいコンポーネントである &lt;code&gt;HeroDetailComponent&lt;/code&gt; を表す要素です。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; （コードは非表示）は、 &lt;code&gt;HeroListComponent&lt;/code&gt; の hero-detail子ビューを定義します。このようなカスタムコンポーネントが、同じレイアウトでネイティブHTMLとシームレスに混在していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="34fe98653d5a2333f28a36d168f80667c0dd14c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; components won't display a source code file unless it has a &lt;em&gt;#docregion&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; それがない限りコンポーネントは、ソース・コード・ファイルは表示されません&lt;em&gt;#docregionを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c67d48b1a68a7babea3a9a1684d08bd5c84499c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; case binds the &lt;code&gt;HighlightDirective&lt;/code&gt; to the name of a color value in the input box. The initial value is the word &quot;cyan&quot; which should be the background color of the input box.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 場合は、結合 &lt;code&gt;HighlightDirective&lt;/code&gt; を入力ボックス内の色値の名前。初期値は「シアン」という単語で、入力ボックスの背景色にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e30b382cd0b284d5678988780f68af3033805fbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element carries the HTML validation attributes: &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;. It also carries a custom validator directive, &lt;code&gt;forbiddenName&lt;/code&gt;. For more information, see &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素は、HTMLの検証属性を運ぶ： &lt;code&gt;required&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 。また、カスタムバリデータディレクティブ &lt;code&gt;forbiddenName&lt;/code&gt; も含まれます。詳細については、「&lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーター」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="326834fbb7c5e0943d924c7415e94c4b70ac7a46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is a syntax element recognized by the Angular parser. It's not a directive, component, class, or interface. It's more like the curly braces in a JavaScript &lt;code&gt;if&lt;/code&gt;-block:</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 角パーサによって認識シンタックス要素です。ディレクティブ、コンポーネント、クラス、またはインターフェースではありません。-blockの &lt;code&gt;if&lt;/code&gt; は、JavaScriptの波括弧のようなものです。</target>
        </trans-unit>
        <trans-unit id="fd20c7620fef7c45d4edd4193dfc39179d70431b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag is a &lt;em&gt;placeholder&lt;/em&gt; for the external content. It tells Angular where to insert that content. In this case, the projected content is the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; from the parent.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; タグがある&lt;em&gt;プレースホルダー&lt;/em&gt;外部コンテンツのため。そのコンテンツを挿入する場所をAngularに伝えます。この場合、投影されるコンテンツは、親からの &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f4e027c2e3b4edb293e0cad4bbba2e70ee66810e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efdfb17d702bc8bbe65f04dda2cbc25b2231caa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is a good choice for dynamic components because it doesn't render any additional output.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; それは、追加の出力をレンダリングしていないため、要素が動的コンポーネントに適しています。</target>
        </trans-unit>
        <trans-unit id="2a8bb2dcac92b489d02149d2c7fd4d8b3a43c3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is where you apply the directive you just made. To apply the &lt;code&gt;AdDirective&lt;/code&gt;, recall the selector from &lt;code&gt;ad.directive.ts&lt;/code&gt;, &lt;code&gt;ad-host&lt;/code&gt;. Apply that to &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; without the square brackets. Now Angular knows where to dynamically load components.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; あなたはあなただけ作られたディレクティブを適用する場所の要素があります。 &lt;code&gt;AdDirective&lt;/code&gt; を適用するには、 &lt;code&gt;ad.directive.ts&lt;/code&gt; 、 &lt;code&gt;ad-host&lt;/code&gt; からセレクターを呼び出します。角かっこなしで &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; に適用します。これで、Angularは動的にコンポーネントをロードする場所を認識します。</target>
        </trans-unit>
        <trans-unit id="7ab5050deed14a9d8aec4d32da381b874daf44ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag was deprecated in v4 to avoid colliding with the DOM's element of the same name (such as when using web components). Use &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; instead. For more information, see the &lt;a href=&quot;angular-compiler-options#enablelegacytemplate&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; タグは（などのWebコンポーネントを使用するときのように）同じ名前のDOMの要素との衝突を避けるためにV4で廃止されました。代わりに &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; を使用してください。詳細については、&lt;a href=&quot;angular-compiler-options#enablelegacytemplate&quot;&gt;事前コンパイル&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="b72d4c5c6466d06641152ad78396729ffd2474ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt; event is bound to the &lt;code&gt;addNewItem()&lt;/code&gt; method in the child component class which takes as its argument whatever the value of &lt;code&gt;#newItem&lt;/code&gt; is.</source>
          <target state="translated">&lt;code&gt;(click)&lt;/code&gt; イベントは、子コンポーネントクラスの &lt;code&gt;addNewItem()&lt;/code&gt; メソッドにバインドされています。このメソッドは、 &lt;code&gt;#newItem&lt;/code&gt; の値が何であれ、引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="6b8080b0d96315c1fea91fa690a42e383df27175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt; to the left of the equals sign identifies the button's click event as the &lt;strong&gt;target of the binding&lt;/strong&gt;. The text in quotes to the right of the equals sign is the &lt;strong&gt;template statement&lt;/strong&gt;, which responds to the click event by calling the component's &lt;code&gt;onClickMe&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;(click)&lt;/code&gt; の左側には、符号識別など、ボタンのクリックイベント等しい&lt;strong&gt;結合のターゲットを&lt;/strong&gt;。等号の右側にある引用符で &lt;code&gt;onClickMe&lt;/code&gt; は、コンポーネントのonClickMeメソッドを呼び出すことによってクリックイベントに応答する&lt;strong&gt;テンプレートステートメント&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="5972469341e9c4bb2e9183bf2c05dde6fc8440b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt;&lt;a href=&quot;user-input#binding-to-user-input-events&quot;&gt;&lt;em&gt;event binding&lt;/em&gt;&lt;/a&gt; calls the component's &lt;code&gt;selectHero&lt;/code&gt; method when the user clicks a hero's name.</source>
          <target state="translated">&lt;code&gt;(click)&lt;/code&gt; &lt;a href=&quot;user-input#binding-to-user-input-events&quot;&gt;&lt;em&gt;結合事象&lt;/em&gt;&lt;/a&gt;の呼び出しコンポーネントの &lt;code&gt;selectHero&lt;/code&gt; のユーザーは主人公の名前をクリックする方法を。</target>
        </trans-unit>
        <trans-unit id="3f9a45c02a8db70de99ace5e845ded0b9bab287b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(keyup)&lt;/code&gt; event handler hears &lt;em&gt;every keystroke&lt;/em&gt;. Sometimes only the &lt;em&gt;Enter&lt;/em&gt; key matters, because it signals that the user has finished typing. One way to reduce the noise would be to examine every &lt;code&gt;$event.keyCode&lt;/code&gt; and take action only when the key is &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;(keyup)&lt;/code&gt; イベントハンドラを聞く&lt;em&gt;すべてのキーストロークを&lt;/em&gt;。ユーザーが入力を完了したことを示すため、&lt;em&gt;Enter&lt;/em&gt;キーだけが重要な場合があります。ノイズを減らす1つの方法は、すべての &lt;code&gt;$event.keyCode&lt;/code&gt; を調べて、キーが&lt;em&gt;Enterの&lt;/em&gt;場合にのみアクションを実行することです。</target>
        </trans-unit>
        <trans-unit id="10abfce959f609271607b301af52de8fbf29d196" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;* =&amp;gt; *&lt;/code&gt; transition applies when any change between two states takes place.</source>
          <target state="translated">&lt;code&gt;* =&amp;gt; *&lt;/code&gt; 2つの状態の間で変更が行われたときにトランジションが適用されます。</target>
        </trans-unit>
        <trans-unit id="2120f338343729dc380dc6b0089baa51ac809b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**&lt;/code&gt; path in the last route is a &lt;strong&gt;wildcard&lt;/strong&gt;. The router will select this route if the requested URL doesn't match any paths for routes defined earlier in the configuration. This is useful for displaying a &quot;404 - Not Found&quot; page or redirecting to another route.</source>
          <target state="translated">最後のルートの &lt;code&gt;**&lt;/code&gt; パスは&lt;strong&gt;ワイルドカード&lt;/strong&gt;です。ルーターは、要求されたURLが、構成で以前に定義されたルートのパスと一致しない場合、このルートを選択します。これは、「404-見つかりません」ページを表示したり、別のルートにリダイレクトしたりするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="96ab982ceb0f51ab7dc6e0259cf6586cf95248da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; symbol turns the current element into an embedded template. Equivalent to: &lt;code&gt;&amp;lt;ng-template [myUnless]=&quot;myExpression&quot;&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 記号は、埋め込まれたテンプレートに現在の要素をオンにします。同等： &lt;code&gt;&amp;lt;ng-template [myUnless]=&quot;myExpression&quot;&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c2d5580b2ef8003829258ec68b0138943d8a940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive in Angular is similar to the &lt;code&gt;ng-repeat&lt;/code&gt; directive in AngularJS. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; in this example) and its contents into a template and uses that template to instantiate a view for each item in the list.</source>
          <target state="translated">Angular の &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ディレクティブは、AngularJSの &lt;code&gt;ng-repeat&lt;/code&gt; ディレクティブに似ています。指定されたコレクション内のアイテムごとに、関連付けられたDOM要素を繰り返します。より正確には、定義された要素（この例では &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; ）とそのコンテンツをテンプレートに変換し、そのテンプレートを使用して、リスト内の各アイテムのビューをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="8e1d922dd350f306cee6d2827b89d6c59d7018cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive iterates over each form control instance provided by the aliases form array instance. Because form array elements are unnamed, you assign the index to the &lt;code&gt;i&lt;/code&gt; variable and pass it to each control to bind it to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; input.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 指令反復エイリアスによって提供される各フォームコントロールインスタンスにわたって配列インスタンスを形成します。フォーム配列要素には名前がないため、インデックスを &lt;code&gt;i&lt;/code&gt; 変数に割り当て、それを各コントロールに渡して &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 入力にバインドします。</target>
        </trans-unit>
        <trans-unit id="52969138b5130b927875be6b78501fd4d2cc3965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive tells Angular to iterate over a list.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ディレクティブは、リストを反復処理するために角度を伝えます。</target>
        </trans-unit>
        <trans-unit id="c40c69127cacc3294ec3f3ca68aa65396d4921ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over the items in the &lt;code&gt;items&lt;/code&gt; array. When you enter a value in the child's &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and click the button, the child emits the event and the parent's &lt;code&gt;addItem()&lt;/code&gt; method pushes the value to the &lt;code&gt;items&lt;/code&gt; array and it renders in the list.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は、内の項目の上に反復する &lt;code&gt;items&lt;/code&gt; 配列。子の &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に値を入力してボタンをクリックすると、子がイベントを &lt;code&gt;addItem()&lt;/code&gt; 、親のaddItem（）メソッドが値を &lt;code&gt;items&lt;/code&gt; 配列にプッシュして、リストにレンダリングします。</target>
        </trans-unit>
        <trans-unit id="1b34fcebb6c80852949768c3729417a298981452" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater creates as many links as are in the component's &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 多くのリンクは、などのコンポーネントの中にいるようリピーターが作成されます &lt;code&gt;heroes&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="974cf1dc9316505b9a97fbea008c22a30e3f284a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeats hero objects. Notice that the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over a list called &lt;code&gt;heroes$&lt;/code&gt;, not &lt;code&gt;heroes&lt;/code&gt;. The &lt;code&gt;$&lt;/code&gt; is a convention that indicates &lt;code&gt;heroes$&lt;/code&gt; is an &lt;code&gt;Observable&lt;/code&gt;, not an array.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は英雄のオブジェクトを繰り返します。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;heroes$&lt;/code&gt; ではなく &lt;code&gt;heroes&lt;/code&gt; $というリストを反復処理することに注意してください。 &lt;code&gt;$&lt;/code&gt; 示し大会で &lt;code&gt;heroes$&lt;/code&gt; ある &lt;code&gt;Observable&lt;/code&gt; 、ではない配列。</target>
        </trans-unit>
        <trans-unit id="ef9135def9fd84348381da68de4edf112bd5c56b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive in Angular works the same as the &lt;code&gt;ng-if&lt;/code&gt; directive in AngularJS. It removes or recreates a portion of the DOM based on an expression.</source>
          <target state="translated">Angular の &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ディレクティブは、AngularJSの &lt;code&gt;ng-if&lt;/code&gt; ディレクティブと同じように機能します。式に基づいてDOMの一部を削除または再作成します。</target>
        </trans-unit>
        <trans-unit id="fd7047a22a6c3235fbbd9f2a4355662750316bdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive moved to the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element where it became a property binding,&lt;code&gt;[&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のディレクティブはに移動し &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; それが結合財産となった場合には、要素 &lt;code&gt;[&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0093388df5eaa9c4c71a08425e65597f7ff6f7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element reveals a set of nested message &lt;code&gt;divs&lt;/code&gt; but only if the &lt;code&gt;name&lt;/code&gt; is invalid and the control is either &lt;code&gt;dirty&lt;/code&gt; or &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 上 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素は、ネストされたメッセージのセットを明らかにする &lt;code&gt;divs&lt;/code&gt; だけあれば &lt;code&gt;name&lt;/code&gt; 無効であり、制御のいずれかである &lt;code&gt;dirty&lt;/code&gt; や &lt;code&gt;touched&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="434fcab1e3a8d321be3bd94ab9489622041eb31c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; only displays the messages area if there are messages to show.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; は、表示するメッセージがある場合にのみ、メッセージエリアを表示します。</target>
        </trans-unit>
        <trans-unit id="d59381edc8880b72df3dd7c44b31b8ca52e6092d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive is most commonly used to conditionally show an inline template, as seen in the following example. The default &lt;code&gt;else&lt;/code&gt; template is blank.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 、次の例に見られるようなディレクティブは、最も一般的に、条件付きインラインテンプレートを表示するために使用されます。デフォルトの &lt;code&gt;else&lt;/code&gt; テンプレートは空白です。</target>
        </trans-unit>
        <trans-unit id="519a225df0d1b1586a1fbe4ebece19660d118076" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--open&lt;/code&gt; (or just &lt;code&gt;-o&lt;/code&gt;) option automatically opens your browser to &lt;code&gt;http://localhost:4200/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--open&lt;/code&gt; （または単に &lt;code&gt;-o&lt;/code&gt; ）オプションが自動的にブラウザを開き &lt;code&gt;http://localhost:4200/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21886eb0c6a56536748cb67bd6410d088c51786c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--open&lt;/code&gt; flag opens a browser to &lt;code&gt;http://localhost:4200/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--open&lt;/code&gt; フラグにブラウザを開き &lt;code&gt;http://localhost:4200/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42efef1f124237247d38b603c4bad7661e6bda6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--prod&lt;/code&gt;&lt;em&gt;meta-flag&lt;/em&gt; engages the following build optimization features.</source>
          <target state="translated">&lt;code&gt;--prod&lt;/code&gt; &lt;em&gt;メタフラグは&lt;/em&gt;、次のビルドの最適化機能を係合します。</target>
        </trans-unit>
        <trans-unit id="0e88d20c25b9a1cb33ec394f79fb11ace1c95d63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.metadata.json&lt;/code&gt; files contain information needed by the template compiler from a &lt;code&gt;.ts&lt;/code&gt; file that is not included in the &lt;code&gt;.d.ts&lt;/code&gt; file produced by the TypeScript compiler. This information includes, for example, the content of annotations (such as a component's template), which TypeScript emits to the &lt;code&gt;.js&lt;/code&gt; file but not to the &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;.metadata.json&lt;/code&gt; のファイルからテンプレートコンパイラが必要とする情報含まれている &lt;code&gt;.ts&lt;/code&gt; 中に含まれていないファイル &lt;code&gt;.d.ts&lt;/code&gt; の活字体のコンパイラによって生成されたファイルを。この情報には、たとえば、TypeScriptが &lt;code&gt;.js&lt;/code&gt; ファイルに出力するが &lt;code&gt;.d.ts&lt;/code&gt; ファイルには出力しない注釈（コンポーネントのテンプレートなど）のコンテンツが含まれます。</target>
        </trans-unit>
        <trans-unit id="da433db456ebe4159bdc0c31a9dc8f8bb5a729ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/deep/&lt;/code&gt; combinator also has the aliases &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;::ng-deep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/deep/&lt;/code&gt; コンビネータも別名を持ち &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;::ng-deep&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb8dddba1a3a8f516cc04db526b4971f6100af63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; selector is the only way to target the host element. You can't reach the host element from inside the component with other selectors because it's not part of the component's own template. The host element is in a parent component's template.</source>
          <target state="translated">&lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; セレクタは、ホスト要素をターゲットとする唯一の方法です。ホスト要素はコンポーネント自体のテンプレートの一部ではないため、他のセレクターを使用してコンポーネント内からホスト要素に到達することはできません。ホスト要素は、親コンポーネントのテンプレートにあります。</target>
        </trans-unit>
        <trans-unit id="96dc3a416c0a1b81fdad59a50d7802b56e3490fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:enter&lt;/code&gt; transition runs when any &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; views are placed on the page, and &lt;code&gt;:leave&lt;/code&gt; runs when those views are removed from the page.</source>
          <target state="translated">&lt;code&gt;:enter&lt;/code&gt; 任意の時に移行の実行を &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; のビューがページ上に配置されており、 &lt;code&gt;:leave&lt;/code&gt; これらのビューをページから削除されたときに実行します。</target>
        </trans-unit>
        <trans-unit id="8dfbe701918754e8626af9582beed98ca14504a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:id&lt;/code&gt; in the second route is a token for a route parameter. In a URL such as &lt;code&gt;/hero/42&lt;/code&gt;, &quot;42&quot; is the value of the &lt;code&gt;id&lt;/code&gt; parameter. The corresponding &lt;code&gt;HeroDetailComponent&lt;/code&gt; will use that value to find and present the hero whose &lt;code&gt;id&lt;/code&gt; is 42. You'll learn more about route parameters later in this guide.</source>
          <target state="translated">2番目のルートの &lt;code&gt;:id&lt;/code&gt; は、ルートパラメータのトークンです。 &lt;code&gt;/hero/42&lt;/code&gt; などのURL では、「42」は &lt;code&gt;id&lt;/code&gt; パラメータの値です。対応する &lt;code&gt;HeroDetailComponent&lt;/code&gt; はその値を使用して、 &lt;code&gt;id&lt;/code&gt; が42 であるヒーローを見つけて提示します。ルートパラメータの詳細については、このガイドで後ほど学習します。</target>
        </trans-unit>
        <trans-unit id="90b7bbb98338684f39be744dca5eee1e473bb6c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function (second argument of the transition function) accepts the &lt;code&gt;timings&lt;/code&gt; and &lt;code&gt;styles&lt;/code&gt; input parameters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数（遷移関数の第2引数）を受け付ける &lt;code&gt;timings&lt;/code&gt; や &lt;code&gt;styles&lt;/code&gt; 入力パラメータを。</target>
        </trans-unit>
        <trans-unit id="6aa8ce6afb763d79c390fee072a2367942e65792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function in Angular allows you to specify multiple interim styles within a single transition, with an optional offset to define the point in the animation where each style change occurs.</source>
          <target state="translated">Angular の &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 関数を使用すると、1つのトランジション内で複数の中間スタイルを指定できます。オプションのオフセットを使用して、各スタイルの変更が発生するアニメーションのポイントを定義できます。</target>
        </trans-unit>
        <trans-unit id="ad35da3f65c892375ddd871696a7bd3b66478d66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt; params&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt; can also be preserved using a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;queryParamsHandling&lt;/code&gt; and &lt;code&gt;preserveFragment&lt;/code&gt; bindings respectively.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt; params&lt;/code&gt; および &lt;code&gt;fragment&lt;/code&gt; また、使用して保存することができる &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;queryParamsHandling&lt;/code&gt; と &lt;code&gt;preserveFragment&lt;/code&gt; それぞれバインディング。</target>
        </trans-unit>
        <trans-unit id="a45f970b4aa67853e344825fb7ac64aa16a23ca7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function allows you to find inner elements within the element that is being animated. This function targets specific HTML elements within a parent component and applies animations to each element individually. Angular intelligently handles setup, teardown, and cleanup as it coordinates the elements across the page.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 関数は、あなたがアニメ化されている要素内の内部要素を見つけることができます。この関数は、親コンポーネント内の特定のHTML要素を対象とし、アニメーションを各要素に個別に適用します。Angularは、ページ全体で要素を調整しながら、セットアップ、ティアダウン、クリーンアップをインテリジェントに処理します。</target>
        </trans-unit>
        <trans-unit id="377b4c3b33ed4e6d023f9c5ffd3c7e62bb723020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; function allows you to define a timing gap between each queried item that is animated and thus animates elements with a delay between them.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 関数を使用すると、アニメーション、したがって、それらの間の遅延を持つ要素をアニメーション化された各照会項目間のタイミングギャップを定義することを可能にします。</target>
        </trans-unit>
        <trans-unit id="ca0e77d333988840b26a6477d5cfa93de0fd21eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function takes additional selector values, &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt;. Use these to kick off a transition when a numeric value has increased or decreased in value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 関数は、追加のセレクタ値をとる &lt;code&gt;:increment&lt;/code&gt; と &lt;code&gt;:decrement&lt;/code&gt; 。これらを使用して、数値の値が増減したときに遷移を開始します。</target>
        </trans-unit>
        <trans-unit id="1175f7e12c287c6766b1bf4935d68fa0a9aacf16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function describes the property name to watch for changes. When a change occurs, the trigger initiates the actions included in its definition. These actions can be transitions or other functions, as we'll see later on.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数は、変更を監視するには、プロパティ名を記述します。変更が発生すると、トリガーはその定義に含まれているアクションを開始します。後で説明するように、これらのアクションは遷移または他の関数です。</target>
        </trans-unit>
        <trans-unit id="8a4b3621e7c4f33ab29f4114473d11c070892306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; is also stateful. The pipe maintains a subscription to the input &lt;code&gt;Observable&lt;/code&gt; and keeps delivering values from that &lt;code&gt;Observable&lt;/code&gt; as they arrive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; はまた、ステートフルです。パイプは、入力 &lt;code&gt;Observable&lt;/code&gt; へのサブスクリプションを維持し、その &lt;code&gt;Observable&lt;/code&gt; からの値が到着したときにそれらを配信し続けます。</target>
        </trans-unit>
        <trans-unit id="e9f2e4b7fce125080de1aad2e4783db64cc0aea6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; captures both kinds of errors in its &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; and you can inspect that response to figure out what really happened.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をキャプチャその中のエラーの種類の両方 &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; 、あなたが本当に何が起こったのかを把握することの応答を調べることができます。</target>
        </trans-unit>
        <trans-unit id="5384cbacf5ba9fcb68ffa4d9a9d16a5e1c862a9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; offers a simplified client HTTP API for Angular applications that rests on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface exposed by browsers. Additional benefits of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; include testability features, typed request and response objects, request and response interception, &lt;code&gt;Observable&lt;/code&gt; apis, and streamlined error handling.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は、ブラウザーによって公開された &lt;code&gt;XMLHttpRequest&lt;/code&gt; インターフェイスに依存するAngularアプリケーション用の簡略化されたクライアントHTTP APIを提供します。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; のその他の利点には、テスト容易性機能、型付き要求と応答オブジェクト、要求と応答のインターセプト、 &lt;code&gt;Observable&lt;/code&gt; API、および合理化されたエラー処理が含まれます。</target>
        </trans-unit>
        <trans-unit id="deeb8ba499b1b180bde00f2b9551724010997688" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method normally returns an &lt;em&gt;observable&lt;/em&gt; that either emits the data or an error. Some folks describe it as a &quot;&lt;em&gt;one and done&lt;/em&gt;&quot; observable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; メソッドは、通常返し&lt;em&gt;観察&lt;/em&gt;のいずれかがデータまたはエラーを発すること。一部の人々は、それを「&lt;em&gt;1回で完了した&lt;/em&gt;」観察可能である&lt;em&gt;と&lt;/em&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="df333c509fac8ddb188bad0cfbdd394bda4c50f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; method is similar to &lt;code&gt;get()&lt;/code&gt; in that it has a type parameter (you're expecting the server to return the new hero) and it takes a resource URL.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; メソッドは、と似て &lt;code&gt;get()&lt;/code&gt; は、それが型パラメータを持っている（あなたは新しいヒーローを返すようにサーバーを期待している）、それは、リソースURLをとることに。</target>
        </trans-unit>
        <trans-unit id="55770db94e082c9f5e561030f40e47b4f1674770" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; method takes three parameters:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; メソッドは、3つのパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="7a4ce4d193b0811a6f8f7ad610feeb8dec143461" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; are immutable so you'll have to save the returned value of the &lt;code&gt;.set()&lt;/code&gt; method in order to update the options.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; は、あなたがの戻り値保存する必要がありますので、不変です &lt;code&gt;.set()&lt;/code&gt; のオプションを更新するために方法を。</target>
        </trans-unit>
        <trans-unit id="011c7e92ac38205e83ad5e89713470259fc0289a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; can make these testing scenarios more manageable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; は、これらのテストシナリオは、より管理しやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="6e57d0d3a73437e120975f03c6e520b3623c7eae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; pipe is particularly helpful for debugging bindings:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; パイプは、バインディングをデバッグするために特に有用です：</target>
        </trans-unit>
        <trans-unit id="7687f629bb10a3782e5e6e031f54803a9613c67a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive implements &lt;code&gt;NgFor&lt;/code&gt;. Read more about additional &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive properties and context properties in the &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf API reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; ディレクティブ実装 &lt;code&gt;NgFor&lt;/code&gt; 。追加の &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; ディレクティブプロパティとコンテキストプロパティの詳細については、&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf APIリファレンスをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="828f8cc9e1b68dc8578c2870bfc113f92e5b8081" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive doesn't hide elements with CSS. It adds and removes them physically from the DOM. Confirm that fact using browser developer tools to inspect the DOM.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のディレクティブは、CSSで要素を非表示にしていません。DOMから物理的に追加および削除します。ブラウザ開発者ツールを使用してDOMを検査し、その事実を確認してください。</target>
        </trans-unit>
        <trans-unit id="d561348f9e9b5e8716d8be79b6e49e3f2cc2dc8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; directives</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; のディレクティブ</target>
        </trans-unit>
        <trans-unit id="13016879e5b136aba9f37a06656c49328e2ea0ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/slicepipe&quot;&gt;SlicePipe&lt;/a&gt;&lt;/code&gt; does the same thing but the &lt;em&gt;order of the parameters is reversed&lt;/em&gt;, in keeping with the JavaScript &lt;code&gt;Slice&lt;/code&gt; method. The first parameter is the starting index; the second is the limit. As in AngularJS, coding this operation within the component instead could improve performance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/slicepipe&quot;&gt;SlicePipe&lt;/a&gt;&lt;/code&gt; は同じことを行いますが&lt;em&gt;、パラメータの順序が逆に&lt;/em&gt; JavaScriptのに合わせて、 &lt;code&gt;Slice&lt;/code&gt; 方法。最初のパラメーターは開始インデックスです。2番目は限界です。AngularJSと同様に、この操作をコンポーネント内でコーディングすると、パフォーマンスが向上する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d817909915566340878143825ee398005068d212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;shared&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;shared&lt;/code&gt; フォルダ。</target>
        </trans-unit>
        <trans-unit id="aae71b7520bfd4b36d6c153e1ebfe169315f1074" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#url&quot;&gt;url()&lt;/a&gt;&lt;/code&gt; method reads source files from your filesystem, relative to the schematic.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#url&quot;&gt;url()&lt;/a&gt;&lt;/code&gt; メソッドは、回路図と比較し、あなたのファイルシステムからソースファイルを読み込みます。</target>
        </trans-unit>
        <trans-unit id="851fc6e1fd0eaba4690e642ebc501aa32059ab01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method accepts a configuration object that allows you to configure options including the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;useHash&lt;/code&gt; property, and the URL prefix with the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; メソッドは、以下を含むconfigureオプションにあなたを可能にする設定オブジェクト受け入れ &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;useHash&lt;/code&gt; のプロパティ、および持つURL接頭辞 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; のプロパティを。</target>
        </trans-unit>
        <trans-unit id="756d0ba3695e20402dac04dc80348f3a5ce7bc04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; function accepts milliseconds as a parameter (defaults to 0 if not provided). The parameter represents how much the virtual clock advances. For example, if you have a &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, you need to use tick(100) to trigger the fn callback.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 関数のパラメータ（設けられていない場合は0にデフォルト）としてミリ秒を受け付けます。パラメータは、仮想時計の進み具合を表します。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）テストに &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; がある場合、tick（100）を使用してfnコールバックをトリガーする必要があります。</target>
        </trans-unit>
        <trans-unit id="897827b5730f7b24462bc905181ae4197863fb98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; function is one of the Angular testing utilities that you import with &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;. It's a companion to &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and you can only call it within a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; body.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 関数は、あなたがインポートアンギュラテストユーティリティの1つである &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。これは &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; のコンパニオンであり、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 本体内でのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="69ee243bd8cdc74b2d9890a9225015af3b1be718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; for the component.</source>
          <target state="translated">コンポーネントの &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5809ea7370f47ded53130555d7d9d221cc5c877" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; is most valuable when testing a component that has the &lt;code&gt;&lt;a href=&quot;../api/core/changedetectionstrategy#OnPush&quot;&gt;ChangeDetectionStrategy.OnPush&lt;/a&gt;&lt;/code&gt; method or the component's change detection is under your programmatic control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; は、あるコンポーネントテストするときに最も価値がある &lt;code&gt;&lt;a href=&quot;../api/core/changedetectionstrategy#OnPush&quot;&gt;ChangeDetectionStrategy.OnPush&lt;/a&gt;&lt;/code&gt; のあなたのプログラム制御下にあるメソッドまたはコンポーネントの変更の検出を。</target>
        </trans-unit>
        <trans-unit id="51794b2d7fab6f05d86b195b0e1aca2ec6b1d7fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; associated with the root element of the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; コンポーネントのルート要素に関連付けられています。</target>
        </trans-unit>
        <trans-unit id="961daa0538457c955d90426ae42027fad7dff895" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; has other methods and properties that are useful in tests, as you'll see elsewhere in this guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; は、あなたが他の場所で、このガイドで表示されますよう、テストするのに有用である他のメソッドとプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="f1de24ec1f5099c1ccbba6b2ab07fecb22f71cab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; offers query methods that work for all supported platforms. These query methods take a &lt;em&gt;predicate&lt;/em&gt; function that returns &lt;code&gt;true&lt;/code&gt; when a node in the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; tree matches the selection criteria.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; の申し出問い合わせ方法サポートされているすべてのプラットフォーム用のワークいます。これらのクエリメソッドは、 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; ツリーのノードが選択基準に一致する場合に &lt;code&gt;true&lt;/code&gt; を返す&lt;em&gt;述語&lt;/em&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="862186ee287f0a3973ebace73350df1dc36f0373" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; parent. Null if this is the root element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; の親。これがルート要素の場合はnull。</target>
        </trans-unit>
        <trans-unit id="e19b18ad54693eb69b8495b3c5389751ca092427" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; provides crucial insights into the component's DOM representation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; は、コンポーネントのDOM表現に重要な洞察を提供します。</target>
        </trans-unit>
        <trans-unit id="8862a64115ba59a883af135381735a2e8bb22ad8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; provider key lets you map one token to another. In effect, the first token is an &lt;em&gt;alias&lt;/em&gt; for the service associated with the second token, creating two ways to access the same service object.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; のプロバイダのキーを使用すると、別のトークンをマッピングすることができます。実際、最初のトークンは2番目のトークンに関連付けられたサービスの&lt;em&gt;エイリアス&lt;/em&gt;であり、同じサービスオブジェクトにアクセスする2つの方法を作成します。</target>
        </trans-unit>
        <trans-unit id="02289d427dfadce775076f28b6b4b604ca0aa6ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; field tells Angular that the provider is a factory function whose implementation is &lt;code&gt;heroServiceFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; フィールドは、プロバイダがその実装であるファクトリ関数であることを角度を伝え &lt;code&gt;heroServiceFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40f86f8f21fce527e353b556c2ec4994b4b501e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider key lets you create a dependency object by calling a factory function, as in the following example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロバイダのキーを使用すると、次の例のように、ファクトリ関数を呼び出すことにより、依存関係オブジェクトを作成することができます。</target>
        </trans-unit>
        <trans-unit id="0b974d1037f4bd4bb8020582a79e0ce5c8b0b3c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; wires the click event of the host element (the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; anchor elements in &lt;code&gt;AppComponent&lt;/code&gt;) to the stub directive's &lt;code&gt;onClick&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; のワイヤーホスト要素のクリックイベント（ &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 内のアンカー要素 &lt;code&gt;AppComponent&lt;/code&gt; ）スタブディレクティブのへ &lt;code&gt;onClick&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="1ec3f4f7beb143e72b2f66889972507a21903aa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; property is declared in the &lt;code&gt;ListItemComponent&lt;/code&gt; with a type of &lt;code&gt;Item&lt;/code&gt; and decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; プロパティがで宣言されている &lt;code&gt;ListItemComponent&lt;/code&gt; のタイプの &lt;code&gt;Item&lt;/code&gt; と飾ら &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="62296206d0f1bcad4784d2e6379d92928e2d5a0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; also prevents the compiler from telling you about the missing components and attributes that you omitted inadvertently or misspelled. You could waste hours chasing phantom bugs that the compiler would have caught in an instant.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; は、誤って省略した、またはスペルを間違えた、欠落しているコンポーネントおよび属性についてコンパイラが通知するのを防ぎます。コンパイラーが一瞬で見つけた幻のバグを追いかけて時間を無駄にする可能性があります。</target>
        </trans-unit>
        <trans-unit id="f9832c0d12b70799263520e96d78a0a11b71abae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; approach is the easier of the two but don't overuse it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; のアプローチは、2つの簡単ですが、それ使いすぎません。</target>
        </trans-unit>
        <trans-unit id="736f7b384e5c3d37d116e2a6a5c084d671e75bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; tells the Angular compiler to ignore unrecognized elements and attributes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; は認識されない要素と属性を無視するように角度コンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="46ae0e9050482d384516ed17b7168e0b7f8f4de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; method creates a child injector of the platform injector which is configured by the &lt;code&gt;AppModule&lt;/code&gt;. This is the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; メソッドは、により構成されているプラットフォームインジェクタの子インジェクタ作成 &lt;code&gt;AppModule&lt;/code&gt; を。これが &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dfd9564eb30349a9789dc480442eca5944f3969c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; object literal</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; オブジェクトリテラル</target>
        </trans-unit>
        <trans-unit id="544be4e74b7a5646610d6d8b844c6bf76f8cc96d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; contains:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; セクションには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="c6f3e8e57f07ac59c00b10a08504252a4823865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper function takes a parameterless function with the body of the setup.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ヘルパー関数は、セットアップの本体とパラメータなしの機能を取ります。</target>
        </trans-unit>
        <trans-unit id="14f024be8696cacdaf6f765e664b4a9642519924" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; utility hides some asynchronous boilerplate by arranging for the tester's code to run in a special &lt;em&gt;async test zone&lt;/em&gt;. You don't need to pass Jasmine's &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; into the test and call &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; because it is &lt;code&gt;undefined&lt;/code&gt; in promise or observable callbacks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ユーティリティは、特別に実行するために、テスターのコードを配置することによって、いくつかの非同期定型を隠し&lt;em&gt;非同期テストゾーン&lt;/em&gt;。あなたは、ジャスミンの渡す必要はありません &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; のテストと呼び出しに &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; それがされているため、 &lt;code&gt;undefined&lt;/code&gt; の約束または観察可能なコールバックに。</target>
        </trans-unit>
        <trans-unit id="b6bdb963f4671f0ae12506889584d39b686a4803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; properties and methods provide access to the component, its DOM representation, and aspects of its Angular environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; のプロパティとメソッドは、コンポーネント、そのDOM表現へのアクセスを提供し、その角度環境の側面。</target>
        </trans-unit>
        <trans-unit id="93ac15fbb5d8a83db3c78e9d66f9a5a179823b1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#debugElement&quot;&gt;debugElement&lt;/a&gt;&lt;/code&gt; provides insight into the component and its DOM element during test and debugging. It's a critical property for testers. The most interesting members are covered &lt;a href=&quot;testing#debug-element-details&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#debugElement&quot;&gt;debugElement&lt;/a&gt;&lt;/code&gt; は、テストおよびデバッグ中にコンポーネントとそのDOM要素への洞察を提供します。これはテスターに​​とって重要な特性です。最も興味深いメンバーを&lt;a href=&quot;testing#debug-element-details&quot;&gt;以下に示します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d60cbcd5a51066898ce1cfaef907a6ff5eeb1913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; function enables a linear coding style by running the test body in a special &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt; test zone&lt;/code&gt;. The test body appears to be synchronous. There is no nested syntax (like a &lt;code&gt;Promise.then()&lt;/code&gt;) to disrupt the flow of control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 関数は、特別に試験体を実行することにより、コーディングスタイルリニア可能 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt; test zone&lt;/code&gt; 。テスト本体は同期しているようです。制御のフローを &lt;code&gt;Promise.then()&lt;/code&gt; ネストされた構文（Promise.then（）など）はありません。</target>
        </trans-unit>
        <trans-unit id="4d2f01c3eec63e6c9292ec719b3298411291b445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; utility function has a few limitations. In particular, it won't work if the test body makes an &lt;code&gt;XMLHttpRequest&lt;/code&gt; (XHR) call. XHR calls within a test are rare so you can generally stick with &lt;a href=&quot;testing#fake-async&quot;&gt;&lt;code&gt;fakeAsync()&lt;/code&gt;&lt;/a&gt;. But if you ever do need to call &lt;code&gt;XMLHttpRequest&lt;/code&gt;, you'll want to know about &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; ユーティリティ関数には、いくつかの制限があります。特に、テスト本体が &lt;code&gt;XMLHttpRequest&lt;/code&gt; （XHR）呼び出しを行う場合は機能しません。テスト内のXHR呼び出しはまれであるため、通常は&lt;a href=&quot;testing#fake-async&quot;&gt; &lt;code&gt;fakeAsync()&lt;/code&gt; &lt;/a&gt;を使用できます。ただし、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; を呼び出す必要がある場合は、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; について知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="c184a77512c3c8c73e87e4c09c8907531fc12dff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; API consists of static class methods that either update or reference a &lt;em&gt;global&lt;/em&gt; instance of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; APIは、更新または参照のいずれかのことを静的クラスのメソッドから成る&lt;em&gt;グローバル&lt;/em&gt;のインスタンス &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5dcb0270444e1aa603b2dcc620f2b6164bc70ff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; class is one of the principal Angular testing utilities. Its API is quite large and can be overwhelming until you've explored it, a little at a time. Read the early part of this guide first to get the basics before trying to absorb the full API.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; クラスは、主角試験ユーティリティの一つです。そのAPIは非常に大きく、一度に少しずつ調べてみるまでは圧倒される可能性があります。API全体を吸収する前に、まずこのガイドの最初の部分を読んで基本を理解してください。</target>
        </trans-unit>
        <trans-unit id="cc8e345965763ddfe3e7812d90185a3cc8df7c1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; is the most important of the Angular testing utilities. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; creates a dynamically-constructed Angular &lt;em&gt;test&lt;/em&gt; module that emulates an Angular &lt;a href=&quot;ngmodules&quot;&gt;@NgModule&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 角度のテストユーティリティの中で最も重要です。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 動的に構築角度作成&lt;em&gt;テスト&lt;/em&gt;角度エミュレートするモジュール&lt;a href=&quot;ngmodules&quot;&gt;@NgModuleを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d4324c4f646e7ef5fabe04fb65098a0bff82f02d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key lets you associate a fixed value with a DI token. Use this technique to provide &lt;em&gt;runtime configuration constants&lt;/em&gt; such as website base addresses and feature flags. You can also use a value provider in a unit test to provide mock data in place of a production data service.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; のキーを使用すると、DIトークンに固定値を関連付けることができます。この手法を使用して、Webサイトのベースアドレスや機能フラグなどの&lt;em&gt;ランタイム構成定数&lt;/em&gt;を提供し&lt;em&gt;ます&lt;/em&gt;。単体テストで値プロバイダーを使用して、本番データサービスの代わりにモックデータを提供することもできます。</target>
        </trans-unit>
        <trans-unit id="c4a4de4cdb30e4981a232b9d5743ace000b43da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service has three methods: &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;control()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;array()&lt;/a&gt;&lt;/code&gt;. These are factory methods for generating instances in your component classes including form controls, form groups, and form arrays.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; のサービスは三つの方法があります &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;control()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;array()&lt;/a&gt;&lt;/code&gt; 。これらは、フォームコントロール、フォームグループ、フォーム配列などのコンポーネントクラスにインスタンスを生成するためのファクトリメソッドです。</target>
        </trans-unit>
        <trans-unit id="a1aec13426a1cba49098c3f423a02468ea7f19b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is an injectable provider that is provided with the reactive forms module. Inject this dependency by adding it to the component constructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; のサービスは、反応性フォームモジュールを備えている注射用プロバイダです。コンポーネントコンストラクターに追加することにより、この依存関係を注入します。</target>
        </trans-unit>
        <trans-unit id="66dd4a989eed4a636dae82c8167c5fb3f64ae0ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is provided by the &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;, which is already defined in the &lt;code&gt;AppModule&lt;/code&gt; you modified previously (in &lt;code&gt;app.module.ts&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; のサービスはによって提供され &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 既に定義されている、 &lt;code&gt;AppModule&lt;/code&gt; あなたは（で以前に変更 &lt;code&gt;app.module.ts&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b0d904487da6019bae00f65e8b4f4d62577ec312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class is the basic building block when using reactive forms. To register a single form control, import the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class into your component and create a new instance of the form control to save as a class property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; の反応性フォームを使用するときに、クラスは、基本的なビルディングブロックです。単一のフォームコントロールを登録するには、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; クラスをコンポーネントにインポートし、フォームコントロールの新しいインスタンスを作成してクラスプロパティとして保存します。</target>
        </trans-unit>
        <trans-unit id="925fc2f850492caec6ce67dbf8116c7a303b111c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance emits the latest value through the &lt;code&gt;valueChanges&lt;/code&gt; observable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のインスタンスはを通じて最新の値を発する &lt;code&gt;valueChanges&lt;/code&gt; 観察できます。</target>
        </trans-unit>
        <trans-unit id="e08dfd1b765eeae5dddab9afb63ae6fbe7aaae9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance emits the new value through the &lt;code&gt;valueChanges&lt;/code&gt; observable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のインスタンスはを通じて新しい価値を発する &lt;code&gt;valueChanges&lt;/code&gt; 観察できます。</target>
        </trans-unit>
        <trans-unit id="4abd98b620b228f713556cb990a2f0f873bcf994" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive can change that behavior and set the value to something else. In the following example, the template reference variable, &lt;code&gt;itemForm&lt;/code&gt;, appears three times separated by HTML.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; のディレクティブは、その動作を変更し、他の何かに値を設定することができます。次の例では、テンプレート参照変数 &lt;code&gt;itemForm&lt;/code&gt; が、HTMLで区切られて3回表示されています。</target>
        </trans-unit>
        <trans-unit id="5879087109abd4866dfeed31d274c238360f5733" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive supplements the &lt;code&gt;form&lt;/code&gt; element with additional features. It holds the controls you created for the elements with an &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive and &lt;code&gt;name&lt;/code&gt; attribute, and monitors their properties, including their validity. It also has its own &lt;code&gt;valid&lt;/code&gt; property which is true only &lt;em&gt;if every contained control&lt;/em&gt; is valid.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブサプリメント &lt;code&gt;form&lt;/code&gt; の追加機能を持つ要素。 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブと &lt;code&gt;name&lt;/code&gt; 属性を使用して要素用に作成したコントロールを保持し、その有効性などのプロパティを監視します。また&lt;em&gt;、含まれるすべてのコントロール&lt;/em&gt;が有効な&lt;em&gt;場合に&lt;/em&gt;のみtrueになる独自の &lt;code&gt;valid&lt;/code&gt; プロパティもあります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bae2aaf5e364b7e1956a92af5673f84f9adeda8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; lifecycle hook is an important wrinkle. The timer component isn't available until &lt;em&gt;after&lt;/em&gt; Angular displays the parent view. So it displays &lt;code&gt;0&lt;/code&gt; seconds initially.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; ライフサイクルフックは重要なしわです。タイマーコンポーネントは&lt;em&gt;、&lt;/em&gt; Angularが親ビューを表示するまで使用できません。したがって、最初は &lt;code&gt;0&lt;/code&gt; 秒と表示されます。</target>
        </trans-unit>
        <trans-unit id="760596de2100ea9dc08bdebeed02a3519c7d1c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive allows you to display a data property and update that property when the user makes changes. Here's an example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; のディレクティブを使用すると、データプロパティを表示し、ユーザーが変更を行った場合、そのプロパティを更新することができます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="cf3af9a9fa73985dedfddeaec340442f862dd265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; data property sets the element's value property and the &lt;code&gt;ngModelChange&lt;/code&gt; event property listens for changes to the element's value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; のデータプロパティは、要素のvalueプロパティと設定 &lt;code&gt;ngModelChange&lt;/code&gt; 要素の値を変更するイベントプロパティリッスンを。</target>
        </trans-unit>
        <trans-unit id="fde09ec8f3662293d249077b17992ef49fc2032c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, which implements two-way data binding, is an example of an attribute directive. &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; modifies the behavior of an existing element (typically &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;) by setting its display value property and responding to change events.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; の双方向データバインディング実装ディレクティブは、属性指示の一例です。 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; は、表示値プロパティを設定し、変更イベントに応答することにより、既存の要素（通常は &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ）の動作を変更します。</target>
        </trans-unit>
        <trans-unit id="5d9b5b4fe9ab2fb60c6159e2c66f9b1c15feefcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;()&lt;/code&gt; method creates an injector configured by a &lt;code&gt;PlatformModule&lt;/code&gt;, which contains platform-specific dependencies. This allows multiple apps to share a platform configuration. For example, a browser has only one URL bar, no matter how many apps you have running. You can configure additional platform-specific providers at the platform level by supplying &lt;code&gt;extraProviders&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;()&lt;/code&gt; メソッドは、により構成されるインジェクター作成 &lt;code&gt;PlatformModule&lt;/code&gt; プラットフォーム固有の依存関係が含まれています、。これにより、複数のアプリでプラットフォーム構成を共有できます。たとえば、実行しているアプリの数に関係なく、ブラウザのURLバーは1つだけです。 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;()&lt;/code&gt; （）関数を使用して &lt;code&gt;extraProviders&lt;/code&gt; を提供することにより、プラットフォームレベルで追加のプラットフォーム固有のプロバイダーを構成できます。</target>
        </trans-unit>
        <trans-unit id="f37d8e3d33ca8ebc56e260052933af141475551f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by#css&quot;&gt;By.css()&lt;/a&gt;&lt;/code&gt; static method selects &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; nodes with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors&quot;&gt;standard CSS selector&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/by#css&quot;&gt;By.css()&lt;/a&gt;&lt;/code&gt; 静的メソッドを選択 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; を持つノード&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors&quot;&gt;標準CSSセレクター&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f31ffdeeac5f4aa667f7c349fd0fa92694671220" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function takes as inputs a &lt;em&gt;template&lt;/em&gt; HTML page (usually &lt;code&gt;index.html&lt;/code&gt;), an Angular &lt;em&gt;module&lt;/em&gt; containing components, and a &lt;em&gt;route&lt;/em&gt; that determines which components to display. The route comes from the client's request to the server.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 関数は、入力Aとして受け取り&lt;em&gt;、テンプレート&lt;/em&gt; HTMLページ（通常 &lt;code&gt;index.html&lt;/code&gt; ）、角度&lt;em&gt;モジュール&lt;/em&gt;成分を含有し、&lt;em&gt;経路&lt;/em&gt;表示にコンポーネントを決定します。ルートは、クライアントの要求からサーバーに到達します。</target>
        </trans-unit>
        <trans-unit id="17d0dc10d2712c04c9ddf4132743725ecd2ca468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and its observables are insulated from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; itself. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; destroys a routed component when it is no longer needed and the injected &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; dies with it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; その観測は絶縁されている &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 自体。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; それはもはや必要ありませんし、注入されたときにルーティングされた部品を破壊 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; のそれとダイを。</target>
        </trans-unit>
        <trans-unit id="ee5d82b8904589c98b1aff4a8285582c106117cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; is specific to each routed component loaded by the Angular Router. It contains information about the route, its parameters, and additional data associated with the route.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; は角度ルータによってロードされた各ルーティングされたコンポーネントに固有のものです。これには、ルート、そのパラメータ、およびルートに関連する追加データに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="62d4b299a442f9b6c2574a227699c880a07b173f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; property is an &lt;code&gt;Observable&lt;/code&gt; map of route parameters. The &lt;code&gt;paramMap&lt;/code&gt; emits a new map of values that includes &lt;code&gt;id&lt;/code&gt; when the user navigates to the component. In &lt;code&gt;ngOnInit&lt;/code&gt; you subscribe to those values, set the &lt;code&gt;selectedId&lt;/code&gt;, and get the heroes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; のプロパティがある &lt;code&gt;Observable&lt;/code&gt; ルートパラメーターのマップ。 &lt;code&gt;paramMap&lt;/code&gt; を含む値の新しいマップ発する &lt;code&gt;id&lt;/code&gt; ユーザがコンポーネントに移動したときに。で &lt;code&gt;ngOnInit&lt;/code&gt; あなたは、これらの値をサブスクライブし &lt;code&gt;selectedId&lt;/code&gt; を、そして英雄を取得します。</target>
        </trans-unit>
        <trans-unit id="27d7deeeac83ea9a20c6f580c5c055c452a6dc3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; contains the &lt;em&gt;future&lt;/em&gt; route that will be activated and the &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; contains the &lt;em&gt;future&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; of the application, should you pass through the guard check.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; が含まれている&lt;em&gt;将来の&lt;/em&gt;アクティブ化され、ルート &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; が含まれている&lt;em&gt;将来の&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; アプリケーションのを、あなたはガードのチェックを通過する必要があります。</target>
        </trans-unit>
        <trans-unit id="8280edbadaeff4ac7aa0d1cdde3cf47b0531bddc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard (checking route access).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; のガード（ルートアクセスをチェックします）。</target>
        </trans-unit>
        <trans-unit id="a99606469d1a4cc7742bcfbd4bf5ec1a040063c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard is the tool to manage these navigation business rules.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; のガードは、これらのナビゲーションビジネスルールを管理するためのツールです。</target>
        </trans-unit>
        <trans-unit id="afb0b82efd7f4359cd956f034c1e2538d351b8a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard (checking child route access).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; のガード（子ルートアクセスをチェックします）。</target>
        </trans-unit>
        <trans-unit id="34dffab7359c14331079d08669b2d615efde3d13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard (ask permission to discard unsaved changes).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; のガード（未保存の変更を破棄するために許可を求めます）。</target>
        </trans-unit>
        <trans-unit id="14db661cec9c3568b5135b43665bfcbfcd4b9253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard (check before loading feature module assets).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; のガード（ロード機能モジュール資産の前に確認してください）。</target>
        </trans-unit>
        <trans-unit id="8c0d90c801c00fb60055fc74e159942da215c885" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; API is inspired by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams interface&lt;/a&gt;. It provides methods to handle parameter access for both route parameters (&lt;code&gt;paramMap&lt;/code&gt;) and query parameters (&lt;code&gt;queryParamMap&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; の APIが触発され&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParamsインターフェイス&lt;/a&gt;。ルートパラメータ（ &lt;code&gt;paramMap&lt;/code&gt; ）とクエリパラメータ（ &lt;code&gt;queryParamMap&lt;/code&gt; ）の両方のパラメータアクセスを処理するメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="87e23084f4ca0468a6304206815831e8e9c49089" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy does not load feature areas protected by a &lt;a href=&quot;router#can-load-guard&quot;&gt;CanLoad&lt;/a&gt; guard. This is by design.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; の戦略は、によって保護された特徴領域ロードされません&lt;a href=&quot;router#can-load-guard&quot;&gt;CanLoadの&lt;/a&gt;ガードを。これは仕様によるものです。</target>
        </trans-unit>
        <trans-unit id="c61a6fdcf13e9c86ff5a44bd92f179ae4c17aa7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; guard (pre-fetching route data).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; ガード（プリフェッチ経路データ）。</target>
        </trans-unit>
        <trans-unit id="f2eb75bb4ecb58de1eaa6fa343d6391a23d96005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; also supports &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; and the &lt;a href=&quot;router#fragment&quot;&gt;fragment&lt;/a&gt; when using redirects.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; また、サポートして&lt;a href=&quot;router#query-parameters&quot;&gt;クエリパラメータ&lt;/a&gt;および&lt;a href=&quot;router#fragment&quot;&gt;フラグメント&lt;/a&gt;リダイレクトを使用します。</target>
        </trans-unit>
        <trans-unit id="47609ad3349203dba5c6265eb5fab99ea5f3e365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; matches that URL to a route to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. It creates an &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; object with the routing information and injects it into a new instance of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; へのルートにそのURLにマッチし &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。ルーティング情報を含む &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; オブジェクトを作成し、それを &lt;code&gt;HeroDetailComponent&lt;/code&gt; の新しいインスタンスに注入します。</target>
        </trans-unit>
        <trans-unit id="21fe55f6896e40418d589006b8cbc60c2be0bf3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; module is an &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt; that provides the necessary service providers and directives for navigating through application views. A &lt;a href=&quot;glossary#routing-component&quot;&gt;routing component&lt;/a&gt; is one that imports the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; module and whose template contains a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; element where it can display views produced by the router.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; モジュールは&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;アプリケーションビューをナビゲートするために必要なサービスプロバイダとディレクティブを提供します。&lt;a href=&quot;glossary#routing-component&quot;&gt;ルーティングコンポーネントは、&lt;/a&gt; 1輸入すなわち &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; モジュールとテンプレート含ま &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; のそれがルータによって生成されるビューを表示することができる要素。</target>
        </trans-unit>
        <trans-unit id="1647cd0123077158e4b17948253f8bbd17f93811" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; offers two preloading strategies out of the box:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 箱から出して2つのプリロードの戦略を提供しています：</target>
        </trans-unit>
        <trans-unit id="59c3b172b152b721b1e9a71592d0d755b58d2153" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; supports &lt;em&gt;empty path&lt;/em&gt; routes; use them to group routes together without adding any additional path segments to the URL. Users will still visit &lt;code&gt;/admin&lt;/code&gt; and the &lt;code&gt;AdminComponent&lt;/code&gt; still serves as the &lt;em&gt;Routing Component&lt;/em&gt; containing child routes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; は&lt;em&gt;空&lt;/em&gt;のパスルートをサポートし&lt;em&gt;ています&lt;/em&gt;。それらを使用して、URLに追加のパスセグメントを追加せずにルートをグループ化します。ユーザーは引き続き &lt;code&gt;/admin&lt;/code&gt; にアクセスし、 &lt;code&gt;AdminComponent&lt;/code&gt; は引き続き子ルートを含む&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;として機能します。</target>
        </trans-unit>
        <trans-unit id="0959a563cb3265074d00520e70abc0842cae2d5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives on the anchor tags give the router control over those elements. The navigation paths are fixed, so you can assign a string to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; (a &quot;one-time&quot; binding).</source>
          <target state="translated">アンカータグの &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブは、ルーターがこれらの要素を制御できるようにします。ナビゲーションパスは固定されているため、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; に文字列を割り当てることができます（「ワンタイム」バインディング）。</target>
        </trans-unit>
        <trans-unit id="f8657a5f3d772af4293fc4eba88a13d37bf61236" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive toggles css classes for active &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; bindings based on the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; アクティブのためのディレクティブトグルCSSクラス &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 電流に基づいてバインディング &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c7995bb70f0ae0cf3627366c5543ac5c032ac8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; function sets the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, making it the default strategy. You can switch to the &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; with an override during the bootstrapping process if you prefer it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 関数は、セット &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; をする &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; それをデフォルトの戦略作り、。必要に &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; て、ブートストラッププロセス中にオーバーライドしてHashLocationStrategyに切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="9bf9938fff728d1cd8889ad751fddb80b83e9050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; configuration method takes an &lt;code&gt;InMemoryDataService&lt;/code&gt; class that primes the in-memory database.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; の設定方法は、かかる &lt;code&gt;InMemoryDataService&lt;/code&gt; のインメモリデータベースをプライミングクラス。</target>
        </trans-unit>
        <trans-unit id="2684614a1ecc2d98495d86f9bbe58a84c69aafc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method takes care of the &lt;em&gt;global&lt;/em&gt; injector configuration for the Router. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; method has no injector configuration. It uses directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;. For more information, see the &lt;a href=&quot;singleton-services#forRoot&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; pattern&lt;/a&gt; section of the &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドは、の世話をする&lt;em&gt;グローバル&lt;/em&gt;ルータ用インジェクタ構成。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; メソッドは、インジェクタの構成を有していません。 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; などのディレクティブを使用します。詳細については、&lt;a href=&quot;singleton-services&quot;&gt;シングルトンサービス&lt;/a&gt;ガイドの&lt;a href=&quot;singleton-services#forRoot&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; パターンの&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ac02a174bb651f87b3bb3995379d09ef25a0ff1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; pattern</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; パターン</target>
        </trans-unit>
        <trans-unit id="678d09ad88def2247372c3a4a6393c3c2434c878" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; static method is a convention that makes it easy for developers to configure services and providers that are intended to be singletons. A good example of &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 静的メソッドは、シングルトンであることを意図しているのconfigureサービスやプロバイダに開発者のために簡単にそれを作る慣習です。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; の良い例は、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドです。</target>
        </trans-unit>
        <trans-unit id="3828bf90aca6ba2f62f1c10e3b2552f116a1db1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is a directive from the router library that is used like a component. It acts as a placeholder that marks the spot in the template where the router should display the components for that outlet.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; は、コンポーネントのように使用されているルータのライブラリからの指令です。これは、ルーターがそのコンセントのコンポーネントを表示するテンプレート内の場所をマークするプレースホルダーとして機能します。</target>
        </trans-unit>
        <trans-unit id="d74a774153ea254ddecf646ba8eaac93785e276f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is one of the router directives that became available to the &lt;code&gt;AppComponent&lt;/code&gt; because &lt;code&gt;AppModule&lt;/code&gt; imports &lt;code&gt;AppRoutingModule&lt;/code&gt; which exported &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; はに利用できるようになったルータディレクティブの一つである &lt;code&gt;AppComponent&lt;/code&gt; ので &lt;code&gt;AppModule&lt;/code&gt; をインポート &lt;code&gt;AppRoutingModule&lt;/code&gt; エクスポート &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="98421694d6873683d8adc6a2570f7e017b62f4ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service gives you access to events that indicate when the service worker has discovered an available update for your app or when it has activated such an update&amp;mdash;meaning it is now serving content from that update to your app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; のサービスは、あなたのサービスワーカーアプリやそれが起動したときにそのようなことは今あなたのアプリケーションにその更新からコンテンツを提供している更新を意味するために利用可能な更新を発見したことを示すイベントへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="f8f699f83b8111047f49e6cbc19f04ff13424e11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service supports four separate operations:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; のサービスは、4つの別々の操作をサポートします。</target>
        </trans-unit>
        <trans-unit id="bc582fd99dd06940465b5d3c501d9db0b81efaf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; will invoke the AngularJS &lt;code&gt;$rootScope.$apply()&lt;/code&gt; after every turn of the Angular zone. This also triggers AngularJS change detection after every event.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; は AngularJS起動します &lt;code&gt;$rootScope.$apply()&lt;/code&gt; 角度ゾーンの毎ターン後。これにより、すべてのイベント後にAngularJS変更検出もトリガーされます。</target>
        </trans-unit>
        <trans-unit id="e84a1329251cd9c2fbb8229ea5249e31361e93bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe subscribes to an &lt;code&gt;Observable&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; and returns the latest value it has emitted. When a new value is emitted, the &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe marks the component to be checked for changes. When the component gets destroyed, the &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe unsubscribes automatically to avoid potential memory leaks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプに加入 &lt;code&gt;Observable&lt;/code&gt; または &lt;code&gt;Promise&lt;/code&gt; それが放射している最新値戻ります。新しい値が &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; されると、非同期パイプは変更をチェックするコンポーネントをマークします。コンポーネントが破棄されると、潜在的なメモリリークを回避するために、 &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプが自動的にサブスクライブ解除されます。</target>
        </trans-unit>
        <trans-unit id="c3132cfc546b1bdf952329e52271f45aff98383a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; package contains helpers that allow AngularJS and Angular components to be used together inside a hybrid upgrade application, which supports AoT compilation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; パッケージにはAngularJSと角度成分が、AOTコンパイルをサポートするハイブリッドアップグレードアプリケーション、内部で一緒に使用できるようにするヘルパーが含まれています。</target>
        </trans-unit>
        <trans-unit id="752b1abdffae69bdf4168440e2e9cb777c33b581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; control to replace the existing control</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; の既存のコントロールを交換するコントロール</target>
        </trans-unit>
        <trans-unit id="60977a7c3bb769794d3c2f89211320ea518117b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; exports are re-exported by &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is included automatically in the root &lt;code&gt;AppModule&lt;/code&gt; when you create a new app with the CLI &lt;code&gt;new&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; の輸出はで再輸出されている &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ルートに自動的に含まれ、 &lt;code&gt;AppModule&lt;/code&gt; あなたはCLIで新しいアプリを作成するときに &lt;code&gt;new&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="f016d8816fcfa69165aee6fbb999c091f83bf43a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a number value and listening to number input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; を書き込み、数値入力の変更をリッスンするためのControlValueAccessor。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="48f6ec592cff0cf9d0aff197b282590da64cb58e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a range value and listening to range input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">範囲値を書き込み、範囲入力の変更をリッスンするための &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="27bb0eddd953d2a41d5154c0bba7e4f6f544cc06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing multi-select control values and listening to multi-select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">複数選択コントロールの値を書き込み、複数選択コントロールの変更をリッスンするための &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="8a6f7acc93e4d52ce15e418ed2762c1637e0216e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing radio control values and listening to radio control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">ラジオコントロール値を書き込み、ラジオコントロールの変更をリッスンするための &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="f1148900a1718d2df24d36a4cbd007c9c92b9a79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing select control values and listening to select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">選択コントロールの値を書き込み、選択コントロールの変更をリッスンするための &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="16103ac1afe681300c7a23cc043ef06beb4a7047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 関数は、内蔵DOM APIに対する角度のコンポーネントインターフェイスと変化検出機能からのブリッジを提供します。</target>
        </trans-unit>
        <trans-unit id="ee8ac75a2b9c5aee4a1cebe857ca226adf40cf76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; は、このディレクティブにバインドされました。</target>
        </trans-unit>
        <trans-unit id="7270e358ccf5aaada34c49677df7b3e14375ded5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンス。</target>
        </trans-unit>
        <trans-unit id="cc714487b764ae3e9d84f7190d1dfb0cc3b0870c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; provides syntactic sugar that shortens creating instances of a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It reduces the amount of boilerplate needed to build complex forms.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; は短くはインスタンスの作成という糖衣構文を提供 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; を。複雑なフォームを作成するために必要なボイラープレートの量を減らします。</target>
        </trans-unit>
        <trans-unit id="850b4ce7a3a59e14b92b60a445f357fdbf2fe0f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; は、このディレクティブにバインドされました。</target>
        </trans-unit>
        <trans-unit id="8d22d6266b6398a65b4e3e7fe6142ffe7a2c64b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance tracks the value, user interaction, and validation status of the control and keeps the view synced with the model. If used within a parent form, the directive also registers itself with the form as a child control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のインスタンスは、コントロールの値が、ユーザとの対話、および検証ステータスを追跡し、モデルと同期ビューを維持します。親フォーム内で使用する場合、ディレクティブはそれ自体をフォームに子コントロールとして登録します。</target>
        </trans-unit>
        <trans-unit id="93fad32c1a184c4d364a5daa7659977bd1a3cfff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンス。</target>
        </trans-unit>
        <trans-unit id="801ce0c4ea960713beae25efb9571c6b96674579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; associated with a particular &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 特定の関連付けられ &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="612e978f37e7706fc06192d6e7c9d3657175c9c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; は、このディレクティブにバインドされました。</target>
        </trans-unit>
        <trans-unit id="ef29ac55227f5beca2e703c6f3ce56a2c65b38c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance created for this form.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; のこのフォーム用に作成されたインスタンス。</target>
        </trans-unit>
        <trans-unit id="ad8e8d6f83cfec04008d3c28ea120b7fb0022efd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンス。</target>
        </trans-unit>
        <trans-unit id="9f8bac942c174f8f843f6218a20ac2bc1584df80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a number value and listening to number input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; を書き込み、数値入力の変更をリッスンするためのControlValueAccessor。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="aace7891efa5898083cb4a8b6c06104aec931f83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a range value and listening to range input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">範囲値を書き込み、範囲入力の変更をリッスンするための &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="6bbe745964444088faf3ae89051254babe77ae2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing multi-select control values and listening to multi-select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">複数選択コントロールの値を書き込み、複数選択コントロールの変更をリッスンするための &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="4d1e7c68b482004d56ddf05c6d90fff65212326f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing radio control values and listening to radio control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">ラジオコントロール値を書き込み、ラジオコントロールの変更をリッスンするための &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="b783ac6bf4e725f603e628f0ee838444f2369886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing select control values and listening to select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">選択コントロールの値を書き込み、選択コントロールの変更をリッスンするための &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。値アクセサーは、 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブによって使用されます。</target>
        </trans-unit>
        <trans-unit id="3855ab70e68f971860bf678533a96d1491488cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; value determines how a successful response body is parsed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; の値は正常な応答本体が解析される方法を決定します。</target>
        </trans-unit>
        <trans-unit id="c81bb386aab2ceb16fe7911f0dc2f4d144946406" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンス。</target>
        </trans-unit>
        <trans-unit id="d63e7454a683dccf5ba2f06aaad94bd636915124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; directive is generally used in the &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;shorthand form&lt;/a&gt;&lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. In this form, the template to be rendered for each iteration is the content of an anchor element containing the directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; のディレクティブは、一般的に使用されている&lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;速記フォーム&lt;/a&gt; &lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 。この形式では、反復ごとにレンダリングされるテンプレートは、ディレクティブを含むアンカー要素のコンテンツです。</target>
        </trans-unit>
        <trans-unit id="ce10e6bc2f600bbe290d97323968acbf78a1a9dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンス。</target>
        </trans-unit>
        <trans-unit id="08aeb1d8b8421374a5c2ea9c2371614dc9182b9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンス。</target>
        </trans-unit>
        <trans-unit id="496ed3f692f3ec8115c36370a54ff9294c2d8673" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; is included by default in any app created through the CLI, and it re-exports the &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; exports, making basic Angular functionality available to the app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; は、 CLIで作成されたアプリにデフォルトで含まれ、それが再輸出され &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; の輸出を、アプリへの基本的な角度の機能を利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="6a6ae8a3c165d3ac08575bb713450a7d5f9b67e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; class is used directly by all implementations of &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; when they need to interact with the DOM apis like pushState, popState, etc...</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; のクラスは、すべての実装が直接使用される&lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt;彼らはなどpushState、popState、のようなDOM APIと対話する必要がある場合...</target>
        </trans-unit>
        <trans-unit id="0661053b470abb698b0e1169e845f6b47e88d3d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function collects multiple elements and works internally by using &lt;code&gt;element.querySelectorAll&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;animationqueryoptions#limit&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; field of an options object to limit the total number of items to be collected. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 関数は、複数の要素を収集して使用することにより、内部で動作します &lt;code&gt;element.querySelectorAll&lt;/code&gt; を。収集するアイテムの総数を制限するには、オプションオブジェクトの &lt;code&gt;&lt;a href=&quot;animationqueryoptions#limit&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; フィールドを使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="3b913a55abde72ca81d7024ca445739808aa7665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; animation method also supports reading an inline function which can decide if its associated animation should be run.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; アニメーション方法は、また、それに関連するアニメーションを実行するかどうかを決定することができますインライン関数を読んでサポートしています。</target>
        </trans-unit>
        <trans-unit id="4712f621c4a5e2ef20b6c645ee3fa558074a5fe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; allows: 1. creation of Angular component from AngularJS component directive (See [UpgradeAdapter#upgradeNg1Component()]) 2. creation of AngularJS directive from Angular component. (See [UpgradeAdapter#downgradeNg2Component()]) 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks coexisting in a single application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; では、次のことが可能です。1. AngularJSコンポーネントディレクティブからのAngularコンポーネントの作成（[UpgradeAdapter＃upgradeNg1Component（）]を参照）2. AngularコンポーネントからのAngularJSディレクティブの作成。（[UpgradeAdapter＃downgradeNg2Component（）]を参照）3.単一のアプリケーションに共存する両方のフレームワークを含むハイブリッドAngularアプリケーションのブートストラップ。</target>
        </trans-unit>
        <trans-unit id="a1eb2dcb7af0dcf4a695c59ebfeddacb6c402e95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; クラス</target>
        </trans-unit>
        <trans-unit id="66b690e47d0f38b1cd5809389bb990c762cb3b2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator identifies the class immediately below it as a component, and provides the template and related component-specific metadata.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータは成分としてすぐ下のクラスを識別し、テンプレートおよび関連するコンポーネント固有のメタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="57179aa07943c084fd24a0cf2ed81afe8bc53b96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator identifies the class immediately below it as a component class, and specifies its metadata. In the example code below, you can see that &lt;code&gt;HeroListComponent&lt;/code&gt; is just a class, with no special Angular notation or syntax at all. It's not a component until you mark it as one with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータはコンポーネントクラスとしてすぐ下クラスを識別し、そのメタデータを指定します。次のコード例では、 &lt;code&gt;HeroListComponent&lt;/code&gt; が単なるクラスであり、特別なAngular表記や構文がまったくないことがわかります。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータで1としてマークするまで、コンポーネントではありません。</target>
        </trans-unit>
        <trans-unit id="27ed6a775ed7809f9909d1cfea44203256e88024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; selector value of &quot;app-hero-form&quot; means you can drop this form in a parent template with a &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">「app-hero-form」の &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; セレクター値は、このフォームを &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; タグを使用して親テンプレートにドロップできることを意味します。</target>
        </trans-unit>
        <trans-unit id="abb5105661ab098fdef91d360f2cbe023d27af04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator's lone configuration property specifies the directive's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;CSS attribute selector&lt;/a&gt;, &lt;code&gt;[appHighlight]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレータの唯一の構成プロパティには、ディレクティブの指定する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;CSSの属性セレクタ&lt;/a&gt;、 &lt;code&gt;[appHighlight]&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f79cdd82b4c60315fdd4cc2098a2174561bcca45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; function decorating the &lt;code&gt;heroCache&lt;/code&gt; constructor property ensures that you get a reference to the cache service from the parent &lt;code&gt;HeroBioComponent&lt;/code&gt;. Angular throws an error if the parent lacks that service, even if a component higher in the component tree includes it.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 装飾機能 &lt;code&gt;heroCache&lt;/code&gt; あなたは親からのキャッシュサービスへの参照を取得することをコンストラクタのプロパティ性を保証し &lt;code&gt;HeroBioComponent&lt;/code&gt; 。コンポーネントツリーの上位のコンポーネントにサービスが含まれている場合でも、Angularは親にそのサービスが不足しているとエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="5fd526663380f3592df2037fdc9b44234695f288" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; property decorator stops the upward search at the &lt;em&gt;host component&lt;/em&gt;. The host component is typically the component requesting the dependency. However, when this component is projected into a &lt;em&gt;parent&lt;/em&gt; component, that parent component becomes the host. The following example covers this second case.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; プロパティデコレータは、上向きの検索を停止する&lt;em&gt;ホストコンポーネントを&lt;/em&gt;。ホストコンポーネントは通常、依存関係を要求するコンポーネントです。ただし、このコンポーネントが&lt;em&gt;親&lt;/em&gt;コンポーネントに投影されると、その親コン​​ポーネントがホストになります。次の例は、この2番目のケースをカバーしています。</target>
        </trans-unit>
        <trans-unit id="60ba97a300b77d23af86d8fe748cc10fc64eeb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator lets you subscribe to events of the DOM element that hosts an attribute directive, the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; in this case.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; デコレータを使用すると、ホスト属性ディレクティブ、そのDOM要素のイベントにサブスクライブすることができます &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; この場合インチ</target>
        </trans-unit>
        <trans-unit id="82b280761ccb94a90a3866c3b2590b2d7168cfa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator accepts a metadata object for the service, the same way the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator did for your component classes.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータは、サービス、同様のメタデータオブジェクトを受け入れ &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータは、コンポーネントのクラスのためにしました。</target>
        </trans-unit>
        <trans-unit id="33b3224e88a7414e23c7b4a233a665f3a8818e30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator has the &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; metadata option, where you can specify the provider of the decorated service class with the &lt;code&gt;root&lt;/code&gt; injector, or with the injector for a specific NgModule.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータはあり &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; のあなたが飾らサービスクラスのプロバイダを指定することができるメタデータオプション、 &lt;code&gt;root&lt;/code&gt; インジェクタ、または特定のNgModule用インジェクタとを。</target>
        </trans-unit>
        <trans-unit id="e00b5d1cd3cbe5d3000e056fc39a0951f372ba27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator identifies a service class. The &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property configures a specific &lt;code&gt;ModuleInjector&lt;/code&gt;, here &lt;code&gt;root&lt;/code&gt;, which makes the service available in the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータは、サービスクラスを識別します。 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; のプロパティは、特定の設定し &lt;code&gt;ModuleInjector&lt;/code&gt; 、ここでは &lt;code&gt;root&lt;/code&gt; でサービスを利用できるようになり、 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="8e68e554c1029e63664d57c18622c712d0a2c5fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; is an essential ingredient in every Angular service definition. The rest of the class has been written to expose a &lt;code&gt;getHeroes&lt;/code&gt; method that returns the same mock data as before. (A real app would probably get its data asynchronously from a remote server, but we'll ignore that to focus on the mechanics of injecting the service.)</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 、すべての角度サービス定義に不可欠な成分です。クラスの残りの部分は、以前と同じモックデータを返す &lt;code&gt;getHeroes&lt;/code&gt; メソッドを公​​開するように記述されています。（実際のアプリはおそらくリモートサーバーから非同期でデータを取得しますが、サービスを注入するメカニズムに焦点を合わせるためにそれを無視します。）</target>
        </trans-unit>
        <trans-unit id="885d9f9809780d5bc310e3e424d03c4b141f4967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata allows the service class to be used with the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; mechanism. The injectable class is instantiated by a &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;. &lt;a href=&quot;glossary#injector&quot;&gt;Injectors&lt;/a&gt; maintain lists of providers and use them to provide service instances when they are required by components or other services.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; サービスクラスが一緒に使用されることを可能にするメタデータ&lt;a href=&quot;glossary#di&quot;&gt;依存性注入&lt;/a&gt;機構。注入可能なクラスは、&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;によってインスタンス化されます。&lt;a href=&quot;glossary#injector&quot;&gt;インジェクター&lt;/a&gt;はプロバイダーのリストを維持し、コンポーネントまたはその他のサービスで必要な場合に、それらを使用してサービスインスタンスを提供します。</target>
        </trans-unit>
        <trans-unit id="38ce962cd0076ede1d204b85c3815cacd68aa9f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator will attach some dependency injection metadata to the class, letting Angular know about its dependencies. As described by the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection Guide&lt;/a&gt;, this is a marker decorator you need to use for classes that have no other Angular decorators but still need to have their dependencies injected.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; デコレータは、その依存関係の周りの角ノウハウをさせる、クラスにいくつかの依存性注入のメタデータを添付します。&lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection Guide&lt;/a&gt;で説明されているように、これは、他のAngularデコレーターがなくても依存関係を注入する必要があるクラスに使用する必要があるマーカーデコレーターです。</target>
        </trans-unit>
        <trans-unit id="f82d4b4dc5240c874db316d0eb21e8c9fa399274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorators have the &lt;code&gt;providers&lt;/code&gt; metadata option, where you can configure providers for NgModule-level or component-level injectors.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータを持っている &lt;code&gt;providers&lt;/code&gt; あなたはNgModuleレベルまたはコンポーネントレベルインジェクターのためのプロバイダを設定することができ、メタデータオプションを、。</target>
        </trans-unit>
        <trans-unit id="d2f532ec5724d6b05eba458d043ebf03fb0000ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator identifies &lt;code&gt;AppModule&lt;/code&gt; as an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; takes a metadata object that tells Angular how to compile and launch the application.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータ識別 &lt;code&gt;AppModule&lt;/code&gt; として &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; のクラス。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、アプリケーションをコンパイルして起動する方法をAngularに指示するメタデータオブジェクトを取ります。</target>
        </trans-unit>
        <trans-unit id="793708455a547f501ce441e6a27457efeb8d5cad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata initializes the router and starts it listening for browser location changes.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータは、ルータを初期化し、ブラウザの場所の変更のためのリスニングを開始します。</target>
        </trans-unit>
        <trans-unit id="551e7f123e55c8302870ff8d05f968f8ce0fe58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; property tells the compiler that this is an entry component &lt;em&gt;and&lt;/em&gt; it should generate code to bootstrap the application with this component.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 、これはエントリコンポーネントであるという性質は、コンパイラに指示&lt;em&gt;し、&lt;/em&gt;それがこのコンポーネントを使用してアプリケーションをブートストラップするためのコードを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="4b851db63609eef9aefac9a444ed5cbac0f0319b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; property decorator tells Angular to return null when it can't find the dependency.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; プロパティデコレータは、それが依存関係を見つけることができないときはnullを返すように角度を伝えます。</target>
        </trans-unit>
        <trans-unit id="a9d2b202019a40c34df385a62aa3700bbf14c211" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator allows you to define the pipe name that you'll use within template expressions. It must be a valid JavaScript identifier. Your pipe's name is &lt;code&gt;exponentialStrength&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; デコレータは、あなたがテンプレート式の中で使用しますことをパイプ名を定義することができます。有効なJavaScript識別子である必要があります。パイプの名前は &lt;code&gt;exponentialStrength&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6eb463094d9552ad72076a24ff98a2f18c5be9b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/bazel&lt;/code&gt; package provides a builder that allows Angular CLI to use Bazel as the build tool.</source>
          <target state="translated">&lt;code&gt;@angular/bazel&lt;/code&gt; パッケージには、角度CLIは、ビルド・ツールとしてBazelを使用することができますビルダーを提供します。</target>
        </trans-unit>
        <trans-unit id="2b12259d8e67605d37f369e41dddfc69f10b15d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/elements&lt;/code&gt; package exports a &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; API that provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.</source>
          <target state="translated">&lt;code&gt;@angular/elements&lt;/code&gt; パッケージがエクスポート &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 内蔵DOM APIに対する角度のコンポーネントインターフェイスと変化検出機能からのブリッジを提供するAPIを。</target>
        </trans-unit>
        <trans-unit id="4488a294179b4aa7eb55572640dfae952a5db44c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/platform-*&lt;/code&gt; packages enable Angular to be run in different contexts. For examples, &lt;code&gt;@angular/platform-server&lt;/code&gt; enables Angular to be run on the server, and &lt;code&gt;@angular/platform-browser&lt;/code&gt; enables Angular to be run in a web browser.</source>
          <target state="translated">&lt;code&gt;@angular/platform-*&lt;/code&gt; パッケージが異なるコンテキストで実行されるように角度を可能にします。たとえば、 &lt;code&gt;@angular/platform-server&lt;/code&gt; 使用すると、Angularをサーバーで実行でき、 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 使用すると、AngularをWebブラウザーで実行できます。</target>
        </trans-unit>
        <trans-unit id="884f6aebfdc7aeba7bf75a1835534b9815612496" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@routeAnimation&lt;/code&gt; property is bound to the &lt;code&gt;getAnimationData&lt;/code&gt; with the provided &lt;code&gt;routerOutlet&lt;/code&gt; reference, so you'll need to define that function in the &lt;code&gt;AppComponent&lt;/code&gt;. The &lt;code&gt;getAnimationData&lt;/code&gt; function returns the animation property from the &lt;code&gt;data&lt;/code&gt; provided through the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; property matches the &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; names you used in the &lt;code&gt;slideInAnimation&lt;/code&gt; defined in &lt;code&gt;animations.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@routeAnimation&lt;/code&gt; のプロパティは次のようにバインドされて &lt;code&gt;getAnimationData&lt;/code&gt; 提供して &lt;code&gt;routerOutlet&lt;/code&gt; あなたは、その関数を定義する必要がありますので、参照 &lt;code&gt;AppComponent&lt;/code&gt; を。 &lt;code&gt;getAnimationData&lt;/code&gt; の関数からアニメーションプロパティを返す &lt;code&gt;data&lt;/code&gt; を通して提供 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; プロパティが一致する &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; あなたがで使用される名前 &lt;code&gt;slideInAnimation&lt;/code&gt; で定義されて &lt;code&gt;animations.ts&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="65905cf210914a41fcac7f549f19b60569db7000" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AdComponent&lt;/code&gt; interface</source>
          <target state="translated">&lt;code&gt;AdComponent&lt;/code&gt; のインターフェース</target>
        </trans-unit>
        <trans-unit id="933674f343bff2cd0dd207810101a6b8c86a86b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Login&lt;/code&gt; buttons illustrate other router capabilities to be covered later in the guide. This short introduction will do for now.</source>
          <target state="translated">[ &lt;code&gt;Admin&lt;/code&gt; ボタンと[ &lt;code&gt;Login&lt;/code&gt; ボタンは、ガイドの後半で説明する他のルーター機能を示しています。この短い紹介は今のところ行います。</target>
        </trans-unit>
        <trans-unit id="5be07b6d0ce69825736f39e33271e0f4a837efd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AfterViewComponent&lt;/code&gt; displays this child view &lt;em&gt;within its template&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;AfterViewComponent&lt;/code&gt; はこの子ビューを表示し&lt;em&gt;、そのテンプレート内&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="5da2c3c2bd8ffcb1dc1282cef2a487959ea1abd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AnimalService&lt;/code&gt; in the logical tree would look like this:</source>
          <target state="translated">論理ツリーの &lt;code&gt;AnimalService&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="792f131f2d93317416f5bc123a877a96098076ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; establishes the initial &lt;code&gt;SizerComponent.size&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; は最初の確立 &lt;code&gt;SizerComponent.size&lt;/code&gt; の値を。</target>
        </trans-unit>
        <trans-unit id="1141745577d0d6fe3c0de70005105affb0508d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; in this example features a list of &lt;code&gt;items&lt;/code&gt; in an array and a method for adding more items to the array.</source>
          <target state="translated">この例の &lt;code&gt;AppComponent&lt;/code&gt; は、配列内の &lt;code&gt;items&lt;/code&gt; リストと、配列に項目を追加するためのメソッドを備えています。</target>
        </trans-unit>
        <trans-unit id="f5ce2d14bdf3c9317b532acaf7b8ff5f030b4ac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; is the test subject, so of course you declare the real version.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; はそう、もちろん、あなたが本当のバージョンを宣言し、試験対象です。</target>
        </trans-unit>
        <trans-unit id="da1ffde96872e3d62908574983f6c5d1159496b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; links to validate are as follows:</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; 次のように検証するためのリンクは、以下のとおりです。</target>
        </trans-unit>
        <trans-unit id="c05cfe4289978b66eaf6425a835a8bb31c03dd84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; template no longer needs &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; because the app will only display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the user navigates to it.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; のテンプレートもはやニーズ &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; アプリのみ表示されますので、 &lt;code&gt;HeroesComponent&lt;/code&gt; をする際、ユーザーナビゲートことに。</target>
        </trans-unit>
        <trans-unit id="6545b6507f23c86c81f7454e3bc1c87dc46d4fef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt;'s injector is a child of the root injector, one down in the injector hierarchy. For applications that don't use the router, that's almost the entire application. But in routed applications, routing operates at the root level where &lt;code&gt;AppComponent&lt;/code&gt; services don't exist. This means that lazy-loaded modules can't reach them.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; のインジェクタは、ルートインジェクタ、インジェクタ階層で1つのダウンの子です。ルーターを使用しないアプリケーションの場合、それはほぼアプリケーション全体です。ただし、ルーティングされたアプリケーションでは、ルーティングは &lt;code&gt;AppComponent&lt;/code&gt; サービスが存在しないルートレベルで動作します。これは、遅延ロードされたモジュールがそれらに到達できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="e99418b308f9a848c50d9554d2c8fdb6f5482a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt;, for example, displays a navigation bar with anchors and their &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; 、例えば、ディスプレイのアンカーとそれらとのナビゲーションバー &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; のディレクティブ。</target>
        </trans-unit>
        <trans-unit id="5280fec7072da76d90f8bcd931c21a6bc6cb2961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppModule&lt;/code&gt; acts as the fallback injector when the injection token can't be found in the &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; は注入トークンで見つけることができない場合、フォールバックインジェクタとして機能 &lt;code&gt;ElementInjector&lt;/code&gt; S。</target>
        </trans-unit>
        <trans-unit id="f95bd053e64f37ddc5bc7a5c80ce68e35d5bdd23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppModule&lt;/code&gt; generated from the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; demonstrates both kinds of modules in action:</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; から生成された&lt;a href=&quot;cli&quot;&gt;角度のCLIは、&lt;/a&gt;動作中のモジュールの両方の種類を示しています。</target>
        </trans-unit>
        <trans-unit id="5ff85c340c70e9c69d3c5eb66d2650053ea2c555" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AstronautComponent&lt;/code&gt; also injects the service in its constructor. Each &lt;code&gt;AstronautComponent&lt;/code&gt; is a child of the &lt;code&gt;MissionControlComponent&lt;/code&gt; and therefore receives its parent's service instance:</source>
          <target state="translated">&lt;code&gt;AstronautComponent&lt;/code&gt; はまた、そのコンストラクタでサービスを注入します。各 &lt;code&gt;AstronautComponent&lt;/code&gt; は &lt;code&gt;MissionControlComponent&lt;/code&gt; の子であるため、その親のサービスインスタンスを受け取ります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
