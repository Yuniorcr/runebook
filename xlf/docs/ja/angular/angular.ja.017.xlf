<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="d02e253b850f113d73bfb00512bed301e76af61e" translate="yes" xml:space="preserve">
          <source>The server (&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js Express&lt;/a&gt; in this guide's example) passes client requests for application pages to the NgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt;. Under the hood, this calls Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function, while providing caching and other helpful utilities.</source>
          <target state="translated">サーバー（このガイドの例では&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js Express&lt;/a&gt;）は、アプリケーションページに対するクライアントリクエストをNgUniversalngExpressEngineに &lt;code&gt;ngExpressEngine&lt;/code&gt; ます。 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; は、これはUniversalのrenderModule（）関数を呼び出し、キャッシュやその他の便利なユーティリティを提供します。</target>
        </trans-unit>
        <trans-unit id="833b0d09ecb324069b98f0951ab344fac2fef24f" translate="yes" xml:space="preserve">
          <source>The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error &lt;em&gt;responses&lt;/em&gt;.</source>
          <target state="translated">サーバーバックエンドがリクエストを拒否し、404や500などのステータスコードを含むHTTPレスポンスを返す場合があります。これらはエラー&lt;em&gt;レスポンス&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="b91c33e79c6d8ce1f35c11a0064ccf17c1206386" translate="yes" xml:space="preserve">
          <source>The server platform that supports the runtime compiler.</source>
          <target state="translated">ランタイムコンパイラをサポートするサーバープラットフォーム。</target>
        </trans-unit>
        <trans-unit id="fdc7974bddc4251d37c899dec154f7616873a7f7" translate="yes" xml:space="preserve">
          <source>The server should respond with a single hero rather than an array of heroes.</source>
          <target state="translated">サーバーはヒーローの配列ではなく、1人のヒーローで対応すべきです。</target>
        </trans-unit>
        <trans-unit id="eca5a8837e9ee160489059a172e9ebc977dd83cd" translate="yes" xml:space="preserve">
          <source>The server will automatically reload your browser when new files are output.</source>
          <target state="translated">新しいファイルが出力されると、サーバーは自動的にブラウザをリロードします。</target>
        </trans-unit>
        <trans-unit id="0d9613e884c4d7057875fd99d39be99f233ae206" translate="yes" xml:space="preserve">
          <source>The server's data API determines the shape of the JSON data. The &lt;em&gt;Tour of Heroes&lt;/em&gt; data API returns the hero data as an array.</source>
          <target state="translated">サーバーのデータAPIは、JSONデータの形状を決定します。&lt;em&gt;英雄のツアー&lt;/em&gt;データAPIを配列として英雄のデータを返します。</target>
        </trans-unit>
        <trans-unit id="d608ede8654d1838eb5137faa0d8ed16a87869ad" translate="yes" xml:space="preserve">
          <source>The server-rendered app still launches quickly but the full client app may take seconds to load.</source>
          <target state="translated">サーバーレンダリングされたアプリの起動はまだ早いですが、完全なクライアントアプリのロードには数秒かかることがあります。</target>
        </trans-unit>
        <trans-unit id="e791eab073e4d3b4cd8bc1aca0e02dd44233a6e7" translate="yes" xml:space="preserve">
          <source>The service can be instantiated by configuring a factory function, as in the following example.</source>
          <target state="translated">サービスは、以下の例のようにファクトリー機能を設定することでインスタンス化することができます。</target>
        </trans-unit>
        <trans-unit id="b01cb6b08662ccfbcebed41545cd05a24d2577c4" translate="yes" xml:space="preserve">
          <source>The service exposes its cache of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; and two methods: one to &lt;code&gt;add()&lt;/code&gt; a message to the cache and another to &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; the cache.</source>
          <target state="translated">サービスは &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; キャッシュと2つのメソッドを公​​開します。1つはメッセージをキャッシュに &lt;code&gt;add()&lt;/code&gt; 、もう1つはキャッシュを &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="e6443c7850c012b2c10c16adbba71b75368fdc4f" translate="yes" xml:space="preserve">
          <source>The service exposes its cache of &lt;code&gt;messages&lt;/code&gt; and two methods: one to &lt;code&gt;add()&lt;/code&gt; a message to the cache and another to &lt;code&gt;clear()&lt;/code&gt; the cache.</source>
          <target state="translated">このサービスは、 &lt;code&gt;messages&lt;/code&gt; キャッシュと2つのメソッドを公​​開します。1つはメッセージをキャッシュに &lt;code&gt;add()&lt;/code&gt; 、もう1つはキャッシュを &lt;code&gt;clear()&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="8fbb599e20de587b80201a2202b3533ea4c17924" translate="yes" xml:space="preserve">
          <source>The service itself is a class that the CLI generated and that's decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;. By default, this decorator has a &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property, which creates a provider for the service. In this case, &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; specifies that Angular should provide the service in the root injector.</source>
          <target state="translated">サービス自体は、CLIが生成したクラスであり、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装飾されています。デフォルトでは、このデコレーターには、サービスのプロバイダーを作成する &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; プロパティがあります。この場合、 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; は、Angularがルートインジェクターでサービスを提供する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="1eb2341b2a56fcef48a10982c82e78d778efcf41" translate="yes" xml:space="preserve">
          <source>The service itself is a class that the CLI generated and that's decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;. By default, this decorator has a &lt;code&gt;providedIn&lt;/code&gt; property, which creates a provider for the service. In this case, &lt;code&gt;providedIn: 'root'&lt;/code&gt; specifies that Angular should provide the service in the root injector.</source>
          <target state="translated">サービス自体は、CLIが生成したクラスであり、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装飾されています。デフォルトでは、このデコレータには、サービスのプロバイダーを作成する &lt;code&gt;providedIn&lt;/code&gt; プロパティがあります。この場合、 &lt;code&gt;providedIn: 'root'&lt;/code&gt; は、Angularがルートインジェクターでサービスを提供する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="a8d86534f286c4014047b48e39157c9ac642d3f4" translate="yes" xml:space="preserve">
          <source>The service provided by the root &lt;code&gt;AppModule&lt;/code&gt; takes precedence over services provided by imported NgModules. The &lt;code&gt;AppModule&lt;/code&gt; always wins.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; によって提供されるサービスは、インポートされたNgModuleによって提供されるサービスよりも優先されます。 &lt;code&gt;AppModule&lt;/code&gt; は常に勝ちます。</target>
        </trans-unit>
        <trans-unit id="e4c344300d7fd4d9f966ba1a8642b3e11076118a" translate="yes" xml:space="preserve">
          <source>The service uses the &lt;code&gt;import()&lt;/code&gt; method to load your bundled AngularJS application lazily. This decreases the initial bundle size of your application as you're not loading code your user doesn't need yet. You also need to provide a way to &lt;em&gt;bootstrap&lt;/em&gt; the application manually after it has been loaded. AngularJS provides a way to manually bootstrap an application using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap()&lt;/a&gt; method with a provided HTML element. Your AngularJS app should also expose a &lt;code&gt;bootstrap&lt;/code&gt; method that bootstraps the AngularJS app.</source>
          <target state="translated">このサービスは &lt;code&gt;import()&lt;/code&gt; メソッドを使用して、バンドルされているAngularJSアプリケーションを遅延読み込みします。これにより、ユーザーがまだ必要としないコードをロードしていないため、アプリケーションの初期バンドルサイズが小さくなります。また、ロード後にアプリケーションを手動で&lt;em&gt;ブートストラップ&lt;/em&gt;する方法を提供する必要もあります。AngularJSは、提供されたHTML要素で&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap（）&lt;/a&gt;メソッドを使用して、アプリケーションを手動でブートストラップする方法を提供します。AngularJSアプリは、AngularJSアプリをブートストラップする &lt;code&gt;bootstrap&lt;/code&gt; メソッドも公開する必要があります。</target>
        </trans-unit>
        <trans-unit id="dc4b5f46b09780ea494a593541c8cc9fef7174dd" translate="yes" xml:space="preserve">
          <source>The service worker conserves bandwidth when possible. Resources are only downloaded if they've changed.</source>
          <target state="translated">サービスワーカーは、可能な限り帯域幅を節約します。リソースは変更された場合のみダウンロードされます。</target>
        </trans-unit>
        <trans-unit id="73a76971f818809f629500d6b5210621468c33c3" translate="yes" xml:space="preserve">
          <source>The service worker installed the updated version of your app &lt;em&gt;in the background&lt;/em&gt;, and the next time the page is loaded or reloaded, the service worker switches to the latest version.</source>
          <target state="translated">Service Workerはアプリの更新されたバージョンを&lt;em&gt;バックグラウンド&lt;/em&gt;でインストールし、次にページが読み込まれるか再読み込みされるときに、Service Workerは最新バージョンに切り替えます。</target>
        </trans-unit>
        <trans-unit id="e5e8a28aed57347d4280ded734f47df1ae665528" translate="yes" xml:space="preserve">
          <source>The service worker is unable to find the asset in the cache (remember that the browser evicted it). Nor is it able to retrieve it from the server (since the server now only has &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-2&amp;gt;.js&lt;/code&gt; from the newer version).</source>
          <target state="translated">Service Workerは、キャッシュ内のアセットを見つけることができません（ブラウザーがアセットを削除したことを忘れないでください）。また、サーバーから取得することもできません（サーバーには、新しいバージョンの &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-2&amp;gt;.js&lt;/code&gt; しかないため）。</target>
        </trans-unit>
        <trans-unit id="cc0df69a7bfbd6545911d095948cf97558edba0d" translate="yes" xml:space="preserve">
          <source>The set of NgModules whose exported &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt; are available to templates in this module.</source>
          <target state="translated">エクスポートされた&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;宣言&lt;/a&gt;可能オブジェクトがこのモジュールのテンプレートで使用できるNgModuleのセット。</target>
        </trans-unit>
        <trans-unit id="abd06758e4687a7c44919fabc0c064aac2354cc2" translate="yes" xml:space="preserve">
          <source>The set of components that are bootstrapped when this module is bootstrapped. The components listed here are automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">このモジュールがブートストラップされるときにブートストラップされるコンポーネントのセット。ここにリストされているコンポーネントは、自動的に &lt;code&gt;entryComponents&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="32d438c2e575af5904ec9ce7fda3a5333ad0ee04" translate="yes" xml:space="preserve">
          <source>The set of components to compile when this NgModule is defined, so that they can be dynamically loaded into the view.</source>
          <target state="translated">このNgModuleが定義されたときにコンパイルするコンポーネントのセット。</target>
        </trans-unit>
        <trans-unit id="5fb26e057f395ff1c2bbe69c4c8605bab3259d00" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes (&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;) that belong to this module.</source>
          <target state="translated">このモジュールに属するコンポーネント、ディレクティブ、およびパイプ（&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;宣言可能&lt;/a&gt;）のセット。</target>
        </trans-unit>
        <trans-unit id="7b2caf88051dc93e4146531fb1b86232037cd52e" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes declared in this NgModule that can be used in the template of any component that is part of an NgModule that imports this NgModule. Exported declarations are the module's public API.</source>
          <target state="translated">このNgModuleをインポートするNgModuleの一部であるコンポーネントのテンプレートで使用できる、このNgModuleで宣言されたコンポーネント、ディレクティブ、パイプのセット。エクスポートされた宣言は、モジュールのパブリック API です。</target>
        </trans-unit>
        <trans-unit id="0c259b27e27fec00cdb957688cd4f00e39150e77" translate="yes" xml:space="preserve">
          <source>The set of injectable objects that are available in the injector of this module.</source>
          <target state="translated">このモジュールのインジェクタで利用可能なオブジェクトのセット。</target>
        </trans-unit>
        <trans-unit id="d5765ec9ddf94071c5020c93344913452a009948" translate="yes" xml:space="preserve">
          <source>The set of questions you've defined for the job application is returned from the &lt;code&gt;QuestionService&lt;/code&gt;. In a real app you'd retrieve these questions from storage.</source>
          <target state="translated">求人応募に対して定義した一連の質問は、 &lt;code&gt;QuestionService&lt;/code&gt; から返されます。実際のアプリでは、これらの質問をストレージから取得します。</target>
        </trans-unit>
        <trans-unit id="21e915a97b647841a3c77d6bb5bc493db4e59530" translate="yes" xml:space="preserve">
          <source>The set of schemas that declare elements to be allowed in the NgModule. Elements and properties that are neither Angular components nor directives must be declared in a schema.</source>
          <target state="translated">NgModuleで許可する要素を宣言するスキーマのセットです。Angularコンポーネントでもディレクティブでもない要素やプロパティはスキーマで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="f833bd6b1e79171a431acd5cc244779fb79402e4" translate="yes" xml:space="preserve">
          <source>The set of selectors that are available to a template include those declared here, and those that are exported from imported NgModules.</source>
          <target state="translated">テンプレートで利用可能なセレクタのセットには、ここで宣言されたものと、インポートされたNgModulesからエクスポートされたものが含まれます。</target>
        </trans-unit>
        <trans-unit id="b6a30893f8633b1e28a52635e18ed8118090a942" translate="yes" xml:space="preserve">
          <source>The setter of the &lt;code&gt;name&lt;/code&gt; input property in the child &lt;code&gt;NameChildComponent&lt;/code&gt; trims the whitespace from a name and replaces an empty value with default text.</source>
          <target state="translated">子 &lt;code&gt;NameChildComponent&lt;/code&gt; の &lt;code&gt;name&lt;/code&gt; 入力プロパティのセッターは、名前から空白を削除し、空の値をデフォルトのテキストに置き換えます。</target>
        </trans-unit>
        <trans-unit id="882e77e815d86faba535964e8ae6e6a1f26ffa49" translate="yes" xml:space="preserve">
          <source>The setup for the &lt;em&gt;test-host&lt;/em&gt; tests is similar to the setup for the stand-alone tests:</source>
          <target state="translated">以下のためのセットアップ&lt;em&gt;のテストホスト&lt;/em&gt;のテストは、スタンドアローンのテストのセットアップと似ています。</target>
        </trans-unit>
        <trans-unit id="52f4e19d49b1e5a67a00d5af99c62cbc1c7875a5" translate="yes" xml:space="preserve">
          <source>The shadow-dom-piercing descendant combinator is deprecated and support is being &lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;removed from major browsers and tools&lt;/a&gt;. As such, in v4 we deprecated support in Angular for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;. Until removal, &lt;code&gt;::ng-deep&lt;/code&gt; is preferred for broader compatibility with the tools.</source>
          <target state="translated">シャドウドムピアシングの子孫コンビネーターは非推奨となり&lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;、主要なブラウザーとツールから&lt;/a&gt;サポートが削除されます。そのため、v4では、Angularでの &lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;::ng-deep&lt;/code&gt; の 3つすべてのサポートを廃止しました。削除するまでは、ツールとの互換性を高めるために &lt;code&gt;::ng-deep&lt;/code&gt; が推奨されます。</target>
        </trans-unit>
        <trans-unit id="e4af087be2847b1c9f00ac636a9cf97937c7f75f" translate="yes" xml:space="preserve">
          <source>The shadow-piercing descendant combinator is deprecated and &lt;a href=&quot;https://www.chromestatus.com/feature/6750456638341120&quot;&gt;support is being removed from major browsers&lt;/a&gt; and tools. As such we plan to drop support in Angular (for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;). Until then &lt;code&gt;::ng-deep&lt;/code&gt; should be preferred for a broader compatibility with the tools.</source>
          <target state="translated">シャドウピアスの子孫コンビネータは非推奨になり&lt;a href=&quot;https://www.chromestatus.com/feature/6750456638341120&quot;&gt;、主要なブラウザ&lt;/a&gt;とツールからサポートが削除されます。そのため、Angularでのサポートを終了する予定です（ &lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;::ng-deep&lt;/code&gt; の3つすべてに対して）。それまでは、ツールとの互換性を高めるために &lt;code&gt;::ng-deep&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e2b9108143779ec04ceb04bcde0783f4eb419bdf" translate="yes" xml:space="preserve">
          <source>The shadow-piercing descendant combinator is deprecated and &lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;support is being removed from major browsers&lt;/a&gt; and tools. As such we plan to drop support in Angular (for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;). Until then &lt;code&gt;::ng-deep&lt;/code&gt; should be preferred for a broader compatibility with the tools.</source>
          <target state="translated">シャドウピアシングの子孫コンビネーターは非推奨となり&lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;、主要なブラウザー&lt;/a&gt;とツールからサポートが削除されます。そのため、Angularでのサポートを終了する予定です（ &lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;::ng-deep&lt;/code&gt; の 3つすべて）。それまでは、ツールとの互換性を高めるために &lt;code&gt;::ng-deep&lt;/code&gt; をお勧めします。</target>
        </trans-unit>
        <trans-unit id="d1572bbd4b2543d39de382abeaa39b959a062225" translate="yes" xml:space="preserve">
          <source>The shim first loads the SystemJS configuration, then Angular's test support libraries, and then the application's spec files themselves.</source>
          <target state="translated">シムはまずSystemJSの設定をロードし、次にAngularのテストサポートライブラリをロードし、次にアプリケーションのspecファイルそのものをロードします。</target>
        </trans-unit>
        <trans-unit id="d9c0ff4882b7ddca991893d98816e7055727d7c4" translate="yes" xml:space="preserve">
          <source>The shorthand form expands into a long form that uses the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; selector on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element. The content of the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that held the short-form directive.</source>
          <target state="translated">省略形は、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; セレクターを使用する長い形式に展開されます。 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素の内容は、短い形式のディレクティブを保持する &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素です。</target>
        </trans-unit>
        <trans-unit id="553922474ce1ca6a6f30eca0ff378d2e094bbbe1" translate="yes" xml:space="preserve">
          <source>The shorthand syntax &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; expands into two separate template specifications for the &quot;then&quot; and &quot;else&quot; clauses. For example, consider the following shorthand statement, that is meant to show a loading page while waiting for data to be loaded.</source>
          <target state="translated">省略構文 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; は、「then」節と「else」節の2つの個別のテンプレート仕様に展開されます。たとえば、データが読み込まれるのを待っている間、読み込み中のページを表示することを目的とした次の省略文を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1c97c8ccbdc799a2ca76696b4e244bd5effa4af9" translate="yes" xml:space="preserve">
          <source>The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1</source>
          <target state="translated">シグネチャ registerLocaleData(data:any,extraData?</target>
        </trans-unit>
        <trans-unit id="153a8913765ac20b181614adc3911db7022d20a6" translate="yes" xml:space="preserve">
          <source>The single parameter accepted is an initialization hash. Any properties of the response passed there will override the default values.</source>
          <target state="translated">受け入れられる単一のパラメータは初期化ハッシュです。そこに渡されたレスポンスのプロパティはすべてデフォルト値を上書きします。</target>
        </trans-unit>
        <trans-unit id="7ae02ec48c2aa6b29e8bf62369aed78347f97d35" translate="yes" xml:space="preserve">
          <source>The smallest grouping of display elements that can be created and destroyed together. Angular renders a view under the control of one or more &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, especially &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; directives and their companion &lt;a href=&quot;glossary#template&quot;&gt;templates&lt;/a&gt;.</source>
          <target state="translated">一緒に作成および破棄できる表示要素の最小のグループ。Angularは、1つ以上の&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;、特に&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;ディレクティブとそのコンパニオン&lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;の制御下でビューをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="dd8270c38ce691281c77b7ee88227b5e7764e526" translate="yes" xml:space="preserve">
          <source>The smallest grouping of display elements that can be created and destroyed together. Angular renders a view under the control of one or more &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">一緒に作成および破棄できる表示要素の最小グループ。Angularは、1つ以上の&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブの&lt;/a&gt;制御下でビューをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="fd28324682f0c17450b3cf5ed2f78e84c835aa30" translate="yes" xml:space="preserve">
          <source>The sneaky spy directive is simple, consisting almost entirely of &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; hooks that log messages to the parent via an injected &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">卑劣なスパイディレクティブは単純で、注入された &lt;code&gt;LoggerService&lt;/code&gt; を介して親にメッセージを記録する &lt;code&gt;ngOnInit()&lt;/code&gt; および &lt;code&gt;ngOnDestroy()&lt;/code&gt; フックでほぼ完全に構成されています。</target>
        </trans-unit>
        <trans-unit id="a51977b23bb7ecc232209e8d1327212e8a3ebfb7" translate="yes" xml:space="preserve">
          <source>The source code for this tutorial and the complete &lt;em&gt;Tour of Heroes&lt;/em&gt; global styles are available in the live example.</source>
          <target state="translated">このチュートリアルのソースコードと完全な&lt;em&gt;Tour of Heroes&lt;/em&gt;グローバルスタイルは、ライブサンプルで利用できます。</target>
        </trans-unit>
        <trans-unit id="197396630d371033ea63576d710b5005e3bd9ab9" translate="yes" xml:space="preserve">
          <source>The source component's injector.</source>
          <target state="translated">ソースコンポーネントのインジェクタ。</target>
        </trans-unit>
        <trans-unit id="26d4b7c388a1bdb518c645561859bb64e0fbf361" translate="yes" xml:space="preserve">
          <source>The source of truth provides the value and status of the form element at a given point in time. In reactive forms, the form model is the source of truth. In the example above, the form model is the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">真実の情報源は、特定の時点でのフォーム要素の値とステータスを提供します。リアクティブフォームでは、フォームモデルが真の情報源です。上記の例では、フォームモデルは &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="711481c7ae759061bd5e4428a64fc27d4832dd02" translate="yes" xml:space="preserve">
          <source>The spy is designed such that any call to &lt;code&gt;getQuote&lt;/code&gt; receives an observable with a test quote. Unlike the real &lt;code&gt;getQuote()&lt;/code&gt; method, this spy bypasses the server and returns a synchronous observable whose value is available immediately.</source>
          <target state="translated">スパイは、 &lt;code&gt;getQuote&lt;/code&gt; へのすべての呼び出しがテスト引用付きのオブザーバブルを受信するように設計されています。実際の &lt;code&gt;getQuote()&lt;/code&gt; メソッドとは異なり、このスパイはサーバーをバイパスし、値がすぐに利用可能な同期オブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="90b43b9097739862d0cb30d76b768225cec8d2a5" translate="yes" xml:space="preserve">
          <source>The starter app's structure looks like this:</source>
          <target state="translated">スターターアプリの構造はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="8fa84009f343b37f2c309935ebef67d3cf1bb17d" translate="yes" xml:space="preserve">
          <source>The state name, unique within the component.</source>
          <target state="translated">コンポーネント内で一意の状態名。</target>
        </trans-unit>
        <trans-unit id="8ba0f66a562868f6f0949ad17ceaa5aa9040735a" translate="yes" xml:space="preserve">
          <source>The state object is defined by &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;, and contains any developer-defined state value, as well as a unique ID that the router assigns to every router transition/navigation.</source>
          <target state="translated">状態オブジェクトは &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; によって定義され、開発者が定義した状態値と、ルーターがすべてのルーター遷移/ナビゲーションに割り当てる一意のIDを含みます。</target>
        </trans-unit>
        <trans-unit id="94da77aa1c11c6ad0070c12223f965f714061382" translate="yes" xml:space="preserve">
          <source>The statement context may also refer to properties of the template's own context. In the following example, the component's event handling method, &lt;code&gt;onSave()&lt;/code&gt; takes the template's own &lt;code&gt;$event&lt;/code&gt; object as an argument. On the next two lines, the &lt;code&gt;deleteHero()&lt;/code&gt; method takes a &lt;a href=&quot;built-in-directives#template-input-variable&quot;&gt;template input variable&lt;/a&gt;, &lt;code&gt;hero&lt;/code&gt;, and &lt;code&gt;onSubmit()&lt;/code&gt; takes a &lt;a href=&quot;template-reference-variables&quot;&gt;template reference variable&lt;/a&gt;, &lt;code&gt;#heroForm&lt;/code&gt;.</source>
          <target state="translated">ステートメントコンテキストは、テンプレート自体のコンテキストのプロパティを参照する場合もあります。次の例では、コンポーネントのイベント処理メソッド &lt;code&gt;onSave()&lt;/code&gt; は、テンプレート自体の &lt;code&gt;$event&lt;/code&gt; オブジェクトを引数として受け取ります。次の2行に、 &lt;code&gt;deleteHero()&lt;/code&gt; メソッドは、かかる&lt;a href=&quot;built-in-directives#template-input-variable&quot;&gt;テンプレート入力変数&lt;/a&gt;、 &lt;code&gt;hero&lt;/code&gt; 、及び &lt;code&gt;onSubmit()&lt;/code&gt; とる&lt;a href=&quot;template-reference-variables&quot;&gt;テンプレート参照変数を&lt;/a&gt;、 &lt;code&gt;#heroForm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29682628931d961e1dc643e174f6cb46d55f3a40" translate="yes" xml:space="preserve">
          <source>The statement context may also refer to properties of the template's own context. In the following examples, the template &lt;code&gt;$event&lt;/code&gt; object, a &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;template input variable&lt;/a&gt; (&lt;code&gt;let hero&lt;/code&gt;), and a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; (&lt;code&gt;#heroForm&lt;/code&gt;) are passed to an event handling method of the component.</source>
          <target state="translated">ステートメントコンテキストは、テンプレート自体のコンテキストのプロパティを参照する場合もあります。次の例では、テンプレート &lt;code&gt;$event&lt;/code&gt; オブジェクト、&lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;テンプレート入力変数&lt;/a&gt;（ &lt;code&gt;let hero&lt;/code&gt; ）、および&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;テンプレート参照変数&lt;/a&gt;（ &lt;code&gt;#heroForm&lt;/code&gt; ）がコンポーネントのイベント処理メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="ee7031536fc9f3201d33e673cc50dc352588d037" translate="yes" xml:space="preserve">
          <source>The static and resolved data of this route</source>
          <target state="translated">このルートの静的データと解決済みデータ</target>
        </trans-unit>
        <trans-unit id="6079268a1495ab3832f3c122c48c8debcb04466b" translate="yes" xml:space="preserve">
          <source>The steps are the same as using the &lt;code&gt;providers&lt;/code&gt; array, with the exception of using the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array instead.</source>
          <target state="translated">手順は、代わりに &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を使用することを除いて、 &lt;code&gt;providers&lt;/code&gt; 配列を使用する場合と同じです。</target>
        </trans-unit>
        <trans-unit id="cebfcbb525983dfc838b3ae9b82235f2b846443b" translate="yes" xml:space="preserve">
          <source>The steps are the same as using the &lt;code&gt;providers&lt;/code&gt; array, with the exception of using the &lt;code&gt;viewProviders&lt;/code&gt; array instead.</source>
          <target state="translated">手順は、代わりに &lt;code&gt;viewProviders&lt;/code&gt; 配列を使用することを除いて、 &lt;code&gt;providers&lt;/code&gt; 配列を使用する場合と同じです。</target>
        </trans-unit>
        <trans-unit id="7019f7ed50fbce076b2ffcd0fd378bb53f9230fa" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view when the &lt;code&gt;favoriteColor&lt;/code&gt; changes from &lt;em&gt;Blue&lt;/em&gt; to &lt;em&gt;Red&lt;/em&gt;.</source>
          <target state="translated">以下の手順は、 &lt;code&gt;favoriteColor&lt;/code&gt; が&lt;em&gt;Blue&lt;/em&gt;から&lt;em&gt;Redに&lt;/em&gt;変化したときにモデルからビューへのデータフローの概要を示しています。</target>
        </trans-unit>
        <trans-unit id="8f083b699a0e24cfb31552a7c5515dedc3bffa68" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view.</source>
          <target state="translated">モデルからビューまでのデータの流れの概要は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d6d931d512cd5180e215ff2bd54df9514cdbd37a" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model when the input value changes from &lt;em&gt;Red&lt;/em&gt; to &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">以下の手順は、入力値が&lt;em&gt;Red&lt;/em&gt;から&lt;em&gt;Blueに&lt;/em&gt;変化したときのビューからモデルへのデータフローの概要を示しています。</target>
        </trans-unit>
        <trans-unit id="cf66d9ec419458eca31557b6784e06c3d74c7302" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model.</source>
          <target state="translated">ビューからモデルへのデータの流れの概要は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="93bcd38a5f62ce5f433e4b3619e142ff10dbf2d5" translate="yes" xml:space="preserve">
          <source>The steps below show you how to do the following:</source>
          <target state="translated">以下のステップでは、以下のような方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="b62b2ca3bd1da7bcd7ed67d55220aa0c687e3b42" translate="yes" xml:space="preserve">
          <source>The strategy that controls how a component is transformed in a custom element.</source>
          <target state="translated">カスタム要素でコンポーネントがどのように変換されるかを制御する戦略。</target>
        </trans-unit>
        <trans-unit id="930fe4769070145b5d1902f6b39df80e384668cc" translate="yes" xml:space="preserve">
          <source>The strategy that the default change detector uses to detect changes. When set, takes effect the next time change detection is triggered.</source>
          <target state="translated">デフォルトの変更検出器が変更を検出するために使用する戦略。設定されている場合、変更検出が次回トリガされたときに有効になります。</target>
        </trans-unit>
        <trans-unit id="bf8be7fcf53ea5a196bf46985745bd43109fefe5" translate="yes" xml:space="preserve">
          <source>The strict checks of the &lt;code&gt;setValue()&lt;/code&gt; method help catch nesting errors in complex forms, while &lt;code&gt;patchValue()&lt;/code&gt; fails silently on those errors.</source>
          <target state="translated">&lt;code&gt;setValue()&lt;/code&gt; メソッドを厳密にチェックすると、複雑な形式のネストエラーをキャッチできます。一方、 &lt;code&gt;patchValue()&lt;/code&gt; は、これらのエラーでサイレントに失敗します。</target>
        </trans-unit>
        <trans-unit id="6a9ea9c73e5951ca219b42e33dc1405dd30050db" translate="yes" xml:space="preserve">
          <source>The string assigned to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is not a &lt;a href=&quot;interpolation&quot;&gt;template expression&lt;/a&gt;. Rather, it's a &lt;em&gt;microsyntax&lt;/em&gt;&amp;mdash;a little language of its own that Angular interprets. The string &lt;code&gt;&quot;let item of items&quot;&lt;/code&gt; means:</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; に割り当てられた文字列は&lt;a href=&quot;interpolation&quot;&gt;テンプレート式で&lt;/a&gt;はありません。むしろ、それは&lt;em&gt;マイクロシンタックス&lt;/em&gt;であり、Angularが解釈する独自の小さな言語です。文字列 &lt;code&gt;&quot;let item of items&quot;&lt;/code&gt; は次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="372bafa1bce494ea990979dd34c53dd96c7cc2ca" translate="yes" xml:space="preserve">
          <source>The string assigned to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is not a &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expression&lt;/a&gt;. Rather, it's a &lt;em&gt;microsyntax&lt;/em&gt;&amp;mdash;a little language of its own that Angular interprets. The string &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; means:</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; に割り当てられた文字列は&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式で&lt;/a&gt;はありません。むしろ、それは&lt;em&gt;マイクロ構文&lt;/em&gt;であり、Angularが解釈する独自の小さな言語です。文字列 &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; は、次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="e44daa65c98054f261ccfa5f7cf11e49ee653d27" translate="yes" xml:space="preserve">
          <source>The string form of &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; is deprecated (see &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt;). The function form (&lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt;) should be used instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; の文字列形式は非推奨です（ &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt; を参照）。代わりに、関数形式（ &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; ）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5e2186518aafc34e0de597f98ce5a35b638ef12" translate="yes" xml:space="preserve">
          <source>The string is a fixed value that you can put directly into the template.</source>
          <target state="translated">文字列はテンプレートに直接入れる固定値です。</target>
        </trans-unit>
        <trans-unit id="ee37f1eaca83dd9bb097b5466bff65a943fac485" translate="yes" xml:space="preserve">
          <source>The string to transform to lower case.</source>
          <target state="translated">小文字に変換する文字列。</target>
        </trans-unit>
        <trans-unit id="cb45bf71782ca8d0a97a51a6af91cbb4a490dedc" translate="yes" xml:space="preserve">
          <source>The string to transform to title case.</source>
          <target state="translated">タイトルケースに変換する文字列。</target>
        </trans-unit>
        <trans-unit id="417a5ce2ca98d102c22ce8871b11edab28c7f8e7" translate="yes" xml:space="preserve">
          <source>The string to transform to upper case.</source>
          <target state="translated">大文字に変換する文字列。</target>
        </trans-unit>
        <trans-unit id="79bdda991ab152b790e3070b35eb8fda7e4c2b45" translate="yes" xml:space="preserve">
          <source>The structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which, like the root module, lets you use the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator; the second imports &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;, which contributes many common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. Feature modules import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is only imported once in the root module. &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; only contains information for common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; which are needed in most templates, whereas &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; configures the Angular app for the browser which needs to be done only once.</source>
          <target state="translated">NgModuleの構造は、ルートモジュールでも機能モジュールでも同じです。 CLI生成機能モジュールでは、ファイルの上部にある2つのJavaScriptのimport文があります：最初の輸入 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 、ルートモジュールのように、あなたが使用することができます、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータは、 2番目は &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートします。これは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; などの多くの一般的なディレクティブを提供します。機能モジュールは、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートします。これは、ルートモジュールで一度だけインポートされます。 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; には、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; などの一般的なディレクティブの情報のみが含まれますこれは、ほとんどのテンプレートで必要ですが、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; は、Angularアプリをブラウザー用に構成します。</target>
        </trans-unit>
        <trans-unit id="de78df528fc5f787d89545140bece8187c6b8538" translate="yes" xml:space="preserve">
          <source>The stub selectors match the selectors for the corresponding real components. But their templates and classes are empty.</source>
          <target state="translated">スタブ・セレクタは、対応する実際のコンポーネントのセレクタと一致します。しかし、それらのテンプレートとクラスは空です。</target>
        </trans-unit>
        <trans-unit id="a2d59788c70b71518e84d399dc1f8c1b1995a79e" translate="yes" xml:space="preserve">
          <source>The styles specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata &lt;em&gt;apply only within the template of that component&lt;/em&gt;.</source>
          <target state="translated">で指定されたスタイル &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 、メタデータ&lt;em&gt;のみ、そのコンポーネントのテンプレート内適用されます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f48dea481324aa0b7a7a250484ea3649910069fd" translate="yes" xml:space="preserve">
          <source>The suggested polyfills are the ones that run full Angular applications. You may need additional polyfills to support features not covered by this list. Note that polyfills cannot magically transform an old, slow browser into a modern, fast one.</source>
          <target state="translated">推奨されるポリフィルは、完全な Angular アプリケーションを実行するためのものです。このリストに記載されていない機能をサポートするために追加のポリフィルが必要になるかもしれません。ポリフィルは古くて遅いブラウザを魔法のように最新の速いブラウザに変えることはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="629cf41ae2bb443d131c775aab136684c9761d9b" translate="yes" xml:space="preserve">
          <source>The switch directives are particularly useful for adding and removing &lt;em&gt;component elements&lt;/em&gt;. This example switches among four &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; components defined in the &lt;code&gt;item-switch.components.ts&lt;/code&gt; file. Each component has an &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input property&lt;/a&gt; which is bound to the &lt;code&gt;currentItem&lt;/code&gt; of the parent component.</source>
          <target state="translated">switchディレクティブは、&lt;em&gt;コンポーネント要素の&lt;/em&gt;追加と削除に特に役立ち&lt;em&gt;ます&lt;/em&gt;。この例では、 &lt;code&gt;item-switch.components.ts&lt;/code&gt; ファイルで定義された4つの &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; コンポーネントを切り替えます。各コンポーネントには、親コンポーネントの &lt;code&gt;currentItem&lt;/code&gt; にバインドされた &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;入力プロパティが&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="a89ade83ec04e3798353f8fcdcde955060d9b066" translate="yes" xml:space="preserve">
          <source>The switch directives are particularly useful for adding and removing &lt;em&gt;component elements&lt;/em&gt;. This example switches among four &lt;code&gt;item&lt;/code&gt; components defined in the &lt;code&gt;item-switch.components.ts&lt;/code&gt; file. Each component has an &lt;code&gt;item&lt;/code&gt;&lt;a href=&quot;inputs-outputs#input&quot;&gt;input property&lt;/a&gt; which is bound to the &lt;code&gt;currentItem&lt;/code&gt; of the parent component.</source>
          <target state="translated">switchディレクティブは、&lt;em&gt;コンポーネント要素の&lt;/em&gt;追加と削除に特に役立ち&lt;em&gt;ます&lt;/em&gt;。この例では、 &lt;code&gt;item-switch.components.ts&lt;/code&gt; ファイルで定義されている4つの &lt;code&gt;item&lt;/code&gt; コンポーネントを切り替えます。各コンポーネントには、親コンポーネントの &lt;code&gt;currentItem&lt;/code&gt; にバインドされた &lt;code&gt;item&lt;/code&gt; &lt;a href=&quot;inputs-outputs#input&quot;&gt;入力プロパティが&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="cb1898cd24b327b717bb4aef090ad4e9542fafed" translate="yes" xml:space="preserve">
          <source>The switch from the &lt;em&gt;local variable&lt;/em&gt; to the &lt;em&gt;ViewChild&lt;/em&gt; technique is solely for the purpose of demonstration.</source>
          <target state="translated">スイッチ&lt;em&gt;のローカル変数&lt;/em&gt;に&lt;em&gt;ViewChildの&lt;/em&gt;技術は、デモンストレーションのためだけです。</target>
        </trans-unit>
        <trans-unit id="40988748687c9ee6daa755f997551a5b4a1441e8" translate="yes" xml:space="preserve">
          <source>The switch value assigned to &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;hero.emotion&lt;/code&gt;) determines which (if any) of the switch cases are displayed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;hero.emotion&lt;/code&gt; ）に割り当てられたスイッチ値は、表示されるスイッチケース（存在する場合）を決定します。</target>
        </trans-unit>
        <trans-unit id="9a62c528f0a931f89b2287d8a503aed1f8009829" translate="yes" xml:space="preserve">
          <source>The symbol to localize.</source>
          <target state="translated">ローカライズするためのシンボルです。</target>
        </trans-unit>
        <trans-unit id="4ed679bf2daa47968c73d3b3701e2547464b78f8" translate="yes" xml:space="preserve">
          <source>The synchronous &lt;em&gt;beforeEach&lt;/em&gt;</source>
          <target state="translated">同期&lt;em&gt;beforeEach&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abbd548fb3da1a05f8609c8a3757af73c0e7704c" translate="yes" xml:space="preserve">
          <source>The synchronous validators registered with this group.</source>
          <target state="translated">このグループに登録されている同期バリデータ。</target>
        </trans-unit>
        <trans-unit id="d372dcb466775574685c3fae862c265b2b17aef2" translate="yes" xml:space="preserve">
          <source>The syntax in this example is as follows:</source>
          <target state="translated">この例の構文は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7e8b4d98df92da09eb34184a7a9efa8bfa65588d" translate="yes" xml:space="preserve">
          <source>The syntax may seem strange to you but users are unlikely to notice or care as long as the URL can be emailed and pasted into a browser address bar as this one can.</source>
          <target state="translated">この構文はあなたには奇妙に見えるかもしれませんが、URLをメールで送信してブラウザのアドレスバーに貼り付けることができる限り、ユーザーが気にしたり気にしたりすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="5f242d259e92ca5a53c10705d273887b830471cd" translate="yes" xml:space="preserve">
          <source>The table below summarizes the key differences between reactive and template-driven forms.</source>
          <target state="translated">以下の表は、リアクティブフォームとテンプレート駆動型フォームの主な違いをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="3c4e7caf543ca7199e467fdb0d9c36eb0a217ab0" translate="yes" xml:space="preserve">
          <source>The tabs in the following example demonstrates toggling between two different formats (&lt;code&gt;'shortDate'&lt;/code&gt; and &lt;code&gt;'fullDate'&lt;/code&gt;):</source>
          <target state="translated">次の例のタブは、2つの異なる形式（ &lt;code&gt;'shortDate'&lt;/code&gt; と &lt;code&gt;'fullDate'&lt;/code&gt; ）の切り替えを示しています。</target>
        </trans-unit>
        <trans-unit id="220ad8eac98ea25feaee853e9a31ab932f922b98" translate="yes" xml:space="preserve">
          <source>The tag attribute and value to match against, in the format &lt;code&gt;&quot;tag_attribute='value string'&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;tag_attribute='value string'&quot;&lt;/code&gt; の形式で照合するタグ属性と値。</target>
        </trans-unit>
        <trans-unit id="d90e8518f65ddbaf9cd91f81cdabaaf8afb11625" translate="yes" xml:space="preserve">
          <source>The tag definition to match against to identify an existing tag.</source>
          <target state="translated">既存のタグを識別するために照合するタグ定義。</target>
        </trans-unit>
        <trans-unit id="dfe05f51b185acbf840147ce35d32d01c530d4c8" translate="yes" xml:space="preserve">
          <source>The tag description with which to replace the existing tag content.</source>
          <target state="translated">既存のタグの内容を置き換えるタグの説明。</target>
        </trans-unit>
        <trans-unit id="08365a3c201aa0c652bb798a6188518150b14a2a" translate="yes" xml:space="preserve">
          <source>The target event determines the shape of the &lt;code&gt;$event&lt;/code&gt; object. If the target event is a native DOM element event, then &lt;code&gt;$event&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event object&lt;/a&gt;, with properties such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;target.value&lt;/code&gt;.</source>
          <target state="translated">ターゲットイベントは、 &lt;code&gt;$event&lt;/code&gt; オブジェクトの形状を決定します。ターゲットイベントがネイティブDOM要素のイベントである場合、 &lt;code&gt;$event&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;target.value&lt;/code&gt; などのプロパティを持つ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOMイベントオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="204c978751f63d09d4d7fdfadbc1e4791b804461" translate="yes" xml:space="preserve">
          <source>The target event determines the shape of the &lt;code&gt;$event&lt;/code&gt; object. If the target event is a native DOM element event, then &lt;code&gt;$event&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event object&lt;/a&gt;, with properties such as &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;target.value&lt;/code&gt;.</source>
          <target state="translated">ターゲットイベントは、 &lt;code&gt;$event&lt;/code&gt; オブジェクトの形状を決定します。ターゲットイベントがネイティブDOM要素イベントである場合、 &lt;code&gt;$event&lt;/code&gt; は、 &lt;code&gt;target&lt;/code&gt; や &lt;code&gt;target.value&lt;/code&gt; などのプロパティを持つ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOMイベントオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="088749979b09bfd46d68e94f37fbfac7f9f02497" translate="yes" xml:space="preserve">
          <source>The target in the square brackets, &lt;code&gt;[]&lt;/code&gt;, is the property you decorate with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component. The binding source, the part to the right of the equal sign, is the data that the parent component passes to the nested component.</source>
          <target state="translated">大括弧 &lt;code&gt;[]&lt;/code&gt; 内のターゲットは、子コンポーネントの &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; で装飾するプロパティーです。バインディングソース（等号の右側の部分）は、親コンポーネントがネストされたコンポーネントに渡すデータです。</target>
        </trans-unit>
        <trans-unit id="ea8a5033f54ae9c4081d5ab74a38829cd1975b5f" translate="yes" xml:space="preserve">
          <source>The target named &quot;touch&quot; uses our builder, which we published to &lt;code&gt;@example/command-runner&lt;/code&gt;. (See &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;)</source>
          <target state="translated">「touch」という名前のターゲットは、 &lt;code&gt;@example/command-runner&lt;/code&gt; 公開したビルダーを使用します。（&lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;ライブラリの公開を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="83189c190de1ae321a2890e3cde83b83c7039a71" translate="yes" xml:space="preserve">
          <source>The target property accepts a string value.</source>
          <target state="translated">targetプロパティは文字列の値を受け付けます。</target>
        </trans-unit>
        <trans-unit id="9803929ad21484881b4d3f6acabd34faf9ef3af2" translate="yes" xml:space="preserve">
          <source>The target to apply service worker to.</source>
          <target state="translated">サービスワーカーへの応募対象</target>
        </trans-unit>
        <trans-unit id="758b33e79798a18b4b5d7ce28a40f40423430f66" translate="yes" xml:space="preserve">
          <source>The target to apply web worker to.</source>
          <target state="translated">ウェブワーカーを適用する対象</target>
        </trans-unit>
        <trans-unit id="4832cdf5716df7acd57fe0ac87672a04e59ff3aa" translate="yes" xml:space="preserve">
          <source>The target, &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;, which is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property in the child component class, receives its value from the parent's property, &lt;code&gt;currentItem&lt;/code&gt;. When you click delete, the child component raises an event, &lt;code&gt;deleteRequest&lt;/code&gt;, which is the argument for the parent's &lt;code&gt;crossOffItem()&lt;/code&gt; method.</source>
          <target state="translated">子コンポーネントクラスの &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）プロパティであるターゲット &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; は、親のプロパティ &lt;code&gt;currentItem&lt;/code&gt; から値を受け取ります。「削除」をクリックすると、子コンポーネントはイベント &lt;code&gt;deleteRequest&lt;/code&gt; を発生させます。これは、親の &lt;code&gt;crossOffItem()&lt;/code&gt; メソッドの引数です。</target>
        </trans-unit>
        <trans-unit id="fba0b19cd787422e1cf01da19ec8f25d07cada93" translate="yes" xml:space="preserve">
          <source>The target, &lt;code&gt;item&lt;/code&gt;, which is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property in the child component class, receives its value from the parent's property, &lt;code&gt;currentItem&lt;/code&gt;. When you click delete, the child component raises an event, &lt;code&gt;deleteRequest&lt;/code&gt;, which is the argument for the parent's &lt;code&gt;crossOffItem()&lt;/code&gt; method.</source>
          <target state="translated">ターゲット、 &lt;code&gt;item&lt;/code&gt; で、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 子コンポーネントのクラスのプロパティは、親の財産からその値を受け取る &lt;code&gt;currentItem&lt;/code&gt; 。[削除]をクリックすると、子コンポーネントは、親の &lt;code&gt;crossOffItem()&lt;/code&gt; メソッドの引数であるイベント &lt;code&gt;deleteRequest&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="4f1ff5014d8414a2f274237e4b393821bcc007a8" translate="yes" xml:space="preserve">
          <source>The technique is particularly useful when you have a type of form whose content must change frequently to meet rapidly changing business and regulatory requirements. A typical use case is a questionaire. You might need to get input from users in different contexts. The format and style of the forms a user sees should remain constant, while the actual questions you need to ask vary with the context.</source>
          <target state="translated">このテクニックは、急速に変化するビジネスや規制要件に対応するために、内容を頻繁に変更しなければならないタイプのフォームがある場合に特に有効です。典型的なユースケースは質問箱です。異なるコンテキストでユーザーからの入力を得る必要があるかもしれません。ユーザーが見るフォームの形式やスタイルは一定であるべきですが、実際に質問する必要がある質問はコンテキストによって異なります。</target>
        </trans-unit>
        <trans-unit id="cd2fa7e7402ff15d8269c74078e6ca3033630d4e" translate="yes" xml:space="preserve">
          <source>The telltale signs of &lt;em&gt;content projection&lt;/em&gt; are twofold:</source>
          <target state="translated">&lt;em&gt;コンテンツプロジェクション&lt;/em&gt;の明確な兆候は2つあります。</target>
        </trans-unit>
        <trans-unit id="5e77a452f056e2f53277faeefa0476eb5ee812b2" translate="yes" xml:space="preserve">
          <source>The template (&lt;code&gt;flying-heroes.component.html (flyers)&lt;/code&gt;) with the new pipe.</source>
          <target state="translated">新しいパイプを &lt;code&gt;flying-heroes.component.html (flyers)&lt;/code&gt; テンプレート（flying-heroes.component.html（flyers））。</target>
        </trans-unit>
        <trans-unit id="e2a40647498302ae30e3c37d356dbc6aee8a2f1c" translate="yes" xml:space="preserve">
          <source>The template and style filenames reference the HTML and CSS files that StackBlitz generates.</source>
          <target state="translated">テンプレートとスタイルのファイル名は、StackBlitzが生成するHTMLとCSSファイルを参照しています。</target>
        </trans-unit>
        <trans-unit id="c4786e4078a2207abe9c4cfa9d1d9cf3ab9a3992" translate="yes" xml:space="preserve">
          <source>The template associated with a component binds an animation trigger to an element.</source>
          <target state="translated">コンポーネントに関連付けられたテンプレートは、アニメーションのトリガーを要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="7456b59897a0fe9f7fab60b1fd5714f118ee168e" translate="yes" xml:space="preserve">
          <source>The template associated with this component makes use of the defined trigger by binding to an element within its template code.</source>
          <target state="translated">このコンポーネントに関連付けられたテンプレートは、そのテンプレート・コード内の要素にバインディングすることで、定義されたトリガーを使用します。</target>
        </trans-unit>
        <trans-unit id="ad2640340c3b2204b3e2187d3156835ccc870fd9" translate="yes" xml:space="preserve">
          <source>The template displays the two component properties using double curly brace interpolation:</source>
          <target state="translated">テンプレートは、二重中括弧中括弧補間を使用して、2つのコンポーネントプロパティを表示します。</target>
        </trans-unit>
        <trans-unit id="576bb8173300bc75c8165cf5e1686bbdae4c4807" translate="yes" xml:space="preserve">
          <source>The template expression inside the double quotes, &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt;, looks and behaves much like TypeScript. When the component's list of heroes has more than three items, Angular adds the paragraph to the DOM and the message appears. If there are three or fewer items, Angular omits the paragraph, so no message appears. For more information, see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">二重引用符で囲まれたテンプレート式 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt; 、TypeScriptのように見え、動作します。コンポーネントのヒーローのリストに4つ以上のアイテムがある場合、AngularはDOMに段落を追加し、メッセージが表示されます。アイテムが3つ以下の場合、Angularは段落を省略しているため、メッセージは表示されません。詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="06a26eec315b228b84cdf45c3df4a6172bf6d5de" translate="yes" xml:space="preserve">
          <source>The template expression should evaluate to the type of value that the target property expects. Return a string if the target property expects a string, a number if it expects a number, an object if it expects an object, and so on.</source>
          <target state="translated">テンプレート式は、ターゲット・プロパティが期待する値の型に合わせて評価する必要があります。ターゲット・プロパティが文字列を期待している場合は文字列を、数値を期待している場合は数値を、オブジェクトを期待している場合はオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="ac5e4c5de5dc648043bccd61180f0f506003d6cf" translate="yes" xml:space="preserve">
          <source>The template expression to the right of the equal sign, &lt;code&gt;=&lt;/code&gt;, contains a space-delimited string of CSS classes that the Router adds when this link is active (and removes when the link is inactive). You set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to a string of classes such as &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; or bind it to a component property that returns such a string.</source>
          <target state="translated">等号の右側のテンプレート式 &lt;code&gt;=&lt;/code&gt; には、このリンクがアクティブなときにルータが追加する（リンクが非アクティブなときに削除する）CSSクラスのスペース区切りの文字列が含まれています。 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブを &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; などのクラスの文字列に設定するか、そのような文字列を返すコンポーネントプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="c2d8c395975bbaf307f8b6ad3d0e90daae25b98a" translate="yes" xml:space="preserve">
          <source>The template expression to the right of the equals (=) contains a space-delimited string of CSS classes that the Router will add when this link is active (and remove when the link is inactive). You set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to a string of classes such as &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; or bind it to a component property that returns such a string.</source>
          <target state="translated">等号（=）の右側のテンプレート式には、このリンクがアクティブのときにルーターが追加する（リンクが非アクティブのときに削除する）CSSクラスのスペース区切りの文字列が含まれています。 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブを &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; などのクラスの文字列に設定するか、そのような文字列を返すコンポーネントプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="c4a5ffd1d833be7be8234c4da4123676ff8d6c69" translate="yes" xml:space="preserve">
          <source>The template input elements do &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレート入力要素は &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e42a3efc7ee16d8ee04f26132d4fe495e4010874" translate="yes" xml:space="preserve">
          <source>The template is a multi-line string within ECMAScript 2015 backticks (&lt;code&gt;`&lt;/code&gt;). The backtick (&lt;code&gt;`&lt;/code&gt;)&amp;mdash;which is &lt;em&gt;not&lt;/em&gt; the same character as a single quote (&lt;code&gt;'&lt;/code&gt;)&amp;mdash;allows you to compose a string over several lines, which makes the HTML more readable.</source>
          <target state="translated">テンプレートは、ECMAScript 2015のバッククォート（ &lt;code&gt;`&lt;/code&gt; ）内の複数行の文字列です。単一引用符（ &lt;code&gt;'&lt;/code&gt; ）と同じ文字では&lt;em&gt;ない&lt;/em&gt;バックティック（ &lt;code&gt;`&lt;/code&gt; ）を使用すると、複数行にまたがって文字列を作成できるため、HTMLが読みやすくなります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3bfaca46091594f4d1d50328af755b641a1f6fb4" translate="yes" xml:space="preserve">
          <source>The template is compiled within the context of an NgModule&amp;mdash;the NgModule within which the template's component is declared&amp;mdash;which determines the set of selectors using the following rules:</source>
          <target state="translated">テンプレートは、NgModule（テンプレートのコンポーネントが宣言されているNgModule）のコンテキスト内でコンパイルされ、次のルールを使用してセレクターのセットを決定します。</target>
        </trans-unit>
        <trans-unit id="08d9755e408a260636b09bfef92316faea44cef4" translate="yes" xml:space="preserve">
          <source>The template is completely self contained. It doesn't bind to the component, and the component does nothing.</source>
          <target state="translated">テンプレートは完全に自己完結しています。これはコンポーネントにバインドされず、コンポーネントは何もしません。</target>
        </trans-unit>
        <trans-unit id="70313244a4cd1e80d96df911743747c5b1d0a1c0" translate="yes" xml:space="preserve">
          <source>The template options object, &lt;code&gt;angularCompilerOptions&lt;/code&gt;, is a sibling to the &lt;code&gt;compilerOptions&lt;/code&gt; object that supplies standard options to the TypeScript compiler.</source>
          <target state="translated">テンプレートオプションオブジェクト &lt;code&gt;angularCompilerOptions&lt;/code&gt; は、TypeScriptコンパイラに標準オプションを提供する &lt;code&gt;compilerOptions&lt;/code&gt; オブジェクトの兄弟です。</target>
        </trans-unit>
        <trans-unit id="3b72560eddb355fd40b07d7d81925030a83c57a2" translate="yes" xml:space="preserve">
          <source>The template reference variable (&lt;code&gt;#name&lt;/code&gt;) is set to &lt;code&gt;&quot;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; because that is the value of the &lt;a href=&quot;../api/core/directive#exportAs&quot;&gt;&lt;code&gt;NgModel.exportAs&lt;/code&gt;&lt;/a&gt; property. This property tells Angular how to link a reference variable to a directive.</source>
          <target state="translated">テンプレート参照変数（ &lt;code&gt;#name&lt;/code&gt; ）は、&lt;a href=&quot;../api/core/directive#exportAs&quot;&gt; &lt;code&gt;NgModel.exportAs&lt;/code&gt; &lt;/a&gt;プロパティの値であるため、 &lt;code&gt;&quot;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; 設定されます。このプロパティは、参照変数をディレクティブにリンクする方法をAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="51b07ca66a0c80d8a3f63013141583e49737c085" translate="yes" xml:space="preserve">
          <source>The template reference variable named &lt;code&gt;box&lt;/code&gt;, declared on the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element itself. The code uses the &lt;code&gt;box&lt;/code&gt; variable to get the input element's &lt;code&gt;value&lt;/code&gt; and display it with interpolation between &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素で宣言された &lt;code&gt;box&lt;/code&gt; という名前のテンプレート参照変数は、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素自体を参照します。コードは &lt;code&gt;box&lt;/code&gt; 変数を使用して入力要素の &lt;code&gt;value&lt;/code&gt; を取得し、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; タグ間の補間で表示します。</target>
        </trans-unit>
        <trans-unit id="be99d9963797c6d6b4d78974ccde065adf89a39f" translate="yes" xml:space="preserve">
          <source>The template syntax guides show you how you can control the UX/UI by coordinating data between the class and the template.</source>
          <target state="translated">テンプレート構文ガイドでは、クラスとテンプレート間でデータを調整してUX/UIをコントロールする方法を紹介しています。</target>
        </trans-unit>
        <trans-unit id="de2262f6eff650096d5ec2a922c11474976de6e1" translate="yes" xml:space="preserve">
          <source>The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</source>
          <target state="translated">テンプレート構文は、プロパティ・バインディングにあまり適していないシナリオのために、特殊な一方通行バインディングを提供します。</target>
        </trans-unit>
        <trans-unit id="083a3f1dd8ef9b722e60e2598176af5110f9dbf5" translate="yes" xml:space="preserve">
          <source>The test assumes (correctly in this case) that the runtime event handler&amp;mdash;the component's &lt;code&gt;click()&lt;/code&gt; method&amp;mdash;doesn't care about the event object.</source>
          <target state="translated">このテストでは、（この場合は正しく）ランタイムイベントハンドラー &lt;code&gt;click()&lt;/code&gt; コンポーネントのclick（）メソッド）がイベントオブジェクトを無視することを前提としています。</target>
        </trans-unit>
        <trans-unit id="3fee678255a89c608b1621887a0565d3703b71c4" translate="yes" xml:space="preserve">
          <source>The test configuration can use the &lt;code&gt;SharedModule&lt;/code&gt; too as seen in this alternative setup:</source>
          <target state="translated">この代替セットアップで見られるように、テスト構成は &lt;code&gt;SharedModule&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="9b3f7b35cc6454035e62b2373f127b23cbdae65d" translate="yes" xml:space="preserve">
          <source>The test consumes that spy in the same way it did earlier.</source>
          <target state="translated">テストは以前と同じようにスパイを消費します。</target>
        </trans-unit>
        <trans-unit id="64d8dd78adadc9a255e228a4c2bdbf4eb2d5cae3" translate="yes" xml:space="preserve">
          <source>The test detects that event through its subscription to &lt;code&gt;selected&lt;/code&gt;.</source>
          <target state="translated">テストは、 &lt;code&gt;selected&lt;/code&gt; たへのサブスクリプションを通じてそのイベントを検出します。</target>
        </trans-unit>
        <trans-unit id="8a9ff9ce0ff2aea3ea5d9b5e4c05171faa52806f" translate="yes" xml:space="preserve">
          <source>The test fails when the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; tries to create the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; がコンポーネントを作成しようとすると、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="dc61697c7a24dc30137c8a1be726e1064a8ae44b" translate="yes" xml:space="preserve">
          <source>The test file extension &lt;strong&gt;must be &lt;code&gt;.spec.ts&lt;/code&gt;&lt;/strong&gt; so that tooling can identify it as a file with tests (AKA, a &lt;em&gt;spec&lt;/em&gt; file).</source>
          <target state="translated">テストファイルの拡張子&lt;strong&gt;は &lt;code&gt;.spec.ts&lt;/code&gt; である&lt;/strong&gt;&lt;strong&gt;必要があります&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;これにより、ツールはそれをテストファイル（&lt;strong&gt;別名&lt;/strong&gt;、&lt;em&gt;スペック&lt;/em&gt;ファイル）として識別できます。</target>
        </trans-unit>
        <trans-unit id="e1c2770aafe4156298be6944b33c74e2f41bc2b8" translate="yes" xml:space="preserve">
          <source>The test host sets the component's &lt;code&gt;hero&lt;/code&gt; input property with its test hero. It binds the component's &lt;code&gt;selected&lt;/code&gt; event with its &lt;code&gt;onSelected&lt;/code&gt; handler, which records the emitted hero in its &lt;code&gt;selectedHero&lt;/code&gt; property.</source>
          <target state="translated">テストホストは、コンポーネントの &lt;code&gt;hero&lt;/code&gt; 入力プロパティをテストヒーローで設定します。コンポーネントの &lt;code&gt;selected&lt;/code&gt; イベントを &lt;code&gt;onSelected&lt;/code&gt; ハンドラーにバインドします。onSelectedハンドラーは、放出されたヒーローを &lt;code&gt;selectedHero&lt;/code&gt; プロパティに記録します。</target>
        </trans-unit>
        <trans-unit id="fb31db149beae9a822efe838f27bfc240e01968b" translate="yes" xml:space="preserve">
          <source>The test must wait for the &lt;code&gt;getQuote()&lt;/code&gt; observable to emit the next quote. Instead of calling &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt;, it calls &lt;code&gt;fixture.whenStable()&lt;/code&gt;.</source>
          <target state="translated">テストは、 &lt;code&gt;getQuote()&lt;/code&gt; observableが次のクォートを発行するのを待つ必要があります。&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick（）&lt;/a&gt;を呼び出す代わりに、 &lt;code&gt;fixture.whenStable()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3f2fe2155132bb0d67244809298ea98ce16fe29e" translate="yes" xml:space="preserve">
          <source>The test must wait for the &lt;code&gt;getQuote()&lt;/code&gt; observable to emit the next quote. Instead of calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;, it calls &lt;code&gt;fixture.whenStable()&lt;/code&gt;.</source>
          <target state="translated">テストは、 &lt;code&gt;getQuote()&lt;/code&gt; オブザーバブルが次の引用を発行するのを待つ必要があります。 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; を呼び出す代わりに、 &lt;code&gt;fixture.whenStable()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="eae43c82340aebd9536a260fd2377f5061a497ef" translate="yes" xml:space="preserve">
          <source>The test resumes within the promise callback, which calls &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to update the quote element with the expected text.</source>
          <target state="translated">テストは &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; コールバック内で再開されます。このコールバックは、detectChanges（）を呼び出して、予想されるテキストでquote要素を更新します。</target>
        </trans-unit>
        <trans-unit id="6513a6033669aff320e259d0c6833fb95d1491eb" translate="yes" xml:space="preserve">
          <source>The test resumes within the promise callback, which calls &lt;code&gt;detectChanges()&lt;/code&gt; to update the quote element with the expected text.</source>
          <target state="translated">テストはpromiseコールバック内で再開されます &lt;code&gt;detectChanges()&lt;/code&gt; コールバックはdetectChanges（）を呼び出して、引用要素を期待されるテキストで更新します。</target>
        </trans-unit>
        <trans-unit id="9991de36b4ebc0ec198e7d693844d908feef9de2" translate="yes" xml:space="preserve">
          <source>The test suite setup provided the same router spy &lt;a href=&quot;testing#routing-component&quot;&gt;described above&lt;/a&gt; which spies on the router without actually navigating.</source>
          <target state="translated">テストスイートのセットアップでは、&lt;a href=&quot;testing#routing-component&quot;&gt;上記&lt;/a&gt;と同じルータースパイが提供され、実際に移動することなくルーターをスパイします。</target>
        </trans-unit>
        <trans-unit id="26c2531c64b39001e8bbe987859331ff8589c07b" translate="yes" xml:space="preserve">
          <source>The test suite setup provided the same router spy &lt;a href=&quot;testing-components-scenarios#routing-component&quot;&gt;described above&lt;/a&gt; which spies on the router without actually navigating.</source>
          <target state="translated">テストスイートのセットアップでは、実際にナビゲートせずにルーターをスパイする、&lt;a href=&quot;testing-components-scenarios#routing-component&quot;&gt;上記&lt;/a&gt;と同じルータースパイが提供されました。</target>
        </trans-unit>
        <trans-unit id="6e4274a8f1842c774f28cff1fab41deb042b588a" translate="yes" xml:space="preserve">
          <source>The test triggered a &quot;click&quot; event with a &lt;code&gt;null&lt;/code&gt; event object.</source>
          <target state="translated">テストは、 &lt;code&gt;null&lt;/code&gt; イベントオブジェクトを使用して「クリック」イベントをトリガーしました。</target>
        </trans-unit>
        <trans-unit id="7fc3193a4fa820f2db5a35cc3a595865239a463f" translate="yes" xml:space="preserve">
          <source>The testing documentation offers tips and techniques for unit and integration testing Angular applications through a sample application created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. This sample application is much like the one in the &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial&lt;/a&gt;.</source>
          <target state="translated">テストドキュメントは、&lt;a href=&quot;cli&quot;&gt;Angular CLIで&lt;/a&gt;作成されたサンプルアプリケーションを介して、Angularアプリケーションのユニットテストと統合テストのヒントとテクニックを提供します。このサンプルアプリケーションは、&lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour ofHeroes&lt;/em&gt;チュートリアルの&lt;/a&gt;ものとよく似ています。</target>
        </trans-unit>
        <trans-unit id="64322dc55f479cb397712aa1ca434f09788d33d9" translate="yes" xml:space="preserve">
          <source>The testing goal is to verify that such bindings work as expected. The tests should set input values and listen for output events.</source>
          <target state="translated">テストの目標は、そのようなバインディングが期待通りに動作するかどうかを検証することです。テストは入力値を設定し、出力イベントをリッスンしなければなりません。</target>
        </trans-unit>
        <trans-unit id="6e2010246d07d1175ff55b50a4ac15be59351555" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) call it for you so there is rarely a reason for you to call it yourself.</source>
          <target state="translated">テストシム（ &lt;code&gt;karma-test-shim&lt;/code&gt; 、 &lt;code&gt;browser-test-shim&lt;/code&gt; ）がそれを呼び出すため、自分で呼び出す理由はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="148b2781f0537830461040ebc4675f60de170e4e" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) establish the &lt;a href=&quot;testing&quot;&gt;initial test environment&lt;/a&gt; and a default testing module. The default testing module is configured with basic declaratives and some Angular service substitutes that every tester needs.</source>
          <target state="translated">テストシム（ &lt;code&gt;karma-test-shim&lt;/code&gt; 、 &lt;code&gt;browser-test-shim&lt;/code&gt; ）は、&lt;a href=&quot;testing&quot;&gt;初期テスト環境&lt;/a&gt;とデフォルトのテストモジュールを確立します。デフォルトのテストモジュールは、基本的な宣言と、すべてのテスターが必要とするいくつかのAngularサービスの代替で構成されています。</target>
        </trans-unit>
        <trans-unit id="32d01fc5844e040dbbc5a7fa7fc314aed7f8af26" translate="yes" xml:space="preserve">
          <source>The tests described in this guide are in &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt;. There are also tests of an application data service that call &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt;.</source>
          <target state="translated">このガイドで説明されているテストは &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt; にあります。アプリケーションデータサービスのテストは、呼び出していることもあります &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 中 &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c46d6deffac15f691e67af3e7802efbd62c6f4b5" translate="yes" xml:space="preserve">
          <source>The tests in this guide are designed to run in a browser so a &lt;code&gt;nativeElement&lt;/code&gt; value will always be an &lt;code&gt;HTMLElement&lt;/code&gt; or one of its derived classes.</source>
          <target state="translated">このガイドのテストはブラウザーで実行するように設計されているため、 &lt;code&gt;nativeElement&lt;/code&gt; 値は常に &lt;code&gt;HTMLElement&lt;/code&gt; またはその派生クラスの1つになります。</target>
        </trans-unit>
        <trans-unit id="97411629b7777fd387f17c68fd54b77f893a322d" translate="yes" xml:space="preserve">
          <source>The tests in this guide only call &lt;code&gt;compileComponents&lt;/code&gt; when necessary.</source>
          <target state="translated">このガイドのテストでは、必要な場合にのみ &lt;code&gt;compileComponents&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b9b3c07155cb24bc62c23428c9b9b89113dffe1f" translate="yes" xml:space="preserve">
          <source>The tests need access to the (stub) &lt;code&gt;UserService&lt;/code&gt; injected into the &lt;code&gt;WelcomeComponent&lt;/code&gt;.</source>
          <target state="translated">テストでは、 &lt;code&gt;WelcomeComponent&lt;/code&gt; に挿入された（スタブ） &lt;code&gt;UserService&lt;/code&gt; にアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="552798847cfd969bee03bd536ec0eaa7b9abccb0" translate="yes" xml:space="preserve">
          <source>The tests themselves are almost identical to the stand-alone version:</source>
          <target state="translated">テスト自体はスタンドアロン版とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="f24377c82eb7c604520a6472b6cdeda1e15d8e75" translate="yes" xml:space="preserve">
          <source>The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.</source>
          <target state="translated">中括弧の間のテキストはコンポーネントプロパティの名前であることが多いです。Angularはその名前を対応するコンポーネントプロパティの文字列の値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="7001ead9ab548d59ed3b0b0d47f9fc2feadd5c3b" translate="yes" xml:space="preserve">
          <source>The text string.</source>
          <target state="translated">テキスト文字列です。</target>
        </trans-unit>
        <trans-unit id="019a0c6e6325000b9ec468afe8f97d5dd0f39c5b" translate="yes" xml:space="preserve">
          <source>The textbox should both &lt;em&gt;display&lt;/em&gt; the hero's &lt;code&gt;name&lt;/code&gt; property and &lt;em&gt;update&lt;/em&gt; that property as the user types. That means data flows from the component class &lt;em&gt;out to the screen&lt;/em&gt; and from the screen &lt;em&gt;back to the class&lt;/em&gt;.</source>
          <target state="translated">テキストボックスは、ヒーローの &lt;code&gt;name&lt;/code&gt; プロパティを&lt;em&gt;表示&lt;/em&gt;し、ユーザーのタイプに応じてそのプロパティを&lt;em&gt;更新&lt;/em&gt;する必要があります。つまり、データはコンポーネントクラス&lt;em&gt;から画面に&lt;/em&gt;流れ&lt;em&gt;、画面&lt;/em&gt;から&lt;em&gt;クラスに戻り&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9c58df2e0d216969a6b8f76eb1c801e78a85b760" translate="yes" xml:space="preserve">
          <source>The third argument, &lt;code&gt;easing&lt;/code&gt;, controls how the animation &lt;a href=&quot;http://easings.net/&quot;&gt;accelerates and decelerates&lt;/a&gt; during its runtime. For example, &lt;code&gt;ease-in&lt;/code&gt; causes the animation to begin slowly, and to pick up speed as it progresses.</source>
          <target state="translated">3番目の引数の &lt;code&gt;easing&lt;/code&gt; は、アニメーションが実行時に&lt;a href=&quot;http://easings.net/&quot;&gt;加速および減速&lt;/a&gt;する方法を制御します。たとえば、 &lt;code&gt;ease-in&lt;/code&gt; と、アニメーションの開始が遅くなり、進行するにつれて速度が速くなります。</target>
        </trans-unit>
        <trans-unit id="387ef2ede0548f8a7e5227510a281240ebc65597" translate="yes" xml:space="preserve">
          <source>The third parameter defines a pattern of pluralization categories and their matching values:</source>
          <target state="translated">3番目のパラメータは、複数化カテゴリのパターンとその一致値を定義します。</target>
        </trans-unit>
        <trans-unit id="02b20036ccb6a097e5d6133a873e25f13d920be9" translate="yes" xml:space="preserve">
          <source>The third parameter defines a pluralization pattern consisting of pluralization categories and their matching values.</source>
          <target state="translated">3番目のパラメータは、複数のカテゴリとその一致する値からなる複数化パターンを定義します。</target>
        </trans-unit>
        <trans-unit id="9e89f13f3f25c09bfbb1e27588e7ce09b251770a" translate="yes" xml:space="preserve">
          <source>The three modes of type-checking treat embedded views differently. Consider the following example.</source>
          <target state="translated">タイプチェックの3つのモードは、埋め込まれたビューを異なる方法で扱います。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="e1fbe17ffff22abb0345952cf457c1a79e7059ef" translate="yes" xml:space="preserve">
          <source>The threshold for error relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">ベースラインに対するエラーのしきい値（最小および最大）。</target>
        </trans-unit>
        <trans-unit id="60c47ee6ec4aee3d2f301fc3d304a4955e681b57" translate="yes" xml:space="preserve">
          <source>The threshold for warning relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">ベースラインに対する警告のしきい値（最小および最大）。</target>
        </trans-unit>
        <trans-unit id="c4b55d03441bffab6eec1d8c5b1ac161eb54aa13" translate="yes" xml:space="preserve">
          <source>The time it takes the animation to complete, in milliseconds.</source>
          <target state="translated">アニメーションが完成するまでの時間をミリ秒単位で表示しています。</target>
        </trans-unit>
        <trans-unit id="39672ec6c077499845ec25181d8fdddc36ce80f6" translate="yes" xml:space="preserve">
          <source>The time zone. A time zone offset from GMT (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US time zone abbreviation. If not specified, uses host system settings.</source>
          <target state="translated">タイムゾーン。GMTからのタイムゾーンオフセット（ &lt;code&gt;'+0430'&lt;/code&gt; など）、または標準のUTC / GMTまたは米国大陸のタイムゾーンの省略形。指定しない場合は、ホストシステムの設定を使用します。</target>
        </trans-unit>
        <trans-unit id="20e4e50a13a151170196f0e0befe4c1c2ba96789" translate="yes" xml:space="preserve">
          <source>The timing data for the step.</source>
          <target state="translated">ステップのタイミングデータです。</target>
        </trans-unit>
        <trans-unit id="3a5862865c9788bb436ccfadcc4ca1e2e0ed4f85" translate="yes" xml:space="preserve">
          <source>The timing data for the steps.</source>
          <target state="translated">ステップのタイミングデータです。</target>
        </trans-unit>
        <trans-unit id="9bb53d35a2e2718224cdb5414e304756bc3d18c6" translate="yes" xml:space="preserve">
          <source>The title should appear at the top of the physical page. Begin the title with the markdown &lt;code&gt;#&lt;/code&gt; character. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">タイトルは物理ページの上部に表示されます。マークダウン &lt;code&gt;#&lt;/code&gt; 文字でタイトルを開始します。または、同等の &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; を記述できます。</target>
        </trans-unit>
        <trans-unit id="964f1d13124f53046f40e305bcf164695c936261" translate="yes" xml:space="preserve">
          <source>The token is used as a type specifier for constructor injection.</source>
          <target state="translated">トークンは、コンストラクタインジェクションの型指定子として使用されます。</target>
        </trans-unit>
        <trans-unit id="8f009ca4174665a8b55345b2eea3c338ed581af6" translate="yes" xml:space="preserve">
          <source>The token is used in the value position of a &lt;a href=&quot;lifecycle-hooks#using-aftercontent-hooks&quot;&gt;content query&lt;/a&gt;.</source>
          <target state="translated">トークンは、&lt;a href=&quot;lifecycle-hooks#using-aftercontent-hooks&quot;&gt;コンテンツクエリの&lt;/a&gt;値の位置で使用されます。</target>
        </trans-unit>
        <trans-unit id="7392074d5488bfada1cba2db29c9e3aaea938dec" translate="yes" xml:space="preserve">
          <source>The tool that the CLI uses to perform complex tasks such as compilation and test running, according to a provided configuration. Architect is a shell that runs a &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; (defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;) with a given &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;.</source>
          <target state="translated">提供された構成に従って、CLIがコンパイルやテスト実行などの複雑なタスクを実行するために使用するツール。アーキテクトは、特定の&lt;a href=&quot;glossary#target&quot;&gt;ターゲット構成で&lt;/a&gt;&lt;a href=&quot;glossary#builder&quot;&gt;ビルダー&lt;/a&gt;（&lt;a href=&quot;glossary#npm-package&quot;&gt;npmパッケージで&lt;/a&gt;定義）を実行するシェルです。</target>
        </trans-unit>
        <trans-unit id="a41ed1a3c20f3b032ce6bf341b07b3ff788f0e6c" translate="yes" xml:space="preserve">
          <source>The top level of the root project folder for a collection contains configuration files, a &lt;code&gt;node_modules&lt;/code&gt; folder, and a &lt;code&gt;src/&lt;/code&gt; folder. The &lt;code&gt;src/&lt;/code&gt; folder contains subfolders for named schematics in the collection, and a schema, &lt;code&gt;collection.json&lt;/code&gt;, which describes the collected schematics. Each schematic is created with a name, description, and factory function.</source>
          <target state="translated">コレクションのルートプロジェクトフォルダーの最上位には、構成ファイル、 &lt;code&gt;node_modules&lt;/code&gt; フォルダー、および &lt;code&gt;src/&lt;/code&gt; フォルダーが含まれます。 &lt;code&gt;src/&lt;/code&gt; 名前のコレクション内の回路図、およびスキーマ用のサブフォルダを含むフォルダ &lt;code&gt;collection.json&lt;/code&gt; 収集回路図を説明し、。各回路図は、名前、説明、およびファクトリー関数を使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="3f8c3bac42ac19a6aeec66ddbb65426c9445956b" translate="yes" xml:space="preserve">
          <source>The top paragraph is in the DOM. The bottom, disused paragraph is not; in its place is a comment about &quot;bindings&quot; (more about that &lt;a href=&quot;structural-directives#asterisk&quot;&gt;later&lt;/a&gt;).</source>
          <target state="translated">一番上の段落はDOMにあります。下の、使われなくなった段落はそうではありません。その代わりに、「バインディング」に関するコメントがあります（これについては&lt;a href=&quot;structural-directives#asterisk&quot;&gt;後で&lt;/a&gt;詳しく説明します）。</target>
        </trans-unit>
        <trans-unit id="00501897b059678bdf07befdac7616fe6a03505a" translate="yes" xml:space="preserve">
          <source>The top-level directive for this control if present, otherwise null.</source>
          <target state="translated">存在する場合はこのコントロールのトップレベル指令、そうでない場合はnull。</target>
        </trans-unit>
        <trans-unit id="aa4c65514687fcb647bd478319e8cd7a18baae19" translate="yes" xml:space="preserve">
          <source>The top-level directive for this group if present, otherwise null.</source>
          <target state="translated">存在する場合はこのグループのトップレベル指令、そうでない場合はnull。</target>
        </trans-unit>
        <trans-unit id="7f59f229151882c691c9c4dbd40db2c8cf35cf79" translate="yes" xml:space="preserve">
          <source>The top-level form directive for the control.</source>
          <target state="translated">コントロールのトップレベルのフォームディレクティブ。</target>
        </trans-unit>
        <trans-unit id="aa96b6dd3b9c83ecd894feff632ccdcd8ce5055e" translate="yes" xml:space="preserve">
          <source>The total run time of the animation, in milliseconds.</source>
          <target state="translated">アニメーションの総実行時間(ミリ秒単位)。</target>
        </trans-unit>
        <trans-unit id="14aee0513a51a8b6574f4395af2536721cbd0b69" translate="yes" xml:space="preserve">
          <source>The transition from the server-rendered app to the client app happens quickly on a development machine, but you should always test your apps in real-world scenarios.</source>
          <target state="translated">サーバーレンダリングされたアプリからクライアントアプリへの移行は、開発マシン上ですぐに行われますが、アプリは常に実世界のシナリオでテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="2b2c02e508d78290b606f3c251693a83d5dd77d7" translate="yes" xml:space="preserve">
          <source>The translation file format.</source>
          <target state="translated">翻訳ファイルの形式です。</target>
        </trans-unit>
        <trans-unit id="a01d8be6610dc7e8ff92abc660e7a063be84ddba" translate="yes" xml:space="preserve">
          <source>The translation file.</source>
          <target state="translated">翻訳ファイルです。</target>
        </trans-unit>
        <trans-unit id="566718f0b46f66443c966e183abd9ebc1557a5c4" translate="yes" xml:space="preserve">
          <source>The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</source>
          <target state="translated">あるバージョンのJavaScriptを別のバージョンに変換する翻訳プロセス。例えば、ES2015を古いES5にダウンレベルするなど。</target>
        </trans-unit>
        <trans-unit id="349bc86574d83717c24e66cc03a3095ffbe80534" translate="yes" xml:space="preserve">
          <source>The translator may also need to know the meaning or intent of the text message within this particular app context, in order to translate it the same way as other text with the same meaning. Start the &lt;code&gt;i18n&lt;/code&gt; attribute value with the &lt;em&gt;meaning&lt;/em&gt; and separate it from the &lt;em&gt;description&lt;/em&gt; with the &lt;code&gt;|&lt;/code&gt; character: &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">翻訳者は、同じ意味を持つ他のテキストと同じ方法で翻訳するために、この特定のアプリコンテキスト内のテキストメッセージの意味または意図を知る必要がある場合もあります。 &lt;code&gt;i18n&lt;/code&gt; 属性値を&lt;em&gt;意味で&lt;/em&gt;開始し、&lt;em&gt;説明&lt;/em&gt;とは &lt;code&gt;|&lt;/code&gt; で区切ります。文字： &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2fd93ca59b690739d63aaf50fa1d89967d7ba17a" translate="yes" xml:space="preserve">
          <source>The translator may also need to know the meaning or intent of the text message within this particular app context.</source>
          <target state="translated">翻訳者は、この特定のアプリのコンテキスト内でのテキストメッセージの意味や意図を知る必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="c27e3942c3254b8b0f806e9fac192f3f58c19b32" translate="yes" xml:space="preserve">
          <source>The tree-shaking problem arises when a component is used as an injection token. There are two cases when that can happen.</source>
          <target state="translated">コンポーネントがインジェクショントークンとして使用されている場合、ツリーシェイクの問題が発生します。このような場合には2つのケースがあります。</target>
        </trans-unit>
        <trans-unit id="6cbae59239e49c4968e3b2022136d5ac4b8dd7eb" translate="yes" xml:space="preserve">
          <source>The trigger name, used to associate it with an element. Unique within the component.</source>
          <target state="translated">要素に関連付けるために使用されるトリガー名。コンポーネント内では一意です。</target>
        </trans-unit>
        <trans-unit id="d35231c4743a554b907dbe3ec68e6d1c03c3e04e" translate="yes" xml:space="preserve">
          <source>The tutorial walks you through the following steps.</source>
          <target state="translated">チュートリアルでは、以下の手順を説明します。</target>
        </trans-unit>
        <trans-unit id="599b7384324d0565d53e3693b7036e321e474501" translate="yes" xml:space="preserve">
          <source>The tutorial's &quot;in-memory web API&quot; module, a demo and development tool, intercepts all HTTP calls and simulates the behavior of a remote data server. In practice, you would remove that module and register your web API middleware on the server here.</source>
          <target state="translated">チュートリアルの「インメモリWeb API」モジュールは、デモと開発ツールで、すべてのHTTPコールをインターセプトし、リモートデータサーバーの動作をシミュレートします。実際には、そのモジュールを削除して、Web API ミドルウェアをここのサーバーに登録します。</target>
        </trans-unit>
        <trans-unit id="29c54a0ff6d263b78d0ad5a2dc608fb24dc18c92" translate="yes" xml:space="preserve">
          <source>The tutorial's &lt;code&gt;HeroService&lt;/code&gt; and &lt;code&gt;HeroSearchService&lt;/code&gt; delegate to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; module to fetch application data. These services send requests to &lt;em&gt;relative&lt;/em&gt; URLs such as &lt;code&gt;api/heroes&lt;/code&gt;. In a Universal app, HTTP URLs must be &lt;em&gt;absolute&lt;/em&gt; (for example, &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt;). This means you need to change your services to make requests with absolute URLs when running on the server and with relative URLs when running in the browser.</source>
          <target state="translated">チュートリアルの &lt;code&gt;HeroService&lt;/code&gt; と &lt;code&gt;HeroSearchService&lt;/code&gt; は、アプリケーションデータを取得するためにAngular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; モジュールに委任します。これらのサービスは、 &lt;code&gt;api/heroes&lt;/code&gt; などの&lt;em&gt;相対&lt;/em&gt; URLにリクエストを送信します。ユニバーサルアプリでは、HTTP URLは&lt;em&gt;絶対で&lt;/em&gt;なければなりません（例 &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt; ）。つまり、サーバーで実行する場合は絶対URLを使用し、ブラウザーで実行する場合は相対URLを使用して要求を行うようにサービスを変更する必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="305db64f25ecd1b1da157b5b8c651450a07346de" translate="yes" xml:space="preserve">
          <source>The tutorial's &lt;code&gt;HeroService&lt;/code&gt; and &lt;code&gt;HeroSearchService&lt;/code&gt; delegate to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; module to fetch application data. These services send requests to &lt;em&gt;relative&lt;/em&gt; URLs such as &lt;code&gt;api/heroes&lt;/code&gt;. In a server-side rendered app, HTTP URLs must be &lt;em&gt;absolute&lt;/em&gt; (for example, &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt;). This means that the URLs must be somehow converted to absolute when running on the server and be left relative when running in the browser.</source>
          <target state="translated">チュートリアルの &lt;code&gt;HeroService&lt;/code&gt; と &lt;code&gt;HeroSearchService&lt;/code&gt; 角度にデリゲート &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; モジュールは、アプリケーション・データをフェッチします。これらのサービスは、 &lt;code&gt;api/heroes&lt;/code&gt; などの&lt;em&gt;相対&lt;/em&gt;URLにリクエストを送信します。サーバー側でレンダリングされたアプリでは、HTTP URLは&lt;em&gt;絶対で&lt;/em&gt;なければなりません（たとえば、 &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt; ）。つまり、サーバーで実行する場合はURLを絶対に変換し、ブラウザーで実行する場合は相対URLのままにする必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="67bfdaa72e9953f6fcebc0bfa93857733007382e" translate="yes" xml:space="preserve">
          <source>The two asterisks, &lt;code&gt;**&lt;/code&gt;, indicate to Angular that this &lt;code&gt;routes&lt;/code&gt; definition is a wildcard route. For the component property, you can define any component in your application. Common choices include an application-specific &lt;code&gt;PageNotFoundComponent&lt;/code&gt;, which you can define to &lt;a href=&quot;router#404-page-how-to&quot;&gt;display a 404 page&lt;/a&gt; to your users; or a redirect to your application's main component. A wildcard route is the last route because it matches any URL. For more detail on why order matters for routes, see &lt;a href=&quot;router#route-order&quot;&gt;Route order&lt;/a&gt;.</source>
          <target state="translated">2つのアスタリスク &lt;code&gt;**&lt;/code&gt; は、この &lt;code&gt;routes&lt;/code&gt; 定義がワイルドカードルートであることをAngularに示します。コンポーネントプロパティでは、アプリケーションで任意のコンポーネントを定義できます。一般的な選択肢には、ユーザーに&lt;a href=&quot;router#404-page-how-to&quot;&gt;404ページ&lt;/a&gt;を表示するように定義できるアプリケーション固有の &lt;code&gt;PageNotFoundComponent&lt;/code&gt; が含まれます。または、アプリケーションのメインコンポーネントへのリダイレクト。ワイルドカードルートは、任意のURLと一致するため、最後のルートです。ルートの順序が重要である理由の詳細については、&lt;a href=&quot;router#route-order&quot;&gt;ルートの順序を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="afc05ea2dd3769a2464a65395b0f8fc1046a9410" translate="yes" xml:space="preserve">
          <source>The two build systems support different things, and even where they support the same things, they do those things differently. This means that the TypeScript source can result in different JavaScript code in a built library than it would in a built application.</source>
          <target state="translated">2つのビルドシステムは異なるものをサポートしており、同じものをサポートしていても、それらは異なる方法で実行されます。これは、TypeScript のソースが、ビルドされたアプリケーションとは異なる JavaScript コードを生成する可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="3d6bab88072a051c166e9e7471ac45c3b0a3264e" translate="yes" xml:space="preserve">
          <source>The two components will have a parent/child relationship. The parent &lt;code&gt;HeroesComponent&lt;/code&gt; will control the child &lt;code&gt;HeroDetailComponent&lt;/code&gt; by sending it a new hero to display whenever the user selects a hero from the list.</source>
          <target state="translated">2つのコンポーネントには親子関係があります。親 &lt;code&gt;HeroesComponent&lt;/code&gt; は、子制御する &lt;code&gt;HeroDetailComponent&lt;/code&gt; をユーザがリストからヒーローを選択したときにディスプレイにそれを新しいヒーローを送信することで。</target>
        </trans-unit>
        <trans-unit id="5afe858ace0f507f6e00dcce82eccd00126d0833" translate="yes" xml:space="preserve">
          <source>The two types of validators are passed in separately as the second and third arg respectively, or together as part of an options object.</source>
          <target state="translated">2 種類のバリデータは、それぞれ 2 番目と 3 番目の引数として別々に渡されるか、オプションオブジェクトの一部として一緒に渡されます。</target>
        </trans-unit>
        <trans-unit id="b4abd53c0253243e985b7e065cc9f874147ab4e8" translate="yes" xml:space="preserve">
          <source>The two update events, &lt;code&gt;available&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt;, are &lt;code&gt;Observable&lt;/code&gt; properties of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">2つの更新イベント、 &lt;code&gt;available&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt; 、ある &lt;code&gt;Observable&lt;/code&gt; の性質 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="681906e7bceda4d76618f4d591a5d4a3561cc264" translate="yes" xml:space="preserve">
          <source>The two update events, &lt;code&gt;available&lt;/code&gt; and &lt;code&gt;activated&lt;/code&gt;, are &lt;code&gt;Observable&lt;/code&gt; properties of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">2つの更新イベント、 &lt;code&gt;available&lt;/code&gt; と &lt;code&gt;activated&lt;/code&gt; 、ある &lt;code&gt;Observable&lt;/code&gt; の性質 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1dbdba75ae5eb9e9bc50a6b2bc270a30ddeeee80" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is a great convenience compared to separate property and event bindings. It would be convenient to use two-way binding with HTML form elements like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, no native HTML element follows the &lt;code&gt;x&lt;/code&gt; value and &lt;code&gt;xChange&lt;/code&gt; event pattern.</source>
          <target state="translated">双方向バインディング構文は、個別のプロパティバインディングとイベントバインディングに比べて非常に便利です。 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; などのHTMLフォーム要素で双方向バインディングを使用すると便利です。ただし、 &lt;code&gt;x&lt;/code&gt; 値と &lt;code&gt;xChange&lt;/code&gt; イベントパターンに従うネイティブHTML要素はありません。</target>
        </trans-unit>
        <trans-unit id="552f44eabf3bee5b16dbbe6d805c5e4727da9fe7" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is really just syntactic sugar for a &lt;em&gt;property&lt;/em&gt; binding and an &lt;em&gt;event&lt;/em&gt; binding. Angular desugars the &lt;code&gt;SizerComponent&lt;/code&gt; binding into this:</source>
          <target state="translated">双方向バインディング構文は、実際には&lt;em&gt;プロパティ&lt;/em&gt;バインディングと&lt;em&gt;イベント&lt;/em&gt;バインディングの単なるシンタックスシュガーです。Angularは &lt;code&gt;SizerComponent&lt;/code&gt; をこれにバインドします：</target>
        </trans-unit>
        <trans-unit id="76cff48315da67038bca27defef7706ac9ac1f06" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is shorthand for a combination of property binding and event binding. The &lt;code&gt;SizerComponent&lt;/code&gt; binding as separate property binding and event binding is as follows.</source>
          <target state="translated">双方向バインディング構文は、プロパティバインディングとイベントバインディングの組み合わせの省略形です。個別のプロパティバインディングおよびイベントバインディングとしての &lt;code&gt;SizerComponent&lt;/code&gt; バインディングは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="194f581853ac13d61cf24a5c84685394267efc75" translate="yes" xml:space="preserve">
          <source>The type checker also throws an error if it can't determine whether a variable will be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; at runtime. You tell the type checker not to throw an error by applying the postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-null assertion operator, !&lt;/a&gt;.</source>
          <target state="translated">型チェッカーは、実行時に変数が &lt;code&gt;null&lt;/code&gt; になるか &lt;code&gt;undefined&lt;/code&gt; なるかを判別できない場合にも、エラーをスローします。接尾辞&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;のnull以外のアサーション演算子を&lt;/a&gt;適用して、タイプチェッカーにエラーをスローしないように指示します。。</target>
        </trans-unit>
        <trans-unit id="6513ae7688b62a5255ebc4d625abc9be33526ee7" translate="yes" xml:space="preserve">
          <source>The type checker also throws an error if it can't determine whether a variable will be &lt;code&gt;null&lt;/code&gt; or undefined at runtime. You tell the type checker not to throw an error by applying the postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-null assertion operator, !&lt;/a&gt;.</source>
          <target state="translated">型チェッカーは、実行時に変数が &lt;code&gt;null&lt;/code&gt; か未定義かを判別できない場合もエラーをスローします。型チェックにエラーをスローしないように指示するには、後置の&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;非nullアサーション演算子！&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d949ded92c64bb6e37f7798775515186c690205d" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;#parent&lt;/code&gt; now indicates that it may be null. See &lt;a href=&quot;https://github.com/angular/angular/pull/32671&quot;&gt;PR 32671&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;#parent&lt;/code&gt; のタイプは、nullの可能性があることを示しています。&lt;a href=&quot;https://github.com/angular/angular/pull/32671&quot;&gt;PR32671を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81dce0b481d7ac34dd874fc96a0c29f5d10a16ae" translate="yes" xml:space="preserve">
          <source>The type of budget. One of:</source>
          <target state="translated">予算の種類です。のうちの一つ。</target>
        </trans-unit>
        <trans-unit id="c15292902555eb7a2059d3f203806ac34a995f12" translate="yes" xml:space="preserve">
          <source>The type of component the factory will create.</source>
          <target state="translated">ファクトリーが作成するコンポーネントの種類。</target>
        </trans-unit>
        <trans-unit id="7c0884d61dcbf36812f4f429d57a3fd536285ae5" translate="yes" xml:space="preserve">
          <source>The type of numeric value to be formatted (such as &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">書式設定する数値のタイプ（ &lt;code&gt;Decimal&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="4ca1c6ea29abaecf66afa18e36661807315423ea" translate="yes" xml:space="preserve">
          <source>The type of numeric value to be formatted (such as &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;Currency&lt;/code&gt;.)</source>
          <target state="translated">フォーマットする数値のタイプ（ &lt;code&gt;Decimal&lt;/code&gt; や &lt;code&gt;Currency&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="1914de4f10fd251ed62f048b8948f40fc99532fb" translate="yes" xml:space="preserve">
          <source>The type of object that &lt;a href=&quot;viewchildren&quot;&gt;&lt;code&gt;ViewChildren&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;contentchildren&quot;&gt;&lt;code&gt;ContentChildren&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;querylist&quot;&gt;&lt;code&gt;QueryList&lt;/code&gt;&lt;/a&gt; provide.</source>
          <target state="translated">&lt;a href=&quot;viewchildren&quot;&gt; &lt;code&gt;ViewChildren&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;contentchildren&quot;&gt; &lt;code&gt;ContentChildren&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;querylist&quot;&gt; &lt;code&gt;QueryList&lt;/code&gt; が&lt;/a&gt;提供するオブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="2cee06caf5b085e8040bc4dd74a44cf2669ac0d4" translate="yes" xml:space="preserve">
          <source>The type of this component (as created by a &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; class).</source>
          <target state="translated">このコンポーネントのタイプ（ &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; クラスによって作成されたもの）。</target>
        </trans-unit>
        <trans-unit id="351e662a9168935a10d637a721b52c3db93d0b18" translate="yes" xml:space="preserve">
          <source>The type parameter, &lt;code&gt;T&lt;/code&gt;, is the kind of metadata you'd pass to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">型パラメーター &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレーターに渡す種類のメタデータです。</target>
        </trans-unit>
        <trans-unit id="92e0731044a01c861010ac8dd3364de0bab42484" translate="yes" xml:space="preserve">
          <source>The type parameter, while optional, conveys the dependency's type to developers and tooling. The token description is another developer aid.</source>
          <target state="translated">type パラメタはオプションですが、依存関係の型を開発者やツールに伝えます。トークンの説明は、もう一つの開発者の助けになります。</target>
        </trans-unit>
        <trans-unit id="3be642a3bc4d6290043093ef6c6b0e31a8237f3c" translate="yes" xml:space="preserve">
          <source>The types of the &lt;code&gt;observe&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; options are &lt;em&gt;string unions&lt;/em&gt;, rather than plain strings.</source>
          <target state="translated">&lt;code&gt;observe&lt;/code&gt; オプションと &lt;code&gt;response&lt;/code&gt; オプションのタイプは、単純な文字列ではなく、&lt;em&gt;文字列ユニオン&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="fdab28b804a5bc2df8ed953cd182dcd879bebcd0" translate="yes" xml:space="preserve">
          <source>The underlying native element or &lt;code&gt;null&lt;/code&gt; if direct access to native elements is not supported (e.g. when the application runs in a web worker).</source>
          <target state="translated">基になるネイティブ要素、またはネイティブ要素への直接アクセスがサポートされていない場合（アプリケーションがWebワーカーで実行されている場合など）は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9fb3d4a522a7d59fc653358ee450cd39cd54d77" translate="yes" xml:space="preserve">
          <source>The unit test files themselves also need to be switched to Angular when their production counterparts are switched. The specs for the checkmark pipe are probably the most straightforward, as the pipe has no dependencies:</source>
          <target state="translated">ユニットテストファイル自体も、本番環境のものが切り替わったときにAngularに切り替わる必要があります。チェックマークパイプの仕様は、パイプには依存関係がないので、おそらく最も簡単なものでしょう。</target>
        </trans-unit>
        <trans-unit id="7b843cdeff59d7337d09dffec8474c659f368f17" translate="yes" xml:space="preserve">
          <source>The unit test for the phone service is a bit more involved. You need to switch from the mocked-out AngularJS &lt;code&gt;$httpBackend&lt;/code&gt; to a mocked-out Angular Http backend.</source>
          <target state="translated">電話サービスの単体テストはもう少し複雑です。 &lt;code&gt;$httpBackend&lt;/code&gt; されたAngularJS $ httpBackendから偽造されたAngular Httpバックエンドに切り替える必要があります。</target>
        </trans-unit>
        <trans-unit id="789acab94f4da6bd1b31fd8d53475bbe9758d87a" translate="yes" xml:space="preserve">
          <source>The updated &lt;code&gt;HeroesRoutingModule&lt;/code&gt; looks like this:</source>
          <target state="translated">更新された &lt;code&gt;HeroesRoutingModule&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="987de19a86a67d115685949783bff6fddad8b8ee" translate="yes" xml:space="preserve">
          <source>The upgrade NgModule.</source>
          <target state="translated">アップグレードされたNgModule。</target>
        </trans-unit>
        <trans-unit id="d44b088804cbf01923d7400df118887612abd201" translate="yes" xml:space="preserve">
          <source>The url from which this snapshot was created</source>
          <target state="translated">このスナップショットが作成されたURL</target>
        </trans-unit>
        <trans-unit id="0ee83b79b718d1a4ec36d1b3d58ebe726ac3e494" translate="yes" xml:space="preserve">
          <source>The url serialization strategy is customizable. You can make all URLs case insensitive by providing a custom UrlSerializer.</source>
          <target state="translated">URL のシリアライズ戦略はカスタマイズ可能です。カスタムの UrlSerializer を提供することで、すべての URL の大文字小文字を区別しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="ad97874a0022a010e0155677ec6967027c4314b9" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;name&lt;/code&gt; attributes for validation and form-element change tracking.</source>
          <target state="translated">検証とフォーム要素の変更の追跡のための &lt;code&gt;name&lt;/code&gt; 属性の使用。</target>
        </trans-unit>
        <trans-unit id="9154043e44b5d932b8c61e6a2f25ebf4ef5aea92" translate="yes" xml:space="preserve">
          <source>The user calls the &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; method, which updates the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">ユーザーは &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; メソッドを呼び出し、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 値を更新します。</target>
        </trans-unit>
        <trans-unit id="0a5976d96dbc10bd55988a4a489b75fc9937bde4" translate="yes" xml:space="preserve">
          <source>The user can select a hero and see that hero's details.</source>
          <target state="translated">ユーザーはヒーローを選択して、そのヒーローの詳細を見ることができます。</target>
        </trans-unit>
        <trans-unit id="b99c1b741aee49f63e964f6109422ed732ed9ff3" translate="yes" xml:space="preserve">
          <source>The user closes the app and does not open it for a while.</source>
          <target state="translated">ユーザーはアプリを閉じてしばらく開かない。</target>
        </trans-unit>
        <trans-unit id="aa661a59e3356526e5cd2452506236a954f28c3e" translate="yes" xml:space="preserve">
          <source>The user needs a way to open the popup. Open the &lt;code&gt;AppComponent&lt;/code&gt; and add a &quot;Contact&quot; link.</source>
          <target state="translated">ユーザーはポップアップを開く方法が必要です。 &lt;code&gt;AppComponent&lt;/code&gt; を開き、「連絡先」リンクを追加します。</target>
        </trans-unit>
        <trans-unit id="ec95381196d078fadc8f2f14dd8fb15e40e96c16" translate="yes" xml:space="preserve">
          <source>The user opens the app again. The service worker serves the latest version known to it at this point, namely the old version (&lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main.&amp;lt;main-hash-1&amp;gt;.js&lt;/code&gt;).</source>
          <target state="translated">ユーザーがアプリを再度開きます。Service Workerは、この時点で認識されている最新バージョン、つまり古いバージョン（ &lt;code&gt;index.html&lt;/code&gt; および &lt;code&gt;main.&amp;lt;main-hash-1&amp;gt;.js&lt;/code&gt; ）を提供します。</target>
        </trans-unit>
        <trans-unit id="369264e6d1f498d1106a6d3877d3ee5e43560ae5" translate="yes" xml:space="preserve">
          <source>The user should be able to get to these details in three ways.</source>
          <target state="translated">ユーザーがこれらの詳細にたどり着けるようにするには、次の3つの方法が必要です。</target>
        </trans-unit>
        <trans-unit id="bbafb9f9e9d3caf33087f60e1818944be5dd3d9b" translate="yes" xml:space="preserve">
          <source>The user should be able to navigate back and forth between the &lt;code&gt;DashboardComponent&lt;/code&gt; and the &lt;code&gt;HeroesComponent&lt;/code&gt; by clicking links in the navigation area near the top of the page.</source>
          <target state="translated">ユーザーは、ページ上部のナビゲーション領域にあるリンクをクリックして、 &lt;code&gt;DashboardComponent&lt;/code&gt; と &lt;code&gt;HeroesComponent&lt;/code&gt; の間を行き来できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e9cc50a2572132b6fe866bbf0976206cd31bec89" translate="yes" xml:space="preserve">
          <source>The user should be able to submit this form after filling it in. The &lt;em&gt;Submit&lt;/em&gt; button at the bottom of the form does nothing on its own, but it will trigger a form submit because of its type (&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;).</source>
          <target state="translated">ユーザーはフォームに入力した後、このフォームを送信できるはずです。フォームの下部にある[ &lt;em&gt;送信&lt;/em&gt; ]ボタン自体は何もしませんが、そのタイプ（ &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; ）が原因でフォーム送信をトリガーします。</target>
        </trans-unit>
        <trans-unit id="8e8ef51761e17807182420e3debbce24091d7fd9" translate="yes" xml:space="preserve">
          <source>The user should be able to submit this form after filling it in. The &lt;strong&gt;Submit&lt;/strong&gt; button at the bottom of the form does nothing on its own, but it does trigger a form-submit event because of its type (&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;). To respond to this event, take the following steps.</source>
          <target state="translated">ユーザーは、このフォームに入力した後、このフォームを送信できるはずです。フォームの下部にある[&lt;strong&gt;送信&lt;/strong&gt;]ボタンは、それ自体では何もしませんが、タイプ（ &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; ）のためにフォーム送信イベントをトリガーします。このイベントに対応するには、次の手順を実行します。</target>
        </trans-unit>
        <trans-unit id="01ba075c2899372b1eb9a9b167514bce8549789e" translate="yes" xml:space="preserve">
          <source>The user types &lt;em&gt;Blue&lt;/em&gt; into the input element.</source>
          <target state="translated">ユーザーがinput要素に&lt;em&gt;Blue&lt;/em&gt;を入力します。</target>
        </trans-unit>
        <trans-unit id="746db581b79b8e44db4102f1f4a9027db5fb21fd" translate="yes" xml:space="preserve">
          <source>The user types a value into the input element, in this case the favorite color &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">ユーザーが入力要素に値を入力します。この場合、好きな色&lt;em&gt;Blue&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="0f5eade11b7a8a4872382f56342ccc7dae30caf1" translate="yes" xml:space="preserve">
          <source>The validation status of the control. There are four possible validation status values:</source>
          <target state="translated">コントロールの検証ステータス。バリデーションステータスの値には4つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="98b77f9877456963068b672348f174d66942c7cb" translate="yes" xml:space="preserve">
          <source>The validation uses the TypeScript type checker and the options supplied to the TypeScript compiler to control how detailed the type validation is. For example, if the &lt;code&gt;strictTypeChecks&lt;/code&gt; is specified, the error &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; is reported as well as the above error message.</source>
          <target state="translated">検証では、TypeScript型チェッカーとTypeScriptコンパイラに提供されるオプションを使用して、型検証の詳細度を制御します。たとえば、 &lt;code&gt;strictTypeChecks&lt;/code&gt; が指定されている場合、エラー &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; と上記のエラーメッセージが報告されます。</target>
        </trans-unit>
        <trans-unit id="a629e0949c3e58ce213f6f6bd6ae68dbb3fa29cd" translate="yes" xml:space="preserve">
          <source>The validator code is as follows.</source>
          <target state="translated">バリデータコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0d21ce6b8675f7d9e43afcf309b4fddb296bc7b1" translate="yes" xml:space="preserve">
          <source>The validator code is as follows:</source>
          <target state="translated">バリデータコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c9d7dbc5ca49f1ab98a4c94cd5b17358e1f32e71" translate="yes" xml:space="preserve">
          <source>The validator retrieves the child controls by calling the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/forms/abstractcontrol#get&quot;&gt;get&lt;/a&gt; method, then compares the values of the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt; controls.</source>
          <target state="translated">バリデータが呼び出すことにより、子コントロールを取得し &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; さん&lt;a href=&quot;../api/forms/abstractcontrol#get&quot;&gt;のget&lt;/a&gt;メソッドを、その後の値を比較 &lt;code&gt;name&lt;/code&gt; や &lt;code&gt;alterEgo&lt;/code&gt; コントロールを。</target>
        </trans-unit>
        <trans-unit id="e446494ebae458b5aea2681dfd535005a9fb5001" translate="yes" xml:space="preserve">
          <source>The value</source>
          <target state="translated">値</target>
        </trans-unit>
        <trans-unit id="b3ab44397f0e829c1263e8d41c48f13f570826c7" translate="yes" xml:space="preserve">
          <source>The value accessor for the control</source>
          <target state="translated">コントロールの値アクセッサ</target>
        </trans-unit>
        <trans-unit id="516bd69561122628d42ad25e8281d2c0a9abe779" translate="yes" xml:space="preserve">
          <source>The value for each day of the week, based on the &lt;code&gt;en-US&lt;/code&gt; locale</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; ロケールに基づく、各曜日の値</target>
        </trans-unit>
        <trans-unit id="c2748ca458055ddfd5db76827b1b28c8b741c19c" translate="yes" xml:space="preserve">
          <source>The value is the statement to execute when the event occurs. If the statement evaluates to &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;preventDefault&lt;/code&gt; is applied on the DOM event. A handler method can refer to the &lt;code&gt;$event&lt;/code&gt; local variable.</source>
          <target state="translated">値は、イベントが発生したときに実行するステートメントです。ステートメントが &lt;code&gt;false&lt;/code&gt; と評価された場合、DOMイベントに &lt;code&gt;preventDefault&lt;/code&gt; が適用されます。ハンドラーメソッドは、 &lt;code&gt;$event&lt;/code&gt; ローカル変数を参照できます。</target>
        </trans-unit>
        <trans-unit id="a8273c4bd416c41f6f045c126981755bb55c2fa6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; has the &lt;code&gt;any&lt;/code&gt; type. Later you'll encounter the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; and it too has the &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">値 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; が持つ &lt;code&gt;any&lt;/code&gt; 種類の。後で &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; に遭遇し、それも &lt;code&gt;any&lt;/code&gt; タイプです。</target>
        </trans-unit>
        <trans-unit id="0ad903e2fa7af996e920297f63f7b7748e6d5872" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;settingOrProject&lt;/em&gt; is one of the following.</source>
          <target state="translated">&lt;em&gt;settingOrProject&lt;/em&gt;の値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="74c4007c0c9568fe1d9f263c845a7b9cdffe9674" translate="yes" xml:space="preserve">
          <source>The value of a &lt;em&gt;value provider&lt;/em&gt; must be defined before you specify it here. The title string literal is immediately available. The &lt;code&gt;someHero&lt;/code&gt; variable in this example was set earlier in the file as shown below. You can't use a variable whose value will be defined later.</source>
          <target state="translated">&lt;em&gt;値プロバイダー&lt;/em&gt;の値は、ここで指定する前に定義する必要があります。タイトル文字列リテラルはすぐに利用できます。この例の &lt;code&gt;someHero&lt;/code&gt; 変数は、以下に示すように、ファイル内で以前に設定されています。値が後で定義される変数は使用できません。</target>
        </trans-unit>
        <trans-unit id="c638e133e6a98cc0fc2d797245f610b6e500f4d6" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;enableIvy&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt; by default, as of version 9.</source>
          <target state="translated">バージョン9 &lt;code&gt;enableIvy&lt;/code&gt; 、enableIvyフラグの値はデフォルトで &lt;code&gt;true&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="9e40077c9021d6667f8d32f6871c8f00bc068d9d" translate="yes" xml:space="preserve">
          <source>The value of the iterable expression, which can be used as a &lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;template input variable&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;テンプレート入力変数&lt;/a&gt;として使用できる反復可能な式の値。</target>
        </trans-unit>
        <trans-unit id="e5b7782babd6cd47ebb1077395fdc52934d8acaf" translate="yes" xml:space="preserve">
          <source>The value or values to delete for the given header.</source>
          <target state="translated">指定されたヘッダに対して削除する値または値。</target>
        </trans-unit>
        <trans-unit id="c3a47c38e67f33789b5fcdb66f3ebef0b8ae5f17" translate="yes" xml:space="preserve">
          <source>The value or values to set or overide for the given header.</source>
          <target state="translated">指定されたヘッダーに設定する値またはオーバーライドする値。</target>
        </trans-unit>
        <trans-unit id="9ea1a4ae4b9c004c5d2afcb14b6504f978c0f7ea" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
          <target state="translated">追加する値。</target>
        </trans-unit>
        <trans-unit id="2b048ad41afe70b72be36c6e88e6bdc321667a94" translate="yes" xml:space="preserve">
          <source>The value to emit.</source>
          <target state="translated">排出する値です。</target>
        </trans-unit>
        <trans-unit id="1d37da7064bd8c9a2adb3a8365e6b179578a33bb" translate="yes" xml:space="preserve">
          <source>The value to inject.</source>
          <target state="translated">注入する値です。</target>
        </trans-unit>
        <trans-unit id="965b65af75152cd8483b194aca89f3d4a3563d3b" translate="yes" xml:space="preserve">
          <source>The value to remove, if provided.</source>
          <target state="translated">提供されている場合は、削除する値を指定します。</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="translated">値です。</target>
        </trans-unit>
        <trans-unit id="752b8837b88dbea5e1b07283811801b832bbf900" translate="yes" xml:space="preserve">
          <source>The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only boolean, number, string, null and non-class objects will be serialized and deserialzied in a non-lossy manner.</source>
          <target state="translated">ストア内の値はJSON.stringify/JSON.parseを使用してシリアライズ/デシリアライズされます。そのため、boolean,number,string,null,non-classのオブジェクトのみが、ロスのない方法でシリアライズ/デシリアライズされます。</target>
        </trans-unit>
        <trans-unit id="52ff44818e20f7220d3cd6a6457d439574feaba5" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;heroForm&lt;/code&gt; is now a reference to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive that governs the form as a whole.</source>
          <target state="translated">変数 &lt;code&gt;heroForm&lt;/code&gt; は、フォーム全体を管理する &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブへの参照になりました。</target>
        </trans-unit>
        <trans-unit id="54da2a6d6e9f9a935b31b81218374530af583f38" translate="yes" xml:space="preserve">
          <source>The verbose form shows that &lt;code&gt;ref2&lt;/code&gt; is outside the parent template.</source>
          <target state="translated">詳細形式は、 &lt;code&gt;ref2&lt;/code&gt; が親テンプレートの外部にあることを示しています。</target>
        </trans-unit>
        <trans-unit id="3f524c06d92d1f81ab05583d4d275b72aa86fd3a" translate="yes" xml:space="preserve">
          <source>The version identifier of the app is determined by the contents of all resources, and it changes if any of them change. In practice, the version is determined by the contents of the &lt;code&gt;ngsw.json&lt;/code&gt; file, which includes hashes for all known content. If any of the cached files change, the file's hash will change in &lt;code&gt;ngsw.json&lt;/code&gt;, causing the Angular service worker to treat the active set of files as a new version.</source>
          <target state="translated">アプリのバージョン識別子は、すべてのリソースの内容によって決定され、それらのいずれかが変更されると変更されます。実際には、バージョンは、既知のすべてのコンテンツのハッシュを含む &lt;code&gt;ngsw.json&lt;/code&gt; ファイルのコンテンツによって決定されます。キャッシュされたファイルのいずれかが変更されると、ファイルのハッシュが &lt;code&gt;ngsw.json&lt;/code&gt; で変更され、Angular Service Workerはアクティブなファイルのセットを新しいバージョンとして扱います。</target>
        </trans-unit>
        <trans-unit id="61010f814fd314444171513bbb7090fb2e7c56e3" translate="yes" xml:space="preserve">
          <source>The version number is incremented based on the level of change included in the release.</source>
          <target state="translated">バージョン番号は、リリースに含まれる変更のレベルに応じてインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="a40aa756483f3a5f523498855f5257b57156b5a8" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the initial project.</source>
          <target state="translated">初期プロジェクトで使用するビューカプセル化戦略。</target>
        </trans-unit>
        <trans-unit id="fa51a23f655a6d3d42ddb64f7327a8e642728256" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new app.</source>
          <target state="translated">新アプリで使用するビューカプセル化戦略。</target>
        </trans-unit>
        <trans-unit id="fcf377037a7d42bc71c7f002d89b4f46b0d68cfa" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new component.</source>
          <target state="translated">新しいコンポーネントで使用するビューのカプセル化戦略。</target>
        </trans-unit>
        <trans-unit id="3f5b538e2927dd6de153329e296a74a421bc0c36" translate="yes" xml:space="preserve">
          <source>The view encapsulation type, which determines how styles are applied to DOM elements. One of</source>
          <target state="translated">スタイルがDOM要素にどのように適用されるかを決定する、ビューのカプセル化タイプ。のいずれかを指定します。</target>
        </trans-unit>
        <trans-unit id="52604a8e00ae2362f799cae913f8150372948692" translate="yes" xml:space="preserve">
          <source>The view hierarchy doesn't imply a component hierarchy. Views that are embedded in the context of a particular hierarchy can be host views of other components. Those components can be in the same NgModule as the hosting component, or belong to other NgModules.</source>
          <target state="translated">ビューの階層はコンポーネントの階層を意味しません。特定の階層のコンテキストに埋め込まれたビューは、他のコンポーネントのホストビューになることができます。これらのコンポーネントは、ホスト・コンポーネントと同じNgModule内にあったり、他のNgModuleに属していたりします。</target>
        </trans-unit>
        <trans-unit id="c7838a7b8c734a7282cb30df6d8616064238194b" translate="yes" xml:space="preserve">
          <source>The view to insert.</source>
          <target state="translated">挿入するビュー。</target>
        </trans-unit>
        <trans-unit id="4ea024c3fe94500d702337f77198fe17d570e08e" translate="yes" xml:space="preserve">
          <source>The view to move.</source>
          <target state="translated">移動する景色。</target>
        </trans-unit>
        <trans-unit id="64ae54575a804f27c02ce687200e683460668cdb" translate="yes" xml:space="preserve">
          <source>The view to query.</source>
          <target state="translated">クエリするビュー。</target>
        </trans-unit>
        <trans-unit id="c984239cd56798261fc1dbd922778058b32b773d" translate="yes" xml:space="preserve">
          <source>The view-to-model diagram shows how data flows when an input field's value is changed from the view through the following steps.</source>
          <target state="translated">ビューからモデルへの図は、入力フィールドの値がビューから変更されたときのデータの流れを、以下の手順で示しています。</target>
        </trans-unit>
        <trans-unit id="f7eca5f51435a85c65dffa7d0a3287d518cfc6d9" translate="yes" xml:space="preserve">
          <source>The virtual file system is represented by a &lt;code&gt;Tree&lt;/code&gt;. The &lt;code&gt;Tree&lt;/code&gt; data structure contains a &lt;em&gt;base&lt;/em&gt; (a set of files that already exists) and a &lt;em&gt;staging area&lt;/em&gt; (a list of changes to be applied to the base). When making modifications, you don't actually change the base, but add those modifications to the staging area.</source>
          <target state="translated">仮想ファイルシステムは &lt;code&gt;Tree&lt;/code&gt; 表されます。 &lt;code&gt;Tree&lt;/code&gt; データ構造が含まれている&lt;em&gt;ベース&lt;/em&gt;（すでに存在するファイルのセット）と&lt;em&gt;ステージング領域&lt;/em&gt;（ベースに適用される変更のリスト）。変更を行う場合、実際にはベースを変更するのではなく、それらの変更をステージング領域に追加します。</target>
        </trans-unit>
        <trans-unit id="2cefd7f9cff91ac8ee2cb82756abed3d99ad82ad" translate="yes" xml:space="preserve">
          <source>The web is used by a wide variety of people, including those who have visual or motor impairments. A variety of assistive technologies are available that make it much easier for these groups to interact with web-based software applications. In addition, designing an application to be more accessible generally improves the user experience for all users.</source>
          <target state="translated">ウェブは、視覚や運動に障害のある人を含め、さまざまな人が利用しています。このような人たちがウェブベースのソフトウェアアプリケーションとのやりとりをより簡単にできるように、さまざまな支援技術が利用できます。さらに、アプリケーションをよりアクセスしやすく設計することは、一般的にすべてのユーザーのユーザー体験を向上させます。</target>
        </trans-unit>
        <trans-unit id="0870b1ddd7a401e28edca7748851260cf0d812b1" translate="yes" xml:space="preserve">
          <source>The web server must distinguish &lt;em&gt;app page requests&lt;/em&gt; from other kinds of requests.</source>
          <target state="translated">ウェブサーバーは&lt;em&gt;アプリページのリクエスト&lt;/em&gt;を他の種類のリクエストと区別する必要があります。</target>
        </trans-unit>
        <trans-unit id="3bcd56955050ccb3584a4da36608073e9ca82456" translate="yes" xml:space="preserve">
          <source>The wildcard state &lt;code&gt;*&lt;/code&gt; matches to &lt;em&gt;any&lt;/em&gt; state, including &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">ワイルドカードの状態 &lt;code&gt;*&lt;/code&gt; は、 &lt;code&gt;void&lt;/code&gt; を含む&lt;em&gt;すべての&lt;/em&gt;状態に一致します。</target>
        </trans-unit>
        <trans-unit id="cdfa623802e57793c0a1db6ff9d61453c796514c" translate="yes" xml:space="preserve">
          <source>The word &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; in the interpolation binding, right after the pipe operator ( | ), activates the built-in &lt;code&gt;UppercasePipe&lt;/code&gt;.</source>
          <target state="translated">パイプ演算子（|）の直後の補間バインディングの &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; という単語は、組み込みの &lt;code&gt;UppercasePipe&lt;/code&gt; をアクティブにします。</target>
        </trans-unit>
        <trans-unit id="b02e653c1a608596d35a7fd022b60a7182b55381" translate="yes" xml:space="preserve">
          <source>The wording of each guideline indicates how strong the recommendation is.</source>
          <target state="translated">各ガイドラインの文言は、推奨の強さを示しています。</target>
        </trans-unit>
        <trans-unit id="7c860c7e7f5c46dabbf52c5dc7a52a91bc246694" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you add Angular assets to the &lt;code&gt;angular.module&lt;/code&gt; property. In Angular, you create one or more classes adorned with an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator that describes Angular assets in metadata. The differences blossom from there.</source>
          <target state="translated">それらの詳細は、アーキテクチャと実装でかなり異なります。AngularJSでは、Angularアセットを &lt;code&gt;angular.module&lt;/code&gt; プロパティに追加します。Angularでは、メタデータ内のAngularアセットを記述する &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターで飾られた1つ以上のクラスを作成します。そこから違いが芽生えます。</target>
        </trans-unit>
        <trans-unit id="1c9f03dfa8dacad02e2c3ca38cbf5ee7fdadd4d0" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you create a module by specifying its name and dependencies with &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module()&lt;/a&gt;. Then you can add assets using its various methods. In Angular, you create a class adorned with an &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; decorator that describes assets in metadata.</source>
          <target state="translated">それらの詳細は、アーキテクチャと実装でかなり異なります。AngularJSでは、モジュールの名前と依存関係を&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module（）&lt;/a&gt;で指定してモジュールを作成します。次に、さまざまな方法を使用してアセットを追加できます。Angularでは、メタデータでアセットを記述する&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;デコレーターで飾られたクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="4a746b75626a8bf1b8d141962d550672ee26a9a0" translate="yes" xml:space="preserve">
          <source>Then Angular calls the &lt;code&gt;ngAfterViewInit&lt;/code&gt; lifecycle hook at which time it is &lt;em&gt;too late&lt;/em&gt; to update the parent view's display of the countdown seconds. Angular's unidirectional data flow rule prevents updating the parent view's in the same cycle. The app has to &lt;em&gt;wait one turn&lt;/em&gt; before it can display the seconds.</source>
          <target state="translated">次に、Angularが &lt;code&gt;ngAfterViewInit&lt;/code&gt; ライフサイクルフックを呼び出します。この時点では、親ビューのカウントダウン秒の表示を更新するには&lt;em&gt;遅すぎ&lt;/em&gt;ます。Angularの単方向データフロールールは、同じサイクルで親ビューを更新することを防ぎます。アプリは、秒を表示する前に&lt;em&gt;1ターン待機&lt;/em&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="dbecf897d73ac2b6641e82fba7920890079f1124" translate="yes" xml:space="preserve">
          <source>Then add &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata's &lt;code&gt;imports&lt;/code&gt; array, which contains a list of external modules that the app needs.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;imports&lt;/code&gt; 配列に追加します。この配列には、アプリが必要とする外部モジュールのリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="302c6ab52d600acc4553bea66d084dd5f7f37330" translate="yes" xml:space="preserve">
          <source>Then add a &lt;em&gt;parameterized&lt;/em&gt; route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches the path pattern to the &lt;em&gt;hero detail&lt;/em&gt; view.</source>
          <target state="translated">次に、パスのパターンを&lt;em&gt;ヒーローの詳細&lt;/em&gt;ビューに一致させる&lt;em&gt;パラメーター化された&lt;/em&gt;ルートを &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 配列に追加し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7087a31795c1cc6622e1648ea10337e6e7796752" translate="yes" xml:space="preserve">
          <source>Then add it to the &lt;code&gt;providers&lt;/code&gt; array of the testing module configuration:</source>
          <target state="translated">次に、テストモジュール構成の &lt;code&gt;providers&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="476c63ff60da4bb61e86cb5f4efd206fa03aa9dc" translate="yes" xml:space="preserve">
          <source>Then add the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; and continue with the setup of the &lt;em&gt;service-under-test&lt;/em&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; に追加して、&lt;em&gt;テスト対象サービス&lt;/em&gt;のセットアップを続行します。</target>
        </trans-unit>
        <trans-unit id="1bfa821c841240ffbf8adf699d29a6b8346ac678" translate="yes" xml:space="preserve">
          <source>Then add two event handlers that respond when the mouse enters or leaves, each adorned by the &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">次に、マウスが出入りしたときに応答する2つのイベントハンドラーを追加します。各イベントハンドラーは、 &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; デコレーターによって装飾されています。</target>
        </trans-unit>
        <trans-unit id="2077cb3e1b43eb4d0aa0bdfb4e87ddd6fe05d012" translate="yes" xml:space="preserve">
          <source>Then change &lt;code&gt;main-aot.ts&lt;/code&gt; to bootstrap the &lt;code&gt;AppComponentFactory&lt;/code&gt; that was generated by the AOT compiler:</source>
          <target state="translated">次に、 &lt;code&gt;main-aot.ts&lt;/code&gt; を変更して、AOTコンパイラーによって生成されたAppComponentFactoryをブートストラップし &lt;code&gt;AppComponentFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f98a3b01b00f3cdc0645e1bb016df36002ccc41" translate="yes" xml:space="preserve">
          <source>Then create some HTML to try it.</source>
          <target state="translated">そして、試しにHTMLを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="ed0c20efaf787e9c5968245911ff8d07f8f0da7a" translate="yes" xml:space="preserve">
          <source>Then declare them in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration next to the components, directives, and pipes that need to be real.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 存在する必要があるコンポーネント、ディレクティブ、パイプの横のTestBed構成でそれらを宣言します。</target>
        </trans-unit>
        <trans-unit id="e412dc563abd459ce251cf7cfccd9f863136e63b" translate="yes" xml:space="preserve">
          <source>Then each test invokes &lt;code&gt;setup()&lt;/code&gt; in its first line, before continuing with steps that manipulate the test subject and assert expectations.</source>
          <target state="translated">次に、各テストは最初の行で &lt;code&gt;setup()&lt;/code&gt; を呼び出してから、テスト対象を操作して期待を表明するステップを続行します。</target>
        </trans-unit>
        <trans-unit id="150a9555cd5004b3999517db04d6f79faab05564" translate="yes" xml:space="preserve">
          <source>Then exercise the component class, remembering to call the &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hook methods&lt;/a&gt; as Angular does when running the app.</source>
          <target state="translated">次に、コンポーネントクラスを実行し、アプリの実行時にAngularが行うように&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフックメソッド&lt;/a&gt;を呼び出すことを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="fb4a68d7b2f52dce99079de606d30ebaa5bb531f" translate="yes" xml:space="preserve">
          <source>Then go to &lt;code&gt;localhost:4200&lt;/code&gt; where you should see &amp;ldquo;app works!&amp;rdquo; and three buttons.</source>
          <target state="translated">次に &lt;code&gt;localhost:4200&lt;/code&gt; に移動します。「app works！」が表示されます。と3つのボタン。</target>
        </trans-unit>
        <trans-unit id="a49419a5b8645cd07645760c057756d92e18c23d" translate="yes" xml:space="preserve">
          <source>Then go to &lt;code&gt;localhost:4200&lt;/code&gt; where you should see &amp;ldquo;customer-app&amp;rdquo; and three buttons.</source>
          <target state="translated">次に、 &lt;code&gt;localhost:4200&lt;/code&gt; に移動すると、「customer-app」と3つのボタンが表示されます。</target>
        </trans-unit>
        <trans-unit id="38933987a79b6e0405d4682b79b28629cbf06cda" translate="yes" xml:space="preserve">
          <source>Then import and add it to the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;providers array&lt;/em&gt; like this:</source>
          <target state="translated">次に、それをインポートして、 &lt;code&gt;AppModule&lt;/code&gt; ようにAppModule &lt;em&gt;プロバイダー配列に&lt;/em&gt;追加し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ba51c703735b0a9ca10a1f38c791fa66ebf4dc99" translate="yes" xml:space="preserve">
          <source>Then inject &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; and use it to bootstrap the top level &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS module&lt;/a&gt; in the &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; をAngular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; に注入し、それを使用して &lt;code&gt;ngDoBootstrap()&lt;/code&gt; メソッドでトップレベルの&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJSモジュール&lt;/a&gt;をブートストラップします。</target>
        </trans-unit>
        <trans-unit id="ea80e24f31be172808e0a76630ab02df1fbba4cf" translate="yes" xml:space="preserve">
          <source>Then inject it inside a test by calling &lt;code&gt;TestBed.get()&lt;/code&gt; with the service class as the argument.</source>
          <target state="translated">次に、サービスクラスを引数として &lt;code&gt;TestBed.get()&lt;/code&gt; を呼び出して、テスト内に挿入します。</target>
        </trans-unit>
        <trans-unit id="dee306a2d35591d51fe2402e82a0ca9f0820f749" translate="yes" xml:space="preserve">
          <source>Then inject it inside a test by calling &lt;code&gt;TestBed.inject()&lt;/code&gt; with the service class as the argument.</source>
          <target state="translated">次に、サービスクラスを引数として &lt;code&gt;TestBed.inject()&lt;/code&gt; を呼び出して、テスト内に挿入します。</target>
        </trans-unit>
        <trans-unit id="ed47e3226a89095f74e2f4a490e662cccb0ebbc0" translate="yes" xml:space="preserve">
          <source>Then modify the &lt;code&gt;app.component.ts&lt;/code&gt; file by changing the template and the body of the component.</source>
          <target state="translated">次に、テンプレートとコンポーネントの本体を変更して、 &lt;code&gt;app.component.ts&lt;/code&gt; ファイルを変更します。</target>
        </trans-unit>
        <trans-unit id="8f2ea7f19a02db5f1bb037406ad378d2b4d2753b" translate="yes" xml:space="preserve">
          <source>Then provide and inject &lt;em&gt;both the&lt;/em&gt;&lt;strong&gt;component&lt;/strong&gt;&lt;em&gt;and the service&lt;/em&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration.</source>
          <target state="translated">次に&lt;em&gt;、&lt;/em&gt;&lt;strong&gt;コンポーネント&lt;/strong&gt;&lt;em&gt;とサービスの&lt;/em&gt;&lt;em&gt;両方を&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成に&lt;em&gt;提供&lt;/em&gt;して挿入します。</target>
        </trans-unit>
        <trans-unit id="6575d9ffd1443fafb383b5f99065fc07d42c1e8a" translate="yes" xml:space="preserve">
          <source>Then provide the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; in the main module:</source>
          <target state="translated">次に、メインモジュールで &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="5cd36815d6513b0d19bf87503dfe0afab93f9fa9" translate="yes" xml:space="preserve">
          <source>Then reload with &lt;code&gt;Cmd+r&lt;/code&gt; or &lt;code&gt;Ctrl+r&lt;/code&gt;, depending on your platform.</source>
          <target state="translated">次に、プラットフォームに応じて、 &lt;code&gt;Cmd+r&lt;/code&gt; または &lt;code&gt;Ctrl+r&lt;/code&gt; でリロードします。</target>
        </trans-unit>
        <trans-unit id="62acde2949df74c80c6b969effb470f5543854f7" translate="yes" xml:space="preserve">
          <source>Then the following link &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; will generate the link &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt;.</source>
          <target state="translated">そして、次のリンク &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; リンクを生成します &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf4cba0cf8f8221ce918d56c4b25cb5bf60574f6" translate="yes" xml:space="preserve">
          <source>Then use &lt;code&gt;relativeTo&lt;/code&gt; in your navigation method. After the link parameters array, which here contains &lt;code&gt;items&lt;/code&gt;, add an object with the &lt;code&gt;relativeTo&lt;/code&gt; property set to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, which is &lt;code&gt;this.route&lt;/code&gt;.</source>
          <target state="translated">次に、ナビゲーションメソッドで &lt;code&gt;relativeTo&lt;/code&gt; を使用します。ここに &lt;code&gt;items&lt;/code&gt; が含まれているリンクパラメータ配列の後に、 &lt;code&gt;relativeTo&lt;/code&gt; プロパティが &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; に設定されたオブジェクトを追加します。これは &lt;code&gt;this.route&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="31a24e38017cc0ca331b2c164af11448fb71f88f" translate="yes" xml:space="preserve">
          <source>Then use the service inside your component by injecting it in the component constructor using its class as a type annotation:</source>
          <target state="translated">そして、そのクラスを型アノテーションとして使用して、コンポーネントのコンストラクタでサービスを注入して、コンポーネント内でサービスを使用します。</target>
        </trans-unit>
        <trans-unit id="3d28664e3228d12b67d0ad4e11b39b8bfa234399" translate="yes" xml:space="preserve">
          <source>Then you can assert that the quote element displays the expected text.</source>
          <target state="translated">そうすれば、quote要素が期待されるテキストを表示していることを主張することができます。</target>
        </trans-unit>
        <trans-unit id="fb5aa1a656847347c6ad33e809979b893a2a0af1" translate="yes" xml:space="preserve">
          <source>Then you can use the &quot;upgraded&quot; AngularJS service by injecting it into an Angular component or service.</source>
          <target state="translated">そして、「アップグレードされた」AngularJSサービスをAngularコンポーネントやサービスに注入することで利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="7235d5f78eb3fc75c9de23a894249dff7395ce21" translate="yes" xml:space="preserve">
          <source>Then you create a child component (B) that defines its own, &lt;em&gt;specialized&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt; and &lt;code&gt;EngineService&lt;/code&gt; that have special capabilities suitable for whatever is going on in component (B).</source>
          <target state="translated">次に、子コンポーネント（B）を作成します。子コンポーネント（B）は、コンポーネント（B）で &lt;code&gt;EngineService&lt;/code&gt; れていることすべてに適した特別な機能を持つ、 &lt;code&gt;CarService&lt;/code&gt; およびEngineServiceの独自の&lt;em&gt;専用&lt;/em&gt;プロバイダーを定義します。</target>
        </trans-unit>
        <trans-unit id="13b7250037e2791c30d8b2b60220889c166804a2" translate="yes" xml:space="preserve">
          <source>Then you inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;HeroListComponent&lt;/code&gt; コンストラクターに挿入します。</target>
        </trans-unit>
        <trans-unit id="06b87cc1eeb739adae3341e69733b9a6c335c899" translate="yes" xml:space="preserve">
          <source>Then you should define an Angular provider to be included in your &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; property.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; プロパティに含めるAngularプロバイダーを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="3996f4d02c86b0214c6856fbd020c552536ef23e" translate="yes" xml:space="preserve">
          <source>Then you tell the &lt;code&gt;HeroService&lt;/code&gt; to fetch the hero with that &lt;code&gt;id&lt;/code&gt; and return the result of the &lt;code&gt;HeroService&lt;/code&gt; request.</source>
          <target state="translated">次に、その &lt;code&gt;id&lt;/code&gt; を持つヒーローをフェッチして、 &lt;code&gt;HeroService&lt;/code&gt; リクエストの結果を返すように &lt;code&gt;HeroService&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="ed06e960c3c34ee183cdb9c0a6a2a5d5f20a03f6" translate="yes" xml:space="preserve">
          <source>Then, another animation can be called when the current animation finishes. For example, the button goes from the &lt;code&gt;inProgress&lt;/code&gt; state to the &lt;code&gt;closed&lt;/code&gt; state when the API call is completed.</source>
          <target state="translated">次に、現在のアニメーションが終了したときに別のアニメーションを呼び出すことができます。たとえば、API呼び出しが完了すると、ボタンは &lt;code&gt;inProgress&lt;/code&gt; 状態から &lt;code&gt;closed&lt;/code&gt; 状態になります。</target>
        </trans-unit>
        <trans-unit id="6309056a807e88260ec1b8e1f7ee99de74f63bb1" translate="yes" xml:space="preserve">
          <source>Then, the code contains an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator with the &lt;code&gt;childItem&lt;/code&gt; property so data can flow into it.</source>
          <target state="translated">次に、コードに &lt;code&gt;childItem&lt;/code&gt; プロパティを持つ &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレータが含まれているため、データをそこに流すことができます。</target>
        </trans-unit>
        <trans-unit id="edf82d0382f477967edce3fb6b12681334c96dc8" translate="yes" xml:space="preserve">
          <source>Then, when some component injects &lt;code&gt;UserService&lt;/code&gt;, Angular finds it in the app root injector, and delivers the app-wide singleton service. No problem.</source>
          <target state="translated">次に、一部のコンポーネントが &lt;code&gt;UserService&lt;/code&gt; を挿入すると、Angularはそれをアプリのルートインジェクターで見つけ、アプリ全体のシングルトンサービスを配信します。問題ない。</target>
        </trans-unit>
        <trans-unit id="c3a0ceb7d76985503f10a062c39d4ecc9f73b6e5" translate="yes" xml:space="preserve">
          <source>Then, when you need that file&amp;rsquo;s code in another file, you import it like this:</source>
          <target state="translated">次に、そのファイルのコードが別のファイルに必要な場合は、次のようにインポートします。</target>
        </trans-unit>
        <trans-unit id="7f94783b2fdbdd4b5788239abe980a7f9c2a0feb" translate="yes" xml:space="preserve">
          <source>Then, you change into your library directory to build the schematic</source>
          <target state="translated">次に、ライブラリディレクトリに移動して回路図を作成します。</target>
        </trans-unit>
        <trans-unit id="b558f2a5f6c20368ac31efe8ab04dc45d807c8b6" translate="yes" xml:space="preserve">
          <source>There are &lt;em&gt;important differences&lt;/em&gt; in the way the router treats these &lt;em&gt;child routes&lt;/em&gt;.</source>
          <target state="translated">ルータがこれらの&lt;em&gt;子ルートを&lt;/em&gt;処理する方法には&lt;em&gt;重要な違い&lt;/em&gt;があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="566ab24996dda55d07b696f9fcb91995338b7d7a" translate="yes" xml:space="preserve">
          <source>There are a few cases where you give a component an attribute, such as when you want to augment a built-in element. For example, &lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt; uses this technique with &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt;. However, you wouldn't use this technique on a custom element.</source>
          <target state="translated">組み込み要素を拡張したい場合など、コンポーネントに属性を与える場合がいくつかあります。たとえば、&lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;マテリアルデザインで&lt;/a&gt;は &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt; でこの手法を使用します。ただし、この手法はカスタム要素では使用しません。</target>
        </trans-unit>
        <trans-unit id="4a44db3593849baa6fd286f1a9dad3ee4be9f41f" translate="yes" xml:space="preserve">
          <source>There are a few exceptional observables where this is not necessary. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; observables are among the exceptions.</source>
          <target state="translated">これが不要な例外的なオブザーバブルがいくつかあります。 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; の観測は、例外の一つです。</target>
        </trans-unit>
        <trans-unit id="1e9c60f04e3a15c6ff01e79a5018c059fb20d209" translate="yes" xml:space="preserve">
          <source>There are a few limited reasons why the Angular service worker might change the version of a running app. Some of them are error conditions:</source>
          <target state="translated">Angularサービスワーカーが実行中のアプリのバージョンを変更する理由はいくつかあります。そのうちのいくつかはエラー状態です。</target>
        </trans-unit>
        <trans-unit id="a6013a4fe41dc5c7411d2f89c39f1e20616a17ba" translate="yes" xml:space="preserve">
          <source>There are a few options if you want to get correct types for your custom elements. Let's assume you create a &lt;code&gt;my-dialog&lt;/code&gt; custom element based on the following component:</source>
          <target state="translated">カスタム要素の正しいタイプを取得したい場合、いくつかのオプションがあります。次のコンポーネントに基づいて &lt;code&gt;my-dialog&lt;/code&gt; カスタム要素を作成するとします。</target>
        </trans-unit>
        <trans-unit id="3191a1618b8faa99c49daa031fba849003a13bd3" translate="yes" xml:space="preserve">
          <source>There are a few rules in particular that will make it much easier to do &lt;em&gt;an incremental upgrade&lt;/em&gt; using the Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; module:</source>
          <target state="translated">特に、Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; モジュールを使用し&lt;em&gt;たインクリメンタルアップグレード&lt;/em&gt;を非常に簡単にするいくつかのルールがあります。</target>
        </trans-unit>
        <trans-unit id="a01d9115f3a3ad52c673da81193da8c683b0a1c6" translate="yes" xml:space="preserve">
          <source>There are a few things to note, though:</source>
          <target state="translated">注意すべき点はいくつかありますが。</target>
        </trans-unit>
        <trans-unit id="cdc057156f4a0afc834e3e15f4b4be9942560eb6" translate="yes" xml:space="preserve">
          <source>There are a number of options for modifying the default search behavior, using &lt;em&gt;parameter decorators&lt;/em&gt; on the service-valued parameters of a class constructor.</source>
          <target state="translated">クラスコンストラクターのサービス値パラメーターで&lt;em&gt;パラメーターデコレーター&lt;/em&gt;を使用して、デフォルトの検索動作を変更するためのオプションがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="c676ec6b692f6df001e20a544ca9a4ac7cc35255" translate="yes" xml:space="preserve">
          <source>There are also completions within elements. Any elements you have as a component selector will show up in the completion list.</source>
          <target state="translated">要素内にも補完があります。コンポーネントセレクタとして使用している要素は、補完リストに表示されます。</target>
        </trans-unit>
        <trans-unit id="2b0041e80379dba90a5c135457752493c4e52ac4" translate="yes" xml:space="preserve">
          <source>There are configuration files for both the &lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript test runner&lt;/a&gt; and &lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt; end-to-end testing tool, which you must adjust to start Chrome without sandboxing.</source>
          <target state="translated">&lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScriptテストランナー&lt;/a&gt;と&lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractorの&lt;/a&gt;エンドツーエンドのテストツールの両方に設定ファイルがあり、サンドボックスなしでChromeを起動するように調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f70e6e9da25ad1b098bbc6719f6c5877729d762" translate="yes" xml:space="preserve">
          <source>There are five general categories of feature modules which tend to fall into the following groups:</source>
          <target state="translated">機能モジュールには5つの一般的なカテゴリがあり、以下のグループに分類される傾向があります。</target>
        </trans-unit>
        <trans-unit id="f083c43f33d22558e0080c2eef9a154aecda0827" translate="yes" xml:space="preserve">
          <source>There are important differences in the way the router treats child routes.</source>
          <target state="translated">ルーターの子ルートの扱い方には重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="9d24499582f9d74be4e55dfd292e78d548d73a51" translate="yes" xml:space="preserve">
          <source>There are many more interceptors in the complete sample code.</source>
          <target state="translated">完全なサンプルコードの中には、他にもたくさんのインターセプターがあります。</target>
        </trans-unit>
        <trans-unit id="a08951de0f1de6bd2f6e60bba79ba111ed7ae1d7" translate="yes" xml:space="preserve">
          <source>There are many resources to complement the Angular docs. Mozilla's MDN docs include both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt; introductions. &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript's docs&lt;/a&gt; include a 5-minute tutorial. Various online course platforms, such as &lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt; and &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, also cover web development basics.</source>
          <target state="translated">Angularのドキュメントを補完する多くのリソースがあります。MozillaのMDNドキュメントには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScriptの&lt;/a&gt;両方の紹介が含まれています。&lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScriptのドキュメント&lt;/a&gt;には5分間のチュートリアルが含まれています。&lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt;や&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;などのさまざまなオンラインコースプラットフォームも、Web開発の基本をカバーしています。</target>
        </trans-unit>
        <trans-unit id="66ad0af28f7ac3d95ccbf0739cccfa8af77155a9" translate="yes" xml:space="preserve">
          <source>There are many ways to structure AngularJS applications. When you begin to upgrade these applications to Angular, some will turn out to be much more easy to work with than others. There are a few key techniques and patterns that you can apply to future proof apps even before you begin the migration.</source>
          <target state="translated">AngularJSアプリケーションを構造化する方法はたくさんあります。これらのアプリケーションをAngularにアップグレードし始めると、他のアプリケーションよりもはるかに作業しやすいことが判明するものもあります。移行を始める前でも、将来のプルーフアプリに適用できる重要なテクニックやパターンがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="00d98f0576741a1e108297fca91f90e751881e55" translate="yes" xml:space="preserve">
          <source>There are multiple ways to prevent this:</source>
          <target state="translated">防ぐ方法は複数あります。</target>
        </trans-unit>
        <trans-unit id="ff870a40c32b15241e0dc290ffe99e696ec7e316" translate="yes" xml:space="preserve">
          <source>There are new requirements for the Tour of Heroes app:</source>
          <target state="translated">Tour of Heroesアプリには新しい要件があります。</target>
        </trans-unit>
        <trans-unit id="b7c35a18e43689374a55ffc6988124f5f7c095f9" translate="yes" xml:space="preserve">
          <source>There are no easy answers to these questions. Prohibiting multiple structural directives makes them moot. There's an easy solution for this use case: put the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on a container element that wraps the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; element. One or both elements can be an &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;ng-container&lt;/code&gt;&lt;/a&gt; so you don't have to introduce extra levels of HTML.</source>
          <target state="translated">これらの質問に対する簡単な答えはありません。複数の構造的指令を禁止すると、それらは悲観的になります。このユースケースのための簡単な解決策があります：置く &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を包むコンテナ要素に &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 要素を。1つまたは両方の要素を&lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;ng-container&lt;/code&gt; に&lt;/a&gt;することができるため、追加のレベルのHTMLを導入する必要はありません。</target>
        </trans-unit>
        <trans-unit id="93b4d15b36f576847810650de967eae2da32c1f5" translate="yes" xml:space="preserve">
          <source>There are no parameters for this parent route so you're done with it.</source>
          <target state="translated">この親ルートにはパラメータがないので、これで終了です。</target>
        </trans-unit>
        <trans-unit id="08a0080e437b247c15d7d516f9eb6d35b78c311f" translate="yes" xml:space="preserve">
          <source>There are no parameters for this parent route.</source>
          <target state="translated">この親ルートにはパラメータはありません。</target>
        </trans-unit>
        <trans-unit id="fcf8d135851b80ffbe87dcd35d86d4ad22ed02e6" translate="yes" xml:space="preserve">
          <source>There are no parameters.</source>
          <target state="translated">パラメータはありません。</target>
        </trans-unit>
        <trans-unit id="347acdbd61105fadd07872f8156b46696cb3b692" translate="yes" xml:space="preserve">
          <source>There are only two changes. The &lt;code&gt;template&lt;/code&gt; is simply the new element tag identified by the component's &lt;code&gt;selector&lt;/code&gt; property. This displays the hero form when the application component is loaded. Don't forget to remove the &lt;code&gt;name&lt;/code&gt; field from the class body as well.</source>
          <target state="translated">変更点は2つだけです。 &lt;code&gt;template&lt;/code&gt; 単にコンポーネントので識別される新しい要素タグである &lt;code&gt;selector&lt;/code&gt; プロパティ。これにより、アプリケーションコンポーネントが読み込まれたときにヒーローフォームが表示されます。クラス本体からも &lt;code&gt;name&lt;/code&gt; フィールドを削除することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="159f34be61579ceb6ae8d16ef7ee7eeb786eef01" translate="yes" xml:space="preserve">
          <source>There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. Although Circle CI and Travis CI are paid services, they are provided free for open source projects. You can create a public project on GitHub and add these services without paying. Contributions to the Angular repo are automatically run through a whole suite of Circle CI tests.</source>
          <target state="translated">Circle CIやTravis CIなどの有料のCIサービスがありますが、Jenkinsなどを使って無料で自分でホストすることもできます。Circle CIやTravis CIは有料サービスですが、オープンソースプロジェクトでは無料で提供されています。GitHubで公開プロジェクトを作成して、これらのサービスを無課金で追加することができます。Angularレポへの貢献は、Circle CIのテスト一式を通して自動的に実行されます。</target>
        </trans-unit>
        <trans-unit id="879cd324a70c4c96acf893c99d3b9dc84ee024ff" translate="yes" xml:space="preserve">
          <source>There are several examples over the next few sections.</source>
          <target state="translated">次のいくつかのセクションに渡って、いくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="2cf39c6658c13b371aa454d5575113ab2b716d55" translate="yes" xml:space="preserve">
          <source>There are several notable changes here:</source>
          <target state="translated">ここにはいくつかの注目すべき変化があります。</target>
        </trans-unit>
        <trans-unit id="b3ecb535a2ce87ce6aa9dd8adc9feb06a8b4ddfd" translate="yes" xml:space="preserve">
          <source>There are several ways to add styles to a component:</source>
          <target state="translated">コンポーネントにスタイルを追加する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="1b266b00929430b0621b4b49767764faeeeeab85" translate="yes" xml:space="preserve">
          <source>There are three categories of directive:</source>
          <target state="translated">ディレクティブには3つのカテゴリーがあります。</target>
        </trans-unit>
        <trans-unit id="38597e951fad51067690768d9f762544a13ddd71" translate="yes" xml:space="preserve">
          <source>There are three different &lt;em&gt;urgency levels&lt;/em&gt; used to style the alerts based on the severity or importance of the content.</source>
          <target state="translated">コンテンツの重大度または重要度に基づいてアラートのスタイルを設定するために使用される3つの異なる&lt;em&gt;緊急度レベル&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="24e9e91fde41867db08419b1f04c4cbe517ddcb5" translate="yes" xml:space="preserve">
          <source>There are three fundamental building blocks to creating a route.</source>
          <target state="translated">ルートを作成するための基本的な構成要素は3つあります。</target>
        </trans-unit>
        <trans-unit id="e76077d148cfb3df1507661f67b5067f5ff2d5a6" translate="yes" xml:space="preserve">
          <source>There are three kinds of directives in Angular:</source>
          <target state="translated">Angularには3種類のディレクティブがあります。</target>
        </trans-unit>
        <trans-unit id="25e737b2092b55d9eb5f239e56b9516518d5f446" translate="yes" xml:space="preserve">
          <source>There are three main reasons to create a Universal version of your app.</source>
          <target state="translated">アプリのユニバーサル版を作成する主な理由は3つあります。</target>
        </trans-unit>
        <trans-unit id="a4f700c6eaa2262317c0d957e29675f3621c94d0" translate="yes" xml:space="preserve">
          <source>There are three main steps to setting up a lazy-loaded feature module:</source>
          <target state="translated">怠惰な機能モジュールを設定するには、主に3つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="165573f1548a8f99cacaaa3440578c4519f99108" translate="yes" xml:space="preserve">
          <source>There are three phases of AOT compilation.</source>
          <target state="translated">AOTのコンパイルには3つのフェーズがあります。</target>
        </trans-unit>
        <trans-unit id="ab9b96e090b917419a7b4b07d60725578c370783" translate="yes" xml:space="preserve">
          <source>There are three significant differences from &lt;code&gt;getHeroes()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;getHeroes()&lt;/code&gt; との大きな違いは3つあります。</target>
        </trans-unit>
        <trans-unit id="6700c051353ace657c742055b93c035122544edb" translate="yes" xml:space="preserve">
          <source>There are three steps to using form controls.</source>
          <target state="translated">フォームコントロールを使うには3つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="9dd01b7be4e57b57b1627f79224ce07af7d2d99e" translate="yes" xml:space="preserve">
          <source>There are three supported input types.</source>
          <target state="translated">サポートされている入力タイプは3つあります。</target>
        </trans-unit>
        <trans-unit id="f5034306f8346e549a24ab826839194a108f3818" translate="yes" xml:space="preserve">
          <source>There are two categories of pipes: &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;impure&lt;/em&gt;. Pipes are pure by default. Every pipe you've seen so far has been pure. You make a pipe impure by setting its pure flag to false. You could make the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; impure like this:</source>
          <target state="translated">パイプには、&lt;em&gt;純粋&lt;/em&gt;と&lt;em&gt;不純の&lt;/em&gt; 2つのカテゴリがあります。パイプはデフォルトで純粋です。これまでに見たすべてのパイプは純粋です。純粋なフラグをfalseに設定して、パイプを不純にします。あなたは &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; をこのように不純にすることができます：</target>
        </trans-unit>
        <trans-unit id="c0d0261683ac70f77d2cb64caaaa6be2e633442f" translate="yes" xml:space="preserve">
          <source>There are two changes:</source>
          <target state="translated">変更点は2つあります。</target>
        </trans-unit>
        <trans-unit id="0757ae2710d35ffd65d63c8e4408b8f8b222e032" translate="yes" xml:space="preserve">
          <source>There are two important things to keep in mind when using Web Workers in Angular projects:</source>
          <target state="translated">AngularプロジェクトでWeb Workerを使用する際には、2つの重要な注意点があります。</target>
        </trans-unit>
        <trans-unit id="ed5307db9a7ed9a50bdf282cc464f6252ca2c8b1" translate="yes" xml:space="preserve">
          <source>There are two independent frameworks running in a single application, each framework treats the other as a black box.</source>
          <target state="translated">1つのアプリケーションで動作する2つの独立したフレームワークがあり、それぞれのフレームワークは他のフレームワークをブラックボックスとして扱います。</target>
        </trans-unit>
        <trans-unit id="ad6b0f208e637f748bf275b29c341ba579e95709" translate="yes" xml:space="preserve">
          <source>There are two injector hierarchies in Angular:</source>
          <target state="translated">Angularには2つのインジェクター階層があります。</target>
        </trans-unit>
        <trans-unit id="43178632845a92d22afa35ca0676f6eb7a1f7062" translate="yes" xml:space="preserve">
          <source>There are two kinds of generated attributes:</source>
          <target state="translated">生成される属性は2種類あります。</target>
        </trans-unit>
        <trans-unit id="ae6efc4f0655823ca7f29eb7bf3eefe1625ce1e5" translate="yes" xml:space="preserve">
          <source>There are two main kinds of entry components:</source>
          <target state="translated">エントリーコンポーネントには大きく分けて2種類あります。</target>
        </trans-unit>
        <trans-unit id="36eef38b4cd7460eba454e934ddc760e1199d5bf" translate="yes" xml:space="preserve">
          <source>There are two main steps to setting up a lazy-loaded feature module:</source>
          <target state="translated">怠惰な機能モジュールを設定するには、主に2つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="550828cc689d902dc2704d305cf15fafb615c2b6" translate="yes" xml:space="preserve">
          <source>There are two more injectors above &lt;code&gt;root&lt;/code&gt;, an additional &lt;code&gt;ModuleInjector&lt;/code&gt; and &lt;code&gt;NullInjector()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; の上にはさらに2つのインジェクターがあり、追加の &lt;code&gt;ModuleInjector&lt;/code&gt; と &lt;code&gt;NullInjector()&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="ec82505f597f4541fee947d1b90b7670a8bfe1fc" translate="yes" xml:space="preserve">
          <source>There are two other kinds of Angular directives, described extensively elsewhere: (1) components and (2) attribute directives.</source>
          <target state="translated">Angularのディレクティブには他にも2種類あり、他の場所で幅広く説明されています。(1)コンポーネントと(2)アトリビュートディレクティブです。</target>
        </trans-unit>
        <trans-unit id="eee5ab865a86fd0b73b19b491d8642111214cd0d" translate="yes" xml:space="preserve">
          <source>There are two possible degraded states:</source>
          <target state="translated">劣化状態には2つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="bc52776a75e0fe43e572fa425a1db8d585ca5328" translate="yes" xml:space="preserve">
          <source>There are two potential workarounds to the above issues:</source>
          <target state="translated">上記の問題に対しては、2つの回避策が考えられます。</target>
        </trans-unit>
        <trans-unit id="25650f34b85cc033bcf18133335c7c20ab26b348" translate="yes" xml:space="preserve">
          <source>There are two types of validator functions: sync validators and async validators.</source>
          <target state="translated">バリデータ機能には、同期バリデータと非同期バリデータの2種類があります。</target>
        </trans-unit>
        <trans-unit id="3f8e7458d2bd37a51a02a94b62cdecdc59f8af4c" translate="yes" xml:space="preserve">
          <source>There are two ways to make a service a singleton in Angular:</source>
          <target state="translated">Angularでサービスをシングルトンにする方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="faa6ad5446f7861f6ecf46da71ea515c5fb5f071" translate="yes" xml:space="preserve">
          <source>There are two ways to update the model value:</source>
          <target state="translated">モデル値を更新するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="f26b5471a1dd6edb128afdf26847e8bb73608215" translate="yes" xml:space="preserve">
          <source>There are usually one or more main sections that may be further divided into secondary sections.</source>
          <target state="translated">通常、1つまたは複数の主要なセクションがあり、それはさらに二次セクションに分割されることがあります。</target>
        </trans-unit>
        <trans-unit id="1d5c6b97ecc7419e7dd8afaaeb5bfae0e26e836c" translate="yes" xml:space="preserve">
          <source>There can also be false positives when the typings of an Angular library are either incomplete or incorrect, or when the typings don't quite line up with expectations as in the following cases.</source>
          <target state="translated">また、Angularライブラリの型付けが不完全であったり、正しくない場合や、以下のように型付けが期待通りでない場合にも誤検出が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="ca00ae37aaf723dcf8b96d9e5fe70f20f93c9cc4" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;tree hierarchy of injectors&lt;/a&gt;, with a root injector and an additional injector for each component.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;インジェクターのツリー階層&lt;/a&gt;があり、各コンポーネントにルートインジェクターと追加のインジェクターがあります。</target>
        </trans-unit>
        <trans-unit id="027fb989b8678c3235e885de0c12df209840f1d8" translate="yes" xml:space="preserve">
          <source>There is a rule for each defined day period. The first rule is applied to the first day period and so on. Fall back to AM/PM when no rules are available.</source>
          <target state="translated">定義された曜日期間ごとにルールがあります。最初のルールは1日目の期間などに適用されます。ルールがない場合はAM/PMにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="7654c24d9c7b87cc2fb7d574ad4e33ff2eb6cd63" translate="yes" xml:space="preserve">
          <source>There is a small but critical difference. In the &lt;code&gt;AppRoutingModule&lt;/code&gt;, you used the static &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; method to register the routes and application level service providers. In a feature module you use the static &lt;strong&gt;&lt;code&gt;forChild&lt;/code&gt;&lt;/strong&gt; method.</source>
          <target state="translated">小さいが重大な違いがあります。では &lt;code&gt;AppRoutingModule&lt;/code&gt; 、あなたは静的な使用&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;ルートとアプリケーション・レベル・サービス・プロバイダを登録する方法を。機能モジュールでは、静的な&lt;strong&gt; &lt;code&gt;forChild&lt;/code&gt; &lt;/strong&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="1089bb549e548f1eece3447abc86312a541125a5" translate="yes" xml:space="preserve">
          <source>There is an API for navigating &lt;em&gt;down&lt;/em&gt; the view hierarchy. Check out &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; in the &lt;a href=&quot;../api/index&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">ビュー階層を&lt;em&gt;下&lt;/em&gt;にナビゲート&lt;em&gt;する&lt;/em&gt;ためのAPIがあります。&lt;a href=&quot;../api/index&quot;&gt;APIリファレンスの&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; を確認してください。</target>
        </trans-unit>
        <trans-unit id="bf10db6389feae71b1aa42ec8c45a030a861e2e0" translate="yes" xml:space="preserve">
          <source>There is an important distinction between using another module's component and using a service from another module. Import modules when you want to use directives, pipes, and components. Importing a module with services means that you will have a new instance of that service, which typically is not what you need (typically one wants to reuse an existing service). Use module imports to control service instantiation.</source>
          <target state="translated">他のモジュールのコンポーネントを使用することと、他のモジュールのサービスを使用することには重要な区別があります。ディレクティブやパイプ、コンポーネントを使いたい場合はモジュールをインポートしてください。サービスを含むモジュールをインポートするということは、そのサービスの新しいインスタンスを持つことを意味しますが、これは通常、必要なものではありません (通常、既存のサービスを再利用したい場合が多いです)。サービスのインスタンス化を制御するためにモジュールのインポートを使用します。</target>
        </trans-unit>
        <trans-unit id="cceabdb690dfa8a94f69d03b06952860cf555cc4" translate="yes" xml:space="preserve">
          <source>There is exactly one injector. Even in multi-module applications, everything is poured into one big namespace.</source>
          <target state="translated">インジェクタは正確には1つです。マルチモジュールアプリケーションでも、すべてのものが一つの大きな名前空間に注ぎ込まれます。</target>
        </trans-unit>
        <trans-unit id="8b6ca3d80875d293406dd0f142004f9fede44d55" translate="yes" xml:space="preserve">
          <source>There is no &lt;em&gt;live example&lt;/em&gt; for this cookbook because it describes Visual Studio, not the Angular application itself. It uses the starter Angular application created by the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; as an example.</source>
          <target state="translated">このクックブックには、Angularアプリケーション自体ではなくVisual Studioが記述されているため、実際の&lt;em&gt;例&lt;/em&gt;はありません。例として、CLIコマンド&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; で&lt;/a&gt;作成されたスターターAngularアプリケーションを使用します。</target>
        </trans-unit>
        <trans-unit id="133a9567390a248ff96c3ddfeb770bd616eadd71" translate="yes" xml:space="preserve">
          <source>There is no default for the child route so you need to pick one.</source>
          <target state="translated">子ルートにはデフォルトがないので、選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="c9bb67cef244a52a5902839951c12ad9006e5375" translate="yes" xml:space="preserve">
          <source>There is no issue when the user navigates to that URL from within a running client. The Angular router interprets the URL and routes to that page and hero.</source>
          <target state="translated">ユーザーが実行中のクライアントからそのURLに移動しても問題はありません。Angular ルーターは URL を解釈して、そのページとヒーローにルーティングします。</target>
        </trans-unit>
        <trans-unit id="565fc140f826820d99228d067e03328fac73f380" translate="yes" xml:space="preserve">
          <source>There is no longer a reference to &lt;code&gt;template&lt;/code&gt; and, therefore, nothing to trouble the compiler when it later interprets the &lt;em&gt;collector's&lt;/em&gt; output in &lt;code&gt;.metadata.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; への参照がなくなったため、後で &lt;code&gt;.metadata.json&lt;/code&gt; の&lt;em&gt;コレクターの&lt;/em&gt;出力を解釈するときにコンパイラーに問題が発生することはありません。</target>
        </trans-unit>
        <trans-unit id="4e748fc4f70bcf252a46a3d8e24d8e97b2bd9b8c" translate="yes" xml:space="preserve">
          <source>There is no public API for acquiring a parent reference. However, because every component instance is added to an injector's container, you can use Angular dependency injection to reach a parent component.</source>
          <target state="translated">親参照を取得するための公開APIはありません。しかし、すべてのコンポーネントインスタンスがインジェクタのコンテナに追加されるため、Angularの依存性インジェクションを使用して親コンポーネントに到達することができます。</target>
        </trans-unit>
        <trans-unit id="9e1f226d0769c2006bed4876b7fe7a774057642d" translate="yes" xml:space="preserve">
          <source>There is no single configuration that works for every server. The following sections describe configurations for some of the most popular servers. The list is by no means exhaustive, but should provide you with a good starting point.</source>
          <target state="translated">すべてのサーバーで動作する単一の設定はありません。以下のセクションでは、最も人気のあるサーバのいくつかの設定を説明します。このリストは全てを網羅しているわけではありませんが、良い出発点になるはずです。</target>
        </trans-unit>
        <trans-unit id="259bb0afbd8fefe05bdc556bd5eef64a565fd518" translate="yes" xml:space="preserve">
          <source>There is no specific API for upgrading an AngularJS service. Instead you should just follow the following recipe:</source>
          <target state="translated">AngularJSサービスをアップグレードするための特定のAPIはありません。代わりに、以下のレシピに従ってください。</target>
        </trans-unit>
        <trans-unit id="550621addec4fd2e0708772894f55350f2a0f79c" translate="yes" xml:space="preserve">
          <source>There is no upgrade method to convert filters into pipes. You won't miss it. It's easy to turn the filter function into an equivalent Pipe class. The implementation is the same as before, repackaged in the &lt;code&gt;transform&lt;/code&gt; method. Rename the file to &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; to conform with Angular conventions:</source>
          <target state="translated">フィルターをパイプに変換するアップグレード方法はありません。あなたはそれを見逃すことはありません。フィルター関数を同等のPipeクラスに変換するのは簡単です。実装は以前と同じであり、 &lt;code&gt;transform&lt;/code&gt; メソッドに再パッケージ化されています。ファイルの名前を変更し &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; アンギュラ規則に準拠します：</target>
        </trans-unit>
        <trans-unit id="781eeaf093073ff0f504a446a6e2751d0558d133" translate="yes" xml:space="preserve">
          <source>There is one exception to this behavior that applies to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;trackBy&lt;/code&gt; functionality that can deal with referential inequality of objects when iterating over them. See &lt;a href=&quot;built-in-directives#ngfor-with-trackby&quot;&gt;*ngFor with &lt;code&gt;trackBy&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; に適用されるこの動作には1つの例外があります。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; には、オブジェクトを反復処理するときにオブジェクトの参照の不平等を処理できる &lt;code&gt;trackBy&lt;/code&gt; 機能があります。詳細については、&lt;a href=&quot;built-in-directives#ngfor-with-trackby&quot;&gt;* ngFor &lt;code&gt;trackBy&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4367e8254fa20fae31dcd949ca18914ce55ee3c5" translate="yes" xml:space="preserve">
          <source>There is one exception to this behavior that applies to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;trackBy&lt;/code&gt; functionality that can deal with referential inequality of objects when iterating over them. See &lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;*ngFor with &lt;code&gt;trackBy&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; に適用されるこの動作には1つの例外があります。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; には、オブジェクトを反復するときにオブジェクトの参照の不等式を処理できる &lt;code&gt;trackBy&lt;/code&gt; 機能があります。詳細については、&lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;* ngFor with &lt;code&gt;trackBy&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7dd62d5ae3789ef38b487eab0e8d1f7f87b82b99" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule. Attributes can be changed by &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt;, which re-initializes corresponding DOM properties.</source>
          <target state="translated">この規則には1つの例外があります。属性は、対応するDOMプロパティを再初期化する &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; によって変更できます。</target>
        </trans-unit>
        <trans-unit id="11dbb8bce3c3271a707e1c42a72d9f859744e253" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule. Attributes can be changed by &lt;code&gt;setAttribute()&lt;/code&gt;, which re-initializes corresponding DOM properties.</source>
          <target state="translated">この規則には1つの例外があります。属性は、対応するDOMプロパティを再初期化する &lt;code&gt;setAttribute()&lt;/code&gt; によって変更できます。</target>
        </trans-unit>
        <trans-unit id="d33886b39df983b142ac0e4c678d0df8e24d2439" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule: to make local development easier, browsers do &lt;em&gt;not&lt;/em&gt; require a secure connection when accessing an app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">このルールには1つの例外があります。ローカル開発を容易にするために、ブラウザーは &lt;code&gt;localhost&lt;/code&gt; 上のアプリにアクセスするときに安全な接続を必要とし&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="56ed5ae7d3569c2686c1ede9ce1a1546720090e8" translate="yes" xml:space="preserve">
          <source>There is only one root injector for an app. Providing &lt;code&gt;UserService&lt;/code&gt; at the &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;AppModule&lt;/code&gt; level means it is registered with the root injector. There is just one &lt;code&gt;UserService&lt;/code&gt; instance in the entire app and every class that injects &lt;code&gt;UserService&lt;/code&gt; gets this service instance &lt;em&gt;unless&lt;/em&gt; you configure another provider with a &lt;em&gt;child injector&lt;/em&gt;.</source>
          <target state="translated">アプリのルートインジェクターは1つだけです。 &lt;code&gt;root&lt;/code&gt; または &lt;code&gt;AppModule&lt;/code&gt; レベルで &lt;code&gt;UserService&lt;/code&gt; を提供することは、ルートインジェクターに登録されることを意味します。&lt;em&gt;子インジェクターで&lt;/em&gt;別のプロバイダーを構成し&lt;em&gt;ない限り&lt;/em&gt;、アプリ全体で &lt;code&gt;UserService&lt;/code&gt; インスタンスは1つだけあり、 &lt;code&gt;UserService&lt;/code&gt; を注入するすべてのクラスがこのサービスインスタンスを取得します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa0f46f07be6d7bd145a95e639f76d57f093602d" translate="yes" xml:space="preserve">
          <source>There isn't anything the client application can do about these errors. The server must be configured to accept the application's requests. Read about how to enable CORS for specific servers at &lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt;.</source>
          <target state="translated">クライアントアプリケーションがこれらのエラーについてできることは何もありません。サーバーは、アプリケーションの要求を受け入れるように構成する必要があります。&lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt;で特定のサーバーに対してCORSを有効にする方法についてお読みください。</target>
        </trans-unit>
        <trans-unit id="bd29a80577a16149f809aa709e10802120f26a64" translate="yes" xml:space="preserve">
          <source>There will be one additional argument to the &lt;code&gt;transform&lt;/code&gt; method for each parameter passed to the pipe. Your pipe has one such parameter: the &lt;code&gt;exponent&lt;/code&gt;.</source>
          <target state="translated">パイプに渡されるパラメーターごとに、 &lt;code&gt;transform&lt;/code&gt; メソッドへの追加の引数が1つあります。パイプには、そのようなパラメーターが1つあります。それは、 &lt;code&gt;exponent&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7cc5eb405460e77c124b415c5ccacffdb138ea7a" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing special about this component, nothing form-specific, nothing to distinguish it from any component you've written before.</source>
          <target state="translated">このコンポーネントには特別なものはなく、フォーム固有のものも、以前に作成したコンポーネントと区別するものもありません。</target>
        </trans-unit>
        <trans-unit id="542467bb8ed2c1b3891b718134b4968a6fc9a566" translate="yes" xml:space="preserve">
          <source>There's a good reason for this circuitous path to the element.</source>
          <target state="translated">この要素への迂回路にはそれなりの理由がある。</target>
        </trans-unit>
        <trans-unit id="508e59adf4df546f2bbce6e533bf9e238970539b" translate="yes" xml:space="preserve">
          <source>There's a similar helper for producing an async error.</source>
          <target state="translated">非同期エラーを生成するための同様のヘルパーがあります。</target>
        </trans-unit>
        <trans-unit id="84cc470613727d84aabbfa2c1862c5ad36fcaf45" translate="yes" xml:space="preserve">
          <source>There's also the &lt;code&gt;bind-&lt;/code&gt; prefix alternative:</source>
          <target state="translated">&lt;code&gt;bind-&lt;/code&gt; プレフィックスの選択肢もあります：</target>
        </trans-unit>
        <trans-unit id="0909bf3d1ff44badd0511d8a77fa43424485ad25" translate="yes" xml:space="preserve">
          <source>There's an easier way: bind to Angular's &lt;code&gt;keyup.enter&lt;/code&gt; pseudo-event. Then Angular calls the event handler only when the user presses &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">より簡単な方法があります &lt;code&gt;keyup.enter&lt;/code&gt; のkeyup.enter疑似イベントにバインドします。次に、Angularは、ユーザーが&lt;em&gt;Enterキーを&lt;/em&gt;押したときにのみイベントハンドラーを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ab30027be9f11ddbb2b70f4586d177e63c2b9249" translate="yes" xml:space="preserve">
          <source>There's another school of testing that never calls &lt;code&gt;beforeEach()&lt;/code&gt; and prefers to create classes explicitly rather than use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; を呼び出さず、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を使用するよりも明示的にクラスを作成することを好むテストの別の学校があります。</target>
        </trans-unit>
        <trans-unit id="ea61c19309ff72246ea3a2984fbfffe7d47f7033" translate="yes" xml:space="preserve">
          <source>There's another way to get the user data: use Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;template reference variables&lt;/strong&gt;&lt;/a&gt;. These variables provide direct access to an element from within the template. To declare a template reference variable, precede an identifier with a hash (or pound) character (#).</source>
          <target state="translated">ユーザーデータを取得する別の方法があります。Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;テンプレート参照変数を&lt;/strong&gt;&lt;/a&gt;使用し&lt;strong&gt;ます&lt;/strong&gt;。これらの変数は、テンプレート内から要素への直接アクセスを提供します。テンプレート参照変数を宣言するには、識別子の前にハッシュ（またはポンド）文字（＃）を付けます。</target>
        </trans-unit>
        <trans-unit id="649efc388a11470109bc9e7158e40958a6267aea" translate="yes" xml:space="preserve">
          <source>There's no harm in calling &lt;code&gt;compileComponents()&lt;/code&gt; when it's not required.</source>
          <target state="translated">不要な &lt;code&gt;compileComponents()&lt;/code&gt; を呼び出しても害はありません。</target>
        </trans-unit>
        <trans-unit id="37d89c9051846e27681d13e418f11f2bb4feecdd" translate="yes" xml:space="preserve">
          <source>There's no link to the new shipping component yet, but you can see its template in the preview pane by entering the URL its route specifies. The URL has the pattern: &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; where the &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; part may be different for your StackBlitz project.</source>
          <target state="translated">新しい配送コンポーネントへのリンクはまだありませんが、ルートで指定されているURLを入力すると、プレビューペインにテンプレートが表示されます。：URLはパターンがある &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 一部があなたのStackBlitzプロジェクトのために異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="d18f6add8e2e8495aacfbde5fe0813a6561d85a2" translate="yes" xml:space="preserve">
          <source>There's no need to declare or import anything else. The default test module is pre-configured with something like the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">他のものを宣言したりインポートしたりする必要はありません。デフォルトのテストモジュールは、 &lt;code&gt;@angular/platform-browser&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; などのように事前設定されています。</target>
        </trans-unit>
        <trans-unit id="9485387892c4a4b5f9d2bd3163e6e9e7f2a2b699" translate="yes" xml:space="preserve">
          <source>There's no need to list a component in both the &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;entryComponents&lt;/code&gt; lists, although doing so is harmless.</source>
          <target state="translated">無害ですが、コンポーネントを &lt;code&gt;bootstrap&lt;/code&gt; リストと &lt;code&gt;entryComponents&lt;/code&gt; リストの両方にリストする必要はありません。</target>
        </trans-unit>
        <trans-unit id="c90aada73387116e19e933942a34d908ca737c3b" translate="yes" xml:space="preserve">
          <source>There's often a &lt;em&gt;root&lt;/em&gt; element that can and should host the structural directive. The list element (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) is a typical host element of an &lt;code&gt;NgFor&lt;/code&gt; repeater.</source>
          <target state="translated">多くの場合、構造ディレクティブをホストできる、およびホストする必要がある&lt;em&gt;ルート&lt;/em&gt;要素があります。リスト要素（ &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ）は、 &lt;code&gt;NgFor&lt;/code&gt; リピーターの典型的なホスト要素です。</target>
        </trans-unit>
        <trans-unit id="ca6a4c5f2988457896869f467e895a0eeb19531f" translate="yes" xml:space="preserve">
          <source>There's one notable exception to the rule of using Angular attribute syntax for downgraded components. It has to do with input or output names that consist of multiple words. In Angular, you would bind these attributes using camelCase:</source>
          <target state="translated">ダウングレードされたコンポーネントにAngularの属性構文を使用するというルールには注目すべき例外があります。それは複数の単語で構成される入力名や出力名に関係しています。Angularでは、これらの属性はキャメルケースを使ってバインドします。</target>
        </trans-unit>
        <trans-unit id="6cf332e6a1ddffd2a30959312ecbc288187e50d8" translate="yes" xml:space="preserve">
          <source>There's really nothing for the component to do with the &lt;code&gt;Observable&lt;/code&gt; returned by &lt;code&gt;heroService.delete()&lt;/code&gt;&lt;strong&gt;but it must subscribe anyway&lt;/strong&gt;.</source>
          <target state="translated">コンポーネントが &lt;code&gt;heroService.delete()&lt;/code&gt; によって返された &lt;code&gt;Observable&lt;/code&gt; と関係することは本当にありませんが、&lt;strong&gt;とにかくサブスクライブする必要があります&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e367708179b8c6b769aeb5784a73ff30d8bb02d" translate="yes" xml:space="preserve">
          <source>There's the hero again, displayed read-only with interpolation bindings. This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; appears only while the component is in the submitted state.</source>
          <target state="translated">ヒーローが再び現れ、補間バインディングで読み取り専用に表示されます。この &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、コンポーネントが送信済み状態のときにのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="6dd1142b94c5ac636081fac9b5a1e93324c5c2d5" translate="yes" xml:space="preserve">
          <source>These &lt;code&gt;import&lt;/code&gt; statements add several important elements that your component needs. To learn more about each, see the following API pages:</source>
          <target state="translated">これらの &lt;code&gt;import&lt;/code&gt; ステートメントは、コンポーネントに必要ないくつかの重要な要素を追加します。それぞれの詳細については、次のAPIページを参照してください。</target>
        </trans-unit>
        <trans-unit id="83d7c16de255fb2bdba11db803994a1ace7987c7" translate="yes" xml:space="preserve">
          <source>These Angular docs help you learn and use the Angular framework and development platform, from your first application to optimizing complex single-page apps for enterprises. Tutorials and guides include downloadable examples to accelerate your projects.</source>
          <target state="translated">これらのAngularドキュメントは、初めてのアプリケーションから企業向けの複雑なシングルページアプリケーションの最適化まで、Angularフレームワークと開発プラットフォームの学習と使用を支援します。チュートリアルとガイドにはダウンロード可能なサンプルが含まれており、プロジェクトを加速させることができます。</target>
        </trans-unit>
        <trans-unit id="a7f47f5fef07e1400c8770e346e27dd983d3210c" translate="yes" xml:space="preserve">
          <source>These Angular docs help you learn and use the Angular platform and framework, from your first app to optimizing complex enterprise apps. Tutorials and guides include downloadable example to accelerate your projects.</source>
          <target state="translated">これらのAngularドキュメントは、初めてのアプリから複雑なエンタープライズアプリの最適化まで、Angularプラットフォームとフレームワークの学習と使用を支援します。チュートリアルとガイドにはダウンロード可能なサンプルが含まれており、プロジェクトを加速させることができます。</target>
        </trans-unit>
        <trans-unit id="9c8f4170de94e38e103661daa9cd09d22d382f76" translate="yes" xml:space="preserve">
          <source>These are all features you'll want to test.</source>
          <target state="translated">テストしてみたい機能ばかりです。</target>
        </trans-unit>
        <trans-unit id="19fa4dd3c3af8618e37296f1894ca8c3663deadc" translate="yes" xml:space="preserve">
          <source>These are short, simple functions that you can write yourself. Unfortunately, they're too simple for many common scenarios. An observable often emits multiple times, perhaps after a significant delay. A component may coordinate multiple observables with overlapping sequences of values and errors.</source>
          <target state="translated">これらの関数は、自分で書くことができる短くてシンプルなものです。残念ながら、多くの一般的なシナリオにはシンプルすぎます。ある観測値はしばしば複数回、おそらくかなりの遅延の後に放出されることがあります。コンポーネントは、値やエラーが重なり合った複数の観測値を調整することがあります。</target>
        </trans-unit>
        <trans-unit id="15a8bdbc2d27676173c0870bb9d476a44f9c0ec8" translate="yes" xml:space="preserve">
          <source>These are techniques for &lt;em&gt;Shallow Component Testing&lt;/em&gt; , so-named because they reduce the visual surface of the component to just those elements in the component's template that matter for tests.</source>
          <target state="translated">これらは、コンポーネントの視覚的な表面を、コンポーネントテンプレートのテストで重要な要素だけに減らすために、&lt;em&gt;浅いコンポーネントテストの&lt;/em&gt;手法です。</target>
        </trans-unit>
        <trans-unit id="874d82075cf5a1fb8e894c6a1831e2a99c4f9cf5" translate="yes" xml:space="preserve">
          <source>These are tests of the pipe &lt;em&gt;in isolation&lt;/em&gt;. They can't tell if the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; is working properly as applied in the application components.</source>
          <target state="translated">これらは&lt;em&gt;単独&lt;/em&gt;でのパイプのテストです。 &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; がアプリケーションコンポーネントに適用されたとおりに適切に機能しているかどうかはわかりません。</target>
        </trans-unit>
        <trans-unit id="7aa6e184a2127bbab023de5210efd3d94de5eaf2" translate="yes" xml:space="preserve">
          <source>These are the polyfills required to run an Angular application on each supported browser:</source>
          <target state="translated">これらはサポートされている各ブラウザでAngularアプリケーションを実行するために必要なポリフィルです。</target>
        </trans-unit>
        <trans-unit id="d6422d60e6eed75caf6b039379d70a9d2b91599f" translate="yes" xml:space="preserve">
          <source>These buttons work, because the CLI automatically added the routes to the feature modules to the &lt;code&gt;routes&lt;/code&gt; array in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">これらのボタンが機能するのは、CLIが機能モジュールへの &lt;code&gt;routes&lt;/code&gt; を &lt;code&gt;app.module.ts&lt;/code&gt; のルート配列に自動的に追加したためです。</target>
        </trans-unit>
        <trans-unit id="4fadb046a4f69a8a29a6dfda895733f7808fc510" translate="yes" xml:space="preserve">
          <source>These complications argue for &lt;em&gt;avoiding component inheritance&lt;/em&gt;.</source>
          <target state="translated">これらの複雑化は、&lt;em&gt;コンポーネントの継承&lt;/em&gt;を&lt;em&gt;回避&lt;/em&gt;すること&lt;em&gt;を&lt;/em&gt;主張し&lt;em&gt;ています&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3cd97d4aaaa391802aacd2112d378fb5a981f75d" translate="yes" xml:space="preserve">
          <source>These declared classes are visible within the module but invisible to components in a different module unless they are exported from this module and the other module imports this one.</source>
          <target state="translated">これらの宣言されたクラスはモジュール内では表示されますが、このモジュールからエクスポートされ、別のモジュールがこのクラスをインポートしない限り、別のモジュールのコンポーネントからは見えません。</target>
        </trans-unit>
        <trans-unit id="e0813bed7ed16b4e0b736f3f56fccf8998f10650" translate="yes" xml:space="preserve">
          <source>These decorators can be used individually or together, as shown in the example. This &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; is a revision of &lt;code&gt;HeroBiosComponent&lt;/code&gt; which you looked at &lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">これらのデコレータは、例に示すように、個別にまたは一緒に使用できます。この &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; は、&lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;上で&lt;/a&gt;見た &lt;code&gt;HeroBiosComponent&lt;/code&gt; のリビジョンです。</target>
        </trans-unit>
        <trans-unit id="e87f8d2277a30ddb602eb3ef7903e879dae9750f" translate="yes" xml:space="preserve">
          <source>These differences argue for a re-usable stub class.</source>
          <target state="translated">これらの違いは、再利用可能なスタブクラスを主張しています。</target>
        </trans-unit>
        <trans-unit id="5d480207010587b40e48ea63c6eb80e8e93917ee" translate="yes" xml:space="preserve">
          <source>These docs assume that you are already familiar with &lt;a href=&quot;https://developer.mozilla.org/docs/Learn/HTML/Introduction_to_HTML&quot;&gt;HTML&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/docs/Learn/CSS/First_steps&quot;&gt;CSS&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;, and some of the tools from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;latest standards&lt;/a&gt;, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;modules&lt;/a&gt;. The code samples are written using &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. Most Angular code can be written with just the latest JavaScript, using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;types&lt;/a&gt; for dependency injection, and using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt; for metadata.</source>
          <target state="translated">これらのドキュメントは、&lt;a href=&quot;https://developer.mozilla.org/docs/Learn/HTML/Introduction_to_HTML&quot;&gt;HTML&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/docs/Learn/CSS/First_steps&quot;&gt;CSS&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;、および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;クラス&lt;/a&gt;や&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;モジュール&lt;/a&gt;などの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;最新の標準の&lt;/a&gt;ツールの一部に既に精通していることを前提としています。コードサンプルは&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;を使用して記述されています。ほとんどのAngularコードは、依存性注入に&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;型&lt;/a&gt;を使用し、メタデータに&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;デコレータ&lt;/a&gt;を使用して、最新のJavaScriptだけで記述できます。</target>
        </trans-unit>
        <trans-unit id="332167a123f1d6b741515c29ca0f4c696c2a51c9" translate="yes" xml:space="preserve">
          <source>These docs assume that you are already familiar with HTML, CSS, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;, and some of the tools from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;latest standards&lt;/a&gt;, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;modules&lt;/a&gt;. The code samples are written using &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. Most Angular code can be written with just the latest JavaScript, using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;types&lt;/a&gt; for dependency injection, and using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt; for metadata.</source>
          <target state="translated">これらのドキュメントは、HTML、CSS、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;、および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;クラス&lt;/a&gt;や&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;モジュール&lt;/a&gt;などの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;最新標準の&lt;/a&gt;ツールの一部にすでに精通していることを前提としています。コードサンプルは&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;を使用して記述されています。ほとんどのAngularコードは、依存関係の注入に&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;型&lt;/a&gt;を使用し、メタデータに&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;デコレーター&lt;/a&gt;を使用して、最新のJavaScriptのみで作成できます。</target>
        </trans-unit>
        <trans-unit id="c0248cf761a672df747afacece78839e13096947" translate="yes" xml:space="preserve">
          <source>These events are logged to the console when the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; option is enabled also. For an example of filtering router navigation events, visit the &lt;a href=&quot;observables-in-angular#router&quot;&gt;router section&lt;/a&gt; of the &lt;a href=&quot;observables-in-angular&quot;&gt;Observables in Angular&lt;/a&gt; guide.</source>
          <target state="translated">これらのイベントは、 &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; オプションも有効にすると、コンソールに記録されます。ルーターナビゲーションイベントのフィルター処理の例については&lt;a href=&quot;observables-in-angular&quot;&gt;、Angular&lt;/a&gt;ガイドのObservablesの&lt;a href=&quot;observables-in-angular#router&quot;&gt;ルーターセクション&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1f157bfae90a971b921468f9fd643dfd20928fdb" translate="yes" xml:space="preserve">
          <source>These examples demonstrate features of Angular components.</source>
          <target state="translated">これらの例はAngularコンポーネントの特徴を示しています。</target>
        </trans-unit>
        <trans-unit id="87d6961b56e31c059fead7fe33dd1106be84b901" translate="yes" xml:space="preserve">
          <source>These examples demonstrate features of Angular templates.</source>
          <target state="translated">これらの例はAngularテンプレートの特徴を示しています。</target>
        </trans-unit>
        <trans-unit id="16439e0a64a943344cbb334dca94796483e78e42" translate="yes" xml:space="preserve">
          <source>These examples demonstrate minimal, fundamental concepts.</source>
          <target state="translated">これらの例は、最小限の基本的な概念を示しています。</target>
        </trans-unit>
        <trans-unit id="2680c5c9b2a75fe66adbcbcf8321b6c19da88cdf" translate="yes" xml:space="preserve">
          <source>These examples transform a date into various formats, assuming that &lt;code&gt;dateObj&lt;/code&gt; is a JavaScript &lt;code&gt;Date&lt;/code&gt; object for year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11, given in the local time for the &lt;code&gt;en-US&lt;/code&gt; locale.</source>
          <target state="translated">これらの例では、日付をさまざまな形式に変換します &lt;code&gt;dateObj&lt;/code&gt; は、 &lt;code&gt;en-US&lt;/code&gt; 現地時間で、年：2015、月：6、日：15、時間：21、分：43、秒：11のJavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトであると想定しています。-USロケール。</target>
        </trans-unit>
        <trans-unit id="2c3bf4e06192c72785cca976fd12148948a7cb90" translate="yes" xml:space="preserve">
          <source>These examples use a shorthand form of the prompt syntax, supplying only the text of the question. In most cases, this is all that is required. Notice however, that the two prompts expect different types of input. When using the shorthand form, the most appropriate type is automatically selected based on the property's schema. In the example, the &lt;code&gt;name&lt;/code&gt; prompt uses the &lt;code&gt;input&lt;/code&gt; type because it it is a string property. The &lt;code&gt;useColor&lt;/code&gt; prompt uses a &lt;code&gt;confirmation&lt;/code&gt; type because it is a Boolean property. In this case, &quot;yes&quot; corresponds to &lt;code&gt;true&lt;/code&gt; and &quot;no&quot; corresponds to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これらの例では、質問のテキストのみを提供するプロンプト構文の省略形を使用しています。ほとんどの場合、これで十分です。ただし、2つのプロンプトは異なるタイプの入力を想定していることに注意してください。省略形を使用する場合、最も適切なタイプは、プロパティのスキーマに基づいて自動的に選択されます。この例では、 &lt;code&gt;name&lt;/code&gt; プロンプトは文字列プロパティであるため、 &lt;code&gt;input&lt;/code&gt; タイプを使用しています。 &lt;code&gt;useColor&lt;/code&gt; プロンプト用途 &lt;code&gt;confirmation&lt;/code&gt; タイプはブール型プロパティですので。この場合、「yes」は &lt;code&gt;true&lt;/code&gt; に対応し、「no」は &lt;code&gt;false&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="d24eb680a33027e2617530dc12e6676b87a2c5ca" translate="yes" xml:space="preserve">
          <source>These files need to be copied together with the polyfills. The files the application needs at runtime, like the &lt;code&gt;.json&lt;/code&gt; phone lists and images, also need to be copied.</source>
          <target state="translated">これらのファイルは、ポリフィルと一緒にコピーする必要があります。 &lt;code&gt;.json&lt;/code&gt; 電話リストや画像など、アプリケーションが実行時に必要とするファイルもコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="02b3a7df8a6c77dd99266ab2b91a34b6a3d23a77" translate="yes" xml:space="preserve">
          <source>These four bindings demonstrate the difference between &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;. Since the 🐶 (puppy) is declared inside the &amp;lt;#VIEW&amp;gt;, it isn't visible to the projected content. Instead, the projected content sees the 🐳 (whale).</source>
          <target state="translated">これらの4つのバインディングは、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の違いを示しています。＃（子犬）は&amp;lt;#VIEW&amp;gt;内で宣言されているため、投影されたコンテンツには表示されません。代わりに、投影されたコンテンツには🐳（クジラ）が表示されます。</target>
        </trans-unit>
        <trans-unit id="b30edd37d2f476685d4ba739caa2c47f5b94f2fd" translate="yes" xml:space="preserve">
          <source>These four bindings demonstrate the difference between &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt;. Since the 🐶 (puppy) is declared inside the &amp;lt;#VIEW&amp;gt;, it isn't visible to the projected content. Instead, the projected content sees the 🐳 (whale).</source>
          <target state="translated">これらの4つのバインディングは、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;viewProviders&lt;/code&gt; の違いを示しています。🐶（子犬）は&amp;lt;#VIEW&amp;gt;内で宣言されているため、投影されたコンテンツには表示されません。代わりに、投影されたコンテンツには🐳（クジラ）が表示されます。</target>
        </trans-unit>
        <trans-unit id="8eb673fe0a5db30500d447cd8ed9df2e9892d31d" translate="yes" xml:space="preserve">
          <source>These inputs and outputs can be supplied from the AngularJS template, and the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method takes care of wiring them up:</source>
          <target state="translated">これらの入力と出力は、AngularJSテンプレートから提供でき、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; メソッドがそれらの接続を処理します。</target>
        </trans-unit>
        <trans-unit id="aca1e5487bdae512316a9552870710cde2c7edc4" translate="yes" xml:space="preserve">
          <source>These kinds of parameters don't fit easily in a URL &lt;em&gt;path&lt;/em&gt;. Even if you could define a suitable URL token scheme, doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.</source>
          <target state="translated">これらの種類のパラメーターは、URL &lt;em&gt;パス&lt;/em&gt;に簡単に適合しません。適切なURLトークンスキームを定義できたとしても、そうすることで、着信URLを名前付きルートに変換するために必要なパターンマッチングが非常に複雑になります。</target>
        </trans-unit>
        <trans-unit id="29425b5274cb55ea0877f8425586bc76b4a9c960" translate="yes" xml:space="preserve">
          <source>These may not be troubling questions for the simple components illustrated above. But many components have complex interactions with the DOM elements described in their templates, causing HTML to appear and disappear as the component state changes.</source>
          <target state="translated">上で説明した単純なコンポーネントにとっては、これらの質問は問題ではないかもしれません。しかし、多くのコンポーネントは、テンプレートに記述されている DOM 要素と複雑な相互作用を持っており、コンポーネントの状態が変化すると HTML が表示されたり消えたりします。</target>
        </trans-unit>
        <trans-unit id="9280883bdf2743a9d36490d0dc135e8e9a512cc2" translate="yes" xml:space="preserve">
          <source>These methods access the injected timer component directly.</source>
          <target state="translated">これらのメソッドは、注入されたタイマー・コンポーネントに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="c22429bdeba56aae46b0da88ebbd1eba5c9f7eb4" translate="yes" xml:space="preserve">
          <source>These microsyntax mechanisms are also available to you when you write your own structural directives. For example, microsyntax in Angular allows you to write &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;. The following sections provide detailed information on constraints, grammar, and translation of microsyntax.</source>
          <target state="translated">これらのマイクロ構文メカニズムは、独自の構造ディレクティブを作成するときにも利用できます。たとえば、Angularのマイクロシンタックスでは、 &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [ &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt; ] = &quot;items&quot;&amp;gt; &amp;lt;div&amp;gt; {の代わりに&amp;lt; &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; を記述できます{ &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;アイテム&lt;/a&gt; }} &amp;lt;/ div&amp;gt; &amp;lt;/ ng-template&amp;gt;。次のセクションでは、制約、文法、およびマイクロ構文の翻訳について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="a5772cf07dfef80156b6e9a71682c4a0275d4733" translate="yes" xml:space="preserve">
          <source>These microsyntax mechanisms are also available to you when you write your own structural directives. For example, microsyntax in Angular allows you to write &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let item of items&quot;&amp;gt;{{item}}&amp;lt;/div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; let-item [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{item}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;. The following sections provide detailed information on constraints, grammar, and translation of microsyntax.</source>
          <target state="translated">これらのマイクロ構文メカニズムは、独自の構造ディレクティブを作成するときにも使用できます。たとえば、Angularのmicrosyntaxでは、 &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; let-item [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{item}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; let-item [ &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt; ] = &quot;items&quot;&amp;gt; &amp;lt;の代わりに&amp;lt; &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let item of items&quot;&amp;gt;{{item}}&amp;lt;/div&amp;gt;&lt;/code&gt; と書くことができます。div&amp;gt; {{item}} &amp;lt;/ div&amp;gt; &amp;lt;/ ng-template&amp;gt;。次のセクションでは、制約、文法、およびマイクロシンタックスの翻訳に関する詳細情報を提供します。</target>
        </trans-unit>
        <trans-unit id="5b1b2fa607afc63d8c9722ad2df075b0b65154ed" translate="yes" xml:space="preserve">
          <source>These options are used to modify the matching behavior of requests. They are passed to the browsers &lt;code&gt;Cache#match&lt;/code&gt; function. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Cache/match&quot;&gt;MDN&lt;/a&gt; for details. Currently, only the following options are supported:</source>
          <target state="translated">これらのオプションは、リクエストの一致する動作を変更するために使用されます。それらはブラウザの &lt;code&gt;Cache#match&lt;/code&gt; 関数に渡されます。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Cache/match&quot;&gt;MDN&lt;/a&gt;を参照してください。現在、次のオプションのみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="f75727d0e53686975b5f9fe934821fc5ef2a010f" translate="yes" xml:space="preserve">
          <source>These providers are insulated from changes to application providers with the same lookup token. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</source>
          <target state="translated">これらのプロバイダは、同じルックアップトークンを持つアプリケーションプロバイダへの変更から絶縁されています。ルーターがレイジーロードされたコンテキスト内でコンポーネントを作成する場合、Angularはこれらのプロバイダーから作成されたサービスインスタンスを、アプリケーションルートインジェクターのサービスインスタンスよりも優先します。</target>
        </trans-unit>
        <trans-unit id="24dcfb3b1d815ddbfc80be55b49ecf74b9b01fec" translate="yes" xml:space="preserve">
          <source>These services become available for injection into any component, directive, pipe or service which is a child of this injector.</source>
          <target state="translated">これらのサービスは、このインジェクタの子であるコンポーネント、ディレクティブ、パイプ、サービスに注入することができます。</target>
        </trans-unit>
        <trans-unit id="f9b0721484302592e733b6e272928008f313a2ba" translate="yes" xml:space="preserve">
          <source>These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!</source>
          <target state="translated">このような状況は非常に稀であり、クロスサイトスクリプティング(XSS)セキュリティバグを発生させないように細心の注意を払わなければなりません。</target>
        </trans-unit>
        <trans-unit id="a17e78995649c771b926fa480048cee49ac14e32" translate="yes" xml:space="preserve">
          <source>These standard testing techniques are great for unit testing services in isolation.</source>
          <target state="translated">これらの標準的なテスト技術は、分離されたユニットテストサービスに最適です。</target>
        </trans-unit>
        <trans-unit id="471f11bedf623af5e51a7550b62738fa78f523b0" translate="yes" xml:space="preserve">
          <source>These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.</source>
          <target state="translated">これらのステータス値は相互に排他的であるため、コントロールが有効と無効の両方、または無効と無効の両方を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="05f39205bd9c10860f4038f8cb6f1f80b35432f1" translate="yes" xml:space="preserve">
          <source>These styles are post-processed so that each selector is augmented with &lt;code&gt;_nghost&lt;/code&gt; or &lt;code&gt;_ngcontent&lt;/code&gt; attribute selectors. These extra selectors enable the scoping rules described in this page.</source>
          <target state="translated">これらのスタイルは後処理されるため、各セレクターは &lt;code&gt;_nghost&lt;/code&gt; または &lt;code&gt;_ngcontent&lt;/code&gt; 属性セレクターで拡張されます。これらの追加のセレクターにより、このページで説明するスコープ規則が有効になります。</target>
        </trans-unit>
        <trans-unit id="59ed30c14d44ecaa6cf045e5333024f1a3034ced" translate="yes" xml:space="preserve">
          <source>These techniques are useful for small-scale demonstrations, but they quickly become verbose and clumsy when handling large amounts of user input. Two-way data binding is a more elegant and compact way to move values between data entry fields and model properties. The next page, &lt;code&gt;Forms&lt;/code&gt;, explains how to write two-way bindings with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの手法は小規模のデモに役立ちますが、大量のユーザー入力を処理すると、すぐに冗長でぎこちなくなります。双方向データバインディングは、データ入力フィールドとモデルプロパティの間で値を移動するためのよりエレガントでコンパクトな方法です。次のページの &lt;code&gt;Forms&lt;/code&gt; では、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; を使用して双方向バインディングを作成する方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="53c3322dcb945c3c38eca1315cb0acd70af9667e" translate="yes" xml:space="preserve">
          <source>These tests could fail or timeout if the &lt;code&gt;HeroDetailService&lt;/code&gt; made its own XHR calls to a remote server. There might not be a remote server to call.</source>
          <target state="translated">&lt;code&gt;HeroDetailService&lt;/code&gt; がリモートサーバーに対して独自のXHR呼び出しを行った場合、これらのテストは失敗またはタイムアウトする可能性があります。呼び出すリモートサーバーがない可能性があります。</target>
        </trans-unit>
        <trans-unit id="ce3f767e6032b95a5a603034551bf8233c93f3f2" translate="yes" xml:space="preserve">
          <source>These three examples cover the need for an app with one level routing. The moment you add a child router, such as the crisis center, you create new link array possibilities.</source>
          <target state="translated">これらの3つの例は、1レベルのルーティングを持つアプリの必要性をカバーしています。危機管理センターのような子ルーターを追加した瞬間に、新しいリンクアレイの可能性が生まれます。</target>
        </trans-unit>
        <trans-unit id="9c84bcfdd1bbb4bcd869d39ead56a3ce00137884" translate="yes" xml:space="preserve">
          <source>These three examples cover the needs of an app with one level of routing. However, with a child router, such as in the crisis center, you create new link array possibilities.</source>
          <target state="translated">これらの3つの例は、1つのレベルのルーティングを持つアプリのニーズをカバーしています。しかし、危機管理センターのような子ルーターを使用すると、新しいリンクアレイの可能性を作成します。</target>
        </trans-unit>
        <trans-unit id="a858b580e5d1dabed41a7075d6de4bc56502ab07" translate="yes" xml:space="preserve">
          <source>These two properties have subtle differences, so switching to &lt;code&gt;textContent&lt;/code&gt; under the hood can be surprising to users. For this reason, we are deprecating this behavior. Going forward, users should explicitly bind to &lt;code&gt;textContent&lt;/code&gt; when using Domino.</source>
          <target state="translated">これら2つのプロパティには微妙な違いがあるため、 &lt;code&gt;textContent&lt;/code&gt; でtextContentに切り替えるのはユーザーにとって驚くべきことです。このため、この動作は廃止される予定です。今後、Dominoを使用する場合、ユーザーは &lt;code&gt;textContent&lt;/code&gt; に明示的にバインドする必要があります。</target>
        </trans-unit>
        <trans-unit id="db3d1e9b8dc7f1d6ba6781b5d1aeadad60243cbb" translate="yes" xml:space="preserve">
          <source>These two routes navigate to the crisis center child components, &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; and &lt;code&gt;CrisisDetailComponent&lt;/code&gt;, respectively.</source>
          <target state="translated">これらの2つのルートは、それぞれ危機センターの子コンポーネントである &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; および &lt;code&gt;CrisisDetailComponent&lt;/code&gt; に移動します。</target>
        </trans-unit>
        <trans-unit id="ce122e04c4a0e2a0a5f7ad63d194e4fea023293d" translate="yes" xml:space="preserve">
          <source>They are &lt;em&gt;not inherited&lt;/em&gt; by any components nested within the template nor by any content projected into the component.</source>
          <target state="translated">これらはされ&lt;em&gt;継承されていない&lt;/em&gt;テンプレート内にネスト任意のコンポーネントによっても成分に投影任意のコンテンツによって。</target>
        </trans-unit>
        <trans-unit id="16ada202f0f526edb509f857ec3037ca6a0f4115" translate="yes" xml:space="preserve">
          <source>They are displayed in named outlets.</source>
          <target state="translated">これらは、名前付きアウトレットに表示されます。</target>
        </trans-unit>
        <trans-unit id="1b990f73ae62c0da4608dce9f08db78466a71820" translate="yes" xml:space="preserve">
          <source>They are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</source>
          <target state="translated">アプリは成功するまでに数回リクエストを再試行する可能性があり、インターセプターチェーンは同じリクエストを複数回再処理する可能性があることを意味します。傍受者がオリジナルのリクエストオブジェクトを変更した場合、再試行される操作はオリジナルではなく変更されたリクエストから開始されます。不変性は、インターセプターが各試行で同じリクエストを見ることを保証します。</target>
        </trans-unit>
        <trans-unit id="0a5e8503c85509faa05b6e855e4edcff069456e9" translate="yes" xml:space="preserve">
          <source>They are independent of each other.</source>
          <target state="translated">互いに独立しています。</target>
        </trans-unit>
        <trans-unit id="6afb78efe8cab856821000146ea4a61b8a334fa8" translate="yes" xml:space="preserve">
          <source>They are very similar with the only difference being:</source>
          <target state="translated">唯一の違いは、彼らは非常によく似ているということです。</target>
        </trans-unit>
        <trans-unit id="cfd5fb1fb1b07124fb1aace027accf1df4c99e03" translate="yes" xml:space="preserve">
          <source>They follow a common pattern: a &lt;em&gt;parent&lt;/em&gt; component serves as a test rig for a &lt;em&gt;child&lt;/em&gt; component that illustrates one or more of the lifecycle hook methods.</source>
          <target state="translated">彼らは、一般的なパターンに従う：&lt;em&gt;親&lt;/em&gt;コンポーネントが用試験装置として機能する&lt;em&gt;子&lt;/em&gt;ライフサイクルフック方法の一つ以上を示すコンポーネント。</target>
        </trans-unit>
        <trans-unit id="73b47ba16ec3ed20f7c0f09044645d6af1239f79" translate="yes" xml:space="preserve">
          <source>They might be imported by the root &lt;code&gt;AppModule&lt;/code&gt; of a small application that lacks routing.</source>
          <target state="translated">ルーティングが不足している小さなアプリケーションのルート &lt;code&gt;AppModule&lt;/code&gt; によってインポートされる場合があります。</target>
        </trans-unit>
        <trans-unit id="0bd9de91dc582fbf7daa5013098dfee5a9baa9df" translate="yes" xml:space="preserve">
          <source>They might. By default, the router re-uses a component instance when it re-navigates to the same component type without visiting a different component first. The route parameters could change each time.</source>
          <target state="translated">かもしれません。デフォルトでは、ルータは、最初に別のコンポーネントを訪問せずに同じコンポーネントタイプに再ナビゲートするときに、コンポーネントのインスタンスを再利用します。ルートパラメータはその都度変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bcebc66109bd0b943ba34a0b34f724475faa7a20" translate="yes" xml:space="preserve">
          <source>They must return a Promise or an Observable,</source>
          <target state="translated">彼らは約束や観察可能なものを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="6a1d3b6796b2728eca30d7dc142c330459e6d1b9" translate="yes" xml:space="preserve">
          <source>They typically have a top component that acts as the feature root and private, supporting sub-components descend from it.</source>
          <target state="translated">それらは通常、機能のルートとして機能するトップコンポーネントを持ち、プライベートで、サポートするサブコンポーネントはそこから派生しています。</target>
        </trans-unit>
        <trans-unit id="f8026517cd2a6484e993db7a3cd1d56c8845b6ed" translate="yes" xml:space="preserve">
          <source>They work in combination with other routes.</source>
          <target state="translated">他のルートと組み合わせて動作します。</target>
        </trans-unit>
        <trans-unit id="3d3f6d4959980160a0fdb422743d1ab226d66d6a" translate="yes" xml:space="preserve">
          <source>They'll do that with the RxJS &lt;code&gt;tap()&lt;/code&gt; operator, which looks at the observable values, does something with those values, and passes them along. The &lt;code&gt;tap()&lt;/code&gt; call back doesn't touch the values themselves.</source>
          <target state="translated">RxJSの &lt;code&gt;tap()&lt;/code&gt; 演算子を使用してこれを行います。これは、監視可能な値を調べ、それらの値を使用して何かを実行し、それらを渡します。 &lt;code&gt;tap()&lt;/code&gt; コールバックは、値そのものには触れていません。</target>
        </trans-unit>
        <trans-unit id="6764cd39877eeca69ad10d4286668ee2c1b61792" translate="yes" xml:space="preserve">
          <source>Things go wrong, especially when you're getting data from a remote server. The &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; method should catch errors and do something appropriate.</source>
          <target state="translated">特にリモートサーバーからデータを取得しているときに、問題が発生します。 &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; メソッドは、エラーをキャッチし、何か適切に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="bba021091f297904597c2bb05d6e5e449bd86e0a" translate="yes" xml:space="preserve">
          <source>Things to keep in mind, when downgrading multiple modules:</source>
          <target state="translated">複数のモジュールをダウングレードする際の注意点</target>
        </trans-unit>
        <trans-unit id="756e27539ff0999bdbcc7f5377fff9d815ce78d8" translate="yes" xml:space="preserve">
          <source>Third step of the Tour of Heroes example application. For more information, see &lt;a href=&quot;../tutorial/toh-pt3&quot;&gt;Create a feature component&lt;/a&gt;.</source>
          <target state="translated">Tour ofHeroesサンプルアプリケーションの3番目のステップ。詳細については&lt;a href=&quot;../tutorial/toh-pt3&quot;&gt;、フィーチャコンポーネントの作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e70dff18e1178a855b0cc1f8fc21945818c734cb" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which shows a read-only hero with interpolation bindings, appears only while the component is in the submitted state.</source>
          <target state="translated">この &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、補間バインディングを持つ読み取り専用のヒーローを示しており、コンポーネントが送信された状態にあるときにのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="2c24139a9de681ae61f6d7ec726db576f5f264b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; displays the error if the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; has the cross validation error returned by the &lt;code&gt;identityRevealed&lt;/code&gt; validator, but only if the user has finished &lt;a href=&quot;form-validation#dirty-or-touched&quot;&gt;interacting with the form&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;identityRevealed&lt;/code&gt; バリデーターによって返された相互検証エラーがある場合にエラーを表示しますが、ユーザーが&lt;a href=&quot;form-validation#dirty-or-touched&quot;&gt;フォームとの対話を&lt;/a&gt;終了した場合に限ります。</target>
        </trans-unit>
        <trans-unit id="c7b69adf603ad8f6d0e880b3effde6a1bd75ec06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; example:</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; の例：</target>
        </trans-unit>
        <trans-unit id="258e5fd8f98e77a1547ddec9b070f084c89034c4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;MissionService&lt;/code&gt; connects the &lt;code&gt;MissionControlComponent&lt;/code&gt; to multiple &lt;code&gt;AstronautComponent&lt;/code&gt; children.</source>
          <target state="translated">この &lt;code&gt;MissionService&lt;/code&gt; は、 &lt;code&gt;MissionControlComponent&lt;/code&gt; を複数の &lt;code&gt;AstronautComponent&lt;/code&gt; の子に接続します。</target>
        </trans-unit>
        <trans-unit id="59e007abb53ac82deffb3014ce0885f777370e0d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;VersionChildComponent&lt;/code&gt; detects changes to the &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; input properties and composes a log message reporting these changes:</source>
          <target state="translated">この &lt;code&gt;VersionChildComponent&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; 入力プロパティの変更を検出し、これらの変更を報告するログメッセージを作成します。</target>
        </trans-unit>
        <trans-unit id="5e474d161be24784860c8aaa6c3af723b09d2443" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;VersionChildComponent&lt;/code&gt; detects changes to the &lt;code&gt;major&lt;/code&gt; and &lt;code&gt;minor&lt;/code&gt; input properties and composes a log message reporting these changes:</source>
          <target state="translated">この &lt;code&gt;VersionChildComponent&lt;/code&gt; は、 &lt;code&gt;major&lt;/code&gt; および &lt;code&gt;minor&lt;/code&gt; 入力プロパティへの変更を検出し、これらの変更を報告するログメッセージを作成します。</target>
        </trans-unit>
        <trans-unit id="fbe66defed731afe2b351869493bed1b439539c0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; syntax can only &lt;em&gt;set&lt;/em&gt; a data-bound property. If you need to do something more, you can write the expanded form; for example, the following changes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to uppercase:</source>
          <target state="translated">この &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 構文は、データバインドプロパティのみを&lt;em&gt;設定&lt;/em&gt;できます。さらに何かする必要がある場合は、展開されたフォームを作成できます。たとえば、次は &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 値を大文字に変更します。</target>
        </trans-unit>
        <trans-unit id="d891bfbbc30a830ed00d349d04e68d42b5ea2457" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;bootstrap&lt;/code&gt; method is a direct replacement (takes same arguments) for AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/a&gt; method. Unlike AngularJS, this bootstrap is asynchronous.</source>
          <target state="translated">この &lt;code&gt;bootstrap&lt;/code&gt; メソッドは、AngularJSの&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;bootstrap&lt;/code&gt; &lt;/a&gt;メソッドの直接の置き換え（同じ引数をとります）です。AngularJSとは異なり、このブートストラップは非同期です。</target>
        </trans-unit>
        <trans-unit id="a81bbff7f4c2b4f66516ab105c5f2da6f8908842" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;getHeroes()&lt;/code&gt; returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th).</source>
          <target state="translated">この &lt;code&gt;getHeroes()&lt;/code&gt; は、位置1と5のスライスされたヒーローのリストを返し、トップヒーローの4つ（2番目、3番目、4番目、および5番目）のみを返します。</target>
        </trans-unit>
        <trans-unit id="9b89a86d9e9910b9545a4d39e96b18d0d3af5a5b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;outlets&lt;/code&gt; object within an outer object was completely unnecessary when there was only one route and one &lt;em&gt;unnamed&lt;/em&gt; outlet to think about.</source>
          <target state="translated">考えるべきルートと&lt;em&gt;名前のない&lt;/em&gt;アウトレットが1つしかない場合、外部オブジェクト内のこの &lt;code&gt;outlets&lt;/code&gt; オブジェクトは完全に不要でした。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5491cacef48b72757c7e430268f1e44c75a5a9c3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;outlets&lt;/code&gt; object within an outer object was unnecessary when there was only one route and one unnamed outlet.</source>
          <target state="translated">ルートが1つと名前のないアウトレットが1つしかない場合、外部オブジェクト内のこの &lt;code&gt;outlets&lt;/code&gt; オブジェクトは不要でした。</target>
        </trans-unit>
        <trans-unit id="7f20e0dbf005f61cffb8c3dd9af39a375a30b434" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial provides an introduction to the fundamentals of Angular. It shows you how to set up your local development environment and develop an app using the &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI tool&lt;/a&gt;.</source>
          <target state="translated">この&lt;em&gt;英雄ツアー&lt;/em&gt;チュートリアルでは、Angularの基本を紹介します。ローカル開発環境をセットアップし、&lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLIツール&lt;/a&gt;を使用してアプリを開発する方法を示します。</target>
        </trans-unit>
        <trans-unit id="c24943786f27bf8eb8f423a4535eae1d8c0db2ea" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial shows you how to set up your local development environment and develop an app using the &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI tool&lt;/a&gt;, and provides an introduction to the fundamentals of Angular.</source>
          <target state="translated">この&lt;em&gt;Tourof Heroes&lt;/em&gt;チュートリアルでは、ローカル開発環境をセットアップし、&lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLIツール&lt;/a&gt;を使用してアプリを開発する方法を示し、Angularの基礎を紹介します。</target>
        </trans-unit>
        <trans-unit id="f09b226e4f2c4eb0d926e572d4a75f6880da5490" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;no-op&lt;/em&gt; interceptor simply calls &lt;code&gt;next.handle()&lt;/code&gt; with the original request and returns the observable without doing a thing.</source>
          <target state="translated">この&lt;em&gt;no-op&lt;/em&gt;インターセプターは、元のリクエストで単に &lt;code&gt;next.handle()&lt;/code&gt; を呼び出し、何もせずにオブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="50210317fa118bab69579c2022e5d9a816190d39" translate="yes" xml:space="preserve">
          <source>This API is the recommended way to construct injectors in performance-sensitive parts.</source>
          <target state="translated">このAPIは、性能に敏感な部分にインジェクタを構築するために推奨されている方法です。</target>
        </trans-unit>
        <trans-unit id="0afd71a82786c8f3561d56c5cfd0be5839b4503c" translate="yes" xml:space="preserve">
          <source>This HTML uses an Angular directive, &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;. This directive connects the routes you defined to your template files.</source>
          <target state="translated">このHTMLは、Angularディレクティブ &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; を使用します。このディレクティブは、定義したルートをテンプレートファイルに接続します。</target>
        </trans-unit>
        <trans-unit id="469f1d1eec641289327d7f725b8bc80d83c5b953" translate="yes" xml:space="preserve">
          <source>This Style Guide is for anyone who contributes to the Angular documentation (this site). These guidelines should be followed by all authors. Deviations must be approved by a documentation editor.</source>
          <target state="translated">このスタイルガイドは、Angularのドキュメント(当サイト)に貢献するすべての人のためのものです。このガイドラインはすべての執筆者が遵守すべきものです。逸脱はドキュメント編集者の承認を得なければなりません。</target>
        </trans-unit>
        <trans-unit id="3415857a9e6030331c79e1e76604015a5df5e041" translate="yes" xml:space="preserve">
          <source>This UI uses the HTML unordered list with &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags. The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is the Angular &quot;repeater&quot; directive. It marks that &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element (and its children) as the &quot;repeater template&quot;:</source>
          <target state="translated">このUIは、 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; タグと&amp;lt;li&amp;gt;タグが付いたHTML順序なしリストを使用します。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; での &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素は、角度「リピーター」ディレクティブです。その &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素（およびその子）を「リピーターテンプレート」としてマークします。</target>
        </trans-unit>
        <trans-unit id="2b4ebc81415f90795ab79ed8a5b2cd8f2bb7595a" translate="yes" xml:space="preserve">
          <source>This XML element represents the translation of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; greeting tag that you marked with the &lt;code&gt;i18n&lt;/code&gt; attribute earlier in this guide.</source>
          <target state="translated">このXML要素は、このガイドの前半で &lt;code&gt;i18n&lt;/code&gt; 属性でマークした &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; グリーティングタグの翻訳を表します。</target>
        </trans-unit>
        <trans-unit id="48298b5a19ab51f248711bfb5fa88cc617b0670f" translate="yes" xml:space="preserve">
          <source>This allows the Angular Language Service to provide diagnostics and completions in &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">これにより、Angular Language Serviceは &lt;code&gt;.ts&lt;/code&gt; ファイルで診断と補完を提供できます。</target>
        </trans-unit>
        <trans-unit id="98f7af4e84f120f59a1303fcf4a9447a45a5d38a" translate="yes" xml:space="preserve">
          <source>This allows the compiler to generate a reference to &lt;code&gt;ɵ0&lt;/code&gt; in the factory without having to know what the value of &lt;code&gt;ɵ0&lt;/code&gt; contains.</source>
          <target state="translated">これにより、コンパイラーは、 &lt;code&gt;ɵ0&lt;/code&gt; の値が何であるかを知らなくても、ファクトリーで &lt;code&gt;ɵ0&lt;/code&gt; への参照を生成できます。</target>
        </trans-unit>
        <trans-unit id="24015a5bb2d8b1f8210c5acd6f640d4dc6d483b2" translate="yes" xml:space="preserve">
          <source>This allows us to add new states without having to include separate transitions for each one.</source>
          <target state="translated">これにより、新しい状態を追加する際に、それぞれに個別の遷移を含める必要がありません。</target>
        </trans-unit>
        <trans-unit id="cbe0ef929bc0631d02b1205466d152dddaeabe4f" translate="yes" xml:space="preserve">
          <source>This allows you to set appropriate styles for individual components that won&amp;rsquo;t leak into other parts of the application.</source>
          <target state="translated">これにより、アプリケーションの他の部分にリークしない個々のコンポーネントに適切なスタイルを設定できます。</target>
        </trans-unit>
        <trans-unit id="fa04bc183c4a35ffd59532acaddb459c40802b8c" translate="yes" xml:space="preserve">
          <source>This always means importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/common&lt;/code&gt; for access to the Angular directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt;. You can import it directly or from another NgModule that &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;re-exports&lt;/a&gt; it.</source>
          <target state="translated">これは常に、 &lt;code&gt;@angular/common&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; / commonからCommonModuleをインポートして、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;NgFor&lt;/code&gt; などのAngularディレクティブにアクセスすることを意味します。直接インポートすることも、&lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;再エクスポート&lt;/a&gt;する別のNgModuleからインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="e4af21eecd43fe210746ff3a4c62a38f49ffe7f9" translate="yes" xml:space="preserve">
          <source>This app has many of the features you'd expect to find in a data-driven application. It acquires and displays a list of heroes, edits a selected hero's detail, and navigates among different views of heroic data.</source>
          <target state="translated">このアプリは、データ駆動型のアプリに期待される機能の多くを持っています。ヒーローのリストを取得して表示したり、選択したヒーローの詳細を編集したり、ヒーローデータの異なるビュー間を移動したりすることができます。</target>
        </trans-unit>
        <trans-unit id="f17ea08bfc5149a70f6152907b2632dc2a63714a" translate="yes" xml:space="preserve">
          <source>This app provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the app's root injector, as a side-effect of importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;. You should provide interceptors in &lt;code&gt;AppModule&lt;/code&gt; as well.</source>
          <target state="translated">このアプリは、提供 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; インポートするの副作用として、アプリのルートインジェクターで &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をして &lt;code&gt;AppModule&lt;/code&gt; 。 &lt;code&gt;AppModule&lt;/code&gt; にもインターセプターを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="9010af53dce21e99cd1b98b6918ed08a568edceb" translate="yes" xml:space="preserve">
          <source>This app uses more terse &quot;variable assignment&quot; style simply for brevity.</source>
          <target state="translated">このアプリでは、簡潔にするために、より簡潔な「変数の割り当て」スタイルを使用しています。</target>
        </trans-unit>
        <trans-unit id="e2dd29b7095751503adbe18ae104950880b8fed2" translate="yes" xml:space="preserve">
          <source>This application deletes a hero with the &lt;code&gt;HttpClient.delete&lt;/code&gt; method by passing the hero's id in the request URL.</source>
          <target state="translated">このアプリケーションは、リクエストURLでヒーローのIDを渡すことにより、 &lt;code&gt;HttpClient.delete&lt;/code&gt; メソッドでヒーローを削除します。</target>
        </trans-unit>
        <trans-unit id="fb866e223d05018eca2dedfbe444966b166935fb" translate="yes" xml:space="preserve">
          <source>This application won't re-use the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. The user always returns to the hero list to select another hero to view. There's no way to navigate from one hero detail to another hero detail without visiting the list component in between. Therefore, the router creates a new &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance every time.</source>
          <target state="translated">このアプリケーションは、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; を再利用しません。ユーザーは常にヒーローリストに戻って、表示する別のヒーローを選択します。間にあるリストコンポーネントにアクセスせずに、あるヒーローの詳細から別のヒーローの詳細に移動する方法はありません。したがって、ルーターは毎回新しい &lt;code&gt;HeroDetailComponent&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="448875963d3ea5d9faf62ce4ea4e238a24bd4684" translate="yes" xml:space="preserve">
          <source>This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</source>
          <target state="translated">このアプローチにより、グローバルスタイルが異なっていても、どこか他の場所でコンポーネントを再利用したり、コンポーネントの意図した外観を提供したりすることが容易になります。</target>
        </trans-unit>
        <trans-unit id="736cdde48162e97e7bae316bb32e7680eb170f89" translate="yes" xml:space="preserve">
          <source>This approach works for prototyping, but is not robust or maintainable. As soon as you try to test this component or get heroes from a remote server, you have to change the implementation of &lt;code&gt;HeroesListComponent&lt;/code&gt; and replace every use of the &lt;code&gt;HEROES&lt;/code&gt; mock data.</source>
          <target state="translated">このアプローチはプロトタイピングでは機能しますが、堅牢または保守可能ではありません。このコンポーネントをテストするか、リモートサーバーからヒーローを取得しようとするとすぐに、 &lt;code&gt;HeroesListComponent&lt;/code&gt; の実装を変更し、 &lt;code&gt;HEROES&lt;/code&gt; モックデータのすべての使用を置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="0acaa2b4ca7df60a89c610729a6dc049181aab2c" translate="yes" xml:space="preserve">
          <source>This array lacks a route parameter because previously you didn't need to send information to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">以前は &lt;code&gt;HeroListComponent&lt;/code&gt; に情報を送信する必要がなかったため、この配列にはルートパラメーターがありません。</target>
        </trans-unit>
        <trans-unit id="d2207c94db1f3c39ac92627d2d416a732485be1c" translate="yes" xml:space="preserve">
          <source>This array lacks a route parameter because you had no reason to send information to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; に情報を送信する理由がなかったため、この配列にはルートパラメータがありません。</target>
        </trans-unit>
        <trans-unit id="e9b9947c5ef101e16618174c23e01f209fae9d4e" translate="yes" xml:space="preserve">
          <source>This article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.</source>
          <target state="translated">この記事では、Circle CIとTravis CIを実行するためにプロジェクトを設定する方法と、どちらの環境でもChromeブラウザでテストを実行できるようにテスト設定を更新する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="4e02ae1fdc78e80303d48713d37550a281676bcb" translate="yes" xml:space="preserve">
          <source>This asynchronous approach &lt;em&gt;will work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; requests heroes from the server.</source>
          <target state="translated">この非同期のアプローチ&lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;HeroService&lt;/code&gt; がサーバーからヒーローをリクエストするときに機能します。</target>
        </trans-unit>
        <trans-unit id="9e58e666a6e882960d6b1daf78543b6547ba94f0" translate="yes" xml:space="preserve">
          <source>This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;.</source>
          <target state="translated">この攻撃は、返されたJSONがJavaScriptとして実行可能な場合にのみ成功します。サーバーは、慣例的に、よく知られている文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; を使用して、すべてのJSON応答にプレフィックスを付けて実行不可にすることで、攻撃を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="651be0a8100915d5529b17ae73b92bbe7b153f12" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also defines an empty &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method, to prevent the &lt;a href=&quot;../api/core/compiler&quot;&gt;Compiler&lt;/a&gt; from returning errors. This is necessary because the module will not have a &lt;code&gt;bootstrap&lt;/code&gt; declaration on its &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">この最小限の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートします。これは、すべてのAngularブラウザーベースのアプリが持つ必要のあるモジュールです。また、空の &lt;code&gt;ngDoBootstrap()&lt;/code&gt; メソッドを定義して、&lt;a href=&quot;../api/core/compiler&quot;&gt;コンパイラ&lt;/a&gt;がエラーを返さないようにします。これは、モジュールがその &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータで &lt;code&gt;bootstrap&lt;/code&gt; 宣言を持たないために必要です。</target>
        </trans-unit>
        <trans-unit id="f56abc002d8d199ab12c7a00e8eceb4cb5324712" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also imports &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt;, which exports providers that will be used for upgrading and downgrading services and components.</source>
          <target state="translated">この最小限の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートします。これは、すべてのAngularブラウザーベースのアプリが持つ必要のあるモジュールです。また、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; からインポートします。これにより、サービスとコンポーネントのアップグレードとダウングレードに使用されるプロバイダーがエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="b7707e5e049453b4bfe2c53a590c89b76a5930cb" translate="yes" xml:space="preserve">
          <source>This base route reuse strategy only reuses routes when the matched router configs are identical. This prevents components from being destroyed and recreated when just the fragment or query parameters change (that is, the existing component is &lt;em&gt;reused&lt;/em&gt;).</source>
          <target state="translated">この基本ルート再利用戦略は、一致したルーター構成が同一である場合にのみルートを再利用します。これにより、フラグメントまたはクエリパラメータのみが変更された場合（つまり、既存のコンポーネントが&lt;em&gt;再利用された場合&lt;/em&gt;）にコンポーネントが破棄および再作成されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="4182fbf9bcd985eb43d694af8b1af19720683102" translate="yes" xml:space="preserve">
          <source>This behavior necessarily changes when you use lazy loading. Lazy loading is when you load modules only when you need them; for example, when routing. They aren&amp;rsquo;t loaded right away like with eagerly loaded modules. This means that any services listed in their provider arrays aren&amp;rsquo;t available because the root injector doesn&amp;rsquo;t know about these modules.</source>
          <target state="translated">遅延読み込みを使用すると、この動作は必然的に変化します。遅延読み込みは、必要なときにのみモジュールを読み込む場合です。たとえば、ルーティング時。熱心に読み込まれたモジュールのように、すぐには読み込まれません。これは、ルートインジェクターがこれらのモジュールを認識していないため、プロバイダーアレイにリストされているサービスが利用できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d78768b8b53f7f8d52aad3d6a653f672b2d18303" translate="yes" xml:space="preserve">
          <source>This binding causes the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; to span two columns.</source>
          <target state="translated">このバインディングにより、 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; は2つの列にまたがります。</target>
        </trans-unit>
        <trans-unit id="ab02175f78bb844c7114edbf8c6e52980e6dba3f" translate="yes" xml:space="preserve">
          <source>This cadence of releases gives eager developers access to new features as soon as they are fully developed and pass through our code review and integration testing processes, while maintaining the stability and reliability of the platform for production users that prefer to receive features after they have been validated by Google and other developers that use the pre-release builds.</source>
          <target state="translated">また、Google やプレリリースビルドを使用する他の開発者によって検証された後に機能を受け取りたいと考えているプロダクションユーザーのために、プラットフォームの安定性と信頼性を維持しています。</target>
        </trans-unit>
        <trans-unit id="35a35e5d7d8bb3b5d8a866028a9f757d0c2abbb7" translate="yes" xml:space="preserve">
          <source>This cadence of releases gives you access to new features as soon as they are ready, while maintaining the stability and reliability of the platform for production users.</source>
          <target state="translated">このようなリリースの流れにより、プロダクションユーザー向けのプラットフォームの安定性と信頼性を維持しながら、新機能の準備が整い次第、すぐにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="de8dbaffe2662ccb066fdee3c1966e668ead9335" translate="yes" xml:space="preserve">
          <source>This can be a problem if you have to change your app's location. If you setup a redirect from the old location (for example &lt;code&gt;example.com&lt;/code&gt;) to the new location (for example &lt;code&gt;www.example.com&lt;/code&gt;) the worker will stop working. Also, the redirect won't even trigger for users who are loading the site entirely from Service Worker. The old worker (registered at &lt;code&gt;example.com&lt;/code&gt;) tries to update and sends requests to the old location &lt;code&gt;example.com&lt;/code&gt; which get redirected to the new location &lt;code&gt;www.example.com&lt;/code&gt; and create the error &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">アプリの場所を変更する必要がある場合、これは問題になる可能性があります。古い場所（たとえば &lt;code&gt;example.com&lt;/code&gt; ）から新しい場所（たとえば &lt;code&gt;www.example.com&lt;/code&gt; ）へのリダイレクトを設定すると、ワーカーは動作を停止します。また、Service Workerからサイトを完全にロードしているユーザーに対してもリダイレクトはトリガーされません。古いワーカー（ &lt;code&gt;example.com&lt;/code&gt; に登録されている）が更新を試み、新しいロケーション &lt;code&gt;www.example.com&lt;/code&gt; にリダイレクトされる要求を古いロケーション &lt;code&gt;example.com&lt;/code&gt; に送信し、エラーを作成します &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt; リダイレクトの背後にあり&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;、&lt;/a&gt;許可されていません。</target>
        </trans-unit>
        <trans-unit id="cf472237a640d8cae814bf8d16bcc95349771c9f" translate="yes" xml:space="preserve">
          <source>This can be a problem if you have to change your app's location. If you setup a redirect from the old location (for example &lt;code&gt;example.com&lt;/code&gt;) to the new location (for example &lt;code&gt;www.example.com&lt;/code&gt;) the worker will stop working. Also, the redirect won't even trigger for users who are loading the site entirely from Service Worker. The old worker (registered at &lt;code&gt;example.com&lt;/code&gt;) tries to update and sends requests to the old location &lt;code&gt;example.com&lt;/code&gt; which get redirected to the new location &lt;code&gt;www.example.com&lt;/code&gt; and create the error &lt;code&gt;The script resource is behind a redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">アプリの場所を変更する必要がある場合、これは問題になる可能性があります。古い場所（ &lt;code&gt;example.com&lt;/code&gt; など）から新しい場所（ &lt;code&gt;www.example.com&lt;/code&gt; など）へのリダイレクトを設定すると、ワーカーは動作を停止します。また、ServiceWorkerからサイトを完全にロードしているユーザーに対してもリダイレクトはトリガーされません。古いワーカー（ &lt;code&gt;example.com&lt;/code&gt; に登録）は更新を試み、古い場所 &lt;code&gt;example.com&lt;/code&gt; にリクエストを送信します。このリクエストは、新しい場所 &lt;code&gt;www.example.com&lt;/code&gt; にリダイレクトされ、エラーを作成します &lt;code&gt;The script resource is behind a redirect, which is disallowed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a25a7112462a90a222ddd01185604490e952693" translate="yes" xml:space="preserve">
          <source>This can be used to resume testing after events have triggered asynchronous activity or asynchronous change detection.</source>
          <target state="translated">これは、イベントが非同期アクティビティや非同期変更検出をトリガした後にテストを再開するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="934112ccd1aa2b6915e125429be40b8b0e576f0a" translate="yes" xml:space="preserve">
          <source>This can be useful when scanning through code and looking for observable values. Also, if you want a property to store the most recent value from an observable, it can be convenient to simply use the same name with or without the &amp;ldquo;$&amp;rdquo;.</source>
          <target state="translated">これは、コードをスキャンして監視可能な値を探すときに役立ちます。また、プロパティにオブザーバブルの最新の値を格納する場合は、「$」の有無にかかわらず同じ名前を使用すると便利です。</target>
        </trans-unit>
        <trans-unit id="9f44c321dfe09485e6daf24efdf592a980b9e74b" translate="yes" xml:space="preserve">
          <source>This can cause confusion. For example:</source>
          <target state="translated">これは混乱を招く可能性があります。例えば</target>
        </trans-unit>
        <trans-unit id="2b2a566810683bdb154f2660dc33dfd48367534d" translate="yes" xml:space="preserve">
          <source>This can happen if you refer to an ambient type. For example, the &lt;code&gt;Window&lt;/code&gt; type is an ambient type declared in the global &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">これは、アンビエントタイプを参照する場合に発生する可能性があります。たとえば、 &lt;code&gt;Window&lt;/code&gt; タイプは、グローバル &lt;code&gt;.d.ts&lt;/code&gt; ファイルで宣言されたアンビエントタイプです。</target>
        </trans-unit>
        <trans-unit id="6476281277699a0797217af1c8c95aadca9fed5f" translate="yes" xml:space="preserve">
          <source>This can happen if you use a number as a property name as in the following example.</source>
          <target state="translated">これは、以下の例のようにプロパティ名に数字を使用した場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3b41585be32bdaba39097b77ac3bb57808c72252" translate="yes" xml:space="preserve">
          <source>This can happen when a &lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;route guard&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;ルートガード&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を返すか、 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すことによってリダイレクトを開始するときに発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="161acaf31fb43a0787ee8fbb9353bde452188f86" translate="yes" xml:space="preserve">
          <source>This causes the CLI to create a folder called &lt;code&gt;customer-dashboard&lt;/code&gt; with a file inside called &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; with the following contents:</source>
          <target state="translated">これにより、CLIは &lt;code&gt;customer-dashboard&lt;/code&gt; という名前のフォルダーを作成し、その中に &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; という名前のファイルを以下の内容で作成します。</target>
        </trans-unit>
        <trans-unit id="5019a44a75c49b88537ac9e8329f1c2eab2831e5" translate="yes" xml:space="preserve">
          <source>This class is an &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">このクラスは、AngularJSコアサービスを提供するためにインポートする &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; であり、ハイブリッドアップグレードアプリケーションのブートストラップに使用されるインスタンスメソッドを持っています。</target>
        </trans-unit>
        <trans-unit id="025bc612549c84721126511ec42b2a6d0ff1d56c" translate="yes" xml:space="preserve">
          <source>This class is immutable; all mutation operations return a new instance.</source>
          <target state="translated">このクラスは不変で、すべての突然変異操作は新しいインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="d3d60295749b3a3a0404d6398d78e18e444489d5" translate="yes" xml:space="preserve">
          <source>This class is only used internally in the &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このクラスは、 &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; で内部的にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="801d9cace214c9cf01792d4f29b30f5848a25da1" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは、アプリケーション開発者が直接使用しないでください。代わりに、&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d1d6a70007738552506319e31c6ae61765926844" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは、アプリケーション開発者が直接使用しないでください。代わりに、&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="1130101a82611d98bbdc3094466ba2af2e0c67ec" translate="yes" xml:space="preserve">
          <source>This code adds the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array. Next, the code uses the &lt;code&gt;forRoot()&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to define your two routes. This method takes an array of JavaScript objects, with each object defining the proprties of a route. The &lt;code&gt;forRoot()&lt;/code&gt; method ensures that your application only instantiates one &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. For more information, see &lt;a href=&quot;singleton-services#forroot-and-the-router&quot;&gt;Singleton Services&lt;/a&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;imports&lt;/code&gt; 配列に追加します。次は、コードが使用 &lt;code&gt;forRoot()&lt;/code&gt; のメソッド &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; をあなたの二つの経路を定義します。このメソッドはJavaScriptオブジェクトの配列を取り、各オブジェクトがルートのプロパティを定義します。 &lt;code&gt;forRoot()&lt;/code&gt; メソッドの性を保証アプリケーションが一つだけインスタンス化することを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を。詳細については、&lt;a href=&quot;singleton-services#forroot-and-the-router&quot;&gt;シングルトンサービスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f7dbb83be6aba801790f665b970b9f834230c23e" translate="yes" xml:space="preserve">
          <source>This code inspects certain &lt;em&gt;values of interest&lt;/em&gt;, capturing and comparing their current state against previous values. It writes a special message to the log when there are no substantive changes to the &lt;code&gt;hero&lt;/code&gt; or the &lt;code&gt;power&lt;/code&gt; so you can see how often &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;()&lt;/code&gt; is called. The results are illuminating.</source>
          <target state="translated">このコードは&lt;em&gt;、関心の&lt;/em&gt;ある特定の&lt;em&gt;値を&lt;/em&gt;検査し、それらの現在の状態をキャプチャして以前の値と比較します。 &lt;code&gt;hero&lt;/code&gt; や &lt;code&gt;power&lt;/code&gt; 実質的な変更がない場合は、ログに特別なメッセージを書き込むため、 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;()&lt;/code&gt; が呼び出される頻度を確認できます。結果は明るいです。</target>
        </trans-unit>
        <trans-unit id="d5c998372f08c1a101f67cf6fc6453dc480a13a2" translate="yes" xml:space="preserve">
          <source>This code inspects certain &lt;em&gt;values of interest&lt;/em&gt;, capturing and comparing their current state against previous values. It writes a special message to the log when there are no substantive changes to the &lt;code&gt;hero&lt;/code&gt; or the &lt;code&gt;power&lt;/code&gt; so you can see how often &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; is called. The results are illuminating:</source>
          <target state="translated">このコードは、対象となる特定の&lt;em&gt;値を&lt;/em&gt;検査し、それらの現在の状態をキャプチャして、以前の値と比較します。 &lt;code&gt;hero&lt;/code&gt; や &lt;code&gt;power&lt;/code&gt; 実質的な変更がない場合は、特別なメッセージがログに書き込まれるため、 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; が呼び出される頻度を確認できます。結果は輝かしいです：</target>
        </trans-unit>
        <trans-unit id="db010d4e9e3ffb1514bc2b0d8a75b9801342ba2f" translate="yes" xml:space="preserve">
          <source>This code repeats the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tag for each power in the list of powers. The &lt;code&gt;pow&lt;/code&gt; template input variable is a different power in each iteration; you display its name using the interpolation syntax.</source>
          <target state="translated">このコードは、電源のリストにある電源ごとに &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; タグを繰り返します。 &lt;code&gt;pow&lt;/code&gt; テンプレート入力変数は、各反復において異なる電力です。補間構文を使用して名前を表示します。</target>
        </trans-unit>
        <trans-unit id="75b5c5fa1c91023ea749d4aa233f6b4929e1dfb1" translate="yes" xml:space="preserve">
          <source>This code sets the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;code&gt;value&lt;/code&gt; property by binding to the &lt;code&gt;name&lt;/code&gt; property. To listen for changes to the value, the code binds to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. When the user makes changes, the &lt;code&gt;input&lt;/code&gt; event is raised, and the binding executes the statement within a context that includes the DOM event object, &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;name&lt;/code&gt; プロパティにバインドすることにより、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; プロパティを設定します。値の変更をリッスンするために、コードは &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;input&lt;/code&gt; イベントにバインドします。ユーザーが変更を加えると、 &lt;code&gt;input&lt;/code&gt; イベントが発生し、バインディングはDOMイベントオブジェクト &lt;code&gt;$event&lt;/code&gt; を含むコンテキスト内でステートメントを実行します。</target>
        </trans-unit>
        <trans-unit id="c635cb0e548cea6b4f39f0f4a00a64dd0890bc38" translate="yes" xml:space="preserve">
          <source>This code uses only one &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;, so only one subscription is created. The conditional statement stores the result of &lt;code&gt;userStream|&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; in the local variable &lt;code&gt;user&lt;/code&gt;. You can then bind the local &lt;code&gt;user&lt;/code&gt; repeatedly.</source>
          <target state="translated">このコードは1つの &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; のみを使用するため、1つのサブスクリプションのみが作成されます。条件ステートメントは、 &lt;code&gt;userStream|&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 結果を格納します。ローカル変数 &lt;code&gt;user&lt;/code&gt; の非同期。その後、ローカル &lt;code&gt;user&lt;/code&gt; 繰り返しバインドできます。</target>
        </trans-unit>
        <trans-unit id="077f99384ba94951a54310fe9d28e905bc2e0a9b" translate="yes" xml:space="preserve">
          <source>This code uses only one &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;, so only one subscription is created. The conditional statement stores the result of &lt;code&gt;userStream|async&lt;/code&gt; in the local variable &lt;code&gt;user&lt;/code&gt;. You can then bind the local &lt;code&gt;user&lt;/code&gt; repeatedly.</source>
          <target state="translated">このコードは1つの &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; のみを使用するため、1つのサブスクリプションのみが作成されます。条件ステートメントは、 &lt;code&gt;userStream|async&lt;/code&gt; 結果をローカル変数 &lt;code&gt;user&lt;/code&gt; に格納します。その後、ローカル &lt;code&gt;user&lt;/code&gt; 繰り返しバインドできます。</target>
        </trans-unit>
        <trans-unit id="13648ab24db66abd7c6828bea92fd0f6dff2d7ba" translate="yes" xml:space="preserve">
          <source>This command creates the following &lt;code&gt;UserService&lt;/code&gt; skeleton:</source>
          <target state="translated">このコマンドは、次の &lt;code&gt;UserService&lt;/code&gt; スケルトンを作成します。</target>
        </trans-unit>
        <trans-unit id="53ca835c29b278849f8cc8fdbc5ec1ec43128a05" translate="yes" xml:space="preserve">
          <source>This command updates both &lt;code&gt;@angular/material&lt;/code&gt; and its dependency &lt;code&gt;@angular/cdk&lt;/code&gt; in your workspace's &lt;code&gt;package.json&lt;/code&gt;. If either package contains an update schematic that covers migration from the existing version to a new version, the command runs that schematic on your workspace.</source>
          <target state="translated">このコマンドは、ワークスペースの &lt;code&gt;package.json&lt;/code&gt; 内の &lt;code&gt;@angular/material&lt;/code&gt; とその依存関係 &lt;code&gt;@angular/cdk&lt;/code&gt; 両方を更新します。いずれかのパッケージに、既存のバージョンから新しいバージョンへの移行をカバーする更新回路図が含まれている場合、コマンドはワークスペースでその回路図を実行します。</target>
        </trans-unit>
        <trans-unit id="d476387d6c2e84ce2ff55faed0c0f68d60302141" translate="yes" xml:space="preserve">
          <source>This command updates your project's &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;polyfills.ts&lt;/code&gt; files to import the &lt;code&gt;@angular/localize&lt;/code&gt; package.</source>
          <target state="translated">このコマンドは、プロジェクトの &lt;code&gt;package.json&lt;/code&gt; ファイルと &lt;code&gt;polyfills.ts&lt;/code&gt; ファイルを更新して、 &lt;code&gt;@angular/localize&lt;/code&gt; パッケージをインポートします。</target>
        </trans-unit>
        <trans-unit id="5f08f688b42cedaf1c2687380db97e840fa25cee" translate="yes" xml:space="preserve">
          <source>This completes the cross validation example. We managed to:</source>
          <target state="translated">これでクロスバリデーションの例が完成しました。なんとかできました。</target>
        </trans-unit>
        <trans-unit id="5c82d5954347561c2d21641e18971743651dd806" translate="yes" xml:space="preserve">
          <source>This component and its tree of child components receive &lt;code&gt;DateLoggerService&lt;/code&gt; instance. Components outside the tree continue to receive the original &lt;code&gt;LoggerService&lt;/code&gt; instance.</source>
          <target state="translated">このコンポーネントとその子コンポーネントのツリーは、 &lt;code&gt;DateLoggerService&lt;/code&gt; インスタンスを受け取ります。ツリー外のコンポーネントは、引き続き元の &lt;code&gt;LoggerService&lt;/code&gt; インスタンスを受け取ります。</target>
        </trans-unit>
        <trans-unit id="597e9233caedd83ac990f5386a4ce276f54df4c0" translate="yes" xml:space="preserve">
          <source>This component class has no dependencies. To test a service with no dependencies, you create it with &lt;code&gt;new&lt;/code&gt;, poke at its API, and assert expectations on its public state. Do the same with the component class.</source>
          <target state="translated">このコンポーネントクラスには依存関係はありません。依存関係のないサービスをテストするには、 &lt;code&gt;new&lt;/code&gt; を使用してサービスを作成し、そのAPI を調べて、パブリック状態に対する期待を表明します。コンポーネントクラスでも同じことを行います。</target>
        </trans-unit>
        <trans-unit id="c6c28a7b4cc8e7fda5755e8855df5f2f683d4200" translate="yes" xml:space="preserve">
          <source>This component class has no dependencies. To test these types of classes, follow the same steps as you would for a service that has no dependencies:</source>
          <target state="translated">このコンポーネント・クラスには依存関係がありません。これらのタイプのクラスをテストするには、依存関係のないサービスの場合と同じ手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="065a8c2a12fca59785e66b9536ad7a4d7503a70d" translate="yes" xml:space="preserve">
          <source>This component instance.</source>
          <target state="translated">このコンポーネントのインスタンス。</target>
        </trans-unit>
        <trans-unit id="a07464de42a69a73871d1c32b4cddf78f4a39cff" translate="yes" xml:space="preserve">
          <source>This component's &lt;code&gt;doSomething()&lt;/code&gt; method update's the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately. There's no &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;need to wait&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントの &lt;code&gt;doSomething()&lt;/code&gt; メソッドは、コンポーネントのデータバインド &lt;code&gt;comment&lt;/code&gt; プロパティをすぐに更新します。&lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;待つ必要は&lt;/a&gt;ありません。</target>
        </trans-unit>
        <trans-unit id="d24274c6577dbd524765b9a3853f26d6cf76951e" translate="yes" xml:space="preserve">
          <source>This component's &lt;code&gt;doSomething()&lt;/code&gt; method updates the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately. There's no need to &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;delay the update to ensure proper rendering&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントの &lt;code&gt;doSomething()&lt;/code&gt; メソッドは、コンポーネントのデータバインドされた &lt;code&gt;comment&lt;/code&gt; プロパティをすぐに更新します。&lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;適切なレンダリングを保証するために更新を遅らせる&lt;/a&gt;必要はありません。</target>
        </trans-unit>
        <trans-unit id="8831291497a6d0587b26b1c8ca5ca8dbd14f9441" translate="yes" xml:space="preserve">
          <source>This component's injector lookup tokens. Includes the component itself plus the tokens that the component lists in its &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">このコンポーネントのインジェクタールックアップトークン。コンポーネント自体と、コンポーネントが &lt;code&gt;providers&lt;/code&gt; メタデータにリストするトークンを含めます。</target>
        </trans-unit>
        <trans-unit id="7b0506327a430462426c6e68b6e09fd639e04c8d" translate="yes" xml:space="preserve">
          <source>This concludes the &quot;Tour of Heroes&quot; tutorial. You're ready to learn more about Angular development in the fundamentals section, starting with the &lt;a href=&quot;../guide/architecture&quot;&gt;Architecture&lt;/a&gt; guide.</source>
          <target state="translated">これで「英雄ツアー」チュートリアルは終了です。&lt;a href=&quot;../guide/architecture&quot;&gt;アーキテクチャ&lt;/a&gt;ガイドから始めて、基礎のセクションでAngular開発の詳細を学ぶ準備が整いました。</target>
        </trans-unit>
        <trans-unit id="e37d0d91df8ad47c0dbbb5e123254e61fce1c600" translate="yes" xml:space="preserve">
          <source>This configuration caches &lt;code&gt;node_modules/&lt;/code&gt; and uses &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt;&lt;code&gt;npm run&lt;/code&gt;&lt;/a&gt; to run CLI commands, because &lt;code&gt;@angular/cli&lt;/code&gt; is not installed globally. The double dash (&lt;code&gt;--&lt;/code&gt;) is needed to pass arguments into the &lt;code&gt;npm&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;@angular/cli&lt;/code&gt; はグローバルにインストールされていないため、この構成は &lt;code&gt;node_modules/&lt;/code&gt; をキャッシュし、&lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt; &lt;code&gt;npm run&lt;/code&gt; &lt;/a&gt;を使用してCLIコマンドを実行します。引数を &lt;code&gt;npm&lt;/code&gt; スクリプトに渡すには、二重ダッシュ（ &lt;code&gt;--&lt;/code&gt; ）が必要です。</target>
        </trans-unit>
        <trans-unit id="1b488b5be2952d75c23fd56a333c827a2b7d402f" translate="yes" xml:space="preserve">
          <source>This configures the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; preloader to immediately load all lazy loaded routes (routes with a &lt;code&gt;loadChildren&lt;/code&gt; property).</source>
          <target state="translated">これにより、すべての遅延ロードされたルート（ &lt;code&gt;loadChildren&lt;/code&gt; プロパティを持つルート）をすぐにロードするように &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; プリローダーが構成されます。</target>
        </trans-unit>
        <trans-unit id="40d0adebce1666f54fd687822290b1370ce51244" translate="yes" xml:space="preserve">
          <source>This cookbook contains recipes for common component communication scenarios in which two or more components share information.</source>
          <target state="translated">このクックブックには、2 つ以上のコンポーネントが情報を共有する一般的なコンポーネント通信シナリオのレシピが含まれています。</target>
        </trans-unit>
        <trans-unit id="a322972c7d99a3ec23cfc786253fdee6e876e02e" translate="yes" xml:space="preserve">
          <source>This cookbook describes the steps required to set up and use Angular app files in Visual Studio 2015 within an ASP.NET 4.x project.</source>
          <target state="translated">このクックブックでは、ASP.NET 4.xプロジェクト内でVisual Studio 2015でAngularアプリファイルを設定して使用するために必要な手順を説明しています。</target>
        </trans-unit>
        <trans-unit id="81fab89603358b3015fbab03f643f5619e9e7e16" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to add components dynamically.</source>
          <target state="translated">このクックブックでは、 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; を使用してコンポーネントを動的に追加する方法を示します。</target>
        </trans-unit>
        <trans-unit id="e813c2193e41174a6e571245c4cd3c17e5e9558e" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;formGroup&lt;/code&gt; to dynamically render a simple form with different control types and validation. It's a primitive start. It might evolve to support a much richer variety of questions, more graceful rendering, and superior user experience. All such greatness has humble beginnings.</source>
          <target state="translated">このクックブックでは、 &lt;code&gt;formGroup&lt;/code&gt; を使用して、さまざまなコントロールタイプと検証を備えたシンプルなフォームを動的にレンダリングする方法を示します。それは原始的な始まりです。より多様な質問、より優雅なレンダリング、優れたユーザーエクスペリエンスをサポートするように進化する可能性があります。そのような偉大さはすべて謙虚な始まりを持っています。</target>
        </trans-unit>
        <trans-unit id="d822107036c9c9bdc81f05621421ed35206b48fe" translate="yes" xml:space="preserve">
          <source>This cookbook uses &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;.</source>
          <target state="translated">このクックブックでは、&lt;a href=&quot;reactive-forms&quot;&gt;反応型を&lt;/a&gt;使用しています。</target>
        </trans-unit>
        <trans-unit id="d23601ec63a90736809116d022f4fadccabb0fbd" translate="yes" xml:space="preserve">
          <source>This cookbook uses the &lt;code&gt;Empty&lt;/code&gt; template with no added folders, no authentication, and no hosting. Pick the template and options appropriate for your project.</source>
          <target state="translated">このクックブックでは、 &lt;code&gt;Empty&lt;/code&gt; テンプレートを使用します。追加のフォルダー、認証、ホスティングはありません。プロジェクトに適したテンプレートとオプションを選択します。</target>
        </trans-unit>
        <trans-unit id="b56c91898d64379544ac2ea2325b00bc842db730" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;customers&lt;/code&gt; folder having the new lazy-loadable feature module &lt;code&gt;CustomersModule&lt;/code&gt; defined in the &lt;code&gt;customers.module.ts&lt;/code&gt; file and the routing module &lt;code&gt;CustomersRoutingModule&lt;/code&gt; defined in the &lt;code&gt;customers-routing.module.ts&lt;/code&gt; file. The command automatically declares the &lt;code&gt;CustomersComponent&lt;/code&gt; and imports &lt;code&gt;CustomersRoutingModule&lt;/code&gt; inside the new feature module.</source>
          <target state="translated">これは、作成し &lt;code&gt;customers&lt;/code&gt; 新しいレイジーロード可能な機能モジュールのフォルダ &lt;code&gt;CustomersModule&lt;/code&gt; で定義されて &lt;code&gt;customers.module.ts&lt;/code&gt; のファイルおよびルーティングモジュール &lt;code&gt;CustomersRoutingModule&lt;/code&gt; で定義された &lt;code&gt;customers-routing.module.ts&lt;/code&gt; ファイルを。コマンドが自動的に宣言し &lt;code&gt;CustomersComponent&lt;/code&gt; と輸入 &lt;code&gt;CustomersRoutingModule&lt;/code&gt; 新機能モジュール内部を。</target>
        </trans-unit>
        <trans-unit id="a651647f94c034ce66b15f4ab627c4ac2e28535c" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;customers&lt;/code&gt; folder with the new lazy-loadable module &lt;code&gt;CustomersModule&lt;/code&gt; defined in the file &lt;code&gt;customers.module.ts&lt;/code&gt;. The command automatically adds the &lt;code&gt;CustomerComponent&lt;/code&gt; to the new feature module.</source>
          <target state="translated">これにより、 &lt;code&gt;customers&lt;/code&gt; フォルダーが作成され、 &lt;code&gt;customers.module.ts&lt;/code&gt; ファイルで定義された、遅延読み込み可能な新しいモジュール &lt;code&gt;CustomersModule&lt;/code&gt; が作成されます。このコマンドは、 &lt;code&gt;CustomerComponent&lt;/code&gt; を新しい機能モジュールに自動的に追加します。</target>
        </trans-unit>
        <trans-unit id="14b67ee4f93cd53fc641ba3366b0aa1e81714ab4" translate="yes" xml:space="preserve">
          <source>This creates a new folder called &lt;code&gt;orders&lt;/code&gt; containing an &lt;code&gt;OrdersModule&lt;/code&gt; and &lt;code&gt;OrdersRoutingModule&lt;/code&gt;, along with the new &lt;code&gt;OrderComponent&lt;/code&gt; source files. The &lt;code&gt;order-list&lt;/code&gt; route is added to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array in &lt;code&gt;app-routing.module.ts&lt;/code&gt;, using the lazy-loading syntax.</source>
          <target state="translated">これにより、新しい &lt;code&gt;OrderComponent&lt;/code&gt; ソースファイルとともに、 &lt;code&gt;OrdersModule&lt;/code&gt; および &lt;code&gt;OrdersRoutingModule&lt;/code&gt; を含む、 &lt;code&gt;orders&lt;/code&gt; という新しいフォルダーが作成されます。 &lt;code&gt;order-list&lt;/code&gt; ルートがに追加される &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 中のアレイ &lt;code&gt;app-routing.module.ts&lt;/code&gt; 遅延ローディング構文を使用して、。</target>
        </trans-unit>
        <trans-unit id="12212d34d2986bacb58c68284883a32c3bce8fdb" translate="yes" xml:space="preserve">
          <source>This creates a new folder called &lt;code&gt;orders&lt;/code&gt; containing the &lt;code&gt;OrdersModule&lt;/code&gt; and &lt;code&gt;OrdersRoutingModule&lt;/code&gt;, along with the new &lt;code&gt;OrdersComponent&lt;/code&gt; source files. The &lt;code&gt;orders&lt;/code&gt; route, specified with the &lt;code&gt;--route&lt;/code&gt; option, is added to the &lt;code&gt;routes&lt;/code&gt; array inside the &lt;code&gt;app-routing.module.ts&lt;/code&gt; file, using the lazy-loading syntax.</source>
          <target state="translated">これにより、 &lt;code&gt;OrdersModule&lt;/code&gt; および &lt;code&gt;OrdersRoutingModule&lt;/code&gt; を含む &lt;code&gt;orders&lt;/code&gt; という新しいフォルダーが、新しい &lt;code&gt;OrdersComponent&lt;/code&gt; ソースファイルとともに作成されます。 &lt;code&gt;orders&lt;/code&gt; で指定された経路、 &lt;code&gt;--route&lt;/code&gt; オプションは、に追加され &lt;code&gt;routes&lt;/code&gt; 内部アレイ &lt;code&gt;app-routing.module.ts&lt;/code&gt; 遅延ローディング構文を使用して、ファイル。</target>
        </trans-unit>
        <trans-unit id="a0adbda48788d27b45342d5c21c7e2786033726c" translate="yes" xml:space="preserve">
          <source>This creates a separate file named &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; to store the NgModule's routes. The file includes an empty &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object that you can fill with routes to different components and NgModules.</source>
          <target state="translated">これにより、 &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; という名前の別のファイルが作成され、NgModuleのルートが保存されます。このファイルには、さまざまなコンポーネントやNgModuleへのルートを入力できる空の &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; オブジェクトが含まれています。</target>
        </trans-unit>
        <trans-unit id="1e0fcef7f7df8d4e453466c52facdaf940fe0d0a" translate="yes" xml:space="preserve">
          <source>This creates an app called &lt;code&gt;customer-app&lt;/code&gt; and the &lt;code&gt;--routing&lt;/code&gt; flag generates a file called &lt;code&gt;app-routing.module.ts&lt;/code&gt;, which is one of the files you need for setting up lazy loading for your feature module. Navigate into the project by issuing the command &lt;code&gt;cd customer-app&lt;/code&gt;.</source>
          <target state="translated">これはと呼ばれるアプリを作成 &lt;code&gt;customer-app&lt;/code&gt; と &lt;code&gt;--routing&lt;/code&gt; フラグが呼ばれるファイル生成 &lt;code&gt;app-routing.module.ts&lt;/code&gt; あなたの機能モジュールの遅延読み込みを設定するために必要なファイルの1つです。コマンド &lt;code&gt;cd customer-app&lt;/code&gt; を発行して、プロジェクトに移動します。</target>
        </trans-unit>
        <trans-unit id="0198faa84961169c4d04809b0185acf9e3ac22b4" translate="yes" xml:space="preserve">
          <source>This creates the &lt;code&gt;projects/my-lib&lt;/code&gt; folder in your workspace, which contains a component and a service inside an NgModule. The workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is updated with a project of type 'library'.</source>
          <target state="translated">これにより、ワークスペースに &lt;code&gt;projects/my-lib&lt;/code&gt; フォルダーが作成され、NgModule内のコンポーネントとサービスが含まれます。ワークスペース構成ファイル &lt;code&gt;angular.json&lt;/code&gt; は、タイプが「ライブラリー」のプロジェクトで更新されます。</target>
        </trans-unit>
        <trans-unit id="742c3e2e58b8f0be6640dfb54f738b9a9e7625e7" translate="yes" xml:space="preserve">
          <source>This declares that the input property &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive should be treated as a guard to the use of its template, implying that the template will only be instantiated if the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input property is true.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ディレクティブの入力プロパティ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; をそのテンプレートの使用に対する保護として扱う必要があることを宣言し、テンプレートは &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 入力プロパティがtrueの場合にのみインスタンス化されることを意味します。</target>
        </trans-unit>
        <trans-unit id="048e83daee9abd14678f6339d9376992f4af52ee" translate="yes" xml:space="preserve">
          <source>This default behavior is suitable for a typical &quot;multi-repo&quot; development style where each application resides in its own workspace. Beginners and intermediate users are encouraged to use &lt;code&gt;ng new&lt;/code&gt; to create a separate workspace for each application.</source>
          <target state="translated">このデフォルトの動作は、各アプリケーションが独自のワークスペースに存在する典型的な「マルチリポジトリ」開発スタイルに適しています。初心者と中級ユーザーは、 &lt;code&gt;ng new&lt;/code&gt; を使用して、アプリケーションごとに個別のワークスペースを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6587344c6ac0fb7a73ec81835299d2d7ce729572" translate="yes" xml:space="preserve">
          <source>This demo does neither. Instead, it asks the user to make that choice explicitly in a confirmation dialog box that &lt;em&gt;waits asynchronously for the user's answer&lt;/em&gt;.</source>
          <target state="translated">このデモはどちらも行いません。代わりに、ユーザーに&lt;em&gt;、ユーザーの回答を非同期&lt;/em&gt;的に&lt;em&gt;待機&lt;/em&gt;する確認ダイアログボックスで明示的に選択するように求め&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="87db080ed00574e5e5d7d6687a8530849c3aceb8" translate="yes" xml:space="preserve">
          <source>This demo uses dummy data for &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;powers&lt;/code&gt;. In a real app, you would inject a data service to get and save real data, or expose these properties as inputs and outputs.</source>
          <target state="translated">このデモでは、 &lt;code&gt;model&lt;/code&gt; と &lt;code&gt;powers&lt;/code&gt; ダミーデータを使用します。実際のアプリでは、データサービスを挿入して実際のデータを取得および保存するか、これらのプロパティを入力および出力として公開します。</target>
        </trans-unit>
        <trans-unit id="6b5876f473d01141acbb800a8ab479df9db1837f" translate="yes" xml:space="preserve">
          <source>This directive accepts an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance. It will then use this &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to match any child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances to child &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">このディレクティブは、既存の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを受け入れます。次に、この &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを使用して、任意の子 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスを、子の &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; ディレクティブに一致させます。</target>
        </trans-unit>
        <trans-unit id="a7989fce38212429c7062b9c5da6235e1e43e7a8" translate="yes" xml:space="preserve">
          <source>This directive can only be used as a child of &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; (within &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags).</source>
          <target state="translated">このディレクティブは、 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; の子としてのみ使用できます（ &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグ内）。</target>
        </trans-unit>
        <trans-unit id="251b666c976f4261c91fe4beed08cf42cce8548f" translate="yes" xml:space="preserve">
          <source>This directive can only be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このディレクティブは、親の &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="e18d93c8deadcb10dbc3f3516c1984ce080db614" translate="yes" xml:space="preserve">
          <source>This directive is designed to be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; (selector: &lt;code&gt;[formGroup]&lt;/code&gt;).</source>
          <target state="translated">このディレクティブは、親の &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; （セレクター： &lt;code&gt;[formGroup]&lt;/code&gt; ）で使用するように設計されています。</target>
        </trans-unit>
        <trans-unit id="8ac905b9010d53abe6967453b6081cf348d35f38" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">このディレクティブは、廃止された &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; セレクターが使用されているときに警告を表示するためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="b316720613e231db957c48b5c531a72244e235ef" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">このディレクティブは、廃止された &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; セレクターが使用されているときに警告を表示するためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="cf3a222ca96206b5b9edc9d51a79dbc263b73654" translate="yes" xml:space="preserve">
          <source>This directive is used by itself or as part of a larger form. Use the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; selector to activate it.</source>
          <target state="translated">このディレクティブは、単独で、またはより大きなフォームの一部として使用されます。 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; セレクターを使用してアクティブ化します。</target>
        </trans-unit>
        <trans-unit id="079bfc81b016d5fdb9440e147c8f59ceacfd53ed" translate="yes" xml:space="preserve">
          <source>This directive lets you add a CSS class to an element when the link's route becomes active.</source>
          <target state="translated">このディレクティブは、リンクのルートがアクティブになったときに、要素にCSSクラスを追加します。</target>
        </trans-unit>
        <trans-unit id="75bdf4a08a98952e88ab0d9d8d3f69ffb18f7db5" translate="yes" xml:space="preserve">
          <source>This document contains information and resources to help you keep your Angular apps and libraries up-to-date.</source>
          <target state="translated">このドキュメントには、Angularアプリやライブラリを最新の状態に保つための情報やリソースが含まれています。</target>
        </trans-unit>
        <trans-unit id="5c3c465a1a031a3ba31db55cb2026597de7378a1" translate="yes" xml:space="preserve">
          <source>This document contains the practices that we follow to provide you with a leading-edge app development platform, balanced with stability. We strive to ensure that future changes are always introduced in a predictable way. We want everyone who depends on Angular to know when and how new features are added, and to be well-prepared when obsolete ones are removed.</source>
          <target state="translated">このドキュメントには、安定性とバランスのとれた最先端のアプリ開発プラットフォームをお客様に提供するために、当社が実践していることが記載されています。私たちは、将来の変更が常に予測可能な方法で導入されるように努めています。Angularに依存しているすべての人が、いつ、どのように新機能が追加されたかを知り、陳腐化した機能が削除されたときに十分な準備ができるようにしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="5bc557b45ba44abe0921a0e64654f12154157a7c" translate="yes" xml:space="preserve">
          <source>This document explains how CLI builders integrate with the workspace configuration file, and shows how you can create your own builder.</source>
          <target state="translated">このドキュメントでは、CLI ビルダーがワークスペース設定ファイルとどのように統合されるかを説明し、独自のビルダーを作成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="a18d52460187370aee9da7ba825b392cfeb2488a" translate="yes" xml:space="preserve">
          <source>This document explains how to enable Angular service worker support in projects that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. It then uses a simple example to show you a service worker in action, demonstrating loading and basic caching.</source>
          <target state="translated">このドキュメントでは、&lt;a href=&quot;cli&quot;&gt;Angular CLIで&lt;/a&gt;作成したプロジェクトでAngular Service Workerサポートを有効にする方法について説明します。次に、簡単な例を使用してService Workerの動作を示し、読み込みと基本的なキャッシュを示します。</target>
        </trans-unit>
        <trans-unit id="91cf023004b2aaf04380d0ea7e79d9a637aeaec2" translate="yes" xml:space="preserve">
          <source>This document refers to a unit of translatable text as &quot;text,&quot; a &quot;message&quot;, or a &quot;text message.&quot;</source>
          <target state="translated">本明細書では、翻訳可能なテキストの単位を &quot;テキスト&quot;、&quot;メッセージ&quot;、または &quot;テキストメッセージ &quot;と呼ぶ。</target>
        </trans-unit>
        <trans-unit id="f12cdb59b126570dec1c8c00fc1543f0b13ae7d0" translate="yes" xml:space="preserve">
          <source>This does not use the deprecated jsdoc tag on purpose because it renders all overloads as deprecated in TSLint due to &lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522が&lt;/a&gt;原因でTSLintで非推奨としてすべてのオーバーロードがレンダリングされるため、これは意図的に非推奨のjsdocタグを使用しません。</target>
        </trans-unit>
        <trans-unit id="49942dcd9689b7ed449bd1f739e91d6c6991a659" translate="yes" xml:space="preserve">
          <source>This does the same things as the Circle CI configuration, except that Travis doesn't come with Chrome, so we use Chromium instead.</source>
          <target state="translated">これはサークルCI設定と同じことをしますが、TravisにはChromeが付属していないので、代わりにChromiumを使用しています。</target>
        </trans-unit>
        <trans-unit id="e20d0e4a3c8903623d5db93d1eaa42a7319f2bb4" translate="yes" xml:space="preserve">
          <source>This does the same things as the CircleCI configuration, except that Travis doesn't come with Chrome, so use Chromium instead.</source>
          <target state="translated">これはCircleCIの設定と同じですが、TravisにはChromeが付属していないので、代わりにChromiumを使用してください。</target>
        </trans-unit>
        <trans-unit id="7a173481108f8e08ee23eccdc0ba37f48670a382" translate="yes" xml:space="preserve">
          <source>This duration string specifies the network timeout. The network timeout is how long the Angular service worker will wait for the network to respond before using a cached response, if configured to do so. &lt;code&gt;timeout&lt;/code&gt; is a duration string, using the following unit suffixes:</source>
          <target state="translated">この期間文字列は、ネットワークタイムアウトを指定します。ネットワークタイムアウトは、Angular Service Workerがキャッシュされた応答を使用する前に、ネットワークが応答するまで待機する時間です（設定されている場合）。 &lt;code&gt;timeout&lt;/code&gt; は、次の単位接尾辞を使用した期間文字列です。</target>
        </trans-unit>
        <trans-unit id="148a52c96fd5321b2e9f47b1c411e3997ad1ee54" translate="yes" xml:space="preserve">
          <source>This ensures that the build and serve commands can find the configurations for specific build targets.</source>
          <target state="translated">これにより、ビルドコマンドとサーブコマンドが特定のビルドターゲットの設定を見つけることができるようになります。</target>
        </trans-unit>
        <trans-unit id="dd6ef74d3212dfa09ccacfec3ba04d981a0ae6bd" translate="yes" xml:space="preserve">
          <source>This error can occur if you use an expression in the &lt;code&gt;extends&lt;/code&gt; clause of a class.</source>
          <target state="translated">このエラーは、クラスの &lt;code&gt;extends&lt;/code&gt; 句で式を使用した場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f96ad016e893a674d5f49749d37377695df58a8c" translate="yes" xml:space="preserve">
          <source>This error often means that you haven't declared the directive &quot;x&quot; or haven't imported the NgModule to which &quot;x&quot; belongs.</source>
          <target state="translated">このエラーはしばしば、ディレクティブ &quot;x&quot; を宣言していないか、あるいは &quot;x&quot; が属する NgModule をインポートしていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="ef4ec03d4ed605a8e9e66585cd5c2453ff07a4af" translate="yes" xml:space="preserve">
          <source>This example adds a few getter methods. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthands for the template.</source>
          <target state="translated">この例では、いくつかのゲッターメソッドを追加します。リアクティブフォームでは、常にその親グループの &lt;code&gt;get&lt;/code&gt; メソッドを介して任意のフォームコントロールにアクセスできますが、テンプレートの短縮形としてゲッターを定義すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="835a254bafaad8e2e761a6f3738065e79183f666" translate="yes" xml:space="preserve">
          <source>This example adds a state transition from the &lt;code&gt;closed&lt;/code&gt; state to the &lt;code&gt;open&lt;/code&gt; state with a 0.5 second transition animation arc.</source>
          <target state="translated">この例では、0.5秒の遷移アニメーションアークで、 &lt;code&gt;closed&lt;/code&gt; 状態から &lt;code&gt;open&lt;/code&gt; た状態への状態遷移を追加します。</target>
        </trans-unit>
        <trans-unit id="e27903790bcd6cf8a4d227d598fb3d9c51e485a2" translate="yes" xml:space="preserve">
          <source>This example also adds a few getter methods. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthand for the template.</source>
          <target state="translated">この例では、いくつかのゲッターメソッドも追加しています。リアクティブフォームでは、親グループの &lt;code&gt;get&lt;/code&gt; メソッドを介していつでも任意のフォームコントロールにアクセスできますが、テンプレートの省略形としてゲッターを定義すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="47a1afa39668210136eb0481e3dfa7dda063e91e" translate="yes" xml:space="preserve">
          <source>This example app asks the user to be explicit with a confirmation dialog box that waits asynchronously for the user's response.</source>
          <target state="translated">この例のアプリでは、ユーザーの応答を非同期に待つ確認ダイアログ ボックスで、ユーザーに明示的な指示を求めます。</target>
        </trans-unit>
        <trans-unit id="3871ea91cb489329270131828414d4e4a419b07f" translate="yes" xml:space="preserve">
          <source>This example applies the &lt;code&gt;SpyDirective&lt;/code&gt; from the previous example to the &lt;code&gt;CounterComponent&lt;/code&gt; log, in order to watch the creation and destruction of log entries.</source>
          <target state="translated">この例では適用され &lt;code&gt;SpyDirective&lt;/code&gt; を、前の例から &lt;code&gt;CounterComponent&lt;/code&gt; のログエントリの作成と破棄を監視するために、ログ。</target>
        </trans-unit>
        <trans-unit id="91b20a46620fed8511ccd3504ac47cc1854c74e2" translate="yes" xml:space="preserve">
          <source>This example applies the &lt;code&gt;SpyDirective&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in an &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;&lt;em&gt;hero&lt;/em&gt; repeater managed by the parent &lt;code&gt;SpyComponent&lt;/code&gt;.</source>
          <target state="translated">この例は、親 &lt;code&gt;SpyComponent&lt;/code&gt; によって管理される &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;em&gt;ヒーロー&lt;/em&gt;リピーターの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に &lt;code&gt;SpyDirective&lt;/code&gt; を適用します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3dfd88d242d31d74d24a1d273231ff4e8624d83a" translate="yes" xml:space="preserve">
          <source>This example binds a &lt;code&gt;Promise&lt;/code&gt; to the view. Clicking the &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; button resolves the promise.</source>
          <target state="translated">この例では、 &lt;code&gt;Promise&lt;/code&gt; をビューにバインドします。「 &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; ボタンをクリックすると、約束が解決されます。</target>
        </trans-unit>
        <trans-unit id="76fea2ff263dbc0e5640bda0886d27fd33ac4eb8" translate="yes" xml:space="preserve">
          <source>This example completely replaces the component's &lt;code&gt;providers&lt;/code&gt; array with a new array containing a &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt;.</source>
          <target state="translated">この例では、コンポーネントの &lt;code&gt;providers&lt;/code&gt; 配列を &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt; を含む新しい配列で完全に置き換えます。</target>
        </trans-unit>
        <trans-unit id="b38e94209799b7cb2ad45b15b4c0f49aebeeaf6c" translate="yes" xml:space="preserve">
          <source>This example features an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; where a user can enter a value and click a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that raises an event. The &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; then relays the data to the parent component.</source>
          <target state="translated">この例は、ユーザーが値を入力してイベントを発生させる &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; をクリックできる &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; を特徴としています。次に、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; はデータを親コンポーネントにリレーします。</target>
        </trans-unit>
        <trans-unit id="e3900b3c5f734c8b42b0423653ffc07e9a8c5717" translate="yes" xml:space="preserve">
          <source>This example filters the &lt;code&gt;title&lt;/code&gt; property to uppercase.</source>
          <target state="translated">この例では、 &lt;code&gt;title&lt;/code&gt; プロパティを大文字にフィルターします。</target>
        </trans-unit>
        <trans-unit id="175ec0e7ef7252b24060674256a084243d66f30a" translate="yes" xml:space="preserve">
          <source>This example from the &lt;code&gt;HeroListComponent&lt;/code&gt; template uses three of these forms.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; テンプレートのこの例では、これらのフォームのうち3つを使用しています。</target>
        </trans-unit>
        <trans-unit id="c018c65b2f71e95da11870a345d0bd8ce8ee7841" translate="yes" xml:space="preserve">
          <source>This example has a special trigger for the enter and leave animation called &lt;code&gt;myInsertRemoveTrigger&lt;/code&gt;. The HTML template contains the following code.</source>
          <target state="translated">この例には、 &lt;code&gt;myInsertRemoveTrigger&lt;/code&gt; と呼ばれるEnterおよびLeaveアニメーションの特別なトリガーがあります。HTMLテンプレートには、次のコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="c383e4bfd674f8c3ca365e3f2524cda5c7864ed8" translate="yes" xml:space="preserve">
          <source>This example has a temporary diagnostic interpolation after each input tag, &lt;code&gt;{{model.name}}&lt;/code&gt;, to show the current data value of the corresponding property. The note reminds you to remove the diagnostic lines when you have finished observing the two-way data binding at work.</source>
          <target state="translated">この例では、対応するプロパティの現在のデータ値を表示するために、各入力タグ &lt;code&gt;{{model.name}}&lt;/code&gt; の後に一時的な診断補間があります。このメモは、作業中の双方向データバインディングの観察が終了したら、診断行を削除するように通知します。</target>
        </trans-unit>
        <trans-unit id="48f92247fb3553c5917ea007bd2c3e17c2e4d8ad" translate="yes" xml:space="preserve">
          <source>This example is so simple that it is tempting to write the &lt;code&gt;Http.get()&lt;/code&gt; inside the component itself and skip the service. In practice, however, data access rarely stays this simple. You typically need to post-process the data, add error handling, and maybe some retry logic to cope with intermittent connectivity.</source>
          <target state="translated">この例は非常に単純なので、コンポーネント自体の内部に &lt;code&gt;Http.get()&lt;/code&gt; を記述し、サービスをスキップしたくなります。ただし、実際には、データアクセスがこれほど単純なままになることはほとんどありません。通常、データの後処理、エラー処理の追加、および断続的な接続に対処するための再試行ロジックの追加が必要です。</target>
        </trans-unit>
        <trans-unit id="7738f3bfb08d1f44b77915ef508354d761db0235" translate="yes" xml:space="preserve">
          <source>This example provides a state transition from &lt;code&gt;open&lt;/code&gt; to &lt;code&gt;closed&lt;/code&gt; with a one second transition between states.</source>
          <target state="translated">この例では、 &lt;code&gt;open&lt;/code&gt; た状態から &lt;code&gt;closed&lt;/code&gt; た状態への状態遷移を提供します。状態間の遷移は1秒です。</target>
        </trans-unit>
        <trans-unit id="9e2fbcbc42a2d75d74a3222a5d342beb0a9c1ce0" translate="yes" xml:space="preserve">
          <source>This example recreates the heroes feature in the &quot;Services&quot; episode of the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;, and you'll be copying much of the code from the .</source>
          <target state="translated">この例では、&lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroesチュートリアル&lt;/a&gt;の「サービス」エピソードのヒーロー機能を再現します。コードの大部分をからコピーします。</target>
        </trans-unit>
        <trans-unit id="373455b46f233c304aab2070dd6730bb07e917cc" translate="yes" xml:space="preserve">
          <source>This example shows some of the most useful &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; configuration options:</source>
          <target state="translated">この例は、最も便利な &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 構成オプションのいくつかを示しています。</target>
        </trans-unit>
        <trans-unit id="9700001752d1ddad2bef57a54fdbab31b4d92d72" translate="yes" xml:space="preserve">
          <source>This example wires parent buttons to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; and uses interpolation to display the child's &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">この例では、親ボタンを子の &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; に関連付け、補間を使用して子の &lt;code&gt;seconds&lt;/code&gt; プロパティを表示します。</target>
        </trans-unit>
        <trans-unit id="7de281f2ca63df5ae46cabdcc5a3f0a47f5d8df0" translate="yes" xml:space="preserve">
          <source>This example&amp;mdash;which displays &lt;strong&gt;&lt;samp&gt;FRIDAY, APRIL 15, 1988&lt;/samp&gt;&lt;/strong&gt;&amp;mdash;chains the same pipes as above, but passes in a parameter to &lt;code&gt;date&lt;/code&gt; as well.</source>
          <target state="translated">この例-これは &lt;strong&gt;&lt;samp&gt;1988年4月15日金曜日&lt;/samp&gt;&lt;/strong&gt;-上記と同じパイプをチェーンしますが、 &lt;code&gt;date&lt;/code&gt; パラメーターも渡します。</target>
        </trans-unit>
        <trans-unit id="4820eaf9e83b02c2a47b5745671a9d1f9f915362" translate="yes" xml:space="preserve">
          <source>This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue pipe.</source>
          <target state="translated">この例では、このキー値パイプを使用して ngFor でオブジェクトまたはマップを反復処理する方法を示します。</target>
        </trans-unit>
        <trans-unit id="d18607ddf27a24b42e28d94bce4f221af52bab0a" translate="yes" xml:space="preserve">
          <source>This exercise shows how you can respond to a native HTML button-click event by adding to the model data. To let form users add a new hero, you will add a &lt;strong&gt;New Hero&lt;/strong&gt; button that responds to a click event.</source>
          <target state="translated">この演習では、モデルデータに追加することにより、ネイティブHTMLボタンクリックイベントに応答する方法を示します。フォームユーザーが新しいヒーローを追加できるようにするには、クリックイベントに応答する[&lt;strong&gt;新しいヒーロー&lt;/strong&gt;]ボタンを追加します。</target>
        </trans-unit>
        <trans-unit id="d13f81c361ce43971a48c424f3851c8dbc4f0ebf" translate="yes" xml:space="preserve">
          <source>This exists to support future Ivy work and has no effect currently.</source>
          <target state="translated">これは将来のアイビー作品をサポートするために存在し、現在のところ効果はありません。</target>
        </trans-unit>
        <trans-unit id="29df732f2a0c84758770605719258bd4b737a4b9" translate="yes" xml:space="preserve">
          <source>This field contains an array of URLs and &lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;glob-like&lt;/a&gt; URL patterns that will be matched at runtime. It can contain both negative patterns (i.e. patterns starting with &lt;code&gt;!&lt;/code&gt;) and non-negative patterns and URLs.</source>
          <target state="translated">このフィールドには、実行時に照合されるURLの配列と&lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;グロブのような&lt;/a&gt; URLパターンが含まれます。否定パターン（つまり &lt;code&gt;!&lt;/code&gt; で始まるパターン）と非否定パターンおよびURLの両方を含めることができます。</target>
        </trans-unit>
        <trans-unit id="8a65db321c5e9974fc66318e4ba5bcd4b192ba5d" translate="yes" xml:space="preserve">
          <source>This field contains an array of asset groups, each of which defines a set of asset resources and the policy by which they are cached.</source>
          <target state="translated">このフィールドには、アセットグループの配列が含まれ、それぞれがアセットリソースのセットと、それらがキャッシュされるポリシーを定義します。</target>
        </trans-unit>
        <trans-unit id="1c59748df0f341098bafef8c91da8de48dc6bd24" translate="yes" xml:space="preserve">
          <source>This field contains an array of data groups, each of which defines a set of data resources and the policy by which they are cached.</source>
          <target state="translated">このフィールドにはデータグループの配列が含まれ、それぞれがデータリソースのセットとそれらがキャッシュされるポリシーを定義します。</target>
        </trans-unit>
        <trans-unit id="db68317d18e90d33c9d724f39c1b4574e3e29e26" translate="yes" xml:space="preserve">
          <source>This field does not need to have a value. Its existence communicates to the Angular type checker that the &lt;code&gt;disabled&lt;/code&gt; input should be considered as accepting bindings that match the type &lt;code&gt;boolean|''&lt;/code&gt;. The suffix should be the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;&lt;em&gt;field&lt;/em&gt; name.</source>
          <target state="translated">このフィールドには値を指定する必要はありません。その存在は、 &lt;code&gt;disabled&lt;/code&gt; 入力が &lt;code&gt;boolean|''&lt;/code&gt; 一致するバインディングを受け入れると見なされるべきであることをAngular型チェッカーに伝えます。接尾辞は &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;em&gt;フィールド&lt;/em&gt;名である必要があります。</target>
        </trans-unit>
        <trans-unit id="39dca8bdfadccce3aa32a1f0f34acf9df4dfd38c" translate="yes" xml:space="preserve">
          <source>This file contains imports and functionality that is available to the entire app.</source>
          <target state="translated">このファイルには、アプリ全体で利用できるインポートと機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="c09c8b1c3afe0b2f3e211e35dda11d6b49d046a2" translate="yes" xml:space="preserve">
          <source>This file contains options and flags that are essential for Angular applications.</source>
          <target state="translated">このファイルには、Angularアプリケーションに欠かせないオプションとフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="7774dea1cbb9ba9a9affbe79a52ad87b124f3078" translate="yes" xml:space="preserve">
          <source>This file does the following:</source>
          <target state="translated">このファイルは以下のことを行います。</target>
        </trans-unit>
        <trans-unit id="8e6fad8835e771be15a7e60de8d9f839976d92ca" translate="yes" xml:space="preserve">
          <source>This file integrity is especially important when lazy loading modules. A JS bundle may reference many lazy chunks, and the filenames of the lazy chunks are unique to the particular build of the app. If a running app at version &lt;code&gt;X&lt;/code&gt; attempts to load a lazy chunk, but the server has updated to version &lt;code&gt;X + 1&lt;/code&gt; already, the lazy loading operation will fail.</source>
          <target state="translated">このファイルの整合性は、モジュールの遅延読み込み時に特に重要です。JSバンドルは多くのレイジーチャンクを参照する場合があり、レイジーチャンクのファイル名はアプリの特定のビルドに固有です。バージョン &lt;code&gt;X&lt;/code&gt; で実行中のアプリが遅延チャンクをロードしようとしたが、サーバーがすでにバージョン &lt;code&gt;X + 1&lt;/code&gt; 更新されている場合、遅延ロード操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="18dc9ff9208e9157f8adfe6cb8c2bceab30b16aa" translate="yes" xml:space="preserve">
          <source>This first implementation sets the background color of the host element to yellow.</source>
          <target state="translated">この第1の実施形態では、ホスト要素の背景色を黄色に設定する。</target>
        </trans-unit>
        <trans-unit id="e338895d77bf3b3efdf78e1a4135c26e375e5651" translate="yes" xml:space="preserve">
          <source>This form differs from the template-driven version in that it no longer exports any directives. Instead, it uses the &lt;code&gt;name&lt;/code&gt; getter defined in the component class.</source>
          <target state="translated">このフォームは、ディレクティブをエクスポートしないという点で、テンプレート駆動型バージョンとは異なります。代わりに、コンポーネントクラスで定義された &lt;code&gt;name&lt;/code&gt; ゲッターを使用します。</target>
        </trans-unit>
        <trans-unit id="fc36f6372162820e0033b4e4ebdc541bbbe324f4" translate="yes" xml:space="preserve">
          <source>This function &lt;em&gt;must&lt;/em&gt; match the form above: an arrow function of the form &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;.</source>
          <target state="translated">この関数&lt;em&gt;は&lt;/em&gt;、上記のフォームに一致する&lt;em&gt;必要があり&lt;/em&gt;ます： &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt; 矢印関数。</target>
        </trans-unit>
        <trans-unit id="4878fd2cfdcaf11685e5e72d2354cd83ec8f9724" translate="yes" xml:space="preserve">
          <source>This function is functionally the same as &lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt; at this level. It exists for symmetry with &lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt; on &lt;code&gt;FormGroups&lt;/code&gt; and &lt;code&gt;FormArrays&lt;/code&gt;, where it does behave differently.</source>
          <target state="translated">この関数は、機能的にはこのレベルの&lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt;と同じです。これは、との対称性のために存在する&lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt;上 &lt;code&gt;FormGroups&lt;/code&gt; と &lt;code&gt;FormArrays&lt;/code&gt; それは異なった動作ありません。</target>
        </trans-unit>
        <trans-unit id="56d3f264d77db65b5e665e640dd42a9db6e677ef" translate="yes" xml:space="preserve">
          <source>This function returns an &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorated class that is configured to wire up the Angular and AngularJS injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">この関数は、実際にハイブリッドアプリケーションをブートストラップする必要なく、AngularおよびAngularJSインジェクターを接続するように構成された &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装飾クラスを返します。これにより、サービスの単体テストがより簡単かつ迅速になります。</target>
        </trans-unit>
        <trans-unit id="e6acc9bce8fe23418fda41554da4f4e2de103857" translate="yes" xml:space="preserve">
          <source>This function returns an AngularJS module that is configured to wire up the AngularJS and Angular injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">この関数は、実際にハイブリッドアプリケーションをブートストラップしなくても、AngularJSとAngularインジェクタを配線するように設定されたAngularJSモジュールを返します。これにより、サービスのユニットテストをよりシンプルかつ迅速に行うことができます。</target>
        </trans-unit>
        <trans-unit id="ec2de2fde95bef298a51f31a0130f6587e05afec" translate="yes" xml:space="preserve">
          <source>This functionality is only available when you have loaded the full locale data. See the &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&quot;I18n guide&quot;&lt;/a&gt;.</source>
          <target state="translated">この機能は、完全なロケールデータをロードした場合にのみ使用できます。&lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;「I18nガイド」を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="71d1005561ab53d8d9b93d80838e0492d40b9143" translate="yes" xml:space="preserve">
          <source>This general rule can help you build a mental model of attributes and DOM properties: &lt;strong&gt;Attributes initialize DOM properties and then they are done. Property values can change; attribute values can't.&lt;/strong&gt;</source>
          <target state="translated">この一般的なルールは、属性とDOMプロパティのメンタルモデルを構築するのに役立ちます。&lt;strong&gt;属性はDOMプロパティを初期化し、それが完了します。プロパティ値は変更される可能性があります。属性値はできません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed51a3d987c448eabd0caaad7d11446c5f4ee98e" translate="yes" xml:space="preserve">
          <source>This generates a folder for the new component within the customer-dashboard folder and updates the feature module with the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; info:</source>
          <target state="translated">これにより、customer-dashboardフォルダー内に新しいコンポーネントのフォルダーが生成され、 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 情報で機能モジュールが更新されます。</target>
        </trans-unit>
        <trans-unit id="a8ca933ae9ed34a8a06321e5395d5386f3467055" translate="yes" xml:space="preserve">
          <source>This gives users a meaningful first paint of your application that appears quickly because the browser can simply render the HTML and CSS without the need to initialize any JavaScript.</source>
          <target state="translated">これにより、JavaScriptを初期化する必要がなく、ブラウザがHTMLとCSSをレンダリングするだけで済むため、ユーザーはアプリケーションの意味のある最初のペイントを素早く表示することができます。</target>
        </trans-unit>
        <trans-unit id="7491170871e6c27e83f7232d07de91c8f51b4dc0" translate="yes" xml:space="preserve">
          <source>This glossary lists the most prominent terms and a few less familiar ones with unusual or unexpected definitions.</source>
          <target state="translated">この用語集では、最も著名な用語や、あまり馴染みのない用語の中から、珍しいものや予想外の定義を持つものをリストアップしています。</target>
        </trans-unit>
        <trans-unit id="fdd0dd4255112079ec8cd2cac891a62c3bc630af" translate="yes" xml:space="preserve">
          <source>This guard returns a synchronous boolean result. If the user is logged in, it returns true and the navigation continues.</source>
          <target state="translated">このガードは、同期的なブール値を返します。ユーザーがログインしている場合はtrueを返し、ナビゲーションは継続されます。</target>
        </trans-unit>
        <trans-unit id="99832741e09d1b5644ac6acf807f68e045c1d8e4" translate="yes" xml:space="preserve">
          <source>This guide assumes that you have a basic understanding of the following.</source>
          <target state="translated">本ガイドでは、以下の基本的な理解をしていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="71b0a76f127063119253692ead9f31153f3cf61f" translate="yes" xml:space="preserve">
          <source>This guide assumes you are already familiar with developing and building Angular applications using the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">このガイドは、&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;を使用したAngularアプリケーションの開発と構築にすでに精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="f91f9ca40378a30abae72457a623c7d9b92e26f1" translate="yes" xml:space="preserve">
          <source>This guide contains a summary of all Angular APIs and features that are currently deprecated.</source>
          <target state="translated">このガイドでは、現在非推奨となっているすべての Angular API と機能をまとめています。</target>
        </trans-unit>
        <trans-unit id="663987c724bd81899dc1933e4786c728fbe26b01" translate="yes" xml:space="preserve">
          <source>This guide contains information related to updating to the latest version of Angular.</source>
          <target state="translated">このガイドでは、Angularの最新バージョンへのアップデートに関する情報を掲載しています。</target>
        </trans-unit>
        <trans-unit id="a03008f3c8f9dc5daf041fcc08d5096f9ec3c5aa" translate="yes" xml:space="preserve">
          <source>This guide covers the basic Angular animation features to get you started on adding Angular animations to your project.</source>
          <target state="translated">このガイドでは、プロジェクトにAngularアニメーションを追加するための基本的なAngularアニメーション機能について説明します。</target>
        </trans-unit>
        <trans-unit id="72e2d1efd7dc0408171b8a02495eccd2a194f9ee" translate="yes" xml:space="preserve">
          <source>This guide covers the router's primary features, illustrating them through the evolution of a small application that you can run live in the browser.</source>
          <target state="translated">このガイドでは、ルータの主な機能をカバーし、ブラウザでライブで実行できる小さなアプリケーションの進化を通してそれらを説明します。</target>
        </trans-unit>
        <trans-unit id="16b4b3c7d27b05a7a93d7585fd80da6f87695735" translate="yes" xml:space="preserve">
          <source>This guide demonstrates that scenario with an example in the Tour of Heroes theme. Imagine an outer &lt;code&gt;HeroListComponent&lt;/code&gt; that displays a list of super heroes.</source>
          <target state="translated">このガイドでは、Tour of Heroesテーマの例を使用してそのシナリオを説明します。スーパーヒーローのリストを表示する外側の &lt;code&gt;HeroListComponent&lt;/code&gt; を想像してください。</target>
        </trans-unit>
        <trans-unit id="94795f12569496bcae1ed95d5adfb2856a55c12a" translate="yes" xml:space="preserve">
          <source>This guide describes &lt;strong&gt;Angular Universal&lt;/strong&gt;, a technology that renders Angular applications on the server.</source>
          <target state="translated">このガイドでは、サーバーにAngularアプリケーションをレンダリングするテクノロジーである&lt;strong&gt;Angular Universal&lt;/strong&gt;について説明します。</target>
        </trans-unit>
        <trans-unit id="7c79df812f600818480fccaad006560ab578d116" translate="yes" xml:space="preserve">
          <source>This guide describes development of a multi-page routed sample application. Along the way, it highlights design decisions and describes key features of the router such as:</source>
          <target state="translated">このガイドでは、複数ページのルーティングされたサンプルアプリケーションの開発について説明します。途中で、設計上の決定事項をハイライトし、以下のようなルータの主要な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="85b1e7320fc65610cb0b9d5744a3924bbc69efbb" translate="yes" xml:space="preserve">
          <source>This guide describes development of a multi-page routed sample application. Along the way, it highlights key features of the router such as:</source>
          <target state="translated">このガイドでは、複数ページのルーティングされたサンプルアプリケーションの開発について説明します。途中で、以下のようなルータの主な機能をハイライトします。</target>
        </trans-unit>
        <trans-unit id="5eaa5268ab448450e02df4dcd7d854a3b74ebfd4" translate="yes" xml:space="preserve">
          <source>This guide describes how to develop locally on your own machine. Setting up a new project on your machine is quick and easy with the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart seed on github&lt;/a&gt;.</source>
          <target state="translated">このガイドでは、自分のマシンでローカルに開発する方法について説明します。&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;githubのQuickStartシード&lt;/a&gt;を使用すると、マシンに新しいプロジェクトをすばやく簡単にセットアップできます。</target>
        </trans-unit>
        <trans-unit id="a071d6040e5b884251f92cb51a3a612a4400f9c1" translate="yes" xml:space="preserve">
          <source>This guide describes some of the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, one piece at a time. It is very similar to &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; with the exception that this one uses the &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule()&lt;/a&gt; helper function instead of the &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt; class. This affects how the app is bootstrapped and how change detection is propagated between the two frameworks. It allows you to upgrade incrementally while improving the speed of your hybrid apps and leveraging the latest of Angular in AngularJS apps early in the process of upgrading.</source>
          <target state="translated">このガイドでは、AngularJSプロジェクトを一度に1つずつAngularプラットフォームに効率的に移行するための組み込みツールについて説明します。&lt;a href=&quot;upgrade&quot;&gt;AngularJS&lt;/a&gt;からのアップグレードとよく似ていますが、&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;クラスの代わりに&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule（）&lt;/a&gt;ヘルパー関数を使用します。これは、アプリのブートストラップ方法と、2つのフレームワーク間での変更検出の伝達方法に影響します。ハイブリッドアプリの速度を改善し、アップグレードプロセスの早い段階でAngularJSアプリの最新のAngularを活用しながら、段階的にアップグレードできます。</target>
        </trans-unit>
        <trans-unit id="52f91de3b44e77776bb5d72dda1262736b0f2d6c" translate="yes" xml:space="preserve">
          <source>This guide explains how to build and test Angular apps with Bazel.</source>
          <target state="translated">このガイドでは、Bazelを使ったAngularアプリの構築方法とテスト方法を解説しています。</target>
        </trans-unit>
        <trans-unit id="a7f2364975bf639296fbad2e6ccfbf1dc9b2ff63" translate="yes" xml:space="preserve">
          <source>This guide explains how to set up your environment for Angular development using the &lt;a href=&quot;cli&quot;&gt;Angular CLI tool&lt;/a&gt;. It includes information about prerequisites, installing the CLI, creating an initial workspace and starter app, and running that app locally to verify your setup.</source>
          <target state="translated">このガイドでは、&lt;a href=&quot;cli&quot;&gt;Angular CLIツール&lt;/a&gt;を使用してAngular開発用の環境をセットアップする方法について説明します。これには、前提条件、CLIのインストール、初期ワークスペースとスターターアプリの作成、およびそのアプリをローカルで実行して設定を確認することに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="e4e5dc8be1da9c2744ee3e6ff19277fa157b7049" translate="yes" xml:space="preserve">
          <source>This guide explains how to specify metadata and apply available compiler options to compile your applications efficiently using the AOT compiler.</source>
          <target state="translated">このガイドでは、AOTコンパイラを使用してアプリケーションを効率的にコンパイルするために、メタデータを指定し、利用可能なコンパイラオプションを適用する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="bde2ceb420303c6bb7fd13502c38aab2782431cb" translate="yes" xml:space="preserve">
          <source>This guide explores common component testing use cases.</source>
          <target state="translated">このガイドでは、一般的なコンポーネントテストのユースケースについて説明します。</target>
        </trans-unit>
        <trans-unit id="e8e0ddc6e4a1bac092793252db146528b491a1a7" translate="yes" xml:space="preserve">
          <source>This guide follows that approach. It has a &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; folder under &lt;code&gt;src/&lt;/code&gt;. Assets within that folder have a filename extension that matches their associated locale.</source>
          <target state="translated">このガイドはそのアプローチに従います。 &lt;code&gt;src/&lt;/code&gt; 下に &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; フォルダーがあります。そのフォルダー内のアセットには、関連付けられたロケールに一致するファイル名拡張子があります。</target>
        </trans-unit>
        <trans-unit id="2488b81bee26c1a6b3945e50d5b7209076c7232f" translate="yes" xml:space="preserve">
          <source>This guide goes into greater depth on special transition states such as &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt;, and show how these special states are used for elements entering and leaving a view. This chapter also explores multiple animation triggers, animation callbacks, and sequence-based animation using keyframes.</source>
          <target state="translated">このガイドでは、 &lt;code&gt;*&lt;/code&gt; （ワイルドカード）や &lt;code&gt;void&lt;/code&gt; などの特別な遷移状態について詳しく説明し、ビューに出入りする要素にこれらの特別な状態がどのように使用されるかを示します。この章では、複数のアニメーショントリガー、アニメーションコールバック、およびキーフレームを使用したシーケンスベースのアニメーションについても説明します。</target>
        </trans-unit>
        <trans-unit id="a4fe0eebc6c53dfd8ba7ae172b29d6085d11576f" translate="yes" xml:space="preserve">
          <source>This guide helps you transition from AngularJS to Angular by mapping AngularJS syntax to the equivalent Angular syntax.</source>
          <target state="translated">このガイドでは、AngularJSの構文を同等のAngularの構文にマッピングすることで、AngularJSからAngularへの移行を支援します。</target>
        </trans-unit>
        <trans-unit id="8b1d6ce9f824c1b57c26e8b4535de072da1382f6" translate="yes" xml:space="preserve">
          <source>This guide is a &lt;em&gt;living document&lt;/em&gt;; it changes over time. We strive for consistency to the extent feasible, but you may find parts of our documentation that don't match this style guide. When in doubt, &lt;strong&gt;follow this guide rather than imitating existing documents.&lt;/strong&gt;</source>
          <target state="translated">このガイドは&lt;em&gt;生きたドキュメント&lt;/em&gt;です。時間とともに変化します。可能な限り一貫性を保つよう努めていますが、このスタイルガイドと一致しないドキュメントの部分が見つかる場合があります。疑問がある場合は、&lt;strong&gt;既存のドキュメントを模倣するのではなく、このガイド&lt;/strong&gt;に&lt;strong&gt;従ってください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b86a88184ea70d17effff794189dd4cb85c357f" translate="yes" xml:space="preserve">
          <source>This guide looks at how Angular manipulates the DOM with &lt;strong&gt;structural directives&lt;/strong&gt; and how you can write your own structural directives to do the same thing.</source>
          <target state="translated">このガイドでは、Angularが&lt;strong&gt;構造ディレクティブで&lt;/strong&gt; DOMを操作する方法と、独自の構造ディレクティブを記述して同じことを行う方法について説明します。</target>
        </trans-unit>
        <trans-unit id="593d82739fc5c50f931f13f1ea5af12b64068cec" translate="yes" xml:space="preserve">
          <source>This guide offers tips and techniques for unit and integration testing Angular applications.</source>
          <target state="translated">このガイドでは、Angularアプリケーションのユニットテストと統合テストのヒントとテクニックを紹介しています。</target>
        </trans-unit>
        <trans-unit id="ef57621e56bb2f75a1048b0c3475daddc587411b" translate="yes" xml:space="preserve">
          <source>This guide proceeds as a sequence of milestones as if you were building the app step-by-step, but assumes you are familiar with basic &lt;a href=&quot;architecture&quot;&gt;Angular concepts&lt;/a&gt;. For a general introduction to angular, see the &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt;. For a more in-depth overview, see the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes&lt;/a&gt; tutorial.</source>
          <target state="translated">このガイドは、アプリを段階的に構築しているかのように一連のマイルストーンとして進行しますが、基本的な&lt;a href=&quot;architecture&quot;&gt;Angularの概念に&lt;/a&gt;精通していることを前提としています。Angularの一般的な概要については、&lt;a href=&quot;start&quot;&gt;「はじめに」を&lt;/a&gt;参照してください。より詳細な概要については、&lt;a href=&quot;tutorial&quot;&gt;Tour ofHeroes&lt;/a&gt;チュートリアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="c0d6e75bcf91e32b2e66ca76df8b63da387d1f38" translate="yes" xml:space="preserve">
          <source>This guide proceeds in phases, marked by milestones, starting from a simple two-pager and building toward a modular, multi-view design with child routes.</source>
          <target state="translated">このガイドは、マイルストーンで示された段階的な進め方をしています。シンプルな2ページャーから始まり、子ルートを持つモジュール式のマルチビューデザインに向かって構築されていきます。</target>
        </trans-unit>
        <trans-unit id="d3c69f9ce0aa91fc4ff28ea4156ea22eb64b216f" translate="yes" xml:space="preserve">
          <source>This guide provides information to help you decide which type of form works best for your situation. It introduces the common building blocks used by both approaches. It also summarizes the key differences between the two approaches, and demonstrates those differences in the context of setup, data flow, and testing.</source>
          <target state="translated">このガイドでは、どちらのタイプのフォームがあなたの状況に最も適しているかを判断するのに役立つ情報を提供します。このガイドでは、両方のアプローチで使用される共通の構成要素を紹介しています。また、2つのアプローチ間の主な違いを要約し、セットアップ、データフロー、テストのコンテキストでそれらの違いを示します。</target>
        </trans-unit>
        <trans-unit id="ff1a4eed9922504491639bfc2f2085934810a731" translate="yes" xml:space="preserve">
          <source>This guide shows you how to use Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;routing&lt;/a&gt; to give the user in-app navigation. In a single-page app, instead of loading new pages, you show different components and data to the user based on where the user is in the application.</source>
          <target state="translated">このガイドでは、Angular&lt;a href=&quot;../guide/glossary#router&quot;&gt;ルーティング&lt;/a&gt;を使用してユーザーにアプリ内ナビゲーションを提供する方法を示します。シングルページアプリでは、新しいページを読み込む代わりに、ユーザーがアプリケーション内のどこにいるかに基づいて、さまざまなコンポーネントとデータをユーザーに表示します。</target>
        </trans-unit>
        <trans-unit id="5d34585a93f67fec9f496e464bff52a80a3a9cbe" translate="yes" xml:space="preserve">
          <source>This guide uses the StackBlitz Generator to show you a ready-made, simple application that you can examine and play with interactively. In actual development you will typically use the &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;, a powerful command-line tool that lets you generate and modify applications. For more information, see the &lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI Overview&lt;/a&gt;.</source>
          <target state="translated">このガイドでは、StackBlitzジェネレーターを使用して、インタラクティブに調べて操作できる既製のシンプルなアプリケーションを紹介します。実際の開発では、通常、アプリケーションを生成および変更できる強力なコマンドラインツールである&lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;を使用します。詳細については、&lt;a href=&quot;https://angular.io/cli&quot;&gt;CLIの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e586281684b3e248038b701f36893a54ff5a55bc" translate="yes" xml:space="preserve">
          <source>This guide won't repeat how to &lt;em&gt;use&lt;/em&gt; them. But it does explain &lt;em&gt;how they work&lt;/em&gt; and how to &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own&lt;/a&gt; structural directive.</source>
          <target state="translated">このガイドでは、それらの&lt;em&gt;使用&lt;/em&gt;方法を繰り返しません。しかし、それは&lt;em&gt;それら&lt;/em&gt;が&lt;em&gt;どのように&lt;/em&gt;機能する&lt;em&gt;か、&lt;/em&gt;そして&lt;a href=&quot;structural-directives#unless&quot;&gt;あなた自身の&lt;/a&gt;構造的なディレクティブを書く方法を説明します。</target>
        </trans-unit>
        <trans-unit id="e3989ef0ea3239b97b243b6842c7b698d20fb5bb" translate="yes" xml:space="preserve">
          <source>This guide works with a CLI-generated Angular app. If you are working manually, make sure that you have &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your index.html file. This assumes that the &lt;code&gt;app&lt;/code&gt; folder is the application root, and uses &lt;code&gt;&quot;/&quot;&lt;/code&gt;.</source>
          <target state="translated">このガイドは、CLIで生成されたAngularアプリで機能します。手動で作業している場合は、あなたが持っていることを確認してください &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; で &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; あなたのindex.htmlファイルの。これは、 &lt;code&gt;app&lt;/code&gt; フォルダーがアプリケーションルートであると想定し、 &lt;code&gt;&quot;/&quot;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="051838d2f6789f70fb2f89d0d3b7b55f2fd66a1e" translate="yes" xml:space="preserve">
          <source>This has been deprecated for a few reasons. First, developers have found this pattern confusing. It seems like the actual &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive is being used, but in fact it's an input/output property named &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; on the reactive form directive that simply approximates (some of) its behavior. Specifically, it allows getting/setting the value and intercepting value events. However, some of &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;'s other features - like delaying updates with&lt;code&gt;ngModelOptions&lt;/code&gt; or exporting the directive - simply don't work, which has understandably caused some confusion.</source>
          <target state="translated">これはいくつかの理由で廃止されました。まず、開発者はこのパターンが混乱することに気づきました。実際の &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブが使用されているようですが、実際には、その動作（の一部）を単純に近似する反応フォームディレクティブの &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; という名前の入出力プロパティです。具体的には、値の取得/設定、および値イベントのインターセプトが可能です。ただし、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; Optionsによる更新の遅延やディレクティブのエクスポートなど、 &lt;code&gt;ngModelOptions&lt;/code&gt; の他の機能の一部は機能しないため、混乱が生じています。</target>
        </trans-unit>
        <trans-unit id="9a36abc535f66e5a2a598972e3e540ed77c184f6" translate="yes" xml:space="preserve">
          <source>This has been deprecated for several reasons. First, developers have found this pattern confusing. It seems like the actual &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive is being used, but in fact it's an input/output property named &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; on the reactive form directive that approximates some, but not all, of the directive's behavior. It allows getting and setting a value and intercepting value events, but some of &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;'s other features, such as delaying updates with&lt;code&gt;ngModelOptions&lt;/code&gt; or exporting the directive, don't work.</source>
          <target state="translated">これはいくつかの理由で非推奨になりました。まず、開発者はこのパターンが混乱していることに気づきました。実際の &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブが使用されているように見えますが、実際には、ディレクティブの動作のすべてではなく一部を近似する、リアクティブフォームディレクティブの &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; という名前の入力/出力プロパティです。これは、取得して値を設定し、値のイベントをインターセプトすることができますが、いくつかの &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; などで更新を遅らせるなどの他の特徴、 &lt;code&gt;ngModelOptions&lt;/code&gt; またはディレクティブをエクスポートするには、仕事をしないでください。</target>
        </trans-unit>
        <trans-unit id="bb14c528bca95d7e4e8b5c0e75434cfae54a895b" translate="yes" xml:space="preserve">
          <source>This has been deprecated to keep selectors consistent with other core Angular selectors, as element selectors are typically written in kebab-case.</source>
          <target state="translated">これは、セレクタを他のコアとなるAngularセレクタとの一貫性を保つために非推奨となりました。</target>
        </trans-unit>
        <trans-unit id="753971c71e6ca491908f50d23acb603dc1a664a4" translate="yes" xml:space="preserve">
          <source>This has the same effect as the binding:</source>
          <target state="translated">縛りと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="1095f7e1edc68ff18dd9e80137271b101bd86c29" translate="yes" xml:space="preserve">
          <source>This helper class should be used as a base class for creating Angular directives that wrap AngularJS components that need to be &quot;upgraded&quot;.</source>
          <target state="translated">このヘルパークラスは、「アップグレード」が必要なAngularJSコンポーネントをラップするAngularディレクティブを作成するためのベースクラスとして使用します。</target>
        </trans-unit>
        <trans-unit id="4a9910a470680f461d5e2a2614c8675ebcbbb9c4" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function that provides access to the Angular service identified by the &lt;code&gt;token&lt;/code&gt; parameter.</source>
          <target state="translated">このヘルパー関数は、 &lt;code&gt;token&lt;/code&gt; パラメーターで識別されたAngularサービスへのアクセスを提供するファクトリー関数を返します。</target>
        </trans-unit>
        <trans-unit id="3feef579a17c24eb18bbf65e912c0af25f671bc1" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function to be used for registering an AngularJS wrapper directive for &quot;downgrading&quot; an Angular component.</source>
          <target state="translated">このヘルパー関数は、Angularコンポーネントを「ダウングレード」するためのAngularJSラッパー指示文を登録するために使用するファクトリ関数を返します。</target>
        </trans-unit>
        <trans-unit id="47aa8d05f2d4f3b4a736e0ea1dd586657dd4775e" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not Components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">このヘルパーは、コンポーネントではなくサービスをテストするためのものです。コンポーネントテストでは、ハイブリッドアプリを引き続きブートストラップする必要があります。詳細については、 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4eef553362f7318dd361d3d0f6a5760f3585a142" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">このヘルパーは、コンポーネントではなくサービスをテストするためのものです。コンポーネントテストでは、ハイブリッドアプリを引き続きブートストラップする必要があります。詳細については、 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b9ba1412b83f44b56ecd7943b94f7e6d7ad49fa" translate="yes" xml:space="preserve">
          <source>This helper's observable emits the &lt;code&gt;data&lt;/code&gt; value in the next turn of the JavaScript engine.</source>
          <target state="translated">このヘルパーのオブザーバブルは、JavaScriptエンジンの次のターンで &lt;code&gt;data&lt;/code&gt; 値を出力します。</target>
        </trans-unit>
        <trans-unit id="326ed6100992d8304a4c4512b4ef1b97e697f367" translate="yes" xml:space="preserve">
          <source>This highlight directive has a single customizable property. In a real app, it may need more.</source>
          <target state="translated">この highlight ディレクティブは、カスタマイズ可能なプロパティを一つ持っています。実際のアプリでは、もっと多くのプロパティが必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a8424043c89606ac692d26ae91eabcf058b3b255" translate="yes" xml:space="preserve">
          <source>This implies that the component bindings will always follow the semantics of the instantiation framework.</source>
          <target state="translated">これは、コンポーネントのバインディングが常にインスタンス化フレームワークのセマンティクスに従うことを意味します。</target>
        </trans-unit>
        <trans-unit id="13526051beab5c2cb1409738f1705df68acfffb7" translate="yes" xml:space="preserve">
          <source>This indicates the last time the service worker checked for a new version, or update, of the app. &lt;code&gt;never&lt;/code&gt; indicates that the service worker has never checked for an update.</source>
          <target state="translated">これは、サービスワーカーがアプリの新しいバージョンまたは更新を確認した最後の時間を示します。 &lt;code&gt;never&lt;/code&gt; 、サービスワーカーが更新を確認したことがないことを示します。</target>
        </trans-unit>
        <trans-unit id="c6866fb4d3be58dfa31c9fcb707a31824d7cdb10" translate="yes" xml:space="preserve">
          <source>This initial value never changes.</source>
          <target state="translated">この初期値は変更されません。</target>
        </trans-unit>
        <trans-unit id="8fdbd80f7713591b405acb108f078354e86bdf7e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics &lt;a href=&quot;glossary#collection&quot;&gt;collection&lt;/a&gt; with an initial named schematic. The collection folder is a workspace for schematics. You can also use the &lt;code&gt;schematics&lt;/code&gt; command to add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">これにより、 &lt;code&gt;schematics&lt;/code&gt; 実行可能ファイルがインストールされます。これを使用して、最初に名前が付けられた回路図で新しい回路図&lt;a href=&quot;glossary#collection&quot;&gt;コレクション&lt;/a&gt;を作成できます。コレクションフォルダーは、回路図のワークスペースです。また、 &lt;code&gt;schematics&lt;/code&gt; コマンドを使用して、新しい回路図を既存のコレクションに追加したり、既存の回路図を拡張したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="f4f376c92f4d721a1cb60edfb651e536ba4f5e3e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics collection in its own project folder, add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">これにより、 &lt;code&gt;schematics&lt;/code&gt; 実行可能ファイルがインストールされます。これを使用して、独自のプロジェクトフォルダーに新しい回路図コレクションを作成したり、既存のコレクションに新しい回路図を追加したり、既存の回路図を拡張したりできます。</target>
        </trans-unit>
        <trans-unit id="1b7cb0effa29e839a96dca4c18f240ba5551dbba" translate="yes" xml:space="preserve">
          <source>This installs the command &lt;code&gt;ng&lt;/code&gt; on your system, which is the command you use to create new workspaces, new projects, serve your application during development, or produce builds to share or distribute.</source>
          <target state="translated">これにより、コマンド &lt;code&gt;ng&lt;/code&gt; がシステムにインストールされます。これは、新しいワークスペース、新しいプロジェクトの作成、開発中のアプリケーションの提供、または共有または配布するビルドの作成に使用するコマンドです。</target>
        </trans-unit>
        <trans-unit id="b28a949d24ede3e30d4f2425cea4c004accffb6c" translate="yes" xml:space="preserve">
          <source>This interface allows access to the underlying &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;, and allows responding with &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s or &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">このインターフェースを使用すると、基になる &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; にアクセスでき、 &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; で応答できます。</target>
        </trans-unit>
        <trans-unit id="f14b1937cf79a6a85c55fe443bf06ded14c39fe9" translate="yes" xml:space="preserve">
          <source>This is a &lt;em&gt;cold&lt;/em&gt; observable that waits three frames and then emits an error, The hash (&lt;code&gt;#&lt;/code&gt;) indicates the timing of the error that is specified in the third argument. The second argument is null because the observable never emits a value.</source>
          <target state="translated">これは、3フレーム待機してからエラーを発行する&lt;em&gt;コールド&lt;/em&gt;オブザーバブルです。ハッシュ（ &lt;code&gt;#&lt;/code&gt; ）は、3番目の引数で指定されたエラーのタイミングを示します。オブザーバブルは値を出力しないため、2番目の引数はnullです。</target>
        </trans-unit>
        <trans-unit id="325c383689dc505c167a4efdf3ff1bfffcda2dac" translate="yes" xml:space="preserve">
          <source>This is a common middleware pattern found in frameworks such as Express.js.</source>
          <target state="translated">これはExpress.jsなどのフレームワークでよく見られるミドルウェアのパターンです。</target>
        </trans-unit>
        <trans-unit id="8a0404a183044b9e9c6ffe40bc631a912f26a05f" translate="yes" xml:space="preserve">
          <source>This is a considerable effort and it often isn't worth it, especially since you are in the process of moving your code to Angular. Instead, declare &lt;code&gt;angular&lt;/code&gt; as &lt;code&gt;angular.IAngularStatic&lt;/code&gt; to indicate it is a global variable and still have full typing support.</source>
          <target state="translated">これはかなりの労力であり、特にコードをAngularに移行している最中なので、多くの場合それは価値がありません。代わりに、宣言 &lt;code&gt;angular&lt;/code&gt; など &lt;code&gt;angular.IAngularStatic&lt;/code&gt; は、それがグローバル変数であり、まだ完全なタイピングをサポートしていることを示します。</target>
        </trans-unit>
        <trans-unit id="ebfc1fc3ae76182d341bfaf13595ca3c04aee718" translate="yes" xml:space="preserve">
          <source>This is a general purpose guard&amp;mdash;you can imagine other features that require authenticated users&amp;mdash;so you generate an &lt;code&gt;AuthGuard&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; folder.</source>
          <target state="translated">これは汎用ガードです。認証済みユーザーを必要とする他の機能を想像できるため、 &lt;code&gt;auth&lt;/code&gt; フォルダーに &lt;code&gt;AuthGuard&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="745624b6290490997a074676dc013e0ad3433575" translate="yes" xml:space="preserve">
          <source>This is a good candidate for an impure pipe because the &lt;code&gt;transform&lt;/code&gt; function is trivial and fast.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 関数は簡単で高速なので、これは不純なパイプの良い候補です。</target>
        </trans-unit>
        <trans-unit id="5b9b9bda285209856e8b9f18df0fc5414bc4d50e" translate="yes" xml:space="preserve">
          <source>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for you custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</source>
          <target state="translated">これは、カスタム要素の型チェックやオートコンプリートのサポートなど、TypeScript の機能を素早く利用するための良い方法です。しかし、いくつかの場所でこれが必要な場合には、毎回リターン型をキャストしなければならないため、面倒になることがあります。</target>
        </trans-unit>
        <trans-unit id="6fe29256f1b66a8c5853dd12c474275473bc08da" translate="yes" xml:space="preserve">
          <source>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for your custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</source>
          <target state="translated">これは、カスタム要素の型チェックやオートコンプリートのサポートなど、TypeScript の機能を素早く利用するための良い方法です。しかし、いくつかの場所でこれが必要な場合には、毎回リターン型をキャストしなければならないので、面倒になることがあります。</target>
        </trans-unit>
        <trans-unit id="6520fb09eb7f64f65fec620f22a827ad129c5147" translate="yes" xml:space="preserve">
          <source>This is a nonissue in Angular because ES 2015 modules handle the namespacing for you.</source>
          <target state="translated">AngularではES 2015のモジュールがネームスペーシングを処理してくれるので、これは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="b1360d42910235d11c8da57171809f03949b89f4" translate="yes" xml:space="preserve">
          <source>This is a tree of activated route snapshots. Every node in this tree knows about the &quot;consumed&quot; URL segments, the extracted parameters, and the resolved data.</source>
          <target state="translated">これは、有効化されたルートスナップショットのツリーです。このツリーの各ノードは、「消費された」URLセグメント、抽出されたパラメータ、および解決されたデータを知っています。</target>
        </trans-unit>
        <trans-unit id="308f6f1ffa549dea73f1268332bb7efda867f32b" translate="yes" xml:space="preserve">
          <source>This is a typical &quot;&lt;em&gt;service-in-service&lt;/em&gt;&quot; scenario: you inject the &lt;code&gt;MessageService&lt;/code&gt; into the &lt;code&gt;HeroService&lt;/code&gt; which is injected into the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">これは典型的な「で&lt;em&gt;サービスインサービス&lt;/em&gt;」シナリオ：あなたを注入 &lt;code&gt;MessageService&lt;/code&gt; に &lt;code&gt;HeroService&lt;/code&gt; に注入される &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd1783005dfb776d1af2f04f6577b41eaa1ff956" translate="yes" xml:space="preserve">
          <source>This is a very simple example, but the use of a schema for validation can be very powerful. For more information, see the &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schemas website&lt;/a&gt;.</source>
          <target state="translated">これは非常に単純な例ですが、検証にスキーマを使用すると非常に強力な場合があります。詳しくは、&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSONスキーマのウェブサイトを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="98e22f6dda8c73c831d901b714a07d0b7689f227" translate="yes" xml:space="preserve">
          <source>This is actually a convenience method, implemented as &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;.</source>
          <target state="translated">これは実際には便利なメソッドで、 &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; として実装されます。</target>
        </trans-unit>
        <trans-unit id="dd436a739a02b80b45abdb0c1ad5a566028baa06" translate="yes" xml:space="preserve">
          <source>This is actually a pretty good starting point. The code uses the AngularJS 1.5 component API and the organization follows the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt;, which is an important &lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;preparation step&lt;/a&gt; before a successful upgrade.</source>
          <target state="translated">これは実際にはかなり良い出発点です。コードはAngularJS 1.5コンポーネントAPIを使用し、組織は&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJSスタイルガイドに&lt;/a&gt;従います。これは、アップグレードを成功させる前の重要な&lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;準備手順&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b8005693863fa9b16e3799069756d7fed430b5f1" translate="yes" xml:space="preserve">
          <source>This is an example of Angular's &lt;a href=&quot;../guide/event-binding&quot;&gt;event binding&lt;/a&gt; syntax.</source>
          <target state="translated">これはAngularの&lt;a href=&quot;../guide/event-binding&quot;&gt;イベントバインディング&lt;/a&gt;構文の例です。</target>
        </trans-unit>
        <trans-unit id="28fd6969c6d6369ceb7285ab5a770ea3315ffab8" translate="yes" xml:space="preserve">
          <source>This is an example of Angular's &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; syntax.</source>
          <target state="translated">これは、Angularの&lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;イベントバインディング&lt;/a&gt;構文の例です。</target>
        </trans-unit>
        <trans-unit id="edb830bd9f42a141071913f2de5f0ee10c46edce" translate="yes" xml:space="preserve">
          <source>This is an interim code sample that will allow you to provide and use the &lt;code&gt;HeroService&lt;/code&gt;. At this point, the code will differ from the &lt;code&gt;HeroService&lt;/code&gt; in the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;HeroService&lt;/code&gt; を提供および使用するための暫定的なコードサンプルです。この時点で、コードが異なります &lt;code&gt;HeroService&lt;/code&gt; に&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;「最後のコードレビュー」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b3974dfe8a8053bf2f0f9d406986e6d789c88746" translate="yes" xml:space="preserve">
          <source>This is an internal project to add support for Angular front-ends to Google's internal integrated server stack.</source>
          <target state="translated">Googleの内部統合サーバスタックにAngularフロントエンドのサポートを追加するための内部プロジェクトです。</target>
        </trans-unit>
        <trans-unit id="b2b55aa5e71e846d741afa9a4891157e8f09cdfb" translate="yes" xml:space="preserve">
          <source>This is an opaque value the router will give to a custom route reuse strategy to store and retrieve later on.</source>
          <target state="translated">これは、ルータがカスタムルート再利用戦略に与える不透明な値で、後で保存したり取得したりします。</target>
        </trans-unit>
        <trans-unit id="47187f9c60a312936c257bcbf674f7a846c9c3b7" translate="yes" xml:space="preserve">
          <source>This is disagreeable. The word, &lt;code&gt;appHighlight&lt;/code&gt;, is a terrible property name and it doesn't convey the property's intent.</source>
          <target state="translated">これは嫌です。 &lt;code&gt;appHighlight&lt;/code&gt; という単語はひどいプロパティ名であり、プロパティの意図を伝えていません。</target>
        </trans-unit>
        <trans-unit id="402dd3cc505c92b3ebc8041d5e0f5ce4dca64317" translate="yes" xml:space="preserve">
          <source>This is especially useful when child components are defined with an empty path string, as in the following example. With this configuration, navigating to '/parent/10' creates the main child and aux components.</source>
          <target state="translated">これは、次の例のように子コンポーネントが空のパス文字列で定義されている場合に特に便利です。この設定では、'/parent/10' に移動すると、メインの子コンポーネントと aux コンポーネントが作成されます。</target>
        </trans-unit>
        <trans-unit id="f0a8eee1520084e40ddb251d4ee70816b2810239" translate="yes" xml:space="preserve">
          <source>This is how you associate a template with logic, which is defined in the component class.</source>
          <target state="translated">これは、コンポーネントクラスで定義されているテンプレートとロジックを関連付ける方法です。</target>
        </trans-unit>
        <trans-unit id="3a2de92bdd97f6fbeeca5fdc9ee29a195958c537" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following image, which displays the logging date.</source>
          <target state="translated">これは以下の画像で説明したもので、ログの日付が表示されています。</target>
        </trans-unit>
        <trans-unit id="4461ea0ba25396c618a6f8a0d7132ba6f60a3420" translate="yes" xml:space="preserve">
          <source>This is manifestly more complicated than &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and rightly so. The &lt;code&gt;NgFor&lt;/code&gt; directive has more features, both required and optional, than the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; shown in this guide. At minimum &lt;code&gt;NgFor&lt;/code&gt; needs a looping variable (&lt;code&gt;let hero&lt;/code&gt;) and a list (&lt;code&gt;heroes&lt;/code&gt;).</source>
          <target state="translated">これは明らかに &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; よりも複雑で、当然です。 &lt;code&gt;NgFor&lt;/code&gt; のディレクティブは、より多くの機能を有している、のいずれよりも、必須および任意 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; は、このガイドに示します。少なくとも &lt;code&gt;NgFor&lt;/code&gt; にはループ変数（ &lt;code&gt;let hero&lt;/code&gt; ）とリスト（ &lt;code&gt;heroes&lt;/code&gt; ）が必要です。</target>
        </trans-unit>
        <trans-unit id="7efe4c9363e221388c4cd38d8c3a512cea782501" translate="yes" xml:space="preserve">
          <source>This is often the case with &lt;em&gt;routing components&lt;/em&gt;. As a rule you test the component, not the router, and care only if the component navigates with the right address under the given conditions.</source>
          <target state="translated">これは、&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;の場合によく見られ&lt;em&gt;ます&lt;/em&gt;。原則として、ルーターではなくコンポーネントをテストし、指定された条件下でコンポーネントが正しいアドレスでナビゲートする場合にのみ注意します。</target>
        </trans-unit>
        <trans-unit id="60412eee3362861bf6dd3a41df31f62ad91b66a4" translate="yes" xml:space="preserve">
          <source>This is one of the three fundamental building blocks of Angular forms, along with &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It extends the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; class that implements most of the base functionality for accessing the value, validation status, user interactions and events.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; とともに、Angularフォームの3つの基本的なビルディングブロックの1つです。値、検証ステータス、ユーザーインタラクション、イベントにアクセスするための基本機能のほとんどを実装する &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; クラスを拡張します。</target>
        </trans-unit>
        <trans-unit id="c8af7d6538861c4de12ed064fb23bf497866d794" translate="yes" xml:space="preserve">
          <source>This is one of the three fundamental building blocks of Angular forms, along with &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It extends the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; class that implements most of the base functionality for accessing the value, validation status, user interactions and events. See &lt;a href=&quot;formcontrol#usage-notes&quot;&gt;usage examples below&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; とともに、Angularフォームの3つの基本的な構成要素の1つです。これは、値、検証ステータス、ユーザーインタラクション、およびイベントにアクセスするための基本機能のほとんどを実装する &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; クラスを拡張します。&lt;a href=&quot;formcontrol#usage-notes&quot;&gt;以下の使用例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="51b5158af868b9258e387116060b9c47ff8fb973" translate="yes" xml:space="preserve">
          <source>This is similar to the phone list component. The new wrinkle is the &lt;code&gt;RouteParams&lt;/code&gt; type annotation that identifies the &lt;code&gt;routeParams&lt;/code&gt; dependency.</source>
          <target state="translated">これは電話リストコンポーネントに似ています。新しいしわは、 &lt;code&gt;routeParams&lt;/code&gt; 依存関係を識別する &lt;code&gt;RouteParams&lt;/code&gt; タイプアノテーションです。</target>
        </trans-unit>
        <trans-unit id="804a4031c3f14f499869d2204177c75dee70978b" translate="yes" xml:space="preserve">
          <source>This is the SHA1 hash of the most up-to-date version of the app that the service worker knows about.</source>
          <target state="translated">これはサービスワーカーが知っているアプリの最新版のSHA1ハッシュです。</target>
        </trans-unit>
        <trans-unit id="16525e697531723027c408ae314d617a3cee22fa" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の基本クラスです。</target>
        </trans-unit>
        <trans-unit id="32e4434471515868a1b3925d1547dbdde41ab113" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の基本クラスです。</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes" xml:space="preserve">
          <source>This is the default option.</source>
          <target state="translated">これはデフォルトのオプションです。</target>
        </trans-unit>
        <trans-unit id="2f800de1b08868e8b8e49cce1d56cd86eef0162b" translate="yes" xml:space="preserve">
          <source>This is the inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">これは内部の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cff98b359039fbd0f2a88788c0ca5a17c544f06f" translate="yes" xml:space="preserve">
          <source>This is the outer &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">これは外側の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6fbcbb942159ed1a22b254df114719bad20d47a4" translate="yes" xml:space="preserve">
          <source>This is the perfect infiltration job for a directive. The heroes will never know they're being watched.</source>
          <target state="translated">これは指令のための完璧な潜入任務です。ヒーローは監視されていることに気づかない</target>
        </trans-unit>
        <trans-unit id="4ccba53d17df213bee27c394101fd3424e3c0b6f" translate="yes" xml:space="preserve">
          <source>This is the place to free resources that won't be garbage collected automatically. Unsubscribe from Observables and DOM events. Stop interval timers. Unregister all callbacks that this directive registered with global or application services. You risk memory leaks if you neglect to do so.</source>
          <target state="translated">自動でゴミ収集されないリソースを解放するための場所です。ObservablesやDOMイベントからの退会を解除します。インターバルタイマーを停止します。このディレクティブがグローバルサービスやアプリケーションサービスに登録したコールバックの登録をすべて解除してください。これを怠るとメモリリークの危険があります。</target>
        </trans-unit>
        <trans-unit id="2f5ed6fbbb5f8dadb12202b2e0fbdec880ace274" translate="yes" xml:space="preserve">
          <source>This is the place to free resources that won't be garbage-collected automatically. You risk memory leaks if you neglect to do so.</source>
          <target state="translated">ここでは、自動的にゴミ箱に回収されないリソースを解放します。これを怠るとメモリリークのリスクがあります。</target>
        </trans-unit>
        <trans-unit id="9a6525a4da9f9f2b0077e6c20e8b8ad052414394" translate="yes" xml:space="preserve">
          <source>This is the same in both template-driven and reactive forms.</source>
          <target state="translated">これはテンプレート駆動型でも反応型でも同じです。</target>
        </trans-unit>
        <trans-unit id="87a555dd35ff17530be3a1fe3b938e47130474eb" translate="yes" xml:space="preserve">
          <source>This is the simplest production-ready deployment of your application.</source>
          <target state="translated">これは、アプリケーションの最もシンプルな本番対応のデプロイメントです。</target>
        </trans-unit>
        <trans-unit id="c58e06956699ce3b5d0d19719918b6ae26cfc2f3" translate="yes" xml:space="preserve">
          <source>This is the time to notify another part of the application that the component is going away.</source>
          <target state="translated">これは、アプリケーションの別の部分に、そのコンポーネントがなくなることを通知するときです。</target>
        </trans-unit>
        <trans-unit id="5d3cebde8a1c748058ff6feaf6d6fd7fffbd33c4" translate="yes" xml:space="preserve">
          <source>This is used to parse the response appropriately before returning it to the requestee.</source>
          <target state="translated">依頼元に返す前にレスポンスを適切に解析するために使用します。</target>
        </trans-unit>
        <trans-unit id="4575447306482a712f678b2a9d395b8a07e7fe6d" translate="yes" xml:space="preserve">
          <source>This is usually created automatically by &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt;.</source>
          <target state="translated">これは通常、 &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt; によって自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="8d4f6bc5f09e6fd5355e7d9f2a9258c893547afc" translate="yes" xml:space="preserve">
          <source>This is very important since it allows you to repurpose the components for any type of survey as long as it's compatible with the &lt;em&gt;question&lt;/em&gt; object model. The key is the dynamic data binding of metadata used to render the form without making any hardcoded assumptions about specific questions. In addition to control metadata, you are also adding validation dynamically.</source>
          <target state="translated">これは、&lt;em&gt;質問&lt;/em&gt;オブジェクトモデルと互換性がある限り、あらゆる種類の調査のコンポーネントを再利用できるため、非常に重要です。重要なのは、特定の質問についてハードコードされた仮定を行わずにフォームをレンダリングするために使用されるメタデータの動的データバインディングです。メタデータを制御するだけでなく、検証を動的に追加することもできます。</target>
        </trans-unit>
        <trans-unit id="30cc4dc7a4b6f15bc6646908fab43b52eb183eb7" translate="yes" xml:space="preserve">
          <source>This isn't an oversight. Angular doesn't offer such pipes because they perform poorly and prevent aggressive minification. Both &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; require parameters that reference object properties. Earlier in this page, you learned that such pipes must be &lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;impure&lt;/a&gt; and that Angular calls impure pipes in almost every change-detection cycle.</source>
          <target state="translated">これは見落としではありません。Angularはそのようなパイプを提供していません。パフォーマンスが低く、攻撃的な縮小を妨げるためです。 &lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;orderBy&lt;/code&gt; の両方に、オブジェクトプロパティを参照するパラメーターが必要です。このページの前半で、そのようなパイプは&lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;不純&lt;/a&gt;である必要があり、Angular呼び出しはほとんどすべての変更検出サイクルで不純なパイプであることを学びました。</target>
        </trans-unit>
        <trans-unit id="bf87feeb4d56bb09ecc40ffedbf5b9b09eea90de" translate="yes" xml:space="preserve">
          <source>This isn't necessarily good design. This example is examining &lt;em&gt;whether a component can inject its parent via the parent's base class&lt;/em&gt;.</source>
          <target state="translated">これは必ずしも良いデザインとは限りません。この例では&lt;em&gt;、コンポーネントが親の基本クラスを介して親を挿入できるかどうか&lt;/em&gt;を調べ&lt;em&gt;ています&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6eaca4844068379a7e60176fbbfc6443308fe713" translate="yes" xml:space="preserve">
          <source>This isn't usually a problem, especially if you adhere to the recommended &lt;em&gt;one class per file&lt;/em&gt; rule. But sometimes circular references are unavoidable. You're in a bind when class 'A' refers to class 'B' and 'B' refers to 'A'. One of them has to be defined first.</source>
          <target state="translated">これは通常は問題になりません。特に、&lt;em&gt;ファイルごとに&lt;/em&gt;推奨される&lt;em&gt;1つのクラスの&lt;/em&gt;ルールに準拠している場合はそうです。ただし、循環参照が避けられない場合もあります。クラス 'A'がクラス 'B'を参照し、 'B'が 'A'を参照する場合は、バインドされています。それらの1つを最初に定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="c05a6f671aee7310acf8516389c5116cf909b2b4" translate="yes" xml:space="preserve">
          <source>This list of modules are those that export components, directives, or pipes that component templates in this module reference. In this case, the component is &lt;code&gt;AppComponent&lt;/code&gt;, which references components, directives, or pipes in &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. A component template can reference another component, directive, or pipe when the referenced class is declared in this module or the class was imported from another module.</source>
          <target state="translated">このモジュールのリストは、このモジュール参照のコンポーネントテンプレートであるコンポーネント、ディレクティブ、またはパイプをエクスポートするものです。この場合、コンポーネントは &lt;code&gt;AppComponent&lt;/code&gt; であり、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; のコンポーネント、ディレクティブ、またはパイプを参照します。コンポーネントテンプレートは、参照されるクラスがこのモジュールで宣言されている場合、またはクラスが別のモジュールからインポートされている場合に、別のコンポーネント、ディレクティブ、またはパイプを参照できます。</target>
        </trans-unit>
        <trans-unit id="ee0b3ac2c6c7f7ea1c3093b1d935ac0ccfed0cd9" translate="yes" xml:space="preserve">
          <source>This list of modules are those that export components, directives, or pipes that the component templates in this module reference. In this case, the component is &lt;code&gt;AppComponent&lt;/code&gt;, which references components, directives, or pipes in &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. A component template can reference another component, directive, or pipe when the referenced class is declared in this module or the class was imported from another module.</source>
          <target state="translated">このモジュールのリストは、このモジュールのコンポーネントテンプレートが参照するコンポーネント、ディレクティブ、またはパイプをエクスポートするものです。この場合、コンポーネントは &lt;code&gt;AppComponent&lt;/code&gt; であり、これは &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; のコンポーネント、ディレクティブ、またはパイプを参照します。参照されたクラスがこのモジュールで宣言されている場合、またはクラスが別のモジュールからインポートされた場合、コンポーネントテンプレートは別のコンポーネント、ディレクティブ、またはパイプを参照できます。</target>
        </trans-unit>
        <trans-unit id="4a9afe5b810e772d3eb663f9b40c1dd4d79aaccb" translate="yes" xml:space="preserve">
          <source>This makes the controller code look a lot more like Angular already. You're all set to actually introduce Angular into the project.</source>
          <target state="translated">これにより、コントローラのコードはすでにAngularにかなり似ています。これで実際にAngularをプロジェクトに導入する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="cf52b88eeaa1d49f9b18045164c3a40eae3476c3" translate="yes" xml:space="preserve">
          <source>This makes the provider visible to every class in the application that knows the provider's lookup token, or name.</source>
          <target state="translated">これにより、プロバイダのルックアップトークンまたは名前を知っているアプリケーション内のすべてのクラスからプロバイダが見えるようになります。</target>
        </trans-unit>
        <trans-unit id="e402b132534c7c9be62f7464642b0941cc482405" translate="yes" xml:space="preserve">
          <source>This mapping ensures that your library always loads the local copies of the modules it needs.</source>
          <target state="translated">このマッピングにより、ライブラリが必要なモジュールのローカルコピーを常にロードするようになります。</target>
        </trans-unit>
        <trans-unit id="31460d71bf9e1b081028cbc8de1171f82e87335e" translate="yes" xml:space="preserve">
          <source>This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use &lt;code&gt;resetTestEnvironment&lt;/code&gt;.</source>
          <target state="translated">これは、現在のプラットフォームで現在のテストスイートの共通プロバイダーを設定するために、1回だけ呼び出すことができます。プロバイダーを変更する必要がある場合は、最初に &lt;code&gt;resetTestEnvironment&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="61958d29a3c8058968147c18b0f01bb5c73d67d0" translate="yes" xml:space="preserve">
          <source>This may seem like what the app has been doing all along. Not quite. The &lt;code&gt;AppModule&lt;/code&gt; is loaded when the application starts; that's &lt;em&gt;eager&lt;/em&gt; loading. Now the &lt;code&gt;AdminModule&lt;/code&gt; loads only when the user clicks on a link; that's &lt;em&gt;lazy&lt;/em&gt; loading.</source>
          <target state="translated">これは、アプリがずっとやってきたように思えるかもしれません。結構です。 &lt;code&gt;AppModule&lt;/code&gt; は、アプリケーションの起動時にロードされます。それは&lt;em&gt;熱心な&lt;/em&gt;ロードです。これで、 &lt;code&gt;AdminModule&lt;/code&gt; は、ユーザーがリンクをクリックしたときにのみロードされます。それは&lt;em&gt;遅延&lt;/em&gt;読み込みです。</target>
        </trans-unit>
        <trans-unit id="12bc8c3aa7a62420ea2cb6d2e429c4880c25f7b6" translate="yes" xml:space="preserve">
          <source>This may seem restrictive but it's also fast. An object reference check is fast&amp;mdash;much faster than a deep check for differences&amp;mdash;so Angular can quickly determine if it can skip both the pipe execution and a view update.</source>
          <target state="translated">これは制限的なように見えるかもしれませんが、高速でもあります。オブジェクト参照チェックは高速で、差異の詳細チェックよりもはるかに高速です。そのため、Angularは、パイプの実行とビューの更新の両方をスキップできるかどうかをすばやく判断できます。</target>
        </trans-unit>
        <trans-unit id="5ad5340f87862c854151cf06f5fd6043a1b00b74" translate="yes" xml:space="preserve">
          <source>This means that an NgModule behaves differently depending on whether it's loaded during application start or lazy-loaded later. Neglecting that difference can lead to &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;adverse consequences&lt;/a&gt;.</source>
          <target state="translated">つまり、NgModuleの動作は、アプリケーションの起動時に読み込まれるか、後で遅延読み込みされるかによって異なります。その違いを無視すると、&lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;悪影響が生じる&lt;/a&gt;可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e6e948c64201b9f8912c19889c92106c85c33fc" translate="yes" xml:space="preserve">
          <source>This means that when you build your production configuration (using &lt;code&gt;ng build --prod&lt;/code&gt; or &lt;code&gt;ng build --configuration=production&lt;/code&gt;), the &lt;code&gt;src/environments/environment.ts&lt;/code&gt; file is replaced with the target-specific version of the file, &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt;.</source>
          <target state="translated">これは、（ &lt;code&gt;ng build --prod&lt;/code&gt; または &lt;code&gt;ng build --configuration=production&lt;/code&gt; を使用して）プロダクション構成をビルドすると、 &lt;code&gt;src/environments/environment.ts&lt;/code&gt; ファイルがターゲット固有のバージョンのファイル &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt; 置き換えられることを意味します/environment.prod.ts。</target>
        </trans-unit>
        <trans-unit id="7b42c601f1b0de6ca86d93b51f7a4f0d84c91d6c" translate="yes" xml:space="preserve">
          <source>This means you're responsible for putting &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; on your service classes.</source>
          <target state="translated">つまり、サービスクラスに &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="b37292a0b3e74c75b71eca67292a0c0b9392a296" translate="yes" xml:space="preserve">
          <source>This method also updates the value and validity of the control.</source>
          <target state="translated">また、この方法は、コントロールの値と有効性を更新します。</target>
        </trans-unit>
        <trans-unit id="e754eab77abab498cd7f7a0b1268613ab289c6ed" translate="yes" xml:space="preserve">
          <source>This method does not update the value or validity of the control. Use &lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt; instead.</source>
          <target state="translated">このメソッドは、コントロールの値または有効性を更新しません。代わりに&lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="100a8e77d4f74abe1033d79495767430a1882094" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</source>
          <target state="translated">このメソッドは、ビューからモデルに値が伝搬する際にフォームモデルを更新するために、初期化時にフォームAPIによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="957d45ae3b8977944714e03589b7ce213ef76cbd" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API to write to the view when programmatic changes from model to view are requested.</source>
          <target state="translated">このメソッドは、モデルからビューへのプログラム的な変更が要求されたときに、フォームAPIによって呼び出されてビューに書き込みます。</target>
        </trans-unit>
        <trans-unit id="d4c0ca924e5a897aa17682cd4a412c4b9b49e4bc" translate="yes" xml:space="preserve">
          <source>This method is for development and testing only, and is not a supported or secure way of deploying an application.</source>
          <target state="translated">この方法は開発とテストのためだけのものであり、アプリケーションをデプロイするためのサポートされていない、あるいは安全な方法ではありません。</target>
        </trans-unit>
        <trans-unit id="6edd05f81e26ff6f38d68bee1458846ab8ffe7a0" translate="yes" xml:space="preserve">
          <source>This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API methods such as &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;. If you need to support older browsers (like Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">このメソッドは、HTML5モードでのみサポートされ、 &lt;code&gt;pushState&lt;/code&gt; や &lt;code&gt;replaceState&lt;/code&gt; などのHTML5 HistoryAPIメソッドをサポートするブラウザーでのみサポートされます。古いブラウザ（Android &amp;lt;4.0など）をサポートする必要がある場合は、この方法を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="07d75e6c897ca8fced62ff854dd31dff479c1ea8" translate="yes" xml:space="preserve">
          <source>This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API methods such as &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;. If you need to support older browsers (like IE9 or Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">このメソッドは、HTML5モードでのみのようなHTML5の歴史のAPIメソッドサポートしているブラウザでサポートされてい &lt;code&gt;pushState&lt;/code&gt; と &lt;code&gt;replaceState&lt;/code&gt; を。古いブラウザ（IE9やAndroid &amp;lt;4.0など）をサポートする必要がある場合は、この方法を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="582cc9eb2f1253026d9fec705c1a27f27a1e5797" translate="yes" xml:space="preserve">
          <source>This method performs strict checks, and throws an error if you try to set the value of a control that doesn't exist or if you exclude the value of a control.</source>
          <target state="translated">このメソッドは厳密なチェックを行い、存在しないコントロールの値を設定しようとした場合や、コントロールの値を除外した場合にエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="38f2789fcaf15e04940002919821b82465849aa8" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;code&gt;Promise&lt;/code&gt; which indicates that the update check has completed successfully, though it does not indicate whether an update was discovered as a result of the check. Even if one is found, the service worker must still successfully download the changed files, which can fail. If successful, the &lt;code&gt;available&lt;/code&gt; event will indicate availability of a new version of the app.</source>
          <target state="translated">このメソッドは、更新のチェックが正常に完了したことを示す &lt;code&gt;Promise&lt;/code&gt; を返しますが、チェックの結果として更新が検出されたかどうかは示しません。見つかった場合でも、Service Workerは変更されたファイルを正常にダウンロードする必要があるため、失敗する可能性があります。成功した場合、 &lt;code&gt;available&lt;/code&gt; イベントはアプリの新しいバージョンが利用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="7240a76f2e460d49075a05cb693f1cf044c80345" translate="yes" xml:space="preserve">
          <source>This might seem strange if you're used to dependency injection in strongly typed languages where an interface is the preferred dependency lookup key. However, JavaScript, doesn't have interfaces, so when TypeScript is transpiled to JavaScript, the interface disappears. There is no interface type information left for Angular to find at runtime.</source>
          <target state="translated">強く型付けされた言語での依存性注入に慣れていて、インターフェイスが優先される依存性ルックアップキーに慣れているならば、これは奇妙に見えるかもしれません。しかし、JavaScriptにはインターフェイスがないので、TypeScriptをJavaScriptにトランスパイルするとインターフェイスが消えてしまいます。Angularが実行時に見つけるインターフェースの型情報は残っていません。</target>
        </trans-unit>
        <trans-unit id="cebcf45fa5843285adb17f4750feda2527b4caa3" translate="yes" xml:space="preserve">
          <source>This milestone covers the following:</source>
          <target state="translated">このマイルストーンでは、以下のような内容が含まれています。</target>
        </trans-unit>
        <trans-unit id="0e15ee716458e352dc7390a8a35261c1328b3839" translate="yes" xml:space="preserve">
          <source>This milestone shows you how to configure a special-purpose module called a &lt;em&gt;Routing Module&lt;/em&gt;, which holds your app's routing configuration.</source>
          <target state="translated">このマイルストーンは、アプリのルーティング構成を保持する&lt;em&gt;ルーティング&lt;/em&gt;モジュールと呼ばれる特別な目的のモジュールを構成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="01a6160cc6927cc87e97af3ca12f5d7c3e578c05" translate="yes" xml:space="preserve">
          <source>This module defines a &lt;code&gt;routes&lt;/code&gt; object with two routes to the two phone components and a default route for the empty path. It passes the &lt;code&gt;routes&lt;/code&gt; to the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method which does the rest.</source>
          <target state="translated">このモジュールは、2つの電話コンポーネントへの2つのルートと空のパスのデフォルトルートを持つ &lt;code&gt;routes&lt;/code&gt; オブジェクトを定義します。残りの処理を行う &lt;code&gt;RouterModule.forRoot&lt;/code&gt; メソッドに &lt;code&gt;routes&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="81b384ca39cda92728b7bd10a1501aede53ebbbb" translate="yes" xml:space="preserve">
          <source>This next example binds an &lt;code&gt;Observable&lt;/code&gt; of message strings (&lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt;) to a view with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプを使用して、メッセージ文字列の &lt;code&gt;Observable&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt; ）をビューにバインドしています。</target>
        </trans-unit>
        <trans-unit id="1f28fed5c95e4e5fc2cf216bb7edd12cd2cdd95f" translate="yes" xml:space="preserve">
          <source>This one root component is usually called &lt;code&gt;AppComponent&lt;/code&gt; and is in the root module's &lt;code&gt;bootstrap&lt;/code&gt; array.</source>
          <target state="translated">この1つのルートコンポーネントは通常 &lt;code&gt;AppComponent&lt;/code&gt; と呼ばれ、ルートモジュールの &lt;code&gt;bootstrap&lt;/code&gt; 配列にあります。</target>
        </trans-unit>
        <trans-unit id="553c357233905d7a357b67f87ff6741c54ba7d0c" translate="yes" xml:space="preserve">
          <source>This option can take one of the following &lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;sub-commands&lt;/a&gt;:</source>
          <target state="translated">このオプションは、次の&lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;サブコマンドの&lt;/a&gt;いずれかを取ることができます。</target>
        </trans-unit>
        <trans-unit id="7e2bdd9bc4821ec6e25c48f5020fa352d5d592c1" translate="yes" xml:space="preserve">
          <source>This option is intended to validate the &lt;code&gt;.metadata.json&lt;/code&gt; files emitted for bundling with an &lt;code&gt;npm&lt;/code&gt; package. The validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler. You can choose to suppress the error emitted by this option for an exported symbol by including &lt;code&gt;@dynamic&lt;/code&gt; in the comment documenting the symbol.</source>
          <target state="translated">このオプションは、 &lt;code&gt;npm&lt;/code&gt; パッケージとのバンドル用に &lt;code&gt;.metadata.json&lt;/code&gt; された.metadata.jsonファイルを検証することを目的としています。検証は厳密であり、テンプレートコンパイラで使用してもエラーが発生しないメタデータのエラーが発生する可能性があります。シンボルを &lt;code&gt;@dynamic&lt;/code&gt; するコメントに@dynamicを含めることにより、エクスポートされたシンボルに対してこのオプションによって発行されるエラーを抑制するように選択できます。</target>
        </trans-unit>
        <trans-unit id="d6eab3c2994a6a17d4115d07f1dae680ac2ec26d" translate="yes" xml:space="preserve">
          <source>This option is only available if application URLs look like normal web URLs without hashes (#) in the middle.</source>
          <target state="translated">このオプションは、アプリケーションのURLが中間にハッシュ(#)を入れずに通常のWeb URLのように見える場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="8136dad883434011e60763326dfd8b6bf0a135fa" translate="yes" xml:space="preserve">
          <source>This optional property enables you to configure how the service worker handles navigation requests:</source>
          <target state="translated">このオプションのプロパティを使用すると、サービス ワーカーがナビゲーション要求を処理する方法を構成できます。</target>
        </trans-unit>
        <trans-unit id="b706956040eab679c0d00e95b8bd1fb93cd1e1bf" translate="yes" xml:space="preserve">
          <source>This optional section enables you to specify a custom list of URLs that will be redirected to the index file.</source>
          <target state="translated">このオプションのセクションでは、インデックスファイルにリダイレクトされるURLのカスタムリストを指定することができます。</target>
        </trans-unit>
        <trans-unit id="d49647d5cde74d419f8b7a1440d72e1fa1cdb7e9" translate="yes" xml:space="preserve">
          <source>This page answers the questions many developers ask about NgModule design and implementation.</source>
          <target state="translated">このページでは、NgModuleの設計と実装に関する多くの開発者からの質問にお答えします。</target>
        </trans-unit>
        <trans-unit id="e470076e6470a706c5e7519008e46a929c297415" translate="yes" xml:space="preserve">
          <source>This page covered how to use the &lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt; package to incrementally upgrade existing AngularJS apps at your own pace and without impeding further development of the app for the duration of the upgrade process.</source>
          <target state="translated">このページでは、&lt;a href=&quot;../api/upgrade/static&quot;&gt;アップグレード/静的&lt;/a&gt;パッケージを使用して、既存のAngularJSアプリを自分のペースで段階的にアップグレードし、アップグレードプロセスの期間中、アプリのさらなる開発を妨げないようにする方法について説明しました。</target>
        </trans-unit>
        <trans-unit id="81be0c6f770103c818ad9a59d216fef97dd57b87" translate="yes" xml:space="preserve">
          <source>This page covered how to:</source>
          <target state="translated">このページでは、その方法を網羅していました。</target>
        </trans-unit>
        <trans-unit id="c3d2f38bcda77f3d0e583e4cbd59a23c93e26dd3" translate="yes" xml:space="preserve">
          <source>This page covers some aspects of TypeScript configuration and the TypeScript environment that are important to Angular developers, including details about the following files:</source>
          <target state="translated">このページでは、以下のファイルの詳細を含め、Angular開発者にとって重要なTypeScriptの設定やTypeScript環境のいくつかの側面について説明しています。</target>
        </trans-unit>
        <trans-unit id="dc6463bb109d0d9d7a3485b00e656aa5ad4447d1" translate="yes" xml:space="preserve">
          <source>This page demonstrates building a simple &lt;em&gt;appHighlight&lt;/em&gt; attribute directive to set an element's background color when the user hovers over that element. You can apply it like this:</source>
          <target state="translated">このページでは、単純な&lt;em&gt;appHighlight&lt;/em&gt;属性ディレクティブを作成して、ユーザーが要素に&lt;em&gt;カーソル&lt;/em&gt;を合わせたときに要素の背景色を設定する方法を示します。次のように適用できます。</target>
        </trans-unit>
        <trans-unit id="f41f995aa12a74f7c35870947d8b3dfcd851015a" translate="yes" xml:space="preserve">
          <source>This page describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication (&lt;em&gt;Who is this user?&lt;/em&gt;) and authorization (&lt;em&gt;What can this user do?&lt;/em&gt;).</source>
          <target state="translated">このページでは、一般的なWebアプリケーションの脆弱性およびクロスサイトスクリプティング攻撃などの攻撃に対するAngularの組み込み保護について説明します。認証（&lt;em&gt;このユーザーは誰ですか？&lt;/em&gt;）や承認（&lt;em&gt;このユーザーは何ができ&lt;/em&gt;&lt;em&gt;ますか？&lt;/em&gt;）などのアプリケーションレベルのセキュリティはカバーしていません。</target>
        </trans-unit>
        <trans-unit id="b0a26a5d944df815f572ce97ca9af1ebb2bdb5a7" translate="yes" xml:space="preserve">
          <source>This page describes how to load and apply these component styles.</source>
          <target state="translated">このページでは、これらのコンポーネントスタイルをロードして適用する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="9ea2990707bfb1eb329f12d6cb790431a215270f" translate="yes" xml:space="preserve">
          <source>This page describes the most useful Angular testing features.</source>
          <target state="translated">このページでは、最も便利なAngularのテスト機能について説明しています。</target>
        </trans-unit>
        <trans-unit id="09ae81e8cd8b8d7fc27be03d544055e093469b55" translate="yes" xml:space="preserve">
          <source>This page discusses best practices for designing Angular applications that work well for all users, including those who rely on assistive technologies.</source>
          <target state="translated">このページでは、支援技術に依存しているユーザーを含め、すべてのユーザーに対応できるAngularアプリケーションを設計するためのベストプラクティスについて説明します。</target>
        </trans-unit>
        <trans-unit id="670a5a082b047a72ce1a558bd250325e58e09d59" translate="yes" xml:space="preserve">
          <source>This page discusses build-specific configuration options for Angular projects.</source>
          <target state="translated">このページでは、Angularプロジェクトのビルド固有の設定オプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="e05b95dc7d3d7d081939018409b02519ccacc29a" translate="yes" xml:space="preserve">
          <source>This page guides you through creating the shopping cart in three phases:</source>
          <target state="translated">このページでは、ショッピングカートを3つのフェーズに分けて作成する方法をご案内しています。</target>
        </trans-unit>
        <trans-unit id="cbfa8125c3023f0e5a452262dd4b80eb0950ad8c" translate="yes" xml:space="preserve">
          <source>This page is a comprehensive technical reference to the Angular template language. It explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</source>
          <target state="translated">このページはAngularテンプレート言語の総合的な技術リファレンスです。テンプレート言語の基本的な原理を説明し、ドキュメントの他の場所で遭遇するであろう構文のほとんどを説明しています。</target>
        </trans-unit>
        <trans-unit id="7fad648d853b5ed4d555cb38fbfbacd9ba7992b6" translate="yes" xml:space="preserve">
          <source>This page is a reference for deploying and supporting production apps that use the Angular service worker. It explains how the Angular service worker fits into the larger production environment, the service worker's behavior under various conditions, and available resources and fail-safes.</source>
          <target state="translated">このページは Angular サービスワーカーを利用した本番アプリをデプロイしてサポートするためのリファレンスです。このページでは、Angular サービスワーカーがより大きなプロダクション環境にどのようにフィットするか、様々な状況下でのサービスワーカーの動作、利用可能なリソースとフェイルセーフについて説明しています。</target>
        </trans-unit>
        <trans-unit id="be3ec6216875616431f7d6ed1137be9c33cace38" translate="yes" xml:space="preserve">
          <source>This page provides a conceptual overview of a dependency injection technique that is recommended for library developers. Designing your library with &lt;em&gt;lightweight injection tokens&lt;/em&gt; helps optimize the bundle size of client applications that use your library.</source>
          <target state="translated">このページでは、ライブラリ開発者に推奨される依存性注入手法の概念的な概要を説明します。&lt;em&gt;軽量のインジェクショントークン&lt;/em&gt;を使用してライブラリを設計すると、ライブラリを使用するクライアントアプリケーションのバンドルサイズを最適化できます。</target>
        </trans-unit>
        <trans-unit id="5d3133b3ab2dc9616d7ee04b4ceb9f767579da99" translate="yes" xml:space="preserve">
          <source>This page provides a conceptual overview of how you can create and publish new libraries to extend Angular functionality.</source>
          <target state="translated">このページでは、Angularの機能を拡張するための新しいライブラリを作成して公開する方法を概念的に説明しています。</target>
        </trans-unit>
        <trans-unit id="97c20e865f128e08c87e8b02ca1209e92134e457" translate="yes" xml:space="preserve">
          <source>This page shows how to validate user input in the UI and display useful validation messages using both reactive and template-driven forms. It assumes some basic knowledge of the two forms modules.</source>
          <target state="translated">このページでは、リアクティブフォームとテンプレート駆動型フォームの両方を使用して UI でユーザー入力を検証し、有用な検証メッセージを表示する方法を紹介します。このページでは、2 つのフォームモジュールの基本的な知識があることを前提としています。</target>
        </trans-unit>
        <trans-unit id="5d4c0327323a7a67f27b56ff84bda976d2f25fa4" translate="yes" xml:space="preserve">
          <source>This page shows you how to build a simple form from scratch. Along the way you'll learn how to:</source>
          <target state="translated">このページでは、ゼロから簡単なフォームを作成する方法を紹介します。途中で、以下の方法を学びます。</target>
        </trans-unit>
        <trans-unit id="809f471c9fda21049d71c0885d6f8ee1429911d6" translate="yes" xml:space="preserve">
          <source>This particular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;; that is, &quot;&lt;em&gt;an observable of hero arrays&lt;/em&gt;&quot;. In practice, it will only return a single hero array.</source>
          <target state="translated">この特定の &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 呼び出しは、 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; 返します。つまり、「&lt;em&gt;英雄配列の観察可能&lt;/em&gt;」です。実際には、単一のヒーロー配列のみを返します。</target>
        </trans-unit>
        <trans-unit id="d836ca04f6cff950392c8ae7f7d0cf1a60a94c96" translate="yes" xml:space="preserve">
          <source>This particular test suite supplies a minimal mock of the &lt;code&gt;UserService&lt;/code&gt; that satisfies the needs of the &lt;code&gt;WelcomeComponent&lt;/code&gt; and its tests:</source>
          <target state="translated">この特定のテストスイートは、 &lt;code&gt;WelcomeComponent&lt;/code&gt; とそのテストのニーズを満たす &lt;code&gt;UserService&lt;/code&gt; の最小限のモックを提供します。</target>
        </trans-unit>
        <trans-unit id="ff6ecdb8628c90cfa56e0ff26fbdce1243318d07" translate="yes" xml:space="preserve">
          <source>This pipe definition reveals the following key points:</source>
          <target state="translated">このパイプの定義を見ると、次のようなポイントが見えてきます。</target>
        </trans-unit>
        <trans-unit id="9c06cdda191efa55a95c5ebbcd3348ce80c0d189" translate="yes" xml:space="preserve">
          <source>This platform has to be included in any other platform</source>
          <target state="translated">このプラットフォームは、他のプラットフォームにも含まれている必要があります</target>
        </trans-unit>
        <trans-unit id="1a66dd83805fb99c52388b0a549137c596348fd3" translate="yes" xml:space="preserve">
          <source>This produces the following error:</source>
          <target state="translated">これにより、以下のようなエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="cc28ea5e9b1a6b51e4c29ff84265e5f10b52e574" translate="yes" xml:space="preserve">
          <source>This registers Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; providers globally.</source>
          <target state="translated">これにより、Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; プロバイダーがグローバルに登録されます。</target>
        </trans-unit>
        <trans-unit id="40b2f3a8cf72659eb5e60961a2342494b2510413" translate="yes" xml:space="preserve">
          <source>This registers a drop-in replacement for the &lt;code&gt;$location&lt;/code&gt; provider in AngularJS. Once registered, all navigation, routing broadcast messages, and any necessary digest cycles in AngularJS triggered during navigation are handled by Angular. This gives you a single way to navigate within both sides of your hybrid application consistently.</source>
          <target state="translated">これにより、AngularJSの &lt;code&gt;$location&lt;/code&gt; プロバイダーのドロップイン置換が登録されます。登録すると、すべてのナビゲーション、ルーティングブロードキャストメッセージ、およびナビゲーション中にトリガーされたAngularJSの必要なダイジェストサイクルがAngularによって処理されます。これにより、ハイブリッドアプリケーションの両側を一貫してナビゲートする単一の方法が得られます。</target>
        </trans-unit>
        <trans-unit id="768b48e740a696bfc0705b3b4a88ffb9387d0941" translate="yes" xml:space="preserve">
          <source>This removal has no impact on CLI users, unless they modified their build configuration to explicitly consume these code distributions.</source>
          <target state="translated">この削除は、ビルド構成を変更してこれらのコード・ディストリビューションを明示的に消費しない限り、CLI ユーザに影響を与えることはありません。</target>
        </trans-unit>
        <trans-unit id="06f56de558de0a575487e683fea999edf392ee43" translate="yes" xml:space="preserve">
          <source>This request passes the &lt;code&gt;heroesURL&lt;/code&gt; as the first parameter and the callback function name as the second parameter. The response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</source>
          <target state="translated">このリクエストは、 &lt;code&gt;heroesURL&lt;/code&gt; を最初のパラメーターとして渡し、コールバック関数名を2番目のパラメーターとして渡します。応答はコールバック関数でラップされます。コールバック関数は、JSONPメソッドによって返されたオブザーバブルを受け取り、それらをエラーハンドラーにパイプします。</target>
        </trans-unit>
        <trans-unit id="d9fd7c2c4a20b1de98c590fa48930235dc6aba0d" translate="yes" xml:space="preserve">
          <source>This route redirects a URL that fully matches the empty path to the route whose path is &lt;code&gt;'/dashboard'&lt;/code&gt;.</source>
          <target state="translated">このルートは、空のパスと完全に一致するURLを、パスが &lt;code&gt;'/dashboard'&lt;/code&gt; であるルートにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="6c41f8a018f7563801e156030ed8a8f8ca194ad0" translate="yes" xml:space="preserve">
          <source>This rule is essential to Angular's &quot;unidirectional data flow&quot; policy. You should never worry that reading a component value might change some other displayed value. The view should be stable throughout a single rendering pass.</source>
          <target state="translated">このルールはAngularの「一方向データフロー」ポリシーには欠かせないものです。コンポーネントの値を読んでも、他の表示されている値が変わるかもしれないと心配してはいけません。ビューは1回のレンダリングパスを通して安定していなければなりません。</target>
        </trans-unit>
        <trans-unit id="57892addca2408cf0e87807e6475ac5695bf2874" translate="yes" xml:space="preserve">
          <source>This sample app recreates the heroes feature in the &quot;Services&quot; section of the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;, and reuses much of the code from the .</source>
          <target state="translated">このサンプルアプリは、&lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroesチュートリアル&lt;/a&gt;の「Services」セクションにあるヒーロー機能を再現し、からのコードの多くを再利用します。</target>
        </trans-unit>
        <trans-unit id="0d1e4a2f1c53200691565434ab456d518f0bf3a4" translate="yes" xml:space="preserve">
          <source>This sample file is easy to translate without a special editor or knowledge of French.</source>
          <target state="translated">このサンプルファイルは、特別なエディタやフランス語の知識がなくても簡単に翻訳できます。</target>
        </trans-unit>
        <trans-unit id="480408f47c676f8c57b3cde5a055d6686d241608" translate="yes" xml:space="preserve">
          <source>This scenario causes your app to create a new instance every time, instead of using the singleton.</source>
          <target state="translated">このシナリオでは、アプリはシングルトンを使用する代わりに毎回新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="99aa2e43a5383e16a847762330ebaee6bfd37ca5" translate="yes" xml:space="preserve">
          <source>This scoping restriction is a &lt;strong&gt;&lt;em&gt;styling modularity feature&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">このスコープ制限は、&lt;strong&gt;&lt;em&gt;モジュール化機能のスタイル設定です&lt;/em&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="31d68c7991b2366acf1e70e15d44815dc09ecff1" translate="yes" xml:space="preserve">
          <source>This script can be used both to deactivate &lt;code&gt;@angular/service-worker&lt;/code&gt; as well as any other Service Workers which might have been served in the past on your site.</source>
          <target state="translated">このスクリプトは、 &lt;code&gt;@angular/service-worker&lt;/code&gt; や、サイトで過去に提供された可能性のある他のサービスワーカーを無効にするために使用できます。</target>
        </trans-unit>
        <trans-unit id="c18fae7524b94c2e1854507242de01f07367e013" translate="yes" xml:space="preserve">
          <source>This section about &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; has its own . The following subsections highlight key points in the sample app.</source>
          <target state="translated">このセクションについて &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 、独自のを持っています。次のサブセクションでは、サンプルアプリの重要なポイントを強調しています。</target>
        </trans-unit>
        <trans-unit id="b64223a794713879607f46b9296695b6693dcfef" translate="yes" xml:space="preserve">
          <source>This section assumes you are familiar with &lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;.</source>
          <target state="translated">このセクションは、&lt;a href=&quot;https://docs.bazel.build&quot;&gt;読者がBazelに&lt;/a&gt;精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="61775d2ada3e1aaca95806012a1cae0e038b820d" translate="yes" xml:space="preserve">
          <source>This section contains a complete list all of the currently deprecated CLI flags.</source>
          <target state="translated">このセクションでは、現在非推奨となっているすべてのCLIフラグの完全なリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="11a0d4f001f44cf92c4d038ced8939573bb0e86d" translate="yes" xml:space="preserve">
          <source>This section contains a complete list all of the currently-deprecated APIs, with details to help you plan your migration to a replacement.</source>
          <target state="translated">このセクションでは、現在定義されていないすべてのAPIの完全なリストが含まれており、置き換えへの移行を計画するのに役立つ詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="f5235be074b4aa0d4b2e76c1864190fa474d6ead" translate="yes" xml:space="preserve">
          <source>This section contains default build target options, used when no named alternative configuration is specified. See &lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;Default build targets&lt;/a&gt; below.</source>
          <target state="translated">このセクションには、名前付きの代替構成が指定されていない場合に使用されるデフォルトのビルドターゲットオプションが含まれています。以下の&lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;デフォルトのビルドターゲットを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a6f4ac6b1d629df1dd4126322ebc082c11c00de6" translate="yes" xml:space="preserve">
          <source>This section covers changes you may have make to the server or to files deployed to the server.</source>
          <target state="translated">このセクションでは、サーバーまたはサーバーにデプロイされたファイルに対する変更について説明します。</target>
        </trans-unit>
        <trans-unit id="b00ef0591ba8184696f1413d52cca1b7afa05294" translate="yes" xml:space="preserve">
          <source>This section covers changes you may have to make to the server or to files deployed on the server.</source>
          <target state="translated">このセクションでは、サーバーまたはサーバー上に配置されたファイルに変更を加えなければならない場合があることを説明します。</target>
        </trans-unit>
        <trans-unit id="1b184253cc42d7415bb50e2b1f1ae4bfa4d58e73" translate="yes" xml:space="preserve">
          <source>This section defines and names alternative configurations for different intended destinations. It contains a section for each named configuration, which sets the default options for that intended environment. See &lt;a href=&quot;workspace-config#build-configs&quot;&gt;Alternate build configurations&lt;/a&gt; below.</source>
          <target state="translated">このセクションでは、さまざまな目的の宛先の代替構成を定義して名前を付けます。名前付き構成ごとのセクションが含まれ、目的の環境のデフォルトオプションを設定します。以下の&lt;a href=&quot;workspace-config#build-configs&quot;&gt;代替ビルド構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e7378faaab25e8cea0f89eb0420acd35173d6d0c" translate="yes" xml:space="preserve">
          <source>This section defines the policy by which matching requests will be cached.</source>
          <target state="translated">このセクションでは、マッチするリクエストがキャッシュされるポリシーを定義します。</target>
        </trans-unit>
        <trans-unit id="085d9b2381ce33b95badee4ece65c04252ae8b07" translate="yes" xml:space="preserve">
          <source>This section demonstrates a service worker in action, using an example application.</source>
          <target state="translated">このセクションでは、アプリケーションの例を使用して、サービスワーカーの動作を実演します。</target>
        </trans-unit>
        <trans-unit id="b0beb9d185cb05154e1dd17453c7c97560febcea" translate="yes" xml:space="preserve">
          <source>This section demonstrates how to write providers that deliver dependent services.</source>
          <target state="translated">ここでは、依存サービスを提供するプロバイダの書き方を紹介します。</target>
        </trans-unit>
        <trans-unit id="eb2c533b5e2645aa61c4b0e279f37acd6ba4506b" translate="yes" xml:space="preserve">
          <source>This section describes how to add a single form control. In the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</source>
          <target state="translated">ここでは、単一のフォームコントロールを追加する方法を説明します。この例では、ユーザーが入力フィールドに名前を入力し、その入力値をキャプチャし、フォームコントロール要素の現在の値を表示しています。</target>
        </trans-unit>
        <trans-unit id="8df9a0125bfce0a631c00cf027d6c0c9e9c21223" translate="yes" xml:space="preserve">
          <source>This section describes how to limit the scope of the beginning and ending &lt;code&gt;ElementInjector&lt;/code&gt; using the visibility decorators &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、最初の範囲を限定して終了する方法について説明し &lt;code&gt;ElementInjector&lt;/code&gt; を可視デコレータを使用して &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="93a1f837d6690ccc5052bae1311690c80cb118fa" translate="yes" xml:space="preserve">
          <source>This section describes some techniques for doing that.</source>
          <target state="translated">そのためのテクニックを紹介します。</target>
        </trans-unit>
        <trans-unit id="7d51845aea280551e7377855a04b80ead1d2f4bd" translate="yes" xml:space="preserve">
          <source>This section describes the resources to cache, broken up into the following groups:</source>
          <target state="translated">ここでは、キャッシュするリソースを以下のグループに分けて説明します。</target>
        </trans-unit>
        <trans-unit id="69a1ff0385a87975f95ae5a798ec38b6e1fa9506" translate="yes" xml:space="preserve">
          <source>This section describes the resources to cache, broken up into three groups.</source>
          <target state="translated">ここでは、キャッシュするためのリソースを3つのグループに分けて説明します。</target>
        </trans-unit>
        <trans-unit id="7164aeb8b556a0ff400bdf3da7f1df7d1f517925" translate="yes" xml:space="preserve">
          <source>This section describes two techniques for minimizing the setup. Use them, alone or in combination, to stay focused on testing the primary component.</source>
          <target state="translated">このセクションでは、セットアップを最小限に抑えるための2つのテクニックについて説明します。これらを単独または組み合わせて使用することで、プライマリ・コンポーネントのテストに集中することができます。</target>
        </trans-unit>
        <trans-unit id="25d342d94221065f56ba9567318ef23b976b78cb" translate="yes" xml:space="preserve">
          <source>This section describes two techniques for minimizing the setup. Use them, alone or in combination, to stay focused on the testing the primary component.</source>
          <target state="translated">このセクションでは、セットアップを最小限に抑えるための2つのテクニックについて説明します。これらを単独で、または組み合わせて使用することで、プライマリ・コンポーネントのテストに集中することができます。</target>
        </trans-unit>
        <trans-unit id="4b6eb3ab67768fa1db1718443a20d6bef34cf012" translate="yes" xml:space="preserve">
          <source>This section enables you to pass any data you want that describes this particular version of the app. The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service includes that data in the update notifications. Many apps use this section to provide additional information for the display of UI popups, notifying users of the available update.</source>
          <target state="translated">このセクションでは、アプリのこの特定のバージョンを説明する必要なデータを渡すことができます。 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; のサービスは、更新の通知でそのデータを含んでいます。多くのアプリはこのセクションを使用して、UIポップアップの表示に関する追加情報を提供し、利用可能なアップデートをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="47fc123a3ed1f0d231e027d8288971ed0c72aa21" translate="yes" xml:space="preserve">
          <source>This section explores many of the features of dependency injection (DI) in Angular.</source>
          <target state="translated">このセクションでは、Angularにおける依存性注入(DI)の機能の多くを探ります。</target>
        </trans-unit>
        <trans-unit id="4384b75486bddedfea304c2a90535f59084acc2a" translate="yes" xml:space="preserve">
          <source>This section guides you through adding a custom strategy that only preloads routes whose &lt;code&gt;data.preload&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;. Recall that you can add anything to the &lt;code&gt;data&lt;/code&gt; property of a route.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;data.preload&lt;/code&gt; フラグが &lt;code&gt;true&lt;/code&gt; に設定されているルートのみをプリロードするカスタム戦略を追加する方法について説明します。ルートの &lt;code&gt;data&lt;/code&gt; プロパティには何でも追加できることを思い出してください。</target>
        </trans-unit>
        <trans-unit id="d4ab163f1040a173c8f1fee4855a987c614055d5" translate="yes" xml:space="preserve">
          <source>This section guides you through extending the crisis center with some new administrative features. Start by adding a new feature module named &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、いくつかの新しい管理機能を使用して危機センターを拡張する方法について説明します。 &lt;code&gt;AdminModule&lt;/code&gt; という名前の新しい機能モジュールを追加することから始めます。</target>
        </trans-unit>
        <trans-unit id="aa94115b584195aa264c16e4fb5711861e3ddede" translate="yes" xml:space="preserve">
          <source>This section guides you through migrating the &lt;code&gt;Hero&lt;/code&gt; routes to new URLs. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; checks for redirects in your configuration before navigating, so each redirect is triggered when needed. To support this change, add redirects from the old routes to the new routes in the &lt;code&gt;heroes-routing.module&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Hero&lt;/code&gt; ルートを新しいURLに移行する方法について説明します。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 必要なときにナビゲートする前に、ご使用の構成でリダイレクトのためのチェックは、その各々のリダイレクトがトリガされます。この変更をサポートするには、 &lt;code&gt;heroes-routing.module&lt;/code&gt; に古いルートから新しいルートへのリダイレクトを追加します。</target>
        </trans-unit>
        <trans-unit id="3fbce57e38fce3ed83994d74968cf78f64dac167" translate="yes" xml:space="preserve">
          <source>This section guides you through the following:</source>
          <target state="translated">ここでは、以下のように案内しています。</target>
        </trans-unit>
        <trans-unit id="e327b6a9a7d25aeebecb0e4a2e3d8dd80bb60d4b" translate="yes" xml:space="preserve">
          <source>This section guides you through updating the &lt;code&gt;CrisisCenterModule&lt;/code&gt; to load lazily by default and use the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy to load all lazy loaded modules.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;CrisisCenterModule&lt;/code&gt; を更新してデフォルトで遅延読み込みを行い、 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 戦略を使用してすべての遅延読み込みモジュールを読み込む方法について説明します。</target>
        </trans-unit>
        <trans-unit id="a01d00f37cdecb7bf80e6521a92c1f8871d11b3b" translate="yes" xml:space="preserve">
          <source>This section has covered the following:</source>
          <target state="translated">この項では、以下のことを取り上げました。</target>
        </trans-unit>
        <trans-unit id="25546f650c09fba6868c4a94f07eeaca55c8fedb" translate="yes" xml:space="preserve">
          <source>This section introduces the basic procedure for configuring a lazy-loaded route. For a step-by-step example, see the &lt;a href=&quot;lazy-loading-ngmodules#step-by-step&quot;&gt;step-by-step setup&lt;/a&gt; section on this page.</source>
          <target state="translated">このセクションでは、遅延ロードルートを構成するための基本的な手順を紹介します。ステップバイステップの例については、このページの&lt;a href=&quot;lazy-loading-ngmodules#step-by-step&quot;&gt;ステップバイステップのセットアップ&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="3a63d68a98a00a26a92cce922c9931db461a38cf" translate="yes" xml:space="preserve">
          <source>This section is an introduction to the common built-in structural directives:</source>
          <target state="translated">このセクションでは、一般的な組み込み構造ディレクティブについて紹介します。</target>
        </trans-unit>
        <trans-unit id="c4d630efe539af7ec5dfcdfbcacacc0d6a4f3dbc" translate="yes" xml:space="preserve">
          <source>This section lists all of the currently-deprecated features, which includes template syntax, configuration options, and any other deprecations not listed in the &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;Deprecated APIs&lt;/a&gt; section above. It also includes deprecated API usage scenarios or API combinations, to augment the information above.</source>
          <target state="translated">このセクションでは、テンプレートの構文、構成オプション、および上記の非&lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;推奨のAPI&lt;/a&gt;セクションにリストされていないその他の非推奨を含む、現在非推奨の機能をすべてリストします。また、上記の情報を補足するために、非推奨のAPI使用シナリオまたはAPIの組み合わせも含まれています。</target>
        </trans-unit>
        <trans-unit id="7cae31034c8a2571577d2c3c5b7550e76da38a59" translate="yes" xml:space="preserve">
          <source>This section provides example of both kinds of type-guard property.</source>
          <target state="translated">ここでは、両種類のタイプガードプロパティの例を示します。</target>
        </trans-unit>
        <trans-unit id="306aadf682fc11264f3cfeb1c732892c12664c75" translate="yes" xml:space="preserve">
          <source>This section shows how to animate elements entering or leaving a page.</source>
          <target state="translated">ここでは、ページに入ったり出たりする要素をアニメーション化する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="3b6e09c67f8a39342ff4c0257fcd5cc67bae2f2c" translate="yes" xml:space="preserve">
          <source>This section shows how to create asynchronous validators. It assumes some basic knowledge of creating &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、非同期バリデーターの作成方法を示します。&lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーター&lt;/a&gt;の作成に関する基本的な知識があることを前提としています。</target>
        </trans-unit>
        <trans-unit id="c1876bae15f4c669767ab3331f67eef88c5960e8" translate="yes" xml:space="preserve">
          <source>This section shows how to perform cross field validation. It assumes some basic knowledge of creating custom validators.</source>
          <target state="translated">このセクションでは、クロスフィールドバリデーションを実行する方法を説明します。カスタムバリデータを作成するための基本的な知識があることを前提としています。</target>
        </trans-unit>
        <trans-unit id="d5c59841ebf0b19060f6d7b48397f23337988937" translate="yes" xml:space="preserve">
          <source>This section shows you how refactor the app into different feature modules, import them into the main module and navigate among them.</source>
          <target state="translated">このセクションでは、アプリをさまざまな機能モジュールにリファクタリングし、それらをメインモジュールにインポートし、それらの間をナビゲートする方法を示します。</target>
        </trans-unit>
        <trans-unit id="75b7c3faa674491b569ef3f7a4a266fb1b70aa3c" translate="yes" xml:space="preserve">
          <source>This section shows you how to add child routes and use relative routing in your app.</source>
          <target state="translated">このセクションでは、アプリで子ルートを追加し、相対ルーティングを使用する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="40c08e782b8b4dce59c05abd346b382ec356f9f6" translate="yes" xml:space="preserve">
          <source>This section shows you how to add some &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt; to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; に&lt;a href=&quot;animations&quot;&gt;アニメーション&lt;/a&gt;を追加する方法を示します。</target>
        </trans-unit>
        <trans-unit id="28698d05d33f5b1671f713ab414eca9161933dd5" translate="yes" xml:space="preserve">
          <source>This section shows you how to organize the crisis center to conform to the following recommended pattern for Angular applications:</source>
          <target state="translated">ここでは、Angularアプリケーションの以下の推奨パターンに準拠するように危機管理センターを整理する方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="6e5105772fe1e30775a6f76ca44803f4e4116d09" translate="yes" xml:space="preserve">
          <source>This section shows you how to use the HTTP client to retrieve shipping prices from an external file.</source>
          <target state="translated">ここでは、HTTPクライアントを使用して外部ファイルから出荷価格を取得する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="e00ccb32c33d8d2804037de8c12b3f968f52ceea" translate="yes" xml:space="preserve">
          <source>This section shows you how to use the cart service to display the products in the cart.</source>
          <target state="translated">ここでは、カートサービスを利用してカート内に商品を表示させる方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="8555832b3f593de35864e26800451467378353f6" translate="yes" xml:space="preserve">
          <source>This section takes inventory of the most useful Angular testing features and summarizes what they do.</source>
          <target state="translated">このセクションでは、最も有用な Angular のテスト機能のインベントリを取り、それらが何をするのかをまとめています。</target>
        </trans-unit>
        <trans-unit id="e477486420bece3d0d8e61799151b739e8e6daf2" translate="yes" xml:space="preserve">
          <source>This section walks you through adding a form-based checkout feature to collect user information as part of checkout.</source>
          <target state="translated">このセクションでは、チェックアウトの一部としてユーザー情報を収集するためのフォームベースのチェックアウト機能の追加について説明します。</target>
        </trans-unit>
        <trans-unit id="87e4800653dc5aadd7144d1a9d30485a59601d33" translate="yes" xml:space="preserve">
          <source>This section walks you through using the cart service to add a product to the cart with a &quot;Buy&quot; button.</source>
          <target state="translated">ここでは、カートサービスを利用して、「購入」ボタンでカートに商品を追加する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="15bf3c33e1424399ab26287ac6065fe7557dd98a" translate="yes" xml:space="preserve">
          <source>This setup also calls &lt;code&gt;TestBed.get()&lt;/code&gt; to inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service and the mocking controller so they can be referenced during the tests.</source>
          <target state="translated">このセットアップでは、 &lt;code&gt;TestBed.get()&lt;/code&gt; を呼び出して、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスとモックコントローラーを挿入し、テスト中に参照できるようにします。</target>
        </trans-unit>
        <trans-unit id="c78041ba40d1fbcc918dbb701fe401ee868f8518" translate="yes" xml:space="preserve">
          <source>This setup also calls &lt;code&gt;TestBed.inject()&lt;/code&gt; to inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service and the mocking controller so they can be referenced during the tests.</source>
          <target state="translated">このセットアップでは、 &lt;code&gt;TestBed.inject()&lt;/code&gt; を呼び出して、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスとモッキングコントローラーを挿入し、テスト中に参照できるようにします。</target>
        </trans-unit>
        <trans-unit id="456f1cff8a28d651f522a6a70eb2cb94a641a08f" translate="yes" xml:space="preserve">
          <source>This setup guide uses the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm client&lt;/a&gt; command line interface, which is installed with &lt;code&gt;Node.js&lt;/code&gt; by default.</source>
          <target state="translated">このセットアップガイドでは、デフォルトで &lt;code&gt;Node.js&lt;/code&gt; とともにインストールされる&lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npmクライアント&lt;/a&gt;コマンドラインインターフェースを使用します。</target>
        </trans-unit>
        <trans-unit id="92609043e3a5049fe9cf167aad090f47caad57aa" translate="yes" xml:space="preserve">
          <source>This simple rule factory returns the tree without modification. The options are the option values passed through from the &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">この単純なルールファクトリは、変更せずにツリーを返します。オプションは、 &lt;code&gt;ng generate&lt;/code&gt; コマンドから渡されるオプション値です。</target>
        </trans-unit>
        <trans-unit id="3d73db06502687b0e565f94857691c977b98bee9" translate="yes" xml:space="preserve">
          <source>This small test demonstrates how Angular tests can verify a component's visual representation&amp;mdash;something not possible with &lt;a href=&quot;testing#component-class-testing&quot;&gt;component class tests&lt;/a&gt;&amp;mdash;at low cost and without resorting to much slower and more complicated end-to-end tests.</source>
          <target state="translated">この小さなテストは、Angularテストがコンポーネントの視覚的表現（&lt;a href=&quot;testing#component-class-testing&quot;&gt;コンポーネントクラステストで&lt;/a&gt;は不可能なこと）を低コストで、はるかに低速で複雑なエンドツーエンドテストに頼らずに検証する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5fd279f89c1525d18c06d2c05403b810e6621320" translate="yes" xml:space="preserve">
          <source>This small test demonstrates how Angular tests can verify a component's visual representation&amp;mdash;something not possible with &lt;a href=&quot;testing-components-basics#component-class-testing&quot;&gt;component class tests&lt;/a&gt;&amp;mdash;at low cost and without resorting to much slower and more complicated end-to-end tests.</source>
          <target state="translated">この小さなテストは、Angularテストがコンポーネントの視覚的表現（&lt;a href=&quot;testing-components-basics#component-class-testing&quot;&gt;コンポーネントクラステストで&lt;/a&gt;は不可能なこと）を低コストで、はるかに低速で複雑なエンドツーエンドテストに頼ることなく検証する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cb009288ce29b0288afe49f6ee2aab850b60725f" translate="yes" xml:space="preserve">
          <source>This snapshot reflects the state of the log after the user clicked the &lt;em&gt;Create...&lt;/em&gt; button and then the &lt;em&gt;Destroy...&lt;/em&gt; button.</source>
          <target state="translated">このスナップショットは、ユーザーが[ &lt;em&gt;作成...&lt;/em&gt; ]ボタンをクリックしてから[ &lt;em&gt;破棄...&lt;/em&gt; ] ボタンをクリックした後のログの状態を反映しています。</target>
        </trans-unit>
        <trans-unit id="3191364fc32b6e08abc6a27512ac0807ec66c575" translate="yes" xml:space="preserve">
          <source>This step serves a purpose analogous to &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt; and &lt;code&gt;whenStable()&lt;/code&gt; in the earlier &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; examples. The balance of the test is the same as those examples.</source>
          <target state="translated">このステップは、前の &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）および &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; （）の例の&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick（）&lt;/a&gt;および &lt;code&gt;whenStable()&lt;/code&gt; に類似した目的を果たします。テストのバランスはそれらの例と同じです。</target>
        </trans-unit>
        <trans-unit id="079dfe1488f95b55bfe4eaaff729c5ed46abb14d" translate="yes" xml:space="preserve">
          <source>This step serves a purpose analogous to &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;whenStable()&lt;/code&gt; in the earlier &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; examples. The balance of the test is the same as those examples.</source>
          <target state="translated">この手順は、以前の &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）および &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; （）の例の &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;whenStable()&lt;/code&gt; に類似した目的を果たします。テストのバランスはこれらの例と同じです。</target>
        </trans-unit>
        <trans-unit id="dd15d4d4538f8653d2b222f1a75f8aaa65446a2d" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs.</source>
          <target state="translated">この戦略では、複数のブラウザをサポートするためにWebアプリケーションを構築し続けることができますが、ブラウザが必要とする必要なコードのみをロードします。</target>
        </trans-unit>
        <trans-unit id="a6549f07c80220a17e94351180403481dcd649c2" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs. For more information about how this works, see &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential Loading&lt;/a&gt; in the &lt;a href=&quot;deployment&quot;&gt;Deployment guide&lt;/a&gt;.</source>
          <target state="translated">この戦略により、複数のブラウザーをサポートするWebアプリケーションを引き続き構築し、ブラウザーが必要とする必要なコードのみをロードすることができます。これがどのように機能するかの詳細については、&lt;a href=&quot;deployment&quot;&gt;展開ガイドの&lt;/a&gt;&lt;a href=&quot;deployment#differential-loading&quot;&gt;差分読み込み&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e609b20e1c574bc355c924ed6553ac80401ff0e8" translate="yes" xml:space="preserve">
          <source>This strategy does not store any routes for later reuse.</source>
          <target state="translated">このストラテジーは、後で再利用するためのルートを保存しません。</target>
        </trans-unit>
        <trans-unit id="d7f27f72ef1db3f4b8e0b64ac49c35d1b3d860d4" translate="yes" xml:space="preserve">
          <source>This strategy is enabled by default.</source>
          <target state="translated">このストラテジーはデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="7c2cab4ddb78ce7228d94edd854eab1d7580006d" translate="yes" xml:space="preserve">
          <source>This stricter type checking is not enabled by default in version 9, but can be enabled by setting the &lt;code&gt;strictTemplates&lt;/code&gt; configuration option. We do expect to make strict type checking the default in the future.</source>
          <target state="translated">このより厳密なタイプチェックは、バージョン9ではデフォルトで有効になっていませんが、 &lt;code&gt;strictTemplates&lt;/code&gt; 構成オプションを設定することで有効にできます。将来的には、厳密な型チェックをデフォルトにする予定です。</target>
        </trans-unit>
        <trans-unit id="8c4a67f46bf55c4aa1042894ef01b904f273ef12" translate="yes" xml:space="preserve">
          <source>This style guide is for anyone who contributes to the Angular documentation (this site). These guidelines should be followed by all authors. Deviations must be approved by a documentation editor.</source>
          <target state="translated">このスタイルガイドは、Angularのドキュメント(当サイト)に貢献するすべての人のためのものです。このガイドラインはすべての執筆者が遵守すべきものです。逸脱はドキュメント編集者の承認を得なければなりません。</target>
        </trans-unit>
        <trans-unit id="b4dc934e925dfc611be024d59208b2dd13b6d211" translate="yes" xml:space="preserve">
          <source>This syntax conforms to the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU Message Format&lt;/a&gt; as specified in the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR pluralization rules&lt;/a&gt;.</source>
          <target state="translated">この構文は、&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR複数形化規則で&lt;/a&gt;指定されている&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICUメッセージ形式に&lt;/a&gt;準拠しています。</target>
        </trans-unit>
        <trans-unit id="a921404409acb321a0300d0ef76d994ae2a236f1" translate="yes" xml:space="preserve">
          <source>This syntax tells the Angular compiler to read the external files during component compilation.</source>
          <target state="translated">この構文は、コンポーネントのコンパイル中に外部ファイルを読み込むようAngularコンパイラに指示します。</target>
        </trans-unit>
        <trans-unit id="f054420c1ce338910d0afb64bdc92e93d64d0562" translate="yes" xml:space="preserve">
          <source>This technique can improve performance on mobile and low-powered devices and improve the user experience by showing a static first page quickly while the client-side app is loading. The static version can also make your app more visible to web crawlers.</source>
          <target state="translated">このテクニックは、クライアント側のアプリがロードされている間に静的な最初のページを素早く表示することで、モバイルや低消費電力のデバイスでのパフォーマンスを向上させ、ユーザーエクスペリエンスを向上させることができます。また、静的なバージョンは、ウェブクローラーからアプリをより見やすくすることができます。</target>
        </trans-unit>
        <trans-unit id="ac27da6a3425110fb4858d56fa56042a9d64c44f" translate="yes" xml:space="preserve">
          <source>This technique is effective because all browsers implement the &lt;em&gt;same origin policy&lt;/em&gt;. Only code from the website on which cookies are set can read the cookies from that site and set custom headers on requests to that site. That means only your application can read this cookie token and set the custom header. The malicious code on &lt;code&gt;evil.com&lt;/code&gt; can't.</source>
          <target state="translated">すべてのブラウザが&lt;em&gt;同じオリジンポリシーを&lt;/em&gt;実装しているため、この手法は効果的です。Cookieが設定されているWebサイトのコードのみが、そのサイトからのCookieを読み取り、そのサイトへのリクエストにカスタムヘッダーを設定できます。つまり、アプリケーションだけがこのCookieトークンを読み取ってカスタムヘッダーを設定できます。 &lt;code&gt;evil.com&lt;/code&gt; の悪意のあるコードではできません。</target>
        </trans-unit>
        <trans-unit id="edaf5e02d43ccc1019d65ebdfbccee03f175b8c8" translate="yes" xml:space="preserve">
          <source>This technique is suitable for setting a single style, but consider the &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive when setting several inline styles at the same time.</source>
          <target state="translated">この手法は単一のスタイルを設定するのに適していますが、複数のインラインスタイルを同時に設定する場合は、&lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;ディレクティブを考慮してください。</target>
        </trans-unit>
        <trans-unit id="f819a7b1e0aafa1d2068ac4808d42099765b1fd4" translate="yes" xml:space="preserve">
          <source>This technique works for any attribute of any element.</source>
          <target state="translated">このテクニックは、任意の要素の任意の属性に対して動作します。</target>
        </trans-unit>
        <trans-unit id="c1e03a2b5a2ead7f58623d3d33ead88c0cbed81a" translate="yes" xml:space="preserve">
          <source>This tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; preloader to immediately load &lt;em&gt;all&lt;/em&gt; lazy loaded routes (routes with a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property).</source>
          <target state="translated">これは、&lt;em&gt;すべての&lt;/em&gt;遅延ロードされたルート（ &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; プロパティを持つルート）をすぐにロードするように &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; プリローダーに指示します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="02a67f3677df899c9872b4c722cacd0ea9415c83" translate="yes" xml:space="preserve">
          <source>This tells the router to match that URL to &lt;code&gt;path: 'heroes'&lt;/code&gt; and display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the URL is something like &lt;code&gt;localhost:4200/heroes&lt;/code&gt;.</source>
          <target state="translated">これは、そのURLを &lt;code&gt;path: 'heroes'&lt;/code&gt; に一致させ、URLが &lt;code&gt;localhost:4200/heroes&lt;/code&gt; のような場合に &lt;code&gt;HeroesComponent&lt;/code&gt; を表示するようにルーターに指示します。</target>
        </trans-unit>
        <trans-unit id="ec46416c5da71796079b783f64e64dd6e3d3f4fd" translate="yes" xml:space="preserve">
          <source>This template applies the &lt;code&gt;SpyDirective&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;&lt;em&gt;hero&lt;/em&gt; repeater managed by the parent &lt;code&gt;SpyComponent&lt;/code&gt;.</source>
          <target state="translated">このテンプレートは、親 &lt;code&gt;SpyComponent&lt;/code&gt; によって管理される &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;em&gt;ヒーロー&lt;/em&gt;リピーターの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に &lt;code&gt;SpyDirective&lt;/code&gt; を適用します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b56327c98c0651adf92a3962b35326d9411155a9" translate="yes" xml:space="preserve">
          <source>This template binds directly to the component's &lt;code&gt;messageService&lt;/code&gt;.</source>
          <target state="translated">このテンプレートは、コンポーネントの &lt;code&gt;messageService&lt;/code&gt; に直接バインドします。</target>
        </trans-unit>
        <trans-unit id="9e9c43c15900050160dc8be35d6067a63318aec5" translate="yes" xml:space="preserve">
          <source>This template looks a lot like the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater in the &lt;code&gt;HeroesComponent&lt;/code&gt; template.</source>
          <target state="translated">このテンプレートは、 &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートの &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピーターによく似ています。</target>
        </trans-unit>
        <trans-unit id="d637ab123347ac13fe17a004c73c98b4dddb234f" translate="yes" xml:space="preserve">
          <source>This template uses typical HTML elements like &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, and also includes Angular template-syntax elements, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;{{hero.name}}&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, &lt;code&gt;[hero]&lt;/code&gt;, and &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt;. The template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</source>
          <target state="translated">このテンプレートは、 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; などの一般的なHTML要素を使用し、Angularテンプレート構文要素、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;{{hero.name}}&lt;/code&gt; 、 &lt;code&gt;(click)&lt;/code&gt; 、 &lt;code&gt;[hero]&lt;/code&gt; 、および &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; も含みます&amp;gt;。テンプレート構文要素は、プログラムロジックとデータを使用して、画面にHTMLをレンダリングする方法をAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="33f50f397f4ca96e33bfb10d036f4db70c1735c8" translate="yes" xml:space="preserve">
          <source>This test expects the component to try to navigate to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">このテストは、コンポーネントが &lt;code&gt;HeroListComponent&lt;/code&gt; に移動しようとすることを想定しています。</target>
        </trans-unit>
        <trans-unit id="501a5e4c0d88821fa944fe51ad014be796c1b208" translate="yes" xml:space="preserve">
          <source>This test host binds to &lt;code&gt;DashboardHeroComponent&lt;/code&gt; as the &lt;code&gt;DashboardComponent&lt;/code&gt; would but without the noise of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;HeroService&lt;/code&gt;, or the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater.</source>
          <target state="translated">このテストホストは、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 同じように &lt;code&gt;DashboardComponent&lt;/code&gt; バインドしますが、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;HeroService&lt;/code&gt; 、または &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピーターのノイズはありません。</target>
        </trans-unit>
        <trans-unit id="6f65de663612898c193d6874b17e0426d7e59e43" translate="yes" xml:space="preserve">
          <source>This testing module configuration shows three important differences:</source>
          <target state="translated">このテストモジュールの構成は、3つの重要な違いを示しています。</target>
        </trans-unit>
        <trans-unit id="750aba5f80080e328a3f7b0b79fa476b6891b62b" translate="yes" xml:space="preserve">
          <source>This text wraps around to the right of the floating &quot;flying hero&quot; image.</source>
          <target state="translated">このテキストは、浮いている「空飛ぶヒーロー」の画像の右に回り込んでいます。</target>
        </trans-unit>
        <trans-unit id="113e418e350b558b02724dea8b12bbcc059f4851" translate="yes" xml:space="preserve">
          <source>This time you'll be navigating in the opposite direction, from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">今度は、から、反対方向に移動することになります &lt;code&gt;HeroDetailComponent&lt;/code&gt; に &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cefc645993bf706c88455dca56b4abc1e03879d3" translate="yes" xml:space="preserve">
          <source>This time, in addition to declaring the &lt;em&gt;component-under-test&lt;/em&gt;, the configuration adds a &lt;code&gt;UserService&lt;/code&gt; provider to the &lt;code&gt;providers&lt;/code&gt; list. But not the real &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">今回は、&lt;em&gt;テスト対象のコンポーネント&lt;/em&gt;を宣言することに加えて、構成により、 &lt;code&gt;providers&lt;/code&gt; リストに &lt;code&gt;UserService&lt;/code&gt; プロバイダーが追加されます。しかし、実際の &lt;code&gt;UserService&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="af2165b1138d7807abb0f9b20b74189222b793e4" translate="yes" xml:space="preserve">
          <source>This time, the value of &lt;code&gt;'popup'&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. That's not a route, but it is a legitimate value. Setting the popup &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; clears the outlet and removes the secondary popup route from the current URL.</source>
          <target state="translated">今回は、 &lt;code&gt;'popup'&lt;/code&gt; の値は &lt;code&gt;null&lt;/code&gt; です。これはルートではありませんが、正当な値です。ポップアップの &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;null&lt;/code&gt; に設定すると、アウトレットがクリアされ、現在のURLからセカンダリポップアップルートが削除されます。</target>
        </trans-unit>
        <trans-unit id="40bbb2371cebbdf60ae15d1ec5b7666df5d5300a" translate="yes" xml:space="preserve">
          <source>This topic describes how to create and configure an Angular component.</source>
          <target state="translated">このトピックでは、Angularコンポーネントを作成して設定する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="5176ea8b8dc3fac7511f8583255f1137f947700f" translate="yes" xml:space="preserve">
          <source>This topic provides a conceptual overview of the different categories of &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModules&lt;/a&gt; you can create in order to organize your code in a modular structure. These categories are not cast in stone&amp;mdash;they are suggestions. You may want to create NgModules for other purposes, or combine the characteristics of some of these categories.</source>
          <target state="translated">このトピックでは、コードをモジュラー構造に編成するために作成できる&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;のさまざまなカテゴリーの概念的な概要を説明します。これらのカテゴリは石に投げ込まれていません&amp;mdash;それらは提案です。他の目的でNgModuleを作成するか、これらのカテゴリのいくつかの特性を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="1d92a7f4ae8e3f11ab9554b88f4a5af57e0a872c" translate="yes" xml:space="preserve">
          <source>This topic provides some guidelines for the following general categories of NgModules:</source>
          <target state="translated">このトピックでは、NgModules の以下の一般的なカテゴリについて、いくつかのガイドラインを提供します。</target>
        </trans-unit>
        <trans-unit id="21b58f299c596628607bfe82d7a2f31208c5268b" translate="yes" xml:space="preserve">
          <source>This tutorial describes how you can build a single-page application, SPA that uses multiple Angular routes.</source>
          <target state="translated">このチュートリアルでは、複数のAngularルートを使用したシングルページアプリケーション、SPAを構築する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="1017b080efe853ab4a37570f7704ed1185bde730" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the essentials of Angular by walking you through a simple e-commerce site with a catalog, shopping cart, and check-out form. To help you get started right away, this guide uses a simple ready-made application that you can examine and modify interactively (without having to &lt;a href=&quot;guide/setup-local&quot;&gt;set up a local work environment&lt;/a&gt;).</source>
          <target state="translated">このチュートリアルでは、カタログ、ショッピングカート、チェックアウトフォームを備えたシンプルなeコマースサイトを紹介することで、Angularの基本を紹介します。このガイドでは、すぐに使い始めることができるように、（&lt;a href=&quot;guide/setup-local&quot;&gt;ローカルの作業環境&lt;/a&gt;を設定しなくても）インタラクティブに調べて変更できるシンプルな既製のアプリケーションを使用しています。</target>
        </trans-unit>
        <trans-unit id="4d58a98a6b42341e9f6814cfed96b99344da3020" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the essentials of Angular by walking you through building a simple e-commerce site with a catalog, shopping cart, and check-out form. It uses the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment so you can get started right away.</source>
          <target state="translated">このチュートリアルでは、カタログ、ショッピングカート、およびチェックアウトフォームを使用して簡単なeコマースサイトを構築する方法を説明することにより、Angularの本質を紹介します。&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;オンライン開発環境を使用しているため、すぐに始めることができます。</target>
        </trans-unit>
        <trans-unit id="75cca6ba2330a0de32bc9736198f0aa60de95f31" translate="yes" xml:space="preserve">
          <source>This tutorial provides an extensive overview of the Angular router. In this tutorial, you will build upon a basic router configuration to explore features such as child routes, route parameters, lazy load NgModules, guard routes, and preloading data to improve the user experience.</source>
          <target state="translated">このチュートリアルでは、Angular ルーターの広範な概要を説明します。このチュートリアルでは、基本的なルーターの設定を基に、子ルート、ルートパラメータ、遅延ロードNgModules、ガードルート、ユーザーエクスペリエンスを向上させるためのデータのプリロードなどの機能を探っていきます。</target>
        </trans-unit>
        <trans-unit id="4be47255fc4c07ae300b4da88c16205f91d089d6" translate="yes" xml:space="preserve">
          <source>This tutorial sample mimics communication with a remote data server by using the &lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;In-memory Web API&lt;/a&gt; module.</source>
          <target state="translated">このチュートリアルのサンプルは、&lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;インメモリWeb API&lt;/a&gt;モジュールを使用して、リモートデータサーバーとの通信を模倣します。</target>
        </trans-unit>
        <trans-unit id="bc3024b13e02f53d3e498300f1c2e6300a2d72b3" translate="yes" xml:space="preserve">
          <source>This tutorial shows how to build a a questionaire, which is just one kind of dynamic form. The example uses &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to collect a set of controls. For an example of a different type of dynamic form, see the section &lt;a href=&quot;reactive-forms#creating-dynamic-forms&quot;&gt;Creating dynamic forms&lt;/a&gt; in the Reactive Forms guide. That example also shows how to use &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to collect a set of controls.</source>
          <target state="translated">このチュートリアルでは、動的フォームの1つにすぎないアンケートを作成する方法を示します。この例では、 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を使用して一連のコントロールを収集します。異なるタイプの動的フォームの例については、「リアクティブフォームガイド&lt;a href=&quot;reactive-forms#creating-dynamic-forms&quot;&gt;」の「動的フォームの作成」&lt;/a&gt;セクションを参照してください。この例は、 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を使用して一連のコントロールを収集する方法も示しています。</target>
        </trans-unit>
        <trans-unit id="5ab45a75c827944992e1db362a0b5c036c3ecd7e" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to build a form from scratch, using a simplified sample form like the one from the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt; to illustrate the techniques.</source>
          <target state="translated">このチュートリアルでは、&lt;a href=&quot;tutorial&quot;&gt;Tour of Heroesチュートリアルの&lt;/a&gt;ような簡略化されたサンプルフォームを使用して、フォームを最初から作成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="52b747de47c76fdb387428a809e8e59e74cebd64" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to create a template-driven form whose control elements are bound to data properties, with input validation to maintain data integrity and styling to improve the user experience.</source>
          <target state="translated">このチュートリアルでは、データの整合性を維持するための入力検証と、ユーザーエクスペリエンスを向上させるためのスタイリングを用いて、コントロール要素がデータプロパティにバインドされたテンプレート駆動型フォームを作成する方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="bb98a6fecbbb46c54191cd7e4fdf79d8bfd8c9d6" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you how to do the following:</source>
          <target state="translated">このチュートリアルでは、次のようなことを教えています。</target>
        </trans-unit>
        <trans-unit id="d9d67a376ed76f9dd9f3998880f05555c2f237ea" translate="yes" xml:space="preserve">
          <source>This user experience is the developer's choice. Some developers want the message to display at all times. If you ignore the &lt;code&gt;pristine&lt;/code&gt; state, you would hide the message only when the value is valid. If you arrive in this component with a new (blank) hero or an invalid hero, you'll see the error message immediately, before you've done anything.</source>
          <target state="translated">このユーザーエクスペリエンスは開発者の選択です。一部の開発者は、メッセージを常に表示したいと考えています。 &lt;code&gt;pristine&lt;/code&gt; 状態を無視する場合、値が有効な場合にのみメッセージを非表示にします。新しい（空白の）ヒーローまたは無効なヒーローを使用してこのコンポーネントに到着した場合、何かをする前に、すぐにエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="f2e4047e551556a93bbd7f194989120c57f25bea" translate="yes" xml:space="preserve">
          <source>This value accessor is used by default for &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;defaultvalueaccessor&quot;&gt;textarea&lt;/a&gt;&amp;gt;&lt;/code&gt; elements, but you could also use it for custom components that have similar behavior and do not require special processing. In order to attach the default value accessor to a custom element, add the &lt;code&gt;&lt;a href=&quot;defaultvalueaccessor&quot;&gt;ngDefaultControl&lt;/a&gt;&lt;/code&gt; attribute as shown below.</source>
          <target state="translated">この値アクセサーは、デフォルトで &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;a href=&quot;defaultvalueaccessor&quot;&gt;textarea&lt;/a&gt;&amp;gt;&lt;/code&gt; 要素と&amp;lt; &lt;a href=&quot;defaultvalueaccessor&quot;&gt;textarea&lt;/a&gt; &amp;gt;要素に使用されますが、同様の動作をし、特別な処理を必要としないカスタムコンポーネントにも使用できます。デフォルト値アクセサーをカスタム要素に &lt;code&gt;&lt;a href=&quot;defaultvalueaccessor&quot;&gt;ngDefaultControl&lt;/a&gt;&lt;/code&gt; するには、以下に示すようにngDefaultControl属性を追加します。</target>
        </trans-unit>
        <trans-unit id="7fe52a203b046ba6736edeae46dcac27488617b9" translate="yes" xml:space="preserve">
          <source>This version of the &lt;code&gt;HeroListComponent&lt;/code&gt; gets heroes from the &lt;code&gt;HEROES&lt;/code&gt; array, an in-memory collection defined in a separate &lt;code&gt;mock-heroes&lt;/code&gt; file.</source>
          <target state="translated">このバージョンの &lt;code&gt;HeroListComponent&lt;/code&gt; は、別の &lt;code&gt;mock-heroes&lt;/code&gt; ファイルで定義されたメモリ内コレクションである &lt;code&gt;HEROES&lt;/code&gt; 配列からヒーローを取得します。</target>
        </trans-unit>
        <trans-unit id="5ac5c50e4fc7fc8f690f46a387d86d6cd4e8a480" translate="yes" xml:space="preserve">
          <source>This will call the &lt;code&gt;ls&lt;/code&gt; command instead of the &lt;code&gt;touch&lt;/code&gt; command. Because we did not override the &lt;em&gt;args&lt;/em&gt; option, it will list information about the &lt;code&gt;src/main.ts&lt;/code&gt; file (the default value provided for the target).</source>
          <target state="translated">これは &lt;code&gt;touch&lt;/code&gt; コマンドの代わりに &lt;code&gt;ls&lt;/code&gt; コマンドを呼び出します。&lt;em&gt;args&lt;/em&gt;オプションをオーバーライドしなかったため、 &lt;code&gt;src/main.ts&lt;/code&gt; ファイル（ターゲットに提供されるデフォルト値）に関する情報がリストされます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d850926d891f5f4c805e3e17fdc18eb990f42f2" translate="yes" xml:space="preserve">
          <source>This will essentially do the following:</source>
          <target state="translated">これは基本的に以下のようなことを行います。</target>
        </trans-unit>
        <trans-unit id="9312003f28c3729ef201319a34848ad897938e4a" translate="yes" xml:space="preserve">
          <source>This will install the command &lt;code&gt;ng&lt;/code&gt; into your system, which is the command you use to create new workspaces, new projects, serve your application during development, or produce builds that can be shared or distributed.</source>
          <target state="translated">これにより、コマンド &lt;code&gt;ng&lt;/code&gt; がシステムにインストールされます。これは、新しいワークスペース、新しいプロジェクトの作成、開発中のアプリケーションの提供、または共有または配布できるビルドの作成に使用するコマンドです。</target>
        </trans-unit>
        <trans-unit id="9bb5987cb75dc888fb534638627a4e1a3c031126" translate="yes" xml:space="preserve">
          <source>This will not work in a real app. You're getting away with it now because the service currently returns &lt;em&gt;mock heroes&lt;/em&gt;. But soon the app will fetch heroes from a remote server, which is an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">これは実際のアプリでは機能しません。サービスは現在&lt;em&gt;模擬ヒーローを&lt;/em&gt;返しているので、あなたは今それを手放しています。しかし、すぐにアプリはリモートサーバーからヒーローをフェッチしますが、これは本質的に&lt;em&gt;非同期の&lt;/em&gt;操作です。</target>
        </trans-unit>
        <trans-unit id="c8a4d0a01462100bf09cd9c7a8827ae3dcb63eb8" translate="yes" xml:space="preserve">
          <source>This will produce the files that you need to deploy.</source>
          <target state="translated">これにより、デプロイに必要なファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="9b630be3829ca4b43f0c0f13ae624094630240e5" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;touch&lt;/code&gt; command on the &lt;code&gt;src/main.ts&lt;/code&gt; file.</source>
          <target state="translated">これにより、 &lt;code&gt;src/main.ts&lt;/code&gt; ファイルで &lt;code&gt;touch&lt;/code&gt; コマンドが実行されます。</target>
        </trans-unit>
        <trans-unit id="4fb5514b164bef25ddca759f879da4b392519146" translate="yes" xml:space="preserve">
          <source>This will set the active-link class on the div tag if the url is either '/user/jim' or '/user/bob'.</source>
          <target state="translated">これは、URL が '/user/jim' または '/user/bob' のいずれかである場合に、 div タグにアクティブリンククラスを設定します。</target>
        </trans-unit>
        <trans-unit id="d430f7cac5ea324357497bb1e85a43cc3ac98f1a" translate="yes" xml:space="preserve">
          <source>This won't work if the service is an application-wide singleton. Every component would share the same service instance, and each component would overwrite the tax return that belonged to another hero.</source>
          <target state="translated">サービスがアプリケーション全体のシングルトンである場合、これは動作しません。すべてのコンポーネントは同じサービスインスタンスを共有し、各コンポーネントは別のヒーローに属する申告書を上書きします。</target>
        </trans-unit>
        <trans-unit id="66ee2090966d8e328167f9dd11bd703bc89361b7" translate="yes" xml:space="preserve">
          <source>This worked well, but there's a better way. If you were using a real world API, there might be some delay before the data to display is returned from the server. You don't want to display a blank component while waiting for the data.</source>
          <target state="translated">これでうまくいきましたが、もっといい方法があります。現実世界のAPIを使用していた場合、表示するデータがサーバーから返されるまでに多少の遅延が発生するかもしれません。データを待っている間に空白のコンポーネントを表示するのは避けたいですよね。</target>
        </trans-unit>
        <trans-unit id="61821e653cb092afa1d5fad2bdbb72bc70644e00" translate="yes" xml:space="preserve">
          <source>Those developers may still use HTML5 URLs by taking the following two steps:</source>
          <target state="translated">これらの開発者は、以下の2つのステップを踏むことで、まだHTML5のURLを使用することができます。</target>
        </trans-unit>
        <trans-unit id="3030da2c36d0ffb5bb1a38f3d3ab06bd0ba9aebe" translate="yes" xml:space="preserve">
          <source>Those developers may still use HTML5 URLs by taking two remedial steps:</source>
          <target state="translated">これらの開発者は、2つの救済措置を取ることで、まだHTML5のURLを使用することができます。</target>
        </trans-unit>
        <trans-unit id="a4c3697ed1231b34be5a06d277ed21d7aec6aac6" translate="yes" xml:space="preserve">
          <source>Those three steps look like the following. In the file where you create your directive, export it. The following example, named &lt;code&gt;ItemDirective&lt;/code&gt; is the default directive structure that the CLI generates in its own file, &lt;code&gt;item.directive.ts&lt;/code&gt;:</source>
          <target state="translated">これらの3つのステップは次のようになります。ディレクティブを作成するファイルで、それをエクスポートします。次の例の &lt;code&gt;ItemDirective&lt;/code&gt; という名前は、CLIが独自のファイル &lt;code&gt;item.directive.ts&lt;/code&gt; で生成するデフォルトのディレクティブ構造です。</target>
        </trans-unit>
        <trans-unit id="7282182d46ba8591a3fb80eb88450d7e6e0fb75f" translate="yes" xml:space="preserve">
          <source>Though &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; shouldn't have &lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;side effects&lt;/a&gt;, template statements usually do. The &lt;code&gt;deleteItem()&lt;/code&gt; method does have a side effect: it deletes an item.</source>
          <target state="translated">けれども&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式は&lt;/a&gt;持つべきではない&lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;副作用を&lt;/a&gt;、テンプレート文が通常行います。 &lt;code&gt;deleteItem()&lt;/code&gt; メソッドは、副作用を持っている：それはアイテムを削除します。</target>
        </trans-unit>
        <trans-unit id="8b45283f651e66eedd857eedb3d79dccba5ecff8" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; provides the 🌻 (sunflower), the app renders the 🌺 (red hibiscus) because &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes the current injector to skip itself and look to its parent.</source>
          <target state="translated">しかし &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 🌻（ヒマワリ）を提供するので、アプリは🌺（赤ハイビスカス）をレンダリング &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 現在のインジェクタがその親に自分自身や外観をスキップするようになります。</target>
        </trans-unit>
        <trans-unit id="1075a1e80e7f93a1f8a46fd5766714abf59a2e2d" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; often appear together in apps, you can use them separately. If the nested component is such that it only needs to send data to its parent, you wouldn't need an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, only an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. The reverse is also true in that if the child only needs to receive data from the parent, you'd only need &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">しかし &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 多くの場合、あなたがそれらを個別に使用することができ、アプリの中に一緒に表示されます。ネストされたコンポーネントがその親にのみデータを送信する必要がある場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; は不要で、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; のみが必要です。逆も当てはまります。子が親からデータを受信するだけでよい場合は、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; だけが必要です。</target>
        </trans-unit>
        <trans-unit id="76c63fbb51bf2e00185f379ad812f423247e2cf5" translate="yes" xml:space="preserve">
          <source>Though &lt;em&gt;highlight&lt;/em&gt; would be a more concise selector than &lt;em&gt;appHighlight&lt;/em&gt; and it would work, the best practice is to prefix selector names to ensure they don't conflict with standard HTML attributes. This also reduces the risk of colliding with third-party directive names. The CLI added the &lt;code&gt;app&lt;/code&gt; prefix for you.</source>
          <target state="translated">けれども&lt;em&gt;ハイライトは、&lt;/em&gt;より簡潔セレクタだろう&lt;em&gt;appHighlight&lt;/em&gt;、それが働くだろう、ベスト・プラクティスは、彼らが標準のHTML属性と競合しないことを確認するために、プレフィックスセレクタ名にあります。これにより、サードパーティのディレクティブ名と衝突するリスクも軽減されます。 CLIが &lt;code&gt;app&lt;/code&gt; プレフィックスを追加しました。</target>
        </trans-unit>
        <trans-unit id="e7794513d8ab6b404efc84e17a85b45fb430b7cb" translate="yes" xml:space="preserve">
          <source>Though the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator has an &lt;code&gt;entryComponents&lt;/code&gt; array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">けれども &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータがあり &lt;code&gt;entryComponents&lt;/code&gt; の配列を、ほとんどの時間は、あなたは角がに記載されているコンポーネント追加されるため、明示的に任意のエントリのコンポーネントを設定する必要はありません &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 自動的にエントリコンポーネントへとルート定義のものを。これらの2つのメカニズムはほとんどのエントリコンポーネントを考慮しますが、アプリが偶然にタイプ &lt;code&gt;entryComponents&lt;/code&gt; にコンポーネントをブートストラップまたは動的にロードする場合、entryComponentsに明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c0c89634e88d4f46eb100cf74294ba38817d4923" translate="yes" xml:space="preserve">
          <source>Though the target name is usually the name of a property, there is an automatic attribute-to-property mapping in Angular for several common attributes. These include &lt;code&gt;class&lt;/code&gt;/&lt;code&gt;className&lt;/code&gt;, &lt;code&gt;innerHtml&lt;/code&gt;/&lt;code&gt;innerHTML&lt;/code&gt;, and &lt;code&gt;tabindex&lt;/code&gt;/&lt;code&gt;tabIndex&lt;/code&gt;.</source>
          <target state="translated">ターゲット名は通常、プロパティの名前ですが、Angularには、いくつかの一般的な属性の属性からプロパティへの自動マッピングがあります。これらには、 &lt;code&gt;class&lt;/code&gt; / &lt;code&gt;className&lt;/code&gt; 、 &lt;code&gt;innerHtml&lt;/code&gt; / &lt;code&gt;innerHTML&lt;/code&gt; 、 &lt;code&gt;tabindex&lt;/code&gt; / &lt;code&gt;tabIndex&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="6bdc5ca158e9ca814a1efdfbdd56e2547c9decdf" translate="yes" xml:space="preserve">
          <source>Though you can limit access to a service by providing it in a lazy loaded module or providing it in a component, providing services in a component can lead to multiple instances of those services. Thus, the lazy loading is preferable.</source>
          <target state="translated">サービスを遅延ロードされたモジュールで提供したり、コンポーネントで提供したりすることで、サービスへのアクセスを制限することができますが、コンポーネントでサービスを提供すると、サービスのインスタンスが複数になってしまう可能性があります。そのため、レイジーロードが望ましいです。</target>
        </trans-unit>
        <trans-unit id="90e178c89e79710297fa1f0d8ae614004845fcca" translate="yes" xml:space="preserve">
          <source>Though you can provide services by lazy loading modules, not all services can be lazy loaded. For instance, some modules only work in the root module, such as the Router. The Router works with the global location object in the browser.</source>
          <target state="translated">モジュールを遅延ロードすることでサービスを提供できますが、すべてのサービスを遅延ロードできるわけではありません。例えば、Router のようにルートモジュールでしか動作しないモジュールもあります。ルータはブラウザのグローバルロケーションオブジェクトで動作します。</target>
        </trans-unit>
        <trans-unit id="4ac43ae059a7abe0952abd693cdca4e55b219478" translate="yes" xml:space="preserve">
          <source>Though you can type the URL into the address bar, a navigation UI is easier for the user and more common. Replace the default placeholder markup in &lt;code&gt;app.component.html&lt;/code&gt; with a custom nav so you can easily navigate to your modules in the browser:</source>
          <target state="translated">アドレスバーにURLを入力することもできますが、ユーザーにとってナビゲーションUIの方が簡単で一般的です。ブラウザーでモジュールに簡単に移動できるように、 &lt;code&gt;app.component.html&lt;/code&gt; のデフォルトのプレースホルダーマークアップをカスタムナビゲーションに置き換えます。</target>
        </trans-unit>
        <trans-unit id="528e1795eb218a5f3792808cc39b7bcce25ad8db" translate="yes" xml:space="preserve">
          <source>Though you could technically set the &lt;code&gt;[attr.disabled]&lt;/code&gt; attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is &lt;code&gt;null&lt;/code&gt; or not. Consider the following:</source>
          <target state="translated">&lt;code&gt;[attr.disabled]&lt;/code&gt; 属性バインディングを技術的に設定することもできますが、値が異なるのは、プロパティバインディングがブール値に必要であり、対応する属性バインディングが値が &lt;code&gt;null&lt;/code&gt; かどうかに依存しているためです。以下を検討してください。</target>
        </trans-unit>
        <trans-unit id="ab6a81da6264ab1813a6ae0bf0a2c52eb58c33e9" translate="yes" xml:space="preserve">
          <source>Though you could technically set the &lt;code&gt;[attr.disabled]&lt;/code&gt; attribute binding, the values are different in that the property binding requires to be a boolean value, while its corresponding attribute binding relies on whether the value is &lt;code&gt;null&lt;/code&gt; or not. Consider the following:</source>
          <target state="translated">&lt;code&gt;[attr.disabled]&lt;/code&gt; 属性バインディングを技術的に設定することもできますが、プロパティバインディングはブール値である必要があり、対応する属性バインディングは値が &lt;code&gt;null&lt;/code&gt; かどうかに依存するという点で、値は異なります。次のことを考慮してください。</target>
        </trans-unit>
        <trans-unit id="171a82320fbdf7d2e2689bc12c98963504c6696d" translate="yes" xml:space="preserve">
          <source>Three instances of &lt;code&gt;HeroBioComponent&lt;/code&gt; can't share the same instance of &lt;code&gt;HeroCacheService&lt;/code&gt;, as they'd be competing with each other to determine which hero to cache.</source>
          <target state="translated">3つのインスタンス &lt;code&gt;HeroBioComponent&lt;/code&gt; はの同じインスタンスを共有することはできません &lt;code&gt;HeroCacheService&lt;/code&gt; を、彼らはキャッシュにどのヒーローを決定するために互いに競合するだろうとして、。</target>
        </trans-unit>
        <trans-unit id="e85a3cc08728cca8939b51f9d98196530fcc997a" translate="yes" xml:space="preserve">
          <source>Three of the common, built-in structural directives&amp;mdash;&lt;a href=&quot;built-in-directives#ngIf&quot;&gt;NgIf&lt;/a&gt;, &lt;a href=&quot;built-in-directives#ngFor&quot;&gt;NgFor&lt;/a&gt;, and &lt;a href=&quot;built-in-directives#ngSwitch&quot;&gt;NgSwitch...&lt;/a&gt;&amp;mdash;are described in the &lt;a href=&quot;built-in-directives&quot;&gt;Built-in directives&lt;/a&gt; guide and seen in samples throughout the Angular documentation. Here's an example of them in a template:</source>
          <target state="translated">一般的な組み込み構造ディレクティブの3つ（&lt;a href=&quot;built-in-directives#ngIf&quot;&gt;NgIf&lt;/a&gt;、&lt;a href=&quot;built-in-directives#ngFor&quot;&gt;NgFor&lt;/a&gt;、および&lt;a href=&quot;built-in-directives#ngSwitch&quot;&gt;NgSwitch ...）&lt;/a&gt;は、&lt;a href=&quot;built-in-directives&quot;&gt;組み込みディレクティブ&lt;/a&gt;ガイドで説明されており、Angularドキュメント全体のサンプルに記載されています。テンプレート内のそれらの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="5d80c7ef855b73b71c4ca5c1c8a2d8119c7fa21b" translate="yes" xml:space="preserve">
          <source>Three of the common, built-in structural directives&amp;mdash;&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;, &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;, and &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch...&lt;/a&gt;&amp;mdash;are described in the &lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;Template Syntax&lt;/em&gt;&lt;/a&gt; guide and seen in samples throughout the Angular documentation. Here's an example of them in a template:</source>
          <target state="translated">一般的な組み込み構造ディレクティブの3つである&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;、&lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;、および&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch ...&lt;/a&gt;は、&lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;テンプレート構文&lt;/em&gt;&lt;/a&gt;ガイドで説明されており、Angularドキュメント全体のサンプルに表示されています。テンプレートでの例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8703c0daee7a3560153b94bc34a950b511daab36" translate="yes" xml:space="preserve">
          <source>Three points of special interest:</source>
          <target state="translated">こだわりの3つのポイント</target>
        </trans-unit>
        <trans-unit id="6b164df9c4f94a91727830fddbf131671bff71ec" translate="yes" xml:space="preserve">
          <source>Three providers tell the JIT compiler how to translate the template texts for a particular language while compiling the app:</source>
          <target state="translated">3つのプロバイダは、アプリをコンパイルする際に、特定の言語のテンプレートテキストをどのように翻訳するかをJITコンパイラに指示します。</target>
        </trans-unit>
        <trans-unit id="ed12cc77bbd83748afc157b996ead876c3c5517c" translate="yes" xml:space="preserve">
          <source>Through the &lt;code&gt;valueChanges&lt;/code&gt; observable where you can listen for changes in the form's value in the template using &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; or in the component class using the &lt;code&gt;subscribe()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;valueChanges&lt;/code&gt; 使用して、テンプレート内のフォームの値の変化を聞くことができ、観察 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; を使用して、またはコンポーネントクラスの &lt;code&gt;subscribe()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="5a4cab0ebea476f32aa1e1c5fba91f40707b2ad6" translate="yes" xml:space="preserve">
          <source>Throughout this guide, you'll see a directive spelled in both &lt;em&gt;UpperCamelCase&lt;/em&gt; and &lt;em&gt;lowerCamelCase&lt;/em&gt;. Already you've seen &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. There's a reason. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; refers to the directive &lt;em&gt;class&lt;/em&gt;; &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; refers to the directive's &lt;em&gt;attribute name&lt;/em&gt;.</source>
          <target state="translated">このガイド全体を通して、&lt;em&gt;UpperCamelCase&lt;/em&gt;と&lt;em&gt;lowerCamelCaseの&lt;/em&gt;両方にスペルの&lt;em&gt;付い&lt;/em&gt;たディレクティブが表示されます。すでに &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を見てきました。理由があります。 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; はディレクティブ&lt;em&gt;クラスを&lt;/em&gt;参照します。 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; は、ディレクティブの&lt;em&gt;属性名を参照し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f9f4b0f30b3f06e61b21febef173645d29891305" translate="yes" xml:space="preserve">
          <source>Throws</source>
          <target state="translated">Throws</target>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="f7ea2d8763887c41cd7da975aaf8c487045171ac" translate="yes" xml:space="preserve">
          <source>Time passes and application logic triggers lazy loading of an NgModule. Angular must add the lazy-loaded module's providers to an injector somewhere. It can't add them to the app root injector because that injector is closed to new providers. So Angular creates a new child injector for the lazy-loaded module context.</source>
          <target state="translated">時間が経つとアプリケーションロジックがNgModuleの遅延ロードをトリガーします。Angularは遅延ロードされたモジュールのプロバイダをどこかのインジェクタに追加しなければなりません。アプリのルートインジェクターには新しいプロバイダを追加することができません。そのため、Angularは遅延ロードされたモジュールのコンテキスト用に新しい子インジェクターを作成します。</target>
        </trans-unit>
        <trans-unit id="8f86764c71eb5f28fd785ba95ea223af744160bb" translate="yes" xml:space="preserve">
          <source>Timezone of the formatted text will be the local system timezone of the end-user's machine.</source>
          <target state="translated">フォーマットされたテキストのタイムゾーンは、エンドユーザーのマシンのローカルシステムのタイムゾーンになります。</target>
        </trans-unit>
        <trans-unit id="098024dc5537ca3623978ac7c0a6140ce39062b8" translate="yes" xml:space="preserve">
          <source>Timing</source>
          <target state="translated">Timing</target>
        </trans-unit>
        <trans-unit id="ff73d9b2c838aef0837103246944b6eeaac4e811" translate="yes" xml:space="preserve">
          <source>Tip: In the &lt;a href=&quot;api&quot;&gt;API reference section&lt;/a&gt; of this doc site, deprecated APIs are indicated by &lt;del&gt;strikethrough.&lt;/del&gt; You can filter the API list by &lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status: deprecated&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">ヒント：このドキュメントサイトの&lt;a href=&quot;api&quot;&gt;APIリファレンスセクション&lt;/a&gt;では、廃止されたAPIは&lt;del&gt;取り消し線。&lt;/del&gt;&lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status：deprecatedで&lt;/strong&gt;&lt;/a&gt; APIリストをフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="cd78803504972c001f389f4b2e207d6fc9adc057" translate="yes" xml:space="preserve">
          <source>Title text should be in &quot;Sentence case&quot;, which means the first word is capitalized and all other words are lower case (unless they are technical terms that are always capitalized, like &quot;Angular&quot;).</source>
          <target state="translated">タイトルテキストは &quot;Sentence case &quot;でなければなりません。つまり、最初の単語は大文字で、それ以外の単語はすべて小文字になります(&quot;Angular &quot;のように常に大文字で書かれている専門用語でない限り)。</target>
        </trans-unit>
        <trans-unit id="1ef4826ff87f22d637cb47eb360c1525fcf04ada" translate="yes" xml:space="preserve">
          <source>Title text should be in &quot;Title Case&quot;, which means that you use capital letters to start the first words and all &lt;em&gt;principal&lt;/em&gt; words. Use lower case letters for &lt;em&gt;secondary&lt;/em&gt; words such as &quot;in&quot;, &quot;of&quot;, and &quot;the&quot;.</source>
          <target state="translated">タイトルテキストは「タイトルケース」にする必要があります。つまり、大文字を使用して最初の単語とすべての&lt;em&gt;主要な&lt;/em&gt;単語を開始します。「in」、「of」、「the」などの&lt;em&gt;2番目の&lt;/em&gt;単語には小文字を使用します。</target>
        </trans-unit>
        <trans-unit id="0443511f0f0d69e0669b6cc477969ba0177c046d" translate="yes" xml:space="preserve">
          <source>TitleCasePipe</source>
          <target state="translated">TitleCasePipe</target>
        </trans-unit>
        <trans-unit id="1edfc91ff1a795fb8fae2c2845186edc649e929e" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;http&quot;&gt;communicate with backend services using HTTP&lt;/a&gt;, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service uses observables and offers the &lt;code&gt;HTTPClient.get()&lt;/code&gt; method to fetch data from a server. The asynchronous method sends an HTTP request, and returns an observable that emits the requested data for the response.</source>
          <target state="translated">&lt;a href=&quot;http&quot;&gt;HTTPを使用してバックエンドサービスと通信する&lt;/a&gt;ために、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスはオブザーバブルを使用し、サーバーからデータをフェッチするための &lt;code&gt;HTTPClient.get()&lt;/code&gt; メソッドを提供します。非同期メソッドはHTTP要求を送信し、応答のために要求されたデータを発行するオブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="ed1a0b0c87e134832acc7d87c80e1e27c802b764" translate="yes" xml:space="preserve">
          <source>To access properties that are defined in an interface, you must explicitly convert the Object you get from the JSON to the required response type. For example, the following &lt;code&gt;subscribe&lt;/code&gt; callback receives &lt;code&gt;data&lt;/code&gt; as an Object, and then type-casts it in order to access the properties.</source>
          <target state="translated">インターフェイスで定義されているプロパティにアクセスするには、JSONから取得したオブジェクトを必要な応答タイプに明示的に変換する必要があります。たとえば、次の &lt;code&gt;subscribe&lt;/code&gt; コールバックは &lt;code&gt;data&lt;/code&gt; をオブジェクトとして受け取り、プロパティにアクセスするためにそれを型キャストします。</target>
        </trans-unit>
        <trans-unit id="090bde2470cfa5d91164f0dd5ac0b680c316fd8a" translate="yes" xml:space="preserve">
          <source>To access properties that are defined in an interface, you must explicitly convert the plain object you get from the JSON to the required response type. For example, the following &lt;code&gt;subscribe&lt;/code&gt; callback receives &lt;code&gt;data&lt;/code&gt; as an Object, and then type-casts it in order to access the properties.</source>
          <target state="translated">インターフェイスで定義されているプロパティにアクセスするには、JSONから取得したプレーンオブジェクトを必要な応答タイプに明示的に変換する必要があります。たとえば、次の &lt;code&gt;subscribe&lt;/code&gt; コールバックは、 &lt;code&gt;data&lt;/code&gt; をオブジェクトとして受け取り、プロパティにアクセスするためにデータを型キャストします。</target>
        </trans-unit>
        <trans-unit id="612822e1f2a2307aaa6e2b3ed143cfc5b79f8e35" translate="yes" xml:space="preserve">
          <source>To achieve this effect, extend the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag with the following:</source>
          <target state="translated">この効果を実現するには、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグを次のように拡張します。</target>
        </trans-unit>
        <trans-unit id="bfbef04c66fa9ac05c09e94801b6ea0bdf69d6fb" translate="yes" xml:space="preserve">
          <source>To add a form group to this component, take the following steps.</source>
          <target state="translated">このコンポーネントにフォームグループを追加するには、次の手順を実行します。</target>
        </trans-unit>
        <trans-unit id="4de9b850b6bc48b2b817512c2db67f3f4f4de00a" translate="yes" xml:space="preserve">
          <source>To add a hero, this app only needs the hero's name. You can use an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element paired with an add button.</source>
          <target state="translated">ヒーローを追加するには、このアプリはヒーローの名前のみを必要とします。追加ボタンと組み合わせた &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素を使用できます。</target>
        </trans-unit>
        <trans-unit id="da8e56238639cdc891b1d4ed923efdcffe46b6f3" translate="yes" xml:space="preserve">
          <source>To add a new &lt;code&gt;devDependency&lt;/code&gt;, use either one of the following commands:</source>
          <target state="translated">新しい &lt;code&gt;devDependency&lt;/code&gt; を追加するには、次のいずれかのコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="27d7686824adeea94d6f50645d6b9afbe94609dd" translate="yes" xml:space="preserve">
          <source>To add a new dependency, use the &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">新しい依存関係を追加するには、&lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f457092233f40d2f34e89cbae624605c9b59951d" translate="yes" xml:space="preserve">
          <source>To add a schematic to an existing collection, use the same command you use to start a new schematics project, but run the command inside the project folder.</source>
          <target state="translated">既存のコレクションに回路図を追加するには、新しい回路図プロジェクトを開始する際と同じコマンドを使用しますが、プロジェクトフォルダ内でコマンドを実行してください。</target>
        </trans-unit>
        <trans-unit id="e0dff7476603a4365ce04e28daa6e5ae648874f0" translate="yes" xml:space="preserve">
          <source>To add a validator to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, pass the new validator in as the second argument on creation.</source>
          <target state="translated">バリデーターを &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; に追加するには、作成時に2番目の引数として新しいバリデーターを渡します。</target>
        </trans-unit>
        <trans-unit id="6e5aa5b2615deae73ee3a7a681ef04a97504d33d" translate="yes" xml:space="preserve">
          <source>To add a web worker to an existing project, use the Angular CLI &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">Webワーカーを既存のプロジェクトに追加するには、Angular CLI &lt;code&gt;ng generate&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="5af208734231896485781dd45087dcf140d59c94" translate="yes" xml:space="preserve">
          <source>To add another product, click &quot;My Store&quot; to return to the product list.</source>
          <target state="translated">別の商品を追加するには、「マイストア」をクリックして商品リストに戻ります。</target>
        </trans-unit>
        <trans-unit id="b7c21a740943c10dfa15804fca8321cd2e41101e" translate="yes" xml:space="preserve">
          <source>To add another product, click &quot;My Store&quot; to return to the product list. Repeat the steps above.</source>
          <target state="translated">別の商品を追加するには、「マイストア」をクリックして商品リストに戻ります。上記の手順を繰り返してください。</target>
        </trans-unit>
        <trans-unit id="af30217cecee494619d1758d399f71f84dae729e" translate="yes" xml:space="preserve">
          <source>To add artifacts to a project, your schematic needs its own template files. Schematic templates support special syntax to execute code and variable substitution.</source>
          <target state="translated">プロジェクトにアーティファクトを追加するには、回路図独自のテンプレートファイルが必要です。回路図テンプレートは、コードを実行したり変数を置換したりするための特別な構文をサポートしています。</target>
        </trans-unit>
        <trans-unit id="5c8962d1b60c02af2c0fa75a87fff3fbce78ea63" translate="yes" xml:space="preserve">
          <source>To add more features to the app's current crisis center, take similar steps as for the heroes feature:</source>
          <target state="translated">アプリの現在の危機管理センターに機能を追加するには、ヒーロー機能と同様の手順を踏む必要があります。</target>
        </trans-unit>
        <trans-unit id="b6b988734470ea226b7bc93e7814ababa57cf8ea" translate="yes" xml:space="preserve">
          <source>To add or remove a &lt;em&gt;single&lt;/em&gt; class, use &lt;a href=&quot;attribute-binding#class-binding&quot;&gt;class binding&lt;/a&gt; rather than &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;単一の&lt;/em&gt;クラスを追加または削除するには、 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt; ではなく&lt;a href=&quot;attribute-binding#class-binding&quot;&gt;クラスバインディングを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="c3d2051452de0323eb6efd5aedc607498069cdae" translate="yes" xml:space="preserve">
          <source>To add or remove a &lt;em&gt;single&lt;/em&gt; class, use &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt; rather than &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;単一の&lt;/em&gt;クラスを追加または削除するには、 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt; ではなく&lt;a href=&quot;template-syntax#class-binding&quot;&gt;クラスバインディングを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e9da25919d51d1a85e0005bea2eb758313daa6fe" translate="yes" xml:space="preserve">
          <source>To add paths, use the &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; option:</source>
          <target state="translated">パスを追加するには、 &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="43fd32e81bc1770347d28bdfa0c8f42aa2ce4a7b" translate="yes" xml:space="preserve">
          <source>To add the classes only when the URL matches the link exactly, add the option &lt;code&gt;exact: true&lt;/code&gt;:</source>
          <target state="translated">URLがリンクと &lt;code&gt;exact: true&lt;/code&gt; 一致する場合にのみクラスを追加するには、オプションexact：true：を追加します。</target>
        </trans-unit>
        <trans-unit id="496b7ad1d0a0eed5827dc1a97fd622e7f8d94e93" translate="yes" xml:space="preserve">
          <source>To add the component to the template, you call &lt;code&gt;createComponent()&lt;/code&gt; on &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートにコンポーネントを追加するには、 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;createComponent()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="987b409e8bf18353ecffd982c4a6027176175f26" translate="yes" xml:space="preserve">
          <source>To add the schematics to the library bundle, add scripts to the library's &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="translated">回路図をライブラリバンドルに追加するには、ライブラリの &lt;code&gt;package.json&lt;/code&gt; ファイルにスクリプトを追加します。</target>
        </trans-unit>
        <trans-unit id="1a7a24ab6c517387fe4fb759c2cbbe67fd7e654f" translate="yes" xml:space="preserve">
          <source>To add the stylesheet, open &lt;code&gt;styles.css&lt;/code&gt; and add the following import line at the top:</source>
          <target state="translated">スタイルシートを追加するには、 &lt;code&gt;styles.css&lt;/code&gt; を開き、上部に次のインポート行を追加します。</target>
        </trans-unit>
        <trans-unit id="d7a97119528a1219e01d41b64f89cfc156ab2111" translate="yes" xml:space="preserve">
          <source>To add validation to a template-driven form, you add the same validation attributes as you would with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;native HTML form validation&lt;/a&gt;. Angular uses directives to match these attributes with validator functions in the framework.</source>
          <target state="translated">テンプレート駆動型フォームに検証を追加するには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;ネイティブHTMLフォーム検証の&lt;/a&gt;場合と同じ検証属性を追加します。Angularはディレクティブを使用してこれらの属性をフレームワークのバリデーター関数と照合します。</target>
        </trans-unit>
        <trans-unit id="ce70784e6a2d0e1e0652eb7bae45da63bd42c69d" translate="yes" xml:space="preserve">
          <source>To alter the request, clone it first and modify the clone before passing it to &lt;code&gt;next.handle()&lt;/code&gt;. You can clone and modify the request in a single step as in this example.</source>
          <target state="translated">リクエストを変更するには、まずクローンを作成し、クローンを変更してから &lt;code&gt;next.handle()&lt;/code&gt; に渡します。この例のように、1つの手順でリクエストを複製して変更できます。</target>
        </trans-unit>
        <trans-unit id="be9073f11e0afa56717eb05e0a7001960b7a1b99" translate="yes" xml:space="preserve">
          <source>To alter where the injector starts looking for &lt;code&gt;FlowerService&lt;/code&gt;, add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; to the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; declaration for the &lt;code&gt;FlowerService&lt;/code&gt;. This declaration is in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; constructor as shown in &lt;code&gt;child.component.ts&lt;/code&gt;:</source>
          <target state="translated">インジェクタが探して始まる変更するには &lt;code&gt;FlowerService&lt;/code&gt; 、追加 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; に &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; の宣言 &lt;code&gt;FlowerService&lt;/code&gt; 。この宣言は、 &lt;code&gt;child.component.ts&lt;/code&gt; に示されている &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; コンストラクターにあります。</target>
        </trans-unit>
        <trans-unit id="22c3b2cba8f53e2ffe5dab01bc5b91f88e756346" translate="yes" xml:space="preserve">
          <source>To answer these kinds of questions, you have to create the DOM elements associated with the components, you must examine the DOM to confirm that component state displays properly at the appropriate times, and you must simulate user interaction with the screen to determine whether those interactions cause the component to behave as expected.</source>
          <target state="translated">このような質問に答えるためには、コンポーネントに関連付けられた DOM 要素を作成し、適切なタイミングでコンポーネントの状態が適切に表示されているかどうかを確認するために DOM を検査し、ユーザーと画面の相互作用をシミュレーションして、その相互作用によってコンポーネントが期待通りの動作をするかどうかを判断する必要があります。</target>
        </trans-unit>
        <trans-unit id="b914cc85efa6a3ee58a159fd0169f8e78be87368" translate="yes" xml:space="preserve">
          <source>To apply a pipe, use the pipe operator (&lt;code&gt;|&lt;/code&gt;) within a template expression as shown in the following code example, along with the &lt;em&gt;name&lt;/em&gt; of the pipe, which is &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; for the built-in &lt;a href=&quot;../api/common/datepipe&quot;&gt;&lt;code&gt;DatePipe&lt;/code&gt;&lt;/a&gt;. The tabs in the example show the following:</source>
          <target state="translated">パイプを適用するには、次のコード例に示すように、テンプレート式内でパイプ演算子（ &lt;code&gt;|&lt;/code&gt; ）を、組み込みの&lt;a href=&quot;../api/common/datepipe&quot;&gt; &lt;code&gt;DatePipe&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; であるパイプの&lt;em&gt;名前&lt;/em&gt;とともに使用します。例のタブは次のことを示しています。</target>
        </trans-unit>
        <trans-unit id="dcf8f543ff93bfc9b163241813212b02a20d1ea1" translate="yes" xml:space="preserve">
          <source>To apply specific build options to only one locale, you can create a custom locale-specific configuration by specifying a single locale as shown in the following example:</source>
          <target state="translated">特定のビルドオプションを 1 つのロケールだけに適用するには、以下の例のように 1 つのロケールを指定してロケール固有のカスタム設定を作成することができます。</target>
        </trans-unit>
        <trans-unit id="36d091e0c047395da2a56a9e24df2133c4a12994" translate="yes" xml:space="preserve">
          <source>To attach the aliases from your form model, you must add it to the template. Similar to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; input provided by &lt;code&gt;FormGroupNameDirective&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; binds communication from the form array instance to the template with &lt;code&gt;FormArrayNameDirective&lt;/code&gt;.</source>
          <target state="translated">フォームモデルからエイリアスを添付するには、それをテンプレートに追加する必要があります。同様 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; のによって提供される入力 &lt;code&gt;FormGroupNameDirective&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; とテンプレートにフォームの配列インスタンスからバインド通信 &lt;code&gt;FormArrayNameDirective&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b439955a79dbd833d42d99f6fa91279d6ef67f27" translate="yes" xml:space="preserve">
          <source>To automate that data flow, setup a two-way data binding between the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; form element and the &lt;code&gt;hero.name&lt;/code&gt; property.</source>
          <target state="translated">そのデータフローを自動化するには、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; フォーム要素と &lt;code&gt;hero.name&lt;/code&gt; プロパティの間に双方向のデータバインディングを設定します。</target>
        </trans-unit>
        <trans-unit id="c97596f545bc3c4cf4d6e36b38363f8b20cb690b" translate="yes" xml:space="preserve">
          <source>To avoid relying solely on visual cues, you need to make sure your routing code updates focus after page navigation. Use the &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; event from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to know when to update focus.</source>
          <target state="translated">視覚的な手掛かりのみに依存しないようにするには、ページのナビゲーション後にルーティングコードの更新に焦点を当てることを確認する必要があります。フォーカスを更新するタイミングを知るには、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスの &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; イベントを使用します。</target>
        </trans-unit>
        <trans-unit id="b14c5694baf8932f7e55e412b232c287b7bc7e46" translate="yes" xml:space="preserve">
          <source>To avoid this error, a &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hook&lt;/a&gt; method that seeks to make such a change should trigger a new change detection run. The new run follows the same direction as before, but succeeds in picking up the new value.</source>
          <target state="translated">このエラーを回避するには、そのような変更を行おうとする&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;メソッドが新しい変更検出の実行をトリガーする必要があります。新しい実行は以前と同じ方向に従いますが、新しい値を取得することに成功します。</target>
        </trans-unit>
        <trans-unit id="441327a3b62f31f08d7ebf067ab65b6221abce4c" translate="yes" xml:space="preserve">
          <source>To avoid this expensive operation, you can customize the default tracking algorithm. by supplying the &lt;code&gt;trackBy&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;trackBy&lt;/code&gt; takes a function that has two arguments: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;trackBy&lt;/code&gt; is given, Angular tracks changes by the return value of the function.</source>
          <target state="translated">この高価な操作を回避するために、デフォルトの追跡アルゴリズムをカスタマイズできます。供給することにより &lt;code&gt;trackBy&lt;/code&gt; のにオプション &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; を。 &lt;code&gt;trackBy&lt;/code&gt; は、 &lt;code&gt;index&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; の 2つの引数を持つ関数を取ります。 &lt;code&gt;trackBy&lt;/code&gt; が指定されている場合、Angularは関数の戻り値によって変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="4e45c920ee8a5bfaeada08016996d3dc7a94099f" translate="yes" xml:space="preserve">
          <source>To avoid this expensive operation, you can customize the default tracking algorithm. by supplying the &lt;code&gt;trackBy&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;trackBy&lt;/code&gt; takes a function that has two arguments: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;item&lt;/code&gt;. If &lt;code&gt;trackBy&lt;/code&gt; is given, Angular tracks changes by the return value of the function.</source>
          <target state="translated">このコストのかかる操作を回避するために、デフォルトの追跡アルゴリズムをカスタマイズできます。供給することにより &lt;code&gt;trackBy&lt;/code&gt; のにオプション &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; を。 &lt;code&gt;trackBy&lt;/code&gt; は、 &lt;code&gt;index&lt;/code&gt; と &lt;code&gt;item&lt;/code&gt; の2つの引数を持つ関数を取ります。 &lt;code&gt;trackBy&lt;/code&gt; が指定されている場合、Angularは関数の戻り値によって変化します。</target>
        </trans-unit>
        <trans-unit id="e8cfc2c0e9fadb81aa5e73b8bb58085461fa57a5" translate="yes" xml:space="preserve">
          <source>To avoid this problem, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in the &lt;code&gt;AppModule&lt;/code&gt;, the application &lt;em&gt;root module&lt;/em&gt;.</source>
          <target state="translated">この問題を回避するには、アプリケーション&lt;em&gt;ルートモジュール&lt;/em&gt;である &lt;code&gt;AppModule&lt;/code&gt; にのみ &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートし&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="598b94eaf0a9207b1b2f7e14b6bb329e39eadeca" translate="yes" xml:space="preserve">
          <source>To be Angular compatible, an AngularJS component directive should configure these attributes:</source>
          <target state="translated">Angularと互換性を持たせるために、AngularJSのコンポーネントディレクティブはこれらの属性を設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="123c3019791e3c52ebbcbe83a892f8e6e401c499" translate="yes" xml:space="preserve">
          <source>To be notified when new releases are available, follow &lt;a href=&quot;https://twitter.com/angular&quot;&gt;@angular&lt;/a&gt; on Twitter or subscribe to the &lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular blog&lt;/a&gt;.</source>
          <target state="translated">新しいリリースが利用可能になったときに通知を受けるには、Twitterで&lt;a href=&quot;https://twitter.com/angular&quot;&gt;@angular&lt;/a&gt;をフォローするか、&lt;a href=&quot;https://blog.angular.io&quot;&gt;Angularブログを&lt;/a&gt;購読してください。</target>
        </trans-unit>
        <trans-unit id="dd4700612dcf5dc9d98d073d3fec1a9bda0633ef" translate="yes" xml:space="preserve">
          <source>To be used with watch mode, a builder handler function should return an Observable. Architect subscribes to the Observable until it completes and might reuse it if the builder is scheduled again with the same arguments.</source>
          <target state="translated">ウォッチモードで使用するためには、ビルダーハンドラ関数は Observable を返さなければなりません。アーキテクトは、それが完了するまでObservableをサブスクライブし、同じ引数でビルダーが再度スケジュールされた場合に再利用するかもしれません。</target>
        </trans-unit>
        <trans-unit id="c6264ce2f8d176973d84cc88a177c1b8d2ae8301" translate="yes" xml:space="preserve">
          <source>To begin converting your AngularJS application to a hybrid, you need to load the Angular framework. You can see how this can be done with SystemJS by following the instructions in &lt;a href=&quot;upgrade-setup&quot;&gt;Setup for Upgrading to AngularJS&lt;/a&gt; for selectively copying code from the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github repository&lt;/a&gt;.</source>
          <target state="translated">AngularJSアプリケーションをハイブリッドに変換するには、Angularフレームワークをロードする必要があります。&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart githubリポジトリ&lt;/a&gt;からコードを選択的にコピーするために&lt;a href=&quot;upgrade-setup&quot;&gt;、AngularJS&lt;/a&gt;にアップグレードするためのセットアップの手順に従って、SystemJSでこれを行う方法を確認できます。</target>
        </trans-unit>
        <trans-unit id="ff25a3d91e518e6022fbcb82db9614eb3a86d036" translate="yes" xml:space="preserve">
          <source>To begin testing calls to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; and the mocking controller, &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt;, along with the other symbols your tests require.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; の呼び出しのテストを開始するには、 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; とモッキングコントローラー &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; を、テストに必要な他のシンボルとともにインポートします。</target>
        </trans-unit>
        <trans-unit id="970d997b1f905a43219b5008925290bb634cfd6b" translate="yes" xml:space="preserve">
          <source>To begin using Angular service workers, see &lt;a href=&quot;service-worker-getting-started&quot;&gt;Getting Started with service workers&lt;/a&gt;.</source>
          <target state="translated">角度サービス労働者の使用を開始するには、参照&lt;a href=&quot;service-worker-getting-started&quot;&gt;サービス労働者入門&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de460edf05dca2d464a1be91407ed6ffea7d7a8e" translate="yes" xml:space="preserve">
          <source>To begin using the CLI for a new project, see &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">新しいプロジェクトでCLIの使用を開始するには、&lt;a href=&quot;setup-local&quot;&gt;ローカル環境のセットアップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6b18b6e1679f6b673ab980d8c28e59713ff54dfa" translate="yes" xml:space="preserve">
          <source>To begin, configure a set of routes using methods available in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; class. This route configuration tells the router how to navigate.</source>
          <target state="translated">まず、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; クラスで使用可能なメソッドを使用して、ルートのセットを構成します。このルート構成は、ルーターにナビゲートする方法を指示します。</target>
        </trans-unit>
        <trans-unit id="008987cccbf2a31fda96aa5a830cd40924b91032" translate="yes" xml:space="preserve">
          <source>To begin, create a new subfolder, &lt;code&gt;my-service&lt;/code&gt;, in the &lt;code&gt;schematics&lt;/code&gt; folder.</source>
          <target state="translated">開始するには、新しいサブフォルダの作成、 &lt;code&gt;my-service&lt;/code&gt; では、 &lt;code&gt;schematics&lt;/code&gt; フォルダを。</target>
        </trans-unit>
        <trans-unit id="6dd9e1c57cc321e0fe725c8e45cb7fc4f6d13c75" translate="yes" xml:space="preserve">
          <source>To benefit from the Angular service worker, your app must run in a web browser that supports service workers in general. Currently, service workers are supported in the latest versions of Chrome, Firefox, Edge, Safari, Opera, UC Browser (Android version) and Samsung Internet. Browsers like IE and Opera Mini do not support service workers.</source>
          <target state="translated">Angularのサービスワーカーの恩恵を受けるには、アプリを一般的にサービスワーカーをサポートしているWebブラウザで実行する必要があります。現在、サービスワーカーはChrome、Firefox、Edge、Safari、Opera、UC Browser(Android版)、Samsung Internetの最新バージョンでサポートされています。IEやOpera Miniのようなブラウザはサービスワーカーをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="823f8f6067a0bd01cd8d63ba6022a1d82417c4ca" translate="yes" xml:space="preserve">
          <source>To better explain the condition under which token retention occurs, consider a library that provides a library-card component, which contains a body and can contain an optional header.</source>
          <target state="translated">トークン保持が発生する条件をよりよく説明するために、ボディを含み、オプションのヘッダを含むことができるライブラリカードコンポーネントを提供するライブラリを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="a4b9a0b3c93987f15167a935557553029127ee66" translate="yes" xml:space="preserve">
          <source>To bind the &lt;code&gt;src&lt;/code&gt; property of an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element to a component's property, place the target, &lt;code&gt;src&lt;/code&gt;, in square brackets followed by an equal sign and then the property. The property here is &lt;code&gt;itemImageUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;src&lt;/code&gt; プロパティをコンポーネントのプロパティにバインドするには、ターゲット &lt;code&gt;src&lt;/code&gt; を角かっこで囲み、等号、プロパティの順に配置します。ここでのプロパティは &lt;code&gt;itemImageUrl&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="aceceb9344b852a619d58c97b4a87fbc9c2dc9ab" translate="yes" xml:space="preserve">
          <source>To bind to a DOM event, surround the DOM event name in parentheses and assign a quoted &lt;a href=&quot;template-syntax#template-statements&quot;&gt;template statement&lt;/a&gt; to it.</source>
          <target state="translated">DOMイベントにバインドするには、DOMイベント名を括弧で囲み、引用された&lt;a href=&quot;template-syntax#template-statements&quot;&gt;テンプレートステートメント&lt;/a&gt;をそれに割り当てます。</target>
        </trans-unit>
        <trans-unit id="8805e78091225819c8ec4f163b041709b022dc53" translate="yes" xml:space="preserve">
          <source>To bind to an element's property, enclose it in square brackets, &lt;code&gt;[]&lt;/code&gt;, which identifies the property as a target property. A target property is the DOM property to which you want to assign a value. For example, the target property in the following code is the image element's &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="translated">要素のプロパティにバインドするには、要素を角かっこ &lt;code&gt;[]&lt;/code&gt; で囲みます。これにより、プロパティがターゲットプロパティとして識別されます。ターゲットプロパティは、値を割り当てるDOMプロパティです。たとえば、次のコードのターゲットプロパティは、image要素の &lt;code&gt;src&lt;/code&gt; プロパティです。</target>
        </trans-unit>
        <trans-unit id="b6c9d270dcb9439d7a8e35a87d442f4c07eaf0b5" translate="yes" xml:space="preserve">
          <source>To bind to an event you use the Angular event binding syntax. This syntax consists of a target event name within parentheses to the left of an equal sign, and a quoted template statement to the right. In the following example, the target event name is &lt;code&gt;click&lt;/code&gt; and the template statement is &lt;code&gt;onSave()&lt;/code&gt;.</source>
          <target state="translated">イベントにバインドするには、Angularイベントバインド構文を使用します。この構文は、等号の左側の括弧内のターゲットイベント名と、右側の引用符で囲まれたテンプレートステートメントで構成されます。次の例では、ターゲットイベント名は &lt;code&gt;click&lt;/code&gt; で、テンプレートステートメントは &lt;code&gt;onSave()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d778e18735c77251c6e68dfae859e34ec242ed1" translate="yes" xml:space="preserve">
          <source>To bind to multiple classes, use &lt;code&gt;[class]&lt;/code&gt; set to an expression&amp;mdash;for example, &lt;code&gt;[class]=&quot;classExpression&quot;&lt;/code&gt;. The expression can be a space-delimited string of class names, or an object with class names as the keys and truthy or falsy expressions as the values. With an object format, Angular adds a class only if its associated value is truthy.</source>
          <target state="translated">複数のクラスにバインドするには、式に設定された &lt;code&gt;[class]&lt;/code&gt; を使用します（例： &lt;code&gt;[class]=&quot;classExpression&quot;&lt;/code&gt; )。式は、スペースで区切られたクラス名の文字列、またはクラス名をキーとして、真偽の式を値として持つオブジェクトにすることができます。オブジェクト形式では、Angularは、関連付けられた値がtrueである場合にのみクラスを追加します。</target>
        </trans-unit>
        <trans-unit id="2a2b43d8d4759c302041d5555e84a74b033db308" translate="yes" xml:space="preserve">
          <source>To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&amp;mdash;many elements and properties in the DOM allow code execution, for example, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt;. If attacker-controlled data enters the DOM, expect security vulnerabilities.</source>
          <target state="translated">XSS攻撃をブロックするには、悪意のあるコードがDOM（Document Object Model）に入らないようにする必要があります。たとえば、攻撃者があなたをだましてDOMに &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを挿入させることができる場合、攻撃者はWebサイトで任意のコードを実行できます。攻撃がに限定されるものではなく &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 例えば、コード実行DOM内のタグ、多くの要素やプロパティできるよう、 &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt; 。攻撃者が制御するデータがDOMに入る場合、セキュリティの脆弱性が予想されます。</target>
        </trans-unit>
        <trans-unit id="bf32545d272d3b9cbadb82b7e3da443ce9a08440" translate="yes" xml:space="preserve">
          <source>To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&amp;mdash;many elements and properties in the DOM allow code execution, for example, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt;. If attacker-controlled data enters the DOM, expect security vulnerabilities.</source>
          <target state="translated">XSS攻撃をブロックするには、悪意のあるコードがDOM（Document Object Model）に侵入するのを防ぐ必要があります。たとえば、攻撃者があなたをだましてDOMに &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを挿入させた場合、攻撃者はWebサイトで任意のコードを実行する可能性があります。攻撃は &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグに限定されません。たとえば、 &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;a href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt; = &quot; javascript：...&quot;&amp;gt;など、DOMの多くの要素とプロパティでコードの実行が許可されます。攻撃者が制御するデータがDOMに侵入した場合、セキュリティの脆弱性が予想されます。</target>
        </trans-unit>
        <trans-unit id="82e29a55d59b6b2bd0a517982412ccec5411a4a1" translate="yes" xml:space="preserve">
          <source>To bootstrap a hybrid application, you must bootstrap each of the Angular and AngularJS parts of the application. You must bootstrap the Angular bits first and then ask the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to bootstrap the AngularJS bits next.</source>
          <target state="translated">ハイブリッドアプリケーションをブートストラップするには、アプリケーションのAngularおよびAngularJSの各部分をブートストラップする必要があります。まずAngularビットをブートストラップし、次に &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; にAngularJSビットをブートストラップするように依頼する必要があります。</target>
        </trans-unit>
        <trans-unit id="4f304161933cd5ad06abfd2e9cde018e77079b3d" translate="yes" xml:space="preserve">
          <source>To build a separate distributable copy of the app for each locale, &lt;a href=&quot;i18n#localize-config&quot;&gt;define the locales in the build configuration&lt;/a&gt; in your project's workspace configuration file &lt;a href=&quot;workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt;&lt;/a&gt;. This method shortens the build process by removing the requirement to perform a full app build for each locale.</source>
          <target state="translated">ロケールごとにアプリの個別の配布可能なコピーを&lt;a href=&quot;i18n#localize-config&quot;&gt;ビルドするに&lt;/a&gt;は、プロジェクトのワークスペース構成ファイル&lt;a href=&quot;workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; &lt;/a&gt;のビルド構成でロケールを定義します。この方法では、ロケールごとに完全なアプリビルドを実行する必要がなくなるため、ビルドプロセスが短縮されます。</target>
        </trans-unit>
        <trans-unit id="e4ec3081d8abfef81b9c7b98512682fe817069de" translate="yes" xml:space="preserve">
          <source>To build up the generation schematic, start with an empty rule factory.</source>
          <target state="translated">世代回路図を構築するには、空のルール工場から始めます。</target>
        </trans-unit>
        <trans-unit id="8901fe39170514d01f50341a27e20f9604a9825a" translate="yes" xml:space="preserve">
          <source>To build using the staging configuration, run the following command:</source>
          <target state="translated">ステージング設定を使用してビルドするには、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="c4203d9a357f968995a61263dcb595eb193e91ce" translate="yes" xml:space="preserve">
          <source>To build your application locally or for production, download the source code from your StackBlitz project by clicking the &lt;code&gt;Download Project&lt;/code&gt; icon in the left menu across from &lt;code&gt;Project&lt;/code&gt; to download your files.</source>
          <target state="translated">ローカルまたは生産のためのアプリケーションをビルドするには、クリックしてStackBlitzプロジェクトからソースコードをダウンロード &lt;code&gt;Download Project&lt;/code&gt; から渡って左側のメニューのアイコンを &lt;code&gt;Project&lt;/code&gt; ファイルをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="e28bdfee0dc7a60965eea042b0b40687dbd667f9" translate="yes" xml:space="preserve">
          <source>To build your application locally or for production, you will need to download the source code from your StackBlitz project. Click the &lt;code&gt;Download Project&lt;/code&gt; icon in the left menu across from &lt;code&gt;Project&lt;/code&gt; to download your files.</source>
          <target state="translated">アプリケーションをローカルまたは本番用にビルドするには、StackBlitzプロジェクトからソースコードをダウンロードする必要があります。クリックして &lt;code&gt;Download Project&lt;/code&gt; から渡って左側のメニューのアイコンを &lt;code&gt;Project&lt;/code&gt; ファイルをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="0466ae768a4d93cf77c8e4981171d89f8a7ca6ff" translate="yes" xml:space="preserve">
          <source>To bundle your schematics together with your library, you must configure the library to build the schematics separately, then add them to the bundle. You must build your schematics &lt;em&gt;after&lt;/em&gt; you build your library, so they are placed in the correct directory.</source>
          <target state="translated">回路図をライブラリと一緒にバンドルするには、ライブラリを構成して回路図を個別にビルドしてから、それらをバンドルに追加する必要があります。ライブラリを構築した&lt;em&gt;後で&lt;/em&gt;回路図を構築する必要があるため、回路図は正しいディレクトリに配置されます。</target>
        </trans-unit>
        <trans-unit id="885d50f557834570c68a2e5e1be6b220c9216f5a" translate="yes" xml:space="preserve">
          <source>To bypass the service worker you can set &lt;code&gt;ngsw-bypass&lt;/code&gt; as a request header, or as a query parameter. (The value of the header or query parameter is ignored and can be empty or omitted.)</source>
          <target state="translated">Service Workerをバイパスするには、 &lt;code&gt;ngsw-bypass&lt;/code&gt; をリクエストヘッダーまたはクエリパラメーターとして設定できます。（ヘッダーまたはクエリパラメータの値は無視され、空または省略できます。）</target>
        </trans-unit>
        <trans-unit id="12534712788ba78416f7f95870eaa280458520d6" translate="yes" xml:space="preserve">
          <source>To catch errors, you &lt;strong&gt;&quot;pipe&quot; the observable&lt;/strong&gt; result from &lt;code&gt;http.get()&lt;/code&gt; through an RxJS &lt;code&gt;catchError()&lt;/code&gt; operator.</source>
          <target state="translated">エラーをキャッチするには、 &lt;code&gt;http.get()&lt;/code&gt; からの監視&lt;strong&gt;可能な&lt;/strong&gt;結果をRxJS &lt;code&gt;catchError()&lt;/code&gt; 演算子を介して&lt;strong&gt;「パイプ」し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b1399e0f4384532fff4fb5004d497a9b72d3762f" translate="yes" xml:space="preserve">
          <source>To change the appearance in this way, take the following steps.</source>
          <target state="translated">このように見た目を変えるには、以下の手順で行います。</target>
        </trans-unit>
        <trans-unit id="1e0fe49f14510b713680172388a0dd717d0f6c10" translate="yes" xml:space="preserve">
          <source>To change the controls in the array, use the &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;removeAt&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt; methods in &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; itself. These methods ensure the controls are properly tracked in the form's hierarchy. Do not modify the array of &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s used to instantiate the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; directly, as that result in strange and unexpected behavior such as broken change detection.</source>
          <target state="translated">配列内のコントロールを変更するには、 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 自体の &lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;removeAt&lt;/code&gt; 、または &lt;code&gt;clear&lt;/code&gt; メソッドを使用します。これらのメソッドにより、フォームの階層でコントロールが適切に追跡されます。 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; を直接インスタンス化するために使用される &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; の配列を直接変更しないでください。変更が検出されると、奇妙で​​予期しない動作が発生します。</target>
        </trans-unit>
        <trans-unit id="fa6c4e125d9030b1dd5bdb271106b3ee1210b79c" translate="yes" xml:space="preserve">
          <source>To change the name of the source language file generated by the extraction tool, use the &lt;code&gt;--outFile&lt;/code&gt; command option:</source>
          <target state="translated">抽出ツールによって生成されたソース言語ファイルの名前を変更するには、 &lt;code&gt;--outFile&lt;/code&gt; コマンドオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="63029d22a7a0498f402e2ef9e4441e473404955c" translate="yes" xml:space="preserve">
          <source>To check that you have the npm client installed, run &lt;code&gt;npm -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">npmクライアントがインストールされていることを確認するには、ターミナル/コンソールウィンドウで &lt;code&gt;npm -v&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="ca63fd9203fa01e0094b45d6b8d3f7271e129840" translate="yes" xml:space="preserve">
          <source>To check that your services are working as you intend, you can write tests specifically for them.</source>
          <target state="translated">サービスが意図した通りに動作しているかどうかを確認するために、サービス専用のテストを書くことができます。</target>
        </trans-unit>
        <trans-unit id="6e948743b462eea7115d418352e1dbfa4b4b10ff" translate="yes" xml:space="preserve">
          <source>To check your app's version of Angular: From within your project directory, use the &lt;code&gt;ng version&lt;/code&gt; command.</source>
          <target state="translated">Angularのアプリのバージョンを確認するには：プロジェクトディレクトリから &lt;code&gt;ng version&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="13078c07edb73de738fd267221caa6c4bad9f0a1" translate="yes" xml:space="preserve">
          <source>To check your version, run &lt;code&gt;node -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">バージョンを確認するには、ターミナル/コンソールウィンドウで &lt;code&gt;node -v&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="07cec4d840c8d65fc9e2b7b36b758a8ade445776" translate="yes" xml:space="preserve">
          <source>To combine property and event bindings using the banana-in-a-box syntax, &lt;code&gt;[()]&lt;/code&gt;, see &lt;a href=&quot;template-syntax#two-way&quot;&gt;Two-way Binding&lt;/a&gt;.</source>
          <target state="translated">バナナインボックス構文 &lt;code&gt;[()]&lt;/code&gt; を使用してプロパティとイベントのバインディングを組み合わせるには、「&lt;a href=&quot;template-syntax#two-way&quot;&gt;双方向バインディング&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="642e16b417c34000ddb663b1633653c4924b0252" translate="yes" xml:space="preserve">
          <source>To combine property and event bindings using the banana-in-a-box syntax, &lt;code&gt;[()]&lt;/code&gt;, see &lt;a href=&quot;two-way-binding&quot;&gt;Two-way Binding&lt;/a&gt;.</source>
          <target state="translated">banana-in-a-box構文 &lt;code&gt;[()]&lt;/code&gt; を使用してプロパティとイベントのバインディングを組み合わせるには、&lt;a href=&quot;two-way-binding&quot;&gt;双方向バインディングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81d564a34225b7a86fd760cbe08da660a47b6d5c" translate="yes" xml:space="preserve">
          <source>To complete this tutorial, you should have a basic understanding of the following concepts:</source>
          <target state="translated">このチュートリアルを完了するには、以下の概念を基本的に理解している必要があります。</target>
        </trans-unit>
        <trans-unit id="b3236306fb71061a53e3712837b9be971697d08d" translate="yes" xml:space="preserve">
          <source>To conditionally display an element, place the element's &lt;code&gt;hidden&lt;/code&gt; property in square brackets and set it to a quoted template expression that evaluates to the &lt;em&gt;opposite&lt;/em&gt; of &lt;em&gt;show&lt;/em&gt;.</source>
          <target state="translated">要素を条件付きで表示するには、要素の &lt;code&gt;hidden&lt;/code&gt; プロパティを角かっこで囲み、それを&lt;em&gt;show&lt;/em&gt;の&lt;em&gt;反対&lt;/em&gt;に評価される引用されたテンプレート式に設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53182894e9c6995045a12635221f90b2e4299c08" translate="yes" xml:space="preserve">
          <source>To configure access to your own users' CLI usage data, use the &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; command to add a key to your global &lt;a href=&quot;../guide/workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt; workspace configuration file&lt;/a&gt;. The key goes under &lt;code&gt;cli.analyticsSharing&lt;/code&gt; at the top level of the file, outside the &lt;code&gt;projects&lt;/code&gt; sections. The value of the key is your organization's tracking ID, as assigned by Google Analytics. This ID is a string that looks like &lt;code&gt;UA-123456-12&lt;/code&gt;.</source>
          <target state="translated">自分のユーザーのCLI使用状況データへのアクセスを構成するには、 &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; コマンドを使用して、キーをグローバル&lt;a href=&quot;../guide/workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; ワークスペース構成ファイル&lt;/a&gt;に追加します。キーは、 &lt;code&gt;projects&lt;/code&gt; セクションの外側のファイルのトップレベルにある &lt;code&gt;cli.analyticsSharing&lt;/code&gt; の下にあります。キーの値は、Googleアナリティクスによって割り当てられた組織のトラッキングIDです。このIDは、 &lt;code&gt;UA-123456-12&lt;/code&gt; のような文字列です。</target>
        </trans-unit>
        <trans-unit id="43641662c305bf9094c3e1aabcca4466e6a5d8e8" translate="yes" xml:space="preserve">
          <source>To configure access to your own users' CLI usage data, use the &lt;code&gt;ng config&lt;/code&gt; command to add a key to your global &lt;a href=&quot;../guide/workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt; workspace configuration file&lt;/a&gt;. The key goes under &lt;code&gt;cli.analyticsSharing&lt;/code&gt; at the top level of the file, outside the &lt;code&gt;projects&lt;/code&gt; sections. The value of the key is your organization's tracking ID, as assigned by Google Analytics. This ID is a string that looks like &lt;code&gt;UA-123456-12&lt;/code&gt;.</source>
          <target state="translated">独自のユーザーのCLIの使用状況データへのconfigureのアクセスに使用する &lt;code&gt;ng config&lt;/code&gt; グローバルにキーを追加するには、コマンドを&lt;a href=&quot;../guide/workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; のワークスペースの設定ファイル&lt;/a&gt;。キーは、 &lt;code&gt;projects&lt;/code&gt; セクションの外にあるファイルのトップレベルの &lt;code&gt;cli.analyticsSharing&lt;/code&gt; の下にあります。キーの値は、Googleアナリティクスによって割り当てられた組織のトラッキングIDです。このIDは、 &lt;code&gt;UA-123456-12&lt;/code&gt; のような文字列です。</target>
        </trans-unit>
        <trans-unit id="081b1f073ba92cd82743621b3f2f2eb2c90049a3" translate="yes" xml:space="preserve">
          <source>To configure the Angular Router, you must define a route for AngularJS URLs. To match those URLs, you add a route configuration that uses the &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; allows you to use custom pattern matching for URL paths. The Angular Router tries to match on more specific routes such as static and variable routes first. When it doesn't find a match, it then looks at custom matchers defined in your route configuration. If the custom matchers don't match a route, it then goes to catch-all routes, such as a 404 page.</source>
          <target state="translated">Angularルーターを構成するには、AngularJS URLのルートを定義する必要があります。それらのURLを照合するには、 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; プロパティを使用するルート構成を追加します。 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; あなたがURLパスのカスタムパターンマッチングを使用することができます。Angularルーターは、静的ルートや可変ルートなど、より具体的なルートを最初に照合しようとします。一致が見つからない場合は、ルート構成で定義されているカスタムマッチャーを調べます。カスタムマッチャーがルートと一致しない場合、404ページなどのキャッチオールルートに移動します。</target>
        </trans-unit>
        <trans-unit id="8b0d3dc20b07af14896fcbb5d5c567cd4a2c240d" translate="yes" xml:space="preserve">
          <source>To configure the Angular Router, you must define a route for AngularJS URLs. To match those URLs, you add a route configuration that uses the &lt;code&gt;matcher&lt;/code&gt; property. The &lt;code&gt;matcher&lt;/code&gt; allows you to use custom pattern matching for URL paths. The Angular Router tries to match on more specific routes such as static and variable routes first. When it doesn't find a match, it then looks at custom matchers defined in your route configuration. If the custom matchers don't match a route, it then goes to catch-all routes, such as a 404 page.</source>
          <target state="translated">Angularルーターを構成するには、AngularJSURLのルートを定義する必要があります。これらのURLを照合するには、 &lt;code&gt;matcher&lt;/code&gt; プロパティを使用するルート構成を追加します。 &lt;code&gt;matcher&lt;/code&gt; あなたがURLパスのカスタムパターンマッチングを使用することができます。Angular Routerは、最初に静的ルートや可変ルートなどのより具体的なルートで照合を試みます。一致するものが見つからない場合は、ルート構成で定義されているカスタムマッチャーを調べます。カスタムマッチャーがルートと一致しない場合は、404ページなどのキャッチオールルートに移動します。</target>
        </trans-unit>
        <trans-unit id="e972c128dc7bc14f3f17a87fcada88a6a2d87a1e" translate="yes" xml:space="preserve">
          <source>To configure whether navigation requests are sent through to the network or not, see the &lt;a href=&quot;service-worker-config#navigation-request-strategy&quot;&gt;navigationRequestStrategy&lt;/a&gt; section.</source>
          <target state="translated">ナビゲーション要求がネットワークに送信されるかどうかを構成するには、&lt;a href=&quot;service-worker-config#navigation-request-strategy&quot;&gt;navigationRequestStrategy&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b884870273119a7d7e697d247c4d659cdde8b585" translate="yes" xml:space="preserve">
          <source>To confirm submission, open the console where you should see an object containing the name and address you submitted.</source>
          <target state="translated">送信を確認するには、コンソールを開き、送信した名前とアドレスを含むオブジェクトを確認してください。</target>
        </trans-unit>
        <trans-unit id="85a5f9228b0c283a4c0767bf17f5218cf21f432e" translate="yes" xml:space="preserve">
          <source>To confirm that the display updates as the user adds heroes, see the live example.</source>
          <target state="translated">ユーザーがヒーローを追加すると表示が更新されることを確認するには、ライブの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6838e6bcfc83475121bb1e4ad55f4fbcaddb58b" translate="yes" xml:space="preserve">
          <source>To confirm that two-way data binding works for the entire hero model, add a new binding at the top to the component's &lt;code&gt;diagnostic&lt;/code&gt; property.</source>
          <target state="translated">双方向データバインディングがヒーローモデル全体で機能することを確認するには、コンポーネントの &lt;code&gt;diagnostic&lt;/code&gt; プロパティの上部に新しいバインディングを追加します。</target>
        </trans-unit>
        <trans-unit id="99be46bd11d0de83ad9e296968ef2c5a7118146b" translate="yes" xml:space="preserve">
          <source>To continue exploring Angular, choose either of the following options:</source>
          <target state="translated">Angularの探索を続けるには、以下のいずれかのオプションを選択します。</target>
        </trans-unit>
        <trans-unit id="a3014c43a2313b977c6aed25419c31a95265fa08" translate="yes" xml:space="preserve">
          <source>To contrast the two types of components, there are components which are included in the template, which are declarative. Additionally, there are components which you load imperatively; that is, entry components.</source>
          <target state="translated">この2つのタイプのコンポーネントを対比させるために、テンプレートに含まれるコンポーネントと宣言的なコンポーネントがあります。さらに、必須的にロードするコンポーネント、つまりエントリーコンポーネントもあります。</target>
        </trans-unit>
        <trans-unit id="959d46928d85d110fdade5f2293bf97890445838" translate="yes" xml:space="preserve">
          <source>To control how this encapsulation happens on a &lt;em&gt;per component&lt;/em&gt; basis, you can set the &lt;em&gt;view encapsulation mode&lt;/em&gt; in the component metadata. Choose from the following modes:</source>
          <target state="translated">このカプセル化が&lt;em&gt;コンポーネント&lt;/em&gt;ごとにどのように発生するかを制御するには、コンポーネントのメタデータで&lt;em&gt;ビューのカプセル化モードを&lt;/em&gt;設定し&lt;em&gt;ます&lt;/em&gt;。次のモードから選択します。</target>
        </trans-unit>
        <trans-unit id="c93024cc33ad0ddbba14e6bbd25bf12722637c4a" translate="yes" xml:space="preserve">
          <source>To control the state of the button, set the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;property&lt;/em&gt;,</source>
          <target state="translated">ボタンの状態を制御するには、 &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;プロパティを&lt;/em&gt;設定し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="fbe3fde2fb0a60e4ec9cfcd947c47d4e664ce7a7" translate="yes" xml:space="preserve">
          <source>To convert this binding to use specialized objects, turn the array of hero names into an array of &lt;code&gt;Hero&lt;/code&gt; objects. For that you'll need a &lt;code&gt;Hero&lt;/code&gt; class:</source>
          <target state="translated">このバインディングを変換して特殊なオブジェクトを使用するには、ヒーロー名の配列を &lt;code&gt;Hero&lt;/code&gt; オブジェクトの配列に変換します。そのためには、 &lt;code&gt;Hero&lt;/code&gt; クラスが必要です。</target>
        </trans-unit>
        <trans-unit id="3e235ca1b49cbf515a53d4eb460cb0a499395651" translate="yes" xml:space="preserve">
          <source>To copy a code example from this tutorial, click the icon at the top right of the code example box, and then paste the code snippet from the clipboard into StackBlitz.</source>
          <target state="translated">このチュートリアルのコード例をコピーするには、コード例ボックスの右上のアイコンをクリックして、クリップボードにあるコードスニペットをStackBlitzに貼り付けます。</target>
        </trans-unit>
        <trans-unit id="b27e4d885fe2defbb235fa198172a39e1ab9f6e4" translate="yes" xml:space="preserve">
          <source>To correct the problem, call &lt;code&gt;compileComponents()&lt;/code&gt; as explained &lt;a href=&quot;testing#compile-components&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">この問題を修正するには、&lt;a href=&quot;testing#compile-components&quot;&gt;以下で&lt;/a&gt;説明するように &lt;code&gt;compileComponents()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b99d3a2a82a487cd7d58a6066fda66fb46065bff" translate="yes" xml:space="preserve">
          <source>To correct the problem, call &lt;code&gt;compileComponents()&lt;/code&gt; as explained &lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">この問題を修正するには、&lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;以下で&lt;/a&gt;説明するように &lt;code&gt;compileComponents()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="979325cb37deb2c50164b83f04e810b1ac2b55a5" translate="yes" xml:space="preserve">
          <source>To correct this error, export a function from the module and refer to the function in a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider instead.</source>
          <target state="translated">このエラーを修正するには、モジュールから関数をエクスポートし、代わりに &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロバイダーの関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="0de991b19c02e8ee0427a429122c7e2d73a6ca37" translate="yes" xml:space="preserve">
          <source>To correct this error, export a function from the module and refer to the function in a &lt;code&gt;useFactory&lt;/code&gt; provider instead.</source>
          <target state="translated">このエラーを修正するには、モジュールから関数をエクスポートし、代わりに &lt;code&gt;useFactory&lt;/code&gt; プロバイダーで関数を参照します。</target>
        </trans-unit>
        <trans-unit id="1ecaf5471a0ced58416233b3602e2e5a39d32a9d" translate="yes" xml:space="preserve">
          <source>To correct this error, provide the initial value of the variable in an initializer clause &lt;em&gt;on the same line&lt;/em&gt;.</source>
          <target state="translated">このエラーを修正するには&lt;em&gt;、同じ行の&lt;/em&gt;初期化句&lt;em&gt;に&lt;/em&gt;変数の初期値を指定します。</target>
        </trans-unit>
        <trans-unit id="4dee6cdbff0c50b18b7cf0744c39d9afb9e81794" translate="yes" xml:space="preserve">
          <source>To correct this error, refer to non-destructured values.</source>
          <target state="translated">このエラーを修正するには、非構造化値を参照してください。</target>
        </trans-unit>
        <trans-unit id="babb4800b9ce7124e0062940991131f750bd641a" translate="yes" xml:space="preserve">
          <source>To create a component using the Angular CLI:</source>
          <target state="translated">Angular CLIを使ってコンポーネントを作成するには</target>
        </trans-unit>
        <trans-unit id="88fabc18833c78d0934957c18fe19782c262d822" translate="yes" xml:space="preserve">
          <source>To create a component, verify that you have met the following prerequisites:</source>
          <target state="translated">コンポーネントを作成するには、以下の前提条件を満たしていることを確認します。</target>
        </trans-unit>
        <trans-unit id="67bb6a40877c035fe23caa2365ec0af551e4e717" translate="yes" xml:space="preserve">
          <source>To create a file in the &lt;code&gt;src/locale&lt;/code&gt; directory, specify the output path as an option, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;src/locale&lt;/code&gt; ディレクトリにファイルを作成するには、次の例に示すように、オプションとして出力パスを指定します。</target>
        </trans-unit>
        <trans-unit id="8122f0d68c6098d4c122991ebd95c6cf88d61b30" translate="yes" xml:space="preserve">
          <source>To create a nested group in &lt;code&gt;profileForm&lt;/code&gt;, add a nested &lt;code&gt;address&lt;/code&gt; element to the form group instance.</source>
          <target state="translated">&lt;code&gt;profileForm&lt;/code&gt; でネストされたグループを作成するには、ネストされた &lt;code&gt;address&lt;/code&gt; 要素をフォームグループインスタンスに追加します。</target>
        </trans-unit>
        <trans-unit id="fafbd773ca94ccd66053f04954d31716c4ab9f28" translate="yes" xml:space="preserve">
          <source>To create a new application in the strict mode within an existing non-strict workspace, run the following command:</source>
          <target state="translated">既存の非ストリクト ワークスペース内にストリクト モードの新しいアプリケーションを作成するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="dbca6227b9db6ab1847c89187b909d5fe85abac4" translate="yes" xml:space="preserve">
          <source>To create a new component manually:</source>
          <target state="translated">新しいコンポーネントを手動で作成するには</target>
        </trans-unit>
        <trans-unit id="d2bf7fb2d3e94211afcd57a10f20c4c45cfe0d7d" translate="yes" xml:space="preserve">
          <source>To create a new workspace and an initial app project:</source>
          <target state="translated">新しいワークスペースと初期アプリプロジェクトを作成するには</target>
        </trans-unit>
        <trans-unit id="5bd4653200aaca61df950cdd4eca5d949291ae56" translate="yes" xml:space="preserve">
          <source>To create a new workspace and application using the strict mode, run the following command:</source>
          <target state="translated">厳密モードを使用して新しいワークスペースとアプリケーションを作成するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="f144d38768edd99f2d27499d71edd950a08584a3" translate="yes" xml:space="preserve">
          <source>To create a new workspace and initial starter app:</source>
          <target state="translated">新しいワークスペースと初期のスターターアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="1aa719950868f1d4fa3ac83a344dcfa8c80b6018" translate="yes" xml:space="preserve">
          <source>To create a reusable animation, use the &lt;a href=&quot;../api/animations/animation&quot;&gt;&lt;code&gt;animation()&lt;/code&gt;&lt;/a&gt; method to define an animation in a separate &lt;code&gt;.ts&lt;/code&gt; file and declare this animation definition as a &lt;code&gt;const&lt;/code&gt; export variable. You can then import and reuse this animation in any of your app components using the &lt;a href=&quot;../api/animations/useanimation&quot;&gt;&lt;code&gt;useAnimation()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">再利用可能なアニメーションを作成するには、&lt;a href=&quot;../api/animations/animation&quot;&gt; &lt;code&gt;animation()&lt;/code&gt; &lt;/a&gt;メソッドを使用して別の &lt;code&gt;.ts&lt;/code&gt; ファイルでアニメーションを定義し、このアニメーション定義を &lt;code&gt;const&lt;/code&gt; エクスポート変数として宣言します。その後、&lt;a href=&quot;../api/animations/useanimation&quot;&gt; &lt;code&gt;useAnimation()&lt;/code&gt; &lt;/a&gt; API を使用して、このアニメーションをアプリコンポーネントのいずれかにインポートして再利用できます。</target>
        </trans-unit>
        <trans-unit id="75d0e30751a493533457e112686e8dcb02d5af60" translate="yes" xml:space="preserve">
          <source>To create a single class binding, use the prefix &lt;code&gt;class&lt;/code&gt; followed by a dot and the name of the CSS class&amp;mdash;for example, &lt;code&gt;[class.sale]=&quot;onSale&quot;&lt;/code&gt;. Angular adds the class when the bound expression, &lt;code&gt;onSale&lt;/code&gt; is truthy, and it removes the class when the expression is falsy&amp;mdash;with the exception of &lt;code&gt;undefined&lt;/code&gt;. See &lt;a href=&quot;style-precedence#styling-delegation&quot;&gt;styling delegation&lt;/a&gt; for more information.</source>
          <target state="translated">単一のクラスバインディングを作成するには、プレフィックス &lt;code&gt;class&lt;/code&gt; 後にドットとCSSクラスの名前を使用します（例： &lt;code&gt;[class.sale]=&quot;onSale&quot;&lt;/code&gt; )。 Angularは、バインドされた式 &lt;code&gt;onSale&lt;/code&gt; がtrueの場合にクラスを追加し、式が偽の場合にクラスを削除します（ &lt;code&gt;undefined&lt;/code&gt; を除く）。詳細については、&lt;a href=&quot;style-precedence#styling-delegation&quot;&gt;スタイリング委任&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="654531e7f01f2a99237d0195284ddb4817aa8ab0" translate="yes" xml:space="preserve">
          <source>To create a single style binding, use the prefix &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; followed by a dot and the name of the CSS style property&amp;mdash;for example, &lt;code&gt;[style.width]=&quot;width&quot;&lt;/code&gt;. Angular sets the property to the value of the bound expression, which is usually a string. Optionally, you can add a unit extension like &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt;, which requires a number type.</source>
          <target state="translated">単一のスタイルバインディングを作成するには、プレフィックス &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 後にドットとCSSスタイルプロパティの名前を使用します（例： &lt;code&gt;[style.width]=&quot;width&quot;&lt;/code&gt; )。Angularは、プロパティをバインドされた式の値（通常は文字列）に設定します。オプションで、 &lt;code&gt;em&lt;/code&gt; や &lt;code&gt;%&lt;/code&gt; などの単位拡張子を追加できます。これには数値型が必要です。</target>
        </trans-unit>
        <trans-unit id="29ae33325b206d2fd3cdedfd24a2c41e5f192288" translate="yes" xml:space="preserve">
          <source>To create the cart page, you begin by following the same steps you did to create the product details component and to set up routing for the new component.</source>
          <target state="translated">カートページを作成するには、製品の詳細コンポーネントを作成し、新しいコンポーネントのルーティングを設定するために行ったのと同じ手順に従います。</target>
        </trans-unit>
        <trans-unit id="090dfe1a5c79f77a9be595e199d5fab1f453c8d6" translate="yes" xml:space="preserve">
          <source>To create the cart view, begin by following the same steps you did to create the product details component and configure routing for the new component.</source>
          <target state="translated">カートビューを作成するには、商品の詳細コンポーネントを作成し、新しいコンポーネントのルーティングを設定するのと同じ手順で始めます。</target>
        </trans-unit>
        <trans-unit id="594ec3ddcc19c25f73ea897495b521aecaf86016" translate="yes" xml:space="preserve">
          <source>To create the server-side app module, &lt;code&gt;app.server.module.ts&lt;/code&gt;, run the following CLI command.</source>
          <target state="translated">サーバーサイドアプリモジュール &lt;code&gt;app.server.module.ts&lt;/code&gt; を作成するには、次のCLIコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="a1d7d554f2d72ca28c730058079d294822be35c1" translate="yes" xml:space="preserve">
          <source>To create, build, and serve a new, basic Angular project on a development server, go to the parent directory of your new workspace use the following commands:</source>
          <target state="translated">開発サーバー上で新しい基本的なAngularプロジェクトを作成、ビルド、提供するには、新しいワークスペースの親ディレクトリに移動し、以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="65acbd001432e22b30e796e7e61e3dfe440088a8" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. &lt;code&gt;compareWith&lt;/code&gt; takes a &lt;strong&gt;function&lt;/strong&gt; which has two arguments: &lt;code&gt;option1&lt;/code&gt; and &lt;code&gt;option2&lt;/code&gt;. If &lt;code&gt;compareWith&lt;/code&gt; is given, Angular selects option by the return value of the function.</source>
          <target state="translated">デフォルトのオプション比較アルゴリズムをカスタマイズするために、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; は &lt;code&gt;compareWith&lt;/code&gt; 入力をサポートしています。 &lt;code&gt;compareWith&lt;/code&gt; は、 &lt;code&gt;option1&lt;/code&gt; と &lt;code&gt;option2&lt;/code&gt; の 2つの引数を持つ&lt;strong&gt;関数&lt;/strong&gt;を取ります。 &lt;code&gt;compareWith&lt;/code&gt; が指定されている場合、Angularは関数の戻り値によってオプションを選択します。</target>
        </trans-unit>
        <trans-unit id="c9057dec56a92572abc6bcb328cdc254209b6283" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. See the &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; for usage.</source>
          <target state="translated">デフォルトのオプション比較アルゴリズムをカスタマイズするために、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; は &lt;code&gt;compareWith&lt;/code&gt; 入力をサポートしています。使用方法については、 &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="12614d5a0a4f9980916f0bd6829fb9e94aeee5ca" translate="yes" xml:space="preserve">
          <source>To deactivate the service worker, remove or rename the &lt;code&gt;ngsw.json&lt;/code&gt; file. When the service worker's request for &lt;code&gt;ngsw.json&lt;/code&gt; returns a &lt;code&gt;404&lt;/code&gt;, then the service worker removes all of its caches and de-registers itself, essentially self-destructing.</source>
          <target state="translated">Service Workerを非アクティブ化するには、 &lt;code&gt;ngsw.json&lt;/code&gt; ファイルを削除するか、名前を変更します。 &lt;code&gt;ngsw.json&lt;/code&gt; に対するService Workerのリクエストが &lt;code&gt;404&lt;/code&gt; を返すと、Service Workerはすべてのキャッシュを削除し、それ自体を登録解除します。基本的には自己破壊です。</target>
        </trans-unit>
        <trans-unit id="9108d6f3d8bba0bf373979ce840c2d85dbc55392" translate="yes" xml:space="preserve">
          <source>To declare the styles for a component in a separate file, add a &lt;code&gt;stylesUrls&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">、別のファイルにコンポーネントのスタイルを宣言する追加するには &lt;code&gt;stylesUrls&lt;/code&gt; にプロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータ。</target>
        </trans-unit>
        <trans-unit id="95e38d849c5796bd6398c2761b41e463c7976d04" translate="yes" xml:space="preserve">
          <source>To define a class as a service in Angular, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to provide the metadata that allows Angular to inject it into a component as a &lt;em&gt;dependency&lt;/em&gt;. Similarly, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) &lt;em&gt;has&lt;/em&gt; a dependency.</source>
          <target state="translated">Angularでクラスをサービスとして定義するには、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータを使用して、Angularが&lt;em&gt;依存関係&lt;/em&gt;としてコンポーネントにコンポーネントを挿入できるようにするメタデータを提供します。同様に、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレーターを使用して、コンポーネントまたは他のクラス（別のサービス、パイプ、NgModuleなど）&lt;em&gt;に&lt;/em&gt;依存関係&lt;em&gt;が&lt;/em&gt;あることを示します。</target>
        </trans-unit>
        <trans-unit id="ad6c984d27957b7c6989d1d288e104c9c138aa30" translate="yes" xml:space="preserve">
          <source>To define a directive, mark the class with the decorator and provide metadata.</source>
          <target state="translated">ディレクティブを定義するには、クラスをデコレータでマークし、メタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="02af62d3d61d2c5e19973a6b482fa1173a786ab6" translate="yes" xml:space="preserve">
          <source>To define a dynamic form, take the following steps.</source>
          <target state="translated">ダイナミックフォームを定義するには、次の手順を実行します。</target>
        </trans-unit>
        <trans-unit id="e42033ffe1eecc4e2eee5697858df411d08f9c66" translate="yes" xml:space="preserve">
          <source>To define a template as an external file, add a &lt;code&gt;templateUrl&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">テンプレートを外部ファイルとして定義するには、 &lt;code&gt;templateUrl&lt;/code&gt; プロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータに追加します。</target>
        </trans-unit>
        <trans-unit id="52964b4b5ce54e1050f8c2ee29cd57e64a45fb23" translate="yes" xml:space="preserve">
          <source>To define a template within the component, add a &lt;code&gt;template&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator that contains the HTML you want to use.</source>
          <target state="translated">コンポーネント内でテンプレートを定義するには、使用するHTMLを含む &lt;code&gt;template&lt;/code&gt; プロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータに追加します。</target>
        </trans-unit>
        <trans-unit id="7461bcf852b17248b69621e8549d73cd98177d21" translate="yes" xml:space="preserve">
          <source>To define and show an error message when appropriate, take the following steps.</source>
          <target state="translated">適切な場合にエラーメッセージを定義して表示するには、以下の手順を実行します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
