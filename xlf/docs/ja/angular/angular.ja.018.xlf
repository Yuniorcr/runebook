<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="3d66988bd9d4c9dd0ef51965ef7c55945a3dcc40" translate="yes" xml:space="preserve">
          <source>To define how users navigate through your application, you use routes. You can add routes to define how users navigate from one part of your application to another. You can also configure routes to guard against unexpected or unauthorized behavior.</source>
          <target state="translated">ユーザーがアプリケーションをどのようにナビゲートするかを定義するには、ルートを使用します。ルートを追加して、ユーザーがアプリケーションのある部分から別の部分へ移動する方法を定義することができます。また、予期せぬ動作や許可されていない動作を防ぐために、ルートを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="1cd846925adda37616140e026544f1e443869411" translate="yes" xml:space="preserve">
          <source>To define navigation rules, you associate &lt;em&gt;navigation paths&lt;/em&gt; with your components. A path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data. You can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</source>
          <target state="translated">ナビゲーションルールを定義するには、&lt;em&gt;ナビゲーションパス&lt;/em&gt;をコンポーネントに関連付けます。パスは、テンプレート構文がビューをプログラムデータと統合するのとほぼ同じ方法で、プログラムデータを統合するURLのような構文を使用します。次に、ユーザー入力と独自のアクセスルールに応じて、プログラムロジックを適用して、表示または非表示にするビューを選択できます。</target>
        </trans-unit>
        <trans-unit id="10002cbe4fad471dff199ec10e58251721fd351d" translate="yes" xml:space="preserve">
          <source>To demonstrate the fundamentals, this example only logs to the console, &lt;code&gt;returns&lt;/code&gt; true immediately, and allows navigation to proceed:</source>
          <target state="translated">基本を示すために、この例ではコンソールにのみログを記録し、すぐにtrueを &lt;code&gt;returns&lt;/code&gt; 、ナビゲーションを続行できるようにします。</target>
        </trans-unit>
        <trans-unit id="40023445875429f2241340be247e7b7eb157f3bd" translate="yes" xml:space="preserve">
          <source>To demonstrate this process, see the &lt;code&gt;messages.fr.xlf&lt;/code&gt; file in the live example, which includes a French translation you can edit without a special XLIFF editor or knowledge of French. Follow these steps:</source>
          <target state="translated">このプロセスを示すには、ライブの例の &lt;code&gt;messages.fr.xlf&lt;/code&gt; ファイルを参照してください。このファイルには、特別なXLIFFエディターやフランス語の知識がなくても編集できるフランス語の翻訳が含まれています。次の手順を実行します：</target>
        </trans-unit>
        <trans-unit id="2e9f5fcdd9d08eaae4f6f27d8f15141de7ee4a5f" translate="yes" xml:space="preserve">
          <source>To deploy your application, you have to compile it, and then host the JavaScript, CSS, and HTML on a web server. Built Angular applications are very portable and can live in any environment or served by any technology, such as Node, Java, .NET, PHP, and many others.</source>
          <target state="translated">アプリケーションをデプロイするには、アプリケーションをコンパイルし、JavaScript、CSS、HTMLをウェブサーバーにホストする必要があります。構築されたAngularアプリケーションは非常に移植性が高く、Node、Java、.NET、PHP、その他多くの技術など、どのような環境でも、またどのような技術でも動作することができます。</target>
        </trans-unit>
        <trans-unit id="4201debf2f327ff9a5bac6e9078af7bf6115f61a" translate="yes" xml:space="preserve">
          <source>To determine an event target, Angular checks if the name of the target event matches an event property of a known directive. In the following example, Angular checks to see if &lt;code&gt;myClick&lt;/code&gt; is an event on the custom &lt;code&gt;ClickDirective&lt;/code&gt;.</source>
          <target state="translated">イベントターゲットを決定するために、Angularはターゲットイベントの名前が既知のディレクティブのイベントプロパティと一致するかどうかをチェックします。次の例では、Angularは &lt;code&gt;myClick&lt;/code&gt; がカスタム &lt;code&gt;ClickDirective&lt;/code&gt; のイベントであるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="7526788522c1b03b983dd15f77818d3fb1ce5c12" translate="yes" xml:space="preserve">
          <source>To determine if your routes are actually evaluated &lt;a href=&quot;router-tutorial-toh#routing-module-order&quot;&gt;in the proper order&lt;/a&gt;, you can inspect the router's configuration.</source>
          <target state="translated">ルートが実際に&lt;a href=&quot;router-tutorial-toh#routing-module-order&quot;&gt;適切な順序&lt;/a&gt;で評価されているかどうかを判断するには、ルーターの構成を調べます。</target>
        </trans-unit>
        <trans-unit id="458c0ad6c07671bce624449b3ec9d294dc2007ad" translate="yes" xml:space="preserve">
          <source>To determine the destination project, use the &lt;code&gt;Tree.read()&lt;/code&gt; method to read the contents of the workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, at the root of the workspace. Add the following code to your factory function.</source>
          <target state="translated">宛先プロジェクトを判別するには、 &lt;code&gt;Tree.read()&lt;/code&gt; メソッドを使用して、ワークスペースのルートにあるワークスペース構成ファイル &lt;code&gt;angular.json&lt;/code&gt; の内容を読み取ります。次のコードをファクトリー関数に追加します。</target>
        </trans-unit>
        <trans-unit id="313cab03ec9f915ef435def5627fa903faf1ec5b" translate="yes" xml:space="preserve">
          <source>To directly check the &lt;code&gt;isActive&lt;/code&gt; status of the link, assign the &lt;code&gt;&lt;a href=&quot;routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; instance to a template variable. For example, the following checks the status without assigning any CSS classes:</source>
          <target state="translated">リンクの &lt;code&gt;isActive&lt;/code&gt; ステータスを直接確認するには、 &lt;code&gt;&lt;a href=&quot;routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; インスタンスをテンプレート変数に割り当てます。たとえば、以下はCSSクラスを割り当てずにステータスをチェックします。</target>
        </trans-unit>
        <trans-unit id="41761d654e74409fdfd74499d75e57248eb90e5e" translate="yes" xml:space="preserve">
          <source>To disable a button's functionality depending on a Boolean value, bind the DOM &lt;code&gt;disabled&lt;/code&gt; property to a property in the class that is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ブール値に応じてボタンの機能を無効にするには、DOM &lt;code&gt;disabled&lt;/code&gt; プロパティをクラス内の &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; のプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="b38921f33869fd230c21c0400a6e54f928af5829" translate="yes" xml:space="preserve">
          <source>To disable all animations for an Angular app, place the &lt;code&gt;@.disabled&lt;/code&gt; host binding on the topmost Angular component.</source>
          <target state="translated">Angularアプリのすべてのアニメーションを無効にするには、 &lt;code&gt;@.disabled&lt;/code&gt; ホストバインディングを一番上のAngularコンポーネントに配置します。</target>
        </trans-unit>
        <trans-unit id="b6cdd2ec5c4ef28a335c73d42124433a61f9f09d" translate="yes" xml:space="preserve">
          <source>To display a 404 page, set up a &lt;a href=&quot;router#wildcard-route-how-to&quot;&gt;wildcard route&lt;/a&gt; with the &lt;code&gt;component&lt;/code&gt; property set to the component you'd like to use for your 404 page as follows:</source>
          <target state="translated">404ページを表示するには、次のように、 &lt;code&gt;component&lt;/code&gt; プロパティを404ページに使用するコンポーネントに設定して&lt;a href=&quot;router#wildcard-route-how-to&quot;&gt;ワイルドカードルート&lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="8d2b1d0f9febd720f6513d3ea282a6265dbf4671" translate="yes" xml:space="preserve">
          <source>To display a list of heroes, begin by adding an array of hero names to the component and redefine &lt;code&gt;myHero&lt;/code&gt; to be the first name in the array.</source>
          <target state="translated">ヒーローのリストを表示するには、最初にヒーロー名の配列をコンポーネントに追加し、 &lt;code&gt;myHero&lt;/code&gt; を再定義して配列の最初の名前にします。</target>
        </trans-unit>
        <trans-unit id="c5c321525611939ce03b07b9d1cd2adb53d24843" translate="yes" xml:space="preserve">
          <source>To display a template when &lt;code&gt;expression&lt;/code&gt; evaluates to false, use an &lt;code&gt;else&lt;/code&gt; template binding as shown in the following example. The &lt;code&gt;else&lt;/code&gt; binding points to an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element labeled &lt;code&gt;#elseBlock&lt;/code&gt;. The template can be defined anywhere in the component view, but is typically placed right after &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; for readability.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; がfalseと評価されたときにテンプレートを表示するには、次の例に示すように、 &lt;code&gt;else&lt;/code&gt; テンプレートバインディングを使用します。 &lt;code&gt;else&lt;/code&gt; の結合ポイント &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素ラベル &lt;code&gt;#elseBlock&lt;/code&gt; 。テンプレートはコンポーネントビューのどこにでも定義できますが、通常は読みやすくするために &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; の直後に配置されます。</target>
        </trans-unit>
        <trans-unit id="669f12ce6bb05c14c2a566a84471f4cc7fe90a32" translate="yes" xml:space="preserve">
          <source>To display an instance of the dynamic form, the &lt;code&gt;AppComponent&lt;/code&gt; shell template passes the &lt;code&gt;questions&lt;/code&gt; array returned by the &lt;code&gt;QuestionService&lt;/code&gt; to the form container component, &lt;code&gt;&amp;lt;app-dynamic-form&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">動的フォームのインスタンスを表示するために、 &lt;code&gt;AppComponent&lt;/code&gt; シェルテンプレートは、 &lt;code&gt;QuestionService&lt;/code&gt; によって返された &lt;code&gt;questions&lt;/code&gt; 配列をフォームコンテナコンポーネント &lt;code&gt;&amp;lt;app-dynamic-form&amp;gt;&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="f578c5cb78b9f7bd8066f62098c29394c6101150" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;HeroesComponent&lt;/code&gt;, you must add it to the template of the shell &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; を表示するには、それをシェル &lt;code&gt;AppComponent&lt;/code&gt; のテンプレートに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f6cadc05a799ae38b432205731731047b90305a" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;ProfileEditor&lt;/code&gt; component that contains the form, add it to a component template.</source>
          <target state="translated">フォームを含む &lt;code&gt;ProfileEditor&lt;/code&gt; コンポーネントを表示するには、コンポーネントテンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="903cc390eb408d1ea55af3983eda315a6832f5dc" translate="yes" xml:space="preserve">
          <source>To display the names of the products, use the interpolation syntax &lt;code&gt;{{ }}&lt;/code&gt;. Interpolation renders a property's value as text. Inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, add an &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; to display the interpolation of the product's name property:</source>
          <target state="translated">製品の名前を表示するには、補間構文 &lt;code&gt;{{ }}&lt;/code&gt; 使用します。補間は、プロパティの値をテキストとしてレンダリングします。 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 内に&amp;lt; &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; を追加して、製品のnameプロパティの補間を表示します。</target>
        </trans-unit>
        <trans-unit id="af6b8e70bc867df920c57a14286a9aca559c2d1f" translate="yes" xml:space="preserve">
          <source>To do this for &lt;code&gt;ng serve&lt;/code&gt;, create a new file, &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; next to &lt;code&gt;tsconfig.app.json&lt;/code&gt; with the following content.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; でこれを行うには、次のコンテンツを &lt;code&gt;tsconfig.app.json&lt;/code&gt; &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; 横に新しいファイルtsconfig-es5.app.jsonを作成します。</target>
        </trans-unit>
        <trans-unit id="2d79d0bb78f9158b8f6b014230ea7d15c1b601c1" translate="yes" xml:space="preserve">
          <source>To do this, list the more specific transitions &lt;em&gt;before&lt;/em&gt;&lt;code&gt;* =&amp;gt; *&lt;/code&gt;.</source>
          <target state="translated">これを行うには、 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; &lt;em&gt;前に&lt;/em&gt;、より具体的な遷移をリストします。</target>
        </trans-unit>
        <trans-unit id="4af7f031db75e121d1590f04ee2af53757ce04c5" translate="yes" xml:space="preserve">
          <source>To do this, you'll use the Angular &lt;em&gt;router&lt;/em&gt;. The Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;router&lt;/a&gt; enables you to show different components and data to the user based on where the user is in the application. The router enables navigation from one view to the next as users perform application tasks:</source>
          <target state="translated">これを行うには、Angular &lt;em&gt;ルーターを&lt;/em&gt;使用し&lt;em&gt;ます&lt;/em&gt;。Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;ルーターを&lt;/a&gt;使用すると、ユーザーがアプリケーションのどこにいるかに基づいて、さまざまなコンポーネントやデータをユーザーに表示できます。ルーターは、ユーザーがアプリケーションタスクを実行するときに、あるビューから次のビューへのナビゲーションを可能にします。</target>
        </trans-unit>
        <trans-unit id="462723dd18c6bb21a7972312a3381bc47bf03529" translate="yes" xml:space="preserve">
          <source>To eliminate the risk of script injection attacks, Angular does not support the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element in templates. Angular ignores the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag and outputs a warning to the browser console. For more information, see the &lt;a href=&quot;security&quot;&gt;Security&lt;/a&gt; page.</source>
          <target state="translated">スクリプトインジェクション攻撃のリスクを排除するために、Angularはテンプレートの &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素をサポートしていません。Angularは &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを無視し、ブラウザコンソールに警告を出力します。詳細については、&lt;a href=&quot;security&quot;&gt;セキュリティ&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="27f743a355485c0e33e11f9f5aa2b4630220a267" translate="yes" xml:space="preserve">
          <source>To enable preloading of all lazy loaded modules, import the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token from the Angular &lt;code&gt;router&lt;/code&gt;.</source>
          <target state="translated">遅延ロードされたすべてのモジュールのプリロードを有効にするには、Angular &lt;code&gt;router&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; トークンをインポートします。</target>
        </trans-unit>
        <trans-unit id="94dcbf1537099a8d72c6a9756d09210df8ae8156" translate="yes" xml:space="preserve">
          <source>To enable preloading of all lazy loaded modules, import the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token from the Angular router package.</source>
          <target state="translated">すべての遅延読み込みモジュールの &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 読み込みを有効にするには、AngularルーターパッケージからPreloadAllModulesトークンをインポートします。</target>
        </trans-unit>
        <trans-unit id="7fc710364e3b588a30c9d0c74118b2c885102b0a" translate="yes" xml:space="preserve">
          <source>To enable routing transition animation, do the following:</source>
          <target state="translated">ルーティングのトランジションアニメーションを有効にするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="25d5eb1605457fea82578b3d288b0d9a7ae3a8f5" translate="yes" xml:space="preserve">
          <source>To ensure a high-quality, consistent experience for Angular documentation users.</source>
          <target state="translated">Angularのドキュメントユーザーに高品質で一貫した体験を提供するために。</target>
        </trans-unit>
        <trans-unit id="b0bf35c98e00c5fabe6d7d695facb2ff6dcd71c2" translate="yes" xml:space="preserve">
          <source>To ensure any necessary teardown is triggered in the AngularJS app, such as removal of global listeners, you also implement a method to call the &lt;code&gt;$rootScope.destroy()&lt;/code&gt; method.</source>
          <target state="translated">グローバルリスナーの削除など、AngularJSアプリで必要なティアダウンがトリガーされるようにするには、 &lt;code&gt;$rootScope.destroy()&lt;/code&gt; メソッドを呼び出すメソッドも実装します。</target>
        </trans-unit>
        <trans-unit id="ebde52584fea72d72602dc3407e717b85e61cb56" translate="yes" xml:space="preserve">
          <source>To ensure resource integrity, the Angular service worker validates the hashes of all resources for which it has a hash. Typically for an app created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, this is everything in the &lt;code&gt;dist&lt;/code&gt; directory covered by the user's &lt;code&gt;src/ngsw-config.json&lt;/code&gt; configuration.</source>
          <target state="translated">リソースの整合性を確保するために、Angularサービスワーカーは、ハッシュがあるすべてのリソースのハッシュを検証します。通常、&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;で作成されたアプリの場合、これはユーザーの &lt;code&gt;src/ngsw-config.json&lt;/code&gt; 設定でカバーされる &lt;code&gt;dist&lt;/code&gt; ディレクトリ内のすべてです。</target>
        </trans-unit>
        <trans-unit id="36a2f26d071a65a5067d8e3435ef41b66818020c" translate="yes" xml:space="preserve">
          <source>To ensure that clients can only download the files that they are permitted to see, put all client-facing asset files in the &lt;code&gt;/dist&lt;/code&gt; folder and only honor requests for files from the &lt;code&gt;/dist&lt;/code&gt; folder.</source>
          <target state="translated">クライアントが表示を許可されたファイルのみをダウンロードできるようにするには、クライアント向けアセットファイルをすべて &lt;code&gt;/dist&lt;/code&gt; フォルダーに入れ、/ distフォルダーからのファイルのリクエストのみを &lt;code&gt;/dist&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d8598c2022602203d9603274200d342e1eb538fb" translate="yes" xml:space="preserve">
          <source>To ensure that the compiler still generates a factory, add dynamically loaded components to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;entryComponents&lt;/code&gt; array:</source>
          <target state="translated">コンパイラが引き続きファクトリを生成するようにするには、動的にロードされたコンポーネントを &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;entryComponents&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="d0535fc908a0485c86f26dadecdbe952a4ab9d56" translate="yes" xml:space="preserve">
          <source>To ensure valid input, the &lt;em&gt;Save&lt;/em&gt; button is disabled until the form is in a valid state. When the form is valid, you can click &lt;em&gt;Save&lt;/em&gt; and the app renders the current form values as JSON.</source>
          <target state="translated">有効な入力を保証するために、フォームが有効な状態になるまで[&lt;em&gt;保存&lt;/em&gt;]ボタンは無効になっています。フォームが有効な場合は、[&lt;em&gt;保存&lt;/em&gt;]をクリックすると、アプリは現在のフォーム値をJSONとしてレンダリングします。</target>
        </trans-unit>
        <trans-unit id="5341b76777b2db5c8a206eb43f77809a3f9644fa" translate="yes" xml:space="preserve">
          <source>To ensure we provide a future-proof e2e testing strategy, we want to evaluate the state of Protractor, community innovations, e2e best practices, and explore novel opportunities.</source>
          <target state="translated">将来性のあるe2eテスト戦略を確実に提供するために、Protractorの状態、コミュニティのイノベーション、e2eのベストプラクティスを評価し、新しい機会を模索したいと考えています。</target>
        </trans-unit>
        <trans-unit id="2fa6772fab08a7737c141a27ae0a4cca92769842" translate="yes" xml:space="preserve">
          <source>To examine the behavior the &lt;code&gt;exponentialStrength&lt;/code&gt; pipe in the live example, change the value and optional exponent in the template.</source>
          <target state="translated">ライブの例で &lt;code&gt;exponentialStrength&lt;/code&gt; パイプの動作を調べるには、テンプレートの値とオプションの指数を変更します。</target>
        </trans-unit>
        <trans-unit id="e1812e3ae723bb35d7649d2ff5479140c8c70d2c" translate="yes" xml:space="preserve">
          <source>To exclude a heading from the TOC, create the heading as an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; element with a class called 'no-toc'. You can't do this with markdown.</source>
          <target state="translated">TOCから見出しを除外するには、「no-toc」というクラスを持つ &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 要素として見出しを作成します。マークダウンではこれを行うことはできません。</target>
        </trans-unit>
        <trans-unit id="ec903eae4634b565ecbfd272a77568b1f130ca3e" translate="yes" xml:space="preserve">
          <source>To exclude an asset, you can remove it from the assets configuration.</source>
          <target state="translated">アセットを除外するには、アセット設定から削除します。</target>
        </trans-unit>
        <trans-unit id="cad3973c3b976211274db1f3473682b5a50d206c" translate="yes" xml:space="preserve">
          <source>To execute a custom pipe after a change &lt;em&gt;within&lt;/em&gt; a composite object, such as a change to an element of an array, you need to define your pipe as &lt;code&gt;impure&lt;/code&gt; to detect impure changes. Angular executes an impure pipe every time it detects a change with every keystroke or mouse movement.</source>
          <target state="translated">配列の要素の変更など、複合オブジェクト&lt;em&gt;内&lt;/em&gt;の変更後にカスタムパイプを実行するには、パイプを &lt;code&gt;impure&lt;/code&gt; として定義して、不純な変更を検出する必要があります。Angularは、キーストロークやマウスの動きごとに変化を検出するたびに、不純なパイプを実行します。</target>
        </trans-unit>
        <trans-unit id="f9e07f2c5513c75b8f79d6963b277e9fbd52a303" translate="yes" xml:space="preserve">
          <source>To execute the observable you have created and begin receiving notifications, you call its &lt;code&gt;subscribe()&lt;/code&gt; method, passing an &lt;em&gt;observer&lt;/em&gt;. This is a JavaScript object that defines the handlers for the notifications you receive. The &lt;code&gt;subscribe()&lt;/code&gt; call returns a &lt;code&gt;Subscription&lt;/code&gt; object that has an &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method, which you call to stop receiving notifications.</source>
          <target state="translated">作成したオブザーバブルを実行して通知の受信を開始するには、その &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出して、&lt;em&gt;オブザーバー&lt;/em&gt;を渡します。これは、受け取る通知のハンドラーを定義するJavaScriptオブジェクトです。 &lt;code&gt;subscribe()&lt;/code&gt; 呼び出しが戻る &lt;code&gt;Subscription&lt;/code&gt; 持つオブジェクト &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; あなたは、通知の受信を停止するために呼び出すメソッドを、。</target>
        </trans-unit>
        <trans-unit id="356b5604560e672278283aae6d2ec44a60e2429e" translate="yes" xml:space="preserve">
          <source>To execute the observable you have created and begin receiving notifications, you call its &lt;code&gt;subscribe()&lt;/code&gt; method, passing an &lt;em&gt;observer&lt;/em&gt;. This is a JavaScript object that defines the handlers for the notifications you receive. The &lt;code&gt;subscribe()&lt;/code&gt; call returns a &lt;code&gt;Subscription&lt;/code&gt; object that has an &lt;code&gt;unsubscribe()&lt;/code&gt; method, which you call to stop receiving notifications.</source>
          <target state="translated">あなたが作成した、観察を実行し、通知の受信を開始するには、その呼び出し &lt;code&gt;subscribe()&lt;/code&gt; 渡して、メソッドを&lt;em&gt;オブザーバを&lt;/em&gt;。これは、受信する通知のハンドラーを定義するJavaScriptオブジェクトです。 &lt;code&gt;subscribe()&lt;/code&gt; 呼び出しが戻る &lt;code&gt;Subscription&lt;/code&gt; 持つオブジェクト &lt;code&gt;unsubscribe()&lt;/code&gt; あなたは、通知の受信を停止するために呼び出すメソッドを、。</target>
        </trans-unit>
        <trans-unit id="4a6f3f5c4289042742ca02c090211b9822454c2a" translate="yes" xml:space="preserve">
          <source>To explicitly disable differential loading:</source>
          <target state="translated">差動読み込みを明示的に無効にするには</target>
        </trans-unit>
        <trans-unit id="c66429caa018853399016d678c69e32103c0616f" translate="yes" xml:space="preserve">
          <source>To explore a sample app featuring the contents of this tutorial, see the live example.</source>
          <target state="translated">このチュートリアルの内容を含むサンプルアプリを探索するには、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="81d467376c8d2e625edaf1979b30099e1e3ad196" translate="yes" xml:space="preserve">
          <source>To explore a sample app featuring the router's primary features, see the live example.</source>
          <target state="translated">ルータの主な機能を備えたサンプルアプリを探索するには、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="c60b05b765b9ca18fef5f1daddab57e723714e9c" translate="yes" xml:space="preserve">
          <source>To explore the sample app with French translations used in this guide, see the live example.</source>
          <target state="translated">このガイドで使用されているフランス語翻訳のサンプルアプリを探索するには、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="f487b5662ecb9aaad77bb986779347784a9a61bb" translate="yes" xml:space="preserve">
          <source>To extract the source language file, open a terminal window, change to the root directory of your app project, and run the following CLI command:</source>
          <target state="translated">ソース言語ファイルを展開するには、ターミナルウィンドウを開き、アプリプロジェクトのルートディレクトリに変更し、以下のCLIコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="2eaffe5848d2ff0020839a1c2ce2f8e1600c6b16" translate="yes" xml:space="preserve">
          <source>To fetch this kind of data, the &lt;code&gt;get()&lt;/code&gt; call needs the following options: &lt;code&gt;{observe: 'body', responseType: 'json'}&lt;/code&gt;. These are the default values for those options, so the following examples do not pass the options object. Later sections show some of the additional option possibilities.</source>
          <target state="translated">この種のデータをフェッチするには、 &lt;code&gt;get()&lt;/code&gt; 呼び出しに次のオプションが必要です： &lt;code&gt;{observe: 'body', responseType: 'json'}&lt;/code&gt; 。これらはこれらのオプションのデフォルト値であるため、次の例ではオプションオブジェクトを渡しません。後のセクションでは、追加のオプションの可能性のいくつかを示します。</target>
        </trans-unit>
        <trans-unit id="dc86ffb91970ba4ea3d784fdcfa4a20106112fb8" translate="yes" xml:space="preserve">
          <source>To filter output in AngularJS templates, use the pipe character (|) and one or more filters.</source>
          <target state="translated">AngularJSテンプレートで出力をフィルタリングするには、パイプ文字(|)と1つ以上のフィルタを使用します。</target>
        </trans-unit>
        <trans-unit id="154ce8f40b436ba677325298e54443b2e23530f6" translate="yes" xml:space="preserve">
          <source>To fix that, create an array with the new hero appended and assign that to &lt;code&gt;heroes&lt;/code&gt;. This time Angular detects that the array reference has changed. It executes the pipe and updates the display with the new array, which includes the new flying hero.</source>
          <target state="translated">これを修正するには、新しいヒーローが追加された配列を作成し、それを &lt;code&gt;heroes&lt;/code&gt; に割り当てます。今回、Angularは配列参照が変更されたことを検出します。パイプを実行し、新しい配列で表示を更新します。これには、新しい空飛ぶヒーローが含まれています。</target>
        </trans-unit>
        <trans-unit id="56cf754ee3e7dca1fe9c44b4816cf790a119fb8c" translate="yes" xml:space="preserve">
          <source>To fix this issue, listen to both the &lt;em&gt;Enter&lt;/em&gt; key and the &lt;em&gt;blur&lt;/em&gt; event.</source>
          <target state="translated">この問題を修正するには、&lt;em&gt;Enter&lt;/em&gt;キーと&lt;em&gt;ぼかし&lt;/em&gt;イベントの両方をリッスンします。</target>
        </trans-unit>
        <trans-unit id="e9a98e7a3d9bcee4fcb0d76fe1f136af14b9717f" translate="yes" xml:space="preserve">
          <source>To flush the first quote from the observable, you call &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt;. Then call &lt;code&gt;detectChanges()&lt;/code&gt; to tell Angular to update the screen.</source>
          <target state="translated">オブザーバブルから最初の引用符をフラッシュするには、&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick（）&lt;/a&gt;を呼び出します。次に、 &lt;code&gt;detectChanges()&lt;/code&gt; を呼び出して、Angularに画面を更新するように指示します。</target>
        </trans-unit>
        <trans-unit id="ba34c5be9ff1d603c4140d7b3f5b608439a0b39b" translate="yes" xml:space="preserve">
          <source>To flush the first quote from the observable, you call &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;. Then call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to tell Angular to update the screen.</source>
          <target state="translated">オブザーバブルから最初の引用をフラッシュするには、 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; を呼び出します。次に、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; を呼び出して、画面を更新するようにAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="fc7ba23765221be6372d0b33a6a7c1abada5cdf3" translate="yes" xml:space="preserve">
          <source>To follow along with the tutorial, clone the &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt; repository and apply the steps as you go.</source>
          <target state="translated">チュートリアルを進めるには、&lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt;リポジトリのクローンを作成し、必要に応じて手順を適用します。</target>
        </trans-unit>
        <trans-unit id="50c790d75defb0a4ec3aa8c5265b6f9346b5307e" translate="yes" xml:space="preserve">
          <source>To follow this pattern, import the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper with the other testing symbols.</source>
          <target state="translated">このパターンに従うには、他のテストシンボルと共に &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ヘルパーをインポートします。</target>
        </trans-unit>
        <trans-unit id="9b1af402c6293628864632c2a47eafb2c2205f1f" translate="yes" xml:space="preserve">
          <source>To follow this pattern, import the &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; helper with the other testing symbols.</source>
          <target state="translated">このパターンに従うには、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; ヘルパーを他のテストシンボルとともにインポートします。</target>
        </trans-unit>
        <trans-unit id="197fa7f05797899c6180d16a0f754704e2a3ef11" translate="yes" xml:space="preserve">
          <source>To gather the user's name and address, set the &lt;code&gt;checkoutForm&lt;/code&gt; property with a form model containing &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; fields, using the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt;&lt;code&gt;group()&lt;/code&gt; method. Add this between the curly braces, &lt;code&gt;{}&lt;/code&gt;, of the constructor.</source>
          <target state="translated">ユーザーの名前と住所を収集するには、 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; &lt;code&gt;group()&lt;/code&gt; メソッドを使用して、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; フィールドを含むフォームモデルで &lt;code&gt;checkoutForm&lt;/code&gt; プロパティを設定します。コンストラクターの中括弧 &lt;code&gt;{}&lt;/code&gt; の間にこれを追加します。</target>
        </trans-unit>
        <trans-unit id="cf9ff0efb094b48a98c3e1a083320941ab68e37d" translate="yes" xml:space="preserve">
          <source>To generate a cart service, right click on the &lt;code&gt;app&lt;/code&gt; folder, choose &lt;code&gt;Angular Generator&lt;/code&gt;, and choose &lt;code&gt;Service&lt;/code&gt;. Name the new service &lt;code&gt;cart&lt;/code&gt;.</source>
          <target state="translated">カートサービスを生成するには、 &lt;code&gt;app&lt;/code&gt; フォルダーを右クリックし、[ &lt;code&gt;Angular Generator&lt;/code&gt; ]を選択して、[サービス]を選択し &lt;code&gt;Service&lt;/code&gt; 。新しいサービス &lt;code&gt;cart&lt;/code&gt; 名前を付けます。</target>
        </trans-unit>
        <trans-unit id="0e9bedad15ebc538d9e68cbdd28af270587693f3" translate="yes" xml:space="preserve">
          <source>To generate a coverage report run the following command in the root of your project.</source>
          <target state="translated">カバレッジレポートを生成するには、プロジェクトのルートで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="abf26b47cd0c5e68c8c79d0daf2df1036fa78b7a" translate="yes" xml:space="preserve">
          <source>To generate a new random user ID, run the following command:</source>
          <target state="translated">新しいランダムユーザーIDを生成するには、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8acafccdcb332ce70715cbf29a3839a0c89102b8" translate="yes" xml:space="preserve">
          <source>To get &lt;code&gt;Node.js&lt;/code&gt;, go to &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Node.js&lt;/code&gt; を取得するには、&lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.orgにアクセスし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4764c56a7c4aaf167d80ff03108babf2926d5ad6" translate="yes" xml:space="preserve">
          <source>To get access to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; and the overall form status, declare a &lt;a href=&quot;template-reference-variables&quot;&gt;template reference variable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; とフォーム全体のステータスにアクセスするには、&lt;a href=&quot;template-reference-variables&quot;&gt;テンプレート参照変数を&lt;/a&gt;宣言します。</target>
        </trans-unit>
        <trans-unit id="0e9f4a06c6902eaaa4816e3c94cc563103857fe3" translate="yes" xml:space="preserve">
          <source>To get around this problem you can use TypeScript path mapping to tell TypeScript that it should load some modules from a specific location. List all the peer dependencies that your library uses in the workspace TypeScript configuration file &lt;code&gt;./tsconfig.json&lt;/code&gt;, and point them at the local copy in the app's &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">この問題を回避するには、TypeScriptパスマッピングを使用して、特定の場所からモジュールをロードする必要があることをTypeScriptに通知します。ライブラリが使用するすべてのピア依存関係をワークスペースTypeScript構成ファイル &lt;code&gt;./tsconfig.json&lt;/code&gt; にリストし、アプリの &lt;code&gt;node_modules&lt;/code&gt; フォルダーのローカルコピーをポイントします。</target>
        </trans-unit>
        <trans-unit id="43487c0abf05865bdae999a7256422a42f15d57c" translate="yes" xml:space="preserve">
          <source>To get information from a route:</source>
          <target state="translated">ルートから情報を得るために</target>
        </trans-unit>
        <trans-unit id="c620c03d023234ed2391242307f1d8712d8a8439" translate="yes" xml:space="preserve">
          <source>To get started with adding Angular animations to your project, import the animation-specific modules along with standard Angular functionality.</source>
          <target state="translated">Angularアニメーションをプロジェクトに追加するには、Angularの標準機能に加えて、アニメーションに特化したモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="26d943fe23a3c998bd39d5a7b1693dbae57fe95c" translate="yes" xml:space="preserve">
          <source>To get the most out of property binding, you should be familiar with the following:</source>
          <target state="translated">プロパティバインディングを最大限に活用するためには、以下のことに精通している必要があります。</target>
        </trans-unit>
        <trans-unit id="57b307d0cc30742af6af1ff6a8b0c84e051d00eb" translate="yes" xml:space="preserve">
          <source>To get the most out of two-way binding, you should have a basic understanding of the following concepts:</source>
          <target state="translated">双方向バインディングを最大限に活用するためには、以下の概念を基本的に理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="a92da86b8670ce6226a30d95533e45b223dd6bc1" translate="yes" xml:space="preserve">
          <source>To give users a way to open the popup, add a &quot;Contact&quot; link to the &lt;code&gt;AppComponent&lt;/code&gt; template.</source>
          <target state="translated">ユーザーにポップアップを開く方法を提供するには、 &lt;code&gt;AppComponent&lt;/code&gt; テンプレートに「連絡先」リンクを追加します。</target>
        </trans-unit>
        <trans-unit id="ebaa7cffbaaeda8aa8e693d01a32822b130caded" translate="yes" xml:space="preserve">
          <source>To group the &lt;code&gt;Crisis Center&lt;/code&gt; management routes under the &lt;code&gt;admin&lt;/code&gt; path a component is unnecessary. Additionally, a &lt;em&gt;component-less&lt;/em&gt; route makes it easier to &lt;a href=&quot;router-tutorial-toh#can-activate-child-guard&quot;&gt;guard child routes&lt;/a&gt;.</source>
          <target state="translated">グループへの &lt;code&gt;Crisis Center&lt;/code&gt; 下の管理ルート &lt;code&gt;admin&lt;/code&gt; パスコンポーネントは不要です。さらに、&lt;em&gt;コンポーネントのない&lt;/em&gt;ルートを使用すると、&lt;a href=&quot;router-tutorial-toh#can-activate-child-guard&quot;&gt;子ルートの保護が&lt;/a&gt;容易になります。</target>
        </trans-unit>
        <trans-unit id="22605a20b1a22f239c1e3107167d2597f5c39ded" translate="yes" xml:space="preserve">
          <source>To guard against a lazy loaded module re-importing &lt;code&gt;GreetingModule&lt;/code&gt;, add the following &lt;code&gt;GreetingModule&lt;/code&gt; constructor.</source>
          <target state="translated">遅延ロードされたモジュールが &lt;code&gt;GreetingModule&lt;/code&gt; を再インポートしないようにするには、次の &lt;code&gt;GreetingModule&lt;/code&gt; コンストラクターを追加します。</target>
        </trans-unit>
        <trans-unit id="77ca585f495413c83c85661daa403686e9bd57f1" translate="yes" xml:space="preserve">
          <source>To guard against minification problems, tell Angular explicitly that it should inject an instance of the &lt;code&gt;MovieService&lt;/code&gt; in the first parameter.</source>
          <target state="translated">縮小の問題を &lt;code&gt;MovieService&lt;/code&gt; は、最初のパラメーターにMovieServiceのインスタンスを挿入する必要があることをAngularに明示的に伝えます。</target>
        </trans-unit>
        <trans-unit id="46e1437a434c141916bb48f0aca2a8131e3b48d1" translate="yes" xml:space="preserve">
          <source>To handle the navigation from one &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt; to the next, you use the Angular &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;. The &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; enables navigation by interpreting a browser URL as an instruction to change the view.</source>
          <target state="translated">1からのナビゲーションを処理するために&lt;a href=&quot;glossary#view&quot;&gt;ビュー&lt;/a&gt;の横に、あなたは角度使い&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;。&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;ビューを変更する指示として、ブラウザのURLを解釈することによって、ナビゲーションを可能にします。</target>
        </trans-unit>
        <trans-unit id="0483a13b68a98141b413a5592409e590323ff6ac" translate="yes" xml:space="preserve">
          <source>To help determine whether your proxy is working as intended, set the &lt;code&gt;logLevel&lt;/code&gt; option. For example:</source>
          <target state="translated">プロキシが意図したとおりに機能しているかどうかを判断するには、 &lt;code&gt;logLevel&lt;/code&gt; オプションを設定します。例えば：</target>
        </trans-unit>
        <trans-unit id="ef7a832a2ae76c1a243ec1b9f05e550953889fdf" translate="yes" xml:space="preserve">
          <source>To help ensure that you have sufficient time and a clear path to update, this is our deprecation policy:</source>
          <target state="translated">十分な時間を確保し、更新までの道筋を明確にするために、これが私たちの非推奨ポリシーです。</target>
        </trans-unit>
        <trans-unit id="b18eb17f8c80dcf33ac422b8959463f27ab98a1d" translate="yes" xml:space="preserve">
          <source>To help you future-proof your apps, the following table lists all deprecated APIs and features, organized by the release in which they are candidates for removal. Each item is linked to the section later in this guide that describes the deprecation reason and replacement options.</source>
          <target state="translated">アプリの将来性を考慮して、以下の表に非推奨のすべての API と機能をリストアップし、削除の候補となるリリースごとに整理しました。各項目は、このガイドの後のセクションにリンクされており、非推奨となった理由と代替オプションについて説明しています。</target>
        </trans-unit>
        <trans-unit id="d5b3bbad8bfc4eb6cea8091361ccfc84c96c7368" translate="yes" xml:space="preserve">
          <source>To help you get going, the following steps use predefined product data and methods from the &lt;code&gt;product-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;product-list.component.ts&lt;/code&gt; ために、次の手順では、product-list.component.tsファイルから事前定義された製品データとメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="c859073c02740773e64bc37041c26a933e4411f1" translate="yes" xml:space="preserve">
          <source>To help you get going, the following steps use predefined product data from the &lt;code&gt;products.ts&lt;/code&gt; file (already created in StackBlitz example) and methods from the &lt;code&gt;product-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">作業を開始しやすくするために、次の手順では、 &lt;code&gt;products.ts&lt;/code&gt; ファイル（StackBlitzの例ですでに作成されています）の事前定義された製品データと、 &lt;code&gt;product-list.component.ts&lt;/code&gt; ファイルのメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="60c4d75becc591cb9eeb0c81e6b707b5eb0eb96a" translate="yes" xml:space="preserve">
          <source>To host an Angular app on another web host, upload or send the files to the host. Because you are building a single page application, you'll also need to make sure you redirect any invalid URLs to your &lt;code&gt;index.html&lt;/code&gt; file. Read more about development and distribution of your application in the &lt;a href=&quot;../guide/build&quot;&gt;Building &amp;amp; Serving&lt;/a&gt; and &lt;a href=&quot;../guide/deployment&quot;&gt;Deployment&lt;/a&gt; guides.</source>
          <target state="translated">別のウェブホストでAngularアプリをホストするには、ファイルをホストにアップロードまたは送信します。シングルページアプリケーションを構築しているため、無効なURLを &lt;code&gt;index.html&lt;/code&gt; ファイルにリダイレクトすることも確認する必要があります。でアプリケーションの開発と配布についてもっと読む&lt;a href=&quot;../guide/build&quot;&gt;ビル＆サービング&lt;/a&gt;および&lt;a href=&quot;../guide/deployment&quot;&gt;展開&lt;/a&gt;ガイド。</target>
        </trans-unit>
        <trans-unit id="e3fe5b2a2bd58ed1b8655045a4030a46a226b4e3" translate="yes" xml:space="preserve">
          <source>To host an Angular app on another web host, you'll need to upload or send the files to the host. Because you are building a Single Page Application, you'll also need to make sure you redirect any invalid URLs to your &lt;code&gt;index.html&lt;/code&gt; file. Learn more about development and distribution of your application in the &lt;a href=&quot;../guide/build&quot;&gt;Building &amp;amp; Serving&lt;/a&gt; and &lt;a href=&quot;../guide/deployment&quot;&gt;Deployment&lt;/a&gt; guides.</source>
          <target state="translated">Angularアプリを別のWebホストでホストするには、ファイルをホストにアップロードまたは送信する必要があります。単一ページアプリケーションを構築しているため、無効なURLを &lt;code&gt;index.html&lt;/code&gt; ファイルにリダイレクトすることも確認する必要があります。アプリケーションの開発と配布の詳細については、&lt;a href=&quot;../guide/build&quot;&gt;ビルドと検索&lt;/a&gt;、&lt;a href=&quot;../guide/deployment&quot;&gt;デプロイの&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ab9bc2d71d7adce3b0a0d3e7dbb746f60c48f829" translate="yes" xml:space="preserve">
          <source>To identify specific &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags in a document, use an attribute selection string in the format &lt;code&gt;&quot;tag_attribute='value string'&quot;&lt;/code&gt;. For example, an &lt;code&gt;attrSelector&lt;/code&gt; value of &lt;code&gt;&quot;name='description'&quot;&lt;/code&gt; matches a tag whose &lt;code&gt;name&lt;/code&gt; attribute has the value &lt;code&gt;&quot;description&quot;&lt;/code&gt;. Selectors are used with the &lt;code&gt;querySelector()&lt;/code&gt; Document method, in the format &lt;code&gt;meta[{attrSelector}]&lt;/code&gt;.</source>
          <target state="translated">ドキュメント内の特定の &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; タグを識別するには、 &lt;code&gt;&quot;tag_attribute='value string'&quot;&lt;/code&gt; の形式の属性選択文字列を使用します。たとえば、 &lt;code&gt;attrSelector&lt;/code&gt; の値が &lt;code&gt;&quot;name='description'&quot;&lt;/code&gt; の場合、 &lt;code&gt;name&lt;/code&gt; 属性の値が &lt;code&gt;&quot;description&quot;&lt;/code&gt; タグと一致します。セレクターは、 &lt;code&gt;querySelector()&lt;/code&gt; Documentメソッドで &lt;code&gt;meta[{attrSelector}]&lt;/code&gt; 形式で使用されます。</target>
        </trans-unit>
        <trans-unit id="5f77fdab586f868e4093851acfc1533b76f62e25" translate="yes" xml:space="preserve">
          <source>To illustrate the use of &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, edit these parts of your app:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 使い方を説明するために、アプリの次の部分を編集します。</target>
        </trans-unit>
        <trans-unit id="1fbb1f454bb7d2e047050e16a5b5adac1e15336c" translate="yes" xml:space="preserve">
          <source>To illustrate, here's a simplified version of &lt;code&gt;HighlightDirective&lt;/code&gt; from the &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; page.</source>
          <target state="translated">説明のために、&lt;a href=&quot;attribute-directives&quot;&gt;属性ディレクティブ&lt;/a&gt;ページの &lt;code&gt;HighlightDirective&lt;/code&gt; の簡略版を以下に示します。</target>
        </trans-unit>
        <trans-unit id="d9242c7bce3b2639f0867ea3c0827c2fa3fcc014" translate="yes" xml:space="preserve">
          <source>To implement an interceptor, declare a class that implements the &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">インターセプターを実装するには、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; インターフェースの &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; メソッドを実装するクラスを宣言します。</target>
        </trans-unit>
        <trans-unit id="a071c1a6b28b453628fc442e9aeef0402d6cb684" translate="yes" xml:space="preserve">
          <source>To implement an interceptor, declare a class that implements the &lt;code&gt;intercept()&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">インターセプターを実装するには、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; インターフェースの &lt;code&gt;intercept()&lt;/code&gt; メソッドを実装するクラスを宣言します。</target>
        </trans-unit>
        <trans-unit id="aaf041b7e55b65dac1febf1331ff581b95a32993" translate="yes" xml:space="preserve">
          <source>To implement this functionality, you add the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; directive to your template file.</source>
          <target state="translated">この機能を実装するには、 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; ディレクティブをテンプレートファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="8c15de700229692f85f74f661ebecee10ce1edfa" translate="yes" xml:space="preserve">
          <source>To improve test time and create better isolation across tests, we want to change &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to automatically clean up and tear down the test environment after each test run.</source>
          <target state="translated">テスト時間を改善し、テスト間の分離を向上させるために、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を変更して、各テストの実行後にテスト環境を自動的にクリーンアップおよび破棄するようにします。</target>
        </trans-unit>
        <trans-unit id="031feed43cdb2009f3a0aad5253d852e4c762600" translate="yes" xml:space="preserve">
          <source>To improve this behavior, you can pre-fetch data from the server using a resolver so it's ready the moment the route is activated. This also allows you to handle errors before routing to the component. There's no point in navigating to a crisis detail for an &lt;code&gt;id&lt;/code&gt; that doesn't have a record. It'd be better to send the user back to the &lt;code&gt;Crisis List&lt;/code&gt; that shows only valid crisis centers.</source>
          <target state="translated">この動作を改善するために、リゾルバーを使用してサーバーからデータをプリフェッチして、ルートがアクティブ化された瞬間に準備ができるようにすることができます。これにより、コンポーネントにルーティングする前にエラーを処理することもできます。レコードのない &lt;code&gt;id&lt;/code&gt; 危機の詳細に移動しても意味がありません。有効な危機センターのみを表示する &lt;code&gt;Crisis List&lt;/code&gt; ユーザーを送り返すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="30714f1570102a913e81e387a8e99413184d357d" translate="yes" xml:space="preserve">
          <source>To include differential loading in your application builds, you must configure the Browserslist and TypeScript configuration files in your application project.</source>
          <target state="translated">アプリケーションのビルドに差分読み込みを含めるには、アプリケーションプロジェクトで Browserslist と TypeScript の設定ファイルを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="69b60d346fb92f51499356b42a9f5d8d37258d56" translate="yes" xml:space="preserve">
          <source>To include the new component, use its selector, &lt;code&gt;app-product-alert&lt;/code&gt;, as you would an HTML element.</source>
          <target state="translated">新しいコンポーネントを含めるには、HTML要素と同じように、セレクター &lt;code&gt;app-product-alert&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="34af0a1fd16c117a7822f3048b578ce3d82ba1e5" translate="yes" xml:space="preserve">
          <source>To include the new component, use its selector, &lt;code&gt;app-product-alerts&lt;/code&gt;, as you would an HTML element.</source>
          <target state="translated">新しいコンポーネントを含めるには、HTML要素と同じように、そのセレクターである &lt;code&gt;app-product-alerts&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="835dfd12477d853747c300147b3c559302e5eeff" translate="yes" xml:space="preserve">
          <source>To incorporate the feature module into your app, you have to let the root module, &lt;code&gt;app.module.ts&lt;/code&gt;, know about it. Notice the &lt;code&gt;CustomerDashboardModule&lt;/code&gt; export at the bottom of &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;. This exposes it so that other modules can get to it. To import it into the &lt;code&gt;AppModule&lt;/code&gt;, add it to the imports in &lt;code&gt;app.module.ts&lt;/code&gt; and to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">フィーチャーモジュールをアプリに組み込むには、ルートモジュールである &lt;code&gt;app.module.ts&lt;/code&gt; にそれを知らせる必要があります。 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; の下部にある &lt;code&gt;CustomerDashboardModule&lt;/code&gt; エクスポートに注目してください。これにより、他のモジュールがアクセスできるように公開されます。インポートするには &lt;code&gt;AppModule&lt;/code&gt; 、中輸入に追加 &lt;code&gt;app.module.ts&lt;/code&gt; とに &lt;code&gt;imports&lt;/code&gt; 配列：</target>
        </trans-unit>
        <trans-unit id="4cfd9eacc73fc98af1d6ddaad6c557a00c462594" translate="yes" xml:space="preserve">
          <source>To inspect the properties of the associated &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; (like the validity state), export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;). You can then access the control using the directive's &lt;code&gt;control&lt;/code&gt; property. However, the most commonly used properties (like &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt;) also exist on the control for direct access. See a full list of properties directly available in &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関連する &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のプロパティ（有効性の状態など）を検査するには、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; をキーとして使用してディレクティブをローカルテンプレート変数にエクスポートします（例： &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; = &quot; ngModel &quot;）。その後、ディレクティブの &lt;code&gt;control&lt;/code&gt; プロパティを使用してコントロールにアクセスできます。ただし、最も一般的に使用されるプロパティ（ &lt;code&gt;valid&lt;/code&gt; や &lt;code&gt;dirty&lt;/code&gt; など）は、直接アクセス用のコントロールにも存在します。 &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; で直接利用できるプロパティの完全なリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="7d1f76b24bcf5a077b04779a10d2acb122df684c" translate="yes" xml:space="preserve">
          <source>To inspect the properties of the associated &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; (like validity state), export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;). You then access the control using the directive's &lt;code&gt;control&lt;/code&gt; property, but most properties used (like &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt;) fall through to the control anyway for direct access. See a full list of properties directly available in &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関連する &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のプロパティ（有効性の状態など）を検査するには、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; をキーとして使用して、ディレクティブをローカルテンプレート変数にエクスポートします（例： &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; = &quot; ngModel &quot;）。次に、ディレクティブの &lt;code&gt;control&lt;/code&gt; プロパティを使用してコントロールにアクセスしますが、使用されるほとんどのプロパティ（ &lt;code&gt;valid&lt;/code&gt; や &lt;code&gt;dirty&lt;/code&gt; など）は、とにかく直接アクセスするためにコントロールに渡されます。 &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; で直接利用できるプロパティの完全なリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="b490b68e59a6cf96e6000e8feb915a400ca7362b" translate="yes" xml:space="preserve">
          <source>To install Angular on your local system, you need the following:</source>
          <target state="translated">ローカルシステムにAngularをインストールするには、以下のものが必要です。</target>
        </trans-unit>
        <trans-unit id="00d4c0b7f7b79fb7000e4e700fe2af36bcc88023" translate="yes" xml:space="preserve">
          <source>To install the Angular CLI, open a terminal window and run the following command:</source>
          <target state="translated">Angular CLIをインストールするには、ターミナルウィンドウを開いて以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="3be4cd44a75c82f831a7fb264bb28d71c6d67aa0" translate="yes" xml:space="preserve">
          <source>To install the CLI using &lt;code&gt;npm&lt;/code&gt;, open a terminal/console window and enter the following command:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; を使用してCLIをインストールするには、ターミナル/コンソールウィンドウを開き、次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="978f127332b309b9081001f9ef289a772808bdd2" translate="yes" xml:space="preserve">
          <source>To install the latest version of TypeScript:</source>
          <target state="translated">TypeScriptの最新バージョンをインストールするには</target>
        </trans-unit>
        <trans-unit id="79ca5dd762f8884fdb128fbf222685ff3aa6cc9b" translate="yes" xml:space="preserve">
          <source>To instruct the AOT compiler to use your translation configuration, set the three &quot;i18n&quot; build configuration options in your CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">AOTコンパイラーに変換構成を使用するように指示するには、CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; で 3つの「i18n」ビルド構成オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="c997f93a9e3f25ee5447a528d3a4c9d013784a57" translate="yes" xml:space="preserve">
          <source>To keep things minimal, this example redirects unauthenticated users to &lt;code&gt;/admin&lt;/code&gt;.</source>
          <target state="translated">最小限に抑えるために、この例では、認証されていないユーザーを &lt;code&gt;/admin&lt;/code&gt; にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="063280d0d5fdd83f12af3f273ae8a53e21cbc89f" translate="yes" xml:space="preserve">
          <source>To keep your component simpler and independent of HTML templates that use pipes, you can, as an alternative, use an &lt;em&gt;impure&lt;/em&gt; pipe to detect changes within composite objects such as arrays, as described in the next section.</source>
          <target state="translated">次のセクションで説明するように、コンポーネントをよりシンプルに保ち、パイプを使用するHTMLテンプレートから独立させるために、代わりに、&lt;em&gt;不純な&lt;/em&gt;パイプを使用して配列などの複合オブジェクト内の変更を検出できます。</target>
        </trans-unit>
        <trans-unit id="adc02e43fb89206e34f149a31df831fe24f69571" translate="yes" xml:space="preserve">
          <source>To lazy load Angular modules, use &lt;code&gt;loadchildren&lt;/code&gt; (instead of &lt;code&gt;component&lt;/code&gt;) in your &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;routes&lt;/code&gt; configuration as follows.</source>
          <target state="translated">怠惰な負荷角度モジュール、使用に &lt;code&gt;loadchildren&lt;/code&gt; （代わりの &lt;code&gt;component&lt;/code&gt; あなたの中に） &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;routes&lt;/code&gt; 次のように設定。</target>
        </trans-unit>
        <trans-unit id="93c73667a03be3abfe828fead3712d61e72bf9e6" translate="yes" xml:space="preserve">
          <source>To learn about frequently used Angular NgModules and how to import them into your app, see &lt;a href=&quot;frequent-ngmodules&quot;&gt;Frequently-used modules&lt;/a&gt;.</source>
          <target state="translated">頻繁に使用されるAngularNgModuleと、それらをアプリにインポートする方法については、「&lt;a href=&quot;frequent-ngmodules&quot;&gt;頻繁に使用されるモジュール&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="ce1bee037e6dd779c9223edb98da376759b86686" translate="yes" xml:space="preserve">
          <source>To learn about loading NgModules eagerly when the app starts, or lazy-loading NgModules asynchronously by the router, see &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy-loading feature modules&lt;/a&gt;.</source>
          <target state="translated">アプリの起動時にNgModuleを積極的にロードする方法、またはルーターによって非同期にNgModuleを遅延ロードする方法については、遅延&lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;読み込み機能モジュールを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="bf39b85c560a16fe59f3305b45f410f4c374fed1" translate="yes" xml:space="preserve">
          <source>To learn how to create a singleton service to use in NgModules, see &lt;a href=&quot;singleton-services&quot;&gt;Making a service a singleton&lt;/a&gt;.</source>
          <target state="translated">NgModulesでの使用にシングルトンサービスを作成する方法については、参照&lt;a href=&quot;singleton-services&quot;&gt;サービスシングルトン作ります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ed29944f1d63987331c5c1a1636ae0d099c1c86" translate="yes" xml:space="preserve">
          <source>To learn how to use shared modules to organize and streamline your code, see &lt;a href=&quot;sharing-ngmodules&quot;&gt;Sharing NgModules in an app&lt;/a&gt;.</source>
          <target state="translated">共有モジュールを使用してコードを整理および合理化する方法について&lt;a href=&quot;sharing-ngmodules&quot;&gt;は、アプリでのNgModuleの共有をご覧&lt;/a&gt;ください。</target>
        </trans-unit>
        <trans-unit id="2b8673bf705879ba50b6543052c6c5d67172734b" translate="yes" xml:space="preserve">
          <source>To learn more about JavaScript modules, see &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 In Depth: Modules&lt;/a&gt;. For the module specification, see the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-modules&quot;&gt;6th Edition of the ECMAScript standard&lt;/a&gt;.</source>
          <target state="translated">JavaScriptモジュールの詳細については、&lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 In Depth：Modulesを&lt;/a&gt;参照してください。モジュールの仕様について&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-modules&quot;&gt;は、ECMAScript標準の第6版を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1677d547af7492d218688d8fc496408b0a0b031e" translate="yes" xml:space="preserve">
          <source>To learn more about other browsers that are service worker ready, see the &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt; page and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN docs&lt;/a&gt;.</source>
          <target state="translated">Service Worker対応のその他のブラウザーの詳細については、「&lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;使用可能&lt;/a&gt;」ページと&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDNドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c84c9b491abea1ff59708036d037ad515cf9fdbd" translate="yes" xml:space="preserve">
          <source>To learn more about providers, see the &lt;a href=&quot;../guide/providers&quot;&gt;Providers section&lt;/a&gt;. To learn more about injectors, see the &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">プロバイダーの詳細については、「&lt;a href=&quot;../guide/providers&quot;&gt;プロバイダー」セクションを&lt;/a&gt;参照してください。インジェクターの詳細については、&lt;a href=&quot;../guide/dependency-injection&quot;&gt;依存性インジェクションガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f76858a7e260841160caa41bedc9711829079ce9" translate="yes" xml:space="preserve">
          <source>To learn more about reactive forms, see the following guides:</source>
          <target state="translated">反応性フォームの詳細については、以下のガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="59a572cbe7b9a3e97969793c2bc9cfdeb16ab418" translate="yes" xml:space="preserve">
          <source>To learn more about template-driven forms, see the following guides:</source>
          <target state="translated">テンプレート駆動型フォームの詳細については、以下のガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="738b9eb031dded491e17886663caa1ff29e71ce4" translate="yes" xml:space="preserve">
          <source>To learn more about the full capabilities of the CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI command reference&lt;/a&gt;.</source>
          <target state="translated">CLIの全機能の詳細については、&lt;a href=&quot;cli&quot;&gt;CLIコマンドリファレンスを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50c0e4f29bef7d012d60683d14c5ab14934615fb" translate="yes" xml:space="preserve">
          <source>To learn more about the root NgModule, see &lt;a href=&quot;bootstrapping&quot;&gt;Launching an app with a root NgModule&lt;/a&gt;.</source>
          <target state="translated">ルートNgModuleの詳細については、ルートNgModuleを使用し&lt;a href=&quot;bootstrapping&quot;&gt;たアプリの起動を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="576871e9688e5fb9067f532deda27073b34e9a11" translate="yes" xml:space="preserve">
          <source>To learn more about using pipes for internationalization (i18n) efforts, see &lt;a href=&quot;i18n#i18n-pipes&quot;&gt;formatting data based on locale&lt;/a&gt;.</source>
          <target state="translated">国際化（i18n）の取り組みにパイプを使用する方法の詳細については&lt;a href=&quot;i18n#i18n-pipes&quot;&gt;、ロケールに基づいたデータのフォーマットを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c3f50de3d99d51fc3307e8adf60a7d37ef18510f" translate="yes" xml:space="preserve">
          <source>To learn more about using the Angular CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI Overview&lt;/a&gt;. In addition to creating the initial workspace and app scaffolding, you can use the CLI to generate Angular code such as components and services. The CLI supports the full development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">Angular CLIの使用について詳しくは、&lt;a href=&quot;cli&quot;&gt;CLIの概要を&lt;/a&gt;ご覧ください。初期ワークスペースとアプリの足場を作成することに加えて、CLIを使用して、コンポーネントやサービスなどのAngularコードを生成できます。CLIは、ビルド、テスト、バンドル、デプロイメントを含む完全な開発サイクルをサポートしています。</target>
        </trans-unit>
        <trans-unit id="416a58e3ce60c40d39bdf10d063589c334e40ab1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture-services&quot;&gt;サービスの概要と依存性注入」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e694d6c1d32b6b56ce020c646c48af952c618210" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;browser-support&quot;&gt;ブラウザのサポートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b5d547564ae49438c7f5583123e361486b37cdfb" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;form-validation&quot;&gt;フォームの検証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fef2215443d40254464acc94fc7847b670e932f8" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;inputs-outputs&quot;&gt;Input and Output Properties&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;inputs-outputs&quot;&gt;入力と出力のプロパティ&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="ddcfcf686cef986dad66c32adad5e8191043ecc1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;inputs-outputs&quot;&gt;input and output properties&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;inputs-outputs&quot;&gt;入力プロパティと出力プロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3b51947679f07f8322ce7f3740f084897727afa5" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5dac4e123cca0d4a59d5f6f873a05e1a76d9583b" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c2218a8556fffcfa1f6d34419d68f2922869161d" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;observables&quot;&gt;Observables&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;observables&quot;&gt;Observablesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b1076876ca0b526aa98a8f286bda2dbf9a2d471f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;pipes&quot;&gt;パイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7a1bfb784682ebe266242fbdb242bb6f408ed07f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3b914fb9f887c33faf04a08f5c6bcad4ae48f1d7" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;schematics&quot;&gt;Schematics Overview&lt;/a&gt; and &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;schematics&quot;&gt;回路図の概要」&lt;/a&gt;および「&lt;a href=&quot;schematics-for-libraries&quot;&gt;ライブラリの&lt;/a&gt;回路図」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d010cfde7bc2c506df423549e631c7008431f001" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;structural-directives&quot;&gt;構造指令を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e4570551808faa6eea6e2ab0181ccbcaaa5c2263" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;Input and Output Properties&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;入力と出力のプロパティ&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="ecceabc50e42b7eefd96c26c6bf1f43187e84d1f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input and output properties&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;入力および出力プロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="49bdcdc84e41d471767e7d1270cab230b0e8a7f1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;universal&quot;&gt;Angular Universal: server-side rendering&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;universal&quot;&gt;Angular Universal：server-side renderingを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eb003e20f49d50feecb8fdc386ebe9f76301de6f" translate="yes" xml:space="preserve">
          <source>To limit access to a service, consider lazy loading the NgModule that provides that service. See &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;How do I restrict service scope to a module?&lt;/a&gt; for more information.</source>
          <target state="translated">サービスへのアクセスを制限するには、そのサービスを提供するNgModuleの遅延読み込みを検討してください。&lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;サービス範囲をモジュールに制限するに&lt;/a&gt;はどうすればよいですか？を参照してください。詳細については。</target>
        </trans-unit>
        <trans-unit id="176131b1c166c15dd52ca2270019e00646222f93" translate="yes" xml:space="preserve">
          <source>To link our builder implementation with its schema and name, we need to create a &lt;em&gt;builder definition&lt;/em&gt; file, which we can point to in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">ビルダーの実装をそのスキーマと名前にリンクするには、 &lt;code&gt;package.json&lt;/code&gt; でポイントできる&lt;em&gt;ビルダー定義&lt;/em&gt;ファイルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ef171fef0328a2cd5ad545be79413b8427d3d1b" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz defined by a named &lt;code&gt;stackblitz.json&lt;/code&gt; file, set the &lt;code&gt;stackblitz&lt;/code&gt; attribute. The following example links to the Stackblitz defined by &lt;code&gt;second.stackblitz.json&lt;/code&gt; in the current guide's directory.</source>
          <target state="translated">名前付きの &lt;code&gt;stackblitz.json&lt;/code&gt; ファイルで定義されたStackblitzにリンクするには、 &lt;code&gt;stackblitz&lt;/code&gt; 属性を設定します。Stackblitz次の例のリンクは、で定義された &lt;code&gt;second.stackblitz.json&lt;/code&gt; 現在のガイドのディレクトリに。</target>
        </trans-unit>
        <trans-unit id="d0dfc4d2bbeb415d911b77bd57e23158017465af" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz in a folder whose name is not the same as the current guide page, set the &lt;code&gt;name&lt;/code&gt; attribute to the name of that folder.</source>
          <target state="translated">現在のガイドページと同じ名前ではないフォルダー内のStackblitzにリンクするには、 &lt;code&gt;name&lt;/code&gt; 属性をそのフォルダーの名前に設定します。</target>
        </trans-unit>
        <trans-unit id="8c16acaaf6113414a6a5a50402e666ea13182d9b" translate="yes" xml:space="preserve">
          <source>To localize your app, follow these general steps:</source>
          <target state="translated">アプリをローカライズするには、以下の一般的な手順に従います。</target>
        </trans-unit>
        <trans-unit id="c09afb9997a15f7c7d0a2d0a4beb740078d29af0" translate="yes" xml:space="preserve">
          <source>To maintain the relationship between the component and its token while still distinguishing between them, the recommended style is to use the component base name with the suffix &quot;Token&quot; to name your lightweight injection tokens: &quot;LibHeaderToken&quot;.</source>
          <target state="translated">コンポーネントとトークンの関係を維持しつつ、それらを区別するために、推奨されるスタイルは、コンポーネントのベース名に接尾辞 &quot;Token&quot; を付けて軽量インジェクショントークンの名前を付けることです。&quot;LibHeaderToken&quot; とします。</target>
        </trans-unit>
        <trans-unit id="9e806bc9cf5ce821c72637bad288f0c8a385e3b7" translate="yes" xml:space="preserve">
          <source>To make a request with progress events enabled, you can create an instance of &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; option set true to enable tracking of progress events.</source>
          <target state="translated">進行状況イベントを有効にしてリクエストを行うには、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; オプションをtrueに設定して &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; のインスタンスを作成し、進行状況イベントの追跡を有効にします。</target>
        </trans-unit>
        <trans-unit id="4644078867fa768095fca87f32259edcca09d733" translate="yes" xml:space="preserve">
          <source>To make a request with progress events enabled, you can create an instance of &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;reportProgress&lt;/code&gt; option set true to enable tracking of progress events.</source>
          <target state="translated">進行状況イベントを有効にしてリクエストを行うには、 &lt;code&gt;reportProgress&lt;/code&gt; オプションをtrueに設定して &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; のインスタンスを作成し、進行状況イベントの追跡を有効にします。</target>
        </trans-unit>
        <trans-unit id="2d1f94a35fe29cf68215d8ce11be523428a2104c" translate="yes" xml:space="preserve">
          <source>To make changes to the documentation pages and sample code, clone the &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github repository&lt;/a&gt; and go to the &lt;code&gt;aio/&lt;/code&gt; folder.</source>
          <target state="translated">ドキュメントページとサンプルコードを変更するには、&lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular githubリポジトリの&lt;/a&gt;クローンを作成し、 &lt;code&gt;aio/&lt;/code&gt; フォルダーに移動します。</target>
        </trans-unit>
        <trans-unit id="ad1bed88cabd87c7ef61bbd728ce927c47d305ed" translate="yes" xml:space="preserve">
          <source>To make each product name a link to product details, add the &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; element and set its title to be the product's name by using the property binding &lt;code&gt;[ ]&lt;/code&gt; syntax, as follows:</source>
          <target state="translated">、各製品名に製品の詳細情報へのリンクを作る追加するには &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 要素を結合し、プロパティを使用して、製品の名前であることをそのタイトルを設定し &lt;code&gt;[ ]&lt;/code&gt; 構文として、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="96f7390b983153eaec2a94dc845f76d740c53ee6" translate="yes" xml:space="preserve">
          <source>To make each product name a link to product details, add the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element and set its title to be the product's name by using the property binding &lt;code&gt;[ ]&lt;/code&gt; syntax, as follows:</source>
          <target state="translated">各製品名を製品の詳細へのリンクにするには、次のように、プロパティバインディング &lt;code&gt;[ ]&lt;/code&gt; 構文を使用して、 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 要素を追加し、そのタイトルを製品名に設定します。</target>
        </trans-unit>
        <trans-unit id="0133990127a445b9c4636bf47add6269aff05d0f" translate="yes" xml:space="preserve">
          <source>To make library code reusable you must define a public API for it. This &quot;user layer&quot; defines what is available to consumers of your library. A user of your library should be able to access public functionality (such as NgModules, service providers and general utility functions) through a single import path.</source>
          <target state="translated">ライブラリコードを再利用可能にするには、そのためのパブリックAPIを定義しなければなりません。この「ユーザー層」は、ライブラリの消費者が利用できるものを定義します。ライブラリのユーザーは、単一のインポートパスを通してパブリック機能(NgModules、サービスプロバイダ、一般的なユーティリティ関数など)にアクセスできるようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="3c46891baa0e78d054423a53f637c9fa5a233ed8" translate="yes" xml:space="preserve">
          <source>To make more complex forms, use the following steps.</source>
          <target state="translated">より複雑なフォームを作成するには、以下の手順を使用します。</target>
        </trans-unit>
        <trans-unit id="f4c06ba3e64fe70ec544df6b51f17ee32a730f00" translate="yes" xml:space="preserve">
          <source>To make sure that the &lt;code&gt;HeroService&lt;/code&gt; can provide this service, register it with the &lt;em&gt;injector&lt;/em&gt;, which is the object that is responsible for choosing and injecting the provider where the app requires it.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; がこのサービスを確実に提供できるようにするには、&lt;em&gt;インジェクターに&lt;/em&gt;登録します。これは、アプリが必要とするプロバイダーの選択と注入を担当するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="abe2d5f3112ac6f160f5eaad338cd564e7929599" translate="yes" xml:space="preserve">
          <source>To make sure there is only one instance of &lt;code&gt;NewLogger&lt;/code&gt;, alias &lt;code&gt;OldLogger&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;NewLogger&lt;/code&gt; のインスタンスが1つだけであることを確認するために、 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; オプションを &lt;code&gt;OldLogger&lt;/code&gt; してOldLoggerにエイリアスを設定します。</target>
        </trans-unit>
        <trans-unit id="9aa5469016b8426067be0d8dc497d98066fb4a6c" translate="yes" xml:space="preserve">
          <source>To make sure there is only one instance of &lt;code&gt;NewLogger&lt;/code&gt;, alias &lt;code&gt;OldLogger&lt;/code&gt; with the &lt;code&gt;useExisting&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;NewLogger&lt;/code&gt; のインスタンスが1つだけであることを確認するには、 &lt;code&gt;useExisting&lt;/code&gt; オプションを &lt;code&gt;OldLogger&lt;/code&gt; してOldLoggerのエイリアスを作成します。</target>
        </trans-unit>
        <trans-unit id="e85568359a0fbe5ee087b7635e1885b559b60aea" translate="yes" xml:space="preserve">
          <source>To make sure your schematics source files get compiled into the library bundle, add the following scripts to the &lt;code&gt;package.json&lt;/code&gt; file in your library project's root folder (&lt;code&gt;projects/my-lib&lt;/code&gt;).</source>
          <target state="translated">回路図ソースファイルがライブラリバンドルにコンパイルされるようにするには、ライブラリプロジェクトのルートフォルダー（ &lt;code&gt;projects/my-lib&lt;/code&gt; ）の &lt;code&gt;package.json&lt;/code&gt; ファイルに次のスクリプトを追加します。</target>
        </trans-unit>
        <trans-unit id="b618bd0150119d92c15de99c07c66b9d5d5df18d" translate="yes" xml:space="preserve">
          <source>To make the &quot;Notify Me&quot; button work, you need to configure two things:</source>
          <target state="translated">通知する」ボタンを機能させるためには、2つの設定が必要です。</target>
        </trans-unit>
        <trans-unit id="c63bfd6ff80b0594b74ebefc3198e01f8f521a91" translate="yes" xml:space="preserve">
          <source>To make the app navigate to the dashboard automatically, add the following route to the &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; array.</source>
          <target state="translated">アプリが自動的にダッシュボードに移動するようにするには、次のルートを &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="f13fc1c29e96e1dfdbe3eed259eadf83ed2de57e" translate="yes" xml:space="preserve">
          <source>To make the change less abrupt, we need to define an animation &lt;em&gt;transition&lt;/em&gt; to specify the changes that occur between one state and another over a period of time. The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function accepts two arguments: the first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; steps.</source>
          <target state="translated">急激な変化をなくすには、アニメーションの&lt;em&gt;遷移&lt;/em&gt;を定義して、ある状態と別の状態の間で一定期間に発生する変化を指定する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 関数の二つの引数を受け入れ：最初の引数は、2つの遷移状態の間の方向を定義する式を受け入れ、第二引数は、一つ又は一連の受け付け &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 手順を。</target>
        </trans-unit>
        <trans-unit id="0f497517c53253fb57aa220031bd985b5070e07b" translate="yes" xml:space="preserve">
          <source>To make the code in a JavaScript module available to other modules, use an &lt;code&gt;export&lt;/code&gt; statement at the end of the relevant code in the module, such as the following:</source>
          <target state="translated">JavaScriptモジュールのコードを他のモジュールで使用できるようにするには、モジュール内の関連するコードの最後に、次のような &lt;code&gt;export&lt;/code&gt; ステートメントを使用します。</target>
        </trans-unit>
        <trans-unit id="8bcf14d372529e2a67e2f9aa251e900cf6621e7d" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we deprecate APIs and features for a period of time before removing them. This gives you time to update your apps to the latest APIs and best practices.</source>
          <target state="translated">これらの移行をできるだけ簡単にするために、APIや機能を削除する前に一定期間非推奨としています。これにより、アプリを最新の API とベストプラクティスにアップデートする時間が与えられます。</target>
        </trans-unit>
        <trans-unit id="c7d74082b91da794e2772b1b64caafcf244578ba" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we make these commitments to you:</source>
          <target state="translated">これらの移行を可能な限り容易にするために、私たちはあなたにこれらの約束をします。</target>
        </trans-unit>
        <trans-unit id="e4342ac072084a99b08c67145d8f7f9d46ebc4bf" translate="yes" xml:space="preserve">
          <source>To make updating easy, we provide complete instructions in the interactive &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;.</source>
          <target state="translated">更新を簡単にするために、インタラクティブな&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guideに&lt;/a&gt;完全な手順を記載しています。</target>
        </trans-unit>
        <trans-unit id="f346dda78884da2f316927c754a446df557d7e97" translate="yes" xml:space="preserve">
          <source>To make use of all the features of Angular service worker, use the latest versions of Angular and the Angular CLI.</source>
          <target state="translated">Angularサービスワーカーの全ての機能を利用するには、最新版のAngularとAngular CLIを利用しましょう。</target>
        </trans-unit>
        <trans-unit id="d3a75dfb8b6d5e0a84151719b6bac15ccc94edf4" translate="yes" xml:space="preserve">
          <source>To make your solution reusable, you need to adjust it so that it does not depend on app-specific code. Here are some things to consider in migrating application functionality to a library.</source>
          <target state="translated">ソリューションを再利用可能にするには、アプリ固有のコードに依存しないように調整する必要があります。ここでは、アプリケーションの機能をライブラリに移行する際に考慮すべき点をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="9f12fc809ed83f10331eb3009c1d1040391b4f98" translate="yes" xml:space="preserve">
          <source>To manage the heroes, create a &lt;code&gt;HeroesModule&lt;/code&gt; with routing in the heroes folder and register it with the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">ヒーローを管理するには、heroesフォルダーにルーティングを使用して &lt;code&gt;HeroesModule&lt;/code&gt; を作成し、ルート &lt;code&gt;AppModule&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="e01c27c588e2fda534f6630e651b5200cc4fa62a" translate="yes" xml:space="preserve">
          <source>To manually set an app's source locale to one other than the automatic value, follow these steps:</source>
          <target state="translated">アプリのソースロケールを自動値以外に手動で設定するには、以下の手順に従います。</target>
        </trans-unit>
        <trans-unit id="aded88b0986d969878002d25790cac4afe9fb93e" translate="yes" xml:space="preserve">
          <source>To mark a class as a pipe and supply configuration metadata, apply the &lt;a href=&quot;../api/core/pipe&quot;&gt;&lt;code&gt;@Pipe&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;glossary#decorator--decoration&quot;&gt;decorator&lt;/a&gt; to the class. Use &lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt; (the general convention for class names) for the pipe class name, and &lt;a href=&quot;glossary#case-types&quot;&gt;camelCase&lt;/a&gt; for the corresponding &lt;code&gt;name&lt;/code&gt; string. Do not use hyphens in the &lt;code&gt;name&lt;/code&gt;. For details and more examples, see &lt;a href=&quot;styleguide#pipe-names&quot;&gt;Pipe names&lt;/a&gt;.</source>
          <target state="translated">クラスをパイプとしてマークし、構成メタデータを提供するには、&lt;a href=&quot;../api/core/pipe&quot;&gt; &lt;code&gt;@Pipe&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;glossary#decorator--decoration&quot;&gt;デコレータ&lt;/a&gt;をクラスに適用します。パイプクラス名には&lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt;（クラス名の一般規則）を使用し、対応する &lt;code&gt;name&lt;/code&gt; 文字列には&lt;a href=&quot;glossary#case-types&quot;&gt;キャメルケース&lt;/a&gt;を使用します。 &lt;code&gt;name&lt;/code&gt; ハイフンを使用しないでください。詳細およびその他の例については、&lt;a href=&quot;styleguide#pipe-names&quot;&gt;パイプ名を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ebb28b48869f066439d945bc03e317d919b03091" translate="yes" xml:space="preserve">
          <source>To mark a value as trusted, inject &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; and call one of the following methods:</source>
          <target state="translated">値を信頼できるものとしてマークするには、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; を注入し、次のいずれかのメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="5a56ec05bb8c1989de9d25489aca675135c374d2" translate="yes" xml:space="preserve">
          <source>To mark an attribute for translation, add &lt;code&gt;i18n-&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; in which &lt;em&gt;attribute&lt;/em&gt; is the attribute to translate. The following example shows how to mark the &lt;code&gt;title&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag by adding &lt;code&gt;i18n-title&lt;/code&gt;:</source>
          <target state="translated">翻訳のための属性をマークするには、追加 &lt;code&gt;i18n-&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;れる&lt;em&gt;属性が&lt;/em&gt;変換する属性です。次の例は、 &lt;code&gt;i18n-title&lt;/code&gt; を追加して &lt;code&gt;img&lt;/code&gt; タグの &lt;code&gt;title&lt;/code&gt; 属性をマークする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="826ff064aa36b11928c6420ce581e8abd48d94ef" translate="yes" xml:space="preserve">
          <source>To mark an attribute for translation, add an attribute in the form of &lt;code&gt;i18n-x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the name of the attribute to translate. The following example shows how to mark the &lt;code&gt;title&lt;/code&gt; attribute for translation by adding the &lt;code&gt;i18n-title&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag:</source>
          <target state="translated">属性に翻訳のマークを付けるには、 &lt;code&gt;i18n-x&lt;/code&gt; の形式で属性を追加します。ここで、 &lt;code&gt;x&lt;/code&gt; は翻訳する属性の名前です。次の例は、 &lt;code&gt;img&lt;/code&gt; タグに &lt;code&gt;i18n-title&lt;/code&gt; 属性を追加して、 &lt;code&gt;title&lt;/code&gt; 属性を翻訳対象としてマークする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d8d57de94256bf3111f375a6f4f8c16a2bbdcc50" translate="yes" xml:space="preserve">
          <source>To mark the greeting for translation, add the &lt;code&gt;i18n&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">挨拶に翻訳のマークを付けるには、 &lt;code&gt;i18n&lt;/code&gt; 属性を &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; タグに追加します。</target>
        </trans-unit>
        <trans-unit id="204d695937e174c030d578e79a70b8cfdaa9fdde" translate="yes" xml:space="preserve">
          <source>To maximize compatibility, you could ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers, however, shouldn't have to pay the price of increased bundle size that comes with polyfills they don't need. Differential loading, which is supported by default in Angular CLI version 8 and higher, solves this problem.</source>
          <target state="translated">互換性を最大化するために、コンパイル済みのコードと必要なポリフィルをすべて含む単一のバンドルを出荷することができます。しかし、最新のブラウザを使用しているユーザーは、必要のないポリフィルを含むバンドルサイズの増大という代償を支払う必要はありません。差動ロードはAngular CLIバージョン8以降ではデフォルトでサポートされており、この問題を解決します。</target>
        </trans-unit>
        <trans-unit id="732d4da603a82c47581ceed2fef8436b0873e900" translate="yes" xml:space="preserve">
          <source>To maximize compatibility, you could ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers, however, shouldn't have to pay the price of increased bundle size that comes with polyfills they don't need. Differential loading, which is supported in Angular CLI version 8 and higher, can help solve this problem.</source>
          <target state="translated">互換性を最大化するために、コンパイル済みのコードと必要なポリフィルをすべて含む単一のバンドルを出荷することができます。しかし、最新のブラウザを使用しているユーザーは、必要のないポリフィルを含むバンドルサイズの増大という代償を支払う必要はありません。Angular CLI バージョン 8 以降でサポートされている差分ロードは、この問題を解決するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a4e9737bd2b2dc2a5cd6f3a9fc82ef841838daab" translate="yes" xml:space="preserve">
          <source>To merge the completed translations into the app, use the &lt;a href=&quot;glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt; to build a copy of the app's distributable files for each locale. The build process replaces the original text with translated text, and sets the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; token for each distributable copy of the app. It also loads and registers the locale data.</source>
          <target state="translated">完成した翻訳をアプリにマージするには、&lt;a href=&quot;glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、ロケールごとにアプリの配布可能なファイルのコピーを作成します。ビルドプロセスでは、元のテキストが翻訳されたテキストに置き換えられ、アプリの配布可能なコピーごとに &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; トークンが設定されます。また、ロケールデータをロードして登録します。</target>
        </trans-unit>
        <trans-unit id="6c9f63931f1a9876ee6144f0f6f85bb6ad52a4a3" translate="yes" xml:space="preserve">
          <source>To merge the translated text into component templates, compile the app with the completed translation file.</source>
          <target state="translated">翻訳されたテキストをコンポーネントテンプレートにマージするには、完成した翻訳ファイルでアプリをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="89b8144679887286430f8c720c3bb03f28507e3a" translate="yes" xml:space="preserve">
          <source>To monitor changes that occur where &lt;code&gt;ngOnChanges()&lt;/code&gt; won't catch them, you can implement your own change check, as shown in the &lt;em&gt;DoCheck&lt;/em&gt; example. This example shows how you can use the &lt;code&gt;ngDoCheck()&lt;/code&gt; hook to detect and act upon changes that Angular doesn't catch on its own.</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; が変更をキャッチしない場所で発生する変更を監視するために、&lt;em&gt;DoCheckの&lt;/em&gt;例に示すように、独自の変更チェックを実装できます。この例は、 &lt;code&gt;ngDoCheck()&lt;/code&gt; フックを使用して、Angularがそれ自体ではキャッチしない変更を検出して処理する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="50177e0937d0c24e4d779ea321fe99f130aa12ab" translate="yes" xml:space="preserve">
          <source>To navigate a relative path with the &lt;code&gt;Router.navigate&lt;/code&gt; method, you must supply the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; to give the router knowledge of where you are in the current route tree.</source>
          <target state="translated">&lt;code&gt;Router.navigate&lt;/code&gt; メソッドで相対パスをナビゲートするには、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を指定して、現在のルートツリーのどこにいるかをルーターに知らせる必要があります。</target>
        </trans-unit>
        <trans-unit id="09948d03b8b10d3e5528be9b431a7b910e118c79" translate="yes" xml:space="preserve">
          <source>To navigate as a result of some user action such as the click of an anchor tag, use &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アンカータグのクリックなどのユーザーアクションの結果としてナビゲートするには、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e3d48bf82f388d44ca8269b4f3bfd203e20968b6" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; に移動するには、完全なURLは &lt;code&gt;/crisis-center&lt;/code&gt; （ &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="c30458218377d115bbf5391fba4f7de471157644" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; for a crisis with &lt;code&gt;id=2&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center/2&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;id=2&lt;/code&gt; の危機の &lt;code&gt;CrisisDetailComponent&lt;/code&gt; に移動するには、完全なURLは &lt;code&gt;/crisis-center/2&lt;/code&gt; （ &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="e48622697af47049a459333dd8614facd41899c8" translate="yes" xml:space="preserve">
          <source>To navigate to the Admin Dashboard route after logging in, update &lt;code&gt;admin-dashboard.component.ts&lt;/code&gt; to handle the query parameters and fragment.</source>
          <target state="translated">ログイン後に管理ダッシュボードルートに移動するには、 &lt;code&gt;admin-dashboard.component.ts&lt;/code&gt; を更新して、クエリパラメーターとフラグメントを処理します。</target>
        </trans-unit>
        <trans-unit id="97e5b5a0b343f2f0aacae676cafbfb230385ea8b" translate="yes" xml:space="preserve">
          <source>To navigate to the dashboard, the router needs an appropriate route.</source>
          <target state="translated">ダッシュボードに移動するには、ルータに適切なルートが必要です。</target>
        </trans-unit>
        <trans-unit id="97d195db608d7c728fef4d499c5aaf0c6b4979af" translate="yes" xml:space="preserve">
          <source>To open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return. Each selected hero tax return opens in its own component and multiple returns can be open at the same time.</source>
          <target state="translated">英雄のタックスリターンを開くには、準備者はヒーロー名をクリックし、そのリターンを編集するためのコンポーネントを開きます。選択されたヒーローのタックスリターンはそれぞれ独自のコンポーネントで開き、複数のリターンを同時に開くことができます。</target>
        </trans-unit>
        <trans-unit id="dbd7da45428e3d65e9e156aac501fb13357f9fed" translate="yes" xml:space="preserve">
          <source>To opt out of Ivy, change the &lt;code&gt;angularCompilerOptions&lt;/code&gt; in your project's TypeScript configuration, most commonly located at &lt;code&gt;tsconfig.app.json&lt;/code&gt; at the root of the workspace.</source>
          <target state="translated">Ivyをオプトアウトするには、プロジェクトのTypeScript構成で &lt;code&gt;angularCompilerOptions&lt;/code&gt; を変更します。最も一般的なのは、ワークスペースのルートにある &lt;code&gt;tsconfig.app.json&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b5a0babdbd087078fc6808357b85a5f76fc7e195" translate="yes" xml:space="preserve">
          <source>To opt-in an existing application, run</source>
          <target state="translated">既存のアプリケーションをオプトインするには</target>
        </trans-unit>
        <trans-unit id="e1e1e2d56f853cd55abdf55cf1f45f3fbc917764" translate="yes" xml:space="preserve">
          <source>To override a tree-shakable provider, configure the injector of a specific NgModule or component with another provider, using the &lt;code&gt;providers: []&lt;/code&gt; array syntax of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">ツリー揺動可能プロバイダを上書きするために、使用して、別のプロバイダと特定NgModuleまたはコンポーネントのインジェクタを設定 &lt;code&gt;providers: []&lt;/code&gt; の配列構文 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータ。</target>
        </trans-unit>
        <trans-unit id="997153f39ef3a6b3379015fe98976042f7f5c60d" translate="yes" xml:space="preserve">
          <source>To override the value of &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;, add the &lt;code&gt;locale&lt;/code&gt; parameter. For example, to force the currency to use &lt;code&gt;en-US&lt;/code&gt; no matter which language-locale you set for &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;, use this form: &lt;code&gt;{{amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; : 'en-US'}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; の値を上書きするには、 &lt;code&gt;locale&lt;/code&gt; パラメータを追加します。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; に設定した言語ロケールに関係なく、通貨で &lt;code&gt;en-US&lt;/code&gt; を使用するように強制するには、次の形式を使用します。 &lt;code&gt;{{amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; : 'en-US'}}&lt;/code&gt; &lt;a href=&quot;../api/common/currencypipe&quot;&gt;通貨&lt;/a&gt;： 'en-US'}}。</target>
        </trans-unit>
        <trans-unit id="36a953799b95a8f6656497edaeebfe8ea9110972" translate="yes" xml:space="preserve">
          <source>To perform complex initializations shortly after construction.</source>
          <target state="translated">構築後すぐに複雑な初期化を実行するために</target>
        </trans-unit>
        <trans-unit id="f0bb0d88a7390f7a95031586a8beb53ff5091b52" translate="yes" xml:space="preserve">
          <source>To position the delete button at the far right of the hero entry, add some CSS to the &lt;code&gt;heroes.component.css&lt;/code&gt;. You'll find that CSS in the &lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;final review code&lt;/a&gt; below.</source>
          <target state="translated">ヒーローエントリの右端に削除ボタンを配置するには、 &lt;code&gt;heroes.component.css&lt;/code&gt; に CSSを追加します。そのCSSは、以下の&lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;最終レビューコードにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="0f90eccccd670656e7c8f0005f6ee48be0e54a38" translate="yes" xml:space="preserve">
          <source>To preload component data, you can use a &lt;code&gt;resolver&lt;/code&gt;. Resolvers improve UX by blocking the page load until all necessary data is available to fully display the page.</source>
          <target state="translated">コンポーネントデータをプリロードするには、 &lt;code&gt;resolver&lt;/code&gt; を使用できます。リゾルバーは、ページを完全に表示するために必要なすべてのデータが利用可能になるまでページの読み込みをブロックすることにより、UXを向上させます。</target>
        </trans-unit>
        <trans-unit id="49b504bd28cda7dd8440bf615efc157d41f371aa" translate="yes" xml:space="preserve">
          <source>To prepare your app for translations, you should have a basic understanding of the following:</source>
          <target state="translated">翻訳用のアプリを準備するには、以下のような基本的な理解をしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="2c961571be0bc2d29a55550db6735d63db701501" translate="yes" xml:space="preserve">
          <source>To preserve app integrity, the Angular service worker groups all files into a version together. The files grouped into a version usually include HTML, JS, and CSS files. Grouping of these files is essential for integrity because HTML, JS, and CSS files frequently refer to each other and depend on specific content. For example, an &lt;code&gt;index.html&lt;/code&gt; file might have a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that references &lt;code&gt;bundle.js&lt;/code&gt; and it might attempt to call a function &lt;code&gt;startApp()&lt;/code&gt; from within that script. Any time this version of &lt;code&gt;index.html&lt;/code&gt; is served, the corresponding &lt;code&gt;bundle.js&lt;/code&gt; must be served with it. For example, assume that the &lt;code&gt;startApp()&lt;/code&gt; function is renamed to &lt;code&gt;runApp()&lt;/code&gt; in both files. In this scenario, it is not valid to serve the old &lt;code&gt;index.html&lt;/code&gt;, which calls &lt;code&gt;startApp()&lt;/code&gt;, along with the new bundle, which defines &lt;code&gt;runApp()&lt;/code&gt;.</source>
          <target state="translated">アプリの整合性を維持するために、Angular Service Workerはすべてのファイルを1つのバージョンにグループ化します。バージョンにグループ化されたファイルには、通常、HTML、JS、およびCSSファイルが含まれます。 HTML、JS、およびCSSファイルは頻繁に相互に参照し、特定のコンテンツに依存するため、これらのファイルのグループ化は整合性にとって不可欠です。たとえば、 &lt;code&gt;index.html&lt;/code&gt; ファイルには &lt;code&gt;bundle.js&lt;/code&gt; を参照する &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグがあり、そのスクリプト内から関数 &lt;code&gt;startApp()&lt;/code&gt; を呼び出そうとする場合があります。このバージョンの &lt;code&gt;index.html&lt;/code&gt; が提供されるときは &lt;code&gt;bundle.js&lt;/code&gt; 、対応するbundle.jsも一緒に提供される必要があります。たとえば、 &lt;code&gt;startApp()&lt;/code&gt; 関数の名前が &lt;code&gt;runApp()&lt;/code&gt; に変更されているとします。両方のファイルで。このシナリオでは、古い奉仕する有効ではありません &lt;code&gt;index.html&lt;/code&gt; を呼び出して、 &lt;code&gt;startApp()&lt;/code&gt; を定義し、新たなバンドルとともに、 &lt;code&gt;runApp()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe943f52fad6ef05058867916f3c62d1438605f6" translate="yes" xml:space="preserve">
          <source>To preserve sequences of whitespace characters, use the &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; attribute.</source>
          <target state="translated">空白文字のシーケンスを保持するには、 &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; 属性を使用します。</target>
        </trans-unit>
        <trans-unit id="6f546bb9723988bfa28f68d7fd96af8a58f806bc" translate="yes" xml:space="preserve">
          <source>To prevent the validator from displaying errors before the user has a chance to edit the form, you should check for either the &lt;code&gt;dirty&lt;/code&gt; or &lt;code&gt;touched&lt;/code&gt; states in a control.</source>
          <target state="translated">ユーザーがフォームを編集する前にバリデーターがエラーを表示しないようにするには、コントロールの &lt;code&gt;dirty&lt;/code&gt; 状態または &lt;code&gt;touched&lt;/code&gt; 状態のいずれかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f13d961bf1f2a2e0a6771cacc0e0734c478d793" translate="yes" xml:space="preserve">
          <source>To prevent this issue, write a constructor that attempts to inject the module or service from the root app injector. If the injection succeeds, the class has been loaded a second time. You can throw an error or take other remedial action.</source>
          <target state="translated">この問題を防ぐには、ルートアプリのインジェクタからモジュールまたはサービスの注入を試みるコンストラクタを記述します。インジェクションが成功した場合、クラスは2回目にロードされています。エラーを投げるか、その他の改善策を取ることができます。</target>
        </trans-unit>
        <trans-unit id="82edb1afa8eeaf7f78aa665cfb01fbaf7b31f687" translate="yes" xml:space="preserve">
          <source>To prevent this, configure the component-level injector of &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; to provide the service, using the &lt;code&gt;providers&lt;/code&gt; property in the component metadata.</source>
          <target state="translated">これを防ぐには、コンポーネントメタデータの &lt;code&gt;providers&lt;/code&gt; プロパティを使用して、サービスを提供するように &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; のコンポーネントレベルのインジェクターを構成します。</target>
        </trans-unit>
        <trans-unit id="764953f88d6db345381e8274359af32c10d6b814" translate="yes" xml:space="preserve">
          <source>To prevent this, the application must ensure that a user request originates from the real application, not from a different site. The server and client must cooperate to thwart this attack.</source>
          <target state="translated">これを防ぐために、アプリケーションは、ユーザのリクエストが別のサイトからではなく、実際のアプリケーションからのものであることを保証しなければなりません。サーバとクライアントは、この攻撃を阻止するために協力しなければなりません。</target>
        </trans-unit>
        <trans-unit id="23e6bd66df0322fbae0f2b4af0850695d73a6068" translate="yes" xml:space="preserve">
          <source>To preview Ivy, use &lt;code&gt;@angular/core@next&lt;/code&gt; version of Angular (8.1.x), rather than &lt;code&gt;@angular/core@latest&lt;/code&gt; (8.0.x), as it contains all the latest bug fixes and improvements.</source>
          <target state="translated">Ivyをプレビューするには、 &lt;code&gt;@angular/core@latest&lt;/code&gt; （8.0.x）ではなく、 &lt;code&gt;@angular/core@next&lt;/code&gt; バージョンのAngular（8.1.x）を使用してください。最新のバグ修正と改善がすべて含まれています。</target>
        </trans-unit>
        <trans-unit id="8d1a7d82c50d476f8fd8a4601ce28f42ef661a13" translate="yes" xml:space="preserve">
          <source>To probe the behavior in the live example, change the value and optional exponent in the template.</source>
          <target state="translated">ライブ・サンプルで動作を確認するには、テンプレート内の値とオプションの指数を変更します。</target>
        </trans-unit>
        <trans-unit id="e83f099ed59d8330ac2609350236801b883e19e1" translate="yes" xml:space="preserve">
          <source>To provide a more specific type for an input expression to a directive within the template, add a &lt;code&gt;ngTemplateGuard_xx&lt;/code&gt; property to the directive, where the suffix to the static property name is the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; field name. The value of the property can be either a general type-narrowing function based on its return type, or the string &lt;code&gt;&quot;binding&quot;&lt;/code&gt; as in the case of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレート内のディレクティブへの入力式のより具体的なタイプを提供するには、 &lt;code&gt;ngTemplateGuard_xx&lt;/code&gt; プロパティをディレクティブに追加します。静的プロパティ名の接尾辞は &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; フィールド名です。プロパティの値は、戻り値の型に基づく一般的な型絞り関数、または &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; の場合のように文字列 &lt;code&gt;&quot;binding&quot;&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="90afe3bb0527dc6f5cce2feb6ccc77684ff74860" translate="yes" xml:space="preserve">
          <source>To provide better user experience, the template shows an appropriate error message when the form is invalid.</source>
          <target state="translated">より良いユーザーエクスペリエンスを提供するために、テンプレートはフォームが無効な場合に適切なエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="e498d45c2b48e2a16db2e6e00575c839c83f030b" translate="yes" xml:space="preserve">
          <source>To provide better user experience, we show an appropriate error message when the form is invalid.</source>
          <target state="translated">より良いユーザー体験を提供するために、フォームが無効な場合は適切なエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="14a86adfecf23cd6f5e988f214dc30fab3690652" translate="yes" xml:space="preserve">
          <source>To read a target element property or call one of its methods, see the API reference for &lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt; and &lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;.</source>
          <target state="translated">ターゲット要素のプロパティを読み取るか、そのメソッドの1つを呼び出すには、&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;および&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChildの&lt;/a&gt;APIリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="fe1b5ee91e15d081682393046ee0422bacf79816" translate="yes" xml:space="preserve">
          <source>To read about sharing services, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">共有サービスについては、&lt;a href=&quot;providers&quot;&gt;プロバイダーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="832342d7f1d64bd0fabad4f9800a7ac9d39aa8c5" translate="yes" xml:space="preserve">
          <source>To register a single form control, import the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class and create a new instance of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; to save as a class property.</source>
          <target state="translated">単一のフォームコントロールを登録するには、インポート &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のクラスをとの新しいインスタンスを作成 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をクラスプロパティとして保存します。</target>
        </trans-unit>
        <trans-unit id="16b4681d1fd2b68022b40ab92b874d4b37fbb9de" translate="yes" xml:space="preserve">
          <source>To register child controls with the form, use &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; attribute. You may use &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; to create sub-groups within the form.</source>
          <target state="translated">フォームに子コントロールを登録するには、 &lt;code&gt;name&lt;/code&gt; 属性を &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; してNgModelを使用します。 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; を使用して、フォーム内にサブグループを作成できます。</target>
        </trans-unit>
        <trans-unit id="92f1e211d9969a30647f141c114265a28591bf64" translate="yes" xml:space="preserve">
          <source>To remedy this issue, use asynchronous routing, which loads feature modules lazily, on request. Lazy loading has multiple benefits.</source>
          <target state="translated">この問題を解決するには、リクエストに応じて機能モジュールを遅延的にロードする非同期ルーティングを使用します。遅延ロードには複数の利点があります。</target>
        </trans-unit>
        <trans-unit id="8bd6725fea1d02e33394eb5471a409672ea30a70" translate="yes" xml:space="preserve">
          <source>To remedy this, you may need to kill the old worker using one of the above techniques (&lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;Fail-safe&lt;/a&gt; or &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;Safety Worker&lt;/a&gt;).</source>
          <target state="translated">これを解決するには、上記の手法（&lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;フェイルセーフ&lt;/a&gt;または&lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;セーフティワーカー&lt;/a&gt;）のいずれかを使用して、古いワーカーを殺す必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="be8db69041e9551a35264264ba86796ed7aef796" translate="yes" xml:space="preserve">
          <source>To remove, delete the &lt;code&gt;import '@angular/localize/init';&lt;/code&gt; line from the polyfills file.</source>
          <target state="translated">削除するには、 &lt;code&gt;import '@angular/localize/init';&lt;/code&gt; 削除します。polyfillsファイルからの行。</target>
        </trans-unit>
        <trans-unit id="aaeefee9f550b0ec463699d0b839236aef8f3ef3" translate="yes" xml:space="preserve">
          <source>To render the new values, add &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; to the bottom of the &lt;code&gt;AppComponent&lt;/code&gt; template so the view also displays the sunflower:</source>
          <target state="translated">新しい値をレンダリングするには、 &lt;code&gt;AppComponent&lt;/code&gt; テンプレートの下部に &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; を追加して、ビューにもヒマワリが表示されるようにします。</target>
        </trans-unit>
        <trans-unit id="2d4a7cb38a8f7318c5a2000f39faa271b3df5c87" translate="yes" xml:space="preserve">
          <source>To repeat the command any time the inputs change (watch mode), replace &lt;code&gt;bazel&lt;/code&gt; with &lt;code&gt;ibazel&lt;/code&gt; in these commands.</source>
          <target state="translated">入力が変化するたびにコマンドを繰り返すには（監視モード）、これらのコマンドで &lt;code&gt;bazel&lt;/code&gt; を &lt;code&gt;ibazel&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="752e6482dbad0b90cac7b0b18d6fb3ccea0c4a13" translate="yes" xml:space="preserve">
          <source>To report progress, use the &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; method, which takes a current value, (optional) total, and status string as arguments. The total can be any number; for example, if you know how many files you have to process, the total could be the number of files, and current should be the number processed so far. The status string is unmodified unless you pass in a new string value.</source>
          <target state="translated">進捗状況を報告するには、 &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; メソッドを使用します。このメソッドは、現在の値、（オプションの）合計、およびステータス文字列を引数として受け取ります。合計は任意の数にすることができます。たとえば、処理する必要があるファイルの数がわかっている場合、合計はファイルの数になる可能性があり、currentはこれまでに処理された数でなければなりません。ステータス文字列は、新しい文字列値を渡さない限り変更されません。</target>
        </trans-unit>
        <trans-unit id="da733e7d828e2271d74de53fcaeb21139907c7a1" translate="yes" xml:space="preserve">
          <source>To report vulnerabilities in Angular itself, email us at &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io&lt;/a&gt;.</source>
          <target state="translated">Angular自体の脆弱性を報告するには、&lt;a href=&quot;mailto:security@angular.io&quot;&gt;security&lt;/a&gt; @ angular.ioまでメールでご連絡ください。</target>
        </trans-unit>
        <trans-unit id="cbb23cd418ca38ba0340a3dac96f48e6e5baaa92" translate="yes" xml:space="preserve">
          <source>To resolve this, give the &lt;code&gt;HeroService&lt;/code&gt; constructor a boolean flag to control display of secret heroes.</source>
          <target state="translated">これを解決するには、 &lt;code&gt;HeroService&lt;/code&gt; コンストラクターにブールフラグを指定して、秘密のヒーローの表示を制御します。</target>
        </trans-unit>
        <trans-unit id="abae6466bed4070d96bb8c402709fe5af1d1f3dd" translate="yes" xml:space="preserve">
          <source>To resolve this, we give the &lt;code&gt;HeroService&lt;/code&gt; constructor a boolean flag to control display of secret heroes.</source>
          <target state="translated">これを解決するには、 &lt;code&gt;HeroService&lt;/code&gt; コンストラクターにブールフラグを設定して、秘密のヒーローの表示を制御します。</target>
        </trans-unit>
        <trans-unit id="737e073eba5452fb5c988cfe636593f4a671ce45" translate="yes" xml:space="preserve">
          <source>To restore the pristine state of the form controls, clear all of the flags imperatively by calling the form's &lt;code&gt;reset()&lt;/code&gt; method after calling the &lt;code&gt;newHero()&lt;/code&gt; method.</source>
          <target state="translated">フォームコントロールの元の状態を復元するには、 &lt;code&gt;newHero()&lt;/code&gt; メソッドを呼び出した後にフォームの &lt;code&gt;reset()&lt;/code&gt; メソッドを呼び出して、すべてのフラグを強制的にクリアします。</target>
        </trans-unit>
        <trans-unit id="ac34d2783858abc37d4c5360d16d00324ca882e2" translate="yes" xml:space="preserve">
          <source>To resume testing after completion of asynchronous activity or asynchronous change detection, hook that promise. See &lt;a href=&quot;testing#when-stable&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">非同期アクティビティまたは非同期変更検出の完了後にテストを再開するには、そのプロミスをフックします。&lt;a href=&quot;testing#when-stable&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3b89272608dd98a701e650c77a1eb6dabd636640" translate="yes" xml:space="preserve">
          <source>To resume testing after completion of asynchronous activity or asynchronous change detection, hook that promise. See &lt;a href=&quot;testing-components-scenarios#when-stable&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">非同期アクティビティまたは非同期変更検出の完了後にテストを再開するには、そのpromiseをフックします。&lt;a href=&quot;testing-components-scenarios#when-stable&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="75267a4b8f6f0e64a2aaf97b5e57d21e9592bed6" translate="yes" xml:space="preserve">
          <source>To revert the compiler default, set the build option &lt;code&gt;aot: false&lt;/code&gt; in the &lt;code&gt;angular.json&lt;/code&gt; configuration file.</source>
          <target state="translated">コンパイラのデフォルトを元に戻すには、 &lt;code&gt;angular.json&lt;/code&gt; 構成ファイルでビルドオプション &lt;code&gt;aot: false&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="c9f7479c96fe5dbd95ef07ceac53b3c6f29bcbc0" translate="yes" xml:space="preserve">
          <source>To review a complete list of changes, organized by version, see the &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular change log&lt;/a&gt;.</source>
          <target state="translated">バージョンごとにまとめられた変更の完全なリストを確認するには、&lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular変更ログを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9431c2209f7aafa5c97b655421d8f332f66b82cb" translate="yes" xml:space="preserve">
          <source>To run in VS with F5</source>
          <target state="translated">F5でVSで実行するには</target>
        </trans-unit>
        <trans-unit id="c7b8b861dfdc4cde711a32872c93fbcde33dd655" translate="yes" xml:space="preserve">
          <source>To run our builder with the new target's default configuration, use the following CLI command in a Linux shell.</source>
          <target state="translated">新しいターゲットのデフォルト設定でビルダーを実行するには、Linux シェルで以下の CLI コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="0fde64751caa86a1be2593adb8f8b511a7f690bd" translate="yes" xml:space="preserve">
          <source>To run the dev server with this proxy configuration, call &lt;code&gt;ng serve&lt;/code&gt;.</source>
          <target state="translated">このプロキシ設定で開発サーバーを実行するには、 &lt;code&gt;ng serve&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a927d68bbfb0db6ef570d00d34818dc1e9fa2fda" translate="yes" xml:space="preserve">
          <source>To see &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; examples with different form control types, see:</source>
          <target state="translated">フォームコントロールタイプが異なる &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; の例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="8dc5a6c3881a1c518a3093382f57be5a945c82be" translate="yes" xml:space="preserve">
          <source>To see attribute, class, and style bindings in a functioning app, see the  especially for this section.</source>
          <target state="translated">機能するアプリの属性、クラス、スタイルのバインディングについては、特にこのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2066c3f9e99ddeda033de3aa56599325b3da329c" translate="yes" xml:space="preserve">
          <source>To see attributes versus DOM properties in a functioning app, see the  especially for binding syntax.</source>
          <target state="translated">機能するアプリの属性とDOMプロパティを見るには、特にバインディング構文を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d7d156616f25e6db5028a775121a671a84735d4" translate="yes" xml:space="preserve">
          <source>To see how the classes are added and removed by the framework, open the browser's developer tools and inspect the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element that represents the hero name.</source>
          <target state="translated">フレームワークによってクラスがどのように追加および削除されるかを確認するには、ブラウザーの開発ツールを開き、ヒーロー名を表す &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素を調べます。</target>
        </trans-unit>
        <trans-unit id="cd33799f99a3c33eec695a0b9c438c5302870973" translate="yes" xml:space="preserve">
          <source>To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</source>
          <target state="translated">再度表示したり、プロジェクトで作業した後にテストしたりするには、ネットワークタブの左上にある線の入った円をクリックして、すべてを消去します。</target>
        </trans-unit>
        <trans-unit id="b8edcb73a089af2f51a98af2512826e990b45344" translate="yes" xml:space="preserve">
          <source>To see the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; working, you can add the following to the parent's template:</source>
          <target state="translated">表示するには &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 作業を、あなたは親のテンプレートに以下を追加することができます。</target>
        </trans-unit>
        <trans-unit id="ee06c99b240c3cdf0c41541163f7f2fc33c71e72" translate="yes" xml:space="preserve">
          <source>To see the &lt;code&gt;disabled&lt;/code&gt; button example in a functioning app, see the  especially for binding syntax. This example shows you how to toggle the disabled property from the component.</source>
          <target state="translated">機能しているアプリで &lt;code&gt;disabled&lt;/code&gt; ボタンの例を確認するには、特にバインディング構文を参照してください。この例では、コンポーネントから無効化されたプロパティを切り替える方法を示します。</target>
        </trans-unit>
        <trans-unit id="3c298523d5d662629912091f2a811ab71db25f4f" translate="yes" xml:space="preserve">
          <source>To see the difference between using &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;, add another component to the example and call it &lt;code&gt;InspectorComponent&lt;/code&gt;. &lt;code&gt;InspectorComponent&lt;/code&gt; will be a child of the &lt;code&gt;ChildComponent&lt;/code&gt;. In &lt;code&gt;inspector.component.ts&lt;/code&gt;, inject the &lt;code&gt;FlowerService&lt;/code&gt; and &lt;code&gt;AnimalService&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の使用の違いを確認するには、例に別のコンポーネントを追加して、それを &lt;code&gt;InspectorComponent&lt;/code&gt; と呼びます。 &lt;code&gt;InspectorComponent&lt;/code&gt; は &lt;code&gt;ChildComponent&lt;/code&gt; の子になります。で &lt;code&gt;inspector.component.ts&lt;/code&gt; 、注入 &lt;code&gt;FlowerService&lt;/code&gt; と &lt;code&gt;AnimalService&lt;/code&gt; をコンストラクタで：</target>
        </trans-unit>
        <trans-unit id="e9f41061551c1e503e601101ecf2720e11a2979b" translate="yes" xml:space="preserve">
          <source>To see the difference between using &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt;, add another component to the example and call it &lt;code&gt;InspectorComponent&lt;/code&gt;. &lt;code&gt;InspectorComponent&lt;/code&gt; will be a child of the &lt;code&gt;ChildComponent&lt;/code&gt;. In &lt;code&gt;inspector.component.ts&lt;/code&gt;, inject the &lt;code&gt;FlowerService&lt;/code&gt; and &lt;code&gt;AnimalService&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;viewProviders&lt;/code&gt; の使用の違いを確認するには、例に別のコンポーネントを追加して、 &lt;code&gt;InspectorComponent&lt;/code&gt; と呼びます。 &lt;code&gt;InspectorComponent&lt;/code&gt; は、 &lt;code&gt;ChildComponent&lt;/code&gt; の子になります。で &lt;code&gt;inspector.component.ts&lt;/code&gt; 、注入 &lt;code&gt;FlowerService&lt;/code&gt; と &lt;code&gt;AnimalService&lt;/code&gt; をコンストラクタで：</target>
        </trans-unit>
        <trans-unit id="7426a6c423585d610bffc9572304cb82a2152a88" translate="yes" xml:space="preserve">
          <source>To see the error, open the browser development tools and look in the console for a message like</source>
          <target state="translated">エラーを確認するには、ブラウザの開発ツールを開き、コンソールで次のようなメッセージを確認します。</target>
        </trans-unit>
        <trans-unit id="f73daa4c6554c2966552e22cb0bf684bb0109fbc" translate="yes" xml:space="preserve">
          <source>To see the new &quot;Buy&quot; button, refresh the application and click on a product's name to display its details.</source>
          <target state="translated">新しい「購入」ボタンを確認するには、アプリをリフレッシュし、商品名をクリックすると詳細が表示されます。</target>
        </trans-unit>
        <trans-unit id="5f23726a83ac2bd2efd5087ef3b709a56d3f0856" translate="yes" xml:space="preserve">
          <source>To see the new cart component, click the &quot;Checkout&quot; button. You can see the &quot;cart works!&quot; default text, and the URL has the pattern &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt;, where &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; may be different for your StackBlitz project.</source>
          <target state="translated">新しいカートコンポーネントを表示するには、[チェックアウト]ボタンをクリックします。「カートワークス！」をご覧いただけます。デフォルトのテキスト、およびURLはパターンがある &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt; 、 &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; はあなたのStackBlitzプロジェクトのために異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="c61ac58ea53a8acce49524c72714aac95d91562d" translate="yes" xml:space="preserve">
          <source>To see the progress bar in a working example app, refer to the live example.</source>
          <target state="translated">作業例アプリでプログレスバーを見るには、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="51762df269fa74951660bcc92b3a1d8f604aa3bc" translate="yes" xml:space="preserve">
          <source>To see this HTML in the &lt;code&gt;AppComponent&lt;/code&gt;, you first have to export the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; in the &lt;code&gt;CustomerDashboardModule&lt;/code&gt;. In &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;, just beneath the &lt;code&gt;declarations&lt;/code&gt; array, add an &lt;code&gt;exports&lt;/code&gt; array containing &lt;code&gt;CustomerDashboardComponent&lt;/code&gt;:</source>
          <target state="translated">このHTMLを表示するには &lt;code&gt;AppComponent&lt;/code&gt; 、あなたが最初にエクスポートする必要があり &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; をして &lt;code&gt;CustomerDashboardModule&lt;/code&gt; 。で &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; 、直下 &lt;code&gt;declarations&lt;/code&gt; 配列、追加 &lt;code&gt;exports&lt;/code&gt; 含む配列 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="a7f192efea8de2bd06b45b2f3bf2d52e4f1a15ca" translate="yes" xml:space="preserve">
          <source>To see this in action, make a small change to &lt;code&gt;app.component.ts&lt;/code&gt; and save. The tests run again, the browser refreshes, and the new test results appear.</source>
          <target state="translated">この動作を確認するには、 &lt;code&gt;app.component.ts&lt;/code&gt; に小さな変更を加えて保存します。テストが再度実行され、ブラウザが更新され、新しいテスト結果が表示されます。</target>
        </trans-unit>
        <trans-unit id="259f775be5923c9da2e22cf62bebce4455141afc" translate="yes" xml:space="preserve">
          <source>To see this in code, assume that the following value for &lt;code&gt;emoji&lt;/code&gt; is what the parent component were using, as in this service:</source>
          <target state="translated">コードでこれを確認するには、このサービスのように、 &lt;code&gt;emoji&lt;/code&gt; の次の値が親コンポーネントが使用しているものであると想定します。</target>
        </trans-unit>
        <trans-unit id="313d4c9e867864b90c0aa8a60f26818055d0d0a2" translate="yes" xml:space="preserve">
          <source>To see which browsers are supported and determine which settings meet to your browser support requirements, see the &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist compatibility page&lt;/a&gt;.</source>
          <target state="translated">サポートされているブラウザを確認し、ブラウザのサポート要件を満たす設定を確認するには、&lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;ブラウザリストの互換性ページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a0b5f297034732e98b08f028549d29a0bc5b1e6b" translate="yes" xml:space="preserve">
          <source>To see which browsers are supported with the above configuration, see which settings meet to your browser support requirements, see the &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist compatibility page&lt;/a&gt;.</source>
          <target state="translated">上記の構成でサポートされているブラウザーを確認するには、ブラウザーのサポート要件を満たす設定を確認して&lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;ください&lt;/a&gt;。また、ブラウザーリストの互換性ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="2aecb05bd9c819562cf2d14d979e8185016e3fb1" translate="yes" xml:space="preserve">
          <source>To see your app in the browser so far, enter the following command in the terminal window:</source>
          <target state="translated">今のところブラウザでアプリを確認するには、ターミナルウィンドウで以下のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="0168972e648316f2f298a0e543248db30d7052e5" translate="yes" xml:space="preserve">
          <source>To select the styles within the component, add a &lt;code&gt;styles&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator that contains the styles you want to use.</source>
          <target state="translated">コンポーネント内のスタイルを選択するには、追加 &lt;code&gt;styles&lt;/code&gt; にプロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 使用したいスタイルを含むデコレータ。</target>
        </trans-unit>
        <trans-unit id="885269644ec508e0ea2156adee77813993bb242f" translate="yes" xml:space="preserve">
          <source>To serve the directory containing your web files with &lt;code&gt;http-server&lt;/code&gt;, run the following command:</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; でWebファイルを含むディレクトリを提供するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="5ed3709eb5f5a055a34096a95375f8c97670231b" translate="yes" xml:space="preserve">
          <source>To set a property of a directive, place the directive within square brackets , such as &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]&lt;/code&gt;, followed by an equal sign and the property. Here, the property is &lt;code&gt;classes&lt;/code&gt;.</source>
          <target state="translated">ディレクティブのプロパティを設定するには、 &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]&lt;/code&gt; などの角括弧内にディレクティブを配置し、その後に等号とプロパティを続けます。ここで、プロパティは &lt;code&gt;classes&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0c073e0977df21697005c90ce800e73a2b92cb98" translate="yes" xml:space="preserve">
          <source>To set the components encapsulation mode, use the &lt;code&gt;encapsulation&lt;/code&gt; property in the component metadata:</source>
          <target state="translated">コンポーネントのカプセル化モードを設定するには、コンポーネントのメタデータで &lt;code&gt;encapsulation&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="7d43a0bd727324080ea5709ed75d717fa991dc17" translate="yes" xml:space="preserve">
          <source>To set the model property of a custom component, place the target, here &lt;code&gt;childItem&lt;/code&gt;, between square brackets &lt;code&gt;[]&lt;/code&gt; followed by an equal sign and the property. Here, the property is &lt;code&gt;parentItem&lt;/code&gt;.</source>
          <target state="translated">カスタムコンポーネントのモデルプロパティを設定するには、ターゲット（ここでは &lt;code&gt;childItem&lt;/code&gt; ）を角かっこ &lt;code&gt;[]&lt;/code&gt; の間に配置し、その後に等号とプロパティを続けます。ここで、プロパティは &lt;code&gt;parentItem&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3758c4ecb4f9914c32c58041e427ee3538c11cd2" translate="yes" xml:space="preserve">
          <source>To set up a monorepo workspace, you should skip the creating the root application. See &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;Setting up for a multi-project workspace&lt;/a&gt; below.</source>
          <target state="translated">monorepoワークスペースをセットアップするには、ルートアプリケーションの作成をスキップする必要があります。以下の&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;マルチプロジェクトワークスペースの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="17ba6dfedabd7c2dcc203b83d60567d69a920bd6" translate="yes" xml:space="preserve">
          <source>To set up a redirect, configure a route with the &lt;code&gt;path&lt;/code&gt; you want to redirect from, the &lt;code&gt;component&lt;/code&gt; you want to redirect to, and a &lt;code&gt;pathMatch&lt;/code&gt; value that tells the router how to match the URL.</source>
          <target state="translated">リダイレクトを設定するには、リダイレクト元の &lt;code&gt;path&lt;/code&gt; 、リダイレクト先の &lt;code&gt;component&lt;/code&gt; 、およびURLの照合方法をルーターに指示する &lt;code&gt;pathMatch&lt;/code&gt; 値を使用してルートを構成します。</target>
        </trans-unit>
        <trans-unit id="87160d640bd0df010d3acad99e9a90a16c40fa62" translate="yes" xml:space="preserve">
          <source>To set up a wildcard route, add the following code to your &lt;code&gt;routes&lt;/code&gt; definition.</source>
          <target state="translated">ワイルドカードルートを設定するには、 &lt;code&gt;routes&lt;/code&gt; 定義に次のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="d47642c5fa808e4e1650b0efd2f81da7bfc8bfcf" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI &lt;code&gt;add&lt;/code&gt; command.</source>
          <target state="translated">プロジェクトにAngular Service Workerを設定するには、CLI &lt;code&gt;add&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="7d4bc7469b3a5e6cf5c595d20bd4518bf745d39d" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI command &lt;code&gt;ng add @angular/pwa&lt;/code&gt;. It takes care of configuring your app to use service workers by adding the &lt;code&gt;service-worker&lt;/code&gt; package along with setting up the necessary support files.</source>
          <target state="translated">プロジェクトにAngular Service Workerを設定するには、CLIコマンド &lt;code&gt;ng add @angular/pwa&lt;/code&gt; 使用します。必要なサポートファイルを設定するとともに &lt;code&gt;service-worker&lt;/code&gt; パッケージを追加することで、Service Workerを使用するようにアプリを構成します。</target>
        </trans-unit>
        <trans-unit id="8dc80e025131d2a69acf3fb7e053f667fec10a2e" translate="yes" xml:space="preserve">
          <source>To set up the Getting Started files with an &lt;strong&gt;ASP.NET 4.x project&lt;/strong&gt; in Visual Studio 2015, follow these steps:</source>
          <target state="translated">Visual Studio 2015の&lt;strong&gt;ASP.NET 4.xプロジェクト&lt;/strong&gt;でGetting Startedファイルを設定するには、次の手順に従います。</target>
        </trans-unit>
        <trans-unit id="de142fa8fc921e821213670b35614aa8b3250c8c" translate="yes" xml:space="preserve">
          <source>To set up the component after Angular sets the input properties.</source>
          <target state="translated">Angularが入力プロパティを設定した後にコンポーネントを設定するため。</target>
        </trans-unit>
        <trans-unit id="e1f243210a5ae29b5fc9889478313e44836e9435" translate="yes" xml:space="preserve">
          <source>To set up your development environment, follow the instructions in &lt;a href=&quot;../guide/setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">開発環境を&lt;a href=&quot;../guide/setup-local&quot;&gt;セットアップ&lt;/a&gt;するには、ローカル環境セットアップの指示に従ってください。</target>
        </trans-unit>
        <trans-unit id="55a75d1552367c5e1de12884866f853585f7045d" translate="yes" xml:space="preserve">
          <source>To show a response to form submission, you can hide the data entry area and display something else in its place.</source>
          <target state="translated">フォーム送信のレスポンスを表示するには、データ入力エリアを非表示にして、その場所に何か別のものを表示することができます。</target>
        </trans-unit>
        <trans-unit id="2e5b11e822500092ff12f34d510eb08a95feb8aa" translate="yes" xml:space="preserve">
          <source>To show how Angular calls the hooks in the expected order, the &lt;code&gt;PeekABooComponent&lt;/code&gt; demonstrates all of the hooks in one component.</source>
          <target state="translated">Angularが期待される順序でフックを呼び出す方法を示すために、 &lt;code&gt;PeekABooComponent&lt;/code&gt; は1つのコンポーネント内のすべてのフックを示しています。</target>
        </trans-unit>
        <trans-unit id="2bb411516c904297b7758e27653c5476ac34dcac" translate="yes" xml:space="preserve">
          <source>To show something else while the form is in the submitted state, add the following HTML below the new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapper.</source>
          <target state="translated">フォームが送信済みの状態で他の何かを表示するには、新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ラッパーの下に次のHTMLを追加します。</target>
        </trans-unit>
        <trans-unit id="85c6814e145f8869d0c23c45827073818298e9fc" translate="yes" xml:space="preserve">
          <source>To simplify the Angular mental model and learning journey, we&amp;rsquo;ll be working on making NgModules optional. This work will allow developers to develop standalone components and implement an alternative API for declaring the component&amp;rsquo;s compilation scope.</source>
          <target state="translated">Angularメンタルモデルと学習の旅を簡素化するために、NgModulesをオプションにすることに取り組んでいます。この作業により、開発者はスタンドアロンコンポーネントを開発し、コンポーネントのコンパイルスコープを宣言するための代替APIを実装できます。</target>
        </trans-unit>
        <trans-unit id="e19731bed4fa9ad865f132552125887ef1add447" translate="yes" xml:space="preserve">
          <source>To simplify the writing process for contributing authors. This guide helps you make decisions about tone, voice, and style. It also helps you find the right markup quickly.</source>
          <target state="translated">貢献する著者のための執筆プロセスを簡素化するために。このガイドは、トーン、声、スタイルについての決定を支援します。また、適切なマークアップを素早く見つけるのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="367649fb6abb3b384169647dba62b78e8155b4e1" translate="yes" xml:space="preserve">
          <source>To simulate a network issue, disable network interaction for your application. In Chrome:</source>
          <target state="translated">ネットワークの問題をシミュレートするには、アプリケーションのネットワーク インタラクションを無効にします。Chromeの場合。</target>
        </trans-unit>
        <trans-unit id="f88ded5fc1c640f4a2bd9755a49fe8b90817554c" translate="yes" xml:space="preserve">
          <source>To simulate user input, you can find the input element and set its &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="translated">ユーザー入力をシミュレートするために、入力要素を見つけてその &lt;code&gt;value&lt;/code&gt; プロパティを設定できます。</target>
        </trans-unit>
        <trans-unit id="740da28ed7f431cf8963e67cef151e88bd5e2bbf" translate="yes" xml:space="preserve">
          <source>To skip the download link, add the &lt;code&gt;noDownload&lt;/code&gt; attribute.</source>
          <target state="translated">ダウンロードリンクをスキップするには、 &lt;code&gt;noDownload&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="966fbbefbe372b65e80303ab34559f1ffc260f0b" translate="yes" xml:space="preserve">
          <source>To skip the live Stackblitz link and only link to the download, add the &lt;code&gt;downloadOnly&lt;/code&gt; attribute.</source>
          <target state="translated">Stackblitzのライブリンクをスキップして、ダウンロードへのリンクのみにするには、 &lt;code&gt;downloadOnly&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="29494e913f1a0369be80f182fabb95c5657eb764" translate="yes" xml:space="preserve">
          <source>To specify a component's selector, add a &lt;code&gt;selector&lt;/code&gt; statement to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">コンポーネントのセレクターを指定するには、 &lt;code&gt;selector&lt;/code&gt; ステートメントを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレーターに追加します。</target>
        </trans-unit>
        <trans-unit id="db1413d1ae3c4ee0a501b822d414f2ad1d34357e" translate="yes" xml:space="preserve">
          <source>To specify a relative route, use the &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;&lt;code&gt;relativeTo&lt;/code&gt; property. In the component class, import &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt;.</source>
          <target state="translated">相対的なルートを指定するには、使用 &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; &lt;code&gt;relativeTo&lt;/code&gt; でのプロパティを。コンポーネントクラスで、 &lt;code&gt;@angular/router&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="f8731b4e458c672aaa52607bacd794fdaab471d5" translate="yes" xml:space="preserve">
          <source>To specify a value transformation in an HTML template, use the &lt;a href=&quot;template-expression-operators#pipe&quot;&gt;pipe operator (|)&lt;/a&gt;.</source>
          <target state="translated">HTMLテンプレートで値変換を指定するには、&lt;a href=&quot;template-expression-operators#pipe&quot;&gt;パイプ演算子（|）を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ab87060eaf2297eb5463559b81f0a81cc8881cda" translate="yes" xml:space="preserve">
          <source>To specify a value transformation in an HTML template, use the &lt;a href=&quot;template-syntax#pipe&quot;&gt;pipe operator (|)&lt;/a&gt;.</source>
          <target state="translated">HTMLテンプレートで値の変換を指定するには、&lt;a href=&quot;template-syntax#pipe&quot;&gt;パイプ演算子（|）を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8c26bd8dbf7d5d26bb6a0711698f315370497669" translate="yes" xml:space="preserve">
          <source>To specify offset styles to be applied at a later time, define steps with &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;, or use &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls with a delay value. For example:</source>
          <target state="translated">後で適用するオフセットスタイルを指定するには、 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; でステップを定義するか、遅延値を指定して &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 呼び出しを使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="098c0b9849214a70fc7726b8c68b61855e17df7b" translate="yes" xml:space="preserve">
          <source>To specify the response object type, first define an interface with the required properties. (Use an interface rather than a class; a response cannot be automatically converted to an instance of a class.)</source>
          <target state="translated">レスポンス・オブジェクト・タイプを指定するには、まず、必要なプロパティを持つインターフェイスを定義します (クラスではなくインターフェイスを使用します。レスポンスを自動的にクラスのインスタンスに変換することはできません)。</target>
        </trans-unit>
        <trans-unit id="0c4feee65eebb074487af0d268f0a2b8a6b99056" translate="yes" xml:space="preserve">
          <source>To specify the response object type, first define an interface with the required properties. Use an interface rather than a class, because the response is a plain object that cannot be automatically converted to an instance of a class.</source>
          <target state="translated">レスポンス・オブジェクト・タイプを指定するには、まず、必要なプロパティを持つインターフェイスを定義します。レスポンスはプレーンなオブジェクトであり、自動的にクラスのインスタンスに変換することはできないため、クラスではなくインターフェイスを使用します。</target>
        </trans-unit>
        <trans-unit id="dde8a2ef8d669c63a62cff50f1d6396d1cb88adf" translate="yes" xml:space="preserve">
          <source>To start a collection, you need to create the schematic files. The following steps show you how to add initial support without modifying any project files.</source>
          <target state="translated">コレクションを開始するには、回路図ファイルを作成する必要があります。次の手順では、プロジェクトファイルを変更せずに初期サポートを追加する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="675df4470cdabe4f5cbe7c6f1ee4baa2a9761571" translate="yes" xml:space="preserve">
          <source>To start a new project with Ivy enabled, use the &lt;code&gt;--enable-ivy&lt;/code&gt; flag with the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">Ivyを有効にして新しいプロジェクトを開始するには、&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;コマンドで &lt;code&gt;--enable-ivy&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="cc42865ce59ef8db7b918c51096cb7b9d9d767ba" translate="yes" xml:space="preserve">
          <source>To start rendering your app with Universal on your local system, use the following command.</source>
          <target state="translated">ローカルシステムでUniversalを使用してアプリのレンダリングを開始するには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="e1c7b5759322bd72b7a70ff587712b48f2342170" translate="yes" xml:space="preserve">
          <source>To stop using the Ivy compiler, set &lt;code&gt;enableIvy&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;tsconfig.app.json&lt;/code&gt;, or remove it completely. Also remove &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; from your default build options if you didn't have it there before.</source>
          <target state="translated">アイビーコンパイラを使用して停止するには、設定 &lt;code&gt;enableIvy&lt;/code&gt; をする &lt;code&gt;false&lt;/code&gt; で &lt;code&gt;tsconfig.app.json&lt;/code&gt; 、またはそれを完全に削除します。また、 &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; 削除します。以前に作成していなかった場合は、デフォルトのビルドオプションからtrueにします。</target>
        </trans-unit>
        <trans-unit id="d3c09441693602ca793b2b01b4f9af8a0248fabc" translate="yes" xml:space="preserve">
          <source>To streamline the syntax, the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive hides the details behind its own &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input and &lt;code&gt;ngModelChange&lt;/code&gt; output properties:</source>
          <target state="translated">構文を簡素化するために、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブは、独自の &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 入力プロパティと &lt;code&gt;ngModelChange&lt;/code&gt; 出力プロパティの背後にある詳細を非表示にします。</target>
        </trans-unit>
        <trans-unit id="39b4d5704426ff8a7639bccde11ece39d8b3aeb6" translate="yes" xml:space="preserve">
          <source>To subscribe, call &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt;, which asks the user for permission. The call returns a &lt;code&gt;Promise&lt;/code&gt; with a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt;&lt;code&gt;PushSubscription&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">サブスクライブするには、ユーザーに許可を求める &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt; を呼び出します。呼び出しは、新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt; &lt;code&gt;PushSubscription&lt;/code&gt; &lt;/a&gt;インスタンスを持つ &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="091932076ef13bad443c5e0beaa6885505ec5895" translate="yes" xml:space="preserve">
          <source>To summarize, Angular found the &lt;code&gt;appHighlight&lt;/code&gt; attribute on the &lt;strong&gt;host&lt;/strong&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. It created an instance of the &lt;code&gt;HighlightDirective&lt;/code&gt; class and injected a reference to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element into the directive's constructor which sets the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element's background style to yellow.</source>
          <target state="translated">要約すると、Angular は&lt;strong&gt;ホストの&lt;/strong&gt; &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素に &lt;code&gt;appHighlight&lt;/code&gt; 属性を見つけました。 &lt;code&gt;HighlightDirective&lt;/code&gt; クラスのインスタンスを作成し、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素の背景スタイルを黄色に設定するディレクティブのコンストラクターに &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素への参照を注入しました。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cff6b03d8e8d8fe2f524818030a80391b717264" translate="yes" xml:space="preserve">
          <source>To summarize, if you mutate the input array, the pure pipe doesn't execute. If you &lt;em&gt;replace&lt;/em&gt; the input array, the pipe executes and the display is updated, as shown in Figure 4.</source>
          <target state="translated">要約すると、入力配列を変更すると、純粋なパイプは実行されません。入力配列を&lt;em&gt;置き換える&lt;/em&gt;と、図4に示すように、パイプが実行され、表示が更新されます。</target>
        </trans-unit>
        <trans-unit id="fe4b6b798619064feab05be7c141408b9ecfad03" translate="yes" xml:space="preserve">
          <source>To summarize, the key differentiating factors of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; are:</source>
          <target state="translated">要約すると、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; の主な差別化要因は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="575255fb464fe00729396b1d3b2c2522b401ddfd" translate="yes" xml:space="preserve">
          <source>To summarize, the lightweight injection token pattern consists of the following.</source>
          <target state="translated">要約すると、軽量インジェクショントークンパターンは以下のように構成されています。</target>
        </trans-unit>
        <trans-unit id="b52ca2d96bdaaa3cfb5379f6156241ff261b361a" translate="yes" xml:space="preserve">
          <source>To support these behaviors, the Angular service worker loads a &lt;em&gt;manifest&lt;/em&gt; file from the server. The manifest describes the resources to cache and includes hashes of every file's contents. When an update to the application is deployed, the contents of the manifest change, informing the service worker that a new version of the application should be downloaded and cached. This manifest is generated from a CLI-generated configuration file called &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">これらの動作をサポートするために、Angular Service Worker はサーバーから&lt;em&gt;マニフェスト&lt;/em&gt;ファイルをロードします。マニフェストは、キャッシュするリソースを記述し、すべてのファイルのコンテンツのハッシュを含みます。アプリケーションの更新がデプロイされると、マニフェストの内容が変更され、サービスワーカーにアプリケーションの新しいバージョンをダウンロードしてキャッシュする必要があることが通知されます。このマニフェストは、 &lt;code&gt;ngsw-config.json&lt;/code&gt; と呼ばれるCLI生成の構成ファイルから生成されます。</target>
        </trans-unit>
        <trans-unit id="c4ca653d202193362f15dba2ff3cfc4b0025739a" translate="yes" xml:space="preserve">
          <source>To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</source>
          <target state="translated">XSSバグを体系的にブロックするために、Angularはデフォルトですべての値を信頼されないものとして扱います。テンプレートからプロパティ、アトリビュート、スタイル、クラスバインディング、補間を経由してDOMに値が挿入されると、Angularは信頼されていない値をサニタイズしてエスケープします。</target>
        </trans-unit>
        <trans-unit id="0970ae1882f15ce0c665008456cc372de2ce2cb1" translate="yes" xml:space="preserve">
          <source>To take advantage of Angular's localization features, use the Angular CLI to add the &lt;code&gt;@angular/localize&lt;/code&gt; package to your project:</source>
          <target state="translated">Angularのローカリゼーション機能を利用するには、AngularCLIを使用して@angular &lt;code&gt;@angular/localize&lt;/code&gt; パッケージをプロジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="5c2d8661b5b005891a1e25d985a1673afb599e07" translate="yes" xml:space="preserve">
          <source>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called &lt;code&gt;XSRF-TOKEN&lt;/code&gt; on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site's authentication cookie with a salt for added security.</source>
          <target state="translated">これを利用するには、サーバーは、ページ読み込み時または最初のGETリクエスト時に、 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; と呼ばれるJavaScriptで読み取り可能なセッションCookieにトークンを設定する必要があります。後続のリクエストでは、サーバーはCookieが &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTPヘッダーと一致することを確認できるため、ドメインで実行されているコードのみがリクエストを送信できたことを確認します。トークンはユーザーごとに一意である必要があり、サーバーによって検証可能でなければなりません。これにより、クライアントは独自のトークンを作成できなくなります。トークンをサイトの認証Cookieのダイジェストに設定して、セキュリティを強化します。</target>
        </trans-unit>
        <trans-unit id="a2c3396ff07cb76eb004b09abd2396aa4cfc57b5" translate="yes" xml:space="preserve">
          <source>To take this example a little further, we can create an observable that publishes events. In this example, the subscriber function is defined inline.</source>
          <target state="translated">この例をもう少し詳しく説明すると、イベントを発行するオブザーバブルを作成することができます。この例では、サブスクライバ関数をインラインで定義しています。</target>
        </trans-unit>
        <trans-unit id="33b81c4efe4680114d1f1e1f01d20fc61854d427" translate="yes" xml:space="preserve">
          <source>To tell Angular that this is a pipe, you apply the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator, which you import from the core Angular library.</source>
          <target state="translated">これがパイプであることをAngularに伝えるには、コアAngularライブラリからインポートする &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; デコレーターを適用します。</target>
        </trans-unit>
        <trans-unit id="d69f6b79976daa71b140336b6e0fc275fb2a4a15" translate="yes" xml:space="preserve">
          <source>To tell that story in code, you'll often need to create partial files or intermediate versions of the final source code file with fragments of code that don't appear in the final app.</source>
          <target state="translated">コードでそのストーリーを伝えるために、最終的なアプリには登場しないコードの断片を使って、最終的なソースコードファイルの部分ファイルや中間バージョンを作成する必要があることがよくあります。</target>
        </trans-unit>
        <trans-unit id="41ed9ac99a1093b2313ac001a60efb09be984be6" translate="yes" xml:space="preserve">
          <source>To test a service, you set the &lt;code&gt;providers&lt;/code&gt; metadata property with an array of the services that you'll test or mock.</source>
          <target state="translated">サービスをテストするには、 &lt;code&gt;providers&lt;/code&gt; メタデータプロパティに、テストまたはモックするサービスの配列を設定します。</target>
        </trans-unit>
        <trans-unit id="0689818deab6829bbe840e4c6eba2a40a2aa0140" translate="yes" xml:space="preserve">
          <source>To test this feature, add a button with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt; template and set the link to &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt;.</source>
          <target state="translated">この機能をテストするには、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; を含むボタンを &lt;code&gt;HeroListComponent&lt;/code&gt; テンプレートに追加し、リンクを &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; sidekicks &quot;に設定します。</target>
        </trans-unit>
        <trans-unit id="086adffe268f8dce593354324e40600580cf7306" translate="yes" xml:space="preserve">
          <source>To test this feature, add a button with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt; template and set the link to a non-existant route called &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt;.</source>
          <target state="translated">この機能をテストするには、とボタンを追加 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;HeroListComponent&lt;/code&gt; のテンプレートと呼ばれる非existantルートへのリンクを設定する &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7320c49fd0ce558ab742e4ff66c77c68c95f961d" translate="yes" xml:space="preserve">
          <source>To toggle multiple styles, bind to the &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; attribute&amp;mdash;for example, &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]=&quot;styleExpression&quot;&lt;/code&gt;. The expression is often a string list of styles such as &lt;code&gt;&quot;width: 100px; height: 100px;&quot;&lt;/code&gt;.</source>
          <target state="translated">複数のスタイルを切り替えるには、 &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; 属性にバインドします（例： &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]=&quot;styleExpression&quot;&lt;/code&gt; )。式は多くの場合、 &lt;code&gt;&quot;width: 100px; height: 100px;&quot;&lt;/code&gt; などのスタイルの文字列リストです。。</target>
        </trans-unit>
        <trans-unit id="dbaff2a55143998de029e9624fcc3a49f95854ff" translate="yes" xml:space="preserve">
          <source>To translate a &lt;code&gt;plural&lt;/code&gt;, translate its ICU format match values as shown in the following example:</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; を変換するには、次の例に示すように、そのICU形式の一致値を変換します。</target>
        </trans-unit>
        <trans-unit id="ecc66d276b3225d15e06e1f1cf36defdf74d825a" translate="yes" xml:space="preserve">
          <source>To translate a &lt;code&gt;plural&lt;/code&gt;, translate its ICU format match values:</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; を翻訳するには、ICU形式の一致値を翻訳します。</target>
        </trans-unit>
        <trans-unit id="885e91781ad354087c34588828548ccdfecdb432" translate="yes" xml:space="preserve">
          <source>To translate a text message accurately, the translator may need additional information or context.</source>
          <target state="translated">テキストメッセージを正確に翻訳するためには、翻訳者は追加の情報や文脈を必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="172f56dc7a62c0fc33b328b831a5d2dc62c6fd22" translate="yes" xml:space="preserve">
          <source>To translate a text message accurately, the translator may need additional information or context. Add a &lt;em&gt;description&lt;/em&gt; of the text message as the value of the &lt;code&gt;i18n&lt;/code&gt; attribute, as shown in the following example:</source>
          <target state="translated">テキストメッセージを正確に翻訳するために、翻訳者は追加の情報またはコンテキストを必要とする場合があります。次の例に示すように、テキストメッセージの&lt;em&gt;説明&lt;/em&gt;を &lt;code&gt;i18n&lt;/code&gt; 属性の値として追加します。</target>
        </trans-unit>
        <trans-unit id="84fab147430f36a6aae6a95b3c0171b6285fbdd8" translate="yes" xml:space="preserve">
          <source>To translate your app's templates, you need to prepare the text for a translator or translation service by marking text, attributes, and other elements with the Angular &lt;code&gt;i18n&lt;/code&gt; attribute. Follow these general steps:</source>
          <target state="translated">アプリのテンプレートを翻訳するには、テキスト、属性、その他の要素にAngular &lt;code&gt;i18n&lt;/code&gt; 属性をマークして、翻訳者または翻訳サービス用のテキストを準備する必要があります。次の一般的な手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="cef6e619ff20a5d2471097479db5a249a2c82f81" translate="yes" xml:space="preserve">
          <source>To turn off this feature, run the following command:</source>
          <target state="translated">この機能をオフにするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ed33505f49ae41506ab117a8b63c6d0f85e67b26" translate="yes" xml:space="preserve">
          <source>To understand how the &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; influence service visibility differently, the following sections build a  step-by-step and compare the use of &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; in code and a logical tree.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; がサービスの可視性にどのように異なる影響を与えるかを理解するために、次のセクションでは、ステップバイステップでビルドし、コードと論理ツリーでの &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の使用を比較します。</target>
        </trans-unit>
        <trans-unit id="bc3839460aa005395112dc40509f1898a17353cd" translate="yes" xml:space="preserve">
          <source>To understand how the &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt; influence service visibility differently, the following sections build a  step-by-step and compare the use of &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt; in code and a logical tree.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;viewProviders&lt;/code&gt; サービスの可視性にどのように異なる影響を与えるかを理解するために、次のセクションでは、ステップバイステップで構築し、コードと論理ツリーでの &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;viewProviders&lt;/code&gt; 使用を比較します。</target>
        </trans-unit>
        <trans-unit id="e455f448e2a323a0da868b3a43676c8335099bb2" translate="yes" xml:space="preserve">
          <source>To understand how to provide a service or other dependency for your app, see &lt;a href=&quot;providers&quot;&gt;Providing Dependencies for an NgModule&lt;/a&gt;.</source>
          <target state="translated">アプリにサービスまたはその他の依存関係を提供する方法を理解するには、「&lt;a href=&quot;providers&quot;&gt;NgModuleに依存関係を提供する&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="3eebe2ea66d8dfa62e18d044bc45eab39aaad7bf" translate="yes" xml:space="preserve">
          <source>To update an existing project to use Ivy, set the &lt;code&gt;enableIvy&lt;/code&gt; option in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; in your project's &lt;code&gt;tsconfig.app.json&lt;/code&gt;.</source>
          <target state="translated">既存のプロジェクトを更新してIvyを使用するには、プロジェクトの &lt;code&gt;tsconfig.app.json&lt;/code&gt; の &lt;code&gt;angularCompilerOptions&lt;/code&gt; で &lt;code&gt;enableIvy&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="1159153366a5b0bd61463f3e7587ba6f306a76ab" translate="yes" xml:space="preserve">
          <source>To update from one major version to another, use the format</source>
          <target state="translated">メジャーバージョンから別のバージョンにアップデートするには、以下の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="b4726caf12aeeed22903d708d6fd9dcb3ab84cef" translate="yes" xml:space="preserve">
          <source>To update from one major version to another, use the format &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">あるメジャーバージョンから別のメジャーバージョンに &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt; するには、ng update @ angular / cli @ ^ &amp;lt;major_version&amp;gt; @ angular / core @ ^ &amp;lt;major_version&amp;gt;という形式を使用します。</target>
        </trans-unit>
        <trans-unit id="3b123945947d8bf63fcbe7c6d93a368853a6bef1" translate="yes" xml:space="preserve">
          <source>To update the &lt;code&gt;name&lt;/code&gt; property, the changed text is retrieved by following the path &lt;code&gt;$event.target.value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; プロパティを更新するには、パス &lt;code&gt;$event.target.value&lt;/code&gt; て変更されたテキストを取得します。</target>
        </trans-unit>
        <trans-unit id="47a7e6bce5ac7a94a823063c0801c7a2556444a9" translate="yes" xml:space="preserve">
          <source>To update the hero form to be a reactive form, you can use some of the same built-in validators&amp;mdash;this time, in function form, as in the following example.</source>
          <target state="translated">ヒーローフォームをリアクティブフォームに更新するには、同じ組み込みバリデーターのいくつかを使用できます。今回は、次の例のように関数形式で使用します。</target>
        </trans-unit>
        <trans-unit id="e3daec1d373f17dce64b4434537727da04314427" translate="yes" xml:space="preserve">
          <source>To update the hero form to be a reactive form, you can use some of the same built-in validators&amp;mdash;this time, in function form. See below:</source>
          <target state="translated">ヒーローフォームをリアクティブフォームに更新するには、同じ組み込みバリデーターのいくつかを使用できます。今回は、関数フォームで使用します。下記参照：</target>
        </trans-unit>
        <trans-unit id="4e65f7fd80bdb167ba344b15a71ebca3ea7cda71" translate="yes" xml:space="preserve">
          <source>To update to the next beta or pre-release version, use the &lt;code&gt;--next&lt;/code&gt; option.</source>
          <target state="translated">次のベータ版またはプレリリースバージョンに更新するには、 &lt;code&gt;--next&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="ec580f157cda9cf0f0589f7bbc29f74d7bf8bf09" translate="yes" xml:space="preserve">
          <source>To update to the next beta or pre-release version, use the &lt;code&gt;--next=true&lt;/code&gt; option.</source>
          <target state="translated">次のベータ版またはプレリリースバージョンに更新するには、 &lt;code&gt;--next=true&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="bbc501407156722afda3e86f40157fb7f056ade2" translate="yes" xml:space="preserve">
          <source>To update your apps:</source>
          <target state="translated">アプリをアップデートするには</target>
        </trans-unit>
        <trans-unit id="236685207dbef386199db70dbf04b0f668c3e20d" translate="yes" xml:space="preserve">
          <source>To update your code before support is removed, you'll want to decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch over to template-driven directives.</source>
          <target state="translated">サポートがなくなる前にコードを更新するには、リアクティブなフォームディレクティブ (およびリアクティブなフォームパターンを使って値を取得/設定する)に固執するか、テンプレート駆動型のディレクティブに切り替えるかを決める必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="8a839cde0f94f54c1db2fbd03e39cc0d94409768" translate="yes" xml:space="preserve">
          <source>To update your code before v7, you'll want to decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch over to template-driven directives.</source>
          <target state="translated">v7 より前にコードを更新するには、リアクティブなフォームディレクティブ (およびリアクティブなフォームパターンを使った値の取得/設定)に固執するか、テンプレート駆動型のディレクティブに切り替えるかを決める必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="f18488d2ffa521dc9c72e40ed167cd48cf4b0efb" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 機能を使用するには、テストセットアップファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。Angular CLIでプロジェクトを作成した場合、 &lt;code&gt;zone-testing&lt;/code&gt; はすでに &lt;code&gt;src/test.ts&lt;/code&gt; にインポートされています。</target>
        </trans-unit>
        <trans-unit id="a2482c9fc60deb6dca0d28b779cb8b73a4467b41" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 機能を使用するには、テストセットアップファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。Angular CLIでプロジェクトを作成した場合、 &lt;code&gt;zone-testing&lt;/code&gt; はすでに &lt;code&gt;src/test.ts&lt;/code&gt; にインポートされています。</target>
        </trans-unit>
        <trans-unit id="fcd9f0f5dc90f1dc24c2ca71efd33f0ee8fa954b" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 機能を使用するには、テストセットアップファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。Angular CLIを使用してプロジェクトを作成した場合、 &lt;code&gt;zone-testing&lt;/code&gt; はすでに &lt;code&gt;src/test.ts&lt;/code&gt; インポートされています。</target>
        </trans-unit>
        <trans-unit id="578a2f9ea1de8c97140bba989fef63c0e05d0b05" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, you must configure the parent and child.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; を使用するには、親と子を構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="497273ea5594306c8ea85ca98645f59289fab5d2" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, you must configure the parent and child.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を使用するには、親と子を構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="4c5cd4c387b425279202e14518a4f13f588d38ae" translate="yes" xml:space="preserve">
          <source>To use AOT with a hybrid app, you have to first set it up like any other Angular application, as shown in &lt;a href=&quot;aot-compiler&quot;&gt;the Ahead-of-time Compilation chapter&lt;/a&gt;.</source>
          <target state="translated">ハイブリッドアプリでAOTを使用するには、事前の&lt;a href=&quot;aot-compiler&quot;&gt;コンパイルの章に&lt;/a&gt;示すように、まず他のAngularアプリケーションと同様に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="dc05bdf242df5c5e52a5f7713254718034ee591f" translate="yes" xml:space="preserve">
          <source>To use Bazel in a new application, first install &lt;code&gt;@angular/bazel&lt;/code&gt; globally</source>
          <target state="translated">新しいアプリケーションで &lt;code&gt;@angular/bazel&lt;/code&gt; を使用するには、まず@ angular / bazelをグローバルにインストールします</target>
        </trans-unit>
        <trans-unit id="c3f4f3cb1895e041269196b22d5a205a95c00cb5" translate="yes" xml:space="preserve">
          <source>To use CSS grid with IE10/11, you must explicitly enable it using the &lt;code&gt;autoplace&lt;/code&gt; option. To do this, add the following to the top of the global styles file (or within a specific css selector scope):</source>
          <target state="translated">CSSグリッドをIE10 / 11で使用するには、 &lt;code&gt;autoplace&lt;/code&gt; オプションを使用して明示的に有効にする必要があります。これを行うには、グローバルスタイルファイルの先頭（または特定のcssセレクタースコープ内）に以下を追加します。</target>
        </trans-unit>
        <trans-unit id="adbc1c0149aa2c996df7fd94085915ea70c1dfcf" translate="yes" xml:space="preserve">
          <source>To use a select in a template-driven form, simply add an &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt; attribute to the main &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">テンプレート駆動型フォームで選択を使用するには、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; 属性をメインの &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; タグに追加するだけです。</target>
        </trans-unit>
        <trans-unit id="1e2bb110d6290afebb75094727d3cf27ca37ffb2" translate="yes" xml:space="preserve">
          <source>To use attribute binding with the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; attribute &lt;code&gt;colspan&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 属性 &lt;code&gt;colspan&lt;/code&gt; で属性バインディングを使用するには：</target>
        </trans-unit>
        <trans-unit id="0ca88cb17e7b1914d4b8afd6842937291337a45f" translate="yes" xml:space="preserve">
          <source>To use pipes you should have a basic understanding of the following:</source>
          <target state="translated">パイプを使うためには、以下のことを基本的に理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="134e2c6b074bceb43e2c937a59dfdbe82522807e" translate="yes" xml:space="preserve">
          <source>To use reactive form controls, import &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; package and add it to your NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; フォームコントロールを使用するには、 &lt;code&gt;@angular/forms&lt;/code&gt; パッケージからReactiveFormsModuleをインポートし、それをNgModuleの &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="d9a033cbec8595c7b94a782a7c20d201108cbb14" translate="yes" xml:space="preserve">
          <source>To use reactive forms, import &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; package and add it to your NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; フォームを使用するには、 &lt;code&gt;@angular/forms&lt;/code&gt; パッケージからReactiveFormsModuleをインポートし、それをNgModuleの &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="795604549bb75622c86eb22a8a3537118214bc43" translate="yes" xml:space="preserve">
          <source>To use route guards, consider using component-less routes as this facilitates guarding child routes.</source>
          <target state="translated">ルートガードを使用するには、子ルートのガードが容易になるように、コンポーネントレスルートの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="99b05aeea7ad8c9ff74a29d0c307334f8ae5a9cc" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt;, import the symbol from &lt;code&gt;@angular/common/upgrade&lt;/code&gt; and add it to your &lt;code&gt;AppModule&lt;/code&gt; imports using the static &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt; を使用するには、 &lt;code&gt;@angular/common/upgrade&lt;/code&gt; からシンボルをインポートし、静的な &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; メソッドを使用して &lt;code&gt;AppModule&lt;/code&gt; インポートに追加します。</target>
        </trans-unit>
        <trans-unit id="3ae96bb53c4ba4ef32b382b3c0895785d1dbb38d" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component class, first import &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and then decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, as in the following example.</source>
          <target state="translated">使用するには &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 子コンポーネントクラスのデコレータ、第一輸入 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; した後でプロパティを飾る &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 次の例のように、。</target>
        </trans-unit>
        <trans-unit id="df43dc8c1dde95936358a838f639abe20aaeb53b" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component class, first import &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and then decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">子コンポーネントクラスで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレータを使用するには、最初に &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; をインポートしてから、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティを装飾します。</target>
        </trans-unit>
        <trans-unit id="d4922d09d3f66928b67e63af20c190e526abbeb7" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;ng deploy&lt;/code&gt; command, use &lt;code&gt;ng add&lt;/code&gt; to add a package that implements deployment capabilities to your favorite platform. Adding the package automatically updates your workspace configuration, adding a deployment &lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI builder&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;ng deploy&lt;/code&gt; コマンドを使用するには、 &lt;code&gt;ng add&lt;/code&gt; を使用して、デプロイメント機能を実装するパッケージをお気に入りのプラットフォームに追加します。パッケージを追加すると、ワークスペース構成が自動的に更新され、デプロイメント&lt;a href=&quot;../guide/cli-builder&quot;&gt;CLIビルダーが&lt;/a&gt;追加されます。例えば：</target>
        </trans-unit>
        <trans-unit id="61742a0d0031401384bd80c8bfa4431f59daa8a1" translate="yes" xml:space="preserve">
          <source>To use the Angular framework, you should be familiar with the following:</source>
          <target state="translated">Angularフレームワークを使うためには、以下のようなことに慣れておく必要があります。</target>
        </trans-unit>
        <trans-unit id="f99f05f6ce8842a8205cc3644b5e73ca6f6cb435" translate="yes" xml:space="preserve">
          <source>To use the Angular router, an app needs to have at least two components so that it can navigate from one to the other. To create a component using the CLI, enter the following at the command line where &lt;code&gt;first&lt;/code&gt; is the name of your component:</source>
          <target state="translated">Angularルーターを使用するには、アプリが1つから別のコンポーネントに移動できるように、少なくとも2つのコンポーネントが必要です。CLIを使用してコンポーネントを作成するには、コマンドラインで次のように入力します。 &lt;code&gt;first&lt;/code&gt; はコンポーネントの名前です。</target>
        </trans-unit>
        <trans-unit id="4e5078f362fa8e75b589c64aa05c23c8c2894e2d" translate="yes" xml:space="preserve">
          <source>To use the Language Service for in-line templates, you must first add an extension to allow TypeScript, then install the Angular Language Service plug-in. Starting with TypeScript 2.3, TypeScript has a plug-in model that the language service can use.</source>
          <target state="translated">インラインテンプレートで言語サービスを使用するには、まず、TypeScriptを許可する拡張機能を追加してから、Angular Language Serviceプラグインをインストールする必要があります。TypeScript 2.3から、TypeScriptには言語サービスが使用できるプラグインモデルがあります。</target>
        </trans-unit>
        <trans-unit id="d456e2ebd07067eb97a027965223c7abb3f733d7" translate="yes" xml:space="preserve">
          <source>To use the environment configurations you have defined, your components must import the original environments file:</source>
          <target state="translated">定義した環境設定を使用するには、コンポーネントが元の環境ファイルをインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="f5d7e74575342444e96fc87e2007c4383a5ce53c" translate="yes" xml:space="preserve">
          <source>To use the new &lt;code&gt;HighlightDirective&lt;/code&gt;, add a paragraph (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) element to the template of the root &lt;code&gt;AppComponent&lt;/code&gt; and apply the directive as an attribute.</source>
          <target state="translated">新しい &lt;code&gt;HighlightDirective&lt;/code&gt; を使用するには、ルート &lt;code&gt;AppComponent&lt;/code&gt; のテンプレートに段落（ &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ）要素を追加し、ディレクティブを属性として適用します。</target>
        </trans-unit>
        <trans-unit id="1aa16e54cdfeb57cd99e53decbadafdfb1ec740f" translate="yes" xml:space="preserve">
          <source>To use the property, you must declare it in the class, which in this example is &lt;code&gt;AppComponent&lt;/code&gt;. The value of &lt;code&gt;classes&lt;/code&gt; is &lt;code&gt;special&lt;/code&gt;.</source>
          <target state="translated">プロパティを使用するには、クラス（この例では &lt;code&gt;AppComponent&lt;/code&gt; )でプロパティを宣言する必要があります。 &lt;code&gt;classes&lt;/code&gt; の値は &lt;code&gt;special&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6ef78e3fbfe7e791fb6b54a58fe45a757bce01ad" translate="yes" xml:space="preserve">
          <source>To use the same instance of &lt;code&gt;HttpInterceptors&lt;/code&gt; for the entire app, import the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in your &lt;code&gt;AppModule&lt;/code&gt;, and add the interceptors to the root application injector . If you import &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; multiple times across different modules (for example, in lazy loading modules), each import creates a new copy of the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, which overwrites the interceptors provided in the root module.</source>
          <target state="translated">同じインスタンスを使用するには &lt;code&gt;HttpInterceptors&lt;/code&gt; を、アプリケーション全体のインポート &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をのみ、あなたに &lt;code&gt;AppModule&lt;/code&gt; 、およびルートアプリケーションインジェクタにインターセプタを追加します。異なるモジュール間で &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を複数回インポートすると（たとえば、遅延読み込みモジュールで）、インポートするたびに &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; の新しいコピーが作成され、ルートモジュールで提供されているインターセプターが上書きされます。</target>
        </trans-unit>
        <trans-unit id="862ac8fcf9776d649025ec8678ccd0c4bc9fb24a" translate="yes" xml:space="preserve">
          <source>To use the target and the property, you must declare them in their respective classes.</source>
          <target state="translated">ターゲットとプロパティを使用するには、それぞれのクラスで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="8a1652d0cb403164496c7c6e9915242c358c810d" translate="yes" xml:space="preserve">
          <source>To use this directive you must provide a container element that sets the &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; attribute to a switch expression. Inner elements with a &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; will display based on their expression:</source>
          <target state="translated">このディレクティブを使用するには、 &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; 属性をスイッチ式に設定するコンテナー要素を提供する必要があります。 &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; を含む内部要素は、その式に基づいて表示されます。</target>
        </trans-unit>
        <trans-unit id="bec1df521164ef700b40c0abfb52f86f1e693028" translate="yes" xml:space="preserve">
          <source>To use this service, add it to your component or directive as a dependency. The service is instantiated along with your component.</source>
          <target state="translated">このサービスを使うには、依存関係としてコンポーネントやディレクティブに追加してください。サービスはコンポーネントと一緒にインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="3b6be3fc2dc7edbb46b0b1ec51c5955d3e6888c2" translate="yes" xml:space="preserve">
          <source>To use your locale definition in the build configuration, use the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option in &lt;code&gt;angular.json&lt;/code&gt; to tell the CLI which locales to generate for the build configuration:</source>
          <target state="translated">ビルド構成でロケール定義を使用するには、 &lt;code&gt;angular.json&lt;/code&gt; の &lt;code&gt;&quot;localize&quot;&lt;/code&gt; オプションを使用して、ビルド構成用に生成するロケールをCLIに指示します。</target>
        </trans-unit>
        <trans-unit id="cd30c23cd4c148ec7cf06d7ae5e25c0dc72d20b3" translate="yes" xml:space="preserve">
          <source>To use your new components, import them into &lt;code&gt;AppRoutingModule&lt;/code&gt; at the top of the file, as follows:</source>
          <target state="translated">新しいコンポーネントを使用するには、次のように、ファイルの先頭にある &lt;code&gt;AppRoutingModule&lt;/code&gt; にそれらをインポートします。</target>
        </trans-unit>
        <trans-unit id="ec400ea96c2fce5839cbfdc718a80a3377af0601" translate="yes" xml:space="preserve">
          <source>To use your own library in an app:</source>
          <target state="translated">自分のライブラリをアプリで使うために</target>
        </trans-unit>
        <trans-unit id="3c973408d2448836192162ca55537f91af2a75f7" translate="yes" xml:space="preserve">
          <source>To validate the links, you don't need the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate and you don't need the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; to mark where the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; inserts &lt;em&gt;routed components&lt;/em&gt;.</source>
          <target state="translated">リンクを検証するために、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; をナビゲートする必要はなく、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; が&lt;em&gt;ルーティングされたコンポーネントを&lt;/em&gt;挿入する場所をマークする &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; も必要ありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0df4d562aaab9bff2662b3ac4f6d1a92f4728ee1" translate="yes" xml:space="preserve">
          <source>To validate the potential alter ego, we need to consult a central database of all currently enlisted heroes. The process is asynchronous, so we need a special validator for that.</source>
          <target state="translated">分身を検証するためには、現在入隊しているヒーローの中央データベースを参照する必要があります。このプロセスは非同期なので、特別なバリデータが必要です。</target>
        </trans-unit>
        <trans-unit id="32c127e56d91889f1c7cad6d0e80c60907253fef" translate="yes" xml:space="preserve">
          <source>To verify the build output, open &lt;code&gt;dist/my-app/index.html&lt;/code&gt;. Look for default text &lt;code&gt;app-shell works!&lt;/code&gt; to show that the app shell route was rendered as part of the output.</source>
          <target state="translated">ビルド出力を確認するには、 &lt;code&gt;dist/my-app/index.html&lt;/code&gt; を開きます。デフォルトのテキスト &lt;code&gt;app-shell works!&lt;/code&gt; アプリシェルルートが出力の一部としてレンダリングされたことを示します。</target>
        </trans-unit>
        <trans-unit id="058878199f4a19cab2e45942ff386bcd8a9c4824" translate="yes" xml:space="preserve">
          <source>To view or download the example code used in this topic, see the live example.</source>
          <target state="translated">このトピックで使用されているサンプル コードを表示またはダウンロードするには、ライブ サンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="64189167d7c6f7924c3403091e78e99cd1953102" translate="yes" xml:space="preserve">
          <source>To watch for changes on an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, use &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, one of Angular's &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;lifecycle hooks&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; is specifically designed to work with properties that have the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator. See the &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;&lt;code&gt;OnChanges&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide for more details and examples.</source>
          <target state="translated">上の変更を監視するには &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティ、使用 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 、角度のの1 &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;ライフサイクルフック&lt;/a&gt;。 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレータを持つプロパティで機能するように特別に設計されています。詳細と例については、&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;ガイドの&lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt; &lt;code&gt;OnChanges&lt;/code&gt; &lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="90e9f667063b22e44e21816a49d7a46c4e72f6d9" translate="yes" xml:space="preserve">
          <source>To watch for changes on an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, you can use &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, one of Angular's &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hooks&lt;/a&gt;. See the &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;&lt;code&gt;OnChanges&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide for more details and examples.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティの変更を監視するには、Angularの&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;の1つである &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; を使用できます。詳細と例については、&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;ガイドの&lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt; &lt;code&gt;OnChanges&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="05a58fa2ca80d1b185bffa061088c51d5420c848" translate="yes" xml:space="preserve">
          <source>To write these kinds of test, you'll use additional features of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; as well as other testing helpers.</source>
          <target state="translated">これらの種類のテストを作成するには、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; の追加機能と他のテストヘルパーを使用します。</target>
        </trans-unit>
        <trans-unit id="1cc935e80e328e474a31d427ae2531c53add98a9" translate="yes" xml:space="preserve">
          <source>Together, a component and template define an Angular view.</source>
          <target state="translated">コンポーネントとテンプレートが一緒になってAngularビューを定義します。</target>
        </trans-unit>
        <trans-unit id="87022fcea4706d527b367133425bf8fe125ff9af" translate="yes" xml:space="preserve">
          <source>Toggle two form regions (extra credit)</source>
          <target state="translated">2つのフォーム領域を切り替える(追加クレジット</target>
        </trans-unit>
        <trans-unit id="b01d73f154f36c228522d4798ad4a598756fa10a" translate="yes" xml:space="preserve">
          <source>Toggling button functionality</source>
          <target state="translated">トグルボタン機能</target>
        </trans-unit>
        <trans-unit id="5ba5c297a3177e98b75ef09b3c0904e236e367fe" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下のためのオプションを提供するために使用することができ、トークン &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; の外 &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31eb6ab3d3ba3ac918313692bbab97fbc9516ee1" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下のためのオプションを提供するために使用することができ、トークン &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; の外 &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a829a6b9e3e265061c5310994b566e52ec5ed4d0" translate="yes" xml:space="preserve">
          <source>Token to provide CompilerOptions in the platform injector.</source>
          <target state="translated">プラットフォーム インジェクタで CompilerOptions を提供するためのトークン。</target>
        </trans-unit>
        <trans-unit id="1d10a851a2521fa1132fbcccf205872120c2acd7" translate="yes" xml:space="preserve">
          <source>Tokens &lt;a href=&quot;dependency-injection&quot;&gt;can have different types&lt;/a&gt;. They are often classes. They may also be strings.</source>
          <target state="translated">トークンに&lt;a href=&quot;dependency-injection&quot;&gt;はさまざまなタイプがあります&lt;/a&gt;。彼らはしばしばクラスです。それらは文字列である場合もあります。</target>
        </trans-unit>
        <trans-unit id="19d57f29559f37ce632a300697209a7f397c855f" translate="yes" xml:space="preserve">
          <source>Tokens can be merged into a combined query selector string. For example:</source>
          <target state="translated">トークンは、結合されたクエリセレクタ文字列にマージすることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="df45966d6a0d5c55c4c026a6b59b4d99477ebee0" translate="yes" xml:space="preserve">
          <source>Top component</source>
          <target state="translated">トップコンポーネント</target>
        </trans-unit>
        <trans-unit id="8dd425bec3818cb3cdcc48d42a8c69706bf636c4" translate="yes" xml:space="preserve">
          <source>Total number of bytes to upload or download. Depending on the request or response, this may not be computable and thus may not be present.</source>
          <target state="translated">アップロードまたはダウンロードするバイト数の合計。リクエストやレスポンスによっては、これは計算できないため、存在しない場合があります。</target>
        </trans-unit>
        <trans-unit id="253508f1cdb3b5a118c1f092109924e9f6cc5ecf" translate="yes" xml:space="preserve">
          <source>Tour of Heroes App and Tutorial</source>
          <target state="translated">ツアーオブヒーローズのアプリとチュートリアル</target>
        </trans-unit>
        <trans-unit id="79ffe79231e4016ea2181b480464ff0f91ab2c0f" translate="yes" xml:space="preserve">
          <source>Tour of Heroes app and tutorial</source>
          <target state="translated">ツアーオブヒーローズのアプリとチュートリアル</target>
        </trans-unit>
        <trans-unit id="af62994036bf0b04887e8a29971470d011d020a4" translate="yes" xml:space="preserve">
          <source>Tour of Heroes tutorial application</source>
          <target state="translated">ツアーオブヒーローズのチュートリアルアプリ</target>
        </trans-unit>
        <trans-unit id="838744bbebd051b5d24871e5f63b3ba4199099d6" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Add in-app navigation with routing</source>
          <target state="translated">ツアー・オブ・ヒーローズ ルーティングでアプリ内ナビゲーションを追加</target>
        </trans-unit>
        <trans-unit id="c493c5cdfa4a8ccdfc9662a20626564589907ab7" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Add services</source>
          <target state="translated">英雄のツアー。サービスの追加</target>
        </trans-unit>
        <trans-unit id="31d0192b3921c7fd4f68f0d13ef0be39ec4f48f9" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Create a feature component</source>
          <target state="translated">英雄ツアー。フィーチャーコンポーネントの作成</target>
        </trans-unit>
        <trans-unit id="72c48b3f6ee5672c5101b356a4815efc83090869" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Creating an application</source>
          <target state="translated">英雄ツアー。アプリケーションの作成</target>
        </trans-unit>
        <trans-unit id="a7a0b3548bbe957863ff25131676aa39c68a0d62" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Display a selection list</source>
          <target state="translated">ツアー・オブ・ヒーローズ 選択リストを表示する</target>
        </trans-unit>
        <trans-unit id="cdf382244af028f356e9cda40178a770fc9b8cee" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: Get data from a server</source>
          <target state="translated">ツアーオブヒーローズ:サーバーからデータを取得</target>
        </trans-unit>
        <trans-unit id="c31394cb566e25893c1b9026e5a85a94d73a845a" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: The hero editor</source>
          <target state="translated">ツアー・オブ・ヒーローズ:ヒーローエディター</target>
        </trans-unit>
        <trans-unit id="e9f49431ff1950df0bab16eb3bda80a1b69035be" translate="yes" xml:space="preserve">
          <source>Tour of Heroes: completed application</source>
          <target state="translated">ツアー・オブ・ヒーローズ:応募完了</target>
        </trans-unit>
        <trans-unit id="940a504d78dc8eb71cdeb87d05acf21c2c8dddc2" translate="yes" xml:space="preserve">
          <source>Track and listen for changes to the form's data model.</source>
          <target state="translated">フォームのデータモデルへの変更を追跡し、リッスンします。</target>
        </trans-unit>
        <trans-unit id="8fb0f6e53c00adefd00aea3fc755781253060a37" translate="yes" xml:space="preserve">
          <source>Track by identity as computed by the &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt; によって計算されたIDで追跡します。</target>
        </trans-unit>
        <trans-unit id="2e20a272657096b0f12c4de4b5cd187088921815" translate="yes" xml:space="preserve">
          <source>Track control state and validity with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; を使用して制御状態と有効性を追跡する</target>
        </trans-unit>
        <trans-unit id="cd9c1a52a403cc4c1aef9ca6a8b5b237a8db3e62" translate="yes" xml:space="preserve">
          <source>Track control states</source>
          <target state="translated">トラック制御状態</target>
        </trans-unit>
        <trans-unit id="205a26cf0e86ebcb22227fe276faba33af550f97" translate="yes" xml:space="preserve">
          <source>Track input validity and control status using &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用して、入力の有効性を追跡し、ステータスを制御します。</target>
        </trans-unit>
        <trans-unit id="c1f1f73803fe36b0c16b9ccc852ad5cf4c245bed" translate="yes" xml:space="preserve">
          <source>Track state changes and the validity of form controls.</source>
          <target state="translated">状態の変化とフォームコントロールの有効性を追跡します。</target>
        </trans-unit>
        <trans-unit id="750eabe2d59ab51eb9806ca014b817ea6d03f06e" translate="yes" xml:space="preserve">
          <source>TrackByFunction</source>
          <target state="translated">TrackByFunction</target>
        </trans-unit>
        <trans-unit id="e8e06238766a8da29e9dc9f88eea2e8f0510ad6f" translate="yes" xml:space="preserve">
          <source>Tracking and controlling &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;focus&lt;/a&gt; in a UI is an important consideration in designing for accessibility. When using Angular routing, you should decide where page focus goes upon navigation.</source>
          <target state="translated">UIでの&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;フォーカスの&lt;/a&gt;追跡と制御は、アクセシビリティの設計において重要な考慮事項です。Angularルーティングを使用するときは、ナビゲーションのどこにページフォーカスを置くかを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4f24ac08bd1cafccdfc3354a39d295dd35edf75c" translate="yes" xml:space="preserve">
          <source>Tracking and showing request progress</source>
          <target state="translated">リクエストの進捗状況の追跡と表示</target>
        </trans-unit>
        <trans-unit id="2bf54b9db29d88e96523bb27968cbe340de3297c" translate="yes" xml:space="preserve">
          <source>Tracks changes to the email attribute bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされている email 属性の変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="8fd392bb0e0e4c81e1b2544fdfe54ef3a072a778" translate="yes" xml:space="preserve">
          <source>Tracks changes to the pattern bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされたパターンの変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="d69d10dc65469d775e59042da88ca5d5529758ae" translate="yes" xml:space="preserve">
          <source>Tracks changes to the required attribute bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされた必須属性の変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="d8556ba32bce9b6e211ba689364183606036ec09" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the maximum length bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされている最大長の変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="94a80f0e6fddb9418827ab4bb176c0d8df0d6618" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the minimum length bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされている最小の長さの変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="196941bc4879e6f47b65e211a399eab8a6f6151b" translate="yes" xml:space="preserve">
          <source>Tracks options for the &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; インスタンスのオプションを追跡します。</target>
        </trans-unit>
        <trans-unit id="ab3dbc710cc5293470f8eccfb6d9f6e87414e9b0" translate="yes" xml:space="preserve">
          <source>Tracks simple string values bound to the option element. For objects, use the &lt;code&gt;ngValue&lt;/code&gt; input binding.</source>
          <target state="translated">option要素にバインドされた単純な文字列値を追跡します。オブジェクトの場合、 &lt;code&gt;ngValue&lt;/code&gt; 入力バインディングを使用します。</target>
        </trans-unit>
        <trans-unit id="8e0382103af4eac9cadd4b2247861b1d78b40172" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance bound to the directive.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを追跡します。</target>
        </trans-unit>
        <trans-unit id="e47245e960a6f3e488ea514c18870fe786d9b704" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を追跡します。</target>
        </trans-unit>
        <trans-unit id="22f15c49bdce4bf9eed08a825998088b3e2b947f" translate="yes" xml:space="preserve">
          <source>Tracks the configuration options for this &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; インスタンスの構成オプションを追跡します。</target>
        </trans-unit>
        <trans-unit id="625b260ece4880729473d6e613cdc9200774f31d" translate="yes" xml:space="preserve">
          <source>Tracks the list of added &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; instances</source>
          <target state="translated">追加された &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; インスタンスのリストを追跡します</target>
        </trans-unit>
        <trans-unit id="8ccc39b3d5dcbc137ff9c2eb0496d9ce9fae07b0" translate="yes" xml:space="preserve">
          <source>Tracks the name bound to the directive. If a parent form exists, it uses this name as a key to retrieve this control's value.</source>
          <target state="translated">ディレクティブにバインドされた名前を追跡します。親フォームが存在する場合は、この名前をキーにしてコントロールの値を取得します。</target>
        </trans-unit>
        <trans-unit id="89defebffe912c5087e896997a7d9b201c73c793" translate="yes" xml:space="preserve">
          <source>Tracks the name bound to the directive. The parent form uses this name as a key to retrieve this control's value.</source>
          <target state="translated">ディレクティブにバインドされた名前を追跡します。親フォームはこの名前をキーにしてコントロールの値を取得します。</target>
        </trans-unit>
        <trans-unit id="aee499214828a5c060da6e529f71f860679051fe" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の名前を追跡します。名前は、親の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。</target>
        </trans-unit>
        <trans-unit id="d3d060876a35b94f524bce8f795b5d0bee4651e5" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. Accepts a name as a string or a number. The name in the form of a string is useful for individual forms, while the numerical form allows for form arrays to be bound to indices when iterating over arrays in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の名前を追跡します。名前は、親 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。名前を文字列または数値として受け入れます。文字列形式の名前は個々のフォームに役立ちますが、数値形式では、 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 内の配列を反復処理するときにフォーム配列をインデックスにバインドできます。</target>
        </trans-unit>
        <trans-unit id="aad0ec9ce7f409bb75dafe01a113a9f157129e45" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; の名前を追跡します。名前は、親の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。</target>
        </trans-unit>
        <trans-unit id="a20a2f1c67ecb76fe7f909062f6d19a471cc8a84" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. Accepts a name as a string or a number. The name in the form of a string is useful for individual forms, while the numerical form allows for form controls to be bound to indices when iterating over controls in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; の名前を追跡します。名前は、親 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。名前を文字列または数値として受け入れます。文字列形式の名前は個々のフォームに役立ちますが、数値形式では、 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 内のコントロールを反復処理するときにフォームコントロールをインデックスにバインドできます。</target>
        </trans-unit>
        <trans-unit id="5250e4f20d726ba69a0ff3fea3984936608f75ae" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の名前を追跡します。名前は、親の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。</target>
        </trans-unit>
        <trans-unit id="1a76ef6bd8291e09721e93618763da21c4ce1b30" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. Accepts a name as a string or a number. The name in the form of a string is useful for individual forms, while the numerical form allows for form groups to be bound to indices when iterating over groups in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の名前を追跡します。名前は、親 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。名前を文字列または数値として受け入れます。文字列形式の名前は個々のフォームに役立ちますが、数値形式では、 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 内のグループを反復処理するときにフォームグループをインデックスにバインドできます。</target>
        </trans-unit>
        <trans-unit id="3587ba9a726a4c83a603322c3d244042c4a5440b" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; の名前を追跡します。この名前は、親 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; のキーに対応しています。</target>
        </trans-unit>
        <trans-unit id="94ef4bb133d8371862e04cdbe35ea80d627658aa" translate="yes" xml:space="preserve">
          <source>Tracks the name of the radio input element.</source>
          <target state="translated">ラジオ入力要素の名前を追跡します。</target>
        </trans-unit>
        <trans-unit id="847fd12a5e443af80b1d628517f650d4b16809c3" translate="yes" xml:space="preserve">
          <source>Tracks the option comparison algorithm for tracking identities when checking for changes.</source>
          <target state="translated">変更をチェックする際に、アイデンティティを追跡するためのオプション比較アルゴリズムを追跡します。</target>
        </trans-unit>
        <trans-unit id="4181514cf443c8d2ed062575db037633d03567f5" translate="yes" xml:space="preserve">
          <source>Tracks the value and validation status of an individual form control.</source>
          <target state="translated">個々のフォームコントロールの値と検証状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="e95029f5c1b54e6951ef7d1dc1f48671ee8c5122" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスのグループの値と有効性の状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="6081501877b5287d24fab2c51a89d5bc830a5e25" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスのグループの値と有効性の状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="145bfac45bf7e6224142dc5429a521af2cf548c9" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスの配列の値と有効性の状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="571f063bb31197967a229f7c4374acb092869635" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスの配列の値と有効性の状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="a2626e67aec561be0def79f87c598efe295b2e85" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to the option element. Unlike the value binding, ngValue supports binding to objects.</source>
          <target state="translated">option要素にバインドされた値を追跡します。値のバインディングとは異なり、ngValueはオブジェクトへのバインディングをサポートしています。</target>
        </trans-unit>
        <trans-unit id="3ee63c63d361eb3aa2b0a3c1f8a3353d2f4dccf1" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされた値を追跡します。</target>
        </trans-unit>
        <trans-unit id="283ea7e4ca07fa5714eec7b7e0bd1c17f20bc544" translate="yes" xml:space="preserve">
          <source>Tracks the value of the radio input element</source>
          <target state="translated">無線入力要素の値を追跡します。</target>
        </trans-unit>
        <trans-unit id="705f5065f56c892bc977873651559fe5515ab8a6" translate="yes" xml:space="preserve">
          <source>Tracks whether the control is disabled.</source>
          <target state="translated">コントロールが無効になっているかどうかを追跡します。</target>
        </trans-unit>
        <trans-unit id="1a3132b053ea81ac5f7c83c0422cea4be492de74" translate="yes" xml:space="preserve">
          <source>Tracks whether the linked route of an element is currently active, and allows you to specify one or more CSS classes to add to the element when the linked route is active.</source>
          <target state="translated">要素のリンクルートが現在アクティブかどうかを追跡し、リンクルートがアクティブなときに要素に追加するCSSクラスを1つ以上指定することができます。</target>
        </trans-unit>
        <trans-unit id="9e4fec6404eb80383e9e6d6b5b94d18a5fdece28" translate="yes" xml:space="preserve">
          <source>Transcluding Angular Content into AngularJS Component Directives</source>
          <target state="translated">AngularJSコンポーネントディレクティブへのAngularコンテンツの組み込み</target>
        </trans-unit>
        <trans-unit id="b8bc0089d8b086cb38dab65911aa8acd5d70fbb7" translate="yes" xml:space="preserve">
          <source>Transclusion: yes</source>
          <target state="translated">トランスクルージョン:はい</target>
        </trans-unit>
        <trans-unit id="f29368cc7ff3b4ade7bfa044be1921ff64aa770b" translate="yes" xml:space="preserve">
          <source>TransferState</source>
          <target state="translated">TransferState</target>
        </trans-unit>
        <trans-unit id="dea51bb13a4467c505ee6181171375f497334d54" translate="yes" xml:space="preserve">
          <source>Transform</source>
          <target state="translated">Transform</target>
        </trans-unit>
        <trans-unit id="812518bba5c699b0027b6b3a480acfb0ebc647bd" translate="yes" xml:space="preserve">
          <source>Transform the free-form body into a serialized format suitable for transmission to the server.</source>
          <target state="translated">自由形体を、サーバへの送信に適したシリアル化されたフォーマットに変換する。</target>
        </trans-unit>
        <trans-unit id="dc1c231275a16e11dae243561efa84b2936b1b19" translate="yes" xml:space="preserve">
          <source>Transformation</source>
          <target state="translated">Transformation</target>
        </trans-unit>
        <trans-unit id="404db50a8d5ad10495b7632c1b694b2266386cf7" translate="yes" xml:space="preserve">
          <source>Transforming Data Using Pipes</source>
          <target state="translated">パイプを使ったデータ変換</target>
        </trans-unit>
        <trans-unit id="173612f0833f1106fbc8f8dd6cfe45177a22f0f4" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element makes all of the required Angular infrastructure available to the browser. Creating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding, mapping Angular functionality to the corresponding native HTML equivalents.</source>
          <target state="translated">コンポーネントをカスタム要素に変換することで、必要なすべてのAngularインフラストラクチャをブラウザで利用できるようになります。カスタム要素の作成はシンプルで簡単で、コンポーネント定義のビューを変更検出とデータバインディングで自動的に接続し、Angularの機能を対応するネイティブHTMLにマッピングします。</target>
        </trans-unit>
        <trans-unit id="76dc9f83782c6293c8d8c6eca91efe25b1d4f5a7" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element provides an easy path to creating dynamic HTML content in your Angular app. HTML content that you add directly to the DOM in an Angular app is normally displayed without Angular processing, unless you define a &lt;em&gt;dynamic component&lt;/em&gt;, adding your own code to connect the HTML tag to your app data, and participate in change detection. With a custom element, all of that wiring is taken care of automatically.</source>
          <target state="translated">コンポーネントをカスタム要素に変換すると、Angularアプリで動的HTMLコンテンツを作成するための簡単なパスが提供されます。AngularアプリでDOMに直接追加するHTMLコンテンツは、&lt;em&gt;動的コンポーネント&lt;/em&gt;を定義し、HTMLタグをアプリデータに接続するための独自のコードを追加し、変更検出に参加しない限り、通常Angular処理なしで表示されます。カスタム要素を使用すると、そのすべての配線が自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="428b2ec1d548861040d138b663bdf7c61a4509ea" translate="yes" xml:space="preserve">
          <source>Transforming components to custom elements</source>
          <target state="translated">コンポーネントをカスタム要素に変換する</target>
        </trans-unit>
        <trans-unit id="73fc8ace43695569d7d87dfe192d9d7682d98901" translate="yes" xml:space="preserve">
          <source>Transforming data with parameters and chained pipes</source>
          <target state="translated">パラメータと連鎖パイプを使ったデータの変換</target>
        </trans-unit>
        <trans-unit id="52c81ceec8de22f6a2b99230305438e29dcc24a6" translate="yes" xml:space="preserve">
          <source>Transforms Object or Map into an array of key value pairs.</source>
          <target state="translated">オブジェクトまたはマップをキー値のペアの配列に変換します。</target>
        </trans-unit>
        <trans-unit id="3a83fe4e975ea243d0d4caabdbff2dd2ca6b63d4" translate="yes" xml:space="preserve">
          <source>Transforms a number into a string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">数値を文字列に変換し、グループのサイズや区切り文字、小数点文字、その他のロケール固有の設定を決めるロケールルールに従ってフォーマットします。</target>
        </trans-unit>
        <trans-unit id="afee2a38410ecd1b168f5e62c7af603ea93414fc" translate="yes" xml:space="preserve">
          <source>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">数値を通貨文字列に変換し、グループのサイズや区切り文字、小数点文字、その他のロケール固有の設定を決定するロケールルールに従ってフォーマットします。</target>
        </trans-unit>
        <trans-unit id="ba444aa93f3d7c55a8743abcd65343bee076a245" translate="yes" xml:space="preserve">
          <source>Transforms a number to a percentage string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">数値をパーセンテージ文字列に変換し、グループのサイズや区切り文字、小数点文字、その他ロケール固有の設定を決めるロケールルールに従ってフォーマットします。</target>
        </trans-unit>
        <trans-unit id="b212033572f2c487923ac10525b776d1494e7327" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; のストリームに変換します。その1つが &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="abab076aca3610a4dff43371a91f5154ef3df183" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; のストリームに変換します。その1つが &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c23fe29041b0f266f33891ae1c767b0508402f9a" translate="yes" xml:space="preserve">
          <source>Transforms text to all lower case.</source>
          <target state="translated">テキストをすべて小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="0e392a9c956f15e36c2ae33d345783ffbc7a81c9" translate="yes" xml:space="preserve">
          <source>Transforms text to all upper case.</source>
          <target state="translated">テキストをすべて大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="7ba2f292cd824026ac9d865b38dd20dbd4af7fa7" translate="yes" xml:space="preserve">
          <source>Transforms text to title case. Capitalizes the first letter of each word and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</source>
          <target state="translated">テキストをタイトルの大文字と小文字に変換します。各単語の最初の文字を大文字にし、残りの単語を小文字に変換します。単語は、スペース、タブ、改行文字などの空白文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="40a88712d9f4b6d6903665d4b10961274eca90e4" translate="yes" xml:space="preserve">
          <source>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</source>
          <target state="translated">テキストをタイトルの大文字と小文字に変換します。各単語の最初の文字を大文字にし、残りの単語を小文字に変換します。単語は、スペース、タブ、改行文字などの空白文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="8c6c4775aedd63bf234a390e5f164114cd3a3da9" translate="yes" xml:space="preserve">
          <source>Transforms the current value of expression &lt;code&gt;cardNumber&lt;/code&gt; via the pipe called &lt;code&gt;myCardNumberFormatter&lt;/code&gt;.</source>
          <target state="translated">変換式の現在値 &lt;code&gt;cardNumber&lt;/code&gt; プロパティと呼ばれるパイプを経由して &lt;code&gt;myCardNumberFormatter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="acb4047f26fa458f6ca21611c9b86f2ba97bab12" translate="yes" xml:space="preserve">
          <source>Transition and triggers</source>
          <target state="translated">トランジションとトリガー</target>
        </trans-unit>
        <trans-unit id="154ba22581c5a012b47904a5fa38035fe8be49ae" translate="yes" xml:space="preserve">
          <source>Transition the Angular language service to Ivy</source>
          <target state="translated">Angularの言語サービスをIvyに移行する</target>
        </trans-unit>
        <trans-unit id="fd3159002733ca58d01f18f3ef225b0a35103de7" translate="yes" xml:space="preserve">
          <source>Transitions and timing</source>
          <target state="translated">トランジションとタイミング</target>
        </trans-unit>
        <trans-unit id="f89031b2b65e1a903ff7d0356c56106e1092f7d4" translate="yes" xml:space="preserve">
          <source>Transitions are matched in the order in which they are defined. Thus, you can apply other transitions on top of the &lt;code&gt;* =&amp;gt; *&lt;/code&gt; (any-to-any) transition. For example, define style changes or animations that would apply just to &lt;code&gt;open =&amp;gt; closed&lt;/code&gt;, or just to &lt;code&gt;closed =&amp;gt; open&lt;/code&gt;, and then use &lt;code&gt;* =&amp;gt; *&lt;/code&gt; as a fallback for state pairings that aren't otherwise called out.</source>
          <target state="translated">遷移は、定義された順序で照合されます。したがって、 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; （any-to-any）トランジションの上に他のトランジションを適用できます。たとえば、 &lt;code&gt;open =&amp;gt; closed&lt;/code&gt; 、または単に &lt;code&gt;closed =&amp;gt; open&lt;/code&gt; のみ適用されるスタイルの変更またはアニメーションを定義し、 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; を、他の方法では呼び出されない状態のペアリングのフォールバックとして使用します。</target>
        </trans-unit>
        <trans-unit id="7ff0a6e47fefa7e662116ee0dd231cdcc6a56382" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;plural&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 翻訳する</target>
        </trans-unit>
        <trans-unit id="f28407638edfdbe51d332499328f0747faddfb77" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;select&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 翻訳</target>
        </trans-unit>
        <trans-unit id="a9957e9ff8b20a6e29b6eb99cd6e9ed298461187" translate="yes" xml:space="preserve">
          <source>Translate a nested expression</source>
          <target state="translated">入れ子になった式を翻訳する</target>
        </trans-unit>
        <trans-unit id="c9d3944f437bc8cf7fc3df4fc9fddd4f037a4199" translate="yes" xml:space="preserve">
          <source>Translate alternate expressions</source>
          <target state="translated">代替表現の翻訳</target>
        </trans-unit>
        <trans-unit id="f8fd85ad8899ddbec87ff78411cd4b09cf77deb3" translate="yes" xml:space="preserve">
          <source>Translate attributes</source>
          <target state="translated">属性を翻訳する</target>
        </trans-unit>
        <trans-unit id="ff5d47c28f5fd5187961a4c8c2f488109cdeb11a" translate="yes" xml:space="preserve">
          <source>Translate each translation file</source>
          <target state="translated">各翻訳ファイルの翻訳</target>
        </trans-unit>
        <trans-unit id="5510d0e0211ac26b4aefd0a320a3925c01ccf567" translate="yes" xml:space="preserve">
          <source>Translate nested expressions</source>
          <target state="translated">入れ子になった式を翻訳する</target>
        </trans-unit>
        <trans-unit id="420c026f490f5f41976d80e6af023a9d6e002e18" translate="yes" xml:space="preserve">
          <source>Translate plurals</source>
          <target state="translated">複数形を翻訳する</target>
        </trans-unit>
        <trans-unit id="e0f4e41de6ef002e0ce322ce32fdb24f811b3435" translate="yes" xml:space="preserve">
          <source>Translate plurals and alternate expressions</source>
          <target state="translated">複数形や代替表現を翻訳する</target>
        </trans-unit>
        <trans-unit id="5bd3d2d2e5c2b013f5f2ac3e26d961037f15cca1" translate="yes" xml:space="preserve">
          <source>Translate text nodes</source>
          <target state="translated">テキストノードの翻訳</target>
        </trans-unit>
        <trans-unit id="0a748b9bc0792adca60e27565c67768a69334281" translate="yes" xml:space="preserve">
          <source>Translate text not for display</source>
          <target state="translated">表示のためではなく、テキストを翻訳する</target>
        </trans-unit>
        <trans-unit id="c13a3e77e07e4d808e0f50d46cf7d8fba6e47542" translate="yes" xml:space="preserve">
          <source>Translate text without creating an element</source>
          <target state="translated">要素を作成せずにテキストを翻訳する</target>
        </trans-unit>
        <trans-unit id="930b43956592fb6022e0ba237e0507893ea4e039" translate="yes" xml:space="preserve">
          <source>Translate the other text nodes the same way as shown in the following example:</source>
          <target state="translated">他のテキストノードも次の例と同じように翻訳します。</target>
        </trans-unit>
        <trans-unit id="9ca6a08c5891b63e799acee720895ad663f388d5" translate="yes" xml:space="preserve">
          <source>Translate the other text nodes the same way:</source>
          <target state="translated">他のテキストノードも同じように翻訳します。</target>
        </trans-unit>
        <trans-unit id="ac3f7cdd6fb7bb10f67a29857be4bed2e5e05bcb" translate="yes" xml:space="preserve">
          <source>Translate the source text</source>
          <target state="translated">原文を翻訳する</target>
        </trans-unit>
        <trans-unit id="624f545665467d793ca13a411258c70e6ac2ee86" translate="yes" xml:space="preserve">
          <source>Translating plural and select expressions</source>
          <target state="translated">複数形と選択式の翻訳</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="36e89f13f90ac0d31f2033903bc7999d29a243ad" translate="yes" xml:space="preserve">
          <source>TranslationWidth</source>
          <target state="translated">TranslationWidth</target>
        </trans-unit>
        <trans-unit id="3c93b9e5330687363111dd7a6e0ebef29ee56f02" translate="yes" xml:space="preserve">
          <source>Transmitting data between components</source>
          <target state="translated">コンポーネント間のデータ送信</target>
        </trans-unit>
        <trans-unit id="6e1d794deefaa6f98622f1040f05a7ea650ea223" translate="yes" xml:space="preserve">
          <source>Tree shaking refers to a compiler option that removes code from the final bundle if the app doesn't reference that code. When providers are tree-shakable, the Angular compiler removes the associated services from the final output when it determines that your application doesn't use those services. This significantly reduces the size of your bundles.</source>
          <target state="translated">ツリーシェイキングとは、アプリがそのコードを参照していない場合に最終的なバンドルからコードを削除するコンパイラオプションのことです。プロバイダがツリーシェイキング可能な場合、アプリケーションがそれらのサービスを使用していないと判断した場合、Angularコンパイラは関連するサービスを最終出力から削除します。これにより、バンドルのサイズが大幅に削減されます。</target>
        </trans-unit>
        <trans-unit id="158297e3d668ae1a961f319687ea97bab89382f7" translate="yes" xml:space="preserve">
          <source>Tree-shakable InjectionToken</source>
          <target state="translated">ツリーシェイカブルインジェクショントークン</target>
        </trans-unit>
        <trans-unit id="e9fcab1031cb2e23a1fe8832649e9c5a53141e58" translate="yes" xml:space="preserve">
          <source>Tree-shakable providers</source>
          <target state="translated">ツリーシェイク可能なプロバイダー</target>
        </trans-unit>
        <trans-unit id="434f076d20f1b3b8a33e9ed50bbcb217521d722b" translate="yes" xml:space="preserve">
          <source>Tree-shaking and &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">ツリーの揺れと &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f05b6a96acbdcfadc896179dc913a13d818f2f99" translate="yes" xml:space="preserve">
          <source>Tree-shaking doesn't work here because Angular can't decide to exclude one chunk of code (the provider definition for the service within the module factory) based on whether another chunk of code (the service class) is used. To make services tree-shakable, the information about how to construct an instance of the service (the provider definition) needs to be a part of the service class itself.</source>
          <target state="translated">ツリーシェイキングはここでは機能しません。なぜならAngularは別のコードの塊(サービスクラス)が使われているかどうかに基づいてコードの塊(モジュールファクトリ内のサービスのプロバイダ定義)を除外することができないからです。サービスをツリーシェイキング可能にするためには、サービスのインスタンスを構築する方法(プロバイダ定義)に関する情報はサービスクラス自体の一部である必要があります。</target>
        </trans-unit>
        <trans-unit id="b998b898aa55ff4a0b42570f2ce7f5d95a803024" translate="yes" xml:space="preserve">
          <source>Tree-shaking is especially useful for a library because the application which uses the library may not have a need to inject it. Read more about &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;tree-shakable providers&lt;/a&gt; in &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers&lt;/a&gt;.</source>
          <target state="translated">ライブラリーを使用するアプリケーションはそれを注入する必要がない場合があるため、ツリーシェーキングはライブラリーにとって特に有用です。&lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;ツリーシェーク可能なプロバイダーの&lt;/a&gt;詳細については、&lt;a href=&quot;dependency-injection-providers&quot;&gt;DIプロバイダー&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1e7081d736f43ad30574ac906d26acdd03c38ed9" translate="yes" xml:space="preserve">
          <source>Trees</source>
          <target state="translated">Trees</target>
        </trans-unit>
        <trans-unit id="6c9d923a2bdc1cbd32c38da5c221d86fa7a8a6ed" translate="yes" xml:space="preserve">
          <source>Trees can represent hierarchical data.</source>
          <target state="translated">ツリーは、階層的なデータを表現することができます。</target>
        </trans-unit>
        <trans-unit id="de3b30d295ded9bca000cfefdd9403aa187ece06" translate="yes" xml:space="preserve">
          <source>Trigger a change detection cycle for the component.</source>
          <target state="translated">コンポーネントの変更検出サイクルをトリガーします。</target>
        </trans-unit>
        <trans-unit id="9407e89d96626ed5d353629e3f6d9a9d64468166" translate="yes" xml:space="preserve">
          <source>Trigger component destruction.</source>
          <target state="translated">トリガーコンポーネントの破壊。</target>
        </trans-unit>
        <trans-unit id="53af3485dc7b16524b04a2e63069b00e185de29e" translate="yes" xml:space="preserve">
          <source>Triggering the animation</source>
          <target state="translated">アニメーションのトリガー</target>
        </trans-unit>
        <trans-unit id="e870e5d23b1facd0b564612cfd9fdd42eb18bc87" translate="yes" xml:space="preserve">
          <source>Triggers a change event by emitting on the &lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; で発行&lt;/a&gt;することにより、変更イベントをトリガーします。</target>
        </trans-unit>
        <trans-unit id="c9f5152248717bc70a71c2004527861111d686f2" translate="yes" xml:space="preserve">
          <source>Triggers a change event by emitting on the &lt;code&gt;changes&lt;/code&gt;&lt;a href=&quot;eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;changes&lt;/code&gt; &lt;a href=&quot;eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; を発行&lt;/a&gt;することにより、変更イベントをトリガーします。</target>
        </trans-unit>
        <trans-unit id="0b6c3c9f705c8dd24de0e35b9f2ab7dea14b27f8" translate="yes" xml:space="preserve">
          <source>Triggers a warning in dev mode that this input should not be used with reactive forms.</source>
          <target state="translated">開発モードで、この入力をリアクティブフォームで使用してはいけないという警告をトリガーします。</target>
        </trans-unit>
        <trans-unit id="0ae4d5b42be1c56e1a7225f517e99f471b359dc4" translate="yes" xml:space="preserve">
          <source>Triggers a warning that this input should not be used with reactive forms.</source>
          <target state="translated">この入力をリアクティブフォームで使用してはいけないという警告を発生させます。</target>
        </trans-unit>
        <trans-unit id="5083756d2f83ef32092480b31b3cecd6c6cec6c9" translate="yes" xml:space="preserve">
          <source>Triggers the event by its name if there is a corresponding listener in the element's &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; collection. The second parameter is the &lt;em&gt;event object&lt;/em&gt; expected by the handler. See &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">要素の &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; コレクションに対応するリスナーがある場合、イベントを名前でトリガーします。2番目のパラメーターは、ハンドラーが予期する&lt;em&gt;イベントオブジェクト&lt;/em&gt;です。&lt;a href=&quot;testing#trigger-event-handler&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="116e8e66449e1e735056336b68b6a84dd95d3b0b" translate="yes" xml:space="preserve">
          <source>Triggers the event by its name if there is a corresponding listener in the element's &lt;code&gt;listeners&lt;/code&gt; collection. The second parameter is the &lt;em&gt;event object&lt;/em&gt; expected by the handler. See &lt;a href=&quot;testing-components-scenarios#trigger-event-handler&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">要素の &lt;code&gt;listeners&lt;/code&gt; コレクションに対応するリスナーがある場合、その名前でイベントをトリガーします。2番目のパラメーターは、ハンドラーが予期する&lt;em&gt;イベントオブジェクト&lt;/em&gt;です。&lt;a href=&quot;testing-components-scenarios#trigger-event-handler&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a10c269fb7def350ff63b23aa2d28b00775e9f1c" translate="yes" xml:space="preserve">
          <source>Trim the value (remove whitespace) and make sure it&amp;rsquo;s a minimum length.</source>
          <target state="translated">値をトリミング（空白を削除）し、最小の長さであることを確認します。</target>
        </trans-unit>
        <trans-unit id="3cc21cf3f8e5867393f5bad054b9c40301206223" translate="yes" xml:space="preserve">
          <source>Trims all whitespaces at the beginning and the end of a template.</source>
          <target state="translated">テンプレートの最初と最後にあるすべての空白をトリミングします。</target>
        </trans-unit>
        <trans-unit id="92ad5db953b958def77761bdd99674c317ad3534" translate="yes" xml:space="preserve">
          <source>Troubleshooting template errors</source>
          <target state="translated">テンプレートエラーのトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="f43741667aa518662d503fc2ce7e1d14354c3bec" translate="yes" xml:space="preserve">
          <source>True if at least one navigation event has occurred, false otherwise.</source>
          <target state="translated">少なくとも 1 つのナビゲーションイベントが発生している場合は True、そうでない場合は false。</target>
        </trans-unit>
        <trans-unit id="9d796fe59ff2474ea78a1c50451058993aa79f3b" translate="yes" xml:space="preserve">
          <source>True if the Service Worker is enabled (supported by the browser and enabled via &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">Service Workerが有効になっている場合（ブラウザーでサポートされ、 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; を介して有効になっている場合）はTrue。</target>
        </trans-unit>
        <trans-unit id="5f972cc15ad49cf4f212b677b7dc7d8b9251db55" translate="yes" xml:space="preserve">
          <source>True if the control has not been marked as touched</source>
          <target state="translated">コントロールがタッチされたとマークされていない場合は真</target>
        </trans-unit>
        <trans-unit id="dcc1b1c1aa85f2da9a269e743dc502fd0749e99e" translate="yes" xml:space="preserve">
          <source>True if the control is marked as &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">コントロールが &lt;code&gt;touched&lt;/code&gt; としてマークされている場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="60e52a2ca105703a08ce2fd47ddd086d17018855" translate="yes" xml:space="preserve">
          <source>True if this query is optional, false if it is required. Default is false. A required query throws an error if no elements are retrieved when the query is executed. An optional query does not.</source>
          <target state="translated">このクエリがオプションの場合は真、必須の場合は偽。デフォルトは false です。必須のクエリは、クエリが実行されたときに要素が取得されなかった場合にエラーをスローします。オプションのクエリでは、エラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="e18fb8c0b6ed0a18d4906b17c7bbc3fae3da28aa" translate="yes" xml:space="preserve">
          <source>True to create a new element without checking whether one already exists.</source>
          <target state="translated">既に存在するかどうかをチェックせずに新しい要素を作成する場合はTrueを指定します。</target>
        </trans-unit>
        <trans-unit id="478f00a6d6caf0e5792a2d5faa6511aff88a2e25" translate="yes" xml:space="preserve">
          <source>True to create new elements without checking whether they already exist.</source>
          <target state="translated">既に存在するかどうかをチェックせずに新しい要素を作成する場合はTrueを使用します。</target>
        </trans-unit>
        <trans-unit id="06b3634a6e2a35bbc0dd073c9b175791f2522293" translate="yes" xml:space="preserve">
          <source>True to include an anchor fragment in the path.</source>
          <target state="translated">アンカーフラグメントをパスに含める場合はTrue。</target>
        </trans-unit>
        <trans-unit id="1ab65405badb72e5749b47e365af2b6aaf2cb192" translate="yes" xml:space="preserve">
          <source>True to preserve or false to remove potentially superfluous whitespace characters from the compiled template. Whitespace characters are those matching the &lt;code&gt;\s&lt;/code&gt; character class in JavaScript regular expressions. Default is false, unless overridden in compiler options.</source>
          <target state="translated">保存する場合はTrue、不要な空白文字をコンパイルしたテンプレートから削除する場合はFalse。空白文字は、JavaScript正規表現の &lt;code&gt;\s&lt;/code&gt; 文字クラスに一致する文字です。コンパイラー・オプションでオーバーライドされない限り、デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="c19e0cdc9c33c77f5adf440dc15998ff2a61e211" translate="yes" xml:space="preserve">
          <source>Trusting safe values</source>
          <target state="translated">安全な価値観を信頼する</target>
        </trans-unit>
        <trans-unit id="4db0cc04a34f0802ff52870b79e104695e053ead" translate="yes" xml:space="preserve">
          <source>Try Angular without local setup</source>
          <target state="translated">ローカル設定なしでAngularを試す</target>
        </trans-unit>
        <trans-unit id="beb70957ec5482b78d59548c5c70483736e2c218" translate="yes" xml:space="preserve">
          <source>Try editing any of the project files. Save and refresh the browser to see the changes.</source>
          <target state="translated">プロジェクトファイルを編集してみてください。保存してブラウザを更新すると、変更内容が表示されます。</target>
        </trans-unit>
        <trans-unit id="7ddd66b689c9370a62daee26be57fd02d84a295b" translate="yes" xml:space="preserve">
          <source>Try it</source>
          <target state="translated">試してみてください</target>
        </trans-unit>
        <trans-unit id="62e11793c0386a1bddb0a86fda7f464e7c562e11" translate="yes" xml:space="preserve">
          <source>Try it by adding the following directive binding variations to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">次のディレクティブバインディングのバリエーションを &lt;code&gt;AppComponent&lt;/code&gt; テンプレートに追加して試してください。</target>
        </trans-unit>
        <trans-unit id="bba0e9c4048196d4221aebf3796d5e3371ce4a48" translate="yes" xml:space="preserve">
          <source>Try it by clicking on this &lt;span name=&quot;router&quot;&gt;live example link&lt;/span&gt;.</source>
          <target state="translated">この&lt;span name=&quot;router&quot;&gt;ライブサンプルリンクを&lt;/span&gt;クリックして試してみてください。</target>
        </trans-unit>
        <trans-unit id="da8a7f15b67a49c642972b20522557722114e5ed" translate="yes" xml:space="preserve">
          <source>Try it by clicking on this live example link.</source>
          <target state="translated">このライブの例のリンクをクリックして試してみてください。</target>
        </trans-unit>
        <trans-unit id="55391745de289ddef8d65ec34b574ce002c5003d" translate="yes" xml:space="preserve">
          <source>Try it out. Because the array has four items, the message should appear. Go back into &lt;code&gt;app.component.ts&lt;/code&gt; and delete or comment out one of the elements from the heroes array. The browser should refresh automatically and the message should disappear.</source>
          <target state="translated">やってみよう。配列には4つのアイテムがあるため、メッセージが表示されます。 &lt;code&gt;app.component.ts&lt;/code&gt; に戻り、heroes配列からいずれかの要素を削除またはコメント化します。ブラウザが自動的に更新され、メッセージが消えます。</target>
        </trans-unit>
        <trans-unit id="4fbaa8ee9842ab2551d1acf053489f8692c5e0b5" translate="yes" xml:space="preserve">
          <source>Try navigating to a non-existing route on your application, such as &lt;code&gt;http://localhost:4200/powers&lt;/code&gt;. This route doesn't match anything defined in your &lt;code&gt;app.module.ts&lt;/code&gt; file. However, because you defined a wildcard route, the application automatically displays your &lt;code&gt;PageNotFound&lt;/code&gt; component.</source>
          <target state="translated">&lt;code&gt;http://localhost:4200/powers&lt;/code&gt; など、アプリケーションに存在しないルートに移動してみてください。このルートは、 &lt;code&gt;app.module.ts&lt;/code&gt; ファイルで定義されているものと一致しません。ただし、ワイルドカードルートを定義したため、アプリケーションは &lt;code&gt;PageNotFound&lt;/code&gt; コンポーネントを自動的に表示します。</target>
        </trans-unit>
        <trans-unit id="8d0b56cf0fa53f627bd12835d235587765053dc2" translate="yes" xml:space="preserve">
          <source>Try one of the &quot;3G&quot; speeds.</source>
          <target state="translated">3G」の速度のいずれかを試してみてください。</target>
        </trans-unit>
        <trans-unit id="916d283bcc86820526bcc4f4fbe336d8a152ee13" translate="yes" xml:space="preserve">
          <source>Try setting it to &lt;code&gt;'prefix'&lt;/code&gt; and clicking the &lt;code&gt;Go to sidekicks&lt;/code&gt; button. Since that's a bad URL, you should see the &quot;Page not found&quot; page. Instead, you're still on the &quot;Heroes&quot; page. Enter a bad URL in the browser address bar. You're instantly re-routed to &lt;code&gt;/heroes&lt;/code&gt;. Every URL, good or bad, that falls through to this route definition is a match.</source>
          <target state="translated">&lt;code&gt;'prefix'&lt;/code&gt; に設定し、[ &lt;code&gt;Go to sidekicks&lt;/code&gt; ]ボタンをクリックしてみてください。これは不正なURLなので、「ページが見つかりません」ページが表示されます。代わりに、あなたはまだ「ヒーロー」ページにいます。ブラウザのアドレスバーに不正なURLを入力してください。 &lt;code&gt;/heroes&lt;/code&gt; に即座に再ルーティングされます。このルート定義に該当するすべてのURLは、良いか悪いかにかかわらず、一致します。</target>
        </trans-unit>
        <trans-unit id="dc1ea3e260d075f0697ffb4ad683deb138ba7e53" translate="yes" xml:space="preserve">
          <source>Try setting it to &lt;code&gt;'prefix'&lt;/code&gt; then click the &lt;code&gt;Go to sidekicks&lt;/code&gt; button. Remember that's a bad URL and you should see the &quot;Page not found&quot; page. Instead, you're still on the &quot;Heroes&quot; page. Enter a bad URL in the browser address bar. You're instantly re-routed to &lt;code&gt;/heroes&lt;/code&gt;. &lt;em&gt;Every&lt;/em&gt; URL, good or bad, that falls through to &lt;em&gt;this&lt;/em&gt; route definition will be a match.</source>
          <target state="translated">&lt;code&gt;'prefix'&lt;/code&gt; 設定してから、「 &lt;code&gt;Go to sidekicks&lt;/code&gt; 」ボタンをクリックしてください。これは悪いURLであり、「ページが見つかりません」ページが表示されるはずです。代わりに、あなたはまだ「ヒーロー」ページにいます。ブラウザのアドレスバーに不正なURLを入力します。 &lt;code&gt;/heroes&lt;/code&gt; にすぐに再ルーティングされます。&lt;em&gt;この&lt;/em&gt;ルート定義に該当する&lt;em&gt;すべての&lt;/em&gt; URL（良いか悪いか）が一致します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae0be3b047c4a387d93f02977418e5b637e0c752" translate="yes" xml:space="preserve">
          <source>Try the &quot;Notify Me&quot; button:</source>
          <target state="translated">通知する」ボタンを試してみてください。</target>
        </trans-unit>
        <trans-unit id="cd0d3f4d9f412d033eddde43a048eb8599b4eed2" translate="yes" xml:space="preserve">
          <source>Try the .</source>
          <target state="translated">試してみてください。</target>
        </trans-unit>
        <trans-unit id="3d6fc4cc6f37c4db0524ee36aee6fae03bc9b160" translate="yes" xml:space="preserve">
          <source>Try the Reactive Forms live-example.</source>
          <target state="translated">Reactive Forms のライブサンプルを試してみてください。</target>
        </trans-unit>
        <trans-unit id="1a5c2c2df13a5a08f5ec5e0c77a14b60e0a6f624" translate="yes" xml:space="preserve">
          <source>Try the change detection profiler &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; then hit Enter.</source>
          <target state="translated">変更検出プロファイラー &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; を試してから、Enterキーを押します。</target>
        </trans-unit>
        <trans-unit id="cc82bb7378a7738346274197a65346c4cb1c2791" translate="yes" xml:space="preserve">
          <source>Try the live example.</source>
          <target state="translated">ライブの例を試してみてください。</target>
        </trans-unit>
        <trans-unit id="b805dd8f7e3739860d3a0a92f9f360211111283e" translate="yes" xml:space="preserve">
          <source>Try this Reactive Forms live-example.</source>
          <target state="translated">この Reactive Forms のライブサンプルを試してみてください。</target>
        </trans-unit>
        <trans-unit id="b20e64d5a4c330fa2d1e596d27eda1450204275a" translate="yes" xml:space="preserve">
          <source>Try to fetch from the network first.</source>
          <target state="translated">まずはネットワークからのフェッチを試してみてください。</target>
        </trans-unit>
        <trans-unit id="6f3deed36905b6ad108038ee3fade698b4b61902" translate="yes" xml:space="preserve">
          <source>Try to minimize the heading depth, preferably only two. But more headings, such as this one, are permitted if they make sense.</source>
          <target state="translated">見出しの深さは最小限にして、できれば2つだけにしてください。しかし、このような見出しは、意味があるならば、より多くの見出しが許されます。</target>
        </trans-unit>
        <trans-unit id="95d44839b57ad612170554fef51a66c4c2b769e8" translate="yes" xml:space="preserve">
          <source>Try to update webdriver.</source>
          <target state="translated">webdriverをアップデートしてみてください。</target>
        </trans-unit>
        <trans-unit id="b44892b7f81948b449b1fceb43f8115ba5ff108b" translate="yes" xml:space="preserve">
          <source>Tu</source>
          <target state="translated">Tu</target>
        </trans-unit>
        <trans-unit id="529541bb390c76152e313351d89de3cd30a1c4bd" translate="yes" xml:space="preserve">
          <source>Tue</source>
          <target state="translated">Tue</target>
        </trans-unit>
        <trans-unit id="42e43b612a5dfae57ddf5929f0fb945ae83cbf61" translate="yes" xml:space="preserve">
          <source>Tuesday</source>
          <target state="translated">Tuesday</target>
        </trans-unit>
        <trans-unit id="db9100479b1bab146b0529edf56cd2ecbd2b852d" translate="yes" xml:space="preserve">
          <source>Turns an array of provider definitions into an array of resolved providers.</source>
          <target state="translated">プロバイダ定義の配列を、解決されたプロバイダの配列に変換します。</target>
        </trans-unit>
        <trans-unit id="383ad3510af7887a34418d15283bb89e03b4bffb" translate="yes" xml:space="preserve">
          <source>Turns on strict Angular compiler flags &lt;a href=&quot;angular-compiler-options#stricttemplates&quot;&gt;&lt;code&gt;strictTemplates&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;angular-compiler-options#strictinjectionparameters&quot;&gt;&lt;code&gt;strictInjectionParameters&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt;&lt;code&gt;strictInputAccessModifiers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">strict Angularコンパイラフラグ&lt;a href=&quot;angular-compiler-options#stricttemplates&quot;&gt; &lt;code&gt;strictTemplates&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;angular-compiler-options#strictinjectionparameters&quot;&gt; &lt;code&gt;strictInjectionParameters&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;template-typecheck#troubleshooting-template-errors&quot;&gt; &lt;code&gt;strictInputAccessModifiers&lt;/code&gt; をオンにし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7a8c0b3d0dcf9c1d0944ace8b26766b7619fce7b" translate="yes" xml:space="preserve">
          <source>Turns the li element and its contents into a template, and uses that to instantiate a view for each item in list.</source>
          <target state="translated">li要素とその内容をテンプレートに変換し、それを使ってリスト内の各項目のビューをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="67bfe76e19af4ce403f2340d240f7abfa0a85e7e" translate="yes" xml:space="preserve">
          <source>Two injector hierarchies</source>
          <target state="translated">2つのインジェクターの階層</target>
        </trans-unit>
        <trans-unit id="5af8d4f5f9dae7eb59bd4d8f4f973fff3523e350" translate="yes" xml:space="preserve">
          <source>Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</source>
          <target state="translated">このフォームの3つのフィールドのうち2つは必須項目です。必須項目には、左側に緑色のバーが付いているので、簡単に見つけることができます。</target>
        </trans-unit>
        <trans-unit id="43f3257791f6c0d8e082c7c2a58ae0090aa05789" translate="yes" xml:space="preserve">
          <source>Two older properties are still available, however, their replacements are preferable as they may be deprecated in a future Angular version.</source>
          <target state="translated">2つの古いプロパティはまだ利用可能ですが、将来のAngularのバージョンで非推奨になる可能性があるので、それらの代替品が望ましいです。</target>
        </trans-unit>
        <trans-unit id="b26194f02c2a9055521cad644dadbcf22c29b12c" translate="yes" xml:space="preserve">
          <source>Two older properties are still available. They are less capable than their replacements, discouraged, and may be deprecated in a future Angular version.</source>
          <target state="translated">2つの古いプロパティはまだ利用可能です。これらは代替品に比べて能力が低く、推奨されず、将来のAngularのバージョンでは非推奨になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a300f2c0186d270173b20803696a0cf5fd774656" translate="yes" xml:space="preserve">
          <source>Two types of errors can occur.</source>
          <target state="translated">2種類のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="c8403b3967903a37a646651f5a30b179b5958e53" translate="yes" xml:space="preserve">
          <source>Two types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error &lt;em&gt;responses&lt;/em&gt;.</source>
          <target state="translated">2種類のエラーが発生する可能性があります。サーバーのバックエンドがリクエストを拒否し、ステータスコード404や500などのHTTPレスポンスを返す場合があります。これらはエラー&lt;em&gt;レスポンス&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="ee50a3e68cf100c0537278aede679f485d09b355" translate="yes" xml:space="preserve">
          <source>Two-way</source>
          <target state="translated">Two-way</target>
        </trans-unit>
        <trans-unit id="76e6c5bfb6eaf94684d63dcc6574a58b41d951d1" translate="yes" xml:space="preserve">
          <source>Two-way binding</source>
          <target state="translated">双方向バインディング</target>
        </trans-unit>
        <trans-unit id="a02bb0a1df250e5934cdce63455e1ad4bc4637b6" translate="yes" xml:space="preserve">
          <source>Two-way binding &lt;code&gt;[(...)]&lt;/code&gt;</source>
          <target state="translated">双方向バインディング &lt;code&gt;[(...)]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abb2ef9985767c53d9cd9fbf56c7a420e7edf720" translate="yes" xml:space="preserve">
          <source>Two-way binding combines property binding with event binding:</source>
          <target state="translated">双方向バインディングは、プロパティバインディングとイベントバインディングを組み合わせたものです。</target>
        </trans-unit>
        <trans-unit id="0ee8d72f683e98e5e49284a4dbb3c6a8dac3d915" translate="yes" xml:space="preserve">
          <source>Two-way binding does two things:</source>
          <target state="translated">双方向バインディングは2つのことをします。</target>
        </trans-unit>
        <trans-unit id="c6d110d5d38ba95a3719301b85f406ad9059aafe" translate="yes" xml:space="preserve">
          <source>Two-way binding gives components in your application a way to share data. Use two-way binding binding to listen for events and update values simultaneously between parent and child components.</source>
          <target state="translated">双方向バインディングは、アプリケーション内のコンポーネントがデータを共有する方法を提供します。双方向バインディングを使用して、親コンポーネントと子コンポーネントの間で同時にイベントをリッスンし、値を更新します。</target>
        </trans-unit>
        <trans-unit id="f559c791fe1735111c9bc3f8318c26c9efdb1820" translate="yes" xml:space="preserve">
          <source>Two-way binding gives your app a way to share data between a component class and its template.</source>
          <target state="translated">双方向バインディングを使用すると、アプリでコンポーネント クラスとそのテンプレート間でデータを共有することができます。</target>
        </trans-unit>
        <trans-unit id="03cb506ca909370dd733aa2c43253165731e42ab" translate="yes" xml:space="preserve">
          <source>Two-way binding in forms</source>
          <target state="translated">フォームの双方向バインディング</target>
        </trans-unit>
        <trans-unit id="5d24cacbc734efe855956d91ed8e0797e5f736ba" translate="yes" xml:space="preserve">
          <source>Two-way data binding (used mainly in &lt;a href=&quot;forms&quot;&gt;template-driven forms&lt;/a&gt;) combines property and event binding in a single notation. Here's an example from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template that uses two-way data binding with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">双方向データバインディング（主に&lt;a href=&quot;forms&quot;&gt;テンプレート駆動フォームで使用&lt;/a&gt;）は、プロパティとイベントバインディングを1つの表記で組み合わせます。これは、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブで双方向のデータバインディングを使用する &lt;code&gt;HeroDetailComponent&lt;/code&gt; テンプレートの例です。</target>
        </trans-unit>
        <trans-unit id="06f67c15fc229f1a2bb0b3b0ebc852bfedb0de8e" translate="yes" xml:space="preserve">
          <source>Two-way data binding with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; を使用した双方向のデータバインディング</target>
        </trans-unit>
        <trans-unit id="6d973b2b83b53e6c30f5b13acc68a0a0c71e118f" translate="yes" xml:space="preserve">
          <source>Two-way data binding with ngModel</source>
          <target state="translated">ngModel による双方向のデータバインディング</target>
        </trans-unit>
        <trans-unit id="f52bdefafb9c2ca15e12f66ca83326ece8bda8ce" translate="yes" xml:space="preserve">
          <source>Two-way sequence: &lt;em&gt;view-to-source-to-view&lt;/em&gt;</source>
          <target state="translated">双方向シーケンス：&lt;em&gt;ビューからソース、ビュー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="abb237ba4f86298e209fd0cde19460f30c5121a4" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;ng.&lt;/code&gt; (usually the console will show auto-complete suggestion)</source>
          <target state="translated">&lt;code&gt;ng.&lt;/code&gt; 入力します。（通常、コンソールにはオートコンプリートの候補が表示されます）</target>
        </trans-unit>
        <trans-unit id="00ec381921f624d45bbd03504823d08111458d72" translate="yes" xml:space="preserve">
          <source>Type annotations can be gradually added to existing functions and variables to pin down their types and get benefits like build-time error checking, great autocompletion support and inline documentation.</source>
          <target state="translated">型アノテーションは、既存の関数や変数に徐々に追加して型を特定し、ビルド時のエラーチェックや自動補完のサポート、インラインドキュメントなどの利点を得ることができます。</target>
        </trans-unit>
        <trans-unit id="35df57064639add6482ba283504c0b41a4d923e6" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">さまざまな種類の &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; のタイプ列挙。</target>
        </trans-unit>
        <trans-unit id="67608246c1a184d4c40c268ca1fdc639f618fa7c" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">さまざまな種類の &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; のタイプ列挙。</target>
        </trans-unit>
        <trans-unit id="57c55c58c8644f8a5cbf6770552ae7125d3582e3" translate="yes" xml:space="preserve">
          <source>Type narrowing</source>
          <target state="translated">タイプの絞り込み</target>
        </trans-unit>
        <trans-unit id="89c46166d379053b9cc0147e94c74fad24f5cce5" translate="yes" xml:space="preserve">
          <source>Type of the listener (e.g. a native DOM event or a custom @Output).</source>
          <target state="translated">リスナーのタイプ (ネイティブの DOM イベントやカスタムの @Output など)。</target>
        </trans-unit>
        <trans-unit id="95d67b98d7690612e1e13d9a3e9a1be2da8d088a" translate="yes" xml:space="preserve">
          <source>Type of the response, narrowed to either the full response or the header.</source>
          <target state="translated">レスポンスのタイプ、完全なレスポンスかヘッダーのどちらかに絞られています。</target>
        </trans-unit>
        <trans-unit id="c05540b14b3733e314b2c94793826ae9c2b0627e" translate="yes" xml:space="preserve">
          <source>Type something in the input box, and watch the display update with each keystroke.</source>
          <target state="translated">入力ボックスに何かを入力し、キーを押すたびに表示が更新されるのを見てください。</target>
        </trans-unit>
        <trans-unit id="33ab71a8dcc6216b348bea2620429ad622b3147d" translate="yes" xml:space="preserve">
          <source>Type the &lt;code&gt;$event&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 入力します</target>
        </trans-unit>
        <trans-unit id="01e12f16a8da430c9b64b2d92b35b38ac6541548" translate="yes" xml:space="preserve">
          <source>Type used for modifications to metadata</source>
          <target state="translated">メタデータの修正に使用するタイプ</target>
        </trans-unit>
        <trans-unit id="5173fdf6f5703224da499d4346fe617ae8193603" translate="yes" xml:space="preserve">
          <source>Type-ahead suggestions</source>
          <target state="translated">タイプ先行型の提案</target>
        </trans-unit>
        <trans-unit id="9c733ffadf4f948ba611c69673474803d64d1601" translate="yes" xml:space="preserve">
          <source>TypeDecorator</source>
          <target state="translated">TypeDecorator</target>
        </trans-unit>
        <trans-unit id="e6711bda99893016ef166d44941fe0aeec10d722" translate="yes" xml:space="preserve">
          <source>TypeProvider</source>
          <target state="translated">TypeProvider</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="27fa45a5f3c8fb13fa7acab3ba38cabe780416f0" translate="yes" xml:space="preserve">
          <source>TypeScript 3.9 is no longer supported. Please update to TypeScript 4.0. See &lt;a href=&quot;https://github.com/angular/angular/pull/39313&quot;&gt;PR 39313&lt;/a&gt;.</source>
          <target state="translated">TypeScript3.9はサポートされなくなりました。TypeScript4.0に更新してください。&lt;a href=&quot;https://github.com/angular/angular/pull/39313&quot;&gt;PR39313を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eea2f4b377967e9066abaa29b6c1756fe6ff90ed" translate="yes" xml:space="preserve">
          <source>TypeScript Configuration</source>
          <target state="translated">TypeScript の設定</target>
        </trans-unit>
        <trans-unit id="d08f0fbcc73c7306dc8d1fd2df1b684771e05b98" translate="yes" xml:space="preserve">
          <source>TypeScript Typings</source>
          <target state="translated">TypeScript の型付け</target>
        </trans-unit>
        <trans-unit id="070cfc661eff3e856be58ff916c3d3780369f7f1" translate="yes" xml:space="preserve">
          <source>TypeScript and HTML5 programming.</source>
          <target state="translated">TypeScriptとHTML5のプログラミング。</target>
        </trans-unit>
        <trans-unit id="e31ca1750956f6690f31bf9cdae28a7deb46de6e" translate="yes" xml:space="preserve">
          <source>TypeScript configuration</source>
          <target state="translated">タイプスクリプト設定</target>
        </trans-unit>
        <trans-unit id="568ece999d38f89aa19bccbc22c354f6f68a64b1" translate="yes" xml:space="preserve">
          <source>TypeScript configuration In the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt; section determines the ECMAScript target version that the code is compiled to. Modern browsers support ES2015 natively, while ES5 is more commonly used to support legacy browsers.</source>
          <target state="translated">活字体活字体の構成ファイル内の構成、 &lt;code&gt;tsconfig.json&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; における &lt;code&gt;compilerOptions&lt;/code&gt; のセクションでは、コードにコンパイルされていることをECMAScriptの対象バージョンを決定します。最新のブラウザーはES2015をネイティブでサポートしていますが、ES5はレガシーブラウザーをサポートするために一般的に使用されています。</target>
        </trans-unit>
        <trans-unit id="4498390d814c37edb18467aa0deb8da7899b4db8" translate="yes" xml:space="preserve">
          <source>TypeScript configuration file</source>
          <target state="translated">タイプスクリプト設定ファイル</target>
        </trans-unit>
        <trans-unit id="b1e9557f6d0130ab631bf37ddceaa7ef43c0683e" translate="yes" xml:space="preserve">
          <source>TypeScript configuration for Web Worker modules.</source>
          <target state="translated">Web WorkerモジュールのTypeScript設定。</target>
        </trans-unit>
        <trans-unit id="ffe80e00ee1ac5833b065ce121ce10c3b973c059" translate="yes" xml:space="preserve">
          <source>TypeScript definition files for 3rd party libraries such as Jasmine and Node.js.</source>
          <target state="translated">JasmineやNode.jsなどのサードパーティ製ライブラリ用のTypeScript定義ファイル。</target>
        </trans-unit>
        <trans-unit id="0b3cb1f49429cb05d8a3b0bcacdfe5ff715b318e" translate="yes" xml:space="preserve">
          <source>TypeScript developers disagree about whether the &lt;code&gt;noImplicitAny&lt;/code&gt; flag should be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. There is no correct answer and you can change the flag later. But your choice now can make a difference in larger projects, so it merits discussion.</source>
          <target state="translated">TypeScript開発者は、 &lt;code&gt;noImplicitAny&lt;/code&gt; フラグを &lt;code&gt;true&lt;/code&gt; にするか &lt;code&gt;false&lt;/code&gt; にするかについて意見が分かれています。正解はありません。フラグは後で変更できます。しかし、ここでの選択は、より大きなプロジェクトに変化をもたらす可能性があるため、議論に値します。</target>
        </trans-unit>
        <trans-unit id="2ac9ee6e703b108a7d6fb03a16a6d571742ddf64" translate="yes" xml:space="preserve">
          <source>TypeScript execution environment and REPL for Node.js.</source>
          <target state="translated">Node.js用のTypeScript実行環境とREPL。</target>
        </trans-unit>
        <trans-unit id="e285eb073cfe4ca1656c07087772b6ee1156351a" translate="yes" xml:space="preserve">
          <source>TypeScript includes a special declaration file called &lt;code&gt;lib.d.ts&lt;/code&gt;. This file contains the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</source>
          <target state="translated">TypeScriptには、 &lt;code&gt;lib.d.ts&lt;/code&gt; という特別な宣言ファイルが含まれています。このファイルには、JavaScriptランタイムとDOMに存在するさまざまな一般的なJavaScript構成のアンビエント宣言が含まれています。</target>
        </trans-unit>
        <trans-unit id="d17e05e344ecb4e3225929fb6a865b40d4814eb9" translate="yes" xml:space="preserve">
          <source>TypeScript is a primary language for Angular application development. It is a superset of JavaScript with design-time support for type safety and tooling.</source>
          <target state="translated">TypeScript は Angular アプリケーション開発の主要な言語です。これは JavaScript のスーパーセットで、型の安全性とツールの設計時間をサポートしています。</target>
        </trans-unit>
        <trans-unit id="2c8995564b3de9df5c51483595738fe4422b297b" translate="yes" xml:space="preserve">
          <source>TypeScript is the preferred language for Angular development. Read more about TypeScript at &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org&lt;/a&gt;.</source>
          <target state="translated">TypeScriptは、Angular開発に推奨される言語です。&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.orgで&lt;/a&gt; TypeScriptの詳細を読んでください。</target>
        </trans-unit>
        <trans-unit id="65fd758bf6b72b6902912683c0db7c87ad16849d" translate="yes" xml:space="preserve">
          <source>TypeScript prevents you from setting &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; read-only properties.</source>
          <target state="translated">TypeScriptは、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; の読み取り専用プロパティを設定できないようにします。</target>
        </trans-unit>
        <trans-unit id="b0c307b7f89ffd82733eec999738292acbded4fe" translate="yes" xml:space="preserve">
          <source>TypeScript programming</source>
          <target state="translated">タイプスクリプトプログラミング</target>
        </trans-unit>
        <trans-unit id="b1f5cc716c4de2a81ea99f71b78e0b5afc34aa22" translate="yes" xml:space="preserve">
          <source>TypeScript programming.</source>
          <target state="translated">TypeScriptプログラミング。</target>
        </trans-unit>
        <trans-unit id="9363321037561d15481258cee32b0a8aa362ef21" translate="yes" xml:space="preserve">
          <source>TypeScript typings</source>
          <target state="translated">TypeScript の型付け</target>
        </trans-unit>
        <trans-unit id="13b49b13fb502567852c984e23e397ba1fe80b3a" translate="yes" xml:space="preserve">
          <source>TypeScript understands ambient types so you don't import them. The Angular compiler does not understand a type that you neglect to export or import.</source>
          <target state="translated">TypeScriptはアンビエント型を理解しているので、インポートはしません。Angularコンパイラは、エクスポートやインポートを怠った型を理解していません。</target>
        </trans-unit>
        <trans-unit id="77e137f60887b3a3c13ebdb09dee2d2b67d890c4" translate="yes" xml:space="preserve">
          <source>TypeScript will prevent you from setting &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; readonly properties.</source>
          <target state="translated">TypeScriptを使用すると、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; の読み取り専用プロパティを設定できなくなります。</target>
        </trans-unit>
        <trans-unit id="717ede79628ca336772d228c8b05e09de2a3a0c2" translate="yes" xml:space="preserve">
          <source>TypeScript-aware editors leverage these same definition files to display type information about library features.</source>
          <target state="translated">TypeScript対応のエディタは、これらの定義ファイルを利用して、ライブラリの機能に関する型情報を表示します。</target>
        </trans-unit>
        <trans-unit id="7118d9e8c875a30ba644adcfe209053d423d1da0" translate="yes" xml:space="preserve">
          <source>Typed Array</source>
          <target state="translated">型付き配列</target>
        </trans-unit>
        <trans-unit id="7ab3c88469253783493694d6963d80d7a8308f54" translate="yes" xml:space="preserve">
          <source>Typed according to the expected type of the response.</source>
          <target state="translated">応答の期待されるタイプに応じてタイプされます。</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="c713e3cd5c50ec234c9ce6d04250d694a2a4d577" translate="yes" xml:space="preserve">
          <source>Types defined in a &lt;code&gt;@types/&lt;/code&gt; package for a library installed into the workspace are automatically added to the TypeScript configuration for the project that uses that library. TypeScript looks for types in the &lt;code&gt;node_modules/@types&lt;/code&gt; folder by default, so you don't have to add each type package individually.</source>
          <target state="translated">ワークスペースにインストールされたライブラリの &lt;code&gt;@types/&lt;/code&gt; パッケージで定義されたタイプは、そのライブラリを使用するプロジェクトのTypeScript構成に自動的に追加されます。TypeScriptはデフォルトで &lt;code&gt;node_modules/@types&lt;/code&gt; フォルダーでタイプを検索するため、各タイプパッケージを個別に追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="82d702d4bc4170c7fef9f79cddd0b3758d5bd6d0" translate="yes" xml:space="preserve">
          <source>Types for many Angular built-in pipes have been either narrowed or expanded to be more accurate. For more information, see the corresponding &lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes&lt;/a&gt; API documentation. See &lt;a href=&quot;https://github.com/angular/angular/pull/37447&quot;&gt;PR 37447&lt;/a&gt;.</source>
          <target state="translated">多くのAngularビルトインパイプのタイプは、より正確になるように狭められたり拡張されたりしています。詳細については、対応する&lt;a href=&quot;../api?type=pipe&quot;&gt;PipesAPIの&lt;/a&gt;ドキュメントを参照してください。&lt;a href=&quot;https://github.com/angular/angular/pull/37447&quot;&gt;PR37447を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="12392cbc3086f77e04a6c62a73c887b3f9c633d6" translate="yes" xml:space="preserve">
          <source>Types of Feature Modules</source>
          <target state="translated">機能モジュールの種類</target>
        </trans-unit>
        <trans-unit id="118122abcc89881e0578f9aef369355356986b9f" translate="yes" xml:space="preserve">
          <source>Types of NgModules</source>
          <target state="translated">NgModulesの種類</target>
        </trans-unit>
        <trans-unit id="11fe3760894bbd3efef56cd08f43a7f909233a1d" translate="yes" xml:space="preserve">
          <source>Types of modifiers</source>
          <target state="translated">修飾子の種類</target>
        </trans-unit>
        <trans-unit id="0ef8a95f38c50052d0013209588f9bd78801e33d" translate="yes" xml:space="preserve">
          <source>Typically new embedded views are attached to the view container of this location, but in advanced use-cases, the view can be attached to a different container while keeping the data-binding and injection context from the original location.</source>
          <target state="translated">通常、新しい埋め込みビューは、この場所のビューコンテナにアタッチされますが、高度なユースケースでは、元の場所のデータバインディングとインジェクションコンテキストを維持したまま、ビューを別のコンテナにアタッチすることができます。</target>
        </trans-unit>
        <trans-unit id="2c7b40120f45df1933863f5ac01d78ac42ee438a" translate="yes" xml:space="preserve">
          <source>Typically, animations involve multiple style &lt;em&gt;transformations&lt;/em&gt; over time. An HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each transformation.</source>
          <target state="translated">通常、アニメーションには時間の経過に伴う複数のスタイル&lt;em&gt;変換が含ま&lt;/em&gt;れます。HTML要素は、ページから移動、色の変更、拡大または縮小、フェード、またはスライドすることができます。これらの変更は、同時に発生することも、順次発生することもあります。各変換のタイミングを制御できます。</target>
        </trans-unit>
        <trans-unit id="b5fb32f38245ff9f2d99b2dd935857d879ebced7" translate="yes" xml:space="preserve">
          <source>Typically, the name of a generated artifact can be given as an argument to the command or specified with the --name option.</source>
          <target state="translated">通常、生成された成果物の名前は、コマンドの引数として与えるか、--name オプションで指定することができます。</target>
        </trans-unit>
        <trans-unit id="b95554d848ef81d79b0b709dc7f5aaeb34a12474" translate="yes" xml:space="preserve">
          <source>Typically, you add a TypeScript configuration file called &lt;code&gt;tsconfig.json&lt;/code&gt; to your project to guide the compiler as it generates JavaScript files.</source>
          <target state="translated">通常、 &lt;code&gt;tsconfig.json&lt;/code&gt; というTypeScript構成ファイルをプロジェクトに追加して、JavaScriptファイルを生成するコンパイラーをガイドします。</target>
        </trans-unit>
        <trans-unit id="09553776cac966b88a445abac2c889e11456f99a" translate="yes" xml:space="preserve">
          <source>Typing the directive's context</source>
          <target state="translated">ディレクティブのコンテキストを入力する</target>
        </trans-unit>
        <trans-unit id="a0bd1a75c0172c79f7c9ff6dc164b3a599561a53" translate="yes" xml:space="preserve">
          <source>Typing the event object reveals a significant objection to passing the entire DOM event into the method: the component has too much awareness of the template details. It can't extract information without knowing more than it should about the HTML implementation. That breaks the separation of concerns between the template (&lt;em&gt;what the user sees&lt;/em&gt;) and the component (&lt;em&gt;how the application processes user data&lt;/em&gt;).</source>
          <target state="translated">イベントオブジェクトを入力すると、DOMイベント全体をメソッドに渡すことに対する重大な異論が明らかになります。コンポーネントはテンプレートの詳細を認識しすぎています。HTML実装について必要以上の知識がないと、情報を抽出できません。これは、テンプレート（&lt;em&gt;ユーザーに表示されるもの&lt;/em&gt;）とコンポーネント（&lt;em&gt;アプリケーションがユーザーデータを処理する方法&lt;/em&gt;）の間の懸念の分離を壊し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="480af6c7beed3c898f5f1f02a7bf65dedf1b38cc" translate="yes" xml:space="preserve">
          <source>Typings for custom elements</source>
          <target state="translated">カスタム要素のタイプ</target>
        </trans-unit>
        <trans-unit id="20bdf90100bc0696258702c718f92a1b02cab2b8" translate="yes" xml:space="preserve">
          <source>UPPER_UNDERSCORE_CASE (or UPPER_SNAKE_CASE, or SCREAMING_SNAKE_CASE): Traditional for constants (acceptable, but prefer camelCase). Upper snake case uses words in all capital letters connected with underscores. For example, &quot;FIX_ME&quot;.</source>
          <target state="translated">UPPER_UNDERSCORE_CASE(またはUPPER_SNAKE_CASE、またはSCREAMING_SNAKE_CASE)。定数用の伝統的なケースです(許容されますが、キャメルケースの方が好ましいです)。UPPER_SNAKE_CASEでは、すべての大文字をアンダースコアでつないだ単語を使用します。例えば、&quot;FIX_ME&quot;。</target>
        </trans-unit>
        <trans-unit id="a27c9c50aeeb496cbd6ae8eb92bcc77112bfe9fd" translate="yes" xml:space="preserve">
          <source>URL of the resource retrieved, or null if not available.</source>
          <target state="translated">取得したリソースのURL、利用できない場合はnull。</target>
        </trans-unit>
        <trans-unit id="f65f44308f1ade7cb98e9a6130f17b75f1c7965f" translate="yes" xml:space="preserve">
          <source>URL path to normalize.</source>
          <target state="translated">正規化するURLのパス。</target>
        </trans-unit>
        <trans-unit id="c774e36c8a233fe47b885d57e6f9250be88a291c" translate="yes" xml:space="preserve">
          <source>URL query strings</source>
          <target state="translated">URL クエリ文字列</target>
        </trans-unit>
        <trans-unit id="ab8c3d3d9bc2c2c289a7a884d43b797a116cdf17" translate="yes" xml:space="preserve">
          <source>URL string</source>
          <target state="translated">URL文字列</target>
        </trans-unit>
        <trans-unit id="6415e7db453017765698b94a474b0ba310523c13" translate="yes" xml:space="preserve">
          <source>URL string.</source>
          <target state="translated">URLの文字列。</target>
        </trans-unit>
        <trans-unit id="6229662eaa903e67f2ed0f1353e8aa463aa6f79f" translate="yes" xml:space="preserve">
          <source>URL where files will be deployed.</source>
          <target state="translated">ファイルが配置されるURL。</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="82ec40ec287dfe6afdf2c04f8ac45df9a5b41f73" translate="yes" xml:space="preserve">
          <source>Uglification: rewrites code to use short, cryptic variable and function names.</source>
          <target state="translated">凝集:短くて暗号的な変数名や関数名を使用するようにコードを書き換えます。</target>
        </trans-unit>
        <trans-unit id="dec6154649e20b8a4f868f22a0c2826a4a662d9a" translate="yes" xml:space="preserve">
          <source>Ugly, long section header anchors</source>
          <target state="translated">不細工で長いセクションのヘッダーアンカー</target>
        </trans-unit>
        <trans-unit id="3698e121e629257a193cc1ee0ba5707f90dd1040" translate="yes" xml:space="preserve">
          <source>UiArguments</source>
          <target state="translated">UiArguments</target>
        </trans-unit>
        <trans-unit id="0368218af0bd6062b199bada30a6e4035b16a7cb" translate="yes" xml:space="preserve">
          <source>Unable to find a parent by its base class</source>
          <target state="translated">基底クラスで親を見つけることができない</target>
        </trans-unit>
        <trans-unit id="fe8512cc65af8cf880d1c2bbb10e3cf1f64d86cd" translate="yes" xml:space="preserve">
          <source>Unbound inputs for directives (e.g. name in &lt;code&gt;&amp;lt;my-comp name=&quot;&quot;&amp;gt;&lt;/code&gt;) are now set upon creation of the view, before change detection runs (previously, all inputs were set during change detection).</source>
          <target state="translated">ディレクティブのバインドされていない入力（たとえば、 &lt;code&gt;&amp;lt;my-comp name=&quot;&quot;&amp;gt;&lt;/code&gt; の名前）は、変更検出が実行される前に、ビューの作成時に設定されるようになりました（以前はすべての入力が変更検出中に設定されていました）。</target>
        </trans-unit>
        <trans-unit id="0585362025afaad2cb556c1470ca13de2ec4b0c6" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;projects/&lt;/code&gt; folder, the &lt;code&gt;my-lib&lt;/code&gt; folder contains your library code.</source>
          <target state="translated">&lt;code&gt;projects/&lt;/code&gt; フォルダーの下の &lt;code&gt;my-lib&lt;/code&gt; フォルダーにはライブラリコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="4b9ec3e5288ad1a146764809c08b172bb0ce4e69" translate="yes" xml:space="preserve">
          <source>Underlying strategy used by the NgElement to create/destroy the component and react to input changes.</source>
          <target state="translated">コンポーネントを作成/破棄し、入力の変更に反応するために NgElement が使用する基本的な戦略。</target>
        </trans-unit>
        <trans-unit id="406a6ce1fa7023e50b1cd5fc217aed691fc4469a" translate="yes" xml:space="preserve">
          <source>Understanding the flow of data</source>
          <target state="translated">データの流れを理解する</target>
        </trans-unit>
        <trans-unit id="afd606b1b8fa2ecceb75d550cab8b8e4f51e46bf" translate="yes" xml:space="preserve">
          <source>Understanding the idea of the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; demarcation is especially significant when you configure services in the component class.</source>
          <target state="translated">&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 境界の概念を理解することは、コンポーネントクラスでサービスを構成するときに特に重要です。</target>
        </trans-unit>
        <trans-unit id="4f597440e2efa26501d9e6fdf63a407e19ac4158" translate="yes" xml:space="preserve">
          <source>Understanding the underlying logical structure of the Angular template will give you a foundation for configuring services and in turn control their visibility.</source>
          <target state="translated">Angularテンプレートの基本的な論理構造を理解することで、サービスを設定し、その可視性をコントロールするための基礎ができます。</target>
        </trans-unit>
        <trans-unit id="824952b55c3b4916ed165e11642a01333e88585f" translate="yes" xml:space="preserve">
          <source>Understanding this component requires only the Angular concepts covered in previous pages.</source>
          <target state="translated">このコンポーネントを理解するには、前のページで説明したAngularの概念のみが必要です。</target>
        </trans-unit>
        <trans-unit id="b0c0452cb24336e8190f9828a028e109b51bace3" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;ngOnInit&lt;/code&gt; is only called once per component instantiation. You need a way to detect when the route parameters change from &lt;em&gt;within the same instance&lt;/em&gt;. The observable &lt;code&gt;paramMap&lt;/code&gt; property handles that beautifully.</source>
          <target state="translated">残念ながら、 &lt;code&gt;ngOnInit&lt;/code&gt; はコンポーネントのインスタンス化ごとに一度だけ呼び出されます。&lt;em&gt;同じインスタンス内&lt;/em&gt;からルートパラメータが変更されたことを検出する方法が必要です。 &lt;code&gt;paramMap&lt;/code&gt; 可能なparamMapプロパティは、それを美しく処理します。</target>
        </trans-unit>
        <trans-unit id="d3ef861886f3ab5ce3796bed96c86f8269cc8b32" translate="yes" xml:space="preserve">
          <source>Unfortunately, Angular cannot inject the &lt;code&gt;HeroService&lt;/code&gt; directly into the base class. You must provide the &lt;code&gt;HeroService&lt;/code&gt; again for &lt;em&gt;this&lt;/em&gt; component, then pass it down to the base class inside the constructor.</source>
          <target state="translated">残念ながら、Angularは &lt;code&gt;HeroService&lt;/code&gt; を直接基本クラスに注入することはできません。&lt;em&gt;この&lt;/em&gt;コンポーネントに &lt;code&gt;HeroService&lt;/code&gt; を再度提供し、それをコンストラクター内の基本クラスに渡す必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1139beaeaa7d4f3a71b279c04ed1135ac0675787" translate="yes" xml:space="preserve">
          <source>Unfortunately, AngularJS dependencies are not automatically available to Angular components. You must upgrade this service via a &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; to make &lt;code&gt;$routeParams&lt;/code&gt; an Angular injectable. Do that in a new file called &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; and import it in &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">残念ながら、AngularJSの依存関係は、Angularコンポーネントでは自動的に利用できません。 &lt;code&gt;$routeParams&lt;/code&gt; をAngular インジェクタブルにするには、&lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;ファクトリプロバイダー&lt;/a&gt;を介してこのサービスをアップグレードする必要があります。 &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; という新しいファイルでそれを &lt;code&gt;app.module.ts&lt;/code&gt; 、app.module.tsにインポートします。</target>
        </trans-unit>
        <trans-unit id="4e7ab2a4cdcc53a9daa1be69012bf4487cc99281" translate="yes" xml:space="preserve">
          <source>Unfortunately, it's easy to mistakenly create invalid JSON that way. The preferred way is to create a JSON partial file with the fragment you want to display.</source>
          <target state="translated">残念ながら、その方法では無効なJSONを誤って作成してしまいがちです。好ましい方法は、表示したいフラグメントを含むJSONの部分ファイルを作成することです。</target>
        </trans-unit>
        <trans-unit id="0867a551d468c9cf54a4c9bf87311fc791c6fddc" translate="yes" xml:space="preserve">
          <source>Unfortunately, this doesn't work. The  confirms that the &lt;code&gt;alex&lt;/code&gt; parameter is null. &lt;em&gt;You cannot inject a parent by its base class.&lt;/em&gt;</source>
          <target state="translated">残念ながら、これは機能しません。は &lt;code&gt;alex&lt;/code&gt; パラメータがnullであることを確認します。&lt;em&gt;親をその基本クラスで注入することはできません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a68c075bb4d2b8034dd50549a21ce7d7c5111785" translate="yes" xml:space="preserve">
          <source>Unhashed content</source>
          <target state="translated">ハッシュ化されていないコンテンツ</target>
        </trans-unit>
        <trans-unit id="ae46bafe22f6a8888ae9109a8ce0be4fb84797fc" translate="yes" xml:space="preserve">
          <source>Unicode locale identifiers</source>
          <target state="translated">ローカル Unicode 識別子</target>
        </trans-unit>
        <trans-unit id="4fab6ba13e9a4725c7f55ea2ec290c22e51d62b3" translate="yes" xml:space="preserve">
          <source>Union type for all possible events on the response stream.</source>
          <target state="translated">レスポンス・ストリーム上のすべての可能なイベントのためのユニオン・タイプ。</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">ユニットテスト</target>
        </trans-unit>
        <trans-unit id="db8942af8190970c5de3a92510cbcaccdbfc8120" translate="yes" xml:space="preserve">
          <source>Unit test file names</source>
          <target state="translated">ユニットテストファイル名</target>
        </trans-unit>
        <trans-unit id="29d1c928f5bc2da434acc08d22662b06b1e6a793" translate="yes" xml:space="preserve">
          <source>Unit tests are located side-by-side with application code where they are easily found, as described in the rules for &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;Organizing Tests&lt;/a&gt;.</source>
          <target state="translated">ユニットテストは、&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;テストの編成&lt;/a&gt;のルールで説明されているように、アプリケーションコードと並べて配置され、簡単に見つけることができます。</target>
        </trans-unit>
        <trans-unit id="d02603176f8822a40aaa5b4270e49934a7f83824" translate="yes" xml:space="preserve">
          <source>Universal</source>
          <target state="translated">Universal</target>
        </trans-unit>
        <trans-unit id="aff10513c0d4453b031e927d20f60a376e5f4fbf" translate="yes" xml:space="preserve">
          <source>Universal applications use the Angular &lt;code&gt;platform-server&lt;/code&gt; package (as opposed to &lt;code&gt;platform-browser&lt;/code&gt;), which provides server implementations of the DOM, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and other low-level features that don't rely on a browser.</source>
          <target state="translated">ユニバーサルアプリケーションは、 &lt;code&gt;platform-server&lt;/code&gt; &lt;code&gt;platform-browser&lt;/code&gt; パッケージではなく、Angular プラットフォームサーバーパッケージを使用します。これは、ブラウザーに依存しないDOM、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 、およびその他の低レベル機能のサーバー実装を提供します。</target>
        </trans-unit>
        <trans-unit id="1b3d6e5815238e0752a3fe0b7b98c0c2d1361792" translate="yes" xml:space="preserve">
          <source>Universal in action</source>
          <target state="translated">行動中のユニバーサル</target>
        </trans-unit>
        <trans-unit id="dfa8fc69d23bd49ebc9a6555c9504f90cf88d7d1" translate="yes" xml:space="preserve">
          <source>Universal template engine</source>
          <target state="translated">ユニバーサルテンプレートエンジン</target>
        </trans-unit>
        <trans-unit id="8a007210f1fae1f94e3d5f08f71db96b4634231f" translate="yes" xml:space="preserve">
          <source>Universal tutorial</source>
          <target state="translated">ユニバーサルチュートリアル</target>
        </trans-unit>
        <trans-unit id="7128eb1919baae98fa34b937a937468e6cef52dd" translate="yes" xml:space="preserve">
          <source>Universal web servers</source>
          <target state="translated">ユニバーサルウェブサーバー</target>
        </trans-unit>
        <trans-unit id="4c8eeb97df443eae9c961beeb83622d6ee4e82cc" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, all code snippets in this page are derived from sample source code located in the &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; directory.</source>
          <target state="translated">特に明記されていない限り、このページのすべてのコードスニペットは、 &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; ディレクトリにあるサンプルソースコードから派生しています。</target>
        </trans-unit>
        <trans-unit id="c6cf3859698e15c5299392bec7dbb52c091995b6" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, patterns use a limited glob format:</source>
          <target state="translated">特に指定がない限り、パターンは限定されたグロブ形式を使用します。</target>
        </trans-unit>
        <trans-unit id="aee4b6356253d8d620e3f11e4e7bc8c515a04ba8" translate="yes" xml:space="preserve">
          <source>Unless you are fluent in the language and have the time to edit translations, you would likely send each translation file to a translator, who would then use an XLIFF file editor to create and edit the translation.</source>
          <target state="translated">あなたが言語に精通しており、翻訳を編集する時間を持っていない限り、あなたはおそらく翻訳者に各翻訳ファイルを送信し、翻訳を作成し、編集するためにXLIFFファイルエディタを使用するでしょう。</target>
        </trans-unit>
        <trans-unit id="997a0eb0ed95f2be66009dfc632a3a65cd86399d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not automatically run a &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$digest()&lt;/a&gt; when changes are detected in the Angular part of the application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; とは異なり、アプリケーションのAngular部分で変更が検出された場合、 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$ digest（）を&lt;/a&gt;自動的に実行しません。</target>
        </trans-unit>
        <trans-unit id="a2a526d27ea3191a1868165ff807c75c16ebcdfe" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not bootstrap the main AngularJS module inside the &lt;a href=&quot;../../core/ngzone&quot;&gt;Angular zone&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、&lt;a href=&quot;../../core/ngzone&quot;&gt;Angularゾーン&lt;/a&gt;内のメインAngularJSモジュールをブートストラップしません。</target>
        </trans-unit>
        <trans-unit id="b662d56928e588ac496f4c10d2baf470830bd906" translate="yes" xml:space="preserve">
          <source>Unlike &lt;em&gt;Hero Detail&lt;/em&gt;, which updates as you type, &lt;em&gt;Crisis Detail&lt;/em&gt; changes are temporary until you either save or discard them by pressing the &quot;Save&quot; or &quot;Cancel&quot; buttons. Both buttons navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; and its list of crises.</source>
          <target state="translated">入力時に更新される&lt;em&gt;ヒーローの詳細&lt;/em&gt;とは異なり、&lt;em&gt;危機の詳細の&lt;/em&gt;変更は、[保存]または[キャンセル]ボタンを押して保存または破棄するまでの一時的なものです。どちらのボタンも、&lt;em&gt;危機センター&lt;/em&gt;とその危機のリストに戻ります。</target>
        </trans-unit>
        <trans-unit id="17cc853061da6fd12dc97c043a57e14e493a031e" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript modules, an NgModule can extend the &lt;em&gt;entire&lt;/em&gt; application with services by adding providers to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">JavaScriptモジュールとは異なり、NgModule は &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;リストにプロバイダーを追加することにより、サービス&lt;em&gt;全体で&lt;/em&gt;アプリケーション&lt;em&gt;全体&lt;/em&gt;を拡張できます。</target>
        </trans-unit>
        <trans-unit id="c061fb170ebb3deb768717f260b104981728d5c0" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript, which uses strict equality, Angular uses loose equality. This means that the empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt; matches 0.</source>
          <target state="translated">厳密な同等性を使用するJavaScriptとは異なり、Angularは緩やかな同等性を使用します。つまり、空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; は 0と一致します。</target>
        </trans-unit>
        <trans-unit id="d12281a35071e2f70968ecec4a88ccf48823d979" translate="yes" xml:space="preserve">
          <source>Unlike asset resources, data requests are not versioned along with the app. They're cached according to manually-configured policies that are more useful for situations such as API requests and other data dependencies.</source>
          <target state="translated">アセット リソースとは異なり、データ リクエストはアプリと一緒にバージョン管理されません。これらは手動で設定したポリシーに従ってキャッシュされ、API リクエストやその他のデータ依存関係などの状況でより便利です。</target>
        </trans-unit>
        <trans-unit id="883ea145ab160985399b62f775b21393220f3076" translate="yes" xml:space="preserve">
          <source>Unlike providers of the modules loaded at launch, providers of lazy-loaded modules are &lt;em&gt;module-scoped&lt;/em&gt;.</source>
          <target state="translated">起動時にロードされるモジュールのプロバイダーとは異なり、遅延ロードされたモジュールのプロバイダーは&lt;em&gt;モジュールスコープ&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="2dccdc1ebcf214c2d4a6f553b10ed989603c0757" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;template-expression-operators#safe-navigation-operator&quot;&gt;&lt;em&gt;safe navigation operator&lt;/em&gt;&lt;/a&gt;, the non-null assertion operator does not guard against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Rather, it tells the TypeScript type checker to suspend strict &lt;code&gt;null&lt;/code&gt; checks for a specific property expression.</source>
          <target state="translated">&lt;a href=&quot;template-expression-operators#safe-navigation-operator&quot;&gt;&lt;em&gt;安全なナビゲーション演算子&lt;/em&gt;&lt;/a&gt;とは異なり、null以外のアサーション演算子は &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 。むしろ、TypeScriptタイプチェッカーに、特定のプロパティ式の厳密な &lt;code&gt;null&lt;/code&gt; チェックを一時停止するように指示します。</target>
        </trans-unit>
        <trans-unit id="b6f5e363e9f262e106ea06e2709ebaf828ae9100" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;safe navigation operator&lt;/em&gt;&lt;/a&gt;, the non-null assertion operator does not guard against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Rather, it tells the TypeScript type checker to suspend strict &lt;code&gt;null&lt;/code&gt; checks for a specific property expression.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;安全なナビゲーション演算子&lt;/em&gt;&lt;/a&gt;とは異なり、null以外のアサーション演算子は &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; を防ぎません。むしろ、TypeScriptタイプチェッカーに、特定のプロパティ式の厳密な &lt;code&gt;null&lt;/code&gt; チェックを一時停止するように指示します。</target>
        </trans-unit>
        <trans-unit id="ce32abfca7ffb38db90e5d8d87ed729993c1551e" translate="yes" xml:space="preserve">
          <source>Unlike the native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element, the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive has a &lt;code&gt;form&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;&lt;code&gt;form&lt;/code&gt; property allows you to disable the submit button if the &lt;code&gt;itemForm.form.valid&lt;/code&gt; is invalid.</source>
          <target state="translated">ネイティブの &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素とは異なり、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブには &lt;code&gt;form&lt;/code&gt; プロパティがあります。 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;form&lt;/code&gt; プロパティがあれば、あなたが送信ボタンを無効にすることができます &lt;code&gt;itemForm.form.valid&lt;/code&gt; が無効です。</target>
        </trans-unit>
        <trans-unit id="c84f1525536690954f99a413b23d680798dcaedf" translate="yes" xml:space="preserve">
          <source>Unlike the other scripts that make up an application, such as the Angular app bundle, the service worker is preserved after the user closes the tab. The next time that browser loads the application, the service worker loads first, and can intercept every request for resources to load the application. If the service worker is designed to do so, it can &lt;em&gt;completely satisfy the loading of the application, without the need for the network&lt;/em&gt;.</source>
          <target state="translated">Angularアプリバンドルなど、アプリケーションを構成する他のスクリプトとは異なり、Service Workerはユーザーがタブを閉じた後も保持されます。次にブラウザーがアプリケーションをロードするときに、Service Workerが最初にロードされ、アプリケーションをロードするためのリソースに対するすべてのリクエストをインターセプトできます。 Service Workerがそのように設計されて&lt;em&gt;いる場合、ネットワークを必要とせずに、アプリケーションのロードを完全に満たす&lt;/em&gt;ことができ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="336b8fcf6da97a73add72fe74ea2828b55965d4a" translate="yes" xml:space="preserve">
          <source>UnrecoverableStateEvent</source>
          <target state="translated">UnrecoverableStateEvent</target>
        </trans-unit>
        <trans-unit id="a978255d15d15f6447322f0e35eabd314f647755" translate="yes" xml:space="preserve">
          <source>Unregister all callbacks that the directive registered with global or application services.</source>
          <target state="translated">グローバルサービスやアプリケーションサービスで登録したコールバックの登録をすべて解除します。</target>
        </trans-unit>
        <trans-unit id="5f33036664974b24cb26da8a2ab6ee9afad16fa6" translate="yes" xml:space="preserve">
          <source>Unregisters all applications</source>
          <target state="translated">すべてのアプリケーションの登録を解除</target>
        </trans-unit>
        <trans-unit id="6d32a4bafd30dfcac7a8a3c144996daff36ea02d" translate="yes" xml:space="preserve">
          <source>Unregisters an application.</source>
          <target state="translated">アプリケーションの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="5ffffa9c4a22117e6f52f99f5cc3c43782a3e756" translate="yes" xml:space="preserve">
          <source>Unstructured</source>
          <target state="translated">Unstructured</target>
        </trans-unit>
        <trans-unit id="36412a76ca0b07002bd71130ee401e82fc2011d1" translate="yes" xml:space="preserve">
          <source>Unstructured and mutable</source>
          <target state="translated">構造化されていないものと変異可能なもの</target>
        </trans-unit>
        <trans-unit id="834cc0ee6089e541b395509ba562516bcafa78e2" translate="yes" xml:space="preserve">
          <source>Unsubscribe</source>
          <target state="translated">Unsubscribe</target>
        </trans-unit>
        <trans-unit id="c21f818702e61674b3964d6b183a26a3133fec9f" translate="yes" xml:space="preserve">
          <source>Unsubscribe from Observables and DOM events.</source>
          <target state="translated">Observables と DOM イベントの購読を解除します。</target>
        </trans-unit>
        <trans-unit id="36f376c88cfb8d16619510a291258ce8d2da42da" translate="yes" xml:space="preserve">
          <source>Unsubscribe using &lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt; を使用してサブスクライブを解除します。</target>
        </trans-unit>
        <trans-unit id="493dc8b26569cd76e59616c46a19c4d0c813beb4" translate="yes" xml:space="preserve">
          <source>Unsubscribes from Service Worker push notifications.</source>
          <target state="translated">サービスワーカーのプッシュ通知を解除します。</target>
        </trans-unit>
        <trans-unit id="df1c180e11f697ae58851be0746d6030d8e54305" translate="yes" xml:space="preserve">
          <source>Unsupported enum member name</source>
          <target state="translated">サポートされていない列挙メンバ名</target>
        </trans-unit>
        <trans-unit id="97a36dffa889515ec7097ac4311b95fa3f61bf7f" translate="yes" xml:space="preserve">
          <source>Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together. The router only supports one primary &lt;em&gt;unnamed&lt;/em&gt; outlet per template.</source>
          <target state="translated">これまでは、1つのコンセントを定義し、そのコンセントの下に子ルートをネストして、ルートをグループ化しました。ルーターは、テンプレートごとに1 つの&lt;em&gt;名前のない&lt;/em&gt;プライマリコンセントのみをサポートします。</target>
        </trans-unit>
        <trans-unit id="0e203966881b5ed9d5493d4c7a9fb99cebeb0b3b" translate="yes" xml:space="preserve">
          <source>Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together. The router only supports one primary unnamed outlet per template.</source>
          <target state="translated">これまでは、単一のアウトレットを定義し、そのアウトレットの下に子ルートを入れ子にしてルートをグループ化していました。ルータはテンプレートごとにプライマリの名前のないアウトレットを1つしかサポートしていません。</target>
        </trans-unit>
        <trans-unit id="0cd4604faf00ea0d7b9ccb2fc1cf0622d23a2bbc" translate="yes" xml:space="preserve">
          <source>Unwrapping data from an observable</source>
          <target state="translated">観測可能なデータのアンラップ</target>
        </trans-unit>
        <trans-unit id="2de3bb02ea926f63aeba38c756a87b0a2edaeece" translate="yes" xml:space="preserve">
          <source>Unwraps a value from an asynchronous primitive.</source>
          <target state="translated">非同期プリミティブから値をアンラップします。</target>
        </trans-unit>
        <trans-unit id="641990fee74114293b8c76ce49cb7bf399384326" translate="yes" xml:space="preserve">
          <source>Up pops a dialog box.</source>
          <target state="translated">ダイアログボックスがポップアップ表示されます。</target>
        </trans-unit>
        <trans-unit id="ec67e6bd96103c22a842afec3ac1381cad313045" translate="yes" xml:space="preserve">
          <source>Up to this point, users can view product information, and simulate sharing and being notified about product changes. They cannot, however, buy products.</source>
          <target state="translated">ここまでは、商品情報を閲覧したり、商品の変更点を共有したり、通知を受けたりすることができます。ただし、商品を購入することはできません。</target>
        </trans-unit>
        <trans-unit id="4ae15402fdbe9d9effa05f440fbe4ce47c9537f7" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; を更新する</target>
        </trans-unit>
        <trans-unit id="496dd8be1173dfef1f30923f2f19597732b208d8" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;app.component.html&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;app.component.html&lt;/code&gt; を次のように更新します。</target>
        </trans-unit>
        <trans-unit id="e59d7b6b2ead1f0fc0b11cee3e56f5210aeccca4" translate="yes" xml:space="preserve">
          <source>Update checks</source>
          <target state="translated">更新チェック</target>
        </trans-unit>
        <trans-unit id="4e81a8a01dd6e963822eee8752358d7afb76a325" translate="yes" xml:space="preserve">
          <source>Update command reference: &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; command reference&lt;/a&gt;</source>
          <target state="translated">更新コマンドリファレンス：&lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; コマンドリファレンス&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0de3f679ddfbe2c120a92aa34594bc38a0c19fc6" translate="yes" xml:space="preserve">
          <source>Update heroes</source>
          <target state="translated">ヒーローを更新する</target>
        </trans-unit>
        <trans-unit id="a4cb9fff8da5beaccbad71dfaf4739db28f45a5b" translate="yes" xml:space="preserve">
          <source>Update instructions: &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;</source>
          <target state="translated">更新手順：&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular更新ガイド&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aee936d4df69b41b6d8369cb77cf1b581c5a9c3f" translate="yes" xml:space="preserve">
          <source>Update it with the following:</source>
          <target state="translated">で更新してください。</target>
        </trans-unit>
        <trans-unit id="c88de57118aa0c10c91423c1171f46023241fa2a" translate="yes" xml:space="preserve">
          <source>Update our e2e testing strategy</source>
          <target state="translated">e2eテスト戦略の更新</target>
        </trans-unit>
        <trans-unit id="aae9bb284e5cbcbfe30098c360fd2e5dac2b8f1d" translate="yes" xml:space="preserve">
          <source>Update schematics</source>
          <target state="translated">回路図の更新</target>
        </trans-unit>
        <trans-unit id="512d25794b17abae99ec7fe3b67436a80aef2643" translate="yes" xml:space="preserve">
          <source>Update the &quot;Checkout&quot; button so that it routes to the &lt;code&gt;/cart&lt;/code&gt; url.</source>
          <target state="translated">「チェックアウト」ボタンを更新して、 &lt;code&gt;/cart&lt;/code&gt; URLにルーティングするようにします。</target>
        </trans-unit>
        <trans-unit id="64bd735ef6309487a57de4917ec465adb94e3a96" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag with a template reference variable, &lt;code&gt;#heroForm&lt;/code&gt;, and set its value as follows.</source>
          <target state="translated">更新 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; テンプレートの参照変数とタグ &lt;code&gt;#heroForm&lt;/code&gt; を、以下のようにその値を設定します。</target>
        </trans-unit>
        <trans-unit id="55262abadc993a08fb22cf285edc08f25cb1c76b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of &lt;code&gt;index.html&lt;/code&gt; to include this style sheet:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; の &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; を更新して、このスタイルシートを含めます。</target>
        </trans-unit>
        <trans-unit id="44edb4f17ea3eb3c127f01bb6cec6f3cf223b788" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive to assign each index in the &lt;code&gt;products&lt;/code&gt; array to the &lt;code&gt;productId&lt;/code&gt; variable when iterating over the list.</source>
          <target state="translated">リストを反復するときに &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ディレクティブを更新して、 &lt;code&gt;products&lt;/code&gt; 配列の各インデックスを &lt;code&gt;productId&lt;/code&gt; 変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="047acd556996d14676e31a2016d5e00031fb3843" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthGuard&lt;/code&gt; to provide a &lt;code&gt;session_id&lt;/code&gt; query that will remain after navigating to another route.</source>
          <target state="translated">&lt;code&gt;AuthGuard&lt;/code&gt; を更新して、別のルートに移動した後も残る &lt;code&gt;session_id&lt;/code&gt; クエリを提供します。</target>
        </trans-unit>
        <trans-unit id="c7af99452e024679731c58a6ce980e61e0f9ce31" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthService&lt;/code&gt; to log in the user:</source>
          <target state="translated">&lt;code&gt;AuthService&lt;/code&gt; を更新してユーザーをログインさせます。</target>
        </trans-unit>
        <trans-unit id="17df82461b1d4af3eea1a7f235dffc7a24516cb6" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroService&lt;/code&gt;&lt;code&gt;getHero()&lt;/code&gt; method with the following to make that request:</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; &lt;code&gt;getHero()&lt;/code&gt; メソッドを次のように更新して、そのリクエストを実行します。</target>
        </trans-unit>
        <trans-unit id="456c568fc10b9b5af7828b3954b0630e145d6ff2" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroesComponent&lt;/code&gt; template</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートを更新する</target>
        </trans-unit>
        <trans-unit id="2a0c322c3ec3335c98a6927316b6de2d83201e94" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; you renamed after copying it from &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; file. This time, you define &lt;strong&gt;child routes&lt;/strong&gt;&lt;em&gt;within&lt;/em&gt; the parent &lt;code&gt;crisis-center&lt;/code&gt; route.</source>
          <target state="translated">名前を &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; ファイルからコピーした後で、 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; を変更したcrisis-center-routing.module.tsを更新します。今回は、親 &lt;code&gt;crisis-center&lt;/code&gt; ルート&lt;em&gt;内に&lt;/em&gt;&lt;strong&gt;子ルート&lt;/strong&gt;を定義します。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8b888ea2db7a703e486c90f086618aa533bc9723" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; you renamed after copying it from &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; file. This time, you define child routes within the parent &lt;code&gt;crisis-center&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;heroes-routing.module.ts&lt;/code&gt; ファイルからコピーした後に &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; を変更したcrisis-center-routing.module.tsを更新します。今回は、親の &lt;code&gt;crisis-center&lt;/code&gt; ルート内に子ルートを定義します。</target>
        </trans-unit>
        <trans-unit id="e584e483de80651422da868086dd08163863efd3" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;goToHeroes()&lt;/code&gt; method in the &lt;code&gt;hero-detail.component.ts&lt;/code&gt; to navigate back to &lt;code&gt;/superheroes&lt;/code&gt; with the optional route parameters.</source>
          <target state="translated">&lt;code&gt;hero-detail.component.ts&lt;/code&gt; の &lt;code&gt;goToHeroes()&lt;/code&gt; メソッドを更新して、オプションのルートパラメーターで &lt;code&gt;/superheroes&lt;/code&gt; に戻ります。</target>
        </trans-unit>
        <trans-unit id="8eb243a9efc4a0297cedfa295ac4f27230f15071" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;gotoCrises()&lt;/code&gt; method of the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to navigate back to the Crisis Center list using relative path navigation.</source>
          <target state="translated">&lt;code&gt;gotoCrises()&lt;/code&gt; メソッドを更新して、相対パスナビゲーションを使用して &lt;code&gt;CrisisDetailComponent&lt;/code&gt; リストに戻ります。</target>
        </trans-unit>
        <trans-unit id="9ceea5cd899b3e0cb4af6ee69dfa6e2a472df15b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;gotoCrises&lt;/code&gt; method of the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; list using relative path navigation.</source>
          <target state="translated">更新 &lt;code&gt;gotoCrises&lt;/code&gt; の方法 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; にナビゲートバックに&lt;em&gt;危機センターの&lt;/em&gt;相対パスのナビゲーションを使用してリストを。</target>
        </trans-unit>
        <trans-unit id="90198f7deafad59433243f4c2650247663f3acfb" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;ngOnInit()&lt;/code&gt; method to access the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and track the &lt;code&gt;id&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; メソッドを更新して、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; にアクセスし、 &lt;code&gt;id&lt;/code&gt; パラメーターを追跡します。</target>
        </trans-unit>
        <trans-unit id="63d15e6be1057ef3573d05c93044f0abe7f5d7f0" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;protractor-conf.js&lt;/code&gt; to sync with hybrid apps:</source>
          <target state="translated">ハイブリッドアプリと同期するように &lt;code&gt;protractor-conf.js&lt;/code&gt; を更新します。</target>
        </trans-unit>
        <trans-unit id="01b2840d9b7fdfb4c8e59c5d2221d5b944a9ade1" translate="yes" xml:space="preserve">
          <source>Update the anchor tags to include the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">アンカータグを更新して、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブを含めます。</target>
        </trans-unit>
        <trans-unit id="ba1c01ce8fe91885115c745dda6dea1b1dee4654" translate="yes" xml:space="preserve">
          <source>Update the binding in the template to announce the hero's name and show both &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; in a details layout like this:</source>
          <target state="translated">テンプレートのバインディングを更新してヒーローの名前を発表し、 &lt;code&gt;id&lt;/code&gt; ような詳細レイアウトでIDと &lt;code&gt;name&lt;/code&gt; 両方を表示します。</target>
        </trans-unit>
        <trans-unit id="b73f126c77cbaf03da82c5d00d55430a2ec78f0a" translate="yes" xml:space="preserve">
          <source>Update the component template to look like this:</source>
          <target state="translated">コンポーネントテンプレートを以下のように更新します。</target>
        </trans-unit>
        <trans-unit id="80fb83bb4ae8b67700db956c6fc18e1e43df75e8" translate="yes" xml:space="preserve">
          <source>Update the component template with the following markup:</source>
          <target state="translated">コンポーネントテンプレートを以下のマークアップで更新します。</target>
        </trans-unit>
        <trans-unit id="e8c7ee399df1289188c98c11849990a2f1ac0ced" translate="yes" xml:space="preserve">
          <source>Update the model for a particular control with a new value.</source>
          <target state="translated">特定のコントロールのモデルを新しい値で更新します。</target>
        </trans-unit>
        <trans-unit id="559847cfe7989a011f1f7f236cc63d7c5ef1d512" translate="yes" xml:space="preserve">
          <source>Update the product details page to include a &quot;Buy&quot; button, which adds the current product to a list of products managed by a cart service.</source>
          <target state="translated">商品詳細ページを更新し、現在の商品をカートサービスで管理されている商品リストに追加する「購入」ボタンを追加しました。</target>
        </trans-unit>
        <trans-unit id="fc029d79ce7b99ec3a2fca2086322426387609a6" translate="yes" xml:space="preserve">
          <source>Update the product details template to have a &quot;Buy&quot; button that adds the current product to the cart.</source>
          <target state="translated">現在の商品をカートに追加する「購入」ボタンを持つように、商品詳細テンプレートを更新しました。</target>
        </trans-unit>
        <trans-unit id="7eba56b3717efc99e826af103240665456dccb6c" translate="yes" xml:space="preserve">
          <source>Update the product details template with a &quot;Buy&quot; button that adds the current product to the cart.</source>
          <target state="translated">現在の商品をカートに追加する「購入」ボタンで商品詳細テンプレートを更新します。</target>
        </trans-unit>
        <trans-unit id="a7657cd7e687b92c9b836756bcb57c9e76fdea3a" translate="yes" xml:space="preserve">
          <source>Update the product details view to include a &quot;Buy&quot; button, which adds the current product to a list of products that a cart service manages.</source>
          <target state="translated">カートサービスが管理する商品リストに現在の商品を追加する「購入」ボタンを追加するように商品詳細表示を更新しました。</target>
        </trans-unit>
        <trans-unit id="ce24781651687073ccf0577b48abbd217ac36903" translate="yes" xml:space="preserve">
          <source>Update the relative path import to the &lt;code&gt;message.service&lt;/code&gt; in the &lt;code&gt;hero.service.ts&lt;/code&gt; file.</source>
          <target state="translated">相対パス輸入更新 &lt;code&gt;message.service&lt;/code&gt; で &lt;code&gt;hero.service.ts&lt;/code&gt; ファイルを。</target>
        </trans-unit>
        <trans-unit id="203f53a020bfd878e423fc52de5b3578a006bfb8" translate="yes" xml:space="preserve">
          <source>Update the route configuration to lazy load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;. Take the same steps you used to configure &lt;code&gt;AdminModule&lt;/code&gt; for lazy load.</source>
          <target state="translated">ルート構成を更新して、 &lt;code&gt;CrisisCenterModule&lt;/code&gt; を遅延ロードします。遅延ロード用に &lt;code&gt;AdminModule&lt;/code&gt; を構成するために使用したのと同じ手順を実行します。</target>
        </trans-unit>
        <trans-unit id="3f6126d69ceb05d3653564715bcc82db8b6b3de6" translate="yes" xml:space="preserve">
          <source>Update the route configuration to lazy load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;. Take the same steps you used to configure &lt;code&gt;AdminModule&lt;/code&gt; for lazy loading.</source>
          <target state="translated">ルート構成を更新して、 &lt;code&gt;CrisisCenterModule&lt;/code&gt; を遅延ロードします。遅延読み込み用に &lt;code&gt;AdminModule&lt;/code&gt; を構成するために使用したのと同じ手順を実行します。</target>
        </trans-unit>
        <trans-unit id="cca7fe187a76a321d42e7e1ba7f157b20dbd5a77" translate="yes" xml:space="preserve">
          <source>Update the shipping component's template to display the shipping types and prices using async pipe:</source>
          <target state="translated">出荷コンポーネントのテンプレートを更新して、非同期パイプを使用して出荷タイプと価格を表示します。</target>
        </trans-unit>
        <trans-unit id="12ad7f7f655cea30f3a55c5eef576e6f58055482" translate="yes" xml:space="preserve">
          <source>Update the shipping component's template to display the shipping types and prices using the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe:</source>
          <target state="translated">出荷コンポーネントのテンプレートを更新して、 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプを使用して出荷タイプと価格を表示します。</target>
        </trans-unit>
        <trans-unit id="a357da0cfc27c86f48e17bd313f4e3eece1eed72" translate="yes" xml:space="preserve">
          <source>Update the template file with the following contents:</source>
          <target state="translated">テンプレートファイルを以下の内容で更新します。</target>
        </trans-unit>
        <trans-unit id="2a9f24f9facab2d3032dfc55184857c8d51349c7" translate="yes" xml:space="preserve">
          <source>Update the template to display product details information inside an &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートを更新して、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 内に製品の詳細情報を表示します。</target>
        </trans-unit>
        <trans-unit id="2f41d9ccaa5ca6464fe9e26dcf2fef17ab479d12" translate="yes" xml:space="preserve">
          <source>Update the template to display the strategy service's &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">テンプレートを更新して、戦略サービスの &lt;code&gt;preloadedModules&lt;/code&gt; 配列を表示します。</target>
        </trans-unit>
        <trans-unit id="bdf317dd5d3bb344ae925cf56313430f134cf06e" translate="yes" xml:space="preserve">
          <source>Update the template with a &lt;a href=&quot;attribute-binding#class-binding&quot;&gt;class binding&lt;/a&gt;. The binding adds the &lt;code&gt;selected&lt;/code&gt; CSS class when the comparison returns &lt;code&gt;true&lt;/code&gt; and removes it when &lt;code&gt;false&lt;/code&gt;. Look for it within the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag as shown here:</source>
          <target state="translated">&lt;a href=&quot;attribute-binding#class-binding&quot;&gt;クラスバインディングで&lt;/a&gt;テンプレートを更新します。バインディングは、比較が &lt;code&gt;true&lt;/code&gt; を返す場合は &lt;code&gt;selected&lt;/code&gt; CSSクラスを追加し、 &lt;code&gt;false&lt;/code&gt; の場合は削除します。次に示すように、繰り返される &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; タグ内でそれを探します。</target>
        </trans-unit>
        <trans-unit id="dfba97897cc40bb55207339966a6db50b171b279" translate="yes" xml:space="preserve">
          <source>Update the template with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt;. The binding adds the &lt;code&gt;selected&lt;/code&gt; CSS class when the comparison returns &lt;code&gt;true&lt;/code&gt; and removes it when &lt;code&gt;false&lt;/code&gt;. Look for it within the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag as shown here:</source>
          <target state="translated">テンプレートを&lt;a href=&quot;template-syntax#class-binding&quot;&gt;クラスバインディング&lt;/a&gt;で更新します。バインディングは、比較で &lt;code&gt;true&lt;/code&gt; が返されたときに &lt;code&gt;selected&lt;/code&gt; CSSクラスを追加し、 &lt;code&gt;false&lt;/code&gt; のときに削除します。次に示すように、繰り返される &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; タグ内でそれを探します。</target>
        </trans-unit>
        <trans-unit id="d296ccbde468f094eb509d5d21a2641f2f39d02b" translate="yes" xml:space="preserve">
          <source>Update the template with a button to simulate a name update. When you click the &lt;strong&gt;Update Name&lt;/strong&gt; button, the value entered in the form control element is reflected as its current value.</source>
          <target state="translated">名前の更新をシミュレートするボタンでテンプレートを更新します。[ &lt;strong&gt;名前&lt;/strong&gt;の&lt;strong&gt;更新]&lt;/strong&gt;ボタンをクリックすると、フォームコントロール要素に入力された値が現在の値として反映されます。</target>
        </trans-unit>
        <trans-unit id="70bf9b016dd5abd476b3536c1c64aba3fbec12cf" translate="yes" xml:space="preserve">
          <source>Update the template with a header (&quot;Cart&quot;), and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display each of the cart items with its name and price.</source>
          <target state="translated">ヘッダー（ &quot;Cart&quot;）を使用してテンプレートを更新し、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;を指定した &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; を使用して、各カートアイテムの名前と価格を表示します。</target>
        </trans-unit>
        <trans-unit id="6e13272e210ad93b2f833a9639071ad68ad92617" translate="yes" xml:space="preserve">
          <source>Update the template with a header, and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display each of the cart items with its name and price.</source>
          <target state="translated">テンプレートをヘッダーで更新し、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; と &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を使用して、各カートアイテムをその名前と価格で表示します。</target>
        </trans-unit>
        <trans-unit id="9e70ce970e12f27c3c0169130c0f1fea106c9fc1" translate="yes" xml:space="preserve">
          <source>Update the template with a welcome message to the &lt;code&gt;Crisis Center&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Crisis Center&lt;/code&gt; へのウェルカムメッセージでテンプレートを更新します。</target>
        </trans-unit>
        <trans-unit id="56d3e4fc01f85a9416f7ebeec211313112a4e66e" translate="yes" xml:space="preserve">
          <source>Update your component with &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">コンポーネントを &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; で更新します</target>
        </trans-unit>
        <trans-unit id="5ce647b93fb03bcc71424f45986c72ce1d07ff28" translate="yes" xml:space="preserve">
          <source>UpdateActivatedEvent</source>
          <target state="translated">UpdateActivatedEvent</target>
        </trans-unit>
        <trans-unit id="fd2207341d757f6ad0dc82194a9f23e501154bfa" translate="yes" xml:space="preserve">
          <source>UpdateAvailableEvent</source>
          <target state="translated">UpdateAvailableEvent</target>
        </trans-unit>
        <trans-unit id="568d94ab2c93526583d7691ef9d845646ce24da2" translate="yes" xml:space="preserve">
          <source>Updated the options for &lt;code&gt;initialNavigation&lt;/code&gt;. For more information, see &lt;a href=&quot;../api/router/initialnavigation&quot;&gt;initialNavigation&lt;/a&gt; in the API documentation. See &lt;a href=&quot;https://github.com/angular/angular/pull/33128&quot;&gt;PR 33128&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;initialNavigation&lt;/code&gt; のオプションを更新しました。詳細については、APIドキュメントの&lt;a href=&quot;../api/router/initialnavigation&quot;&gt;initialNavigation&lt;/a&gt;を参照してください。&lt;a href=&quot;https://github.com/angular/angular/pull/33128&quot;&gt;PR33128を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="30827e80f2dab0755e1aab3fdcd5f8e852c80f1e" translate="yes" xml:space="preserve">
          <source>Updates happen in the background, relatively quickly after changes are published. The previous version of the application is served until an update is installed and ready.</source>
          <target state="translated">アップデートは、変更が公開された後、比較的迅速にバックグラウンドで行われます。アップデートがインストールされて準備が整うまでは、以前のバージョンのアプリケーションが提供されます。</target>
        </trans-unit>
        <trans-unit id="0b4d2f63f515bde39286e6b3ccfa79609ea6eeda" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;index.html&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; ファイルを更新します。</target>
        </trans-unit>
        <trans-unit id="b23869ff3d3ab319301b5274bca98483d206fab5" translate="yes" xml:space="preserve">
          <source>Updates the stored data of the query list, and resets the &lt;code&gt;dirty&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;, so that on change detection, it will not notify of changes to the queries, unless a new change occurs.</source>
          <target state="translated">クエリリストの格納データを更新し、 &lt;code&gt;dirty&lt;/code&gt; フラグを &lt;code&gt;false&lt;/code&gt; にリセットします。これにより、変更が検出されたときに、新しい変更が発生しない限り、クエリへの変更を通知しません。</target>
        </trans-unit>
        <trans-unit id="53d4b930a68894d016ef42936f1cf3d3913d5484" translate="yes" xml:space="preserve">
          <source>Updates your application and its dependencies. See &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/&lt;/a&gt;</source>
          <target state="translated">アプリケーションとその依存関係を更新します。&lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="8004b6dc96603e3ddaec6151269dd92cf5f998b2" translate="yes" xml:space="preserve">
          <source>Updating Angular</source>
          <target state="translated">Angularの更新</target>
        </trans-unit>
        <trans-unit id="e2e0c1dd04e5d643612f19bff213d0afa1d812d6" translate="yes" xml:space="preserve">
          <source>Updating CLI Apps</source>
          <target state="translated">CLIアプリの更新</target>
        </trans-unit>
        <trans-unit id="4c5646c8307bd85d09df30c3b3db3a0d18ae2f19" translate="yes" xml:space="preserve">
          <source>Updating headers</source>
          <target state="translated">ヘッダの更新</target>
        </trans-unit>
        <trans-unit id="3bfbada4728f2e043b7771479883f3fc79ae26f5" translate="yes" xml:space="preserve">
          <source>Updating libraries</source>
          <target state="translated">ライブラリの更新</target>
        </trans-unit>
        <trans-unit id="97a865dad5af2b4ab0e2197679ff98a7ebec66fa" translate="yes" xml:space="preserve">
          <source>Updating parts of the data model</source>
          <target state="translated">データモデルの一部を更新する</target>
        </trans-unit>
        <trans-unit id="ea82e134fbd8a260e992aef7287a5680172c618b" translate="yes" xml:space="preserve">
          <source>Updating to version 8 with &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; changes this automatically.</source>
          <target state="translated">&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; で&lt;/a&gt;バージョン8に更新すると、これが自動的に変更されます。</target>
        </trans-unit>
        <trans-unit id="2fe4aa4b0674fef349deee21474a9e07ec8e067d" translate="yes" xml:space="preserve">
          <source>Updating your application in the browser</source>
          <target state="translated">ブラウザでアプリケーションを更新する</target>
        </trans-unit>
        <trans-unit id="fdcac3e04bfcd5fd48d4d42aa4876e07971bf792" translate="yes" xml:space="preserve">
          <source>Updating your environment and apps</source>
          <target state="translated">環境とアプリを更新する</target>
        </trans-unit>
        <trans-unit id="a4cf3923e47fcb8de57d182bf42a0b41fb5e9032" translate="yes" xml:space="preserve">
          <source>Upgrade the AngularJS components to Angular components next. Do it one component at a time while still keeping the application in hybrid mode. As you make these conversions, you'll also define your first Angular &lt;em&gt;pipes&lt;/em&gt;.</source>
          <target state="translated">次に、AngularJSコンポーネントをAngularコンポーネントにアップグレードします。アプリケーションをハイブリッドモードに保ちながら、一度に1つのコンポーネントを実行します。これらの変換を行うときに、最初のAngular &lt;em&gt;パイプ&lt;/em&gt;も定義します。</target>
        </trans-unit>
        <trans-unit id="24f30a918c96ec7f78d6de2229e4e45721a78e8d" translate="yes" xml:space="preserve">
          <source>UpgradeAdapter</source>
          <target state="translated">UpgradeAdapter</target>
        </trans-unit>
        <trans-unit id="349a24b81f2702737e72ac44c56d5eea5df09232" translate="yes" xml:space="preserve">
          <source>UpgradeAdapterRef</source>
          <target state="translated">UpgradeAdapterRef</target>
        </trans-unit>
        <trans-unit id="3472325c45449a53cfbeda85e9dc64ed999c053e" translate="yes" xml:space="preserve">
          <source>UpgradeComponent</source>
          <target state="translated">UpgradeComponent</target>
        </trans-unit>
        <trans-unit id="f957777c36883bb04b88b1a75eabd9d4e87143f7" translate="yes" xml:space="preserve">
          <source>UpgradeModule</source>
          <target state="translated">UpgradeModule</target>
        </trans-unit>
        <trans-unit id="dc294e605816722937474ceca1ecd6db86bccf84" translate="yes" xml:space="preserve">
          <source>Upgraded components are Angular &lt;strong&gt;directives&lt;/strong&gt;, instead of &lt;strong&gt;components&lt;/strong&gt;, because Angular is unaware that AngularJS will create elements under it. As far as Angular knows, the upgraded component is just a directive - a tag - and Angular doesn't have to concern itself with its children.</source>
          <target state="translated">アップグレードされたコンポーネントは、AngularJSがその下に要素を作成することを知らないため、&lt;strong&gt;コンポーネント&lt;/strong&gt;ではなく、Angular &lt;strong&gt;ディレクティブ&lt;/strong&gt;です。Angularが知る限り、アップグレードされたコンポーネントは単なるディレクティブ（タグ）であり、Angularはその子に関係する必要はありません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4bcf3358a1532605c1d102caf461fe6695881d98" translate="yes" xml:space="preserve">
          <source>Upgrading Components</source>
          <target state="translated">コンポーネントのアップグレード</target>
        </trans-unit>
        <trans-unit id="3de37c097e347898a6c3fcca7012b78cb95fe583" translate="yes" xml:space="preserve">
          <source>Upgrading an AngularJS service</source>
          <target state="translated">AngularJSサービスのアップグレード</target>
        </trans-unit>
        <trans-unit id="8ad98e9741d8e1a96c0b693a2a2c1e769fe850a8" translate="yes" xml:space="preserve">
          <source>Upgrading for Performance</source>
          <target state="translated">パフォーマンスのアップグレード</target>
        </trans-unit>
        <trans-unit id="1cff14fa3715a0373a3bb2801eac16cb3d07e6fc" translate="yes" xml:space="preserve">
          <source>Upgrading for performance</source>
          <target state="translated">パフォーマンスのアップグレード</target>
        </trans-unit>
        <trans-unit id="f49e3b37a91d97499c2632816643696c225e6f8f" translate="yes" xml:space="preserve">
          <source>Upgrading from AngularJS to Angular</source>
          <target state="translated">AngularJSからAngularへのアップグレード</target>
        </trans-unit>
        <trans-unit id="a5a3a352431f58bbbf100b500b3c0596ab226f27" translate="yes" xml:space="preserve">
          <source>Upgrading the Phone service</source>
          <target state="translated">電話サービスのアップグレード</target>
        </trans-unit>
        <trans-unit id="be955d520b7fdc0e2bf8afcda324203e51725d6d" translate="yes" xml:space="preserve">
          <source>Upgrading with &lt;code&gt;ngUpgrade&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngUpgrade&lt;/code&gt; によるアップグレード</target>
        </trans-unit>
        <trans-unit id="f8522315486f45748eda6e72566dff17c151bd49" translate="yes" xml:space="preserve">
          <source>Upgrading with ngUpgrade</source>
          <target state="translated">ngUpgrade でのアップグレード</target>
        </trans-unit>
        <trans-unit id="233e49b5606ac48bdee62d2e7bac7f481dc3f94b" translate="yes" xml:space="preserve">
          <source>UpperCamelCase (or PascalCase): Class names, including classes that define components, interfaces, NgModules, directives, and pipes, Upper camel case uses uppercase on the first letter of the item. For example, &quot;HeroListComponent&quot;.</source>
          <target state="translated">UpperCamelCase(またはPascalCase)。コンポーネント、インターフェース、NgModules、ディレクティブ、パイプを定義するクラスを含むクラス名で、アッパーキャメルケースは項目の最初の文字に大文字を使用します。例えば、&quot;HeroListComponent&quot;。</target>
        </trans-unit>
        <trans-unit id="155c412fcd3971aa03fafff2bacb8bb9adc5883c" translate="yes" xml:space="preserve">
          <source>UpperCasePipe</source>
          <target state="translated">UpperCasePipe</target>
        </trans-unit>
        <trans-unit id="71dd69965f2486999c211c68072c41db5ae84baf" translate="yes" xml:space="preserve">
          <source>UrlCodec</source>
          <target state="translated">UrlCodec</target>
        </trans-unit>
        <trans-unit id="54090f749d1da5abbd2d8d0b13290689e3fbe518" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions</source>
          <target state="translated">UrlCreationOptions</target>
        </trans-unit>
        <trans-unit id="dbfb4d31c55c9ef194c6fceced63a7e00361cb16" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#fragment</source>
          <target state="translated">UrlCreationOptions#fragment</target>
        </trans-unit>
        <trans-unit id="141e18e55cd3e0e08bf88a818bbc4b13ede6cf27" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#preserveFragment</source>
          <target state="translated">UrlCreationOptions#preserveFragment</target>
        </trans-unit>
        <trans-unit id="6393573c166f194ad715df371c6f4f6ee50f1285" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#queryParams</source>
          <target state="translated">UrlCreationOptions#queryParams</target>
        </trans-unit>
        <trans-unit id="d6e7a05926297ae4a9a9dee1a8d0edf6b0ef629f" translate="yes" xml:space="preserve">
          <source>UrlCreationOptions#queryParamsHandling</source>
          <target state="translated">UrlCreationOptions#queryParamsHandling</target>
        </trans-unit>
        <trans-unit id="68948d1dadddf95bc54d96cecbf392ae48e8d326" translate="yes" xml:space="preserve">
          <source>UrlHandlingStrategy</source>
          <target state="translated">UrlHandlingStrategy</target>
        </trans-unit>
        <trans-unit id="16cc40206f5a097848430a6c434c805355e9962a" translate="yes" xml:space="preserve">
          <source>UrlMatchResult</source>
          <target state="translated">UrlMatchResult</target>
        </trans-unit>
        <trans-unit id="b4a9ef4257a8681d0b8b798a42c3019be0c1e3e7" translate="yes" xml:space="preserve">
          <source>UrlMatcher</source>
          <target state="translated">UrlMatcher</target>
        </trans-unit>
        <trans-unit id="cb582a3934e09bbb5eff19851f7f334c90041133" translate="yes" xml:space="preserve">
          <source>UrlSegment</source>
          <target state="translated">UrlSegment</target>
        </trans-unit>
        <trans-unit id="5c83abe9807fc6933e00e92449e0482f3644b9ae" translate="yes" xml:space="preserve">
          <source>UrlSegmentGroup</source>
          <target state="translated">UrlSegmentGroup</target>
        </trans-unit>
        <trans-unit id="d13f52dbbad2d8b754750f29699588763707bcf7" translate="yes" xml:space="preserve">
          <source>UrlSerializer</source>
          <target state="translated">UrlSerializer</target>
        </trans-unit>
        <trans-unit id="8f00a7f728d114764c445a5f40b5c821396502ce" translate="yes" xml:space="preserve">
          <source>UrlTree</source>
          <target state="translated">UrlTree</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="4df13ec4234f96a6f1f82fccdde77669b4c4b95c" translate="yes" xml:space="preserve">
          <source>Usage Notes</source>
          <target state="translated">使用上の注意</target>
        </trans-unit>
        <trans-unit id="3439e83eddd9b986dc9a370152a22cf7dcf9b189" translate="yes" xml:space="preserve">
          <source>Usage example</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="92d99b032888bf69448943e3813f272f0f43c556" translate="yes" xml:space="preserve">
          <source>Usage notes</source>
          <target state="translated">使用上の注意</target>
        </trans-unit>
        <trans-unit id="0a44b555685f0dc28bc8e9765c6cb059b1eccb38" translate="yes" xml:space="preserve">
          <source>Usage of the HTTP protocol</source>
          <target state="translated">HTTPプロトコルの使用法</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="3ca40217dc0e70d2dc410e2c690446266314d73f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;component-interaction#countdown-tests&quot;&gt;the same countdown timer tests&lt;/a&gt; as before.</source>
          <target state="translated">以前&lt;a href=&quot;component-interaction#countdown-tests&quot;&gt;と同じカウントダウンタイマーテスト&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="1eded4881718d38df0a281fb3b89e254b8e5d3f1" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;glossary#pipe&quot;&gt;pipes&lt;/a&gt; to transform strings, currency amounts, dates, and other data for display. Pipes are simple functions you can use in &lt;a href=&quot;glossary#template-expression&quot;&gt;template expressions&lt;/a&gt; to accept an input value and return a transformed value. Pipes are useful because you can use them throughout your application, while only declaring each pipe once. For example, you would use a pipe to show a date as &lt;strong&gt;April 15, 1988&lt;/strong&gt; rather than the raw string format.</source>
          <target state="translated">&lt;a href=&quot;glossary#pipe&quot;&gt;パイプ&lt;/a&gt;を使用して、文字列、通貨額、日付、およびその他のデータを変換して表示します。パイプは、&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート式で&lt;/a&gt;使用して入力値を受け入れ、変換された値を返すことができる単純な関数です。パイプは、各パイプを1回だけ宣言しながら、アプリケーション全体で使用できるので便利です。たとえば、パイプを使用して、生の文字列形式ではなく&lt;strong&gt;、1988年4月15&lt;/strong&gt;日として日付を表示します。</target>
        </trans-unit>
        <trans-unit id="e1646482e996340ea2fea6c00a75df620ed30fe2" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;guide/glossary#router&quot;&gt;routing&lt;/a&gt; to navigate among different views and their components.</source>
          <target state="translated">&lt;a href=&quot;guide/glossary#router&quot;&gt;ルーティング&lt;/a&gt;を使用して、さまざまなビューとそのコンポーネント間を移動します。</target>
        </trans-unit>
        <trans-unit id="bbdce1a9856fbb51307f203e0fd8807247521091" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html&quot;&gt;TypeScript type definition files&lt;/a&gt;&amp;mdash;&lt;code&gt;d.ts files&lt;/code&gt;&amp;mdash;to tell the compiler about the libraries you load.</source>
          <target state="translated">使用&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html&quot;&gt;活字体のタイプ定義ファイル&lt;/a&gt; - &lt;code&gt;d.ts files&lt;/code&gt; は、ロードライブラリに関するコンパイラに伝える-to。</target>
        </trans-unit>
        <trans-unit id="c534d42b01e57fa797f2c9dd829715b3aaef6e23" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt; to reenter the Angular zone and do work that updates the application model.</source>
          <target state="translated">&lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;を使用してAngularゾーンに再度入り、アプリケーションモデルを更新する作業を行います。</target>
        </trans-unit>
        <trans-unit id="c7e4c837537f47c47ba3f66cd9bd197b787a06e4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;property-binding&quot;&gt;property binding&lt;/a&gt; to bind the &lt;code&gt;item&lt;/code&gt; property in the child to the &lt;code&gt;currentItem&lt;/code&gt; property of the parent.</source>
          <target state="translated">&lt;a href=&quot;property-binding&quot;&gt;プロパティバインディング&lt;/a&gt;を使用して、子の &lt;code&gt;item&lt;/code&gt; プロパティを親の &lt;code&gt;currentItem&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="33ae6d75faec5c9258ccdb8343e25d6400c01615" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;router#getCurrentNavigation&quot;&gt;Router#getCurrentNavigation&lt;/a&gt; to retrieve a saved navigation-state value. For example, to capture the &lt;code&gt;tracingId&lt;/code&gt; during the &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="translated">使用&lt;a href=&quot;router#getCurrentNavigation&quot;&gt;ルータ＃getCurrentNavigationは、&lt;/a&gt;保存されたナビゲーション状態値を取得します。たとえば、 &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; イベント中に &lt;code&gt;tracingId&lt;/code&gt; をキャプチャするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="11460a33232086c248106ff99715d4babce3c64e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;router#route-parameters&quot;&gt;&lt;em&gt;route parameters&lt;/em&gt;&lt;/a&gt; to specify a &lt;em&gt;required&lt;/em&gt; parameter value &lt;em&gt;within&lt;/em&gt; the route URL as you do when navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; in order to view the hero with &lt;em&gt;id&lt;/em&gt; 15:</source>
          <target state="translated">&lt;a href=&quot;router#route-parameters&quot;&gt;&lt;em&gt;ルートパラメーター&lt;/em&gt;&lt;/a&gt;を使用して、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動して&lt;em&gt;ID&lt;/em&gt; 15のヒーローを表示するときと同じように、ルートURL &lt;em&gt;内に&lt;/em&gt;&lt;em&gt;必要な&lt;/em&gt;パラメーター値を指定します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0b5d93c4ed0ec5b8b7f05301676e8bd1ef1cb92a" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;router-tutorial-toh#route-parameters&quot;&gt;route parameters&lt;/a&gt; to specify a required parameter value within the route URL as you do when navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; in order to view the hero with &lt;code&gt;id&lt;/code&gt; 15:</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; 15のヒーローを表示するために &lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動するときと同じように、&lt;a href=&quot;router-tutorial-toh#route-parameters&quot;&gt;ルートパラメーター&lt;/a&gt;を使用してルートURL内に必要なパラメーター値を指定します。</target>
        </trans-unit>
        <trans-unit id="a19d669d6ab0a452aeaf8626b2d9150aebbdc3cf" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt; only with &lt;em&gt;emulated&lt;/em&gt; view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the &lt;a href=&quot;component-styles#view-encapsulation&quot;&gt;Controlling view encapsulation&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;::ng-deep&lt;/code&gt; は、&lt;em&gt;エミュレートされた&lt;/em&gt;ビューのカプセル化でのみ使用してください。エミュレートはデフォルトであり、最も一般的に使用されるビューのカプセル化です。詳細については、&lt;a href=&quot;component-styles#view-encapsulation&quot;&gt;ビューのカプセル化&lt;/a&gt;の制御セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b4a428cb21fb684b5416394147cdfb8895147345" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt; only with &lt;em&gt;emulated&lt;/em&gt; view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the &lt;a href=&quot;view-encapsulation&quot;&gt;View Encapsulation&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;::ng-deep&lt;/code&gt; は、&lt;em&gt;エミュレートされた&lt;/em&gt;ビューのカプセル化でのみ使用してください。エミュレートは、デフォルトで最も一般的に使用されるビューのカプセル化です。詳細については、&lt;a href=&quot;view-encapsulation&quot;&gt;「カプセル化&lt;/a&gt;の表示」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fbc5373a6098820428d8f87b4ebef3596f21ac25" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt; to initiate transitions:</source>
          <target state="translated">用途 &lt;code&gt;:increment&lt;/code&gt; と &lt;code&gt;:decrement&lt;/code&gt; 移行を開始します：</target>
        </trans-unit>
        <trans-unit id="37da0447d1fa140f28f8fb6b08272482bf10d2b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; to apply styling data over a given time interval.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; を使用して、指定した時間間隔でスタイルデータを適用します。</target>
        </trans-unit>
        <trans-unit id="8117b02663c31ca30a3505b5dea37c42a73d66f9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to look for an element entering the page that meets certain criteria.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; を使用して、特定の条件を満たすページに入る要素を探します。</target>
        </trans-unit>
        <trans-unit id="c340b82cff5a85036fa97538fb63c0522defe830" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; to delay each animation by 30 milliseconds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; を使用して、各アニメーションを30ミリ秒遅延させます。</target>
        </trans-unit>
        <trans-unit id="3d3ba6c58e073ff58798eac3feab185c868724b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; to define styles that are applied at the end of each transition, they persist after the animation has completed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; を使用して、各遷移の最後に適用されるスタイルを定義します。スタイルは、アニメーションが完了した後も保持されます。</target>
        </trans-unit>
        <trans-unit id="744032ff1407c7169be00664314296b80fa6d2ce" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; to apply the provided styling data immediately.</source>
          <target state="translated">提供されたスタイルデータをすぐに適用するには、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c164f914355419d833cd09abe62d44f39e5d7fa3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; to define intermediate styles, which create the illusion of motion during the animation.</source>
          <target state="translated">使用する &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; アニメーション中の動きの錯覚を作成する中間スタイルを定義します。</target>
        </trans-unit>
        <trans-unit id="7d17b4d4f899b3d74c42d5859ad207b245a417af" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="2eacb644015215b8967a3fef2b1d8847dd480ec4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the cart service</source>
          <target state="translated">カートサービスで &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="84330455001cba6cc5fc4fcfcc5e6a9131fbbea2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; to set many inline styles simultaneously and dynamically, based on the state of the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; を使用して、コンポーネントの状態に基づいて、多くのインラインスタイルを同時に動的に設定します。</target>
        </trans-unit>
        <trans-unit id="5245359421c59b09a4a49d6a64056af5518fc2a4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; to define styles that are applied at the end of each transition, they persist after the animation has completed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; を使用して、各遷移の最後に適用されるスタイルを定義します。スタイルは、アニメーションが完了した後も持続します。</target>
        </trans-unit>
        <trans-unit id="23e2c4fd66aaf035f564822cce538de6531f6bbc" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; to create two-way data bindings for reading and writing input-control values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用して、入力制御値を読み書きするための双方向データバインディングを作成します。</target>
        </trans-unit>
        <trans-unit id="3fd82b61ae0dda767fc8f3a6beca402be658ba83" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; to separate providers from a module so you can import that module into the root module with &lt;code&gt;providers&lt;/code&gt; and child modules without &lt;code&gt;providers&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; を使用して、プロバイダーをモジュールから分離し、そのモジュールを &lt;code&gt;providers&lt;/code&gt; 付きのルートモジュールおよび &lt;code&gt;providers&lt;/code&gt; なしの子モジュールにインポートできるようにします。</target>
        </trans-unit>
        <trans-unit id="4659a85a02ce72bfcc286731ea25c8f664cf6829" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; to allow AngularJS and Angular to coexist in a single application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularが単一のアプリケーションで共存できるようにします。</target>
        </trans-unit>
        <trans-unit id="5dac23ff3bdee9064747ccf719f0ed4727aad84f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; to control a hybrid AngularJS / Angular application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularのハイブリッドアプリケーションを制御します。</target>
        </trans-unit>
        <trans-unit id="02f4fc0380dc5751bed787fa57f8c1da57539efe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; to allow AngularJS and Angular to coexist in a single application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularが単一のアプリケーションで共存できるようにします。</target>
        </trans-unit>
        <trans-unit id="ca40e78c4209c9b5e5203ae6d1381b2251b2aed8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; to control a hybrid AngularJS / Angular application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularのハイブリッドアプリケーションを制御します。</target>
        </trans-unit>
        <trans-unit id="af06267d70ed596a77b6002d1c976ef8cf195c8c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; to inject the instance.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; を使用してインスタンスを注入します。</target>
        </trans-unit>
        <trans-unit id="8871425e87aae0b3cd3521f2757473e950108c92" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; so that Angular will only look at the &lt;code&gt;ElementInjector&lt;/code&gt; for the current component or directive.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 使用して、Angularが現在のコンポーネントまたはディレクティブの &lt;code&gt;ElementInjector&lt;/code&gt; のみを確認するようにします。</target>
        </trans-unit>
        <trans-unit id="5c336104380f0d2867d853d0a9497070d9a8d351" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; to prevent an error if the value is &lt;code&gt;null&lt;/code&gt;. In the following example, the &lt;code&gt;Person&lt;/code&gt; service is injected in the constructor. &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; tells Angular to skip the current injector and &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; will prevent an error should the &lt;code&gt;Person&lt;/code&gt; service be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; の値である場合、エラーを防ぐために &lt;code&gt;null&lt;/code&gt; 。次の例では、 &lt;code&gt;Person&lt;/code&gt; サービスがコンストラクターに注入されています。 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 現在のインジェクタとスキップするように角度を伝え &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; なければならないエラーを防ぐことができます &lt;code&gt;Person&lt;/code&gt; サービスがあること &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64ddf861c8d40d74accf883d09c74262c79df284" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;as const&lt;/code&gt; to let TypeScript know that you really do mean to use a constant string type:</source>
          <target state="translated">使用 &lt;code&gt;as const&lt;/code&gt; 活字体はあなたが本当に定数文字列型を使用して平均行うことを知らせます：</target>
        </trans-unit>
        <trans-unit id="0c3acfd0b42193c69c97319b8d40897bd917fd56" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;currency&lt;/code&gt; to format a number as currency.</source>
          <target state="translated">&lt;code&gt;currency&lt;/code&gt; を使用して、数値を通貨としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="8f1bdfdd07f0e51b3ed046c10f3d302723845732" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;downgradeNg2Component&lt;/code&gt; to create an AngularJS Directive Definition Factory from Angular Component. The adapter will bootstrap Angular component from within the AngularJS template.</source>
          <target state="translated">AngularコンポーネントからAngularJSディレクティブ定義ファクトリを作成するには、 &lt;code&gt;downgradeNg2Component&lt;/code&gt; を使用します。アダプターは、AngularJSテンプレート内からAngularコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="b1899fb07038b46b39a74135ce2626c9063c8da8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;forRoot()&lt;/code&gt; to separate providers from a module so you can import that module into the root module with &lt;code&gt;providers&lt;/code&gt; and child modules without &lt;code&gt;providers&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;forRoot()&lt;/code&gt; あなたとルートモジュールにそのモジュールをインポートできるように、モジュールからプロバイダを分離する &lt;code&gt;providers&lt;/code&gt; なしと子モジュールを &lt;code&gt;providers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a89fbfa3b7a5cad46931da1a2b1acafab5e39b74" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;fromString&lt;/code&gt; to create HttpParams</source>
          <target state="translated">&lt;code&gt;fromString&lt;/code&gt; を使用してHttpParamsを作成する</target>
        </trans-unit>
        <trans-unit id="9016f8a4d5f440de4485c2ed9ab0fb4c65014418" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;markForCheck()&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; strategy</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; 戦略で &lt;code&gt;markForCheck()&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="75f05d99671b8634199c2d0de091777f5d31535c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;markForCheck()&lt;/code&gt; with &lt;code&gt;CheckOnce&lt;/code&gt; strategy</source>
          <target state="translated">&lt;code&gt;CheckOnce&lt;/code&gt; 戦略で &lt;code&gt;markForCheck()&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="3633c54be6b23f784540f222beddf2e987b0ff21" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;name&lt;/code&gt; in template expressions as you would for a built-in pipe.</source>
          <target state="translated">組み込みパイプの場合と同じように、テンプレート式で &lt;code&gt;name&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="57ed9bd08229eab245c48c01dd77e6ea3a5924a2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; &amp;lt;lib_name&amp;gt;&lt;/code&gt; to update individual library versions. The Angular CLI checks the latest published release of the library, and if the latest version is newer than your installed version, downloads it and updates your &lt;code&gt;package.json&lt;/code&gt; to match the latest version.</source>
          <target state="translated">&lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; &amp;lt;lib_name&amp;gt;&lt;/code&gt; を使用して、個々のライブラリバージョンを更新します。Angular CLIは、ライブラリの最新の公開リリースをチェックし、最新バージョンがインストールされているバージョンよりも新しい場合は、それをダウンロードし、 &lt;code&gt;package.json&lt;/code&gt; を更新して最新バージョンに一致させます。</target>
        </trans-unit>
        <trans-unit id="8a92fc8c9b6affe56fd82331ac14f7ff6838613e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ng update &amp;lt;lib_name&amp;gt;&lt;/code&gt; to update individual library versions. The Angular CLI checks the latest published release of the library, and if the latest version is newer than your installed version, downloads it and updates your &lt;code&gt;package.json&lt;/code&gt; to match the latest version.</source>
          <target state="translated">&lt;code&gt;ng update &amp;lt;lib_name&amp;gt;&lt;/code&gt; を使用して、個々のライブラリバージョンを更新します。Angular CLIは、ライブラリの最新の公開リリースをチェックし、最新バージョンがインストールされているバージョンよりも新しい場合は、それをダウンロードして、 &lt;code&gt;package.json&lt;/code&gt; を最新バージョンと一致するように更新します。</target>
        </trans-unit>
        <trans-unit id="86ee33b42fd33fef24e535d80cee1f4a2d9b6d98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ngOnInit()&lt;/code&gt; for two main reasons:</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; を使用する主な理由は2つあります。</target>
        </trans-unit>
        <trans-unit id="0101700ae7ee3247de5052bf7ea3d11a837378c4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;setTimeout()&lt;/code&gt; to wait one tick and then revise the &lt;code&gt;seconds()&lt;/code&gt; method so that it takes future values from the timer component.</source>
          <target state="translated">&lt;code&gt;setTimeout()&lt;/code&gt; を使用して1ティック待機し、 &lt;code&gt;seconds()&lt;/code&gt; メソッドを修正して、タイマーコンポーネントから将来の値を取得するようにします。</target>
        </trans-unit>
        <trans-unit id="cb1322724221816f73d5c0329a7eb5dcab8960c7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;upgradeNg1Component&lt;/code&gt; to create an Angular component from AngularJS Component directive. The adapter will bootstrap AngularJS component from within the Angular template.</source>
          <target state="translated">&lt;code&gt;upgradeNg1Component&lt;/code&gt; を使用して、AngularJS ComponentディレクティブからAngularコンポーネントを作成します。アダプターは、Angularテンプレート内からAngularJSコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="50956624e8944e35a6d37b0adb8e3d1bd4c37693" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;root URLs&lt;/em&gt; for all web resources: CSS, images, scripts, and template HTML files.</source>
          <target state="translated">CSS、画像、スクリプト、テンプレートHTMLファイルなど、すべてのWebリソースに&lt;em&gt;ルートURL&lt;/em&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="f68ad6eb4d6688ff5a2c57197008e76e1821ce58" translate="yes" xml:space="preserve">
          <source>Use Angular to internationalize your app:</source>
          <target state="translated">Angularを使ってアプリを国際化しましょう。</target>
        </trans-unit>
        <trans-unit id="d7e4cec0c39ff853653baaf07391c9b86a46c7e8" translate="yes" xml:space="preserve">
          <source>Use Angular's &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; function to define different states to call at the end of each transition. This function takes two arguments: a unique name like &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; 関数を使用して、各遷移の最後に呼び出すさまざまな状態を定義します。この関数は、 &lt;code&gt;open&lt;/code&gt; や &lt;code&gt;closed&lt;/code&gt; などの一意の名前と &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数の2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="4a03f29e1bd5ed1ad5fcb9c4057f36f7e599cdd5" translate="yes" xml:space="preserve">
          <source>Use Angular's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function to define different states to call at the end of each transition. This function takes two arguments: a unique name like &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 関数を使用して、各遷移の終わりに呼び出すさまざまな状態を定義します。この関数は2つの引数を取ります &lt;code&gt;open&lt;/code&gt; や &lt;code&gt;closed&lt;/code&gt; などの一意の名前と &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="87f7bdc684fc8838c17afd26ef0911196a4cc431" translate="yes" xml:space="preserve">
          <source>Use HTML tables to present tabular data.</source>
          <target state="translated">HTML テーブルを使用して表形式のデータを表示します。</target>
        </trans-unit>
        <trans-unit id="ec5c920a15553b3593ed958ca394d921868892c7" translate="yes" xml:space="preserve">
          <source>Use Ivy compiler to extract translations. The default for Ivy applications.</source>
          <target state="translated">翻訳を抽出するために Ivy コンパイラを使用します。Ivyアプリケーションのデフォルト。</target>
        </trans-unit>
        <trans-unit id="d52844f8f4d368ecefe3c48b7579af4485aa36ae" translate="yes" xml:space="preserve">
          <source>Use Lifecycle hooks to tap into important events exposed by Angular.</source>
          <target state="translated">ライフサイクルフックを使って、Angularが公開している重要なイベントを利用しましょう。</target>
        </trans-unit>
        <trans-unit id="9658986afcec6ffd4c7f6a0574e23679c2ba6611" translate="yes" xml:space="preserve">
          <source>Use Shadow DOM to encapsulate styles.</source>
          <target state="translated">スタイルをカプセル化するために Shadow DOM を使用します。</target>
        </trans-unit>
        <trans-unit id="f08d443a95d8465aefd51bbcd60a391957292522" translate="yes" xml:space="preserve">
          <source>Use TypeScript path mapping for peer dependencies</source>
          <target state="translated">ピアの依存関係に TypeScript のパスマッピングを使用する</target>
        </trans-unit>
        <trans-unit id="9cc4b5a0a1615c582c8ca48d1ec27455af6a185b" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;button&lt;/code&gt; element to add a button to the bottom of the form to trigger the form submission.</source>
          <target state="translated">&lt;code&gt;button&lt;/code&gt; 要素を使用してフォームの下部にボタンを追加し、フォームの送信をトリガーします。</target>
        </trans-unit>
        <trans-unit id="5b5ea0356b91d0915d4b8c036e052844c79a4502" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;formGroup&lt;/code&gt; property binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; to the &lt;code&gt;form&lt;/code&gt; tag in the template. Also include a &quot;Purchase&quot; button to submit the form.</source>
          <target state="translated">&lt;code&gt;formGroup&lt;/code&gt; プロパティバインディングを使用して、 &lt;code&gt;checkoutForm&lt;/code&gt; をテンプレートの &lt;code&gt;form&lt;/code&gt; タグにバインドします。また、フォームを送信するための「購入」ボタンを含めます。</target>
        </trans-unit>
        <trans-unit id="fdac760c5116185edbb31c4a9ad9c814fe4129bb" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;page&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;page&lt;/code&gt; オブジェクトを使用する</target>
        </trans-unit>
        <trans-unit id="d47d2a657fa1d3c60905a8a9ccd668a501f568ba" translate="yes" xml:space="preserve">
          <source>Use a JavaScript function, &lt;code&gt;customElements.define()&lt;/code&gt;, to register the configured constructor and its associated custom-element tag with the browser's &lt;code&gt;CustomElementRegistry&lt;/code&gt;. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.</source>
          <target state="translated">JavaScript関数 &lt;code&gt;customElements.define()&lt;/code&gt; を使用して、構成されたコンストラクターとそれに関連付けられたカスタム要素タグをブラウザーの &lt;code&gt;CustomElementRegistry&lt;/code&gt; に登録します。ブラウザーは、登録された要素のタグを検出すると、コンストラクターを使用してカスタム要素インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="e11d85bbf17531fc966e61cec648e173daa88850" translate="yes" xml:space="preserve">
          <source>Use a custom ID in combination with a description and a meaning to further help the translator. The following example includes a description, followed by the custom &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">翻訳者をさらに支援するために、説明と意味を組み合わせてカスタムIDを使用します。次の例には、説明とそれに続くカスタム &lt;code&gt;id&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="5ac9de1a85442b5f767db862207e329fbac7588a" translate="yes" xml:space="preserve">
          <source>Use a custom ID with a description</source>
          <target state="translated">説明付きのカスタムIDを使用する</target>
        </trans-unit>
        <trans-unit id="72a2b18f27d211118108e49c2dd0efc7f61f3f3d" translate="yes" xml:space="preserve">
          <source>Use a custom id with a description</source>
          <target state="translated">説明付きのカスタムIDを使用する</target>
        </trans-unit>
        <trans-unit id="ca0772b11fa11c22b7bfb2cc9e1ebd036d26eb58" translate="yes" xml:space="preserve">
          <source>Use a custom renderer to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use the &lt;code&gt;setProperty()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">カスタムレンダラーを使用して、Angularのテンプレートをバイパスし、宣言的に表現できないカスタムUIの変更を行います。たとえば、静的に名前がわからないプロパティまたは属性を設定する必要がある場合は、 &lt;code&gt;setProperty()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="324492ab6afe96a5c1328132beb31f646858e801" translate="yes" xml:space="preserve">
          <source>Use a custom renderer to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use the &lt;code&gt;setProperty()&lt;/code&gt; or &lt;code&gt;setAttribute()&lt;/code&gt; method.</source>
          <target state="translated">カスタムレンダラーを使用して、Angularのテンプレートをバイパスし、宣言的に表現できないカスタムUIの変更を行います。たとえば、名前が静的にわからないプロパティまたは属性を設定する必要がある場合は、 &lt;code&gt;setProperty()&lt;/code&gt; または &lt;code&gt;setAttribute()&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="ae19a71533b3168e6642bdceac36b609f94c8c0b" translate="yes" xml:space="preserve">
          <source>Use a domain NgModule to deliver a user experience dedicated to a particular feature or app domain, such as editing a customer or placing an order. One example is &lt;code&gt;ContactModule&lt;/code&gt; in the .</source>
          <target state="translated">ドメインNgModuleを使用して、顧客の編集や注文など、特定の機能またはアプリドメイン専用のユーザーエクスペリエンスを提供します。一例は、の &lt;code&gt;ContactModule&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2defd1faf147625042e6e427843821178b67bd1b" translate="yes" xml:space="preserve">
          <source>Use a double arrow syntax to specify state-to-state transitions in both directions.</source>
          <target state="translated">二重矢印構文を使用して、両方向の状態遷移を指定します。</target>
        </trans-unit>
        <trans-unit id="cf0e2d5905731592af7783a6403e3eef4ccc5310" translate="yes" xml:space="preserve">
          <source>Use a routed NgModule for all &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;lazy-loaded NgModules&lt;/a&gt;. Use the top component of the NgModule as the destination of a router navigation route. Routed NgModules don&amp;rsquo;t export anything because their components never appear in the template of an external component.</source>
          <target state="translated">&lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;遅延ロードさ&lt;/a&gt;れたすべてのNgModuleにルーティングされたNgModuleを使用します。NgModuleの最上位コンポーネントをルーターナビゲーションルートの宛先として使用します。ルーティングされたNgModuleは、そのコンポーネントが外部コンポーネントのテンプレートに表示されないため、何もエクスポートしません。</target>
        </trans-unit>
        <trans-unit id="b29c1902dc3b84e1d2bfda7af9e4d7a1fb9a38cd" translate="yes" xml:space="preserve">
          <source>Use a routing NgModule to do the following tasks:</source>
          <target state="translated">ルーティングNgModuleを使用して、以下のタスクを行います。</target>
        </trans-unit>
        <trans-unit id="4bb61bb5e6543cfdd382ac4b8fa11733424beebe" translate="yes" xml:space="preserve">
          <source>Use a routing NgModule to provide the routing configuration for a domain NgModule, thereby separating routing concerns from its companion domain NgModule. One example is &lt;code&gt;ContactRoutingModule&lt;/code&gt; in the , which provides the routing for its companion domain NgModule &lt;code&gt;ContactModule&lt;/code&gt;.</source>
          <target state="translated">ルーティングNgModuleを使用して、ドメインNgModuleのルーティング構成を提供します。これにより、ルーティングの問題をそのコンパニオンドメインNgModuleから分離します。一例は、 &lt;code&gt;ContactRoutingModule&lt;/code&gt; そのコンパニオンドメインNgModuleのルーティングを提供して、 &lt;code&gt;ContactModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f86fd2cb52558a5f799a9078de5c642cbd17287" translate="yes" xml:space="preserve">
          <source>Use a separate bundle containing code used across multiple bundles.</source>
          <target state="translated">複数のバンドルにまたがって使用されるコードを含む別のバンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="4de7347c4ae42c0338292a697420d7631cff3899" translate="yes" xml:space="preserve">
          <source>Use a separate bundle containing only vendor libraries.</source>
          <target state="translated">ベンダーライブラリのみを含む別のバンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="b7e178a75364c4b303869a2ad4fc54a9e1bf8428" translate="yes" xml:space="preserve">
          <source>Use a service NgModule to provide a utility service such as data access or messaging. Ideal service NgModules consist entirely of providers and have no declarations. Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; is a good example of a service NgModule.</source>
          <target state="translated">サービスNgModuleを使用して、データアクセスやメッセージングなどのユーティリティサービスを提供します。理想的なサービスNgModuleは完全にプロバイダーで構成され、宣言はありません。Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; は、サービスNgModuleの良い例です。</target>
        </trans-unit>
        <trans-unit id="8e38b8225305a78fe4c035082f1e5127ab107991" translate="yes" xml:space="preserve">
          <source>Use a widget NgModule to make a component, directive, or pipe available to external NgModules. Import widget NgModules into any NgModules that need the widgets in their templates. Many third-party UI component libraries are provided as widget NgModules.</source>
          <target state="translated">ウィジェットNgModuleを使用して、コンポーネント、ディレクティブ、パイプを外部のNgModuleで使用できるようにします。テンプレートにウィジェットを必要とする NgModule にウィジェット NgModule をインポートします。多くのサードパーティ製UIコンポーネントライブラリがウィジェットNgModulesとして提供されています。</target>
        </trans-unit>
        <trans-unit id="7d1d96dbe4bfa2f8afd5e063fb099246e2f933e9" translate="yes" xml:space="preserve">
          <source>Use an &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; whenever the type you are injecting is not reified (does not have a runtime representation) such as when injecting an interface, callable type, array or parameterized type.</source>
          <target state="translated">インターフェース、呼び出し可能型、配列、パラメーター化された型を注入する場合など、注入する型が具体化されていない（ランタイム表現がない）場合は常に、 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4b24b7564615489f70464a0b684de4d00e3cad09" translate="yes" xml:space="preserve">
          <source>Use an input property setter to intercept and act upon a value from the parent.</source>
          <target state="translated">入力プロパティのセッターを使用して、親からの値を傍受して動作させます。</target>
        </trans-unit>
        <trans-unit id="aa89ae11b8e5412bd5017dd7f915184a5121c58a" translate="yes" xml:space="preserve">
          <source>Use both techniques together</source>
          <target state="translated">両方のテクニックを併用する</target>
        </trans-unit>
        <trans-unit id="4eafa3af4b3e987e09122d57532c433e31ef809a" translate="yes" xml:space="preserve">
          <source>Use built-in Angular &lt;a href=&quot;guide/glossary#directive&quot;&gt;directives&lt;/a&gt; to show and hide elements and display lists of hero data.</source>
          <target state="translated">組み込みのAngular&lt;a href=&quot;guide/glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;を使用して、要素を表示および非表示にし、ヒーローデータのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="58c616bd0cf85cc12a155f6a80ac80d1c6ac921b" translate="yes" xml:space="preserve">
          <source>Use built-in Angular directives to show and hide elements and display lists of hero data.</source>
          <target state="translated">組み込みのAngularディレクティブを使用して、要素の表示・非表示やヒーローデータのリスト表示を行います。</target>
        </trans-unit>
        <trans-unit id="4fa5e4ac160ff5a6b000cb0799ec5b92924a2584" translate="yes" xml:space="preserve">
          <source>Use built-in pipes to display dates, numbers, percentages, and currencies in a local format.</source>
          <target state="translated">内蔵のパイプを使用して、日付、数字、パーセント、通貨をローカル形式で表示します。</target>
        </trans-unit>
        <trans-unit id="23828409823ed5397303067cdf5cba92e9ebb5fd" translate="yes" xml:space="preserve">
          <source>Use component and directive hooks together</source>
          <target state="translated">コンポーネントとディレクティブのフックを一緒に使う</target>
        </trans-unit>
        <trans-unit id="ba903051e852b2dc8a92992587da4085b281db62" translate="yes" xml:space="preserve">
          <source>Use directives to enhance an element</source>
          <target state="translated">ディレクティブを使って要素を強化する</target>
        </trans-unit>
        <trans-unit id="9f1377b56ad4c7adfb2e74c604fbe25bb8824c1d" translate="yes" xml:space="preserve">
          <source>Use directives to watch the DOM</source>
          <target state="translated">DOM を監視するためにディレクティブを使用する</target>
        </trans-unit>
        <trans-unit id="950c5862a83002acbd6de76109f9c7b8bfbeed34" translate="yes" xml:space="preserve">
          <source>Use empty path routes to group routes together without adding any additional path segments to the URL. Users will still visit &lt;code&gt;/admin&lt;/code&gt; and the &lt;code&gt;AdminComponent&lt;/code&gt; still serves as the Routing Component containing child routes.</source>
          <target state="translated">空のパスルートを使用して、URLにパスセグメントを追加せずにルートをグループ化します。ユーザーは引き続き &lt;code&gt;/admin&lt;/code&gt; にアクセスし、 &lt;code&gt;AdminComponent&lt;/code&gt; は引き続き子ルートを含むルーティングコンポーネントとして機能します。</target>
        </trans-unit>
        <trans-unit id="12ab61a4fd4336f2c2953a0f712c04fb91949dba" translate="yes" xml:space="preserve">
          <source>Use file name for lazy loaded chunks.</source>
          <target state="translated">遅延ロードされたチャンクのファイル名を使用します。</target>
        </trans-unit>
        <trans-unit id="f8f0525e366cb8c77a4916b799b14b984e598076" translate="yes" xml:space="preserve">
          <source>Use in components with the &lt;code&gt;@&lt;a href=&quot;core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; directive to emit custom events synchronously or asynchronously, and register handlers for those events by subscribing to an instance.</source>
          <target state="translated">コンポーネントで &lt;code&gt;@&lt;a href=&quot;core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して、カスタムイベントを同期的または非同期的に発行し、インスタンスにサブスクライブすることでそれらのイベントのハンドラーを登録します。</target>
        </trans-unit>
        <trans-unit id="6610f463a7407078fa7bae85f8fc8f843b6debb4" translate="yes" xml:space="preserve">
          <source>Use in components with the &lt;code&gt;@&lt;a href=&quot;output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; directive to emit custom events synchronously or asynchronously, and register handlers for those events by subscribing to an instance.</source>
          <target state="translated">コンポーネントで &lt;code&gt;@&lt;a href=&quot;output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して、カスタムイベントを同期的または非同期的に発行し、インスタンスにサブスクライブすることでそれらのイベントのハンドラーを登録します。</target>
        </trans-unit>
        <trans-unit id="9848cb209b02d0955db09afd48d35722b7baf9e6" translate="yes" xml:space="preserve">
          <source>Use in development mode to verify that running change detection doesn't introduce other changes.</source>
          <target state="translated">開発モードで使用して、実行中の変更検出が他の変更を導入していないことを確認します。</target>
        </trans-unit>
        <trans-unit id="562fbe07806719e4eb320decc50510c6f8fcbd9d" translate="yes" xml:space="preserve">
          <source>Use integration testing for your builder, so that you can use the Architect scheduler to create a context, as in this &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;例の&lt;/a&gt;ように、Architectスケジューラを使用してコンテキストを作成できるように、ビルダーの統合テストを使用します。</target>
        </trans-unit>
        <trans-unit id="922b5062ec0572aa1adccb4f5632805f5154deab" translate="yes" xml:space="preserve">
          <source>Use kebab-case for downgraded component attributes</source>
          <target state="translated">ダウングレードされたコンポーネント属性にkebab-caseを使用する</target>
        </trans-unit>
        <trans-unit id="44f566857d643f1d49f711c0b30d0dc6a3ffce4b" translate="yes" xml:space="preserve">
          <source>Use keyframes to create a pulse effect in your animations by defining styles at specific offset throughout the animation.</source>
          <target state="translated">キーフレームを使用して、アニメーション全体の特定のオフセットでスタイルを定義して、アニメーションにパルス効果を作成します。</target>
        </trans-unit>
        <trans-unit id="fd613fa5fcd4a8580220c7bfbc8b1e7cd0225fe6" translate="yes" xml:space="preserve">
          <source>Use mock crises instead of mock heroes:</source>
          <target state="translated">モックヒーローの代わりにモッククライシスを使いましょう。</target>
        </trans-unit>
        <trans-unit id="f78e562ea1e7f343fb60afc2c7e41be5afad1302" translate="yes" xml:space="preserve">
          <source>Use nested form groups to validate a sub-group of a form separately from the rest or to group the values of certain controls into their own nested object.</source>
          <target state="translated">入れ子になったフォームグループを使って、フォームのサブグループを他のグループとは別に検証したり、特定のコントロールの値を独自の入れ子になったオブジェクトにグループ化したりすることができます。</target>
        </trans-unit>
        <trans-unit id="ae0b7c6086be4df2a4b72a414920640b2b9519a5" translate="yes" xml:space="preserve">
          <source>Use of *ngIf and *ngFor with :enter and :leave</source>
          <target state="translated">Enter と leave での *ngIf と *ngFor の使用</target>
        </trans-unit>
        <trans-unit id="d322e89d8709c00474049e733e76b74c2ec2e87b" translate="yes" xml:space="preserve">
          <source>Use one-way &lt;a href=&quot;guide/glossary#data-binding&quot;&gt;data binding&lt;/a&gt; for read-only data.</source>
          <target state="translated">読み取り専用データには一方向の&lt;a href=&quot;guide/glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="825f8becf5e248543919edc40655a1407e732140" translate="yes" xml:space="preserve">
          <source>Use one-way data binding for read-only data.</source>
          <target state="translated">読み取り専用データにはワンウェイデータバインディングを使用します。</target>
        </trans-unit>
        <trans-unit id="b019f13aecefec4b1ef5f1581bf4c9362c846575" translate="yes" xml:space="preserve">
          <source>Use only the root &lt;code&gt;AppModule&lt;/code&gt; to import service NgModules.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; のみを使用して、サービスNgModuleをインポートします。</target>
        </trans-unit>
        <trans-unit id="84ab263256ce0670db1121c29c0f37c632743fb5" translate="yes" xml:space="preserve">
          <source>Use optional parameters to fine-tune a pipe's output. For example, you can use the &lt;a href=&quot;../api/common/currencypipe&quot;&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;&lt;/a&gt; with a country code such as EUR as a parameter. The template expression &lt;code&gt;{{ amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;:'EUR' }}&lt;/code&gt; transforms the &lt;code&gt;amount&lt;/code&gt; to currency in euros. Follow the pipe name (&lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt;) with a colon (&lt;code&gt;:&lt;/code&gt;) and the parameter value (&lt;code&gt;'EUR'&lt;/code&gt;).</source>
          <target state="translated">オプションのパラメータを使用して、パイプの出力を微調整します。たとえば、EURなどの国コードをパラメータとして&lt;a href=&quot;../api/common/currencypipe&quot;&gt; &lt;code&gt;CurrencyPipe&lt;/code&gt; &lt;/a&gt;を使用できます。テンプレート式 &lt;code&gt;{{ amount | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;:'EUR' }}&lt;/code&gt; は、 &lt;code&gt;amount&lt;/code&gt; をユーロ単位の通貨に変換します。パイプ名（フォロー &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; （コロン付き） &lt;code&gt;:&lt;/code&gt; ）とパラメータ値（ &lt;code&gt;'EUR'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="33c9c9b12a49197173a1f9a9e99b1ab027db7481" translate="yes" xml:space="preserve">
          <source>Use property binding to &lt;em&gt;set&lt;/em&gt; properties of target elements or directive &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorators. For an example demonstrating all of the points in this section, see the &lt;span name=&quot;property-binding&quot;&gt;property binding example&lt;/span&gt;.</source>
          <target state="translated">プロパティバインディングを使用して、ターゲット要素またはディレクティブ &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）デコレータのプロパティを&lt;em&gt;設定し&lt;/em&gt;ます。このセクションのすべてのポイントを示す例については、&lt;span name=&quot;property-binding&quot;&gt;プロパティバインディングの例を&lt;/span&gt;参照してください。&lt;span name=&quot;property-binding&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="372dfe3d09c315bc93b1ea423f2929945069773a" translate="yes" xml:space="preserve">
          <source>Use root URLs (URLs with an &lt;code&gt;authority&lt;/code&gt;) for all web resources: CSS, images, scripts, and template HTML files.</source>
          <target state="translated">すべてのWebリソース（CSS、画像、スクリプト、およびテンプレートHTMLファイル）にルートURL（ &lt;code&gt;authority&lt;/code&gt; 持つURL ）を使用します。</target>
        </trans-unit>
        <trans-unit id="0df3164dd6957c5324cc16a1bec4b3c77625f9c7" translate="yes" xml:space="preserve">
          <source>Use route guards to prevent users from navigating to parts of an app without authorization. The following route guards are available in Angular:</source>
          <target state="translated">ルートガードを使用して、ユーザーが許可なくアプリの一部に移動するのを防ぎます。Angularでは以下のルートガードが利用できます。</target>
        </trans-unit>
        <trans-unit id="0e687455aeeac52967421ad9e0ea548379e0207c" translate="yes" xml:space="preserve">
          <source>Use route parameters</source>
          <target state="translated">ルートパラメータの使用</target>
        </trans-unit>
        <trans-unit id="83397ceeb8cb2ee18c72cf2e39d941138c6e3d3b" translate="yes" xml:space="preserve">
          <source>Use routing to navigate among different views and their components.</source>
          <target state="translated">ルーティングを使用して、さまざまなビューとそのコンポーネント間をナビゲートします。</target>
        </trans-unit>
        <trans-unit id="4cdf0fd45f5b27136f0216be71f8f71b7ad6ec2e" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;&lt;code&gt;HTTPClient.get()&lt;/code&gt;&lt;/a&gt; method to fetch data from a server. The asynchronous method sends an HTTP request, and returns an Observable that emits the requested data when the response is received. The return type varies based on the &lt;code&gt;observe&lt;/code&gt; and &lt;code&gt;responseType&lt;/code&gt; values that you pass to the call.</source>
          <target state="translated">&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt; &lt;code&gt;HTTPClient.get()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、サーバーからデータをフェッチします。非同期メソッドはHTTP要求を送信し、応答の受信時に要求されたデータを発行するObservableを返します。戻り値の型は、呼び出しに渡す &lt;code&gt;observe&lt;/code&gt; 値と &lt;code&gt;responseType&lt;/code&gt; 値によって異なります。</target>
        </trans-unit>
        <trans-unit id="39c1797df4b9af407e3710887e87a8ad9487e6aa" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to automatically set up your project with the correct polyfill:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、プロジェクトに正しいポリフィルを自動的に設定します。</target>
        </trans-unit>
        <trans-unit id="0bfd4f1040c27256f1f7a7669dce5333fc8f6d46" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to automatically set up your project with the correct polyfill: &lt;code&gt;ng add @angular/elements --name=*your_project_name*&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、正しいポリフィルでプロジェクトを自動的に設定します： &lt;code&gt;ng add @angular/elements --name=*your_project_name*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfda0e354b6fefc979aa3e2846531a503fd7a71b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli&quot;&gt;CLI command&lt;/a&gt;&lt;code&gt;ng generate&lt;/code&gt; to generate a component in your project to host the control.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;CLIコマンド&lt;/a&gt; &lt;code&gt;ng generate&lt;/code&gt; 使用して、コントロールをホストするプロジェクト内のコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="eb0967d7ae25fbeb074644d90cbc2a0b6e09376c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli/run&quot;&gt;CLI command &lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; to invoke a builder by specifying a &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt; associated with that builder. Integrators can add builders to enable tools and workflows to run through the Angular CLI. For example, a custom builder can replace the third-party tools used by the built-in implementations for CLI commands such as &lt;code&gt;ng build&lt;/code&gt; or &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli/run&quot;&gt;CLIコマンド &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt;を使用して、ビルダーに関連付けられた&lt;a href=&quot;glossary#target&quot;&gt;ターゲット構成を&lt;/a&gt;指定することにより、そのビルダーを呼び出します。インテグレーターはビルダーを追加して、Angular CLIを通じてツールとワークフローを実行できるようにすることができます。たとえば、カスタムビルダーは、 &lt;code&gt;ng build&lt;/code&gt; や &lt;code&gt;ng test&lt;/code&gt; などのCLIコマンドの組み込み実装によって使用されるサードパーティツールを置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="9f443ef713021a89a07c940630b1de13045528f0" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;singleton-services#providedIn&quot;&gt;&lt;code&gt;providedIn&lt;/code&gt; syntax&lt;/a&gt; instead of registering the service in the module.</source>
          <target state="translated">モジュールにサービスを登録する代わりに、&lt;a href=&quot;singleton-services#providedIn&quot;&gt; &lt;code&gt;providedIn&lt;/code&gt; 構文を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="92e5840b8af8374ad2ebbe47694fb89faef0677c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;template-expression-operators#any-type-cast-function&quot;&gt;&lt;code&gt;$any()&lt;/code&gt; type-cast function&lt;/a&gt; in certain contexts to opt out of type-checking for a part of the expression.</source>
          <target state="translated">特定のコンテキストで&lt;a href=&quot;template-expression-operators#any-type-cast-function&quot;&gt; &lt;code&gt;$any()&lt;/code&gt; 型キャスト関数&lt;/a&gt;を使用して、式の一部の型チェックをオプトアウトします。</target>
        </trans-unit>
        <trans-unit id="3e66ddd3ed9a2939ac4e252bd5468007fd696006" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;template-expression-operators#non-null-assertion-operator&quot;&gt;non-null type assertion operator&lt;/a&gt; to suppress the &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error when it is inconvenient to use &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or when some constraint in the component ensures that the expression is always non-null when the binding expression is interpolated.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;を使用するのが不便な場合、またはコンポーネントの何らかの制約により、バインディング式が補間されるときに式が常に非nullになることが保証される場合は、&lt;a href=&quot;template-expression-operators#non-null-assertion-operator&quot;&gt;null以外の型のアサーション演算子&lt;/a&gt;を使用して &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; エラーになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="802892225bada3f629d8e440f05c2e60e8ea54c8" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;template-syntax#non-null-assertion-operator&quot;&gt;non-null type assertion operator&lt;/a&gt; to suppress the &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error when it is inconvenient to use &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or when some constraint in the component ensures that the expression is always non-null when the binding expression is interpolated.</source>
          <target state="translated">使用する&lt;a href=&quot;template-syntax#non-null-assertion-operator&quot;&gt;null以外の型アサーション演算子を&lt;/a&gt;抑制するために &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; 、それは使用に不便である場合にエラーを &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; たりするときは、結合式が補間されたときに式が常に非nullであることをコンポーネント性を保証でいくつかの制約。</target>
        </trans-unit>
        <trans-unit id="5a253ee9798a26a31ec1940c9c82d1392f5a3876" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; pseudo-class selector to target styles in the element that &lt;em&gt;hosts&lt;/em&gt; the component (as opposed to targeting elements &lt;em&gt;inside&lt;/em&gt; the component's template).</source>
          <target state="translated">&lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 疑似クラスセレクターを使用して、（コンポーネントのテンプレート&lt;em&gt;内&lt;/em&gt;の要素をターゲットにするのではなく）コンポーネントを&lt;em&gt;ホスト&lt;/em&gt;する要素のスタイルをターゲットにします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d5018825bf0a7d2fd0cd9ddf6fdbc3f0fd42061" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:host-context()&lt;/code&gt; pseudo-class selector, which works just like the function form of &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;()&lt;/code&gt;. The &lt;code&gt;:host-context()&lt;/code&gt; selector looks for a CSS class in any ancestor of the component host element, up to the document root. The &lt;code&gt;:host-context()&lt;/code&gt; selector is useful when combined with another selector.</source>
          <target state="translated">使用 &lt;code&gt;:host-context()&lt;/code&gt; だけの関数形のように動作擬似クラスセレクタ、 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;()&lt;/code&gt; 。 &lt;code&gt;:host-context()&lt;/code&gt; セレクタコンポーネントホスト要素の任意の祖先にCSSクラスを探し、ドキュメントのルートまで。 &lt;code&gt;:host-context()&lt;/code&gt; セレクタ別のセレクタと組み合わせた場合に有用です。</target>
        </trans-unit>
        <trans-unit id="e72b9954eaff41b26847a659d8c0f90cb35a7a3f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:host-context()&lt;/code&gt; pseudo-class selector, which works just like the function form of &lt;code&gt;:host()&lt;/code&gt;. The &lt;code&gt;:host-context()&lt;/code&gt; selector looks for a CSS class in any ancestor of the component host element, up to the document root. The &lt;code&gt;:host-context()&lt;/code&gt; selector is useful when combined with another selector.</source>
          <target state="translated">&lt;code&gt;:host()&lt;/code&gt; の関数形式と同じように機能する &lt;code&gt;:host-context()&lt;/code&gt; 疑似クラスセレクターを使用します。 &lt;code&gt;:host-context()&lt;/code&gt; セレクタコンポーネントホスト要素の任意の祖先にCSSクラスを探し、ドキュメントのルートまで。 &lt;code&gt;:host-context()&lt;/code&gt; セレクタ別のセレクタと組み合わせた場合に有用です。</target>
        </trans-unit>
        <trans-unit id="1eb6b173a1c3356126f8b598723f08cf244e5776" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:host&lt;/code&gt; pseudo-class selector to target styles in the element that &lt;em&gt;hosts&lt;/em&gt; the component (as opposed to targeting elements &lt;em&gt;inside&lt;/em&gt; the component's template).</source>
          <target state="translated">&lt;code&gt;:host&lt;/code&gt; 疑似クラスセレクターを使用し&lt;em&gt;て&lt;/em&gt;、コンポーネントを&lt;em&gt;ホスト&lt;/em&gt;する要素のスタイルをターゲットにします（コンポーネントのテンプレート&lt;em&gt;内&lt;/em&gt;の要素をターゲット&lt;em&gt;に&lt;/em&gt;するのではありません）。</target>
        </trans-unit>
        <trans-unit id="c620015e08354210a92a8e92a39367a30c7b96b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function to define the length, delay, and easing of a transition, and to designate the style function for defining styles while transitions are taking place. You can also use the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function to define the &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function for multi-step animations. These definitions are placed in the second argument of the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 長さ、遅延、および遷移の緩和を定義すること、および遷移が行われている間のスタイルを定義するためのスタイルの機能を指定する機能。また、 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数を使用して、マルチステップアニメーションの &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 関数を定義することもできます。これらの定義は、 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数の2番目の引数に配置されます。</target>
        </trans-unit>
        <trans-unit id="f32ed10372c1cab9fb95fe4e02cc957f60ec0b21" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; method to create the &lt;code&gt;profileForm&lt;/code&gt; controls.</source>
          <target state="translated">使用する &lt;code&gt;&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; を作成する方法を &lt;code&gt;profileForm&lt;/code&gt; のコントロールを。</target>
        </trans-unit>
        <trans-unit id="8bdd7bc62b27869a9b7bb04eb7df3c59285d92cc" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; method to find and animate elements within the current host component. The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:enter&quot;)&lt;/code&gt; statement returns the view that is being inserted, and &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:leave&quot;)&lt;/code&gt; returns the view that is being removed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; メソッドを使用して、現在のホストコンポーネント内の要素を検索してアニメーション化します。 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:enter&quot;)&lt;/code&gt; 文が挿入されているビューを返し、 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:leave&quot;)&lt;/code&gt; 削除されているビューを返します。</target>
        </trans-unit>
        <trans-unit id="ebd22958c7847fa77a78ef8e03b47db2e683c9d2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function to define a set of styles to associate with a given state name. Note that the style attributes must be in &lt;a href=&quot;glossary#case-conventions&quot;&gt;&lt;em&gt;camelCase&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 与えられた状態名に関連付けるスタイルのセットを定義する機能を。スタイル属性は&lt;a href=&quot;glossary#case-conventions&quot;&gt;&lt;em&gt;camelCaseに&lt;/em&gt;&lt;/a&gt;なければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0fa654e1834814316ba8811c61caee652776bb4c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class with the &lt;code&gt;params&lt;/code&gt; request option to add URL query strings in your &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; クラスを &lt;code&gt;params&lt;/code&gt; リクエストオプションとともに使用して、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; にURLクエリ文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="91acc14e39e5119c18415965f1423d1c1e94ab00" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; method to simulate the passage of time within the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; task.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; メソッドを使用して、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; タスク内の時間の経過をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="6e11e33b2cc2033eeec839ccb2bf4ff8db1df75b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array as another way to provide services in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. Using &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; makes services visibile in the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）デコレータでサービスを提供する別の方法として、 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を使用します。 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; でサービスが表示されます。</target>
        </trans-unit>
        <trans-unit id="e9da9c13c3494d39f9b8123dc99a605e807be36b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; hook to detect and act upon changes that Angular doesn't catch on its own.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; フックを使用して、Angularが独自にキャッチしない変更を検出して対処します。</target>
        </trans-unit>
        <trans-unit id="d7752a1ea977f4ad7b461d4d69d81c8a873f6eeb" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;()&lt;/code&gt; method to simulate the passage of time within the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; task.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;()&lt;/code&gt; メソッドを使用して、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; タスク内の時間の経過をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="b14dbf457ff7a844ac29eacc3c02344a0ca4f6f9" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function to convert a component into a class that can be registered with the browser as a custom element. After you register your configured class with the browser's custom-element registry, you can use the new element just like a built-in HTML element in content that you add directly into the DOM:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; カスタム要素としてブラウザに登録することができるクラスにコンポーネントを変換する機能。構成したクラスをブラウザーのカスタム要素レジストリに登録すると、DOMに直接追加するコンテンツの組み込みHTML要素と同じように、新しい要素を使用できます。</target>
        </trans-unit>
        <trans-unit id="c24aafb47c577f92905ee4910fc51532818acf73" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;FormBuilder.array()&lt;/a&gt;&lt;/code&gt; method to define the array, and the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;FormBuilder.control()&lt;/a&gt;&lt;/code&gt; method to populate the array with an initial control.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;FormBuilder.array()&lt;/a&gt;&lt;/code&gt; 配列を定義する方法、および &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;FormBuilder.control()&lt;/a&gt;&lt;/code&gt; メソッドは、初期制御を有するアレイを移入します。</target>
        </trans-unit>
        <trans-unit id="ee7d38fbbd61f8f37159836272223af030e2357d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method to create a programmatic animation using the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function. The method returns an &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">使用し &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; 使用してプログラム的なアニメーションを作成する方法 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数を。このメソッドは &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="3765ca5842a3e715a91529c10554d2f2c436e303" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; strategy, meaning that automatic change detection is deactivated until reactivated by setting the strategy to &lt;code&gt;Default&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;). Change detection can still be explicitly invoked. This strategy applies to all child directives and cannot be overridden.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; ストラテジーを使用します。 &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; 、ストラテジーを &lt;code&gt;Default&lt;/code&gt; （CheckAlways）に設定することで、再アクティブ化されるまで自動変更検出が非アクティブ化されます。変更検出は引き続き明示的に呼び出すことができます。この戦略はすべての子ディレクティブに適用され、オーバーライドできません。</target>
        </trans-unit>
        <trans-unit id="b2cf0a1cf425beff3e317842f9cdbcec4e95baf3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function to register states to an animation trigger. Use the &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function to animate between states. When a state is active within a component, its associated styles persist on the element, even when the animation ends.</source>
          <target state="translated">状態をアニメーショントリガーに登録するには、 &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数を使用します。状態間をアニメーション化するには、 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 関数を使用します。状態がコンポーネント内でアクティブな場合、アニメーションが終了しても、関連付けられたスタイルは要素に保持されます。</target>
        </trans-unit>
        <trans-unit id="b3851f1b2f6c392b87e343e5e9be15390610617a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component or directive to let Angular know that a property in that component can receive its value from its parent component. It helps to remember that the data flow is from the perspective of the child component. So an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; allows data to be input &lt;em&gt;into&lt;/em&gt; the child component from the parent component.</source>
          <target state="translated">子コンポーネントまたはディレクティブで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレーターを使用して、そのコンポーネントのプロパティが親コンポーネントから値を受け取ることができることをAngularに知らせます。データフローは子コンポーネントの観点からのものであることを覚えておくと役立ちます。だから &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; データを入力することを可能にする&lt;em&gt;に&lt;/em&gt;親コンポーネントから子コンポーネント。</target>
        </trans-unit>
        <trans-unit id="ef440cee0d4b619baf1dc108b572b145ffe599c6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator in the child component or directive to allow data to flow from the child &lt;em&gt;out&lt;/em&gt; to the parent.</source>
          <target state="translated">子コンポーネントまたはディレクティブで &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; デコレーターを使用して、データが子&lt;em&gt;から&lt;/em&gt;親に流れるようにします。</target>
        </trans-unit>
        <trans-unit id="d83e06cc984ee1c0469d1eafff65bf7633430e80" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;CheckOnce&lt;/code&gt; strategy, meaning that automatic change detection is deactivated until reactivated by setting the strategy to &lt;code&gt;Default&lt;/code&gt; (&lt;code&gt;CheckAlways&lt;/code&gt;). Change detection can still be explicitly invoked. This strategy applies to all child directives and cannot be overridden.</source>
          <target state="translated">&lt;code&gt;CheckOnce&lt;/code&gt; ストラテジーを使用します。これは、ストラテジーを &lt;code&gt;Default&lt;/code&gt; （ &lt;code&gt;CheckAlways&lt;/code&gt; ）に設定することにより、再アクティブ化されるまで自動変更検出が非アクティブ化されることを意味します。変更検出は引き続き明示的に呼び出すことができます。この戦略はすべての子ディレクティブに適用され、オーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="cb9e4c97b8a1368fcaea25ed71eeaf564330d68c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Observable&lt;/code&gt; constructor to create an observable stream of any type. The constructor takes as its argument the subscriber function to run when the observable&amp;rsquo;s &lt;code&gt;subscribe()&lt;/code&gt; method executes. A subscriber function receives an &lt;code&gt;Observer&lt;/code&gt; object, and can publish values to the observer's &lt;code&gt;next()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; コンストラクターを使用して、任意のタイプの監視可能なストリームを作成します。コンストラクターは、オブザーバブルの &lt;code&gt;subscribe()&lt;/code&gt; メソッドが実行されたときに実行するサブスクライバー関数を引数として受け取ります。サブスクライバー関数は &lt;code&gt;Observer&lt;/code&gt; オブジェクトを受け取り、オブザーバーの &lt;code&gt;next()&lt;/code&gt; メソッドに値を公開できます。</target>
        </trans-unit>
        <trans-unit id="1173fd6da6508928f593314bd49b24f1cee5a901" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method to define a set of routes. Also, import this &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the main module, &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">一連のルートを定義するには、 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; メソッドを使用します。また、この &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; をメインモジュール &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; 配列にインポートします。</target>
        </trans-unit>
        <trans-unit id="e8313bf3571f8e365bb6b78327e4934cce902d36" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;build()&lt;/code&gt; method to create a programmatic animation using the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function. The method returns an &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">使用し &lt;code&gt;build()&lt;/code&gt; 使用してプログラム的なアニメーションを作成する方法 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数を。このメソッドは、 &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="236f90d8a2b43b2b908f826c2dd47da6ccc4d554" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;declarations&lt;/code&gt; array for directives. To use a directive, component, or pipe in a module, you must do a few things:</source>
          <target state="translated">ディレクティブには &lt;code&gt;declarations&lt;/code&gt; 配列を使用します。モジュールでディレクティブ、コンポーネント、またはパイプを使用するには、いくつかのことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="3c3fa69688b331df5c2d1c642a70ae5ecd3bdf4b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;favoriteColorControl&lt;/code&gt;, a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance, to set the new value.</source>
          <target state="translated">使用 &lt;code&gt;favoriteColorControl&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; の新しい値を設定するには、インスタンスを。</target>
        </trans-unit>
        <trans-unit id="61f6904d5a95189f40bcaf32c7dae25ca2c3b08c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;i18n&lt;/code&gt; project option in your app's build configuration file (&lt;a href=&quot;workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt;&lt;/a&gt;) to define locales for a project. The following sub-options identify the source language and tell the compiler where to find supported translations for the project:</source>
          <target state="translated">アプリのビルド構成ファイル（&lt;a href=&quot;workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; &lt;/a&gt;）で &lt;code&gt;i18n&lt;/code&gt; プロジェクトオプションを使用して、プロジェクトのロケールを定義します。次のサブオプションは、ソース言語を識別し、プロジェクトでサポートされている翻訳の場所をコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="48ee9872418a6c1f38c284ca4a4b987b2309d939" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;ngOnInit()&lt;/code&gt; method to perform the following initialization tasks.</source>
          <target state="translated">使用 &lt;code&gt;ngOnInit()&lt;/code&gt; 次の初期化タスクを実行する方法を。</target>
        </trans-unit>
        <trans-unit id="4eec2f26c7f0fc8134e3d9fc9ce871ea1a55e8f8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;params&lt;/code&gt; property to configure a request with &lt;a href=&quot;http#url-params&quot;&gt;HTTP URL parameters&lt;/a&gt;, and the &lt;code&gt;reportProgress&lt;/code&gt; option to &lt;a href=&quot;http#report-progress&quot;&gt;listen for progress events&lt;/a&gt; when transferring large amounts of data.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; プロパティを使用して &lt;code&gt;reportProgress&lt;/code&gt; &lt;a href=&quot;http#url-params&quot;&gt;パラメータ&lt;/a&gt;を使用してリクエストを設定し、reportProgressオプションを使用して大量のデータを転送するとき&lt;a href=&quot;http#report-progress&quot;&gt;に進行状況イベント&lt;/a&gt;をリッスンします。</target>
        </trans-unit>
        <trans-unit id="16cf1db0421f9d869402c30f489d6a26b1ef363c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;patchValue()&lt;/code&gt; method to replace any properties defined in the object that have changed in the form model.</source>
          <target state="translated">&lt;code&gt;patchValue()&lt;/code&gt; メソッドを使用して、フォームモデルで変更された、オブジェクトで定義されたプロパティを置き換えます。</target>
        </trans-unit>
        <trans-unit id="bb02cfa0121d7b0538da1ecc37b0b8d4f6b44745" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;plural&lt;/code&gt; clause to mark expressions that may not be meaningful if translated word-for-word.</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 使用して、単語ごとに翻訳した場合に意味がない可能性のある式をマークします。</target>
        </trans-unit>
        <trans-unit id="663da71b4933858141a19f1c639501cb180552d7" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;retry&lt;/code&gt; operator before the &lt;code&gt;catchError&lt;/code&gt; operator. It resubscribes to the original source observable, which can then re-run the full sequence of actions that resulted in the error. If this includes an HTTP request, it will retry that HTTP request.</source>
          <target state="translated">&lt;code&gt;catchError&lt;/code&gt; 演算子の前に &lt;code&gt;retry&lt;/code&gt; 演算子を使用します。監視可能な元のソースを再サブスクライブし、エラーの原因となった一連のアクションをすべて再実行できます。これにHTTPリクエストが含まれている場合、そのHTTPリクエストを再試行します。</target>
        </trans-unit>
        <trans-unit id="b7694867b286796d89cd1dbec2bfe6eee5554c0d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;save&lt;/code&gt; option of &lt;code&gt;ng-add&lt;/code&gt; to configure if the library should be added to the &lt;code&gt;dependencies&lt;/code&gt;, the &lt;code&gt;devDepedencies&lt;/code&gt;, or not saved at all in the project's &lt;code&gt;package.json&lt;/code&gt; configuration file.</source>
          <target state="translated">&lt;code&gt;ng-add&lt;/code&gt; の &lt;code&gt;save&lt;/code&gt; オプションを使用して、ライブラリを &lt;code&gt;dependencies&lt;/code&gt; 、 &lt;code&gt;devDepedencies&lt;/code&gt; に追加するか、プロジェクトの &lt;code&gt;package.json&lt;/code&gt; 構成ファイルにまったく保存しないかを構成します。</target>
        </trans-unit>
        <trans-unit id="3c670bb360c8cc1af3a13abb754e25fbb2f42f5b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;schematics&lt;/code&gt; command to run a named schematic. Provide the path to the project folder, the schematic name, and any mandatory options, in the following format.</source>
          <target state="translated">名前付きの回路図を実行するには、 &lt;code&gt;schematics&lt;/code&gt; コマンドを使用します。プロジェクトフォルダーへのパス、回路図名、および必須オプションを次の形式で指定します。</target>
        </trans-unit>
        <trans-unit id="d6dfca72b156d70b98370724a6bf1ea5950071f5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;set()&lt;/code&gt; method instead, to return a clone of the current instance with the new changes applied.</source>
          <target state="translated">代わりに &lt;code&gt;set()&lt;/code&gt; メソッドを使用して、新しい変更が適用された現在のインスタンスのクローンを返します。</target>
        </trans-unit>
        <trans-unit id="52f536a15c49df755922f56c142d44e19a8db2b4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;setValue()&lt;/code&gt; method to set a new value for an individual control. The &lt;code&gt;setValue()&lt;/code&gt; method strictly adheres to the structure of the form group and replaces the entire value for the control.</source>
          <target state="translated">個々のコントロールに新しい値を設定するには、 &lt;code&gt;setValue()&lt;/code&gt; メソッドを使用します。 &lt;code&gt;setValue()&lt;/code&gt; メソッドは、厳密にフォームグループの構造に付着して制御するための全体の値を置き換えます。</target>
        </trans-unit>
        <trans-unit id="5a4052bf9f3ebb3e3c658b007bccd5c4c5718185" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;viewProviders&lt;/code&gt; array as another way to provide services in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. Using &lt;code&gt;viewProviders&lt;/code&gt; makes services visible in the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）デコレータでサービスを提供する別の方法として &lt;code&gt;viewProviders&lt;/code&gt; 配列を使用します。 &lt;code&gt;viewProviders&lt;/code&gt; を使用すると、サービスが &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; に表示されます。</target>
        </trans-unit>
        <trans-unit id="608e3ecc67d63ebd131072715526770717d76070" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;function form&lt;/em&gt; to apply host styles conditionally by including another selector inside parentheses after &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用する&lt;em&gt;関数形を&lt;/em&gt;した後の括弧内の別のセレクタを含むことにより、条件付きでホストのスタイルを適用するには &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95d63fddc3e3a0e31fab944297cbb5d5eb512831" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;function form&lt;/em&gt; to apply host styles conditionally by including another selector inside parentheses after &lt;code&gt;:host&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;関数フォーム&lt;/em&gt;を使用して、 &lt;code&gt;:host&lt;/code&gt; の後に括弧内に別のセレクターを含めることにより、条件付きでホストスタイルを適用します。</target>
        </trans-unit>
        <trans-unit id="0228ac89e07be504f25494e9676937a8b7718d7a" translate="yes" xml:space="preserve">
          <source>Use the @Injectable() class decorator</source>
          <target state="translated">クラスのデコレータである @Injectable()を使用します。</target>
        </trans-unit>
        <trans-unit id="ca6ceefb0e64ecbea616db35552ef73de6fa3bb9" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI and the npm package manager to build and publish your library as an npm package.</source>
          <target state="translated">Angular CLI と npm パッケージマネージャを使って、ライブラリを npm パッケージとしてビルドして公開します。</target>
        </trans-unit>
        <trans-unit id="d3a17a236cfd17da399af8b8cc707e6575ce9b8c" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI and the npm package manager to build and publish your library as an npm package. Libraries are built in &lt;a href=&quot;aot-compiler&quot;&gt;AoT mode&lt;/a&gt; by default, so you do not need to specify the &lt;code&gt;-prod&lt;/code&gt; flag when building for publication.</source>
          <target state="translated">Angular CLIとnpmパッケージマネージャーを使用して、ライブラリを構築し、npmパッケージとして公開します。ライブラリはデフォルトで&lt;a href=&quot;aot-compiler&quot;&gt;AoTモード&lt;/a&gt;でビルドされるため、パブリケーション用にビルドするときに &lt;code&gt;-prod&lt;/code&gt; フラグを指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4633a55586a6fa2e22e42b322b523d199217f07e" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new component named &lt;code&gt;hero-detail&lt;/code&gt;.</source>
          <target state="translated">Angular CLIを使用して、 &lt;code&gt;hero-detail&lt;/code&gt; という名前の新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="b5380a6f98199f77703c5f5d467966fab80d71f5" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new library skeleton in a new workspace with the following commands.</source>
          <target state="translated">Angular CLIを使用して、以下のコマンドで新しいワークスペースに新しいライブラリのスケルトンを生成します。</target>
        </trans-unit>
        <trans-unit id="4d57c142dc3dc54d8d21e3c079a0a3926683c980" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new library skeleton with the following command:</source>
          <target state="translated">Angular CLIを使用して、以下のコマンドで新しいライブラリのスケルトンを生成します。</target>
        </trans-unit>
        <trans-unit id="359dd0a4bcbf30fc27fe4c0e62d05c483ce99a29" translate="yes" xml:space="preserve">
          <source>Use the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new displaying-data&lt;/code&gt;&lt;/a&gt; to create a workspace and app named &lt;code&gt;displaying-data&lt;/code&gt;.</source>
          <target state="translated">CLIコマンド&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new displaying-data&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;displaying-data&lt;/code&gt; という名前のワークスペースとアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="38c9f16db58637bd61abdf74662688ec8ee2214e" translate="yes" xml:space="preserve">
          <source>Use the CLI to automatically create the app shell.</source>
          <target state="translated">CLIを使用して、アプリシェルを自動的に作成します。</target>
        </trans-unit>
        <trans-unit id="9ece05677ae45d1939690d567a9eb86967b7bbf8" translate="yes" xml:space="preserve">
          <source>Use the CLI to build the &lt;code&gt;app-shell&lt;/code&gt; target.</source>
          <target state="translated">CLIを使用して、 &lt;code&gt;app-shell&lt;/code&gt; ターゲットをビルドします。</target>
        </trans-unit>
        <trans-unit id="e5cf2ec90353ca6935df3915b02b577d867b4e88" translate="yes" xml:space="preserve">
          <source>Use the CLI to create the &lt;code&gt;MessageService&lt;/code&gt; in &lt;code&gt;src/app&lt;/code&gt;.</source>
          <target state="translated">CLIを使用して &lt;code&gt;src/app&lt;/code&gt; に &lt;code&gt;MessageService&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="308d836de00681b82b1a6ac4629d26037ebc7917" translate="yes" xml:space="preserve">
          <source>Use the CLI to create the &lt;code&gt;MessagesComponent&lt;/code&gt;.</source>
          <target state="translated">CLIを使用して、 &lt;code&gt;MessagesComponent&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="e4358774dc70c3cc192b493d6b2f26403c5c18d1" translate="yes" xml:space="preserve">
          <source>Use the CLI to extract marked text to a &lt;em&gt;source language&lt;/em&gt; file.</source>
          <target state="translated">CLIを使用して、マークされたテキストを&lt;em&gt;ソース言語&lt;/em&gt;ファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="7cf59379107eb2f1e9f7b6aeeaba809aa6857254" translate="yes" xml:space="preserve">
          <source>Use the CLI to generate it.</source>
          <target state="translated">CLIを使って生成します。</target>
        </trans-unit>
        <trans-unit id="8226af003735bc615b4ebed923581797af4b5db5" translate="yes" xml:space="preserve">
          <source>Use the CLI to merge the finished translation files when building your app for one or more locales.</source>
          <target state="translated">1つまたは複数のロケール用のアプリをビルドする際に、CLIを使用して完成した翻訳ファイルをマージします。</target>
        </trans-unit>
        <trans-unit id="9784a04039a561954033d9fe973f0a4c5920fe5c" translate="yes" xml:space="preserve">
          <source>Use the HTML</source>
          <target state="translated">HTMLを使用します。</target>
        </trans-unit>
        <trans-unit id="5bbf6b5276a555599737d1dbfa3accbd3fb1e8c7" translate="yes" xml:space="preserve">
          <source>Use the ID in this previous-state object to differentiate between a newly created state and one returned to by a &lt;code&gt;popstate&lt;/code&gt; event, so that you can restore some remembered state, such as scroll position.</source>
          <target state="translated">この以前の状態オブジェクトのIDを使用して、新しく作成された状態と &lt;code&gt;popstate&lt;/code&gt; イベントによって返された状態を区別し、スクロール位置などの記憶された状態を復元できるようにします。</target>
        </trans-unit>
        <trans-unit id="ad47a1b288e517ce0effef6619c4c1531bfc33eb" translate="yes" xml:space="preserve">
          <source>Use the built-in &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;&lt;code&gt;AsyncPipe&lt;/code&gt;&lt;/a&gt; to accept an observable as input and subscribe to the input automatically. Without this pipe, your component code would have to subscribe to the observable to consume its values, extract the resolved values, expose them for binding, and unsubscribe when the observable is destroyed in order to prevent memory leaks. &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; is an impure pipe that saves boilerplate code in your component to maintain the subscription and keep delivering values from that observable as they arrive.</source>
          <target state="translated">組み込みの&lt;a href=&quot;../api/common/asyncpipe&quot;&gt; &lt;code&gt;AsyncPipe&lt;/code&gt; &lt;/a&gt;を使用して、オブザーバブルを入力として受け入れ、入力を自動的にサブスクライブします。このパイプがないと、コンポーネントコードは、オブザーバブルをサブスクライブしてその値を消費し、解決された値を抽出し、バインドのために公開し、メモリリークを防ぐためにオブザーバブルが破棄されたときにサブスクライブを解除する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; は、サブスクリプションを維持し、到着時に監視可能な値から値を配信し続けるために、コンポーネントにボイラープレートコードを保存する不純なパイプです。</target>
        </trans-unit>
        <trans-unit id="ef9afc5479b408292ddfb0e17196fc61151a2e25" translate="yes" xml:space="preserve">
          <source>Use the cart service</source>
          <target state="translated">カートサービスを利用する</target>
        </trans-unit>
        <trans-unit id="0db540616d56f52390a576fdc34c3c9b5df49407" translate="yes" xml:space="preserve">
          <source>Use the child's selector, here &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt;, as a directive within the parent component template.</source>
          <target state="translated">親コンポーネントテンプレート内のディレクティブとして、子のセレクター（ここでは &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt; ）を使用します。</target>
        </trans-unit>
        <trans-unit id="eecd35206481b79b7c4507d8f30817c32cca25ef" translate="yes" xml:space="preserve">
          <source>Use the component instance to set the value of the &lt;code&gt;favoriteColor&lt;/code&gt; property.</source>
          <target state="translated">コンポーネントインスタンスを使用して、 &lt;code&gt;favoriteColor&lt;/code&gt; プロパティの値を設定します。</target>
        </trans-unit>
        <trans-unit id="9d9ebb52ab384cbcfd61b51ce977015d8e0b30b7" translate="yes" xml:space="preserve">
          <source>Use the constructor of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; to set its initial value, which in this case is an empty string. By creating these controls in your component class, you get immediate access to listen for, update, and validate the state of the form input.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のコンストラクターを使用して、初期値（この場合は空の文字列）を設定します。これらのコントロールをコンポーネントクラスに作成することで、フォーム入力の状態をリッスン、更新、および検証するための即時アクセスを取得できます。</target>
        </trans-unit>
        <trans-unit id="e7587cbf004aad2b4e56b322cfef850309d1e76b" translate="yes" xml:space="preserve">
          <source>Use the default &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; strategy, in which change detection is automatic until explicitly deactivated.</source>
          <target state="translated">明示的に非アクティブ化されるまで変更の検出が自動的に行われる、デフォルトの &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; 戦略を使用します。</target>
        </trans-unit>
        <trans-unit id="9b84209d06a615494105c2cd31dacc65b8d1ec0c" translate="yes" xml:space="preserve">
          <source>Use the default &lt;code&gt;CheckAlways&lt;/code&gt; strategy, in which change detection is automatic until explicitly deactivated.</source>
          <target state="translated">デフォルトの &lt;code&gt;CheckAlways&lt;/code&gt; 戦略を使用します。この戦略では、明示的に非アクティブ化されるまで変更検出が自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="e9d590f11c718da330ccebceb5b8b2511c996779" translate="yes" xml:space="preserve">
          <source>Use the documentation to learn about key features in more depth, according to your stage of development and areas of interest.</source>
          <target state="translated">ドキュメントを使用して、開発段階や興味のある分野に応じて、キーとなる機能をより深く知ることができます。</target>
        </trans-unit>
        <trans-unit id="99d11f8688c1e1b1658b40526cee3f9f4dfd5fa0" translate="yes" xml:space="preserve">
          <source>Use the factory object to create an &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; and attach it to a DOM element.</source>
          <target state="translated">ファクトリオブジェクトを使用して &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; を作成し、DOM要素にアタッチします。</target>
        </trans-unit>
        <trans-unit id="7acbbdfbc6898fafd3430035744e606c15ea75ac" translate="yes" xml:space="preserve">
          <source>Use the following &lt;code&gt;extract-i18n&lt;/code&gt; command options to change the source language file location, format, and file name:</source>
          <target state="translated">次の &lt;code&gt;extract-i18n&lt;/code&gt; コマンドオプションを使用して、ソース言語ファイルの場所、形式、およびファイル名を変更します。</target>
        </trans-unit>
        <trans-unit id="09aee07ff0cbe6302c8871e0400bf8743cc280bd" translate="yes" xml:space="preserve">
          <source>Use the following content in the JavaScript configuration file.</source>
          <target state="translated">JavaScriptの設定ファイルでは、以下の内容を使用します。</target>
        </trans-unit>
        <trans-unit id="f1622d1a4ae3f19827df7745511b0e1bc132f843" translate="yes" xml:space="preserve">
          <source>Use the following steps to add a checkout form at the bottom of the &quot;Cart&quot; view.</source>
          <target state="translated">次の手順を使用して、「カート」ビューの下部にチェックアウトフォームを追加します。</target>
        </trans-unit>
        <trans-unit id="08882a68d2a6ab746f1170233fe9d5b9bc6e6af5" translate="yes" xml:space="preserve">
          <source>Use the following steps to add form validation.</source>
          <target state="translated">次の手順を使用して、フォームのバリデーションを追加します。</target>
        </trans-unit>
        <trans-unit id="955751dc319f679303c70fa0991bd8be5b91890a" translate="yes" xml:space="preserve">
          <source>Use the following steps to take advantage of this service.</source>
          <target state="translated">以下の手順でご利用ください。</target>
        </trans-unit>
        <trans-unit id="7e1c4b14a5abd7301b86d2981a9d5c9c7b2e3b27" translate="yes" xml:space="preserve">
          <source>Use the getter syntax to create an &lt;code&gt;aliases&lt;/code&gt; class property to retrieve the alias's form array control from the parent form group.</source>
          <target state="translated">ゲッター構文​​を使用して &lt;code&gt;aliases&lt;/code&gt; クラスプロパティを作成し、親フォームグループからエイリアスのフォーム配列コントロールを取得します。</target>
        </trans-unit>
        <trans-unit id="2b9f9c8bf8a06791c1b3d0e9f88f619639572ebe" translate="yes" xml:space="preserve">
          <source>Use the hash symbol (#) to declare a reference variable. The following reference variable, &lt;code&gt;#phone&lt;/code&gt;, declares a &lt;code&gt;phone&lt;/code&gt; variable on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">参照変数を宣言するには、ハッシュ記号（＃）を使用します。次の参照変数 &lt;code&gt;#phone&lt;/code&gt; は、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;phone&lt;/code&gt; 変数を宣言します。</target>
        </trans-unit>
        <trans-unit id="bc2bab9bb36109c9261e4e21e1209550f2534701" translate="yes" xml:space="preserve">
          <source>Use the largest version, including beta and RCs.</source>
          <target state="translated">ベータ版、RC版を含む最大のバージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="69d5a81a07b4469e551ea97e2cfdba24bee1b9a2" translate="yes" xml:space="preserve">
          <source>Use the lightweight injection token for API definition</source>
          <target state="translated">API定義に軽量インジェクショントークンを使用する</target>
        </trans-unit>
        <trans-unit id="a68d4930594481bd496a5d3065ddf5ac88c6c31d" translate="yes" xml:space="preserve">
          <source>Use the native encapsulation mechanism of the renderer. See &lt;a href=&quot;https://github.com/angular/angular/blob/3e992e18ebf51d6036818f26c3d77b52d3ec48eb/packages/core/src/metadata/view.ts#L32&quot;&gt;view.ts&lt;/a&gt;.</source>
          <target state="translated">レンダラーのネイティブのカプセル化メカニズムを使用します。&lt;a href=&quot;https://github.com/angular/angular/blob/3e992e18ebf51d6036818f26c3d77b52d3ec48eb/packages/core/src/metadata/view.ts#L32&quot;&gt;view.tsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84bc78fa2e78ed5dfdea31357fb98bf3bc73c6e3" translate="yes" xml:space="preserve">
          <source>Use the offline template compiler</source>
          <target state="translated">オフラインテンプレートコンパイラを使用する</target>
        </trans-unit>
        <trans-unit id="4e5c044a102c6e5b28de2adf47e3ca6799e2b720" translate="yes" xml:space="preserve">
          <source>Use the player object to control the animation programmatically.</source>
          <target state="translated">プログラムでアニメーションを制御するには、プレーヤーオブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="3760d8d459300900a0e3f01762ed9a4bffe52f69" translate="yes" xml:space="preserve">
          <source>Use the prerelease version, including beta and RCs.</source>
          <target state="translated">ベータやRCを含むプレリリース版を使用してください。</target>
        </trans-unit>
        <trans-unit id="33b6e8a56b6a428c4c11a0f9864e1086bde51fbc" translate="yes" xml:space="preserve">
          <source>Use the returned AngularJS module in a call to &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/function/angular.mock.module&quot;&gt;&lt;code&gt;angular.mocks.module&lt;/code&gt;&lt;/a&gt; to include this module in the unit test injector.</source>
          <target state="translated">返されたAngularJSモジュールを&lt;a href=&quot;https://docs.angularjs.org/api/ngMock/function/angular.mock.module&quot;&gt; &lt;code&gt;angular.mocks.module&lt;/code&gt; の&lt;/a&gt;呼び出しで使用して、このモジュールを単体テストインジェクターに含めます。</target>
        </trans-unit>
        <trans-unit id="5077e6c1fae00cd3872afeb69763760817a2633f" translate="yes" xml:space="preserve">
          <source>Use the returned class as an &quot;import&quot; when configuring the &lt;code&gt;&lt;a href=&quot;../../../core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../../core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を構成するときに、返されたクラスを「インポート」として使用します。</target>
        </trans-unit>
        <trans-unit id="da723cd932f5f79f6b8665dde136ba0626c258d9" translate="yes" xml:space="preserve">
          <source>Use the same command to create a second lazy-loaded feature module with routing, along with its stub component.</source>
          <target state="translated">同じコマンドを使用して、スタブコンポーネントと一緒に、ルーティングを備えた2つ目のレイジーロード機能モジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="68b4c7f1ae521c49637ab19099788a3f20c66452" translate="yes" xml:space="preserve">
          <source>Use the template reference variable, &lt;code&gt;#heroForm&lt;/code&gt; to access the form that contains the &lt;strong&gt;Submit&lt;/strong&gt; button and create an event binding. You will bind the form property that indicates its overall validity to the &lt;strong&gt;Submit&lt;/strong&gt; button's &lt;code&gt;disabled&lt;/code&gt; property.</source>
          <target state="translated">テンプレート参照変数 &lt;code&gt;#heroForm&lt;/code&gt; を使用して、[&lt;strong&gt;送信&lt;/strong&gt;]ボタンを含むフォームにアクセスし、イベントバインディングを作成します。全体的な有効性を示すフォームプロパティを[&lt;strong&gt;送信&lt;/strong&gt;]ボタンの &lt;code&gt;disabled&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="d1be55a191205536fb2fb08bd1548c8802cd4f7d" translate="yes" xml:space="preserve">
          <source>Use the type-guard properties to inform the template type checker of an expected type, thus improving compile-time type-checking for that template.</source>
          <target state="translated">type-guardプロパティを使用して、期待される型をテンプレートの型チェッカーに通知することで、そのテンプレートのコンパイル時の型チェックを改善します。</target>
        </trans-unit>
        <trans-unit id="e7ea2de74a92043d55f851bb691e02d30a346279" translate="yes" xml:space="preserve">
          <source>Use the wildcard &lt;code&gt;*&lt;/code&gt; with a style to tell the animation to use whatever the current style value is, and animate with that. Wildcard is a fallback value that's used if the state being animated isn't declared within the trigger.</source>
          <target state="translated">ワイルドカード &lt;code&gt;*&lt;/code&gt; をスタイルとともに使用して、現在のスタイル値が何であっても使用するようにアニメーションに指示し、それでアニメーション化します。ワイルドカードは、アニメーション化されている状態がトリガー内で宣言されていない場合に使用されるフォールバック値です。</target>
        </trans-unit>
        <trans-unit id="e31d6952c1ff1fd94a0e173b45067b6c83f34690" translate="yes" xml:space="preserve">
          <source>Use this API as the last resort when direct access to DOM is needed. Use templating and data-binding provided by Angular instead. Alternatively you can take a look at &lt;a href=&quot;renderer2&quot;&gt;&lt;code&gt;Renderer2&lt;/code&gt;&lt;/a&gt; which provides API that can safely be used even when direct access to native elements is not supported.</source>
          <target state="translated">このAPIは、DOMへの直接アクセスが必要な場合の最後の手段として使用してください。代わりに、Angularが提供するテンプレートおよびデータバインディングを使用してください。または、ネイティブ要素への直接アクセスがサポートされていない場合でも安全に使用できるAPIを提供する&lt;a href=&quot;renderer2&quot;&gt; &lt;code&gt;Renderer2&lt;/code&gt; &lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="66dc17561e140a926f2fa11ae753d9ec492fade0" translate="yes" xml:space="preserve">
          <source>Use this API to define how an HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each of these transformations. The function calls generate the data structures and metadata that enable Angular to integrate animations into templates and run them based on application states.</source>
          <target state="translated">この API を使用して、HTML 要素の移動、色の変更、成長、縮小、フェード、またはページからのスライドの仕方を定義します。これらの変更は、同時にまたは連続して行うことができます。これらの各変換のタイミングを制御することができます。関数呼び出しによってデータ構造とメタデータが生成され、Angularがアニメーションをテンプレートに統合し、アプリケーションの状態に基づいてアニメーションを実行できるようになります。</target>
        </trans-unit>
        <trans-unit id="239c77567c5a5ce0197bcc941ceca052e2b45d4e" translate="yes" xml:space="preserve">
          <source>Use this API to register directives, build form and data models, and provide validation to your forms. Validators can be synchronous or asynchronous depending on your use case. You can also extend the built-in functionality provided by forms in Angular by using the interfaces and tokens to create custom validators and input elements.</source>
          <target state="translated">この API を使用して、ディレクティブの登録、フォームやデータモデルの構築、フォームのバリデーションを行います。バリデータはユースケースに応じて同期または非同期のどちらでも構いません。また、インターフェイスやトークンを使ってカスタムバリデータや入力要素を作成することで、Angularのフォームが提供する組み込み機能を拡張することもできます。</target>
        </trans-unit>
        <trans-unit id="dffc59d3f3dd5402308a03cf88e120af4a6dc9b4" translate="yes" xml:space="preserve">
          <source>Use this directive to create a visual distinction for elements associated with an active route. For example, the following code highlights the word &quot;Bob&quot; when the the router activates the associated route:</source>
          <target state="translated">このディレクティブは、アクティブなルートに関連付けられた要素を視覚的に区別するために使用します。例えば、以下のコードは、ルータが関連するルートをアクティブにしたときに &quot;Bob&quot; という単語をハイライトしています。</target>
        </trans-unit>
        <trans-unit id="98648d6e7331cfddebf675e6e48d5ecfd58e4545" translate="yes" xml:space="preserve">
          <source>Use this directive to validate a sub-group of your form separately from the rest of your form, or if some values in your domain model make more sense to consume together in a nested object.</source>
          <target state="translated">このディレクティブを使って、フォームのサブグループをフォームの残りの部分とは別に検証したり、ドメインモデルの中のいくつかの値をネストされたオブジェクトにまとめて使用した方がより意味がある場合に使用します。</target>
        </trans-unit>
        <trans-unit id="c2f2d6d2eb1b9fd68f5d4923160640fa9a45cb27" translate="yes" xml:space="preserve">
          <source>Use this enum at bootstrap as an option of &lt;code&gt;bootstrapModule&lt;/code&gt; to define the strategy that the compiler should use in case of missing translations:</source>
          <target state="translated">オプションとして、ブートストラップで、この列挙型を使用し &lt;code&gt;bootstrapModule&lt;/code&gt; コンパイラが行方不明翻訳の場合には使用すべきであるという戦略を定義するには：</target>
        </trans-unit>
        <trans-unit id="f91861f9b1b35370d057dd7a059c665663e94008" translate="yes" xml:space="preserve">
          <source>Use this method to detect a change that Angular overlooked.</source>
          <target state="translated">このメソッドを使って、Angularが見落としていた変更を検出します。</target>
        </trans-unit>
        <trans-unit id="02a000c17e1eb4958b9423311364219b7482d859" translate="yes" xml:space="preserve">
          <source>Use this service to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use &lt;a href=&quot;renderer#setElementProperty&quot;&gt;setElementProperty&lt;/a&gt; or &lt;a href=&quot;renderer#setElementAttribute&quot;&gt;setElementAttribute&lt;/a&gt; respectively.</source>
          <target state="translated">このサービスを使用して、Angularのテンプレートをバイパスし、宣言的に表現できないカスタムUIの変更を行います。たとえば、静的に名前がわからないプロパティまたは属性を設定する必要がある場合は、それぞれ&lt;a href=&quot;renderer#setElementProperty&quot;&gt;setElementProperty&lt;/a&gt;または&lt;a href=&quot;renderer#setElementAttribute&quot;&gt;setElementAttributeを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="51dda038803b68b227c51a7dd1d4b365f5cd7449" translate="yes" xml:space="preserve">
          <source>Use this technique to create a dependency object with a factory function whose inputs are a combination of &lt;em&gt;injected services&lt;/em&gt; and &lt;em&gt;local state&lt;/em&gt;.</source>
          <target state="translated">この手法を使用して、入力が&lt;em&gt;注入されたサービス&lt;/em&gt;と&lt;em&gt;ローカル状態の&lt;/em&gt;組み合わせであるファクトリ関数を持つ依存関係オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b2f43a26151d902b04c11d0c3a3e3e04a2047274" translate="yes" xml:space="preserve">
          <source>Use this token at bootstrap to provide the content of your translation file (&lt;code&gt;xtb&lt;/code&gt;, &lt;code&gt;xlf&lt;/code&gt; or &lt;code&gt;xlf2&lt;/code&gt;) when you want to translate your application in another language.</source>
          <target state="translated">アプリケーションを別の言語に翻訳する場合は、ブートストラップでこのトークンを使用して、翻訳ファイル（ &lt;code&gt;xtb&lt;/code&gt; 、 &lt;code&gt;xlf&lt;/code&gt; または &lt;code&gt;xlf2&lt;/code&gt; ）のコンテンツを提供します。</target>
        </trans-unit>
        <trans-unit id="094736eaeca16e2bc6a94afbc3cacd046430016c" translate="yes" xml:space="preserve">
          <source>Use to find one or more inner HTML elements within the current element.</source>
          <target state="translated">現在の要素の中から1つ以上の内部HTML要素を見つけるために使用します。</target>
        </trans-unit>
        <trans-unit id="ceb45b9a9a131e5ceaa63ef67912c840118032d7" translate="yes" xml:space="preserve">
          <source>Use to get the &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; of elements or directives from the content DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</source>
          <target state="translated">コンテンツDOMから要素またはディレクティブの &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; を取得するために使用します。子要素が追加、削除、または移動されるたびに、クエリリストが更新され、クエリリストの監視可能な変更によって新しい値が生成されます。</target>
        </trans-unit>
        <trans-unit id="aaf7d01d8950aef25f0bf03d88c14b898cbfd099" translate="yes" xml:space="preserve">
          <source>Use to get the &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; of elements or directives from the view DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</source>
          <target state="translated">ビューDOMから要素またはディレクティブの &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; を取得するために使用します。子要素が追加、削除、または移動されるたびに、クエリリストが更新され、クエリリストの監視可能な変更によって新しい値が生成されます。</target>
        </trans-unit>
        <trans-unit id="51523185d9e70bc9258966c8eac5f9f38fa211f8" translate="yes" xml:space="preserve">
          <source>Use to get the first element or the directive matching the selector from the content DOM. If the content DOM changes, and a new child matches the selector, the property will be updated.</source>
          <target state="translated">コンテンツ DOM からセレクタにマッチする最初の要素やディレクティブを取得するために使用します。コンテンツ DOM が変更され、新しい子がセレクタにマッチした場合は、プロパティが更新されます。</target>
        </trans-unit>
        <trans-unit id="a87e5cd79cc9d650614c0174e0c297ada3478f25" translate="yes" xml:space="preserve">
          <source>Use to store arbitrary developer-defined data on a renderer instance, as an object containing key-value pairs. This is useful for renderers that delegate to other renderers.</source>
          <target state="translated">キーと値のペアを含むオブジェクトとして、レンダラー インスタンス上の任意の開発者定義データを格納するために使用します。これは、他のレンダラーに委任するレンダラーに便利です。</target>
        </trans-unit>
        <trans-unit id="e25c946e66827dc805dd24ff51d8ae7f98f6815b" translate="yes" xml:space="preserve">
          <source>Use with animations test-only mode. Notifies the test when rendering has completed.</source>
          <target state="translated">アニメーションのテスト専用モードで使用します。レンダリングが完了したときにテストを通知します。</target>
        </trans-unit>
        <trans-unit id="eca7e21232f973eab61af44da3d689a26c0f17dc" translate="yes" xml:space="preserve">
          <source>Use with caution</source>
          <target state="translated">注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="ef1c61aa074b0daa2467d00ee7659dad5f0b62ee" translate="yes" xml:space="preserve">
          <source>Use with ngModel</source>
          <target state="translated">ngModel との併用</target>
        </trans-unit>
        <trans-unit id="8c1b755d83aa0e3840c5adb2e2de9bdb212207ba" translate="yes" xml:space="preserve">
          <source>Use with ngModel is deprecated</source>
          <target state="translated">ngModel との併用は非推奨</target>
        </trans-unit>
        <trans-unit id="bddb8fbb30136aa27bb73ecdceb87cca98f6bcc9" translate="yes" xml:space="preserve">
          <source>Use with the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; call. Instead of applying animations from the current state to the destination state, keyframes describe how each style entry is applied and at what point within the animation arc. Compare &lt;a href=&quot;https://www.w3schools.com/css/css3_animations.asp&quot;&gt;CSS Keyframe Animations&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 呼び出しで使用します。キーフレームは、現在の状態から目的の状態にアニメーションを適用する代わりに、各スタイルエントリがどのように適用され、アニメーションアーク内のどの時点にあるかを示します。&lt;a href=&quot;https://www.w3schools.com/css/css3_animations.asp&quot;&gt;CSSキーフレームアニメーションを&lt;/a&gt;比較します。</target>
        </trans-unit>
        <trans-unit id="6d45dfd3ff2a81b444a5dc591b91dc8c66653e7e" translate="yes" xml:space="preserve">
          <source>Use within an animation &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; call to issue a timing gap after each queried item is animated.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 呼び出し内で使用して、クエリされた各アイテムがアニメーション化された後にタイミングギャップを発行します。</target>
        </trans-unit>
        <trans-unit id="652f99cdce6039c1c4c392a599facc0ac9d2adbf" translate="yes" xml:space="preserve">
          <source>Use within an animation &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; call to issue a timing gap after each queried item is animated.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 呼び出し内で使用して、クエリされた各アイテムがアニメーション化された後にタイミングギャップを発行します。</target>
        </trans-unit>
        <trans-unit id="b8859d06d9af44888d766f829a446792669e41bf" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; to associate custom rendering data and styles with a rendering implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; によって使用され、カスタムレンダリングデータとスタイルをレンダリング実装に関連付けます。</target>
        </trans-unit>
        <trans-unit id="94c0582398c2c0bb749ac544039ffb4bb01b9afa" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="60c65c08999202c9b804c2bf81c87ddaf0860f85" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; to associate custom rendering data and styles with a rendering implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; によって使用され、カスタムレンダリングデータとスタイルをレンダリング実装に関連付けます。</target>
        </trans-unit>
        <trans-unit id="6f7d0b82c6afb0f2e3b4d749e7cc7ac4a4f630d9" translate="yes" xml:space="preserve">
          <source>Used only in debug mode to serialize property changes to dom nodes as attributes.</source>
          <target state="translated">デバッグモードでのみ使用され、domノードへのプロパティ変更を属性としてシリアライズします。</target>
        </trans-unit>
        <trans-unit id="7005a105d0d69ea62d874ba99e5723ee092e0f01" translate="yes" xml:space="preserve">
          <source>Used only in generated code. No source code should depend on this API.</source>
          <target state="translated">生成されたコードでのみ使用されます。この API に依存するソースコードはありません。</target>
        </trans-unit>
        <trans-unit id="14a1cad3d2bd65cf489b11e28cb9d774f23a3e7d" translate="yes" xml:space="preserve">
          <source>Used to load ng module factories.</source>
          <target state="translated">ngモジュール工場のロードに使用します。</target>
        </trans-unit>
        <trans-unit id="f3e8b3ef8c7b0f5735596a0cecd6a98afb2da940" translate="yes" xml:space="preserve">
          <source>Used to mark Async start. Async are similar to scope but they don't have to be strictly nested. The return value is used in the call to [endAsync]. Async ranges only work if WTF has been enabled.</source>
          <target state="translated">Async の開始をマークするために使用します。Asyncはスコープと似ていますが、厳密に入れ子にする必要はありません。戻り値は [endAsync]の呼び出しで使用されます。Asyncの範囲はWTFが有効になっている場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="599d8de2a24b2f250ae7926588cacd259bc9a982" translate="yes" xml:space="preserve">
          <source>Used to mark end of Scope.</source>
          <target state="translated">スコープの終わりを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="e2c9ab424d315bb61a8d13d1e6541ce25bacbe35" translate="yes" xml:space="preserve">
          <source>Used to mark scope entry. The return value is used to leave the scope.</source>
          <target state="translated">スコープに入ったことをマークするために使用します。戻り値はスコープを抜けるときに使用します。</target>
        </trans-unit>
        <trans-unit id="b3503a2162dbb4997a5439b46fb2c2bf5478d21a" translate="yes" xml:space="preserve">
          <source>Used to provide a &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for form controls.</source>
          <target state="translated">フォームコントロールに &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; を提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6e34138b486124e172c27967e95851b105c53c11" translate="yes" xml:space="preserve">
          <source>Used to provide a &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for form controls.</source>
          <target state="translated">フォームコントロールに &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; を提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1c9a0ff249b4ff0367c0e831859d912df5989e4a" translate="yes" xml:space="preserve">
          <source>Used when AngularJS is loaded lazily, and not available on &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">AngularJSが遅延して読み込まれ、 &lt;code&gt;window&lt;/code&gt; では使用できない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="ede0702dd96ed53a5f498ecc6f5164f5530e76b2" translate="yes" xml:space="preserve">
          <source>Used with deprecated SystemJsNgModuleLoader.</source>
          <target state="translated">非推奨の SystemJsNgModuleLoader と一緒に使用します。</target>
        </trans-unit>
        <trans-unit id="8fcc9eb0d01cd2af8a401bb5fbad0ceddd4ebbd6" translate="yes" xml:space="preserve">
          <source>Useful tools and tips for Angular.</source>
          <target state="translated">Angularの便利なツールやTipsを紹介します。</target>
        </trans-unit>
        <trans-unit id="0b75d4ee12567b39421e5cdafacb9fdac3567042" translate="yes" xml:space="preserve">
          <source>User Input</source>
          <target state="translated">ユーザー入力</target>
        </trans-unit>
        <trans-unit id="602a8dcdba61fe963a2ee0eabfa7c6c12caef58a" translate="yes" xml:space="preserve">
          <source>User actions such as clicking a link, pushing a button, and entering text raise DOM events. This page explains how to bind those events to component event handlers using the Angular event binding syntax.</source>
          <target state="translated">リンクをクリックしたり、ボタンを押したり、テキストを入力したりといったユーザーアクションは DOM イベントを発生させます。このページでは、Angular のイベントバインディング構文を使って、それらのイベントをコンポーネントのイベントハンドラにバインドする方法を説明します。</target>
        </trans-unit>
        <trans-unit id="058b267dc9414eb566cadb188507382a9127c368" translate="yes" xml:space="preserve">
          <source>User events other than &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; clicks aren't supported. You must wait for the full client app to bootstrap and run, or buffer the events using libraries like &lt;a href=&quot;https://github.com/angular/preboot&quot;&gt;preboot&lt;/a&gt;, which allow you to replay these events once the client-side scripts load.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; クリック以外のユーザーイベントはサポートされていません。完全なクライアントアプリがブートストラップして実行されるまで待つか、&lt;a href=&quot;https://github.com/angular/preboot&quot;&gt;preboot&lt;/a&gt;などのライブラリを使用してイベントをバッファリングする必要があります。これにより、クライアント側のスクリプトが読み込まれたら、これらのイベントを再生できます。</target>
        </trans-unit>
        <trans-unit id="09099af5b046928eebce82ffe20cae42387454fa" translate="yes" xml:space="preserve">
          <source>User input</source>
          <target state="translated">ユーザー入力</target>
        </trans-unit>
        <trans-unit id="5141e17357a02f63be66086ece12a9f2d302df1e" translate="yes" xml:space="preserve">
          <source>Users can add, edit, and delete heroes and save these changes over HTTP.</source>
          <target state="translated">ユーザーは、ヒーローの追加、編集、削除を行い、これらの変更をHTTPで保存することができます。</target>
        </trans-unit>
        <trans-unit id="ffb71aafecac3c94302931b31f63e1168c9b1166" translate="yes" xml:space="preserve">
          <source>Users can click on a product name from the list to see details in a new view, with a distinct URL (route)</source>
          <target state="translated">ユーザーはリストから商品名をクリックすると、URL(ルート)を指定して新しいビューで詳細を見ることができます。</target>
        </trans-unit>
        <trans-unit id="9915fd34b105ae0d8f9b856eaf8cca5ea09bd3cd" translate="yes" xml:space="preserve">
          <source>Users can click on a product name from the list to see details in a new view, with a distinct URL/route.</source>
          <target state="translated">ユーザーは、リストから商品名をクリックすると、URL/ルートを指定して新しいビューで詳細を見ることができます。</target>
        </trans-unit>
        <trans-unit id="6701a88f4173410a6b0358f016f5ca47cd5c83bc" translate="yes" xml:space="preserve">
          <source>Users can opt in to share their Angular CLI usage data with &lt;a href=&quot;https://support.google.com/analytics/answer/1008015?hl=en&quot;&gt;Google Analytics&lt;/a&gt;, using the &lt;a href=&quot;https://angular.io/cli/analytics&quot;&gt;&lt;code&gt;ng analytics&lt;/code&gt; CLI command&lt;/a&gt;. The data is also shared with the Angular team, and used to improve the CLI.</source>
          <target state="translated">ユーザーは、&lt;a href=&quot;https://angular.io/cli/analytics&quot;&gt; &lt;code&gt;ng analytics&lt;/code&gt; &lt;/a&gt; CLIコマンドを使用して、Angular CLIの使用状況データを&lt;a href=&quot;https://support.google.com/analytics/answer/1008015?hl=en&quot;&gt;Googleアナリティクス&lt;/a&gt;と共有することを選択できます。データはAngularチームとも共有され、CLIの改善に使用されます。</target>
        </trans-unit>
        <trans-unit id="9f300cd0d7b9a4b1286d7eb15eb10210c5e6bec6" translate="yes" xml:space="preserve">
          <source>Users can search for heroes by name.</source>
          <target state="translated">ユーザーは、名前からヒーローを検索することができます。</target>
        </trans-unit>
        <trans-unit id="e75567a342e40c9e2e644d8dc12675b4ec829db5" translate="yes" xml:space="preserve">
          <source>Users should be able to edit the hero name in an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; textbox.</source>
          <target state="translated">ユーザーは、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; テキストボックスでヒーロー名を編集できる必要があります。</target>
        </trans-unit>
        <trans-unit id="7b3840d786e1f73b113066b49ab864de5ce34535" translate="yes" xml:space="preserve">
          <source>Users that visit your URL will see a development server start up, and then your application will load.</source>
          <target state="translated">あなたのURLにアクセスしたユーザーは、開発サーバーが起動し、アプリケーションがロードされるのを見ることができます。</target>
        </trans-unit>
        <trans-unit id="39302b04bcbaac9bc8c1d2667096f87cf5896e04" translate="yes" xml:space="preserve">
          <source>Users update crisis information in the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. Unlike the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, the user changes do not update the crisis entity immediately. Instead, the app updates the entity when the user presses the &lt;em&gt;Save&lt;/em&gt; button and discards the changes when the user presses the &lt;em&gt;Cancel&lt;/em&gt; button.</source>
          <target state="translated">ユーザーは &lt;code&gt;CrisisDetailComponent&lt;/code&gt; の危機情報を更新します。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; とは異なり、ユーザーを変更しても、危機的なエンティティはすぐには更新されません。代わりに、ユーザーが[ &lt;em&gt;保存&lt;/em&gt; ]ボタンを押すとアプリがエンティティを更新し、[ &lt;em&gt;キャンセル&lt;/em&gt; ]ボタンを押すと変更を破棄します。</target>
        </trans-unit>
        <trans-unit id="dd82ca7bb177e279e2683ea7fbe64334d04efc2f" translate="yes" xml:space="preserve">
          <source>Users update crisis information in the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. Unlike the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, the user changes do not update the crisis entity immediately. Instead, the app updates the entity when the user presses the Save button and discards the changes when the user presses the Cancel button.</source>
          <target state="translated">ユーザーは、 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; の危機情報を更新します。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; とは異なり、ユーザーの変更は危機エンティティをすぐには更新しません。代わりに、ユーザーが[保存]ボタンを押すとアプリがエンティティを更新し、ユーザーが[キャンセル]ボタンを押すと変更を破棄します。</target>
        </trans-unit>
        <trans-unit id="7e5352cba15d17c20f0a63d91386ede57619fc48" translate="yes" xml:space="preserve">
          <source>Users want to see the heroes in alphabetical order. Rather than modify the original component, sub-class it and create a &lt;code&gt;SortedHeroesComponent&lt;/code&gt; that sorts the heroes before presenting them. The &lt;code&gt;SortedHeroesComponent&lt;/code&gt; lets the base class fetch the heroes.</source>
          <target state="translated">ユーザーは英雄をアルファベット順に表示したいと考えています。元のコンポーネントを変更するのではなく、それを &lt;code&gt;SortedHeroesComponent&lt;/code&gt; し、ヒーローを表示する前にソートするSortedHeroesComponentを作成します。 &lt;code&gt;SortedHeroesComponent&lt;/code&gt; は、基本クラスが英雄をフェッチすることができます。</target>
        </trans-unit>
        <trans-unit id="c2f8c815cbd3d0f6b995bdfc4167eccf93e89835" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to determine which child view is entering and which is leaving the host view.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; を使用して、ホストビューに入る子ビューとホストビューから出る子ビューを判別します。</target>
        </trans-unit>
        <trans-unit id="31aea878b7cc6457d61c00c1a42726ffdd26bdea" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; function to make the inner animations run in parallel.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 関数を使用して、内部アニメーションを並行して実行します。</target>
        </trans-unit>
        <trans-unit id="eb3f711d4d463174e45d6d4d25298cf04c07c73e" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;XMLHttpRequest&lt;/code&gt; to send requests to a backend server.</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; を使用してリクエストをバックエンドサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="c06c023d5ad6ceae75abc64c08a60416cf72fe50" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;group()&lt;/code&gt; function to make the inner animations run in parallel.</source>
          <target state="translated">&lt;code&gt;group()&lt;/code&gt; 関数を使用して、内部アニメーションを並行して実行します。</target>
        </trans-unit>
        <trans-unit id="fb544a35f46de4fa74e1a77fac25ace9926dc2ca" translate="yes" xml:space="preserve">
          <source>Uses the cart service's &lt;code&gt;#addToCart()&lt;/code&gt; method to add the product to the cart</source>
          <target state="translated">カートサービスの &lt;code&gt;#addToCart()&lt;/code&gt; メソッドを使用して、商品をカートに追加します。</target>
        </trans-unit>
        <trans-unit id="d2251c5dbaa5b5863575212dbae0fac395c8eebf" translate="yes" xml:space="preserve">
          <source>Uses the cart service's &lt;code&gt;addToCart()&lt;/code&gt; method to add the product the cart.</source>
          <target state="translated">カートサービスの &lt;code&gt;addToCart()&lt;/code&gt; メソッドを使用して、商品をカートに追加します。</target>
        </trans-unit>
        <trans-unit id="26498e934159fe90edddba43e16fe5686239bbb3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;&lt;/a&gt; to group elements when there is no suitable host element for the directive.</source>
          <target state="translated">ディレクティブに適切なホスト要素がない場合に&lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; &lt;/a&gt;を使用して要素をグループ化します。</target>
        </trans-unit>
        <trans-unit id="dafc513bc116615d9bcd01ae37d00fbc6d71e7be" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; allows the TypeScript compiler to infer that the &lt;code&gt;person&lt;/code&gt; used in the binding expression will never be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; することことを推測するために活字体のコンパイラを許可する &lt;code&gt;person&lt;/code&gt; バインディング式で使用がするん &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2079239a97ead0b33bc251fc5c650a30d5b63e76" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="a1906205d52b88b6a96e74121a3dd7e6924f2137" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; with template variables</source>
          <target state="translated">テンプレート変数での &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="009d6972085fee6a31f1c55238d2601d61726d62" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; in a form gives you more than just two-way data binding. It also tells you if the user touched the control, if the value changed, or if the value became invalid.</source>
          <target state="translated">フォームで &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用すると、双方向のデータバインディングだけではありません。また、ユーザーがコントロールに触れたかどうか、値が変更されたかどうか、値が無効になったかどうかもわかります。</target>
        </trans-unit>
        <trans-unit id="ecb3202cb740968562d3700dc9265b6286e554ac" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; （）の使用</target>
        </trans-unit>
        <trans-unit id="b80bc244560b6471b5ebc73479dd0654103c5a79" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is a good option for hybrid apps when you want to keep the AngularJS and Angular parts less coupled. You can still mix and match components and services from both frameworks, but you might need to manually propagate change detection. In return, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; offers more control and better performance.</source>
          <target state="translated">AngularJSとAngularパーツの結合を少なくしたい場合、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用することはハイブリッドアプリに適したオプションです。両方のフレームワークのコンポーネントとサービスを混在させて一致させることはできますが、変更の検出を手動で伝達する必要がある場合があります。その代わりに、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; はより多くの制御とより良いパフォーマンスを提供します。</target>
        </trans-unit>
        <trans-unit id="2d82708ea292a262e61f2d5f8621ff178f8d5983" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; together</source>
          <target state="translated">使い方 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 一緒に</target>
        </trans-unit>
        <trans-unit id="055d132f35168e249d6c060c65dea4376f8745af" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;providedIn&lt;/code&gt;</source>
          <target state="translated">ProvidedInを使用 &lt;code&gt;providedIn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6804585becce9a56b0b6866a6f53fbbbc7e22fcc" translate="yes" xml:space="preserve">
          <source>Using AfterContent hooks</source>
          <target state="translated">AfterContentフックを使う</target>
        </trans-unit>
        <trans-unit id="74169e90061ae53df7dfd46eec63ac28d5d94ef4" translate="yes" xml:space="preserve">
          <source>Using Ahead-of-time compilation with hybrid apps</source>
          <target state="translated">ハイブリッドアプリでの先取りコンパイルの使用</target>
        </trans-unit>
        <trans-unit id="0f882c8db368aa93dcfdc9565b2fe479a0f65394" translate="yes" xml:space="preserve">
          <source>Using Angular Components from AngularJS Code</source>
          <target state="translated">AngularJSのコードからAngularコンポーネントを使う</target>
        </trans-unit>
        <trans-unit id="538fdb75e4407ef4e1f9fd247aecd6cb930a0109" translate="yes" xml:space="preserve">
          <source>Using Angular routes in a single-page application</source>
          <target state="translated">シングルページのアプリケーションでAngularのルートを使用する</target>
        </trans-unit>
        <trans-unit id="23d76136981acebe9548a54e9f89615171752fe2" translate="yes" xml:space="preserve">
          <source>Using Angular with Visual Studio 2015</source>
          <target state="translated">Visual Studio 2015でAngularを使う</target>
        </trans-unit>
        <trans-unit id="17c25861439c77e4c24ac7b18b709a16ebcd8414" translate="yes" xml:space="preserve">
          <source>Using AngularJS Component Directives from Angular Code</source>
          <target state="translated">AngularコードからAngularJSのコンポーネントディレクティブを使う</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
