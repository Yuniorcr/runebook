<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="94b7d838e156ba687705d55bf53cfaea0e2c0706" translate="yes" xml:space="preserve">
          <source>An options object containing developer-defined parameters that provide styling defaults and can be overridden on invocation.</source>
          <target state="translated">開発者が定義したパラメータを含むオプションオブジェクトで、 これはスタイリングのデフォルトを提供し、 呼び出し時にオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="003f413ea648a113813256191625bc45b897caef" translate="yes" xml:space="preserve">
          <source>An options object that can contain a delay value for the start of the animation, and additional developer-defined parameters. Provided values for additional parameters are used as defaults, and override values can be passed to the caller on invocation.</source>
          <target state="translated">アニメーションの開始時の遅延値と、開発者定義の追加パラメータを含むことができるオプションオブジェクト。追加のパラメータに指定された値がデフォルトとして使用され、呼び出し時にオーバーライドされた値を呼び出し元に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="69da736740d2be7cce09038dd8384329068cb27f" translate="yes" xml:space="preserve">
          <source>An options object that can contain a delay value for the start of the animation, and additional override values for developer-defined parameters.</source>
          <target state="translated">アニメーションの開始時の遅延値と、開発者定義のパラメータのオーバーライド値を指定できるオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="eb15eab209a0162e90e8de577b3e4f749717a52f" translate="yes" xml:space="preserve">
          <source>An options object that determines how the URL should be constructed or interpreted.</source>
          <target state="translated">URL がどのように構築されるか、あるいは解釈されるかを決定するオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f2ba026d039587baf26944d77bd6fbe6191f4188" translate="yes" xml:space="preserve">
          <source>An options object. Use the 'limit' field to limit the total number of items to collect.</source>
          <target state="translated">オプションオブジェクト。limit' フィールドを使用して、収集するアイテムの総数を制限します。</target>
        </trans-unit>
        <trans-unit id="2b8661ad4d0353fe1ca3345139fe01a98c998165" translate="yes" xml:space="preserve">
          <source>An outgoing HTTP request with an optional typed body.</source>
          <target state="translated">オプションの型付きボディを持つ送信 HTTP リクエスト。</target>
        </trans-unit>
        <trans-unit id="2b3e6f58b8017320fb8ad2d620bfa5f840b529df" translate="yes" xml:space="preserve">
          <source>An unmodifiable list of items that Angular keeps up to date when the state of the application changes.</source>
          <target state="translated">アプリケーションの状態が変化したときにAngularが最新の状態に保つ、変更不可能な項目のリストです。</target>
        </trans-unit>
        <trans-unit id="b0c610b5f38365ac89cc6b28fe1af7503fdd6a36" translate="yes" xml:space="preserve">
          <source>An unrelated error causes the service worker to enter safe mode; that is, temporary deactivation.</source>
          <target state="translated">関連性のないエラーにより、サービスワーカーがセーフモードに入る、つまり一時的に無効化される。</target>
        </trans-unit>
        <trans-unit id="cc3c9eefabc7f0cea08522cde34fd4642d6273a0" translate="yes" xml:space="preserve">
          <source>An unsurprising observation for a demo. To be honest, jazzing it up won't teach you anything new about forms. But this is an opportunity to exercise some of your newly won binding skills. If you aren't interested, skip to this page's conclusion.</source>
          <target state="translated">デモにしては意外な観察。正直言って、それをジャジーにしても、フォームについての新しいことは何も教えてくれません。しかし、これはあなたの新たに獲得したバインディングのスキルのいくつかを行使する機会です。興味のない方は、このページの最後まで読み飛ばしてください。</target>
        </trans-unit>
        <trans-unit id="452cffe88932ae77fe68dbf055515d671319274e" translate="yes" xml:space="preserve">
          <source>An upgraded component may also have inputs and outputs, as defined by the scope/controller bindings of the original AngularJS component directive. When you use the component from an Angular template, provide the inputs and outputs using &lt;strong&gt;Angular template syntax&lt;/strong&gt;, observing the following rules:</source>
          <target state="translated">アップグレードされたコンポーネントには、元のAngularJSコンポーネントディレクティブのスコープ/コントローラーバインディングで定義されているように、入力と出力がある場合もあります。Angularテンプレートのコンポーネントを使用する場合は、&lt;strong&gt;Angularテンプレート構文&lt;/strong&gt;を使用して入力と出力を提供し、次の規則に従ってください。</target>
        </trans-unit>
        <trans-unit id="c32307f2c480f6053e5eabae11932dca1c5bd1fb" translate="yes" xml:space="preserve">
          <source>An upload progress event was received.</source>
          <target state="translated">アップロード進捗イベントを受信しました。</target>
        </trans-unit>
        <trans-unit id="3ecd206c90170f8ae7938d7cd6bd36735ba58063" translate="yes" xml:space="preserve">
          <source>An upload progress event.</source>
          <target state="translated">アップロード進行イベント。</target>
        </trans-unit>
        <trans-unit id="e2e2a215be86f3d1acdd9e0d7a47d98ae4b62c70" translate="yes" xml:space="preserve">
          <source>Anchor element that specifies the location of this container in the containing view. Each view container can have only one anchor element, and each anchor element can have only a single view container.</source>
          <target state="translated">含むビューにおけるこのコンテナの位置を指定するアンカー要素。各ビューコンテナは、アンカー要素を1つだけ持つことができ、各アンカー要素は1つのビューコンテナだけを持つことができます。</target>
        </trans-unit>
        <trans-unit id="b5d76a3a5f5caf5269f66c1a65575cf3b3e26baf" translate="yes" xml:space="preserve">
          <source>Anchor scrolling does not happen on 'popstate'. Instead, we restore the position that we stored or scroll to the top.</source>
          <target state="translated">アンカースクロールは'popstate'上では発生しません。その代わりに、保存した位置を元に戻すか、トップにスクロールします。</target>
        </trans-unit>
        <trans-unit id="a307a637b89fe16e9922778e99bea2ed2e8e496b" translate="yes" xml:space="preserve">
          <source>Anchors</source>
          <target state="translated">Anchors</target>
        </trans-unit>
        <trans-unit id="f51084cd80a34108fd5adb4fd8ede43309c33705" translate="yes" xml:space="preserve">
          <source>And because this component is being used from the AngularJS module, and is an entry point into the Angular application, you must add it to the &lt;code&gt;entryComponents&lt;/code&gt; for the NgModule.</source>
          <target state="translated">また、このコンポーネントはAngularJSモジュールから使用され、Angularアプリケーションへのエントリーポイントであるため、 &lt;code&gt;entryComponents&lt;/code&gt; 追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="220dca1fbf38afa8fcb52d2808f50aad1904d032" translate="yes" xml:space="preserve">
          <source>And both together:</source>
          <target state="translated">そして両方とも一緒に。</target>
        </trans-unit>
        <trans-unit id="4cb748fd250adc2e2b24d881d384cd3f1ceeff26" translate="yes" xml:space="preserve">
          <source>And for the phone list component, a few adjustments to the router make the &lt;code&gt;RouteLink&lt;/code&gt; directives work.</source>
          <target state="translated">また、電話リストコンポーネントの場合、ルーターへのいくつかの調整により、 &lt;code&gt;RouteLink&lt;/code&gt; ディレクティブが機能します。</target>
        </trans-unit>
        <trans-unit id="029ba4666a2a6cfed9bf04394f2a405b66d1d323" translate="yes" xml:space="preserve">
          <source>And here are some tests:</source>
          <target state="translated">そして、いくつかのテストをご紹介します。</target>
        </trans-unit>
        <trans-unit id="fffb5f839ebabc375dc3442fb647c4f7c7a16fe5" translate="yes" xml:space="preserve">
          <source>And here's how you could use it with a different parent type.</source>
          <target state="translated">そして、親のタイプを変えて使う方法がこちら。</target>
        </trans-unit>
        <trans-unit id="726041286efb6514f4d5c48dff50434ecdff60e6" translate="yes" xml:space="preserve">
          <source>And if the first segment begins with &lt;code&gt;../&lt;/code&gt;, the router will go up one level.</source>
          <target state="translated">また、最初のセグメントが &lt;code&gt;../&lt;/code&gt; で始まる場合、ルーターは1レベル上がります。</target>
        </trans-unit>
        <trans-unit id="ace9fdb010266cfc5897288d4e8cb9c930bc595b" translate="yes" xml:space="preserve">
          <source>And in some case, we don't want to trigger the new macro task when ticking, we can use &lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;(milliseconds, {processNewMacroTasksSynchronously: false})&lt;/code&gt; to not invoke new macro task.</source>
          <target state="translated">また、場合によっては、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick&lt;/a&gt;(milliseconds, {processNewMacroTasksSynchronously: false})&lt;/code&gt; 時に新しいマクロタスクをトリガーしたくない場合は、ティック（milliseconds、{processNewMacroTasksSynchronously：false}）を使用して新しいマクロタスクを呼び出さないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="581486c9bdaa42d9745149011abbcef5b3d346e8" translate="yes" xml:space="preserve">
          <source>And in the earlier versions of &lt;code&gt;Angular&lt;/code&gt;, the following files were imported or added in your html file:</source>
          <target state="translated">また、 &lt;code&gt;Angular&lt;/code&gt; の以前のバージョンでは、次のファイルがHTMLファイルにインポートまたは追加されました。</target>
        </trans-unit>
        <trans-unit id="b2274e10984bdcfe61fe3f96ba22a2a4c56b464e" translate="yes" xml:space="preserve">
          <source>And in the same file, add it to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;declarations&lt;/code&gt; array:</source>
          <target state="translated">同じファイルで、それを &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;declarations&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="514df4d7b03eb7b4bff57e5cc4c1f60e85c21481" translate="yes" xml:space="preserve">
          <source>And later the value can be read from the router through &lt;code&gt;router.getCurrentNavigation&lt;/code&gt;. For example, to capture the &lt;code&gt;tracingId&lt;/code&gt; above during the &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="translated">そして後で、 &lt;code&gt;router.getCurrentNavigation&lt;/code&gt; を通じてルーターから値を読み取ることができます。たとえば、 &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; イベント中に上記の &lt;code&gt;tracingId&lt;/code&gt; をキャプチャするには：</target>
        </trans-unit>
        <trans-unit id="ba55a85734b9b1212d4da61228070f47cd0a644b" translate="yes" xml:space="preserve">
          <source>And since you are routing to &lt;code&gt;PhoneListComponent&lt;/code&gt; and &lt;code&gt;PhoneDetailComponent&lt;/code&gt; directly rather than using a route template with a &lt;code&gt;&amp;lt;phone-list&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;phone-detail&amp;gt;&lt;/code&gt; tag, you can do away with their Angular selectors as well.</source>
          <target state="translated">また、 &lt;code&gt;&amp;lt;phone-list&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;phone-detail&amp;gt;&lt;/code&gt; タグまたは&amp;lt;phone-detail&amp;gt;タグを持つルートテンプレートを使用するのではなく、 &lt;code&gt;PhoneListComponent&lt;/code&gt; および &lt;code&gt;PhoneDetailComponent&lt;/code&gt; に直接ルーティングするため、Angular セレクターも不要です。</target>
        </trans-unit>
        <trans-unit id="661c680937dcc4b25a3517246569dc41b5dcad75" translate="yes" xml:space="preserve">
          <source>And that is all you need to do to get the full benefit of AOT for hybrid Angular apps.</source>
          <target state="translated">そして、それだけでハイブリッドAngularアプリのAOTの恩恵を存分に受けることができます。</target>
        </trans-unit>
        <trans-unit id="fe495daae12d4210a639f103ea132191cdb68bc6" translate="yes" xml:space="preserve">
          <source>And that's all you need do to get the full benefit of AOT for Angular apps!</source>
          <target state="translated">そして、それだけでAngularアプリのAOTの恩恵を存分に受けることができるのです</target>
        </trans-unit>
        <trans-unit id="4d279d81a0c6f6d0a1bd9ed9c92b0938afbbfc7a" translate="yes" xml:space="preserve">
          <source>And that's all you need to use AOT while upgrading your app!</source>
          <target state="translated">そして、アプリをバージョンアップしながらAOTを使うのはこれだけでOK!</target>
        </trans-unit>
        <trans-unit id="f94852fb7b378d191158016d057691422128d0e7" translate="yes" xml:space="preserve">
          <source>And the second is the phone links spec:</source>
          <target state="translated">そして2つ目はフォンリンクスのスペックです。</target>
        </trans-unit>
        <trans-unit id="a104acccd6d3a8c8cdd1533ec92d99aac644c44f" translate="yes" xml:space="preserve">
          <source>And you can also &lt;a href=&quot;pipes#parameterizing-a-pipe&quot;&gt;apply parameters&lt;/a&gt; to a pipe:</source>
          <target state="translated">また、パイプに&lt;a href=&quot;pipes#parameterizing-a-pipe&quot;&gt;パラメータ&lt;/a&gt;を適用することもできます。</target>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="8e09000e5c2a6bef346596ec2e0dec0fbf7495a6" translate="yes" xml:space="preserve">
          <source>Angular</source>
          <target state="translated">Angular</target>
        </trans-unit>
        <trans-unit id="9ce4e3444001628938f2114d22cede0cbf3a7345" translate="yes" xml:space="preserve">
          <source>Angular &lt;code&gt;NgModule&lt;/code&gt; names</source>
          <target state="translated">Angular &lt;code&gt;NgModule&lt;/code&gt; 名</target>
        </trans-unit>
        <trans-unit id="1f6360f096ca639bc12a094822b3c9d70dfbe98f" translate="yes" xml:space="preserve">
          <source>Angular &lt;code&gt;TestBed&lt;/code&gt;</source>
          <target state="translated">Angular &lt;code&gt;TestBed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="006832a598bcc0cfd1bccafa8c1be8086583b93a" translate="yes" xml:space="preserve">
          <source>Angular &lt;em&gt;NgModules&lt;/em&gt; differ from and complement JavaScript (ES2015) modules. An NgModule declares a compilation context for a set of components that is dedicated to an application domain, a workflow, or a closely related set of capabilities. An NgModule can associate its components with related code, such as services, to form functional units.</source>
          <target state="translated">Angular &lt;em&gt;NgModuleは&lt;/em&gt; JavaScript（ES2015）モジュールとは異なり、補完します。NgModuleは、アプリケーションドメイン、ワークフロー、または密接に関連する一連の機能専用の一連のコンポーネントのコンパイルコンテキストを宣言します。NgModuleは、コンポーネントをサービスなどの関連コードに関連付けて、機能単位を形成できます。</target>
        </trans-unit>
        <trans-unit id="3a90be85a404ed076f232eda66f6c97b3763ffdd" translate="yes" xml:space="preserve">
          <source>Angular &lt;em&gt;TestBed&lt;/em&gt;</source>
          <target state="translated">Angular &lt;em&gt;TestBed&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53cd3baaa80c39be7dbd5ce81eccbf14c1556192" translate="yes" xml:space="preserve">
          <source>Angular &lt;strong&gt;pipes&lt;/strong&gt; provide formatting and transformation for data in the template, similar to AngularJS &lt;strong&gt;filters&lt;/strong&gt;. Many of the built-in filters in AngularJS have corresponding pipes in Angular. For more information on pipes, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">AngularJS &lt;strong&gt;フィルター&lt;/strong&gt;と同様に、角度&lt;strong&gt;パイプ&lt;/strong&gt;はテンプレート内のデータのフォーマットと変換を提供します。AngularJSの組み込みフィルターの多くには、Angularに対応するパイプがあります。パイプの詳細については、参照&lt;a href=&quot;pipes&quot;&gt;パイプを&lt;/a&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4edf38643031effae8215b553b7b9f34ca0029f" translate="yes" xml:space="preserve">
          <source>Angular CLI</source>
          <target state="translated">アンギュラーCLI</target>
        </trans-unit>
        <trans-unit id="1da97b715125a7200320cdfe21476ab138911186" translate="yes" xml:space="preserve">
          <source>Angular CLI Builders</source>
          <target state="translated">Angular CLIビルダー</target>
        </trans-unit>
        <trans-unit id="3653bc26169ea2a82f0e32bcc7ee3413e62dae01" translate="yes" xml:space="preserve">
          <source>Angular CLI builders</source>
          <target state="translated">Angular CLIビルダー</target>
        </trans-unit>
        <trans-unit id="4bb2c93eefe07b05ec8b83738295b287544a8994" translate="yes" xml:space="preserve">
          <source>Angular Components Overview</source>
          <target state="translated">Angularコンポーネントの概要</target>
        </trans-unit>
        <trans-unit id="0b62b52e382c94a5e31cfe2e45350c0ad57bfde2" translate="yes" xml:space="preserve">
          <source>Angular DI has a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;hierarchical injection system&lt;/a&gt;, which means that nested injectors can create their own service instances. Angular regularly creates nested injectors. Whenever Angular creates a new instance of a component that has &lt;code&gt;providers&lt;/code&gt; specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;, it also creates a new &lt;em&gt;child injector&lt;/em&gt; for that instance. Similarly, when a new NgModule is lazy-loaded at run time, Angular can create an injector for it with its own providers.</source>
          <target state="translated">Angular DIには&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;階層的なインジェクションシステム&lt;/a&gt;があります。つまり、ネストされたインジェクターは独自のサービスインスタンスを作成できます。Angularは定期的にネストされたインジェクターを作成します。Angularが &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）で指定された &lt;code&gt;providers&lt;/code&gt; を持つコンポーネントの新しいインスタンスを作成するときはいつでも、そのインスタンスの新しい&lt;em&gt;子インジェクター&lt;/em&gt;も作成します。同様に、新しいNgModuleが実行時に遅延ロードされると、Angularは独自のプロバイダーを使用してそのためのインジェクターを作成できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b6f10f0e075446afd6bd0316044e6433708768b2" translate="yes" xml:space="preserve">
          <source>Angular Documentation</source>
          <target state="translated">Angularのドキュメント</target>
        </trans-unit>
        <trans-unit id="f800173505ee0bcc1b11e1ddf36ce8a030dd7494" translate="yes" xml:space="preserve">
          <source>Angular Documentation Style Guide</source>
          <target state="translated">Angularドキュメントスタイルガイド</target>
        </trans-unit>
        <trans-unit id="4656edbf91cfa36158075026931a11032cead650" translate="yes" xml:space="preserve">
          <source>Angular Elements Overview</source>
          <target state="translated">Angular Elements の概要</target>
        </trans-unit>
        <trans-unit id="a712d3ddcf5a40d1f3dbf3886b04c348fc777701" translate="yes" xml:space="preserve">
          <source>Angular Ivy</source>
          <target state="translated">アンギュラーアイビー</target>
        </trans-unit>
        <trans-unit id="e07038b6aad22461ee7bae9dc2b45c7a7c2e2daf" translate="yes" xml:space="preserve">
          <source>Angular JSONP requests return an &lt;code&gt;Observable&lt;/code&gt;. Follow the pattern for subscribing to observables and use the RxJS &lt;code&gt;map&lt;/code&gt; operator to transform the response before using the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async pipe&lt;/a&gt; to manage the results.</source>
          <target state="translated">Angular JSONPリクエストは &lt;code&gt;Observable&lt;/code&gt; を返します。オブザーバブルをサブスクライブするパターンに従い、&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;非同期パイプ&lt;/a&gt;を使用して結果を管理する前に、RxJS &lt;code&gt;map&lt;/code&gt; 演算子を使用して応答を変換します。</target>
        </trans-unit>
        <trans-unit id="cc9d2d14b4723cc3db1775007d3a69846afb3014" translate="yes" xml:space="preserve">
          <source>Angular Labs</source>
          <target state="translated">アンギュラーラボ</target>
        </trans-unit>
        <trans-unit id="9e7a56e64dea1098d28d55765096fc618a9b8502" translate="yes" xml:space="preserve">
          <source>Angular Labs is an initiative to cultivate new features and iterate on them quickly. Angular Labs provides a safe place for exploration and experimentation by the Angular team.</source>
          <target state="translated">Angular Labsは、新しい機能を育成し、迅速にイテレーションを行うための取り組みです。Angular Labsは、Angularチームによる探索と実験のための安全な場所を提供します。</target>
        </trans-unit>
        <trans-unit id="b00d2c229068abc17cff954895b39cdc3bf5ff0d" translate="yes" xml:space="preserve">
          <source>Angular Labs projects are not ready for production use, and no commitment is made to bring them to production. The policies and practices that are described in this document do not apply to Angular Labs projects.</source>
          <target state="translated">Angular Labs のプロジェクトは本番環境で使用する準備ができておらず、本番環境で使用することを約束するものではありません。このドキュメントに記載されているポリシーやプラクティスは Angular Labs プロジェクトには適用されません。</target>
        </trans-unit>
        <trans-unit id="14af2b4bd0445fb663d36a7aa76d50d4caa6816b" translate="yes" xml:space="preserve">
          <source>Angular Language Service</source>
          <target state="translated">Angular Language サービス</target>
        </trans-unit>
        <trans-unit id="72a9af2d40cd0cddac1ab7c8148463ece8b5ffc7" translate="yes" xml:space="preserve">
          <source>Angular Language Service in your editor</source>
          <target state="translated">エディタでのAngular言語サービス</target>
        </trans-unit>
        <trans-unit id="b73e3a2a2136a6a52f2f163943dedb823749ad44" translate="yes" xml:space="preserve">
          <source>Angular Language Service is currently available as an extension for &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&quot;https://www.jetbrains.com/webstorm&quot;&gt;WebStorm&lt;/a&gt;, and &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;.</source>
          <target state="translated">Angular Language Serviceは現在、&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;、&lt;a href=&quot;https://www.jetbrains.com/webstorm&quot;&gt;WebStorm&lt;/a&gt;、および&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Textの&lt;/a&gt;拡張機能として利用できます。</target>
        </trans-unit>
        <trans-unit id="23326d8b3d91491eb282a0110a38cbdd0d630fcc" translate="yes" xml:space="preserve">
          <source>Angular Material, for example, supplies generation schematics for the UI components that it defines. The following command uses one of these schematics to render an Angular Material &lt;code&gt;&amp;lt;mat-table&amp;gt;&lt;/code&gt; that is pre-configured with a datasource for sorting and pagination.</source>
          <target state="translated">たとえば、Angular Materialは、それが定義するUIコンポーネントの生成回路図を提供します。次のコマンドは、これらの回路図の1つを使用して、並べ替えとページ付けのためにデータソースで事前構成されたAngular Material &lt;code&gt;&amp;lt;mat-table&amp;gt;&lt;/code&gt; をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="eb970b461e5095261dfad388a7452d357e39a442" translate="yes" xml:space="preserve">
          <source>Angular Push Notifications</source>
          <target state="translated">Angularのプッシュ通知</target>
        </trans-unit>
        <trans-unit id="5abfa4de29cb28a07c1f78cb93d892d7047d5f4b" translate="yes" xml:space="preserve">
          <source>Angular Roadmap</source>
          <target state="translated">Angularのロードマップ</target>
        </trans-unit>
        <trans-unit id="cc237f83efa1a2b5e00294a0bdae42196f8db9d6" translate="yes" xml:space="preserve">
          <source>Angular UI components</source>
          <target state="translated">Angular UIコンポーネント</target>
        </trans-unit>
        <trans-unit id="ace4d235cf67a63f6410e00d7c53d4995b98a87e" translate="yes" xml:space="preserve">
          <source>Angular Universal can generate a static version of your app that is easily searchable, linkable, and navigable without JavaScript. Universal also makes a site preview available since each URL returns a fully rendered page.</source>
          <target state="translated">Angular Universalは、JavaScriptを使わずに簡単に検索、リンク、ナビゲーションが可能な静的バージョンのアプリを生成することができます。また、各URLは完全にレンダリングされたページを返すので、Universalはサイトプレビューも利用可能にします。</target>
        </trans-unit>
        <trans-unit id="03a5c1283a3b0775a44e17725d52243197c5b04f" translate="yes" xml:space="preserve">
          <source>Angular Versioning and Releases</source>
          <target state="translated">Angularのバージョン管理とリリース</target>
        </trans-unit>
        <trans-unit id="a8e46db497a411dfa77cebcd5f020de2e1dd9c9a" translate="yes" xml:space="preserve">
          <source>Angular Workspace Configuration</source>
          <target state="translated">Angularワークスペースの設定</target>
        </trans-unit>
        <trans-unit id="cec48440aa352f69975cc33a6148da27d5bd34ec" translate="yes" xml:space="preserve">
          <source>Angular adds &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; to the application root injector, unless the NgModule is lazy-loaded. For a lazy-loaded NgModule, Angular creates a &lt;em&gt;child injector&lt;/em&gt; and adds the module's providers to the child injector.</source>
          <target state="translated">Angularは、NgModuleがレイジーロードされていない限り、アプリケーションルートインジェクターに &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; を追加します。遅延ロードされたNgModuleの場合、Angularは&lt;em&gt;子インジェクター&lt;/em&gt;を作成し、モジュールのプロバイダーを&lt;em&gt;子インジェクター&lt;/em&gt;に追加します。</target>
        </trans-unit>
        <trans-unit id="8e142da275e31e83a34423dee09ae7d117ad91d6" translate="yes" xml:space="preserve">
          <source>Angular adds a decorator to the component class to provide any required metadata. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator declares that the class is a component and provides metadata about that component such as its selector (or tag) and its template.</source>
          <target state="translated">Angularは必要なメタデータを提供するためにコンポーネントクラスにデコレータを追加します。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータクラスがコンポーネントであり、そのセレクタ（またはタグ）およびその鋳型としてそのコンポーネントように関するメタデータを提供することを宣言する。</target>
        </trans-unit>
        <trans-unit id="aca3ec94d9d835e1ed7052f9071ac32c46856347" translate="yes" xml:space="preserve">
          <source>Angular adds a directive to the injector of the element to which it is applied. The test for the default color uses the injector of the second &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; to get its &lt;code&gt;HighlightDirective&lt;/code&gt; instance and its &lt;code&gt;defaultColor&lt;/code&gt;.</source>
          <target state="translated">Angularは、それが適用される要素のインジェクターにディレクティブを追加します。デフォルトの色のテストでは、2番目の &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; のインジェクターを使用して、 &lt;code&gt;HighlightDirective&lt;/code&gt; インスタンスと &lt;code&gt;defaultColor&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="da8913da0b293e00f59a47b8577bbaab64befa70" translate="yes" xml:space="preserve">
          <source>Angular adds certain components to &lt;em&gt;entry components&lt;/em&gt; automatically. Components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; are added automatically. Components referenced in router configuration are added automatically. These two mechanisms account for almost all entry components.</source>
          <target state="translated">Angularは、特定のコンポーネントを&lt;em&gt;エントリーコンポーネントに&lt;/em&gt;自動的に追加します。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; リストされているコンポーネントは自動的に追加されます。ルーター構成で参照されるコンポーネントは自動的に追加されます。これら2つのメカニズムは、ほとんどすべてのエントリコンポーネントを占めます。</target>
        </trans-unit>
        <trans-unit id="f50aee85f7427b0f3d13af1fcaba2844470cacc5" translate="yes" xml:space="preserve">
          <source>Angular already contains locale data for &lt;code&gt;en-US&lt;/code&gt;. The Angular CLI automatically includes the locale data and sets the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; value when you use the &lt;code&gt;--localize&lt;/code&gt; option with &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Angularにはすでに &lt;code&gt;en-US&lt;/code&gt; のロケールデータが含まれています。Angular CLIは、&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;--localize&lt;/code&gt; オプションを使用すると、ロケールデータを自動的に含め、 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 値を設定します。</target>
        </trans-unit>
        <trans-unit id="8180ba453d2cdcbd2ab6f26a1150063377e78bc1" translate="yes" xml:space="preserve">
          <source>Angular also extracts alternate &lt;code&gt;select&lt;/code&gt; ICU expressions as separate translation units. The following shows a &lt;code&gt;select&lt;/code&gt; ICU expression in the component template:</source>
          <target state="translated">Angularは、代替の &lt;code&gt;select&lt;/code&gt; ICU式を個別の変換単位として抽出します。以下に、コンポーネントテンプレートのselectICU式を示し &lt;code&gt;select&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1bfaa4d4afc1fe6d25c5ea40750798df1ebd8735" translate="yes" xml:space="preserve">
          <source>Angular also has &lt;strong&gt;class binding&lt;/strong&gt;, which is a good way to add or remove a single class, as shown in the third example.</source>
          <target state="translated">Angularには&lt;strong&gt;クラスバインディング&lt;/strong&gt;もあります。これは、3番目の例に示すように、単一のクラスを追加または削除するのに適した方法です。</target>
        </trans-unit>
        <trans-unit id="aab5930151c105e1c5d03b6b3f8697b3dc85e9e7" translate="yes" xml:space="preserve">
          <source>Angular also has &lt;strong&gt;style binding&lt;/strong&gt;, which is good way to set a single style. This is shown in the second example.</source>
          <target state="translated">Angularには&lt;strong&gt;スタイルバインディング&lt;/strong&gt;もあり&lt;strong&gt;ます&lt;/strong&gt;。これは、単一のスタイルを設定するのに適した方法です。これは2番目の例に示されています。</target>
        </trans-unit>
        <trans-unit id="010abb47fc3adc05722e4ae6eda90d0b3da5b301" translate="yes" xml:space="preserve">
          <source>Angular also has a &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;percent&lt;/a&gt;&lt;/code&gt; pipe, which formats a number as a local percentage as shown in the third example.</source>
          <target state="translated">Angularには &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;percent&lt;/a&gt;&lt;/code&gt; パイプもあり、3番目の例に示すように、数値をローカルパーセンテージとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="44d0b768fde4742dc1976b77eaf1b2e28afafb0a" translate="yes" xml:space="preserve">
          <source>Angular also has a &lt;code&gt;percent&lt;/code&gt; pipe, which formats a number as a local percentage as shown in the third example.</source>
          <target state="translated">Angularには、3番目の例に示すように、数値をローカルパーセンテージとしてフォーマットする &lt;code&gt;percent&lt;/code&gt; パイプもあります。</target>
        </trans-unit>
        <trans-unit id="e7acf3cac93b6dc1dff702f72a776e3bad75bb0b" translate="yes" xml:space="preserve">
          <source>Angular also has an extensive &lt;a href=&quot;https://angular.io/resources&quot;&gt;network of 3rd-party tools and libraries&lt;/a&gt;.</source>
          <target state="translated">Angularには、&lt;a href=&quot;https://angular.io/resources&quot;&gt;サードパーティのツールとライブラリの&lt;/a&gt;広範なネットワークもあります。</target>
        </trans-unit>
        <trans-unit id="461978cf1e142163ebf7b8be2cfa6ba767095496" translate="yes" xml:space="preserve">
          <source>Angular also has an extensive &lt;a href=&quot;https://angular.io/start/resources&quot;&gt;network of 3rd-party tools and libraries&lt;/a&gt;.</source>
          <target state="translated">Angularには、&lt;a href=&quot;https://angular.io/start/resources&quot;&gt;サードパーティのツールとライブラリの&lt;/a&gt;広範なネットワークもあります。</target>
        </trans-unit>
        <trans-unit id="c4f6f4c8cab83c598f5f92135c20c5a81d3804e3" translate="yes" xml:space="preserve">
          <source>Angular also supports workspaces with &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;multiple projects&lt;/a&gt;. This type of development environment is suitable for advanced users who are developing &lt;a href=&quot;glossary#library&quot;&gt;shareable libraries&lt;/a&gt;, and for enterprises that use a &quot;monorepo&quot; development style, with a single repository and global configuration for all Angular projects.</source>
          <target state="translated">Angularは、&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;複数のプロジェクトを&lt;/a&gt;持つワークスペースもサポートしています。このタイプの開発環境は、&lt;a href=&quot;glossary#library&quot;&gt;共有可能なライブラリ&lt;/a&gt;を開発している上級ユーザー、およびすべてのAngularプロジェクトに単一のリポジトリとグローバル構成を備えた「monorepo」開発スタイルを使用する企業に適しています。</target>
        </trans-unit>
        <trans-unit id="18ccac82f42afc30dc13eb8f7f4a5b6af31380eb" translate="yes" xml:space="preserve">
          <source>Angular and i18n</source>
          <target state="translated">Angularとi18n</target>
        </trans-unit>
        <trans-unit id="6dd49b5a09165a329e3b3706c72d3ba95738b3ba" translate="yes" xml:space="preserve">
          <source>Angular animations are based on CSS web transition functionality, so anything that can be styled or transformed in CSS can be animated the same way in Angular. Angular animations allow you to:</source>
          <target state="translated">AngularアニメーションはCSSのWebトランジション機能をベースにしているので、CSSでスタイルを整えたり変換したりできるものはすべてAngularでも同じようにアニメーション化することができます。Angularアニメーションでは以下のようなことが可能です。</target>
        </trans-unit>
        <trans-unit id="1a46f7dce153dad41d3155a72294e1932c658d00" translate="yes" xml:space="preserve">
          <source>Angular app-design fundamentals, as described in &lt;a href=&quot;architecture&quot;&gt;Angular Concepts&lt;/a&gt;</source>
          <target state="translated">Angular &lt;a href=&quot;architecture&quot;&gt;Conceptsで&lt;/a&gt;説明されている、Angularアプリ設計の基本</target>
        </trans-unit>
        <trans-unit id="8bd34f6fdaef4e5ba180dda435f076837cce8336" translate="yes" xml:space="preserve">
          <source>Angular app-design fundamentals, as described in &lt;a href=&quot;architecture&quot;&gt;Angular Concepts&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;architecture&quot;&gt;Conceptsで&lt;/a&gt;説明されている、Angularアプリ設計の基本。</target>
        </trans-unit>
        <trans-unit id="fa2b46cf1fafda0f8f1b1015605c3b0e0c977cd6" translate="yes" xml:space="preserve">
          <source>Angular applications are styled with standard CSS. That means you can apply everything you know about CSS stylesheets, selectors, rules, and media queries directly to Angular applications.</source>
          <target state="translated">Angularアプリケーションは標準のCSSでスタイル付けされています。つまり、CSSスタイルシート、セレクタ、ルール、メディアクエリについて知っていることをすべてAngularアプリケーションに直接適用することができます。</target>
        </trans-unit>
        <trans-unit id="14d869c3fb5c7a4d91b5a670f800823baa6232f8" translate="yes" xml:space="preserve">
          <source>Angular applications must follow the same security principles as regular web applications, and must be audited as such. Angular-specific APIs that should be audited in a security review, such as the &lt;a href=&quot;security#bypass-security-apis&quot;&gt;&lt;em&gt;bypassSecurityTrust&lt;/em&gt;&lt;/a&gt; methods, are marked in the documentation as security sensitive.</source>
          <target state="translated">Angularアプリケーションは、通常のWebアプリケーションと同じセキュリティ原則に従う必要があり、そのように監査する必要があります。&lt;a href=&quot;security#bypass-security-apis&quot;&gt;&lt;em&gt;bypassSecurityTrust&lt;/em&gt;&lt;/a&gt;メソッドなど、セキュリティレビューで監査する必要のあるAngular固有のAPI は、ドキュメントでセキュリティ上重要とマークされています。</target>
        </trans-unit>
        <trans-unit id="a1bf3aeaee18f4e10d8c47a1a0151f85f3df9106" translate="yes" xml:space="preserve">
          <source>Angular applications, and specifically applications that relied on the JIT compiler, used to require a polyfill for the &lt;a href=&quot;https://github.com/rbuckton/reflect-metadata&quot;&gt;reflect-metadata&lt;/a&gt; APIs.</source>
          <target state="translated">Angularアプリケーション、特にJITコンパイラーに依存するアプリケーションは、&lt;a href=&quot;https://github.com/rbuckton/reflect-metadata&quot;&gt;reflect-metadata&lt;/a&gt; APIにポリフィルを必要としていました。</target>
        </trans-unit>
        <trans-unit id="91733de9ca0b6019e9d774051ac122f55526d61d" translate="yes" xml:space="preserve">
          <source>Angular applications, as single-page applications, are in a prime position to benefit from the advantages of service workers. Starting with version 5.0.0, Angular ships with a service worker implementation. Angular developers can take advantage of this service worker and benefit from the increased reliability and performance it provides, without needing to code against low-level APIs.</source>
          <target state="translated">シングルページアプリケーションであるAngularアプリケーションは、サービスワーカーの利点を享受できる絶好のポジションにあります。バージョン5.0.0.0から、Angularはサービスワーカーを実装しています。Angularの開発者はこのサービスワーカーを利用して、低レベルのAPIに逆らってコードを書く必要がなく、信頼性とパフォーマンスの向上の恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="30f0ca07ec9a65e367f6da8100c80d678801905c" translate="yes" xml:space="preserve">
          <source>Angular applies interceptors in the order that you provide them. If you provide interceptors &lt;em&gt;A&lt;/em&gt;, then &lt;em&gt;B&lt;/em&gt;, then &lt;em&gt;C&lt;/em&gt;, requests flow in &lt;em&gt;A-&amp;gt;B-&amp;gt;C&lt;/em&gt; and responses flow out &lt;em&gt;C-&amp;gt;B-&amp;gt;A&lt;/em&gt;.</source>
          <target state="translated">Angularは、指定した順序でインターセプターを適用します。インターセプター&lt;em&gt;A&lt;/em&gt;、次に&lt;em&gt;B&lt;/em&gt;、次に&lt;em&gt;Cを指定すると&lt;/em&gt;、要求は&lt;em&gt;A-&amp;gt; B-&amp;gt; Cに&lt;/em&gt;流れ、応答は&lt;em&gt;C-&amp;gt; B-&amp;gt; Aに&lt;/em&gt;流れます。</target>
        </trans-unit>
        <trans-unit id="6a6de042c4c8b613bc14b1004499391dfb5f5947" translate="yes" xml:space="preserve">
          <source>Angular applies interceptors in the order that you provide them. If you provide interceptors &lt;em&gt;A&lt;/em&gt;, then &lt;em&gt;B&lt;/em&gt;, then &lt;em&gt;C&lt;/em&gt;, requests will flow in &lt;em&gt;A-&amp;gt;B-&amp;gt;C&lt;/em&gt; and responses will flow out &lt;em&gt;C-&amp;gt;B-&amp;gt;A&lt;/em&gt;.</source>
          <target state="translated">Angularは提供した順番でインターセプターを適用します。インターセプター&lt;em&gt;A&lt;/em&gt;、次に&lt;em&gt;B&lt;/em&gt;、次に&lt;em&gt;C&lt;/em&gt;を指定すると、要求は&lt;em&gt;A-&amp;gt; B-&amp;gt; C&lt;/em&gt;に流れ、応答は&lt;em&gt;C-&amp;gt; B-&amp;gt; Aに&lt;/em&gt;流れます。</target>
        </trans-unit>
        <trans-unit id="d48a23ccd7bfb25f976351b26c70f523a8ecb5d3" translate="yes" xml:space="preserve">
          <source>Angular applies the class &lt;code&gt;special&lt;/code&gt; to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element so that you can use &lt;code&gt;special&lt;/code&gt; to apply CSS styles.</source>
          <target state="translated">Angularはクラス &lt;code&gt;special&lt;/code&gt; を &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素に適用するため、 &lt;code&gt;special&lt;/code&gt; を使用してCSSスタイルを適用できます。</target>
        </trans-unit>
        <trans-unit id="926bf2f3242ed68256b3bd4a48a61bdbc87faa0e" translate="yes" xml:space="preserve">
          <source>Angular apps are modular and Angular has its own modularity system called &lt;em&gt;NgModules&lt;/em&gt;. NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities. They can contain components, service providers, and other code files whose scope is defined by the containing NgModule. They can import functionality that is exported from other NgModules, and export selected functionality for use by other NgModules.</source>
          <target state="translated">Angularアプリはモジュール化されており、Angularには&lt;em&gt;NgModules&lt;/em&gt;と呼ばれる独自のモジュール化システムが&lt;em&gt;あり&lt;/em&gt;ます。NgModuleは、アプリケーションドメイン、ワークフロー、または密接に関連する一連の機能専用のコードのまとまりのあるブロックのコンテナーです。それらには、コンポーネント、サービスプロバイダー、その他のコードファイルを含めることができます。そのスコープは、含まれているNgModuleによって定義されます。他のNgModuleからエクスポートされた機能をインポートしたり、他のNgModuleで使用するために選択された機能をエクスポートしたりできます。</target>
        </trans-unit>
        <trans-unit id="25fa7e10b2ea8373e96b925201550beca498120d" translate="yes" xml:space="preserve">
          <source>Angular apps are perfect candidates for serving with a simple static HTML server. You don't need a server-side engine to dynamically compose application pages because Angular does that on the client-side.</source>
          <target state="translated">Angularアプリはシンプルな静的HTMLサーバーで提供するのに最適です。アプリケーションページを動的に作成するためのサーバーサイドエンジンは必要ありません。</target>
        </trans-unit>
        <trans-unit id="89a4897f290e40a2133713a97fbe6e813fdda23d" translate="yes" xml:space="preserve">
          <source>Angular asks the injector for the service associated with &lt;code&gt;LoggerService&lt;/code&gt; and assigns the returned value to the &lt;code&gt;logger&lt;/code&gt; parameter.</source>
          <target state="translated">Angularは、インジェクターに &lt;code&gt;LoggerService&lt;/code&gt; に関連付けられたサービスを要求し、戻り値を &lt;code&gt;logger&lt;/code&gt; パラメーターに割り当てます。</target>
        </trans-unit>
        <trans-unit id="467553e1fe6dc736a362530881af11583c4c3cac" translate="yes" xml:space="preserve">
          <source>Angular assigns a template variable a value based on where you declare the variable:</source>
          <target state="translated">Angularは変数を宣言した場所に応じてテンプレート変数に値を割り当てます。</target>
        </trans-unit>
        <trans-unit id="34736d096c8d01abb937a1a803b97d49650c45e4" translate="yes" xml:space="preserve">
          <source>Angular automatically adds components in the module's &lt;code&gt;bootstrap&lt;/code&gt; and route definitions into the &lt;code&gt;entryComponents&lt;/code&gt; list.</source>
          <target state="translated">Angularはモジュールの &lt;code&gt;bootstrap&lt;/code&gt; とルート定義のコンポーネントを自動的に &lt;code&gt;entryComponents&lt;/code&gt; リストに追加します。</target>
        </trans-unit>
        <trans-unit id="f64e43a20cf90e560e0797b938ab839d7501e2c4" translate="yes" xml:space="preserve">
          <source>Angular automatically adds components in the module's bootstrap and route definitions into the &lt;code&gt;entryComponents&lt;/code&gt; list. Use this option to add components that are bootstrapped using one of the imperative techniques, such as &lt;code&gt;ViewContainerRef.createComponent()&lt;/code&gt;.</source>
          <target state="translated">Angularはモジュールのブートストラップとルート定義のコンポーネントを自動的に &lt;code&gt;entryComponents&lt;/code&gt; リストに追加します。このオプションを使用して、 &lt;code&gt;ViewContainerRef.createComponent()&lt;/code&gt; などの必須テクニックの1つを使用してブートストラップされるコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="0629ce337235f8f877e6fa641ca67b726d78f938" translate="yes" xml:space="preserve">
          <source>Angular automatically checks host property bindings during change detection. If a binding changes, Angular updates the directive's host element.</source>
          <target state="translated">Angularは変更検出時にホストプロパティのバインディングを自動的にチェックします。バインディングが変更されると、Angular はディレクティブのホスト要素を更新します。</target>
        </trans-unit>
        <trans-unit id="8b9a86a14f14da58711979c6e06ad0d7a208e6d2" translate="yes" xml:space="preserve">
          <source>Angular automatically expands the shorthand syntax as it compiles the template. The context for each embedded view is logically merged to the current component context according to its lexical position.</source>
          <target state="translated">Angularはテンプレートをコンパイルすると自動的に短縮構文を展開します。各埋め込みビューのコンテキストは、その語彙的な位置に応じて現在のコンポーネントコンテキストに論理的にマージされます。</target>
        </trans-unit>
        <trans-unit id="93f51725a20586ce3e33f655c1e7ce3a5377f16e" translate="yes" xml:space="preserve">
          <source>Angular automatically mirrors many control properties onto the form control element as CSS classes. You can use these classes to style form control elements according to the state of the form. The following classes are currently supported.</source>
          <target state="translated">Angularは多くのコントロールプロパティをCSSクラスとしてフォームコントロール要素に自動的にミラーリングします。これらのクラスを使用して、フォームの状態に応じてフォームコントロール要素をスタイルすることができます。現在サポートされているクラスは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="66b49eb10d70820437d8d869bc39bde44099684f" translate="yes" xml:space="preserve">
          <source>Angular automatically pulls the value of the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;myHero&lt;/code&gt; properties from the component and inserts those values into the browser. Angular updates the display when these properties change.</source>
          <target state="translated">Angularは自動的に &lt;code&gt;title&lt;/code&gt; と &lt;code&gt;myHero&lt;/code&gt; プロパティの値をコンポーネントから引き出し、それらの値をブラウザに挿入します。これらのプロパティが変更されると、Angularは表示を更新します。</target>
        </trans-unit>
        <trans-unit id="ff00d645a7fcd89b83ee39d6fc1b51274985e3e6" translate="yes" xml:space="preserve">
          <source>Angular automatically updates input properties during change detection. The &lt;code&gt;inputs&lt;/code&gt; property defines a set of &lt;code&gt;directiveProperty&lt;/code&gt; to &lt;code&gt;bindingProperty&lt;/code&gt; configuration:</source>
          <target state="translated">Angularは変更検出中に入力プロパティを自動的に更新します。 &lt;code&gt;inputs&lt;/code&gt; プロパティは、一連の定義 &lt;code&gt;directiveProperty&lt;/code&gt; に &lt;code&gt;bindingProperty&lt;/code&gt; の構成を：</target>
        </trans-unit>
        <trans-unit id="2fdcfb49d5c09fbaa84f9aee2d20c4bb5eaf5efe" translate="yes" xml:space="preserve">
          <source>Angular by default uses &lt;code&gt;en-US&lt;/code&gt; (English in the United States) as your app's source locale.</source>
          <target state="translated">Angularはデフォルトで、アプリのソースロケールとして &lt;code&gt;en-US&lt;/code&gt; （米国では英語）を使用します。</target>
        </trans-unit>
        <trans-unit id="4fb8d9e96c7ac6343272dadc9bead965bdb5f2ef" translate="yes" xml:space="preserve">
          <source>Angular calls &lt;code&gt;ngOnInit()&lt;/code&gt; shortly after creating a component.</source>
          <target state="translated">Angularはコンポーネントを作成した直後に &lt;code&gt;ngOnInit()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="799636d3f55ab95abfe31d9616161e11148256ec" translate="yes" xml:space="preserve">
          <source>Angular calls both &lt;em&gt;AfterContent&lt;/em&gt; hooks before calling either of the &lt;em&gt;AfterView&lt;/em&gt; hooks. Angular completes composition of the projected content &lt;em&gt;before&lt;/em&gt; finishing the composition of this component's view. There is a small window between the &lt;code&gt;AfterContent...&lt;/code&gt; and &lt;code&gt;AfterView...&lt;/code&gt; hooks that allows you to modify the host view.</source>
          <target state="translated">角度のコールの両方&lt;em&gt;はafterContent&lt;/em&gt;のいずれかの呼び出しの前にフック&lt;em&gt;AfterViewの&lt;/em&gt;フック。Angularは、このコンポーネントのビューの構成を完了する&lt;em&gt;前&lt;/em&gt;に、投影されたコンテンツの構成を完了します。間に小さな窓があり &lt;code&gt;AfterContent...&lt;/code&gt; と &lt;code&gt;AfterView...&lt;/code&gt; あなたがホストビューを変更することができますフック。</target>
        </trans-unit>
        <trans-unit id="0761730ce747644c7286543b08d9331ae7b0e5b5" translate="yes" xml:space="preserve">
          <source>Angular calls hook methods for &lt;em&gt;directives&lt;/em&gt; as well as components.</source>
          <target state="translated">Angular呼び出しは、&lt;em&gt;ディレクティブ&lt;/em&gt;とコンポーネントのメソッドをフックします。</target>
        </trans-unit>
        <trans-unit id="700fb4f4fabe764d32bfd76c4bdde2ed1a283939" translate="yes" xml:space="preserve">
          <source>Angular calls its &lt;code&gt;ngOnChanges()&lt;/code&gt; method whenever it detects changes to &lt;strong&gt;&lt;em&gt;input properties&lt;/em&gt;&lt;/strong&gt; of the component (or directive). This example monitors the &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; hook.</source>
          <target state="translated">Angularは、コンポーネント（またはディレクティブ）の&lt;strong&gt;&lt;em&gt;入力プロパティ&lt;/em&gt;&lt;/strong&gt;の変更を検出するたびに、 &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドを呼び出します。この例では、 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; フックを監視します。&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4118fdcd8c7c3292cb71b321cb427d4c834148fd" translate="yes" xml:space="preserve">
          <source>Angular calls the &lt;code&gt;ngOnChanges()&lt;/code&gt; method of a component or directive whenever it detects changes to the &lt;strong&gt;&lt;em&gt;input properties&lt;/em&gt;&lt;/strong&gt;. The &lt;em&gt;onChanges&lt;/em&gt; example demonstrates this by monitoring the &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;()&lt;/code&gt; hook.</source>
          <target state="translated">Angularは、&lt;strong&gt;&lt;em&gt;入力プロパティ&lt;/em&gt;&lt;/strong&gt;への変更を検出するたびに、コンポーネントまたはディレクティブの &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドを呼び出し&lt;strong&gt;&lt;em&gt;ます&lt;/em&gt;&lt;/strong&gt;。&lt;em&gt;onChangesの&lt;/em&gt;例では、監視することにより、これを示し &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;()&lt;/code&gt; フック。</target>
        </trans-unit>
        <trans-unit id="7fba1c4e305809dca3c5497ed6c4e8bdddcee9d5" translate="yes" xml:space="preserve">
          <source>Angular calls these hook methods in the following order:</source>
          <target state="translated">Angularはこれらのフックメソッドを以下の順番で呼び出します。</target>
        </trans-unit>
        <trans-unit id="2eb6be30b85620d64c1287fc12627576cab0e3cb" translate="yes" xml:space="preserve">
          <source>Angular can launch with multiple bootstrap components, each with its own location in the host web page.</source>
          <target state="translated">Angularは複数のBootstrapコンポーネントで起動することができ、それぞれがホストWebページ内の独自の場所に配置されています。</target>
        </trans-unit>
        <trans-unit id="a8d9d853fd628beed82fbc871f08b75361246094" translate="yes" xml:space="preserve">
          <source>Angular can't know at compile time what kind of HTML element the &lt;code&gt;nativeElement&lt;/code&gt; is or if it even is an HTML element. The app might be running on a &lt;em&gt;non-browser platform&lt;/em&gt;, such as the server or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Worker&lt;/a&gt;, where the element may have a diminished API or not exist at all.</source>
          <target state="translated">Angularは、コンパイル時に、 &lt;code&gt;nativeElement&lt;/code&gt; がどのようなHTML要素であるか、またはそれがHTML要素であるかどうかを知ることができません。アプリがサーバーや&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Webワーカー&lt;/a&gt;などの&lt;em&gt;ブラウザー以外のプラットフォーム&lt;/em&gt;で実行されている可能性があり&lt;em&gt;ます&lt;/em&gt;。この場合、要素のAPIが低下しているか、要素がまったく存在しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="832d4b42c678434cf266550b2ed8c8f21564c3ee" translate="yes" xml:space="preserve">
          <source>Angular coding style guide</source>
          <target state="translated">Angularコーディングスタイルガイド</target>
        </trans-unit>
        <trans-unit id="36d17ffea363e96f44fadf63bb3a1bdbe014532f" translate="yes" xml:space="preserve">
          <source>Angular comes with a stock of pipes such as &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;LowerCasePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt;. They are all available for use in any template.</source>
          <target state="translated">角速度は、次のようなパイプの株式が付属しています &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;LowerCasePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; 。これらはすべて、任意のテンプレートで使用できます。</target>
        </trans-unit>
        <trans-unit id="0a907878ebd06df52b7177c708b1d8e885c2837c" translate="yes" xml:space="preserve">
          <source>Angular comes with its own API for loading components dynamically.</source>
          <target state="translated">Angularには、コンポーネントを動的にロードするための独自のAPIが付属しています。</target>
        </trans-unit>
        <trans-unit id="dd56aedc09d6c5dc3108daa71ce3e03750969451" translate="yes" xml:space="preserve">
          <source>Angular compatibility compiler. If you build your app using &lt;a href=&quot;glossary#ivy&quot;&gt;Ivy&lt;/a&gt;, but it depends on libraries that have not been compiled with Ivy, the CLI uses &lt;code&gt;ngcc&lt;/code&gt; to automatically update the dependent libraries to use Ivy.</source>
          <target state="translated">Angular互換性コンパイラ。&lt;a href=&quot;glossary#ivy&quot;&gt;Ivy&lt;/a&gt;を使用してアプリをビルドするが、Ivyでコンパイルされていないライブラリに依存している場合、CLIは &lt;code&gt;ngcc&lt;/code&gt; を使用して、Ivyを使用するように依存ライブラリを自動的に更新します。</target>
        </trans-unit>
        <trans-unit id="d2363ce386377b1af5430cd7665d83300366b428" translate="yes" xml:space="preserve">
          <source>Angular compiler options</source>
          <target state="translated">Angular コンパイラのオプション</target>
        </trans-unit>
        <trans-unit id="15a73b4d8e7403ebf3810f68763eaa4ff736a997" translate="yes" xml:space="preserve">
          <source>Angular components</source>
          <target state="translated">アンギュラーコンポーネント</target>
        </trans-unit>
        <trans-unit id="ffb4bdd5d65587e2e6c9c3c9d1f3cb6da8838095" translate="yes" xml:space="preserve">
          <source>Angular components always execute inside Angular framework codebase regardless of where they are instantiated.</source>
          <target state="translated">Angularコンポーネントはインスタンス化された場所に関わらず、常にAngularフレームワークのコードベース内で実行されます。</target>
        </trans-unit>
        <trans-unit id="233d6374ce6c4c863b26cd0f6a1152e33095938e" translate="yes" xml:space="preserve">
          <source>Angular components always execute inside the Angular framework codebase regardless of where they are instantiated.</source>
          <target state="translated">Angularコンポーネントはインスタンス化された場所に関わらず、常にAngularフレームワークのコードベース内で実行されます。</target>
        </trans-unit>
        <trans-unit id="a938ce5b6c5838ce8346e5bb8644d6b61ec091d8" translate="yes" xml:space="preserve">
          <source>Angular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated for a given element in a template.</source>
          <target state="translated">Angularのコンポーネントはディレクティブのサブセットで、常にテンプレートに関連付けられています。他のディレクティブとは異なり、テンプレート内の指定された要素に対しては一つのコンポーネントしかインスタンス化できません。</target>
        </trans-unit>
        <trans-unit id="b4225f862d6288eb7075b556d3706e253ca5d1d9" translate="yes" xml:space="preserve">
          <source>Angular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated per an element in a template.</source>
          <target state="translated">Angularのコンポーネントはディレクティブのサブセットで、常にテンプレートに関連付けられています。他のディレクティブとは異なり、テンプレート内の一つの要素に対して一つのコンポーネントしかインスタンス化できません。</target>
        </trans-unit>
        <trans-unit id="e4d73c4846ec246a55f1aa13c811b021c01194e2" translate="yes" xml:space="preserve">
          <source>Angular components that support content projection make use of an &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag within them. Here's an example of such a component:</source>
          <target state="translated">コンテンツプロジェクションをサポートするAngularコンポーネントは、コンポーネント内で &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; タグを使用します。このようなコンポーネントの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="060321b0fff1405ad06cb58d9ee155a149fcc9fa" translate="yes" xml:space="preserve">
          <source>Angular concepts</source>
          <target state="translated">アンギュラーの概念</target>
        </trans-unit>
        <trans-unit id="1071c499d51beceec87025fac82a393ee1e49214" translate="yes" xml:space="preserve">
          <source>Angular consumed the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; content during its actual rendering and replaced the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; with a diagnostic comment.</source>
          <target state="translated">角度の消費 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; その実際のレンダリング中にコンテンツを、交換 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 診断コメントで。</target>
        </trans-unit>
        <trans-unit id="8636812be488a9e06f44b489bdc2a9078adde645" translate="yes" xml:space="preserve">
          <source>Angular creates &lt;code&gt;ElementInjector&lt;/code&gt;s implicitly for each DOM element.</source>
          <target state="translated">Angularは、DOM要素ごとに暗黙的に &lt;code&gt;ElementInjector&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="c0741d3945dd49502e54a223724b94ed7a5fa8fc" translate="yes" xml:space="preserve">
          <source>Angular creates a lazy loaded module with its own injector, a child of the root injector. &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes Angular to look for a &lt;code&gt;GreetingModule&lt;/code&gt; in the parent injector, which this time is the root injector. Of course it finds the instance imported by the root &lt;code&gt;AppModule&lt;/code&gt;. Now &lt;code&gt;parentModule&lt;/code&gt; exists and the constructor throws the error.</source>
          <target state="translated">Angularは、ルートインジェクターの子である独自のインジェクターを使用して、遅延ロードされたモジュールを作成します。 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; により、Angular は親インジェクター（今回はルートインジェクター）で &lt;code&gt;GreetingModule&lt;/code&gt; を探します。もちろん、ルート &lt;code&gt;AppModule&lt;/code&gt; によってインポートされたインスタンスを見つけます。これで &lt;code&gt;parentModule&lt;/code&gt; が存在し、コンストラクターがエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="977c8f330d7f7406517c33d255bec85d1010c0fb" translate="yes" xml:space="preserve">
          <source>Angular creates and renders components along with their children, checks when their data-bound properties change, and destroys them before removing them from the DOM.</source>
          <target state="translated">Angularはコンポーネントを子と一緒に作成してレンダリングし、データバインドされたプロパティが変更されたときにチェックし、DOMから削除する前にそれらを破棄します。</target>
        </trans-unit>
        <trans-unit id="ba24eb58c283a7912305a525ff29bc67536b0f26" translate="yes" xml:space="preserve">
          <source>Angular creates the component with its &lt;em&gt;own&lt;/em&gt; injector, which is a &lt;em&gt;child&lt;/em&gt; of the fixture injector. It registers the component's providers (the &lt;code&gt;HeroDetailService&lt;/code&gt; in this case) with the child injector.</source>
          <target state="translated">Angularは、フィクスチャインジェクタの&lt;em&gt;子&lt;/em&gt;である&lt;em&gt;独自の&lt;/em&gt;インジェクタを持つコンポーネントを作成します。コンポーネントのプロバイダー（この場合は &lt;code&gt;HeroDetailService&lt;/code&gt; ）を子インジェクターに登録します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8cd6666fc9fd18813b4f61de2cc4a4167a9bcabc" translate="yes" xml:space="preserve">
          <source>Angular creates, updates, and destroys components as the user moves through the application. Your app can take action at each moment in this lifecycle through optional &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hooks&lt;/a&gt;, like &lt;code&gt;ngOnInit()&lt;/code&gt;.</source>
          <target state="translated">Angularは、ユーザーがアプリケーション内を移動すると、コンポーネントを作成、更新、破棄します。アプリは、 &lt;code&gt;ngOnInit()&lt;/code&gt; などのオプションの&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;を介して、このライフサイクルの各瞬間にアクションを実行できます。</target>
        </trans-unit>
        <trans-unit id="1491a873fca02f484086bb4c25c113973485dbc4" translate="yes" xml:space="preserve">
          <source>Angular defines an &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; class to wrap render-specific native UI elements. In most cases, this allows you to use Angular templates and data binding to access DOM elements without reference to the native element.</source>
          <target state="translated">Angularは &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; クラスを定義して、レンダリング固有のネイティブUI要素をラップします。ほとんどの場合、これにより、Angularテンプレートとデータバインディングを使用して、ネイティブ要素を参照せずにDOM要素にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="29b75e3aa5bf733082f6f2be9dc6166f8724c4b5" translate="yes" xml:space="preserve">
          <source>Angular defines decorators that attach metadata to classes or properties so that it knows what those classes or properties mean and how they should work.</source>
          <target state="translated">Angularはクラスやプロパティにメタデータを添付するデコレータを定義しています。</target>
        </trans-unit>
        <trans-unit id="54a4705b9139dd29bd0480b9f3c8657f03607bed" translate="yes" xml:space="preserve">
          <source>Angular defines default builders for use with specific CLI commands, or with the general &lt;code&gt;ng run&lt;/code&gt; command. The JSON schemas that the define the options and defaults for each of these default builders are collected in the &lt;a href=&quot;https://github.com/angular/angular-cli/blob/8.0.x/packages/angular/cli/lib/config/schema.json&quot;&gt;&lt;code&gt;@angular-devkit/build-angular&lt;/code&gt;&lt;/a&gt; package. The schemas configure options for the following builders.</source>
          <target state="translated">Angularは、特定のCLIコマンド、または一般的な &lt;code&gt;ng run&lt;/code&gt; コマンドで使用するデフォルトのビルダーを定義します。これらの各デフォルトビルダーのオプションとデフォルトを定義するJSONスキーマは、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/8.0.x/packages/angular/cli/lib/config/schema.json&quot;&gt; &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt; &lt;/a&gt;パッケージに収集されます。スキーマは、以下のビルダーのオプションを構成します。</target>
        </trans-unit>
        <trans-unit id="dee1921a916c378e7946c3b9eeea976785c29693" translate="yes" xml:space="preserve">
          <source>Angular defines the following security contexts:</source>
          <target state="translated">Angularでは以下のようなセキュリティコンテキストを定義しています。</target>
        </trans-unit>
        <trans-unit id="6fb8bcc74fbecb42b212d7bf6efe735e1d1e63cd" translate="yes" xml:space="preserve">
          <source>Angular defines various pipes, such as the &lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt; pipe and &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; pipe; for a complete list, see the &lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes API list&lt;/a&gt;. You can also define new pipes.</source>
          <target state="translated">Angularは、&lt;a href=&quot;../api/common/datepipe&quot;&gt;日付&lt;/a&gt;パイプや&lt;a href=&quot;../api/common/currencypipe&quot;&gt;通貨&lt;/a&gt;パイプなどのさまざまなパイプを定義します。完全なリストについては、&lt;a href=&quot;../api?type=pipe&quot;&gt;パイプAPIリストを&lt;/a&gt;参照してください。新しいパイプを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="d17ca00c0eee29556940c4f3d3c141a911271225" translate="yes" xml:space="preserve">
          <source>Angular defines various pipes, such as the &lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt; pipe and &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; pipe; for a complete list, see the &lt;a href=&quot;api?type=pipe&quot;&gt;Pipes API list&lt;/a&gt;. You can also define new pipes.</source>
          <target state="translated">Angularは、&lt;a href=&quot;../api/common/datepipe&quot;&gt;日付&lt;/a&gt;パイプや&lt;a href=&quot;../api/common/currencypipe&quot;&gt;通貨&lt;/a&gt;パイプなど、さまざまなパイプを定義します。完全なリストについては、&lt;a href=&quot;api?type=pipe&quot;&gt;PipesAPI&lt;/a&gt;リストを参照してください。新しいパイプを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="36fd385bfb0f2bc723f93bd55ac70bf1b8515f00" translate="yes" xml:space="preserve">
          <source>Angular dependency injection is easiest when the provider token is a class that is also the type of the returned dependency object, or service.</source>
          <target state="translated">Angularの依存性インジェクションは、プロバイダトークンが返される依存性オブジェクトやサービスの型でもあるクラスである場合に最も簡単です。</target>
        </trans-unit>
        <trans-unit id="354f00bb969990f37d0cfc82991b44682a87aec0" translate="yes" xml:space="preserve">
          <source>Angular detects each change and immediately runs the pipe. This is fine for primitive input values. However, if you change something &lt;em&gt;inside&lt;/em&gt; a composite object (such as the month of a date, an element of an array, or an object property), you need to understand how change detection works, and how to use an &lt;code&gt;impure&lt;/code&gt; pipe.</source>
          <target state="translated">Angularは各変更を検出し、すぐにパイプを実行します。これは、プリミティブ入力値には問題ありません。ただし、複合オブジェクト&lt;em&gt;内&lt;/em&gt;の何か（日付の月、配列の要素、オブジェクトプロパティなど）を変更する場合は、変更検出のしくみと、 &lt;code&gt;impure&lt;/code&gt; パイプの使用方法を理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="2fdc7ee4e969732e2733a769bd9625a839effc81" translate="yes" xml:space="preserve">
          <source>Angular developers may encounter a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt; &lt;i&gt;cross-origin resource sharing&lt;/i&gt;&lt;/a&gt; error when making a service request (typically a data service request) to a server other than the application's own host server. Browsers forbid such requests unless the server permits them explicitly.</source>
          <target state="translated">Angular開発者は、アプリケーション自体のホストサーバー以外のサーバーにサービスリクエスト（通常はデータサービスリクエスト）を発行するときに、&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;&lt;i&gt;クロスオリジンリソース共有&lt;/i&gt;&lt;/a&gt;エラーが発生する可能性があります。サーバーが明示的に許可しない限り、ブラウザーはそのような要求を禁止します。 &lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="33ead61c5ae99389962924106e86b6fa486483dc" translate="yes" xml:space="preserve">
          <source>Angular did. Angular automatically creates and attaches an &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">Angularはしました。Angularは自動的に &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブを作成して &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグにアタッチします。</target>
        </trans-unit>
        <trans-unit id="0c8cd873ef07f78a6133e0a8205b20af3eb32885" translate="yes" xml:space="preserve">
          <source>Angular distinguishes components from services to increase modularity and reusability. By separating a component's view-related functionality from other kinds of processing, you can make your component classes lean and efficient.</source>
          <target state="translated">Angularではコンポーネントをサービスと区別してモジュール性と再利用性を高めています。コンポーネントのビュー関連の機能を他の種類の処理から分離することで、コンポーネントクラスを無駄のない効率的なものにすることができます。</target>
        </trans-unit>
        <trans-unit id="4ef98a05d3c9d89272386206620e0b855fdc66c0" translate="yes" xml:space="preserve">
          <source>Angular doc generation copies these image folders to the &lt;em&gt;runtime&lt;/em&gt; location, &lt;code&gt;generated/images&lt;/code&gt;. Set the image &lt;code&gt;src&lt;/code&gt; attribute to begin in &lt;em&gt;that&lt;/em&gt; directory.</source>
          <target state="translated">Angular docの生成により、これらのイメージフォルダーが&lt;em&gt;ランタイムの&lt;/em&gt;場所（ &lt;code&gt;generated/images&lt;/code&gt; )にコピーされます。&lt;em&gt;その&lt;/em&gt;ディレクトリで始まるようにイメージの &lt;code&gt;src&lt;/code&gt; 属性を設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4527482607342ce8ca88ecd6e7dda8e4473c14f4" translate="yes" xml:space="preserve">
          <source>Angular documentation style guide</source>
          <target state="translated">Angular ドキュメンテーションスタイルガイド</target>
        </trans-unit>
        <trans-unit id="9731c83bf305f628189c25e13177875fa54b80aa" translate="yes" xml:space="preserve">
          <source>Angular does not allow HTML with &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, neither with &lt;a href=&quot;interpolation&quot;&gt;interpolation&lt;/a&gt; nor property binding, which prevents the JavaScript from running.</source>
          <target state="translated">Angularは、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを含むHTMLを許可しません。また、&lt;a href=&quot;interpolation&quot;&gt;補間&lt;/a&gt;もプロパティバインディングも許可しないため、JavaScriptの実行が妨げられます。</target>
        </trans-unit>
        <trans-unit id="05d4d08bb1ab2fe726e25cd17ea946e354b440dc" translate="yes" xml:space="preserve">
          <source>Angular does something similar with the &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; token so you can inject the browser's &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; object (or an abstraction of it, depending upon the platform in which the application runs).</source>
          <target state="translated">Angularは、 &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; トークンを使用して同様の処理を行うため、ブラウザーの &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; オブジェクト（または、アプリケーションが実行されるプラットフォームに応じて、その抽象化）を挿入できます。</target>
        </trans-unit>
        <trans-unit id="c44939aad5d12f8f29f0ad08371766a5ea5b53c8" translate="yes" xml:space="preserve">
          <source>Angular does something similar with the &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; token so you can inject the browser's &lt;code&gt;document&lt;/code&gt; object (or an abstraction of it, depending upon the platform in which the application runs).</source>
          <target state="translated">Angularは &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; トークンと同様のことを行うため、ブラウザーの &lt;code&gt;document&lt;/code&gt; オブジェクト（または、アプリケーションが実行されているプラ​​ットフォームによってはその抽象化）を挿入できます。</target>
        </trans-unit>
        <trans-unit id="316fdcfddbfe253f5be7d7577a1028ffa824c548" translate="yes" xml:space="preserve">
          <source>Angular doesn't &lt;em&gt;enforce&lt;/em&gt; these principles. Angular does help you &lt;em&gt;follow&lt;/em&gt; these principles by making it easy to factor your application logic into services and make those services available to components through &lt;em&gt;dependency injection&lt;/em&gt;.</source>
          <target state="translated">Angularはこれらの原則を&lt;em&gt;強制&lt;/em&gt;しません。Angularは、アプリケーションロジックをサービスに分解し、&lt;em&gt;依存性注入&lt;/em&gt;を通じてコン​​ポーネントがそれらのサービスを利用できるようにすることで、これらの原則に&lt;em&gt;従うのに&lt;/em&gt;役立ちます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bec27d0e4374bf5d0fe0b39083d667524fda6667" translate="yes" xml:space="preserve">
          <source>Angular doesn't have a &lt;code&gt;FilterPipe&lt;/code&gt; or an &lt;code&gt;OrderByPipe&lt;/code&gt; for reasons explained in the &lt;a href=&quot;pipes#no-filter-pipe&quot;&gt;Appendix&lt;/a&gt; of this page.</source>
          <target state="translated">アンギュラはありません &lt;code&gt;FilterPipe&lt;/code&gt; や &lt;code&gt;OrderByPipe&lt;/code&gt; の理由ではで説明した&lt;a href=&quot;pipes#no-filter-pipe&quot;&gt;付録&lt;/a&gt;このページの。</target>
        </trans-unit>
        <trans-unit id="d7de62023255791a40ee52811b94f5c474b98e55" translate="yes" xml:space="preserve">
          <source>Angular doesn't have a bootstrap directive. To launch the app in code, explicitly bootstrap the application's root module (&lt;code&gt;AppModule&lt;/code&gt;) in &lt;code&gt;main.ts&lt;/code&gt; and the application's root component (&lt;code&gt;AppComponent&lt;/code&gt;) in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">Angularにはブートストラップディレクティブはありません。アプリをコードで起動するには、アプリケーションのルートモジュール（ &lt;code&gt;AppModule&lt;/code&gt; ）を &lt;code&gt;main.ts&lt;/code&gt; に明示的にブートストラップし、アプリケーションのルートコンポーネント（ &lt;code&gt;AppComponent&lt;/code&gt; ）を &lt;code&gt;app.module.ts&lt;/code&gt; に明示的にブートストラップします。</target>
        </trans-unit>
        <trans-unit id="1db4be0ad95a78f2180c038b6339b94ffad67719" translate="yes" xml:space="preserve">
          <source>Angular doesn't know that you set the input element's &lt;code&gt;value&lt;/code&gt; property. It won't read that property until you raise the element's &lt;code&gt;input&lt;/code&gt; event by calling &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;dispatchEvent()&lt;/a&gt;&lt;/code&gt;. &lt;em&gt;Then&lt;/em&gt; you call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularは、入力要素の &lt;code&gt;value&lt;/code&gt; プロパティを設定したことを知りません。 &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;dispatchEvent()&lt;/a&gt;&lt;/code&gt; を呼び出して要素の &lt;code&gt;input&lt;/code&gt; イベントを発生させるまで、そのプロパティは読み取られません。&lt;em&gt;次に&lt;/em&gt;、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; を呼び出します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b47387f69f445968d061e38730acd7cac89dc62e" translate="yes" xml:space="preserve">
          <source>Angular doesn't know that you set the input element's &lt;code&gt;value&lt;/code&gt; property. It won't read that property until you raise the element's &lt;code&gt;input&lt;/code&gt; event by calling &lt;code&gt;dispatchEvent()&lt;/code&gt;. &lt;em&gt;Then&lt;/em&gt; you call &lt;code&gt;detectChanges()&lt;/code&gt;.</source>
          <target state="translated">Angularは、入力要素の &lt;code&gt;value&lt;/code&gt; プロパティを設定したことを認識していません。 &lt;code&gt;dispatchEvent()&lt;/code&gt; を呼び出して要素の &lt;code&gt;input&lt;/code&gt; イベントを発生させるまで、そのプロパティは読み取られません。&lt;em&gt;次に&lt;/em&gt;、 &lt;code&gt;detectChanges()&lt;/code&gt; を呼び出します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd520f6af29e767755a3104595b3766e46582132" translate="yes" xml:space="preserve">
          <source>Angular doesn't like NgModules with circular references, so don't let Module 'A' import Module 'B', which imports Module 'A'.</source>
          <target state="translated">Angularは循環参照のあるNgModulesを嫌うので、Module 'A'がModule 'A'をインポートするModule 'B'をインポートさせないようにします。</target>
        </trans-unit>
        <trans-unit id="0fe275456a97ff34d2bc7a9ec6f6a087e43077a0" translate="yes" xml:space="preserve">
          <source>Angular doesn't provide pipes for filtering or sorting lists. Developers familiar with AngularJS know these as &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt;. There are no equivalents in Angular.</source>
          <target state="translated">Angularはリストをフィルタリングまたはソートするためのパイプを提供していません。AngularJSに精通している開発者は、これらを &lt;code&gt;filter&lt;/code&gt; および &lt;code&gt;orderBy&lt;/code&gt; として知っています。Angularには同等のものはありません。</target>
        </trans-unit>
        <trans-unit id="d035376ad03249c3d06ea41a32cd0585ba3807fd" translate="yes" xml:space="preserve">
          <source>Angular duplicates the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each item in the list, setting the &lt;code&gt;hero&lt;/code&gt; variable to the item (the hero) in the current iteration. Angular uses that variable as the context for the interpolation in the double curly braces.</source>
          <target state="translated">Angular は、リストの各アイテムの &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; を複製し、現在の反復で &lt;code&gt;hero&lt;/code&gt; 変数をアイテム（ヒーロー）に設定します。Angularはその変数を二重中括弧での補間のコンテキストとして使用します。</target>
        </trans-unit>
        <trans-unit id="85015daf970f460cc4cdb8249ea3dcc38c78f993" translate="yes" xml:space="preserve">
          <source>Angular element</source>
          <target state="translated">アンギュラー要素</target>
        </trans-unit>
        <trans-unit id="196a77ae5d8842832ab963740bce5e17b220f324" translate="yes" xml:space="preserve">
          <source>Angular elements overview</source>
          <target state="translated">Angular要素の概要</target>
        </trans-unit>
        <trans-unit id="cc9d62dd0c487b775ce03f3a8c3d97cf94a169d1" translate="yes" xml:space="preserve">
          <source>Angular erases the middle &quot;Hip!&quot;, leaving the cheer a bit less enthusiastic.</source>
          <target state="translated">アンギュラーは真ん中の「Hip!</target>
        </trans-unit>
        <trans-unit id="9de65d4e4807d361a824604d00a11e49f70b5d15" translate="yes" xml:space="preserve">
          <source>Angular evaluates all expressions in double curly braces, converts the expression results to strings, and links them with neighboring literal strings. Finally, it assigns this composite interpolated result to an &lt;strong&gt;element or directive property&lt;/strong&gt;.</source>
          <target state="translated">Angularは二重中括弧内のすべての式を評価し、式の結果を文字列に変換し、それらを隣接するリテラル文字列にリンクします。最後に、この複合補間結果を&lt;strong&gt;要素またはディレクティブプロパティ&lt;/strong&gt;に割り当て&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="46b3eae0baafae45c7e6c0a56aa7f909f9c5b753" translate="yes" xml:space="preserve">
          <source>Angular event binding syntax consists of a &lt;strong&gt;target event&lt;/strong&gt; name within parentheses on the left of an equal sign, and a quoted template statement on the right. The following event binding listens for the button's click events, calling the component's &lt;code&gt;onSave()&lt;/code&gt; method whenever a click occurs:</source>
          <target state="translated">Angularイベントバインディング構文は、等号の左側の括弧内の&lt;strong&gt;ターゲットイベント&lt;/strong&gt;名と、右側の引用されたテンプレートステートメントで構成されます。次のイベントバインディングは、ボタンのクリックイベントをリッスンし、クリックが発生するたびにコンポーネントの &lt;code&gt;onSave()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9a1e5ca49dc26e677715c17ed169b11bf4be97c1" translate="yes" xml:space="preserve">
          <source>Angular executes a &lt;em&gt;pure pipe&lt;/em&gt; only when it detects a &lt;em&gt;pure change&lt;/em&gt; to the input value. A pure change is either a change to a primitive input value (&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;) or a changed object reference (&lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;).</source>
          <target state="translated">Angularは、入力値への&lt;em&gt;純粋な変化&lt;/em&gt;を検出したときにのみ、&lt;em&gt;純粋なパイプを&lt;/em&gt;実行します。純粋な変更とは、プリミティブ入力値（ &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、 &lt;code&gt;Boolean&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; ）への変更、または変更されたオブジェクト参照（ &lt;code&gt;Date&lt;/code&gt; 、 &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;Function&lt;/code&gt; 、 &lt;code&gt;Object&lt;/code&gt; ）のいずれかです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10e61b854f3aa7e97f224d066c41aff35eeab1f5" translate="yes" xml:space="preserve">
          <source>Angular executes an &lt;em&gt;impure pipe&lt;/em&gt; during every component change detection cycle. An impure pipe is called often, as often as every keystroke or mouse-move.</source>
          <target state="translated">Angularは、すべてのコンポーネント変更検出サイクル中に&lt;em&gt;不純なパイプを&lt;/em&gt;実行します。不純なパイプは、すべてのキーストロークまたはマウスの移動と同じくらい頻繁に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="30048831bd39a80f3d9aad084b8380f724c8d4fb" translate="yes" xml:space="preserve">
          <source>Angular executes hook methods in the following sequence. You can use them to perform the following kinds of operations.</source>
          <target state="translated">Angularはフックメソッドを以下の順番で実行します。これらを利用して、以下のような操作を行うことができます。</target>
        </trans-unit>
        <trans-unit id="f3f08b38aea522e78394f75ae5fb4ddda9056304" translate="yes" xml:space="preserve">
          <source>Angular executes template expressions after every change detection cycle. Change detection cycles are triggered by many asynchronous activities such as promise resolutions, HTTP results, timer events, key presses and mouse moves.</source>
          <target state="translated">Angularは変更検出サイクルごとにテンプレート式を実行します。変更検出サイクルは、約束の解決、HTTPの結果、タイマーイベント、キープレス、マウスの移動など、多くの非同期アクティビティによってトリガーされます。</target>
        </trans-unit>
        <trans-unit id="93fd7debae3edda32d9bdc394dafa95f04ee8ce9" translate="yes" xml:space="preserve">
          <source>Angular follows the Unicode LDML convention that uses stable identifiers (Unicode locale identifiers) based on the norm &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. It is very important that you follow this convention when you define your locale, because the Angular i18n tools use this locale id to find the correct corresponding locale data.</source>
          <target state="translated">Angularは、標準&lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47に&lt;/a&gt;基づく安定した識別子（Unicodeロケール識別子）を使用するUnicode LDML規則に従います。Angular i18nツールはこのロケールIDを使用して、対応する正しいロケールデータを見つけるため、ロケールを定義するときはこの規則に従うことが非常に重要です。</target>
        </trans-unit>
        <trans-unit id="e5403b18984f04aca1cbbd4e8aad53057e69dc66" translate="yes" xml:space="preserve">
          <source>Angular forms allow you to:</source>
          <target state="translated">Angularのフォームで可能になります。</target>
        </trans-unit>
        <trans-unit id="e1a9dce4e9c4b6bdfc09512c4aaf5cc2e6bb0b2e" translate="yes" xml:space="preserve">
          <source>Angular forms don't require a style library</source>
          <target state="translated">Angularフォームはスタイルライブラリを必要としない</target>
        </trans-unit>
        <trans-unit id="a53bf8fe33eabf51e7d2da4584dccc79ed01e757" translate="yes" xml:space="preserve">
          <source>Angular functions for animating multiple elements start with &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to find inner elements, for example gathering all images within a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. The remaining functions, &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt;, &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, apply cascades or allow you to control how multiple animation steps are applied.</source>
          <target state="translated">複数の要素をアニメーション化する角度関数は、内部要素を検索するための &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; で始まります。たとえば、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 内のすべての画像を収集します。残りの関数である &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 、&lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; は、カスケードを適用するか、複数のアニメーションステップの適用方法を制御できるようにします。</target>
        </trans-unit>
        <trans-unit id="347ddc68bb0465a1bdad6eaa3b2963e0159918e2" translate="yes" xml:space="preserve">
          <source>Angular fundamentals</source>
          <target state="translated">Angularの基礎知識</target>
        </trans-unit>
        <trans-unit id="6bd9d0319f292ad5b74842fe2d764295ebf9d611" translate="yes" xml:space="preserve">
          <source>Angular generates a class factory in a separate module and that factory &lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;can only access exported classes&lt;/a&gt;. To correct this error, export the referenced class.</source>
          <target state="translated">Angularは別のモジュールでクラスファクトリを生成し、そのファクトリ&lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;はエクスポートされたクラスにのみアクセスできます&lt;/a&gt;。このエラーを修正するには、参照されているクラスをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="952768c15a2572a986f6ae3389d91e52e5d8c2ee" translate="yes" xml:space="preserve">
          <source>Angular generates a class factory in a separate module and that factory &lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;can only access exported functions&lt;/a&gt;. To correct this error, export the function.</source>
          <target state="translated">Angularは別のモジュールでクラスファクトリを生成し、そのファクトリ&lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;はエクスポートされた関数にのみアクセスできます&lt;/a&gt;。このエラーを修正するには、関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="a776357d683de5262cf58f9728286d0531d34b15" translate="yes" xml:space="preserve">
          <source>Angular generation &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; are instructions for modifying a project by adding files or modifying existing files. Individual schematics for the default Angular CLI &lt;code&gt;ng generate&lt;/code&gt; sub-commands are collected in the package &lt;code&gt;@angular&lt;/code&gt;. Specify the schematic name for a subcommand in the format &lt;code&gt;schematic-package:schematic-name&lt;/code&gt;; for example, the schematic for generating a component is &lt;code&gt;@angular:component&lt;/code&gt;.</source>
          <target state="translated">角度生成&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;は、ファイルを追加したり、既存のファイルを変更したりしてプロジェクトを変更するための手順です。デフォルトのAngular CLI &lt;code&gt;ng generate&lt;/code&gt; サブコマンドの個々の回路図は、パッケージ &lt;code&gt;@angular&lt;/code&gt; に収集されます。サブコマンドの回路図名を、Schematic &lt;code&gt;schematic-package:schematic-name&lt;/code&gt; 形式で指定します。たとえば、コンポーネントを生成するための回路図は &lt;code&gt;@angular:component&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="089b7f9bea4b756f67f9eed4c52f2969b5e785ba" translate="yes" xml:space="preserve">
          <source>Angular has a hierarchical injection system. There can be injectors at multiple levels, from the root injector created by the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; down through the component tree.</source>
          <target state="translated">Angularには階層的な注入システムがあります。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; によって作成されたルートインジェクターからコンポーネントツリーまで、複数のレベルにインジェクターを配置できます。</target>
        </trans-unit>
        <trans-unit id="8203852c3d2c9dbdc69314b56a03f0403dac7220" translate="yes" xml:space="preserve">
          <source>Angular has an &lt;a href=&quot;router&quot;&gt;all-new router&lt;/a&gt;.</source>
          <target state="translated">Angularには&lt;a href=&quot;router&quot;&gt;まったく新しいルーターがあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0aa5ff740e38d6d18edbfc10a1644f100e11e1f4" translate="yes" xml:space="preserve">
          <source>Angular has been creating new instances of the real &lt;code&gt;HeroDetailService&lt;/code&gt; all along!</source>
          <target state="translated">Angularは、本物の &lt;code&gt;HeroDetailService&lt;/code&gt; の新しいインスタンスをずっと作成してきました！</target>
        </trans-unit>
        <trans-unit id="a5090fe3d42da3f7912eb530ce278090a19f01ff" translate="yes" xml:space="preserve">
          <source>Angular has built-in support to help prevent two common HTTP vulnerabilities, cross-site request forgery (CSRF or XSRF) and cross-site script inclusion (XSSI). Both of these must be mitigated primarily on the server side, but Angular provides helpers to make integration on the client side easier.</source>
          <target state="translated">Angularには、クロスサイトリクエストフォージェリ(CSRFまたはXSRF)とクロスサイトスクリプトインクルージョン(XSSI)という2つの一般的なHTTP脆弱性を防ぐためのサポートが組み込まれています。これらはどちらも主にサーバ側で緩和する必要がありますが、Angularはクライアント側での統合を容易にするヘルパーを提供しています。</target>
        </trans-unit>
        <trans-unit id="75f9cada0487eab03f3583131e1b6541f4ca7704" translate="yes" xml:space="preserve">
          <source>Angular has its own vocabulary. Most Angular terms are common English words or computing terms that have a specific meaning within the Angular system.</source>
          <target state="translated">Angularには独自の語彙があります。Angularの用語のほとんどは、一般的な英単語や、Angularシステム内で特定の意味を持つコンピューティング用語です。</target>
        </trans-unit>
        <trans-unit id="36cef403a50f03b999516ba0de6de9a10a58c8db" translate="yes" xml:space="preserve">
          <source>Angular has more pre-defined directives that either alter the layout structure (for example, &lt;a href=&quot;built-in-directives#ngSwitch&quot;&gt;ngSwitch&lt;/a&gt;) or modify aspects of DOM elements and components (for example, &lt;a href=&quot;built-in-directives#ngStyle&quot;&gt;ngStyle&lt;/a&gt; and &lt;a href=&quot;built-in-directives#ngClass&quot;&gt;ngClass&lt;/a&gt;).</source>
          <target state="translated">Angularには、レイアウト構造を変更する（たとえば、&lt;a href=&quot;built-in-directives#ngSwitch&quot;&gt;ngSwitch&lt;/a&gt;）か、DOM要素とコンポーネントの側面を変更する（たとえば、&lt;a href=&quot;built-in-directives#ngStyle&quot;&gt;ngStyle&lt;/a&gt;と&lt;a href=&quot;built-in-directives#ngClass&quot;&gt;ngClass&lt;/a&gt;）、より多くの事前定義されたディレクティブがあります。</target>
        </trans-unit>
        <trans-unit id="020323b35fdea984dabd628de596cd425d7e51fa" translate="yes" xml:space="preserve">
          <source>Angular has more pre-defined directives that either alter the layout structure (for example, &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;ngSwitch&lt;/a&gt;) or modify aspects of DOM elements and components (for example, &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;ngStyle&lt;/a&gt; and &lt;a href=&quot;template-syntax#ngClass&quot;&gt;ngClass&lt;/a&gt;).</source>
          <target state="translated">Angularには、レイアウト構造（&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;ngSwitchなど&lt;/a&gt;）を変更したり、DOM要素やコンポーネント（&lt;a href=&quot;template-syntax#ngStyle&quot;&gt;ngStyle&lt;/a&gt;や&lt;a href=&quot;template-syntax#ngClass&quot;&gt;ngClassなど&lt;/a&gt;）の側面を変更したりする、事前定義されたディレクティブがあります。</target>
        </trans-unit>
        <trans-unit id="1686cbfe82438a65326efb7fbfc9ed594c24a6e5" translate="yes" xml:space="preserve">
          <source>Angular has true template input variables that are explicitly defined using the &lt;code&gt;let&lt;/code&gt; keyword.</source>
          <target state="translated">Angularには、 &lt;code&gt;let&lt;/code&gt; キーワードを使用して明示的に定義された真のテンプレート入力変数があります。</target>
        </trans-unit>
        <trans-unit id="9aa8ff3ec993f9613874918fdca308390a782abe" translate="yes" xml:space="preserve">
          <source>Angular ignores changes within (composite) objects. It won't call a pure pipe if you change an input month, add to an input array, or update an input object property.</source>
          <target state="translated">Angularは(複合)オブジェクト内の変更を無視します。入力月を変更したり、入力配列に追加したり、入力オブジェクトのプロパティを更新したりしても、ピュアパイプは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="b9ea659473cf06cf26e6026f2da7a0eb79db0ddc" translate="yes" xml:space="preserve">
          <source>Angular instead inspects directive and component classes and calls the hook methods &lt;em&gt;if they are defined&lt;/em&gt;. Angular finds and calls methods like &lt;code&gt;ngOnInit()&lt;/code&gt;, with or without the interfaces.</source>
          <target state="translated">代わりに、Angularはディレクティブとコンポーネントクラスを検査し、フックメソッド&lt;em&gt;が定義されている場合はそれら&lt;/em&gt;を呼び出します。Angularは &lt;code&gt;ngOnInit()&lt;/code&gt; のようなメソッドをインターフェースの有無にかかわらず見つけて呼び出します。</target>
        </trans-unit>
        <trans-unit id="9d2787f184c1925b33fab871a39bcac0b55b64cf" translate="yes" xml:space="preserve">
          <source>Angular invokes the &lt;code&gt;transform&lt;/code&gt; method with the value of a binding as the first argument, and any parameters as the second argument in list form, and returns the transformed value.</source>
          <target state="translated">Angularは、バインディングの値を最初の引数として、パラメーターを2番目の引数としてリスト形式で &lt;code&gt;transform&lt;/code&gt; メソッドを呼び出し、変換された値を返します。</target>
        </trans-unit>
        <trans-unit id="5b42b26f4e53b4e9e433f908be1ae23996faf473" translate="yes" xml:space="preserve">
          <source>Angular is a collection of many packages, sub-projects, and tools. To prevent accidental use of private APIs&amp;mdash;and so that you can clearly understand what is covered by the practices described here&amp;mdash;we document what is and is not considered our public API surface. For details, see &lt;a href=&quot;https://github.com/angular/angular/blob/master/docs/PUBLIC_API.md&quot;&gt;Supported Public API Surface of Angular&lt;/a&gt;.</source>
          <target state="translated">Angularは、多くのパッケージ、サブプロジェクト、ツールのコレクションです。プライベートAPIの誤った使用を防ぐために、そしてここで説明するプラクティスの対象を明確に理解できるようにするために、パブリックAPIサーフェスと見なされないものを文書化します。詳細については、&lt;a href=&quot;https://github.com/angular/angular/blob/master/docs/PUBLIC_API.md&quot;&gt;サポートされているAngularのパブリックAPIサーフェスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cedb8ef1bd5824f0f32e164656ec8ed996c2415d" translate="yes" xml:space="preserve">
          <source>Angular is a platform and framework for building client applications in HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your apps.</source>
          <target state="translated">AngularはHTMLとTypeScriptでクライアントアプリケーションを構築するためのプラットフォームとフレームワークです。AngularはTypeScriptで書かれています。コア機能とオプション機能を、アプリにインポートするTypeScriptライブラリのセットとして実装しています。</target>
        </trans-unit>
        <trans-unit id="c09e1dc78236e7af0800454292bf644c4910bcee" translate="yes" xml:space="preserve">
          <source>Angular is a platform and framework for building single-page client applications using HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your apps.</source>
          <target state="translated">AngularはHTMLとTypeScriptを使ってシングルページのクライアントアプリケーションを構築するためのプラットフォームとフレームワークです。AngularはTypeScriptで書かれています。コア機能とオプション機能を、アプリにインポートするTypeScriptライブラリのセットとして実装しています。</target>
        </trans-unit>
        <trans-unit id="944adaf5cf94f6c56a0403bf343031231a5680bd" translate="yes" xml:space="preserve">
          <source>Angular is a reimagined version of the best parts of AngularJS. In that sense, its goals are the same as the AngularJS Style Guide's: To preserve the good parts of AngularJS, and to avoid the bad parts. There's a lot more to Angular than just that of course, but this does mean that &lt;em&gt;following the style guide helps make your AngularJS app more closely aligned with Angular&lt;/em&gt;.</source>
          <target state="translated">Angularは、AngularJSの最良の部分を再考したバージョンです。その意味では、その目標はAngularJSスタイルガイドの目標と同じです。AngularJSの良い部分を維持し、悪い部分を避けることです。もちろん、Angularにはそれ以外にも多くの機能がありますが、これは&lt;em&gt;、スタイルガイドに従うことで、AngularJSアプリをAngularとより密接に連携させることができる&lt;/em&gt;ことを意味し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e88edc1d9d2323834676f35f85d122a43a5b00b3" translate="yes" xml:space="preserve">
          <source>Angular is an application design framework and development platform for creating efficient and sophisticated single-page apps.</source>
          <target state="translated">Angularは、効率的で洗練されたシングルページのアプリを作成するためのアプリケーションデザインフレームワークと開発プラットフォームです。</target>
        </trans-unit>
        <trans-unit id="cdbe94ed1821482a4bf72519359a4832dfb721ff" translate="yes" xml:space="preserve">
          <source>Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the root component of the application.</source>
          <target state="translated">Angularは最初にブートストラップされ、AngularJSは2番目にブートストラップされます。AngularJSは常にアプリケーションのルートコンポーネントを所有しています。</target>
        </trans-unit>
        <trans-unit id="67c408d51f3d9541622ae37dc07fd998e2b6d4a6" translate="yes" xml:space="preserve">
          <source>Angular is built on the latest standards of the web platform. Targeting such a wide range of browsers is challenging because they do not support all features of modern browsers. You compensate by loading polyfill scripts (&quot;polyfills&quot;) for the browsers that you must support. The &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;table below&lt;/a&gt; identifies most of the polyfills you might need.</source>
          <target state="translated">Angularは、Webプラットフォームの最新の標準に基づいて構築されています。このような幅広いブラウザーをターゲットにすることは、最新のブラウザーのすべての機能をサポートしているわけではないため、困難です。サポートする必要のあるブラウザ用のポリフィルスクリプト（「ポリフィル」）をロードすることで補正します。&lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;以下&lt;/a&gt;の表は、必要になる可能性のあるほとんどのポリフィルを示しています。</target>
        </trans-unit>
        <trans-unit id="e7c5a8227c920abc2ab831e8b743010e5cec1f51" translate="yes" xml:space="preserve">
          <source>Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in larger projects when conditionally including or excluding big chunks of HTML with many data bindings.</source>
          <target state="translated">Angularはメッセージを表示したり隠したりしていません。DOMからパラグラフ要素を追加したり削除したりしています。これはパフォーマンスを向上させます。特に大規模なプロジェクトで、多くのデータバインディングを持つ大きな HTML の塊を条件付きで含めたり、除外したりする場合に有効です。</target>
        </trans-unit>
        <trans-unit id="bfddc46758f816dd29441664cdec5b402661cdef" translate="yes" xml:space="preserve">
          <source>Angular knows that the &lt;code&gt;defaultColor&lt;/code&gt; binding belongs to the &lt;code&gt;HighlightDirective&lt;/code&gt; because you made it &lt;em&gt;public&lt;/em&gt; with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">Angular は、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;デコレーターでpublicColorを&lt;em&gt;公開&lt;/em&gt;したため、 &lt;code&gt;defaultColor&lt;/code&gt; バインディングが &lt;code&gt;HighlightDirective&lt;/code&gt; に属していることを認識しています。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6520112c4953366a0de588a54b18493a41a7c8f8" translate="yes" xml:space="preserve">
          <source>Angular libraries</source>
          <target state="translated">Angular ライブラリ</target>
        </trans-unit>
        <trans-unit id="3f426e8d596d5b3588e555663b8f3b96dfed3e9f" translate="yes" xml:space="preserve">
          <source>Angular libraries are NgModules, such as &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. Many third-party libraries are available as NgModules such as &lt;a href=&quot;https://material.angular.io/&quot;&gt;Material Design&lt;/a&gt;, &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt;, and &lt;a href=&quot;https://github.com/angular/angularfire2&quot;&gt;AngularFire2&lt;/a&gt;.</source>
          <target state="translated">Angularライブラリは、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; などのNgModuleです。多くのサードパーティのライブラリは、以下のようなNgModulesとして利用できる&lt;a href=&quot;https://material.angular.io/&quot;&gt;材料設計&lt;/a&gt;、&lt;a href=&quot;http://ionicframework.com/&quot;&gt;イオン性&lt;/a&gt;、および&lt;a href=&quot;https://github.com/angular/angularfire2&quot;&gt;AngularFire2&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dad4b4472bc88f1f5698b422a998c38c20704e3c" translate="yes" xml:space="preserve">
          <source>Angular libraries have this option to ensure that all Angular &lt;code&gt;.metadata.json&lt;/code&gt; files are clean and it is a best practice to do the same when building your own libraries.</source>
          <target state="translated">Angularライブラリにはこのオプションがあり、Angularのすべての &lt;code&gt;.metadata.json&lt;/code&gt; ファイルがクリーンであることを確認できます。独自のライブラリを構築する場合も同じようにすることがベストプラクティスです。</target>
        </trans-unit>
        <trans-unit id="be3f78b53fc2c577daabc8bc52b4aa660d4e9dae" translate="yes" xml:space="preserve">
          <source>Angular libraries should list all &lt;code&gt;@angular/*&lt;/code&gt; dependencies as peer dependencies. This ensures that when modules ask for Angular, they all get the exact same module. If a library lists &lt;code&gt;@angular/core&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;peerDependencies&lt;/code&gt;, it might get a different Angular module instead, which would cause your application to break.</source>
          <target state="translated">Angularライブラリは、すべての &lt;code&gt;@angular/*&lt;/code&gt; 依存関係をピア依存関係としてリストする必要があります。これにより、モジュールがAngularを要求するときに、すべてがまったく同じモジュールを取得することが保証されます。ライブラリが &lt;code&gt;peerDependencies&lt;/code&gt; ではなく &lt;code&gt;@angular/core&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; にリストしている場合は、代わりに別のAngularモジュールを取得する可能性があり、これによりアプリケーションが壊れます。</target>
        </trans-unit>
        <trans-unit id="440b921c958820163daec667135fde70d6e18758" translate="yes" xml:space="preserve">
          <source>Angular libraries should list all &lt;code&gt;@angular/*&lt;/code&gt; dependencies as peer dependencies. This ensures that when modules ask for Angular, they all get the exact same module. If a library lists &lt;code&gt;@angular/core&lt;/code&gt; in &lt;code&gt;dependencies&lt;/code&gt; instead of &lt;code&gt;peerDependencies&lt;/code&gt;, it might get a different Angular module instead, which would cause your application to break.</source>
          <target state="translated">Angularライブラリは、すべての &lt;code&gt;@angular/*&lt;/code&gt; 依存関係をピア依存関係としてリストする必要があります。これにより、モジュールがAngularを要求したときに、すべてのモジュールがまったく同じモジュールを取得することが保証されます。ライブラリリスト場合は &lt;code&gt;@angular/core&lt;/code&gt; 中 &lt;code&gt;dependencies&lt;/code&gt; の代わりに、 &lt;code&gt;peerDependencies&lt;/code&gt; 、それはあなたのアプリケーションが破損する原因と思われる、代わりに異なる角度のモジュールを取得する可能性があります。</target>
        </trans-unit>
        <trans-unit id="29d44f7fda091b59312a3e7e208e6d0e349017ad" translate="yes" xml:space="preserve">
          <source>Angular libraries use Ivy</source>
          <target state="translated">AngularのライブラリはIvyを使用しています。</target>
        </trans-unit>
        <trans-unit id="a25634352050885006a3b6152b0eb2a9010080c0" translate="yes" xml:space="preserve">
          <source>Angular loads a component declaratively when using the component's selector to locate the element in the template. Angular then creates the HTML representation of the component and inserts it into the DOM at the selected element. These aren't entry components.</source>
          <target state="translated">Angularはコンポーネントのセレクタを使ってテンプレート内の要素を探す際に宣言的にコンポーネントをロードします。AngularはコンポーネントのHTML表現を作成し、選択された要素のDOMに挿入します。これらはエントリーコンポーネントではありません。</target>
        </trans-unit>
        <trans-unit id="995f2b8032fa111ae2d621211fc7064ea0317af9" translate="yes" xml:space="preserve">
          <source>Angular loads a root &lt;code&gt;AppComponent&lt;/code&gt; dynamically because it's listed by type in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular は &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrapに&lt;/a&gt;タイプ別にリストされているため、ルート &lt;code&gt;AppComponent&lt;/code&gt; を動的にロードします。</target>
        </trans-unit>
        <trans-unit id="08a4bd02cf20c2f65095b4e5963e1bb2afe416d9" translate="yes" xml:space="preserve">
          <source>Angular loads as a collection of JavaScript modules. You can think of them as library modules. Each Angular library name begins with the &lt;code&gt;@angular&lt;/code&gt; prefix. Install them with the node package manager &lt;code&gt;npm&lt;/code&gt; and import parts of them with JavaScript &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">AngularはJavaScriptモジュールのコレクションとして読み込まれます。これらはライブラリモジュールと考えることができます。各Angularライブラリ名は、 &lt;code&gt;@angular&lt;/code&gt; プレフィックスで始まります。それらをノードパッケージマネージャー &lt;code&gt;npm&lt;/code&gt; でインストールし、JavaScript &lt;code&gt;import&lt;/code&gt; ステートメントでそれらの一部をインポートします。</target>
        </trans-unit>
        <trans-unit id="34efda63681d11b2077d5df610262c0a6c29b126" translate="yes" xml:space="preserve">
          <source>Angular looks for changes to data-bound values in a &lt;a href=&quot;glossary#change-detection&quot;&gt;change detection&lt;/a&gt; process that runs after every DOM event: every keystroke, mouse move, timer tick, and server response. The following example, which doesn't use a pipe, demonstrates how Angular uses its default change detection strategy to monitor and update its display of every hero in the &lt;code&gt;heroes&lt;/code&gt; array. The example tabs show the following:</source>
          <target state="translated">Angularは、すべてのDOMイベント（すべてのキーストローク、マウスの移動、タイマーティック、サーバー応答）の後に実行される&lt;a href=&quot;glossary#change-detection&quot;&gt;変更検出&lt;/a&gt;プロセスで、データバインドされた値への変更を探します。パイプを使用しない次の例は、Angularがデフォルトの変更検出戦略を使用して、 &lt;code&gt;heroes&lt;/code&gt; 配列内のすべてのヒーローの表示を監視および更新する方法を示しています。タブの例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="853e166961741611ece2f458d671b607ed487c72" translate="yes" xml:space="preserve">
          <source>Angular looks for changes to data-bound values through a &lt;em&gt;change detection&lt;/em&gt; process that runs after every DOM event: every keystroke, mouse move, timer tick, and server response. This could be expensive. Angular strives to lower the cost whenever possible and appropriate.</source>
          <target state="translated">Angularは、すべてのDOMイベント（すべてのキーストローク、マウスの移動、タイマーの目盛り、サーバーの応答）の後に実行される&lt;em&gt;変更検出&lt;/em&gt;プロセスを通じて、データにバインドされた値への変更を探します。これは高価になる可能性があります。Angularは可能な限り適切な場合はいつでもコストを下げるよう努めています。</target>
        </trans-unit>
        <trans-unit id="698612677c72d7d99a71306fe64680c45b867fa2" translate="yes" xml:space="preserve">
          <source>Angular makes no use of the &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt; classes or the styles of any external library. Angular apps can use any CSS library or none at all.</source>
          <target state="translated">Angularは、 &lt;code&gt;container&lt;/code&gt; 、 &lt;code&gt;form-group&lt;/code&gt; 、 &lt;code&gt;form-control&lt;/code&gt; 、 &lt;code&gt;btn&lt;/code&gt; クラス、または外部ライブラリのスタイルを使用しません。Angularアプリは、CSSライブラリを使用することも、まったく使用しないこともできます。</target>
        </trans-unit>
        <trans-unit id="d8d1474460cc15db876a17834bf926386371bf34" translate="yes" xml:space="preserve">
          <source>Angular makes the process easy by handling many of the repetitive, boilerplate tasks you'd otherwise wrestle with yourself.</source>
          <target state="translated">Angularを使うことで、通常であれば自分自身と格闘しなければならないような反復的な定型的なタスクの多くを処理することができ、プロセスを簡単にすることができるようになります。</target>
        </trans-unit>
        <trans-unit id="733393efef5ce43977efcba35cca922753ae83e7" translate="yes" xml:space="preserve">
          <source>Angular makes use of observables as an interface to handle a variety of common asynchronous operations. For example:</source>
          <target state="translated">Angularは様々な一般的な非同期操作を扱うためのインターフェイスとしてobservablesを利用しています。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c952b87a2d4235b4fa18e60db17580ca8f99e1d9" translate="yes" xml:space="preserve">
          <source>Angular modularity</source>
          <target state="translated">アンギュラモジュラー</target>
        </trans-unit>
        <trans-unit id="f60bec56de0d46a0d6f36063b2d445f9aa6ecf52" translate="yes" xml:space="preserve">
          <source>Angular modules</source>
          <target state="translated">Angularモジュール</target>
        </trans-unit>
        <trans-unit id="5d2b463cfcddb80a14ef8505352142925769b3e0" translate="yes" xml:space="preserve">
          <source>Angular needs to know how the pieces of your application fit together and what other files and libraries the app requires. This information is called &lt;em&gt;metadata&lt;/em&gt;.</source>
          <target state="translated">Angularは、アプリケーションの各部分がどのように組み合わされているか、およびアプリが必要とする他のファイルとライブラリを知る必要があります。この情報は&lt;em&gt;メタデータ&lt;/em&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c8907e4049cbb49a2de258115f28db0236a6b67a" translate="yes" xml:space="preserve">
          <source>Angular offers &lt;strong&gt;lifecycle hooks&lt;/strong&gt; that provide visibility into these key life moments and the ability to act when they occur.</source>
          <target state="translated">Angularは、これらの重要なライフモーメントとそれらが発生したときに行動する能力を可視化する&lt;strong&gt;ライフサイクルフック&lt;/strong&gt;を提供します。</target>
        </trans-unit>
        <trans-unit id="d76e449c5b5a82a11aa58826c48ff9172d4b34e4" translate="yes" xml:space="preserve">
          <source>Angular offers a special &lt;em&gt;two-way data binding&lt;/em&gt; syntax for this purpose, &lt;code&gt;[()]&lt;/code&gt;. The &lt;code&gt;[()]&lt;/code&gt; syntax combines the brackets of property binding, &lt;code&gt;[]&lt;/code&gt;, with the parentheses of event binding, &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">Angularは、この目的のために特別な&lt;em&gt;双方向データバインディング&lt;/em&gt;構文を提供しています &lt;code&gt;[()]&lt;/code&gt; 。 &lt;code&gt;[()]&lt;/code&gt; 構文は、結合性のブラケットを結合 &lt;code&gt;[]&lt;/code&gt; 、結合事象の括弧で、 &lt;code&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b96c491c78ad4254c4a00563220ea3cb04a021b" translate="yes" xml:space="preserve">
          <source>Angular offers many more capabilities, and you now have a foundation that empowers you to build an application and explore those other capabilities:</source>
          <target state="translated">Angularはさらに多くの機能を提供しており、アプリケーションを構築して他の機能を探索するための基盤を手に入れることができます。</target>
        </trans-unit>
        <trans-unit id="b54553b1cb0eae873f191d62095e66d3e101c047" translate="yes" xml:space="preserve">
          <source>Angular offers two kinds of built-in directives: &lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directives&lt;/a&gt; and &lt;a href=&quot;structural-directives&quot;&gt;&lt;em&gt;structural&lt;/em&gt; directives&lt;/a&gt;.</source>
          <target state="translated">Angularには、&lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;属性&lt;/em&gt;ディレクティブ&lt;/a&gt;と&lt;a href=&quot;structural-directives&quot;&gt;&lt;em&gt;構造&lt;/em&gt;ディレクティブの&lt;/a&gt;2種類の組み込みディレクティブがあります。</target>
        </trans-unit>
        <trans-unit id="abc451db75214bb8f5bb03f627de0240f5b091b0" translate="yes" xml:space="preserve">
          <source>Angular offers two kinds of built-in directives: attribute directives and structural directives. This segment reviews some of the most common built-in directives, classified as either &lt;a href=&quot;template-syntax#attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directives&lt;/a&gt; or &lt;a href=&quot;template-syntax#structural-directives&quot;&gt;&lt;em&gt;structural&lt;/em&gt; directives&lt;/a&gt; and has its own &lt;span name=&quot;built-in-directives&quot;&gt;built-in directives example&lt;/span&gt;.</source>
          <target state="translated">Angularには、属性ディレクティブと構造ディレクティブの2種類の組み込みディレクティブがあります。このセグメントでは、&lt;a href=&quot;template-syntax#attribute-directives&quot;&gt;&lt;em&gt;属性&lt;/em&gt;ディレクティブ&lt;/a&gt;または&lt;a href=&quot;template-syntax#structural-directives&quot;&gt;&lt;em&gt;構造&lt;/em&gt;ディレクティブの&lt;/a&gt;いずれかに分類される最も一般的な組み込みディレクティブのいくつかをレビューし、独自の&lt;span name=&quot;built-in-directives&quot;&gt;組み込みディレクティブの例を示し&lt;/span&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f6ecdff766f22fe112f392e3b5f72cdc4a54fa55" translate="yes" xml:space="preserve">
          <source>Angular offers two ways to compile your application:</source>
          <target state="translated">Angularにはアプリケーションをコンパイルするための2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="46473abcb3dc6366d18741a180865bfdefc2a988" translate="yes" xml:space="preserve">
          <source>Angular only allows directives to apply on CSS selectors that do not cross element boundaries.</source>
          <target state="translated">Angularでは、要素の境界を越えないCSSセレクターにのみディレクティブを適用することができます。</target>
        </trans-unit>
        <trans-unit id="ab4a735a9f53cef22a8e09069eaf331c806e03b7" translate="yes" xml:space="preserve">
          <source>Angular only binds to &lt;em&gt;public&lt;/em&gt; component properties.</source>
          <target state="translated">Angularは&lt;em&gt;パブリック&lt;/em&gt;コンポーネントのプロパティにのみバインドします。</target>
        </trans-unit>
        <trans-unit id="0796c5a0e37f43354cb8a990d1da6f63a399b35c" translate="yes" xml:space="preserve">
          <source>Angular only calls the hook when the value of the input property changes. The value of the &lt;code&gt;hero&lt;/code&gt; property is the &lt;em&gt;reference to the hero object&lt;/em&gt;. Angular doesn't care that the hero's own &lt;code&gt;name&lt;/code&gt; property changed. The hero object &lt;em&gt;reference&lt;/em&gt; didn't change so, from Angular's perspective, there is no change to report!</source>
          <target state="translated">Angularは、入力プロパティの値が変更されたときにのみフックを呼び出します。 &lt;code&gt;hero&lt;/code&gt; プロパティの値は、&lt;em&gt;heroオブジェクトへの参照&lt;/em&gt;です。Angularは、ヒーロー自身の &lt;code&gt;name&lt;/code&gt; プロパティが変更されたことを気にしません。ヒーローオブジェクトの&lt;em&gt;参照&lt;/em&gt;は変更されなかったため、Angularの観点からは、レポートする変更はありません。</target>
        </trans-unit>
        <trans-unit id="73365649ff96710832ccaf130004428d6aa4b134" translate="yes" xml:space="preserve">
          <source>Angular only matches selectors and pipe names for classes that are declared by this module or exported by a module that this module imports.</source>
          <target state="translated">Angularは、このモジュールによって宣言されたクラスや、このモジュールがインポートしたモジュールによってエクスポートされたクラスのセレクタとパイプ名のみをマッチさせます。</target>
        </trans-unit>
        <trans-unit id="8f7a44453028015a36d7371b079e0572cb894294" translate="yes" xml:space="preserve">
          <source>Angular packages</source>
          <target state="translated">Angular パッケージ</target>
        </trans-unit>
        <trans-unit id="6b8abf66079d4d2aea96a3f990cecede4a31001d" translate="yes" xml:space="preserve">
          <source>Angular picks a simpler, faster change detection algorithm when you use a pipe.</source>
          <target state="translated">Angularはパイプを使用する際に、よりシンプルで高速な変更検出アルゴリズムを選択します。</target>
        </trans-unit>
        <trans-unit id="ef398c20fe5cffcede85fd0486274f77bc4fc926" translate="yes" xml:space="preserve">
          <source>Angular pipes can help you with internationalization: the &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; use locale data to format data based on the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">角パイプは国際化に役立ちます &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; はロケールデータを使用して、 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; に基づいてデータをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="356e1f5698485995ec39cd81b77ba95feef0a58a" translate="yes" xml:space="preserve">
          <source>Angular pipes let you declare display-value transformations in your template HTML. A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator defines a function that transforms input values to output values for display in a view.</source>
          <target state="translated">角パイプを使用すると、テンプレートのHTMLで表示値の変換を宣言できます。 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; デコレータを含むクラスは、ビューに表示するために入力値を出力値に変換する関数を定義します。</target>
        </trans-unit>
        <trans-unit id="4a45524e5e1533679255725c285e1a9a90ce6d59" translate="yes" xml:space="preserve">
          <source>Angular previously has supported an integration with the &lt;a href=&quot;https://google.github.io/tracing-framework/&quot;&gt;Web Tracing Framework (WTF)&lt;/a&gt; for performance testing of Angular applications. This integration has not been maintained and defunct. As a result, the integration was deprecated in Angular version 8 and due to no evidence of any existing usage removed in version 9.</source>
          <target state="translated">Angularは以前、Angularアプリケーションのパフォーマンステストのために&lt;a href=&quot;https://google.github.io/tracing-framework/&quot;&gt;Web Tracing Framework（WTF）&lt;/a&gt;との統合をサポートしていました。この統合は維持されておらず、機能していません。その結果、統合はAngularバージョン8で非推奨になり、バージョン9で既存の使用法が削除されたという証拠がなかったためです。</target>
        </trans-unit>
        <trans-unit id="991be4c3543e8e594fad4f932af19f57bb79c179" translate="yes" xml:space="preserve">
          <source>Angular previously has supported an integration with the Web Tracing Framework (WTF) for performance testing of Angular applications. This integration has not been maintained and likely does not work for the majority of Angular applications today. As a result, we are deprecating the integration in Angular version 8.</source>
          <target state="translated">Angularは以前、Angularアプリケーションのパフォーマンステスト用にWeb Tracing Framework (WTF)との統合をサポートしていました。この統合はメンテナンスされておらず、現在のAngularアプリケーションの大半では機能していない可能性が高いです。その結果、Angularバージョン8ではこの統合は非推奨となります。</target>
        </trans-unit>
        <trans-unit id="98ad75656ac46547061cbdeae1e7061decebb700" translate="yes" xml:space="preserve">
          <source>Angular previously supported a view encapsulation mode &lt;code&gt;ViewEncapsulaion.Native&lt;/code&gt; that was based on the v0 Shadow DOM Draft APIs. These APIs have been superceeded by the final Shadow DOM APIs, which are enabled via &lt;code&gt;&lt;a href=&quot;../api/core/viewencapsulation#ShadowDom&quot;&gt;ViewEncapsulation.ShadowDom&lt;/a&gt;&lt;/code&gt;. For background information about this change, see &lt;a href=&quot;https://developers.google.com/web/updates/2019/07/web-components-time-to-upgrade&quot;&gt;Web Components update: more time to upgrade to v1 APIs&lt;/a&gt;.</source>
          <target state="translated">Angularは以前、v0 Shadow DOM &lt;code&gt;ViewEncapsulaion.Native&lt;/code&gt; に基づいたビューカプセル化モードViewEncapsulaion.Nativeをサポートしていました。これらのAPIは、経由で有効になっている最後の影のDOM APIによってsuperceededされている &lt;code&gt;&lt;a href=&quot;../api/core/viewencapsulation#ShadowDom&quot;&gt;ViewEncapsulation.ShadowDom&lt;/a&gt;&lt;/code&gt; 。この変更の背景情報については、「&lt;a href=&quot;https://developers.google.com/web/updates/2019/07/web-components-time-to-upgrade&quot;&gt;Webコンポーネントの更新：v1APIにアップグレードするためのより多くの時間」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ab7532910f8e47c865be64a0bfffac882f25041" translate="yes" xml:space="preserve">
          <source>Angular processes &lt;em&gt;all&lt;/em&gt; data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components.</source>
          <target state="translated">Angular は、アプリケーションコンポーネントツリーのルートからすべての子コンポーネントまで、JavaScriptイベントサイクルごとに1回&lt;em&gt;すべての&lt;/em&gt;データバインディングを処理&lt;em&gt;し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4bfe0e1a65f34be08732e68dc2f47387fc26057f" translate="yes" xml:space="preserve">
          <source>Angular provides a built-in module loader that supports SystemJS to load modules asynchronously. If you were using another bundling tool, such as Webpack, you would use the Webpack mechanism for asynchronously loading modules.</source>
          <target state="translated">AngularにはSystemJSをサポートする組み込みのモジュールローダーがあり、モジュールを非同期にロードすることができます。Webpackのような別のバンドルツールを使用している場合は、非同期にモジュールをロードするためにWebpackのメカニズムを使用します。</target>
        </trans-unit>
        <trans-unit id="c71dd9205f0bd6822569474cf04a436f39b8d809" translate="yes" xml:space="preserve">
          <source>Angular provides a framework for single-page apps, where most of the logic and data resides on the client. Most apps still need to access a server using the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to access and save data. For some platforms and applications, you might also want to use the PWA (Progressive Web App) model to improve the user experience.</source>
          <target state="translated">Angularは、ほとんどのロジックとデータがクライアントに存在するシングルページアプリのフレームワークを提供します。ほとんどのアプリは、データにアクセスして保存するために、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用してサーバーにアクセスする必要があります。一部のプラットフォームおよびアプリケーションでは、PWA（プログレッシブWebアプリ）モデルを使用してユーザーエクスペリエンスを向上させることもできます。</target>
        </trans-unit>
        <trans-unit id="26ab5724f97b042d8e6c3e60e5d984f689e157a5" translate="yes" xml:space="preserve">
          <source>Angular provides a number of built-in injection-token constants that you can use to customize the behavior of various systems.</source>
          <target state="translated">Angularには、様々なシステムの動作をカスタマイズするために使用できるインジェクショントークン定数が多数組み込まれています。</target>
        </trans-unit>
        <trans-unit id="b3c5e069bb7f86fbf8b8fc59544cf9cae9badc49" translate="yes" xml:space="preserve">
          <source>Angular provides a set of schematics for use with the CLI. See the &lt;a href=&quot;cli&quot;&gt;Angular CLI command reference&lt;/a&gt;. The &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command runs schematics as part of adding a library to your project. The &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate&lt;/code&gt;&lt;/a&gt; command runs schematics to create apps, libraries, and Angular code constructs.</source>
          <target state="translated">Angularは、CLIで使用するための一連の回路図を提供します。&lt;a href=&quot;cli&quot;&gt;Angular CLIコマンドリファレンスを&lt;/a&gt;ご覧ください。&lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt;コマンドは、プロジェクトにライブラリを追加することの一部として、回路図を実行します。&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate&lt;/code&gt; &lt;/a&gt;アプリケーション、ライブラリ、および角度コード構成を作成するには、コマンドの実行回路図を。</target>
        </trans-unit>
        <trans-unit id="542775cd7da8f6f4765aa0bb672705ccbe83ec20" translate="yes" xml:space="preserve">
          <source>Angular provides advanced capabilities for mobile apps, animation, internationalization, server-side rendering, and more.</source>
          <target state="translated">Angularはモバイルアプリ、アニメーション、国際化、サーバーサイドレンダリングなどの高度な機能を提供します。</target>
        </trans-unit>
        <trans-unit id="3de379101dcba483b91ed5758dac0e3158b96650" translate="yes" xml:space="preserve">
          <source>Angular provides an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; class that is used when publishing values from a component through the &lt;a href=&quot;inputs-outputs#output&quot;&gt;&lt;code&gt;@Output()&lt;/code&gt; decorator&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; extends &lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt;, adding an &lt;code&gt;emit()&lt;/code&gt; method so it can send arbitrary values. When you call &lt;code&gt;emit()&lt;/code&gt;, it passes the emitted value to the &lt;code&gt;next()&lt;/code&gt; method of any subscribed observer.</source>
          <target state="translated">Angularは、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;inputs-outputs#output&quot;&gt; &lt;code&gt;@Output()&lt;/code&gt; デコレータを&lt;/a&gt;介してコンポーネントから値を公開するときに使用されるEventEmitterクラスを提供します。 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 延び&lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJSの &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;追加、 &lt;code&gt;emit()&lt;/code&gt; が任意の値を送ることができるようにする方法を。放出された値を &lt;code&gt;emit()&lt;/code&gt; を呼び出すと、サブスクライブされたオブザーバーの &lt;code&gt;next()&lt;/code&gt; メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="dd1639fcd16106284432fd62af8a0553b09d8af2" translate="yes" xml:space="preserve">
          <source>Angular provides an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; class that is used when publishing values from a component through the &lt;a href=&quot;template-syntax#how-to-use-output&quot;&gt;&lt;code&gt;@Output()&lt;/code&gt; decorator&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; extends &lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt;, adding an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; method so it can send arbitrary values. When you call &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt;, it passes the emitted value to the &lt;code&gt;next()&lt;/code&gt; method of any subscribed observer.</source>
          <target state="translated">Angularは、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;template-syntax#how-to-use-output&quot;&gt; &lt;code&gt;@Output()&lt;/code&gt; デコレーターを&lt;/a&gt;介してコンポーネントから値を公開するときに使用されるEventEmitterクラスを提供します。 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;を拡張し、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; メソッドを追加して、任意の値を送信できるようにします。 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; を呼び出すと、サブスクライブされたオブザーバの &lt;code&gt;next()&lt;/code&gt; メソッドに発行された値が渡されます。</target>
        </trans-unit>
        <trans-unit id="dd1128121ec9058a99f03a8e0d5165e2fca8f13c" translate="yes" xml:space="preserve">
          <source>Angular provides built-in pipes for typical data transformations, including transformations for internationalization (i18n), which use locale information to format data. The following are commonly used built-in pipes for data formatting:</source>
          <target state="translated">Angularには、ロケール情報を利用してデータをフォーマットする国際化のための変換(i18n)など、典型的なデータ変換のための組み込みパイプが用意されています。データのフォーマットによく使われるビルトインパイプは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="3ee46a639825d9725e9da43cb62b0f60f904e60a" translate="yes" xml:space="preserve">
          <source>Angular provides many kinds of data-binding. Binding types can be grouped into three categories distinguished by the direction of data flow:</source>
          <target state="translated">Angularは多くの種類のデータバインディングを提供しています。バインディングの種類は、データの流れの方向によって3つのカテゴリーに分けられます。</target>
        </trans-unit>
        <trans-unit id="eb6bbbf3a5e95ea73ec84dc48e2d08bd47f217b5" translate="yes" xml:space="preserve">
          <source>Angular provides some builders that are used by the CLI for commands such as &lt;code&gt;ng build&lt;/code&gt;, &lt;code&gt;ng test&lt;/code&gt;, and &lt;code&gt;ng lint&lt;/code&gt;. Default target configurations for these and other built-in CLI builders can be found (and customized) in the &quot;architect&quot; section of the &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration file&lt;/a&gt;, &lt;code&gt;angular.json&lt;/code&gt;. You can also extend and customize Angular by creating your own builders, which you can run using the &lt;a href=&quot;cli/run&quot;&gt;&lt;code&gt;ng run&lt;/code&gt; CLI command&lt;/a&gt;.</source>
          <target state="translated">Angularには、CLIが &lt;code&gt;ng build&lt;/code&gt; 、 &lt;code&gt;ng test&lt;/code&gt; 、 &lt;code&gt;ng lint&lt;/code&gt; などのコマンドに使用するビルダーがいくつか用意されています。内蔵のCLIビルダーこれらおよびその他のデフォルトのターゲット設定が見つかりました。（カスタマイズ）することができますの「建築家」セクションで&lt;a href=&quot;workspace-config&quot;&gt;、ワークスペースの設定ファイル&lt;/a&gt;、 &lt;code&gt;angular.json&lt;/code&gt; 。&lt;a href=&quot;cli/run&quot;&gt; &lt;code&gt;ng run&lt;/code&gt; CLIコマンド&lt;/a&gt;を使用して実行できる独自のビルダーを作成して、Angularを拡張およびカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="54e1fe50f3cab60a422c1f61c16b90ad321a060b" translate="yes" xml:space="preserve">
          <source>Angular provides some injectable abstractions over these objects, such as &lt;a href=&quot;../api/common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../api/common/document&quot;&gt;&lt;code&gt;DOCUMENT&lt;/code&gt;&lt;/a&gt;; it may substitute adequately for these APIs. If Angular doesn't provide it, it's possible to write new abstractions that delegate to the browser APIs while in the browser and to an alternative implementation while on the server (aka shimming).</source>
          <target state="translated">Angularは、&lt;a href=&quot;../api/common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../api/common/document&quot;&gt; &lt;code&gt;DOCUMENT&lt;/code&gt; &lt;/a&gt;など、これらのオブジェクトに対していくつかの注入可能な抽象化を提供します。これらのAPIを適切に置き換えることができます。Angularがそれを提供しない場合、ブラウザ内にある間はブラウザAPIに、サーバー上にある間は別の実装（別名シミング）に委任する新しい抽象化を作成することが可能です。</target>
        </trans-unit>
        <trans-unit id="0d8f440b029f6084e216f022e4aad088e8ed5e77" translate="yes" xml:space="preserve">
          <source>Angular provides the &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function for converting an Angular component, together with its dependencies, to a custom element. The function collects the component's observable properties, along with the Angular functionality the browser needs to create and destroy instances, and to detect and respond to changes.</source>
          <target state="translated">Angularは、Angularコンポーネントをその依存関係とともにカスタム要素に変換するための &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 関数を提供します。この関数は、コンポーネントの監視可能なプロパティと、ブラウザーがインスタンスを作成および破棄し、変更を検出してそれに応答するために必要なAngular機能を収集します。</target>
        </trans-unit>
        <trans-unit id="75ebcd58fdf52db86f77be2b9791ff7cb86491f4" translate="yes" xml:space="preserve">
          <source>Angular provides the following built-in data transformation &lt;a href=&quot;glossary#pipe&quot;&gt;pipes&lt;/a&gt; that use the &lt;a href=&quot;../api/core/locale_id&quot;&gt;&lt;code&gt;LOCALE_ID&lt;/code&gt;&lt;/a&gt; token to format data according to the locale's rules:</source>
          <target state="translated">Angularは、&lt;a href=&quot;../api/core/locale_id&quot;&gt; &lt;code&gt;LOCALE_ID&lt;/code&gt; &lt;/a&gt;トークンを使用してロケールのルールに従ってデータをフォーマットする次の組み込みデータ変換&lt;a href=&quot;glossary#pipe&quot;&gt;パイプ&lt;/a&gt;を提供します。</target>
        </trans-unit>
        <trans-unit id="30e1cd4051db96810a5d5e1dbab2055cb8d90a11" translate="yes" xml:space="preserve">
          <source>Angular provides two different approaches to handling user input through forms: reactive and template-driven. Both capture user input events from the view, validate the user input, create a form model and data model to update, and provide a way to track changes.</source>
          <target state="translated">Angularはフォームを通じたユーザー入力を処理するために、リアクティブとテンプレート駆動の2つの異なるアプローチを提供しています。どちらもビューからユーザー入力イベントを取得し、ユーザー入力を検証し、更新するフォームモデルとデータモデルを作成し、変更を追跡する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="37e085544dc51dc2350db34c85e0ac7c2f1de728" translate="yes" xml:space="preserve">
          <source>Angular receives a large number of feature requests, both from inside Google and from the broader open-source community. At the same time, our list of projects contains plenty of maintenance tasks, code refactorings, potential performance improvements, and so on. We bring together representatives from developer relations, product management, and engineering to prioritize this list. As new projects come into the queue, we regularly position them based on relative priority to other projects. As work gets done, projects will move up in the queue.</source>
          <target state="translated">AngularはGoogle内部からも、より広いオープンソースコミュニティからも、多くの機能リクエストを受け取っています。同時に、メンテナンスやコードのリファクタリング、パフォーマンス向上の可能性など、プロジェクトのリストには多くのタスクが含まれています。開発者関係者、製品管理者、エンジニアリングの代表者を集めて、このリストに優先順位をつけています。新しいプロジェクトがキューに入ってくると、他のプロジェクトとの相対的な優先順位に基づいて定期的に配置します。作業が完了すると、プロジェクトはキューの中で上位に移動します。</target>
        </trans-unit>
        <trans-unit id="4023aa2209d987433d511efd5c6272087b321931" translate="yes" xml:space="preserve">
          <source>Angular recognizes the directive's role in the validation process because the directive registers itself with the &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; provider, a provider with an extensible collection of validators.</source>
          <target state="translated">Angularは、検証プロセスでのディレクティブの役割を認識します。これは、ディレクティブが &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; プロバイダー（バリデーターの拡張可能なコレクションを持つプロバイダー）に登録されるためです。</target>
        </trans-unit>
        <trans-unit id="879357b8bc87f50bec4b8b9fdc77c6180285e7e6" translate="yes" xml:space="preserve">
          <source>Angular recognizes the directive's role in the validation process because the directive registers itself with the &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; provider, as shown in the following example. &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; is a predefined provider with an extensible collection of validators.</source>
          <target state="translated">次の例に示すように、ディレクティブは &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; プロバイダーに登録されるため、Angularは検証プロセスにおけるディレクティブの役割を認識します。 &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; は、バリデーターの拡張可能なコレクションを備えた事前定義されたプロバイダーです。</target>
        </trans-unit>
        <trans-unit id="378a56a09a2bc8c55214ba40b10672b984ed51c4" translate="yes" xml:space="preserve">
          <source>Angular recognizes the value as unsafe and automatically sanitizes it, which removes the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag but keeps safe content such as the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">Angularは値を安全ではないと認識し、自動的にサニタイズします。これにより、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグは削除されますが、 &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; 要素などの安全なコンテンツは保持されます。</target>
        </trans-unit>
        <trans-unit id="a124b894fc0aadcd5a3d3d6b85932c692b5117df" translate="yes" xml:space="preserve">
          <source>Angular registers all startup module providers with the application root injector. The services that root injector providers create have application scope, which means they are available to the entire application.</source>
          <target state="translated">Angularはすべてのスタートアップモジュールのプロバイダをアプリケーションのルートインジェクタに登録します。ルートインジェクターのプロバイダが作成するサービスはアプリケーションスコープを持ち、アプリケーション全体で利用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="925daa517f76b33161b91ea28daef5e4bea3e10e" translate="yes" xml:space="preserve">
          <source>Angular registers its own providers with every injector, for services that Angular defines. You can register your own providers for services that your app needs.</source>
          <target state="translated">Angularは、Angularが定義したサービスに対して、すべてのインジェクターに独自のプロバイダを登録します。アプリが必要とするサービスに対して独自のプロバイダを登録することができます。</target>
        </trans-unit>
        <trans-unit id="63df769c252c01cddc5b9fc4a5c36530656fab5b" translate="yes" xml:space="preserve">
          <source>Angular registers these providers with the NgModule's injector. If it is the NgModule used for bootstrapping then it is the root injector.</source>
          <target state="translated">AngularはこれらのプロバイダをNgModuleのインジェクタに登録します。ブートストラップに使われているNgModuleであれば、それがルートインジェクターになります。</target>
        </trans-unit>
        <trans-unit id="94f603c4b0f5b4c970534ab64ea69e7b16cf94f8" translate="yes" xml:space="preserve">
          <source>Angular relies on the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; abstraction to work safely across &lt;em&gt;all supported platforms&lt;/em&gt;. Instead of creating an HTML element tree, Angular creates a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; tree that wraps the &lt;em&gt;native elements&lt;/em&gt; for the runtime platform. The &lt;code&gt;nativeElement&lt;/code&gt; property unwraps the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns the platform-specific element object.</source>
          <target state="translated">Angularは、&lt;em&gt;サポートされ&lt;/em&gt;ている&lt;em&gt;すべてのプラットフォームで&lt;/em&gt;安全に機能するために、 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 抽象化に依存してい&lt;em&gt;ます&lt;/em&gt;。Angularは、HTML要素ツリーを作成する代わりに、ランタイムプラットフォームの&lt;em&gt;ネイティブ要素&lt;/em&gt;をラップする &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; ツリーを作成します。 &lt;code&gt;nativeElement&lt;/code&gt; のプロパティは、アンラップ &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; をプラットフォーム固有の要素オブジェクトを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6599d35b316da91d120de3a4ffc0e370ef3d5559" translate="yes" xml:space="preserve">
          <source>Angular relies on zone.js to run Angular's change detection processes when native JavaScript operations raise events. Zone.js is an implementation of a &lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;specification&lt;/a&gt; currently before the &lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt; committee that determines standards for the JavaScript language.</source>
          <target state="translated">Angularは、zone.jsを使用して、ネイティブJavaScript操作でイベントが発生したときにAngularの変更検出プロセスを実行します。Zone.jsは、現在&lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt;委員会の前でJavaScript言語の標準を決定する&lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;仕様の&lt;/a&gt;実装です。</target>
        </trans-unit>
        <trans-unit id="f56aade6b82e2c3943e565652c5c962cb68a983c" translate="yes" xml:space="preserve">
          <source>Angular relies on zone.js to run Angular's change detection processes when native JavaScript operations raise events. Zone.js is an implementation of a &lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;specification&lt;/a&gt; currently before the &lt;a href=&quot;https://www.ecma-international.org/memento/tc39.htm&quot;&gt;TC39&lt;/a&gt; committee that determines standards for the JavaScript language.</source>
          <target state="translated">Angularは、ネイティブJavaScript操作でイベントが発生したときに、zone.jsに依存してAngularの変更検出プロセスを実行します。Zone.jsは、JavaScript言語の標準を決定する、現在&lt;a href=&quot;https://www.ecma-international.org/memento/tc39.htm&quot;&gt;TC39&lt;/a&gt;委員会の前にある&lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;仕様の&lt;/a&gt;実装です。</target>
        </trans-unit>
        <trans-unit id="400c95b463a974784a617426bfeda0f26de33b43" translate="yes" xml:space="preserve">
          <source>Angular requires &lt;code&gt;Node.js&lt;/code&gt; version 10.9.0 or later.</source>
          <target state="translated">Angularには &lt;code&gt;Node.js&lt;/code&gt; バージョン10.9.0以降が必要です。</target>
        </trans-unit>
        <trans-unit id="180d82d0fbc33b0db02ba4e56262d98745427882" translate="yes" xml:space="preserve">
          <source>Angular requires a &lt;a href=&quot;https://nodejs.org/about/releases&quot;&gt;current, active LTS, or maintenance LTS&lt;/a&gt; version of Node.js.</source>
          <target state="translated">Angularには、Node.jsの&lt;a href=&quot;https://nodejs.org/about/releases&quot;&gt;現在のアクティブなLTSまたはメンテナンスLTS&lt;/a&gt;バージョンが必要です。</target>
        </trans-unit>
        <trans-unit id="77c29c47b48c888b5c8e2dc0ff189a4e742ddaee" translate="yes" xml:space="preserve">
          <source>Angular retrieves the changed text by following the path &lt;code&gt;$event.target.value&lt;/code&gt; and updates the &lt;code&gt;name&lt;/code&gt; property.</source>
          <target state="translated">Angularは、パス &lt;code&gt;$event.target.value&lt;/code&gt; をたどって変更されたテキストを取得し、 &lt;code&gt;name&lt;/code&gt; プロパティを更新します。</target>
        </trans-unit>
        <trans-unit id="bef32477f038457ec76edcd6fb2cb0f29b6948d9" translate="yes" xml:space="preserve">
          <source>Angular sanitizes untrusted values for HTML, styles, and URLs; sanitizing resource URLs isn't possible because they contain arbitrary code. In development mode, Angular prints a console warning when it has to change a value during sanitization.</source>
          <target state="translated">AngularはHTML、スタイル、URLの信頼できない値をサニタイズします。リソースURLは任意のコードが含まれているためサニタイズできません。開発モードでは、サニタイズ中に値を変更しなければならない場合、コンソール警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="95d6c94f88761a819224e7f7ef31c0e016974ef3" translate="yes" xml:space="preserve">
          <source>Angular service worker introduction</source>
          <target state="translated">アンギュラーサービスワーカー紹介</target>
        </trans-unit>
        <trans-unit id="ece6de84f6157a2281fd204f372508b6e8936e9e" translate="yes" xml:space="preserve">
          <source>Angular sets the &lt;code&gt;appUnless&lt;/code&gt; property whenever the value of the condition changes. Because the &lt;code&gt;appUnless&lt;/code&gt; property does work, it needs a setter.</source>
          <target state="translated">Angular は、条件の値が変更されるたびに &lt;code&gt;appUnless&lt;/code&gt; プロパティを設定します。ので &lt;code&gt;appUnless&lt;/code&gt; プロパティが作業を行い、それがセッターを必要とします。</target>
        </trans-unit>
        <trans-unit id="b48433aa9a27d0daa63f87a6c53ae76ff80c318e" translate="yes" xml:space="preserve">
          <source>Angular sets the constructor's &lt;code&gt;el&lt;/code&gt; parameter to the injected &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;. (An &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; is a wrapper around a DOM element, whose &lt;code&gt;nativeElement&lt;/code&gt; property exposes the DOM element for the directive to manipulate.)</source>
          <target state="translated">Angularは、コンストラクターの &lt;code&gt;el&lt;/code&gt; パラメーターを注入された &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; に設定します。（ &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; はDOM要素のラッパーであり、その &lt;code&gt;nativeElement&lt;/code&gt; プロパティは、ディレクティブが操作するDOM要素を公開します。）</target>
        </trans-unit>
        <trans-unit id="0897472d9acb678fe4ea07d3a7bc055bd1af6070" translate="yes" xml:space="preserve">
          <source>Angular ships as a collection of JavaScript modules (also called libraries). Each Angular library name begins with the &lt;code&gt;@angular&lt;/code&gt; prefix. Install Angular libraries with the &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm package manager&lt;/a&gt; and import parts of them with JavaScript &lt;code&gt;import&lt;/code&gt; declarations.</source>
          <target state="translated">AngularはJavaScriptモジュール（ライブラリとも呼ばれます）のコレクションとして出荷されます。各Angularライブラリ名は、 &lt;code&gt;@angular&lt;/code&gt; プレフィックスで始まります。Angularライブラリを&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npmパッケージマネージャー&lt;/a&gt;でインストールし、JavaScript &lt;code&gt;import&lt;/code&gt; 宣言でそれらの一部をインポートします。</target>
        </trans-unit>
        <trans-unit id="c2ed54e54eda3c09a0744999f1f67eb581505b10" translate="yes" xml:space="preserve">
          <source>Angular simplifies the following aspects of internationalization:</source>
          <target state="translated">Angularは国際化の次のような点を簡略化しています。</target>
        </trans-unit>
        <trans-unit id="0b4571fc697e46d0f07cb794315e2abe97a50faa" translate="yes" xml:space="preserve">
          <source>Angular strives to balance innovation and stability. Sometimes, APIs and features become obsolete and need to be removed or replaced so that Angular can stay current with new best practices, changing dependencies, or changes in the (web) platform itself.</source>
          <target state="translated">Angularは革新性と安定性のバランスを取るように努力しています。ときにはAPIや機能が陳腐化して削除されたり置き換えられたりすることもありますが、それはAngularが新しいベストプラクティスや依存関係の変化、(ウェブ)プラットフォーム自体の変化に対応できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="5b3dd1bbaa7482ecb455dc8c4b78b8e67ed96278" translate="yes" xml:space="preserve">
          <source>Angular supplies a number of built-in directives that begin with the &lt;code&gt;ng&lt;/code&gt; prefix. You can also create new directives to implement your own functionality. You associate a &lt;em&gt;selector&lt;/em&gt; (an HTML tag such as &lt;code&gt;&amp;lt;my-directive&amp;gt;&lt;/code&gt;) with a custom directive, thereby extending the &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt; that you can use in your apps.</source>
          <target state="translated">Angularは &lt;code&gt;ng&lt;/code&gt; 接頭辞で始まる多くの組み込みディレクティブを提供しています。新しいディレクティブを作成して、独自の機能を実装することもできます。&lt;em&gt;セレクター&lt;/em&gt;（ &lt;code&gt;&amp;lt;my-directive&amp;gt;&lt;/code&gt; などのHTMLタグ）をカスタムディレクティブに関連付けて、アプリで使用できる&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;を拡張します。</target>
        </trans-unit>
        <trans-unit id="2bd39507a08adc6ad5177ae79d86f8ce148fdf68" translate="yes" xml:space="preserve">
          <source>Angular supports &lt;em&gt;two-way data binding&lt;/em&gt;, a mechanism for coordinating the parts of a template with the parts of a component. Add binding markup to the template HTML to tell Angular how to connect both sides.</source>
          <target state="translated">Angularは、テンプレートの部分とコンポーネントの部分を調整するためのメカニズムである&lt;em&gt;双方向データバインディングを&lt;/em&gt;サポートしています。バインディングマークアップをテンプレートHTMLに追加して、Angularに両側を接続する方法を指示します。</target>
        </trans-unit>
        <trans-unit id="7ea371269e61139c2a9831641c5589131284de96" translate="yes" xml:space="preserve">
          <source>Angular supports most recent browsers. This includes the following specific versions:</source>
          <target state="translated">Angularは最新のブラウザをサポートしています。これには以下の特定のバージョンが含まれます。</target>
        </trans-unit>
        <trans-unit id="007574459f34a1d4f369b68122eeaa0b0e8c282f" translate="yes" xml:space="preserve">
          <source>Angular supports two design approaches for interactive forms. You can build forms by writing templates using Angular &lt;a href=&quot;glossary#template&quot;&gt;template syntax and directives&lt;/a&gt; with the form-specific directives and techniques described in this tutorial, or you can use a reactive (or model-driven) approach to build forms.</source>
          <target state="translated">Angularは、インタラクティブフォームの2つの設計アプローチをサポートしています。このチュートリアルで説明されているフォーム固有のディレクティブとテクニックを使用して、Angular&lt;a href=&quot;glossary#template&quot;&gt;テンプレート構文とディレクティブ&lt;/a&gt;を使用してテンプレートを作成することでフォームを作成できます。または、リアクティブ（またはモデル駆動型）アプローチを使用してフォームを作成できます。</target>
        </trans-unit>
        <trans-unit id="e8e04243c1697b41d29fbfba8b823298c738e03c" translate="yes" xml:space="preserve">
          <source>Angular templates are &lt;em&gt;dynamic&lt;/em&gt;. When Angular renders them, it transforms the DOM according to the instructions given by &lt;em&gt;directives&lt;/em&gt;. A directive is a class with a &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">Angularテンプレートは&lt;em&gt;動的&lt;/em&gt;です。Angularがそれらをレンダリングするとき、&lt;em&gt;ディレクティブ&lt;/em&gt;によって与えられた指示に従ってDOMを変換します。ディレクティブは、 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; デコレーターを持つクラスです。</target>
        </trans-unit>
        <trans-unit id="75360540a862cda10bfe5d3cc9e4e3d8b9249e08" translate="yes" xml:space="preserve">
          <source>Angular throws a cyclic dependency error if you omit the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">あなたは省略した場合の角度は、循環依存エラーをスロー &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; デコレータ。</target>
        </trans-unit>
        <trans-unit id="dffe45e60da8df6adcbb8bd717d7b920a8f70a40" translate="yes" xml:space="preserve">
          <source>Angular throws an error if the hook updates the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately (try it!). The &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; postpones the log update for one turn of the browser's JavaScript cycle and that's just long enough.</source>
          <target state="translated">フックがコンポーネントのデータバインド &lt;code&gt;comment&lt;/code&gt; プロパティをすぐに更新すると、Angularはエラーをスローします（試してください）。 &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; は、ブラウザのJavaScriptのサイクルの1ターンのログ更新を延期し、それだけで十分な長さです。</target>
        </trans-unit>
        <trans-unit id="e332f37242cc9fcbbae5b381770424eb2cc4ab0e" translate="yes" xml:space="preserve">
          <source>Angular throws an error if you haven't also decorated the property with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;. When the property is marked as optional, Angular sets &lt;code&gt;loggerService&lt;/code&gt; to null and the rest of the component adapts.</source>
          <target state="translated">プロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; で装飾していない場合、Angularはエラーをスローします。プロパティがオプションとしてマークされている場合、Angularは &lt;code&gt;loggerService&lt;/code&gt; をnullに設定し、コンポーネントの残りの部分は適応します。</target>
        </trans-unit>
        <trans-unit id="5e4db9368e884831e9e20c6790dc42c39f7b1964" translate="yes" xml:space="preserve">
          <source>Angular transforms the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in similar fashion from asterisk (*) syntax to &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;em&gt;element&lt;/em&gt;.</source>
          <target state="translated">Angularは、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を同様の方法でアスタリスク（*）構文から &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; &lt;em&gt;要素に変換し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e67e3de40fe95a8c00d4dd1bff2697445d28684b" translate="yes" xml:space="preserve">
          <source>Angular translates this instruction into an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; around the host element, then uses this template repeatedly to create a new set of elements and bindings for each &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; in the list. For more information about microsyntax, see the &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;Structural Directives&lt;/a&gt; guide.</source>
          <target state="translated">Angularはこの命令をホスト要素の周りの &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; に変換し、このテンプレートを繰り返し使用して、リスト内の各 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 新しい要素とバインディングのセットを作成します。マイクロ構文の詳細については、&lt;a href=&quot;structural-directives#microsyntax&quot;&gt;構造指令&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c282c74d23f70527b9a9a2fdef131f850048669" translate="yes" xml:space="preserve">
          <source>Angular translates this instruction into an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; around the host element, then uses this template repeatedly to create a new set of elements and bindings for each &lt;code&gt;item&lt;/code&gt; in the list. For more information about microsyntax, see the &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;Structural Directives&lt;/a&gt; guide.</source>
          <target state="translated">Angularは、この命令をホスト要素の周りの &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; に変換し、このテンプレートを繰り返し使用して、リスト内の各 &lt;code&gt;item&lt;/code&gt; 要素とバインディングの新しいセットを作成します。マイクロ構文の詳細については、&lt;a href=&quot;structural-directives#microsyntax&quot;&gt;構造ディレクティブ&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="6f421782afe50f58ad1ed9fbccc815096a4e227d" translate="yes" xml:space="preserve">
          <source>Angular treats a nested expression in the same manner as an alternate expression, extracting it into two translation units. The first contains the text outside of the nested expression:</source>
          <target state="translated">Angularは入れ子になった式を代替式と同じように扱い、2つの翻訳ユニットに抽出します。1つ目は入れ子になった式の外側のテキストを含みます。</target>
        </trans-unit>
        <trans-unit id="d6acd0291e45c98173358bf8fc914f274d361be6" translate="yes" xml:space="preserve">
          <source>Angular updates the bindings (and therefore the screen) only if the app does something in response to asynchronous events, such as keystrokes. This example code binds the &lt;code&gt;keyup&lt;/code&gt; event to the number 0, the shortest template statement possible. While the statement does nothing useful, it satisfies Angular's requirement so that Angular will update the screen.</source>
          <target state="translated">Angularは、キーストロークなどの非同期イベントに応答してアプリが何かを実行した場合にのみ、バインディング（したがって画面）を更新します。このサンプルコードは、 &lt;code&gt;keyup&lt;/code&gt; イベントを数値0にバインドします。これは、可能な最短のテンプレートステートメントです。このステートメントは何の役にも立ちませんが、Angularの要件を満たしているため、Angularは画面を更新します。</target>
        </trans-unit>
        <trans-unit id="ab5ccc966eff22cc30bc6d91001c94c57cd1dec3" translate="yes" xml:space="preserve">
          <source>Angular updates the display every time the user adds a hero. If the user clicks the &lt;strong&gt;Reset&lt;/strong&gt; button, Angular replaces &lt;code&gt;heroes&lt;/code&gt; with a new array of the original heroes and updates the display. If you add the ability to remove or change a hero, Angular would detect those changes and update the display as well.</source>
          <target state="translated">Angularは、ユーザーがヒーローを追加するたびに表示を更新します。ユーザーが[&lt;strong&gt;リセット&lt;/strong&gt;]ボタンをクリックすると、Angularは &lt;code&gt;heroes&lt;/code&gt; を元のヒーローの新しい配列に置き換え、表示を更新します。ヒーローを削除または変更する機能を追加すると、Angularはそれらの変更を検出し、表示も更新します。</target>
        </trans-unit>
        <trans-unit id="550b4fe7f3f5d9e42a538e1d35676d32309e777c" translate="yes" xml:space="preserve">
          <source>Angular used to rely on the browser to provide number, date, and currency formatting using browser i18n APIs. This practice meant that most apps needed to use a polyfill, users were seeing inconsistent results across browsers, and common formats (such as the currency pipe) didn&amp;rsquo;t match developer expectations out of the box.</source>
          <target state="translated">Angularは、ブラウザのi18n APIを使用して数値、日付、通貨のフォーマットを提供するためにブラウザに依存していたものです。このプラクティスは、ほとんどのアプリがポリフィルを使用する必要があり、ユーザーがブラウザー間で一貫性のない結果を表示し、一般的な形式（通貨パイプなど）がそのままでは開発者の期待と一致しないことを意味しました。</target>
        </trans-unit>
        <trans-unit id="d6fa9d5a8d38e3d4d26da6cf34336adf1c339739" translate="yes" xml:space="preserve">
          <source>Angular used to sanitize &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; and &lt;code&gt;[style.prop]&lt;/code&gt; bindings to prevent malicious code from being inserted through &lt;code&gt;javascript:&lt;/code&gt; expressions in CSS &lt;code&gt;url()&lt;/code&gt; entries. However, most modern browsers no longer support the usage of these expressions, so sanitization was only maintained for the sake of IE 6 and 7. Given that Angular does not support either IE 6 or 7 and sanitization has a performance cost, we will no longer sanitize style bindings as of version 10 of Angular.</source>
          <target state="translated">Angularは、 &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; および &lt;code&gt;[style.prop]&lt;/code&gt; バインディングをサニタイズして、CSS &lt;code&gt;url()&lt;/code&gt; エントリの &lt;code&gt;javascript:&lt;/code&gt; 式を介して悪意のあるコードが挿入されるのを防ぐために使用されます。ただし、最近のほとんどのブラウザーはこれらの式の使用をサポートしなくなったため、サニタイズはIE 6および7のためにのみ維持されました。AngularはIE6または7のいずれもサポートせず、サニタイズにはパフォーマンスコストがかかるため、サニタイズは終了します。 Angularのバージョン10以降のスタイルバインディングをサニタイズします。</target>
        </trans-unit>
        <trans-unit id="d34417d3060d2e52591c5133c737a9fc73577780" translate="yes" xml:space="preserve">
          <source>Angular uses a third-party library called &lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;Reactive Extensions (RxJS)&lt;/a&gt;.</source>
          <target state="translated">Angularは&lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;Reactive Extensions（RxJS）&lt;/a&gt;と呼ばれるサードパーティのライブラリを使用しています。</target>
        </trans-unit>
        <trans-unit id="238cd9c643f7186f47327fa3f20d86506d261bf2" translate="yes" xml:space="preserve">
          <source>Angular uses capitalization conventions to distinguish the names of various types, as described in the &lt;a href=&quot;styleguide#02-01&quot;&gt;naming guidelines section&lt;/a&gt; of the Style Guide. Here's a summary of the case types:</source>
          <target state="translated">Angularでは、スタイルガイドの&lt;a href=&quot;styleguide#02-01&quot;&gt;命名ガイドラインのセクション&lt;/a&gt;で説明されているように、大文字と小文字の規則を使用してさまざまなタイプの名前を区別しています。ケースタイプの概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b23d17cee636d84970f89a7ad98f26ce7fdce1aa" translate="yes" xml:space="preserve">
          <source>Angular uses object identity to select option. It's possible for the identities of items to change while the data does not. This can happen, for example, if the items are produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response will produce objects with different identities.</source>
          <target state="translated">Angularではオプションの選択にオブジェクトのアイデンティティを使用しています。データが変わっていないのにアイテムのアイデンティティが変わってしまうことがあります。これは例えば、RPCからサーバーにアイテムが送られてきて、そのRPCが再実行された場合などに起こります。データが変更されていなくても、2回目のレスポンスでは異なるアイデンティティのオブジェクトが生成されます。</target>
        </trans-unit>
        <trans-unit id="afa3e2aab5eb44abf792978d1175dab7157473c8" translate="yes" xml:space="preserve">
          <source>Angular uses object identity to track insertions and deletions within the iterator and reproduce those changes in the DOM. This has important implications for animations and any stateful controls that are present, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements that accept user input. Inserted rows can be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such as user input. For more on animations, see &lt;a href=&quot;../../guide/transition-and-triggers&quot;&gt;Transitions and Triggers&lt;/a&gt;.</source>
          <target state="translated">Angularは、オブジェクトアイデンティティを使用して、イテレータ内の挿入と削除を追跡し、それらの変更をDOMで再現します。これは、アニメーションや、ユーザー入力を受け入れる &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素など、存在するステートフルコントロールに重要な影響を及ぼします。挿入された行はアニメーション化され、削除された行はアニメーション化され、未変更の行はユーザー入力などの保存されていない状態を保持します。アニメーションの詳細については、&lt;a href=&quot;../../guide/transition-and-triggers&quot;&gt;遷移とトリガーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1cb885a8c762330f16faa7918e600c17bab6fcad" translate="yes" xml:space="preserve">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;href&lt;/em&gt; directive. Place the element's &lt;code&gt;href&lt;/code&gt; property in square brackets and set it to a quoted template expression.</source>
          <target state="translated">Angularはプロパティバインディングを使用しています。組み込みの&lt;em&gt;href&lt;/em&gt;ディレクティブはありません。要素の &lt;code&gt;href&lt;/code&gt; プロパティを角括弧で囲み、引用されたテンプレート式に設定します。</target>
        </trans-unit>
        <trans-unit id="72ad9c35cd585d33a4b440a583ddfd37683769b7" translate="yes" xml:space="preserve">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;show&lt;/em&gt; directive. For hiding and showing elements, bind to the HTML &lt;code&gt;hidden&lt;/code&gt; property.</source>
          <target state="translated">Angularはプロパティバインディングを使用しています。組み込みの&lt;em&gt;show&lt;/em&gt;ディレクティブはありません。要素を &lt;code&gt;hidden&lt;/code&gt; および表示するには、HTMLの非表示プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="0b8039827d9181117e8916b7566b190665ccc87d" translate="yes" xml:space="preserve">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;src&lt;/em&gt; directive. Place the &lt;code&gt;src&lt;/code&gt; property in square brackets and set it to a quoted template expression.</source>
          <target state="translated">Angularはプロパティバインディングを使用しています。組み込みの&lt;em&gt;src&lt;/em&gt;ディレクティブはありません。置き &lt;code&gt;src&lt;/code&gt; 角括弧内のプロパティをして引用されたテンプレートの表現に設定します。</target>
        </trans-unit>
        <trans-unit id="51bb56d88f545ecd21c8b3295d3ae0c08827925b" translate="yes" xml:space="preserve">
          <source>Angular uses this strategy by default.</source>
          <target state="translated">Angularはデフォルトでこの戦略を使用します。</target>
        </trans-unit>
        <trans-unit id="a9686cbe9cdd1e05634250b025f2d23aea2544f0" translate="yes" xml:space="preserve">
          <source>Angular version 9 maintains the behavior of the &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; flag, and introduces a third &quot;strict mode&quot;. Strict mode is a superset of full mode, and is accessed by setting the &lt;code&gt;strictTemplates&lt;/code&gt; flag to true. This flag supersedes the &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; flag. In strict mode, Angular version 9 adds checks that go beyond the version 8 type-checker. Note that strict mode is only available if using Ivy.</source>
          <target state="translated">Angularバージョン9は、 &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; フラグの動作を維持し、3番目の「厳密モード」を導入します。厳密モードはフルモードのスーパーセットであり、 &lt;code&gt;strictTemplates&lt;/code&gt; フラグをtrueに設定することでアクセスできます。このフラグは、 &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; フラグに優先します。 strictモードでは、Angularバージョン9は、バージョン8のタイプチェッカーを超えるチェックを追加します。 strictモードは、Ivyを使用している場合にのみ使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6bc76e6d5243f1e5063ab51dd2791ed0cb2ccde1" translate="yes" xml:space="preserve">
          <source>Angular version numbers have three parts: &lt;code&gt;major.minor.patch&lt;/code&gt;. For example, version 7.2.11 indicates major version 7, minor version 2, and patch level 11.</source>
          <target state="translated">Angularのバージョン番号には、 &lt;code&gt;major.minor.patch&lt;/code&gt; の 3つの部分があります。たとえば、バージョン7.2.11は、メジャーバージョン7、マイナーバージョン2、およびパッチレベル11を示します。</target>
        </trans-unit>
        <trans-unit id="e66d745516cc0cbdc5a199f2171badeb163e055a" translate="yes" xml:space="preserve">
          <source>Angular version numbers indicate the level of changes that are introduced by the release. This use of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt; helps you understand the potential impact of updating to a new version.</source>
          <target state="translated">Angularバージョン番号は、リリースによって導入された変更のレベルを示します。この&lt;a href=&quot;https://semver.org/&quot;&gt;セマンティックバージョニングの&lt;/a&gt;使用は、新しいバージョンへの更新の潜在的な影響を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="6667c0e19d01e9c6b4ce15412ca271371a87af6e" translate="yes" xml:space="preserve">
          <source>Angular versioning</source>
          <target state="translated">アンギュラバージョニング</target>
        </trans-unit>
        <trans-unit id="481459b7a7a53cb010c10084e6cbefbbce0d18d7" translate="yes" xml:space="preserve">
          <source>Angular versioning and releases</source>
          <target state="translated">Angularのバージョン管理とリリース</target>
        </trans-unit>
        <trans-unit id="ae599289dc507efb8c0a1716c60673504ba85f7d" translate="yes" xml:space="preserve">
          <source>Angular versions ^4.0.0 and ^5.0.0 are no longer under support.</source>
          <target state="translated">Angular のバージョン ^4.0.0 と ^5.0.0 はサポート対象外となりました。</target>
        </trans-unit>
        <trans-unit id="7354076fee398ac2174e62901aad04648bfc7170" translate="yes" xml:space="preserve">
          <source>Angular versions ^4.0.0, ^5.0.0, ^6.0.0 and ^7.0.0 are no longer under support.</source>
          <target state="translated">Angular のバージョン ^4.0.0,^5.0.0,^6.0.0,^7.0.0 はサポート対象外となりました。</target>
        </trans-unit>
        <trans-unit id="8f7eb6ab6bf508573fe3789219842611216a65fe" translate="yes" xml:space="preserve">
          <source>Angular will automatically include locale data if you configure the locale using the &lt;code&gt;--localize&lt;/code&gt; option with &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; CLI command.</source>
          <target state="translated">&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt; CLIコマンドで &lt;code&gt;--localize&lt;/code&gt; オプションを使用してロケールを構成すると、Angularはロケールデータを自動的に含めます。</target>
        </trans-unit>
        <trans-unit id="70d1eaafbfdbdadd395ad40f8c2e94be887f2a15" translate="yes" xml:space="preserve">
          <source>Angular workspace configuration</source>
          <target state="translated">Angularワークスペースの設定</target>
        </trans-unit>
        <trans-unit id="50dcd5af91abd8b4ee5691549f133ec7e54a19b3" translate="yes" xml:space="preserve">
          <source>Angular&amp;rsquo;s &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; returns observables from HTTP method calls. For instance, &lt;code&gt;http.get(&amp;lsquo;/api&amp;rsquo;)&lt;/code&gt; returns an observable. This provides several advantages over promise-based HTTP APIs:</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は、HTTPメソッド呼び出しからオブザーバブルを返します。たとえば、 &lt;code&gt;http.get(&amp;lsquo;/api&amp;rsquo;)&lt;/code&gt; はオブザーバブルを返します。これには、promiseベースのHTTP APIに比べていくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="39d9244a49d87a2a7a6aedec6ed8bfecbe27e003" translate="yes" xml:space="preserve">
          <source>Angular&amp;rsquo;s cross-site scripting security model</source>
          <target state="translated">Angularのクロスサイトスクリプティングセキュリティモデル</target>
        </trans-unit>
        <trans-unit id="361440e87ccdb1fecd73d942a162a4cb298411a7" translate="yes" xml:space="preserve">
          <source>Angular's &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/compiler-cli/src/metadata/schema.ts&quot;&gt;schema.ts&lt;/a&gt; describes the JSON format as a collection of TypeScript interfaces.</source>
          <target state="translated">Angularの&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/compiler-cli/src/metadata/schema.ts&quot;&gt;schema.ts&lt;/a&gt;は、JSON形式をTypeScriptインターフェイスのコレクションとして記述しています。</target>
        </trans-unit>
        <trans-unit id="8b0004daae3fceeb6dd522584dd3f1c3e15008d4" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; has built-in support for the client-side half of this technique. Read about it more in the &lt;a href=&quot;http&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; には、この手法のクライアント側の半分に対するサポートが組み込まれています。詳しくは、&lt;a href=&quot;http&quot;&gt;HttpClientガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="bc370eef79da781852b848b1734c368b87b68ffa" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; has built-in support for the client-side half of this technique. Read about it more in the &lt;a href=&quot;http#security-xsrf-protection&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; には、この手法のクライアント側の半分に対するサポートが組み込まれています。詳細については、&lt;a href=&quot;http#security-xsrf-protection&quot;&gt;HttpClientガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4fb50cce578f3a5a5a7abdb4dd6da589ba21a121" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; library recognizes this convention and automatically strips the string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; from all responses before further parsing.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; ライブラリはこの規則を認識し、さらに解析する前に、すべての応答から文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; を自動的に取り除きます。</target>
        </trans-unit>
        <trans-unit id="14617516211b35ab06a4b2a6b666a840eb5b82fd" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; registers the providers needed to use a single instance of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service throughout your app. The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service is what you inject into your services to fetch data and interact with external APIs and resources.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; は、アプリ全体で &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスの単一のインスタンスを使用するために必要なプロバイダーを登録します。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をサービスでは、外部APIやリソースとデータと相互作用をフェッチするために、あなたのサービスに注入するものです。</target>
        </trans-unit>
        <trans-unit id="f464c195e5c33d89fa74ab8b0d73354d62ba9d69" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; registers the providers your app needs to use a single instance of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service throughout your app.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; は、アプリがアプリ全体で &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスの単一インスタンスを使用するために必要なプロバイダーを登録します。</target>
        </trans-unit>
        <trans-unit id="ec334ceb63562c7ef49674b3cead9e9d4cba4020" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service provides convenient methods for generating controls. As with the other services you've used, you need to import and inject the service before you can use it:</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; サービスは、コントロールを生成するための便利なメソッドを提供します。使用した他のサービスと同様に、使用する前にサービスをインポートして注入する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf774047e36d0ca6ef5a720dc672fae05bb9fc52" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;keyframe()&lt;/code&gt; function is similar to keyframes in CSS. Keyframes allow several style changes within a single timing segment. For example, our button, instead of fading, could change color several times over a single 2-second timespan.</source>
          <target state="translated">Angularの &lt;code&gt;keyframe()&lt;/code&gt; 関数はCSSのキーフレームに似ています。キーフレームを使用すると、単一のタイミングセグメント内で複数のスタイルを変更できます。たとえば、ボタンがフェードする代わりに、単一の2秒間で数回色を変えることができます。</target>
        </trans-unit>
        <trans-unit id="9919eee2a51b81bfdf76bbbffe272989ae666ca0" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;keyframe()&lt;/code&gt; function is similar to keyframes in CSS. Keyframes allow several style changes within a single timing segment. For example, the button, instead of fading, could change color several times over a single 2-second timespan.</source>
          <target state="translated">Angularの &lt;code&gt;keyframe()&lt;/code&gt; 関数は、CSSのキーフレームに似ています。キーフレームを使用すると、単一のタイミングセグメント内で複数のスタイルを変更できます。たとえば、ボタンはフェードする代わりに、1つの2秒間に数回色を変えることができます。</target>
        </trans-unit>
        <trans-unit id="35707b1741a5656cd81137fd131c1cecf9c96f83" translate="yes" xml:space="preserve">
          <source>Angular's HTTP testing library is designed for a pattern of testing in which the app executes code and makes requests first. The test then expects that certain requests have or have not been made, performs assertions against those requests, and finally provides responses by &quot;flushing&quot; each expected request.</source>
          <target state="translated">AngularのHTTPテストライブラリは、アプリがコードを実行して最初にリクエストを行うというテストのパターンに合わせて設計されています。テストはその後、特定のリクエストが行われたかどうかを予想し、それらのリクエストに対してアサーションを実行し、最後に予想された各リクエストを「フラッシュ」することでレスポンスを提供します。</target>
        </trans-unit>
        <trans-unit id="44f361bf81db534631a0013ce3d42b1478068b98" translate="yes" xml:space="preserve">
          <source>Angular's animation support builds on top of web animations, so you can animate any property that the browser considers animatable. This includes positions, sizes, transforms, colors, borders, and more. The W3C maintains a list of animatable properties on its &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt; page.</source>
          <target state="translated">AngularのアニメーションサポートはWebアニメーションの上に構築されているため、ブラウザがアニメーション可能と見なすプロパティをアニメーション化できます。これには、位置、サイズ、変換、色、境界線などが含まれます。W3Cは、&lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSSトランジション&lt;/a&gt;ページにアニメート可能なプロパティのリストを保持しています。</target>
        </trans-unit>
        <trans-unit id="f1bc2a1c230dc36047042d454f2cb3150e707c25" translate="yes" xml:space="preserve">
          <source>Angular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable. This includes positions, sizes, transforms, colors, borders, and more. The W3C maintains a list of animatable properties on its &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt; page.</source>
          <target state="translated">AngularのアニメーションシステムはCSS機能に基づいて構築されています。つまり、ブラウザーがアニメーション可能と見なす任意のプロパティをアニメーション化できます。これには、位置、サイズ、変換、色、境界線などが含まれます。W3Cは、&lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSSトランジション&lt;/a&gt;ページにアニメート可能なプロパティのリストを保持しています。</target>
        </trans-unit>
        <trans-unit id="c259b63cddb04acf22e950acc14653da9d32a74e" translate="yes" xml:space="preserve">
          <source>Angular's animations library makes it easy to define and apply animation effects such as page and list transitions. For more information, see the &lt;a href=&quot;animations&quot;&gt;Animations guide&lt;/a&gt;.</source>
          <target state="translated">Angularのアニメーションライブラリを使用すると、ページやリストの遷移などのアニメーション効果を簡単に定義して適用できます。詳細については、&lt;a href=&quot;animations&quot;&gt;アニメーションガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1ae8350364c17bca7b7f63ffe70ee1b69a60cc69" translate="yes" xml:space="preserve">
          <source>Angular's continuous integration process runs unit tests of the framework on all of these browsers for every pull request, using &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt; and &lt;a href=&quot;https://www.browserstack.com&quot;&gt;Browserstack&lt;/a&gt;.</source>
          <target state="translated">Angularの継続的インテグレーションプロセスでは、&lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt;と&lt;a href=&quot;https://www.browserstack.com&quot;&gt;Browserstack&lt;/a&gt;を使用して、プルリクエストごとにこれらすべてのブラウザーでフレームワークの単体テストを実行します。</target>
        </trans-unit>
        <trans-unit id="cf8707d44d9ba4cc582ed7d651d0ee4d537dd6ef" translate="yes" xml:space="preserve">
          <source>Angular's resolution behavior can be modified with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;. Import each of them from &lt;code&gt;@angular/core&lt;/code&gt; and use each in the component class constructor when you inject your service.</source>
          <target state="translated">Angularの解決動作は、 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; ます。 &lt;code&gt;@angular/core&lt;/code&gt; からそれぞれをインポートし、サービスを注入するときにコンポーネントクラスコンストラクターでそれぞれを使用します。</target>
        </trans-unit>
        <trans-unit id="1786feb384dc29da2b7d0b362b7546fe85676b4f" translate="yes" xml:space="preserve">
          <source>Angular's service worker is designed to optimize the end user experience of using an application over a slow or unreliable network connection, while also minimizing the risks of serving outdated content.</source>
          <target state="translated">Angularのサービスワーカーは、遅いネットワーク接続や信頼性の低いネットワーク接続でアプリケーションを使用する際のエンドユーザー体験を最適化するように設計されており、古いコンテンツを提供するリスクも最小限に抑えられます。</target>
        </trans-unit>
        <trans-unit id="504cd5fa4c7a2dccac0652568a0bf7e92fa161e4" translate="yes" xml:space="preserve">
          <source>Angular's template compiler. It understands templates and can convert them to code that makes the application run and render. Typically you don&amp;rsquo;t interact with the compiler directly; rather, you use it indirectly via &lt;code&gt;platform-browser-dynamic&lt;/code&gt; when JIT compiling in the browser. For more information, see the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-time Compilation guide&lt;/a&gt;.</source>
          <target state="translated">Angularのテンプレートコンパイラ。テンプレートを理解し、それらをアプリケーションに実行およびレンダリングさせるコードに変換できます。通常、コンパイラと直接やり取りすることはありません。むしろ、JITがブラウザーでコンパイルするときに、 &lt;code&gt;platform-browser-dynamic&lt;/code&gt; を介して間接的に使用します。詳細については、&lt;a href=&quot;aot-compiler&quot;&gt;事前コンパイルガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ff40c7b19b49d4d5e133e555bcb91882845c5f9c" translate="yes" xml:space="preserve">
          <source>Angular's template syntax extends HTML and JavaScript. This section introduces template syntax by enhancing the &quot;Products&quot; area.</source>
          <target state="translated">Angularのテンプレート構文はHTMLやJavaScriptを拡張しています。ここでは「商品」エリアを強化してテンプレート構文を紹介します。</target>
        </trans-unit>
        <trans-unit id="3ff1791e829c37910787b485c2e7587138023981" translate="yes" xml:space="preserve">
          <source>Angular's two-way binding syntax is a combination of square brackets and parentheses, &lt;code&gt;[()]&lt;/code&gt;. The &lt;code&gt;[()]&lt;/code&gt; syntax combines the brackets of property binding, &lt;code&gt;[]&lt;/code&gt;, with the parentheses of event binding, &lt;code&gt;()&lt;/code&gt;, as follows.</source>
          <target state="translated">Angularの双方向バインディング構文は、角括弧と括弧 &lt;code&gt;[()]&lt;/code&gt; の組み合わせです。 &lt;code&gt;[()]&lt;/code&gt; 構文は、結合性のブラケットを結合 &lt;code&gt;[]&lt;/code&gt; 結合事象の括弧で &lt;code&gt;()&lt;/code&gt; 以下のように、。</target>
        </trans-unit>
        <trans-unit id="3ddc03baf11e86bab9597295ea44e229f6cb702e" translate="yes" xml:space="preserve">
          <source>Angular's unidirectional data flow rule forbids updates to the view &lt;em&gt;after&lt;/em&gt; it has been composed. Both of these hooks fire &lt;em&gt;after&lt;/em&gt; the component's view has been composed.</source>
          <target state="translated">Angularの単方向データフロールールは、ビューの構成&lt;em&gt;後&lt;/em&gt;のビューの更新を禁止します。これらのフックは両方とも、コンポーネントのビューが構成された&lt;em&gt;後に発生&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="574d58aea3098c9ffb9984b160cf4eb2c3fecec7" translate="yes" xml:space="preserve">
          <source>Angular, the Angular CLI, and Angular applications depend on &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm packages&lt;/a&gt; for many features and functions. To download and install npm packages, you need an npm package manager. This guide uses the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm client&lt;/a&gt; command line interface, which is installed with &lt;code&gt;Node.js&lt;/code&gt; by default. To check that you have the npm client installed, run &lt;code&gt;npm -v&lt;/code&gt; in a terminal window.</source>
          <target state="translated">Angular、Angular CLI、およびAngularアプリケーションは、多くの機能を&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npmパッケージに&lt;/a&gt;依存しています。npmパッケージをダウンロードしてインストールするには、npmパッケージマネージャーが必要です。このガイドでは、デフォルトで &lt;code&gt;Node.js&lt;/code&gt; とともにインストールされる&lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npmクライアント&lt;/a&gt;コマンドラインインターフェイスを使用します。npmクライアントがインストールされていることを確認するには、ターミナルウィンドウで &lt;code&gt;npm -v&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="d5adb3a8bc2d1144d715b4e241c8b97e75acec4c" translate="yes" xml:space="preserve">
          <source>Angular, the Angular CLI, and Angular apps depend on features and functionality provided by libraries that are available as &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm packages&lt;/a&gt;. To download and install npm packages, you must have an npm package manager.</source>
          <target state="translated">Angular、Angular CLI、Angularアプリは、&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npmパッケージ&lt;/a&gt;として利用可能なライブラリによって提供される機能に依存しています。npmパッケージをダウンロードしてインストールするには、npmパッケージマネージャーが必要です。</target>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes" xml:space="preserve">
          <source>AngularJS</source>
          <target state="translated">AngularJS</target>
        </trans-unit>
        <trans-unit id="6e35a378aa54bd494ebc719b125fbf5b36ab4fb7" translate="yes" xml:space="preserve">
          <source>AngularJS 1.5 introduces the &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module#component&quot;&gt;component API&lt;/a&gt; that makes it easier to define component directives like these. It is a good idea to use this API for component directives for several reasons:</source>
          <target state="translated">AngularJS 1.5には、&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module#component&quot;&gt;コンポーネントAPI&lt;/a&gt;が導入されており、このようなコンポーネントディレクティブを簡単に定義できます。いくつかの理由により、コンポーネントディレクティブにこのAPIを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="be95540cbaad0a5ea6f38f0fb89f4c1fe637785c" translate="yes" xml:space="preserve">
          <source>AngularJS apps are great. Always consider the business case before moving to Angular. An important part of that case is the time and effort to get there. This guide describes the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, a piece at a time.</source>
          <target state="translated">AngularJSアプリは素晴らしい。Angularに移行する前には、常にビジネスケースを考えましょう。その中で重要なのは、移行にかかる時間と労力です。このガイドでは、AngularJSプロジェクトを効率的にAngularプラットフォームに移行するためのビルトインツールを一度に一枚ずつ説明します。</target>
        </trans-unit>
        <trans-unit id="ad3374e34ac229a514bcb825e7c41831585eac3c" translate="yes" xml:space="preserve">
          <source>AngularJS developers know this technique as &lt;em&gt;transclusion&lt;/em&gt;.</source>
          <target state="translated">AngularJS開発者はこの手法を&lt;em&gt;トランスクルージョン&lt;/em&gt;として知っています。</target>
        </trans-unit>
        <trans-unit id="2b756697e8af3cfff41be5b54a86bcc40435ed5a" translate="yes" xml:space="preserve">
          <source>AngularJS directives always execute inside AngularJS framework codebase regardless of where they are instantiated.</source>
          <target state="translated">AngularJSのディレクティブは、インスタンス化された場所に関係なく、常にAngularJSフレームワークのコードベース内で実行されます。</target>
        </trans-unit>
        <trans-unit id="5883a4552c1e380fb9e76fe1a405dd956e2e041a" translate="yes" xml:space="preserve">
          <source>AngularJS directives always execute inside the AngularJS framework codebase regardless of where they are instantiated.</source>
          <target state="translated">AngularJSのディレクティブは、インスタンス化された場所に関わらず、常にAngularJSフレームワークのコードベース内で実行されます。</target>
        </trans-unit>
        <trans-unit id="a2361ecb57211e492282d07e7e196e2d57b74a2f" translate="yes" xml:space="preserve">
          <source>AngularJS event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using &lt;strong&gt;event binding&lt;/strong&gt;.</source>
          <target state="translated">AngularJSのイベントベースのディレクティブはAngularには存在しません。むしろ、&lt;strong&gt;イベントバインディング&lt;/strong&gt;を使用して、テンプレートビューからコンポーネントへの一方向のバインディングを定義します。</target>
        </trans-unit>
        <trans-unit id="7ba2194b47c5f56823c853e12f0552deafc5b008" translate="yes" xml:space="preserve">
          <source>AngularJS expects controllers to be constructor functions. That's exactly what ES2015/TypeScript classes are under the hood, so that means you can just plug in a class as a component controller and AngularJS will happily use it.</source>
          <target state="translated">AngularJSはコントローラがコンストラクタ関数であることを期待しています。つまり、クラスをコンポーネントコントローラとしてプラグインするだけで、AngularJSが喜んでそれを使用することができます。</target>
        </trans-unit>
        <trans-unit id="112a877bf72d4bfc8bf612a04c77986c603a5169" translate="yes" xml:space="preserve">
          <source>AngularJS has code in each controller that looks up an appropriate Angular module and registers the controller with that module.</source>
          <target state="translated">AngularJSは各コントローラに適切なAngularモジュールを検索し、そのモジュールでコントローラを登録するコードを持っています。</target>
        </trans-unit>
        <trans-unit id="e7245580254db776b68e6171f5b629c700d61b34" translate="yes" xml:space="preserve">
          <source>AngularJS is always bootstrapped first and owns the bottom most view.</source>
          <target state="translated">AngularJSは常に最初にブートストラップされ、一番下のビューを所有しています。</target>
        </trans-unit>
        <trans-unit id="2aef830187741c51c79d0fdd323c04bb9f1d5a18" translate="yes" xml:space="preserve">
          <source>AngularJS is currently loaded by a script tag in &lt;code&gt;index.html&lt;/code&gt;, which means that the whole app has access to it as a global and uses the same instance of the &lt;code&gt;angular&lt;/code&gt; variable. If you used &lt;code&gt;import * as angular from 'angular'&lt;/code&gt; instead, you'd also have to load every file in the AngularJS app to use ES2015 modules in order to ensure AngularJS was being loaded correctly.</source>
          <target state="translated">AngularJSは現在、 &lt;code&gt;index.html&lt;/code&gt; のスクリプトタグによって読み込まれます。つまり、アプリ全体がグローバルとしてそれにアクセスでき、 &lt;code&gt;angular&lt;/code&gt; 変数の同じインスタンスを使用します。代わりに &lt;code&gt;import * as angular from 'angular'&lt;/code&gt; 使用した場合、AngularJSが正しくロードされていることを確認するために、ES2015モジュールを使用するには、AngularJSアプリのすべてのファイルもロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="398510dbda26c2a8fe4e08585f1a59953ba02faf" translate="yes" xml:space="preserve">
          <source>AngularJS provides more than seventy built-in directives for templates. Many of them aren't needed in Angular because of its more capable and expressive binding system. The following are some of the key AngularJS built-in directives and their equivalents in Angular.</source>
          <target state="translated">AngularJSはテンプレート用に70以上の組み込みディレクティブを提供しています。それらの多くはAngularのバインディングシステムの方が機能的で表現力が高いため、Angularでは必要ありません。以下に主要なAngularJSの組み込みディレクティブと、それに相当するものを紹介します。</target>
        </trans-unit>
        <trans-unit id="3adbc04c8f21c0c77451b7e8d0376cba32bd94e5" translate="yes" xml:space="preserve">
          <source>AngularJS to Angular Concepts: Quick Reference</source>
          <target state="translated">AngularJSからAngularの概念へ。クイックリファレンス</target>
        </trans-unit>
        <trans-unit id="a79d7666f12753eb1593d8d55349080a460f08f1" translate="yes" xml:space="preserve">
          <source>AngularJS to Angular concepts: Quick reference</source>
          <target state="translated">AngularJSからAngularの概念まで。クイックリファレンス</target>
        </trans-unit>
        <trans-unit id="71e9e741df0a590eafd026f54096b7bc961874d9" translate="yes" xml:space="preserve">
          <source>AngularJS, uses a &lt;code&gt;link&lt;/code&gt; tag in the head section of the &lt;code&gt;index.html&lt;/code&gt; file to define the styles for the application.</source>
          <target state="translated">AngularJS は、 &lt;code&gt;index.html&lt;/code&gt; ファイルのヘッドセクションにある &lt;code&gt;link&lt;/code&gt; タグを使用して、アプリケーションのスタイルを定義します。</target>
        </trans-unit>
        <trans-unit id="4cee08c4b7c72405159cc26c7780b76851e3a3fd" translate="yes" xml:space="preserve">
          <source>AngularJSUrlCodec</source>
          <target state="translated">AngularJSUrlCodec</target>
        </trans-unit>
        <trans-unit id="beb2fb26a90715a16ad2b713f52643af07bc8e11" translate="yes" xml:space="preserve">
          <source>Animatable properties and units</source>
          <target state="translated">アニメーション可能なプロパティとユニット</target>
        </trans-unit>
        <trans-unit id="0769c5775aae589f50623888b4c64c6191ca75c0" translate="yes" xml:space="preserve">
          <source>Animate HTML elements as they are inserted and removed from the DOM, including responsive real-time filtering.</source>
          <target state="translated">HTML 要素が DOM に挿入されたり削除されたりする際に、レスポンシブなリアルタイムフィルタリングを含めてアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="618592a1a0b18cf010c11404c857093fca94afc4" translate="yes" xml:space="preserve">
          <source>Animate HTML elements in complex sequences and choreographies.</source>
          <target state="translated">HTML 要素を複雑なシーケンスや振り付けでアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="22f5b7d24e1ffc8c67c552e6bdc267d15ad51cc1" translate="yes" xml:space="preserve">
          <source>Animate each element on screen for 0.5 seconds using a custom-defined easing curve, simultaneously fading it in and un-transforming it.</source>
          <target state="translated">カスタム定義された緩和曲線を使用して、画面上の各要素を 0.5 秒間アニメーション化し、同時にフェードインして変換を解除します。</target>
        </trans-unit>
        <trans-unit id="bbd45932cc4b4e9e342cbb31ef89450062658db7" translate="yes" xml:space="preserve">
          <source>Animate multiple elements using query() and stagger() functions</source>
          <target state="translated">query()と stagger()関数を使って複数の要素をアニメーションさせる</target>
        </trans-unit>
        <trans-unit id="1df44453e1f5986603739440ade7f2955dce87e3" translate="yes" xml:space="preserve">
          <source>Animate parent and child elements.</source>
          <target state="translated">親要素と子要素をアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="1231f267f34e53a86804d9ed850d53253508e336" translate="yes" xml:space="preserve">
          <source>AnimateChildOptions</source>
          <target state="translated">AnimateChildOptions</target>
        </trans-unit>
        <trans-unit id="d7cf5bc56891490654005df5eefb910d609dce34" translate="yes" xml:space="preserve">
          <source>AnimateTimings</source>
          <target state="translated">AnimateTimings</target>
        </trans-unit>
        <trans-unit id="d913287670141916915aa8af33ee5f086ec77a65" translate="yes" xml:space="preserve">
          <source>Animates in the element over 300 milliseconds. During the animation, the element assumes its default width and opacity.</source>
          <target state="translated">要素内で300ミリ秒以上のアニメーションを行います。アニメーションの間、要素はデフォルトの幅と不透明度を想定しています。</target>
        </trans-unit>
        <trans-unit id="820b9c7157225f0d4bfc03fe34474f3177ca57d5" translate="yes" xml:space="preserve">
          <source>Animating a simple transition</source>
          <target state="translated">シンプルなトランジションのアニメーション</target>
        </trans-unit>
        <trans-unit id="1acb2e94dc3017b424ec642021dbc908a4c12566" translate="yes" xml:space="preserve">
          <source>Animating entering and leaving a view</source>
          <target state="translated">ビューへの入退出をアニメーション化</target>
        </trans-unit>
        <trans-unit id="7886cadc604f670181386ae5ea9a46ff00865c33" translate="yes" xml:space="preserve">
          <source>Animating to the final state</source>
          <target state="translated">最終状態へのアニメーション</target>
        </trans-unit>
        <trans-unit id="aff1288fe6cdc9b27c1923584d50a269fdc280dc" translate="yes" xml:space="preserve">
          <source>Animation callbacks</source>
          <target state="translated">アニメーションのコールバック</target>
        </trans-unit>
        <trans-unit id="42515a4b18b3e75a9a05c13c308ead18b0c1cf76" translate="yes" xml:space="preserve">
          <source>Animation definition</source>
          <target state="translated">アニメーションの定義</target>
        </trans-unit>
        <trans-unit id="dbcb7927796307d3da6f12d7006d5bd2f5657cd1" translate="yes" xml:space="preserve">
          <source>Animation definitions are linked to components through the &lt;code&gt;&lt;a href=&quot;core/component#animations&quot;&gt;animations&lt;/a&gt;&lt;/code&gt; property in the &lt;code&gt;@&lt;a href=&quot;core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata, typically in the component file of the HTML element to be animated. The &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function encapsulates a named animation, with all other function calls nested within. Use the trigger name to bind the named animation to a specific triggering element in the HTML template.</source>
          <target state="translated">アニメーション定義は、 &lt;code&gt;@&lt;a href=&quot;core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;core/component&quot;&gt;コンポーネント&lt;/a&gt;メタデータ、通常はアニメーション化されるHTML要素のコンポーネントファイルの &lt;code&gt;&lt;a href=&quot;core/component#animations&quot;&gt;animations&lt;/a&gt;&lt;/code&gt; プロパティを通じてコン​​ポーネントにリンクされます。 &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; （）関数は、内にネストされた他のすべての関数呼び出しで、名前のアニメーションをカプセル化します。トリガー名を使用して、名前付きアニメーションをHTMLテンプレートの特定のトリガー要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="310caf407085ad7f23432a3af12093d2c5b45918" translate="yes" xml:space="preserve">
          <source>Animation metadata: duration, delay, and easing</source>
          <target state="translated">アニメーションのメタデータ:デュレーション、ディレイ、イージング</target>
        </trans-unit>
        <trans-unit id="070dc1a18e384d7b8c26273653b21f0661b190a1" translate="yes" xml:space="preserve">
          <source>Animation provides the illusion of motion: HTML elements change styling over time. Well-designed animations can make your application more fun and easier to use, but they aren't just cosmetic. Animations can improve your app and user experience in a number of ways:</source>
          <target state="translated">アニメーションは、動きがあるかのような錯覚を与えます。HTML 要素は時間の経過とともにスタイルを変化させます。優れたデザインのアニメーションは、アプリケーションをより楽しく使いやすくしますが、単なる見栄えだけではありません。アニメーションは、アプリとユーザー エクスペリエンスをさまざまな方法で向上させることができます。</target>
        </trans-unit>
        <trans-unit id="c0c7db30f689dea02b345d4feb19f80be591a5b4" translate="yes" xml:space="preserve">
          <source>Animation sequence summary</source>
          <target state="translated">アニメーションシーケンスの概要</target>
        </trans-unit>
        <trans-unit id="a2f413b428d01e3d852c9e02cf22d9856f4c9161" translate="yes" xml:space="preserve">
          <source>Animation state and styles</source>
          <target state="translated">アニメーションの状態とスタイル</target>
        </trans-unit>
        <trans-unit id="4c76d2cc2e089a0e490b689a8cc8e9feb5728375" translate="yes" xml:space="preserve">
          <source>Animation trigger bindings convert all values to strings, and then match the previous and current values against any linked transitions. Booleans can be specified as &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">アニメーショントリガーバインディングはすべての値を文字列に変換し、リンクされた遷移に対して以前の値と現在の値を照合します。ブール値は &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; として指定できます。</target>
        </trans-unit>
        <trans-unit id="ab4cf7592d8d437f90159cdf1869e12aa12d56dc" translate="yes" xml:space="preserve">
          <source>AnimationAnimateChildMetadata</source>
          <target state="translated">AnimationAnimateChildMetadata</target>
        </trans-unit>
        <trans-unit id="a8199a8fd1152906437f37e892432a0117740e62" translate="yes" xml:space="preserve">
          <source>AnimationAnimateMetadata</source>
          <target state="translated">AnimationAnimateMetadata</target>
        </trans-unit>
        <trans-unit id="7666f03f557808da2899925571c1dc35a2eac29b" translate="yes" xml:space="preserve">
          <source>AnimationAnimateRefMetadata</source>
          <target state="translated">AnimationAnimateRefMetadata</target>
        </trans-unit>
        <trans-unit id="a6c33451ee1ed3313b74b3e177d7107746a4a7b7" translate="yes" xml:space="preserve">
          <source>AnimationBuilder</source>
          <target state="translated">AnimationBuilder</target>
        </trans-unit>
        <trans-unit id="b6988ea2371fbf582630d88819c0e3f3c9bffeed" translate="yes" xml:space="preserve">
          <source>AnimationDriver</source>
          <target state="translated">AnimationDriver</target>
        </trans-unit>
        <trans-unit id="b68b862342361922d8aeebe8914e3813b3a82ea4" translate="yes" xml:space="preserve">
          <source>AnimationEvent</source>
          <target state="translated">AnimationEvent</target>
        </trans-unit>
        <trans-unit id="b8bfdf6ac4276ec091b33b31fa025b59d8ae6d7d" translate="yes" xml:space="preserve">
          <source>AnimationFactory</source>
          <target state="translated">AnimationFactory</target>
        </trans-unit>
        <trans-unit id="a3a7882964c227f42de2f45e1e825e6e7dbaf958" translate="yes" xml:space="preserve">
          <source>AnimationGroupMetadata</source>
          <target state="translated">AnimationGroupMetadata</target>
        </trans-unit>
        <trans-unit id="3e9f8514aa4837ac7a9591838d80d05da6ea30b5" translate="yes" xml:space="preserve">
          <source>AnimationKeyframesSequenceMetadata</source>
          <target state="translated">AnimationKeyframesSequenceMetadata</target>
        </trans-unit>
        <trans-unit id="6fb97195c310cce7c5f508b709bcb87dd08d499f" translate="yes" xml:space="preserve">
          <source>AnimationMetadata</source>
          <target state="translated">AnimationMetadata</target>
        </trans-unit>
        <trans-unit id="53f1eba48611407f4a1975724592be1e71afd91a" translate="yes" xml:space="preserve">
          <source>AnimationMetadataType</source>
          <target state="translated">AnimationMetadataType</target>
        </trans-unit>
        <trans-unit id="fb0b93cca54964c4444fc172d338b01d02dd2b94" translate="yes" xml:space="preserve">
          <source>AnimationOptions</source>
          <target state="translated">AnimationOptions</target>
        </trans-unit>
        <trans-unit id="209f8c7f66e9bd69a25c35a1868b922ae003930a" translate="yes" xml:space="preserve">
          <source>AnimationPlayer</source>
          <target state="translated">AnimationPlayer</target>
        </trans-unit>
        <trans-unit id="6fb8a7cdef7876dff2df1190c171576bf5a725ed" translate="yes" xml:space="preserve">
          <source>AnimationQueryMetadata</source>
          <target state="translated">AnimationQueryMetadata</target>
        </trans-unit>
        <trans-unit id="78889e2ae13c736ba48dc387ac4d3316766916b3" translate="yes" xml:space="preserve">
          <source>AnimationQueryOptions</source>
          <target state="translated">AnimationQueryOptions</target>
        </trans-unit>
        <trans-unit id="2c5530db9d40f1553b25c85091789d55b95b926e" translate="yes" xml:space="preserve">
          <source>AnimationReferenceMetadata</source>
          <target state="translated">AnimationReferenceMetadata</target>
        </trans-unit>
        <trans-unit id="c65c6a5a21639ea491959e7e81065101b6d31f48" translate="yes" xml:space="preserve">
          <source>AnimationSequenceMetadata</source>
          <target state="translated">AnimationSequenceMetadata</target>
        </trans-unit>
        <trans-unit id="f9a31525fd95249ef37b0b3be3b81f19770b6d77" translate="yes" xml:space="preserve">
          <source>AnimationStaggerMetadata</source>
          <target state="translated">AnimationStaggerMetadata</target>
        </trans-unit>
        <trans-unit id="d5c9e1c8b8703497373c017c5a25ac585f71dca2" translate="yes" xml:space="preserve">
          <source>AnimationStateMetadata</source>
          <target state="translated">AnimationStateMetadata</target>
        </trans-unit>
        <trans-unit id="9f838574e71a14ec4034fc9c668e17daeaa733e1" translate="yes" xml:space="preserve">
          <source>AnimationStyleMetadata</source>
          <target state="translated">AnimationStyleMetadata</target>
        </trans-unit>
        <trans-unit id="2bfef012b3c0bb7a9c8988f6ac24a5853564b567" translate="yes" xml:space="preserve">
          <source>AnimationTransitionMetadata</source>
          <target state="translated">AnimationTransitionMetadata</target>
        </trans-unit>
        <trans-unit id="c9a79289360f62c0f790d371279f9ed9ef6dffec" translate="yes" xml:space="preserve">
          <source>AnimationTriggerMetadata</source>
          <target state="translated">AnimationTriggerMetadata</target>
        </trans-unit>
        <trans-unit id="c77dcdedc0f40e8dac08a08c8bef7255abb90e75" translate="yes" xml:space="preserve">
          <source>Animations</source>
          <target state="translated">Animations</target>
        </trans-unit>
        <trans-unit id="0f54eb841ec3b22a39fd482ff66e7904acc8641b" translate="yes" xml:space="preserve">
          <source>Animations API summary</source>
          <target state="translated">アニメーション API の概要</target>
        </trans-unit>
        <trans-unit id="52512eb45e2b30a744e5257c969ca3111e25423f" translate="yes" xml:space="preserve">
          <source>Animations are defined in the metadata of the component that controls the HTML element to be animated. Put the code that defines your animations under the &lt;code&gt;animations:&lt;/code&gt; property within the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">アニメーションは、アニメーション化されるHTML要素を制御するコンポーネントのメタデータで定義されます。下にアニメーションを定義するコード置く &lt;code&gt;animations:&lt;/code&gt; の中にプロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータ。</target>
        </trans-unit>
        <trans-unit id="06c3f02ce6046751e8afb6c9448801d6483e310e" translate="yes" xml:space="preserve">
          <source>Animations can be defined directly inside your components. For this example we are defining the animations in a separate file, which allows us to re-use the animations.</source>
          <target state="translated">アニメーションは、コンポーネントの内部で直接定義することができます。この例では、アニメーションを別のファイルに定義しているので、アニメーションを再利用することができます。</target>
        </trans-unit>
        <trans-unit id="2d23b44688014855fdd9501d6bbd3e413501debb" translate="yes" xml:space="preserve">
          <source>Animations transitions and triggers</source>
          <target state="translated">アニメーションのトランジションとトリガー</target>
        </trans-unit>
        <trans-unit id="c3caa79244ee020e6b1824a6e588366f508b747d" translate="yes" xml:space="preserve">
          <source>Anno Domini</source>
          <target state="translated">アノドミニ</target>
        </trans-unit>
        <trans-unit id="53096344fdb247ca5b187e37878713fdf03e1195" translate="yes" xml:space="preserve">
          <source>Another TypeScript feature you can make use of is &lt;em&gt;classes&lt;/em&gt;. In particular, you can turn component controllers into classes. That way they'll be a step closer to becoming Angular component classes, which will make life easier once you upgrade.</source>
          <target state="translated">利用できるもう1つのTypeScript機能は&lt;em&gt;クラス&lt;/em&gt;です。特に、コンポーネントコントローラをクラスに変換できます。そうすることで、Angularコンポーネントクラスに一歩近づくことができます。これにより、アップグレード後の作業が楽になります。</target>
        </trans-unit>
        <trans-unit id="56b080272940939ced695e0e8fccf51d1f089b8b" translate="yes" xml:space="preserve">
          <source>Another advantage of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is that you can use it to guard against null. Show/hide is best suited for very simple use cases, so when you need a guard, opt instead for &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. Angular will throw an error if a nested expression tries to access a property of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のもう 1つの利点は、これを使用してnullから保護できることです。表示/非表示は非常に単純なユースケースに最適です。そのため、ガードが必要な場合は、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; の代わりに選択してください。ネストされた式が &lt;code&gt;null&lt;/code&gt; のプロパティにアクセスしようとすると、Angularはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="6fcce88157a90349b33951e206a2c653b84c62ec" translate="yes" xml:space="preserve">
          <source>Another class, &lt;code&gt;EvenBetterLogger&lt;/code&gt;, might display the user name in the log message. This logger gets the user from an injected &lt;code&gt;UserService&lt;/code&gt; instance.</source>
          <target state="translated">別のクラス &lt;code&gt;EvenBetterLogger&lt;/code&gt; は、ログメッセージにユーザー名を表示する場合があります。このロガーは、注入された &lt;code&gt;UserService&lt;/code&gt; インスタンスからユーザーを取得します。</target>
        </trans-unit>
        <trans-unit id="81038be782361cd7a156e96f6d6e6dae45bb260d" translate="yes" xml:space="preserve">
          <source>Another common use case for attribute binding is with the &lt;code&gt;colspan&lt;/code&gt; attribute in tables. Binding to the &lt;code&gt;colspan&lt;/code&gt; attribute helps you keep your tables programmatically dynamic. Depending on the amount of data that your application populates a table with, the number of columns that a row spans could change.</source>
          <target state="translated">属性バインディングのもう1つの一般的な使用例は、テーブルの &lt;code&gt;colspan&lt;/code&gt; 属性です。 &lt;code&gt;colspan&lt;/code&gt; 属性にバインドすると、テーブルをプログラムで動的に保つことができます。アプリケーションがテーブルに入力するデータの量に応じて、行がまたがる列の数が変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2181ba65b8c1858b15868800a96303556d7912aa" translate="yes" xml:space="preserve">
          <source>Another domain</source>
          <target state="translated">別ドメイン</target>
        </trans-unit>
        <trans-unit id="2815d2c42633ed5d5b751d955945df92e687f95c" translate="yes" xml:space="preserve">
          <source>Another domain (for routing)</source>
          <target state="translated">別ドメイン(ルーティング用</target>
        </trans-unit>
        <trans-unit id="1c927043925bf388c4a50fabc1ec3f662f2dd811" translate="yes" xml:space="preserve">
          <source>Another domain, AppModule</source>
          <target state="translated">もう一つのドメイン、AppModule</target>
        </trans-unit>
        <trans-unit id="7e1638d3363efdfbe5466eef1db2d2342c31fe3e" translate="yes" xml:space="preserve">
          <source>Another example</source>
          <target state="translated">別の例</target>
        </trans-unit>
        <trans-unit id="0ed013f9e94cdc0d63ce5a44b4f989895c245c7d" translate="yes" xml:space="preserve">
          <source>Another example is disabling a button when the component says that it &lt;code&gt;isUnchanged&lt;/code&gt;:</source>
          <target state="translated">別の例は、コンポーネントが &lt;code&gt;isUnchanged&lt;/code&gt; あるとコンポーネントが言ったときにボタンを無効にすることです。</target>
        </trans-unit>
        <trans-unit id="3c964816bf2def0a4255f7c53c2ee3c595ece4c7" translate="yes" xml:space="preserve">
          <source>Another example shows the component class with a provider for &lt;code&gt;FlowerService&lt;/code&gt;. In this case, the injector looks no further than the current &lt;code&gt;ElementInjector&lt;/code&gt; because it finds the &lt;code&gt;FlowerService&lt;/code&gt; and returns the yellow flower 🌼.</source>
          <target state="translated">別の例は、 &lt;code&gt;FlowerService&lt;/code&gt; のプロバイダーを持つコンポーネントクラスを示しています。この場合、インジェクターは &lt;code&gt;FlowerService&lt;/code&gt; を見つけて黄色い花returnsを返すため、現在の &lt;code&gt;ElementInjector&lt;/code&gt; を超えないように見えます。</target>
        </trans-unit>
        <trans-unit id="f02c387e6e60b792589c26b7e606d305ef9df377" translate="yes" xml:space="preserve">
          <source>Another is setting a property of a directive:</source>
          <target state="translated">もう一つはディレクティブのプロパティを設定することです。</target>
        </trans-unit>
        <trans-unit id="602cc167054f68080e0cc0803ee3cbf5add9046c" translate="yes" xml:space="preserve">
          <source>Another key difference between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; is that the latter requires you to instantiate both the AngularJS and Angular modules up-front. This means that you have to pay the cost of instantiating the Angular part of the app, even if you don't use any Angular assets until later. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is again less aggressive. It will only instantiate the Angular part when it is required for the first time; that is, as soon as it needs to create a downgraded component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; のもう 1つの重要な違いは、後者では、AngularJSとAngularモジュールの両方を事前にインスタンス化する必要があることです。つまり、後でAngularアセットを使用しない場合でも、アプリのAngular部分をインスタンス化するコストを支払う必要があります。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、あまり積極的ではありません。 Angularパーツは、初めて必要になったときにのみインスタンス化されます。つまり、ダウングレードされたコンポーネントを作成する必要があるとすぐに。</target>
        </trans-unit>
        <trans-unit id="1fc73f82cc15907fd525993478d793760025df4c" translate="yes" xml:space="preserve">
          <source>Another platform factory to modify. Allows you to compose factories to build up configurations that might be required by different libraries or parts of the application.</source>
          <target state="translated">変更する別のプラットフォームファクトリー。異なるライブラリやアプリケーションの一部によって必要とされるかもしれない構成を構築するためのファクトリーを作成することができます。</target>
        </trans-unit>
        <trans-unit id="81aea9981f12bfceefc57291e2e46e0a448fc33b" translate="yes" xml:space="preserve">
          <source>Another problem: some HTML elements require all immediate children to be of a specific type. For example, the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element requires &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; children. You can't wrap the &lt;em&gt;options&lt;/em&gt; in a conditional &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">別の問題：一部のHTML要素では、すべての直接の子が特定のタイプである必要があります。たとえば、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素には &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 子が必要です。&lt;em&gt;オプション&lt;/em&gt;を条件付きの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; でラップすることはできません。</target>
        </trans-unit>
        <trans-unit id="5500271b188473b9589122039f8e0d10390b1818" translate="yes" xml:space="preserve">
          <source>Another reason to re-provide a service at another level is to substitute a &lt;em&gt;more specialized&lt;/em&gt; implementation of that service, deeper in the component tree.</source>
          <target state="translated">別のレベルでサービスを再提供するもう1つの理由は、コンポーネントツリーのより深いところにある、そのサービスの&lt;em&gt;より専門的な&lt;/em&gt;実装を置き換えるためです。</target>
        </trans-unit>
        <trans-unit id="5452461849c5467ea0a5cfad43f0fcf8652c8206" translate="yes" xml:space="preserve">
          <source>Another service is needed to supply a specific set of questions from which to build an individual form. For this exercise you will create the &lt;code&gt;QuestionService&lt;/code&gt; to supply this array of questions from the hard-coded sample data. In a real-world app, the service might fetch data from a backend system. The key point, however, is that you control the hero job-application questions entirely through the objects returned from &lt;code&gt;QuestionService&lt;/code&gt;. To maintain the questionnaire as requirements change, you only need to add, update, and remove objects from the &lt;code&gt;questions&lt;/code&gt; array.</source>
          <target state="translated">個別のフォームを作成するための特定の質問セットを提供するには、別のサービスが必要です。この演習では、 &lt;code&gt;QuestionService&lt;/code&gt; を作成して、ハードコードされたサンプルデータからこの一連の質問を提供します。実際のアプリでは、サービスがバックエンドシステムからデータをフェッチする場合があります。ただし、重要な点は、 &lt;code&gt;QuestionService&lt;/code&gt; から返されたオブジェクトを介してヒーローの求人応募の質問を完全に制御することです。要件の変更に応じて質問表を維持するには、 &lt;code&gt;questions&lt;/code&gt; 配列からオブジェクトを追加、更新、および削除するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="b4edcd9ca213bdd8b52b2310e46e71e39a3e13ee" translate="yes" xml:space="preserve">
          <source>Another simple way to deploy your Angular app is to use &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot;&gt;GitHub Pages&lt;/a&gt;.</source>
          <target state="translated">Angularアプリをデプロイするもう1つの簡単な方法は、&lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot;&gt;GitHubページ&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="1a0232ed081a1f2af117924de181bf23193259db" translate="yes" xml:space="preserve">
          <source>Another solution to choosing a provider token for non-class dependencies is to define and use an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; object. The following example shows how to define such a token.</source>
          <target state="translated">クラス以外の依存関係のプロバイダートークンを選択する別のソリューションは、 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; オブジェクトを定義して使用することです。次の例は、そのようなトークンを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e18a7fa42b657d430a040fcb6744c6085d9b4ae0" translate="yes" xml:space="preserve">
          <source>Another thing you can do is start adding &lt;em&gt;type safety&lt;/em&gt; to your code. This has actually partially already happened because of the AngularJS typings you installed. TypeScript are checking that you are calling AngularJS APIs correctly when you do things like register components to Angular modules.</source>
          <target state="translated">もう1つの方法は、コードに&lt;em&gt;タイプセーフ&lt;/em&gt;を追加することです。インストールしたAngularJSのタイピングが原因で、これは実際にはすでに部分的に発生しています。TypeScriptは、コンポーネントをAngularモジュールに登録するなどの操作を行うときに、AngularJS APIを正しく呼び出していることを確認しています。</target>
        </trans-unit>
        <trans-unit id="c3810aa894a3348cc470b2185cd6df4bf822a9c5" translate="yes" xml:space="preserve">
          <source>Another way to limit provider scope is by adding the service you want to limit to the component&amp;rsquo;s &lt;code&gt;providers&lt;/code&gt; array. Component providers and NgModule providers are independent of each other. This method is helpful for when you want to eagerly load a module that needs a service all to itself. Providing a service in the component limits the service only to that component (other components in the same module can&amp;rsquo;t access it.)</source>
          <target state="translated">プロバイダーのスコープを制限する別の方法は、制限するサービスをコンポーネントの &lt;code&gt;providers&lt;/code&gt; 配列に追加することです。コンポーネントプロバイダーとNgModuleプロバイダーは互いに独立しています。このメソッドは、サービスを必要とするモジュールをそれ自体に熱心にロードしたい場合に役立ちます。コンポーネントにサービスを提供すると、サービスはそのコンポーネントのみに制限されます（同じモジュール内の他のコンポーネントはサービスにアクセスできません）。</target>
        </trans-unit>
        <trans-unit id="251ae41000e8afa24184650218abb2c7d40f51c8" translate="yes" xml:space="preserve">
          <source>Another way to limit provider scope is by adding the service you want to limit to the component&amp;rsquo;s &lt;code&gt;providers&lt;/code&gt; array. Component providers and NgModule providers are independent of each other. This method is helpful when you want to eagerly load a module that needs a service all to itself. Providing a service in the component limits the service only to that component and its descendants. Other components in the same module can&amp;rsquo;t access it.</source>
          <target state="translated">プロバイダーの範囲を制限するもう1つの方法は、制限するサービスをコンポーネントの &lt;code&gt;providers&lt;/code&gt; 配列に追加することです。コンポーネントプロバイダーとNgModuleプロバイダーは互いに独立しています。この方法は、サービスを必要とするモジュールをそれ自体に熱心にロードする場合に役立ちます。コンポーネントでサービスを提供すると、サービスはそのコンポーネントとその子孫にのみ制限されます。同じモジュール内の他のコンポーネントはそれにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="da3ac8b45123b40210a3b3867ac927476f2704e1" translate="yes" xml:space="preserve">
          <source>Any app developer can use these and other libraries that have been published as npm packages by the Angular team or by third parties. See &lt;a href=&quot;using-libraries&quot;&gt;Using Published Libraries&lt;/a&gt;.</source>
          <target state="translated">すべてのアプリ開発者は、Angularチームまたはサードパーティによってnpmパッケージとして公開されたこれらのライブラリおよびその他のライブラリを使用できます。&lt;a href=&quot;using-libraries&quot;&gt;公開ライブラリの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34c22c53a0508cf256d35202481e3c5e94595954" translate="yes" xml:space="preserve">
          <source>Any application still relying on the &lt;code&gt;esm5&lt;/code&gt; and &lt;code&gt;fesm5&lt;/code&gt; as the input to its build system will need to ensure that the build pipeline is capable of accepting JavaScript code conforming to ECMAScript 2015 (ES2015) language specification.</source>
          <target state="translated">ビルドシステムへの入力としてまだ &lt;code&gt;esm5&lt;/code&gt; と &lt;code&gt;fesm5&lt;/code&gt; に依存しているアプリケーションは、ビルドパイプラインがECMAScript 2015（ES2015）言語仕様に準拠したJavaScriptコードを受け入れることができることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="d9e225c8709529016fb0fe3d9aaeca9255591cfb" translate="yes" xml:space="preserve">
          <source>Any changes to the public API surface will be done using the versioning, support, and depreciation policies describe above.</source>
          <target state="translated">パブリック API サーフェスへの変更は、上記で説明したバージョニング、サポート、および減価償却ポリシーを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="4252573f476e0bf8d0ee4fd8ca2af51dda805825" translate="yes" xml:space="preserve">
          <source>Any class with the &lt;code&gt;@&lt;a href=&quot;component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレーターを持つクラス</target>
        </trans-unit>
        <trans-unit id="faa5c260ff9b2e13ba3a7e065117c51a53243e3b" translate="yes" xml:space="preserve">
          <source>Any component created within a lazy loaded module&amp;rsquo;s context, such as by router navigation, gets the local instance of the service, not the instance in the root application injector. Components in external modules continue to receive the instance created for the application root.</source>
          <target state="translated">ルーターのナビゲーションなどにより、遅延読み込みされたモジュールのコンテキスト内で作成されたコンポーネントは、ルートアプリケーションインジェクター内のインスタンスではなく、サービスのローカルインスタンスを取得します。外部モジュールのコンポーネントは、アプリケーションルート用に作成されたインスタンスを引き続き受け取ります。</target>
        </trans-unit>
        <trans-unit id="06a75db5d4bcefd57aafb04659c4d9594738124e" translate="yes" xml:space="preserve">
          <source>Any error returned on the &lt;code&gt;Observable&lt;/code&gt; response stream will be wrapped in an &lt;code&gt;&lt;a href=&quot;httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; to provide additional context about the state of the HTTP layer when the error occurred. The error property will contain either a wrapped Error object or the error response returned from the server.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 応答ストリームで返されたエラーはすべて &lt;code&gt;&lt;a href=&quot;httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; にラップされ、エラーが発生したときのHTTPレイヤーの状態に関する追加のコンテキストを提供します。errorプロパティには、ラップされたErrorオブジェクトまたはサーバーから返されたエラー応答のいずれかが含まれます。</target>
        </trans-unit>
        <trans-unit id="9b490d3957cd57eaa58b9061b9b93abf6f8fceda" translate="yes" xml:space="preserve">
          <source>Any future tasks or microtasks scheduled from within this function will continue executing from outside of the Angular zone.</source>
          <target state="translated">この機能内でスケジュールされた将来のタスクやマイクロタスクは、Angularゾーンの外から実行され続けます。</target>
        </trans-unit>
        <trans-unit id="858f110f5dd01bf7e8dc4320e306d0feb61a7a50" translate="yes" xml:space="preserve">
          <source>Any future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.</source>
          <target state="translated">この関数内でスケジュールされた将来のタスクやマイクロタスクは、Angularゾーン内から実行され続けます。</target>
        </trans-unit>
        <trans-unit id="93532a30b014f85c589d7c068d4130fc1fccc7b1" translate="yes" xml:space="preserve">
          <source>Any observables that the components subscribe to internally should be cleaned up and disposed of during the lifecycle of those components.</source>
          <target state="translated">コンポーネントが内部的にサブスクライブしているオブザーバブルは、それらのコンポーネントのライフサイクルの間にクリーンアップされ、廃棄されるべきです。</target>
        </trans-unit>
        <trans-unit id="1ac78989853c9b050e2eda23ff2928dfb610d9c3" translate="yes" xml:space="preserve">
          <source>Any provider defined in the child component tree of the current component (e.g. &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(SomeService) someService: SomeService&lt;/code&gt;)</source>
          <target state="translated">現在のコンポーネントの子コンポーネントツリーで定義されているプロバイダー（例： &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(SomeService) someService: SomeService&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="df5462a835da0acf093fceb883fd8b853fd7d033" translate="yes" xml:space="preserve">
          <source>Any provider defined through a string token (e.g. &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('someToken') someTokenVal: any&lt;/code&gt;)</source>
          <target state="translated">文字列トークンで定義された任意のプロバイダ（例えば &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('someToken') someTokenVal: any&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="9b53bf1c187ff8e5d85d8461d6cbd8075538730c" translate="yes" xml:space="preserve">
          <source>Any subscribers to the &lt;code&gt;valueChanges&lt;/code&gt; observable receive the new value.</source>
          <target state="translated">&lt;code&gt;valueChanges&lt;/code&gt; 可能なvalueChangesのサブスクライバーは、新しい値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="63ef43a80069c779b3ee5167397831492df1e816" translate="yes" xml:space="preserve">
          <source>Anything that uses a regular expression is worth testing thoroughly. Use simple Jasmine to explore the expected cases and the edge cases.</source>
          <target state="translated">正規表現を使うものは何でも徹底的にテストする価値があります。シンプルなJasmineを使って、予想されるケースとエッジケースを探ってみましょう。</target>
        </trans-unit>
        <trans-unit id="88cda930404408fa5b6b5bb5ea64822d75f409c3" translate="yes" xml:space="preserve">
          <source>Anything under &lt;code&gt;assets&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assets&lt;/code&gt; 下のすべて。</target>
        </trans-unit>
        <trans-unit id="93cd385e58bd290f15ae342c6fdf3fea9806d612" translate="yes" xml:space="preserve">
          <source>AoT metadata errors</source>
          <target state="translated">AoT メタデータエラー</target>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes" xml:space="preserve">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="0d6c7d4967052bf08ff030cdd321d82fc75c2851" translate="yes" xml:space="preserve">
          <source>Apart from &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, you can use the rest of the &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; helpers as usual to build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; とは別に、残りの &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; ヘルパーを通常どおり使用して、ハイブリッドアプリケーションを構築できます。Angularの部分（ダウングレードされたサービスなど）は、ダウングレードされたモジュールがブートストラップされるまで、つまりダウングレードされたコンポーネントをインスタンス化するまで利用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="57807d7e38eb807484ab254a0fac6301d23c9944" translate="yes" xml:space="preserve">
          <source>App &lt;code&gt;root module&lt;/code&gt;</source>
          <target state="translated">アプリ &lt;code&gt;root module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5aa3cc756775d4afef149117b0695738c8d5e450" translate="yes" xml:space="preserve">
          <source>App Shell</source>
          <target state="translated">シェルアプリ</target>
        </trans-unit>
        <trans-unit id="7b4fd1b17b918b41d314d1e08cfa7e5547f2b386" translate="yes" xml:space="preserve">
          <source>App shell</source>
          <target state="translated">アプリシェル</target>
        </trans-unit>
        <trans-unit id="f44820b851018adfc0c40223a29fecd82923e3f3" translate="yes" xml:space="preserve">
          <source>App shell is a way to render a portion of your application via a route at build time. It can improve the user experience by quickly launching a static rendered page (a skeleton common to all pages) while the browser downloads the full client version and switches to it automatically after the code loads.</source>
          <target state="translated">アプリシェルは、ビルド時にアプリケーションの一部をルート経由でレンダリングする方法です。ブラウザが完全なクライアントバージョンをダウンロードし、コードがロードされた後に自動的に切り替える間に、静的にレンダリングされたページ(すべてのページに共通のスケルトン)を素早く起動することで、ユーザーエクスペリエンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="95c4786d84aa1c9b22007dc04178f6b25983cd88" translate="yes" xml:space="preserve">
          <source>App shell is a way to render a portion of your application via a route at build time. This gives users a meaningful first paint of your application that appears quickly because the browser can render static HTML and CSS without the need to initialize JavaScript.</source>
          <target state="translated">アプリシェルは、ビルド時にアプリケーションの一部をルート経由でレンダリングする方法です。ブラウザは JavaScript を初期化する必要がなく、静的な HTML と CSS をレンダリングできるため、ユーザーはアプリケーションの意味のある最初のペイントを素早く表示することができます。</target>
        </trans-unit>
        <trans-unit id="63d67384492343e219bf6928f05ecac25471ffd5" translate="yes" xml:space="preserve">
          <source>App tabs</source>
          <target state="translated">アプリタブ</target>
        </trans-unit>
        <trans-unit id="540143c662eb90de02a65e482599c49fa15df426" translate="yes" xml:space="preserve">
          <source>App versions</source>
          <target state="translated">アプリのバージョン</target>
        </trans-unit>
        <trans-unit id="75913f9fcc32232a451e534954939bf6b759d88c" translate="yes" xml:space="preserve">
          <source>AppModule</source>
          <target state="translated">AppModule</target>
        </trans-unit>
        <trans-unit id="3bc3e2080ed9e689cda76f06895f83510ab7fc40" translate="yes" xml:space="preserve">
          <source>Append &lt;code&gt;/heroes&lt;/code&gt; to the URL in the browser address bar. You should see the familiar heroes master/detail view.</source>
          <target state="translated">ブラウザーのアドレスバーのURLに &lt;code&gt;/heroes&lt;/code&gt; を追加します。おなじみのヒーローのマスター/詳細ビューが表示されます。</target>
        </trans-unit>
        <trans-unit id="73973cfd168d40bb8277e2f6044ecdb605409c4e" translate="yes" xml:space="preserve">
          <source>Appendices</source>
          <target state="translated">Appendices</target>
        </trans-unit>
        <trans-unit id="f3f60044b06335eb6c4230e3c39f5e0218445878" translate="yes" xml:space="preserve">
          <source>Appendix</source>
          <target state="translated">Appendix</target>
        </trans-unit>
        <trans-unit id="261d623be7e2a959a5a15cb6df845be318cf00fe" translate="yes" xml:space="preserve">
          <source>Appendix: &lt;code&gt;LocationStrategy&lt;/code&gt; and browser URL styles</source>
          <target state="translated">付録： &lt;code&gt;LocationStrategy&lt;/code&gt; とブラウザのURLスタイル</target>
        </trans-unit>
        <trans-unit id="01e09299c9c5043bbe3cce453e5e966ce28cdece" translate="yes" xml:space="preserve">
          <source>Appendix: Develop locally with IE</source>
          <target state="translated">付録。IEを使ったローカル開発</target>
        </trans-unit>
        <trans-unit id="2399a201033dbd00d9af405e9941b75deec4a79f" translate="yes" xml:space="preserve">
          <source>Appendix: No &lt;code&gt;FilterPipe&lt;/code&gt; or &lt;code&gt;OrderByPipe&lt;/code&gt;</source>
          <target state="translated">付録： &lt;code&gt;FilterPipe&lt;/code&gt; または &lt;code&gt;OrderByPipe&lt;/code&gt; なし</target>
        </trans-unit>
        <trans-unit id="29b3b122df7e77e777ce5cfcd64d2161ed3b1c44" translate="yes" xml:space="preserve">
          <source>Appendix: Test using &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">付録： &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; （）/ &lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;（）を使用したテスト</target>
        </trans-unit>
        <trans-unit id="9b005c7c5c5f6b1e73b6ef1e3f05d714b908ab33" translate="yes" xml:space="preserve">
          <source>Appendix: Test using &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">付録： &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; （）/ &lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;（）を使用したテスト</target>
        </trans-unit>
        <trans-unit id="42746499949a4a6af72f7d65e860d0f5ca0c6702" translate="yes" xml:space="preserve">
          <source>Appendix: Upgrading PhoneCat Tests</source>
          <target state="translated">付録 PhoneCatテストのアップグレード</target>
        </trans-unit>
        <trans-unit id="bf96aa3c3ab705a8143ebfc310d65c579728b4f9" translate="yes" xml:space="preserve">
          <source>Appendix: Why add &lt;code&gt;@Input&lt;/code&gt;?</source>
          <target state="translated">付録：なぜ追加 &lt;code&gt;@Input&lt;/code&gt; を？</target>
        </trans-unit>
        <trans-unit id="15354e68bf45ee9bc58f7687ae8aefa5f4126715" translate="yes" xml:space="preserve">
          <source>Appendix: link parameters array</source>
          <target state="translated">付録:リンクパラメータ配列</target>
        </trans-unit>
        <trans-unit id="0c3eb7cc790639955b7256cc7f14b387fadfdb01" translate="yes" xml:space="preserve">
          <source>Appends URL segments to the current URL tree to create a new URL tree.</source>
          <target state="translated">URL セグメントを現在の URL ツリーに追加し、新しい URL ツリーを作成します。</target>
        </trans-unit>
        <trans-unit id="a10d6a6e5b58825f456a1c60aceb9233acfe1a06" translate="yes" xml:space="preserve">
          <source>Appends a child to a given parent node in the host element DOM.</source>
          <target state="translated">ホスト要素 DOM 内の指定された親ノードに子を追加します。</target>
        </trans-unit>
        <trans-unit id="72435c978d47a75814bd8d62487eb4a1c5cb31ca" translate="yes" xml:space="preserve">
          <source>Appends a new value to existing values for a parameter.</source>
          <target state="translated">パラメータの既存の値に新しい値を追加します。</target>
        </trans-unit>
        <trans-unit id="c07e8121475f29caa6a36b6ae4d27742e3366d83" translate="yes" xml:space="preserve">
          <source>Appends a new value to the existing set of values for a header and returns them in a clone of the original instance.</source>
          <target state="translated">ヘッダの既存の値のセットに新しい値を追加し、元のインスタンスのクローンとして返します。</target>
        </trans-unit>
        <trans-unit id="b1fb92ce49bfdc66b691a4febcac0bbe43b53838" translate="yes" xml:space="preserve">
          <source>Application architecture</source>
          <target state="translated">アプリケーションアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="8ea5b66a6bf60adea7d20d7175746bf7940fdf1c" translate="yes" xml:space="preserve">
          <source>Application components often need to share information. You can often use loosely coupled techniques for sharing information, such as data binding and service sharing, but sometimes it makes sense for one component to have a direct reference to another component. You need a direct reference, for instance, to access values or call methods on that component.</source>
          <target state="translated">アプリケーションコンポーネントはしばしば情報を共有する必要があります。情報を共有するためには、データバインディングやサービス共有などの疎結合技術を使用することがよくありますが、あるコンポーネントが別のコンポーネントへの直接参照を持つことが理にかなっている場合もあります。例えば、そのコンポーネントの値にアクセスしたり、メソッドを呼び出したりするには直接参照が必要です。</target>
        </trans-unit>
        <trans-unit id="f12a2c662c36b27f3825a6d97ac01c1d7cd35295" translate="yes" xml:space="preserve">
          <source>Application configuration files</source>
          <target state="translated">アプリケーション設定ファイル</target>
        </trans-unit>
        <trans-unit id="cfc388605134e26efe5e73bd8340a05bc5c0fa1b" translate="yes" xml:space="preserve">
          <source>Application developers can use the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; to &lt;code&gt;add&lt;/code&gt; a published library for use with an application in the same &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;.</source>
          <target state="translated">アプリケーション開発者は、&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、同じ&lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペース&lt;/a&gt;内のアプリケーションで使用する公開ライブラリを &lt;code&gt;add&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="a33d5f89e5c84fccd922ef838522228abdaae944" translate="yes" xml:space="preserve">
          <source>Application integration specs can test the interactions of multiple parts spread across folders and modules. They don't really belong to any part in particular, so they don't have a natural home next to any one file.</source>
          <target state="translated">アプリケーション統合仕様は、フォルダやモジュールに分散している複数のパーツの相互作用をテストすることができます。これらは特定のパーツに属するものではないので、あるファイルの隣に自然に置かれることはありません。</target>
        </trans-unit>
        <trans-unit id="6703104cd9653acb1e2ab46ed23c7db66b5070c2" translate="yes" xml:space="preserve">
          <source>Application internationalization is a many-faceted area of development, focused on making applications available and user-friendly to a worldwide audience. This page describes Angular's internationalization (i18n) tools, which can help you make your app available in multiple languages.</source>
          <target state="translated">アプリケーションの国際化は開発の多面的な分野であり、世界中のユーザーがアプリケーションを利用できるようにしたり、ユーザーフレンドリーにしたりすることに重点を置いています。このページでは、アプリを多言語で利用できるようにするためのAngularの国際化(i18n)ツールについて説明します。</target>
        </trans-unit>
        <trans-unit id="e39567047450a98becc249aa176cdaef7b8b173f" translate="yes" xml:space="preserve">
          <source>Application project files</source>
          <target state="translated">アプリケーションプロジェクトファイル</target>
        </trans-unit>
        <trans-unit id="8e4ad605d8891f443ed5a723fd540aecfca8c921" translate="yes" xml:space="preserve">
          <source>Application source files</source>
          <target state="translated">アプリケーションのソースファイル</target>
        </trans-unit>
        <trans-unit id="c57c792b55f79d5a6454ef57144a28767e266988" translate="yes" xml:space="preserve">
          <source>Application structure and NgModules</source>
          <target state="translated">アプリケーションの構造とNgModules</target>
        </trans-unit>
        <trans-unit id="0d128f2c09ef2323b0706b60301684346dd9280f" translate="yes" xml:space="preserve">
          <source>Application-specific &lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt; configuration.</source>
          <target state="translated">アプリケーション固有の&lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="852183ace80b773b249836fdf431f837dea2630d" translate="yes" xml:space="preserve">
          <source>Application-specific &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; configuration.</source>
          <target state="translated">アプリケーション固有の&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="91f8372b527502933df6ad01e48251bd30a40415" translate="yes" xml:space="preserve">
          <source>Application-specific &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration, including TypeScript and Angular template compiler options. See &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt; and &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular Compiler Options&lt;/a&gt;.</source>
          <target state="translated">TypeScriptおよびAngularテンプレートコンパイラオプションを含む、アプリケーション固有の&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;構成。&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript構成&lt;/a&gt;と&lt;a href=&quot;angular-compiler-options&quot;&gt;Angularコンパイラオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4066e5ad49d67457e01b647961a4e8b547f7af40" translate="yes" xml:space="preserve">
          <source>Application-specific &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration, including TypeScript and Angular template compiler options. See &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt;.</source>
          <target state="translated">TypeScriptおよびAngularテンプレートコンパイラオプションを含む、アプリケーション固有の&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;構成。&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="99dc2d0240c5a1385595b3dd59d6c536156041c4" translate="yes" xml:space="preserve">
          <source>ApplicationInitStatus</source>
          <target state="translated">ApplicationInitStatus</target>
        </trans-unit>
        <trans-unit id="b39dbb54c7c825fcef1a44e2124b1bb2b58086c8" translate="yes" xml:space="preserve">
          <source>ApplicationModule</source>
          <target state="translated">ApplicationModule</target>
        </trans-unit>
        <trans-unit id="399fe43d84dcab4d8f86ce2f9647859550a7904b" translate="yes" xml:space="preserve">
          <source>ApplicationRef</source>
          <target state="translated">ApplicationRef</target>
        </trans-unit>
        <trans-unit id="2ab362ac17e1086087cf71af4e5f979258df1d92" translate="yes" xml:space="preserve">
          <source>Applications often request JSON data from a server. In the &lt;code&gt;ConfigService&lt;/code&gt; example, the app needs a configuration file on the server, &lt;code&gt;config.json&lt;/code&gt;, that specifies resource URLs.</source>
          <target state="translated">多くの場合、アプリケーションはサーバーにJSONデータを要求します。で &lt;code&gt;ConfigService&lt;/code&gt; の例では、アプリケーションはサーバー上の設定ファイルを必要とし、 &lt;code&gt;config.json&lt;/code&gt; 、指定のリソースのURLこと。</target>
        </trans-unit>
        <trans-unit id="a196327a18feb01ef9db58391bd17fb22de7eda2" translate="yes" xml:space="preserve">
          <source>Applications often request JSON data from the server. For example, the app might need a configuration file on the server, &lt;code&gt;config.json&lt;/code&gt;, that specifies resource URLs.</source>
          <target state="translated">アプリケーションはサーバーからJSONデータを要求することがよくあります。たとえば、アプリはサーバー上にリソースURLを指定する構成ファイル &lt;code&gt;config.json&lt;/code&gt; を必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="f0629fc80e38645caefd8ff8a582d44f1f864f7a" translate="yes" xml:space="preserve">
          <source>Applications often restrict access to a feature area based on who the user is. You could permit access only to authenticated users or to users with a specific role. You might block or limit access until the user's account is activated.</source>
          <target state="translated">アプリケーションは、ユーザーが誰であるかに基づいて機能領域へのアクセスを制限することがよくあります。認証済みのユーザーのみにアクセスを許可したり、特定の役割を持つユーザーにアクセスを許可したりすることができます。ユーザーのアカウントが有効になるまでアクセスをブロックしたり制限したりすることができます。</target>
        </trans-unit>
        <trans-unit id="38ff861aa4a446344adef0afc1e488d02130c3f4" translate="yes" xml:space="preserve">
          <source>Applications should use the &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; services to interact with application route state.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスを使用して、アプリケーションルート状態と対話する必要があります。</target>
        </trans-unit>
        <trans-unit id="db68ba2d12235e40251d82b803326c61a95f231a" translate="yes" xml:space="preserve">
          <source>Applies an array of commands to the current URL tree and creates a new URL tree.</source>
          <target state="translated">現在の URL ツリーにコマンドの配列を適用し、新しい URL ツリーを作成します。</target>
        </trans-unit>
        <trans-unit id="73e49fcb5b988ce38774338e29d9e9c9583cfff5" translate="yes" xml:space="preserve">
          <source>Applies the changes when needed.</source>
          <target state="translated">必要に応じて変更を適用します。</target>
        </trans-unit>
        <trans-unit id="fc45517f9cdde05557806db0dfe4a757bd3c77fc" translate="yes" xml:space="preserve">
          <source>Apply specific build options for just one locale</source>
          <target state="translated">特定のビルドオプションを一つのロケールに適用する</target>
        </trans-unit>
        <trans-unit id="8c8b40621714f724e48fb235040b7320d47f4c4a" translate="yes" xml:space="preserve">
          <source>Apply that logic to navigation within the crisis center for which the parent path is &lt;code&gt;/crisis-center&lt;/code&gt;.</source>
          <target state="translated">そのロジックを、親パスが &lt;code&gt;/crisis-center&lt;/code&gt; である危機センター内のナビゲーションに適用します。</target>
        </trans-unit>
        <trans-unit id="0d0e2a91303b222bcb13c0011660cfd943c66dc1" translate="yes" xml:space="preserve">
          <source>Apply the &lt;a href=&quot;https://wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;i&gt;single responsibility principle&lt;/i&gt; (SRP)&lt;/a&gt; to all components, services, and other symbols. This helps make the app cleaner, easier to read and maintain, and more testable.</source>
          <target state="translated">すべてのコンポーネント、サービス、およびその他のシンボルに&lt;a href=&quot;https://wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;i&gt;単一責任原則&lt;/i&gt;（SRP）&lt;/a&gt;を適用します。これにより、アプリがよりクリーンで読みやすく、保守が容易になり、テストが容易になります。</target>
        </trans-unit>
        <trans-unit id="70fadc1252a55edfa904aa436966e9eecc7d3821" translate="yes" xml:space="preserve">
          <source>Apply the attribute directive</source>
          <target state="translated">属性ディレクティブを適用する</target>
        </trans-unit>
        <trans-unit id="81d85d7da74461d1b53ba77a7b92cf43a5bb3128" translate="yes" xml:space="preserve">
          <source>Apply the decorator to the directive class.</source>
          <target state="translated">ディレクティブクラスにデコレータを適用します。</target>
        </trans-unit>
        <trans-unit id="45a85d2d0edb8623c0d82d2eb0a9a6cc99f9a2bb" translate="yes" xml:space="preserve">
          <source>Applying routable animations based on the page.</source>
          <target state="translated">ページに基づいてルーティング可能なアニメーションを適用します。</target>
        </trans-unit>
        <trans-unit id="c804b003ae54f7640d1e2bbcc163cd9e623fb3dc" translate="yes" xml:space="preserve">
          <source>Applying the &lt;code&gt;::ng-deep&lt;/code&gt; pseudo-class to any CSS rule completely disables view-encapsulation for that rule. Any style with &lt;code&gt;::ng-deep&lt;/code&gt; applied becomes a global style. In order to scope the specified style to the current component and all its descendants, be sure to include the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; selector before &lt;code&gt;::ng-deep&lt;/code&gt;. If the &lt;code&gt;::ng-deep&lt;/code&gt; combinator is used without the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; pseudo-class selector, the style can bleed into other components.</source>
          <target state="translated">&lt;code&gt;::ng-deep&lt;/code&gt; 疑似クラスをCSSルールに適用すると、そのルールのビューのカプセル化が完全に無効になります。 &lt;code&gt;::ng-deep&lt;/code&gt; が適用されたスタイルはすべてグローバルスタイルになります。指定されたスタイルを現在のコンポーネントとそのすべての子孫にスコープするために、 &lt;code&gt;::ng-deep&lt;/code&gt; の前に &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; セレクターを必ず含めてください。場合 &lt;code&gt;::ng-deep&lt;/code&gt; コンビネータをせずに使用されている &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/directive#host&quot;&gt;ホスト&lt;/a&gt;疑似クラスセレクタ、スタイルは、他のコンポーネントの中に出血することができます。</target>
        </trans-unit>
        <trans-unit id="1ea007e76a7fe27744692b393421324935c1977d" translate="yes" xml:space="preserve">
          <source>Applying the &lt;code&gt;::ng-deep&lt;/code&gt; pseudo-class to any CSS rule completely disables view-encapsulation for that rule. Any style with &lt;code&gt;::ng-deep&lt;/code&gt; applied becomes a global style. In order to scope the specified style to the current component and all its descendants, be sure to include the &lt;code&gt;:host&lt;/code&gt; selector before &lt;code&gt;::ng-deep&lt;/code&gt;. If the &lt;code&gt;::ng-deep&lt;/code&gt; combinator is used without the &lt;code&gt;:host&lt;/code&gt; pseudo-class selector, the style can bleed into other components.</source>
          <target state="translated">&lt;code&gt;::ng-deep&lt;/code&gt; 疑似クラスをCSSルールに適用すると、そのルールのビューカプセル化が完全に無効になります。で任意のスタイル &lt;code&gt;::ng-deep&lt;/code&gt; 適用は、グローバルなスタイルになります。指定されたスタイルを現在のコンポーネントとそのすべての子孫にスコープするには、 &lt;code&gt;::ng-deep&lt;/code&gt; の前に &lt;code&gt;:host&lt;/code&gt; セレクターを必ず含めてください。場合 &lt;code&gt;::ng-deep&lt;/code&gt; コンビネータをせずに使用されている &lt;code&gt;:host&lt;/code&gt; 疑似クラスセレクタ、スタイルは、他のコンポーネントの中に出血することができます。</target>
        </trans-unit>
        <trans-unit id="971660e3eff74f1e73a9bc8202a365f6b3daf22d" translate="yes" xml:space="preserve">
          <source>Apps can use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to make &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests across domains when a server doesn't support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS protocol&lt;/a&gt;.</source>
          <target state="translated">サーバーが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORSプロトコルを&lt;/a&gt;サポートしていない場合、アプリは &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用してドメイン間で&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;リクエストを行うことができます。</target>
        </trans-unit>
        <trans-unit id="5626fa7bcd970831b49f0ca8814b78f9ec4931b4" translate="yes" xml:space="preserve">
          <source>Apps can use the the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to make &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests across domains when the server doesn't support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS protocol&lt;/a&gt;.</source>
          <target state="translated">サーバーが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORSプロトコルを&lt;/a&gt;サポートしていない場合、アプリは &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用してドメイン全体で&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;リクエストを行うことができます。</target>
        </trans-unit>
        <trans-unit id="9e1bbeca79619dc168ee72be62c4c17e14e649d8" translate="yes" xml:space="preserve">
          <source>Apps do not typically need to create their own animation players, but if you do need to, follow these steps:</source>
          <target state="translated">アプリは通常、独自のアニメーションプレイヤーを作成する必要はありませんが、必要な場合は以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="8a2f874c6db468662ffb58a8875448a198ac499b" translate="yes" xml:space="preserve">
          <source>Apps often POST data to a server. They POST when submitting a form. In the following example, the &lt;code&gt;HeroesService&lt;/code&gt; posts when adding a hero to the database.</source>
          <target state="translated">多くの場合、アプリはデータをサーバーにPOSTします。フォームの送信時にPOSTします。次の例では、ヒーローをデータベースに追加するときに、 &lt;code&gt;HeroesService&lt;/code&gt; が投稿します。</target>
        </trans-unit>
        <trans-unit id="30b7a831fd8ffb7da2ad0a9cf451a0c40ac3345a" translate="yes" xml:space="preserve">
          <source>Apps often define configuration objects with lots of small facts, like the title of the application or the address of a web API endpoint. These configuration objects aren't always instances of a class. They can be object literals, as shown in the following example.</source>
          <target state="translated">アプリケーションは、アプリケーションのタイトルや Web API エンドポイントのアドレスなど、小さな事実をたくさん含んだ設定オブジェクトを定義することがよくあります。これらの設定オブジェクトは必ずしもクラスのインスタンスではありません。次の例のように、オブジェクトリテラルにすることもできます。</target>
        </trans-unit>
        <trans-unit id="31f6ac215467451080a5eed53c7386613db6c2d4" translate="yes" xml:space="preserve">
          <source>Apps often send data to a server with a POST request when submitting a form. In the following example, the &lt;code&gt;HeroesService&lt;/code&gt; makes an HTTP POST request when adding a hero to the database.</source>
          <target state="translated">多くの場合、アプリはフォームを送信するときにPOSTリクエストを使用してサーバーにデータを送信します。次の例では、 &lt;code&gt;HeroesService&lt;/code&gt; は、データベースにヒーローを追加するときにHTTPPOSTリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="382db7830add4fb204b6af3f246c22df74c9e4e7" translate="yes" xml:space="preserve">
          <source>Apps often use an interceptor to set default headers on outgoing requests.</source>
          <target state="translated">アプリはしばしばインターセプターを使用して、送信リクエストのデフォルトヘッダを設定します。</target>
        </trans-unit>
        <trans-unit id="6ac8c049d51dfba584e44ce33593cd0fd0498c0b" translate="yes" xml:space="preserve">
          <source>Apps pass a &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array to &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in order to configure the app-wide &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service with routes. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; returns a &lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProviders&lt;/a&gt;. You add that result to the &lt;code&gt;imports&lt;/code&gt; list of the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">アプリは、 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; を使用してアプリ全体の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを構成するために、Routes配列を &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; に渡します。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProvidersを&lt;/a&gt;返します。その結果をルート &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; リストに追加します。</target>
        </trans-unit>
        <trans-unit id="e361112818e4768cac11b5e923f0fa29d5292891" translate="yes" xml:space="preserve">
          <source>Apps pass a &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object to &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in order to configure the app-wide &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service with routes. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; returns a &lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProviders&lt;/a&gt;. You add that result to the &lt;code&gt;imports&lt;/code&gt; list of the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">アプリは &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; オブジェクトを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; に渡し、アプリ全体の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスでルートを構成します。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProvidersを&lt;/a&gt;返します。その結果をルート &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; リストに追加します。</target>
        </trans-unit>
        <trans-unit id="cc390285ebab82a2a8d69e9aa75a08e70733597e" translate="yes" xml:space="preserve">
          <source>Apr 18, 2019</source>
          <target state="translated">2019年4月18日</target>
        </trans-unit>
        <trans-unit id="89df6f0f2f5be74f2452247a90bf7057dde93046" translate="yes" xml:space="preserve">
          <source>Apr 18, 2020</source>
          <target state="translated">2020年4月18日</target>
        </trans-unit>
        <trans-unit id="1571960f64dc1bbd85c8afae57c18c2fe87dc77c" translate="yes" xml:space="preserve">
          <source>April 15, 1988</source>
          <target state="translated">1988年4月15日</target>
        </trans-unit>
        <trans-unit id="16639cf778dca6a11a26844b092710e566557dbc" translate="yes" xml:space="preserve">
          <source>Architect</source>
          <target state="translated">Architect</target>
        </trans-unit>
        <trans-unit id="2e99cf09904565828c48434629a7dae4ca7ab60a" translate="yes" xml:space="preserve">
          <source>Architect expects builders to run once (by default) and return. This behavior is not entirely compatible with a builder that watches for changes (like Webpack, for example). Architect can support watch mode, but there are some things to look out for.</source>
          <target state="translated">Architectは、ビルダーが一度(デフォルトでは)実行されて戻ることを期待しています。この動作は、変更を監視するビルダーと完全に互換性があるわけではありません (たとえば Webpack のような)。Architectはウォッチモードをサポートすることができますが、いくつか注意すべき点があります。</target>
        </trans-unit>
        <trans-unit id="cb12b45f1feccd3ae9df35525912508afafb94e0" translate="yes" xml:space="preserve">
          <source>Architect is the tool that the CLI uses to perform complex tasks such as compilation, according to provided configurations. The CLI commands run Architect targets such as &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;lint&lt;/code&gt;. Each named target has a default configuration, specified by an &quot;options&quot; object, and an optional set of named alternate configurations in the &quot;configurations&quot; object.</source>
          <target state="translated">Architectは、CLIが提供された構成に従ってコンパイルなどの複雑なタスクを実行するために使用するツールです。 CLIコマンドは、 &lt;code&gt;build&lt;/code&gt; 、 &lt;code&gt;serve&lt;/code&gt; 、 &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;lint&lt;/code&gt; などのArchitectターゲットを実行します。それぞれの名前付きターゲットには、「オプション」オブジェクトで指定されたデフォルトの構成と、「構成」オブジェクト内の名前付き代替構成のオプションのセットがあります。</target>
        </trans-unit>
        <trans-unit id="87e9ee57ab4d3251e3425b9e1edd8474dc28d887" translate="yes" xml:space="preserve">
          <source>Architect is the tool that the CLI uses to perform complex tasks, such as compilation and test running. Architect is a shell that runs a specified &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; to perform a given task, according to a &lt;a href=&quot;glossary#target&quot;&gt;target&lt;/a&gt; configuration. You can define and configure new builders and targets to extend the CLI. See &lt;a href=&quot;cli-builder&quot;&gt;Angular CLI Builders&lt;/a&gt;.</source>
          <target state="translated">Architectは、コンパイルやテスト実行などの複雑なタスクを実行するためにCLIが使用するツールです。Architectは、&lt;a href=&quot;glossary#target&quot;&gt;ターゲット&lt;/a&gt;構成に従って、指定された&lt;a href=&quot;glossary#builder&quot;&gt;ビルダー&lt;/a&gt;を実行して特定のタスクを実行するシェルです。新しいビルダーとターゲットを定義および構成して、CLIを拡張できます。&lt;a href=&quot;cli-builder&quot;&gt;Angular CLI Buildersを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="68a0175db55fe6829a7c4fdd2c0b28db697a3b08" translate="yes" xml:space="preserve">
          <source>Architect resolves input options for a given target by taking the default options object, then overwriting values from the configuration used (if any), then further overwriting values from the overrides object passed to &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt;. For the Angular CLI, the overrides object is built from command line arguments.</source>
          <target state="translated">Architectは、デフォルトのオプションオブジェクトを取得し、使用されている構成（存在する場合）の値を上書きして、指定されたターゲットの入力オプションを解決し、さらに &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; に渡されたオーバーライドオブジェクトの値を上書きします。Angular CLIの場合、オーバーライドオブジェクトはコマンドライン引数から構築されます。</target>
        </trans-unit>
        <trans-unit id="650e1a2c31f381d1ef315d6ecb1f9821f346be20" translate="yes" xml:space="preserve">
          <source>Architect runs builders asynchronously. To invoke a builder, you schedule a task to be run when all configuration resolution is complete.</source>
          <target state="translated">Architectはビルダーを非同期に実行します。ビルダーを呼び出すには、すべての設定の解決が完了したときに実行されるタスクをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="b8187a8b2aa9dac023d1b4014ab0ac3ced813c4c" translate="yes" xml:space="preserve">
          <source>Architect validates the resulting options values against the schema of the builder. If inputs are valid, Architect creates the context and executes the builder.</source>
          <target state="translated">アーキテクトは、結果として得られたオプションの値をビルダのスキーマに対して検証します。入力が有効であれば、アーキテクトはコンテキストを作成してビルダーを実行します。</target>
        </trans-unit>
        <trans-unit id="a8051a2dd19694f0d3cd62e35d681d609ea33a34" translate="yes" xml:space="preserve">
          <source>Architectural reasons may lead you to restrict access to a service to the application domain where it belongs. For example, the guide sample includes a &lt;code&gt;VillainsListComponent&lt;/code&gt; that displays a list of villains. It gets those villains from a &lt;code&gt;VillainsService&lt;/code&gt;.</source>
          <target state="translated">アーキテクチャ上の理由により、サービスへのアクセスを、それが属するアプリケーションドメインに制限することがあります。たとえば、ガイドのサンプルには、 &lt;code&gt;VillainsListComponent&lt;/code&gt; のリストを表示するVillainsListComponentが含まれています。それは、 &lt;code&gt;VillainsService&lt;/code&gt; からそれらの悪役を取得します。</target>
        </trans-unit>
        <trans-unit id="77cbe978decf7e18ac53e8ff64911f09e83509bc" translate="yes" xml:space="preserve">
          <source>Architecture Overview</source>
          <target state="translated">アーキテクチャの概要</target>
        </trans-unit>
        <trans-unit id="f01976881a77559b65df5022645150a74a52ede0" translate="yes" xml:space="preserve">
          <source>Architecture overview</source>
          <target state="translated">アーキテクチャの概要</target>
        </trans-unit>
        <trans-unit id="2745debaa64a20eedb49d9f14a0b807c87aa2d2a" translate="yes" xml:space="preserve">
          <source>Area</source>
          <target state="translated">Area</target>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes" xml:space="preserve">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="6001476930bb93c3e465d55fc3340756fadc4aa9" translate="yes" xml:space="preserve">
          <source>Argument and option names can be given in either &lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase or dash-case&lt;/a&gt;. &lt;code&gt;--myOptionName&lt;/code&gt; is equivalent to &lt;code&gt;--my-option-name&lt;/code&gt;.</source>
          <target state="translated">引数とオプションの名前は、&lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCaseまたはdash-case&lt;/a&gt;で指定できます。 &lt;code&gt;--myOptionName&lt;/code&gt; は &lt;code&gt;--my-option-name&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="c2f3a054448adb7997b5c36e72f9be845a0b4d34" translate="yes" xml:space="preserve">
          <source>Arguments (dependencies) to the &lt;code&gt;factory&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;factory&lt;/code&gt; 関数への引数（依存関係）。</target>
        </trans-unit>
        <trans-unit id="6b9d43f8a1c9ac290af8a299e9d3af0066551611" translate="yes" xml:space="preserve">
          <source>Arrange to use product data from an external file.</source>
          <target state="translated">外部ファイルの製品データを使用するようにアレンジします。</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="a2c4769fd815d0f8646a06e09c4545f8498d2d6d" translate="yes" xml:space="preserve">
          <source>Array index</source>
          <target state="translated">配列インデックス</target>
        </trans-unit>
        <trans-unit id="6f34d9dcb007316860a77e1a43c21a988e0aec6d" translate="yes" xml:space="preserve">
          <source>Array of latest values for the controls</source>
          <target state="translated">コントロールの最新値の配列</target>
        </trans-unit>
        <trans-unit id="73e2cda4b11ea7d0351e69232f425f934d2b347b" translate="yes" xml:space="preserve">
          <source>Array of values for the controls</source>
          <target state="translated">コントロールの値の配列</target>
        </trans-unit>
        <trans-unit id="b4549d1caf74aaf959dfe06fbea3422a27392589" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;toh-pt2&quot;&gt;before&lt;/a&gt;, whenever a user clicks on a hero name, the hero detail appears below the hero list. Now the &lt;code&gt;HeroDetailComponent&lt;/code&gt; is presenting those details instead of the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt2&quot;&gt;以前&lt;/a&gt;と同様に、ユーザーがヒーロー名をクリックすると、ヒーローの詳細がヒーローリストの下に表示されます。これで、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; は、HeroesComponentの代わりにそれらの詳細を表示してい &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="135905d4765136f425c8108ca9e5fc0ab1204814" translate="yes" xml:space="preserve">
          <source>As Angular traverses the &lt;a href=&quot;glossary#view-hierarchy&quot;&gt;view hierarchy&lt;/a&gt; during change detection, it needs to be sure that a change in a child does not attempt to cause a change in its own parent. Such a change would not be rendered properly, because of how &lt;a href=&quot;glossary#unidirectional-data-flow&quot;&gt;unidirectional data flow&lt;/a&gt; works.</source>
          <target state="translated">Angularは変更の検出中に&lt;a href=&quot;glossary#view-hierarchy&quot;&gt;ビュー階層を&lt;/a&gt;トラバースするため、子の変更がそれ自体の親の変更を引き起こさないようにする必要があります。&lt;a href=&quot;glossary#unidirectional-data-flow&quot;&gt;単方向のデータフロー&lt;/a&gt;がどのように機能するかにより、このような変更は適切にレンダリングされません。</target>
        </trans-unit>
        <trans-unit id="3c842fa8a1c751fb5dc02dea9b6a6f064a4ffc78" translate="yes" xml:space="preserve">
          <source>As a best practice, use only properties and methods that return values.</source>
          <target state="translated">ベストプラクティスとして、値を返すプロパティとメソッドのみを使用します。</target>
        </trans-unit>
        <trans-unit id="ec3d80f7d4b233899494dbf2775945a44d2a0b43" translate="yes" xml:space="preserve">
          <source>As a general rule, a fix is considered for an LTS version if it resolves one of:</source>
          <target state="translated">一般的なルールとして、以下のいずれかの問題が解決されていれば、その修正は LTS 版のものとみなされます。</target>
        </trans-unit>
        <trans-unit id="8320fed1ae9fa1073ff9c98aaa4a06e5e4044fa3" translate="yes" xml:space="preserve">
          <source>As a general rule, import modules with providers &lt;em&gt;exactly once&lt;/em&gt;, preferably in the application's &lt;em&gt;root module&lt;/em&gt;. That's also usually the best place to configure, wrap, and override them.</source>
          <target state="translated">原則として、プロバイダーを使用してモジュールを&lt;em&gt;1回だけ&lt;/em&gt;インポートします。できればアプリケーションの&lt;em&gt;ルートモジュール&lt;/em&gt;にインポートします。また、通常は、これらを構成、ラップ、およびオーバーライドするのに最適な場所です。</target>
        </trans-unit>
        <trans-unit id="deffe223d373efbae49c2b4d79dc103d2e7fb62c" translate="yes" xml:space="preserve">
          <source>As a host page for the &quot;Crisis Center&quot; feature, generate a &lt;code&gt;CrisisCenterHome&lt;/code&gt; component in the &lt;code&gt;crisis-center&lt;/code&gt; folder.</source>
          <target state="translated">「クライシスセンター」機能のホストページとして、生成 &lt;code&gt;CrisisCenterHome&lt;/code&gt; のコンポーネント &lt;code&gt;crisis-center&lt;/code&gt; フォルダを。</target>
        </trans-unit>
        <trans-unit id="6741a935b466ce3ba8568d14e44c986be6ba23e2" translate="yes" xml:space="preserve">
          <source>As a library author, you can take several measures to provide an optimal experience for your users. First, enabling &lt;code&gt;strictNullChecks&lt;/code&gt; and including &lt;code&gt;null&lt;/code&gt; in an input's type, as appropriate, communicates to your consumers whether they can provide a nullable value or not. Additionally, it is possible to provide type hints that are specific to the template type checker. See &lt;a href=&quot;structural-directives#directive-type-checks&quot;&gt;Improving template type checking for custom directives&lt;/a&gt;, and &lt;a href=&quot;template-typecheck#input-setter-coercion&quot;&gt;Input setter coercion&lt;/a&gt; below.</source>
          <target state="translated">ライブラリの作成者は、ユーザーに最適なエクスペリエンスを提供するためにいくつかの対策を講じることができます。まず、 &lt;code&gt;strictNullChecks&lt;/code&gt; を有効にし、必要に応じて入力の型に &lt;code&gt;null&lt;/code&gt; を含めると、消費者がnull許容値を提供できるかどうかを消費者に伝えます。さらに、テンプレートタイプチェッカーに固有のタイプヒントを提供することもできます。参照&lt;a href=&quot;structural-directives#directive-type-checks&quot;&gt;カスタムディレクティブをチェックするテンプレートの種類の向上&lt;/a&gt;、および&lt;a href=&quot;template-typecheck#input-setter-coercion&quot;&gt;入力セッター強制&lt;/a&gt;下記を。</target>
        </trans-unit>
        <trans-unit id="0367e00c5bf2f26492dcf63c921938c118e9f471" translate="yes" xml:space="preserve">
          <source>As a library developer, you can create your own collections of custom schematics to integrate your library with the Angular CLI.</source>
          <target state="translated">ライブラリ開発者として、独自のカスタムスケマティックのコレクションを作成して、ライブラリをAngular CLIに統合することができます。</target>
        </trans-unit>
        <trans-unit id="dae413a6ba6d2275c4b29345c399c39ff53553d6" translate="yes" xml:space="preserve">
          <source>As a plain number, in milliseconds: &lt;code&gt;100&lt;/code&gt;</source>
          <target state="translated">単純な数値として、ミリ秒単位： &lt;code&gt;100&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d6c917d0ac550880e60ac6263e147c30d2fadd4" translate="yes" xml:space="preserve">
          <source>As a publisher, you create an &lt;code&gt;Observable&lt;/code&gt; instance that defines a &lt;em&gt;subscriber&lt;/em&gt; function. This is the function that is executed when a consumer calls the &lt;code&gt;subscribe()&lt;/code&gt; method. The subscriber function defines how to obtain or generate values or messages to be published.</source>
          <target state="translated">パブリッシャーとして、&lt;em&gt;サブスクライバー&lt;/em&gt;関数を定義する &lt;code&gt;Observable&lt;/code&gt; インスタンスを作成します。これは、コンシューマが &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出したときに実行される関数です。サブスクライバー関数は、公開する値またはメッセージを取得または生成する方法を定義します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c55a0bd388216011207cfeb979c311669ad519c8" translate="yes" xml:space="preserve">
          <source>As a result, Angular isn't able to access the value and returns an error.</source>
          <target state="translated">その結果、Angularは値にアクセスできず、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="2fe3037ee9472bbe2a08e74181eb628e70a574ad" translate="yes" xml:space="preserve">
          <source>As a result, any text marked with &lt;code&gt;site header&lt;/code&gt; as the &lt;em&gt;meaning&lt;/em&gt; is translated exactly the same way.</source>
          <target state="translated">その結果、&lt;em&gt;意味&lt;/em&gt;として &lt;code&gt;site header&lt;/code&gt; マークされたテキストは、まったく同じ方法で翻訳されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f99b1d12288f5a74a23db49ac392deada3c9214a" translate="yes" xml:space="preserve">
          <source>As a result, templates that previously compiled under View Engine can fail type checking under Ivy. This can happen because Ivy's stricter checking catches genuine errors, or because application code is not typed correctly, or because the application uses libraries in which typings are inaccurate or not specific enough.</source>
          <target state="translated">その結果、以前は View Engine でコンパイルされていたテンプレートが、Ivy での型チェックに失敗することがあります。これは、Ivy のより厳しいチェックで真正なエラーが検出されたり、アプリケーション コードが正しく型付けされていなかったり、アプリケーションで型付けが不正確なライブラリを使用していたり、十分に特定されていなかったりするために起こる可能性があります。</target>
        </trans-unit>
        <trans-unit id="90863afd93efc1b713bee9807c95ef1c370a7606" translate="yes" xml:space="preserve">
          <source>As a service &lt;em&gt;tester&lt;/em&gt;, you must at least think about the first level of service dependencies but you &lt;em&gt;can&lt;/em&gt; let Angular DI do the service creation and deal with constructor argument order when you use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; testing utility to provide and create services.</source>
          <target state="translated">サービスとして&lt;em&gt;テスター&lt;/em&gt;、あなたは少なくとも、サービスの依存関係の最初のレベルを考える必要がありますが、あなたは&lt;em&gt;でき&lt;/em&gt;ますが、使用時に角度DIは、コンストラクタの引数の順序でサービスの作成と契約をやらせる &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; サービスを提供し、作成するために、テストユーティリティを。</target>
        </trans-unit>
        <trans-unit id="616385f40de73bc1604f409e096ab6453c995cb2" translate="yes" xml:space="preserve">
          <source>As a side-effect, &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; logs the &lt;code&gt;path&lt;/code&gt; of a selected route in its public &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">副作用として、 &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; はログオン &lt;code&gt;path&lt;/code&gt; の公開に選択されたルートの &lt;code&gt;preloadedModules&lt;/code&gt; のアレイ。</target>
        </trans-unit>
        <trans-unit id="4b7ecaa28f2dff4ab449f30fd1ccc45445c8a41d" translate="yes" xml:space="preserve">
          <source>As a two-way binding: &lt;code&gt;&amp;lt;my-component [(myValue)]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt;. Since most AngularJS two-way bindings actually only need a one-way binding in practice, &lt;code&gt;&amp;lt;my-component [myValue]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; is often enough.</source>
          <target state="translated">双方向バインディングとして： &lt;code&gt;&amp;lt;my-component [(myValue)]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; 。ほとんどのAngularJS双方向バインディングは実際には一方向バインディングしか必要としないため、 &lt;code&gt;&amp;lt;my-component [myValue]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; で十分な場合がよくあります。</target>
        </trans-unit>
        <trans-unit id="6a5046b79e09cacb258f1a59b23f0229cab23310" translate="yes" xml:space="preserve">
          <source>As a workaround for this problem, Angular supports checking a wider, more permissive type for &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; than is declared for the input field itself. Enable this by adding a static property with the &lt;code&gt;ngAcceptInputType_&lt;/code&gt; prefix to the component class:</source>
          <target state="translated">この問題の回避策として、Angularは、入力フィールド自体に対して宣言されているよりも、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; に対してより広く、より寛容な型のチェックをサポートしています。 &lt;code&gt;ngAcceptInputType_&lt;/code&gt; プレフィックス付きの静的プロパティをコンポーネントクラスに追加して、これを有効にします。</target>
        </trans-unit>
        <trans-unit id="70711c31150ebda36f5058c7ef67fc2dc552d337" translate="yes" xml:space="preserve">
          <source>As above, the target is the button's click event.</source>
          <target state="translated">上記のように、ターゲットはボタンのクリックイベントです。</target>
        </trans-unit>
        <trans-unit id="a2fa8220cfc617a4e487c2e9bd8726e63796dd6d" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s create a builder that executes a shell command. To create a builder, use the &lt;code&gt;createBuilder()&lt;/code&gt; CLI Builder function, and return a &lt;code&gt;BuilderOutput&lt;/code&gt; object.</source>
          <target state="translated">例として、シェルコマンドを実行するビルダーを作成してみましょう。ビルダーを作成するには、 &lt;code&gt;createBuilder()&lt;/code&gt; CLIビルダー関数を使用して、 &lt;code&gt;BuilderOutput&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6d7ae9f459bc0881d55f11ec081e180bb57aec8d" translate="yes" xml:space="preserve">
          <source>As an example, let's create a builder that executes a shell command. To create a builder, use the &lt;code&gt;createBuilder()&lt;/code&gt; CLI Builder function, and return a &lt;code&gt;Promise&amp;lt;BuilderOutput&amp;gt;&lt;/code&gt; object.</source>
          <target state="translated">例として、シェルコマンドを実行するビルダーを作成しましょう。ビルダーを作成するには、 &lt;code&gt;createBuilder()&lt;/code&gt; CLI Builder関数を使用して、 &lt;code&gt;Promise&amp;lt;BuilderOutput&amp;gt;&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a1693faa6c4defc1d4a4ffd82c7efdcbe67d91f3" translate="yes" xml:space="preserve">
          <source>As applications grow in functionality, they also grow in size. The CLI allows you to set size thresholds in your configuration to ensure that parts of your application stay within size boundaries that you define.</source>
          <target state="translated">アプリケーションが機能的に成長すると、サイズも大きくなります。CLIでは、アプリケーションの一部が定義したサイズの境界内に収まるように、構成でサイズのしきい値を設定することができます。</target>
        </trans-unit>
        <trans-unit id="426d689742e365afbaea750636ace81f4c7d3a54" translate="yes" xml:space="preserve">
          <source>As described above, in reactive forms each form element in the view is directly linked to a form model (&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance). Updates from the view to the model and from the model to the view are synchronous and aren't dependent on the UI rendered. The diagrams below use the same favorite color example to demonstrate how data flows when an input field's value is changed from the view and then from the model.</source>
          <target state="translated">上記のように、リアクティブフォームでは、ビューの各フォーム要素はフォームモデル（ &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンス）に直接リンクされます。ビューからモデルへの更新、およびモデルからビューへの更新は同期的であり、レンダリングされたUIに依存しません。以下の図では、同じお気に入りの色の例を使用して、ビューからモデルに入力フィールドの値が変更されたときのデータの流れを示しています。</target>
        </trans-unit>
        <trans-unit id="880f9c880127736c203edc896434eeab319390fd" translate="yes" xml:space="preserve">
          <source>As discussed earlier, component CSS styles are encapsulated into the component's view and don't affect the rest of the application.</source>
          <target state="translated">前述したように、コンポーネントの CSS スタイルはコンポーネントのビューにカプセル化され、他のアプリケーションには影響を与えません。</target>
        </trans-unit>
        <trans-unit id="5b0f7dd7e0658c043afd1da5639cb6335884c9a5" translate="yes" xml:space="preserve">
          <source>As explained in &lt;a href=&quot;testing#compile-components&quot;&gt;&lt;em&gt;Calling compileComponents()&lt;/em&gt;&lt;/a&gt; above, these tests could be run in a non-CLI environment where Angular would have to compile them in the browser.</source>
          <target state="translated">上記の&lt;a href=&quot;testing#compile-components&quot;&gt;&lt;em&gt;compileComponents（）の呼び出しで&lt;/em&gt;&lt;/a&gt;説明したように、これらのテストは、Angularがブラウザーでコンパイルする必要がある非CLI環境で実行できます。</target>
        </trans-unit>
        <trans-unit id="20a3fc12c0b57f9f4fde41ae63301b30c12c4ab4" translate="yes" xml:space="preserve">
          <source>As explained in &lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;&lt;em&gt;Calling compileComponents()&lt;/em&gt;&lt;/a&gt; above, these tests could be run in a non-CLI environment where Angular would have to compile them in the browser.</source>
          <target state="translated">上記の&lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;&lt;em&gt;compileComponents（）の呼び出しで&lt;/em&gt;&lt;/a&gt;説明したように、これらのテストは、Angularがブラウザーでコンパイルする必要がある非CLI環境で実行できます。</target>
        </trans-unit>
        <trans-unit id="79d75fcadb38a027a00ab11f48886637114c88fe" translate="yes" xml:space="preserve">
          <source>As for any external dependency, you must mock the HTTP backend so your tests can simulate interaction with a remote server. The &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; library makes it straightforward to set up such mocking.</source>
          <target state="translated">外部依存関係については、テストがリモートサーバーとの相互作用をシミュレートできるように、HTTPバックエンドをモックする必要があります。 &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; ライブラリーは、それが、このようなモックを設定することは簡単になります。</target>
        </trans-unit>
        <trans-unit id="58c8b5c36d35cc82268e080bce5657fe17ae5ed0" translate="yes" xml:space="preserve">
          <source>As for any of the HTTP methods that return an observable, the caller, &lt;code&gt;HeroesComponent.update()&lt;/code&gt;&lt;a href=&quot;http#always-subscribe&quot;&gt;must &lt;code&gt;subscribe()&lt;/code&gt;&lt;/a&gt; to the observable returned from the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; in order to initiate the request.</source>
          <target state="translated">オブザーバブルを返すHTTPメソッドの場合、呼び出し元である &lt;code&gt;HeroesComponent.update()&lt;/code&gt; &lt;a href=&quot;http#always-subscribe&quot;&gt;は &lt;code&gt;subscribe()&lt;/code&gt; &lt;/a&gt;、リクエストを開始するために、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; から返されたオブザーバブルにsubscribe（）する必要があります。</target>
        </trans-unit>
        <trans-unit id="0535610d785a6f15d9d14a76e023b8b818afd751" translate="yes" xml:space="preserve">
          <source>As mentioned before, one of the key differences between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; has to do with change detection and how it is propagated between the two frameworks.</source>
          <target state="translated">前述のように、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; の主な違いの1つは、変更の検出と、2つのフレームワーク間でどのように伝達されるかです。</target>
        </trans-unit>
        <trans-unit id="53b618af56c304e8ae9ebf8b1422dcc8b530788c" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; needs to know how to instantiate the Angular module. It needs a recipe. You define that recipe by providing a factory function that can create an instance of the Angular module. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; accepts two types of factory functions:</source>
          <target state="translated">前述のように、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、Angularモジュールをインスタンス化する方法を知る必要があります。レシピが必要です。そのレシピを定義するには、Angularモジュールのインスタンスを作成できるファクトリ関数を提供します。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、2種類のファクトリ関数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="6075532c0eead9c5665dc3a24b06aa65dfa58aa5" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;dependency-injection-providers#interface-not-valid-token&quot;&gt;DI Providers&lt;/a&gt;, an interface is not a valid DI token because it is a TypeScript artifact that doesn't exist at run time. Use this abstract class interface to get the strong typing of an interface, and also use it as a provider token in the way you would a normal class.</source>
          <target state="translated">で述べたように&lt;a href=&quot;dependency-injection-providers#interface-not-valid-token&quot;&gt;DIプロバイダ&lt;/a&gt;、インターフェースは、それが実行時に存在していない活字体のアーティファクトであるため、トークンの有効DIではありません。この抽象クラスインターフェイスを使用して、インターフェイスの厳密な型指定を取得し、通常のクラスと同じ方法でプロバイダートークンとして使用します。</target>
        </trans-unit>
        <trans-unit id="33d0f422fdd64842f16a4d3168edce86723cf79d" translate="yes" xml:space="preserve">
          <source>As minimal as this is, you decide to add a test to confirm that component actually displays the right content where you think it should.</source>
          <target state="translated">これと同じくらい最低限のことですが、コンポーネントが実際に正しいコンテンツを表示しているかどうかを確認するためにテストを追加することにします。</target>
        </trans-unit>
        <trans-unit id="cd46491ceb36e17c510a8c461798cf44a0906cd6" translate="yes" xml:space="preserve">
          <source>As of Angular v8, the CLI primarily consumes the &lt;code&gt;fesm2015&lt;/code&gt; variant of the code distributed via &lt;code&gt;@angular/*&lt;/code&gt; npm packages. This renders the &lt;code&gt;esm5&lt;/code&gt; and &lt;code&gt;fesm5&lt;/code&gt; distributions obsolete and unnecessary, adding bloat to the package size and slowing down npm installations.</source>
          <target state="translated">Angular v8の時点で、CLIは主に &lt;code&gt;@angular/*&lt;/code&gt; npmパッケージを介して配布されるコードの &lt;code&gt;fesm2015&lt;/code&gt; バリアントを使用します。これにより、 &lt;code&gt;esm5&lt;/code&gt; および &lt;code&gt;fesm5&lt;/code&gt; ディストリビューションが廃止され、不要になり、パッケージサイズが肥大化し、npmのインストールが遅くなります。</target>
        </trans-unit>
        <trans-unit id="b355748c485647b9309423108913382295cddbcc" translate="yes" xml:space="preserve">
          <source>As of Angular version 8, all &lt;code&gt;platform-webworker&lt;/code&gt; APIs are deprecated. This includes both packages: &lt;code&gt;@angular/platform-webworker&lt;/code&gt; and &lt;code&gt;@angular/platform-webworker-dynamic&lt;/code&gt;.</source>
          <target state="translated">Angularバージョン8以降、すべての &lt;code&gt;platform-webworker&lt;/code&gt; APIは非推奨になりました。これには、 &lt;code&gt;@angular/platform-webworker&lt;/code&gt; と &lt;code&gt;@angular/platform-webworker-dynamic&lt;/code&gt; 両方のパッケージが含まれます。</target>
        </trans-unit>
        <trans-unit id="7a5efb4af0cce4e2df85ce6e18e4d43895419baa" translate="yes" xml:space="preserve">
          <source>As of Angular version 8, lazy loading code can be accomplished simply by using the dynamic import syntax &lt;code&gt;import('...')&lt;/code&gt;. In your application, you create a new service that uses dynamic imports to lazy load AngularJS.</source>
          <target state="translated">Angularバージョン8以降では、動的インポート構文 &lt;code&gt;import('...')&lt;/code&gt; を使用するだけで、遅延読み込みコードを実行できます。アプリケーションで、動的インポートを使用してAngularJSを遅延ロードする新しいサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="f2b967a3b46ad610174c160fc5ddca36a5857336" translate="yes" xml:space="preserve">
          <source>As of Angular version 9, you can provide a new instance of a service with each lazy loaded module. The following code adds this functionality to &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">Angularバージョン9以降、遅延ロードされたモジュールごとにサービスの新しいインスタンスを提供できます。次のコードは、この機能を &lt;code&gt;UserService&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="c5ee2759213bc4f0ebf30b6a7a48dab5168a4a75" translate="yes" xml:space="preserve">
          <source>As of Typescript 2.0, you can enforce &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;strict null checking&lt;/a&gt; with the &lt;code&gt;--strictNullChecks&lt;/code&gt; flag. TypeScript then ensures that no variable is unintentionally &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Typescript 2.0以降、 &lt;code&gt;--strictNullChecks&lt;/code&gt; フラグを使用して&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;厳密なnullチェック&lt;/a&gt;を実施できます。TypeScriptは、変数が意図せずに &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="1a5d8ac3e628f548a6202a37c401e9210549cc5a" translate="yes" xml:space="preserve">
          <source>As of Typescript 2.0, you can enforce &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;strict null checking&lt;/a&gt; with the &lt;code&gt;--strictNullChecks&lt;/code&gt; flag. TypeScript then ensures that no variable is unintentionally null or undefined.</source>
          <target state="translated">Typescript 2.0以降では、 &lt;code&gt;--strictNullChecks&lt;/code&gt; フラグを使用して&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;厳密なnullチェック&lt;/a&gt;を実施できます。TypeScriptは、変数が意図せずnullまたは未定義にならないようにします。</target>
        </trans-unit>
        <trans-unit id="d061698b8c3e7c9261daa566883ca6fd0824feb8" translate="yes" xml:space="preserve">
          <source>As part of the v11 release, we introduced an opt-in preview of webpack 5 in the Angular CLI. To ensure stability, we&amp;rsquo;ll continue iterating on the implementation to enable build speed and bundle size improvements.</source>
          <target state="translated">v11リリースの一部として、AngularCLIにwebpack5のオプトインプレビューを導入しました。安定性を確保するために、ビルド速度とバンドルサイズの改善を可能にするために、実装を繰り返します。</target>
        </trans-unit>
        <trans-unit id="6c04205c526a4908855b8b9cd7699a33503a185d" translate="yes" xml:space="preserve">
          <source>As service &lt;em&gt;consumer&lt;/em&gt;, you don't worry about any of this. You don't worry about the order of constructor arguments or how they're created.</source>
          <target state="translated">サービス利用&lt;em&gt;者&lt;/em&gt;として、あなたはこれについて心配する必要はありません。コンストラクタの引数の順序や作成方法を気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="09675c24345fed803a2cf94990f46e1bde9b0591" translate="yes" xml:space="preserve">
          <source>As shown in the previous section, you can use the impure &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; to accept an observable as input and subscribe to the input automatically. You can also create an impure pipe to make and cache an HTTP request.</source>
          <target state="translated">前のセクションで示したように、不純な &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; を使用して、オブザーバブルを入力として受け入れ、入力を自動的にサブスクライブできます。不純なパイプを作成して、HTTPリクエストを作成してキャッシュすることもできます。</target>
        </trans-unit>
        <trans-unit id="d046d3787fe0555ffbe29692f926aa83f46f12d8" translate="yes" xml:space="preserve">
          <source>As soon as you import the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, this directive becomes active by default on all &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags. You don't need to add a special selector.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートするとすぐに、このディレクティブはすべての &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグでデフォルトでアクティブになります。特別なセレクターを追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1c2a6c1dd7997586cb51494b2cd0194944234721" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;NgFor&lt;/code&gt; directive loops through the list, it sets and resets properties of its own &lt;em&gt;context&lt;/em&gt; object. These properties can include, but aren't limited to, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;, and a special property named &lt;code&gt;$implicit&lt;/code&gt;.</source>
          <target state="translated">以下のよう &lt;code&gt;NgFor&lt;/code&gt; のディレクティブはリストをループし、それはそれ自身の性質設定し、リセット&lt;em&gt;コンテキスト&lt;/em&gt;オブジェクトを。これらのプロパティには、 &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;$implicit&lt;/code&gt; という名前の特別なプロパティを含めることができますが、これらに限定されません。</target>
        </trans-unit>
        <trans-unit id="f7b7f4dc0aa08937d1e4f42bb1268cea1478924f" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;NgFor&lt;/code&gt; directive loops through the list, it sets and resets properties of its own &lt;em&gt;context&lt;/em&gt; object. These properties can include, but aren't limited to, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;odd&lt;/code&gt;, and a special property named &lt;code&gt;$implicit&lt;/code&gt;.</source>
          <target state="translated">以下のよう &lt;code&gt;NgFor&lt;/code&gt; のディレクティブはリストをループし、それはそれ自身の性質設定し、リセット&lt;em&gt;コンテキスト&lt;/em&gt;オブジェクトを。これらのプロパティには、 &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;odd&lt;/code&gt; 、および &lt;code&gt;$implicit&lt;/code&gt; という名前の特別なプロパティを含めることができますがこれらに限定されません。</target>
        </trans-unit>
        <trans-unit id="cb72e80f48988fd1b9af9fabfe152ff02575aa3d" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;isStable&lt;/code&gt; Observable runs outside the zone, the &lt;code&gt;value&lt;/code&gt; field will be updated properly, but the template will not be refreshed!</source>
          <target state="translated">以下のよう &lt;code&gt;isStable&lt;/code&gt; 観察可能ゾーン外で実行、 &lt;code&gt;value&lt;/code&gt; フィールドが正しく更新されますが、テンプレートがリフレッシュされることはありません！</target>
        </trans-unit>
        <trans-unit id="b2ba4060e4e4afd4ec60303640effc6e19da00de" translate="yes" xml:space="preserve">
          <source>As the app grows, this rule becomes even more important. &lt;a href=&quot;styleguide#toc&quot;&gt;Back to top&lt;/a&gt;</source>
          <target state="translated">アプリが成長するにつれて、このルールはさらに重要になります。&lt;a href=&quot;styleguide#toc&quot;&gt;トップに戻る&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9fd7ba003f3292144c561737946a97b69bfe0de5" translate="yes" xml:space="preserve">
          <source>As the application logic updates component data, values that are bound to DOM properties in the view can change. The change detector is responsible for updating the view to reflect the current data model. Similarly, the user can interact with the UI, causing events that change the state of the data model. These events can trigger change detection.</source>
          <target state="translated">アプリケーション ロジックがコンポーネント データを更新すると、ビュー内の DOM プロパティにバインドされている値が変更されることがあります。変更検出器は、現在のデータモデルを反映するようにビューを更新します。同様に、ユーザーは UI と対話し、データモデルの状態を変更するイベントを発生させることができます。これらのイベントは、変更検出をトリガすることができます。</target>
        </trans-unit>
        <trans-unit id="83b41c56b3b8492075b0d6fee4f3faaeb4fc7ed3" translate="yes" xml:space="preserve">
          <source>As the diagram shows, use inputs and outputs together in the same manner as using them separately. Here, the child selector is &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;deleteRequest&lt;/code&gt; being &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; properties in the child component class. The property &lt;code&gt;currentItem&lt;/code&gt; and the method &lt;code&gt;crossOffItem()&lt;/code&gt; are both in the parent component class.</source>
          <target state="translated">図に示すように、入力と出力を別々に使用するのと同じ方法で一緒に使用します。ここで、子セレクタは &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;deleteRequest&lt;/code&gt; ビーイング &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 子コンポーネントクラスのプロパティ。プロパティ &lt;code&gt;currentItem&lt;/code&gt; とメソッド &lt;code&gt;crossOffItem()&lt;/code&gt; は両方とも親コンポーネントクラスにあります。</target>
        </trans-unit>
        <trans-unit id="576de19f7cd986ea910a0781414027d767fdf59f" translate="yes" xml:space="preserve">
          <source>As the message says, the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; element does not have a &lt;code&gt;colspan&lt;/code&gt; property. This is true because &lt;code&gt;colspan&lt;/code&gt; is an attribute&amp;mdash;&lt;code&gt;colSpan&lt;/code&gt;, with a capital &lt;code&gt;S&lt;/code&gt;, is the corresponding property. Interpolation and property binding can set only &lt;em&gt;properties&lt;/em&gt;, not attributes.</source>
          <target state="translated">メッセージが示すように、 &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 要素には &lt;code&gt;colspan&lt;/code&gt; プロパティがありません。これはtrueです。これは、 &lt;code&gt;colspan&lt;/code&gt; が属性であるためです。大文字の &lt;code&gt;S&lt;/code&gt; が付いた &lt;code&gt;colSpan&lt;/code&gt; が対応するプロパティです。補間とプロパティバインディングは、&lt;em&gt;プロパティ&lt;/em&gt;ではなく属性のみ&lt;em&gt;を&lt;/em&gt;設定できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="44bacbc3e7fdb0b748fcb62abf55c43e15ce9165" translate="yes" xml:space="preserve">
          <source>As the user types in the search box, an input event binding calls the component's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method with the new search box value.</source>
          <target state="translated">ユーザーが検索ボックスに入力すると、入力イベントバインディングが新しい検索ボックスの値を使用してコンポーネントの &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ec9c4d6216d77cc7b2875d1877e97fc0a3a9215c" translate="yes" xml:space="preserve">
          <source>As the user types in the search box, an input event binding calls the component's &lt;code&gt;search()&lt;/code&gt; method with the new search box value.</source>
          <target state="translated">ユーザーが検索ボックスに入力すると、入力イベントバインディングは、新しい検索ボックス値を使用してコンポーネントの &lt;code&gt;search()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9055245f3b1e80adc8f94fdba52f5ad34bb44d2d" translate="yes" xml:space="preserve">
          <source>As the validation begins, the &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; delegates to the &lt;code&gt;HeroesService&lt;/code&gt;&lt;code&gt;isAlterEgoTaken()&lt;/code&gt; method with the current control value. At this point the control is marked as &lt;code&gt;pending&lt;/code&gt; and remains in this state until the observable chain returned from the &lt;code&gt;validate()&lt;/code&gt; method completes.</source>
          <target state="translated">検証が始まると、 &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; は現在のコントロール値を使用して &lt;code&gt;HeroesService&lt;/code&gt; &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; メソッドに委任します。この時点で、コントロールは &lt;code&gt;pending&lt;/code&gt; としてマークされ、 &lt;code&gt;validate()&lt;/code&gt; メソッドから返された監視可能なチェーンが完了するまでこの状態のままになります。</target>
        </trans-unit>
        <trans-unit id="9155140d162aff11a01a9aaf192b5c36f36d8504" translate="yes" xml:space="preserve">
          <source>As these kinds of parameters don't fit easily in a URL path, you can use optional parameters for conveying arbitrarily complex information during navigation. Optional parameters aren't involved in pattern matching and afford flexibility of expression.</source>
          <target state="translated">この種のパラメータはURLパスに収まりにくいので、任意の複雑な情報をナビゲーション中に伝えるためにオプションパラメータを使用することができます。オプションのパラメータはパターンマッチングに関与せず、柔軟な表現が可能です。</target>
        </trans-unit>
        <trans-unit id="012a24a970804ecbbe43bf6ba131c69195b1c31f" translate="yes" xml:space="preserve">
          <source>As these validators are all sync validators, you pass them in as the second argument.</source>
          <target state="translated">これらのバリデータはすべて同期バリデータなので、第2引数に渡します。</target>
        </trans-unit>
        <trans-unit id="0f45027f55358700d46117f934776e60e6b2ad7a" translate="yes" xml:space="preserve">
          <source>As users enter form data, you'll capture their changes and update an instance of a model. You can't lay out the form until you know what the model looks like.</source>
          <target state="translated">ユーザーがフォームデータを入力すると、その変更をキャプチャしてモデルのインスタンスを更新します。モデルがどのように見えるかを知るまでは、フォームをレイアウトすることはできません。</target>
        </trans-unit>
        <trans-unit id="1b00d72f3724db2eb2f17c415c8acad26e63056a" translate="yes" xml:space="preserve">
          <source>As usual, you write a constructor that asks Angular to inject services that the component requires and reference them as private variables.</source>
          <target state="translated">いつものように、コンポーネントが必要とするサービスをAngularに注入してもらい、それをプライベート変数として参照するように依頼するコンストラクタを書きます。</target>
        </trans-unit>
        <trans-unit id="2a5fa238e4e05c9102523cdc407b74b4b0c63df8" translate="yes" xml:space="preserve">
          <source>As with components, you can add as many directive property bindings as you need by stringing them along in the template. The developer should be able to write the following template HTML to both bind to the &lt;code&gt;AppComponent.color&lt;/code&gt; and fall back to &quot;violet&quot; as the default color.</source>
          <target state="translated">コンポーネントの場合と同様に、ディレクティブプロパティバインディングをテンプレート内で文字列化することにより、必要なだけ追加できます。開発者は、次のテンプレートHTMLを記述して、 &lt;code&gt;AppComponent.color&lt;/code&gt; にバインドし、デフォルトの色として「violet」に戻すことができる必要があります。</target>
        </trans-unit>
        <trans-unit id="30b5e960013eb063b20be7ecc6ff05c14a6c57f8" translate="yes" xml:space="preserve">
          <source>As with expressions, avoid writing complex template statements. A method call or simple property assignment should be the norm.</source>
          <target state="translated">式と同様に、複雑なテンプレート文を書くことは避けてください。メソッド呼び出しや単純なプロパティの代入が一般的です。</target>
        </trans-unit>
        <trans-unit id="07c4c64d5513511be2cb127c82fcb01ee8b7e55a" translate="yes" xml:space="preserve">
          <source>As with expressions, statements can refer only to what's in the statement context such as an event handling method of the component instance.</source>
          <target state="translated">式と同様に、ステートメントは、コンポーネントインスタンスのイベント処理メソッドのようなステートメントコンテキストにあるものだけを参照することができます。</target>
        </trans-unit>
        <trans-unit id="bb901be354860557451c002789bc0c1663e2f0b6" translate="yes" xml:space="preserve">
          <source>As with other directives, you apply a structural directive to a &lt;em&gt;host element&lt;/em&gt;. The directive then does whatever it's supposed to do with that host element and its descendants.</source>
          <target state="translated">他のディレクティブと同様に、構造的なディレクティブを&lt;em&gt;ホスト要素に&lt;/em&gt;適用します。ディレクティブは、そのホスト要素とその子孫に対して行うべきことを何でも行います。</target>
        </trans-unit>
        <trans-unit id="1d5b6417cba4ef881daf50c6a534671a6568bcbd" translate="yes" xml:space="preserve">
          <source>As with other structural directives, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; can be desugared into the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element form.</source>
          <target state="translated">他の構造ディレクティブと同様に、 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素形式に変換できます。</target>
        </trans-unit>
        <trans-unit id="bf9ee189724da5d4f748ccae4de0e3edcce56bb7" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;HeroesModule&lt;/code&gt;, you must add the &lt;code&gt;CrisisCenterModule&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; the &lt;code&gt;AppRoutingModule&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;HeroesModule&lt;/code&gt; と同様に、 &lt;code&gt;AppModule&lt;/code&gt; &lt;em&gt;前&lt;/em&gt;に &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 配列に &lt;code&gt;CrisisCenterModule&lt;/code&gt; を追加する必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6d5ad368cf59cb55a48ed7f1273bd908182ba7f4" translate="yes" xml:space="preserve">
          <source>As with the previous &lt;code&gt;expectOne()&lt;/code&gt;, the test fails if 0 or 2+ requests satisfy this predicate.</source>
          <target state="translated">前の &lt;code&gt;expectOne()&lt;/code&gt; と同様に、0または2+の要求がこの述語を満たす場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="7ce201841a7ab6826908ab4e2e8a1bf231d9b18c" translate="yes" xml:space="preserve">
          <source>As with the previous &lt;code&gt;expectOne()&lt;/code&gt;, the test will fail if 0 or 2+ requests satisfy this predicate.</source>
          <target state="translated">以前の &lt;code&gt;expectOne()&lt;/code&gt; と同様に、0または2+の要求がこの述部を満たす場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="78b22aea998f810381c17b06fb2333a37588a173" translate="yes" xml:space="preserve">
          <source>As you add and delete characters, you can see them appear and disappear from the data model. For example:</source>
          <target state="translated">文字を追加したり削除したりすると、データモデルから文字が表示されたり消えたりするのを見ることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ec0a709258428a25296d9a2a6bba7576693ff220" translate="yes" xml:space="preserve">
          <source>As you can see here, the &lt;code&gt;parentItem&lt;/code&gt; in &lt;code&gt;AppComponent&lt;/code&gt; is a string, which the &lt;code&gt;ItemDetailComponent&lt;/code&gt; expects:</source>
          <target state="translated">あなたがここに見ることができるように、 &lt;code&gt;parentItem&lt;/code&gt; で &lt;code&gt;AppComponent&lt;/code&gt; は、文字列、ある &lt;code&gt;ItemDetailComponent&lt;/code&gt; が期待します：</target>
        </trans-unit>
        <trans-unit id="b8ce8f85bb4b5482efa912931cf27e2ce382563a" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; class implements the &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interface. In the constructor, we inject the &lt;code&gt;HeroesService&lt;/code&gt; that has the following interface:</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; クラスは &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; インターフェイスを実装しています。コンストラク &lt;code&gt;HeroesService&lt;/code&gt; では、次のインターフェイスを持つHeroesServiceを注入します。</target>
        </trans-unit>
        <trans-unit id="f958b9634ee0ca82f703565029116255553f7d8f" translate="yes" xml:space="preserve">
          <source>As you can see, the response object has a &lt;code&gt;body&lt;/code&gt; property of the correct type.</source>
          <target state="translated">ご覧のように、応答オブジェクトには正しいタイプの &lt;code&gt;body&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="30b1da4a374a4b82201be5944135fd88e7c2eeb0" translate="yes" xml:space="preserve">
          <source>As you click the button, the displayed date alternates between &quot;&lt;strong&gt;&lt;samp&gt;04/15/1988&lt;/samp&gt;&lt;/strong&gt;&quot; and &quot;&lt;strong&gt;&lt;samp&gt;Friday, April 15, 1988&lt;/samp&gt;&lt;/strong&gt;&quot;.</source>
          <target state="translated">ボタンをクリックすると、表示される日付が「&lt;strong&gt;&lt;samp&gt;1988年4月15日&lt;/samp&gt;&lt;/strong&gt;「と」&lt;strong&gt;&lt;samp&gt;1988年4月15日金曜日&lt;/samp&gt;&lt;/strong&gt;」</target>
        </trans-unit>
        <trans-unit id="ab33e4cc94b129cb31d7c97d8407c2606a472c70" translate="yes" xml:space="preserve">
          <source>As you create new interceptors, add them to the &lt;code&gt;httpInterceptorProviders&lt;/code&gt; array and you won't have to revisit the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">新しいインターセプタを作成すると、それらを追加 &lt;code&gt;httpInterceptorProviders&lt;/code&gt; アレイと、あなたは再考する必要はありません &lt;code&gt;AppModule&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b35cd950e3abf3c41b9d1fee6bfbba54cf41fa95" translate="yes" xml:space="preserve">
          <source>As you may recall, &lt;code&gt;AdDirective&lt;/code&gt; injects &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; into its constructor. This is how the directive accesses the element that you want to use to host the dynamic component.</source>
          <target state="translated">あなたは、思い出しているよう &lt;code&gt;AdDirective&lt;/code&gt; 注入 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; そのコンストラクタに。これは、動的コンポーネントをホストするために使用する要素にディレクティブがアクセスする方法です。</target>
        </trans-unit>
        <trans-unit id="66db9819ffe3ed53a6e4700b9705018402a68de2" translate="yes" xml:space="preserve">
          <source>As you might have guessed, you don't need to change anything in the way you bootstrap your existing AngularJS app. Unlike &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;&amp;mdash;which requires some extra steps&amp;mdash; &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is able to take care of bootstrapping the Angular module, as long as you provide the recipe.</source>
          <target state="translated">ご想像のとおり、既存のAngularJSアプリをブートストラップする方法を変更する必要はありません。異なり &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; いくつかの余分なsteps-必要と-which &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 限り、あなたはレシピを提供して、角度モジュールをブートストラップの世話をすることができます。</target>
        </trans-unit>
        <trans-unit id="b0d2196193897c3d628ff542df1f728e1990a4fd" translate="yes" xml:space="preserve">
          <source>As you near the end of the development process, serving the contents of your output folder from a local web server can give you a better idea of how your application will behave when it is deployed to a remote server. You will need two terminals to get the live-reload experience.</source>
          <target state="translated">開発プロセスの終わりに近づくにつれ、ローカルのウェブサーバから出力フォルダの内容を提供することで、アプリケーションがリモートサーバにデプロイされたときにどのように動作するかのより良いアイデアを得ることができます。ライブリロードを体験するためには、2台の端末が必要になります。</target>
        </trans-unit>
        <trans-unit id="4e0151055d71dd61f258f216803c7ce77b59e409" translate="yes" xml:space="preserve">
          <source>As you work with this form, you will learn how to include validation logic, how to customize the presentation with standard CSS, and how to handle error conditions to ensure valid input. If the user deletes the hero name, for example, the form becomes invalid. The app detects the changed status, and displays a validation error in an attention-grabbing style. In addition, the &lt;strong&gt;Submit&lt;/strong&gt; button is disabled, and the &quot;required&quot; bar to the left of the input control changes from green to red.</source>
          <target state="translated">このフォームを操作するときに、検証ロジックを含める方法、標準のCSSを使用してプレゼンテーションをカスタマイズする方法、および有効な入力を確保するためにエラー条件を処理する方法を学習します。たとえば、ユーザーがヒーロー名を削除すると、フォームは無効になります。アプリは変更されたステータスを検出し、注意を引くスタイルで検証エラーを表示します。さらに、[&lt;strong&gt;送信&lt;/strong&gt;]ボタンが無効になり、入力コントロールの左側にある[必須]バーが緑から赤に変わります。</target>
        </trans-unit>
        <trans-unit id="5cf5b93ed1e9a45e9ec8c8bf0566005ffc514ad0" translate="yes" xml:space="preserve">
          <source>As you'll be navigating to the &lt;em&gt;Admin Dashboard&lt;/em&gt; route after logging in, you'll update it to handle the query parameters and fragment.</source>
          <target state="translated">ログイン後に&lt;em&gt;管理ダッシュボードの&lt;/em&gt;ルートに移動するので、クエリパラメータとフラグメントを処理するようにルートを更新します。</target>
        </trans-unit>
        <trans-unit id="f0b43016a337094572c49d0ebcd7d6f06663336c" translate="yes" xml:space="preserve">
          <source>As you've learned, a component in an outlet persists until you navigate away to a new component. Secondary outlets are no different in this regard.</source>
          <target state="translated">お分かりのように、アウトレット内のコンポーネントは、新しいコンポーネントに移動するまで存続します。この点では、セカンダリアウトレットも同じです。</target>
        </trans-unit>
        <trans-unit id="e1b726055d199d23cbbaf0bbb7c90f5393684b71" translate="yes" xml:space="preserve">
          <source>As you've seen, multiple components can leverage the same service. Later in this tutorial, the shipping component will use the cart service to retrieve shipping data via HTTP from the &lt;code&gt;shipping.json&lt;/code&gt; file. Here you'll define the &lt;code&gt;get()&lt;/code&gt; method that will be used.</source>
          <target state="translated">これまで見てきたように、複数のコンポーネントが同じサービスを利用できます。このチュートリアルの後半では、shippingコンポーネントがcartサービスを使用して、 &lt;code&gt;shipping.json&lt;/code&gt; ファイルからHTTP経由で配送データを取得します。ここでは、使用する &lt;code&gt;get()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="c81caf6ffe3d326f41b1efc1332f0197102bbbe8" translate="yes" xml:space="preserve">
          <source>As you've worked through the milestones, the application has naturally gotten larger. As you continue to build out feature areas, the overall application size will continue to grow. At some point you'll reach a tipping point where the application takes a long time to load.</source>
          <target state="translated">あなたがマイルストーンを通過していくうちに、アプリケーションは自然と大きくなっていきます。機能領域を構築し続けると、アプリケーション全体のサイズは成長し続けます。ある時点で、アプリケーションのロードに長い時間がかかるような転換点に到達するでしょう。</target>
        </trans-unit>
        <trans-unit id="2fe40b33592723c9ffed418ea5b179b50d789586" translate="yes" xml:space="preserve">
          <source>As you've worked through the milestones, the application has naturally gotten larger. At some point you'll reach a point where the application takes a long time to load.</source>
          <target state="translated">あなたがマイルストーンを進めていくうちに、アプリケーションは自然と大きくなっていきます。ある時点で、アプリケーションのロードに時間がかかるようになります。</target>
        </trans-unit>
        <trans-unit id="f3171c48f50cadb18be953d56f6aadf2c1470f7e" translate="yes" xml:space="preserve">
          <source>As your app grows, you can organize code relevant for a specific feature. This helps apply clear boundaries for features. With feature modules, you can keep code related to a specific functionality or feature separate from other code. Delineating areas of your app helps with collaboration between developers and teams, separating directives, and managing the size of the root module.</source>
          <target state="translated">アプリが成長するにつれて、特定の機能に関連するコードを整理することができます。これにより、機能に明確な境界線を適用することができます。機能モジュールを使用すると、特定の機能や機能に関連するコードを他のコードから分離しておくことができます。アプリの領域を明確にすることで、開発者とチーム間のコラボレーション、ディレクティブの分離、ルート モジュールのサイズの管理に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2eed7ce85e255e9ab9ff2d8f035497961189f71e" translate="yes" xml:space="preserve">
          <source>As your application grows more complex, you may want to create routes that are relative to a component other than your root component. These types of nested routes are called child routes. This means you're adding a second &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; to your app, because it is in addition to the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; in &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">アプリケーションがより複雑になるにつれて、ルートコンポーネント以外のコンポーネントに相対的なルートを作成したい場合があります。これらのタイプのネストされたルートは、子ルートと呼ばれます。これは、 &lt;code&gt;AppComponent&lt;/code&gt; の &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; &lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt; &amp;gt;に追加されているため、2番目の &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; をアプリに追加していることを意味します。</target>
        </trans-unit>
        <trans-unit id="ff3222db2ced161973e02584ac4049af0ec6632b" translate="yes" xml:space="preserve">
          <source>Asking the service worker to activate the latest version of the app for the current tab.</source>
          <target state="translated">サービスワーカーに、現在のタブのアプリの最新バージョンを有効化するように依頼します。</target>
        </trans-unit>
        <trans-unit id="fbc52ac881315f0b01fcb3898c6bbefb4ca717ed" translate="yes" xml:space="preserve">
          <source>Asking the service worker to check the server for new updates.</source>
          <target state="translated">サービスワーカーに、サーバーに新しい更新がないかどうかを確認するように依頼する。</target>
        </trans-unit>
        <trans-unit id="5b45b5ea2e28d732a01d25a9ef132499d3d14bc3" translate="yes" xml:space="preserve">
          <source>Assert expectations on its public state.</source>
          <target state="translated">その公共国家への期待を主張する。</target>
        </trans-unit>
        <trans-unit id="269d80f2e6ae0d9c46cde478b4e5500f9c28b64f" translate="yes" xml:space="preserve">
          <source>Assert that the component &lt;code&gt;favoriteColor&lt;/code&gt; property value matches the value from the input.</source>
          <target state="translated">成分と主張 &lt;code&gt;favoriteColor&lt;/code&gt; のプロパティ値は、入力からの値に一致します。</target>
        </trans-unit>
        <trans-unit id="3add2d771e4f408357de38d3cf1e4671e71d6e99" translate="yes" xml:space="preserve">
          <source>Assert that the component's &lt;code&gt;favoriteColorControl&lt;/code&gt; value matches the value from the input.</source>
          <target state="translated">コンポーネントの &lt;code&gt;favoriteColorControl&lt;/code&gt; 値が入力からの値と一致することをアサートします。</target>
        </trans-unit>
        <trans-unit id="60d381f9c278556bf5f707455aa4e181db801691" translate="yes" xml:space="preserve">
          <source>Assert that the input value matches the value of the &lt;code&gt;favoriteColor&lt;/code&gt; property in the component instance.</source>
          <target state="translated">入力値がコンポーネントインスタンスの &lt;code&gt;favoriteColor&lt;/code&gt; プロパティの値と一致することをアサートします。</target>
        </trans-unit>
        <trans-unit id="2cac1bd12dceb2fce01f7d2c39980b6f3eb123f1" translate="yes" xml:space="preserve">
          <source>Assert that the new value set on the control matches the value in the input.</source>
          <target state="translated">コントロールに設定された新しい値が入力の値と一致することをアサートします。</target>
        </trans-unit>
        <trans-unit id="102dbd8a0d9de9bd9ed34eaa50b57bc20f17597a" translate="yes" xml:space="preserve">
          <source>Assert the correct type of the expression bound to the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input within the template.</source>
          <target state="translated">テンプレート内の &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 入力にバインドされた式の正しいタイプをアサートします。</target>
        </trans-unit>
        <trans-unit id="34ae054cee78e0c6e83c3e3cd694a67e5d64d9d1" translate="yes" xml:space="preserve">
          <source>Asserts the correct type of the context for the template that &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; will render.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; がレンダリングするテンプレートのコンテキストの正しいタイプをアサートします。</target>
        </trans-unit>
        <trans-unit id="471940a95e6ccb6eae6400e44be1438188978b50" translate="yes" xml:space="preserve">
          <source>Asserts the correct type of the context for the template that &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; will render.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; がレンダリングするテンプレートのコンテキストの正しいタイプをアサートします。</target>
        </trans-unit>
        <trans-unit id="64db28c14c3f75eaf3fe6ba74774a54e6cbb89bd" translate="yes" xml:space="preserve">
          <source>Asset groups follow the Typescript interface shown here:</source>
          <target state="translated">アセットグループは、ここに示されているTypescriptのインターフェイスに従います。</target>
        </trans-unit>
        <trans-unit id="d6c9dfdc694085b6f0d02ea7e1e4fd3d4df7e99c" translate="yes" xml:space="preserve">
          <source>Assets configuration</source>
          <target state="translated">アセットの設定</target>
        </trans-unit>
        <trans-unit id="e6a6bbc5e96926eeccb08d147396e13b4a2aa489" translate="yes" xml:space="preserve">
          <source>Assignments (&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt;)</source>
          <target state="translated">割り当て（ &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; 、 &lt;code&gt;...&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7a1a70a899ae4731ff189ca13512ffc94c946adb" translate="yes" xml:space="preserve">
          <source>Assigns this bus to the given zone. Any callbacks attached to channels where runInZone was set to true on initialization will be executed in the given zone.</source>
          <target state="translated">このバスを指定されたゾーンに割り当てます。初期化時に runInZone が true に設定されているチャンネルにアタッチされたコールバックは、指定されたゾーンで実行されます。</target>
        </trans-unit>
        <trans-unit id="d242cadc4aa1e98583aee808bc5bd94b0df50df6" translate="yes" xml:space="preserve">
          <source>Assigns this sink to the given zone. Any channels which are initialized with runInZone set to true will wait for the given zone to exit before sending messages.</source>
          <target state="translated">このシンクを指定されたゾーンに割り当てます。runInZone を true に設定して初期化されたチャンネルは、メッセージを送信する前に指定されたゾーンが終了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="8f94f199baf1d5d8266597ec2112eb1be1c1fb69" translate="yes" xml:space="preserve">
          <source>Assigns this source to the given zone. Any channels which are initialized with runInZone set to true will emit events that will be executed within the given zone.</source>
          <target state="translated">このソースを指定されたゾーンに割り当てます。runInZone を true に設定して初期化されたチャンネルは、指定されたゾーン内で実行されるイベントを放出します。</target>
        </trans-unit>
        <trans-unit id="49fcc4238bbf2b339cfcfa762b3396453c32af91" translate="yes" xml:space="preserve">
          <source>Associate the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; model and view.</source>
          <target state="translated">関連付け &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; のモデルとビューを。</target>
        </trans-unit>
        <trans-unit id="274e2293c4a3f531e996553089413c2aeb58f8c2" translate="yes" xml:space="preserve">
          <source>Associates a named animation state with a set of CSS styles. See &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">名前付きアニメーション状態をCSSスタイルのセットに関連付けます。 &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="1c606a19977855e292dd7286f4f48996ac6f7432" translate="yes" xml:space="preserve">
          <source>Associates a named animation state with a set of CSS styles. See &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">名前付きアニメーションの状態をCSSスタイルのセットに関連付けます。 &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; （）を参照してください</target>
        </trans-unit>
        <trans-unit id="4ae49ef1cd7752015463f129314f634187b62c7a" translate="yes" xml:space="preserve">
          <source>Associates an animation with an entry trigger that can be attached to an element. See &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">アニメーションを、要素にアタッチできるエントリートリガーに関連付けます。 &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; （）を参照してください</target>
        </trans-unit>
        <trans-unit id="4784eaa8aeb7a762e1180e053368ca4e65b375b2" translate="yes" xml:space="preserve">
          <source>Assume the user is logged into the application at &lt;code&gt;example-bank.com&lt;/code&gt;. The user opens an email and clicks a link to &lt;code&gt;evil.com&lt;/code&gt;, which opens in a new tab.</source>
          <target state="translated">ユーザーが &lt;code&gt;example-bank.com&lt;/code&gt; でアプリケーションにログインしていると仮定します。ユーザーがメールを開き、 &lt;code&gt;evil.com&lt;/code&gt; へのリンクをクリックすると、新しいタブが開きます。</target>
        </trans-unit>
        <trans-unit id="e46bf719d36c903e3f4ff538c57fdd22e7050c74" translate="yes" xml:space="preserve">
          <source>Assume you have a library project &lt;code&gt;my-lib&lt;/code&gt; in your Angular workspace. To tell the library how to build the schematics, add a &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; file next to the generated &lt;code&gt;tsconfig.lib.json&lt;/code&gt; file that configures the library build.</source>
          <target state="translated">Angularワークスペースにライブラリプロジェクト &lt;code&gt;my-lib&lt;/code&gt; があるとします。回路図を構築するためにどのようにライブラリを伝えるために、追加 &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; の次の生成にファイルを &lt;code&gt;tsconfig.lib.json&lt;/code&gt; のライブラリのビルドを設定するファイル。</target>
        </trans-unit>
        <trans-unit id="75818174243243561c9a25a5467849a1c2d2c022" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;dateObj&lt;/code&gt; is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08) in the &lt;em&gt;local&lt;/em&gt; time and locale is 'en-US':</source>
          <target state="translated">仮定 &lt;code&gt;dateObj&lt;/code&gt; がされ（年：2010、月：9、日：3、時間：12 PM、分：05、秒：08）での&lt;em&gt;現地&lt;/em&gt;時間とロケールは'EN-US'です。</target>
        </trans-unit>
        <trans-unit id="5873ba4b7149a08e105140ef51ae2d0ffcc5d42b" translate="yes" xml:space="preserve">
          <source>Assuming that the CLI &lt;code&gt;ng serve&lt;/code&gt; command is still running, the browser should refresh and display both the application title and the hero name.</source>
          <target state="translated">CLI &lt;code&gt;ng serve&lt;/code&gt; コマンドがまだ実行されていると仮定すると、ブラウザーは更新され、アプリケーションのタイトルとヒーロー名の両方が表示されます。</target>
        </trans-unit>
        <trans-unit id="94f5418a94f3eedc92108d6697fb720a530c5a6c" translate="yes" xml:space="preserve">
          <source>Assuming you already have an app that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, create a feature module using the CLI by entering the following command in the root project directory. Replace &lt;code&gt;CustomerDashboard&lt;/code&gt; with the name of your module. You can omit the &quot;Module&quot; suffix from the name because the CLI appends it:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;で作成したアプリがすでにあると仮定して、ルートプロジェクトディレクトリに次のコマンドを入力し、CLIを使用して機能モジュールを作成します。 &lt;code&gt;CustomerDashboard&lt;/code&gt; をモジュールの名前に置き換えます。CLIが追加するため、名前から「Module」サフィックスを省略できます。</target>
        </trans-unit>
        <trans-unit id="8b593995c88f61a609044a01e37e8e4ccc22e065" translate="yes" xml:space="preserve">
          <source>Assumptions</source>
          <target state="translated">Assumptions</target>
        </trans-unit>
        <trans-unit id="850c312e6795e144c4801560d1a8a36931550927" translate="yes" xml:space="preserve">
          <source>Async Validation</source>
          <target state="translated">非同期バリデーション</target>
        </trans-unit>
        <trans-unit id="3d8523026285ca381ac26c6046011d703dc76210" translate="yes" xml:space="preserve">
          <source>Async observable helpers</source>
          <target state="translated">非同期観測可能なヘルパー</target>
        </trans-unit>
        <trans-unit id="a2115adcf8a7abd68847a06a2ca483273231f7b5" translate="yes" xml:space="preserve">
          <source>Async observables</source>
          <target state="translated">非同期観測値</target>
        </trans-unit>
        <trans-unit id="66faa9aa7a8da44bac968eb4f9651b0395d1e769" translate="yes" xml:space="preserve">
          <source>Async pipe</source>
          <target state="translated">非同期パイプ</target>
        </trans-unit>
        <trans-unit id="465bdb8533ebb255eef127b77064a4450ccdad5a" translate="yes" xml:space="preserve">
          <source>Async test with &lt;em&gt;async()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;async（）&lt;/em&gt;による非同期テスト&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3dfebbe72d4e3d6b50b5f6205bf253eb9e510d1" translate="yes" xml:space="preserve">
          <source>Async test with &lt;em&gt;fakeAsync()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;fakeAsync（）&lt;/em&gt;による非同期テスト&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="60055bf8c9508ed73c9e2d6fc18babce7a1caa3d" translate="yes" xml:space="preserve">
          <source>Async test with &lt;em&gt;waitForAsync()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;waitForAsync（）&lt;/em&gt;を&lt;em&gt;使用した&lt;/em&gt;非同期テスト&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a3a2a031d9a78f06359a7d5ceed4a4220e47722c" translate="yes" xml:space="preserve">
          <source>Async validator function composed of all the async validators registered with this directive.</source>
          <target state="translated">このディレクティブに登録されているすべての非同期バリデータからなる非同期バリデータ関数です。</target>
        </trans-unit>
        <trans-unit id="08889716a00afbaa4f75748cfc88dc19b867511d" translate="yes" xml:space="preserve">
          <source>AsyncPipe</source>
          <target state="translated">AsyncPipe</target>
        </trans-unit>
        <trans-unit id="d3db89bff8169aadf0002b749871c33ae8202bab" translate="yes" xml:space="preserve">
          <source>AsyncValidator</source>
          <target state="translated">AsyncValidator</target>
        </trans-unit>
        <trans-unit id="ffde100172e9b0262a458c11ee4575fc6b847d60" translate="yes" xml:space="preserve">
          <source>AsyncValidatorFn</source>
          <target state="translated">AsyncValidatorFn</target>
        </trans-unit>
        <trans-unit id="3d7fac7964f752248f02c5aa61c85fd417dcfbcf" translate="yes" xml:space="preserve">
          <source>Asynchronous</source>
          <target state="translated">Asynchronous</target>
        </trans-unit>
        <trans-unit id="37a310b45a04c0a244854134bbf202646220195b" translate="yes" xml:space="preserve">
          <source>Asynchronous validation happens after the synchronous validation, and is performed only if the synchronous validation is successful. This check allows forms to avoid potentially expensive async validation processes (such as an HTTP request) if the more basic validation methods have already found invalid input.</source>
          <target state="translated">非同期検証は同期検証の後に行われ、同期検証が成功した場合にのみ実行されます。このチェックにより、より基本的なバリデーションメソッドで無効な入力がすでに見つかっている場合に、フォームは費用がかかる可能性のある非同期バリデーション処理(HTTPリクエストなど)を回避することができます。</target>
        </trans-unit>
        <trans-unit id="998ed05f053e1853c01b49907d986bbc10b73e44" translate="yes" xml:space="preserve">
          <source>Asynchronous validator function composed of all the asynchronous validators registered with this directive.</source>
          <target state="translated">このディレクティブに登録されているすべての非同期バリデータからなる非同期バリデータ関数です。</target>
        </trans-unit>
        <trans-unit id="575694c2cb16e00e61ffa3cd7d69fb6ab26b8495" translate="yes" xml:space="preserve">
          <source>Asynchronous validators implement the &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidatorfn&quot;&gt;AsyncValidatorFn&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interfaces. These are very similar to their synchronous counterparts, with the following differences.</source>
          <target state="translated">非同期バリデーターは、 &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidatorfn&quot;&gt;AsyncValidatorFn&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; インターフェースを実装します。これらは同期の対応物と非常に似ていますが、次の違いがあります。</target>
        </trans-unit>
        <trans-unit id="b3eeded95df5b44a415fcb5e4ef49bdffbb7e6a1" translate="yes" xml:space="preserve">
          <source>At a high level, NgModules are a way to organize Angular apps and they accomplish this through the metadata in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. The metadata falls into three categories:</source>
          <target state="translated">高レベルでは、NgModuleはAngularアプリを整理する方法であり、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターのメタデータを介してこれを実現します。メタデータは3つのカテゴリに分類されます。</target>
        </trans-unit>
        <trans-unit id="242134a4310d9dba08222aef54e2257cacc08268" translate="yes" xml:space="preserve">
          <source>At its simplest, a service worker is a script that runs in the web browser and manages caching for an application.</source>
          <target state="translated">最も簡単に言えば、サービスワーカーは Web ブラウザで実行され、アプリケーションのキャッシングを管理するスクリプトです。</target>
        </trans-unit>
        <trans-unit id="8e510f3f50eecae75e2f194727aa6e0658b6fbe6" translate="yes" xml:space="preserve">
          <source>At its simplest, a service worker is a script that runs in the web browser and manages caching for an application. Service workers function as a network proxy. They intercept all outgoing HTTP requests made by the application and can choose how to respond to them.</source>
          <target state="translated">最も簡単に言えば、サービスワーカーは Web ブラウザで実行され、アプリケーションのキャッシングを管理するスクリプトです。サービスワーカーはネットワークプロキシとして機能します。サービスワーカーはアプリケーションからのすべての送信 HTTP リクエストを傍受し、それらにどのように応答するかを選択することができます。</target>
        </trans-unit>
        <trans-unit id="02c3f16fdd9df9a64633ff91d643eaf302e53ae5" translate="yes" xml:space="preserve">
          <source>At runtime, the input will be set to the empty string, which is not a &lt;code&gt;boolean&lt;/code&gt; value. Angular component libraries that deal with this problem often &quot;coerce&quot; the value into the right type in the setter:</source>
          <target state="translated">実行時に、入力は &lt;code&gt;boolean&lt;/code&gt; 値ではない空の文字列に設定されます。この問題を処理するAngularコンポーネントライブラリは、多くの場合、値をセッターの正しい型に「強制」します。</target>
        </trans-unit>
        <trans-unit id="f2fb1d2b6dd484c68fa3057e82590ac4a166dcd3" translate="yes" xml:space="preserve">
          <source>At some later point, the app requests the lazy bundle, &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt;.</source>
          <target state="translated">後のある時点で、アプリはレイジーバンドル &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-1&amp;gt;.js&lt;/code&gt; リクエストします。</target>
        </trans-unit>
        <trans-unit id="cae1b7e929dfc6e1600a1a1671f28d169e95e10a" translate="yes" xml:space="preserve">
          <source>At the bottom of the template, add an HTML form to capture user information.</source>
          <target state="translated">テンプレートの下部に、ユーザー情報を取り込むためのHTMLフォームを追加します。</target>
        </trans-unit>
        <trans-unit id="0a86dc5ece1ac9e833952415de9250d745d527c3" translate="yes" xml:space="preserve">
          <source>At the bottom of the template, add an empty HTML form to capture user information.</source>
          <target state="translated">テンプレートの下部に、ユーザー情報を取り込むための空のHTMLフォームを追加します。</target>
        </trans-unit>
        <trans-unit id="0a72f978f7bf5ae9b84f741e034c4300f3de1323" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start&quot;&gt;Your First App&lt;/a&gt;, the online store application has a basic product catalog. The app doesn't have any variable states or navigation. There is one URL, and that URL always displays the &quot;My Store&quot; page with a list of products and their descriptions.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start&quot;&gt;Your First Appの&lt;/a&gt;最後に、オンラインストアアプリケーションに基本的な製品カタログがあります。アプリには変数の状態やナビゲーションはありません。URLは1つで、そのURLには常に製品のリストとその説明が記載された「マイストア」ページが表示されます。</target>
        </trans-unit>
        <trans-unit id="51ce5900aad4e680b18674d74b2c9f48486d18e2" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start&quot;&gt;part 1&lt;/a&gt;, the online store application has a basic product catalog. The app doesn't have any variable states or navigation. There is one URL, and that URL always displays the &quot;My Store&quot; page with a list of products and their descriptions.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start&quot;&gt;パート1&lt;/a&gt;の終わりに、オンラインストアアプリケーションには基本的な製品カタログがあります。アプリには可変状態やナビゲーションはありません。1つのURLがあり、そのURLには、製品とその説明のリストを含む「マイストア」ページが常に表示されます。</target>
        </trans-unit>
        <trans-unit id="f3a019d3473bd7c74189945ba7fdf2d2de78293b" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;Managing Data&lt;/a&gt;, the online store application has a product catalog and a shopping cart.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;データ&lt;/a&gt;の管理の最後には、オンラインストアアプリケーションに製品カタログとショッピングカートがあります。</target>
        </trans-unit>
        <trans-unit id="d55658fc25831b063983ee22a2f5946a2c03370f" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;Routing&lt;/a&gt;, the online store application has a product catalog with two views: a product list and product details. Users can click on a product name from the list to see details in a new view, with a distinct URL (route).</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;Routing&lt;/a&gt;の最後には、オンラインストアアプリケーションに、製品リストと製品詳細の2つのビューを持つ製品カタログがあります。ユーザーはリストから製品名をクリックして、個別のURL（ルート）で新しいビューに詳細を表示できます。</target>
        </trans-unit>
        <trans-unit id="9fd575c0566b76e5d3207e1cb47b414cc567e6ea" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/start-data&quot;&gt;Managing Data&lt;/a&gt;, the online store application has a product catalog and a shopping cart.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start/start-data&quot;&gt;データ管理&lt;/a&gt;の最後に、オンラインストアアプリケーションには製品カタログとショッピングカートがあります。</target>
        </trans-unit>
        <trans-unit id="ddf3ff007dbc67f83d50f7b5e29d38404d81b3c3" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/start-routing&quot;&gt;In-app Navigation&lt;/a&gt;, the online store application has a product catalog with two views: a product list and product details. Users can click on a product name from the list to see details in a new view, with a distinct URL, or route.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start/start-routing&quot;&gt;アプリ内ナビゲーション&lt;/a&gt;の最後に、オンラインストアアプリケーションには、製品リストと製品詳細の2つのビューを持つ製品カタログがあります。ユーザーはリストから製品名をクリックして、個別のURLまたはルートを使用して新しいビューで詳細を表示できます。</target>
        </trans-unit>
        <trans-unit id="aa2383077a65ab0c0336fa3575224c0a072cec68" translate="yes" xml:space="preserve">
          <source>At the end of the hero detail template, add a save button with a &lt;code&gt;click&lt;/code&gt; event binding that invokes a new component method named &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="translated">ヒーロー詳細テンプレートの最後に、 &lt;code&gt;save()&lt;/code&gt; という名前の新しいコンポーネントメソッドを呼び出す &lt;code&gt;click&lt;/code&gt; イベントバインディングを含む保存ボタンを追加します。</target>
        </trans-unit>
        <trans-unit id="4a77379b17f9d43f8aa4ce2a08643a4ee08cf070" translate="yes" xml:space="preserve">
          <source>At the end, tests can verify that the app has made no unexpected requests.</source>
          <target state="translated">最後に、テストでは、アプリが予期せぬリクエストをしなかったことを確認することができます。</target>
        </trans-unit>
        <trans-unit id="04e2e3448d97cf88b4c8cf92be8647a5d5df0f65" translate="yes" xml:space="preserve">
          <source>At the end, tests may verify that the app has made no unexpected requests.</source>
          <target state="translated">最後に、テストでは、アプリが予期せぬリクエストをしていないことを確認することがあります。</target>
        </trans-unit>
        <trans-unit id="0cb6df513db3bf3228849da6550d8a1fbd416ea9" translate="yes" xml:space="preserve">
          <source>At the moment you're interested in seeing how guards work so the first version does nothing useful. It simply logs to console and &lt;code&gt;returns&lt;/code&gt; true immediately, allowing navigation to proceed:</source>
          <target state="translated">現時点では、ガードがどのように機能するかを確認することに興味があるので、最初のバージョンでは何も役に立ちません。コンソールにログを記録し、すぐにtrue を &lt;code&gt;returns&lt;/code&gt; だけで、ナビゲーションを続行できます。</target>
        </trans-unit>
        <trans-unit id="9ab7474646e972990366803a61deec9eef2838ea" translate="yes" xml:space="preserve">
          <source>At the moment, &lt;em&gt;any&lt;/em&gt; user can navigate &lt;em&gt;anywhere&lt;/em&gt; in the application &lt;em&gt;anytime&lt;/em&gt;. That's not always the right thing to do.</source>
          <target state="translated">現時点では&lt;em&gt;、&lt;/em&gt;ユーザーは&lt;em&gt;いつでも&lt;/em&gt;アプリケーション内の&lt;em&gt;どこにでも&lt;/em&gt;移動できます。それは常に正しいことではありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0298961e0cfbc7c30a7134ed224539d2fc943e7c" translate="yes" xml:space="preserve">
          <source>At the moment, any user can navigate anywhere in the application anytime, but sometimes you need to control access to different parts of your app for various reasons. Some of which may include the following:</source>
          <target state="translated">現時点では、どのユーザーもいつでもアプリ内の任意の場所に移動することができますが、さまざまな理由でアプリのさまざまな部分へのアクセスを制御する必要がある場合があります。その中には、次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="6a90472fb52fd14133af6b5ed45a846d07c7f8d7" translate="yes" xml:space="preserve">
          <source>At the moment, the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; retrieves the selected crisis. If the crisis is not found, it navigates back to the crisis list view.</source>
          <target state="translated">現時点では、 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; は選択された危機を取得します。危機が見つからない場合は、危機リストビューに戻ります。</target>
        </trans-unit>
        <trans-unit id="43e554d2ee4258d9a49f0d60c344262753f16233" translate="yes" xml:space="preserve">
          <source>At the moment, the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; retrieves the selected crisis. If the crisis is not found, the router navigates back to the crisis list view.</source>
          <target state="translated">現時点では、 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; は選択された危機を取得します。危機が見つからない場合、ルータは危機リストビューに戻ります。</target>
        </trans-unit>
        <trans-unit id="060de0fabf75a3678ad4f86fea6ae7d325cd7a4c" translate="yes" xml:space="preserve">
          <source>At the moment, the &lt;code&gt;HeroesComponent&lt;/code&gt; displays both the list of heroes and the selected hero's details.</source>
          <target state="translated">現時点では、 &lt;code&gt;HeroesComponent&lt;/code&gt; はヒーローのリストと選択したヒーローの詳細の両方を表示します。</target>
        </trans-unit>
        <trans-unit id="82fe33a58877ad32663a5e6978a18d91edefa44b" translate="yes" xml:space="preserve">
          <source>At the moment, the binding is to an array of strings. In real applications, most bindings are to more specialized objects.</source>
          <target state="translated">現時点では、文字列の配列へのバインディングです。実際のアプリケーションでは、ほとんどのバインディングはより特殊なオブジェクトへのバインディングです。</target>
        </trans-unit>
        <trans-unit id="bbc8860a6469db18738b3c14f8fcb5e7a919ea3c" translate="yes" xml:space="preserve">
          <source>At the moment, the default color&amp;mdash;the color that prevails until the user picks a highlight color&amp;mdash;is hard-coded as &quot;red&quot;. Let the template developer set the default color.</source>
          <target state="translated">現時点では、デフォルトの色（ユーザーがハイライト色を選択するまでの色）は「赤」にハードコーディングされています。テンプレート開発者にデフォルトの色を設定させます。</target>
        </trans-unit>
        <trans-unit id="3b5f7eb081d98212ad7a07dd8a9a528a0bc15a1a" translate="yes" xml:space="preserve">
          <source>At the root level of the &lt;code&gt;schematics/&lt;/code&gt; folder, create a &lt;code&gt;collection.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;schematics/&lt;/code&gt; フォルダーのルートレベルで、 &lt;code&gt;collection.json&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="6dde421309dba3de54f0b4271bbd276260c091cc" translate="yes" xml:space="preserve">
          <source>At the top are the import statements. The next section is where you configure the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; by stating what components and directives belong to it (&lt;code&gt;declarations&lt;/code&gt;) as well as which other modules it uses (&lt;code&gt;imports&lt;/code&gt;). For more information on the structure of an &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, be sure to read &lt;a href=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/a&gt;.</source>
          <target state="translated">一番上はインポート文です。次のセクションでは、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を構成する場所を示します。@ NgModuleが属するコンポーネントとディレクティブ（ &lt;code&gt;declarations&lt;/code&gt; ）と、それが使用する他のモジュール（ &lt;code&gt;imports&lt;/code&gt; ）を記述します。構造の詳細については &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 、必ずお読みください&lt;a href=&quot;bootstrapping&quot;&gt;ブートストラップを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="883786d3cc76dbd1ed79ce5408eeff3078f7cc41" translate="yes" xml:space="preserve">
          <source>At the top level of &lt;code&gt;angular.json&lt;/code&gt;, a few properties configure the workspace, and a &lt;code&gt;projects&lt;/code&gt; section contains the remaining per-project configuration options. CLI defaults set at the workspace level can be overridden by defaults set at the project level, and defaults set at the project level can be overridden on the command line.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; のトップレベルでは、いくつかのプロパティがワークスペースを構成し、 &lt;code&gt;projects&lt;/code&gt; セクションには残りのプロジェクトごとの構成オプションが含まれています。ワークスペースレベルで設定されたCLIのデフォルトは、プロジェクトレベルで設定されたデフォルトでオーバーライドできます。また、プロジェクトレベルで設定されたデフォルトは、コマンドラインでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="0434ec7f407a6a347e8b9b391b94f54a3a508b6b" translate="yes" xml:space="preserve">
          <source>At the top level, paths that begin with &lt;code&gt;/&lt;/code&gt; refer to the root of the application. But child routes &lt;em&gt;extend&lt;/em&gt; the path of the parent route. With each step down the route tree, you add a slash followed by the route path, unless the path is &lt;em&gt;empty&lt;/em&gt;.</source>
          <target state="translated">トップレベルでは、 &lt;code&gt;/&lt;/code&gt; で始まるパスはアプリケーションのルートを参照します。ただし、子ルートは親ルートのパスを&lt;em&gt;拡張&lt;/em&gt;します。ルートツリーを下に移動するたびに、パスが&lt;em&gt;空&lt;/em&gt;でない限り、スラッシュの後にルートパスを追加し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0ca36d7923bc24c8310134d3ad6ad7fd24b95c13" translate="yes" xml:space="preserve">
          <source>At the top level, paths that begin with &lt;code&gt;/&lt;/code&gt; refer to the root of the application. But child routes extend the path of the parent route. With each step down the route tree, you add a slash followed by the route path, unless the path is empty.</source>
          <target state="translated">トップレベルでは、 &lt;code&gt;/&lt;/code&gt; で始まるパスはアプリケーションのルートを参照します。ただし、子ルートは親ルートのパスを拡張します。パスが空でない限り、ルートツリーをステップダウンするたびに、スラッシュとそれに続くルートパスを追加します。</target>
        </trans-unit>
        <trans-unit id="79f1f417baccaeeb34023ad1f4a392c36910fe7d" translate="yes" xml:space="preserve">
          <source>At the top of the file, add the following import statement.</source>
          <target state="translated">ファイルの先頭に、以下のインポート文を追加します。</target>
        </trans-unit>
        <trans-unit id="a3945a27c64e5bd8255624f2566551f7cf697583" translate="yes" xml:space="preserve">
          <source>At this point, Visual Studio is ready. It&amp;rsquo;s a good idea to close Visual Studio and restart it to make sure everything is clean.</source>
          <target state="translated">これで、Visual Studioの準備が整いました。すべてがクリーンであることを確認するために、Visual Studioを閉じて再起動することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="57bf3ff8bf6006519207c4fc0ce314056ecd80b1" translate="yes" xml:space="preserve">
          <source>At this point, all application routes are in place.</source>
          <target state="translated">この時点で、すべての申請ルートが揃っています。</target>
        </trans-unit>
        <trans-unit id="d94328cb8894f9ca14552461df3b4d75737edab8" translate="yes" xml:space="preserve">
          <source>At this point, users can put items in the cart by clicking &quot;Buy&quot;, but they can't yet see their cart.</source>
          <target state="translated">この時点では、ユーザーは「購入」をクリックしてカートに商品を入れることはできますが、まだカートを見ることはできません。</target>
        </trans-unit>
        <trans-unit id="8bd123a0eac56e2896e3fe55bff44567829141a2" translate="yes" xml:space="preserve">
          <source>At this point, you can switch the two components to use the new service instead of the old one. While you &lt;code&gt;$inject&lt;/code&gt; it as the downgraded &lt;code&gt;phone&lt;/code&gt; factory, it's really an instance of the &lt;code&gt;Phone&lt;/code&gt; class and you annotate its type accordingly:</source>
          <target state="translated">この時点で、2つのコンポーネントを切り替えて、古いサービスの代わりに新しいサービスを使用できます。ダウングレードした &lt;code&gt;phone&lt;/code&gt; ファクトリーとして &lt;code&gt;$inject&lt;/code&gt; しますが、これは実際には &lt;code&gt;Phone&lt;/code&gt; クラスのインスタンスであり、それに応じてその型に注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="57733aea6c15b3f06327309b16c1e0c4da909346" translate="yes" xml:space="preserve">
          <source>At this point, you have a basic application that uses Angular's routing feature to change what components the user can see based on the URL address. You have extended these features to include a redirect, as well as a wildcard route to display a custom 404 page.</source>
          <target state="translated">この時点では、Angularのルーティング機能を使ってURLアドレスに基づいてユーザーが表示できるコンポーネントを変更する基本的なアプリケーションができています。これらの機能を拡張して、リダイレクトやカスタム404ページを表示するためのワイルドカードルートを追加しました。</target>
        </trans-unit>
        <trans-unit id="8ec1691c150b8de77b5a17dca474a04f2c0bb6ff" translate="yes" xml:space="preserve">
          <source>At this point, you have defined two routes for your application. However, your application still has both the &lt;code&gt;crisis-list&lt;/code&gt; and &lt;code&gt;heroes-list&lt;/code&gt; components hard-coded in your &lt;code&gt;app.component.html&lt;/code&gt; template. For your routes to work, you need to update your template to dynamically load a component based on the URL path.</source>
          <target state="translated">この時点で、アプリケーションに2つのルートを定義しました。ただし、アプリケーションには、 &lt;code&gt;app.component.html&lt;/code&gt; テンプレートにハードコードされた &lt;code&gt;crisis-list&lt;/code&gt; &lt;code&gt;heroes-list&lt;/code&gt; コンポーネントとheroes-listコンポーネントの両方が含まれています。ルートを機能させるには、テンプレートを更新して、URLパスに基づいてコンポーネントを動的にロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="86a28f831b9d378b2f9f53fe3f306868566a3b98" translate="yes" xml:space="preserve">
          <source>At this point, you've replaced all AngularJS application components with their Angular counterparts, even though you're still serving them from the AngularJS router.</source>
          <target state="translated">この時点で、すべてのAngularJSアプリケーションコンポーネントをAngularJSルーターから提供しているにもかかわらず、すべてのAngularJSアプリケーションコンポーネントをAngular対応のものに置き換えたことになります。</target>
        </trans-unit>
        <trans-unit id="881d0e72fd3eb18bc7f9bce749c2a557083835f3" translate="yes" xml:space="preserve">
          <source>Attaches a view so that it will be dirty checked. The view will be automatically detached when it is destroyed. This will throw if the view is already attached to a ViewContainer.</source>
          <target state="translated">ビューがダーティチェックされるようにビューをアタッチします。ビューが破棄されると自動的に切り離されます。ビューが既にViewContainerにアタッチされている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="b2a054d9997fa913c6ff1d1261a85f354b37c1d2" translate="yes" xml:space="preserve">
          <source>Attribute (the exception)</source>
          <target state="translated">属性(例外</target>
        </trans-unit>
        <trans-unit id="7706e49eec94755bbb4164b09d500329ccb21352" translate="yes" xml:space="preserve">
          <source>Attribute Directive Testing</source>
          <target state="translated">属性指令のテスト</target>
        </trans-unit>
        <trans-unit id="55c1659b17ee19bef5fd528a73b2941e917a57a8" translate="yes" xml:space="preserve">
          <source>Attribute Directives</source>
          <target state="translated">属性ディレクティブ</target>
        </trans-unit>
        <trans-unit id="c334bb508016d6901c14a951eec64345dab38157" translate="yes" xml:space="preserve">
          <source>Attribute binding</source>
          <target state="translated">属性バインディング</target>
        </trans-unit>
        <trans-unit id="688c7d0ab88d8b7d6e839cac9ec8e4a8393f65d2" translate="yes" xml:space="preserve">
          <source>Attribute binding in Angular helps you set values for attributes directly. With attribute binding, you can improve accessibility, style your application dynamically, and manage multiple CSS classes or styles simultaneously.</source>
          <target state="translated">Angularの属性バインディングは、属性に直接値を設定するのに役立ちます。属性バインディングを使うと、アクセシビリティを向上させたり、アプリケーションのスタイルを動的に変更したり、複数のCSSクラスやスタイルを同時に管理したりすることができます。</target>
        </trans-unit>
        <trans-unit id="29ab6806b510c7b11c4ab616151d71b7f958362f" translate="yes" xml:space="preserve">
          <source>Attribute binding syntax resembles &lt;a href=&quot;property-binding&quot;&gt;property binding&lt;/a&gt;, but instead of an element property between brackets, you precede the name of the attribute with the prefix &lt;code&gt;attr&lt;/code&gt;, followed by a dot. Then, you set the attribute value with an expression that resolves to a string.</source>
          <target state="translated">属性バインディングの構文は&lt;a href=&quot;property-binding&quot;&gt;プロパティバインディング&lt;/a&gt;に似ていますが、角かっこで囲まれた要素プロパティの代わりに、属性名の前に接頭辞 &lt;code&gt;attr&lt;/code&gt; を付け、その後にドットを付けます。次に、文字列に解決される式を使用して属性値を設定します。</target>
        </trans-unit>
        <trans-unit id="d9b950dd914b91e0fb66d15ece878e4a67694934" translate="yes" xml:space="preserve">
          <source>Attribute binding syntax resembles property binding, but instead of an element property between brackets, start with the prefix &lt;code&gt;attr&lt;/code&gt;, followed by a dot (&lt;code&gt;.&lt;/code&gt;), and the name of the attribute. You then set the attribute value, using an expression that resolves to a string, or remove the attribute when the expression resolves to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">属性バインディング構文はプロパティバインディングに似ていますが、大括弧の間の要素プロパティではなく、接頭辞 &lt;code&gt;attr&lt;/code&gt; で始まり、その後にドット（ &lt;code&gt;.&lt;/code&gt; ）と属性の名前が続きます。次に、文字列に解決される式を使用して属性値を設定するか、式が &lt;code&gt;null&lt;/code&gt; に解決されるときに属性を削除します。</target>
        </trans-unit>
        <trans-unit id="279ab89039ba64c6b0da183f3b7147bf2cea8ccf" translate="yes" xml:space="preserve">
          <source>Attribute directives</source>
          <target state="translated">属性ディレクティブ</target>
        </trans-unit>
        <trans-unit id="5d12ef2a9da048d322efb7149e52d65f30b28dfa" translate="yes" xml:space="preserve">
          <source>Attribute directives listen to and modify the behavior of other HTML elements, attributes, properties, and components. You usually apply them to elements as if they were HTML attributes, hence the name.</source>
          <target state="translated">属性ディレクティブは、他のHTML要素、属性、プロパティ、コンポーネントの動作を聞いて変更します。通常は、HTML の属性であるかのように要素に適用されます。</target>
        </trans-unit>
        <trans-unit id="20513020a514d725b1470eb9d9c5e82080471bcc" translate="yes" xml:space="preserve">
          <source>Attribute directives&amp;mdash;change the appearance or behavior of an element, component, or another directive.</source>
          <target state="translated">属性ディレクティブ-要素、コンポーネント、または別のディレクティブの外観または動作を変更します。</target>
        </trans-unit>
        <trans-unit id="8ea298a1d48c262be17e654c22323e471414de8a" translate="yes" xml:space="preserve">
          <source>Attribute, class, and style bindings</source>
          <target state="translated">属性・クラス・スタイルバインディング</target>
        </trans-unit>
        <trans-unit id="1b88cfba520774bf5bca05743d6b49bf17294180" translate="yes" xml:space="preserve">
          <source>Attribute: &lt;code&gt;&amp;lt;comp name=&quot;World&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">属性： &lt;code&gt;&amp;lt;comp name=&quot;World&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba9f41e65786ab28a5cc7739fa9524275b749e4a" translate="yes" xml:space="preserve">
          <source>Auditing Angular applications</source>
          <target state="translated">Angularアプリケーションの監査</target>
        </trans-unit>
        <trans-unit id="2d71759f1ce5e34ba7c6cb30dce5f95b0d00e1df" translate="yes" xml:space="preserve">
          <source>Aug 06, 2020</source>
          <target state="translated">2020年08月06日</target>
        </trans-unit>
        <trans-unit id="6fea604e02e90409b49b69fe833ca2813b27ee65" translate="yes" xml:space="preserve">
          <source>Aug 06, 2021</source>
          <target state="translated">2021年08月06日</target>
        </trans-unit>
        <trans-unit id="ddf0bb467a9afb82ce8505717567f73467a792d6" translate="yes" xml:space="preserve">
          <source>Augmenting native elements</source>
          <target state="translated">ネイティブ要素の拡張</target>
        </trans-unit>
        <trans-unit id="a16633a9eb6827787eb85e86d22dfda752672360" translate="yes" xml:space="preserve">
          <source>Authenticate with &lt;code&gt;AuthGuard&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AuthGuard&lt;/code&gt; で認証する</target>
        </trans-unit>
        <trans-unit id="66e15602646e8c5a159e78f8d9953cf08b4cdadb" translate="yes" xml:space="preserve">
          <source>Authentication/authorization</source>
          <target state="translated">Authentication/authorization</target>
        </trans-unit>
        <trans-unit id="0efd1e55177485c760611f1570d33e1b5e47d03a" translate="yes" xml:space="preserve">
          <source>Authoring Schematics</source>
          <target state="translated">オーサリング回路図</target>
        </trans-unit>
        <trans-unit id="fe7fe41ba1e2091f0bf1b06a8e056db0a0210d00" translate="yes" xml:space="preserve">
          <source>Authoring schematics</source>
          <target state="translated">オーサリング回路図</target>
        </trans-unit>
        <trans-unit id="92b94f5df6479e29b25d986076b0ee811c9a3f18" translate="yes" xml:space="preserve">
          <source>Auto-styling can be used to define a state that depends on layout or other environmental factors.</source>
          <target state="translated">オートスタイリングは、レイアウトなどの環境に依存した状態を定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="a4696360f61ce7b39a54fa976acbcf3c37e4dd61" translate="yes" xml:space="preserve">
          <source>Autocompletion</source>
          <target state="translated">Autocompletion</target>
        </trans-unit>
        <trans-unit id="a8576cba49fa626f39a56bc18330709f71819814" translate="yes" xml:space="preserve">
          <source>Autocompletion can speed up your development time by providing you with contextual possibilities and hints as you type. This example shows autocomplete in an interpolation. As you type it out, you can hit tab to complete.</source>
          <target state="translated">オートコンプリートは、入力時にコンテキストの可能性やヒントを提供することで、開発時間を短縮することができます。この例では、補間におけるオートコンプリートを示しています。入力しながらタブを押すとオートコンプリートが完了します。</target>
        </trans-unit>
        <trans-unit id="2cc042e9fe579c82af6f851ae39215cc25b9ea23" translate="yes" xml:space="preserve">
          <source>Automatic change detection</source>
          <target state="translated">自動変更検出</target>
        </trans-unit>
        <trans-unit id="6eba8d49fe5d13d1fca5b019f42b110fe985ad30" translate="yes" xml:space="preserve">
          <source>Automatic deployment with the CLI</source>
          <target state="translated">CLIを使った自動デプロイメント</target>
        </trans-unit>
        <trans-unit id="8645d08355f818059391b51cb42d575086fb447b" translate="yes" xml:space="preserve">
          <source>Automatic property calculation with wildcards</source>
          <target state="translated">ワイルドカードによるプロパティの自動計算</target>
        </trans-unit>
        <trans-unit id="ba24e92f551ffc6d70286e830ff60471df994992" translate="yes" xml:space="preserve">
          <source>Available and activated updates</source>
          <target state="translated">利用可能なアップデートと有効化されたアップデート</target>
        </trans-unit>
        <trans-unit id="6b9113ae3a57f7a0dceaa44494d0a520cabe3576" translate="yes" xml:space="preserve">
          <source>Avoid aliasing &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inputs&lt;/code&gt; と &lt;code&gt;outputs&lt;/code&gt; エイリアシングを回避する</target>
        </trans-unit>
        <trans-unit id="35d10846ee5de515ce9531aa71d75239dda439f0" translate="yes" xml:space="preserve">
          <source>Avoid referring to enums with complicated initializers or computed properties.</source>
          <target state="translated">複雑なイニシャライザや計算されたプロパティを持つ列挙型を参照しないようにします。</target>
        </trans-unit>
        <trans-unit id="a4763469397ba3b0cc9e116ced71e140704d303a" translate="yes" xml:space="preserve">
          <source>Avoid side effects</source>
          <target state="translated">副作用を避ける</target>
        </trans-unit>
        <trans-unit id="8d9ef20f693ba88acc4b2ad8c040f990e01cea96" translate="yes" xml:space="preserve">
          <source>Avoid this error by sticking to the compiler's &lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;restricted expression syntax&lt;/a&gt; when writing Angular metadata and be wary of new or unusual TypeScript features.</source>
          <target state="translated">Angularメタデータを書き込むときにコンパイラの&lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;制限された式の構文&lt;/a&gt;を守ることでこのエラーを回避し、新しいまたは異常なTypeScript機能に注意してください。</target>
        </trans-unit>
        <trans-unit id="6f85b2bfcbb0fa2f75065b9806f3edc8026fee56" translate="yes" xml:space="preserve">
          <source>Azure</source>
          <target state="translated">Azure</target>
        </trans-unit>
        <trans-unit id="5f5f6d9b2535d125e7ae46352acf0bb3d116f1ee" translate="yes" xml:space="preserve">
          <source>B, BB &amp;amp; BBB</source>
          <target state="translated">B、BB、BBB</target>
        </trans-unit>
        <trans-unit id="4c55e5e5fc2235cc8c201e69a345f7fab3fb46fa" translate="yes" xml:space="preserve">
          <source>BBBB</source>
          <target state="translated">BBBB</target>
        </trans-unit>
        <trans-unit id="4601044687c40f1a23385d338d02f9fc7f5d512d" translate="yes" xml:space="preserve">
          <source>BBBBB</source>
          <target state="translated">BBBBB</target>
        </trans-unit>
        <trans-unit id="ebdcf0a202669a291a7d498007aa30cf730e825d" translate="yes" xml:space="preserve">
          <source>BEFORE_APP_SERIALIZED</source>
          <target state="translated">BEFORE_APP_SERIALIZED</target>
        </trans-unit>
        <trans-unit id="75b1c4c9960810fdc4641aa8201594f9d464b4ce" translate="yes" xml:space="preserve">
          <source>BY default, the value is randomly generated and assigned to the application by Angular. To provide a custom ID value, use a DI provider  to configure the root &lt;a href=&quot;injector&quot;&gt;&lt;code&gt;Injector&lt;/code&gt;&lt;/a&gt; that uses this token.</source>
          <target state="translated">デフォルトでは、値はランダムに生成され、Angularによってアプリケーションに割り当てられます。カスタムID値を提供するには、DIプロバイダーを使用して、このトークンを使用するルート&lt;a href=&quot;injector&quot;&gt; &lt;code&gt;Injector&lt;/code&gt; &lt;/a&gt;を構成します。</target>
        </trans-unit>
        <trans-unit id="2cb09bf3a8782ed3fdbd196ecf0ac3ab8e92b47b" translate="yes" xml:space="preserve">
          <source>Back in the &quot;Heroes&quot; workflow, the app accepts every change to a hero immediately without hesitation or validation.</source>
          <target state="translated">ヒーロー」のワークフローに戻ると、アプリはヒーローへのすべての変更を躊躇や検証なしにすぐに受け入れます。</target>
        </trans-unit>
        <trans-unit id="3ebd1dea933ed2810c5164716b5f9c9a32c50825" translate="yes" xml:space="preserve">
          <source>Back in the &quot;Heroes&quot; workflow, the app accepts every change to a hero immediately without validation.</source>
          <target state="translated">Heroes」のワークフローに戻ると、アプリは検証なしですぐにヒーローへのすべての変更を受け入れます。</target>
        </trans-unit>
        <trans-unit id="5e754f85ea186e7a88cea5b09eb25dfdcf33a1ed" translate="yes" xml:space="preserve">
          <source>Back in the &lt;code&gt;AppComponent&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; token from the &lt;code&gt;@angular/router&lt;/code&gt; package and the &lt;code&gt;slideInAnimation&lt;/code&gt; from &lt;code&gt;'./animations.ts&lt;/code&gt;.</source>
          <target state="translated">バックで &lt;code&gt;AppComponent&lt;/code&gt; 、インポート &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; のからトークンを &lt;code&gt;@angular/router&lt;/code&gt; パッケージと &lt;code&gt;slideInAnimation&lt;/code&gt; から &lt;code&gt;'./animations.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9c883a905731bc3ab1e5b1797dcc17a576c4565" translate="yes" xml:space="preserve">
          <source>Back to top</source>
          <target state="translated">トップへ戻る</target>
        </trans-unit>
        <trans-unit id="38d71168a65ccaba07740a310c00c10c1cf04c0f" translate="yes" xml:space="preserve">
          <source>Background processing using web workers</source>
          <target state="translated">ウェブワーカーを使ったバックグラウンド処理</target>
        </trans-unit>
        <trans-unit id="f4290a336cc02b12946c3c89719cd2e7d3a69574" translate="yes" xml:space="preserve">
          <source>Backward compatibility with CSS grid</source>
          <target state="translated">CSSグリッドとの下位互換性</target>
        </trans-unit>
        <trans-unit id="f080bd1737639dbd750a023ba99fa346cf943a9f" translate="yes" xml:space="preserve">
          <source>Backward compatibility with Lighthouse</source>
          <target state="translated">Lighthouseとの下位互換性</target>
        </trans-unit>
        <trans-unit id="3578397cf875eb735f9e4ec895bfefcd6ea0e18c" translate="yes" xml:space="preserve">
          <source>Base URL for protractor to connect to.</source>
          <target state="translated">分度器が接続するためのベースURL。</target>
        </trans-unit>
        <trans-unit id="69488c399a2c06d8cc98c0a654ba1be00ce481f8" translate="yes" xml:space="preserve">
          <source>Base class for Angular Views, provides change detection functionality. A change-detection tree collects all views that are to be checked for changes. Use the methods to add and remove views from the tree, initiate change-detection, and explicitly mark views as &lt;em&gt;dirty&lt;/em&gt;, meaning that they have changed and need to be rerendered.</source>
          <target state="translated">Angular Viewsの基本クラスで、変更検出機能を提供します。変更検出ツリーは、変更を確認するすべてのビューを収集します。メソッドを使用して、ビューをツリーに追加およびツリーから削除し、変更検出を開始し、ビューを&lt;em&gt;ダーティ&lt;/em&gt;として明示的にマークします。これは、ビューが変更され、再レンダリングする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="dc5f559c4c1d7d90f2ea8b32a7e1b1c62788bfb3" translate="yes" xml:space="preserve">
          <source>Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component with &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt;. Use the resulting &lt;code&gt;ComponentFactory.create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">コンポーネントを動的に作成できるファクトリの基本クラス。 &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt; を使用して、特定のタイプのコンポーネントのファクトリをインスタンス化します。結果の &lt;code&gt;ComponentFactory.create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="873cd738027a52aee557333ae0d35f162d826794" translate="yes" xml:space="preserve">
          <source>Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component with &lt;code&gt;&lt;a href=&quot;core&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt;. Use the resulting &lt;code&gt;ComponentFactory.create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">コンポーネントを動的に作成できるファクトリの基本クラス。 &lt;code&gt;&lt;a href=&quot;core&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt; を使用して、特定のタイプのコンポーネントのファクトリをインスタンス化します。結果の &lt;code&gt;ComponentFactory.create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="3dfe758a4a0fb105b1876786c681bb3f3bbe104e" translate="yes" xml:space="preserve">
          <source>Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component with &lt;code&gt;resolveComponentFactory()&lt;/code&gt;. Use the resulting &lt;code&gt;ComponentFactory.create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">コンポーネントを動的に作成できるファクトリの基本クラス。 &lt;code&gt;resolveComponentFactory()&lt;/code&gt; を使用して、特定のタイプのコンポーネントのファクトリをインスタンス化します。結果の &lt;code&gt;ComponentFactory.create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="06b6cf30fccd592a4f7ad01aa440cf8322efc7d5" translate="yes" xml:space="preserve">
          <source>Base class for both &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http/httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;http/httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; の両方の基本クラス。</target>
        </trans-unit>
        <trans-unit id="b72bab4ba60f36cf05e4cf503864db197ec58d1a" translate="yes" xml:space="preserve">
          <source>Base class for both &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; の両方の基本クラス。</target>
        </trans-unit>
        <trans-unit id="d87cd5ed68b6935afddd679162562d7c105b48bf" translate="yes" xml:space="preserve">
          <source>Base class for control directives.</source>
          <target state="translated">制御ディレクティブの基底クラス。</target>
        </trans-unit>
        <trans-unit id="7c8bf5beced837666a3fcfff47faf58811883c9f" translate="yes" xml:space="preserve">
          <source>Base class for query metadata.</source>
          <target state="translated">クエリメタデータの基底クラス。</target>
        </trans-unit>
        <trans-unit id="635e9ee2a4c721f49b71cfa0e21b4e6c42eeb839" translate="yes" xml:space="preserve">
          <source>Base class that provides change detection functionality. A change-detection tree collects all views that are to be checked for changes. Use the methods to add and remove views from the tree, initiate change-detection, and explicitly mark views as &lt;em&gt;dirty&lt;/em&gt;, meaning that they have changed and need to be re-rendered.</source>
          <target state="translated">変更検出機能を提供する基本クラス。変更検出ツリーは、変更をチェックするすべてのビューを収集します。メソッドを使用して、ツリーにビューを追加および削除し、変更検出を開始し、ビューを&lt;em&gt;ダーティ&lt;/em&gt;として明示的にマークします。これは、ビューが変更されており、再レンダリングする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="ae3542392d51807f46bde8565dbb42d8fcc3c899" translate="yes" xml:space="preserve">
          <source>Base for animation data structures.</source>
          <target state="translated">アニメーションデータ構造体のベース。</target>
        </trans-unit>
        <trans-unit id="332796bde2e92bb79ea8d8b003db847231db277a" translate="yes" xml:space="preserve">
          <source>Base for events the router goes through, as opposed to events tied to a specific route. Fired one time for any given navigation.</source>
          <target state="translated">ルータが通過するイベントのベース。特定のルートに結び付けられたイベントとは対照的に、ルータが通過するイベントのベース。任意のナビゲーションに対して一度だけ発射されます。</target>
        </trans-unit>
        <trans-unit id="dc0e3cb0c30a7fd999cfb13abd9ca5e0359899bd" translate="yes" xml:space="preserve">
          <source>Base interface for progress events.</source>
          <target state="translated">進捗イベントのための基本インターフェース。</target>
        </trans-unit>
        <trans-unit id="19c642b2c76cffbbba7c48b8234e3965239d1723" translate="yes" xml:space="preserve">
          <source>Base url for the application being built.</source>
          <target state="translated">構築されるアプリケーションのベースURL。</target>
        </trans-unit>
        <trans-unit id="c15b8155598bbd0eb4ddda108efeed6d3faaa586" translate="yes" xml:space="preserve">
          <source>Base your decision on your comfort level. Use a flatter structure until there is an obvious value to creating a new folder.</source>
          <target state="translated">あなたの快適さのレベルに基づいて決定してください。新しいフォルダを作成することに明らかな価値があるまでは、より平坦な構造を使用してください。</target>
        </trans-unit>
        <trans-unit id="3076d2f98148e70924e7e811bb728bbdd8a7383a" translate="yes" xml:space="preserve">
          <source>BaseRouteReuseStrategy</source>
          <target state="translated">BaseRouteReuseStrategy</target>
        </trans-unit>
        <trans-unit id="457c8d9bebfca77b21842bdcc7ca17bb844fb9ac" translate="yes" xml:space="preserve">
          <source>Based on the &lt;code&gt;--target&lt;/code&gt;, TypeScript adds &lt;em&gt;additional&lt;/em&gt; ambient declarations like &lt;code&gt;Promise&lt;/code&gt; if the target is &lt;code&gt;es6&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--target&lt;/code&gt; に基づいて、ターゲットが &lt;code&gt;es6&lt;/code&gt; の場合、TypeScriptは &lt;code&gt;Promise&lt;/code&gt; などの&lt;em&gt;追加の&lt;/em&gt;アンビエント宣言を追加します。</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="04e8ea10d9114654af829cd500f25ab6581dd803" translate="yes" xml:space="preserve">
          <source>Basic deployment to a remote server</source>
          <target state="translated">リモートサーバーへの基本的な展開</target>
        </trans-unit>
        <trans-unit id="063ab1d912949e267d46aeb8da49267a312d5fc8" translate="yes" xml:space="preserve">
          <source>Basic knowledge of &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;reactive-forms&quot;&gt;反応型の&lt;/a&gt;基本的な知識。</target>
        </trans-unit>
        <trans-unit id="700ed102a28fe8fc4eddc583c6a8a0bbe5b01d1d" translate="yes" xml:space="preserve">
          <source>Basic mode</source>
          <target state="translated">基本モード</target>
        </trans-unit>
        <trans-unit id="653ae9d4bc08db3838f9c6c61951682ba7657958" translate="yes" xml:space="preserve">
          <source>Basic usage and terms</source>
          <target state="translated">基本的な使い方と用語</target>
        </trans-unit>
        <trans-unit id="189ceeabec801d69e58e27b3296832fd339cfd5c" translate="yes" xml:space="preserve">
          <source>Basic workflow</source>
          <target state="translated">基本的なワークフロー</target>
        </trans-unit>
        <trans-unit id="a35274a9de216b3996a2a6b71246c15e2bcf3d04" translate="yes" xml:space="preserve">
          <source>Basics of components</source>
          <target state="translated">コンポーネントの基本</target>
        </trans-unit>
        <trans-unit id="fc01111eade2759f3e275f9731fae544b98ca2d8" translate="yes" xml:space="preserve">
          <source>Basics of either &lt;a href=&quot;forms&quot;&gt;Template-driven Forms&lt;/a&gt; or &lt;a href=&quot;reactive-forms&quot;&gt;Reactive Forms&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;forms&quot;&gt;テンプレート駆動型フォーム&lt;/a&gt;または&lt;a href=&quot;reactive-forms&quot;&gt;リアクティブフォーム&lt;/a&gt;のいずれかの基本。</target>
        </trans-unit>
        <trans-unit id="e61b0285152a2eae841cd8ebb75ab77a99b10a1d" translate="yes" xml:space="preserve">
          <source>Basics of templates</source>
          <target state="translated">テンプレートの基本</target>
        </trans-unit>
        <trans-unit id="4815228259a0751e18e68db23b416c479a8fcde2" translate="yes" xml:space="preserve">
          <source>Basics of testing components</source>
          <target state="translated">テスト部品の基本</target>
        </trans-unit>
        <trans-unit id="21db9140fd5c55af9b7daf2fcc86cdbecd519ae0" translate="yes" xml:space="preserve">
          <source>Basics of two-way binding</source>
          <target state="translated">双方向バインディングの基本</target>
        </trans-unit>
        <trans-unit id="1276e18d03ecc54657c7ab3b6a5e107e8237506b" translate="yes" xml:space="preserve">
          <source>Basics wrap up</source>
          <target state="translated">基本を包み込む</target>
        </trans-unit>
        <trans-unit id="10297ac57954a12cf832e6d7cca38640fa142a64" translate="yes" xml:space="preserve">
          <source>Bazel builder and schematics</source>
          <target state="translated">バゼルビルダーと回路図</target>
        </trans-unit>
        <trans-unit id="0fd52192ef4a4a502c98dddd59b2a553be18b512" translate="yes" xml:space="preserve">
          <source>Bazel builder and schematics were introduced in Angular Labs to let users try out Bazel without having to manage Bazel version and BUILD files. This feature has been deprecated. For more information, please refer to the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/bazel/src/schematics/README.md&quot;&gt;migration doc&lt;/a&gt;.</source>
          <target state="translated">Bazelビルダーと回路図がAngularLabsに導入され、ユーザーがBazelバージョンとBUILDファイルを管理しなくてもBazelを試すことができるようになりました。この機能は非推奨になりました。詳細については、&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/bazel/src/schematics/README.md&quot;&gt;移行ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b910aa222ba05ed1cabb9a85eecf07e8960306d" translate="yes" xml:space="preserve">
          <source>Be explicit and implement the &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface with a type of &lt;code&gt;Crisis&lt;/code&gt;.</source>
          <target state="translated">明示的にし、 &lt;code&gt;Crisis&lt;/code&gt; のタイプで &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; インターフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="381c08b859c05a623a77795b6faef27c11b8be2b" translate="yes" xml:space="preserve">
          <source>Be explicit. Implement the &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface with a type of &lt;code&gt;Crisis&lt;/code&gt;.</source>
          <target state="translated">明確にする。 &lt;code&gt;Crisis&lt;/code&gt; タイプの &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; インターフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="1bf79b7186da202dc35b6c9fdce5e4c57c7d1a68" translate="yes" xml:space="preserve">
          <source>Be sure to check that the context exists and throw the appropriate error.</source>
          <target state="translated">コンテキストが存在することを確認し、適切なエラーを投げるようにしてください。</target>
        </trans-unit>
        <trans-unit id="795a90d1a8ee5cbdff797b42bb7461a0906585d9" translate="yes" xml:space="preserve">
          <source>Be sure to create module components as children of this module's top component.</source>
          <target state="translated">このモジュールのトップコンポーネントの子としてモジュールコンポーネントを作成するようにしてください。</target>
        </trans-unit>
        <trans-unit id="e61c47ca4bb6fa8b383f353cab783005cfd6efe8" translate="yes" xml:space="preserve">
          <source>Be sure to define custom IDs that are unique. If you use the same ID for two different text elements, the extraction tool extracts only the first one, and Angular uses its translation in place of both original text elements.</source>
          <target state="translated">カスタムIDは必ずユニークなものを定義してください。2つの異なるテキスト要素に同じIDを使用すると、抽出ツールは最初の方だけを抽出し、Angularは両方の元のテキスト要素の代わりにその翻訳を使用します。</target>
        </trans-unit>
        <trans-unit id="7d5bf806d7d027af1dddb36dc70adddb33b479b7" translate="yes" xml:space="preserve">
          <source>Be sure to define custom ids that are unique. If you use the same id for two different text messages, only the first one is extracted, and its translation is used in place of both original text messages.</source>
          <target state="translated">必ず一意のカスタム ID を定義してください。2つの異なるテキストメッセージに同じIDを使用した場合、最初のものだけが抽出され、その翻訳が両方の元のテキストメッセージの代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="d49c7d22f7883e13f3cefcd14247137e8f69ed59" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; is optional, the element can appear in the template in its minimal form, &lt;code&gt;&amp;lt;lib-card&amp;gt;&amp;lt;/lib-card&amp;gt;&lt;/code&gt;. In this case, &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; is not used and you would expect it to be tree-shaken, but that is not what happens. This is because &lt;code&gt;LibCardComponent&lt;/code&gt; actually contains two references to the &lt;code&gt;LibHeaderComponent&lt;/code&gt;.</source>
          <target state="translated">ので &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; オプションであり、要素は、その最小の形でテンプレートに表示できる &lt;code&gt;&amp;lt;lib-card&amp;gt;&amp;lt;/lib-card&amp;gt;&lt;/code&gt; 。この場合、 &lt;code&gt;&amp;lt;lib-header&amp;gt;&lt;/code&gt; は使用されず、ツリーが揺れることが予想されますが、それは起こりません。これは、 &lt;code&gt;LibCardComponent&lt;/code&gt; に実際には &lt;code&gt;LibHeaderComponent&lt;/code&gt; への2つの参照が含まれているためです。</target>
        </trans-unit>
        <trans-unit id="3cb44eeb12ea39170bc603c6fb44cf6110a2d9a2" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;HeroDetailComponent&lt;/code&gt; is an Angular component, you must also add it to the &lt;code&gt;declarations&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">ので &lt;code&gt;HeroDetailComponent&lt;/code&gt; が角度成分である、あなたもそれを追加する必要があります &lt;code&gt;declarations&lt;/code&gt; で &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a71b98122cf3ec666c4be311886fe1a144f93c35" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;compileComponents&lt;/code&gt; is asynchronous, it uses the &lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;&lt;code&gt;waitForAsync&lt;/code&gt;&lt;/a&gt; utility function imported from &lt;code&gt;@angular/core/testing&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compileComponents&lt;/code&gt; は非同期であるため、 &lt;code&gt;@angular/core/testing&lt;/code&gt; からインポートされた&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt; &lt;code&gt;waitForAsync&lt;/code&gt; &lt;/a&gt;ユーティリティ関数を使用します。</target>
        </trans-unit>
        <trans-unit id="71459b0877ea037c4247f79f200b0627331cfde5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;ng serve&lt;/code&gt; does not work with service workers, you must use a separate HTTP server to test your project locally. You can use any HTTP server. The example below uses the &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt; package from npm. To reduce the possibility of conflicts and avoid serving stale content, test on a dedicated port and disable caching.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; はService Workerでは機能しないため、プロジェクトをローカルでテストするには、別のHTTPサーバーを使用する必要があります。任意のHTTPサーバーを使用できます。以下の例では、npmの&lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt;パッケージを使用しています。競合の可能性を減らし、古いコンテンツの提供を回避するには、専用ポートでテストし、キャッシュを無効にします。</target>
        </trans-unit>
        <trans-unit id="342f36e72319b97e67057da06eb0202d32290ccf" translate="yes" xml:space="preserve">
          <source>Because Angular applications are mostly written in TypeScript, you will typically know when a variable is an observable. Although the Angular framework does not enforce a naming convention for observables, you will often see observables named with a trailing &amp;ldquo;$&amp;rdquo; sign.</source>
          <target state="translated">AngularアプリケーションはほとんどTypeScriptで記述されているため、通常、変数が監視可能であることがわかります。Angularフレームワークはオブザーバブルの命名規則を強制しませんが、末尾に「$」記号が付いたオブザーバブルが表示されることがよくあります。</target>
        </trans-unit>
        <trans-unit id="80706cd8d34e9df3aebbbfc71eb5c40862507ed2" translate="yes" xml:space="preserve">
          <source>Because Bazel constructs a graph out of your targets, you can find lots of useful information.</source>
          <target state="translated">バゼルはあなたのターゲットからグラフを構築するので、多くの有益な情報を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="3244368a86d6561aba583792cc03eff7eff140ec" translate="yes" xml:space="preserve">
          <source>Because a Universal app doesn't execute in the browser, some of the browser APIs and capabilities may be missing on the server.</source>
          <target state="translated">ユニバーサルアプリはブラウザで実行されないため、ブラウザAPIと機能の一部がサーバー上にない可能性があります。</target>
        </trans-unit>
        <trans-unit id="1f4be1daa693b107a5635c119a5bcab95b440545" translate="yes" xml:space="preserve">
          <source>Because directives and pipes appear in component templates, the Angular compiler incorporates them into compiled component code too.</source>
          <target state="translated">ディレクティブとパイプはコンポーネントテンプレートに表示されるので、Angularコンパイラはそれらをコンパイルしたコンポーネントコードにも組み込みます。</target>
        </trans-unit>
        <trans-unit id="f73de75658f57ce63ea356bf33e3b7801f62fafb" translate="yes" xml:space="preserve">
          <source>Because each service method returns a different kind of &lt;code&gt;Observable&lt;/code&gt; result, &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; takes a type parameter so it can return the safe value as the type that the app expects.</source>
          <target state="translated">各サービスメソッドは異なる種類の &lt;code&gt;Observable&lt;/code&gt; 結果を返すため、 &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; は型パラメーターを取り、アプリが期待する型として安全な値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="6ccabadf6eacc3ed0298a9f1066397f953b77131" translate="yes" xml:space="preserve">
          <source>Because each service method returns a different kind of &lt;code&gt;Observable&lt;/code&gt; result, &lt;code&gt;handleError()&lt;/code&gt; takes a type parameter so it can return the safe value as the type that the app expects.</source>
          <target state="translated">各サービスメソッドは異なる種類の &lt;code&gt;Observable&lt;/code&gt; 結果を返すため、 &lt;code&gt;handleError()&lt;/code&gt; はtypeパラメーターを受け取り、アプリが期待する型として安全な値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="46939d4d0ba537e542bde8f87ab09af4cea60a09" translate="yes" xml:space="preserve">
          <source>Because interceptors are (optional) dependencies of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service, you must provide them in the same injector (or a parent of the injector) that provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;. Interceptors provided &lt;em&gt;after&lt;/em&gt; DI creates the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; are ignored.</source>
          <target state="translated">インターセプターは &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスの（オプションの）依存関係であるため、HttpClientを提供するのと同じインジェクター（またはインジェクターの親）でインターセプターを提供する必要があり &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。DIが &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を作成した&lt;em&gt;後に&lt;/em&gt;提供されるインターセプターは無視されます。</target>
        </trans-unit>
        <trans-unit id="ebedc3d0a5c7a3fec99ebbc8e460b97a0d2a4cf2" translate="yes" xml:space="preserve">
          <source>Because interceptors can process the request and response &lt;em&gt;together&lt;/em&gt;, they can do things like time and log an entire HTTP operation.</source>
          <target state="translated">インターセプターはリクエストとレスポンスを&lt;em&gt;一緒に&lt;/em&gt;処理できるため、時間などの処理を実行し、HTTPオペレーション全体をログに記録できます。</target>
        </trans-unit>
        <trans-unit id="e2d71f3190ead35022f872f1cc8b0026fc4180ab" translate="yes" xml:space="preserve">
          <source>Because interceptors can process the request and response &lt;em&gt;together&lt;/em&gt;, they can perform tasks such as timing and logging an entire HTTP operation.</source>
          <target state="translated">インターセプターは要求と応答を&lt;em&gt;一緒に&lt;/em&gt;処理できるため、HTTP操作全体のタイミングやログ記録などのタスクを実行できます。</target>
        </trans-unit>
        <trans-unit id="5d9990b0c02c63922de8ac7eb597a4dbd80a3bf1" translate="yes" xml:space="preserve">
          <source>Because many app components need the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt;, the developer created a &lt;code&gt;SharedModule&lt;/code&gt; to combine these and other frequently requested parts.</source>
          <target state="translated">多くのアプリのコンポーネントが必要なので &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; を、開発者が作成した &lt;code&gt;SharedModule&lt;/code&gt; これらおよび他の頻繁に要求される部品を組み合わせることを。</target>
        </trans-unit>
        <trans-unit id="7309f02327abcb02906eb27e1961d1e11ff57034" translate="yes" xml:space="preserve">
          <source>Because much AngularJS code is in JavaScript, JavaScript code is shown in the AngularJS column. The Angular code is shown using TypeScript.</source>
          <target state="translated">AngularJSのコードの多くはJavaScriptを使用しているため、AngularJSの欄にはJavaScriptのコードが表示されています。AngularのコードはTypeScriptを使って表示しています。</target>
        </trans-unit>
        <trans-unit id="b19a9e8492a1eac84038f4635a1cd76785f5684a" translate="yes" xml:space="preserve">
          <source>Because no native HTML element follows the &lt;code&gt;x&lt;/code&gt; value and &lt;code&gt;xChange&lt;/code&gt; event pattern, two-way binding with form elements requires &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;. For more information on how to use two-way binding in forms, see Angular &lt;a href=&quot;built-in-directives#ngModel&quot;&gt;NgModel&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 値と &lt;code&gt;xChange&lt;/code&gt; イベントパターンに続くネイティブHTML要素がないため、フォーム要素との双方向バインディングには &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; が必要です。フォームで双方向バインディングを使用する方法の詳細については、&lt;a href=&quot;built-in-directives#ngModel&quot;&gt;AngularNgModelを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f63ecad480eaacde83f906bac0c6143c6ea2184e" translate="yes" xml:space="preserve">
          <source>Because observables produce values asynchronously, try/catch will not effectively catch errors. Instead, you handle errors by specifying an &lt;code&gt;error&lt;/code&gt; callback on the observer. Producing an error also causes the observable to clean up subscriptions and stop producing values. An observable can either produce values (calling the &lt;code&gt;next&lt;/code&gt; callback), or it can complete, calling either the &lt;code&gt;complete&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; callback.</source>
          <target state="translated">オブザーバブルは非同期に値を生成するため、try / catchは効果的にエラーをキャッチしません。代わりに、オブザーバーで &lt;code&gt;error&lt;/code&gt; コールバックを指定してエラーを処理します。エラーを生成すると、オブザーバブルはサブスクリプションをクリーンアップし、値の生成を停止します。オブザーバブルは値を生成する（ &lt;code&gt;next&lt;/code&gt; コールバックを呼び出す）か、 &lt;code&gt;complete&lt;/code&gt; または &lt;code&gt;error&lt;/code&gt; コールバックを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7b1058fd96afe9d690d0969b15ba453bf7c67528" translate="yes" xml:space="preserve">
          <source>Because of these advantages, observables are used extensively within Angular, and are recommended for app development as well.</source>
          <target state="translated">このようなメリットがあるため、Angular内ではobservablesが広く使われており、アプリ開発にもおすすめです。</target>
        </trans-unit>
        <trans-unit id="a3b6660bf41bb567678e15b0038461e5765da5cb" translate="yes" xml:space="preserve">
          <source>Because of these many obstacles, you should test DOM interaction with unit testing techniques as much as possible.</source>
          <target state="translated">このように多くの障害があるため、できるだけユニットテスト技術を使ってDOMの相互作用をテストした方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="772276ca842c13128ca4d0e6c6d501e1f891a5e6" translate="yes" xml:space="preserve">
          <source>Because template-driven forms are in their own module, you need to add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the array of &lt;code&gt;imports&lt;/code&gt; for the application module before you can use forms.</source>
          <target state="translated">テンプレート駆動型フォームは独自のモジュール内にあるため、フォームを使用する前に、アプリケーションモジュールの &lt;code&gt;imports&lt;/code&gt; の配列に &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="f75c667b11d2d8cfaed8c93263c0b980c8478dec" translate="yes" xml:space="preserve">
          <source>Because the &lt;a href=&quot;testing#dashboard-hero-component&quot;&gt;template&lt;/a&gt; passes the hero name through the Angular &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;, the test must match the element value with the upper-cased name.</source>
          <target state="translated">&lt;a href=&quot;testing#dashboard-hero-component&quot;&gt;テンプレート&lt;/a&gt;はヒーロー名をAngular &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; を介して渡すため、テストは要素の値を大文字の名前と一致させる必要があります。</target>
        </trans-unit>
        <trans-unit id="6f5db9bdd91a54612d57188e6c89f939ca3ea573" translate="yes" xml:space="preserve">
          <source>Because the &lt;a href=&quot;testing-components-scenarios#dashboard-hero-component&quot;&gt;template&lt;/a&gt; passes the hero name through the Angular &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;, the test must match the element value with the upper-cased name.</source>
          <target state="translated">ので&lt;a href=&quot;testing-components-scenarios#dashboard-hero-component&quot;&gt;テンプレートは&lt;/a&gt;角度によって英雄の名を渡し &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; 、テストは大文字にした名前の要素の値と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="7fffab32755aa9a95819efcad47313434ea4ee47" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;HeroesModule&lt;/code&gt; now provides the &lt;code&gt;HeroListComponent&lt;/code&gt;, remove it from the &lt;code&gt;AppModule&lt;/code&gt;'s &lt;code&gt;declarations&lt;/code&gt; array. Now that you have a separate &lt;code&gt;HeroesModule&lt;/code&gt;, you can evolve the hero feature with more components and different routes.</source>
          <target state="translated">ので &lt;code&gt;HeroesModule&lt;/code&gt; が今提供 &lt;code&gt;HeroListComponent&lt;/code&gt; を、からそれを削除 &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;declarations&lt;/code&gt; 配列。個別の &lt;code&gt;HeroesModule&lt;/code&gt; ができたので、より多くのコンポーネントとさまざまなルートを使用してヒーロー機能を進化させることができます。</target>
        </trans-unit>
        <trans-unit id="bb19305312e2b1bf07f79171f6856a936e20b002" translate="yes" xml:space="preserve">
          <source>Because the component template uses two-way data binding for the &lt;code&gt;favoriteColor&lt;/code&gt; property, the &lt;code&gt;favoriteColor&lt;/code&gt; property in the component is updated to the value emitted by the &lt;code&gt;ngModelChange&lt;/code&gt; event (&lt;em&gt;Blue&lt;/em&gt;).</source>
          <target state="translated">コンポーネントテンプレートは &lt;code&gt;favoriteColor&lt;/code&gt; プロパティに双方向のデータバインディングを使用するため、コンポーネントの &lt;code&gt;favoriteColor&lt;/code&gt; プロパティは &lt;code&gt;ngModelChange&lt;/code&gt; イベント（&lt;em&gt;Blue&lt;/em&gt;）によって発行された値に更新されます。</target>
        </trans-unit>
        <trans-unit id="3559bd87675d83ca7d84212b131b57dd2128c250" translate="yes" xml:space="preserve">
          <source>Because the custom id is the same, both of the elements in the resulting translation contain the same text, &lt;code&gt;Bonjour&lt;/code&gt;:</source>
          <target state="translated">カスタムIDが同じであるため、翻訳結果の両方の要素に同じテキスト &lt;code&gt;Bonjour&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="ac60673f94b3d3376ab5d403b236e2c865d35a46" translate="yes" xml:space="preserve">
          <source>Because the new module is meant to be lazy-loaded, the command does NOT add a reference for the new feature module to the root application's module file, &lt;code&gt;app.module.ts&lt;/code&gt;. Instead, it adds the declared route, &lt;code&gt;customer-list&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided as the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">新しいモジュールは遅延ロードされることを意図しているため、コマンドは新しい機能モジュールの参照をルートアプリケーションのモジュールファイル &lt;code&gt;app.module.ts&lt;/code&gt; に追加しません。代わりに、宣言されたルート &lt;code&gt;customer-list&lt;/code&gt; を &lt;code&gt;--module&lt;/code&gt; オプションとして提供されたモジュールで宣言された &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="f7da6c9a81975e26c4d0dd69691dee4a8dec5786" translate="yes" xml:space="preserve">
          <source>Because the new module is meant to be lazy-loaded, the command does NOT add a reference to the new feature module in the application's root module file, &lt;code&gt;app.module.ts&lt;/code&gt;. Instead, it adds the declared route, &lt;code&gt;customers&lt;/code&gt; to the &lt;code&gt;routes&lt;/code&gt; array declared in the module provided as the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">新しいモジュールは遅延読み込みを目的としているため、コマンドはアプリケーションのルートモジュールファイル &lt;code&gt;app.module.ts&lt;/code&gt; に新しい機能モジュールへの参照を追加しません。代わりに、宣言されたルート、 &lt;code&gt;customers&lt;/code&gt; を &lt;code&gt;--module&lt;/code&gt; オプションとして提供されたモジュールで宣言された &lt;code&gt;routes&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="8f72bc222c5187cbceca225395ab2edb41eb5670" translate="yes" xml:space="preserve">
          <source>Because the sample tests for this guide are designed to run only in a browser, a &lt;code&gt;nativeElement&lt;/code&gt; in these tests is always an &lt;code&gt;HTMLElement&lt;/code&gt; whose familiar methods and properties you can explore within a test.</source>
          <target state="translated">このガイドのサンプルテストはブラウザーでのみ実行するように設計されている &lt;code&gt;nativeElement&lt;/code&gt; 、これらのテストのnativeElementは常に &lt;code&gt;HTMLElement&lt;/code&gt; であり、使い慣れたメソッドとプロパティをテスト内で探索できます。</target>
        </trans-unit>
        <trans-unit id="011af8b0f357ff673113afd8db33d1ac6ff8678e" translate="yes" xml:space="preserve">
          <source>Because the service method returns an &lt;code&gt;Observable&lt;/code&gt; of configuration data, the component &lt;em&gt;subscribes&lt;/em&gt; to the method's return value. The subscription callback performs minimal post-processing. It copies the data fields into the component's &lt;code&gt;config&lt;/code&gt; object, which is data-bound in the component template for display.</source>
          <target state="translated">serviceメソッドは構成データの &lt;code&gt;Observable&lt;/code&gt; を返すため、コンポーネントはメソッドの戻り値を&lt;em&gt;サブスクライブ&lt;/em&gt;します。サブスクリプションコールバックは最小限の後処理を実行します。これは、コピーし、コンポーネントの中のデータフィールド &lt;code&gt;config&lt;/code&gt; の表示のためのコンポーネントのテンプレートにデータバインドされたオブジェクトを、。</target>
        </trans-unit>
        <trans-unit id="5ba2132d051625545e383f4b78d7ded919141bef" translate="yes" xml:space="preserve">
          <source>Because the service method returns an &lt;code&gt;Observable&lt;/code&gt; of configuration data, the component &lt;strong&gt;subscribes&lt;/strong&gt; to the method's return value. The subscription callback copies the data fields into the component's &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; object, which is data-bound in the component template for display.</source>
          <target state="translated">serviceメソッドは構成データの &lt;code&gt;Observable&lt;/code&gt; を返すため、コンポーネントはメソッドの戻り値を&lt;strong&gt;サブスクライブ&lt;/strong&gt;します。サブスクリプションのコールバックコピーコンポーネントの中のデータフィールド &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; の表示のためのコンポーネントのテンプレートにデータバインドされたオブジェクト、。</target>
        </trans-unit>
        <trans-unit id="8460f3c5a0030447eadc8c95b36ae1865a187e73" translate="yes" xml:space="preserve">
          <source>Because the spy result returns synchronously, the &lt;code&gt;getQuote()&lt;/code&gt; method updates the message on screen immediately &lt;em&gt;after&lt;/em&gt; the first change detection cycle during which Angular calls &lt;code&gt;ngOnInit&lt;/code&gt;.</source>
          <target state="translated">spyの結果は同期的に返されるため、Angularが &lt;code&gt;ngOnInit&lt;/code&gt; を呼び出す最初の変更検出サイクルの直後&lt;em&gt;に&lt;/em&gt;、 &lt;code&gt;getQuote()&lt;/code&gt; メソッドは画面上のメッセージを更新します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e716f7ac284970330d5ea0ebf9a16fdfedd60bbd" translate="yes" xml:space="preserve">
          <source>Because the value of the property &lt;code&gt;isUnchanged&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;AppComponent&lt;/code&gt;, Angular disables the button.</source>
          <target state="translated">プロパティ &lt;code&gt;isUnchanged&lt;/code&gt; の値はAppComponentで &lt;code&gt;true&lt;/code&gt; である &lt;code&gt;AppComponent&lt;/code&gt; 、Angularはボタンを無効にします。</target>
        </trans-unit>
        <trans-unit id="ae3ebebb2c33ca11b4aadf44642620433d674fef" translate="yes" xml:space="preserve">
          <source>Because we use routing, we can easily recognize the three types of requests and handle them differently.</source>
          <target state="translated">ルーティングを利用しているので、3種類のリクエストを簡単に認識して、それぞれのリクエストに応じた対応ができるようになっています。</target>
        </trans-unit>
        <trans-unit id="7c1e35fdf2c95e740d747fb6e8d2cb1e5ce349b8" translate="yes" xml:space="preserve">
          <source>Before a view is displayed, Angular evaluates the directives and resolves the binding syntax in the template to modify the HTML elements and the DOM, according to your program data and logic. Angular supports &lt;em&gt;two-way data binding&lt;/em&gt;, meaning that changes in the DOM, such as user choices, are also reflected in your program data.</source>
          <target state="translated">ビューが表示される前に、Angularはディレクティブを評価し、テンプレートのバインディング構文を解決して、プログラムデータとロジックに従ってHTML要素とDOMを変更します。Angularは&lt;em&gt;双方向データバインディングを&lt;/em&gt;サポートしています。つまり、ユーザーの選択などのDOMの変更もプログラムデータに反映されます。</target>
        </trans-unit>
        <trans-unit id="3f3310ad85328d69644a5539eaa58ef7a2519e78" translate="yes" xml:space="preserve">
          <source>Before creating a route, you should be familiar with the following:</source>
          <target state="translated">ルートを作成する前に、以下のことを理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="9612053115f04a1c2064165c3d23081783892532" translate="yes" xml:space="preserve">
          <source>Before disabling Ivy, check out the debugging recommendations in the &lt;a href=&quot;ivy-compatibility#debugging&quot;&gt;Ivy Compatibility Guide&lt;/a&gt;.</source>
          <target state="translated">Ivyを無効にする前に、&lt;a href=&quot;ivy-compatibility#debugging&quot;&gt;Ivy互換性ガイドの&lt;/a&gt;デバッグに関する推奨事項を確認してください。</target>
        </trans-unit>
        <trans-unit id="56a2690d6d4ee87e844d5b45b79d0937210c67e9" translate="yes" xml:space="preserve">
          <source>Before discussing how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to create hybrid apps, there are things that you can do to ease the upgrade process even before you begin upgrading. Because the steps are the same regardless of how you upgrade, refer to the &lt;a href=&quot;upgrade#preparation&quot;&gt;Preparation&lt;/a&gt; section of &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用してハイブリッドアプリを作成する方法について説明する前に、アップグレードを開始する前でも、アップグレードプロセスを容易にするためにできることがいくつかあります。手順はアップグレード方法に関係なく同じであるため、&lt;a href=&quot;upgrade&quot;&gt;AngularJSから&lt;/a&gt;のアップグレードの&lt;a href=&quot;upgrade#preparation&quot;&gt;準備&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2bd6921a15a4cc4213b02c123a7b7fdf88397ce4" translate="yes" xml:space="preserve">
          <source>Before doing that, understand the difference between pure and impure, starting with a pure pipe.</source>
          <target state="translated">その前に、純粋なパイプから始めて、純粋と不純の違いを理解しましょう。</target>
        </trans-unit>
        <trans-unit id="fc24538f225bd74078ff36203b3ade5aa341dca1" translate="yes" xml:space="preserve">
          <source>Before doing this tutorial, you should have a basic understanding to the following.</source>
          <target state="translated">このチュートリアルを行う前に、以下のことを基本的に理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="938bfb0cc4fb4eee22c10427c31d0ba174568291" translate="yes" xml:space="preserve">
          <source>Before fully deploying your application, you can test the process, build configuration, and deployed behavior by using one of these interim techniques.</source>
          <target state="translated">アプリケーションを完全にデプロイする前に、これらの暫定的なテクニックのいずれかを使用して、プロセス、ビルド構成、およびデプロイされた動作をテストすることができます。</target>
        </trans-unit>
        <trans-unit id="b79cd0b493b0831cb177440164f7335b569a885f" translate="yes" xml:space="preserve">
          <source>Before going further into reactive forms, you should have a basic understanding of the following:</source>
          <target state="translated">反応型のフォームにさらに踏み込む前に、以下の基本的な理解をしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="fba9d1e7e32986f6b3010a0a9c710cb5b1f8bf77" translate="yes" xml:space="preserve">
          <source>Before going further into template-driven forms, you should have a basic understanding of the following.</source>
          <target state="translated">テンプレート駆動型のフォームにさらに踏み込む前に、以下の基本的な理解をしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="39ea417f7b18f1f328e8e078cd323d7e7c780e6b" translate="yes" xml:space="preserve">
          <source>Before going into the source structure, the next section shows how to fill out the HTML &lt;em&gt;template&lt;/em&gt; for the product list, using the provided sample data. This should give you an idea how easy it is to modify and update the page dynamically.</source>
          <target state="translated">ソース構造に入る前に、次のセクションでは、提供されたサンプルデータを使用して、製品リストのHTML&lt;em&gt;テンプレート&lt;/em&gt;に入力する方法を示します。これにより、ページを動的に変更および更新することがいかに簡単であるかがわかります。</target>
        </trans-unit>
        <trans-unit id="1bc7b12fb67f6014a2a594cc0af99c3d142d39db" translate="yes" xml:space="preserve">
          <source>Before learning template syntax, you should be familiar with the following:</source>
          <target state="translated">テンプレートの構文を学ぶ前に、以下のことを理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="70ee43513c9f4b63eb3ac4252e5589a69d05feb0" translate="yes" xml:space="preserve">
          <source>Before publishing a library to NPM, build it using the &lt;code&gt;--prod&lt;/code&gt; flag which will use the older compiler and runtime known as View Engine instead of Ivy.</source>
          <target state="translated">ライブラリをNPMに公開する前に、 &lt;code&gt;--prod&lt;/code&gt; フラグを使用してライブラリをビルドします。このフラグは、Ivyの代わりにViewEngineと呼ばれる古いコンパイラとランタイムを使用します。</target>
        </trans-unit>
        <trans-unit id="4d610fad0d4a841b5b934aeb1045f3ad689f743a" translate="yes" xml:space="preserve">
          <source>Before reading about form validation, you should have a basic understanding of the following.</source>
          <target state="translated">フォームバリデーションについて読む前に、以下のことを基本的に理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="31ade65586fac3f6c67ae72205b4dfe90fd2d49b" translate="yes" xml:space="preserve">
          <source>Before updating the &lt;code&gt;app-routing.module.ts&lt;/code&gt;, you'll need to consider an important rule. Currently, our empty path route redirects to &lt;code&gt;/heroes&lt;/code&gt;, which redirects to &lt;code&gt;/superheroes&lt;/code&gt;. This &lt;em&gt;won't&lt;/em&gt; work and is by design as the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; handles redirects once at each level of routing configuration. This prevents chaining of redirects, which can lead to endless redirect loops.</source>
          <target state="translated">&lt;code&gt;app-routing.module.ts&lt;/code&gt; を更新する前に、重要なルールを検討する必要があります。現在、空のパスルートは &lt;code&gt;/heroes&lt;/code&gt; にリダイレクトされ、/ heroesは &lt;code&gt;/superheroes&lt;/code&gt; にリダイレクトされます。これ&lt;em&gt;は機能せず&lt;/em&gt;、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; はルーティング構成の各レベルでリダイレクトを一度処理するため、仕様によるものです。これにより、リダイレクトの連鎖が防止され、無限のリダイレクトループが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2adebd0eb41e8f1c544074f8aa1193608616af7e" translate="yes" xml:space="preserve">
          <source>Before using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive in a two-way data binding, you must import the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and add it to the NgModule's &lt;code&gt;imports&lt;/code&gt; list. Learn more about the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;forms#ngModel&quot;&gt;Forms&lt;/a&gt;.</source>
          <target state="translated">使用する前に &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; の双方向のデータバインディングでディレクティブを、あなたは、インポートする必要があり &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をしてNgModuleのに追加 &lt;code&gt;imports&lt;/code&gt; リスト。詳細情報 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; で&lt;a href=&quot;forms#ngModel&quot;&gt;フォームを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50199f21b3e8912b7bc32276a7bc2c2750704da6" translate="yes" xml:space="preserve">
          <source>Before working with lifecycle hooks, you should have a basic understanding of the following:</source>
          <target state="translated">ライフサイクルフックを扱う前に、以下のことを基本的に理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="c082dce0b08f61c3e4a5f8021cefd8d4ab1289e7" translate="yes" xml:space="preserve">
          <source>Before working with the &lt;code&gt;HTTPClientModule&lt;/code&gt;, you should have a basic understanding of the following:</source>
          <target state="translated">&lt;code&gt;HTTPClientModule&lt;/code&gt; を使用する前に、次の基本を理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="cfeb39e482f633aad50966874d14d00ba4e281e9" translate="yes" xml:space="preserve">
          <source>Before writing tests for your Angular app, you should have a basic understanding of the following concepts:</source>
          <target state="translated">Angularアプリのテストを書く前に、以下の概念を基本的に理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="974b03fe0fa1d7a6ed31bea40eba5437fd1ccda1" translate="yes" xml:space="preserve">
          <source>Before you begin, make sure your development environment includes &lt;code&gt;Node.js&amp;reg;&lt;/code&gt; and an npm package manager.</source>
          <target state="translated">始める前に、開発環境に &lt;code&gt;Node.js&amp;reg;&lt;/code&gt; とnpmパッケージマネージャーが含まれていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="919d29e47188004264e245ab74f85d9fecbc4581" translate="yes" xml:space="preserve">
          <source>Before you can add components you have to define an anchor point to tell Angular where to insert components.</source>
          <target state="translated">コンポーネントを追加する前に、コンポーネントを挿入する場所をAngularに伝えるためのアンカーポイントを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="d407fa25385c1b1dc197a82d6a0637678cc33a4a" translate="yes" xml:space="preserve">
          <source>Before you can use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, you need to import the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. Most apps do so in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用する前に、AngularHttpClientModuleをインポートする必要があり &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 。ほとんどのアプリはルート &lt;code&gt;AppModule&lt;/code&gt; でこれを行います。</target>
        </trans-unit>
        <trans-unit id="41aa0ac3fdb9b01b90db0924c5bc2b5cb4b0c80e" translate="yes" xml:space="preserve">
          <source>Before you can use Angular's HTTP client, you must configure your app to use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularのHTTPクライアントを使用する前に、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を使用するようにアプリを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7480739e4d2bfb1b2c1291af6d204a69a044469" translate="yes" xml:space="preserve">
          <source>Before you can use Angular's HTTP client, you must set up your app to use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularのHTTPクライアントを使用する前に、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を使用するようにアプリを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="72fa1b5683e2296972d6d0e97ba335789c635353" translate="yes" xml:space="preserve">
          <source>Before you can use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, you need to import the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. Most apps do so in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用する前に、Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートする必要があります。ほとんどのアプリは、ルート &lt;code&gt;AppModule&lt;/code&gt; でこれを行います。</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes" xml:space="preserve">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="ce372ed4595d7ee7562947bc03d901bf1fa43b3a" translate="yes" xml:space="preserve">
          <source>Begin a main section heading with the markdown &lt;code&gt;##&lt;/code&gt; characters. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; HTML tag.</source>
          <target state="translated">マークダウン &lt;code&gt;##&lt;/code&gt; 文字でメインセクションの見出しを開始します。または、同等の &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; HTMLタグを記述できます。</target>
        </trans-unit>
        <trans-unit id="77b54c71ffe46696eb1cabec8c578b7430387d98" translate="yes" xml:space="preserve">
          <source>Begin a secondary heading with the markdown &lt;code&gt;###&lt;/code&gt; characters. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; HTML tag.</source>
          <target state="translated">マークダウン &lt;code&gt;###&lt;/code&gt; 文字で二次見出しを開始します。または、同等の &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; HTMLタグを記述できます。</target>
        </trans-unit>
        <trans-unit id="68ffa95f663f190607f3c471b59d100f255b0429" translate="yes" xml:space="preserve">
          <source>Begin by adding &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; to the list of imported symbols.</source>
          <target state="translated">まず、インポートされたシンボルのリストに &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="8d5d9a6ea323fdd57d9e1215bac5a83bb80d88b5" translate="yes" xml:space="preserve">
          <source>Begin by adding &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; to the list of symbols imported from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">まず、 &lt;code&gt;@angular/core&lt;/code&gt; からインポートされたシンボルのリストに &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="c07371f1cc4e4d389c0f8860f26b0137449c4516" translate="yes" xml:space="preserve">
          <source>Begin by imitating the heroes feature:</source>
          <target state="translated">英雄の特徴を真似することから始めましょう。</target>
        </trans-unit>
        <trans-unit id="eee54c68da088a30ccd7f437a9e53e1b0bb1026c" translate="yes" xml:space="preserve">
          <source>Begin by installing TypeScript to the project.</source>
          <target state="translated">プロジェクトにTypeScriptをインストールすることから始めます。</target>
        </trans-unit>
        <trans-unit id="c985c7dda4282902d2451041dfd2a01b559349f8" translate="yes" xml:space="preserve">
          <source>Begin by putting re-usable, preparatory code in a &lt;em&gt;setup&lt;/em&gt; function instead of &lt;code&gt;beforeEach()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; ではなく、&lt;em&gt;セットアップ&lt;/em&gt;関数に再利用可能な準備コードを配置することから始め&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ed8e17d942d58d6ace8c56724dbb3f4cb3ceab40" translate="yes" xml:space="preserve">
          <source>Begin with a basic version of the app that navigates between two empty views.</source>
          <target state="translated">2つの空のビューの間をナビゲートするアプリの基本的なバージョンから始めましょう。</target>
        </trans-unit>
        <trans-unit id="9dc6969f62da20a6afb1f322ebadb8b41abaac3c" translate="yes" xml:space="preserve">
          <source>Begin with a simple version of the app that navigates between two empty views.</source>
          <target state="translated">2つの空のビューの間をナビゲートするアプリのシンプルなバージョンから始めましょう。</target>
        </trans-unit>
        <trans-unit id="d6548854aa27000232e1d1aba5f49a3acb40b7ae" translate="yes" xml:space="preserve">
          <source>Begin with the first form of data binding&amp;mdash;interpolation&amp;mdash;to see how much richer template HTML can be.</source>
          <target state="translated">データバインディングの最初の形式である補間から始めて、テンプレートHTMLがどれほど豊かになるかを確認します。</target>
        </trans-unit>
        <trans-unit id="592d6d7c575706de86d4d071fdf75790be29837c" translate="yes" xml:space="preserve">
          <source>Beginning with Angular 6.0, the preferred way to create a singleton service is to set &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;root&lt;/code&gt; on the service's &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. This tells Angular to provide the service in the application root.</source>
          <target state="translated">Angular 6.0以降では、シングルトンサービスを作成するための推奨される方法は、サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレーターで &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;root&lt;/code&gt; に設定することです。これは、アプリケーションルートでサービスを提供するようにAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="d0385b0bf87c6f88582259958a9f27bfb7f3be7f" translate="yes" xml:space="preserve">
          <source>Beginning with Angular 6.0, the preferred way to create a singleton service is to set &lt;code&gt;providedIn&lt;/code&gt; to &lt;code&gt;root&lt;/code&gt; on the service's &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. This tells Angular to provide the service in the application root.</source>
          <target state="translated">Angular 6.0以降、シングルトンサービスを作成するための推奨される方法は、 &lt;code&gt;providedIn&lt;/code&gt; をサービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレータの &lt;code&gt;root&lt;/code&gt; に設定することです。これは、アプリケーションルートでサービスを提供するようにAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="3b66259b5d10f5e4dfd17260980e9448c27c8990" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Angular creates a new control for each input element, provided you have set up a &lt;code&gt;name&lt;/code&gt; attribute and two-way binding for each input.</source>
          <target state="translated">Angularは、各入力に &lt;code&gt;name&lt;/code&gt; 属性と双方向バインディングを設定している場合、バックグラウンドで各入力要素の新しいコントロールを作成します。</target>
        </trans-unit>
        <trans-unit id="f1577aef7d5c90af9c045dcc7b86cbeeacf9fc65" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Angular sets the &lt;code&gt;logger&lt;/code&gt; parameter to the full service registered under the &lt;code&gt;LoggingService&lt;/code&gt; token, which happens to be the &lt;code&gt;DateLoggerService&lt;/code&gt; instance that was &lt;a href=&quot;dependency-injection-in-action#useclass&quot;&gt;provided above&lt;/a&gt;.</source>
          <target state="translated">舞台裏、角度設定 &lt;code&gt;logger&lt;/code&gt; で登録フルサービスにパラメータ &lt;code&gt;LoggingService&lt;/code&gt; のがあることを起こるトークン、 &lt;code&gt;DateLoggerService&lt;/code&gt; のたインスタンス&lt;a href=&quot;dependency-injection-in-action#useclass&quot;&gt;の上方に設けられました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e82af82e7e882e82e6f17fc0109858d570cb6fa5" translate="yes" xml:space="preserve">
          <source>Behind the scenes, each component sets up its own injector with zero, one, or more providers defined for that component itself.</source>
          <target state="translated">裏では、各コンポーネントは、そのコンポーネント自体に定義されたゼロ、1つまたは複数のプロバイダを持つ独自のインジェクタを設定します。</target>
        </trans-unit>
        <trans-unit id="f1b2830245d3e2ff98c8e67a5f1a960600c64153" translate="yes" xml:space="preserve">
          <source>Behind this behavior is the router's &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard. The guard gives you a chance to clean-up or ask the user's permission before navigating away from the current view.</source>
          <target state="translated">この動作の背後には、ルーターの &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; ガードがあります。ガードは、現在のビューから移動する前に、クリーンアップするか、ユーザーの許可を求める機会を与えます。</target>
        </trans-unit>
        <trans-unit id="3a5f33c6e631fd4b9b6828f4a98022745cdde1db" translate="yes" xml:space="preserve">
          <source>Below is the &quot;Little Tour of Heroes&quot; component.</source>
          <target state="translated">以下、「リトル・ツアー・オブ・ヒーローズ」の構成要素です。</target>
        </trans-unit>
        <trans-unit id="a6d54f04eb5f64dea38939b332ee485453c0ed14" translate="yes" xml:space="preserve">
          <source>Below is the content of our example &lt;code&gt;select&lt;/code&gt; ICU expression in the component template:</source>
          <target state="translated">以下は、コンポーネントテンプレートの例の &lt;code&gt;select&lt;/code&gt; ICU式の内容です。</target>
        </trans-unit>
        <trans-unit id="4e0f6ab73f39d0ec2a1809d528963c447a13f3b6" translate="yes" xml:space="preserve">
          <source>Below it add an HTML unordered list (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">その下にHTML順不同リストを追加します（ &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b84a1be2c29811cc7905b853f73dea56408133ea" translate="yes" xml:space="preserve">
          <source>Below the &lt;code&gt;clearCart()&lt;/code&gt; method, define a new &lt;code&gt;getShippingPrices()&lt;/code&gt; method that uses the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;#get()&lt;/code&gt; method to retrieve the shipping data (types and prices).</source>
          <target state="translated">&lt;code&gt;clearCart()&lt;/code&gt; メソッドの下で、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;#get()&lt;/code&gt; #get（）メソッドを使用して配送データ（タイプと価格）を取得する新しい &lt;code&gt;getShippingPrices()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="c876a01df6b2f0af560f30fe53ac86ce42ab2d2c" translate="yes" xml:space="preserve">
          <source>Below the &lt;code&gt;clearCart()&lt;/code&gt; method, define a new &lt;code&gt;getShippingPrices()&lt;/code&gt; method that uses the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;&lt;code&gt;get()&lt;/code&gt; method to retrieve the shipping data.</source>
          <target state="translated">&lt;code&gt;clearCart()&lt;/code&gt; メソッドの下で、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; &lt;code&gt;get()&lt;/code&gt; メソッドを使用して配送データを取得する新しい &lt;code&gt;getShippingPrices()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="4134985fe5ce5666849835575205259905697417" translate="yes" xml:space="preserve">
          <source>Benefits of a routing module</source>
          <target state="translated">ルーティングモジュールのメリット</target>
        </trans-unit>
        <trans-unit id="8cc0379f41ff0ba0e46288baf9de039b96b071ca" translate="yes" xml:space="preserve">
          <source>Besides their different API, there are two important internal differences between &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; that affect the behavior of hybrid applications:</source>
          <target state="translated">異なるAPIに加えて、ハイブリッドアプリケーションの動作に影響を与える &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; の間には、2つの重要な内部的な違いがあります。</target>
        </trans-unit>
        <trans-unit id="1aebe50f6c72461f39b5c56140bf2bf0b673fa65" translate="yes" xml:space="preserve">
          <source>Besides using the CLI on the command line, you can also manipulate files directly in the app's source folder and configuration files.</source>
          <target state="translated">コマンドラインでCLIを使用する以外にも、アプリのソースフォルダや設定ファイル内のファイルを直接操作することもできます。</target>
        </trans-unit>
        <trans-unit id="9faf878af4c349c49c9509b240e538390447757b" translate="yes" xml:space="preserve">
          <source>Besides using the CLI on the command line, you can also use an interactive development environment like &lt;a href=&quot;https://angularconsole.com/&quot;&gt;Angular Console&lt;/a&gt;, or manipulate files directly in the app's source folder and configuration files.</source>
          <target state="translated">コマンドラインでCLIを使用する以外に、&lt;a href=&quot;https://angularconsole.com/&quot;&gt;Angular Console&lt;/a&gt;などのインタラクティブな開発環境を使用したり、アプリのソースフォルダー内のファイルや構成ファイルを直接操作したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="translated">ベストプラクティス</target>
        </trans-unit>
        <trans-unit id="9ff1983a50453d1cae8d9a5eebf8b44e9ceb723c" translate="yes" xml:space="preserve">
          <source>Better developer ergonomics with strict typing for &lt;code&gt;@angular/forms&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; 厳密な型指定による開発者の人間工学の向上</target>
        </trans-unit>
        <trans-unit id="82ef826d9fb859d576a0907d18d1a66926bd8669" translate="yes" xml:space="preserve">
          <source>Beyond that, you may interleave the two frameworks. You always cross the boundary between the two frameworks by one of two ways:</source>
          <target state="translated">その先では、2つのフレームワークを相互に入れ替えることができます。2つのフレームワーク間の境界線を越えるには、必ず2つの方法のうちの1つを使います。</target>
        </trans-unit>
        <trans-unit id="16d85a9f9536bdb143337018c722df8b0f3c81b3" translate="yes" xml:space="preserve">
          <source>Bind component methods to user events, like keystrokes and clicks.</source>
          <target state="translated">コンポーネントメソッドをキーストロークやクリックなどのユーザーイベントにバインドします。</target>
        </trans-unit>
        <trans-unit id="5e9e55d218847019581b70053a614ddd2a5a9018" translate="yes" xml:space="preserve">
          <source>Bind data properties to each form control using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; two-way data-binding syntax.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 双方向データバインディング構文を使用して、データプロパティを各フォームコントロールにバインドします。</target>
        </trans-unit>
        <trans-unit id="e0ff0b03776800840d9030209136719fe8494575" translate="yes" xml:space="preserve">
          <source>Bind form controls to data properties using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive and two-way data-binding syntax.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブと双方向のデータバインディング構文を使用して、フォームコントロールをデータプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="33154f63694b74d4827c50175132e4f395023e05" translate="yes" xml:space="preserve">
          <source>Bind input controls to data properties</source>
          <target state="translated">入力コントロールをデータプロパティにバインド</target>
        </trans-unit>
        <trans-unit id="5f1cd87627492a075b5e1b02e1f2c3ff5fdc07ba" translate="yes" xml:space="preserve">
          <source>Bind the &lt;code&gt;HeroesComponent.selectedHero&lt;/code&gt; to the element's &lt;code&gt;hero&lt;/code&gt; property like this.</source>
          <target state="translated">次のように、 &lt;code&gt;HeroesComponent.selectedHero&lt;/code&gt; を要素の &lt;code&gt;hero&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="cb518f94f4f55866c328e383a2856fb5473ed9a4" translate="yes" xml:space="preserve">
          <source>Bind the button's click event to a hero-creation method, &lt;code&gt;newHero()&lt;/code&gt;.</source>
          <target state="translated">ボタンのクリックイベントをヒーロー作成メソッド &lt;code&gt;newHero()&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="be1a38a295ddc34a08b0e541437a179ec69851e1" translate="yes" xml:space="preserve">
          <source>Bind the form's &lt;a href=&quot;../api/forms/ngform#properties&quot;&gt;&lt;code&gt;ngSubmit&lt;/code&gt;&lt;/a&gt; event property to the hero-form component's &lt;code&gt;onSubmit()&lt;/code&gt; method.</source>
          <target state="translated">フォームの&lt;a href=&quot;../api/forms/ngform#properties&quot;&gt; &lt;code&gt;ngSubmit&lt;/code&gt; &lt;/a&gt;イベントプロパティをヒーローフォームコンポーネントの &lt;code&gt;onSubmit()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="b2792d4ffa16115ba7c001505491305b2d5c88f6" translate="yes" xml:space="preserve">
          <source>Bind to a second property</source>
          <target state="translated">2つ目のプロパティにバインドする</target>
        </trans-unit>
        <trans-unit id="697a78adb0268f346f175f0419a81cb28cea06a1" translate="yes" xml:space="preserve">
          <source>Bind to an &lt;code&gt;@Input&lt;/code&gt; alias</source>
          <target state="translated">&lt;code&gt;@Input&lt;/code&gt; エイリアスにバインドする</target>
        </trans-unit>
        <trans-unit id="5662c554f6ba4f36018195821022c704fa19317c" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;MessageService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MessageService&lt;/code&gt; にバインドする</target>
        </trans-unit>
        <trans-unit id="9af2bb479915615a2ff7e67d9debd7fe3d47d969" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;click&lt;/code&gt; event</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; イベントにバインドする</target>
        </trans-unit>
        <trans-unit id="21c9dd5766d21c48bc079c417359f429b538c0e9" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;hidden&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;hidden&lt;/code&gt; プロパティにバインドする</target>
        </trans-unit>
        <trans-unit id="f2a12bb43f4f20a3308c6e7f43110abc164b3cbe" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;href&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; プロパティにバインドする</target>
        </trans-unit>
        <trans-unit id="c50c22644a97886a75576f3ad55786f5139b6a3f" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;src&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; プロパティにバインドする</target>
        </trans-unit>
        <trans-unit id="b5950f11f19abbc55748a4b766158ae890c0276e" translate="yes" xml:space="preserve">
          <source>Bind values between components</source>
          <target state="translated">コンポーネント間の値のバインド</target>
        </trans-unit>
        <trans-unit id="47592223c16cb8585ef509e09353d7b2abfd8d49" translate="yes" xml:space="preserve">
          <source>Binding ARIA attributes</source>
          <target state="translated">ARIA属性のバインディング</target>
        </trans-unit>
        <trans-unit id="9d134d09d5f4e94212c7d30c73cde26bde681995" translate="yes" xml:space="preserve">
          <source>Binding Type</source>
          <target state="translated">バインディングタイプ</target>
        </trans-unit>
        <trans-unit id="0c74318c4ebf86394efdd83afd59fbdcebcf11b6" translate="yes" xml:space="preserve">
          <source>Binding definition</source>
          <target state="translated">バインディング定義</target>
        </trans-unit>
        <trans-unit id="5839396aa9317f9099934df61297930a2f609f5a" translate="yes" xml:space="preserve">
          <source>Binding expressions in the template that refer to properties of &lt;code&gt;selectedHero&lt;/code&gt;&amp;mdash;expressions like &lt;code&gt;{{selectedHero.name}}&lt;/code&gt;&amp;mdash;&lt;em&gt;must fail&lt;/em&gt; because there is no selected hero.</source>
          <target state="translated">プロパティを参照テンプレート内の式を結合 &lt;code&gt;selectedHero&lt;/code&gt; のような-expressions &lt;code&gt;{{selectedHero.name}}&lt;/code&gt; - &lt;em&gt;失敗しなければなら&lt;/em&gt;ない選択された主人公がないため。</target>
        </trans-unit>
        <trans-unit id="1893c99928000b73c034f5d13d20f170b63a568e" translate="yes" xml:space="preserve">
          <source>Binding happens when Angular performs &lt;strong&gt;change detection&lt;/strong&gt;.</source>
          <target state="translated">Angularが&lt;strong&gt;変更検出を&lt;/strong&gt;実行&lt;strong&gt;すると&lt;/strong&gt;、バインドが発生します。</target>
        </trans-unit>
        <trans-unit id="7bd59c5a7fe5f05639190e405278fb2261e77836" translate="yes" xml:space="preserve">
          <source>Binding syntax</source>
          <target state="translated">バインディング構文</target>
        </trans-unit>
        <trans-unit id="9f17435a7231c370dd9b277051fa279efb03be5c" translate="yes" xml:space="preserve">
          <source>Binding syntax: an overview</source>
          <target state="translated">バインディング構文:概要</target>
        </trans-unit>
        <trans-unit id="d5647a339d9f5d3f491fea7dce9161e510086700" translate="yes" xml:space="preserve">
          <source>Binding targets</source>
          <target state="translated">バインディングターゲット</target>
        </trans-unit>
        <trans-unit id="a982e338e15a591ad314d19385a8465d3771cb08" translate="yes" xml:space="preserve">
          <source>Binding to &lt;code&gt;colspan&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;colspan&lt;/code&gt; への結合</target>
        </trans-unit>
        <trans-unit id="f1cd0d1adc0c5198881b5fa4d0d0d93ed50065f6" translate="yes" xml:space="preserve">
          <source>Binding to &lt;code&gt;innerText&lt;/code&gt; in &lt;code&gt;platform-server&lt;/code&gt;</source>
          <target state="translated">結合 &lt;code&gt;innerText&lt;/code&gt; に &lt;code&gt;platform-server&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2e5336d4d941fc97797cbe0832ef02f3f640bb9" translate="yes" xml:space="preserve">
          <source>Binding to a property</source>
          <target state="translated">プロパティへのバインド</target>
        </trans-unit>
        <trans-unit id="4e9cfb8a8abcf1aa0ba62678633b4cd778b8d7a0" translate="yes" xml:space="preserve">
          <source>Binding to a single CSS &lt;code&gt;class&lt;/code&gt;</source>
          <target state="translated">単一のCSS &lt;code&gt;class&lt;/code&gt; へのバインド</target>
        </trans-unit>
        <trans-unit id="9b65098a59c5ee8b6c9dabf70ba5b3148fe25310" translate="yes" xml:space="preserve">
          <source>Binding to a single style</source>
          <target state="translated">シングルスタイルへのバインディング</target>
        </trans-unit>
        <trans-unit id="41bde9dd651e82f521b541fdc41775c9aa970888" translate="yes" xml:space="preserve">
          <source>Binding to an &lt;code&gt;@Input&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;@Input&lt;/code&gt; プロパティへのバインド</target>
        </trans-unit>
        <trans-unit id="3f2e69830b8c0be6838669447ee2c213786fcbf8" translate="yes" xml:space="preserve">
          <source>Binding to an attribute</source>
          <target state="translated">属性へのバインディング</target>
        </trans-unit>
        <trans-unit id="cb97ee066e6802a64304ae39dded8ff71691fa30" translate="yes" xml:space="preserve">
          <source>Binding to events</source>
          <target state="translated">イベントへのバインド</target>
        </trans-unit>
        <trans-unit id="caf6b7d4e34b730bb276803588b70b02e34630e3" translate="yes" xml:space="preserve">
          <source>Binding to multiple CSS classes</source>
          <target state="translated">複数のCSSクラスへのバインディング</target>
        </trans-unit>
        <trans-unit id="2fa96d5fd278e78320d12bff2da7f173c23bea10" translate="yes" xml:space="preserve">
          <source>Binding to multiple styles</source>
          <target state="translated">複数のスタイルへのバインド</target>
        </trans-unit>
        <trans-unit id="49966c759fad1cab8449cbae782ea4be4768a782" translate="yes" xml:space="preserve">
          <source>Binding to the &lt;code&gt;class&lt;/code&gt; attribute</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 属性へのバインド</target>
        </trans-unit>
        <trans-unit id="2903fdce986b4bc5dc0928e7c935dc3e839d92fa" translate="yes" xml:space="preserve">
          <source>Binding to the style attribute</source>
          <target state="translated">スタイル属性へのバインド</target>
        </trans-unit>
        <trans-unit id="1008f5e8313e01e8a35aaef1612e93ffb2fdf201" translate="yes" xml:space="preserve">
          <source>Binding to user input events</source>
          <target state="translated">ユーザー入力イベントへのバインディング</target>
        </trans-unit>
        <trans-unit id="a0900669bf69957ea18b3c6bc31b0c068974fb65" translate="yes" xml:space="preserve">
          <source>Binding types and targets</source>
          <target state="translated">バインディングの種類とターゲット</target>
        </trans-unit>
        <trans-unit id="3d8a515e1c9d4c4474858b033088bbcd501cde60" translate="yes" xml:space="preserve">
          <source>Binding types other than interpolation have a &lt;strong&gt;target name&lt;/strong&gt; to the left of the equal sign, either surrounded by punctuation, &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;()&lt;/code&gt;, or preceded by a prefix: &lt;code&gt;bind-&lt;/code&gt;, &lt;code&gt;on-&lt;/code&gt;, &lt;code&gt;bindon-&lt;/code&gt;.</source>
          <target state="translated">補間以外のバインディングタイプでは、等号の左側に&lt;strong&gt;ターゲット名&lt;/strong&gt;があり、句読点 &lt;code&gt;[]&lt;/code&gt; または &lt;code&gt;()&lt;/code&gt; で囲まれているか、前にプレフィックスが付いています： &lt;code&gt;bind-&lt;/code&gt; 、 &lt;code&gt;on-&lt;/code&gt; 、 &lt;code&gt;bindon-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9489430053bbe362e29d4adc605c0ee490984678" translate="yes" xml:space="preserve">
          <source>Bindings/interpolation</source>
          <target state="translated">Bindings/interpolation</target>
        </trans-unit>
        <trans-unit id="c5508d22bc8524cbfc21537e7df0e0da3d89023d" translate="yes" xml:space="preserve">
          <source>Bindings:</source>
          <target state="translated">Bindings:</target>
        </trans-unit>
        <trans-unit id="6fdec0a2d226423ce21951dc8d539e2b83505cca" translate="yes" xml:space="preserve">
          <source>Binds a host element property (here, the CSS class &lt;code&gt;valid&lt;/code&gt;) to a directive/component property (&lt;code&gt;isValid&lt;/code&gt;).</source>
          <target state="translated">ホスト要素プロパティ（ここでは、CSSクラス &lt;code&gt;valid&lt;/code&gt; ）をディレクティブ/コンポーネントプロパティ（ &lt;code&gt;isValid&lt;/code&gt; ）にバインドします。</target>
        </trans-unit>
        <trans-unit id="2a03f296a2db9a927b9dbda94190effddfbe9a35" translate="yes" xml:space="preserve">
          <source>Binds a property to an interpolated string, for example, &quot;Hello Seabiscuit&quot;. Equivalent to: &lt;code&gt;&amp;lt;div [title]=&quot;'Hello ' + ponyName&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">プロパティを、 &quot;Hello Seabiscuit&quot;などの補間された文字列にバインドします。同等： &lt;code&gt;&amp;lt;div [title]=&quot;'Hello ' + ponyName&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d7ccc5ce4a07981d8fbbdb0cd830cbe571385e3" translate="yes" xml:space="preserve">
          <source>Binds an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">既存の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; をDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="9ccd1d736a8432535c2d3c15a12d59d85c60d529" translate="yes" xml:space="preserve">
          <source>Binds an existing &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">既存の &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; をDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="16fe924da3cac78aab1564f33684600fc3e54d31" translate="yes" xml:space="preserve">
          <source>Binds attribute &lt;code&gt;role&lt;/code&gt; to the result of expression &lt;code&gt;myAriaRole&lt;/code&gt;.</source>
          <target state="translated">属性 &lt;code&gt;role&lt;/code&gt; を式 &lt;code&gt;myAriaRole&lt;/code&gt; の結果にバインドします。</target>
        </trans-unit>
        <trans-unit id="f54affac6186ad384ce54918e8587b01c740b31d" translate="yes" xml:space="preserve">
          <source>Binds property &lt;code&gt;value&lt;/code&gt; to the result of expression &lt;code&gt;firstName&lt;/code&gt;.</source>
          <target state="translated">プロパティ &lt;code&gt;value&lt;/code&gt; を式 &lt;code&gt;firstName&lt;/code&gt; の結果にバインドします。</target>
        </trans-unit>
        <trans-unit id="f28cdf8e45d544332ba50c27586202007f4d2bd8" translate="yes" xml:space="preserve">
          <source>Binds style property &lt;code&gt;width&lt;/code&gt; to the result of expression &lt;code&gt;mySize&lt;/code&gt; in pixels. Units are optional.</source>
          <target state="translated">スタイルプロパティの &lt;code&gt;width&lt;/code&gt; をピクセル単位の式 &lt;code&gt;mySize&lt;/code&gt; の結果にバインドします。単位はオプションです。</target>
        </trans-unit>
        <trans-unit id="17a444202922e95677dbac286aa416c23efd0983" translate="yes" xml:space="preserve">
          <source>Binds text content to an interpolated string, for example, &quot;Hello Seabiscuit&quot;.</source>
          <target state="translated">テキスト内容を補間された文字列にバインドします。</target>
        </trans-unit>
        <trans-unit id="8a53a7d5df799e913a7ec437d4dd501a26095ee7" translate="yes" xml:space="preserve">
          <source>Binds the first result of the component content query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponent&lt;/code&gt;) of the class.</source>
          <target state="translated">結合成分コンテンツクエリ（の最初の結果 &lt;code&gt;myPredicate&lt;/code&gt; 性（に） &lt;code&gt;myChildComponent&lt;/code&gt; クラスの）。</target>
        </trans-unit>
        <trans-unit id="d462ed51c89027f3d448e6304b58618b5f4dc0bb" translate="yes" xml:space="preserve">
          <source>Binds the first result of the component view query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponent&lt;/code&gt;) of the class. Not available for directives.</source>
          <target state="translated">結合コンポーネントビューのクエリ（の最初の結果 &lt;code&gt;myPredicate&lt;/code&gt; 性（に） &lt;code&gt;myChildComponent&lt;/code&gt; クラスの）。ディレクティブには使用できません。</target>
        </trans-unit>
        <trans-unit id="0e092be7e1c05ee4dd0e489bb77875249aed43ca" translate="yes" xml:space="preserve">
          <source>Binds the presence of CSS classes on the element to the truthiness of the associated map values. The right-hand expression should return {class-name: true/false} map.</source>
          <target state="translated">要素上の CSS クラスの存在を、関連するマップ値の真実性にバインドします。右側の式は {class-name:true/false}map を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="671bb5d878441fb7fa959c57f931fb9e81582167" translate="yes" xml:space="preserve">
          <source>Binds the presence of the CSS class &lt;code&gt;extra-sparkle&lt;/code&gt; on the element to the truthiness of the expression &lt;code&gt;isDelightful&lt;/code&gt;.</source>
          <target state="translated">要素のCSSクラス &lt;code&gt;extra-sparkle&lt;/code&gt; の存在を式 &lt;code&gt;isDelightful&lt;/code&gt; の真実性にバインドします。</target>
        </trans-unit>
        <trans-unit id="a75de65e1c312de631f318f4e7d379f7e3b0db7e" translate="yes" xml:space="preserve">
          <source>Binds the results of the component content query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponents&lt;/code&gt;) of the class.</source>
          <target state="translated">結合成分コンテンツクエリ（の結果 &lt;code&gt;myPredicate&lt;/code&gt; 性（に） &lt;code&gt;myChildComponents&lt;/code&gt; クラスの）。</target>
        </trans-unit>
        <trans-unit id="2153c3e38b198c59245e2713a80794aac2809840" translate="yes" xml:space="preserve">
          <source>Binds the results of the component view query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponents&lt;/code&gt;) of the class. Not available for directives.</source>
          <target state="translated">コンポーネントビュークエリ（ &lt;code&gt;myPredicate&lt;/code&gt; ）の結果をクラスのプロパティ（ &lt;code&gt;myChildComponents&lt;/code&gt; ）にバインドします。ディレクティブには使用できません。</target>
        </trans-unit>
        <trans-unit id="c24315eb20cc1f5a565ec08f29abab31c0925f1a" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="translated">Blob</target>
        </trans-unit>
        <trans-unit id="226ebb87480ef673fc8c86d3504690e25d113738" translate="yes" xml:space="preserve">
          <source>Bodies are not enforced to be immutable, as they can include a reference to any user-defined data type. However, interceptors should take care to preserve idempotence by treating them as such.</source>
          <target state="translated">ボディは、任意のユーザ定義データ型への参照を含むことができるため、不変であることは強制されません。しかし、インターセプターはボディをそのように扱うことで、不変性を維持するように注意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="af107074fdc94049367385cfa9e21226f2eb6a09" translate="yes" xml:space="preserve">
          <source>Boolean (marked deprecated in v5): &lt;code&gt;true&lt;/code&gt; for symbol and false for &lt;code&gt;code&lt;/code&gt;.</source>
          <target state="translated">ブール（v5では非推奨とマークされてい &lt;code&gt;true&lt;/code&gt; ）：シンボルの場合はtrue、 &lt;code&gt;code&lt;/code&gt; false です。</target>
        </trans-unit>
        <trans-unit id="b4ee3c164f30fd674db7923067c5585c6016a895" translate="yes" xml:space="preserve">
          <source>Boolean and enumerated options</source>
          <target state="translated">ブール型および列挙型オプション</target>
        </trans-unit>
        <trans-unit id="ee3701cfb07b487ff0074c548b7c853abc094675" translate="yes" xml:space="preserve">
          <source>Boolean options have two forms: &lt;code&gt;--thisOption&lt;/code&gt; sets the flag, &lt;code&gt;--noThisOption&lt;/code&gt; clears it. If neither option is supplied, the flag remains in its default state, as listed in the reference documentation.</source>
          <target state="translated">ブールオプションには2つの形式があります &lt;code&gt;--thisOption&lt;/code&gt; はフラグを設定し、 &lt;code&gt;--noThisOption&lt;/code&gt; はフラグをクリアします。どちらのオプションも指定しない場合、リファレンスドキュメントにリストされているように、フラグはデフォルトの状態のままになります。</target>
        </trans-unit>
        <trans-unit id="43aac281118e73bd2de105009d38e4c096ce545e" translate="yes" xml:space="preserve">
          <source>Boolean value matching</source>
          <target state="translated">ブール値一致</target>
        </trans-unit>
        <trans-unit id="22cb4db816b227d666bef5f940023e6d431b8292" translate="yes" xml:space="preserve">
          <source>Boolean values in transitions</source>
          <target state="translated">トランジションのブール値</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="984a1c95ee8f803062739b46151930f8fcc64cc3" translate="yes" xml:space="preserve">
          <source>Bootstrap The runtime instance of this class contains a &lt;a href=&quot;upgrademodule#bootstrap&quot;&gt;`bootstrap()`&lt;/a&gt; method, which you use to bootstrap the top level AngularJS module onto an element in the DOM for the hybrid upgrade app.</source>
          <target state="translated">ブートストラップこのクラスのランタイムインスタンスには、&lt;a href=&quot;upgrademodule#bootstrap&quot;&gt;`bootstrap（）`&lt;/a&gt;メソッドが含まれています。このメソッドを使用して、ハイブリッドアップグレードアプリのDOM内の要素にトップレベルのAngularJSモジュールをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="b2bfe58675219a1dbbfc6b3475d2142be8257202" translate="yes" xml:space="preserve">
          <source>Bootstrap a hybrid AngularJS / Angular application.</source>
          <target state="translated">AngularJS/AngularアプリケーションのハイブリッドなBootstrap。</target>
        </trans-unit>
        <trans-unit id="51ee9ae036bd74ef9a86c64b16240b06c2a27ba8" translate="yes" xml:space="preserve">
          <source>Bootstrap a new component at the root level of the application.</source>
          <target state="translated">アプリケーションのルートレベルで新しいコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="e4a6b7f980306983d4418b9e062151bb02f12137" translate="yes" xml:space="preserve">
          <source>Bootstrap an AngularJS application from this NgModule</source>
          <target state="translated">この NgModule から AngularJS アプリケーションをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="c43ac6907ee5f49cf786f03c5183c92913a7be9f" translate="yes" xml:space="preserve">
          <source>Bootstrap process</source>
          <target state="translated">ブートストラップ処理</target>
        </trans-unit>
        <trans-unit id="f816445d2cdd3ec11a7f0bc29a3553b746ba7f58" translate="yes" xml:space="preserve">
          <source>Bootstrap the &lt;code&gt;AppModule&lt;/code&gt; in &lt;code&gt;main.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; で &lt;code&gt;main.ts&lt;/code&gt; ブートストラップします。</target>
        </trans-unit>
        <trans-unit id="a8e9582bb8e53711c79f2e9de1050077a16c41c3" translate="yes" xml:space="preserve">
          <source>Bootstrap the app with those providers.</source>
          <target state="translated">これらのプロバイダを使用してアプリをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="09273e0b3502cd35874b01a3ba91c106f87a667f" translate="yes" xml:space="preserve">
          <source>Bootstrapping</source>
          <target state="translated">Bootstrapping</target>
        </trans-unit>
        <trans-unit id="5a7db5fc491694b2f101ec433ecf1bf5688abf3d" translate="yes" xml:space="preserve">
          <source>Bootstrapping a hybrid PhoneCat</source>
          <target state="translated">ハイブリッドPhoneCatのブートストラップ</target>
        </trans-unit>
        <trans-unit id="9aa9a98e544eb5606246801d9bd2a8d5e0833195" translate="yes" xml:space="preserve">
          <source>Bootstrapping hybrid applications</source>
          <target state="translated">ハイブリッドアプリケーションのブートストラップ</target>
        </trans-unit>
        <trans-unit id="09c0fece45f5112a211482199d5921f05490b2bf" translate="yes" xml:space="preserve">
          <source>Bootstrapping of a hybrid Angular application which contains both of the frameworks coexisting in a single application.</source>
          <target state="translated">1つのアプリケーションに両方のフレームワークを共存させたハイブリッドなAngularアプリケーションのブートストラップ。</target>
        </trans-unit>
        <trans-unit id="0ca02e3c0ffaf3a6883168e9851d5db6a98acc44" translate="yes" xml:space="preserve">
          <source>Bootstrapping with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; （）によるブートストラップ</target>
        </trans-unit>
        <trans-unit id="be52c694b99b80c209e0ec9f6005df403bbc8030" translate="yes" xml:space="preserve">
          <source>Bootstraps the app, using the root component from the specified &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; のルートコンポーネントを使用して、アプリをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="bc574769bfd4b0921435e1d96eebd017fb7655ce" translate="yes" xml:space="preserve">
          <source>Bootstraps the worker ui.</source>
          <target state="translated">ワーカーUIをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="843c4cada239f4bc2cc6160b3122b53d22b9e4aa" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; clear the output folder before they build the project, but only the &lt;code&gt;ng build&lt;/code&gt; command writes the generated build artifacts to the output folder.</source>
          <target state="translated">&lt;code&gt;ng build&lt;/code&gt; と &lt;code&gt;ng serve&lt;/code&gt; どちらもプロジェクトをビルドする前に出力フォルダーをクリアしますが、 &lt;code&gt;ng build&lt;/code&gt; コマンドのみが生成されたビルドアーティファクトを出力フォルダーに書き込みます。</target>
        </trans-unit>
        <trans-unit id="9ea4794ef24c179c732e4dbb95359c533623f529" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; install the packages that are identified in a &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file.</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; と &lt;code&gt;yarn&lt;/code&gt; はどちらも、&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルで識別されるパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="efd9072be34ddd4cd3ac6531f4cdfce31589a567" translate="yes" xml:space="preserve">
          <source>Both AngularJS and Angular have their own concept of modules to help organize an app into cohesive blocks of functionality.</source>
          <target state="translated">AngularJSもAngularも独自のモジュールの概念を持っており、アプリを機能のまとまったブロックに整理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f8b1d87ddf1e625974551a1a9492af7f227f733c" translate="yes" xml:space="preserve">
          <source>Both AngularJS and Angular have their own concept of modules to help organize an application into cohesive blocks of functionality.</source>
          <target state="translated">AngularJSもAngularも、アプリケーションを機能のまとまったブロックに整理するのに役立つ独自のモジュールの概念を持っています。</target>
        </trans-unit>
        <trans-unit id="d564c53c4c40f094481604ce9c087637f753034c" translate="yes" xml:space="preserve">
          <source>Both buttons navigate back to the crisis list after save or cancel.</source>
          <target state="translated">どちらのボタンも、保存またはキャンセル後に危機管理リストに戻るためのナビゲートを行います。</target>
        </trans-unit>
        <trans-unit id="64ed4a76603ad54f5413c0e8debcdd97dd1aa9b1" translate="yes" xml:space="preserve">
          <source>Both components and services are simply classes, with &lt;em&gt;decorators&lt;/em&gt; that mark their type and provide metadata that tells Angular how to use them.</source>
          <target state="translated">コンポーネントとサービスはどちらもクラスであり、そのタイプをマークし、Angularにそれらの使用方法を伝えるメタデータを提供する&lt;em&gt;デコレーター&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="5c09c3f8cf9bbef0b8dcd1109994c96416fac328" translate="yes" xml:space="preserve">
          <source>Both elements now use the same translation (&lt;code&gt;Bonjour&lt;/code&gt;) because they were defined with the same custom ID:</source>
          <target state="translated">両方の要素は、同じカスタムIDで定義されているため、同じ変換（ &lt;code&gt;Bonjour&lt;/code&gt; ）を使用するようになりました。</target>
        </trans-unit>
        <trans-unit id="ed0a9be87024bfe0406f2632088e389834c9a494" translate="yes" xml:space="preserve">
          <source>Both reactive and template-driven forms are built on the following base classes.</source>
          <target state="translated">リアクティブフォームもテンプレート駆動型フォームも、以下の基本クラスで構築されています。</target>
        </trans-unit>
        <trans-unit id="f690c03e061a7fd137c00dd8ab89db4c52afd0e5" translate="yes" xml:space="preserve">
          <source>Both reactive and template-driven forms share underlying building blocks.</source>
          <target state="translated">リアクティブフォームもテンプレート駆動型フォームも、基本的なビルディングブロックを共有しています。</target>
        </trans-unit>
        <trans-unit id="979fd0ef5434b1b36edceaf3d9bc579f6c5937ab" translate="yes" xml:space="preserve">
          <source>Both reactive and template-driven forms track value changes between the form input elements that users interact with and the form data in your component model. The two approaches share underlying building blocks, but differ in how you create and manage the common form-control instances.</source>
          <target state="translated">リアクティブ・フォームとテンプレート駆動型フォームの両方とも、ユーザーが対話するフォーム入力要素とコンポーネントモデル内のフォームデータの間の値の変化を追跡します。この 2 つのアプローチは、基本的なビルディングブロックを共有していますが、共通のフォームコントロールインスタンスの作成方法と管理方法が異なります。</target>
        </trans-unit>
        <trans-unit id="c547c7a0a78e9d790dbe284eb7240f0e366c99c3" translate="yes" xml:space="preserve">
          <source>Both states are temporary; they are saved only for the lifetime of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope&quot;&gt;ServiceWorker instance&lt;/a&gt;. The browser sometimes terminates an idle service worker to conserve memory and processor power, and creates a new service worker instance in response to network events. The new instance starts in the &lt;code&gt;NORMAL&lt;/code&gt; mode, regardless of the state of the previous instance.</source>
          <target state="translated">どちらの状態も一時的なものです。それらは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope&quot;&gt;ServiceWorkerインスタンスの&lt;/a&gt;存続期間中のみ保存されます。ブラウザーはアイドル状態のService Workerを終了してメモリとプロセッサの電力を節約し、ネットワークイベントに応答して新しいService Workerインスタンスを作成することがあります。新しいインスタンスは、前のインスタンスの状態に関係なく、 &lt;code&gt;NORMAL&lt;/code&gt; モードで起動します。</target>
        </trans-unit>
        <trans-unit id="2d33f13edcd4c6f3ed84da53d2a75dfa7b13538d" translate="yes" xml:space="preserve">
          <source>Both successful and unsuccessful responses can be delivered via &lt;code&gt;&lt;a href=&quot;../../../core/testing/flush&quot;&gt;flush&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">成功した応答と失敗した応答の両方を、 &lt;code&gt;&lt;a href=&quot;../../../core/testing/flush&quot;&gt;flush&lt;/a&gt;()&lt;/code&gt; を介して配信できます。</target>
        </trans-unit>
        <trans-unit id="cb0fb25a4a028a2cda7733bb08d025271905f029" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt; hooks fire after the component's view has been composed. If you modify the code so that the hook updates the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately, you can see that Angular throws an error.</source>
          <target state="translated">両方 &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt; コンポーネントのビューが構成された後に火をフック。フックがコンポーネントのデータバインドされた &lt;code&gt;comment&lt;/code&gt; プロパティをすぐに更新するようにコードを変更すると、Angularがエラーをスローすることがわかります。</target>
        </trans-unit>
        <trans-unit id="14a724638caaef22868a74a59cb2138ec4f02873" translate="yes" xml:space="preserve">
          <source>Break circularities with a forward class reference (&lt;code&gt;forwardRef&lt;/code&gt;)</source>
          <target state="translated">前方クラス参照（ &lt;code&gt;forwardRef&lt;/code&gt; ）で循環性を破る</target>
        </trans-unit>
        <trans-unit id="19e2cd28b09ef3682ded6d1478601de1d625cc30" translate="yes" xml:space="preserve">
          <source>Break the circularity with &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt; で循環を解消します。</target>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes" xml:space="preserve">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="caa7ae8131b0e358dca91885f3b90f7468dff074" translate="yes" xml:space="preserve">
          <source>Browser support</source>
          <target state="translated">ブラウザ対応</target>
        </trans-unit>
        <trans-unit id="2d988f6baee731e13c5ed58b15e6403c0f5d437c" translate="yes" xml:space="preserve">
          <source>Browser support for custom elements</source>
          <target state="translated">カスタム要素のブラウザサポート</target>
        </trans-unit>
        <trans-unit id="3e5c46f54fdcf3e89274890de50e1bbd5f0cdb1b" translate="yes" xml:space="preserve">
          <source>BrowserAnimationsModule</source>
          <target state="translated">BrowserAnimationsModule</target>
        </trans-unit>
        <trans-unit id="1b19571f37782c3b7a2529d132b7eeafffb9c8b7" translate="yes" xml:space="preserve">
          <source>BrowserDynamicTestingModule</source>
          <target state="translated">BrowserDynamicTestingModule</target>
        </trans-unit>
        <trans-unit id="489e469aaed844504ea81ebeeb21f713325a5454" translate="yes" xml:space="preserve">
          <source>BrowserModule</source>
          <target state="translated">BrowserModule</target>
        </trans-unit>
        <trans-unit id="39e941a302cc8d62cbd7fd0aa04f1f300f6db868" translate="yes" xml:space="preserve">
          <source>BrowserTestingModule</source>
          <target state="translated">BrowserTestingModule</target>
        </trans-unit>
        <trans-unit id="1170851384c0cf693a98b5cd9a90dfd12e351c34" translate="yes" xml:space="preserve">
          <source>BrowserTransferStateModule</source>
          <target state="translated">BrowserTransferStateModule</target>
        </trans-unit>
        <trans-unit id="b53e7dea10c2c28052bb71dd93c9ae381907b043" translate="yes" xml:space="preserve">
          <source>Browsers (Desktop &amp;amp; Mobile)</source>
          <target state="translated">ブラウザ（デスクトップとモバイル）</target>
        </trans-unit>
        <trans-unit id="7472f880b5ebe7a2522b3da766321267d335a017" translate="yes" xml:space="preserve">
          <source>Browsers can't execute TypeScript directly. Typescript must be &quot;transpiled&quot; into JavaScript using the &lt;em&gt;tsc&lt;/em&gt; compiler, which requires some configuration.</source>
          <target state="translated">ブラウザはTypeScriptを直接実行できません。&lt;em&gt;Typescript&lt;/em&gt;は、いくつかの構成を必要とする&lt;em&gt;tsc&lt;/em&gt;コンパイラを使用してJavaScriptに「トランスパイル」する必要があります。</target>
        </trans-unit>
        <trans-unit id="7331906d686c4ec9c7fb5e96c8a75a52e6649767" translate="yes" xml:space="preserve">
          <source>Browsers list The &lt;code&gt;browserslist&lt;/code&gt; configuration file is included in your application &lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;project structure&lt;/a&gt; and provides the minimum browsers your application supports. See the &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist spec&lt;/a&gt; for complete configuration options.</source>
          <target state="translated">ブラウザーリスト &lt;code&gt;browserslist&lt;/code&gt; 構成ファイルは、アプリケーション&lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;プロジェクト構造に&lt;/a&gt;含まれており、アプリケーションがサポートする最小のブラウザーを提供します。完全な構成オプションについては、&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5fd48f06506544e724e31bc1d27319aa4940aeb2" translate="yes" xml:space="preserve">
          <source>Browsers such as Chrome provide developer tools for interacting with service workers. Such tools can be powerful when used properly, but there are a few things to keep in mind.</source>
          <target state="translated">Chrome などのブラウザには、サービス ワーカーと対話するための開発者ツールが用意されています。このようなツールは適切に使用すれば強力なものになりますが、いくつかの注意点があります。</target>
        </trans-unit>
        <trans-unit id="7ac1c219ed9db5609130bf09817b19913aa7f75c" translate="yes" xml:space="preserve">
          <source>Browserslist</source>
          <target state="translated">Browserslist</target>
        </trans-unit>
        <trans-unit id="5f4763bbd263cd5434b3654e03112db678b6b161" translate="yes" xml:space="preserve">
          <source>Build Result</source>
          <target state="translated">ビルド結果</target>
        </trans-unit>
        <trans-unit id="c674564300cade5252a5db51fce3d3eeff1e91ac" translate="yes" xml:space="preserve">
          <source>Build a simple attribute directive</source>
          <target state="translated">シンプルな属性ディレクティブを構築する</target>
        </trans-unit>
        <trans-unit id="63a1d3442e3d58ff2cfb7be5462ee9514f437b01" translate="yes" xml:space="preserve">
          <source>Build a template-driven form</source>
          <target state="translated">テンプレート駆動のフォームを構築する</target>
        </trans-unit>
        <trans-unit id="a1ab8e1d24bf4b36f9398025bfb1689b7314ddb9" translate="yes" xml:space="preserve">
          <source>Build an Angular form with a component and template.</source>
          <target state="translated">コンポーネントとテンプレートでAngularフォームを構築します。</target>
        </trans-unit>
        <trans-unit id="0b16ed964ca1d0b9633697442124487216e8c15a" translate="yes" xml:space="preserve">
          <source>Build and launch the app with debugger by clicking the &lt;strong&gt;Run&lt;/strong&gt; button or by pressing &lt;code&gt;F5&lt;/code&gt;.</source>
          <target state="translated">[ &lt;strong&gt;実行&lt;/strong&gt; ]ボタンをクリックするか &lt;code&gt;F5&lt;/code&gt; キーを押して、デバッガーでアプリをビルドして起動します。</target>
        </trans-unit>
        <trans-unit id="a841e5989fc4a3f8e040bebb8d4e89ce53e2ea2d" translate="yes" xml:space="preserve">
          <source>Build and run the server again:</source>
          <target state="translated">サーバを構築して再度実行します。</target>
        </trans-unit>
        <trans-unit id="d6e1e6845b1c24e4e46ae9e1811d147c1fd4b03b" translate="yes" xml:space="preserve">
          <source>Build artifacts (JS and CSS bundles).</source>
          <target state="translated">アーティファクト(JSとCSSのバンドル)を構築します。</target>
        </trans-unit>
        <trans-unit id="fe668d7b9bd1bdd039e15e4e4878232c9f14cf75" translate="yes" xml:space="preserve">
          <source>Build for multiple locales</source>
          <target state="translated">複数の地域用に構築</target>
        </trans-unit>
        <trans-unit id="7d8144a3c59905f4260f61d31b9b788252b947a5" translate="yes" xml:space="preserve">
          <source>Build from the command line</source>
          <target state="translated">コマンドラインからのビルド</target>
        </trans-unit>
        <trans-unit id="2ecff7853ffb7bfb041edba485c0757a60f0fd6c" translate="yes" xml:space="preserve">
          <source>Build result</source>
          <target state="translated">ビルド結果</target>
        </trans-unit>
        <trans-unit id="55d71d005605b731983e1212cab3067f5e36bf4a" translate="yes" xml:space="preserve">
          <source>Build target</source>
          <target state="translated">ビルドターゲット</target>
        </trans-unit>
        <trans-unit id="b97a5bae4bb0dc9aea2ba383a4c9d6b011be2aa7" translate="yes" xml:space="preserve">
          <source>Build the basic form.</source>
          <target state="translated">基本形を構築します。</target>
        </trans-unit>
        <trans-unit id="4ebaaba151b4fa323c7853acaedf81d4316c1d03" translate="yes" xml:space="preserve">
          <source>Build the form</source>
          <target state="translated">フォームの構築</target>
        </trans-unit>
        <trans-unit id="0e3634fbe639279233d0d5ba2b0a7a9a5c30747b" translate="yes" xml:space="preserve">
          <source>Build the library. You cannot use a library before it is built.</source>
          <target state="translated">ライブラリを構築します。ライブラリをビルドする前にライブラリを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="10f95352487e622a50d6a09f351680b2e04970de" translate="yes" xml:space="preserve">
          <source>Build using Ahead of Time compilation.</source>
          <target state="translated">Ahead of Timeコンパイルを使用してビルドします。</target>
        </trans-unit>
        <trans-unit id="12147b38fd3c8e49fbaaf0d27106cec8cf6bf7a1" translate="yes" xml:space="preserve">
          <source>Build your app for production &lt;em&gt;including the source maps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ソースマップを含む&lt;/em&gt;本番用のアプリを構築します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4e1f7908a8fa15b11aa7a8fec3020d998a1cb595" translate="yes" xml:space="preserve">
          <source>Build your library and schematics</source>
          <target state="translated">ライブラリと回路図の構築</target>
        </trans-unit>
        <trans-unit id="3a8f2b080985e84ff16f5bd0acaede8ad59a5039" translate="yes" xml:space="preserve">
          <source>Build your project using Github project name, with the Angular CLI command &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; and the options shown here:</source>
          <target state="translated">Angular CLIコマンド&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;と以下に示すオプションを使用して、Githubプロジェクト名を使用してプロジェクトをビルドします。</target>
        </trans-unit>
        <trans-unit id="338940014efbeb76bf00b87e6fd1a0b5d3d0dc9f" translate="yes" xml:space="preserve">
          <source>Builder input</source>
          <target state="translated">ビルダー入力</target>
        </trans-unit>
        <trans-unit id="7ef7408461360b6d8e74a044b183f8de6fc8be2e" translate="yes" xml:space="preserve">
          <source>Builder project structure</source>
          <target state="translated">ビルダープロジェクトの構造</target>
        </trans-unit>
        <trans-unit id="7cec90732540af8e27f18d76711bdd709e2926f7" translate="yes" xml:space="preserve">
          <source>Builders can be synchronous or asynchronous, execute once or watch for external events, and can schedule other builders or targets.</source>
          <target state="translated">ビルダーは同期または非同期で、一度実行したり、外部イベントを監視したりすることができ、他のビルダーやターゲットをスケジュールすることができます。</target>
        </trans-unit>
        <trans-unit id="5a596c9d2eb919381175f356f2ed5bae199a81aa" translate="yes" xml:space="preserve">
          <source>Builders definition.</source>
          <target state="translated">ビルダーズの定義。</target>
        </trans-unit>
        <trans-unit id="3fc44ef66b534b8d05ed7f18b305da65952fa0a1" translate="yes" xml:space="preserve">
          <source>Builders have option defaults specified in the &lt;code&gt;angular.json&lt;/code&gt; configuration file, which can be overwritten by an alternate configuration for the target, and further overwritten by command line flags.</source>
          <target state="translated">ビルダーには、 &lt;code&gt;angular.json&lt;/code&gt; 構成ファイルで指定されたオプションのデフォルトがあります。これは、ターゲットの代替構成で上書きでき、さらにコマンドラインフラグで上書きできます。</target>
        </trans-unit>
        <trans-unit id="3c40455fd1dd802b3a381a69ec531aea076ff8b2" translate="yes" xml:space="preserve">
          <source>Building a template-driven form</source>
          <target state="translated">テンプレート駆動のフォームを構築する</target>
        </trans-unit>
        <trans-unit id="c3dd970b85d3d73006d2f7e6aba2ff655bbf3277" translate="yes" xml:space="preserve">
          <source>Building accessible web experience often involves setting &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA attributes&lt;/a&gt; to provide semantic meaning where it might otherwise be missing. Use &lt;a href=&quot;attribute-binding&quot;&gt;attribute binding&lt;/a&gt; template syntax to control the values of accessibility-related attributes.</source>
          <target state="translated">アクセシブルなWebエクスペリエンスを構築するには、&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA属性&lt;/a&gt;を設定して、他の方法では欠落している可能性のあるセマンティックな意味を提供する必要があります。&lt;a href=&quot;attribute-binding&quot;&gt;属性バインディング&lt;/a&gt;テンプレート構文を使用して、アクセシビリティ関連の属性の値を制御します。</target>
        </trans-unit>
        <trans-unit id="58423fd7c3d8a2b3b0288c434ca19a63c03fddd4" translate="yes" xml:space="preserve">
          <source>Building accessible web experience often involves setting &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA attributes&lt;/a&gt; to provide semantic meaning where it might otherwise be missing. Use &lt;a href=&quot;template-syntax#attribute-binding&quot;&gt;attribute binding&lt;/a&gt; template syntax to control the values of accessibility-related attributes.</source>
          <target state="translated">アクセシブルなWebエクスペリエンスを構築するには、&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA属性&lt;/a&gt;を設定して、本来欠落している可能性のあるセマンティックな意味を提供することがよくあります。&lt;a href=&quot;template-syntax#attribute-binding&quot;&gt;属性バインディング&lt;/a&gt;テンプレート構文を使用して、アクセシビリティ関連の属性の値を制御します。</target>
        </trans-unit>
        <trans-unit id="ffb0d65cff95173c9727f4ed3f1046730b30b49a" translate="yes" xml:space="preserve">
          <source>Building and rebuilding your library</source>
          <target state="translated">図書館の構築と再構築</target>
        </trans-unit>
        <trans-unit id="f7125bd3b210a7172b096873cf19164849e1f6b3" translate="yes" xml:space="preserve">
          <source>Building and serving Angular apps</source>
          <target state="translated">Angularアプリの構築と提供</target>
        </trans-unit>
        <trans-unit id="38044acdb5b1bf0f8b98c5b7c6e09d68e6dbf057" translate="yes" xml:space="preserve">
          <source>Building and serving from disk</source>
          <target state="translated">ディスクからのビルドとサーブ</target>
        </trans-unit>
        <trans-unit id="5f44ed433a18b75e46be9d13f403d1b209869c46" translate="yes" xml:space="preserve">
          <source>Building and serving the app for a given locale, using the translated text.</source>
          <target state="translated">翻訳されたテキストを使用して、指定されたロケール用のアプリを構築して提供します。</target>
        </trans-unit>
        <trans-unit id="a441046d59751ffd55f2c40318e3e1ef1eb52dca" translate="yes" xml:space="preserve">
          <source>Building dynamic forms</source>
          <target state="translated">ダイナミックなフォームの構築</target>
        </trans-unit>
        <trans-unit id="14d7cef5094185320d88e754c57130b67a38a3c8" translate="yes" xml:space="preserve">
          <source>Building handcrafted forms can be costly and time-consuming, especially if you need a great number of them, they're similar to each other, and they change frequently to meet rapidly changing business and regulatory requirements.</source>
          <target state="translated">手作りのフォームを構築することは、コストと時間がかかり、特に大量に必要な場合には時間がかかります。</target>
        </trans-unit>
        <trans-unit id="99b633b8b55f4a4a0e4b874bf81f4324ac607609" translate="yes" xml:space="preserve">
          <source>Building locally</source>
          <target state="translated">地域に根ざした建物</target>
        </trans-unit>
        <trans-unit id="ea19476edd9c5bc2591da244c58924cd2d0448a0" translate="yes" xml:space="preserve">
          <source>Building with Bazel</source>
          <target state="translated">バゼルを使った建物</target>
        </trans-unit>
        <trans-unit id="592a2f2da2ad52e24a8c5d5555474faed5b11d88" translate="yes" xml:space="preserve">
          <source>Building your schematics</source>
          <target state="translated">回路図の作成</target>
        </trans-unit>
        <trans-unit id="74dbfc5fed244390666be30faae5de6b93204f0d" translate="yes" xml:space="preserve">
          <source>Builds a class that encapsulates the functionality of the provided component and uses the configuration information to provide more context to the class. Takes the component factory's inputs and outputs to convert them to the proper custom element API and add hooks to input changes.</source>
          <target state="translated">提供されたコンポーネントの機能をカプセル化し、設定情報を使用してクラスにコンテキストを提供するクラスをビルドします。コンポーネントファクトリの入力と出力を受け取り、それらを適切なカスタム要素APIに変換し、入力の変更にフックを追加します。</target>
        </trans-unit>
        <trans-unit id="232819cbe5519dee306aa0895ba18910a5ec7859" translate="yes" xml:space="preserve">
          <source>Builds a factory for producing a defined animation.</source>
          <target state="translated">定義されたアニメーションを作成するためのファクトリーを構築します。</target>
        </trans-unit>
        <trans-unit id="29a6ebd47094fe74b2826b82789b68332b6c3967" translate="yes" xml:space="preserve">
          <source>Builds and serves an Angular app, then runs end-to-end tests using Protractor.</source>
          <target state="translated">Angular アプリをビルドして提供し、Protractor を使ってエンドツーエンドのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="e2a7d33be0b02d6a586a825825ca723c6f2b203a" translate="yes" xml:space="preserve">
          <source>Builds and serves your app, rebuilding on file changes.</source>
          <target state="translated">アプリをビルドしてサービスを提供し、ファイルの変更に基づいて再構築します。</target>
        </trans-unit>
        <trans-unit id="3699f6d3ab9939f61e3dfd80b624361cc8f93a32" translate="yes" xml:space="preserve">
          <source>Built-in &lt;code&gt;structural&lt;/code&gt; directives</source>
          <target state="translated">組み込みの &lt;code&gt;structural&lt;/code&gt; ディレクティブ</target>
        </trans-unit>
        <trans-unit id="788c41440c17fec4a3ceedf2627edc4891b3e70f" translate="yes" xml:space="preserve">
          <source>Built-in attribute directives</source>
          <target state="translated">組み込みの属性ディレクティブ</target>
        </trans-unit>
        <trans-unit id="34fc1e1b84850bf75a3a8ab79f67893426bb2dbb" translate="yes" xml:space="preserve">
          <source>Built-in directives</source>
          <target state="translated">内蔵ディレクティブ</target>
        </trans-unit>
        <trans-unit id="f1881fdacac2d002db723126c9b7e1fc54324ce1" translate="yes" xml:space="preserve">
          <source>Built-in directives use only public APIs; that is, they do not have special access to any private APIs that other directives can't access.</source>
          <target state="translated">組み込みのディレクティブはパブリックAPIのみを使用します。 つまり、他のディレクティブがアクセスできないプライベートAPIへの特別なアクセスはありません。</target>
        </trans-unit>
        <trans-unit id="14c8e0c882b739a0956ce99a903aa60c7db8e7b0" translate="yes" xml:space="preserve">
          <source>Built-in pipes</source>
          <target state="translated">内蔵パイプ</target>
        </trans-unit>
        <trans-unit id="f846a8ef31181b4f0e27e3db37268decf8f99a23" translate="yes" xml:space="preserve">
          <source>Built-in template functions</source>
          <target state="translated">テンプレート機能を内蔵</target>
        </trans-unit>
        <trans-unit id="04b04243ac876d4efb6192834885a2963c11c58b" translate="yes" xml:space="preserve">
          <source>Built-in validator functions</source>
          <target state="translated">内蔵バリデータ機能</target>
        </trans-unit>
        <trans-unit id="853adbe6a9c9185cf38b20fec800da9b6c47bf4a" translate="yes" xml:space="preserve">
          <source>Built-in validators</source>
          <target state="translated">内蔵バリデータ</target>
        </trans-unit>
        <trans-unit id="23270ff48782c619fd08871d4873b8a228d6bad4" translate="yes" xml:space="preserve">
          <source>Bundling: concatenates your many application and library files into a few bundles.</source>
          <target state="translated">バンドル:多数のアプリケーションやライブラリファイルをいくつかのバンドルに連結します。</target>
        </trans-unit>
        <trans-unit id="b77c50fe85e215a333530a2770df5fc00971a9a0" translate="yes" xml:space="preserve">
          <source>But a component is more than just its class. A component interacts with the DOM and with other components. The &lt;em&gt;class-only&lt;/em&gt; tests can tell you about class behavior. They cannot tell you if the component is going to render properly, respond to user input and gestures, or integrate with its parent and child components.</source>
          <target state="translated">しかし、コンポーネントは単なるクラスではありません。コンポーネントは、DOMおよび他のコンポーネントと対話します。&lt;em&gt;クラスのみの&lt;/em&gt;テストは、クラスの振る舞いをご紹介することができます。コンポーネントが適切にレンダリングするのか、ユーザーの入力やジェスチャーに応答するのか、親コンポーネントと子コンポーネントと統合するのかはわかりません。</target>
        </trans-unit>
        <trans-unit id="dd16c28b37bfac9fd975ec035f73fbe88687604a" translate="yes" xml:space="preserve">
          <source>But a component or directive shouldn't blindly trust &lt;em&gt;other&lt;/em&gt; components and directives. The properties of a component or directive are hidden from binding by default. They are &lt;em&gt;private&lt;/em&gt; from an Angular binding perspective. When adorned with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator, the property becomes &lt;em&gt;public&lt;/em&gt; from an Angular binding perspective. Only then can it be bound by some other component or directive.</source>
          <target state="translated">ただし、コンポーネントまたはディレクティブは、&lt;em&gt;他の&lt;/em&gt;コンポーネントやディレクティブを盲目的に信頼すべきではありません。コンポーネントまたはディレクティブのプロパティは、デフォルトではバインドから隠されています。それらはAngularバインディングの観点から&lt;em&gt;プライベート&lt;/em&gt;です。飾られたときに &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; デコレータ、プロパティはなり&lt;em&gt;公共の&lt;/em&gt;角度結合視点から。そうして初めて、他のコンポーネントまたはディレクティブによってバインドできます。</target>
        </trans-unit>
        <trans-unit id="4c3ff50267ef1b91995b1701f72f05cd08be99af" translate="yes" xml:space="preserve">
          <source>But always implement a &lt;em&gt;pure pipe&lt;/em&gt; with a &lt;em&gt;pure function&lt;/em&gt;. Otherwise, you'll see many console errors regarding expressions that changed after they were checked.</source>
          <target state="translated">しかし、常に&lt;em&gt;純粋な関数で&lt;/em&gt;&lt;em&gt;純粋なパイプ&lt;/em&gt;を実装し&lt;em&gt;ます&lt;/em&gt;。そうしないと、チェック後に変更された式に関する多くのコンソールエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="1dad324eea1e02746dc15d325e015070ea526f47" translate="yes" xml:space="preserve">
          <source>But an interceptor can change this to an &lt;em&gt;observable&lt;/em&gt; that emits more than once.</source>
          <target state="translated">しかし、インターセプターはこれを複数回放出する&lt;em&gt;オブザーバブルに&lt;/em&gt;変更できます。</target>
        </trans-unit>
        <trans-unit id="80bd50bba245c58f59752096de59db1d05418d3c" translate="yes" xml:space="preserve">
          <source>But clicking a link in an email, entering it in the browser address bar, or merely refreshing the browser while on the hero detail page &amp;mdash; all of these actions are handled by the browser itself, &lt;em&gt;outside&lt;/em&gt; the running application. The browser makes a direct request to the server for that URL, bypassing the router.</source>
          <target state="translated">ただし、電子メールのリンクをクリックするか、ブラウザーのアドレスバーにリンクを入力するか、ヒーロー詳細ページでブラウザーを更新するだけです。これらのアクションはすべて、実行中のアプリケーションの&lt;em&gt;外部で&lt;/em&gt;ブラウザー自体によって処理されます。ブラウザーは、ルーターをバイパスして、そのURLをサーバーに直接要求します。</target>
        </trans-unit>
        <trans-unit id="fa03a76338d6f6af61aea8774405dc940313388b" translate="yes" xml:space="preserve">
          <source>But first, make a few changes to the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">ただし、最初に &lt;code&gt;AppRoutingModule&lt;/code&gt; にいくつかの変更を加えます。</target>
        </trans-unit>
        <trans-unit id="c27f7b3e935b9fc74c79376898a71d98935aa436" translate="yes" xml:space="preserve">
          <source>But in the absence of a compelling reason to keep them around, your preference should be to remove DOM elements that the user can't see and recover the unused resources with a structural directive like &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">しかし、それらを保持する説得力のある理由がない場合は、ユーザーが表示できないDOM要素を削除し、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; などの構造ディレクティブを使用して未使用のリソースを回復することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3edb9da96e057d100aa5383d0834fa22e414c6e1" translate="yes" xml:space="preserve">
          <source>But interceptors that examine and modify the response from &lt;code&gt;next.handle()&lt;/code&gt; will see all of these events. Your interceptor should return &lt;em&gt;every event untouched&lt;/em&gt; unless it has a &lt;em&gt;compelling reason to do otherwise&lt;/em&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;next.handle()&lt;/code&gt; からの応答を調べて変更するインターセプターは、これらのイベントをすべて表示します。インターセプターは、&lt;em&gt;他の方法でやむを得ない理由&lt;/em&gt;がない限り、&lt;em&gt;すべてのイベントをそのまま&lt;/em&gt;返す必要&lt;em&gt;があります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a36ff3370e272264824942a257a5f735eab10803" translate="yes" xml:space="preserve">
          <source>But on the shared or production server, you might serve the app from a subfolder. For example, when the URL to load the app is something like &lt;code&gt;http://www.mysite.com/my/app/&lt;/code&gt;, the subfolder is &lt;code&gt;my/app/&lt;/code&gt; and you should add &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt; to the server version of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">ただし、共有サーバーまたは本番サーバーでは、サブフォルダーからアプリを提供する場合があります。たとえば、アプリをロードするためのURLが &lt;code&gt;http://www.mysite.com/my/app/&lt;/code&gt; のような場合、サブフォルダーは &lt;code&gt;my/app/&lt;/code&gt; あり、 &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt; を追加する必要があります&amp;gt; &lt;code&gt;index.html&lt;/code&gt; のサーバーバージョンに。</target>
        </trans-unit>
        <trans-unit id="3b97cebd5bc435fb7714257eba2ba270e61f5214" translate="yes" xml:space="preserve">
          <source>But the compiler won't throw an error when it encounters &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;. It simply renders them as empty tags and the browser ignores them.</source>
          <target state="translated">ただし、コンパイラは、 &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; 、または &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; もエラーをスローしません。それは単にそれらを空のタグとしてレンダリングし、ブラウザはそれらを無視します。</target>
        </trans-unit>
        <trans-unit id="a6e1ffc936f0d832154812aedbbbdd45670ea6cb" translate="yes" xml:space="preserve">
          <source>But the router is still loading the &lt;code&gt;AdminModule&lt;/code&gt; even if the user can't visit any of its components. Ideally, you'd only load the &lt;code&gt;AdminModule&lt;/code&gt; if the user is logged in.</source>
          <target state="translated">ただし、ユーザーがそのコンポーネントに &lt;code&gt;AdminModule&lt;/code&gt; 場合でも、ルーターは引き続きAdminModuleをロードしています。理想的には、ユーザーがログインしている場合にのみ &lt;code&gt;AdminModule&lt;/code&gt; をロードします。</target>
        </trans-unit>
        <trans-unit id="5cf7129241a1e1a5c0fa7cf971437230767eaf7b" translate="yes" xml:space="preserve">
          <source>But the test's asynchronous nature is revealed by the call to &lt;code&gt;fixture.whenStable()&lt;/code&gt;, which breaks the linear flow of control.</source>
          <target state="translated">しかし、テストの非同期性は、制御の線形フローを壊す &lt;code&gt;fixture.whenStable()&lt;/code&gt; への呼び出しによって明らかにされます。</target>
        </trans-unit>
        <trans-unit id="8cea244f43f2793e842872ae957b0a1f13e42a42" translate="yes" xml:space="preserve">
          <source>But there's plenty of template complexity even in this simple form.</source>
          <target state="translated">しかし、このシンプルな形でもテンプレートの複雑さは十分にあります。</target>
        </trans-unit>
        <trans-unit id="7b11b3e52dfeccee3a7be0007f3d3766d07568c9" translate="yes" xml:space="preserve">
          <source>But when using them from AngularJS templates, you must use kebab-case:</source>
          <target state="translated">しかし、AngularJSのテンプレートから使用する場合は、kebab-caseを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="943e02425418f80a99a67821520af9a48faca8cd" translate="yes" xml:space="preserve">
          <source>But you can also start adding &lt;em&gt;type annotations&lt;/em&gt; to get even more out of TypeScript's type system. For instance, you can annotate the checkmark filter so that it explicitly expects booleans as arguments. This makes it clearer what the filter is supposed to do.</source>
          <target state="translated">しかし、&lt;em&gt;タイプ注釈の&lt;/em&gt;追加を開始して、TypeScriptのタイプシステムをさらに活用することもできます。たとえば、ブール値を引数として明示的に期待するように、チェックマークフィルターに注釈を付けることができます。これにより、フィルターが何をすべきかが明確になります。</target>
        </trans-unit>
        <trans-unit id="cfadbd7a577133041a60f331a0e2ad6af20f3f8b" translate="yes" xml:space="preserve">
          <source>By</source>
          <target state="translated">By</target>
        </trans-unit>
        <trans-unit id="9979e502bac7109b83a440b9de42340f258ddfa0" translate="yes" xml:space="preserve">
          <source>By adding &lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; to the page you generate links that run sample code in the Stackblitz live coding environment and download that code to the reader's file system.</source>
          <target state="translated">&lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; をページに追加することで、Stackblitzライブコーディング環境でサンプルコードを実行するリンクを生成し、そのコードをリーダーのファイルシステムにダウンロードします。</target>
        </trans-unit>
        <trans-unit id="2cf4fb2c70012c8404bf6ea7e18e7ae9d001da1c" translate="yes" xml:space="preserve">
          <source>By clicking a hero in the dashboard.</source>
          <target state="translated">ダッシュボードのヒーローをクリックすることで</target>
        </trans-unit>
        <trans-unit id="06c882c348dd5f75caf8d98a0cc0eb826d015cff" translate="yes" xml:space="preserve">
          <source>By clicking a hero in the heroes list.</source>
          <target state="translated">ヒーローリストのヒーローをクリックすることで</target>
        </trans-unit>
        <trans-unit id="0ea68802c089f45528d4b35900b0fde6854239f2" translate="yes" xml:space="preserve">
          <source>By clicking the browser's back button, you can go back to the hero list or dashboard view, depending upon which sent you to the detail view.</source>
          <target state="translated">ブラウザの戻るボタンをクリックすると、どちらが詳細ビューに送ったかに応じて、ヒーローリストやダッシュボードビューに戻ることができます。</target>
        </trans-unit>
        <trans-unit id="0a5dc8091fb2b001718c9b188eeb628b36637423" translate="yes" xml:space="preserve">
          <source>By compiling your application using the &lt;code&gt;ngc&lt;/code&gt; command-line tool, you can bootstrap directly to a module factory, so you don't need to include the Angular compiler in your JavaScript bundle.</source>
          <target state="translated">&lt;code&gt;ngc&lt;/code&gt; コマンドラインツールを使用してアプリケーションをコンパイルすることで、モジュールファクトリに直接ブートストラップできるため、JavaScriptバンドルにAngularコンパイラーを含める必要はありません。</target>
        </trans-unit>
        <trans-unit id="e83663bb4eeda0ed5495f37b7c40ecac703dc7a4" translate="yes" xml:space="preserve">
          <source>By contrast, Angular registers &lt;code&gt;AppComponent&lt;/code&gt; providers with the &lt;code&gt;AppComponent&lt;/code&gt;'s own injector. &lt;code&gt;AppComponent&lt;/code&gt; services are available only to that component and its component tree. They have component scope.</source>
          <target state="translated">対照的に、Angularは &lt;code&gt;AppComponent&lt;/code&gt; プロバイダーを &lt;code&gt;AppComponent&lt;/code&gt; 独自のインジェクターに登録します。 &lt;code&gt;AppComponent&lt;/code&gt; サービスは、そのコンポーネントとそのコンポーネントツリーでのみ使用できます。コンポーネントのスコープがあります。</target>
        </trans-unit>
        <trans-unit id="d00a813e7486c3605092212dc4aceb4cad4fd7d3" translate="yes" xml:space="preserve">
          <source>By convention, HTML attributes use lowercase names (&lt;code&gt;tabindex&lt;/code&gt;), while properties use camelCase names (&lt;code&gt;tabIndex&lt;/code&gt;).</source>
          <target state="translated">慣例により、HTML属性は小文字の名前（ &lt;code&gt;tabindex&lt;/code&gt; ）を使用し、プロパティはキャメルケース名（ &lt;code&gt;tabIndex&lt;/code&gt; ）を使用します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
