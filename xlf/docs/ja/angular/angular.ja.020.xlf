<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="7546ffdac7d49a159cc2a7bfd8a978c1ac8ae6e9" translate="yes" xml:space="preserve">
          <source>You also added a button to the template and bound its click event to the component's &lt;code&gt;toggleFormat()&lt;/code&gt; method. That method toggles the component's &lt;code&gt;format&lt;/code&gt; property between a short form (&lt;code&gt;'shortDate'&lt;/code&gt;) and a longer form (&lt;code&gt;'fullDate'&lt;/code&gt;).</source>
          <target state="translated">また、テンプレートにボタンを追加し、そのクリックイベントをコンポーネントの &lt;code&gt;toggleFormat()&lt;/code&gt; メソッドにバインドしました。このメソッドは、コンポーネントの &lt;code&gt;format&lt;/code&gt; プロパティを短い形式（ &lt;code&gt;'shortDate'&lt;/code&gt; ）と長い形式（ &lt;code&gt;'fullDate'&lt;/code&gt; ）の間で切り替えます。</target>
        </trans-unit>
        <trans-unit id="2ce0e1b0da9f5a59dd44832d0898a715f4653bdb" translate="yes" xml:space="preserve">
          <source>You also can add a meaning, as shown in this example:</source>
          <target state="translated">また、この例のように意味をつけることもできます。</target>
        </trans-unit>
        <trans-unit id="15b2632ca3271e0f77756a23cb72af8d5bb04a25" translate="yes" xml:space="preserve">
          <source>You also can assign a meaning, description, and id with the &lt;code&gt;i18n-x=&quot;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;&quot;&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;code&gt;i18n-x=&quot;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;&quot;&lt;/code&gt; 構文を使用して、意味、説明、IDを割り当てることもできます。</target>
        </trans-unit>
        <trans-unit id="10a98da0cae7c6adb8bd68337d54cdb31a63cea8" translate="yes" xml:space="preserve">
          <source>You also get this error if you call a function or method in a provider's &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロバイダーの &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; で関数またはメソッドを呼び出す場合にも、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="7e1f41f58655d5c17e141419dff0b657b25791c2" translate="yes" xml:space="preserve">
          <source>You also get this error if you call a function or method in a provider's &lt;code&gt;useValue&lt;/code&gt;.</source>
          <target state="translated">プロバイダーの &lt;code&gt;useValue&lt;/code&gt; で関数またはメソッドを呼び出す場合にも、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2089b8dae07d8e82ca84631e97bd1bbb16dd5f08" translate="yes" xml:space="preserve">
          <source>You also have a CSS style rule that happens to apply to a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; within a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;aragraph.</source>
          <target state="translated">また、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 段落内の &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; に適用されるCSSスタイルルールもあります。</target>
        </trans-unit>
        <trans-unit id="2530ed50ec89ab4424a24856c4687f6f76e28372" translate="yes" xml:space="preserve">
          <source>You also have the option to use Angular's strict mode, which can help you write better, more maintainable code. For more information, see &lt;a href=&quot;strict-mode&quot;&gt;Strict mode&lt;/a&gt;.</source>
          <target state="translated">Angularの厳密モードを使用するオプションもあります。これは、より優れた、より保守しやすいコードを作成するのに役立ちます。詳細については、「&lt;a href=&quot;strict-mode&quot;&gt;厳密モード&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b5c030003397159acdb465424b902cba7eb3348" translate="yes" xml:space="preserve">
          <source>You also import NgModules from Angular &lt;em&gt;libraries&lt;/em&gt; using JavaScript import statements. For example, the following code imports the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; NgModule from the &lt;code&gt;platform-browser&lt;/code&gt; library.</source>
          <target state="translated">また、JavaScriptインポートステートメントを使用して、Angular &lt;em&gt;ライブラリ&lt;/em&gt;からNgModuleをインポートします。たとえば、次のコードは、 &lt;code&gt;platform-browser&lt;/code&gt; ライブラリから &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; NgModuleをインポートします。</target>
        </trans-unit>
        <trans-unit id="80df427e4dcb3187ce4d09900c34780b3fa685e0" translate="yes" xml:space="preserve">
          <source>You also need to install the &lt;code&gt;@angular/upgrade&lt;/code&gt; package via &lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; and add a mapping for the &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; package:</source>
          <target state="translated">&lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; を使用して &lt;code&gt;@angular/upgrade&lt;/code&gt; パッケージをインストールし、 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; パッケージのマッピングを追加する必要もあります。</target>
        </trans-unit>
        <trans-unit id="29781a32c599c88be9b3977e94a9fdb2f316fc17" translate="yes" xml:space="preserve">
          <source>You also need to make a couple of adjustments to the &lt;code&gt;systemjs.config.js&lt;/code&gt; file installed during &lt;a href=&quot;upgrade-setup&quot;&gt;upgrade setup&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;upgrade-setup&quot;&gt;アップグレードのセットアップ&lt;/a&gt;中にインストールされた &lt;code&gt;systemjs.config.js&lt;/code&gt; ファイルにいくつかの調整を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="8555706e03df7109f8967d156364f0a6dc13a6a4" translate="yes" xml:space="preserve">
          <source>You also need to pass the generated &lt;code&gt;MainAngularModuleFactory&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; instead of the custom bootstrap function:</source>
          <target state="translated">また、カスタムブートストラップ関数の代わりに、生成された &lt;code&gt;MainAngularModuleFactory&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="ad188e1c952ebf71da0537e0d4585377e064e1f1" translate="yes" xml:space="preserve">
          <source>You always import the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; symbol from the Angular core library and annotate the component class with &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコアライブラリから常に &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; シンボルをインポートし、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; コンポーネントクラスに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="ed9333b7537e83c795a95ae1a57e1fff6c4a74f8" translate="yes" xml:space="preserve">
          <source>You appear to be inserting the result between element tags and assigning it to attributes. However, interpolation is a special syntax that Angular converts into a &lt;em&gt;property binding&lt;/em&gt;.</source>
          <target state="translated">要素タグの間に結果を挿入し、それを属性に割り当てているようです。ただし、補間は、Angularが&lt;em&gt;プロパティバインディングに&lt;/em&gt;変換する特別な構文です。</target>
        </trans-unit>
        <trans-unit id="5a7e393cc3d71ada2d51725c68312b4ec17e75c0" translate="yes" xml:space="preserve">
          <source>You applied the &lt;code&gt;UppercasePipe&lt;/code&gt; to format the name.</source>
          <target state="translated">&lt;code&gt;UppercasePipe&lt;/code&gt; を適用して名前をフォーマットしました。</target>
        </trans-unit>
        <trans-unit id="f5ed36a67e5c64f7e17a2572545a399b3efa1ad5" translate="yes" xml:space="preserve">
          <source>You are about to break up the app into different &lt;em&gt;feature modules&lt;/em&gt;, each with its own concerns. Then you'll import into the main module and navigate among them.</source>
          <target state="translated">アプリをさまざまな&lt;em&gt;機能モジュール&lt;/em&gt;に分割しようとしてい&lt;em&gt;ますが&lt;/em&gt;、それぞれに独自の懸念があります。次に、メインモジュールにインポートし、それらの間を移動します。</target>
        </trans-unit>
        <trans-unit id="e2970b459e19dea069d0b7a89007485bb9215544" translate="yes" xml:space="preserve">
          <source>You are in effect saying, &lt;em&gt;when the user clicks this link, display the component associated with the &lt;code&gt;compose&lt;/code&gt; route in the &lt;code&gt;popup&lt;/code&gt; outlet&lt;/em&gt;.</source>
          <target state="translated">実際&lt;em&gt;、ユーザーがこのリンクをクリックすると、 &lt;code&gt;compose&lt;/code&gt; ルートに関連付けられているコンポーネントが &lt;code&gt;popup&lt;/code&gt; アウトレットに表示され&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="102f041c09d56efa28154c4310d8010c538086e8" translate="yes" xml:space="preserve">
          <source>You are now an Angular developer! &lt;a href=&quot;https://twitter.com/intent/tweet?url=https://angular.io/start&amp;amp;text=I%20just%20finished%20the%20Angular%20Getting%20Started%20Tutorial&quot;&gt;Share this moment&lt;/a&gt;, tell us what you thought of this Getting Started, or submit &lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;suggestions for future editions&lt;/a&gt;.</source>
          <target state="translated">これでAngular開発者になりました！&lt;a href=&quot;https://twitter.com/intent/tweet?url=https://angular.io/start&amp;amp;text=I%20just%20finished%20the%20Angular%20Getting%20Started%20Tutorial&quot;&gt;この瞬間を共有し&lt;/a&gt;たり、この「はじめに」についての感想を伝えたり&lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;、将来のエディションの提案を&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="476e9c47ab460d9ba9c32e6c28933dd2892867f1" translate="yes" xml:space="preserve">
          <source>You are now an Angular developer! &lt;a href=&quot;https://twitter.com/intent/tweet?url=https://angular.io/start&amp;amp;text=I%20just%20finished%20the%20Angular%20Getting%20Started%20Tutorial&quot;&gt;Share this moment&lt;/a&gt;, tell us what you thought of this get-started exercise, or submit &lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;suggestions for future editions&lt;/a&gt;.</source>
          <target state="translated">これでAngular開発者になりました！&lt;a href=&quot;https://twitter.com/intent/tweet?url=https://angular.io/start&amp;amp;text=I%20just%20finished%20the%20Angular%20Getting%20Started%20Tutorial&quot;&gt;この瞬間を共有&lt;/a&gt;するか、この入門演習についてどう思ったかを教えてください。または&lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;、将来のエディションの提案を&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="d491e7cb90554a81c9e013fa43d65daa0885c8cb" translate="yes" xml:space="preserve">
          <source>You are now running a pure Angular application!</source>
          <target state="translated">これで純粋なAngularアプリケーションを実行していることになります!</target>
        </trans-unit>
        <trans-unit id="7cdcb9196438a46fde40f714f28ea46a2eda0776" translate="yes" xml:space="preserve">
          <source>You begin by creating an initial application using the Angular CLI. Throughout this tutorial, you&amp;rsquo;ll modify and extend that starter application to create the Tour of Heroes app.</source>
          <target state="translated">まず、Angular CLIを使用して初期アプリケーションを作成します。このチュートリアル全体を通して、スターターアプリケーションを変更および拡張して、Tour of Heroesアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="81c902f92fef1f4a20873ab5f68ce68a50ae4af5" translate="yes" xml:space="preserve">
          <source>You can &lt;em&gt;upgrade&lt;/em&gt; this component to Angular using the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; class. By creating a new Angular &lt;strong&gt;directive&lt;/strong&gt; that extends &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; and doing a &lt;code&gt;super&lt;/code&gt; call inside its constructor, you have a fully upgraded AngularJS component to be used inside Angular. All that is left is to add it to &lt;code&gt;AppModule&lt;/code&gt;'s &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; クラスを使用して、このコンポーネントをAngularに&lt;em&gt;アップグレード&lt;/em&gt;でき&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; を拡張する新しいAngular &lt;strong&gt;ディレクティブ&lt;/strong&gt;を作成し、そのコンストラクター内で &lt;code&gt;super&lt;/code&gt; 呼び出しを行うことにより、完全にアップグレードされたAngularJSコンポーネントがAngular内で使用されます。あとは、 &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;declarations&lt;/code&gt; 配列に追加するだけです。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20998ab36110d70249d73d4c59eba8c8f430ac99" translate="yes" xml:space="preserve">
          <source>You can achieve the same effect by putting the label between the &lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; tags:</source>
          <target state="translated">&lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; タグの間にラベルを置くことで同じ効果を得ることができます：</target>
        </trans-unit>
        <trans-unit id="a976e450ce6baa257a935451c00a03775ec464f6" translate="yes" xml:space="preserve">
          <source>You can add a &lt;code&gt;styles&lt;/code&gt; array property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;デコレータに &lt;code&gt;styles&lt;/code&gt; 配列プロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="f8b236444d154157691e47dd5ec8758e169dd7b3" translate="yes" xml:space="preserve">
          <source>You can add a custom user ID to the global configuration, in order to identify unique usage of commands and flags. If that user enables CLI analytics for their own project, your analytics display tracks and labels their individual usage.</source>
          <target state="translated">コマンドやフラグの固有の使用法を識別するために、カスタムユーザーIDをグローバル設定に追加することができます。そのユーザーが自分のプロジェクトでCLI分析を有効にしている場合、分析表示はそのユーザーの個別の使用状況を追跡し、ラベルを付けます。</target>
        </trans-unit>
        <trans-unit id="c41d8625f722b6d12ab3d0d9d1fd15eab13e8f61" translate="yes" xml:space="preserve">
          <source>You can add a description of the text message as the value of the &lt;code&gt;i18n&lt;/code&gt; attribute, as shown in the example below:</source>
          <target state="translated">以下の例に示すように、テキストメッセージの説明を &lt;code&gt;i18n&lt;/code&gt; 属性の値として追加できます。</target>
        </trans-unit>
        <trans-unit id="3a548aa6072e8a5f389f60ba7255c8c982ed70fb" translate="yes" xml:space="preserve">
          <source>You can add a named schematic to your collection that lets your users use the &lt;code&gt;ng generate&lt;/code&gt; command to create an artifact that is defined in your library.</source>
          <target state="translated">名前付きの回路図をコレクションに追加すると、ユーザーは &lt;code&gt;ng generate&lt;/code&gt; コマンドを使用して、ライブラリで定義されたアーティファクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="6b0e4152c7b66e1401017e69b8d3be5bc6b5d6b8" translate="yes" xml:space="preserve">
          <source>You can add a web worker anywhere in your application. For example, to add a web worker to the root component, &lt;code&gt;src/app/app.component.ts&lt;/code&gt;, run the following command.</source>
          <target state="translated">アプリケーションのどこにでもWebワーカーを追加できます。たとえば、Webワーカーをルートコンポーネント &lt;code&gt;src/app/app.component.ts&lt;/code&gt; に追加するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="804aa402eea0a5f3636f449289ff3d8e1c5d5070" translate="yes" xml:space="preserve">
          <source>You can add a web worker anywhere in your application. If the file that contains your expensive computation is &lt;code&gt;src/app/app.component.ts&lt;/code&gt;, you can add a Web Worker using &lt;code&gt;ng generate web-worker app&lt;/code&gt;.</source>
          <target state="translated">アプリケーションのどこにでもWebワーカーを追加できます。高価な計算を含むファイルが &lt;code&gt;src/app/app.component.ts&lt;/code&gt; の場合、 &lt;code&gt;ng generate web-worker app&lt;/code&gt; を使用してWebワーカーを追加できます。</target>
        </trans-unit>
        <trans-unit id="c35cf3736ef659ee5c6923017457205d7fff81b0" translate="yes" xml:space="preserve">
          <source>You can add additional configurations as required. To add a staging environment, create a copy of &lt;code&gt;src/environments/environment.ts&lt;/code&gt; called &lt;code&gt;src/environments/environment.staging.ts&lt;/code&gt;, then add a &lt;code&gt;staging&lt;/code&gt; configuration to &lt;code&gt;angular.json&lt;/code&gt;:</source>
          <target state="translated">必要に応じて構成を追加できます。ステージング環境を追加するには、 &lt;code&gt;src/environments/environment.ts&lt;/code&gt; という &lt;code&gt;src/environments/environment.staging.ts&lt;/code&gt; コピーを作成し、 &lt;code&gt;staging&lt;/code&gt; 構成を &lt;code&gt;angular.json&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="3d0cdd4cae89177221a5eb596d76443fb9dc5975" translate="yes" xml:space="preserve">
          <source>You can add heroes and Angular updates the display when you do. If you click the &lt;code&gt;reset&lt;/code&gt; button, Angular replaces &lt;code&gt;heroes&lt;/code&gt; with a new array of the original heroes and updates the display. If you added the ability to remove or change a hero, Angular would detect those changes and update the display as well.</source>
          <target state="translated">ヒーローを追加すると、Angularが表示を更新します。 &lt;code&gt;reset&lt;/code&gt; ボタンをクリックすると、Angularは &lt;code&gt;heroes&lt;/code&gt; を元のヒーローの新しい配列に置き換え、表示を更新します。ヒーローを削除または変更する機能を追加した場合、Angularはそれらの変更を検出し、表示も更新します。</target>
        </trans-unit>
        <trans-unit id="f9da851a0ebf29126cb8c0a95f65d2989eaf1228" translate="yes" xml:space="preserve">
          <source>You can add interceptors to the chain behind &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; by binding them to the multiprovider for built-in &lt;a href=&quot;../../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt;&lt;code&gt;&lt;a href=&quot;http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">組み込みの&lt;a href=&quot;../../../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; のマルチ &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; インターセプターをバインドすることで、HttpClientの背後にあるチェーンにインターセプターを追加できます。</target>
        </trans-unit>
        <trans-unit id="0041a9c0a677065b5bc25b8f51bd27826e695c6c" translate="yes" xml:space="preserve">
          <source>You can add many more outlets and routes, at the top level and in nested levels, creating a navigation tree with many branches and the router will generate the URLs to go with it.</source>
          <target state="translated">トップレベルとネストされたレベルで、多くの分岐を持つナビゲーションツリーを作成して、より多くのアウトレットとルートを追加することができ、ルータはそれに行くためのURLを生成します。</target>
        </trans-unit>
        <trans-unit id="4f0aadeba9307e5167e25a0728630eec62b5fc43" translate="yes" xml:space="preserve">
          <source>You can add many more outlets and routes, at the top level and in nested levels, creating a navigation tree with many branches. The router will generate the URL to go with it.</source>
          <target state="translated">トップレベルとネストされたレベルで、さらに多くのアウトレットとルートを追加して、多くのブランチを持つナビゲーションツリーを作成することができます。ルータはそれに付随するURLを生成します。</target>
        </trans-unit>
        <trans-unit id="2b46fe91e4d8999030b4a841fb198dd2c9bbb590" translate="yes" xml:space="preserve">
          <source>You can add more configuration options to this target environment as well. Any option that your build supports can be overridden in a build target configuration.</source>
          <target state="translated">このターゲット環境にも、より多くの設定オプションを追加することができます。ビルドがサポートしているオプションは、ビルドターゲットの設定で上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="624073ff88178c49ce6ac9f3f53dc62b5ef55ce0" translate="yes" xml:space="preserve">
          <source>You can add or remove an element from the DOM by applying an &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive to a host element. Bind the directive to a condition expression like &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; in this example.</source>
          <target state="translated">ホスト要素に &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ディレクティブを適用することで、DOMに要素を追加または削除できます。この例では、ディレクティブを &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; のような条件式にバインドします。</target>
        </trans-unit>
        <trans-unit id="e1a30ea67adb341f184e1feb12fdfa4b63ac41e5" translate="yes" xml:space="preserve">
          <source>You can add or remove an element from the DOM by applying an &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive to a host element. Bind the directive to a condition expression like &lt;code&gt;isActive&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ディレクティブをホスト要素に適用することにより、DOMから要素を追加または削除できます。この例では、ディレクティブを &lt;code&gt;isActive&lt;/code&gt; のような条件式にバインドします。</target>
        </trans-unit>
        <trans-unit id="7c7b2d071c37eb0b443337c2fa894c52fca04574" translate="yes" xml:space="preserve">
          <source>You can add or remove plural cases as needed for each language.</source>
          <target state="translated">言語ごとに必要に応じて複数のケースを追加したり削除したりすることができます。</target>
        </trans-unit>
        <trans-unit id="dd9314d95d3d912f79fd878707764d9ea61a6b87" translate="yes" xml:space="preserve">
          <source>You can add or remove plural cases, with each language having its own cardinality. (See &lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&quot;&gt;CLDR plural rules&lt;/a&gt;.)</source>
          <target state="translated">複数のケースを追加または削除できます。各言語には独自のカーディナリティがあります。（&lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&quot;&gt;CLDR複数規則を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="3eb016549380e1871f3b0d3d837dfe5451882379" translate="yes" xml:space="preserve">
          <source>You can add target-specific configuration files, such as &lt;code&gt;environment.prod.ts&lt;/code&gt;. The following sets content sets default values for the production build target:</source>
          <target state="translated">&lt;code&gt;environment.prod.ts&lt;/code&gt; などのターゲット固有の構成ファイルを追加できます。次のセットの内容は、本番ビルドターゲットのデフォルト値を設定します。</target>
        </trans-unit>
        <trans-unit id="c9a1d641689d7ce9b785cf821dfd72080140b408" translate="yes" xml:space="preserve">
          <source>You can also add &lt;em&gt;optional&lt;/em&gt; information to a route request. For example, when returning to the hero-detail.component.ts list from the hero detail view, it would be nice if the viewed hero was preselected in the list.</source>
          <target state="translated">ルート要求に&lt;em&gt;オプションの&lt;/em&gt;情報を追加することもでき&lt;em&gt;ます&lt;/em&gt;。たとえば、ヒーロー詳細ビューからhero-detail.component.tsリストに戻る場合、表示されているヒーローがリストで事前に選択されていると便利です。</target>
        </trans-unit>
        <trans-unit id="5759614dda58e9a847b95f8209881d0ee2692b09" translate="yes" xml:space="preserve">
          <source>You can also add a &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method in the &lt;code&gt;GreetingModule&lt;/code&gt; that configures the greeting &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">あいさつ &lt;code&gt;UserService&lt;/code&gt; を構成する &lt;code&gt;GreetingModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="407b9e876733ea8c9859983555db8b15df691843" translate="yes" xml:space="preserve">
          <source>You can also add a &lt;code&gt;forRoot()&lt;/code&gt; method in the &lt;code&gt;GreetingModule&lt;/code&gt; that configures the greeting &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">グリーティング &lt;code&gt;UserService&lt;/code&gt; を構成する &lt;code&gt;GreetingModule&lt;/code&gt; に &lt;code&gt;forRoot()&lt;/code&gt; メソッドを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="5a526b25408266d3968827df1221d6347e7f6b85" translate="yes" xml:space="preserve">
          <source>You can also add append a class to an element without overwriting the classes already on the element:</source>
          <target state="translated">また、要素に既にあるクラスを上書きすることなく、要素にクラスを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="721e12b200070fb73911732dd49b69f034c3db19" translate="yes" xml:space="preserve">
          <source>You can also add optional information to a route request. For example, when returning to the &lt;code&gt;hero-detail.component.ts&lt;/code&gt; list from the hero detail view, it would be nice if the viewed hero were preselected in the list.</source>
          <target state="translated">ルートリクエストにオプションの情報を追加することもできます。たとえば、ヒーローの詳細ビューから &lt;code&gt;hero-detail.component.ts&lt;/code&gt; リストに戻る場合、表示されているヒーローがリストで事前に選択されていると便利です。</target>
        </trans-unit>
        <trans-unit id="0eb6f621b2e971f7bf9abb6ff993457b4191a15a" translate="yes" xml:space="preserve">
          <source>You can also apply an &lt;code&gt;NgFor&lt;/code&gt; to a component element, as in the following example.</source>
          <target state="translated">次の例のように、コンポーネント要素に &lt;code&gt;NgFor&lt;/code&gt; を適用することもできます。</target>
        </trans-unit>
        <trans-unit id="0bed0049739f1e932b1f46657a5c193451b2bba9" translate="yes" xml:space="preserve">
          <source>You can also configure the &lt;code&gt;serve&lt;/code&gt; command to use the targeted build configuration if you add it to the &quot;serve:configurations&quot; section of &lt;code&gt;angular.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; の &quot;serve：configurations&quot;セクションに追加した場合、対象のビルド構成を使用するように &lt;code&gt;serve&lt;/code&gt; コマンドを構成することもできます。</target>
        </trans-unit>
        <trans-unit id="e55eaa66fa3c788b5a42077334a80ec5aa552608" translate="yes" xml:space="preserve">
          <source>You can also create HTTP parameters directly from a query string by using the &lt;code&gt;fromString&lt;/code&gt; variable:</source>
          <target state="translated">&lt;code&gt;fromString&lt;/code&gt; 変数を使用して、クエリ文字列から直接HTTPパラメータを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="62aecc66e5c594875ec547d40256bbcbc22240e6" translate="yes" xml:space="preserve">
          <source>You can also create pipes to encapsulate custom transformations and use your custom pipes in template expressions.</source>
          <target state="translated">また、パイプを作成してカスタム変換をカプセル化し、カスタムパイプをテンプレート式で使用することもできます。</target>
        </trans-unit>
        <trans-unit id="cb31cb6aa4a816fa40c42f7a6a8064d99b7ca9e3" translate="yes" xml:space="preserve">
          <source>You can also define a custom builder, and add a target to the project configuration that uses your custom builder. You can then run the target using the &lt;a href=&quot;cli/run&quot;&gt;&lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; CLI command.</source>
          <target state="translated">カスタムビルダーを定義し、カスタムビルダーを使用するプロジェクト構成にターゲットを追加することもできます。その後、&lt;a href=&quot;cli/run&quot;&gt; &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt; CLIコマンドを使用してターゲットを実行できます。</target>
        </trans-unit>
        <trans-unit id="8ef2b8d18e1c53c75e1aec40dd395cf2864bc75c" translate="yes" xml:space="preserve">
          <source>You can also do this in AngularJS, using &lt;em&gt;component directives&lt;/em&gt;. These are directives that define their own templates, controllers, and input/output bindings - the same things that Angular components define. Applications built with component directives are much easier to migrate to Angular than applications built with lower-level features like &lt;code&gt;ng-controller&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt;, and scope inheritance.</source>
          <target state="translated">&lt;em&gt;コンポーネントディレクティブ&lt;/em&gt;を使用して、AngularJSでこれを行うこともでき&lt;em&gt;ます&lt;/em&gt;。これらは、独自のテンプレート、コントローラ、および入出力バインディングを定義するディレクティブです。Angularコンポーネントが定義するものと同じです。コンポーネントディレクティブで構築されたアプリケーションは、 &lt;code&gt;ng-controller&lt;/code&gt; 、 &lt;code&gt;ng-include&lt;/code&gt; 、スコープ継承などの低レベルの機能で構築されたアプリケーションよりもAngularへの移行がはるかに簡単です。</target>
        </trans-unit>
        <trans-unit id="101d83ec025fb7343e8a3677c091a016fe8435b2" translate="yes" xml:space="preserve">
          <source>You can also emulate a third strategy, &lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate&quot;&gt;staleWhileRevalidate&lt;/a&gt;, which returns cached data (if available), but also fetches fresh data from the network in the background for next time. To use this strategy set &lt;code&gt;strategy&lt;/code&gt; to &lt;code&gt;freshness&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; to &lt;code&gt;0u&lt;/code&gt; in &lt;code&gt;cacheConfig&lt;/code&gt;.</source>
          <target state="translated">3番目の戦略である&lt;a href=&quot;https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate&quot;&gt;staleWhileRevalidateを&lt;/a&gt;エミュレートすることもできます。これは、キャッシュされたデータ（使用可能な場合）を返しますが、次回のためにバックグラウンドでネットワークから新しいデータをフェッチします。この戦略を使用するには、 &lt;code&gt;0u&lt;/code&gt; で &lt;code&gt;strategy&lt;/code&gt; を &lt;code&gt;freshness&lt;/code&gt; 設定し、 &lt;code&gt;timeout&lt;/code&gt; を0uに &lt;code&gt;cacheConfig&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d59f82a05714d92030f73af63da0c791cf2c2cc9" translate="yes" xml:space="preserve">
          <source>You can also experience and download the .</source>
          <target state="translated">体験してダウンロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="4aef1bbcbbd5075a517ac29931b7d7add135f643" translate="yes" xml:space="preserve">
          <source>You can also find the most current version of Angular by using the CLI command &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt;. By default, &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt;(without additional arguments) lists the updates that are available to you.</source>
          <target state="translated">また、CLIコマンド&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;を使用して、Angularの最新バージョンを見つけることもできます。デフォルトでは、&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;（追加の引数なし）は、利用可能なアップデートをリストします。</target>
        </trans-unit>
        <trans-unit id="bd8cbfa4084de9fcad774df1b9bd0170e55111e3" translate="yes" xml:space="preserve">
          <source>You can also format the expression as an object with style names as the keys and style values as the values, such as &lt;code&gt;{width: '100px', height: '100px'}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{width: '100px', height: '100px'}&lt;/code&gt; ように、キーとしてスタイル名を、値としてスタイル値を使用して、式をオブジェクトとしてフォーマットすることもできます。</target>
        </trans-unit>
        <trans-unit id="40bc080f90a040b1296b66e89d909d307d95b9c2" translate="yes" xml:space="preserve">
          <source>You can also import CSS files into the CSS files using the standard CSS &lt;code&gt;@import&lt;/code&gt; rule. For details, see &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/@import&quot;&gt;&lt;code&gt;@import&lt;/code&gt;&lt;/a&gt; on the &lt;a href=&quot;https://developer.mozilla.org&quot;&gt;MDN&lt;/a&gt; site.</source>
          <target state="translated">標準のCSS &lt;code&gt;@import&lt;/code&gt; ルールを使用して、CSSファイルをCSSファイルにインポートすることもできます。詳細については、&lt;a href=&quot;https://developer.mozilla.org&quot;&gt;MDN&lt;/a&gt;サイトの&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/@import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad1215013608ffc7cdc8d41f51b20172f6860bd3" translate="yes" xml:space="preserve">
          <source>You can also invoke a builder directly from another builder or test by calling &lt;code&gt;BuilderContext.scheduleBuilder()&lt;/code&gt;. You pass an &lt;code&gt;options&lt;/code&gt; object directly to the method, and those option values are validated against the schema of the builder without further adjustment.</source>
          <target state="translated">&lt;code&gt;BuilderContext.scheduleBuilder()&lt;/code&gt; を呼び出して、別のビルダーまたはテストからビルダーを直接呼び出すこともできます。 &lt;code&gt;options&lt;/code&gt; オブジェクトをメソッドに直接渡すと、それらのオプション値は、さらに調整することなく、ビルダーのスキーマに対して検証されます。</target>
        </trans-unit>
        <trans-unit id="a5e5de366b60dd156e8eee1160484d4e7c3e8972" translate="yes" xml:space="preserve">
          <source>You can also make Angular services available for injection to AngularJS code by &lt;em&gt;downgrading&lt;/em&gt; them. Only services from the Angular root injector can be downgraded. Again, the same singleton instances are shared between the frameworks. When you register a downgraded service, you must explicitly specify a &lt;em&gt;string token&lt;/em&gt; that you want to use in AngularJS.</source>
          <target state="translated">また、Angularサービスを&lt;em&gt;ダウングレード&lt;/em&gt;して、AngularJSコードへのインジェクションに利用できるようにすることもできます。ダウングレードできるのは、Angularルートインジェクターからのサービスのみです。この場合も、同じシングルトンインスタンスがフレームワーク間で共有されます。ダウングレードされたサービスを登録するときは、AngularJSで使用する&lt;em&gt;文字列トークン&lt;/em&gt;を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0c5cfeb0e0b76ee9743bba9a4035c4a07642e5c5" translate="yes" xml:space="preserve">
          <source>You can also nest different ICU expressions together, as shown in this example:</source>
          <target state="translated">また、この例に示すように、異なる ICU 式を一緒に入れ子にすることもできます。</target>
        </trans-unit>
        <trans-unit id="73415c26a314249d0cb8d9a2d246e95291705201" translate="yes" xml:space="preserve">
          <source>You can also nest different clauses together, such as the &lt;code&gt;plural&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; clauses in the following example:</source>
          <target state="translated">次の例の &lt;code&gt;plural&lt;/code&gt; や &lt;code&gt;select&lt;/code&gt; 句など、さまざまな句をネストすることもできます。</target>
        </trans-unit>
        <trans-unit id="18d156983b53223d01169d33fd9303ae62b372cb" translate="yes" xml:space="preserve">
          <source>You can also pass in more than one configuration name as a comma-separated list. For example, to apply both &lt;code&gt;stage&lt;/code&gt; and &lt;code&gt;fr&lt;/code&gt; build configurations, use the command &lt;code&gt;ng build --configuration stage,fr&lt;/code&gt;. In this case, the command parses the named configurations from left to right. If multiple configurations change the same setting, the last-set value is the final one.</source>
          <target state="translated">複数の構成名をコンマ区切りのリストとして渡すこともできます。たとえば、 &lt;code&gt;stage&lt;/code&gt; と &lt;code&gt;fr&lt;/code&gt; の両方のビルド構成を適用するには、コマンド &lt;code&gt;ng build --configuration stage,fr&lt;/code&gt; ます。この場合、コマンドは名前付き構成を左から右に解析します。複数の構成で同じ設定が変更された場合、最後に設定された値が最後の値になります。</target>
        </trans-unit>
        <trans-unit id="a7493965b825fd3f2b58e7ecba7857e304c1a347" translate="yes" xml:space="preserve">
          <source>You can also preserve query parameters and fragments across navigations without having to provide them again when navigating. In the &lt;code&gt;LoginComponent&lt;/code&gt;, you'll add an &lt;em&gt;object&lt;/em&gt; as the second argument in the &lt;code&gt;router.navigateUrl()&lt;/code&gt; function and provide the &lt;code&gt;queryParamsHandling&lt;/code&gt; and &lt;code&gt;preserveFragment&lt;/code&gt; to pass along the current query parameters and fragment to the next route.</source>
          <target state="translated">また、ナビゲーション時にクエリパラメータとフラグメントを提供しなくても、ナビゲーション全体でクエリパラメータとフラグメントを保持できます。では &lt;code&gt;LoginComponent&lt;/code&gt; 、あなたは追加します&lt;em&gt;オブジェクトを&lt;/em&gt;第二引数として &lt;code&gt;router.navigateUrl()&lt;/code&gt; 関数とを提供 &lt;code&gt;queryParamsHandling&lt;/code&gt; と &lt;code&gt;preserveFragment&lt;/code&gt; を次のルートに、現在のクエリパラメータとフラグメントに沿って通過します。</target>
        </trans-unit>
        <trans-unit id="c26ef44be89c5e65a5b8f981623f1b3c592e1408" translate="yes" xml:space="preserve">
          <source>You can also protect child routes with the &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard. The &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard is similar to the &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard. The key difference is that it runs &lt;em&gt;before&lt;/em&gt; any child route is activated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; ガードを使用して子ルートを保護することもできます。 &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; のガードはに似て &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; のガード。主な違いは、子ルートがアクティブになる&lt;em&gt;前&lt;/em&gt;に実行さ&lt;em&gt;れる&lt;/em&gt;ことです。</target>
        </trans-unit>
        <trans-unit id="829924fbe214027a31719fa81f6140ecf178055f" translate="yes" xml:space="preserve">
          <source>You can also protect child routes with the &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard. The &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard is similar to the &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard. The key difference is that it runs before any child route is activated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; ガードを使用して子ルートを保護することもできます。 &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; のガードはに似て &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; のガード。主な違いは、子ルートがアクティブ化される前に実行されることです。</target>
        </trans-unit>
        <trans-unit id="641b3bea7c85ba0af5b136447221717d92903110" translate="yes" xml:space="preserve">
          <source>You can also push values into that &lt;code&gt;Observable&lt;/code&gt; by calling its &lt;code&gt;next(value)&lt;/code&gt; method as the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッドのように &lt;code&gt;next(value)&lt;/code&gt; メソッドを呼び出すことで、 &lt;code&gt;Observable&lt;/code&gt; に値をプッシュすることもできます。</target>
        </trans-unit>
        <trans-unit id="a7f02ed5268a08df4442367c785db45c9d0a7a40" translate="yes" xml:space="preserve">
          <source>You can also push values into that &lt;code&gt;Observable&lt;/code&gt; by calling its &lt;code&gt;next(value)&lt;/code&gt; method as the &lt;code&gt;search()&lt;/code&gt; method does.</source>
          <target state="translated">&lt;code&gt;search()&lt;/code&gt; メソッドと同じように &lt;code&gt;next(value)&lt;/code&gt; メソッドを呼び出すことで、その &lt;code&gt;Observable&lt;/code&gt; に値をプッシュすることもできます。</target>
        </trans-unit>
        <trans-unit id="9439c5a9cee353a64e79c3fde687e6a67472f82a" translate="yes" xml:space="preserve">
          <source>You can also unit test an Angular app with other testing libraries and test runners. Each library and runner has its own distinctive installation procedures, configuration, and syntax.</source>
          <target state="translated">他のテストライブラリやテストランナーを使ってAngularアプリをユニットテストすることもできます。それぞれのライブラリやランナーには、独自のインストール手順、設定、構文があります。</target>
        </trans-unit>
        <trans-unit id="3dadda04deeb9f9194ec56cd58861de84466eeaa" translate="yes" xml:space="preserve">
          <source>You can also use RxJS scheduler in &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; just like using &lt;code&gt;setTimeout()&lt;/code&gt; or &lt;code&gt;setInterval()&lt;/code&gt;, but you need to import &lt;code&gt;zone.js/dist/zone-patch-rxjs-fake-async&lt;/code&gt; to patch RxJS scheduler.</source>
          <target state="translated">&lt;code&gt;setTimeout()&lt;/code&gt; または &lt;code&gt;setInterval()&lt;/code&gt; を使用するのと同じように、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; でRxJSスケジューラを使用することもできますが、RxJSスケジューラに &lt;code&gt;zone.js/dist/zone-patch-rxjs-fake-async&lt;/code&gt; するには、zone.js / dist / zone-patch-rxjs-fake-asyncをインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="1148887e8f5d0c5866c716744f552c4492878245" translate="yes" xml:space="preserve">
          <source>You can also use a &lt;code&gt;&lt;a href=&quot;query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; to find a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; associated with a component or a directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; を使用して、コンポーネントまたはディレクティブに関連付けられている &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; を見つけることもできます。</target>
        </trans-unit>
        <trans-unit id="d2ff8602cd8de5d23f2fc4f2afb55a0b81e1087e" translate="yes" xml:space="preserve">
          <source>You can also use a reactive (or model-driven) approach to build forms. However, this page focuses on template-driven forms.</source>
          <target state="translated">リアクティブ (またはモデル駆動)アプローチを使用してフォームを構築することもできます。しかし、このページではテンプレート駆動型のフォームに焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="21c518f562b8fea5178333a9fd8030cd677cbbf4" translate="yes" xml:space="preserve">
          <source>You can also use forward references to break circular dependencies. See an example in the &lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;DI Cookbook&lt;/a&gt;.</source>
          <target state="translated">前方参照を使用して循環依存関係を解除することもできます。&lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;DIクックブックの&lt;/a&gt;例を参照してください。</target>
        </trans-unit>
        <trans-unit id="91211c4b6c56ad85228197ac77f9fae9d2e3ad9f" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;--localize&lt;/code&gt; option with the &lt;a href=&quot;https://angular.io/cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; command and your existing &lt;code&gt;production&lt;/code&gt; configuration. The CLI builds all locales defined in the build configuration, which is similar to setting the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; as described in the previous section.</source>
          <target state="translated">また、使用することができます &lt;code&gt;--localize&lt;/code&gt; でオプションを&lt;a href=&quot;https://angular.io/cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;コマンドと既存 &lt;code&gt;production&lt;/code&gt; の構成。CLIは、ビルド構成で定義されたすべてのロケールをビルドします。これは、前のセクションで説明したように &lt;code&gt;&quot;localize&quot;&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定するのと似ています。</target>
        </trans-unit>
        <trans-unit id="a50074c11ddb0259548c7d26e7a59774a060d7c7" translate="yes" xml:space="preserve">
          <source>You can also use the CLI &lt;code&gt;--baseHref&lt;/code&gt; option with &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; to declare the base &lt;code&gt;href&lt;/code&gt; at compile time.</source>
          <target state="translated">また、CLIを使用することができます &lt;code&gt;--baseHref&lt;/code&gt; でオプションを&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;ベース宣言する &lt;code&gt;href&lt;/code&gt; コンパイル時に。</target>
        </trans-unit>
        <trans-unit id="011694da04fab7703ee387cc7935395cb1a15c38" translate="yes" xml:space="preserve">
          <source>You can also write &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags into the component's HTML template.</source>
          <target state="translated">&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; タグをコンポーネントのHTMLテンプレートに書き込むこともできます。</target>
        </trans-unit>
        <trans-unit id="9b537abac2e0aa96e672eec385ad1595b1cc2787" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canActivate&quot;&gt;canActivate&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;&lt;a href=&quot;route#canActivate&quot;&gt;canActivate&lt;/a&gt;&lt;/code&gt; シグニチャーを使用して関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="5d7df29bac92cb6ceef0364985e8483678913314" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;&lt;a href=&quot;route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;&lt;/code&gt; シグニチャーを使用して関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="bd4940cbc635487f4166f04a16f57d8f34f56d90" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;&lt;a href=&quot;route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; シグニチャーを使用して関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="017b791cb2a79246951c11f855b0145ced89d786" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; シグニチャーを使用して関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="ac73238ab80850452a81dfb5e676e1366f39a577" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">別の方法として、 &lt;code&gt;&lt;a href=&quot;route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; シグネチャを持つ関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="3b08f285b67fcd145b7cb1bc9f9acf6012367692" translate="yes" xml:space="preserve">
          <source>You can alternatively provide an in-line function with the &lt;code&gt;canActivate&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;canActivate&lt;/code&gt; シグネチャを使用してインライン関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="7d34aa632e519572bef1676a6a0d82ea589aa34a" translate="yes" xml:space="preserve">
          <source>You can alternatively provide an in-line function with the &lt;code&gt;canActivateChild&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;canActivateChild&lt;/code&gt; シグネチャを使用してインライン関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="864e26b06d3b3459fd3df0304095a02ab26b3193" translate="yes" xml:space="preserve">
          <source>You can alternatively provide an in-line function with the &lt;code&gt;canDeactivate&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;canDeactivate&lt;/code&gt; シグニチャを使用してインライン関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="997a868ab4d680a9db01c4f19536011744364b7d" translate="yes" xml:space="preserve">
          <source>You can alternatively provide an in-line function with the &lt;code&gt;canLoad&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;canLoad&lt;/code&gt; シグニチャを使用してインライン関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="cc15426f11f61c9b209911e4736390f2e22a0ab9" translate="yes" xml:space="preserve">
          <source>You can alternatively provide an in-line function with the &lt;code&gt;resolve()&lt;/code&gt; signature:</source>
          <target state="translated">または、 &lt;code&gt;resolve()&lt;/code&gt; シグニチャを使用してインライン関数を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="4a968df9fb4629fecd8ccfea8666dacbe72676df" translate="yes" xml:space="preserve">
          <source>You can apply many &lt;em&gt;attribute&lt;/em&gt; directives to one host element. You can &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;only apply one&lt;/a&gt;&lt;em&gt;structural&lt;/em&gt; directive to a host element.</source>
          <target state="translated">1つのホスト要素に多くの&lt;em&gt;属性&lt;/em&gt;ディレクティブを適用できます。ホスト要素に&lt;a href=&quot;structural-directives#one-per-element&quot;&gt;適用&lt;/a&gt;できる&lt;em&gt;構造&lt;/em&gt;ディレクティブは1つだけです。</target>
        </trans-unit>
        <trans-unit id="3332ecc54bdac21c9600aef4f59a22d8cf35dd62" translate="yes" xml:space="preserve">
          <source>You can apply the &lt;code&gt;&lt;a href=&quot;routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to an ancestor of linked elements. For example, the following sets the active-link class on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; parent tag when the URL is either '/user/jim' or '/user/bob'.</source>
          <target state="translated">リンクされた要素の祖先に &lt;code&gt;&lt;a href=&quot;routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブを適用できます。たとえば、次の例では、URLが「/ user / jim」または「/ user / bob」の場合に、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 親タグにアクティブリンククラスを設定します。</target>
        </trans-unit>
        <trans-unit id="048d6024e82ffaa8032832cdcdadb0fa97dcb69c" translate="yes" xml:space="preserve">
          <source>You can apply the same trick to the application's route configuration file in &lt;code&gt;app.config.ts&lt;/code&gt;, where you are using the location and route services. By annotating them accordingly TypeScript can verify you're calling their APIs with the correct kinds of arguments.</source>
          <target state="translated">ロケーションサービスとルートサービスを使用している &lt;code&gt;app.config.ts&lt;/code&gt; のアプリケーションのルート構成ファイルにも同じトリックを適用できます。TypeScriptは、適切に注釈を付けることで、正しい種類の引数でAPIを呼び出していることを確認できます。</target>
        </trans-unit>
        <trans-unit id="75bb7e44b1f16f8817023fa6cb1d196458eeb22d" translate="yes" xml:space="preserve">
          <source>You can apply the spy to any native or component element and it'll be initialized and destroyed at the same time as that element. Here it is attached to the repeated hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">ネイティブまたはコンポーネント要素にスパイを適用すると、その要素と同時に初期化および破棄されます。ここでそれは繰り返されたヒーロー &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に添付されています：</target>
        </trans-unit>
        <trans-unit id="8e65760127e8870c07831fcee2d80b9c7d68c1b5" translate="yes" xml:space="preserve">
          <source>You can apply the spy to any native or component element, and see that it is initialized and destroyed at the same time as that element. Here it is attached to the repeated hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">スパイを任意のネイティブ要素またはコンポーネント要素に適用して、その要素と同時に初期化および破棄されることを確認できます。ここでは、繰り返されるヒーロー &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に添付されています：</target>
        </trans-unit>
        <trans-unit id="daf5b1655b33ddea672d7ae435d030c5b1cd1822" translate="yes" xml:space="preserve">
          <source>You can apply these settings at the workspace and project level.</source>
          <target state="translated">これらの設定は、ワークスペースおよびプロジェクト レベルで適用できます。</target>
        </trans-unit>
        <trans-unit id="a7563385a82391d1fe26ea4d0c2c69c4e4a830ce" translate="yes" xml:space="preserve">
          <source>You can assign the RouterLinkActive instance to a template variable and directly check the &lt;code&gt;&lt;a href=&quot;routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; status.</source>
          <target state="translated">RouterLinkActiveインスタンスをテンプレート変数に割り当てて、 &lt;code&gt;&lt;a href=&quot;routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; ステータスを直接確認できます。</target>
        </trans-unit>
        <trans-unit id="ccd2ecf8c6674aedde9429ab78c08401d264ed2e" translate="yes" xml:space="preserve">
          <source>You can attach a context object to the &lt;code&gt;&lt;a href=&quot;../core/embeddedviewref&quot;&gt;EmbeddedViewRef&lt;/a&gt;&lt;/code&gt; by setting &lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt;. &lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt; should be an object, the object's keys will be available for binding by the local template &lt;code&gt;let&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt; ]を設定することにより、コンテキストオブジェクトを &lt;code&gt;&lt;a href=&quot;../core/embeddedviewref&quot;&gt;EmbeddedViewRef&lt;/a&gt;&lt;/code&gt; にアタッチできます。 &lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt; ]はオブジェクトである必要があります。オブジェクトのキーは、ローカルテンプレートの &lt;code&gt;let&lt;/code&gt; 宣言によるバインドに使用できます。</target>
        </trans-unit>
        <trans-unit id="7f8065b1485c9cf7b10ab78bbd830b78adb0cd62" translate="yes" xml:space="preserve">
          <source>You can attach a context object to the &lt;code&gt;&lt;a href=&quot;../core/embeddedviewref&quot;&gt;EmbeddedViewRef&lt;/a&gt;&lt;/code&gt; by setting &lt;code&gt;[ngTemplateOutletContext]&lt;/code&gt;. &lt;code&gt;[ngTemplateOutletContext]&lt;/code&gt; should be an object, the object's keys will be available for binding by the local template &lt;code&gt;let&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;[ngTemplateOutletContext]&lt;/code&gt; を設定することにより、コンテキストオブジェクトを &lt;code&gt;&lt;a href=&quot;../core/embeddedviewref&quot;&gt;EmbeddedViewRef&lt;/a&gt;&lt;/code&gt; にアタッチできます。 &lt;code&gt;[ngTemplateOutletContext]&lt;/code&gt; はオブジェクトである必要があります。オブジェクトのキーは、ローカルテンプレートの &lt;code&gt;let&lt;/code&gt; 宣言によるバインドに使用できます。</target>
        </trans-unit>
        <trans-unit id="95bb25e695a5650fa12656e291495b82d46d78c9" translate="yes" xml:space="preserve">
          <source>You can avoid run-time type errors by providing more specific in-template type requirements to the template type checker. Make the input type requirements for your own directives as specific as possible by providing template-guard functions in the directive definition. See &lt;a href=&quot;structural-directives#directive-type-checks&quot;&gt;Improving template type checking for custom directives&lt;/a&gt;, and &lt;a href=&quot;template-typecheck#input-setter-coercion&quot;&gt;Input setter coercion&lt;/a&gt; in this guide.</source>
          <target state="translated">より具体的なテンプレート内型要件をテンプレート型チェッカーに提供することにより、実行時型エラーを回避できます。ディレクティブ定義でテンプレートガード関数を提供することにより、独自のディレクティブの入力タイプ要件を可能な限り具体的にします。参照&lt;a href=&quot;structural-directives#directive-type-checks&quot;&gt;カスタムディレクティブをチェックするテンプレートの種類の向上&lt;/a&gt;、および&lt;a href=&quot;template-typecheck#input-setter-coercion&quot;&gt;入力セッターの強制を&lt;/a&gt;このガイドで。</target>
        </trans-unit>
        <trans-unit id="cfeead7a9cba90c2c4acff7ac30ba6611e4e82ef" translate="yes" xml:space="preserve">
          <source>You can avoid that by waiting for the app to stabilize first, before starting to poll for updates (as shown in the example above).</source>
          <target state="translated">アップデートのためのポーリングを開始する前に、まずアプリが安定するのを待つことで、それを回避することができます(上の例のように)。</target>
        </trans-unit>
        <trans-unit id="465ddfafc962bb058aeb43d9df7142dd5c29db5e" translate="yes" xml:space="preserve">
          <source>You can avoid that delay by waiting for the app to stabilize first, before starting to poll for updates, as shown in the example above. Alternatively, you might want to define a different &lt;a href=&quot;../api/service-worker/swregistrationoptions#registrationStrategy&quot;&gt;registration strategy&lt;/a&gt; for the ServiceWorker.</source>
          <target state="translated">上記の例に示すように、更新のポーリングを開始する前に、アプリが最初に安定するのを待つことで、この遅延を回避できます。または、ServiceWorkerに別の&lt;a href=&quot;../api/service-worker/swregistrationoptions#registrationStrategy&quot;&gt;登録戦略&lt;/a&gt;を定義することもできます。</target>
        </trans-unit>
        <trans-unit id="cc0f1c03d0a358630425afc0bf16032ad9ba29e2" translate="yes" xml:space="preserve">
          <source>You can bind the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive to such an array like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ように、RouterLinkディレクティブをこのような配列にバインドできます。</target>
        </trans-unit>
        <trans-unit id="0885e2058166ac10a877b38937a3a205f94c938c" translate="yes" xml:space="preserve">
          <source>You can both try and download the source code for this guide in the live example.</source>
          <target state="translated">あなたは両方のライブの例では、このガイドのソースコードを試してみて、ダウンロードすることができます。</target>
        </trans-unit>
        <trans-unit id="e3ed6e15150f97635059bb4fcc2f58a93abc0d1b" translate="yes" xml:space="preserve">
          <source>You can build almost any form with an Angular template&amp;mdash;login forms, contact forms, and pretty much any business form. You can lay out the controls creatively, bind them to data, specify validation rules and display validation errors, conditionally enable or disable specific controls, trigger built-in visual feedback, and much more.</source>
          <target state="translated">Angularテンプレートを使用して、ほとんどすべてのフォーム（ログインフォーム、連絡先フォーム、およびほとんどすべてのビジネスフォーム）を構築できます。コントロールをクリエイティブにレイアウトし、データにバインドし、検証ルールを指定して検証エラーを表示し、特定のコントロールを条件付きで有効または無効にしたり、組み込みの視覚的フィードバックをトリガーしたりできます。</target>
        </trans-unit>
        <trans-unit id="ed4327f251fa9ad323b2417cca160cff93cfe4c6" translate="yes" xml:space="preserve">
          <source>You can build almost any kind of form with an Angular template&amp;mdash;login forms, contact forms, and pretty much any business form. You can lay out the controls creatively and bind them to the data in your object model. You can specify validation rules and display validation errors, conditionally enable or disable specific controls, trigger built-in visual feedback, and much more.</source>
          <target state="translated">ログインフォーム、連絡先フォーム、およびほとんどすべてのビジネスフォームなど、Angularテンプレートを使用してほぼすべての種類のフォームを作成できます。コントロールをクリエイティブにレイアウトし、オブジェクトモデルのデータにバインドできます。検証ルールを指定して検証エラーを表示したり、特定のコントロールを条件付きで有効または無効にしたり、組み込みの視覚的フィードバックをトリガーしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="f9b347426239b086ed007f2c3c16d9bac4c14712" translate="yes" xml:space="preserve">
          <source>You can build forms by writing templates in the Angular &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt; with the form-specific directives and techniques described in this page.</source>
          <target state="translated">このページで説明されているフォーム固有のディレクティブとテクニックを使用して、Angular &lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;でテンプレートを作成することにより、フォームを構築できます。</target>
        </trans-unit>
        <trans-unit id="fe3c9f27494d5a3059c7a2125bc01e82bc6f5957" translate="yes" xml:space="preserve">
          <source>You can build forms in one of two ways:</source>
          <target state="translated">フォームは2つの方法のいずれかで構築することができます。</target>
        </trans-unit>
        <trans-unit id="707d471c41b13f647ded4f1cffab9addbf05c898" translate="yes" xml:space="preserve">
          <source>You can build, test, and lint the project with CLI commands:</source>
          <target state="translated">CLIコマンドを使ってプロジェクトをビルドしたり、テストしたり、lintしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="cdc62cf78a7df66548bd5bdae88738b3d660dece" translate="yes" xml:space="preserve">
          <source>You can call the &lt;code&gt;wrapInArray&lt;/code&gt; in a metadata definition because it returns the value of an expression that conforms to the compiler's restrictive JavaScript subset.</source>
          <target state="translated">&lt;code&gt;wrapInArray&lt;/code&gt; は、コンパイラーの制限付きJavaScriptサブセットに準拠した式の値を返すため、メタデータ定義で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fb33901921825a3ba4df7372e8f797a50059f50f" translate="yes" xml:space="preserve">
          <source>You can chain expressions through multiple pipes:</source>
          <target state="translated">複数のパイプを介して式を連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="4d2ef5de404efe121fb883978ccd62e6dfaedf9a" translate="yes" xml:space="preserve">
          <source>You can chain pipes so that the output of one pipe becomes the input to the next.</source>
          <target state="translated">パイプの出力が次のパイプへの入力になるようにパイプを連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="4b5ee08ece7f8cb05a90545360581865c840c160" translate="yes" xml:space="preserve">
          <source>You can chain pipes together in potentially useful combinations. In the following example, to display the birthday in uppercase, the birthday is chained to the &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; and on to the &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;. The birthday displays as &lt;strong&gt;&lt;samp&gt;APR 15, 1988&lt;/samp&gt;&lt;/strong&gt;.</source>
          <target state="translated">潜在的に有用な組み合わせでパイプを一緒にチェーンすることができます。次の例では、誕生日を大文字で表示するために、誕生日が &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; とUpperCasePipeにチェーンされてい &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; 。誕生日は次のように表示されます&lt;strong&gt;&lt;samp&gt;1988年4月15日&lt;/samp&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="91baed178376a9f48c2dc32d0caa793f1add1a6f" translate="yes" xml:space="preserve">
          <source>You can chain pipes, sending the output of one pipe function to be transformed by another pipe function. A pipe can also take arguments that control how it performs its transformation. For example, you can pass the desired format to the &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">パイプをチェーンして、あるパイプ関数の出力を送信して別のパイプ関数に変換することができます。パイプは、変換の実行方法を制御する引数を取ることもできます。たとえば、目的の形式を &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; パイプに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="15ee58b9b649fd06ca4f748828b84891a13da1b0" translate="yes" xml:space="preserve">
          <source>You can chain pipes, sending the output of one pipe function to be transformed by another pipe function. A pipe can also take arguments that control how it performs its transformation. For example, you can pass the desired format to the &lt;code&gt;date&lt;/code&gt; pipe.</source>
          <target state="translated">パイプをチェーンして、あるパイプ関数の出力を別のパイプ関数によって変換されるように送信できます。パイプは、変換の実行方法を制御する引数を取ることもできます。たとえば、 &lt;code&gt;date&lt;/code&gt; パイプに目的の形式を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="3c414bc5bc0bab28b6b2fd1b78670d7d285d0f05" translate="yes" xml:space="preserve">
          <source>You can change how &lt;code&gt;ng generate component&lt;/code&gt; creates new components. For more information, see &lt;a href=&quot;cli/generate#component-command&quot;&gt;ng generate component&lt;/a&gt; in the Angular CLI documentation.</source>
          <target state="translated">&lt;code&gt;ng generate component&lt;/code&gt; が新しいコンポーネントを作成する方法を変更できます。詳細については、&lt;a href=&quot;cli/generate#component-command&quot;&gt;NGはコンポーネント生成&lt;/a&gt;角度CLIドキュメントのを。</target>
        </trans-unit>
        <trans-unit id="f1d7f8f297a03122938cf7584e67b33b6f02ba6c" translate="yes" xml:space="preserve">
          <source>You can change or remove component CSS code without searching through the whole application to find where else the code is used.</source>
          <target state="translated">アプリケーション全体を検索することなく、コンポーネントのCSSコードを変更したり削除したりすることができ、他のコードがどこで使用されているかを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="9426689092ed2f9f6e8e7440a45cb13c148e7e2b" translate="yes" xml:space="preserve">
          <source>You can change the appearance and behavior of the live example with attributes and classes.</source>
          <target state="translated">属性やクラスを使って、ライブサンプルの外観や動作を変更することができます。</target>
        </trans-unit>
        <trans-unit id="7d6ffb9e9e11eb10665d9d70341f2f295418c7e6" translate="yes" xml:space="preserve">
          <source>You can change the name of the translation source file that is generated by the extraction tool with the &lt;code&gt;--outFile&lt;/code&gt; command option:</source>
          <target state="translated">&lt;code&gt;--outFile&lt;/code&gt; コマンドオプションを使用して、抽出ツールによって生成される翻訳ソースファイルの名前を変更できます。</target>
        </trans-unit>
        <trans-unit id="3b13ad9ec95a01f5220a0e8b907200fca03d45c2" translate="yes" xml:space="preserve">
          <source>You can check to see that a module is indeed being lazy loaded with the Chrome developer tools. In Chrome, open the dev tools by pressing &lt;code&gt;Cmd+Option+i&lt;/code&gt; on a Mac or &lt;code&gt;Ctrl+Shift+j&lt;/code&gt; on a PC and go to the Network Tab.</source>
          <target state="translated">モジュールが実際にChrome開発者ツールで遅延ロードされていることを確認できます。Chromeで、Macでは &lt;code&gt;Cmd+Option+i&lt;/code&gt; 、PCでは &lt;code&gt;Ctrl+Shift+j&lt;/code&gt; を押して開発ツールを開き、[ネットワーク]タブに移動します。</target>
        </trans-unit>
        <trans-unit id="8ee6d4a0bcab8e5a1c29996b6475091409bc4a12" translate="yes" xml:space="preserve">
          <source>You can choose to &lt;a href=&quot;form-validation#custom-validators&quot;&gt;write your own validator functions&lt;/a&gt;, or you can use some of Angular's built-in validators.</source>
          <target state="translated">&lt;a href=&quot;form-validation#custom-validators&quot;&gt;独自のバリデーター関数&lt;/a&gt;を作成するか、Angularの組み込みバリデーターを使用するかを選択できます。</target>
        </trans-unit>
        <trans-unit id="29d4d8014109237c33070364152baf517e891473" translate="yes" xml:space="preserve">
          <source>You can choose to use a descriptive string as the key value, or be assigned a random key when you run the CLI command. For example, the following command adds a configuration key named &quot;tracking&quot;.</source>
          <target state="translated">キー値として記述的な文字列を使用するか、CLIコマンドを実行する際にランダムなキーを割り当てるかを選択できます。例えば、以下のコマンドでは、&quot;tracking &quot;という名前の設定キーを追加しています。</target>
        </trans-unit>
        <trans-unit id="e9618e54f7d5540a45646e2daf57e55cf4737030" translate="yes" xml:space="preserve">
          <source>You can click the &quot;View Details&quot; button to drill into the editable details of the selected hero.</source>
          <target state="translated">詳細を見る」ボタンをクリックすると、選択したヒーローの編集可能な詳細を掘り下げることができます。</target>
        </trans-unit>
        <trans-unit id="0f82d4671c9e5f7709c5e6e8b2a8db9f44352d90" translate="yes" xml:space="preserve">
          <source>You can click the two links above the dashboard (&quot;Dashboard&quot; and &quot;Heroes&quot;) to navigate between this Dashboard view and a Heroes view.</source>
          <target state="translated">ダッシュボードの上にある2つのリンク(&quot;Dashboard &quot;と &quot;Heroes&quot;)をクリックすると、このDashboardビューとHeroesビューの間を移動することができます。</target>
        </trans-unit>
        <trans-unit id="907f7e28735dbb54215acbf59c7d8da2c64ead5b" translate="yes" xml:space="preserve">
          <source>You can co-locate the CSS code of each component with the TypeScript and HTML code of the component, which leads to a neat and tidy project structure.</source>
          <target state="translated">各コンポーネントのCSSコードを、コンポーネントのTypeScriptやHTMLコードと一緒に配置することで、すっきりとしたプロジェクト構造になります。</target>
        </trans-unit>
        <trans-unit id="ad5e93413ff3b157034427dcca9c7b4e9726a62f" translate="yes" xml:space="preserve">
          <source>You can combine &lt;code&gt;yarn docs-watch&lt;/code&gt; and &lt;code&gt;yarn start&lt;/code&gt; into one command with &lt;code&gt;yarn serve-and-sync&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;yarn docs-watch&lt;/code&gt; と &lt;code&gt;yarn start&lt;/code&gt; を、 &lt;code&gt;yarn serve-and-sync&lt;/code&gt; を使用して1つのコマンドに組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="c6fc6741dd6f106d4b60145a47630c2d396bc083" translate="yes" xml:space="preserve">
          <source>You can combine keyframes with &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;delay&lt;/code&gt;, and &lt;code&gt;easing&lt;/code&gt; within a single animation.</source>
          <target state="translated">1つのアニメーション内で、キーフレームを &lt;code&gt;duration&lt;/code&gt; 、 &lt;code&gt;delay&lt;/code&gt; 、および &lt;code&gt;easing&lt;/code&gt; と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="b07827c34b2712c5fb92ac30253ae1d59fc938c4" translate="yes" xml:space="preserve">
          <source>You can combine relative navigation syntax with an ancestor path. If you must navigate to a sibling route, you could use the &lt;code&gt;../&amp;lt;sibling&amp;gt;&lt;/code&gt; convention to go up one level, then over and down the sibling route path.</source>
          <target state="translated">相対ナビゲーション構文を祖先パスと組み合わせることができます。兄弟ルートにナビゲートする必要がある場合は、 &lt;code&gt;../&amp;lt;sibling&amp;gt;&lt;/code&gt; 規則を使用して1レベル上に移動し、兄弟ルートパスを上下に移動できます。</target>
        </trans-unit>
        <trans-unit id="2d6d5f82c4426fb4f2c02970240cac7beb04b412" translate="yes" xml:space="preserve">
          <source>You can combine several fragments from the same file into a single code snippet by defining multiple &lt;em&gt;#docregions&lt;/em&gt; with the &lt;em&gt;same region name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;同じリージョン名で&lt;/em&gt;複数の&lt;em&gt;#docregions&lt;/em&gt;を定義することにより、同じファイルの複数のフラグメントを1つのコードスニペットに組み合わせることができます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="892b0e652b52f3c1298e1d8efa0356038b6e630b" translate="yes" xml:space="preserve">
          <source>You can combine wildcard and void states in a transition to trigger animations that enter and leave the page:</source>
          <target state="translated">トランジションでワイルドカード状態とボイド状態を組み合わせて、ページに入ったり出たりするアニメーションをトリガーにすることができます。</target>
        </trans-unit>
        <trans-unit id="2be97c9f6f5b928311c1df36ab8c4683b94dfa0d" translate="yes" xml:space="preserve">
          <source>You can configure RouterLinkActive by passing &lt;code&gt;exact: true&lt;/code&gt;. This will add the classes only when the url matches the link exactly.</source>
          <target state="translated">&lt;code&gt;exact: true&lt;/code&gt; を渡すことにより、RouterLinkActiveを構成できます。これにより、URLがリンクと完全に一致する場合にのみクラスが追加されます。</target>
        </trans-unit>
        <trans-unit id="edfd91a02f9b6083c0b480709f090dd77a6e6a2e" translate="yes" xml:space="preserve">
          <source>You can configure injectors with different providers that can provide different implementations of the same dependency.</source>
          <target state="translated">同じ依存関係の異なる実装を提供できる異なるプロバイダでインジェクタを設定することができます。</target>
        </trans-unit>
        <trans-unit id="b04dd254b3272bfb8d7ba1d5651935b8d6e7f26e" translate="yes" xml:space="preserve">
          <source>You can configure injectors with providers at different levels of your app, by setting a metadata value in one of three places:</source>
          <target state="translated">3つの場所のいずれかにメタデータ値を設定することで、アプリのさまざまなレベルでプロバイダを使用してインジェクターを設定することができます。</target>
        </trans-unit>
        <trans-unit id="bc8ddff83c7f62ee50191a64b6f9c8db63d5f6f9" translate="yes" xml:space="preserve">
          <source>You can configure your routes to lazy load modules, which means that Angular only loads modules as needed, rather than loading all modules when the app launches. Additionally, you can preload parts of your app in the background to improve the user experience.</source>
          <target state="translated">これはアプリの起動時にすべてのモジュールをロードするのではなく、必要に応じてモジュールのみをロードすることを意味します。さらに、バックグラウンドでアプリの一部をプリロードしてユーザーエクスペリエンスを向上させることもできます。</target>
        </trans-unit>
        <trans-unit id="cd5dfc0da3065a2550d8027a7853f827867617ad" translate="yes" xml:space="preserve">
          <source>You can confirm this by looking in the &lt;code&gt;ItemDetailComponent&lt;/code&gt; where the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; type is set to a string:</source>
          <target state="translated">これは、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;入力&lt;/a&gt;タイプが文字列に設定されている &lt;code&gt;ItemDetailComponent&lt;/code&gt; を調べることで確認できます。</target>
        </trans-unit>
        <trans-unit id="e803582c1bd2ff6bcaf349dbf2d2cb695a6b3575" translate="yes" xml:space="preserve">
          <source>You can confirm this expectation by looking in the &lt;code&gt;ItemDetailComponent&lt;/code&gt; where the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; type is &lt;code&gt;string&lt;/code&gt;:</source>
          <target state="translated">あなたはで見ることで、この予想を確認することができ &lt;code&gt;ItemDetailComponent&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; のタイプがあり &lt;code&gt;string&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="85abae6aa135f3574cd963c9903fa945ad66a330" translate="yes" xml:space="preserve">
          <source>You can consolidate the two &lt;code&gt;beforeEach()&lt;/code&gt; functions into a single, async &lt;code&gt;beforeEach()&lt;/code&gt;.</source>
          <target state="translated">2つの &lt;code&gt;beforeEach()&lt;/code&gt; 関数を単一の非同期 &lt;code&gt;beforeEach()&lt;/code&gt; に統合できます。</target>
        </trans-unit>
        <trans-unit id="d116f52df726e7b795448d2a1e4786b60bb017f2" translate="yes" xml:space="preserve">
          <source>You can construct a format string using symbols to specify the components of a date-time value, as described in the following table. Format details depend on the locale. Fields marked with (*) are only available in the extra data set for the given locale.</source>
          <target state="translated">以下の表に示すように、日付時刻値の構成要素を指定するためにシンボルを使用してフォーマット文字列を作成することができます。書式の詳細はロケールによって異なります。(*)の付いたフィールドは、指定したロケールの追加データセットでのみ利用可能です。</target>
        </trans-unit>
        <trans-unit id="6a4fa2e299bb51897796717f9de20e9ef5dd66fb" translate="yes" xml:space="preserve">
          <source>You can continue expanding lazy loaded feature areas without increasing the size of the initial load bundle.</source>
          <target state="translated">初期ロードバンドルのサイズを大きくすることなく、遅延ロードされたフィーチャ領域を拡張し続けることができます。</target>
        </trans-unit>
        <trans-unit id="4e4d4d5d0a420de9325f75c043f57ac29b54e167" translate="yes" xml:space="preserve">
          <source>You can control the component creation process by using the following optional attributes:</source>
          <target state="translated">以下のオプション属性を使用して、コンポーネントの作成プロセスを制御することができます。</target>
        </trans-unit>
        <trans-unit id="3277c9eb638be586bd69b635e81f7899373b6c37" translate="yes" xml:space="preserve">
          <source>You can control what and how the router preloads with a custom preloading strategy.</source>
          <target state="translated">カスタムプリロード戦略を使用して、ルータのプリロードの内容と方法を制御することができます。</target>
        </trans-unit>
        <trans-unit id="79c24750c2da92f3ba02b782e94bc5c8b049542a" translate="yes" xml:space="preserve">
          <source>You can count on Angular to call the &lt;code&gt;ngOnInit()&lt;/code&gt; method &lt;em&gt;soon&lt;/em&gt; after creating the component. That's where the heavy initialization logic belongs.</source>
          <target state="translated">コンポーネントの作成後&lt;em&gt;すぐ&lt;/em&gt;にAngularを使用して &lt;code&gt;ngOnInit()&lt;/code&gt; メソッドを呼び出すことができます。これは、重い初期化ロジックが属する場所です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fea97f1368eff44072b3d4e5f46081101f8a8006" translate="yes" xml:space="preserve">
          <source>You can count on the test runner to wait for the first asynchronous &lt;code&gt;beforeEach&lt;/code&gt; to finish before calling the second.</source>
          <target state="translated">テストランナーは、最初の非同期 &lt;code&gt;beforeEach&lt;/code&gt; が終了してから2番目を呼び出すまで待機することができます。</target>
        </trans-unit>
        <trans-unit id="c99ad8b58c1bce47f50287f5f4b4c4dd9ad3d8b1" translate="yes" xml:space="preserve">
          <source>You can create a new hero like this:</source>
          <target state="translated">こんな感じで新しいヒーローを作ることができます。</target>
        </trans-unit>
        <trans-unit id="61c2e7af5a86ddccfb6542bf2e207be0249ab305" translate="yes" xml:space="preserve">
          <source>You can create additional, named definition files in the form &lt;code&gt;name.stackblitz.json&lt;/code&gt;. See &lt;code&gt;content/examples/testing&lt;/code&gt; for examples.</source>
          <target state="translated">&lt;code&gt;name.stackblitz.json&lt;/code&gt; の形式で、追加の名前付き定義ファイルを作成できます。 &lt;code&gt;content/examples/testing&lt;/code&gt; については、content / examples / testingを参照してください。</target>
        </trans-unit>
        <trans-unit id="939010dae8bf10cc64597374980c08b7caba71ff" translate="yes" xml:space="preserve">
          <source>You can create and include the following kinds of schematics.</source>
          <target state="translated">以下のような種類の回路図を作成し、含めることができます。</target>
        </trans-unit>
        <trans-unit id="37158753ba4a406bbe191500b2f260b1c28de78b" translate="yes" xml:space="preserve">
          <source>You can create and publish new libraries to extend Angular functionality. If you find that you need to solve the same problem in more than one app (or want to share your solution with other developers), you have a candidate for a library.</source>
          <target state="translated">Angularの機能を拡張するための新しいライブラリを作成して公開することができます。複数のアプリで同じ問題を解決する必要があることがわかった場合(または他の開発者と解決策を共有したい場合)、ライブラリの候補があります。</target>
        </trans-unit>
        <trans-unit id="30e4df335e071d5d56bcf80f928f13f415b68e1b" translate="yes" xml:space="preserve">
          <source>You can create your own schematics to operate on Angular projects. Library developers typically package schematics with their libraries in order to integrate them with the Angular CLI. You can also create stand-alone schematics to manipulate the files and constructs in Angular applications as a way of customizing them for your development environment and making them conform to your standards and constraints. Schematics can be chained, running other schematics to perform complex operations.</source>
          <target state="translated">Angularプロジェクトで操作するための回路図を独自に作成することができます。ライブラリ開発者は通常、Angular CLIと統合するために、ライブラリと一緒にスケマティックをパッケージ化します。また、開発環境に合わせてカスタマイズし、標準や制約に適合させる方法として、スタンドアロンの回路図を作成して Angular アプリケーション内のファイルや構造体を操作することもできます。スケマティックは連鎖させることができ、他のスケマティックを実行して複雑な操作を行うことができます。</target>
        </trans-unit>
        <trans-unit id="4a8d67e28759289cc6bcbb51cc77c3e30a377365" translate="yes" xml:space="preserve">
          <source>You can customize the colors and location of the &quot;required&quot; bar with standard CSS.</source>
          <target state="translated">標準のCSSで「必須」バーの色や位置をカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="a6535d84be299220c3583d61e10fd57135bb8841" translate="yes" xml:space="preserve">
          <source>You can declare component styles uses for its template in one of two ways: by referencing an external file, or directly within the component.</source>
          <target state="translated">コンポーネントのスタイルは、外部ファイルを参照するか、コンポーネント内で直接使用するかの2つの方法でテンプレートの使用を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="d0f5faa415cee36b43788b0df1cc6e70d1c30928" translate="yes" xml:space="preserve">
          <source>You can define &lt;a href=&quot;event-binding#custom-events-with-eventemitter&quot;&gt;custom events&lt;/a&gt; that send observable output data from a child to a parent component.</source>
          <target state="translated">子から親コンポーネントに監視可能な出力データを送信する&lt;a href=&quot;event-binding#custom-events-with-eventemitter&quot;&gt;カスタムイベント&lt;/a&gt;を定義できます。</target>
        </trans-unit>
        <trans-unit id="0c330139238c45a28d705043db327fe346fa05aa" translate="yes" xml:space="preserve">
          <source>You can define &lt;a href=&quot;template-syntax#custom-events-with-eventemitter&quot;&gt;custom events&lt;/a&gt; that send observable output data from a child to a parent component.</source>
          <target state="translated">監視可能な出力データを子から親コンポーネントに送信する&lt;a href=&quot;template-syntax#custom-events-with-eventemitter&quot;&gt;カスタムイベント&lt;/a&gt;を定義できます。</target>
        </trans-unit>
        <trans-unit id="f6e05a52d59bd7416a65b3c822f47eb478920897" translate="yes" xml:space="preserve">
          <source>You can define and name additional alternate configurations (such as &lt;code&gt;stage&lt;/code&gt;, for instance) appropriate to your development process. Some examples of different build configurations are &lt;code&gt;stable&lt;/code&gt;, &lt;code&gt;archive&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; used by AIO itself, and the individual locale-specific configurations required for building localized versions of an app. For details, see &lt;a href=&quot;i18n#merge-aot&quot;&gt;Internationalization (i18n)&lt;/a&gt;.</source>
          <target state="translated">開発プロセスに適した追加の代替構成（ &lt;code&gt;stage&lt;/code&gt; など）を定義して名前を付けることができます。別のビルド構成のいくつかの例は、 &lt;code&gt;stable&lt;/code&gt; 、 &lt;code&gt;archive&lt;/code&gt; および &lt;code&gt;next&lt;/code&gt; AIO自体によって使用され、アプリのローカライズ版を構築するために必要な個々のロケール固有の構成。詳細については、&lt;a href=&quot;i18n#merge-aot&quot;&gt;国際化（i18n）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="070c92c14b69843aa875a87772abc978bbc5bbba" translate="yes" xml:space="preserve">
          <source>You can define different named build configurations for your project, such as &lt;em&gt;stage&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt;, with different defaults.</source>
          <target state="translated">さまざまなデフォルトを使用して、プロジェクトのさまざまな名前付きビルド構成（&lt;em&gt;ステージ&lt;/em&gt;や&lt;em&gt;プロダクション&lt;/em&gt;など）を定義できます。</target>
        </trans-unit>
        <trans-unit id="d7c79c2994263547496b806d8f0d9b9c752d11bb" translate="yes" xml:space="preserve">
          <source>You can define more than one animation trigger for a component. You can attach animation triggers to different elements, and the parent-child relationships among the elements affect how and when the animations run.</source>
          <target state="translated">1 つのコンポーネントに複数のアニメーション トリガーを定義することができます。異なる要素にアニメーション トリガーをアタッチすることができ、要素間の親子関係はアニメーションの実行方法とタイミングに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="3449bb7cad3d7509a12617298d2aac87b4f37417" translate="yes" xml:space="preserve">
          <source>You can define more typings as needed.</source>
          <target state="translated">必要に応じて、より多くのタイプを定義することができます。</target>
        </trans-unit>
        <trans-unit id="2b86e82b76575c06502b5cbf966f538ae5960b8a" translate="yes" xml:space="preserve">
          <source>You can define new targets and their configuration options in the &quot;architect&quot; section of the &lt;code&gt;angular.json&lt;/code&gt; file. If you do so, you can run them from the command line using the &lt;code&gt;ng run&lt;/code&gt; command. Execute the command using the following format.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; ファイルの「architect」セクションで、新しいターゲットとその構成オプションを定義できます。その場合は、 &lt;code&gt;ng run&lt;/code&gt; コマンドを使用してコマンドラインから実行できます。以下の形式で実行してください。</target>
        </trans-unit>
        <trans-unit id="a7c8812077f813eac24e94cb58836b0daad42cb1" translate="yes" xml:space="preserve">
          <source>You can delay updating the form validity by changing the &lt;code&gt;updateOn&lt;/code&gt; property from &lt;code&gt;change&lt;/code&gt; (default) to &lt;code&gt;submit&lt;/code&gt; or &lt;code&gt;blur&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; プロパティを &lt;code&gt;change&lt;/code&gt; （デフォルト）から &lt;code&gt;submit&lt;/code&gt; または &lt;code&gt;blur&lt;/code&gt; に変更することで、フォームの有効性の更新を遅らせることができます。</target>
        </trans-unit>
        <trans-unit id="555e2b815ef71136a660d7333caebaaea286463c" translate="yes" xml:space="preserve">
          <source>You can derive a &lt;code&gt;FlyingHeroesImpureComponent&lt;/code&gt; from &lt;code&gt;FlyingHeroesComponent&lt;/code&gt;.</source>
          <target state="translated">あなたは得ることができます &lt;code&gt;FlyingHeroesImpureComponent&lt;/code&gt; から &lt;code&gt;FlyingHeroesComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="bc42f20d451072033702685f7d166a8d53715f40" translate="yes" xml:space="preserve">
          <source>You can derive a &lt;code&gt;FlyingHeroesImpureComponent&lt;/code&gt; from &lt;code&gt;FlyingHeroesComponent&lt;/code&gt;. As shown in the code below, only the pipe in the template changes.</source>
          <target state="translated">あなたは得ることができます &lt;code&gt;FlyingHeroesImpureComponent&lt;/code&gt; から &lt;code&gt;FlyingHeroesComponent&lt;/code&gt; を。以下のコードに示すように、テンプレートのパイプのみが変更されます。</target>
        </trans-unit>
        <trans-unit id="8572625c13e938fdc870561f46c6c616317ba632" translate="yes" xml:space="preserve">
          <source>You can disable certain type-checking operations individually, while maintaining strictness in other aspects, by setting a &lt;em&gt;strictness flag&lt;/em&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;厳密性フラグ&lt;/em&gt;を &lt;code&gt;false&lt;/code&gt; に設定することにより、他の側面で厳密性を維持しながら、特定の型チェック操作を個別に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="5899012630cba0f712c1ba819cad3170cdca329f" translate="yes" xml:space="preserve">
          <source>You can disable strict checks entirely by setting &lt;code&gt;strictTemplates: false&lt;/code&gt; in the application's TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;.</source>
          <target state="translated">あなたは、設定によって完全に厳格なチェックを無効にすることができ &lt;code&gt;strictTemplates: false&lt;/code&gt; アプリケーションの活字体構成ファイルで、 &lt;code&gt;tsconfig.json&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="4b55901ea48bb7ba604055c678ad4c2468477e58" translate="yes" xml:space="preserve">
          <source>You can display a simple, inline code snippet with the markdown backtick syntax. Use a single backtick on either side of a term when referring to code or the name of a file in a sentence. The following are some examples:</source>
          <target state="translated">マークダウンのバックスティック構文を使用して、シンプルなインラインコードスニペットを表示することができます。文中のコードやファイル名を参照する場合は、用語の両側に1つのバックスティックを使用します。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="2ffd0ad079ad1ea51a270451ed3e1c28e0ab44e5" translate="yes" xml:space="preserve">
          <source>You can display an entire JSON file by referring to it in the &lt;code&gt;src&lt;/code&gt; attribute. But you can't display JSON fragments because you can't add &lt;code&gt;#docregion&lt;/code&gt; tags to the file.</source>
          <target state="translated">JSONファイル全体を &lt;code&gt;src&lt;/code&gt; 属性で参照して表示できます。ただし、 &lt;code&gt;#docregion&lt;/code&gt; タグをファイルに追加できないため、JSONフラグメントを表示できません。</target>
        </trans-unit>
        <trans-unit id="291d240e95d4d063d545379c3c51724bce25c2e8" translate="yes" xml:space="preserve">
          <source>You can display data by binding controls in an HTML template to properties of an Angular component.</source>
          <target state="translated">HTMLテンプレート内のコントロールをAngularコンポーネントのプロパティにバインドしてデータを表示することができます。</target>
        </trans-unit>
        <trans-unit id="6a010502fd06adef6c20c742d89bf7d297acf73c" translate="yes" xml:space="preserve">
          <source>You can display the value in the following ways.</source>
          <target state="translated">以下の方法で値を表示することができます。</target>
        </trans-unit>
        <trans-unit id="ede39e87e87aee0795c2d7d1ea78f8c841b3aad9" translate="yes" xml:space="preserve">
          <source>You can display the value in these ways:</source>
          <target state="translated">このような方法で値を表示することができます。</target>
        </trans-unit>
        <trans-unit id="ac58ffa3b071516db387527586fca41e868b2ad6" translate="yes" xml:space="preserve">
          <source>You can do better. The current version of the helper function can only alias the &lt;code&gt;Parent&lt;/code&gt; class interface. The application might have a variety of parent types, each with its own class interface token.</source>
          <target state="translated">あなたはもっとうまくできる。ヘルパー関数の現在のバージョンは、 &lt;code&gt;Parent&lt;/code&gt; クラスインターフェイスにのみエイリアスを設定できます。アプリケーションにはさまざまな親タイプがあり、それぞれに独自のクラスインターフェーストークンがあります。</target>
        </trans-unit>
        <trans-unit id="c7e5b36898ec53ccfbae3960fab9e44e2c6e63e8" translate="yes" xml:space="preserve">
          <source>You can do this using the &lt;code&gt;Tree&lt;/code&gt; object that is passed in to the factory function. The &lt;code&gt;Tree&lt;/code&gt; methods give you access to the complete file tree in your workspace, allowing you to read and write files during the execution of the schematic.</source>
          <target state="translated">これは、ファクトリ関数に渡される &lt;code&gt;Tree&lt;/code&gt; オブジェクトを使用して行うことができます。 &lt;code&gt;Tree&lt;/code&gt; のメソッドを使用すると、図の実行中にファイルを読み書きすることができ、あなたのワークスペースの完全なファイルツリーへのアクセスを与えます。</target>
        </trans-unit>
        <trans-unit id="d60529d154b74681358fb9cf90c6c7508fc0ed4d" translate="yes" xml:space="preserve">
          <source>You can do this with the following CLI command:</source>
          <target state="translated">これは以下のCLIコマンドで行うことができます。</target>
        </trans-unit>
        <trans-unit id="13f0f823e3d3100beeeb91979f874022c4217e88" translate="yes" xml:space="preserve">
          <source>You can download and install these npm packages by using the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm CLI client&lt;/a&gt;, which is installed with and runs as a &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&amp;reg;&lt;/a&gt; application. By default, the Angular CLI uses the npm client.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&amp;reg;&lt;/a&gt;アプリケーションと共にインストールされ、実行される&lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm CLIクライアント&lt;/a&gt;を使用して、これらのnpmパッケージをダウンロードしてインストールできます。デフォルトでは、Angular CLIはnpmクライアントを使用します。</target>
        </trans-unit>
        <trans-unit id="a02e0bb30025aa00e170368ade31ca3ea0131f9b" translate="yes" xml:space="preserve">
          <source>You can download the full code for the example here.</source>
          <target state="translated">例のフルコードはこちらからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="9c2a2a89a8319949ef9b88709ed46c7cdbf8bf21" translate="yes" xml:space="preserve">
          <source>You can dramatically reduce launch time by only loading the application modules that absolutely must be present when the app starts.</source>
          <target state="translated">アプリの起動時に絶対に存在しなければならないアプリモジュールを読み込むだけで、起動時間を大幅に短縮することができます。</target>
        </trans-unit>
        <trans-unit id="4f4c3896b5dc34933cdf887de5836df2414d596e" translate="yes" xml:space="preserve">
          <source>You can easily prepare an app for server-side rendering by using the &lt;a href=&quot;glossary#cli&quot;&gt;CLI&lt;/a&gt; to run the &lt;a href=&quot;glossary#universal&quot;&gt;Angular Universal&lt;/a&gt; tool, using the &lt;code&gt;@nguniversal/express-engine&lt;/code&gt;&lt;a href=&quot;glossary#schematic&quot;&gt;schematic&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;CLI&lt;/a&gt;を使用して &lt;code&gt;@nguniversal/express-engine&lt;/code&gt; &lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;を使用し、&lt;a href=&quot;glossary#universal&quot;&gt;Angular Universal&lt;/a&gt;ツールを実行することで、サーバー側レンダリング用のアプリを簡単に準備できます。</target>
        </trans-unit>
        <trans-unit id="a143e8b55a76be2dea3a8ae04ec59950910ae18d" translate="yes" xml:space="preserve">
          <source>You can easily prepare an app for server-side rendering using the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;. The CLI schematic &lt;code&gt;@nguniversal/express-engine&lt;/code&gt; performs the required steps, as described below.</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、サーバー側レンダリング用のアプリを簡単に準備できます。CLI回路図 &lt;code&gt;@nguniversal/express-engine&lt;/code&gt; は、以下に説明するように、必要な手順を実行します。</target>
        </trans-unit>
        <trans-unit id="a3830cf1ca507cad1ddec4a3f166a3756522e2ff" translate="yes" xml:space="preserve">
          <source>You can edit the generated files directly, or add to and modify them using CLI commands. Use the &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;ng generate&lt;/a&gt; command to add new files for additional components and services, and code for new pipes, directives, and so on. Commands such as &lt;a href=&quot;https://angular.io/cli/add&quot;&gt;add&lt;/a&gt; and &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt;, which create or operate on apps and libraries, must be executed from within a workspace or project folder.</source>
          <target state="translated">生成されたファイルを直接編集するか、CLIコマンドを使用してそれらに追加および変更できます。&lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;ng generate&lt;/a&gt;コマンドを使用して、追加のコンポーネントおよびサービス用の新しいファイルを追加し、新しいパイプ、ディレクティブなどのコードを追加します。アプリやライブラリを作成または操作する&lt;a href=&quot;https://angular.io/cli/add&quot;&gt;add&lt;/a&gt;や&lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt;などのコマンドは、ワークスペースまたはプロジェクトフォルダー内から実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="55b2b440eef3d22b70c021aecd01704cff5b5ffb" translate="yes" xml:space="preserve">
          <source>You can edit the proxy configuration file to add configuration options; some examples are given below. For a description of all options, see &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;webpack DevServer documentation&lt;/a&gt;.</source>
          <target state="translated">プロキシ構成ファイルを編集して、構成オプションを追加できます。いくつかの例を以下に示します。すべてのオプションの説明については、&lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;webpack DevServerのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1cdad80eb4abed168a6eefabf6e3c7323039b384" translate="yes" xml:space="preserve">
          <source>You can edit the proxy configuration file to add configuration options; some examples are given below. For a description of all options, see &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserverproxy&quot;&gt;webpack DevServer documentation&lt;/a&gt;.</source>
          <target state="translated">プロキシ構成ファイルを編集して、構成オプションを追加できます。いくつかの例を以下に示します。すべてのオプションの説明については、&lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserverproxy&quot;&gt;webpackDevServerのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d55887342a7e2b4bf61a9bc497f55a86b85f0a3c" translate="yes" xml:space="preserve">
          <source>You can embed CSS styles directly into the HTML template by putting them inside &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">CSSスタイルをHTMLテンプレートに直接埋め込むには、スタイルを &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&amp;gt;&lt;/code&gt; タグで囲みます。</target>
        </trans-unit>
        <trans-unit id="59381f7e67a6d9d828a11b65cfc74f3f527203a2" translate="yes" xml:space="preserve">
          <source>You can embed the child components in the top component's template. Alternatively, make the top component a routing host by giving it a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;. Define child routes and let the router load module components into that outlet.</source>
          <target state="translated">最上位のコンポーネントのテンプレートに子コンポーネントを埋め込むことができます。または、最上位コンポーネントに &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; を指定して、ルーティングホストにします。子ルートを定義し、ルーターがモジュールコンポーネントをそのアウトレットにロードできるようにします。</target>
        </trans-unit>
        <trans-unit id="953bebafebd51eb4c834565e895b188e6299649c" translate="yes" xml:space="preserve">
          <source>You can evolve the &lt;code&gt;HeroDetailComponent&lt;/code&gt; into a rich hero editor without touching the parent &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">親 &lt;code&gt;HeroesComponent&lt;/code&gt; に手を触れることなく、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; をリッチなヒーローエディターに進化させることができます。</target>
        </trans-unit>
        <trans-unit id="7d14f84ae6b84469f93f38c19cac1baac2328f35" translate="yes" xml:space="preserve">
          <source>You can evolve the &lt;code&gt;HeroesComponent&lt;/code&gt; without touching the hero detail view.</source>
          <target state="translated">ヒーローの詳細ビューに触れることなく、 &lt;code&gt;HeroesComponent&lt;/code&gt; を進化させることができます。</target>
        </trans-unit>
        <trans-unit id="dd30bc281b49ef7b245cac200e3d2195aa62b753" translate="yes" xml:space="preserve">
          <source>You can extend the HTML vocabulary of your templates with components and directives that appear as new elements and attributes. In the following sections, you'll learn how to get and set DOM (Document Object Model) values dynamically through data binding.</source>
          <target state="translated">新しい要素や属性として現れるコンポーネントやディレクティブを使って、テンプレートの HTML 語彙を拡張することができます。以下のセクションでは、データバインディングを使って DOM (Document Object Model)の値を動的に取得したり設定したりする方法を学びます。</target>
        </trans-unit>
        <trans-unit id="c0277bf0af27fe3682bdfe5a611d0bd44ec3863e" translate="yes" xml:space="preserve">
          <source>You can extract that logic into a helper function like the following.</source>
          <target state="translated">そのロジックを以下のようなヘルパー関数に抽出することができます。</target>
        </trans-unit>
        <trans-unit id="e3244f9996e0345480cc6e85252fa30afafd1a3d" translate="yes" xml:space="preserve">
          <source>You can find a full-featured example with custom Bazel configurations at &lt;a href=&quot;http://github.com/angular/angular-bazel-example&quot;&gt;http://github.com/angular/angular-bazel-example&lt;/a&gt;.</source>
          <target state="translated">カスタムBazel構成を使用したフル機能の例は、&lt;a href=&quot;http://github.com/angular/angular-bazel-example&quot;&gt;http:&lt;/a&gt; //github.com/angular/angular-bazel-exampleで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="6a5dfa2867ec063c10de236be817414ebb299888" translate="yes" xml:space="preserve">
          <source>You can find a parent component with a &lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;class interface&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;クラスインターフェースを&lt;/a&gt;持つ親コンポーネントを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="7e675b03c39c851f8b67200a9727d69956a81531" translate="yes" xml:space="preserve">
          <source>You can find out more about TypeScript support in Visual Studio &lt;strong&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/announcing-typescript-3-1/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">Visual Studio &lt;strong&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/announcing-typescript-3-1/&quot;&gt;での&lt;/a&gt;&lt;/strong&gt; TypeScriptサポートの詳細については、&lt;strong&gt;こちらをご覧ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cdb7d0fae6312602ef41e8ab26fbb1e0c71bf16f" translate="yes" xml:space="preserve">
          <source>You can find the code from the examples used here in &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;this GitHub repository&lt;/a&gt;.</source>
          <target state="translated">ここで使用されている例のコードは、&lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;このGitHubリポジトリにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7139d56e71c53394c552354f6dc94485d47d774d" translate="yes" xml:space="preserve">
          <source>You can fine-tune many options by editing the &lt;code&gt;karma.conf.js&lt;/code&gt; and the &lt;code&gt;test.ts&lt;/code&gt; files in the &lt;code&gt;src/&lt;/code&gt; folder.</source>
          <target state="translated">あなたは、微調整することができ、多くのオプションを編集することによって &lt;code&gt;karma.conf.js&lt;/code&gt; と &lt;code&gt;test.ts&lt;/code&gt; の内のファイルを &lt;code&gt;src/&lt;/code&gt; フォルダ。</target>
        </trans-unit>
        <trans-unit id="fcd2892c8d1524591215c0129def7ece020ab19c" translate="yes" xml:space="preserve">
          <source>You can fine-tune many options by editing the &lt;code&gt;karma.conf.js&lt;/code&gt; in the root folder of the project and the &lt;code&gt;test.ts&lt;/code&gt; files in the &lt;code&gt;src/&lt;/code&gt; folder.</source>
          <target state="translated">プロジェクトのルートフォルダーにある &lt;code&gt;test.ts&lt;/code&gt; と &lt;code&gt;src/&lt;/code&gt; フォルダーにあるtest.tsファイルを編集する &lt;code&gt;karma.conf.js&lt;/code&gt; で、多くのオプションを微調整できます。</target>
        </trans-unit>
        <trans-unit id="4183363dbcc2b00645b348754346df8bdfbefe47" translate="yes" xml:space="preserve">
          <source>You can fix the error by converting to this:</source>
          <target state="translated">これに変換することでエラーを修正することができます。</target>
        </trans-unit>
        <trans-unit id="e4e039b97114a71a3ad91fd8f91f005c957be10b" translate="yes" xml:space="preserve">
          <source>You can float the image to the left or right of text by applying the class=&quot;left&quot; or class=&quot;right&quot; attributes respectively.</source>
          <target state="translated">class=&quot;left&quot;、class=&quot;right &quot;属性をそれぞれ適用することで、テキストの左右に画像を浮かせることができます。</target>
        </trans-unit>
        <trans-unit id="02a6b79592ca7ded1204263d305e6d1f79e1b37d" translate="yes" xml:space="preserve">
          <source>You can force a single space to be preserved in a text node by using &lt;code&gt;&amp;amp;ngsp;&lt;/code&gt;, which is replaced with a space character by Angular's template compiler:</source>
          <target state="translated">&lt;code&gt;&amp;amp;ngsp;&lt;/code&gt; を使用すると、テキストノードで単一のスペースを強制的に保持できます。これは、Angularのテンプレートコンパイラによってスペース文字に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="0cf5418bbf3be1c76066055129b066c942158ee6" translate="yes" xml:space="preserve">
          <source>You can free the links from this dependency by defining paths that are &lt;strong&gt;relative&lt;/strong&gt; to the current URL segment. Navigation &lt;em&gt;within&lt;/em&gt; the feature area remains intact even if you change the parent route path to the feature.</source>
          <target state="translated">現在のURLセグメントに&lt;strong&gt;関連&lt;/strong&gt;するパスを定義することにより、この依存関係からリンクを解放できます。フィーチャへの親ルートパスを変更しても、フィーチャエリア&lt;em&gt;内&lt;/em&gt;のナビゲーションはそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="308627f21946df33743aceff26473f2f0284097f" translate="yes" xml:space="preserve">
          <source>You can free the links from this dependency by defining paths that are relative to the current URL segment. Navigation within the feature area remains intact even if you change the parent route path to the feature.</source>
          <target state="translated">現在の URL セグメントからの相対パスを定義することで、リンクをこの依存関係から解放することができます。フィーチャーへの親ルートパスを変更しても、フィーチャー領域内のナビゲーションはそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="14d266a08a1829aaabf8a339bc2083708e745d2d" translate="yes" xml:space="preserve">
          <source>You can further configure assets to be copied by specifying assets as objects, rather than as simple paths relative to the workspace root. A asset specification object can have the following fields.</source>
          <target state="translated">ワークスペース ルートへの単純な相対パスではなく、オブジェクトとしてアセットを指定することで、コピーするアセットをさらに構成することができます。アセット指定オブジェクトは、以下のフィールドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="0523228fda909a4e3f682c92ec4eb74a546dfea5" translate="yes" xml:space="preserve">
          <source>You can go old-school with the &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; by providing the &lt;code&gt;useHash: true&lt;/code&gt; in an object as the second argument of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">あなたは、古い学校に行くことができ &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; を提供することで、 &lt;code&gt;useHash: true&lt;/code&gt; 対象に2番目の引数として &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f83daad825c2f27b864014bca63f996be0470b9" translate="yes" xml:space="preserve">
          <source>You can handle this with a &lt;code&gt;select&lt;/code&gt; ICU expression. It is similar to the &lt;code&gt;plural&lt;/code&gt; expressions except that you choose among alternative translations based on a string value instead of a number, and you define those string values.</source>
          <target state="translated">これは、 &lt;code&gt;select&lt;/code&gt; ICU式で処理できます。これは &lt;code&gt;plural&lt;/code&gt; 式に似ていますが、数値ではなく文字列値に基づいて代替翻訳の中から選択し、それらの文字列値を定義する点が異なります。</target>
        </trans-unit>
        <trans-unit id="e324b17603243d77a5b9220072a776f8afa8a8af" translate="yes" xml:space="preserve">
          <source>You can have multiple guards at every level of a routing hierarchy. The router checks the &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guards first, from the deepest child route to the top. Then it checks the &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guards from the top down to the deepest child route. If the feature module is loaded asynchronously, the &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard is checked before the module is loaded. If &lt;em&gt;any&lt;/em&gt; guard returns false, pending guards that have not completed will be canceled, and the entire navigation is canceled.</source>
          <target state="translated">ルーティング階層のすべてのレベルで複数のガードを設定できます。ルーターは、 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; ルートから最上部まで、最初にCanDeactivateおよび &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; ガードをチェックします。次に、 &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; ガードを上から下の最も深い子ルートまでチェックします。機能モジュールが非同期で読み込まれる場合、モジュールが読み込まれる前に &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; ガードがチェックされます。&lt;em&gt;いずれかの&lt;/em&gt;警備員がfalseを返した場合&lt;em&gt;、&lt;/em&gt;完了していない保留中の警備員はキャンセルされ、ナビゲーション全体がキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="f17b33a8668079897337758622845364d5988572" translate="yes" xml:space="preserve">
          <source>You can ignore this section if you &lt;em&gt;only&lt;/em&gt; run tests with the CLI &lt;code&gt;ng test&lt;/code&gt; command because the CLI compiles the application before running the tests.</source>
          <target state="translated">CLI はテストを実行する前にアプリケーションをコンパイルするため、CLI &lt;code&gt;ng test&lt;/code&gt; コマンドでテストを実行する&lt;em&gt;だけの&lt;/em&gt;場合は、このセクションを無視できます。</target>
        </trans-unit>
        <trans-unit id="74f74e622335e9c1a7e6eb95fadee60d4aeee5cb" translate="yes" xml:space="preserve">
          <source>You can implement custom scroll restoration behavior by adapting the enabled behavior as in the following example.</source>
          <target state="translated">次の例のように、有効になっている動作を適応させることで、カスタム スクロール復元動作を実装することができます。</target>
        </trans-unit>
        <trans-unit id="63ab6fcd9949fcaabde71a35cfa892d68734915b" translate="yes" xml:space="preserve">
          <source>You can import many standard directives from the &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; but some familiar directives belong to other modules. For example, you can use &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; only after importing the Angular &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; から多くの標準ディレクティブをインポートできますが、一部の使い慣れたディレクティブは他のモジュールに属しています。たとえば、Angular &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートした後でのみ、 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="048d6b955997ab2dc90361320fef8a383f5dbdc3" translate="yes" xml:space="preserve">
          <source>You can import the reusable &lt;code&gt;transAnimation&lt;/code&gt; variable in your component class and reuse it using the &lt;code&gt;&lt;a href=&quot;../api/animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; method as shown below.</source>
          <target state="translated">以下に示すように、再利用可能な &lt;code&gt;transAnimation&lt;/code&gt; 変数をコンポーネントクラスにインポートし、 &lt;code&gt;&lt;a href=&quot;../api/animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; メソッドを使用して再利用できます。</target>
        </trans-unit>
        <trans-unit id="3d1e7eb2c9588cf0c364a973dcac3ff9e5a513a4" translate="yes" xml:space="preserve">
          <source>You can import this NgModule multiple times, once for each lazy-loaded bundle. However, only one &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service can be active. To ensure this, there are two ways to register routes when importing this module:</source>
          <target state="translated">このNgModuleは、遅延読み込みされたバンドルごとに1回ずつ、複数回インポートできます。ただし、アクティブにできる &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスは1つだけです。これを確実にするために、このモジュールをインポートするときにルートを登録する2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="c552bc56e89ced21ed33a97f96e2ec13d8356d3a" translate="yes" xml:space="preserve">
          <source>You can improve overall data quality by validating user input for accuracy and completeness. This page shows how to validate user input from the UI and display useful validation messages, in both reactive and template-driven forms.</source>
          <target state="translated">ユーザー入力の正確性と完全性を検証することで、データ全体の品質を向上させることができます。このページでは、リアクティブ フォームとテンプレート駆動型フォームの両方で、UI からのユーザー入力を検証し、有用な検証メッセージを表示する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="959bf0b464e81ba9568e9b1ceb76c4420a41eaee" translate="yes" xml:space="preserve">
          <source>You can improve template type checking for custom directives by adding template guard properties to your directive definition. These properties help the Angular template type checker find mistakes in the template at compile time, which can avoid runtime errors those mistakes can cause.</source>
          <target state="translated">ディレクティブの定義にテンプレートガードプロパティを追加することで、カスタムディレクティブのテンプレートタイプチェックを改善することができます。これらのプロパティはAngularのテンプレートタイプチェッカーがコンパイル時にテンプレートの間違いを見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="cb0b05a9fa7fcb3928b70e74b8f3538db46d78f8" translate="yes" xml:space="preserve">
          <source>You can improve the form. The &lt;em&gt;Name&lt;/em&gt; input box is required and clearing it turns the bar red. That says something is wrong but the user doesn't know &lt;em&gt;what&lt;/em&gt; is wrong or what to do about it. Leverage the control's state to reveal a helpful message.</source>
          <target state="translated">フォームを改善できます。&lt;em&gt;名前の&lt;/em&gt;入力ボックスが必要で、それはバーが赤色に変わりクリアされます。それは何かが間違っていると言いますが、ユーザーは&lt;em&gt;何&lt;/em&gt;が間違っているのか、それについて何をすべきか分かりません。コントロールの状態を利用して、役立つメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="a0c75c66228b5f5ce329827b3449e29bf82dcddc" translate="yes" xml:space="preserve">
          <source>You can include multiple state pairs within the same &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; argument: &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;( 'on =&amp;gt; off, off =&amp;gt; void' )&lt;/code&gt;.</source>
          <target state="translated">同じ &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 引数内に複数の状態ペアを含めることができます： &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;( 'on =&amp;gt; off, off =&amp;gt; void' )&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ac156c79a06cd914e8c4b134fe770761f4f8382" translate="yes" xml:space="preserve">
          <source>You can initialize a form array with any number of controls, from zero to many, by defining them in an array. Add an &lt;code&gt;aliases&lt;/code&gt; property to the form group instance for &lt;code&gt;profileForm&lt;/code&gt; to define the form array.</source>
          <target state="translated">配列で定義することにより、フォーム配列を0から多数の任意の数のコントロールで初期化できます。追加 &lt;code&gt;aliases&lt;/code&gt; のフォームグループインスタンスにプロパティを &lt;code&gt;profileForm&lt;/code&gt; は、フォームの配列を定義します。</target>
        </trans-unit>
        <trans-unit id="57a7cbf9d17d84729454c2ae11c3381c9231cf33" translate="yes" xml:space="preserve">
          <source>You can inject &lt;code&gt;Logger&lt;/code&gt;, but you can't inject the &lt;code&gt;isAuthorized&lt;/code&gt; flag. Instead, you can use a factory provider to create a new logger instance for &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; を挿入することはできますが、 &lt;code&gt;isAuthorized&lt;/code&gt; フラグを挿入することはできません。代わりに、ファクトリプロバイダーを使用して &lt;code&gt;HeroService&lt;/code&gt; の新しいロガーインスタンスを作成できます。</target>
        </trans-unit>
        <trans-unit id="d358461a8a4ad4e8935a6c66926e986469d18046" translate="yes" xml:space="preserve">
          <source>You can inject a &lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; instance into any component or service as a dependency.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; インスタンスを依存関係として任意のコンポーネントまたはサービスに注入できます。</target>
        </trans-unit>
        <trans-unit id="4e31ab6372af6365b67fa16cea127e455ab610dd" translate="yes" xml:space="preserve">
          <source>You can inspect the router's current configuration any time by injecting it and examining its &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; property. For example, update the &lt;code&gt;AppModule&lt;/code&gt; as follows and look in the browser console window to see the finished route configuration.</source>
          <target state="translated">あなたはそれを注入し、その調べることによって、ルータの現在の設定をいつでも調べることができます &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; プロパティを。たとえば、 &lt;code&gt;AppModule&lt;/code&gt; を次のように更新し、ブラウザーコンソールウィンドウを調べて、完成したルート構成を確認します。</target>
        </trans-unit>
        <trans-unit id="88e42aa644052a3cd780c837838d3b25c03ed2aa" translate="yes" xml:space="preserve">
          <source>You can install these typings via &lt;code&gt;npm&lt;/code&gt; using the &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html&quot;&gt;&lt;code&gt;@types/*&lt;/code&gt; scoped package&lt;/a&gt; and Typescript, starting at 2.0, automatically recognizes them.</source>
          <target state="translated">&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html&quot;&gt; &lt;code&gt;@types/*&lt;/code&gt; &lt;/a&gt;スコープパッケージと2.0から始まるTypescriptを使用して、 &lt;code&gt;npm&lt;/code&gt; を介してこれらのタイピングをインストールできます。</target>
        </trans-unit>
        <trans-unit id="4d150f813c4cf4eff3a6700ede69d569c701f58b" translate="yes" xml:space="preserve">
          <source>You can instruct the directive to handle query parameters differently by specifying the &lt;code&gt;queryParamsHandling&lt;/code&gt; option in the link. Allowed values are:</source>
          <target state="translated">リンクで &lt;code&gt;queryParamsHandling&lt;/code&gt; オプションを指定することにより、クエリパラメータを異なる方法で処理するようにディレクティブに指示できます。許可される値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e311ff2a06fc6a14636f4cb8e72cf657949b7e97" translate="yes" xml:space="preserve">
          <source>You can invoke a builder indirectly through a CLI command, or directly with the Angular CLI &lt;code&gt;ng run&lt;/code&gt; command. In either case, you must provide required inputs, but can allow other inputs to default to values that are pre-configured for a specific &lt;a href=&quot;glossary#target&quot;&gt;&lt;em&gt;target&lt;/em&gt;&lt;/a&gt;, provide a pre-defined, named override configuration, and provide further override option values on the command line.</source>
          <target state="translated">ビルダーは、CLIコマンドを介して間接的に、またはAngular CLI &lt;code&gt;ng run&lt;/code&gt; コマンドを使用して直接呼び出すことができます。どちらの場合も、必要な入力を提供する必要がありますが、他の入力を特定の&lt;a href=&quot;glossary#target&quot;&gt;&lt;em&gt;ターゲット&lt;/em&gt;&lt;/a&gt;用に事前構成された値にデフォルト設定し、事前定義された名前付きオーバーライド構成を提供し、コマンドラインでさらにオーバーライドオプション値を提供できます。</target>
        </trans-unit>
        <trans-unit id="c328e928c0f81c114fcb525c3dd49a41f94be397" translate="yes" xml:space="preserve">
          <source>You can learn about more advanced features in Angular animations under the Animation section, beginning with advanced techniques in &lt;a href=&quot;transition-and-triggers&quot;&gt;transition and triggers&lt;/a&gt;.</source>
          <target state="translated">Angularアニメーションのより高度な機能については、アニメーションセクションで、&lt;a href=&quot;transition-and-triggers&quot;&gt;遷移とトリガーの&lt;/a&gt;高度なテクニックから学ぶことができます。</target>
        </trans-unit>
        <trans-unit id="5d504b4aea418c20eb9652980c43550affca7677" translate="yes" xml:space="preserve">
          <source>You can limit the scope of an injected service to a &lt;em&gt;branch&lt;/em&gt; of the application hierarchy by providing that service &lt;em&gt;at the sub-root component for that branch&lt;/em&gt;. This example shows how to make a different instance of &lt;code&gt;HeroService&lt;/code&gt; available to &lt;code&gt;HeroesBaseComponent&lt;/code&gt; by adding it to the &lt;code&gt;providers&lt;/code&gt; array of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator of the sub-component.</source>
          <target state="translated">注入されたサービスのスコープをアプリケーション階層の&lt;em&gt;ブランチ&lt;/em&gt;に制限するには、&lt;em&gt;そのブランチのサブルートコンポーネントで&lt;/em&gt;そのサービス&lt;em&gt;を&lt;/em&gt;提供します。異なるインスタンス作成する方法この実施例は &lt;code&gt;HeroService&lt;/code&gt; のに利用できる &lt;code&gt;HeroesBaseComponent&lt;/code&gt; にそれを追加することにより、 &lt;code&gt;providers&lt;/code&gt; のアレイ &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; サブコンポーネントのデコレータ。</target>
        </trans-unit>
        <trans-unit id="e6070da25b2a0b151c4ce287cbcaf5c26128e1f4" translate="yes" xml:space="preserve">
          <source>You can load feature areas only when requested by the user.</source>
          <target state="translated">ユーザーからのリクエストがあった場合にのみ、フィーチャ領域をロードすることができます。</target>
        </trans-unit>
        <trans-unit id="97e5cc86ea12ce045788f5079a5f052bb8f44ab3" translate="yes" xml:space="preserve">
          <source>You can load styles from external CSS files by adding a &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; property to a component's &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">コンポーネントの &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;デコレータに &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; プロパティを追加することで、外部CSSファイルからスタイルをロードできます。</target>
        </trans-unit>
        <trans-unit id="f6b521ecf099d11a3d7a17c7b266cb3c629fed56" translate="yes" xml:space="preserve">
          <source>You can load styles from external CSS files by adding a &lt;code&gt;styleUrls&lt;/code&gt; property to a component's &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">&lt;code&gt;styleUrls&lt;/code&gt; プロパティをコンポーネントの &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータに追加することで、外部CSSファイルからスタイルをロードできます。</target>
        </trans-unit>
        <trans-unit id="21d2bebf7b40dee40bc3a4ea1294b9a104a5f164" translate="yes" xml:space="preserve">
          <source>You can locate the anchor elements with an attached directive using &lt;code&gt;By.directive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;By.directive&lt;/code&gt; を使用して、添付されたディレクティブでアンカー要素を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="11b942fb978594e7c72343401bfdc14dac1069c9" translate="yes" xml:space="preserve">
          <source>You can make AngularJS services available for injection to Angular code by &lt;em&gt;upgrading&lt;/em&gt; them. The same singleton instance of each service is shared between the frameworks. In Angular these services will always be in the &lt;em&gt;root injector&lt;/em&gt; and available to all components.</source>
          <target state="translated">AngularJSサービスを&lt;em&gt;アップグレード&lt;/em&gt;して、Angularコードへのインジェクションに利用できるようにすることができます。各サービスの同じシングルトンインスタンスは、フレームワーク間で共有されます。Angularでは、これらのサービスは常に&lt;em&gt;ルートインジェクター&lt;/em&gt;にあり、すべてのコンポーネントで利用できます。</target>
        </trans-unit>
        <trans-unit id="c620f67eb0a795fbb0c95a02ff707b1d0e3f53a6" translate="yes" xml:space="preserve">
          <source>You can make a provider tree-shakable by specifying it in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator on the service itself, rather than in the metadata for the NgModule or component that depends on the service.</source>
          <target state="translated">あなたはそれを指定することにより、プロバイダツリー揺動可能に作ることができます &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; ではなくNgModuleやサービスに依存してコンポーネントのメタデータよりもサービス自体のデコレータ、。</target>
        </trans-unit>
        <trans-unit id="f5115f6597d1fb8a8800fdb5e9baeb31f495399d" translate="yes" xml:space="preserve">
          <source>You can make better decisions about what to optimize and how when you have a clear and accurate understanding of what's making the application slow. The cause may not be what you think it is. You can waste a lot of time and money optimizing something that has no tangible benefit or even makes the app slower. You should measure the app's actual behavior when running in the environments that are important to you.</source>
          <target state="translated">アプリケーションの動作を遅くしている原因を明確かつ正確に理解していれば、何をどのように最適化すべきかをより適切に判断することができます。原因は、あなたが考えているものではないかもしれません。目に見えるメリットがなかったり、アプリの動作を遅くしたりするものを最適化しても、多くの時間とお金を無駄にすることになります。あなたにとって重要な環境で実行しているときに、アプリの実際の動作を測定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ea15caf34b9c2e675bec7f06fbaebb5697ffd0ac" translate="yes" xml:space="preserve">
          <source>You can make this more efficient with &lt;code&gt;trackBy&lt;/code&gt;. Add a method to the component that returns the value &lt;code&gt;NgFor&lt;/code&gt; should track. In this case, that value is the hero's &lt;code&gt;id&lt;/code&gt;. If the &lt;code&gt;id&lt;/code&gt; has already been rendered, Angular keeps track of it and doesn't re-query the server for the same &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">これを &lt;code&gt;trackBy&lt;/code&gt; でより効率的にすることができます。 &lt;code&gt;NgFor&lt;/code&gt; が追跡する値を返すメソッドをコンポーネントに追加します。この場合、その値はヒーローの &lt;code&gt;id&lt;/code&gt; です。 &lt;code&gt;id&lt;/code&gt; が既にレンダリングされている場合、Angularはそれを追跡し、サーバーに同じ &lt;code&gt;id&lt;/code&gt; を再クエリしません。</target>
        </trans-unit>
        <trans-unit id="a4a982f4572dfef3dcb894891e9ee0a167cf94fb" translate="yes" xml:space="preserve">
          <source>You can manage the dependency structure among your components and injectable services to optimize bundle size by using &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;tree-shakable providers&lt;/a&gt;. This normally ensures that if a provided component or service is never actually used by the app, the compiler can eliminate its code from the bundle.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;ツリーを揺るがすプロバイダー&lt;/a&gt;を使用して、コンポーネントとインジェクタブルサービス間の依存関係構造を管理し、バンドルサイズを最適化できます。これにより、通常、提供されたコンポーネントまたはサービスがアプリで実際に使用されない場合、コンパイラーはそのコードをバンドルから削除できます。</target>
        </trans-unit>
        <trans-unit id="045ade6f004f8024c8284fa17c5d7a0a2346b54e" translate="yes" xml:space="preserve">
          <source>You can manually adjust the Bazel configuration to:</source>
          <target state="translated">バゼルの設定を手動で調整することができます。</target>
        </trans-unit>
        <trans-unit id="b61e4e80136f98ed58f12a42c20d45c91705d428" translate="yes" xml:space="preserve">
          <source>You can manually trigger a change detection run in Angular using &lt;a href=&quot;../../core/ngzone#run&quot;&gt;ngZone.run(...)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../core/ngzone#run&quot;&gt;ngZone.run（...）&lt;/a&gt;を使用して、Angularで手動で変更検出実行をトリガーできます。</target>
        </trans-unit>
        <trans-unit id="58372084792d705f05707f76c61fb4eb814ea680" translate="yes" xml:space="preserve">
          <source>You can manually trigger a change detection run in AngularJS using &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope.$apply(...)&lt;/a&gt; or &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$rootScope.$digest()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope。$ apply（...）&lt;/a&gt;または&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$ rootScope。$ digest（）&lt;/a&gt;を使用して、AngularJSで変更検出の実行を手動でトリガーできます。</target>
        </trans-unit>
        <trans-unit id="8c7243a1f5e131603784c456c2cc58a65c1e923e" translate="yes" xml:space="preserve">
          <source>You can mark required fields and invalid data at the same time with a colored bar on the left of the input box:</source>
          <target state="translated">入力ボックスの左に色付きのバーを表示して、必須項目と無効なデータを同時にマークすることができます。</target>
        </trans-unit>
        <trans-unit id="88a8a63ecb441c7b5113a16a3b36a5b49c911106" translate="yes" xml:space="preserve">
          <source>You can mix simple and complex file references for styles and scripts.</source>
          <target state="translated">スタイルやスクリプトのためのシンプルなファイル参照と複雑なファイル参照を混在させることができます。</target>
        </trans-unit>
        <trans-unit id="e5a0a85d80c2399e713250eb9c8252c0c895b8b6" translate="yes" xml:space="preserve">
          <source>You can nest &lt;em&gt;#docregions&lt;/em&gt; within &lt;em&gt;#docregions&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;#docregions&lt;/em&gt;内に&lt;em&gt;#docregions&lt;/em&gt;をネスト&lt;em&gt;でき&lt;/em&gt;ます&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="41e67eb51e333fead5fa73e3940ea80832ba058c" translate="yes" xml:space="preserve">
          <source>You can now inject &lt;code&gt;UserService&lt;/code&gt; anywhere in your application.</source>
          <target state="translated">これで、アプリケーションの任意の場所に &lt;code&gt;UserService&lt;/code&gt; を挿入できます。</target>
        </trans-unit>
        <trans-unit id="d8087288313565593d700d4490b370c59ff4808f" translate="yes" xml:space="preserve">
          <source>You can now link the AngularJS and Angular modules together using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用して、AngularJSとAngularモジュールをリンクできます。</target>
        </trans-unit>
        <trans-unit id="9fb8c13f108306a24757b5c6575d515cfebf3477" translate="yes" xml:space="preserve">
          <source>You can now remove the diagnostic messages that show interpolated values.</source>
          <target state="translated">これで、補間された値を表示する診断メッセージを削除できるようになりました。</target>
        </trans-unit>
        <trans-unit id="701cf0f18eab7b3d090d4b2dc773f03f87a69e45" translate="yes" xml:space="preserve">
          <source>You can often use observables instead of promises to deliver values asynchronously. Similarly, observables can take the place of event handlers. Finally, because observables deliver multiple values, you can use them where you might otherwise build and operate on arrays.</source>
          <target state="translated">多くの場合、プロミスの代わりにオブザーバブルを使用して非同期に値を配信することができます。同様に、オブザーバブルはイベントハンドラの代わりになります。最後に、オブザーバブルは複数の値を受け取ることができるので、他の方法では配列を構築して操作してしまうような場所でも利用することができます。</target>
        </trans-unit>
        <trans-unit id="8b83ef792a7cc363783f104944038f705754a22f" translate="yes" xml:space="preserve">
          <source>You can optionally &lt;a href=&quot;i18n#localize-build-one-locale&quot;&gt;apply specific build options for just one locale&lt;/a&gt; for a custom locale configuration.</source>
          <target state="translated">&lt;a href=&quot;i18n#localize-build-one-locale&quot;&gt;オプション&lt;/a&gt;で、カスタムロケール構成の1つのロケールにのみ特定のビルドオプションを適用できます。</target>
        </trans-unit>
        <trans-unit id="c95780511a4865de9a130836f30d710e5494d668" translate="yes" xml:space="preserve">
          <source>You can override the default behavior to preserve whitespace characters in certain fragments of a template. For example, you can exclude an entire DOM sub-tree by using the &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; attribute:</source>
          <target state="translated">デフォルトの動作を上書きして、テンプレートの特定のフラグメントの空白文字を保持できます。たとえば、 &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; 属性を使用して、DOMサブツリー全体を除外できます。</target>
        </trans-unit>
        <trans-unit id="daeb3c5b720f7322722cafbcc680d64a007b3a22" translate="yes" xml:space="preserve">
          <source>You can pass an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; directly as the only parameter. In this case, the call returns an observable of the raw &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; を唯一のパラメーターとして直接渡すことができます。この場合、呼び出しは未加工の &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; ストリームのオブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="3185ab6fec67953120e0e3dfce102272c27a3966" translate="yes" xml:space="preserve">
          <source>You can place a local variable, &lt;code&gt;#timer&lt;/code&gt;, on the tag &lt;code&gt;&amp;lt;countdown-timer&amp;gt;&lt;/code&gt; representing the child component. That gives you a reference to the child component and the ability to access &lt;em&gt;any of its properties or methods&lt;/em&gt; from within the parent template.</source>
          <target state="translated">子コンポーネントを表すタグ &lt;code&gt;&amp;lt;countdown-timer&amp;gt;&lt;/code&gt; にローカル変数 &lt;code&gt;#timer&lt;/code&gt; を配置できます。これにより、子コンポーネントへの参照と、親テンプレート内から&lt;em&gt;そのプロパティまたはメソッド&lt;/em&gt;にアクセスできる&lt;em&gt;ように&lt;/em&gt;なります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf79dfa5772a9477726707cd1eab2860b2061ff1" translate="yes" xml:space="preserve">
          <source>You can provide a &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; value to be persisted to the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&quot;&gt;&lt;code&gt;History.state&lt;/code&gt; property&lt;/a&gt;. For example:</source>
          <target state="translated">ブラウザの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&quot;&gt; &lt;code&gt;History.state&lt;/code&gt; &lt;/a&gt;プロパティに永続化する &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 値を指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="538aeb68ccb0479fb2ec5493a04a764d6a34b9fb" translate="yes" xml:space="preserve">
          <source>You can provide a &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; value to be persisted to the browser's History.state property (See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&lt;/a&gt;). It's used as follows:</source>
          <target state="translated">ブラウザのHistory.stateプロパティに永続化する &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 値を提供できます（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/History#Propertiesを&lt;/a&gt;参照）。次のように使用されます。</target>
        </trans-unit>
        <trans-unit id="0ff1114178f29ffc52254006ffd95d9da686b8c6" translate="yes" xml:space="preserve">
          <source>You can provide a logger-like object.</source>
          <target state="translated">ロガーのようなオブジェクトを提供することができます。</target>
        </trans-unit>
        <trans-unit id="676d7126f545e5e4768bed2cd0345410a667691f" translate="yes" xml:space="preserve">
          <source>You can provide a substitute class.</source>
          <target state="translated">振替授業を行うことができます。</target>
        </trans-unit>
        <trans-unit id="a9a21dca8b65c320ef8f82a6f713ac6a63053eb5" translate="yes" xml:space="preserve">
          <source>You can provide optional route parameters in an object like this:</source>
          <target state="translated">このようなオブジェクトにオプションのルートパラメータを指定することができます。</target>
        </trans-unit>
        <trans-unit id="177d0e0608aa597c48fff3e542b3deeeaf68e248" translate="yes" xml:space="preserve">
          <source>You can provide optional route parameters in an object, as in &lt;code&gt;{ foo: 'foo' }&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{ foo: 'foo' }&lt;/code&gt; ：のように、オブジェクトにオプションのルートパラメータを指定できます。</target>
        </trans-unit>
        <trans-unit id="4de9fbacb6170e74a484808726d720453f4f1ff2" translate="yes" xml:space="preserve">
          <source>You can provide options in the &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt; that controls the compilation process. See &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular compiler options&lt;/a&gt; for a complete list of available options.</source>
          <target state="translated">コンパイルプロセスを制御する&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript構成ファイル&lt;/a&gt;でオプションを提供できます。使用可能なオプションの完全なリストについては、&lt;a href=&quot;angular-compiler-options&quot;&gt;Angularコンパイラオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="92f630132bb026b30dfb76b81ff8dc91955e4f6a" translate="yes" xml:space="preserve">
          <source>You can provide options in the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt; that control the compilation process. See &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular compiler options&lt;/a&gt; for a complete list of available options.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript構成ファイル&lt;/a&gt;で、コンパイルプロセスを制御するオプションを提供できます。使用可能なオプションの完全なリストについては、&lt;a href=&quot;angular-compiler-options&quot;&gt;Angularコンパイラオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e242f46e8ea47ee054b620b9ef85db8bc3f60a51" translate="yes" xml:space="preserve">
          <source>You can proxy multiple entries to the same target by defining the configuration in JavaScript.</source>
          <target state="translated">JavaScriptで設定を定義することで、複数のエントリを同じターゲットにプロキシすることができます。</target>
        </trans-unit>
        <trans-unit id="e2f27807ce823bda66ee569bdd20d88eff9d363d" translate="yes" xml:space="preserve">
          <source>You can publish the builder to &lt;code&gt;npm&lt;/code&gt; (see &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;). If you publish it as &lt;code&gt;@example/my-builder&lt;/code&gt;, you can install it using the following command.</source>
          <target state="translated">ビルダーを &lt;code&gt;npm&lt;/code&gt; に公開でき&lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;ます（ライブラリの公開を&lt;/a&gt;参照）。 &lt;code&gt;@example/my-builder&lt;/code&gt; として公開する場合は、次のコマンドを使用してインストールできます。</target>
        </trans-unit>
        <trans-unit id="2c36c897ce7d3fdd4ea2b997c0a5cac88c795a31" translate="yes" xml:space="preserve">
          <source>You can quickly delete the &lt;em&gt;non-essential&lt;/em&gt; files that concern testing and QuickStart repository maintenance (&lt;strong&gt;&lt;em&gt;including all git-related artifacts&lt;/em&gt;&lt;/strong&gt; such as the &lt;code&gt;.git&lt;/code&gt; folder and &lt;code&gt;.gitignore&lt;/code&gt;!).</source>
          <target state="translated">テストとQuickStartリポジトリのメンテナンスに関係する&lt;em&gt;不要な&lt;/em&gt;ファイル（ &lt;code&gt;.git&lt;/code&gt; フォルダーや &lt;code&gt;.gitignore&lt;/code&gt; などの&lt;strong&gt;&lt;em&gt;git関連のアーティファクトを含む）を&lt;/em&gt;&lt;/strong&gt;すばやく削除できます。</target>
        </trans-unit>
        <trans-unit id="c8b40253d813013725ea47afec63ea2be28a9278" translate="yes" xml:space="preserve">
          <source>You can re-use the &lt;code&gt;HeroDetailComponent&lt;/code&gt; in the template of some future component.</source>
          <target state="translated">将来のコンポーネントのテンプレートで &lt;code&gt;HeroDetailComponent&lt;/code&gt; を再利用できます。</target>
        </trans-unit>
        <trans-unit id="56cc95da9973b3816e147921ac071900a4dc96b4" translate="yes" xml:space="preserve">
          <source>You can rebuild your library whenever you make changes to it, but this extra step takes time. &lt;em&gt;Incremental builds&lt;/em&gt; functionality improves the library-development experience. Every time a file is changed a partial build is performed that emits the amended files.</source>
          <target state="translated">ライブラリに変更を加えるたびにライブラリを再構築できますが、この余分なステップには時間がかかります。&lt;em&gt;インクリメンタルビルド&lt;/em&gt;機能により、ライブラリ開発エクスペリエンスが向上します。ファイルが変更されるたびに、修正されたファイルを出力する部分的なビルドが実行されます。</target>
        </trans-unit>
        <trans-unit id="6c142a343cfa3e541a4fc2b1ebbe8dd07fff8162" translate="yes" xml:space="preserve">
          <source>You can recreate the sample application from the code provided here, or you can examine or download the live example.</source>
          <target state="translated">ここで提供されているコードからサンプルアプリケーションを再現することもできますし、ライブサンプルを調べたりダウンロードしたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="f7ec3186adba56adb8f9143b8f42e25ff87f069c" translate="yes" xml:space="preserve">
          <source>You can refer to a template reference variable anywhere in the component's template. Here, a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; further down the template refers to the &lt;code&gt;phone&lt;/code&gt; variable.</source>
          <target state="translated">テンプレート参照変数は、コンポーネントのテンプレートの任意の場所で参照できます。ここで、テンプレートの下の方にある &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; は、 &lt;code&gt;phone&lt;/code&gt; 変数を指します。</target>
        </trans-unit>
        <trans-unit id="fcd617bbb17749cbaf0f3e354ab294df04fc71e8" translate="yes" xml:space="preserve">
          <source>You can refer to a template variable anywhere in the component's template. Here, a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; further down the template refers to the &lt;code&gt;phone&lt;/code&gt; variable.</source>
          <target state="translated">テンプレート変数は、コンポーネントのテンプレートのどこからでも参照できます。ここで、テンプレートのさらに下にある &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; は、 &lt;code&gt;phone&lt;/code&gt; 変数を参照します。</target>
        </trans-unit>
        <trans-unit id="02dd9f583e2bad4bde173ff2f8f5eafaf9dd160a" translate="yes" xml:space="preserve">
          <source>You can refer to a template variable anywhere within its surrounding template. &lt;a href=&quot;built-in-directives&quot;&gt;Structural directives&lt;/a&gt;, such as &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; act as a template boundary. You cannot access template variables outside of these boundaries.</source>
          <target state="translated">テンプレート変数は、周囲のテンプレート内のどこからでも参照できます。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;や &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;などの&lt;a href=&quot;built-in-directives&quot;&gt;構造ディレクティブ&lt;/a&gt;、または &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; はテンプレート境界として機能します。これらの境界外のテンプレート変数にアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="f6b770c753688e3e107552c140680af7064ef400" translate="yes" xml:space="preserve">
          <source>You can remove the &lt;code&gt;ng-app&lt;/code&gt; and &lt;code&gt;ng-strict-di&lt;/code&gt; directives from the HTML and instead switch to calling &lt;code&gt;angular.bootstrap&lt;/code&gt; from JavaScript, which will result in the same thing:</source>
          <target state="translated">HTMLから &lt;code&gt;ng-app&lt;/code&gt; および &lt;code&gt;ng-strict-di&lt;/code&gt; ディレクティブを削除し、代わりにJavaScriptから &lt;code&gt;angular.bootstrap&lt;/code&gt; の呼び出しに切り替えると、同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="4f60c3d9950ef77a8e039a1a31e3c8ff52b2c0d8" translate="yes" xml:space="preserve">
          <source>You can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding.</source>
          <target state="translated">これを、希望するクラス名の文字列へのバインディングに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="206aafc37bb578768e7437683d411e6dd264c7f0" translate="yes" xml:space="preserve">
          <source>You can replace this implementation with an Angular service class, while keeping the controllers in AngularJS land.</source>
          <target state="translated">この実装をAngularサービスクラスに置き換えることで、AngularJSのランドにあるコントローラを維持したまま、Angularサービスクラスに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="e7be057e2de9ed1860f45a1e1799db18ccf9f103" translate="yes" xml:space="preserve">
          <source>You can respond to events in the lifecycle of a component or directive by implementing one or more of the &lt;em&gt;lifecycle hook&lt;/em&gt; interfaces in the Angular &lt;code&gt;core&lt;/code&gt; library. The hooks give you the opportunity to act on a component or directive instance at the appropriate moment, as Angular creates, updates, or destroys that instance.</source>
          <target state="translated">Angular &lt;code&gt;core&lt;/code&gt; ライブラリに1つ以上の&lt;em&gt;ライフサイクルフック&lt;/em&gt;インターフェイスを実装することで、コンポーネントまたはディレクティブのライフサイクルのイベントに応答できます。フックは、Angularがそのインスタンスを作成、更新、または破棄するときに、適切なタイミングでコンポーネントまたはディレクティブインスタンスに作用する機会を提供します。</target>
        </trans-unit>
        <trans-unit id="44d5d0b10125e5f8e74b2bc8c994cd5be4ef4cc1" translate="yes" xml:space="preserve">
          <source>You can run &lt;code&gt;ngcc&lt;/code&gt; after each installation of node_modules by adding a &lt;code&gt;postinstall&lt;/code&gt;&lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;npm script&lt;/a&gt;:</source>
          <target state="translated">あなたは実行することができます &lt;code&gt;ngcc&lt;/code&gt; 追加することにより、node_modulesの各インストール後に &lt;code&gt;postinstall&lt;/code&gt; &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;NPMスクリプトを&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="1b887d25a90a1292b3bbb0b11889b1f7ff2cafc4" translate="yes" xml:space="preserve">
          <source>You can run the live example in Stackblitz and download the code from there.</source>
          <target state="translated">Stackblitzでライブサンプルを実行し、そこからコードをダウンロードすることができます。</target>
        </trans-unit>
        <trans-unit id="85168d9914082585c0a0f29e0ee2e7411592612e" translate="yes" xml:space="preserve">
          <source>You can run the live example of the sample app that accompanies this guide.</source>
          <target state="translated">このガイドに付属するサンプルアプリのライブサンプルを実行することができます。</target>
        </trans-unit>
        <trans-unit id="bff3daf58991142a36fa7e1bfb8b0fc2eef1f638" translate="yes" xml:space="preserve">
          <source>You can run the live example that accompanies this guide.</source>
          <target state="translated">このガイドに付属のライブサンプルを実行することができます。</target>
        </trans-unit>
        <trans-unit id="576ff802a6b3276e1c5dcfdb4a5924ab79d28e00" translate="yes" xml:space="preserve">
          <source>You can run these sample tests in a live coding environment.</source>
          <target state="translated">これらのサンプルテストは、ライブコーディング環境で実行することができます。</target>
        </trans-unit>
        <trans-unit id="60ab75ab23a5bae8c8870f7ce7de1176c12f8990" translate="yes" xml:space="preserve">
          <source>You can say &quot;OK&quot; and lose your changes or click &quot;Cancel&quot; and continue editing.</source>
          <target state="translated">OK」と言って変更を失うか、「キャンセル」をクリックして編集を続けることができます。</target>
        </trans-unit>
        <trans-unit id="bd8060c9ef6844ae859fc100f0b1443fca20ae63" translate="yes" xml:space="preserve">
          <source>You can see &lt;a href=&quot;https://material.angular.io/components/form-field/overview&quot;&gt;&lt;code&gt;MatFormField&lt;/code&gt;&lt;/a&gt; as an example of this pattern.</source>
          <target state="translated">このパターンの例として、&lt;a href=&quot;https://material.angular.io/components/form-field/overview&quot;&gt; &lt;code&gt;MatFormField&lt;/code&gt; &lt;/a&gt;を見ることができます。</target>
        </trans-unit>
        <trans-unit id="8d1c990e3148ef378045702cc6a3ce3ef228bc9d" translate="yes" xml:space="preserve">
          <source>You can see an &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba21c855c0c8b778005df01d4851b5a2176edc6f/packages/angular_devkit/build_angular/src/tslint/index.ts#L107&quot;&gt;example&lt;/a&gt; of how the &lt;code&gt;tslint&lt;/code&gt; builder reports progress.</source>
          <target state="translated">&lt;code&gt;tslint&lt;/code&gt; ビルダーが進行状況を報告する方法の&lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba21c855c0c8b778005df01d4851b5a2176edc6f/packages/angular_devkit/build_angular/src/tslint/index.ts#L107&quot;&gt;例&lt;/a&gt;を見ることができます。</target>
        </trans-unit>
        <trans-unit id="128d004e25ac720b903271778856c926e0a4a47e" translate="yes" xml:space="preserve">
          <source>You can see examples of schema files for the Angular CLI command schematics in &lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt;&lt;code&gt;@schematics/angular&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Angular CLIコマンドのスキーマのスキーマファイルの例は、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt; &lt;code&gt;@schematics/angular&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bbe1583455dc63d835bd30602ea52df841e14560" translate="yes" xml:space="preserve">
          <source>You can see examples of this pattern in Angular Material: &lt;a href=&quot;https://github.com/angular/components/blob/50d3f29b6dc717b512dbd0234ce76f4ab7e9762a/src/material/button/button.ts#L67-L69&quot;&gt;&lt;code&gt;MatButton&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/components/blob/50d3f29b6dc717b512dbd0234ce76f4ab7e9762a/src/material/tabs/tab-nav-bar/tab-nav-bar.ts#L139&quot;&gt;&lt;code&gt;MatTabNav&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/components/blob/50d3f29b6dc717b512dbd0234ce76f4ab7e9762a/src/material/table/table.ts#L22&quot;&gt;&lt;code&gt;MatTable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このパターンの例は、Angular Material：&lt;a href=&quot;https://github.com/angular/components/blob/50d3f29b6dc717b512dbd0234ce76f4ab7e9762a/src/material/button/button.ts#L67-L69&quot;&gt; &lt;code&gt;MatButton&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/angular/components/blob/50d3f29b6dc717b512dbd0234ce76f4ab7e9762a/src/material/tabs/tab-nav-bar/tab-nav-bar.ts#L139&quot;&gt; &lt;code&gt;MatTabNav&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/angular/components/blob/50d3f29b6dc717b512dbd0234ce76f4ab7e9762a/src/material/table/table.ts#L22&quot;&gt; &lt;code&gt;MatTable&lt;/code&gt; で確認でき&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="502b585714ecf57ef0b9a3d545f8ad635566c0db" translate="yes" xml:space="preserve">
          <source>You can see examples of this pattern in Angular Material: &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/button/button.ts#L66-L68&quot;&gt;&lt;code&gt;MatButton&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/tabs/tab-nav-bar/tab-nav-bar.ts#L67&quot;&gt;&lt;code&gt;MatTabNav&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/table/table.ts#L17&quot;&gt;&lt;code&gt;MatTable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このパターンの例は、Angular Material：&lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/button/button.ts#L66-L68&quot;&gt; &lt;code&gt;MatButton&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/tabs/tab-nav-bar/tab-nav-bar.ts#L67&quot;&gt; &lt;code&gt;MatTabNav&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/table/table.ts#L17&quot;&gt; &lt;code&gt;MatTable&lt;/code&gt; で確認でき&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cb3cfb701825a231377d8a0c8d03511a9984db53" translate="yes" xml:space="preserve">
          <source>You can see that the &quot;else&quot; clause references the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; with the &lt;code&gt;#loading&lt;/code&gt; label, and the template for the &quot;then&quot; clause is provided as the content of the anchor element.</source>
          <target state="translated">「else」句が &lt;code&gt;#loading&lt;/code&gt; ラベルを使用して &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; を参照し、「then」句のテンプレートがアンカー要素のコンテンツとして提供されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="56406c24ea9d5fc270b44c820d5c46a91cf9a288" translate="yes" xml:space="preserve">
          <source>You can see your deployed page at &lt;code&gt;https://&amp;lt;user_name&amp;gt;.github.io/&amp;lt;project_name&amp;gt;/&lt;/code&gt;.</source>
          <target state="translated">デプロイされたページは &lt;code&gt;https://&amp;lt;user_name&amp;gt;.github.io/&amp;lt;project_name&amp;gt;/&lt;/code&gt; で確認できます。</target>
        </trans-unit>
        <trans-unit id="2ae5fb2fc7002f2ca7af5b18f8b3ff97a2e9e02e" translate="yes" xml:space="preserve">
          <source>You can select an alternate configuration by passing its name to the &lt;code&gt;--configuration&lt;/code&gt; command line flag.</source>
          <target state="translated">&lt;code&gt;--configuration&lt;/code&gt; コマンドラインフラグに名前を渡すことで、代替構成を選択できます。</target>
        </trans-unit>
        <trans-unit id="4298c04a10fbb73991da64f5ec031597c9b432b6" translate="yes" xml:space="preserve">
          <source>You can set a variable's type to &lt;code&gt;any&lt;/code&gt; even when the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;noImplicitAny&lt;/code&gt; フラグが &lt;code&gt;true&lt;/code&gt; の場合でも、変数のタイプを &lt;code&gt;any&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="8bb6bf06c660edc5278f516a795c25ce73fe67af" translate="yes" xml:space="preserve">
          <source>You can set inline styles with a &lt;strong&gt;style binding&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;スタイルバインディングを使用&lt;/strong&gt;してインラインスタイルを設定できます。</target>
        </trans-unit>
        <trans-unit id="a81b638e8ce55148ee01f0a3d1c9f151e1e2ff69" translate="yes" xml:space="preserve">
          <source>You can set more than one class using a space-separated string or an array. For example:</source>
          <target state="translated">スペースで区切られた文字列や配列を使って、複数のクラスを設定することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="73fbffd8c2305a57664c4637661d6594b370753a" translate="yes" xml:space="preserve">
          <source>You can set more than one class, as follows:</source>
          <target state="translated">以下のように、複数のクラスを設定することができます。</target>
        </trans-unit>
        <trans-unit id="9fdcdb04c738970582afb4da721d20f20288dd7a" translate="yes" xml:space="preserve">
          <source>You can set query params and fragment as follows:</source>
          <target state="translated">クエリのパラメータとフラグメントは以下のように設定できます。</target>
        </trans-unit>
        <trans-unit id="e94e63c58005293e451baf8fb1ffe2f92b05bf00" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; property as a shared configuration that all the configurations effectively inherit (or can override).</source>
          <target state="translated">あなたは、設定することができ &lt;code&gt;&quot;localize&quot;&lt;/code&gt; のすべての構成が効果的に継承することを共有構成としてプロパティを（または上書きすることができます）。</target>
        </trans-unit>
        <trans-unit id="4d3c527958b8644f52734e046ee392113aac88b4" translate="yes" xml:space="preserve">
          <source>You can set to &lt;code&gt;true&lt;/code&gt; when using factory summaries, because the factory summaries include a copy of the information that is in the &lt;code&gt;.metadata.json&lt;/code&gt; file.</source>
          <target state="translated">ファクトリサマリーには &lt;code&gt;.metadata.json&lt;/code&gt; ファイルにある情報のコピーが含まれるため、ファクトリサマリーを使用する &lt;code&gt;true&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="77b582bcb0b4b2042388933028c395543a1496b7" translate="yes" xml:space="preserve">
          <source>You can share parameters between sibling components. For example, suppose that two sibling components should go next to each other, and both of them require an ID parameter. You can accomplish this using a route that does not specify a component at the top level.</source>
          <target state="translated">兄弟コンポーネント間でパラメータを共有することができます。たとえば、2 つの兄弟コンポーネントが隣り合っていて、両方とも ID パラメータを必要とするとします。これは、トップレベルでコンポーネントを指定しないルートを使用して実現できます。</target>
        </trans-unit>
        <trans-unit id="245e2bae44d1ad9f4f464d6191b2f479fc2ec010" translate="yes" xml:space="preserve">
          <source>You can simulate a slower network to see the transition more clearly as follows:</source>
          <target state="translated">以下のように、より低速なネットワークをシミュレーションすることで、遷移をより明確に見ることができます。</target>
        </trans-unit>
        <trans-unit id="5f3e48771ab0b5e481a402f1de32597bec9dc7e5" translate="yes" xml:space="preserve">
          <source>You can sit with us!</source>
          <target state="translated">一緒に座っていいよ!</target>
        </trans-unit>
        <trans-unit id="f413ab10e8c9f0d874618a045079dc6d1add43f4" translate="yes" xml:space="preserve">
          <source>You can specify more than one styles file or even a combination of &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">複数のスタイルファイル、または &lt;code&gt;styles&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; の組み合わせを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="6b65057913139330014eae38d1a24c3033191c73" translate="yes" xml:space="preserve">
          <source>You can specify more than one styles file or even a combination of &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;styleUrls&lt;/code&gt;.</source>
          <target state="translated">複数のスタイルファイル、または &lt;code&gt;styles&lt;/code&gt; と &lt;code&gt;styleUrls&lt;/code&gt; の組み合わせを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="46aeaff68e3cffc7073b5a9fac4b0569d9a1870c" translate="yes" xml:space="preserve">
          <source>You can specify multiple classes, as shown in the second example.</source>
          <target state="translated">2つ目の例のように、複数のクラスを指定することができます。</target>
        </trans-unit>
        <trans-unit id="f23a7667486ce010b7c65ae259fdea04c59f946f" translate="yes" xml:space="preserve">
          <source>You can specify size budgets for the entire app, and for particular parts. Each budget entry configures a budget of a given type. Specify size values in the following formats:</source>
          <target state="translated">アプリ全体のサイズ予算、または特定のパーツのサイズ予算を指定できます。各予算エントリは、指定されたタイプの予算を設定します。サイズ値は、次の形式で指定します。</target>
        </trans-unit>
        <trans-unit id="e79f6e5db678454bbd9c78e2a80b279c19cd3f4d" translate="yes" xml:space="preserve">
          <source>You can specify the alias for the property name by passing the alias name to the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;/&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator. The internal name remains as usual.</source>
          <target state="translated">プロパティ名のエイリアスを指定するには、エイリアス名を &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; デコレータに渡します。内部名は通常どおり残ります。</target>
        </trans-unit>
        <trans-unit id="427d81b35ff85f26af415a525908e2e3608d841e" translate="yes" xml:space="preserve">
          <source>You can specify the base locale of your app with the&lt;code&gt;--i18n-locale&lt;/code&gt; command option:</source>
          <target state="translated">&lt;code&gt;--i18n-locale&lt;/code&gt; コマンドオプションを使用して、アプリのベースロケールを指定できます。</target>
        </trans-unit>
        <trans-unit id="4b958009f66b6d2a749dec89f849f3976c6d7e49" translate="yes" xml:space="preserve">
          <source>You can specify the path-match strategy 'full' to make sure that the path covers the whole unconsumed URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</source>
          <target state="translated">パスマッチストラテジーに 'full' を指定することで、パスが消費されていない URL 全体をカバーするようにすることができます。空のパスのルートをリダイレクトするときにこれを行うことが重要です。そうしないと、空のパスは任意の URL のプレフィックスなので、ルータはリダイレクト先に移動してもリダイレクトを適用してしまい、無限ループが発生してしまいます。</target>
        </trans-unit>
        <trans-unit id="9cc859d8b7efee88a04a13260cd3b9ab2e8329ef" translate="yes" xml:space="preserve">
          <source>You can specify the translation format explicitly with the &lt;code&gt;--i18nFormat&lt;/code&gt; command option, as illustrated in these example commands:</source>
          <target state="translated">次のコマンド例に示すように、 &lt;code&gt;--i18nFormat&lt;/code&gt; コマンドオプションを使用して、変換形式を明示的に指定できます。</target>
        </trans-unit>
        <trans-unit id="384f16e367259f81cfe10962ce559119d58d1981" translate="yes" xml:space="preserve">
          <source>You can speed up load time for users that only visit certain areas of the application.</source>
          <target state="translated">アプリケーションの特定の領域にしかアクセスしないユーザーのロード時間を高速化することができます。</target>
        </trans-unit>
        <trans-unit id="b6fbb559d826e90e9560e0b56fdf16a8a2f7e3a7" translate="yes" xml:space="preserve">
          <source>You can still load those files separately, but the order is important, you must import &lt;code&gt;proxy&lt;/code&gt; before &lt;code&gt;sync-test&lt;/code&gt;, &lt;code&gt;async-test&lt;/code&gt;, &lt;code&gt;fake-async-test&lt;/code&gt; and &lt;code&gt;jasmine-patch&lt;/code&gt;. And you also need to import &lt;code&gt;sync-test&lt;/code&gt; before &lt;code&gt;jasmine-patch&lt;/code&gt;, so it is recommended to just import &lt;code&gt;zone-testing&lt;/code&gt; instead of loading those separated files.</source>
          <target state="translated">あなたがインポートする必要があり、あなたはまだ個別にそれらのファイルを読み込むことができますが、順序は重要である &lt;code&gt;proxy&lt;/code&gt; 前に、 &lt;code&gt;sync-test&lt;/code&gt; 、 &lt;code&gt;async-test&lt;/code&gt; 、 &lt;code&gt;fake-async-test&lt;/code&gt; や &lt;code&gt;jasmine-patch&lt;/code&gt; 。また、 &lt;code&gt;jasmine-patch&lt;/code&gt; の前に &lt;code&gt;sync-test&lt;/code&gt; をインポートする必要があるため、これらの分離されたファイルをロードするのではなく、 &lt;code&gt;zone-testing&lt;/code&gt; インポートすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="39f843fd7cb45bf1679e955a3d19b7628c2c7e35" translate="yes" xml:space="preserve">
          <source>You can store your component's template in one of two places. You can define it &lt;em&gt;inline&lt;/em&gt; using the &lt;code&gt;template&lt;/code&gt; property, or you can define the template in a separate HTML file and link to it in the component metadata using the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator's &lt;code&gt;templateUrl&lt;/code&gt; property.</source>
          <target state="translated">コンポーネントのテンプレートは、2つの場所のいずれかに保存できます。 &lt;code&gt;template&lt;/code&gt; プロパティを使用して&lt;em&gt;インラインで&lt;/em&gt;定義することも、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;デコレータの &lt;code&gt;templateUrl&lt;/code&gt; プロパティを使用して別のHTMLファイルでテンプレートを定義し、コンポーネントメタデータにリンクすることもできます。</target>
        </trans-unit>
        <trans-unit id="55bde939af7c5e7998478af9d1d340125b4ad683" translate="yes" xml:space="preserve">
          <source>You can structure your &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; request to declare the type of the response object, to make consuming the output easier and more obvious. Specifying the response type acts as a type assertion at compile time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; リクエストを構造化して、応答オブジェクトのタイプを宣言し、出力の使用をより簡単かつ明確にすることができます。応答タイプを指定すると、コンパイル時にタイプアサーションとして機能します。</target>
        </trans-unit>
        <trans-unit id="c4a40114d213b47c1bd06b1cd7ea2c170cb47c4b" translate="yes" xml:space="preserve">
          <source>You can structure your &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; request to declare the type of the response object, to make consuming the output easier and more obvious. Specifying the response type acts as a type assertion during the compile time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; リクエストを構造化して、レスポンスオブジェクトのタイプを宣言し、出力をより簡単かつ明確に利用できるようにすることができます。応答タイプの指定は、コンパイル時にタイプアサーションとして機能します。</target>
        </trans-unit>
        <trans-unit id="49f719b0fb8d2848ee9889c71f9ea6dad214734e" translate="yes" xml:space="preserve">
          <source>You can supply an optional name to use in templates when the component is instantiated, that maps to the name of the bound property. By default, the original name of the bound property is used for input binding.</source>
          <target state="translated">コンポーネントがインスタンス化されたときにテンプレートで使用するオプションの名前を指定することができます。デフォルトでは、入力バインディングにはバインドされたプロパティの元の名前が使用されます。</target>
        </trans-unit>
        <trans-unit id="2144f858ef2c0bf7f1ed6c42337e752160d88469" translate="yes" xml:space="preserve">
          <source>You can supply an optional name to use in templates when the component is instantiated, that maps to the name of the bound property. By default, the original name of the bound property is used for output binding.</source>
          <target state="translated">コンポーネントがインスタンス化されたときにテンプレートで使用するオプションの名前を指定することができます。デフォルトでは、出力バインディングにはバインドされたプロパティの元の名前が使用されます。</target>
        </trans-unit>
        <trans-unit id="b7325974be7eba6bc5a5980629fe9753f8341d40" translate="yes" xml:space="preserve">
          <source>You can supply command options to change the format, the name, the location, and the source locale of the extracted file. For example, to create a file in the &lt;code&gt;src/&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; folder, specify the output path:</source>
          <target state="translated">コマンドオプションを指定して、抽出されたファイルの形式、名前、場所、およびソースロケールを変更できます。たとえば、 &lt;code&gt;src/&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; フォルダーにファイルを作成するには、出力パスを指定します。</target>
        </trans-unit>
        <trans-unit id="d2ad710db576d63dc67847e6d2a337321c53b95a" translate="yes" xml:space="preserve">
          <source>You can take advantage of Ahead-of-time (AOT) compilation on hybrid apps just like on any other Angular application. The setup for a hybrid app is mostly the same as described in &lt;a href=&quot;aot-compiler&quot;&gt;the Ahead-of-time Compilation chapter&lt;/a&gt; save for differences in &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main-aot.ts&lt;/code&gt;</source>
          <target state="translated">他のAngularアプリケーションと同じように、ハイブリッドアプリでAhead-of-Time（AOT）コンパイルを利用できます。ハイブリッドアプリの設定は、 &lt;code&gt;index.html&lt;/code&gt; と &lt;code&gt;main-aot.ts&lt;/code&gt; の違いを除いて、事前&lt;a href=&quot;aot-compiler&quot;&gt;コンパイルの章で&lt;/a&gt;説明したものとほとんど同じです。</target>
        </trans-unit>
        <trans-unit id="fec70fe3eb1b4b43b5aca7b7299a6b554656f9e0" translate="yes" xml:space="preserve">
          <source>You can take advantage of ahead-of-time (AOT) compilation in hybrid apps just like in any other Angular app. The setup for a hybrid app is mostly the same as described in the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; guide save for differences in &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main-aot.ts&lt;/code&gt;.</source>
          <target state="translated">ハイブリッドアプリでは、他のAngularアプリと同様に、事前（AOT）コンパイルを利用できます。ハイブリッドアプリの設定は、 &lt;code&gt;index.html&lt;/code&gt; と &lt;code&gt;main-aot.ts&lt;/code&gt; の違いを除いて、&lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt;ガイドで説明されているものとほとんど同じです。</target>
        </trans-unit>
        <trans-unit id="d32a43798be3e464ac7989911edae435dc241305" translate="yes" xml:space="preserve">
          <source>You can take steps to mitigate both bundle size and performance issues. By isolating your AngularJS app to a separate bundle, you can take advantage of &lt;a href=&quot;glossary#lazy-loading&quot;&gt;lazy loading&lt;/a&gt; to load, bootstrap, and render the AngularJS application only when needed. This strategy reduces your initial bundle size, defers any potential impact from loading both frameworks until absolutely necessary, and keeps your application running as efficiently as possible.</source>
          <target state="translated">バンドルサイズとパフォーマンスの両方の問題を軽減するための手順を実行できます。AngularJSアプリを別のバンドルに分離することで、&lt;a href=&quot;glossary#lazy-loading&quot;&gt;遅延読み込み&lt;/a&gt;を利用して、必要な場合にのみAngularJSアプリケーションを読み込み、ブートストラップ、レンダリングできます。この戦略は、初期のバンドルサイズを削減し、絶対に必要になるまで両方のフレームワークのロードによる潜在的な影響を遅らせ、アプリケーションを可能な限り効率的に実行し続けます。</target>
        </trans-unit>
        <trans-unit id="79c67bc97a52d07ac7ea5dd54a8ed1c5c30f8195" translate="yes" xml:space="preserve">
          <source>You can take this example a step further by including the &lt;code&gt;template&lt;/code&gt; constant in another expression:</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; 定数を別の式に含めることにより、この例をさらに一歩進めることができます。</target>
        </trans-unit>
        <trans-unit id="f01f576a2cce738662c91a4a6f9fea9b3c5ac4a7" translate="yes" xml:space="preserve">
          <source>You can tell Angular to inject a dependency in a component's constructor by specifying a &lt;strong&gt;constructor parameter with the dependency type&lt;/strong&gt;. Here's the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor, asking for the &lt;code&gt;HeroService&lt;/code&gt; to be injected.</source>
          <target state="translated">&lt;strong&gt;依存関係の種類でコンストラクターパラメーターを&lt;/strong&gt;指定することにより、コンポーネントのコンストラクターに依存関係を注入するようにAngularに指示できます。次に、 &lt;code&gt;HeroListComponent&lt;/code&gt; の &lt;code&gt;HeroService&lt;/code&gt; を要求するHeroListComponentコンストラクタを示します。</target>
        </trans-unit>
        <trans-unit id="27a82176879f6291216dd373887a9b553bd07348" translate="yes" xml:space="preserve">
          <source>You can tell Autoprefixer what browsers to target by adding a browserslist property to the package configuration file, &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">パッケージ構成ファイル &lt;code&gt;package.json&lt;/code&gt; に browserslistプロパティを追加することで、ターゲットにするブラウザーをAutoprefixerに指示できます。</target>
        </trans-unit>
        <trans-unit id="d5fd8f60f22c78115d506826cd69ec1abee3f90e" translate="yes" xml:space="preserve">
          <source>You can tell if &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; is needed by the position of the property name in a binding.</source>
          <target state="translated">バインディング内のプロパティ名の位置によって &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; が必要かどうかがわかります。</target>
        </trans-unit>
        <trans-unit id="53e55ee6014dcbbd753d1670dc4d9168ed68cb6f" translate="yes" xml:space="preserve">
          <source>You can tell the directive how to handle queryParams. Available options are:</source>
          <target state="translated">queryParams をどのように扱うかを指示することができます。利用可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0104c5756b590eacd6fcde5f88c031c66e65ae7e" translate="yes" xml:space="preserve">
          <source>You can tell the router to navigate an entire tree at once by filling out the &lt;code&gt;outlets&lt;/code&gt; object and then pass that object inside a &lt;em&gt;link parameters array&lt;/em&gt; to the &lt;code&gt;router.navigate&lt;/code&gt; method.</source>
          <target state="translated">あなたは記入して一度にツリー全体をナビゲートするようにルータを伝えることができる &lt;code&gt;outlets&lt;/code&gt; オブジェクトを、その後の内部でそのオブジェクトを渡す&lt;em&gt;リンクパラメータの配列&lt;/em&gt;に &lt;code&gt;router.navigate&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="9672334aa21e9f545accdce0bf6ce424e19ffe42" translate="yes" xml:space="preserve">
          <source>You can tell the router to navigate an entire tree at once by filling out the &lt;code&gt;outlets&lt;/code&gt; object mentioned above. Then pass that object inside a &lt;em&gt;link parameters array&lt;/em&gt; to the &lt;code&gt;router.navigate&lt;/code&gt; method.</source>
          <target state="translated">上記の &lt;code&gt;outlets&lt;/code&gt; オブジェクトに入力することで、ルータにツリー全体を一度にナビゲートするように指示できます。次いで、内部そのオブジェクトを渡す&lt;em&gt;リンク・パラメータ・アレイ&lt;/em&gt;に &lt;code&gt;router.navigate&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="a903a48d46934b126f5d08dd30f90392341f5c44" translate="yes" xml:space="preserve">
          <source>You can test &lt;a href=&quot;pipes&quot;&gt;pipes&lt;/a&gt; without the Angular testing utilities.</source>
          <target state="translated">Angularテストユーティリティなしで&lt;a href=&quot;pipes&quot;&gt;パイプ&lt;/a&gt;をテストできます。</target>
        </trans-unit>
        <trans-unit id="5cc0674587de17ef20b5f473235cc5119477d514" translate="yes" xml:space="preserve">
          <source>You can test a data service with an injected &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; spy as you would test any service with a dependency.</source>
          <target state="translated">依存関係のあるサービスをテストするのと同じように、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; スパイを挿入してデータサービスをテストできます。</target>
        </trans-unit>
        <trans-unit id="2a72b2bb417e8480994725b7f643ae6ce46031f7" translate="yes" xml:space="preserve">
          <source>You can test that the class code works without creating the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; or its parent component.</source>
          <target state="translated">&lt;code&gt;DashboardHeroComponent&lt;/code&gt; またはその親コン​​ポーネントを作成せずに、クラスコードが機能することをテストできます。</target>
        </trans-unit>
        <trans-unit id="e56dfd7dde44fe74b1085765d7c39f88db92f4cd" translate="yes" xml:space="preserve">
          <source>You can then &lt;a href=&quot;i18n#localize-generate&quot;&gt;generate app versions for each locale&lt;/a&gt; using the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option in &lt;code&gt;angular.json&lt;/code&gt;. You can also &lt;a href=&quot;i18n#localize-build-command&quot;&gt;build from the command line&lt;/a&gt; using the Angular CLI &lt;a href=&quot;https://angular.io/cli/build&quot;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt; command with the &lt;code&gt;--localize&lt;/code&gt; option.</source>
          <target state="translated">次に、 &lt;code&gt;angular.json&lt;/code&gt; の &lt;code&gt;&quot;localize&quot;&lt;/code&gt; オプションを使用して、&lt;a href=&quot;i18n#localize-generate&quot;&gt;ロケールごとにアプリのバージョンを生成できます&lt;/a&gt;。 &lt;code&gt;--localize&lt;/code&gt; オプションを指定したAngularCLI&lt;a href=&quot;https://angular.io/cli/build&quot;&gt; &lt;code&gt;build&lt;/code&gt; &lt;/a&gt;コマンドを使用して&lt;a href=&quot;i18n#localize-build-command&quot;&gt;、コマンドラインからビルド&lt;/a&gt;することもできます。</target>
        </trans-unit>
        <trans-unit id="ca247d14400aaf83610f376bc43ae93a7f5e14b7" translate="yes" xml:space="preserve">
          <source>You can then add the import statement in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; file. For many polyfills, you can simply un-comment the corresponding &lt;code&gt;import&lt;/code&gt; statement in the file, as in the following example.</source>
          <target state="translated">その後、 &lt;code&gt;src/polyfills.ts&lt;/code&gt; ファイルにインポート文を追加できます。多くのポリフィルでは、次の例のように、ファイル内の対応する &lt;code&gt;import&lt;/code&gt; ステートメントのコメントを外すことができます。</target>
        </trans-unit>
        <trans-unit id="e784c9d560813b07b3bb8505b2ebd624f155dfbe" translate="yes" xml:space="preserve">
          <source>You can then display the form by adding the component to the template.</source>
          <target state="translated">そして、テンプレートにコンポーネントを追加することでフォームを表示することができます。</target>
        </trans-unit>
        <trans-unit id="72654a349068f8aefb5b50f3642c47c21ceb91c2" translate="yes" xml:space="preserve">
          <source>You can then generate apps and libraries with names that are unique within the workspace.</source>
          <target state="translated">これにより、ワークスペース内で一意の名前を持つアプリやライブラリを生成することができます。</target>
        </trans-unit>
        <trans-unit id="37a8b23aa155eefeb00b8a262914140d8a2d31a3" translate="yes" xml:space="preserve">
          <source>You can then import this module into your application module to make the service available for injection in your app, as in the following example.</source>
          <target state="translated">次に、次の例のように、このモジュールをアプリケーション モジュールにインポートして、アプリ内でサービスをインジェクションで利用できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="31af0f01e470d413861a2fa7f327870b90d77c5c" translate="yes" xml:space="preserve">
          <source>You can then inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service as a dependency of an application class, as shown in the following &lt;code&gt;ConfigService&lt;/code&gt; example.</source>
          <target state="translated">次に、次の &lt;code&gt;ConfigService&lt;/code&gt; の例に示すように、アプリケーションクラスの依存関係として &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスを挿入できます。</target>
        </trans-unit>
        <trans-unit id="d577e5970b842ddb48aebaf58591cea0ba9aca66" translate="yes" xml:space="preserve">
          <source>You can then inspect the control's state by exporting &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; to a local template variable. The following example exports &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; into a variable called &lt;code&gt;name&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; をローカルテンプレート変数にエクスポートして、コントロールの状態を検査できます。次の例では、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;name&lt;/code&gt; という変数にエクスポートします。</target>
        </trans-unit>
        <trans-unit id="3f146d50c3c0ff5896938d11370428f8eb59b251" translate="yes" xml:space="preserve">
          <source>You can then pass this configuration to the &lt;code&gt;ng serve&lt;/code&gt; or &lt;code&gt;ng build&lt;/code&gt; commands. The example below shows how to serve the French language file created in previous sections of this guide:</source>
          <target state="translated">次に、この構成を &lt;code&gt;ng serve&lt;/code&gt; または &lt;code&gt;ng build&lt;/code&gt; コマンドに渡すことができます。次の例は、このガイドの前のセクションで作成したフランス語のファイルを提供する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c18203f614f36182815166035692aab2d5dec850" translate="yes" xml:space="preserve">
          <source>You can then pass this configuration to the &lt;code&gt;ng serve&lt;/code&gt; or &lt;code&gt;ng build&lt;/code&gt; commands. The following shows how to serve the French language file created in the example for this guide:</source>
          <target state="translated">次に、この構成を &lt;code&gt;ng serve&lt;/code&gt; または &lt;code&gt;ng build&lt;/code&gt; コマンドに渡すことができます。以下に、このガイドの例で作成されたフランス語ファイルを提供する方法を示します。</target>
        </trans-unit>
        <trans-unit id="daf232e8f81ff80505be61c6eedf919038ae8cbb" translate="yes" xml:space="preserve">
          <source>You can then provide the service to Angular by adding it to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 追加することにより、Angularにサービスを提供できます。</target>
        </trans-unit>
        <trans-unit id="aeded6a628c76085fc28f6c50a2cb94c61d30495" translate="yes" xml:space="preserve">
          <source>You can then run the &lt;code&gt;ng e2e&lt;/code&gt; command with this configuration. Make sure to replace &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; (in &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:serve:es5&quot;&lt;/code&gt;) with the actual name of the app, as it appears under &lt;code&gt;projects&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;. For example, if your app name is &lt;code&gt;myAngularApp&lt;/code&gt; the config will become &lt;code&gt;&quot;devServerTarget&quot;: &quot;myAngularApp:serve:es5&quot;&lt;/code&gt;.</source>
          <target state="translated">その後、この構成で &lt;code&gt;ng e2e&lt;/code&gt; コマンドを実行できます。置き換えてください &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; （で &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:serve:es5&quot;&lt;/code&gt; ）アプリの実際の名前で、それは下に表示される &lt;code&gt;projects&lt;/code&gt; で &lt;code&gt;angular.json&lt;/code&gt; 。アプリ名がある場合たとえば、 &lt;code&gt;myAngularApp&lt;/code&gt; 設定はなるだろう &lt;code&gt;&quot;devServerTarget&quot;: &quot;myAngularApp:serve:es5&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7af9dd7d35bf9ace92be7b1217e80ef2294962ab" translate="yes" xml:space="preserve">
          <source>You can then run the &lt;code&gt;ng serve&lt;/code&gt; command with this configuration. Make sure to replace &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; (in &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:build:es5&quot;&lt;/code&gt;) with the actual name of the app, as it appears under &lt;code&gt;projects&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;. For example, if your app name is &lt;code&gt;myAngularApp&lt;/code&gt; the config will become &lt;code&gt;&quot;browserTarget&quot;: &quot;myAngularApp:build:es5&quot;&lt;/code&gt;.</source>
          <target state="translated">その後、この構成で &lt;code&gt;ng serve&lt;/code&gt; コマンドを実行できます。置き換えてください &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; （で &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:build:es5&quot;&lt;/code&gt; 、それは下に表示されて、アプリの実際の名前で） &lt;code&gt;projects&lt;/code&gt; に &lt;code&gt;angular.json&lt;/code&gt; 。アプリ名がある場合たとえば、 &lt;code&gt;myAngularApp&lt;/code&gt; 設定はなるだろう &lt;code&gt;&quot;browserTarget&quot;: &quot;myAngularApp:build:es5&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01f7f614d36b24c086b2ef30780b2cc5bb869ee2" translate="yes" xml:space="preserve">
          <source>You can then run the tests with this configuration</source>
          <target state="translated">そして、この設定でテストを実行することができます。</target>
        </trans-unit>
        <trans-unit id="7f5047fa13946133e44fce35b9bff9f41d96419e" translate="yes" xml:space="preserve">
          <source>You can think of &lt;code&gt;.metadata.json&lt;/code&gt; as a diagram of the overall structure of a decorator's metadata, represented as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree (AST)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.metadata.json&lt;/code&gt; は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;抽象構文ツリー（AST）&lt;/a&gt;として表されるデコレータのメタデータの全体的な構造の図と考えることができます。</target>
        </trans-unit>
        <trans-unit id="88487d11506c2395060fa75a6fe5385653b08fe7" translate="yes" xml:space="preserve">
          <source>You can think of these observables as &lt;em&gt;blueprints&lt;/em&gt; for actual HTTP requests.</source>
          <target state="translated">これらのオブザーバブルは、実際のHTTPリクエストの&lt;em&gt;青写真&lt;/em&gt;と考えることができます。</target>
        </trans-unit>
        <trans-unit id="cf7bd46650d373ecec64fc25eaaaf9b7f791a93a" translate="yes" xml:space="preserve">
          <source>You can toggle a CSS style class with a &lt;code&gt;class&lt;/code&gt; binding.</source>
          <target state="translated">CSSスタイルクラスを &lt;code&gt;class&lt;/code&gt; バインディングで切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="35bc172ea92f7f4e7db119e6ef43ca372c1e898e" translate="yes" xml:space="preserve">
          <source>You can turn off TOC generation for the &lt;em&gt;entire&lt;/em&gt; page by writing the title with an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag and the &lt;code&gt;no-toc&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; タグと &lt;code&gt;no-toc&lt;/code&gt; クラスを使用してタイトルを書き込むことにより&lt;em&gt;、&lt;/em&gt;ページ&lt;em&gt;全体の&lt;/em&gt; TOC生成をオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="9e1bf5a38d520e7972c39506a6e595d0fe52b30d" translate="yes" xml:space="preserve">
          <source>You can upgrade the service using a Angular &lt;a href=&quot;dependency-injection-providers#factory-providers&quot;&gt;factory provider&lt;/a&gt; that requests the service from the AngularJS &lt;code&gt;$injector&lt;/code&gt;.</source>
          <target state="translated">AngularJS &lt;code&gt;$injector&lt;/code&gt; からサービスをリクエストするAngular&lt;a href=&quot;dependency-injection-providers#factory-providers&quot;&gt;ファクトリープロバイダー&lt;/a&gt;を使用してサービスをアップグレードできます。</target>
        </trans-unit>
        <trans-unit id="47469fd15c4575c830cb6106c9451ca1cfb66e6c" translate="yes" xml:space="preserve">
          <source>You can upgrade the service using a Angular &lt;a href=&quot;dependency-injection-providers#factory-providers&quot;&gt;factory provider&lt;/a&gt; that requests the service from the AngularJS &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJS &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; サービスをリクエストするAngular &lt;a href=&quot;dependency-injection-providers#factory-providers&quot;&gt;ファクトリプロバイダー&lt;/a&gt;を使用してサービスをアップグレードできます。</target>
        </trans-unit>
        <trans-unit id="ce7735c22d78c73b2a59358e5c5cf56bdcf5948d" translate="yes" xml:space="preserve">
          <source>You can upgrade this component to Angular, annotate inputs and outputs in the upgrade directive, and then provide the input and output using Angular template syntax:</source>
          <target state="translated">このコンポーネントをAngularにアップグレードし、アップグレードディレクティブで入出力に注釈を付け、Angularテンプレートの構文を使って入出力を提供することができます。</target>
        </trans-unit>
        <trans-unit id="f9deab6750177fe9650fd42d133d3523d7bd1e38" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;template-syntax#event-binding&quot;&gt;Angular event bindings&lt;/a&gt; to respond to any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event&lt;/a&gt;. Many DOM events are triggered by user input. Binding to these events provides a way to get input from the user.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#event-binding&quot;&gt;Angularイベントバインディング&lt;/a&gt;を使用して、任意の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOMイベント&lt;/a&gt;に応答できます。多くのDOMイベントは、ユーザー入力によってトリガーされます。これらのイベントにバインドすると、ユーザーから入力を取得する方法が提供されます。</target>
        </trans-unit>
        <trans-unit id="369aad0499e2fb6850e336c7932778cbb2c4049b" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; by providing the &lt;code&gt;useHash: true&lt;/code&gt; in an object as the second argument of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">あなたは使用することができます &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; を提供することで、 &lt;code&gt;useHash: true&lt;/code&gt; 対象に2番目の引数として &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3662b5c980237296a77d68af47c95b16c042e596" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the same child component as follows:</source>
          <target state="translated">次のように、同じ子コンポーネントで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="14c513d08faad8ec362ee20a1eb2bb6d365025e4" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the same child component as in the following:</source>
          <target state="translated">次のように、同じ子コンポーネントで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="d13b9311fceec51b28d9e02d7107bbb45ed8e015" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;ReadonlyArray&lt;/code&gt; to type your &lt;code&gt;multi&lt;/code&gt; provider, so TypeScript triggers an error in case of unwanted array mutations:</source>
          <target state="translated">&lt;code&gt;ReadonlyArray&lt;/code&gt; を使用して &lt;code&gt;multi&lt;/code&gt; プロバイダーを入力できるため、不要な配列の変更が発生した場合、TypeScriptはエラーをトリガーします。</target>
        </trans-unit>
        <trans-unit id="2d172cfd8b71b284d02191db0bf0807175ab6e3c" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;i18n-&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; with any attribute of any element. You also can assign a meaning, description, and custom ID with the &lt;code&gt;i18n-&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt;&lt;code&gt;=&quot;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;&quot;&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;code&gt;i18n-&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;は、任意の要素の任意の属性で使用できます。 &lt;code&gt;i18n-&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt; &lt;code&gt;=&quot;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;&quot;&lt;/code&gt; 構文を使用して、意味、説明、およびカスタムIDを割り当てることもできます。</target>
        </trans-unit>
        <trans-unit id="f29475139f2522d7f2ddf89fdb56b12a00c51715" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;typeof&lt;/code&gt; and bracket notation in normal application code. You just can't use those features within expressions that define Angular metadata.</source>
          <target state="translated">あなたは使用することができ &lt;code&gt;typeof&lt;/code&gt; を通常のアプリケーションコードにブラケット表記を。Angularメタデータを定義する式内でこれらの機能を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="d88a36cf0dda32f2c9d19f31b7688c24f67a6df5" translate="yes" xml:space="preserve">
          <source>You can use &lt;em&gt;pipes&lt;/em&gt; to link operators together. Pipes let you combine multiple functions into a single function. The &lt;code&gt;pipe()&lt;/code&gt; function takes as its arguments the functions you want to combine, and returns a new function that, when executed, runs the composed functions in sequence.</source>
          <target state="translated">&lt;em&gt;パイプ&lt;/em&gt;を使用し&lt;em&gt;て&lt;/em&gt;、演算子をリンクできます。パイプを使用すると、複数の関数を1つの関数に結合できます。 &lt;code&gt;pipe()&lt;/code&gt; 関数は、引数として、あなたが結合したい機能を取り、そして、実行されると、シーケンス内の構成機能を実行し、新しい機能を返します。</target>
        </trans-unit>
        <trans-unit id="ed15516e6420536a7039f012941c971836d6677c" translate="yes" xml:space="preserve">
          <source>You can use a custom id in combination with a description by including both in the value of the &lt;code&gt;i18n&lt;/code&gt; attribute. In the example below, the &lt;code&gt;i18n&lt;/code&gt; attribute value includes a description, followed by the custom &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;i18n&lt;/code&gt; 属性の値に両方を含めることで、説明と組み合わせてカスタムIDを使用できます。以下の例では、 &lt;code&gt;i18n&lt;/code&gt; 属性値に説明が含まれ、その後にカスタム &lt;code&gt;id&lt;/code&gt; 続きます。</target>
        </trans-unit>
        <trans-unit id="e9751455094a01cdde5f9362ae4fc2db5b9a4576" translate="yes" xml:space="preserve">
          <source>You can use a route to pass this type of information to your application components. To do so, you use the &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt; interface.</source>
          <target state="translated">ルートを使用して、このタイプの情報をアプリケーションコンポーネントに渡すことができます。これを行うには、&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;インターフェースを使用します。</target>
        </trans-unit>
        <trans-unit id="65079d1b225c9e4b4217792f00f7154ce17a69d3" translate="yes" xml:space="preserve">
          <source>You can use absolute or relative paths in a link, set query parameters, control how parameters are handled, and keep a history of navigation states.</source>
          <target state="translated">リンク内で絶対パスや相対パスを使用したり、クエリパラメータを設定したり、パラメータの処理方法を制御したり、ナビゲーション状態の履歴を保持したりすることができます。</target>
        </trans-unit>
        <trans-unit id="8583ed1bee4e5b238526688f8608728778d0d405" translate="yes" xml:space="preserve">
          <source>You can use an injection token for any kind of provider but it's particularly helpful when the dependency is a simple value like a string, a number, or a function.</source>
          <target state="translated">インジェクショントークンはどんな種類のプロバイダにも使えますが、依存関係が文字列や数値、関数のような単純な値の場合には特に便利です。</target>
        </trans-unit>
        <trans-unit id="5c9c9b60a9100a9a751d298e76425610ca5d92a0" translate="yes" xml:space="preserve">
          <source>You can use class binding to add and remove CSS class names from an element's &lt;code&gt;class&lt;/code&gt; attribute.</source>
          <target state="translated">クラスバインディングを使用して、要素の &lt;code&gt;class&lt;/code&gt; 属性にCSSクラス名を追加および削除できます。</target>
        </trans-unit>
        <trans-unit id="8ce43e1b812a60d33d6bf6918eacc202b7139202" translate="yes" xml:space="preserve">
          <source>You can use command-line arguments to override the configured defaults. For example, to run with a different &lt;code&gt;command&lt;/code&gt; value, use the following CLI command.</source>
          <target state="translated">コマンドライン引数を使用して、構成されたデフォルトを上書きできます。たとえば、別の &lt;code&gt;command&lt;/code&gt; 値で実行するには、次のCLIコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="458f77350d2618dad0b0ea58de6816a786e52be4" translate="yes" xml:space="preserve">
          <source>You can use dynamic values to generate the link. For a dynamic link, pass an array of path segments, followed by the params for each segment. For example, &lt;code&gt;['/team', teamId, 'user', userName, {details: true}]&lt;/code&gt; generates a link to &lt;code&gt;/team/11/user/bob;details=true&lt;/code&gt;.</source>
          <target state="translated">動的な値を使用してリンクを生成できます。動的リンクの場合は、パスセグメントの配列を渡し、その後に各セグメントのパラメータを渡します。たとえば、 &lt;code&gt;['/team', teamId, 'user', userName, {details: true}]&lt;/code&gt; は、 &lt;code&gt;/team/11/user/bob;details=true&lt;/code&gt; へのリンクを生成します。</target>
        </trans-unit>
        <trans-unit id="81042848fb40301c6183fd12dd0f8a52fecc6b28" translate="yes" xml:space="preserve">
          <source>You can use either form when rendering data values as strings, though interpolation is preferable for readability. However, when setting an element property to a non-string data value, you must use property binding.</source>
          <target state="translated">データ値を文字列としてレンダリングする場合は、どちらの形式を使用しても構いませんが、可読性のためには補間が望ましいです。ただし、要素のプロパティを文字列ではないデータ値に設定する場合は、プロパティバインディングを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6077b937171057ef8efd4e409adf3d43ff8768d7" translate="yes" xml:space="preserve">
          <source>You can use interpolations and html markup inside of your translations.</source>
          <target state="translated">翻訳の中で補間やhtmlマークアップを使うことができます。</target>
        </trans-unit>
        <trans-unit id="8e90c4007d22c75ce2cbf39df6b82595a81ab91c" translate="yes" xml:space="preserve">
          <source>You can use services to share data across components:</source>
          <target state="translated">サービスを使用して、コンポーネント間でデータを共有することができます。</target>
        </trans-unit>
        <trans-unit id="3b89d25266dc14623ea89349edac149bbffb1218" translate="yes" xml:space="preserve">
          <source>You can use style binding to set styles dynamically.</source>
          <target state="translated">スタイルバインディングを使用して動的にスタイルを設定することができます。</target>
        </trans-unit>
        <trans-unit id="5b1c5c3102408534775df5c77b48b9f156b997fe" translate="yes" xml:space="preserve">
          <source>You can use template statements with elements, components, or directives in response to events.</source>
          <target state="translated">イベントに反応して、要素、コンポーネント、またはディレクティブを使用してテンプレート文を使用することができます。</target>
        </trans-unit>
        <trans-unit id="f9aac4c3af5be265f4c902f3509d5b713f408628" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;proxying support&lt;/a&gt; in the &lt;code&gt;webpack&lt;/code&gt; dev server to divert certain URLs to a backend server, by passing a file to the &lt;code&gt;--proxy-config&lt;/code&gt; build option. For example, to divert all calls for &lt;code&gt;http://localhost:4200/api&lt;/code&gt; to a server running on &lt;code&gt;http://localhost:3000/api&lt;/code&gt;, take the following steps.</source>
          <target state="translated">&lt;code&gt;--proxy-config&lt;/code&gt; ビルドオプションにファイルを渡すことにより、 &lt;code&gt;webpack&lt;/code&gt; 開発サーバーの&lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;プロキシサポート&lt;/a&gt;を使用して、特定のURLをバックエンドサーバーに転送できます。たとえば、 &lt;code&gt;http://localhost:4200/api&lt;/code&gt; のすべての呼び出しを &lt;code&gt;http://localhost:3000/api&lt;/code&gt; で実行されているサーバーに転送するには、次の手順を実行します。</target>
        </trans-unit>
        <trans-unit id="2f5bb3f9399174bc3c1503b4fbc62da6d905e6aa" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserverproxy&quot;&gt;proxying support&lt;/a&gt; in the &lt;code&gt;webpack&lt;/code&gt; dev server to divert certain URLs to a backend server, by passing a file to the &lt;code&gt;--proxy-config&lt;/code&gt; build option. For example, to divert all calls for &lt;code&gt;http://localhost:4200/api&lt;/code&gt; to a server running on &lt;code&gt;http://localhost:3000/api&lt;/code&gt;, take the following steps.</source>
          <target state="translated">ファイルを &lt;code&gt;--proxy-config&lt;/code&gt; ビルドオプションに渡すことで、 &lt;code&gt;webpack&lt;/code&gt; 開発サーバーの&lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserverproxy&quot;&gt;プロキシサポート&lt;/a&gt;を使用して、特定のURLをバックエンドサーバーに転送できます。たとえば、 &lt;code&gt;http://localhost:4200/api&lt;/code&gt; のすべての呼び出しを &lt;code&gt;http://localhost:3000/api&lt;/code&gt; で実行されているサーバーに転送するには、次の手順を実行します。</target>
        </trans-unit>
        <trans-unit id="13429b02517ccefddb31dc6575449a8510e272bc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;ng-xi18n&lt;/code&gt; tool directly from the &lt;code&gt;@angular/compiler-cli&lt;/code&gt; package. For more information, see the &lt;a href=&quot;cli/xi18n&quot;&gt;&lt;code&gt;ng xi18n&lt;/code&gt; command documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ng-xi18n&lt;/code&gt; ツールは、 &lt;code&gt;@angular/compiler-cli&lt;/code&gt; パッケージから直接使用できます。詳細については、&lt;a href=&quot;cli/xi18n&quot;&gt; &lt;code&gt;ng xi18n&lt;/code&gt; コマンドのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b4df3b79d2c0538b7e16d364633d401d8c540bc6" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;options&lt;/code&gt; object to configure various other aspects of an outgoing request. In &lt;a href=&quot;http#adding-headers&quot;&gt;Adding headers&lt;/a&gt;, for example, the service set the default headers using the &lt;code&gt;headers&lt;/code&gt; option property.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; オブジェクトを使用して、送信要求の他のさまざまな側面を構成できます。で&lt;a href=&quot;http#adding-headers&quot;&gt;ヘッダを追加する&lt;/a&gt;、例えば、サービスが使用してデフォルトのヘッダーを設定 &lt;code&gt;headers&lt;/code&gt; オプションのプロパティを。</target>
        </trans-unit>
        <trans-unit id="4ee980ab46844b0613d78892df262c932a9a8351" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;ref-&lt;/code&gt; prefix alternative to &lt;code&gt;#&lt;/code&gt;. This example declares the &lt;code&gt;fax&lt;/code&gt; variable as &lt;code&gt;ref-fax&lt;/code&gt; instead of &lt;code&gt;#fax&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; の代わりに &lt;code&gt;ref-&lt;/code&gt; プレフィックスを使用できます。この例では、 &lt;code&gt;fax&lt;/code&gt; 変数を &lt;code&gt;#fax&lt;/code&gt; ではなく &lt;code&gt;ref-fax&lt;/code&gt; として宣言しています。</target>
        </trans-unit>
        <trans-unit id="f948dbeb30fd6d76129a289edcdde9269d2b163f" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;void&lt;/code&gt; state to configure transitions for an element that is entering or leaving a page. See &lt;a href=&quot;transition-and-triggers#enter-leave-view&quot;&gt;Animating entering and leaving a view&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 状態を使用して、ページに出入りする要素の遷移を構成できます。&lt;a href=&quot;transition-and-triggers#enter-leave-view&quot;&gt;ビューの開始と終了のアニメーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="778aaf9be1f598659f7252d64f8d9efb2bf13f53" translate="yes" xml:space="preserve">
          <source>You can use the API to transform an Angular component so that it can be registered with the browser and used in any HTML that you add directly to the DOM within an Angular app. The custom element tag inserts the component's view, with change-detection and data-binding functionality, into content that would otherwise be displayed without Angular processing.</source>
          <target state="translated">APIを使ってAngularコンポーネントを変形させ、ブラウザに登録して、Angularアプリ内でDOMに直接追加した任意のHTMLで使用できるようにすることができます。カスタム要素タグは、変更検出とデータバインディング機能を備えたコンポーネントのビューを、Angularの処理を行わなければ表示されないコンテンツに挿入します。</target>
        </trans-unit>
        <trans-unit id="b3df2298044eac3cff7ace6d7dc3f88f0445489a" translate="yes" xml:space="preserve">
          <source>You can use the Angular CLI to &lt;a href=&quot;cli/generate#appshell&quot;&gt;generate&lt;/a&gt; an app shell. This can improve the user experience by quickly launching a static rendered page (a skeleton common to all pages) while the browser downloads the full client version and switches to it automatically after the code loads.</source>
          <target state="translated">Angular CLIを&lt;a href=&quot;cli/generate#appshell&quot;&gt;使用し&lt;/a&gt;てアプリシェルを生成できます。これにより、ブラウザーが完全なクライアントバージョンをダウンロードし、コードの読み込み後に自動的に切り替える間、静的にレンダリングされたページ（すべてのページに共通のスケルトン）をすばやく起動して、ユーザーエクスペリエンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="29e0856573525113f6dfeb3707c4005402268a58" translate="yes" xml:space="preserve">
          <source>You can use the CLI Webpack plugin &lt;code&gt;AngularCompilerPlugin&lt;/code&gt; from the &lt;code&gt;@ngtools/webpack&lt;/code&gt; package. Set the parameters &lt;code&gt;i18nOutFile&lt;/code&gt; and &lt;code&gt;i18nOutFormat&lt;/code&gt; to trigger the extraction. For more information, see the &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpack Plugin documentation&lt;/a&gt;.</source>
          <target state="translated">あなたはプラグインCLI WebPACKのを使用することができます &lt;code&gt;AngularCompilerPlugin&lt;/code&gt; から &lt;code&gt;@ngtools/webpack&lt;/code&gt; パッケージ。パラメータ &lt;code&gt;i18nOutFile&lt;/code&gt; および &lt;code&gt;i18nOutFormat&lt;/code&gt; を設定して、抽出をトリガーします。詳細については、&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpackプラグインのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a54d81fb5136e170503769fae010add376d45bb9" translate="yes" xml:space="preserve">
          <source>You can use the CLI development server (&lt;code&gt;ng serve&lt;/code&gt;), but only with a single locale.</source>
          <target state="translated">CLI開発サーバー（ &lt;code&gt;ng serve&lt;/code&gt; ）を使用できますが、ロケールは1つだけです。</target>
        </trans-unit>
        <trans-unit id="0ec47fabebbe0c57fcade5b7ed8cf8de561f99fe" translate="yes" xml:space="preserve">
          <source>You can use the CSS class names and selectors that make the most sense in the context of each component.</source>
          <target state="translated">各コンポーネントのコンテキストで最も意味のあるCSSクラス名とセレクタを使用することができます。</target>
        </trans-unit>
        <trans-unit id="cab2cb6cc9ac36bfe7b8bcbf2352758bf31c4180" translate="yes" xml:space="preserve">
          <source>You can use the monorepo model to use the same workspace for multiple projects. See &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;Setting up for a multi-project workspace&lt;/a&gt;.</source>
          <target state="translated">monorepoモデルを使用して、複数のプロジェクトで同じワークスペースを使用できます。&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;マルチプロジェクトワークスペースの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="00e5278758f199e2d0215e90a0e1f1da3594ccc0" translate="yes" xml:space="preserve">
          <source>You can use these events to notify the user of a pending update or to refresh their pages when the code they are running is out of date.</source>
          <target state="translated">これらのイベントを使用して、保留中の更新をユーザーに通知したり、実行中のコードが古くなったときにページを更新したりすることができます。</target>
        </trans-unit>
        <trans-unit id="d04ff9f7877eb69f07d15a68c07945f4fa4a7e09" translate="yes" xml:space="preserve">
          <source>You can use these persistent bits of information for things that need to be provided across pages like authentication tokens or session ids.</source>
          <target state="translated">これらの永続的な情報は、認証トークンやセッションIDのように、ページをまたいで提供する必要があるものに使用することができます。</target>
        </trans-unit>
        <trans-unit id="ef3fea4a43d7d7385ecdc4eec6bd88759f646cbc" translate="yes" xml:space="preserve">
          <source>You can use this extended configuration to copy assets from outside your project. For example, the following configuration copies assets from a node package:</source>
          <target state="translated">この拡張設定を使用して、プロジェクトの外部からアセットをコピーすることができます。例えば、以下の設定では、ノードパッケージからアセットをコピーしています。</target>
        </trans-unit>
        <trans-unit id="879e157c42523ab5e1a79a66ed0d994936399588" translate="yes" xml:space="preserve">
          <source>You can use this technique to narrow an API through an aliasing interface. The following example shows an alias introduced for that purpose.</source>
          <target state="translated">このテクニックを使用して、エイリアスインターフェースを介してAPIを絞り込むことができます。次の例は、そのために導入されたエイリアスを示しています。</target>
        </trans-unit>
        <trans-unit id="02f673b45f597676412e33095473c76bc4fad521" translate="yes" xml:space="preserve">
          <source>You can use this token to define a provider that generates the registration options at runtime, for example via a function call:</source>
          <target state="translated">このトークンを使用して、例えば関数呼び出しなどで、実行時に登録オプションを生成するプロバイダを定義することができます。</target>
        </trans-unit>
        <trans-unit id="01063779ffcd4ab8ae6e45ba9a224837e0a3b2cb" translate="yes" xml:space="preserve">
          <source>You can use this type of provider to substitute an &lt;em&gt;alternative implementation&lt;/em&gt; for a common or default class. The alternative implementation could, for example, implement a different strategy, extend the default class, or emulate the behavior of the real class in a test case.</source>
          <target state="translated">このタイプのプロバイダーを使用して、共通またはデフォルトのクラスの&lt;em&gt;代替実装&lt;/em&gt;を置き換えることができます。代替実装では、たとえば、別の戦略を実装したり、デフォルトクラスを拡張したり、テストケースで実際のクラスの動作をエミュレートしたりできます。</target>
        </trans-unit>
        <trans-unit id="5ff4372ad33685034ae216d86bc4f67f35952d7c" translate="yes" xml:space="preserve">
          <source>You can write a style property name in either &lt;a href=&quot;glossary#dash-case&quot;&gt;dash-case&lt;/a&gt;, or &lt;a href=&quot;glossary#camelcase&quot;&gt;camelCase&lt;/a&gt;.</source>
          <target state="translated">スタイルプロパティ名は、&lt;a href=&quot;glossary#dash-case&quot;&gt;ダッシュケース&lt;/a&gt;または&lt;a href=&quot;glossary#camelcase&quot;&gt;キャメル&lt;/a&gt;ケースのいずれかで記述できます。</target>
        </trans-unit>
        <trans-unit id="207dd4aac8768ca04bba6cbd1c89911987218182" translate="yes" xml:space="preserve">
          <source>You can write many useful tests with this spy, even though its &lt;code&gt;Observable&lt;/code&gt; is synchronous.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; は同期的ですが、このスパイを使用して多くの有用なテストを作成できます。</target>
        </trans-unit>
        <trans-unit id="26f3b3bf7f16b6c0abe040ac1fb2878080c80ecc" translate="yes" xml:space="preserve">
          <source>You can write your own custom pipes. Here's a custom pipe named &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; that can boost a hero's powers:</source>
          <target state="translated">独自のカスタムパイプを作成できます。これは、ヒーローの力を高めることができる &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; という名前のカスタムパイプです。</target>
        </trans-unit>
        <trans-unit id="29353386f7d3444b799c5845be88ccda3e6cad0a" translate="yes" xml:space="preserve">
          <source>You can't add or delete a hero.</source>
          <target state="translated">ヒーローの追加や削除はできません。</target>
        </trans-unit>
        <trans-unit id="1525f5345c430bce787b3f17866fb37b2e5bd030" translate="yes" xml:space="preserve">
          <source>You can't apply &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; to a non-form native element or a third-party custom component until you write a suitable value accessor. For more information, see the API documentation on &lt;a href=&quot;../api/forms/defaultvalueaccessor&quot;&gt;DefaultValueAccessor&lt;/a&gt;.</source>
          <target state="translated">適切な値アクセサーを作成するまで、 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; を非フォームネイティブ要素またはサードパーティのカスタムコンポーネントに適用することはできません。詳細については、&lt;a href=&quot;../api/forms/defaultvalueaccessor&quot;&gt;DefaultValueAccessor&lt;/a&gt;のAPIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8925c521b2d46ab20f52ceea4c3bca1cbde1c73d" translate="yes" xml:space="preserve">
          <source>You can't block while waiting for the server&amp;mdash;that's not possible in a browser. You need to stop the navigation while you wait, asynchronously, for the server to return with its answer.</source>
          <target state="translated">サーバーを待機している間はブロックできません。これはブラウザーでは不可能です。サーバーが応答で戻るのを非同期的に待つ間、ナビゲーションを停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3134d58d42c25279e4310763add4251424be7a3" translate="yes" xml:space="preserve">
          <source>You can't call &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functions, because the &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt; parameter&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">あなたは呼び出すことはできません &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; ので、機能を &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt; parameter&lt;/code&gt; されて &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de88bc6f12c86c5814a87a48ef2285b04f19c0b0" translate="yes" xml:space="preserve">
          <source>You can't call &lt;code&gt;done()&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functions, because the &lt;code&gt;done parameter&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">あなたは呼び出すことはできません &lt;code&gt;done()&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; ので、機能 &lt;code&gt;done parameter&lt;/code&gt; されて &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f19d782103111bd0cf17ac0f6a3a63e20d5ff3d0" translate="yes" xml:space="preserve">
          <source>You can't directly modify the existing headers within the previous options object because instances of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; class are immutable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; クラスのインスタンスは不変であるため、前のオプションオブジェクト内の既存のヘッダーを直接変更することはできません。</target>
        </trans-unit>
        <trans-unit id="450624f56ae656acf8d1c33cf7a1de6a3dbcdfff" translate="yes" xml:space="preserve">
          <source>You can't directly modify the existing headers within the previous options object because instances of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; class are immutable. Use the &lt;code&gt;set()&lt;/code&gt; method instead, to return a clone of the current instance with the new changes applied.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; クラスのインスタンスは不変であるため、前のオプションオブジェクト内の既存のヘッダーを直接変更することはできません。代わりに &lt;code&gt;set()&lt;/code&gt; メソッドを使用して、新しい変更が適用された現在のインスタンスのクローンを返します。</target>
        </trans-unit>
        <trans-unit id="a4320caf3da3b50d78819738aa5ba2c89d557d51" translate="yes" xml:space="preserve">
          <source>You can't test this partial file and you'll never use it in the application. But at least your IDE can confirm that it is syntactically correct.</source>
          <target state="translated">この部分ファイルをテストすることはできませんし、アプリケーションで使用することもありません。しかし、少なくともIDEは構文的に正しいことを確認することができます。</target>
        </trans-unit>
        <trans-unit id="847777e22c49928d973cdf1d0c9ef3af46fa5ce5" translate="yes" xml:space="preserve">
          <source>You can't use JavaScript expressions that have or promote side effects, including:</source>
          <target state="translated">などの副作用があったり、促進されたりするJavaScript表現は使えません。</target>
        </trans-unit>
        <trans-unit id="23a2a254f2a0b7dc4fd28d5035a5292fa6c9efca" translate="yes" xml:space="preserve">
          <source>You can't use property binding to read or pull values out of target elements. Similarly, you cannot use property binding to call a method on the target element. If the element raises events, you can listen to them with an &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt;.</source>
          <target state="translated">プロパティバインディングを使用して、ターゲット要素から値を読み取りまたはプルすることはできません。同様に、プロパティバインディングを使用してターゲット要素のメソッドを呼び出すことはできません。要素がイベントを発生させる場合、&lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベントバインディングを使用&lt;/a&gt;してイベントをリッスンできます。</target>
        </trans-unit>
        <trans-unit id="cbc8b4a39bee78e919dfa91c8ba1dccc7804ee0e" translate="yes" xml:space="preserve">
          <source>You can't use the &lt;em&gt;local variable&lt;/em&gt; technique if an instance of the parent component &lt;em&gt;class&lt;/em&gt; must read or write child component values or must call child component methods.</source>
          <target state="translated">親コンポーネント&lt;em&gt;クラスの&lt;/em&gt;インスタンスが子コンポーネント値の読み取りまたは書き込みを行う必要がある場合、または子コンポーネントメソッドを呼び出す必要がある場合は、&lt;em&gt;ローカル変数&lt;/em&gt;手法を使用できません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fb66eac1fd4c0a6c9b425e08a72dc3bb0e284ce" translate="yes" xml:space="preserve">
          <source>You can, for example, create a factory function that loads language data or an external configuration, and provide that function to the &lt;code&gt;&lt;a href=&quot;app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; token. The function is executed during the application bootstrap process, and the needed data is available on startup.</source>
          <target state="translated">たとえば、言語データまたは外部構成をロードするファクトリ関数を作成し、その関数を &lt;code&gt;&lt;a href=&quot;app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; トークンに提供できます。この関数はアプリケーションのブートストラッププロセス中に実行され、必要なデータは起動時に利用できます。</target>
        </trans-unit>
        <trans-unit id="abbaf658542d9058a53b26b95bd380763ec91ec1" translate="yes" xml:space="preserve">
          <source>You can, however, configure an injector with an alternative provider, in order to deliver some other object that provides the needed logging functionality. For instance:</source>
          <target state="translated">しかし、必要なロギング機能を提供する他のオブジェクトを提供するために、別のプロバイダでインジェクタを設定することもできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c442c974d351231bffade79aff31ddd3cc6970d2" translate="yes" xml:space="preserve">
          <source>You cannot call any more &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration methods, not &lt;code&gt;configureTestingModule()&lt;/code&gt;, nor &lt;code&gt;get()&lt;/code&gt;, nor any of the &lt;code&gt;override...&lt;/code&gt; methods. If you try, &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; throws an error.</source>
          <target state="translated">これ以上 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成メソッドを呼び出すことはできません。configureTestingModule &lt;code&gt;configureTestingModule()&lt;/code&gt; 、 &lt;code&gt;get()&lt;/code&gt; 、および &lt;code&gt;override...&lt;/code&gt; メソッドを呼び出すことはできません。試行すると、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="e0b373ee80bbf7addb567f5760991089c85b8c3b" translate="yes" xml:space="preserve">
          <source>You cannot change the order or remove interceptors later. If you need to enable and disable an interceptor dynamically, you'll have to build that capability into the interceptor itself.</source>
          <target state="translated">後でインターセプターの順番を変更したり、削除したりすることはできません。インターセプターを動的に有効にしたり無効にしたりする必要がある場合は、その機能をインターセプター自体に組み込む必要があります。</target>
        </trans-unit>
        <trans-unit id="195ad85e3fc794dc3acdbe3b5c1247c80e63cecf" translate="yes" xml:space="preserve">
          <source>You cannot use &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; in the same hybrid application. Use one or the other.</source>
          <target state="translated">同じハイブリッドアプリケーションで &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; を使用することはできません。どちらかを使用してください。</target>
        </trans-unit>
        <trans-unit id="3f42b30122e9b38fac7f0378c47566a523a9dcdd" translate="yes" xml:space="preserve">
          <source>You configured an in-memory web API.</source>
          <target state="translated">インメモリWeb APIを設定しました。</target>
        </trans-unit>
        <trans-unit id="1a862ff841b2f1f71b38ace20138439e8a392c73" translate="yes" xml:space="preserve">
          <source>You configured the router in an &lt;code&gt;AppRoutingModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; でルーターを構成した</target>
        </trans-unit>
        <trans-unit id="e7e90d6b734bc97c1ad51e8fd7d4be5b5512fb3c" translate="yes" xml:space="preserve">
          <source>You control the &lt;em&gt;code-example&lt;/em&gt; output by setting one or more of its attributes:</source>
          <target state="translated">1つ以上の属性を設定して、&lt;em&gt;コード例の&lt;/em&gt;出力を制御します。</target>
        </trans-unit>
        <trans-unit id="fa3d8d2bfaf5aa80f0f4d374abfbd630bd751e95" translate="yes" xml:space="preserve">
          <source>You control visibility of the name error message by binding properties of the &lt;code&gt;name&lt;/code&gt; control to the message &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element's &lt;code&gt;hidden&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; コントロールのプロパティをメッセージの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;hidden&lt;/code&gt; プロパティにバインドすることにより、名前エラーメッセージの表示を制御します。</target>
        </trans-unit>
        <trans-unit id="44387f29f98dce396269ef4e00684dcb18469e88" translate="yes" xml:space="preserve">
          <source>You could achieve the same result with separate bindings to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element's &lt;code&gt;value&lt;/code&gt; property and &lt;code&gt;input&lt;/code&gt; event:</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;value&lt;/code&gt; プロパティと &lt;code&gt;input&lt;/code&gt; イベントへの個別のバインディングで同じ結果を得ることができます：</target>
        </trans-unit>
        <trans-unit id="d6e853bd06044adc529961029cc4d772479216ae" translate="yes" xml:space="preserve">
          <source>You could add more styles to &lt;code&gt;styles.css&lt;/code&gt; and keep growing that stylesheet as you add components.</source>
          <target state="translated">&lt;code&gt;styles.css&lt;/code&gt; にさらにスタイルを追加し、コンポーネントを追加するときにそのスタイルシートを拡大し続けることができます。</target>
        </trans-unit>
        <trans-unit id="f3a67407f541c304df213be45d25c45419c43892" translate="yes" xml:space="preserve">
          <source>You could also create more transitions for other routes. This trigger is sufficient for the current milestone.</source>
          <target state="translated">また、他のルートのトランジションをさらに作成することもできます。現在のマイルストーンではこのトリガーで十分です。</target>
        </trans-unit>
        <trans-unit id="1fd46d7235b105f0a662cab18f53893271fb6ce2" translate="yes" xml:space="preserve">
          <source>You could also provide &lt;code&gt;HeroService&lt;/code&gt; to a different component elsewhere in the application. That would result in a different instance of the service, living in a different injector.</source>
          <target state="translated">アプリケーションの他の場所にある別のコンポーネントに &lt;code&gt;HeroService&lt;/code&gt; を提供することもできます。その結果、サービスの別のインスタンスが生成され、別のインジェクターで動作します。</target>
        </trans-unit>
        <trans-unit id="46d151ece2e609853423299a2c591458c2ee2fc5" translate="yes" xml:space="preserve">
          <source>You could also redefine the &lt;code&gt;AppComponent&lt;/code&gt; template with Crisis Center routes exclusively:</source>
          <target state="translated">また、 &lt;code&gt;AppComponent&lt;/code&gt; ルートのみを使用してAppComponentテンプレートを再定義することもできます。</target>
        </trans-unit>
        <trans-unit id="bd8473fe08d3d79c8c61e0a315a06fb3d9c6c12d" translate="yes" xml:space="preserve">
          <source>You could continue to use absolute paths like this to navigate inside the &lt;em&gt;Crisis Center&lt;/em&gt; feature, but that pins the links to the parent routing structure. If you changed the parent &lt;code&gt;/crisis-center&lt;/code&gt; path, you would have to change the link parameters array.</source>
          <target state="translated">このような絶対パスを引き続き使用して&lt;em&gt;クライシスセンター&lt;/em&gt;機能内を移動できますが、リンクを親ルーティング構造に固定します。親の &lt;code&gt;/crisis-center&lt;/code&gt; パスを変更した場合は、リンクパラメータの配列を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2971eb2dee534ce3e325b7bf00ec45d1896adb7" translate="yes" xml:space="preserve">
          <source>You could continue to use absolute paths like this to navigate inside the Crisis Center feature, but that pins the links to the parent routing structure. If you changed the parent &lt;code&gt;/crisis-center&lt;/code&gt; path, you would have to change the link parameters array.</source>
          <target state="translated">このような絶対パスを引き続き使用して、Crisis Center機能内をナビゲートできますが、これにより、リンクが親ルーティング構造に固定されます。親 &lt;code&gt;/crisis-center&lt;/code&gt; パスを変更した場合は、リンクパラメータ配列を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="f72f6303e1cabc4decc74d5290b40948dd42031f" translate="yes" xml:space="preserve">
          <source>You could fix the problem by initializing &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; を初期化することで問題を解決できます。</target>
        </trans-unit>
        <trans-unit id="452d8a3343bceece9dfedc6bc1975a311f096b58" translate="yes" xml:space="preserve">
          <source>You could go a step further and not even download the code for the Angular part of the app to the user's browser until it is needed. This is especially useful when you use Angular on parts of the hybrid app that are not necessary for the initial rendering or that the user doesn't reach.</source>
          <target state="translated">さらに一歩進んで、必要になるまでアプリのAngular部分のコードをユーザーのブラウザにダウンロードしないようにすることもできます。これはハイブリッドアプリの最初のレンダリングに必要のない部分やユーザーが到達しない部分にAngularを使用する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="32fe4756192cc804baf2b86fa293df1560f38995" translate="yes" xml:space="preserve">
          <source>You could hide the link until the user logs in. But that's tricky and difficult to maintain.</source>
          <target state="translated">ユーザーがログインするまでリンクを隠すことができます。しかし、それは厄介だし、維持するのも難しい。</target>
        </trans-unit>
        <trans-unit id="e88ea5d91e18e7ba7e3b3b6275466f318da99357" translate="yes" xml:space="preserve">
          <source>You could lazy load the &lt;em&gt;Crisis Center&lt;/em&gt;. But you're almost certain that the user will visit the &lt;em&gt;Crisis Center&lt;/em&gt; within minutes of launching the app. Ideally, the app would launch with just the &lt;code&gt;AppModule&lt;/code&gt; and the &lt;code&gt;HeroesModule&lt;/code&gt; loaded and then, almost immediately, load the &lt;code&gt;CrisisCenterModule&lt;/code&gt; in the background. By the time the user navigates to the &lt;em&gt;Crisis Center&lt;/em&gt;, its module will have been loaded and ready to go.</source>
          <target state="translated">&lt;em&gt;Crisis Centerを&lt;/em&gt;遅延読み込みできます。しかし、ユーザーがアプリを起動してから数分以内に&lt;em&gt;クライシスセンターに&lt;/em&gt;アクセスすることはほぼ確実です。理想的には、アプリは &lt;code&gt;AppModule&lt;/code&gt; と &lt;code&gt;HeroesModule&lt;/code&gt; のみが読み込まれた状態で起動し、その後すぐに &lt;code&gt;CrisisCenterModule&lt;/code&gt; をバックグラウンドで読み込みます。ユーザーが&lt;em&gt;クライシスセンターに&lt;/em&gt;移動するまでに、そのモジュールは読み込まれ、準備が整っています。</target>
        </trans-unit>
        <trans-unit id="6f914662a16dcef5359f3d40391b26650d9f6c62" translate="yes" xml:space="preserve">
          <source>You could lazy load the Crisis Center. But you're almost certain that the user will visit the Crisis Center within minutes of launching the app. Ideally, the app would launch with just the &lt;code&gt;AppModule&lt;/code&gt; and the &lt;code&gt;HeroesModule&lt;/code&gt; loaded and then, almost immediately, load the &lt;code&gt;CrisisCenterModule&lt;/code&gt; in the background. By the time the user navigates to the Crisis Center, its module will have been loaded and ready.</source>
          <target state="translated">クライシスセンターを遅延ロードすることができます。ただし、ユーザーがアプリを起動してから数分以内にクライシスセンターにアクセスすることはほぼ確実です。理想的には、 &lt;code&gt;AppModule&lt;/code&gt; と &lt;code&gt;HeroesModule&lt;/code&gt; だけをロードしてアプリを起動し、ほぼすぐに &lt;code&gt;CrisisCenterModule&lt;/code&gt; をバックグラウンドでロードします。ユーザーがCrisisCenterに移動するまでに、そのモジュールがロードされ、準備ができています。</target>
        </trans-unit>
        <trans-unit id="630e9e902a4f3606cea5fb430c3edd98b5abe262" translate="yes" xml:space="preserve">
          <source>You could test with the actual &lt;code&gt;DashboardComponent&lt;/code&gt;. But doing so could require a lot of setup, especially when its template features an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater, other components, layout HTML, additional bindings, a constructor that injects multiple services, and it starts interacting with those services right away.</source>
          <target state="translated">実際の &lt;code&gt;DashboardComponent&lt;/code&gt; でテストできます。ただし、そのためには、特にテンプレートに &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピーター、他のコンポーネント、レイアウトHTML、追加のバインディング、複数のサービスを挿入するコンストラクターがあり、すぐにそれらのサービスとの対話を開始する場合、多くの設定が必要になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e4578f22546791ed72d7316e677c856d894d826" translate="yes" xml:space="preserve">
          <source>You could try this now and confirm that the &lt;code&gt;CrisisCenterModule&lt;/code&gt; loads after you click the &quot;Crisis Center&quot; button.</source>
          <target state="translated">ここでこれを試して、「Crisis Center」ボタンをクリックした後に &lt;code&gt;CrisisCenterModule&lt;/code&gt; がロードされることを確認できます。</target>
        </trans-unit>
        <trans-unit id="97cf8184b16fb368c1cf568c89a61f8256882bec" translate="yes" xml:space="preserve">
          <source>You could use the &lt;code&gt;toPromise&lt;/code&gt; method of &lt;code&gt;Observable&lt;/code&gt; to turn those observables into promises in the service. In many cases that reduce the number of changes to the component controllers.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; の &lt;code&gt;toPromise&lt;/code&gt; メソッドを使用して、これらのオブザーバブルをサービスのプロミスに変えることができます。多くの場合、コンポーネントコントローラへの変更の数を減らします。</target>
        </trans-unit>
        <trans-unit id="706fc2ce4be926c88dbcfd29fb697e778bd4a192" translate="yes" xml:space="preserve">
          <source>You could use the techniques you already know, but instead you'll use the new &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; syntax, which makes binding the form to the model easy.</source>
          <target state="translated">すでに知っている手法を使用することもできますが、代わりに新しい &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 構文を使用します。これにより、フォームをモデルに簡単にバインドできます。</target>
        </trans-unit>
        <trans-unit id="bb768dd372e2c53894c2360cb6fc5fe85bb3cb5e" translate="yes" xml:space="preserve">
          <source>You could wait for the user's answer with synchronous, blocking code, however, the app is more responsive&amp;mdash;and can do other work&amp;mdash;by waiting for the user's answer asynchronously.</source>
          <target state="translated">同期のブロックコードを使用してユーザーの応答を待つこともできますが、ユーザーの応答を非同期で待機することで、アプリの応答性が向上し、他の作業を実行できます。</target>
        </trans-unit>
        <trans-unit id="d96ea0f549c2692a3fbaa103c2dd3a8d102a4c86" translate="yes" xml:space="preserve">
          <source>You could wait for the user's answer with synchronous, blocking code. The app will be more responsive&amp;mdash;and can do other work&amp;mdash;by waiting for the user's answer asynchronously. Waiting for the user asynchronously is like waiting for the server asynchronously.</source>
          <target state="translated">同期ブロックコードを使用して、ユーザーの応答を待つことができます。アプリは、ユーザーの応答を非同期的に待機することで、応答性が向上し、他の作業を実行できます。ユーザーを非同期的に待機することは、サーバーを非同期的に待機することに似ています。</target>
        </trans-unit>
        <trans-unit id="97da5902bede5292928b0764fadd7ce008d22c25" translate="yes" xml:space="preserve">
          <source>You create a &lt;em&gt;predicate&lt;/em&gt; with the help of a &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; class imported from a library for the runtime platform. Here's the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; import for the browser platform:</source>
          <target state="translated">ランタイムプラットフォームのライブラリからインポートされた &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; クラスを使用して&lt;em&gt;述語&lt;/em&gt;を作成します。ここだ &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; ブラウザプラットフォームのインポートは：</target>
        </trans-unit>
        <trans-unit id="2e997d81fa984826f24995df4129ddce79c66abe" translate="yes" xml:space="preserve">
          <source>You create a car component (A) that displays a car constructed from these three generic services.</source>
          <target state="translated">これら3つの一般的なサービスで構築された車を表示する車コンポーネント(A)を作成します。</target>
        </trans-unit>
        <trans-unit id="4c680cbe1e975f58df40aec0525bbef6d84d0d05" translate="yes" xml:space="preserve">
          <source>You created a &lt;code&gt;MessageService&lt;/code&gt; for loosely-coupled communication between classes.</source>
          <target state="translated">クラス間の疎結合通信用に &lt;code&gt;MessageService&lt;/code&gt; を作成しました。</target>
        </trans-unit>
        <trans-unit id="69879e078cc685e11611d81835f00e23554349e3" translate="yes" xml:space="preserve">
          <source>You created a separate, reusable &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">別の再利用可能な &lt;code&gt;HeroDetailComponent&lt;/code&gt; を作成しました。</target>
        </trans-unit>
        <trans-unit id="ec63722b698f2f7f9f6f52669d935fef4190644e" translate="yes" xml:space="preserve">
          <source>You created the &lt;code&gt;TITLE&lt;/code&gt; token like this:</source>
          <target state="translated">次のように &lt;code&gt;TITLE&lt;/code&gt; トークンを作成しました。</target>
        </trans-unit>
        <trans-unit id="15a8aa054567a7f3841fdb91558134e2798b7f48" translate="yes" xml:space="preserve">
          <source>You created the initial application structure using the Angular CLI.</source>
          <target state="translated">Angular CLIを使って初期のアプリケーション構造を作成しました。</target>
        </trans-unit>
        <trans-unit id="49bbf95f67c77eff1eb874d3aaba2410beba0a5c" translate="yes" xml:space="preserve">
          <source>You decide to give users a way to contact the crisis center. When a user clicks a &quot;Contact&quot; button, you want to display a message in a popup view.</source>
          <target state="translated">あなたは、ユーザーに危機管理センターに連絡する方法を提供することにしました。ユーザーが「連絡」ボタンをクリックすると、ポップアップ表示でメッセージを表示したいとします。</target>
        </trans-unit>
        <trans-unit id="cda637d7a6f8a41307a3eb2938e4e491f519d86a" translate="yes" xml:space="preserve">
          <source>You declare a template &lt;em&gt;input&lt;/em&gt; variable using the &lt;code&gt;let&lt;/code&gt; keyword (&lt;code&gt;let hero&lt;/code&gt;). The variable's scope is limited to a &lt;em&gt;single instance&lt;/em&gt; of the repeated template. You can use the same variable name again in the definition of other structural directives.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; キーワード（ &lt;code&gt;let hero&lt;/code&gt; ）を使用して、テンプレート&lt;em&gt;入力&lt;/em&gt;変数を宣言します。変数のスコープは、繰り返しテンプレートの&lt;em&gt;単一インスタンス&lt;/em&gt;に制限されてい&lt;em&gt;ます&lt;/em&gt;。他の構造ディレクティブの定義で同じ変数名を再び使用できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f1d6b583d7f653d43a33ac1d03564fbc757009e" translate="yes" xml:space="preserve">
          <source>You declare a template &lt;em&gt;reference&lt;/em&gt; variable by prefixing the variable name with &lt;code&gt;#&lt;/code&gt; (&lt;code&gt;#var&lt;/code&gt;). A &lt;em&gt;reference&lt;/em&gt; variable refers to its attached element, component or directive. It can be accessed &lt;em&gt;anywhere&lt;/em&gt; in the &lt;em&gt;entire template&lt;/em&gt;.</source>
          <target state="translated">テンプレート&lt;em&gt;参照&lt;/em&gt;変数を宣言するには、変数名の前に &lt;code&gt;#&lt;/code&gt; （# &lt;code&gt;#var&lt;/code&gt; ）を付けます。&lt;em&gt;参照&lt;/em&gt;変数は、添付の要素、構成要素またはディレクティブを指します。これは、アクセス可能な&lt;em&gt;任意の場所に&lt;/em&gt;して&lt;em&gt;全体のテンプレート&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8f7426ba201410bebeedab8f0bcba003ad655a70" translate="yes" xml:space="preserve">
          <source>You define a component's application logic&amp;mdash;what it does to support the view&amp;mdash;inside a class. The class interacts with the view through an API of properties and methods.</source>
          <target state="translated">コンポーネントのアプリケーションロジック（ビューをサポートするために行うこと）をクラス内で定義します。クラスは、プロパティとメソッドのAPIを介してビューと対話します。</target>
        </trans-unit>
        <trans-unit id="5b7927eca765670ed44c6b097df099aafdd30d47" translate="yes" xml:space="preserve">
          <source>You define a component's view with its companion template. A template is a form of HTML that tells Angular how to render the component.</source>
          <target state="translated">コンパニオンテンプレートを使ってコンポーネントのビューを定義します。テンプレートとは、コンポーネントをレンダリングする方法をAngularに伝えるHTMLの形式です。</target>
        </trans-unit>
        <trans-unit id="32acd7fa6645150c28bda4a44925bafff2de6a74" translate="yes" xml:space="preserve">
          <source>You define builder inputs in a JSON schema associated with that builder. The Architect tool collects the resolved input values into an &lt;code&gt;options&lt;/code&gt; object, and validates their types against the schema before passing them to the builder function. (The Schematics library does the same kind of validation of user input).</source>
          <target state="translated">そのビルダーに関連付けられたJSONスキーマでビルダー入力を定義します。Architectツールは、解決された入力値を &lt;code&gt;options&lt;/code&gt; オブジェクトに収集し、ビルダー関数に渡す前にそれらの型をスキーマに対して検証します。（回路図ライブラリは、ユーザー入力の同じ種類の検証を行います）。</target>
        </trans-unit>
        <trans-unit id="ba11e7820731438da2ab7b201740f1db45d7b9e5" translate="yes" xml:space="preserve">
          <source>You define private styles either inline in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; array or as stylesheet file(s) identified in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; array.</source>
          <target state="translated">あなたは、のいずれかでインラインプライベートスタイルを定義 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; 配列またはで識別スタイルシートファイル（複数可）として &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="a4afec75480609b577b546845b75d0193d9a7484" translate="yes" xml:space="preserve">
          <source>You defined dummy data for &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#model&quot;&gt;model&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;powers&lt;/code&gt;, as befits a demo.</source>
          <target state="translated">デモにふさわしいように、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#model&quot;&gt;model&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;powers&lt;/code&gt; ダミーデータを定義しました。</target>
        </trans-unit>
        <trans-unit id="9775074048765a7506b60b3498a845f0ee99a8eb" translate="yes" xml:space="preserve">
          <source>You defined simple routes, a redirect route, and a parameterized route.</source>
          <target state="translated">単純なルート、リダイレクトルート、パラメータ化されたルートを定義しました。</target>
        </trans-unit>
        <trans-unit id="c94272eeef2f70c3770238ca8d900608e51e367a" translate="yes" xml:space="preserve">
          <source>You develop applications in the context of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;. A workspace contains the files for one or more &lt;a href=&quot;glossary#project&quot;&gt;projects&lt;/a&gt;. A project is the set of files that comprise a standalone application or a shareable library.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペースの&lt;/a&gt;コンテキストでアプリケーションを開発します。ワークスペースには、1つ以上の&lt;a href=&quot;glossary#project&quot;&gt;プロジェクトの&lt;/a&gt;ファイルが含まれています。プロジェクトは、スタンドアロンアプリケーションまたは共有可能なライブラリを構成するファイルのセットです。</target>
        </trans-unit>
        <trans-unit id="529da0c90bf482cb894e6c0d2308fa67c709758a" translate="yes" xml:space="preserve">
          <source>You develop apps in the context of an Angular &lt;a href=&quot;../guide/glossary#workspace&quot;&gt;workspace&lt;/a&gt;. A workspace contains the files for one or more &lt;a href=&quot;../guide/glossary#project&quot;&gt;projects&lt;/a&gt;. A project is the set of files that comprise an app, a library, or end-to-end (e2e) tests. For this tutorial, you will create a new workspace.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/glossary#workspace&quot;&gt;ワークスペースの&lt;/a&gt;コンテキストでアプリを開発します。ワークスペースには、1つ以上の&lt;a href=&quot;../guide/glossary#project&quot;&gt;プロジェクトの&lt;/a&gt;ファイルが含まれています。プロジェクトは、アプリ、ライブラリ、またはエンドツーエンド（e2e）テストを構成するファイルのセットです。このチュートリアルでは、新しいワークスペースを作成します。</target>
        </trans-unit>
        <trans-unit id="8c153a8b8dd4eef6ee944563093b018b249cf8bc" translate="yes" xml:space="preserve">
          <source>You develop apps in the context of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;&lt;strong&gt;workspace&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;&lt;strong&gt;ワークスペースの&lt;/strong&gt;&lt;/a&gt;コンテキストでアプリを開発し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="766beafa67694ca32e09c7cc005508417d71fac1" translate="yes" xml:space="preserve">
          <source>You didn't have to explicitly wire the button's enabled state to the form's validity. The &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; did this automatically when you defined a template reference variable on the enhanced form element, then referred to that variable in the button control.</source>
          <target state="translated">ボタンの有効状態をフォームの有効性に明示的に関連付ける必要はありませんでした。 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; はあなたが強化されたフォーム要素のテンプレートの参照変数を定義したときに自動的にこれをした後、ボタンコントロールでその変数を参照。</target>
        </trans-unit>
        <trans-unit id="cad868462720f78e39fb54113107bdb2151bf554" translate="yes" xml:space="preserve">
          <source>You discovered &lt;code&gt;Observable&lt;/code&gt; and the RxJS &lt;em&gt;Observable&lt;/em&gt; library.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; とRxJS &lt;em&gt;Observable&lt;/em&gt;ライブラリを発見しました。</target>
        </trans-unit>
        <trans-unit id="ae593ea8f7cf5d76b13a2df3cf6fd060bbbe460a" translate="yes" xml:space="preserve">
          <source>You displayed the &lt;code&gt;HeroesComponent&lt;/code&gt; by adding it to the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; シェルに追加して表示し &lt;code&gt;HeroesComponent&lt;/code&gt; た。</target>
        </trans-unit>
        <trans-unit id="c962981cb05c3416eb417508ab3c28c938b74f80" translate="yes" xml:space="preserve">
          <source>You do have to call &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt; to advance the (virtual) clock.</source>
          <target state="translated">（仮想）クロックを進めるには、&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick（）&lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="e996b18b32d62cc7b697a4a44de75a2198dc64ed" translate="yes" xml:space="preserve">
          <source>You do have to call &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; to advance the (virtual) clock.</source>
          <target state="translated">（仮想）クロックを進めるには、 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="968d2cfadfc8d156baf5a614df3bd087519fdfba" translate="yes" xml:space="preserve">
          <source>You do not add a &lt;code&gt;bootstrap&lt;/code&gt; declaration to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator since AngularJS owns the root template of the app and &lt;code&gt;ngUpgrade&lt;/code&gt; bootstraps the necessary components.</source>
          <target state="translated">AngularJSがアプリのルートテンプレートを所有し、 &lt;code&gt;ngUpgrade&lt;/code&gt; が必要なコンポーネントをブートストラップするため、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターに &lt;code&gt;bootstrap&lt;/code&gt; 宣言を追加しません。</target>
        </trans-unit>
        <trans-unit id="f339ed0ea3e57c3325a2a5f69381bf18524d93c4" translate="yes" xml:space="preserve">
          <source>You do not need a &lt;code&gt;providers&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array. Next, in &lt;code&gt;inspector.component.html&lt;/code&gt;, add the same markup from previous components:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列は必要ありません。次に、 &lt;code&gt;inspector.component.html&lt;/code&gt; で、前のコンポーネントと同じマークアップを追加します。</target>
        </trans-unit>
        <trans-unit id="6cc396f25fd94757ad6934169c1e285399e9a88a" translate="yes" xml:space="preserve">
          <source>You do not need a &lt;code&gt;providers&lt;/code&gt; or &lt;code&gt;viewProviders&lt;/code&gt; array. Next, in &lt;code&gt;inspector.component.html&lt;/code&gt;, add the same markup from previous components:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; や &lt;code&gt;viewProviders&lt;/code&gt; 配列は必要ありません。次に、 &lt;code&gt;inspector.component.html&lt;/code&gt; で、前のコンポーネントと同じマークアップを追加します。</target>
        </trans-unit>
        <trans-unit id="2397e2bbc8ab79911f639f7e2b5b4df13a0c67c4" translate="yes" xml:space="preserve">
          <source>You don't add this guard to the &lt;code&gt;MissionControlComponent&lt;/code&gt; because, as the parent, it controls the lifetime of the &lt;code&gt;MissionService&lt;/code&gt;.</source>
          <target state="translated">このガードは &lt;code&gt;MissionControlComponent&lt;/code&gt; に追加しません。これは、親として &lt;code&gt;MissionService&lt;/code&gt; の存続期間を制御するためです。</target>
        </trans-unit>
        <trans-unit id="62fbde765b28fcd0c07344c94836836028318218" translate="yes" xml:space="preserve">
          <source>You don't have to implement all (or any) of the lifecycle hooks, just the ones you need.</source>
          <target state="translated">ライフサイクルフックのすべて(またはいずれか)を実装する必要はなく、必要なものだけを実装してください。</target>
        </trans-unit>
        <trans-unit id="f1a31d9fae72f722beff985f29aa3adb965f9851" translate="yes" xml:space="preserve">
          <source>You don't have to publish your library to the npm package manager in order to use it in your own apps, but you do have to build it first.</source>
          <target state="translated">自分のアプリで使うためにライブラリをnpmパッケージマネージャに公開する必要はありませんが、最初にビルドする必要があります。</target>
        </trans-unit>
        <trans-unit id="3c0dd27f24884c44ac80fd44e87404ba88ac9237" translate="yes" xml:space="preserve">
          <source>You don't need a value accessor for an Angular component that you write because you can name the value and event properties to suit Angular's basic &lt;a href=&quot;template-syntax#two-way&quot;&gt;two-way binding syntax&lt;/a&gt; and skip &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; altogether. The &lt;code&gt;sizer&lt;/code&gt; in the &lt;a href=&quot;template-syntax#two-way&quot;&gt;Two-way Binding&lt;/a&gt; section is an example of this technique.</source>
          <target state="translated">Angularの基本的な&lt;a href=&quot;template-syntax#two-way&quot;&gt;双方向バインディング構文&lt;/a&gt;に合うように値とイベントのプロパティに名前を付け、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; を完全にスキップできるため、作成するAngularコンポーネントの値アクセサーは必要ありません。&lt;a href=&quot;template-syntax#two-way&quot;&gt;双方向バインディング&lt;/a&gt;セクションの &lt;code&gt;sizer&lt;/code&gt; は、この手法の例です。</target>
        </trans-unit>
        <trans-unit id="ef6637255892b147149062524c71889e1c687d4d" translate="yes" xml:space="preserve">
          <source>You don't need a value accessor for an Angular component that you write because you can name the value and event properties to suit Angular's basic &lt;a href=&quot;two-way-binding&quot;&gt;two-way binding syntax&lt;/a&gt; and skip &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; altogether. The &lt;code&gt;sizer&lt;/code&gt; in the &lt;a href=&quot;two-way-binding&quot;&gt;Two-way Binding&lt;/a&gt; section is an example of this technique.</source>
          <target state="translated">Angularの基本的な&lt;a href=&quot;two-way-binding&quot;&gt;双方向バインディング構文&lt;/a&gt;に合わせて値とイベントのプロパティに名前を付け、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; を完全にスキップできるため、作成するAngularコンポーネントに値アクセサーは必要ありません。&lt;a href=&quot;two-way-binding&quot;&gt;双方向バインディング&lt;/a&gt;セクションの &lt;code&gt;sizer&lt;/code&gt; は、この手法の例です。</target>
        </trans-unit>
        <trans-unit id="b765493326767804e31c336b8b91cca0287e735e" translate="yes" xml:space="preserve">
          <source>You don't need to do anything to get &lt;em&gt;typings&lt;/em&gt; files for library packages that include &lt;code&gt;d.ts&lt;/code&gt; files. Angular packages include them already.</source>
          <target state="translated">あなたが得るために何かをする必要はありません&lt;em&gt;タイピングを&lt;/em&gt;含めるライブラリパッケージのファイル &lt;code&gt;d.ts&lt;/code&gt; のファイルを。Angularパッケージにはすでにそれらが含まれています。</target>
        </trans-unit>
        <trans-unit id="6edb42c4ded36ca1b5f0c0194408b230a9baac09" translate="yes" xml:space="preserve">
          <source>You don't pass the Angular module directly to &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;. All &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; needs is a &quot;recipe&quot;, for example, a factory function, to create an instance for your module.</source>
          <target state="translated">Angularモジュールを直接 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; に渡さないでください。すべて &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; ニーズあなたのモジュールのインスタンスを作成するために、例えば、工場出荷時の機能「レシピ」です。</target>
        </trans-unit>
        <trans-unit id="06ad2eea71ea7357c8fec4884fe86cd43775854c" translate="yes" xml:space="preserve">
          <source>You don't see hero data because you're not binding to the &lt;code&gt;Hero&lt;/code&gt; yet. You know how to do that from earlier pages. &lt;a href=&quot;displaying-data&quot;&gt;Displaying Data&lt;/a&gt; teaches property binding. &lt;a href=&quot;user-input&quot;&gt;User Input&lt;/a&gt; shows how to listen for DOM events with an event binding and how to update a component property with the displayed value.</source>
          <target state="translated">まだ &lt;code&gt;Hero&lt;/code&gt; バインドしていないため、ヒーローデータは表示されません。以前のページでその方法を知っています。&lt;a href=&quot;displaying-data&quot;&gt;データ&lt;/a&gt;を表示すると、プロパティバインディングがわかります。&lt;a href=&quot;user-input&quot;&gt;ユーザー入力&lt;/a&gt;は、イベントバインディングでDOMイベントをリッスンする方法と、表示された値でコンポーネントプロパティを更新する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ddf4fd09c38d4933aed6c7d3ec97d63c53eb3416" translate="yes" xml:space="preserve">
          <source>You don't send data as you did with &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt; で行ったようにデータを送信しません。</target>
        </trans-unit>
        <trans-unit id="93c2360cf76192a7c2d98d6a19d61c2eaa1dccbb" translate="yes" xml:space="preserve">
          <source>You don't send data as you did with &lt;code&gt;put()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;put()&lt;/code&gt; や &lt;code&gt;post()&lt;/code&gt; のようにデータを送信することはありません。</target>
        </trans-unit>
        <trans-unit id="c8932957788788260cbad74d840121c65dcda189" translate="yes" xml:space="preserve">
          <source>You don't want the router to remove the current &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance from the DOM only to re-create it for the next &lt;code&gt;id&lt;/code&gt;. That could be visibly jarring. Better to simply re-use the same component instance and update the parameter.</source>
          <target state="translated">ルーターが現在の &lt;code&gt;HeroDetailComponent&lt;/code&gt; インスタンスをDOMから削除して、次の &lt;code&gt;id&lt;/code&gt; のために再作成することは望ましくありません。それは明らかに不快なものになる可能性があります。同じコンポーネントのインスタンスを再利用してパラメータを更新する方がよいでしょう。</target>
        </trans-unit>
        <trans-unit id="874a57897e2b077437d3f003e7f72568492154eb" translate="yes" xml:space="preserve">
          <source>You don't yet have such a root component, because the app is still managed as an AngularJS app. Create a new &lt;code&gt;app.component.ts&lt;/code&gt; file with the following &lt;code&gt;AppComponent&lt;/code&gt; class:</source>
          <target state="translated">アプリはまだAngularJSアプリとして管理されているため、このようなルートコンポーネントはまだありません。次の &lt;code&gt;AppComponent&lt;/code&gt; クラスを使用して、新しい &lt;code&gt;app.component.ts&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="9e773f9fce09e61fe127558d4b87784c5cd60c78" translate="yes" xml:space="preserve">
          <source>You enable these features in the string assigned to &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, which you write in Angular's &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;microsyntax&lt;/a&gt;.</source>
          <target state="translated">Angularの&lt;a href=&quot;structural-directives#microsyntax&quot;&gt;microsyntaxで&lt;/a&gt;記述する &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; に割り当てられた文字列でこれらの機能を有効にします。</target>
        </trans-unit>
        <trans-unit id="d18a7bb85112be047d72a8888d9a3d974d1dd317" translate="yes" xml:space="preserve">
          <source>You extended &lt;code&gt;HeroService&lt;/code&gt; to support &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; を拡張して、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;delete()&lt;/code&gt; メソッドをサポートしました。</target>
        </trans-unit>
        <trans-unit id="7ed4a11694346a607c95b06aaf0e5081c8aa7f45" translate="yes" xml:space="preserve">
          <source>You extended &lt;code&gt;HeroService&lt;/code&gt; to support &lt;code&gt;post()&lt;/code&gt;, &lt;code&gt;put()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; を拡張して、 &lt;code&gt;post()&lt;/code&gt; 、 &lt;code&gt;put()&lt;/code&gt; 、および &lt;code&gt;delete()&lt;/code&gt; メソッドをサポートしました。</target>
        </trans-unit>
        <trans-unit id="d0a22e5863eb8545076e90d175707ef42a1fe0cb" translate="yes" xml:space="preserve">
          <source>You face this dilemma when a class makes &lt;em&gt;a reference to itself&lt;/em&gt; as does &lt;code&gt;AlexComponent&lt;/code&gt; in its &lt;code&gt;providers&lt;/code&gt; array. The &lt;code&gt;providers&lt;/code&gt; array is a property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator function which must appear &lt;em&gt;above&lt;/em&gt; the class definition.</source>
          <target state="translated">このジレンマに直面するのは、クラスが &lt;code&gt;providers&lt;/code&gt; 配列の &lt;code&gt;AlexComponent&lt;/code&gt; と同様に、クラス&lt;em&gt;自体&lt;/em&gt;を&lt;em&gt;参照する&lt;/em&gt;場合です。 &lt;code&gt;providers&lt;/code&gt; 配列はの財産である &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;（）表示される必要がありますデコレータ機能&lt;em&gt;上の&lt;/em&gt;クラス定義。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ef967a004f34b820e4c797e11c707baab096d2e" translate="yes" xml:space="preserve">
          <source>You gave the &lt;code&gt;HeroService&lt;/code&gt;&lt;em&gt;get data&lt;/em&gt; method an asynchronous signature.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; の&lt;em&gt;get data&lt;/em&gt;メソッドに非同期署名を与えました。</target>
        </trans-unit>
        <trans-unit id="df6909bc3e1d9962f6410ea44e84383dbf079a01" translate="yes" xml:space="preserve">
          <source>You get the best of both worlds: the property name you want and the binding syntax you want:</source>
          <target state="translated">欲しいプロパティ名と、欲しいバインディング構文の両方を手に入れることができます。</target>
        </trans-unit>
        <trans-unit id="8eb2a4f5af2b4624d26450a803642ace378a3265" translate="yes" xml:space="preserve">
          <source>You get this test failure message when the runtime environment compiles the source code &lt;em&gt;during the tests themselves&lt;/em&gt;.</source>
          <target state="translated">ランタイム環境&lt;em&gt;がテスト中に&lt;/em&gt;ソースコードをコンパイルすると、このテストエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="7c7f73eb7078bb63026d14eafb1dd6977cc163ff" translate="yes" xml:space="preserve">
          <source>You have a basic online store catalog with a product list, &quot;Share&quot; button, and &quot;Notify Me&quot; button. You've learned about the foundation of Angular: components and template syntax. You've also learned how the component class and template interact, and how components communicate with each other.</source>
          <target state="translated">商品リスト、「共有」ボタン、「通知」ボタンを備えた基本的なオンラインストアのカタログができました。Angularの基礎であるコンポーネントとテンプレートの構文について学びました。また、コンポーネントクラスとテンプレートがどのように相互作用するか、コンポーネントがどのように相互に通信するかについても学びました。</target>
        </trans-unit>
        <trans-unit id="2bda297628d1d79533887db4f5250339e59b413f" translate="yes" xml:space="preserve">
          <source>You have mastered the basic primitives for responding to user input and gestures.</source>
          <target state="translated">ユーザーの入力やジェスチャーに対応するための基本的なプリミティブをマスターしました。</target>
        </trans-unit>
        <trans-unit id="403a24ab72807826d6e99db19df590ad937b3e9a" translate="yes" xml:space="preserve">
          <source>You have to clear all of the flags imperatively, which you can do by calling the form's &lt;code&gt;reset()&lt;/code&gt; method after calling the &lt;code&gt;newHero()&lt;/code&gt; method.</source>
          <target state="translated">すべてのフラグを強制的にクリアする必要があります。これを行うには、 &lt;code&gt;newHero()&lt;/code&gt; メソッドを呼び出した後にフォームの &lt;code&gt;reset()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="647900f0f6b5a29a423879375ffc5d105b62d794" translate="yes" xml:space="preserve">
          <source>You have to configure the server to return &lt;code&gt;index.html&lt;/code&gt; for requests to these &quot;unknown&quot; pages. The &lt;code&gt;lite-server&lt;/code&gt; development server does out-of-the-box. If you've switched over to F5 and IIS, you have to configure IIS to do it. This section walks through the steps to adapt the Getting Started application.</source>
          <target state="translated">これらの「不明な」ページへのリクエストに対して &lt;code&gt;index.html&lt;/code&gt; を返すようにサーバーを構成する必要があります。 &lt;code&gt;lite-server&lt;/code&gt; 開発サーバーはすぐに行います。F5とIISに切り替えた場合は、それを行うようにIISを構成する必要があります。このセクションでは、Getting Startedアプリケーションを適応させる手順について説明します。</target>
        </trans-unit>
        <trans-unit id="b2b9527630bfca265914c0c26cfaef53e94e543a" translate="yes" xml:space="preserve">
          <source>You have to write the listeners correctly.</source>
          <target state="translated">聞き手を正しく書かなければなりません。</target>
        </trans-unit>
        <trans-unit id="94b2f100c969ea726907f13bdc210ab42003ac48" translate="yes" xml:space="preserve">
          <source>You identified the snippet's source file by setting the &lt;code&gt;path&lt;/code&gt; attribute to sample folder's location &lt;em&gt;within&lt;/em&gt;&lt;code&gt;content/examples&lt;/code&gt;. In this example, that path is &lt;code&gt;docs-style-guide/src/app/app.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 属性を &lt;code&gt;content/examples&lt;/code&gt; &lt;em&gt;内の&lt;/em&gt;サンプルフォルダーの場所に設定して、スニペットのソースファイルを識別しました。この例では、そのパスは &lt;code&gt;docs-style-guide/src/app/app.module.ts&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dfd9ddc7009058357875f01d6d0ddfbeacf21af7" translate="yes" xml:space="preserve">
          <source>You identify the sort fields by text strings, expecting the pipe to reference a property value by indexing (such as &lt;code&gt;hero['name']&lt;/code&gt;). Unfortunately, aggressive minification manipulates the &lt;code&gt;Hero&lt;/code&gt; property names so that &lt;code&gt;Hero.name&lt;/code&gt; and &lt;code&gt;Hero.planet&lt;/code&gt; become something like &lt;code&gt;Hero.a&lt;/code&gt; and &lt;code&gt;Hero.b&lt;/code&gt;. Clearly &lt;code&gt;hero['name']&lt;/code&gt; doesn't work.</source>
          <target state="translated">ソートフィールドはテキスト文字列で識別し、パイプはインデックス（ &lt;code&gt;hero['name']&lt;/code&gt; ）によってプロパティ値を参照することを期待しています。縮小が操作残念ながら、積極的な &lt;code&gt;Hero&lt;/code&gt; ようにプロパティ名 &lt;code&gt;Hero.name&lt;/code&gt; と &lt;code&gt;Hero.planet&lt;/code&gt; はのようなものになる &lt;code&gt;Hero.a&lt;/code&gt; と &lt;code&gt;Hero.b&lt;/code&gt; 。明らかに &lt;code&gt;hero['name']&lt;/code&gt; は機能しません。</target>
        </trans-unit>
        <trans-unit id="0a890faf315256cc4cffc6b4f14d64be91c12fae" translate="yes" xml:space="preserve">
          <source>You implement this feature by including the viewed hero's &lt;code&gt;id&lt;/code&gt; in the URL as an optional parameter when returning from the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">この機能を実装するには、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; から戻るときに、表示されたヒーローの &lt;code&gt;id&lt;/code&gt; をオプションのパラメーターとしてURLに含めます。</target>
        </trans-unit>
        <trans-unit id="534030ccbe4c8339979c2da0870383ab2e09b0fc" translate="yes" xml:space="preserve">
          <source>You import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="dc5cb30c9f13ada9c51270e8d71b5c0f6b00bcd0" translate="yes" xml:space="preserve">
          <source>You import the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; symbol from the Angular core library.</source>
          <target state="translated">Angularコアライブラリから &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; シンボルをインポートします。</target>
        </trans-unit>
        <trans-unit id="ea44ad56c9289580e7c7dea1838b81b5f4e116ed" translate="yes" xml:space="preserve">
          <source>You imported the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt; so that Angular would recognize and apply the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">Angularが &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブを認識して適用できるように、 &lt;code&gt;AppModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートしました。</target>
        </trans-unit>
        <trans-unit id="7d6395ce5a6721b240c9bfc19235c9223f65f55c" translate="yes" xml:space="preserve">
          <source>You include array-level validators and async validators. These come in handy when you want to perform validation that considers the value of more than one child control.</source>
          <target state="translated">配列レベルのバリデータと非同期バリデータがあります。これらは、複数の子コントロールの値を考慮した検証を行いたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="31211eaedbd1e3c3f45d87bb4ee605329ebcce4a" translate="yes" xml:space="preserve">
          <source>You include group-level validators as the second arg, or group-level async validators as the third arg. These come in handy when you want to perform validation that considers the value of more than one child control.</source>
          <target state="translated">グループレベルのバリデータを2番目の引数に、グループレベルの非同期バリデータを3番目の引数に含めることができます。これらは、複数の子コントロールの値を考慮したバリデーションを実行したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="a5a5b9e7cc3c59932a70736c975c97b789830b6d" translate="yes" xml:space="preserve">
          <source>You inherit from &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; to prove the point that nothing changed internally. The only difference is the &lt;code&gt;pure&lt;/code&gt; flag in the pipe metadata.</source>
          <target state="translated">&lt;code&gt;FlyingHeroesPipe&lt;/code&gt; を継承して、内部で何も変更されていないことを証明します。唯一の違いは、パイプメタデータの &lt;code&gt;pure&lt;/code&gt; フラグです。</target>
        </trans-unit>
        <trans-unit id="45b3d22fb1abc1464375fb57cdba98755cc9ce40" translate="yes" xml:space="preserve">
          <source>You inject both in the directive constructor as private variables of the class.</source>
          <target state="translated">両方ともディレクティブのコンストラクタでクラスのプライベート変数として注入します。</target>
        </trans-unit>
        <trans-unit id="54a6b237e6466d9412e1f7c99d407f301f408b83" translate="yes" xml:space="preserve">
          <source>You just have to make sure, in this case, that you're supplying an object because that's the type of &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; and is what the nested component, &lt;code&gt;ListItemComponent&lt;/code&gt;, expects.</source>
          <target state="translated">この場合、オブジェクトを提供していることを確認する必要があります。これは、それが &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; のタイプであり、ネストされたコンポーネント &lt;code&gt;ListItemComponent&lt;/code&gt; が期待するものだからです。</target>
        </trans-unit>
        <trans-unit id="9c87ffac97edf99c44c05be8432ec5d85c183a5a" translate="yes" xml:space="preserve">
          <source>You know how to spy on the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; and a data service.</source>
          <target state="translated">あなたは &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; とデータサービスをスパイする方法を知っています。</target>
        </trans-unit>
        <trans-unit id="43d649d6e1796b0013dac6c4d0274ce215ce3980" translate="yes" xml:space="preserve">
          <source>You learned</source>
          <target state="translated">あなたが学んだのは</target>
        </trans-unit>
        <trans-unit id="2effd1458050a600ce87de67a9f44e297c3819b6" translate="yes" xml:space="preserve">
          <source>You learned about the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; について学習しました。</target>
        </trans-unit>
        <trans-unit id="ec106256b7d6821eb29a5d9c3d4651ad72a91314" translate="yes" xml:space="preserve">
          <source>You learned how to use observables.</source>
          <target state="translated">オブザーバブルの使い方を学びましたね。</target>
        </trans-unit>
        <trans-unit id="fd40c2d31af0a62fe960e98a2b2a338ef69b2ee9" translate="yes" xml:space="preserve">
          <source>You learned that Angular components display data.</source>
          <target state="translated">Angularのコンポーネントがデータを表示することを学びましたね。</target>
        </trans-unit>
        <trans-unit id="218f49a9777671f831a085c14e8cb78896e24d60" translate="yes" xml:space="preserve">
          <source>You learned the basics of Angular animations in the &lt;a href=&quot;animations&quot;&gt;introduction&lt;/a&gt; page.</source>
          <target state="translated">&lt;a href=&quot;animations&quot;&gt;紹介&lt;/a&gt;ページでAngularアニメーションの基本を学びました。</target>
        </trans-unit>
        <trans-unit id="986d0d34ac77bc518f14910657f1af62c062e2e5" translate="yes" xml:space="preserve">
          <source>You learned the basics of Angular dependency injection in this page. You can register various kinds of providers, and you know how to ask for an injected object (such as a service) by adding a parameter to a constructor.</source>
          <target state="translated">このページでAngularの依存関係インジェクションの基本を学びましたね。様々な種類のプロバイダを登録することができ、コンストラクタにパラメータを追加してインジェクションされたオブジェクト(サービスなど)を求める方法がわかりました。</target>
        </trans-unit>
        <trans-unit id="43cb427f81e9f13df0d370db9434387eee018c36" translate="yes" xml:space="preserve">
          <source>You learned the importance of declaring components in the &lt;code&gt;AppModule&lt;/code&gt; and appreciated that the CLI declared it for you.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; でコンポーネントを宣言することの重要性を学び、CLIがそれを宣言したことを高く評価しました。</target>
        </trans-unit>
        <trans-unit id="fc04f3c2af9d63f67d6af1edd90ba984ba819115" translate="yes" xml:space="preserve">
          <source>You learned to add animation to a simple transition between two states, using &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; along with &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; for the timing.</source>
          <target state="translated">タイミングに &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; （）とともに &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; を使用して、2つの状態間の単純な遷移にアニメーションを追加する方法を学びました。</target>
        </trans-unit>
        <trans-unit id="f1480492cb461306d102f676c74995e1c9b2177d" translate="yes" xml:space="preserve">
          <source>You learned to add animation to a simple transition between two states, using &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; along with &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; for the timing.</source>
          <target state="translated">2つの状態間の単純な遷移にアニメーションを追加する方法を学びました。タイミングには、 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; （）とともに &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0a77d8efd2315de0ae201e7faad55e6304418c73" translate="yes" xml:space="preserve">
          <source>You learned:</source>
          <target state="translated">学んだんですね。</target>
        </trans-unit>
        <trans-unit id="1d836c61590a9bedb7743208cf2fe3521c59ac14" translate="yes" xml:space="preserve">
          <source>You may also be interested in the following:</source>
          <target state="translated">以下も参考になるでしょう。</target>
        </trans-unit>
        <trans-unit id="e740b712501900f1eaa079a6bd3664db587c47aa" translate="yes" xml:space="preserve">
          <source>You may also be interested in:</source>
          <target state="translated">また、ご興味のある方もいらっしゃるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c4d515285739d4a8385ca0308eb1ed02069c61aa" translate="yes" xml:space="preserve">
          <source>You may also completely remove the following files. They are AngularJS module configuration files and not needed in Angular:</source>
          <target state="translated">また、以下のファイルを完全に削除しても構いません。これらはAngularJSモジュールの設定ファイルであり、Angularでは必要ありません。</target>
        </trans-unit>
        <trans-unit id="0d5187f7488fc4eeca07d6931cc3ff75a045d26f" translate="yes" xml:space="preserve">
          <source>You may be familiar with the component/template duality from your experience with model-view-controller (MVC) or model-view-viewmodel (MVVM). In Angular, the component plays the part of the controller/viewmodel, and the template represents the view.</source>
          <target state="translated">モデルビューコントローラ(MVC)やモデルビュービュービューモデル(MVVM)の経験から、コンポーネントとテンプレートの二元性に慣れ親しんでいるかもしれません。Angularでは、コンポーネントはコントローラ/ビューモデルの役割を果たし、テンプレートはビューを表します。</target>
        </trans-unit>
        <trans-unit id="6fedc8f95eb6ff03cbad27e4d9d8c19359b6666b" translate="yes" xml:space="preserve">
          <source>You may call this method &lt;em&gt;exactly once&lt;/em&gt;. If you must change this default in the middle of your test run, call &lt;code&gt;resetTestEnvironment&lt;/code&gt; first.</source>
          <target state="translated">このメソッド&lt;em&gt;は1回だけ&lt;/em&gt;呼び出すことができます。テストの実行中にこのデフォルトを変更する必要がある場合は、最初に &lt;code&gt;resetTestEnvironment&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="956116cef16d826f55f0ee882124115469b51de6" translate="yes" xml:space="preserve">
          <source>You may have expected the &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;handle()&lt;/code&gt; methods to return observables of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; as most &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods do.</source>
          <target state="translated">ほとんどの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドと &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; ように、 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;handle()&lt;/code&gt; メソッドがHttpResponse &amp;lt;any&amp;gt;のオブザーバブルを返すことを期待していたかもしれません。</target>
        </trans-unit>
        <trans-unit id="76bc712cc68d7c5402da4772daaca0be99aa1297" translate="yes" xml:space="preserve">
          <source>You may have noticed that the custom validation directive is instantiated with &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; rather than &lt;code&gt;useClass&lt;/code&gt;. The registered validator must be &lt;em&gt;this instance&lt;/em&gt; of the &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt;&amp;mdash;the instance in the form with its &lt;code&gt;forbiddenName&lt;/code&gt; property bound to &amp;ldquo;bob&quot;. If you were to replace &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;useClass&lt;/code&gt;, then you&amp;rsquo;d be registering a new class instance, one that doesn&amp;rsquo;t have a &lt;code&gt;forbiddenName&lt;/code&gt;.</source>
          <target state="translated">あなたは、カスタム検証ディレクティブを使ってインスタンス化されていることに気づいたかもしれません &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;useClass&lt;/code&gt; 。登録したバリデータがなければなりません&lt;em&gt;。このインスタンス&lt;/em&gt;の &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; その持つ形で-theインスタンス &lt;code&gt;forbiddenName&lt;/code&gt; の「ボブ」に結合しているプロパティ。あなたが交換した場合 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;useClass&lt;/code&gt; 、その後、新しいクラスのインスタンスを登録されると思い、1つのそのdoesnの」 t &lt;code&gt;forbiddenName&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="1494a062fc491e2edb8c9768a1f3149cff2fb785" translate="yes" xml:space="preserve">
          <source>You may not want your application to display errors before the user has a chance to edit the form. The checks for &lt;code&gt;dirty&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt; prevent errors from showing until the user does one of two things: changes the value, turning the control dirty; or blurs the form control element, setting the control to touched.</source>
          <target state="translated">ユーザーがフォームを編集する前に、アプリケーションにエラーを表示させたくない場合があります。 &lt;code&gt;dirty&lt;/code&gt; チェックと &lt;code&gt;touched&lt;/code&gt; チェックは、ユーザーが次の2つのことのいずれかを実行するまでエラーが表示されないようにします。またはフォームコントロール要素をぼかし、コントロールをタッチに設定します。</target>
        </trans-unit>
        <trans-unit id="2cbdf34b0e05bd8e2763ff6b92dfc13e5f273e20" translate="yes" xml:space="preserve">
          <source>You may prefer instead to define private styles for a specific component and keep everything a component needs&amp;mdash; the code, the HTML, and the CSS &amp;mdash;together in one place.</source>
          <target state="translated">代わりに、特定のコンポーネントにプライベートスタイルを定義し、コンポーネントに必要なすべてのもの（コード、HTML、CSS）を1か所にまとめることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="63ed428a1fc59ae167783ce22f7f21595f5f7c4f" translate="yes" xml:space="preserve">
          <source>You may prefer this approach to the property setter when watching multiple, interacting input properties.</source>
          <target state="translated">複数の相互作用する入力プロパティを見る場合は、プロパティセッターよりもこのアプローチの方が良いかもしれません。</target>
        </trans-unit>
        <trans-unit id="b76d5a2e15be04297ebf5f1de99ce2183f9e73ff" translate="yes" xml:space="preserve">
          <source>You might ask the user if it's OK to discard pending changes rather than save them.</source>
          <target state="translated">ユーザーに、保留中の変更を保存するのではなく破棄してもよいかどうかを尋ねてみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="432129a8533c399d3f0f2a7cbe6dde40ae0b3b09" translate="yes" xml:space="preserve">
          <source>You might be satisfied with the test coverage of these tests.</source>
          <target state="translated">これらのテストの網羅性に満足しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="e1478dd5d10334ec0d9cccd60da96358f954e9c2" translate="yes" xml:space="preserve">
          <source>You might decide only to test that the &lt;code&gt;clicked()&lt;/code&gt; method toggles the light's &lt;em&gt;on/off&lt;/em&gt; state and sets the message appropriately.</source>
          <target state="translated">&lt;code&gt;clicked()&lt;/code&gt; メソッドがライトの&lt;em&gt;オン/オフ&lt;/em&gt;状態を切り替え、メッセージを適切に設定することをテストすることのみを決定する場合があります。</target>
        </trans-unit>
        <trans-unit id="75b72301fb9429939bf60854869b1e3829699a2d" translate="yes" xml:space="preserve">
          <source>You might find the &lt;a href=&quot;../tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt; helpful, but it is not required.</source>
          <target state="translated">あなたは見つけるかもしれない&lt;a href=&quot;../tutorial&quot;&gt;英雄のツアーチュートリアル&lt;/a&gt;役立つが、それは必須ではありません。</target>
        </trans-unit>
        <trans-unit id="929a38a57e16c6eb4e8a1a9a2706dddb726f699e" translate="yes" xml:space="preserve">
          <source>You might first devise an error handler like this one:</source>
          <target state="translated">まず、このようなエラーハンドラを考案してみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="0dac018402e9f935fed4881686d64a47add57b7f" translate="yes" xml:space="preserve">
          <source>You might have noticed that the CLI adds &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; to the &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array. This lets Angular know that the &lt;code&gt;AppRoutingModule&lt;/code&gt; is a routing module and &lt;code&gt;forRoot()&lt;/code&gt; specifies that this is the root routing module. It configures all the routes you pass to it, gives you access to the router directives, and registers the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service. Use &lt;code&gt;forRoot()&lt;/code&gt; only once in the application, inside the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">CLIが &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; を &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 配列に追加することに気付いたかもしれません。これにより、Angularは &lt;code&gt;AppRoutingModule&lt;/code&gt; がルーティングモジュールであることを &lt;code&gt;forRoot()&lt;/code&gt; 、forRoot（）はこれがルートルーティングモジュールであることを指定します。渡すすべてのルートを構成し、ルーターディレクティブへのアクセスを提供し、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを登録します。 &lt;code&gt;forRoot()&lt;/code&gt; は、アプリケーション内の &lt;code&gt;AppRoutingModule&lt;/code&gt; 内で1回だけ使用してください。</target>
        </trans-unit>
        <trans-unit id="403f3d3d06d0dc644f9174d6c5ad9b91e0519d2c" translate="yes" xml:space="preserve">
          <source>You might have noticed that the CLI adds &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; to the &lt;code&gt;app-routing.module.ts&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array. This lets Angular know that this module, &lt;code&gt;AppRoutingModule&lt;/code&gt;, is a routing module and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; specifies that this is the root routing module. It configures all the routes you pass to it, gives you access to the router directives, and registers the &lt;code&gt;RouterService&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppRoutingModule&lt;/code&gt;&amp;mdash;that is, one time in the app at the root level.</source>
          <target state="translated">CLIが &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; を &lt;code&gt;app-routing.module.ts&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 配列に追加していることに気づいたかもしれません。これにより、Angularはこのモジュール &lt;code&gt;AppRoutingModule&lt;/code&gt; がルーティングモジュールであり、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; がこれがルートルーティングモジュールであることを指定します。渡すすべてのルートを構成し、ルーターディレクティブへのアクセスを提供し、 &lt;code&gt;RouterService&lt;/code&gt; を登録します。使用 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;AppRoutingModule&lt;/code&gt; である-つまり、ルートレベルのアプリケーションで1時間。</target>
        </trans-unit>
        <trans-unit id="33e6f5bb8222bce9afa69e6984e117ac6dd53ea4" translate="yes" xml:space="preserve">
          <source>You might need more information about the transaction than is contained in the response body. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</source>
          <target state="translated">応答本文に含まれている情報よりも、トランザクションに関するより多くの情報が必要な場合があります。サーバーは、アプリケーションのワークフローにとって重要な特定の条件を示すために、特別なヘッダやステータスコードを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="f6079d8483be401ad138352575926ddc58bf1975" translate="yes" xml:space="preserve">
          <source>You might start by creating a mock of the &lt;code&gt;UserService&lt;/code&gt; that meets the minimum needs of this component.</source>
          <target state="translated">まず、このコンポーネントの最小要件を満たす &lt;code&gt;UserService&lt;/code&gt; のモックを作成することから始めます。</target>
        </trans-unit>
        <trans-unit id="ed7751305dc22d34370d9f6e664d2bcc27da3b7d" translate="yes" xml:space="preserve">
          <source>You might think to use the RxJS &lt;code&gt;map&lt;/code&gt; operator. But the &lt;code&gt;HeroService&lt;/code&gt; returns an &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt;. So you flatten the &lt;code&gt;Observable&lt;/code&gt; with the &lt;code&gt;switchMap&lt;/code&gt; operator instead.</source>
          <target state="translated">RxJS &lt;code&gt;map&lt;/code&gt; 演算子を使用することを考えるかもしれません。しかし、 &lt;code&gt;HeroService&lt;/code&gt; は &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; 返します。したがって、代わりに &lt;code&gt;switchMap&lt;/code&gt; 演算子を使用して &lt;code&gt;Observable&lt;/code&gt; をフラット化します。</target>
        </trans-unit>
        <trans-unit id="e30be15038151fc2f2c080f3de3d083f36bbc26c" translate="yes" xml:space="preserve">
          <source>You might use &lt;code&gt;wrapInArray()&lt;/code&gt; like this:</source>
          <target state="translated">次のように &lt;code&gt;wrapInArray()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="e7864b64abecee3202fd5cc21ce328cf38a61262" translate="yes" xml:space="preserve">
          <source>You might want the message to display only when the user makes an invalid change. Hiding the message while the control is in the &lt;code&gt;pristine&lt;/code&gt; state achieves that goal. You'll see the significance of this choice when you add a new hero to the form in the next step.</source>
          <target state="translated">ユーザーが無効な変更を行った場合にのみメッセージを表示したい場合があります。コントロールが &lt;code&gt;pristine&lt;/code&gt; 状態にあるときにメッセージを非表示にすると、その目標が達成されます。次のステップでフォームに新しいヒーローを追加すると、この選択の重要性がわかります。</target>
        </trans-unit>
        <trans-unit id="9d165fe6c9b4efe41c85018555af6c13d0e46474" translate="yes" xml:space="preserve">
          <source>You might want to save pending changes before leaving a component.</source>
          <target state="translated">コンポーネントから離れる前に、保留中の変更を保存しておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="3edc155944950f9bf9f543751979fba952a1076a" translate="yes" xml:space="preserve">
          <source>You might want to show a set of properties from the same object. If you are waiting for asynchronous data, the object can be undefined. In this case, you can use &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and store the result of the condition in a local variable as shown in the the following example.</source>
          <target state="translated">同じオブジェクトの一連のプロパティを表示したい場合があります。非同期データを待っている場合、オブジェクトは未定義である可能性があります。この場合、次の例に示すように、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を使用して条件の結果をローカル変数に格納できます。</target>
        </trans-unit>
        <trans-unit id="bb8520969cd82002b38b01af6dc58abd6a1f849a" translate="yes" xml:space="preserve">
          <source>You might write something like:</source>
          <target state="translated">みたいなことを書くかもしれません。</target>
        </trans-unit>
        <trans-unit id="b24fac47bf2497729e1f4eed80aa6922ad6ee232" translate="yes" xml:space="preserve">
          <source>You must &lt;strong&gt;add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt;&lt;/strong&gt; to the app's &lt;code&gt;index.html&lt;/code&gt; for &lt;code&gt;pushState&lt;/code&gt; routing to work. The browser uses the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; value to prefix &lt;em&gt;relative&lt;/em&gt; URLs when referencing CSS files, scripts, and images.</source>
          <target state="translated">&lt;code&gt;pushState&lt;/code&gt; ルーティングを機能させるには&lt;strong&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt;要素&lt;/a&gt;&lt;/strong&gt;をアプリの &lt;code&gt;index.html&lt;/code&gt; に&lt;strong&gt;追加&lt;/strong&gt;する必要があります。ブラウザは、CSSファイル、スクリプト、および画像を参照するときに、 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; 値を使用して&lt;em&gt;相対&lt;/em&gt; URLにプレフィックスを付けます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="82227e7f31dfa089c335c55abb17002b4d52525d" translate="yes" xml:space="preserve">
          <source>You must add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt; to the app's &lt;code&gt;index.html&lt;/code&gt; for &lt;code&gt;pushState&lt;/code&gt; routing to work. The browser uses the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; value to prefix relative URLs when referencing CSS files, scripts, and images.</source>
          <target state="translated">&lt;code&gt;pushState&lt;/code&gt; ルーティングを機能させるには、アプリの &lt;code&gt;index.html&lt;/code&gt; に&amp;lt;basehref &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;gt;要素&lt;/a&gt;を追加する必要があります。ブラウザは、CSSファイル、スクリプト、および画像を参照するときに、 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; 値を使用して相対URLのプレフィックスを付けます。</target>
        </trans-unit>
        <trans-unit id="b4cba1c33d2662527ae578de85414e826cb87e7f" translate="yes" xml:space="preserve">
          <source>You must add special code snippet markup to sample source code files before they can be displayed by &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; components.</source>
          <target state="translated">&lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; コンポーネントで表示する前に、サンプルソースコードファイルに特別なコードスニペットマークアップを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="817c89b5fa1305455b378c4de5de5d21eb4287d6" translate="yes" xml:space="preserve">
          <source>You must add the new directive to the HTML template. Because the validator must be registered at the highest level in the form, the following template puts the directive on the &lt;code&gt;form&lt;/code&gt; tag.</source>
          <target state="translated">新しいディレクティブをHTMLテンプレートに追加する必要があります。バリデーターはフォームの最上位に登録する必要があるため、次のテンプレートはディレクティブを &lt;code&gt;form&lt;/code&gt; タグに配置します。</target>
        </trans-unit>
        <trans-unit id="573c2ae6a46af8fb0f3ca7357ae4610bf6950de8" translate="yes" xml:space="preserve">
          <source>You must also remove the bootstrap of the AngularJS module from &lt;code&gt;ngDoBootstrap()&lt;/code&gt; in &lt;code&gt;app.module.ts&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; import.</source>
          <target state="translated">また、からAngularJSモジュールのブートストラップを削除する必要があります &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 中 &lt;code&gt;app.module.ts&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 輸入。</target>
        </trans-unit>
        <trans-unit id="4e9a129261a56cb9bd624f844138c3c78ba5c82c" translate="yes" xml:space="preserve">
          <source>You must call &lt;code&gt;compileComponents()&lt;/code&gt; within an asynchronous test function.</source>
          <target state="translated">非同期テスト関数内で &lt;code&gt;compileComponents()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="5130dca200f8fee911986b4813b48985b687f6cb" translate="yes" xml:space="preserve">
          <source>You must call &lt;em&gt;subscribe()&lt;/em&gt; or nothing happens. Just calling &lt;code&gt;HeroesService.deleteHero()&lt;/code&gt; does not initiate the DELETE request.</source>
          <target state="translated">&lt;em&gt;subscribe（）を&lt;/em&gt;呼び出す必要があります。そうしないと、何も起こりません。 &lt;code&gt;HeroesService.deleteHero()&lt;/code&gt; を呼び出すだけでは、DELETE要求は開始されません。</target>
        </trans-unit>
        <trans-unit id="d8bc84f9b4dc3475382e6a14514d7ab28ab58e2d" translate="yes" xml:space="preserve">
          <source>You must call &lt;em&gt;subscribe()&lt;/em&gt; or nothing happens. Just calling &lt;code&gt;HeroesService.deleteHero()&lt;/code&gt;&lt;strong&gt;does not initiate the DELETE request.&lt;/strong&gt;</source>
          <target state="translated">&lt;em&gt;subscribe（）を&lt;/em&gt;呼び出さないと、何も起こりません。 &lt;code&gt;HeroesService.deleteHero()&lt;/code&gt; を呼び出すだけで&lt;strong&gt;は、DELETE要求は開始されません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6746c37d78c397487f34cb1307346224d053598b" translate="yes" xml:space="preserve">
          <source>You must choose a routing strategy early in the development of you project because once the application is in production, visitors to your site use and depend on application URL references.</source>
          <target state="translated">アプリケーションが本番になると、サイトへの訪問者はアプリケーションの URL 参照を使用し、アプリケーションの URL 参照に依存するため、プロジェクトの開発の早い段階でルーティング戦略を選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="c04670e58aee8adbf3a2823e3c78a467f07c4788" translate="yes" xml:space="preserve">
          <source>You must choose a strategy and you need to make the right call early in the project. It won't be easy to change later once the application is in production and there are lots of application URL references in the wild.</source>
          <target state="translated">あなたは戦略を選択しなければならず、プロジェクトの早い段階で正しい判断をする必要があります。アプリケーションが本番になると、後から変更するのは簡単ではありませんし、アプリケーションのURL参照が野生の中にたくさんあります。</target>
        </trans-unit>
        <trans-unit id="81950e940684ea38c4606163c02f3c360250a337" translate="yes" xml:space="preserve">
          <source>You must configure an injector with a provider, or it won't know how to create the dependency. The most obvious way for an injector to create an instance of a service class is with the class itself. If you specify the service class itself as the provider token, the default behavior is for the injector to instantiate that class with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">プロバイダーでインジェクターを構成する必要があります。そうしないと、依存関係を作成する方法がわかりません。インジェクタがサービスクラスのインスタンスを作成する最も明白な方法は、クラス自体を使用することです。サービスクラス自体をプロバイダートークンとして指定した場合、デフォルトの動作では、インジェクターはそのクラスを &lt;code&gt;new&lt;/code&gt; でインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="d26b62344c9b96fed54860eb5e2189570bf5063f" translate="yes" xml:space="preserve">
          <source>You must declare every component in exactly one &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class. If you use a component without declaring it, Angular returns an error message.</source>
          <target state="translated">すべてのコンポーネントを1つの &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; クラスで宣言する必要があります。宣言せずにコンポーネントを使用すると、Angularはエラーメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="1579948f48ca762b524a31d185209b2bf750cef0" translate="yes" xml:space="preserve">
          <source>You must include your pipe in the &lt;code&gt;declarations&lt;/code&gt; array of the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;declarations&lt;/code&gt; 配列にパイプを含める必要があります</target>
        </trans-unit>
        <trans-unit id="4d7f2060f27da6323e7dd129a35c9663756cd137" translate="yes" xml:space="preserve">
          <source>You must install a suitable interceptor, such as one provided by &lt;code&gt;&lt;a href=&quot;httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt;. If no such interceptor is reached, then the &lt;code&gt;JSONP&lt;/code&gt; request can be rejected by the configured backend.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; によって提供されるような適切なインターセプターをインストールする必要があります。そのようなインターセプターに到達しない場合、 &lt;code&gt;JSONP&lt;/code&gt; 要求は構成されたバックエンドによって拒否される可能性があります。</target>
        </trans-unit>
        <trans-unit id="9dd56d88b83342e1fe90bfc898c247f87a55121c" translate="yes" xml:space="preserve">
          <source>You must make the &lt;code&gt;HeroService&lt;/code&gt; available to the dependency injection system before Angular can &lt;em&gt;inject&lt;/em&gt; it into the &lt;code&gt;HeroesComponent&lt;/code&gt; by registering a &lt;em&gt;provider&lt;/em&gt;. A provider is something that can create or deliver a service; in this case, it instantiates the &lt;code&gt;HeroService&lt;/code&gt; class to provide the service.</source>
          <target state="translated">Angularが&lt;em&gt;プロバイダーを&lt;/em&gt;登録して &lt;code&gt;HeroesComponent&lt;/code&gt; &lt;em&gt;注入&lt;/em&gt;する前に、依存関係注入システムで &lt;code&gt;HeroService&lt;/code&gt; を利用できるようにする必要があり&lt;em&gt;ます&lt;/em&gt;。プロバイダーは、サービスを作成または提供できるものです。この場合、 &lt;code&gt;HeroService&lt;/code&gt; クラスをインスタンス化してサービスを提供します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="845c86944126fad934355a803514097fba2b7f9d" translate="yes" xml:space="preserve">
          <source>You must register at least one &lt;em&gt;provider&lt;/em&gt; of any service you are going to use. The provider can be part of the service's own metadata, making that service available everywhere, or you can register providers with specific modules or components. You register providers in the metadata of the service (in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator), or in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata</source>
          <target state="translated">使用するサービスの&lt;em&gt;プロバイダー&lt;/em&gt;を少なくとも1つ登録する必要があります。プロバイダーはサービス自体のメタデータの一部であり、そのサービスをどこでも利用できるようにするか、またはプロバイダーを特定のモジュールまたはコンポーネントに登録できます。（でサービスのメタデータにプロバイダをあなたの登録 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータ）、または中 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; メタデータ</target>
        </trans-unit>
        <trans-unit id="37e3031ca14ef3801be26c764c65d17ec6e188f5" translate="yes" xml:space="preserve">
          <source>You must register custom pipes. If you don't, Angular reports an error. The &lt;a href=&quot;cli&quot;&gt;Angular CLI's&lt;/a&gt; generator registers the pipe automatically.</source>
          <target state="translated">カスタムパイプを登録する必要があります。そうしないと、Angularはエラーを報告します。&lt;a href=&quot;cli&quot;&gt;アンギュラCLIの&lt;/a&gt;ジェネレータは、自動的にパイプを登録します。</target>
        </trans-unit>
        <trans-unit id="d4c6aa6d6d1a638e163055c56532e8527f05006e" translate="yes" xml:space="preserve">
          <source>You must tell the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to perform data binding by calling &lt;code&gt;fixture.detectChanges()&lt;/code&gt;. Only then does the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; have the expected title.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; にデータバインディングを実行させるには、 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; を呼び出す必要があります。 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 初めて、&amp;lt;h1&amp;gt;は期待されるタイトルになります。</target>
        </trans-unit>
        <trans-unit id="96214b102c11a6a384a38e5c9b0426413f663320" translate="yes" xml:space="preserve">
          <source>You must unwrap that result to get the paragraph element.</source>
          <target state="translated">段落要素を取得するには、その結果をアンラップしなければなりません。</target>
        </trans-unit>
        <trans-unit id="2c8932b689b3643a5b3be019d3723abb34b7e281" translate="yes" xml:space="preserve">
          <source>You need a &lt;code&gt;LoginComponent&lt;/code&gt; for the user to log in to the app. After logging in, you'll redirect to the stored URL if available, or use the default URL. There is nothing new about this component or the way you use it in the router configuration.</source>
          <target state="translated">ユーザーがアプリにログインするには、 &lt;code&gt;LoginComponent&lt;/code&gt; が必要です。ログイン後、利用可能な場合は保存されているURLにリダイレクトするか、デフォルトのURLを使用します。このコンポーネントやルーター構成での使用方法については、新しいことは何もありません。</target>
        </trans-unit>
        <trans-unit id="2acf3ef695397eeca16b0f90bb627abbf354b430" translate="yes" xml:space="preserve">
          <source>You need a &lt;code&gt;LoginComponent&lt;/code&gt; for the user to log in to the app. After logging in, you'll redirect to the stored URL if available, or use the default URL. There is nothing new about this component or the way you wire it into the router configuration.</source>
          <target state="translated">ユーザーがアプリにログインするには、 &lt;code&gt;LoginComponent&lt;/code&gt; が必要です。ログイン後、利用可能な場合は保存されているURLにリダイレクトするか、デフォルトのURLを使用します。このコンポーネント、またはルーター構成に接続する方法については、何も新しいことはありません。</target>
        </trans-unit>
        <trans-unit id="ce1cc8a9525aacbf2afdf53cf659deb548ae370e" translate="yes" xml:space="preserve">
          <source>You need a &lt;em&gt;resolver&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;リゾルバ&lt;/em&gt;が必要です。</target>
        </trans-unit>
        <trans-unit id="8c441b7e02e7ba7a072991eab3f266ed2bc236c0" translate="yes" xml:space="preserve">
          <source>You need a template reference variable to access the input box's Angular control from within the template. Here you created a variable called &lt;code&gt;name&lt;/code&gt; and gave it the value &quot;ngModel&quot;.</source>
          <target state="translated">テンプレート内から入力ボックスのAngularコントロールにアクセスするには、テンプレート参照変数が必要です。ここでは、 &lt;code&gt;name&lt;/code&gt; という変数を作成し、それに値 &quot;ngModel&quot;を指定しました。</target>
        </trans-unit>
        <trans-unit id="eee8f9b7bdb07990e6b416f967ea07707b2c08a0" translate="yes" xml:space="preserve">
          <source>You need one more addition to display the data. Declare a template variable for the form. Update the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag with &lt;code&gt;#heroForm=&quot;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; as follows:</source>
          <target state="translated">データを表示するには、もう1つ追加する必要があります。フォームのテンプレート変数を宣言します。次のように、 &lt;code&gt;#heroForm=&quot;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; &lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt; &quot;を使用して &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグを更新します。</target>
        </trans-unit>
        <trans-unit id="1111de02e835e7dc2497c3e7c420093367e46cb8" translate="yes" xml:space="preserve">
          <source>You need the &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; ガードが必要です。</target>
        </trans-unit>
        <trans-unit id="f2729926d13e03c2c9679d7ee0bcc1e6eb8a0d29" translate="yes" xml:space="preserve">
          <source>You need the router helper function, &lt;code&gt;&lt;a href=&quot;../api/router/converttoparammap&quot;&gt;convertToParamMap&lt;/a&gt;()&lt;/code&gt;, to create a &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/converttoparammap&quot;&gt;convertToParamMap&lt;/a&gt;()&lt;/code&gt; を作成するには、ルーターヘルパー関数convertToParamMap（）が必要 &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bf27fb928ad76ea1b0ea5c303aab922105acf81" translate="yes" xml:space="preserve">
          <source>You need to &lt;a href=&quot;https://github.com/join&quot;&gt;create a GitHub account&lt;/a&gt; if you don't have one, and then &lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot;&gt;create a repository&lt;/a&gt; for your project. Make a note of the user name and project name in GitHub.</source>
          <target state="translated">あなたはする必要が&lt;a href=&quot;https://github.com/join&quot;&gt;GitHubのアカウントを作成して&lt;/a&gt;お持ちでない場合は、その後、&lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot;&gt;リポジトリの作成&lt;/a&gt;、プロジェクトのために。GitHubのユーザー名とプロジェクト名を書き留めます。</target>
        </trans-unit>
        <trans-unit id="99a3c77e24af21acfd7389ae3cc458f30f6e0071" translate="yes" xml:space="preserve">
          <source>You need to build and deploy a separate version of the app for each supported language.</source>
          <target state="translated">サポートされている言語ごとに別々のバージョンのアプリをビルドしてデプロイする必要があります。</target>
        </trans-unit>
        <trans-unit id="6391c1628bde436b54ea7bae9be036a5f9116b93" translate="yes" xml:space="preserve">
          <source>You need to load all the AngularJS files you already use in &lt;code&gt;index.html&lt;/code&gt; in &lt;code&gt;aot/index.html&lt;/code&gt; as well:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; ですでに使用しているすべてのAngularJSファイルを &lt;code&gt;aot/index.html&lt;/code&gt; にもロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="3ba34799ce0125c50feea4d2f94397cd9ffb6631" translate="yes" xml:space="preserve">
          <source>You need to stop the navigation while you wait, asynchronously, for the server to return with its answer.</source>
          <target state="translated">サーバーからの回答が返ってくるのを非同期で待っている間、ナビゲーションを停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="6eb4d35c981bb0706aef5034d0f1817be029ccf5" translate="yes" xml:space="preserve">
          <source>You no longer have to hardcode the links to phone details in the phone list. You can generate data bindings for each phone's &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directive and let that directive construct the appropriate URL to the &lt;code&gt;PhoneDetailComponent&lt;/code&gt;:</source>
          <target state="translated">電話リストの電話詳細へのリンクをハードコードする必要がなくなりました。 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; ディレクティブへの各電話の &lt;code&gt;id&lt;/code&gt; データバインディングを生成し、そのディレクティブに &lt;code&gt;PhoneDetailComponent&lt;/code&gt; への適切なURLを構築させることができます。</target>
        </trans-unit>
        <trans-unit id="0577eb67ae8c2868ed81d0fae14c8e96b0f18c06" translate="yes" xml:space="preserve">
          <source>You no longer need the stub components.</source>
          <target state="translated">もうスタブの部品は必要ありません。</target>
        </trans-unit>
        <trans-unit id="37d9f2ce65cb78b1a64b9dfd99566ec3cfcc764f" translate="yes" xml:space="preserve">
          <source>You now have a basic routable animation that animates routing from one view to another.</source>
          <target state="translated">これで、あるビューから別のビューへのルーティングをアニメーション化する基本的なルーティングアニメーションが完成しました。</target>
        </trans-unit>
        <trans-unit id="80ee557433481e075d16f7b5330d11ab8f24bc4c" translate="yes" xml:space="preserve">
          <source>You often have a choice between interpolation and property binding. The following binding pairs do the same thing:</source>
          <target state="translated">補間とプロパティバインディングのどちらかを選択することがよくあります。以下のバインディング・ペアは同じことを行います。</target>
        </trans-unit>
        <trans-unit id="63737955c08aa1f6e5a6aab112e2f347877a0c8d" translate="yes" xml:space="preserve">
          <source>You optionally export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myForm=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt;). This is optional, but useful. Many properties from the underlying &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance are duplicated on the directive itself, so a reference to it gives you access to the aggregate value and validity status of the form, as well as user interaction properties like &lt;code&gt;dirty&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">必要に応じて、 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; をキーとして使用して、ディレクティブをローカルテンプレート変数にエクスポートします（例： &lt;code&gt;#myForm=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; ）。これはオプションですが、便利です。基になる &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスからの多くのプロパティはディレクティブ自体で複製されるため、それへの参照により、フォームの集計値と有効性ステータス、および &lt;code&gt;dirty&lt;/code&gt; や &lt;code&gt;touched&lt;/code&gt; などのユーザーインタラクションプロパティにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4ef46e0d28f508e66000ef7877b2eea3588d48a3" translate="yes" xml:space="preserve">
          <source>You protected the admin feature module from unauthorized access. You should also protect child routes &lt;em&gt;within&lt;/em&gt; the feature module.</source>
          <target state="translated">管理機能モジュールを不正アクセスから保護しました。機能モジュール&lt;em&gt;内&lt;/em&gt;の子ルートも保護する必要があります。</target>
        </trans-unit>
        <trans-unit id="b42b502db7e46f18b540ad2d521f3120848d24d2" translate="yes" xml:space="preserve">
          <source>You put a lot of effort into configuring the router in several routing module files and were careful to list them &lt;a href=&quot;router#routing-module-order&quot;&gt;in the proper order&lt;/a&gt;. Are routes actually evaluated as you planned? How is the router really configured?</source>
          <target state="translated">複数のルーティングモジュールファイルでルーターを構成することに多大な労力を費やし、それら&lt;a href=&quot;router#routing-module-order&quot;&gt;を適切な順序で&lt;/a&gt;リストするように注意しました。ルートは実際に計画どおりに評価されていますか？ルーターは実際にどのように構成されていますか？</target>
        </trans-unit>
        <trans-unit id="aafa231c202eefbceac744d6d60875f3ce51ed2d" translate="yes" xml:space="preserve">
          <source>You refactored &lt;code&gt;HeroService&lt;/code&gt; to load heroes from a web API.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; をリファクタリングして、ウェブAPIからヒーローをロードしました。</target>
        </trans-unit>
        <trans-unit id="d54570870a8c6dc3341468b3713c0e780b76a88c" translate="yes" xml:space="preserve">
          <source>You refactored a tightly-coupled master/detail view into a routed detail view.</source>
          <target state="translated">緊密に結合されたマスター/ディテイルビューを、ルーティングされたディテイルビューにリファクタリングしました。</target>
        </trans-unit>
        <trans-unit id="7670300b961a4cc60ff0144378416d5371b76fef" translate="yes" xml:space="preserve">
          <source>You refactored data access to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; クラスへのデータアクセスをリファクタリングしました。</target>
        </trans-unit>
        <trans-unit id="5a46650531665bdfb2f295a8f537ed035a6a62a4" translate="yes" xml:space="preserve">
          <source>You registered the &lt;code&gt;HeroService&lt;/code&gt; as the &lt;em&gt;provider&lt;/em&gt; of its service at the root level so that it can be injected anywhere in the app.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; をルートレベルでサービスの&lt;em&gt;プロバイダー&lt;/em&gt;として登録し、アプリのどこにでも挿入できるようにしました。</target>
        </trans-unit>
        <trans-unit id="cb579f3447e87c231dd3c83de77d02b5167fdf37" translate="yes" xml:space="preserve">
          <source>You replaced the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; filters with bindings to the &lt;code&gt;getPhones()&lt;/code&gt; controller method, which implements the filtering and ordering logic inside the component itself.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; および &lt;code&gt;orderBy&lt;/code&gt; フィルターを &lt;code&gt;getPhones()&lt;/code&gt; コントローラーメソッドへのバインディングに置き換えました。これは、コンポーネント自体の内部にフィルタリングおよび順序付けロジックを実装します。</target>
        </trans-unit>
        <trans-unit id="1b0f155a70a067b1b321b870b5a5787911d96127" translate="yes" xml:space="preserve">
          <source>You reset to a specific form state by passing in a map of states that matches the structure of your form, with control names as keys. The state is a standalone value or a form state object with both a value and a disabled status.</source>
          <target state="translated">コントロール名をキーとして、フォームの構造にマッチするステートのマップを渡すことで、特定のフォームステートにリセットします。状態はスタンドアロンの値か、値と無効化された状態の両方を持つフォーム状態オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="43695722bd4b3b9eabbb7cb493216e0ceda6d23c" translate="yes" xml:space="preserve">
          <source>You reset to a specific form state by passing in an array of states that matches the structure of the control. The state is a standalone value or a form state object with both a value and a disabled status.</source>
          <target state="translated">コントロールの構造に一致する状態の配列を渡すことで、特定のフォーム状態にリセットします。状態はスタンドアロンの値か、値と無効化された状態の両方を持つフォーム状態オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="7d4eb20283669e1aa1dd4562e941fd251f0457d5" translate="yes" xml:space="preserve">
          <source>You reset to a specific form state by passing through a standalone value or a form state object that contains both a value and a disabled state (these are the only two properties that cannot be calculated).</source>
          <target state="translated">スタンドアロン値または値と無効化された状態の両方を含むフォーム状態オブジェクトを渡すことで、特定のフォーム状態にリセットすることができます(これらは計算できない唯一の2つのプロパティです)。</target>
        </trans-unit>
        <trans-unit id="89f81181dabdebed7b3eb4c7806377c8fb6af04e" translate="yes" xml:space="preserve">
          <source>You routinely initialize attributes this way in standard HTML, and it works just as well for directive and component property initialization. The following example initializes the &lt;code&gt;prefix&lt;/code&gt; property of the &lt;code&gt;StringInitComponent&lt;/code&gt; to a fixed string, not a template expression. Angular sets it and forgets about it.</source>
          <target state="translated">この方法で標準HTMLで属性を定期的に初期化すると、ディレクティブとコンポーネントプロパティの初期化と同様に機能します。次の例では、 &lt;code&gt;StringInitComponent&lt;/code&gt; の &lt;code&gt;prefix&lt;/code&gt; プロパティを、テンプレート式ではなく固定文字列に初期化します。Angularはそれを設定し、それを忘れます。</target>
        </trans-unit>
        <trans-unit id="89cbbabb09609b81ccef3f7d33da3d6c1c0834c0" translate="yes" xml:space="preserve">
          <source>You see at a glance if a part of your application lacks tests.</source>
          <target state="translated">アプリケーションの一部がテストを欠いているかどうかが一目でわかります。</target>
        </trans-unit>
        <trans-unit id="d4a27c2aa11f28149e13c9aa67e3b813226566cd" translate="yes" xml:space="preserve">
          <source>You shared the &lt;code&gt;HeroService&lt;/code&gt; among multiple components.</source>
          <target state="translated">複数のコンポーネント間で &lt;code&gt;HeroService&lt;/code&gt; を共有しました。</target>
        </trans-unit>
        <trans-unit id="5d0cc10785a35283f87d2bc35fd90f89f4ee0927" translate="yes" xml:space="preserve">
          <source>You should also configure the TypeScript compiler with a &lt;code&gt;tsconfig.json&lt;/code&gt; in the project directory as described in the &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt; guide. The &lt;code&gt;tsconfig.json&lt;/code&gt; file tells the TypeScript compiler how to turn your TypeScript files into ES5 code bundled into CommonJS modules.</source>
          <target state="translated">&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript構成&lt;/a&gt;ガイドで説明されているように、プロジェクトディレクトリの &lt;code&gt;tsconfig.json&lt;/code&gt; でTypeScriptコンパイラを構成する必要もあります。 &lt;code&gt;tsconfig.json&lt;/code&gt; のファイルは、CommonJSモジュールにバンドルES5コードにあなたの活字体のファイルを有効にする方法を活字体コンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="d6adb95b05244100e5decf300ed44bc7c02f4a2a" translate="yes" xml:space="preserve">
          <source>You should also direct the output to a locale-specific folder to keep it separate from other locale versions of your app, by setting the &lt;code&gt;outputPath&lt;/code&gt; configuration option.</source>
          <target state="translated">また、 &lt;code&gt;outputPath&lt;/code&gt; 構成オプションを設定して、出力をロケール固有のフォルダーに転送し、他のロケールバージョンのアプリから分離する必要があります。</target>
        </trans-unit>
        <trans-unit id="30c45d622e1fcd7c538fa7e9a47bdf8d20d96f65" translate="yes" xml:space="preserve">
          <source>You should always provide your service in the root injector unless there is a case where you want the service to be available only if the consumer imports a particular &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">あなたは、サービスが利用できるようにしたい場合がある場合を除き、あなたは常にルートインジェクタでサービスを提供しなければならないだけで、消費者の輸入は、特定の場合 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51095b779e50e2e09c61d3469398469cd624e188" translate="yes" xml:space="preserve">
          <source>You should be careful. Readers don't always read carefully and are likely to copy and paste your example of bad code in their own applications. So don't display bad code often.</source>
          <target state="translated">注意が必要です。読者はいつも注意深く読んでいるわけではなく、あなたの悪いコードの例を自分のアプリケーションにコピペしてしまう可能性が高いのです。ですから、悪いコードを頻繁に表示しないようにしましょう。</target>
        </trans-unit>
        <trans-unit id="b7d4b1d957a37a9834f48cb95a1cc031f23c611f" translate="yes" xml:space="preserve">
          <source>You should nest the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag within a &lt;code&gt;&amp;lt;div class=&quot;lightbox&quot;&amp;gt;&lt;/code&gt; tag, which styles the image within a drop-shadow frame. You'll need the editor's permission to skip the &lt;code&gt;lightbox&lt;/code&gt; class on its &lt;code&gt;div&lt;/code&gt; encapsulation.</source>
          <target state="translated">&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; タグを &lt;code&gt;&amp;lt;div class=&quot;lightbox&quot;&amp;gt;&lt;/code&gt; &amp;gt;タグ内にネストする必要があります。これにより、ドロップシャドウフレーム内で画像のスタイルが設定されます。 &lt;code&gt;div&lt;/code&gt; カプセル化で &lt;code&gt;lightbox&lt;/code&gt; クラスをスキップするには、編集者の許可が必要です。</target>
        </trans-unit>
        <trans-unit id="52df89a1b446176f5c69199563685a0d0108662d" translate="yes" xml:space="preserve">
          <source>You should nest the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag within a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; tag, which styles the image within a drop-shadow frame. You'll need the editor's permission to skip the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; タグを &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; &amp;gt;タグ内にネストする必要があります。これにより、影付きフレーム内の画像のスタイルが設定されます。 &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; タグをスキップするには、編集者の許可が必要です。</target>
        </trans-unit>
        <trans-unit id="8e7cd2888ca9d22c97d53d8cde19593150cc97dc" translate="yes" xml:space="preserve">
          <source>You should not create your own TOC by hand. The TOC is generated automatically from the page's main and secondary section headers.</source>
          <target state="translated">自分でTOCを手書きで作成してはいけません。TOCはページのメインセクションとセカンダリセクションのヘッダーから自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="ea389cc13a880a9e343a84dc949bf08c3f9ea723" translate="yes" xml:space="preserve">
          <source>You should now also remove the phone detail component &amp;lt;script&amp;gt; tag from &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">次に、電話詳細コンポーネントの&amp;lt;script&amp;gt;タグも &lt;code&gt;index.html&lt;/code&gt; から削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="8101ad7db0f8e901c4fe2fc7eb6d8dc7ba777dd0" translate="yes" xml:space="preserve">
          <source>You should see a single web page, consisting of a title and the HTML of your two components.</source>
          <target state="translated">タイトルと2つのコンポーネントのHTMLからなる1つのウェブページが表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="32863aed9a56962331d8fc5bbf8e0f52fb368acb" translate="yes" xml:space="preserve">
          <source>You should see the app running in your browser.</source>
          <target state="translated">ブラウザでアプリが起動しているのが確認できるはずです。</target>
        </trans-unit>
        <trans-unit id="520d199e1bd4d7c3ce68cfbf6ab8d880ed0c4735" translate="yes" xml:space="preserve">
          <source>You should see the default paragraph from &lt;code&gt;MessagesComponent&lt;/code&gt; at the bottom of the page.</source>
          <target state="translated">ページの下部にある &lt;code&gt;MessagesComponent&lt;/code&gt; のデフォルトの段落が表示されます。</target>
        </trans-unit>
        <trans-unit id="19f838d7d6530d2cc50bfdbfc476adb799b5dc04" translate="yes" xml:space="preserve">
          <source>You should see the following transitions and class names:</source>
          <target state="translated">以下のようなトランジションとクラス名が表示されているはずです。</target>
        </trans-unit>
        <trans-unit id="018542cb9d4df1d969461c5aac5be07c3aa14152" translate="yes" xml:space="preserve">
          <source>You should source code snippets &lt;a href=&quot;docs-style-guide#from-code-samples&quot;&gt;from working sample code&lt;/a&gt; when possible. But there are times when an inline snippet is the better choice.</source>
          <target state="translated">可能であれば&lt;a href=&quot;docs-style-guide#from-code-samples&quot;&gt;、作業サンプルコードから&lt;/a&gt;コードスニペットを入手する必要があります。ただし、インラインスニペットの方が適している場合もあります。</target>
        </trans-unit>
        <trans-unit id="d7d206d1894640be7995f88772bdbf5feb524683" translate="yes" xml:space="preserve">
          <source>You should still be running with this CLI command.</source>
          <target state="translated">まだこのCLIコマンドで実行しているはずです。</target>
        </trans-unit>
        <trans-unit id="84535c33e9a0911dd152cd3532876b1d94f2037a" translate="yes" xml:space="preserve">
          <source>You should test the app's defenses against HTTP requests that fail.</source>
          <target state="translated">失敗するHTTPリクエストに対するアプリの防御をテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="a861d5fab6b421578e8b7a20fa85fab7963408f9" translate="yes" xml:space="preserve">
          <source>You simplified the &lt;code&gt;HeroesComponent&lt;/code&gt; by reducing its responsibilities.</source>
          <target state="translated">あなたは、 &lt;code&gt;HeroesComponent&lt;/code&gt; の責任を軽減することで簡略化しました。</target>
        </trans-unit>
        <trans-unit id="8992ea96709e262a06622c0bdf58df11fb9c86cb" translate="yes" xml:space="preserve">
          <source>You specify the warning level in the &lt;code&gt;configurations&lt;/code&gt; section of your Angular CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;. The example below shows how to set the warning level to error.</source>
          <target state="translated">警告レベルは、Angular CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; の &lt;code&gt;configurations&lt;/code&gt; セクションで指定します。以下の例は、警告レベルをエラーに設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2d78474b4635695a4a37ad320bf56bec17dfab4d" translate="yes" xml:space="preserve">
          <source>You still might delay navigation until the save succeeds. If you let the user move to the next screen immediately and saving were to fail (perhaps the data is ruled invalid), you would lose the context of the error.</source>
          <target state="translated">それでも、保存が成功するまでナビゲーションを遅らせることができます。ユーザーをすぐに次の画面に移動させて、保存に失敗した場合(おそらくデータが無効と判断されたのでしょう)、エラーのコンテキストを失うことになります。</target>
        </trans-unit>
        <trans-unit id="7763a3a5e8459f14f0c072ab85c16b19d8b4ed95" translate="yes" xml:space="preserve">
          <source>You still might delay navigation until the save succeeds. If you let the user move to the next screen immediately and the save were to fail (perhaps the data are ruled invalid), you would lose the context of the error.</source>
          <target state="translated">それでも、保存が成功するまでナビゲーションを遅らせることができます。ユーザーをすぐに次の画面に移動させて、保存が失敗した場合(おそらくデータが無効と判断された)、エラーのコンテキストを失うことになります。</target>
        </trans-unit>
        <trans-unit id="0d9b8e5b1134fffdea61dc2f21213f3a57915c0a" translate="yes" xml:space="preserve">
          <source>You still send the &lt;code&gt;httpOptions&lt;/code&gt;.</source>
          <target state="translated">引き続き &lt;code&gt;httpOptions&lt;/code&gt; を送信します。</target>
        </trans-unit>
        <trans-unit id="16eb9b59494eb7dd233cf7b549e2fbd7879a5344" translate="yes" xml:space="preserve">
          <source>You tell the detail view which hero to display by including the selected hero's id in the route URL.</source>
          <target state="translated">ルートURLに選択したヒーローのIDを含めることで、どのヒーローを表示するかを詳細ビューに指示します。</target>
        </trans-unit>
        <trans-unit id="7cceeda124319983d408264321808618cf6e4189" translate="yes" xml:space="preserve">
          <source>You turned the &lt;code&gt;AppComponent&lt;/code&gt; into a navigation shell with &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; links and a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">あなたはなっ &lt;code&gt;AppComponent&lt;/code&gt; を持つナビゲーションシェルに &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; リンクと &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d18067bd916a40aa4fd9f1a60533cfc36b40d9b5" translate="yes" xml:space="preserve">
          <source>You turned the &lt;code&gt;AppComponent&lt;/code&gt; into a navigation shell with &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; links and a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">あなたはなっ &lt;code&gt;AppComponent&lt;/code&gt; を持つナビゲーションシェルに &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; リンクと &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0f43e5fd2256a68f384fdb2d77996d6d0bbdd09" translate="yes" xml:space="preserve">
          <source>You update the &lt;code&gt;beforeEach&lt;/code&gt; to find that element with a standard HTML &lt;code&gt;querySelector&lt;/code&gt; and assign it to the &lt;code&gt;h1&lt;/code&gt; variable.</source>
          <target state="translated">&lt;code&gt;beforeEach&lt;/code&gt; を更新して、標準のHTML &lt;code&gt;querySelector&lt;/code&gt; でその要素を見つけ、 &lt;code&gt;h1&lt;/code&gt; 変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="9a82e7a305abebc12f90f24bc8f3b5d8875a7f44" translate="yes" xml:space="preserve">
          <source>You updated the components to allow adding, editing, and deleting of heroes.</source>
          <target state="translated">ヒーローの追加、編集、削除ができるようにコンポーネントを更新しましたね。</target>
        </trans-unit>
        <trans-unit id="2e1bed7f29058ba67e3febc7b1f7e751b740f485" translate="yes" xml:space="preserve">
          <source>You use &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt; with a pipe to display values and respond to user actions. If the data is a primitive input value, such as &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Number&lt;/code&gt;, or an object reference as input, such as &lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt;, Angular executes the pipe whenever it detects a change for the input value or reference.</source>
          <target state="translated">パイプを使用した&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;を使用して、値を表示し、ユーザーアクションに応答します。データが &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;Number&lt;/code&gt; などのプリミティブな入力値、または &lt;code&gt;Date&lt;/code&gt; や &lt;code&gt;Array&lt;/code&gt; などの入力としてのオブジェクト参照である場合、Angularは入力値または参照の変更を検出するたびにパイプを実行します。</target>
        </trans-unit>
        <trans-unit id="f0ba9b22a9552cb151befab3c50306d01e973ea0" translate="yes" xml:space="preserve">
          <source>You use Angular for a feature that is not critical for the initial rendering of the app and you can afford a small delay in favor of better initial load performance.</source>
          <target state="translated">アプリの初期レンダリングには重要ではない機能にAngularを使用し、初期ロードのパフォーマンスを向上させるために少しの遅延を許容することができます。</target>
        </trans-unit>
        <trans-unit id="48b70b3001c26daa939ec47f4bdee9711b7ee90d" translate="yes" xml:space="preserve">
          <source>You use Angular for features that are only visible to specific types of users; for example, logged-in users, administrators, or VIP members. You don't need to load Angular until a user is authenticated.</source>
          <target state="translated">ログインユーザーや管理者、VIPメンバーなど、特定のタイプのユーザーだけが見ることができる機能にAngularを使います。ユーザーが認証されるまでAngularをロードする必要はありません。</target>
        </trans-unit>
        <trans-unit id="45bb334756b721ae4a4dbd98cd39a5c479b59c8b" translate="yes" xml:space="preserve">
          <source>You use Angular on specific routes only and you don't need it until/if a user visits such a route.</source>
          <target state="translated">特定のルートでのみAngularを使用しており、ユーザーがそのようなルートにアクセスするまで/しないまでは必要ありません。</target>
        </trans-unit>
        <trans-unit id="4f50f948b449737f6ddcee4ce26fcf4687f678a2" translate="yes" xml:space="preserve">
          <source>You use standard class injection to acquire a parent component whose type you know.</source>
          <target state="translated">標準のクラスインジェクションを使用して、型が分かっている親コンポーネントを取得します。</target>
        </trans-unit>
        <trans-unit id="b5f72985b93e4188f0cbcdb92a0d89899e3615af" translate="yes" xml:space="preserve">
          <source>You use the &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; in the directive's constructor to &lt;a href=&quot;dependency-injection&quot;&gt;inject&lt;/a&gt; a reference to the host DOM element, the element to which you applied &lt;code&gt;appHighlight&lt;/code&gt;.</source>
          <target state="translated">ディレクティブのコンストラクターで &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; を使用して、ホストDOM要素（ &lt;code&gt;appHighlight&lt;/code&gt; を適用した要素）への参照を&lt;a href=&quot;dependency-injection&quot;&gt;挿入&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="935ad0c301af5ae716b4c0996bf9d340bc2147f7" translate="yes" xml:space="preserve">
          <source>You use the Angular CLI to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.</source>
          <target state="translated">Angular CLIを使用してプロジェクトを作成し、アプリケーションやライブラリのコードを生成し、テスト、バンドル、デプロイなどの様々な継続的な開発タスクを実行します。</target>
        </trans-unit>
        <trans-unit id="9a31b9cd2cf7354a59769487cee278533e0135b4" translate="yes" xml:space="preserve">
          <source>You use these CSS classes to define the styles for your control based on its status.</source>
          <target state="translated">これらのCSSクラスを使用して、コントロールのステータスに基づいてスタイルを定義します。</target>
        </trans-unit>
        <trans-unit id="aea706448e6bb9acffcc1b5aac0ec8c6c1c82fd0" translate="yes" xml:space="preserve">
          <source>You use your custom pipe the same way you use built-in pipes.</source>
          <target state="translated">カスタムパイプは、組み込みのパイプと同じように使用します。</target>
        </trans-unit>
        <trans-unit id="38cf14313d23c24ace22b262261968aeac713659" translate="yes" xml:space="preserve">
          <source>You used &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Angular Dependency Injection&lt;/a&gt; to inject it into a component.</source>
          <target state="translated">&lt;a href=&quot;../guide/dependency-injection&quot;&gt;Angular Dependency Injection&lt;/a&gt;を使用してコンポーネントに注入しました。</target>
        </trans-unit>
        <trans-unit id="39c076e4551812dbf918d3d70a079d39ff96a110" translate="yes" xml:space="preserve">
          <source>You used &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display a list.</source>
          <target state="translated">あなたは使用 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を一覧を表示します。</target>
        </trans-unit>
        <trans-unit id="40633f50cc004c91044bf7dfe68cab72722ded0e" translate="yes" xml:space="preserve">
          <source>You used &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; to conditionally include or exclude a block of HTML.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を使用して、HTMLのブロックを条件付きで包含または除外しました。</target>
        </trans-unit>
        <trans-unit id="e7d65c16f601b6489a4a50a9a17886e79a0e4d3e" translate="yes" xml:space="preserve">
          <source>You used RxJS &lt;code&gt;of()&lt;/code&gt; to return an observable of mock heroes (&lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">RxJS &lt;code&gt;of()&lt;/code&gt; を使用して、模擬ヒーローの &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; （Observable &amp;lt;Hero []&amp;gt;）を返しました。</target>
        </trans-unit>
        <trans-unit id="ab9af03c346ddee9fa2bca42d0f9c0587cba73b7" translate="yes" xml:space="preserve">
          <source>You used a &lt;a href=&quot;../guide/property-binding&quot;&gt;property binding&lt;/a&gt; to give the parent &lt;code&gt;HeroesComponent&lt;/code&gt; control over the child &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">あなたは使用&lt;a href=&quot;../guide/property-binding&quot;&gt;結合性&lt;/a&gt;親与える &lt;code&gt;HeroesComponent&lt;/code&gt; の子を制御 &lt;code&gt;HeroDetailComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a5ef9693bbb6008ad25a588183292699167ab0ca" translate="yes" xml:space="preserve">
          <source>You used a &lt;a href=&quot;../guide/template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt; to give the parent &lt;code&gt;HeroesComponent&lt;/code&gt; control over the child &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guide/template-syntax#property-binding&quot;&gt;プロパティバインディング&lt;/a&gt;を使用して、親 &lt;code&gt;HeroesComponent&lt;/code&gt; に子 &lt;code&gt;HeroDetailComponent&lt;/code&gt; を制御できるようにしました。</target>
        </trans-unit>
        <trans-unit id="0c18208d09cd5f84fdd7ede871179047144c1c62" translate="yes" xml:space="preserve">
          <source>You used router link parameters to navigate to the detail view of a user-selected hero.</source>
          <target state="translated">ルータリンクパラメータを使用して、ユーザーが選択したヒーローの詳細ビューに移動しました。</target>
        </trans-unit>
        <trans-unit id="de1234cbe3d1e18d2fd8137084b12579fb8baa51" translate="yes" xml:space="preserve">
          <source>You used the &lt;a href=&quot;../guide/inputs-outputs&quot;&gt;&lt;code&gt;@Input&lt;/code&gt; decorator&lt;/a&gt; to make the &lt;code&gt;hero&lt;/code&gt; property available for binding by the external &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">あなたは使用&lt;a href=&quot;../guide/inputs-outputs&quot;&gt; &lt;code&gt;@Input&lt;/code&gt; のデコレータを&lt;/a&gt;作るために &lt;code&gt;hero&lt;/code&gt; 外部で結合する性質が利用可能 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0c0de9af915985d3f8e0c843049b5a33d34ab82" translate="yes" xml:space="preserve">
          <source>You used the &lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt;&lt;code&gt;@Input&lt;/code&gt; decorator&lt;/a&gt; to make the &lt;code&gt;hero&lt;/code&gt; property available for binding by the external &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt; &lt;code&gt;@Input&lt;/code&gt; デコレーター&lt;/a&gt;を使用して、 &lt;code&gt;hero&lt;/code&gt; プロパティを外部の &lt;code&gt;HeroesComponent&lt;/code&gt; によるバインディングに使用できるようにしました。</target>
        </trans-unit>
        <trans-unit id="f892015ceebcb64bc9519af90cb0e58432b72805" translate="yes" xml:space="preserve">
          <source>You used the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directive in anchor elements.</source>
          <target state="translated">アンカー要素で &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; ディレクティブを使用しました。</target>
        </trans-unit>
        <trans-unit id="fc2b91bf1c636ea89f22f00da5e56ec7656943e0" translate="yes" xml:space="preserve">
          <source>You used the CLI to create a second &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">CLIを使用して、2つ目の &lt;code&gt;HeroesComponent&lt;/code&gt; を作成しました。</target>
        </trans-unit>
        <trans-unit id="96f2b0be883d711ffd9da4d5745adae857f3034f" translate="yes" xml:space="preserve">
          <source>You used the double curly braces of interpolation to display the app title.</source>
          <target state="translated">補間の二重中括弧を使ってアプリタイトルを表示していましたね。</target>
        </trans-unit>
        <trans-unit id="1afd785b64f4cd8f36203c986e2903df5a64c82c" translate="yes" xml:space="preserve">
          <source>You used two-way data binding with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブで双方向データバインディングを使用しました。</target>
        </trans-unit>
        <trans-unit id="00f06a62393293247ad78417c507c31a2e0874a0" translate="yes" xml:space="preserve">
          <source>You will add a heroes search feature to the Dashboard. As the user types a name into a search box, you'll make repeated HTTP requests for heroes filtered by that name. Your goal is to issue only as many requests as necessary.</source>
          <target state="translated">ダッシュボードにヒーロー検索機能を追加します。ユーザーが検索ボックスに名前を入力すると、その名前でフィルタリングされたヒーローに対するHTTPリクエストを繰り返し行います。あなたの目標は、必要な数だけリクエストを発行することです。</target>
        </trans-unit>
        <trans-unit id="e76bcd12737a96430ead16ad0401e242ba2e0a40" translate="yes" xml:space="preserve">
          <source>You will add more tests as this component evolves. Rather than duplicate the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration for each test, you refactor to pull the setup into a Jasmine &lt;code&gt;beforeEach()&lt;/code&gt; and some supporting variables:</source>
          <target state="translated">このコンポーネントが進化するにつれて、さらにテストを追加します。テストごとに &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成を複製するのではなく、セットアップをリファクタリングしてJasmine &lt;code&gt;beforeEach()&lt;/code&gt; といくつかのサポート変数に設定をプルします。</target>
        </trans-unit>
        <trans-unit id="8e8352acb9fadc748d4f1ff09a0ea96135aad49f" translate="yes" xml:space="preserve">
          <source>You will call &lt;code&gt;fixture.detectChanges()&lt;/code&gt; to trigger Angular's change detection. But there is an essential, intermediate step.</source>
          <target state="translated">Angularの変更検出をトリガーするために、 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; を呼び出します。しかし、本質的な中間ステップがあります。</target>
        </trans-unit>
        <trans-unit id="8d029a2c0a356c40e80661c360e5054f39102de4" translate="yes" xml:space="preserve">
          <source>You will find references to and expansions of this app domain in many of the examples used throughout the Angular documentation, but you don't necessarily need to work through this tutorial to understand those examples.</source>
          <target state="translated">Angularのドキュメントで使用されている多くの例の中に、このアプリドメインへの参照や拡張がありますが、必ずしもこのチュートリアルでこれらの例を理解する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ae8cd5c0fc90d6bb6dc64f8ebc9c8d0d45834463" translate="yes" xml:space="preserve">
          <source>You won't change the &lt;code&gt;HeroesComponent&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; but you will change its &lt;em&gt;template&lt;/em&gt;.</source>
          <target state="translated">あなたは変更されません &lt;code&gt;HeroesComponent&lt;/code&gt; の&lt;em&gt;クラスを&lt;/em&gt;いますが、その変更され&lt;em&gt;たテンプレートを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="aa6fceed8ce215ef34228b7e6b33c0abe56c7e10" translate="yes" xml:space="preserve">
          <source>You would rarely, if ever, implement all of the interfaces like this. The peek-a-boo exists to show how Angular calls the hooks in the expected order.</source>
          <target state="translated">このように全てのインターフェイスを実装することは滅多にないでしょう。peek-a-booはAngularがどのようにフックを呼び出すかを予想される順番で示すために存在しています。</target>
        </trans-unit>
        <trans-unit id="27f11dd84d5958c6e81d5b7da1af0fadfaff6884" translate="yes" xml:space="preserve">
          <source>You wouldn't want the router to remove the current &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance from the DOM only to re-create it for the next &lt;code&gt;id&lt;/code&gt; as this would re-render the view. For better UX, the router re-uses the same component instance and updates the parameter.</source>
          <target state="translated">ルーターが現在の &lt;code&gt;HeroDetailComponent&lt;/code&gt; インスタンスをDOMから削除して、次の &lt;code&gt;id&lt;/code&gt; 用に再作成するだけでは、ビューが再レンダリングされるため、望ましくありません。UXを向上させるために、ルーターは同じコンポーネントインスタンスを再利用し、パラメーターを更新します。</target>
        </trans-unit>
        <trans-unit id="9bbf74fccab73b0e21280d1410fe663ce65db41b" translate="yes" xml:space="preserve">
          <source>You write metadata in a &lt;em&gt;subset&lt;/em&gt; of TypeScript that must conform to the following general constraints:</source>
          <target state="translated">TypeScriptの&lt;em&gt;サブセット&lt;/em&gt;でメタデータを記述します。これは、次の一般的な制約に準拠する必要があります。</target>
        </trans-unit>
        <trans-unit id="7555df7eda1680e7d295070ecaf56e685aee8779" translate="yes" xml:space="preserve">
          <source>You'd already defined a template reference variable, &lt;code&gt;#heroForm&lt;/code&gt;, and initialized it with the value &quot;ngForm&quot;. Now, use that variable to access the form with the Submit button.</source>
          <target state="translated">テンプレート参照変数 &lt;code&gt;#heroForm&lt;/code&gt; をすでに定義し、値 &quot;ngForm&quot;で初期化しました。次に、その変数を使用して、[送信]ボタンでフォームにアクセスします。</target>
        </trans-unit>
        <trans-unit id="562fd742221c12785061969f6464c3338baebdef" translate="yes" xml:space="preserve">
          <source>You'd also get this error if you imported &lt;code&gt;someTemplate&lt;/code&gt; from some other module and neglected to initialize it there.</source>
          <target state="translated">他のモジュールから &lt;code&gt;someTemplate&lt;/code&gt; をインポートし、そこでの初期化を怠った場合にも、このエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="9cc1a5931ad6e95b75178ec43e7a0f260898fd98" translate="yes" xml:space="preserve">
          <source>You'd get this error:</source>
          <target state="translated">こんなエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="0c94c6de276c53e1e07b077a58839a04b8d0ad21" translate="yes" xml:space="preserve">
          <source>You'll acquire the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; contents with a &lt;a href=&quot;../api/core/templateref&quot;&gt;&lt;code&gt;TemplateRef&lt;/code&gt;&lt;/a&gt; and access the &lt;em&gt;view container&lt;/em&gt; through a &lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;code&gt;ViewContainerRef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/core/templateref&quot;&gt; &lt;code&gt;TemplateRef&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; のコンテンツを取得し、&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt; &lt;code&gt;ViewContainerRef&lt;/code&gt; を&lt;/a&gt;介して&lt;em&gt;ビューコンテナに&lt;/em&gt;アクセスし&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6580dab0f78cc1239efbe404bff535c4bab545df" translate="yes" xml:space="preserve">
          <source>You'll add a &lt;code&gt;select&lt;/code&gt; to the form and bind the options to the &lt;code&gt;powers&lt;/code&gt; list using &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, a technique seen previously in the &lt;a href=&quot;displaying-data&quot;&gt;Displaying Data&lt;/a&gt; page.</source>
          <target state="translated">フォームに &lt;code&gt;select&lt;/code&gt; を追加し、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を使用してオプションを &lt;code&gt;powers&lt;/code&gt; リストにバインドします。これは、以前に&lt;a href=&quot;displaying-data&quot;&gt;データ&lt;/a&gt;の表示ページで見られた手法です。</target>
        </trans-unit>
        <trans-unit id="445582d6ff7ea9cb99eb7b91f8cc72406f0b3c41" translate="yes" xml:space="preserve">
          <source>You'll also start to gradually phase out the Bower package manager in favor of NPM, installing all new dependencies using NPM, and eventually removing Bower from the project.</source>
          <target state="translated">また、Bowerのパッケージマネージャーを徐々にNPMに置き換えていき、NPMを使って新しい依存関係をすべてインストールし、最終的にはプロジェクトからBowerを削除していくことになります。</target>
        </trans-unit>
        <trans-unit id="813064eb15f45d8306cdfbf120535d64ccf6cd60" translate="yes" xml:space="preserve">
          <source>You'll be able to re-implement &lt;code&gt;getHero()&lt;/code&gt; as a real &lt;code&gt;Http&lt;/code&gt; request without having to change the &lt;code&gt;HeroDetailComponent&lt;/code&gt; that calls it.</source>
          <target state="translated">&lt;code&gt;getHero()&lt;/code&gt; は、それを呼び出す &lt;code&gt;HeroDetailComponent&lt;/code&gt; を変更する必要なく、実際の &lt;code&gt;Http&lt;/code&gt; リクエストとして再実装できます。</target>
        </trans-unit>
        <trans-unit id="0d7743b6d6cb273bd51265b0580c7350d42fd379" translate="yes" xml:space="preserve">
          <source>You'll bind the form's overall validity via the &lt;code&gt;heroForm&lt;/code&gt; variable to the button's &lt;code&gt;disabled&lt;/code&gt; property using an event binding. Here's the code:</source>
          <target state="translated">イベントバインディングを使用して、 &lt;code&gt;heroForm&lt;/code&gt; 変数を介してフォームの全体的な有効性をボタンの &lt;code&gt;disabled&lt;/code&gt; プロパティにバインドします。これがコードです：</target>
        </trans-unit>
        <trans-unit id="db6e4afb7f2536d6549887929a0b6f38bb6da350" translate="yes" xml:space="preserve">
          <source>You'll build this form in small steps:</source>
          <target state="translated">このフォームを少しずつ構築していきます。</target>
        </trans-unit>
        <trans-unit id="9497ba807b00d5e3c6c9bd8ea6b9e52ff20b7472" translate="yes" xml:space="preserve">
          <source>You'll find many such files among the samples in the Angular documentation.</source>
          <target state="translated">このようなファイルは Angular ドキュメントのサンプルの中にたくさんあります。</target>
        </trans-unit>
        <trans-unit id="23af3212b382ce196aa58af4d091fd663c737886" translate="yes" xml:space="preserve">
          <source>You'll find the implementation of the shell &lt;code&gt;AppComponent&lt;/code&gt; distributed over three files:</source>
          <target state="translated">3つのファイルに分散されたシェル &lt;code&gt;AppComponent&lt;/code&gt; の実装が見つかります。</target>
        </trans-unit>
        <trans-unit id="c9fb1216278f2c02c28b4bfe3ecd5240c2cdc713" translate="yes" xml:space="preserve">
          <source>You'll get an error if you reference it in the component constructor, which the compiler must statically analyze.</source>
          <target state="translated">コンポーネントのコンストラクタで参照するとエラーが発生しますが、これはコンパイラが静的に解析しなければなりません。</target>
        </trans-unit>
        <trans-unit id="8125f4e3dcd2f9f0130029b41f4b772275653e90" translate="yes" xml:space="preserve">
          <source>You'll have to adjust to that difference in &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; でその違いに調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="498286be1a5676455a92a1b5d4d526dc13943bff" translate="yes" xml:space="preserve">
          <source>You'll have to fix the private stylesheet (&lt;code&gt;heroes.component.css&lt;/code&gt;) to make the list look as it did before. Revised styles are in the &lt;a href=&quot;toh-pt5#heroescomponent&quot;&gt;final code review&lt;/a&gt; at the bottom of this guide.</source>
          <target state="translated">以前と同じようにリストを表示するには、プライベートスタイルシート（ &lt;code&gt;heroes.component.css&lt;/code&gt; ）を修正する必要があります。改訂されたスタイルは、このガイドの&lt;a href=&quot;toh-pt5#heroescomponent&quot;&gt;最後&lt;/a&gt;にある最終的なコードレビューにあります。</target>
        </trans-unit>
        <trans-unit id="75afdd7cdeeb665e928dd924acfed8af30df1379" translate="yes" xml:space="preserve">
          <source>You'll have to manually trigger the change detection to update the template.</source>
          <target state="translated">テンプレートを更新するには、手動で変更検出をトリガーする必要があります。</target>
        </trans-unit>
        <trans-unit id="930b75e78330140fb561271aa3439eed8b876b62" translate="yes" xml:space="preserve">
          <source>You'll have to rename the directive's &lt;code&gt;highlightColor&lt;/code&gt; property to &lt;code&gt;appHighlight&lt;/code&gt; because that's now the color property binding name.</source>
          <target state="translated">ディレクティブの &lt;code&gt;highlightColor&lt;/code&gt; プロパティの名前を &lt;code&gt;appHighlight&lt;/code&gt; に変更する必要があります。これが、今はcolorプロパティのバインディング名になっているためです。</target>
        </trans-unit>
        <trans-unit id="93ca6476b40bb9e20641f458375e4e5de27e9c44" translate="yes" xml:space="preserve">
          <source>You'll implement this feature in a moment by including the viewed hero's &lt;code&gt;id&lt;/code&gt; in the URL as an optional parameter when returning from the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; から戻るときに、表示されたヒーローの &lt;code&gt;id&lt;/code&gt; をオプションのパラメーターとしてURLに含めることにより、この機能をすぐに実装します。</target>
        </trans-unit>
        <trans-unit id="ddbd7cc44d40336bddf1a242a40b58809b6ec25f" translate="yes" xml:space="preserve">
          <source>You'll learn about more options in the &lt;a href=&quot;router#browser-url-styles&quot;&gt;details below&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;router#browser-url-styles&quot;&gt;以下&lt;/a&gt;の詳細で、より多くのオプションについて学びます。</target>
        </trans-unit>
        <trans-unit id="b6b066a9f60bf0d9d216a1acfaee4b183d81590a" translate="yes" xml:space="preserve">
          <source>You'll learn about styles for live examples in the &lt;a href=&quot;docs-style-guide#live-examples&quot;&gt;section below&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;docs-style-guide#live-examples&quot;&gt;以下&lt;/a&gt;のセクションで、ライブサンプルのスタイルについて学習します。</target>
        </trans-unit>
        <trans-unit id="26ac91a7423d8cf9c25747073a3dce6052d32f29" translate="yes" xml:space="preserve">
          <source>You'll learn about these advanced test features below. For now, you can radically reduce this test file to a more manageable size:</source>
          <target state="translated">これらの高度なテスト機能については、以下で説明します。今のところ、このテストファイルを根本的に減らして、より管理しやすいサイズにすることができます。</target>
        </trans-unit>
        <trans-unit id="69dea9b6a28c19946d4d5d3dd39796d9d7e7f429" translate="yes" xml:space="preserve">
          <source>You'll learn enough Angular to get started and gain confidence that Angular can do whatever you need it to do.</source>
          <target state="translated">アンギュラーを始めるのに十分な知識を身につけ、アンギュラーなら何でもできるという自信を得ることができます。</target>
        </trans-unit>
        <trans-unit id="04e78cbe6aee8e2796967c1ba5d2f49afd48a6c3" translate="yes" xml:space="preserve">
          <source>You'll learn in this guide that the &lt;a href=&quot;structural-directives#asterisk&quot;&gt;asterisk (*) is a convenience notation&lt;/a&gt; and the string is a &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;microsyntax&lt;/em&gt;&lt;/a&gt; rather than the usual &lt;a href=&quot;interpolation#template-expressions&quot;&gt;template expression&lt;/a&gt;. Angular desugars this notation into a marked-up &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; that surrounds the host element and its descendants. Each structural directive does something different with that template.</source>
          <target state="translated">このガイドでは、&lt;a href=&quot;structural-directives#asterisk&quot;&gt;アスタリスク（*）が便利な表記で&lt;/a&gt;あり、文字列が通常の&lt;a href=&quot;interpolation#template-expressions&quot;&gt;テンプレート式&lt;/a&gt;ではなく&lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;マイクロシンタックス&lt;/em&gt;&lt;/a&gt;であることを学習します。Angularは、この表記を、ホスト要素とその子孫を囲むマークアップされた &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; に脱糖します。各構造ディレクティブは、そのテンプレートで異なることを行います。</target>
        </trans-unit>
        <trans-unit id="941342b25e1eb255693f997db764f6f2611f8ed7" translate="yes" xml:space="preserve">
          <source>You'll learn in this guide that the &lt;a href=&quot;structural-directives#asterisk&quot;&gt;asterisk (*) is a convenience notation&lt;/a&gt; and the string is a &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;microsyntax&lt;/em&gt;&lt;/a&gt; rather than the usual &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expression&lt;/a&gt;. Angular desugars this notation into a marked-up &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; that surrounds the host element and its descendents. Each structural directive does something different with that template.</source>
          <target state="translated">このガイドでは、&lt;a href=&quot;structural-directives#asterisk&quot;&gt;アスタリスク（*）は便利な表記法で&lt;/a&gt;あり、文字列は通常の&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式&lt;/a&gt;ではなく&lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;マイクロ構文&lt;/em&gt;&lt;/a&gt;であることを&lt;em&gt;学び&lt;/em&gt;ます。Angularは、この表記をホスト要素とその子孫を囲むマークアップされた &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; に変換します。各構造ディレクティブは、そのテンプレートで異なることを行います。</target>
        </trans-unit>
        <trans-unit id="859b6f9edb818f839808ecc27a3c14a4ac704a82" translate="yes" xml:space="preserve">
          <source>You'll learn to build a template-driven form that looks like this:</source>
          <target state="translated">このようなテンプレート駆動型のフォームを構築する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="16bea36a4314d9a700d75612239cf381fc3ee2cb" translate="yes" xml:space="preserve">
          <source>You'll most likely get a &lt;em&gt;404 - Page Not Found&lt;/em&gt; response from the server for any address other than &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;/index.html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; または &lt;code&gt;/index.html&lt;/code&gt; 以外のアドレスについては、サーバーから&lt;em&gt;404-Page Not Found&lt;/em&gt;応答が返される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c0578e2052fdde2941cb348d9e79ebd87143751a" translate="yes" xml:space="preserve">
          <source>You'll need some heroes to display.</source>
          <target state="translated">表示するにはヒーローが必要だな</target>
        </trans-unit>
        <trans-unit id="fb80c43c8e2ba4e95e0da73253b26425fa7a7362" translate="yes" xml:space="preserve">
          <source>You'll need to use the generated &lt;code&gt;AppModuleFactory&lt;/code&gt;, instead of the original &lt;code&gt;AppModule&lt;/code&gt; to bootstrap the hybrid app:</source>
          <target state="translated">ハイブリッドアプリをブートストラップするには、元の &lt;code&gt;AppModule&lt;/code&gt; ではなく、生成された &lt;code&gt;AppModuleFactory&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5b27043f30baf6f6a944d5b2512d688a8d1d4aff" translate="yes" xml:space="preserve">
          <source>You'll notice two different types of redirects. The first change is from &lt;code&gt;/heroes&lt;/code&gt; to &lt;code&gt;/superheroes&lt;/code&gt; without any parameters. This is a straightforward redirect, unlike the change from &lt;code&gt;/hero/:id&lt;/code&gt; to &lt;code&gt;/superhero/:id&lt;/code&gt;, which includes the &lt;code&gt;:id&lt;/code&gt; route parameter. Router redirects also use powerful pattern matching, so the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; inspects the URL and replaces route parameters in the &lt;code&gt;path&lt;/code&gt; with their appropriate destination. Previously, you navigated to a URL such as &lt;code&gt;/hero/15&lt;/code&gt; with a route parameter &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;15&lt;/code&gt;.</source>
          <target state="translated">2つの異なるタイプのリダイレクトに気付くでしょう。最初の変更は、パラメータなしの &lt;code&gt;/heroes&lt;/code&gt; から &lt;code&gt;/superheroes&lt;/code&gt; への変更です。 &lt;code&gt;/hero/:id&lt;/code&gt; から &lt;code&gt;/superhero/:id&lt;/code&gt; への変更とは異なり、これは簡単なリダイレクトです。これには &lt;code&gt;:id&lt;/code&gt; ルートパラメータが含まれます。ルーターリダイレクトも強力なパターンマッチングを使用するため、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; はURLを検査し、 &lt;code&gt;path&lt;/code&gt; 内のルートパラメーターを適切な宛先に置き換えます。以前は、ルートパラメータ &lt;code&gt;id&lt;/code&gt; が &lt;code&gt;15&lt;/code&gt; の &lt;code&gt;/hero/15&lt;/code&gt; などのURLに移動しました。</target>
        </trans-unit>
        <trans-unit id="13f9ec443fed7be8dc7ac1d38243046de27749d3" translate="yes" xml:space="preserve">
          <source>You'll often display multiple snippets from different fragments within the same file. You distinguish among them by giving each fragment its own &lt;em&gt;#docregion name&lt;/em&gt; as follows.</source>
          <target state="translated">多くの場合、同じファイル内の異なるフラグメントからの複数のスニペットを表示します。次のように、各フラグメントに独自の&lt;em&gt;#docregion名&lt;/em&gt;を&lt;em&gt;付ける&lt;/em&gt;ことにより、それらを区別します。</target>
        </trans-unit>
        <trans-unit id="c517902471f04d952f3a448dbd5291cbf5fc9bcd" translate="yes" xml:space="preserve">
          <source>You'll set it in &lt;a href=&quot;toh-pt6#search-pipe&quot;&gt;&lt;code&gt;ngOnInit()&lt;/code&gt;&lt;/a&gt;. Before you do, focus on the definition of &lt;code&gt;searchTerms&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt6#search-pipe&quot;&gt; &lt;code&gt;ngOnInit()&lt;/code&gt; &lt;/a&gt;で設定します。その前に、 &lt;code&gt;searchTerms&lt;/code&gt; の定義に注目してください。</target>
        </trans-unit>
        <trans-unit id="6dd0b2fb97b5e772840b87ba903d543302c0242f" translate="yes" xml:space="preserve">
          <source>You'll take a different approach with &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; because</source>
          <target state="translated">あなたはとは異なるアプローチ取るよ &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; をするので</target>
        </trans-unit>
        <trans-unit id="e98ce50bd21ffc4625e6bffb4b1df3b7cd73f41f" translate="yes" xml:space="preserve">
          <source>You'll use mock crises instead of mock heroes:</source>
          <target state="translated">モックヒーローの代わりにモッククライシスを使えよ</target>
        </trans-unit>
        <trans-unit id="ffbb00a61db8b56610ad6cc18128fe650b41da70" translate="yes" xml:space="preserve">
          <source>You'll write a sequence of tests that inspect the value of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element that wraps the &lt;em&gt;title&lt;/em&gt; property interpolation binding.</source>
          <target state="translated">&lt;em&gt;タイトル&lt;/em&gt;プロパティの補間バインディングをラップする &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 要素の値を検査する一連のテストを記述します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="45abac03594861f44c9d4bd8bec7c53301ff5f7a" translate="yes" xml:space="preserve">
          <source>You're already part of the way there. By organizing the application into modules&amp;mdash;&lt;code&gt;AppModule&lt;/code&gt;, &lt;code&gt;HeroesModule&lt;/code&gt;, &lt;code&gt;AdminModule&lt;/code&gt; and &lt;code&gt;CrisisCenterModule&lt;/code&gt;&amp;mdash;you have natural candidates for lazy loading.</source>
          <target state="translated">あなたはすでにそこへの道の一部です。アプリケーションをモジュール（ &lt;code&gt;AppModule&lt;/code&gt; 、 &lt;code&gt;HeroesModule&lt;/code&gt; 、 &lt;code&gt;AdminModule&lt;/code&gt; 、および &lt;code&gt;CrisisCenterModule&lt;/code&gt; )に編成することで、遅延読み込みの自然な候補ができます。</target>
        </trans-unit>
        <trans-unit id="8bb1ac36e3e8e7549f64e80c697df14fc2d35b19" translate="yes" xml:space="preserve">
          <source>You're already protecting the &lt;code&gt;AdminModule&lt;/code&gt; with a &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard that prevents unauthorized users from accessing the admin feature area. It redirects to the login page if the user is not authorized.</source>
          <target state="translated">許可されていないユーザーが管理機能領域にアクセスするのを防ぐ &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; ガードで &lt;code&gt;AdminModule&lt;/code&gt; をすでに保護しています。ユーザーが認証されていない場合は、ログインページにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="b1fb8ba175245188998c09b27fdae81f6979ece3" translate="yes" xml:space="preserve">
          <source>You're at the end of your journey, and you've accomplished a lot.</source>
          <target state="translated">旅の終着点であり、多くのことを成し遂げたのですね。</target>
        </trans-unit>
        <trans-unit id="fcdc6969d9ea878ef004718261abe103bf08fa3e" translate="yes" xml:space="preserve">
          <source>You're navigating to the &lt;code&gt;CrisisListComponent&lt;/code&gt;, whose route path is &lt;code&gt;/&lt;/code&gt;, but you don't need to explicitly add the slash.</source>
          <target state="translated">ルートパスが &lt;code&gt;/&lt;/code&gt; である &lt;code&gt;CrisisListComponent&lt;/code&gt; に移動していますが、スラッシュを明示的に追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="678daa8e660f65ecc5e7ffb4a01c5b971a058200" translate="yes" xml:space="preserve">
          <source>You're not actually doing that here. But to target a named outlet, you must use the richer, more verbose syntax.</source>
          <target state="translated">ここでは実際にはそんなことはしていません。しかし、名前のついたアウトレットをターゲットにするには、より豊かで冗長な構文を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="36aae90a45d77ae376e72371259fc544bb1498dc" translate="yes" xml:space="preserve">
          <source>You're not so lucky when testing the error path. Although the service spy will return an error synchronously, the component method calls &lt;code&gt;setTimeout()&lt;/code&gt;. The test must wait at least one full turn of the JavaScript engine before the value becomes available. The test must become &lt;em&gt;asynchronous&lt;/em&gt;.</source>
          <target state="translated">エラーパスをテストするとき、あなたはそれほど幸運ではありません。サービススパイは同期的にエラーを返しますが、コンポーネントメソッドは &lt;code&gt;setTimeout()&lt;/code&gt; を呼び出します。テストでは、値が使用可能になる前に、JavaScriptエンジンが完全に1ターン待機する必要があります。テストは&lt;em&gt;非同期に&lt;/em&gt;なる必要があり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0a7c935f08597b449cb400b0966fc33b68c887f9" translate="yes" xml:space="preserve">
          <source>You're using Angular &lt;a href=&quot;../guide/interpolation&quot;&gt;interpolation binding&lt;/a&gt; within the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater to insert the current iteration's &lt;code&gt;hero.id&lt;/code&gt; into each &lt;a href=&quot;toh-pt5#routerlink&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;リピーター内でAngular&lt;a href=&quot;../guide/interpolation&quot;&gt;補間バインディング&lt;/a&gt;を使用して、現在の反復の &lt;code&gt;hero.id&lt;/code&gt; を各&lt;a href=&quot;toh-pt5#routerlink&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; &lt;/a&gt;に挿入しています。</target>
        </trans-unit>
        <trans-unit id="36456f173f02008bfaef334a8ec23d26cc7bac08" translate="yes" xml:space="preserve">
          <source>You're using Angular &lt;a href=&quot;../guide/template-syntax#interpolation&quot;&gt;interpolation binding&lt;/a&gt; within the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater to insert the current iteration's &lt;code&gt;hero.id&lt;/code&gt; into each &lt;a href=&quot;toh-pt5#routerlink&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;リピーター内でAngular &lt;a href=&quot;../guide/template-syntax#interpolation&quot;&gt;補間バインディング&lt;/a&gt;を使用して、現在の反復の &lt;code&gt;hero.id&lt;/code&gt; を各&lt;a href=&quot;toh-pt5#routerlink&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; &lt;/a&gt;に挿入しています。</target>
        </trans-unit>
        <trans-unit id="a346c290f3597d2dc5fe0622ab8d06657b9b9c7d" translate="yes" xml:space="preserve">
          <source>You're using the property binding syntax around &lt;code&gt;ng-class&lt;/code&gt;. Though Angular does have &lt;a href=&quot;built-in-directives&quot;&gt;a very similar &lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; as AngularJS does, its value is not magically evaluated as an expression. In Angular, you always specify in the template when an attribute's value is a property expression, as opposed to a literal string.</source>
          <target state="translated">&lt;code&gt;ng-class&lt;/code&gt; の周りにプロパティバインディング構文を使用しています。AngularにはAngularJSと&lt;a href=&quot;built-in-directives&quot;&gt;非常によく似た &lt;code&gt;ngClass&lt;/code&gt; &lt;/a&gt;がありますが、その値は魔法のように式として評価されません。Angularでは、属性の値がリテラル文字列ではなくプロパティ式である場合は、常にテンプレートで指定します。</target>
        </trans-unit>
        <trans-unit id="dfe3e9a739928bed07b9dd2c4b2994be9c2fa829" translate="yes" xml:space="preserve">
          <source>You're using the property binding syntax around &lt;code&gt;ng-class&lt;/code&gt;. Though Angular does have &lt;a href=&quot;template-syntax#directives&quot;&gt;a very similar &lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; as AngularJS does, its value is not magically evaluated as an expression. In Angular, you always specify in the template when an attribute's value is a property expression, as opposed to a literal string.</source>
          <target state="translated">&lt;code&gt;ng-class&lt;/code&gt; のプロパティバインディング構文を使用しています。AngularにはAngularJSと&lt;a href=&quot;template-syntax#directives&quot;&gt;非常によく似た &lt;code&gt;ngClass&lt;/code&gt; &lt;/a&gt;がありますが、その値は魔法のように式として評価されません。Angularでは、リテラル文字列ではなく、属性の値がプロパティ式である場合は常にテンプレートで指定します。</target>
        </trans-unit>
        <trans-unit id="4a0ae36a9db9219558a159a26c4a0bda9d430916" translate="yes" xml:space="preserve">
          <source>You've already injected the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; that you need to compose the relative navigation path.</source>
          <target state="translated">相対ナビゲーションパスを構成するために必要な &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を既に注入しています。</target>
        </trans-unit>
        <trans-unit id="5adc351892de2e9a2ad7fc95a03dc7eb896158fb" translate="yes" xml:space="preserve">
          <source>You've bound template HTML to component properties before and never used &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;. What's different?</source>
          <target state="translated">これまでにテンプレートHTMLをコンポーネントプロパティにバインドし、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 使用していません。何が違うの？</target>
        </trans-unit>
        <trans-unit id="778c9920db4e19ebc717c4b893e1eda04b89946f" translate="yes" xml:space="preserve">
          <source>You've covered a lot of ground in this guide and the application is too big to reprint here. Please visit the  where you can download the final source code.</source>
          <target state="translated">このガイドでは多くの分野をカバーしていますが、アプリケーションが大きすぎてここに転載することはできません。最終的なソースコードはこちらからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="c16367f42bd93bb09c9bf31f23c4438a48c300ec" translate="yes" xml:space="preserve">
          <source>You've created two routes in the app so far, one to &lt;code&gt;/crisis-center&lt;/code&gt; and the other to &lt;code&gt;/heroes&lt;/code&gt;. Any other URL causes the router to throw an error and crash the app.</source>
          <target state="translated">これまでにアプリで2つのルートを作成しました。1つは &lt;code&gt;/crisis-center&lt;/code&gt; へ、もう1つは &lt;code&gt;/heroes&lt;/code&gt; です。他のURLを使用すると、ルーターがエラーをスローし、アプリをクラッシュさせます。</target>
        </trans-unit>
        <trans-unit id="9c0af5d049a686d3e4815bf6d173a777fc7a11e7" translate="yes" xml:space="preserve">
          <source>You've defined a class with a constructor and two properties: &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">コンストラクタと2つのプロパティ &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; でクラスを定義しました。</target>
        </trans-unit>
        <trans-unit id="2730b5827cec90c5cd2cf599589fae9a7d6fe4c7" translate="yes" xml:space="preserve">
          <source>You've got a very basic navigating app, one that can switch between two views when the user clicks a link.</source>
          <target state="translated">ユーザーがリンクをクリックしたときに2つのビューを切り替えることができる、非常に基本的なナビゲーションアプリを持っています。</target>
        </trans-unit>
        <trans-unit id="4704f86f9e7dcf74dafad6a5b772ebd708b17a22" translate="yes" xml:space="preserve">
          <source>You've learned how to do the following:</source>
          <target state="translated">の方法を学んでいただきました。</target>
        </trans-unit>
        <trans-unit id="ce126987f8593e8603341979d69ceaf5e44f1841" translate="yes" xml:space="preserve">
          <source>You've learned how to load modules on-demand. You can also load modules asynchronously with &lt;em&gt;preloading&lt;/em&gt;.</source>
          <target state="translated">モジュールをオンデマンドでロードする方法を学びました。また、&lt;em&gt;プリロードを使用して&lt;/em&gt;モジュールを非同期にロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="ffb8766c68361f41672403f2e7a1f276b72d3ddd" translate="yes" xml:space="preserve">
          <source>You've learned the basics about the main building blocks of an Angular application. The following diagram shows how these basic pieces are related.</source>
          <target state="translated">これでAngularアプリケーションの主な構成要素についての基本的なことがわかりました。次の図は、これらの基本的な部分がどのように関連しているかを示しています。</target>
        </trans-unit>
        <trans-unit id="7aaf5f231aee4f52c87de77d7e68e688a3cd6527" translate="yes" xml:space="preserve">
          <source>You've removed the &lt;code&gt;$ctrl.&lt;/code&gt; prefix from all expressions.</source>
          <target state="translated">&lt;code&gt;$ctrl.&lt;/code&gt; を削除しました。すべての式の接頭辞。</target>
        </trans-unit>
        <trans-unit id="70c8c2169715c36cb9b86718e83d512a6e64ed3f" translate="yes" xml:space="preserve">
          <source>You've replaced &lt;code&gt;ng-click&lt;/code&gt; with an event binding for the standard &lt;code&gt;click&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-click&lt;/code&gt; を標準の &lt;code&gt;click&lt;/code&gt; のイベントバインディングに置き換えました。</target>
        </trans-unit>
        <trans-unit id="fafd226bf7d4cb70ec74941efa1e32ef845a5293" translate="yes" xml:space="preserve">
          <source>You've replaced &lt;code&gt;ng-repeat&lt;/code&gt;s with &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;ng-repeat&lt;/code&gt; を &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; に置き換えました。</target>
        </trans-unit>
        <trans-unit id="6f8947e5ef1b8c3889320df2d4af8e55a46d5742" translate="yes" xml:space="preserve">
          <source>You've replaced &lt;code&gt;ng-src&lt;/code&gt; with property bindings for the standard &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;ng-src&lt;/code&gt; を標準の &lt;code&gt;src&lt;/code&gt; プロパティのプロパティバインディングに置き換えました。</target>
        </trans-unit>
        <trans-unit id="8ee085f1a9062b00575e6e1bacb40a8c99553c00" translate="yes" xml:space="preserve">
          <source>You've seen how to add a delay between each successive animation. But you may also want to configure animations that happen in parallel. For example, you may want to animate two CSS properties of the same element but use a different &lt;code&gt;easing&lt;/code&gt; function for each one. For this, you can use the animation &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">連続する各アニメーションの間に遅延を追加する方法を見てきました。ただし、並行して発生するアニメーションを構成することもできます。たとえば、同じ要素の2つのCSSプロパティをアニメーション化したいが、それぞれに異なる &lt;code&gt;easing&lt;/code&gt; 関数を使用したい場合があります。これには、アニメーションの&lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="1d2bc087158803233fbe64632f1fab291cd90121" translate="yes" xml:space="preserve">
          <source>You've seen how to navigate using the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. Now you'll learn the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブを使用してナビゲートする方法を見てきました。次のことを学びます。</target>
        </trans-unit>
        <trans-unit id="fc0dff14cfe07a42b753e6490c496873d900e361" translate="yes" xml:space="preserve">
          <source>You've seen it with an alias:</source>
          <target state="translated">別名で見たことあるでしょ。</target>
        </trans-unit>
        <trans-unit id="d0da487362a8fa2329dbef2a57f6632bf806deb7" translate="yes" xml:space="preserve">
          <source>You've setup the routes for navigating around your application and used navigation imperatively and declaratively. But like any application, requirements change over time. You've setup links and navigation to &lt;code&gt;/heroes&lt;/code&gt; and &lt;code&gt;/hero/:id&lt;/code&gt; from the &lt;code&gt;HeroListComponent&lt;/code&gt; and &lt;code&gt;HeroDetailComponent&lt;/code&gt; components. If there were a requirement that links to &lt;code&gt;heroes&lt;/code&gt; become &lt;code&gt;superheroes&lt;/code&gt;, you would still want the previous URLs to navigate correctly. You also don't want to update every link in your application, so redirects makes refactoring routes trivial.</source>
          <target state="translated">アプリケーション内を移動するためのルートを設定し、命令型および宣言型のナビゲーションを使用しました。ただし、他のアプリケーションと同様に、要件は時間とともに変化します。 &lt;code&gt;HeroListComponent&lt;/code&gt; および &lt;code&gt;HeroDetailComponent&lt;/code&gt; コンポーネントから &lt;code&gt;/heroes&lt;/code&gt; および &lt;code&gt;/hero/:id&lt;/code&gt; へのリンクとナビゲーションを設定しました。 &lt;code&gt;heroes&lt;/code&gt; へのリンクが &lt;code&gt;superheroes&lt;/code&gt; ヒーローになるという要件があった場合でも、以前のURLを正しくナビゲートする必要があります。また、アプリケーション内のすべてのリンクを更新する必要がないため、リダイレクトによってルートのリファクタリングが簡単になります。</target>
        </trans-unit>
        <trans-unit id="74ed5cfd265d3c5e296c49d293be5ef8a2793486" translate="yes" xml:space="preserve">
          <source>You've setup the routes for navigating around your application. You've used navigation imperatively and declaratively to many different routes. But like any application, requirements change over time. You've setup links and navigation to &lt;code&gt;/heroes&lt;/code&gt; and &lt;code&gt;/hero/:id&lt;/code&gt; from the &lt;code&gt;HeroListComponent&lt;/code&gt; and &lt;code&gt;HeroDetailComponent&lt;/code&gt; components. If there was a requirement that links to &lt;code&gt;heroes&lt;/code&gt; become &lt;code&gt;superheroes&lt;/code&gt;, you still want the previous URLs to navigate correctly. You also don't want to go and update every link in your application, so redirects makes refactoring routes trivial.</source>
          <target state="translated">アプリケーション内を移動するためのルートを設定しました。あなたは多くの異なるルートに対して命令的かつ宣言的にナビゲーションを使用しました。しかし、他のアプリケーションと同様に、要件は時間とともに変化します。これで、 &lt;code&gt;HeroListComponent&lt;/code&gt; および &lt;code&gt;HeroDetailComponent&lt;/code&gt; コンポーネントから &lt;code&gt;/heroes&lt;/code&gt; および &lt;code&gt;/hero/:id&lt;/code&gt; へのリンクとナビゲーションが設定されました。 &lt;code&gt;heroes&lt;/code&gt; へのリンクが &lt;code&gt;superheroes&lt;/code&gt; ヒーローになるという要件があった場合でも、以前のURLを正しくナビゲートする必要があります。また、アプリケーションのすべてのリンクに移動して更新する必要がないため、リダイレクトによってルートのリファクタリングが簡単になります。</target>
        </trans-unit>
        <trans-unit id="f39c084e8000187b1413e7f10a34a4b001f969f9" translate="yes" xml:space="preserve">
          <source>You've swapped &lt;code&gt;of()&lt;/code&gt; for &lt;code&gt;http.get()&lt;/code&gt; and the app keeps working without any other changes because both functions return an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;of()&lt;/code&gt; を &lt;code&gt;http.get()&lt;/code&gt; に交換しました。両方の関数が &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; 返すため、アプリは他の変更なしで機能し続けます。</target>
        </trans-unit>
        <trans-unit id="0b364c5e2546321a1a66dff712db0e998af77459" translate="yes" xml:space="preserve">
          <source>You've wrapped the whole template in an &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; that causes it only to be rendered when there is a phone present. You need this because when the component first loads, you don't have &lt;code&gt;phone&lt;/code&gt; yet and the expressions will refer to a non-existing value. Unlike in AngularJS, Angular expressions do not fail silently when you try to refer to properties on undefined objects. You need to be explicit about cases where this is expected.</source>
          <target state="translated">テンプレート全体を &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; でラップすると、電話が存在する場合にのみテンプレートがレンダリングされます。これが必要なのは、コンポーネントが最初にロードされたとき、まだ &lt;code&gt;phone&lt;/code&gt; がなく、式が存在しない値を参照するためです。AngularJSとは異なり、未定義のオブジェクトのプロパティを参照しようとしても、Angular式は何のメッセージもなく失敗しません。これが予想されるケースについて明示する必要があります。</target>
        </trans-unit>
        <trans-unit id="cce4065fd0594082094edad6e456d3f7362c9fca" translate="yes" xml:space="preserve">
          <source>You've written a two element array when specifying a route parameter like this:</source>
          <target state="translated">こんな感じでルートパラメータを指定するときに2要素の配列を書いていますね。</target>
        </trans-unit>
        <trans-unit id="e3211f16f2bf13ae261e0950e95fcb097de41f22" translate="yes" xml:space="preserve">
          <source>Your AngularJS application is configured with only the routes it needs to render content. The remaining routes in your application are handled by the Angular Router. The exposed &lt;code&gt;bootstrap&lt;/code&gt; method is called in your Angular app to bootstrap the AngularJS application after the bundle is loaded.</source>
          <target state="translated">AngularJSアプリケーションは、コンテンツのレンダリングに必要なルートのみで構成されています。アプリケーションの残りのルートは、Angularルーターによって処理されます。公開された &lt;code&gt;bootstrap&lt;/code&gt; メソッドがAngularアプリで呼び出され、バンドルが読み込まれた後にAngularJSアプリケーションをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="65bfaf96c06d97f96e8a65f9438758ce7b3569a9" translate="yes" xml:space="preserve">
          <source>Your app greets you with a message:</source>
          <target state="translated">あなたのアプリがメッセージであなたを迎えます。</target>
        </trans-unit>
        <trans-unit id="c3e748379c0414e0121830fc533540732cc48d9e" translate="yes" xml:space="preserve">
          <source>Your app relies on Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection (DI)&lt;/a&gt; to create services. When a service has a dependent service, DI finds or creates that dependent service. And if that dependent service has its own dependencies, DI finds-or-creates them as well.</source>
          <target state="translated">アプリは、Angular &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection（DI）&lt;/a&gt;に依存してサービスを作成します。サービスに依存サービスがある場合、DIはその依存サービスを検出または作成します。そして、その依存サービスに独自の依存関係がある場合、DIはそれらも検出または作成します。</target>
        </trans-unit>
        <trans-unit id="c716f3ea5620bf66e2e4c4b3ee6d42236db25538" translate="yes" xml:space="preserve">
          <source>Your app should look like this live example.</source>
          <target state="translated">あなたのアプリは、このようなライブの例のように見えるはずです。</target>
        </trans-unit>
        <trans-unit id="0f950aa0359003244b24ae8203ac4e789899bf4d" translate="yes" xml:space="preserve">
          <source>Your app should look like this live example. Here are the code files discussed on this page.</source>
          <target state="translated">あなたのアプリは、このライブ サンプルのようになっているはずです。このページで説明されているコードファイルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="50d5e8ec1931a5f050ae543dad46cc5d25af5359" translate="yes" xml:space="preserve">
          <source>Your application can use &lt;a href=&quot;glossary#lifecycle-hook&quot;&gt;lifecycle hook methods&lt;/a&gt; to tap into key events in the lifecycle of a component or directive in order to initialize new instances, initiate change detection when needed, respond to updates during change detection, and clean up before deletion of instances.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;glossary#lifecycle-hook&quot;&gt;ライフサイクルフックメソッド&lt;/a&gt;を使用して、コンポーネントまたはディレクティブのライフサイクル内の主要なイベントを利用して、新しいインスタンスを初期化し、必要に応じて変更検出を開始し、変更検出中に更新に応答し、インスタンスを削除する前にクリーンアップできます。</target>
        </trans-unit>
        <trans-unit id="e13067ae32219b5a8f055e17abc4462a9a25799c" translate="yes" xml:space="preserve">
          <source>Your editor autodetects that you are opening an Angular file. It then uses the Angular Language Service to read your &lt;code&gt;tsconfig.json&lt;/code&gt; file, find all the templates you have in your application, and then provide language services for any templates that you open.</source>
          <target state="translated">エディターは、Angularファイルを開いていることを自動検出します。次に、Angular Language Serviceを使用して &lt;code&gt;tsconfig.json&lt;/code&gt; ファイルを読み取り、アプリケーションにあるすべてのテンプレートを見つけて、開いたテンプレートに言語サービスを提供します。</target>
        </trans-unit>
        <trans-unit id="f145a913a5d2310d5c2de579c6732f13562e9217" translate="yes" xml:space="preserve">
          <source>Your interceptor should return every event without modification unless it has a compelling reason to do otherwise.</source>
          <target state="translated">インターセプターは、やむを得ない理由がない限り、すべてのイベントを変更せずに返すべきです。</target>
        </trans-unit>
        <trans-unit id="73d09ca9a86e236db4617d978e1523f63f053378" translate="yes" xml:space="preserve">
          <source>Your library and schematics are packaged and placed in the &lt;code&gt;dist/my-lib&lt;/code&gt; folder at the root of your workspace. For running the schematic, you need to link the library into your &lt;code&gt;node_modules&lt;/code&gt; folder. From the root of your workspace, run the &lt;code&gt;npm link&lt;/code&gt; command with the path to your distributable library.</source>
          <target state="translated">ライブラリと回路図はパッケージ化され、ワークスペースのルートにある &lt;code&gt;dist/my-lib&lt;/code&gt; フォルダーに配置されます。回路図を実行するには、ライブラリを &lt;code&gt;node_modules&lt;/code&gt; フォルダーにリンクする必要があります。ワークスペースのルートから、配布可能なライブラリへのパスを指定して &lt;code&gt;npm link&lt;/code&gt; コマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="430d95875f2338142d28aa95b619117061765909" translate="yes" xml:space="preserve">
          <source>Your library needs a custom Typescript configuration file with instructions on how to compile your schematics into your distributed library.</source>
          <target state="translated">あなたのライブラリには、回路図を配布ライブラリにコンパイルする方法を説明したカスタム Typescript 設定ファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="7607bee84c0ac254691ea836fbb691148cbf2e26" translate="yes" xml:space="preserve">
          <source>Your library should supply documentation (typically a README file) for installation and maintenance.</source>
          <target state="translated">あなたのライブラリは、インストールとメンテナンスのためのドキュメント(通常はREADMEファイル)を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="b34572142e030d2e8d230e0be5d3163ebb3992cc" translate="yes" xml:space="preserve">
          <source>Your provider can call a logger factory function.</source>
          <target state="translated">プロバイダは、ロガー ファクトリ関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="43dc6f60e03229ee07ca7d84e055218a09bcd4cb" translate="yes" xml:space="preserve">
          <source>Your rules can make changes to your projects by calling external tools and implementing logic. You need a rule, for example, to define how a template in the schematic is to be merged into the hosting project.</source>
          <target state="translated">ルールは、外部ツールを呼び出してロジックを実装することで、プロジェクトに変更を加えることができます。例えば、回路図のテンプレートをホスティングプロジェクトにマージする方法を定義するためにルールが必要です。</target>
        </trans-unit>
        <trans-unit id="ff7ea8f121b3a9abc9332b352c6a9de590e2a22b" translate="yes" xml:space="preserve">
          <source>Your sample app can switch between two views when the user clicks a link.</source>
          <target state="translated">サンプルアプリでは、ユーザーがリンクをクリックすると、2つのビューを切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="dc3e1878c2c23d1279becf7ad8bf2217914ed599" translate="yes" xml:space="preserve">
          <source>Your templates can use &lt;em&gt;pipes&lt;/em&gt; to improve the user experience by transforming values for display. For example, use pipes to display dates and currency values that are appropriate for a user's locale. Angular provides predefined pipes for common transformations, and you can also define your own pipes.</source>
          <target state="translated">テンプレートでは&lt;em&gt;パイプ&lt;/em&gt;を使用して、表示する値を変換することでユーザーエクスペリエンスを向上させることができます。たとえば、パイプを使用して、ユーザーのロケールに適した日付と通貨の値を表示します。Angularは一般的な変換用に事前定義されたパイプを提供し、独自のパイプを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="12c29279def0a091db7f06c9ec1a90435cb179f3" translate="yes" xml:space="preserve">
          <source>Your tests will reflect the real world more faithfully if you return an &lt;em&gt;asynchronous&lt;/em&gt; observable from the &lt;code&gt;getQuote()&lt;/code&gt; spy like this.</source>
          <target state="translated">このように &lt;code&gt;getQuote()&lt;/code&gt; スパイから&lt;em&gt;非同期&lt;/em&gt;オブザーバブルを返すと、テストは実際の世界をより忠実に反映します。</target>
        </trans-unit>
        <trans-unit id="909f99a779adb66a76fc53ab56c7dd1caf35d0fd" translate="yes" xml:space="preserve">
          <source>Z</source>
          <target state="translated">Z</target>
        </trans-unit>
        <trans-unit id="9809f6e7ead907aa76775d5d232511ba044d0175" translate="yes" xml:space="preserve">
          <source>Z (GMT-8:00)</source>
          <target state="translated">Z (GMT-8:00)</target>
        </trans-unit>
        <trans-unit id="ce6905f17ae50018fff90df06bf53efca8b75312" translate="yes" xml:space="preserve">
          <source>Z, ZZ &amp;amp; ZZZ</source>
          <target state="translated">Z、ZZ、ZZZ</target>
        </trans-unit>
        <trans-unit id="9865d483bc5a94f2e30056fc256ed3066af54d04" translate="yes" xml:space="preserve">
          <source>ZZZZ</source>
          <target state="translated">ZZZZ</target>
        </trans-unit>
        <trans-unit id="f888fa8a61ba9a53a45f040a4bbb8b2fc1f64444" translate="yes" xml:space="preserve">
          <source>ZZZZZ</source>
          <target state="translated">ZZZZZ</target>
        </trans-unit>
        <trans-unit id="03efccb49f3ff5f0055a644eae98835dda00b789" translate="yes" xml:space="preserve">
          <source>Zone</source>
          <target state="translated">Zone</target>
        </trans-unit>
        <trans-unit id="7493b79ac0c62e8b584d412dde9f29700c26e65c" translate="yes" xml:space="preserve">
          <source>[( )] = banana in a box</source>
          <target state="translated">[（）] =箱に入ったバナナ</target>
        </trans-unit>
        <trans-unit id="8da3a9ecbf4c246f6fcffd966ab9e4806aaad198" translate="yes" xml:space="preserve">
          <source>`getLocaleTimeFormat()</source>
          <target state="translated">`getLocaleTimeFormat()</target>
        </trans-unit>
        <trans-unit id="1fa1e2c60fc5a084bc22d2a7d0f01c6078631982" translate="yes" xml:space="preserve">
          <source>`{</source>
          <target state="translated">`{</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="823f4e719202246f14fd7590cb4e33f1abc5cdc5" translate="yes" xml:space="preserve">
          <source>a (PM)</source>
          <target state="translated">ア</target>
        </trans-unit>
        <trans-unit id="d888c59679c9d561dda10eee3cc73b1cb0ee9aa2" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;web component&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Webコンポーネント&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="66b0cf14f96df85dc5ee5c13aac8359f099c9d29" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;string&lt;/code&gt; defining the locale to use (uses the current &lt;a href=&quot;../core/locale_id&quot;&gt;&lt;code&gt;LOCALE_ID&lt;/code&gt;&lt;/a&gt; by default).</source>
          <target state="translated">使用するロケールを定義する &lt;code&gt;string&lt;/code&gt; （デフォルトでは現在の&lt;a href=&quot;../core/locale_id&quot;&gt; &lt;code&gt;LOCALE_ID&lt;/code&gt; &lt;/a&gt;を使用）。</target>
        </trans-unit>
        <trans-unit id="fe457c7b4dc19559387ac89d6fc0f65d03cfffa2" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;token&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;token&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11b766166491755752ddca2008e7ed633a9b6868" translate="yes" xml:space="preserve">
          <source>a DOM element within a template</source>
          <target state="translated">テンプレート内の DOM 要素</target>
        </trans-unit>
        <trans-unit id="31f3145b9898054c07f0fe1699cdcb2b0208b386" translate="yes" xml:space="preserve">
          <source>a blank line separates the &lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt; tag from the markdown content</source>
          <target state="translated">空白行で、 &lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt; タグとマークダウンコンテンツを区切ります</target>
        </trans-unit>
        <trans-unit id="792ddc6d2cd564a55a9258f06c988eeaeb89e581" translate="yes" xml:space="preserve">
          <source>a collection of Angular modules to include in the configuration.</source>
          <target state="translated">設定に含めるAngularモジュールのコレクション。</target>
        </trans-unit>
        <trans-unit id="d96e6a13a8e73828f54529bbe84ddc48239792db" translate="yes" xml:space="preserve">
          <source>a collection of the names of AngularJS modules to include in the configuration.</source>
          <target state="translated">設定に含めるAngularJSモジュールの名前のコレクション。</target>
        </trans-unit>
        <trans-unit id="392fad8a84b8a1dc3218bec19723352052215477" translate="yes" xml:space="preserve">
          <source>a directive</source>
          <target state="translated">指令書</target>
        </trans-unit>
        <trans-unit id="af28a6d536ce9ed6cc4395862a4615ec66b4a3fa" translate="yes" xml:space="preserve">
          <source>a link that downloads that sample.</source>
          <target state="translated">そのサンプルをダウンロードするリンク。</target>
        </trans-unit>
        <trans-unit id="56abb829e8921279762bb2822d03d2991bb2db93" translate="yes" xml:space="preserve">
          <source>a link to the Stackblitz defined by the default &lt;code&gt;stackblitz.json&lt;/code&gt; file located in the code sample folder with the same name as the guide page.</source>
          <target state="translated">ガイドページと同じ名前のコードサンプルフォルダーにあるデフォルトの &lt;code&gt;stackblitz.json&lt;/code&gt; ファイルによって定義されたStackblitzへのリンク。</target>
        </trans-unit>
        <trans-unit id="bc659af1cc7488d81f99b1f3fe2e031101a9b7b7" translate="yes" xml:space="preserve">
          <source>a newly identified security vulnerability,</source>
          <target state="translated">新たに特定されたセキュリティ脆弱性</target>
        </trans-unit>
        <trans-unit id="717b98f3de9faa9344ac0571bd0724b92610f35e" translate="yes" xml:space="preserve">
          <source>a reference to the name input box to inspect and set it.</source>
          <target state="translated">名前入力ボックスを参照して検査・設定します。</target>
        </trans-unit>
        <trans-unit id="9a0c7871fd08512bb1050d80ca092b16f04b67d2" translate="yes" xml:space="preserve">
          <source>a reference to the title text.</source>
          <target state="translated">タイトルテキストへの参照。</target>
        </trans-unit>
        <trans-unit id="d6ca1a75866e5c1047593ef8b142acf131df4e23" translate="yes" xml:space="preserve">
          <source>a regression, since the start of LTS, caused by a 3rd party change, such as a new browser version.</source>
          <target state="translated">LTS の開始以来、新しいブラウザのバージョンなどのサードパーティの変更に起因する回帰。</target>
        </trans-unit>
        <trans-unit id="9334edd62ead6e8adfc4df97a1c327db878b242e" translate="yes" xml:space="preserve">
          <source>a string to be internationalized.</source>
          <target state="translated">国際化される文字列。</target>
        </trans-unit>
        <trans-unit id="3abe5cca7bf561de98582d9fe2fb2d665bfd1ba5" translate="yes" xml:space="preserve">
          <source>a system-wide unique &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">システム全体の一意の &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2667a406dc78e1e704dcc8bee1dc5151fcd8f893" translate="yes" xml:space="preserve">
          <source>a, aa &amp;amp; aaa</source>
          <target state="translated">a、aa、aaa</target>
        </trans-unit>
        <trans-unit id="38f736753c3b3f1a206b32e99462c79afac7a284" translate="yes" xml:space="preserve">
          <source>a/p</source>
          <target state="translated">a/p</target>
        </trans-unit>
        <trans-unit id="70c881d4a26984ddce795f6f71817c9cf4480e79" translate="yes" xml:space="preserve">
          <source>aaaa</source>
          <target state="translated">aaaa</target>
        </trans-unit>
        <trans-unit id="df51e37c269aa94d38f93e537bf6e2020b21406c" translate="yes" xml:space="preserve">
          <source>aaaaa</source>
          <target state="translated">aaaaa</target>
        </trans-unit>
        <trans-unit id="d7fdc791db8b46d5e09a39a6610a223d3110075d" translate="yes" xml:space="preserve">
          <source>about the &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;microsyntax&lt;/em&gt;&lt;/a&gt; that expands into a &lt;a href=&quot;structural-directives#template&quot;&gt;&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;structural-directives#template&quot;&gt; &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; に&lt;/a&gt;展開される&lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;マイクロ構文&lt;/em&gt;&lt;/a&gt;について。</target>
        </trans-unit>
        <trans-unit id="ee0286874aed7f85170aca71fd1330f64c84f6af" translate="yes" xml:space="preserve">
          <source>add &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; with scaffolded code to receive messages:</source>
          <target state="translated">メッセージを受信するために、 &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; に足場コードを追加します。</target>
        </trans-unit>
        <trans-unit id="02f2201bbab649c58224bbb4dc7680ce54b0a2a9" translate="yes" xml:space="preserve">
          <source>add scaffolded code to &lt;code&gt;src/app/app.component.ts&lt;/code&gt; to use the worker:</source>
          <target state="translated">ワーカーを使用するために、 &lt;code&gt;src/app/app.component.ts&lt;/code&gt; に足場コードを追加します。</target>
        </trans-unit>
        <trans-unit id="734abd5d6da02581194bea4c2db1dd267373d931" translate="yes" xml:space="preserve">
          <source>adding a &lt;code&gt;MessagesComponent&lt;/code&gt; that displays app messages at the bottom of the screen</source>
          <target state="translated">画面下部にアプリ &lt;code&gt;MessagesComponent&lt;/code&gt; を表示するMessagesComponentを追加する</target>
        </trans-unit>
        <trans-unit id="f49228cf1b44ff91371451fca10366f2403cd2d5" translate="yes" xml:space="preserve">
          <source>ahead-of-time (AOT) compilation</source>
          <target state="translated">先行コンパイル</target>
        </trans-unit>
        <trans-unit id="20c2ff0ee7e25c78087be9ecd4a0ec98e4961685" translate="yes" xml:space="preserve">
          <source>am, pm, midnight, noon, morning, afternoon, evening, night</source>
          <target state="translated">午睡</target>
        </trans-unit>
        <trans-unit id="258740dd5704662c5eb20ef4e022ed3835ba5376" translate="yes" xml:space="preserve">
          <source>am/pm or AM/PM</source>
          <target state="translated">午前/午後または午前/午後</target>
        </trans-unit>
        <trans-unit id="4613c8a5ddad387ceb95e34eeb3629756d803f33" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;&lt;a href=&quot;../../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; that identifies a service provided from Angular.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 角度から提供されるサービスを識別します。</target>
        </trans-unit>
        <trans-unit id="5889220b5e2a44a1b7bf50da4787a806d3f1ef9b" translate="yes" xml:space="preserve">
          <source>an element</source>
          <target state="translated">一要素</target>
        </trans-unit>
        <trans-unit id="4195a4fd0ab22e9f7f28a0578d3b916cdfacae2e" translate="yes" xml:space="preserve">
          <source>an object that indicates the text that should be displayed for different values of the provided &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">提供さの異なる値に対して表示されるべきテキストを示すオブジェクト &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="058bfd198d0d515c17d02b04736ef140cbcfb96d" translate="yes" xml:space="preserve">
          <source>an object that mimics the ICU format, see &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;http://userguide.icu-project.org/formatparse/messages&lt;/a&gt;.</source>
          <target state="translated">ICU形式を模倣するオブジェクト&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;。http://userguide.icu-project.org/formatparse/messagesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="06f997c71355dfe0d40c1299ebc61333b8ce980c" translate="yes" xml:space="preserve">
          <source>and component reuse</source>
          <target state="translated">とコンポーネントの再利用</target>
        </trans-unit>
        <trans-unit id="4ec4eb2dc45819c4773e7a1f334b37b106cf1f6c" translate="yes" xml:space="preserve">
          <source>and that we have included this in our upgrade app &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">これをアップグレードアプリ &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; に含めました。</target>
        </trans-unit>
        <trans-unit id="a8de46a78779f54ee657c8327b407f1eac015758" translate="yes" xml:space="preserve">
          <source>animate</source>
          <target state="translated">animate</target>
        </trans-unit>
        <trans-unit id="ce9ef307bbb975da50a4ed4ec4093bc02f3fc1d4" translate="yes" xml:space="preserve">
          <source>animateChild</source>
          <target state="translated">animateChild</target>
        </trans-unit>
        <trans-unit id="a6b8b600c27ce95ddcf867cfc503564c89fe816a" translate="yes" xml:space="preserve">
          <source>animation</source>
          <target state="translated">animation</target>
        </trans-unit>
        <trans-unit id="2600a0d627b47b76c6692fa9e794c8671c2ccdc2" translate="yes" xml:space="preserve">
          <source>animations</source>
          <target state="translated">animations</target>
        </trans-unit>
        <trans-unit id="2e76f544229901c5a942849ee61ac86bda6e5609" translate="yes" xml:space="preserve">
          <source>annotation</source>
          <target state="translated">annotation</target>
        </trans-unit>
        <trans-unit id="b17d80c4a4d519330c5ea8c72df2afacdfcf5ba4" translate="yes" xml:space="preserve">
          <source>ante meridiem/post meridiem</source>
          <target state="translated">前後の午睡</target>
        </trans-unit>
        <trans-unit id="c979aa22bccb48838c1d5be40f276f1f6627e457" translate="yes" xml:space="preserve">
          <source>any AngularJS modules that the upgrade module should depend upon</source>
          <target state="translated">アップグレードモジュールが依存すべき AngularJS モジュールがあれば</target>
        </trans-unit>
        <trans-unit id="b375d6e0a5ac835fc6013dedd792cb5a74d5d15c" translate="yes" xml:space="preserve">
          <source>app-routing.module.ts</source>
          <target state="translated">app-routing.module.ts</target>
        </trans-unit>
        <trans-unit id="a773c6167188af695b33c511f56cd4a1fcb6f6aa" translate="yes" xml:space="preserve">
          <source>app-shell</source>
          <target state="translated">app-shell</target>
        </trans-unit>
        <trans-unit id="a531b2272149fca085dfd0cf4f8da2f5de520a33" translate="yes" xml:space="preserve">
          <source>app.component.ts</source>
          <target state="translated">app.component.ts</target>
        </trans-unit>
        <trans-unit id="7f07bea6f014a80740d8133ff4b5cdad1822dfdf" translate="yes" xml:space="preserve">
          <source>app.e2e-spec.ts</source>
          <target state="translated">app.e2e-spec.ts</target>
        </trans-unit>
        <trans-unit id="0b12988707c80a7246f28df5b2426fb8f9a0a25d" translate="yes" xml:space="preserve">
          <source>app.module.ts</source>
          <target state="translated">app.module.ts</target>
        </trans-unit>
        <trans-unit id="04c285392b9f8d21a544fccd4a714c1da2f7c1a9" translate="yes" xml:space="preserve">
          <source>asNativeElements</source>
          <target state="translated">asNativeElements</target>
        </trans-unit>
        <trans-unit id="66bcee95a45645296a3f1352fc6d89d060c500bd" translate="yes" xml:space="preserve">
          <source>assertPlatform</source>
          <target state="translated">assertPlatform</target>
        </trans-unit>
        <trans-unit id="b7e04b33fdd186ab6bd2deace04ea6b551b9bd4a" translate="yes" xml:space="preserve">
          <source>async</source>
          <target state="translated">async</target>
        </trans-unit>
        <trans-unit id="d2050a06561ab84d91d57e0e59eec52b2bf59fa2" translate="yes" xml:space="preserve">
          <source>attribute directives</source>
          <target state="translated">属性指令</target>
        </trans-unit>
        <trans-unit id="cc7dd7e4d351ad1cf2d2858cd707caa2d7e6095e" translate="yes" xml:space="preserve">
          <source>b, bb &amp;amp; bbb</source>
          <target state="translated">b、bb、bbb</target>
        </trans-unit>
        <trans-unit id="2ed8e7de1b8db564a5d623cff367097cbe23f9b8" translate="yes" xml:space="preserve">
          <source>back to top</source>
          <target state="translated">トップへ戻る</target>
        </trans-unit>
        <trans-unit id="01bada152405b958af7e5fe4c072d1cee851aa3b" translate="yes" xml:space="preserve">
          <source>baseline</source>
          <target state="translated">baseline</target>
        </trans-unit>
        <trans-unit id="8aed1322e5450badb078e1fb60a817a1df25a2ca" translate="yes" xml:space="preserve">
          <source>bbbb</source>
          <target state="translated">bbbb</target>
        </trans-unit>
        <trans-unit id="68413fb4ed973e62a1f45819569915d3adf53e53" translate="yes" xml:space="preserve">
          <source>bbbbb</source>
          <target state="translated">bbbbb</target>
        </trans-unit>
        <trans-unit id="c02ceb78ff4863ee1a75d232c4f53af56b182ec9" translate="yes" xml:space="preserve">
          <source>becomes:</source>
          <target state="translated">becomes:</target>
        </trans-unit>
        <trans-unit id="4a9fb8d92972382b39b524ce7f8cdc6213d95500" translate="yes" xml:space="preserve">
          <source>binding</source>
          <target state="translated">binding</target>
        </trans-unit>
        <trans-unit id="3c71cc99d2fc1c12a3d3e1b27e448ca612a89a1d" translate="yes" xml:space="preserve">
          <source>bootstrap</source>
          <target state="translated">bootstrap</target>
        </trans-unit>
        <trans-unit id="db08c3f4c2c0f3c87a17963927b3471f0843dab6" translate="yes" xml:space="preserve">
          <source>bootstrapWorkerUi</source>
          <target state="translated">bootstrapWorkerUi</target>
        </trans-unit>
        <trans-unit id="ef98362b8a6b0c8cd804b0d227aa1ffeaba89786" translate="yes" xml:space="preserve">
          <source>browser</source>
          <target state="translated">browser</target>
        </trans-unit>
        <trans-unit id="f52318a05e518a5596012af2ed38de68ac26a468" translate="yes" xml:space="preserve">
          <source>builder</source>
          <target state="translated">builder</target>
        </trans-unit>
        <trans-unit id="3e09a4bf8883f7fcd5582f6a41ac5fe1fc20482a" translate="yes" xml:space="preserve">
          <source>call the base class from the constructor, passing</source>
          <target state="translated">コンストラクタから基底クラスを呼び出し、コンストラクタに</target>
        </trans-unit>
        <trans-unit id="24d9738ba0c0eb872af837d81f7e9d57c80ef94a" translate="yes" xml:space="preserve">
          <source>camelCase : Symbols, properties, methods, pipe names, non-component directive selectors, constants. Standard or lower camel case uses lowercase on the first letter of the item. For example, &quot;selectedHero&quot;.</source>
          <target state="translated">camelCase:記号、プロパティ、メソッド、パイプ名、非コンポーネントディレクティブセレクタ、定数。標準または小文字のキャメルケースは、項目の最初の文字に小文字を使用します。例えば、&quot;selectedHero&quot;。</target>
        </trans-unit>
        <trans-unit id="bd35b2f872f1484533f5dce355a6ac69215584c5" translate="yes" xml:space="preserve">
          <source>case types</source>
          <target state="translated">ケースタイプ</target>
        </trans-unit>
        <trans-unit id="6b8e0b430e1ff60244896658137ed97dfb1ee96a" translate="yes" xml:space="preserve">
          <source>change detection</source>
          <target state="translated">へんこうけんしゅつ</target>
        </trans-unit>
        <trans-unit id="78173d5707fa4e8183f4afcc2b42c8cf7ace1068" translate="yes" xml:space="preserve">
          <source>class decorator</source>
          <target state="translated">クラスデコレータ</target>
        </trans-unit>
        <trans-unit id="37ac4c7306b49aa3eb07fd6152961c74e13625fb" translate="yes" xml:space="preserve">
          <source>class field decorator</source>
          <target state="translated">クラスフィールドデコレータ</target>
        </trans-unit>
        <trans-unit id="26757f0e091b155710815c63986d5eb15dc0be2c" translate="yes" xml:space="preserve">
          <source>classList</source>
          <target state="translated">classList</target>
        </trans-unit>
        <trans-unit id="2037de437c80264ccbce8a8b61d0bf9f593d2322" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="translated">collection</target>
        </trans-unit>
        <trans-unit id="e3f3c969b4a1fc45ab764793a82ecf1edb0cecab" translate="yes" xml:space="preserve">
          <source>command-line interface (CLI)</source>
          <target state="translated">コマンドラインインタフェース</target>
        </trans-unit>
        <trans-unit id="94c8c21d08740f5da9eaa38d1f175c592692f0d1" translate="yes" xml:space="preserve">
          <source>common</source>
          <target state="translated">common</target>
        </trans-unit>
        <trans-unit id="335c4c1e2f05b5297a56769d8de75ad9c4874cd3" translate="yes" xml:space="preserve">
          <source>component</source>
          <target state="translated">component</target>
        </trans-unit>
        <trans-unit id="0652e436f42d75f5672a8bd9ae2f398a55115d51" translate="yes" xml:space="preserve">
          <source>configuration</source>
          <target state="translated">configuration</target>
        </trans-unit>
        <trans-unit id="957c09f4575f27ba69d3e8641e5c0eef5983087a" translate="yes" xml:space="preserve">
          <source>configure your project to use Web Workers, if it isn't already.</source>
          <target state="translated">Web Workers を使用するようにプロジェクトを設定します。</target>
        </trans-unit>
        <trans-unit id="38bd340c3898f58c0ab1f86902b77087428a3a5f" translate="yes" xml:space="preserve">
          <source>confirmation</source>
          <target state="translated">confirmation</target>
        </trans-unit>
        <trans-unit id="93a6c19249d308ae0d84b5cab41329a95c74cfec" translate="yes" xml:space="preserve">
          <source>confirmation (&quot;yes&quot;=&lt;code&gt;true&lt;/code&gt;, &quot;no&quot;=&lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">確認（ &quot;yes&quot; = &lt;code&gt;true&lt;/code&gt; 、 &quot;no&quot; = &lt;code&gt;false&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8a0a17f4746c2bceba8a683cbc80705301c043d9" translate="yes" xml:space="preserve">
          <source>containing the new value.</source>
          <target state="translated">には、新しい値が含まれています。</target>
        </trans-unit>
        <trans-unit id="1de60e253c35dd4fb2152e54f4e9615a0853b7a7" translate="yes" xml:space="preserve">
          <source>contains information about the Component that is being downgraded:</source>
          <target state="translated">には、ダウングレードされるコンポーネントに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="a005d767e57b9ea97e0a6e25a5881319e4fc3c51" translate="yes" xml:space="preserve">
          <source>content projection</source>
          <target state="translated">内容投影</target>
        </trans-unit>
        <trans-unit id="a80aea77037a27e710633f6982fd1ae71f09a1e8" translate="yes" xml:space="preserve">
          <source>convertToParamMap</source>
          <target state="translated">convertToParamMap</target>
        </trans-unit>
        <trans-unit id="94a0426e8d3203da5468ccf0c624f93cb37601e2" translate="yes" xml:space="preserve">
          <source>core</source>
          <target state="translated">core</target>
        </trans-unit>
        <trans-unit id="93e88f6f0496ca29503f649dc3f0c6b1e520cad4" translate="yes" xml:space="preserve">
          <source>createAngularJSTestingModule</source>
          <target state="translated">createAngularJSTestingModule</target>
        </trans-unit>
        <trans-unit id="e28354df498a6ef00ec0ff2ebb2c2123b672dd85" translate="yes" xml:space="preserve">
          <source>createAngularTestingModule</source>
          <target state="translated">createAngularTestingModule</target>
        </trans-unit>
        <trans-unit id="ce41a54003246632f134a987f1c3f12b2f84940c" translate="yes" xml:space="preserve">
          <source>createCustomElement</source>
          <target state="translated">createCustomElement</target>
        </trans-unit>
        <trans-unit id="3ce6164f18da5985c067a30765f39211c3750526" translate="yes" xml:space="preserve">
          <source>createPlatform</source>
          <target state="translated">createPlatform</target>
        </trans-unit>
        <trans-unit id="9b0b0d3423e2caec8265be68f5d9db85e0a52689" translate="yes" xml:space="preserve">
          <source>createPlatformFactory</source>
          <target state="translated">createPlatformFactory</target>
        </trans-unit>
        <trans-unit id="3552a8df25b821ccd3f64b30c3aeca23e43a0768" translate="yes" xml:space="preserve">
          <source>creating an injectable, app-wide &lt;code&gt;MessageService&lt;/code&gt; for sending messages to be displayed</source>
          <target state="translated">表示するメッセージを送信するための注入可能なアプリ全体の &lt;code&gt;MessageService&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="99998e3643ac6a6441e16594668e066cf26f61b1" translate="yes" xml:space="preserve">
          <source>credit.service.ts</source>
          <target state="translated">credit.service.ts</target>
        </trans-unit>
        <trans-unit id="001517ee5d3d0c7f4481ec2cd77c6aefd2fa802e" translate="yes" xml:space="preserve">
          <source>currency</source>
          <target state="translated">currency</target>
        </trans-unit>
        <trans-unit id="a8480e7124725cbdfde85e3fde8145bf2d04cefc" translate="yes" xml:space="preserve">
          <source>custom element</source>
          <target state="translated">カスタム要素</target>
        </trans-unit>
        <trans-unit id="f68a790f4bd530c61ec445b1d0ba7a228eff5245" translate="yes" xml:space="preserve">
          <source>customize the build steps</source>
          <target state="translated">ビルドステップをカスタマイズする</target>
        </trans-unit>
        <trans-unit id="3c363836cf4e16666669a25da280a1865c2d2874" translate="yes" xml:space="preserve">
          <source>d</source>
          <target state="translated">d</target>
        </trans-unit>
        <trans-unit id="12d64184a8c3855405db6807056769ccdd450451" translate="yes" xml:space="preserve">
          <source>d (3)</source>
          <target state="translated">d (3)</target>
        </trans-unit>
        <trans-unit id="81a0942f3fd4769a8bcc9654de1bdfdc1bbb5795" translate="yes" xml:space="preserve">
          <source>dash-case (or &quot;kebab-case&quot;): Descriptive part of file names, component selectors. For example, &quot;app-hero-list&quot;.</source>
          <target state="translated">ダッシュケース(または「ケバブケース」)。ファイル名の記述部分、コンポーネントセレクタ。例えば、&quot;app-hero-list&quot;。</target>
        </trans-unit>
        <trans-unit id="f0f39729c8bff81fbca3d3298fd183a2023d14c7" translate="yes" xml:space="preserve">
          <source>data binding</source>
          <target state="translated">データ結合</target>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="a2620cbc10f5198dd03e3f5a1569eb5dcf9a6a87" translate="yes" xml:space="preserve">
          <source>day</source>
          <target state="translated">day</target>
        </trans-unit>
        <trans-unit id="388ad1c312a488ee9e12998fe097f2258fa8d5ee" translate="yes" xml:space="preserve">
          <source>dd</source>
          <target state="translated">dd</target>
        </trans-unit>
        <trans-unit id="25113f74795fc59942bbc1d9bf4ff161da798430" translate="yes" xml:space="preserve">
          <source>dd (03)</source>
          <target state="translated">DD (03)</target>
        </trans-unit>
        <trans-unit id="d4faee6fc8e32453adb703b756acafa5cfae01c0" translate="yes" xml:space="preserve">
          <source>declarable</source>
          <target state="translated">declarable</target>
        </trans-unit>
        <trans-unit id="f6e8bc52b9d7869a3703cc3097a19b111ab35301" translate="yes" xml:space="preserve">
          <source>decorator | decoration</source>
          <target state="translated">デコレーター</target>
        </trans-unit>
        <trans-unit id="673a186d661f24879aeda87ccd5374b40f6c21ca" translate="yes" xml:space="preserve">
          <source>default/&lt;code&gt;''&lt;/code&gt;: use the queryParams only</source>
          <target state="translated">default / &lt;code&gt;''&lt;/code&gt; ：queryParamsのみを使用</target>
        </trans-unit>
        <trans-unit id="8ea4ffdb0deede8ee694f4b4d9c505a1d4d0747b" translate="yes" xml:space="preserve">
          <source>defineInjectable</source>
          <target state="translated">defineInjectable</target>
        </trans-unit>
        <trans-unit id="307a7cd459c193aa7f7cd579ff5f7491f9c0109f" translate="yes" xml:space="preserve">
          <source>dependency injection (DI)</source>
          <target state="translated">いぞんせいインジェクション</target>
        </trans-unit>
        <trans-unit id="5c3682fc7a4920b55c3585a44e4d06c1a4110f0e" translate="yes" xml:space="preserve">
          <source>deprecated from v8.0.0 use Type</source>
          <target state="translated">v8.0.0.0 から非推奨となりました。</target>
        </trans-unit>
        <trans-unit id="7ada71eda18467c06cffdf19ac0d3c2176b81385" translate="yes" xml:space="preserve">
          <source>derive from &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; から派生</target>
        </trans-unit>
        <trans-unit id="26015470b9cad4657713e2ad0af10a7f96dafc3a" translate="yes" xml:space="preserve">
          <source>destroyPlatform</source>
          <target state="translated">destroyPlatform</target>
        </trans-unit>
        <trans-unit id="93749784962f3a738c721e86e9446fbf7909441f" translate="yes" xml:space="preserve">
          <source>dev-server</source>
          <target state="translated">dev-server</target>
        </trans-unit>
        <trans-unit id="3619d4a8858e35969919fa8a8218b35b7fa876c1" translate="yes" xml:space="preserve">
          <source>differential loading</source>
          <target state="translated">差動荷重</target>
        </trans-unit>
        <trans-unit id="3d981bf920ab98c455a9796d062745b9d6b5cbfb" translate="yes" xml:space="preserve">
          <source>directive</source>
          <target state="translated">directive</target>
        </trans-unit>
        <trans-unit id="a4a7df5aa4945625dd9a718fa8a24e456fa52106" translate="yes" xml:space="preserve">
          <source>disableDebugTools</source>
          <target state="translated">disableDebugTools</target>
        </trans-unit>
        <trans-unit id="07596f183f5e91b1778d5e47b2752b8d42aa763d" translate="yes" xml:space="preserve">
          <source>disabled</source>
          <target state="translated">disabled</target>
        </trans-unit>
        <trans-unit id="3175c47b6bd91e50aa556bdc914d1d13ca296dca" translate="yes" xml:space="preserve">
          <source>discardPeriodicTasks</source>
          <target state="translated">discardPeriodicTasks</target>
        </trans-unit>
        <trans-unit id="9b22883de5b81b19b6bc37b48507b99fd210c35e" translate="yes" xml:space="preserve">
          <source>displaying a message when &lt;code&gt;HeroService&lt;/code&gt; fetches heroes successfully</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; がヒーローを正常にフェッチしたときにメッセージを表示する</target>
        </trans-unit>
        <trans-unit id="02ad78b32d91c9f92c08fff62a2088e02001d863" translate="yes" xml:space="preserve">
          <source>domain-specific language (DSL)</source>
          <target state="translated">領域固有言語</target>
        </trans-unit>
        <trans-unit id="671b726c7780419df3ac115a30f6025a409e2143" translate="yes" xml:space="preserve">
          <source>downgradeComponent</source>
          <target state="translated">downgradeComponent</target>
        </trans-unit>
        <trans-unit id="5dbec4732dc3bbc923ccd94c9adf9864d20daafb" translate="yes" xml:space="preserve">
          <source>downgradeInjectable</source>
          <target state="translated">downgradeInjectable</target>
        </trans-unit>
        <trans-unit id="422962fa50c9a484bb656148e75a4f957b5a86c0" translate="yes" xml:space="preserve">
          <source>downgradeModule</source>
          <target state="translated">downgradeModule</target>
        </trans-unit>
        <trans-unit id="bee33c4505fae51d91d9cf75e9777ccdd83a9e18" translate="yes" xml:space="preserve">
          <source>dynamic component loading</source>
          <target state="translated">どうてきコンポーネントローディング</target>
        </trans-unit>
        <trans-unit id="eb9ab97eccb42224074474b090caec52facf55f0" translate="yes" xml:space="preserve">
          <source>eager loading</source>
          <target state="translated">熱心</target>
        </trans-unit>
        <trans-unit id="dece05484839df110745b0a800297c33cc078287" translate="yes" xml:space="preserve">
          <source>element</source>
          <target state="translated">element</target>
        </trans-unit>
        <trans-unit id="6851b3982dec35e29a2f2f6d0b028f8311aa1a47" translate="yes" xml:space="preserve">
          <source>elements</source>
          <target state="translated">elements</target>
        </trans-unit>
        <trans-unit id="b5bae9f5a5fbd0b84ebc53f553d2369932783e83" translate="yes" xml:space="preserve">
          <source>elements in the component.</source>
          <target state="translated">コンポーネントの中にある要素を指定します。</target>
        </trans-unit>
        <trans-unit id="5b061ca06d5d677b33a5256cf4bd59260396b0f5" translate="yes" xml:space="preserve">
          <source>ellipsis.pipe.spec.ts</source>
          <target state="translated">ellipsis.pipe.spec.ts</target>
        </trans-unit>
        <trans-unit id="1ef7b5a959f0b9bdc1044560318426d33c99483f" translate="yes" xml:space="preserve">
          <source>ellipsis.pipe.ts</source>
          <target state="translated">ellipsis.pipe.ts</target>
        </trans-unit>
        <trans-unit id="e093745f97e94c8b7006178dedc0b2f94ae11ba9" translate="yes" xml:space="preserve">
          <source>enableDebugTools</source>
          <target state="translated">enableDebugTools</target>
        </trans-unit>
        <trans-unit id="8c3dd1ca824127984d5e493c27a9c9f8f15c9138" translate="yes" xml:space="preserve">
          <source>enableProdMode</source>
          <target state="translated">enableProdMode</target>
        </trans-unit>
        <trans-unit id="3ea3f9802accf8817bacd6f3df46a73b93ccddec" translate="yes" xml:space="preserve">
          <source>enabled</source>
          <target state="translated">enabled</target>
        </trans-unit>
        <trans-unit id="ad86384dc374b06a99dc1a01c135124c6319508c" translate="yes" xml:space="preserve">
          <source>entry point</source>
          <target state="translated">エントリポイント</target>
        </trans-unit>
        <trans-unit id="281f09155c96bf1277ed70fab0b043322f873f41" translate="yes" xml:space="preserve">
          <source>era</source>
          <target state="translated">era</target>
        </trans-unit>
        <trans-unit id="11f9578d05e6f7bb58a3cdd00107e9f4e3882671" translate="yes" xml:space="preserve">
          <source>error</source>
          <target state="translated">error</target>
        </trans-unit>
        <trans-unit id="2bddb453f91528c5bca5ac42f85c2002b5102cbf" translate="yes" xml:space="preserve">
          <source>es2015</source>
          <target state="translated">es2015</target>
        </trans-unit>
        <trans-unit id="04fd367a754d12acaf37607d62e169a42efc8e2f" translate="yes" xml:space="preserve">
          <source>es5</source>
          <target state="translated">es5</target>
        </trans-unit>
        <trans-unit id="0c5734c89be5dd88ccbd4ad099535a476702e590" translate="yes" xml:space="preserve">
          <source>extract-i18n</source>
          <target state="translated">extract-i18n</target>
        </trans-unit>
        <trans-unit id="56bea9aaf0420605352fd1c5fe3fd78a2ce22bbf" translate="yes" xml:space="preserve">
          <source>fakeAsync</source>
          <target state="translated">fakeAsync</target>
        </trans-unit>
        <trans-unit id="8def4372cd160453bb0cf48b1211fe06f9e74f9b" translate="yes" xml:space="preserve">
          <source>few</source>
          <target state="translated">few</target>
        </trans-unit>
        <trans-unit id="3c5d85670ede60f3829428073b57120df70ec0de" translate="yes" xml:space="preserve">
          <source>fil</source>
          <target state="translated">fil</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="78853b9ad227d201230c0f8eb676b2abb6e0e3f3" translate="yes" xml:space="preserve">
          <source>filter-text.service.spec.ts</source>
          <target state="translated">filter-text.service.spec.ts</target>
        </trans-unit>
        <trans-unit id="e4706359fc4117d0efea7adb012984601954e2af" translate="yes" xml:space="preserve">
          <source>flush</source>
          <target state="translated">flush</target>
        </trans-unit>
        <trans-unit id="4858668c63c3b059468b588d1d8c7f12f5b6baa5" translate="yes" xml:space="preserve">
          <source>flushMicrotasks</source>
          <target state="translated">flushMicrotasks</target>
        </trans-unit>
        <trans-unit id="37e54ead4228c22806f656b1c2e23169d42352ff" translate="yes" xml:space="preserve">
          <source>form control</source>
          <target state="translated">フォームコントロール</target>
        </trans-unit>
        <trans-unit id="a05c411acec705f7ecd7fd6491dde06efcfcfddc" translate="yes" xml:space="preserve">
          <source>form model</source>
          <target state="translated">フォームモデル</target>
        </trans-unit>
        <trans-unit id="c9c7dfcc4664ab3fbce1c441b7daa7cc2f8be117" translate="yes" xml:space="preserve">
          <source>form validation</source>
          <target state="translated">フォームバリデーション</target>
        </trans-unit>
        <trans-unit id="c201705052683444e0226cc5fc7ee0f420a5c008" translate="yes" xml:space="preserve">
          <source>formatCurrency</source>
          <target state="translated">formatCurrency</target>
        </trans-unit>
        <trans-unit id="29c2bc729073d902d5893a1c6e34388f5cf78a38" translate="yes" xml:space="preserve">
          <source>formatDate</source>
          <target state="translated">formatDate</target>
        </trans-unit>
        <trans-unit id="f063264e5e86c78948efda26dac49a93da79190a" translate="yes" xml:space="preserve">
          <source>formatNumber</source>
          <target state="translated">formatNumber</target>
        </trans-unit>
        <trans-unit id="f1188a02f03c6e52b36c39d6cbfc0578df9939e4" translate="yes" xml:space="preserve">
          <source>formatPercent</source>
          <target state="translated">formatPercent</target>
        </trans-unit>
        <trans-unit id="453ca94c1e10b3851ca2d2b9fe5902abb50b2db6" translate="yes" xml:space="preserve">
          <source>forms</source>
          <target state="translated">forms</target>
        </trans-unit>
        <trans-unit id="2a9c677d9e1aaf4332df5b5937be5f58393baadf" translate="yes" xml:space="preserve">
          <source>forwardRef</source>
          <target state="translated">forwardRef</target>
        </trans-unit>
        <trans-unit id="0f2deb5a51e70cab863a8d4379f887f907d32efb" translate="yes" xml:space="preserve">
          <source>getAngularJSGlobal</source>
          <target state="translated">getAngularJSGlobal</target>
        </trans-unit>
        <trans-unit id="2aa046740685d2319b2e2001bb0ca76871c36cc8" translate="yes" xml:space="preserve">
          <source>getAngularLib</source>
          <target state="translated">getAngularLib</target>
        </trans-unit>
        <trans-unit id="a30483b7c09bbcd5382ed5d002143cdfce837492" translate="yes" xml:space="preserve">
          <source>getCurrencySymbol</source>
          <target state="translated">getCurrencySymbol</target>
        </trans-unit>
        <trans-unit id="7425ea4ded639b2834b3698a3c70262e75817348" translate="yes" xml:space="preserve">
          <source>getDebugNode</source>
          <target state="translated">getDebugNode</target>
        </trans-unit>
        <trans-unit id="0e9e540bfcd2649fec9a907eac38e4c5d02c28d7" translate="yes" xml:space="preserve">
          <source>getLocaleCurrencyCode</source>
          <target state="translated">getLocaleCurrencyCode</target>
        </trans-unit>
        <trans-unit id="195507d309c858fe4a19793aab76c5c704029983" translate="yes" xml:space="preserve">
          <source>getLocaleCurrencyName</source>
          <target state="translated">getLocaleCurrencyName</target>
        </trans-unit>
        <trans-unit id="2cacbe04b8668cf34716cae6f4d565fc18ff028f" translate="yes" xml:space="preserve">
          <source>getLocaleCurrencySymbol</source>
          <target state="translated">getLocaleCurrencySymbol</target>
        </trans-unit>
        <trans-unit id="54c29d26832ae09ce62ee31e8426d0f8d7af623b" translate="yes" xml:space="preserve">
          <source>getLocaleDateFormat</source>
          <target state="translated">getLocaleDateFormat</target>
        </trans-unit>
        <trans-unit id="c0e42e493ccae6eeae960ee8bad9ca58591c3b5c" translate="yes" xml:space="preserve">
          <source>getLocaleDateTimeFormat</source>
          <target state="translated">getLocaleDateTimeFormat</target>
        </trans-unit>
        <trans-unit id="cd51096bca4f3b696e55473b3b2d7a8507166ae3" translate="yes" xml:space="preserve">
          <source>getLocaleDayNames</source>
          <target state="translated">getLocaleDayNames</target>
        </trans-unit>
        <trans-unit id="62539c1f506d76a478d822e9ec32b78ea33de08b" translate="yes" xml:space="preserve">
          <source>getLocaleDayPeriods</source>
          <target state="translated">getLocaleDayPeriods</target>
        </trans-unit>
        <trans-unit id="fae41412758fbca654bb76d5f915cce5390f2776" translate="yes" xml:space="preserve">
          <source>getLocaleDirection</source>
          <target state="translated">getLocaleDirection</target>
        </trans-unit>
        <trans-unit id="cad22fc8d54da5b1bb1804d7930e06f7978a328d" translate="yes" xml:space="preserve">
          <source>getLocaleEraNames</source>
          <target state="translated">getLocaleEraNames</target>
        </trans-unit>
        <trans-unit id="5cc8c1123676960b2c7e63cdd7917d4eaa1b7313" translate="yes" xml:space="preserve">
          <source>getLocaleExtraDayPeriodRules</source>
          <target state="translated">getLocaleExtraDayPeriodRules</target>
        </trans-unit>
        <trans-unit id="d7b6ab8c5bdd9872ecdaa9c03e665ad1dddfcbdc" translate="yes" xml:space="preserve">
          <source>getLocaleExtraDayPeriods</source>
          <target state="translated">getLocaleExtraDayPeriods</target>
        </trans-unit>
        <trans-unit id="0b5e959af9b8813a14a3eb403a984df156ac888a" translate="yes" xml:space="preserve">
          <source>getLocaleFirstDayOfWeek</source>
          <target state="translated">getLocaleFirstDayOfWeek</target>
        </trans-unit>
        <trans-unit id="15a5f51f72464083edc0fc114d0229fd73f18b98" translate="yes" xml:space="preserve">
          <source>getLocaleId</source>
          <target state="translated">getLocaleId</target>
        </trans-unit>
        <trans-unit id="17b81c85d5aa1d8822d37663ebb7e122f2b14aa0" translate="yes" xml:space="preserve">
          <source>getLocaleMonthNames</source>
          <target state="translated">getLocaleMonthNames</target>
        </trans-unit>
        <trans-unit id="e6ea87a805eac148999f3385839b9315c9dca3cf" translate="yes" xml:space="preserve">
          <source>getLocaleNumberFormat</source>
          <target state="translated">getLocaleNumberFormat</target>
        </trans-unit>
        <trans-unit id="97b82ac482f39ce16e0ceafe75d2ed0d1197930d" translate="yes" xml:space="preserve">
          <source>getLocaleNumberSymbol</source>
          <target state="translated">getLocaleNumberSymbol</target>
        </trans-unit>
        <trans-unit id="2a57a7132a8815027c8420c0682a9cf6d7a44304" translate="yes" xml:space="preserve">
          <source>getLocalePluralCase</source>
          <target state="translated">getLocalePluralCase</target>
        </trans-unit>
        <trans-unit id="2d5efa7f4e7d044d55781d4873099412af016329" translate="yes" xml:space="preserve">
          <source>getLocaleTimeFormat</source>
          <target state="translated">getLocaleTimeFormat</target>
        </trans-unit>
        <trans-unit id="cb564f6213173cb390e048e3df0ca47fe443e13e" translate="yes" xml:space="preserve">
          <source>getLocaleWeekEndRange</source>
          <target state="translated">getLocaleWeekEndRange</target>
        </trans-unit>
        <trans-unit id="573b9c784ccff77046de4952b9a92834d78c1854" translate="yes" xml:space="preserve">
          <source>getModuleFactory</source>
          <target state="translated">getModuleFactory</target>
        </trans-unit>
        <trans-unit id="e75e130dd554dd9ac5b2ca22c808c6d88b9bad5e" translate="yes" xml:space="preserve">
          <source>getNumberOfCurrencyDigits</source>
          <target state="translated">getNumberOfCurrencyDigits</target>
        </trans-unit>
        <trans-unit id="8be39798163ca2414d10cf691073da0f700302f4" translate="yes" xml:space="preserve">
          <source>getPlatform</source>
          <target state="translated">getPlatform</target>
        </trans-unit>
        <trans-unit id="412738b21562c3e1d99455355e61bd2440b32aba" translate="yes" xml:space="preserve">
          <source>getTestBed</source>
          <target state="translated">getTestBed</target>
        </trans-unit>
        <trans-unit id="64292b1c2b2e13ead8788fc8a2b8edc8c1db4ecd" translate="yes" xml:space="preserve">
          <source>group</source>
          <target state="translated">group</target>
        </trans-unit>
        <trans-unit id="27d5482eebd075de44389774fce28c69f45c8a75" translate="yes" xml:space="preserve">
          <source>h</source>
          <target state="translated">h</target>
        </trans-unit>
        <trans-unit id="e9d97dc587bb666f377577a6522e6524211b6e1c" translate="yes" xml:space="preserve">
          <source>h (1 PM)</source>
          <target state="translated">エイチ</target>
        </trans-unit>
        <trans-unit id="e95ce4459c31d78457704591b5852841bc3d8d44" translate="yes" xml:space="preserve">
          <source>handle invalid routes with a &lt;code&gt;wildcard&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;wildcard&lt;/code&gt; ルートを使用して無効なルートを処理します。</target>
        </trans-unit>
        <trans-unit id="30f088ea6673877c2e2c1edbe7513ff90eda9a6f" translate="yes" xml:space="preserve">
          <source>he</source>
          <target state="translated">he</target>
        </trans-unit>
        <trans-unit id="7d3735bc5be4eddcde5f3524982eda7f8e71c0d8" translate="yes" xml:space="preserve">
          <source>hero-data.service.ts</source>
          <target state="translated">hero-data.service.ts</target>
        </trans-unit>
        <trans-unit id="b7d9b280c193df8227c9c35e909c9b1a03052267" translate="yes" xml:space="preserve">
          <source>hero-detail.component.spec.ts</source>
          <target state="translated">hero-detail.component.spec.ts</target>
        </trans-unit>
        <trans-unit id="70ed9f18b24c676795c5e058d251f751442b65af" translate="yes" xml:space="preserve">
          <source>hero-detail.component.ts</source>
          <target state="translated">hero-detail.component.ts</target>
        </trans-unit>
        <trans-unit id="ceb535ba0602757afb10bd5ad021e933d61ef5fb" translate="yes" xml:space="preserve">
          <source>hero-list.component.spec.ts</source>
          <target state="translated">hero-list.component.spec.ts</target>
        </trans-unit>
        <trans-unit id="06d591e25f2075b1467e090002da2fd96913a07d" translate="yes" xml:space="preserve">
          <source>hero-list.component.ts</source>
          <target state="translated">hero-list.component.ts</target>
        </trans-unit>
        <trans-unit id="aa126847596c4dd96ef6e5ef1ca689a26f4ef162" translate="yes" xml:space="preserve">
          <source>hero.service.spec.ts</source>
          <target state="translated">hero.service.spec.ts</target>
        </trans-unit>
        <trans-unit id="534b91802a64af98f23ae4e4fac953102922c4a6" translate="yes" xml:space="preserve">
          <source>heroes-routing.module.ts</source>
          <target state="translated">heroes-routing.module.ts</target>
        </trans-unit>
        <trans-unit id="a0ddc39dae26589c0bda386abc70a19198044352" translate="yes" xml:space="preserve">
          <source>heroes.component.spec.ts</source>
          <target state="translated">heroes.component.spec.ts</target>
        </trans-unit>
        <trans-unit id="cff5c0afdd603b6150c76db1237113d8731c4f2f" translate="yes" xml:space="preserve">
          <source>heroes.component.ts</source>
          <target state="translated">heroes.component.ts</target>
        </trans-unit>
        <trans-unit id="7dfd164966b5ef3e6a32af96d5c74ce54f173d27" translate="yes" xml:space="preserve">
          <source>heroes.e2e-spec.ts</source>
          <target state="translated">heroes.e2e-spec.ts</target>
        </trans-unit>
        <trans-unit id="45901ca786ffaea3a0e4bf2fa83c2f0dc991a378" translate="yes" xml:space="preserve">
          <source>heroes.module.ts</source>
          <target state="translated">heroes.module.ts</target>
        </trans-unit>
        <trans-unit id="d3fc13dc12d8d7a58e7ae87295e93dbaddb5d36b" translate="yes" xml:space="preserve">
          <source>hh</source>
          <target state="translated">hh</target>
        </trans-unit>
        <trans-unit id="1b63f65aaf166ee130ee01867427411637fc2bf4" translate="yes" xml:space="preserve">
          <source>hh (01 PM)</source>
          <target state="translated">hh (01 PM)</target>
        </trans-unit>
        <trans-unit id="52ab86a87214a453d9f82538264f190854915247" translate="yes" xml:space="preserve">
          <source>hour</source>
          <target state="translated">hour</target>
        </trans-unit>
        <trans-unit id="15cd97c2a1358bcce6adb02fee85927ce1fa2f69" translate="yes" xml:space="preserve">
          <source>hour12</source>
          <target state="translated">hour12</target>
        </trans-unit>
        <trans-unit id="b69a669ab5f2ed15c8a7d19b6f631fca520f532e" translate="yes" xml:space="preserve">
          <source>hour24</source>
          <target state="translated">hour24</target>
        </trans-unit>
        <trans-unit id="2a95e48ee7c034018e6b2cc78e889a99fbd750ea" translate="yes" xml:space="preserve">
          <source>how that works for the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;NgFor&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; built-in directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;NgFor&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; 組み込みディレクティブでそれがどのように機能するか。</target>
        </trans-unit>
        <trans-unit id="9d20a9c0b7d2590e828f72fa549920d540d77ebb" translate="yes" xml:space="preserve">
          <source>i18n pipes</source>
          <target state="translated">アイオーエヌパイプ</target>
        </trans-unit>
        <trans-unit id="6413e837d316aafcf260786cd21a849f88ae3069" translate="yes" xml:space="preserve">
          <source>iOS</source>
          <target state="translated">iOS</target>
        </trans-unit>
        <trans-unit id="87ea5dfc8b8e384d848979496e706390b497e547" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="translated">id</target>
        </trans-unit>
        <trans-unit id="d702f1851496ff5152be6aa5b118ccb344d292fe" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; is set to a value starting with &lt;code&gt;=&lt;/code&gt;, it will only display if the value matches the switch expression exactly,</source>
          <target state="translated">場合 &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; で始まる値に設定されている &lt;code&gt;=&lt;/code&gt; 値が正確にスイッチ式と一致した場合、それだけで表示され、</target>
        </trans-unit>
        <trans-unit id="eebb4040b1568ba95c3e34baf38beb49ee5cedac" translate="yes" xml:space="preserve">
          <source>immutability</source>
          <target state="translated">immutability</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">in</target>
        </trans-unit>
        <trans-unit id="7d2463f90633f954464211ac0098a34816f9b6b8" translate="yes" xml:space="preserve">
          <source>in &lt;code&gt;HeroService&lt;/code&gt; which uses the service to send a message</source>
          <target state="translated">で &lt;code&gt;HeroService&lt;/code&gt; メッセージを送信するサービスを使用します</target>
        </trans-unit>
        <trans-unit id="d3eb495379285739494a8436bfdca77afd08b0c6" translate="yes" xml:space="preserve">
          <source>in &lt;code&gt;MessagesComponent&lt;/code&gt; which displays that message</source>
          <target state="translated">その &lt;code&gt;MessagesComponent&lt;/code&gt; を表示するMessagesComponentで</target>
        </trans-unit>
        <trans-unit id="24b1bea8fb33a45601c0be93f720ebee0eed969b" translate="yes" xml:space="preserve">
          <source>in turn is used by the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service which is used directly by the &lt;a href=&quot;../router/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; in order to navigate between routes. Since all interactions between &lt;a href=&quot;../router/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; and DOM APIs flow through the &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; class, they are all platform-agnostic.</source>
          <target state="translated">次に、ルート間を移動するために&lt;a href=&quot;../router/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;が直接使用する&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;サービスによって使用されます。&lt;a href=&quot;../router/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt;とDOMAPIの間のすべての相互作用は、 &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; クラスを介して流れるため、これらはすべてプラットフォームに依存しません。</target>
        </trans-unit>
        <trans-unit id="145d7c1d9408927934cf584385bc3605b11e61cc" translate="yes" xml:space="preserve">
          <source>in turn is used by the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service which is used directly by the &lt;a href=&quot;../router/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; in order to navigate between routes. Since all interactions between &lt;a href=&quot;../router/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; and DOM apis flow through the &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; class they are all platform independent.</source>
          <target state="translated">次に、ルート間をナビゲートするために&lt;a href=&quot;../router/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt;によって直接使用される&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;サービスによって使用されます。&lt;a href=&quot;../router/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt;とDOM APIの間のすべてのやり取りは &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; クラスを経由するため、それらはすべてプラットフォームに依存しません。</target>
        </trans-unit>
        <trans-unit id="ff754abae51eedcf06407e33d853c9b7762b32d6" translate="yes" xml:space="preserve">
          <source>increment and decrement operators, &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">インクリメントおよびデクリメント演算子、 &lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bca86ef1895eeaad0d226c5b88d0ad7152ff284f" translate="yes" xml:space="preserve">
          <source>init-caps.pipe.spec.ts</source>
          <target state="translated">init-caps.pipe.spec.ts</target>
        </trans-unit>
        <trans-unit id="25fa481fa6d394d4667e110acde7aac48cab2f9e" translate="yes" xml:space="preserve">
          <source>init-caps.pipe.ts</source>
          <target state="translated">init-caps.pipe.ts</target>
        </trans-unit>
        <trans-unit id="9701020516dc3a723b89188d856f0666af402e16" translate="yes" xml:space="preserve">
          <source>inject</source>
          <target state="translated">inject</target>
        </trans-unit>
        <trans-unit id="fab424ae1d74e7c1662294c32741e8d0ca3c4203" translate="yes" xml:space="preserve">
          <source>inject is currently a function because of some Traceur limitation the syntax should eventually becomes &lt;code&gt;it('...', @&lt;a href=&quot;../inject&quot;&gt;Inject&lt;/a&gt; (object: AClass, &lt;a href=&quot;async&quot;&gt;async&lt;/a&gt;: AsyncTestCompleter) =&amp;gt; { ... });&lt;/code&gt;</source>
          <target state="translated">注入は、構文が、最終的になる必要があるので、いくつかのTraceurの制限の現在の関数である &lt;code&gt;it('...', @&lt;a href=&quot;../inject&quot;&gt;Inject&lt;/a&gt; (object: AClass, &lt;a href=&quot;async&quot;&gt;async&lt;/a&gt;: AsyncTestCompleter) =&amp;gt; { ... });&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9b92d6133c60db2d414bd730160dd8bb6863220" translate="yes" xml:space="preserve">
          <source>inject is currently a function because of some Traceur limitation the syntax should eventually becomes &lt;code&gt;it('...', @&lt;a href=&quot;../inject&quot;&gt;Inject&lt;/a&gt; (object: AClass, async: AsyncTestCompleter) =&amp;gt; { ... });&lt;/code&gt;</source>
          <target state="translated">注入は、構文が、最終的になる必要があるので、いくつかのTraceurの制限の現在の関数である &lt;code&gt;it('...', @&lt;a href=&quot;../inject&quot;&gt;Inject&lt;/a&gt; (object: AClass, async: AsyncTestCompleter) =&amp;gt; { ... });&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a5b6a35bd34ddb6a636489d8944aa4e6c4633d6" translate="yes" xml:space="preserve">
          <source>injectable</source>
          <target state="translated">injectable</target>
        </trans-unit>
        <trans-unit id="bcb2564028b7a79531a78ce4dff28acdfddb1a7d" translate="yes" xml:space="preserve">
          <source>injecting &lt;code&gt;MessageService&lt;/code&gt; into the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">注入 &lt;code&gt;MessageService&lt;/code&gt; をに &lt;code&gt;HeroService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14187a7368125e3da3285ae4a6dab1fa336c307e" translate="yes" xml:space="preserve">
          <source>injector</source>
          <target state="translated">injector</target>
        </trans-unit>
        <trans-unit id="140f86aae51ab9e1cda9b4254fe98a74eb54c1a1" translate="yes" xml:space="preserve">
          <source>input</source>
          <target state="translated">input</target>
        </trans-unit>
        <trans-unit id="6a538b0a95fea945fcb70988d6be3e166eb1b18b" translate="yes" xml:space="preserve">
          <source>input (only valid numbers accepted)</source>
          <target state="translated">にゅうりょく</target>
        </trans-unit>
        <trans-unit id="9f33a7c798af6fd6abb28049d9c1b3edfa2fd24a" translate="yes" xml:space="preserve">
          <source>internal</source>
          <target state="translated">internal</target>
        </trans-unit>
        <trans-unit id="bd3e3bae86aed5d98047d91fc3620a79cc02a533" translate="yes" xml:space="preserve">
          <source>interpolation</source>
          <target state="translated">interpolation</target>
        </trans-unit>
        <trans-unit id="9a0068341ddff52f6c15c4b76cb304fc1c3aed61" translate="yes" xml:space="preserve">
          <source>is rejected when an error happens.</source>
          <target state="translated">はエラーが発生したときに拒否されます。</target>
        </trans-unit>
        <trans-unit id="b3dfb73abd6ade6f22a3843cd64e10c483c93700" translate="yes" xml:space="preserve">
          <source>isDevMode</source>
          <target state="translated">isDevMode</target>
        </trans-unit>
        <trans-unit id="269058ff602551f929bc87882e8f31c94ad0b9a4" translate="yes" xml:space="preserve">
          <source>isPlatformBrowser</source>
          <target state="translated">isPlatformBrowser</target>
        </trans-unit>
        <trans-unit id="eedb1c215bd26f5de09d200b152e70f40b97daae" translate="yes" xml:space="preserve">
          <source>isPlatformServer</source>
          <target state="translated">isPlatformServer</target>
        </trans-unit>
        <trans-unit id="e4178ea2398ee18c11d8b72dd05f47aa9e2179bd" translate="yes" xml:space="preserve">
          <source>isPlatformWorkerApp</source>
          <target state="translated">isPlatformWorkerApp</target>
        </trans-unit>
        <trans-unit id="40629429bfc61448a836ee71e964e3d426e33868" translate="yes" xml:space="preserve">
          <source>isPlatformWorkerUi</source>
          <target state="translated">isPlatformWorkerUi</target>
        </trans-unit>
        <trans-unit id="5b1148cd5c20f70bdf0512a657f2a088e797f491" translate="yes" xml:space="preserve">
          <source>isStable examples and caveats</source>
          <target state="translated">isStable の例と注意点</target>
        </trans-unit>
        <trans-unit id="7316c8b2e74870d9d7e9d30bbc28ecf4cdf945ee" translate="yes" xml:space="preserve">
          <source>items</source>
          <target state="translated">items</target>
        </trans-unit>
        <trans-unit id="f851e1596f07e4bf8bb575a8916519c320733992" translate="yes" xml:space="preserve">
          <source>iw</source>
          <target state="translated">iw</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="92defb6308459d8b64755b4735e55787110789b7" translate="yes" xml:space="preserve">
          <source>j (13)</source>
          <target state="translated">j (13)</target>
        </trans-unit>
        <trans-unit id="55aa7e75d4dc88fb05df74b407fdfe857b60591c" translate="yes" xml:space="preserve">
          <source>jasmine.clock with fakeAsync()</source>
          <target state="translated">jasmine.clock with fakeAsync()</target>
        </trans-unit>
        <trans-unit id="37cf566644fdf33ff696a4a5273f7f6b010f88b2" translate="yes" xml:space="preserve">
          <source>jj (13)</source>
          <target state="translated">jj (13)</target>
        </trans-unit>
        <trans-unit id="05d97e6e9834ccf063c552e404b9ecafc5e4d662" translate="yes" xml:space="preserve">
          <source>json</source>
          <target state="translated">json</target>
        </trans-unit>
        <trans-unit id="be6841ea401fc16942d089a270a6ba798a08574a" translate="yes" xml:space="preserve">
          <source>just-in-time (JIT) compilation</source>
          <target state="translated">ジャストインタイムコンパイル</target>
        </trans-unit>
        <trans-unit id="512423cb3a4857a38f472862b51e4ab1a1730f06" translate="yes" xml:space="preserve">
          <source>karma</source>
          <target state="translated">karma</target>
        </trans-unit>
        <trans-unit id="dc9bc57f7884fea8a4384cf52c768663a1f4a255" translate="yes" xml:space="preserve">
          <source>keyframes</source>
          <target state="translated">keyframes</target>
        </trans-unit>
        <trans-unit id="1481d0a0ceb16ea4672fed76a0710306eb9f3a33" translate="yes" xml:space="preserve">
          <source>latest</source>
          <target state="translated">latest</target>
        </trans-unit>
        <trans-unit id="1a790b3b7eec2cec4204e34349904e49faf7e806" translate="yes" xml:space="preserve">
          <source>latest and extended support release (ESR)</source>
          <target state="translated">最新および拡張サポートリリース(ESR)</target>
        </trans-unit>
        <trans-unit id="2e5c514fa77cd29449a00c1be01213f7a66a9711" translate="yes" xml:space="preserve">
          <source>lazy loading</source>
          <target state="translated">怠惰積載</target>
        </trans-unit>
        <trans-unit id="472bf0ea19ba086d2155b3adf7770695f76a27e1" translate="yes" xml:space="preserve">
          <source>lib.d.ts</source>
          <target state="translated">lib.d.ts</target>
        </trans-unit>
        <trans-unit id="00299a408dc3498a3cd7bae6db588f3324654d76" translate="yes" xml:space="preserve">
          <source>library</source>
          <target state="translated">library</target>
        </trans-unit>
        <trans-unit id="232afe00e08393bf6915fde8c48bc34ef468bc26" translate="yes" xml:space="preserve">
          <source>lifecycle hook</source>
          <target state="translated">ライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="8aa3b179b01033866334b54a2bb9e2cd0134ea9c" translate="yes" xml:space="preserve">
          <source>limitTo</source>
          <target state="translated">limitTo</target>
        </trans-unit>
        <trans-unit id="90c50973671d2dc6a4c95cd768a7777cf4ac6e3b" translate="yes" xml:space="preserve">
          <source>link parameters array</source>
          <target state="translated">リンクパラメータ配列</target>
        </trans-unit>
        <trans-unit id="38b62be4bddaa5661c7d6b8e36e28159314df5c7" translate="yes" xml:space="preserve">
          <source>list</source>
          <target state="translated">list</target>
        </trans-unit>
        <trans-unit id="b00a1a3278c3c4be374f52e729b2b00f82c59d49" translate="yes" xml:space="preserve">
          <source>list (enum members become list selections)</source>
          <target state="translated">リスト</target>
        </trans-unit>
        <trans-unit id="037c7bc5300e71f5de80c36bee13dd486308b1b1" translate="yes" xml:space="preserve">
          <source>live example</source>
          <target state="translated">実例</target>
        </trans-unit>
        <trans-unit id="4bcb3c413062d42dec347293e55eba7593a659e4" translate="yes" xml:space="preserve">
          <source>loadChildren string syntax</source>
          <target state="translated">ロードチャイルド文字列構文</target>
        </trans-unit>
        <trans-unit id="302a3f4a0d32fb9b5375f00bb44bf1d12042a0b2" translate="yes" xml:space="preserve">
          <source>local variable name used in the template</source>
          <target state="translated">テンプレート内で使用されるローカル変数名</target>
        </trans-unit>
        <trans-unit id="171f730d39aff083a2f20ae00ac7ff1f0a03179d" translate="yes" xml:space="preserve">
          <source>logger.service.spec.ts</source>
          <target state="translated">logger.service.spec.ts</target>
        </trans-unit>
        <trans-unit id="6bf6cda2b1fcd5eedb77187bc258e56e470956cb" translate="yes" xml:space="preserve">
          <source>logger.service.ts</source>
          <target state="translated">logger.service.ts</target>
        </trans-unit>
        <trans-unit id="171c1e65f95a4d4992c129151e673f844920649a" translate="yes" xml:space="preserve">
          <source>lowercase</source>
          <target state="translated">lowercase</target>
        </trans-unit>
        <trans-unit id="6b0d31c0d563223024da45691584643ac78c96e8" translate="yes" xml:space="preserve">
          <source>m</source>
          <target state="translated">m</target>
        </trans-unit>
        <trans-unit id="398214a1349fb94eb419acb7e061a0208f4cc50f" translate="yes" xml:space="preserve">
          <source>m (5)</source>
          <target state="translated">m (5)</target>
        </trans-unit>
        <trans-unit id="98e364a97dc27da7b9f2f598f7310a8b58462632" translate="yes" xml:space="preserve">
          <source>makeStateKey</source>
          <target state="translated">makeStateKey</target>
        </trans-unit>
        <trans-unit id="f25470201a131e127feab62862c4c9a8b033b071" translate="yes" xml:space="preserve">
          <source>many</source>
          <target state="translated">many</target>
        </trans-unit>
        <trans-unit id="25b300ee83165d300cec2ef12decb11c8214dbe4" translate="yes" xml:space="preserve">
          <source>maximumError</source>
          <target state="translated">maximumError</target>
        </trans-unit>
        <trans-unit id="94a3fa57b8f7b717c36feaeb77dcbfbe5b54ec49" translate="yes" xml:space="preserve">
          <source>maximumWarning</source>
          <target state="translated">maximumWarning</target>
        </trans-unit>
        <trans-unit id="240c4df7250227efd16ebedf6de99c5ab3b51698" translate="yes" xml:space="preserve">
          <source>md</source>
          <target state="translated">md</target>
        </trans-unit>
        <trans-unit id="6f9b9af3cd6e8b8a73c2cdced37fe9f59226e27d" translate="yes" xml:space="preserve">
          <source>message</source>
          <target state="translated">message</target>
        </trans-unit>
        <trans-unit id="3ed3512f1493bfab391d6b868fb4f424b6cdc083" translate="yes" xml:space="preserve">
          <source>microtasks are manually executed by calling &lt;code&gt;&lt;a href=&quot;flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt;,</source>
          <target state="translated">マイクロタスクは、 &lt;code&gt;&lt;a href=&quot;flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt; を呼び出して手動で実行されます。</target>
        </trans-unit>
        <trans-unit id="989e6280ac6115a3f50e827742357505234536e3" translate="yes" xml:space="preserve">
          <source>microtasks are manually executed by calling &lt;code&gt;&lt;a href=&quot;testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt;,</source>
          <target state="translated">マイクロタスクは、 &lt;code&gt;&lt;a href=&quot;testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt; を呼び出して手動で実行されます。</target>
        </trans-unit>
        <trans-unit id="064bc0b8dc8089ef01442be8795ce75b7af11ce6" translate="yes" xml:space="preserve">
          <source>mid.</source>
          <target state="translated">mid.</target>
        </trans-unit>
        <trans-unit id="83ed71b0af2be4dfa5a72e4ec70e66157554a57a" translate="yes" xml:space="preserve">
          <source>minimumError</source>
          <target state="translated">minimumError</target>
        </trans-unit>
        <trans-unit id="1605fb43728ac7aa61cafc9fe6c99943249aac0e" translate="yes" xml:space="preserve">
          <source>minimumWarning</source>
          <target state="translated">minimumWarning</target>
        </trans-unit>
        <trans-unit id="04987fcab72ade3a87a64267b02a2ad9f8f22484" translate="yes" xml:space="preserve">
          <source>minute</source>
          <target state="translated">minute</target>
        </trans-unit>
        <trans-unit id="b8d09b4d8580aacbd9efc4540a9b88d2feb9d7e5" translate="yes" xml:space="preserve">
          <source>mm</source>
          <target state="translated">mm</target>
        </trans-unit>
        <trans-unit id="c822a513ba9ec892da03a22f2e29cbd5577d0270" translate="yes" xml:space="preserve">
          <source>mm (05)</source>
          <target state="translated">mm(05</target>
        </trans-unit>
        <trans-unit id="6adbae8c894eee14931a69b021d6fca6a64932db" translate="yes" xml:space="preserve">
          <source>mo</source>
          <target state="translated">mo</target>
        </trans-unit>
        <trans-unit id="fbd34a2b6e6a9fe8161f97dc435642609ac0bc29" translate="yes" xml:space="preserve">
          <source>module</source>
          <target state="translated">module</target>
        </trans-unit>
        <trans-unit id="021710fa7866431c1dacaa6cd31eeeb47dce64b6" translate="yes" xml:space="preserve">
          <source>month</source>
          <target state="translated">month</target>
        </trans-unit>
        <trans-unit id="5c9bf79865e311955a2af85845f07d12509291de" translate="yes" xml:space="preserve">
          <source>mozRequestAnimationFrame</source>
          <target state="translated">mozRequestAnimationFrame</target>
        </trans-unit>
        <trans-unit id="50f013532a9770a2c2cfdc38b7581dd01df69b70" translate="yes" xml:space="preserve">
          <source>n/a</source>
          <target state="translated">n/a</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="3b392af4fc32b983853c3c7787eefa485ec1d866" translate="yes" xml:space="preserve">
          <source>navigate to the default route when the app launches with an empty path.</source>
          <target state="translated">空のパスでアプリが起動した場合、デフォルトのルートに移動します。</target>
        </trans-unit>
        <trans-unit id="ecbfa235adde27cf8f809e409786f61a01018f00" translate="yes" xml:space="preserve">
          <source>nb</source>
          <target state="translated">nb</target>
        </trans-unit>
        <trans-unit id="8bd0d1dca27f6c3dbfe084b83b7504de75e7efd2" translate="yes" xml:space="preserve">
          <source>ng add</source>
          <target state="translated">エヌジーアド</target>
        </trans-unit>
        <trans-unit id="86f39bbaea8c610d0f49d63b1c334313507b083d" translate="yes" xml:space="preserve">
          <source>ng analytics</source>
          <target state="translated">エヌジーアナリティクス</target>
        </trans-unit>
        <trans-unit id="de55b65c1d82aade511d55c6301e0674a8d9cd08" translate="yes" xml:space="preserve">
          <source>ng build</source>
          <target state="translated">エヌジービルド</target>
        </trans-unit>
        <trans-unit id="5d52a275fe949fbf8038817b3ca93530273b129d" translate="yes" xml:space="preserve">
          <source>ng config</source>
          <target state="translated">エヌジーコンフィグ</target>
        </trans-unit>
        <trans-unit id="058547253a6d45d5184e4bb076b44e4740351fa1" translate="yes" xml:space="preserve">
          <source>ng deploy</source>
          <target state="translated">NGデプロイ</target>
        </trans-unit>
        <trans-unit id="ad73bf3b52f194989c1c41c308d2b3b7805e9b79" translate="yes" xml:space="preserve">
          <source>ng doc</source>
          <target state="translated">NGドキュメント</target>
        </trans-unit>
        <trans-unit id="cea2e7d01887f1822d065de7f8ecd0bae42c9593" translate="yes" xml:space="preserve">
          <source>ng e2e</source>
          <target state="translated">エヌジーツーイー</target>
        </trans-unit>
        <trans-unit id="8fcff7652c7794137597c26190b910f29d8bf56e" translate="yes" xml:space="preserve">
          <source>ng extract-i18n</source>
          <target state="translated">NGエキスI18N</target>
        </trans-unit>
        <trans-unit id="e4218f83ef9b2a4de7b00dd8ba6240b536aa01f6" translate="yes" xml:space="preserve">
          <source>ng generate</source>
          <target state="translated">ng generate</target>
        </trans-unit>
        <trans-unit id="9ba0db7be2478130895770840562c4066a67af45" translate="yes" xml:space="preserve">
          <source>ng help</source>
          <target state="translated">ng help</target>
        </trans-unit>
        <trans-unit id="0602cfd10efccd7d2ca1875841598aa80ca533f9" translate="yes" xml:space="preserve">
          <source>ng lint</source>
          <target state="translated">ng lint</target>
        </trans-unit>
        <trans-unit id="f3fbc6b8fb67a225d93d706ff4a6ca10be33a9d6" translate="yes" xml:space="preserve">
          <source>ng new</source>
          <target state="translated">NGニュー</target>
        </trans-unit>
        <trans-unit id="0849cb1a3be8858bc7ce6a1467a7855c572a7533" translate="yes" xml:space="preserve">
          <source>ng run</source>
          <target state="translated">ng run</target>
        </trans-unit>
        <trans-unit id="b46fdaece8cfd29ac9ab3891faa94f3e9e00180d" translate="yes" xml:space="preserve">
          <source>ng serve</source>
          <target state="translated">ng serve</target>
        </trans-unit>
        <trans-unit id="a02924bc97d299029e240edddae57446e56a40bb" translate="yes" xml:space="preserve">
          <source>ng test</source>
          <target state="translated">ng test</target>
        </trans-unit>
        <trans-unit id="c330cb8927dce5f5f917f347c20d2929856675f3" translate="yes" xml:space="preserve">
          <source>ng update</source>
          <target state="translated">ng update</target>
        </trans-unit>
        <trans-unit id="32dc6bb7b3460f6b8033f42c5c5d5cbfadefb43b" translate="yes" xml:space="preserve">
          <source>ng version</source>
          <target state="translated">NG版</target>
        </trans-unit>
        <trans-unit id="1a0beb5318cab44a07478c65fd3e626cac49f585" translate="yes" xml:space="preserve">
          <source>ng xi18n</source>
          <target state="translated">NGXI18N</target>
        </trans-unit>
        <trans-unit id="81282304dc8b9cbbe8b8d44f14352e39af05df01" translate="yes" xml:space="preserve">
          <source>ng-app</source>
          <target state="translated">ng-app</target>
        </trans-unit>
        <trans-unit id="d76b1e92a173d46230c94fee38fb1a9aa60c7679" translate="yes" xml:space="preserve">
          <source>ng-class</source>
          <target state="translated">ng-class</target>
        </trans-unit>
        <trans-unit id="f3f1ddcc4e5668816c2df1ba95e81884362a51ec" translate="yes" xml:space="preserve">
          <source>ng-click</source>
          <target state="translated">ng-click</target>
        </trans-unit>
        <trans-unit id="c942ad93a5be36ba73a8752c3c44b6797b79ac69" translate="yes" xml:space="preserve">
          <source>ng-controller</source>
          <target state="translated">ng-controller</target>
        </trans-unit>
        <trans-unit id="6b64becf872cae57331692d35ed41771670618e7" translate="yes" xml:space="preserve">
          <source>ng-dirty</source>
          <target state="translated">ng-dirty</target>
        </trans-unit>
        <trans-unit id="daa58cdbcadcfb8fe01c01562e17c56d640d7661" translate="yes" xml:space="preserve">
          <source>ng-hide</source>
          <target state="translated">ng-hide</target>
        </trans-unit>
        <trans-unit id="6f75b47dfcdd89a3ddc84af529aeadf3dbd92d69" translate="yes" xml:space="preserve">
          <source>ng-href</source>
          <target state="translated">ng-href</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
