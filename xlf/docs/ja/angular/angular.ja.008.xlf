<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="17c7f64d3ab0ca40b52599a400116103f22c8a8e" translate="yes" xml:space="preserve">
          <source>Every public member of a &lt;strong&gt;source&lt;/strong&gt; directive is automatically available for binding. You don't have to do anything special to access a directive member in a template expression or statement.</source>
          <target state="translated">&lt;strong&gt;ソース&lt;/strong&gt;ディレクティブのすべてのパブリックメンバーは、バインドに自動的に使用できます。テンプレート式またはステートメントのディレクティブメンバーにアクセスするために特別なことを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="6959a0f4b289947cd2d331836fef67bd073a351f" translate="yes" xml:space="preserve">
          <source>Every section header tag is also an anchor point. Another guide page could add a link to this section by writing:</source>
          <target state="translated">すべてのセクションのヘッダータグはアンカーポイントでもあります。別のガイドページでは、このセクションへのリンクを記述することで追加することができます。</target>
        </trans-unit>
        <trans-unit id="c8e693ec5796b6575855ec18bba79c7fff143e85" translate="yes" xml:space="preserve">
          <source>Every time the user opens or refreshes the application, the Angular service worker checks for updates to the app by looking for updates to the &lt;code&gt;ngsw.json&lt;/code&gt; manifest. If an update is found, it is downloaded and cached automatically, and will be served the next time the application is loaded.</source>
          <target state="translated">ユーザーがアプリケーションを開いたり更新したりするたびに、Angular Service Workerは &lt;code&gt;ngsw.json&lt;/code&gt; マニフェストの更新を探して、アプリの更新を確認します。更新が見つかると、自動的にダウンロードおよびキャッシュされ、次にアプリケーションがロードされたときに提供されます。</target>
        </trans-unit>
        <trans-unit id="60c10c60832a627bfc41ff772bb8e682f844116f" translate="yes" xml:space="preserve">
          <source>Every time the user types in the textbox, the binding calls &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; with the textbox value, a &quot;search term&quot;. The &lt;code&gt;searchTerms&lt;/code&gt; becomes an &lt;code&gt;Observable&lt;/code&gt; emitting a steady stream of search terms.</source>
          <target state="translated">ユーザーがテキストボックスに入力するたびに、バインディングはテキストボックスの値「検索語」を使用して &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; を呼び出します。 &lt;code&gt;searchTerms&lt;/code&gt; なり &lt;code&gt;Observable&lt;/code&gt; 検索用語の安定した流れを放出します。</target>
        </trans-unit>
        <trans-unit id="719bbd11a0313bf1c9ef5a7c2d3579068b1524c6" translate="yes" xml:space="preserve">
          <source>Every time the user types in the textbox, the binding calls &lt;code&gt;search()&lt;/code&gt; with the textbox value, a &quot;search term&quot;. The &lt;code&gt;searchTerms&lt;/code&gt; becomes an &lt;code&gt;Observable&lt;/code&gt; emitting a steady stream of search terms.</source>
          <target state="translated">ユーザーがテキストボックスに入力するたびに、バインディングはテキストボックスの値である「検索語」を使用して &lt;code&gt;search()&lt;/code&gt; を呼び出します。 &lt;code&gt;searchTerms&lt;/code&gt; なり &lt;code&gt;Observable&lt;/code&gt; 検索用語の安定した流れを放出します。</target>
        </trans-unit>
        <trans-unit id="cca86dc184544bd99fc49e5f49f29bd3f1cf36a8" translate="yes" xml:space="preserve">
          <source>Every time the value of a form control changes, Angular runs validation and generates either a list of validation errors that results in an INVALID status, or null, which results in a VALID status.</source>
          <target state="translated">フォームコントロールの値が変わるたびにAngularはバリデーションを実行し、INVALIDステータスになるバリデーションエラーのリストか、VALIDステータスになるNULLのどちらかを生成します。</target>
        </trans-unit>
        <trans-unit id="2b78a4e000844a3c8634d1a650f3134c90e5f8f0" translate="yes" xml:space="preserve">
          <source>Every time the value of a form control changes, Angular runs validation and generates either a list of validation errors, which results in an INVALID status, or null, which results in a VALID status.</source>
          <target state="translated">フォームコントロールの値が変更されるたびに、Angularはバリデーションを実行し、バリデーションエラーのリストを生成します。</target>
        </trans-unit>
        <trans-unit id="dd09c3f326ebf515fdc2fa5975f51318b625c562" translate="yes" xml:space="preserve">
          <source>Every view that matches is rendered.</source>
          <target state="translated">一致するすべてのビューがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="c9ea72aa6a33f1cea5f19cd4eda459ed163d0bc3" translate="yes" xml:space="preserve">
          <source>Everything &lt;em&gt;outside&lt;/em&gt; the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; string stays with the host element (the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;) as it moves inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;. In this example, the &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]=&quot;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&quot;&lt;/code&gt; stays on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 文字列の&lt;em&gt;外に&lt;/em&gt;あるものはすべて、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; の内部に移動しても、ホスト要素（ &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ）に残ります。この例では、 &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]=&quot;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&quot;&lt;/code&gt; &lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt; ] = &quot; &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt; &quot;は &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; のままです。</target>
        </trans-unit>
        <trans-unit id="fb2ff9daa9bdc07b38c6598ad4570003335bba50" translate="yes" xml:space="preserve">
          <source>Everything &lt;em&gt;outside&lt;/em&gt; the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; string stays with the host element (the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;) as it moves inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;. In this example, the &lt;code&gt;[class.odd]=&quot;odd&quot;&lt;/code&gt; stays on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 文字列の&lt;em&gt;外側&lt;/em&gt;はすべて、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 内を移動するときに、ホスト要素（ &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ）に残ります。この例では、 &lt;code&gt;[class.odd]=&quot;odd&quot;&lt;/code&gt; は &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; にとどまります。</target>
        </trans-unit>
        <trans-unit id="a52acc5c2622b4afcf25f3277cbd5a9d6275504c" translate="yes" xml:space="preserve">
          <source>Everything DOM and browser related, especially the pieces that help render into the DOM. This package also includes the &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory()&lt;/a&gt;&lt;/code&gt; method for bootstrapping applications for production builds that pre-compile with &lt;a href=&quot;aot-compiler&quot;&gt;AOT&lt;/a&gt;.</source>
          <target state="translated">DOMとブラウザに関連するすべてのもの、特にDOMへのレンダリングに役立つ部分。このパッケージには、&lt;a href=&quot;aot-compiler&quot;&gt;AOT&lt;/a&gt;でプリコンパイルされるプロダクションビルドのアプリケーションをブートストラップするための &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory()&lt;/a&gt;&lt;/code&gt; メソッドも含まれています。</target>
        </trans-unit>
        <trans-unit id="b90b6c1815046c1b69502aa03c42442606bb3e15" translate="yes" xml:space="preserve">
          <source>Everything DOM and browser related, especially the pieces that help render into the DOM. This package also includes the &lt;code&gt;bootstrapModuleFactory()&lt;/code&gt; method for bootstrapping applications for production builds that pre-compile with &lt;a href=&quot;aot-compiler&quot;&gt;AOT&lt;/a&gt;.</source>
          <target state="translated">DOMとブラウザーに関連するすべてのもの、特にDOMへのレンダリングに役立つ部分。このパッケージには、&lt;a href=&quot;aot-compiler&quot;&gt;AOT&lt;/a&gt;でプリコンパイルする本番ビルドのアプリケーションをブートストラップするための &lt;code&gt;bootstrapModuleFactory()&lt;/code&gt; メソッドも含まれています。</target>
        </trans-unit>
        <trans-unit id="7fd19dd2368b5260e38d43ada7e94513c17625e5" translate="yes" xml:space="preserve">
          <source>Everything seems fine while you move about &lt;em&gt;within&lt;/em&gt; the app. But you'll see the problem right away if you refresh the browser or paste a link to an app page (called a &quot;deep link&quot;) into the browser address bar.</source>
          <target state="translated">アプリ&lt;em&gt;内&lt;/em&gt;を移動している間、すべてが正常に見えます。ただし、ブラウザーを更新するか、アプリのページへのリンク（「ディープリンク」と呼ばれます）をブラウザーのアドレスバーに貼り付けると、すぐに問題が発生します。</target>
        </trans-unit>
        <trans-unit id="476f59850ff759c08ef96a5b6f90743c095365fc" translate="yes" xml:space="preserve">
          <source>Everything that happens in the application runs inside the Angular zone. This is true whether the event originated in AngularJS or Angular code. The zone triggers Angular change detection after every event.</source>
          <target state="translated">アプリケーションで起こることはすべてAngularゾーン内で実行されます。これはイベントがAngularJSで発生したものであってもAngularコードで発生したものであっても当てはまります。ゾーンはすべてのイベントの後にAngularの変更検出をトリガーします。</target>
        </trans-unit>
        <trans-unit id="94116f58435801fd0b0973d23f7869dc10862659" translate="yes" xml:space="preserve">
          <source>Examine how &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; reports control states using CSS classes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; がCSSクラスを使用して制御状態をレポートする方法を調べます。</target>
        </trans-unit>
        <trans-unit id="9904fc0bd7ef239d341a3f70df40d72cd9447a03" translate="yes" xml:space="preserve">
          <source>Examine the &lt;code&gt;src/app/app.component.ts&lt;/code&gt; file which defines two nested &lt;em&gt;#docregions&lt;/em&gt;.</source>
          <target state="translated">2つのネストされた&lt;em&gt;#docregions&lt;/em&gt;を定義する &lt;code&gt;src/app/app.component.ts&lt;/code&gt; ファイルを調べます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5bf18639605f3caf4766a97251e8f8fcdd388c0f" translate="yes" xml:space="preserve">
          <source>Examine the body and attempt to infer an appropriate MIME type for it.</source>
          <target state="translated">ボディを調べて、それに適した MIME タイプを推論しようとする。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="bc3538d0e01fab1a96b015d871befd4a7a613a0f" translate="yes" xml:space="preserve">
          <source>Example 1: an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例1： &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c56ea49918b9baed94cf4bc0ee9f324efc8841a" translate="yes" xml:space="preserve">
          <source>Example 2</source>
          <target state="translated">例2</target>
        </trans-unit>
        <trans-unit id="c208d29c3a351702191cb12e42073c3aa92627a0" translate="yes" xml:space="preserve">
          <source>Example 2: a disabled button</source>
          <target state="translated">例2:無効化されたボタン</target>
        </trans-unit>
        <trans-unit id="115e72d033a5d29cdf0b22ab6d79b83ce19f039c" translate="yes" xml:space="preserve">
          <source>Example Input Values</source>
          <target state="translated">入力値の例</target>
        </trans-unit>
        <trans-unit id="f190c0373d03310809073d92f082eb8d1d07c49f" translate="yes" xml:space="preserve">
          <source>Example URLs:</source>
          <target state="translated">URLの例。</target>
        </trans-unit>
        <trans-unit id="64675219f6669783f53ac9c46b6042ac0e46004c" translate="yes" xml:space="preserve">
          <source>Example Value</source>
          <target state="translated">値の例</target>
        </trans-unit>
        <trans-unit id="7039ac7707efb335a98c12c3a2c84c943ba9b684" translate="yes" xml:space="preserve">
          <source>Example app structure</source>
          <target state="translated">アプリの構造例</target>
        </trans-unit>
        <trans-unit id="6dbe7c12acff1a0a7d7daadf46e173b960486b3e" translate="yes" xml:space="preserve">
          <source>Example applications</source>
          <target state="translated">アプリケーション例</target>
        </trans-unit>
        <trans-unit id="23197357f47cd7e9bcf255c1cd16f93e563c65f5" translate="yes" xml:space="preserve">
          <source>Example as TypeScript Decorator</source>
          <target state="translated">TypeScript デコレーターとしての例</target>
        </trans-unit>
        <trans-unit id="c96a08d329d79a2b34cde16eedb321e8c9af503a" translate="yes" xml:space="preserve">
          <source>Example of bad code</source>
          <target state="translated">不良コードの例</target>
        </trans-unit>
        <trans-unit id="0edfaaea0352e467e77e2d8e3cc50c76e32a8be0" translate="yes" xml:space="preserve">
          <source>Example patterns:</source>
          <target state="translated">パターン例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="003cb62ea56f8a36ffee819f126d05f79c0725ab" translate="yes" xml:space="preserve">
          <source>Example: A Popup Service</source>
          <target state="translated">例 ポップアップサービス</target>
        </trans-unit>
        <trans-unit id="09d0ce43ac10b8ef3a0e2a262cbbd56d1d6de622" translate="yes" xml:space="preserve">
          <source>Example: Applying two formats by chaining pipes</source>
          <target state="translated">例:パイプを連結して2つのフォーマットを適用する パイプを連結して2つのフォーマットを適用</target>
        </trans-unit>
        <trans-unit id="5341714c149febad292004a1083fa91109f79478" translate="yes" xml:space="preserve">
          <source>Example: Formatting a date</source>
          <target state="translated">例。日付の書式設定</target>
        </trans-unit>
        <trans-unit id="8387cef7fab899dea39564e70e1b77a58bdb770e" translate="yes" xml:space="preserve">
          <source>Example: Transforming a value exponentially</source>
          <target state="translated">例.値を指数関数的に変換する</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="8a5c84373e05e765edba8087863e2d37b82fce37" translate="yes" xml:space="preserve">
          <source>Examples are given in &lt;code&gt;en-US&lt;/code&gt; locale.</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; ロケールで例を示します。</target>
        </trans-unit>
        <trans-unit id="1a7d33f1e6ba692996c2f56fc305909ff9aba274" translate="yes" xml:space="preserve">
          <source>Examples of such scoped &lt;code&gt;HeroService&lt;/code&gt; singletons appear throughout the accompanying sample code, including &lt;code&gt;HeroBiosComponent&lt;/code&gt;, &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;, and &lt;code&gt;HeroesBaseComponent&lt;/code&gt;. Each of these components has its own &lt;code&gt;HeroService&lt;/code&gt; instance managing its own independent collection of heroes.</source>
          <target state="translated">そのようなスコープの例 &lt;code&gt;HeroService&lt;/code&gt; のシングルトンには、添付のサンプルコードを通して見える &lt;code&gt;HeroBiosComponent&lt;/code&gt; 、 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 、及び &lt;code&gt;HeroesBaseComponent&lt;/code&gt; 。これらの各コンポーネントには、独自のヒーローのコレクションを管理する独自の &lt;code&gt;HeroService&lt;/code&gt; インスタンスがあります。</target>
        </trans-unit>
        <trans-unit id="838e028f3df9fbbcfff682bd27b456678e438def" translate="yes" xml:space="preserve">
          <source>Execute specs whose names match the pattern, which is internally compiled to a RegExp.</source>
          <target state="translated">内部的に RegExp にコンパイルされたパターンと一致する名前のスペックを実行します。</target>
        </trans-unit>
        <trans-unit id="3f48849cd5523c2b69943155168b9778d339d47f" translate="yes" xml:space="preserve">
          <source>Executes a queried inner animation element within an animation sequence.</source>
          <target state="translated">アニメーションシーケンス内で、問い合わせのあった内側のアニメーション要素を実行します。</target>
        </trans-unit>
        <trans-unit id="61fe7283501d71d99c4ec0fd7a0535276f539aee" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;fn&lt;/code&gt; function synchronously in Angular's parent zone and returns value returned by the function.</source>
          <target state="translated">Angularの親ゾーンで同期的に &lt;code&gt;fn&lt;/code&gt; 関数を実行し、関数から返された値を返します。</target>
        </trans-unit>
        <trans-unit id="c46f1081e2a78d1668459efc5a4bfbdd070dbc68" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;fn&lt;/code&gt; function synchronously within the Angular zone and returns value returned by the function.</source>
          <target state="translated">Angularゾーン内で同期的に &lt;code&gt;fn&lt;/code&gt; 関数を実行し、関数から返された値を返します。</target>
        </trans-unit>
        <trans-unit id="d5ccdb0421f01b4d923f1b0285c7aef4a7e41120" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;fn&lt;/code&gt; function synchronously within the Angular zone as a task and returns value returned by the function.</source>
          <target state="translated">実行 &lt;code&gt;fn&lt;/code&gt; 同期関数によって返されるタスクと戻り値として角度ゾーン内の機能。</target>
        </trans-unit>
        <trans-unit id="14cc91675585ad5953e8dc0628dacd93df3a1453" translate="yes" xml:space="preserve">
          <source>Existing &lt;code&gt;token&lt;/code&gt; to return. (Equivalent to &lt;code&gt;injector.get(&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;)&lt;/code&gt;)</source>
          <target state="translated">返す既存の &lt;code&gt;token&lt;/code&gt; 。（ &lt;code&gt;injector.get(&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;)&lt;/code&gt; と同等）</target>
        </trans-unit>
        <trans-unit id="ef39195d79100e0a275c9f6e2f9223f4fc09340c" translate="yes" xml:space="preserve">
          <source>Existing &lt;code&gt;token&lt;/code&gt; to return. (Equivalent to &lt;code&gt;injector.get(useExisting)&lt;/code&gt;)</source>
          <target state="translated">返す既存の &lt;code&gt;token&lt;/code&gt; 。（ &lt;code&gt;injector.get(useExisting)&lt;/code&gt; と同等）</target>
        </trans-unit>
        <trans-unit id="320f39c06ef464dd0024c09f761558945533dc7d" translate="yes" xml:space="preserve">
          <source>ExistingProvider</source>
          <target state="translated">ExistingProvider</target>
        </trans-unit>
        <trans-unit id="cc2dec566751219059d9f8763a354f8762f0a111" translate="yes" xml:space="preserve">
          <source>ExistingSansProvider</source>
          <target state="translated">ExistingSansProvider</target>
        </trans-unit>
        <trans-unit id="4c4dcf4591979506d035a6ac9394f2530bb0a00e" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given URL, and return its mock.</source>
          <target state="translated">与えられた URL にマッチするリクエストが一つだけ行われたことを期待して、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="09745b035a7bff7b32ffdade443909f9f0114f0d" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given condition, and return its mock.</source>
          <target state="translated">与えられた条件にマッチするリクエストが一つあったことを期待して、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="a6eb24a59dddd06afae77ef7bb648d8870f43d27" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given parameters, and return its mock.</source>
          <target state="translated">与えられたパラメータにマッチする単一のリクエストが行われたことを期待し、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="0b87e12001cb43938518503996b08243ca0cf034" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given predicate function, and return its mock.</source>
          <target state="translated">与えられた述語関数にマッチするリクエストが一つだけ行われたことを期待し、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="f422cf2a93648f51c72b81baaadce94d4f9a23f5" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given URL.</source>
          <target state="translated">指定された URL に一致するリクエストが行われていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="e8d12406299d4ed82875bbb2f88105f188e80475" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given condition.</source>
          <target state="translated">指定された条件に一致するリクエストが行われていないことを期待します。</target>
        </trans-unit>
        <trans-unit id="ba3b284a816662d49b2560b24229c09966daf2d1" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given parameters.</source>
          <target state="translated">与えられたパラメータにマッチするリクエストが行われていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="4efe1b49671948d5bd952bb7856f5548f402044a" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given predicate function.</source>
          <target state="translated">与えられた述語関数にマッチするリクエストが行われていないことを期待します。</target>
        </trans-unit>
        <trans-unit id="c36ea39d115e54d57c3e4f6133d6e9fe7be806a9" translate="yes" xml:space="preserve">
          <source>Expecting and answering requests</source>
          <target state="translated">リクエストの期待と回答</target>
        </trans-unit>
        <trans-unit id="0d113a5dec63637c0ea24bb949a1452cadd75bd8" translate="yes" xml:space="preserve">
          <source>Experienced developers agree that components should be cheap and safe to construct.</source>
          <target state="translated">経験豊富な開発者は、コンポーネントは安くて安全に構築できるものであるべきだということに同意しています。</target>
        </trans-unit>
        <trans-unit id="6d79bd8554e5a6e5e29f39873b7262a75b37e699" translate="yes" xml:space="preserve">
          <source>Experiment with these possibilities at your leisure.</source>
          <target state="translated">これらの可能性を自由に試してみてください。</target>
        </trans-unit>
        <trans-unit id="3ce628bd2e4cc1e453d4ba8b9ab47f34a24d260e" translate="yes" xml:space="preserve">
          <source>Explicit, created in component class</source>
          <target state="translated">明示的、コンポーネントクラスで作成</target>
        </trans-unit>
        <trans-unit id="80c09ed1f416c30ad57128663f3768f47a74d272" translate="yes" xml:space="preserve">
          <source>Explicitly call &lt;a href=&quot;../api/core/changedetectorref#detectchanges&quot;&gt;&lt;code&gt;ChangeDetectorRef.detectChanges()&lt;/code&gt;&lt;/a&gt; to force the update.</source>
          <target state="translated">&lt;a href=&quot;../api/core/changedetectorref#detectchanges&quot;&gt; &lt;code&gt;ChangeDetectorRef.detectChanges()&lt;/code&gt; &lt;/a&gt;を明示的に呼び出して、更新を強制します。</target>
        </trans-unit>
        <trans-unit id="151cc3279d56b07805e6451e1fc2e21759b64665" translate="yes" xml:space="preserve">
          <source>Explore Angular's inventory of built-in pipes in the &lt;a href=&quot;api?type=pipe&quot;&gt;API Reference&lt;/a&gt;. Try writing a custom pipe and perhaps contributing it to the community.</source>
          <target state="translated">Angularの組み込みパイプの一覧を&lt;a href=&quot;api?type=pipe&quot;&gt;APIリファレンスで調べてください&lt;/a&gt;。カスタムパイプを作成して、コミュニティに貢献してみてください。</target>
        </trans-unit>
        <trans-unit id="0b142311de0506d50c14f42d89ab5fba534af5e4" translate="yes" xml:space="preserve">
          <source>Explore the options and combinations on your own.</source>
          <target state="translated">選択肢や組み合わせを自分で探ってみましょう。</target>
        </trans-unit>
        <trans-unit id="8b8bee1bb624226f4402d695d2a30ce6ea26ede4" translate="yes" xml:space="preserve">
          <source>Explore the translated example app</source>
          <target state="translated">翻訳された例のアプリを探る</target>
        </trans-unit>
        <trans-unit id="e2f8ba18099b12842f93d8420df1de465b8b78d8" translate="yes" xml:space="preserve">
          <source>Exponential backoff</source>
          <target state="translated">指数的バックオフ</target>
        </trans-unit>
        <trans-unit id="4e81c81e62d9821e35d6968289a5da62123f95a5" translate="yes" xml:space="preserve">
          <source>Exponential backoff is a technique in which you retry an API after failure, making the time in between retries longer after each consecutive failure, with a maximum number of retries after which the request is considered to have failed. This can be quite complex to implement with promises and other methods of tracking AJAX calls. With observables, it is very easy:</source>
          <target state="translated">指数的バックオフは失敗した後にAPIを再試行するテクニックで、リクエストが失敗したとみなされた後の最大再試行回数で、各連続した失敗の後に再試行の間の時間を長くします。これはプロミスとAJAXコールを追跡する他のメソッドで実装するには非常に複雑になります。観測値を使えば、非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="b2d600564a4eeee05a74ffc3d3b30646d2efbd86" translate="yes" xml:space="preserve">
          <source>Export &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes that components in &lt;em&gt;other&lt;/em&gt; NgModules are able to reference in their templates. These are your &lt;em&gt;public&lt;/em&gt; classes. If you don't export a declarable class, it stays &lt;em&gt;private&lt;/em&gt;, visible only to other components declared in this NgModule.</source>
          <target state="translated">&lt;em&gt;他の&lt;/em&gt; NgModuleのコンポーネントがテンプレートで参照できる&lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;宣言可能な&lt;/a&gt;クラスをエクスポートします。これらは&lt;em&gt;公開&lt;/em&gt;クラスです。宣言可能&lt;em&gt;な&lt;/em&gt;クラスをエクスポートしない場合、クラスは&lt;em&gt;プライベートの&lt;/em&gt;ままで、このNgModuleで宣言された他のコンポーネントからのみ可視です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3f8b89ece198f478a08332010ebd982d8d15de3" translate="yes" xml:space="preserve">
          <source>Export it from the file where you wrote it.</source>
          <target state="translated">書いたファイルからエクスポートします。</target>
        </trans-unit>
        <trans-unit id="01d9a0ac1caef5b7463f6a6cc45c04c774154790" translate="yes" xml:space="preserve">
          <source>Exported declarations are the module's &lt;em&gt;public API&lt;/em&gt;. A component in another module can &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;use&lt;/a&gt;&lt;em&gt;this&lt;/em&gt; module's &lt;code&gt;UserComponent&lt;/code&gt; if it imports this module and this module exports &lt;code&gt;UserComponent&lt;/code&gt;.</source>
          <target state="translated">エクスポートされた宣言は、モジュールの&lt;em&gt;パブリックAPI&lt;/em&gt;です。別のモジュール内のコンポーネントができます&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;使用して&lt;/a&gt;&lt;em&gt;、この&lt;/em&gt;モジュールの &lt;code&gt;UserComponent&lt;/code&gt; を、それがこのモジュールと、このモジュールの輸出輸入場合 &lt;code&gt;UserComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="9e7c4c507448f86f52a7f79a35434aa602954321" translate="yes" xml:space="preserve">
          <source>Exports &lt;code&gt;&lt;a href=&quot;../browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; with additional &lt;a href=&quot;../../../guide/glossary#provider&quot;&gt;dependency-injection providers&lt;/a&gt; for use with animations. See &lt;a href=&quot;../../../guide/animations&quot;&gt;Animations&lt;/a&gt;.</source>
          <target state="translated">アニメーションで使用するために、追加の&lt;a href=&quot;../../../guide/glossary#provider&quot;&gt;依存性注入プロバイダー&lt;/a&gt;と共に &lt;code&gt;&lt;a href=&quot;../browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をエクスポートします。&lt;a href=&quot;../../../guide/animations&quot;&gt;アニメーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b48d98d31db3b67ff452be710bcaa0679dddb978" translate="yes" xml:space="preserve">
          <source>Exports &lt;code&gt;&lt;a href=&quot;browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; with additional &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;dependency-injection providers&lt;/a&gt; for use with animations. See &lt;a href=&quot;../../guide/animations&quot;&gt;Animations&lt;/a&gt;.</source>
          <target state="translated">アニメーションで使用するために、追加の&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;依存性注入プロバイダー&lt;/a&gt;と共に &lt;code&gt;&lt;a href=&quot;browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をエクスポートします。&lt;a href=&quot;../../guide/animations&quot;&gt;アニメーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="316709e9e82751f5c087b35a27f43016b8c09df7" translate="yes" xml:space="preserve">
          <source>Exports a constant named &lt;code&gt;slideInAnimation&lt;/code&gt; set to an animation trigger named &lt;code&gt;routeAnimation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slideInAnimation&lt;/code&gt; セットという名前の定数をrouteAnimationという名前のアニメーショントリガーに &lt;code&gt;routeAnimation&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="41502da065d88fa29c02515549f2ef881718d2ef" translate="yes" xml:space="preserve">
          <source>Exports a constant named &lt;code&gt;slideInAnimation&lt;/code&gt; set to an animation trigger named &lt;em&gt;&lt;code&gt;routeAnimation&lt;/code&gt;&lt;/em&gt;;</source>
          <target state="translated">&lt;code&gt;slideInAnimation&lt;/code&gt; セットという名前の定数をrouteAnimationという名前のアニメーショントリガーに&lt;em&gt; &lt;code&gt;routeAnimation&lt;/code&gt; &lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b3015612e62943ffe8d3d9bd16015f003caf27a4" translate="yes" xml:space="preserve">
          <source>Exports all the basic Angular directives and pipes, such as &lt;code&gt;&lt;a href=&quot;common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt;, and so on. Re-exported by &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is included automatically in the root &lt;code&gt;AppModule&lt;/code&gt; when you create a new app with the CLI &lt;code&gt;new&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; などのすべての基本的なAngularディレクティブとパイプをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドを使用して新しいアプリを作成すると、ルート &lt;code&gt;AppModule&lt;/code&gt; に自動的に含まれる &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; によって再エクスポートされます。</target>
        </trans-unit>
        <trans-unit id="2694c141ab9c7bb5e48066c90e9cad70c5d09313" translate="yes" xml:space="preserve">
          <source>Exports all the basic Angular directives and pipes, such as &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt;, and so on. Re-exported by &lt;code&gt;&lt;a href=&quot;../platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is included automatically in the root &lt;code&gt;AppModule&lt;/code&gt; when you create a new app with the CLI &lt;code&gt;new&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; などのすべての基本的なAngularディレクティブとパイプをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドを使用して新しいアプリを作成すると、ルート &lt;code&gt;AppModule&lt;/code&gt; に自動的に含まれる &lt;code&gt;&lt;a href=&quot;../platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; によって再エクスポートされます。</target>
        </trans-unit>
        <trans-unit id="6795e3188c42a45041eef8aa7e1f578ba6e66b5a" translate="yes" xml:space="preserve">
          <source>Exports required infrastructure for all Angular apps. Included by default in all Angular apps created with the CLI &lt;code&gt;new&lt;/code&gt; command. Re-exports &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt;, making their exports and providers available to all apps.</source>
          <target state="translated">すべてのAngularアプリに必要なインフラストラクチャをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドで作成されたすべてのAngularアプリにデフォルトで含まれています。 &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; を再エクスポートし、それらのエクスポートとプロバイダーをすべてのアプリで利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="1658cf2c7cfb18562b2e6455248a43094677b401" translate="yes" xml:space="preserve">
          <source>Exports required infrastructure for all Angular apps. Included by default in all Angular apps created with the CLI &lt;code&gt;new&lt;/code&gt; command. Re-exports &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt;, making their exports and providers available to all apps.</source>
          <target state="translated">すべてのAngularアプリに必要なインフラストラクチャをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドで作成されたすべてのAngularアプリにデフォルトで含まれています。 &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; を再エクスポートし、それらのエクスポートとプロバイダーをすべてのアプリで利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="f2ba8fed8d15900671cce4edf095bd055d04eaf8" translate="yes" xml:space="preserve">
          <source>Exports the required infrastructure and directives for reactive forms, making them available for import by NgModules that import this module.</source>
          <target state="translated">リアクティブフォームに必要なインフラストラクチャとディレクティブをエクスポートし、このモジュールをインポートする NgModules からインポートできるようにします。</target>
        </trans-unit>
        <trans-unit id="cf940b173d6f27a08c3413c736e512605c260d5a" translate="yes" xml:space="preserve">
          <source>Exports the required providers and directives for template-driven forms, making them available for import by NgModules that import this module.</source>
          <target state="translated">テンプレート駆動型フォームに必要なプロバイダとディレクティブをエクスポートし、このモジュールをインポートする NgModules がインポートできるようにします。</target>
        </trans-unit>
        <trans-unit id="54ca0296387f3de05c9edda3ac42e8892fc955b4" translate="yes" xml:space="preserve">
          <source>Exposes a set of functions in the global namespace which are useful for debugging the current state of your application. These functions are exposed via the global &lt;code&gt;ng&lt;/code&gt; &quot;namespace&quot; variable automatically when you import from &lt;code&gt;@angular/core&lt;/code&gt; and run your application in development mode. These functions are not exposed when the application runs in a production mode.</source>
          <target state="translated">アプリケーションの現在の状態をデバッグするのに役立つ一連の関数をグローバル名前空間に公開します。これらの関数は、 &lt;code&gt;@angular/core&lt;/code&gt; からインポートしてアプリケーションを開発モードで実行すると、グローバル &lt;code&gt;ng&lt;/code&gt; 「namespace」変数を介して自動的に公開されます。これらの関数は、アプリケーションが実稼働モードで実行されている場合は公開されません。</target>
        </trans-unit>
        <trans-unit id="4a41b115841e5fbc7cf1b18afb3b83dcc3891f13" translate="yes" xml:space="preserve">
          <source>Expression binding</source>
          <target state="translated">表情のバインディング</target>
        </trans-unit>
        <trans-unit id="1c2f7d3b6d050a5090df922638bfad2dec21b4cc" translate="yes" xml:space="preserve">
          <source>Expression context</source>
          <target state="translated">表現コンテキスト</target>
        </trans-unit>
        <trans-unit id="251f6bb4517daac85b87bb0755a86fb3c179c9de" translate="yes" xml:space="preserve">
          <source>Expression form not supported</source>
          <target state="translated">表現形式はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="7ea5c0a470ed5a320359df1794918f299c3b7f04" translate="yes" xml:space="preserve">
          <source>Expression guidelines</source>
          <target state="translated">表現ガイドライン</target>
        </trans-unit>
        <trans-unit id="5be453a082738df0fbb95e05d3e768fb61344326" translate="yes" xml:space="preserve">
          <source>Expression syntax limitations</source>
          <target state="translated">表現構文の制限</target>
        </trans-unit>
        <trans-unit id="7b223b9fc21308f80b1f8910f97dd7bff5c30ac0" translate="yes" xml:space="preserve">
          <source>Expression: &lt;code&gt;&amp;lt;comp [name]=&quot;username&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">式： &lt;code&gt;&amp;lt;comp [name]=&quot;username&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67424e47eeb543e15096b4627ceaf8f617ded945" translate="yes" xml:space="preserve">
          <source>Expressions should finish quickly or the user experience may drag, especially on slower devices. Consider caching values when their computation is expensive.</source>
          <target state="translated">式を素早く終了させないと、特に遅いデバイスではユーザーエクスペリエンスが低下する可能性があります。値の計算にコストがかかる場合は、値のキャッシュを検討してください。</target>
        </trans-unit>
        <trans-unit id="655f8acf112128c4c1e62e2d49df9d368e294885" translate="yes" xml:space="preserve">
          <source>Extend the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag with a template reference variable that you can use to access the input box's Angular control from within the template. In the example, the variable is &lt;code&gt;#name=&quot;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">テンプレート内から入力ボックスのAngularコントロールにアクセスするために使用できるテンプレート参照変数を使用して &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグを拡張します。この例では、変数は &lt;code&gt;#name=&quot;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; = &quot; ngModel &quot;です。</target>
        </trans-unit>
        <trans-unit id="4e67701453b98c6aa13406f479207d8dbab6eeea" translate="yes" xml:space="preserve">
          <source>Extend the &lt;code&gt;AuthGuard&lt;/code&gt; to protect when navigating between the &lt;code&gt;admin&lt;/code&gt; routes. Open &lt;code&gt;auth.guard.ts&lt;/code&gt; and add the &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; interface to the imported tokens from the router package.</source>
          <target state="translated">&lt;code&gt;AuthGuard&lt;/code&gt; を拡張して、 &lt;code&gt;admin&lt;/code&gt; ルート間を移動するときに保護します。 &lt;code&gt;auth.guard.ts&lt;/code&gt; を開き、 &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; インターフェースをルーターパッケージからインポートしたトークンに追加します。</target>
        </trans-unit>
        <trans-unit id="78dcf13062dfaf21c3fb6554eca5eab8f3b3813c" translate="yes" xml:space="preserve">
          <source>Extend this base class to implement custom rendering. By default, Angular renders a template into DOM. You can use custom rendering to intercept rendering calls, or to render to something other than DOM.</source>
          <target state="translated">この基底クラスを拡張してカスタムレンダリングを実装します。デフォルトではAngularはテンプレートをDOMにレンダリングします。レンダリングコールをインターセプトしたり、DOM以外にレンダリングしたりするためにカスタムレンダリングを使うことができます。</target>
        </trans-unit>
        <trans-unit id="dc92ca4b94985f880635d936b5ae59b3e5edc4c2" translate="yes" xml:space="preserve">
          <source>Extended interactions between a data service and the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; can be complex and difficult to mock with spies.</source>
          <target state="translated">データサービスと &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; の間の拡張された対話は複雑で、スパイを模倣するのが困難な場合があります。</target>
        </trans-unit>
        <trans-unit id="a4b3d3f612756476d4263e5f1895884842554514" translate="yes" xml:space="preserve">
          <source>Extending Angular</source>
          <target state="translated">アングラーの拡張</target>
        </trans-unit>
        <trans-unit id="8b211f855a434be61c61a4c8dba34349d28c811e" translate="yes" xml:space="preserve">
          <source>Extends &lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt; for Angular by adding the &lt;code&gt;&lt;a href=&quot;eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">Angular用の&lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;を拡張するために、 &lt;code&gt;&lt;a href=&quot;eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="b00704a4bc3bd1958bd32d42d165473bd4d96c45" translate="yes" xml:space="preserve">
          <source>Extends &lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt; for Angular by adding the &lt;code&gt;emit()&lt;/code&gt; method.</source>
          <target state="translated">Angularの&lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;emit()&lt;/code&gt; メソッドを追加して拡張します。</target>
        </trans-unit>
        <trans-unit id="dfc0709b546a7a92e728bffa766a855dff062384" translate="yes" xml:space="preserve">
          <source>Extensibility through NgModule imports is a primary goal of the NgModule system. Merging NgModule providers into the application injector makes it easy for a module library to enrich the entire application with new services. By adding the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; once, every application component can make HTTP requests.</source>
          <target state="translated">NgModuleインポートによる拡張性は、NgModuleシステムの主要な目標です。NgModuleプロバイダーをアプリケーションインジェクターにマージすると、モジュールライブラリがアプリケーション全体に新しいサービスを簡単に追加できます。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を一度追加することで、すべてのアプリケーションコンポーネントがHTTPリクエストを行うことができます。</target>
        </trans-unit>
        <trans-unit id="941a3f639b19a9b73ed93ee36698dac421a92539" translate="yes" xml:space="preserve">
          <source>External and global style files</source>
          <target state="translated">外部スタイルファイルとグローバルスタイルファイル</target>
        </trans-unit>
        <trans-unit id="cd2719608556dde4078df78ee0be11633fc025a7" translate="yes" xml:space="preserve">
          <source>Extra HTML tags in i18n translations that are not present in the source template itself will be rendered as plain text (previously, these tags would render as HTML).</source>
          <target state="translated">ソーステンプレート自体に存在しないi18n翻訳の余分なHTMLタグは、プレーンテキストとしてレンダリングされます(以前は、これらのタグはHTMLとしてレンダリングされていました)。</target>
        </trans-unit>
        <trans-unit id="c2dba996d324b0c203c96719673d909e6e8ef0d1" translate="yes" xml:space="preserve">
          <source>ExtraOptions</source>
          <target state="translated">ExtraOptions</target>
        </trans-unit>
        <trans-unit id="c497511fc2cd2096d641946b084c9ea21b6e36e7" translate="yes" xml:space="preserve">
          <source>Extract CSS from global styles into '.css' files instead of '.js'.</source>
          <target state="translated">グローバルスタイルからCSSを「.js」ではなく「.css」ファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="f4c7ceadda503dc9b045dfbe183ee849d4cde2dd" translate="yes" xml:space="preserve">
          <source>Extract all licenses in a separate file.</source>
          <target state="translated">すべてのライセンスを別のファイルに展開します。</target>
        </trans-unit>
        <trans-unit id="2d497a65ab08388cae16fc3633cb443f795a662b" translate="yes" xml:space="preserve">
          <source>Extract css from global styles into css files instead of js ones.</source>
          <target state="translated">グローバルスタイルからcssをjsの代わりにcssファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="edcdeca05b2685d5d99bdabc04cc42c9b1caa148" translate="yes" xml:space="preserve">
          <source>Extract templates and styles to their own files</source>
          <target state="translated">テンプレートとスタイルを独自のファイルに抽出</target>
        </trans-unit>
        <trans-unit id="fbf4a03e0810426f0735a9f354fd8e8fa7711591" translate="yes" xml:space="preserve">
          <source>Extract the &lt;code&gt;id&lt;/code&gt; from the route</source>
          <target state="translated">ルートから &lt;code&gt;id&lt;/code&gt; を抽出します</target>
        </trans-unit>
        <trans-unit id="264fdaa93431a7bc1ddb2c5f37762583f253762b" translate="yes" xml:space="preserve">
          <source>Extract the &lt;code&gt;id&lt;/code&gt; route parameter</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; routeパラメータを抽出します</target>
        </trans-unit>
        <trans-unit id="caa2c6130efe73ad6e3c198eabb749d7f8636289" translate="yes" xml:space="preserve">
          <source>Extract the source language file</source>
          <target state="translated">ソース言語ファイルを展開</target>
        </trans-unit>
        <trans-unit id="71b1b86ebc85d12dee5fceed6512d0a9de6c0462" translate="yes" xml:space="preserve">
          <source>Extracting localizable text into a file that you can send out to be translated.</source>
          <target state="translated">ローカライズ可能なテキストを、翻訳して送り出せるファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="07271f756965cd3fc145c36cc34b953de23f0be0" translate="yes" xml:space="preserve">
          <source>Extracts i18n messages from source code.</source>
          <target state="translated">ソースコードからi18nメッセージを抽出します。</target>
        </trans-unit>
        <trans-unit id="27865d88125d0d3c86f80a0d8ec5973e323d2f1a" translate="yes" xml:space="preserve">
          <source>Extracts the part of the URL that should be handled by the router. The rest of the URL will remain untouched.</source>
          <target state="translated">ルーターが処理すべき URL の部分を抽出します。残りの URL は手つかずのままになります。</target>
        </trans-unit>
        <trans-unit id="9fb4f1d17ef878fbfbe96076658397ad86bd5264" translate="yes" xml:space="preserve">
          <source>FILES</source>
          <target state="translated">FILES</target>
        </trans-unit>
        <trans-unit id="5ec4d531411beddc087228583dbee8c24ec275c5" translate="yes" xml:space="preserve">
          <source>Facilitate web crawlers (SEO)</source>
          <target state="translated">ウェブクローラー(SEO)の円滑化</target>
        </trans-unit>
        <trans-unit id="0cff306d02212a5fb8b4278c3cb5a0c5adaa8578" translate="yes" xml:space="preserve">
          <source>Facilitate web crawlers through &lt;a href=&quot;https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf&quot;&gt;search engine optimization (SEO)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf&quot;&gt;検索エンジン最適化（SEO）&lt;/a&gt;によってWebクローラーを促進する</target>
        </trans-unit>
        <trans-unit id="22360fe45691380a6abe3870500a10494004451a" translate="yes" xml:space="preserve">
          <source>Factory function which can return an instance of an object represented by a key.</source>
          <target state="translated">キーで表されるオブジェクトのインスタンスを返すことができるファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="9db5e3ce04fe9341654a228ff462554c1799f4b0" translate="yes" xml:space="preserve">
          <source>Factory functions must be exported, named functions. The AOT compiler does not support lambda expressions (&quot;arrow functions&quot;) for factory functions.</source>
          <target state="translated">ファクトリー関数は、関数名を付けてエクスポートする必要があります。AOT コンパイラは工場関数のラムダ式(「矢印関数」)をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="9c3623fa8d663dbe5f5fc0902ec6339381d8c3a8" translate="yes" xml:space="preserve">
          <source>Factory method that returns an instance of the $locationShim</source>
          <target state="translated">のインスタンスを返すファクトリメソッド</target>
        </trans-unit>
        <trans-unit id="3881c8ff14ca5b27a9e6003fc51568bda04676ec" translate="yes" xml:space="preserve">
          <source>Factory providers</source>
          <target state="translated">工場の提供者</target>
        </trans-unit>
        <trans-unit id="bd15eb5e476a7673ffd19497be46407f1482aeca" translate="yes" xml:space="preserve">
          <source>Factory providers: &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ファクトリープロバイダー： &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dfe1c0bca89a9b0b5e57589aa7b665ef1d397915" translate="yes" xml:space="preserve">
          <source>Factory providers: &lt;code&gt;useFactory&lt;/code&gt;</source>
          <target state="translated">ファクトリプロバイダー： &lt;code&gt;useFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d28d31751c9ae2080733690359256390a562cf2d" translate="yes" xml:space="preserve">
          <source>Factory used to create new strategies for each NgElement instance.</source>
          <target state="translated">各NgElementインスタンスの新しいストラテジーを作成するためのファクトリー。</target>
        </trans-unit>
        <trans-unit id="57ed3e29bc0b10573d967d11e5e31aca1f76bac8" translate="yes" xml:space="preserve">
          <source>FactoryProvider</source>
          <target state="translated">FactoryProvider</target>
        </trans-unit>
        <trans-unit id="704269b7abb2943ffc9b1a4c538f6a50b5f6a9e3" translate="yes" xml:space="preserve">
          <source>FactorySansProvider</source>
          <target state="translated">FactorySansProvider</target>
        </trans-unit>
        <trans-unit id="140f278d5afda10341fae9ebc6cec13da6d7d5de" translate="yes" xml:space="preserve">
          <source>Fail-safe</source>
          <target state="translated">Fail-safe</target>
        </trans-unit>
        <trans-unit id="c771b9357d9ed785767364181303bab73d06c8a7" translate="yes" xml:space="preserve">
          <source>Failed requests can be retried easily.</source>
          <target state="translated">失敗したリクエストは簡単に再試行することができます。</target>
        </trans-unit>
        <trans-unit id="60e796c101570c158dc15bfc77cbfa969a98202a" translate="yes" xml:space="preserve">
          <source>Fallback configuration examples</source>
          <target state="translated">フォールバック設定例</target>
        </trans-unit>
        <trans-unit id="8db6a2f1d3b7e19e518ffa8979d7ad15359af460" translate="yes" xml:space="preserve">
          <source>Fast</source>
          <target state="translated">Fast</target>
        </trans-unit>
        <trans-unit id="60c9c25d0ab3ef513b6c03ee0367410eadc6bb16" translate="yes" xml:space="preserve">
          <source>Faster apps by inlining critical styles in Universal applications</source>
          <target state="translated">ユニバーサルアプリケーションの重要なスタイルをインライン化してアプリを高速化</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="d15ce705a0760aa0d74e8b742b908052209ab42b" translate="yes" xml:space="preserve">
          <source>Feature (for routing)</source>
          <target state="translated">機能(ルーティング用</target>
        </trans-unit>
        <trans-unit id="e0e655b7b96f5679636a195d016f1315d474dbc2" translate="yes" xml:space="preserve">
          <source>Feature Module</source>
          <target state="translated">機能モジュール</target>
        </trans-unit>
        <trans-unit id="ae73d39983f27537395a45d0ca6a07cf131b0a2f" translate="yes" xml:space="preserve">
          <source>Feature Modules</source>
          <target state="translated">機能モジュール</target>
        </trans-unit>
        <trans-unit id="bb5acf03a7329b562675669cb070d3d9ad06b7fd" translate="yes" xml:space="preserve">
          <source>Feature area routes rarely (if ever) cross with routes of other features.</source>
          <target state="translated">フィーチャーエリアのルートが他のフィーチャーのルートと交差することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="02f821fca6279d01d9f480f97f0900a9651fa152" translate="yes" xml:space="preserve">
          <source>Feature modules</source>
          <target state="translated">機能モジュール</target>
        </trans-unit>
        <trans-unit id="a38902e95440d30cb0d4dfb2fcfecf803cecd865" translate="yes" xml:space="preserve">
          <source>Feature modules are NgModules for the purpose of organizing code.</source>
          <target state="translated">フィーチャーモジュールは、コードの整理を目的としたNgModulesです。</target>
        </trans-unit>
        <trans-unit id="c8e5aeaa7dd1fd777c6a3b8e55cdf8ce15e9ca39" translate="yes" xml:space="preserve">
          <source>Feature modules are modules you create around specific application business domains, user workflows, and utility collections. They support your app by containing a particular feature, such as routes, services, widgets, etc. To conceptualize what a feature module might be in your app, consider that if you would put the files related to a certain functionality, like a search, in one folder, that the contents of that folder would be a feature module that you might call your &lt;code&gt;SearchModule&lt;/code&gt;. It would contain all of the components, routing, and templates that would make up the search functionality.</source>
          <target state="translated">機能モジュールは、特定のアプリケーションビジネスドメイン、ユーザーワークフロー、ユーティリティコレクションを中心に作成するモジュールです。ルート、サービス、ウィジェットなどの特定の機能を含めることでアプリをサポートします。アプリの機能モジュールが何であるかを概念化するには、検索などの特定の機能に関連するファイルを配置する場合、 1つのフォルダーでは、そのフォルダーのコンテンツは &lt;code&gt;SearchModule&lt;/code&gt; と呼ばれる機能モジュールになります。検索機能を構成するすべてのコンポーネント、ルーティング、およびテンプレートが含まれます。</target>
        </trans-unit>
        <trans-unit id="2d370eb3e0cb88f60b0ad36c32be6367b1bc12b1" translate="yes" xml:space="preserve">
          <source>Feature modules vs. root modules</source>
          <target state="translated">機能モジュールとルートモジュールの比較</target>
        </trans-unit>
        <trans-unit id="30d433e3dc5c7d9c3c2476cf88fcc2993919b275" translate="yes" xml:space="preserve">
          <source>Feature, AppModule</source>
          <target state="translated">機能、AppModule</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="7386694791e5d866f123cf883931b4babba599e3" translate="yes" xml:space="preserve">
          <source>Features and APIs that were deprecated in v6 or earlier are candidates for removal in version 9 or any later major version. For information about Angular's deprecation and removal practices, see &lt;a href=&quot;releases#deprecation-practices&quot;&gt;Angular Release Practices&lt;/a&gt;.</source>
          <target state="translated">v6以前で廃止された機能とAPIは、バージョン9以降のメジャーバージョンで削除される可能性があります。Angularの非推奨と削除のプラクティスについては、&lt;a href=&quot;releases#deprecation-practices&quot;&gt;Angularリリースプラクティスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="5f696c341a16b560bb35a009009cb86e21273954" translate="yes" xml:space="preserve">
          <source>Feb 06, 2020</source>
          <target state="translated">2020年02月06日</target>
        </trans-unit>
        <trans-unit id="c8d7677e19495f21da984fe4e2829b7ca91b27c7" translate="yes" xml:space="preserve">
          <source>Feedback</source>
          <target state="translated">Feedback</target>
        </trans-unit>
        <trans-unit id="09051c1f9086308637f6293f73473c42514dca6c" translate="yes" xml:space="preserve">
          <source>Feel free to unsubscribe anyway. It is harmless and never a bad practice.</source>
          <target state="translated">とにかく気軽に購読を解除してください。それは無害であり、決して悪い習慣ではありません。</target>
        </trans-unit>
        <trans-unit id="d7b8f7b8afaa214c58f7a34291b2fd711807ee31" translate="yes" xml:space="preserve">
          <source>Fetch data before navigating</source>
          <target state="translated">移動する前にデータを取得する</target>
        </trans-unit>
        <trans-unit id="c326a4660b674d2f6ea82687a1e1abae2337541f" translate="yes" xml:space="preserve">
          <source>Field</source>
          <target state="translated">Field</target>
        </trans-unit>
        <trans-unit id="d2a01ccdcf7f8842874a563f805737c9e9eccfb1" translate="yes" xml:space="preserve">
          <source>Field type</source>
          <target state="translated">フィールドタイプ</target>
        </trans-unit>
        <trans-unit id="7bb1e1aab7ba791ae458f5de6bbd0ae6590c24f7" translate="yes" xml:space="preserve">
          <source>Fifth step of the Tour of Heroes example application. For more information, see &lt;a href=&quot;../tutorial/toh-pt5&quot;&gt;Add in-app navigation with routing&lt;/a&gt;.</source>
          <target state="translated">Tour ofHeroesサンプルアプリケーションの5番目のステップ。詳細については&lt;a href=&quot;../tutorial/toh-pt5&quot;&gt;、ルーティングを使用したアプリ内ナビゲーションの追加を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a7bacddabcb51aadc74fbff493e38108014e9d5" translate="yes" xml:space="preserve">
          <source>Figure 1 shows how, in reactive forms, the form model is the source of truth; it provides the value and status of the form element at any given point in time, through the &lt;code&gt;[formControl]&lt;/code&gt; directive on the input element.</source>
          <target state="translated">図1は、リアクティブフォームで、フォームモデルが信頼できる情報源である方法を示しています。入力要素の &lt;code&gt;[formControl]&lt;/code&gt; ディレクティブを介して、任意の時点でのフォーム要素の値とステータスを提供します。</target>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="2aabcfc2668a910cfcd432d597ea7e5c171cf855" translate="yes" xml:space="preserve">
          <source>File Name</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="6e75764f6be72d64faaa7cd05889744083a1ffec" translate="yes" xml:space="preserve">
          <source>File Names</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="2d334eb4e2ffc4a7b13f835350407bcaeabdf12f" translate="yes" xml:space="preserve">
          <source>File structure conventions</source>
          <target state="translated">ファイル構造の規則</target>
        </trans-unit>
        <trans-unit id="af061a864642ff7ae1378bf154035b76878e7427" translate="yes" xml:space="preserve">
          <source>File structure, configuration, and dependencies</source>
          <target state="translated">ファイル構造、設定、依存関係</target>
        </trans-unit>
        <trans-unit id="d8e22f8227ce02443a1edaaa12b696d7cbf01c92" translate="yes" xml:space="preserve">
          <source>File templates and snippets</source>
          <target state="translated">ファイルテンプレートとスニペット</target>
        </trans-unit>
        <trans-unit id="063edefb4c2d1701a0ed78694d38ac8c815553ef" translate="yes" xml:space="preserve">
          <source>Files at the top level of &lt;code&gt;src/&lt;/code&gt; support testing and running your application. Subfolders contain the application source and application-specific configuration.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; 最上位レベルのファイルは、アプリケーションのテストと実行をサポートしています。サブフォルダーには、アプリケーションソースとアプリケーション固有の構成が含まれます。</target>
        </trans-unit>
        <trans-unit id="2581c717d3705e36d5ae42648104d74ef10e9967" translate="yes" xml:space="preserve">
          <source>Files in that folder, such as &lt;code&gt;src/style-paths/_variables.scss&lt;/code&gt;, can be imported from anywhere in your project without the need for a relative path:</source>
          <target state="translated">&lt;code&gt;src/style-paths/_variables.scss&lt;/code&gt; などのそのフォルダー内のファイルは、相対パスを必要とせずにプロジェクトの任意の場所からインポートできます。</target>
        </trans-unit>
        <trans-unit id="6230bbabc49370876e25014799db0c6c42172a85" translate="yes" xml:space="preserve">
          <source>Files inside &lt;code&gt;src/&lt;/code&gt; &quot;belong&quot; to your app. Add new Typescript, HTML and CSS files inside the &lt;code&gt;src/&lt;/code&gt; directory, most of them inside &lt;code&gt;src/app&lt;/code&gt;, unless told to do otherwise.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; 内のファイルはアプリに「属します」。特に指示がない限り、新しいTypescript、HTML、CSSファイルを &lt;code&gt;src/&lt;/code&gt; ディレクトリ内に追加します。ほとんどのファイルは &lt;code&gt;src/app&lt;/code&gt; 内に追加します。</target>
        </trans-unit>
        <trans-unit id="93b86013967961de693f58926e9367d098d2436a" translate="yes" xml:space="preserve">
          <source>Files outside &lt;code&gt;src/&lt;/code&gt; concern building, deploying, and testing your app. They include configuration files and external dependencies.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; 外のファイルは、アプリのビルド、デプロイ、テストに関係しています。これには、構成ファイルと外部依存関係が含まれます。</target>
        </trans-unit>
        <trans-unit id="8e7b503470f31aa4ba3e1eb4f0c06d4336be101d" translate="yes" xml:space="preserve">
          <source>Files to exclude from linting.</source>
          <target state="translated">リンティングから除外するファイル。</target>
        </trans-unit>
        <trans-unit id="eb8f826c74af1c4e8b030a3ffa7a58e9214f5b1a" translate="yes" xml:space="preserve">
          <source>Files to include in linting.</source>
          <target state="translated">リンティングに含めるファイル。</target>
        </trans-unit>
        <trans-unit id="cd9a5554356141790a82e86864449b480ac00a5e" translate="yes" xml:space="preserve">
          <source>Filipino</source>
          <target state="translated">Filipino</target>
        </trans-unit>
        <trans-unit id="e8f5b7dc089747a4157273eab897b73c8e3f284f" translate="yes" xml:space="preserve">
          <source>Filter animation example</source>
          <target state="translated">フィルターアニメーションの例</target>
        </trans-unit>
        <trans-unit id="9075edca21736af901d2add18e4d9491f2452b4d" translate="yes" xml:space="preserve">
          <source>Filtering</source>
          <target state="translated">Filtering</target>
        </trans-unit>
        <trans-unit id="9b0ee140852ac450ad6053b54418dea6211f531b" translate="yes" xml:space="preserve">
          <source>Filtering and especially sorting are expensive operations. The user experience can degrade severely for even moderate-sized lists when Angular calls these pipe methods many times per second. &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; have often been abused in AngularJS apps, leading to complaints that Angular itself is slow. That charge is fair in the indirect sense that AngularJS prepared this performance trap by offering &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; in the first place.</source>
          <target state="translated">フィルタリング、特にソートは、コストのかかる操作です。 Angularがこれらのパイプメソッドを毎秒何度も呼び出すと、中程度のサイズのリストでもユーザーエクスペリエンスが大幅に低下する可能性があります。 &lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;orderBy&lt;/code&gt; は、AngularJSアプリで頻繁に悪用されており、Angular自体が遅いという不満を引き起こしています。 AngularJSが &lt;code&gt;orderBy&lt;/code&gt; &lt;code&gt;filter&lt;/code&gt; とorderByを提供することでこのパフォーマンストラップを準備したという間接的な意味では、この料金は公平です。</target>
        </trans-unit>
        <trans-unit id="9e87f3431466c092c7183f3e099c67b1fc572eed" translate="yes" xml:space="preserve">
          <source>Filtering request URLs</source>
          <target state="translated">リクエストURLのフィルタリング</target>
        </trans-unit>
        <trans-unit id="9abf0754128b4f71327ecb4a6bd618b08cb61dcb" translate="yes" xml:space="preserve">
          <source>Filtering streams</source>
          <target state="translated">ストリームのフィルタリング</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="841d791c3a7198d7e6ba6397710459d775ed9052" translate="yes" xml:space="preserve">
          <source>Filters/pipes</source>
          <target state="translated">Filters/pipes</target>
        </trans-unit>
        <trans-unit id="06779fd25acbc603a9bd6406d87a230939736eea" translate="yes" xml:space="preserve">
          <source>Final ad banner</source>
          <target state="translated">最終的な広告バナー</target>
        </trans-unit>
        <trans-unit id="b812ef08eb0be951600892b8e2bf336c9d92c93a" translate="yes" xml:space="preserve">
          <source>Final app</source>
          <target state="translated">ファイナルアプリ</target>
        </trans-unit>
        <trans-unit id="c95c48f17753442181cc82b3983b3c08478efff3" translate="yes" xml:space="preserve">
          <source>Final code review</source>
          <target state="translated">最終的なコードレビュー</target>
        </trans-unit>
        <trans-unit id="f46cb47bf9a0adc86c8ac38dba064e1d91fdcb22" translate="yes" xml:space="preserve">
          <source>Final setup and tests</source>
          <target state="translated">最終設定とテスト</target>
        </trans-unit>
        <trans-unit id="ae46b591c407d86033096dfd0bcfee30c0486784" translate="yes" xml:space="preserve">
          <source>Final thoughts</source>
          <target state="translated">最終的な感想</target>
        </trans-unit>
        <trans-unit id="4cef14b8b04cb3c50ec7df190ada6f1ad74b814c" translate="yes" xml:space="preserve">
          <source>Finally, bootstrap the &lt;code&gt;AppModule&lt;/code&gt; in &lt;code&gt;app/main.ts&lt;/code&gt;. This file has been configured as the application entrypoint in &lt;code&gt;systemjs.config.js&lt;/code&gt;, so it is already being loaded by the browser.</source>
          <target state="translated">最後に、 &lt;code&gt;AppModule&lt;/code&gt; を &lt;code&gt;app/main.ts&lt;/code&gt; にブートストラップします。このファイルは &lt;code&gt;systemjs.config.js&lt;/code&gt; のアプリケーションエントリポイントとして構成されているため、ブラウザによってすでにロードされています。</target>
        </trans-unit>
        <trans-unit id="8cefc5f3cabe0ea72b2a2073202c61d828592c62" translate="yes" xml:space="preserve">
          <source>Finally, display an instance of the form in the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">最後に、 &lt;code&gt;AppComponent&lt;/code&gt; シェルでフォームのインスタンスを表示します。</target>
        </trans-unit>
        <trans-unit id="dd499b8ded3996759fb45ad0ef6860245639edf3" translate="yes" xml:space="preserve">
          <source>Finally, from &lt;code&gt;index.html&lt;/code&gt;, remove all references to AngularJS scripts and jQuery. When you're done, this is what it should look like:</source>
          <target state="translated">最後に、 &lt;code&gt;index.html&lt;/code&gt; から、AngularJSスクリプトとjQueryへのすべての参照を削除します。完了すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="5a0259c749fca2e9b33bd242db1b258ce408c109" translate="yes" xml:space="preserve">
          <source>Finally, kick off the whole process, by bootstraping your top level Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最後に、最上位のAngular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; をブートストラップすることで、プロセス全体を開始します。</target>
        </trans-unit>
        <trans-unit id="9f5dcff9e3e40c297f9a2469f9d67baa2a5b4842" translate="yes" xml:space="preserve">
          <source>Finally, revisit both of the component tests when you switch to the Angular router. For the details component, provide a mock of Angular &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; object instead of using the AngularJS &lt;code&gt;$routeParams&lt;/code&gt;.</source>
          <target state="translated">最後に、Angularルーターに切り替えるときに、両方のコンポーネントテストに再度アクセスします。詳細コンポーネントについては、AngularJS &lt;code&gt;$routeParams&lt;/code&gt; を使用する代わりに、Angular &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; オブジェクトのモックを提供します。</target>
        </trans-unit>
        <trans-unit id="4270c1b28f19e0dc4576a96f91d31a39cbc8c57d" translate="yes" xml:space="preserve">
          <source>Finally, the rule factory must return a rule.</source>
          <target state="translated">最後に、ルールファクトリーはルールを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="d3f3588d5a318073d8770cabe8b8356205db6a84" translate="yes" xml:space="preserve">
          <source>Finally, the server returns the rendered page to the client.</source>
          <target state="translated">最後に、サーバーはレンダリングされたページをクライアントに返します。</target>
        </trans-unit>
        <trans-unit id="1888b8a1c59ae1c4c42740747f0691eb7a40faaa" translate="yes" xml:space="preserve">
          <source>Finally, update the product list component to receive output from the product alerts component.</source>
          <target state="translated">最後に、製品リストコンポーネントを更新して、製品アラートコンポーネントからの出力を受け取るようにします。</target>
        </trans-unit>
        <trans-unit id="d2307f9b99deb8de24da0878bde936ef2a11e271" translate="yes" xml:space="preserve">
          <source>Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.</source>
          <target state="translated">最後に、RouterLink の祖先に RouterLinkActive ディレクティブを適用することができます。</target>
        </trans-unit>
        <trans-unit id="b3e1d9bc243d1e42b5cab907612678c6d025611d" translate="yes" xml:space="preserve">
          <source>Finally, you can bind to a specific class name. Angular adds the class when the template expression evaluates to truthy. It removes the class when the expression is falsy.</source>
          <target state="translated">最後に、特定のクラス名にバインドすることができます。Angularはテンプレート式がtruthyと評価されたときにクラスを追加します。式がfalsyの場合はクラスを削除します。</target>
        </trans-unit>
        <trans-unit id="9f8e28a14842dd8a21fd4417e69d8929246f2eb3" translate="yes" xml:space="preserve">
          <source>Finally, you should add some npm scripts in &lt;code&gt;package.json&lt;/code&gt; to compile the TypeScript files to JavaScript (based on the &lt;code&gt;tsconfig.json&lt;/code&gt; configuration file):</source>
          <target state="translated">最後に、（ &lt;code&gt;tsconfig.json&lt;/code&gt; 構成ファイルに基づいて）TypeScriptファイルをJavaScriptにコンパイルするために、 &lt;code&gt;package.json&lt;/code&gt; にいくつかのnpmスクリプトを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc68dbba7d47e62aa4d6bec04a624372cc2d728b" translate="yes" xml:space="preserve">
          <source>Find a parent by its class interface</source>
          <target state="translated">クラスインターフェースから親を探す</target>
        </trans-unit>
        <trans-unit id="19572de919c02ddeb5074d287366d16ac151d4e6" translate="yes" xml:space="preserve">
          <source>Find a parent component of known type</source>
          <target state="translated">既知の型の親コンポーネントを探す</target>
        </trans-unit>
        <trans-unit id="a2ea659f3e398cb1397f96d2e04f71ac6ae5eba4" translate="yes" xml:space="preserve">
          <source>Find a parent in a tree with &lt;code&gt;@SkipSelf()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@SkipSelf()&lt;/code&gt; を使用してツリー内で親を見つける</target>
        </trans-unit>
        <trans-unit id="9068048060804561844b51f37075db176ef3392e" translate="yes" xml:space="preserve">
          <source>Find out how much code you're testing</source>
          <target state="translated">テストしているコードの量を確認する</target>
        </trans-unit>
        <trans-unit id="6888669f18c56df1d694cf79843c2e4b00c6059a" translate="yes" xml:space="preserve">
          <source>Find out more in the &lt;a href=&quot;../guide/animations&quot;&gt;animations guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/animations&quot;&gt;アニメーションガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e5804ca617365de337f619c9afc81454ab7c97f7" translate="yes" xml:space="preserve">
          <source>Find out more in the &lt;a href=&quot;../guide/forms-overview&quot;&gt;Forms Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/forms-overview&quot;&gt;フォームの概要を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e1f7853d2e5b874c8499b3a8977fbd15328d107c" translate="yes" xml:space="preserve">
          <source>Find providers by name</source>
          <target state="translated">名前からプロバイダを探す</target>
        </trans-unit>
        <trans-unit id="90ac0cee96d91541ca1bd28dfc35a71280d5beec" translate="yes" xml:space="preserve">
          <source>Find testability of a node in the Tree</source>
          <target state="translated">ツリー内のノードのテスト可能性を見つける</target>
        </trans-unit>
        <trans-unit id="2ba4f7019a119d1c278150f603171c988560b7cb" translate="yes" xml:space="preserve">
          <source>Find the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling&quot;&gt;Network Throttling&lt;/a&gt; dropdown on the far right of the menu bar.</source>
          <target state="translated">メニューバーの右端にある[ &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling&quot;&gt;ネットワークスロットル&lt;/a&gt; ]ドロップダウンを見つけます。</target>
        </trans-unit>
        <trans-unit id="4e5f4621355c6bff62bda1359ee32eebff1a583e" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag for &lt;em&gt;Name&lt;/em&gt; and update it like this:</source>
          <target state="translated">&lt;em&gt;Nameの&lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグを見つけて、次のように更新します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9332c09462bd82787a8db4c4b69ead156169ceb8" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag next to the &lt;strong&gt;Name&lt;/strong&gt; label.</source>
          <target state="translated">&lt;strong&gt;Name&lt;/strong&gt;ラベルの横にある &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグを見つけます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2bbe5210ef2d786fc3ededbe956159663446c80" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;getHeroes&lt;/code&gt; method and replace it with the following code (shown side-by-side with the previous version for comparison)</source>
          <target state="translated">&lt;code&gt;getHeroes&lt;/code&gt; メソッドを見つけて、次のコードに置き換えます（比較のために、以前のバージョンと並べて表示されています）。</target>
        </trans-unit>
        <trans-unit id="910dec36e9d395b1a239c2cce267478bbbb83541" translate="yes" xml:space="preserve">
          <source>Find the header for your page. For example, a guide page that describes an Angular feature is probably a child of the &lt;code&gt;Fundamentals&lt;/code&gt; header.</source>
          <target state="translated">ページのヘッダーを見つけます。たとえば、Angular機能を説明するガイドページは、おそらく &lt;code&gt;Fundamentals&lt;/code&gt; ヘッダーの子です。</target>
        </trans-unit>
        <trans-unit id="9e66577055c6ddf016c5f26c4b7258884b805c8a" translate="yes" xml:space="preserve">
          <source>Find the way back</source>
          <target state="translated">帰り道を探す</target>
        </trans-unit>
        <trans-unit id="0d7801dbbf5469288357290bb162caf0067841ca" translate="yes" xml:space="preserve">
          <source>Find this example in &lt;span name=&quot;dependency-injection-in-action&quot;&gt;live code&lt;/span&gt; and confirm that the three &lt;code&gt;HeroBioComponent&lt;/code&gt; instances have their own cached hero data.</source>
          <target state="translated">この例を&lt;span name=&quot;dependency-injection-in-action&quot;&gt;ライブコード&lt;/span&gt;で見つけ、3つの &lt;code&gt;HeroBioComponent&lt;/code&gt; インスタンスに独自のキャッシュされたヒーローデータがあることを確認します。</target>
        </trans-unit>
        <trans-unit id="f36f5acbf34ac69639274bcce5d1e810ae127fca" translate="yes" xml:space="preserve">
          <source>Finding the current version of Angular</source>
          <target state="translated">Angularの現在のバージョンを見つける</target>
        </trans-unit>
        <trans-unit id="a410edc016bc1e604c19b7f4a7ebcb201ee6cc63" translate="yes" xml:space="preserve">
          <source>Finds one or more inner elements within the current element that is being animated within a sequence. Use with &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">シーケンス内でアニメーション化されている現在の要素内の1つ以上の内部要素を検索します。 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; で使用します。</target>
        </trans-unit>
        <trans-unit id="577fef4c15c29c2eed55b75361375e09cbaa0af3" translate="yes" xml:space="preserve">
          <source>Finds one or more inner elements within the current element that is being animated within a sequence. Use with &lt;code&gt;&lt;a href=&quot;animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">シーケンス内でアニメーション化されている現在の要素内の1つ以上の内部要素を検索します。 &lt;code&gt;&lt;a href=&quot;animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; で使用します。</target>
        </trans-unit>
        <trans-unit id="353aec05ef3a3f9483fe393d93648f628a744b2e" translate="yes" xml:space="preserve">
          <source>Fine tune control</source>
          <target state="translated">微調整制御</target>
        </trans-unit>
        <trans-unit id="5f133c80f125f45ee0dbdf789783d6285b5c326c" translate="yes" xml:space="preserve">
          <source>Firebase hosting</source>
          <target state="translated">ファイアーベースホスティング</target>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="968dba49182e0be459fe515125d03648ade8af6c" translate="yes" xml:space="preserve">
          <source>First ensure that the service to be downgraded is provided in an &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; that will be part of the upgrade application. For example, let's assume we have defined &lt;code&gt;HeroesService&lt;/code&gt;</source>
          <target state="translated">まず、ダウングレードするサービスが、アップグレードアプリケーションの一部となる &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; で提供されていることを確認します。たとえば、 &lt;code&gt;HeroesService&lt;/code&gt; を定義したとしましょう</target>
        </trans-unit>
        <trans-unit id="aa13eff7c345cc62b2731261d890c5269c439d82" translate="yes" xml:space="preserve">
          <source>First import the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; and add it to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">最初に &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; をインポートし、それを &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="7736c4139c1008cb150702a52ff58ca39d3683e8" translate="yes" xml:space="preserve">
          <source>First step of the Tour of Heroes example application. For more information, see &lt;a href=&quot;../tutorial/toh-pt1&quot;&gt;The hero editor&lt;/a&gt;.</source>
          <target state="translated">Tour ofHeroesサンプルアプリケーションの最初のステップ。詳細については&lt;a href=&quot;../tutorial/toh-pt1&quot;&gt;、ヒーローエディタを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="55ec6779573313fe242323b78b075f04a155c1c4" translate="yes" xml:space="preserve">
          <source>First string for comparison</source>
          <target state="translated">比較のための最初の文字列</target>
        </trans-unit>
        <trans-unit id="01e119ef3e252a37cc72a2fdfd6760ca6763b655" translate="yes" xml:space="preserve">
          <source>First we must create a directive that will wrap the validator function. We provide it as the validator using the &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; token. If you are not sure why, or you do not fully understand the syntax, revisit the previous &lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;section&lt;/a&gt;.</source>
          <target state="translated">まず、バリデーター関数をラップするディレクティブを作成する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; トークンを使用してバリデーターとして提供します。理由がわからない場合、または構文を完全に理解していない場合は、前の&lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;セクション&lt;/a&gt;に戻ってください。</target>
        </trans-unit>
        <trans-unit id="4c224c3de52b6310e67cad9019284eef1dbe6d21" translate="yes" xml:space="preserve">
          <source>First we retrieve the child controls by calling the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/forms/abstractcontrol#get&quot;&gt;get&lt;/a&gt; method. Then we simply compare the values of the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt; controls.</source>
          <target state="translated">まず、 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の&lt;a href=&quot;../api/forms/abstractcontrol#get&quot;&gt;get&lt;/a&gt;メソッドを呼び出して、子コントロールを取得します。その後、我々は、単にの値を比較 &lt;code&gt;name&lt;/code&gt; や &lt;code&gt;alterEgo&lt;/code&gt; コントロールを。</target>
        </trans-unit>
        <trans-unit id="6c9d5cfff1d8258e5ca5251b7474441553db359a" translate="yes" xml:space="preserve">
          <source>First you extend the router import statement to include the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service symbol:</source>
          <target state="translated">まず、ルーターインポートステートメントを拡張して、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; サービスシンボルを含めます。</target>
        </trans-unit>
        <trans-unit id="006f3b6fcf861b0234e3eb24d6b99a89daf9bdae" translate="yes" xml:space="preserve">
          <source>First you surround that fragment in the source file with a named &lt;em&gt;docregion&lt;/em&gt; as described &lt;a href=&quot;docs-style-guide#source-code-markup&quot;&gt;below&lt;/a&gt;. Then you reference that &lt;em&gt;docregion&lt;/em&gt; in the &lt;code&gt;region&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; like this</source>
          <target state="translated">まず、&lt;a href=&quot;docs-style-guide#source-code-markup&quot;&gt;以下で&lt;/a&gt;説明するように、ソースファイルのフラグメントを名前付きの&lt;em&gt;docregionで囲み&lt;/em&gt;ます。そして、あなたはその参照&lt;em&gt;docregionを&lt;/em&gt;中 &lt;code&gt;region&lt;/code&gt; の属性 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; このように</target>
        </trans-unit>
        <trans-unit id="e38156d4774c97193b83dc70c370d862e8a4f69b" translate="yes" xml:space="preserve">
          <source>First, &lt;code&gt;AppRoutingModule&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; so the app can have routing functionality. The next import, &lt;code&gt;HeroesComponent&lt;/code&gt;, will give the Router somewhere to go once you configure the routes.</source>
          <target state="translated">まず、 &lt;code&gt;AppRoutingModule&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; をインポートするため、アプリにルーティング機能を持たせることができます。次のインポートである &lt;code&gt;HeroesComponent&lt;/code&gt; は、ルートを構成するとルーターをどこかに移動します。</target>
        </trans-unit>
        <trans-unit id="4fa3397063608fa99c181a29835aaf19ff75226e" translate="yes" xml:space="preserve">
          <source>First, be sure to import &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; in the child component class:</source>
          <target state="translated">まず、子コンポーネントクラスに &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; を必ずインポートしてください。</target>
        </trans-unit>
        <trans-unit id="56f9dfae7fe63b98aad45e38a0217d3cd8feb04f" translate="yes" xml:space="preserve">
          <source>First, create an &lt;code&gt;AnimalService&lt;/code&gt; with an &lt;code&gt;emoji&lt;/code&gt; property of 🐳 (whale):</source>
          <target state="translated">最初に、 &lt;code&gt;emoji&lt;/code&gt; プロパティがw（クジラ）の &lt;code&gt;AnimalService&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="c9e7758b50d1db77a7de19f37f3c0dc57b86cfaa" translate="yes" xml:space="preserve">
          <source>First, ensure that &lt;code&gt;src/index.html&lt;/code&gt; is set as the start page. Right-click &lt;code&gt;index.html&lt;/code&gt; in Solution Explorer and select option &lt;code&gt;Set As Start Page&lt;/code&gt;.</source>
          <target state="translated">最初に、 &lt;code&gt;src/index.html&lt;/code&gt; が開始ページとして設定されていることを確認します。ソリューションエクスプローラーで &lt;code&gt;index.html&lt;/code&gt; を右クリックし、[ &lt;code&gt;Set As Start Page&lt;/code&gt; ]オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="ae7e8a21e0061c3f6ae332c0c24236a55a9878ac" translate="yes" xml:space="preserve">
          <source>First, extend the router import statement to include the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service symbol:</source>
          <target state="translated">まず、ルーターのインポートステートメントを拡張して &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; サービスシンボルを含めます。</target>
        </trans-unit>
        <trans-unit id="434b74b7d6a69af33016985bf3339ff3f5aea095" translate="yes" xml:space="preserve">
          <source>First, import the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; and add it to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">まず、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; をインポートし、それを &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="77fd009fcc36ce5b9f47a2278d871b75447aefc1" translate="yes" xml:space="preserve">
          <source>First, import the following members in the component you want to navigate from.</source>
          <target state="translated">まず、ナビゲートしたいコンポーネントに以下のメンバーをインポートします。</target>
        </trans-unit>
        <trans-unit id="fcd358a07ec06cfd9f03f3dce181ba1549395226" translate="yes" xml:space="preserve">
          <source>First, import the schematics definitions you will need. The Schematics framework offers many utility functions to create and use rules when running a schematic.</source>
          <target state="translated">まず、必要な回路図の定義をインポートします。スケマティクスフレームワークには、スケマティクスを実行する際にルールを作成して使用するための多くのユーティリティ関数が用意されています。</target>
        </trans-unit>
        <trans-unit id="d87ce0595d0d8921c001ee9447f191878b1ada86" translate="yes" xml:space="preserve">
          <source>First, it sets the &lt;code&gt;currentAdIndex&lt;/code&gt; by taking whatever it currently is plus one, dividing that by the length of the &lt;code&gt;AdItem&lt;/code&gt; array, and using the &lt;em&gt;remainder&lt;/em&gt; as the new &lt;code&gt;currentAdIndex&lt;/code&gt; value. Then, it uses that value to select an &lt;code&gt;adItem&lt;/code&gt; from the array.</source>
          <target state="translated">まず、設定 &lt;code&gt;currentAdIndex&lt;/code&gt; の長さによってそれを割ること、それが現在どのような撮影によってプラス一つ &lt;code&gt;AdItem&lt;/code&gt; のアレイ、及び用い&lt;em&gt;残りを&lt;/em&gt;新しいとして &lt;code&gt;currentAdIndex&lt;/code&gt; の値。次に、その値を使用して配列から &lt;code&gt;adItem&lt;/code&gt; を選択します。</target>
        </trans-unit>
        <trans-unit id="14157ae1fec131fa629d1b92aee617e08eeb5f90" translate="yes" xml:space="preserve">
          <source>First, remove the &lt;code&gt;ng-app&lt;/code&gt; attribute from &lt;code&gt;index.html&lt;/code&gt;. Then import &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;, and override its &lt;code&gt;ngDoBootstrap&lt;/code&gt; method:</source>
          <target state="translated">まず、 &lt;code&gt;index.html&lt;/code&gt; から &lt;code&gt;ng-app&lt;/code&gt; 属性を削除します。次に、インポート &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;AppModule&lt;/code&gt; 、及びその上書き &lt;code&gt;ngDoBootstrap&lt;/code&gt; の方法を：</target>
        </trans-unit>
        <trans-unit id="b845f5994781cbb37e79a231e7de156b52c5e2fe" translate="yes" xml:space="preserve">
          <source>First, set up the checkout form model. Defined in the component class, the form model is the source of truth for the status of the form.</source>
          <target state="translated">まず、チェックアウトフォームモデルを設定します。コンポーネントクラスで定義されているフォームモデルは、フォームの状態の真理の源です。</target>
        </trans-unit>
        <trans-unit id="13ba5cc308cd8a4055d4553f319b826982eac734" translate="yes" xml:space="preserve">
          <source>First, use the child's selector, here &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt;, as a directive within the parent component template. Then, use &lt;a href=&quot;template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt; to bind the property in the child to the property of the parent.</source>
          <target state="translated">まず、子のセレクター（ここでは &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt; ）を親コンポーネントテンプレート内のディレクティブとして使用します。次に、&lt;a href=&quot;template-syntax#property-binding&quot;&gt;プロパティバインディング&lt;/a&gt;を使用して、子のプロパティを親のプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="9647450b7ff56001720b551df6dcc0a33e9ca5a8" translate="yes" xml:space="preserve">
          <source>First, you have to import references to the &lt;code&gt;&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; decorator and the &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt; lifecycle hook.</source>
          <target state="translated">最初に、 &lt;code&gt;&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; デコレーターと &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt; ライフサイクルフックへの参照をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="025340734ec5d57ee79e8d037ce0de5cd9fffa35" translate="yes" xml:space="preserve">
          <source>First, you'll set up the checkout form model. The form model is the source of truth for the status of the form and is defined in the component class.</source>
          <target state="translated">まず、チェックアウトのフォームモデルを設定します。フォームモデルはフォームの状態の真理の源であり、コンポーネントクラスで定義されています。</target>
        </trans-unit>
        <trans-unit id="3b3c920d85163b18d2227d8f537cf1e61cb153fd" translate="yes" xml:space="preserve">
          <source>Fixed a bug in the router where the arguments for &lt;code&gt;future&lt;/code&gt; and &lt;code&gt;curr&lt;/code&gt; snapshots were reversed in the call to &lt;code&gt;shouldReuseRoute&lt;/code&gt; when processing child routes. Usually this ordering mistake doesn't matter because most implementations of &lt;a href=&quot;../api/router/routereusestrategy#shouldReuseRoute&quot;&gt;&lt;code&gt;shouldReuseRoute&lt;/code&gt;&lt;/a&gt; just do an equality comparison between &lt;code&gt;future&lt;/code&gt; and &lt;code&gt;curr&lt;/code&gt;. However, some implementations actually do rely on values specifically on one of the two and will need to be updated. See &lt;a href=&quot;https://github.com/angular/angular/pull/26949&quot;&gt;PR 26949&lt;/a&gt;.</source>
          <target state="translated">子ルートを処理するときに &lt;code&gt;shouldReuseRoute&lt;/code&gt; の呼び出しで &lt;code&gt;future&lt;/code&gt; スナップショットと &lt;code&gt;curr&lt;/code&gt; スナップショットの引数が逆になるルーターのバグを修正しました。通常、この順序の間違いは問題ではありません&lt;a href=&quot;../api/router/routereusestrategy#shouldReuseRoute&quot;&gt; &lt;code&gt;shouldReuseRoute&lt;/code&gt; &lt;/a&gt;ほとんどの実装は、 &lt;code&gt;future&lt;/code&gt; と &lt;code&gt;curr&lt;/code&gt; を同等に比較するだけだからです。ただし、一部の実装は実際には2つのうちの1つに特に依存する値に依存しているため、更新する必要があります。&lt;a href=&quot;https://github.com/angular/angular/pull/26949&quot;&gt;PR26949を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f85d85326853baf05275197db6d10fd7ad94a38d" translate="yes" xml:space="preserve">
          <source>Fixes linting errors (may overwrite linted files).</source>
          <target state="translated">lintingエラーを修正(lintedファイルを上書きする可能性がある)。</target>
        </trans-unit>
        <trans-unit id="845cf578b2efea633be3f3f6070c477978db19d2" translate="yes" xml:space="preserve">
          <source>Fixture for debugging and testing a component.</source>
          <target state="translated">コンポーネントのデバッグとテスト用の固定具。</target>
        </trans-unit>
        <trans-unit id="47027d345cd1b888dd24d533746624ba383f61c3" translate="yes" xml:space="preserve">
          <source>Flag to prevent building an app shell.</source>
          <target state="translated">アプリシェルをビルドしないようにするためのフラグ。</target>
        </trans-unit>
        <trans-unit id="c38db9c9703b1880f1fb4cc292db33fcfd41bfef" translate="yes" xml:space="preserve">
          <source>Flags for renderer-specific style modifiers.</source>
          <target state="translated">レンダラー固有のスタイル修飾子のフラグ。</target>
        </trans-unit>
        <trans-unit id="23f8b52bc03b06820d6fbf3a3116fc3217e1c3d2" translate="yes" xml:space="preserve">
          <source>Flags for style variations to remove, if set. ???</source>
          <target state="translated">設定されていれば削除するスタイルのバリエーションのフラグ。???</target>
        </trans-unit>
        <trans-unit id="7419f582323423b571d0e8104b85663f8483a737" translate="yes" xml:space="preserve">
          <source>Flags for style variations. No flags are set by default.</source>
          <target state="translated">スタイルのバリエーションのためのフラグ。デフォルトではフラグは設定されていません。</target>
        </trans-unit>
        <trans-unit id="79c9e13ab7d502c6c70eca7c038f62d6c49fda0d" translate="yes" xml:space="preserve">
          <source>Flat</source>
          <target state="translated">Flat</target>
        </trans-unit>
        <trans-unit id="aef62e073c9538aa87c8c38c1a8bf61bded98e36" translate="yes" xml:space="preserve">
          <source>Floating images</source>
          <target state="translated">フローティング画像</target>
        </trans-unit>
        <trans-unit id="13f80ff3ae7d009b1e01b88f21afe2491230965e" translate="yes" xml:space="preserve">
          <source>Floating within a subsection</source>
          <target state="translated">サブセクション内でのフローティング</target>
        </trans-unit>
        <trans-unit id="3f72320cb9eb3892311c36e1201deb897716e20a" translate="yes" xml:space="preserve">
          <source>Flush any pending microtasks.</source>
          <target state="translated">保留中のマイクロタスクはすべて洗い流してください。</target>
        </trans-unit>
        <trans-unit id="1313760637068e67ab353348deb675e763580ff0" translate="yes" xml:space="preserve">
          <source>FlyingHeroesPipe</source>
          <target state="translated">FlyingHeroesPipe</target>
        </trans-unit>
        <trans-unit id="99407d81116edc10941a2ff4ec9acfbf36986d2a" translate="yes" xml:space="preserve">
          <source>FnArg</source>
          <target state="translated">FnArg</target>
        </trans-unit>
        <trans-unit id="674038e3b673c8e05950f1b1b8076bd2888c3b23" translate="yes" xml:space="preserve">
          <source>Focus on the &lt;code&gt;overrideComponent&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;overrideComponent&lt;/code&gt; メソッドに注目してください。</target>
        </trans-unit>
        <trans-unit id="be96b0e964115bda6f5295db5f73a0974e889ff3" translate="yes" xml:space="preserve">
          <source>Focus on the binding syntax: &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">バインディング構文に焦点を当てます： &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba0c349131fd653362da503d9138988c231e9862" translate="yes" xml:space="preserve">
          <source>Focus on the component's template.</source>
          <target state="translated">コンポーネントのテンプレートに注目してください。</target>
        </trans-unit>
        <trans-unit id="f18ba6e3dca6a56b206e311fd8d02d70252a5f8a" translate="yes" xml:space="preserve">
          <source>Focus on the constructor parameters.</source>
          <target state="translated">コンストラクタのパラメータに注目してください。</target>
        </trans-unit>
        <trans-unit id="99a92a1737d6303412bc431ba1e6ab979fe2f4f1" translate="yes" xml:space="preserve">
          <source>Focus on the following three TypeScript (&lt;code&gt;.ts&lt;/code&gt;) files in the &lt;strong&gt;&lt;code&gt;/src&lt;/code&gt;&lt;/strong&gt; folder.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;/src&lt;/code&gt; &lt;/strong&gt;フォルダーにある次の3つのTypeScript（ &lt;code&gt;.ts&lt;/code&gt; ）ファイルに注目してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a846cc83c7322e6b47e27db868c9dc21caecc84c" translate="yes" xml:space="preserve">
          <source>Focus on the spy.</source>
          <target state="translated">スパイに集中して</target>
        </trans-unit>
        <trans-unit id="f75aee18c2edafe7ea1d576022a1b8458bd9dd44" translate="yes" xml:space="preserve">
          <source>Focus on the template:</source>
          <target state="translated">テンプレートを中心に。</target>
        </trans-unit>
        <trans-unit id="8b610be124aa3a40ce1b39d37fc11b0b04c6263e" translate="yes" xml:space="preserve">
          <source>Foldable</source>
          <target state="translated">Foldable</target>
        </trans-unit>
        <trans-unit id="57b7ec24a9b1313c299b9748f089e1707332463e" translate="yes" xml:space="preserve">
          <source>Foldable syntax</source>
          <target state="translated">折りたたみ可能な構文</target>
        </trans-unit>
        <trans-unit id="8545108042043a15c515d62cdfb13f4185ac9c95" translate="yes" xml:space="preserve">
          <source>Follow the AngularJS Style Guide</source>
          <target state="translated">AngularJSスタイルガイドに従う</target>
        </trans-unit>
        <trans-unit id="11c7ef116d47d698a7592c21c0ecd9f0b8006417" translate="yes" xml:space="preserve">
          <source>Follow the instructions in &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt; to create a starter Angular app using the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;setup-local&quot;&gt;ローカル環境設定の&lt;/a&gt;指示に従って、CLIコマンド&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;を使用してスターターAngularアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="cbba88aeff252999f7189b7c5791e6b635b7d58f" translate="yes" xml:space="preserve">
          <source>Follow the prompts to select the &lt;code&gt;Firebase&lt;/code&gt; project you are creating for hosting.</source>
          <target state="translated">プロンプトに従って、ホスティング用に作成している &lt;code&gt;Firebase&lt;/code&gt; プロジェクトを選択します。</target>
        </trans-unit>
        <trans-unit id="9290916a8ada6d592efd89d4b0ce3854336f1797" translate="yes" xml:space="preserve">
          <source>Follow these steps:</source>
          <target state="translated">以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="80fc20b87aee155bca3d86ee5c873949fa8a32e0" translate="yes" xml:space="preserve">
          <source>Follow this convention when you write similar modules with configurable service providers.</source>
          <target state="translated">設定可能なサービスプロバイダを使用して同様のモジュールを書く場合は、この規則に従ってください。</target>
        </trans-unit>
        <trans-unit id="ac5a22ef48584da5d4a3bf95e83238cf1a90ec1c" translate="yes" xml:space="preserve">
          <source>Following is all the code discussed in this page.</source>
          <target state="translated">このページで取り上げたコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="528abf3dd48bf1a361c849a3e5d23ed3a8e477b4" translate="yes" xml:space="preserve">
          <source>Following the same pattern as with the &lt;code&gt;FlowerService&lt;/code&gt;, inject the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;AppComponent&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;FlowerService&lt;/code&gt; の場合と同じパターンに従って、 &lt;code&gt;AnimalService&lt;/code&gt; を &lt;code&gt;AppComponent&lt;/code&gt; クラスに挿入します。</target>
        </trans-unit>
        <trans-unit id="28f59b43a2e986c305127840c478d30a5aaa678d" translate="yes" xml:space="preserve">
          <source>Fonts optimization requires internet access. When enabled, render blocking requests will be reduced by inlining external Google fonts and icons CSS definitions in the application's HTML index file.</source>
          <target state="translated">フォントの最適化にはインターネットアクセスが必要です。この機能を有効にすると、アプリケーションの HTML インデックス ファイルに外部の Google フォントとアイコンの CSS 定義をインライン化することで、レンダリング ブロッキング要求が削減されます。</target>
        </trans-unit>
        <trans-unit id="954d922028bc7e30f824816d4fa2677158b0313f" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;glossary#universal&quot;&gt;Universal&lt;/a&gt;, you can reduce the code rendered in the HTML page by setting styles optimization to &lt;code&gt;true&lt;/code&gt; and styles source maps to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#universal&quot;&gt;ユニバーサル&lt;/a&gt;、あなたはにスタイルの最適化を設定することで、HTMLページにレンダリングコード減らすことができ &lt;code&gt;true&lt;/code&gt; とスタイルソースはにマップ &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="535b9d0a128d217ab7a761117b90df97816a242a" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; pipe format options, see &lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;.</source>
          <target state="translated">以下のために &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; パイプ形式オプションを参照してください&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipeを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01162b62b308e6eea867c12d8bc4942259834c93" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, 'M/d/yy, h:mm a'&lt;code&gt;(Example:&lt;/code&gt;6/15/15, 9:03 AM`)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 'M / D / YY、H：MMのA' &lt;code&gt;(Example:&lt;/code&gt; 6/15/15、午前9時03 AM`）</target>
        </trans-unit>
        <trans-unit id="87cbdf03fb63d9818c63c6f32dd96510ce36f71a" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'EEEE, MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; zzzz'&lt;/code&gt; (Example: &lt;code&gt;&lt;a href=&quot;weekday#Monday&quot;&gt;Monday&lt;/a&gt;, June 15, 2015 at 9:03:01 AM GMT+01:00&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'EEEE, MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; zzzz'&lt;/code&gt; （例： &lt;code&gt;&lt;a href=&quot;weekday#Monday&quot;&gt;Monday&lt;/a&gt;, June 15, 2015 at 9:03:01 AM GMT+01:00&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="47a340ba156cb83b332286d4232b3c377581b441" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'EEEE, MMMM d, y, h:mm:ss a zzzz'&lt;/code&gt; (Example: &lt;code&gt;Monday, June 15, 2015 at 9:03:01 AM GMT+01:00&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'EEEE, MMMM d, y, h:mm:ss a zzzz'&lt;/code&gt; （例： &lt;code&gt;Monday, June 15, 2015 at 9:03:01 AM GMT+01:00&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8125fcff305766783603f665ed203f09c7127e92" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'MMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;'&lt;/code&gt; (Example: &lt;code&gt;Jun 15, 2015, 9:03:01 AM&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'MMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;'&lt;/code&gt; （例： &lt;code&gt;Jun 15, 2015, 9:03:01 AM&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a999087c962b65b5fc80f20398fc3055db57375e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'MMM d, y, h:mm:ss a'&lt;/code&gt; (Example: &lt;code&gt;Jun 15, 2015, 9:03:01 AM&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'MMM d, y, h:mm:ss a'&lt;/code&gt; （例： &lt;code&gt;Jun 15, 2015, 9:03:01 AM&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bb6b5a9d378e0fa8d1fc57f33040f3883a3465f0" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; z'&lt;/code&gt; (Example: &lt;code&gt;June 15, 2015 at 9:03:01 AM GMT+1&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; z'&lt;/code&gt; （例： &lt;code&gt;June 15, 2015 at 9:03:01 AM GMT+1&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="0e8309126010d75a393ad3baa830a71b505879c9" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'MMMM d, y, h:mm:ss a z'&lt;/code&gt; (Example: &lt;code&gt;June 15, 2015 at 9:03:01 AM GMT+1&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'MMMM d, y, h:mm:ss a z'&lt;/code&gt; （例： &lt;code&gt;June 15, 2015 at 9:03:01 AM GMT+1&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="615c1a0449b23b9b11bdc05ef40763586f9c816e" translate="yes" xml:space="preserve">
          <source>For AOT compilation, include the &lt;code&gt;--aot&lt;/code&gt; option with the &lt;code&gt;ng build&lt;/code&gt; or &lt;code&gt;ng serve&lt;/code&gt; command:</source>
          <target state="translated">AOTコンパイルの場合は、 &lt;code&gt;ng build&lt;/code&gt; コマンドまたは &lt;code&gt;ng serve&lt;/code&gt; コマンドに &lt;code&gt;--aot&lt;/code&gt; オプションを含めます。</target>
        </trans-unit>
        <trans-unit id="366254ac553179e02b799a6f00c72532a5afc495" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;, the values of enabled controls as an array.</source>
          <target state="translated">用 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 、アレイとして有効にコントロールの値。</target>
        </trans-unit>
        <trans-unit id="fed41b2d73d63d1a8ff91591ee7067e07e3bd040" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, the current value.</source>
          <target state="translated">以下のために &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、現在の値。</target>
        </trans-unit>
        <trans-unit id="0c133008b01e0d9e64b77e4e0277f5fc75d7f1f4" translate="yes" xml:space="preserve">
          <source>For a complete description of the NgModule metadata properties, see &lt;a href=&quot;ngmodule-api&quot;&gt;Using the NgModule metadata&lt;/a&gt;.</source>
          <target state="translated">NgModuleメタデータプロパティの詳細については、「&lt;a href=&quot;ngmodule-api&quot;&gt;NgModuleメタデータの使用&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f43b85c1829894944e92d8aa96dd451f69c98e7b" translate="yes" xml:space="preserve">
          <source>For a complete list of built-in pipes, see the &lt;a href=&quot;../api/common#pipes&quot;&gt;pipes API documentation&lt;/a&gt;.</source>
          <target state="translated">組み込みパイプの完全なリストについては、&lt;a href=&quot;../api/common#pipes&quot;&gt;パイプAPIのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a4deee0bdf8c15ca3196a32013eae0eedb59494" translate="yes" xml:space="preserve">
          <source>For a complete list of locales supported by Angular, see &lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;the Angular repository&lt;/a&gt;.</source>
          <target state="translated">Angularがサポートするロケールの完全なリストについて&lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;は、Angularリポジトリを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3f85eb5b33c42136f7f1e0ea2567c82a8da57cb1" translate="yes" xml:space="preserve">
          <source>For a demonstration of the syntax and code snippets in this section, see the &lt;span name=&quot;binding-syntax&quot;&gt;binding syntax example&lt;/span&gt;.</source>
          <target state="translated">このセクションの構文とコードスニペットのデモについては、&lt;span name=&quot;binding-syntax&quot;&gt;バインディング構文の例を&lt;/span&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0db23d1180e42942344c6da322408ea0d6dccba7" translate="yes" xml:space="preserve">
          <source>For a demonstration of the syntax and code snippets in this section, see the &lt;span name=&quot;template-reference-variables&quot;&gt;template reference variables example&lt;/span&gt;.</source>
          <target state="translated">このセクションの構文とコードスニペットのデモについては、&lt;span name=&quot;template-reference-variables&quot;&gt;テンプレート参照変数の例を&lt;/span&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b37874a6cbfb3027c0ab76729338e5dbcb431c0b" translate="yes" xml:space="preserve">
          <source>For a demonstration of the syntax and code snippets in this section, see the &lt;span name=&quot;two-way-binding&quot;&gt;two-way binding example&lt;/span&gt;.</source>
          <target state="translated">このセクションの構文とコードスニペットのデモについては、&lt;span name=&quot;two-way-binding&quot;&gt;双方向バインディングの例を&lt;/span&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="8a34954312c37d216e0ffa8bd3419794239b563f" translate="yes" xml:space="preserve">
          <source>For a detailed explanation the build process, see &lt;a href=&quot;build&quot;&gt;Building and serving Angular apps&lt;/a&gt;. This build process works for translation files in the &lt;code&gt;.xlf&lt;/code&gt; format or in another format that Angular understands, such as &lt;code&gt;.xtb&lt;/code&gt;.</source>
          <target state="translated">ビルドプロセスの詳細については、&lt;a href=&quot;build&quot;&gt;Angularアプリのビルドと提供を&lt;/a&gt;参照してください。このビルドプロセスはで翻訳ファイルのために働く &lt;code&gt;.xlf&lt;/code&gt; 形式または角のような、理解することを別の形式で &lt;code&gt;.xtb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0907856c006b39c30ec9fba9037965fae1b76a6c" translate="yes" xml:space="preserve">
          <source>For a development build, the output produced by &lt;code&gt;ng build&lt;/code&gt; is simpler and easier to debug, allowing you to rely less on sourcemaps of compiled code.</source>
          <target state="translated">開発ビルドの場合、 &lt;code&gt;ng build&lt;/code&gt; によって生成される出力はよりシンプルでデバッグが容易であるため、コンパイルされたコードのソースマップへの依存度が低くなります。</target>
        </trans-unit>
        <trans-unit id="dca82a3371da568933815b1a8dcec9ba11807d39" translate="yes" xml:space="preserve">
          <source>For a disabled &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, the values of all controls as an object with a key-value pair for each member of the group.</source>
          <target state="translated">無効な &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の場合、グループの各メンバーのキーと値のペアを持つオブジェクトとしてのすべてのコントロールの値。</target>
        </trans-unit>
        <trans-unit id="fb5cd3f455660d8e4c7eded02e274eefa1025c99" translate="yes" xml:space="preserve">
          <source>For a fuller introduction to Angular's template syntax, see &lt;a href=&quot;guide/architecture-components#template-syntax&quot;&gt;Introduction to components and templates&lt;/a&gt;.</source>
          <target state="translated">Angularのテンプレート構文の詳細については&lt;a href=&quot;guide/architecture-components#template-syntax&quot;&gt;、コンポーネントとテンプレートの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="21a3f0180e64a088986c38175afc3804ead850f8" translate="yes" xml:space="preserve">
          <source>For a library compiled without &lt;code&gt;strictNullChecks&lt;/code&gt;, its declaration files will not indicate whether a field can be &lt;code&gt;null&lt;/code&gt; or not. For situations where the library handles &lt;code&gt;null&lt;/code&gt; correctly, this is problematic, as the compiler will check a nullable value against the declaration files which omit the &lt;code&gt;null&lt;/code&gt; type. As such, the compiler produces a type-check error because it adheres to &lt;code&gt;strictNullChecks&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strictNullChecks&lt;/code&gt; なしでコンパイルされたライブラリの場合、その宣言ファイルは、フィールドが &lt;code&gt;null&lt;/code&gt; になり得るかどうかを示しません。ライブラリが &lt;code&gt;null&lt;/code&gt; を正しく処理する状況では、コンパイラが &lt;code&gt;null&lt;/code&gt; 型を省略した宣言ファイルに対してnull許容値をチェックするため、これは問題があります。そのため、コンパイラは &lt;code&gt;strictNullChecks&lt;/code&gt; に準拠しているため、型チェックエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="45a561ba7c1c51805ef39bb6a87cdaafee124e29" translate="yes" xml:space="preserve">
          <source>For a list of DOM events, see: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/Events&lt;/a&gt;.</source>
          <target state="translated">DOMイベントのリストについては、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;https&lt;/a&gt;：//developer.mozilla.org/en-US/docs/Web/Eventsを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd3b687881cef64a0161bee4d801855af9d8521a" translate="yes" xml:space="preserve">
          <source>For a list of language codes, see &lt;a href=&quot;https://www.loc.gov/standards/iso639-2/&quot;&gt;ISO 639-2&lt;/a&gt;.</source>
          <target state="translated">言語コードのリストについては、&lt;a href=&quot;https://www.loc.gov/standards/iso639-2/&quot;&gt;ISO639-2を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1b34018802d350c96ec51dd65107c66e3816e190" translate="yes" xml:space="preserve">
          <source>For a more complete example and discussion, see &lt;a href=&quot;../../guide/lifecycle-hooks#defining-custom-change-detection&quot;&gt;Defining custom change detection&lt;/a&gt;.</source>
          <target state="translated">より完全な例と説明については、&lt;a href=&quot;../../guide/lifecycle-hooks#defining-custom-change-detection&quot;&gt;カスタム変更検出の定義を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2dd5f6af9f382ca67ac129bad7cd5aa1a0565560" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion of the differences and their implications, see &lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;Upgrading for Performance&lt;/a&gt;.</source>
          <target state="translated">違いとその影響の詳細については、「&lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;パフォーマンスのためのアップグレード」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cc66a61178ac7b88b12368f21d5b48b2c671f9ef" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion of these concepts, see &lt;a href=&quot;architecture-components&quot;&gt;Introduction to components&lt;/a&gt;.</source>
          <target state="translated">これらの概念の詳細については、&lt;a href=&quot;architecture-components&quot;&gt;コンポーネントの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c337b01d15862c6742dfaef9e2e117a14e2fd2dd" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion, see &lt;a href=&quot;architecture-modules&quot;&gt;Introduction to modules&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture-modules&quot;&gt;モジュールの概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="586ff2e84338f7def76edce5c6f12aee801fda77" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion, see &lt;a href=&quot;architecture-services&quot;&gt;Introduction to services and DI&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture-services&quot;&gt;サービスとDIの概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d4cd5e4bd0778cad7950bd52a42ef74913046ae2" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion, see &lt;a href=&quot;router&quot;&gt;Routing and navigation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーションを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a73e93b07219a0df7b025b0a73e4e86089de6972" translate="yes" xml:space="preserve">
          <source>For a more detailed look at different techniques and concepts surrounding SSR, please check out this &lt;a href=&quot;https://developers.google.com/web/updates/2019/02/rendering-on-the-web&quot;&gt;article&lt;/a&gt;.</source>
          <target state="translated">SSRに関するさまざまな手法と概念の詳細については、こちらの&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/rendering-on-the-web&quot;&gt;記事&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="750cd369db6afa2ea7217c34574571bcfa6f38c2" translate="yes" xml:space="preserve">
          <source>For a more strikingly visual effect, hide the data entry area and display something else.</source>
          <target state="translated">より印象的な視覚効果を得るためには、データ入力エリアを隠して別のものを表示します。</target>
        </trans-unit>
        <trans-unit id="fbf4f4c32708274e1458286aced4e7bebc31551d" translate="yes" xml:space="preserve">
          <source>For a more thorough introduction to the fundamental concepts and terminology of Angular single-page app architecture and design principles, read the &lt;a href=&quot;architecture&quot;&gt;Angular Concepts&lt;/a&gt; section.</source>
          <target state="translated">Angularシングルページアプリのアーキテクチャと設計原則の基本的な概念と用語の詳細については、&lt;a href=&quot;architecture&quot;&gt;Angularの概念の&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2022eb522814df1f6325470271058257eb784f7a" translate="yes" xml:space="preserve">
          <source>For a multi-project workspace, application-specific end-to-end tests are in the project root, under &lt;code&gt;projects/project-name/e2e/&lt;/code&gt;.</source>
          <target state="translated">マルチプロジェクトワークスペースの場合、アプリケーション固有のエンドツーエンドテストは、プロジェクトルートの &lt;code&gt;projects/project-name/e2e/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6c8a4e5ce7ca87cad38cdc266c34765f3cdeb6a6" translate="yes" xml:space="preserve">
          <source>For a newly created Angular application, the default &lt;code&gt;browserslist&lt;/code&gt; looks like this:</source>
          <target state="translated">新しく作成されたAngularアプリケーションの場合、デフォルトの &lt;code&gt;browserslist&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c247355b9325393b8179bfd98128011fbe1693db" translate="yes" xml:space="preserve">
          <source>For a production build, your configuration determines which bundles are created for deployment of your application. When needed, the &lt;code&gt;index.html&lt;/code&gt; file is also modified during the build process to include script tags that enable differential loading, as shown in the following example.</source>
          <target state="translated">本番ビルドの場合、構成によって、アプリケーションのデプロイメント用に作成されるバンドルが決まります。次の例に示すように、必要に応じて、ビルドプロセス中に &lt;code&gt;index.html&lt;/code&gt; ファイルも変更され、差分ロードを有効にするスクリプトタグが含まれます。</target>
        </trans-unit>
        <trans-unit id="30a03f66c5fbc0ab53ccc165e51d54b263f55130" translate="yes" xml:space="preserve">
          <source>For a sample app using the app-wide singleton service that this page describes, see the  showcasing all the documented features of NgModules.</source>
          <target state="translated">このページで説明するアプリ全体のシングルトンサービスを使用したサンプルアプリについては、NgModulesのすべてのドキュメント化された機能のショーケースを参照してください。</target>
        </trans-unit>
        <trans-unit id="81c70c1467ee563fc554cbd57f1ad105403d7b92" translate="yes" xml:space="preserve">
          <source>For a server that supports a cookie-based XSRF protection system, use directly to configure XSRF protection with the correct cookie and header names.</source>
          <target state="translated">クッキーベースのXSRF保護システムをサポートしているサーバでは、正しいクッキー名とヘッダ名でXSRF保護を設定するために直接使用します。</target>
        </trans-unit>
        <trans-unit id="92ef30ec204c92904139cd32d14c7f56b8daa6a7" translate="yes" xml:space="preserve">
          <source>For a service, instead of using &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt;, specify &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; on the service's &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator, which makes the service automatically available to the whole application and thus singleton by default.</source>
          <target state="translated">サービスの場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; を使用する代わりに、サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレーターで &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; を指定します。これにより、サービスがアプリケーション全体で自動的に使用可能になり、デフォルトでシングルトンになります。</target>
        </trans-unit>
        <trans-unit id="a6d061778e48acf24bc98d5b4a6e3b6d0a66d145" translate="yes" xml:space="preserve">
          <source>For a service, instead of using &lt;code&gt;forRoot()&lt;/code&gt;, specify &lt;code&gt;providedIn: 'root'&lt;/code&gt; on the service's &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator, which makes the service automatically available to the whole application and thus singleton by default.</source>
          <target state="translated">サービスの場合、 &lt;code&gt;forRoot()&lt;/code&gt; を使用する代わりに、サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレータで &lt;code&gt;providedIn: 'root'&lt;/code&gt; を指定します。これにより、サービスがアプリケーション全体で自動的に利用可能になり、デフォルトでシングルトンになります。</target>
        </trans-unit>
        <trans-unit id="e8211f18ec4be55c727117b3cb53d82d2e117ab5" translate="yes" xml:space="preserve">
          <source>For a single-application workspace, the &lt;code&gt;src/&lt;/code&gt; subfolder of the workspace contains the source files (application logic, data, and assets) for the root application. For a multi-project workspace, additional projects in the &lt;code&gt;projects/&lt;/code&gt; folder contain a &lt;code&gt;project-name/src/&lt;/code&gt; subfolder with the same structure.</source>
          <target state="translated">単一アプリケーションワークスペースの場合、ワークスペースの &lt;code&gt;src/&lt;/code&gt; サブフォルダーには、ルートアプリケーションのソースファイル（アプリケーションロジック、データ、およびアセット）が含まれています。マルチプロジェクトワークスペースの場合、 &lt;code&gt;projects/&lt;/code&gt; フォルダー内の追加プロジェクトには、同じ構造の &lt;code&gt;project-name/src/&lt;/code&gt; サブフォルダーが含まれます。</target>
        </trans-unit>
        <trans-unit id="11cb4bf6c661d8cdd71002583f1d273c15f3e9b8" translate="yes" xml:space="preserve">
          <source>For a summary of the classes and directives provided by &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;Reactive forms API&lt;/a&gt; section below.</source>
          <target state="translated">が提供するクラスとディレクティブの概要について &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 、参照&lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;反応フォームAPIの&lt;/a&gt;以下のセクションを。</target>
        </trans-unit>
        <trans-unit id="bb8ae356358a94ecbb64f29fb84254dceecc6626" translate="yes" xml:space="preserve">
          <source>For a template-driven form, you must create a directive to wrap the validator function. You provide that directive as the validator using the &lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;&lt;code&gt;NG_VALIDATORS&lt;/code&gt; token&lt;/a&gt;, as shown in the following example.</source>
          <target state="translated">テンプレート駆動型フォームの場合、バリデーター関数をラップするディレクティブを作成する必要があります。次の例に示すように、&lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt; &lt;code&gt;NG_VALIDATORS&lt;/code&gt; トークン&lt;/a&gt;を使用して、そのディレクティブをバリデーターとして提供します。</target>
        </trans-unit>
        <trans-unit id="1aeb7084240197448ee7922cc65cd19b115f0503" translate="yes" xml:space="preserve">
          <source>For a use case in which &lt;code&gt;TestBed.get()&lt;/code&gt; does not work, see the &lt;a href=&quot;testing#component-override&quot;&gt;&lt;em&gt;Override component providers&lt;/em&gt;&lt;/a&gt; section that explains when and why you must get the service from the component's injector instead.</source>
          <target state="translated">&lt;code&gt;TestBed.get()&lt;/code&gt; が機能しないユースケースについては、代わりにコンポーネントのインジェクターからサービスを取得する必要がある理由と理由を説明している「&lt;a href=&quot;testing#component-override&quot;&gt;&lt;em&gt;コンポーネントプロバイダー&lt;/em&gt;&lt;/a&gt;の&lt;em&gt;オーバーライド」&lt;/em&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="8fc0a65b899aea0220155a1ec617b728b1744ef4" translate="yes" xml:space="preserve">
          <source>For a use case in which &lt;code&gt;TestBed.inject()&lt;/code&gt; does not work, see the &lt;a href=&quot;testing-components-scenarios#component-override&quot;&gt;&lt;em&gt;Override component providers&lt;/em&gt;&lt;/a&gt; section that explains when and why you must get the service from the component's injector instead.</source>
          <target state="translated">&lt;code&gt;TestBed.inject()&lt;/code&gt; が機能しないユースケースについては、代わりにコンポーネントのインジェクターからサービスを取得する必要がある時期と理由を説明する「&lt;a href=&quot;testing-components-scenarios#component-override&quot;&gt;&lt;em&gt;コンポーネントプロバイダー&lt;/em&gt;&lt;/a&gt;の&lt;em&gt;オーバーライド」&lt;/em&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a56e67dc7e67f63fd67f62752b90970cdfa316a7" translate="yes" xml:space="preserve">
          <source>For a working app showcasing the resolution modifiers that this section covers, see the &lt;span name=&quot;resolution-modifiers&quot;&gt;resolution modifiers example&lt;/span&gt;.</source>
          <target state="translated">このセクションで説明する解像度修飾子を紹介する実際のアプリについては、&lt;span name=&quot;resolution-modifiers&quot;&gt;解像度修飾子の例を&lt;/span&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="31cc9ea09af54d7f2b7e02f088ca897d46a68bda" translate="yes" xml:space="preserve">
          <source>For a working example of the final version of the app, see the .</source>
          <target state="translated">アプリの最終バージョンの動作例については、.NET の .</target>
        </trans-unit>
        <trans-unit id="b4d3ace35db801146c90ad64f7e68f94dffe96e6" translate="yes" xml:space="preserve">
          <source>For accessibility, always set the &lt;code&gt;alt&lt;/code&gt; attribute with a meaningful description of the image.</source>
          <target state="translated">アクセシビリティを &lt;code&gt;alt&lt;/code&gt; するために、常に画像のわかりやすい説明をalt属性に設定してください。</target>
        </trans-unit>
        <trans-unit id="08c197fce1dfb8440b4fadb4a18a680eb4703951" translate="yes" xml:space="preserve">
          <source>For additional guidelines and instructions on preparing an application for AOT compilation, see &lt;a href=&quot;https://medium.com/sparkles-blog/angular-writing-aot-friendly-applications-7b64c8afbe3f&quot;&gt;Angular: Writing AOT-friendly applications&lt;/a&gt;.</source>
          <target state="translated">アプリケーションをAOTコンパイル用に準備するための追加のガイドラインと手順については、&lt;a href=&quot;https://medium.com/sparkles-blog/angular-writing-aot-friendly-applications-7b64c8afbe3f&quot;&gt;Angular：Writing AOT-friendly applicationsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="915ed4227574f9e2660dbb56bb954f7e639602af" translate="yes" xml:space="preserve">
          <source>For additional options you can use when creating a component, see &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; in the API Reference.</source>
          <target state="translated">コンポーネントの作成時に使用できる追加のオプションについては、APIリファレンスの「&lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d02c51c70344581110641be00d5525e6d5b83bbc" translate="yes" xml:space="preserve">
          <source>For additional recommendations and examples, see:</source>
          <target state="translated">追加の推奨事項や例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="ebc01cb72ab6fadd0e63d60001602e9cca6326d8" translate="yes" xml:space="preserve">
          <source>For all services, a library should use &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;tree-shakable providers&lt;/a&gt;, providing dependencies at the root level rather than in component constructors.</source>
          <target state="translated">すべてのサービスで、ライブラリは&lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;ツリーシェイク可能なプロバイダーを&lt;/a&gt;使用し、コンポーネントコンストラクターではなくルートレベルで依存関係を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="95665310eee117159928a1f4cb894a3a7cd28c82" translate="yes" xml:space="preserve">
          <source>For an architectural overview of components, see &lt;a href=&quot;architecture-components&quot;&gt;Introduction to components and templates&lt;/a&gt;.</source>
          <target state="translated">コンポーネントのアーキテクチャの概要については、&lt;a href=&quot;architecture-components&quot;&gt;コンポーネントとテンプレートの&lt;/a&gt;概要を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5f519be37c93f048158115b0ff95a3f9cb7a9d2" translate="yes" xml:space="preserve">
          <source>For an enabled &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, the values of enabled controls as an object with a key-value pair for each member of the group.</source>
          <target state="translated">有効な &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の場合、有効なコントロールの値は、グループの各メンバーのキーと値のペアを持つオブジェクトとして。</target>
        </trans-unit>
        <trans-unit id="35fcfc95bf3f643ffc0e8e4b7a7a3e3d173e2e42" translate="yes" xml:space="preserve">
          <source>For an example app showcasing all the techniques that NgModules related pages cover, see the live example. For explanations on the individual techniques, visit the relevant NgModule pages under the NgModules section.</source>
          <target state="translated">NgModules 関連ページがカバーするすべてのテクニックを紹介するアプリの例は、ライブの例を参照してください。個々のテクニックの説明については、NgModulesセクションのNgModule関連ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9439fadc0091afb2c4f7db52e6361412bc108c20" translate="yes" xml:space="preserve">
          <source>For an existing application, you have to manually add the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; and defining a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; within your application.</source>
          <target state="translated">既存のアプリケーションの場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を手動で追加し、アプリケーション内で &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="0dfb27895771ef6dca5967dbe2c4298ec82610d4" translate="yes" xml:space="preserve">
          <source>For an extended example, see &lt;a href=&quot;../../guide/dependency-injection-in-action#optional&quot;&gt;&quot;Dependency Injection Guide&quot;&lt;/a&gt;.</source>
          <target state="translated">詳細な例については、&lt;a href=&quot;../../guide/dependency-injection-in-action#optional&quot;&gt;「依存性注入ガイド」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dbba5915671a316c7a339feaa343882d79960f93" translate="yes" xml:space="preserve">
          <source>For an in-depth introduction to issues and techniques for designing accessible applications, see the &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/#what_is_accessibility&quot;&gt;Accessibility&lt;/a&gt; section of the Google's &lt;a href=&quot;https://developers.google.com/web/fundamentals/&quot;&gt;Web Fundamentals&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/#what_is_accessibility&quot;&gt;アクセシブル&lt;/a&gt;なアプリケーションを設計するための問題と手法の詳細については、Googleの&lt;a href=&quot;https://developers.google.com/web/fundamentals/&quot;&gt;ウェブの基礎&lt;/a&gt;のアクセシビリティセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c59c3af65c0c6abf18cb803abe77a775b6440430" translate="yes" xml:space="preserve">
          <source>For an introduction to Angular with a ready-made app, see &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt;. For a more in-depth experience of building an Angular app, see the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes&lt;/a&gt; tutorial. Both guide you through using component classes and templates.</source>
          <target state="translated">既製のアプリを使用したAngularの概要については、「&lt;a href=&quot;start&quot;&gt;はじめに」を&lt;/a&gt;参照してください。Angularアプリの構築に関するより詳細なエクスペリエンスについては、&lt;a href=&quot;tutorial&quot;&gt;Tour ofHeroes&lt;/a&gt;チュートリアルを参照してください。どちらも、コンポーネントクラスとテンプレートの使用方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="20e4fa49f3a933e1cf34214398c9fac00acb226b" translate="yes" xml:space="preserve">
          <source>For an overview and details about routing, see &lt;a href=&quot;router&quot;&gt;In-app navigation: routing to views&lt;/a&gt;.</source>
          <target state="translated">ルーティングの概要と詳細については、&lt;a href=&quot;router&quot;&gt;アプリ内ナビゲーション：ビューへのルーティングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="02d5c37942e06265530fb10df1a081ea18901c63" translate="yes" xml:space="preserve">
          <source>For any dependency that you need in your app, you must register a provider with the app's injector, so that the injector can use the provider to create new instances. For a service, the provider is typically the service class itself.</source>
          <target state="translated">アプリで必要な依存関係については、アプリのインジェクタにプロバイダを登録する必要があります。サービスの場合、プロバイダは通常、サービス クラス自体です。</target>
        </trans-unit>
        <trans-unit id="c67701d2786cd41dfd846c64df92980c5c8977f5" translate="yes" xml:space="preserve">
          <source>For any unmatched cardinality, use &lt;code&gt;other {{{minutes}} minutes ago}&lt;/code&gt;. You can use HTML markup and &lt;a href=&quot;glossary#interpolation&quot;&gt;interpolations&lt;/a&gt; such as &lt;code&gt;{{{minutes}}&lt;/code&gt; with the &lt;code&gt;plural&lt;/code&gt; clause in expressions.</source>
          <target state="translated">一致しないカーディナリティーについては、 &lt;code&gt;other {{{minutes}} minutes ago}&lt;/code&gt; 。式の &lt;code&gt;plural&lt;/code&gt; 句では、HTMLマークアップや &lt;code&gt;{{{minutes}}&lt;/code&gt; などの&lt;a href=&quot;glossary#interpolation&quot;&gt;補間を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="4cc9bd9ca012eb99d48275d26071684014874aee" translate="yes" xml:space="preserve">
          <source>For applications that do not use the Angular service worker, refreshing now would display Chrome's Internet disconnected page that says &quot;There is no Internet connection&quot;.</source>
          <target state="translated">Angularのサービスワーカーを使っていないアプリケーションの場合、今すぐリフレッシュするとChromeの「インターネットに接続されていません」というページが表示されてしまいます。</target>
        </trans-unit>
        <trans-unit id="4e085192902c042727c03a5e288669b2ed78933e" translate="yes" xml:space="preserve">
          <source>For applications that use a module loader, TypeScript imports and exports (which are really ECMAScript 2015 imports and exports) can be used to organize code into modules.</source>
          <target state="translated">モジュールローダーを使用するアプリケーションでは、TypeScript のインポートとエクスポート(これは実際には ECMAScript 2015 のインポートとエクスポートです)を使用して、コードをモジュールに整理することができます。</target>
        </trans-unit>
        <trans-unit id="82065dd0d194076720bd160e9ef4ea6f38ae23b4" translate="yes" xml:space="preserve">
          <source>For apps that run in the browser, import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; in the root &lt;code&gt;AppModule&lt;/code&gt; because it provides services that are essential to launch and run a browser app. &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;&amp;rsquo;s providers are for the whole app so it should only be in the root module, not in feature modules. Feature modules only need the common directives in &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;; they don&amp;rsquo;t need to re-install app-wide providers.</source>
          <target state="translated">ブラウザーで実行するアプリの場合は、ブラウザーアプリを起動して実行するために不可欠なサービスを提供するため、ルート &lt;code&gt;AppModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートします。 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; のプロバイダーはアプリ全体を対象としているため、機能モジュールではなく、ルートモジュールにのみ配置する必要があります。機能モジュールは &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; の共通ディレクティブのみを必要とします。アプリ全体のプロバイダーを再インストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="71739e2e72f69ca13115636123c21e230580b17e" translate="yes" xml:space="preserve">
          <source>For apps that use routing</source>
          <target state="translated">ルーティングを使用するアプリの場合</target>
        </trans-unit>
        <trans-unit id="d6454be884bb001961f7873a56e27650c1d20938" translate="yes" xml:space="preserve">
          <source>For block code snippets, we generally prefer to display code with the Angular documentation &lt;em&gt;code-example&lt;/em&gt; component represented by the &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tag. The &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tag has a &lt;code&gt;header&lt;/code&gt; attribute that you use to identify the file that the example comes from. The header should be used whenever possible to establish the context of the example. See &lt;a href=&quot;docs-style-guide#code-snippets-and-code-samples&quot;&gt;Code snippets and code examples&lt;/a&gt; for more details.</source>
          <target state="translated">ブロックコードスニペットの場合、通常、 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; タグで表されるAngularドキュメントの&lt;em&gt;コード例&lt;/em&gt;コンポーネントを使用してコードを表示することを好みます。 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; タグは &lt;code&gt;header&lt;/code&gt; あなたは例がから来ているファイルを識別するために使用する属性を。ヘッダーは、例のコンテキストを確立するために可能な限り使用する必要があります。詳細については、&lt;a href=&quot;docs-style-guide#code-snippets-and-code-samples&quot;&gt;コードスニペットとコード例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="71540f69257e7ef9f20551f9d8e74cdfb9693cc2" translate="yes" xml:space="preserve">
          <source>For cases where this is unavoidable, use the built-in Angular sanitization functions. Sanitize untrusted values with the &lt;a href=&quot;../api/platform-browser/domsanitizer#sanitize&quot;&gt;DomSanitizer.sanitize&lt;/a&gt; method and the appropriate &lt;code&gt;&lt;a href=&quot;../api/core/securitycontext&quot;&gt;SecurityContext&lt;/a&gt;&lt;/code&gt;. That function also accepts values that were marked as trusted using the &lt;code&gt;bypassSecurityTrust&lt;/code&gt;... functions, and will not sanitize them, as &lt;a href=&quot;security#bypass-security-apis&quot;&gt;described below&lt;/a&gt;.</source>
          <target state="translated">これが避けられない場合は、組み込みのAngularサニタイズ関数を使用してください。&lt;a href=&quot;../api/platform-browser/domsanitizer#sanitize&quot;&gt;DomSanitizer.sanitize&lt;/a&gt;メソッドと適切な &lt;code&gt;&lt;a href=&quot;../api/core/securitycontext&quot;&gt;SecurityContext&lt;/a&gt;&lt;/code&gt; を使用して、信頼できない値を無害化します。この関数は、 &lt;code&gt;bypassSecurityTrust&lt;/code&gt; ...関数を使用して信頼できるとマークされた値も受け入れ、&lt;a href=&quot;security#bypass-security-apis&quot;&gt;以下で説明するように&lt;/a&gt;それらをサニタイズしません。</target>
        </trans-unit>
        <trans-unit id="8a39b3875e189eb4ca0c89b960bcc8cb4271675d" translate="yes" xml:space="preserve">
          <source>For comparison, the demo shows both methods. One button adds the popup using the dynamic-loading method, and the other uses the custom element. You can see that the result is the same; only the preparation is different.</source>
          <target state="translated">比較のために、デモでは両方の方法を示しています。一方のボタンはダイナミック ロード メソッドを使用してポップアップを追加し、もう一方のボタンはカスタム要素を使用しています。結果が同じであることがわかります。</target>
        </trans-unit>
        <trans-unit id="3f88f6bb41248fb25551d2f1b086cb4402c8d2aa" translate="yes" xml:space="preserve">
          <source>For complete syntax details of these classes and directives, see the API reference documentation for the &lt;a href=&quot;../api/forms&quot;&gt;Forms package&lt;/a&gt;.</source>
          <target state="translated">これらのクラスとディレクティブの完全な構文の詳細については、&lt;a href=&quot;../api/forms&quot;&gt;Formsパッケージの&lt;/a&gt;APIリファレンスドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d74527bdd74a5664d4479e5a7e305e2b2fea8f27" translate="yes" xml:space="preserve">
          <source>For context, consider setting a &lt;em&gt;single&lt;/em&gt; style value with &lt;a href=&quot;attribute-binding#style-binding&quot;&gt;style binding&lt;/a&gt;, without &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンテキストとして、 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; を使用せずに、&lt;a href=&quot;attribute-binding#style-binding&quot;&gt;スタイルバインディングを使用&lt;/a&gt;して&lt;em&gt;単一の&lt;/em&gt;スタイル値を設定することを検討してください。</target>
        </trans-unit>
        <trans-unit id="865a0de0e84df467f2e752ab54699a7f5954a151" translate="yes" xml:space="preserve">
          <source>For context, consider setting a &lt;em&gt;single&lt;/em&gt; style value with &lt;a href=&quot;template-syntax#style-binding&quot;&gt;style binding&lt;/a&gt;, without &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンテキストについては、 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; を使用せずに、&lt;a href=&quot;template-syntax#style-binding&quot;&gt;スタイルバインディング&lt;/a&gt;で&lt;em&gt;単一の&lt;/em&gt;スタイル値を設定することを検討してください。</target>
        </trans-unit>
        <trans-unit id="8bc830cbd7287563c25d1d3389827fb12f3a8001" translate="yes" xml:space="preserve">
          <source>For custom classes or interfaces used in components or service, check whether they depend on additional classes or interfaces that also need to be migrated.</source>
          <target state="translated">コンポーネントやサービスで使用されるカスタムクラスやインターフェイスについては、それらが追加のクラスやインターフェイスに依存しているかどうかを確認し、それらも移行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3c55a614865ad2c11b1723c5f48adafb226d2339" translate="yes" xml:space="preserve">
          <source>For data or logic that isn't associated with a specific view, and that you want to share across components, you create a &lt;em&gt;service&lt;/em&gt; class. A service class definition is immediately preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. The decorator provides the metadata that allows other providers to be &lt;strong&gt;injected&lt;/strong&gt; as dependencies into your class.</source>
          <target state="translated">特定のビューに関連付けられておらず、コンポーネント間で共有するデータまたはロジックについては、&lt;em&gt;サービス&lt;/em&gt;クラスを作成し&lt;em&gt;ます&lt;/em&gt;。サービスクラス定義の直前には、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータがあります。デコレーターは、他のプロバイダーを依存関係としてクラスに&lt;strong&gt;挿入&lt;/strong&gt;できるようにするメタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="ba3f9f9ba909015786f607f654afb1de87571018" translate="yes" xml:space="preserve">
          <source>For detailed information and guidance on updating your application, see the interactive &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;.</source>
          <target state="translated">アプリケーションの更新に関する詳細情報とガイダンスについては、インタラクティブな&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guideを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3c0f77845d6547228c1544a3261cba4f83b3a74" translate="yes" xml:space="preserve">
          <source>For detailed usage information, see the &lt;a href=&quot;../../guide/router&quot;&gt;Routing Guide&lt;/a&gt;.</source>
          <target state="translated">使用方法の詳細については、&lt;a href=&quot;../../guide/router&quot;&gt;ルーティングガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f1475c5e9774d7a4a828ca68604b8f34d2642f0e" translate="yes" xml:space="preserve">
          <source>For details about &lt;code&gt;tsconfig.json&lt;/code&gt;, see the official &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript wiki&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; の詳細については、公式の&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript wikiを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4bab4f7c1f186fde5dd33b6553841cab367c91c7" translate="yes" xml:space="preserve">
          <source>For details about changes between versions, and information about updating from previous releases, see the Releases tab on GitHub: &lt;a href=&quot;https://github.com/angular/angular-cli/releases&quot;&gt;https://github.com/angular/angular-cli/releases&lt;/a&gt;</source>
          <target state="translated">バージョン間の変更の詳細と、以前のリリースからの更新については、GitHubの[リリース]タブを参照して&lt;a href=&quot;https://github.com/angular/angular-cli/releases&quot;&gt;ください&lt;/a&gt;：https : //github.com/angular/angular-cli/releases</target>
        </trans-unit>
        <trans-unit id="e63b761bd397b9e0a41fef4446be9d3b1c81c47d" translate="yes" xml:space="preserve">
          <source>For details and examples of observables, see the &lt;a href=&quot;observables#using-observables-to-pass-values&quot;&gt;Observables Overview&lt;/a&gt;.</source>
          <target state="translated">オブザーバブルの詳細と例については、&lt;a href=&quot;observables#using-observables-to-pass-values&quot;&gt;オブザーバブルの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="23766cd9b30ec2bf351ff63c0849a0f6f387aa95" translate="yes" xml:space="preserve">
          <source>For details of these data structure and syntax, see the &lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics/README.md&quot;&gt;Schematics README&lt;/a&gt;.</source>
          <target state="translated">これらのデータ構造と構文の詳細については、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics/README.md&quot;&gt;回路図のREADMEを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="93b37340edf7cde32ae7341cddf3d85aac197396" translate="yes" xml:space="preserve">
          <source>For details of these data structures and syntax, see the &lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics/README.md&quot;&gt;Schematics README&lt;/a&gt;.</source>
          <target state="translated">これらのデータ構造と構文の詳細については、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics/README.md&quot;&gt;SchematicsREADMEを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="50bba4b2e5141d8b8d63c6d75498a89b5c45b766" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;../../guide/deprecations#ngmodel-with-reactive-forms&quot;&gt;Deprecated features&lt;/a&gt;.</source>
          <target state="translated">詳細については、非&lt;a href=&quot;../../guide/deprecations#ngmodel-with-reactive-forms&quot;&gt;推奨の機能を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="541fccad9c0f3d4d19e2c625af6f980747075926" translate="yes" xml:space="preserve">
          <source>For each aspect of style, the following table explains where to find the primary guidelines and what this Angular Documentation Style Guide offers.</source>
          <target state="translated">スタイルの各側面について、以下の表では、主要なガイドラインがどこにあるか、このAngular Documentation Style Guideでは何を提供しているかを説明しています。</target>
        </trans-unit>
        <trans-unit id="a0e64be003f64e5e53c53df41839088c920fc00a" translate="yes" xml:space="preserve">
          <source>For each component listed here, Angular creates a &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; and stores it in the &lt;code&gt;&lt;a href=&quot;componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ここにリストされているコンポーネントごとに、Angularは &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; を作成し、それをComponentFactoryResolverに格納し &lt;code&gt;&lt;a href=&quot;componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="add8347c026ab345310af632fb1bca00afd1317e" translate="yes" xml:space="preserve">
          <source>For each match:</source>
          <target state="translated">一試合ごとに。</target>
        </trans-unit>
        <trans-unit id="6b06187ade59dfe6abfc2250cd1459d4dbed3837" translate="yes" xml:space="preserve">
          <source>For each of these elements, use &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; to set the same initial style for the element. Make it invisible and use &lt;code&gt;transform&lt;/code&gt; to move it out of position so that it can slide into place.</source>
          <target state="translated">これらの各要素について、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; を使用して、要素に同じ初期スタイルを設定します。それを非表示にして、 &lt;code&gt;transform&lt;/code&gt; を使用して位置から移動し、所定の位置にスライドできるようにします。</target>
        </trans-unit>
        <trans-unit id="296a1f382667ab3a9cb177eb53e0592ff7e4bf62" translate="yes" xml:space="preserve">
          <source>For each translation source file, there must be at least one language translation file for the resulting translation.</source>
          <target state="translated">各翻訳ソースファイルには、結果として得られる翻訳のための少なくとも1つの言語翻訳ファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="f475cf41b7700ea33baa6ae4dbc1042f33b1e212" translate="yes" xml:space="preserve">
          <source>For elements entering or leaving a page (inserted or removed from the DOM), you can make the animations conditional. For example, use &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; with the animation trigger in the HTML template.</source>
          <target state="translated">ページに出入りする要素（DOMに挿入またはDOMから削除）の場合、アニメーションを条件付きにすることができます。たとえば、HTMLテンプレートのアニメーショントリガーで &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="33c47e78379e5f8c12f7ffa6ef6ee132951e2a7d" translate="yes" xml:space="preserve">
          <source>For event binding, define the name of the target event within parenthesis and specify a template statement, in quotes, to the right of the equals. Angular then sets up an event handler for the target event. When the event is raised, the handler executes the template statement.</source>
          <target state="translated">イベントバインディングでは、括弧内にターゲットイベントの名前を定義し、等号の右に引用符でテンプレート文を指定します。そしてAngularはターゲットイベントのイベントハンドラを設定します。イベントが発生すると、ハンドラはテンプレート文を実行します。</target>
        </trans-unit>
        <trans-unit id="d7b7cbd57eaa134c7d6bdd77cb83b62a700f7de3" translate="yes" xml:space="preserve">
          <source>For event handling:</source>
          <target state="translated">イベント処理のために。</target>
        </trans-unit>
        <trans-unit id="e9f25525aed49da6509dcc93159089fed66c4a10" translate="yes" xml:space="preserve">
          <source>For every Angular component you write, you may define not only an HTML template, but also the CSS styles that go with that template, specifying any selectors, rules, and media queries that you need.</source>
          <target state="translated">Angularコンポーネントを書くたびに、HTMLテンプレートだけでなく、そのテンプレートに対応するCSSスタイルを定義し、必要なセレクタやルール、メディアクエリを指定することができます。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="64846a4daf1651f79ed90a6fabbd80e4077eeb81" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&quot;&gt;ARIA&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG&lt;/a&gt; are purely attributes. Neither ARIA nor SVG correspond to element properties and don't set element properties. In these cases, you must use attribute binding because there are no corresponding property targets.</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&quot;&gt;ARIA&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG&lt;/a&gt;は純粋に属性です。ARIAもSVGも要素プロパティに対応しておらず、要素プロパティを設定しません。このような場合、対応するプロパティターゲットがないため、属性バインディングを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d6913e010e0058aed0de321b5d366d10bad9a9e" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/browser&quot;&gt;BrowserBuilder&lt;/a&gt; runs a &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; build for a browser target and &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/karma&quot;&gt;KarmaBuilder&lt;/a&gt; starts the Karma server and runs a webpack build for unit tests.</source>
          <target state="translated">例えば、&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/browser&quot;&gt;BrowserBuilderは&lt;/a&gt;走る&lt;a href=&quot;https://webpack.js.org/&quot;&gt;のWebPACKの&lt;/a&gt;ブラウザターゲットのビルドをして&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/karma&quot;&gt;KarmaBuilderは&lt;/a&gt;カルマサーバを起動し、ユニットテストのためのWebPACKのビルドを実行します。</target>
        </trans-unit>
        <trans-unit id="80491223b62ca89010c42d30ab7078fdf403f816" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;HeroListComponent&lt;/code&gt; has a &lt;code&gt;heroes&lt;/code&gt; property that holds an array of heroes. Its &lt;code&gt;selectHero()&lt;/code&gt; method sets a &lt;code&gt;selectedHero&lt;/code&gt; property when the user clicks to choose a hero from that list. The component acquires the heroes from a service, which is a TypeScript &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties&quot;&gt;parameter property&lt;/a&gt; on the constructor. The service is provided to the component through the dependency injection system.</source>
          <target state="translated">たとえば、 &lt;code&gt;HeroListComponent&lt;/code&gt; には、 &lt;code&gt;heroes&lt;/code&gt; の配列を保持するheroesプロパティがあります。その &lt;code&gt;selectHero()&lt;/code&gt; メソッドは、ユーザーがクリックしてそのリストからヒーローを選択したときに、 &lt;code&gt;selectedHero&lt;/code&gt; プロパティを設定します。コンポーネントは、コンストラクターのTypeScript &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties&quot;&gt;パラメータープロパティ&lt;/a&gt;であるサービスからヒーローを取得します。サービスは、依存性注入システムを介してコンポーネントに提供されます。</target>
        </trans-unit>
        <trans-unit id="215b14c71e0bd92b02bd958d2a0de8932758fe4b" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;HeroListComponent&lt;/code&gt; has a &lt;code&gt;heroes&lt;/code&gt; property that holds an array of heroes. Its &lt;code&gt;selectHero()&lt;/code&gt; method sets a &lt;code&gt;selectedHero&lt;/code&gt; property when the user clicks to choose a hero from that list. The component acquires the heroes from a service, which is a TypeScript &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties&quot;&gt;parameter property&lt;/a&gt; on the constructor. The service is provided to the component through the dependency injection system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97fe9267c0fc6f8e4a6fc2563ffa220e6058388" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;{{today | &lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;}}&lt;/code&gt; uses &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; to display the current date in the format for the locale in &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;{{today | &lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;}}&lt;/code&gt; 使用 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; のにロケールの形式で現在の日付を表示する &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6aa917da6b6eeb1890dd5111f497f98b6683379" translate="yes" xml:space="preserve">
          <source>For example, Angular can inject &lt;code&gt;HeroListComponent&lt;/code&gt; with both the &lt;code&gt;HeroService&lt;/code&gt; provided in &lt;code&gt;HeroComponent&lt;/code&gt; and the &lt;code&gt;UserService&lt;/code&gt; provided in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">例えば、角度は、注入することができる &lt;code&gt;HeroListComponent&lt;/code&gt; を両方と &lt;code&gt;HeroService&lt;/code&gt; に設け &lt;code&gt;HeroComponent&lt;/code&gt; と &lt;code&gt;UserService&lt;/code&gt; の中に設けられ &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="82d24ea45789f45e5fa4e90e30c668abcffbfce7" translate="yes" xml:space="preserve">
          <source>For example, a built-in builder for linting is defined in the package &lt;code&gt;@angular-devkit/build_angular:tslint&lt;/code&gt;, which uses the &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; tool to perform linting, with a configuration specified in a &lt;code&gt;tslint.json&lt;/code&gt; file.</source>
          <target state="translated">たとえば、 &lt;code&gt;@angular-devkit/build_angular:tslint&lt;/code&gt; ビルダーは、パッケージ@ angular-devkit / build_angular：tslintで定義されて &lt;code&gt;tslint.json&lt;/code&gt; ます。これは、tslint.jsonファイルで指定された構成で、&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;ツールを使用してlintingを実行します。</target>
        </trans-unit>
        <trans-unit id="732fad8249ef09aa9ab6fe01f4372cc002fca1c2" translate="yes" xml:space="preserve">
          <source>For example, a transition of &lt;code&gt;open =&amp;gt; *&lt;/code&gt; applies when the element's state changes from open to anything else.</source>
          <target state="translated">たとえば、 &lt;code&gt;open =&amp;gt; *&lt;/code&gt; 遷移は、要素の状態がオープンから他の状態に変化したときに適用されます。</target>
        </trans-unit>
        <trans-unit id="25f66f9c3ad7f2808ac5ea2976e1fc3d55ba5553" translate="yes" xml:space="preserve">
          <source>For example, an editing component that needs a private copy of a caching service should register the service with the component. Then each new instance of the component gets its own cached service instance. The changes that editor makes in its service don't touch the instances elsewhere in the application.</source>
          <target state="translated">例えば、キャッシュサービスのプライベートコピーを必要とする編集コンポーネントは、そのサービスをコンポーネントに登録しなければなりません。そうすると、コンポーネントの各新しいインスタンスは、それ自身のキャッシュされたサービスのインスタンスを取得します。エディタがそのサービスで行う変更は、アプリケーションの他の場所にあるインスタンスには触れません。</target>
        </trans-unit>
        <trans-unit id="739cb885493d2787dba9c93f52ae62f7f74aeac8" translate="yes" xml:space="preserve">
          <source>For example, consider the following component:</source>
          <target state="translated">例えば、次のようなコンポーネントを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="77309a0ead13cf82a0f2d21ff03d6d13581cbf6a" translate="yes" xml:space="preserve">
          <source>For example, consider the following function:</source>
          <target state="translated">例えば、次のような関数を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="dc3716dac11d8351ec07f6539fd77189eac41acb" translate="yes" xml:space="preserve">
          <source>For example, consider the following route configuration where the parent route has two children.</source>
          <target state="translated">たとえば、親ルートに子ルートが 2 つある場合の次のルート構成を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="163884b6df506f156f5b1d477193ccc54d78cbb8" translate="yes" xml:space="preserve">
          <source>For example, consider the following structural directive that takes the result of a template expression as an input.</source>
          <target state="translated">例えば、テンプレート式の結果を入力とする以下の構造ディレクティブを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b4f0c5afbbac2af41a81085ea8ed62d709c36ddc" translate="yes" xml:space="preserve">
          <source>For example, for the default &lt;code&gt;en-US&lt;/code&gt; locale, the code &lt;code&gt;USD&lt;/code&gt; can be represented by the narrow symbol &lt;code&gt;$&lt;/code&gt; or the wide symbol &lt;code&gt;US$&lt;/code&gt;.</source>
          <target state="translated">たとえば、デフォルトの &lt;code&gt;en-US&lt;/code&gt; ロケールの場合、コード &lt;code&gt;USD&lt;/code&gt; は狭い記号 &lt;code&gt;$&lt;/code&gt; または広い記号 &lt;code&gt;US$&lt;/code&gt; で表すことができます。</target>
        </trans-unit>
        <trans-unit id="2fe7e7470440d10c52ecb62d35898eb8bd34b72a" translate="yes" xml:space="preserve">
          <source>For example, for the following &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">たとえば、次の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="c8c075f684e624819ce3836008614ddc832ae598" translate="yes" xml:space="preserve">
          <source>For example, here is a template for the Tutorial's &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">たとえば、以下はチュートリアルの &lt;code&gt;HeroListComponent&lt;/code&gt; のテンプレートです。</target>
        </trans-unit>
        <trans-unit id="f7d374a42c5f5fe49eb168676c53d91a5eaeede6" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;&amp;lt;child-comp&amp;gt;&lt;/code&gt; is used in the template of &lt;code&gt;&amp;lt;app-comp&amp;gt;&lt;/code&gt; (i.e. a &lt;code&gt;&lt;a href=&quot;../viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&amp;lt;app-comp&amp;gt;&lt;/code&gt;), calling &lt;code&gt;&lt;a href=&quot;nggetowningcomponent&quot;&gt;getOwningComponent&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;&amp;lt;child-comp&amp;gt;&lt;/code&gt; would return &lt;code&gt;&amp;lt;app-comp&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">例えば、場合 &lt;code&gt;&amp;lt;child-comp&amp;gt;&lt;/code&gt; のテンプレートで使用されている &lt;code&gt;&amp;lt;app-comp&amp;gt;&lt;/code&gt; （すなわちA &lt;code&gt;&lt;a href=&quot;../viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&amp;lt;app-comp&amp;gt;&lt;/code&gt; ）、呼び出し &lt;code&gt;&lt;a href=&quot;nggetowningcomponent&quot;&gt;getOwningComponent&lt;/a&gt;&lt;/code&gt; の上 &lt;code&gt;&amp;lt;child-comp&amp;gt;&lt;/code&gt; 返す &lt;code&gt;&amp;lt;app-comp&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2e19d8eb336050f68c2bb9a3922d55c9619e32e" translate="yes" xml:space="preserve">
          <source>For example, if a library uses the &lt;code&gt;public_api.ts&lt;/code&gt; file as the library index of the module, the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;code&gt;files&lt;/code&gt; field would be &lt;code&gt;[&quot;public_api.ts&quot;]&lt;/code&gt;. The &lt;code&gt;flatModuleOutFile&lt;/code&gt; option could then be set to (for example) &lt;code&gt;&quot;index.js&quot;&lt;/code&gt;, which produces &lt;code&gt;index.d.ts&lt;/code&gt; and &lt;code&gt;index.metadata.json&lt;/code&gt; files. The &lt;code&gt;module&lt;/code&gt; field of the library's &lt;code&gt;package.json&lt;/code&gt; would be &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; and the &lt;code&gt;typings&lt;/code&gt; field would be &lt;code&gt;&quot;index.d.ts&quot;&lt;/code&gt;.</source>
          <target state="translated">たとえば、ライブラリがモジュールのライブラリインデックスとして &lt;code&gt;public_api.ts&lt;/code&gt; ファイルを使用する場合、 &lt;code&gt;tsconfig.json&lt;/code&gt; &lt;code&gt;files&lt;/code&gt; フィールドは &lt;code&gt;[&quot;public_api.ts&quot;]&lt;/code&gt; になります。 &lt;code&gt;flatModuleOutFile&lt;/code&gt; のオプションは、その後、（例えば）に設定することができ &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; 生産、 &lt;code&gt;index.d.ts&lt;/code&gt; と &lt;code&gt;index.metadata.json&lt;/code&gt; ファイルを。 &lt;code&gt;module&lt;/code&gt; ライブラリのフィールドの &lt;code&gt;package.json&lt;/code&gt; はだろう &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; と &lt;code&gt;typings&lt;/code&gt; フィールドは次のようになり &lt;code&gt;&quot;index.d.ts&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a7d61883c2231b9e61654a0869917789d9575c0" translate="yes" xml:space="preserve">
          <source>For example, if a library uses the &lt;code&gt;public_api.ts&lt;/code&gt; file as the library index of the module, the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;code&gt;files&lt;/code&gt; field would be &lt;code&gt;[&quot;public_api.ts&quot;]&lt;/code&gt;. The &lt;code&gt;flatModuleOutFile&lt;/code&gt; options could then be set to (for example) &lt;code&gt;&quot;index.js&quot;&lt;/code&gt;, which produces &lt;code&gt;index.d.ts&lt;/code&gt; and &lt;code&gt;index.metadata.json&lt;/code&gt; files. The &lt;code&gt;module&lt;/code&gt; field of the library's &lt;code&gt;package.json&lt;/code&gt; would be &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; and the &lt;code&gt;typings&lt;/code&gt; field would be &lt;code&gt;&quot;index.d.ts&quot;&lt;/code&gt;.</source>
          <target state="translated">たとえば、ライブラリがモジュールのライブラリインデックスとして &lt;code&gt;public_api.ts&lt;/code&gt; ファイルを使用する場合、 &lt;code&gt;tsconfig.json&lt;/code&gt; &lt;code&gt;files&lt;/code&gt; フィールドは &lt;code&gt;[&quot;public_api.ts&quot;]&lt;/code&gt; になります。 &lt;code&gt;flatModuleOutFile&lt;/code&gt; のオプションは、その後、（例えば）に設定することができ &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; 生産、 &lt;code&gt;index.d.ts&lt;/code&gt; と &lt;code&gt;index.metadata.json&lt;/code&gt; ファイルを。 &lt;code&gt;module&lt;/code&gt; ライブラリのフィールドの &lt;code&gt;package.json&lt;/code&gt; はだろう &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; と &lt;code&gt;typings&lt;/code&gt; フィールドは次のようになり &lt;code&gt;&quot;index.d.ts&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b81a21f01e25a665c1c9400ac1c5b89dc572aa7b" translate="yes" xml:space="preserve">
          <source>For example, if the French version of your application is served from &lt;a href=&quot;https://example.com/fr/&quot;&gt;https://example.com/fr/&lt;/a&gt;, configure the build for the French version as follows.</source>
          <target state="translated">たとえば、アプリケーションのフランス語バージョンが&lt;a href=&quot;https://example.com/fr/&quot;&gt;https://example.com/fr/&lt;/a&gt;から提供されている場合、フランス語バージョンのビルドを次のように構成します。</target>
        </trans-unit>
        <trans-unit id="a33aa4930d3aff657073486b8fed408d9c29db44" translate="yes" xml:space="preserve">
          <source>For example, if you need the optional &lt;a href=&quot;http://caniuse.com/#feat=web-animation&quot;&gt;web animations polyfill&lt;/a&gt;, you could install it with &lt;code&gt;npm&lt;/code&gt;, using the following command (or the &lt;code&gt;yarn&lt;/code&gt; equivalent):</source>
          <target state="translated">たとえば、オプションの&lt;a href=&quot;http://caniuse.com/#feat=web-animation&quot;&gt;Webアニメーションpolyfill&lt;/a&gt;が必要な場合は、次のコマンド（または同等の &lt;code&gt;yarn&lt;/code&gt; ）を使用して &lt;code&gt;npm&lt;/code&gt; でインストールできます。</target>
        </trans-unit>
        <trans-unit id="7f33129cba0f3241d9a441f968103581355bc6db" translate="yes" xml:space="preserve">
          <source>For example, if you need the optional &lt;a href=&quot;https://caniuse.com/#feat=web-animation&quot;&gt;web animations polyfill&lt;/a&gt;, you could install it with &lt;code&gt;npm&lt;/code&gt;, using the following command (or the &lt;code&gt;yarn&lt;/code&gt; equivalent):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95083c2fd11c6199fc648161739de794a4b15381" translate="yes" xml:space="preserve">
          <source>For example, if you want to display &quot;updated x minutes ago&quot; in English, you may want to display &quot;just now&quot;, &quot;one minute ago&quot;, or &quot;&lt;em&gt;x&lt;/em&gt; minutes ago&quot; (with &lt;em&gt;x&lt;/em&gt; as the actual number). Other languages might express this cardinality differently. The following example shows how to use a &lt;code&gt;plural&lt;/code&gt; clause to express these three options:</source>
          <target state="translated">たとえば、「更新されたx分前」を英語で表示する場合は、「今すぐ」、「1分前」、または「&lt;em&gt;x&lt;/em&gt;分前」（実際の数値は&lt;em&gt;x&lt;/em&gt;）を表示できます。他の言語では、このカーディナリティの表現が異なる場合があります。次の例は、 &lt;code&gt;plural&lt;/code&gt; を使用してこれら3つのオプションを表現する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c22fe616dc591e5618b6ef992b62f4f3ae8f9bf5" translate="yes" xml:space="preserve">
          <source>For example, imagine a hero detail AngularJS component directive with one input and one output:</source>
          <target state="translated">例えば、入力と出力が1つのAngularJSコンポーネントディレクティブを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="dea9c6dce500b3e0d200a2b15748917a4a901388" translate="yes" xml:space="preserve">
          <source>For example, imagine the following scenario:</source>
          <target state="translated">例えば、次のようなシナリオを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="9497ba845db03e6deeadaf9eeb58a4e88d893d5f" translate="yes" xml:space="preserve">
          <source>For example, import Angular's &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator from the &lt;code&gt;@angular/core&lt;/code&gt; library like this.</source>
          <target state="translated">たとえば、次のように &lt;code&gt;@angular/core&lt;/code&gt; ライブラリからAngularの &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータをインポートします。</target>
        </trans-unit>
        <trans-unit id="2c9480456f714aaa0550fa7da62cd14883843469" translate="yes" xml:space="preserve">
          <source>For example, in the following &lt;code&gt;SelfComponent&lt;/code&gt;, notice the injected &lt;code&gt;LeafService&lt;/code&gt; in the constructor.</source>
          <target state="translated">たとえば、次の &lt;code&gt;SelfComponent&lt;/code&gt; では、コンストラクターに挿入された &lt;code&gt;LeafService&lt;/code&gt; に注目してください。</target>
        </trans-unit>
        <trans-unit id="c5696ae2b929700754d98105e027963bf2785ee3" translate="yes" xml:space="preserve">
          <source>For example, in the following code the same custom ID &lt;code&gt;myId&lt;/code&gt; is defined for two different text elements:</source>
          <target state="translated">たとえば、次のコードでは、同じカスタム &lt;code&gt;myId&lt;/code&gt; が2つの異なるテキスト要素に対して定義されています。</target>
        </trans-unit>
        <trans-unit id="8428be5de3c94ec35c0505f75175025745d09917" translate="yes" xml:space="preserve">
          <source>For example, instead of creating a custom element for a new variety of button, you can create a component that uses an attribute selector with a native &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element. This most commonly applies to &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;, but can be used with many other types of element.</source>
          <target state="translated">たとえば、さまざまなボタンのカスタム要素を作成する代わりに、ネイティブの &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素で属性セレクターを使用するコンポーネントを作成できます。これは、最も一般的に適用され &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; が、要素の多くの他のタイプと一緒に使用することができます。</target>
        </trans-unit>
        <trans-unit id="55b0f34dfe729d411d95a75e3e680366ac701172" translate="yes" xml:space="preserve">
          <source>For example, instead of creating a custom element for a new variety of button, you can create a component that uses an attribute selector with a native &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element. This most commonly applies to &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, but can be used with many other types of element.</source>
          <target state="translated">たとえば、新しい種類のボタンのカスタム要素を作成する代わりに、ネイティブの &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素で属性セレクターを使用するコンポーネントを作成できます。これは最も一般的に &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; に適用されますが、他の多くのタイプの要素で使用できます。</target>
        </trans-unit>
        <trans-unit id="fc0eca467862c90d9efa8e862b3587a8516e1e51" translate="yes" xml:space="preserve">
          <source>For example, it is &lt;em&gt;OK&lt;/em&gt; to use a downgraded service in an upgraded component that is only used from a downgraded Angular component provided by the same Angular module as the injectable, but it is &lt;em&gt;not OK&lt;/em&gt; to use it in an AngularJS component that may be used independently of Angular or use it in a downgraded Angular component from a different module.</source>
          <target state="translated">たとえば、インジェクタブルと同じAngularモジュールによって提供されるダウングレードされたAngularコンポーネントからのみ使用されるアップグレードされたコンポーネントでダウングレードされたサービスを使用することは&lt;em&gt;問題&lt;/em&gt;あり&lt;em&gt;ません&lt;/em&gt;が、使用される可能性があるAngularJSコンポーネントでそれを使用すること&lt;em&gt;は問題です&lt;/em&gt; Angularとは独立して、または別のモジュールからダウングレードされたAngularコンポーネントで使用します。</target>
        </trans-unit>
        <trans-unit id="a530aeb597282a353eb4d4d6d60ae2538af8352d" translate="yes" xml:space="preserve">
          <source>For example, server-side applications can't reference browser-only global objects such as &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;navigator&lt;/code&gt;, or &lt;code&gt;location&lt;/code&gt;.</source>
          <target state="translated">たとえば、サーバー側のアプリケーションは、 &lt;code&gt;window&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;navigator&lt;/code&gt; 、または &lt;code&gt;location&lt;/code&gt; などのブラウザのみのグローバルオブジェクトを参照できません。</target>
        </trans-unit>
        <trans-unit id="7a3073a3c95a0c75c3265361f53b8e883aa52c4b" translate="yes" xml:space="preserve">
          <source>For example, server-side applications can't reference browser-only global objects such as &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;navigator&lt;/code&gt;, or &lt;code&gt;location&lt;/code&gt;.</source>
          <target state="translated">たとえば、サーバー側アプリケーションは、 &lt;code&gt;window&lt;/code&gt; 、 &lt;code&gt;document&lt;/code&gt; 、 &lt;code&gt;navigator&lt;/code&gt; 、 &lt;code&gt;location&lt;/code&gt; などのブラウザーのみのグローバルオブジェクトを参照できません。</target>
        </trans-unit>
        <trans-unit id="51c9d0d42d97cb3dc764d10dcc6d02499fe9694c" translate="yes" xml:space="preserve">
          <source>For example, suppose &lt;code&gt;HeroService&lt;/code&gt; must hide &lt;em&gt;secret&lt;/em&gt; heroes from normal users. Only authorized users should see secret heroes.</source>
          <target state="translated">たとえば、 &lt;code&gt;HeroService&lt;/code&gt; が通常のユーザーから&lt;em&gt;秘密の&lt;/em&gt;ヒーローを隠す必要があるとします。許可されたユーザーだけが秘密のヒーローを見るべきです。</target>
        </trans-unit>
        <trans-unit id="6b4cc94083c8a1f80c798bd5b2740e8280186eba" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a library named &lt;code&gt;d3&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;d3&lt;/code&gt; という名前のライブラリがあるとします。</target>
        </trans-unit>
        <trans-unit id="9cf9a7d912b31fc9ca8f7e31178ff59413bd7823" translate="yes" xml:space="preserve">
          <source>For example, suppose you want the code base to have a minimum of 80% code coverage. To enable this, open the &lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt; test platform configuration file, &lt;code&gt;karma.conf.js&lt;/code&gt;, and add the following in the &lt;code&gt;coverageIstanbulReporter:&lt;/code&gt; key.</source>
          <target state="translated">たとえば、コードベースのコードカバレッジを80％以上にする必要があるとします。これを有効にするには、&lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;テストプラットフォーム構成ファイル &lt;code&gt;karma.conf.js&lt;/code&gt; を開き、 &lt;code&gt;coverageIstanbulReporter:&lt;/code&gt; キーに以下を追加します。</target>
        </trans-unit>
        <trans-unit id="50af682ddaaa55b01d052b01aa7cf905686b0845" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to update the Angular Material library.</source>
          <target state="translated">例えば、Angular Materialライブラリをアップデートしたいとします。</target>
        </trans-unit>
        <trans-unit id="8c1ddb2e15f1cddcbdbcc32d6cc7eb48668f91d9" translate="yes" xml:space="preserve">
          <source>For example, the &quot;serve&quot; target for a newly generated app has a predefined alternate configuration named &quot;production&quot;.</source>
          <target state="translated">例えば、新しく生成されたアプリの &quot;サーブ &quot;ターゲットには、&quot;production &quot;という名前の事前定義された代替構成があります。</target>
        </trans-unit>
        <trans-unit id="cc73b8c8adf28b76d8cfa49ae3ca83692737c35f" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;https://material.angular.io/guide/schematics&quot;&gt;&lt;code&gt;@angular/material&lt;/code&gt;&lt;/a&gt; schematic tells the &lt;code&gt;add&lt;/code&gt; command to install and set up Angular Material and theming, and register new starter components that can be created with &lt;code&gt;ng generate&lt;/code&gt;. You can look at this one as an example and model for your own add schematic.</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://material.angular.io/guide/schematics&quot;&gt; &lt;code&gt;@angular/material&lt;/code&gt; &lt;/a&gt;回路図は、Angular Materialとテーマをインストールおよび設定し、 &lt;code&gt;ng generate&lt;/code&gt; で作成できる新しいスターターコンポーネントを登録するように &lt;code&gt;add&lt;/code&gt; コマンドに指示します。あなたはこれをあなた自身の追加回路図の例とモデルとして見ることができます。</target>
        </trans-unit>
        <trans-unit id="0d9d77074ce47a9713707b5be8d6e8b7b21a5a67" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; implementation uses type-narrowing to ensure that the template is only instantiated if the input expression to &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is truthy. To provide the specific type requirement, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive defines a &lt;a href=&quot;../api/common/ngif#static-properties&quot;&gt;static property &lt;code&gt;ngTemplateGuard_ngIf: 'binding'&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;binding&lt;/code&gt; value is a special case for a common kind of type-narrowing where the input expression is evaluated in order to satisfy the type requirement.</source>
          <target state="translated">たとえば、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 実装はタイプナローイングを使用して、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; への入力式がtrueの場合にのみテンプレートがインスタンス化されるようにします。特定のタイプ要件を提供するために、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ディレクティブは&lt;a href=&quot;../api/common/ngif#static-properties&quot;&gt;静的プロパティ &lt;code&gt;ngTemplateGuard_ngIf: 'binding'&lt;/code&gt; &lt;/a&gt;定義します。 &lt;code&gt;binding&lt;/code&gt; 値は、入力された発現はタイプ要件を満たすために評価される型狭窄の一般的な種類の特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="393506af74b2bea04fe484736e479a8151fdccd0" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;LibCardComponent&lt;/code&gt; now queries &lt;code&gt;LibHeaderToken&lt;/code&gt; rather than &lt;code&gt;LibHeaderComponent&lt;/code&gt;. The following example shows how the pattern allows &lt;code&gt;LibCardComponent&lt;/code&gt; to communicate with the &lt;code&gt;LibHeaderComponent&lt;/code&gt; without actually referring to &lt;code&gt;LibHeaderComponent&lt;/code&gt;.</source>
          <target state="translated">例えば、 &lt;code&gt;LibCardComponent&lt;/code&gt; は今照会 &lt;code&gt;LibHeaderToken&lt;/code&gt; をするのではなく &lt;code&gt;LibHeaderComponent&lt;/code&gt; 。次の例は、パターンによって、実際に &lt;code&gt;LibHeaderComponent&lt;/code&gt; を参照せずに &lt;code&gt;LibHeaderComponent&lt;/code&gt; が &lt;code&gt;LibCardComponent&lt;/code&gt; と通信できるようにする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="67592c68e2ac00ea2d43029031e1ca81f42456e3" translate="yes" xml:space="preserve">
          <source>For example, the Architect builder invoked by the &lt;code&gt;ng build&lt;/code&gt; command to compile a project uses a particular build tool, and has a default configuration whose values can be overridden on the command line. The &lt;code&gt;build&lt;/code&gt; target also defines an alternate configuration for a &quot;production&quot; build, that can be invoked with the &lt;code&gt;--prod&lt;/code&gt; flag on the &lt;code&gt;build&lt;/code&gt; command.</source>
          <target state="translated">たとえば、プロジェクトをコンパイルする &lt;code&gt;ng build&lt;/code&gt; にng buildコマンドによって呼び出されたArchitectビルダーは、特定のビルドツールを使用し、コマンドラインで値をオーバーライドできるデフォルトの構成を持っています。 &lt;code&gt;build&lt;/code&gt; ターゲットも用いて呼び出すことができる「生産」のビルドのための代替構成を定義 &lt;code&gt;--prod&lt;/code&gt; にフラグ &lt;code&gt;build&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="456036b268aa96f0d5baa4b16b7b44a79b22f13f" translate="yes" xml:space="preserve">
          <source>For example, the collector can evaluate the expression &lt;code&gt;1 + 2 + 3 + 4&lt;/code&gt; and replace it with the result, &lt;code&gt;10&lt;/code&gt;. This process is called &lt;em&gt;folding&lt;/em&gt;. An expression that can be reduced in this manner is &lt;em&gt;foldable&lt;/em&gt;.</source>
          <target state="translated">たとえば、コレクターは式 &lt;code&gt;1 + 2 + 3 + 4&lt;/code&gt; を評価し、それを結果 &lt;code&gt;10&lt;/code&gt; に置き換えることができます。このプロセスは&lt;em&gt;フォールディング&lt;/em&gt;と呼ばれます。この方法で削減できる表現は&lt;em&gt;折りたたみ式&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="2f7aeac99d50d45ab995bb01629c8d23060ea8aa" translate="yes" xml:space="preserve">
          <source>For example, the component might render first on the server as part of a strategy to make the application launch faster on poorly connected devices. The server-side renderer might not support the full HTML element API. If it doesn't support &lt;code&gt;querySelector&lt;/code&gt;, the previous test could fail.</source>
          <target state="translated">たとえば、コンポーネントは、適切に接続されていないデバイスでアプリケーションをより速く起動するための戦略の一環として、最初にサーバーでレンダリングする場合があります。サーバー側レンダラーは、完全なHTML要素APIをサポートしていない場合があります。 &lt;code&gt;querySelector&lt;/code&gt; をサポートしていない場合、前のテストは失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="bb48f3cec557aac01648a938091dba4a6beb45dc" translate="yes" xml:space="preserve">
          <source>For example, the default asset paths can be represented in more detail using the following objects.</source>
          <target state="translated">例えば、デフォルトのアセットパスは、以下のオブジェクトを使用してより詳細に表現することができます。</target>
        </trans-unit>
        <trans-unit id="8255172101d39bb3c820960546e4442edf1ab2e9" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag displays a simple English language greeting, &quot;Hello i18n!&quot;</source>
          <target state="translated">たとえば、次の &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; タグは、簡単な英語の挨拶「Helloi18n！」を表示します。</target>
        </trans-unit>
        <trans-unit id="ef9fd37dd42bb3ceaffed96656df1ed72a8779fa" translate="yes" xml:space="preserve">
          <source>For example, the following CLI command generates a &lt;code&gt;BannerComponent&lt;/code&gt; in the &lt;code&gt;app/banner&lt;/code&gt; folder (with inline template and styles):</source>
          <target state="translated">たとえば、次のCLIコマンドは、 &lt;code&gt;app/banner&lt;/code&gt; フォルダーに（インラインテンプレートとスタイルを使用して） &lt;code&gt;BannerComponent&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="2dfbc385f5e6ab8f42e3708b03af4cef9163f33a" translate="yes" xml:space="preserve">
          <source>For example, the following code declares the target of &lt;code&gt;childItem&lt;/code&gt; in its component class, in this case &lt;code&gt;ItemDetailComponent&lt;/code&gt;.</source>
          <target state="translated">たとえば、次のコードは、コンポーネントクラス（この場合は &lt;code&gt;ItemDetailComponent&lt;/code&gt; )で &lt;code&gt;childItem&lt;/code&gt; のターゲットを宣言します。</target>
        </trans-unit>
        <trans-unit id="8e517bddb93ce781c7476fd73f84439d73846cfb" translate="yes" xml:space="preserve">
          <source>For example, the following command automatically deploys a project to Firebase.</source>
          <target state="translated">例えば、以下のコマンドはプロジェクトを自動的にFirebaseにデプロイします。</target>
        </trans-unit>
        <trans-unit id="d8927bb5a286f843d8058d130909cac403f48606" translate="yes" xml:space="preserve">
          <source>For example, the following command generates an NgModule that can use routing.</source>
          <target state="translated">例えば、以下のコマンドはルーティングを使用できるNgModuleを生成します。</target>
        </trans-unit>
        <trans-unit id="fe01aacfb5897063089e409dc67dddc872264473" translate="yes" xml:space="preserve">
          <source>For example, the following excerpt of an &lt;code&gt;angular.json&lt;/code&gt; file sets the source locale to &lt;code&gt;en-US&lt;/code&gt; and provides the path to the &lt;code&gt;fr&lt;/code&gt; (French) locale translation file:</source>
          <target state="translated">たとえば、 &lt;code&gt;angular.json&lt;/code&gt; ファイルの次の抜粋は、ソースロケールを &lt;code&gt;en-US&lt;/code&gt; に設定し、 &lt;code&gt;fr&lt;/code&gt; （フランス語）ロケール変換ファイルへのパスを提供します。</target>
        </trans-unit>
        <trans-unit id="50a00159e09a932ac5818449fcafa887279ed31b" translate="yes" xml:space="preserve">
          <source>For example, the service worker may not be able to retrieve a required resource, neither from the cache nor from the server. This could happen if a new version is deployed to the server and the service worker cache has been partially cleaned by the browser, removing some files of a previous app version but not all.</source>
          <target state="translated">たとえば、サービス ワーカーは、キャッシュからもサーバーからも、必要なリソースを取得できない場合があります。これは、新しいバージョンがサーバーにデプロイされ、サービスワーカーのキャッシュがブラウザによって部分的にクリーンアップされ、以前のアプリのバージョンの一部のファイルは削除されたが、すべてのファイルは削除されなかった場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="da0b61ba544cc7d6caa5e9d00194681f6e850326" translate="yes" xml:space="preserve">
          <source>For example, the string &quot;1s 100ms ease-out&quot; specifies a duration of 1000 milliseconds, and delay of 100 ms, and the &quot;ease-out&quot; easing style, which decelerates near the end of the duration.</source>
          <target state="translated">例えば、文字列 &quot;1s 100ms ease-out &quot;は、持続時間1000ミリ秒、遅延時間100ミリ秒を指定し、持続時間の終わり付近で減速する &quot;ease-out &quot;のイージングスタイルを指定しています。</target>
        </trans-unit>
        <trans-unit id="a9d7730eccbd0e92f23996837e3a8f11bef70174" translate="yes" xml:space="preserve">
          <source>For example, the string &lt;code&gt;3d12h&lt;/code&gt; will cache content for up to three and a half days.</source>
          <target state="translated">たとえば、文字列 &lt;code&gt;3d12h&lt;/code&gt; はコンテンツを最大3日半キャッシュします。</target>
        </trans-unit>
        <trans-unit id="e4708f232b7a2d860945bf98f596301e9e4e5e00" translate="yes" xml:space="preserve">
          <source>For example, the string &lt;code&gt;5s30u&lt;/code&gt; will translate to five seconds and 30 milliseconds of network timeout.</source>
          <target state="translated">たとえば、文字列 &lt;code&gt;5s30u&lt;/code&gt; は5秒30ミリ秒のネットワークタイムアウトに変換されます。</target>
        </trans-unit>
        <trans-unit id="202943b8fc3e80fba0634397ef0b316f14215b59" translate="yes" xml:space="preserve">
          <source>For example, to create a French translation file, follow these steps:</source>
          <target state="translated">例えば、フランス語の翻訳ファイルを作成するには、以下の手順に従います。</target>
        </trans-unit>
        <trans-unit id="8d6864b09909a8d7bd1794440def9f0c31acd333" translate="yes" xml:space="preserve">
          <source>For example, to create an observable equivalent to the &lt;code&gt;of(1, 2, 3)&lt;/code&gt; above, you could do something like this:</source>
          <target state="translated">たとえば、上記の &lt;code&gt;of(1, 2, 3)&lt;/code&gt; と同等のオブザーバブルを作成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7e21a6e50d611a4b649e738293bcbf7e12410528" translate="yes" xml:space="preserve">
          <source>For example, to get a &lt;code&gt;name&lt;/code&gt; control nested within a &lt;code&gt;person&lt;/code&gt; sub-group:</source>
          <target state="translated">たとえば、 &lt;code&gt;person&lt;/code&gt; サブグループ内にネストされた &lt;code&gt;name&lt;/code&gt; コントロールを取得するには：</target>
        </trans-unit>
        <trans-unit id="2795d73c033ee5a4023bcbd6348118e04af1633f" translate="yes" xml:space="preserve">
          <source>For example, to use the &lt;a href=&quot;https://getbootstrap.com/docs/4.0/getting-started/introduction/&quot;&gt;Bootstrap 4&lt;/a&gt; library, first install the library and its dependencies using the npm package manager:</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://getbootstrap.com/docs/4.0/getting-started/introduction/&quot;&gt;Bootstrap 4&lt;/a&gt;ライブラリを使用するには、まずnpmパッケージマネージャを使用してライブラリとその依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="006077040eb38468b8a356d61c048734a3075b00" translate="yes" xml:space="preserve">
          <source>For example, when binding a URL in an &lt;code&gt;&amp;lt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; [href]=&quot;someValue&quot;&amp;gt;&lt;/code&gt; hyperlink, &lt;code&gt;someValue&lt;/code&gt; will be sanitized so that an attacker cannot inject e.g. a &lt;code&gt;javascript:&lt;/code&gt; URL that would execute code on the website.</source>
          <target state="translated">でURLバインドするときたとえば、 &lt;code&gt;&amp;lt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; [href]=&quot;someValue&quot;&amp;gt;&lt;/code&gt; ハイパーリンクを、 &lt;code&gt;someValue&lt;/code&gt; のは、攻撃者が注入例えばAことができないようにサニタイズされる &lt;code&gt;javascript:&lt;/code&gt; ウェブサイト上でコードを実行するURL。</target>
        </trans-unit>
        <trans-unit id="07794534a0ed0e77b8d075cb97347b76bcb7aa24" translate="yes" xml:space="preserve">
          <source>For example, when binding a URL in an &lt;code&gt;&amp;lt;a [href]=&quot;someValue&quot;&amp;gt;&lt;/code&gt; hyperlink, &lt;code&gt;someValue&lt;/code&gt; will be sanitized so that an attacker cannot inject e.g. a &lt;code&gt;javascript:&lt;/code&gt; URL that would execute code on the website.</source>
          <target state="translated">たとえば、 &lt;code&gt;&amp;lt;a [href]=&quot;someValue&quot;&amp;gt;&lt;/code&gt; ハイパーリンクでURLをバインドする場合、 &lt;code&gt;someValue&lt;/code&gt; はサニタイズされるため、攻撃者はWebサイトでコードを実行する &lt;code&gt;javascript:&lt;/code&gt; URLなどを挿入できません。</target>
        </trans-unit>
        <trans-unit id="b388ee63c404c11c431ffc8a9f8669aaee012a90" translate="yes" xml:space="preserve">
          <source>For example, when bootstrapping an application, you can register many initializers using the same token.</source>
          <target state="translated">例えば、アプリケーションをブートストラップする際に、同じトークンを使って多くのイニシャライザを登録することができます。</target>
        </trans-unit>
        <trans-unit id="3baf02df32b359fa08da6b749c56ce279b9c6172" translate="yes" xml:space="preserve">
          <source>For example, you can add the meaning that this &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is a site header that needs to be translated the same way not only when used as a header, but also when referred to from another section of text:</source>
          <target state="translated">たとえば、この &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; タグは、ヘッダーとして使用する場合だけでなく、テキストの別のセクションから参照する場合にも同じ方法で翻訳する必要があるサイトヘッダーであるという意味を追加できます。</target>
        </trans-unit>
        <trans-unit id="c63512e47f4e0eb59f4eb999a84ea7e0803892b1" translate="yes" xml:space="preserve">
          <source>For example, you can create a new &lt;code&gt;HeroListComponent&lt;/code&gt; with a mock service that you can manipulate under test.</source>
          <target state="translated">たとえば、テスト下で操作できるモックサービスを使用して新しい &lt;code&gt;HeroListComponent&lt;/code&gt; を作成できます。</target>
        </trans-unit>
        <trans-unit id="8ddf8e31fd2cd24dbe4fa042da0cd05fcfd17053" translate="yes" xml:space="preserve">
          <source>For example, you can use the following built-in tokens as hooks into the framework&amp;rsquo;s bootstrapping and initialization process. A provider object can associate any of these injection tokens with one or more callback functions that take app-specific initialization actions.</source>
          <target state="translated">たとえば、次の組み込みトークンをフレームワークのブートストラップおよび初期化プロセスへのフックとして使用できます。プロバイダーオブジェクトは、これらの注入トークンのいずれかを、アプリ固有の初期化アクションを実行する1つ以上のコールバック関数に関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="227e297b37600eeafa53dd30d8eb145e25eb475b" translate="yes" xml:space="preserve">
          <source>For example, you cannot write something like this:</source>
          <target state="translated">例えば、こんなことは書けません。</target>
        </trans-unit>
        <trans-unit id="0404572146cc3cab885417686884732f1c08e1eb" translate="yes" xml:space="preserve">
          <source>For example, you could change the previous custom pipe example to use two-way data binding with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; to input the amount and boost factor, as shown in the following code example.</source>
          <target state="translated">たとえば、次のコード例に示すように、前のカスタムパイプの例を変更して、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; で双方向のデータバインディングを使用して量とブースト係数を入力できます。</target>
        </trans-unit>
        <trans-unit id="6530568924d585f2b40d86e5a6d6c3b09418ac8d" translate="yes" xml:space="preserve">
          <source>For example, you could have an expression that invoked a property or method that had side effects. The expression could call something like &lt;code&gt;getFoo()&lt;/code&gt; where only you know what &lt;code&gt;getFoo()&lt;/code&gt; does. If &lt;code&gt;getFoo()&lt;/code&gt; changes something and you happen to be binding to that something, Angular may or may not display the changed value. Angular may detect the change and throw a warning error. As a best practice, stick to properties and to methods that return values and avoid side effects.</source>
          <target state="translated">たとえば、副作用のあるプロパティまたはメソッドを呼び出す式があるとします。式は何か呼び出すことができます &lt;code&gt;getFoo()&lt;/code&gt; だけが知っている &lt;code&gt;getFoo()&lt;/code&gt; ありませんが。場合 &lt;code&gt;getFoo()&lt;/code&gt; 何かを変更し、あなたはその何かに結合することが起こる、角度を変えたり値が表示されない場合があります。Angularは変更を検出して警告エラーをスローするかもしれません。ベストプラクティスとして、プロパティと、値を返し、副作用を回避するメソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="a1343721229e7e188c70b76a4f95e58cac86554e" translate="yes" xml:space="preserve">
          <source>For example, you may have defined a class and used it as an injection token in a providers array but neglected to export that class.</source>
          <target state="translated">たとえば、クラスを定義して、それをプロバイダの配列でインジェクショントークンとして使用していたのに、そのクラスをエクスポートするのを怠っていたとします。</target>
        </trans-unit>
        <trans-unit id="a95056eee3d11f52730201526a72543e3338d239" translate="yes" xml:space="preserve">
          <source>For example, you may have set a providers &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; property to a locally defined function that you neglected to export.</source>
          <target state="translated">たとえば、プロバイダーの &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロパティを、エクスポートを無視したローカルで定義された関数に設定している場合があります。</target>
        </trans-unit>
        <trans-unit id="1a48ccdf1e4d465cd7b12d94a032be82a62ec1e1" translate="yes" xml:space="preserve">
          <source>For example, you may have set a providers &lt;code&gt;useFactory&lt;/code&gt; property to a locally defined function that you neglected to export.</source>
          <target state="translated">たとえば、プロバイダーの &lt;code&gt;useFactory&lt;/code&gt; プロパティを、エクスポートを怠ったローカルで定義された関数に設定した可能性があります。</target>
        </trans-unit>
        <trans-unit id="c3c0aadf2ed6d001641bc13306f6ac7b0b287585" translate="yes" xml:space="preserve">
          <source>For example, you might decide to cache certain requests and responses to improve performance. You can delegate caching to an interceptor without disturbing your existing data services.</source>
          <target state="translated">例えば、パフォーマンスを向上させるために特定のリクエストとレスポンスをキャッシュすることにしたとします。既存のデータサービスに影響を与えることなく、インターセプターにキャッシングを委任することができます。</target>
        </trans-unit>
        <trans-unit id="e751c1896b9ea59e8e0965c8d8ab0167c1bd2f31" translate="yes" xml:space="preserve">
          <source>For example, you might have an Angular service called &lt;code&gt;Heroes&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;Heroes&lt;/code&gt; というAngularサービスがあるとします。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="24fca8b61903d711384e8ca51c4fd0aeb8d16945" translate="yes" xml:space="preserve">
          <source>For filtering flying heroes, consider an &lt;em&gt;impure pipe&lt;/em&gt;.</source>
          <target state="translated">飛んでいるヒーローをフィルタリングするには、&lt;em&gt;不純なパイプを&lt;/em&gt;検討してください。</target>
        </trans-unit>
        <trans-unit id="a56d6b42d3843beb14525eb1fdcd50e555380dbb" translate="yes" xml:space="preserve">
          <source>For full details of these and other tools, see the &lt;a href=&quot;https://material.angular.io/cdk/a11y/overview&quot;&gt;Angular CDK accessibility overview&lt;/a&gt;.</source>
          <target state="translated">これらのツールやその他のツールの詳細については、&lt;a href=&quot;https://material.angular.io/cdk/a11y/overview&quot;&gt;Angular CDKのユーザー補助の概要を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="7c3da04950adb31c0e9528561719f0563708a66f" translate="yes" xml:space="preserve">
          <source>For further details, see &lt;a href=&quot;../guide/workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/workspace-config&quot;&gt;ワークスペースの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3306695213c81bbc3d56d315e3e1aeaaf7dc34ef" translate="yes" xml:space="preserve">
          <source>For general guidance on debugging and a list of minor changes associated with Ivy, see the &lt;a href=&quot;ivy-compatibility&quot;&gt;Ivy compatibility guide&lt;/a&gt;.</source>
          <target state="translated">デバッグに関する一般的なガイダンスおよびIvyに関連するマイナーな変更のリストについては、&lt;a href=&quot;ivy-compatibility&quot;&gt;Ivy互換性ガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b36de5c112631348d0b348bcbb31a5891c39f0e" translate="yes" xml:space="preserve">
          <source>For help with individual commands, use the &lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt; option with the command.</source>
          <target state="translated">個々のコマンドのヘルプを表示するには、コマンドで &lt;code&gt;--help&lt;/code&gt; または &lt;code&gt;-h&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="bdf3dbf173e582814eee93b694e96476b3193d6c" translate="yes" xml:space="preserve">
          <source>For help with opting out of Ivy, see the instructions &lt;a href=&quot;ivy#opting-out-of-angular-ivy&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Ivyをオプトアウトする方法については、こちらの手順を&lt;a href=&quot;ivy#opting-out-of-angular-ivy&quot;&gt;ご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86f2ce0f795377b7a0b29bb81dd3283d86dbb647" translate="yes" xml:space="preserve">
          <source>For hypothetical examples such as illustrations of configuration options in a JSON file, you should still use The &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tag with the &lt;code&gt;header&lt;/code&gt; attribute to identify the context.</source>
          <target state="translated">JSONファイルの構成オプションの図などの架空の例については、 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; タグを &lt;code&gt;header&lt;/code&gt; 属性と共に使用して、コンテキストを識別してください。</target>
        </trans-unit>
        <trans-unit id="86123da84b4f870d2ef75b0f9ae9cd5b807e05bb" translate="yes" xml:space="preserve">
          <source>For information about Angular CDK and Angular Material deprecations, see the &lt;a href=&quot;https://github.com/angular/components/blob/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;.</source>
          <target state="translated">AngularCDKおよびAngularMaterialの非推奨については、変更&lt;a href=&quot;https://github.com/angular/components/blob/master/CHANGELOG.md&quot;&gt;ログを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3bced609aa41350a65338218df9289f52995c62" translate="yes" xml:space="preserve">
          <source>For information about Angular's deprecation and removal practices, see &lt;a href=&quot;releases#deprecation-practices&quot;&gt;Angular Release Practices&lt;/a&gt;.</source>
          <target state="translated">Angularの非推奨と削除の方法については、&lt;a href=&quot;releases#deprecation-practices&quot;&gt;Angularのリリース&lt;/a&gt;方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="701f4b7981f107d65ba50aa05880028cb7034894" translate="yes" xml:space="preserve">
          <source>For information about CSRF at the Open Web Application Security Project (OWASP), see &lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29&quot;&gt;Cross-Site Request Forgery (CSRF)&lt;/a&gt; and &lt;a href=&quot;https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet&quot;&gt;Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet&lt;/a&gt;. The Stanford University paper &lt;a href=&quot;https://seclab.stanford.edu/websec/csrf/csrf.pdf&quot;&gt;Robust Defenses for Cross-Site Request Forgery&lt;/a&gt; is a rich source of detail.</source>
          <target state="translated">Open Web Application Security Project（OWASP）での&lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29&quot;&gt;CSRF&lt;/a&gt;については、クロスサイトリクエストフォージェリ（CSRF）および&lt;a href=&quot;https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet&quot;&gt;クロスサイトリクエストフォージェリ（CSRF）防止に関するチートシートを参照してください&lt;/a&gt;。スタンフォード大学の論文「&lt;a href=&quot;https://seclab.stanford.edu/websec/csrf/csrf.pdf&quot;&gt;Cross-Site Request ForgeryのRobust Defenses」&lt;/a&gt;は、豊富な詳細情報源です。</target>
        </trans-unit>
        <trans-unit id="a2cf14543e26d1b0e1e0f2335126cea8a8caa66e" translate="yes" xml:space="preserve">
          <source>For information about how the Angular CLI handles packages see the following guides:</source>
          <target state="translated">Angular CLIがどのようにパッケージを扱うかについては、以下のガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="0f291831cc0ce65674be94754322d757e2b548ab" translate="yes" xml:space="preserve">
          <source>For information about our versioning policy and practices&amp;mdash;including support and deprecation practices, as well as the release schedule&amp;mdash;see &lt;a href=&quot;releases&quot;&gt;Angular versioning and releases&lt;/a&gt;.</source>
          <target state="translated">サポートと非推奨のプラクティス、リリーススケジュールなど、バージョニングのポリシーとプラクティスについては、&lt;a href=&quot;releases&quot;&gt;Angularのバージョニングとリリースを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="5220e8f6a1f03b83915e5da98e7255405350b960" translate="yes" xml:space="preserve">
          <source>For information about specific version requirements, see the &lt;code&gt;engines&lt;/code&gt; key in the &lt;a href=&quot;https://unpkg.com/@angular/cli/package.json&quot;&gt;package.json&lt;/a&gt; file.</source>
          <target state="translated">特定のバージョン要件については、&lt;a href=&quot;https://unpkg.com/@angular/cli/package.json&quot;&gt;package.json&lt;/a&gt;ファイルの &lt;code&gt;engines&lt;/code&gt; キーを参照してください。</target>
        </trans-unit>
        <trans-unit id="eae0e5c59a3541a14b503b2a4d5cecd660bf5771" translate="yes" xml:space="preserve">
          <source>For instance &lt;code&gt;['/team', teamId, 'user', userName, {details: true}]&lt;/code&gt; means that we want to generate a link to &lt;code&gt;/team/11/user/bob;details=true&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;['/team', teamId, 'user', userName, {details: true}]&lt;/code&gt; は、 &lt;code&gt;/team/11/user/bob;details=true&lt;/code&gt; へのリンクを生成することを意味します。</target>
        </trans-unit>
        <trans-unit id="cc3c5ecad11774911020f831e44bc9e139c75862" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;&lt;a href=&quot;forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt; is used when the &lt;code&gt;token&lt;/code&gt; which we need to refer to for the purposes of DI is declared, but not yet defined. It is also used when the &lt;code&gt;token&lt;/code&gt; which we use when creating a query is not yet defined.</source>
          <target state="translated">たとえば、DIの目的で参照する必要がある &lt;code&gt;token&lt;/code&gt; が宣言されているが、まだ定義されていない場合、 &lt;code&gt;&lt;a href=&quot;forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt; が使用されます。また、クエリの作成時に使用する &lt;code&gt;token&lt;/code&gt; がまだ定義されていない場合にも使用されます。</target>
        </trans-unit>
        <trans-unit id="7e37c9ce1affc33e83f25b7d7154d81e800947bf" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; produces URLs like &lt;code&gt;&lt;a href=&quot;http://example.com#/foo&quot;&gt;http://example.com#/foo&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; produces &lt;code&gt;&lt;a href=&quot;http://example.com/foo&quot;&gt;http://example.com/foo&lt;/a&gt;&lt;/code&gt; as an equivalent URL.</source>
          <target state="translated">例えば、 &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; はのようなURL生成し &lt;code&gt;&lt;a href=&quot;http://example.com#/foo&quot;&gt;http://example.com#/foo&lt;/a&gt;&lt;/code&gt; 、そして &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; は生産 &lt;code&gt;&lt;a href=&quot;http://example.com/foo&quot;&gt;http://example.com/foo&lt;/a&gt;&lt;/code&gt; を同等のURLとして。</target>
        </trans-unit>
        <trans-unit id="6055b44a38f88f4c957889644057f9b1f221cb1f" translate="yes" xml:space="preserve">
          <source>For instance, if the current url is &lt;code&gt;/user/(box//aux:team)&lt;/code&gt;.</source>
          <target state="translated">たとえば、現在のURLが &lt;code&gt;/user/(box//aux:team)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f3d492765d65a0f3c73975be81507c9a1cba6c5" translate="yes" xml:space="preserve">
          <source>For instance, if you call &lt;code&gt;location.go('/foo')&lt;/code&gt;, the browser's URL will become &lt;code&gt;example.com#/foo&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;location.go('/foo')&lt;/code&gt; を呼び出すと、ブラウザのURLは &lt;code&gt;example.com#/foo&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="27aaad8b83676d93a0529ecbf18c1e23d1f6429a" translate="yes" xml:space="preserve">
          <source>For instance, if you provide an &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;'/my/app'&lt;/code&gt; and call &lt;code&gt;location.go('/foo')&lt;/code&gt;, the browser's URL will become &lt;code&gt;example.com/my/app/foo&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;'/my/app'&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; を指定して &lt;code&gt;location.go('/foo')&lt;/code&gt; を呼び出すと、ブラウザのURLは &lt;code&gt;example.com/my/app/foo&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="6c574522b5d0faecf6db7c658c386f4d734f0644" translate="yes" xml:space="preserve">
          <source>For instance, if you provide an &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;'/my/app/'&lt;/code&gt; and call &lt;code&gt;location.go('/foo')&lt;/code&gt;, the browser's URL will become &lt;code&gt;example.com/my/app/foo&lt;/code&gt;. To ensure all relative URIs resolve correctly, the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; should end with a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;'/my/app/'&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; を指定し、 &lt;code&gt;location.go('/foo')&lt;/code&gt; を呼び出すと、ブラウザーのURLは &lt;code&gt;example.com/my/app/foo&lt;/code&gt; になります。すべての相対URIが正しく、解決を確認するために、 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; および/または &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; はで終わる必要があります &lt;code&gt;/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dae1fb6e3f2f55f859e189cf275d906d8b055a79" translate="yes" xml:space="preserve">
          <source>For instance, in the phone detail component spec, you can use ES2015 features like arrow functions and block-scoped variables and benefit from the type definitions of the AngularJS services you're consuming:</source>
          <target state="translated">例えば、電話の詳細コンポーネントの仕様では、矢印関数やブロックスコープ変数のようなES2015の機能を使用することができ、消費するAngularJSサービスの型定義の恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="ab978344d1e1b6148ef12f8d47b1a3c34578d91b" translate="yes" xml:space="preserve">
          <source>For instance, suppose you have an observable that makes an API request and maps to the response from the server. If the server returns an error or the value doesn&amp;rsquo;t exist, an error is produced. If you catch this error and supply a default value, your stream continues to process values rather than erroring out.</source>
          <target state="translated">たとえば、APIリクエストを作成し、サーバーからのレスポンスにマッピングするオブザーバブルがあるとします。サーバーがエラーを返すか、値が存在しない場合、エラーが生成されます。このエラーをキャッチしてデフォルト値を指定すると、ストリームはエラーを出力するのではなく、値を処理し続けます。</target>
        </trans-unit>
        <trans-unit id="38b9a9017b740354544e1593b7fba7b1889452c5" translate="yes" xml:space="preserve">
          <source>For instance, to install typings for &lt;code&gt;jasmine&lt;/code&gt; you run &lt;code&gt;npm install @types/jasmine --save-dev&lt;/code&gt;.</source>
          <target state="translated">例えば、のためにタイピングをインストールするには、 &lt;code&gt;jasmine&lt;/code&gt; 、あなたは実行 &lt;code&gt;npm install @types/jasmine --save-dev&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68e2d69ba0b28527a3d11e0255455974088f0bdc" translate="yes" xml:space="preserve">
          <source>For language plural rules, see &lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&quot;&gt;CLDR plural rules&lt;/a&gt;.</source>
          <target state="translated">言語の複数形のルールについては、&lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&quot;&gt;CLDRの複数&lt;/a&gt;形のルールを参照してください。</target>
        </trans-unit>
        <trans-unit id="74e6e3926be72c8a1cba09a5bb08fac4a0c6caf0" translate="yes" xml:space="preserve">
          <source>For language plural rules, see &lt;a href=&quot;https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&quot;&gt;CLDR plural rules&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3142ac7682c447087c7bb930dcaf0d9a36edf434" translate="yes" xml:space="preserve">
          <source>For library projects generated with the CLI, the &lt;code&gt;prod&lt;/code&gt; configuration default is &lt;code&gt;false&lt;/code&gt; in version 9.</source>
          <target state="translated">CLIで生成されたライブラリプロジェクトの場合、バージョン9では &lt;code&gt;prod&lt;/code&gt; 構成のデフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b6ca794e39c4d5d82471dd57b8aec2edb90eec07" translate="yes" xml:space="preserve">
          <source>For library projects generated with the CLI, the dev configuration default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">CLIで生成されたライブラリプロジェクトの場合、開発構成のデフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="53450900d28528df93272d0c91263f304542a049" translate="yes" xml:space="preserve">
          <source>For loading the details of a single phone into the phone detail component.</source>
          <target state="translated">1台の電話機の詳細を電話機詳細コンポーネントにロードするためのものです。</target>
        </trans-unit>
        <trans-unit id="1d590a93d1ae3053ab803edbe0f51bf6d8db8992" translate="yes" xml:space="preserve">
          <source>For loading the list of all phones into the phone list component.</source>
          <target state="translated">すべての電話機のリストを電話機リストコンポーネントに読み込むためのものです。</target>
        </trans-unit>
        <trans-unit id="e95847f8698a025ef652972368513ade33eb21d8" translate="yes" xml:space="preserve">
          <source>For localization, you can use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to generate most of the boilerplate necessary to create files for translators, and to publish your app in multiple languages. After you have set up your app to use i18n, the CLI can help you with the following steps:</source>
          <target state="translated">ローカリゼーションでは、&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、翻訳者用のファイルを作成し、アプリを複数の言語で公開するために必要なボイラープレートのほとんどを生成できます。i18nを使用するようにアプリを設定した後、CLIは次の手順で役立ちます。</target>
        </trans-unit>
        <trans-unit id="1bdfea40bcf500a31f13b9bc539617f94889792b" translate="yes" xml:space="preserve">
          <source>For more about NgModules, see &lt;a href=&quot;ngmodules&quot;&gt;Organizing your app with NgModules&lt;/a&gt;.</source>
          <target state="translated">NgModulesの詳細については、「&lt;a href=&quot;ngmodules&quot;&gt;NgModulesを使用し&lt;/a&gt;たアプリの整理」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8f7790f93e8b73fbe836729c76c4b92a223f010e" translate="yes" xml:space="preserve">
          <source>For more about how the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command works, see &lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/docs/specifications/update.md&quot;&gt;Update Command&lt;/a&gt;.</source>
          <target state="translated">方法の詳細については &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; コマンドの作品は、見る&lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/docs/specifications/update.md&quot;&gt;更新コマンドを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7012dc55ddf86f8e1cb714f62289a732da460783" translate="yes" xml:space="preserve">
          <source>For more about how the &lt;code&gt;ng update&lt;/code&gt; command works, see &lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/docs/specifications/update.md&quot;&gt;Update Command&lt;/a&gt;.</source>
          <target state="translated">方法の詳細については &lt;code&gt;ng update&lt;/code&gt; コマンドの作品は、見る&lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/docs/specifications/update.md&quot;&gt;更新コマンドを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="efd9eaf4c706235863d54a110fd3b5d5cd497b1b" translate="yes" xml:space="preserve">
          <source>For more complete information on how &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; is used to construct target URIs, see the &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-5.2.2&quot;&gt;RFC&lt;/a&gt; section on transforming references.</source>
          <target state="translated">&lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; を使用してターゲットURIを構築する方法の詳細については、参照の変換に関する&lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-5.2.2&quot;&gt;RFC&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="912b038c1b77176f84399bef3e1cfee27863c9b3" translate="yes" xml:space="preserve">
          <source>For more detail on how these work, see the previous sections on &lt;a href=&quot;template-syntax#input&quot;&gt;Input&lt;/a&gt; and &lt;a href=&quot;template-syntax#output&quot;&gt;Output&lt;/a&gt;. To see it in action, see the &lt;span name=&quot;inputs-outputs&quot;&gt;Inputs and Outputs Example&lt;/span&gt;.</source>
          <target state="translated">これらの機能の詳細については、前のセクションの「&lt;a href=&quot;template-syntax#input&quot;&gt;入力」&lt;/a&gt;および「&lt;a href=&quot;template-syntax#output&quot;&gt;出力&lt;/a&gt;」を参照してください。実際の動作を確認するには、「&lt;span name=&quot;inputs-outputs&quot;&gt;入力と出力の例」&lt;/span&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="817ec49fe835be920c9756e3ebba4f2ed83c6036" translate="yes" xml:space="preserve">
          <source>For more detail, including how to build your own custom directives, see &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; and &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">独自のカスタムディレクティブを作成する方法など、詳細については、「&lt;a href=&quot;attribute-directives&quot;&gt;属性ディレクティブ&lt;/a&gt;と&lt;a href=&quot;structural-directives&quot;&gt;構造&lt;/a&gt;ディレクティブ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e189779c6fd202a0e50304bc10f229865ed3c8b7" translate="yes" xml:space="preserve">
          <source>For more detailed information on services, see the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Services&lt;/a&gt; chapter of the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;.</source>
          <target state="translated">サービスの詳細については、&lt;a href=&quot;tutorial&quot;&gt;Tour of Heroesチュートリアルの&lt;/a&gt;&lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;サービスの&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ff70ff85a85dfbc47459e089f85be3b2926fddc" translate="yes" xml:space="preserve">
          <source>For more detailed information, see the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt; section.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;dependency-injection&quot;&gt;依存性注入」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd4ecc8635e0be85c7897afd61378d70b90b6b28" translate="yes" xml:space="preserve">
          <source>For more details about how to create scripts to generate an app in multiple languages and how to set up Apache 2 and NGINX to serve them from different subdirectories, read &lt;a href=&quot;https://dev.to/angular/deploying-an-i18n-angular-app-with-angular-cli-2fb9&quot;&gt;this tutorial by Philippe Martin&lt;/a&gt;.</source>
          <target state="translated">複数の言語でアプリを生成するスクリプトを作成する方法と、Apache 2とNGINXを設定してさまざまなサブディレクトリからそれらを提供する方法の詳細については&lt;a href=&quot;https://dev.to/angular/deploying-an-i18n-angular-app-with-angular-cli-2fb9&quot;&gt;、Philippe Martinによるこのチュートリアル&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f5c8671421c0d94295fc193343091c1ff553ea22" translate="yes" xml:space="preserve">
          <source>For more details and examples on downgrading Angular components to AngularJS components please visit the &lt;a href=&quot;../../../guide/upgrade#using-angular-components-from-angularjs-code&quot;&gt;Upgrade guide&lt;/a&gt;.</source>
          <target state="translated">AngularコンポーネントをAngularJSコンポーネントにダウングレードする方法の詳細と例については、&lt;a href=&quot;../../../guide/upgrade#using-angular-components-from-angularjs-code&quot;&gt;アップグレードガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="41392c8a8ac6697970a5dcaa180c8d729b9b32eb" translate="yes" xml:space="preserve">
          <source>For more details of what these look like and how to create them, see:</source>
          <target state="translated">これらがどのように見えるのか、どのように作成するのかの詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a39023825136d186ad9b299f76ef4290b9c122ec" translate="yes" xml:space="preserve">
          <source>For more details on &lt;code&gt;pathMatch&lt;/code&gt; see &lt;a href=&quot;router-tutorial-toh#pathmatch&quot;&gt;Spotlight on &lt;code&gt;pathMatch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pathMatch&lt;/code&gt; の詳細については、pathMatchの&lt;a href=&quot;router-tutorial-toh#pathmatch&quot;&gt;Spotlightを &lt;code&gt;pathMatch&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0ef0eba5fb7aae6b3476d97afd599d01fa9968a9" translate="yes" xml:space="preserve">
          <source>For more details on how a library project is structured you can refer the &lt;a href=&quot;file-structure#library-project-files&quot;&gt;Library Project Files&lt;/a&gt;</source>
          <target state="translated">ライブラリプロジェクトの構造の詳細については、&lt;a href=&quot;file-structure#library-project-files&quot;&gt;ライブラリプロジェクトファイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e0afb9b1639c6b7db83d3921966353475d7605c" translate="yes" xml:space="preserve">
          <source>For more details on how a library project is structured, refer to the &lt;a href=&quot;file-structure#library-project-files&quot;&gt;Library project files&lt;/a&gt; section of the &lt;a href=&quot;file-structure&quot;&gt;Project File Structure guide&lt;/a&gt;.</source>
          <target state="translated">ライブラリプロジェクトの構造の詳細については、「&lt;a href=&quot;file-structure&quot;&gt;プロジェクトファイル構造ガイド」の&lt;/a&gt;「&lt;a href=&quot;file-structure#library-project-files&quot;&gt;ライブラリプロジェクトファイル」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ada7f6da9294e4c6d791dd9a0e5489db9a0be9b5" translate="yes" xml:space="preserve">
          <source>For more details on how to use &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; see &lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;Upgrading for Performance&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; の使用方法の詳細については、「&lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;Upgrading for Performance&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="78f4d0c22be01be28b6d0944e470a26d5823dfc5" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;../../guide/dependency-injection&quot;&gt;&quot;Dependency Injection Guide&quot;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../guide/dependency-injection&quot;&gt;「依存性注入ガイド」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="70d1fffe15b1f2e36ca7f113920e6fe75c98a33b" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;MDN HTMLTableCellElement&lt;/a&gt; documentation.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;MDN HTMLTableCellElementの&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="cefa1996491841c464ce6d8b900601e8930a2e82" translate="yes" xml:space="preserve">
          <source>For more in-depth information on the implementation, see the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/language-service/src/types.ts&quot;&gt;Angular Language Service API&lt;/a&gt;.</source>
          <target state="translated">実装の詳細については、&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/language-service/src/types.ts&quot;&gt;Angular Language Service APIを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="30ff6b08098db1b6b08de05417be2e5685863841" translate="yes" xml:space="preserve">
          <source>For more information TypeScript configuration files, see the official &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript wiki&lt;/a&gt; For details about configuration inheritance, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;Configuration inheritance with extends&lt;/a&gt; section.</source>
          <target state="translated">TypeScript構成ファイルの詳細については、公式の&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript wikiを&lt;/a&gt;参照してください。構成の継承の詳細については、「&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;extends&lt;/a&gt;を使用した構成の継承」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="84a20c4018d336da10d90fd9cfc2a600d1bedfdf" translate="yes" xml:space="preserve">
          <source>For more information TypeScript configuration files, see the official &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript wiki&lt;/a&gt; For details about configuration inheritance, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;Configuration inheritance with extends&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9e3433a19bc46e93bbdc630b233fcab6b1c9a2" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;package.json&lt;/code&gt; and polyfill packages, see &lt;a href=&quot;npm-packages&quot;&gt;Workspace npm dependencies&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;package.json&lt;/code&gt; とポリフィルパッケージ、参照&lt;a href=&quot;npm-packages&quot;&gt;ワークスペースNPMの依存関係を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="571c1a07f9b9eb717ea03c74bcc70570fb6aa857" translate="yes" xml:space="preserve">
          <source>For more information about Angular browser support, see &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">Angularブラウザーサポートの詳細については、「&lt;a href=&quot;browser-support&quot;&gt;ブラウザーサポート&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="51b8c9575a716c1e47999ff03076035e7329d207" translate="yes" xml:space="preserve">
          <source>For more information about Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;../guide/http&quot;&gt;Client-Server Interaction&lt;/a&gt; guide.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; の詳細については、&lt;a href=&quot;../guide/http&quot;&gt;クライアントサーバーインタラクション&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="b83bc230f5f7ebae3640de4b47c95fd664eb9cd9" translate="yes" xml:space="preserve">
          <source>For more information about Unicode locale identifiers, see the &lt;a href=&quot;http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers&quot;&gt;CLDR core spec&lt;/a&gt;.</source>
          <target state="translated">Unicodeロケール識別子の詳細については、&lt;a href=&quot;http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers&quot;&gt;CLDRコア仕様を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78841bd0bb58922e17fdaa94b801397143a15d5e" translate="yes" xml:space="preserve">
          <source>For more information about browser support, see the &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support&quot;&gt;browser support&lt;/a&gt; section of &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers: an Introduction&lt;/a&gt;, Jake Archibald's &lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot;&gt;Is Serviceworker ready?&lt;/a&gt;, and &lt;a href=&quot;http://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt;.</source>
          <target state="translated">ブラウザーサポートの詳細については、&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers：はじめに&lt;/a&gt;、Jake Archibald's &lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot;&gt;Is Serviceworker ready？&lt;/a&gt;の&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support&quot;&gt;ブラウザーサポート&lt;/a&gt;セクションを参照してください。、および&lt;a href=&quot;http://caniuse.com/#feat=serviceworkers&quot;&gt;使用できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b3e993f942f7505b640dbc6d2ea35b944de03085" translate="yes" xml:space="preserve">
          <source>For more information about browser support, see the &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support&quot;&gt;browser support&lt;/a&gt; section of &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers: an Introduction&lt;/a&gt;, Jake Archibald's &lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot;&gt;Is Serviceworker ready?&lt;/a&gt;, and &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f2585c0836152206284cf4cff3db56510414ea" translate="yes" xml:space="preserve">
          <source>For more information about components and how they interact with templates, see &lt;a href=&quot;guide/architecture-components&quot;&gt;Introduction to Components&lt;/a&gt;.</source>
          <target state="translated">コンポーネントおよびコンポーネントとテンプレートとの相互作用の詳細については&lt;a href=&quot;guide/architecture-components&quot;&gt;、コンポーネントの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="236e2ef1974979ffd7d8a223a6a77807f766066b" translate="yes" xml:space="preserve">
          <source>For more information about how Google handles security issues, see &lt;a href=&quot;https://www.google.com/about/appsecurity/&quot;&gt;Google's security philosophy&lt;/a&gt;.</source>
          <target state="translated">Googleがセキュリティ問題を処理する方法の詳細については、&lt;a href=&quot;https://www.google.com/about/appsecurity/&quot;&gt;Googleのセキュリティ理念を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="dcb995baca1ba9ed6fd26e278f74ed47277fc0fc" translate="yes" xml:space="preserve">
          <source>For more information about how the TypeScript configuration affects compilation, see &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular Compiler Options&lt;/a&gt; and &lt;a href=&quot;template-typecheck&quot;&gt;Template Type Checking&lt;/a&gt;.</source>
          <target state="translated">TypeScript構成がコンパイルに与える影響の詳細については、&lt;a href=&quot;angular-compiler-options&quot;&gt;Angularコンパイラオプション&lt;/a&gt;と&lt;a href=&quot;template-typecheck&quot;&gt;テンプレートタイプチェックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9336b64fe980ca2f27772eea821799db1477d587" translate="yes" xml:space="preserve">
          <source>For more information about input type narrowing, see &lt;a href=&quot;template-typecheck#input-setter-coercion&quot;&gt;Input setter coercion&lt;/a&gt; and &lt;a href=&quot;structural-directives#directive-type-checks&quot;&gt;Improving template type checking for custom directives&lt;/a&gt;.</source>
          <target state="translated">入力タイプの絞り込みの詳細については、「&lt;a href=&quot;template-typecheck#input-setter-coercion&quot;&gt;入力セッターの強制」&lt;/a&gt;および&lt;a href=&quot;structural-directives#directive-type-checks&quot;&gt;「カスタムディレクティブのテンプレートタイプチェックの改善」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8717f80b31662b078793e6ecb8c9984573a4f57a" translate="yes" xml:space="preserve">
          <source>For more information about lifecycles, see &lt;a href=&quot;lifecycle-hooks&quot;&gt;Hooking into the component lifecycle&lt;/a&gt;.</source>
          <target state="translated">ライフサイクルの詳細について&lt;a href=&quot;lifecycle-hooks&quot;&gt;は、コンポーネントのライフサイクルへの接続を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dbad9d8c402d32f04f249b30fb2a443d26c8dae6" translate="yes" xml:space="preserve">
          <source>For more information about pluralization categories, see &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Choosing-Plural-Category-Names&quot;&gt;Choosing plural category names&lt;/a&gt; in the CLDR - Unicode Common Locale Data Repository.</source>
          <target state="translated">複数形カテゴリの詳細については、「CLDR-Unicode Common LocaleDataRepositoryでの&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Choosing-Plural-Category-Names&quot;&gt;複数形のカテゴリ名の選択&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9964a9dc9a78ceda93aaa2a631966ffc6fd1170f" translate="yes" xml:space="preserve">
          <source>For more information about polyfills, see &lt;a href=&quot;https://www.webcomponents.org/polyfills&quot;&gt;polyfill documentation&lt;/a&gt;.</source>
          <target state="translated">ポリフィルの詳細については、&lt;a href=&quot;https://www.webcomponents.org/polyfills&quot;&gt;ポリフィルのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="29d25633303fc78f9607c68e2bdf3c741da7b7ac" translate="yes" xml:space="preserve">
          <source>For more information about providers and lazy-loaded routed NgModules, see &lt;a href=&quot;providers#limiting-provider-scope-by-lazy-loading-modules&quot;&gt;Limiting provider scope&lt;/a&gt;.</source>
          <target state="translated">プロバイダーと遅延ロードされたルーティングされたNgModuleの詳細については、「&lt;a href=&quot;providers#limiting-provider-scope-by-lazy-loading-modules&quot;&gt;プロバイダースコープの制限&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6b6aadb5ef721ae5451ab50edf27d49f587116f" translate="yes" xml:space="preserve">
          <source>For more information about routing, see the following topics:</source>
          <target state="translated">ルーティングの詳細については、以下のトピックを参照してください。</target>
        </trans-unit>
        <trans-unit id="d350f1532969099e56068a5d118f77bf4cc913d5" translate="yes" xml:space="preserve">
          <source>For more information about rules and utility methods, see &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/schematics#provided-rules&quot;&gt;Provided Rules&lt;/a&gt;.</source>
          <target state="translated">ルールとユーティリティメソッドの詳細については、「&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/schematics#provided-rules&quot;&gt;提供されるルール」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="03cbb1e65c44554cf14a341ae94bf0b620b95b32" translate="yes" xml:space="preserve">
          <source>For more information about service workers in general, see &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers: an Introduction&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;全般の詳細については、Service Workers：はじめにを参照してください。</target>
        </trans-unit>
        <trans-unit id="0b9e3cb67377ec7473047edb3662f139d750629a" translate="yes" xml:space="preserve">
          <source>For more information about services, see &lt;a href=&quot;../guide/architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">サービスの詳細については、「&lt;a href=&quot;../guide/architecture-services&quot;&gt;サービスと依存性注入の概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="90f304817a574dd3b93fbb1931e98aa85432d6ea" translate="yes" xml:space="preserve">
          <source>For more information about template input variables, see &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">テンプレート入力変数の詳細については、&lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;構造指令を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bf8c2198549329bb7dfaa0f1a4ceb280d07afff9" translate="yes" xml:space="preserve">
          <source>For more information about the Angular Router, see &lt;a href=&quot;../guide/router&quot;&gt;Routing &amp;amp; Navigation&lt;/a&gt;.</source>
          <target state="translated">Angularルーターの詳細については、&lt;a href=&quot;../guide/router&quot;&gt;ルーティングとナビゲーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bf7f0f7f896a271fc989b9cb322f11d5d7c62a96" translate="yes" xml:space="preserve">
          <source>For more information about the Angular files generated by &lt;code&gt;ng new&lt;/code&gt;, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and Project File Structure&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; によって生成されるAngularファイルの詳細については、「&lt;a href=&quot;file-structure&quot;&gt;ワークスペースとプロジェクトファイルの構造」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="52e6ac022078001a32995d871b8d2865025cbf63" translate="yes" xml:space="preserve">
          <source>For more information about the attacks and mitigations described below, see &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Guide_Project&quot;&gt;OWASP Guide Project&lt;/a&gt;.</source>
          <target state="translated">以下で説明する攻撃と緩和策の詳細については、&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Guide_Project&quot;&gt;OWASPガイドプロジェクトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6be97dad894b1a23556e4ce27d58b024db4a0eb4" translate="yes" xml:space="preserve">
          <source>For more information about the full capabilities of Angular's template syntax, see &lt;a href=&quot;guide/template-syntax&quot;&gt;Template Syntax&lt;/a&gt;.</source>
          <target state="translated">角度のテンプレート構文の完全な機能の詳細については、&lt;a href=&quot;guide/template-syntax&quot;&gt;テンプレートの構文を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bfb2ab6f46537090db78c8c58f8a51ce516a0922" translate="yes" xml:space="preserve">
          <source>For more information about the npm package format, see the &lt;a href=&quot;https://goo.gl/jB3GVv&quot;&gt;Angular Package Format spec&lt;/a&gt;.</source>
          <target state="translated">npmパッケージ形式の詳細については、&lt;a href=&quot;https://goo.gl/jB3GVv&quot;&gt;Angular PackageFormatの仕様を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dcb31425e1ffdf501edbef7fbf14e28f10e3577e" translate="yes" xml:space="preserve">
          <source>For more information about type-checking options, and about improvements to template type checking in version 9 and above, see &lt;a href=&quot;template-typecheck&quot;&gt;Template type checking&lt;/a&gt;.</source>
          <target state="translated">、およびバージョン9以上でテンプレートの型チェックの改善についての型チェックのオプションの詳細については、&lt;a href=&quot;template-typecheck&quot;&gt;テンプレートの型チェックを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74fc37bf8585f335d9717920574f7eae721aca6f" translate="yes" xml:space="preserve">
          <source>For more information about using &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;http&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 使用の詳細については、&lt;a href=&quot;http&quot;&gt;HttpClientガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="386ad298bea4b0e435d841329d791530a7524e88" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;../api/common/ngif&quot;&gt;API documentation about NgIf&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; 、参照&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIfに関するAPIドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8321d54465c08609e6f9e06ff80d381b79117be2" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;ngIfElse&lt;/code&gt;, see the &lt;a href=&quot;../api/common/ngif&quot;&gt;API documentation about NgIf&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;ngIfElse&lt;/code&gt; 、参照&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIfに関するAPIドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0f3458d4ed3e020fa73f228043be23211460b611" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter API documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 、参照&lt;a href=&quot;../api/core/eventemitter&quot;&gt;持つEventEmitter APIドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05beb7f7c6d3b64d67d1a432a8304f888a8cf09e" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;ngOnInit()&lt;/code&gt;, see &lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;Lifecycle hooks&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;ngOnInit()&lt;/code&gt; 、参照&lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;ライフサイクルフックを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f185be688fdab6f10dcf39ed8cac95b298927682" translate="yes" xml:space="preserve">
          <source>For more information on Angular dependency injection, see the &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers&lt;/a&gt; and &lt;a href=&quot;dependency-injection-in-action&quot;&gt;DI in Action&lt;/a&gt; guides.</source>
          <target state="translated">Angular依存関係注入の詳細については、&lt;a href=&quot;dependency-injection-providers&quot;&gt;DIプロバイダー&lt;/a&gt;および&lt;a href=&quot;dependency-injection-in-action&quot;&gt;DI in Action&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="730302ee5a734f817027f2bf006e032d293b1565" translate="yes" xml:space="preserve">
          <source>For more information on JavaScript modules, see &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;JavaScript/ECMAScript modules&lt;/a&gt;.</source>
          <target state="translated">JavaScriptモジュールの詳細については、&lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;JavaScript / ECMAScriptモジュールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ff27f98155df9560762be8e0a01925036e0e246e" translate="yes" xml:space="preserve">
          <source>For more information on NgModules, see:</source>
          <target state="translated">NgModulesの詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ebcd4a7b0acb00083960a9b91df95bb32d787e0" translate="yes" xml:space="preserve">
          <source>For more information on choosing a selector, see &lt;a href=&quot;component-overview#specifying-a-components-css-selector&quot;&gt;Specifying a component's selector&lt;/a&gt;.</source>
          <target state="translated">セレクターの選択の詳細については&lt;a href=&quot;component-overview#specifying-a-components-css-selector&quot;&gt;、コンポーネントのセレクターの指定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4252a145748c0f6e85a3cc615e3b8077846161e7" translate="yes" xml:space="preserve">
          <source>For more information on defining a component's template, see &lt;a href=&quot;component-overview#defining-a-components-template&quot;&gt;Defining a component's template&lt;/a&gt;.</source>
          <target state="translated">コンポーネントのテンプレートの&lt;a href=&quot;component-overview#defining-a-components-template&quot;&gt;定義の&lt;/a&gt;詳細については、コンポーネントのテンプレートの定義を参照してください。</target>
        </trans-unit>
        <trans-unit id="cecbc1c40f8a61edd4c42f950d7355d77dcc8282" translate="yes" xml:space="preserve">
          <source>For more information on how event binding works, see &lt;a href=&quot;event-binding-concepts&quot;&gt;How event binding works&lt;/a&gt;.</source>
          <target state="translated">イベント作品の結合方法の詳細については、&lt;a href=&quot;event-binding-concepts&quot;&gt;イベント作品を結合する方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f01541207c41e42439383fd580aac8c2f0ece404" translate="yes" xml:space="preserve">
          <source>For more information on how to publish libraries see &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;.</source>
          <target state="translated">ライブラリを公開する方法の詳細については、&lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;ライブラリの公開&lt;/a&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="57fdf07c80db57f529b49d5e717affd9c35a3d1d" translate="yes" xml:space="preserve">
          <source>For more information on injector hierarchy and scoping, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt; and the &lt;a href=&quot;dependency-injection&quot;&gt;DI Guide&lt;/a&gt;.</source>
          <target state="translated">インジェクターの階層とスコープの詳細については、「&lt;a href=&quot;providers&quot;&gt;プロバイダー」&lt;/a&gt;および「&lt;a href=&quot;dependency-injection&quot;&gt;DIガイド」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a9e1b3573a165b5d7cefe2220edbaaaf19255dfd" translate="yes" xml:space="preserve">
          <source>For more information on installing Node.js, see &lt;a href=&quot;http://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;. If you are unsure what version of Node.js runs on your system, run &lt;code&gt;node -v&lt;/code&gt; in a terminal window.</source>
          <target state="translated">Node.jsのインストールの詳細については、&lt;a href=&quot;http://nodejs.org&quot;&gt;nodejs.orgを&lt;/a&gt;参照してください。システムで実行されているNode.jsのバージョンがわからない場合は、ターミナルウィンドウで &lt;code&gt;node -v&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="9066099365e960b818159290f5666b74f919d686" translate="yes" xml:space="preserve">
          <source>For more information on installing Node.js, see &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;. If you are unsure what version of Node.js runs on your system, run &lt;code&gt;node -v&lt;/code&gt; in a terminal window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82df1d2ef5dc58c9518688898eb4e09aa451d393" translate="yes" xml:space="preserve">
          <source>For more information on lazy loading and preloading see the dedicated guide &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy loading NgModules&lt;/a&gt;.</source>
          <target state="translated">遅延読み込みと&lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;事前読み込みの&lt;/a&gt;詳細については、専用ガイドの遅延読み込みNgModulesを参照してください。</target>
        </trans-unit>
        <trans-unit id="e05dca144c4ee9dd62b4f6e1e1ff04b908916b57" translate="yes" xml:space="preserve">
          <source>For more information on listening for events, see &lt;a href=&quot;event-binding&quot;&gt;Event binding&lt;/a&gt;.</source>
          <target state="translated">イベントのリッスンの詳細については、&lt;a href=&quot;event-binding&quot;&gt;イベントバインディングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81c534993810f308b62b4817239b03fdf30981b3" translate="yes" xml:space="preserve">
          <source>For more information on modules, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">モジュールの詳細については、&lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="39452ffd652d163dc4e0fa8775c0130ecde8f80a" translate="yes" xml:space="preserve">
          <source>For more information on modules, see the &lt;a href=&quot;architecture#modules&quot;&gt;Modules&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">モジュールの詳細については、「&lt;a href=&quot;architecture&quot;&gt;アーキテクチャの概要」の&lt;/a&gt;「&lt;a href=&quot;architecture#modules&quot;&gt;モジュール」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="59a2f7df762f4c8870c636622125b80a62704314" translate="yes" xml:space="preserve">
          <source>For more information on property binding, see the &lt;a href=&quot;property-binding&quot;&gt;Property binding&lt;/a&gt; page.</source>
          <target state="translated">プロパティバインディングの詳細については、&lt;a href=&quot;property-binding&quot;&gt;プロパティバインディングの&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="07e059ddbe4be008aaf0428ed61a37ef6ebcdbc0" translate="yes" xml:space="preserve">
          <source>For more information on property binding, see the &lt;a href=&quot;template-syntax#property-binding&quot;&gt;Property binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">プロパティバインディングの詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#property-binding&quot;&gt;プロパティバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4303215dc54be8669fc83391e15f7d9149e1ccff" translate="yes" xml:space="preserve">
          <source>For more information on providers and the bootstrap process, see &lt;a href=&quot;dependency-injection#bootstrap&quot;&gt;Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">プロバイダーとブートストラッププロセスの詳細については、&lt;a href=&quot;dependency-injection#bootstrap&quot;&gt;依存性注入を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="17c52481091a39cfa252e5b04af6908465d2bb83" translate="yes" xml:space="preserve">
          <source>For more information on routing, see &lt;a href=&quot;router#basic-route&quot;&gt;Defining a basic route&lt;/a&gt; in the &lt;a href=&quot;router&quot;&gt;Routing &amp;amp; Navigation&lt;/a&gt; page.</source>
          <target state="translated">ルーティングの詳細については、「&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;」ページの「&lt;a href=&quot;router#basic-route&quot;&gt;基本ルートの定義&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5a8dd2a9dd16c5cd2521045ec3553f71dc3ecef4" translate="yes" xml:space="preserve">
          <source>For more information on routing, see the &lt;a href=&quot;router#router-link&quot;&gt;RouterLink binding&lt;/a&gt; section of the &lt;a href=&quot;router&quot;&gt;Routing &amp;amp; Navigation&lt;/a&gt; page.</source>
          <target state="translated">ルーティングの詳細については、「&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;」ページの「&lt;a href=&quot;router#router-link&quot;&gt;RouterLinkバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="acef023a437d3107cbd19bd598396e92466ffacd" translate="yes" xml:space="preserve">
          <source>For more information on style binding, see the &lt;a href=&quot;attribute-binding#style-binding&quot;&gt;Style binding&lt;/a&gt; section of the &lt;a href=&quot;attribute-binding&quot;&gt;Attribute binding&lt;/a&gt; page.</source>
          <target state="translated">スタイルバインディングの詳細については、「&lt;a href=&quot;attribute-binding&quot;&gt;属性バインディング&lt;/a&gt;」ページの「&lt;a href=&quot;attribute-binding#style-binding&quot;&gt;スタイルバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="794dd6e4bcfee67b081b6f8fe8556f70c59633f8" translate="yes" xml:space="preserve">
          <source>For more information on style binding, see the &lt;a href=&quot;template-syntax#style-binding&quot;&gt;Style binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">スタイルバインディングの詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#style-binding&quot;&gt;スタイルバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb14e202dba47a39b777f365944dea8b76f99745" translate="yes" xml:space="preserve">
          <source>For more information on styling components, see &lt;a href=&quot;component-styles&quot;&gt;Component styles&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;component-styles&quot;&gt;コンポーネントのスタイル設定の&lt;/a&gt;詳細については、「コンポーネントスタイル」を参照してください。</target>
        </trans-unit>
        <trans-unit id="622ee34b9f415a34e4ca9699123d7c7b9c994775" translate="yes" xml:space="preserve">
          <source>For more information on templates, see &lt;a href=&quot;template-syntax&quot;&gt;Template syntax&lt;/a&gt;.</source>
          <target state="translated">テンプレートの詳細については、&lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c30b04fe7f32dfdadff87cbb4e8025359204a143" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; directive, see &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;NgStyle&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; のディレクティブを参照してください&lt;a href=&quot;template-syntax#ngStyle&quot;&gt;NgStyleの&lt;/a&gt;のセクション&lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt;のページを。</target>
        </trans-unit>
        <trans-unit id="0f67316713aa8205401761ca53e9ba7b61d09666" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; directive, see the &lt;a href=&quot;built-in-directives#ngStyle&quot;&gt;NgStyle&lt;/a&gt; section of the &lt;a href=&quot;built-in-directives&quot;&gt;Built-in directives&lt;/a&gt; page.</source>
          <target state="translated">詳細については &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; のディレクティブを参照してください&lt;a href=&quot;built-in-directives#ngStyle&quot;&gt;NgStyleの&lt;/a&gt;のセクション&lt;a href=&quot;built-in-directives&quot;&gt;内蔵ディレクティブ&lt;/a&gt;ページを。</target>
        </trans-unit>
        <trans-unit id="8952f7b930f6e954e3b60a48a8cbcaedd9b31542" translate="yes" xml:space="preserve">
          <source>For more information on the acceptable range for each of these numbers and other details see your native internationalization library.</source>
          <target state="translated">これらの数値の許容範囲やその他の詳細については、ネイティブの国際化ライブラリを参照してください。</target>
        </trans-unit>
        <trans-unit id="ee57eb4e63029e0581a4a99825f0c72b34f92c05" translate="yes" xml:space="preserve">
          <source>For more information on two-way binding with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;built-in-directives#ngModel&quot;&gt;NgModel&amp;mdash;Two-way binding to form elements with &lt;code&gt;[(ngModel)]&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;built-in-directives&quot;&gt;Built-in directives&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用した双方向バインディングの詳細については、&lt;a href=&quot;built-in-directives&quot;&gt;組み込みディレクティブ&lt;/a&gt;ページの&lt;a href=&quot;built-in-directives#ngModel&quot;&gt; &lt;code&gt;[(ngModel)]&lt;/code&gt; &lt;/a&gt;セクションを使用したフォーム要素へのNgModel-双方向バインディングを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd88bdbd389d58114d341cf8d34f28359dc62a54" translate="yes" xml:space="preserve">
          <source>For more information on two-way binding with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel&amp;mdash;Two-way binding to form elements with &lt;code&gt;[(ngModel)]&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用した双方向バインディングの詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの&lt;a href=&quot;template-syntax#ngModel&quot;&gt; &lt;code&gt;[(ngModel)]&lt;/code&gt; &lt;/a&gt;セクションを使用してフォーム要素にNgModel&amp;mdash;双方向バインディングを参照してください。</target>
        </trans-unit>
        <trans-unit id="c2411c58d0f671afde9c66f46c77933f7e200d4a" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;attribute-binding&quot;&gt;Attribute, class, and style bindings&lt;/a&gt; page.</source>
          <target state="translated">詳細については、&lt;a href=&quot;attribute-binding&quot;&gt;属性、クラス、およびスタイルのバインディングの&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="99d287becb11b19affa20313753722427b8a4c4b" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;workspace-config&quot;&gt;ワークスペースの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f71f227fdc76e4766dd657ee660649c4c6081d63" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;property-binding&quot;&gt;Property binding&lt;/a&gt; page.</source>
          <target state="translated">詳細については、&lt;a href=&quot;property-binding&quot;&gt;プロパティバインディング&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="02e0e635864a1fe70f19368b65adc1eaa90a0cba" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;router#activated-route&quot;&gt;Getting route information&lt;/a&gt; section of the &lt;a href=&quot;router&quot;&gt;Router guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;router&quot;&gt;ルーターガイドの&lt;/a&gt;&lt;a href=&quot;router#activated-route&quot;&gt;「ルート情報&lt;/a&gt;の取得」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="10968353b5aa385ae26af5f3b92c0f4f65a140ed" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;router#activated-route&quot;&gt;Router guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;router#activated-route&quot;&gt;ルーターガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f8a289a1d967f8d205c8f5814a3cc02a8c2ffaf8" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;template-syntax#other-bindings&quot;&gt;Attribute, class, and style bindings&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#other-bindings&quot;&gt;属性、クラス、およびスタイルバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="769195363ef40e5cc39446645a5fac8af82ad174" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;template-syntax#property-binding&quot;&gt;Property binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#property-binding&quot;&gt;プロパティバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ceeaa7f67571176fe63836b370c6a9296401536e" translate="yes" xml:space="preserve">
          <source>For more information with a working example, see the &lt;a href=&quot;router-tutorial-toh#milestone-5-route-guards&quot;&gt;routing tutorial section on route guards&lt;/a&gt;.</source>
          <target state="translated">実用的な例の詳細については&lt;a href=&quot;router-tutorial-toh#milestone-5-route-guards&quot;&gt;、ルートガードに関するルーティングチュートリアルのセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cd2e08bb8716ea5a577912e9913752b7efea7289" translate="yes" xml:space="preserve">
          <source>For more information with a working example, see the &lt;a href=&quot;router-tutorial-toh#preloading-background-loading-of-feature-areas&quot;&gt;routing tutorial section on preloading&lt;/a&gt;.</source>
          <target state="translated">実用的な例の詳細については&lt;a href=&quot;router-tutorial-toh#preloading-background-loading-of-feature-areas&quot;&gt;、プリロードに関するルーティングチュートリアルのセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1ad6b4e720e85666693541a6437ca7c180df2ef6" translate="yes" xml:space="preserve">
          <source>For more information, refer to &lt;a href=&quot;styleguide#file-tree&quot;&gt;this folder and file structure example.&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;styleguide#file-tree&quot;&gt;このフォルダーとファイル構造の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d2a41c7e3c796f9e2c894a9039e362a5b0903ca" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/browser-support&quot;&gt;ブラウザのサポートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f3dc28bd501a5350cf9ed9793b9c5dd2dcfef70" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/elements&quot;&gt;Angular Elements Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;../guide/elements&quot;&gt;角度要素の概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3da5dc400360468fb0e1202b31268e48759f8137" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/universal&quot;&gt;Server-side Rendering: An intro to Angular Universal&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;../guide/universal&quot;&gt;サーバー側レンダリング：Angular Universalの紹介」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="42ffd5f9d2a4e70c577c23245862d32768a8e840" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;ajs-quick-reference#filters-pipes&quot;&gt;Filters/pipes&lt;/a&gt; below.</source>
          <target state="translated">詳細については、以下の&lt;a href=&quot;ajs-quick-reference#filters-pipes&quot;&gt;フィルター/パイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="74bb82b6fb25ae18e173857402063be64c8b3ff1" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;architecture#components&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture#components&quot;&gt;アーキテクチャの概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="95ce115584d7fcff4f126746b479be76d1ab3404" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;built-in-directives#ngSwitch&quot;&gt;The NgSwitch directives&lt;/a&gt; section of the &lt;a href=&quot;built-in-directives&quot;&gt;Built-in directives&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;built-in-directives&quot;&gt;組み込みディレクティブ&lt;/a&gt;」ページの&lt;a href=&quot;built-in-directives#ngSwitch&quot;&gt;「NgSwitchディレクティブ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f3f7da9f4b2ed38024f3075baf394b62bfebf75c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;component-styles#deprecated-deep--and-ng-deep&quot;&gt;/deep/, &amp;gt;&amp;gt;&amp;gt;, and ::ng-deep&lt;/a&gt; in the Component Styles guide.</source>
          <target state="translated">詳細については、コンポーネントスタイルガイドの&lt;a href=&quot;component-styles#deprecated-deep--and-ng-deep&quot;&gt;/ deep /、&amp;gt;&amp;gt;&amp;gt;、および:: ng-deepを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="910e6c9f9471fae61f362d6475c1608582103bfa" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;entry-components&quot;&gt;Entry Components&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;entry-components&quot;&gt;エントリコンポーネント&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="647d992d00106f995eb13d466d01fe417cfe65cf" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;feature-modules&quot;&gt;Feature Modules&lt;/a&gt; and &lt;a href=&quot;module-types&quot;&gt;Module Types&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;feature-modules&quot;&gt;機能モジュール&lt;/a&gt;と&lt;a href=&quot;module-types&quot;&gt;モジュールタイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e65514d22eada34ea7b89a6ac9d12c8e55cfaada" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Project File Structure&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;file-structure&quot;&gt;プロジェクトファイルの構造を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1f9218549d8779c7011a94db6914ce5a34a35b02" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and Project File Structure&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;file-structure&quot;&gt;ワークスペースとプロジェクトファイルの構造」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="88a7c699d9f401cabad96d14c386c540d56f272c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and project file structure&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;file-structure&quot;&gt;ワークスペースとプロジェクトファイルの構造&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="61925bb6327cd5e1406c0ce1f5c086e01c47cf5a" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;form-validation&quot;&gt;フォームの検証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3759746ed1e1fa5e80f65859aa178d1f09e1ad1e" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;Autoprefixer documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;Autoprefixerのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d347d2199555de02a94c02fec3073a412a4f0995" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;lifecycle-hooks#content-projection&quot;&gt;Responding to changes in content&lt;/a&gt;.</source>
          <target state="translated">詳細について&lt;a href=&quot;lifecycle-hooks#content-projection&quot;&gt;は、コンテンツの変更への対応を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bd8ac232ee0667f9ad348999ea89abd8c513a96f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScriptモジュールとNgModuleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ffc85b5be8ec62000eb01feeeeb30858b38867de" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3bacaa09ba02cc1ce65095dcd8b2994f774ff5a" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="28d7da8c96ca8c10b7825011250effd25ef6ac50" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;schematics&quot;&gt;Schematics&lt;/a&gt; and &lt;a href=&quot;creating-libraries#integrating-with-the-cli&quot;&gt;Integrating Libraries with the CLI&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;schematics&quot;&gt;Schematics&lt;/a&gt; and &lt;a href=&quot;creating-libraries#integrating-with-the-cli&quot;&gt;Integrating Libraries with the CLI」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="faf78994c8191e68393eb8590f1621ac1a34d996" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;service-worker-config#assetgroups&quot;&gt;Service Worker Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;service-worker-config#assetgroups&quot;&gt;Service Worker Configurationを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a3cb457dd4fe6b961a9c5d6d0ef8b39b976b5d6f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;structural-directives&quot;&gt;構造ディレクティブを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e72ee8c0272a1b8689787af6c58eaa81e5346b14" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;The NgSwitch directives&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;「NgSwitchディレクティブ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="554b553aa497caea9085de0edefb3cfda2675bac" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;template-typecheck&quot;&gt;Template type checking guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;template-typecheck&quot;&gt;テンプレートタイプチェックガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d8f1d4de7f1fc3885fd915873481df8c0921c29a" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;workspace-config&quot;&gt;ワークスペースの構成&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="feacd759d802327f6bf7203cee38b5e8d2c13c24" translate="yes" xml:space="preserve">
          <source>For more information, see Web Component documentation for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events&quot;&gt;Creating custom events&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events&quot;&gt;カスタムイベントの作成&lt;/a&gt;に関するWebコンポーネントのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c8d5851cb623be46e85825bee69058823d2cf024" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;architecture#components&quot;&gt;Components&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture&quot;&gt;アーキテクチャの概要&lt;/a&gt;」ページの「&lt;a href=&quot;architecture#components&quot;&gt;コンポーネント」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9562f2baea93ad760f4f07698ee700193ef683f3" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;architecture#dependency-injection&quot;&gt;Dependency injection&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture&quot;&gt;アーキテクチャの概要」の&lt;/a&gt;「&lt;a href=&quot;architecture#dependency-injection&quot;&gt;依存性注入」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c12faa4c7f50171417faf485adc4db4bf9b2f3fa" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;built-in-directives#microsyntax&quot;&gt;ngFor micro-syntax&lt;/a&gt; section of the &lt;a href=&quot;built-in-directives&quot;&gt;Built-in Directives&lt;/a&gt; page.</source>
          <target state="translated">詳細については、&lt;a href=&quot;built-in-directives&quot;&gt;組み込みディレクティブ&lt;/a&gt;ページの&lt;a href=&quot;built-in-directives#microsyntax&quot;&gt;ngFormicro-syntax&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e5dc6de3e5e8e07ada84ea2b37ea4e5cddbf480" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;deployment#differential-loading&quot;&gt;Deployment&lt;/a&gt; guide.</source>
          <target state="translated">詳細については、&lt;a href=&quot;deployment#differential-loading&quot;&gt;導入&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="a30335ec49dd934b64fb8a20d55bd3792f284dc7" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;event-binding&quot;&gt;Event binding&lt;/a&gt; page.</source>
          <target state="translated">詳細については、&lt;a href=&quot;event-binding&quot;&gt;イベントバインディング&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e897a0d9749db6b4e9a381af9d22e7733f38b78" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDN Interfaces documentation&lt;/a&gt; which has API docs for all the standard DOM elements and their properties. Comparing the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; attributes&lt;/a&gt; attributes to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; properties&lt;/a&gt; provides a helpful example for differentiation. In particular, you can navigate from the attributes page to the properties via &quot;DOM interface&quot; link, and navigate the inheritance hierarchy up to &lt;code&gt;HTMLTableCellElement&lt;/code&gt;.</source>
          <target state="translated">詳細については、すべての標準DOM要素とそのプロパティのAPIドキュメントを含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDNインターフェイスのドキュメント&lt;/a&gt;を参照してください。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 属性の&lt;/a&gt;属性を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; プロパティ&lt;/a&gt;と比較すると、区別に役立つ例がわかります。特に、「DOMインターフェース」リンクを介して属性ページからプロパティに移動し、継承階層を &lt;code&gt;HTMLTableCellElement&lt;/code&gt; まで移動できます。</target>
        </trans-unit>
        <trans-unit id="92a654315b18fc9d9ce2b3617fdc86b2eb17786c" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDN Interfaces documentation&lt;/a&gt; which has API docs for all the standard DOM elements and their properties. Comparing the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; attributes&lt;/a&gt; to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; properties&lt;/a&gt; provides a helpful example for differentiation. In particular, you can navigate from the attributes page to the properties via &quot;DOM interface&quot; link, and navigate the inheritance hierarchy up to &lt;code&gt;HTMLTableCellElement&lt;/code&gt;.</source>
          <target state="translated">詳細については、すべての標準DOM要素とそのプロパティのAPIドキュメントが含まれている&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDNインターフェイスのドキュメント&lt;/a&gt;を参照してください。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 属性&lt;/a&gt;を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; プロパティ&lt;/a&gt;と比較すると、区別に役立つ例が得られます。特に、「DOMインターフェイス」リンクを介して属性ページからプロパティに移動し、継承階層を &lt;code&gt;HTMLTableCellElement&lt;/code&gt; まで移動できます。</target>
        </trans-unit>
        <trans-unit id="3cc2dd3553dd60cfafd23d0f7c3bcbdbcd65cd08" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript Handbook&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScriptハンドブックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1bde673d22460d32d96859a37e7d2bad591977de" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;interpolation&quot;&gt;Interpolation&lt;/a&gt; guide.</source>
          <target state="translated">詳細については、&lt;a href=&quot;interpolation&quot;&gt;補間&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="44a555ff769d815cc3aa790bcef685ef9b5657cd" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;template-reference-variables&quot;&gt;Template reference variable&lt;/a&gt; guide.</source>
          <target state="translated">詳細については、&lt;a href=&quot;template-reference-variables&quot;&gt;テンプレートリファレンス変数&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="e41e0a5e60e15529ca5490506b25bc9d5d510d6f" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;template-syntax#event-binding&quot;&gt;Event binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベントバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d74a1bd0b2c736fe8616be8256dd3c4c3aff5eb0" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;template-syntax#interpolation&quot;&gt;Interpolation&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;ページの&lt;a href=&quot;template-syntax#interpolation&quot;&gt;補間&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f81eb224215358882f713669daaa0a505a0494b1" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;template-syntax#microsyntax&quot;&gt;ngFor micro-syntax&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;ページの&lt;a href=&quot;template-syntax#microsyntax&quot;&gt;ngForマイクロ構文&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f41491a9bc619bc06a138dc6be2c2f60b631649c" translate="yes" xml:space="preserve">
          <source>For more information, see the XSSI section of this &lt;a href=&quot;https://security.googleblog.com/2011/05/website-security-for-webmasters.html&quot;&gt;Google web security blog post&lt;/a&gt;.</source>
          <target state="translated">詳細については、この&lt;a href=&quot;https://security.googleblog.com/2011/05/website-security-for-webmasters.html&quot;&gt;Google Webセキュリティのブログ投稿&lt;/a&gt;のXSSIセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0b3a041e7e67d85d817c91582c81d8e8a9f22482" translate="yes" xml:space="preserve">
          <source>For more information, see the usage notes for &lt;a href=&quot;../api/forms/formcontroldirective#use-with-ngmodel&quot;&gt;&lt;code&gt;FormControlDirective&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/forms/formcontrolname#use-with-ngmodel&quot;&gt;&lt;code&gt;FormControlName&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/forms/formcontroldirective#use-with-ngmodel&quot;&gt; &lt;code&gt;FormControlDirective&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/forms/formcontrolname#use-with-ngmodel&quot;&gt; &lt;code&gt;FormControlName&lt;/code&gt; の&lt;/a&gt;使用上の注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="fb1b9eb393e6ee99baf5d52bbb3bbc1d37842c77" translate="yes" xml:space="preserve">
          <source>For more on NgModules you're likely to see frequently in apps, see &lt;a href=&quot;frequent-ngmodules&quot;&gt;Frequently Used Modules&lt;/a&gt;.</source>
          <target state="translated">アプリで頻繁に表示される可能性が高いNgModuleの詳細については、「&lt;a href=&quot;frequent-ngmodules&quot;&gt;よく使用されるモジュール&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8446196464e268c008d3d3157078edc2eb7a2ad8" translate="yes" xml:space="preserve">
          <source>For more on browser URL styles, see &lt;a href=&quot;router#browser-url-styles&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt; and browser URL styles&lt;/a&gt;.</source>
          <target state="translated">ブラウザのURLスタイルの詳細については、&lt;a href=&quot;router#browser-url-styles&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; およびブラウザのURLスタイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c7e4611ebab16c5cdd03b3e589a81a8f80eb9350" translate="yes" xml:space="preserve">
          <source>For more on form validation, visit the &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt; guide.</source>
          <target state="translated">フォーム検証の詳細については、&lt;a href=&quot;form-validation&quot;&gt;フォーム検証&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="666e64d5996e9b26f42c2196557076d536186936" translate="yes" xml:space="preserve">
          <source>For more on how to use two-way binding in forms, see Angular &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel&lt;/a&gt;.</source>
          <target state="translated">フォームで双方向バインディングを使用する方法の詳細については、Angular &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModelを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="809ad89220646ba891d89d96783aa3e684e961d1" translate="yes" xml:space="preserve">
          <source>For more on the design considerations and intentions, see &lt;a href=&quot;https://github.com/angular/vscode-ng-language-service/wiki/Design&quot;&gt;design documentation here&lt;/a&gt;.</source>
          <target state="translated">設計の考慮事項と意図の詳細については、こちらの&lt;a href=&quot;https://github.com/angular/vscode-ng-language-service/wiki/Design&quot;&gt;設計ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f278974e8aa6767eefc9593cf1e0b5499272b44b" translate="yes" xml:space="preserve">
          <source>For more usage information, see the &lt;a href=&quot;../guide/service-worker-intro&quot;&gt;Service Workers&lt;/a&gt; guide.</source>
          <target state="translated">使用方法の詳細については、&lt;a href=&quot;../guide/service-worker-intro&quot;&gt;Service Workers&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="ab92685c5e50a5b9a7e3884b2e99d733f6442437" translate="yes" xml:space="preserve">
          <source>For now, focus on &lt;em&gt;Barry&lt;/em&gt;'s constructor.</source>
          <target state="translated">ここでは、&lt;em&gt;Barry&lt;/em&gt;のコンストラクターに焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="2d8ea80142bc374361cb613dc3fb6f35beb28443" translate="yes" xml:space="preserve">
          <source>For now, it is not recommended to publish Ivy libraries to NPM because Ivy generated code is not backward compatible with View Engine, so apps using View Engine will not be able to consume them. Furthermore, the internal Ivy instructions are not yet stable, which can potentially break consumers using a different Angular version from the one used to build the library.</source>
          <target state="translated">今のところ、IvyのライブラリをNPMに公開することは推奨されていません。なぜなら、Ivyで生成されたコードはView Engineとの下位互換性がないため、View Engineを使用しているアプリではそれらを消費できなくなるからです。さらに、内部の Ivy 命令はまだ安定していないため、ライブラリのビルドに使用されたものとは異なる Angular バージョンを使用しているコンシューマーが壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6a468f4514fb514114981b2143412a3d0c505947" translate="yes" xml:space="preserve">
          <source>For one minute, use &lt;code&gt;=1 {one minute}&lt;/code&gt;.</source>
          <target state="translated">1分間、 &lt;code&gt;=1 {one minute}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="59100ae08d659db33b88f25209e8830fe8afa97e" translate="yes" xml:space="preserve">
          <source>For one thing, TypeScript is a superset of ES2015. Any app that has previously been written in ES5 - like the PhoneCat example has - can with TypeScript start incorporating all of the JavaScript features that are new to ES2015. These include things like &lt;code&gt;let&lt;/code&gt;s and &lt;code&gt;const&lt;/code&gt;s, arrow functions, default function parameters, and destructuring assignments.</source>
          <target state="translated">1つには、TypeScriptはES2015のスーパーセットです。PhoneCatの例のように、ES5で以前に作成されたアプリはすべて、TypeScriptでES2015の新しいJavaScript機能をすべて組み込むことができます。これらには、 &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;const&lt;/code&gt; 、矢印関数、デフォルトの関数パラメーター、および構造化割り当てなどが含まれます。</target>
        </trans-unit>
        <trans-unit id="f03c29e27c6c18bf79682cff783ba6a44d092067" translate="yes" xml:space="preserve">
          <source>For our example builder, we expect the &lt;code&gt;options&lt;/code&gt; value to be a &lt;code&gt;JsonObject&lt;/code&gt; with two keys: a &lt;code&gt;command&lt;/code&gt; that is a string, and an &lt;code&gt;args&lt;/code&gt; array of string values.</source>
          <target state="translated">このビルダーの例では、 &lt;code&gt;options&lt;/code&gt; の値は、文字列である &lt;code&gt;command&lt;/code&gt; と文字列値の &lt;code&gt;args&lt;/code&gt; 配列の2つのキーを持つ &lt;code&gt;JsonObject&lt;/code&gt; であると想定しています。</target>
        </trans-unit>
        <trans-unit id="ac11e83a712be720c89c59c4c2dd72286d9a33e6" translate="yes" xml:space="preserve">
          <source>For performance reasons, Angular only runs async validators if all sync validators pass. Each must complete before errors are set.</source>
          <target state="translated">パフォーマンス上の理由から、Angularはすべての同期バリデータが通過した場合にのみ非同期バリデータを実行します。エラーが設定される前にそれぞれが完了しなければなりません。</target>
        </trans-unit>
        <trans-unit id="56f7c93c7f59e5f9168a4708eb3d38dde1a88f3d" translate="yes" xml:space="preserve">
          <source>For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.</source>
          <target state="translated">性能上の理由から、Angularにはそれに匹敵するパイプは存在しません。フィルタリングはすべてコンポーネントで行いましょう。複数のテンプレートで同じフィルタリングコードが必要な場合は、カスタムパイプの構築を検討してください。</target>
        </trans-unit>
        <trans-unit id="b53efe89cb24b2f51ff65079bc39c73f64f531fe" translate="yes" xml:space="preserve">
          <source>For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.</source>
          <target state="translated">パフォーマンス上の理由から、Angularにはそれに匹敵するパイプは存在しません。代わりに、コンポーネントコードを使って結果を並べ替えたり、ソートしたりします。複数のテンプレートで同じ順序やソートコードが必要な場合は、カスタムパイプの構築を検討してください。</target>
        </trans-unit>
        <trans-unit id="5068e7ff50c8b38b8c331c0d5f43808c17db59a9" translate="yes" xml:space="preserve">
          <source>For performance reasons, the Stackblitz does not start right away. The reader sees an image instead. Clicking the image starts the sometimes-slow process of launching the embedded Stackblitz within an iframe on the page.</source>
          <target state="translated">性能上の理由から、スタックブリッツはすぐには始まりません。代わりに画像が表示されます。画像をクリックすると、ページ上の iframe 内に埋め込まれた Stackblitz が起動するまでに時間がかかることがあります。</target>
        </trans-unit>
        <trans-unit id="4960e870d39261ecd536d1eac263c0f8fe1003c5" translate="yes" xml:space="preserve">
          <source>For positional properties with a numeric value, define a unit by providing the value as a string, in quotes, with the appropriate suffix:</source>
          <target state="translated">数値を持つ位置プロパティの場合は、値を引用符で囲み、適切な接尾辞を付けて文字列として提供することで単位を定義します。</target>
        </trans-unit>
        <trans-unit id="4bcb0ca83da156d6555dbcdf2d6aae37ce332bed" translate="yes" xml:space="preserve">
          <source>For production apps you want to load the smallest code possible. The code should contain only the classes that you actually need and exclude components that are never used. For this reason, the Angular compiler only generates code for components which are reachable from the &lt;code&gt;entryComponents&lt;/code&gt;; This means that adding more references to &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; does not imply that they will necessarily be included in the final bundle.</source>
          <target state="translated">プロダクションアプリでは、可能な限り最小のコードをロードします。コードには、実際に必要なクラスのみを含め、決して使用されないコンポーネントを除外する必要があります。このため、Angularコンパイラーは &lt;code&gt;entryComponents&lt;/code&gt; から到達可能なコンポーネントのコードのみを生成します。つまり、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; への参照を追加しても、それらが必ずしも最終的なバンドルに含まれるとは限りません。</target>
        </trans-unit>
        <trans-unit id="8dbcbcd001d95d25a4ecf8eb8f00936e4bab529d" translate="yes" xml:space="preserve">
          <source>For production builds, you can use configuration composition to execute both configurations:</source>
          <target state="translated">本番環境でのビルドでは、コンフィギュレーション構成を使用して両方のコンフィギュレーションを実行することができます。</target>
        </trans-unit>
        <trans-unit id="e270ff1b337da62176ea2fcde372a35480e5c1ae" translate="yes" xml:space="preserve">
          <source>For production builds, you define a separate &lt;code&gt;production-fr&lt;/code&gt; build configuration in the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">本番ビルドの場合、CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; で個別の &lt;code&gt;production-fr&lt;/code&gt; ビルド構成を定義します。</target>
        </trans-unit>
        <trans-unit id="8c9d8157e0abf506f44806175c23d88246ace003" translate="yes" xml:space="preserve">
          <source>For resources already in the cache, the &lt;code&gt;updateMode&lt;/code&gt; determines the caching behavior when a new version of the app is discovered. Any resources in the group that have changed since the previous version are updated in accordance with &lt;code&gt;updateMode&lt;/code&gt;.</source>
          <target state="translated">すでにキャッシュにあるリソースの場合、 &lt;code&gt;updateMode&lt;/code&gt; は、アプリの新しいバージョンが検出されたときのキャッシュ動作を決定します。以前のバージョン以降に変更されたグループ内のリソースは、 &lt;code&gt;updateMode&lt;/code&gt; に従って更新されます。</target>
        </trans-unit>
        <trans-unit id="d3769e9ead05944db64dff6a941316a57ddc27ca" translate="yes" xml:space="preserve">
          <source>For simple updates, the CLI command &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; is all you need. Without additional arguments, &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; lists the updates that are available to you and provides recommended steps to update your application to the most current version.</source>
          <target state="translated">単純な更新の場合、CLIコマンド&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;で十分です。追加の引数がない場合、&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;は利用可能な更新をリストし、アプリケーションを最新バージョンに更新するための推奨手順を提供します。</target>
        </trans-unit>
        <trans-unit id="48fa4cabfb7a2025145527cba1031b87da1fa980" translate="yes" xml:space="preserve">
          <source>For step-by-step instructions on how to update to the latest Angular release (and leverage our automated migration tools to do so), use the interactive update guide at &lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.io&lt;/a&gt;.</source>
          <target state="translated">最新のAngularリリースに更新する方法（および自動移行ツールを活用して更新する方法）の詳細な手順については、&lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.ioの&lt;/a&gt;インタラクティブな更新ガイドを使用してください。</target>
        </trans-unit>
        <trans-unit id="898c1b8e7d6b6eb8479ce9ce66a1cae8125ad696" translate="yes" xml:space="preserve">
          <source>For step-by-step instructions on how to update to the latest Angular release, use the interactive update guide at &lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.io&lt;/a&gt;.</source>
          <target state="translated">最新のAngularリリースに更新する手順については、&lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.ioに&lt;/a&gt;あるインタラクティブな更新ガイドを使用してください。</target>
        </trans-unit>
        <trans-unit id="e7e0f32120f476265451193f4e74a60c10bf9309" translate="yes" xml:space="preserve">
          <source>For step-by-step instructions, continue with this section. If you can set it up on your own, skip ahead to &lt;a href=&quot;hierarchical-dependency-injection#modify-visibility&quot;&gt;Modifying service availability&lt;/a&gt;.</source>
          <target state="translated">詳しい手順については、このセクションに進んでください。自分で設定できる場合は、&lt;a href=&quot;hierarchical-dependency-injection#modify-visibility&quot;&gt;サービスの可用性の変更に&lt;/a&gt;進んでください。</target>
        </trans-unit>
        <trans-unit id="85bc8ff1d58fc1fdd8cbbba3a9815fc69137efd2" translate="yes" xml:space="preserve">
          <source>For submodules and lazy loaded submodules the module should be used as follows:</source>
          <target state="translated">サブモジュールやレイジーロードされたサブモジュールには、以下のようにモジュールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="90f37f88122e994465e881ad8b0b5425c391046f" translate="yes" xml:space="preserve">
          <source>For terminal input and output, put the content between &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tags, set the CSS class to &lt;code&gt;code-shell&lt;/code&gt;, and set the language attribute to &lt;code&gt;sh&lt;/code&gt; as in this example.</source>
          <target state="translated">端末の入出力の場合、この &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; に、コンテンツを&amp;lt;code-example&amp;gt;タグで囲み、CSSクラスを &lt;code&gt;code-shell&lt;/code&gt; に設定し、言語属性を &lt;code&gt;sh&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="376030cbe16b576d00e5145f2e5c14f0d5298340" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;@routeAnimation&lt;/code&gt; transitions to key off states, provide it with the &lt;code&gt;data&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is exposed as an &lt;code&gt;outlet&lt;/code&gt; template variable, so you bind a reference to the router outlet. This example uses a variable of &lt;code&gt;routerOutlet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@routeAnimation&lt;/code&gt; のオフ状態のキーへの遷移、とそれを提供し &lt;code&gt;data&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; をとして公開された &lt;code&gt;outlet&lt;/code&gt; ルータのコンセントへの参照をバインドするので、テンプレート変数。この例では、 &lt;code&gt;routerOutlet&lt;/code&gt; の変数を使用しています。</target>
        </trans-unit>
        <trans-unit id="67f3b4a3f79c70fd90d2e8b510bd8b8154ea4632" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;@routeAnimation&lt;/code&gt; transitions to key off states, you'll need to provide it with the &lt;code&gt;data&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is exposed as an &lt;code&gt;outlet&lt;/code&gt; template variable, so you bind a reference to the router outlet. A variable of &lt;code&gt;routerOutlet&lt;/code&gt; is an ideal choice.</source>
          <target state="translated">&lt;code&gt;@routeAnimation&lt;/code&gt; のキーをオフ状態に遷移し、あなたがそれを提供する必要があります &lt;code&gt;data&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; をとして公開された &lt;code&gt;outlet&lt;/code&gt; ルータのコンセントへの参照をバインドするので、テンプレート変数。 &lt;code&gt;routerOutlet&lt;/code&gt; の変数は理想的な選択です。</target>
        </trans-unit>
        <trans-unit id="d28868014417fb01c0acf4d2adc0344d6a4f70c1" translate="yes" xml:space="preserve">
          <source>For the DOM this means using modern &lt;a href=&quot;https://w3c.github.io/webcomponents/spec/shadow/&quot;&gt;Shadow DOM&lt;/a&gt; and creating a ShadowRoot for Component's Host Element.</source>
          <target state="translated">DOMの場合、これは最新の&lt;a href=&quot;https://w3c.github.io/webcomponents/spec/shadow/&quot;&gt;Shadow DOM&lt;/a&gt;を使用し、コンポーネントのホスト要素のShadowRootを作成することを意味します。</target>
        </trans-unit>
        <trans-unit id="e5ae481bd22e6b320de4e085ee12b07ea1dc6599" translate="yes" xml:space="preserve">
          <source>For the HTML to be interpreted, bind it to an HTML property such as &lt;code&gt;innerHTML&lt;/code&gt;. But binding a value that an attacker might control into &lt;code&gt;innerHTML&lt;/code&gt; normally causes an XSS vulnerability. For example, code contained in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is executed:</source>
          <target state="translated">HTMLを解釈するには、それを &lt;code&gt;innerHTML&lt;/code&gt; などのHTMLプロパティにバインドします。ただし、攻撃者が制御する可能性のある値を &lt;code&gt;innerHTML&lt;/code&gt; にバインドすると、通常、XSSの脆弱性が発生します。たとえば、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグに含まれるコードが実行されます。</target>
        </trans-unit>
        <trans-unit id="24a71fc43d5b7fbd4911209fa7facf6b131f2bc1" translate="yes" xml:space="preserve">
          <source>For the PhoneCat app, we can install the necessary type definitions by running the following command:</source>
          <target state="translated">PhoneCatアプリの場合は、以下のコマンドを実行することで必要な型定義をインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="1a7d83dc6496a6d0ac88a4d647d71e5177d3d4c8" translate="yes" xml:space="preserve">
          <source>For the checkout process, users need to be able to submit the form data (their name and address). When the order is submitted, the form should reset and the cart should clear.</source>
          <target state="translated">チェックアウトのためには、ユーザーがフォームのデータ(名前と住所)を送信できるようにする必要があります。注文が送信されると、フォームはリセットされ、カートはクリアされるはずです。</target>
        </trans-unit>
        <trans-unit id="8e9ff0abe3354846a4deefb72e44db8e1daff1d2" translate="yes" xml:space="preserve">
          <source>For the checkout process, users need to submit their name and address. When they submit their order, the form should reset and the cart should clear.</source>
          <target state="translated">チェックアウトプロセスのために、ユーザーは自分の名前と住所を送信する必要があります。注文を送信すると、フォームがリセットされ、カートがクリアされます。</target>
        </trans-unit>
        <trans-unit id="e0609d80faf45de9bf263a0466a261fa7e511724" translate="yes" xml:space="preserve">
          <source>For the completed router app, see the  for the final source code.</source>
          <target state="translated">完成したルーターアプリについては、最終的なソースコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="783cec887aa0f06499c3a51fe1160be6c320bcee" translate="yes" xml:space="preserve">
          <source>For the component specs, you can mock out the &lt;code&gt;Phone&lt;/code&gt; service itself, and have it provide canned phone data. You use Angular's component unit testing APIs for both components.</source>
          <target state="translated">コンポーネントの仕様については、 &lt;code&gt;Phone&lt;/code&gt; サービス自体をモックアウトして、電話の定型データを提供することができます。Angularのコンポーネント単体テストAPIを両方のコンポーネントに使用します。</target>
        </trans-unit>
        <trans-unit id="f5ff113fbd1cbc6504a499782fa6ead9f4792b2e" translate="yes" xml:space="preserve">
          <source>For the example app used in NgModules-related topics, see the .</source>
          <target state="translated">NgModules関連のトピックで使用されている例のアプリについては、.NgModules関連のトピックを参照してください。</target>
        </trans-unit>
        <trans-unit id="d78c5c7228da73d53e133d40ca1802d017f6597e" translate="yes" xml:space="preserve">
          <source>For the final sample app using the provider that this page describes, see the live example.</source>
          <target state="translated">このページで説明するプロバイダを使用した最終的なサンプルアプリについては、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="27b235dc45afd6facbd3b5c02a18555412a410e6" translate="yes" xml:space="preserve">
          <source>For the final sample app with a feature module that this page describes, see the live example.</source>
          <target state="translated">このページで説明する機能モジュールを持つ最終的なサンプルアプリについては、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="4246d4ee6a09e032ca56da78e4f5689248f80123" translate="yes" xml:space="preserve">
          <source>For the final sample app with two lazy-loaded modules that this page describes, see the live example.</source>
          <target state="translated">このページで説明する2つのレイジーロードされたモジュールを持つ最終的なサンプルアプリについては、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="011abc43c1e79dde8618a68e913802e5d5ea7e13" translate="yes" xml:space="preserve">
          <source>For the following template HTML, a directive with an &lt;code&gt;input[type=text]&lt;/code&gt; selector, would be instantiated only on the &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">次のテンプレートHTMLの場合、 &lt;code&gt;input[type=text]&lt;/code&gt; セレクターを持つディレクティブは、 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 要素でのみインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="a49847962d6b00ebefae493d9c5a99b8fc8a1214" translate="yes" xml:space="preserve">
          <source>For the most part, you specify the modules in the same way you would for a regular app. Then, you use the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; helpers to let the two frameworks know about assets they can use from each other. This is known as &quot;upgrading&quot; and &quot;downgrading&quot;.</source>
          <target state="translated">ほとんどの場合、通常のアプリと同じ方法でモジュールを指定します。次に、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; ヘルパーを使用して、2つのフレームワークが相互に使用できるアセットについて通知します。これは「アップグレード」および「ダウングレード」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3621652a4036fadd7c8b6400eb8f40d09aabefb8" translate="yes" xml:space="preserve">
          <source>For the profile form, add two form control instances with the names &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;.</source>
          <target state="translated">プロファイルフォームの場合は、 &lt;code&gt;firstName&lt;/code&gt; および &lt;code&gt;lastName&lt;/code&gt; という名前の2つのフォームコントロールインスタンスを追加します。</target>
        </trans-unit>
        <trans-unit id="dc5e36aeebbe0344b14712c1ecb8297b3ef39916" translate="yes" xml:space="preserve">
          <source>For the purpose of this Getting Started guide, we have provided shipping data in &lt;code&gt;assets/shipping.json&lt;/code&gt;. You'll use this data to add shipping prices for items in the cart.</source>
          <target state="translated">この入門ガイドの目的のために、私たちは &lt;code&gt;assets/shipping.json&lt;/code&gt; で配送データを提供しています。このデータを使用して、カート内の商品の送料を追加します。</target>
        </trans-unit>
        <trans-unit id="8c9229b8fa26bd78232a9371294d26967a24811f" translate="yes" xml:space="preserve">
          <source>For the reasons &lt;a href=&quot;http#always-subscribe&quot;&gt;explained above&lt;/a&gt;, the caller (&lt;code&gt;HeroesComponent.update()&lt;/code&gt; in this case) must &lt;code&gt;subscribe()&lt;/code&gt; to the observable returned from the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; in order to initiate the request.</source>
          <target state="translated">&lt;a href=&quot;http#always-subscribe&quot;&gt;上記&lt;/a&gt;で説明した理由により、呼び出し元（この場合は &lt;code&gt;HeroesComponent.update()&lt;/code&gt; )は、リクエストを開始するために、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; から返されたオブザーバブルに &lt;code&gt;subscribe()&lt;/code&gt; する必要があります。</target>
        </trans-unit>
        <trans-unit id="f7526169f97cef44fd9d28453a2c4f92aa87dd28" translate="yes" xml:space="preserve">
          <source>For the sample app that the testing guides describe, see the &lt;span name=&quot;testing&quot;&gt;sample app&lt;/span&gt;.</source>
          <target state="translated">テストガイドが説明することをサンプルアプリについては、&lt;span name=&quot;testing&quot;&gt;サンプルアプリを&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="444c2bd4f3f3d5ec53c8e5e84869f66e9f86edb7" translate="yes" xml:space="preserve">
          <source>For the sample app that the testing guides describe, see the sample app.</source>
          <target state="translated">テストガイドに記載されているサンプルアプリについては、サンプルアプリを参照してください。</target>
        </trans-unit>
        <trans-unit id="a03da81bfe7bb158872f5168f532376828a894c4" translate="yes" xml:space="preserve">
          <source>For the sample app that this page describes, see the live example.</source>
          <target state="translated">このページで説明しているサンプルアプリについては、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="5aaeba71e2783e9ee1659df65aaa38fb1f3deaf4" translate="yes" xml:space="preserve">
          <source>For the sample app used in this topic, see the live example.</source>
          <target state="translated">このトピックで使用するサンプル アプリについては、ライブ サンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="68d620c3a6443b6cece35aadad712c05dcf3abe3" translate="yes" xml:space="preserve">
          <source>For the simplest deployment, create a production build and copy the output directory to a web server.</source>
          <target state="translated">最も簡単なデプロイでは、本番用のビルドを作成し、出力ディレクトリを Web サーバーにコピーします。</target>
        </trans-unit>
        <trans-unit id="5f463665c3fbe66638a2f525eaed7b4dd6b3ab80" translate="yes" xml:space="preserve">
          <source>For the tests featured in the testing guides, see &lt;span name=&quot;testing&quot;&gt;tests&lt;/span&gt;.</source>
          <target state="translated">検査ガイドで紹介テストについては、&lt;span name=&quot;testing&quot;&gt;テストを&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="63ae96609fab93d01d54d604802e8f62e8ffac68" translate="yes" xml:space="preserve">
          <source>For the tests features in the testing guides, see &lt;span name=&quot;testing&quot;&gt;tests&lt;/span&gt;.</source>
          <target state="translated">テストガイドのテスト機能については、&lt;span name=&quot;testing&quot;&gt;テストを&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="3edfb95514167d5a866779f9beeaeecb7dd96e8d" translate="yes" xml:space="preserve">
          <source>For the tests features in the testing guides, see tests.</source>
          <target state="translated">テストガイドのテスト機能については、テストを参照してください。</target>
        </trans-unit>
        <trans-unit id="6178140b72e1eb2891987094c1ff5dc3ae74a205" translate="yes" xml:space="preserve">
          <source>For these reasons, it is often wise to add a custom anchor explicitly, just above the heading or text to which it applies, using the special  syntax like this.</source>
          <target state="translated">これらの理由から、以下のような特殊な構文を使用して、カスタムアンカーを見出しやテキストのすぐ上に明示的に追加するのが賢明な場合が多いです。</target>
        </trans-unit>
        <trans-unit id="995de1a292785f871b9317fc5c47cd53dd4acfc9" translate="yes" xml:space="preserve">
          <source>For this example:</source>
          <target state="translated">この例では</target>
        </trans-unit>
        <trans-unit id="a770b911a46d350f3eb2b359435ba2cfd4ac37a5" translate="yes" xml:space="preserve">
          <source>For this reason, a pure pipe is preferable when you can live with the change detection strategy. When you can't, you &lt;em&gt;can&lt;/em&gt; use the impure pipe.</source>
          <target state="translated">このため、変更検出戦略に耐えられる場合は、純粋なパイプが推奨されます。できない場合&lt;em&gt;は&lt;/em&gt;、不純なパイプを使用&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ac37798a4a70e1f85210fd15db9c6dfee94ab938" translate="yes" xml:space="preserve">
          <source>For this reason, an app that depends on a library should only use TypeScript path mappings that point to the &lt;em&gt;built library&lt;/em&gt;. TypeScript path mappings should &lt;em&gt;not&lt;/em&gt; point to the library source &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">このため、ライブラリに依存するアプリでは、&lt;em&gt;ビルドされたライブラリ&lt;/em&gt;を指すTypeScriptパスマッピングのみを使用する必要があり&lt;em&gt;ます&lt;/em&gt;。TypeScriptパスマッピングは、ライブラリのソース &lt;code&gt;.ts&lt;/code&gt; ファイルを指してはなり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="dd652a08d07c569d08ac9b4f50521d84f4d549cb" translate="yes" xml:space="preserve">
          <source>For this to work, the next step is to add a component with a selector that matches &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これが機能するための次のステップは、 &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt; に一致するセレクターを備えたコンポーネントを追加することです。</target>
        </trans-unit>
        <trans-unit id="ad2d1061c30e5b7515108e951a1ae81de24c0d96" translate="yes" xml:space="preserve">
          <source>For two-way data binding to work, the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property must use the pattern, &lt;code&gt;inputChange&lt;/code&gt;, where &lt;code&gt;input&lt;/code&gt; is the name of the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property. For example, if the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property is &lt;code&gt;size&lt;/code&gt;, the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property must be &lt;code&gt;sizeChange&lt;/code&gt;.</source>
          <target state="translated">双方向のデータバインディングを機能させるには、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; プロパティでパターン &lt;code&gt;inputChange&lt;/code&gt; を使用する必要があります。ここで、 &lt;code&gt;input&lt;/code&gt; は &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティの名前です。たとえば、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティが &lt;code&gt;size&lt;/code&gt; の場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; プロパティは &lt;code&gt;sizeChange&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="73fd3829ac0294e631bc961c07b7af3f5fd156f7" translate="yes" xml:space="preserve">
          <source>For unit tests, on the other hand, more conversion work is needed. Effectively they need to be &lt;em&gt;upgraded&lt;/em&gt; along with the production code.</source>
          <target state="translated">一方、単体テストの場合、より多くの変換作業が必要です。効果的には、製品コードとともに&lt;em&gt;アップグレード&lt;/em&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="4db7aafcf80332b7971a6009a17f922fd8d2bbbc" translate="yes" xml:space="preserve">
          <source>For usage information, see the &lt;a href=&quot;../../guide/http&quot;&gt;HTTP Client&lt;/a&gt; guide.</source>
          <target state="translated">使用方法については、&lt;a href=&quot;../../guide/http&quot;&gt;HTTPクライアント&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="1462977c8cabafbedbb937df9ad22fe6ed4e2d10" translate="yes" xml:space="preserve">
          <source>For usage of the &lt;code&gt;$location&lt;/code&gt; service as a provider in AngularJS, you need to downgrade the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; using a factory provider.</source>
          <target state="translated">使用方法については &lt;code&gt;$location&lt;/code&gt; AngularJSでプロバイダーとしてのサービス、あなたはダウングレードする必要が &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; 工場出荷時のプロバイダを使用して。</target>
        </trans-unit>
        <trans-unit id="b3f008aa69c94844a642116e9f1207516b29be1f" translate="yes" xml:space="preserve">
          <source>For you, it was as simple as this:</source>
          <target state="translated">あなたにとっては、このようにシンプルなものでした。</target>
        </trans-unit>
        <trans-unit id="48369007d3f7f59614d092b1c684d61ba5812bc3" translate="yes" xml:space="preserve">
          <source>For your first test you'd like to see that the screen displays the default &lt;code&gt;title&lt;/code&gt;. Your instinct is to write a test that immediately inspects the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; like this:</source>
          <target state="translated">最初のテストでは、画面にデフォルトの &lt;code&gt;title&lt;/code&gt; 表示されることを確認します。あなたの本能は、次のように &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; をすぐに検査するテストを書くことです：</target>
        </trans-unit>
        <trans-unit id="84bc66cdec03cf10019b4d3fce1e3ba0e20a5db9" translate="yes" xml:space="preserve">
          <source>For zero minutes, use &lt;code&gt;=0 {just now}&lt;/code&gt;.</source>
          <target state="translated">ゼロ分間は、 &lt;code&gt;=0 {just now}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="1458e99654a53b5bd6ae889d0452297902af0238" translate="yes" xml:space="preserve">
          <source>Forcing update activation</source>
          <target state="translated">アップデートの強制起動</target>
        </trans-unit>
        <trans-unit id="a000f1d6f154430aec1ad171641e381159427eda" translate="yes" xml:space="preserve">
          <source>Foreign functions or foreign constants in decorator metadata aren't statically resolvable (previously, you could import a constant or function from another compilation unit, like a library, and use that constant/function in your &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; definition).</source>
          <target state="translated">デコレータメタデータ内の外部関数または外部定数は静的に解決できません（以前は、ライブラリなどの別のコンパイルユニットから定数または関数をインポートし、その定数/関数を &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 定義で使用できました）。</target>
        </trans-unit>
        <trans-unit id="80446347ede53cf9ce56b3d59fda4b5c96dc25c4" translate="yes" xml:space="preserve">
          <source>Form</source>
          <target state="translated">Form</target>
        </trans-unit>
        <trans-unit id="6382cef0237d5c54061c2f361e9006517f0b7f44" translate="yes" xml:space="preserve">
          <source>Form Validation</source>
          <target state="translated">フォームバリデーション</target>
        </trans-unit>
        <trans-unit id="146769b547ad6cb95714f43800543ead7973c7bf" translate="yes" xml:space="preserve">
          <source>Form control to be inserted</source>
          <target state="translated">挿入するフォームコントロール</target>
        </trans-unit>
        <trans-unit id="ed0b7e4ebdbf5c125742becabd5a2db41e89e569" translate="yes" xml:space="preserve">
          <source>Form groups can accept both individual form control instances and other form group instances as children. This makes composing complex form models easier to maintain and logically group together.</source>
          <target state="translated">フォームグループは、個々のフォームコントロールインスタンスと他のフォームグループインスタンスの両方を子として受け入れることができます。これにより、複雑なフォームモデルを構成することで、メンテナンスが容易になり、論理的にグループ化することが可能になります。</target>
        </trans-unit>
        <trans-unit id="9a99df86d8ac9ffe88f4613f651eda5610568463" translate="yes" xml:space="preserve">
          <source>Form model setup</source>
          <target state="translated">フォームモデルの設定</target>
        </trans-unit>
        <trans-unit id="82e5fa982def989184c51505fd97bf9a2e6ad3cb" translate="yes" xml:space="preserve">
          <source>Form validation</source>
          <target state="translated">フォームの検証</target>
        </trans-unit>
        <trans-unit id="e32408b710c40920e781a08aaca9b69a260d6587" translate="yes" xml:space="preserve">
          <source>Form with an &quot;else&quot; block:</source>
          <target state="translated">else&quot; ブロックを持つフォーム。</target>
        </trans-unit>
        <trans-unit id="b12e8bb8e45b01539bfe059fad4e261d8f0c71b1" translate="yes" xml:space="preserve">
          <source>Form with storing the value locally:</source>
          <target state="translated">値をローカルに格納するフォーム。</target>
        </trans-unit>
        <trans-unit id="d6d15ac567565a89023fa6dff1a7109f5e61d59f" translate="yes" xml:space="preserve">
          <source>FormArray</source>
          <target state="translated">FormArray</target>
        </trans-unit>
        <trans-unit id="5c7489c2f9f6c861666dccb71f6ef5a318df7f09" translate="yes" xml:space="preserve">
          <source>FormArrayName</source>
          <target state="translated">FormArrayName</target>
        </trans-unit>
        <trans-unit id="a42baa6a9386bdd8611f928ea9a5d31b72dc2b2b" translate="yes" xml:space="preserve">
          <source>FormBuilder</source>
          <target state="translated">FormBuilder</target>
        </trans-unit>
        <trans-unit id="c48570d473365cf20f35118d51c691a2a973524c" translate="yes" xml:space="preserve">
          <source>FormControl</source>
          <target state="translated">FormControl</target>
        </trans-unit>
        <trans-unit id="21f077472e97a2700808ebcc8cd132c6e46e9ae1" translate="yes" xml:space="preserve">
          <source>FormControlDirective</source>
          <target state="translated">FormControlDirective</target>
        </trans-unit>
        <trans-unit id="9f00fa931846ce0c0ca95b4c76b9bfb2d80e4468" translate="yes" xml:space="preserve">
          <source>FormControlName</source>
          <target state="translated">FormControlName</target>
        </trans-unit>
        <trans-unit id="b92b85002a3fb316a5c6e08beb73b6cb9ed9d64d" translate="yes" xml:space="preserve">
          <source>FormData</source>
          <target state="translated">FormData</target>
        </trans-unit>
        <trans-unit id="d8bcf98cf60814a8c981a2d4ffd031f8ba591b71" translate="yes" xml:space="preserve">
          <source>FormGroup</source>
          <target state="translated">FormGroup</target>
        </trans-unit>
        <trans-unit id="b9deca656b02855f2962b8f66879520ace29f55e" translate="yes" xml:space="preserve">
          <source>FormGroupDirective</source>
          <target state="translated">FormGroupDirective</target>
        </trans-unit>
        <trans-unit id="f828b0b5692e832a37851b5392baa6dd53876003" translate="yes" xml:space="preserve">
          <source>FormGroupName</source>
          <target state="translated">FormGroupName</target>
        </trans-unit>
        <trans-unit id="a6a71b4c40027f93241e30982b9b8c21ccd9aee4" translate="yes" xml:space="preserve">
          <source>FormStyle</source>
          <target state="translated">FormStyle</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="0efa5c3a008d06ef6e84cb41b5221d48099fada6" translate="yes" xml:space="preserve">
          <source>Format data based on locale</source>
          <target state="translated">ロケールに応じたデータのフォーマット</target>
        </trans-unit>
        <trans-unit id="a0a4f0c6ffae2cf866d03a20be2102e45690c4e4" translate="yes" xml:space="preserve">
          <source>Format data with &lt;a href=&quot;guide/glossary#pipe&quot;&gt;pipes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;guide/glossary#pipe&quot;&gt;パイプで&lt;/a&gt;データをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="5410c6e6876a80679571d0dd431c2d3614c4e1fe" translate="yes" xml:space="preserve">
          <source>Format data with pipes.</source>
          <target state="translated">パイプでデータをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="a82c3163ea3ab9e53fb2cea07cd209bfb937d3de" translate="yes" xml:space="preserve">
          <source>Format examples</source>
          <target state="translated">フォーマットの例</target>
        </trans-unit>
        <trans-unit id="5f36f8a07cc1c3fc9bf5fef6e3f1bd3bfb86750c" translate="yes" xml:space="preserve">
          <source>Format is now automatically detected.</source>
          <target state="translated">フォーマットが自動的に検出されるようになりました。</target>
        </trans-unit>
        <trans-unit id="0a417e8151c3f975cb0633ce28f1737ddf6bacd5" translate="yes" xml:space="preserve">
          <source>Format of the localization file specified with --i18n-file.</source>
          <target state="translated">i18n-file で指定したローカライズファイルのフォーマット。</target>
        </trans-unit>
        <trans-unit id="236ee28d7ad63387347cf6c2b65fd59bcf5b58cf" translate="yes" xml:space="preserve">
          <source>Format styles that can be used to represent numbers.</source>
          <target state="translated">数値を表すのに使用できるフォーマットスタイル。</target>
        </trans-unit>
        <trans-unit id="f172b365ccf025116d82b4f7a504e627b2edb8e6" translate="yes" xml:space="preserve">
          <source>Format with the &lt;code&gt;UppercasePipe&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UppercasePipe&lt;/code&gt; でフォーマットする</target>
        </trans-unit>
        <trans-unit id="01600078364b64c83d05a5a6206c3c8f79391107" translate="yes" xml:space="preserve">
          <source>FormatWidth</source>
          <target state="translated">FormatWidth</target>
        </trans-unit>
        <trans-unit id="bcfc7802aa17a6c06eab5b1aa2c8a01766456ca9" translate="yes" xml:space="preserve">
          <source>Formats a date according to locale rules.</source>
          <target state="translated">ロケールのルールにしたがって日付をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="4acd0cf15f92f92f95df3f7945cd8f3113d16855" translate="yes" xml:space="preserve">
          <source>Formats a date to a string based on the requested format.</source>
          <target state="translated">要求されたフォーマットに基づいて日付を文字列にフォーマットします。</target>
        </trans-unit>
        <trans-unit id="75b510aa38e971da727972aaa290425fde30cbce" translate="yes" xml:space="preserve">
          <source>Formats a date value according to locale rules.</source>
          <target state="translated">ロケールのルールに従って日付の値をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="dcc0bea5632acd34ea7e37c42c9e4c997c0b72fb" translate="yes" xml:space="preserve">
          <source>Formats a number as a percentage according to locale rules.</source>
          <target state="translated">ロケールのルールにしたがって数値をパーセンテージで整形します。</target>
        </trans-unit>
        <trans-unit id="d11a0509a30735bc923587e47e0a4df22da695b3" translate="yes" xml:space="preserve">
          <source>Formats a number as currency using locale rules.</source>
          <target state="translated">ロケールルールを用いて数値を通貨としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="edf61a61be57f17f5a7dc1ff5a46129550b4144a" translate="yes" xml:space="preserve">
          <source>Formats a number as currency.</source>
          <target state="translated">数値を通貨としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="17787cb5c737a01e87cd71d36456d99d98545c45" translate="yes" xml:space="preserve">
          <source>Formats a number as percentage according to locale rules.</source>
          <target state="translated">ロケールのルールにしたがって数値をパーセンテージで整形します。</target>
        </trans-unit>
        <trans-unit id="f3736d14cc407b274fccb3b7c52e94f74937e007" translate="yes" xml:space="preserve">
          <source>Formats a number as text, with group sizing, separator, and other parameters based on the locale.</source>
          <target state="translated">ロケールに応じたグループサイズや区切り文字などのパラメータを指定して、数値をテキストとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="69675ca3093ae5e95c7f23454bbb0ec2a3e3a132" translate="yes" xml:space="preserve">
          <source>Formats a number as text.</source>
          <target state="translated">数値をテキストとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="02f654c32c11b40155212923435510ae86ebdc1e" translate="yes" xml:space="preserve">
          <source>Formats a number as text. Group sizing and separator and other locale-specific configurations are based on the active locale.</source>
          <target state="translated">数値をテキストとしてフォーマットします。グループのサイズや区切り文字などのロケール固有の設定は、アクティブなロケールに基づいています。</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="5beb527fad1e82e9004c53827f16339c6c9f5b43" translate="yes" xml:space="preserve">
          <source>Forms Guide</source>
          <target state="translated">フォームガイド</target>
        </trans-unit>
        <trans-unit id="cdff93b15b8a002363dce9c9a11c05fd30b609f6" translate="yes" xml:space="preserve">
          <source>Forms Overview</source>
          <target state="translated">フォームの概要</target>
        </trans-unit>
        <trans-unit id="a9c444f62165660b6e9a88acef821c93bb49bf48" translate="yes" xml:space="preserve">
          <source>Forms are the mainstay of business applications. You use forms to log in, submit a help request, place an order, book a flight, schedule a meeting, and perform countless other data-entry tasks.</source>
          <target state="translated">フォームはビジネスアプリケーションの主役です。ログイン、ヘルプリクエストの提出、注文、フライトの予約、会議のスケジュール、その他数え切れないほどのデータ入力タスクを実行するためにフォームを使用します。</target>
        </trans-unit>
        <trans-unit id="f1c46cc3e74d7aea7e123bce2866a9a8bc8b0774" translate="yes" xml:space="preserve">
          <source>Forms in Angular</source>
          <target state="translated">Angularのフォーム</target>
        </trans-unit>
        <trans-unit id="c68f41278ff3096c2bfb80e5503ec3e9ec19c6b3" translate="yes" xml:space="preserve">
          <source>Forms in Angular build upon the standard HTML forms to help you create custom form controls and easy validation experiences. There are two parts to an Angular Reactive form: the objects that live in the component to store and manage the form, and the visualization of the form that lives in the template.</source>
          <target state="translated">Angularのフォームは標準的なHTMLフォームをベースに構築されており、カスタムフォームコントロールや簡単なバリデーションを作成するのに役立ちます。Angular Reactiveフォームには2つの部分があります:フォームを保存・管理するためのコンポーネント内に存在するオブジェクトと、テンプレート内に存在するフォームの可視化です。</target>
        </trans-unit>
        <trans-unit id="c2ae9db40f0327172734bd7302b687b3e865b6d2" translate="yes" xml:space="preserve">
          <source>Forms in Angular take the standard capabilities of the HTML based forms and add an orchestration layer to help with creating custom form controls, and to supply great validation experiences. There are two parts to an Angular Reactive form, the objects that live in the component to store and manage the form, and the visualization of the form that lives in the template.</source>
          <target state="translated">AngularのフォームはHTMLベースのフォームの標準的な機能を利用し、カスタムフォームコントロールの作成を支援するオーケストレーションレイヤーを追加し、優れたバリデーション体験を提供します。Angular Reactiveフォームには2つの部分があります。フォームを保存・管理するためのコンポーネント内に存在するオブジェクトと、テンプレート内に存在するフォームの可視化です。</target>
        </trans-unit>
        <trans-unit id="8bfa9fc0a9a03baa0daa74863ddc154739a752aa" translate="yes" xml:space="preserve">
          <source>Forms overview</source>
          <target state="translated">フォームの概要</target>
        </trans-unit>
        <trans-unit id="00461295921a07818856c11dd5512059cd0db094" translate="yes" xml:space="preserve">
          <source>Forms typically contain several related controls. Reactive forms provide two ways of grouping multiple related controls into a single input form.</source>
          <target state="translated">フォームは通常、複数の関連するコントロールを含んでいます。リアクティブフォームは、複数の関連するコントロールを 1 つの入力フォームにグループ化する 2 つの方法を提供します。</target>
        </trans-unit>
        <trans-unit id="cfc59f1b557be47a18693a789be4114527797625" translate="yes" xml:space="preserve">
          <source>FormsModule</source>
          <target state="translated">FormsModule</target>
        </trans-unit>
        <trans-unit id="c89b7d3941fc3c83eb78832d5c2130a06d3c2869" translate="yes" xml:space="preserve">
          <source>Fortunately you can name the directive property whatever you want &lt;em&gt;and&lt;/em&gt;&lt;strong&gt;&lt;em&gt;alias it&lt;/em&gt;&lt;/strong&gt; for binding purposes.</source>
          <target state="translated">幸いにも、あなたはディレクティブ好きな財産名前を付けることができます&lt;em&gt;し、&lt;/em&gt;&lt;strong&gt;&lt;em&gt;エイリアス、それを&lt;/em&gt;&lt;/strong&gt;結合の目的のために。</target>
        </trans-unit>
        <trans-unit id="fc50fc246cebf313b856e5560aea2e5c76c81e97" translate="yes" xml:space="preserve">
          <source>Fortunately, Angular data binding is on alert for dangerous HTML. In the above case, the HTML displays as is, and the Javascript does not execute. Angular &lt;strong&gt;does not&lt;/strong&gt; allow HTML with script tags to leak into the browser, neither with interpolation nor property binding.</source>
          <target state="translated">幸い、Angularデータバインディングは危険なHTMLに警戒しています。上記の場合、HTMLはそのまま表示され、Javascriptは実行されません。Angular &lt;strong&gt;は&lt;/strong&gt;、スクリプトタグを含むHTMLがブラウザーにリークすることを許可&lt;strong&gt;しません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a07f606617ee3fc1c4e971ad71d656467d623f5d" translate="yes" xml:space="preserve">
          <source>Fortunately, application routes have something in common: their URLs lack file extensions. (Data requests also lack extensions but they're easy to recognize because they always begin with &lt;code&gt;/api&lt;/code&gt;.) All static asset requests have a file extension (such as &lt;code&gt;main.js&lt;/code&gt; or &lt;code&gt;/node_modules/zone.js/bundles/zone.umd.js&lt;/code&gt;).</source>
          <target state="translated">幸いなことに、アプリケーションルートには共通点があります。それらのURLにはファイル拡張子がありません。（データリクエストにも拡張子がありませんが、常に &lt;code&gt;/api&lt;/code&gt; で始まるため、簡単に認識できます。）すべての静的アセットリクエストにはファイル拡張子が付いています（ &lt;code&gt;main.js&lt;/code&gt; や &lt;code&gt;/node_modules/zone.js/bundles/zone.umd.js&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5edd1f49279278a50cf582fe92a1aef0b8150884" translate="yes" xml:space="preserve">
          <source>Fortunately, application routes have something in common: their URLs lack file extensions. (Data requests also lack extensions but they're easy to recognize because they always begin with &lt;code&gt;/api&lt;/code&gt;.) All static asset requests have a file extension (such as &lt;code&gt;main.js&lt;/code&gt; or &lt;code&gt;/node_modules/zone.js/dist/zone.js&lt;/code&gt;).</source>
          <target state="translated">幸い、アプリケーションルートには共通点があります。URLにはファイル拡張子がありません。（データリクエストにも拡張子はありませんが、常に &lt;code&gt;/api&lt;/code&gt; で始まるため、簡単に認識できます。）すべての静的アセットリクエストには、ファイル拡張子（ &lt;code&gt;main.js&lt;/code&gt; または &lt;code&gt;/node_modules/zone.js/dist/zone.js&lt;/code&gt; など）があります。 。</target>
        </trans-unit>
        <trans-unit id="5f5660b64b3fe113ff7adc95059a5693c9cc2a5c" translate="yes" xml:space="preserve">
          <source>Fortunately, not in this case because the &lt;code&gt;DashboardComponent&lt;/code&gt; isn't doing much with the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">幸いにも、 &lt;code&gt;DashboardComponent&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; あまり機能していないため、このケースではありません</target>
        </trans-unit>
        <trans-unit id="5038837ff39c868388f0e163672ddf3b75700082" translate="yes" xml:space="preserve">
          <source>Fortunately, the &lt;code&gt;HeroDetailService&lt;/code&gt; delegates responsibility for remote data access to an injected &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">さいわい、 &lt;code&gt;HeroDetailService&lt;/code&gt; は、注入された &lt;code&gt;HeroService&lt;/code&gt; へのリモートデータアクセスの責任を委任します。</target>
        </trans-unit>
        <trans-unit id="2b969def5bb6104ef4a194be02d84f98a36368da" translate="yes" xml:space="preserve">
          <source>Fortunately, the &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; parameter parallels the metadata passed to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator which means you can also specify &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;imports&lt;/code&gt;.</source>
          <target state="translated">さいわい、 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; パラメータは、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータに渡されるメタデータに対応しています。つまり、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;imports&lt;/code&gt; も指定できます。</target>
        </trans-unit>
        <trans-unit id="c62305f0c948ffda49ef66afb9b325e802f97530" translate="yes" xml:space="preserve">
          <source>Fortunately, they aren't necessary. You don't have to add the lifecycle hook interfaces to directives and components to benefit from the hooks themselves.</source>
          <target state="translated">幸いなことに、それらは必要ありません。ライフサイクルフックのインターフェイスをディレクティブやコンポーネントに追加しなくても、フック自体の恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="a4b748d4794041a68748abf5ad74a88d7dc7a8fe" translate="yes" xml:space="preserve">
          <source>Forward references to directive inputs accessed through local refs are no longer supported by default. &lt;a href=&quot;ivy-compatibility-examples#forward-refs-directive-inputs&quot;&gt;details&lt;/a&gt;</source>
          <target state="translated">ローカル参照を介してアクセスされるディレクティブ入力への前方参照は、デフォルトではサポートされなくなりました。&lt;a href=&quot;ivy-compatibility-examples#forward-refs-directive-inputs&quot;&gt;詳細&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="28be72c0280bcb5dc5b4d0778e06341a7abea5c2" translate="yes" xml:space="preserve">
          <source>ForwardRefFn</source>
          <target state="translated">ForwardRefFn</target>
        </trans-unit>
        <trans-unit id="9fdaca9c4db5020ff21787484f2485fd9701bd4a" translate="yes" xml:space="preserve">
          <source>Fourth step of the Tour of Heroes example application. For more information, see &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Add services&lt;/a&gt;.</source>
          <target state="translated">Tour ofHeroesサンプルアプリケーションの4番目のステップ。詳細については、「&lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;サービスの追加&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="6c9307be2052fd5a8a74b5213f3df047b9d426a0" translate="yes" xml:space="preserve">
          <source>Fractional seconds</source>
          <target state="translated">小数秒</target>
        </trans-unit>
        <trans-unit id="fb001b2c292ad2f619c8caf6e0ac8afd191aaa76" translate="yes" xml:space="preserve">
          <source>Framework</source>
          <target state="translated">Framework</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="bc0a142e1e515867de810b2442244936f418403f" translate="yes" xml:space="preserve">
          <source>Frequently Used Modules</source>
          <target state="translated">よく使われるモジュール</target>
        </trans-unit>
        <trans-unit id="45700db79c0283e8f1f4c60a04e2cddc1c81ced5" translate="yes" xml:space="preserve">
          <source>Frequently-used modules</source>
          <target state="translated">よく使うモジュール</target>
        </trans-unit>
        <trans-unit id="6006b6792fc35ff7614e5fa895078e4f0a6dfd7c" translate="yes" xml:space="preserve">
          <source>Fri Apr 15 1988 00:00:00 GMT-0700 (Pacific Daylight Time)</source>
          <target state="translated">1988年4月15日(金)00:00:00:00 GMT-0700 (太平洋夏時間)</target>
        </trans-unit>
        <trans-unit id="4b3774c5d182edc52477fb17e7804e9b9c9ee37e" translate="yes" xml:space="preserve">
          <source>From &lt;em&gt;view-to-source&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ビュー&lt;/em&gt;から&lt;em&gt;ソースへ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="08041bec5f010c8965be9d6b65acb95c30a47b0b" translate="yes" xml:space="preserve">
          <source>From a terminal window, navigate to the directory containing your application.</source>
          <target state="translated">ターミナルウィンドウから、アプリケーションを含むディレクトリに移動します。</target>
        </trans-unit>
        <trans-unit id="db63bccaf8113fab5205af56d973f3b49919eb47" translate="yes" xml:space="preserve">
          <source>From the &lt;code&gt;ContainerComponent&lt;/code&gt;, this will not work:</source>
          <target state="translated">&lt;code&gt;ContainerComponent&lt;/code&gt; から、これは機能しません：</target>
        </trans-unit>
        <trans-unit id="a16913cd9f3c0db7df4d7d9f3bf7fd21aa09266a" translate="yes" xml:space="preserve">
          <source>From the &lt;em&gt;source-to-view&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ソース&lt;/em&gt;から&lt;em&gt;ビューまで&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6bb6a53b96740b32297c3c9e26cbdae1ffc3e003" translate="yes" xml:space="preserve">
          <source>From the perspective of the router, the router never &quot;goes back&quot;. When the user clicks on the back button in the browser, a new navigation ID is created.</source>
          <target state="translated">ルーターから見ても「戻る」ことはありません。ユーザーがブラウザで戻るボタンをクリックすると、新しいナビゲーションIDが作成されます。</target>
        </trans-unit>
        <trans-unit id="b8fd592e76623b1bd29c81a0d0021b540794543a" translate="yes" xml:space="preserve">
          <source>From the root of your workspace, run the &lt;code&gt;ng build&lt;/code&gt; command for your library.</source>
          <target state="translated">ワークスペースのルートから、ライブラリの &lt;code&gt;ng build&lt;/code&gt; コマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="902396c7d0d48a1b68d4e346f888f5d13b8a30dc" translate="yes" xml:space="preserve">
          <source>From the terminal, create a new component, &lt;code&gt;PageNotFound&lt;/code&gt;.</source>
          <target state="translated">ターミナルから、新しいコンポーネント &lt;code&gt;PageNotFound&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="dff6fc31c15b70198c596f7b87cdb4ab4c3aa842" translate="yes" xml:space="preserve">
          <source>From the terminal, install the Angular CLI globally with:</source>
          <target state="translated">ターミナルから、Angular CLIをグローバルにインストールします。</target>
        </trans-unit>
        <trans-unit id="09b23d52d687ddf5ec82eb8d6ceac90f4cfce115" translate="yes" xml:space="preserve">
          <source>From the test root component's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; returned by &lt;code&gt;fixture.debugElement&lt;/code&gt;, you can walk (and query) the fixture's entire element and component subtrees.</source>
          <target state="translated">テストルートコンポーネントのから &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; によって返さ &lt;code&gt;fixture.debugElement&lt;/code&gt; 、あなたが歩く（およびクエリ）することができますフィクスチャの全要素およびコンポーネントのサブツリー。</target>
        </trans-unit>
        <trans-unit id="f4fc4957021d79edfdc1944068e27562a5e7500f" translate="yes" xml:space="preserve">
          <source>From there you replace the &lt;code&gt;/src&lt;/code&gt; folder with the one from your &lt;code&gt;StackBlitz&lt;/code&gt; download, and then perform a build.</source>
          <target state="translated">そこから &lt;code&gt;/src&lt;/code&gt; フォルダーを &lt;code&gt;StackBlitz&lt;/code&gt; ダウンロードのフォルダーに置き換え、ビルドを実行します。</target>
        </trans-unit>
        <trans-unit id="c1b29708a9ee747e9a9d3071434b524b09310f1a" translate="yes" xml:space="preserve">
          <source>From this base you can derive two new classes in &lt;code&gt;TextboxQuestion&lt;/code&gt; and &lt;code&gt;DropdownQuestion&lt;/code&gt; that represent textbox and dropdown questions. The idea is that the form will be bound to specific question types and render the appropriate controls dynamically.</source>
          <target state="translated">このベースから、 &lt;code&gt;TextboxQuestion&lt;/code&gt; と &lt;code&gt;DropdownQuestion&lt;/code&gt; で、テキストボックスとドロップダウンの質問を表す2つの新しいクラスを派生できます。アイデアは、フォームが特定の質問タイプにバインドされ、適切なコントロールを動的にレンダリングすることです。</target>
        </trans-unit>
        <trans-unit id="31dc4923cac0f8a6b53f683f8019b2a2477098d9" translate="yes" xml:space="preserve">
          <source>From this base, the example derives two new classes, &lt;code&gt;TextboxQuestion&lt;/code&gt; and &lt;code&gt;DropdownQuestion&lt;/code&gt;, that represent different control types. When you create the form template in the next step, you will instantiate these specific question types in order to render the appropriate controls dynamically.</source>
          <target state="translated">このベースから、この例では、異なるコントロールタイプを表す2つの新しいクラス &lt;code&gt;TextboxQuestion&lt;/code&gt; と &lt;code&gt;DropdownQuestion&lt;/code&gt; を導出しています。次のステップでフォームテンプレートを作成するときは、適切なコントロールを動的にレンダリングするために、これらの特定の質問タイプをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="50e0c37a7210e277623484289b971d913b2730f5" translate="yes" xml:space="preserve">
          <source>From time to time you'll have to step away from markdown and write a portion of the document in HTML. Markdown allows you to mix HTML and markdown in the same document.</source>
          <target state="translated">時々、markdownから離れて、ドキュメントの一部をHTMLで書かなければならないことがあります。Markdownを使用すると、同じドキュメントにHTMLとmarkdownを混在させることができます。</target>
        </trans-unit>
        <trans-unit id="57fea2d45df20aae338d3176c931b640d3217b50" translate="yes" xml:space="preserve">
          <source>From v11 the default code will be extracted from the locale data given by &lt;code&gt;LOCAL_ID&lt;/code&gt;, rather than &lt;code&gt;USD&lt;/code&gt;.</source>
          <target state="translated">v11以降、デフォルトのコードは、 &lt;code&gt;USD&lt;/code&gt; ではなく &lt;code&gt;LOCAL_ID&lt;/code&gt; で指定されたロケールデータから抽出されます。</target>
        </trans-unit>
        <trans-unit id="3a0364949a247bfa79bae0c5fe50973ba2b805cb" translate="yes" xml:space="preserve">
          <source>From your code editor, open the &lt;code&gt;app.component.html&lt;/code&gt; file.</source>
          <target state="translated">コードエディタから、 &lt;code&gt;app.component.html&lt;/code&gt; ファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="0f01b20779a563accb1012d1eb4c02e244cc9511" translate="yes" xml:space="preserve">
          <source>From your code editor, open the &lt;code&gt;app.module.ts&lt;/code&gt; file.</source>
          <target state="translated">コードエディタから、 &lt;code&gt;app.module.ts&lt;/code&gt; ファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="75a5d17678e2c1d7e94811e770e0ab435e3dd83f" translate="yes" xml:space="preserve">
          <source>From your code editor, open the &lt;code&gt;page-not-found.component.html&lt;/code&gt; file and replace its contents with the following HTML.</source>
          <target state="translated">コードエディタから、 &lt;code&gt;page-not-found.component.html&lt;/code&gt; ファイルを開き、その内容を次のHTMLに置き換えます。</target>
        </trans-unit>
        <trans-unit id="996b9596c59f32415a34cb9bc9cb466dae17e40a" translate="yes" xml:space="preserve">
          <source>From your terminal, navigate to the &lt;code&gt;angular-router-sample&lt;/code&gt; directory.</source>
          <target state="translated">ターミナルから、 &lt;code&gt;angular-router-sample&lt;/code&gt; ディレクトリに移動します。</target>
        </trans-unit>
        <trans-unit id="9f8099366c879f236d5bd3d85697f3c2e6387914" translate="yes" xml:space="preserve">
          <source>Full documentation for the Bazel CLI is at &lt;a href=&quot;https://docs.bazel.build/versions/master/command-line-reference.html&quot;&gt;https://docs.bazel.build/versions/master/command-line-reference.html&lt;/a&gt;.</source>
          <target state="translated">Bazel CLIの完全なドキュメントは&lt;a href=&quot;https://docs.bazel.build/versions/master/command-line-reference.html&quot;&gt;https://docs.bazel.build/versions/master/command-line-reference.htmlにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f2182c243ca64f8f4320ef356143bb890538d790" translate="yes" xml:space="preserve">
          <source>Full length for &lt;code&gt;en-US&lt;/code&gt;. For example: &quot;Sunday&quot;</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; の全長。例：「日曜日」</target>
        </trans-unit>
        <trans-unit id="fd0d33664d08abcfb2a99b91cb244f47ec9c6d8e" translate="yes" xml:space="preserve">
          <source>Full mode</source>
          <target state="translated">フルモード</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="307d58da1cb5c708acf50f78b41a528827c81cf8" translate="yes" xml:space="preserve">
          <source>Function calls</source>
          <target state="translated">関数呼び出し</target>
        </trans-unit>
        <trans-unit id="f0182dfcd6d20b80a09f2cb0997dc7e70a92ccba" translate="yes" xml:space="preserve">
          <source>Function calls are not supported</source>
          <target state="translated">関数呼び出しはサポートされていません</target>
        </trans-unit>
        <trans-unit id="d1b389a67b88dc11d3ca8a7606a8511ef745c99b" translate="yes" xml:space="preserve">
          <source>Function name</source>
          <target state="translated">機能名</target>
        </trans-unit>
        <trans-unit id="6de035f278c24f6b9cbb33875bc923585ab1c8d2" translate="yes" xml:space="preserve">
          <source>Function that is called by the forms API when the control status changes to or from 'DISABLED'. Depending on the status, it enables or disables the appropriate DOM element.</source>
          <target state="translated">コントロールの状態が 'DISABLED' から 'DISABLED' に変化したとき、フォーム API から呼び出される関数です。ステータスに応じて、適切な DOM 要素を有効化または無効化します。</target>
        </trans-unit>
        <trans-unit id="accace0a2c1dc76b9b0e688d8f7b2f83d65616ca" translate="yes" xml:space="preserve">
          <source>Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.</source>
          <target state="translated">HammerJSをロードする関数で、HammerJSがロードされると解決されたプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="cbb7a8ad94a0350d71d5dbacb482d18f9ec80fed" translate="yes" xml:space="preserve">
          <source>Functions and static method calls</source>
          <target state="translated">関数と静的メソッドの呼び出し</target>
        </trans-unit>
        <trans-unit id="c5d47fe56e6eb1f3de07dc9b7e2e27df31984f6f" translate="yes" xml:space="preserve">
          <source>Functions that control complex animation sequences are as follows:</source>
          <target state="translated">複雑なアニメーションシーケンスを制御する関数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="26b2b7d43add5c4f4cdde3cc675c2c2d24a71f73" translate="yes" xml:space="preserve">
          <source>Fundamental concepts of &lt;a href=&quot;architecture&quot;&gt;Angular app design&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;architecture&quot;&gt;Angularアプリデザインの&lt;/a&gt;基本的な概念。</target>
        </trans-unit>
        <trans-unit id="052d8ad81d99f33b2eb06e6d194282b8675fb201" translate="yes" xml:space="preserve">
          <source>Fundamentals</source>
          <target state="translated">Fundamentals</target>
        </trans-unit>
        <trans-unit id="047ca54032a1756c098d3bc1a941a0ed8e583df8" translate="yes" xml:space="preserve">
          <source>Future</source>
          <target state="translated">Future</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="a398fa06f1c0d02f5674b15f6a6bd03d1fae4ae7" translate="yes" xml:space="preserve">
          <source>G (A)</source>
          <target state="translated">G(A</target>
        </trans-unit>
        <trans-unit id="eb8daa8e2d6659fa5c2723cc8e6125af24dfa1c0" translate="yes" xml:space="preserve">
          <source>G, GG &amp;amp; GGG</source>
          <target state="translated">G、GG、GGG</target>
        </trans-unit>
        <trans-unit id="6b290c8942cbc1d1d719ea8d88fc447035058289" translate="yes" xml:space="preserve">
          <source>GGG (AD)</source>
          <target state="translated">GGG(AD</target>
        </trans-unit>
        <trans-unit id="00375065763ad15e0a040210fcc6a75e14be67dc" translate="yes" xml:space="preserve">
          <source>GGGG</source>
          <target state="translated">GGGG</target>
        </trans-unit>
        <trans-unit id="76b1ada62fafb3b6a1d86653f4602df6c517c120" translate="yes" xml:space="preserve">
          <source>GGGG (Anno Domini)</source>
          <target state="translated">GGGG (Anno Domini)</target>
        </trans-unit>
        <trans-unit id="8999a576f1492a90a0fe026bc4748334d685b1c7" translate="yes" xml:space="preserve">
          <source>GGGGG</source>
          <target state="translated">GGGGG</target>
        </trans-unit>
        <trans-unit id="ac601f81f1c830bbc42a98a61bc4a806380671e2" translate="yes" xml:space="preserve">
          <source>GMT-08:00</source>
          <target state="translated">GMT-08:00</target>
        </trans-unit>
        <trans-unit id="e063740277299254fba81114eab6ab1778e43431" translate="yes" xml:space="preserve">
          <source>GMT-8</source>
          <target state="translated">GMT-8</target>
        </trans-unit>
        <trans-unit id="060ee72e55c0d15ccc4085e23e54c48f8dedf4bd" translate="yes" xml:space="preserve">
          <source>GMT-8:00</source>
          <target state="translated">GMT-8:00</target>
        </trans-unit>
        <trans-unit id="c6c6e52ab77299cfa656a1111cd062dc5500ef4e" translate="yes" xml:space="preserve">
          <source>Gathering and Viewing Usage Analytics</source>
          <target state="translated">利用状況分析の収集と閲覧</target>
        </trans-unit>
        <trans-unit id="90d988a4b5f5b91abe38d0cd410f91e09b49a39c" translate="yes" xml:space="preserve">
          <source>General Naming Guidelines</source>
          <target state="translated">一般的な命名ガイドライン</target>
        </trans-unit>
        <trans-unit id="11a0db60c7abcac6fa4027e7ca519ef589ef75c7" translate="yes" xml:space="preserve">
          <source>General examples</source>
          <target state="translated">一般的な例</target>
        </trans-unit>
        <trans-unit id="cba1a6e46e4708c3c4d2980a9394604ab2a693b2" translate="yes" xml:space="preserve">
          <source>Generally, provide services the whole app needs in the root module and scope services by providing them in lazy loaded modules.</source>
          <target state="translated">一般的には、アプリ全体が必要とするサービスをルートモジュールで提供し、サービスを遅延ロードしたモジュールで提供することでスコープサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="50b5959329e24939984178366e66dba05ca7ff3a" translate="yes" xml:space="preserve">
          <source>Generally, the Angular compiler generates a &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; for any component referenced in a template. However, there are no selector references in the templates for dynamically loaded components since they load at runtime.</source>
          <target state="translated">一般に、Angularコンパイラーは、テンプレートで参照される &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; を生成します。ただし、動的に読み込まれるコンポーネントは実行時に読み込まれるため、テンプレートにはセレクタ参照はありません。</target>
        </trans-unit>
        <trans-unit id="57e078d15b6b83870a971d124ae29a7bbe383a50" translate="yes" xml:space="preserve">
          <source>Generally, the practice of setting a variable or property to a data value. Within Angular, typically refers to &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;, which coordinates DOM object properties with data object properties.</source>
          <target state="translated">一般に、変数またはプロパティをデータ値に設定する方法。Angular内では、通常DOMオブジェクトプロパティとデータオブジェクトプロパティを調整する&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディングを&lt;/a&gt;指します。</target>
        </trans-unit>
        <trans-unit id="ba75bd19ec2c4ce6bebb850f18a34d24d2d66d57" translate="yes" xml:space="preserve">
          <source>Generally, use property binding over attribute binding as it is more intuitive (being a boolean value), has a shorter syntax, and is more performant.</source>
          <target state="translated">一般的には、属性バインディングよりもプロパティバインディングを使用した方が直感的で(ブーリアン値であること)、構文が短く、よりパフォーマンスが高いからです。</target>
        </trans-unit>
        <trans-unit id="0c6d01d451368b768446afecc65324c907fd398a" translate="yes" xml:space="preserve">
          <source>Generally, you'll only need &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; for providing services and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; for routing. However, understanding how &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; works to make sure a service is a singleton will inform your development at a deeper level.</source>
          <target state="translated">一般に、サービスを提供するために提供 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; れたものと、ルーティングのために &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; のみが必要です。ただし、サービスがシングルトンであることを確認するために &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; がどのように機能するかを理解することは、より深いレベルでの開発に通知します。</target>
        </trans-unit>
        <trans-unit id="0f6280a085e0816cc0933beedf9528e299a7a3a6" translate="yes" xml:space="preserve">
          <source>Generally, you'll only need &lt;code&gt;providedIn&lt;/code&gt; for providing services and &lt;code&gt;forRoot()&lt;/code&gt;/&lt;code&gt;forChild()&lt;/code&gt; for routing. However, understanding how &lt;code&gt;forRoot()&lt;/code&gt; works to make sure a service is a singleton will inform your development at a deeper level.</source>
          <target state="translated">通常、必要なの &lt;code&gt;providedIn&lt;/code&gt; サービスを提供するための &lt;code&gt;forRoot()&lt;/code&gt; と、ルーティングのためのforRoot（） / &lt;code&gt;forChild()&lt;/code&gt; だけです。ただし、 &lt;code&gt;forRoot()&lt;/code&gt; がどのように機能してサービスがシングルトンであることを確認するかを理解することで、より深いレベルで開発に情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="90047ef8527630e7936402eb0e7f57f3c99c3982" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;CrisisCenter&lt;/code&gt; component in the &lt;code&gt;crisis-center&lt;/code&gt; folder:</source>
          <target state="translated">生成 &lt;code&gt;CrisisCenter&lt;/code&gt; のコンポーネント &lt;code&gt;crisis-center&lt;/code&gt; フォルダを：</target>
        </trans-unit>
        <trans-unit id="084b51a7bff1022599f0c899ade452493ff127d6" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;CrisisDetailResolver&lt;/code&gt; service file within the &lt;code&gt;Crisis Center&lt;/code&gt; feature area.</source>
          <target state="translated">&lt;code&gt;Crisis Center&lt;/code&gt; 機能領域内に &lt;code&gt;CrisisDetailResolver&lt;/code&gt; サービスファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="4875f6ee183dd8ab4d4a463d44f7d6bdd971a900" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;Dialog&lt;/code&gt; service to handle user confirmation.</source>
          <target state="translated">ユーザー確認を処理する &lt;code&gt;Dialog&lt;/code&gt; サービスを生成します。</target>
        </trans-unit>
        <trans-unit id="5d7b10e4e6677ba9f77dc539ea07fd7d32f66bea" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;ProfileEditor&lt;/code&gt; component and import the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; classes from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">生成 &lt;code&gt;ProfileEditor&lt;/code&gt; のコンポーネントをインポートし、 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; からクラスを &lt;code&gt;@angular/forms&lt;/code&gt; パッケージ。</target>
        </trans-unit>
        <trans-unit id="19a139134434badc3bfeaf46524ef6fd9d5a0b63" translate="yes" xml:space="preserve">
          <source>Generate a &lt;em&gt;guard&lt;/em&gt; that checks for the presence of a &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method in a component&amp;mdash;any component.</source>
          <target state="translated">コンポーネント（任意のコンポーネント &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;（）メソッドが存在するかどうかをチェックする&lt;em&gt;ガード&lt;/em&gt;を生成します。</target>
        </trans-unit>
        <trans-unit id="48b27f5909440f72ac1abd21e856f98ec91f80dc" translate="yes" xml:space="preserve">
          <source>Generate a cart component, named &lt;code&gt;cart&lt;/code&gt;.</source>
          <target state="translated">カートの部品、名前の生成 &lt;code&gt;cart&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="badfdfac2001a819696c03a850d29cef9aa6422c" translate="yes" xml:space="preserve">
          <source>Generate a cart service.</source>
          <target state="translated">カートサービスを生成します。</target>
        </trans-unit>
        <trans-unit id="c99348b58236f56c88a04caf7f5cfe478c6053d9" translate="yes" xml:space="preserve">
          <source>Generate a component for the control.</source>
          <target state="translated">コントロールのコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="95c833d5a4c5983e9ec390bedbaf0762aba8b000" translate="yes" xml:space="preserve">
          <source>Generate a guard that checks for the presence of a &lt;code&gt;canDeactivate()&lt;/code&gt; method in a component&amp;mdash;any component.</source>
          <target state="translated">コンポーネント（任意のコンポーネント &lt;code&gt;canDeactivate()&lt;/code&gt; メソッドが存在するかどうかをチェックするガードを生成します。</target>
        </trans-unit>
        <trans-unit id="4c4530eafa50e9f2b08438bef12e54b3d95e15fe" translate="yes" xml:space="preserve">
          <source>Generate a new &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance and save it in the component.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを生成し、コンポーネントに保存します。</target>
        </trans-unit>
        <trans-unit id="8a8880c7a24fd864a1f83c3bbba3a7fab142006e" translate="yes" xml:space="preserve">
          <source>Generate a new &lt;code&gt;SelectivePreloadingStrategy&lt;/code&gt; service.</source>
          <target state="translated">新しい &lt;code&gt;SelectivePreloadingStrategy&lt;/code&gt; サービスを生成します。</target>
        </trans-unit>
        <trans-unit id="10929705c56473f7c00eec3a96223277b08f04e8" translate="yes" xml:space="preserve">
          <source>Generate a new component for product details. Give the component the name &lt;code&gt;product-details&lt;/code&gt;.</source>
          <target state="translated">製品詳細の新しいコンポーネントを生成します。コンポーネントに &lt;code&gt;product-details&lt;/code&gt; という名前を付けます。</target>
        </trans-unit>
        <trans-unit id="4ca63d5f33e5423d7c86025408ad0a44ef417e22" translate="yes" xml:space="preserve">
          <source>Generate a new component named &lt;code&gt;shipping&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shipping&lt;/code&gt; という名前の新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="6cf6a25679c333cc1e9c81a8f44d1a7e50841d1d" translate="yes" xml:space="preserve">
          <source>Generate a new component to compose the message.</source>
          <target state="translated">メッセージを構成する新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="51451a8e0a189a0e3626c7ca708b659e18662a1f" translate="yes" xml:space="preserve">
          <source>Generate a sample application to follow the walkthrough.</source>
          <target state="translated">ウォークスルーに沿ってサンプルアプリケーションを生成します。</target>
        </trans-unit>
        <trans-unit id="571c365efd86e7626a4b1b9eeab3b97a5d0eaaaf" translate="yes" xml:space="preserve">
          <source>Generate a sample application with the Angular CLI.</source>
          <target state="translated">Angular CLIでサンプルアプリケーションを生成します。</target>
        </trans-unit>
        <trans-unit id="ec28821df6c17d11f5af6c742d7512012444acd1" translate="yes" xml:space="preserve">
          <source>Generate an &lt;code&gt;AuthGuard&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;auth&lt;/code&gt; フォルダーに &lt;code&gt;AuthGuard&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="e568c5d158a4dd0a7bf902bc271eaba5725baedb" translate="yes" xml:space="preserve">
          <source>Generate an &lt;code&gt;admin&lt;/code&gt; folder with a feature module file and a routing configuration file.</source>
          <target state="translated">機能モジュールファイルとルーティング構成ファイルを含む &lt;code&gt;admin&lt;/code&gt; フォルダーを生成します。</target>
        </trans-unit>
        <trans-unit id="e69988b966cade7b28b364ef47c1fe985a06023d" translate="yes" xml:space="preserve">
          <source>Generate an app with routing enabled</source>
          <target state="translated">ルーティングを有効にしたアプリを生成する</target>
        </trans-unit>
        <trans-unit id="33ef6177ebd37dcf0963b49bfdbfe505823c93ca" translate="yes" xml:space="preserve">
          <source>Generate app versions for each locale</source>
          <target state="translated">ロケールごとにアプリのバージョンを生成</target>
        </trans-unit>
        <trans-unit id="0331cbf7ccde4c03c2309a29076033363b99e2de" translate="yes" xml:space="preserve">
          <source>Generate links for each phone</source>
          <target state="translated">各電話機のリンクを生成</target>
        </trans-unit>
        <trans-unit id="fa8f19621d7803cd2efd4572edbf815edb8e8cde" translate="yes" xml:space="preserve">
          <source>Generate the &lt;code&gt;CrisisList&lt;/code&gt; and &lt;code&gt;HeroList&lt;/code&gt; components so that the router has something to render.</source>
          <target state="translated">&lt;code&gt;CrisisList&lt;/code&gt; および &lt;code&gt;HeroList&lt;/code&gt; コンポーネントを生成して、ルーターにレンダリングするものがあるようにします。</target>
        </trans-unit>
        <trans-unit id="38e92ff7133dfc97972b0278b9c37d5608b4290b" translate="yes" xml:space="preserve">
          <source>Generate the class &lt;code&gt;src/app/in-memory-data.service.ts&lt;/code&gt; with the following command:</source>
          <target state="translated">次のコマンドを使用して、クラス &lt;code&gt;src/app/in-memory-data.service.ts&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="626ad04fb20bdfbc92db1558c44acd203ee09b06" translate="yes" xml:space="preserve">
          <source>Generate the form contents.</source>
          <target state="translated">フォームの内容を生成します。</target>
        </trans-unit>
        <trans-unit id="cd63ede340ee7d3bb4fe765dd65657bf31fab426" translate="yes" xml:space="preserve">
          <source>Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.</source>
          <target state="translated">webpack-bundle-analyzer」のようなツールを使って分析できる「stats.json」ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="c68d6290e060eea666b076a5aa5a84ecbf27fe7c" translate="yes" xml:space="preserve">
          <source>Generates a new basic app definition in the &quot;projects&quot; subfolder of the workspace.</source>
          <target state="translated">ワークスペースの &quot;プロジェクト&quot; サブフォルダに新しい基本アプリ定義を生成します。</target>
        </trans-unit>
        <trans-unit id="fa8d7f6f4eed1090704feca3332459e426dd6e10" translate="yes" xml:space="preserve">
          <source>Generates a new, generic enum definition for the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトのための新しい汎用列挙定義を生成します。</target>
        </trans-unit>
        <trans-unit id="0754d37d5e990728ee91f0ec18ef6955815d8d68" translate="yes" xml:space="preserve">
          <source>Generates a new, generic resolver definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトで、新しい汎用レゾルバ定義を生成します。</target>
        </trans-unit>
        <trans-unit id="ab848267d716e8a4bebfc6fc3df07a5bddaf3f06" translate="yes" xml:space="preserve">
          <source>Generates a new, generic route guard definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトで、新しい汎用ルートガード定義を生成します。</target>
        </trans-unit>
        <trans-unit id="ebc4b67cc162d00ec204096d82e460473d1c79ea" translate="yes" xml:space="preserve">
          <source>Generates a service worker config for production builds.</source>
          <target state="translated">本番ビルド用のサービスワーカー設定を生成します。</target>
        </trans-unit>
        <trans-unit id="86aaceaf2adaab13af57352592c0b404b5df3b21" translate="yes" xml:space="preserve">
          <source>Generates an app shell for running a server-side version of an app.</source>
          <target state="translated">サーバーサイドバージョンのアプリを実行するためのアプリシェルを生成します。</target>
        </trans-unit>
        <trans-unit id="56a5676209bef860c9fa9fc0c49f512bd152fcac" translate="yes" xml:space="preserve">
          <source>Generates and/or modifies files based on a schematic.</source>
          <target state="translated">回路図に基づいてファイルを生成、修正します。</target>
        </trans-unit>
        <trans-unit id="b062b8f1ffe2b49d3ab2ace012273f0104d17418" translate="yes" xml:space="preserve">
          <source>Generating a library with the Angular CLI automatically adds its path to the &lt;code&gt;tsconfig&lt;/code&gt; file. The Angular CLI uses the &lt;code&gt;tsconfig&lt;/code&gt; paths to tell the build system where to find the library.</source>
          <target state="translated">Angular CLIでライブラリを生成すると、そのパスが &lt;code&gt;tsconfig&lt;/code&gt; ファイルに自動的に追加されます。Angular CLIは &lt;code&gt;tsconfig&lt;/code&gt; パスを使用して、ビルドシステムにライブラリの場所を通知します。</target>
        </trans-unit>
        <trans-unit id="a6767451e36ba6ab61da1471da0d511ffe98e6b6" translate="yes" xml:space="preserve">
          <source>Generating code using schematics</source>
          <target state="translated">回路図を使ったコードの生成</target>
        </trans-unit>
        <trans-unit id="9435f311ca9bf5c895db9c0e1c87157165c85f6a" translate="yes" xml:space="preserve">
          <source>Generating form controls with FormBuilder</source>
          <target state="translated">FormBuilder でフォームコントロールを生成する</target>
        </trans-unit>
        <trans-unit id="cea5d53723bbebadfc8d0290ebf665734c7c2abe" translate="yes" xml:space="preserve">
          <source>Generation schematics</source>
          <target state="translated">生成回路図</target>
        </trans-unit>
        <trans-unit id="380e0d97ca6db455288de6ea75e1bcf1d6d656e1" translate="yes" xml:space="preserve">
          <source>Generation schematics are instructions for the &lt;code&gt;ng generate&lt;/code&gt; command. The documented sub-commands use the default Angular generation schematics, but you can specify a different schematic (in place of a sub-command) to generate an artifact defined in your library.</source>
          <target state="translated">生成回路図は、 &lt;code&gt;ng generate&lt;/code&gt; コマンドの指示です。文書化されたサブコマンドは、デフォルトのAngular生成回路図を使用しますが、（サブコマンドの代わりに）別の回路図を指定して、ライブラリで定義されたアーティファクトを生成できます。</target>
        </trans-unit>
        <trans-unit id="68af3db5ab5d29c452ca8f7fe938836faf14b003" translate="yes" xml:space="preserve">
          <source>Generic DOM APIs, such as &lt;code&gt;document.createElement()&lt;/code&gt; or &lt;code&gt;document.querySelector()&lt;/code&gt;, return an element type that is appropriate for the specified arguments. For example, calling &lt;code&gt;document.createElement('&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;')&lt;/code&gt; will return an &lt;code&gt;HTMLAnchorElement&lt;/code&gt;, which TypeScript knows has an &lt;code&gt;href&lt;/code&gt; property. Similarly, &lt;code&gt;document.createElement('div')&lt;/code&gt; will return an &lt;code&gt;HTMLDivElement&lt;/code&gt;, which TypeScript knows has no &lt;code&gt;href&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;document.createElement()&lt;/code&gt; や &lt;code&gt;document.querySelector()&lt;/code&gt; などの汎用DOM API は、指定された引数に適した要素タイプを返します。たとえば、 &lt;code&gt;document.createElement('&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;')&lt;/code&gt; を呼び出すと、 &lt;code&gt;HTMLAnchorElement&lt;/code&gt; が返されます。これは、TypeScriptが &lt;code&gt;href&lt;/code&gt; プロパティを持っていることがわかっています。同様に、 &lt;code&gt;document.createElement('div')&lt;/code&gt; は、TypeScriptが &lt;code&gt;href&lt;/code&gt; プロパティを持たないことを知っている &lt;code&gt;HTMLDivElement&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2a2c9c27abcc8eca0bd04fd68f06e1932e91ed15" translate="yes" xml:space="preserve">
          <source>Generic DOM APIs, such as &lt;code&gt;document.createElement()&lt;/code&gt; or &lt;code&gt;document.querySelector()&lt;/code&gt;, return an element type that is appropriate for the specified arguments. For example, calling &lt;code&gt;document.createElement('a')&lt;/code&gt; will return an &lt;code&gt;HTMLAnchorElement&lt;/code&gt;, which TypeScript knows has an &lt;code&gt;href&lt;/code&gt; property. Similarly, &lt;code&gt;document.createElement('div')&lt;/code&gt; will return an &lt;code&gt;HTMLDivElement&lt;/code&gt;, which TypeScript knows has no &lt;code&gt;href&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;document.createElement()&lt;/code&gt; や &lt;code&gt;document.querySelector()&lt;/code&gt; などの汎用DOM APIは、指定された引数に適した要素タイプを返します。たとえば、 &lt;code&gt;document.createElement('a')&lt;/code&gt; を呼び出すと、 &lt;code&gt;HTMLAnchorElement&lt;/code&gt; が返されます。これは、TypeScriptが &lt;code&gt;href&lt;/code&gt; プロパティを持っていることを認識しています。同様に、 &lt;code&gt;document.createElement('div')&lt;/code&gt; は &lt;code&gt;HTMLDivElement&lt;/code&gt; を返しますが、TypeScriptは &lt;code&gt;href&lt;/code&gt; プロパティがないことを認識しています。</target>
        </trans-unit>
        <trans-unit id="2d7dc0e436d9539f483e9a75feff826163b8b3c4" translate="yes" xml:space="preserve">
          <source>Generic selector that displays the string that matches the current value.</source>
          <target state="translated">現在の値に一致する文字列を表示する汎用セレクタです。</target>
        </trans-unit>
        <trans-unit id="8c7a9565584738b6d0e52ee69981c1788da06bc1" translate="yes" xml:space="preserve">
          <source>Get a list of component types registered to this application. This list is populated even before the component is created.</source>
          <target state="translated">このアプリケーションに登録されているコンポーネントタイプのリストを取得します。このリストは、コンポーネントが作成される前にも登録されています。</target>
        </trans-unit>
        <trans-unit id="ba71eb4fd90a686961b741cb833ffd4a54e02338" translate="yes" xml:space="preserve">
          <source>Get a list of components registered to this application.</source>
          <target state="translated">このアプリケーションに登録されているコンポーネントの一覧を取得します。</target>
        </trans-unit>
        <trans-unit id="b8ae68bbf676af7d75792ca7c88e455618f73678" translate="yes" xml:space="preserve">
          <source>Get a promise that resolves when the fixture is stable.</source>
          <target state="translated">フィクスチャが安定しているときに解決する約束を取得します。</target>
        </trans-unit>
        <trans-unit id="48f71941fbc082e5baabc9d6a22ffacc94a5e225" translate="yes" xml:space="preserve">
          <source>Get a promise that resolves when the ui state is stable following animations.</source>
          <target state="translated">アニメーションに続いて ui の状態が安定しているときに解決するプロミスを取得します。</target>
        </trans-unit>
        <trans-unit id="3ef6faa34773e978c631aa1e80c4c1df032de2f4" translate="yes" xml:space="preserve">
          <source>Get a testability hook associated with the application</source>
          <target state="translated">アプリケーションに関連付けられたテスト可能性フックを取得します</target>
        </trans-unit>
        <trans-unit id="11b5a80e416cf90b3962bd51ff1f7224173e22c7" translate="yes" xml:space="preserve">
          <source>Get all registered applications(root elements)</source>
          <target state="translated">登録されている全てのアプリケーション(ルート要素)を取得</target>
        </trans-unit>
        <trans-unit id="85c4a7809e2e093fc80138814b72ed55768463ff" translate="yes" xml:space="preserve">
          <source>Get all registered testabilities</source>
          <target state="translated">登録されているすべての試験可能性を取得する</target>
        </trans-unit>
        <trans-unit id="afd44cbc88b568ce4dc6a70a2d349015b773e647" translate="yes" xml:space="preserve">
          <source>Get data from a server</source>
          <target state="translated">サーバーからデータを取得する</target>
        </trans-unit>
        <trans-unit id="1ec968837a76ff8234b189b68d3ee3766251e92a" translate="yes" xml:space="preserve">
          <source>Get hero by id</source>
          <target state="translated">IDでヒーローをゲット</target>
        </trans-unit>
        <trans-unit id="c1355577bacd5acd927b269d302c2831ae4e0915" translate="yes" xml:space="preserve">
          <source>Get hero data</source>
          <target state="translated">ヒーローデータを取得</target>
        </trans-unit>
        <trans-unit id="5d5dde643594b9932dc428da3a787b7acb7f3a04" translate="yes" xml:space="preserve">
          <source>Get heroes with &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; でヒーローを獲得する</target>
        </trans-unit>
        <trans-unit id="09a7bb30075eafdbd90429b490369ebe14a764e4" translate="yes" xml:space="preserve">
          <source>Get injected services</source>
          <target state="translated">注入サービスを受ける</target>
        </trans-unit>
        <trans-unit id="131266c3e0d171880d06a0a24a19f06f7aa83966" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; at the given &lt;code&gt;index&lt;/code&gt; in the array.</source>
          <target state="translated">配列内の指定された &lt;code&gt;index&lt;/code&gt; にある &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="dd6bc06b4de90fcac5fde67fdc56d3e38702afe3" translate="yes" xml:space="preserve">
          <source>Get the XSRF token to use with an outgoing request.</source>
          <target state="translated">送信リクエストで使用する XSRF トークンを取得します。</target>
        </trans-unit>
        <trans-unit id="44f614b04f8a7d92f74885414a17f45799dd4575" translate="yes" xml:space="preserve">
          <source>Get the complete example code for the reactive and template-driven forms used here to illustrate form validation. Run the live example.</source>
          <target state="translated">ここで使用するリアクティブ フォームとテンプレート駆動型フォームの完全なサンプル コードを取得して、フォーム検証を説明します。ライブサンプルを実行します。</target>
        </trans-unit>
        <trans-unit id="e3da1c5459c7f2bceef1e65095d844c3b2bc904b" translate="yes" xml:space="preserve">
          <source>Get the number of pending requests</source>
          <target state="translated">保留中のリクエスト数を取得する</target>
        </trans-unit>
        <trans-unit id="24c85ef5faa8219f5fd24863a828f95a77b88997" translate="yes" xml:space="preserve">
          <source>Get the project configuration</source>
          <target state="translated">プロジェクトの設定を取得する</target>
        </trans-unit>
        <trans-unit id="e9d01545a58adde7a54d98c34d7e7ab8358d1c1b" translate="yes" xml:space="preserve">
          <source>Get the route that created it</source>
          <target state="translated">それを作成したルートを取得する</target>
        </trans-unit>
        <trans-unit id="9fd63aabfc07cc505e1b32d93e73e02ae71e179f" translate="yes" xml:space="preserve">
          <source>Get the title of the current HTML document.</source>
          <target state="translated">現在の HTML ドキュメントのタイトルを取得します。</target>
        </trans-unit>
        <trans-unit id="853d5cf0ddb8b0b63460f74da94f03814abcef8b" translate="yes" xml:space="preserve">
          <source>Get the value corresponding to a key. Return &lt;code&gt;defaultValue&lt;/code&gt; if key is not found.</source>
          <target state="translated">キーに対応する値を取得します。キーが見つからない場合は &lt;code&gt;defaultValue&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e633a889d343373bc7733d29c137bc6d6d19bbfe" translate="yes" xml:space="preserve">
          <source>Get user input from a template reference variable</source>
          <target state="translated">テンプレート参照変数からユーザ入力を取得する</target>
        </trans-unit>
        <trans-unit id="0eb96ff9664f97bce4773ae26b4ff46b6eeca582" translate="yes" xml:space="preserve">
          <source>Get user input from the $event object</source>
          <target state="translated">イベントオブジェクトからユーザーの入力を取得します</target>
        </trans-unit>
        <trans-unit id="b52d196c4acb500b8a1fce9427fea4967818a0d3" translate="yes" xml:space="preserve">
          <source>GetTestability</source>
          <target state="translated">GetTestability</target>
        </trans-unit>
        <trans-unit id="f3caee9190ed9adb6e55cf7ac6826119198008b4" translate="yes" xml:space="preserve">
          <source>Gets the current instance of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;. Usually unnecessary because the static class methods of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; class are typically sufficient. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance exposes a few rarely used members that are not available as static methods.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; の現在のインスタンスを取得します。通常、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; クラスの静的クラスメソッドで十分なので、通常は不要です。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インスタンスは、静的メソッドとして使用することはできませんいくつかのほとんど使われないメンバーを公開しています。</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="0c7990050a50ffe200ff6702af0ec26fd388eaa9" translate="yes" xml:space="preserve">
          <source>Getting Started Tutorial</source>
          <target state="translated">入門チュートリアル</target>
        </trans-unit>
        <trans-unit id="8763b134008e61a206a3cc2b040b464b4e2cf711" translate="yes" xml:space="preserve">
          <source>Getting Started assumes the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment. To learn how to export an app from StackBlitz to your local environment, skip ahead to the &lt;a href=&quot;start/deployment&quot;&gt;Deployment&lt;/a&gt; section.</source>
          <target state="translated">Getting Startedは&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;オンライン開発環境を想定しています。StackBlitzからローカル環境にアプリをエクスポートする方法については、&lt;a href=&quot;start/deployment&quot;&gt;デプロイメント&lt;/a&gt;セクションに進んでください。</target>
        </trans-unit>
        <trans-unit id="42f15af89ce6b5fe82800a2db148f3aa4efa31ef" translate="yes" xml:space="preserve">
          <source>Getting Started with Angular: Your First App</source>
          <target state="translated">Angularを始める。初めてのアプリ</target>
        </trans-unit>
        <trans-unit id="0ac5f60676cb5cfe60d16c31b4d7a48edc719d03" translate="yes" xml:space="preserve">
          <source>Getting error details</source>
          <target state="translated">エラーの詳細を取得する</target>
        </trans-unit>
        <trans-unit id="1c8b693c2abb7caf69dbccffcf1bf34248f8757f" translate="yes" xml:space="preserve">
          <source>Getting notified of &lt;em&gt;available&lt;/em&gt; updates. These are new versions of the app to be loaded if the page is refreshed.</source>
          <target state="translated">&lt;em&gt;利用可能な&lt;/em&gt;アップデートの通知を&lt;em&gt;受け取り&lt;/em&gt;ます。これらは、ページが更新された場合に読み込まれるアプリの新しいバージョンです。</target>
        </trans-unit>
        <trans-unit id="eff07e16ec59ae1e3afd8560950554feb087b28f" translate="yes" xml:space="preserve">
          <source>Getting notified of new releases</source>
          <target state="translated">新しいリリースの通知を受ける</target>
        </trans-unit>
        <trans-unit id="1156bdd0a2f15d9cd4bf28ddf6329c03307719ae" translate="yes" xml:space="preserve">
          <source>Getting notified of update &lt;em&gt;activation&lt;/em&gt;. This is when the service worker starts serving a new version of the app immediately.</source>
          <target state="translated">更新の&lt;em&gt;アクティブ化の&lt;/em&gt;通知を&lt;em&gt;受け取る&lt;/em&gt;。これは、Service Workerが新しいバージョンのアプリの提供をすぐに開始するときです。</target>
        </trans-unit>
        <trans-unit id="9281f2cd9f740159e93852cf38608061ec6e2923" translate="yes" xml:space="preserve">
          <source>Getting route information</source>
          <target state="translated">ルート情報の取得</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="b90e46f742d46766d3d528ea6574463b2e8defbc" translate="yes" xml:space="preserve">
          <source>Getting started application</source>
          <target state="translated">アプリケーションを開始する</target>
        </trans-unit>
        <trans-unit id="89b47d7c28d53716bbd6b58823bf77af959fa144" translate="yes" xml:space="preserve">
          <source>Getting started with a basic Angular app</source>
          <target state="translated">基本的なAngularアプリを始める</target>
        </trans-unit>
        <trans-unit id="58e950b388f2b51607668bd15dd44d766f8c8ea1" translate="yes" xml:space="preserve">
          <source>Getting started with service workers</source>
          <target state="translated">サービスワーカーの入門編</target>
        </trans-unit>
        <trans-unit id="5c1fd8bd19e93f683c985727a839dbc24e11a6e9" translate="yes" xml:space="preserve">
          <source>GitHub pages</source>
          <target state="translated">GitHub のページ</target>
        </trans-unit>
        <trans-unit id="879351c6d9b4176969123a28d55e3bc051885425" translate="yes" xml:space="preserve">
          <source>Give it a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property instead of a &lt;code&gt;children&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property takes a function that returns a promise using the browser's built-in syntax for lazy loading code using dynamic imports &lt;code&gt;import('...')&lt;/code&gt;. The path is the location of the &lt;code&gt;AdminModule&lt;/code&gt; (relative to the app root). After the code is requested and loaded, the &lt;code&gt;Promise&lt;/code&gt; resolves an object that contains the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, in this case the &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="translated">それを与える &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; プロパティの代わりに、 &lt;code&gt;children&lt;/code&gt; プロパティを。 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; のプロパティは、動的な輸入品を使用して、組み込みの構文遅延ロードコードのブラウザのを使用して戻っ約束がその関数とる &lt;code&gt;import('...')&lt;/code&gt; 。パスは、 &lt;code&gt;AdminModule&lt;/code&gt; の場所です（アプリルートからの相対）。コードが要求されて読み込まれた後、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を含むオブジェクト（この場合は &lt;code&gt;AdminModule&lt;/code&gt; )を解決します。</target>
        </trans-unit>
        <trans-unit id="3d8b06c73ef585ba0330c083a33a471f10ba12a4" translate="yes" xml:space="preserve">
          <source>Give it a &lt;code&gt;loadChildren&lt;/code&gt; property instead of a &lt;code&gt;children&lt;/code&gt; property. The &lt;code&gt;loadChildren&lt;/code&gt; property takes a function that returns a promise using the browser's built-in syntax for lazy loading code using dynamic imports &lt;code&gt;import('...')&lt;/code&gt;. The path is the location of the &lt;code&gt;AdminModule&lt;/code&gt; (relative to the app root). After the code is requested and loaded, the &lt;code&gt;Promise&lt;/code&gt; resolves an object that contains the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, in this case the &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="translated">それを与える &lt;code&gt;loadChildren&lt;/code&gt; プロパティの代わりに、 &lt;code&gt;children&lt;/code&gt; プロパティを。 &lt;code&gt;loadChildren&lt;/code&gt; のプロパティは、動的な輸入品を使用して、組み込みの構文遅延ロードコードのブラウザのを使用して戻っ約束がその関数とる &lt;code&gt;import('...')&lt;/code&gt; 。パスは、 &lt;code&gt;AdminModule&lt;/code&gt; の場所です（アプリのルートを基準にしています）。コードが要求されてロードされた後、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を含むオブジェクト（この場合は &lt;code&gt;AdminModule&lt;/code&gt; )を解決します。</target>
        </trans-unit>
        <trans-unit id="00800e550f2e87414dda167ff182d9d9eabf5ca1" translate="yes" xml:space="preserve">
          <source>Give the live example anchor a custom label and tooltip by setting the &lt;code&gt;title&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; 属性を設定して、ライブサンプルアンカーにカスタムラベルとツールチップを提供します。</target>
        </trans-unit>
        <trans-unit id="6839d82e03f5268d9a7cc97802db76c48c8cce6e" translate="yes" xml:space="preserve">
          <source>Given</source>
          <target state="translated">Given</target>
        </trans-unit>
        <trans-unit id="5a254402a587d421ea975a31c00ffa8957c729c5" translate="yes" xml:space="preserve">
          <source>Given a route configuration &lt;code&gt;[{ path: 'user/:name', component: UserCmp }]&lt;/code&gt;, the following creates a static link to the route: &lt;code&gt;&amp;lt;a &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">ルート構成 &lt;code&gt;[{ path: 'user/:name', component: UserCmp }]&lt;/code&gt; 与えられると、以下はルートへの静的リンクを作成します： &lt;code&gt;&amp;lt;a &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3f04582e73690e8309fe132096158ece581225b7" translate="yes" xml:space="preserve">
          <source>Given that this use case is relatively rare and special handling impacts application performance, we have deprecated it in v10. No replacement is planned for this deprecation.</source>
          <target state="translated">このユースケースは比較的稀であり、特殊な処理がアプリケーションのパフォーマンスに影響を与えることを考慮して、v10では非推奨としました。 この非推奨のための代替は予定されていません。</target>
        </trans-unit>
        <trans-unit id="d407a28bf26b4dade30f163a570d19e4c3992b48" translate="yes" xml:space="preserve">
          <source>Given the configuration above, when the browser URL for this application becomes &lt;code&gt;/heroes&lt;/code&gt;, the router matches that URL to the route path &lt;code&gt;/heroes&lt;/code&gt; and displays the &lt;code&gt;HeroListComponent&lt;/code&gt; as a sibling element to the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; that you've placed in the host component's template.</source>
          <target state="translated">上記の構成の場合、このアプリケーションのブラウザーURLが &lt;code&gt;/heroes&lt;/code&gt; になると、ルーターはそのURLをルートパス &lt;code&gt;/heroes&lt;/code&gt; に一致させ、ホストコンポーネントのテンプレートに配置した &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; の兄弟要素として &lt;code&gt;HeroListComponent&lt;/code&gt; を表示します。</target>
        </trans-unit>
        <trans-unit id="a5aa348026022d33eddd607db014bac87f921d1a" translate="yes" xml:space="preserve">
          <source>Given the following DOM structure:</source>
          <target state="translated">次のような DOM 構造があるとします。</target>
        </trans-unit>
        <trans-unit id="8868a65f6b530e81d17de3561e83d4a3f7803b25" translate="yes" xml:space="preserve">
          <source>Given the following example route, the router will lazy load the associated module on demand using the browser native import system.</source>
          <target state="translated">次の例のルートを指定すると、ブラウザネイティブのインポートシステムを使用して、ルータは関連するモジュールをオンデマンドで遅延ロードします。</target>
        </trans-unit>
        <trans-unit id="cd9ae9112239a7cf0db3bc111e0f8b2934f009e6" translate="yes" xml:space="preserve">
          <source>Globs of files to include, relative to workspace or project root. There are 2 special cases:</source>
          <target state="translated">ワークスペースまたはプロジェクトのルートからの相対的な、インクルードするファイルのグローバル。2つの特殊なケースがあります。</target>
        </trans-unit>
        <trans-unit id="d916a5822a35d3011d7f0297a340fb2299250c03" translate="yes" xml:space="preserve">
          <source>Globs to exclude from code coverage.</source>
          <target state="translated">コードカバレッジから除外するグロブ。</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="e3915ceb49c4c471e23a11783840fc00452afb0b" translate="yes" xml:space="preserve">
          <source>Go to definition</source>
          <target state="translated">定義へ</target>
        </trans-unit>
        <trans-unit id="044a0ddb42ed2445e5c494c3fac7abbfd02ce690" translate="yes" xml:space="preserve">
          <source>Go to the</source>
          <target state="translated">に移動します。</target>
        </trans-unit>
        <trans-unit id="b516f5d1cfcbe9ea408daa0114d4bf66a92c130b" translate="yes" xml:space="preserve">
          <source>Go to the &lt;code&gt;&amp;lt;lib-root&amp;gt;/schematics/my-service/&lt;/code&gt; folder.</source>
          <target state="translated">移動し &lt;code&gt;&amp;lt;lib-root&amp;gt;/schematics/my-service/&lt;/code&gt; フォルダ。</target>
        </trans-unit>
        <trans-unit id="e899859d236a817b6de8def24c888bb63a6c57f6" translate="yes" xml:space="preserve">
          <source>Go to the &lt;strong&gt;Network tab&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;[ネットワーク]タブに&lt;/strong&gt;移動し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="32954252eb2c7179519aa1ba797bdaa709312ce5" translate="yes" xml:space="preserve">
          <source>Go to the collection folder, install your npm dependencies, and open your new collection in your favorite editor to see the generated files. For example, if you are using VSCode:</source>
          <target state="translated">コレクションフォルダに移動し、npm依存関係をインストールし、生成されたファイルを見るために、お気に入りのエディタで新しいコレクションを開きます。例えば、VSCodeを使用している場合。</target>
        </trans-unit>
        <trans-unit id="3b81592b501bfa044e9f6a43275001ed154c5f39" translate="yes" xml:space="preserve">
          <source>Go to the workspace directory and launch the application.</source>
          <target state="translated">ワークスペースディレクトリに移動し、アプリケーションを起動します。</target>
        </trans-unit>
        <trans-unit id="664d0bc25c3d434ffaffbb6c6e437f0e9b1594b0" translate="yes" xml:space="preserve">
          <source>Go to the workspace folder (&lt;code&gt;my-app&lt;/code&gt;).</source>
          <target state="translated">ワークスペースフォルダー（ &lt;code&gt;my-app&lt;/code&gt; ）に移動します。</target>
        </trans-unit>
        <trans-unit id="6db6e2bfc84d579abc739b3d030ca7f64fb44ae9" translate="yes" xml:space="preserve">
          <source>Go undercover with these two spy hooks to discover when an element is initialized or destroyed.</source>
          <target state="translated">この2つのスパイフックを使って、要素が初期化されたときや破壊されたときに発見するために潜入捜査を行います。</target>
        </trans-unit>
        <trans-unit id="22e5dcc47a0ac764dc09b2d910699120c526df7a" translate="yes" xml:space="preserve">
          <source>Going forward, we will focus our efforts related to web workers around their primary use case of offloading CPU-intensive, non-critical work needed for initial rendering (such as in-memory search and image processing). Learn more in the &lt;a href=&quot;web-worker&quot;&gt;guide to Using Web Workers with the Angular CLI&lt;/a&gt;.</source>
          <target state="translated">今後は、Webワーカーに関連する取り組みを、初期レンダリングに必要なCPU集約的で重要ではない作業（インメモリ検索や画像処理など）のオフロードという主要なユースケースに集中させます。詳細については、&lt;a href=&quot;web-worker&quot;&gt;Angular CLIでのWebワーカーの使用ガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="11a15ba018ceec88b818afcf38c41b171d4ab615" translate="yes" xml:space="preserve">
          <source>Good animations intuitively call the user's attention to where it is needed.</source>
          <target state="translated">優れたアニメーションは、ユーザーの注意を必要な場所に直感的に呼びかけることができます。</target>
        </trans-unit>
        <trans-unit id="c8d03faec6d275f412f7e3b57f8c17879e0da4b5" translate="yes" xml:space="preserve">
          <source>Google, Bing, Facebook, Twitter, and other social media sites rely on web crawlers to index your application content and make that content searchable on the web. These web crawlers may be unable to navigate and index your highly interactive Angular application as a human user could do.</source>
          <target state="translated">Google、Bing、Facebook、Twitter、その他のソーシャルメディアサイトは、アプリケーションのコンテンツをインデックス化し、ウェブ上で検索可能なコンテンツにするためにウェブクローラーに依存しています。これらのウェブクローラーは、人間のユーザーができるような高度にインタラクティブなAngularアプリケーションをナビゲートしてインデックスを作成することができないかもしれません。</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes" xml:space="preserve">
          <source>Grammar</source>
          <target state="translated">Grammar</target>
        </trans-unit>
        <trans-unit id="c12060bafa9ab7b15b6ca3832d6af3230ce42f70" translate="yes" xml:space="preserve">
          <source>Group separator for currency values (fallback to &lt;code&gt;Group&lt;/code&gt;). Example: $2,345.67</source>
          <target state="translated">通貨値のグループセパレーター（ &lt;code&gt;Group&lt;/code&gt; へのフォールバック）。例：$ 2,345.67</target>
        </trans-unit>
        <trans-unit id="2770f72df0af3038ef1a0343ee52b5941837423e" translate="yes" xml:space="preserve">
          <source>Group sibling elements with &amp;lt;ng-container&amp;gt;</source>
          <target state="translated">&amp;lt;ng-container&amp;gt;で兄弟要素をグループ化する</target>
        </trans-unit>
        <trans-unit id="aa514f2ffcdeb3b9ada36d109590b2f755f4bd17" translate="yes" xml:space="preserve">
          <source>Group the nested form in the template.</source>
          <target state="translated">テンプレート内のネストされたフォームをグループ化します。</target>
        </trans-unit>
        <trans-unit id="74434544ea4ad6607f75706c9a1d9d5850e5f00b" translate="yes" xml:space="preserve">
          <source>Grouped animations are useful when a series of styles must be animated at different starting times and closed off at different ending times.</source>
          <target state="translated">グループ化されたアニメーションは、一連のスタイルを異なる開始時間でアニメーション化し、異なる終了時間で閉じなければならない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5a4358aa8c9827657281c95ebc1a61485d3b94c0" translate="yes" xml:space="preserve">
          <source>Grouping all custom events under this type ensures they will be handled and forwarded by all implementations of interceptors.</source>
          <target state="translated">すべてのカスタムイベントをこのタイプにグループ化することで、インターセプターのすべての実装で処理され、転送されることを保証します。</target>
        </trans-unit>
        <trans-unit id="022f8ed1b5baa1c6c383d3cd42ee431d41e6c665" translate="yes" xml:space="preserve">
          <source>Grouping form controls</source>
          <target state="translated">グループ化フォームの制御</target>
        </trans-unit>
        <trans-unit id="9ae241754a154ca19caabd604845bbd97a55ee45" translate="yes" xml:space="preserve">
          <source>Grouping separator, typically for thousands. For &lt;code&gt;en-US&lt;/code&gt;, the comma character. Example: 2&lt;code&gt;,&lt;/code&gt;345.67</source>
          <target state="translated">通常は数千のグループ化セパレータ。用 &lt;code&gt;en-US&lt;/code&gt; 、コンマ文字。例：2 &lt;code&gt;,&lt;/code&gt; 345.67</target>
        </trans-unit>
        <trans-unit id="6326b449098dfdd85370d4e7f92d36b7b17a3cdc" translate="yes" xml:space="preserve">
          <source>Guard against null</source>
          <target state="translated">ヌルを防ぐ</target>
        </trans-unit>
        <trans-unit id="ab5327438e6b149abb6275cce81dbe7458e8eca1" translate="yes" xml:space="preserve">
          <source>Guard the admin feature</source>
          <target state="translated">管理者機能をガードする</target>
        </trans-unit>
        <trans-unit id="67de3c63a9bd94b74bfc86944368ab7bcdf6d849" translate="yes" xml:space="preserve">
          <source>Guards</source>
          <target state="translated">Guards</target>
        </trans-unit>
        <trans-unit id="d37b7da1c8eb7bd5978035fc4081065ea96046b6" translate="yes" xml:space="preserve">
          <source>GuardsCheckEnd</source>
          <target state="translated">GuardsCheckEnd</target>
        </trans-unit>
        <trans-unit id="965b3bfde4f2655376c67aa3734795d0e8a8cc08" translate="yes" xml:space="preserve">
          <source>GuardsCheckStart</source>
          <target state="translated">GuardsCheckStart</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="4ac7a3e3bac944a26bbaf448ea2cfcf2565e9e00" translate="yes" xml:space="preserve">
          <source>Guide pages</source>
          <target state="translated">ガイドページ</target>
        </trans-unit>
        <trans-unit id="141d1d74d8a6b3e7a7f1418ef539a53ce746ef34" translate="yes" xml:space="preserve">
          <source>Guidelines</source>
          <target state="translated">Guidelines</target>
        </trans-unit>
        <trans-unit id="69b6078e8dd0f5fe92912dfaa975e257f326a1ad" translate="yes" xml:space="preserve">
          <source>Guidelines for creating NgModules</source>
          <target state="translated">NgModules作成のためのガイドライン</target>
        </trans-unit>
        <trans-unit id="6f2413a65c9297cdd43260f7f29f49c1d190ee16" translate="yes" xml:space="preserve">
          <source>Guides are rich in examples of working Angular code. Example code can be commands entered in a terminal window, a fragment of TypeScript or HTML, or an entire code file.</source>
          <target state="translated">ガイドにはAngularのコード例が豊富にあります。コード例はターミナルウィンドウに入力されたコマンド、TypeScriptやHTMLの断片、コードファイル全体などがあります。</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="36ba7465769b4ff0ab60fcd125dcc264416fb8e1" translate="yes" xml:space="preserve">
          <source>H (13)</source>
          <target state="translated">H (13)</target>
        </trans-unit>
        <trans-unit id="f411883d06b3723fb25fc201defabd4ea8ec9ca9" translate="yes" xml:space="preserve">
          <source>HAMMER_GESTURE_CONFIG</source>
          <target state="translated">HAMMER_GESTURE_CONFIG</target>
        </trans-unit>
        <trans-unit id="8a892694247fc243c4878ab48986c7e386dc9bbf" translate="yes" xml:space="preserve">
          <source>HAMMER_LOADER</source>
          <target state="translated">HAMMER_LOADER</target>
        </trans-unit>
        <trans-unit id="fc5d4b9117ba9e87388174aee4f4970bdfe8d066" translate="yes" xml:space="preserve">
          <source>HH</source>
          <target state="translated">HH</target>
        </trans-unit>
        <trans-unit id="f2a5ccfc6d4dc3ce20c15a7f6d6508a6af92aee9" translate="yes" xml:space="preserve">
          <source>HH (13)</source>
          <target state="translated">HH (13)</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="1bb1809c1d200915be81fd60b4b960599011f45e" translate="yes" xml:space="preserve">
          <source>HTML attribute key</source>
          <target state="translated">HTML属性キー</target>
        </trans-unit>
        <trans-unit id="07e975607a7803b33cacfc4d5f82151d2712eef5" translate="yes" xml:space="preserve">
          <source>HTML attribute vs. DOM property</source>
          <target state="translated">HTML 属性と DOM プロパティ</target>
        </trans-unit>
        <trans-unit id="14d89c14cd34020cbaa9b6f978f663507c862d40" translate="yes" xml:space="preserve">
          <source>HTML attributes such as &lt;code&gt;title&lt;/code&gt; include text that should be translated along with the rest of the displayed text in the template. The following example shows an image with a &lt;code&gt;title&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; などのHTML属性には、テンプレートに表示されている残りのテキストと一緒に翻訳する必要のあるテキストが含まれています。次の例は、 &lt;code&gt;title&lt;/code&gt; 属性を持つ画像を示しています。</target>
        </trans-unit>
        <trans-unit id="492f8eb8a6d365059df263e1a0ea62251a5d2784" translate="yes" xml:space="preserve">
          <source>HTML between component element tags.</source>
          <target state="translated">コンポーネント要素のタグ間のHTML。</target>
        </trans-unit>
        <trans-unit id="a28f9683020cbd43849f3983827dd44d9e423a2f" translate="yes" xml:space="preserve">
          <source>HTML constructed on the server is vulnerable to injection attacks. Injecting template code into an Angular application is the same as injecting executable code into the application: it gives the attacker full control over the application. To prevent this, use a templating language that automatically escapes values to prevent XSS vulnerabilities on the server. Don't generate Angular templates on the server side using a templating language; doing this carries a high risk of introducing template-injection vulnerabilities.</source>
          <target state="translated">サーバー上に構築されたHTMLはインジェクション攻撃に対して脆弱です。Angularアプリケーションにテンプレートコードを注入することは、アプリケーションに実行可能なコードを注入することと同じです。これを防ぐには、サーバー上のXSS脆弱性を防ぐために、値を自動的にエスケープするテンプレート言語を使用してください。テンプレート作成言語を使ってサーバ側で Angular テンプレートを生成しないでください。</target>
        </trans-unit>
        <trans-unit id="f3604a53d257e638a4136c7cb9f81c3eac396475" translate="yes" xml:space="preserve">
          <source>HTML in templates</source>
          <target state="translated">テンプレートのHTML</target>
        </trans-unit>
        <trans-unit id="e4e38933cb42317719499012ef3485fb636d8592" translate="yes" xml:space="preserve">
          <source>HTML is the language of the Angular template. Almost all HTML syntax is valid template syntax. The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element is a notable exception; it is forbidden, eliminating the risk of script injection attacks. In practice, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is ignored and a warning appears in the browser console. See the &lt;a href=&quot;security&quot;&gt;Security&lt;/a&gt; page for details.</source>
          <target state="translated">HTMLはAngularテンプレートの言語です。ほとんどすべてのHTML構文は有効なテンプレート構文です。 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素は、注目すべき例外です。これは禁止されており、スクリプトインジェクション攻撃のリスクを排除します。実際には、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; は無視され、ブラウザコンソールに警告が表示されます。詳細については、&lt;a href=&quot;security&quot;&gt;セキュリティ&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="2119c0b73a847c84cbc00c7495f27fba4e2595cf" translate="yes" xml:space="preserve">
          <source>HTML meta tag</source>
          <target state="translated">HTMLメタタグ</target>
        </trans-unit>
        <trans-unit id="b00deebf7bd53a2a4abc7db7e3692e4998497f3c" translate="yes" xml:space="preserve">
          <source>HTML5 URLs and the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt;</source>
          <target state="translated">HTML5のURLと &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="340a173a8095d43878d65264cab1c80c8a688b97" translate="yes" xml:space="preserve">
          <source>HTML5 URLs and the &lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</source>
          <target state="translated">HTML5 URLと&lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b12cfc00134093ccb48a5b7872f416c834e69064" translate="yes" xml:space="preserve">
          <source>HTML5 has a set of built-in attributes that you can use for native validation, including &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt;. You can take advantage of these optional attributes on your form input elements. Add the &lt;code&gt;required&lt;/code&gt; attribute to the &lt;code&gt;firstName&lt;/code&gt; input element.</source>
          <target state="translated">HTML5には、 &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; など、ネイティブの検証に使用できる一連の組み込み属性があります。フォーム入力要素でこれらのオプション属性を利用できます。 &lt;code&gt;required&lt;/code&gt; 属性を &lt;code&gt;firstName&lt;/code&gt; 入力要素に追加します。</target>
        </trans-unit>
        <trans-unit id="4b064c74e2d95ac6bbf994c38b1978dcda8c19b8" translate="yes" xml:space="preserve">
          <source>HTML5 style navigation is the router default. In the &lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategy and browser URL styles&lt;/a&gt; Appendix, learn why HTML5 style is preferred, how to adjust its behavior, and how to switch to the older hash (#) style, if necessary.</source>
          <target state="translated">HTML5スタイルのナビゲーションがルーターのデフォルトです。で&lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategyと、ブラウザのURLのスタイル&lt;/a&gt;付録、学ぶなぜHTML5のスタイルは、その動作を調整する方法が好ましい、とどのように必要に応じて、古いハッシュ（＃）スタイルに切り替えます。</target>
        </trans-unit>
        <trans-unit id="da1a62f1022990130bd18d54194c28a86fb20a83" translate="yes" xml:space="preserve">
          <source>HTML5 style navigation is the router default. In the &lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategy and browser URL styles&lt;/a&gt; section, learn why HTML5 style is preferable, how to adjust its behavior, and how to switch to the older hash (#) style, if necessary.</source>
          <target state="translated">HTML5スタイルのナビゲーションがルーターのデフォルトです。で&lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategyと、ブラウザのURLのスタイルの&lt;/a&gt;セクション、HTML5スタイルであることが好ましく、なぜ、どのようにその動作を調整するために、必要に応じてどのように、古いハッシュ（＃）スタイルに切り替えることを学びます。</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="26c5442778a84663ac39f3f58df571733d2d4e4e" translate="yes" xml:space="preserve">
          <source>HTTP Guide</source>
          <target state="translated">HTTPガイド</target>
        </trans-unit>
        <trans-unit id="fd91615c44820cfc2fae82595a3bc14b2eb0eaeb" translate="yes" xml:space="preserve">
          <source>HTTP Request Example</source>
          <target state="translated">HTTPリクエストの例</target>
        </trans-unit>
        <trans-unit id="2ee53c95b1d46b2119a03c49e611077033b4d0b3" translate="yes" xml:space="preserve">
          <source>HTTP headers</source>
          <target state="translated">HTTPヘッダ</target>
        </trans-unit>
        <trans-unit id="99a12a06813b55128f34a3ffcf4599fc8b574d15" translate="yes" xml:space="preserve">
          <source>HTTP interceptors</source>
          <target state="translated">HTTP インターセプター</target>
        </trans-unit>
        <trans-unit id="377c79e5335f24017fbabcfef2f280c264cb9026" translate="yes" xml:space="preserve">
          <source>HTTP is a request/response protocol. You make a request, it returns a single response.</source>
          <target state="translated">HTTPはリクエスト/レスポンスプロトコルです。リクエストを行うと、単一のレスポンスを返します。</target>
        </trans-unit>
        <trans-unit id="23c536246155df78480fbf53c197cd35d8be71a6" translate="yes" xml:space="preserve">
          <source>HTTP options</source>
          <target state="translated">HTTPオプション</target>
        </trans-unit>
        <trans-unit id="23854c0ee148c64157750f67dff9661df6ecf531" translate="yes" xml:space="preserve">
          <source>HTTP options.</source>
          <target state="translated">HTTPオプション。</target>
        </trans-unit>
        <trans-unit id="22c6da5fbbe1f2761b83f89519aa28322b6e37b1" translate="yes" xml:space="preserve">
          <source>HTTP requests are cancellable through the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">HTTPリクエストは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; メソッドを介してキャンセルできます。</target>
        </trans-unit>
        <trans-unit id="eafd2c320a66407933f095947309f861441c1c83" translate="yes" xml:space="preserve">
          <source>HTTP requests are cancellable through the &lt;code&gt;unsubscribe()&lt;/code&gt; method.</source>
          <target state="translated">HTTPリクエストは、 &lt;code&gt;unsubscribe()&lt;/code&gt; メソッドを介してキャンセルできます。</target>
        </trans-unit>
        <trans-unit id="8c21340afccc68e99a03b607490230cf7a0a69b9" translate="yes" xml:space="preserve">
          <source>HTTP-level vulnerabilities</source>
          <target state="translated">HTTPレベルの脆弱性</target>
        </trans-unit>
        <trans-unit id="491d5ca30c6cdaec0c9db018ec25d915b8026c94" translate="yes" xml:space="preserve">
          <source>HTTP_INTERCEPTORS</source>
          <target state="translated">HTTP_INTERCEPTORS</target>
        </trans-unit>
        <trans-unit id="23a1a53228fc2ea6cc40c7cd90fef4dabbd8264b" translate="yes" xml:space="preserve">
          <source>Had the navigation path been more dynamic, you could have bound to a template expression that returned an array of route link parameters (the &lt;em&gt;link parameters array&lt;/em&gt;). The router resolves that array into a complete URL.</source>
          <target state="translated">ナビゲーションパスがより動的であった場合、ルート&lt;em&gt;リンクパラメーターの配列&lt;/em&gt;（&lt;em&gt;リンクパラメーター配列&lt;/em&gt;）を返すテンプレート式にバインドできた可能性があり&lt;em&gt;ます&lt;/em&gt;。ルーターはその配列を完全なURLに解決します。</target>
        </trans-unit>
        <trans-unit id="c4ac11d900262c47968e899cb74d575171c9712a" translate="yes" xml:space="preserve">
          <source>Had the navigation path been more dynamic, you could have bound to a template expression that returned an array of route link parameters; that is, the &lt;a href=&quot;router#link-parameters-array&quot;&gt;link parameters array&lt;/a&gt;. The router resolves that array into a complete URL.</source>
          <target state="translated">ナビゲーションパスがより動的である場合は、ルートリンクパラメーターの配列を返すテンプレート式にバインドできたはずです。つまり、&lt;a href=&quot;router#link-parameters-array&quot;&gt;リンクパラメータ配列&lt;/a&gt;です。ルーターはその配列を完全なURLに解決します。</target>
        </trans-unit>
        <trans-unit id="e1776f9791d5bf9ef9c8da34a7ea4a43d8c3e3d6" translate="yes" xml:space="preserve">
          <source>Had the user clicked the &lt;em&gt;Update Hero&lt;/em&gt; button, the log would show another &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; and two more triplets of &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt;. Clearly these three hooks fire &lt;em&gt;often&lt;/em&gt;. Keep the logic in these hooks as lean as possible!</source>
          <target state="translated">持っていたユーザーがクリックした&lt;em&gt;アップデートヒーロー&lt;/em&gt;ログは別の表示されるでしょう、ボタンを &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; との2つのトリプレット &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; を。明らかに、これら3つのフックは&lt;em&gt;頻繁に&lt;/em&gt;発火します。これらのフックのロジックを可能な限り無駄にしないでください！</target>
        </trans-unit>
        <trans-unit id="5d542056a170d88c4cecc313d0273d1beaa4ef33" translate="yes" xml:space="preserve">
          <source>Had the user clicked the &lt;em&gt;Update Hero&lt;/em&gt; button, the log would show another &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; and two more triplets of &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt;. Notice that these three hooks fire &lt;em&gt;often&lt;/em&gt;, so it is important to keep their logic as lean as possible.</source>
          <target state="translated">持っていたユーザーがクリックした&lt;em&gt;アップデートヒーロー&lt;/em&gt;ログは別の表示されるでしょう、ボタンを &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; との2つのトリプレット &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; を。これらの3つのフックは&lt;em&gt;頻繁&lt;/em&gt;に起動するため、ロジックをできるだけスリムに保つことが重要です。</target>
        </trans-unit>
        <trans-unit id="2606db96e8f2465348fb29fccf7dd69fadcf053a" translate="yes" xml:space="preserve">
          <source>Had you clicked the browser's back button instead of the &quot;Back&quot; button, the app would have returned you to the heroes list as well. Angular app navigation updates the browser history as normal web navigation does.</source>
          <target state="translated">戻る」ボタンの代わりにブラウザの戻るボタンをクリックしていたら、アプリは同様にヒーローリストに戻っていたでしょう。Angularアプリのナビゲーションは、通常のウェブナビゲーションと同様にブラウザの履歴を更新します。</target>
        </trans-unit>
        <trans-unit id="38a4a5f9282f276ef3a418aa70cd927640922626" translate="yes" xml:space="preserve">
          <source>Had you clicked the browser's back button instead of the app's &quot;Back&quot; button, the app would have returned you to the heroes list as well. Angular app navigation updates the browser history as normal web navigation does.</source>
          <target state="translated">アプリの「戻る」ボタンの代わりにブラウザの「戻る」ボタンをクリックしていたら、アプリは同様にヒーローリストに戻っていたでしょう。Angularアプリのナビゲーションは、通常のWebナビゲーションと同様にブラウザの履歴を更新します。</target>
        </trans-unit>
        <trans-unit id="348fc37258d545bf3a421d6de72e333a89447b6c" translate="yes" xml:space="preserve">
          <source>HammerGestureConfig</source>
          <target state="translated">HammerGestureConfig</target>
        </trans-unit>
        <trans-unit id="bb0f6a5d72bec662bc0374235ee5abfdf7ab2f18" translate="yes" xml:space="preserve">
          <source>HammerJS support is opt-in through importing the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/hammermodule&quot;&gt;HammerModule&lt;/a&gt;&lt;/code&gt; (previously, it was always included in production bundles regardless of whether the app used HammerJS).</source>
          <target state="translated">HammerJSのサポートは、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/hammermodule&quot;&gt;HammerModule&lt;/a&gt;&lt;/code&gt; をインポートすることでオプトインされます（以前は、アプリがHammerJSを使用しているかどうかに関係なく、常に本番バンドルに含まれていました）。</target>
        </trans-unit>
        <trans-unit id="278772c1f5196a39c58fdaf97264e3b06704d03e" translate="yes" xml:space="preserve">
          <source>HammerLoader</source>
          <target state="translated">HammerLoader</target>
        </trans-unit>
        <trans-unit id="49c5a8494241c6031acf1f2618a43d45e40f2a49" translate="yes" xml:space="preserve">
          <source>HammerModule</source>
          <target state="translated">HammerModule</target>
        </trans-unit>
        <trans-unit id="6181e90bb0fd82d33cd517a4ebc3582df7a8674f" translate="yes" xml:space="preserve">
          <source>Handle form submission using the &lt;a href=&quot;../api/forms/ngform#properties&quot;&gt;&lt;code&gt;ngSubmit&lt;/code&gt;&lt;/a&gt; output property of the form.</source>
          <target state="translated">フォームの&lt;a href=&quot;../api/forms/ngform#properties&quot;&gt; &lt;code&gt;ngSubmit&lt;/code&gt; &lt;/a&gt;出力プロパティを使用してフォーム送信を処理します。</target>
        </trans-unit>
        <trans-unit id="2bf0de63fe2ec09c6656158b9fbf37134a390043" translate="yes" xml:space="preserve">
          <source>Handle form submission with &lt;em&gt;ngSubmit&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ngSubmitで&lt;/em&gt;フォーム&lt;em&gt;送信を&lt;/em&gt;処理し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1e58937a97796c16b6d90243e257adcf10584e50" translate="yes" xml:space="preserve">
          <source>Handle invalid routes with a &lt;code&gt;wildcard&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;wildcard&lt;/code&gt; ルートを使用して無効なルートを処理します。</target>
        </trans-unit>
        <trans-unit id="e3dc0c0c8644d4d571f10481d8b5c586e03e90d6" translate="yes" xml:space="preserve">
          <source>Handling alternative text.</source>
          <target state="translated">代替テキストを扱う。</target>
        </trans-unit>
        <trans-unit id="c3bc2ca9f7cb1e857ab64bff2f5bc27337f23d2c" translate="yes" xml:space="preserve">
          <source>Handling an unrecoverable state</source>
          <target state="translated">回復不可能な状態の処理</target>
        </trans-unit>
        <trans-unit id="c82d8a656c396e869b4091c1ac8417d288742397" translate="yes" xml:space="preserve">
          <source>Handling events</source>
          <target state="translated">イベントの取り扱い</target>
        </trans-unit>
        <trans-unit id="3b15f51080af6b0c1e1c13c38041ed942ea71ff5" translate="yes" xml:space="preserve">
          <source>Handling form submission by binding to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngSubmit&quot;&gt;NgForm.ngSubmit&lt;/a&gt;&lt;/code&gt; event property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngSubmit&quot;&gt;NgForm.ngSubmit&lt;/a&gt;&lt;/code&gt; イベントプロパティにバインドしてフォーム送信を処理します。</target>
        </trans-unit>
        <trans-unit id="3b174d793481bdfc1ae4cf7d834bac12612096ed" translate="yes" xml:space="preserve">
          <source>Handling interceptor events</source>
          <target state="translated">インターセプターイベントの処理</target>
        </trans-unit>
        <trans-unit id="831407a4d211313e01d26114b4d98077aa2e5a6b" translate="yes" xml:space="preserve">
          <source>Handling more than one request</source>
          <target state="translated">複数のリクエストに対応</target>
        </trans-unit>
        <trans-unit id="a86c39000e691d43e8402a56e57f52add8830778" translate="yes" xml:space="preserve">
          <source>Handling navigation requests</source>
          <target state="translated">ナビゲーションリクエストの処理</target>
        </trans-unit>
        <trans-unit id="4e04a3a7c66471317dae04093656e3ff5fdc3eb2" translate="yes" xml:space="preserve">
          <source>Handling output</source>
          <target state="translated">出力の取り扱い</target>
        </trans-unit>
        <trans-unit id="f95f34fa70b69b36e45d9632d6643c7bdb17e313" translate="yes" xml:space="preserve">
          <source>Handling plural forms of words.</source>
          <target state="translated">単語の複数形を扱う。</target>
        </trans-unit>
        <trans-unit id="bf5f2cc0b863d4ee710417509c70a142c994fa6b" translate="yes" xml:space="preserve">
          <source>Handling request errors</source>
          <target state="translated">リクエストエラーの処理</target>
        </trans-unit>
        <trans-unit id="e3a6579f666e7f37fbbafc8bc27eea0a4b297937" translate="yes" xml:space="preserve">
          <source>Handling user input with forms is the cornerstone of many common applications. Applications use forms to enable users to log in, to update a profile, to enter sensitive information, and to perform many other data-entry tasks.</source>
          <target state="translated">フォームを使ったユーザー入力の処理は、多くの一般的なアプリケーションの基礎となっています。アプリケーションは、ユーザーがログインしたり、プロファイルを更新したり、機密情報を入力したり、その他多くのデータ入力タスクを実行したりするためにフォームを使用します。</target>
        </trans-unit>
        <trans-unit id="0b4dd43911d5b1213a8c24413fee5583e9c69543" translate="yes" xml:space="preserve">
          <source>Has the ability to save the changes to its tax return or cancel them.</source>
          <target state="translated">確定申告書の変更を保存したり、取り消したりする機能を持っています。</target>
        </trans-unit>
        <trans-unit id="e929e6ea9e6a11c1a8dd7547fc802c6500c5c38b" translate="yes" xml:space="preserve">
          <source>Hash mismatches can occur for a variety of reasons:</source>
          <target state="translated">ハッシュのミスマッチは様々な理由で発生します。</target>
        </trans-unit>
        <trans-unit id="446f6822c34424ae30675660ab1fef1603785ee9" translate="yes" xml:space="preserve">
          <source>HashLocationStrategy</source>
          <target state="translated">HashLocationStrategy</target>
        </trans-unit>
        <trans-unit id="f0155931738ae14ba71a27c7bbf7845159b64ae6" translate="yes" xml:space="preserve">
          <source>Have a near-term view of implementation and a long-term vision. Start small but keep in mind where the app is heading down the road.</source>
          <target state="translated">実装の短期的な視点と長期的なビジョンを持つこと。小さなことから始めますが、アプリがどこに向かっているのかを念頭に置いてください。</target>
        </trans-unit>
        <trans-unit id="c08d23a9cf638cea321f4d84c68bd9d2002ab064" translate="yes" xml:space="preserve">
          <source>Having completed the preparation work, get going with the Angular upgrade of PhoneCat. You'll do this incrementally with the help of &lt;a href=&quot;upgrade#upgrading-with-ngupgrade&quot;&gt;ngUpgrade&lt;/a&gt; that comes with Angular. By the time you're done, you'll be able to remove AngularJS from the project completely, but the key is to do this piece by piece without breaking the application.</source>
          <target state="translated">準備作業が完了したら、PhoneCatのAngularアップグレードを開始します。これは、Angularに付属する&lt;a href=&quot;upgrade#upgrading-with-ngupgrade&quot;&gt;ngUpgrade&lt;/a&gt;を使用して段階的に行います。完了すると、プロジェクトからAngularJSを完全に削除できるようになりますが、重要なのは、アプリケーションを壊すことなく、1つずつこれを実行することです。</target>
        </trans-unit>
        <trans-unit id="e44a18c3a57a64b5f43da0c3c418a093078ff2b3" translate="yes" xml:space="preserve">
          <source>Having imported &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; into the &lt;code&gt;AppModule&lt;/code&gt;, you can inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into an application class as shown in the following &lt;code&gt;ConfigService&lt;/code&gt; example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;AppModule&lt;/code&gt; にインポートしたら、次の &lt;code&gt;ConfigService&lt;/code&gt; の例に示すように、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をアプリケーションクラスに注入できます。</target>
        </trans-unit>
        <trans-unit id="63c6f00e7126a7006e9f3913b9db289b6ecefa3a" translate="yes" xml:space="preserve">
          <source>Having multiple classes in the same file can be confusing. We generally recommend that you define components and services in separate files.</source>
          <target state="translated">同じファイル内に複数のクラスを持つことは、混乱を招く可能性があります。一般的には、コンポーネントとサービスを別々のファイルで定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="43b7decb237c08167fd7e5e024b70ed1cde16483" translate="yes" xml:space="preserve">
          <source>Header name default is &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">ヘッダー名のデフォルトは &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fd17ac56d40e61932509fd748034fd6e03beedce" translate="yes" xml:space="preserve">
          <source>Headings and code-examples automatically clear a floating image. If you need to force a piece of text to clear a floating image, add &lt;code&gt;&amp;lt;br class=&quot;clear&quot;&amp;gt;&lt;/code&gt; where the text should break.</source>
          <target state="translated">見出しとコード例は、浮動画像を自動的に消去します。フローティング画像をクリアするようにテキストの一部を強制する必要がある場合は、テキストが途切れるべき場所に &lt;code&gt;&amp;lt;br class=&quot;clear&quot;&amp;gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="348d00693e12bc983bd092677b90434b5a4d869e" translate="yes" xml:space="preserve">
          <source>Hebrew</source>
          <target state="translated">Hebrew</target>
        </trans-unit>
        <trans-unit id="e209d6314e51dd5ccf1a29898d725458ace1ea29" translate="yes" xml:space="preserve">
          <source>Help the translator with a description and meaning</source>
          <target state="translated">説明と意味の翻訳者を助ける</target>
        </trans-unit>
        <trans-unit id="23b10c4e3e30b50de4cf9d8713db9896609dac18" translate="yes" xml:space="preserve">
          <source>Helper class for UIComponents that allows components to register methods. If a registered method message is received from the broker on the worker, the UIMessageBroker deserializes its arguments and calls the registered method. If that method returns a promise, the UIMessageBroker returns the result to the worker.</source>
          <target state="translated">コンポーネントがメソッドを登録できるようにするUIComponents用のヘルパークラスです。登録されたメソッドメッセージをワーカー上のブローカから受け取ると、UIMessageBroker はその引数をデシリアライズし、登録されたメソッドを呼び出します。そのメソッドが約束を返す場合、UIMessageBroker はその結果をワーカーに返します。</target>
        </trans-unit>
        <trans-unit id="4b749245153a679bfe782c9f0d64160b91308e72" translate="yes" xml:space="preserve">
          <source>Here are a few essential commands for guide page authors.</source>
          <target state="translated">ここでは、ガイドページの作者のためのいくつかの必須コマンドを紹介します。</target>
        </trans-unit>
        <trans-unit id="73545db4944e39660ef5a87396a0b7aba69af71b" translate="yes" xml:space="preserve">
          <source>Here are a few more &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests to reinforce the point.</source>
          <target state="translated">ここでは、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; を補強するためのいくつかのHeroDetailComponentテストを示します。</target>
        </trans-unit>
        <trans-unit id="5bfee4d35a4ddf4a150031955212105951b628cd" translate="yes" xml:space="preserve">
          <source>Here are all variations in action, including the uppercase version:</source>
          <target state="translated">ここでは、大文字のバージョンを含む、すべてのアクションのバリエーションを紹介します。</target>
        </trans-unit>
        <trans-unit id="4fb3542fad3fab2d215a2d5fc7e79d985d7d6068" translate="yes" xml:space="preserve">
          <source>Here are several ways to test it.</source>
          <target state="translated">それをテストする方法をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="abc262ee616cd6d61de48d067488e18aa5ef326a" translate="yes" xml:space="preserve">
          <source>Here are some code samples that illustrate how the same kind of operation is defined using observables and the events API.</source>
          <target state="translated">ここでは、オブザーバブルとイベントAPIを使用して、同じ種類の操作がどのように定義されているかを説明するコードサンプルをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="203fd9e1b4e1afa2c6feeebed47510738cfabc5c" translate="yes" xml:space="preserve">
          <source>Here are some examples of domains in which observables are particularly useful.</source>
          <target state="translated">ここでは、観測値が特に有用な領域の例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="131d0134570ecdcb02d33fba4f7d38b95dc40e6f" translate="yes" xml:space="preserve">
          <source>Here are some reasons you might want to use AOT.</source>
          <target state="translated">AOTを利用した方が良い理由をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="26011f288b9004d25201027171dcc3188b4c814f" translate="yes" xml:space="preserve">
          <source>Here are some tests of this component:</source>
          <target state="translated">このコンポーネントのテストをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="1da109a79f1e8c33f73c9f071459627e6862b1f1" translate="yes" xml:space="preserve">
          <source>Here are some tests that confirm those links are wired to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directives as expected:</source>
          <target state="translated">これらのリンクが &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; ディレクティブに期待どおりに配線されていることを確認するいくつかのテストを次に示します。</target>
        </trans-unit>
        <trans-unit id="036a997255f75ed81e294ddfe5be22eefa087ade" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed in the transition example.</source>
          <target state="translated">ここでは、遷移の例で説明したコードファイルを示します。</target>
        </trans-unit>
        <trans-unit id="f4fad47e3b7e72ffe6f641a7a34317759a3aecb3" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page (all in the &lt;code&gt;src/app/&lt;/code&gt; folder).</source>
          <target state="translated">このページで説明するコードファイルは次のとおりです（すべて &lt;code&gt;src/app/&lt;/code&gt; フォルダーにあります）。</target>
        </trans-unit>
        <trans-unit id="74657a80cc45b0684fb1fecc8e212b1ed029cf06" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page and your app should look like this live example.</source>
          <target state="translated">このページで議論されているコードファイルは以下の通りで、アプリはこのライブサンプルのように見えるはずです。</target>
        </trans-unit>
        <trans-unit id="66c3e84d041afa18e7991e820a67cb0cf06a9f66" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page, including the &lt;code&gt;HeroesComponent&lt;/code&gt; styles.</source>
          <target state="translated">ここでは、 &lt;code&gt;HeroesComponent&lt;/code&gt; スタイルを含む、このページで説明されているコードファイルを示します。</target>
        </trans-unit>
        <trans-unit id="6d57ee3abb38cd8a9899ae29d2550ce3d653bb31" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page.</source>
          <target state="translated">このページで取り上げているコードファイルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="203d61b3820a79aebb69d382a71e07a169924fb4" translate="yes" xml:space="preserve">
          <source>Here are the files discussed in this milestone.</source>
          <target state="translated">ここでは、このマイルストーンで議論されているファイルを紹介します。</target>
        </trans-unit>
        <trans-unit id="a83f2137923a903754b347a20addb67d308de8a4" translate="yes" xml:space="preserve">
          <source>Here are the files in this milestone.</source>
          <target state="translated">このマイルストーンのファイルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="86abfa66f0b60872f95de83204f6eda0cb85e98b" translate="yes" xml:space="preserve">
          <source>Here are the harness and directive in action.</source>
          <target state="translated">ここでは、ハーネスとディレクティブの動作をご紹介します。</target>
        </trans-unit>
        <trans-unit id="adb765c3e2e6d081287a43313fe06b6366a0d292" translate="yes" xml:space="preserve">
          <source>Here are the key &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; terms and their meanings:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; の主な用語とその意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="39f688160764967f49497f345da36e4e3e168300" translate="yes" xml:space="preserve">
          <source>Here are the most important properties for testers, in order of likely utility.</source>
          <target state="translated">ここでは、テスターにとって最も重要なプロパティを、実用性の高い順に紹介します。</target>
        </trans-unit>
        <trans-unit id="df6a324455059eb2e9437c79b60728c721d55c96" translate="yes" xml:space="preserve">
          <source>Here are the most important static methods, in order of likely utility.</source>
          <target state="translated">ここでは、最も重要な静的メソッドを実用性の高い順に紹介します。</target>
        </trans-unit>
        <trans-unit id="b0fcf40781dd81faf1b7b2c864bfff4e045dab29" translate="yes" xml:space="preserve">
          <source>Here are the most useful &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; members for testers, in approximate order of utility:</source>
          <target state="translated">テスターにとって最も有用な &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; メンバーを、ユーティリティのおおよその順序で次に示します。</target>
        </trans-unit>
        <trans-unit id="32ce460bbc4e3a59815d17ba202313950f72d9f6" translate="yes" xml:space="preserve">
          <source>Here are the most useful methods for testers.</source>
          <target state="translated">ここでは、テスターに最も役立つ方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="6a60e979959576c6f47a130ae26f2fc0cb5317a3" translate="yes" xml:space="preserve">
          <source>Here are the pertinent excerpts from that &lt;code&gt;ItemDetailComponent&lt;/code&gt;:</source>
          <target state="translated">その &lt;code&gt;ItemDetailComponent&lt;/code&gt; からの関連する抜粋を以下に示します。</target>
        </trans-unit>
        <trans-unit id="1a520668d060926a9146d4f12a9958d113becba8" translate="yes" xml:space="preserve">
          <source>Here are the relevant files for this version of the sample application.</source>
          <target state="translated">このバージョンのサンプルアプリケーションの関連ファイルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="971ae2e0b756cc6f10ae1a53bdb804772e791d81" translate="yes" xml:space="preserve">
          <source>Here are the special characters used in number patterns:</source>
          <target state="translated">ここでは、数字のパターンで使われる特殊文字を紹介します。</target>
        </trans-unit>
        <trans-unit id="9dc7abb813d891b43406656a067ebe5efbb41d40" translate="yes" xml:space="preserve">
          <source>Here are the steps performed in the model to view test.</source>
          <target state="translated">ここでは、テストを表示するためのモデルで実行されるステップを示します。</target>
        </trans-unit>
        <trans-unit id="f907cd5c3b0f7e717c2f855029aafe9b0514260f" translate="yes" xml:space="preserve">
          <source>Here are the steps performed in the view to model test.</source>
          <target state="translated">ここでは、モデルテストを行うためのビューで実行されるステップを示します。</target>
        </trans-unit>
        <trans-unit id="8d85ddc8011bbc63fdd9aec9179cf474504e39e7" translate="yes" xml:space="preserve">
          <source>Here are the two files in their entirety for reference:</source>
          <target state="translated">参考までに2つのファイルの全体像をご紹介します。</target>
        </trans-unit>
        <trans-unit id="f835472a7ce81800f581a799c5de83f42771a680" translate="yes" xml:space="preserve">
          <source>Here are the updated modules &lt;em&gt;before enabling preload&lt;/em&gt;:</source>
          <target state="translated">以下は、&lt;em&gt;プリロードを有効にする前に&lt;/em&gt;更新されたモジュールです。</target>
        </trans-unit>
        <trans-unit id="63dad6d461822e6aad5b70847aaca52f44875f2f" translate="yes" xml:space="preserve">
          <source>Here are three tests that illustrate how automatic change detection works.</source>
          <target state="translated">ここでは、自動変更検出がどのように機能するかを説明する3つのテストを紹介します。</target>
        </trans-unit>
        <trans-unit id="37f9819724bc0daa70265500abced7a21ff78a8d" translate="yes" xml:space="preserve">
          <source>Here are two more versions of the previous test, written with &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt;. The first one subscribes to the &lt;code&gt;Observable&lt;/code&gt; exposed to the template by the component's &lt;code&gt;quote&lt;/code&gt; property.</source>
          <target state="translated">以下は、 &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; で記述された、前のテストのさらに2つのバージョンです。最初のものは、コンポーネントの &lt;code&gt;quote&lt;/code&gt; プロパティによってテンプレートに公開された &lt;code&gt;Observable&lt;/code&gt; をサブスクライブします。</target>
        </trans-unit>
        <trans-unit id="673f54dff9940b5161bcefea2dafa7cb5b8df245" translate="yes" xml:space="preserve">
          <source>Here are two more versions of the previous test, written with &lt;code&gt;done()&lt;/code&gt;. The first one subscribes to the &lt;code&gt;Observable&lt;/code&gt; exposed to the template by the component's &lt;code&gt;quote&lt;/code&gt; property.</source>
          <target state="translated">これは、 &lt;code&gt;done()&lt;/code&gt; で記述された前のテストのさらに2つのバージョンです。最初のものは、コンポーネントの &lt;code&gt;quote&lt;/code&gt; プロパティによってテンプレートに公開された &lt;code&gt;Observable&lt;/code&gt; をサブスクライブします。</target>
        </trans-unit>
        <trans-unit id="d47821c3b31c5392bebc3b1326890d7c2f695edc" translate="yes" xml:space="preserve">
          <source>Here are two sample components and the &lt;code&gt;AdComponent&lt;/code&gt; interface for reference:</source>
          <target state="translated">参照用に2つのサンプルコンポーネントと &lt;code&gt;AdComponent&lt;/code&gt; インターフェースを次に示します。</target>
        </trans-unit>
        <trans-unit id="e0b787c218a0fd5b377e6264e620f571eb531aac" translate="yes" xml:space="preserve">
          <source>Here is &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; displaying the hero's name if &lt;code&gt;hero&lt;/code&gt; exists.</source>
          <target state="translated">ここで &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 場合は主人公の名前を表示する &lt;code&gt;hero&lt;/code&gt; 存在します。</target>
        </trans-unit>
        <trans-unit id="a3fe3b425db56855651f417606038f5fe5ce6604" translate="yes" xml:space="preserve">
          <source>Here is a compliant folder and file structure:</source>
          <target state="translated">ここに準拠したフォルダとファイル構造があります。</target>
        </trans-unit>
        <trans-unit id="62e6d461e292af41877b8fc098a18bf5f12699ce" translate="yes" xml:space="preserve">
          <source>Here is a do-nothing &lt;em&gt;noop&lt;/em&gt; interceptor that simply passes the request through without touching it:</source>
          <target state="translated">以下は、何もせずにリクエストを単に通過させる、何もしない&lt;em&gt;noop&lt;/em&gt;インターセプターです。</target>
        </trans-unit>
        <trans-unit id="b553906d1b80b4ed0946ba38a8092bc3576b764e" translate="yes" xml:space="preserve">
          <source>Here is a simple demonstration of how the &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; decorator can be used.</source>
          <target state="translated">以下は、 &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; デコレーターの使用方法の簡単なデモです。</target>
        </trans-unit>
        <trans-unit id="8bd50bf2cb0cef064313fd64747ca38c8871ec23" translate="yes" xml:space="preserve">
          <source>Here is a slightly more realistic example that shows how &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; decorators can be used to implement a tab pane component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; デコレータを使用してタブペインコンポーネントを実装する方法を示す、もう少し現実的な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="2d30b7cdd1bf5a3b2b24f4673563c67ae4a7d16a" translate="yes" xml:space="preserve">
          <source>Here is an example of a &lt;code&gt;&lt;a href=&quot;animationevent#fromState&quot;&gt;fromState&lt;/a&gt;&lt;/code&gt; specified as a state-change function that invokes an animation when true:</source>
          <target state="translated">以下は、trueのときにアニメーションを呼び出す状態変更関数として指定された &lt;code&gt;&lt;a href=&quot;animationevent#fromState&quot;&gt;fromState&lt;/a&gt;&lt;/code&gt; の例です。</target>
        </trans-unit>
        <trans-unit id="b74f6ac9418ccda6649c8b91ae4958248200086f" translate="yes" xml:space="preserve">
          <source>Here is an example of a &lt;code&gt;fromState&lt;/code&gt; specified as a state-change function that invokes an animation when true:</source>
          <target state="translated">trueの場合にアニメーションを呼び出す状態変更関数として指定された &lt;code&gt;fromState&lt;/code&gt; の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="3a7a73e5c81430a86007b3a7779f14a9661e2342" translate="yes" xml:space="preserve">
          <source>Here is an example of the case where the component router configuration includes a non-default &lt;a href=&quot;router#location-strategy&quot;&gt;location strategy&lt;/a&gt; by listing its provider in the &lt;code&gt;providers&lt;/code&gt; list of the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">ここで成分ルータの設定は、デフォルト以外含む場合の例である&lt;a href=&quot;router#location-strategy&quot;&gt;位置戦略&lt;/a&gt;におけるそのプロバイダをリストすることによって &lt;code&gt;providers&lt;/code&gt; のリスト &lt;code&gt;AppModule&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="88d4ddf3e1fd42c49a911a9c5f50961b303bafab" translate="yes" xml:space="preserve">
          <source>Here is an illustration of the &lt;code&gt;trackBy&lt;/code&gt; effect. &quot;Reset items&quot; creates new items with the same &lt;code&gt;item.id&lt;/code&gt;s. &quot;Change ids&quot; creates new items with new &lt;code&gt;item.id&lt;/code&gt;s.</source>
          <target state="translated">次に、 &lt;code&gt;trackBy&lt;/code&gt; エフェクトの図を示します。「アイテムのリセット」は、同じ &lt;code&gt;item.id&lt;/code&gt; を持つ新しいアイテムを作成します。「IDの変更」は、新しい &lt;code&gt;item.id&lt;/code&gt; を持つ新しいアイテムを作成します。</target>
        </trans-unit>
        <trans-unit id="69d071f83219cc67343782da4cd85435abb0fdcf" translate="yes" xml:space="preserve">
          <source>Here is such a &lt;code&gt;Page&lt;/code&gt; class for the &lt;code&gt;hero-detail.component.spec.ts&lt;/code&gt;</source>
          <target state="translated">これが &lt;code&gt;hero-detail.component.spec.ts&lt;/code&gt; のそのような &lt;code&gt;Page&lt;/code&gt; クラスです</target>
        </trans-unit>
        <trans-unit id="d980344b844e420fad53b6c16d75017541abc570" translate="yes" xml:space="preserve">
          <source>Here is the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; from the &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial.</source>
          <target state="translated">ここで &lt;code&gt;DashboardHeroComponent&lt;/code&gt; から&lt;em&gt;英雄のツアー&lt;/em&gt;チュートリアルが。</target>
        </trans-unit>
        <trans-unit id="e86488b1cb32b49feef4f4470dedca4a5fcf1967" translate="yes" xml:space="preserve">
          <source>Here is the &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; that makes use of &lt;code&gt;HeroTaxReturnService&lt;/code&gt;.</source>
          <target state="translated">これが &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; を利用する &lt;code&gt;HeroTaxReturnService&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4ccb3bee45c3f5e8a10c7949fcd716f5fbd128cd" translate="yes" xml:space="preserve">
          <source>Here is the animation trigger code:</source>
          <target state="translated">ここにアニメーションのトリガーコードがあります。</target>
        </trans-unit>
        <trans-unit id="ae4efcc82a067c04926b13069d143263eacc0318" translate="yes" xml:space="preserve">
          <source>Here is the component code:</source>
          <target state="translated">ここにコンポーネントのコードがあります。</target>
        </trans-unit>
        <trans-unit id="1f67d21ef057f2279432085d35aecdb714a0fb88" translate="yes" xml:space="preserve">
          <source>Here is the component definition:</source>
          <target state="translated">ここにコンポーネントの定義があります。</target>
        </trans-unit>
        <trans-unit id="29f639c1a4ee278d0bd27ad171d2b15e9b89431d" translate="yes" xml:space="preserve">
          <source>Here is the example application and its unit tests that use &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt; を使用するサンプルアプリケーションとその単体テストを示します。</target>
        </trans-unit>
        <trans-unit id="7289c34d08b5da9d83fd489bac339bb78646999e" translate="yes" xml:space="preserve">
          <source>Here is the expanded version of the short-form example.</source>
          <target state="translated">ここでは、短文例の拡大版を紹介します。</target>
        </trans-unit>
        <trans-unit id="0070a1aed2d25a8700de4fcbefa0dce4ca73945f" translate="yes" xml:space="preserve">
          <source>Here is the final version of &lt;code&gt;getHeroes()&lt;/code&gt; with the &lt;code&gt;tap()&lt;/code&gt; that logs the operation.</source>
          <target state="translated">操作をログに記録する &lt;code&gt;tap()&lt;/code&gt; を使用した &lt;code&gt;getHeroes()&lt;/code&gt; の最終バージョンを次に示します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
