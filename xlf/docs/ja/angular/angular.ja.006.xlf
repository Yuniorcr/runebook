<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="9b63586546cd1a81c918d1e5257f96a507ec674b" translate="yes" xml:space="preserve">
          <source>By convention, the module class name is &lt;code&gt;AppRoutingModule&lt;/code&gt; and it belongs in the &lt;code&gt;app-routing.module.ts&lt;/code&gt; in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">慣例により、モジュールクラス名は &lt;code&gt;AppRoutingModule&lt;/code&gt; であり、 &lt;code&gt;src/app&lt;/code&gt; フォルダの &lt;code&gt;app-routing.module.ts&lt;/code&gt; に属しています。</target>
        </trans-unit>
        <trans-unit id="03a4df132d346ecc03036957b443d37171ef0e22" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; supports the following &lt;code&gt;macroTasks&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; は次の &lt;code&gt;macroTasks&lt;/code&gt; をサポートしています。</target>
        </trans-unit>
        <trans-unit id="2bf91cf79be5a08d74ebc94a4d5ee160fbcd355c" translate="yes" xml:space="preserve">
          <source>By default no files are replaced. You can add file replacements for specific build targets. For example:</source>
          <target state="translated">デフォルトでは、ファイルは置き換えられません。特定のビルドターゲットに対してファイルの置き換えを追加することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="51695b957eb12e3eaecfb926c54f3ed8f96364b1" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;.ts&lt;/code&gt; file supplied in the &lt;code&gt;files&lt;/code&gt; field is assumed to be the library index. If more than one &lt;code&gt;.ts&lt;/code&gt; file is specified, &lt;code&gt;libraryIndex&lt;/code&gt; is used to select the file to use. If more than one &lt;code&gt;.ts&lt;/code&gt; file is supplied without a &lt;code&gt;libraryIndex&lt;/code&gt;, an error is produced.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;files&lt;/code&gt; フィールドで指定された &lt;code&gt;.ts&lt;/code&gt; ファイルがライブラリインデックスであると見なされます。複数の &lt;code&gt;.ts&lt;/code&gt; ファイルを指定した場合、 &lt;code&gt;libraryIndex&lt;/code&gt; を使用して、使用するファイルを選択します。複数の場合は &lt;code&gt;.ts&lt;/code&gt; ファイルをせずに供給されている &lt;code&gt;libraryIndex&lt;/code&gt; 、エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="efd8650003e279eb6e8e6a15f88cb26404635663" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; supports the following macro tasks.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; は次のマクロタスクをサポートします。</target>
        </trans-unit>
        <trans-unit id="f3e8b162932a44f38caaa31ef309abf5c60257bd" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;@&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; queries will only search direct child nodes in the DOM hierarchy (previously, they would search any nesting level in the DOM as long as another directive wasn't matched above it). See further &lt;a href=&quot;ivy-compatibility-examples#content-children-descendants&quot;&gt;details&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;@&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; クエリは、DOM階層内の直接の子ノードのみを検索します（以前は、別のディレクティブがその上で一致しない限り、DOM内のネストレベルを検索していました）。詳細を&lt;a href=&quot;ivy-compatibility-examples#content-children-descendants&quot;&gt;参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e5914dfa1fd7ba2af1bd87033b229c44bc750e76" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ng new&lt;/code&gt; creates an initial skeleton application at the root level of the workspace, along with its end-to-end tests. The skeleton is for a simple Welcome application that is ready to run and easy to modify. The root-level application has the same name as the workspace, and the source files reside in the &lt;code&gt;src/&lt;/code&gt; subfolder of the workspace.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;ng new&lt;/code&gt; は、エンドツーエンドのテストとともに、ワークスペースのルートレベルに初期スケルトンアプリケーションを作成します。スケルトンは、実行の準備ができており、簡単に変更できる単純なWelcomeアプリケーション用です。ルートレベルのアプリケーションの名前はワークスペースと同じで、ソースファイルはワークスペースの &lt;code&gt;src/&lt;/code&gt; サブフォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="fdde175d8d5cd355f83e0d12cd962bd43d0f6ace" translate="yes" xml:space="preserve">
          <source>By default, Angular always starts at the current &lt;code&gt;&lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; and keeps searching all the way up. Modifiers allow you to change the starting (self) or ending location.</source>
          <target state="translated">デフォルトでは、Angularは常に現在の &lt;code&gt;&lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; から始まり、ずっと上に向かって検索を続けます。修飾子を使用すると、開始（自己）または終了の場所を変更できます。</target>
        </trans-unit>
        <trans-unit id="5ee3791d4cd5c129149bc38614bdd1a727c6dd98" translate="yes" xml:space="preserve">
          <source>By default, Angular change detection will also run on the component for every AngularJS &lt;code&gt;$digest&lt;/code&gt; cycle. If you wish to only have change detection run when the inputs change, you can set &lt;code&gt;propagateDigest&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; when calling &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Angular変更検出はAngularJS &lt;code&gt;$digest&lt;/code&gt; サイクルごとにコンポーネントで実行されます。入力が変更されたときにのみ変更検出を実行する場合は、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; （）を呼び出すときに &lt;code&gt;propagateDigest&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="c246f990199a0a6cf74efb68b5e6a57d51a1c478" translate="yes" xml:space="preserve">
          <source>By default, Angular only contains locale data for &lt;code&gt;en-US&lt;/code&gt;. If you set the value of &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; to another locale, you must import locale data for that new locale. The CLI imports the locale data for you when you use the parameter &lt;code&gt;--configuration&lt;/code&gt; with &lt;code&gt;ng serve&lt;/code&gt; and &lt;code&gt;ng build&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Angularには &lt;code&gt;en-US&lt;/code&gt; のロケールデータのみが含まれています。 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; の値を別のロケールに設定する場合は、その新しいロケールのロケールデータをインポートする必要があります。 &lt;code&gt;ng serve&lt;/code&gt; および &lt;code&gt;ng build&lt;/code&gt; でパラメーター &lt;code&gt;--configuration&lt;/code&gt; を使用すると、CLIはロケールデータをインポートします。</target>
        </trans-unit>
        <trans-unit id="c38ab5e3eefabb0e0f4fea157820aa9ee2ccacc6" translate="yes" xml:space="preserve">
          <source>By default, Angular uses the locale &lt;code&gt;en-US&lt;/code&gt;, which is English as spoken in the United States of America.</source>
          <target state="translated">デフォルトでは、Angularはロケール &lt;code&gt;en-US&lt;/code&gt; を使用します。これは、アメリカ合衆国で話されている英語です。</target>
        </trans-unit>
        <trans-unit id="7d6489a7440ae99238e395cfb6007fae40fb09ae" translate="yes" xml:space="preserve">
          <source>By default, NgModules are eagerly loaded, which means that as soon as the app loads, so do all the NgModules, whether or not they are immediately necessary. For large apps with lots of routes, consider lazy loading&amp;mdash;a design pattern that loads NgModules as needed. Lazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.</source>
          <target state="translated">デフォルトでは、NgModuleは積極的に読み込まれます。つまり、アプリが読み込まれるとすぐに、NgModuleがすぐに必要かどうかに関係なく、すべてのNgModuleが読み込まれます。多数のルートを持つ大規模なアプリの場合は、遅延読み込み（必要に応じてNgModuleを読み込む設計パターン）を検討してください。遅延読み込みは、初期バンドルサイズを小さく保つのに役立ちます。これにより、読み込み時間が短縮されます。</target>
        </trans-unit>
        <trans-unit id="4a2fd556d26003ca54a9e732916c3e8fb2840bae" translate="yes" xml:space="preserve">
          <source>By default, a &lt;code&gt;production&lt;/code&gt; configuration is defined, and the &lt;code&gt;ng build&lt;/code&gt; command has &lt;code&gt;--prod&lt;/code&gt; option that builds using this configuration. The &lt;code&gt;production&lt;/code&gt; configuration sets defaults that optimize the app in a number of ways, such as bundling files, minimizing excess whitespace, removing comments and dead code, and rewriting code to use short, cryptic names (&quot;minification&quot;).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;production&lt;/code&gt; 設定が定義されており、 &lt;code&gt;ng build&lt;/code&gt; コマンドには、この設定を使用してビルドする &lt;code&gt;--prod&lt;/code&gt; オプションがあります。 &lt;code&gt;production&lt;/code&gt; など、ファイルをバンドルする余分な空白を最小限に抑え、コメントやデッドコードの除去、および使用の短い、不可解な名前（「縮小」）にコードを書き換えるなど多くの方法でアプリを最適化する設定セットのデフォルト。</target>
        </trans-unit>
        <trans-unit id="6104e2784b3d5459f07069827571091b50f300af" translate="yes" xml:space="preserve">
          <source>By default, a live example link opens a Stackblitz in a separate browser tab. You can embed the Stackblitz within the guide page itself by adding the &lt;code&gt;embedded&lt;/code&gt; attribute.</source>
          <target state="translated">デフォルトでは、ライブサンプルリンクは別のブラウザータブでStackblitzを開きます。 &lt;code&gt;embedded&lt;/code&gt; 属性を追加することで、ガイドページ自体にStackblitzを埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="e81e3b2c1800abfb9519aca9fcc5374fb1a22984" translate="yes" xml:space="preserve">
          <source>By default, all validators are run after every form value change. With synchronous validators, this will not likely have a noticeable impact on application performance. However, it's common for async validators to perform some kind of HTTP request to validate the control. Dispatching an HTTP request after every keystroke could put a strain on the backend API, and should be avoided if possible.</source>
          <target state="translated">デフォルトでは、すべてのバリデータはフォームの値が変更されるたびに実行されます。同期バリデータの場合、アプリケーションのパフォーマンスに大きな影響を与えることはないでしょう。しかし、非同期バリデータでは、コントロールを検証するために何らかの HTTP リクエストを実行するのが一般的です。キー操作のたびに HTTP リクエストをディスパッチすることはバックエンド API に負担をかける可能性があるので、可能であれば避けるべきです。</target>
        </trans-unit>
        <trans-unit id="c3c433defa9a4588ae9a20ebf49bc2cfc189916b" translate="yes" xml:space="preserve">
          <source>By default, all validators run after every form value change. With synchronous validators, this does not normally have a noticeable impact on application performance. Async validators, however, commonly perform some kind of HTTP request to validate the control. Dispatching an HTTP request after every keystroke could put a strain on the backend API, and should be avoided if possible.</source>
          <target state="translated">デフォルトでは、すべてのバリデータはフォームの値が変更されるたびに実行されます。同期バリデータの場合、通常はアプリケーションのパフォーマンスに目立った影響はありません。しかし、非同期バリデータでは、コントロールを検証するために何らかの HTTP リクエストを実行するのが一般的です。キー操作のたびに HTTP リクエストを送信することはバックエンド API に負担をかける可能性があるので、可能であれば避けたほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="cb054c411f164d76b27f15037b08121e4e98dde4" translate="yes" xml:space="preserve">
          <source>By default, an Angular app always has at least one entry component, the root component, &lt;code&gt;AppComponent&lt;/code&gt;. Its purpose is to serve as a point of entry into the app, that is, you bootstrap it to launch the app.</source>
          <target state="translated">デフォルトでは、Angularアプリには常に少なくとも1つのエントリコンポーネント、ルートコンポーネント、 &lt;code&gt;AppComponent&lt;/code&gt; があります。その目的は、アプリへのエントリポイントとして機能することです。つまり、アプリを起動するためにアプリをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="d95d52a0fff91150c8cb9f7bb76b9d498b34a5e8" translate="yes" xml:space="preserve">
          <source>By default, an interceptor sends this header on all mutating requests (such as POST) to relative URLs, but not on GET/HEAD requests or on requests with an absolute URL.</source>
          <target state="translated">デフォルトでは、インターセプターは、相対 URL に対するすべてのミューティングリクエスト (POST など)に対してこのヘッダを送信しますが、GET/HEAD リクエストや絶対 URL を持つリクエストに対しては送信しません。</target>
        </trans-unit>
        <trans-unit id="29612b8986641e9c62a3c15504623ae3e86c6192" translate="yes" xml:space="preserve">
          <source>By default, if the control has children, all children are enabled.</source>
          <target state="translated">デフォルトでは、コントロールに子がある場合、すべての子が有効になります。</target>
        </trans-unit>
        <trans-unit id="e243dc5ef99c3ce4659ac5ffc13cb25f6f1f760c" translate="yes" xml:space="preserve">
          <source>By default, it also updates the value and validity of its ancestors.</source>
          <target state="translated">デフォルトでは、その先祖の値と有効性も更新されます。</target>
        </trans-unit>
        <trans-unit id="86d26dd91eba4447650188c535f2705b5cd1b74d" translate="yes" xml:space="preserve">
          <source>By default, legacy browsers such as IE 9-11 are ignored, and the compilation target is ES2015. As a result, this produces two builds, and differential loading is enabled. If you ignore browsers without ES2015 support, a single build is produced. To see the build result for differential loading based on different configurations, refer to the table below.</source>
          <target state="translated">デフォルトでは、IE 9-11などのレガシーブラウザは無視され、コンパイル対象はES2015となっています。その結果、2つのビルドが生成され、差分読み込みが有効になります。ES2015 をサポートしていないブラウザを無視すると、1 つのビルドが生成されます。異なる構成に基づく差分読み込みのビルド結果を確認するには、以下の表を参照してください。</target>
        </trans-unit>
        <trans-unit id="ebe2688e1fdccd8bbe9e374fafe40c23c0d3febd" translate="yes" xml:space="preserve">
          <source>By default, pipes are defined as &lt;em&gt;pure&lt;/em&gt; so that Angular executes the pipe only when it detects a &lt;em&gt;pure change&lt;/em&gt; to the input value. A pure change is either a change to a primitive input value (such as &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, or &lt;code&gt;Symbol&lt;/code&gt;), or a changed object reference (such as &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, or &lt;code&gt;Object&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、パイプは&lt;em&gt;純粋&lt;/em&gt;として定義されているため、Angularは入力値の&lt;em&gt;純粋な変更&lt;/em&gt;を検出した場合にのみパイプを実行します。純粋な変更とは、プリミティブ入力値（ &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、 &lt;code&gt;Boolean&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; など）または変更されたオブジェクト参照（ &lt;code&gt;Date&lt;/code&gt; 、 &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;Function&lt;/code&gt; 、 &lt;code&gt;Object&lt;/code&gt; など）の変更です。</target>
        </trans-unit>
        <trans-unit id="8c4d24c550e53bc0f5bebd201e971a470cb6283c" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;spawn()&lt;/code&gt; method outputs everything to the process standard output and error. To make it easier to test and debug, we can forward the output to the CLI Builder logger instead. This also allows the builder itself to be executed in a separate process, even if the standard output and error are deactivated (as in an &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron app&lt;/a&gt;).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;spawn()&lt;/code&gt; メソッドはすべてをプロセスの標準出力とエラーに出力します。テストとデバッグを簡単にするために、代わりに出力をCLIビルダーロガーに転送できます。これにより、標準出力とエラーが無効化されている場合でも（&lt;a href=&quot;https://electronjs.org/&quot;&gt;Electronアプリの場合など&lt;/a&gt;）、ビルダー自体を別のプロセスで実行することもできます。</target>
        </trans-unit>
        <trans-unit id="1dfbd486aab7d0d92e1d421a68656a3e0c20983d" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;xi18n&lt;/code&gt; command generates a translation file named &lt;code&gt;messages.xlf&lt;/code&gt; in the &lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XML Localization Interchange File Format (XLIFF, version 1.2)&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;xi18n&lt;/code&gt; のコマンドは、名前の翻訳ファイルを生成 &lt;code&gt;messages.xlf&lt;/code&gt; で&lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XMLローカリゼーション交換ファイル形式（XLIFF、バージョン1.2） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d941e4f6148aedde9261a9a0cf15f5ba8a31113e" translate="yes" xml:space="preserve">
          <source>By default, the AOT compiler removes whitespace characters as follows:</source>
          <target state="translated">デフォルトでは、AOT コンパイラは以下のように空白文字を削除します。</target>
        </trans-unit>
        <trans-unit id="a8a7612d9fccf041650c5c969b9038616f83e502" translate="yes" xml:space="preserve">
          <source>By default, the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; generates components with a template file. You can override that with:</source>
          <target state="translated">デフォルトでは、Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; &lt;/a&gt;はテンプレートファイルを使用してコンポーネントを生成します。あなたはそれでそれを上書きすることができます：</target>
        </trans-unit>
        <trans-unit id="daa76f3155ef0748e4e8ab3fd4aaa4c1fd24528b" translate="yes" xml:space="preserve">
          <source>By default, the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate service&lt;/code&gt;&lt;/a&gt; registers a provider with the root injector for your service by including provider metadata in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. The tutorial uses this method to register the provider of HeroService class definition.</source>
          <target state="translated">デフォルトでは、Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate service&lt;/code&gt; &lt;/a&gt;は、プロバイダーのメタデータを &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレーターに含めることにより、プロバイダーをサービスのルートインジェクターに登録します。チュートリアルでは、このメソッドを使用して、HeroServiceクラス定義のプロバイダーを登録します。</target>
        </trans-unit>
        <trans-unit id="b2bbe47a91244e664efba1dcfef903739625e635" translate="yes" xml:space="preserve">
          <source>By default, the Angular CLI command &lt;code&gt;ng generate service&lt;/code&gt; registers a provider with the &lt;em&gt;root injector&lt;/em&gt; for your service by including provider metadata, that is &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">デフォルトでは、角度CLIコマンドは &lt;code&gt;ng generate service&lt;/code&gt; とプロバイダ登録&lt;em&gt;ルートインジェクタ&lt;/em&gt;であるプロバイダのメタデータを含むことにより、あなたのサービスのための &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; 中 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータを。</target>
        </trans-unit>
        <trans-unit id="3e6a163342aac7337face85f212f89b9c69e5dd3" translate="yes" xml:space="preserve">
          <source>By default, the Angular CLI command &lt;code&gt;ng generate service&lt;/code&gt; registers a provider with the &lt;em&gt;root injector&lt;/em&gt; for your service by including provider metadata, that is &lt;code&gt;providedIn: 'root'&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">デフォルトでは、AngularCLIコマンド &lt;code&gt;ng generate service&lt;/code&gt; serviceは、プロバイダーメタデータを含めることにより、プロバイダーをサービスの&lt;em&gt;ルートインジェクターに&lt;/em&gt;登録します。プロバイダーメタデータは、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレーターの &lt;code&gt;providedIn: 'root'&lt;/code&gt; で提供されます。</target>
        </trans-unit>
        <trans-unit id="4b07b4ab8b7660869dbbd653625f529f802c444b" translate="yes" xml:space="preserve">
          <source>By default, the CLI command &lt;code&gt;ng new my-app&lt;/code&gt; creates a workspace folder named &quot;my-app&quot; and generates a new application skeleton in a &lt;code&gt;src/&lt;/code&gt; folder at the top level of the workspace. A newly generated application contains source files for a root module, with a root component and template.</source>
          <target state="translated">デフォルトでは、CLIコマンド &lt;code&gt;ng new my-app&lt;/code&gt; は「my-app」という名前のワークスペースフォルダーを作成し、ワークスペースの最上位レベルの &lt;code&gt;src/&lt;/code&gt; フォルダーに新しいアプリケーションスケルトンを生成します。新しく生成されたアプリケーションには、ルートコンポーネントとテンプレートを含む、ルートモジュールのソースファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="55eded90bf61b8ed39ccdda5d400e9b5e0adf278" translate="yes" xml:space="preserve">
          <source>By default, the change detector assumes that the object instance identifies the node in the iterable. When this function is supplied, the directive uses the result of calling this function to identify the item node, rather than the identity of the object itself.</source>
          <target state="translated">デフォルトでは、変更検出器は、オブジェクトのインスタンスがイテレート可能なノードを識別することを前提としています。この関数が与えられると、この関数を呼び出した結果を使って、オブジェクト自体の識別ではなく、 アイテムのノードを識別します。</target>
        </trans-unit>
        <trans-unit id="793355b486faa68c3f5a96afa98bcba17673aaaa" translate="yes" xml:space="preserve">
          <source>By default, the command creates a file named &lt;code&gt;messages.xlf&lt;/code&gt; in your project's root directory.</source>
          <target state="translated">デフォルトでは、コマンドはプロジェクトのルートディレクトリに &lt;code&gt;messages.xlf&lt;/code&gt; という名前のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="ff3064f6c11c8a9e2889671ed9f14030d3fa084f" translate="yes" xml:space="preserve">
          <source>By default, the compiler replaces decorators with a static field in the class, which allows advanced tree-shakers like &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure compiler&lt;/a&gt; to remove unused classes.</source>
          <target state="translated">デフォルトでは、コンパイラーはデコレーターをクラスの静的フィールドに置き換えます。これにより、&lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;クロージャーコンパイラーの&lt;/a&gt;ような高度なツリーシェーカーが未使用のクラスを削除できます。</target>
        </trans-unit>
        <trans-unit id="f450f93c44c5e18dcca944c8300e5aee18bed777" translate="yes" xml:space="preserve">
          <source>By default, the directive constructs the new URL using the given query parameters. The example generates the link: &lt;code&gt;/user/bob?debug=true#education&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、ディレクティブは指定されたクエリパラメータを使用して新しいURLを作成します。この例では、リンク &lt;code&gt;/user/bob?debug=true#education&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="d6300bbcf1bdafeb32e8a213f18ff110a8c0cc5f" translate="yes" xml:space="preserve">
          <source>By default, the files for a new initial app (with the same name as the workspace) are placed in the &lt;code&gt;src/&lt;/code&gt; subfolder. Corresponding end-to-end tests are placed in the &lt;code&gt;e2e/&lt;/code&gt; subfolder.</source>
          <target state="translated">デフォルトでは、新しい初期アプリのファイル（ワークスペースと同じ名前）は &lt;code&gt;src/&lt;/code&gt; サブフォルダーに配置されます。対応するエンドツーエンドのテストは、 &lt;code&gt;e2e/&lt;/code&gt; サブフォルダーに配置されます。</target>
        </trans-unit>
        <trans-unit id="12c9eb07e80405f04143527b8f231fd1a5c26efa" translate="yes" xml:space="preserve">
          <source>By default, the files for a new initial application (with the same name as the workspace) are placed in the &lt;code&gt;src/&lt;/code&gt; subfolder. Corresponding end-to-end tests are placed in the &lt;code&gt;e2e/&lt;/code&gt; subfolder.</source>
          <target state="translated">デフォルトでは、新しい初期アプリケーション（ワークスペースと同じ名前）のファイルは &lt;code&gt;src/&lt;/code&gt; サブフォルダーに配置されます。対応するエンドツーエンドのテストは、 &lt;code&gt;e2e/&lt;/code&gt; サブフォルダーに配置されます。</target>
        </trans-unit>
        <trans-unit id="8582915bde1d5201e954cc693f0f835f7a95e185" translate="yes" xml:space="preserve">
          <source>By default, the injector throws an error when it can't find a requested provider. The &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; decorator means not finding the service is OK. The injector returns &lt;code&gt;null&lt;/code&gt;, the &lt;code&gt;parentModule&lt;/code&gt; parameter is null, and the constructor concludes uneventfully.</source>
          <target state="translated">デフォルトでは、要求されたプロバイダーが見つからない場合、インジェクターはエラーをスローします。 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; デコレータ手段は、サービスを見つけることではないOKです。インジェクターは &lt;code&gt;null&lt;/code&gt; を返し、 &lt;code&gt;parentModule&lt;/code&gt; パラメーターはnullであり、コンストラクターは問題なく終了します。</target>
        </trans-unit>
        <trans-unit id="f59494e4c795cdee22a3b89f3a638403a11d22a5" translate="yes" xml:space="preserve">
          <source>By default, the router checks URL elements from the left to see if the URL matches a given path, and stops when there is a match. For example, '/team/11/user' matches 'team/:id'.</source>
          <target state="translated">デフォルトでは、ルータは左からURLの要素をチェックして、URLが指定されたパスにマッチするかどうかを確認し、マッチするものがあれば停止します。例えば、'/team/11/user' は 'team/:id' にマッチします。</target>
        </trans-unit>
        <trans-unit id="493054ab4174a97013d1543ce232a2beefc82809" translate="yes" xml:space="preserve">
          <source>By default, the router re-uses a component instance when it re-navigates to the same component type without visiting a different component first. The route parameters could change each time.</source>
          <target state="translated">デフォルトでは、ルータは、最初に別のコンポーネントを訪問せずに同じコンポーネントタイプに再ナビゲートするときに、コンポーネントのインスタンスを再利用します。ルートパラメータはその都度変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="6a43a86194b96294c0a89a6c30e5587c974c168c" translate="yes" xml:space="preserve">
          <source>By default, the target is &lt;code&gt;es2015&lt;/code&gt;, which is supported only in modern browsers. You can configure the target to &lt;code&gt;es5&lt;/code&gt; to specifically support legacy browsers. &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential loading&lt;/a&gt; is also provided by the Angular CLI to support modern, and legacy browsers with separate bundles.</source>
          <target state="translated">デフォルトでは、ターゲットは &lt;code&gt;es2015&lt;/code&gt; で、最新のブラウザーでのみサポートされています。ターゲットを &lt;code&gt;es5&lt;/code&gt; に設定して、レガシーブラウザを特別にサポートできます。Angular CLIは、個別のバンドルで最新のブラウザーとレガシーブラウザーをサポートするために、&lt;a href=&quot;deployment#differential-loading&quot;&gt;差分ロード&lt;/a&gt;も提供します。</target>
        </trans-unit>
        <trans-unit id="41868320016c660205217a38b2ee8095f3d655f6" translate="yes" xml:space="preserve">
          <source>By default, the target is &lt;code&gt;es2015&lt;/code&gt;. If you are targeting &lt;code&gt;es5&lt;/code&gt;, you still have newer type declarations due to the list of declaration files included:</source>
          <target state="translated">デフォルトでは、ターゲットは &lt;code&gt;es2015&lt;/code&gt; です。 &lt;code&gt;es5&lt;/code&gt; をターゲットにしている場合は、宣言ファイルのリストが含まれているため、まだ新しい型宣言があります。</target>
        </trans-unit>
        <trans-unit id="b58ea2ecb9512652cbb7eb35d524285feb8fe024" translate="yes" xml:space="preserve">
          <source>By default, these criteria are:</source>
          <target state="translated">デフォルトでは、これらの基準は</target>
        </trans-unit>
        <trans-unit id="ab5df54074fad35dbef13874a3f7d7d588ce689d" translate="yes" xml:space="preserve">
          <source>By default, this command creates the following:</source>
          <target state="translated">デフォルトでは、このコマンドは以下のように作成します。</target>
        </trans-unit>
        <trans-unit id="ff5efeabdc4761db17da76ed72cd97d01e3582f0" translate="yes" xml:space="preserve">
          <source>By default, this feature is disabled. To enable it, set a global flag before importing &lt;code&gt;zone-testing&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、この機能は無効になっています。これを有効にするには、 &lt;code&gt;zone-testing&lt;/code&gt; をインポートする前にグローバルフラグを設定します。</target>
        </trans-unit>
        <trans-unit id="737d872d4aa1137431d336c09f5cba06097c9d53" translate="yes" xml:space="preserve">
          <source>By default, this is true, unless a user calls &lt;code&gt;&lt;a href=&quot;enableprodmode&quot;&gt;enableProdMode&lt;/a&gt;&lt;/code&gt; before calling this.</source>
          <target state="translated">ユーザーが &lt;code&gt;&lt;a href=&quot;enableprodmode&quot;&gt;enableProdMode&lt;/a&gt;&lt;/code&gt; を呼び出す前にenableProdModeを呼び出さない限り、デフォルトでこれはtrue です。</target>
        </trans-unit>
        <trans-unit id="895cfca638aab96c2e4c68a44a374a362e111c0c" translate="yes" xml:space="preserve">
          <source>By default, throws an error when zero items are found. Set the &lt;code&gt;&lt;a href=&quot;animationqueryoptions#optional&quot;&gt;optional&lt;/a&gt;&lt;/code&gt; flag to ignore this error. For example:</source>
          <target state="translated">デフォルトでは、アイテムが見つからない場合にエラーをスローします。このエラーを無視するには、 &lt;code&gt;&lt;a href=&quot;animationqueryoptions#optional&quot;&gt;optional&lt;/a&gt;&lt;/code&gt; フラグを設定します。例えば：</target>
        </trans-unit>
        <trans-unit id="5fd5fcb1072b92b6f5bc472ee47670880fb0c5a7" translate="yes" xml:space="preserve">
          <source>By default, throws an error when zero items are found. Set the &lt;code&gt;optional&lt;/code&gt; flag to ignore this error. For example:</source>
          <target state="translated">デフォルトでは、アイテムがゼロの場合にエラーをスローします。このエラーを無視するには、 &lt;code&gt;optional&lt;/code&gt; フラグを設定します。例えば：</target>
        </trans-unit>
        <trans-unit id="0b38aef427efb542e3ceae80895c955069c64dfc" translate="yes" xml:space="preserve">
          <source>By default, when a translation is missing, the build succeeds but generates a warning such as &lt;code&gt;Missing translation for &lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt; &quot;foo&quot;&lt;/code&gt;. You can configure the level of warning that is generated by the Angular compiler:</source>
          <target state="translated">デフォルトでは、翻訳が見つからない場合、ビルドは成功しますが &lt;code&gt;Missing translation for &lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt; &quot;foo&quot;&lt;/code&gt; などの警告が生成されます。Angularコンパイラーによって生成される警告のレベルを構成できます。</target>
        </trans-unit>
        <trans-unit id="dfa3ff650bd670a309dbed225d522ed208796f63" translate="yes" xml:space="preserve">
          <source>By default, when you use this pattern, you will see a deprecation warning once in dev mode. You can choose to silence this warning by providing a config for &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; at import time:</source>
          <target state="translated">デフォルトでは、このパターンを使用すると、開発モードで非推奨の警告が1回表示されます。インポート時に &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; の構成を提供することにより、この警告を消音することを選択できます。</target>
        </trans-unit>
        <trans-unit id="3f88cf4b54ca18c2f47342d965f1bdec83e0be88" translate="yes" xml:space="preserve">
          <source>By default, when you use this pattern, you will see a deprecation warning once in dev mode. You can choose to silence this warning by providing a config for &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; at import time:</source>
          <target state="translated">デフォルトでは、このパターンを使用すると、開発モードで非推奨の警告が一度表示されます。インポート時に &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; の構成を提供することで、この警告を止めるように選択できます。</target>
        </trans-unit>
        <trans-unit id="04e414d22540c0f1ae4f946db786ae55fdc12b7a" translate="yes" xml:space="preserve">
          <source>By default, writes output to a folder named dist/ in the current project.</source>
          <target state="translated">デフォルトでは、現在のプロジェクト内のdist/という名前のフォルダに出力を書き込みます。</target>
        </trans-unit>
        <trans-unit id="c3cb8d70cbac2bcc7e76ff885542f0fcc2ff7f4e" translate="yes" xml:space="preserve">
          <source>By following a few guidelines, you can use property binding in a way that helps you minimize bugs and keep your code readable.</source>
          <target state="translated">いくつかのガイドラインに従うことで、プロパティバインディングを使用してバグを最小限に抑え、コードを読みやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="1b9271c7490bf52784e0cec6bc3721d628648332" translate="yes" xml:space="preserve">
          <source>By injecting the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, you are configuring the component to use a &lt;em&gt;service&lt;/em&gt;. The &lt;a href=&quot;https://angular.io/start/start/start-data&quot;&gt;Managing Data&lt;/a&gt; page covers services in more detail.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を挿入することにより、&lt;em&gt;サービス&lt;/em&gt;を使用するようにコンポーネントを構成します。[&lt;a href=&quot;https://angular.io/start/start/start-data&quot;&gt;データ&lt;/a&gt;の管理]ページでは、サービスについて詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="acd1c464bf12f5fb5b52349cdf92a0a00b334436" translate="yes" xml:space="preserve">
          <source>By pasting a &quot;deep link&quot; URL into the browser address bar that identifies the hero to display.</source>
          <target state="translated">ブラウザのアドレスバーに「ディープリンク」のURLを貼り付けることで、表示するヒーローを特定します。</target>
        </trans-unit>
        <trans-unit id="bde6963f476446a45cc29e3b93aaf4ef55f49da3" translate="yes" xml:space="preserve">
          <source>By providing &lt;code&gt;VillainsService&lt;/code&gt; in the &lt;code&gt;VillainsListComponent&lt;/code&gt; metadata and nowhere else, the service becomes available only in the &lt;code&gt;VillainsListComponent&lt;/code&gt; and its sub-component tree.</source>
          <target state="translated">&lt;code&gt;VillainsListComponent&lt;/code&gt; メタデータで &lt;code&gt;VillainsService&lt;/code&gt; を提供するだけで、サービスは &lt;code&gt;VillainsListComponent&lt;/code&gt; とそのサブコンポーネントツリーでのみ使用可能になります。</target>
        </trans-unit>
        <trans-unit id="22e598ce57a7b24da0404d550c8e77311fe81cd0" translate="yes" xml:space="preserve">
          <source>By re-exporting &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, any other module that imports this &lt;code&gt;SharedModule&lt;/code&gt;, gets access to directives like &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and can bind to component properties with &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt;, a directive in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">再エクスポートして &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 輸入このすなわち、他のモジュール &lt;code&gt;SharedModule&lt;/code&gt; 、等ディレクティブへのアクセスを取得 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;NgFor&lt;/code&gt; をより &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; とを有する成分の特性と結合することができる &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 、で指令 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="283fdefdd6d1f0a83829f00ef235e73a7152b4e1" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; メタデータを設定する。</target>
        </trans-unit>
        <trans-unit id="4341b69200e3b14c9db44ea2c736fe081b32c06c" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;styleUrls&lt;/code&gt; metadata.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;styleUrls&lt;/code&gt; メタデータを設定する。</target>
        </trans-unit>
        <trans-unit id="5608c797c242885100944e126f63aad39aac2d18" translate="yes" xml:space="preserve">
          <source>By supplying an object in the same shape, you satisfy the expectations of &lt;code&gt;items&lt;/code&gt; when Angular evaluates the expression &lt;code&gt;currentItems&lt;/code&gt;.</source>
          <target state="translated">同じ形状のオブジェクトを提供することで、Angularが式 &lt;code&gt;currentItems&lt;/code&gt; を評価するときに &lt;code&gt;items&lt;/code&gt; の期待に応えます。</target>
        </trans-unit>
        <trans-unit id="6cec4402059ea00c6d712a42340d4c89e450d6df" translate="yes" xml:space="preserve">
          <source>By the end of this tutorial you will be able to do the following:</source>
          <target state="translated">このチュートリアルが終わる頃には、以下のことができるようになります。</target>
        </trans-unit>
        <trans-unit id="f210331839801b71d9bdc60036a3a6c72ef3ca14" translate="yes" xml:space="preserve">
          <source>By transcluding or projecting content from the other framework. ngUpgrade bridges the related concepts of AngularJS transclusion and Angular content projection together.</source>
          <target state="translated">ngUpgradeは、AngularJSのトランスクルージョンとAngularコンテンツのプロジェクションという関連概念の橋渡しをしています。</target>
        </trans-unit>
        <trans-unit id="dadb9f1898ae42aeddccb80695bb2ff36cdd5430" translate="yes" xml:space="preserve">
          <source>By using a component from the other framework: An AngularJS template using an Angular component, or an Angular template using an AngularJS component.</source>
          <target state="translated">他のフレームワークのコンポーネントを使うことで Angularコンポーネントを使ったAngularJSテンプレート、またはAngularJSコンポーネントを使ったAngularテンプレート。</target>
        </trans-unit>
        <trans-unit id="6d317743f301e033fe05c5da5516eefef9fab01e" translate="yes" xml:space="preserve">
          <source>By using the In-memory Web API, you won't have to set up a server to learn about &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">インメモリWeb APIを使用すると、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; について学習するためにサーバーを設定する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="24b79b9a8cccf72bf74da2766e3aa142e67bff38" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be a safe resource URL, i.e. a location that may be used to load executable code from, like &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">セキュリティをバイパスし、指定された値を安全なリソースURL、つまり &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; などの実行可能コードをロードするために使用できる場所であると信頼します。</target>
        </trans-unit>
        <trans-unit id="3db6a85413c3a62448f8e24b9cd62b97af777782" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used in hyperlinks or &lt;code&gt;&amp;lt;img src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">セキュリティをバイパスし、指定された値を安全なスタイルのURL、つまりハイパーリンクまたは &lt;code&gt;&amp;lt;img src&amp;gt;&lt;/code&gt; で使用できる値であると信頼します。</target>
        </trans-unit>
        <trans-unit id="0a85a9de1b624d9a281f803426a0c32bef3e8171" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML is unsafe (e.g. contains &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags) and the code should be executed. The sanitizer will leave safe HTML intact, so in most situations this method should not be used.</source>
          <target state="translated">セキュリティをバイパスし、指定された値を安全なHTMLとして信頼します。これは、バインドされたHTMLが安全でなく（たとえば、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグが含まれている）、コードを実行する必要がある場合にのみ使用してください。消毒剤は安全なHTMLをそのまま残しますので、ほとんどの状況でこの方法は使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="22734a3b413e2ed5c26b1b233ef8006fccfd2ce7" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be safe JavaScript.</source>
          <target state="translated">セキュリティをバイパスして、与えられた値を安全なJavaScriptに信頼します。</target>
        </trans-unit>
        <trans-unit id="589711522f3adf8b9c47b84407ddfb6f212d4894" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be safe style value (CSS).</source>
          <target state="translated">セキュリティをバイパスして、与えられた値を安全なスタイル値(CSS)として信頼します。</target>
        </trans-unit>
        <trans-unit id="8da3c14fe68d007dd948bc0a37349c8d84280bcd" translate="yes" xml:space="preserve">
          <source>Bypass the proxy</source>
          <target state="translated">プロキシのバイパス</target>
        </trans-unit>
        <trans-unit id="06a4bea2f3447ba097746f02424c164f98dfee16" translate="yes" xml:space="preserve">
          <source>Bypassing the service worker</source>
          <target state="translated">サービスワーカーの迂回</target>
        </trans-unit>
        <trans-unit id="f5affc58f041a61d25e56378d8de2497b1d1db58" translate="yes" xml:space="preserve">
          <source>CLDR and Angular base their identifiers on &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47 tags&lt;/a&gt;.</source>
          <target state="translated">CLDRとAngularは、&lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47タグ&lt;/a&gt;に基づいて識別子を作成します。</target>
        </trans-unit>
        <trans-unit id="37a7892d0df4e20dffd1da4a2ba8cfb9cc8d059d" translate="yes" xml:space="preserve">
          <source>CLDR website</source>
          <target state="translated">CLDRウェブサイト</target>
        </trans-unit>
        <trans-unit id="f3f49e2d65f9b334363f376775aeebd652cb905d" translate="yes" xml:space="preserve">
          <source>CLI Overview and Command Reference</source>
          <target state="translated">CLIの概要とコマンドリファレンス</target>
        </trans-unit>
        <trans-unit id="0e92b110d4f6d555eade5dd441fe110ec6d62ab6" translate="yes" xml:space="preserve">
          <source>CLI builders</source>
          <target state="translated">CLI ビルダー</target>
        </trans-unit>
        <trans-unit id="6b72ce98d68681f85db235c515ed234796b0ca1c" translate="yes" xml:space="preserve">
          <source>CLI command-language syntax</source>
          <target state="translated">CLIコマンド言語構文</target>
        </trans-unit>
        <trans-unit id="0bf433ec5cf4675ef3c8596d8512dfdab2f6f0fd" translate="yes" xml:space="preserve">
          <source>CLI configuration defaults for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;, &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;, and &lt;a href=&quot;http://www.protractortest.org/&quot;&gt;Protractor&lt;/a&gt;. For details, see &lt;a href=&quot;workspace-config&quot;&gt;Angular Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;、&lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;、&lt;a href=&quot;http://www.protractortest.org/&quot;&gt;Protractor&lt;/a&gt;など、CLIが使用するビルド、サーブ、およびテストツールの構成オプションを含む、ワークスペース内のすべてのプロジェクトのCLI構成のデフォルト。詳細については、&lt;a href=&quot;workspace-config&quot;&gt;Angular Workspace Configurationを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8caf1ee0de7eeac9fea3c587a7f16ec05c4f45cf" translate="yes" xml:space="preserve">
          <source>CLI-generated tests</source>
          <target state="translated">CLI生成テスト</target>
        </trans-unit>
        <trans-unit id="84e0fad234061448b6aeb61b281e3307ef9f497c" translate="yes" xml:space="preserve">
          <source>COMPILER_OPTIONS</source>
          <target state="translated">COMPILER_OPTIONS</target>
        </trans-unit>
        <trans-unit id="6d430c3fc0de431b42a6f7090a75092e0f1d2fc3" translate="yes" xml:space="preserve">
          <source>COMPOSITION_BUFFER_MODE</source>
          <target state="translated">COMPOSITION_BUFFER_MODE</target>
        </trans-unit>
        <trans-unit id="194e13da720a1f025685e5d677eba8a1aff3860a" translate="yes" xml:space="preserve">
          <source>CSS</source>
          <target state="translated">CSS</target>
        </trans-unit>
        <trans-unit id="4078e32911d6f5d679797645f636c7e696b15e8e" translate="yes" xml:space="preserve">
          <source>CSS @imports</source>
          <target state="translated">CSS @imports</target>
        </trans-unit>
        <trans-unit id="8341ce8d88650eb66817af40baa993cf445ec2f2" translate="yes" xml:space="preserve">
          <source>CSS classes applied</source>
          <target state="translated">適用されるCSSクラス</target>
        </trans-unit>
        <trans-unit id="b9b5583437724ee43c4c64a2eb01060aaf2595c8" translate="yes" xml:space="preserve">
          <source>CSS grid layout support in Autoprefixer, which was previously on by default, is off by default in Angular 8 and higher.</source>
          <target state="translated">これまでデフォルトでオンになっていたAutoprefixerのCSSグリッドレイアウトサポートが、Angular 8以降ではデフォルトでオフになっています。</target>
        </trans-unit>
        <trans-unit id="6e11144489b2f269249757fca859d7096307f304" translate="yes" xml:space="preserve">
          <source>CUSTOM_ELEMENTS_SCHEMA</source>
          <target state="translated">CUSTOM_ELEMENTS_SCHEMA</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="4a00e5c16a57baab50a03051316c6b1d58d8a227" translate="yes" xml:space="preserve">
          <source>Caching HTTP requests</source>
          <target state="translated">HTTP リクエストのキャッシュ</target>
        </trans-unit>
        <trans-unit id="4f7d7a23879dbe205ad31457186146482db2c33f" translate="yes" xml:space="preserve">
          <source>Caching an application is like installing a native application. The application is cached as one unit, and all files update together.</source>
          <target state="translated">アプリケーションのキャッシュは、ネイティブアプリケーションをインストールするようなものです。アプリケーションは一つのユニットとしてキャッシュされ、すべてのファイルが一緒に更新されます。</target>
        </trans-unit>
        <trans-unit id="c7dcd8556967edbf9dc15b2dd9c7696a8a73d43b" translate="yes" xml:space="preserve">
          <source>Caching behavior; for example, &lt;code&gt;If-Modified-Since&lt;/code&gt;</source>
          <target state="translated">キャッシュ動作; たとえば、 &lt;code&gt;If-Modified-Since&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b46de0011e7af89a350bd98b9a1fd29a77cc8cf3" translate="yes" xml:space="preserve">
          <source>Caching layers in between the origin server and the end user could serve stale content.</source>
          <target state="translated">オリジンサーバーとエンドユーザーの間にあるキャッシュ層は、陳腐なコンテンツを提供する可能性があります。</target>
        </trans-unit>
        <trans-unit id="261eb580b5dbd737463584be0e96288856d0fcff" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; methods &lt;em&gt;within&lt;/em&gt; a &lt;code&gt;beforeEach()&lt;/code&gt; to ensure a fresh start before each individual test.</source>
          <target state="translated">コールは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; のメソッド&lt;em&gt;内で&lt;/em&gt; &lt;code&gt;beforeEach()&lt;/code&gt; 個々のテストの前に新たなスタートを確実にするために。</target>
        </trans-unit>
        <trans-unit id="55478a8e2da2b9d13233927ad4ce964932c556ef" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;configureTestingModule&lt;/code&gt; to refine the testing module configuration for a particular set of tests by adding and removing imports, declarations (of components, directives, and pipes), and providers.</source>
          <target state="translated">&lt;code&gt;configureTestingModule&lt;/code&gt; を呼び出して、インポート、（コンポーネント、ディレクティブ、パイプの）宣言、およびプロバイダーを追加および削除して、特定のテストセットのテストモジュール構成を調整します。</target>
        </trans-unit>
        <trans-unit id="8cc3a4f15b0cb9d21d181ba24371c672d6b47e7d" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;request.flush()&lt;/code&gt; with an error message, as seen in the following example.</source>
          <target state="translated">次の例に示すように、エラーメッセージを指定して &lt;code&gt;request.flush()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="57c7fc903cfd1566d2b98e6e679bed67b09b10a6" translate="yes" xml:space="preserve">
          <source>Call it in &lt;code&gt;ngOnInit()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; で呼び出す</target>
        </trans-unit>
        <trans-unit id="6027ee4df59b4012aaea1f2c5f4181d0bf2a7184" translate="yes" xml:space="preserve">
          <source>Call it to initialize the component (it calls &lt;code&gt;ngOnInit&lt;/code&gt;) and after your test code, change the component's data bound property values. Angular can't see that you've changed &lt;code&gt;personComponent.name&lt;/code&gt; and won't update the &lt;code&gt;name&lt;/code&gt; binding until you call &lt;code&gt;detectChanges&lt;/code&gt;.</source>
          <target state="translated">これを呼び出してコンポーネントを初期化し（ &lt;code&gt;ngOnInit&lt;/code&gt; を呼び出します）、テストコードの後で、コンポーネントのデータバインドプロパティ値を変更します。Angularは &lt;code&gt;personComponent.name&lt;/code&gt; を変更したことを認識できず、 &lt;code&gt;detectChanges&lt;/code&gt; を呼び出すまで &lt;code&gt;name&lt;/code&gt; バインディングを更新しません。</target>
        </trans-unit>
        <trans-unit id="98e5babeab32e45e806fbc3b19174a99b11c23ca" translate="yes" xml:space="preserve">
          <source>Call within an animation &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call to specify an animation step that applies given style data to the parent animation for a given amount of time.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 呼び出し内で呼び出して、指定された時間の間、指定されたスタイルデータを親アニメーションに適用するアニメーションステップを指定します。</target>
        </trans-unit>
        <trans-unit id="84da34ba3c53494d567b871aef04caf7757b12ec" translate="yes" xml:space="preserve">
          <source>Callback that is invoked when the event is triggered.</source>
          <target state="translated">イベントがトリガーされたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="1771add456fd5236fb4ceb3907b9902363284a43" translate="yes" xml:space="preserve">
          <source>Callbacks can serve as a debugging tool, for example in conjunction with &lt;code&gt;console.warn()&lt;/code&gt; to view the application's progress in a browser's Developer JavaScript Console. The following code snippet creates console log output for our original example, a button with the two states of &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="translated">コールバックは、たとえば &lt;code&gt;console.warn()&lt;/code&gt; と組み合わせて、ブラウザーの開発者JavaScriptコンソールでアプリケーションの進行状況を表示するデバッグツールとして機能できます。次のコードスニペットは、元の例のコンソールログ出力、 &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; の 2つの状態を持つボタンを作成します。</target>
        </trans-unit>
        <trans-unit id="cf0bd107ea07339c2f1afab870d4c21149db9a49" translate="yes" xml:space="preserve">
          <source>Callbacks can serve as a debugging tool, for example in conjunction with &lt;code&gt;console.warn()&lt;/code&gt; to view the application's progress in a browser's Developer JavaScript Console. The following code snippet creates console log output for the original example, a button with the two states of &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="translated">コールバックは、たとえば &lt;code&gt;console.warn()&lt;/code&gt; と組み合わせてデバッグツールとして機能し、ブラウザーのDeveloper JavaScriptConsoleでアプリケーションの進行状況を表示できます。次のコードスニペットは、元の例のコンソールログ出力（ &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; いる状態の2つのボタン）を作成します。</target>
        </trans-unit>
        <trans-unit id="760346b355881672a0a6d496758fb65d68eaf88c" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;just before&lt;/em&gt; Angular destroys the directive/component.</source>
          <target state="translated">Angularがディレクティブ/コンポーネントを破棄する&lt;em&gt;直前に&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b43d88a726fcdc88f9eb54c0fd5d13581ff0616e" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;once&lt;/em&gt; after the first &lt;code&gt;ngAfterContentChecked()&lt;/code&gt;.</source>
          <target state="translated">最初の &lt;code&gt;ngAfterContentChecked()&lt;/code&gt; の後で1 &lt;em&gt;回&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dec40bf1cbc2faab1a865283dcd9baa5bb7dfd6f" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;once&lt;/em&gt; after the first &lt;code&gt;ngDoCheck()&lt;/code&gt;.</source>
          <target state="translated">最初の &lt;code&gt;ngDoCheck()&lt;/code&gt; の後で1 &lt;em&gt;回&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ed61dce56e76b70f3a1dafc6de01c809ad00c2df" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;once&lt;/em&gt;, after the &lt;em&gt;first&lt;/em&gt;&lt;code&gt;ngOnChanges()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;最初の&lt;/em&gt; &lt;code&gt;ngOnChanges()&lt;/code&gt; の後で&lt;em&gt;1 &lt;/em&gt;&lt;em&gt;回&lt;/em&gt;呼び出されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="64374a1b60c7af8c460e602db455a8bfdf41c58d" translate="yes" xml:space="preserve">
          <source>Called after &lt;code&gt;ngAfterContentInit()&lt;/code&gt; and every subsequent &lt;code&gt;ngDoCheck()&lt;/code&gt;.</source>
          <target state="translated">後に呼び出され &lt;code&gt;ngAfterContentInit()&lt;/code&gt; と後続のすべての &lt;code&gt;ngDoCheck()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9940e1eeb5a7c145f2b10ef2094d91adf0e011e" translate="yes" xml:space="preserve">
          <source>Called after &lt;code&gt;ngAfterContentInit&lt;/code&gt; when the component's views and child views / the view that a directive is in has been initialized.</source>
          <target state="translated">コンポーネントのビューと子ビュー/ディレクティブが含まれるビューが初期化されたときに &lt;code&gt;ngAfterContentInit&lt;/code&gt; の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c0e8308ef6731afacab2d2cf1a1d82e6d5d18c59" translate="yes" xml:space="preserve">
          <source>Called after &lt;code&gt;ngOnInit&lt;/code&gt; when the component's or directive's content has been initialized.</source>
          <target state="translated">コンポーネントまたはディレクティブのコンテンツが初期化されたときに &lt;code&gt;ngOnInit&lt;/code&gt; の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3abf88459dea9d48107a15886f727107471dbb96" translate="yes" xml:space="preserve">
          <source>Called after every change to input properties and before processing content or child views.</source>
          <target state="translated">入力プロパティを変更した後、コンテンツや子ビューを処理する前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a130609bac88d5543ea30ad6133139b03b01ecf7" translate="yes" xml:space="preserve">
          <source>Called after every check of the component's or directive's content.</source>
          <target state="translated">コンポーネントやディレクティブの内容をチェックするたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0a0e3aa13b4388685cf9d7c3507f3e1ee153db1a" translate="yes" xml:space="preserve">
          <source>Called after every check of the component's views and child views / the view that a directive is in.</source>
          <target state="translated">コンポーネントのビューと子ビュー/ディレクティブが存在するビューをチェックした後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1f8068273dc6ecea537534ade623776122365e21" translate="yes" xml:space="preserve">
          <source>Called after the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; and every subsequent &lt;code&gt;ngAfterContentChecked()&lt;/code&gt;.</source>
          <target state="translated">後に呼び出され &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; と後続のすべての &lt;code&gt;ngAfterContentChecked()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b5705918e476cb904b5fa668ed214206ec73591" translate="yes" xml:space="preserve">
          <source>Called after the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; and every subsequent &lt;code&gt;ngDoCheck()&lt;/code&gt;.</source>
          <target state="translated">後に呼び出され &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; と後続のすべての &lt;code&gt;ngDoCheck()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9a80e9c33c7f59d78520eafadb2f0aa69e69f8e" translate="yes" xml:space="preserve">
          <source>Called after the &lt;code&gt;ngAfterViewInit()&lt;/code&gt; and every subsequent &lt;code&gt;ngAfterContentChecked()&lt;/code&gt;.</source>
          <target state="translated">後に呼び出され &lt;code&gt;ngAfterViewInit()&lt;/code&gt; と後続のすべての &lt;code&gt;ngAfterContentChecked()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60f0d6f5d02969dcc38e9b8f7dab33c5b8ec6a67" translate="yes" xml:space="preserve">
          <source>Called after the constructor, initializing input properties, and the first call to &lt;code&gt;ngOnChanges&lt;/code&gt;.</source>
          <target state="translated">コンストラクター、入力プロパティの初期化、および &lt;code&gt;ngOnChanges&lt;/code&gt; の最初の呼び出しの後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3992a9223eaa475ee02765bb281acfe9016e9587" translate="yes" xml:space="preserve">
          <source>Called before &lt;code&gt;ngOnInit()&lt;/code&gt; and whenever one or more data-bound input properties change.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; の前、および1つ以上のデータバインド入力プロパティが変更されるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="338e219ba9c4ad2d93a1252ea07e78fcd5812653" translate="yes" xml:space="preserve">
          <source>Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.</source>
          <target state="translated">他のライフサイクルフックの前に呼び出されます。依存関係を注入するために使用しますが、ここでの深刻な作業は避けてください。</target>
        </trans-unit>
        <trans-unit id="079a33e34b46ed902e2756f083cec3f074677ba5" translate="yes" xml:space="preserve">
          <source>Called during every change detection run, immediately after &lt;code&gt;ngOnChanges()&lt;/code&gt; and &lt;code&gt;ngOnInit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngOnChanges()&lt;/code&gt; および &lt;code&gt;ngOnInit()&lt;/code&gt; の直後に、すべての変更検出の実行中に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f2a8186d4eef069a787d88d5ad608795d2a3b749" translate="yes" xml:space="preserve">
          <source>Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.</source>
          <target state="translated">コンポーネントやディレクティブの入力プロパティがチェックされるたびに呼び出されます。カスタムチェックを行うことで変更検出を拡張するために使用します。</target>
        </trans-unit>
        <trans-unit id="fd8ef97c868d0922416a717fffd8cf2b0882722f" translate="yes" xml:space="preserve">
          <source>Called immediately after &lt;code&gt;ngOnChanges()&lt;/code&gt; on every change detection run, and immediately after &lt;code&gt;ngOnInit()&lt;/code&gt; on the first run.</source>
          <target state="translated">直後に呼び出され &lt;code&gt;ngOnChanges()&lt;/code&gt; すべての変更検出の実行上、および直後 &lt;code&gt;ngOnInit()&lt;/code&gt; 最初の実行で。</target>
        </trans-unit>
        <trans-unit id="597612f4ee49a109c2cdcd436802f4da5f685c91" translate="yes" xml:space="preserve">
          <source>Called immediately before Angular destroys the directive or component.</source>
          <target state="translated">Angular がディレクティブやコンポーネントを破棄する直前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1338984fc63df896284a6e00cfd721004fb9941d" translate="yes" xml:space="preserve">
          <source>Called once, after the first &lt;code&gt;ngOnChanges()&lt;/code&gt;.</source>
          <target state="translated">最初の &lt;code&gt;ngOnChanges()&lt;/code&gt; の後に1回呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ded11fd49a01c772c26b4a79906617586dfcc389" translate="yes" xml:space="preserve">
          <source>Called once, before the instance is destroyed.</source>
          <target state="translated">インスタンスが破棄される前に一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6370b8dc1866c030c38bf3c5b2f85b9cec9f1e45" translate="yes" xml:space="preserve">
          <source>Called when a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive is destroyed. We need to keep the context as the outlet could be destroyed inside a NgIf and might be re-created later.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ディレクティブが破棄されたときに呼び出されます。アウトレットはNgIf内で破棄され、後で再作成される可能性があるため、コンテキストを維持する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3c27d5c41ab5ae9ad7c8e33864c2395541456d6" translate="yes" xml:space="preserve">
          <source>Called when a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive is instantiated</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ディレクティブがインスタンス化されるときに呼び出されます</target>
        </trans-unit>
        <trans-unit id="bdc03480e95937267c839f086bcde846aaa91db9" translate="yes" xml:space="preserve">
          <source>Called when the &lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; instructs to detach the subtree</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; がサブツリーの分離を指示するときに呼び出されます</target>
        </trans-unit>
        <trans-unit id="da38a77071e29a9e7664a3315f4f4e75e060eafe" translate="yes" xml:space="preserve">
          <source>Called when the &lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; instructs to re-attach a previously detached subtree</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; が以前に切り離されたサブツリーを再接続するように指示したときに呼び出されます</target>
        </trans-unit>
        <trans-unit id="34fa98865ffd00d148b8d531c88a1378d0836148" translate="yes" xml:space="preserve">
          <source>Called when the corresponding route is deactivated during navigation. Because the component get destroyed, all children outlet are destroyed.</source>
          <target state="translated">ナビゲーション中に対応するルートが無効化された場合に呼び出されます。コンポーネントが破壊されるため、すべての子アウトレットが破壊されます。</target>
        </trans-unit>
        <trans-unit id="4416314a4a514ac0405d4addafc155de8726824e" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt; simulates the passage of time until all pending asynchronous activities finish. In this case, it waits for the error handler's &lt;code&gt;setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick（）を&lt;/a&gt;呼び出すと、保留中のすべての非同期アクティビティが終了するまでの時間の経過がシミュレートされます。この場合、エラーハンドラの &lt;code&gt;setTimeout()&lt;/code&gt; を待ちます。</target>
        </trans-unit>
        <trans-unit id="e23fcda0d1a865ac392be3ef0e2925a05f5b0881" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns the first &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; that matches the &lt;a href=&quot;testing#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in the subtree.</source>
          <target state="translated">呼び出す &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; 最初に返し &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 一致する&lt;a href=&quot;testing#query-predicate&quot;&gt;述語を&lt;/a&gt;サブツリー内の任意の深さでは。</target>
        </trans-unit>
        <trans-unit id="6780c4ea1a52e578dd1cdb43b8d0e370db632088" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns the first &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; that matches the &lt;a href=&quot;testing-utility-apis#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in the subtree.</source>
          <target state="translated">呼び出す &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; 最初に返し &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 一致する&lt;a href=&quot;testing-utility-apis#query-predicate&quot;&gt;述語を&lt;/a&gt;サブツリー内の任意の深さでは。</target>
        </trans-unit>
        <trans-unit id="a824c35c2959755fd808822de4dedf95fd4d39cb" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; simulates the passage of time until all pending asynchronous activities finish. In this case, it waits for the error handler's &lt;code&gt;setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; の呼び出しは、保留中のすべての非同期アクティビティが完了するまでの時間の経過をシミュレートします。この場合、エラーハンドラーの &lt;code&gt;setTimeout()&lt;/code&gt; を待ちます。</target>
        </trans-unit>
        <trans-unit id="6f4c225336f28dd3542ea403d4580c5d63d64f06" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;nggetcomponent&quot;&gt;getComponent&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;&amp;lt;child-comp&amp;gt;&lt;/code&gt; will return the instance of &lt;code&gt;ChildComponent&lt;/code&gt; associated with this DOM element.</source>
          <target state="translated">&lt;code&gt;&amp;lt;child-comp&amp;gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;nggetcomponent&quot;&gt;getComponent&lt;/a&gt;&lt;/code&gt; を呼び出すと、このDOM要素に関連付けられた &lt;code&gt;ChildComponent&lt;/code&gt; のインスタンスが返されます。</target>
        </trans-unit>
        <trans-unit id="93e5274d708d865d31203a33a2d93ca9acf10e00" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;nggetdirectives&quot;&gt;getDirectives&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; will return an array with an instance of the &lt;code&gt;MyButton&lt;/code&gt; directive that is associated with the DOM element.</source>
          <target state="translated">&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;nggetdirectives&quot;&gt;getDirectives&lt;/a&gt;&lt;/code&gt; を呼び出すと、DOM要素に関連付けられている &lt;code&gt;MyButton&lt;/code&gt; ディレクティブのインスタンスを含む配列が返されます。</target>
        </trans-unit>
        <trans-unit id="85616fc79aa34b454e7a9c902a50f5731874146a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;nggetdirectives&quot;&gt;getDirectives&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;&amp;lt;my-comp&amp;gt;&lt;/code&gt; will return an empty array.</source>
          <target state="translated">&lt;code&gt;&amp;lt;my-comp&amp;gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;nggetdirectives&quot;&gt;getDirectives&lt;/a&gt;&lt;/code&gt; を呼び出すと、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="321a3cdf8150e134dc2dfaf54f45d308e329a8e4" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;nggetlisteners&quot;&gt;getListeners&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will return an object that looks as follows:</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;nggetlisteners&quot;&gt;getListeners&lt;/a&gt;&lt;/code&gt; を呼び出すと、次のようなオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="792d977d9aaa779fa8591bf191970aec9928a6c0" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;activateUpdate()&lt;/code&gt; without reloading the page could break lazy-loading in a currently running app, especially if the lazy-loaded chunks use filenames with hashes, which change every version. Therefore, it is recommended to reload the page once the promise returned by &lt;code&gt;activateUpdate()&lt;/code&gt; is resolved.</source>
          <target state="translated">ページを再読み込みせずに &lt;code&gt;activateUpdate()&lt;/code&gt; を呼び出すと、現在実行中のアプリで遅延読み込みが中断される可能性があります。特に、遅延読み込みされたチャンクがすべてのバージョンを変更するハッシュ付きのファイル名を使用している場合はそうです。したがって、 &lt;code&gt;activateUpdate()&lt;/code&gt; によって返されたpromiseが解決されたら、ページをリロードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a792f34c98efbd65d1a036e7a6d5db68e24cebe7" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;compileComponents()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;compileComponents()&lt;/code&gt; の呼び出し</target>
        </trans-unit>
        <trans-unit id="c9c757d2f6cb308f6cb586c83e9fc16ef99eaa72" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;compileComponents()&lt;/code&gt; closes the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance to further configuration. You cannot call any more &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration methods, not &lt;code&gt;configureTestingModule()&lt;/code&gt; nor any of the &lt;code&gt;override...&lt;/code&gt; methods. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; throws an error if you try.</source>
          <target state="translated">&lt;code&gt;compileComponents()&lt;/code&gt; を呼び出すと、現在の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インスタンスが閉じて、さらに構成が行われます。これ以上 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成メソッドを呼び出すことはできません。configureTestingModule &lt;code&gt;configureTestingModule()&lt;/code&gt; や &lt;code&gt;override...&lt;/code&gt; メソッドを呼び出すことはできません。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; あなたがしようとした場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="04fae4537b45fe3e42d919ebe7942bee9622a886" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;overrideProvider&lt;/code&gt; before initializing the TestBed will now throw an error. See &lt;a href=&quot;https://github.com/angular/angular/pull/38717&quot;&gt;PR 38717&lt;/a&gt;.</source>
          <target state="translated">TestBedを初期化する前に &lt;code&gt;overrideProvider&lt;/code&gt; を呼び出すと、エラーがスローされるようになりました。&lt;a href=&quot;https://github.com/angular/angular/pull/38717&quot;&gt;PR38717を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="02f2e83289b8c70bc906bf5b04c1061ef6002a40" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;queryAll(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns all &lt;code&gt;DebugElements&lt;/code&gt; that matches the &lt;a href=&quot;testing#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in subtree.</source>
          <target state="translated">呼び出し &lt;code&gt;queryAll(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; すべて返し &lt;code&gt;DebugElements&lt;/code&gt; 一致する&lt;a href=&quot;testing#query-predicate&quot;&gt;述語を&lt;/a&gt;サブツリー内の任意の深さでは。</target>
        </trans-unit>
        <trans-unit id="d4d57d5ce43ac062af6ac547fed6e729bde188fc" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;queryAll(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns all &lt;code&gt;DebugElements&lt;/code&gt; that matches the &lt;a href=&quot;testing-utility-apis#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in subtree.</source>
          <target state="translated">呼び出し &lt;code&gt;queryAll(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; すべて返し &lt;code&gt;DebugElements&lt;/code&gt; 一致する&lt;a href=&quot;testing-utility-apis#query-predicate&quot;&gt;述語を&lt;/a&gt;サブツリー内の任意の深さでは。</target>
        </trans-unit>
        <trans-unit id="c905b75753a481a14356fc6d2b86a0900d82b11b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;setErrors&lt;/code&gt; also updates the validity of the parent control.</source>
          <target state="translated">&lt;code&gt;setErrors&lt;/code&gt; を呼び出すと、親コントロールの有効性も更新されます。</target>
        </trans-unit>
        <trans-unit id="a1c343329d27e796c6369216dce0e24cb05d5809" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;subscribe(...)&lt;/code&gt; triggers execution of the observable and causes &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to compose and send the HTTP request to the server.</source>
          <target state="translated">&lt;code&gt;subscribe(...)&lt;/code&gt; を呼び出すと、オブザーバブルの実行がトリガーされ、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; がHTTPリクエストを作成してサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="ad2dfd54f809b36b4b1c053edef7371ae8619628" translate="yes" xml:space="preserve">
          <source>Calling any of the &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; APIs disables Angular's built-in sanitization for the value passed in. Carefully check and audit all values and code paths going into this call. Make sure any user data is appropriately escaped for this security context. For more detail, see the &lt;a href=&quot;http://g.co/ng/security&quot;&gt;Security Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bypassSecurityTrust...&lt;/code&gt; APIのいずれかを呼び出すと、渡された値に対するAngularの組み込みのサニタイズが無効になります。この呼び出しに入るすべての値とコードパスを慎重に確認および監査してください。このセキュリティコンテキストでユーザーデータが適切にエスケープされていることを確認してください。詳細については、 『&lt;a href=&quot;http://g.co/ng/security&quot;&gt;セキュリティガイド』を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eb4c4acb54d9d90b1dc3285d3d43dd9233df61f2" translate="yes" xml:space="preserve">
          <source>Calling the function on &lt;code&gt;&amp;lt;my-app&amp;gt;&lt;/code&gt; will return the &lt;code&gt;MyApp&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&amp;lt;my-app&amp;gt;&lt;/code&gt; で関数を呼び出すと、 &lt;code&gt;MyApp&lt;/code&gt; インスタンスが返されます。</target>
        </trans-unit>
        <trans-unit id="bdb81e7cc6d31b5ab7893b8f4c6563164aa2b633" translate="yes" xml:space="preserve">
          <source>Callouts</source>
          <target state="translated">Callouts</target>
        </trans-unit>
        <trans-unit id="9d34b10af87e2cc9ccbc0459df289025ef6c7c79" translate="yes" xml:space="preserve">
          <source>Callouts are meant to grab the user's attention. They are not for casual asides. Please use them sparingly.</source>
          <target state="translated">吹き出しはユーザーの注意を引くためのものです。彼らはカジュアルな余談のためのものではありません。控えめに使用してください。</target>
        </trans-unit>
        <trans-unit id="ab3c3e0b5de6c6e0e7dca5076e6ad88d9df7c7e1" translate="yes" xml:space="preserve">
          <source>Callouts use the same &lt;em&gt;urgency levels&lt;/em&gt; that alerts do.</source>
          <target state="translated">コールアウトは、アラートと同じ&lt;em&gt;緊急度レベル&lt;/em&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="505a7e75cfac8596300522544e26062f958a48a4" translate="yes" xml:space="preserve">
          <source>Callouts, like alerts, are meant to draw attention to important points. Use a callout when you want a riveting header and multi-line content.</source>
          <target state="translated">吹き出しは、アラートのように、重要なポイントに注目してもらうためのものです。リベットのようなヘッダーと複数行のコンテンツが必要な場合は、吹き出しを使用します。</target>
        </trans-unit>
        <trans-unit id="0a19b7e26b2ba75ac27255f31f21e98a34d62953" translate="yes" xml:space="preserve">
          <source>Calls</source>
          <target state="translated">Calls</target>
        </trans-unit>
        <trans-unit id="c7458f20cc67730b3cfc74274de606821b58649f" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; on the view that is leaving, to run its child animations.</source>
          <target state="translated">終了するビューで &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; を呼び出して、子アニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="054740b116bb7ad21ec189e277687edb090d5e7a" translate="yes" xml:space="preserve">
          <source>Calls method &lt;code&gt;readRainbow&lt;/code&gt; when a click event is triggered on this button element (or its children) and passes in the event object.</source>
          <target state="translated">このボタン要素（またはその子）でクリックイベントがトリガーされたときにメソッド &lt;code&gt;readRainbow&lt;/code&gt; を呼び出し、イベントオブジェクトに渡します。</target>
        </trans-unit>
        <trans-unit id="9ec80b36df3dfad6ec2a2e4c829bb5c8f1486470" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; method on the new view to run its child animations after the main animation completes.</source>
          <target state="translated">新しいビューで &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; メソッドを呼び出して、メインアニメーションの完了後に子アニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="20b5d8714282fb0a73c671dbc1257f65ec30bfa4" translate="yes" xml:space="preserve">
          <source>Can I re-export classes and modules?</source>
          <target state="translated">クラスやモジュールを再インポートすることはできますか?</target>
        </trans-unit>
        <trans-unit id="909f15135d74304c1d1061422b73388345640cf1" translate="yes" xml:space="preserve">
          <source>Can be used to instruct the template compiler to produce &lt;code&gt;.metadata.json&lt;/code&gt; files for distribution with an &lt;code&gt;npm&lt;/code&gt; package while avoiding the production of &lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt; files that cannot be distributed to &lt;code&gt;npm&lt;/code&gt;.</source>
          <target state="translated">生成するためのテンプレートコンパイラに指示するために使用することができます &lt;code&gt;.metadata.json&lt;/code&gt; と配布用のファイル &lt;code&gt;npm&lt;/code&gt; の生産回避しながらパッケージを &lt;code&gt;.ngfactory.js&lt;/code&gt; と &lt;code&gt;.ngstyle.js&lt;/code&gt; に配布することができないファイル &lt;code&gt;npm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f36799879d0cf41af5b4c27f7d960b58598905d" translate="yes" xml:space="preserve">
          <source>Can be used to wrap inject() calls.</source>
          <target state="translated">inject()の呼び出しをラップするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="eeca2657940329cf291b081d93f9892584f17b53" translate="yes" xml:space="preserve">
          <source>Can be used together with other parameter decorators that modify how dependency injection operates.</source>
          <target state="translated">依存性インジェクションの動作を変更する他のパラメータデコレータと一緒に使用することができます。</target>
        </trans-unit>
        <trans-unit id="b41daf8b17e839983b484ba6d073adc7e542e89e" translate="yes" xml:space="preserve">
          <source>Can change a tax return without affecting a return in another component.</source>
          <target state="translated">他のコンポーネントの申告書に影響を与えずに申告書を変更することができます。</target>
        </trans-unit>
        <trans-unit id="c9100670ff9a13c528e1d1a5b727b0630c83c454" translate="yes" xml:space="preserve">
          <source>Can contain &lt;em&gt;host views&lt;/em&gt; (created by instantiating a component with the &lt;code&gt;createComponent()&lt;/code&gt; method), and &lt;em&gt;embedded views&lt;/em&gt; (created by instantiating a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;createEmbeddedView()&lt;/code&gt; method).</source>
          <target state="translated">&lt;em&gt;ホストビュー&lt;/em&gt;（ &lt;code&gt;createComponent()&lt;/code&gt; メソッドを使用してコンポーネントをインスタンス化することによって作成される）、および&lt;em&gt;埋め込みビュー&lt;/em&gt;（ &lt;code&gt;createEmbeddedView()&lt;/code&gt; メソッドを使用して &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; をインスタンス化することによって作成される）を含めることができます。</target>
        </trans-unit>
        <trans-unit id="6904ca2fb9f0915a919fc5e9a9879f3583b0ff87" translate="yes" xml:space="preserve">
          <source>Can the user actually select the hero displayed by &lt;code&gt;DashboardHeroComponent&lt;/code&gt;?</source>
          <target state="translated">ユーザーは、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; によって表示されたヒーローを実際に選択できますか？</target>
        </trans-unit>
        <trans-unit id="180f5279c67f2eeb8b2298fb91ef00bb31f943f7" translate="yes" xml:space="preserve">
          <source>CanActivate</source>
          <target state="translated">CanActivate</target>
        </trans-unit>
        <trans-unit id="503b1aee292a84a5015a1b05f05d75a1b4bb3b78" translate="yes" xml:space="preserve">
          <source>CanActivateChild</source>
          <target state="translated">CanActivateChild</target>
        </trans-unit>
        <trans-unit id="22ee059e4c3b96beb90cacc882d7bc9f311ba0ef" translate="yes" xml:space="preserve">
          <source>CanDeactivate</source>
          <target state="translated">CanDeactivate</target>
        </trans-unit>
        <trans-unit id="a043a9144fd1167b1a2529e7a366de5b9973fd0a" translate="yes" xml:space="preserve">
          <source>CanLoad</source>
          <target state="translated">CanLoad</target>
        </trans-unit>
        <trans-unit id="1fab6a02d9a28f3ff9036951307010813ac79bc0" translate="yes" xml:space="preserve">
          <source>CanLoad blocks preload</source>
          <target state="translated">CanLoad ブロックプリロード</target>
        </trans-unit>
        <trans-unit id="07f74d08e03072e546e3877aef507f93c09e6839" translate="yes" xml:space="preserve">
          <source>Cancel and save</source>
          <target state="translated">キャンセルして保存</target>
        </trans-unit>
        <trans-unit id="b496c07eb5af98f1ed2e504cdf9e47afef8c701c" translate="yes" xml:space="preserve">
          <source>Cancel ongoing AJAX requests if their results will be invalidated by the updated results.</source>
          <target state="translated">更新された結果によって結果が無効になる場合、進行中のAJAXリクエストをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="319aaae4dec46a75861fd10bcf8d182f4a77298d" translate="yes" xml:space="preserve">
          <source>Cancellation</source>
          <target state="translated">Cancellation</target>
        </trans-unit>
        <trans-unit id="bff56e1549fd7a6a5f354ee4a0ca235953d70f07" translate="yes" xml:space="preserve">
          <source>Cannot assign to template variables</source>
          <target state="translated">テンプレート変数に代入できない</target>
        </trans-unit>
        <trans-unit id="0b34940b15c08ee3ff0e607747050d9f6089f16f" translate="yes" xml:space="preserve">
          <source>Capture a state change between any states:</source>
          <target state="translated">任意の状態間の状態変化をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="d6f2ba4c017e10b7dd998487ea0fdc703f74b715" translate="yes" xml:space="preserve">
          <source>Capture the current value and validation status of a form.</source>
          <target state="translated">フォームの現在の値と検証状況をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="25b5675f764dc11bb7d0d407aa9e9c830c51d4dc" translate="yes" xml:space="preserve">
          <source>Care should be taken that if an &lt;code&gt;ngAcceptInputType_&lt;/code&gt; override is present for a given input, then the setter should be able to handle any values of the overridden type.</source>
          <target state="translated">ケア場合に取るべき &lt;code&gt;ngAcceptInputType_&lt;/code&gt; のオーバーライドが所与の入力のために存在し、次いで、セッターがオーバーライドタイプの任意の値を処理することができなければなりません。</target>
        </trans-unit>
        <trans-unit id="58f52ea4cfe6d3f65fa26be21bdbd52f13fb53ea" translate="yes" xml:space="preserve">
          <source>Case study: Building a custom progress bar</source>
          <target state="translated">ケーススタディ。カスタムプログレスバーの構築</target>
        </trans-unit>
        <trans-unit id="6f34f8eb641732996a47d4a852ea593e50abe92e" translate="yes" xml:space="preserve">
          <source>Catch-all state change for when an element is inserted into the page and the destination state is unknown:</source>
          <target state="translated">ページ内に要素が挿入されていて、遷移先の状態が不明な場合のキャッチオール状態変更。</target>
        </trans-unit>
        <trans-unit id="a3c686e711e4720f99b4562bb3dbaae7ab658cf2" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="translated">Category</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="80656e1ac8d7229db56620ded26ed78c22d67a05" translate="yes" xml:space="preserve">
          <source>Certain NgModules, such as &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, implement such a guard. Here is a custom constructor for an NgModule called &lt;code&gt;GreetingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; などの特定のNgModuleは、このようなガードを実装しています。以下は、 &lt;code&gt;GreetingModule&lt;/code&gt; と呼ばれるNgModuleのカスタムコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="6e8fee1b61a78b05f3275829dbb034edaa941c4e" translate="yes" xml:space="preserve">
          <source>Certain services, such as the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, only work when you register them in the application root injector.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; などの特定のサービスは、アプリケーションルートインジェクターに登録した場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="480bd17189258d07915ad129dccf24a948c44df7" translate="yes" xml:space="preserve">
          <source>Chaining</source>
          <target state="translated">Chaining</target>
        </trans-unit>
        <trans-unit id="d5d97b4fb4d072582f9b61039d71706e3deb2db1" translate="yes" xml:space="preserve">
          <source>Chaining RxJS operators</source>
          <target state="translated">RxJS 演算子のチェーン化</target>
        </trans-unit>
        <trans-unit id="9700d3ee9c183d3666b2b94f12e30f5e47ca2416" translate="yes" xml:space="preserve">
          <source>Chaining expressions with &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;</source>
          <target state="translated">式を &lt;code&gt;;&lt;/code&gt; でチェーンする または &lt;code&gt;,&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d1cdea71a3322e7230575959abb41daaf51e783" translate="yes" xml:space="preserve">
          <source>Chaining pipes</source>
          <target state="translated">パイプの連結</target>
        </trans-unit>
        <trans-unit id="4991d5ea5af682d4bd01c3240e19cd513867cab6" translate="yes" xml:space="preserve">
          <source>Change Detection</source>
          <target state="translated">変化検出</target>
        </trans-unit>
        <trans-unit id="343b1717461275ac4ca7b57386b4e4fd9f50b8f1" translate="yes" xml:space="preserve">
          <source>Change Detection with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 変更検出（）</target>
        </trans-unit>
        <trans-unit id="3f8c1160f24c95950eb5896ce2ace4d289f1b622" translate="yes" xml:space="preserve">
          <source>Change an input value with &lt;em&gt;dispatchEvent()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;dispatchEvent（）を使用&lt;/em&gt;して入力値を変更する&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3056a3bc48b6af974962366a13a95bb358bd68e6" translate="yes" xml:space="preserve">
          <source>Change detection begins.</source>
          <target state="translated">変更検出を開始します。</target>
        </trans-unit>
        <trans-unit id="d9c401dce4625f6d4132ee55d56ac329792d87ae" translate="yes" xml:space="preserve">
          <source>Change detection completes.</source>
          <target state="translated">変更検出が完了しました。</target>
        </trans-unit>
        <trans-unit id="8411d3332834651f95b6576a4bba5a79df07ebd3" translate="yes" xml:space="preserve">
          <source>Change detection usage</source>
          <target state="translated">変更検出の使用法</target>
        </trans-unit>
        <trans-unit id="8f8f51ff0e0f41b2723a3b0ddb1fc762ca1bbe07" translate="yes" xml:space="preserve">
          <source>Change propagation</source>
          <target state="translated">変更伝播</target>
        </trans-unit>
        <trans-unit id="a69fd5c5cd83b7b0a7e790bf0a78ee6893f67b64" translate="yes" xml:space="preserve">
          <source>Change root relative URLs in stylesheets to include base HREF and deploy URL. Use only for compatibility and transition. The behavior of this option is non-standard and will be removed in the next major release.</source>
          <target state="translated">スタイルシートのルート相対URLを変更して、ベースのHREFとデプロイURLを含むようにします。互換性と移行のためだけに使用してください。このオプションの動作は非標準であり、次のメジャーリリースで削除されます。</target>
        </trans-unit>
        <trans-unit id="fa620e88b25bbea281891e5669df27dfd8e15477" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;admin&lt;/code&gt; path in the &lt;code&gt;admin-routing.module.ts&lt;/code&gt; from &lt;code&gt;'admin'&lt;/code&gt; to an empty string, &lt;code&gt;''&lt;/code&gt;, the empty path.</source>
          <target state="translated">変更 &lt;code&gt;admin&lt;/code&gt; におけるパス &lt;code&gt;admin-routing.module.ts&lt;/code&gt; から &lt;code&gt;'admin'&lt;/code&gt; 、空の文字列に &lt;code&gt;''&lt;/code&gt; 、空のパスを。</target>
        </trans-unit>
        <trans-unit id="8babe69a0e11422b542467ffba728e60ba1c55e3" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;admin&lt;/code&gt;&lt;strong&gt;path&lt;/strong&gt; in the &lt;code&gt;admin-routing.module.ts&lt;/code&gt; from &lt;code&gt;'admin'&lt;/code&gt; to an empty string, &lt;code&gt;''&lt;/code&gt;, the &lt;em&gt;empty path&lt;/em&gt;.</source>
          <target state="translated">変更 &lt;code&gt;admin&lt;/code&gt; &lt;strong&gt;パス&lt;/strong&gt;で &lt;code&gt;admin-routing.module.ts&lt;/code&gt; から &lt;code&gt;'admin'&lt;/code&gt; 、空の文字列に &lt;code&gt;''&lt;/code&gt; 、&lt;em&gt;空のパスを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1d1cabd01ed824d898e58ebeb17c5d4a449cd6cd" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;crisis-center&lt;/code&gt; path in the &lt;code&gt;CrisisCenterRoutingModule&lt;/code&gt; to an empty string.</source>
          <target state="translated">&lt;code&gt;CrisisCenterRoutingModule&lt;/code&gt; の &lt;code&gt;crisis-center&lt;/code&gt; パスを空の文字列に変更します。</target>
        </trans-unit>
        <trans-unit id="434daac2c5b3d1ab473246ae8b1e713c54dc7351" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;selector&lt;/code&gt; to &lt;code&gt;app-hero-list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; を &lt;code&gt;app-hero-list&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="b0dde64b8dbb0bcbea9f57171ea80c7d963b7477" translate="yes" xml:space="preserve">
          <source>Change the application title</source>
          <target state="translated">アプリケーションのタイトルを変更する</target>
        </trans-unit>
        <trans-unit id="9186ea4fea7f7f8a33d6b896351d60a43fdd1cf8" translate="yes" xml:space="preserve">
          <source>Change the component class name to &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">コンポーネントクラス名を &lt;code&gt;HeroListComponent&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="927385537fbe1015a617be665c6693f672fb3a52" translate="yes" xml:space="preserve">
          <source>Change the history state object when called with one parameter and return &lt;code&gt;$location&lt;/code&gt;. The state object is later passed to &lt;code&gt;pushState&lt;/code&gt; or &lt;code&gt;replaceState&lt;/code&gt;.</source>
          <target state="translated">1つのパラメーターで呼び出されたときに履歴状態オブジェクトを変更し、 &lt;code&gt;$location&lt;/code&gt; を返します。状態オブジェクトは後で &lt;code&gt;pushState&lt;/code&gt; または &lt;code&gt;replaceState&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="bfe643cd41ad6bd8325838b21bb5f217bb25eaba" translate="yes" xml:space="preserve">
          <source>Change the name of the property to something non-numeric.</source>
          <target state="translated">プロパティの名前を数値以外のものに変更します。</target>
        </trans-unit>
        <trans-unit id="6d75501b207e68028263e36722aad89666fd432e" translate="yes" xml:space="preserve">
          <source>Change the source language file format</source>
          <target state="translated">ソース言語のファイル形式を変更する</target>
        </trans-unit>
        <trans-unit id="fb971ca24ae36394f009c9a933901534279b72b4" translate="yes" xml:space="preserve">
          <source>Change the source language file location</source>
          <target state="translated">ソース言語ファイルの場所を変更する</target>
        </trans-unit>
        <trans-unit id="e9aebdeab4136b916e3514f9ae6cb1c962a47e45" translate="yes" xml:space="preserve">
          <source>Change the source language file name</source>
          <target state="translated">ソース言語ファイル名の変更</target>
        </trans-unit>
        <trans-unit id="42c003a9c6e71c4ca88e8ccd27f3508b897ae2a8" translate="yes" xml:space="preserve">
          <source>Change the text &lt;code&gt;Welcome to {{title}}!&lt;/code&gt; to &lt;code&gt;Bienvenue &amp;agrave; {{title}}!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Welcome to {{title}}!&lt;/code&gt; というテキストを変更します。 &lt;code&gt;Bienvenue &amp;agrave; {{title}}!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8676d4d635410ca2c077409dad69d9f77ca2647f" translate="yes" xml:space="preserve">
          <source>ChangeDetectionStrategy</source>
          <target state="translated">ChangeDetectionStrategy</target>
        </trans-unit>
        <trans-unit id="9610416e7bcb35a070b1afee3e1ecbe89b251021" translate="yes" xml:space="preserve">
          <source>ChangeDetectorRef</source>
          <target state="translated">ChangeDetectorRef</target>
        </trans-unit>
        <trans-unit id="ca70f735e874d0a9ed14ee22dbbc94dddf29a806" translate="yes" xml:space="preserve">
          <source>Changes and Deprecations in Version 11</source>
          <target state="translated">バージョン 11 の変更点と非推奨事項</target>
        </trans-unit>
        <trans-unit id="8eb8f6f68f506aa805d98d21bb31757a770f8982" translate="yes" xml:space="preserve">
          <source>Changes can be observed by subscribing to the changes &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; の変更をサブスクライブすることで、変更を監視できます。</target>
        </trans-unit>
        <trans-unit id="e28e885c282bb260b0a322754ee5b453345cab30" translate="yes" xml:space="preserve">
          <source>Changes the browser's URL to a normalized version of a given URL, and pushes a new item onto the platform's history.</source>
          <target state="translated">ブラウザのURLを指定されたURLの正規化されたバージョンに変更し、新しいアイテムをプラットフォームの履歴にプッシュします。</target>
        </trans-unit>
        <trans-unit id="d841e1b40e8a43f3b1d465ce7175f1d1d080099d" translate="yes" xml:space="preserve">
          <source>Changes the browser's URL to a normalized version of the given URL, and replaces the top item on the platform's history stack.</source>
          <target state="translated">ブラウザの URL を指定された URL の正規化されたバージョンに変更し、プラットフォームの履歴スタックの最上位項目を置き換えます。</target>
        </trans-unit>
        <trans-unit id="0528bf143935bb6c0e63d6c319330abc5897e287" translate="yes" xml:space="preserve">
          <source>Changes to &lt;code&gt;$location&lt;/code&gt; during the current &lt;code&gt;$digest&lt;/code&gt; will replace the current history record, instead of adding a new one.</source>
          <target state="translated">現在の &lt;code&gt;$digest&lt;/code&gt; 中に &lt;code&gt;$location&lt;/code&gt; 変更すると、新しい履歴レコードが追加される代わりに、現在の履歴レコードが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="696e045172b10914e55a284add7f292269adccb9" translate="yes" xml:space="preserve">
          <source>Changes to styles elsewhere in the application don't affect the component's styles.</source>
          <target state="translated">アプリケーションの他の場所でスタイルを変更しても、コンポーネントのスタイルには影響しません。</target>
        </trans-unit>
        <trans-unit id="8717268388760a4abc7ae6730a6a868cb147ccdc" translate="yes" xml:space="preserve">
          <source>Changes you may see</source>
          <target state="translated">あなたが見ることができる変更</target>
        </trans-unit>
        <trans-unit id="831ab0dd3e14c19a13759f4e73d7a68f79e884a9" translate="yes" xml:space="preserve">
          <source>Changing /heroes to /superheroes</source>
          <target state="translated">ヒーローを/superheroesに変更する</target>
        </trans-unit>
        <trans-unit id="61fe1730c58b148536e6991308528269c7d4b5e4" translate="yes" xml:space="preserve">
          <source>Changing &lt;code&gt;/heroes&lt;/code&gt; to &lt;code&gt;/superheroes&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/heroes&lt;/code&gt; を &lt;code&gt;/superheroes&lt;/code&gt; に変更する</target>
        </trans-unit>
        <trans-unit id="fcac6dfa3f865ecb219e677bce8f4ac4fd43e75a" translate="yes" xml:space="preserve">
          <source>Changing the observable to be multicasting could look something like this:</source>
          <target state="translated">観測可能なものをマルチキャストに変更すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="23fafb17a150814dab8b9300a9bdd995dd6aaf3b" translate="yes" xml:space="preserve">
          <source>Changing your app's location</source>
          <target state="translated">アプリの位置情報を変更する</target>
        </trans-unit>
        <trans-unit id="e688823a84fa6f43670fb82f99c26f690e6bccb5" translate="yes" xml:space="preserve">
          <source>Cheat Sheet</source>
          <target state="translated">チートシート</target>
        </trans-unit>
        <trans-unit id="99957d5920a0c408d447b33739a6c587076d7c4c" translate="yes" xml:space="preserve">
          <source>Cheat sheet</source>
          <target state="translated">チートシート</target>
        </trans-unit>
        <trans-unit id="e1aba76971244577871fcf686981c5cf54bbfec3" translate="yes" xml:space="preserve">
          <source>Check all internal dependencies.</source>
          <target state="translated">すべての内部依存関係をチェックします。</target>
        </trans-unit>
        <trans-unit id="bd6bd8ea1d42310566ae35ff189fa25bce0739c6" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;https://github.com/angular-buch/angular-cli-ghpages&quot;&gt;angular-cli-ghpages&lt;/a&gt;, a full featured package that does all this for you and has extra functionality.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular-buch/angular-cli-ghpages&quot;&gt;angular-cli-ghpagesを&lt;/a&gt;チェックしてください。これは、これをすべて行い、追加の機能を備えたフル機能のパッケージです。</target>
        </trans-unit>
        <trans-unit id="596bba2df3b2825642145be1fe7d92476921f67f" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;glossary&quot;&gt;Glossary&lt;/a&gt; to understand Angular-specific terms and usage.</source>
          <target state="translated">&lt;a href=&quot;glossary&quot;&gt;用語集&lt;/a&gt;をチェックして、Angular固有の用語と使用法を理解してください。</target>
        </trans-unit>
        <trans-unit id="92cfb73fbe5a898080633faeb8d721bec2e82d45" translate="yes" xml:space="preserve">
          <source>Check out this full animation &lt;a href=&quot;http://animationsftw.in/#/&quot;&gt;demo&lt;/a&gt; with accompanying &lt;a href=&quot;https://www.youtube.com/watch?v=JhNo3Wvj6UQ&amp;amp;feature=youtu.be&amp;amp;t=2h47m53s&quot;&gt;presentation&lt;/a&gt;, shown at the AngularConnect conference in November 2017.</source>
          <target state="translated">2017年11月に開催されるAngularConnectカンファレンスで&lt;a href=&quot;https://www.youtube.com/watch?v=JhNo3Wvj6UQ&amp;amp;feature=youtu.be&amp;amp;t=2h47m53s&quot;&gt;発表&lt;/a&gt;された、このアニメーションの&lt;a href=&quot;http://animationsftw.in/#/&quot;&gt;デモ&lt;/a&gt;全体と付随するプレゼンテーションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c384f9025a9aede92802f2295e03b1a23a81d08b" translate="yes" xml:space="preserve">
          <source>Check self and check parent injector if needed</source>
          <target state="translated">自己点検を行い、必要に応じて親インジェクターを点検します。</target>
        </trans-unit>
        <trans-unit id="dbfea36cdd70b19a11b73640b60c7c97b8b2cc9f" translate="yes" xml:space="preserve">
          <source>Check that imported libraries have been marked side-effect-free. If your app imports from shared libraries that are meant to be free from side effects, add &quot;sideEffects&quot;: false to their &lt;code&gt;package.json&lt;/code&gt;. This will ensure that the libraries will be properly tree-shaken if they are imported but not directly referenced. See more details in the original issue &lt;a href=&quot;https://github.com/angular/angular-cli/issues/16799#issuecomment-580912090&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">インポートされたライブラリが副作用なしとしてマークされていることを確認します。アプリが副作用のないことを目的とした共有ライブラリからインポートする場合は、 &lt;code&gt;package.json&lt;/code&gt; に「sideEffects」：falseを追加します。これにより、ライブラリがインポートされたが直接参照されていない場合に、ライブラリが適切にツリーシェイクされます。詳細については、元の号の&lt;a href=&quot;https://github.com/angular/angular-cli/issues/16799#issuecomment-580912090&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9bf59c30dc2e2cfc9815c66b412795ea380622ec" translate="yes" xml:space="preserve">
          <source>Check the &lt;strong&gt;Offline box&lt;/strong&gt;.</source>
          <target state="translated">[ &lt;strong&gt;オフライン]&lt;/strong&gt;チェック&lt;strong&gt;ボックスを&lt;/strong&gt;オンにし&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="53a91267f194e09a874c756ae0e5cd6fbc5e9b4b" translate="yes" xml:space="preserve">
          <source>Check whether the new value is the first value assigned.</source>
          <target state="translated">新しい値が最初に割り当てられた値であるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f34e8033f22ef7572d3f7bef622110673a0b903e" translate="yes" xml:space="preserve">
          <source>Check whether there is an enabled control with the given name in the group.</source>
          <target state="translated">グループ内に指定された名前で有効なコントロールがあるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="86835e09c41b9d27abffca994c2aa7579b74929a" translate="yes" xml:space="preserve">
          <source>Check whether users can access a route.</source>
          <target state="translated">ユーザーがルートにアクセスできるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="aa5944be645c910b902d4178536960e0dd6bb46e" translate="yes" xml:space="preserve">
          <source>CheckboxControlValueAccessor</source>
          <target state="translated">CheckboxControlValueAccessor</target>
        </trans-unit>
        <trans-unit id="c879093d869ad86b0566a12fe19cb46968467703" translate="yes" xml:space="preserve">
          <source>CheckboxRequiredValidator</source>
          <target state="translated">CheckboxRequiredValidator</target>
        </trans-unit>
        <trans-unit id="78948b2a07ee0efcb3ac6f4a1a272b534d287c7b" translate="yes" xml:space="preserve">
          <source>Checking for updates</source>
          <target state="translated">更新をチェックする</target>
        </trans-unit>
        <trans-unit id="a97ec7b665e30317cad136ac6db80bfa38d1e182" translate="yes" xml:space="preserve">
          <source>Checking of &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForの&lt;/a&gt;チェック</target>
        </trans-unit>
        <trans-unit id="59ac9dbbeb11bfee8438eb0df9da52f319181942" translate="yes" xml:space="preserve">
          <source>Checking your version of Angular</source>
          <target state="translated">Angularのバージョンを確認する</target>
        </trans-unit>
        <trans-unit id="039ccb2918e7c3b5e496faa1cbfa7e89bb915059" translate="yes" xml:space="preserve">
          <source>Checks for existence of a given header.</source>
          <target state="translated">指定されたヘッダが存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="f19cdeb053f13ef119dad6eaba0ab038717b11b2" translate="yes" xml:space="preserve">
          <source>Checks that there currently is a platform which contains the given token as a provider.</source>
          <target state="translated">指定されたトークンをプロバイダとして含むプラットフォームが現在存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="4cf7d7868bbf791320d5a7748d39dd2b03f2d60e" translate="yes" xml:space="preserve">
          <source>Checks that there is currently a platform that contains the given token as a provider.</source>
          <target state="translated">指定されたトークンをプロバイダとして含むプラットフォームが現在存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="27e534014d7f6c5ef04a4cb1f5834c05cadd4a7f" translate="yes" xml:space="preserve">
          <source>Checks the change detector and its children, and throws if any changes are detected.</source>
          <target state="translated">変更検出器とその子プロセスをチェックし、変更が検出された場合はスローします。</target>
        </trans-unit>
        <trans-unit id="ac7375845b6700eea70b230cf6ef23256bc66b1e" translate="yes" xml:space="preserve">
          <source>Checks this view and its children. Use in combination with &lt;a href=&quot;changedetectorref#detach&quot;&gt;detach&lt;/a&gt; to implement local change detection checks.</source>
          <target state="translated">このビューとその子をチェックします。&lt;a href=&quot;changedetectorref#detach&quot;&gt;detach&lt;/a&gt;と組み合わせて使用​​して、ローカル変更検出チェックを実装します。</target>
        </trans-unit>
        <trans-unit id="40446a4774953299d744b037f3fabd61581c55cd" translate="yes" xml:space="preserve">
          <source>Checks whether the two strings are equal</source>
          <target state="translated">2 つの文字列が等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="105070f0db5c610c2e3799d698d9f3ec337beb1a" translate="yes" xml:space="preserve">
          <source>Child &lt;code&gt;ModuleInjector&lt;/code&gt;s are created when lazy loading other &lt;code&gt;@NgModules&lt;/code&gt;.</source>
          <target state="translated">子 &lt;code&gt;ModuleInjector&lt;/code&gt; は、他の &lt;code&gt;@NgModules&lt;/code&gt; 遅延ロードするときに作成されます。</target>
        </trans-unit>
        <trans-unit id="b45018b9cbbbefcc8dbba9b84a7cc1c2fb002971" translate="yes" xml:space="preserve">
          <source>Child interfaces</source>
          <target state="translated">子インターフェース</target>
        </trans-unit>
        <trans-unit id="51d827784282762a77db2ecf655e40e63440b111" translate="yes" xml:space="preserve">
          <source>Child modules and component injectors are independent of each other, and create their own separate instances of the provided services. When Angular destroys an NgModule or component instance, it also destroys that injector and that injector's service instances.</source>
          <target state="translated">子モジュールとコンポーネントインジェクターは互いに独立しており、提供されるサービスのインスタンスを独自に作成します。AngularがNgModuleやコンポーネントのインスタンスを破棄すると、そのインジェクタとそのインジェクタのサービスインスタンスも破棄されます。</target>
        </trans-unit>
        <trans-unit id="add021ebee29a859789ac87532524f9916e8f376" translate="yes" xml:space="preserve">
          <source>Child route configuration</source>
          <target state="translated">子ルートの設定</target>
        </trans-unit>
        <trans-unit id="b3dc916760d8ae9ca4995453a2ebc7e0d16f4105" translate="yes" xml:space="preserve">
          <source>Child routes (the &lt;em&gt;Crisis Center&lt;/em&gt; has its own routes).</source>
          <target state="translated">子ルート（&lt;em&gt;危機センターに&lt;/em&gt;は独自のルートがあります）。</target>
        </trans-unit>
        <trans-unit id="3ae7a7e0215bdbccdaa70a62527624da49d7b032" translate="yes" xml:space="preserve">
          <source>Child routing component</source>
          <target state="translated">子ルーティングコンポーネント</target>
        </trans-unit>
        <trans-unit id="b39289ca7dd8c2d34548ec58a2bd80a309b34054" translate="yes" xml:space="preserve">
          <source>ChildActivationEnd</source>
          <target state="translated">ChildActivationEnd</target>
        </trans-unit>
        <trans-unit id="4fba8126259467946ad228f3bbc5ad08bcc49f2a" translate="yes" xml:space="preserve">
          <source>ChildActivationStart</source>
          <target state="translated">ChildActivationStart</target>
        </trans-unit>
        <trans-unit id="597f94e85e956cc34d0e81bd2267a3d55397342d" translate="yes" xml:space="preserve">
          <source>ChildrenOutletContexts</source>
          <target state="translated">ChildrenOutletContexts</target>
        </trans-unit>
        <trans-unit id="7a500f7710fc992ffd582db793ce56b2deb14e80" translate="yes" xml:space="preserve">
          <source>Chinese Simplified</source>
          <target state="translated">簡体字</target>
        </trans-unit>
        <trans-unit id="475bd05d677945b1aa0853356a8a8a2f5ba3dccb" translate="yes" xml:space="preserve">
          <source>Chinese Traditional</source>
          <target state="translated">中国の伝統的な</target>
        </trans-unit>
        <trans-unit id="7f76285d4993d793b551055eee78e271b1ac0fb6" translate="yes" xml:space="preserve">
          <source>Chinese Traditional Hong Kong</source>
          <target state="translated">中国の伝統的な香港</target>
        </trans-unit>
        <trans-unit id="5b1459d29562347d9af364f362f4cc0dda4087b1" translate="yes" xml:space="preserve">
          <source>Choose a CSS selector for the component.</source>
          <target state="translated">コンポーネントのCSSセレクタを選択します。</target>
        </trans-unit>
        <trans-unit id="17c5aee7d1808096ae2d774042d1f051379d83ae" translate="yes" xml:space="preserve">
          <source>Choose one pattern or the other and follow that pattern consistently.</source>
          <target state="translated">どちらかのパターンを選択して、そのパターンに一貫して従ってください。</target>
        </trans-unit>
        <trans-unit id="6b9e178bd0af63fe006adcde0a8d9cf243536ca1" translate="yes" xml:space="preserve">
          <source>Choosing a compiler</source>
          <target state="translated">コンパイラの選択</target>
        </trans-unit>
        <trans-unit id="b156c48e508941fd35d01151a9ef16404d7dcc06" translate="yes" xml:space="preserve">
          <source>Choosing a routing strategy</source>
          <target state="translated">ルーティング戦略の選択</target>
        </trans-unit>
        <trans-unit id="ce5ea27fc9f713601c67aa8664fbea01d4964a0b" translate="yes" xml:space="preserve">
          <source>Choosing a strategy begins with understanding the strengths and weaknesses of the options presented. Low-level API and form model access, predictability, mutability, straightforward validation and testing strategies, and scalability are all important considerations in choosing the infrastructure you use to build your forms in Angular. Template-driven forms are similar to patterns in AngularJS, but they have limitations given the criteria of many modern, large-scale Angular apps. Reactive forms minimize these limitations. Reactive forms integrate with reactive patterns already present in other areas of the Angular architecture, and complement those requirements well.</source>
          <target state="translated">戦略の選択は、提示されたオプションの長所と短所を理解することから始まります。低レベルのAPIやフォームモデルへのアクセス、予測可能性、変異性、簡単な検証とテスト戦略、スケーラビリティは、Angularでフォームを構築するために使用するインフラストラクチャを選択する際に重要な考慮事項です。テンプレート駆動型のフォームはAngularJSのパターンに似ていますが、多くの大規模な最新のAngularアプリの基準を考えると限界があります。リアクティブフォームはこれらの制限を最小限に抑えます。リアクティブなフォームはAngularアーキテクチャの他の領域にすでに存在するリアクティブなパターンと統合し、それらの要件をうまく補完します。</target>
        </trans-unit>
        <trans-unit id="c7d5f65babefdd5042c8bd2bbfcb0576c5844ac8" translate="yes" xml:space="preserve">
          <source>Choosing an approach</source>
          <target state="translated">アプローチの選択</target>
        </trans-unit>
        <trans-unit id="218e75c7a912404b048fff0747e40108873b6334" translate="yes" xml:space="preserve">
          <source>Chrome</source>
          <target state="translated">Chrome</target>
        </trans-unit>
        <trans-unit id="db7a66fee54cb2c0a49086533407c84c154c93b6" translate="yes" xml:space="preserve">
          <source>Chrome, Firefox, Edge,  Safari, Android, IE 10+</source>
          <target state="translated">Chrome、Firefox、Edge、Safari、Android、IE 10+</target>
        </trans-unit>
        <trans-unit id="06d773328508b2324457173a938f656957a34b90" translate="yes" xml:space="preserve">
          <source>Chrome, Firefox, Edge,  Safari, Android, IE 11</source>
          <target state="translated">Chrome、Firefox、Edge、Safari、Android、IE 11</target>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes" xml:space="preserve">
          <source>Class</source>
          <target state="translated">Class</target>
        </trans-unit>
        <trans-unit id="8154a233a656dec9151d776f59d14b5ece214584" translate="yes" xml:space="preserve">
          <source>Class binding</source>
          <target state="translated">クラスバインディング</target>
        </trans-unit>
        <trans-unit id="b3f6bf21bd790c8c0ca4c69e84a202669b340aec" translate="yes" xml:space="preserve">
          <source>Class binding syntax resembles property binding, but instead of an element property between brackets, start with the prefix &lt;code&gt;class&lt;/code&gt;, optionally followed by a dot (&lt;code&gt;.&lt;/code&gt;) and the name of a CSS class: &lt;code&gt;[class.class-name]&lt;/code&gt;.</source>
          <target state="translated">クラスバインディング構文はプロパティバインディングに似ていますが、大括弧で囲まれた要素プロパティの代わりに、接頭辞 &lt;code&gt;class&lt;/code&gt; で始まり、オプションでドット（ &lt;code&gt;.&lt;/code&gt; ）とCSSクラスの名前が続きます： &lt;code&gt;[class.class-name]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e08bce289f366c056ecd9ce1d6fbabe31242faa" translate="yes" xml:space="preserve">
          <source>Class decorators</source>
          <target state="translated">クラスデコレーター</target>
        </trans-unit>
        <trans-unit id="ead76f2265a0d81882e6ad9f43d58b17ab60cd2e" translate="yes" xml:space="preserve">
          <source>Class field decorators for directives and components</source>
          <target state="translated">ディレクティブとコンポーネントのためのクラスフィールドデコレータ</target>
        </trans-unit>
        <trans-unit id="bd8d578a2c9be2adfd97344aa626fa426c36137a" translate="yes" xml:space="preserve">
          <source>Class if false</source>
          <target state="translated">falseの場合のクラス</target>
        </trans-unit>
        <trans-unit id="37f4d9eb1a6cf37d8d57164c8727fe1da9d6c802" translate="yes" xml:space="preserve">
          <source>Class if true</source>
          <target state="translated">クラスが真の場合</target>
        </trans-unit>
        <trans-unit id="703e9eebcf42bdd8b7a0a6b496df19654d526ebe" translate="yes" xml:space="preserve">
          <source>Class implementations</source>
          <target state="translated">クラスの実装</target>
        </trans-unit>
        <trans-unit id="00e4305e03e0dd23aa189c7dfb11b275650b4811" translate="yes" xml:space="preserve">
          <source>Class interface</source>
          <target state="translated">クラスインタフェース</target>
        </trans-unit>
        <trans-unit id="5a80022dc562a4854ed320709d4e5f295abcbf93" translate="yes" xml:space="preserve">
          <source>Class names and selectors are local to the component and don't collide with classes and selectors used elsewhere in the application.</source>
          <target state="translated">クラス名とセレクタはコンポーネントのローカルなものであり、アプリケーションの他の場所で使用されているクラスやセレクタと衝突することはありません。</target>
        </trans-unit>
        <trans-unit id="e25ec41c9f0b314b93d2865f50d88ae917e6ff6e" translate="yes" xml:space="preserve">
          <source>Class providers with dependencies</source>
          <target state="translated">依存関係を持つクラスプロバイダ</target>
        </trans-unit>
        <trans-unit id="2ce2b7d2960a43ff91bdce39b41516a092f557c0" translate="yes" xml:space="preserve">
          <source>Class providers: &lt;code&gt;useClass&lt;/code&gt;</source>
          <target state="translated">クラスプロバイダー： &lt;code&gt;useClass&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d75f311366207e7e2aa503909afb6f888aa1e24b" translate="yes" xml:space="preserve">
          <source>Class to instantiate for the &lt;code&gt;token&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;token&lt;/code&gt; をインスタンス化するクラス。</target>
        </trans-unit>
        <trans-unit id="c81eac26029ad80be2ecb31b3a105a54bd607ca4" translate="yes" xml:space="preserve">
          <source>ClassProvider</source>
          <target state="translated">ClassProvider</target>
        </trans-unit>
        <trans-unit id="4ad4dcce4a04b908b87b184e0e237aaad3f93967" translate="yes" xml:space="preserve">
          <source>ClassSansProvider</source>
          <target state="translated">ClassSansProvider</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="44b1dd6cbeff1c9f0be2b3e8c7e9f2545be469f1" translate="yes" xml:space="preserve">
          <source>Cleaning up on instance destruction</source>
          <target state="translated">インスタンス破壊の片付け</target>
        </trans-unit>
        <trans-unit id="bb056dff87f7efe41487b1818542ce4497791da0" translate="yes" xml:space="preserve">
          <source>Cleanup just before Angular destroys the directive or component. Unsubscribe Observables and detach event handlers to avoid memory leaks. See details in &lt;a href=&quot;lifecycle-hooks#ondestroy&quot;&gt;Cleaning up on instance destruction&lt;/a&gt; in this document.</source>
          <target state="translated">Angularがディレクティブまたはコンポーネントを破棄する直前のクリーンアップ。メモリリークを回避するために、Observablesのサブスクライブを解除し、イベントハンドラーをデタッチします。このドキュメントの&lt;a href=&quot;lifecycle-hooks#ondestroy&quot;&gt;インスタンス破壊のクリーンアップの&lt;/a&gt;詳細を参照してください。</target>
        </trans-unit>
        <trans-unit id="c6251b998cd47a22f6f10a241477788107ff1abe" translate="yes" xml:space="preserve">
          <source>Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks.</source>
          <target state="translated">Angularがディレクティブ/コンポーネントを破棄する直前にクリーンアップする。メモリリークを避けるためにObservablesのアンサブスクライブとイベントハンドラのデタッチを行います。</target>
        </trans-unit>
        <trans-unit id="ce5079dd77d657c0cf099c0418da34731184f7b0" translate="yes" xml:space="preserve">
          <source>Clearing secondary routes</source>
          <target state="translated">二次ルートのクリア</target>
        </trans-unit>
        <trans-unit id="5db54a049d498c60f89ca10bde98edb2d6069ad2" translate="yes" xml:space="preserve">
          <source>Clearing the request body</source>
          <target state="translated">リクエストボディのクリア</target>
        </trans-unit>
        <trans-unit id="38a95b00cd22e1c2bdfeca003a5c741c5fb3348b" translate="yes" xml:space="preserve">
          <source>Clearing the request body in a clone</source>
          <target state="translated">クローンでのリクエストボディのクリア</target>
        </trans-unit>
        <trans-unit id="cf50fa318db0085017303d0a35f24a05f1663bbc" translate="yes" xml:space="preserve">
          <source>Clearly, some values benefit from a bit of editing. You may notice that you desire many of the same transformations repeatedly, both within and across many applications. You can almost think of them as styles. In fact, you might like to apply them in your HTML templates as you do styles.</source>
          <target state="translated">明らかに、いくつかの値は少し編集することで利益を得ることができます。多くのアプリケーションの中で、あるいは複数のアプリケーション間で、同じ変換を繰り返し行いたいことに気づくかもしれません。それらはほとんどスタイルと考えることができます。実際、スタイルと同じようにHTMLテンプレートにも適用したいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="026c9a5b393972d1b74e879509efaf02047efffd" translate="yes" xml:space="preserve">
          <source>Clears all caches.</source>
          <target state="translated">すべてのキャッシュをクリアします。</target>
        </trans-unit>
        <trans-unit id="b1ad879d1b6ba3a92ecf85c2bf72ec70799ba4b4" translate="yes" xml:space="preserve">
          <source>Clears out the shared fake async zone for a test. To be called in a global &lt;code&gt;beforeEach&lt;/code&gt;.</source>
          <target state="translated">テスト用に共有された偽の非同期ゾーンをクリアします。グローバル &lt;code&gt;beforeEach&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3da02b23929580e57414dead83052520181965c8" translate="yes" xml:space="preserve">
          <source>Clears the cache for the given component/ngModule.</source>
          <target state="translated">指定したコンポーネント/ngModuleのキャッシュをクリアします。</target>
        </trans-unit>
        <trans-unit id="1ceee3f3ff9ea2b24225f5c50bf87f4ef4199c6e" translate="yes" xml:space="preserve">
          <source>Click &quot;Buy&quot; to add the product to the cart.</source>
          <target state="translated">購入」をクリックしてカートに追加してください。</target>
        </trans-unit>
        <trans-unit id="f84c2305c2632803a02e65fcadee7fbd81e73dfa" translate="yes" xml:space="preserve">
          <source>Click &quot;Checkout&quot; to see the cart.</source>
          <target state="translated">お会計」をクリックするとカートが表示されます。</target>
        </trans-unit>
        <trans-unit id="83429308d7a703087079aed854d4057e2973e9c0" translate="yes" xml:space="preserve">
          <source>Click OK to close the dialog.</source>
          <target state="translated">OKをクリックしてダイアログを閉じます。</target>
        </trans-unit>
        <trans-unit id="a6b80126611af848948c0c6774dbd3810ab84e9a" translate="yes" xml:space="preserve">
          <source>Click inside the name box, then click outside it.</source>
          <target state="translated">ネームボックスの内側をクリックし、外側をクリックします。</target>
        </trans-unit>
        <trans-unit id="547578c7abdc81f782d84ab3802c115d38f42642" translate="yes" xml:space="preserve">
          <source>Click inside the name box, then click outside it. The control has now been visited, and the element has the &lt;code&gt;ng-touched&lt;/code&gt; class instead of the &lt;code&gt;ng-untouched&lt;/code&gt; class.</source>
          <target state="translated">名前ボックスの内側をクリックしてから、外側をクリックします。コントロールは今訪問してきた、と要素があり &lt;code&gt;ng-touched&lt;/code&gt; 代わりのクラス &lt;code&gt;ng-untouched&lt;/code&gt; クラスを。</target>
        </trans-unit>
        <trans-unit id="25323834f15a5cdd5d9c332bdf408c9fad445293" translate="yes" xml:space="preserve">
          <source>Click links on the page and the browser navigates to a new page.</source>
          <target state="translated">ページ内のリンクをクリックすると、ブラウザは新しいページに移動します。</target>
        </trans-unit>
        <trans-unit id="9a0294549b373fb604bb541a36952363ee1e0c0d" translate="yes" xml:space="preserve">
          <source>Click links on the page, and the browser navigates to a new page.</source>
          <target state="translated">ページ上のリンクをクリックすると、ブラウザは新しいページに移動します。</target>
        </trans-unit>
        <trans-unit id="81d717da4be4f860e0609091c741c5e385bc988d" translate="yes" xml:space="preserve">
          <source>Click on &quot;My Store&quot; to go to the product list page.</source>
          <target state="translated">マイストア」をクリックすると商品一覧ページに移動します。</target>
        </trans-unit>
        <trans-unit id="3e2d6125f709f88ef4e4400226466c9151c49bcf" translate="yes" xml:space="preserve">
          <source>Click on &quot;My Store&quot; to go to the product list view.</source>
          <target state="translated">マイストア」をクリックすると、商品一覧表示に移動します。</target>
        </trans-unit>
        <trans-unit id="a7c86dcc2337bad128a9e7611b8fe25cad3729d0" translate="yes" xml:space="preserve">
          <source>Click on a product name to display its details.</source>
          <target state="translated">商品名をクリックすると詳細が表示されます。</target>
        </trans-unit>
        <trans-unit id="61f156fc0205f2cf0b5cf9f3f4c67e5de0395f6e" translate="yes" xml:space="preserve">
          <source>Click on the &quot;Checkout&quot; button to see the updated cart. (Remember that changing the app causes the preview to refresh, which empties the cart.)</source>
          <target state="translated">チェックアウト」ボタンをクリックすると、更新されたカートが表示されます。(アプリを変更するとプレビューが更新され、カートが空になることを覚えておいてください)</target>
        </trans-unit>
        <trans-unit id="a780f7c233867ca1d42bf0443d903007584aa372" translate="yes" xml:space="preserve">
          <source>Click on the Orders or Customers button. If you see a chunk appear, everything is wired up properly and the feature module is being lazy loaded. A chunk should appear for Orders and for Customers but will only appear once for each.</source>
          <target state="translated">OrdersまたはCustomersボタンをクリックします。チャンクが表示される場合は、すべてが適切に配線されており、機能モジュールが遅延ロードされていることを示しています。チャンクは Orders と Customers に表示されるはずですが、表示されるのはそれぞれ一度だけです。</target>
        </trans-unit>
        <trans-unit id="86f4b3cfca3cd1f70a3cc2d66645da062b527d2b" translate="yes" xml:space="preserve">
          <source>Click on the link to navigate to the shipping prices.</source>
          <target state="translated">リンクをクリックすると送料が表示されます。</target>
        </trans-unit>
        <trans-unit id="59469051320b59901e4a2c2f47868dd7661eb2c8" translate="yes" xml:space="preserve">
          <source>Click the &quot;Buy&quot; button to add the product to the stored list of items in the cart and display a confirmation message.</source>
          <target state="translated">購入」ボタンをクリックすると、カート内の保存されている商品リストに追加され、確認メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="d7cc08c66323eccb2590d691177ee8938357b986" translate="yes" xml:space="preserve">
          <source>Click the &quot;Buy&quot; button. The product is added to the stored list of items in the cart, and a message is displayed.</source>
          <target state="translated">購入」ボタンをクリックします。カートに保存されている商品リストに商品が追加され、メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="de94a55f83dbb3b79e5be35cea5e97dd7dffb5a0" translate="yes" xml:space="preserve">
          <source>Click the &quot;Checkout&quot; button to see the updated cart. Remember that changing the app causes the preview to refresh, which empties the cart.</source>
          <target state="translated">チェックアウト」ボタンをクリックすると、更新されたカートが表示されます。アプリを変更するとプレビューが更新され、カートが空になることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="72e67d710f138d2b710872747ba7ea759254edd1" translate="yes" xml:space="preserve">
          <source>Click the &lt;code&gt;Refresh&lt;/code&gt; icon in Solution Explorer.</source>
          <target state="translated">ソリューションエクスプローラーで[ &lt;code&gt;Refresh&lt;/code&gt; ]アイコンをクリックします。</target>
        </trans-unit>
        <trans-unit id="16411a223f86d4e726b416df57543b1081256a5e" translate="yes" xml:space="preserve">
          <source>Click the &lt;code&gt;Show &lt;a href=&quot;visual-studio-2015&quot;&gt;All&lt;/a&gt; Files&lt;/code&gt; button in Solution Explorer to reveal all of the hidden files in the project.</source>
          <target state="translated">クリックして &lt;code&gt;Show &lt;a href=&quot;visual-studio-2015&quot;&gt;All&lt;/a&gt; Files&lt;/code&gt; プロジェクトに隠されたファイルのすべてを明らかにするソリューションエクスプローラでボタンを。</target>
        </trans-unit>
        <trans-unit id="fa14744f825800b5acbd3b54bc18bc3c1e050bfe" translate="yes" xml:space="preserve">
          <source>Click the &lt;em&gt;Edit&lt;/em&gt; button to switch the display back to the editable form.</source>
          <target state="translated">[&lt;em&gt;編集&lt;/em&gt;]ボタンをクリックして、表示を編集可能なフォームに戻します。</target>
        </trans-unit>
        <trans-unit id="cf2ced5bb5829ad40830165be365705611673e8b" translate="yes" xml:space="preserve">
          <source>Click the &lt;em&gt;Heroes&lt;/em&gt; link and look at the URL again.</source>
          <target state="translated">&lt;em&gt;Heroes&lt;/em&gt;リンクをクリックして、もう一度URLを確認します。</target>
        </trans-unit>
        <trans-unit id="c249fbe128a1032fa4f807ec53c9425bc77a9b75" translate="yes" xml:space="preserve">
          <source>Click the &lt;strong&gt;DEBUG&lt;/strong&gt; button; it opens a new browser tab and re-runs the tests.</source>
          <target state="translated">&lt;strong&gt;デバッグ&lt;/strong&gt;ボタンをクリックします。新しいブラウザタブが開き、テストが再実行されます。</target>
        </trans-unit>
        <trans-unit id="3e10750bc27032ca2a4add7fa0f3bb215e14b513" translate="yes" xml:space="preserve">
          <source>Click the browser back button or the &quot;Heroes&quot; link to activate a dialog.</source>
          <target state="translated">ブラウザの戻るボタンをクリックするか、「Heroes」リンクをクリックするとダイアログが表示されます。</target>
        </trans-unit>
        <trans-unit id="77e578611e4803016143a92e1ef69e1623c79dcb" translate="yes" xml:space="preserve">
          <source>Click the browser's back and forward buttons and the browser navigates backward and forward through the history of pages you've seen.</source>
          <target state="translated">ブラウザの戻るボタンと進むボタンをクリックすると、ブラウザは見たことのあるページの履歴を前後に移動します。</target>
        </trans-unit>
        <trans-unit id="ceea20d77290f0cb78d5f302dff2055b8d170030" translate="yes" xml:space="preserve">
          <source>Click the browser's back and forward buttons, and the browser navigates backward and forward through the history of pages you've seen.</source>
          <target state="translated">ブラウザの「戻る」「進む」ボタンをクリックすると、見たページの履歴からブラウザが前後に移動します。</target>
        </trans-unit>
        <trans-unit id="c3c0280b7777b8cef4c29b98f8d337fb8e934ef7" translate="yes" xml:space="preserve">
          <source>Click the element</source>
          <target state="translated">要素をクリックします。</target>
        </trans-unit>
        <trans-unit id="950e0a5a7930594e16bd57f00c733233272c41ae" translate="yes" xml:space="preserve">
          <source>Click the link. The address bar updates to &lt;code&gt;/heroes&lt;/code&gt; and the list of heroes appears.</source>
          <target state="translated">リンクをクリックします。アドレスバーが &lt;code&gt;/heroes&lt;/code&gt; に更新され、ヒーローのリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="09703d1ff01a59ef498218efeacdae1639095d1f" translate="yes" xml:space="preserve">
          <source>Clicking</source>
          <target state="translated">Clicking</target>
        </trans-unit>
        <trans-unit id="1da2ea4a87d6f19823b803f949be3d7491916217" translate="yes" xml:space="preserve">
          <source>Clicking a button triggers emission of a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the boolean &lt;em&gt;payload&lt;/em&gt;.</source>
          <target state="translated">ボタンをクリックすると、ブール&lt;em&gt;ペイロード&lt;/em&gt;である &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; の発行がトリガーされます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bb49b11f73402cdd0bffcf5889ea5a109de39f23" translate="yes" xml:space="preserve">
          <source>Clicking a button, an anchor, or an arbitrary HTML element is a common test task.</source>
          <target state="translated">ボタンやアンカー、任意のHTML要素をクリックすることは、一般的なテスト作業です。</target>
        </trans-unit>
        <trans-unit id="9e48257c907b0db2169f81abb1cd380daa59c644" translate="yes" xml:space="preserve">
          <source>Clicking a hero item now does nothing. You'll &lt;a href=&quot;toh-pt5#heroes-component-links&quot;&gt;fix that shortly&lt;/a&gt; after you enable routing to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">ヒーローアイテムをクリックしても何も起こりません。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; へのルーティングを有効に&lt;a href=&quot;toh-pt5#heroes-component-links&quot;&gt;した直後&lt;/a&gt;に修正します。</target>
        </trans-unit>
        <trans-unit id="c5a1b225039f1d739bb3ad5c0e447f8353e3f6c3" translate="yes" xml:space="preserve">
          <source>Clicking a hero on the Heroes page does nothing.</source>
          <target state="translated">ヒーローページのヒーローをクリックしても何もしません。</target>
        </trans-unit>
        <trans-unit id="94ce9e68184680b2bf6501df58c75a0e538fcd4b" translate="yes" xml:space="preserve">
          <source>Clicking links on the page to navigate to a new view.</source>
          <target state="translated">ページ上のリンクをクリックすると、新しいビューに移動します。</target>
        </trans-unit>
        <trans-unit id="8c4d1f403e12c12ef8797335854dcbcd6dfc676b" translate="yes" xml:space="preserve">
          <source>Clicking the &quot;Back&quot; button returns you to the Dashboard. Links at the top take you to either of the main views. If you click &quot;Heroes,&quot; the app displays the &quot;Heroes&quot; master list view.</source>
          <target state="translated">戻る」ボタンをクリックするとダッシュボードに戻ります。上部にあるリンクをクリックすると、どちらかのメインビューに移動できます。Heroes」をクリックすると、「Heroes」マスターリストビューが表示されます。</target>
        </trans-unit>
        <trans-unit id="3931f42f723a39b2782772fe00cbe5cefdd4bca6" translate="yes" xml:space="preserve">
          <source>Clicking the &quot;send&quot; or &quot;cancel&quot; buttons &lt;em&gt;does&lt;/em&gt; clear the popup view. To see how, look at the &lt;code&gt;closePopup()&lt;/code&gt; method again:</source>
          <target state="translated">「送信」または「キャンセル」ボタンをクリックすると、ポップアップビュー&lt;em&gt;が&lt;/em&gt;クリアされます。方法を確認するには、 &lt;code&gt;closePopup()&lt;/code&gt; メソッドをもう一度見てください。</target>
        </trans-unit>
        <trans-unit id="ed7c6ba8c7bda81a369f7c3bda47c29a3eeebae0" translate="yes" xml:space="preserve">
          <source>Clicking the &quot;send&quot; or &quot;cancel&quot; buttons clears the popup view. The &lt;code&gt;closePopup()&lt;/code&gt; function navigates imperatively with the &lt;code&gt;&lt;a href=&quot;../api/router/router#navigate&quot;&gt;Router.navigate()&lt;/a&gt;&lt;/code&gt; method, passing in a &lt;a href=&quot;router-tutorial-toh#link-parameters-array&quot;&gt;link parameters array&lt;/a&gt;.</source>
          <target state="translated">「送信」または「キャンセル」ボタンをクリックすると、ポップアップビューがクリアされます。 &lt;code&gt;closePopup()&lt;/code&gt; 関数は、命令的でナビゲート &lt;code&gt;&lt;a href=&quot;../api/router/router#navigate&quot;&gt;Router.navigate()&lt;/a&gt;&lt;/code&gt; に渡して、メソッド&lt;a href=&quot;router-tutorial-toh#link-parameters-array&quot;&gt;リンクパラメータアレイ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3bd67b84f237767316633df665005c5fee0b984a" translate="yes" xml:space="preserve">
          <source>Clicking the &lt;strong&gt;Toggle Format&lt;/strong&gt; button alternates the date format between &lt;strong&gt;04/15/1988&lt;/strong&gt; and &lt;strong&gt;Friday, April 15, 1988&lt;/strong&gt; as shown in Figure 1.</source>
          <target state="translated">クリックする&lt;strong&gt;トグルフォーマット&lt;/strong&gt;間の日付形式交互ボタン&lt;strong&gt;1988年4月15日&lt;/strong&gt;および&lt;strong&gt;1988年4月15日（金曜日）を&lt;/strong&gt;図1に示すように。</target>
        </trans-unit>
        <trans-unit id="bedc0826561d31a8b6c6010ebae551f66676ec2d" translate="yes" xml:space="preserve">
          <source>Clicking the anchor should trigger the &lt;code&gt;onClick()&lt;/code&gt; method, which sets the stub's telltale &lt;code&gt;navigatedTo&lt;/code&gt; property. Tests inspect &lt;code&gt;navigatedTo&lt;/code&gt; to confirm that clicking the anchor set the expected route definition.</source>
          <target state="translated">アンカーをクリックすると、 &lt;code&gt;onClick()&lt;/code&gt; メソッドがトリガーされ、スタブのtelltale &lt;code&gt;navigatedTo&lt;/code&gt; プロパティが設定されます。テストでは、 &lt;code&gt;navigatedTo&lt;/code&gt; を検査して、アンカーをクリックすると、予想されるルート定義が設定されたことを確認します。</target>
        </trans-unit>
        <trans-unit id="88ad3185671e9634fbadbdf0d6fee2b35a217039" translate="yes" xml:space="preserve">
          <source>Clicking the anchor should trigger the &lt;code&gt;onClick()&lt;/code&gt; method, which sets the stub's telltale &lt;code&gt;navigatedTo&lt;/code&gt; property. Tests inspect &lt;code&gt;navigatedTo&lt;/code&gt; to confirm that clicking the anchor sets the expected route definition.</source>
          <target state="translated">アンカーをクリックすると、 &lt;code&gt;onClick()&lt;/code&gt; メソッドがトリガーされ、スタブの明確な &lt;code&gt;navigatedTo&lt;/code&gt; プロパティが設定されます。テストは &lt;code&gt;navigatedTo&lt;/code&gt; を検査して、アンカーをクリックすると予想されるルート定義が設定されることを確認します。</target>
        </trans-unit>
        <trans-unit id="12253f021080f649864e8562ff22cff12f2021fe" translate="yes" xml:space="preserve">
          <source>Clicking the browser's back and forward buttons to navigate backward and forward through the browser history.</source>
          <target state="translated">ブラウザの戻るボタンと進むボタンをクリックすると、ブラウザの履歴を前後に移動することができます。</target>
        </trans-unit>
        <trans-unit id="833d3dfcf8141f8ab032d805db00496f93b18f57" translate="yes" xml:space="preserve">
          <source>Clicking the buttons updates the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; via the two-way binding. The revised &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; value flows through to the &lt;em&gt;style&lt;/em&gt; binding, making the displayed text bigger or smaller.</source>
          <target state="translated">ボタンをクリックすると、双方向バインディングを介して &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; が更新されます。改訂された &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 値は&lt;em&gt;スタイル&lt;/em&gt;バインディングに流れ、表示されるテキストを大きくまたは小さくします。</target>
        </trans-unit>
        <trans-unit id="4019990d5ee4de358717aa9c4b4dff1e9e791976" translate="yes" xml:space="preserve">
          <source>Clicking the buttons updates the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt;. The revised &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; value updates the style binding, which makes the displayed text bigger or smaller.</source>
          <target state="translated">ボタンをクリックすると、 &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; が更新されます。改訂された &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 値は、スタイルバインディングを更新し、表示されるテキストを拡大または縮小します。</target>
        </trans-unit>
        <trans-unit id="ce15a56b0476c91447205e4359b504b835e90758" translate="yes" xml:space="preserve">
          <source>Clicking the first link opens the code sample on StackBlitz in a new browser tab.</source>
          <target state="translated">最初のリンクをクリックすると、StackBlitzのコードサンプルが新しいブラウザタブで開きます。</target>
        </trans-unit>
        <trans-unit id="7b9d81bfcc7b8b133f0723740f8c5243f83c2166" translate="yes" xml:space="preserve">
          <source>Clicking the hero should raise a &lt;code&gt;selected&lt;/code&gt; event that the host component (&lt;code&gt;DashboardComponent&lt;/code&gt; presumably) can hear:</source>
          <target state="translated">ヒーローをクリックすると、ホストコンポーネント（おそらく &lt;code&gt;DashboardComponent&lt;/code&gt; ）が聞くことができる &lt;code&gt;selected&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="6c2cb6b6d4534d0f7d4f44550ee1cd3f63622c02" translate="yes" xml:space="preserve">
          <source>Client-server interaction</source>
          <target state="translated">クライアントとサーバーの相互作用</target>
        </trans-unit>
        <trans-unit id="3d05b7f9deccb2161007447387fcc1ecd84c7c85" translate="yes" xml:space="preserve">
          <source>ClientMessageBroker</source>
          <target state="translated">ClientMessageBroker</target>
        </trans-unit>
        <trans-unit id="e7cb0d70d74fee09271bd2dc0ab81ce5975a34ae" translate="yes" xml:space="preserve">
          <source>ClientMessageBrokerFactory</source>
          <target state="translated">ClientMessageBrokerFactory</target>
        </trans-unit>
        <trans-unit id="d8cdb573350de78596e4852bc9cacfc94e8d17ed" translate="yes" xml:space="preserve">
          <source>Clone</source>
          <target state="translated">Clone</target>
        </trans-unit>
        <trans-unit id="f13a5b201f983728d6b1d5cf4f74c7adbf318e65" translate="yes" xml:space="preserve">
          <source>Clone the request object, using its &lt;code&gt;clone()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;clone()&lt;/code&gt; メソッドを使用して、リクエストオブジェクトのクローンを作成します。</target>
        </trans-unit>
        <trans-unit id="979edc50fbf6954ad12084978da00876eb48ddf3" translate="yes" xml:space="preserve">
          <source>Clone the resulting value so that it has a new identity.</source>
          <target state="translated">結果の値をクローン化して、新しい ID を持つようにします。</target>
        </trans-unit>
        <trans-unit id="9c510c50acb1cdb4194bcb189503fb557b8f0d1d" translate="yes" xml:space="preserve">
          <source>Close the application tab, but not the window. This should also close the Developer Tools.</source>
          <target state="translated">ウィンドウではなく、アプリケーションタブを閉じます。これにより、Developer Toolsも閉じられるはずです。</target>
        </trans-unit>
        <trans-unit id="22f63b79b03d3993269429e6178e7579689d4daf" translate="yes" xml:space="preserve">
          <source>Closest replacement in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt; / testingで最も近い置換</target>
        </trans-unit>
        <trans-unit id="e671772e24b04909f77713dfe4745675929c9db3" translate="yes" xml:space="preserve">
          <source>Closest replacement in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;httpで&lt;/a&gt;最も近い置換</target>
        </trans-unit>
        <trans-unit id="3e26d090c81cd0ae4e4685584b8cbc871399a5ff" translate="yes" xml:space="preserve">
          <source>Code Tabs</source>
          <target state="translated">コードタブ</target>
        </trans-unit>
        <trans-unit id="fb03260f7d7c972c5f881252a1bf5974c61308ba" translate="yes" xml:space="preserve">
          <source>Code associated with a component that defines how to render the component's &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;.</source>
          <target state="translated">コンポーネントの&lt;a href=&quot;glossary#view&quot;&gt;ビューの&lt;/a&gt;レンダリング方法を定義するコンポーネントに関連付けられたコード。</target>
        </trans-unit>
        <trans-unit id="26f8d7e5de50c48432a82b39f956846ac9a3edf2" translate="yes" xml:space="preserve">
          <source>Code coverage enforcement</source>
          <target state="translated">コードカバレッジの実施</target>
        </trans-unit>
        <trans-unit id="f46c72bf4ae7eb48d96f55e4013ee3f2d7142778" translate="yes" xml:space="preserve">
          <source>Code example</source>
          <target state="translated">コード例</target>
        </trans-unit>
        <trans-unit id="7f24c84fb8f4849c887796b363e0764aa6358136" translate="yes" xml:space="preserve">
          <source>Code folding</source>
          <target state="translated">コードの折り返し</target>
        </trans-unit>
        <trans-unit id="c7d0e7e0e4dd707c2571466fd21232a0c600fae4" translate="yes" xml:space="preserve">
          <source>Code review</source>
          <target state="translated">コードレビュー</target>
        </trans-unit>
        <trans-unit id="6e9e83946f82934cc9af7eabf849f56e5568af17" translate="yes" xml:space="preserve">
          <source>Code samples are located in sub-folders of the &lt;code&gt;content/examples&lt;/code&gt; directory of the &lt;code&gt;angular/angular&lt;/code&gt; repository. An example folder name should be the same as the guide page it supports.</source>
          <target state="translated">コードサンプルは、 &lt;code&gt;angular/angular&lt;/code&gt; リポジトリの &lt;code&gt;content/examples&lt;/code&gt; ディレクトリのサブフォルダーにあります。サンプルのフォルダ名は、サポートされているガイドページと同じにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e41d178927f51afd0c45ad6d7fa26a126615f9ca" translate="yes" xml:space="preserve">
          <source>Code snippet from a file</source>
          <target state="translated">ファイルからのコードスニペット</target>
        </trans-unit>
        <trans-unit id="224c92aae86d4dcbe90c7f9da817abd49a68a22a" translate="yes" xml:space="preserve">
          <source>Code snippet markup is always in the form of a comment. Here's the default &lt;em&gt;docregion&lt;/em&gt; markup for a TypeScript or JavaScript file:</source>
          <target state="translated">コードスニペットマークアップは常にコメントの形式です。TypeScriptまたはJavaScriptファイルのデフォルトの&lt;em&gt;docregion&lt;/em&gt;マークアップは&lt;em&gt;次のとおり&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="12290540d14510f52b7f0030a442c0c44cb71ecb" translate="yes" xml:space="preserve">
          <source>Code snippet markup is not supported for JSON files because comments are forbidden in JSON files.</source>
          <target state="translated">JSONファイルではコメントが禁止されているため、コードスニペットのマークアップはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="98236b3d17ceed033b542d4613eb46ba6e125324" translate="yes" xml:space="preserve">
          <source>Code snippet markup is not supported in JSON files because comments are forbidden in JSON files. See &lt;a href=&quot;docs-style-guide#json-files&quot;&gt;below&lt;/a&gt; for details and workarounds.</source>
          <target state="translated">JSONファイルではコメントが禁止されているため、JSONファイルではコードスニペットマークアップはサポートされていません。参照してください&lt;a href=&quot;docs-style-guide#json-files&quot;&gt;以下の&lt;/a&gt;詳細と回避策のために。</target>
        </trans-unit>
        <trans-unit id="b2f3eed2a4a45d8750a9e33d1ea2457771c53179" translate="yes" xml:space="preserve">
          <source>Code snippets</source>
          <target state="translated">コードスニペット</target>
        </trans-unit>
        <trans-unit id="ac2970f6e6c3e24b562997868c5c1c3fdd412357" translate="yes" xml:space="preserve">
          <source>Code snippets and code samples</source>
          <target state="translated">コードスニペットとコードサンプル</target>
        </trans-unit>
        <trans-unit id="1c800abf691fed44650ecde40fa2cf5185767d18" translate="yes" xml:space="preserve">
          <source>Code tabs display code much like &lt;em&gt;code examples&lt;/em&gt; do. The added advantage is that they can display multiple code samples within a tabbed interface. Each tab is displayed using &lt;em&gt;code pane&lt;/em&gt;.</source>
          <target state="translated">コードタブには、&lt;em&gt;コード例と&lt;/em&gt;同じように&lt;em&gt;コードが&lt;/em&gt;表示されます。追加の利点は、タブ付きインターフェイス内で複数のコードサンプルを表示できることです。各タブは、&lt;em&gt;コードペイン&lt;/em&gt;を使用して表示されます。</target>
        </trans-unit>
        <trans-unit id="60d1d282300abe29d2517743776fdb26166449e8" translate="yes" xml:space="preserve">
          <source>Code that defines how to render a component's &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;.</source>
          <target state="translated">コンポーネントの&lt;a href=&quot;glossary#view&quot;&gt;ビュー&lt;/a&gt;をレンダリングする方法を定義するコード。</target>
        </trans-unit>
        <trans-unit id="c7ddc435fb2f971e641394b8fc884d949522ab45" translate="yes" xml:space="preserve">
          <source>Code that defines the transformation logic for a named schematic.</source>
          <target state="translated">名前付き回路図の変換ロジックを定義するコード。</target>
        </trans-unit>
        <trans-unit id="24a9b1e9a69e6a776df404d65c076ef88075529c" translate="yes" xml:space="preserve">
          <source>Code-example attributes</source>
          <target state="translated">コード例の属性</target>
        </trans-unit>
        <trans-unit id="205fb81b522095ce244f559338855e2127cf2d16" translate="yes" xml:space="preserve">
          <source>Code-pane attributes</source>
          <target state="translated">コードペイン属性</target>
        </trans-unit>
        <trans-unit id="1b719f3a5e89b82f76e2afe3515e95ab5698cea1" translate="yes" xml:space="preserve">
          <source>Code-tabs attributes</source>
          <target state="translated">コードタブ属性</target>
        </trans-unit>
        <trans-unit id="8011ac79125624099e9d32e8ef670f86528c2033" translate="yes" xml:space="preserve">
          <source>Codelyzer</source>
          <target state="translated">Codelyzer</target>
        </trans-unit>
        <trans-unit id="4da50236eb720bd1413455d107dba335697d2a6a" translate="yes" xml:space="preserve">
          <source>Collection contents</source>
          <target state="translated">コレクション内容</target>
        </trans-unit>
        <trans-unit id="e8caf58ebc2730336f5d66018e3945727efc9abc" translate="yes" xml:space="preserve">
          <source>CollectionChangeRecord</source>
          <target state="translated">CollectionChangeRecord</target>
        </trans-unit>
        <trans-unit id="704d77ae57700872edc3b0ef3936e933a5f675f8" translate="yes" xml:space="preserve">
          <source>CollectionChangeRecord has been removed from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">CollectionChangeRecordは &lt;code&gt;@angular/core&lt;/code&gt; から削除されました。</target>
        </trans-unit>
        <trans-unit id="db316d38e0f2c64e217b3a2605bcc3104e4dc570" translate="yes" xml:space="preserve">
          <source>Combination</source>
          <target state="translated">Combination</target>
        </trans-unit>
        <trans-unit id="2d4444c960a283390201d4508071d4dfe606c872" translate="yes" xml:space="preserve">
          <source>Combination of NgModuleFactory and ComponentFactorys.</source>
          <target state="translated">NgModuleFactoryとComponentFactorysの組み合わせ。</target>
        </trans-unit>
        <trans-unit id="96027d3744e326ba68544f30c3f8c184f6f702c7" translate="yes" xml:space="preserve">
          <source>Combining fragments</source>
          <target state="translated">フラグメントの組み合わせ</target>
        </trans-unit>
        <trans-unit id="edd1876ade856fe13c97a7af4232c252d357d410" translate="yes" xml:space="preserve">
          <source>Combining wildcard and void states</source>
          <target state="translated">ワイルドカード状態とボイド状態の組み合わせ</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="40a13131a199f7ed2b2e53bae9c0a5634c9185ef" translate="yes" xml:space="preserve">
          <source>Command Overview</source>
          <target state="translated">コマンドの概要</target>
        </trans-unit>
        <trans-unit id="28d23da4f1861c2de251864384cc90103263376a" translate="yes" xml:space="preserve">
          <source>Command syntax is shown as follows:</source>
          <target state="translated">コマンドの構文を以下に示します。</target>
        </trans-unit>
        <trans-unit id="b0136eb7ffb449c2fa1b21274a97fdd8125ef15a" translate="yes" xml:space="preserve">
          <source>Commands that create or operate on apps and libraries (such as &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;generate&lt;/code&gt;) must be executed from within a workspace folder.</source>
          <target state="translated">アプリやライブラリを作成または操作するコマンド（ &lt;code&gt;add&lt;/code&gt; や &lt;code&gt;generate&lt;/code&gt; など）は、ワークスペースフォルダー内から実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="2ca70f350a6f210d28976b0de4f46edc3d73716f" translate="yes" xml:space="preserve">
          <source>Commands to pass to &lt;a href=&quot;router#createUrlTree&quot;&gt;Router#createUrlTree&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;router#createUrlTree&quot;&gt;Router＃createUrlTree&lt;/a&gt;に渡すコマンド。</target>
        </trans-unit>
        <trans-unit id="63648a31e444c32ef66681b6888f0fca2836a055" translate="yes" xml:space="preserve">
          <source>Commit your changes and push.</source>
          <target state="translated">変更をコミットしてプッシュします。</target>
        </trans-unit>
        <trans-unit id="57ab8c257689203b118f3c804918fdfca1d175ab" translate="yes" xml:space="preserve">
          <source>Common form foundation classes</source>
          <target state="translated">共通フォームの基礎クラス</target>
        </trans-unit>
        <trans-unit id="30f749ce740e43f064650c91d9a8aebd2ae4577f" translate="yes" xml:space="preserve">
          <source>Common foundation</source>
          <target state="translated">共通基盤</target>
        </trans-unit>
        <trans-unit id="044d38e8939c8f6fc027ea1c90729d6aca7109d3" translate="yes" xml:space="preserve">
          <source>Common operators</source>
          <target state="translated">一般的な演算子</target>
        </trans-unit>
        <trans-unit id="badb8aff5ba142329a4ad7b62d8078cf42193553" translate="yes" xml:space="preserve">
          <source>CommonModule</source>
          <target state="translated">CommonModule</target>
        </trans-unit>
        <trans-unit id="330108f2948a787f6e9066865ea2b3a47c42f980" translate="yes" xml:space="preserve">
          <source>Communicating with backend services using HTTP</source>
          <target state="translated">HTTP を使用したバックエンドサービスとの通信</target>
        </trans-unit>
        <trans-unit id="61c86ad5105299805677289b9b80314247887cba" translate="yes" xml:space="preserve">
          <source>Compare to &lt;a href=&quot;glossary#aot&quot;&gt;ahead-of-time (AOT) compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#aot&quot;&gt;事前（AOT）コンパイルと&lt;/a&gt;比較してください。</target>
        </trans-unit>
        <trans-unit id="25d26218f8a73479c8f90335a3a6a00b6f337b22" translate="yes" xml:space="preserve">
          <source>Compare to &lt;a href=&quot;glossary#custom-element&quot;&gt;custom element&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#custom-element&quot;&gt;カスタム要素と&lt;/a&gt;比較してください。</target>
        </trans-unit>
        <trans-unit id="c022e170fda3db787738674a20dda4b677e11ddc" translate="yes" xml:space="preserve">
          <source>Compare to &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModuleと&lt;/a&gt;比較してください。</target>
        </trans-unit>
        <trans-unit id="ca9d691190a1543ad5b5951dda02661148f1dad1" translate="yes" xml:space="preserve">
          <source>Compare using the form builder to creating the instances manually.</source>
          <target state="translated">フォームビルダーを使用して手動でインスタンスを作成する場合と比較してみましょう。</target>
        </trans-unit>
        <trans-unit id="4d3180d25790308ffef9fbe2de02c0c538d01c88" translate="yes" xml:space="preserve">
          <source>Compare with the less preferred &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata alternative.</source>
          <target state="translated">優先度の低い &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; メタデータの代替と比較してください。</target>
        </trans-unit>
        <trans-unit id="6e1d3d4dd4c47e1814c4e761fa8b3742c4180807" translate="yes" xml:space="preserve">
          <source>Compare with the less preferred &lt;code&gt;host&lt;/code&gt; metadata alternative.</source>
          <target state="translated">あまり好ましくない &lt;code&gt;host&lt;/code&gt; メタデータの代替案と比較してください。</target>
        </trans-unit>
        <trans-unit id="231783f3babfb643d604e3827c29b662da5ecc82" translate="yes" xml:space="preserve">
          <source>Comparing dates inside fakeAsync()</source>
          <target state="translated">fakeAsync()内での日付の比較</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="1b02994ca75141a94477242c55d0ff492b4469de" translate="yes" xml:space="preserve">
          <source>Compatibility note: The primary goal of the backward compatibility promise is to ensure that changes in the core framework and tooling don't break the existing ecosystem of components and applications and don't put undue upgrade/migration burden on Angular application and component authors.</source>
          <target state="translated">互換性に関する注意:後方互換性の約束の第一の目的は、コアフレームワークやツールの変更がコンポーネントやアプリケーションの既存のエコシステムを壊さず、Angularアプリケーションやコンポーネントの作者に過度なアップグレードや移行の負担をかけないようにすることです。</target>
        </trans-unit>
        <trans-unit id="7351891215f76c0244ff90f141a455e333b9ba9d" translate="yes" xml:space="preserve">
          <source>Compilation phases</source>
          <target state="translated">コンパイルフェーズ</target>
        </trans-unit>
        <trans-unit id="b23c833bc98e34fcc44de353781870a6809c2ce3" translate="yes" xml:space="preserve">
          <source>Compile components with a &lt;code&gt;templateUrl&lt;/code&gt; for the test's NgModule. It is necessary to call this function as fetching urls is asynchronous.</source>
          <target state="translated">テストのNgModuleの &lt;code&gt;templateUrl&lt;/code&gt; を使用してコンポーネントをコンパイルします。URLのフェッチは非同期であるため、この関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b1e019565fd0e122114fad2a76572cafa4c0d552" translate="yes" xml:space="preserve">
          <source>Compile the testing module asynchronously after you've finished configuring it. You &lt;strong&gt;must&lt;/strong&gt; call this method if &lt;em&gt;any&lt;/em&gt; of the testing module components have a &lt;code&gt;templateUrl&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; because fetching component template and style files is necessarily asynchronous. See &lt;a href=&quot;testing#compile-components&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">構成が完了したら、テストモジュールを非同期でコンパイルします。あなたは&lt;strong&gt;しなければならない&lt;/strong&gt;場合は、このメソッドを呼び出す&lt;em&gt;任意の&lt;/em&gt;テストモジュールコンポーネントのが持っている &lt;code&gt;templateUrl&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; をコンポーネントテンプレートとスタイルファイルを取得することは、必ずしも非同期であるため。&lt;a href=&quot;testing#compile-components&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="979fc7207da6edba1a20461ed1a9228b964150ac" translate="yes" xml:space="preserve">
          <source>Compile the testing module asynchronously after you've finished configuring it. You &lt;strong&gt;must&lt;/strong&gt; call this method if &lt;em&gt;any&lt;/em&gt; of the testing module components have a &lt;code&gt;templateUrl&lt;/code&gt; or &lt;code&gt;styleUrls&lt;/code&gt; because fetching component template and style files is necessarily asynchronous. See &lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">構成が完了したら、テストモジュールを非同期でコンパイルします。あなたは&lt;strong&gt;しなければならない&lt;/strong&gt;場合は、このメソッドを呼び出す&lt;em&gt;任意の&lt;/em&gt;テストモジュールコンポーネントのが持っている &lt;code&gt;templateUrl&lt;/code&gt; または &lt;code&gt;styleUrls&lt;/code&gt; をコンポーネントテンプレートとスタイルファイルを取得することは、必ずしも非同期であるため。&lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="341a20e237ff5c4b89204a3d4d8c8af5f8aa63bb" translate="yes" xml:space="preserve">
          <source>Compiler</source>
          <target state="translated">Compiler</target>
        </trans-unit>
        <trans-unit id="a4ff411395a91d5b1dc79f3d1278e69cf04aa8b5" translate="yes" xml:space="preserve">
          <source>CompilerFactory</source>
          <target state="translated">CompilerFactory</target>
        </trans-unit>
        <trans-unit id="4dc2ee3abd448529e3588f53e80d60d1f5288a64" translate="yes" xml:space="preserve">
          <source>CompilerOptions</source>
          <target state="translated">CompilerOptions</target>
        </trans-unit>
        <trans-unit id="1b49f0cb07fed5cfdb96ce2bba96d96a96d357fa" translate="yes" xml:space="preserve">
          <source>Compiles an Angular app into an output directory named dist/ at the given output path. Must be executed from within a workspace directory.</source>
          <target state="translated">Angularアプリを指定された出力パスのdist/という名前の出力ディレクトリにコンパイルします。ワークスペースディレクトリ内から実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="14f023360e44232d193e338a890e4c19d000308a" translate="yes" xml:space="preserve">
          <source>Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and &lt;a href=&quot;bootstrapping&quot;&gt;bootstraps&lt;/a&gt; the application's main module (&lt;code&gt;AppModule&lt;/code&gt;) to run in the browser. The JIT compiler is a reasonable choice during the development of most projects and it's the only viable choice for a sample running in a &lt;em&gt;live-coding&lt;/em&gt; environment such as Stackblitz. Alternative &lt;a href=&quot;aot-compiler&quot;&gt;compilation&lt;/a&gt;, &lt;a href=&quot;build&quot;&gt;build&lt;/a&gt;, and &lt;a href=&quot;deployment&quot;&gt;deployment&lt;/a&gt; options are available.</source>
          <target state="translated">使用してアプリケーションをコンパイルし&lt;a href=&quot;glossary#jit&quot;&gt;JITコンパイラ&lt;/a&gt;および&lt;a href=&quot;bootstrapping&quot;&gt;ブートストラップ&lt;/a&gt;アプリケーションのメインモジュール（ &lt;code&gt;AppModule&lt;/code&gt; ブラウザで実行するために）。JITコンパイラーは、ほとんどのプロジェクトの開発中に妥当な選択であり、Stackblitzなどの&lt;em&gt;ライブコーディング&lt;/em&gt;環境で実行されているサンプルの唯一の実行可能な選択です。代替の&lt;a href=&quot;aot-compiler&quot;&gt;コンパイル&lt;/a&gt;、&lt;a href=&quot;build&quot;&gt;ビルド&lt;/a&gt;、および&lt;a href=&quot;deployment&quot;&gt;配置&lt;/a&gt;オプションが利用可能です。</target>
        </trans-unit>
        <trans-unit id="50708126059fa40a6b557ef77b37be70a346beb5" translate="yes" xml:space="preserve">
          <source>Compiles the given NgModule and all of its components</source>
          <target state="translated">与えられたNgModuleとそのすべてのコンポーネントをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="73b7b9c6e3ac2f9105c846798742f2893a8be9e7" translate="yes" xml:space="preserve">
          <source>Compiles the given NgModule and all of its components. All templates of the components listed in &lt;code&gt;entryComponents&lt;/code&gt; have to be inlined.</source>
          <target state="translated">指定されたNgModuleとそのすべてのコンポーネントをコンパイルします。 &lt;code&gt;entryComponents&lt;/code&gt; にリストされているコンポーネントのすべてのテンプレートをインライン化する必要があります。</target>
        </trans-unit>
        <trans-unit id="b93c67d6547ff213b669253b4ffc6f0cdf8f366d" translate="yes" xml:space="preserve">
          <source>Completed Tour of Heroes example application. For more information, see &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes app and tutorial&lt;/a&gt;.</source>
          <target state="translated">Tour ofHeroesサンプルアプリケーションを完了しました。詳細については、&lt;a href=&quot;tutorial&quot;&gt;Tour ofHeroesアプリとチュートリアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="de39b9b91b8f7180a411b770d0b07b5599e52b42" translate="yes" xml:space="preserve">
          <source>Completions lists</source>
          <target state="translated">完成品リスト</target>
        </trans-unit>
        <trans-unit id="8888e0cf1a2c2fd0498704b282ff6ffc60e95cb3" translate="yes" xml:space="preserve">
          <source>Complex animation Sequences</source>
          <target state="translated">複雑なアニメーションのシーケンス</target>
        </trans-unit>
        <trans-unit id="6c208d675cf6c07a5ea2f5b619875954f7edeb3a" translate="yes" xml:space="preserve">
          <source>Complex animation sequences</source>
          <target state="translated">複雑なアニメーションシーケンス</target>
        </trans-unit>
        <trans-unit id="38bb4df6bab9aede2293cef9b9ad58be0b3a29a1" translate="yes" xml:space="preserve">
          <source>Complex animations can have many things happening at once. But what if you want to create an animation involving several animations happening one after the other? Earlier we used &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; to run multiple animations all at the same time, in parallel.</source>
          <target state="translated">複雑なアニメーションでは、一度に多くのことが発生する可能性があります。しかし、次々に発生するいくつかのアニメーションを含むアニメーションを作成したい場合はどうでしょうか？以前は、&lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;を使用して、同時に複数のアニメーションを同時に実行していました。</target>
        </trans-unit>
        <trans-unit id="e7b80648a434b40526c0d9e8ab3bbc1771baf9d8" translate="yes" xml:space="preserve">
          <source>Complex configuration values</source>
          <target state="translated">複雑な構成値</target>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes" xml:space="preserve">
          <source>Component</source>
          <target state="translated">Component</target>
        </trans-unit>
        <trans-unit id="516d8480c6ea7e5e78171eef9373ac7cd5f70db0" translate="yes" xml:space="preserve">
          <source>Component (B) is the parent of another component (C) that defines its own, even &lt;em&gt;more specialized&lt;/em&gt; provider for &lt;code&gt;CarService&lt;/code&gt;.</source>
          <target state="translated">コンポーネント（B）は別のコンポーネント（C）の親であり、 &lt;code&gt;CarService&lt;/code&gt; の独自の、&lt;em&gt;さらに特化した&lt;/em&gt;プロバイダーを定義します。</target>
        </trans-unit>
        <trans-unit id="6c6a824a16623ee0b32f2357a8d7b8db120fe3be" translate="yes" xml:space="preserve">
          <source>Component DOM testing</source>
          <target state="translated">コンポーネント DOM テスト</target>
        </trans-unit>
        <trans-unit id="8ea7f737b1c6dd041d0d69bb58b053702ef34738" translate="yes" xml:space="preserve">
          <source>Component Interaction</source>
          <target state="translated">コンポーネントの相互作用</target>
        </trans-unit>
        <trans-unit id="1119a03609be0e26f0b83ce1b815ac1ef4ba2995" translate="yes" xml:space="preserve">
          <source>Component Styles</source>
          <target state="translated">コンポーネントスタイル</target>
        </trans-unit>
        <trans-unit id="ca7585be91ae5aa056821ee74e95e1de1b09310c" translate="yes" xml:space="preserve">
          <source>Component Test Basics</source>
          <target state="translated">コンポーネントテストの基本</target>
        </trans-unit>
        <trans-unit id="fc991f93e2c88dc262e01671c09afbe0757e6c8e" translate="yes" xml:space="preserve">
          <source>Component Test Scenarios</source>
          <target state="translated">コンポーネントテストシナリオ</target>
        </trans-unit>
        <trans-unit id="fd40a457b9e4e1afef35a0f7de1f3f1f701d052a" translate="yes" xml:space="preserve">
          <source>Component binding</source>
          <target state="translated">コンポーネントバインディング</target>
        </trans-unit>
        <trans-unit id="cd24457c9b7dc7ba1d421757845f793c80019fa2" translate="yes" xml:space="preserve">
          <source>Component class</source>
          <target state="translated">コンポーネントクラス</target>
        </trans-unit>
        <trans-unit id="78197fcc61b947f45c6d27cabc4c7c8a26dd350e" translate="yes" xml:space="preserve">
          <source>Component class testing</source>
          <target state="translated">コンポーネントクラスのテスト</target>
        </trans-unit>
        <trans-unit id="173ef8eef33b3a015b205cd7b3e1051414c17628" translate="yes" xml:space="preserve">
          <source>Component class testing should be kept very clean and simple. It should test only a single unit. At first glance, you should be able to understand what the test is testing.</source>
          <target state="translated">コンポーネントクラスのテストは、非常にクリーンでシンプルに保たれるべきです。それは単一のユニットのみをテストするべきです。一見すると、テストが何をテストしているのか理解できるはずです。</target>
        </trans-unit>
        <trans-unit id="edd1cb80eef428ae3b3e4c894c36b107b7a92287" translate="yes" xml:space="preserve">
          <source>Component configuration</source>
          <target state="translated">コンポーネント構成</target>
        </trans-unit>
        <trans-unit id="e403eb48a3799fbeef85de47dee17fd3567678c4" translate="yes" xml:space="preserve">
          <source>Component custom prefix</source>
          <target state="translated">コンポーネントのカスタムプレフィックス</target>
        </trans-unit>
        <trans-unit id="92223451f571ab07fa63eb6c4fdc64e185de9c7d" translate="yes" xml:space="preserve">
          <source>Component decorator</source>
          <target state="translated">コンポーネントデコレータ</target>
        </trans-unit>
        <trans-unit id="4b156bc6b7215149af0299458e72e26181d26575" translate="yes" xml:space="preserve">
          <source>Component directives &lt;strong&gt;should not&lt;/strong&gt; use the following attributes:</source>
          <target state="translated">コンポーネントディレクティブ&lt;strong&gt;では&lt;/strong&gt;、次の属性を使用し&lt;strong&gt;ないでください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1b2c144285210dd5bbe0792678f5f896a79660c5" translate="yes" xml:space="preserve">
          <source>Component directives may also use the following attributes:</source>
          <target state="translated">コンポーネントディレクティブは、以下の属性を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c54468e20f7644178b82ade992718614d8369ce7" translate="yes" xml:space="preserve">
          <source>Component inside a test host</source>
          <target state="translated">テストホスト内のコンポーネント</target>
        </trans-unit>
        <trans-unit id="2e9c97c88785c4b9db147f15b457d6114a875403" translate="yes" xml:space="preserve">
          <source>Component interaction</source>
          <target state="translated">コンポーネントの相互作用</target>
        </trans-unit>
        <trans-unit id="c5b6cd1c5c2fe07aede776527928b5d7682adba2" translate="yes" xml:space="preserve">
          <source>Component lifecycle hooks overview</source>
          <target state="translated">コンポーネントライフサイクルフックの概要</target>
        </trans-unit>
        <trans-unit id="d04d57678cf109bf45daef3aa34052f94933e2d0" translate="yes" xml:space="preserve">
          <source>Component marble tests</source>
          <target state="translated">コンポーネントマーブルテスト</target>
        </trans-unit>
        <trans-unit id="9e6c549ff22b030abd1a117d74976137e2550458" translate="yes" xml:space="preserve">
          <source>Component metadata</source>
          <target state="translated">コンポーネントのメタデータ</target>
        </trans-unit>
        <trans-unit id="f2ceb3a65afe0033a9f8057bc4dee1462c979e51" translate="yes" xml:space="preserve">
          <source>Component or directive instance for which the host element should be retrieved.</source>
          <target state="translated">ホスト要素を取得するためのコンポーネントまたはディレクティブのインスタンス。</target>
        </trans-unit>
        <trans-unit id="ad800316fe97dc21af2417441adf06059ed33e1e" translate="yes" xml:space="preserve">
          <source>Component outputs are dispatched as HTML &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent&quot;&gt;Custom Events&lt;/a&gt;, with the name of the custom event matching the output name. For example, for a component with &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;() valueChanged = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt;, the corresponding custom element will dispatch events with the name &quot;valueChanged&quot;, and the emitted data will be stored on the event&amp;rsquo;s &lt;code&gt;detail&lt;/code&gt; property. If you provide an alias, that value is used; for example, &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;('myClick') clicks = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&amp;lt;string&amp;gt;();&lt;/code&gt; results in dispatch events with the name &quot;myClick&quot;.</source>
          <target state="translated">コンポーネントの出力は、カスタムイベントの名前が出力名と一致するHTML &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent&quot;&gt;カスタムイベント&lt;/a&gt;としてディスパッチされます。たとえば、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;() valueChanged = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt; コンポーネントの場合、対応するカスタム要素は「valueChanged」という名前のイベントをディスパッチし、発行されたデータはイベントの &lt;code&gt;detail&lt;/code&gt; プロパティに格納されます。エイリアスを指定すると、その値が使用されます。たとえば、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;('myClick') clicks = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&amp;lt;string&amp;gt;();&lt;/code&gt; 「myClick」という名前のディスパッチイベントが発生します。</target>
        </trans-unit>
        <trans-unit id="a9ea9312f0e536e509ee307db80d647c47b6a4a7" translate="yes" xml:space="preserve">
          <source>Component selectors</source>
          <target state="translated">コンポーネントセレクタ</target>
        </trans-unit>
        <trans-unit id="91f2d783c93cb5bf2c82d1cdc8c98a40b448e571" translate="yes" xml:space="preserve">
          <source>Component styles</source>
          <target state="translated">コンポーネントスタイル</target>
        </trans-unit>
        <trans-unit id="8863b469cad5dc791fae35412b4254fed7745b28" translate="yes" xml:space="preserve">
          <source>Component styles have a few special &lt;em&gt;selectors&lt;/em&gt; from the world of shadow DOM style scoping (described in the &lt;a href=&quot;https://www.w3.org/TR/css-scoping-1&quot;&gt;CSS Scoping Module Level 1&lt;/a&gt; page on the &lt;a href=&quot;https://www.w3.org&quot;&gt;W3C&lt;/a&gt; site). The following sections describe these selectors.</source>
          <target state="translated">コンポーネントスタイルには、シャドウDOMスタイルスコーピングの世界からのいくつかの特別な&lt;em&gt;セレクター&lt;/em&gt;があります（&lt;a href=&quot;https://www.w3.org&quot;&gt;W3C&lt;/a&gt;サイトの&lt;a href=&quot;https://www.w3.org/TR/css-scoping-1&quot;&gt;CSS&lt;/a&gt;スコーピングモジュールレベル1ページで説明）。次のセクションでは、これらのセレクターについて説明します。</target>
        </trans-unit>
        <trans-unit id="c446f8314ac20002e5ecf53891c030438828a2ec" translate="yes" xml:space="preserve">
          <source>Component styles normally apply only to the HTML in the component's own template.</source>
          <target state="translated">コンポーネントスタイルは通常、コンポーネント自身のテンプレート内のHTMLにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="ea2ecee4a949dbf40e4abdfb3f361cc06d154b19" translate="yes" xml:space="preserve">
          <source>Component templates are not always fixed. An application may need to load new components at runtime.</source>
          <target state="translated">コンポーネントテンプレートは常に固定されているわけではありません。アプリケーションは、実行時に新しいコンポーネントをロードする必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="fadc85e8437b1cdd7af92ff5b173596395910c6e" translate="yes" xml:space="preserve">
          <source>Component templates often have nested components, whose templates may contain more components.</source>
          <target state="translated">コンポーネントテンプレートは入れ子になっていることが多く、そのテンプレートにはさらに多くのコンポーネントが含まれていることがあります。</target>
        </trans-unit>
        <trans-unit id="17195bfa784b960b7ee998ef0d8e6030f0340729" translate="yes" xml:space="preserve">
          <source>Component testing scenarios</source>
          <target state="translated">コンポーネントテストのシナリオ</target>
        </trans-unit>
        <trans-unit id="29183b8a21065292055062d7462b9e1d1b4abafb" translate="yes" xml:space="preserve">
          <source>Component to &lt;a href=&quot;../changedetectorref#markForCheck&quot;&gt;mark for check&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../changedetectorref#markForCheck&quot;&gt;チェック用&lt;/a&gt;にマークするコンポーネント。</target>
        </trans-unit>
        <trans-unit id="43652ff79cfd8f9d0118ca00f815b83151f09899" translate="yes" xml:space="preserve">
          <source>Component with a dependency</source>
          <target state="translated">依存関係を持つコンポーネント</target>
        </trans-unit>
        <trans-unit id="9b8bf28b2e5f05d7a69da7a49da675689404155c" translate="yes" xml:space="preserve">
          <source>Component with async service</source>
          <target state="translated">非同期サービスを持つコンポーネント</target>
        </trans-unit>
        <trans-unit id="41ed493fa280ebc7f4b7605ea8c601d5796f60cb" translate="yes" xml:space="preserve">
          <source>Component with external files</source>
          <target state="translated">外部ファイルを持つコンポーネント</target>
        </trans-unit>
        <trans-unit id="a68b8dbf2387ec137e9b2d3fc6b9da1e905d6b34" translate="yes" xml:space="preserve">
          <source>Component with inputs and outputs</source>
          <target state="translated">入力と出力を持つコンポーネント</target>
        </trans-unit>
        <trans-unit id="e1236f7608681ed2a1269df0535b9888ff0c1324" translate="yes" xml:space="preserve">
          <source>Component-less route: grouping routes without a component</source>
          <target state="translated">コンポーネントレスルート:コンポーネントのないルートをグループ化する</target>
        </trans-unit>
        <trans-unit id="685f6e115c5169adc25a44d77aed6eb00bc124cb" translate="yes" xml:space="preserve">
          <source>ComponentFactory</source>
          <target state="translated">ComponentFactory</target>
        </trans-unit>
        <trans-unit id="86525493504d87a98402483f8c3054424e31bb06" translate="yes" xml:space="preserve">
          <source>ComponentFactoryResolver</source>
          <target state="translated">ComponentFactoryResolver</target>
        </trans-unit>
        <trans-unit id="5a101fd475d77eb764e9fed972a6bbd46bc80495" translate="yes" xml:space="preserve">
          <source>ComponentFixture</source>
          <target state="translated">ComponentFixture</target>
        </trans-unit>
        <trans-unit id="12e293c8cf590c8746d84456b1dc0aa586f017de" translate="yes" xml:space="preserve">
          <source>ComponentFixtureAutoDetect</source>
          <target state="translated">ComponentFixtureAutoDetect</target>
        </trans-unit>
        <trans-unit id="e14a2773bbf3d8a6ab2a1d8aa1ed7bae8a0f0c06" translate="yes" xml:space="preserve">
          <source>ComponentFixtureNoNgZone</source>
          <target state="translated">ComponentFixtureNoNgZone</target>
        </trans-unit>
        <trans-unit id="06e98cec7c3eaf575c1d34319d462717d0387fe3" translate="yes" xml:space="preserve">
          <source>ComponentRef</source>
          <target state="translated">ComponentRef</target>
        </trans-unit>
        <trans-unit id="ad6c4b6618cfc741ae22fbd010f4d93752f06491" translate="yes" xml:space="preserve">
          <source>Componentless Routes</source>
          <target state="translated">コンポーネントレスルート</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="04871d72df14f67889a30f54a88254070cdbf35d" translate="yes" xml:space="preserve">
          <source>Components and the DOM</source>
          <target state="translated">コンポーネントとDOM</target>
        </trans-unit>
        <trans-unit id="3ec4533ed719f39b381cbdfc417b27788619074f" translate="yes" xml:space="preserve">
          <source>Components are directives, and the &lt;code&gt;providers&lt;/code&gt; option is inherited from &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;. You can also configure providers for directives and pipes at the same level as the component.</source>
          <target state="translated">コンポーネントはディレクティブであり、 &lt;code&gt;providers&lt;/code&gt; オプションがから継承さ &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 。ディレクティブとパイプのプロバイダーをコンポーネントと同じレベルで構成することもできます。</target>
        </trans-unit>
        <trans-unit id="7b6ccc6716d5ea20911cd8f2b468603ff8cc07e3" translate="yes" xml:space="preserve">
          <source>Components are normally marked as dirty (in need of rerendering) when inputs have changed or events have fired in the view. Call this method to ensure that a component is checked even if these triggers have not occured.</source>
          <target state="translated">通常、入力が変更されたり、ビュー内でイベントが発生したりすると、コンポーネントはダーティ(再レンダリングが必要)としてマークされます。このメソッドを呼び出して、これらのトリガーが発生していなくてもコンポーネントがチェックされるようにします。</target>
        </trans-unit>
        <trans-unit id="758ca75658783ea368ef9f3d5f2f45b30f82ce73" translate="yes" xml:space="preserve">
          <source>Components are the main building block for Angular applications. Each component consists of:</source>
          <target state="translated">コンポーネントはAngularアプリケーションの主な構成要素です。各コンポーネントは以下のように構成されています。</target>
        </trans-unit>
        <trans-unit id="111fdb54ac7de4a5014fda70ad4653ce5adce0c1" translate="yes" xml:space="preserve">
          <source>Components are the most basic UI building block of an Angular app. An Angular app contains a tree of Angular components.</source>
          <target state="translated">コンポーネントはAngularアプリの最も基本的なUIの構成要素です。AngularアプリにはAngularコンポーネントのツリーが含まれています。</target>
        </trans-unit>
        <trans-unit id="82e8f3bc2333c7cc18c50daf6aa116204f2ef464" translate="yes" xml:space="preserve">
          <source>Components are used in your templates, as in the following example:</source>
          <target state="translated">コンポーネントは、以下の例のようにテンプレート内で使用されます。</target>
        </trans-unit>
        <trans-unit id="69dc5e05a59cdc6a7dabbb6d83c2adc09bba15dc" translate="yes" xml:space="preserve">
          <source>Components as elements</source>
          <target state="translated">要素としてのコンポーネント</target>
        </trans-unit>
        <trans-unit id="a6e394315dc7817973d18be1e075c8e2dd6217e7" translate="yes" xml:space="preserve">
          <source>Components define &lt;em&gt;views&lt;/em&gt;, which are sets of screen elements that Angular can choose among and modify according to your program logic and data.</source>
          <target state="translated">コンポーネントは&lt;em&gt;ビューを&lt;/em&gt;定義します。&lt;em&gt;ビューは&lt;/em&gt;、Angularがプログラムロジックとデータに応じて選択および変更できる画面要素のセットです。</target>
        </trans-unit>
        <trans-unit id="584e4a632efc57983135945abb97b1a89e6f3c71" translate="yes" xml:space="preserve">
          <source>Components in external modules continue to receive the instance provided by their injectors.</source>
          <target state="translated">外部モジュールのコンポーネントは、インジェクタによって提供されたインスタンスを受け取り続けます。</target>
        </trans-unit>
        <trans-unit id="7084833ae18593d05fba020fc794dab748ba3ed2" translate="yes" xml:space="preserve">
          <source>Components in route definitions are also &lt;em&gt;entry components&lt;/em&gt;. A route definition refers to a component by its &lt;em&gt;type&lt;/em&gt;. The router ignores a routed component's selector, if it even has one, and loads the component dynamically into a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルート定義のコンポーネントも&lt;em&gt;エントリコンポーネント&lt;/em&gt;です。ルート定義は、&lt;em&gt;タイプ&lt;/em&gt;によってコンポーネントを参照します。ルーターは、ルーティングされたコンポーネントのセレクターがあればそれを無視し、コンポーネントを動的に &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; にロードします。</target>
        </trans-unit>
        <trans-unit id="43f2f799d4b9ac0bf7ee88c6bd79441decb0f884" translate="yes" xml:space="preserve">
          <source>Components often have service dependencies.</source>
          <target state="translated">コンポーネントにはサービス依存性があることが多いです。</target>
        </trans-unit>
        <trans-unit id="9cd4f8b0ba0728b87ad402a9c2782f583d5ae1fd" translate="yes" xml:space="preserve">
          <source>Components should expose their interactions through inputs for providing context, and outputs for communicating events to other components.</source>
          <target state="translated">コンポーネントは、コンテキストを提供するための入力と、イベントを他のコンポーネントに伝達するための出力を通じて、相互作用を公開する必要があります。</target>
        </trans-unit>
        <trans-unit id="408fdb18600b6c51987875e2857d0bd7de437dc5" translate="yes" xml:space="preserve">
          <source>Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data. They should focus on presenting data and delegate data access to a service.</source>
          <target state="translated">コンポーネントはデータを直接取得したり保存したりしてはいけませんし、故意に偽のデータを提示してはいけません。彼らはデータを提示することに集中し、データアクセスをサービスに委ねるべきです。</target>
        </trans-unit>
        <trans-unit id="0fd8d99abc38e74108276aa2bf4da03f77f0284d" translate="yes" xml:space="preserve">
          <source>Components that are only loaded dynamically by the router or by bootstrapping. Such &lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;entry components&lt;/a&gt; can never be selected in another component's template. While there's no harm in exporting them, there's also no benefit.</source>
          <target state="translated">ルーターまたはブートストラップによって動的にのみ読み込まれるコンポーネント。このような&lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;エントリコンポーネント&lt;/a&gt;は、別のコンポーネントのテンプレートでは選択できません。それらをエクスポートしても害はありませんが、メリットもありません。</target>
        </trans-unit>
        <trans-unit id="537c22bb75822c4c36bedeb23ff56c63634900e8" translate="yes" xml:space="preserve">
          <source>Components use &lt;em&gt;services&lt;/em&gt;, which provide specific functionality not directly related to views. Service providers can be &lt;em&gt;injected&lt;/em&gt; into components as &lt;em&gt;dependencies&lt;/em&gt;, making your code modular, reusable, and efficient.</source>
          <target state="translated">コンポーネントは、ビューに直接関連しない特定の機能を提供する&lt;em&gt;サービスを&lt;/em&gt;使用します。サービスプロバイダーは、&lt;em&gt;依存関係&lt;/em&gt;としてコンポーネントに&lt;em&gt;注入&lt;/em&gt;でき、コードをモジュール化し、再利用可能で効率的なものにします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a95007464d33e889aaba72bdf85c74650118684" translate="yes" xml:space="preserve">
          <source>Components with &lt;code&gt;RouterLink&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RouterLink&lt;/code&gt; を備えたコンポーネント</target>
        </trans-unit>
        <trans-unit id="ccedd94d6bed4d22293639bbe5172d0520a683ac" translate="yes" xml:space="preserve">
          <source>Components&amp;mdash;directives with a template.</source>
          <target state="translated">コンポーネント-テンプレート付きのディレクティブ。</target>
        </trans-unit>
        <trans-unit id="613ad0917443866a4cb165203f1ee52098da7920" translate="yes" xml:space="preserve">
          <source>Components, directives, and pipes must belong to &lt;em&gt;exactly&lt;/em&gt; one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</source>
          <target state="translated">コンポーネント、ディレクティブ、およびパイプは、&lt;em&gt;正確に&lt;/em&gt; 1つのモジュールに属している必要があります。複数のモジュールで同じクラスを宣言しようとすると、コンパイラーはエラーを出します。別のモジュールから直接または間接的にインポートされたクラスを再宣言しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="f83376d3c02857e22ac16459650a1b33f829c804" translate="yes" xml:space="preserve">
          <source>Compose dynamic form contents</source>
          <target state="translated">動的フォームの内容を構成する</target>
        </trans-unit>
        <trans-unit id="25329c5d2d61ce4bad0d187f0818cef72fdd3c7a" translate="yes" xml:space="preserve">
          <source>Compose form groups</source>
          <target state="translated">フォームグループを構成する</target>
        </trans-unit>
        <trans-unit id="7e4bfab1753d945b45d24b8a8f9b694887544a20" translate="yes" xml:space="preserve">
          <source>Compose multiple async validators into a single function that returns the union of the individual error objects for the provided control.</source>
          <target state="translated">複数の非同期バリデータを1つの関数にまとめて、提供されたコントロールの個々のエラーオブジェクトの和を返すようにします。</target>
        </trans-unit>
        <trans-unit id="713796f29d99bd25c93da871cdbfc3841e1f3dd4" translate="yes" xml:space="preserve">
          <source>Compose multiple validators into a single function that returns the union of the individual error maps for the provided control.</source>
          <target state="translated">複数のバリデータを1つの関数にまとめて、提供されたコントロールの個々のエラーマップの和を返すようにします。</target>
        </trans-unit>
        <trans-unit id="d9a25d5f8a23e5ca75242aa5e2740c8f9f249d5f" translate="yes" xml:space="preserve">
          <source>Composing multiple streams</source>
          <target state="translated">複数のストリームを構成する</target>
        </trans-unit>
        <trans-unit id="5e38c43e1c50a47d2c669e4e9d9a1e63776dd98d" translate="yes" xml:space="preserve">
          <source>Comprehensive demonstration of Angular's template syntax. For more information, see &lt;a href=&quot;template-syntax&quot;&gt;Template reference variables&lt;/a&gt;.</source>
          <target state="translated">Angularのテンプレート構文の包括的なデモンストレーション。詳細については、&lt;a href=&quot;template-syntax&quot;&gt;テンプレート参照変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4099139a76dd41e01b827890573d000064768d5d" translate="yes" xml:space="preserve">
          <source>Compute a difference between the previous state and the new &lt;code&gt;object&lt;/code&gt; state.</source>
          <target state="translated">以前の状態と新しい &lt;code&gt;object&lt;/code&gt; 状態の違いを計算します。</target>
        </trans-unit>
        <trans-unit id="9131da43681025794422d5020969e00fe64736c6" translate="yes" xml:space="preserve">
          <source>Computer notation for exponential value (n times a power of 10). Example: 1.2E3</source>
          <target state="translated">指数値(10の1乗のn倍)のコンピュータ表記法。例:1.2E3</target>
        </trans-unit>
        <trans-unit id="5d1028a96cb860efd0927aa08b2ec23c11b5bc22" translate="yes" xml:space="preserve">
          <source>Concatenate modules with Rollup before bundling them with Webpack.</source>
          <target state="translated">モジュールをWebpackでバンドルする前に、Rollupでモジュールを連結します。</target>
        </trans-unit>
        <trans-unit id="2fd720ee45c492d6d7ed703e270ad918fb8c585e" translate="yes" xml:space="preserve">
          <source>Conceptually, you can imagine the Angular service worker as a forward cache or a CDN edge that is installed in the end user's web browser. The service worker's job is to satisfy requests made by the Angular app for resources or data from a local cache, without needing to wait for the network. Like any cache, it has rules for how content is expired and updated.</source>
          <target state="translated">概念的には、AngularのサービスワーカーはフォワードキャッシュやエンドユーザーのウェブブラウザにインストールされるCDNエッジのようなものだと想像できます。サービスワーカーの仕事は、ネットワークを待たずにローカルキャッシュからリソースやデータを求めるAngularアプリのリクエストを満たすことです。他のキャッシュと同様に、コンテンツの期限切れや更新のルールがあります。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="e52b9120da6a8af8541ebd623c609817158aa62a" translate="yes" xml:space="preserve">
          <source>Concrete injectors implement this interface.</source>
          <target state="translated">コンクリートインジェクタは、このインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="bf3a8f65ab3fb42ac0382088a24de08d0f61d189" translate="yes" xml:space="preserve">
          <source>Concrete injectors implement this interface. Injectors are configured with &lt;a href=&quot;../guide/glossary#provider&quot;&gt;providers&lt;/a&gt; that associate dependencies of various types with &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;injection tokens&lt;/a&gt;.</source>
          <target state="translated">コンクリートインジェクターはこのインターフェースを実装します。インジェクターは、さまざまなタイプの依存関係を&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;インジェクショントークンに&lt;/a&gt;関連付ける&lt;a href=&quot;../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;で構成されます。</target>
        </trans-unit>
        <trans-unit id="a9f1b7e372d92a878669324d80007121df0e9993" translate="yes" xml:space="preserve">
          <source>Conditional display with NgIf</source>
          <target state="translated">NgIfによる条件付き表示</target>
        </trans-unit>
        <trans-unit id="86d8c4f438a64027d9c179cbd6cac7228180ae16" translate="yes" xml:space="preserve">
          <source>Conditional operator</source>
          <target state="translated">条件付き演算子</target>
        </trans-unit>
        <trans-unit id="9eb462985047418e569f749429a8e241082dca68" translate="yes" xml:space="preserve">
          <source>Conditionally swaps the contents of the div by selecting one of the embedded templates based on the current value of &lt;code&gt;conditionExpression&lt;/code&gt;.</source>
          <target state="translated">conditionExpressionの現在の値に基づいて埋め込みテンプレートの1つを選択することにより、divのコンテンツを条件付きで交換し &lt;code&gt;conditionExpression&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d12923d02188453229d798291560b0e402e0cdc2" translate="yes" xml:space="preserve">
          <source>Config object passed to initialize the platform.</source>
          <target state="translated">プラットフォームを初期化するために渡されるコンフィグオブジェクト。</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="8d1100f1c9c4d1eb55d7214837d3fb9654ee74a6" translate="yes" xml:space="preserve">
          <source>Configuration defaults for Architect builder targets for this project.</source>
          <target state="translated">このプロジェクトのアーキテクトビルダーターゲットの設定のデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="0724d66ac5fde4442631a00bd09131b2dd58588a" translate="yes" xml:space="preserve">
          <source>Configuration file used by &lt;a href=&quot;https://github.com/ng-packagr/ng-packagr&quot;&gt;ng-packagr&lt;/a&gt; for building your library.</source>
          <target state="translated">ライブラリを構築するために&lt;a href=&quot;https://github.com/ng-packagr/ng-packagr&quot;&gt;ng-packagr&lt;/a&gt;によって使用される設定ファイル。</target>
        </trans-unit>
        <trans-unit id="5e9e2d64c5e127c299b896e015cd2b7bb4f8b5d4" translate="yes" xml:space="preserve">
          <source>Configuration files</source>
          <target state="translated">設定ファイル</target>
        </trans-unit>
        <trans-unit id="b0dd88079f541af57e4adfcddaae6fb163e6da93" translate="yes" xml:space="preserve">
          <source>Configuration for SystemJsNgModuleLoader. token.</source>
          <target state="translated">SystemJsNgModuleLoaderの設定。</target>
        </trans-unit>
        <trans-unit id="02f59039a9582f5ef9337d8fd89fec8a897a3f8c" translate="yes" xml:space="preserve">
          <source>Configuration for code editors. See &lt;a href=&quot;https://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;.</source>
          <target state="translated">コードエディターの構成。&lt;a href=&quot;https://editorconfig.org/&quot;&gt;EditorConfigを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c15ee8a67a30e7e9a9e71785f7b672937eec9ce" translate="yes" xml:space="preserve">
          <source>Configuration inheritance with extends</source>
          <target state="translated">extendsによるコンフィギュレーションの継承</target>
        </trans-unit>
        <trans-unit id="6b0ea8f50fd69e0d1f261fb22638d876ef51713d" translate="yes" xml:space="preserve">
          <source>Configuration options determine how the control propagates changes and emits events after updates and validity checks are applied.</source>
          <target state="translated">設定オプションは、更新と有効性チェックが適用された後に、コントロールがどのように変更を伝播し、イベントを放出するかを決定します。</target>
        </trans-unit>
        <trans-unit id="904ea1c4be060c0b5f8bd86dec83859df182f291" translate="yes" xml:space="preserve">
          <source>Configuration options for LocationUpgrade.</source>
          <target state="translated">LocationUpgrade の設定オプション。</target>
        </trans-unit>
        <trans-unit id="080e38262b19342c92f70dcb4f588e0426189269" translate="yes" xml:space="preserve">
          <source>Configuration options object for the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. The object can have two shapes:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の構成オプションオブジェクト。オブジェクトには次の2つの形状があります。</target>
        </trans-unit>
        <trans-unit id="04c43124a5e5f33bef1c53433d118dd7a497ccab" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control emits events after marking is applied.</source>
          <target state="translated">マーキングが適用された後にコントロールがどのようにイベントを放出するかを決定する設定オプションです。</target>
        </trans-unit>
        <trans-unit id="fbc1e7137af00b8101306741dc390346f387c194" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after marking is applied.</source>
          <target state="translated">マーキングが適用された後にコントロールがどのように変更を伝播し、イベントを放出するかを決定する設定オプションです。</target>
        </trans-unit>
        <trans-unit id="60371f334a83c028ab5ba1cd688d36dd7b388f85" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the control is disabled.</source>
          <target state="translated">コントロールが無効化された後に、コントロールがどのように変更を伝播し、イベントを放出するかを決定する設定オプションです。</target>
        </trans-unit>
        <trans-unit id="d54bb3a87a91320a8a66b7f3a8ab342702b3a630" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the marking is applied.</source>
          <target state="translated">マーキングが適用された後にコントロールがどのように変更を伝播し、イベントを放出するかを決定する設定オプションです。</target>
        </trans-unit>
        <trans-unit id="e5e068b29775ffa65327c0c8208d34c6077b4704" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the value changes.</source>
          <target state="translated">値が変化した後にコントロールがどのように変化を伝播し、イベントを放出するかを決定する設定オプションです。</target>
        </trans-unit>
        <trans-unit id="eef8c09918819b33239a64a7704d2dc27700f4ed" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the value changes. The configuration options are passed to the &lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt; method.</source>
          <target state="translated">コントロールが変更を伝播し、値が変更された後にイベントを発行する方法を決定する構成オプション。設定オプションは&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt;メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="d7da654574374e97b1b1d633c048bae7669cdbc6" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the value is patched.</source>
          <target state="translated">値がパッチされた後にコントロールがどのように変更を伝播し、イベントを放出するかを決定する設定オプションです。</target>
        </trans-unit>
        <trans-unit id="1c8c51fa4affb5692281be0093de6971007241a1" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events events after marking is applied.</source>
          <target state="translated">マーキングが適用された後にコントロールがどのように変更を伝播し、イベントイベントを放出するかを決定する設定オプションです。</target>
        </trans-unit>
        <trans-unit id="1e20f0372bd831c5bf266eaa0e2a5d55a55725a0" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events when the group is reset.</source>
          <target state="translated">グループがリセットされたときにコントロールがどのように変更を伝播し、イベントを放出するかを決定する構成オプションです。</target>
        </trans-unit>
        <trans-unit id="e95346d92ef28a1f10e1fda94a68c78f7ddc899d" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events when the value changes. The configuration options are passed to the &lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt; method.</source>
          <target state="translated">コントロールが変更を伝播し、値が変更されたときにイベントを発行する方法を決定する構成オプション。設定オプションは&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt;メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="f225227a9ede3a3a8dd6e1abda67f983abb549ed" translate="yes" xml:space="preserve">
          <source>Configure CLI for CI testing in Chrome</source>
          <target state="translated">ChromeでCIテスト用のCLIを設定する</target>
        </trans-unit>
        <trans-unit id="c7b29bddffe31db8562618db2dcd2e4e60815f01" translate="yes" xml:space="preserve">
          <source>Configure IIS rewrite rules</source>
          <target state="translated">IIS の書き換えルールを設定する</target>
        </trans-unit>
        <trans-unit id="89b41b15bfe9509457f2290a57e31d089c487f02" translate="yes" xml:space="preserve">
          <source>Configure Visual Studio to use the global external web tools instead of the tools that ship with Visual Studio:</source>
          <target state="translated">Visual Studio に付属のツールではなく、グローバルな外部 Web ツールを使用するように Visual Studio を設定します。</target>
        </trans-unit>
        <trans-unit id="ddbfa3351a7da736d0f49a97dc1ad6c0732013f9" translate="yes" xml:space="preserve">
          <source>Configure XSRF protection.</source>
          <target state="translated">XSRF保護を設定します。</target>
        </trans-unit>
        <trans-unit id="ed8d54f9a98aa953033d3f194a4460811675a05f" translate="yes" xml:space="preserve">
          <source>Configure a custom route matcher for AngularJS routes</source>
          <target state="translated">AngularJSのルート用にカスタムルートマッチャーを設定する</target>
        </trans-unit>
        <trans-unit id="40dd712a3b2c0fb2198e61700e7b674122237218" translate="yes" xml:space="preserve">
          <source>Configure an injector with a service provider</source>
          <target state="translated">サービスプロバイダでインジェクタを設定する</target>
        </trans-unit>
        <trans-unit id="b13e3e83717f3b6e903c9549155c22d7088485f0" translate="yes" xml:space="preserve">
          <source>Configure environment-specific defaults</source>
          <target state="translated">環境固有のデフォルトを設定する</target>
        </trans-unit>
        <trans-unit id="4264ed71674e27966b2c0b46b2608327f0ad1b6c" translate="yes" xml:space="preserve">
          <source>Configure options that control how the control propagates changes and emits events when marked as untouched</source>
          <target state="translated">手を加えていないとマークされている場合に、コントロールがどのように変更を伝播し、イベントを放出するかを制御するオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="8cf7ca44f8f33409d312682ce9ad98ded1245676" translate="yes" xml:space="preserve">
          <source>Configure options that determine how the control propagates changes and emits events after the value changes</source>
          <target state="translated">値が変化した後にコントロールがどのように変化を伝播し、イベントを放出するかを決定するオプションを構成します。</target>
        </trans-unit>
        <trans-unit id="eb57e0371e2fc9618005ed283bc5a627e0d0503d" translate="yes" xml:space="preserve">
          <source>Configure project for Circle CI</source>
          <target state="translated">サークルCIのプロジェクト設定</target>
        </trans-unit>
        <trans-unit id="170e1de26a76b0b5d609277eac722fc254816590" translate="yes" xml:space="preserve">
          <source>Configure project for Travis CI</source>
          <target state="translated">Travis CIのためのプロジェクトの設定</target>
        </trans-unit>
        <trans-unit id="16a9aa72cb715e4fdbe55f12687848393d9768d2" translate="yes" xml:space="preserve">
          <source>Configure target-specific file replacements</source>
          <target state="translated">ターゲット固有のファイル置換を設定する</target>
        </trans-unit>
        <trans-unit id="8d35a8912f7e5dc75b8b11df8308bd48528c3ace" translate="yes" xml:space="preserve">
          <source>Configure the Angular Router to defer loading of all other modules (and their associated code), either by &lt;a href=&quot;router#preloading&quot;&gt;waiting until the app has launched&lt;/a&gt; or by &lt;a href=&quot;router#asynchronous-routing&quot;&gt;&lt;em&gt;lazy loading&lt;/em&gt;&lt;/a&gt; them on demand.</source>
          <target state="translated">&lt;a href=&quot;router#preloading&quot;&gt;アプリが起動するまで待機する&lt;/a&gt;か、必要に応じてそれらを&lt;a href=&quot;router#asynchronous-routing&quot;&gt;&lt;em&gt;遅延読み込み&lt;/em&gt;&lt;/a&gt;することにより、他のすべてのモジュール（および関連するコード）の読み込みを延期するようにAngularルーターを構成します。</target>
        </trans-unit>
        <trans-unit id="cdca2e4dfc020306ad3328f9ed1b1e7868495a01" translate="yes" xml:space="preserve">
          <source>Configure the Angular Router to defer loading of all other modules (and their associated code), either by &lt;a href=&quot;router-tutorial-toh#preloading&quot;&gt;waiting until the app has launched&lt;/a&gt; or by &lt;a href=&quot;router#lazy-loading&quot;&gt;&lt;em&gt;lazy loading&lt;/em&gt;&lt;/a&gt; them on demand.</source>
          <target state="translated">&lt;a href=&quot;router-tutorial-toh#preloading&quot;&gt;アプリが起動するまで待つ&lt;/a&gt;か、オンデマンドで&lt;a href=&quot;router#lazy-loading&quot;&gt;&lt;em&gt;遅延読み込み&lt;/em&gt;&lt;/a&gt;することにより、他のすべてのモジュール（および関連するコード）の読み込みを延期するようにAngularルーターを構成します。</target>
        </trans-unit>
        <trans-unit id="f4739487924b4fe1ff58f7b0d7e0253c2b3322c0" translate="yes" xml:space="preserve">
          <source>Configure the class so that you have an observable, &lt;code&gt;heroes$&lt;/code&gt;, a &lt;code&gt;selectedId&lt;/code&gt; to hold the &lt;code&gt;id&lt;/code&gt; number of the hero, and the heroes in the &lt;code&gt;ngOnInit()&lt;/code&gt;, add the following code to get the &lt;code&gt;id&lt;/code&gt; of the selected hero. This code snippet assumes that you have a heroes list, a hero service, a function to get your heroes, and the HTML to render your list and details, just as in the Tour of Heroes example.</source>
          <target state="translated">observable、 &lt;code&gt;heroes$&lt;/code&gt; 、ヒーローの &lt;code&gt;id&lt;/code&gt; 番号を保持する &lt;code&gt;selectedId&lt;/code&gt; 、および &lt;code&gt;ngOnInit()&lt;/code&gt; のヒーローが含まれるようにクラスを構成し、次のコードを追加して、選択したヒーローの &lt;code&gt;id&lt;/code&gt; を取得します。このコードスニペットは、Tour of Heroesの例のように、ヒーローリスト、ヒーローサービス、ヒーローを取得する関数、リストと詳細をレンダリングするHTMLがあることを前提としています。</target>
        </trans-unit>
        <trans-unit id="334da6f9fd9174a3baa490afae90e32f065348c1" translate="yes" xml:space="preserve">
          <source>Configure the component to use the cart service.</source>
          <target state="translated">カートサービスを使用するコンポーネントを構成します。</target>
        </trans-unit>
        <trans-unit id="df4c2e92d82a4ec3de973912a2abd2f9c68b616d" translate="yes" xml:space="preserve">
          <source>Configure the control to update on a blur event</source>
          <target state="translated">ブラーイベントで更新するコントロールを設定します。</target>
        </trans-unit>
        <trans-unit id="cea6116a1253fc1036b641181589e01fbb198bb9" translate="yes" xml:space="preserve">
          <source>Configure the control to update on a submit event</source>
          <target state="translated">送信イベントで更新するコントロールを構成する</target>
        </trans-unit>
        <trans-unit id="3f746a68905eaf70487c3a4b6c2f9fdf25b6f714" translate="yes" xml:space="preserve">
          <source>Configure the new schematic</source>
          <target state="translated">新しい回路図の設定</target>
        </trans-unit>
        <trans-unit id="51965dab4793a37225d1a1be0a49b829d5e23bf4" translate="yes" xml:space="preserve">
          <source>Configure the router module with &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; を使用してルーターモジュールを構成します。</target>
        </trans-unit>
        <trans-unit id="cd1a902d750f1c3a051ac9adef4d547529be7083" translate="yes" xml:space="preserve">
          <source>Configure the routes.</source>
          <target state="translated">ルートを設定します。</target>
        </trans-unit>
        <trans-unit id="ac47d13e9fb69ec283379427c60cda732da4a6e6" translate="yes" xml:space="preserve">
          <source>Configure the server to redirect requests for missing files to &lt;code&gt;index.html&lt;/code&gt;. Learn more about server-side redirects &lt;a href=&quot;deployment#fallback&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">欠落ファイルのリクエストを &lt;code&gt;index.html&lt;/code&gt; にリダイレクトするようにサーバーを構成します。&lt;a href=&quot;deployment#fallback&quot;&gt;以下の&lt;/a&gt;サーバー側リダイレクトの詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="e5b4e42ab75b8784da8b861251f32df14e4e0ed8" translate="yes" xml:space="preserve">
          <source>Configures &lt;a href=&quot;npm-packages&quot;&gt;npm package dependencies&lt;/a&gt; that are available to all projects in the workspace. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npm documentation&lt;/a&gt; for the specific format and contents of this file.</source>
          <target state="translated">ワークスペース内のすべてのプロジェクトで使用可能な&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージの依存関係&lt;/a&gt;を構成します。このファイルの特定の形式と内容については、&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npmのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="05d23157ddf003648e8e746d3559880a65b4dc54" translate="yes" xml:space="preserve">
          <source>Configures &lt;a href=&quot;npm-packages&quot;&gt;npm package dependencies&lt;/a&gt; that are required for this library.</source>
          <target state="translated">このライブラリに必要な&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージの依存関係&lt;/a&gt;を構成します。</target>
        </trans-unit>
        <trans-unit id="3cd14ca10fd76adaadc5939ae472d04f24c24d40" translate="yes" xml:space="preserve">
          <source>Configures &lt;code&gt;HttpClientTestingBackend&lt;/code&gt; as the &lt;code&gt;&lt;a href=&quot;../httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; used by &lt;code&gt;&lt;a href=&quot;../httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HttpClientTestingBackend&lt;/code&gt; 使用する &lt;code&gt;&lt;a href=&quot;../httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; としてHttpClientTestingBackendを構成し &lt;code&gt;&lt;a href=&quot;../httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aaf933ef56571a123747f65a5b55a64b98ada50f" translate="yes" xml:space="preserve">
          <source>Configures &lt;code&gt;HttpClientTestingBackend&lt;/code&gt; as the &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; used by &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HttpClientTestingBackend&lt;/code&gt; 使用する &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; としてHttpClientTestingBackendを構成し &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbb7e4485932cfd1de7a060e475b3815ae97dfc1" translate="yes" xml:space="preserve">
          <source>Configures XSRF protection support for outgoing requests.</source>
          <target state="translated">送信要求に対する XSRF 保護サポートを設定します。</target>
        </trans-unit>
        <trans-unit id="b8a1de12ced777c182047fc1700c6e22c8edc707" translate="yes" xml:space="preserve">
          <source>Configures a browser-based app to transition from a server-rendered app, if one is present on the page.</source>
          <target state="translated">ブラウザベースのアプリがページ上に存在する場合に、サーバーレンダリングされたアプリから移行するように設定します。</target>
        </trans-unit>
        <trans-unit id="a434ad619286dfe86adfce0465b9d38610c08bc2" translate="yes" xml:space="preserve">
          <source>Configures a preloading strategy. One of &lt;code&gt;&lt;a href=&quot;preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;nopreloading&quot;&gt;NoPreloading&lt;/a&gt;&lt;/code&gt; (the default).</source>
          <target state="translated">プリロード戦略を構成します。一つ &lt;code&gt;&lt;a href=&quot;preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;nopreloading&quot;&gt;NoPreloading&lt;/a&gt;&lt;/code&gt; （デフォルト）。</target>
        </trans-unit>
        <trans-unit id="a709e8acb46c26ccfe94d302e108117ba50bc817" translate="yes" xml:space="preserve">
          <source>Configures and initializes environment for unit testing and provides methods for creating components and services in unit tests.</source>
          <target state="translated">ユニットテスト用の環境を設定・初期化し、ユニットテストにおけるコンポーネントやサービスの作成方法を提供します。</target>
        </trans-unit>
        <trans-unit id="d974520f6e13caa7523a050c50112dac9842e81c" translate="yes" xml:space="preserve">
          <source>Configures if the scroll position needs to be restored when navigating back.</source>
          <target state="translated">戻るときにスクロール位置を復元する必要があるかどうかを設定します。</target>
        </trans-unit>
        <trans-unit id="355e28af987d6e19841341eeb2a4d70ee68fa8fa" translate="yes" xml:space="preserve">
          <source>Configures routes for the application. Supports static, parameterized, redirect, and wildcard routes. Also supports custom route data and resolve.</source>
          <target state="translated">アプリケーションのルートを構成します。スタティックルート、パラメータ化ルート、リダイレクトルート、ワイルドカードルートをサポートします。また、カスタムルートデータと解決もサポートしています。</target>
        </trans-unit>
        <trans-unit id="655c57a99af0d3109e31ed75d5bcd9d001455065" translate="yes" xml:space="preserve">
          <source>Configures sharing of target browsers and Node.js versions among various front-end tools. See &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist on GitHub&lt;/a&gt; for more information.</source>
          <target state="translated">さまざまなフロントエンドツール間でのターゲットブラウザーとNode.jsバージョンの共有を構成します。詳細については&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;、GitHubのBrowserslistを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad517b56561202c6f4359a9192de454ae8a95b9c" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for JSONP. Without this module, Jsonp requests reach the backend with method JSONP, where they are rejected.</source>
          <target state="translated">JSONPのサポートサービスを &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; して、HttpClientの&lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。このモジュールがない場合、JsonpリクエストはJSONPメソッドでバックエンドに到達し、そこで拒否されます。</target>
        </trans-unit>
        <trans-unit id="017bdec14b57ac5df6673be7e9fcc7965f792356" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for XSRF. Automatically imported by &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">XSRFのサポートサービスを &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; してHttpClientの&lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; によって自動的にインポートされます。</target>
        </trans-unit>
        <trans-unit id="71aa94662f29578035b51374daebcceb523a1a5c" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for JSONP. Without this module, Jsonp requests reach the backend with method JSONP, where they are rejected.</source>
          <target state="translated">JSONPのサポートサービスを &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; して、HttpClientの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。このモジュールがない場合、JsonpリクエストはJSONPメソッドでバックエンドに到達し、そこで拒否されます。</target>
        </trans-unit>
        <trans-unit id="abb8b7af799cf935e6d74a82f16cc3df381fd3fa" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for XSRF. Automatically imported by &lt;code&gt;&lt;a href=&quot;http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">XSRFのサポートサービスを &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; してHttpClientの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。 &lt;code&gt;&lt;a href=&quot;http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; によって自動的にインポートされます。</target>
        </trans-unit>
        <trans-unit id="790982c1da92d9a4a3757d5e97cbd5482faeab59" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;injector&lt;/a&gt; of this directive or component with a &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;token&lt;/a&gt; that maps to a &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; of a dependency.</source>
          <target state="translated">このディレクティブまたはコンポーネントの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;インジェクター&lt;/a&gt;を、依存関係の&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;にマップする&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;トークン&lt;/a&gt;で構成します。</target>
        </trans-unit>
        <trans-unit id="2a45f7929e71f4ba59f4a8ad3da1adfaa36da765" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;&lt;a href=&quot;core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="f02ed916f1e49de03daf252a306ed41a87a8e713" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useClass&lt;/code&gt; function. Base for &lt;code&gt;&lt;a href=&quot;core/classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;useClass&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;core/classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="1ce7ecc5dfc85eab95440233c0752ee92190a8d5" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useFactory&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;useFactory&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="f92fc25f9eceebfbb5082c1b90a7de5b094fe6c6" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="5e479568b218802812c025359083e541bc6ccb05" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token. Base for &lt;code&gt;&lt;a href=&quot;core/valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;core/valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="6353fce328281bccc557008062dcf3fbfb3cedd6" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;&lt;a href=&quot;core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="translated">別の &lt;code&gt;&lt;a href=&quot;core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; トークンの値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="de34144b35e17ed2659e7734a48e96864873748b" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;useExisting&lt;/code&gt; token.</source>
          <target state="translated">別の &lt;code&gt;useExisting&lt;/code&gt; トークンの値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="6912db51cd3dbd31d8209b6df1e76d3826ee6b25" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; when `Type' is used as the token.</source>
          <target state="translated">「Type」がトークンとして使用されている場合に、 &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="7e48ca749f7103d266a954f62377d9c41ee37b78" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="215555381dc174a710d55310df8470a1903bc17e" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token. Base for &lt;code&gt;&lt;a href=&quot;core/staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;core/staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="2774323b86ff54bc138cf89007f4a111fe978949" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of a token.</source>
          <target state="translated">トークンのインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="46876796cbd43a683b28fd882c707ae7ed9c73fd" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="b3555b19661005ca96609d18ab3d5155c9a989f4" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useClass&lt;/code&gt; function. Base for &lt;code&gt;&lt;a href=&quot;classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;useClass&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="47f2c276625f2c7d3914c20abaddb825ded6c621" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useFactory&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;useFactory&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="1aa4d8f65f33963b2c13a185cc39738c1582c90e" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="2ad425856dc4fab4c772b6dfd94e9573673341fe" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token. Base for &lt;code&gt;&lt;a href=&quot;valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="d00f9d960028889f815c04e01ccebf365295c64b" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="translated">別の &lt;code&gt;&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; トークンの値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="5ab618c4a133e629211a682df05da3172c15f406" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;useExisting&lt;/code&gt; token.</source>
          <target state="translated">別の &lt;code&gt;useExisting&lt;/code&gt; トークンの値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="70ce9b3787c81b461a2ff3c1e6eccab1e8a5db21" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; when `Type' is used as the token.</source>
          <target state="translated">「Type」がトークンとして使用されている場合に、 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="c785c093ab8db357541ce09421b2905d251c6f62" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="0534fa68714679e5acd551385a86e37f431e6ad6" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token. Base for &lt;code&gt;&lt;a href=&quot;staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="a1cdae9c54d30865f0bd4567e4ad345bca4298f1" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of a token.</source>
          <target state="translated">トークンのインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="b4ceed2ced13e45139fbd79ba14b4345f5f02552" translate="yes" xml:space="preserve">
          <source>Configures the URL codec for encoding and decoding URLs. Default is the &lt;code&gt;AngularJSCodec&lt;/code&gt;</source>
          <target state="translated">URLをエンコードおよびデコードするためのURLコーデックを構成します。デフォルトは &lt;code&gt;AngularJSCodec&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="96d4362ba6a5c2b25cf80a318749279e2913f30c" translate="yes" xml:space="preserve">
          <source>Configures the base href when used in client-side rendered applications</source>
          <target state="translated">クライアントサイドのレンダリングアプリケーションで使用する際のベースとなる href を設定します。</target>
        </trans-unit>
        <trans-unit id="e33672527f455ecfddcd35c1002dc3b16a4c07a8" translate="yes" xml:space="preserve">
          <source>Configures the base href when used in server-side rendered applications</source>
          <target state="translated">サーバーサイドのレンダリングアプリケーションで使用する際のベースとなる href を設定します。</target>
        </trans-unit>
        <trans-unit id="fda59054676b60075d480d6480c097e0ec506192" translate="yes" xml:space="preserve">
          <source>Configures the gathering of Angular CLI usage metrics. See &lt;a href=&quot;https://angular.io/cli/usage-analytics-gathering&quot;&gt;https://angular.io/cli/usage-analytics-gathering&lt;/a&gt;.</source>
          <target state="translated">AngularCLI使用状況メトリックの収集を構成します。&lt;a href=&quot;https://angular.io/cli/usage-analytics-gathering&quot;&gt;https://angular.io/cli/usage-analytics-gatheringを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6ef7ef749cff709e887e2c2aa691baf2be4fa36e" translate="yes" xml:space="preserve">
          <source>Configures the gathering of Angular CLI usage metrics. See &lt;a href=&quot;https://v8.angular.io/cli/usage-analytics-gathering&quot;&gt;https://v8.angular.io/cli/usage-analytics-gathering&lt;/a&gt;.</source>
          <target state="translated">Angular CLI使用状況メトリックの収集を構成します。&lt;a href=&quot;https://v8.angular.io/cli/usage-analytics-gathering&quot;&gt;https://v8.angular.io/cli/usage-analytics-gatheringを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b44dba6deb045365ba90eda211459a90a314cfa1" translate="yes" xml:space="preserve">
          <source>Configures the generation of the application's HTML index.</source>
          <target state="translated">アプリケーションのHTMLインデックスの生成を設定します。</target>
        </trans-unit>
        <trans-unit id="606e40d38c3c6176492de2e8767b8f16cc82d975" translate="yes" xml:space="preserve">
          <source>Configures the hash prefix used in the URL when using the &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; を使用するときにURLで使用されるハッシュプレフィックスを構成します</target>
        </trans-unit>
        <trans-unit id="354ac0d80d0935b4f0ed926e11149cc7187b891c" translate="yes" xml:space="preserve">
          <source>Configures the queries that will be injected into the directive.</source>
          <target state="translated">ディレクティブに注入されるクエリを設定します。</target>
        </trans-unit>
        <trans-unit id="a0b85c7e4fa593ef2684a74687e147f20c772314" translate="yes" xml:space="preserve">
          <source>Configures the root injector for an app with providers of &lt;code&gt;@angular/core&lt;/code&gt; dependencies that &lt;code&gt;&lt;a href=&quot;applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; needs to bootstrap components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; がコンポーネントをブートストラップするために必要な &lt;code&gt;@angular/core&lt;/code&gt; 依存関係のプロバイダーを持つアプリのルートインジェクターを構成します。</target>
        </trans-unit>
        <trans-unit id="64bb1a91c1b98343a1a9158d20a1b1a8de04d5f3" translate="yes" xml:space="preserve">
          <source>Configures the root injector for an app with providers of &lt;code&gt;@angular/core&lt;/code&gt; dependencies that &lt;code&gt;&lt;a href=&quot;core/applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; needs to bootstrap components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; がコンポーネントをブートストラップするために必要な &lt;code&gt;@angular/core&lt;/code&gt; 依存関係のプロバイダーを持つアプリのルートインジェクターを構成します。</target>
        </trans-unit>
        <trans-unit id="c3ea32179e836ed9d697fdab772550567562d715" translate="yes" xml:space="preserve">
          <source>Configures the scroll offset the router will use when scrolling to an element.</source>
          <target state="translated">ルータが要素にスクロールするときに使用するスクロールオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="2bfb6c394274e9e69dc237b1ee54d632c4b77f09" translate="yes" xml:space="preserve">
          <source>Configures the top offset used when scrolling to an anchor.</source>
          <target state="translated">アンカーへのスクロール時に使用するトップオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="9cbb80073f5a7c31464f131d4117751088863bdb" translate="yes" xml:space="preserve">
          <source>Configures whether the location upgrade module should use the &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;&lt;a href=&quot;../pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">場所のアップグレードモジュールを使用する必要があるかどうかを設定します &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; か &lt;code&gt;&lt;a href=&quot;../pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="34cf62f1d722f740771257374ed2d01010363851" translate="yes" xml:space="preserve">
          <source>Configures your project to use web workers, if it isn't already.</source>
          <target state="translated">ウェブワーカーを使用するようにプロジェクトを設定します。</target>
        </trans-unit>
        <trans-unit id="f3fc56ebc0f714bdfd0dff1e82922f959b5ef867" translate="yes" xml:space="preserve">
          <source>Configuring AOT compilation</source>
          <target state="translated">AOTコンパイルの設定</target>
        </trans-unit>
        <trans-unit id="dca5d7436fb543c24f85516f553280684c834989" translate="yes" xml:space="preserve">
          <source>Configuring CLI schematics</source>
          <target state="translated">CLIの回路図の設定</target>
        </trans-unit>
        <trans-unit id="8cedc50bc8d4e7a91d30a7c35d5264cbffc6b2fa" translate="yes" xml:space="preserve">
          <source>Configuring CommonJS dependencies</source>
          <target state="translated">CommonJSの依存関係を設定する</target>
        </trans-unit>
        <trans-unit id="a4104f4df004b2efa73f7cbee11a07fb4dbb296f" translate="yes" xml:space="preserve">
          <source>Configuring HTTP URL parameters</source>
          <target state="translated">HTTP URL パラメータの設定</target>
        </trans-unit>
        <trans-unit id="fad07be672efeb55ca3cb3f37c69044afcf5f7b7" translate="yes" xml:space="preserve">
          <source>Configuring application environments</source>
          <target state="translated">アプリケーション環境の設定</target>
        </trans-unit>
        <trans-unit id="ec21d8d7cb50228b36397333d5669d30dd474349" translate="yes" xml:space="preserve">
          <source>Configuring browser compatibility</source>
          <target state="translated">ブラウザの互換性を設定する</target>
        </trans-unit>
        <trans-unit id="1bc5290c9bfe3ed7f891c80e59aa43584653ac02" translate="yes" xml:space="preserve">
          <source>Configuring builder targets</source>
          <target state="translated">ビルダーターゲットの設定</target>
        </trans-unit>
        <trans-unit id="daaea589cfdcba68c6fb4439f82db13e2663ef08" translate="yes" xml:space="preserve">
          <source>Configuring custom cookie/header names</source>
          <target state="translated">カスタムクッキー/ヘッダー名の設定</target>
        </trans-unit>
        <trans-unit id="3318dc8949af442001c4edd02bb7f568634038c4" translate="yes" xml:space="preserve">
          <source>Configuring differential loading</source>
          <target state="translated">差動荷重の設定</target>
        </trans-unit>
        <trans-unit id="e2e730960b7171130fca481fc1f10e9e9263328d" translate="yes" xml:space="preserve">
          <source>Configuring serve for ES5</source>
          <target state="translated">ES5のサーブを設定する</target>
        </trans-unit>
        <trans-unit id="639c964ac84b4b94d851cab1e8c1a67794ff6b79" translate="yes" xml:space="preserve">
          <source>Configuring servers for hosting multiple locales is outside the scope of this guide. For details on how to deploy apps to a remote server, see &lt;a href=&quot;deployment&quot;&gt;Deployment&lt;/a&gt;.</source>
          <target state="translated">複数のロケールをホストするようにサーバーを構成することは、このガイドの範囲外です。リモートサーバにアプリケーションを展開する方法の詳細については、を参照&lt;a href=&quot;deployment&quot;&gt;の展開を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e167f3c501b11cdaa3153d8880a1210498664831" translate="yes" xml:space="preserve">
          <source>Configuring size budgets</source>
          <target state="translated">サイズ予算の設定</target>
        </trans-unit>
        <trans-unit id="b1ddf860fb1a689c82409e02255ebd68b697326b" translate="yes" xml:space="preserve">
          <source>Configuring the child component</source>
          <target state="translated">子コンポーネントの設定</target>
        </trans-unit>
        <trans-unit id="10cfa758f61cc4a5058c791720ab4d216f70b4ab" translate="yes" xml:space="preserve">
          <source>Configuring the child's template</source>
          <target state="translated">子のテンプレートを設定する</target>
        </trans-unit>
        <trans-unit id="7e4a4c665250aa208aa365794302cdfdd8be4d9e" translate="yes" xml:space="preserve">
          <source>Configuring the e2e command</source>
          <target state="translated">e2eコマンドの設定</target>
        </trans-unit>
        <trans-unit id="35c1a0e449ba0dc01f7417c9c1992c3becea8cfe" translate="yes" xml:space="preserve">
          <source>Configuring the parent component</source>
          <target state="translated">親コンポーネントの設定</target>
        </trans-unit>
        <trans-unit id="4b7a5c30c831c21f8c6278cebc98c8b22ac18b5e" translate="yes" xml:space="preserve">
          <source>Configuring the parent's template</source>
          <target state="translated">親のテンプレートを設定する</target>
        </trans-unit>
        <trans-unit id="4c8c7079cd89d0939b266f6d64431c7e2ae58c57" translate="yes" xml:space="preserve">
          <source>Configuring the request</source>
          <target state="translated">リクエストの設定</target>
        </trans-unit>
        <trans-unit id="fdd2811811ef917c6598a28f5343087cf2fd7267" translate="yes" xml:space="preserve">
          <source>Configuring the test command</source>
          <target state="translated">テストコマンドの設定</target>
        </trans-unit>
        <trans-unit id="b3a24839fb22b5bafd46364046d4cbddbff408ca" translate="yes" xml:space="preserve">
          <source>Confirm it&amp;rsquo;s working</source>
          <target state="translated">機能していることを確認する</target>
        </trans-unit>
        <trans-unit id="224f48dab1e5cf55b03ac2f1ac05bea3b8bedb00" translate="yes" xml:space="preserve">
          <source>Confirm this for yourself by temporarily removing the &lt;code&gt;subscribe()&lt;/code&gt;, clicking &quot;Dashboard&quot;, then clicking &quot;Heroes&quot;. You'll see the full list of heroes again.</source>
          <target state="translated">&lt;code&gt;subscribe()&lt;/code&gt; を一時的に削除し、「ダッシュボード」をクリックしてから、「ヒーロー」をクリックして、これを自分で確認します。ヒーローの完全なリストが再び表示されます。</target>
        </trans-unit>
        <trans-unit id="f6715f3903bc2449584179fb098598b283932a25" translate="yes" xml:space="preserve">
          <source>Congratulations! You have a complete online store application with a product catalog, a shopping cart, and a checkout function.</source>
          <target state="translated">おめでとうございます。あなたは、商品カタログ、ショッピングカート、チェックアウト機能を備えた完全なオンラインストアアプリケーションを持っています。</target>
        </trans-unit>
        <trans-unit id="b7ad5d0678afbe3fd7553084cf4787b6e9c0c989" translate="yes" xml:space="preserve">
          <source>Congratulations! You have an online store application with a product catalog and shopping cart. You also have the ability to look up and display shipping prices.</source>
          <target state="translated">おめでとうございます。あなたは、商品カタログとショッピングカートを備えたオンラインストアアプリケーションを持っています。また、送料を調べて表示する機能もあります。</target>
        </trans-unit>
        <trans-unit id="b07076eda176817725f0e052b297461dac16f835" translate="yes" xml:space="preserve">
          <source>Congratulations! You have an online store application with a product catalog and shopping cart. You can also look up and display shipping prices.</source>
          <target state="translated">おめでとうございます。商品カタログとショッピングカートのあるオンラインストアアプリができました。また、送料を調べて表示することもできます。</target>
        </trans-unit>
        <trans-unit id="10c6e279d38be8fc1d0310fb7edeaf498cdea917" translate="yes" xml:space="preserve">
          <source>Congratulations! You have integrated routing into your online store.</source>
          <target state="translated">おめでとうございます。オンラインストアにルーティングが統合されましたね。</target>
        </trans-unit>
        <trans-unit id="0ec4a8ae4ac6c91ea3ef7e362745b3a129323812" translate="yes" xml:space="preserve">
          <source>Congratulations! You're running a hybrid application! The existing AngularJS code works as before &lt;em&gt;and&lt;/em&gt; you're ready to start adding Angular code.</source>
          <target state="translated">おめでとう！ハイブリッドアプリケーションを実行しています。既存のAngularJSコードは以前&lt;em&gt;と&lt;/em&gt;同様に機能し、Angularコードを追加する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="1d629e3fa6fd492821bf50a06af042ffb3bd5c9e" translate="yes" xml:space="preserve">
          <source>Congratulations! You've completed your first Angular app!</source>
          <target state="translated">おめでとうございます。初めてのAngularアプリが完成しましたね!</target>
        </trans-unit>
        <trans-unit id="30d43a2b85f7f934e83c32a6dd269b7b686aad20" translate="yes" xml:space="preserve">
          <source>Connect your CLI to your Firebase account and initialize the connection to your project using &lt;code&gt;firebase login&lt;/code&gt; and &lt;code&gt;firebase init&lt;/code&gt;.</source>
          <target state="translated">CLIをFirebaseアカウントに接続し、 &lt;code&gt;firebase login&lt;/code&gt; と &lt;code&gt;firebase init&lt;/code&gt; を使用してプロジェクトへの接続を初期化します。</target>
        </trans-unit>
        <trans-unit id="5c27449d136ee0edd471d5b2bcf5d772b4ffe53d" translate="yes" xml:space="preserve">
          <source>Consider a &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; that capitalizes the first letter of each word. Here's a naive implementation with a regular expression.</source>
          <target state="translated">各単語の最初の文字を大文字にする &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; について考えます。正規表現を使用した単純な実装を次に示します。</target>
        </trans-unit>
        <trans-unit id="54a77febf5f3dd1125bd27b0906cbd3c43eb8477" translate="yes" xml:space="preserve">
          <source>Consider a &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; that capitalizes the first letter of each word. Here's an implementation with a regular expression.</source>
          <target state="translated">各単語の最初の文字を大文字にする &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; について考えてみます。正規表現を使用した実装を次に示します。</target>
        </trans-unit>
        <trans-unit id="f11af7b9a0daf678a95a2bb3545a00907b3f43a5" translate="yes" xml:space="preserve">
          <source>Consider a &lt;code&gt;setCurrentClasses()&lt;/code&gt; component method that sets a component property, &lt;code&gt;currentClasses&lt;/code&gt;, with an object that adds or removes three classes based on the &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; state of three other component properties. Each key of the object is a CSS class name; its value is &lt;code&gt;true&lt;/code&gt; if the class should be added, &lt;code&gt;false&lt;/code&gt; if it should be removed.</source>
          <target state="translated">他の3つのコンポーネントプロパティの &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; 状態に基づいて3つのクラスを追加または削除するオブジェクトを使用して、コンポーネントプロパティ &lt;code&gt;currentClasses&lt;/code&gt; を設定する &lt;code&gt;setCurrentClasses()&lt;/code&gt; コンポーネントメソッドについて考えてみます。オブジェクトの各キーはCSSクラス名です。クラスを追加する必要が &lt;code&gt;true&lt;/code&gt; 場合はその値はtrue、削除する必要がある場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="704938e400612dc2bb86a91cf695ea802ba5df28" translate="yes" xml:space="preserve">
          <source>Consider a Car component that depends on several services. Suppose you configured the root injector (marked as A) with &lt;em&gt;generic&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt;, &lt;code&gt;EngineService&lt;/code&gt; and &lt;code&gt;TiresService&lt;/code&gt;.</source>
          <target state="translated">いくつかのサービスに依存するCarコンポーネントを考えてみましょう。ルートインジェクター（Aとマークされている）を &lt;code&gt;CarService&lt;/code&gt; 、 &lt;code&gt;EngineService&lt;/code&gt; 、 &lt;code&gt;TiresService&lt;/code&gt; の&lt;em&gt;汎用&lt;/em&gt;プロバイダーで構成したとします。</target>
        </trans-unit>
        <trans-unit id="ef6dd46525b101f499b4173e45474719d3b73bc3" translate="yes" xml:space="preserve">
          <source>Consider a simple app with only an &lt;code&gt;AppComponent&lt;/code&gt; and a &lt;code&gt;ChildComponent&lt;/code&gt;. The most basic rendered view would look like nested HTML elements such as the following:</source>
          <target state="translated">のみとシンプルなアプリを検討 &lt;code&gt;AppComponent&lt;/code&gt; と &lt;code&gt;ChildComponent&lt;/code&gt; を。最も基本的なレンダリングビューは、次のようなネストされたHTML要素のようになります。</target>
        </trans-unit>
        <trans-unit id="9d0c87c273b1cd440c8e08219bd3d9f4c12b560b" translate="yes" xml:space="preserve">
          <source>Consider adding component tests such as this one:</source>
          <target state="translated">このようなコンポーネントテストを追加することを検討してください。</target>
        </trans-unit>
        <trans-unit id="950cb0a6c5a129ab41e3d2c4b0399a2029d638c6" translate="yes" xml:space="preserve">
          <source>Consider an &lt;code&gt;ItemDetailComponent&lt;/code&gt; that presents item information and responds to user actions. Although the &lt;code&gt;ItemDetailComponent&lt;/code&gt; has a delete button, it doesn't contain the functionality to delete the hero. It can only raise an event reporting the user's delete request.</source>
          <target state="translated">アイテム情報を提示し、ユーザーアクションに応答する &lt;code&gt;ItemDetailComponent&lt;/code&gt; について考えてみます。が &lt;code&gt;ItemDetailComponent&lt;/code&gt; は削除ボタンがあり、それがヒーローを削除するための機能が含まれていません。ユーザーの削除リクエストを報告するイベントのみを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="19ab25c1b93a2faa63cd5aea01571afde09c39f6" translate="yes" xml:space="preserve">
          <source>Consider an &lt;code&gt;ItemDetailComponent&lt;/code&gt; that presents item information and responds to user actions. Although the &lt;code&gt;ItemDetailComponent&lt;/code&gt; has a delete button, it doesn't know how to delete the hero. It can only raise an event reporting the user's delete request.</source>
          <target state="translated">アイテム情報を提示し、ユーザーのアクションに応答する &lt;code&gt;ItemDetailComponent&lt;/code&gt; について考えます。が &lt;code&gt;ItemDetailComponent&lt;/code&gt; は削除ボタンがあり、それがヒーローを削除する方法を知りません。ユーザーの削除リクエストを報告するイベントのみを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="45bbfebd52a6fc2dcad975ebb9246faf762507f1" translate="yes" xml:space="preserve">
          <source>Consider creating a &quot;barrel&quot; file that gathers all the interceptor providers into an &lt;code&gt;httpInterceptorProviders&lt;/code&gt; array, starting with this first one, the &lt;code&gt;NoopInterceptor&lt;/code&gt;.</source>
          <target state="translated">最初の1つである &lt;code&gt;NoopInterceptor&lt;/code&gt; から始めて、すべてのインターセプタープロバイダーを &lt;code&gt;httpInterceptorProviders&lt;/code&gt; 配列に収集する「バレル」ファイルの作成を検討してください。</target>
        </trans-unit>
        <trans-unit id="b722f410e317e9cfe009f859ff75c60e3c1f71c7" translate="yes" xml:space="preserve">
          <source>Consider giving each feature module its own route configuration file. It may seem like overkill early when the feature routes are simple. But routes have a tendency to grow more complex and consistency in patterns pays off over time.</source>
          <target state="translated">各機能モジュールに独自のルート設定ファイルを与えることを検討してください。機能モジュールのルートが単純な場合、初期の段階ではやりすぎのように思えるかもしれません。しかし、ルートはより複雑になる傾向があり、パターンの一貫性は時間の経過とともに効果を発揮します。</target>
        </trans-unit>
        <trans-unit id="a52de92a816dd434e9063c072a3a8081a9a673d1" translate="yes" xml:space="preserve">
          <source>Consider giving each feature module its own route configuration file. Though the feature routes are currently minimal, routes have a tendency to grow more complex even in small apps.</source>
          <target state="translated">各機能モジュールに独自のルート設定ファイルを与えることを検討してください。現在、機能のルートは最小限に抑えられていますが、小規模なアプリでもルートは複雑化する傾向にあります。</target>
        </trans-unit>
        <trans-unit id="b361db120d8326b1672390a514f03096ea8586f8" translate="yes" xml:space="preserve">
          <source>Consider how Angular bootstraps the app with the following in &lt;code&gt;main.ts&lt;/code&gt;:</source>
          <target state="translated">Angularがアプリを &lt;code&gt;main.ts&lt;/code&gt; で次のようにブートストラップする方法を検討してください：</target>
        </trans-unit>
        <trans-unit id="dc7dcd613e9949f90e241a188de827ceac7f5419" translate="yes" xml:space="preserve">
          <source>Consider how you provide services to client applications.</source>
          <target state="translated">クライアントアプリケーションにどのようにサービスを提供しているかを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="d2610c84394a549686952f121986b0a1dfafaabe" translate="yes" xml:space="preserve">
          <source>Consider placing such helpers in a &lt;code&gt;testing&lt;/code&gt; folder sibling to the &lt;code&gt;app&lt;/code&gt; folder. This sample puts &lt;code&gt;ActivatedRouteStub&lt;/code&gt; in &lt;code&gt;testing/activated-route-stub.ts&lt;/code&gt;.</source>
          <target state="translated">そのようなヘルパーを &lt;code&gt;app&lt;/code&gt; フォルダーの兄弟の &lt;code&gt;testing&lt;/code&gt; フォルダーに配置することを検討してください。このサンプルは、 &lt;code&gt;ActivatedRouteStub&lt;/code&gt; を &lt;code&gt;testing/activated-route-stub.ts&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="40a30ec038af240bb0c63a65ef68c17c3e707a72" translate="yes" xml:space="preserve">
          <source>Consider the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&quot;&gt;ARIA&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG&lt;/a&gt;. They are purely attributes, don't correspond to element properties, and don't set element properties. In these cases, there are no property targets to bind to.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&quot;&gt;ARIA&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVGを&lt;/a&gt;検討してください。これらは純粋に属性であり、要素のプロパティに対応せず、要素のプロパティを設定しません。これらの場合、バインドするプロパティターゲットはありません。</target>
        </trans-unit>
        <trans-unit id="6dfcd76249e9ea71a17509fe3b793289b07d8e06" translate="yes" xml:space="preserve">
          <source>Consider the &lt;code&gt;forbiddenNameValidator&lt;/code&gt; function from previous &lt;a href=&quot;form-validation#reactive-component-class&quot;&gt;examples&lt;/a&gt; in this guide. Here's what the definition of that function looks like:</source>
          <target state="translated">このガイドの前の&lt;a href=&quot;form-validation#reactive-component-class&quot;&gt;例の&lt;/a&gt; &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 関数を検討してください。その関数の定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="99dfd21d5e12ef88c3c4da7ca77148c3ad73959b" translate="yes" xml:space="preserve">
          <source>Consider the &lt;code&gt;forbiddenNameValidator&lt;/code&gt; function from previous &lt;a href=&quot;form-validation#reactive-component-class&quot;&gt;reactive-form examples&lt;/a&gt;. Here's what the definition of that function looks like.</source>
          <target state="translated">以前の&lt;a href=&quot;form-validation#reactive-component-class&quot;&gt;リアクティブフォームの例&lt;/a&gt;の &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 関数について考えてみます。その関数の定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9832950e2039437daf274f99d97ab976ff07a91b" translate="yes" xml:space="preserve">
          <source>Consider the first parameter:</source>
          <target state="translated">最初のパラメータを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="df750f99f759535256c70ba046322057d97e3891" translate="yes" xml:space="preserve">
          <source>Consider the following &lt;code&gt;LoggingInterceptor&lt;/code&gt;, which captures the time of the request, the time of the response, and logs the outcome with the elapsed time with the injected &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">次の &lt;code&gt;LoggingInterceptor&lt;/code&gt; について考えてみましょう。LoggingInterceptorは、リクエストの時間とレスポンスの時間をキャプチャし、注入された &lt;code&gt;MessageService&lt;/code&gt; で経過時間を記録します。</target>
        </trans-unit>
        <trans-unit id="1fa153aa2b6717da43d4aa5c2f8cdfa675736fe8" translate="yes" xml:space="preserve">
          <source>Consider the following component decorator:</source>
          <target state="translated">以下のコンポーネントデコレータを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="9d49b38c45368606b30731a4e8c9d9b37fce625c" translate="yes" xml:space="preserve">
          <source>Consider the following component definition:</source>
          <target state="translated">以下のコンポーネント定義を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="931e470c0c54c08d55bf68c3b26211322aa88c11" translate="yes" xml:space="preserve">
          <source>Consider the following directive:</source>
          <target state="translated">次のような指令を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="1b58526ae91b6411da07afa80fca36299bc01d23" translate="yes" xml:space="preserve">
          <source>Consider the following example that uses &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を使用する次の例について考えてみます。</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">次のような例を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="b5f2036077f3da315b3a1a03b73956c51f99564f" translate="yes" xml:space="preserve">
          <source>Consider the following hierarchy:</source>
          <target state="translated">次のような階層を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="ba02a047d2fa606c8b62d0728733a71f12e0cff9" translate="yes" xml:space="preserve">
          <source>Consider the following module from an imaginary app:</source>
          <target state="translated">架空のアプリから次のモジュールを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="a3930ac2c45c0dfd74cd50df77026bee3f43670b" translate="yes" xml:space="preserve">
          <source>Consider the following route configuration: &lt;code&gt;[{ path: 'user/:name', component: UserCmp }]&lt;/code&gt;. When linking to this &lt;code&gt;user/:name&lt;/code&gt; route, you use the &lt;code&gt;&lt;a href=&quot;routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">次のルート構成を検討してください： &lt;code&gt;[{ path: 'user/:name', component: UserCmp }]&lt;/code&gt; 。この &lt;code&gt;user/:name&lt;/code&gt; ルートにリンクするときは、 &lt;code&gt;&lt;a href=&quot;routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="2f026432021575066863b77f4364e49bdb955125" translate="yes" xml:space="preserve">
          <source>Consider the following router link that navigates from the root of the application down to the Dragon Crisis:</source>
          <target state="translated">アプリケーションのルートからドラゴンクライシスまでをナビゲートする以下のルーターリンクを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f0d5e9696815c99087b1451ae60861a57a845f92" translate="yes" xml:space="preserve">
          <source>Consider the following template, which lets a user enter a search term to find an npm package by name. When the user enters a name in a search-box, the &lt;code&gt;PackageSearchComponent&lt;/code&gt; sends a search request for a package with that name to the npm web API.</source>
          <target state="translated">次のテンプレートについて考えてみます。このテンプレートでは、ユーザーが検索語を入力して、名前でnpmパッケージを見つけることができます。ユーザーが検索ボックスに名前を入力すると、 &lt;code&gt;PackageSearchComponent&lt;/code&gt; はその名前のパッケージの検索要求をnpm WebAPIに送信します。</target>
        </trans-unit>
        <trans-unit id="39319f460f4fb9c39f4884a7c1a88c15c5e5d19b" translate="yes" xml:space="preserve">
          <source>Consider the following template:</source>
          <target state="translated">以下のようなテンプレートを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="9bc5918ab96c8ae8dd385d33d9088492a8181d54" translate="yes" xml:space="preserve">
          <source>Consider the next example, with a &lt;code&gt;nullItem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nullItem&lt;/code&gt; を使用した次の例を考えてみます。</target>
        </trans-unit>
        <trans-unit id="2db65abc70042beb9455d6a81f9ffe531ed87cd5" translate="yes" xml:space="preserve">
          <source>Consider this &lt;code&gt;LightswitchComponent&lt;/code&gt; which toggles a light on and off (represented by an on-screen message) when the user clicks the button.</source>
          <target state="translated">ユーザーがボタンをクリックしたときにライトをオン/オフ（画面上のメッセージで表される）に切り替えるこの &lt;code&gt;LightswitchComponent&lt;/code&gt; について考えてみます。</target>
        </trans-unit>
        <trans-unit id="8fd55686b3b9fcd196785761c13b6856f6e18c3d" translate="yes" xml:space="preserve">
          <source>Consider this example of a child/parent relationship:</source>
          <target state="translated">この親子関係の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="translated">この例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="373e414166550c8a0819f99056b315d0e56007a0" translate="yes" xml:space="preserve">
          <source>Consider this translation to French:</source>
          <target state="translated">このフランス語への翻訳を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="44b7723591959083ad1b46043ee91e613fb4e932" translate="yes" xml:space="preserve">
          <source>Consider this variation on the &lt;a href=&quot;lifecycle-hooks#afterview&quot;&gt;previous &lt;em&gt;AfterView&lt;/em&gt;&lt;/a&gt; example. This time, instead of including the child view within the template, it imports the content from the &lt;code&gt;AfterContentComponent&lt;/code&gt;'s parent. Here's the parent's template:</source>
          <target state="translated">&lt;a href=&quot;lifecycle-hooks#afterview&quot;&gt;前の&lt;em&gt;AfterViewの&lt;/em&gt;&lt;/a&gt;例のこのバリエーションを検討してください。今回は、テンプレートに子ビューを含める代わりに、 &lt;code&gt;AfterContentComponent&lt;/code&gt; の親からコンテンツをインポートします。親のテンプレートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b8ad4adbe52348aca60c063423976874c64b160b" translate="yes" xml:space="preserve">
          <source>Consider this variation on the &lt;a href=&quot;lifecycle-hooks#afterview&quot;&gt;previous &lt;em&gt;AfterView&lt;/em&gt;&lt;/a&gt; example. This time, instead of including the child view within the template, it imports the content from the &lt;code&gt;AfterContentComponent&lt;/code&gt;'s parent. The following is the parent's template.</source>
          <target state="translated">&lt;a href=&quot;lifecycle-hooks#afterview&quot;&gt;前の&lt;em&gt;AfterViewの&lt;/em&gt;&lt;/a&gt;例でこのバリエーションを検討してください。今回は、テンプレート内に子ビューを含める代わりに、 &lt;code&gt;AfterContentComponent&lt;/code&gt; の親からコンテンツをインポートします。以下は、親のテンプレートです。</target>
        </trans-unit>
        <trans-unit id="a19ffd846c37d7414552d50785c96ff829945eb9" translate="yes" xml:space="preserve">
          <source>Consider writing a more capable version of this stub class with the &lt;a href=&quot;testing#marble-testing&quot;&gt;&lt;em&gt;marble testing library&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing#marble-testing&quot;&gt;&lt;em&gt;大理石のテストライブラリを使用&lt;/em&gt;&lt;/a&gt;して、このスタブクラスのより機能的なバージョンを作成することを検討してください。</target>
        </trans-unit>
        <trans-unit id="82c9e09b376e9fc7cc9c29b66642330e13aa3c15" translate="yes" xml:space="preserve">
          <source>Consider writing a more capable version of this stub class with the &lt;a href=&quot;testing-components-scenarios#marble-testing&quot;&gt;&lt;em&gt;marble testing library&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing-components-scenarios#marble-testing&quot;&gt;&lt;em&gt;大理石のテストライブラリを使用&lt;/em&gt;&lt;/a&gt;して、このスタブクラスのより高性能なバージョンを作成することを検討してください。</target>
        </trans-unit>
        <trans-unit id="123acf3eb0958698db3b9d6cb8b39fb90d98951d" translate="yes" xml:space="preserve">
          <source>Consolidated setup</source>
          <target state="translated">連結設定</target>
        </trans-unit>
        <trans-unit id="599005e9d0a1ed8a6d678501e1cd08f335ab014c" translate="yes" xml:space="preserve">
          <source>Constants for the categories of parameters that can be defined for animations.</source>
          <target state="translated">アニメーションに定義できるパラメータのカテゴリの定数です。</target>
        </trans-unit>
        <trans-unit id="6b523fd10da4469f4b2ce06dba3999dc4b270b7d" translate="yes" xml:space="preserve">
          <source>Constants in API documentation to find more built-in tokens.</source>
          <target state="translated">API ドキュメントにある定数で、より多くの組み込みトークンを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="52e68a873a2be3470675b9ee933b98d781ae7fef" translate="yes" xml:space="preserve">
          <source>Constraints</source>
          <target state="translated">Constraints</target>
        </trans-unit>
        <trans-unit id="ef05208dd9ec71f70387f2d769aa146308ccbd23" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; with the given state, validators and options.</source>
          <target state="translated">指定された状態、バリデーター、およびオプションで新しい &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; を構築します。</target>
        </trans-unit>
        <trans-unit id="0e2579e03480a20036b5089c167b3f0020b0184c" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを構築します。</target>
        </trans-unit>
        <trans-unit id="c76dfa2168304d703ec211079e60eaef5f1dbdec" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; を構築します。</target>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="670ca6b9ef09915407c033157280805e28b73c2f" translate="yes" xml:space="preserve">
          <source>Constructor or variable initialization?</source>
          <target state="translated">コンストラクタか変数の初期化か?</target>
        </trans-unit>
        <trans-unit id="e05a9515511c565726bade9a20901e8a1b93defa" translate="yes" xml:space="preserve">
          <source>ConstructorProvider</source>
          <target state="translated">ConstructorProvider</target>
        </trans-unit>
        <trans-unit id="4b55a3bf49768e5a45166266fd99336a9be3e26c" translate="yes" xml:space="preserve">
          <source>ConstructorSansProvider</source>
          <target state="translated">ConstructorSansProvider</target>
        </trans-unit>
        <trans-unit id="7ce1dbb7519fe8f24420e28f982f8fb187e4b298" translate="yes" xml:space="preserve">
          <source>Constructors should do little more than initialize variables. This rule makes the component safe to construct under test without fear that it will do something dramatic like talk to the server. That's why you call the &lt;code&gt;HeroService&lt;/code&gt; from within the &lt;code&gt;ngOnInit&lt;/code&gt; rather than the constructor.</source>
          <target state="translated">コンストラクターは、変数を初期化するだけです。このルールにより、サーバーとの会話のような劇的なことを行うことを恐れずに、テスト下でコンポーネントを安全に構築できます。これが、 &lt;code&gt;ngOnInit&lt;/code&gt; ではなくngOnInit内から &lt;code&gt;HeroService&lt;/code&gt; を呼び出す理由です。</target>
        </trans-unit>
        <trans-unit id="23cadb1df353b99c4e051b6edc1ad945766aada1" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; 解釈として身体その要求 &lt;code&gt;Blob&lt;/code&gt; 、完全な戻り &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="f6c7265bc324b3ca092e2e42b20774ac1a7962cf" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; として身体を解釈要求 &lt;code&gt;Blob&lt;/code&gt; と完全イベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="d752e575bd5ac363323d94fd1cddc80f248c081e" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; として身体を解釈要求 &lt;code&gt;Blob&lt;/code&gt; ととしての応答を返し &lt;code&gt;Blob&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a9734e30c9c3fb4f3087180f1f53dda27759aa7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; 要求をそのJSONオブジェクトとして解釈体と完全戻り &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="2c7b345a02c8a2e0b156bf32fd1d956468c16cba" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; JSONオブジェクトとして本体を解釈し、完全なイベント・ストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="78fa3c91d93b2834d54dad25333e8d6c6f04d52a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; JSONオブジェクトとして本体を解釈し、JSONオブジェクトとしてレスポンスボディを返す要求を。</target>
        </trans-unit>
        <trans-unit id="5763f853957277c256fe8bece71d26cd1c302989" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; 解釈テキストストリームとして本体は、完全返すことを要求 &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="d395c4f8772ed966eb476d4553f3622f3c9eb516" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text string and returns a string.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; テキスト文字列として体を解釈し、文字列を返す要求を。</target>
        </trans-unit>
        <trans-unit id="f42594ac52811090242806c1017dfff7afc2cc39" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; テキスト文字列として体を解釈し、完全なイベントストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="ceb015cee9533f889ac31fcc95a89d588735115b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; 解釈として身体その要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; は、完全な戻り &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="b3d4b7b588e3563475edba42714ce450d5308cc9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; として身体を解釈要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; フルイベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="9e38f7f2d5fea29306efef924f497a2f58946854" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; として身体を解釈要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; やとしての応答を返し &lt;code&gt;ArrayBuffer&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="650e1e417750bced0f54cbe9f418025dc567dc8f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request the interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; JSONオブジェクトを返すフルとして要求を解釈体を &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="dad93856adb8d6b8425b7acc5385a4808c8d006a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt;request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;DELETE&lt;/code&gt; JSONオブジェクトとして本体を解釈し、完全なイベント・ストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="2bf9b19b246c66a2020726251530d48bc738a8aa" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; の解釈として体という要求 &lt;code&gt;Blob&lt;/code&gt; 、完全返し &lt;code&gt;HTTPResponse&lt;/code&gt; はを。</target>
        </trans-unit>
        <trans-unit id="4e49725f1a9ae4e2054271d70637a4ebfc5fe534" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; のような身体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; と完全なイベントストリームを返します。</target>
        </trans-unit>
        <trans-unit id="15c388ade7bdd889621caad9b4ece27fe7dd1606" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; ととしての応答を返し &lt;code&gt;Blob&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3281ae3f5f4f5c1ceb31d26c685149c405cf34c9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築し &lt;code&gt;GET&lt;/code&gt; リクエストをそのJSONオブジェクトとして解釈体と完全戻り &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="7bdb056ccc601478c9de526dba99533277c63fc3" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">構築し &lt;code&gt;GET&lt;/code&gt; JSONオブジェクトとして本体を解釈し、完全なイベント・ストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="f8808b94c91f6cb918a6e23418d801f00d007f86" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">構築し &lt;code&gt;GET&lt;/code&gt; リクエストをそのJSONオブジェクトとしてJSONオブジェクトを返す応答ボディとして解釈体。</target>
        </trans-unit>
        <trans-unit id="38c4983aaec309563fd4823755b91abad4118959" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the response body in a given type.</source>
          <target state="translated">構築し &lt;code&gt;GET&lt;/code&gt; JSONオブジェクトとして本体を解釈し、指定されたタイプに応答ボディを返す要求を。</target>
        </trans-unit>
        <trans-unit id="fef0b29101aeda5c1971e298a033227042da30da" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; の解釈テキストストリームとして体が、フル返す要求 &lt;code&gt;HTTPResponse&lt;/code&gt; はを。</target>
        </trans-unit>
        <trans-unit id="88acb84a8dc8a7a7bf125dd68851430ba5c28b6f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; のテキスト文字列として体を解釈し、完全なイベントストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="b2cceab39f1e7e7efe2e2f6e579fd544fa697936" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; のテキスト文字列として体を解釈し、文字列値としてレスポンスを返すリクエストを。</target>
        </trans-unit>
        <trans-unit id="b9d900f5a2b2c2135dbbd2f5f071bfe09b7344a7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; の解釈として本体その要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; は、完全な戻り &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="85cb8493e8fa7eb489f1d771a1b639079de6048e" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;GET&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; フルイベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="9a07c27d0a666876d3e577af932ae161d141709c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response in an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築し &lt;code&gt;GET&lt;/code&gt; リクエストをそのとして解釈体 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻るに応答 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ae9709e5254a29fde908937342183243336d2e6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; の解釈として本体その要求 &lt;code&gt;Blob&lt;/code&gt; 、完全な戻り &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="9e41bc7a0a26a5593b8c106a2849513992d208a4" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; のように本体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; と完全イベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="b3bff2414a25c7a3a355f0ac107ce0ab2220bab8" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; のように本体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; ととしての応答を返し &lt;code&gt;Blob&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5a0f75d10f9dd47c3ef30634c7082613b93db48" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; の要求をそのJSONオブジェクトとして解釈体と完全戻り &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="f863170a130f7b10701f3d033e7924e426505f54" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full HTTP event stream.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、完全なHTTPイベントストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="6f8ba56427c69a4a299cc298ca03f14f9791c4c6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、完全なイベント・ストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="61e2986956d3b70b1a243ef9d1891b235b3a7cf7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、JSONオブジェクトとしてレスポンスボディを返す要求を。</target>
        </trans-unit>
        <trans-unit id="0410e3f2cf2f25269594792fad8a56045d9622fd" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、指定されたタイプで応答を返す要求を。</target>
        </trans-unit>
        <trans-unit id="11c6793971907cea6cbeff4c666ee19920fc8790" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; のテキスト文字列として体を解釈し、完全なイベントストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="17465a76f8919024e4dab5202a2b02db5f624e11" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; のテキスト文字列として本体を解釈し、文字列値として応答を返す要求を。</target>
        </trans-unit>
        <trans-unit id="d32aab72547341461188042bc33d708b084b2739" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; のように本体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; 、フルHTTP応答を返信します。</target>
        </trans-unit>
        <trans-unit id="75281f828c52beee78e72c74e921142c4418838c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; のように本体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; フルイベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="651a1e9c194461a541b1e9b035c2716dab91434f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; のように本体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; やとしての応答を返し &lt;code&gt;ArrayBuffer&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="e6e699f4d178bb9685d4393ffad3b66517220e5c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;HEAD&lt;/code&gt; の要求をそのテキストストリームとして解釈体戻るフル &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="dd3faa3853dcee5fe3d9fe9443a6f3cbab522583" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;JSONP&lt;/code&gt; request for the given URL and name of the callback parameter.</source>
          <target state="translated">構築 &lt;code&gt;JSONP&lt;/code&gt; のコールバックパラメータの指定されたURLと名前の要求を。</target>
        </trans-unit>
        <trans-unit id="235abbed0544ac665d44263fa9d57156d8a7d0d4" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の解釈として本体その要求 &lt;code&gt;Blob&lt;/code&gt; 、完全な戻り &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="12c496639b74673e61acab392af8229707d80e94" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; として本体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; と完全イベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="3860ec6228891ae23996bbb6ec573173db852b0a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; として本体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; ととしての応答を返し &lt;code&gt;Blob&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65f17861f529c27980d80ff43a891f5712038253" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の要求をそのJSONオブジェクトとして解釈体と完全戻り &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="362c13fb84402f01f2d429576ef5e4a4f5b33b07" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、完全なイベント・ストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="39c5b11223130ad747170436e71886fdb3ac790f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、JSONオブジェクトとしてレスポンスボディを返す要求を。</target>
        </trans-unit>
        <trans-unit id="62dc2dc0a6122d2737ade209d92cf331f28fc41b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、指定されたタイプで応答を返す要求を。</target>
        </trans-unit>
        <trans-unit id="00cc25279f1fe8a55b73b50a0f3061b5bf769645" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の要求をその解釈テキストストリームとリターンフルなどの身体 &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="9e38458638cf0324b1712678aff908b60855c606" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; のテキスト文字列として体を解釈し、完全なイベントストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="af762be58554aaad80f11f4e021e3cc32e035e84" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; のテキスト文字列として本体を解釈し、文字列値として応答を返す要求を。</target>
        </trans-unit>
        <trans-unit id="4c6d700be22e47259958685c709c9505c5740728" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の解釈として本体その要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; は、完全な戻り &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="02057de6678548f190b9df379d020308af41aed6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; として本体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; やとしての応答を返し &lt;code&gt;ArrayBuffer&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7b28f32d4a88ab248f7cf83aa28581d3fb53de32" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; の要求と解釈体 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻る完全なイベントストリームを。</target>
        </trans-unit>
        <trans-unit id="94cd7acd8580c2038f0ddac265f4a05e8c9fd805" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as as a text string and returns the response as a string value.</source>
          <target state="translated">構築 &lt;code&gt;PATCH&lt;/code&gt; のテキスト文字列などのように身体を解釈し、文字列値として応答を返す要求を。</target>
        </trans-unit>
        <trans-unit id="a81bd3729afd38c9b3f199dd3cba59451666f8e8" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のリクエストを、そのような解釈体 &lt;code&gt;Blob&lt;/code&gt; と完全戻り &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="641cb490191b751283ceeb07b3880411b3e331d9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のリクエストを、そのような解釈体 &lt;code&gt;Blob&lt;/code&gt; を返すとして応答 &lt;code&gt;Blob&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3115bea78d82e234317f39a3678fc0f698690441" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response in an observable of the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; と完全イベントストリームの観察に応答を返しています。</target>
        </trans-unit>
        <trans-unit id="6ba1bd26d70d1d409c49914ddecb60499cb87756" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns an observable of the response.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、応答の観察を返す要求を。</target>
        </trans-unit>
        <trans-unit id="f1fb5bb7bfe7c0f33819f0f7b890f9a166a77955" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のリクエストをそのJSONオブジェクトとして解釈体と完全戻り &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="5eaf2b0bba2543a7459ce52211e4f71a92ce1366" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">構築物 &lt;code&gt;POST&lt;/code&gt; リクエストそのJSONオブジェクトとしてJSONオブジェクトを返す応答ボディとして解釈体。</target>
        </trans-unit>
        <trans-unit id="253b00de387b55f60aac23305f4fd5c1946433c7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のリクエストをそのテキストストリームとして解釈体を、完全戻り &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="5e4eb5da1850699a1fe63fd490a53282f34e0d9a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のテキスト文字列として体を解釈し、完全なイベントストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="7a789907a379c1ba1cf8c5c66a9f3b5f6488c4ba" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のテキスト文字列として本体を解釈し、文字列値として応答を返す要求を。</target>
        </trans-unit>
        <trans-unit id="0b92cf6215de8d06038308cc3276b24cfc28c200" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のリクエストを、そのような解釈体 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻る &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54dee4e9bfdab77a1cce5b278205d1aa8b0386cb" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のリクエストを、そのような解釈体 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻る完全なイベントストリーム。</target>
        </trans-unit>
        <trans-unit id="b3edb2404101ecf07ed861998b4a029fdffde857" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as an as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;POST&lt;/code&gt; のリクエストをその解釈と同様に本体 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻る &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87b99be82744dd378073f66e4b7c97962ac602f7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; と完全なHTTP応答を返信します。</target>
        </trans-unit>
        <trans-unit id="a1235d4b058347a55fb90fed94e459e7a014ba09" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; と完全イベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="f2b5392428552e3c8efb88251093c2bdbfba5d51" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;Blob&lt;/code&gt; ととしての応答を返し &lt;code&gt;Blob&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0439d9f427f043166dd907683bb226cbd25f4cd6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns an observable of JSON object.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のJSONオブジェクトとして本体を解釈し、JSONオブジェクトの観察を返す要求を。</target>
        </trans-unit>
        <trans-unit id="eba74799172ea8fcc067f636db902fd80a63cbea" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns an observable of the response.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、応答の観察を返す要求を。</target>
        </trans-unit>
        <trans-unit id="6ca01bbee7247503c8ed6b402d209233876b14b1" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the full HTTP response.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、完全なHTTP応答を返信要求を。</target>
        </trans-unit>
        <trans-unit id="3b44df6f74adf2927b103251d3acd57cefb019cd" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、完全なイベント・ストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="1fd26bb4f36e9f3d74c0083a4024dc81cab4d0b3" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; の JSONオブジェクトとして本体を解釈し、JSONオブジェクトとしてレスポンスボディを返す要求を。</target>
        </trans-unit>
        <trans-unit id="7d09f0b2e98042f496b98ff20dca620252b483b9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text stream and returns the full HTTP response.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のテキスト・ストリームとして本体を解釈し、完全なHTTP応答を返信要求を。</target>
        </trans-unit>
        <trans-unit id="863358fd573521107236693d767077976e59fa2b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のテキスト文字列として体を解釈し、完全なイベントストリームを返す要求を。</target>
        </trans-unit>
        <trans-unit id="377246ad02c79bf2e4d51b4f8419d3ddeeafb681" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のテキスト文字列として本体を解釈し、文字列値として応答を返す要求を。</target>
        </trans-unit>
        <trans-unit id="64c0cd9a96668e8b3343fee0e252136c45340d24" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns an observable of the full HTTP response.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; 、フルHTTP応答の観察を返すを。</target>
        </trans-unit>
        <trans-unit id="bb1beb4560a375619148b6bd82dab41ae22771ac" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; フルイベントストリームを返しています。</target>
        </trans-unit>
        <trans-unit id="ad0d5617ed1d692d198b945c2d880bf92ea9bb23" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;PUT&lt;/code&gt; のように体を解釈し、要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; やとしての応答を返し &lt;code&gt;ArrayBuffer&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="540ae61eebca15f7ce999f72c0d6ca40b66a4b06" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an instance of the requested type and returns an observable of the requested type.</source>
          <target state="translated">ボディをリクエストされたタイプのインスタンスとして解釈し、リクエストされたタイプのオブザーバブルを返す &lt;code&gt;PUT&lt;/code&gt; リクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="34e9da8b827323d8f1c47bc0c308d4883a7b8aa4" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an instance of the requested type and returns the full HTTP response.</source>
          <target state="translated">本体を要求されたタイプのインスタンスとして解釈し、完全なHTTP応答を返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="2c2f9b7c6872456661c302e7b127ee817109f69f" translate="yes" xml:space="preserve">
          <source>Constructs a DELETE request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">ボディを JSON オブジェクトとして解釈し、指定された型でレスポンスを返す DELETE リクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="4fdf78c52ba12f844dc35ac6ac10fec8165d09d8" translate="yes" xml:space="preserve">
          <source>Constructs a POST request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">ボディをJSONオブジェクトとして解釈し、完全なイベントストリームを返すPOSTリクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="a0f16550cba971f5543bee854b84b69167c02e12" translate="yes" xml:space="preserve">
          <source>Constructs a POST request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPresponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPresponse&lt;/code&gt; を返すPOSTリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="faca82d4645ac5209a169e17a54b5429d35b82f5" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; from the given array of configurations, validators and options.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; れた構成、バリデータ、オプションの配列から新しいFormArrayを構築します。</target>
        </trans-unit>
        <trans-unit id="e4f1a1329904af95fdafaf68a3286a1f491fb41e" translate="yes" xml:space="preserve">
          <source>Constructs a new HTTP header object with the given values.</source>
          <target state="translated">与えられた値で新しいHTTPヘッダオブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="23c7c42791c3ed6d93d51cd2e390649e3d52a08c" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">ボディを &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="e4f5145b1c07e56fcc5a94d8f45486317d521e44" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as a blob and returns the response as a blob.</source>
          <target state="translated">ボディを blob として解釈し、レスポンスを blob として返すリクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="7a4c3f3a26fcbf5a54904048a00ea04e24b7829c" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as a text string and returns a string value.</source>
          <target state="translated">ボディをテキスト文字列として解釈し、文字列の値を返すリクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="80832bf903757ba9e7a0204dc49d67b0e482a5dc" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response in an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">要求を構築したものと解釈体 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻るに応答 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9d4aa3bbd4f5b076380c1ce5b2d9fc9aa237020" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="66a8388af3067eb92a40e42161e27adde33ad707" translate="yes" xml:space="preserve">
          <source>Constructs a request where response type and requested observable are not known statically.</source>
          <target state="translated">レスポンスタイプとリクエストされたオブザーバブルが静的に知られていない場合に、リクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="cc2e5129749ea1ac51e3940bcad6196f2e3f0d57" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="5c05e9b870c9e45179a8c60dd8a491ee6d879818" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt; as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; をJSONオブジェクトとして返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="2fd177b01d4106a11ace58c091c67fb2667e5e3e" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt; with the response body in the requested type.</source>
          <target state="translated">ボディをJSONオブジェクトとして解釈するリクエストを &lt;code&gt;HTTPResponse&lt;/code&gt; し、リクエストされたタイプのレスポンスボディとともに完全なHTTPResponseを返します。</target>
        </trans-unit>
        <trans-unit id="e239c478d8d610cfd7229cf417e18307e479fca9" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="19ca9e2cabc5e8cad7907af5722bad9b8c4841ae" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">ボディを JSON オブジェクトとして解釈し、完全なイベントストリームを返すリクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="5ff310655babdbd12ef2099887de65800e95ad4a" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object with the response body of the requested type.</source>
          <target state="translated">リクエストのボディを JSON オブジェクトとして解釈し、リクエストされた型のレスポンスボディを持つリクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="5d357b5fa671a3acf59792934174d67c5969e195" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="fbe5633d3438abe9fc1598aad6c50f76be1c984b" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">ボディをテキスト文字列として解釈し、完全なイベントストリームを返すリクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="589ee8b3009a97edc2e105e386455f14a6ac6eaf" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="211b45077edf145b2c1ab7a5658740f2629293f1" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; ように、その解釈に体を要求 &lt;code&gt;Blob&lt;/code&gt; を返す完全 &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="3f70f447bdb712016999ddd1f486a06582ad414a" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; ように、その解釈に体を要求 &lt;code&gt;Blob&lt;/code&gt; フルイベントストリームを返します。</target>
        </trans-unit>
        <trans-unit id="3c2191707361f8916dd245724c3fb5d2162f638c" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; ように、その解釈に体を要求 &lt;code&gt;Blob&lt;/code&gt; を返すような応答 &lt;code&gt;Blob&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68cb6838561e80e7628ba396368ee45ef8e2d8b2" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築物は、 &lt;code&gt;OPTIONS&lt;/code&gt; は、 JSONオブジェクトと完全戻るように、その解釈に体を要求 &lt;code&gt;HTTPResponse&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="902129b5eca64cc2f16d81e1fc10e63df1bee3be" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">構築物は、 &lt;code&gt;OPTIONS&lt;/code&gt; は、 JSONオブジェクトを返す完全なイベント・ストリームとして、その解釈に身体を要求します。</target>
        </trans-unit>
        <trans-unit id="0c7fdf047af3a8958038a757c74e1c63d9542aef" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; は JSONオブジェクトとしてその解釈に身体を要求し、JSONオブジェクトとしてレスポンスボディを返します。</target>
        </trans-unit>
        <trans-unit id="9b11290c8cfbb3b730421dfbca1d1cf02c66dd3e" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">構築物は、 &lt;code&gt;OPTIONS&lt;/code&gt; は、 JSONオブジェクトと戻り、所与のタイプの応答として、その解釈に身体を要求します。</target>
        </trans-unit>
        <trans-unit id="c7a2a5ef838d241037e01caa8ee9f37a5af4e540" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a text string and returns a string value.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; 、テキスト文字列を返す文字列値として、その解釈に身体を要求します。</target>
        </trans-unit>
        <trans-unit id="4b7f2fe48b89261fe52e259b2880964247765df8" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; は、テキスト文字列を返す完全なイベントストリームとしてその解釈に体を要求します。</target>
        </trans-unit>
        <trans-unit id="179fcc296f7004ba8fa6e08e127a0d3bc8fab23b" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; ように、その解釈に体を要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; 、フルHTTPレスポンスを返します。</target>
        </trans-unit>
        <trans-unit id="ef02beb6aacabe6634023a8cbc4f937cce1f3fdc" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; ように、その解釈に体を要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻る完全なイベントストリーム。</target>
        </trans-unit>
        <trans-unit id="f638583ad8ec6239b9861a9997058059eefcb1b8" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">構築 &lt;code&gt;OPTIONS&lt;/code&gt; ように、その解釈に体を要求 &lt;code&gt;ArrayBuffer&lt;/code&gt; 戻るよう応答 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60d7e2d2bd804f43e701c41db670762438d1e121" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">構築物は、 &lt;code&gt;OPTIONS&lt;/code&gt; は、テキストストリームとして解釈体と完全復帰要求 &lt;code&gt;HTTPResponse&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="0cf9d7353005581788d3e7598a8800407a55cf3e" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;Observable&lt;/code&gt; that, when subscribed, causes a request with the special method &lt;code&gt;JSONP&lt;/code&gt; to be dispatched via the interceptor pipeline. The &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP pattern&lt;/a&gt; works around limitations of certain API endpoints that don't support newer, and preferable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt; protocol. JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the requests even if the API endpoint is not located on the same domain (origin) as the client-side application making the request. The endpoint API must support JSONP callback for JSONP requests to work. The resource API returns the JSON response wrapped in a callback function. You can pass the callback function name as one of the query parameters. Note that JSONP requests can only be used with &lt;code&gt;GET&lt;/code&gt; requests.</source>
          <target state="translated">サブスクライブすると、特別なメソッド &lt;code&gt;JSONP&lt;/code&gt; を持つリクエストがインターセプターパイプライン経由でディスパッチされる &lt;code&gt;Observable&lt;/code&gt; を構築します。&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONPパターンは&lt;/a&gt;、より新しい、そして好ましくはサポートしていない特定のAPIエンドポイントの制限を回避します&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORSを&lt;/a&gt;プロトコル。 JSONPは、エンドポイントAPIをJavaScriptファイルとして扱い、APIエンドポイントがリクエストを行うクライアント側アプリケーションと同じドメイン（オリジン）にない場合でも、ブラウザーをだましてリクエストを処理させます。エンドポイントAPIは、JSONPリクエストが機能するためにJSONPコールバックをサポートする必要があります。リソースAPIは、コールバック関数にラップされたJSON応答を返します。コールバック関数名をクエリパラメータの1つとして渡すことができます。 JSONPリクエストは &lt;code&gt;GET&lt;/code&gt; リクエストでのみ使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b0d247830e912c20bc354ff04c22370298537dbd" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;Observable&lt;/code&gt; that, when subscribed, causes the configured &lt;code&gt;OPTIONS&lt;/code&gt; request to execute on the server. This method allows the client to determine the supported HTTP methods and other capabilites of an endpoint, without implying a resource action. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;OPTIONS&lt;/code&gt; リクエストをサーバーで実行する &lt;code&gt;Observable&lt;/code&gt; を構築します。このメソッドにより、クライアントは、リソースアクションを示唆することなく、サポートされているHTTPメソッドおよびエンドポイントの他の機能を決定できます。戻り値の型の詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="37b5ebdc23ba0671b7d2b5bfdd6f880fcc5a4543" translate="yes" xml:space="preserve">
          <source>Constructs an observable for a generic HTTP request that, when subscribed, fires the request through the chain of registered interceptors and on to the server.</source>
          <target state="translated">一般的な HTTP リクエスト用のオブザーバブルを構築します。</target>
        </trans-unit>
        <trans-unit id="8b1895b2612f30f28c01f0bc2082e2c07b7909c9" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;DELETE&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;DELETE&lt;/code&gt; 要求をサーバーで実行するオブザーバブルを構築します。戻り値の型の詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="4d806e1dcedcaa693d77cf017adc44b16c578330" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;GET&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブすると、構成された &lt;code&gt;GET&lt;/code&gt; リクエストをサーバーで実行するオブザーバブルを構築します。戻り値の型の詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="71f7794dd42ec39f50c82779f160807bf91746a3" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;HEAD&lt;/code&gt; request to execute on the server. The &lt;code&gt;HEAD&lt;/code&gt; method returns meta information about the resource without transferring the resource itself. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;HEAD&lt;/code&gt; リクエストをサーバーで実行するオブザーバブルを構築します。 &lt;code&gt;HEAD&lt;/code&gt; のメソッドは、リソース自体を転送することなく、リソースに関するメタ情報を返します。戻り値の型の詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="52ae6e3d51c8c3b5cc2d797d171f548c95c272af" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;PATCH&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;PATCH&lt;/code&gt; リクエストをサーバーで実行するオブザーバブルを構築します。戻り値の型の詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb1a1c8aa44cdebcb48a20947d39495c036898ea" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;POST&lt;/code&gt; request to execute on the server. The server responds with the location of the replaced resource. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;POST&lt;/code&gt; 要求をサーバーで実行するオブザーバブルを構築します。サーバーは、置き換えられたリソースの場所で応答します。戻り値の型の詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="b596a81fbfe7be8f37ef25519b1c7cfdd896b547" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;PUT&lt;/code&gt; request to execute on the server. The &lt;code&gt;PUT&lt;/code&gt; method replaces an existing resource with a new set of values. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブすると、構成された &lt;code&gt;PUT&lt;/code&gt; リクエストをサーバーで実行するオブザーバブルを構築します。 &lt;code&gt;PUT&lt;/code&gt; の方法は、新しい値のセットを持つ既存のリソースを置き換えます。戻り値の型の詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="b0f261e39825bcaba86eb199bd75bc95a965046f" translate="yes" xml:space="preserve">
          <source>Consuming controls in a grouping</source>
          <target state="translated">コントロールをグループ化して消費する</target>
        </trans-unit>
        <trans-unit id="5921ce9b794517579875e899237be92946964b92" translate="yes" xml:space="preserve">
          <source>Contains a re-usable animation. See &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">再利用可能なアニメーションが含まれています。 &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="c05469e3e34f048954fcfa8ac3ef87c944b1adfa" translate="yes" xml:space="preserve">
          <source>Contains a set of CSS property-value pairs into a named style. See &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">名前付きスタイルにCSSプロパティと値のペアのセットが含まれています。 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="9b9db0cfc91810c23685cf4af0b7fabd5592665d" translate="yes" xml:space="preserve">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">アニメーションステップのセットが含まれています。 &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="3cbb3cc83027338145bb5743b8785d8f12444f5a" translate="yes" xml:space="preserve">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">アニメーションステップのセットが含まれています。 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="619b3f5fbeae7c81c1f626c289ef61fe0f527a4b" translate="yes" xml:space="preserve">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">アニメーションステップのセットが含まれています。 &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; （）を参照してください</target>
        </trans-unit>
        <trans-unit id="4ac17a2d017d4488a0bb4df8f79eeed303020ae0" translate="yes" xml:space="preserve">
          <source>Contains all the &lt;a href=&quot;router#child-routing-component&quot;&gt;child routes&lt;/a&gt; activated under the current route.</source>
          <target state="translated">現在のルートでアクティブ化されたすべての&lt;a href=&quot;router#child-routing-component&quot;&gt;子ルート&lt;/a&gt;が含まれます。</target>
        </trans-unit>
        <trans-unit id="72bce409a5cb959edbb4fd8f46b11b9143f48e86" translate="yes" xml:space="preserve">
          <source>Contains all the &lt;a href=&quot;router-tutorial-toh#child-routing-component&quot;&gt;child routes&lt;/a&gt; activated under the current route.</source>
          <target state="translated">現在のルートでアクティブ化されているすべての&lt;a href=&quot;router-tutorial-toh#child-routing-component&quot;&gt;子ルート&lt;/a&gt;が含まれます。</target>
        </trans-unit>
        <trans-unit id="ad51011dfba99d373a5435f05a6da9109da527b8" translate="yes" xml:space="preserve">
          <source>Contains an animation step. See &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">アニメーションステップが含まれています。 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; （）を参照</target>
        </trans-unit>
        <trans-unit id="fadaa32099232d5dc3ba2a9025a9702c2d38ab0e" translate="yes" xml:space="preserve">
          <source>Contains an animation trigger. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーショントリガーが含まれています。 &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="15c25e46166e889e0b68feb40f1111fd91225ff1" translate="yes" xml:space="preserve">
          <source>Contains an animation trigger. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーショントリガーが含まれています。 &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="feb6f63e05ffd985d9055b7076f337ba4c06f62d" translate="yes" xml:space="preserve">
          <source>Contains animation parameters for a re-usable animation. See &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">再利用可能なアニメーションのアニメーションパラメータが含まれています。 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; （）を参照してください</target>
        </trans-unit>
        <trans-unit id="5ff4adbdda17b5bf178e5e3fb064038ba273ce45" translate="yes" xml:space="preserve">
          <source>Contains build configuration options for particular target environments. By default there is an unnamed standard development environment and a production (&quot;prod&quot;) environment. You can define additional target environment configurations.</source>
          <target state="translated">特定のターゲット環境用のビルド設定オプションが含まれています。デフォルトでは、名前のない標準の開発環境と本番環境(「prod」)があります。追加のターゲット環境設定を定義することができます。</target>
        </trans-unit>
        <trans-unit id="ab3ecf2264326072c36faae174b6f032dac8fbd3" translate="yes" xml:space="preserve">
          <source>Contains child-animation query data. See &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">子アニメーションのクエリデータが含まれています。 &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; （）を参照してください</target>
        </trans-unit>
        <trans-unit id="dc7da1e369d7c4399691bc55fea56917d1fe0acd" translate="yes" xml:space="preserve">
          <source>Contains data for staggering an animation sequence. See &lt;code&gt;&lt;a href=&quot;stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">アニメーションシーケンスをずらすためのデータが含まれています。 &lt;code&gt;&lt;a href=&quot;stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; （）を参照</target>
        </trans-unit>
        <trans-unit id="c761f47fc9cbfff9f17d454605795b06422010b6" translate="yes" xml:space="preserve">
          <source>Contains data to use in executing child animations returned by a query. See &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">クエリによって返された子アニメーションの実行に使用するデータが含まれています。 &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; （）を参照してください</target>
        </trans-unit>
        <trans-unit id="efceaeecd88f26fad7fc54f488fd3156edae1d13" translate="yes" xml:space="preserve">
          <source>Contains image and other asset files to be copied as-is when you build your application.</source>
          <target state="translated">アプリケーションを構築する際にそのままコピーされる画像やその他のアセットファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="451c833683655ca4c54bfa816ff7243e17177730" translate="yes" xml:space="preserve">
          <source>Contains the component files in which your application logic and data are defined. See details &lt;a href=&quot;file-structure#app-src&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">アプリケーションのロジックとデータが定義されているコンポーネントファイルが含まれています。詳細は&lt;a href=&quot;file-structure#app-src&quot;&gt;以下を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="6a3570af1ff9a0c0195985687f4d9fb49189b88a" translate="yes" xml:space="preserve">
          <source>Contains the first &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the list of this route's child routes.</source>
          <target state="translated">このルートの子ルートのリストの最初の &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を含みます。</target>
        </trans-unit>
        <trans-unit id="b2508437a48b549ece3f2976c0ec7536dde1129b" translate="yes" xml:space="preserve">
          <source>Contains the information about a route associated with a component loaded in an outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router state tree.</source>
          <target state="translated">特定の瞬間にアウトレットにロードされたコンポーネントに関連付けられたルートに関する情報を含みます。ActivatedRouteSnapshot は、ルータのステートツリーをたどるためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="8ba27a67003af1668cdba1d05e81fca07794cf13" translate="yes" xml:space="preserve">
          <source>Contains the version of Angular to use for the documentation. If not provided, the command uses your current Angular core version.</source>
          <target state="translated">ドキュメントに使用する Angular のバージョンを指定します。省略した場合は、現在の Angular コアのバージョンを使用します。</target>
        </trans-unit>
        <trans-unit id="6673d15b94e89eb12696401bb24c2f3bdd46cbde" translate="yes" xml:space="preserve">
          <source>Contains your library project's logic and data. Like an application project, a library project can contain components, services, modules, directives, and pipes.</source>
          <target state="translated">ライブラリプロジェクトのロジックとデータを格納します。アプリケーションプロジェクトと同様に、ライブラリプロジェクトにはコンポーネント、サービス、モジュール、ディレクティブ、パイプを含めることができます。</target>
        </trans-unit>
        <trans-unit id="237350064b8c3b0e11e70b93fd554306d2a4f39f" translate="yes" xml:space="preserve">
          <source>Content Security Policy (CSP) is a defense-in-depth technique to prevent XSS. To enable CSP, configure your web server to return an appropriate &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTP header. Read more about content security policy at &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;An Introduction to Content Security Policy&lt;/a&gt; on the HTML5Rocks website.</source>
          <target state="translated">コンテンツセキュリティポリシー（CSP）は、XSSを防ぐための多層防御手法です。CSPを有効にするには、適切な &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTPヘッダーを返すようにWebサーバーを構成します。コンテンツセキュリティポリシーの詳細については、HTML5Rocks Webサイトの「&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;コンテンツセキュリティポリシーの概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f6202692206dad79a1b14d6088be61b681526178" translate="yes" xml:space="preserve">
          <source>Content projection</source>
          <target state="translated">コンテンツの投影</target>
        </trans-unit>
        <trans-unit id="a019a50d07f41ea70df9c0821615ec4ff0dc202f" translate="yes" xml:space="preserve">
          <source>Content projection: yes</source>
          <target state="translated">コンテンツの投影:はい</target>
        </trans-unit>
        <trans-unit id="4e05a83d745ac98da7773c2108efde552ef95257" translate="yes" xml:space="preserve">
          <source>Content queries are set before the &lt;code&gt;ngAfterContentInit&lt;/code&gt; callback is called.</source>
          <target state="translated">コンテンツクエリは、 &lt;code&gt;ngAfterContentInit&lt;/code&gt; コールバックが呼び出される前に設定されます。</target>
        </trans-unit>
        <trans-unit id="132d57a8ba3715878400596fcd4e56d25812cdcb" translate="yes" xml:space="preserve">
          <source>Content queries are set before the &lt;code&gt;ngAfterContentInit&lt;/code&gt; callback is called. View queries are set before the &lt;code&gt;ngAfterViewInit&lt;/code&gt; callback is called.</source>
          <target state="translated">コンテンツクエリは、 &lt;code&gt;ngAfterContentInit&lt;/code&gt; コールバックが呼び出される前に設定されます。ビュークエリは、 &lt;code&gt;ngAfterViewInit&lt;/code&gt; コールバックが呼び出される前に設定されます。</target>
        </trans-unit>
        <trans-unit id="61218e768de2538cdbdc58d958fa9e9d9945325e" translate="yes" xml:space="preserve">
          <source>Content security</source>
          <target state="translated">コンテンツセキュリティ</target>
        </trans-unit>
        <trans-unit id="de5cbf363cbbce7cd02a96e382ca1a5a03a3865a" translate="yes" xml:space="preserve">
          <source>Content security policy</source>
          <target state="translated">コンテンツセキュリティポリシー</target>
        </trans-unit>
        <trans-unit id="0fe6c28565cc3c25e091112f9228a8f6d49d056a" translate="yes" xml:space="preserve">
          <source>ContentChild</source>
          <target state="translated">ContentChild</target>
        </trans-unit>
        <trans-unit id="80e33e2fb56f68033efbded7c57f7a1bcd8a17c6" translate="yes" xml:space="preserve">
          <source>ContentChildren</source>
          <target state="translated">ContentChildren</target>
        </trans-unit>
        <trans-unit id="30dfef912c135ce3653ecd0049ab1a0d09975808" translate="yes" xml:space="preserve">
          <source>Context-dependant translation forms for strings. Typically the standalone version is for the nominative form of the word, and the format version is used for the genitive case.</source>
          <target state="translated">文脈に依存する文字列の翻訳形式。通常、スタンドアロン版は単語の名詞形に使用され、フォーマット版は主格格に使用されます。</target>
        </trans-unit>
        <trans-unit id="e639aff42d79ce7d04ac679b47d7888105a27b9c" translate="yes" xml:space="preserve">
          <source>Continue working in &lt;code&gt;cart.service.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cart.service.ts&lt;/code&gt; で作業を続けます。</target>
        </trans-unit>
        <trans-unit id="98d30ae3f1bb7f9fb155a5bf681d817c8c98d5be" translate="yes" xml:space="preserve">
          <source>Continuing with the same example, suppose the components of a module truly require a private, custom &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同じ例を続けて、モジュールのコンポーネントが本当にプライベートなカスタム &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; を必要とするとします。</target>
        </trans-unit>
        <trans-unit id="0b994060af598c09bf8841e4b648fa4521474cd2" translate="yes" xml:space="preserve">
          <source>Contribute to Angular docs by creating &lt;a href=&quot;https://github.com/angular/angular/pulls&quot;&gt;pull requests&lt;/a&gt; on the Angular Github repository. See &lt;a href=&quot;https://github.com/angular/angular/blob/master/CONTRIBUTING.md&quot;&gt;Contributing to Angular&lt;/a&gt; for information about submission guidelines.</source>
          <target state="translated">Angular Githubリポジトリで&lt;a href=&quot;https://github.com/angular/angular/pulls&quot;&gt;プルリクエスト&lt;/a&gt;を作成して、Angularドキュメントに貢献してください。提出ガイドラインについては&lt;a href=&quot;https://github.com/angular/angular/blob/master/CONTRIBUTING.md&quot;&gt;、Angular&lt;/a&gt;への貢献をご覧ください。</target>
        </trans-unit>
        <trans-unit id="e3e8ab0a38fcaa679b313a73f41420a398c50b9e" translate="yes" xml:space="preserve">
          <source>Control navigation with UI elements</source>
          <target state="translated">UI要素でナビゲーションをコントロール</target>
        </trans-unit>
        <trans-unit id="43d038e7e3efd3548f310850f15533c4258c0fb1" translate="yes" xml:space="preserve">
          <source>Control status CSS classes</source>
          <target state="translated">制御ステータス CSS クラス</target>
        </trans-unit>
        <trans-unit id="47d0427e06aaf3d9ecbf897b0152f50f758d4f8b" translate="yes" xml:space="preserve">
          <source>Control whether the application can discard unsaved changes.</source>
          <target state="translated">アプリケーションが保存されていない変更を破棄できるかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="229ecc00162e04334fa4b4ccac6c92e3cb27952a" translate="yes" xml:space="preserve">
          <source>ControlContainer</source>
          <target state="translated">ControlContainer</target>
        </trans-unit>
        <trans-unit id="343d7cf91d2920daa7e4cf70ebe4169f5fbad163" translate="yes" xml:space="preserve">
          <source>ControlValueAccessor</source>
          <target state="translated">ControlValueAccessor</target>
        </trans-unit>
        <trans-unit id="c704de049fa7f49d7e27a189c2f7435244863da7" translate="yes" xml:space="preserve">
          <source>Controller function</source>
          <target state="translated">コントローラ機能</target>
        </trans-unit>
        <trans-unit id="eaf31001eb1cfd639a6e756df156289b71c30f3e" translate="yes" xml:space="preserve">
          <source>Controller lifecycle hook methods &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onInit&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;$onDestroy()&lt;/code&gt;, and &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onChanges&lt;/a&gt;()&lt;/code&gt; are another convenient feature that AngularJS 1.5 introduces. They all have nearly exact &lt;a href=&quot;lifecycle-hooks&quot;&gt;equivalents in Angular&lt;/a&gt;, so organizing component lifecycle logic around them will ease the eventual Angular upgrade process.</source>
          <target state="translated">コントローラのライフサイクルフックメソッド &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onInit&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;$onDestroy()&lt;/code&gt; 、および &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onChanges&lt;/a&gt;()&lt;/code&gt; は、AngularJS 1.5で導入されたもう1つの便利な機能です。それらはすべて&lt;a href=&quot;lifecycle-hooks&quot;&gt;、Angular&lt;/a&gt;でほぼ正確に同等のものを持っているので、それらの周りのコンポーネントライフサイクルロジックを整理すると、最終的なAngularアップグレードプロセスが容易になります。</target>
        </trans-unit>
        <trans-unit id="9c5d43d02cea12a9125adf5d02c96afa4adb2e6c" translate="yes" xml:space="preserve">
          <source>Controller lifecycle hook methods &lt;code&gt;$onInit()&lt;/code&gt;, &lt;code&gt;$onDestroy()&lt;/code&gt;, and &lt;code&gt;$onChanges()&lt;/code&gt; are another convenient feature that AngularJS 1.5 introduces. They all have nearly exact &lt;a href=&quot;lifecycle-hooks&quot;&gt;equivalents in Angular&lt;/a&gt;, so organizing component lifecycle logic around them will ease the eventual Angular upgrade process.</source>
          <target state="translated">コントローラーのライフサイクルフックメソッド &lt;code&gt;$onInit()&lt;/code&gt; 、 &lt;code&gt;$onDestroy()&lt;/code&gt; 、および &lt;code&gt;$onChanges()&lt;/code&gt; は、AngularJS1.5で導入されたもう1つの便利な機能です。それらはすべて&lt;a href=&quot;lifecycle-hooks&quot;&gt;Angular&lt;/a&gt;でほぼ正確に同等であるため、コンポーネントのライフサイクルロジックをそれらの周りに編成すると、最終的なAngularのアップグレードプロセスが容易になります。</target>
        </trans-unit>
        <trans-unit id="4a55898ba4d0c3606814215066c44fdde71f8efa" translate="yes" xml:space="preserve">
          <source>Controller registration</source>
          <target state="translated">コントローラ登録</target>
        </trans-unit>
        <trans-unit id="ea0568a8e25668de0a1132c1123479b554368dac" translate="yes" xml:space="preserve">
          <source>Controller to be injected into tests, that allows for mocking and flushing of requests.</source>
          <target state="translated">リクエストのモックやフラッシングを可能にするテストに注入するコントローラ。</target>
        </trans-unit>
        <trans-unit id="b0c2b035771a9eb356524d9a56b916b77b9f7291" translate="yes" xml:space="preserve">
          <source>Controlling the &lt;em&gt;Submit&lt;/em&gt; button's enabled state by binding to &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; validity.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; の有効性にバインドすることにより、&lt;em&gt;送信&lt;/em&gt;ボタンの有効状態を制御します。</target>
        </trans-unit>
        <trans-unit id="9bbd48944c8dffe9450a4a0623c225e2e9afd341" translate="yes" xml:space="preserve">
          <source>Controlling the &lt;strong&gt;Submit&lt;/strong&gt; button's enabled state by binding to &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; validity.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; の有効性にバインドすることにより、[&lt;strong&gt;送信&lt;/strong&gt;]ボタンの有効状態を制御します。</target>
        </trans-unit>
        <trans-unit id="a9a192682500970780576e3105c9ffd0bc6ec8ac" translate="yes" xml:space="preserve">
          <source>Controls the type check for linting.</source>
          <target state="translated">リンティングのタイプチェックを制御します。</target>
        </trans-unit>
        <trans-unit id="be77b92308e4d8d1f11ce842fbb550d826c3b78b" translate="yes" xml:space="preserve">
          <source>Convert that method to use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; as follows:</source>
          <target state="translated">次のように、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用するようにそのメソッドを変換します。</target>
        </trans-unit>
        <trans-unit id="00b2a18414b957028b4f77b2246b6dc3ecee7517" translate="yes" xml:space="preserve">
          <source>Convert the phone detail component template into Angular syntax as follows:</source>
          <target state="translated">電話詳細コンポーネントのテンプレートを以下のようにAngularの構文に変換します。</target>
        </trans-unit>
        <trans-unit id="461a5706ccc3e456140291e61b965e6d8ccf1d72" translate="yes" xml:space="preserve">
          <source>Converting existing code for async operations into observables</source>
          <target state="translated">非同期操作のための既存のコードを観測値に変換する</target>
        </trans-unit>
        <trans-unit id="078947d90aafa4b154394b9558fb454be3bdea6f" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; instance to a &lt;code&gt;&lt;a href=&quot;parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; インスタンスを &lt;code&gt;&lt;a href=&quot;parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="97d29d83b162042524ce3f03b85cb9262c204f0e" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;router/params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; instance to a &lt;code&gt;&lt;a href=&quot;router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; インスタンスを &lt;code&gt;&lt;a href=&quot;router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="9993dde6f70ec00b27b0a3b88374796590de2ce3" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; into a url</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; をURLに変換します</target>
        </trans-unit>
        <trans-unit id="21b6e9efdfda32b5cc193fd23ed3d6560b8ed92f" translate="yes" xml:space="preserve">
          <source>Converts a JavaScript object into a JSON string. This is useful for debugging.</source>
          <target state="translated">JavaScriptオブジェクトをJSON文字列に変換します。これはデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="adf77768d6a39db93cdef5c7aa5d05d8ae44ccfc" translate="yes" xml:space="preserve">
          <source>Converts a value into its JSON-format representation. Useful for debugging.</source>
          <target state="translated">値を JSON 形式の表現に変換します。デバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="5b89863d56f5fa5231bd9ba6831296dcbd916d71" translate="yes" xml:space="preserve">
          <source>Converts the string to lowercase.</source>
          <target state="translated">文字列を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="8a496e4dc738110449ee481338a94d58994d8e7f" translate="yes" xml:space="preserve">
          <source>Cookie name default is &lt;code&gt;XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">Cookie名のデフォルトは &lt;code&gt;XSRF-TOKEN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="decdd902fbecc98f23f54011ff264d9219f15f90" translate="yes" xml:space="preserve">
          <source>Copy &lt;em&gt;everything&lt;/em&gt; within the output folder (&lt;code&gt;dist/&lt;/code&gt; by default) to a folder on the server.</source>
          <target state="translated">出力フォルダー（デフォルトでは &lt;code&gt;dist/&lt;/code&gt; ）内の&lt;em&gt;すべてを&lt;/em&gt;サーバー上のフォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="08d2e5d7831fa576d3341a6cffbd4474c90d8e7b" translate="yes" xml:space="preserve">
          <source>Copy &lt;em&gt;everything&lt;/em&gt; within the output folder (&lt;code&gt;dist/project-name/&lt;/code&gt; by default) to a folder on the server.</source>
          <target state="translated">出力フォルダー（デフォルトでは &lt;code&gt;dist/project-name/&lt;/code&gt; ）内の&lt;em&gt;すべてを&lt;/em&gt;サーバー上のフォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="e96dfe6c055de09a0fe4ab8d1cd89274f9e0b328" translate="yes" xml:space="preserve">
          <source>Copy files from the starter Angular app into the folder containing the &lt;code&gt;.csproj&lt;/code&gt; file. Include the files in the Visual Studio project as follows:</source>
          <target state="translated">スターターAngularアプリから &lt;code&gt;.csproj&lt;/code&gt; ファイルを含むフォルダーにファイルをコピーします。次のように、Visual Studioプロジェクトにファイルを含めます。</target>
        </trans-unit>
        <trans-unit id="2e0c4cd2fc66e099007547c595d8fb3af64016d1" translate="yes" xml:space="preserve">
          <source>Copy the &lt;code&gt;hero-detail&lt;/code&gt; folder, the &lt;code&gt;hero.ts&lt;/code&gt;, &lt;code&gt;hero.service.ts&lt;/code&gt;, and &lt;code&gt;mock-heroes.ts&lt;/code&gt; files into the &lt;code&gt;heroes&lt;/code&gt; subfolder.</source>
          <target state="translated">&lt;code&gt;hero-detail&lt;/code&gt; フォルダー、 &lt;code&gt;hero.ts&lt;/code&gt; 、 &lt;code&gt;hero.service.ts&lt;/code&gt; 、および &lt;code&gt;mock-heroes.ts&lt;/code&gt; ファイルを &lt;code&gt;heroes&lt;/code&gt; サブフォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="8e12febf5873dca574759667733b5e5e66e6ba98" translate="yes" xml:space="preserve">
          <source>Copy the &lt;code&gt;message.service.ts&lt;/code&gt; into the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;message.service.ts&lt;/code&gt; を &lt;code&gt;src/app&lt;/code&gt; フォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="3635b30f85e60d9bbc40017116da1dd9ce46b94b" translate="yes" xml:space="preserve">
          <source>Copy the body and make your change in the copy.</source>
          <target state="translated">本文をコピーしてお釣りがくるようにしましょう。</target>
        </trans-unit>
        <trans-unit id="ccc6a23cf0c8732b658ce947fd5dc5af75d63b93" translate="yes" xml:space="preserve">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.css&lt;/code&gt; from the live example into the &lt;code&gt;hero-list.component.css&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;heroes/heroes.component.css&lt;/code&gt; の内容を実際の例から &lt;code&gt;hero-list.component.css&lt;/code&gt; ファイルにコピーします。</target>
        </trans-unit>
        <trans-unit id="9e21cb207ee7e3057d9095acd497da7ad01d4339" translate="yes" xml:space="preserve">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.html&lt;/code&gt; from the &lt;span name=&quot;toh-pt4&quot;&gt;&quot;Services&quot; tutorial&lt;/span&gt; into the &lt;code&gt;hero-list.component.html&lt;/code&gt; template.</source>
          <target state="translated">内容をコピー &lt;code&gt;heroes/heroes.component.html&lt;/code&gt; から&lt;span name=&quot;toh-pt4&quot;&gt;「サービス」チュートリアル&lt;/span&gt;への &lt;code&gt;hero-list.component.html&lt;/code&gt; テンプレート。</target>
        </trans-unit>
        <trans-unit id="006748a2c8575f2736445cd6e1cb632b2d1c3f84" translate="yes" xml:space="preserve">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.ts&lt;/code&gt; from the live example into the &lt;code&gt;hero-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;heroes/heroes.component.ts&lt;/code&gt; の内容を実際の例から &lt;code&gt;hero-list.component.ts&lt;/code&gt; ファイルにコピーします。</target>
        </trans-unit>
        <trans-unit id="64e69777d644990a712d9156ccfe6d33b49e0d98" translate="yes" xml:space="preserve">
          <source>Copy the files and folders from &lt;code&gt;app/heroes&lt;/code&gt; into the new &lt;code&gt;crisis-center&lt;/code&gt; folder.</source>
          <target state="translated">ファイルとフォルダーを &lt;code&gt;app/heroes&lt;/code&gt; から新しい &lt;code&gt;crisis-center&lt;/code&gt; フォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="ac16c8969e359f571689b91327c6dcf652187725" translate="yes" xml:space="preserve">
          <source>Copy this &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;, overriding its contents with the given parameter hash.</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; をコピーし、指定されたパラメータハッシュでコンテンツを上書きします。</target>
        </trans-unit>
        <trans-unit id="a1d8ecfd782a2f39dac14d8d6b51eb1f52ca13f6" translate="yes" xml:space="preserve">
          <source>Core AngularJS services Importing this &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; will add providers for the core &lt;a href=&quot;https://docs.angularjs.org/api/ng/service&quot;&gt;AngularJS services&lt;/a&gt; to the root injector.</source>
          <target state="translated">コアAngularJSサービスこの &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; をインポートすると、コア&lt;a href=&quot;https://docs.angularjs.org/api/ng/service&quot;&gt;AngularJSサービスの&lt;/a&gt;プロバイダーがルートインジェクターに追加されます。</target>
        </trans-unit>
        <trans-unit id="c39220a429cf1bece1b687538bd0e0fc0b34e712" translate="yes" xml:space="preserve">
          <source>Correspondingly, when you upgrade an AngularJS component and use it from Angular, all the bindings defined for the component directive's &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;bindToController&lt;/code&gt;) will be hooked into Angular change detection. They will be treated as regular Angular inputs. Their values will be written to the upgraded component's scope (or controller) when they change.</source>
          <target state="translated">同様に、AngularJSコンポーネントをアップグレードしてAngularから使用すると、コンポーネントディレクティブの &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; （または &lt;code&gt;bindToController&lt;/code&gt; ）に定義されているすべてのバインディングがAngular変更検出にフックされます。それらは通常のAngular入力として扱われます。それらの値が変更されると、アップグレードされたコンポーネントのスコープ（またはコントローラー）に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f98a3c8b7cf8b6b33e129ceb376d8bf2cdd693a7" translate="yes" xml:space="preserve">
          <source>Correspondingly, when you upgrade an AngularJS component and use it from Angular, all the bindings defined for the component directive's &lt;code&gt;scope&lt;/code&gt; (or &lt;code&gt;bindToController&lt;/code&gt;) will be hooked into Angular change detection. They will be treated as regular Angular inputs. Their values will be written to the upgraded component's scope (or controller) when they change.</source>
          <target state="translated">同様に、AngularJSコンポーネントをアップグレードしてAngularから使用すると、コンポーネントディレクティブの &lt;code&gt;scope&lt;/code&gt; （または &lt;code&gt;bindToController&lt;/code&gt; ）に定義されているすべてのバインディングがAngular変更検出にフックされます。それらは通常のAngular入力として扱われます。それらの値は、変更されると、アップグレードされたコンポーネントのスコープ（またはコントローラー）に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="eee21c7732ceea657ba582876098e48649d633db" translate="yes" xml:space="preserve">
          <source>Could not resolve type</source>
          <target state="translated">タイプを解決できませんでした</target>
        </trans-unit>
        <trans-unit id="f4018045cfb458b2734d2b09cf762c2567878c41" translate="yes" xml:space="preserve">
          <source>Counter</source>
          <target state="translated">Counter</target>
        </trans-unit>
        <trans-unit id="b7570836d6154e29e2f406e09548419037760602" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;HeroSearchComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroSearchComponent&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="da63132d4553a2504164f54ad55c134cc4edc6ad" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;MessagesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MessagesComponent&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="a237e7a56b1d9ab6284640b040123f7b8ddc3ad9" translate="yes" xml:space="preserve">
          <source>Create Angular &lt;a href=&quot;guide/glossary#component&quot;&gt;components&lt;/a&gt; to display hero details and show an array of heroes.</source>
          <target state="translated">Angular&lt;a href=&quot;guide/glossary#component&quot;&gt;コンポーネント&lt;/a&gt;を作成して、ヒーローの詳細を表示し、ヒーローの配列を表示します。</target>
        </trans-unit>
        <trans-unit id="9376163183db8e23239d334e0ae6a7ea6411dd85" translate="yes" xml:space="preserve">
          <source>Create Angular components to display hero details and show an array of heroes.</source>
          <target state="translated">Angularコンポーネントを作成して、ヒーローの詳細を表示したり、ヒーローの配列を表示したりします。</target>
        </trans-unit>
        <trans-unit id="5c5fe036d57773794e72a8d112d9907ead0619d8" translate="yes" xml:space="preserve">
          <source>Create a &quot;top component&quot; that acts as the root for all of the module's components. Add the custom &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; provider to the top component's &lt;code&gt;providers&lt;/code&gt; list rather than the module's &lt;code&gt;providers&lt;/code&gt;. Recall that Angular creates a child injector for each component instance and populates the injector with the component's own providers.</source>
          <target state="translated">モジュールのすべてのコンポーネントのルートとして機能する「トップコンポーネント」を作成します。カスタム &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; プロバイダーを、モジュールの &lt;code&gt;providers&lt;/code&gt; ではなく、最上位のコンポーネントの &lt;code&gt;providers&lt;/code&gt; リストに追加します。Angularが各コンポーネントインスタンスの子インジェクターを作成し、インジェクターにコンポーネント独自のプロバイダーを設定することを思い出してください。</target>
        </trans-unit>
        <trans-unit id="99ca8b6335705bfdaa852233ee78f1fbc1f29b4b" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="0b0911b2990c85edee45f304d359a364bc6364bd" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="ca5222191cefbcbf34292d4ccac4f8d3099452e0" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;platform-browser/statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that can be used to store value of type T with &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で T型の値を格納するために使用できる &lt;code&gt;&lt;a href=&quot;platform-browser/statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="da12bfbf8cba36936cab8d5080627812d3bc5b9a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that can be used to store value of type T with &lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で T型の値を格納するために使用できる &lt;code&gt;&lt;a href=&quot;statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="33824bbdfa9db4cd33cb2cc28044b8bb7bd994f1" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;Hero&lt;/code&gt; class in its own file in the &lt;code&gt;src/app&lt;/code&gt; folder. Give it &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;src/app&lt;/code&gt; フォルダーの独自のファイルに &lt;code&gt;Hero&lt;/code&gt; クラスを作成します。それ付け &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; のプロパティを。</target>
        </trans-unit>
        <trans-unit id="c71fa3484d2440247f91b2f9a2f81864168175f6" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;Hero&lt;/code&gt; interface in its own file in the &lt;code&gt;src/app&lt;/code&gt; folder. Give it &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;src/app&lt;/code&gt; フォルダー内の独自のファイルに &lt;code&gt;Hero&lt;/code&gt; インターフェイスを作成します。それ付け &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; のプロパティを。</target>
        </trans-unit>
        <trans-unit id="1c71c09584ab2fa05b7a2f1d605f961915809721" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;HeroSearchComponent&lt;/code&gt; with the CLI.</source>
          <target state="translated">CLIを &lt;code&gt;HeroSearchComponent&lt;/code&gt; してHeroSearchComponentを作成します。</target>
        </trans-unit>
        <trans-unit id="6845c0f15a7f2d03e5f9f62fa58801361ed5c80a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;HeroesModule&lt;/code&gt; with routing in the heroes folder and register it with the root &lt;code&gt;AppModule&lt;/code&gt;. This is where you'll be implementing the &lt;em&gt;hero management&lt;/em&gt;.</source>
          <target state="translated">heroesフォルダーにルーティングされた &lt;code&gt;HeroesModule&lt;/code&gt; を作成し、ルート &lt;code&gt;AppModule&lt;/code&gt; に登録します。これは、&lt;em&gt;ヒーロー管理を&lt;/em&gt;実装する場所です。</target>
        </trans-unit>
        <trans-unit id="17210801dfaf29924a75d1ab920c332968468da3" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;crisis-center&lt;/code&gt; subfolder in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;src/app&lt;/code&gt; フォルダーに &lt;code&gt;crisis-center&lt;/code&gt; サブフォルダーを作成します。</target>
        </trans-unit>
        <trans-unit id="8d1365a808082b38561ee0f9ea6407a8ea2c7915" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;files/&lt;/code&gt; folder inside the &lt;code&gt;schematics/my-service/&lt;/code&gt; folder.</source>
          <target state="translated">Schematics &lt;code&gt;schematics/my-service/&lt;/code&gt; フォルダー内に &lt;code&gt;files/&lt;/code&gt; フォルダーを作成します。</target>
        </trans-unit>
        <trans-unit id="03a8b37194cd9a6ed4fef9b8e6ffb334c714f01f" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;schema.json&lt;/code&gt; file and define the available options for the schematic.</source>
          <target state="translated">&lt;code&gt;schema.json&lt;/code&gt; ファイルを作成し、回路図で使用可能なオプションを定義します。</target>
        </trans-unit>
        <trans-unit id="7653907d1390a7958748cfad0de2f7e15929597c" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;schema.ts&lt;/code&gt; file and define an interface that stores the values of the options defined in the &lt;code&gt;schema.json&lt;/code&gt; file.</source>
          <target state="translated">作成 &lt;code&gt;schema.ts&lt;/code&gt; ファイルとで定義されたオプションの格納値は、そのインタフェース定義 &lt;code&gt;schema.json&lt;/code&gt; のファイルを。</target>
        </trans-unit>
        <trans-unit id="5fd7bd2de7171d715f1f538a385409bbedf60fd2" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;typings.d.ts&lt;/code&gt; file in your &lt;code&gt;src/&lt;/code&gt; folder. This file is automatically included as global type definition.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; フォルダーに &lt;code&gt;typings.d.ts&lt;/code&gt; ファイルを作成します。このファイルは、グローバルタイプ定義として自動的に含まれます。</target>
        </trans-unit>
        <trans-unit id="ff616cbff238ee78c83cb4c2d5667f04727c2c70" translate="yes" xml:space="preserve">
          <source>Create a Hero class</source>
          <target state="translated">ヒーロークラスを作る</target>
        </trans-unit>
        <trans-unit id="90d9e64936dd180075da5a9b85d15d10b7b99c5c" translate="yes" xml:space="preserve">
          <source>Create a Hero interface</source>
          <target state="translated">ヒーローインターフェイスを作成する</target>
        </trans-unit>
        <trans-unit id="88e364d7a8bde1e2a332dddb2e36ca43d41d7c61" translate="yes" xml:space="preserve">
          <source>Create a cart component and configure routing to the new component. At this point, the cart view has only default text.</source>
          <target state="translated">カートコンポーネントを作成し、新しいコンポーネントへのルーティングを設定します。この時点では、カートビューにはデフォルトのテキストしかありません。</target>
        </trans-unit>
        <trans-unit id="de7fd1d13091dc87fa2bc6cd7f30b4c62da30c2a" translate="yes" xml:space="preserve">
          <source>Create a cart component and set up routing to the new component. At this point, the cart page will only have default text.</source>
          <target state="translated">カートコンポーネントを作成し、新しいコンポーネントへのルーティングを設定します。この時点では、カートページにはデフォルトのテキストのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="3d3c0796b0b271bbd7027cd5fd74cea722c3bd61" translate="yes" xml:space="preserve">
          <source>Create a component to render AngularJS content</source>
          <target state="translated">AngularJSのコンテンツをレンダリングするためのコンポーネントを作成する</target>
        </trans-unit>
        <trans-unit id="a24c9a01b8de0c4c868f95de7d4395c98a8985f4" translate="yes" xml:space="preserve">
          <source>Create a component using the new keyword.</source>
          <target state="translated">新しいキーワードを使ってコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="e6beab5fb3f1e2fea8b27429def6db8a455e84c2" translate="yes" xml:space="preserve">
          <source>Create a component, &lt;em&gt;crisis-list&lt;/em&gt;.</source>
          <target state="translated">コンポーネント、&lt;em&gt;危機リストを&lt;/em&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="dbb341a6339ef12f828a7d5f6c43fd81df5c13d1" translate="yes" xml:space="preserve">
          <source>Create a custom &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function for AngularJS-specific URLs and configure the Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; with the custom matcher for AngularJS routes.</source>
          <target state="translated">AngularJS固有のURLのカスタム &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 関数を作成し、AngularJSルートのカスタムマッチャーを使用してAngular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="0582fb064b3a9d662a98a234ccf610a3ebf8b0dc" translate="yes" xml:space="preserve">
          <source>Create a custom &lt;code&gt;matcher&lt;/code&gt; function for AngularJS-specific URLs and configure the Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; with the custom matcher for AngularJS routes.</source>
          <target state="translated">AngularJS固有のURLのカスタム &lt;code&gt;matcher&lt;/code&gt; 関数を作成し、AngularJSルートのカスタムマッチャーを使用してAngular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="2c1d239117b5625a496eeda64fd89dda33330350" translate="yes" xml:space="preserve">
          <source>Create a dynamic form template</source>
          <target state="translated">ダイナミックフォームのテンプレートを作成する</target>
        </trans-unit>
        <trans-unit id="c523f2d6f0ef5f2efd18e3076a9038458c296a55" translate="yes" xml:space="preserve">
          <source>Create a factory function that returns that instance.</source>
          <target state="translated">そのインスタンスを返すファクトリ関数を作成します。</target>
        </trans-unit>
        <trans-unit id="d060ba91e19005cbc11c95003a16758638e663c9" translate="yes" xml:space="preserve">
          <source>Create a feature component</source>
          <target state="translated">フィーチャーコンポーネントの作成</target>
        </trans-unit>
        <trans-unit id="7f2bb69920f627470e948635b846ad2f55548877" translate="yes" xml:space="preserve">
          <source>Create a feature module with routing</source>
          <target state="translated">ルーティング機能を持つフィーチャモジュールを作成する</target>
        </trans-unit>
        <trans-unit id="3992d8892162bfa0ed8361ad16356d6012ed972d" translate="yes" xml:space="preserve">
          <source>Create a file &lt;code&gt;proxy.conf.json&lt;/code&gt; in your project's &lt;code&gt;src/&lt;/code&gt; folder.</source>
          <target state="translated">プロジェクトの &lt;code&gt;src/&lt;/code&gt; フォルダーにファイル &lt;code&gt;proxy.conf.json&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="41ffd1d35c5f02ae42ec30c59609ce9da41df565" translate="yes" xml:space="preserve">
          <source>Create a file called &lt;code&gt;mock-heroes.ts&lt;/code&gt; in the &lt;code&gt;src/app/&lt;/code&gt; folder. Define a &lt;code&gt;HEROES&lt;/code&gt; constant as an array of ten heroes and export it. The file should look like this.</source>
          <target state="translated">ファイルを作成 &lt;code&gt;mock-heroes.ts&lt;/code&gt; 中 &lt;code&gt;src/app/&lt;/code&gt; フォルダを。 &lt;code&gt;HEROES&lt;/code&gt; 定数を10人のヒーローの配列として定義し、エクスポートします。ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="69732bba9870de84d675267cbe1cf4d45f861919" translate="yes" xml:space="preserve">
          <source>Create a file named &lt;code&gt;__name@dasherize__.service.ts.template&lt;/code&gt; that defines a template you can use for generating files. This template will generate a service that already has Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; injected into its constructor.</source>
          <target state="translated">ファイルの生成に使用できるテンプレートを定義する &lt;code&gt;__name@dasherize__.service.ts.template&lt;/code&gt; という名前のファイルを作成します。このテンプレートは、Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; がコンストラクターに挿入されたサービスを生成します。</target>
        </trans-unit>
        <trans-unit id="38e4fd9e90f6b4cd021df9e4dfcbb8d302140ea2" translate="yes" xml:space="preserve">
          <source>Create a file named &lt;code&gt;builders.json&lt;/code&gt; file that looks like this.</source>
          <target state="translated">次のような &lt;code&gt;builders.json&lt;/code&gt; という名前のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="f2a3216de4a1d482ff94f06e3f6620f72a039129" translate="yes" xml:space="preserve">
          <source>Create a form array with array-level validators</source>
          <target state="translated">配列レベルのバリデータでフォーム配列を作成する</target>
        </trans-unit>
        <trans-unit id="b96a11ccc1a7f7f1033388de141e67f8a7692bf0" translate="yes" xml:space="preserve">
          <source>Create a form component</source>
          <target state="translated">フォームコンポーネントの作成</target>
        </trans-unit>
        <trans-unit id="8c779731b129ec9a1f0f54ba194f30d8bf6d9a3b" translate="yes" xml:space="preserve">
          <source>Create a form group with 2 controls</source>
          <target state="translated">2つのコントロールを持つフォームグループを作成</target>
        </trans-unit>
        <trans-unit id="a31a843ccda278265868ae591babbbbffa0aaec9" translate="yes" xml:space="preserve">
          <source>Create a form group with a group-level validator</source>
          <target state="translated">グループレベルのバリデータでフォームグループを作成する</target>
        </trans-unit>
        <trans-unit id="cee67103752a38e6254f5285489718e2ee8acf38" translate="yes" xml:space="preserve">
          <source>Create a form object model</source>
          <target state="translated">フォームオブジェクトモデルの作成</target>
        </trans-unit>
        <trans-unit id="8349529ff67aeb3fe069d4c4eaa3d215f2841f84" translate="yes" xml:space="preserve">
          <source>Create a function to retrieve the heroes from the service.</source>
          <target state="translated">サービスからヒーローを取得する機能を作成します。</target>
        </trans-unit>
        <trans-unit id="3aa54a2c7f2ebf4339e64d173a825d3b05732eab" translate="yes" xml:space="preserve">
          <source>Create a localization folder</source>
          <target state="translated">ローカライズフォルダの作成</target>
        </trans-unit>
        <trans-unit id="3f0db9d4cc9da04cf671dfacddb2b498fecbf832" translate="yes" xml:space="preserve">
          <source>Create a method to retrieve the heroes from the service.</source>
          <target state="translated">サービスからヒーローを取得するためのメソッドを作成します。</target>
        </trans-unit>
        <trans-unit id="1816716693a28e0e9f1df947d9f9bd94d9fbbd1e" translate="yes" xml:space="preserve">
          <source>Create a nested group.</source>
          <target state="translated">入れ子になったグループを作成します。</target>
        </trans-unit>
        <trans-unit id="a64438b98d4f21e3d55b771cbac8f715217ae08d" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; with the given parameters.</source>
          <target state="translated">指定されたパラメーターで新しい &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="78efc26fbc9687ec57888c9bb37b7f4b34c26875" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; instance. You should not normally need to do this. Instead you should derive a new class from this one and call the super constructor from the base class.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。通常、これを行う必要はありません。代わりに、このクラスから新しいクラスを派生させ、基本クラスからスーパーコンストラクターを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="9a46de9f6729bf067c43047c43ae56c3aae4a7e7" translate="yes" xml:space="preserve">
          <source>Create a new Angular CLI workspace using the &lt;a href=&quot;https://angular.io/start/cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;コマンドを使用して、新しいAngular CLIワークスペースを作成します。</target>
        </trans-unit>
        <trans-unit id="0fa24177e47b7484c8cf94f80ac594d7c13475ae" translate="yes" xml:space="preserve">
          <source>Create a new Angular project, &lt;em&gt;angular-router-sample&lt;/em&gt;.</source>
          <target state="translated">新しいAngularプロジェクト&lt;em&gt;angular-router-sampleを&lt;/em&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="380217cd2bc441b341d7dabe2374197b8ed3e719" translate="yes" xml:space="preserve">
          <source>Create a new Injector which is configure using &lt;code&gt;&lt;a href=&quot;staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt; を使用して設定される新しいインジェクターを作成します。</target>
        </trans-unit>
        <trans-unit id="2433763ae8ce7e54147d009778d8b9c941a63a34" translate="yes" xml:space="preserve">
          <source>Create a new file, &lt;code&gt;&amp;lt;component-name&amp;gt;.component.ts&lt;/code&gt;.</source>
          <target state="translated">新しいファイル &lt;code&gt;&amp;lt;component-name&amp;gt;.component.ts&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="e7b9c46559c7dd10c68eb2430214ec17d7126c85" translate="yes" xml:space="preserve">
          <source>Create a new file, &lt;code&gt;tsconfig-es5.spec.json&lt;/code&gt; next to &lt;code&gt;tsconfig.spec.json&lt;/code&gt; with the following content.</source>
          <target state="translated">&lt;code&gt;tsconfig-es5.spec.json&lt;/code&gt; 横に新しいファイルtsconfig-es5.spec.jsonを &lt;code&gt;tsconfig.spec.json&lt;/code&gt; し、次の内容を含めます。</target>
        </trans-unit>
        <trans-unit id="69ee4f0cae672b78fd7e5b509ff749d4be5d8a16" translate="yes" xml:space="preserve">
          <source>Create a new product alerts component.</source>
          <target state="translated">新しい製品アラートコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="325cf797263cfffdce479b5e173823121f9d4d73" translate="yes" xml:space="preserve">
          <source>Create a new project</source>
          <target state="translated">新規プロジェクトの作成</target>
        </trans-unit>
        <trans-unit id="5248aa9278aa812df34236f34bfb64a599867920" translate="yes" xml:space="preserve">
          <source>Create a new project named &lt;code&gt;angular-forms&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;angular-forms&lt;/code&gt; という名前の新しいプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="1fc5f1c2569e6cb934fdcbd8926b0aea6127a7e7" translate="yes" xml:space="preserve">
          <source>Create a new project, giving it any name you like.</source>
          <target state="translated">新しいプロジェクトを作成し、好きな名前を付けてください。</target>
        </trans-unit>
        <trans-unit id="4b6f7cb2d362348a78391179b8ff8adbe19ae679" translate="yes" xml:space="preserve">
          <source>Create a new workspace and an initial application</source>
          <target state="translated">新しいワークスペースと初期アプリケーションの作成</target>
        </trans-unit>
        <trans-unit id="7afd136a424f288c44a26af64d8ab3faed2ff799" translate="yes" xml:space="preserve">
          <source>Create a new workspace and initial app project.</source>
          <target state="translated">新しいワークスペースを作成し、アプリの初期プロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="ae1fe121a8217214148d3bcf1b9368c81c062807" translate="yes" xml:space="preserve">
          <source>Create a property in the component class named &lt;code&gt;profileForm&lt;/code&gt; and set the property to a new form group instance. To initialize the form group, provide the constructor with an object of named keys mapped to their control.</source>
          <target state="translated">&lt;code&gt;profileForm&lt;/code&gt; という名前のコンポーネントクラスにプロパティを作成し、そのプロパティを新しいフォームグループインスタンスに設定します。フォームグループを初期化するには、コントロールにマップされた名前付きキーのオブジェクトをコンストラクターに提供します。</target>
        </trans-unit>
        <trans-unit id="180b592c2106157a0b6b4eb927928556a62222ba" translate="yes" xml:space="preserve">
          <source>Create a resolver service. With the CLI, the command to generate a service is as follows:</source>
          <target state="translated">リゾルバサービスを作成します。CLIでは、サービスを生成するコマンドは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1ccecb770b3d91f132f45bd90c77041c30154648" translate="yes" xml:space="preserve">
          <source>Create a routable component for AngularJS content</source>
          <target state="translated">AngularJSコンテンツ用のルーティングコンポーネントを作成する</target>
        </trans-unit>
        <trans-unit id="cd09030c868dad90898d157afb4427134b5182bb" translate="yes" xml:space="preserve">
          <source>Create a sample application</source>
          <target state="translated">サンプルアプリケーションの作成</target>
        </trans-unit>
        <trans-unit id="e7203610c81518bdc768377e4d28c0601db8d80f" translate="yes" xml:space="preserve">
          <source>Create a second component, &lt;em&gt;heroes-list&lt;/em&gt;.</source>
          <target state="translated">2番目のコンポーネントである&lt;em&gt;heroes-listを&lt;/em&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="2ab81b1e43badd75fe52b8b9c3a55f5ea352cea1" translate="yes" xml:space="preserve">
          <source>Create a service for your guard:</source>
          <target state="translated">ガードのためのサービスを作りましょう。</target>
        </trans-unit>
        <trans-unit id="f3b4c2964b7e843bca61619451307961ed2ded49" translate="yes" xml:space="preserve">
          <source>Create a service that lazy loads and bootstraps your AngularJS app.</source>
          <target state="translated">AngularJSアプリをレイジーロードしてブートストラップするサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="80bdfa1b1cdec9562cbda972de4cad92bbe26fc5" translate="yes" xml:space="preserve">
          <source>Create a service to lazy load AngularJS</source>
          <target state="translated">AngularJSを遅延ロードするサービスを作成する</target>
        </trans-unit>
        <trans-unit id="1ff78329362e484e28a5256a04a1ae6f096125d2" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;guide/glossary#service&quot;&gt;service&lt;/a&gt; to assemble the heroes.</source>
          <target state="translated">ヒーローを集めるための共有&lt;a href=&quot;guide/glossary#service&quot;&gt;サービス&lt;/a&gt;を作成します。</target>
        </trans-unit>
        <trans-unit id="289c9e1ad69aa92c9ace5d2ee7c3bdfd5e926d60" translate="yes" xml:space="preserve">
          <source>Create a shared service to assemble the heroes.</source>
          <target state="translated">英雄を組み立てるための共有サービスを作成します。</target>
        </trans-unit>
        <trans-unit id="2351297a3e386ea193139a04f7279b11dad0025e" translate="yes" xml:space="preserve">
          <source>Create a static method &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; on the module.</source>
          <target state="translated">モジュールに静的メソッド &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="b15d5a82209e08a1113ef84ceefbb11087a78b1f" translate="yes" xml:space="preserve">
          <source>Create a static method &lt;code&gt;forRoot()&lt;/code&gt; on the module.</source>
          <target state="translated">モジュールに静的メソッド &lt;code&gt;forRoot()&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="8a04964f1c5e0d871805d925f133724b75e3819c" translate="yes" xml:space="preserve">
          <source>Create a template with the initial form layout.</source>
          <target state="translated">初期フォームのレイアウトでテンプレートを作成します。</target>
        </trans-unit>
        <trans-unit id="7f4bff38deca97f4d35e1b195c3d630e1eea8ec8" translate="yes" xml:space="preserve">
          <source>Create a translation file for each language</source>
          <target state="translated">各言語の翻訳ファイルを作成</target>
        </trans-unit>
        <trans-unit id="6fcd448777d61181ebde74f3b1dbf8d75ef3f0b6" translate="yes" xml:space="preserve">
          <source>Create a translation file: Use the Angular CLI &lt;code&gt;xi18n&lt;/code&gt; command to extract the marked text into an industry-standard translation source file.</source>
          <target state="translated">翻訳ファイルを作成します &lt;code&gt;xi18n&lt;/code&gt; コマンドを使用して、マークされたテキストを業界標準の翻訳ソースファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="5baf3cac85465507f34ecd0fca31009f61bda43b" translate="yes" xml:space="preserve">
          <source>Create a translation source file</source>
          <target state="translated">翻訳ソースファイルの作成</target>
        </trans-unit>
        <trans-unit id="cca092e39485f66b5dc958b958918d82c5766291" translate="yes" xml:space="preserve">
          <source>Create a workspace and initial application</source>
          <target state="translated">ワークスペースの作成と初期アプリケーション</target>
        </trans-unit>
        <trans-unit id="a9fe13715c442caee7511e2ad6d5f07636523a48" translate="yes" xml:space="preserve">
          <source>Create an &lt;a href=&quot;deployment#configuring-serve-for-es5&quot;&gt;ES5 serve configuration&lt;/a&gt; as explained above, and configuration an ES5 configuration for the E2E target.</source>
          <target state="translated">上記の説明に従って&lt;a href=&quot;deployment#configuring-serve-for-es5&quot;&gt;ES5サーバー構成&lt;/a&gt;を作成し、E2EターゲットのES5構成を構成します。</target>
        </trans-unit>
        <trans-unit id="028aa78227ee6a6c789b49247eb2726d759154ab" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;AppRouting&lt;/code&gt; module in the &lt;code&gt;/app&lt;/code&gt; folder to contain the routing configuration.</source>
          <target state="translated">&lt;code&gt;/app&lt;/code&gt; フォルダーに &lt;code&gt;AppRouting&lt;/code&gt; モジュールを作成して、ルーティング構成を含めます。</target>
        </trans-unit>
        <trans-unit id="8edaa8e3b39128a8ffffbd2583a464c774b78161" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;addNewItem()&lt;/code&gt; method in the same component class:</source>
          <target state="translated">同じコンポーネントクラスに &lt;code&gt;addNewItem()&lt;/code&gt; メソッドを作成します。</target>
        </trans-unit>
        <trans-unit id="f9d287260e0fdc0dcca4bec41b7d0e73c535afaf" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;animations.ts&lt;/code&gt; file in the root &lt;code&gt;src/app/&lt;/code&gt; folder. The contents look like this:</source>
          <target state="translated">ルートの &lt;code&gt;src/app/&lt;/code&gt; フォルダーに &lt;code&gt;animations.ts&lt;/code&gt; ファイルを作成します。内容は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c67749e64345ba6a39c2b7172ee0a301001529e3" translate="yes" xml:space="preserve">
          <source>Create an Angular project. If you don't have a project, you can create one using &lt;code&gt;ng new &amp;lt;project-name&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; is the name of your Angular application.</source>
          <target state="translated">Angularプロジェクトを作成します。プロジェクトがない場合は、 &lt;code&gt;ng new &amp;lt;project-name&amp;gt;&lt;/code&gt; を使用してプロジェクトを作成できます。ここで、 &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; はAngularアプリケーションの名前です。</target>
        </trans-unit>
        <trans-unit id="dbcc1e534c39c1397544fc3c8c200114e0c5c6d1" translate="yes" xml:space="preserve">
          <source>Create an adaptable user interface for all of your target locales that takes into consideration the differences in spacing for different languages. For details, see &lt;a href=&quot;https://marketfinder.thinkwithgoogle.com/intl/en_us/guide/how-to-approach-i18n/#overview&quot;&gt;How to approach internationalization&lt;/a&gt;.</source>
          <target state="translated">異なる言語の間隔の違いを考慮して、すべてのターゲットロケールに適応可能なユーザーインターフェイスを作成します。詳細については、&lt;a href=&quot;https://marketfinder.thinkwithgoogle.com/intl/en_us/guide/how-to-approach-i18n/#overview&quot;&gt;国際化への取り組み方を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c771f4fa8c1303411b2989c7ec0ecfd845266d4e" translate="yes" xml:space="preserve">
          <source>Create an array of form controls</source>
          <target state="translated">フォームコントロールの配列を作成する</target>
        </trans-unit>
        <trans-unit id="a120814121d988e4c710394df55d52945567c179" translate="yes" xml:space="preserve">
          <source>Create an initial HTML form template</source>
          <target state="translated">初期HTMLフォームのテンプレートを作成する</target>
        </trans-unit>
        <trans-unit id="c0e14e01f44a8e4033e50fdca7caa0554a8c69c1" translate="yes" xml:space="preserve">
          <source>Create an injectable service class</source>
          <target state="translated">注入可能なサービスクラスを作成する</target>
        </trans-unit>
        <trans-unit id="44a67433070c190604f306f05455b8778943324e" translate="yes" xml:space="preserve">
          <source>Create an injection token for an instance of the ambient type.</source>
          <target state="translated">アンビエントタイプのインスタンスのインジェクショントークンを作成します。</target>
        </trans-unit>
        <trans-unit id="6d3f0fe233aa778aa76ea5dae93999776ae70d48" translate="yes" xml:space="preserve">
          <source>Create an instance by invoking the &lt;code&gt;new&lt;/code&gt; operator and supplying additional arguments. This form is a short form of &lt;code&gt;&lt;a href=&quot;typeprovider&quot;&gt;TypeProvider&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 演算子を呼び出し、追加の引数を指定して、インスタンスを作成します。このフォームは &lt;code&gt;&lt;a href=&quot;typeprovider&quot;&gt;TypeProvider&lt;/a&gt;&lt;/code&gt; の短縮形です。</target>
        </trans-unit>
        <trans-unit id="64b222ce3ce34cbe2c058a214917ed1a3f5416dc" translate="yes" xml:space="preserve">
          <source>Create an instance of a component of type &lt;code&gt;T&lt;/code&gt; based on the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration. After calling &lt;code&gt;compileComponent&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成に基づいて、タイプ &lt;code&gt;T&lt;/code&gt; のコンポーネントのインスタンスを作成します。 &lt;code&gt;compileComponent&lt;/code&gt; を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成は現在の仕様の期間中フリーズされます。</target>
        </trans-unit>
        <trans-unit id="ad92015ad7f4f4f784b8261d606ff16ad76df686" translate="yes" xml:space="preserve">
          <source>Create and register an injectable service</source>
          <target state="translated">注入可能なサービスを作成して登録する</target>
        </trans-unit>
        <trans-unit id="a2cfd9c584dadfe8ded7f9bfc6f0127dc27a3cb7" translate="yes" xml:space="preserve">
          <source>Create corresponding translation providers for the JIT compiler.</source>
          <target state="translated">JITコンパイラに対応する翻訳プロバイダを作成します。</target>
        </trans-unit>
        <trans-unit id="8a3164dac77b2e22758535a82bffe82b7e2af243" translate="yes" xml:space="preserve">
          <source>Create custom pipes to encapsulate transformations that are not provided with the built-in pipes. You can then use your custom pipe in template expressions, the same way you use built-in pipes&amp;mdash;to transform input values to output values for display.</source>
          <target state="translated">カスタムパイプを作成して、組み込みパイプで提供されていない変換をカプセル化します。次に、組み込みパイプを使用するのと同じ方法で、テンプレート式でカスタムパイプを使用して、入力値を表示用の出力値に変換できます。</target>
        </trans-unit>
        <trans-unit id="8d78cab03508298b6394500ff143a4ce920f1fe8" translate="yes" xml:space="preserve">
          <source>Create custom validators and input elements.</source>
          <target state="translated">カスタムバリデータと入力要素を作成します。</target>
        </trans-unit>
        <trans-unit id="7fc63713ba8febf462717ec5962af4e913e424da" translate="yes" xml:space="preserve">
          <source>Create mock heroes</source>
          <target state="translated">モックヒーローの作成</target>
        </trans-unit>
        <trans-unit id="05f481fe418f6a86292f6a24415f5606049d07a7" translate="yes" xml:space="preserve">
          <source>Create reusable animations.</source>
          <target state="translated">再利用可能なアニメーションを作成します。</target>
        </trans-unit>
        <trans-unit id="da94ceabf1d8e34885570af399bd9b54aac3cfda" translate="yes" xml:space="preserve">
          <source>Create source control commits for updates and migrations.</source>
          <target state="translated">更新と移行のためのソース管理コミットを作成します。</target>
        </trans-unit>
        <trans-unit id="f1b13d67ee451c85d72b12d7fed79afe9f2123ba" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;Hero&lt;/code&gt; model class.</source>
          <target state="translated">&lt;code&gt;Hero&lt;/code&gt; モデルクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="3c6c222726d757393261bf16b1c2a79df66bfed7" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="21f3283d735b1d144cc0f99ad0d254cbfe035065" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;MessageService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MessageService&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="ada89949412585d9e7c1136054d118223a5d0b4c" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;PageNotFoundComponent&lt;/code&gt; to display when users visit invalid URLs.</source>
          <target state="translated">ユーザーが無効なURLにアクセスしたときに表示する &lt;code&gt;PageNotFoundComponent&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="172a4c3b0ec11bc59cd589335fc6303ab44ee4ae" translate="yes" xml:space="preserve">
          <source>Create the &lt;em&gt;Routing Module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ルーティングモジュールを&lt;/em&gt;作成する&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="da675249097ef52e40ae720707f5a7b94684a800" translate="yes" xml:space="preserve">
          <source>Create the ASP.NET 4.x project in the usual way as follows:</source>
          <target state="translated">ASP.NET 4.xプロジェクトを通常の方法で以下のように作成します。</target>
        </trans-unit>
        <trans-unit id="d5d21b04456ab21aa92e8f2845d72a4cbfeb6b23" translate="yes" xml:space="preserve">
          <source>Create the Hero model class</source>
          <target state="translated">ヒーローモデルクラスの作成</target>
        </trans-unit>
        <trans-unit id="2452645fe3a4ccd04b9ca32f2a950631d3598e61" translate="yes" xml:space="preserve">
          <source>Create the cart page</source>
          <target state="translated">カートページを作成する</target>
        </trans-unit>
        <trans-unit id="e27dd4ee79d994c9a9527a5f35b79e9cf81152b1" translate="yes" xml:space="preserve">
          <source>Create the cart view</source>
          <target state="translated">カートビューを作成する</target>
        </trans-unit>
        <trans-unit id="4aeb64141da54a43606834f3aab149084db31793" translate="yes" xml:space="preserve">
          <source>Create the cart view in two steps:</source>
          <target state="translated">2つのステップでカートビューを作成します。</target>
        </trans-unit>
        <trans-unit id="bd4dd7fe4f4f5e851ad992b436f57ba5de1dc1c9" translate="yes" xml:space="preserve">
          <source>Create the checkout form</source>
          <target state="translated">チェックアウトフォームの作成</target>
        </trans-unit>
        <trans-unit id="70ff72f4f3c8b91ef4c89715e795b00cc3d2d5e1" translate="yes" xml:space="preserve">
          <source>Create the component that controls the form.</source>
          <target state="translated">フォームを制御するコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="b10035e89e8d4f31dd3e423e7d84cb7cc1782c8c" translate="yes" xml:space="preserve">
          <source>Create the directive class file in a terminal window with the CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate directive&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate directive&lt;/code&gt; を&lt;/a&gt;使用して、ターミナルウィンドウでディレクティブクラスファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="c755355358c6f60194f94dff700393523f07e5b4" translate="yes" xml:space="preserve">
          <source>Create the feature module with the CLI, using the &lt;code&gt;--route&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;--route&lt;/code&gt; フラグを使用して、CLIで機能モジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="7b642d44edff5ee83ad4bfe6b09f6e34711c193f" translate="yes" xml:space="preserve">
          <source>Create the feature module&amp;rsquo;s component.</source>
          <target state="translated">機能モジュールのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="313ba270b7a9c190b1c190d7d84c2a206514a6ab" translate="yes" xml:space="preserve">
          <source>Create the heroes component</source>
          <target state="translated">ヒーローコンポーネントを作成する</target>
        </trans-unit>
        <trans-unit id="5b5c35b2cb11b55d12aa2d98b7a0f1aea4eaef61" translate="yes" xml:space="preserve">
          <source>Create the initial Bazel configuration files by running the following command:</source>
          <target state="translated">以下のコマンドを実行して、Bazelの初期設定ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="b4c1a77b1e3bd656529f3e9615a73425d70e211b" translate="yes" xml:space="preserve">
          <source>Create the main file &lt;code&gt;index.ts&lt;/code&gt; and add the source code for your schematic factory function.</source>
          <target state="translated">メインファイル &lt;code&gt;index.ts&lt;/code&gt; を作成し、回路図ファクトリ関数のソースコードを追加します。</target>
        </trans-unit>
        <trans-unit id="1c3cdf1c844d3db6a269727dd35b1b2669fffd03" translate="yes" xml:space="preserve">
          <source>Create the main file, &lt;code&gt;index.ts&lt;/code&gt; and add the source code for your schematic factory function.</source>
          <target state="translated">メインファイル &lt;code&gt;index.ts&lt;/code&gt; を作成し、回路図ファクトリ関数のソースコードを追加します。</target>
        </trans-unit>
        <trans-unit id="658a7f9024e9c73ccabe751982901d6d4924e575" translate="yes" xml:space="preserve">
          <source>Create the main file, &lt;code&gt;index.ts&lt;/code&gt;.</source>
          <target state="translated">メインファイル &lt;code&gt;index.ts&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="237dfc5f8bd5fdcaa24e95bd1dcd4340e8689daf" translate="yes" xml:space="preserve">
          <source>Create the sample project</source>
          <target state="translated">サンプルプロジェクトの作成</target>
        </trans-unit>
        <trans-unit id="53254f7fb49a06ca530fbd59f0f4f685065ab168" translate="yes" xml:space="preserve">
          <source>Create the shopping cart service</source>
          <target state="translated">ショッピングカートサービスの作成</target>
        </trans-unit>
        <trans-unit id="b65fa03331046adf1f90a172897e6a189676d1aa" translate="yes" xml:space="preserve">
          <source>Create the translation files</source>
          <target state="translated">翻訳ファイルの作成</target>
        </trans-unit>
        <trans-unit id="631ced2ba2c2f7187c709f53e2a55495fa82e49d" translate="yes" xml:space="preserve">
          <source>Create trace scope.</source>
          <target state="translated">トレーススコープを作成します。</target>
        </trans-unit>
        <trans-unit id="ebb318f58cfcb04d707e94c422fb81877c7ee539" translate="yes" xml:space="preserve">
          <source>Create visual feedback for states</source>
          <target state="translated">状態を視覚的にフィードバックする</target>
        </trans-unit>
        <trans-unit id="347617d306b391c7a5529223aa0bf45ed4268eff" translate="yes" xml:space="preserve">
          <source>Create your custom renderer using &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; を使用してカスタムレンダラーを作成します。</target>
        </trans-unit>
        <trans-unit id="dc717190186e3ee44cd32129c62e0deba59b07df" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; and attaches it to a given HTML element.</source>
          <target state="translated">&lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJSマネージャー&lt;/a&gt;を作成し、指定されたHTML要素に添付します。</target>
        </trans-unit>
        <trans-unit id="a6530e3441dce3f9ee236ed544557b7007cf2e1f" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance from a domain model and binds it to a form control element.</source>
          <target state="translated">ドメインモデルから &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、それをフォームコントロール要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="caae2a71e30d7d7b7b9727c56659985439b5bd05" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance from a domain model and binds it to a form control element.</source>
          <target state="translated">ドメインモデルから &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、それをフォームコントロール要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="ea0cd9f72328ab86c66b5fcd62c3ef99cf3da6eb" translate="yes" xml:space="preserve">
          <source>Creates a child injector from previously resolved providers.</source>
          <target state="translated">以前に解決したプロバイダから子インジェクタを作成します。</target>
        </trans-unit>
        <trans-unit id="fef3971537b3f0a1dde1128e255f52d415265611" translate="yes" xml:space="preserve">
          <source>Creates a custom element class based on an Angular component.</source>
          <target state="translated">Angularコンポーネントをベースにカスタム要素クラスを作成します。</target>
        </trans-unit>
        <trans-unit id="96d72128265d04963c687f715964b2a2d13bcad5" translate="yes" xml:space="preserve">
          <source>Creates a directory &lt;code&gt;src/app/hero-detail&lt;/code&gt;.</source>
          <target state="translated">ディレクトリ &lt;code&gt;src/app/hero-detail&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="22d9883ebf4a7b06ec424ffe070d29aca9b5d2ea" translate="yes" xml:space="preserve">
          <source>Creates a factory for a platform</source>
          <target state="translated">プラットフォームの工場を作成します。</target>
        </trans-unit>
        <trans-unit id="6213cecf750ebfddfd37c5691b4b9fa751900eac" translate="yes" xml:space="preserve">
          <source>Creates a factory for a platform. Can be used to provide or override &lt;code&gt;Providers&lt;/code&gt; specific to your applciation's runtime needs, such as &lt;code&gt;&lt;a href=&quot;core/platform_initializer&quot;&gt;PLATFORM_INITIALIZER&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;core/platform_id&quot;&gt;PLATFORM_ID&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プラットフォームのファクトリを作成します。 &lt;code&gt;&lt;a href=&quot;core/platform_initializer&quot;&gt;PLATFORM_INITIALIZER&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;core/platform_id&quot;&gt;PLATFORM_ID&lt;/a&gt;&lt;/code&gt; など、アプリケーションのランタイムニーズに固有の &lt;code&gt;Providers&lt;/code&gt; を提供またはオーバーライドするために使用できます。</target>
        </trans-unit>
        <trans-unit id="79c0b27ecb5434157a290cdaf9810cf655bfeb6d" translate="yes" xml:space="preserve">
          <source>Creates a factory for a platform. Can be used to provide or override &lt;code&gt;Providers&lt;/code&gt; specific to your applciation's runtime needs, such as &lt;code&gt;&lt;a href=&quot;platform_initializer&quot;&gt;PLATFORM_INITIALIZER&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;platform_id&quot;&gt;PLATFORM_ID&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プラットフォームのファクトリを作成します。 &lt;code&gt;&lt;a href=&quot;platform_initializer&quot;&gt;PLATFORM_INITIALIZER&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;platform_id&quot;&gt;PLATFORM_ID&lt;/a&gt;&lt;/code&gt; など、アプリケーションのランタイムニーズに固有の &lt;code&gt;Providers&lt;/code&gt; を提供またはオーバーライドするために使用できます。</target>
        </trans-unit>
        <trans-unit id="26b2ab3fe3f2aa6f449308649563df0b4c724003" translate="yes" xml:space="preserve">
          <source>Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the &lt;code&gt;/&lt;/code&gt; prefix; for a child route, use the &lt;code&gt;./&lt;/code&gt;prefix; for a sibling or parent, use the &lt;code&gt;../&lt;/code&gt; prefix.</source>
          <target state="translated">ルートパス、必須パラメーターとオプションパラメーター、クエリパラメーター、およびフラグメントで構成されるルート命令に基づいて、別のビューへのリンクを作成します。ルートルートに移動するには、 &lt;code&gt;/&lt;/code&gt; プレフィックスを使用します。子ルートの場合は、。 &lt;code&gt;./&lt;/code&gt; プレフィックスを使用します。兄弟または親の場合は、接頭辞 &lt;code&gt;../&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8a084a9515c51a254bece9083e3958b5aaaa0d6d" translate="yes" xml:space="preserve">
          <source>Creates a local variable &lt;code&gt;movieplayer&lt;/code&gt; that provides access to the &lt;code&gt;video&lt;/code&gt; element instance in data-binding and event-binding expressions in the current template.</source>
          <target state="translated">現在のテンプレートのデータバインディングおよびイベントバインディング式の &lt;code&gt;video&lt;/code&gt; 要素インスタンスへのアクセスを提供するローカル変数 &lt;code&gt;movieplayer&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="b1aab839b5e7bb15e6b4e3a92f070d71fbbc8dd3" translate="yes" xml:space="preserve">
          <source>Creates a module with all the router directives and a provider registering routes, without creating a new Router service. When registering for submodules and lazy-loaded submodules, create the NgModule as follows:</source>
          <target state="translated">ルータサービスを新規に作成せずに、すべてのルータディレクティブとプロバイダがルートを登録するモジュールを作成します。サブモジュールや遅延負荷のあるサブモジュールを登録する場合は、以下のようにNgModuleを作成します。</target>
        </trans-unit>
        <trans-unit id="71801c6c1100db5ff200cf005463064053764345" translate="yes" xml:space="preserve">
          <source>Creates a module with all the router directives and a provider registering routes.</source>
          <target state="translated">すべてのルータのディレクティブとプロバイダがルートを登録するモジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="180a05c153eaeb2a0b36ac47d5c4868c47babf27" translate="yes" xml:space="preserve">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="translated">トリガーにバインドされた式が変更されたときに評価される &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; エントリーのリストを含む、名前付きのアニメーショントリガーを作成します。</target>
        </trans-unit>
        <trans-unit id="712b79c56c2b28dac1c45ef46aa0e534b7b25153" translate="yes" xml:space="preserve">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="translated">トリガーにバインドされた式が変更されたときに評価される &lt;code&gt;&lt;a href=&quot;animations/state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; エントリのリストを含む、名前付きアニメーショントリガーを作成します。</target>
        </trans-unit>
        <trans-unit id="411673ac1b73f98373de35f525ceaa2303a5bf06" translate="yes" xml:space="preserve">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="translated">トリガーにバインドされた式が変更されたときに評価される &lt;code&gt;&lt;a href=&quot;common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; エントリーのリストを含む、名前付きのアニメーショントリガーを作成します。</target>
        </trans-unit>
        <trans-unit id="1902b86e4d0caf9e34d2481afd331b3a65ca56ee" translate="yes" xml:space="preserve">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="translated">トリガーにバインドされた式が変更されたときに評価される &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; エントリのリストを含む、名前付きアニメーショントリガーを作成します。</target>
        </trans-unit>
        <trans-unit id="7d9417e5b45d0789e51adb54752a793fce271faf" translate="yes" xml:space="preserve">
          <source>Creates a named set of CSS styles that should be applied on successful transition to a given state. The state can then be referenced by name within other animation functions.</source>
          <target state="translated">指定された状態への移行に成功した際に適用されるべき CSS スタイルの名前付きセットを作成します。この状態は、他のアニメーション関数内で名前を付けて参照することができます。</target>
        </trans-unit>
        <trans-unit id="198dc08c4d8d1323300a4a6314f67f468b5e290d" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="36efdd5c1e89e4e8486865cfcc0c4b03c4ef9807" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="513102355274ffbdb1d07ac37091bb21593c9c07" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="620859ab54ea93c6e79f9cce56c1578e49659d14" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; containing a subset (slice) of the elements.</source>
          <target state="translated">要素のサブセット（スライス）を含む新しい &lt;code&gt;Array&lt;/code&gt; または &lt;code&gt;String&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="65f86dc1f9780df941519cd1825f2191b9809ccb" translate="yes" xml:space="preserve">
          <source>Creates a new component.</source>
          <target state="translated">新しいコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="70706f2ce6e47532c5017273998404c708cf089b" translate="yes" xml:space="preserve">
          <source>Creates a new generic NgModule definition in the given or default project.</source>
          <target state="translated">指定したプロジェクトまたはデフォルトのプロジェクトに新しい汎用NgModule定義を作成します。</target>
        </trans-unit>
        <trans-unit id="62e059ae3355a021d82deb57042a27f7a22f2488" translate="yes" xml:space="preserve">
          <source>Creates a new generic class definition in the given or default project.</source>
          <target state="translated">指定したプロジェクトまたはデフォルトのプロジェクトに新しい汎用クラス定義を作成します。</target>
        </trans-unit>
        <trans-unit id="270f66a0fff8aec92d1637e16671375a0130bfc5" translate="yes" xml:space="preserve">
          <source>Creates a new generic component definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用コンポーネント定義を作成します。</target>
        </trans-unit>
        <trans-unit id="7e4fbaedc160c88240b887c836f9ce4389155aa8" translate="yes" xml:space="preserve">
          <source>Creates a new generic directive definition in the given or default project.</source>
          <target state="translated">与えられたプロジェクトやデフォルトのプロジェクトに新しい汎用ディレクティブの定義を作成します。</target>
        </trans-unit>
        <trans-unit id="c090794369bff4b38077b04ac3105611a43813f9" translate="yes" xml:space="preserve">
          <source>Creates a new generic interface definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用インターフェース定義を作成します。</target>
        </trans-unit>
        <trans-unit id="c261bc76e1d49e6a376b5b0e9970a8a6e07c39c7" translate="yes" xml:space="preserve">
          <source>Creates a new generic library project in the current workspace.</source>
          <target state="translated">現在のワークスペースに新しいジェネリック・ライブラリ・プロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="f1165df6f1761dae40a299c78803074c1c8ff81e" translate="yes" xml:space="preserve">
          <source>Creates a new generic pipe definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用パイプ定義を作成します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
