<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="jquery">
    <body>
      <group id="jquery">
        <trans-unit id="24668f69e38ec30af5430ec57c38e4f3a360d781" translate="yes" xml:space="preserve">
          <source>Passing Event Data</source>
          <target state="translated">イベントデータを渡す</target>
        </trans-unit>
        <trans-unit id="be8d5a856c78d9ea61953d1aae50161b1479b08d" translate="yes" xml:space="preserve">
          <source>Passing a Function</source>
          <target state="translated">関数を渡す</target>
        </trans-unit>
        <trans-unit id="94b296314bd220f16316eba73ac6a0293f79631e" translate="yes" xml:space="preserve">
          <source>Passing and handling event data works the same way as it does for &lt;code&gt;.on()&lt;/code&gt;.</source>
          <target state="translated">イベントデータの受け渡しと処理は、 &lt;code&gt;.on()&lt;/code&gt; の場合と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="79b9493aad121249c06485be783dab64a5565634" translate="yes" xml:space="preserve">
          <source>Passing data to the handler</source>
          <target state="translated">ハンドラへのデータの受け渡し</target>
        </trans-unit>
        <trans-unit id="ff30533028ec97d95729586d791f43cc566b973b" translate="yes" xml:space="preserve">
          <source>Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:</source>
          <target state="translated">不正な JSON 文字列を渡すと、JavaScript の例外がスローされます。例えば、以下はすべて無効な JSON 文字列です。</target>
        </trans-unit>
        <trans-unit id="0d0c656b1b2892a427f97eda703e8d098445da3c" translate="yes" xml:space="preserve">
          <source>Per-property Easing</source>
          <target state="translated">物件ごとの緩和</target>
        </trans-unit>
        <trans-unit id="9589684d53470a15aa562a26841a8da7dc6623de" translate="yes" xml:space="preserve">
          <source>Perform a custom animation of a set of CSS properties.</source>
          <target state="translated">一連のCSSプロパティのカスタムアニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="7fbb6be2c9386631b75a15df0b73a775f134538b" translate="yes" xml:space="preserve">
          <source>Perform an asynchronous HTTP (Ajax) request.</source>
          <target state="translated">非同期 HTTP (Ajax)リクエストを実行します。</target>
        </trans-unit>
        <trans-unit id="e17b8a0e34bfa65fea451f6c53d2fcb021fcde57" translate="yes" xml:space="preserve">
          <source>Places a border around all list items that are children of &amp;lt;ul class=&quot;topnav&quot;&amp;gt; .</source>
          <target state="translated">&amp;lt;ul class = &quot;topnav&quot;&amp;gt;の子であるすべてのリストアイテムの周囲に境界線を配置します。</target>
        </trans-unit>
        <trans-unit id="88e22ddf6d8a412676c8f0c76b426f4bc5fc842b" translate="yes" xml:space="preserve">
          <source>PlainObject</source>
          <target state="translated">PlainObject</target>
        </trans-unit>
        <trans-unit id="3180f052c4c83832239076f7eacc4313566a9114" translate="yes" xml:space="preserve">
          <source>Please note that although you can pass text nodes and comment nodes into a jQuery collection this way, most operations don't support them. The few that do will have an explicit note on their API documentation page.</source>
          <target state="translated">この方法でテキスト ノードとコメント ノードを jQuery コレクションに渡すことはできますが、ほとんどの操作はこれらをサポートしていないことに注意してください。サポートされているいくつかの操作については、API ドキュメント ページに明示的な注意書きがあります。</target>
        </trans-unit>
        <trans-unit id="2bd1c35913397741b31109eaf3cbb050bdd82de0" translate="yes" xml:space="preserve">
          <source>Possible flags:</source>
          <target state="translated">可能性のあるフラグ</target>
        </trans-unit>
        <trans-unit id="f8156ee9b4d1cf9712c808ab6f59d8c0e0265624" translate="yes" xml:space="preserve">
          <source>Post a form using Ajax and put results in a div</source>
          <target state="translated">Ajaxを使ってフォームを投稿し、結果をdivに入れる</target>
        </trans-unit>
        <trans-unit id="8eda3141aabc4b52dc3c81a854edd4140396a7f3" translate="yes" xml:space="preserve">
          <source>Post to the test.php page and get content which has been returned in json format (&amp;lt;?php echo json_encode(array(&quot;name&quot;=&amp;gt;&quot;John&quot;,&quot;time&quot;=&amp;gt;&quot;2pm&quot;)); ?&amp;gt;).</source>
          <target state="translated">test.phpページに投稿し、json形式で返されたコンテンツを取得します（&amp;lt;？php echo json_encode（array（ &quot;name&quot; =&amp;gt; &quot;John&quot;、 &quot;time&quot; =&amp;gt; &quot;2pm&quot;））;？&amp;gt;）。</target>
        </trans-unit>
        <trans-unit id="f322b9f3495aba7144e876707bc47a2a7d952d9d" translate="yes" xml:space="preserve">
          <source>Prefilters are a perfect fit when custom options need to be handled. Given the following code, for example, a call to &lt;code&gt;$.ajax()&lt;/code&gt; would automatically abort a request to the same URL if the custom &lt;code&gt;abortOnRetry&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">プレフィルターは、カスタムオプションを処理する必要がある場合に最適です。たとえば次のコードの場合、 &lt;code&gt;$.ajax()&lt;/code&gt; を呼び出すと、カスタムの &lt;code&gt;abortOnRetry&lt;/code&gt; オプションが &lt;code&gt;true&lt;/code&gt; に設定されている場合、同じURLへのリクエストが自動的に中止されます。</target>
        </trans-unit>
        <trans-unit id="5bcb18ee1f9a94de27b30e82157a747c5b3e613a" translate="yes" xml:space="preserve">
          <source>Prefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through https://mydomain.net/proxy/:</source>
          <target state="translated">プリフィルタは、既存のオプションを変更するために使用することもできます。例えば、以下のプロキシは、https://mydomain.net/proxy/を通じてクロスドメインリクエストをプロキシします。</target>
        </trans-unit>
        <trans-unit id="232e132d8704ff6d6a305ebb6baea10771f24387" translate="yes" xml:space="preserve">
          <source>Prepend all spans to the element with the ID &quot;foo&quot; (Check .prepend() documentation for more examples)</source>
          <target state="translated">すべてのスパンを ID &quot;foo&quot; を持つ要素に前置します (より多くの例については .prepend()のドキュメントをチェックしてください)</target>
        </trans-unit>
        <trans-unit id="3a1b005580f79d2b9feb9ee84fc3ad816f8ee6c6" translate="yes" xml:space="preserve">
          <source>Prepends a DOM Element to all paragraphs.</source>
          <target state="translated">すべての段落に DOM 要素を前置します。</target>
        </trans-unit>
        <trans-unit id="7cad6f704aab1d92b6effccc3995a5b6e6f987b2" translate="yes" xml:space="preserve">
          <source>Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.</source>
          <target state="translated">すべての段落に jQuery オブジェクト(DOM 要素の配列に似ています)を前置します。</target>
        </trans-unit>
        <trans-unit id="76f13c2409c82584ac6e5093150789bb63510be8" translate="yes" xml:space="preserve">
          <source>Prepends some HTML to all paragraphs.</source>
          <target state="translated">すべての段落にHTMLを前置します。</target>
        </trans-unit>
        <trans-unit id="82f8527f6240b044a741cb8b663a0e5e11d03bde" translate="yes" xml:space="preserve">
          <source>Prevents other event handlers from being called.</source>
          <target state="translated">他のイベントハンドラが呼び出されないようにします。</target>
        </trans-unit>
        <trans-unit id="0fd2d09f7e570399a076e57e7b952b3c96b2fef8" translate="yes" xml:space="preserve">
          <source>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.</source>
          <target state="translated">イベントが DOM ツリーに泡立つのを防ぎ、親ハンドラにイベントが通知されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="bf21227c4464de1be5b8be0cedaef5b1eb6baf31" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.4, the arguments should be true Javascript Array objects; use &lt;code&gt;$.makeArray&lt;/code&gt; if they are not.</source>
          <target state="translated">jQuery 1.4以前では、引数は真のJavaScript配列オブジェクトである必要があります。そうでない場合は &lt;code&gt;$.makeArray&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="b123d694309d3954b58e4e45e2e6f52607ff20e0" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.4.3 (starting in jQuery 1.4) the &lt;code&gt;.data()&lt;/code&gt; method completely replaced all data, instead of just extending the data object. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data.</source>
          <target state="translated">jQuery 1.4.3（jQuery 1.4以降）の &lt;code&gt;.data()&lt;/code&gt; は、データオブジェクトを拡張するだけでなく、.data（）メソッドがすべてのデータを完全に置き換えていました。サードパーティのプラグインを使用している場合、プラグインもデータを設定している可能性があるため、要素のデータオブジェクトを完全に置き換えることはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="1530433b2facdd30bee4aad9ae661ef1b3234fda" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.4.3, &lt;code&gt;.data( obj )&lt;/code&gt; completely replaced all data. Since jQuery 1.4.3, data is instead extended by shallow merge.</source>
          <target state="translated">jQuery 1.4.3より前は、 &lt;code&gt;.data( obj )&lt;/code&gt; がすべてのデータを完全に置き換えていました。jQuery 1.4.3以降、データは代わりに浅いマージによって拡張されます。</target>
        </trans-unit>
        <trans-unit id="fb40c73abf82d2ae0bf8b9f2097143bcdd0c6521" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.5, the global &lt;code&gt;.ajaxError()&lt;/code&gt; callback event had to be used in order to handle &lt;code&gt;$.getScript()&lt;/code&gt; errors:</source>
          <target state="translated">jQuery 1.5より前の &lt;code&gt;.ajaxError()&lt;/code&gt; では、 &lt;code&gt;$.getScript()&lt;/code&gt; エラーを処理するために、グローバルな.ajaxError（）コールバックイベントを使用する必要がありました。</target>
        </trans-unit>
        <trans-unit id="42d18165ce6b4de6e02584eb2f59175fe1d13460" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.7, in selector strings with positional selectors such as &lt;code&gt;:first&lt;/code&gt;, &lt;code&gt;:gt()&lt;/code&gt;, or &lt;code&gt;:even&lt;/code&gt;, the positional filtering is done against the jQuery object passed to &lt;code&gt;.is()&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; against the containing document. So for the HTML shown above, an expression such as &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, but &lt;code&gt;$( &quot;li:first-child&quot; ).is( &quot;li:last-child&quot; )&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. In addition, a bug in Sizzle prevented many positional selectors from working properly. These two factors made positional selectors almost unusable in filters.</source>
          <target state="translated">jQuery 1.7より前は、 &lt;code&gt;:first&lt;/code&gt; 、 &lt;code&gt;:gt()&lt;/code&gt; 、または &lt;code&gt;:even&lt;/code&gt; などの位置セレクター付きのセレクター文字列では、位置フィルターは、含まれているドキュメントでは&lt;em&gt;なく&lt;/em&gt;、 &lt;code&gt;.is()&lt;/code&gt; に渡されたjQueryオブジェクトに対して行われていました。したがって、上記のHTMLでは、 &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返しますが、 &lt;code&gt;$( &quot;li:first-child&quot; ).is( &quot;li:last-child&quot; )&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。さらに、シズルのバグが原因で、多くの位置セレクターが正しく機能しませんでした。これら2つの要因により、フィルターでは位置セレクターをほとんど使用できなくなりました。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d6ee2d082684a3d606d94b34e878d67b987a0362" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.8, the &lt;code&gt;:eq(index)&lt;/code&gt; selector did &lt;em&gt;not&lt;/em&gt; accept a negative value for &lt;code&gt;index&lt;/code&gt; (though the &lt;a href=&quot;eq&quot;&gt;&lt;code&gt;.eq(index)&lt;/code&gt;&lt;/a&gt; method did).</source>
          <target state="translated">jQueryの1.8の前に、 &lt;code&gt;:eq(index)&lt;/code&gt; セレクタはなかった&lt;em&gt;ではない&lt;/em&gt;ため、負の値受け入れる &lt;code&gt;index&lt;/code&gt; （ただし&lt;a href=&quot;eq&quot;&gt; &lt;code&gt;.eq(index)&lt;/code&gt; &lt;/a&gt;メソッドはなかったです）。</target>
        </trans-unit>
        <trans-unit id="3a212e9e0e5070c7c9452ef703226665bf7ea108" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.8, the &lt;code&gt;:gt(index)&lt;/code&gt; selector did &lt;em&gt;not&lt;/em&gt; accept a negative value for &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">jQuery 1.8より前は、 &lt;code&gt;:gt(index)&lt;/code&gt; セレクターは負の値の &lt;code&gt;index&lt;/code&gt; 受け入れ&lt;em&gt;ませんでした&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="af3da3106e959302465ecda0b177352ad8bffd36" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.8, the &lt;code&gt;:lt(index)&lt;/code&gt; selector did &lt;em&gt;not&lt;/em&gt; accept a negative value for &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">jQuery 1.8以前では、 &lt;code&gt;:lt(index)&lt;/code&gt; セレクターは負の値の &lt;code&gt;index&lt;/code&gt; 受け入れ&lt;em&gt;ませんでした&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8738bf3874c5692fd941d4379f8a846ab800608b" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;$.parseJSON&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt; instead of throwing an error if it was passed an empty string, &lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;, even though those are not valid JSON.</source>
          <target state="translated">jQuery 1.9より前は、空の文字列、 &lt;code&gt;null&lt;/code&gt; 、または &lt;code&gt;undefined&lt;/code&gt; が渡された場合、 &lt;code&gt;$.parseJSON&lt;/code&gt; は有効なJSONではないにもかかわらず、エラーをスローする代わりに &lt;code&gt;null&lt;/code&gt; を返しました。</target>
        </trans-unit>
        <trans-unit id="d08f9318122f146f6802cf4161100074eebb1bc1" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt; would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt;, and &lt;code&gt;.replaceWith()&lt;/code&gt; always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect&amp;mdash;that is, neither the set nor the nodes it contains are changed.</source>
          <target state="translated">jQuery 1.9より前の &lt;code&gt;.after()&lt;/code&gt; 、.after（）は、セットの最初のノードがドキュメントに接続されていない場合、現在のjQueryセットのノードを追加または変更しようとし、その場合、元のセットではなく新しいjQueryセットを返します。メソッドは、引数の数または関連性に応じて、新しい結果を返す場合と返さない場合があります。 jQueryの1.9のように、 &lt;code&gt;.after()&lt;/code&gt; 、 &lt;code&gt;.before()&lt;/code&gt; 、及び &lt;code&gt;.replaceWith()&lt;/code&gt; が常に元の未修飾のセットを返します。親を持たないノードでこれらのメソッドを使用しようとしても効果はありません。つまり、セットもそれに含まれるノードも変更されません。</target>
        </trans-unit>
        <trans-unit id="2cdd46443ef8cc4f83d8ffa807e15ca6f9d3e830" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;.before()&lt;/code&gt; would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt;, and &lt;code&gt;.replaceWith()&lt;/code&gt; always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect&amp;mdash;that is, neither the set nor the nodes it contains are changed.</source>
          <target state="translated">jQuery 1.9より前の &lt;code&gt;.before()&lt;/code&gt; 、.before（）は、セットの最初のノードがドキュメントに接続されていない場合、現在のjQueryセットのノードを追加または変更しようとし、その場合、元のセットではなく新しいjQueryセットを返します。メソッドは、引数の数または関連性に応じて、新しい結果を返す場合と返さない場合があります。 jQueryの1.9のように、 &lt;code&gt;.after()&lt;/code&gt; 、 &lt;code&gt;.before()&lt;/code&gt; 、及び &lt;code&gt;.replaceWith()&lt;/code&gt; が常に元の未修飾のセットを返します。親を持たないノードでこれらのメソッドを使用しようとしても効果はありません。つまり、セットもそれに含まれるノードも変更されません。</target>
        </trans-unit>
        <trans-unit id="4b6d5d6b69a94dddcc6ea715db291c8faa64fec9" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;.replaceWith()&lt;/code&gt; would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt;, and &lt;code&gt;.replaceWith()&lt;/code&gt; always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect&amp;mdash;that is, neither the set nor the nodes it contains are changed.</source>
          <target state="translated">jQuery 1.9より前の &lt;code&gt;.replaceWith()&lt;/code&gt; 、.replaceWith（）は、セットの最初のノードがドキュメントに接続されていない場合、現在のjQueryセットにノードを追加または変更しようとし、その場合、元のセットではなく新しいjQueryセットを返します。メソッドは、引数の数または関連性に応じて、新しい結果を返す場合と返さない場合があります。jQueryの1.9のように、 &lt;code&gt;.after()&lt;/code&gt; 、 &lt;code&gt;.before()&lt;/code&gt; 、及び &lt;code&gt;.replaceWith()&lt;/code&gt; が常に元の未修飾のセットを返します。親を持たないノードでこれらのメソッドを使用しようとしても効果はありません。つまり、セットもそれに含まれるノードも変更されません。</target>
        </trans-unit>
        <trans-unit id="779026168e3049f2cac03a3a10cfd6a8fff5e6cf" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 3.0, this method was called &lt;code&gt;&lt;a href=&quot;jquery.unique&quot;&gt;jQuery.unique()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">jQuery 3.0以前は、このメソッドは &lt;code&gt;&lt;a href=&quot;jquery.unique&quot;&gt;jQuery.unique()&lt;/a&gt;&lt;/code&gt; と呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="3fa495912556317b590f7533e62b99917f547f60" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 3.5.0, unsuccessful HTTP responses with a script &lt;code&gt;Content-Type&lt;/code&gt; were still executed.</source>
          <target state="translated">jQuery 3.5.0より前では、スクリプト &lt;code&gt;Content-Type&lt;/code&gt; を使用した失敗したHTTP応答は引き続き実行されていました。</target>
        </trans-unit>
        <trans-unit id="351a92ceed41b2e610186c68ece5e88842211bfa" translate="yes" xml:space="preserve">
          <source>Promise Object</source>
          <target state="translated">プロミスオブジェクト</target>
        </trans-unit>
        <trans-unit id="e606f4866747c2f92752089eea46ab0c93882ee6" translate="yes" xml:space="preserve">
          <source>Properties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the &lt;code&gt;value&lt;/code&gt; property of input elements, the &lt;code&gt;disabled&lt;/code&gt; property of inputs and buttons, or the &lt;code&gt;checked&lt;/code&gt; property of a checkbox. The &lt;code&gt;.prop()&lt;/code&gt; method should be used to set disabled and checked instead of the &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; method. The &lt;code&gt;&lt;a href=&quot;val&quot;&gt;.val()&lt;/a&gt;&lt;/code&gt; method should be used for getting and setting value.</source>
          <target state="translated">プロパティは通常、シリアル化されたHTML属性を変更せずに、DOM要素の動的な状態に影響を与えます。例には、入力要素の &lt;code&gt;value&lt;/code&gt; プロパティ、入力とボタンの &lt;code&gt;disabled&lt;/code&gt; プロパティ、またはチェックボックスの &lt;code&gt;checked&lt;/code&gt; プロパティが含まれます。 &lt;code&gt;.prop()&lt;/code&gt; メソッドは無効に設定するために使用され、代わりにチェックする必要があります &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; メソッド。 &lt;code&gt;&lt;a href=&quot;val&quot;&gt;.val()&lt;/a&gt;&lt;/code&gt; メソッドを取得し、値を設定するために使用すべきです。</target>
        </trans-unit>
        <trans-unit id="5c0c8d78301081a9fe22695fffe4f726d4ea87b3" translate="yes" xml:space="preserve">
          <source>Prototype</source>
          <target state="translated">Prototype</target>
        </trans-unit>
        <trans-unit id="4dddbaec9dd46c9aeafdb1a4344538e3a3f99344" translate="yes" xml:space="preserve">
          <source>Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.</source>
          <target state="translated">通常は非同期イベントを表すDeferredオブジェクトですが、0個以上のThenableオブジェクトに基づいてコールバック関数を実行する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="ec60235a3878a6dcf393d4a6bf9220cf073f8d11" translate="yes" xml:space="preserve">
          <source>Providing a negative number indicates a position starting from the end of the set, rather than the beginning. For example:</source>
          <target state="translated">負の数を指定すると、セットの開始位置ではなく、セットの終了位置から開始することを示します。例えば</target>
        </trans-unit>
        <trans-unit id="86f54466e0004ea3152a3be478a81bd98fb0f962" translate="yes" xml:space="preserve">
          <source>Proxy Pattern</source>
          <target state="translated">プロキシパターン</target>
        </trans-unit>
        <trans-unit id="7e558b6e85beca559a259cad628894195c6fe7e4" translate="yes" xml:space="preserve">
          <source>QUnit API docs</source>
          <target state="translated">QUnit API ドキュメント</target>
        </trans-unit>
        <trans-unit id="d0997ef78b0a4c39908ad9bff14d30fbb5aee18f" translate="yes" xml:space="preserve">
          <source>Queue a custom function.</source>
          <target state="translated">カスタム関数をキューに入れます。</target>
        </trans-unit>
        <trans-unit id="80e638f5c4369734d6653dc96c04c7acd78b38e7" translate="yes" xml:space="preserve">
          <source>Qunit's Assert Object</source>
          <target state="translated">Qunitのアサートオブジェクト</target>
        </trans-unit>
        <trans-unit id="60fefb29eda0237f92306cb85899330ca8b230ee" translate="yes" xml:space="preserve">
          <source>Quoting</source>
          <target state="translated">Quoting</target>
        </trans-unit>
        <trans-unit id="73eacf64e5e81f1fcb39bf6fc6d87cea5690a84c" translate="yes" xml:space="preserve">
          <source>Reading and writing elements to an array uses the array-notation:</source>
          <target state="translated">配列への要素の読み書きは配列記法を使用します。</target>
        </trans-unit>
        <trans-unit id="3bd455d4841aed3c37f7ec4c5a4fc4a2af81c69d" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to a subset specified by a range of indices.</source>
          <target state="translated">一致した要素の集合を、インデックスの範囲で指定されたサブセットに縮小します。</target>
        </trans-unit>
        <trans-unit id="1e8dd6900b011196e2f4a56c0cf89faca36f3e7e" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the even ones in the set, numbered from zero.</source>
          <target state="translated">一致した要素の集合を、集合内の偶数の要素に、0から番号を付けて減らします。</target>
        </trans-unit>
        <trans-unit id="8739271f849c700a6c0f32e066d7a1a077a8c2dd" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the final one in the set.</source>
          <target state="translated">一致した要素の集合を、集合内の最終的なものに縮小します。</target>
        </trans-unit>
        <trans-unit id="f5f117806b16689d587a077b5e8a3008e7f14b4f" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the first in the set.</source>
          <target state="translated">一致した要素の集合を、集合内の最初の要素に縮小します。</target>
        </trans-unit>
        <trans-unit id="dcb9f3bba427cedab9a22608ff1f552fd5105153" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the odd ones in the set, numbered from zero.</source>
          <target state="translated">一致した要素の集合を、ゼロから番号を付けて、集合内の奇数番目の要素に縮小します。</target>
        </trans-unit>
        <trans-unit id="0ef2b5baaab943ca133dd166d2b25a9c8d6847db" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the one at the specified index.</source>
          <target state="translated">一致した要素の集合を、指定されたインデックスのものに縮小します。</target>
        </trans-unit>
        <trans-unit id="cbef618e1d6febf6e667f916fb1a247bbf604c36" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</source>
          <target state="translated">一致した要素のセットを、セレクタまたは DOM 要素と一致する子孫を持つものに減らします。</target>
        </trans-unit>
        <trans-unit id="e092144853f325cc23c57056fac3b9e47adaecea" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to those that match the selector or pass the function&amp;rsquo;s test.</source>
          <target state="translated">一致する要素のセットを、セレクターに一致する要素に減らすか、関数のテストに合格します。</target>
        </trans-unit>
        <trans-unit id="0ea00b1a0bd8455bb9506bc4716b955661b6d7fc" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.</source>
          <target state="translated">エラーでAjaxリクエストが完了したときに呼び出されるハンドラを登録します。これはAjaxイベントです。</target>
        </trans-unit>
        <trans-unit id="cb1cd3334c0c68c88c6c354897b9a3c37ffc4f28" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when Ajax requests complete. This is an AjaxEvent.</source>
          <target state="translated">Ajaxのリクエストが完了したときに呼び出されるハンドラを登録します。これはAjaxEventです。</target>
        </trans-unit>
        <trans-unit id="046a7a8cf91a262375dabe45d5530f029d0902a1" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.</source>
          <target state="translated">すべてのAjaxリクエストが完了したときに呼び出されるハンドラを登録します。これはAjaxイベントです。</target>
        </trans-unit>
        <trans-unit id="f8b1ee0cf3bb013a4901ba48c82a092f864c1981" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when the first Ajax request begins. This is an Ajax Event.</source>
          <target state="translated">最初のAjaxリクエストが始まったときに呼び出されるハンドラを登録します。これはAjaxイベントです。</target>
        </trans-unit>
        <trans-unit id="50e2f5291c06e2ab1e5d166ed5784a7b771585c2" translate="yes" xml:space="preserve">
          <source>Reject a Deferred object and call any failCallbacks with the given args.</source>
          <target state="translated">Deferredオブジェクトを拒否し、与えられた引数を使って任意のfailCallbacksを呼び出します。</target>
        </trans-unit>
        <trans-unit id="5a4cbb7cd001bf81755640657aa8c8f3788845ef" translate="yes" xml:space="preserve">
          <source>Reject a Deferred object and call any failCallbacks with the given context and args.</source>
          <target state="translated">Deferredオブジェクトを拒否し、与えられたコンテキストとargsを使って任意のfailCallbacksを呼び出します。</target>
        </trans-unit>
        <trans-unit id="296c0790c40cf3ee5ef277bdc24194e6a59621ee" translate="yes" xml:space="preserve">
          <source>Relinquish jQuery&amp;rsquo;s control of the $ variable.</source>
          <target state="translated">$変数のjQueryの制御を放棄します。</target>
        </trans-unit>
        <trans-unit id="d254480091a9afb5893e4d137b177e3c48f3d58d" translate="yes" xml:space="preserve">
          <source>Remove a callback or a collection of callbacks from a callback list.</source>
          <target state="translated">コールバックリストからコールバックまたはコールバックのコレクションを削除します。</target>
        </trans-unit>
        <trans-unit id="152bebda6c7fab2eb30b4e2f0905212360afd527" translate="yes" xml:space="preserve">
          <source>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</source>
          <target state="translated">特定のルート要素のセットに基づいて、現在のセレクタにマッチするすべての要素のイベントからハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="51844c3db03fe078e728ade46a3b9a19c4248f5a" translate="yes" xml:space="preserve">
          <source>Remove a previously-attached event handler from the elements.</source>
          <target state="translated">以前にアタッチされていたイベントハンドラを要素から削除します。</target>
        </trans-unit>
        <trans-unit id="442c1f1945b0f5e3699145b6117ca4bc982901b0" translate="yes" xml:space="preserve">
          <source>Remove a previously-stored piece of data.</source>
          <target state="translated">以前に保存されていたデータを削除します。</target>
        </trans-unit>
        <trans-unit id="fbeece5249b803d87fb8175d2bb5f652e7808a88" translate="yes" xml:space="preserve">
          <source>Remove a property for the set of matched elements.</source>
          <target state="translated">一致した要素の集合のプロパティを削除します。</target>
        </trans-unit>
        <trans-unit id="6b64a5a444f5c29728046911f570f989d1af99d1" translate="yes" xml:space="preserve">
          <source>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</source>
          <target state="translated">一致した要素のセット内の各要素から、単一のクラス、複数のクラス、またはすべてのクラスを削除します。</target>
        </trans-unit>
        <trans-unit id="9c0453209c295e68a0c3d52f5c7e937797bbd791" translate="yes" xml:space="preserve">
          <source>Remove all child nodes of the set of matched elements from the DOM.</source>
          <target state="translated">一致した要素の集合のすべての子ノードを DOM から削除します。</target>
        </trans-unit>
        <trans-unit id="0783a64069f3907b9e9bb07e5cad6b02d24bbf52" translate="yes" xml:space="preserve">
          <source>Remove all delegated click handlers from all paragraphs:</source>
          <target state="translated">すべての段落から委任されたクリックハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="603e780ec0aea140b4761abbaa99d5c6c0951ed5" translate="yes" xml:space="preserve">
          <source>Remove all event handlers from all paragraphs:</source>
          <target state="translated">すべての段落からすべてのイベントハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="fede081dd4918b39d6dff14b203036f0e5a1deab" translate="yes" xml:space="preserve">
          <source>Remove all of the callbacks from a list.</source>
          <target state="translated">リストからすべてのコールバックを削除します。</target>
        </trans-unit>
        <trans-unit id="89eb35e8f65afbe7124f07bef85708a3ab9dc117" translate="yes" xml:space="preserve">
          <source>Remove all the classes from the matched elements.</source>
          <target state="translated">一致した要素からすべてのクラスを削除します。</target>
        </trans-unit>
        <trans-unit id="fe4f07de07a09dea08897e85ea59b3c2f916b939" translate="yes" xml:space="preserve">
          <source>Remove an attribute from each element in the set of matched elements.</source>
          <target state="translated">一致した要素の集合内の各要素から属性を削除します。</target>
        </trans-unit>
        <trans-unit id="944034e77286ef1b27bf82a282cddc5d330b328a" translate="yes" xml:space="preserve">
          <source>Remove an event handler.</source>
          <target state="translated">イベントハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="d31f228affab5884a76a09d1b7f8a2dd08681afa" translate="yes" xml:space="preserve">
          <source>Remove elements from the set of matched elements.</source>
          <target state="translated">マッチした要素の集合から要素を削除します。</target>
        </trans-unit>
        <trans-unit id="8cf593ca14051b1ad9096d31bd8f05ed1500f02a" translate="yes" xml:space="preserve">
          <source>Remove event handlers previously attached using .live() from the elements.</source>
          <target state="translated">.live()を使用して以前にアタッチしたイベントハンドラを要素から削除します。</target>
        </trans-unit>
        <trans-unit id="0fa050548901dd546b504c572fe6013210602a03" translate="yes" xml:space="preserve">
          <source>Remove from the queue all items that have not yet been run.</source>
          <target state="translated">まだ実行されていないすべてのアイテムをキューから削除します。</target>
        </trans-unit>
        <trans-unit id="c7c079e57c1ef7a6b712d33758c39e1793c8fbd0" translate="yes" xml:space="preserve">
          <source>Remove just one previously bound handler by passing it as the third argument:</source>
          <target state="translated">第3引数に渡すことで、以前にバインドされていたハンドラを1つだけ削除します。</target>
        </trans-unit>
        <trans-unit id="e52e36c56060191804131d5a2b083997fcc59144" translate="yes" xml:space="preserve">
          <source>Remove the class 'blue' and 'under' from the matched elements (3.3+ syntax).</source>
          <target state="translated">マッチした要素からクラス 'blue' と 'under' を削除します (3.3+の構文)。</target>
        </trans-unit>
        <trans-unit id="4219b3dbe4ae825caa17c061864413768325651d" translate="yes" xml:space="preserve">
          <source>Remove the class 'blue' and 'under' from the matched elements.</source>
          <target state="translated">マッチした要素からクラス 'blue' と 'under' を削除します。</target>
        </trans-unit>
        <trans-unit id="87b0641be0ccaa7415884b279c3e7b7040b29896" translate="yes" xml:space="preserve">
          <source>Remove the class 'blue' from the matched elements.</source>
          <target state="translated">マッチした要素からクラス 'blue' を削除します。</target>
        </trans-unit>
        <trans-unit id="6a0a7ad121887d5025890028bd2da9cd450a9576" translate="yes" xml:space="preserve">
          <source>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</source>
          <target state="translated">一致した要素のセットの親を DOM から削除し、一致した要素をその場所に残します。</target>
        </trans-unit>
        <trans-unit id="d953b02f2e1c98e517a3ac7edba80df822b4640d" translate="yes" xml:space="preserve">
          <source>Remove the set of matched elements from the DOM.</source>
          <target state="translated">一致した要素のセットを DOM から削除します。</target>
        </trans-unit>
        <trans-unit id="90873df9b35abbbc19ef0b528f7a8ab9dd986502" translate="yes" xml:space="preserve">
          <source>Remove the white spaces at the start and at the end of the string.</source>
          <target state="translated">文字列の先頭と末尾のホワイトスペースを削除します。</target>
        </trans-unit>
        <trans-unit id="d9ed199cbdfe853b660c8cc18fd4e7751a3b78a3" translate="yes" xml:space="preserve">
          <source>Remove the whitespace from the beginning and end of a string.</source>
          <target state="translated">文字列の先頭と末尾の空白を削除します。</target>
        </trans-unit>
        <trans-unit id="7f5026e26420d9b7f5049b09584701738205a71d" translate="yes" xml:space="preserve">
          <source>Removes all child nodes (including text nodes) from all paragraphs</source>
          <target state="translated">すべての段落からすべての子ノード(テキストノードを含む)を削除します。</target>
        </trans-unit>
        <trans-unit id="c7f59cdf9d384b47749940783c2d6b4773f8723c" translate="yes" xml:space="preserve">
          <source>Removes all elements that match &quot;div p.selected&quot; from the total set of all paragraphs.</source>
          <target state="translated">すべての段落の合計集合から「div p.selected」に一致するすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="37dd8d8d2fcc8a4db7dbb9f9bf01ad407803263e" translate="yes" xml:space="preserve">
          <source>Removes all paragraphs from the DOM</source>
          <target state="translated">DOM からすべての段落を削除します。</target>
        </trans-unit>
        <trans-unit id="ae96008bae2dd4ce2502a89bb1b9295630c1fd4b" translate="yes" xml:space="preserve">
          <source>Removes all paragraphs that contain &quot;Hello&quot; from the DOM. Analogous to doing &lt;code&gt;$(&quot;p&quot;).filter(&quot;:contains('Hello')&quot;).remove()&lt;/code&gt;.</source>
          <target state="translated">「Hello」を含むすべての段落をDOMから削除します。 &lt;code&gt;$(&quot;p&quot;).filter(&quot;:contains('Hello')&quot;).remove()&lt;/code&gt; を実行するのと同じです。</target>
        </trans-unit>
        <trans-unit id="1b85b3186be49bd7f79de4ea6d43e176de0433c5" translate="yes" xml:space="preserve">
          <source>Removes any duplicate elements from the array of divs.</source>
          <target state="translated">divの配列から重複する要素を削除します。</target>
        </trans-unit>
        <trans-unit id="4654814c9db6ea1bc61d08a6712f03a793c22363" translate="yes" xml:space="preserve">
          <source>Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.</source>
          <target state="translated">IDが「selected」の要素を全段落の集合から削除します。</target>
        </trans-unit>
        <trans-unit id="81901ac43b3bb08696d37b0859394ec85057f9ca" translate="yes" xml:space="preserve">
          <source>Removing Specific Elements</source>
          <target state="translated">特定の要素の削除</target>
        </trans-unit>
        <trans-unit id="15c986757de465b6a45aa264a5bc85edcb733e56" translate="yes" xml:space="preserve">
          <source>Replace all paragraphs with bold words.</source>
          <target state="translated">すべての段落を太字に置き換える。</target>
        </trans-unit>
        <trans-unit id="78f70c0345c0da10bce4af147178b880384fb813" translate="yes" xml:space="preserve">
          <source>Replace all the paragraphs with bold words.</source>
          <target state="translated">すべての段落を太字に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="c5ddda6c87c667d6334fcaaa7ba826763d2dc9d4" translate="yes" xml:space="preserve">
          <source>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</source>
          <target state="translated">マッチした要素のセットの各要素を、提供された新しいコンテンツで置き換え、削除された要素のセットを返します。</target>
        </trans-unit>
        <trans-unit id="f7e1cf90a2e1c81d39b57137303df978f22de979" translate="yes" xml:space="preserve">
          <source>Replace each target element with the set of matched elements.</source>
          <target state="translated">各ターゲット要素を、マッチした要素のセットで置き換えます。</target>
        </trans-unit>
        <trans-unit id="53087331adad76acaddcc600bbcf93a9c82fcd8b" translate="yes" xml:space="preserve">
          <source>Report the index of some elements in the array.</source>
          <target state="translated">配列内のいくつかの要素のインデックスを報告します。</target>
        </trans-unit>
        <trans-unit id="5e9a3bf6a560aa64c830e9db0985d0dfcd0ba1e0" translate="yes" xml:space="preserve">
          <source>Request Method</source>
          <target state="translated">リクエスト方法</target>
        </trans-unit>
        <trans-unit id="4c76b1be4e3aa28fa4d06646fbe476d10b22e4e6" translate="yes" xml:space="preserve">
          <source>Request the test.php page and send some additional data along (while still ignoring the return results).</source>
          <target state="translated">test.phpページをリクエストして、いくつかの追加データを一緒に送信します(戻り値を無視しながら)。</target>
        </trans-unit>
        <trans-unit id="24fc417d76f2849e2c64fcd03769a749fc4c02d4" translate="yes" xml:space="preserve">
          <source>Request the test.php page, but ignore the return results.</source>
          <target state="translated">test.phpページをリクエストしますが、戻り値は無視します。</target>
        </trans-unit>
        <trans-unit id="74a6c861840d7edd4e3d07a6e162d87643f6ac6d" translate="yes" xml:space="preserve">
          <source>Resolve a Deferred object and call any doneCallbacks with the given args.</source>
          <target state="translated">Deferredオブジェクトを解決し、与えられた引数を使って任意のdoneCallbacksを呼び出します。</target>
        </trans-unit>
        <trans-unit id="f310072e690bb2169c5202db5e456cb7ce4b4c1d" translate="yes" xml:space="preserve">
          <source>Resolve a Deferred object and call any doneCallbacks with the given context and args.</source>
          <target state="translated">Deferredオブジェクトを解決し、与えられたコンテキストとargsを使って任意のdoneCallbacksを呼び出します。</target>
        </trans-unit>
        <trans-unit id="73056f4840fff864dd823e5950a43e004a50bc9a" translate="yes" xml:space="preserve">
          <source>Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:</source>
          <target state="translated">ユーザーがボタンをクリックした時にDeferredオブジェクトを解決し、いくつかのコールバック関数をトリガーします。</target>
        </trans-unit>
        <trans-unit id="e738f391ed69af4fa52480f2a02b00f184f1e4e1" translate="yes" xml:space="preserve">
          <source>Resolve context and sole argument is the collection onto which &lt;code&gt;.promise()&lt;/code&gt; has been called.</source>
          <target state="translated">コンテキストを解決し、唯一の引数は &lt;code&gt;.promise()&lt;/code&gt; が呼び出されたコレクションです。</target>
        </trans-unit>
        <trans-unit id="f5f000a270f03c338bfc34fcaa0468e090d85559" translate="yes" xml:space="preserve">
          <source>Resolve the returned Promise using a &lt;code&gt;$.when()&lt;/code&gt; statement (the &lt;code&gt;.promise()&lt;/code&gt; method makes it possible to do this with jQuery collections):</source>
          <target state="translated">&lt;code&gt;$.when()&lt;/code&gt; ステートメントを使用して、返されたPromiseを解決します（ &lt;code&gt;.promise()&lt;/code&gt; メソッドを使用すると、jQueryコレクションでこれを実行できます）。</target>
        </trans-unit>
        <trans-unit id="d289e011b469f4a41e089433b54f9d3dc9dbfe03" translate="yes" xml:space="preserve">
          <source>Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):</source>
          <target state="translated">すべてのアニメーションが終了したときに、返された Promise を解決します(アニメーションのコールバックで開始されたものや後から追加されたものを含む)。</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="280702414af6806995b7134cb0d265cfea74a71c" translate="yes" xml:space="preserve">
          <source>Retrieval of shorthand CSS properties (e.g., &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;), although functional with some browsers, is not guaranteed. For example, if you want to retrieve the rendered &lt;code&gt;border-width&lt;/code&gt;, use: &lt;code&gt;$( elem ).css( &quot;borderTopWidth&quot; )&lt;/code&gt;, &lt;code&gt;$( elem ).css( &quot;borderBottomWidth&quot; )&lt;/code&gt;, and so on.</source>
          <target state="translated">一部のブラウザでは機能しますが、短縮CSSプロパティ（例： &lt;code&gt;margin&lt;/code&gt; 、 &lt;code&gt;background&lt;/code&gt; 、 &lt;code&gt;border&lt;/code&gt; ）の取得は保証されていません。たとえば、レンダリングされた &lt;code&gt;border-width&lt;/code&gt; を取得する場合は、 &lt;code&gt;$( elem ).css( &quot;borderTopWidth&quot; )&lt;/code&gt; 、 &lt;code&gt;$( elem ).css( &quot;borderBottomWidth&quot; )&lt;/code&gt; などを使用します。</target>
        </trans-unit>
        <trans-unit id="1ae0f93946ed2805d7338f39fdd2b9f13fc9388d" translate="yes" xml:space="preserve">
          <source>Retrieve all the elements contained in the jQuery set, as an array.</source>
          <target state="translated">jQueryセットに含まれるすべての要素を配列として取得します。</target>
        </trans-unit>
        <trans-unit id="c47ebe06b994778f04553202da80384f93ec7ae5" translate="yes" xml:space="preserve">
          <source>Retrieve the DOM elements matched by the jQuery object.</source>
          <target state="translated">jQuery オブジェクトにマッチした DOM 要素を取得します。</target>
        </trans-unit>
        <trans-unit id="9e479bed7e5542e5175525608c0a44b2c1fcf5d7" translate="yes" xml:space="preserve">
          <source>Retrieve the latest version of an HTML page.</source>
          <target state="translated">HTML ページの最新バージョンを取得します。</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="0155f7262e902273c19d5e538a1316f003b2cec2" translate="yes" xml:space="preserve">
          <source>Return a Deferred&amp;rsquo;s Promise object.</source>
          <target state="translated">DeferredのPromiseオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="3a487186e39ba43192e25c2d07c2ba9113b48b3a" translate="yes" xml:space="preserve">
          <source>Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.</source>
          <target state="translated">コレクションにバインドされている特定の型のアクションがキューに入っているかどうかに関わらず、すべてのアクションが終了したかどうかを監視するための Promise オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="7824bc1b97268a438f40660068804ec96b80b110" translate="yes" xml:space="preserve">
          <source>Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.</source>
          <target state="translated">渡された引数に基づいて DOM 内で見つかった、あるいは HTML 文字列を渡して作成された、マッチした要素のコレクションを返します。</target>
        </trans-unit>
        <trans-unit id="d9398e7ff5752487f63c609b69a5765a1fe72a74" translate="yes" xml:space="preserve">
          <source>Return a number representing the current time.</source>
          <target state="translated">現在の時刻を表す数値を返します。</target>
        </trans-unit>
        <trans-unit id="3464e4fd44ebfd6076f392976403b0abe1c38fff" translate="yes" xml:space="preserve">
          <source>Return the number of elements in the jQuery object.</source>
          <target state="translated">jQueryオブジェクトの要素数を返します。</target>
        </trans-unit>
        <trans-unit id="48f6da53395f5dc902c90077711039058fa4bf40" translate="yes" xml:space="preserve">
          <source>Return the version number of the rendering engine used by the user's current browser. For example, FireFox 4 returns 2.0 (the version of the Gecko rendering engine it utilizes). &lt;strong&gt;Will not work in jQuery 1.9 or later&lt;/strong&gt; unless the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt; plugin is included.</source>
          <target state="translated">ユーザーの現在のブラウザで使用されているレンダリングエンジンのバージョン番号を返します。たとえば、FireFox 4は2.0（使用するGeckoレンダリングエンジンのバージョン）を返します。&lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt;プラグインが含まれていない場合、jQuery &lt;strong&gt;1.9以降では機能しません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f3356d67954770e949ba2366aec0fa96e10d6e04" translate="yes" xml:space="preserve">
          <source>Return true if the current useragent is some version of Microsoft's Internet Explorer. &lt;strong&gt;Will not work in jQuery 1.9 or later&lt;/strong&gt; unless the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt; plugin is included.</source>
          <target state="translated">現在のユーザーエージェントがMicrosoftのInternet Explorerの一部のバージョンである場合はtrueを返します。&lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt;プラグインが含まれていない場合、jQuery &lt;strong&gt;1.9以降では機能しません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9f50100a0f1fca09b3a792dbaaaa792f960f542e" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;false&lt;/code&gt; from a handler is equivalent to calling both &lt;code&gt;.preventDefault()&lt;/code&gt; and &lt;code&gt;.stopPropagation()&lt;/code&gt; on the event object.</source>
          <target state="translated">ハンドラーから &lt;code&gt;false&lt;/code&gt; を返すことは、イベントオブジェクトで &lt;code&gt;.preventDefault()&lt;/code&gt; と &lt;code&gt;.stopPropagation()&lt;/code&gt; の両方を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="cacb5cbc3c9a29defe5998a16b32ad3376994a2c" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;false&lt;/code&gt; from an event handler will automatically call &lt;code&gt;event.stopPropagation()&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt;. A &lt;code&gt;false&lt;/code&gt; value can also be passed for the &lt;code&gt;handler&lt;/code&gt; as a shorthand for &lt;code&gt;function(){ return false; }&lt;/code&gt;. So, &lt;code&gt;$( &quot;a.disabled&quot; ).on( &quot;click&quot;, false );&lt;/code&gt; attaches an event handler to all links with class &quot;disabled&quot; that prevents them from being followed when they are clicked and also stops the event from bubbling.</source>
          <target state="translated">イベントハンドラーから &lt;code&gt;false&lt;/code&gt; を返すと、自動的に &lt;code&gt;event.stopPropagation()&lt;/code&gt; および &lt;code&gt;event.preventDefault()&lt;/code&gt; が呼び出されます。 &lt;code&gt;false&lt;/code&gt; 値は他にも渡すことができる &lt;code&gt;handler&lt;/code&gt; のための略記として &lt;code&gt;function(){ return false; }&lt;/code&gt; 。したがって、 &lt;code&gt;$( &quot;a.disabled&quot; ).on( &quot;click&quot;, false );&lt;/code&gt; イベントハンドラーを「無効」クラスのすべてのリンクにアタッチします。これにより、クリックされたときにリンクをたどることができなくなり、イベントのバブリングも停止します。</target>
        </trans-unit>
        <trans-unit id="5459c5e9a6bfcaa998770b0962a3243e0f3e2492" translate="yes" xml:space="preserve">
          <source>Returning an Empty Set</source>
          <target state="translated">空のセットを返す</target>
        </trans-unit>
        <trans-unit id="359ee285db1ab3497383b24058b385819a29afb7" translate="yes" xml:space="preserve">
          <source>Returns -1, as there is no element with ID foobar.</source>
          <target state="translated">ID foobar を持つ要素が存在しないので -1 を返します。</target>
        </trans-unit>
        <trans-unit id="24601238c8e49ca9e38cd6023c2beef68041e041" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Deferred object is in the rejected state, meaning that either &lt;a href=&quot;https://api.jquery.com/h/deferred.reject/&quot;&gt;&lt;code&gt;deferred.reject()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;deferred.rejectWith()&lt;/code&gt;&lt;/a&gt; has been called for the object and the failCallbacks have been called (or are in the process of being called).</source>
          <target state="translated">Deferredオブジェクトが拒否状態に &lt;code&gt;true&lt;/code&gt; 場合、つまり、オブジェクトに対して&lt;a href=&quot;https://api.jquery.com/h/deferred.reject/&quot;&gt; &lt;code&gt;deferred.reject()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;deferred.rejectwith&quot;&gt; &lt;code&gt;deferred.rejectWith()&lt;/code&gt; &lt;/a&gt;が呼び出され、failCallbacksが呼び出された（または呼び出されている）場合は、trueを返します。</target>
        </trans-unit>
        <trans-unit id="9dedf983f3b1620c2ac4eee00b8ab8ef38a14955" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Deferred object is in the resolved state, meaning that either &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;deferred.resolve()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;deferred.resolveWith()&lt;/code&gt;&lt;/a&gt; has been called for the object and the doneCallbacks have been called (or are in the process of being called).</source>
          <target state="translated">Deferredオブジェクトが解決された状態に &lt;code&gt;true&lt;/code&gt; 場合、つまり、オブジェクトに対して&lt;a href=&quot;deferred.resolve&quot;&gt; &lt;code&gt;deferred.resolve()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;deferred.resolvewith&quot;&gt; &lt;code&gt;deferred.resolveWith()&lt;/code&gt; &lt;/a&gt;が呼び出され、doneCallbacksが呼び出された（または呼び出されている）場合は、trueを返します。</target>
        </trans-unit>
        <trans-unit id="7e66d7a2f48c78a417819b8c659a7fcf4b7bec23" translate="yes" xml:space="preserve">
          <source>Returns a boolean value (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) that indicates whether or not the</source>
          <target state="translated">ブール値（ &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="d1ad30f7b515023713d6bc9f31009a6f3048d871" translate="yes" xml:space="preserve">
          <source>Returns an object containing the properties &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="translated">プロパティ &lt;code&gt;top&lt;/code&gt; および &lt;code&gt;left&lt;/code&gt; を含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a21a8e38cb37e60f58b7163fc87dcac1a82a39dd" translate="yes" xml:space="preserve">
          <source>Returns false, because the parent of the input is a p element.</source>
          <target state="translated">入力の親が p 要素なので false を返します。</target>
        </trans-unit>
        <trans-unit id="6d2be479c7c43a070dda61fc193794309f667f58" translate="yes" xml:space="preserve">
          <source>Returns the height of the element, including top and bottom padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">要素の高さを返します（上と下のパディング、境界線、オプションでマージンを含む）。要素の空のセットで呼び出された場合、 &lt;code&gt;undefined&lt;/code&gt; （jQuery 3.0以前は &lt;code&gt;null&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="bcb06190361244e70900f5938f0e2cd4070df363" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar in relation to all &amp;lt;li&amp;gt; elements.</source>
          <target state="translated">すべての&amp;lt;li&amp;gt;要素に関連するIDバーを持つ要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="b29dc2ed2dd9462cb6949e7b4789acfe0862cff6" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar in relation to its siblings.</source>
          <target state="translated">ID barを持つ要素の兄弟姉妹との関係を表すインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="14ebfc0e4de6cfe7d96bc5e85c508d46356efb50" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar.</source>
          <target state="translated">ID barを持つ要素のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="5bb8639b984c5a451bd2d2390409acfd9250e304" translate="yes" xml:space="preserve">
          <source>Returns the index for the first item in the jQuery collection.</source>
          <target state="translated">jQuery コレクションの最初の項目のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="b393ec4b75484f575ba14d5e0739f81c6524f060" translate="yes" xml:space="preserve">
          <source>Returns the width of the element, including left and right padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">要素の幅（左と右のパディング、ボーダー、オプションでマージンを含む）をピクセル単位で返します。要素の空のセットに対して呼び出された場合、 &lt;code&gt;undefined&lt;/code&gt; （jQuery 3.0以前は &lt;code&gt;null&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="a7ad448c0457fa47085de3d60015cdbdafb46dd4" translate="yes" xml:space="preserve">
          <source>Returns true, because the parent of the input is a form element.</source>
          <target state="translated">入力の親がフォーム要素であるため、trueを返します。</target>
        </trans-unit>
        <trans-unit id="4c048a48626665bb693a24abc82365df59c00522" translate="yes" xml:space="preserve">
          <source>Returns whether event.preventDefault() was ever called on this event object.</source>
          <target state="translated">このイベントオブジェクトに対して event.preventDefault()が呼び出されたことがあるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="0095bf521db1230ef8902af7b50cd23331098004" translate="yes" xml:space="preserve">
          <source>Returns whether event.stopImmediatePropagation() was ever called on this event object.</source>
          <target state="translated">このイベントオブジェクトに対して event.stopImmediatePropagation()が呼び出されたかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="46408a9586a191033969c174efbd68f66d5fd561" translate="yes" xml:space="preserve">
          <source>Returns whether event.stopPropagation() was ever called on this event object.</source>
          <target state="translated">このイベントオブジェクトに対して event.stopPropagation()が呼び出されたことがあるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="0074c61ba5de3729c365c438f4ab6d87823e2ac4" translate="yes" xml:space="preserve">
          <source>Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function's scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.</source>
          <target state="translated">エイリアスを元に戻してから、関数のスコープ内で jQuery エイリアスとして $ を提供する関数を作成して実行します。関数内では、元の $ オブジェクトは利用できません。これは、他のライブラリに依存しないほとんどのプラグインでうまく機能します。</target>
        </trans-unit>
        <trans-unit id="1559488e7282166b90ea314062f1988b483f6a31" translate="yes" xml:space="preserve">
          <source>Rewriting the &lt;code&gt;.live()&lt;/code&gt; method in terms of its successors is straightforward; these are templates for equivalent calls for all three event attachment methods:</source>
          <target state="translated">&lt;code&gt;.live()&lt;/code&gt; メソッドを後継者に関して書き換えることは簡単です。これらは、3つすべてのイベント接続メソッドの同等の呼び出しのテンプレートです。</target>
        </trans-unit>
        <trans-unit id="6aa2379f312caadc948aa7a9d8a823935a9b92fe" translate="yes" xml:space="preserve">
          <source>Right click to toggle background color.</source>
          <target state="translated">右クリックで背景色を切り替えます。</target>
        </trans-unit>
        <trans-unit id="cf8d2fa5b636bb50d3b782f2addcd9107ff85896" translate="yes" xml:space="preserve">
          <source>Run a function when the page is fully loaded including graphics.</source>
          <target state="translated">グラフィックを含むページが完全に読み込まれているときに関数を実行します。</target>
        </trans-unit>
        <trans-unit id="660eab7cf7994345058c6792c429efba21c440ff" translate="yes" xml:space="preserve">
          <source>Safari/Webkit: 312.8, 418.9</source>
          <target state="translated">Safari/Webkit.312.8,418.9</target>
        </trans-unit>
        <trans-unit id="b481f8b8e77e092a5a1b352b75b3cfd0447e1ee8" translate="yes" xml:space="preserve">
          <source>Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.</source>
          <target state="translated">上記と同じですが、追加のパラメータをサーバにPOSTし、サーバが応答を終了したときにコールバックを実行します。</target>
        </trans-unit>
        <trans-unit id="a3b49cbd8336bc28d30035edac48de5804dc67f0" translate="yes" xml:space="preserve">
          <source>Sample return values of $.isNumeric with various inputs.</source>
          <target state="translated">様々な入力を持つ $.isNumeric の戻り値のサンプル。</target>
        </trans-unit>
        <trans-unit id="0abcd8e11817cf7c75bccd6c0aefcb91a6a3cf65" translate="yes" xml:space="preserve">
          <source>Save some data to the server and notify the user once it's complete.</source>
          <target state="translated">一部のデータをサーバーに保存し、完了したらユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="00b39d4a46acdaf195c97b325431ddaef25894ae" translate="yes" xml:space="preserve">
          <source>Script Execution</source>
          <target state="translated">スクリプトの実行</target>
        </trans-unit>
        <trans-unit id="202dac1e22c03c214a8f5fffd9f44b1b2cb618ae" translate="yes" xml:space="preserve">
          <source>Script and JSONP requests are not subject to the same origin policy restrictions.</source>
          <target state="translated">スクリプトとJSONPリクエストは、同じオリジンポリシーの制限を受けません。</target>
        </trans-unit>
        <trans-unit id="cf964fefbb3826fdff4af7269ed955c203ad06cc" translate="yes" xml:space="preserve">
          <source>Scripts are included and run by referencing the file name:</source>
          <target state="translated">スクリプトが含まれており、ファイル名を参照して実行されます。</target>
        </trans-unit>
        <trans-unit id="e04c0f959a533f174ee286d4e56b7848c0439cfb" translate="yes" xml:space="preserve">
          <source>Search for a given element from among the matched elements.</source>
          <target state="translated">一致した要素の中から指定された要素を検索します。</target>
        </trans-unit>
        <trans-unit id="1a8f35ce561245fefe97e75ccbff02e4aa1d777d" translate="yes" xml:space="preserve">
          <source>Search for a specified value within an array and return its index (or -1 if not found).</source>
          <target state="translated">配列内で指定した値を検索し、そのインデックス(見つからなかった場合は-1)を返します。</target>
        </trans-unit>
        <trans-unit id="3874eae2f04a120390034d50dccc5a447635329f" translate="yes" xml:space="preserve">
          <source>Second handler for .toggle() called.</source>
          <target state="translated">.toggle()の2番目のハンドラが呼び出されました。</target>
        </trans-unit>
        <trans-unit id="402cc3b6686cd294cb10dd3f5bccbebd0edd8a9b" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
          <target state="translated">セキュリティへの配慮</target>
        </trans-unit>
        <trans-unit id="ba92a10db1bf37a49ca690a32bfa35980a52d5b7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;ready&quot;&gt;ready()&lt;/a&gt;&lt;/code&gt;, which makes use of this.</source>
          <target state="translated">これを利用する &lt;code&gt;&lt;a href=&quot;ready&quot;&gt;ready()&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="ee12851f210aec736c2971ffe71428d322573012" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;.trigger()&lt;/code&gt; method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.</source>
          <target state="translated">ハンドラーがバインドされているときではなく、イベントが発生したときにハンドラーにデータを渡す方法については、 &lt;code&gt;.trigger()&lt;/code&gt; メソッドリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="515509590fc48d1dfc5e4f8b29143dbb8193f498" translate="yes" xml:space="preserve">
          <source>See the discussions for &lt;code&gt;&lt;a href=&quot;mouseenter&quot;&gt;.mouseenter()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mouseleave&quot;&gt;.mouseleave()&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">詳細については、 &lt;code&gt;&lt;a href=&quot;mouseenter&quot;&gt;.mouseenter()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;mouseleave&quot;&gt;.mouseleave()&lt;/a&gt;&lt;/code&gt; の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="782b628d4d91647edbbce286bebc3f11f6b99ff5" translate="yes" xml:space="preserve">
          <source>Select all divs and filter the selection with a DOM element, keeping only the one with an id of &quot;unique&quot;.</source>
          <target state="translated">すべての div を選択して DOM 要素でフィルタリングし、id が &quot;unique&quot; のものだけを保持します。</target>
        </trans-unit>
        <trans-unit id="9e24ae5dde661b4bad6278b284056442f482322b" translate="yes" xml:space="preserve">
          <source>Select all divs and filter the selection with a jQuery object, keeping only the one with an id of &quot;unique&quot;.</source>
          <target state="translated">すべてのdivを選択し、jQueryオブジェクトでフィルタリングし、idが「ユニーク」のものだけを保持します。</target>
        </trans-unit>
        <trans-unit id="cbe0d297ed30bdc4c075085c5b9677952e2bd8b1" translate="yes" xml:space="preserve">
          <source>Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.</source>
          <target state="translated">ドキュメント内のすべての div を選択して DOM 要素を配列として返し、組み込みの reverse()メソッドを使用してその配列を反転させます。</target>
        </trans-unit>
        <trans-unit id="7855e410bbda7d87687eb82cfb4112e06544d1a0" translate="yes" xml:space="preserve">
          <source>Select all elements at an index greater than index within the matched set.</source>
          <target state="translated">一致したセット内のインデックスよりも大きいインデックスのすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="cebb6b46e90078f144ce6f483dfb711b165e3784" translate="yes" xml:space="preserve">
          <source>Select all elements at an index less than index within the matched set.</source>
          <target state="translated">一致したセット内のインデックス以下のインデックスのすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="6a16c88e4d2edf25e57b22ad8845aa0937c94c4e" translate="yes" xml:space="preserve">
          <source>Select all elements that are in the progress of an animation at the time the selector is run.</source>
          <target state="translated">セレクタ実行時にアニメーションの進行中の要素をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="2a0cff81da7ea1b148eaa387d47ad1b088d95c5d" translate="yes" xml:space="preserve">
          <source>Select all elements that contain the specified text.</source>
          <target state="translated">指定したテキストを含むすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="4e332684bab3aa1a45286a9f9d226898372975c7" translate="yes" xml:space="preserve">
          <source>Select all elements that have at least one child node (either an element or text).</source>
          <target state="translated">少なくとも1つの子ノード(要素またはテキストのいずれか)を持つすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="078d5d9e1ff6edf0eba91a609de0c95367226ef3" translate="yes" xml:space="preserve">
          <source>Select all elements that have no children (including text nodes).</source>
          <target state="translated">子のない要素(テキスト ノードを含む)をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="ed11e68f046d8dabef9e45adfed2a810b3f9160b" translate="yes" xml:space="preserve">
          <source>Select all the elements having a class name of &lt;code&gt;.box&lt;/code&gt; inside a &lt;code&gt;div&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;div&lt;/code&gt; 内のクラス名が &lt;code&gt;.box&lt;/code&gt; のすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="2ed3b7be96f2dbb88cd55ce061c434ce96bdeed1" translate="yes" xml:space="preserve">
          <source>Select elements that either don&amp;rsquo;t have the specified attribute, or do have the specified attribute but not with a certain value.</source>
          <target state="translated">指定された属性を持たないか、指定された属性を持っているが特定の値を持たない要素を選択します。</target>
        </trans-unit>
        <trans-unit id="5f6f1aa373c70e29d01f0f02d129effcd00f3046" translate="yes" xml:space="preserve">
          <source>Select the element at index n within the matched set.</source>
          <target state="translated">一致したセット内のインデックス n の要素を選択します。</target>
        </trans-unit>
        <trans-unit id="a0aec192d97708ea18466b753f9630549839da5e" translate="yes" xml:space="preserve">
          <source>Select the element with the id &quot;myDiv&quot; and give it a red border.</source>
          <target state="translated">id &quot;myDiv&quot; の要素を選択し、赤枠を付けます。</target>
        </trans-unit>
        <trans-unit id="184e3b053c117cadb8f38a32ba7ea866723de909" translate="yes" xml:space="preserve">
          <source>Select the element with the id &quot;myID.entry[1]&quot; and give it a red border. Note how certain characters must be escaped with backslashes.</source>
          <target state="translated">id &quot;myID.entry[1]の要素を選択し、赤枠を付けます。特定の文字をバックスラッシュでエスケープしなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fbc01c4deea127c5fcc07581ab0c87fd938aefa0" translate="yes" xml:space="preserve">
          <source>Selected elements are in the order of their appearance in the document.</source>
          <target state="translated">選択された要素は、ドキュメント内での出現順に表示されます。</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="a011a21a85c92351b0a96fb4148afac97921c94e" translate="yes" xml:space="preserve">
          <source>Selector Context</source>
          <target state="translated">セレクタコンテキスト</target>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="translated">Selectors</target>
        </trans-unit>
        <trans-unit id="63116277109d7d97ce78872faa8c5b4a7e78c9ad" translate="yes" xml:space="preserve">
          <source>Selects a single element with the given id attribute.</source>
          <target state="translated">与えられたid属性を持つ単一の要素を選択します。</target>
        </trans-unit>
        <trans-unit id="482db93da8e164b9b15b7851fb58f4b7485ddf00" translate="yes" xml:space="preserve">
          <source>Selects all button elements and elements of type button.</source>
          <target state="translated">すべてのボタン要素とタイプボタンの要素を選択します。</target>
        </trans-unit>
        <trans-unit id="3b9f66e97b3951a19308af594b4428e8f3fd8c91" translate="yes" xml:space="preserve">
          <source>Selects all direct child elements specified by &amp;ldquo;child&amp;rdquo; of elements specified by &amp;ldquo;parent&amp;rdquo;.</source>
          <target state="translated">「親」で指定された要素の「子」で指定されたすべての直接の子要素を選択します。</target>
        </trans-unit>
        <trans-unit id="ef672f0c3a28f7f033a7dcbc0a7617c7eb5fd4d2" translate="yes" xml:space="preserve">
          <source>Selects all elements of the specified language.</source>
          <target state="translated">指定した言語のすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="685a95b7c8b8e8075d10bae8c93c1e49b86d0916" translate="yes" xml:space="preserve">
          <source>Selects all elements of type checkbox.</source>
          <target state="translated">タイプチェックボックスのすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="729ba3926411637f6f92f2c5a8b1914bc62c7ed5" translate="yes" xml:space="preserve">
          <source>Selects all elements of type file.</source>
          <target state="translated">タイプファイルのすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="55f79e80dac38c8c301c8991025d4d361d7a906e" translate="yes" xml:space="preserve">
          <source>Selects all elements of type image.</source>
          <target state="translated">タイプ画像のすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="d34fd4cfbc0399e6b2df0f37aace806c64a4aff7" translate="yes" xml:space="preserve">
          <source>Selects all elements of type password.</source>
          <target state="translated">パスワード型のすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="192e0aacd3796ba9c13cfe7c6bcd3f583a2319e5" translate="yes" xml:space="preserve">
          <source>Selects all elements of type radio.</source>
          <target state="translated">タイプラジオの全要素を選択します。</target>
        </trans-unit>
        <trans-unit id="dea966d1699da730e5da44991d47a4dad2469c8a" translate="yes" xml:space="preserve">
          <source>Selects all elements of type reset.</source>
          <target state="translated">リセット型のすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="987673eb93dba4606dfa7dcb9aa307074d61d7f7" translate="yes" xml:space="preserve">
          <source>Selects all elements of type submit.</source>
          <target state="translated">submit型のすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="b46fc94979eabceeefefadcb7eb1c9fefdf76622" translate="yes" xml:space="preserve">
          <source>Selects all elements that are descendants of a given ancestor.</source>
          <target state="translated">指定された祖先の子孫であるすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="1a2f603851e201c12f75a1069d11f1cb3d8cfc13" translate="yes" xml:space="preserve">
          <source>Selects all elements that are disabled.</source>
          <target state="translated">無効化されているすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="081277be0ebc8652f793ffddd406046bc39328e7" translate="yes" xml:space="preserve">
          <source>Selects all elements that are enabled.</source>
          <target state="translated">有効になっているすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="38e5ee2ab29fb97bf2d880192e4ba13d80f49fe2" translate="yes" xml:space="preserve">
          <source>Selects all elements that are headers, like h1, h2, h3 and so on.</source>
          <target state="translated">h1,h2,h3 などのように、ヘッダであるすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="26e6c5d52d7420f51b1c55caf7b42dc914aed0ba" translate="yes" xml:space="preserve">
          <source>Selects all elements that are hidden.</source>
          <target state="translated">非表示になっている要素をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="c40bee64ad5f728527b96e701535aebabf850663" translate="yes" xml:space="preserve">
          <source>Selects all elements that are selected.</source>
          <target state="translated">選択されているすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="1b12630f2059e80cfc555f557f369d2665cf95e8" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the first among siblings of the same element name.</source>
          <target state="translated">同じ要素名の兄弟の中で最初の要素をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="fb8f6ff10437a0d5ca2c23bc1b677e18d4ca7759" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the first child of their parent.</source>
          <target state="translated">親の最初の子であるすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="a4ba5db42bd0a7552cba89a906e47a3099d8e085" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the last among siblings of the same element name.</source>
          <target state="translated">同じ要素名の兄弟の中で最後になる要素をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="45549a1c55d46c0024d955d6df5a947b2244e626" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the last child of their parent.</source>
          <target state="translated">親の最後の子であるすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="5613b91eb8e4a91b0b62860da066a6409a5da41f" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth child of their parent in relation to siblings with the same element name.</source>
          <target state="translated">同じ要素名を持つ兄弟との関係で、親のn番目の子であるすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="b8d0cf76044daf07017ffbe5139c0b5be66be6e3" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth-child of their parent, counting from the last element to the first.</source>
          <target state="translated">親のn番目の子であるすべての要素を、最後の要素から最初の要素まで数えて選択します。</target>
        </trans-unit>
        <trans-unit id="f6a62951da436f74e1779c00a0d2636092fcd06f" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth-child of their parent.</source>
          <target state="translated">親のn番目の子であるすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="0b756624b2efc7b2d985cec25dbd9d959cbf5542" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the only child of their parent.</source>
          <target state="translated">親の唯一の子であるすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="c33f0d3cfa91120c35c1a70d896db8fa10fa5cfa" translate="yes" xml:space="preserve">
          <source>Selects all elements that are visible.</source>
          <target state="translated">表示されているすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="42d4c24b60721feb1dd9d648286569d67c6decf2" translate="yes" xml:space="preserve">
          <source>Selects all elements that do not match the given selector.</source>
          <target state="translated">指定されたセレクタにマッチしないすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="6cffcf142b731498a68da13d990cb3881c08f3a7" translate="yes" xml:space="preserve">
          <source>Selects all elements that have no siblings with the same element name.</source>
          <target state="translated">同じ要素名の兄弟がいない要素をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="db68910a7f845b35cad42db773fd76e022bbe51e" translate="yes" xml:space="preserve">
          <source>Selects all elements with the given class.</source>
          <target state="translated">与えられたクラスを持つすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="735daee6abc2bc6517bec931773efa945ec5f209" translate="yes" xml:space="preserve">
          <source>Selects all elements with the given tag name.</source>
          <target state="translated">与えられたタグ名を持つすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="2f12468efd2facd408d097c678258691580c27ac" translate="yes" xml:space="preserve">
          <source>Selects all elements.</source>
          <target state="translated">すべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="c1dd09ad2abd8bb82a9497a60d0c74bead91f016" translate="yes" xml:space="preserve">
          <source>Selects all input elements of type text.</source>
          <target state="translated">テキスト型の入力要素をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="67a140314a46ae08098b1cf57a72cd5e5b79dbf8" translate="yes" xml:space="preserve">
          <source>Selects all input, textarea, select and button elements.</source>
          <target state="translated">入力、テキストエリア、選択、ボタンの要素をすべて選択します。</target>
        </trans-unit>
        <trans-unit id="e98be8e688a58a0d9de44bd93af5f4d660a54186" translate="yes" xml:space="preserve">
          <source>Selects all next elements matching &amp;ldquo;next&amp;rdquo; that are immediately preceded by a sibling &amp;ldquo;prev&amp;rdquo;.</source>
          <target state="translated">兄弟「prev」の直前にある「next」に一致する次のすべての要素を選択します。</target>
        </trans-unit>
        <trans-unit id="babcc76f8a2eaf292d41e9909b833b8237f646ae" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs and wraps a bold tag around each of its contents.</source>
          <target state="translated">すべての段落を選択し、それぞれの内容に太字タグを付けます。</target>
        </trans-unit>
        <trans-unit id="a36835c1acf647c040ba63700c2b735fd5c7fc17" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs and wraps a jQuery object around each of its contents.</source>
          <target state="translated">すべての段落を選択し、それぞれの内容の周りに jQuery オブジェクトをラップします。</target>
        </trans-unit>
        <trans-unit id="5a4bed91efb6f9a5909cee1551b5f05d2ea34bcc" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.</source>
          <target state="translated">すべての段落を選択し、その中からスパン要素を見つけ、選択を段落に戻します。</target>
        </trans-unit>
        <trans-unit id="3e93b210ae8a95c62b43b6793d537e7f57acf9b4" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the first and second element.</source>
          <target state="translated">すべての段落を選択し、最初と2番目の要素のみを含むように選択範囲をスライスします。</target>
        </trans-unit>
        <trans-unit id="40adcf5a3954c3a02b0e9920716d96f0495862a7" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the first element.</source>
          <target state="translated">すべての段落を選択し、最初の要素のみを含むように選択範囲をスライスします。</target>
        </trans-unit>
        <trans-unit id="ec45fca921a8472039aed007f1489458e13f5e14" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the second and third element.</source>
          <target state="translated">すべての段落を選択し、2番目と3番目の要素のみを含むように選択範囲をスライスします。</target>
        </trans-unit>
        <trans-unit id="f73e8e58454342c473503c63ec8b67e25eff53a9" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the second element.</source>
          <target state="translated">すべての段落を選択し、2番目の要素のみを含むように選択範囲をスライスします。</target>
        </trans-unit>
        <trans-unit id="4a7f2a84a50d64036622e9ea7f84c18196201fcb" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the third element.</source>
          <target state="translated">すべての段落を選択し、3番目の要素のみを含むように選択範囲をスライスします。</target>
        </trans-unit>
        <trans-unit id="6dfd21f77934c962c426762b941607d856ccd3d9" translate="yes" xml:space="preserve">
          <source>Selects all sibling elements that follow after the &amp;ldquo;prev&amp;rdquo; element, have the same parent, and match the filtering &amp;ldquo;siblings&amp;rdquo; selector.</source>
          <target state="translated">「prev」要素の後に続くすべての兄弟要素を選択し、同じ親を持ち、フィルタリング「兄弟」セレクターに一致させます。</target>
        </trans-unit>
        <trans-unit id="a1df6d8eebdb436cfb94e26403dd9dd4e367a2a1" translate="yes" xml:space="preserve">
          <source>Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.</source>
          <target state="translated">同じ要素名を持つ兄弟との関係で、親のn番目の子であるすべての要素を、最後の要素から最初の要素まで数えて選択します。</target>
        </trans-unit>
        <trans-unit id="312ea0332b53f2d1c1ca581f055d2ebc1e2ffad0" translate="yes" xml:space="preserve">
          <source>Selects element if it is currently focused.</source>
          <target state="translated">現在フォーカスされている要素を選択します。</target>
        </trans-unit>
        <trans-unit id="1e7db4b62b14c64c2e4cda50f4bf4783bb8620fd" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value beginning exactly with a given string.</source>
          <target state="translated">指定された文字列から正確に始まる値を持つ指定された属性を持つ要素を選択します。</target>
        </trans-unit>
        <trans-unit id="d63e53805e9ae87e087a6c4a2e272a6ba8b049f4" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value containing a given substring.</source>
          <target state="translated">与えられた部分文字列を含む値を持つ指定された属性を持つ要素を選択します。</target>
        </trans-unit>
        <trans-unit id="0fec2cdb00e09613c374738870cc066ab8656d06" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.</source>
          <target state="translated">スペースで区切られた指定された単語を含む値を持つ指定された属性を持つ要素を選択します。</target>
        </trans-unit>
        <trans-unit id="79509ca2d65ee7fcb7c2f017f07b922c6fba591c" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).</source>
          <target state="translated">指定された文字列に等しいか、またはその文字列で始まるハイフン(-)で始まる値を持つ指定された属性を持つ要素を選択します。</target>
        </trans-unit>
        <trans-unit id="7d140cea9061a89351adf37936c907030724897b" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.</source>
          <target state="translated">指定された文字列で正確に終わる値を持つ指定された属性を持つ要素を選択します。比較は大文字と小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="6bf83f200cc3513db41d467baef2dc38b33ece19" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value exactly equal to a certain value.</source>
          <target state="translated">指定された属性を持つ要素の中から、指定された値と全く同じ値を持つ要素を選択します。</target>
        </trans-unit>
        <trans-unit id="e85f9af968eff1005189e62ff883be9f5f43b779" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute, with any value.</source>
          <target state="translated">指定された属性を持つ要素を任意の値で選択します。</target>
        </trans-unit>
        <trans-unit id="0bd58b1254b6b26c9b64245aa8dc2848547a1b12" translate="yes" xml:space="preserve">
          <source>Selects elements which contain at least one element that matches the specified selector.</source>
          <target state="translated">指定されたセレクタに一致する要素を少なくとも1つ含む要素を選択します。</target>
        </trans-unit>
        <trans-unit id="bb8098251a2d5dddf2c727e3d9305899015fbdc5" translate="yes" xml:space="preserve">
          <source>Selects even elements, zero-indexed. See also :odd.</source>
          <target state="translated">偶数要素を選択します。oddも参照してください。</target>
        </trans-unit>
        <trans-unit id="7e1685294709e1c314ca9794952e46def1ccffc8" translate="yes" xml:space="preserve">
          <source>Selects even elements, zero-indexed. See also odd.</source>
          <target state="translated">偶数要素、ゼロインデックスを選択します。奇数も参照してください。</target>
        </trans-unit>
        <trans-unit id="ddf9894cd11d15fcd2657689963b9ac71094adbe" translate="yes" xml:space="preserve">
          <source>Selects odd elements, zero-indexed. See also :even.</source>
          <target state="translated">ゼロインデックスの奇数要素を選択します。偶数要素も参照してください。</target>
        </trans-unit>
        <trans-unit id="46aa50381d2d25466bef54d53815431b627d34bc" translate="yes" xml:space="preserve">
          <source>Selects odd elements, zero-indexed. See also even.</source>
          <target state="translated">ゼロインデックスの奇数要素を選択します。偶数も参照してください。</target>
        </trans-unit>
        <trans-unit id="5622e64ee47169c9d0b5c6a2d78bb2292d00e373" translate="yes" xml:space="preserve">
          <source>Selects the combined results of all the specified selectors.</source>
          <target state="translated">指定されたすべてのセレクタの組み合わせ結果を選択します。</target>
        </trans-unit>
        <trans-unit id="4230b70ef603ecf99fe4ec7887bd23aebeedc064" translate="yes" xml:space="preserve">
          <source>Selects the element that is the root of the document.</source>
          <target state="translated">ドキュメントのルートとなる要素を選択します。</target>
        </trans-unit>
        <trans-unit id="49fed8752aaf1e141ae7f7d82020c77946dd72e7" translate="yes" xml:space="preserve">
          <source>Selects the first matched DOM element.</source>
          <target state="translated">最初にマッチした DOM 要素を選択します。</target>
        </trans-unit>
        <trans-unit id="2c838dc34a573624d02bead0b7f78130d08b37fb" translate="yes" xml:space="preserve">
          <source>Selects the last matched element.</source>
          <target state="translated">最後にマッチした要素を選択します。</target>
        </trans-unit>
        <trans-unit id="1a2d74b9291de2f58c0821fcefd52a614afff7c7" translate="yes" xml:space="preserve">
          <source>Selects the target element indicated by the fragment identifier of the document&amp;rsquo;s URI.</source>
          <target state="translated">ドキュメントのURIのフラグメント識別子で示されるターゲット要素を選択します。</target>
        </trans-unit>
        <trans-unit id="2122d88e2a64d624031df153ff3972e8b9ccc281" translate="yes" xml:space="preserve">
          <source>Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.</source>
          <target state="translated">idをデータとしてサーバに送信し、サーバにデータをいくつか保存し、完了したらユーザに通知する。リクエストが失敗した場合は、ユーザにアラートを出す。</target>
        </trans-unit>
        <trans-unit id="8658ae1466bf527e3dd6d98e514ecee8b2407051" translate="yes" xml:space="preserve">
          <source>Send an xml document as data to the server. By setting the processData option to &lt;code&gt;false&lt;/code&gt;, the automatic conversion of data to strings is prevented.</source>
          <target state="translated">xmlドキュメントをデータとしてサーバーに送信します。 processDataオプションを &lt;code&gt;false&lt;/code&gt; に設定することにより、データの文字列への自動変換が防止されます。</target>
        </trans-unit>
        <trans-unit id="cfeaf157e7c56723921c0be996a0d8049614529b" translate="yes" xml:space="preserve">
          <source>Send data to the server using a HTTP POST request.</source>
          <target state="translated">HTTP POSTリクエストを使用してサーバーにデータを送信します。</target>
        </trans-unit>
        <trans-unit id="f0fef2b9897872624f0e3c46dd2f2183fdfe4a41" translate="yes" xml:space="preserve">
          <source>Send form data using Ajax requests</source>
          <target state="translated">Ajaxリクエストを使ったフォームデータの送信</target>
        </trans-unit>
        <trans-unit id="be8b3341b920b4556b27849ea3923b035e535304" translate="yes" xml:space="preserve">
          <source>Sending Data to the Server</source>
          <target state="translated">サーバーへのデータ送信</target>
        </trans-unit>
        <trans-unit id="a144807841a866abac7a53c6a9b994f2e222cbcd" translate="yes" xml:space="preserve">
          <source>Serialize a few complex objects</source>
          <target state="translated">いくつかの複雑なオブジェクトをシリアライズする</target>
        </trans-unit>
        <trans-unit id="63ed5c2f8e78737fd1b3ff7eb6e1b49ee3fd6932" translate="yes" xml:space="preserve">
          <source>Serialize a form to a query string that could be sent to a server in an Ajax request.</source>
          <target state="translated">フォームをシリアライズして、Ajax リクエストでサーバに送信できるクエリ文字列にします。</target>
        </trans-unit>
        <trans-unit id="4043fe2f1e4cc1ee5d8c65c313d48f13fbe5266c" translate="yes" xml:space="preserve">
          <source>Serialize a key/value object.</source>
          <target state="translated">キー/値オブジェクトをシリアライズします。</target>
        </trans-unit>
        <trans-unit id="2850b89694c0db105340f97fab4f4f0df4f4daae" translate="yes" xml:space="preserve">
          <source>Set a data store for 2 names then remove one of them.</source>
          <target state="translated">2つの名前のデータストアを設定し、そのうちの1つを削除します。</target>
        </trans-unit>
        <trans-unit id="d3d5f0b576f04613a8af8da1221bad86abac9bb8" translate="yes" xml:space="preserve">
          <source>Set a numeric property on a paragraph and then remove it.</source>
          <target state="translated">段落に数値プロパティを設定してから削除します。</target>
        </trans-unit>
        <trans-unit id="415e9fa442913c0ff5bb0b2da457a3e5aa4630ea" translate="yes" xml:space="preserve">
          <source>Set a queue array to delete the queue.</source>
          <target state="translated">キューを削除するキュー配列を設定します。</target>
        </trans-unit>
        <trans-unit id="01fda2b6f88cc560db78cdb5721b1d4bf9e5ab95" translate="yes" xml:space="preserve">
          <source>Set a single select, a multiple select, checkboxes and a radio button .</source>
          <target state="translated">シングルセレクト、マルチセレクト、チェックボックス、ラジオボタンを設定します。</target>
        </trans-unit>
        <trans-unit id="dcd7e7e02ddf83e40cbae07a5022ad13b4ff3295" translate="yes" xml:space="preserve">
          <source>Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with &lt;a href=&quot;jquery.ajaxsetup&quot;&gt;$.ajaxSetup()&lt;/a&gt;. The timeout period starts at the point the &lt;code&gt;$.ajax&lt;/code&gt; call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. &lt;strong&gt;In jQuery 1.4.x and below,&lt;/strong&gt; the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. &lt;strong&gt;In Firefox 3.0+ only,&lt;/strong&gt; script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.</source>
          <target state="translated">リクエストのタイムアウト（ミリ秒単位）を設定します。値0は、タイムアウトがないことを意味します。これにより、&lt;a href=&quot;jquery.ajaxsetup&quot;&gt;$ .ajaxSetup（）で&lt;/a&gt;設定されたグローバルタイムアウトが上書きされます。タイムアウト期間は、 &lt;code&gt;$.ajax&lt;/code&gt; 呼び出しが行われた時点から始まります。他のいくつかの要求が進行中で、ブラウザーに使用可能な接続がない場合、要求が送信される前にタイムアウトになる可能性があります。&lt;strong&gt;jQuery 1.4.x以下で&lt;/strong&gt;は、リクエストがタイムアウトした場合、XMLHttpRequestオブジェクトは無効な状態になります。オブジェクトメンバーにアクセスすると、例外がスローされる場合があります。&lt;strong&gt;Firefox 3.0以降のみ、&lt;/strong&gt;スクリプトおよびJSONPリクエストはタイムアウトによってキャンセルできません。スクリプトは、タイムアウト期間後に到着しても実行されます。</target>
        </trans-unit>
        <trans-unit id="a75045c3e7e4e41869961e4536a201841a37d8d4" translate="yes" xml:space="preserve">
          <source>Set a timer to delay execution of subsequent items in the queue.</source>
          <target state="translated">キュー内の後続の項目の実行を遅らせるタイマーを設定します。</target>
        </trans-unit>
        <trans-unit id="29bc597e05b5611f7a75e1d0062b8b589d81d71d" translate="yes" xml:space="preserve">
          <source>Set data on an element and see the results of hasData.</source>
          <target state="translated">要素にデータを設定して、hasDataの結果を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="4df763c8781cee89c94fb1655e6b6f2638cf5b8b" translate="yes" xml:space="preserve">
          <source>Set default values for future Ajax requests. Its use is not recommended.</source>
          <target state="translated">今後のAjaxリクエストのデフォルト値を設定します。この使用は推奨されません。</target>
        </trans-unit>
        <trans-unit id="b8efd5c0d5323f84aaea2833f9663ce507ef5110" translate="yes" xml:space="preserve">
          <source>Set some attributes for all &amp;lt;img&amp;gt;s in the page.</source>
          <target state="translated">ページ内のすべての&amp;lt;img&amp;gt;にいくつかの属性を設定します。</target>
        </trans-unit>
        <trans-unit id="097a25d652bf055f7a137ff2a570d4f0be2804f8" translate="yes" xml:space="preserve">
          <source>Set the background color of the page to black.</source>
          <target state="translated">ページの背景色を黒に設定します。</target>
        </trans-unit>
        <trans-unit id="ee26402c1121939de683a5e3c569d8b6b4059083" translate="yes" xml:space="preserve">
          <source>Set the id for divs based on the position in the page.</source>
          <target state="translated">ページ内の位置を基準としたdivのidを設定します。</target>
        </trans-unit>
        <trans-unit id="1b434d70d1b6398f4a48de9838e66013be0964e4" translate="yes" xml:space="preserve">
          <source>Set the offset of the second paragraph:</source>
          <target state="translated">2段落目のオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="4fab112a16558193a664503706e6bdc9b834ddb3" translate="yes" xml:space="preserve">
          <source>Set the scrollLeft of a div.</source>
          <target state="translated">divのscrollLeftを設定します。</target>
        </trans-unit>
        <trans-unit id="80de7325e36ebaf59890fde0787ee0978812d6fd" translate="yes" xml:space="preserve">
          <source>Set the scrollTop of a div.</source>
          <target state="translated">divのscrollTopを設定します。</target>
        </trans-unit>
        <trans-unit id="501160f93f7aac197ef0a4afa5136de4c99128c1" translate="yes" xml:space="preserve">
          <source>Set the src attribute from title attribute on the image.</source>
          <target state="translated">画像のtitle属性からsrc属性を設定します。</target>
        </trans-unit>
        <trans-unit id="0eb0fd641752abcc5ef3043a7964e10a309c836b" translate="yes" xml:space="preserve">
          <source>Set the value of an input box.</source>
          <target state="translated">入力ボックスの値を設定します。</target>
        </trans-unit>
        <trans-unit id="4c430c240166834ea88c0ed7281d7fd5e5999f98" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; if you wish to use the traditional style of &lt;a href=&quot;jquery.param&quot;&gt;param serialization&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;jquery.param&quot;&gt;paramシリアライゼーションの&lt;/a&gt;従来のスタイルを使用する場合は、これを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="4fc8d2b9d04536e217f8d6ee7a88a0bafbd2135d" translate="yes" xml:space="preserve">
          <source>Sets the defaults for Ajax requests to the url &quot;/xmlhttp/&quot;, disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.</source>
          <target state="translated">AjaxリクエストのデフォルトをURL &quot;/xmlhttp/&quot;に設定し、グローバルハンドラを無効にし、GETではなくPOSTを使用します。次のAjaxリクエストは、他に何も設定しなくても、いくつかのデータを送信します。</target>
        </trans-unit>
        <trans-unit id="1bc9506ed518c2ffaaeed5c77bcc37e4fff485f4" translate="yes" xml:space="preserve">
          <source>Setting a simple attribute</source>
          <target state="translated">単純な属性の設定</target>
        </trans-unit>
        <trans-unit id="48d2152c54739da04de91aee4b49440f02938b01" translate="yes" xml:space="preserve">
          <source>Setting several attributes at once</source>
          <target state="translated">複数の属性を一度に設定する</target>
        </trans-unit>
        <trans-unit id="47415531e62ab24a4bb2deca300877b6fef2b92e" translate="yes" xml:space="preserve">
          <source>Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.</source>
          <target state="translated">第3引数をFalseに設定すると、デフォルトのアクションが発生しないようにしてイベントがバブリングしないようにする関数がアタッチされます。デフォルトは true です。</target>
        </trans-unit>
        <trans-unit id="91f123ee7203e5bbd228a25c42679e0e53bd4cc4" translate="yes" xml:space="preserve">
          <source>Setting values using this method (or using the native &lt;code&gt;value&lt;/code&gt; property) does not cause the dispatch of the &lt;code&gt;change&lt;/code&gt; event. For this reason, the relevant event handlers will not be executed. If you want to execute them, you should call &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; after setting the value.</source>
          <target state="translated">このメソッドを使用して（またはネイティブの &lt;code&gt;value&lt;/code&gt; プロパティを使用して）値を設定しても、 &lt;code&gt;change&lt;/code&gt; イベントは送出されません。このため、関連するイベントハンドラーは実行されません。それらを実行したい場合は、値を設定した後に &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="469d5b183fdc0d59e41a51e61529cdd95274ba7c" translate="yes" xml:space="preserve">
          <source>Shift</source>
          <target state="translated">Shift</target>
        </trans-unit>
        <trans-unit id="db6af5aa39d7397cfe1ad95f101c0b53b8393168" translate="yes" xml:space="preserve">
          <source>Shorthand CSS properties (e.g. font, background, border) are not fully supported. For example, if you want to animate the rendered border width, at least a border style and border width other than &quot;auto&quot; must be set in advance. Or, if you want to animate font size, you would use &lt;code&gt;fontSize&lt;/code&gt; or the CSS equivalent &lt;code&gt;'font-size'&lt;/code&gt; rather than simply &lt;code&gt;'font'&lt;/code&gt;.</source>
          <target state="translated">省略形のCSSプロパティ（フォント、背景、境界線など）は完全にはサポートされていません。たとえば、レンダリングされた境界線の幅をアニメーション化する場合は、少なくとも「auto」以外の境界線スタイルと境界線幅を事前に設定する必要があります。または、フォントサイズをアニメーション化する場合は、単に &lt;code&gt;'font'&lt;/code&gt; ではなく、 &lt;code&gt;fontSize&lt;/code&gt; またはCSSの同等の &lt;code&gt;'font-size'&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="13ce66dde31804d78c943c988b0dbf4d57737048" translate="yes" xml:space="preserve">
          <source>Should &lt;code&gt;.trigger( &quot;eventName&quot; )&lt;/code&gt; be used, it will search for an &quot;eventName&quot; property on the object and attempt to execute it after any attached jQuery handlers are executed. It does not check whether the property is a function or not. To avoid this behavior, &lt;code&gt;.triggerHandler( &quot;eventName&quot; )&lt;/code&gt; should be used instead.</source>
          <target state="translated">必要があります &lt;code&gt;.trigger( &quot;eventName&quot; )&lt;/code&gt; それは、オブジェクトの「eventNameの」プロパティを検索し、接続されているすべてのjQueryのハンドラが実行された後、それを実行しようとし、使用すること。プロパティが関数であるかどうかはチェックしません。この動作を回避するには、 &lt;code&gt;.triggerHandler( &quot;eventName&quot; )&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e22b139c05e4b38773ef90bc8904de0d27d90c20" translate="yes" xml:space="preserve">
          <source>Show a loading message whenever an Ajax request starts (and none is already active).</source>
          <target state="translated">Ajax リクエストが開始されるたびにロード中のメッセージを表示します (そして、すでにアクティブなものはありません)。</target>
        </trans-unit>
        <trans-unit id="9f252669f882d844dde09972cc0a4a1f2df2cda9" translate="yes" xml:space="preserve">
          <source>Show a message before an Ajax request is sent.</source>
          <target state="translated">Ajax リクエストを送信する前にメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="b476ab773e940c40b6948b21c71c228f1f11a21b" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request completes successfully.</source>
          <target state="translated">Ajax リクエストが正常に完了した場合にメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="7b41f7448fb41b38cd17cdcae79d3950abdd5520" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request completes.</source>
          <target state="translated">Ajax リクエストが完了したときにメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="05933287608489a9d52cfaf3e1830e781ba4aa9b" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request fails.</source>
          <target state="translated">Ajaxリクエストが失敗したときにメッセージを表示する</target>
        </trans-unit>
        <trans-unit id="519514a8001648e93ee443893ab4b92b963bc312" translate="yes" xml:space="preserve">
          <source>Show all span and input elements with an animation. Change the text once the animation is done.</source>
          <target state="translated">すべてのスパンと入力要素をアニメーションで表示します。アニメーションが終了したら、テキストを変更します。</target>
        </trans-unit>
        <trans-unit id="984335580fdfb879f6e3f885677f9f166cd1427f" translate="yes" xml:space="preserve">
          <source>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.</source>
          <target state="translated">closestを使ってイベントデリゲーションを行う方法を示します。closest リスト要素は、その要素またはその子孫がクリックされると、黄色の背景がトグルされます。</target>
        </trans-unit>
        <trans-unit id="0ae17c6ac132af952cc810c0dcc914e28fa26861" translate="yes" xml:space="preserve">
          <source>Show number of times mouseout and mouseleave events are triggered. &lt;code&gt;mouseout&lt;/code&gt; fires when the pointer moves out of child element as well, while &lt;code&gt;mouseleave&lt;/code&gt; fires only when the pointer moves out of the bound element.</source>
          <target state="translated">マウスアウトイベントとマウスリーブイベントがトリガーされた回数を表示します。 &lt;code&gt;mouseout&lt;/code&gt; は、ポインタが子要素の外に移動したときにも発生し、 &lt;code&gt;mouseleave&lt;/code&gt; は、ポインタがバインドされた要素の外に移動したときにのみ発生します。</target>
        </trans-unit>
        <trans-unit id="3625594e77ad218412dfedbe46982302913ad5ac" translate="yes" xml:space="preserve">
          <source>Show or manipulate the queue of functions to be executed on the matched element.</source>
          <target state="translated">マッチした要素に対して実行される関数のキューを表示または操作します。</target>
        </trans-unit>
        <trans-unit id="39761be7b983dab5e329662e5feed6f9934622b4" translate="yes" xml:space="preserve">
          <source>Show or manipulate the queue of functions to be executed on the matched elements.</source>
          <target state="translated">マッチした要素に対して実行される関数のキューを表示または操作します。</target>
        </trans-unit>
        <trans-unit id="16df6b0062351304bd84b3a27580952641a99624" translate="yes" xml:space="preserve">
          <source>Show texts when mouseenter and mouseout event triggering. &lt;code&gt;mouseover&lt;/code&gt; fires when the pointer moves into the child element as well, while &lt;code&gt;mouseenter&lt;/code&gt; fires only when the pointer moves into the bound element.</source>
          <target state="translated">mouseenterおよびmouseoutイベントがトリガーされたときにテキストを表示します。 &lt;code&gt;mouseover&lt;/code&gt; は、ポインタが子要素に移動したときにも発生しますが、 &lt;code&gt;mouseenter&lt;/code&gt; は、ポインタがバインドされた要素に移動したときにだけ発生します。</target>
        </trans-unit>
        <trans-unit id="f22e04704b0222408ca3a60fd105ab1256854512" translate="yes" xml:space="preserve">
          <source>Show texts when mouseup and mousedown event triggering.</source>
          <target state="translated">マウスアップ、マウスダウンイベントのトリガー時にテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="9b08505c4f67fcfe1818b9165cd3486bbdbc8c6c" translate="yes" xml:space="preserve">
          <source>Show the browser info.</source>
          <target state="translated">ブラウザ情報を表示します。</target>
        </trans-unit>
        <trans-unit id="ad19f5bdd2ca5c41c2e37f9cba8cb903d27e3050" translate="yes" xml:space="preserve">
          <source>Show the event object for the keydown handler when a key is pressed in the input.</source>
          <target state="translated">入力でキーが押されたときに、キーダウンハンドラのイベントオブジェクトを表示します。</target>
        </trans-unit>
        <trans-unit id="d93161b14d70830e3bea85c83d58f3562adbd85e" translate="yes" xml:space="preserve">
          <source>Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.</source>
          <target state="translated">入力でキーが解放されたときに、キーアップハンドラのイベントオブジェクトを表示します (シンプルな $.print プラグインを使用しています)。</target>
        </trans-unit>
        <trans-unit id="fa869efebfddd7c6615aaf04bfabcb5e6772b61b" translate="yes" xml:space="preserve">
          <source>Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (https://api.jquery.com/resources/events.js) for the event object's output.</source>
          <target state="translated">入力でキーが押されたときにイベントオブジェクトを表示します。注意:このデモでは、イベントオブジェクトの出力にシンプルな $.print()プラグイン (https://api.jquery.com/resources/events.js)を使用しています。</target>
        </trans-unit>
        <trans-unit id="a9896f8a3339a0df5ff5e1ecb5209d4930eb8f02" translate="yes" xml:space="preserve">
          <source>Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.</source>
          <target state="translated">最初の div を表示し、次に隣接する各兄弟 div を順番に表示します。それぞれのアニメーションは、前の兄弟ディブのアニメーションが終了したときに開始されます。</target>
        </trans-unit>
        <trans-unit id="9b6557600916e731608ebca494d2d50dcc744408" translate="yes" xml:space="preserve">
          <source>Show the length of the queue.</source>
          <target state="translated">キューの長さを表示します。</target>
        </trans-unit>
        <trans-unit id="b544befbd2f388b14fd260171b1cca0a42ebef79" translate="yes" xml:space="preserve">
          <source>Show the mouse coordinates when the mouse is moved over the yellow div. Coordinates are relative to the window, which in this case is the iframe.</source>
          <target state="translated">黄色いdivの上にマウスを移動させたときのマウス座標を表示します。座標はウィンドウに対する相対的なもので、この場合はiframeです。</target>
        </trans-unit>
        <trans-unit id="69f44bacb640a60b4ce5f71dd59e0939296ec35a" translate="yes" xml:space="preserve">
          <source>Show the mouse position relative to the left and top edges of the document (within this iframe).</source>
          <target state="translated">ドキュメントの左端と上端(このiframe内)に対するマウスの位置を表示します。</target>
        </trans-unit>
        <trans-unit id="47f8b628a56746aed654aec7b07b6ed34563e493" translate="yes" xml:space="preserve">
          <source>Show the number of times mouseout and mouseleave events are triggered. &lt;code&gt;mouseout&lt;/code&gt; fires when the pointer moves out of the child element as well, while &lt;code&gt;mouseleave&lt;/code&gt; fires only when the pointer moves out of the bound element.</source>
          <target state="translated">mouseoutおよびmouseleaveイベントがトリガーされた回数を表示します。 &lt;code&gt;mouseout&lt;/code&gt; は、ポインタが子要素の外に出たときにも起動し、 &lt;code&gt;mouseleave&lt;/code&gt; は、ポインタがバインドされた要素の外に出たときにのみ起動します。</target>
        </trans-unit>
        <trans-unit id="404a7c06b436d2f84162fadbf19e223dca32ae52" translate="yes" xml:space="preserve">
          <source>Show the number of times mouseover and mouseenter events are triggered. &lt;code&gt;mouseover&lt;/code&gt; fires when the pointer moves into the child element as well, while &lt;code&gt;mouseenter&lt;/code&gt; fires only when the pointer moves into the bound element.</source>
          <target state="translated">mouseoverイベントとmouseenterイベントがトリガーされた回数を表示します。 &lt;code&gt;mouseover&lt;/code&gt; は、ポインタが子要素に移動したときにも発生しますが、 &lt;code&gt;mouseenter&lt;/code&gt; は、ポインタがバインドされた要素に移動したときにだけ発生します。</target>
        </trans-unit>
        <trans-unit id="090aa960971137d74c0e2c71583ff9a73df44c91" translate="yes" xml:space="preserve">
          <source>Show the order in the jQuery object.</source>
          <target state="translated">jQueryオブジェクト内の順序を表示します。</target>
        </trans-unit>
        <trans-unit id="71a35cb28a1beadceaa3c6e2209e0fec267e3777" translate="yes" xml:space="preserve">
          <source>Show various heights. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</source>
          <target state="translated">様々な高さを表示します。値はiframeからのものなので、思ったよりも小さいかもしれないことに注意してください。黄色のハイライトはiframeの本体を示しています。</target>
        </trans-unit>
        <trans-unit id="9473936f01cbca6d69f1dece6d43856b6724edb6" translate="yes" xml:space="preserve">
          <source>Show various widths. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</source>
          <target state="translated">様々な幅を表示します。値はiframeからのものなので、思ったよりも小さいかもしれないことに注意してください。黄色のハイライトはiframeの本体を示しています。</target>
        </trans-unit>
        <trans-unit id="c33e45b32872d9e6db475a6df01ad1c0aa074865" translate="yes" xml:space="preserve">
          <source>Shows a few ways is() can be used inside an event handler.</source>
          <target state="translated">イベントハンドラの中で is()を使用する方法をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="9f80a91d7a7e65cd7176b7698d0ff5aa4efc6c25" translate="yes" xml:space="preserve">
          <source>Shows all hidden divs and counts hidden inputs.</source>
          <target state="translated">すべての非表示の div を表示し、非表示の入力をカウントします。</target>
        </trans-unit>
        <trans-unit id="23f883856a4edafeed47bb6a4844925a9fdd3ac1" translate="yes" xml:space="preserve">
          <source>Shows all paragraphs, then hides them all, back and forth.</source>
          <target state="translated">すべての段落を表示して、前後の段落を隠します。</target>
        </trans-unit>
        <trans-unit id="3a32e745a60f4a870e675d1abfd69e6874c3fdb2" translate="yes" xml:space="preserve">
          <source>Shows the parent of each element as (parent &amp;gt; child). Check the View Source to see the raw html.</source>
          <target state="translated">各要素の親を（親&amp;gt;子）として表示します。ソースの表示をチェックして、未加工のHTMLを確認します。</target>
        </trans-unit>
        <trans-unit id="bc96ba5e16ff60d54045222bd716907b909f13a1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;empty&quot;&gt;.empty()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;.remove()&lt;/code&gt; method takes elements out of the DOM. Use &lt;code&gt;.remove()&lt;/code&gt; when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed. To remove the elements without removing data and events, use &lt;code&gt;&lt;a href=&quot;detach&quot;&gt;.detach()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;empty&quot;&gt;.empty()&lt;/a&gt;&lt;/code&gt; と同様に、 &lt;code&gt;.remove()&lt;/code&gt; メソッドはDOMから要素を取り出します。要素自体だけでなく、要素内のすべてを削除する場合は、 &lt;code&gt;.remove()&lt;/code&gt; を使用します。要素自体に加えて、要素に関連付けられたすべてのバインドされたイベントとjQueryデータが削除されます。データとイベントを削除せずに要素を削除するには、代わりに &lt;code&gt;&lt;a href=&quot;detach&quot;&gt;.detach()&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fc3d4b313a79ee01993258bfb62f9d7410a27b2f" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.prepend()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; などの他のコンテンツ追加メソッドと同様に、 &lt;code&gt;.prepend()&lt;/code&gt; も複数の引数を入力として渡すことをサポートしています。サポートされる入力には、DOM要素、jQueryオブジェクト、HTML文字列、およびDOM要素の配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="a1b7b3cb192f9f19b267d26bdb4a4b8da9505760" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; などの他のコンテンツ追加メソッドと同様に、 &lt;code&gt;.before()&lt;/code&gt; も複数の引数を入力として渡すことをサポートしています。サポートされる入力には、DOM要素、jQueryオブジェクト、HTML文字列、およびDOM要素の配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="006392ad7e2187f99a07cd2030ba9a75d427ec4d" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.after()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; などの他のコンテンツ追加メソッドと同様に、 &lt;code&gt;.after()&lt;/code&gt; も複数の引数を入力として渡すことをサポートしています。サポートされる入力には、DOM要素、jQueryオブジェクト、HTML文字列、およびDOM要素の配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="df29cb0d48d7733d0bca93bbd664bfcac55e3e87" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.append()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; などの他のコンテンツ追加メソッドと同様に、 &lt;code&gt;.append()&lt;/code&gt; も複数の引数を入力として渡すことをサポートしています。サポートされる入力には、DOM要素、jQueryオブジェクト、HTML文字列、およびDOM要素の配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="43e7ddc0a9479bf30d1a0ff5889e2b9da87c3b03" translate="yes" xml:space="preserve">
          <source>Similarly, a handler can call &lt;code&gt;event.preventDefault()&lt;/code&gt; to cancel any default action that the browser may have for this event; for example, the default action on a &lt;code&gt;click&lt;/code&gt; event is to follow the link. Not all browser events have default actions, and not all default actions can be canceled. See the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/#event-types-list&quot;&gt;W3C Events Specification&lt;/a&gt; for details.</source>
          <target state="translated">同様に、ハンドラーは &lt;code&gt;event.preventDefault()&lt;/code&gt; を呼び出して、ブラウザーがこのイベントに対して持つ可能性のあるデフォルトのアクションをキャンセルできます。たとえば、 &lt;code&gt;click&lt;/code&gt; イベントに対するデフォルトのアクションは、リンクをたどることです。すべてのブラウザイベントにデフォルトアクションがあるわけではなく、すべてのデフォルトアクションをキャンセルできるわけではありません。詳細については、&lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/#event-types-list&quot;&gt;W3Cイベント仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ccc5cf9bc9bce46f452c1b0c6151b92830a99ee3" translate="yes" xml:space="preserve">
          <source>Similarly, an element may also be passed to find:</source>
          <target state="translated">同様に、要素を渡して検索することもできます。</target>
        </trans-unit>
        <trans-unit id="f9284b14e12238f3e08110b72509fd3a3bf2c689" translate="yes" xml:space="preserve">
          <source>Similarly, if we retrieve a jQuery object consisting of one of the three list items, &lt;code&gt;.index()&lt;/code&gt; will search for that list item:</source>
          <target state="translated">同様に、3つのリスト項目の1つで構成されるjQueryオブジェクトを取得すると、 &lt;code&gt;.index()&lt;/code&gt; はそのリスト項目を検索します。</target>
        </trans-unit>
        <trans-unit id="af3ab504fe94703d8bc8d32f7b6369c311849311" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.after()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;p&quot; ).first().after( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on the elements that are collected in the code.</source>
          <target state="translated">以来 &lt;code&gt;.after()&lt;/code&gt; は、追加の任意の数の引数を受け入れることができ、同様の結果が3に渡すことにより達成することができる &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ：sのようなので、3つの別々の引数、など &lt;code&gt;$( &quot;p&quot; ).first().after( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。引数のタイプと数は、コードで収集される要素に大きく依存します。</target>
        </trans-unit>
        <trans-unit id="2e9baad5e5717759e600d8fa39a59f53a3545d1b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.append()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$('body').append( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="translated">以来 &lt;code&gt;.append()&lt;/code&gt; 追加の任意の数の引数を受け入れることができ、同じ結果が3に渡すことによって実現することができる &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; そうのような3つの別々の引数としてS： &lt;code&gt;$('body').append( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。引数のタイプと数は、コード内の要素を収集する方法に大きく依存します。</target>
        </trans-unit>
        <trans-unit id="3866949d83d1435a9a87376fd01b8109f97bbae5" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.before()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;p&quot; ).first().before( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="translated">以来 &lt;code&gt;.before()&lt;/code&gt; 追加の任意の数の引数を受け入れることができ、同じ結果が3に渡すことによって達成することができ &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 3つの別々の引数なので、などの： &lt;code&gt;$( &quot;p&quot; ).first().before( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。引数のタイプと数は、コード内の要素を収集する方法に大きく依存します。</target>
        </trans-unit>
        <trans-unit id="9ff88230d8cf6f6e9a4f26e921ba3235226053a6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.prepend()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;body&quot; ).prepend( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="translated">以来 &lt;code&gt;.prepend()&lt;/code&gt; 追加の任意の数の引数を受け入れることができ、同じ結果を渡すことによって達成することができる3つ &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; の3つの別個の引数としてのようなので、： &lt;code&gt;$( &quot;body&quot; ).prepend( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。引数のタイプと数は、コード内の要素を収集する方法に大きく依存します。</target>
        </trans-unit>
        <trans-unit id="22770ea7aaf9fb3b5d0d4217e44d0619775c6eeb" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;jQuery 3&lt;/strong&gt;, every two-character sequence of &quot;-&quot; (U+002D) followed by a lowercase ASCII letter in a key is replaced by the uppercase version of the letter, in alignment with the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTML dataset API&lt;/a&gt;. A statement like &lt;code&gt;$( &quot;body&quot; ).data( { &quot;my-name&quot;: &quot;aValue&quot; } ).data();&lt;/code&gt; will return &lt;code&gt;{ myName: &quot;aValue&quot; }&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;jQuery 3&lt;/strong&gt;以降、「-」（U + 002D）の2文字のシーケンスごとに、キー内の小文字のASCII文字が、&lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTMLデータセットAPI&lt;/a&gt;に合わせて大文字バージョンの文字に置き換えられます。 &lt;code&gt;$( &quot;body&quot; ).data( { &quot;my-name&quot;: &quot;aValue&quot; } ).data();&lt;/code&gt; ようなステートメント &lt;code&gt;{ myName: &quot;aValue&quot; }&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="88b1ff6e137cf5a7674c0a4b1dd9506e55d3f239" translate="yes" xml:space="preserve">
          <source>Since all &lt;code&gt;.live()&lt;/code&gt; events are attached at the &lt;code&gt;document&lt;/code&gt; element, events take the longest and slowest possible path before they are handled.</source>
          <target state="translated">すべての &lt;code&gt;.live()&lt;/code&gt; イベントは &lt;code&gt;document&lt;/code&gt; 要素でアタッチされるため、イベントは処理される前に、最長で最も遅いパスを使用します。</target>
        </trans-unit>
        <trans-unit id="235d61f94fedb8dacf1f14cb572f293f702d3042" translate="yes" xml:space="preserve">
          <source>Since each request requires its own transport object instance, transports cannot be registered directly. Therefore, you should provide a function that returns a transport instead.</source>
          <target state="translated">各リクエストはそれ自身のトランスポートオブジェクトのインスタンスを必要とするので、トランスポートを直接登録することはできません。したがって、代わりにトランスポートを返す関数を提供すべきです。</target>
        </trans-unit>
        <trans-unit id="ce2a7c642237538647f2d47dcc1dde9059a17c23" translate="yes" xml:space="preserve">
          <source>Since jQuery 1.4.3, &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes&quot;&gt;&lt;code&gt;data-*&lt;/code&gt; attributes&lt;/a&gt; are used to initialize jQuery data. An element's &lt;code&gt;data-*&lt;/code&gt; attributes are retrieved the first time the &lt;code&gt;data()&lt;/code&gt; method is invoked upon it, and then are no longer accessed or mutated (all values are stored internally by jQuery).</source>
          <target state="translated">jQuery 1.4.3以降、&lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes&quot;&gt; &lt;code&gt;data-*&lt;/code&gt; 属性&lt;/a&gt;はjQueryデータの初期化に使用されます。要素の &lt;code&gt;data-*&lt;/code&gt; 属性は、 &lt;code&gt;data()&lt;/code&gt; メソッドが最初に呼び出されたときに取得され、その後アクセスまたは変更されなくなります（すべての値はjQueryによって内部的に保存されます）。</target>
        </trans-unit>
        <trans-unit id="5969353c95e8154458c9a2e8efa05a46c0fd3e01" translate="yes" xml:space="preserve">
          <source>Since jQuery 1.6, dashes in &lt;code&gt;data-*&lt;/code&gt; attribute names have been processed in alignment with the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTML dataset API&lt;/a&gt;.</source>
          <target state="translated">jQuery 1.6以降、 &lt;code&gt;data-*&lt;/code&gt; 属性名のダッシュは&lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTMLデータセットAPI&lt;/a&gt;に合わせて処理されています。</target>
        </trans-unit>
        <trans-unit id="b94a3fdcc7bc381130af142791076c03992641c6" translate="yes" xml:space="preserve">
          <source>Since jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect.</source>
          <target state="translated">jQueryは1つのグローバル間隔を使用するため、このプロパティの変更が有効になるまでアニメーションを実行しないか、すべてのアニメーションを停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="bb1ebd8b88fa1cbf6d066706d6ca6582244e64cf" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get()&lt;/code&gt;&lt;/a&gt; method returns a &lt;code&gt;jqXHR&lt;/code&gt; object, which is derived from a Deferred object, we can attach a callback for both success and error using the &lt;code&gt;deferred.always()&lt;/code&gt; method.</source>
          <target state="translated">以来&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get()&lt;/code&gt; &lt;/a&gt;メソッドを返す &lt;code&gt;jqXHR&lt;/code&gt; の繰延オブジェクトから派生したオブジェクトを、我々が使用して成功とエラーの両方のためのコールバックを取り付けることができ &lt;code&gt;deferred.always()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="dcb73e61c93c837cbc057fc46e56718b7e1f1393" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can add rejection handlers using the &lt;code&gt;.catch&lt;/code&gt; method.</source>
          <target state="translated">以来&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; の&lt;/a&gt;方法は、繰延オブジェクトから導出さjqXHRオブジェクトを返し、我々が使用して拒絶ハンドラを追加することができ &lt;code&gt;.catch&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="6342a4abce39c6640aa7cef5fb2c053d726fdd04" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the &lt;code&gt;.done()&lt;/code&gt; method.</source>
          <target state="translated">以来&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; の&lt;/a&gt;方法は、繰延オブジェクトから導出さjqXHRオブジェクトを返し、我々が使用して成功したコールバックを取り付けることができる &lt;code&gt;.done()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="5872a8250fa5893d3546adab12605b8ec365deb7" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the &lt;code&gt;.then&lt;/code&gt; method.</source>
          <target state="translated">以来&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; の&lt;/a&gt;方法は、繰延オブジェクトから導出さjqXHRオブジェクトを返し、我々が使用してハンドラを添付することができ &lt;code&gt;.then&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="6f3c5742ce47f98262f8e52369b1aa15badf1bea" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the &lt;code&gt;.catch&lt;/code&gt; method.</source>
          <target state="translated">以来&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; の&lt;/a&gt;方法戻る繰延オブジェクトから導出さjqXHRオブジェクト、我々は拒否ハンドラが使用でき &lt;code&gt;.catch&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="bfa98b5bcb4e82764aa5222d51deca0844c19898" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the &lt;code&gt;deferred.done()&lt;/code&gt; and &lt;code&gt;deferred.fail()&lt;/code&gt; methods.</source>
          <target state="translated">以来&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; の&lt;/a&gt;方法は、繰延由来するjqXHRオブジェクトを返し、あなたが使用して成功と失敗コールバックを取り付けることができ &lt;code&gt;deferred.done()&lt;/code&gt; と &lt;code&gt;deferred.fail()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="f92de5e75bfc3177db7ca895588568fbf9cbffb1" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by &lt;code&gt;&lt;a href=&quot;delegate&quot;&gt;.delegate()&lt;/a&gt;&lt;/code&gt; will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling &lt;code&gt;&lt;a href=&quot;event.stoppropagation&quot;&gt;event.stopPropagation()&lt;/a&gt;&lt;/code&gt; or returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">以来&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;彼らは、文書の先頭に伝播した後、メソッドハンドルのイベントは、ライブイベントの伝播を停止することはできません。同様に、 &lt;code&gt;&lt;a href=&quot;delegate&quot;&gt;.delegate()&lt;/a&gt;&lt;/code&gt; によって処理されるイベントは、委任先の要素に伝播します。 DOMツリー内でその下の要素にバインドされているイベントハンドラーは、委任されたイベントハンドラーが呼び出されるまでに既に実行されています。したがって、これらのハンドラーは、 &lt;code&gt;&lt;a href=&quot;event.stoppropagation&quot;&gt;event.stopPropagation()&lt;/a&gt;&lt;/code&gt; を呼び出すか、 &lt;code&gt;false&lt;/code&gt; を返すことにより、委任されたハンドラーがトリガーされないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="b1edc5381b6091a7fd6e1829f259f5037f6e15dd" translate="yes" xml:space="preserve">
          <source>Since the index is zero-based, the first list item is returned:</source>
          <target state="translated">インデックスはゼロベースなので、最初のリスト項目が返されます。</target>
        </trans-unit>
        <trans-unit id="7a6e24162c86dfba7b0b421fd47f8c5bb8ef4d79" translate="yes" xml:space="preserve">
          <source>Size: 2</source>
          <target state="translated">サイズ:2</target>
        </trans-unit>
        <trans-unit id="982e22c2ba6646fbc5724d9dc05eadc3a19d3774" translate="yes" xml:space="preserve">
          <source>Slide the next sibling LI up or down on hover, and toggle a class.</source>
          <target state="translated">ホバー上で隣の兄弟のLIを上下にスライドさせ、クラスを切り替えます。</target>
        </trans-unit>
        <trans-unit id="fb05309b161291336bae053029c5099275a0941b" translate="yes" xml:space="preserve">
          <source>Some callbacks are required to return something, others make that return value optional. To prevent a form submission, a submit event handler can return false:</source>
          <target state="translated">コールバックの中には、何かを返す必要があるものもあれば、その戻り値をオプションにしているものもあります。フォームの送信を防ぐために、submit イベントハンドラは false を返すことができます。</target>
        </trans-unit>
        <trans-unit id="6c1f13e9615a3bbabc778ec7b0f33c9cc3e91448" translate="yes" xml:space="preserve">
          <source>Some of jQuery's Ajax functions return the native XMLHttpRequest (XHR) object, or pass it as an argument to success/error/complete handlers, so that you can do additional processing or monitoring on the request. Note that Ajax functions only return or pass an XHR object when an XHR object is actually used in the request. For example, JSONP requests and cross-domain GET requests use a script element rather than an XHR object.</source>
          <target state="translated">jQuery の Ajax 関数の中には、ネイティブの XMLHttpRequest (XHR)オブジェクトを返したり、成功/エラー/完了ハンドラの引数として渡したりするものがあり、リクエストに対して追加の処理や監視を行うことができます。Ajax 関数は、XHR オブジェクトがリクエストで実際に使用されている場合にのみ XHR オブジェクトを返したり渡したりすることに注意してください。例えば、JSONP リクエストやクロスドメインの GET リクエストでは、XHR オブジェクトではなく script 要素を使用します。</target>
        </trans-unit>
        <trans-unit id="8753ea1e13ebfbe5d422e4686ba9011ca9055869" translate="yes" xml:space="preserve">
          <source>Some properties of DOM elements are quite consistent among browsers. Consider this example of a simple onblur validation:</source>
          <target state="translated">DOM 要素のプロパティの中には、ブラウザ間で非常に一貫性のあるものがあります。単純な onblur 検証の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="a933f97d99788e859754f51523140619cddcd601" translate="yes" xml:space="preserve">
          <source>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</source>
          <target state="translated">DOM 要素の配列を、重複したものを除去した状態でソートします。これは DOM 要素の配列に対してのみ動作し、文字列や数値に対しては動作しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="94d60b8f0ed0d594ef1727e3a6784cb278df97bd" translate="yes" xml:space="preserve">
          <source>Special units</source>
          <target state="translated">特殊ユニット</target>
        </trans-unit>
        <trans-unit id="596f7c7958bae7b06d20d1b95c9768562dff1f23" translate="yes" xml:space="preserve">
          <source>Specify a function to execute when the DOM is fully loaded.</source>
          <target state="translated">DOM がフルロードされたときに実行する関数を指定します。</target>
        </trans-unit>
        <trans-unit id="ff20a26a0c1ef838133366e7344c5ab557dc3c37" translate="yes" xml:space="preserve">
          <source>Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. &lt;strong&gt;As of jQuery 1.5&lt;/strong&gt;, you can also use a function for this setting, in which case the value of &lt;code&gt;jsonpCallback&lt;/code&gt; is set to the return value of that function.</source>
          <target state="translated">JSONPリクエストのコールバック関数名を指定します。この値は、j​​Queryによって自動的に生成されるランダムな名前の代わりに使用されます。 jQueryに一意の名前を生成させると、リクエストの管理やコールバックとエラー処理の提供が容易になるため、望ましいです。 GETリクエストのブラウザキャッシングを改善したい場合は、コールバックを指定できます。&lt;strong&gt;jQuery 1.5&lt;/strong&gt;以降、この設定に関数を使用することもできます。その場合、 &lt;code&gt;jsonpCallback&lt;/code&gt; の値はその関数の戻り値に設定されます。</target>
        </trans-unit>
        <trans-unit id="a4b0e61bc82307628e84bf51482e5ca8c38a3aac" translate="yes" xml:space="preserve">
          <source>Spoon!</source>
          <target state="translated">Spoon!</target>
        </trans-unit>
        <trans-unit id="0d8484e4b12cca197bb4c6288ecc229761a2d3c7" translate="yes" xml:space="preserve">
          <source>Starting with jQuery 1.7, selector strings with positional selectors apply the selector against the document, and then determine whether the first element of the current jQuery set matches any of the resulting elements. So for the HTML shown above, an expression such as &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Note that since positional selectors are jQuery additions and not W3C standard, we recommend using the W3C selectors whenever feasible.</source>
          <target state="translated">jQuery 1.7以降、位置セレクター付きのセレクター文字列はセレクターをドキュメントに適用し、現在のjQueryセットの最初の要素が結果の要素と一致するかどうかを判断します。したがって、上記のHTMLでは、 &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。位置セレクターはW3C標準ではなくjQueryの追加であるため、可能な限りW3Cセレクターを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9a166f7dad49a1f78c7503ac2a3ec46b214bd857" translate="yes" xml:space="preserve">
          <source>Starts with all paragraphs and searches for descendant span elements, same as &lt;code&gt;$( &quot;p span&quot; )&lt;/code&gt;</source>
          <target state="translated">すべての段落で始まり、 &lt;code&gt;$( &quot;p span&quot; )&lt;/code&gt; と同じように子孫のスパン要素を検索します</target>
        </trans-unit>
        <trans-unit id="9f2fa9a19aedee83f07905d92ab8023e418f9f17" translate="yes" xml:space="preserve">
          <source>States if the current page, in the user&amp;rsquo;s browser, is being rendered using the W3C CSS Box Model.</source>
          <target state="translated">ユーザーのブラウザで、現在のページがW3CCSSボックスモデルを使用してレンダリングされているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="9f596ed584d759c21adfacff6072003d6d499e20" translate="yes" xml:space="preserve">
          <source>States if the current page, in the user&amp;rsquo;s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead.</source>
          <target state="translated">ユーザーのブラウザーの現在のページがW3C CSSボックスモデルを使用してレンダリングされているかどうかを示します。このプロパティはjQuery 1.8で削除されました。代わりに機能検出を使用してみてください。</target>
        </trans-unit>
        <trans-unit id="49a2be80024194ba9e55c77f622b84ab99f358e4" translate="yes" xml:space="preserve">
          <source>Step Function</source>
          <target state="translated">ステップ機能</target>
        </trans-unit>
        <trans-unit id="ad40990b1f5eb15fcc653c23d700e8b744907126" translate="yes" xml:space="preserve">
          <source>Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.</source>
          <target state="translated">.stopPropagation()メソッドを使用して、デフォルトのアクションを防止せずにイベントのバブリングを停止します。</target>
        </trans-unit>
        <trans-unit id="a76e371f4f22da824fc0475cfa42848c80bb7458" translate="yes" xml:space="preserve">
          <source>Stop submit events from bubbling without preventing form submit, using &lt;code&gt;.stopPropagation()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.stopPropagation()&lt;/code&gt; を使用して、フォームの送信を妨げずに送信イベントのバブリングを停止します。</target>
        </trans-unit>
        <trans-unit id="75c9f5be9829724db34567272dd0a87d7c6ea276" translate="yes" xml:space="preserve">
          <source>Stop the currently-running animation on the matched elements.</source>
          <target state="translated">マッチした要素で現在実行中のアニメーションを停止します。</target>
        </trans-unit>
        <trans-unit id="360d71d11120f40efdbddef5715b200bb25b3684" translate="yes" xml:space="preserve">
          <source>Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.</source>
          <target state="translated">現在実行中のアニメーションを停止し、キューに入っているアニメーションをすべて削除し、一致した要素のすべてのアニメーションを完成させます。</target>
        </trans-unit>
        <trans-unit id="730b19e05abb84da614a729159208dbad5760180" translate="yes" xml:space="preserve">
          <source>Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.</source>
          <target state="translated">一致した要素に関連付けられた任意のデータを格納するか、一致した要素のセットの最初の要素について、指定されたデータストアで値を返します。</target>
        </trans-unit>
        <trans-unit id="e3dc887795a3e079473d37947acd076182b16d12" translate="yes" xml:space="preserve">
          <source>Store arbitrary data associated with the specified element and/or return the value that was set.</source>
          <target state="translated">指定された要素に関連付けられた任意のデータを格納し、設定された値を返す。</target>
        </trans-unit>
        <trans-unit id="664d4a46b20ef3413abe6dbdc69b1b8e5fa252f8" translate="yes" xml:space="preserve">
          <source>Store then retrieve a value from the div element.</source>
          <target state="translated">保存してから div 要素から値を取得します。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="817372deb37d508cf48353c2e5bf45228819ce79" translate="yes" xml:space="preserve">
          <source>Success Callback</source>
          <target state="translated">サクセスコールバック</target>
        </trans-unit>
        <trans-unit id="c0a6e449ed284b809fa46d3ad6117b4a8d99830e" translate="yes" xml:space="preserve">
          <source>Supported Flags</source>
          <target state="translated">サポートされているフラグ</target>
        </trans-unit>
        <trans-unit id="10f2d5c8838556785eaa3ee02d811f2678905e69" translate="yes" xml:space="preserve">
          <source>Suppose we have a couple short lists on a page:</source>
          <target state="translated">1ページにいくつかの短いリストがあるとしましょう。</target>
        </trans-unit>
        <trans-unit id="e3dda79ad5c100cb272fb6d078c82f63541c7299" translate="yes" xml:space="preserve">
          <source>Suppose we perform a search for &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements starting at item A:</source>
          <target state="translated">アイテムAから始まる &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 要素の検索を実行するとします。</target>
        </trans-unit>
        <trans-unit id="a94ae9bded1ae99e5c7bcd4f4a8811d18c8089e8" translate="yes" xml:space="preserve">
          <source>Suppose we search for an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element instead:</source>
          <target state="translated">代わりに &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素を検索するとします。</target>
        </trans-unit>
        <trans-unit id="b3f888854fd1f1dae92293cac076227ad8552aa0" translate="yes" xml:space="preserve">
          <source>Suppose you have a list, with two of its items containing a child element:</source>
          <target state="translated">リストがあり、その中の2つの項目に子要素が含まれているとします。</target>
        </trans-unit>
        <trans-unit id="de394c66954399a5ac3332ca39eb0a52c9cc3a47" translate="yes" xml:space="preserve">
          <source>Suppose you have a simple unordered list on the page:</source>
          <target state="translated">ページ上に単純な順不同のリストがあるとします。</target>
        </trans-unit>
        <trans-unit id="5023b4b6d640dff78ca47b85acb6ff85da25aa61" translate="yes" xml:space="preserve">
          <source>Tags that cannot contain elements may be quick-closed or not:</source>
          <target state="translated">要素を含むことができないタグは、クイッククローズされている場合とされていない場合があります。</target>
        </trans-unit>
        <trans-unit id="ff582d4a993e914f70aa1f884c48404bf23cf695" translate="yes" xml:space="preserve">
          <source>Takes a function and returns a new one that will always have a particular context.</source>
          <target state="translated">関数を受け取り、常に特定のコンテキストを持つ新しい関数を返します。</target>
        </trans-unit>
        <trans-unit id="b315f328325b2a0bd0f452ff3b9e918b0b280b19" translate="yes" xml:space="preserve">
          <source>Takes a string and throws an exception containing it.</source>
          <target state="translated">文字列を受け取り、それを含む例外をスローします。</target>
        </trans-unit>
        <trans-unit id="e4e25174b34707da0ca85747ead62e6979587ad7" translate="yes" xml:space="preserve">
          <source>Takes a well-formed JSON string and returns the resulting JavaScript value.</source>
          <target state="translated">整形されたJSON文字列を受け取り、結果のJavaScriptの値を返します。</target>
        </trans-unit>
        <trans-unit id="1321935cf4ff7f35cc8aa281970434f1a46233a9" translate="yes" xml:space="preserve">
          <source>Test a few parameter examples.</source>
          <target state="translated">いくつかのパラメータの例をテストします。</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="2959942028f362a86c6adc899a4d28fb0893b838" translate="yes" xml:space="preserve">
          <source>Text is a node of the Document Object Model (DOM) that represents the textual content of an &lt;a href=&quot;#Element&quot;&gt;element&lt;/a&gt; or an attribute. Consider the following code:</source>
          <target state="translated">テキストは、&lt;a href=&quot;#Element&quot;&gt;要素&lt;/a&gt;または属性のテキストコンテンツを表すドキュメントオブジェクトモデル（DOM）のノードです。次のコードを検討してください。</target>
        </trans-unit>
        <trans-unit id="b88fca4b677e265570d1591da41082afd6bd654a" translate="yes" xml:space="preserve">
          <source>That line of code will replace everything inside &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">このコード行により、 &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt; 内のすべてが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="4ecaa7688dde754c54b4ca5ee2f1ea5f31249d7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.Callbacks()&lt;/code&gt; function is internally used to provide the base functionality behind the jQuery &lt;code&gt;$.ajax()&lt;/code&gt; and &lt;code&gt;$.Deferred()&lt;/code&gt; components. It can be used as a similar base to define functionality for new components.</source>
          <target state="translated">&lt;code&gt;$.Callbacks()&lt;/code&gt; 関数は、内部でjQueryの背後にある基本機能を提供するために使用される &lt;code&gt;$.ajax()&lt;/code&gt; と &lt;code&gt;$.Deferred()&lt;/code&gt; コンポーネント。新しいコンポーネントの機能を定義するための同様のベースとして使用できます。</target>
        </trans-unit>
        <trans-unit id="baa0d6b0d0bf85d2143bf56d29a81b4ad34efa9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajax()&lt;/code&gt; function returns the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the &lt;code&gt;xhr&lt;/code&gt; option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling &lt;code&gt;.abort()&lt;/code&gt; on the object will halt the request before it completes.</source>
          <target state="translated">&lt;code&gt;$.ajax()&lt;/code&gt; 関数が返す &lt;code&gt;XMLHttpRequest&lt;/code&gt; それが作成するオブジェクトを。通常、jQueryはこのオブジェクトの作成を内部的に &lt;code&gt;xhr&lt;/code&gt; ますが、xhrオプションを使用して、オブジェクトを製造するためのカスタム関数を指定できます。返されたオブジェクトは通常破棄できますが、要求を監視および操作するための低レベルのインターフェースを提供します。特に、オブジェクトで &lt;code&gt;.abort()&lt;/code&gt; を呼び出すと、完了する前にリクエストが停止します。</target>
        </trans-unit>
        <trans-unit id="85e806a32c04f5dde13a7018da32db82f1e28ca1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajax()&lt;/code&gt; function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt; are available and are easier to use. If less common options are required, though, &lt;code&gt;$.ajax()&lt;/code&gt; can be used more flexibly.</source>
          <target state="translated">&lt;code&gt;$.ajax()&lt;/code&gt; 関数は、jQueryのから送信されたすべてのAjaxリクエストの基礎となります。 &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt; などのいくつかの高レベルの代替が利用可能で使いやすいため、この関数を直接呼び出す必要はないことがよくあります。ただし、それほど一般的でないオプションが必要な場合は、 &lt;code&gt;$.ajax()&lt;/code&gt; をより柔軟に使用できます。</target>
        </trans-unit>
        <trans-unit id="78f47b93498ccbc5b58c88ddb2f471b1580524b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajaxPrefilter()&lt;/code&gt; method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as &quot;script&quot; if the URL has some specific properties defined in a custom &lt;code&gt;isActuallyScript()&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;$.ajaxPrefilter()&lt;/code&gt; メソッドは、そのdataTypeを返すことにより、リクエストを別のdataTypeにリダイレクトすることもできます。たとえば、次の例では、URLに特定のプロパティがカスタムの &lt;code&gt;isActuallyScript()&lt;/code&gt; 関数で定義されている場合、リクエストを「スクリプト」として設定します。</target>
        </trans-unit>
        <trans-unit id="280a781cf37dc5a0c87a93c392263fe532ae9059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.browser&lt;/code&gt; property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.</source>
          <target state="translated">&lt;code&gt;$.browser&lt;/code&gt; プロパティは、ブラウザ自体によって報告されたように、ページにアクセスしているWebブラウザに関する情報を提供します。最も一般的な4つのブラウザークラス（Internet Explorer、Mozilla、Webkit、Opera）のそれぞれのフラグとバージョン情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="76431104c95bae4a44864ebbfd713ef401ebe1b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.contains()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns &lt;code&gt;false&lt;/code&gt;. Only &lt;em&gt;element&lt;/em&gt; nodes are supported; if the second argument is a text or comment node, &lt;code&gt;$.contains()&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$.contains()&lt;/code&gt; メソッドを返し &lt;code&gt;true&lt;/code&gt; 第二引数が提供するDOM要素は、それが直接の子であるか、より深くネストされたかどうか、最初の引数が提供するDOM要素の子孫である場合。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。&lt;em&gt;要素&lt;/em&gt;ノードのみがサポートされています。2番目の引数がテキストまたはコメントノードの場合、 &lt;code&gt;$.contains()&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="09588521748ac438e7c26cbe3f00a85e140fd816" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.cssHooks&lt;/code&gt; object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.</source>
          <target state="translated">&lt;code&gt;$.cssHooks&lt;/code&gt; オブジェクトは、特定のCSS値を取得および設定するための関数を定義する方法を提供します。また、ボックスの影やグラデーションなどのCSS3機能を正規化するための新しいcssHooksを作成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="3e4337150a1d2bb6fc88e8b469d5a24912766d08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.each()&lt;/code&gt; function is not the same as &lt;a href=&quot;each&quot;&gt;$(selector).each()&lt;/a&gt;, which is used to iterate, exclusively, over a jQuery object. The &lt;code&gt;$.each()&lt;/code&gt; function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the &lt;code&gt;this&lt;/code&gt; keyword, but Javascript will always wrap the &lt;code&gt;this&lt;/code&gt; value as an &lt;code&gt;Object&lt;/code&gt; even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.</source>
          <target state="translated">&lt;code&gt;$.each()&lt;/code&gt; 関数は同じではない&lt;a href=&quot;each&quot;&gt;$（セレクタ）.each（）&lt;/a&gt; jQueryオブジェクトの上に、排他的に、反復するために使用されます。 &lt;code&gt;$.each()&lt;/code&gt; 関数は、オブジェクトまたは配列であるかどうか、任意のコレクションを反復処理するために使用することができます。配列の場合、コールバックには配列インデックスと対応する配列値が毎回渡されます。 （値には &lt;code&gt;this&lt;/code&gt; キーワードを介してアクセスすることもできますが、JavaScriptは単純な文字列または数値の値であっても、常に &lt;code&gt;this&lt;/code&gt; 値を &lt;code&gt;Object&lt;/code&gt; としてラップします。）メソッドは最初の引数である反復されたオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="976cdb1065014cb534e388a99a8c84685e8767eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.grep()&lt;/code&gt; method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.</source>
          <target state="translated">&lt;code&gt;$.grep()&lt;/code&gt; メソッドは、残りのすべての項目が設けられた試験に合格することを必要ように配列から項目を除去します。テストは、配列項目と配列内の項目のインデックスを渡される関数です。テストがtrueを返す場合のみ、項目は結果の配列に含まれます。</target>
        </trans-unit>
        <trans-unit id="18acd609107b58ff2cf0d3332965bdfb5cabf43b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.holdReady()&lt;/code&gt; method allows the caller to delay jQuery's ready event. This &lt;em&gt;advanced feature&lt;/em&gt; would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.</source>
          <target state="translated">&lt;code&gt;$.holdReady()&lt;/code&gt; メソッドは、呼び出し側はjQueryのreadyイベントを遅らせることができます。この&lt;em&gt;高度な機能&lt;/em&gt;は通常、DOMが準備できていても、準備完了イベントの発生を許可する前にjQueryプラグインなどの追加のJavaScriptをロードする動的スクリプトローダーによって使用されます。このメソッドは、jQueryスクリプトタグの直後の &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; など、ドキュメントの早い段階で呼び出す必要があります。 readyイベントがすでに発生した後でこのメソッドを呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="335a19e8e8e4eb5696bfd5f99305e44eff1fcc42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.inArray()&lt;/code&gt; method is similar to JavaScript's native &lt;code&gt;.indexOf()&lt;/code&gt; method in that it returns -1 when it doesn't find a match. If the first element within the array matches &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;$.inArray()&lt;/code&gt; returns 0.</source>
          <target state="translated">&lt;code&gt;$.inArray()&lt;/code&gt; メソッドでは、JavaScriptのネイティブに似ている &lt;code&gt;.indexOf()&lt;/code&gt; が返す-1それが一致するものを見つけられないときに方法。配列内の最初の要素が &lt;code&gt;value&lt;/code&gt; と一致する場合、 &lt;code&gt;$.inArray()&lt;/code&gt; は0を返します。</target>
        </trans-unit>
        <trans-unit id="47c6ed7fef66d2169b4d3861ee6d20f7f3defb90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.isNumeric()&lt;/code&gt; method checks whether its argument represents a numeric value. If so, it returns &lt;code&gt;true&lt;/code&gt;. Otherwise it returns &lt;code&gt;false&lt;/code&gt;. The argument can be of any type.</source>
          <target state="translated">&lt;code&gt;$.isNumeric()&lt;/code&gt; の引数が数値を表しているかどうかの方法をチェックします。もしそうなら、それは &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。引数は任意のタイプにすることができます。</target>
        </trans-unit>
        <trans-unit id="d054908ceec703f2328081f3828c696c4e4831cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.map()&lt;/code&gt; method applies a function to each item in an array or object and maps the results into a new array. &lt;strong&gt;Prior to jQuery 1.6&lt;/strong&gt;, &lt;code&gt;$.map()&lt;/code&gt; supports traversing &lt;em&gt;arrays only&lt;/em&gt;. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt; it also traverses objects.</source>
          <target state="translated">&lt;code&gt;$.map()&lt;/code&gt; メソッドは、配列またはオブジェクト内の各項目に関数を適用し、新しい配列に結果をマッピングします。&lt;strong&gt;jQuery 1.6以前は&lt;/strong&gt;、 &lt;code&gt;$.map()&lt;/code&gt; は&lt;em&gt;配列の&lt;/em&gt;トラバース&lt;em&gt;のみを&lt;/em&gt;サポートしてい&lt;em&gt;ます&lt;/em&gt;。&lt;strong&gt;jQuery 1.6&lt;/strong&gt;以降では、オブジェクトも走査します。</target>
        </trans-unit>
        <trans-unit id="79d04e01527feacc55c26314c81ca0af5fa41181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.merge()&lt;/code&gt; operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The &lt;code&gt;$.merge()&lt;/code&gt; function is destructive. It alters the &lt;code&gt;length&lt;/code&gt; and numeric index properties of the first object to include items from the second.</source>
          <target state="translated">&lt;code&gt;$.merge()&lt;/code&gt; 操作は、2つの配列のすべての要素を含む配列を形成します。配列内の項目の順序は保持され、2番目の配列の項目が追加されます。 &lt;code&gt;$.merge()&lt;/code&gt; 関数が破壊的です。最初のオブジェクトの &lt;code&gt;length&lt;/code&gt; と数値のインデックスプロパティを変更して、2番目のオブジェクトのアイテムを含めます。</target>
        </trans-unit>
        <trans-unit id="2c9302d36417008fe5659ed352ae46a989c038b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.now()&lt;/code&gt; method is a shorthand for the number returned by the expression &lt;code&gt;(new Date).getTime()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$.now()&lt;/code&gt; メソッドは、式の戻り番号の省略形です &lt;code&gt;(new Date).getTime()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb8e0aa345948427cd7df6c456a7940fd1ca6ecb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.now()&lt;/code&gt; method is an alias for &lt;code&gt;Date.now()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$.now()&lt;/code&gt; メソッドはエイリアスです &lt;code&gt;Date.now()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7808931143ef016b797914190e650d2a76779e1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.speed()&lt;/code&gt; method provides a way to define properties, such as &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;easing&lt;/code&gt;, and &lt;code&gt;queue&lt;/code&gt;, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.</source>
          <target state="translated">&lt;code&gt;$.speed()&lt;/code&gt; メソッドは、次のような、プロパティを定義する方法を提供 &lt;code&gt;duration&lt;/code&gt; 、 &lt;code&gt;easing&lt;/code&gt; 、および &lt;code&gt;queue&lt;/code&gt; カスタムアニメーションで使用するために、。これを使用すると、デフォルト値とオプションのパラメーターを処理するロジックを実装する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="95ec78e912c92bddbb313103bfc5523271e0edff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.trim()&lt;/code&gt; function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.</source>
          <target state="translated">&lt;code&gt;$.trim()&lt;/code&gt; 関数が始まり、指定された文字列の末尾から、すべての（非改行スペースを含む）改行、スペース、タブを削除します。これらの空白文字が文字列の途中にある場合、それらは保持されます。</target>
        </trans-unit>
        <trans-unit id="c8d204e0e76dbbb80f76478ab9fdc37eb8914624" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.unique()&lt;/code&gt; function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the &lt;em&gt;exact same&lt;/em&gt; node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</source>
          <target state="translated">&lt;code&gt;$.unique()&lt;/code&gt; オブジェクトの配列を介して機能を検索、配列をソートし、重複ノードを除去します。配列内のノードと&lt;em&gt;まったく同じ&lt;/em&gt;ノードである場合、そのノードは重複と見なされます。同じ属性を持つ2つの異なるノードは重複とは見なされません。この関数は、DOM要素の単純なJavaScript配列でのみ機能し、主にjQueryによって内部的に使用されます。あなたはおそらくそれを使う必要は決してないでしょう。</target>
        </trans-unit>
        <trans-unit id="fbbf462da578ffa3e663692abb85559bd63a2923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.uniqueSort()&lt;/code&gt; function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the &lt;em&gt;exact same&lt;/em&gt; node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</source>
          <target state="translated">&lt;code&gt;$.uniqueSort()&lt;/code&gt; オブジェクトの配列を介して機能を検索、配列をソートし、重複ノードを除去します。配列内のノードと&lt;em&gt;まったく同じ&lt;/em&gt;ノードである場合、そのノードは重複と見なされます。同じ属性を持つ2つの異なるノードは重複とは見なされません。この関数は、DOM要素の単純なJavaScript配列でのみ機能し、主にjQueryによって内部的に使用されます。あなたはおそらくそれを使う必要は決してないでしょう。</target>
        </trans-unit>
        <trans-unit id="3a26b22ac15e6d3725fb5a622feda2d98b93c1b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.addBack()&lt;/code&gt; method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt;. In the second example, &lt;code&gt;.addBack()&lt;/code&gt; adds the previous set of elements on the stack &amp;mdash; in this case &lt;code&gt;$(&quot;div.after-addback&quot;)&lt;/code&gt; &amp;mdash; to the current set, selecting both the div and its enclosed paragraphs.</source>
          <target state="translated">&lt;code&gt;.addBack()&lt;/code&gt; メソッドは、トラバース・スタック内のDOM要素の前のセットが現在セットに追加されるようにします。最初の例では、一番上のスタックに &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt; の結果のセットが含まれています。 2番目の例では、 &lt;code&gt;.addBack()&lt;/code&gt; はスタック上の要素の前のセット &lt;code&gt;$(&quot;div.after-addback&quot;)&lt;/code&gt; この場合は$（ &quot;div.after-addback&quot;））を現在のセットに追加し、divと囲まれた段落の両方を選択します。</target>
        </trans-unit>
        <trans-unit id="ff5d402fb11b41c1beb7b79978b5307c1e688a67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.after()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;insertafter&quot;&gt;.insertAfter()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the content to be inserted comes from the method's argument: &lt;code&gt;$(target).after(contentToBeInserted)&lt;/code&gt;. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the &lt;code&gt;.insertAfter()&lt;/code&gt; method's argument: &lt;code&gt;$(contentToBeInserted).insertAfter(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.after()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;insertafter&quot;&gt;.insertAfter()&lt;/a&gt;&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは構文、特にコンテンツとターゲットの配置にあります。 &lt;code&gt;.after()&lt;/code&gt; 、挿入されるコンテンツは、メソッドの引数から来ている： &lt;code&gt;$(target).after(contentToBeInserted)&lt;/code&gt; 。 &lt;code&gt;.insertAfter()&lt;/code&gt; 、一方で、コンテンツは、メソッドの前に、順番にと渡されたターゲット、後に挿入され &lt;code&gt;.insertAfter()&lt;/code&gt; メソッドの引数： &lt;code&gt;$(contentToBeInserted).insertAfter(target)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6002f37ecb223258bee7d949314a826effed37b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.andSelf()&lt;/code&gt; method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt;. In the second example, &lt;code&gt;.andSelf()&lt;/code&gt; adds the previous set of elements on the stack &amp;mdash; in this case &lt;code&gt;$( &quot;div.after-andself&quot; )&lt;/code&gt; &amp;mdash; to the current set, selecting both the div and its enclosed paragraphs.</source>
          <target state="translated">&lt;code&gt;.andSelf()&lt;/code&gt; メソッドは、トラバース・スタック内のDOM要素の前のセットが現在セットに追加されるようにします。最初の例では、一番上のスタックに &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt; の結果のセットが含まれています。2番目の例では、 &lt;code&gt;.andSelf()&lt;/code&gt; はスタックの前の要素のセット &lt;code&gt;$( &quot;div.after-andself&quot; )&lt;/code&gt; この場合は$（ &quot;div.after-andself&quot;））を現在のセットに追加し、divと囲まれた段落の両方を選択します。</target>
        </trans-unit>
        <trans-unit id="919f011c3d3d39bb6a99b068c83bfc2e73be152d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.animate()&lt;/code&gt; method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the &lt;code&gt;.css()&lt;/code&gt; method, except that the range of properties is more restrictive.</source>
          <target state="translated">&lt;code&gt;.animate()&lt;/code&gt; メソッドは、私たちは任意の数値CSSプロパティにアニメーション効果を作成することができます。唯一の必須パラメーターは、CSSプロパティのプレーンオブジェクトです。このオブジェクトは、 &lt;code&gt;.css()&lt;/code&gt; メソッドに送信できるオブジェクトと似ていますが、プロパティの範囲がより制限されている点が異なります。</target>
        </trans-unit>
        <trans-unit id="8a0edc3a5b47cab439d4809dfee1aeae2a37c618" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.append()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;appendto&quot;&gt;.appendTo()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.append()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.appendTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">&lt;code&gt;.append()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;appendto&quot;&gt;.appendTo()&lt;/a&gt;&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは、構文固有、つまりコンテンツとターゲットの配置です。 &lt;code&gt;.append()&lt;/code&gt; 、メソッドの前にセレクタ式は、コンテンツが挿入される容器です。 &lt;code&gt;.appendTo()&lt;/code&gt; 、一方、コンテンツはセレクタ式として、またはオンザフライで作成されたマークアップとしてのいずれかで、方法の前に、それがターゲット・コンテナに挿入されます。</target>
        </trans-unit>
        <trans-unit id="a2a671ee3f926faffbc1079125031f1101d1a675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.append()&lt;/code&gt; method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the &lt;em&gt;first&lt;/em&gt; child, use &lt;a href=&quot;prepend&quot;&gt;&lt;code&gt;.prepend()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;.append()&lt;/code&gt; メソッドインサートはjQueryのコレクション内の各要素の最後の子として指定されたコンテンツは、（としてそれを挿入する&lt;em&gt;最初の&lt;/em&gt;子、使用&lt;a href=&quot;prepend&quot;&gt; &lt;code&gt;.prepend()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9e7ad01b2fc895e8f2f372219f519cf23a25f27a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.attr()&lt;/code&gt; method gets the attribute value for only the &lt;em&gt;first&lt;/em&gt; element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's &lt;code&gt;.each()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;.attr()&lt;/code&gt; メソッドは、唯一の属性値取得&lt;em&gt;最初の&lt;/em&gt;一致集合の要素を。各要素の値を個別に取得するには、jQueryの &lt;code&gt;.each()&lt;/code&gt; または &lt;code&gt;.map()&lt;/code&gt; メソッドなどのループ構造を使用します。</target>
        </trans-unit>
        <trans-unit id="e56a8d18e9615760f255a389b1a9ee37f18e2f05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.attr()&lt;/code&gt; method is a convenient way to set the value of attributes&amp;mdash;especially when setting multiple attributes or using values returned by a function. Consider the following image:</source>
          <target state="translated">&lt;code&gt;.attr()&lt;/code&gt; メソッドは、属性、特に複数の属性を設定または関数によって返される値を使用しての値を設定するための便利な方法です。次の画像を考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="bcf579ddc9930a5a97c07867bb06cdff64125acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.before()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;insertbefore&quot;&gt;.insertBefore()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.before()&lt;/code&gt;, the content to be inserted comes from the method's argument: &lt;code&gt;$(target).before(contentToBeInserted)&lt;/code&gt;. With &lt;code&gt;.insertBefore()&lt;/code&gt;, on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the &lt;code&gt;.insertBefore()&lt;/code&gt; method's argument: &lt;code&gt;$(contentToBeInserted).insertBefore(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.before()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;insertbefore&quot;&gt;.insertBefore()&lt;/a&gt;&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは構文、特にコンテンツとターゲットの配置にあります。 &lt;code&gt;.before()&lt;/code&gt; 、挿入されるコンテンツは、メソッドの引数から来ている： &lt;code&gt;$(target).before(contentToBeInserted)&lt;/code&gt; 。 &lt;code&gt;.insertBefore()&lt;/code&gt; 、一方で、コンテンツは、メソッドの前に、順番にと渡されたターゲットの前に挿入され、 &lt;code&gt;.insertBefore()&lt;/code&gt; メソッドの引数： &lt;code&gt;$(contentToBeInserted).insertBefore(target)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b8b87f3a7319468a08ed6667b0d2ac2a11055e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.children()&lt;/code&gt; method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="translated">&lt;code&gt;.children()&lt;/code&gt; メソッドは、必要に応じて、我々はに渡すことができるのと同じタイプのセレクタ式受け付ける &lt;code&gt;$()&lt;/code&gt; 関数を。セレクターが指定されている場合、要素が一致するかどうかをテストすることにより、要素がフィルターされます。</target>
        </trans-unit>
        <trans-unit id="376670c6b2301c9502291bf8dd969cf1f3352e2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.clone()&lt;/code&gt; method performs a &lt;em&gt;deep&lt;/em&gt; copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes.</source>
          <target state="translated">&lt;code&gt;.clone()&lt;/code&gt; メソッドが実行&lt;em&gt;ディープ&lt;/em&gt;にコピー整合要素並びにその子孫要素とテキスト・ノードのすべてのことを意味し、マッチした要素の集合のコピー。</target>
        </trans-unit>
        <trans-unit id="8b9a721c048b18a223ef22271dcee5ef1ddb0b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.contents()&lt;/code&gt; method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.</source>
          <target state="translated">&lt;code&gt;.contents()&lt;/code&gt; はiframeをメインページと同じドメイン上にある場合はこの方法はまた、IFRAMEの内容の文書を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4478d31ecdf490a0aad5d0fa3bac7b611658e869" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.context&lt;/code&gt; property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting &lt;code&gt;.live()&lt;/code&gt; in the jQuery Migrate plugin. It may be removed without notice in a future version.</source>
          <target state="translated">&lt;code&gt;.context&lt;/code&gt; プロパティは、jQueryの1.10で非推奨してのみ支持するために必要な程度に維持される &lt;code&gt;.live()&lt;/code&gt; jQueryの移行プラグインで。将来のバージョンで予告なく削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a781319ab4b7c2a3038a7d5f82a3aaa7431f7df3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.css()&lt;/code&gt; method is a convenient way to get a computed style property from the first matched element, especially in light of the different ways browsers access most of those properties (the &lt;code&gt;getComputedStyle()&lt;/code&gt; method in standards-based browsers versus the &lt;code&gt;currentStyle&lt;/code&gt; and &lt;code&gt;runtimeStyle&lt;/code&gt; properties in Internet Explorer prior to version 9) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the &lt;code&gt;float&lt;/code&gt; property as &lt;code&gt;styleFloat&lt;/code&gt;, while W3C standards-compliant browsers refer to it as &lt;code&gt;cssFloat&lt;/code&gt;. For consistency, you can simply use &lt;code&gt;&quot;float&quot;&lt;/code&gt;, and jQuery will translate it to the correct value for each browser.</source>
          <target state="translated">&lt;code&gt;.css()&lt;/code&gt; メソッドは、特にブラウザが（これらのプロパティのほとんどにアクセスするさまざまな方法の光の中で、最初にマッチした要素から計算されたスタイルプロパティを取得するための便利な方法です &lt;code&gt;getComputedStyle()&lt;/code&gt; 対標準ベースのブラウザで方法 &lt;code&gt;currentStyle&lt;/code&gt; とバージョン9より前のInternet Explorerの &lt;code&gt;runtimeStyle&lt;/code&gt; プロパティ）およびブラウザーが特定のプロパティに使用するさまざまな用語。たとえば、Internet ExplorerのDOM実装では、 &lt;code&gt;float&lt;/code&gt; プロパティを &lt;code&gt;styleFloat&lt;/code&gt; と呼びますが、W3C標準に準拠したブラウザーでは、floatプロパティをcssFloatと &lt;code&gt;cssFloat&lt;/code&gt; ます。一貫性を保つには、単に &lt;code&gt;&quot;float&quot;&lt;/code&gt; 使用できます、およびjQueryはそれを各ブラウザーの正しい値に変換します。</target>
        </trans-unit>
        <trans-unit id="4e63aa8b4e036e090afb474846ea3fe671048a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</source>
          <target state="translated">&lt;code&gt;.data()&lt;/code&gt; メソッドは、私たちは、メモリリークのため、循環参照から安全であるように、DOM要素に任意の型のデータを添付することができます。</target>
        </trans-unit>
        <trans-unit id="520ce59174f569a4f598506fbd2fd9742a88c3a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="translated">&lt;code&gt;.data()&lt;/code&gt; メソッドは、私たちは、メモリリークのため、循環参照から安全であるように、DOM要素に任意の型のデータを添付することができます。単一の要素の複数の異なる値を一度に1つずつ、またはセットとして取得できます。</target>
        </trans-unit>
        <trans-unit id="0eb426ccd7969912cbc62e5e7a40c10005fc497c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to read data previously associated with DOM elements. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="translated">&lt;code&gt;.data()&lt;/code&gt; メソッドは、以前にDOM要素に関連付けられたデータを読み取るために私たちをことができます。1つの要素に対して、一度に1つずつ、またはセットとして、いくつかの異なる値を取得できます。</target>
        </trans-unit>
        <trans-unit id="158ffc844ccad87b3e96192f16f798b3f3d7c3fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.detach()&lt;/code&gt; method is the same as &lt;code&gt;&lt;a href=&quot;remove&quot;&gt;.remove()&lt;/a&gt;&lt;/code&gt;, except that &lt;code&gt;.detach()&lt;/code&gt; keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.</source>
          <target state="translated">&lt;code&gt;.detach()&lt;/code&gt; メソッドと同じである &lt;code&gt;&lt;a href=&quot;remove&quot;&gt;.remove()&lt;/a&gt;&lt;/code&gt; のことを除いて、 &lt;code&gt;.detach()&lt;/code&gt; 除去要素に関連付けられたすべてのjQueryのデータを保持します。このメソッドは、削除された要素を後でDOMに再挿入する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="67fa97b3a1074cefe09d0e33804e73171753c7ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.each()&lt;/code&gt; method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword &lt;code&gt;this&lt;/code&gt; refers to the element.</source>
          <target state="translated">&lt;code&gt;.each()&lt;/code&gt; メソッドは、DOMループ構造簡潔かつ少ないエラーが発生しやすいように設計されています。呼び出されると、jQueryオブジェクトの一部であるDOM要素を反復処理します。コールバックが実行されるたびに、0から始まる現在のループ反復が渡されます。さらに重要なのは、コールバックは現在のDOM要素のコンテキストで起動されるため、 &lt;code&gt;this&lt;/code&gt; が要素を参照するキーワードです。</target>
        </trans-unit>
        <trans-unit id="06ecbb426b5bd923098b84c44b225e3011c46509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeIn()&lt;/code&gt; method animates the opacity of the matched elements. It is similar to the &lt;code&gt;&lt;a href=&quot;fadeto&quot;&gt;.fadeTo()&lt;/a&gt;&lt;/code&gt; method but that method does not unhide the element and can specify the final opacity level.</source>
          <target state="translated">&lt;code&gt;.fadeIn()&lt;/code&gt; メソッドは、マッチした要素の不透明度をアニメーション化。 &lt;code&gt;&lt;a href=&quot;fadeto&quot;&gt;.fadeTo()&lt;/a&gt;&lt;/code&gt; メソッドに似ていますが、このメソッドは要素を再表示せず、最終的な不透明度レベルを指定できます。</target>
        </trans-unit>
        <trans-unit id="062775b18ef73fe8687369620f45e3672d9a3cc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeOut()&lt;/code&gt; method animates the opacity of the matched elements. Once the opacity reaches 0, the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt;, so the element no longer affects the layout of the page.</source>
          <target state="translated">&lt;code&gt;.fadeOut()&lt;/code&gt; メソッドは、マッチした要素の不透明度をアニメーション化。不透明度が0に達すると、 &lt;code&gt;display&lt;/code&gt; スタイルプロパティは &lt;code&gt;none&lt;/code&gt; に設定されるため、要素はページのレイアウトに影響しなくなります。</target>
        </trans-unit>
        <trans-unit id="3b666255a099fb53345e3339662753b6bc22c363" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeTo()&lt;/code&gt; method animates the opacity of the matched elements. It is similar to the &lt;code&gt;&lt;a href=&quot;fadein&quot;&gt;.fadeIn()&lt;/a&gt;&lt;/code&gt; method but that method unhides the element and always fades to 100% opacity.</source>
          <target state="translated">&lt;code&gt;.fadeTo()&lt;/code&gt; メソッドは、マッチした要素の不透明度をアニメーション化。 &lt;code&gt;&lt;a href=&quot;fadein&quot;&gt;.fadeIn()&lt;/a&gt;&lt;/code&gt; メソッドに似ていますが、このメソッドは要素を再表示し、常に100％の不透明度にフェードします。</target>
        </trans-unit>
        <trans-unit id="87aefadc97e63343a3f198143ffa44473891ceed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeToggle()&lt;/code&gt; method animates the opacity of the matched elements. When called on a visible element, the element's &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; once the opacity reaches 0, so the element no longer affects the layout of the page.</source>
          <target state="translated">&lt;code&gt;.fadeToggle()&lt;/code&gt; メソッドは、マッチした要素の不透明度をアニメーション化。可視要素で呼び出されると、不透明度が0に達すると、要素の &lt;code&gt;display&lt;/code&gt; スタイルプロパティは &lt;code&gt;none&lt;/code&gt; に設定されるため、要素はページのレイアウトに影響しなくなります。</target>
        </trans-unit>
        <trans-unit id="49e81e00b99900cc2b7acf2d3e6518a653013144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.finish()&lt;/code&gt; method is similar to &lt;code&gt;.stop(true, true)&lt;/code&gt; in that it clears the queue and the current animation jumps to its end value. It differs, however, in that &lt;code&gt;.finish()&lt;/code&gt; also causes the CSS property of all &lt;em&gt;queued&lt;/em&gt; animations to jump to their end values, as well.</source>
          <target state="translated">&lt;code&gt;.finish()&lt;/code&gt; メソッドは次のようになる &lt;code&gt;.stop(true, true)&lt;/code&gt; それがキューをクリアし、現在のアニメーションがその最終値にジャンプすることができます。ただし、 &lt;code&gt;.finish()&lt;/code&gt; によって、&lt;em&gt;キューに入れられた&lt;/em&gt;すべてのアニメーションのCSSプロパティも終了値にジャンプするという点が異なります。</target>
        </trans-unit>
        <trans-unit id="7004a34e94299568cb1b51c71e5fac930bc66ef5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.get()&lt;/code&gt; method grants access to the DOM nodes underlying each jQuery object. If the value of &lt;code&gt;index&lt;/code&gt; is out of bounds &amp;mdash; less than the negative number of elements or equal to or greater than the number of elements &amp;mdash; it returns &lt;code&gt;undefined&lt;/code&gt;. Consider a simple unordered list:</source>
          <target state="translated">&lt;code&gt;.get()&lt;/code&gt; メソッドは、各jQueryオブジェクトの基礎となるDOMノードへのアクセスを許可します。 &lt;code&gt;index&lt;/code&gt; の値が範囲外の場合-要素の負の数より少ないか、要素の数以上の場合 &lt;code&gt;undefined&lt;/code&gt; 返します。単純な順不同リストを考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="c12b1ce92b56f787255c4845c73032ecb78d6a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hasClass()&lt;/code&gt; method will return &lt;code&gt;true&lt;/code&gt; if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;.hasClass()&lt;/code&gt; メソッドは戻ります &lt;code&gt;true&lt;/code&gt; クラスが要素に割り当てられている場合、他のクラスでもある場合でも、。たとえば、上記のHTMLの場合、次は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ad9dc0cc34c77e937afc19320e0d5f30f2869953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hover()&lt;/code&gt; method binds handlers for both &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt; events. You can use it to simply apply behavior to an element during the time the mouse is within the element.</source>
          <target state="translated">&lt;code&gt;.hover()&lt;/code&gt; の両方のための方法が結合ハンドラ &lt;code&gt;mouseenter&lt;/code&gt; と &lt;code&gt;mouseleave&lt;/code&gt; イベント。これを使用して、マウスが要素内にある間に要素に動作を適用することができます。</target>
        </trans-unit>
        <trans-unit id="7352679d5961ada2dc857d5b790b2d2e8264e63d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hover()&lt;/code&gt; method, when passed a single function, will execute that handler for both &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt; events. This allows the user to use jQuery's various toggle methods within the handler or to respond differently within the handler depending on the &lt;code&gt;event.type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.hover()&lt;/code&gt; メソッドは、単一の関数を渡されたとき、両方のためにそのハンドラを実行する &lt;code&gt;mouseenter&lt;/code&gt; と &lt;code&gt;mouseleave&lt;/code&gt; イベント。これにより、ユーザーはハンドラー内でjQueryのさまざまなトグルメソッドを使用したり、 &lt;code&gt;event.type&lt;/code&gt; に応じてハンドラー内で異なる応答をしたりできます。</target>
        </trans-unit>
        <trans-unit id="34735eda31f0d0c8a8865a97a386f992d2171c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.html()&lt;/code&gt; method is not available in XML documents.</source>
          <target state="translated">&lt;code&gt;.html()&lt;/code&gt; メソッドは、XML文書では使用できません。</target>
        </trans-unit>
        <trans-unit id="f5c9b7c19cf9c9bec38c117b9596dfa64b3f5ec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.jquery&lt;/code&gt; property is assigned to the jQuery prototype, commonly referred to by its alias &lt;code&gt;$.fn&lt;/code&gt;. It is a string containing the version number of &lt;code&gt;jQuery&lt;/code&gt;, such as &quot;1.5.0&quot; or &quot;1.4.4&quot;.</source>
          <target state="translated">&lt;code&gt;.jquery&lt;/code&gt; のプロパティは、一般的にその別名が参照する、jQueryのプロトタイプに割り当てられている &lt;code&gt;$.fn&lt;/code&gt; 。これは、「1.5.0」や「1.4.4」など、 &lt;code&gt;jQuery&lt;/code&gt; のバージョン番号を含む文字列です。</target>
        </trans-unit>
        <trans-unit id="a617625fc09fff48a482b47a3b9afcbd0fd42a1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.live()&lt;/code&gt; method for binding event handlers uses this property to determine the root element to use for its event delegation needs.</source>
          <target state="translated">イベントハンドラーをバインドするための &lt;code&gt;.live()&lt;/code&gt; メソッドは、このプロパティを使用して、イベント委任のニーズに使用するルート要素を決定します。</target>
        </trans-unit>
        <trans-unit id="96ea412065b77012ef071db4ab1032df2d1e8056" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.live()&lt;/code&gt; method interacts with other event methods in ways that can be surprising, e.g., &lt;code&gt;$( document ).off( &quot;click&quot; )&lt;/code&gt; removes all click handlers attached by any call to &lt;code&gt;.live()&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;.live()&lt;/code&gt; 驚くことができな方法で他のイベントメソッドとメソッドの相互作用、例えば、 &lt;code&gt;$( document ).off( &quot;click&quot; )&lt;/code&gt; への呼び出しによって接続されているすべてのクリックハンドラ削除 &lt;code&gt;.live()&lt;/code&gt; ！</target>
        </trans-unit>
        <trans-unit id="01c7cdb110bb60a90c982c7bb988effecba4e9a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.load()&lt;/code&gt; method, unlike &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt;, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the &lt;code&gt;url&lt;/code&gt; parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded.</source>
          <target state="translated">&lt;code&gt;.load()&lt;/code&gt; メソッドは、とは異なり、 &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt; 、私たちは、リモートドキュメントの一部が挿入されるように指定することができます。これは、 &lt;code&gt;url&lt;/code&gt; パラメータの特別な構文で実現されます。文字列に1つ以上のスペース文字が含まれている場合、最初のスペースに続く文字列の部分は、ロードされるコンテンツを決定するjQueryセレクターであると想定されます。</target>
        </trans-unit>
        <trans-unit id="3944fabbd1d606011ac39735a016c7231097a28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.map()&lt;/code&gt; method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:</source>
          <target state="translated">&lt;code&gt;.map()&lt;/code&gt; メソッドは、要素のコレクションの値を取得または設定するために特に有用です。一連のチェックボックスを含むフォームを考えてみます。</target>
        </trans-unit>
        <trans-unit id="bcc25be925e63e21a2f6b44a5ddf92f0365ce360" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.off()&lt;/code&gt; method removes event handlers that were attached with &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt;. See the discussion of delegated and directly bound events on that page for more information. Calling &lt;code&gt;.off()&lt;/code&gt; with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. &lt;strong&gt;When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;.off()&lt;/code&gt; メソッドを用いて取り付けたイベントハンドラ除去&lt;a href=&quot;on&quot;&gt; &lt;code&gt;.on()&lt;/code&gt; &lt;/a&gt;。詳細については、そのページの委任イベントと直接バインドされたイベントの説明を参照してください。引数なしで &lt;code&gt;.off()&lt;/code&gt; を呼び出すと、要素にアタッチされているすべてのハンドラーが削除されます。イベント名、名前空間、セレクター、またはハンドラー関数名の組み合わせを提供することにより、特定のイベントハンドラーを要素から削除できます。&lt;strong&gt;複数のフィルタリング引数が指定されている場合、イベントハンドラーを削除するには、指定されたすべての引数が一致する必要があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db7e0e81a50ab84b4a804b6e7954e6386c082532" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.offset()&lt;/code&gt; method allows us to retrieve the current position of an element (specifically its border box, which excludes margins) &lt;em&gt;relative to the document&lt;/em&gt;. Contrast this with &lt;code&gt;&lt;a href=&quot;position&quot;&gt;.position()&lt;/a&gt;&lt;/code&gt;, which retrieves the current position &lt;em&gt;relative to the offset parent&lt;/em&gt;. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), &lt;code&gt;.offset()&lt;/code&gt; is more useful.</source>
          <target state="translated">&lt;code&gt;.offset()&lt;/code&gt; メソッドは、私たちは、要素（具体的には、その境界ボックス、除外マージン）の現在位置を取得することを可能にする&lt;em&gt;文書に対して&lt;/em&gt;。これを &lt;code&gt;&lt;a href=&quot;position&quot;&gt;.position()&lt;/a&gt;&lt;/code&gt; と&lt;em&gt;比較してください&lt;/em&gt;。これ&lt;em&gt;は、オフセットのparentに対する&lt;/em&gt;現在の位置を取得します。グローバル操作（特にドラッグアンドドロップの実装）のために既存の要素の上に新しい要素を配置する場合、 &lt;code&gt;.offset()&lt;/code&gt; の方が便利です。</target>
        </trans-unit>
        <trans-unit id="7fa7f613fb65aa1a55422d29979d55d20abbd326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.offset()&lt;/code&gt; setter method allows us to reposition an element. The element's border-box position is specified &lt;em&gt;relative to the document&lt;/em&gt;. If the element's &lt;code&gt;position&lt;/code&gt; style property is currently &lt;code&gt;static&lt;/code&gt;, it will be set to &lt;code&gt;relative&lt;/code&gt; to allow for this repositioning.</source>
          <target state="translated">&lt;code&gt;.offset()&lt;/code&gt; setterメソッドは、私たちは要素を再配置することができます。要素の境界ボックスの位置は&lt;em&gt;、ドキュメントを基準に&lt;/em&gt;指定され&lt;em&gt;ます&lt;/em&gt;。要素の &lt;code&gt;position&lt;/code&gt; スタイルプロパティが現在 &lt;code&gt;static&lt;/code&gt; である場合、この再配置を可能にするために &lt;code&gt;relative&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="a272de06ce611fd779824d215b629102bca4911d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.on()&lt;/code&gt; method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the &lt;code&gt;.on()&lt;/code&gt; method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;.bind()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt;. To remove events bound with &lt;code&gt;.on()&lt;/code&gt;, see &lt;a href=&quot;off&quot;&gt;&lt;code&gt;.off()&lt;/code&gt;&lt;/a&gt;. To attach an event that runs only once and then removes itself, see &lt;a href=&quot;one&quot;&gt;&lt;code&gt;.one()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;.on()&lt;/code&gt; メソッドは、jQueryオブジェクト内の要素の現在選択されたセットにイベントハンドラを取り付けます。jQuery 1.7以降、 &lt;code&gt;.on()&lt;/code&gt; メソッドは、イベントハンドラーのアタッチに必要なすべての機能を提供します。古いjQueryのイベントメソッドから変換する際にヘルプについては、参照&lt;a href=&quot;bind&quot;&gt; &lt;code&gt;.bind()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;。が結合したイベント削除するには &lt;code&gt;.on()&lt;/code&gt; 参照&lt;a href=&quot;off&quot;&gt; &lt;code&gt;.off()&lt;/code&gt; &lt;/a&gt;。1回だけ実行されてからそれ自体を削除するイベントをアタッチするには、&lt;a href=&quot;one&quot;&gt; &lt;code&gt;.one()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="645c8dceaecbd4770000aadcc5a20e7cb42f53d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.one()&lt;/code&gt; method is identical to &lt;code&gt;.on()&lt;/code&gt;, except that the handler for a given element and event type is unbound after its first invocation. For example:</source>
          <target state="translated">&lt;code&gt;.one()&lt;/code&gt; メソッドは同一である &lt;code&gt;.on()&lt;/code&gt; 、指定された要素とイベントタイプ用のハンドラがその最初の呼び出しの後、未結合であることを除いて。例えば：</target>
        </trans-unit>
        <trans-unit id="af016528e5751912d56884465cbb7aa740006e8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.parents()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;parent&quot;&gt;.parent()&lt;/a&gt;&lt;/code&gt; methods are similar, except that the latter only travels a single level up the DOM tree. Also, &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; method returns a set containing &lt;code&gt;document&lt;/code&gt; whereas &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; returns an empty set.</source>
          <target state="translated">&lt;code&gt;.parents()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;parent&quot;&gt;.parent()&lt;/a&gt;&lt;/code&gt; メソッドは、後者のみDOMツリーアップ単一レベルを移動することを除いて、同様です。また、 &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; メソッドの戻り含むセット &lt;code&gt;document&lt;/code&gt; に対し &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; 空のセットを返します。</target>
        </trans-unit>
        <trans-unit id="7b7c33fd18c0e46b128a7901820184b28d907678" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.position()&lt;/code&gt; method allows us to retrieve the current position of an element (specifically its margin box) &lt;em&gt;relative to the offset parent&lt;/em&gt; (specifically its padding box, which excludes margins and borders). Contrast this with &lt;code&gt;&lt;a href=&quot;offset&quot;&gt;.offset()&lt;/a&gt;&lt;/code&gt;, which retrieves the current position &lt;em&gt;relative to the document&lt;/em&gt;. When positioning a new element near another one and within the same containing DOM element, &lt;code&gt;.position()&lt;/code&gt; is the more useful.</source>
          <target state="translated">&lt;code&gt;.position()&lt;/code&gt; メソッドは、私たちは、要素（具体的には、そのマージンボックス）の現在位置を取得することを可能にする&lt;em&gt;オフセット親に対して&lt;/em&gt;（特にそのパディングボックスを、その除外マージンとボーダー）。これ&lt;em&gt;を、ドキュメントに対する&lt;/em&gt;現在の位置を取得する &lt;code&gt;&lt;a href=&quot;offset&quot;&gt;.offset()&lt;/a&gt;&lt;/code&gt; と&lt;em&gt;比較してください&lt;/em&gt;。新しい要素を別の要素の近く、同じDOM要素内に配置する場合は、 &lt;code&gt;.position()&lt;/code&gt; の方が便利です。</target>
        </trans-unit>
        <trans-unit id="8581f6ba7ae84ecb35718c5084ae03b7a5fc4b47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prepend()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prependto&quot;&gt;.prependTo()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.prepend()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.prependTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">&lt;code&gt;.prepend()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;prependto&quot;&gt;.prependTo()&lt;/a&gt;&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは構文、特にコンテンツとターゲットの配置にあります。 &lt;code&gt;.prepend()&lt;/code&gt; 、メソッドの前にセレクタ式は、コンテンツが挿入される容器です。 &lt;code&gt;.prependTo()&lt;/code&gt; 、一方、コンテンツはセレクタ式として、またはオンザフライで作成されたマークアップとしてのいずれかで、方法の前に、それがターゲット・コンテナに挿入されます。</target>
        </trans-unit>
        <trans-unit id="74db4525f13cab0cc77a631b7d354c0f8fd76bbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prepend()&lt;/code&gt; method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the &lt;em&gt;last&lt;/em&gt; child, use &lt;a href=&quot;append&quot;&gt;&lt;code&gt;.append()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;.prepend()&lt;/code&gt; メソッドインサートはjQueryのコレクション内の各要素の最初の子として指定されたコンテンツは、（としてそれを挿入するには&lt;em&gt;、最後の&lt;/em&gt;子、使用&lt;a href=&quot;append&quot;&gt; &lt;code&gt;.append()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e70ed94081943cfae731624da44c4d5273576eb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.promise()&lt;/code&gt; method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.</source>
          <target state="translated">&lt;code&gt;.promise()&lt;/code&gt; メソッドは、コレクションにバインドされた特定のタイプのすべてのアクションいったん解消され、動的に生成された約束を返しキューに入れられたかどうか、終了しています。</target>
        </trans-unit>
        <trans-unit id="03b29321ce1c92f36cde79cbab565855893c1edd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prop()&lt;/code&gt; method gets the property value for only the &lt;em&gt;first&lt;/em&gt; element in the matched set. It returns &lt;code&gt;undefined&lt;/code&gt; for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's &lt;code&gt;.each()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;.prop()&lt;/code&gt; メソッドは、唯一のプロパティ値を取得する&lt;em&gt;最初の&lt;/em&gt;一致集合の要素を。設定されていないプロパティの値、または一致するセットに要素がない場合は、 &lt;code&gt;undefined&lt;/code&gt; を返します。各要素の値を個別に取得するには、jQueryの &lt;code&gt;.each()&lt;/code&gt; または &lt;code&gt;.map()&lt;/code&gt; メソッドなどのループ構造を使用します。</target>
        </trans-unit>
        <trans-unit id="f5ce095d5bd4f19cf6db1858763e51b5719d8d05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prop()&lt;/code&gt; method is a convenient way to set the value of properties&amp;mdash;especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting &lt;code&gt;selectedIndex&lt;/code&gt;, &lt;code&gt;tagName&lt;/code&gt;, &lt;code&gt;nodeName&lt;/code&gt;, &lt;code&gt;nodeType&lt;/code&gt;, &lt;code&gt;ownerDocument&lt;/code&gt;, &lt;code&gt;defaultChecked&lt;/code&gt;, or &lt;code&gt;defaultSelected&lt;/code&gt;. Since jQuery 1.6, these properties can no longer be set with the &lt;code&gt;.attr()&lt;/code&gt; method. They do not have corresponding attributes and are only properties.</source>
          <target state="translated">&lt;code&gt;.prop()&lt;/code&gt; メソッドは、特性、特に関数によって返される値を使用して、複数のプロパティを設定する、または一度に複数の要素に値を設定の値を設定するための便利な方法です。これは、設定するときに使用しなければならない &lt;code&gt;selectedIndex&lt;/code&gt; 、 &lt;code&gt;tagName&lt;/code&gt; を、 &lt;code&gt;nodeName&lt;/code&gt; を、 &lt;code&gt;nodeType&lt;/code&gt; の、 &lt;code&gt;ownerDocument&lt;/code&gt; 、 &lt;code&gt;defaultChecked&lt;/code&gt; 、または &lt;code&gt;defaultSelected&lt;/code&gt; を。 jQuery 1.6以降、これらのプロパティは &lt;code&gt;.attr()&lt;/code&gt; メソッドで設定できなくなりました。これらには対応する属性はなく、単なるプロパティです。</target>
        </trans-unit>
        <trans-unit id="658e85773a055f5e1058e298fe6314a906006e63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.queue()&lt;/code&gt; method allows us to directly manipulate this queue of functions. Calling &lt;code&gt;.queue()&lt;/code&gt; with a callback is particularly useful; it allows us to place a new function at the end of the queue. The callback function is executed once for each element in the jQuery set.</source>
          <target state="translated">&lt;code&gt;.queue()&lt;/code&gt; メソッドは、私たちが直接の機能のこのキューを操作することができます。コールバックを使用して &lt;code&gt;.queue()&lt;/code&gt; を呼び出すと特に便利です。キューの最後に新しい関数を配置することができます。コールバック関数は、jQueryセットの要素ごとに1回実行されます。</target>
        </trans-unit>
        <trans-unit id="dab809c02c354d248b0ee32610b33f65bc9c6ae1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.ready()&lt;/code&gt; method is typically used with an anonymous function:</source>
          <target state="translated">&lt;code&gt;.ready()&lt;/code&gt; メソッドは、典型的には匿名関数で使用されます。</target>
        </trans-unit>
        <trans-unit id="077d4bdc956042f2c88566c31db4cbfcc7363fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.ready()&lt;/code&gt; method offers a way to run JavaScript code as soon as the page's Document Object Model (DOM) becomes safe to manipulate. This will often be a good time to perform tasks that are needed before the user views or interacts with the page, for example to add event handlers and initialize plugins. When multiple functions are added via successive calls to this method, they run when the DOM is ready in the order in which they are added. As of jQuery 3.0, jQuery ensures that an exception occuring in one handler does not prevent subsequently added handlers from executing.</source>
          <target state="translated">&lt;code&gt;.ready()&lt;/code&gt; メソッドが提供するページのドキュメントオブジェクトモデル（DOM）を操作しても安全になりとすぐにJavaScriptコードを実行する方法。これは、多くの場合、ユーザーがページを表示または操作する前に必要なタスク（イベントハンドラーの追加やプラグインの初期化など）を実行するのに適しています。このメソッドへの連続した呼び出しによって複数の関数が追加された場合、それらは追加された順序でDOMの準備ができたときに実行されます。 jQuery 3.0以降、jQueryは、1つのハンドラーで発生した例外が、その後に追加されたハンドラーの実行を妨げないようにします。</target>
        </trans-unit>
        <trans-unit id="83bc8e03b021237c11339ba2a1efc2f21d15a5a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeAttr()&lt;/code&gt; method uses the JavaScript &lt;code&gt;removeAttribute()&lt;/code&gt; function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.</source>
          <target state="translated">&lt;code&gt;.removeAttr()&lt;/code&gt; メソッドは、JavaScriptを使用しています &lt;code&gt;removeAttribute()&lt;/code&gt; 関数が、それはjQueryオブジェクトに直接呼び出すことができるという利点を持っており、それがブラウザ間で異なる属性の命名を占めています。</target>
        </trans-unit>
        <trans-unit id="3731546a94484849d0ac8ab85a3029dde61c5913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeData()&lt;/code&gt; method allows us to remove values that were previously set using &lt;code&gt;.data()&lt;/code&gt;. When called with the name of a key, &lt;code&gt;.removeData()&lt;/code&gt; deletes that particular value. When called with no arguments, &lt;code&gt;.removeData()&lt;/code&gt; removes all values.</source>
          <target state="translated">&lt;code&gt;.removeData()&lt;/code&gt; メソッドは、私たちは、以前に使用して設定された値を削除することができ &lt;code&gt;.data()&lt;/code&gt; 。キーの名前で呼び出されると、 &lt;code&gt;.removeData()&lt;/code&gt; はその特定の値を削除します。引数なしで呼び出されると、 &lt;code&gt;.removeData()&lt;/code&gt; はすべての値を削除します。</target>
        </trans-unit>
        <trans-unit id="2034be3fd4582b7028a473df6aabe0dd58c049f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeProp()&lt;/code&gt; method removes properties set by the &lt;code&gt;&lt;a href=&quot;prop&quot;&gt;.prop()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;.removeProp()&lt;/code&gt; メソッドは、により設定されたプロパティ除去 &lt;code&gt;&lt;a href=&quot;prop&quot;&gt;.prop()&lt;/a&gt;&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="c8addddb62dca0b107eb80169f537d932677c13c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceAll()&lt;/code&gt; method is similar to &lt;code&gt;&lt;a href=&quot;replacewith&quot;&gt;.replaceWith()&lt;/a&gt;&lt;/code&gt;, but with the source and target reversed. Consider this DOM structure:</source>
          <target state="translated">&lt;code&gt;.replaceAll()&lt;/code&gt; メソッドは、同様である &lt;code&gt;&lt;a href=&quot;replacewith&quot;&gt;.replaceWith()&lt;/a&gt;&lt;/code&gt; が、ソースとターゲットと逆転しました。次のDOM構造を検討してください。</target>
        </trans-unit>
        <trans-unit id="a4f749be45eb195fd4c23e0fd4ed8e7e1d2c9d7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceAll()&lt;/code&gt; method removes all data and event handlers associated with the removed nodes.</source>
          <target state="translated">&lt;code&gt;.replaceAll()&lt;/code&gt; メソッドは、除去ノードに関連するすべてのデータおよびイベントハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="5d74a5b31c932d95002c9ef2ae934fdb08a8e01d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method removes all data and event handlers associated with the removed nodes.</source>
          <target state="translated">&lt;code&gt;.replaceWith()&lt;/code&gt; メソッドは、除去ノードに関連するすべてのデータおよびイベントハンドラを削除します。</target>
        </trans-unit>
        <trans-unit id="35d7d4021234873cff115fe91b4361994144140c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:</source>
          <target state="translated">&lt;code&gt;.replaceWith()&lt;/code&gt; メソッドは、単一の呼び出しとその場所でDOMと挿入新しいコンテンツからコンテンツを削除します。次のDOM構造を検討してください。</target>
        </trans-unit>
        <trans-unit id="a9e203e0994b587501030c97a751910f0eeeecbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the &lt;em&gt;original&lt;/em&gt; jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.</source>
          <target state="translated">&lt;code&gt;.replaceWith()&lt;/code&gt; 他の方法は、それに連鎖することができるように、最もjQueryの方法のような方法は、jQueryオブジェクトを返します。ただし、&lt;em&gt;元の&lt;/em&gt; jQueryオブジェクトが返されることに注意する必要があります。このオブジェクトは、DOMから削除された要素を参照しており、それを置き換えた新しい要素を参照していません。</target>
        </trans-unit>
        <trans-unit id="10e5651b768633d3d3742f6a64de99c1edc2dd27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.selector&lt;/code&gt; property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting &lt;code&gt;.live()&lt;/code&gt; in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a &quot;foo&quot; plugin could be written as &lt;code&gt;$.fn.foo = function( selector, options ) { /* plugin code goes here */ };&lt;/code&gt;, and the person using the plugin would write &lt;code&gt;$( &quot;div.bar&quot; ).foo( &quot;div.bar&quot;, {dog: &quot;bark&quot;} );&lt;/code&gt; with the &lt;code&gt;&quot;div.bar&quot;&lt;/code&gt; selector repeated as the first argument of &lt;code&gt;.foo()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.selector&lt;/code&gt; のプロパティは、jQueryの1.7で非推奨してのみ支持するために必要な程度に維持される &lt;code&gt;.live()&lt;/code&gt; jQueryの移行プラグインで。将来のバージョンで予告なく削除される可能性があります。後続のトラバーサルメソッドがセットを変更した可能性があるため、プロパティは、jQueryセットに現在含まれている要素のセットを取得するために使用できるセレクターの信頼できるインジケーターにはなりませんでした。プラグイン内でセレクター文字列を使用する必要があるプラグインは、メソッドのパラメーターとしてそれを必要とする場合があります。たとえば、「foo」プラグインは &lt;code&gt;$.fn.foo = function( selector, options ) { /* plugin code goes here */ };&lt;/code&gt; として記述できます。、そしてプラグインを使用する人は書くでしょう &lt;code&gt;$( &quot;div.bar&quot; ).foo( &quot;div.bar&quot;, {dog: &quot;bark&quot;} );&lt;/code&gt; &lt;code&gt;&quot;div.bar&quot;&lt;/code&gt; セレクタの最初の引数として繰り返し &lt;code&gt;.foo()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5aca0ee1f61701b4ea28fd1ea3827f8989fb0741" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serialize()&lt;/code&gt; method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;: &lt;code&gt;$( &quot;input, textarea, select&quot; ).serialize();&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.serialize()&lt;/code&gt; メソッドは、標準のURLエンコードされた表記の文字列を作成します。 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; などの個々のフォームコントロールを選択したjQueryオブジェクトに作用できます。 &lt;code&gt;$( &quot;input, textarea, select&quot; ).serialize();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9c89836855332a6cd11a6570684abc77c3f88f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serializeArray()&lt;/code&gt; method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery collection of &lt;code&gt;form&lt;/code&gt;s and/or form controls. The controls can be of several types:</source>
          <target state="translated">&lt;code&gt;.serializeArray()&lt;/code&gt; メソッドは、JSON文字列として符号化される準備ができオブジェクトのJavaScriptの配列を作成します。 &lt;code&gt;form&lt;/code&gt; やフォームコントロールのjQueryコレクションを操作します。コントロールにはいくつかのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="d6d35856dae819af217e994ad9f9e6d66e144968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serializeArray()&lt;/code&gt; method uses the standard W3C rules for &lt;a href=&quot;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.2&quot;&gt;successful controls&lt;/a&gt; to determine which elements it should include; in particular the element cannot be disabled and must contain a &lt;code&gt;name&lt;/code&gt; attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized. Elements that do not contain a &lt;code&gt;value&lt;/code&gt; attribute are represented with the empty string value.</source>
          <target state="translated">&lt;code&gt;.serializeArray()&lt;/code&gt; メソッドは、のための標準的なW3Cルール使用&lt;a href=&quot;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.2&quot;&gt;の成功のコントロールを&lt;/a&gt;、それが含むべき要素を決定します。特に、要素を無効にすることはできず、 &lt;code&gt;name&lt;/code&gt; 属性を含める必要があります。フォームがボタンを使用して送信されなかったため、送信ボタンの値はシリアル化されません。ファイル選択要素からのデータはシリアル化されません。 &lt;code&gt;value&lt;/code&gt; 属性を含まない要素は、空の文字列値で表されます。</target>
        </trans-unit>
        <trans-unit id="ac90bebcd3635f8d3d17695f20532374d17e9175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.size()&lt;/code&gt; method is deprecated as of jQuery 1.8. Use the &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; property instead.</source>
          <target state="translated">&lt;code&gt;.size()&lt;/code&gt; メソッドは、jQueryの1.8のように推奨されていません。代わりに &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; プロパティを使用してください。</target>
        </trans-unit>
        <trans-unit id="7d316944601f50f903569a2ae656e583d6d4f184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.size()&lt;/code&gt; method is functionally equivalent to the &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; property; however, &lt;strong&gt;the &lt;code&gt;.length&lt;/code&gt; property is preferred&lt;/strong&gt; because it does not have the overhead of a function call.</source>
          <target state="translated">&lt;code&gt;.size()&lt;/code&gt; メソッドは機能的に同等である &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; プロパティ。ただし、関数呼び出しのオーバーヘッドがないため&lt;strong&gt;、 &lt;code&gt;.length&lt;/code&gt; プロパティが推奨さ&lt;/strong&gt;れます。</target>
        </trans-unit>
        <trans-unit id="08740b8268cec8430f152df38cca53f9dd3c62e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideDown()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.</source>
          <target state="translated">&lt;code&gt;.slideDown()&lt;/code&gt; メソッドは、マッチした要素の高さをアニメーション化。これにより、ページの下の部分が下にスライドし、表示されたアイテムに移動します。</target>
        </trans-unit>
        <trans-unit id="e0f562dad9679f841eef5960aed9a626d4d79d28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideToggle()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The &lt;code&gt;display&lt;/code&gt; property is saved and restored as needed. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;. When the height reaches 0 after a hiding animation, the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; to ensure that the element no longer affects the layout of the page.</source>
          <target state="translated">&lt;code&gt;.slideToggle()&lt;/code&gt; メソッドは、マッチした要素の高さをアニメーション化。これにより、ページの下部が上下にスライドし、アイテムが表示または非表示になります。要素が最初に表示される場合、それは非表示になります。非表示の場合は表示されます。 &lt;code&gt;display&lt;/code&gt; プロパティが保存され、必要に応じて復元されます。要素の &lt;code&gt;display&lt;/code&gt; 値が &lt;code&gt;inline&lt;/code&gt; の場合、非表示にして表示すると、要素は再び &lt;code&gt;inline&lt;/code&gt; で表示されます。アニメーションを非 &lt;code&gt;display&lt;/code&gt; 後で高さが0に達すると、要素がページのレイアウトに影響を及ぼさないように、表示スタイルプロパティが &lt;code&gt;none&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="8dc8f9d9ce642c6b3a7c575f52b12ea99866b757" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideUp()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; to ensure that the element no longer affects the layout of the page.</source>
          <target state="translated">&lt;code&gt;.slideUp()&lt;/code&gt; メソッドは、マッチした要素の高さをアニメーション化。これにより、ページの下部が上にスライドし、アイテムが隠れているように見えます。高さが0に達すると（または、CSSのmin-height プロパティが設定されている &lt;code&gt;display&lt;/code&gt; は）、表示スタイルプロパティが &lt;code&gt;none&lt;/code&gt; に設定され、要素がページのレイアウトに影響を与えないようになります。</target>
        </trans-unit>
        <trans-unit id="e2302549a8460d5f9c3f7051fcf5cb7a1fa33464" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.text()&lt;/code&gt; method cannot be used on form inputs or scripts. To set or get the text value of &lt;code&gt;input&lt;/code&gt; or &lt;code&gt;textarea&lt;/code&gt; elements, use the &lt;a href=&quot;val&quot;&gt;&lt;code&gt;.val()&lt;/code&gt;&lt;/a&gt; method. To get the value of a script element, use the &lt;a href=&quot;html&quot;&gt;&lt;code&gt;.html()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;.text()&lt;/code&gt; メソッドは、フォームの入力またはスクリプトで使用することができません。セットへのテキスト値を取得したり、 &lt;code&gt;input&lt;/code&gt; または &lt;code&gt;textarea&lt;/code&gt; 要素を使用&lt;a href=&quot;val&quot;&gt; &lt;code&gt;.val()&lt;/code&gt; &lt;/a&gt;メソッドを。スクリプト要素の値を取得するには、&lt;a href=&quot;html&quot;&gt; &lt;code&gt;.html()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="373c283f538765ec436d67f9a9ff14adda880de8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.text()&lt;/code&gt; method cannot be used on input elements. For input field text, use the &lt;a href=&quot;val&quot;&gt;.val()&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;.text()&lt;/code&gt; メソッドは、入力要素で使用することができません。入力フィールドのテキストには、&lt;a href=&quot;val&quot;&gt;.val（）&lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="fccc2c954d25672295c216fd9075878da0e75407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.toggle()&lt;/code&gt; method binds a handler for the &lt;code&gt;click&lt;/code&gt; event, so the rules outlined for the triggering of &lt;code&gt;click&lt;/code&gt; apply here as well.</source>
          <target state="translated">&lt;code&gt;.toggle()&lt;/code&gt; メソッドは、ハンドラバインド &lt;code&gt;click&lt;/code&gt; のトリガについて概説ルールので、イベントを &lt;code&gt;click&lt;/code&gt; ここにも適用されます。</target>
        </trans-unit>
        <trans-unit id="1b0b52985915a620941211a673b54e69d2ce481d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.toggle()&lt;/code&gt; method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into &lt;code&gt;.toggle()&lt;/code&gt; prove limiting. For example, &lt;code&gt;.toggle()&lt;/code&gt; is not guaranteed to work correctly if applied twice to the same element. Since &lt;code&gt;.toggle()&lt;/code&gt; internally uses a &lt;code&gt;click&lt;/code&gt; handler to do its work, we must unbind &lt;code&gt;click&lt;/code&gt; to remove a behavior attached with &lt;code&gt;.toggle()&lt;/code&gt;, so other &lt;code&gt;click&lt;/code&gt; handlers can be caught in the crossfire. The implementation also calls &lt;code&gt;.preventDefault()&lt;/code&gt; on the event, so links will not be followed and buttons will not be clicked if &lt;code&gt;.toggle()&lt;/code&gt; has been called on the element.</source>
          <target state="translated">&lt;code&gt;.toggle()&lt;/code&gt; メソッドは、便宜のために提供されます。同じ動作を手動で実装するのは比較的簡単です。これは、 &lt;code&gt;.toggle()&lt;/code&gt; に組み込まれた仮定が制限を証明する場合に必要になる可能性があります。たとえば、 &lt;code&gt;.toggle()&lt;/code&gt; が同じ要素に2回適用された場合、正しく動作することは保証されていません。以来 &lt;code&gt;.toggle()&lt;/code&gt; 内部的に使用しています &lt;code&gt;click&lt;/code&gt; その作業を行うためのハンドラを、我々はアンバインドしなければなりません &lt;code&gt;click&lt;/code&gt; して添付行動削除する &lt;code&gt;.toggle()&lt;/code&gt; 、そのほかの &lt;code&gt;click&lt;/code&gt; ハンドラは十字砲火に巻き込ますることができます。実装は &lt;code&gt;.preventDefault()&lt;/code&gt; も呼び出します要素で &lt;code&gt;.toggle()&lt;/code&gt; が呼び出された場合、イベントではリンクがたどられず、ボタンがクリックされません。</target>
        </trans-unit>
        <trans-unit id="90ee2012c0d37e1e2b88250be3147655498ac6c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.trigger()&lt;/code&gt; method can be used on jQuery collections that wrap plain JavaScript objects similar to a pub/sub mechanism; any event handlers bound to the object will be called when the event is triggered.</source>
          <target state="translated">&lt;code&gt;.trigger()&lt;/code&gt; メソッドは、ラップ無地JavaScriptがパブ/サブ機構と同様のオブジェクトことjQueryのコレクションで使用することができます。イベントがトリガーされると、オブジェクトにバインドされたイベントハンドラーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6727df07ba1a485ab1da0e62516370226a50a0bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.triggerHandler( &quot;event&quot; )&lt;/code&gt; method will not call &lt;code&gt;.event()&lt;/code&gt; on the element it is triggered on. This means &lt;code&gt;.triggerHandler( &quot;submit&quot; )&lt;/code&gt; on a form will not call &lt;code&gt;.submit()&lt;/code&gt; on the form.</source>
          <target state="translated">&lt;code&gt;.triggerHandler( &quot;event&quot; )&lt;/code&gt; メソッドは呼び出しません &lt;code&gt;.event()&lt;/code&gt; それがトリガーされる要素上を。これは、フォーム上の &lt;code&gt;.triggerHandler( &quot;submit&quot; )&lt;/code&gt; がフォーム上の &lt;code&gt;.submit()&lt;/code&gt; を呼び出さないことを意味します。</target>
        </trans-unit>
        <trans-unit id="513e4d6bf3e0be052f40008f5f347b3a0c913660" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.undelegate()&lt;/code&gt; method is a way of removing event handlers that have been bound using &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.undelegate()&lt;/code&gt; メソッドを使用してバインドされているイベントハンドラ除去する方法である&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51fd5f8e1da6cc53759c1a5d55129187c9c1669f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.unwrap()&lt;/code&gt; method removes the element's parent and returns the unwrapped content. This is effectively the inverse of the &lt;code&gt;&lt;a href=&quot;wrap&quot;&gt;.wrap()&lt;/a&gt;&lt;/code&gt; method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.</source>
          <target state="translated">&lt;code&gt;.unwrap()&lt;/code&gt; メソッドは、エレメントの親を削除し、開封されたコンテンツを返します。これは事実上 &lt;code&gt;&lt;a href=&quot;wrap&quot;&gt;.wrap()&lt;/a&gt;&lt;/code&gt; メソッドの逆です。一致した要素（および存在する場合はそれらの兄弟）は、DOM構造内の親を置き換えます。</target>
        </trans-unit>
        <trans-unit id="be7b1e44db9c19e73004f470a5e8f0469e24649d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.val()&lt;/code&gt; method allows setting the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value:</source>
          <target state="translated">&lt;code&gt;.val()&lt;/code&gt; メソッドは、関数に渡すことによって値を設定することができます。jQuery 1.4以降、関数には2つの引数、現在の要素のインデックスとその現在の値が渡されます。</target>
        </trans-unit>
        <trans-unit id="aa3df7ef8e6c5a1177e85f411ef7f33f49a0b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.val()&lt;/code&gt; method is primarily used to get the values of form elements such as &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. When called on an empty collection, it returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.val()&lt;/code&gt; メソッドは、主などのフォーム要素の値を取得するために使用され &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; し、 &lt;code&gt;textarea&lt;/code&gt; 。空のコレクションで呼び出されると、 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="322722376da12ca684717a51b25a7d113bdaa84e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrap()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.</source>
          <target state="translated">&lt;code&gt;.wrap()&lt;/code&gt; 関数は、に渡される可能性があり、任意の文字列またはオブジェクト取ることができます &lt;code&gt;$()&lt;/code&gt; DOM構造を指定するには、ファクトリ関数を。この構造は、いくつかのレベルの深さにネストすることができますが、最も内側の要素を1つだけ含める必要があります。この構造のコピーは、一致する要素のセットの各要素の周りにラップされます。このメソッドは、連鎖のために元の要素のセットを返します。</target>
        </trans-unit>
        <trans-unit id="c812721d970da9b645aa759ae959ba0db5b2e0e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrapAll()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.</source>
          <target state="translated">&lt;code&gt;.wrapAll()&lt;/code&gt; 関数は、に渡される可能性があり、任意の文字列またはオブジェクト取ることができます &lt;code&gt;$()&lt;/code&gt; DOM構造を指定する機能を。この構造は、いくつかのレベルの深さにネストすることができますが、最も内側の要素を1つだけ含める必要があります。構造は、一致した要素のセット内のすべての要素を1つのグループとしてラップします。</target>
        </trans-unit>
        <trans-unit id="3db4368770ad651d5dbec7c44cd8ba2db7319e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrapInner()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.</source>
          <target state="translated">&lt;code&gt;.wrapInner()&lt;/code&gt; 関数は、に渡される可能性があり、任意の文字列またはオブジェクト取ることができます &lt;code&gt;$()&lt;/code&gt; DOM構造を指定するには、ファクトリ関数を。この構造は、いくつかのレベルの深さにネストすることができますが、最も内側の要素を1つだけ含める必要があります。構造は、一致する要素のセット内の各要素のコンテンツの周りにラップされます。</target>
        </trans-unit>
        <trans-unit id="139d56bcf1b91aaa8dba4392f3eb16d4d9147cb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:checked&lt;/code&gt; selector works for checkboxes, radio buttons, and options of &lt;code&gt;select&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;:checked&lt;/code&gt; セレクタは、チェックボックス、ラジオボタン、およびオプションのために働く &lt;code&gt;select&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="01193d1507c1b5d6b5823171619bb4c82354b9a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:disabled&lt;/code&gt; selector should only be used for selecting HTML elements that support the &lt;code&gt;disabled&lt;/code&gt; attribute (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;menuitem&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;:disabled&lt;/code&gt; セレクタはのみをサポートすることをHTML要素を選択するために使用されなければならない &lt;code&gt;disabled&lt;/code&gt; 属性（ &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;menuitem&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2395e6feb0bbee4323652fc74ae8a9cbd24453a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:enabled&lt;/code&gt; selector should only be used for selecting HTML elements that support the &lt;code&gt;disabled&lt;/code&gt; attribute (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;:enabled&lt;/code&gt; セレクタはのみサポートHTML要素の選択のために使用されるべき &lt;code&gt;disabled&lt;/code&gt; （属性 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2b08c2cbeff939b37697982eb1a485029c814d6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:first-of-type&lt;/code&gt; selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.</source>
          <target state="translated">&lt;code&gt;:first-of-type&lt;/code&gt; セレクタは、同じ親と同じ要素名の両方が文書ツリーで前に来るとは、他の要素を持たない要素と一致します。</target>
        </trans-unit>
        <trans-unit id="49d835832f63623fec68d9fdda05e2be7c6beae9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:first&lt;/code&gt; pseudo-class is equivalent to &lt;code&gt;:eq( 0 )&lt;/code&gt;. It could also be written as &lt;code&gt;:lt( 1 )&lt;/code&gt;. While this matches only a single element, &lt;a href=&quot;first-child-selector&quot;&gt;:first-child&lt;/a&gt; can match more than one: One for each parent.</source>
          <target state="translated">&lt;code&gt;:first&lt;/code&gt; 擬似クラスは、と等価である &lt;code&gt;:eq( 0 )&lt;/code&gt; 。 &lt;code&gt;:lt( 1 )&lt;/code&gt; と書くこともできます。これは単一の要素にのみ一致しますが、&lt;a href=&quot;first-child-selector&quot;&gt;：first-child&lt;/a&gt;は複数に一致できます：各親に1つ。</target>
        </trans-unit>
        <trans-unit id="fcd319e0ed30f65f1bf56aa4209ee68a5c743e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:input&lt;/code&gt; selector basically selects all form controls.</source>
          <target state="translated">&lt;code&gt;:input&lt;/code&gt; セレクタは、基本的にすべてのフォームコントロールを選択します。</target>
        </trans-unit>
        <trans-unit id="e719eb72a2f787d59782d8fc9ac950f9c0950994" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:lang()&lt;/code&gt; selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by &quot;-&quot;. For example, the selector &lt;code&gt;$(&quot;div:lang(en)&quot;)&lt;/code&gt;will match &lt;code&gt;&amp;lt;div lang=&quot;en&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;div lang=&quot;en-us&quot;&amp;gt;&lt;/code&gt; (and any of their descendant &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s), but not &lt;code&gt;&amp;lt;div lang=&quot;fr&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;:lang()&lt;/code&gt; 「 - 」言語の値を有するセレクタの一致要素は、供給された言語コードまたはすぐに続いて供給された言語コードとその開始に等しいです。たとえば、セレクター &lt;code&gt;$(&quot;div:lang(en)&quot;)&lt;/code&gt; は &lt;code&gt;&amp;lt;div lang=&quot;en&quot;&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;div lang=&quot;en-us&quot;&amp;gt;&lt;/code&gt; （およびそれらの子孫 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; のいずれか）に一致しますが、ない &lt;code&gt;&amp;lt;div lang=&quot;fr&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3ebbf72ab8f006b6be875c86864d5808bf70755" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:last-of-type&lt;/code&gt; selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.</source>
          <target state="translated">&lt;code&gt;:last-of-type&lt;/code&gt; セレクタは、ドキュメントツリーにそれの後来て、同じ親を持つ他の要素と同じ要素名を持っていない要素と一致します。</target>
        </trans-unit>
        <trans-unit id="f222c15bce05c9c3271710690a4e94281f26e1e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:nth-child(n)&lt;/code&gt; pseudo-class is easily confused with &lt;code&gt;:eq(n)&lt;/code&gt;, even though the two can result in dramatically different matched elements. With &lt;code&gt;:nth-child(n)&lt;/code&gt;, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With &lt;code&gt;:eq(n)&lt;/code&gt; only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</source>
          <target state="translated">&lt;code&gt;:nth-child(n)&lt;/code&gt; 疑似クラスを容易に混同される &lt;code&gt;:eq(n)&lt;/code&gt; 、二つの劇的に異なるマッチした要素をもたらすことができるにもかかわらず。で &lt;code&gt;:nth-child(n)&lt;/code&gt; 、すべての子供にかかわらず、それらが何であるかを、カウントされ、そして指定された要素は、それが疑似クラスに取り付けられたセレクタに一致する場合にのみ選択されます。で &lt;code&gt;:eq(n)&lt;/code&gt; 擬似クラスに取り付けのみセレクタカウントされ、他の要素の子に限らず、（N + 1）番目のいずれかがない（nは0ベース）が選択されます。</target>
        </trans-unit>
        <trans-unit id="689dff1a2d43ff2ac2346a95c07aae9a34eb5509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:nth-child(n)&lt;/code&gt; pseudo-class is easily confused with the &lt;code&gt;.eq( n )&lt;/code&gt; call, even though the two can result in dramatically different matched elements. With &lt;code&gt;:nth-child(n)&lt;/code&gt;, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With the &lt;code&gt;.eq( n )&lt;/code&gt; call only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</source>
          <target state="translated">&lt;code&gt;:nth-child(n)&lt;/code&gt; 疑似クラスを容易に混同されている &lt;code&gt;.eq( n )&lt;/code&gt; 二つは劇的に異なるマッチした要素をもたらすことができるにもかかわらず、コール。で &lt;code&gt;:nth-child(n)&lt;/code&gt; 、すべての子供にかかわらず、それらが何であるかを、カウントされ、そして指定された要素は、それが疑似クラスに取り付けられたセレクタに一致する場合にのみ選択されます。 &lt;code&gt;.eq( n )&lt;/code&gt; 擬似クラスに取り付けのみセレクタがカウントされているコール、他の要素の子に限らず、（N + 1）番目のいずれかがない（nは0ベース）が選択されます。</target>
        </trans-unit>
        <trans-unit id="480990aae62b645f5c757db08b5d22e7fc118d3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:selected&lt;/code&gt; selector works for &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements. It does not work for checkboxes or radio inputs; use &lt;code&gt;:checked&lt;/code&gt; for them.</source>
          <target state="translated">&lt;code&gt;:selected&lt;/code&gt; セレクタはのために働く &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素。チェックボックスやラジオ入力には機能しません。 &lt;code&gt;:checked&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="977650852f199848327084d347571ad1e5aaab2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:submit&lt;/code&gt; selector typically applies to button or input elements. Note that some browsers treat &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element as &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a &lt;code&gt;type&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;:submit&lt;/code&gt; セレクタは通常、ボタンや入力要素に適用されます。一部のブラウザは暗黙的に &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; として処理しますが、他のブラウザ（Internet Explorerなど）はそれを処理しません。マークアップがすべてのブラウザーで一貫して機能し、フォームを送信するボタンを一貫して選択できることを保証するには、常に &lt;code&gt;type&lt;/code&gt; プロパティを指定します。</target>
        </trans-unit>
        <trans-unit id="0e75c719b09262c87105625d3981cdd5716ee6d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertAfter()&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the selector expression preceding the method is the container after which the content is inserted. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;.insertAfter()&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは、構文、特にコンテンツとターゲットの配置にあります。 &lt;code&gt;.after()&lt;/code&gt; 、メソッドの前にセレクタ式は、コンテンツが挿入された後に容器です。 &lt;code&gt;.insertAfter()&lt;/code&gt; 、一方、コンテンツはセレクタ式として、またはオンザフライで作成されたマークアップとしてのいずれかで、方法の前に、それがターゲット・コンテナの後に挿入されます。</target>
        </trans-unit>
        <trans-unit id="a62ffe6286350b3c8dba0fe6ec0674cc784f5054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertAfter()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the selector expression preceding the method is the container after which the content is inserted. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;.insertAfter()&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは、構文固有、つまりコンテンツとターゲットの配置です。 &lt;code&gt;.after()&lt;/code&gt; 、メソッドの前にセレクタ式は、コンテンツが挿入された後に容器です。 &lt;code&gt;.insertAfter()&lt;/code&gt; 、一方、コンテンツはセレクタ式として、またはオンザフライで作成されたマークアップとしてのいずれかで、方法の前に、それがターゲット・コンテナの後に挿入されます。</target>
        </trans-unit>
        <trans-unit id="cd94168e712338f385a4b6a33602f5a25787172f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.appendTo()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.append()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.appendTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;.appendTo()&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは、構文固有、つまりコンテンツとターゲットの配置です。 &lt;code&gt;.append()&lt;/code&gt; 、メソッドの前にセレクタ式は、コンテンツが挿入される容器です。 &lt;code&gt;.appendTo()&lt;/code&gt; 、一方、コンテンツはセレクタ式として、またはオンザフライで作成されたマークアップとしてのいずれかで、方法の前に、それがターゲット・コンテナに挿入されます。</target>
        </trans-unit>
        <trans-unit id="fe43ace986ca75204f321e277ad9e4407e4e3b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertBefore()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.before()&lt;/code&gt;, the selector expression preceding the method is the container before which the content is inserted. With &lt;code&gt;.insertBefore()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;.insertBefore()&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは、構文固有、つまりコンテンツとターゲットの配置です。 &lt;code&gt;.before()&lt;/code&gt; 、メソッドの前にセレクタ式は、コンテンツが挿入される前の容器です。 &lt;code&gt;.insertBefore()&lt;/code&gt; 、一方、コンテンツはセレクタ式として、またはオンザフライで作成されたマークアップとしてのいずれかで、方法の前に、それがターゲット・コンテナの前に挿入されます。</target>
        </trans-unit>
        <trans-unit id="bb0b532a701ca8991b6d6cf5aa6767e6a60d3c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;not&quot;&gt;.not()&lt;/a&gt;&lt;/code&gt; method will end up providing you with more readable selections than pushing complex selectors or variables into a &lt;code&gt;:not()&lt;/code&gt; selector filter. In most cases, it is a better choice.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;not&quot;&gt;.not()&lt;/a&gt;&lt;/code&gt; メソッドは、複雑にセレクタや変数をプッシュするよりも読みやすい選択肢をご提供することになります &lt;code&gt;:not()&lt;/code&gt; セレクタフィルター。ほとんどの場合、それはより良い選択です。</target>
        </trans-unit>
        <trans-unit id="6e8de57099bebd411d7e3efca254b07f646e05d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.prependTo()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.prepend()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.prependTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;.prependTo()&lt;/code&gt; メソッドは、同じタスクを実行します。主な違いは、構文固有、つまりコンテンツとターゲットの配置です。 &lt;code&gt;.prepend()&lt;/code&gt; 、メソッドの前にセレクタ式は、コンテンツが挿入される容器です。 &lt;code&gt;.prependTo()&lt;/code&gt; 、一方、コンテンツはセレクタ式として、またはオンザフライで作成されたマークアップとしてのいずれかで、方法の前に、それがターゲット・コンテナに挿入されます。</target>
        </trans-unit>
        <trans-unit id="5b9d80e6d688dcee931bd76e1d9f5e5cca4795e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeSend&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;dataFilter&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; options all accept callback functions that are invoked at the appropriate times.</source>
          <target state="translated">&lt;code&gt;beforeSend&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;dataFilter&lt;/code&gt; 、 &lt;code&gt;success&lt;/code&gt; と &lt;code&gt;complete&lt;/code&gt; オプションは、すべての適切なタイミングで呼び出されるコールバック関数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="dc09994630bedb3f56bf21fb50b2ce7b0ebf957c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur&lt;/code&gt; event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the &lt;code&gt;blur&lt;/code&gt; event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping &lt;code&gt;blur&lt;/code&gt; to the &lt;code&gt;focusout&lt;/code&gt; event in its event delegation methods, &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;blur&lt;/code&gt; イベントは、Internet Explorerでバブルをしません。したがって、 &lt;code&gt;blur&lt;/code&gt; イベントでイベントの委任に依存するスクリプトは、ブラウザー間で一貫して機能しません。ただし、バージョン1.4.2以降では、jQuery は、イベント委譲メソッド&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;blur&lt;/code&gt; を &lt;code&gt;focusout&lt;/code&gt; イベントにマッピングすることにより、この制限を回避しています。</target>
        </trans-unit>
        <trans-unit id="190cbfc6dbdd3abf5df2269ad19e423de3c772bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur&lt;/code&gt; event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.</source>
          <target state="translated">&lt;code&gt;blur&lt;/code&gt; イベントは、それがフォーカスを失った要素に送られます。元々、このイベントは &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; などのフォーム要素にのみ適用可能でした。最近のブラウザでは、イベントのドメインが拡張され、すべての要素タイプが含まれるようになりました。要素は、Tabキーなどのキーボードコマンドを使用するか、ページ上の他の場所でマウスをクリックすると、フォーカスを失う可能性があります。</target>
        </trans-unit>
        <trans-unit id="96e3d342f9e34d87560a2e848d913dcdb9acca7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;change&lt;/code&gt; event is sent to an element when its value changes. This event is limited to &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; boxes and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.</source>
          <target state="translated">&lt;code&gt;change&lt;/code&gt; その値が変化したときにイベントが要素に送られます。このイベントは、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素、 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; ボックス、および &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素に限定されています。選択ボックス、チェックボックス、ラジオボタンの場合、ユーザーがマウスで選択を行うとすぐにイベントが発生しますが、他の要素タイプの場合は、要素がフォーカスを失うまでイベントは遅延されます。</target>
        </trans-unit>
        <trans-unit id="f256e3f7b3303084dd382deff803de56cd554cfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;click&lt;/code&gt; event is only triggered after this exact series of events:</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; イベントは、このイベントの正確な一連の後にトリガされます。</target>
        </trans-unit>
        <trans-unit id="86f9be7a8b000b85c91775d5ddce88ef554fea7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option can contain either a query string of the form &lt;code&gt;key1=value1&amp;amp;key2=value2&lt;/code&gt;, or an object of the form &lt;code&gt;{key1: 'value1', key2: 'value2'}&lt;/code&gt;. If the latter form is used, the data is converted into a query string using &lt;code&gt;&lt;a href=&quot;jquery.param&quot;&gt;jQuery.param()&lt;/a&gt;&lt;/code&gt; before it is sent. This processing can be circumvented by setting &lt;code&gt;processData&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the &lt;code&gt;contentType&lt;/code&gt; option from &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; to a more appropriate MIME type.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; オプションは、次の形式のクエリ文字列のいずれかで含有することができる &lt;code&gt;key1=value1&amp;amp;key2=value2&lt;/code&gt; 、またはフォームのオブジェクト &lt;code&gt;{key1: 'value1', key2: 'value2'}&lt;/code&gt; 。後者の形式を使用する場合、データは送信される前に &lt;code&gt;&lt;a href=&quot;jquery.param&quot;&gt;jQuery.param()&lt;/a&gt;&lt;/code&gt; を使用してクエリ文字列に変換されます。この処理は、 &lt;code&gt;processData&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定することで回避できます。XMLオブジェクトをサーバーに送信する場合、処理は望ましくない場合があります。この場合、 &lt;code&gt;contentType&lt;/code&gt; オプションを &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; からより適切なMIMEタイプに変更します。</target>
        </trans-unit>
        <trans-unit id="a45ea61e4be6c2fa09624cd140b6a4afcfcdff80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dblclick&lt;/code&gt; event is only triggered after this exact series of events:</source>
          <target state="translated">&lt;code&gt;dblclick&lt;/code&gt; イベントは、このイベントの正確な一連の後にトリガされます。</target>
        </trans-unit>
        <trans-unit id="11ae013fda7979634bb7b5a9d1a1604d6bed835c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.done()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since &lt;code&gt;deferred.done()&lt;/code&gt; returns the deferred object, other methods of the deferred object can be chained to this one, including additional &lt;code&gt;.done()&lt;/code&gt; methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;resolveWith&lt;/code&gt;&lt;/a&gt; method call in the order they were added. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;deferred.done()&lt;/code&gt; メソッドは、単一の機能または機能の配列のいずれかとすることができるすべてが1つまたは複数の引数を受け付けます。 Deferredが解決されると、doneCallbacksが呼び出されます。コールバックは追加された順序で実行されます。ため &lt;code&gt;deferred.done()&lt;/code&gt; 遅延オブジェクトを返し、遅延オブジェクトの他の方法は、追加を含む、これに連鎖させることができる &lt;code&gt;.done()&lt;/code&gt; メソッド。 Deferredが解決されると、&lt;a href=&quot;deferred.resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;deferred.resolvewith&quot;&gt; &lt;code&gt;resolveWith&lt;/code&gt; &lt;/a&gt;メソッド呼び出しに提供された引数を使用して、追加された順序でdoneCallbackが実行されます。詳細については、&lt;a href=&quot;category/deferred-object&quot;&gt;遅延オブジェクト&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bda5172606f19b9b736efbd893772823314bb31d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.fail()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since &lt;code&gt;deferred.fail()&lt;/code&gt; returns the deferred object, other methods of the deferred object can be chained to this one, including additional &lt;code&gt;deferred.fail()&lt;/code&gt; methods. The failCallbacks are executed using the arguments provided to the &lt;a href=&quot;deferred.reject&quot;&gt;&lt;code&gt;deferred.reject()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;deferred.rejectWith()&lt;/code&gt;&lt;/a&gt; method call in the order they were added. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;deferred.fail()&lt;/code&gt; メソッドは、単一の機能または機能の配列のいずれかとすることができるすべてが1つまたは複数の引数を受け付けます。 Deferredが拒否されると、failCallbacksが呼び出されます。コールバックは追加された順序で実行されます。ため &lt;code&gt;deferred.fail()&lt;/code&gt; 遅延オブジェクトを返し、遅延オブジェクトの他の方法は、追加を含む、これに連鎖させることができる &lt;code&gt;deferred.fail()&lt;/code&gt; メソッド。 failCallbacksは、追加された順序で&lt;a href=&quot;deferred.reject&quot;&gt; &lt;code&gt;deferred.reject()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;deferred.rejectwith&quot;&gt; &lt;code&gt;deferred.rejectWith()&lt;/code&gt; &lt;/a&gt;メソッド呼び出しに提供された引数を使用して実行されます。詳細については、&lt;a href=&quot;category/deferred-object&quot;&gt;遅延オブジェクト&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="00213c3f3db0a9c85f8d3be62e0af641fa058062" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.pipe()&lt;/code&gt; method returns a new promise that filters the status and values of a deferred through a function. The &lt;code&gt;doneFilter&lt;/code&gt; and &lt;code&gt;failFilter&lt;/code&gt; functions filter the original deferred's resolved / rejected status and values. &lt;strong&gt;As of jQuery 1.7&lt;/strong&gt;, the method also accepts a &lt;code&gt;progressFilter&lt;/code&gt; function to filter any calls to the original deferred's &lt;code&gt;notify&lt;/code&gt; or &lt;code&gt;notifyWith&lt;/code&gt; methods. These filter functions can return a new value to be passed along to the piped promise's &lt;code&gt;done()&lt;/code&gt; or &lt;code&gt;fail()&lt;/code&gt; callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is &lt;code&gt;null&lt;/code&gt;, or not specified, the piped promise will be resolved or rejected with the same values as the original.</source>
          <target state="translated">&lt;code&gt;deferred.pipe()&lt;/code&gt; メソッドは、機能によって延期のステータスと値をフィルタリングし、新たな約束を返します。 &lt;code&gt;doneFilter&lt;/code&gt; と &lt;code&gt;failFilter&lt;/code&gt; 機能は、元の繰延解決/拒否の状態と値をフィルタリングします。&lt;strong&gt;jQuery 1.7&lt;/strong&gt;以降、このメソッドは &lt;code&gt;progressFilter&lt;/code&gt; 関数も受け入れ、元の遅延 &lt;code&gt;notifyWith&lt;/code&gt; の &lt;code&gt;notify&lt;/code&gt; またはnotifyWithメソッドへの呼び出しをフィルタリングします。これらのフィルター関数は、パイプされたpromiseの &lt;code&gt;done()&lt;/code&gt; または &lt;code&gt;fail()&lt;/code&gt; に渡される新しい値を返すことができますコールバック、またはそれらは解決/拒否されたステータスと値をパイプされたpromiseのコールバックに渡す別の監視可能なオブジェクト（Deferred、Promiseなど）を返すことができます。使用されるフィルター関数が &lt;code&gt;null&lt;/code&gt; または指定されていない場合、パイプされたプロミスは元のプロミスと同じ値で解決または拒否されます。</target>
        </trans-unit>
        <trans-unit id="5f826199bcf49ca10b7a337c0b395fa9f9f67956" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.progress()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred generates progress notifications by calling &lt;code&gt;notify&lt;/code&gt; or &lt;code&gt;notifyWith&lt;/code&gt;, the &lt;code&gt;progressCallbacks&lt;/code&gt; are called. Since &lt;code&gt;deferred.progress()&lt;/code&gt; returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any &lt;code&gt;progressCallbacks&lt;/code&gt; added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the &lt;code&gt;.notify()&lt;/code&gt; or &lt;code&gt;notifyWith()&lt;/code&gt; call. For more information, see the documentation for &lt;a href=&quot;jquery.deferred&quot;&gt;jQuery.Deferred()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;deferred.progress()&lt;/code&gt; メソッドは、単一の機能または機能の配列のいずれかとすることができるすべてが1つまたは複数の引数を受け付けます。 Deferredが &lt;code&gt;notify&lt;/code&gt; または &lt;code&gt;notifyWith&lt;/code&gt; を呼び出して進行通知を生成すると、 &lt;code&gt;progressCallbacks&lt;/code&gt; が呼び出されます。ため &lt;code&gt;deferred.progress()&lt;/code&gt; 繰延オブジェクトを返し、繰延オブジェクトの他の方法は、これに連鎖させることができます。解決または拒否された繰延た場合、進捗のコールバックは、もはやどんなことを除いて、呼ばれません &lt;code&gt;progressCallbacks&lt;/code&gt; に渡された引数を使用して、繰延後に追加は、それらが追加されたときに、すぐに実行されている解決または拒否状態になり &lt;code&gt;.notify()&lt;/code&gt; または &lt;code&gt;notifyWith()&lt;/code&gt; 呼び出し。詳細については、&lt;a href=&quot;jquery.deferred&quot;&gt;jQuery.Deferred（）の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="797e3639f7aa73f48cd934bfb5beac1e7f53211a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.promise()&lt;/code&gt; method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (&lt;code&gt;then&lt;/code&gt;, &lt;code&gt;done&lt;/code&gt;, &lt;code&gt;fail&lt;/code&gt;, &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;pipe&lt;/code&gt;, &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;promise&lt;/code&gt;), but not ones that change the state (&lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;notify&lt;/code&gt;, &lt;code&gt;resolveWith&lt;/code&gt;, &lt;code&gt;rejectWith&lt;/code&gt;, and &lt;code&gt;notifyWith&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;deferred.promise()&lt;/code&gt; メソッドは、非同期関数は、その内部要求の進行または状態に干渉する他のコードを防止することを可能にします。 Promiseは、追加のハンドラーをアタッチするか、状態を決定するために必要なDeferredメソッド（ &lt;code&gt;then&lt;/code&gt; 、 &lt;code&gt;done&lt;/code&gt; 、 &lt;code&gt;fail&lt;/code&gt; 、 &lt;code&gt;always&lt;/code&gt; 、 &lt;code&gt;pipe&lt;/code&gt; 、 &lt;code&gt;progress&lt;/code&gt; 、 &lt;code&gt;state&lt;/code&gt; 、 &lt;code&gt;promise&lt;/code&gt; ）のみを公開しますが、状態を変更する &lt;code&gt;resolveWith&lt;/code&gt; （ &lt;code&gt;resolve&lt;/code&gt; 、 &lt;code&gt;reject&lt;/code&gt; 、 &lt;code&gt;notify&lt;/code&gt; 、resolveWith、 &lt;code&gt;rejectWith&lt;/code&gt; 、および &lt;code&gt;notifyWith&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7aada72a5a29999d21c048cef40f1e43a1a9a189" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end()&lt;/code&gt; method is useful primarily when exploiting jQuery's chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don't need to manipulate the stack. With &lt;code&gt;end()&lt;/code&gt;, though, we can string all the method calls together:</source>
          <target state="translated">&lt;code&gt;end()&lt;/code&gt; メソッドは、jQueryの連鎖の性質を利用し、主にするときに便利です。チェーンを使用しない場合、通常は変数名で前のオブジェクトを呼び出すことができるため、スタックを操作する必要はありません。 &lt;code&gt;end()&lt;/code&gt; 、しかし、我々はできる文字列は、すべての方法は、一緒に呼び出します。</target>
        </trans-unit>
        <trans-unit id="c74954130e96878d0570d2001ccdea54fe745acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; イベントは、ドキュメントによって参照され、ブラウザによってロードされている画像などの要素に送られます。要素が正しくロードされなかった場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4de04198e0282785992a572f3b0294e98a6eb007" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; event on the &lt;code&gt;window&lt;/code&gt; object uses nonstandard arguments and return value conventions, so it is not supported by jQuery. Instead, assign a handler function directly to the &lt;code&gt;window.onerror&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;window&lt;/code&gt; オブジェクトの &lt;code&gt;error&lt;/code&gt; イベントは非標準の引数と戻り値の規則を使用するため、jQueryではサポートされていません。代わりに、ハンドラー関数を &lt;code&gt;window.onerror&lt;/code&gt; プロパティに直接割り当てます。</target>
        </trans-unit>
        <trans-unit id="41a15e6d0c25cd827f5df958e1162a9271cec778" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;event.which&lt;/code&gt; property normalizes &lt;code&gt;event.keyCode&lt;/code&gt; and &lt;code&gt;event.charCode&lt;/code&gt;. It is recommended to watch &lt;code&gt;event.which&lt;/code&gt; for keyboard key input. For more detail, read about &lt;a href=&quot;https://developer.mozilla.org/en/DOM/event.charCode#Notes&quot;&gt;event.charCode on the MDN&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;event.which&lt;/code&gt; プロパティは、正規化 &lt;code&gt;event.keyCode&lt;/code&gt; と &lt;code&gt;event.charCode&lt;/code&gt; を。キーボードのキー入力には &lt;code&gt;event.which&lt;/code&gt; を監視することをお勧めします。詳細について&lt;a href=&quot;https://developer.mozilla.org/en/DOM/event.charCode#Notes&quot;&gt;は、MDNのevent.charCodeを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f120b8a959a3219847450a8ee53b66f4187d6db0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; argument can either be a space-separated list of event type names and optional namespaces, or an object of event name strings and handlers. The &lt;code&gt;data&lt;/code&gt; argument is optional and can be omitted. For example, the following three method calls are functionally equivalent (but see below for more effective and performant ways to attach delegated event handlers):</source>
          <target state="translated">&lt;code&gt;events&lt;/code&gt; 引数には、いずれかのイベントタイプ名と、オプションの名前空間のスペース区切りのリスト、またはイベント名の文字列とハンドラの対象となることができます。 &lt;code&gt;data&lt;/code&gt; 引数はオプションで、省略することができます。たとえば、次の3つのメソッド呼び出しは機能的に同等です（ただし、委任されたイベントハンドラーをアタッチするより効果的でパフォーマンスの高い方法については、以下を参照してください）。</target>
        </trans-unit>
        <trans-unit id="975ef46efd18ee6d2e52c114a4f50c14f32efd22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is an optional argument to &lt;code&gt;$.Callbacks()&lt;/code&gt;, structured as a list of space-separated strings that change how the callback list behaves (eg. &lt;code&gt;$.Callbacks( &quot;unique stopOnFalse&quot; )&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数はオプションの引数にある &lt;code&gt;$.Callbacks()&lt;/code&gt; どのように変化するかをコールバックリストに振る舞う（例えば。というスペースで区切られた文字列のリストとして構造化、 &lt;code&gt;$.Callbacks( &quot;unique stopOnFalse&quot; )&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3b181f01d34d240ec62554a3ea8b0f44ba029e93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; events are specified by the W3C to not bubble, but jQuery defines cross-browser &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt; events that do bubble. When &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; are used to attach delegated event handlers, jQuery maps the names and delivers them as &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt; respectively. For consistency and clarity, use the bubbling event type names.</source>
          <target state="translated">&lt;code&gt;focus&lt;/code&gt; と &lt;code&gt;blur&lt;/code&gt; のイベントがないバブルにW3Cによって指定されますが、jQueryのは、クロスブラウザを定義している &lt;code&gt;focusin&lt;/code&gt; と &lt;code&gt;focusout&lt;/code&gt; バブルを行うイベント。ときに &lt;code&gt;focus&lt;/code&gt; と &lt;code&gt;blur&lt;/code&gt; 委任イベントハンドラを取り付けるために使用されている、jQueryの名前をマッピングし、それらを提供する &lt;code&gt;focusin&lt;/code&gt; と &lt;code&gt;focusout&lt;/code&gt; それぞれ。一貫性と明確さのために、バブリングイベントタイプ名を使用します。</target>
        </trans-unit>
        <trans-unit id="d12d3d94af57d7b957f2a43b6a6ef3e7b3826720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the &lt;code&gt;focus&lt;/code&gt; event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping &lt;code&gt;focus&lt;/code&gt; to the &lt;code&gt;focusin&lt;/code&gt; event in its event delegation methods, &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;focus&lt;/code&gt; イベントは、Internet Explorerでバブルをしません。したがって、 &lt;code&gt;focus&lt;/code&gt; イベントを伴うイベントの委任に依存するスクリプトは、ブラウザー間で一貫して機能しません。ただし、バージョン1.4.2以降、jQuery は、イベント委譲メソッド&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; で&lt;/a&gt; &lt;code&gt;focus&lt;/code&gt; を &lt;code&gt;focusin&lt;/code&gt; イベントにマッピングすることにより、この制限を回避します。</target>
        </trans-unit>
        <trans-unit id="dc328d40a9d1978cbe1cf3f383e8ff007361446e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as form elements (&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, etc.) and links (&lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's &lt;code&gt;tabindex&lt;/code&gt; property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.</source>
          <target state="translated">&lt;code&gt;focus&lt;/code&gt; 、それがフォーカスを取得したときにイベントが要素に送られます。このイベントは、フォーム要素（ &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; など）やリンク（ &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; ）などの限られた要素セットに暗黙的に適用されます。最近のブラウザーバージョンでは、要素の &lt;code&gt;tabindex&lt;/code&gt; プロパティを明示的に設定することにより、イベントを拡張してすべての要素タイプを含めることができます。要素は、Tabキーなどのキーボードコマンドを介して、または要素をマウスでクリックして、フォーカスを取得できます。</target>
        </trans-unit>
        <trans-unit id="ce407117100e5ba30e2542a045398a2d4fbe17b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focusin&lt;/code&gt; event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the &lt;a href=&quot;focus&quot;&gt;focus&lt;/a&gt; event in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling).</source>
          <target state="translated">&lt;code&gt;focusin&lt;/code&gt; こと、またはその中の任意の要素は、利益が集中したときにイベントが要素に送られます。これは、親要素のフォーカスイベントの検出をサポートする（つまり、イベントバブリングをサポートする）点で、&lt;a href=&quot;focus&quot;&gt;フォーカス&lt;/a&gt;イベントとは異なります。</target>
        </trans-unit>
        <trans-unit id="5ce041c1230d97a8531ab94f0775a4789a0e64f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focusout&lt;/code&gt; event is sent to an element when it, or any element inside of it, loses focus. This is distinct from the &lt;a href=&quot;blur&quot;&gt;blur&lt;/a&gt; event in that it supports detecting the loss of focus on descendant elements (in other words, it supports event bubbling).</source>
          <target state="translated">&lt;code&gt;focusout&lt;/code&gt; のそれ、またはそれの任意の要素の内部は、フォーカスを失ったときにイベントが要素に送られます。これは、子孫要素へのフォーカスの喪失の検出をサポートする（つまり、イベントバブリングをサポートする）点で、&lt;a href=&quot;blur&quot;&gt;blur&lt;/a&gt;イベントとは異なります。</target>
        </trans-unit>
        <trans-unit id="ce50aa35bcab51ace26d4577f16d8f766ee983d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; option prevents handlers registered using &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ajaxerror&quot;&gt;.ajaxError()&lt;/a&gt;&lt;/code&gt;, and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt; if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to &lt;code&gt;false&lt;/code&gt;. See the descriptions of these methods below for more details.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; オプション防止ハンドラは、使用して登録 &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ajaxerror&quot;&gt;.ajaxError()&lt;/a&gt;&lt;/code&gt; この要求は、それらをトリガしたときに発射から、と同様の方法を。これは、たとえば、リクエストが頻繁で短い場合に、 &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt; で実装された読み込みインジケーターを抑制するのに役立ちます。クロスドメインスクリプトとJSONPリクエストでは、グローバルオプションは自動的に &lt;code&gt;false&lt;/code&gt; に設定されます。詳細については、以下のこれらのメソッドの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="abcc994cdebafa6dd62c6557f6c92b4296d2b215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; argument is a function (or the value &lt;code&gt;false&lt;/code&gt;, see below), and is required unless you pass an object for the &lt;code&gt;events&lt;/code&gt; argument. You can provide an anonymous handler function at the point of the &lt;code&gt;.on()&lt;/code&gt; call, as the examples have done above, or declare a named function and pass its name:</source>
          <target state="translated">&lt;code&gt;handler&lt;/code&gt; 引数は（または値関数である &lt;code&gt;false&lt;/code&gt; 、以下を参照）、そしてあなたがオブジェクトを渡さない限り必要とされる &lt;code&gt;events&lt;/code&gt; 引数。上記の例のように、 &lt;code&gt;.on()&lt;/code&gt; 呼び出しの時点で匿名ハンドラー関数を提供するか、名前付き関数を宣言してその名前を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b2e0e1d782c5ee3726542833629d15debaa0990f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; callback function can also take parameters. When the function is called, the event object will be passed to the first parameter.</source>
          <target state="translated">&lt;code&gt;handler&lt;/code&gt; コールバック関数もパラメータを取ることができます。関数が呼び出されると、イベントオブジェクトが最初のパラメーターに渡されます。</target>
        </trans-unit>
        <trans-unit id="aebaa4915cec07238cc3400080215cbb6913448d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; parameter takes a callback function, as shown above. Within the handler, the keyword &lt;code&gt;this&lt;/code&gt; refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal &lt;code&gt;$()&lt;/code&gt; function. For example:</source>
          <target state="translated">&lt;code&gt;handler&lt;/code&gt; の上に示すように、パラメータは、コールバック関数をとります。ハンドラー内のキーワード &lt;code&gt;this&lt;/code&gt; は、ハンドラーがバインドされているDOM要素を参照します。jQueryで要素を使用するには、通常の &lt;code&gt;$()&lt;/code&gt; 関数に渡すことができます。例えば：</target>
        </trans-unit>
        <trans-unit id="665f1a800666ebe5c19cf6aa8ac859d59065c260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Callbacks()&lt;/code&gt; function, introduced in version 1.7, returns a multi-purpose object that provides a powerful way to manage callback lists. It supports adding, removing, firing, and disabling callbacks.</source>
          <target state="translated">&lt;code&gt;jQuery.Callbacks()&lt;/code&gt; バージョン1.7で導入された機能は、コールバックのリストを管理するための強力な方法を提供し、多目的オブジェクトを返します。コールバックの追加、削除、起動、無効化をサポートしています。</target>
        </trans-unit>
        <trans-unit id="8185fa0ab452f17f753c1df65484ea8db044e929" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Deferred()&lt;/code&gt; factory creates a new &lt;code&gt;deferred&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;jQuery.Deferred()&lt;/code&gt; の工場は、新しい作成 &lt;code&gt;deferred&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="604bbb8f562ce63abc8a4a830e579583ea19fc8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Deferred&lt;/code&gt; method can be passed an optional function, which is called just before the method returns and is passed the new &lt;code&gt;deferred&lt;/code&gt; object as both the &lt;code&gt;this&lt;/code&gt; object and as the first argument to the function. The called function can attach callbacks using &lt;a href=&quot;deferred.then&quot;&gt;&lt;code&gt;deferred.then()&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="translated">&lt;code&gt;jQuery.Deferred&lt;/code&gt; の方法は、単にメソッドが戻る前に呼び出されて、新しい渡されるオプション機能、渡すことができる &lt;code&gt;deferred&lt;/code&gt; の両方としてオブジェクトを &lt;code&gt;this&lt;/code&gt; オブジェクトと関数の最初の引数としてあります。呼び出された関数は、たとえば、&lt;a href=&quot;deferred.then&quot;&gt; &lt;code&gt;deferred.then()&lt;/code&gt; &lt;/a&gt;を使用してコールバックをアタッチできます。</target>
        </trans-unit>
        <trans-unit id="24b6745cb85fcef2edb81c76d1dd1ad2e0bd4c9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Event&lt;/code&gt; constructor is exposed and can be used when calling &lt;a href=&quot;../../trigger&quot;&gt;trigger&lt;/a&gt;. The &lt;code&gt;new&lt;/code&gt; operator is optional.</source>
          <target state="translated">&lt;code&gt;jQuery.Event&lt;/code&gt; のコンストラクタが露出され、呼び出し時に使用することができます&lt;a href=&quot;../../trigger&quot;&gt;トリガを&lt;/a&gt;。 &lt;code&gt;new&lt;/code&gt; 演算子は任意です。</target>
        </trans-unit>
        <trans-unit id="13d3ca3d9389710007ac5e28b23209bd2827c184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore free from memory leaks. jQuery ensures that the data is removed when DOM elements are removed via jQuery methods, and when the user leaves the page. We can set several distinct values for a single element and retrieve them later:</source>
          <target state="translated">&lt;code&gt;jQuery.data()&lt;/code&gt; メソッドは、私たちは循環参照から安全、したがって、メモリリークのない方法で、DOM要素に任意の型のデータを添付することができます。jQueryは、jQueryメソッドを介してDOM要素が削除されたとき、およびユーザーがページを離れたときに、データが確実に削除されるようにします。単一の要素にいくつかの異なる値を設定し、後でそれらを取得できます。</target>
        </trans-unit>
        <trans-unit id="e3168126bd9faa615301fd22885baff874f9cdaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="translated">&lt;code&gt;jQuery.data()&lt;/code&gt; メソッドは、私たちはメモリリークから循環参照したがってから安全な方法でDOM要素に任意の型のデータを添付することができます。単一の要素の複数の異なる値を一度に1つずつ、またはセットとして取得できます。</target>
        </trans-unit>
        <trans-unit id="b58ce5b2421f175cccfc55bc89b8f9326b398cd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.fn.extend()&lt;/code&gt; method extends the jQuery prototype (&lt;code&gt;$.fn&lt;/code&gt;) object to provide new methods that can be chained to the &lt;code&gt;jQuery()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;jQuery.fn.extend()&lt;/code&gt; メソッドは、jQueryのプロトタイプ（拡張 &lt;code&gt;$.fn&lt;/code&gt; ）に連鎖させることができる新たな方法提供することを目的と &lt;code&gt;jQuery()&lt;/code&gt; 関数を。</target>
        </trans-unit>
        <trans-unit id="60e2c149d29e3c58427eec1ddf67ea5a978e0da6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.hasData()&lt;/code&gt; method provides a way to determine if an element currently has any values that were set using &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt;. If there is no data object associated with an element, the method returns &lt;code&gt;false&lt;/code&gt;; otherwise it returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;jQuery.hasData()&lt;/code&gt; メソッドは、要素が現在使用して設定された任意の値を有するかどうかを決定する方法を提供 &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt; 。要素に関連付けられたデータオブジェクトがない場合、メソッドは &lt;code&gt;false&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0da77c2aa73568361092bac2691ed27915c57df8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.queue()&lt;/code&gt; method allows us to directly manipulate this queue of functions. Calling &lt;code&gt;jQuery.queue()&lt;/code&gt; with a callback is particularly useful; it allows us to place a new function at the end of the queue.</source>
          <target state="translated">&lt;code&gt;jQuery.queue()&lt;/code&gt; メソッドは、私たちが直接の機能のこのキューを操作することができます。コールバックで &lt;code&gt;jQuery.queue()&lt;/code&gt; を呼び出すことは特に便利です。キューの最後に新しい関数を配置することができます。</target>
        </trans-unit>
        <trans-unit id="565a34b4e9f84c0d318e6c4a9c06da64b809bbb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.removeData()&lt;/code&gt; method allows us to remove values that were previously set using &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt;. When called with the name of a key, &lt;code&gt;jQuery.removeData()&lt;/code&gt; deletes that particular value; when called with no arguments, all values are removed.</source>
          <target state="translated">&lt;code&gt;jQuery.removeData()&lt;/code&gt; メソッドは、私たちは、以前に使用して設定された値を削除することができ &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt; 。キーの名前で呼び出されると、 &lt;code&gt;jQuery.removeData()&lt;/code&gt; はその特定の値を削除します。引数なしで呼び出されると、すべての値が削除されます。</target>
        </trans-unit>
        <trans-unit id="1e7bc28f086c399e4c9e321c7a440e482efc3b82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jqXHR.success()&lt;/code&gt;, &lt;code&gt;jqXHR.error()&lt;/code&gt;, and &lt;code&gt;jqXHR.complete()&lt;/code&gt; callback methods are &lt;strong&gt;removed as of jQuery 3.0&lt;/strong&gt;. You can use &lt;code&gt;jqXHR.done()&lt;/code&gt;, &lt;code&gt;jqXHR.fail()&lt;/code&gt;, and &lt;code&gt;jqXHR.always()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;jqXHR.success()&lt;/code&gt; 、 &lt;code&gt;jqXHR.error()&lt;/code&gt; 、及び &lt;code&gt;jqXHR.complete()&lt;/code&gt; コールバックメソッドがさ&lt;strong&gt;jQueryの3.0のように除去します&lt;/strong&gt;。 &lt;code&gt;jqXHR.done()&lt;/code&gt; 、 &lt;code&gt;jqXHR.fail()&lt;/code&gt; 、および &lt;code&gt;jqXHR.always()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="f92be4fe000ad94fa5b76d5ae4cbd149a16e9eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keydown&lt;/code&gt; event is sent to an element when the user presses a key on the keyboard. If the key is kept pressed, the event is sent every time the operating system repeats the key. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</source>
          <target state="translated">&lt;code&gt;keydown&lt;/code&gt; イベントは、ユーザがキーボードのキーを押したときに要素に送信されます。キーを押したままにすると、オペレーティングシステムがキーを繰り返すたびにイベントが送信されます。任意の要素に添付できますが、イベントはフォーカスを持つ要素にのみ送信されます。フォーカス可能な要素はブラウザーによって異なる場合がありますが、フォーム要素は常にフォーカスを取得できるため、このイベントタイプの適切な候補です。</target>
        </trans-unit>
        <trans-unit id="32ff7dffe7efbc0b47c01cc769130f1179525ab3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keypress&lt;/code&gt; event is sent to an element when the browser registers keyboard input. This is similar to the &lt;code&gt;keydown&lt;/code&gt; event, except that modifier and non-printing keys such as</source>
          <target state="translated">&lt;code&gt;keypress&lt;/code&gt; イベントは、ブラウザがキーボード入力を登録する要素に送られます。これは &lt;code&gt;keydown&lt;/code&gt; イベントに似ていますが、修飾子と非印刷キーなどが異なります。</target>
        </trans-unit>
        <trans-unit id="ff2403eb27d497bc275c8f7c7d1d0a83914e9d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keyup&lt;/code&gt; event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</source>
          <target state="translated">&lt;code&gt;keyup&lt;/code&gt; イベントは、ユーザーがキーボードのキーを離したときに要素に送信されます。任意の要素に添付できますが、イベントはフォーカスを持つ要素にのみ送信されます。フォーカス可能な要素はブラウザーによって異なる場合がありますが、フォーム要素は常にフォーカスを取得できるため、このイベントタイプの適切な候補です。</target>
        </trans-unit>
        <trans-unit id="1ce285026d9f78e3b806cc2e447eb91d6f20c3e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;load&lt;/code&gt; event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; それとすべてのサブ要素が完全にロードされたときにイベントが要素に送られます。このイベントは、URLに関連付けられた任意の要素（画像、スクリプト、フレーム、iframe、 &lt;code&gt;window&lt;/code&gt; オブジェクト）に送信できます。</target>
        </trans-unit>
        <trans-unit id="298347bd7f87fce8c617d4517cfd4c5ce65d731f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousedown&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.</source>
          <target state="translated">&lt;code&gt;mousedown&lt;/code&gt; イベントは、マウスポインタが要素上にあるときに要素に送られ、マウスボタンが押下されます。すべてのHTML要素がこのイベントを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="1b9c501cecef8d644812a3b72346bce59b94d9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousedown&lt;/code&gt; event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's &lt;code&gt;which&lt;/code&gt; property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of &lt;code&gt;which&lt;/code&gt; will be 1 for the left button, 2 for the middle button, or 3 for the right button.</source>
          <target state="translated">&lt;code&gt;mousedown&lt;/code&gt; 任意のマウスボタンがクリックされたときにイベントが送信されます。特定のボタンのみを操作するには、イベントオブジェクトの &lt;code&gt;which&lt;/code&gt; プロパティを使用できます。すべてのブラウザーがこのプロパティをサポートするわけではありません（Internet Explorerは代わりにボタンを使用します）が、jQueryはこのプロパティを正規化して、どのブラウザーでも安全に使用できるようにします。値は右ボタンの中央ボタンの左ボタンの1、2、または3です。 &lt;code&gt;which&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b37761ced6fd4810808c7ebb873311465526bbbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseenter&lt;/code&gt; JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</source>
          <target state="translated">&lt;code&gt;mouseenter&lt;/code&gt; JavaScriptイベントは、Internet Explorer独自のものです。イベントの一般的なユーティリティのため、jQueryはこのイベントをシミュレートして、ブラウザーに関係なく使用できるようにします。このイベントは、マウスポインターが要素に入ると要素に送信されます。すべてのHTML要素がこのイベントを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="b1c57d8a811fc1f9c33a1dffeaf841a6e2c80c74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseenter&lt;/code&gt; event differs from &lt;code&gt;mouseover&lt;/code&gt; in the way it handles event bubbling. If &lt;code&gt;mouseover&lt;/code&gt; were used in this example, then when the mouse pointer moved over the</source>
          <target state="translated">&lt;code&gt;mouseenter&lt;/code&gt; からのイベントが異なる &lt;code&gt;mouseover&lt;/code&gt; 、イベントバブリングを処理する方法インチ 場合 &lt;code&gt;mouseover&lt;/code&gt; この実施例で使用し、その後、マウスポインタが上を移動するとき</target>
        </trans-unit>
        <trans-unit id="0e998fa63a6373ae919ad037b49d4f728dd6bf05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseleave&lt;/code&gt; JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</source>
          <target state="translated">&lt;code&gt;mouseleave&lt;/code&gt; JavaScriptイベントは、Internet Explorer独自のものです。イベントの一般的なユーティリティのため、jQueryはこのイベントをシミュレートして、ブラウザーに関係なく使用できるようにします。このイベントは、マウスポインターが要素から離れると要素に送信されます。すべてのHTML要素がこのイベントを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="b8164273b96e3740f431d9d5f3df765b4ec5c68f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseleave&lt;/code&gt; event differs from &lt;code&gt;mouseout&lt;/code&gt; in the way it handles event bubbling. If &lt;code&gt;mouseout&lt;/code&gt; were used in this example, then when the mouse pointer moved out of the</source>
          <target state="translated">&lt;code&gt;mouseleave&lt;/code&gt; からイベントが異なる &lt;code&gt;mouseout&lt;/code&gt; 、イベントバブリングを処理する方法インチ 場合 &lt;code&gt;mouseout&lt;/code&gt; この実施例で使用し、その後、マウスポインタが外に移動するとき</target>
        </trans-unit>
        <trans-unit id="c983abec8d4a818cd465daf3f2d4afd6e71c9966" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousemove&lt;/code&gt; event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.</source>
          <target state="translated">&lt;code&gt;mousemove&lt;/code&gt; イベントが要素に送信されたときに素子内部にマウスポインタが移動します。すべてのHTML要素がこのイベントを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="e082ba9c1250e9f802e30f0ec6097895f8b88e93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseout&lt;/code&gt; event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</source>
          <target state="translated">&lt;code&gt;mouseout&lt;/code&gt; マウスポインタが要素から離れたときにイベントが要素に送られます。すべてのHTML要素がこのイベントを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="9106e2ddd472a53e0cf775e02b396b8ff0b95fa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseover&lt;/code&gt; event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</source>
          <target state="translated">&lt;code&gt;mouseover&lt;/code&gt; マウスポインタが要素に入ったときにイベントが要素に送られます。すべてのHTML要素がこのイベントを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="3e153372308071c715ee065406cb301d099f4f6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseup&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.</source>
          <target state="translated">&lt;code&gt;mouseup&lt;/code&gt; イベントは、マウスポインタが要素の上にあるとき、要素に送られ、マウスボタンが解放されます。すべてのHTML要素がこのイベントを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="26532a19220a35f1ea5c85fbd74d757625d7aed7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;null&lt;/code&gt; keyword is a JavaScript literal that is commonly used to express the absence of an intentional value.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; キーワードは、一般的に、意図的価値がないことを表現するために使用されているJavaScriptのリテラルです。</target>
        </trans-unit>
        <trans-unit id="392d2c36d94605ced68188b8ac59e9e5f6c1f8ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opacity&lt;/code&gt; of the image is already at its target value, so this property is not animated by the second click. Since the target value for &lt;code&gt;left&lt;/code&gt; is a relative value, the image moves even farther to the right during this second animation.</source>
          <target state="translated">画像の &lt;code&gt;opacity&lt;/code&gt; はすでに目標値になっているため、このプロパティは2回目のクリックでアニメーション化されません。 &lt;code&gt;left&lt;/code&gt; の目標値は相対値なので、この2番目のアニメーションでは、画像はさらに右に移動します。</target>
        </trans-unit>
        <trans-unit id="7bb964c5f56361acfa5ea28adb7c907dbc7f1504" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resize&lt;/code&gt; event is sent to the &lt;code&gt;window&lt;/code&gt; element when the size of the browser window changes:</source>
          <target state="translated">&lt;code&gt;resize&lt;/code&gt; イベントがに送信された &lt;code&gt;window&lt;/code&gt; ブラウザウィンドウのサイズを変更したときの要素：</target>
        </trans-unit>
        <trans-unit id="bffc347e3cd115a86996e548a12634ae46a7dcc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scriptCharset&lt;/code&gt; allows the character set to be explicitly specified for requests that use a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag (that is, a type of &lt;code&gt;script&lt;/code&gt; or &lt;code&gt;jsonp&lt;/code&gt;). This is useful if the script and host page have differing character sets.</source>
          <target state="translated">&lt;code&gt;scriptCharset&lt;/code&gt; は、文字セットが明示的に使用してリクエストに指定することができます &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; （、のタイプであるタグ &lt;code&gt;script&lt;/code&gt; または &lt;code&gt;jsonp&lt;/code&gt; ）。これは、スクリプトとホストページの文字セットが異なる場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d9ccb6b9fab4201ed4391a6f6c072bb61ffc6663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scroll&lt;/code&gt; event handler can be bound to this element:</source>
          <target state="translated">&lt;code&gt;scroll&lt;/code&gt; イベントハンドラは、この要素にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="929f11cae458a443ec78fc803403671cdd96dc1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scroll&lt;/code&gt; event is sent to an element when the user scrolls to a different place in the element. It applies to &lt;code&gt;window&lt;/code&gt; objects, but also to scrollable frames and elements with the &lt;code&gt;overflow &lt;/code&gt;CSS property set to &lt;code&gt;scroll&lt;/code&gt; (or &lt;code&gt;auto&lt;/code&gt; when the element's explicit height or width is less than the height or width of its contents).</source>
          <target state="translated">&lt;code&gt;scroll&lt;/code&gt; イベントは、ユーザーが要素内の別の場所にスクロールしたときに要素に送られます。これは、 &lt;code&gt;window&lt;/code&gt; オブジェクトに適用されますが、 &lt;code&gt;overflow &lt;/code&gt; CSSプロパティが &lt;code&gt;scroll&lt;/code&gt; （または要素の明示的な高さまたは幅がコンテンツの高さまたは幅より小さい場合は &lt;code&gt;auto&lt;/code&gt; )に設定されたスクロール可能なフレームおよび要素にも適用されます。</target>
        </trans-unit>
        <trans-unit id="8d5205a7fdd64edbe6625ef6cf64ce3deb0f9870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; event is sent to an element when the user makes a text selection inside it. This event is limited to &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; fields and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; boxes.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; たイベントは、ユーザーがその内のテキスト選択を行う要素に送信されます。このイベントは、 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; フィールドと &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; ボックスに限定されています。</target>
        </trans-unit>
        <trans-unit id="9113961f76be0bff850b1a78ab9fcf515e957ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;submit&lt;/code&gt; event is sent to an element when the user is attempting to submit a form. It can only be attached to &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements. Forms can be submitted either by clicking an explicit &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;image&quot;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;button type=&quot;submit&quot;&amp;gt;&lt;/code&gt;, or by pressing</source>
          <target state="translated">&lt;code&gt;submit&lt;/code&gt; たイベントは、ユーザーがフォームを送信しようとしている要素に送られます。 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素にのみアタッチできます。フォームは、明示的な &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;input type=&quot;image&quot;&amp;gt;&lt;/code&gt; 、または &lt;code&gt;&amp;lt;button type=&quot;submit&quot;&amp;gt;&lt;/code&gt; をクリックするか、または</target>
        </trans-unit>
        <trans-unit id="0dfac108ca3a7f225da06d364c594943ffbf4277" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; コールバック関数は、XMLのルート要素やレスポンスのMIMEタイプに応じて、テキスト文字列になります返されたデータを、渡されました。また、応答のテキストステータスも渡されます。</target>
        </trans-unit>
        <trans-unit id="e14c3da3cd5f7d01c1aa5b508e80ef7ea3f16bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response.</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; コールバック関数は、レスポンスのMIMEタイプに応じて、XMLのルート要素、テキスト文字列、JavaScriptファイル、またはJSONオブジェクトになります返されたデータを、渡されました。また、応答のテキストステータスも渡されます。</target>
        </trans-unit>
        <trans-unit id="5ccddae9e6ea73cc88cf2256dce7c4e9e74fac18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the &lt;code&gt;&lt;a href=&quot;jquery.parsejson&quot;&gt;$.parseJSON()&lt;/a&gt;&lt;/code&gt; method. It is also passed the text status of the response.</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; コールバックは、JSON構造によって定義され、使用して解析されたとして、典型的にはJavaScriptのオブジェクトまたは配列で返されたデータ、渡された &lt;code&gt;&lt;a href=&quot;jquery.parsejson&quot;&gt;$.parseJSON()&lt;/a&gt;&lt;/code&gt; メソッドを。また、応答のテキストステータスも渡されます。</target>
        </trans-unit>
        <trans-unit id="f83c22f4983d0e50a0571d7102879050f1da052c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; property can be the element that registered for the event or a descendant of it. It is often useful to compare &lt;code&gt;event.target&lt;/code&gt; to &lt;code&gt;this&lt;/code&gt; in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; プロパティは、イベントまたはその子孫に対して登録要素とすることができます。イベントのバブリングが原因でイベントが処理されているかどうかを判断するために、 &lt;code&gt;event.target&lt;/code&gt; を &lt;code&gt;this&lt;/code&gt; と比較すると便利な場合があります。このプロパティは、イベントがバブリングするイベントの委任で非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="1b8d3506026b92f86a8e616813798c3b44dc5159" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; reference within all callbacks is the object in the &lt;code&gt;context&lt;/code&gt; option passed to &lt;code&gt;$.ajax&lt;/code&gt; in the settings; if &lt;code&gt;context&lt;/code&gt; is not specified, &lt;code&gt;this&lt;/code&gt; is a reference to the Ajax settings themselves.</source>
          <target state="translated">すべてのコールバック内の &lt;code&gt;this&lt;/code&gt; 参照は、設定で &lt;code&gt;$.ajax&lt;/code&gt; に渡される &lt;code&gt;context&lt;/code&gt; オプションのオブジェクトです。 &lt;code&gt;context&lt;/code&gt; が指定されていない場合、 &lt;code&gt;this&lt;/code&gt; はAjax設定自体への参照です。</target>
        </trans-unit>
        <trans-unit id="7bcc51686054e999eac9f0a4254231a3d071aafe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unload&lt;/code&gt; event is sent to the &lt;code&gt;window&lt;/code&gt; element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an &lt;code&gt;unload&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;unload&lt;/code&gt; イベントがに送信された &lt;code&gt;window&lt;/code&gt; ユーザーがそのページから去るナビゲートする際の要素。これは、多くのことの1つを意味します。ユーザーはリンクをクリックしてページを離れるか、アドレスバーに新しいURLを入力した可能性があります。進むボタンと戻るボタンでイベントがトリガーされます。ブラウザーウィンドウを閉じると、イベントがトリガーされます。ページのリロードでも、最初に &lt;code&gt;unload&lt;/code&gt; イベントが作成されます。</target>
        </trans-unit>
        <trans-unit id="d09b0e7e80a1ed1f473f9537c4e4ed4c3ee2fdd4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Anything&lt;/strong&gt; virtual type is used in jQuery documentation to indicate that any type can be used or should be expected.</source>
          <target state="translated">&lt;strong&gt;何でも&lt;/strong&gt;仮想型は任意の型を使用することができますまたは予想されるべきであることを示すためにjQueryのドキュメントで使用されています。</target>
        </trans-unit>
        <trans-unit id="17ba7d519f5da361502187fb64363f84401d28a3" translate="yes" xml:space="preserve">
          <source>The Ajax module also has a method named &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt;. Which one is fired depends on the set of arguments passed.</source>
          <target state="translated">Ajaxモジュールには、 &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt; という名前のメソッドもあります。どちらが起動されるかは、渡された引数のセットによって異なります。</target>
        </trans-unit>
        <trans-unit id="b7648d06183b24c5934f6b9dd7232c3b3d4b750f" translate="yes" xml:space="preserve">
          <source>The Array of DOM elements.</source>
          <target state="translated">DOM 要素の配列。</target>
        </trans-unit>
        <trans-unit id="1ed686e6db6ada7c500787b23e3925a96af3fbc7" translate="yes" xml:space="preserve">
          <source>The Array to translate.</source>
          <target state="translated">翻訳する配列。</target>
        </trans-unit>
        <trans-unit id="2a94de58ebbebbaecd9d5009b890ff094e401547" translate="yes" xml:space="preserve">
          <source>The CSS specification allows elements to be identified by their attributes. While not supported by some older browsers for the purpose of styling documents, jQuery allows you to employ them regardless of the browser being used.</source>
          <target state="translated">CSSの仕様では、要素を属性で識別できるようになっています。ドキュメントのスタイリングを目的とした一部の古いブラウザではサポートされていませんが、jQueryでは使用しているブラウザに関わらず、これらを採用することができます。</target>
        </trans-unit>
        <trans-unit id="344c01e9b699ec2972a3002d539ac1f765367d65" translate="yes" xml:space="preserve">
          <source>The DOM element or first element within the jQuery object to look for.</source>
          <target state="translated">検索する DOM 要素または jQuery オブジェクト内の最初の要素。</target>
        </trans-unit>
        <trans-unit id="ed5ebae3f36ac0af15138db92d7110d8347bb9aa" translate="yes" xml:space="preserve">
          <source>The DOM element that initiated the event.</source>
          <target state="translated">イベントを開始した DOM 要素。</target>
        </trans-unit>
        <trans-unit id="eab99c0095d7aec3d1b00060ff7c1b6aec862144" translate="yes" xml:space="preserve">
          <source>The DOM element that may be contained by (a descendant of) the other element.</source>
          <target state="translated">他の要素(の子孫)が含む可能性のある DOM 要素。</target>
        </trans-unit>
        <trans-unit id="2cec87eb51b7b37174f1c29a76ae13e9889ebe48" translate="yes" xml:space="preserve">
          <source>The DOM element that may contain the other element.</source>
          <target state="translated">他の要素を含む可能性のある DOM 要素。</target>
        </trans-unit>
        <trans-unit id="fe6bef9476a7d79e0d7dff8416213cf39b5ca1e3" translate="yes" xml:space="preserve">
          <source>The DOM element to associate with the data.</source>
          <target state="translated">データに関連付ける DOM 要素。</target>
        </trans-unit>
        <trans-unit id="dc030c4a2d267f040181927d43fe4935e74d89fc" translate="yes" xml:space="preserve">
          <source>The DOM element to query for the data.</source>
          <target state="translated">データを問い合わせるための DOM 要素。</target>
        </trans-unit>
        <trans-unit id="5d6133b7dddf9fc4e773853a4b4b07d451a10ef9" translate="yes" xml:space="preserve">
          <source>The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.</source>
          <target state="translated">もともと jQuery()に渡されていた DOM ノードのコンテキスト。</target>
        </trans-unit>
        <trans-unit id="32ab8cdf2d8dfb86443e633f5408b3f7803e0bfe" translate="yes" xml:space="preserve">
          <source>The DOM node that will be checked to see if it's in an XML document.</source>
          <target state="translated">XML ドキュメントの中にあるかどうかをチェックする DOM ノード。</target>
        </trans-unit>
        <trans-unit id="d4ceb340e65dd24c78ae93f5cd9af71b1fafda62" translate="yes" xml:space="preserve">
          <source>The Date type is a JavaScript object that represents a single moment in time. Date objects are instantiated using their constructor function, which by default creates an object that represents the current date and time.</source>
          <target state="translated">Date 型は、時間の中のある瞬間を表す JavaScript オブジェクトです。Date オブジェクトはコンストラクタ関数を使用してインスタンス化され、デフォルトでは現在の日付と時刻を表すオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="3000f310db76967f2f07fdbcf374ac00504b3972" translate="yes" xml:space="preserve">
          <source>The Deferred object is chainable, similar to the way a jQuery object is chainable, but it has its own methods. After creating a Deferred object, you can use any of the methods below by either chaining directly from the object creation or saving the object in a variable and invoking one or more methods on that variable.</source>
          <target state="translated">DeferredオブジェクトはjQueryオブジェクトがチェーン可能なのと同じようにチェーン可能ですが、独自のメソッドを持っています。Deferredオブジェクトを作成した後は、オブジェクト作成から直接チェーンするか、オブジェクトを変数に保存し、その変数上で1つ以上のメソッドを呼び出すことで、以下のいずれかのメソッドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="0a1f8379a7498e59eef9c2b47244cc00919a3dbb" translate="yes" xml:space="preserve">
          <source>The Deferred object, introduced in jQuery 1.5, is a chainable utility object created by calling the &lt;a href=&quot;../jquery.deferred&quot;&gt;&lt;code&gt;jQuery.Deferred()&lt;/code&gt;&lt;/a&gt; method. It can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</source>
          <target state="translated">jQuery 1.5で導入されたDeferredオブジェクトは、&lt;a href=&quot;../jquery.deferred&quot;&gt; &lt;code&gt;jQuery.Deferred()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されるチェーン可能なユーティリティオブジェクトです。複数のコールバックをコールバックキューに登録し、コールバックキューを呼び出して、同期または非同期関数の成功または失敗の状態を中継できます。</target>
        </trans-unit>
        <trans-unit id="ff66dca29c062490170f940b0d40f27697ff8621" translate="yes" xml:space="preserve">
          <source>The Event object</source>
          <target state="translated">イベントオブジェクト</target>
        </trans-unit>
        <trans-unit id="092a65cd15982d517c7cf3d19af043054e48e494" translate="yes" xml:space="preserve">
          <source>The HTML string on which to operate.</source>
          <target state="translated">操作の対象となるHTML文字列。</target>
        </trans-unit>
        <trans-unit id="f6e4c07493ef60e5d01175f31e8dbda3949ad8bc" translate="yes" xml:space="preserve">
          <source>The HTTP method to use for the request (e.g. &lt;code&gt;&quot;POST&quot;&lt;/code&gt;, &lt;code&gt;&quot;GET&quot;&lt;/code&gt;, &lt;code&gt;&quot;PUT&quot;&lt;/code&gt;). (version added: &lt;a href=&quot;https://api.jquery.com/category/version/1.9.0/&quot;&gt;1.9.0&lt;/a&gt;)</source>
          <target state="translated">リクエストに使用するHTTPメソッド（例： &lt;code&gt;&quot;POST&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;GET&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;PUT&quot;&lt;/code&gt; ）。（追加されたバージョン：&lt;a href=&quot;https://api.jquery.com/category/version/1.9.0/&quot;&gt;1.9.0&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f3dc39f05895e187594bdff8c739099cd3ef44f2" translate="yes" xml:space="preserve">
          <source>The JSON standard does not permit &quot;control characters&quot; such as a tab or newline. An example like &lt;code&gt;$.parseJSON( '{ &quot;testing&quot;:&quot;1\t2\n3&quot; }' )&lt;/code&gt; will throw an error in most implementations because the JavaScript parser converts the string's tab and newline escapes into literal tab and newline; doubling the backslashes like &lt;code&gt;&quot;1\\t2\\n3&quot;&lt;/code&gt; yields expected results. This problem is often seen when injecting JSON into a JavaScript file from a server-side language such as PHP.</source>
          <target state="translated">JSON標準では、タブや改行などの「制御文字」は許可されていません。 &lt;code&gt;$.parseJSON( '{ &quot;testing&quot;:&quot;1\t2\n3&quot; }' )&lt;/code&gt; ような例は、JavaScriptパーサーが文字列のタブと改行エスケープをリテラルタブと改行に変換するため、ほとんどの実装でエラーをスローします。 &lt;code&gt;&quot;1\\t2\\n3&quot;&lt;/code&gt; ようにバックスラッシュを2倍にすると、期待した結果が得られます。この問題は、PHPなどのサーバー側言語からJSONをJavaScriptファイルに挿入するときによく見られます。</target>
        </trans-unit>
        <trans-unit id="0309d3fb6068e328dd40b93aceba5a1d021334b9" translate="yes" xml:space="preserve">
          <source>The JSON string to parse.</source>
          <target state="translated">解析するJSON文字列。</target>
        </trans-unit>
        <trans-unit id="efd29258fca513f46146772577c2b30f5e2a0f96" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;submit&lt;/code&gt; event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the &lt;code&gt;submit&lt;/code&gt; event will work consistently across browsers as of jQuery 1.4, which has normalized the event's behavior.</source>
          <target state="translated">JavaScript &lt;code&gt;submit&lt;/code&gt; イベントはInternet Explorerでバブルしません。ただし、 &lt;code&gt;submit&lt;/code&gt; イベントによるイベントの委任に依存するスクリプトは、jQuery 1.4以降、ブラウザー全体で一貫して機能します。これにより、イベントの動作が正規化されました。</target>
        </trans-unit>
        <trans-unit id="724d8c6764e0316ac4c41ba0c0b56449243a6c38" translate="yes" xml:space="preserve">
          <source>The JavaScript code to execute.</source>
          <target state="translated">実行するJavaScriptのコード。</target>
        </trans-unit>
        <trans-unit id="3b2129b20519ddffea0fe7ceea74d5ff0a115896" translate="yes" xml:space="preserve">
          <source>The Object to translate.</source>
          <target state="translated">翻訳するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="c8d98bc8f048d9c824aebc49e11225ff08a91d77" translate="yes" xml:space="preserve">
          <source>The POST method is used if data is provided as an object; otherwise, GET is assumed.</source>
          <target state="translated">データがオブジェクトとして提供される場合はPOSTメソッドが使用され、そうでない場合はGETが想定されます。</target>
        </trans-unit>
        <trans-unit id="2640e06e6701b966e29a283e9bd75f2d73784d4b" translate="yes" xml:space="preserve">
          <source>The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain object is, in other words, an &lt;code&gt;Object&lt;/code&gt; object. It is designated &quot;plain&quot; in jQuery documentation to distinguish it from other kinds of JavaScript objects: for example, &lt;code&gt;null&lt;/code&gt;, user-defined arrays, and host objects such as &lt;code&gt;document&lt;/code&gt;, all of which have a &lt;code&gt;typeof&lt;/code&gt; value of &quot;object.&quot; The &lt;code&gt;&lt;a href=&quot;jquery.isplainobject&quot;&gt;jQuery.isPlainObject()&lt;/a&gt;&lt;/code&gt; method identifies whether the passed argument is a plain object or not, as demonstrated below:</source>
          <target state="translated">PlainObject型は、0個以上のキーと値のペアを含むJavaScriptオブジェクトです。プレーンオブジェクトは、言い換えると、 &lt;code&gt;Object&lt;/code&gt; オブジェクトです。他の種類のJavaScriptオブジェクト（たとえば &lt;code&gt;null&lt;/code&gt; 、ユーザー定義配列、および &lt;code&gt;document&lt;/code&gt; などのホストオブジェクト）と区別するために、jQueryドキュメントでは「プレーン」と指定されており、すべて &lt;code&gt;typeof&lt;/code&gt; 値が「object」です。 &lt;code&gt;&lt;a href=&quot;jquery.isplainobject&quot;&gt;jQuery.isPlainObject()&lt;/a&gt;&lt;/code&gt; メソッドは、次に示すように、渡された引数がプレーンオブジェクトかどうかを識別します。</target>
        </trans-unit>
        <trans-unit id="587e7d693373dd183bdd6d7b252b02ad4cbc6584" translate="yes" xml:space="preserve">
          <source>The Promise interface also allows jQuery's Ajax methods, including &lt;code&gt;$.get()&lt;/code&gt;, to chain multiple &lt;code&gt;.done()&lt;/code&gt;, &lt;code&gt;.fail()&lt;/code&gt;, and &lt;code&gt;.always()&lt;/code&gt; callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</source>
          <target state="translated">プロミスインタフェースも含めてjQueryのAjaxの方法、ことができます &lt;code&gt;$.get()&lt;/code&gt; チェーンの複数の、 &lt;code&gt;.done()&lt;/code&gt; 、 &lt;code&gt;.fail()&lt;/code&gt; 、および &lt;code&gt;.always()&lt;/code&gt; 単一の要求にコールバックし、さらに要求した後、これらのコールバックを割り当てるかもしれません完了しました。リクエストがすでに完了している場合は、コールバックがすぐに発生します。</target>
        </trans-unit>
        <trans-unit id="43e52de5068bb1e070f3ee42e34c03fc0ec345d8" translate="yes" xml:space="preserve">
          <source>The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including &lt;code&gt;$.getJSON()&lt;/code&gt;, to chain multiple &lt;code&gt;.done()&lt;/code&gt;, &lt;code&gt;.always()&lt;/code&gt;, and &lt;code&gt;.fail()&lt;/code&gt; callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</source>
          <target state="translated">jQuery 1.5のPromiseインターフェースでは、jQueryのAjaxメソッド &lt;code&gt;$.getJSON()&lt;/code&gt; を含む &lt;code&gt;.done()&lt;/code&gt; を &lt;code&gt;.always()&lt;/code&gt; して、単一の要求で複数の.done（）、.always（）、および &lt;code&gt;.fail()&lt;/code&gt; コールバックをチェーンし、これらのコールバックを後で割り当てることもできます。リクエストが完了した可能性があります。リクエストがすでに完了している場合は、コールバックがすぐに発生します。</target>
        </trans-unit>
        <trans-unit id="d6eb2e2c386b7b7095dc892d50af68ceac7a6ab8" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see &lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;http://www.w3.org/TR/html401/struct/text.html#edef-P&lt;/a&gt;). Some other elements, on the other hand, are empty (i.e. have no children) by definition:&lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, for example.</source>
          <target state="translated">W3Cは、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素が少なくとも1つの子ノードを持つことをお勧めします。たとえその子が単なるテキストであってもです（&lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;http://www.w3.org/TR/html401/struct/text.html#edef-Pを参照&lt;/a&gt;）。一方、他のいくつかの要素は、定義により空になります（つまり、子がありません）。たとえば、 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt; 、&amp;lt;img&amp;gt;、 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5b6519a6ba7c2d20aff481697ae138b671dc2b3a" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see &lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;https://www.w3.org/TR/html401/struct/text.html#edef-P&lt;/a&gt;). Some other elements, on the other hand, are empty (i.e. have no children) by definition:&lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, for example.</source>
          <target state="translated">W3Cは、子が単なるテキストであっても、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素に少なくとも1つの子ノードを含めることを推奨しています（&lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;https://www.w3.org/TR/html401/struct/text.html#edef-Pを&lt;/a&gt;参照）。一方、他のいくつかの要素は、定義上、空です（つまり、子がありません）。たとえば、 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt; 、&amp;lt;img&amp;gt;、 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; などです。</target>
        </trans-unit>
        <trans-unit id="1e19a093a3b453869f5a9e45b3b4c2922a34b749" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see https://www.w3.org/TR/html401/struct/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &amp;lt;input&amp;gt;, &amp;lt;img&amp;gt;, &amp;lt;br&amp;gt;, and &amp;lt;hr&amp;gt;, for example.</source>
          <target state="translated">W3C は、子が単なるテキストであっても、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素に少なくとも1つの子ノードがあることを推奨しています（https://www.w3.org/TR/html401/struct/text.html#edef-Pを参照）。一方、他のいくつかの要素は、定義によって空になります（つまり、子がありません）。たとえば、&amp;lt;input&amp;gt;、&amp;lt;img&amp;gt;、&amp;lt;br&amp;gt;、および&amp;lt;hr&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="070d3bba3be689c7dcc9db2cb7e1c2b999bc4b84" translate="yes" xml:space="preserve">
          <source>The above code will generate two different alerts when the button is clicked.</source>
          <target state="translated">上記のコードは、ボタンがクリックされたときに2つの異なるアラートを生成します。</target>
        </trans-unit>
        <trans-unit id="9f62fe5d402e31a15da9defb30b12c9f45a3306a" translate="yes" xml:space="preserve">
          <source>The above lines alert the data values that were set on the &lt;code&gt;body&lt;/code&gt; element. If no data at all was set on that element, &lt;code&gt;undefined&lt;/code&gt; is returned.</source>
          <target state="translated">上記の行は、 &lt;code&gt;body&lt;/code&gt; 要素に設定されたデータ値を警告しています。その要素にデータがまったく設定されていない場合、 &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="19dbc42eb0079a96f335996e2465e83a8699102f" translate="yes" xml:space="preserve">
          <source>The above lines alert the data values that were set on the &lt;code&gt;body&lt;/code&gt; element. If nothing was set on that element, an empty string is returned.</source>
          <target state="translated">上記の行は、 &lt;code&gt;body&lt;/code&gt; 要素に設定されたデータ値を警告しています。その要素に何も設定されていない場合は、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="eae634c1a9899fb5e22d8b13e7563287e4cef7e7" translate="yes" xml:space="preserve">
          <source>The above now allows passing from &lt;code&gt;text&lt;/code&gt; to &lt;code&gt;mycustomtype&lt;/code&gt; and then &lt;code&gt;mycustomtype&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt;.</source>
          <target state="translated">上記では、 &lt;code&gt;text&lt;/code&gt; から &lt;code&gt;mycustomtype&lt;/code&gt; に、次に &lt;code&gt;mycustomtype&lt;/code&gt; を &lt;code&gt;json&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2b32e570dfd596419701353365115bdabacf94c4" translate="yes" xml:space="preserve">
          <source>The above wraps its code in a function to hide the &quot;proxied&quot;-variable. It saves jQuery's setArray-method in a closure and overwrites it. The proxy then logs all calls to the method and delegates the call to the original. Using apply(this, arguments) guarantees that the caller won't be able to notice the difference between the original and the proxied method.</source>
          <target state="translated">上記のコードは、&quot;proxied &quot;変数を隠すための関数でラップしています。これは jQuery の setArray-method をクロージャに保存し、それを上書きします。その後、プロキシはメソッドへの呼び出しをすべてログに記録し、元の呼び出しをデリゲートします。apply(this,arguments)を使用すると、呼び出し元が元のメソッドとプロキシされたメソッドの違いに気づかないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="6610ea50c945318d3ab7693d709bd53977c14242" translate="yes" xml:space="preserve">
          <source>The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the &lt;code&gt;alwaysCallbacks&lt;/code&gt; are called. Since &lt;code&gt;deferred.always()&lt;/code&gt; returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional &lt;code&gt;.always()&lt;/code&gt; methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.reject&quot;&gt;&lt;code&gt;reject&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;resolveWith&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;rejectWith&lt;/code&gt;&lt;/a&gt; method calls. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="translated">引数は、単一の関数または関数の配列のいずれかです。 Deferredが解決または拒否されると、 &lt;code&gt;alwaysCallbacks&lt;/code&gt; が呼び出されます。以来 &lt;code&gt;deferred.always()&lt;/code&gt; 繰延オブジェクトを返し、繰延オブジェクトの他の方法は、追加を含む、これに連鎖させることができる &lt;code&gt;.always()&lt;/code&gt; メソッド。 Deferredが解決または拒否されると、&lt;a href=&quot;deferred.resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.reject&quot;&gt; &lt;code&gt;reject&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.resolvewith&quot;&gt; &lt;code&gt;resolveWith&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;deferred.rejectwith&quot;&gt; &lt;code&gt;rejectWith&lt;/code&gt; &lt;/a&gt;メソッド呼び出しに提供された引数を使用して、追加された順序でコールバックが実行されます。詳細については、&lt;a href=&quot;category/deferred-object&quot;&gt;遅延オブジェクト&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8b4b7d3a4511e33399069ffc13d4bc8def0f503b" translate="yes" xml:space="preserve">
          <source>The argument or list of arguments to pass back to the callback list.</source>
          <target state="translated">コールバックリストに渡す引数またはリスト。</target>
        </trans-unit>
        <trans-unit id="953b3138188e0f4497437947cd8a29321abeb58c" translate="yes" xml:space="preserve">
          <source>The arguments object also has a callee property, which refers to the function you're inside of. For instance:</source>
          <target state="translated">また、引数オブジェクトにはcalleeプロパティがあり、これはあなたが中にいる関数を参照します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="bc1aa336f96c29c99dc1ba1bdef4fa0b9f4fb846" translate="yes" xml:space="preserve">
          <source>The arguments that were passed in to the jQuery method (for serialization).</source>
          <target state="translated">jQueryメソッドに渡された引数(シリアライズ用)。</target>
        </trans-unit>
        <trans-unit id="01fe9863cb30f7b0bcc0e1d8d4a68a046910e081" translate="yes" xml:space="preserve">
          <source>The array or array-like object to iterate over.</source>
          <target state="translated">反復処理を行う配列または配列のようなオブジェクト.</target>
        </trans-unit>
        <trans-unit id="bfc6aedd808a2761d036a171b890dbe3969ca47d" translate="yes" xml:space="preserve">
          <source>The array-like object to search through.</source>
          <target state="translated">探索する配列状のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a92d8a0b1c47a77890394dcce7884f2dd51b73ca" translate="yes" xml:space="preserve">
          <source>The available data types are &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;jsonp&lt;/code&gt;, and &lt;code&gt;script&lt;/code&gt;.</source>
          <target state="translated">使用可能なデータ型は、 &lt;code&gt;text&lt;/code&gt; 、 &lt;code&gt;html&lt;/code&gt; 、 &lt;code&gt;xml&lt;/code&gt; 、 &lt;code&gt;json&lt;/code&gt; 、 &lt;code&gt;jsonp&lt;/code&gt; 、および &lt;code&gt;script&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f474111176dbe4b72c85bfbcfa1c612929642144" translate="yes" xml:space="preserve">
          <source>The callback hooks provided by &lt;code&gt;$.ajax()&lt;/code&gt; are as follows:</source>
          <target state="translated">&lt;code&gt;$.ajax()&lt;/code&gt; によって提供されるコールバックフックは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="48456f9d8ed08fb80093cafa81da3b3750f4a2ec" translate="yes" xml:space="preserve">
          <source>The callback is fired once the script has been loaded but not necessarily executed.</source>
          <target state="translated">このコールバックは、スクリプトが読み込まれると発生しますが、必ずしも実行されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="0a150dbeefa27a6fdaddf5d4cbf61e79e3e341a3" translate="yes" xml:space="preserve">
          <source>The callback to search for.</source>
          <target state="translated">検索するためのコールバックです。</target>
        </trans-unit>
        <trans-unit id="6b9e0b41d52d14d06d6f59d74c2f23e7bb7aacd6" translate="yes" xml:space="preserve">
          <source>The child combinator (E &lt;strong&gt;&amp;gt;&lt;/strong&gt; F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.</source>
          <target state="translated">子コンビネーター（E &lt;strong&gt;&amp;gt;&lt;/strong&gt; F）は、第1レベルの子孫のみを選択するという点で、子孫コンビネーター（EF）のより具体的な形式と考えることができます。</target>
        </trans-unit>
        <trans-unit id="b0131d897f9ebfd2e8528f7451f2bd70eaf19197" translate="yes" xml:space="preserve">
          <source>The class name to search for.</source>
          <target state="translated">検索するクラス名。</target>
        </trans-unit>
        <trans-unit id="1c76c95474ded1c83df62e9659deaf1e78a2557e" translate="yes" xml:space="preserve">
          <source>The code &lt;code&gt;$( &quot;div.demo-container&quot; ).text( &quot;&amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;&quot; );&lt;/code&gt; will produce the following DOM output:</source>
          <target state="translated">コード &lt;code&gt;$( &quot;div.demo-container&quot; ).text( &quot;&amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;&quot; );&lt;/code&gt; 次のDOM出力が生成されます。</target>
        </trans-unit>
        <trans-unit id="ee09ededc986c4fde55112bb27792c5ab11f4d64" translate="yes" xml:space="preserve">
          <source>The code &lt;code&gt;$( &quot;div.demo-container&quot; ).text()&lt;/code&gt; would produce the following result:</source>
          <target state="translated">コード &lt;code&gt;$( &quot;div.demo-container&quot; ).text()&lt;/code&gt; は、次の結果を生成します。</target>
        </trans-unit>
        <trans-unit id="0ff3e41c1bb8be78905878d3080804c616d66cc8" translate="yes" xml:space="preserve">
          <source>The comparison between values is strict. The following will return &lt;code&gt;-1&lt;/code&gt; (not found) because a number is being searched in an array of strings:</source>
          <target state="translated">値の比較は厳密です。文字列の配列で数値が検索されているため、次の &lt;code&gt;-1&lt;/code&gt; （見つかりません）を返します。</target>
        </trans-unit>
        <trans-unit id="63934f4de86321cfe3280de8cd4a6928e795771b" translate="yes" xml:space="preserve">
          <source>The complementary operation to &lt;code&gt;.get()&lt;/code&gt;, which accepts an index and returns a DOM node, &lt;code&gt;.index()&lt;/code&gt; can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:</source>
          <target state="translated">インデックスを受け入れてDOMノードを返す &lt;code&gt;.get()&lt;/code&gt; に対する補完的な操作である.index（）は、DOMノードを &lt;code&gt;.index()&lt;/code&gt; インデックスを返すことができます。ページに単純な順不同リストがあるとします。</target>
        </trans-unit>
        <trans-unit id="04f4668e4368f2a79f73dba514f8e60e41c8e365" translate="yes" xml:space="preserve">
          <source>The content of &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt; can be set like this:</source>
          <target state="translated">&lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt; のコンテンツは、次のように設定できます。</target>
        </trans-unit>
        <trans-unit id="8d9bb9d21c71526c772e1cdf35a9a991a7064a75" translate="yes" xml:space="preserve">
          <source>The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.</source>
          <target state="translated">挿入するコンテンツ。HTML 文字列、DOM 要素、DOM 要素の配列、または jQuery オブジェクト。</target>
        </trans-unit>
        <trans-unit id="5e1584a1b9999c4d1def5c45e27ab44e4599a0d8" translate="yes" xml:space="preserve">
          <source>The current DOM element within the event bubbling phase.</source>
          <target state="translated">イベントバブリングフェーズ内の現在の DOM 要素。</target>
        </trans-unit>
        <trans-unit id="46824c34fb82db130a2df5609dafd2545fdc3db2" translate="yes" xml:space="preserve">
          <source>The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).</source>
          <target state="translated">data-属性は、最初にデータ プロパティにアクセスしたときにプルされ、その後はアクセスされなくなったり、突然変異したりします(その後、すべてのデータ値はjQueryの内部に保存されます)。</target>
        </trans-unit>
        <trans-unit id="8b8b1c908f3b2c347bd0eeb6d735aa8ab48d1652" translate="yes" xml:space="preserve">
          <source>The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:</source>
          <target state="translated">deferred.state()メソッドは、Deferredオブジェクトの現在の状態を表す文字列を返します。Deferredオブジェクトは3つの状態のうちの1つになります。</target>
        </trans-unit>
        <trans-unit id="77b4a3dc9d992a9171395774e152136eb0aa3384" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css( &quot;height&quot; )&lt;/code&gt; and &lt;code&gt;.height()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.height()&lt;/code&gt; method is recommended when an element's height needs to be used in a mathematical calculation.</source>
          <target state="translated">&lt;code&gt;.css( &quot;height&quot; )&lt;/code&gt; と &lt;code&gt;.height()&lt;/code&gt; の違いは、後者は単位のないピクセル値（たとえば、 &lt;code&gt;400&lt;/code&gt; ）を返すのに対し、前者は単位がそのままの値（たとえば、 &lt;code&gt;400px&lt;/code&gt; ）を返すということです。 &lt;code&gt;.height()&lt;/code&gt; メソッドは、要素の高さは、数学的な計算に使用する必要がある場合に推奨されます。</target>
        </trans-unit>
        <trans-unit id="b8391b1a8d5a18b73e9581f59ba3273ec27cce80" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css( &quot;width&quot; )&lt;/code&gt; and &lt;code&gt;.width()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.width()&lt;/code&gt; method is recommended when an element's width needs to be used in a mathematical calculation.</source>
          <target state="translated">&lt;code&gt;.css( &quot;width&quot; )&lt;/code&gt; と &lt;code&gt;.width()&lt;/code&gt; の違いは、後者は単位のないピクセル値（たとえば、 &lt;code&gt;400&lt;/code&gt; ）を返すのに対し、前者は単位がそのままの値（たとえば、 &lt;code&gt;400px&lt;/code&gt; ）を返すことです。 &lt;code&gt;.width()&lt;/code&gt; 要素の幅のニーズは、数学的計算に使用する場合の方法が推奨されます。</target>
        </trans-unit>
        <trans-unit id="d50a600af0ee02848ff5326868c4753647ab9366" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css(width)&lt;/code&gt; and &lt;code&gt;.width()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.width()&lt;/code&gt; method is recommended when an element's width needs to be used in a mathematical calculation.</source>
          <target state="translated">&lt;code&gt;.css(width)&lt;/code&gt; と &lt;code&gt;.width()&lt;/code&gt; の違いは、後者は単位のないピクセル値（たとえば、 &lt;code&gt;400&lt;/code&gt; ）を返すのに対し、前者は単位がそのままの値（たとえば、 &lt;code&gt;400px&lt;/code&gt; ）を返すことです。 &lt;code&gt;.width()&lt;/code&gt; 要素の幅のニーズは、数学的計算に使用する場合の方法が推奨されます。</target>
        </trans-unit>
        <trans-unit id="37202ea5ad20c3706e31a8627329e1cc35a19b29" translate="yes" xml:space="preserve">
          <source>The difference between &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;properties&lt;/em&gt; can be important in specific situations. &lt;strong&gt;Before jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.attr()&lt;/code&gt; method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.prop()&lt;/code&gt; method provides a way to explicitly retrieve property values, while &lt;code&gt;.attr()&lt;/code&gt; retrieves attributes.</source>
          <target state="translated">特定の状況では、&lt;em&gt;属性&lt;/em&gt;と&lt;em&gt;プロパティ&lt;/em&gt;の違いが重要になる場合があり&lt;em&gt;ます&lt;/em&gt;。&lt;strong&gt;jQuery 1.6&lt;/strong&gt;より&lt;strong&gt;前&lt;/strong&gt;の &lt;code&gt;.attr()&lt;/code&gt; では、.attr（）メソッドは、一部の属性を取得するときにプロパティ値を考慮することがあり、これにより一貫性のない動作が発生する可能性がありました。&lt;strong&gt;jQuery 1.6&lt;/strong&gt;以降、 &lt;code&gt;.prop()&lt;/code&gt; メソッドはプロパティ値を明示的に取得する方法を提供し、 &lt;code&gt;.attr()&lt;/code&gt; は属性を取得します。</target>
        </trans-unit>
        <trans-unit id="c8b8341db17aad3ed60ff6d25f09507ac30ab22b" translate="yes" xml:space="preserve">
          <source>The difference between &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;properties&lt;/em&gt; can be important in specific situations. &lt;strong&gt;Before jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.prop()&lt;/code&gt; method provides a way to explicitly retrieve property values, while &lt;code&gt;.attr()&lt;/code&gt; retrieves attributes.</source>
          <target state="translated">特定の状況では、&lt;em&gt;属性&lt;/em&gt;と&lt;em&gt;プロパティ&lt;/em&gt;の違いが重要になる場合があり&lt;em&gt;ます&lt;/em&gt;。&lt;strong&gt;jQuery 1.6&lt;/strong&gt;より&lt;strong&gt;前&lt;/strong&gt;の &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; では、.attr（）メソッドは、一部の属性を取得するときにプロパティ値を考慮することがあり、これにより一貫性のない動作が発生する可能性がありました。&lt;strong&gt;jQuery 1.6&lt;/strong&gt;以降、 &lt;code&gt;.prop()&lt;/code&gt; メソッドはプロパティ値を明示的に取得する方法を提供し、 &lt;code&gt;.attr()&lt;/code&gt; は属性を取得します。</target>
        </trans-unit>
        <trans-unit id="d7d00606c5e46f31f2f98e11c01c5572475bedf2" translate="yes" xml:space="preserve">
          <source>The difference in milliseconds between the time the browser created the event and January 1, 1970.</source>
          <target state="translated">ブラウザがイベントを作成した時から1970年1月1日までのミリ秒単位の差。</target>
        </trans-unit>
        <trans-unit id="2ad811ab657cc27a74651a8411a156528a0df130" translate="yes" xml:space="preserve">
          <source>The drawback is that the callback is called in the context of each value and you therefore lose the context of your own object if applicable. More on this below at Functions.</source>
          <target state="translated">欠点は、コールバックは各値のコンテキストで呼び出されるため、該当する場合は自分のオブジェクトのコンテキストを失うことです。これについては、以下の Functions を参照ください。</target>
        </trans-unit>
        <trans-unit id="9037c831467c9eaa41d28fe7bf4126374f23fbbf" translate="yes" xml:space="preserve">
          <source>The effect of this on &lt;code&gt;&amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/code&gt; (when it does not initially have the &quot;entered&quot; class) is to add the &quot;entered&quot; class when the mouse enters the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and remove the class when the mouse leaves.</source>
          <target state="translated">これが &lt;code&gt;&amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/code&gt; に及ぼす影響（最初は「entered」クラスがない場合）は、マウスが &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に入ると「entered」クラスが追加され、マウスが離れるとクラスが削除されます。</target>
        </trans-unit>
        <trans-unit id="abaa5fa0e138e2677c0408917eeeb5af975fe5df" translate="yes" xml:space="preserve">
          <source>The element where the currently-called jQuery event handler was attached.</source>
          <target state="translated">現在呼ばれているjQueryイベントハンドラがアタッチされていた要素。</target>
        </trans-unit>
        <trans-unit id="f33d88a15dc715eabf21b992b42c443d395d3276" translate="yes" xml:space="preserve">
          <source>The end parameter allows us to limit the selected range even further. For example:</source>
          <target state="translated">endパラメータを使用すると、選択した範囲をさらに制限することができます。例えば</target>
        </trans-unit>
        <trans-unit id="1c816a005a96322be853cb13839915a982aa35e3" translate="yes" xml:space="preserve">
          <source>The event handler &lt;em&gt;must&lt;/em&gt; be attached before the browser fires the &lt;code&gt;error&lt;/code&gt; event, which is why the example sets the &lt;code&gt;src&lt;/code&gt; attribute after attaching the handler. Also, the &lt;code&gt;error&lt;/code&gt; event may not be correctly fired when the page is served locally; &lt;code&gt;error&lt;/code&gt; relies on HTTP status codes and will generally not be triggered if the URL uses the &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="translated">イベントハンドラー&lt;em&gt;は&lt;/em&gt;、ブラウザーが &lt;code&gt;error&lt;/code&gt; イベントを発生させる前にアタッチする&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。そのため、この例では、ハンドラーのアタッチ後に &lt;code&gt;src&lt;/code&gt; 属性を設定しています。また、ページがローカルで提供されると、 &lt;code&gt;error&lt;/code&gt; イベントが正しく発生しない場合があります。 &lt;code&gt;error&lt;/code&gt; はHTTPステータスコードに依存しており、URLが &lt;code&gt;file:&lt;/code&gt; プロトコルを使用している場合は通常トリガーされません。</target>
        </trans-unit>
        <trans-unit id="6592b71414facc03b08e92d3c61ae4a7c6e48089" translate="yes" xml:space="preserve">
          <source>The event handler and its environment</source>
          <target state="translated">イベントハンドラとその環境</target>
        </trans-unit>
        <trans-unit id="c3eaa89182d66deb143ff4b5e21401f0e6abded1" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">イベントハンドラーは、任意の &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; にバインドできます。</target>
        </trans-unit>
        <trans-unit id="c3c8521075173da7ee615c1ec3531d4b5d09418a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to any element:</source>
          <target state="translated">イベントハンドラは任意の要素にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="5c77560ec7292139b9e6f566baee76ddf960569a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as follows:</source>
          <target state="translated">イベントハンドラーは、次のように &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; にバインドできます。</target>
        </trans-unit>
        <trans-unit id="7b2e5765f810648c6904605842ced0e04a09f0e3" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the first input field:</source>
          <target state="translated">イベントハンドラは、最初の入力フィールドにバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="541d65895736107ef3f16d5231f478c377077d12" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the form:</source>
          <target state="translated">イベントハンドラはフォームにバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="b1b2f9b415c772375ce1094bf5af80a249e679b0" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the image:</source>
          <target state="translated">イベントハンドラは画像にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="59db2f3ed37d22060fab94786bd9bfe98aa672b8" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the input field:</source>
          <target state="translated">イベントハンドラは入力フィールドにバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="7c302c60ef5ad634affc166ae8ba6a179c97813a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the target:</source>
          <target state="translated">イベントハンドラをターゲットにバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="7089e39a05558f599138c92d69408f4e931882a9" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the text input and the select box:</source>
          <target state="translated">イベントハンドラは、テキスト入力とセレクトボックスにバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="53ceb3bdf027007c75defc080e05b2850e2e15f7" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the text input:</source>
          <target state="translated">イベントハンドラはテキスト入力にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="a968461088fc48b890360da98e8a2917f0c0ec22" translate="yes" xml:space="preserve">
          <source>The event object is always passed as the first parameter to an event handler. An array of arguments can also be passed to the .trigger() call, and these parameters will be passed along to the handler as well following the event object. As of jQuery 1.6.2, single string or numeric argument can be passed without being wrapped in an array.</source>
          <target state="translated">イベントオブジェクトは、常にイベントハンドラの最初のパラメータとして渡されます。引数の配列を .trigger()コールに渡すこともでき、これらのパラメータはイベント オブジェクトに続いてハンドラにも渡されます。jQuery 1.6.2 の時点では、単一の文字列または数値の引数は配列にラップされずに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d04cbf7c5545cd035665c33569633ce74b31c81a" translate="yes" xml:space="preserve">
          <source>The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated. &lt;a href=&quot;category/events/event-object&quot;&gt;View the full Event Object&lt;/a&gt;.</source>
          <target state="translated">ハンドラーがバインドされている場合は通常、ハンドラーがトリガーされたときに実行する必要があることを正確に把握するのに十分なコンテキストが利用できるため、イベントオブジェクトは多くの場合不要であり、パラメーターは省略されます。ただし、イベントが開始された時点で、ユーザーの環境に関する詳細情報を収集することが必要になる場合があります。&lt;a href=&quot;category/events/event-object&quot;&gt;完全なイベントオブジェクトを表示します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a5610a350c3ccf39411d452e988cd760b00e727" translate="yes" xml:space="preserve">
          <source>The exact handling of the &lt;code&gt;unload&lt;/code&gt; event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers and contrasted with the similar &lt;code&gt;beforeunload&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;unload&lt;/code&gt; イベントの正確な処理は、ブラウザのバージョンによって異なります。たとえば、Firefoxの一部のバージョンでは、リンクをたどったときにイベントがトリガーされますが、ウィンドウが閉じられたときはトリガーされません。実際の使用では、サポートされているすべてのブラウザーで動作をテストし、同様の &lt;code&gt;beforeunload&lt;/code&gt; イベントと対比する必要があります。</target>
        </trans-unit>
        <trans-unit id="a47720c0de238c3c29d705238cb0f84e408d6262" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;$( &quot;div:has(p)&quot; )&lt;/code&gt; matches a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; if a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; exists anywhere among its descendants, not just as a direct child.</source>
          <target state="translated">式 &lt;code&gt;$( &quot;div:has(p)&quot; )&lt;/code&gt; 、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; が直接の子としてだけでなく、その子孫のどこかに存在する場合、&amp;lt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="fdec95bd57664e6187875684bcae2f43b3499034" translate="yes" xml:space="preserve">
          <source>The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array.</source>
          <target state="translated">フィルタ関数には、現在の配列の項目とそのインデックスの 2 つの引数を渡します。結果の配列に項目を含めるには、フィルタ関数は 'true' を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="1a8c78269da9a7a144139698b6264cc95a56365a" translate="yes" xml:space="preserve">
          <source>The first array-like object to merge, the elements of second added.</source>
          <target state="translated">最初の配列のようなオブジェクトをマージし、2番目の要素を追加します。</target>
        </trans-unit>
        <trans-unit id="bca6f939db67fb58379c0c2238b53604a16dbd93" translate="yes" xml:space="preserve">
          <source>The first button shows how an unqueued animation works. It expands the div out to 90% width &lt;strong&gt;while&lt;/strong&gt; the font-size is increasing. Once the font-size change is complete, the border animation will begin. The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.</source>
          <target state="translated">最初のボタンは、キューから外されたアニメーションの動作を示しています。font-sizeが増加している&lt;strong&gt;間&lt;/strong&gt;、divを90％の幅に拡張します。フォントサイズの変更が完了すると、境界線のアニメーションが始まります。2番目のボタンは、従来の連鎖アニメーションを開始します。各アニメーションは、要素の前のアニメーションが完了すると開始されます。</target>
        </trans-unit>
        <trans-unit id="cfe3394cf354aa01c5c119c6f9df4de1d6557809" translate="yes" xml:space="preserve">
          <source>The first letter in Ajax stands for &quot;asynchronous,&quot; meaning that the operation occurs in parallel and the order of completion is not guaranteed. The &lt;code&gt;async&lt;/code&gt; option to &lt;code&gt;$.ajax()&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;, indicating that code execution can continue after the request is made. Setting this option to &lt;code&gt;false&lt;/code&gt; (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.</source>
          <target state="translated">Ajaxの最初の文字は「非同期」を意味します。これは、操作が並行して行われ、完了の順序が保証されないことを意味します。 &lt;code&gt;$.ajax()&lt;/code&gt; の &lt;code&gt;async&lt;/code&gt; オプションのデフォルトは &lt;code&gt;true&lt;/code&gt; で、リクエストが行われた後もコードの実行が継続できることを示しています。このオプションを &lt;code&gt;false&lt;/code&gt; に設定すると（したがって、呼び出しが非同期ではなくなります）、ブラウザーが応答しなくなる可能性があるため、お勧めしません。</target>
        </trans-unit>
        <trans-unit id="3dd4ad641c60ce993a319482b87b6fff7be020a1" translate="yes" xml:space="preserve">
          <source>The first signature for the &lt;code&gt;.find()&lt;/code&gt;method accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. The elements will be filtered by testing whether they match this selector. The expressions allowed include selectors like &lt;code&gt;&amp;gt; p&lt;/code&gt; which will find all the paragraphs that are children of the elements in the jQuery object.</source>
          <target state="translated">&lt;code&gt;.find()&lt;/code&gt; メソッドの最初のシグネチャは、 &lt;code&gt;$()&lt;/code&gt; 関数に渡すことができる同じ型のセレクター式を受け入れます。要素は、このセレクターと一致するかどうかをテストすることによってフィルター処理されます。許可される式には、jQueryオブジェクトの要素の子であるすべての段落を検索する &lt;code&gt;&amp;gt; p&lt;/code&gt; ようなセレクターが含まれます。</target>
        </trans-unit>
        <trans-unit id="dab134d4e8bf507a0b852b877e39959ba46fce14" translate="yes" xml:space="preserve">
          <source>The first signature for the &lt;code&gt;.find()&lt;/code&gt;method accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. The elements will be filtered by testing whether they match this selector; all parts of the selector must lie inside of an element on which .find() is called. The expressions allowed include selectors like &lt;code&gt;&amp;gt; p&lt;/code&gt; which will find all the paragraphs that are children of the elements in the jQuery object.</source>
          <target state="translated">&lt;code&gt;.find()&lt;/code&gt; メソッドの最初のシグネチャは、 &lt;code&gt;$()&lt;/code&gt; 関数に渡すことができるのと同じタイプのセレクター式を受け入れます。要素は、このセレクターと一致するかどうかをテストすることによってフィルタリングされます。セレクターのすべての部分は、.find（）が呼び出される要素の内部にある必要があります。許可される式には、jQueryオブジェクトの要素の子であるすべての段落を検索する &lt;code&gt;&amp;gt; p&lt;/code&gt; ようなセレクターが含まれます。</target>
        </trans-unit>
        <trans-unit id="5fd5cdf1aaec5d99e649d109e9218e1768db80d9" translate="yes" xml:space="preserve">
          <source>The first time we apply &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt;, we get the following:</source>
          <target state="translated">&lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt; を初めて適用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="021404d539fa30f7bd9a809d18e784457069d717" translate="yes" xml:space="preserve">
          <source>The following are two sample methods named &lt;code&gt;fn1&lt;/code&gt; and &lt;code&gt;fn2&lt;/code&gt;:</source>
          <target state="translated">以下は、 &lt;code&gt;fn1&lt;/code&gt; および &lt;code&gt;fn2&lt;/code&gt; という名前の2つのサンプルメソッドです。</target>
        </trans-unit>
        <trans-unit id="f64f18608a238a1192c88dfa8a8f137c9d294636" translate="yes" xml:space="preserve">
          <source>The following comparisons are all true:</source>
          <target state="translated">以下の比較はすべて真実です。</target>
        </trans-unit>
        <trans-unit id="bc071c8397609381bbd9504310c1ba41353890a3" translate="yes" xml:space="preserve">
          <source>The following example shows how a minimal image transport could be implemented:</source>
          <target state="translated">以下の例は、最小限の画像トランスポートを実装する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="abb3689a802e901601920b2b12ca783b0318c8c6" translate="yes" xml:space="preserve">
          <source>The following properties are also copied to the event object, though some of their values may be undefined depending on the event:</source>
          <target state="translated">以下のプロパティもイベントオブジェクトにコピーされますが、イベントによっては未定義の値もあります。</target>
        </trans-unit>
        <trans-unit id="dec858fec45670eb0dcd1906c0e4f2fc17caf072" translate="yes" xml:space="preserve">
          <source>The following selectors are based on the Cascading Style Sheet 1 specification, as outlined by the W3C. For more information about the specifications, visit &lt;a href=&quot;https://www.w3.org/Style/CSS/#specs&quot;&gt;https://www.w3.org/Style/CSS/#specs&lt;/a&gt;.</source>
          <target state="translated">以下のセレクターは、W3Cで概説されているように、Cascading Style Sheet 1仕様に基づいています。仕様の詳細については、&lt;a href=&quot;https://www.w3.org/Style/CSS/#specs&quot;&gt;https：//www.w3.org/Style/CSS/#specsにアクセスしてください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="efc8ca2023c763ab424e309905ae785bfc9fcdc1" translate="yes" xml:space="preserve">
          <source>The following will &lt;em&gt;not&lt;/em&gt; save the added elements, because the &lt;code&gt;.add()&lt;/code&gt; method creates a new set and leaves the original set in pdiv unchanged:</source>
          <target state="translated">&lt;code&gt;.add()&lt;/code&gt; メソッドは新しいセットを作成し、pdiv内の元のセットは変更し&lt;em&gt;ない&lt;/em&gt;ため、次は追加された要素を保存しません。</target>
        </trans-unit>
        <trans-unit id="6f51f371b8da8dc1313314e38b6c779c426e42e6" translate="yes" xml:space="preserve">
          <source>The function can return:</source>
          <target state="translated">関数は返すことができます。</target>
        </trans-unit>
        <trans-unit id="2e37153bc1a8e1ad3a9f12be343e9728f9a20217" translate="yes" xml:space="preserve">
          <source>The function that is no longer to be executed.</source>
          <target state="translated">実行されなくなった関数。</target>
        </trans-unit>
        <trans-unit id="c0e0e646f0de4166549307945db05657dc0f40f2" translate="yes" xml:space="preserve">
          <source>The function that is to be no longer executed.</source>
          <target state="translated">実行されなくなる関数です。</target>
        </trans-unit>
        <trans-unit id="7180b46bfb05a111cd04bc1cb12e5540f1eb2375" translate="yes" xml:space="preserve">
          <source>The function that will be executed on every value.</source>
          <target state="translated">値ごとに実行される関数です。</target>
        </trans-unit>
        <trans-unit id="d3de917bcd36c99d1259f320a3f7d5ffbc730acf" translate="yes" xml:space="preserve">
          <source>The function to be invoked.</source>
          <target state="translated">呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="7f804edca989e0ac4a94b9c06aefacd24370d29f" translate="yes" xml:space="preserve">
          <source>The function to execute when the DOM is ready.</source>
          <target state="translated">DOM の準備ができたときに実行する関数。</target>
        </trans-unit>
        <trans-unit id="528266b758f50455c24b724fbb39bccc1e8838e7" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the array item, the second argument is the index in array The function can return any value. A returned array will be flattened into the resulting array. Within the function, &lt;code&gt;this&lt;/code&gt; refers to the global (window) object.</source>
          <target state="translated">各アイテムを処理する関数。関数の最初の引数は配列項目、2番目の引数は配列内のインデックスです関数は任意の値を返すことができます。返された配列は、結果の配列にフラット化されます。関数内では、 &lt;code&gt;this&lt;/code&gt; はグローバル（ウィンドウ）オブジェクトを参照します。</target>
        </trans-unit>
        <trans-unit id="2497be69d4d28d0015898947249c2dfe61e4276d" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the item, and the second argument is the index. The function should return a Boolean value. &lt;code&gt;this&lt;/code&gt; will be the global window object.</source>
          <target state="translated">各アイテムを処理する関数。関数の最初の引数はアイテムで、2番目の引数はインデックスです。関数はブール値を返す必要があります。 &lt;code&gt;this&lt;/code&gt; はグローバルウィンドウオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="ed78ed460dba43418960b9867533924d5b82946f" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the value; the second argument is the key of the object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, &lt;code&gt;this&lt;/code&gt; refers to the global (window) object.</source>
          <target state="translated">各アイテムを処理する関数。関数の最初の引数は値です。2番目の引数はオブジェクトプロパティのキーです。関数は、配列に追加する任意の値を返すことができます。返された配列は、結果の配列にフラット化されます。関数内では、 &lt;code&gt;this&lt;/code&gt; はグローバル（ウィンドウ）オブジェクトを参照します。</target>
        </trans-unit>
        <trans-unit id="0c7f01ed75b8f184641d80cb2808bde2c28779d5" translate="yes" xml:space="preserve">
          <source>The function whose context will be changed.</source>
          <target state="translated">コンテキストが変更される関数。</target>
        </trans-unit>
        <trans-unit id="44671f971a36a5853ba3aa8c82cb9c2627ced934" translate="yes" xml:space="preserve">
          <source>The general idea behind pub/sub (Publish/Subscribe, or, the Observer pattern) is the promotion of loose coupling in applications. Rather than single objects calling on the methods of other objects, an object instead subscribes to a specific task or activity of another object and is notified when it occurs. Observers are also called Subscribers, and we refer to the object being observed as the Publisher (or the subject). Publishers notify subscribers when events occur.</source>
          <target state="translated">pub/sub (Publish/Subscribe、または Observer パターン)の背後にある一般的な考え方は、アプリケーションの緩い結合を促進することです。単一のオブジェクトが他のオブジェクトのメソッドを呼び出すのではなく、オブジェクトが他のオブジェクトの特定のタスクやアクティビティをサブスクライブし、それが発生したときに通知されます。オブザーバはサブスクライバとも呼ばれ、観察されるオブジェクトをパブリッシャ(またはサブジェクト)と呼びます。パブリッシャは、イベントが発生するとサブスクライバに通知します。</target>
        </trans-unit>
        <trans-unit id="96908f5f2e8c272b018f7fc547920ba259a9f935" translate="yes" xml:space="preserve">
          <source>The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for &lt;code&gt;.unbind()&lt;/code&gt; to know which handler to remove. This example is also an illustration of a closure. Since the handler refers to the &lt;code&gt;timesClicked&lt;/code&gt; variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.</source>
          <target state="translated">この場合のハンドラーはパラメーターを取る必要があります。これにより、イベントオブジェクトをキャプチャし、3回目のクリック後にハンドラーをバインド解除するために使用できます。イベントオブジェクトには、削除するハンドラを &lt;code&gt;.unbind()&lt;/code&gt; が認識するために必要なコンテキストが含まれています。この例は、クロージャーのイラストでもあります。ハンドラーは、関数の外部で定義されている &lt;code&gt;timesClicked&lt;/code&gt; 変数を参照するため、変数をインクリメントすると、ハンドラーの呼び出し間でも効果があります。</target>
        </trans-unit>
        <trans-unit id="9a017672927edcddb38cf218fbb12b8313df4cc6" translate="yes" xml:space="preserve">
          <source>The handler list for an element is set when the event is first delivered. Adding or removing event handlers on the current element won't take effect until the next time the event is handled. To prevent any further event handlers from executing on an element within an event handler, call &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;. This behavior goes against the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener&quot;&gt;W3C events specification&lt;/a&gt;. To better understand this case, consider the following code:</source>
          <target state="translated">要素のハンドラーリストは、イベントが最初に配信されたときに設定されます。現在の要素でのイベントハンドラーの追加または削除は、次にイベントが処理されるまで有効になりません。イベントハンドラー内の要素で他のイベントハンドラーが実行されないようにするには、 &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt; を呼び出します。この動作は、&lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener&quot;&gt;W3Cイベント仕様に&lt;/a&gt;反しています。このケースをよりよく理解するには、次のコードを検討してください。</target>
        </trans-unit>
        <trans-unit id="068354fa5d5791c1d48dccb2e852071a0eec58aa" translate="yes" xml:space="preserve">
          <source>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the &lt;code&gt;scrollLeft&lt;/code&gt; positions the horizontal scroll of each matched element.</source>
          <target state="translated">水平スクロール位置は、スクロール可能領域の上にあるビューから隠されるピクセル数と同じです。 &lt;code&gt;scrollLeft&lt;/code&gt; を設定すると、一致した各要素の水平スクロールが配置されます。</target>
        </trans-unit>
        <trans-unit id="5ef722341357678071415deb8d758a8d628e8e77" translate="yes" xml:space="preserve">
          <source>The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">水平スクロール位置は、スクロール可能領域の左側のビューから非表示になっているピクセル数と同じです。スクロールバーが左端にある場合、または要素がスクロール可能でない場合、この数は &lt;code&gt;0&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="f18c308cc9003dd517b04c883ca4c11f2901568f" translate="yes" xml:space="preserve">
          <source>The index of the array at which to begin the search. The default is 0, which will search the whole array.</source>
          <target state="translated">検索を開始する配列のインデックス。デフォルトは 0 で、配列全体を検索します。</target>
        </trans-unit>
        <trans-unit id="84fbf232995bee433ace36fdc322edb615edc6af" translate="yes" xml:space="preserve">
          <source>The index-related selector expressions (including this &quot;greater than&quot; selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</source>
          <target state="translated">インデックス関連のセレクター式（この「より大きい」セレクターを含む）は、前にある式に一致した要素のセットをフィルターします。それらは、この一致したセット内の要素の順序に基づいてセットを絞り込みます。たとえば、要素がクラスセレクター（ &lt;code&gt;.myclass&lt;/code&gt; ）で最初に選択され、4つの要素が返される場合、これらの要素には、これらのセレクターの目的でインデックス0〜3が与えられます。</target>
        </trans-unit>
        <trans-unit id="9ce2345a99b016ade0050c9c9e058771ff484eb6" translate="yes" xml:space="preserve">
          <source>The index-related selectors (&lt;code&gt;:eq()&lt;/code&gt;, &lt;code&gt;:lt()&lt;/code&gt;, &lt;code&gt;:gt()&lt;/code&gt;, &lt;code&gt;:even&lt;/code&gt;, &lt;code&gt;:odd&lt;/code&gt;) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;3&lt;/code&gt; for the purposes of these selectors.</source>
          <target state="translated">インデックス関連セレクタ（ &lt;code&gt;:eq()&lt;/code&gt; 、 &lt;code&gt;:lt()&lt;/code&gt; 、 &lt;code&gt;:gt()&lt;/code&gt; ： &lt;code&gt;:even&lt;/code&gt; 、 &lt;code&gt;:odd&lt;/code&gt; ）フィルタそれらの前の式と一致した要素のセット。それらは、この一致したセット内の要素の順序に基づいてセットを絞り込みます。要素が最初に（クラスセレクタで選択された場合、例えば、 &lt;code&gt;.myclass&lt;/code&gt; ）と4つの要素が返され、これらの要素は、インデックスを与えられている &lt;code&gt;0&lt;/code&gt; を介して &lt;code&gt;3&lt;/code&gt; これらのセレクタの目的のために。</target>
        </trans-unit>
        <trans-unit id="ba134bef640122a89e8d25ae63500999badb7aed" translate="yes" xml:space="preserve">
          <source>The index-related selectors (including this &quot;less than&quot; selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</source>
          <target state="translated">インデックス関連のセレクター（この「より小さい」セレクターを含む）は、それらに先行する式に一致した要素のセットをフィルターに掛けます。それらは、この一致したセット内の要素の順序に基づいてセットを絞り込みます。たとえば、要素がクラスセレクター（ &lt;code&gt;.myclass&lt;/code&gt; ）で最初に選択され、4つの要素が返される場合、これらの要素には、これらのセレクターの目的でインデックス0〜3が与えられます。</target>
        </trans-unit>
        <trans-unit id="4e288c80fa39dc156186e654513b5fc57fb3fddd" translate="yes" xml:space="preserve">
          <source>The jQuery &lt;code&gt;.slice()&lt;/code&gt; method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:</source>
          <target state="translated">jQuery &lt;code&gt;.slice()&lt;/code&gt; メソッドは、配列のJavaScript .slice（）メソッドを模倣しています。模倣する機能の1つは、負の数値を &lt;code&gt;start&lt;/code&gt; パラメーターまたは &lt;code&gt;end&lt;/code&gt; パラメーターとして渡す機能です。負の数が指定された場合、これは、セットの最初ではなく、最後から始まる位置を示します。例えば：</target>
        </trans-unit>
        <trans-unit id="514aa5055f00f797e80751f12544ed3ca726fe25" translate="yes" xml:space="preserve">
          <source>The jQuery Ajax implementation comes with a set of standard dataTypes, such as text, json, xml, and html.</source>
          <target state="translated">jQuery Ajaxの実装には、text、json、xml、htmlなどの標準的なdataTypesのセットが付属しています。</target>
        </trans-unit>
        <trans-unit id="6808edbc627612119a19ef098b25e718fe0d28c4" translate="yes" xml:space="preserve">
          <source>The jQuery XMLHttpRequest (jqXHR) object returned by &lt;code&gt;$.ajax()&lt;/code&gt;&lt;strong&gt;as of jQuery 1.5&lt;/strong&gt; is a superset of the browser's native XMLHttpRequest object. For example, it contains &lt;code&gt;responseText&lt;/code&gt; and &lt;code&gt;responseXML&lt;/code&gt; properties, as well as a &lt;code&gt;getResponseHeader()&lt;/code&gt; method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the &lt;code&gt;jqXHR&lt;/code&gt; object simulates native XHR functionality where possible.</source>
          <target state="translated">&lt;strong&gt;jQuery 1.5 &lt;/strong&gt; &lt;code&gt;$.ajax()&lt;/code&gt; 、$。ajax（）によって返されるjQuery XMLHttpRequest（jqXHR）オブジェクトは、ブラウザのネイティブXMLHttpRequestオブジェクトのスーパーセットです。例えば、それは含ま &lt;code&gt;responseText&lt;/code&gt; と &lt;code&gt;responseXML&lt;/code&gt; 特性、ならびに &lt;code&gt;getResponseHeader()&lt;/code&gt; メソッドを。トランスポートメカニズムがXMLHttpRequest以外の場合（たとえば、JSONPリクエストのスクリプトタグ）、 &lt;code&gt;jqXHR&lt;/code&gt; オブジェクトは、可能な場合はネイティブXHR機能をシミュレートします。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6329bb11d7dcdb2e64db5216d41be8f97344e159" translate="yes" xml:space="preserve">
          <source>The jQuery library has a full suite of Ajax capabilities. The functions and methods therein allow us to load data from the server without a browser page refresh.</source>
          <target state="translated">jQueryライブラリは、Ajax機能のフルスイートを備えています。その中にある機能とメソッドにより、ブラウザのページを更新することなく、サーバーからデータをロードすることができます。</target>
        </trans-unit>
        <trans-unit id="e2bf20b00460b915cf997aa1998852c28ee31339" translate="yes" xml:space="preserve">
          <source>The jQuery library provides several techniques for adding animation to a web page. These include simple, standard animations that are frequently used, and the ability to craft sophisticated custom effects.</source>
          <target state="translated">jQuery ライブラリには、Web ページにアニメーションを追加するためのいくつかのテクニックが用意されています。これらには、頻繁に使用されるシンプルな標準的なアニメーションや、洗練されたカスタム エフェクトを作成する機能が含まれます。</target>
        </trans-unit>
        <trans-unit id="b10ed5864ed562309d6eb5544f97085abf741a3c" translate="yes" xml:space="preserve">
          <source>The jQuery object itself behaves much like an array; it has a &lt;code&gt;length&lt;/code&gt; property and the elements in the object can be accessed by their numeric indices &lt;code&gt;[0]&lt;/code&gt; to &lt;code&gt;[length-1]&lt;/code&gt;. Note that a jQuery object is not actually a Javascript Array object, so it does not have all the methods of a true Array object such as &lt;code&gt;join()&lt;/code&gt;.</source>
          <target state="translated">jQueryオブジェクト自体は配列のように動作します。これには &lt;code&gt;length&lt;/code&gt; プロパティがあり、オブジェクト内の要素には、数値インデックス &lt;code&gt;[0]&lt;/code&gt; 〜 &lt;code&gt;[length-1]&lt;/code&gt; でアクセスできます。 jQueryオブジェクトは実際にはJavaScriptのArrayオブジェクトではないため、 &lt;code&gt;join()&lt;/code&gt; などの真のArrayオブジェクトのすべてのメソッドが含まれているわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9adc43edd25fe471ec1647fe8c39dc7a5af1b244" translate="yes" xml:space="preserve">
          <source>The jqXHR Object</source>
          <target state="translated">jqXHR オブジェクト</target>
        </trans-unit>
        <trans-unit id="31de3d3efc0743154a00d75c22c5127d0f3e1c79" translate="yes" xml:space="preserve">
          <source>The jqXHR objects returned by &lt;code&gt;$.ajax()&lt;/code&gt; as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt; for more information). These methods take one or more function arguments that are called when the &lt;code&gt;$.ajax()&lt;/code&gt; request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include:</source>
          <target state="translated">jQuery 1.5の時点で &lt;code&gt;$.ajax()&lt;/code&gt; によって返されるjqXHRオブジェクトは、Promiseインターフェースを実装し、Promiseのすべてのプロパティ、メソッド、および動作を提供し&lt;a href=&quot;category/deferred-object&quot;&gt;ます&lt;/a&gt;（詳細については、遅延オブジェクトを参照してください）。これらのメソッドは、 &lt;code&gt;$.ajax()&lt;/code&gt; 要求の終了時に呼び出される1つ以上の関数引数を取ります。これにより、1つのリクエストに複数のコールバックを割り当てることができ、リクエストが完了した後でコールバックを割り当てることもできます。 （リクエストがすでに完了している場合、コールバックはすぐに発生します。）jqXHRオブジェクトの使用可能なPromiseメソッドには、次のものがあります。</target>
        </trans-unit>
        <trans-unit id="e9a9d8acdf4a10af6785836e5bd16312f63736d6" translate="yes" xml:space="preserve">
          <source>The keys of the &lt;code&gt;jQuery.cssNumber&lt;/code&gt; object are camel-cased and the values are all set to &lt;code&gt;true&lt;/code&gt;. If you want to prevent the &lt;a href=&quot;css&quot;&gt;&lt;code&gt;.css()&lt;/code&gt;&lt;/a&gt; method from automatically adding the &lt;code&gt;px&lt;/code&gt; unit for a specific CSS property, you can add an extra property to the &lt;code&gt;jQuery.cssNumber&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;jQuery.cssNumber&lt;/code&gt; オブジェクトのキーはキャメルケースであり、値はすべて &lt;code&gt;true&lt;/code&gt; に設定されています。&lt;a href=&quot;css&quot;&gt; &lt;code&gt;.css()&lt;/code&gt; &lt;/a&gt;メソッドが特定のCSSプロパティの &lt;code&gt;px&lt;/code&gt; ユニットを自動的に追加しないようにする場合は、 &lt;code&gt;jQuery.cssNumber&lt;/code&gt; オブジェクトにプロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="9c8a74ca684f546365d11151b876bb5ef5d248e1" translate="yes" xml:space="preserve">
          <source>The last &lt;code&gt;end()&lt;/code&gt; is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the &lt;code&gt;end()&lt;/code&gt; provides visual symmetry and a sense of completion &amp;mdash;making the program, at least to the eyes of some developers, more readable, at the cost of a slight hit to performance as it is an additional function call.</source>
          <target state="translated">直後にjQueryオブジェクトを破棄するため、最後の &lt;code&gt;end()&lt;/code&gt; は不要です。ただし、コードがこの形式で記述されている場合、 &lt;code&gt;end()&lt;/code&gt; は視覚的な対称性と完了の感覚を提供します。少なくとも一部の開発者の目にはプログラムが読みやすくなりますが、パフォーマンスはわずかに低下します。これは追加の関数呼び出しです。</target>
        </trans-unit>
        <trans-unit id="7efe7e2c92ffe13a861e60a5a71908950a6e6f96" translate="yes" xml:space="preserve">
          <source>The last value returned by an event handler that was triggered by this event, unless the value was undefined.</source>
          <target state="translated">値が未定義でない限り、このイベントによってトリガされたイベントハンドラによって返された最後の値。</target>
        </trans-unit>
        <trans-unit id="57b0302cdc98e914c921d10ae80c2282a00fe827" translate="yes" xml:space="preserve">
          <source>The length property can also be used to add elements to the end of an array. That is equivalent to using the push-method:</source>
          <target state="translated">length プロパティは、配列の末尾に要素を追加するためにも使用できます。これは push-method を使用するのと同じです。</target>
        </trans-unit>
        <trans-unit id="076292172fb49811fbaacb886eb7c1bb1c8ecc8a" translate="yes" xml:space="preserve">
          <source>The majority of browser events &lt;em&gt;bubble&lt;/em&gt;, or &lt;em&gt;propagate&lt;/em&gt;, from the deepest, innermost element (the &lt;strong&gt;event target&lt;/strong&gt;) in the document where they occur all the way up to the body and the &lt;code&gt;document&lt;/code&gt; element. In Internet Explorer 8 and lower, a few events such as &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;submit&lt;/code&gt; do not natively bubble but jQuery patches these to bubble and create consistent cross-browser behavior.</source>
          <target state="translated">ブラウザのイベントの大半&lt;em&gt;バブル&lt;/em&gt;、または&lt;em&gt;伝播&lt;/em&gt;最も深い、最も内側の要素（から、&lt;strong&gt;イベントターゲット&lt;/strong&gt;彼らは身体とまでずっとアップが発生文書の） &lt;code&gt;document&lt;/code&gt; 要素。 Internet Explorer 8以前では、 &lt;code&gt;change&lt;/code&gt; や &lt;code&gt;submit&lt;/code&gt; などのいくつかのイベントはネイティブにバブリングしませんが、jQueryはこれらをパッチしてバブリングし、一貫したクロスブラウザー動作を作成します。</target>
        </trans-unit>
        <trans-unit id="0824e824d0098d6239873a84448d410eecdf43c6" translate="yes" xml:space="preserve">
          <source>The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling &lt;code&gt;.css( &quot;display&quot;, &quot;none&quot; )&lt;/code&gt;, except that the value of the &lt;code&gt;display&lt;/code&gt; property is saved in jQuery's data cache so that &lt;code&gt;display&lt;/code&gt; can later be restored to its initial value. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt; and is hidden then shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">一致した要素はアニメーションなしですぐに非表示になります。これは &lt;code&gt;.css( &quot;display&quot;, &quot;none&quot; )&lt;/code&gt; を呼び出すのとほぼ同じですが、 &lt;code&gt;display&lt;/code&gt; プロパティの値がjQueryのデータキャッシュに保存されるため、後で &lt;code&gt;display&lt;/code&gt; を初期値に戻すことができます。要素の &lt;code&gt;display&lt;/code&gt; 値が &lt;code&gt;inline&lt;/code&gt; で非表示になっている場合、要素は再び &lt;code&gt;inline&lt;/code&gt; で表示されます。</target>
        </trans-unit>
        <trans-unit id="46f4fb72769ec86f58468699c9160d1615df38e7" translate="yes" xml:space="preserve">
          <source>The matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling &lt;code&gt;.css( &quot;display&quot;, &quot;block&quot; )&lt;/code&gt;, except that the &lt;code&gt;display&lt;/code&gt; property is restored to whatever it was initially. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">一致した要素はアニメーションなしですぐに表示されます。これは、 &lt;code&gt;.css( &quot;display&quot;, &quot;block&quot; )&lt;/code&gt; 呼び出しとほぼ同じですが、 &lt;code&gt;display&lt;/code&gt; プロパティが最初の状態に復元される点が異なります。要素の &lt;code&gt;display&lt;/code&gt; 値が &lt;code&gt;inline&lt;/code&gt; の場合、非表示にして表示すると、要素は再び &lt;code&gt;inline&lt;/code&gt; で表示されます。</target>
        </trans-unit>
        <trans-unit id="3db2c262258f59451cfcd14f30a965494fdb7a8c" translate="yes" xml:space="preserve">
          <source>The matched elements will be revealed or hidden immediately, with no animation, by changing the CSS &lt;code&gt;display&lt;/code&gt; property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The &lt;code&gt;display&lt;/code&gt; property is saved and restored as needed. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">一致した要素は、CSS &lt;code&gt;display&lt;/code&gt; プロパティを変更することにより、アニメーションなしですぐに表示または非表示になります。要素が最初に表示される場合、それは非表示になります。非表示の場合は表示されます。 &lt;code&gt;display&lt;/code&gt; プロパティが保存され、必要に応じて復元されます。要素の &lt;code&gt;display&lt;/code&gt; 値が &lt;code&gt;inline&lt;/code&gt; の場合、非表示にして表示すると、要素は再び &lt;code&gt;inline&lt;/code&gt; で表示されます。</target>
        </trans-unit>
        <trans-unit id="9c7ec0c7e986ccedf73b9e0eb11f7ca9d71e877a" translate="yes" xml:space="preserve">
          <source>The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of &lt;code&gt;:contains()&lt;/code&gt; can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.</source>
          <target state="translated">一致するテキストは、選択した要素内、その要素の子孫のいずれか、またはそれらの組み合わせで直接表示できます。属性値セレクターと同様に、 &lt;code&gt;:contains()&lt;/code&gt; の括弧内のテキストは、裸の単語として記述するか、引用符で囲むことができます。テキストを選択するには、大文字と小文字が一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="da8dada95be7fb335e0f7f1320405d5fbedd5c7c" translate="yes" xml:space="preserve">
          <source>The merge performed by &lt;code&gt;$.extend()&lt;/code&gt; is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second or subsequent object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing &lt;code&gt;true&lt;/code&gt; for the first function argument, objects will be recursively merged.</source>
          <target state="translated">&lt;code&gt;$.extend()&lt;/code&gt; によって実行されるマージは、デフォルトでは再帰的ではありません。最初のオブジェクトのプロパティ自体がオブジェクトまたは配列である場合、2番目以降のオブジェクトの同じキーを持つプロパティによって完全に上書きされます。値はマージされません。これは、下の例でバナナの値を調べるとわかります。ただし、最初の関数引数に &lt;code&gt;true&lt;/code&gt; を渡すことにより、オブジェクトは再帰的にマージされます。</target>
        </trans-unit>
        <trans-unit id="1c80fedd44d738243eba338965b1bbbb2d7430fc" translate="yes" xml:space="preserve">
          <source>The message to send out.</source>
          <target state="translated">発信するメッセージ。</target>
        </trans-unit>
        <trans-unit id="c43a2a342b89cf38eab310c6b2bdcbbe99661c6e" translate="yes" xml:space="preserve">
          <source>The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.</source>
          <target state="translated">現在選択されているテキストを取得する方法は、ブラウザによって異なります。多くの jQuery プラグインがクロスプラットフォームのソリューションを提供しています。</target>
        </trans-unit>
        <trans-unit id="85b34d3ff4f09696376c290b5d4b739841fed2fd" translate="yes" xml:space="preserve">
          <source>The method is essentially a shim for the &lt;a href=&quot;https://drafts.csswg.org/cssom/#the-css.escape()-method&quot;&gt;CSS Working Group's CSS.escape() method&lt;/a&gt;. The main difference is that &lt;code&gt;$.escapeSelector()&lt;/code&gt; can be reliably used in all of jQuery's supported browsers.</source>
          <target state="translated">このメソッドは基本的に、&lt;a href=&quot;https://drafts.csswg.org/cssom/#the-css.escape()-method&quot;&gt;CSSワーキンググループのCSS.escape（）メソッドの&lt;/a&gt;シムです。主な違いは、 &lt;code&gt;$.escapeSelector()&lt;/code&gt; は、jQueryがサポートするすべてのブラウザーで確実に使用できることです。</target>
        </trans-unit>
        <trans-unit id="bb0ac576955e6ed525104494cccefc79c0ffaa02" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="translated">このメソッドでは、オプションで第二引数にセレクタ式を指定することができます。この引数が与えられた場合、要素はそれにマッチするかどうかをテストすることでフィルタリングされます。</target>
        </trans-unit>
        <trans-unit id="db4b38eca31ac6773d02424670d957ba8068df2a" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that can be passed to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the preceding element will be filtered by testing whether it match the selector.</source>
          <target state="translated">このメソッドはオプションで、 &lt;code&gt;$()&lt;/code&gt; 関数に渡すことができる同じタイプのセレクター式を受け入れます。セレクターが指定されている場合、先行する要素は、セレクターと一致するかどうかをテストすることによってフィルター処理されます。</target>
        </trans-unit>
        <trans-unit id="6e347b38d077dd75b669a2a45800a2e68ea6ad65" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.</source>
          <target state="translated">このメソッドはオプションで、 &lt;code&gt;$()&lt;/code&gt; 関数に渡すことができる同じ型のセレクター式を受け入れます。直後の兄弟がセレクターと一致する場合、新しく作成されたjQueryオブジェクトに残ります。それ以外の場合は除外されます。</target>
        </trans-unit>
        <trans-unit id="8c55f0e439cd154cac85e4979f9c4e7e9575eb8a" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="translated">このメソッドはオプションで、 &lt;code&gt;$()&lt;/code&gt; 関数に渡すことができる同じ型のセレクター式を受け入れます。セレクターが指定されている場合、要素が一致するかどうかをテストすることにより、要素がフィルターされます。</target>
        </trans-unit>
        <trans-unit id="6305564df7b2b4e272ed467fba354bfdae8565ff" translate="yes" xml:space="preserve">
          <source>The methods of &lt;code&gt;$.Callbacks&lt;/code&gt; can also be detached, should there be a need to define short-hand versions for convenience:</source>
          <target state="translated">&lt;code&gt;$.Callbacks&lt;/code&gt; のメソッドは、便利にするために省略形を定義する必要がある場合は、デタッチすることもできます。</target>
        </trans-unit>
        <trans-unit id="dafefab1095fabbdb39dfb2063d2b3e5df760f86" translate="yes" xml:space="preserve">
          <source>The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.</source>
          <target state="translated">ポインタが要素内にある間、システムに依存した時間ウィンドウ内でマウスボタンを再び押します。</target>
        </trans-unit>
        <trans-unit id="576cd8b97d955c1f863447a2e77d26323ba6546c" translate="yes" xml:space="preserve">
          <source>The mouse button is depressed while the pointer is inside the element.</source>
          <target state="translated">ポインタが要素内にある状態でマウスボタンを押す。</target>
        </trans-unit>
        <trans-unit id="b1db620e4cdeba5d3d324554abd72a643b595ecf" translate="yes" xml:space="preserve">
          <source>The mouse button is released while the pointer is inside the element.</source>
          <target state="translated">ポインタが要素内にある間はマウスボタンを離します。</target>
        </trans-unit>
        <trans-unit id="2263bd52a19e370eee7fef7d2360445c3d9c5f06" translate="yes" xml:space="preserve">
          <source>The mouse position relative to the left edge of the document.</source>
          <target state="translated">ドキュメントの左端を基準としたマウスの位置。</target>
        </trans-unit>
        <trans-unit id="12339186c582f7ed442e4c1b7e3883792f2709f5" translate="yes" xml:space="preserve">
          <source>The mouse position relative to the top edge of the document.</source>
          <target state="translated">ドキュメントの上端を基準としたマウスの位置。</target>
        </trans-unit>
        <trans-unit id="2033823b3dadb8c11098d4f039ae3c154ce90a6c" translate="yes" xml:space="preserve">
          <source>The name &lt;code&gt;&quot;class&quot;&lt;/code&gt; must be quoted in the object since it is a JavaScript reserved word, and &lt;code&gt;&quot;className&quot;&lt;/code&gt; cannot be used since it refers to the DOM property, not the attribute.</source>
          <target state="translated">&lt;code&gt;&quot;class&quot;&lt;/code&gt; という名前はJavaScriptの予約語であるため、オブジェクト内で引用する必要があります。 &lt;code&gt;&quot;className&quot;&lt;/code&gt; は、属性ではなくDOMプロパティを参照するため使用できません。</target>
        </trans-unit>
        <trans-unit id="2be23a63086ebda18e8b5ba2e3920d1ac2b75c2d" translate="yes" xml:space="preserve">
          <source>The name of a jQuery method that generated the array of elements.</source>
          <target state="translated">要素の配列を生成したjQueryメソッドの名前。</target>
        </trans-unit>
        <trans-unit id="4296958589618bb6ad56c790eff779ad5d423877" translate="yes" xml:space="preserve">
          <source>The name of the attribute to get.</source>
          <target state="translated">取得する属性の名前。</target>
        </trans-unit>
        <trans-unit id="fbd0cc3752c40397ded39a708c242e4c4268ad6a" translate="yes" xml:space="preserve">
          <source>The name of the attribute to set.</source>
          <target state="translated">設定する属性名。</target>
        </trans-unit>
        <trans-unit id="e46c06096b68a311eebedcb4711d03a49036de4a" translate="yes" xml:space="preserve">
          <source>The name of the function whose context will be changed (should be a property of the &lt;code&gt;context&lt;/code&gt; object).</source>
          <target state="translated">コンテキストが変更される関数の名前（ &lt;code&gt;context&lt;/code&gt; オブジェクトのプロパティである必要があります）。</target>
        </trans-unit>
        <trans-unit id="2e22159b8af57c29d0edb7193b221eb98a0ca996" translate="yes" xml:space="preserve">
          <source>The name of the property to get.</source>
          <target state="translated">取得する物件名。</target>
        </trans-unit>
        <trans-unit id="22a258d2d705073bc54bce7ce496f383cbeade4f" translate="yes" xml:space="preserve">
          <source>The name of the property to remove.</source>
          <target state="translated">削除するプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="f1c14f88a65230d7c15efb3a3d43e7bba43ad5af" translate="yes" xml:space="preserve">
          <source>The name of the property to set.</source>
          <target state="translated">設定するプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="0cd4253c3db5e6f71db9e3f316f1013ed1b182b2" translate="yes" xml:space="preserve">
          <source>The name of the queue in which to stop animations.</source>
          <target state="translated">アニメーションを停止させるキューの名前。</target>
        </trans-unit>
        <trans-unit id="ec510aca48291402a1eb466d7b9bbe2a80c30c14" translate="yes" xml:space="preserve">
          <source>The namespace specified when the event was triggered.</source>
          <target state="translated">イベントがトリガされたときに指定された名前空間。</target>
        </trans-unit>
        <trans-unit id="0e042ae48213e41f3c7dccddac1887f13741ea2e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around all matched elements:</source>
          <target state="translated">新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素がその場で作成され、DOMに追加されます。結果は、一致したすべての要素を囲む新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d83db634f8310cdc17fa4dcfc3eccbf02665e0f" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around each matched element:</source>
          <target state="translated">新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素がその場で作成され、DOMに追加されます。結果は、一致した各要素を囲む新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7b58a65b4c9866f2d71d3277e6db6f3e6f3a7760" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around the content of each matched element:</source>
          <target state="translated">新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素がその場で作成され、DOMに追加されます。結果は、一致した各要素のコンテンツを囲む新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="79c84130d9d5f31038adef11e326eb07e0a7ceaf" translate="yes" xml:space="preserve">
          <source>The new data value; this can be any Javascript type except &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">新しいデータ値。これは &lt;code&gt;undefined&lt;/code&gt; 以外の任意のJavascriptタイプです。</target>
        </trans-unit>
        <trans-unit id="86f9d09d2b9aa882752be29e4d95646605648024" translate="yes" xml:space="preserve">
          <source>The new function to add to the queue, with a function to call that will dequeue the next item.</source>
          <target state="translated">キューに追加する関数を新たに追加し、次の項目のキューを解除する関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="9c162ae394e32228352d0721ceb63d31e08368c1" translate="yes" xml:space="preserve">
          <source>The new function to add to the queue.</source>
          <target state="translated">キューに追加する新しい関数です。</target>
        </trans-unit>
        <trans-unit id="a5f0b107fe0d49f6c9decfb59cc2f2c72f057786" translate="yes" xml:space="preserve">
          <source>The nonce attribute passed to the executed script.</source>
          <target state="translated">実行されたスクリプトに渡される nonce 属性。</target>
        </trans-unit>
        <trans-unit id="d0eafdfc57124a623a8018c422334d4b9398c2dc" translate="yes" xml:space="preserve">
          <source>The notable difference between (&lt;code&gt;prev + next&lt;/code&gt;) and (&lt;code&gt;prev ~ siblings&lt;/code&gt;) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.</source>
          <target state="translated">（ &lt;code&gt;prev + next&lt;/code&gt; ）と（ &lt;code&gt;prev ~ siblings&lt;/code&gt; ）の顕著な違いは、それぞれの範囲です。前者は直後の兄弟要素にのみ到達しますが、後者は後続のすべての兄弟要素に到達します。</target>
        </trans-unit>
        <trans-unit id="73c92283828b72633f848b9fc54352c975e1c308" translate="yes" xml:space="preserve">
          <source>The number of elements currently matched. The .&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt; method will return the same value.</source>
          <target state="translated">現在一致している要素の数。。&lt;a href=&quot;size&quot;&gt;size（）&lt;/a&gt;メソッドは同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="12d7ae7bde39033c3e928ca063c9efe18c0ee88b" translate="yes" xml:space="preserve">
          <source>The number of elements in the jQuery object.</source>
          <target state="translated">jQueryオブジェクトの要素数。</target>
        </trans-unit>
        <trans-unit id="a6016b690bdcda756024030e31e339dec9953dc6" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.height()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.height()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数値は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="e5e1719c954b51432abdfa681d9c3f47f176fad6" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.innerHeight()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.innerHeight()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="7aa21e56b5c6a4a1242bcbb02b0eb0a6d7535a8d" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.innerWidth()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.innerWidth()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="8a8d1ed18f88fb30e931c4dd179fa50e5f3d80b0" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.offset()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.offset()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="4cc7307ad7e4bd4a5e469f56fb8abf4483d5d27c" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.outerHeight()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.outerHeight()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="53bf3025deac19407f8af0203fdb55e479bb25a2" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.outerWidth()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.outerWidth()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数値は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="5493f0ce296d72e79d89a3d60ed5606b5223e979" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.position()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.position()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="57c15f4d2fb291886be6e0579952d0630802ecbb" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.width()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">&lt;code&gt;.width()&lt;/code&gt; を含む、ディメンション関連のAPIによって返される数は、場合によっては小数になることがあります。コードでは、整数であると想定しないでください。また、ユーザーがページをズームすると、寸法が正しくない場合があります。ブラウザは、この状態を検出するAPIを公開していません。</target>
        </trans-unit>
        <trans-unit id="7159b370dec0b4c77b9794448f968d021591451c" translate="yes" xml:space="preserve">
          <source>The object that will be checked to see if it's a plain object.</source>
          <target state="translated">プレーンなオブジェクトであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="ff0ff630dca657003b8459aa56ecf0e2c77c82ea" translate="yes" xml:space="preserve">
          <source>The object that will be checked to see if it's empty.</source>
          <target state="translated">空かどうかを確認するためにチェックされるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3ec3b49d6eb40059902496e5b347b2f0250d6d64" translate="yes" xml:space="preserve">
          <source>The object to extend. It will receive the new properties.</source>
          <target state="translated">拡張するオブジェクトです。新しいプロパティを受け取ります。</target>
        </trans-unit>
        <trans-unit id="0f3ea496874fb4613c3a9be9c6a176f4f24c9e54" translate="yes" xml:space="preserve">
          <source>The object to iterate over.</source>
          <target state="translated">反復するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="bb0f686882a210293bfb4c1039dba53491f90039" translate="yes" xml:space="preserve">
          <source>The object to which the context (&lt;code&gt;this&lt;/code&gt;) of the function should be set.</source>
          <target state="translated">関数のコンテキスト（ &lt;code&gt;this&lt;/code&gt; ）が設定されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3f9e825e08e2e24867189da3596374f800696e05" translate="yes" xml:space="preserve">
          <source>The object to which the context of the function should be set.</source>
          <target state="translated">関数のコンテキストが設定されるべきオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a3a8b16b79d7f4fee1588777ab5b8dddb1929eab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;eventData&lt;/code&gt; parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:</source>
          <target state="translated">オプションの &lt;code&gt;eventData&lt;/code&gt; パラメーターは一般的に使用されません。この引数を指定すると、ハンドラーに追加情報を渡すことができます。このパラメーターの1つの便利な使用法は、クロージャーによって引き起こされる問題を回避することです。たとえば、同じ外部変数を参照する2つのイベントハンドラーがあるとします。</target>
        </trans-unit>
        <trans-unit id="7d1dddeb4e713a5f321f1b20a92fef9ccfbfa2bf" translate="yes" xml:space="preserve">
          <source>The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree. However, if the original collection contains more than one element, they might be mutual siblings and will both be found. If you need an exclusive list of siblings, use &lt;code&gt;$collection.siblings().not($collection)&lt;/code&gt;.</source>
          <target state="translated">元の要素は兄弟に含まれていません。DOMツリーの特定のレベルですべての要素を見つけたい場合に覚えておくことが重要です。ただし、元のコレクションに複数の要素が含まれている場合、それらは相互の兄弟である可能性があり、両方とも見つかります。兄弟の排他的なリストが必要な場合は、 &lt;code&gt;$collection.siblings().not($collection)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="19df398a82ac5760aa053d006893448666db417e" translate="yes" xml:space="preserve">
          <source>The other DOM element involved in the event, if any.</source>
          <target state="translated">イベントに関与する他の DOM 要素があれば、その要素。</target>
        </trans-unit>
        <trans-unit id="c42d3730919bd78afe5cc24beda85a4371f8e442" translate="yes" xml:space="preserve">
          <source>The particular use cases of this method can be best described through some examples.</source>
          <target state="translated">このメソッドの特定のユースケースは、いくつかの例を通して説明するのが最も良いでしょう。</target>
        </trans-unit>
        <trans-unit id="12be8f32109db553edeba7bd125861dccf618584" translate="yes" xml:space="preserve">
          <source>The pattern allows you to create objects with methods that operate on data that isn't visible to the outside&amp;mdash;the very basis of object-oriented programming.</source>
          <target state="translated">このパターンを使用すると、オブジェクト指向プログラミングの基本である、外部からは見えないデータを操作するメソッドを使ってオブジェクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="0c46afeb0966601574b297f1353d3cc0f47df196" translate="yes" xml:space="preserve">
          <source>The point in the document at which the selector should begin matching; similar to the context argument of the &lt;code&gt;$(selector, context)&lt;/code&gt; method.</source>
          <target state="translated">セレクターが一致を開始するドキュメント内のポイント。 &lt;code&gt;$(selector, context)&lt;/code&gt; メソッドのcontext引数に似ています。</target>
        </trans-unit>
        <trans-unit id="0a0db3d81595eb495dfe775005f5118fba49529a" translate="yes" xml:space="preserve">
          <source>The primary advantage of &lt;code&gt;jQuery.hasData(element)&lt;/code&gt; is that it does not create and associate a data object with the element if none currently exists. In contrast, &lt;code&gt;jQuery.data(element)&lt;/code&gt; always returns a data object to the caller, creating one if no data object previously existed.</source>
          <target state="translated">&lt;code&gt;jQuery.hasData(element)&lt;/code&gt; の主な利点は、現在存在しない場合にデータオブジェクトを作成して要素に関連付けないことです。対照的に、 &lt;code&gt;jQuery.data(element)&lt;/code&gt; は常にデータオブジェクトを呼び出し元に返し、以前にデータオブジェクトが存在していなかった場合は作成します。</target>
        </trans-unit>
        <trans-unit id="acdb90577bf3f6aada029f8710eb364c8c78a2a9" translate="yes" xml:space="preserve">
          <source>The rate (in milliseconds) at which animations fire.</source>
          <target state="translated">アニメーションが起動する速度(ミリ秒単位)。</target>
        </trans-unit>
        <trans-unit id="cb10dad645475696bea64c8a19075d461c6a4dfa" translate="yes" xml:space="preserve">
          <source>The remaining parameter of &lt;code&gt;.animate()&lt;/code&gt; is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called &lt;code&gt;swing&lt;/code&gt;, and one that progresses at a constant pace, called &lt;code&gt;linear&lt;/code&gt;. More easing functions are available with the use of plug-ins, most notably the &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI suite&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.animate()&lt;/code&gt; の残りのパラメーターは、使用するイージング関数を指定する文字列です。イージング関数は、アニメーション内のさまざまなポイントでアニメーションが進行する速度を指定します。 jQueryライブラリの唯一のイージング実装は、 &lt;code&gt;swing&lt;/code&gt; と呼ばれるデフォルトと、 &lt;code&gt;linear&lt;/code&gt; と呼ばれる一定のペースで進行するものです。プラグイン、特に&lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UIスイートを&lt;/a&gt;使用すると、より多くのイージング関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="98e06470e3fa05cf5cc0dafb0b2ea20bf565f4ed" translate="yes" xml:space="preserve">
          <source>The result of the following code is a red background behind items 3, 4 and 5:</source>
          <target state="translated">以下のコードの結果、項目3、4、5の後ろに赤背景が表示されます。</target>
        </trans-unit>
        <trans-unit id="5f17d80c2fe57707960ab0ce62ea8411233be366" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind all four elements. Using an HTML snippet as the &lt;code&gt;.add()&lt;/code&gt; method's argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let's say, for example, that we want to alter the background of the list items along with a newly created paragraph:</source>
          <target state="translated">この呼び出しの結果、4つの要素すべての背景が赤になります。（3番目のバージョンのように）HTMLスニペットを &lt;code&gt;.add()&lt;/code&gt; メソッドの引数として使用して、その場で追加の要素を作成し、それらの要素を一致する要素のセットに追加できます。たとえば、新しく作成された段落に加えて、リストアイテムの背景を変更するとします。</target>
        </trans-unit>
        <trans-unit id="f5306f5e1616f9fad7b62559297b520b0e13420d" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.</source>
          <target state="translated">この呼び出しの結果、項目2の後ろに赤い背景が表示されます。セレクタ式が与えられていないので、この先行する要素は間違いなくオブジェクトの一部として含まれます。もし選択式が与えられていた場合は、その要素が含まれる前にマッチするかどうかがテストされます。</target>
        </trans-unit>
        <trans-unit id="b4fe25b8e98dc2a880ab00b6091306129b22d2b1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</source>
          <target state="translated">この呼び出しの結果、項目4の後ろに赤い背景が表示されます。セレクタ式を与えていないので、この次の要素は紛れもなくオブジェクトの一部として含まれています。もしセレクタ式を指定していた場合は、要素が含まれる前にマッチするかどうかテストされます。</target>
        </trans-unit>
        <trans-unit id="2bdd09e46848eac38bfa76febcbadcd077bcfffd" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</source>
          <target state="translated">この呼び出しの結果、項目1と2の後ろに赤い背景が表示されます。セレクタ式を与えていないので、これらの先行する要素はオブジェクトの一部として明確に含まれます。もしセレクタ式を指定していた場合は、要素が含まれる前にマッチするかどうかテストされます。</target>
        </trans-unit>
        <trans-unit id="803dcb57e7c93f3e463b7c42ff56d2c06449aae1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.</source>
          <target state="translated">この呼び出しの結果、アイテム1、2、4、5の後ろに赤い背景が表示されます。セレクタ式を指定していないので、すべての兄弟はオブジェクトの一部となります。もしセレクタ式を与えていれば、これら4つの中で一致する項目だけが含まれます。</target>
        </trans-unit>
        <trans-unit id="b43225fe6ce7a5b0e7693b20ab46719a0f4b3f89" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</source>
          <target state="translated">この呼び出しの結果、項目4と5の後ろに赤い背景が表示されます。セレクタ式を与えていないので、以下の要素はオブジェクトの一部として間違いなく含まれています。もしセレクタ式を指定していた場合は、要素が含まれる前に一致するかどうかテストされます。</target>
        </trans-unit>
        <trans-unit id="0ed9f4feb04438548de3b013137694e77d57632b" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.</source>
          <target state="translated">この呼び出しの結果、アイテム A、B、および C の背後に赤い背景が表示されます。セレクタ式を指定していないので、子はすべて返される jQuery オブジェクトの一部となります。1 つを指定していた場合は、これら 3 つの中で一致する項目のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="5a5d9de3fcbdb18a4bc188bea62cba2e34e884d1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for item 2, as it is the only &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; that has a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; among its descendants.</source>
          <target state="translated">この呼び出しの結果は、子孫の中で &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; を持つ唯一の &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; であるため、項目2の背景が赤になります。</target>
        </trans-unit>
        <trans-unit id="c89615ef14d3fbd60d050d9155e47ebd4ba8656f" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.</source>
          <target state="translated">この呼び出しの結果、項目 3 の背景が赤くなります。指定されたインデックスはゼロ ベースであり、DOM ツリー内ではなく jQuery オブジェクト内の要素の位置を参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="14fb455b8bbff10842086b58eac8f01cab3c1afe" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 1, 3 and 5, as they do not match the selector.</source>
          <target state="translated">この呼び出しの結果、アイテム1、3、5はセレクタと一致しないため、背景が赤くなります。</target>
        </trans-unit>
        <trans-unit id="3a1805e37c0ac93512567135d69322d80bf04492" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that &lt;code&gt;:even&lt;/code&gt; and &lt;code&gt;:odd&lt;/code&gt; use 0-based indexing).</source>
          <target state="translated">この呼び出しの結果は、アイテム1、3、および5がセレクターと一致するため、背景が赤になります（ &lt;code&gt;:even&lt;/code&gt; および &lt;code&gt;:odd&lt;/code&gt; は0ベースのインデックスを使用することに注意してください）。</target>
        </trans-unit>
        <trans-unit id="008bfcb10c48746c779c107b0cd2e4012a84d492" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).</source>
          <target state="translated">この呼び出しの結果、項目2と4はセレクタにマッチしないため、背景が赤くなります(:even と :odd は0ベースのインデックスを使用していることを思い出してください)。</target>
        </trans-unit>
        <trans-unit id="339946000b39d9fa707e17614083ed036b66079a" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 2, 4, and 6, as they match the selector.</source>
          <target state="translated">この呼び出しの結果、アイテム2、4、6はセレクタと一致しているため、背景が赤くなります。</target>
        </trans-unit>
        <trans-unit id="fa883f229b6f69a81b08da92e713eb4a1caff5f9" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.</source>
          <target state="translated">この呼び出しの結果、アイテム 3、4、および 5 の背景が赤色になります。指定されたインデックスはゼロ ベースであり、DOM ツリー内ではなく jQuery オブジェクト内の要素の位置を参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="db1517b2e444023a7127a38d5c51bcdff691e73b" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the final item.</source>
          <target state="translated">この呼びかけの結果、最終項目の背景が赤になりました。</target>
        </trans-unit>
        <trans-unit id="facf65b81d3f8a612a59fa241dcd3b82f9307f27" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the first item.</source>
          <target state="translated">この呼び出しの結果、最初の項目の背景が赤になります。</target>
        </trans-unit>
        <trans-unit id="0c500ec67ebb649d2e140b32763333d3bacd2958" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the first, third &amp;amp; 5th items.</source>
          <target state="translated">この呼び出しの結果は、1番目、3番目、および5番目のアイテムの背景が赤になります。</target>
        </trans-unit>
        <trans-unit id="385666a4367c3ceaa277ae989ffa6d62efba1ee5" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.</source>
          <target state="translated">この呼び出しの結果は、レベル2のリスト、アイテムII、およびレベル1のリスト（そしてDOMツリー全体で &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 要素まで）の背景が赤になります。セレクター式を提供しないため、すべての祖先は返されるjQueryオブジェクトの一部です。1つ提供した場合、これらの間で一致するアイテムのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="22aacd8c82ea9af8e8daf6e3c4d83d62f3a11bb2" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</source>
          <target state="translated">この呼び出しの結果、レベル 2 リストの背景が赤くなります。セレクタ式を指定していないので、親要素はオブジェクトの一部として確実に含まれます。もしセレクタ式を指定していた場合は、要素が含まれる前にマッチするかどうかがテストされます。</target>
        </trans-unit>
        <trans-unit id="fb4d7a14c05d95a1f5a2597e9018afb9d4fc4078" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the second &amp;amp; 4th items.</source>
          <target state="translated">この呼び出しの結果は、2番目と4番目のアイテムの背景が赤になります。</target>
        </trans-unit>
        <trans-unit id="759e58f5af381c9ae58e15d8327b13ec00b52925" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.</source>
          <target state="translated">この呼び出しの結果、アイテムA、B、1、2、3、およびCの背景が赤くなります。アイテムIIがセレクタ式にマッチしても、結果には含まれません。</target>
        </trans-unit>
        <trans-unit id="8542609c7db1f3303873f6a2002911ee15c9ea8e" translate="yes" xml:space="preserve">
          <source>The result of this call is the string, &lt;code&gt;&quot;two,four,six,eight&quot;&lt;/code&gt;.</source>
          <target state="translated">この呼び出しの結果は、ストリング &lt;code&gt;&quot;two,four,six,eight&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="485440b7c20f82cfee29dc2091cb4a9c40a2f99a" translate="yes" xml:space="preserve">
          <source>The result of this call would be a red background on item 1.</source>
          <target state="translated">この呼びかけの結果、項目1の背景が赤になってしまいます。</target>
        </trans-unit>
        <trans-unit id="271ba0250ab50aa59f8fc29f25ec5ee041c7dddd" translate="yes" xml:space="preserve">
          <source>The result of this is that it becomes simple to construct complex lists of callbacks where input values can be passed through to as many functions as needed with ease.</source>
          <target state="translated">その結果、入力値を必要なだけ多くの関数に簡単に渡すことができる複雑なコールバックのリストを簡単に構築できるようになりました。</target>
        </trans-unit>
        <trans-unit id="2e630df4612cdefc2e2262290e72aa29c13c7a13" translate="yes" xml:space="preserve">
          <source>The result would look like this:</source>
          <target state="translated">結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="57cf4e5bb5314a409449a88f58bf0d0b43b88262" translate="yes" xml:space="preserve">
          <source>The resulting DOM structure would be:</source>
          <target state="translated">結果として得られる DOM 構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="141af9b6cff1007634750533839c59d6c52a9d14" translate="yes" xml:space="preserve">
          <source>The returned jQuery object contains zero or more elements for each element in the original set, in reverse document order</source>
          <target state="translated">返された jQuery オブジェクトには、元のセット内の各要素に対して 0 個以上の要素が、逆のドキュメント順に含まれています。</target>
        </trans-unit>
        <trans-unit id="07ad1547f50f7c20a1cd7579032c984beb61889d" translate="yes" xml:space="preserve">
          <source>The returned jQuery object contains zero or one element for each element in the original set, in document order</source>
          <target state="translated">返された jQuery オブジェクトには、元のセット内の各要素に対して 0 個または 1 個の要素が、ドキュメントの順序で含まれています。</target>
        </trans-unit>
        <trans-unit id="f6fe1e1f1407019a7bb0e31dc8b4968b82567270" translate="yes" xml:space="preserve">
          <source>The same is true for other dynamic attributes, such as &lt;code&gt;selected&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">同じことが、 &lt;code&gt;selected&lt;/code&gt; や &lt;code&gt;value&lt;/code&gt; などの他の動的属性にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="59c475723db5a18006828a3888cc67bbf8c09867" translate="yes" xml:space="preserve">
          <source>The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page.</source>
          <target state="translated">スクリプトはグローバル コンテキストで実行されるため、他の変数を参照したり、jQuery 関数を使用したりすることができます。含まれるスクリプトは、現在のページに何らかの影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="d9cfc35df62d2b3a52dae65a48561a4349497359" translate="yes" xml:space="preserve">
          <source>The second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A jQuery object is created from the array elements in the order they appeared in the array; unlike most other multi-element jQuery operations, the elements are not sorted in DOM order. Elements will be copied from the array as-is and won't be unwrapped if they're already jQuery collections.</source>
          <target state="translated">この関数の 2 番目と 3 番目の定式化では、別の方法で既に選択されている 1 つ以上の DOM 要素を使用して jQuery オブジェクトを作成します。他の多くのマルチエレメント jQuery 操作とは異なり、要素は DOM 順にソートされません。他の多くのマルチエレメント jQuery 操作とは異なり、要素は DOM 順にソートされません。要素は配列からそのままコピーされ、すでに jQuery コレクションである場合はアンラップされません。</target>
        </trans-unit>
        <trans-unit id="09640a2d2f7e5680918d2964d2624ebb2a3d2a31" translate="yes" xml:space="preserve">
          <source>The second array-like object to merge into the first, unaltered.</source>
          <target state="translated">2 番目の配列のようなオブジェクトは、変更されずに 1 番目の配列にマージされます。</target>
        </trans-unit>
        <trans-unit id="4bc6e7d14914bf71bafefa2bfaf2aaad9add698b" translate="yes" xml:space="preserve">
          <source>The second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns &lt;code&gt;true&lt;/code&gt; (or a &quot;truthy&quot; value), the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:</source>
          <target state="translated">このメソッドの2番目の形式では、セレクターではなく関数に対して要素をフィルターできます。各要素について、関数が &lt;code&gt;true&lt;/code&gt; （または「真の」値）を返す場合、要素はフィルターされたセットに含まれます。それ以外の場合は除外されます。もう少し複雑なHTMLスニペットがあるとします。</target>
        </trans-unit>
        <trans-unit id="fcb5168b1f0fd8e8dcac15e31943b6a43f6f6d0d" translate="yes" xml:space="preserve">
          <source>The second form of this method evaluates expressions related to elements based on a function rather than a selector. For each element, if the function returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;.is()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; as well. For example, given a somewhat more involved HTML snippet:</source>
          <target state="translated">このメソッドの2番目の形式は、セレクターではなく関数に基づいて、要素に関連する式を評価します。各要素について、関数が &lt;code&gt;true&lt;/code&gt; を返す場合、 &lt;code&gt;.is()&lt;/code&gt; も &lt;code&gt;true&lt;/code&gt; を返します。たとえば、やや複雑なHTMLスニペットがあるとします。</target>
        </trans-unit>
        <trans-unit id="2a154816850f6de6770577387c99f209db6b6ece" translate="yes" xml:space="preserve">
          <source>The second inner &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; could be replaced with the specified HTML:</source>
          <target state="translated">2番目の内部の &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、指定されたHTMLで置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="d8e3344300bcc1acfb7bb30ab9c54d31a312c9e1" translate="yes" xml:space="preserve">
          <source>The second statement of the code above correctly refers to the &lt;code&gt;data-last-value&lt;/code&gt; attribute of the element. In case no data is stored with the passed key, jQuery searches among the attributes of the element, converting a camel-cased string into a dashed string and then prepending &lt;code&gt;data-&lt;/code&gt; to the result. So, the string &lt;code&gt;lastValue&lt;/code&gt; is converted to &lt;code&gt;data-last-value&lt;/code&gt;.</source>
          <target state="translated">上記のコードの2番目のステートメントは、要素の &lt;code&gt;data-last-value&lt;/code&gt; 属性を正しく参照しています。渡されたキーでデータが保存されていない場合、jQueryは要素の属性を検索し、キャメルケースの文字列を破線の文字列に変換してから、結果の前に &lt;code&gt;data-&lt;/code&gt; を付加します。したがって、文字列 &lt;code&gt;lastValue&lt;/code&gt; は &lt;code&gt;data-last-value&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="2c42dd9df1106a653c3e574c2ee9fc8431d825de" translate="yes" xml:space="preserve">
          <source>The second time we apply &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt;, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; class is returned to the single &lt;code&gt;tumble&lt;/code&gt; value:</source>
          <target state="translated">2回目に &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt; を適用すると、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; クラスは単一の &lt;code&gt;tumble&lt;/code&gt; 値に戻ります。</target>
        </trans-unit>
        <trans-unit id="665befe924907801a3530bb57b4cbf891ba537dd" translate="yes" xml:space="preserve">
          <source>The second version of &lt;code&gt;.animate()&lt;/code&gt; provides a &lt;code&gt;step&lt;/code&gt; option &amp;mdash; a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments (&lt;code&gt;now&lt;/code&gt; and &lt;code&gt;fx&lt;/code&gt;), and &lt;code&gt;this&lt;/code&gt; is set to the DOM element being animated.</source>
          <target state="translated">&lt;code&gt;.animate()&lt;/code&gt; の2番目のバージョンは、 &lt;code&gt;step&lt;/code&gt; オプション（アニメーションの各ステップで実行されるコールバック関数）を提供します。この関数は、カスタムアニメーションタイプを有効にしたり、アニメーションの発生に合わせて変更したりするのに役立ちます。これは2つの引数（受け入れ &lt;code&gt;now&lt;/code&gt; と &lt;code&gt;fx&lt;/code&gt; ）、そして &lt;code&gt;this&lt;/code&gt; 、アニメーションされているDOM要素に設定されています。</target>
        </trans-unit>
        <trans-unit id="9ae52fd7621257d963ead7e4f0853cac0c5348a5" translate="yes" xml:space="preserve">
          <source>The second version of &lt;code&gt;.toggleClass()&lt;/code&gt; uses the second parameter for determining whether the class should be added or removed. If this parameter's value is &lt;code&gt;true&lt;/code&gt;, then the class is added; if &lt;code&gt;false&lt;/code&gt;, the class is removed. In essence, the statement:</source>
          <target state="translated">&lt;code&gt;.toggleClass()&lt;/code&gt; の2番目のバージョンは、2番目のパラメーターを使用して、クラスを追加するか削除するかを決定します。このパラメーターの値が &lt;code&gt;true&lt;/code&gt; の場合、クラスが追加されます。場合 &lt;code&gt;false&lt;/code&gt; 、クラスが削除されます。本質的に、ステートメントは：</target>
        </trans-unit>
        <trans-unit id="efaf7d0124b927367a9b0ae3fed5a220228eea05" translate="yes" xml:space="preserve">
          <source>The second version of the &lt;code&gt;.not()&lt;/code&gt; method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:</source>
          <target state="translated">&lt;code&gt;.not()&lt;/code&gt; メソッドの2番目のバージョンでは、以前に他の方法でこれらの要素を見つけたと想定して、一致したセットから要素を削除できます。たとえば、リストのいずれかのアイテムにIDが適用されているとします。</target>
        </trans-unit>
        <trans-unit id="db488502c779e5855624bcb94b0d9eac6e51fef3" translate="yes" xml:space="preserve">
          <source>The second version of the method accepts a Boolean parameter. If this parameter is &lt;code&gt;true&lt;/code&gt;, then the matched elements are shown; if &lt;code&gt;false&lt;/code&gt;, the elements are hidden. In essence, the statement:</source>
          <target state="translated">メソッドの2番目のバージョンは、ブール型パラメーターを受け入れます。このパラメーターが &lt;code&gt;true&lt;/code&gt; の場合、一致した要素が表示されます。場合 &lt;code&gt;false&lt;/code&gt; 、要素が隠されています。本質的に、ステートメントは：</target>
        </trans-unit>
        <trans-unit id="14129c4f8fda0ecb933fddabaa46bdf397f7bc5b" translate="yes" xml:space="preserve">
          <source>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:</source>
          <target state="translated">このメソッドの 2 番目のバージョンでは、代わりにコールバック関数を指定することができます。このコールバック関数は、マッチした要素ごとに一度だけ呼び出されます。この関数は、対応する要素のコンテンツをラップする DOM 要素、jQuery オブジェクト、または HTML スニペットを返す必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="50749b1d27f953b40a33c2be2b260d7a6793cd44" translate="yes" xml:space="preserve">
          <source>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:</source>
          <target state="translated">このメソッドの 2 番目のバージョンでは、代わりにコールバック関数を指定することができます。このコールバック関数は、マッチした要素ごとに 1 回ずつ呼び出されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f395dc88a156a3c3c8af5ffcd5884c85b81cc391" translate="yes" xml:space="preserve">
          <source>The selectors are a composition of CSS and custom additions. All selectors available in jQuery are documented on the &lt;a href=&quot;category/selectors&quot;&gt;Selectors API page&lt;/a&gt;.</source>
          <target state="translated">セレクターは、CSSとカスタム追加の構成です。jQueryで使用可能なすべてのセレクターは、&lt;a href=&quot;category/selectors&quot;&gt;セレクターAPIページに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="113d83a724dd060af5c92489a395d6836663109a" translate="yes" xml:space="preserve">
          <source>The standard events in the Document Object Model are: &lt;code&gt;blur&lt;/code&gt;, &lt;code&gt;focus&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt;, &lt;code&gt;resize&lt;/code&gt;, &lt;code&gt;scroll&lt;/code&gt;, &lt;code&gt;unload&lt;/code&gt;, &lt;code&gt;beforeunload&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;dblclick&lt;/code&gt;, &lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;mouseover&lt;/code&gt;, &lt;code&gt;mouseout&lt;/code&gt;, &lt;code&gt;mouseenter&lt;/code&gt;, &lt;code&gt;mouseleave&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;keypress,&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt;. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.</source>
          <target state="translated">ドキュメントオブジェクトモデルの標準イベントは、 &lt;code&gt;blur&lt;/code&gt; 、 &lt;code&gt;focus&lt;/code&gt; 、 &lt;code&gt;load&lt;/code&gt; 、 &lt;code&gt;resize&lt;/code&gt; 、 &lt;code&gt;scroll&lt;/code&gt; 、 &lt;code&gt;unload&lt;/code&gt; 、 &lt;code&gt;beforeunload&lt;/code&gt; 、 &lt;code&gt;click&lt;/code&gt; 、 &lt;code&gt;dblclick&lt;/code&gt; 、 &lt;code&gt;mousedown&lt;/code&gt; 、 &lt;code&gt;mouseup&lt;/code&gt; 、 &lt;code&gt;mousemove&lt;/code&gt; 、 &lt;code&gt;mouseover&lt;/code&gt; 、 &lt;code&gt;mouseout&lt;/code&gt; 、 &lt;code&gt;mouseenter&lt;/code&gt; 、 &lt;code&gt;mouseleave&lt;/code&gt; 、 &lt;code&gt;change&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;submit&lt;/code&gt; 、submit、 &lt;code&gt;keydown&lt;/code&gt; 、 &lt;code&gt;keypress,&lt;/code&gt; およびキー &lt;code&gt;keyup&lt;/code&gt; 。DOMイベント名は一部の要素に対して事前定義された意味を持つため、他の目的で使用することはお勧めしません。jQueryのイベントモデルは、要素の任意の名前でイベントをトリガーでき、その要素が属するDOMツリーがあれば、それを上に伝搬します。</target>
        </trans-unit>
        <trans-unit id="d7dc41bbfc0d4e44cab83fd01605e79bb3468eef" translate="yes" xml:space="preserve">
          <source>The string representing an easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called &lt;code&gt;swing&lt;/code&gt;, and one that progresses at a constant pace, called &lt;code&gt;linear&lt;/code&gt;. More easing functions are available with the use of plug-ins, most notably the &lt;a href=&quot;https://jqueryui.com&quot;&gt;jQuery UI suite&lt;/a&gt;.</source>
          <target state="translated">イージング関数を表す文字列は、アニメーションがアニメーション内のさまざまなポイントで進行する速度を指定します。jQueryライブラリの唯一のイージング実装は、 &lt;code&gt;swing&lt;/code&gt; と呼ばれるデフォルトと、 &lt;code&gt;linear&lt;/code&gt; と呼ばれる一定のペースで進行するものです。プラグイン、特に&lt;a href=&quot;https://jqueryui.com&quot;&gt;jQuery UIスイートを&lt;/a&gt;使用すると、より多くのイージング関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="b9a2664d68de74010dd9b594714895a2e4e5ee52" translate="yes" xml:space="preserve">
          <source>The string to trim.</source>
          <target state="translated">トリミングする紐。</target>
        </trans-unit>
        <trans-unit id="b5a92059af11477af58d65e98372ed264b36cef5" translate="yes" xml:space="preserve">
          <source>The style definition is present to make the target element small enough to be scrollable:</source>
          <target state="translated">ターゲット要素を小さくしてスクロール可能にするためのスタイル定義が存在します。</target>
        </trans-unit>
        <trans-unit id="5deae09e7c61eea99ec8ef3ea6e54e9cb20eaf6c" translate="yes" xml:space="preserve">
          <source>The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation.</source>
          <target state="translated">マッチした各要素の内容として設定するテキスト。数値またはブール値を指定した場合は、文字列表現に変換されます。</target>
        </trans-unit>
        <trans-unit id="5f5b15e66531244890cf5d811d8f2c84ea4027f2" translate="yes" xml:space="preserve">
          <source>The third form of the &lt;code&gt;.unbind()&lt;/code&gt; method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:</source>
          <target state="translated">&lt;code&gt;.unbind()&lt;/code&gt; メソッドの3番目の形式は、ハンドラーをそれ自体からバインド解除する場合に使用されます。たとえば、イベントハンドラを3回だけトリガーしたいとします。</target>
        </trans-unit>
        <trans-unit id="6c28ffbb3cc7d012a98f2607f053d7e64eaa8d79" translate="yes" xml:space="preserve">
          <source>The translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element's value and its index or key within the array or object.</source>
          <target state="translated">このメソッドに提供される変換関数は、配列またはオブジェクト内の各トップレベル要素に対して呼び出され、2つの引数が渡されます。要素の値と、配列またはオブジェクト内のインデックスまたはキーです。</target>
        </trans-unit>
        <trans-unit id="258e9a1f5851882139fe20ce70223b4486206779" translate="yes" xml:space="preserve">
          <source>The type of a function is &quot;function&quot;.</source>
          <target state="translated">関数の種類は「関数」です。</target>
        </trans-unit>
        <trans-unit id="250061ae6c3eaba58f68c8b0705fa5283b17f50a" translate="yes" xml:space="preserve">
          <source>The type of a number is &quot;number&quot;.</source>
          <target state="translated">数字の種類は「数」です。</target>
        </trans-unit>
        <trans-unit id="7d86a1b42215eee2fd5f10b41fcbfe8d78a85728" translate="yes" xml:space="preserve">
          <source>The type of a string is &quot;string&quot;.</source>
          <target state="translated">文字列の型は「文字列」です。</target>
        </trans-unit>
        <trans-unit id="de7be4ab84b82bbdfbeec8971b1864a663638bfd" translate="yes" xml:space="preserve">
          <source>The type of an array is &quot;object&quot;:</source>
          <target state="translated">配列の型は「オブジェクト」です。</target>
        </trans-unit>
        <trans-unit id="a18897493ed6d8b67961ab81a7e1840ec5872f8e" translate="yes" xml:space="preserve">
          <source>The type of an object is &quot;object&quot;:</source>
          <target state="translated">オブジェクトの型は「オブジェクト」です。</target>
        </trans-unit>
        <trans-unit id="8bb813a8f15ca076b4aeffe26fb2a446d33302d2" translate="yes" xml:space="preserve">
          <source>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).</source>
          <target state="translated">サーバから期待されるデータのタイプ。デフォルト:Intelligent Guess (xml,json,script,text,html)。</target>
        </trans-unit>
        <trans-unit id="65b1a1be3665cab47e929452b9514cab452f93f3" translate="yes" xml:space="preserve">
          <source>The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:</source>
          <target state="translated">サーバーから返されることを期待しているデータのタイプ。何も指定されていない場合、jQuery はレスポンスの MIME タイプに基づいてそれを推測しようとします (XML MIME タイプの場合は XML、1.4 の場合は JSON、1.4 の場合は JavaScript オブジェクト、1.4 の場合は script がスクリプトを実行し、それ以外のものは文字列として返されます)。利用可能な型 (および成功コールバックの最初の引数として渡される結果)は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5e4f1e6bc7e33b940ea0ca5958d289d963ae06e7" translate="yes" xml:space="preserve">
          <source>The type of queue that needs to be observed.</source>
          <target state="translated">観察が必要なキューの種類。</target>
        </trans-unit>
        <trans-unit id="ac03d521d35e958a333e1be1023588d7bb5c2990" translate="yes" xml:space="preserve">
          <source>The unminified jQuery source itself includes a list of default converters, which effectively illustrates how they can be used:</source>
          <target state="translated">unminified jQueryソース自体にはデフォルトのコンバータのリストが含まれており、それらがどのように使用できるかを効果的に説明しています。</target>
        </trans-unit>
        <trans-unit id="eb4b9ca98fca80215d567f08acc1e010086fbd76" translate="yes" xml:space="preserve">
          <source>The updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:</source>
          <target state="translated">更新された要素のセットは、次の(連鎖された)メソッドで使用されたり、後で使用するために変数に代入されたりすることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7dc333f2557363d5ea2debb3f8b7027ef58060e4" translate="yes" xml:space="preserve">
          <source>The usefulness of the &lt;code&gt;.stop()&lt;/code&gt; method is evident when we need to animate an element on &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;.stop()&lt;/code&gt; メソッドの有用性は、 &lt;code&gt;mouseenter&lt;/code&gt; および &lt;code&gt;mouseleave&lt;/code&gt; で要素をアニメーション化する必要がある場合に明らかです。</target>
        </trans-unit>
        <trans-unit id="7ddb3ecf6925c2baa005d5f8268928b76546a56a" translate="yes" xml:space="preserve">
          <source>The value of this property is typically equal to &lt;code&gt;document&lt;/code&gt;, as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; or XML document.</source>
          <target state="translated">何も指定されていない場合、これはjQueryオブジェクトのデフォルトコンテキストであるため、通常、このプロパティの値は &lt;code&gt;document&lt;/code&gt; と同じです。たとえば、オブジェクトが &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; またはXMLドキュメント内を検索して作成された場合、コンテキストは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="d165304e00442e2fdb141efe014b25a469d208d2" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.height()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.height()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">要素またはその親が非表示の場合、 &lt;code&gt;.height()&lt;/code&gt; によって報告される値は正確であるとは限りません。正確な値を取得するには、 &lt;code&gt;.height()&lt;/code&gt; を使用する前に要素が表示されていることを確認してください。 jQueryは、寸法を測定するために要素を一時的に表示してから非表示にしようとしますが、これは信頼性が低く、（正確な場合でも）ページのパフォーマンスに大きな影響を与える可能性があります。この表示と再表示の測定機能は、jQueryの将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8c0af6f379e115697c7e674c117df786f0e63a85" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.innerHeight()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.innerHeight()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">&lt;code&gt;.innerHeight()&lt;/code&gt; によって報告される値は、要素またはその親が非表示の場合に正確であるとは限りません。正確な値を取得するには、 &lt;code&gt;.innerHeight()&lt;/code&gt; を使用する前に要素が表示されていることを確認してください。 jQueryは、寸法を測定するために要素を一時的に表示してから非表示にしようとしますが、これは信頼性が低く、（正確な場合でも）ページのパフォーマンスに大きな影響を与える可能性があります。この表示と再表示の測定機能は、jQueryの将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8991a4ea8bbeb4de8eb903eec32a3d76ab3261d6" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.innerWidth()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.innerWidth()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">要素またはその親が非表示の場合、 &lt;code&gt;.innerWidth()&lt;/code&gt; によって報告される値は正確であるとは限りません。正確な値を取得するには、 &lt;code&gt;.innerWidth()&lt;/code&gt; を使用する前に要素が表示されていることを確認してください。 jQueryは、寸法を測定するために要素を一時的に表示してから非表示にしようとしますが、これは信頼性が低く、（正確な場合でも）ページのパフォーマンスに大きな影響を与える可能性があります。この表示と再表示の測定機能は、jQueryの将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d91533a4f81b4096f3edfca19014a9026436ec64" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.outerHeight()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.outerHeight()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">要素またはその親が非表示の場合、 &lt;code&gt;.outerHeight()&lt;/code&gt; によって報告される値は正確であるとは限りません。正確な値を取得するには、 &lt;code&gt;.outerHeight()&lt;/code&gt; を使用する前に要素が表示されていることを確認してください。 jQueryは、寸法を測定するために要素を一時的に表示してから非表示にしようとしますが、これは信頼性が低く、（正確な場合でも）ページのパフォーマンスに大きな影響を与える可能性があります。この表示と再表示の測定機能は、jQueryの将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="dcd3d5a9284c46e459ea9e01e158794d00a13f65" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.outerWidth()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.outerWidth()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">要素またはその親が非表示の場合、 &lt;code&gt;.outerWidth()&lt;/code&gt; によって報告される値は正確であるとは限りません。正確な値を取得するには、 &lt;code&gt;.outerWidth()&lt;/code&gt; を使用する前に要素が表示されていることを確認してください。 jQueryは、寸法を測定するために要素を一時的に表示してから非表示にしようとしますが、これは信頼性が低く、（正確な場合でも）ページのパフォーマンスに大きな影響を与える可能性があります。この表示と再表示の測定機能は、jQueryの将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="2ae90c5e2d8c736238c1834e07b1b20df9da99b3" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.width()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.width()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">&lt;code&gt;.width()&lt;/code&gt; によって報告される値は、要素またはその親が非表示の場合に正確であるとは限りません。正確な値を取得するには、 &lt;code&gt;.width()&lt;/code&gt; を使用する前に要素が表示されていることを確認してください。jQueryは、寸法を測定するために要素を一時的に表示してから非表示にしようとしますが、これは信頼性が低く、（正確な場合でも）ページのパフォーマンスに大きな影響を与える可能性があります。この表示と再表示の測定機能は、jQueryの将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4b826fb647f77daf90366e276f5a2041c3eea0d6" translate="yes" xml:space="preserve">
          <source>The value to be tested.</source>
          <target state="translated">検査対象となる値です。</target>
        </trans-unit>
        <trans-unit id="5f9706fe37a21ebb4f5356314e9dbb0f193612de" translate="yes" xml:space="preserve">
          <source>The value to search for.</source>
          <target state="translated">探すべき値。</target>
        </trans-unit>
        <trans-unit id="df08275a2c09a868605d7342becb61e11202ec4a" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;recursiveEncoded&lt;/code&gt; and &lt;code&gt;recursiveDecoded&lt;/code&gt; are alerted as follows:</source>
          <target state="translated">&lt;code&gt;recursiveEncoded&lt;/code&gt; と &lt;code&gt;recursiveDecoded&lt;/code&gt; の値は、次のように通知されます。</target>
        </trans-unit>
        <trans-unit id="19e0e1cb47a895c4adce508484a0fbdad4d1c662" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;shallowEncoded&lt;/code&gt; and &lt;code&gt;shallowDecoded&lt;/code&gt; are alerted as follows:</source>
          <target state="translated">&lt;code&gt;shallowEncoded&lt;/code&gt; と &lt;code&gt;shallowDecoded&lt;/code&gt; の値は次のように警告されます：</target>
        </trans-unit>
        <trans-unit id="56a99608838cb4e83a0ff0bacdd7885d4ca584ef" translate="yes" xml:space="preserve">
          <source>The variation you choose is generally a matter of style or convenience.</source>
          <target state="translated">選ぶバリエーションは、一般的にはスタイルや利便性の問題です。</target>
        </trans-unit>
        <trans-unit id="98b4a5d36b3f75dae7b5b98ef86f8721c4b2115f" translate="yes" xml:space="preserve">
          <source>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">垂直スクロール位置は、スクロール可能領域の上のビューから非表示になっているピクセル数と同じです。スクロールバーが最上部にある場合、または要素がスクロール可能でない場合、この数は &lt;code&gt;0&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="502041741bb29d2d0ce2d7cb3f9f058410872bd0" translate="yes" xml:space="preserve">
          <source>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the &lt;code&gt;scrollTop&lt;/code&gt; positions the vertical scroll of each matched element.</source>
          <target state="translated">垂直スクロール位置は、スクロール可能領域の上のビューから非表示になっているピクセル数と同じです。 &lt;code&gt;scrollTop&lt;/code&gt; を設定すると、一致した各要素の垂直スクロールが配置されます。</target>
        </trans-unit>
        <trans-unit id="68009f554546520daab11a31781a53314e2258bf" translate="yes" xml:space="preserve">
          <source>Their width and height are explicitly set to 0.</source>
          <target state="translated">その幅と高さは明示的に0に設定されています。</target>
        </trans-unit>
        <trans-unit id="51a6b9ab62274f73e087c9eaa4c7881cd846e98d" translate="yes" xml:space="preserve">
          <source>Thenable</source>
          <target state="translated">Thenable</target>
        </trans-unit>
        <trans-unit id="bba170ab9f1988f7e0b5177b2872e6c65a73fd8b" translate="yes" xml:space="preserve">
          <source>There are lot of plugins that leverage jQuery's selectors in other ways. The validation plugin accepts a selector to specify a dependency, whether an input is required or not:</source>
          <target state="translated">jQueryのセレクタを他の方法で活用しているプラグインはたくさんあります。検証プラグインでは、入力が必須かどうかに関わらず、依存関係を指定するためのセレクタを受け付けています。</target>
        </trans-unit>
        <trans-unit id="2ce0d5f676018adf414ee9fb049b9a0ccdf3b569" translate="yes" xml:space="preserve">
          <source>There are shorthand methods for some events such as &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the &lt;a href=&quot;category/events&quot;&gt;events category&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;などの一部のイベントには、イベントハンドラーをアタッチまたはトリガーするために使用できる簡単なメソッドがあります。省略メソッドの完全なリストについては、&lt;a href=&quot;category/events&quot;&gt;イベントカテゴリを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0b6fda1d75631a26b3fa9aabdbc4d04428691220" translate="yes" xml:space="preserve">
          <source>There are shorthand methods for some standard browser events such as &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the &lt;a href=&quot;category/events&quot;&gt;events category&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;など、イベントハンドラーをアタッチまたはトリガーするために使用できるいくつかの標準的なブラウザーイベントの省略メソッドがあります。省略メソッドの完全なリストについては、&lt;a href=&quot;category/events&quot;&gt;イベントカテゴリを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d63711a0adcaf5fcd03bba3c3b147f0181be2820" translate="yes" xml:space="preserve">
          <source>There are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.</source>
          <target state="translated">jQuery.sub()が作成された具体的なユースケースは2つあります。1 つ目は、元のメソッドを完全に破壊することなく jQuery メソッドをオーバーライドするための痛みのない方法を提供するためであり、もう 1 つは、jQuery プラグインのカプセル化と基本的なネームスペーシングを行うのに役立つものでした。</target>
        </trans-unit>
        <trans-unit id="f92882ffa32ba59639260af20d453135f132e2a1" translate="yes" xml:space="preserve">
          <source>There are two types of events:</source>
          <target state="translated">イベントには2種類あります。</target>
        </trans-unit>
        <trans-unit id="d166c8f570311888ce1e4d2c5d8012b91e58818d" translate="yes" xml:space="preserve">
          <source>There is also &lt;code&gt;$(document).on( &quot;ready&quot;, handler )&lt;/code&gt;, &lt;em&gt;deprecated as of jQuery 1.8 and removed in jQuery 3.0&lt;/em&gt;. Note that if the DOM becomes ready before this event is attached, the handler &lt;em&gt;will not be executed&lt;/em&gt;.</source>
          <target state="translated">あり、 &lt;code&gt;$(document).on( &quot;ready&quot;, handler )&lt;/code&gt; 、&lt;em&gt;jQueryの1.8で廃止とjQuery 3.0で削除が&lt;/em&gt;。このイベントがアタッチされる前にDOMの準備ができると、ハンドラー&lt;em&gt;は実行されないことに&lt;/em&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="b2adf959188684f5fb25abf351d01408eb8540a8" translate="yes" xml:space="preserve">
          <source>These are callbacks that you can subscribe to within the Ajax request object, like so:</source>
          <target state="translated">これらは、以下のようにAjaxリクエストオブジェクト内でサブスクライブできるコールバックです。</target>
        </trans-unit>
        <trans-unit id="3bb9908eefdc7f5d52352839085856ff586bef42" translate="yes" xml:space="preserve">
          <source>These can be added as callbacks to a &lt;code&gt;$.Callbacks&lt;/code&gt; list and invoked as follows:</source>
          <target state="translated">これらは、コールバックとして &lt;code&gt;$.Callbacks&lt;/code&gt; リストに追加し、次のように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="f3045922e3813d89836a97e9e2f7086202e8607c" translate="yes" xml:space="preserve">
          <source>These events are triggered on the &lt;code&gt;document&lt;/code&gt;, calling any handlers which may be listening. You can listen for these events like so:</source>
          <target state="translated">これらのイベントは &lt;code&gt;document&lt;/code&gt; でトリガーされ、待機しているハンドラを呼び出します。次のようにこれらのイベントをリッスンできます：</target>
        </trans-unit>
        <trans-unit id="7e88bd0cd93766cee13f54b1e8fa0d73ba477db4" translate="yes" xml:space="preserve">
          <source>These functions assist with common idioms encountered when performing Ajax tasks.</source>
          <target state="translated">これらの機能は、Ajax タスクを実行する際に遭遇する一般的なイディオムを支援します。</target>
        </trans-unit>
        <trans-unit id="bbe40564276f220415e365fe124b886a4b1abcfa" translate="yes" xml:space="preserve">
          <source>These methods adjust the opacity of elements.</source>
          <target state="translated">これらのメソッドは、要素の不透明度を調整します。</target>
        </trans-unit>
        <trans-unit id="a5dceab1cd6454e730b2a57d9f7b0169f076d3c5" translate="yes" xml:space="preserve">
          <source>These methods allow us to associate arbitrary data with specific DOM elements.</source>
          <target state="translated">これらのメソッドにより、任意のデータを特定の DOM 要素に関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="4066f49a0950cecd91b201b26d1de51efbe9229a" translate="yes" xml:space="preserve">
          <source>These methods allow us to delete elements from the DOM.</source>
          <target state="translated">これらのメソッドにより、DOM から要素を削除することができます。</target>
        </trans-unit>
        <trans-unit id="83101d88ab9c3dabba90bc0af8ad464da3b6ec6d" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content inside an existing element.</source>
          <target state="translated">これらのメソッドにより、既存の要素内に新しいコンテンツを挿入することができます。</target>
        </trans-unit>
        <trans-unit id="f267e40060626a06189c0c1eee775807f476e368" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content outside an existing element.</source>
          <target state="translated">これらのメソッドにより、既存の要素の外側に新しいコンテンツを挿入することができます。</target>
        </trans-unit>
        <trans-unit id="f29086c3aa4bd1a27da2e9e184fe031e4bfd5a02" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content surrounding existing content.</source>
          <target state="translated">これらの方法により、既存のコンテンツの周囲に新たなコンテンツを挿入することができます。</target>
        </trans-unit>
        <trans-unit id="fc604750ce03230768923f16f804981342c1e94d" translate="yes" xml:space="preserve">
          <source>These methods allow you to create effects that are not provided &quot;out of the box&quot; by jQuery.</source>
          <target state="translated">これらのメソッドを使用すると、jQueryでは提供されていないエフェクトを作成することができます。</target>
        </trans-unit>
        <trans-unit id="f0625f6d74b36be39a6d19f27d45b0219d041a46" translate="yes" xml:space="preserve">
          <source>These methods and event handlers handle forms and their various elements.</source>
          <target state="translated">これらのメソッドとイベントハンドラは、フォームとその様々な要素を処理します。</target>
        </trans-unit>
        <trans-unit id="18b8674db3e233679cba9aa8c56ce17e71105fda" translate="yes" xml:space="preserve">
          <source>These methods are used to get and set the CSS dimensions for the various properties.</source>
          <target state="translated">これらのメソッドは、様々なプロパティのCSSの寸法を取得したり設定したりするために使用されます。</target>
        </trans-unit>
        <trans-unit id="21d116605cbd8c6c5ab76a3a490e960c52c3b187" translate="yes" xml:space="preserve">
          <source>These methods are used to register behaviors to take effect when the user interacts with the browser, and to further manipulate those registered behaviors.</source>
          <target state="translated">これらのメソッドは、ユーザーがブラウザと対話したときに有効になるようにビヘイビアを登録し、登録されたビヘイビアをさらに操作するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6e156b975a013e00c555b91859d1720dc0cebe05" translate="yes" xml:space="preserve">
          <source>These methods are used to remove content from the DOM and replace it with new content.</source>
          <target state="translated">これらのメソッドは、DOM からコンテンツを削除し、新しいコンテンツに置き換えるために使用されます。</target>
        </trans-unit>
        <trans-unit id="76059f80300cb0ffdcfcb66416bfc17f849566e5" translate="yes" xml:space="preserve">
          <source>These methods can be used to make arbitrary Ajax requests.</source>
          <target state="translated">これらのメソッドを使用して、任意のAjaxリクエストを行うことができます。</target>
        </trans-unit>
        <trans-unit id="eb1001d40d2d517229663551d85a88e9dba991d4" translate="yes" xml:space="preserve">
          <source>These methods get and set CSS-related properties of elements.</source>
          <target state="translated">これらのメソッドは、要素のCSS関連のプロパティを取得・設定します。</target>
        </trans-unit>
        <trans-unit id="1f1b0bb6f70a2eb3ccb85e1859247cdd66807aa2" translate="yes" xml:space="preserve">
          <source>These methods get and set DOM attributes of elements</source>
          <target state="translated">これらのメソッドは要素の DOM 属性を取得・設定します。</target>
        </trans-unit>
        <trans-unit id="4b24afb95d5db312e3e6e541dcda0c7a8cbc8e06" translate="yes" xml:space="preserve">
          <source>These methods get and set DOM attributes of elements.</source>
          <target state="translated">これらのメソッドは、要素の DOM 属性を取得・設定します。</target>
        </trans-unit>
        <trans-unit id="8c704e4ccc42f4db139bb3dcca8c837ee5ce4c92" translate="yes" xml:space="preserve">
          <source>These methods inspect and manipulate the CSS classes assigned to elements.</source>
          <target state="translated">これらのメソッドは、要素に割り当てられたCSSクラスを検査し、操作します。</target>
        </trans-unit>
        <trans-unit id="1af509504d5f4d97c437b425452c5adcf074987f" translate="yes" xml:space="preserve">
          <source>These methods perform the more common types of Ajax requests in less code.</source>
          <target state="translated">これらのメソッドは、より一般的なタイプのAjaxリクエストをより少ないコードで実行します。</target>
        </trans-unit>
        <trans-unit id="152784201cd6ea8db24c609aade9c011ad0e3811" translate="yes" xml:space="preserve">
          <source>These methods register handlers to be called when certain events, such as initialization or completion, take place for any Ajax request on the page. The global events are fired on each Ajax request if the &lt;code&gt;global&lt;/code&gt; property in &lt;a href=&quot;../../jquery.ajaxsetup&quot;&gt;&lt;code&gt;jQuery.ajaxSetup()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;, which it is by default. &lt;em&gt;Note: Global events are never fired for cross-domain script or JSONP requests, regardless of the value of &lt;code&gt;global&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">これらのメソッドは、初期化や完了などの特定のイベントがページ上の任意のAjaxリクエストで発生したときに呼び出されるハンドラーを登録します。&lt;a href=&quot;../../jquery.ajaxsetup&quot;&gt; &lt;code&gt;jQuery.ajaxSetup()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;global&lt;/code&gt; プロパティが &lt;code&gt;true&lt;/code&gt; の場合、グローバルイベントは各Ajaxリクエストで発生します。これはデフォルトです。&lt;em&gt;注：&lt;/em&gt;&lt;em&gt; &lt;code&gt;global&lt;/code&gt; &lt;/em&gt;&lt;em&gt;の値に関係なく、クロスドメインスクリプトまたはJSONPリクエストに対してグローバルイベントが発生することはありません&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e286a3fadf3605299e908d967349e6755901ddd" translate="yes" xml:space="preserve">
          <source>These properties are associated with the global jQuery object.</source>
          <target state="translated">これらのプロパティは、グローバル jQuery オブジェクトに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="646e8206dbfc5befa834843d4e6c16f08a90de6b" translate="yes" xml:space="preserve">
          <source>They are form elements with &lt;code&gt;type=&quot;hidden&quot;&lt;/code&gt;.</source>
          <target state="translated">これらは &lt;code&gt;type=&quot;hidden&quot;&lt;/code&gt; のフォーム要素です。</target>
        </trans-unit>
        <trans-unit id="6d3a2f20c508cd89d045ae0802bb6d4d4855106f" translate="yes" xml:space="preserve">
          <source>They have a CSS &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">CSSの &lt;code&gt;display&lt;/code&gt; 値は &lt;code&gt;none&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="76e00a420ece6eeb2a7c52a9b7fe06713897dd16" translate="yes" xml:space="preserve">
          <source>This API is &lt;code&gt;deprecated&lt;/code&gt; as of jQuery 1.7 and &lt;code&gt;removed&lt;/code&gt; as of jQuery 1.8; please use &lt;a href=&quot;deferred.state&quot;&gt;&lt;code&gt;deferred.state()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">このAPIはjQuery 1.7で &lt;code&gt;deprecated&lt;/code&gt; 、jQuery 1.8で &lt;code&gt;removed&lt;/code&gt; れました。代わりに&lt;a href=&quot;deferred.state&quot;&gt; &lt;code&gt;deferred.state()&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="98f1d9eeba8b49c650019ed75b666fd267d8086c" translate="yes" xml:space="preserve">
          <source>This alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator (&lt;code&gt;%&lt;/code&gt;) to select every item with an &lt;code&gt;index&lt;/code&gt; value that, when divided by 3, has a remainder of &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">このコードの変更により、3番目と6番目のリスト項目が強調表示されます。これは、モジュラス演算子（ &lt;code&gt;%&lt;/code&gt; ）を使用して、3で割ったときに余りが &lt;code&gt;2&lt;/code&gt; である &lt;code&gt;index&lt;/code&gt; 値を持つすべての項目を選択するためです。</target>
        </trans-unit>
        <trans-unit id="d51b3db33fc47e6a544f2294c10f27126554ddf1" translate="yes" xml:space="preserve">
          <source>This behavior is expected. &lt;strong&gt;As of jQuery 1.9.0&lt;/strong&gt; (and unless using the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate plugin&lt;/a&gt;), &lt;code&gt;jQuery()&lt;/code&gt; requires the HTML string to start with a &lt;code&gt;&amp;lt;&lt;/code&gt; (i.e text nodes cannot appear at the front of the HTML string).</source>
          <target state="translated">この動作は予期されたものです。&lt;strong&gt;jQuery 1.9.0以降&lt;/strong&gt;（および&lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrateプラグイン&lt;/a&gt;を使用しない限り）、 &lt;code&gt;jQuery()&lt;/code&gt; ではHTML文字列が &lt;code&gt;&amp;lt;&lt;/code&gt; で始まる必要があります（つまり、テキストノードはHTML文字列の前に表示できません）。</target>
        </trans-unit>
        <trans-unit id="4724d0febf83f4df758178179a0cf1d84270ce5e" translate="yes" xml:space="preserve">
          <source>This can then be used by parts of your application to publish and subscribe to events of interest quite easily:</source>
          <target state="translated">これをアプリケーションの一部で使用して、興味のあるイベントを簡単に公開したり、購読したりすることができます。</target>
        </trans-unit>
        <trans-unit id="759df6494bc16039dfa401cc721d60dc40be0bc2" translate="yes" xml:space="preserve">
          <source>This causes all of them to be replaced:</source>
          <target state="translated">これにより、全てが入れ替わってしまいます。</target>
        </trans-unit>
        <trans-unit id="1d9b72538af379ba557b38c88c4d6e1965c43267" translate="yes" xml:space="preserve">
          <source>This chain searches for items with the class &lt;code&gt;foo&lt;/code&gt; within the first list only and turns their backgrounds red. Then &lt;code&gt;end()&lt;/code&gt; returns the object to its state before the call to &lt;code&gt;find()&lt;/code&gt;, so the second &lt;code&gt;find()&lt;/code&gt; looks for '.bar' inside &lt;code&gt;&amp;lt;ul class=&quot;first&quot;&amp;gt;&lt;/code&gt;, not just inside that list's &lt;code&gt;&amp;lt;li class=&quot;foo&quot;&amp;gt;&lt;/code&gt;, and turns the matching elements' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.</source>
          <target state="translated">このチェーンは、最初のリスト内のみでクラスが &lt;code&gt;foo&lt;/code&gt; のアイテムを検索し、その背景を赤にします。次に、 &lt;code&gt;end()&lt;/code&gt; はオブジェクトを &lt;code&gt;find()&lt;/code&gt; の呼び出し前の状態に戻すため、2番目の &lt;code&gt;find()&lt;/code&gt; は、リストの &lt;code&gt;&amp;lt;li class=&quot;foo&quot;&amp;gt;&lt;/code&gt; 内だけでなく、 &lt;code&gt;&amp;lt;ul class=&quot;first&quot;&amp;gt;&lt;/code&gt; 内で '.bar'を検索しますfoo &quot;&amp;gt;、そして一致する要素の背景を緑にします。最終的な結果として、最初のリストのアイテム1と3の背景は色付きになり、2番目のリストのアイテムにはありません。</target>
        </trans-unit>
        <trans-unit id="e5434cf43bec6b10cb2d62ec811119dfe5ec76fc" translate="yes" xml:space="preserve">
          <source>This code first retrieves the contents of &lt;code&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt; and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the &lt;a href=&quot;https://developer.mozilla.org/docs/en/DOM/Node.nodeType&quot;&gt;&lt;code&gt;.nodeType&lt;/code&gt; property&lt;/a&gt; of the element. This DOM property holds a numeric code indicating the node's type; text nodes use the code 3. The contents are again filtered, this time for &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; elements, and these elements are removed.</source>
          <target state="translated">このコードは、最初に &lt;code&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt; のコンテンツを取得してから、段落タグで囲まれたテキストノードをフィルター処理します。これは、要素の&lt;a href=&quot;https://developer.mozilla.org/docs/en/DOM/Node.nodeType&quot;&gt; &lt;code&gt;.nodeType&lt;/code&gt; プロパティ&lt;/a&gt;をテストすることによって行われます。このDOMプロパティは、ノードのタイプを示す数値コードを保持します。テキストノードはコード3を使用します。コンテンツは再度フィルタリングされますが、今回は &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 要素に対して行われ、これらの要素は削除されます。</target>
        </trans-unit>
        <trans-unit id="63d36dce5d277ad627544d533e1ccbe9b3be2c55" translate="yes" xml:space="preserve">
          <source>This code will alter the first list item only, as it contains exactly one &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag. Within the filter function, &lt;code&gt;this&lt;/code&gt; refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.</source>
          <target state="translated">このコードは、 &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; タグを1つだけ含んでいるため、最初のリスト項目のみを変更します。フィルター関数内では、 &lt;code&gt;this&lt;/code&gt; は各DOM要素を順番に参照します。関数に渡されるパラメーターは、jQueryオブジェクトに一致するセット内のそのDOM要素のインデックスを示します。</target>
        </trans-unit>
        <trans-unit id="21f659be994ef4d8b978b3f4fb6ebf487ff90758" translate="yes" xml:space="preserve">
          <source>This code will cause the element with an ID of &lt;code&gt;foo&lt;/code&gt; to respond to the &lt;code&gt;click&lt;/code&gt; event. When a user clicks inside this element thereafter, the alert will be shown.</source>
          <target state="translated">このコードにより、IDが &lt;code&gt;foo&lt;/code&gt; の要素が &lt;code&gt;click&lt;/code&gt; イベントに応答します。その後、ユーザーがこの要素内をクリックすると、アラートが表示されます。</target>
        </trans-unit>
        <trans-unit id="9779a0bbf174d5713472f1da50aba3ef40e7aa3a" translate="yes" xml:space="preserve">
          <source>This difference in behavior between &lt;code&gt;$( &quot;:text&quot; )&lt;/code&gt; and &lt;code&gt;$( &quot;[type=text]&quot; )&lt;/code&gt;, can be seen below:</source>
          <target state="translated">&lt;code&gt;$( &quot;:text&quot; )&lt;/code&gt; と &lt;code&gt;$( &quot;[type=text]&quot; )&lt;/code&gt; 動作のこの違いは、以下のようになります：</target>
        </trans-unit>
        <trans-unit id="6ad2fb9697b7b6107b3b4e5ec78fe97d5dd681be" translate="yes" xml:space="preserve">
          <source>This event behaves the same as the complete event and will be triggered every time an Ajax request finishes.</source>
          <target state="translated">このイベントは complete イベントと同じように動作し、Ajax リクエストが終了するたびにトリガーされます。</target>
        </trans-unit>
        <trans-unit id="86b7a0fb40d5a08c286f9ff0d205c5d4c063ac8a" translate="yes" xml:space="preserve">
          <source>This event is also only called if the request was successful.</source>
          <target state="translated">このイベントはリクエストが成功した場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6e4ad8a56d7bcd30bea7ca58205cb27a97657804" translate="yes" xml:space="preserve">
          <source>This event is available so that scripts can perform cleanup when the user leaves the page. Most browsers will ignore calls to &lt;code&gt;alert()&lt;/code&gt;, &lt;code&gt;confirm()&lt;/code&gt; and &lt;code&gt;prompt()&lt;/code&gt; inside the event handler. The string you return may be used in a confirmation dialog, but not all browsers support this. It is not possible to cancel the &lt;code&gt;unload&lt;/code&gt; event with &lt;code&gt;.preventDefault()&lt;/code&gt;.</source>
          <target state="translated">このイベントは、ユーザーがページを離れたときにスクリプトがクリーンアップを実行できるようにするために使用できます。ほとんどのブラウザは、イベントハンドラ内の &lt;code&gt;alert()&lt;/code&gt; 、 &lt;code&gt;confirm()&lt;/code&gt; 、および &lt;code&gt;prompt()&lt;/code&gt; の呼び出しを無視します。返された文字列は確認ダイアログで使用できますが、すべてのブラウザがこれをサポートしているわけではありません。 &lt;code&gt;.preventDefault()&lt;/code&gt; を使用して &lt;code&gt;unload&lt;/code&gt; イベントをキャンセルすることはできません。</target>
        </trans-unit>
        <trans-unit id="d2bef78d980d6837983d17a683822d89d8fd86d9" translate="yes" xml:space="preserve">
          <source>This event is called regardless of if the request was successful, or not. You will always receive a complete callback, even for synchronous requests.</source>
          <target state="translated">このイベントは、リクエストが成功したかどうかに関係なく呼び出されます。同期リクエストの場合でも、常に完全なコールバックを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="bc5a1a9dcb7987f22cab7aa53e522431522d89c3" translate="yes" xml:space="preserve">
          <source>This event is only called if an error occurred with the request (you can never have both an error and a success callback with a request).</source>
          <target state="translated">このイベントは、リクエストでエラーが発生した場合にのみ呼び出されます (リクエストでエラーと成功の両方のコールバックを持つことはできません)。</target>
        </trans-unit>
        <trans-unit id="afae7d93c59f37ce631ca4f57c312d014cc82583" translate="yes" xml:space="preserve">
          <source>This event is only called if the request was successful (no errors from the server, no errors with the data).</source>
          <target state="translated">このイベントは、リクエストが成功した場合にのみ呼び出されます(サーバからのエラーがなく、データのエラーもありません)。</target>
        </trans-unit>
        <trans-unit id="48bbba3ab6f8d076f052cc031a6e20283275fed7" translate="yes" xml:space="preserve">
          <source>This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.</source>
          <target state="translated">このイベントは、主にプライマリボタンがドラッグ操作の開始に使用されたことを確認するのに便利です。無視すると、ユーザーがコンテキストメニューを使用しようとしたときに奇妙な結果が発生する可能性があります。中ボタンと右ボタンは、これらのプロパティで検出することができますが、これは信頼性がありません。例えば、OperaやSafariでは、マウスの右ボタンのクリックはデフォルトでは検出できません。</target>
        </trans-unit>
        <trans-unit id="683d1abf76fd5c3a88d0f22a26284cfa337c9fee" translate="yes" xml:space="preserve">
          <source>This event is triggered if an Ajax request is started and no other Ajax requests are currently running.</source>
          <target state="translated">このイベントは、Ajax リクエストが開始され、他の Ajax リクエストが現在実行されていない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="ac253698b4acfcb5905a2aa79e449ffacacdffda" translate="yes" xml:space="preserve">
          <source>This event method is described in the &lt;a href=&quot;https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped&quot;&gt;W3C DOM Level 3 specification&lt;/a&gt;.</source>
          <target state="translated">このイベントメソッドは、&lt;a href=&quot;https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped&quot;&gt;W3C DOM Level 3仕様で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="69465beb0b30a5a3694e6ad878fdce06864dca13" translate="yes" xml:space="preserve">
          <source>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the</source>
          <target state="translated">このイベントタイプは、イベントバブリングによって多くの頭痛の種になることがあります。例えば、マウスポインタが</target>
        </trans-unit>
        <trans-unit id="db381105282fc06aa6e1dc99496275fd5171657d" translate="yes" xml:space="preserve">
          <source>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the</source>
          <target state="translated">このイベントタイプは、イベントバブリングによって多くの頭痛の種になることがあります。例えば、マウスポインタが</target>
        </trans-unit>
        <trans-unit id="dc4d6bfc67551f643882201c85a8addaea0b978f" translate="yes" xml:space="preserve">
          <source>This event will likely be used together with the &lt;a href=&quot;focusin&quot;&gt;focusin&lt;/a&gt; event.</source>
          <target state="translated">このイベントは、&lt;a href=&quot;focusin&quot;&gt;focusin&lt;/a&gt;イベントと一緒に使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f361a07dcfc38de754ec576d34637ea20d8dd245" translate="yes" xml:space="preserve">
          <source>This event will likely be used together with the &lt;a href=&quot;focusout&quot;&gt;focusout&lt;/a&gt; event.</source>
          <target state="translated">このイベントは、&lt;a href=&quot;focusout&quot;&gt;focusout&lt;/a&gt;イベントと一緒に使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b981a320ef7be0421529dedac14943e840100a6a" translate="yes" xml:space="preserve">
          <source>This event, which is triggered before an Ajax request is started, allows you to modify the XMLHttpRequest object (setting additional headers, if need be.)</source>
          <target state="translated">このイベントは Ajax リクエストが開始される前にトリガーされ、XMLHttpRequest オブジェクトを変更することができます (必要に応じて追加のヘッダを設定します)。</target>
        </trans-unit>
        <trans-unit id="649a216d21a666f54f90151e9ba0e11a69914df4" translate="yes" xml:space="preserve">
          <source>This example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the &lt;code&gt;this&lt;/code&gt; keyword as a bare DOM element, the element must be passed to the &lt;code&gt;$()&lt;/code&gt; function before applying jQuery methods to it.</source>
          <target state="translated">この例では、要素をクリックするとスライドアニメーションで非表示になります。ハンドラーは &lt;code&gt;this&lt;/code&gt; キーワードでクリックされた項目をベアDOM要素として受け取るため、jQueryメソッドを適用する前に、要素を &lt;code&gt;$()&lt;/code&gt; 関数に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="a7fd0c4dc67ac419ff430abce7fa9695943e63d3" translate="yes" xml:space="preserve">
          <source>This example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.</source>
          <target state="translated">この例では、選択された要素が、クローン化されるのではなく、古い位置から移動されることでターゲットを置き換えることを示しています。</target>
        </trans-unit>
        <trans-unit id="63bb26e5bf5293094a86ba3a3d38220ddafd7b42" translate="yes" xml:space="preserve">
          <source>This example fetches the requested HTML snippet and inserts it on the page.</source>
          <target state="translated">この例では、要求された HTML スニペットを取得し、ページに挿入します。</target>
        </trans-unit>
        <trans-unit id="e966acc2b9894ee5016653b5a8190f3e9cb6a381" translate="yes" xml:space="preserve">
          <source>This example inserts a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; after each paragraph, with each new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containing the class name(s) of its preceding paragraph.</source>
          <target state="translated">この例では、各段落の後に &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; を挿入し、新しい &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; にはそれぞれ前の段落のクラス名が含まれています。</target>
        </trans-unit>
        <trans-unit id="1031242a2fd44b0cc801511ac728f2d8b61935d3" translate="yes" xml:space="preserve">
          <source>This example removes leading and trailing whitespace from the values of text inputs with a &quot;tags&quot; class.</source>
          <target state="translated">この例では、&quot;tags&quot; クラスを持つテキスト入力の値から、先頭と末尾の空白を削除します。</target>
        </trans-unit>
        <trans-unit id="5ebd20fb5abf5bd7afa36f2ff3c0dfa8a59e2351" translate="yes" xml:space="preserve">
          <source>This example removes the class name of the penultimate &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; from the last &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">この例では、最後から二番目のクラス名削除 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 最後から &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c27e778fa0bccd68397de1040064cb8b4a36924" translate="yes" xml:space="preserve">
          <source>This example sets the widths of the matched elements to incrementally larger values.</source>
          <target state="translated">この例では、一致した要素の幅を少しずつ大きな値に設定しています。</target>
        </trans-unit>
        <trans-unit id="da29dc6937adf3fba6bebcf394120d5ad06ad979" translate="yes" xml:space="preserve">
          <source>This example will toggle the &lt;code&gt;happy&lt;/code&gt; class for &lt;code&gt;&amp;lt;div class=&quot;foo&quot;&amp;gt;&lt;/code&gt; elements if their parent element has a class of &lt;code&gt;bar&lt;/code&gt;; otherwise, it will toggle the &lt;code&gt;sad&lt;/code&gt; class.</source>
          <target state="translated">この例では、親要素のクラスが &lt;code&gt;bar&lt;/code&gt; の場合、 &lt;code&gt;&amp;lt;div class=&quot;foo&quot;&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;happy&lt;/code&gt; クラスを切り替えます。それ以外の場合は、 &lt;code&gt;sad&lt;/code&gt; クラスを切り替えます。</target>
        </trans-unit>
        <trans-unit id="d9c3c9f7cf4f3c5da5a6ac47e18ae304f904858d" translate="yes" xml:space="preserve">
          <source>This example, of course, relies on the structure of the JSON file:</source>
          <target state="translated">この例では、もちろんJSONファイルの構造に依存しています。</target>
        </trans-unit>
        <trans-unit id="a6c772a7fd8f0bccb3ffa2b41a260d712d32edc5" translate="yes" xml:space="preserve">
          <source>This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.</source>
          <target state="translated">この例では、オプションを使用せずに、現在のページの内容を読み込みますが、結果は何もしません。結果を使用するには、コールバック関数のいずれかを実装します。</target>
        </trans-unit>
        <trans-unit id="fad7424a11380e496109bffc09072049878d17ef" translate="yes" xml:space="preserve">
          <source>This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).</source>
          <target state="translated">レスポンスの Content-Type とデータ型が厳密に一対一の対応をとることはないので、この追加オブジェクトは必要です (そのため正規表現)。</target>
        </trans-unit>
        <trans-unit id="36c0eb7eb7be94f02195c75311b38633e1e5f915" translate="yes" xml:space="preserve">
          <source>This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.</source>
          <target state="translated">この機能は、アニメーションメソッドでコールバック関数を提供するのと似ていますが、アニメーション実行時にコールバックを与える必要はありません。</target>
        </trans-unit>
        <trans-unit id="1a7aff5a0e4a3efea14d5040037b7f596cdecddc" translate="yes" xml:space="preserve">
          <source>This function behaves just like &lt;code&gt;$( document ).ready()&lt;/code&gt;, in that it should be used to wrap other &lt;code&gt;$()&lt;/code&gt; operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.</source>
          <target state="translated">この関数は、準備ができているDOMに依存するページの他の &lt;code&gt;$()&lt;/code&gt; 操作をラップするために使用する必要があるという点で、 &lt;code&gt;$( document ).ready()&lt;/code&gt; と同じように動作します。この関数は技術的には連鎖可能ですが、実際にはそれに対して連鎖することはあまりありません。</target>
        </trans-unit>
        <trans-unit id="ab860837486fd3491fc07a9d2477348f5eeffea1" translate="yes" xml:space="preserve">
          <source>This function can also be overwritten in order to bypass certain edge case issues. The default &lt;code&gt;htmlPrefilter&lt;/code&gt; function in jQuery leaves input unmodified since 3.5.0. Older versions would greedily ensure that all tags were XHTML-compliant. This included anything that looked like an HTML tag, but was actually within a string (e.g. &lt;code&gt;&amp;lt;a title=&quot;&amp;lt;div /&amp;gt;&quot;&amp;gt;&amp;lt;&amp;gt;&lt;/code&gt;), leading to potential security issues. For more information, see the &lt;a href=&quot;https://jquery.com/upgrade-guide/3.5/&quot;&gt;jQuery Core 3.5 Upgrade guide&lt;/a&gt;.</source>
          <target state="translated">この関数は、特定のエッジケースの問題を回避するために上書きすることもできます。jQueryのデフォルトの &lt;code&gt;htmlPrefilter&lt;/code&gt; 関数は、3.5.0以降入力を変更しないままにします。古いバージョンでは、すべてのタグがXHTMLに準拠していることが貪欲に保証されます。これには、HTMLタグのように見えたものの、実際には文字列内にあるもの（ &lt;code&gt;&amp;lt;a title=&quot;&amp;lt;div /&amp;gt;&quot;&amp;gt;&amp;lt;&amp;gt;&lt;/code&gt; など）が含まれ、潜在的なセキュリティ問題が発生していました。詳細については、&lt;a href=&quot;https://jquery.com/upgrade-guide/3.5/&quot;&gt;jQuery Core3.5アップグレードガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b46b4646df466700b53a938d86b6af892cceff75" translate="yes" xml:space="preserve">
          <source>This function can also be overwritten in order to bypass certain edge case issues. The default &lt;code&gt;htmlPrefilter&lt;/code&gt; function in jQuery will greedily ensure that all tags are XHTML-compliant. This includes anything that looks like an HTML tag, but is actually within a string (e.g.</source>
          <target state="translated">この関数は、特定のエッジケースの問題を回避するために上書きすることもできます。jQuery のデフォルトの &lt;code&gt;htmlPrefilter&lt;/code&gt; 関数は、すべてのタグがXHTMLに準拠していることを貪欲に保証します。これには、HTMLタグのように見えても、実際には文字列内にあるものが含まれます（例：</target>
        </trans-unit>
        <trans-unit id="8c4ef947f6f8032dee19f1cbd99e7e0445c77b07" translate="yes" xml:space="preserve">
          <source>This function is used internally to convert form element values into a serialized string representation (See &lt;a href=&quot;serialize&quot;&gt;.serialize()&lt;/a&gt; for more information).</source>
          <target state="translated">この関数は、フォーム要素の値をシリアル化された文字列表現に変換するために内部的に使用されます（詳細については、&lt;a href=&quot;serialize&quot;&gt;.serialize（）&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="f453c13c3e0328f2dfba47020639f6aaa2044325" translate="yes" xml:space="preserve">
          <source>This global event behaves the same as the local error event.</source>
          <target state="translated">このグローバルイベントは、ローカルのエラーイベントと同じ動作をします。</target>
        </trans-unit>
        <trans-unit id="97d93efb8c0c02bc751d2f0c9c622fbf4ecc7ac0" translate="yes" xml:space="preserve">
          <source>This global event is also triggered before the request is run.</source>
          <target state="translated">このグローバルイベントは、リクエストが実行される前にもトリガされます。</target>
        </trans-unit>
        <trans-unit id="655d42a2d71779ddaf2a047b8bc2718ffee0c8b2" translate="yes" xml:space="preserve">
          <source>This global event is triggered if there are no more Ajax requests being processed.</source>
          <target state="translated">このグローバルイベントは、処理中の Ajax リクエストがなくなった場合に発生します。</target>
        </trans-unit>
        <trans-unit id="2f4d3cd0607d268ab25fdd9533e70fde597ea7b3" translate="yes" xml:space="preserve">
          <source>This indicates that the method doesn't only expect an array as the argument, but also specifies the expected type. The notation is borrowed from Java 5's generics notation (or C++ templates).</source>
          <target state="translated">これは、メソッドが引数として配列を期待するだけでなく、期待される型も指定していることを示しています。この表記法は、Java 5のジェネリックス表記法(またはC++テンプレート)から借用しています。</target>
        </trans-unit>
        <trans-unit id="690aa83531b52434d818b32c2f03950ce6592a66" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings.</source>
          <target state="translated">セレクターがどのように動くのか、文字列を変えて見る遊びです。</target>
        </trans-unit>
        <trans-unit id="82bfa1ac349f897daa07f3e0c0d021d6694748b9" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings. Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one. The :nth-child, however, counts the index of the child to its particular parent. In any case, it's easier to see than explain so...</source>
          <target state="translated">これは、異なる文字列でセレクタがどのように動作するかを見るための遊び場です。これは、親を考慮せず、要素のリストを他の要素にフィルタリングするだけの :even や :odd とは異なることに注意してください。しかし、 :nth-child は、その子の特定の親に対するインデックスをカウントします。いずれにしても、説明するよりも見た方がわかりやすいので...。</target>
        </trans-unit>
        <trans-unit id="43d06d5d256cc91fbf210ed9e483af8fa7cb9e74" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings. Notice that this is different from the &lt;a href=&quot;even&quot;&gt;&lt;code&gt;even&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;odd&quot;&gt;&lt;code&gt;odd&lt;/code&gt;&lt;/a&gt; which have no regard for parent and just filter the list of elements to every other one. The :nth-child, however, counts the index of the child to its particular parent. In any case, it's easier to see than explain so...</source>
          <target state="translated">これは、セレクターがさまざまな文字列でどのように機能するかを確認するための遊び場です。これは異なっていることに注意してください&lt;a href=&quot;even&quot;&gt; &lt;code&gt;even&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;odd&quot;&gt; &lt;code&gt;odd&lt;/code&gt; &lt;/a&gt;親のための点を持っていないし、ただ一つおきに要素のリストをフィルタリングしています。ただし、：nth-​​childは、特定の親に対する子のインデックスをカウントします。いずれにせよ、説明するよりも見やすいです...</target>
        </trans-unit>
        <trans-unit id="be73f0898db1025d1eedc1b55421499324460238" translate="yes" xml:space="preserve">
          <source>This is a shorthand Ajax function, which is equivalent to:</source>
          <target state="translated">これはAjaxの略式関数で、これに相当します。</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="e864657858a9303070a1658a53bf25dbea41192a" translate="yes" xml:space="preserve">
          <source>This is the full list of Ajax events, and in the order in which they are triggered. The indented events are triggered for each and every Ajax request (unless a global option has been set). The ajaxStart and ajaxStop events are events that relate to all Ajax requests together.</source>
          <target state="translated">これは、Ajax イベントの完全なリストと、それらがトリガーされる順番です。字下げされたイベントは、それぞれの Ajax リクエストに対してトリガーされます (グローバルオプションが設定されていない限り)。ajaxStart と ajaxStop イベントは、すべての Ajax リクエストに一緒に関連するイベントです。</target>
        </trans-unit>
        <trans-unit id="75a40fffbd7637ae6cad737c5a222f44e502a6d4" translate="yes" xml:space="preserve">
          <source>This is the inverse of &lt;code&gt;:empty&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;:empty&lt;/code&gt; の逆です。</target>
        </trans-unit>
        <trans-unit id="1afd13e46be54f353d75a53266cc19dfc2f2a79e" translate="yes" xml:space="preserve">
          <source>This is the inverse of &lt;code&gt;:parent&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;:parent&lt;/code&gt; の逆です。</target>
        </trans-unit>
        <trans-unit id="f6a24b37da84f50293523975f12e3e02b00fdf99" translate="yes" xml:space="preserve">
          <source>This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=&quot;word&quot;]), which is more appropriate in many cases.</source>
          <target state="translated">これは、値に対してマッチする jQuery 属性セレクタの中で最も寛大なものです。このセレクタの文字列が要素の属性値内の任意の場所に現れた場合、要素が選択されます。このセレクタを、Attribute Contains Word セレクタ (例:[attr~=&quot;word&quot;)と比較してみてください。</target>
        </trans-unit>
        <trans-unit id="d9da68639be63e4e887067e82cda70e44e59b905" translate="yes" xml:space="preserve">
          <source>This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).</source>
          <target state="translated">これは、ブラウザのウィンドウ(現在のウィンドウやiframeなど)に対して操作しているかどうかを判断するために、jQueryの多くの場所で使用されています。</target>
        </trans-unit>
        <trans-unit id="f08b6ce82deda11c3f60b7deafa153420ae2161b" translate="yes" xml:space="preserve">
          <source>This is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like &lt;code&gt;jQuery.noop&lt;/code&gt; could execute.</source>
          <target state="translated">これは、オプションのコールバックを提供するプラグイン作成者に役立ちます。コールバックが指定されていない場合は、 &lt;code&gt;jQuery.noop&lt;/code&gt; などが実行されます。</target>
        </trans-unit>
        <trans-unit id="44d812d14581ba0c1674dc38a60217df13c4f84f" translate="yes" xml:space="preserve">
          <source>This is usually the desired sequence before taking an action. If this is not required, the &lt;code&gt;mousedown&lt;/code&gt; or &lt;code&gt;mouseup&lt;/code&gt; event may be more suitable.</source>
          <target state="translated">これは通常、アクションを実行する前の望ましいシーケンスです。これが必要ない場合は、 &lt;code&gt;mousedown&lt;/code&gt; または &lt;code&gt;mouseup&lt;/code&gt; イベントの方が適している場合があります。</target>
        </trans-unit>
        <trans-unit id="4c3d57f2d941e7b5d42230477fec9cf8433d9503" translate="yes" xml:space="preserve">
          <source>This method behaves differently from using a normal JavaScript &lt;code&gt;eval()&lt;/code&gt; in that it's executed within the global context (which is important for loading external scripts dynamically).</source>
          <target state="translated">このメソッドは、グローバルコンテキスト内で実行されるという点で、通常のJavaScript &lt;code&gt;eval()&lt;/code&gt; を使用する場合とは異なる動作をします（外部スクリプトを動的にロードするために重要です）。</target>
        </trans-unit>
        <trans-unit id="7055b8d61d1b481dd833dfd2669a99e44ee927e0" translate="yes" xml:space="preserve">
          <source>This method can act on a jQuery object that has selected individual form controls, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, it is typically easier to select the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element itself for serialization:</source>
          <target state="translated">このメソッドは、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; などの個別のフォームコントロールを選択したjQueryオブジェクトに作用できます。ただし、通常はシリアル化のために &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素自体を選択する方が簡単です。</target>
        </trans-unit>
        <trans-unit id="5b38d3c48bdcbca3659c53e58607a9cf7dccaf8c" translate="yes" xml:space="preserve">
          <source>This method does not accept any arguments.</source>
          <target state="translated">このメソッドは引数を受け付けません。</target>
        </trans-unit>
        <trans-unit id="bfb451eae6e159d41053c63c7ab0de01084ab951" translate="yes" xml:space="preserve">
          <source>This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.</source>
          <target state="translated">このメソッドは主に、これをオーバーライドしてエラーメッセージのより良い表示(またはより多くの情報)を提供したいプラグイン開発者のために存在します。</target>
        </trans-unit>
        <trans-unit id="062bd2d7d515033788955331f2b4e1a92f7c2a23" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;blur&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;blur&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;blur&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;blur&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="346692c9809684c46a877bfaa5170a427dd16e78" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;change&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;change&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="a0650bd2ed2e304aeb035f14a80cc4104b12697c" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;click&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;click&quot; )&lt;/code&gt; in the third. The &lt;code&gt;click&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;click&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;click&quot; )&lt;/code&gt; ショートカットです。 &lt;code&gt;click&lt;/code&gt; イベントは、マウスポインタが要素の上にあるときの要素に送信され、マウスボタンが押され、解放されます。すべてのHTML要素がこのイベントを受け取ることができます。たとえば、HTMLについて考えます。</target>
        </trans-unit>
        <trans-unit id="0db2428740ed667f182f8512b88eb604bda1c58a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;contextmenu&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;contextmenu&quot; )&lt;/code&gt; in the third. The &lt;code&gt;contextmenu&lt;/code&gt; event is sent to an element when the right button of the mouse is clicked on it, but before the context menu is displayed. In case the context menu key is pressed, the event is triggered on the &lt;code&gt;html&lt;/code&gt; element or the currently focused element. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;contextmenu&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;contextmenu&quot; )&lt;/code&gt; です。 &lt;code&gt;contextmenu&lt;/code&gt; イベントは、マウスの右ボタンがクリックされた要素に送られますが、コンテキストメニューが表示される前に。コンテキストメニューキーが押された場合、イベントは &lt;code&gt;html&lt;/code&gt; 要素または現在フォーカスされている要素でトリガーされます。すべてのHTML要素がこのイベントを受け取ることができます。たとえば、HTMLについて考えます。</target>
        </trans-unit>
        <trans-unit id="e874b85d8b87e616d9b2b3e78468b8b1469b0d74" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;dblclick&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;dblclick&quot; )&lt;/code&gt; in the third. The &lt;code&gt;dblclick&lt;/code&gt; event is sent to an element when the element is double-clicked. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;dblclick&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;dblclick&quot; )&lt;/code&gt; です。 &lt;code&gt;dblclick&lt;/code&gt; 要素がダブルクリックされたときにイベントが要素に送られます。すべてのHTML要素がこのイベントを受け取ることができます。たとえば、HTMLについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="d13a26a73fa8a32f0b6c96afe45e01dbb8b531da" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;error&quot;, handler )&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;.on( &quot;error&quot;, handler )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="55194cb606a3bf92352bb24a102c067fe1a4f76f" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focus&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;focus&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、1番目と2番目のバリエーションでは &lt;code&gt;.on( &quot;focus&quot;, handler )&lt;/code&gt; 、3番目のバリエーションでは &lt;code&gt;.trigger( &quot;focus&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a78fa95a3c99515fe9ba77f8210bf088d3ad80ab" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focusin&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;focusin&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;focusin&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;focusin&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2f404e361904d188974da0d867762f2b8f5bbf1a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focusout&quot;, handler )&lt;/code&gt; when passed arguments, and &lt;code&gt;.trigger( &quot;focusout&quot; )&lt;/code&gt; when no arguments are passed.</source>
          <target state="translated">このメソッドは、引数が渡された場合は &lt;code&gt;.on( &quot;focusout&quot;, handler )&lt;/code&gt; 、引数が渡されなかった場合は &lt;code&gt;.trigger( &quot;focusout&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="41f8feb54d90484574c64e3baf7695ac56d76f6a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keydown&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;keydown&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、1番目と2番目のバリエーションでは &lt;code&gt;.on( &quot;keydown&quot;, handler )&lt;/code&gt; 、3番目のバリエーションでは &lt;code&gt;.trigger( &quot;keydown&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5ea90d8a612eae07733cb9a953095aece3559d80" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keypress&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;keypress&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;keypress&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;keypress&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="4829b0add7a93cf88eb293c411bb411f3ef1e117" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keyup&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;keyup&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;keyup&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;keyup&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4f33dc4654f9529dd8f001a910b09881e9c49b82" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;load&quot;, handler )&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;.on( &quot;load&quot;, handler )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="bd6a5b08c80b8fd5752389522a110b3d911a2b5b" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mousedown&quot;, handler)&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger( &quot;mousedown&quot; )&lt;/code&gt; in the second.</source>
          <target state="translated">このメソッドは、最初のバリエーションでは &lt;code&gt;.on( &quot;mousedown&quot;, handler)&lt;/code&gt; ショートカットであり、2番目のバリエーションでは &lt;code&gt;.trigger( &quot;mousedown&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="69b00c787b7cc1a27054d6f09f61eb7db1b27df3" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseenter&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mouseenter&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;mouseenter&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;mouseenter&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f69e7b7e84c1d679e65f225b8bbcf922a7b63987" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mousemove&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mousemove&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;mousemove&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;mousemove&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="06b06641034cabafc7c3a89771b3bfb178535b20" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseout&quot;, handler )&lt;/code&gt; in the first two variation, and &lt;code&gt;.trigger( &quot;mouseout&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;mouseout&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;mouseout&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="c031239c05a4d2d7c8f7763e0c4dce22389771b5" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseover&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mouseover&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;mouseover&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;mouseover&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="b6154672016dd082ac86d67cedc849e56ba90b30" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;scroll&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;scroll&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、1番目と2番目のバリエーションでは &lt;code&gt;.on( &quot;scroll&quot;, handler )&lt;/code&gt; 、3番目のバリエーションでは &lt;code&gt;.trigger( &quot;scroll&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5e74519010db55b24d2b383da7d044d1a8289229" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;select&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;select&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on( &quot;select&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;select&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="0d345de59a7eaf1933e66da1db69440e5868a3db" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;submit&quot;, handler )&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger( &quot;submit&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初のバリエーションでは &lt;code&gt;.on( &quot;submit&quot;, handler )&lt;/code&gt; 、3つ目のバリエーションでは &lt;code&gt;.trigger( &quot;submit&quot; )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="1eb9dc7288639e70f49bacd03cacbfa56ac32283" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;unload&quot;, handler )&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;.on( &quot;unload&quot;, handler )&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="52ff3678157c22780a9cfc21b02b92dddc40ff36" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('mouseleave', handler)&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger('mouseleave')&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、最初の2つのバリエーションでは &lt;code&gt;.on('mouseleave', handler)&lt;/code&gt; ショートカットであり、3番目のバリエーションでは &lt;code&gt;.trigger('mouseleave')&lt;/code&gt; のショートカットです。</target>
        </trans-unit>
        <trans-unit id="c26ac53ee675f9addb362831a5d3f4fa59caa27a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('mouseup', handler)&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger('mouseup')&lt;/code&gt; in the second.</source>
          <target state="translated">このメソッドは、最初のバリエーションでは &lt;code&gt;.on('mouseup', handler)&lt;/code&gt; ショートカットであり、2番目のバリエーションでは &lt;code&gt;.trigger('mouseup')&lt;/code&gt; のショートカットです。</target>
        </trans-unit>
        <trans-unit id="c808514b87bd343496959e8c779b341d866fc82f" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('resize', handler)&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;resize&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">このメソッドは、1番目と2番目のバリエーションでは &lt;code&gt;.on('resize', handler)&lt;/code&gt; ショートカットであり、3 番目のバリエーションでは &lt;code&gt;.trigger( &quot;resize&quot; )&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="85bb24f782fa2a4858de19ce93437e137aa3340c" translate="yes" xml:space="preserve">
          <source>This method is also able to find the height of the window and document.</source>
          <target state="translated">この方法は、ウィンドウとドキュメントの高さを見つけることもできます。</target>
        </trans-unit>
        <trans-unit id="f2607253a7033781c403606df4eebe156180a466" translate="yes" xml:space="preserve">
          <source>This method is also able to find the width of the window and document.</source>
          <target state="translated">このメソッドは、ウィンドウやドキュメントの幅を見つけることもできます。</target>
        </trans-unit>
        <trans-unit id="cec9291828724747376d950545c6d540d08e366c" translate="yes" xml:space="preserve">
          <source>This method is fired when an error is thrown synchronously in a function wrapped in &lt;code&gt;jQuery()&lt;/code&gt; or &lt;code&gt;jQuery( document ).ready()&lt;/code&gt;, or equivalent. By default it re-throws the error in a timeout so that it's logged in the console and passed to &lt;code&gt;window.onerror&lt;/code&gt; instead of being swallowed. Overwrite this method if you want to handle such errors differently.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;jQuery()&lt;/code&gt; または &lt;code&gt;jQuery( document ).ready()&lt;/code&gt; 、または同等の関数でラップされた関数で同期的にエラーがスローされたときに発生します。デフォルトでは、エラーがタイムアウトで再スローされるため、コンソールに記録され、飲み込まれる代わりに &lt;code&gt;window.onerror&lt;/code&gt; に渡されます。このようなエラーを別の方法で処理する場合は、このメソッドを上書きしてください。</target>
        </trans-unit>
        <trans-unit id="0161551cba801aedb18b05604b3021306dc4d081" translate="yes" xml:space="preserve">
          <source>This method is meant for plugin developers who are creating new animation methods. Letting &lt;code&gt;$.speed()&lt;/code&gt; do all the parameter hockey and normalization for you, rather than duplicating the logic yourself, makes your work simpler. An example of use can be found in the animated form of &lt;code&gt;.addClass()&lt;/code&gt; of jQuery UI.</source>
          <target state="translated">このメソッドは、新しいアニメーションメソッドを作成するプラグイン開発者向けです。ロジックを自分で複製するのではなく、すべてのパラメーターホッケーと正規化を &lt;code&gt;$.speed()&lt;/code&gt; と、作業が簡単になります。使用例は、jQuery UIの &lt;code&gt;.addClass()&lt;/code&gt; のアニメーション形式にあります。</target>
        </trans-unit>
        <trans-unit id="be28d98cd2c7a67e6865551fa4b367a0630987b0" translate="yes" xml:space="preserve">
          <source>This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from &lt;code&gt;jQuery.proxy()&lt;/code&gt; it will still unbind the correct function if passed the original.</source>
          <target state="translated">このメソッドは、コンテキストが別のオブジェクトを指している要素にイベントハンドラーをアタッチする場合に最も役立ちます。さらに、jQueryは、 &lt;code&gt;jQuery.proxy()&lt;/code&gt; から返された関数をバインドした場合でも、元の関数が渡された場合は正しい関数のバインドを解除します。</target>
        </trans-unit>
        <trans-unit id="792159b794709664077d97cb3536c3cd14904a0d" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;window&lt;/code&gt; および &lt;code&gt;document&lt;/code&gt; オブジェクトには適用されません。これらの場合は、代わりに &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="ef15703808f5f2d053665850bfca24d04d1a2e24" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; instead. Although &lt;code&gt;.outerHeight()&lt;/code&gt; can be used on table elements, it may give unexpected results on tables using the &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS property.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;window&lt;/code&gt; および &lt;code&gt;document&lt;/code&gt; オブジェクトには適用されません。これらの場合は、代わりに &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; を使用してください。けれども &lt;code&gt;.outerHeight()&lt;/code&gt; テーブル要素で使用することができ、それが使用してテーブルの上に予期しない結果を与える可能性が &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSSプロパティを。</target>
        </trans-unit>
        <trans-unit id="829556cbe373a45b949053668c7a8cfa83ebe1b2" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;window&lt;/code&gt; および &lt;code&gt;document&lt;/code&gt; オブジェクトには適用されません。これらの場合は、代わりに &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="ba117f4e1229732c120748b2aca40b446fd60fb4" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; instead. Although &lt;code&gt;.outerWidth()&lt;/code&gt; can be used on table elements, it may give unexpected results on tables using the &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS property.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;window&lt;/code&gt; および &lt;code&gt;document&lt;/code&gt; オブジェクトには適用されません。これらの場合は、代わりに &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; を使用してください。けれども &lt;code&gt;.outerWidth()&lt;/code&gt; テーブル要素で使用することができ、それが使用してテーブルの上に予期しない結果を与える可能性が &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSSプロパティを。</target>
        </trans-unit>
        <trans-unit id="b303eebf0f43b27153ed68f23c0854debc8a5aa7" translate="yes" xml:space="preserve">
          <source>This method is not available on XML documents.</source>
          <target state="translated">このメソッドはXML文書では利用できません。</target>
        </trans-unit>
        <trans-unit id="02843289c06dc2a11b69cb325ed07cd3b9ece06f" translate="yes" xml:space="preserve">
          <source>This method is often used with &lt;code&gt;.addClass()&lt;/code&gt; to switch elements' classes from one to another, like so:</source>
          <target state="translated">このメソッドは、要素のクラスを別のクラスに切り替えるために &lt;code&gt;.addClass()&lt;/code&gt; とともによく使用されます。</target>
        </trans-unit>
        <trans-unit id="a3a5be0658971b62f855cbbcb5c4bc8dcf2d8b61" translate="yes" xml:space="preserve">
          <source>This method is often used with &lt;code&gt;.removeClass()&lt;/code&gt; to switch elements' classes from one to another, like so:</source>
          <target state="translated">このメソッドはしばしば &lt;code&gt;.removeClass()&lt;/code&gt; と共に使用され、要素のクラスを次のように切り替えます。</target>
        </trans-unit>
        <trans-unit id="a33c880bf752394d0bef47af6df6b9420072d808" translate="yes" xml:space="preserve">
          <source>This method is primarily useful for debugging to determine, for example, whether a Deferred has already been resolved even though you are inside code that intended to reject it.</source>
          <target state="translated">このメソッドは主にデバッグに役立ちます。例えば、Deferredが既に解決されているかどうかを判断するために、コードの中で拒否しようとしていたにも関わらず、そのコードが解決されているかどうかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="6158f3be944f5323b063daabea46f186e081a8f5" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;parents&quot;&gt;&lt;code&gt;.parents()&lt;/code&gt;&lt;/a&gt;, except &lt;code&gt;.parent()&lt;/code&gt; only travels a single level up the DOM tree. Also, &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; method returns a set containing &lt;code&gt;document&lt;/code&gt; whereas &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; returns an empty set.</source>
          <target state="translated">このメソッドは&lt;a href=&quot;parents&quot;&gt; &lt;code&gt;.parents()&lt;/code&gt; に&lt;/a&gt;似ていますが、 &lt;code&gt;.parent()&lt;/code&gt; はDOMツリーの1レベル上を移動するだけです。また、 &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; メソッドの戻り含むセット &lt;code&gt;document&lt;/code&gt; に対し &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; 空のセットを返します。</target>
        </trans-unit>
        <trans-unit id="f212f682efcc36782acb359a7b6a9498a049d716" translate="yes" xml:space="preserve">
          <source>This method is the simplest way to fetch data from the server. It is roughly equivalent to &lt;code&gt;$.get(url, data, success)&lt;/code&gt; except that it is a method rather than global function and it has an implicit callback function. When a successful response is detected (i.e. when &lt;code&gt;textStatus&lt;/code&gt; is &quot;success&quot; or &quot;notmodified&quot;), &lt;code&gt;.load()&lt;/code&gt; sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:</source>
          <target state="translated">このメソッドは、サーバーからデータをフェッチする最も簡単な方法です。これは &lt;code&gt;$.get(url, data, success)&lt;/code&gt; とほぼ同じですが、グローバル関数ではなくメソッドであり、暗黙のコールバック関数がある点が異なります。成功した応答が検出されると（つまり、 &lt;code&gt;textStatus&lt;/code&gt; が &quot;success&quot;または &quot;notmodified&quot;の場合） &lt;code&gt;.load()&lt;/code&gt; は一致した要素のHTMLコンテンツを返されたデータに設定します。つまり、このメソッドのほとんどの使用法は非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="97bad19c70b5728f621288ec148f22105f3c99f4" translate="yes" xml:space="preserve">
          <source>This method is the simplest way to fetch data from the server. It is roughly equivalent to &lt;code&gt;$.get(url, data, success)&lt;/code&gt; except that it is a method rather than global function and it has an implicit callback function. When a successful response is detected (i.e. when &lt;code&gt;textStatus&lt;/code&gt; is &quot;success&quot; or &quot;notmodified&quot;), &lt;code&gt;.load()&lt;/code&gt; sets the HTML contents of the matched elements to the returned data. This means that most uses of the method can be quite simple:</source>
          <target state="translated">この方法は、サーバーからデータをフェッチする最も簡単な方法です。これは、グローバル関数ではなくメソッドであり、暗黙的なコールバック関数があることを除いて &lt;code&gt;$.get(url, data, success)&lt;/code&gt; とほぼ同等です。成功した応答が検出された場合（つまり、 &lt;code&gt;textStatus&lt;/code&gt; が「success」または「notmodified」の場合） &lt;code&gt;.load()&lt;/code&gt; は、一致した要素のHTMLコンテンツを返されたデータに設定します。これは、メソッドのほとんどの使用法が非常に簡単であることを意味します。</target>
        </trans-unit>
        <trans-unit id="33a293e72757673a33b710d1c8020b662670351f" translate="yes" xml:space="preserve">
          <source>This method is typically used to set the values of form fields.</source>
          <target state="translated">このメソッドは通常、フォームフィールドの値を設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="b041aaa9a6860bdfc4ee2d9736df50aacf1367d7" translate="yes" xml:space="preserve">
          <source>This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.</source>
          <target state="translated">このメソッドは、クラス名やIDにドットやセミコロンなどCSSで特別な意味を持つ文字が含まれている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="244806d817f0a7d369a67cd7d7c93c5a39756ca3" translate="yes" xml:space="preserve">
          <source>This method provides a means to attach delegated event handlers to the &lt;code&gt;document&lt;/code&gt; element of a page, which simplifies the use of event handlers when content is dynamically added to a page. See the discussion of direct versus delegated events in the &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt; method for more information.</source>
          <target state="translated">このメソッドは、委任されたイベントハンドラーをページの &lt;code&gt;document&lt;/code&gt; 要素にアタッチする手段を提供します。これにより、コンテンツがページに動的に追加されるときのイベントハンドラーの使用が簡単になります。詳細については、&lt;a href=&quot;on&quot;&gt; &lt;code&gt;.on()&lt;/code&gt; &lt;/a&gt;メソッドの直接イベントと委任イベントの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="7fd2a5591a30ca6ff308b7643859a6536be39441" translate="yes" xml:space="preserve">
          <source>This method rarely needs to be called directly. Instead, use it as an entry point to modify existing &lt;a href=&quot;category/manipulation&quot;&gt;jQuery manipulation methods&lt;/a&gt;. For instance, to remove all &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; tags from incoming HTML strings, do this:</source>
          <target state="translated">このメソッドが直接呼び出される必要はほとんどありません。代わりに、既存の&lt;a href=&quot;category/manipulation&quot;&gt;jQuery操作メソッド&lt;/a&gt;を変更するためのエントリポイントとして使用してください。たとえば、着信HTML文字列からすべての &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; タグを削除するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="dd80397630c84b50e8d361e72a33e91191dbf528" translate="yes" xml:space="preserve">
          <source>This method rarely needs to be called directly. Instead, use it as an entry point to modify existing &lt;a href=&quot;category/manipulation&quot;&gt;jQuery manipulation methods&lt;/a&gt;. jQuery calls this method on input HTML before processing it further: it accepts an HTML string &amp;amp; should return a HTML string as well.</source>
          <target state="translated">このメソッドを直接呼び出す必要はほとんどありません。代わりに、既存の&lt;a href=&quot;category/manipulation&quot;&gt;jQuery操作メソッド&lt;/a&gt;を変更するためのエントリポイントとして使用してください。jQueryは、さらに処理する前に、入力HTMLでこのメソッドを呼び出します。HTML文字列を受け入れ、HTML文字列も返す必要があります。</target>
        </trans-unit>
        <trans-unit id="81bd8de971947848a1bbc3dd30bdfc905828a2cc" translate="yes" xml:space="preserve">
          <source>This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:</source>
          <target state="translated">このメソッドは、子(および他の子孫)要素だけでなく、マッチした要素のセット内のテキストも削除します。これは、DOM の仕様によれば、要素内のテキストの文字列はすべてその要素の子ノードとみなされるからです。以下のHTMLを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="2c6511822632c27fce0c859034fc93723aeb40d5" translate="yes" xml:space="preserve">
          <source>This method returns the Callbacks object onto which it is attached (&lt;code&gt;this&lt;/code&gt;).</source>
          <target state="translated">このメソッドは、アタッチされているCallbacksオブジェクト（ &lt;code&gt;this&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="db22403d5e9f887b88f057e719d07941784e3daa" translate="yes" xml:space="preserve">
          <source>This method returns the height of the element, including top and bottom padding, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">このメソッドは、上下のパディングを含む要素の高さをピクセル単位で返します。要素の空のセットに対して呼び出された場合、 &lt;code&gt;undefined&lt;/code&gt; （jQuery 3.0以前は &lt;code&gt;null&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="46751de65f82b868a8d805a118d0472c10ab2eb4" translate="yes" xml:space="preserve">
          <source>This method returns the width of the element, including left and right padding, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">このメソッドは、要素の幅（左および右のパディングを含む）をピクセル単位で返します。要素の空のセットに対して呼び出された場合、 &lt;code&gt;undefined&lt;/code&gt; （jQuery 3.0以前は &lt;code&gt;null&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="346db25be5af8ef6c0901a77a68e78712521680d" translate="yes" xml:space="preserve">
          <source>This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply &lt;code&gt;.toggleClass()&lt;/code&gt; to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">このメソッドは、パラメーターとして1つ以上のクラス名を取ります。最初のバージョンでは、一致する要素のセットの要素にすでにクラスがある場合、その要素は削除されます。要素にクラスがない場合は、追加されます。たとえば、単純な &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に &lt;code&gt;.toggleClass()&lt;/code&gt; を適用できます。</target>
        </trans-unit>
        <trans-unit id="ffca30b1eb6fa5e71da9068c59603b1d9459f862" translate="yes" xml:space="preserve">
          <source>This method takes one or more classes as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply &lt;code&gt;.toggleClass()&lt;/code&gt; to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">このメソッドは、パラメーターとして1つ以上のクラスを取ります。最初のバージョンでは、一致した要素のセット内の要素にすでにクラスがある場合、それは削除されます。要素にクラスがない場合は、追加されます。たとえば、 &lt;code&gt;.toggleClass()&lt;/code&gt; を単純な &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に適用できます。</target>
        </trans-unit>
        <trans-unit id="715fb2b06c008009d1fe416597cf8a202325a3d1" translate="yes" xml:space="preserve">
          <source>This method uses the browser's &lt;code&gt;innerHTML&lt;/code&gt; property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all &lt;code&gt;href&lt;/code&gt; properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate &lt;a href=&quot;https://code.google.com/p/html5shiv/&quot;&gt;compatibility layer&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、ブラウザの &lt;code&gt;innerHTML&lt;/code&gt; プロパティを使用します。一部のブラウザは、提供されたHTMLソースを正確に複製するDOMを生成しない場合があります。たとえば、バージョン8より前のInternet Explorer はリンク上のすべての &lt;code&gt;href&lt;/code&gt; プロパティを絶対URLに変換し、バージョン9より前のInternet Explorerは別個の&lt;a href=&quot;https://code.google.com/p/html5shiv/&quot;&gt;互換性レイヤーを&lt;/a&gt;追加しないとHTML5要素を正しく処理しません。</target>
        </trans-unit>
        <trans-unit id="150d540b15cca9563d10ff4107f8ef56ab70336e" translate="yes" xml:space="preserve">
          <source>This method uses the browser's &lt;code&gt;innerHTML&lt;/code&gt; property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters.</source>
          <target state="translated">このメソッドは、ブラウザの &lt;code&gt;innerHTML&lt;/code&gt; プロパティを使用します。ブラウザによっては、元のドキュメントのHTMLソースを正確に複製したHTMLを返さない場合があります。たとえば、Internet Explorerでは、英数字のみが含まれている属性値の前後の引用符が省略されることがあります。</target>
        </trans-unit>
        <trans-unit id="65e0fd7b6508a3fd582b43249cfe77d08ec202a6" translate="yes" xml:space="preserve">
          <source>This method works for custom events triggered with &lt;a href=&quot;trigger&quot;&gt;trigger()&lt;/a&gt; as well.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;trigger&quot;&gt;trigger（）&lt;/a&gt;でトリガーされるカスタムイベントでも機能します。</target>
        </trans-unit>
        <trans-unit id="51d7b57e32048f9435bc9def6a654077e7bbd4e6" translate="yes" xml:space="preserve">
          <source>This object provides a subset of the methods of the &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred&lt;/a&gt; object (&lt;a href=&quot;deferred.then&quot;&gt;&lt;code&gt;then&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.done&quot;&gt;&lt;code&gt;done&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.fail&quot;&gt;&lt;code&gt;fail&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.always&quot;&gt;&lt;code&gt;always&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.pipe&quot;&gt;&lt;code&gt;pipe&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.progress&quot;&gt;&lt;code&gt;progress&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.state&quot;&gt;&lt;code&gt;state&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;deferred.promise&quot;&gt;&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt;) to prevent users from changing the state of the Deferred.</source>
          <target state="translated">このオブジェクトは、&lt;a href=&quot;category/deferred-object&quot;&gt;Deferred&lt;/a&gt;オブジェクトのメソッドのサブセット（&lt;a href=&quot;deferred.then&quot;&gt; &lt;code&gt;then&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.done&quot;&gt; &lt;code&gt;done&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.fail&quot;&gt; &lt;code&gt;fail&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.always&quot;&gt; &lt;code&gt;always&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.pipe&quot;&gt; &lt;code&gt;pipe&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.progress&quot;&gt; &lt;code&gt;progress&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.state&quot;&gt; &lt;code&gt;state&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;deferred.promise&quot;&gt; &lt;code&gt;promise&lt;/code&gt; &lt;/a&gt;）を提供して、ユーザーがDeferredの状態を変更できないようにします。</target>
        </trans-unit>
        <trans-unit id="9b34e7f3b9e24382935439639824b6cd3a1daafd" translate="yes" xml:space="preserve">
          <source>This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call (&lt;code&gt;$.ajaxSettings&lt;/code&gt; merged with the settings passed to &lt;code&gt;$.ajax&lt;/code&gt;). For example, specifying a DOM element as the context will make that the context for the &lt;code&gt;complete&lt;/code&gt; callback of a request, like so:</source>
          <target state="translated">このオブジェクトは、すべてのAjax関連のコールバックのコンテキストになります。デフォルトでは、コンテキストは、呼び出しで使用されるAjax設定を表すオブジェクトです（ &lt;code&gt;$.ajaxSettings&lt;/code&gt; は、 &lt;code&gt;$.ajax&lt;/code&gt; 渡される設定とマージされます）。たとえば、DOM要素をコンテキストとして指定すると、リクエストの &lt;code&gt;complete&lt;/code&gt; コールバックのコンテキストは次のようになります。</target>
        </trans-unit>
        <trans-unit id="94cbfc92f8ea1f8d27355869ff32de50ce680892" translate="yes" xml:space="preserve">
          <source>This page documents data types appearing in jQuery function signatures, whether defined by JavaScript itself or further restricted by jQuery. Unless explicitly stated otherwise, jQuery functions require primitive values where applicable, and do not accept their Object-wrapped forms. If you want to study these concepts in depth, take a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;MDN&lt;/a&gt;.</source>
          <target state="translated">このページでは、JavaScript自体によって定義されているか、jQueryによってさらに制限されているかに関係なく、jQuery関数のシグネチャに表示されるデータ型について説明します。特に明記されていない限り、jQuery関数は、該当する場合はプリミティブ値を必要とし、オブジェクトがラップされたフォームを受け入れません。これらの概念を詳細に学習したい場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;MDNをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="56203e63040b71fce3654bce970b8a4d69bf07fb" translate="yes" xml:space="preserve">
          <source>This produces the following data structure (provided that the browser supports &lt;code&gt;console.log&lt;/code&gt;):</source>
          <target state="translated">これにより、次のデータ構造が生成されます（ブラウザーが &lt;code&gt;console.log&lt;/code&gt; をサポートしている場合）。</target>
        </trans-unit>
        <trans-unit id="ea2441e4626bbaa933d91f94581ef965a8c98747" translate="yes" xml:space="preserve">
          <source>This produces two messages:</source>
          <target state="translated">これは2つのメッセージを生成します。</target>
        </trans-unit>
        <trans-unit id="fc3c947e063813842196c7d7043a6f71bdfe405d" translate="yes" xml:space="preserve">
          <source>This property can be useful for getting previous return values of custom events.</source>
          <target state="translated">このプロパティは、カスタム・イベントの以前の戻り値を取得するのに便利です。</target>
        </trans-unit>
        <trans-unit id="1e6af58b84f3fd5422adf8be75663d1cdcaec458" translate="yes" xml:space="preserve">
          <source>This property can be useful for profiling event performance by getting the &lt;code&gt;event.timeStamp&lt;/code&gt; value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use &lt;code&gt;(new Date).getTime()&lt;/code&gt; instead.</source>
          <target state="translated">このプロパティは、コードの2つのポイントで &lt;code&gt;event.timeStamp&lt;/code&gt; 値を取得し、その違いに注目することで、イベントパフォーマンスのプロファイリングに役立ちます。イベントハンドラ内の現在の時刻を簡単に確認するには、代わりに &lt;code&gt;(new Date).getTime()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="32854e587e24ee920ce451c5ed1f67d727e051d7" translate="yes" xml:space="preserve">
          <source>This property is available immediately. It is therefore safe to use it to determine whether or not to call &lt;code&gt;$(document).ready()&lt;/code&gt;. The &lt;code&gt;$.browser&lt;/code&gt; property is deprecated in jQuery 1.3, and its functionality may be moved to a team-supported plugin in a future release of jQuery.</source>
          <target state="translated">このプロパティはすぐに利用できます。したがって、 &lt;code&gt;$(document).ready()&lt;/code&gt; を呼び出すかどうかを決定するためにそれを使用しても安全です。 &lt;code&gt;$.browser&lt;/code&gt; プロパティは、jQueryの1.3で廃止され、その機能は、jQueryの将来のリリースでチームをサポートするプラグインに移動させてもよいです。</target>
        </trans-unit>
        <trans-unit id="0cb47618e4f09b9437b6d3e0140b679d5c2ebfe6" translate="yes" xml:space="preserve">
          <source>This property is deprecated as of version 3.0, and has no effect in browsers that support the &lt;a href=&quot;https://caniuse.com/#feat=requestanimationframe&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このプロパティはバージョン3.0で廃止され、&lt;a href=&quot;https://caniuse.com/#feat=requestanimationframe&quot;&gt; &lt;code&gt;requestAnimationFrame&lt;/code&gt; &lt;/a&gt;メソッドをサポートするブラウザでは効果がありません。</target>
        </trans-unit>
        <trans-unit id="02b9c04a0a37a88e51468f13a1b96e7dc499d1cf" translate="yes" xml:space="preserve">
          <source>This property is most often useful in delegated events attached by &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt;, where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.</source>
          <target state="translated">このプロパティは、&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;on&quot;&gt; &lt;code&gt;.on()&lt;/code&gt; &lt;/a&gt;によってアタッチされた委任イベントで最も頻繁に役立ちます。イベントハンドラーは、処理される要素の祖先にアタッチされます。たとえば、委任ポイントでイベントハンドラーを識別して削除するために使用できます。</target>
        </trans-unit>
        <trans-unit id="5242b856f2e8af25d2fe18fd4c6247bb987e210a" translate="yes" xml:space="preserve">
          <source>This property was introduced in &lt;a href=&quot;https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped&quot;&gt;DOM level 3&lt;/a&gt;.</source>
          <target state="translated">このプロパティは&lt;a href=&quot;https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped&quot;&gt;DOMレベル3で&lt;/a&gt;導入されました。</target>
        </trans-unit>
        <trans-unit id="5624080d6e56e0b5af625d523f2fcfcdbbad692f" translate="yes" xml:space="preserve">
          <source>This property will typically be equal to the &lt;code&gt;this&lt;/code&gt; of the function.</source>
          <target state="translated">このプロパティは通常、関数の &lt;code&gt;this&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="6de398b115e8ac4d3b07baf9ed497787bdfbc62f" translate="yes" xml:space="preserve">
          <source>This results in the DOM structure:</source>
          <target state="translated">その結果、DOM構造になります。</target>
        </trans-unit>
        <trans-unit id="3f3c511251892c96fdc482ea356fa92b79ae9eba" translate="yes" xml:space="preserve">
          <source>This results in the structure:</source>
          <target state="translated">この結果、構造になっています。</target>
        </trans-unit>
        <trans-unit id="31f4d3fdf074258f85fde4229aa90949580dc628" translate="yes" xml:space="preserve">
          <source>This results in two alerts:</source>
          <target state="translated">その結果、2つのアラートが発生します。</target>
        </trans-unit>
        <trans-unit id="fb2238853884687136f37826653802e89b4ec755" translate="yes" xml:space="preserve">
          <source>This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.</source>
          <target state="translated">このセレクタは、体系的な要素IDを持つHTMLを生成するサーバーサイドフレームワークによって生成されたページの要素を識別するのに便利です。しかし、クラスセレクタを使用するよりも遅くなるので、可能であればクラスを活用して、同じような要素をグループ化してください。</target>
        </trans-unit>
        <trans-unit id="542c4fe2ce4fad40e426004d25711efcc3fa66b4" translate="yes" xml:space="preserve">
          <source>This selector is equivalent to &lt;code&gt;:not([attr='value'])&lt;/code&gt;.</source>
          <target state="translated">このセレクターは &lt;code&gt;:not([attr='value'])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="4db2a826908ba8d7cc8b0f271e54dfa57adba710" translate="yes" xml:space="preserve">
          <source>This selector is the opposite of the &lt;a href=&quot;hidden-selector&quot;&gt;&lt;code&gt;:hidden&lt;/code&gt;&lt;/a&gt; selector. So, every element selected by &lt;code&gt;:visible&lt;/code&gt; isn't selected by &lt;code&gt;:hidden&lt;/code&gt; and vice versa.</source>
          <target state="translated">このセレクタは、&lt;a href=&quot;hidden-selector&quot;&gt; &lt;code&gt;:hidden&lt;/code&gt; &lt;/a&gt;セレクタの反対です。したがって、 &lt;code&gt;:visible&lt;/code&gt; で選択されたすべての要素が &lt;code&gt;:hidden&lt;/code&gt; で選択されるわけではなく、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="1e74fa4479166ae1158a0c6329853a1894417dc8" translate="yes" xml:space="preserve">
          <source>This selector is the opposite of the &lt;a href=&quot;visible-selector&quot;&gt;&lt;code&gt;:visible&lt;/code&gt;&lt;/a&gt; selector. So, every element selected by &lt;code&gt;:hidden&lt;/code&gt; isn't selected by &lt;code&gt;:visible&lt;/code&gt; and vice versa.</source>
          <target state="translated">このセレクターは&lt;a href=&quot;visible-selector&quot;&gt; &lt;code&gt;:visible&lt;/code&gt; &lt;/a&gt;セレクターの反対です。したがって、 &lt;code&gt;:hidden&lt;/code&gt; によって選択されたすべての要素は、 &lt;code&gt;:visible&lt;/code&gt; によって選択されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="b3a2d5e9b02d76f676ebf7a40f5475bdf5d72525" translate="yes" xml:space="preserve">
          <source>This selector matches the test string against each word in the attribute value, where a &quot;word&quot; is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.</source>
          <target state="translated">このセレクタは、属性値の各単語に対してテスト文字列をマッチさせます。このセレクタは、テスト文字列が単語のいずれかと完全に等しい場合にマッチします。</target>
        </trans-unit>
        <trans-unit id="2aacd81dd9108d85703a0183ce334c9f00b22a92" translate="yes" xml:space="preserve">
          <source>This selector was introduced into the CSS specification to handle language attributes.</source>
          <target state="translated">このセレクタは、言語属性を扱うためにCSS仕様に導入されました。</target>
        </trans-unit>
        <trans-unit id="157e09ed59bcd27e64a54f0808685dfbd88c2ba5" translate="yes" xml:space="preserve">
          <source>This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.</source>
          <target state="translated">このショートカットは、新しい空の配列を作成して oldArray の内容をマージし、配列を効果的に複製します。</target>
        </trans-unit>
        <trans-unit id="fe3f15321a53dc582b1d5e1967292d0bc3fdf9eb" translate="yes" xml:space="preserve">
          <source>This signature does not accept any arguments.</source>
          <target state="translated">この署名は引数を受け付けません。</target>
        </trans-unit>
        <trans-unit id="62e54623d8fe421971d23883eb405d33fe0f0049" translate="yes" xml:space="preserve">
          <source>This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.</source>
          <target state="translated">このステートメントは、項目 1、2、4、および 5 の色を変更します。もっとシンプルな jQuery 式でも同じことができましたが、このテクニックは、例えば他のライブラリがプレーンな DOM ノードへの参照を提供している場合などに役立ちます。</target>
        </trans-unit>
        <trans-unit id="641e0b0e743e0f9db8cc5b5032d87f59f062fa73" translate="yes" xml:space="preserve">
          <source>This technique is especially effective in conjunction with the &lt;code&gt;.ready()&lt;/code&gt; method's ability to alias the jQuery object, as within callback passed to &lt;code&gt;.ready()&lt;/code&gt; you can use &lt;code&gt;$&lt;/code&gt; if you wish without fear of conflicts later:</source>
          <target state="translated">この手法は、 &lt;code&gt;.ready()&lt;/code&gt; メソッドのjQueryオブジェクトにエイリアスを設定する機能と組み合わせて使用​​すると特に効果的です &lt;code&gt;.ready()&lt;/code&gt; 渡されるコールバック内で、後で競合を心配せずに &lt;code&gt;$&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ef9920d4ff0249fafafc91db9d9e4e8c4396132d" translate="yes" xml:space="preserve">
          <source>This time list item 4 is turned red, since it is two from the end of the set.</source>
          <target state="translated">今回のリスト4はセット終了から2つなので赤になっています。</target>
        </trans-unit>
        <trans-unit id="fb54eb060df63805863b2cc09662a50e679af5ab" translate="yes" xml:space="preserve">
          <source>This time only list item 4 is turned red, since it is the only item in the range between two from the end (&lt;code&gt;-2&lt;/code&gt;) and one from the end (&lt;code&gt;-1&lt;/code&gt;).</source>
          <target state="translated">今回はリスト項目4のみが赤になっています。これは、最後から2つ（ &lt;code&gt;-2&lt;/code&gt; ）と最後から1つ（ &lt;code&gt;-1&lt;/code&gt; ）の範囲の唯一の項目だからです。</target>
        </trans-unit>
        <trans-unit id="8e1b0702c2347c741838ffed942588981600a704" translate="yes" xml:space="preserve">
          <source>This time the variable is not referred to directly within the handlers; instead, the variable is passed in &lt;em&gt;by value&lt;/em&gt; through &lt;code&gt;eventData&lt;/code&gt;, which fixes the value at the time the event is bound. The first handler will now display</source>
          <target state="translated">今回は、変数はハンドラー内で直接参照されません。代わりに、変数は&lt;em&gt;値として&lt;/em&gt; &lt;code&gt;eventData&lt;/code&gt; を介して渡さ&lt;em&gt;れます&lt;/em&gt;。これにより、イベントがバインドされたときに値が修正されます。最初のハンドラが表示されます</target>
        </trans-unit>
        <trans-unit id="33e92c4d32c144b41a463b2a72bc99e0d9ed77bf" translate="yes" xml:space="preserve">
          <source>This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.</source>
          <target state="translated">属性値を計算する関数を使用することで、複数の要素の属性を一度に変更する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="90e99a4c6ae445c81aefa522c507c0b74a3289ec" translate="yes" xml:space="preserve">
          <source>This version removes the handlers regardless of type. To be more precise, we can pass an event type:</source>
          <target state="translated">このバージョンでは、型に関係なくハンドラを削除します。より正確には、イベントタイプを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="4b8f494293589fde5d66a9f0fd3de5d8ce4c6042" translate="yes" xml:space="preserve">
          <source>This will cause each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to have a class corresponding to the text it wraps:</source>
          <target state="translated">これにより、各 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、ラップするテキストに対応するクラスを持つことになります。</target>
        </trans-unit>
        <trans-unit id="4d9118b4fa1f3e8e18281acd7053ecc4ebd98b4f" translate="yes" xml:space="preserve">
          <source>This will change the color of list item A. The &lt;code&gt;.closest()&lt;/code&gt; method begins its search &lt;em&gt;with the element itself&lt;/em&gt; before progressing up the DOM tree, and stops when item A matches the selector.</source>
          <target state="translated">これにより、リストアイテムAの色が変更されます &lt;code&gt;.closest()&lt;/code&gt; メソッドは、DOMツリーを上に進む前に&lt;em&gt;要素自体&lt;/em&gt;から検索&lt;em&gt;を&lt;/em&gt;開始し、アイテムAがセレクターと一致すると停止します。</target>
        </trans-unit>
        <trans-unit id="14e650ca3a960ce5e1c69a20a7735fd10a84f51f" translate="yes" xml:space="preserve">
          <source>This will change the color of list item II, which is positioned.</source>
          <target state="translated">これにより、配置されているリスト項目IIの色が変更されます。</target>
        </trans-unit>
        <trans-unit id="6445328f9b2e260ef2fd3767cecdd73168ad2247" translate="yes" xml:space="preserve">
          <source>This will change the color of the level-2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, because it is both the first &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, however, because it is not a descendant of list item II.</source>
          <target state="translated">レベル2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; の色が変更されます。これは、リストアイテムA の最初の &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 祖先であり、リストアイテムIIの子孫でもあるためです。ただし、レベル1 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; の色は変更されません。これは、リストアイテムIIの子孫ではないためです。</target>
        </trans-unit>
        <trans-unit id="30761f176591a578865ba51b9704b1d8e4292dab" translate="yes" xml:space="preserve">
          <source>This will change the color of the level-2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, since it is the first encountered when traveling up the DOM tree.</source>
          <target state="translated">これはレベル2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; の色を変更します。これは、DOMツリーを上に移動するときに最初に遭遇するためです。</target>
        </trans-unit>
        <trans-unit id="da12335e31823528963ade8757b1f95116d49939" translate="yes" xml:space="preserve">
          <source>This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.</source>
          <target state="translated">これは主にプラグインの作者が使用することになるでしょう。</target>
        </trans-unit>
        <trans-unit id="23a466e8090dcdd96843ee2332573bed8a724b31" translate="yes" xml:space="preserve">
          <source>This will result in a DOM structure with the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element deleted:</source>
          <target state="translated">これにより、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素が削除されたDOM構造になります。</target>
        </trans-unit>
        <trans-unit id="ac3089e0a92b12a862e14834e3811b822b252ec9" translate="yes" xml:space="preserve">
          <source>This will result in a DOM structure with the &lt;code&gt;Hello&lt;/code&gt; text deleted:</source>
          <target state="translated">これにより、 &lt;code&gt;Hello&lt;/code&gt; テキストが削除されたDOM構造になります。</target>
        </trans-unit>
        <trans-unit id="8f51918357cfd5fb539009a6a575f4d17e914b38" translate="yes" xml:space="preserve">
          <source>This will return a jQuery collection which contains only the list elements that are descendants of item II.</source>
          <target state="translated">これは、項目IIの子孫であるリスト要素のみを含むjQueryコレクションを返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
