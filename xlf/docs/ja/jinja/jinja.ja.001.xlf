<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="jinja">
    <body>
      <group id="jinja">
        <trans-unit id="d518ee4676b80ad78627e3058478d5d42201367e" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2007&amp;ndash;2020 Pallets</source>
          <target state="translated">&amp;copy;2007&amp;ndash;2020パレット</target>
        </trans-unit>
        <trans-unit id="7f4b616cd5711aa17f4acbcbc4a373daf1c2b358" translate="yes" xml:space="preserve">
          <source>(Unfortunately the django cache interface is not compatible because it does not support storing binary data, only unicode. You can however pass the underlying cache client to the bytecode cache which is available as &lt;code&gt;django.core.cache.cache._client&lt;/code&gt;.)</source>
          <target state="translated">（残念ながら、djangoキャッシュインターフェイスはバイナリデータの保存をサポートしておらず、ユニコードのみをサポートしているため互換性がありません。ただし、基になるキャッシュクライアントを &lt;code&gt;django.core.cache.cache._client&lt;/code&gt; として利用可能なバイトコードキャッシュに渡すことができます。）</target>
        </trans-unit>
        <trans-unit id="3561d51a8b498f533ba2841a0380c5b132d01815" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.Markup.unescape&quot;&gt;&lt;code&gt;unescape()&lt;/code&gt;&lt;/a&gt; the markup, remove tags, and normalize whitespace to single spaces.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Markup.unescape&quot;&gt; &lt;code&gt;unescape()&lt;/code&gt; &lt;/a&gt;マークアップをunscape（）し、タグを削除し、空白を単一のスペースに正規化します。</target>
        </trans-unit>
        <trans-unit id="6ad1a619500ed2398c3ee0abae0b32c8fda840d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; objects are implemented by overriding the special &lt;code&gt;__underscore__&lt;/code&gt; methods. For example the default &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; class implements &lt;code&gt;__unicode__&lt;/code&gt; in a way that it returns an empty string, however &lt;code&gt;__int__&lt;/code&gt; and others still fail with an exception. To allow conversion to int by returning &lt;code&gt;0&lt;/code&gt; you can implement your own:</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;オブジェクトは、特別な &lt;code&gt;__underscore__&lt;/code&gt; メソッドをオーバーライドすることで実装されます。たとえば、デフォルトの&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;クラスは空の文字列を返すように &lt;code&gt;__unicode__&lt;/code&gt; を実装しますが、 &lt;code&gt;__int__&lt;/code&gt; などは例外で失敗します。 &lt;code&gt;0&lt;/code&gt; を返すことでintに変換できるようにするには、独自の実装を行うことができます。</target>
        </trans-unit>
        <trans-unit id="ec9067741db9477a96d11514b4ff33e4e55ea96a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; or a subclass of it that is used to represent undefined values in the template.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;またはテンプレート内の未定義の値を表すために使用されるそのサブクラス。</target>
        </trans-unit>
        <trans-unit id="c197e18e9a1f9a362d66c1558a525685700bfc9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Expr&quot;&gt;&lt;code&gt;Expr&lt;/code&gt;&lt;/a&gt;: expressions</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Expr&quot;&gt; &lt;code&gt;Expr&lt;/code&gt; &lt;/a&gt;：式</target>
        </trans-unit>
        <trans-unit id="f42dbc236c7eb2f72c061dc8b24976c301b1a386" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Helper&quot;&gt;&lt;code&gt;Helper&lt;/code&gt;&lt;/a&gt;: helper nodes</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Helper&quot;&gt; &lt;code&gt;Helper&lt;/code&gt; &lt;/a&gt;：ヘルパーノード</target>
        </trans-unit>
        <trans-unit id="caf0b8b19c9e1941cbb17d214b791b2cffe44a88" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Stmt&quot;&gt;&lt;code&gt;Stmt&lt;/code&gt;&lt;/a&gt;: statements</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Stmt&quot;&gt; &lt;code&gt;Stmt&lt;/code&gt; &lt;/a&gt;：ステートメント</target>
        </trans-unit>
        <trans-unit id="43d47425a422f2e54862fe28da58c5b9d6e68b71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#jinja2.nodes.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;: the outermost wrapper node</source>
          <target state="translated">&lt;a href=&quot;#jinja2.nodes.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;：最も外側のラッパーノード</target>
        </trans-unit>
        <trans-unit id="0cfd5a711aab8e1cfc70751e50cc67fe6c7a2b27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&amp;nbsp; ... ##&lt;/code&gt; for &lt;a href=&quot;#line-statements&quot;&gt;Line Statements&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;#&amp;nbsp; ... ##&lt;/code&gt; のための&lt;a href=&quot;#line-statements&quot;&gt;ラインステートメント&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8b6dd593e17fcccbc52992aec587fe6c279f1ec5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;greaterthan&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;greaterthan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="099bed218a276df5fc2ecc5c06c5f1ef01221a00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;lessthan&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;lessthan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8fac12709c74dd859d28b243e80de73d94b539e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'ceil'&lt;/code&gt; always rounds up</source>
          <target state="translated">&lt;code&gt;'ceil'&lt;/code&gt; 常に切り上げます</target>
        </trans-unit>
        <trans-unit id="7ad6a10db07e41577176e3fef386a50a7ea550d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'common'&lt;/code&gt; rounds either up or down</source>
          <target state="translated">&lt;code&gt;'common'&lt;/code&gt; は切り上げまたは切り下げ</target>
        </trans-unit>
        <trans-unit id="a9dc2e82514f5788b4666b3095eb0f9657a2332c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'floor'&lt;/code&gt; always rounds down</source>
          <target state="translated">&lt;code&gt;'floor'&lt;/code&gt; 常に切り捨てられます</target>
        </trans-unit>
        <trans-unit id="86f63c0c554c0ecba771eea460f5559c9bacb2fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;equalto&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;equalto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8272ea7c7bc1df167bc38d54a3b170d910ccfab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the compiler cannot evaluate some expressions at compile time. At runtime this should always be &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; コンパイラがコンパイル時に一部の式を評価できない場合はTrue。実行時には、これは常に &lt;code&gt;False&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="c609555f979921e3baaa68b1c5de509472be1da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on if autoescaping is active or not.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 自動エスケープがアクティブかどうかに応じて、Trueまたは &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4efd8d3de5d7d57d0ddf8a8cef7a541ab14a4420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_&lt;/code&gt;: alias for &lt;code&gt;gettext&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; ： &lt;code&gt;gettext&lt;/code&gt; のエイリアス</target>
        </trans-unit>
        <trans-unit id="411c42b442769a9ec404acc9ce1d01fed9403149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block&lt;/code&gt; tags can be inside other blocks such as &lt;code&gt;if&lt;/code&gt;, but they will always be executed regardless of if the &lt;code&gt;if&lt;/code&gt; block is actually rendered.</source>
          <target state="translated">&lt;code&gt;block&lt;/code&gt; タグは、 &lt;code&gt;if&lt;/code&gt; などの他のブロック内に配置できますが、 &lt;code&gt;if&lt;/code&gt; ブロックが実際にレンダリングされているかどうかに関係なく、常に実行されます。</target>
        </trans-unit>
        <trans-unit id="1e89ff237a9caa8ac9f4a1091514f26e191261d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cycle&lt;/code&gt; can take an unlimited amount of strings. Each time this tag is encountered the next item from the list is rendered.</source>
          <target state="translated">&lt;code&gt;cycle&lt;/code&gt; は無制限の量の文字列を取ることができます。このタグが検出されるたびに、リストの次のアイテムがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="32ade2801e1df040afe9013de43ee8e53f50d273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;explicit_parentheses&lt;/code&gt; is true if the parsing was triggered by an expression in parentheses. This is used to figure out if an empty tuple is a valid expression or not.</source>
          <target state="translated">&lt;code&gt;explicit_parentheses&lt;/code&gt; 解析が括弧内の式によってトリガーされた場合、explicit_parenthesesはtrueです。これは、空のタプルが有効な式であるかどうかを判断するために使用されます。</target>
        </trans-unit>
        <trans-unit id="734b53bf5b5d771f9f765504ca6c1beaf93ad6a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extensions&lt;/code&gt; and &lt;code&gt;filter_func&lt;/code&gt; are passed to &lt;a href=&quot;#jinja2.Environment.list_templates&quot;&gt;&lt;code&gt;list_templates()&lt;/code&gt;&lt;/a&gt;. Each template returned will be compiled to the target folder or zipfile.</source>
          <target state="translated">&lt;code&gt;extensions&lt;/code&gt; と &lt;code&gt;filter_func&lt;/code&gt; は&lt;a href=&quot;#jinja2.Environment.list_templates&quot;&gt; &lt;code&gt;list_templates()&lt;/code&gt; に&lt;/a&gt;渡されます。返された各テンプレートは、ターゲットフォルダーまたはzipファイルにコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="22179339a7b0d68a3b457278e20388943691791c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo['bar']&lt;/code&gt; works mostly the same with a small difference in sequence:</source>
          <target state="translated">&lt;code&gt;foo['bar']&lt;/code&gt; はほとんど同じように機能しますが、順序が少し異なります。</target>
        </trans-unit>
        <trans-unit id="f4cbfb6c7f8d2cc9851d6631cff77779b0ccabdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; is the name of the &lt;code&gt;gettext&lt;/code&gt; function used (if the string was extracted from embedded Python code).</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; は、使用される &lt;code&gt;gettext&lt;/code&gt; 関数の名前です（文字列が埋め込みPythonコードから抽出された場合）。</target>
        </trans-unit>
        <trans-unit id="c6ecf5889eb71ad2123f07ac11a8c3b650f7f215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gettext&lt;/code&gt;: translate a single string</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; ：単一の文字列を翻訳します</target>
        </trans-unit>
        <trans-unit id="ce80bbef81009ae8c789fd1996963743bc3ebd32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupby&lt;/code&gt; yields namedtuples of &lt;code&gt;(grouper, list)&lt;/code&gt;, which can be used instead of the tuple unpacking above. &lt;code&gt;grouper&lt;/code&gt; is the value of the attribute, and &lt;code&gt;list&lt;/code&gt; is the items with that value.</source>
          <target state="translated">&lt;code&gt;groupby&lt;/code&gt; は、 &lt;code&gt;(grouper, list)&lt;/code&gt; 名前付きタプルを生成します。これは、上記のタプルのアンパックの代わりに使用できます。 &lt;code&gt;grouper&lt;/code&gt; は属性の値であり、 &lt;code&gt;list&lt;/code&gt; はその値を持つアイテムです。</target>
        </trans-unit>
        <trans-unit id="367b0e43f32b9c3937fc935fe31f7b4cddabb8b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineno&lt;/code&gt; is the number of the line on which the string was found.</source>
          <target state="translated">&lt;code&gt;lineno&lt;/code&gt; は、文字列が見つかった行の番号です。</target>
        </trans-unit>
        <trans-unit id="61eee75c63ed74c615159e507e4cdb129dfb799b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load&lt;/code&gt;: load that name</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; ：その名前をロードします</target>
        </trans-unit>
        <trans-unit id="c8acddff323b87d89be736d144eb4066ca53fd95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locals&lt;/code&gt; can be a dict of local variables for internal usage.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; は、内部使用のためのローカル変数のdictにすることができます。</target>
        </trans-unit>
        <trans-unit id="8ae7724ece5757dff9dea0f0bdf151df140de26b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; is the string itself (&lt;code&gt;unicode&lt;/code&gt; on Python 2), or a tuple of strings for functions with multiple arguments.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; は、文字列自体（Python 2では &lt;code&gt;unicode&lt;/code&gt; ）、または複数の引数を持つ関数の文字列のタプルです。</target>
        </trans-unit>
        <trans-unit id="fdb3bb39a61acc5cd7de42f28e8ee02fba7d1708" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ngettext&lt;/code&gt;: translate a pluralizable string</source>
          <target state="translated">&lt;code&gt;ngettext&lt;/code&gt; ：複数形の文字列を翻訳します</target>
        </trans-unit>
        <trans-unit id="99a00d3b2781ffd96ea0ff70d523258b889d2cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;param&lt;/code&gt;: like &lt;code&gt;store&lt;/code&gt; but if the name was defined as function parameter.</source>
          <target state="translated">&lt;code&gt;param&lt;/code&gt; ： &lt;code&gt;store&lt;/code&gt; に似ていますが、名前が関数パラメーターとして定義されている場合。</target>
        </trans-unit>
        <trans-unit id="279fa1fd47c25eb5eb4c890e1383ae85999afbd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;store&lt;/code&gt;: store a value in the name</source>
          <target state="translated">&lt;code&gt;store&lt;/code&gt; ：名前に値を格納します</target>
        </trans-unit>
        <trans-unit id="af4c0f8a422f56a2eb5866e5c5c3e42594bae6c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is greater or equal to the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 左側が右側以上の場合はtrue。</target>
        </trans-unit>
        <trans-unit id="535bb835fdd9fd6f3b304457b91e9ea79fdc125a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is greater than the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 左側が右側よりも大きい場合はtrue。</target>
        </trans-unit>
        <trans-unit id="4d47807a75c530b891ff35fde89e28be868e36d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is lower or equal to the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 左側が右側より低いか等しい場合はtrue。</target>
        </trans-unit>
        <trans-unit id="4cf71740c68c36d42ceef2c5ec1084941125b9a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the left hand side is lower than the right hand side.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 左側が右側よりも低い場合はtrue。</target>
        </trans-unit>
        <trans-unit id="4c0bdaa2a4d7f848361ab2cd5b0652fddfd1c578" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; is always true and &lt;code&gt;false&lt;/code&gt; is always false.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; は常にtrueであり、 &lt;code&gt;false&lt;/code&gt; は常にfalseです。</target>
        </trans-unit>
        <trans-unit id="ee2a8aa1a3c4f398b12def5c8e3458e6859f5a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{# ... #}&lt;/code&gt; for &lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt; not included in the template output</source>
          <target state="translated">&lt;code&gt;{# ... #}&lt;/code&gt; について&lt;a href=&quot;#comments&quot;&gt;コメント&lt;/a&gt;テンプレートの出力に含まれていません</target>
        </trans-unit>
        <trans-unit id="711e2f6b8acc7c61a77b9c98ff3e75f1d5c2b0cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{% ... %}&lt;/code&gt; for &lt;a href=&quot;#list-of-control-structures&quot;&gt;Statements&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;{% ... %}&lt;/code&gt; のための&lt;a href=&quot;#list-of-control-structures&quot;&gt;文&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77f72cb5d694babdaf0b043933348b73ac573a79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{ &quot;Hello &quot; ~ name ~ &quot;!&quot; }}&lt;/code&gt; would return (assuming &lt;code&gt;name&lt;/code&gt; is set to &lt;code&gt;'John'&lt;/code&gt;) &lt;code&gt;Hello John!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{ &quot;Hello &quot; ~ name ~ &quot;!&quot; }}&lt;/code&gt; が返されます（ &lt;code&gt;name&lt;/code&gt; が &lt;code&gt;'John'&lt;/code&gt; 設定されていると仮定） &lt;code&gt;Hello John!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d380fe9b81ff64131b34295f927602d0871ecd19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{ ... }}&lt;/code&gt; for &lt;a href=&quot;#expressions&quot;&gt;Expressions&lt;/a&gt; to print to the template output</source>
          <target state="translated">&lt;code&gt;{{ ... }}&lt;/code&gt; &lt;a href=&quot;#expressions&quot;&gt;式&lt;/a&gt;がテンプレート出力に出力するための{{...}}</target>
        </trans-unit>
        <trans-unit id="68dda45a5861ac96317c9d7aca34f22d5eb088e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{ post.render(user, full=true) }}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{ post.render(user, full=true) }}&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="dd66c0b34494c1821001709d8ff61b9c311c48e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.autoescape&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;インポート名：&lt;/strong&gt; &lt;code&gt;jinja2.ext.autoescape&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="521595144ffc7fdc0c8e9f0e1f9a434edcf99c22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.debug&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;インポート名：&lt;/strong&gt; &lt;code&gt;jinja2.ext.debug&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fea4530e06779a4c16cb21ac5be994633f9b4f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.do&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;インポート名：&lt;/strong&gt; &lt;code&gt;jinja2.ext.do&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6d17c5843ed05a6dc7edd6c0c415c12f01e947f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.i18n&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;インポート名：&lt;/strong&gt; &lt;code&gt;jinja2.ext.i18n&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1ae988dd7a45f55aad13b9b5c6a0f4c68ef7464" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.loopcontrols&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;インポート名：&lt;/strong&gt; &lt;code&gt;jinja2.ext.loopcontrols&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4235785f385bdd7ffe9181a533ea0336fda5c06a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Import name:&lt;/strong&gt;&lt;code&gt;jinja2.ext.with_&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;インポート名：&lt;/strong&gt; &lt;code&gt;jinja2.ext.with_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1cd8203545083e278914ee81d4d4b97aaa2d3e70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; Filter objects with unique values for this attribute.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;この属性の一意の値でオブジェクトをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="94c4f75c77144c80bb44ef0c2e218ab36736a120" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; Get the object with the max value of this attribute.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;この属性の最大値を持つオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="cff821adcb516d6d15161a95b6b6acf78251dadb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; Get the object with the min value of this attribute.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;この属性の最小値を持つオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="404c75128f2642ad7ea8728f42bbe1131d059f22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attribute&lt;/strong&gt; &amp;ndash; When sorting objects or dicts, an attribute or key to sort by. Can use dot notation like &lt;code&gt;&quot;address.city&quot;&lt;/code&gt;. Can be a list of attributes like &lt;code&gt;&quot;age,name&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;属性&lt;/strong&gt;&amp;ndash;オブジェクトまたはディクテーションをソートする場合、ソートする属性またはキー。 &lt;code&gt;&quot;address.city&quot;&lt;/code&gt; ようなドット表記を使用できます。 &lt;code&gt;&quot;age,name&quot;&lt;/code&gt; などの属性のリストにすることができます。</target>
        </trans-unit>
        <trans-unit id="f803d88af67f1fd2517c884e225fda07a477289b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base&lt;/strong&gt; &amp;ndash; the base class to add logging functionality to. This defaults to &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;base&lt;/strong&gt; &amp;ndash;ロギング機能を追加する基本クラス。これはデフォルトで&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8b2447044d64aa8ea5df164c620f39a566347680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;blank&lt;/strong&gt; &amp;ndash; Don&amp;rsquo;t skip indenting empty lines.</source>
          <target state="translated">&lt;strong&gt;空白&lt;/strong&gt;&amp;ndash;空の行のインデントをスキップしないでください。</target>
        </trans-unit>
        <trans-unit id="361a76c4d3694bd73e67d8afb7824156b97b8323" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;break_long_words&lt;/strong&gt; &amp;ndash; If a word is longer than &lt;code&gt;width&lt;/code&gt;, break it across lines.</source>
          <target state="translated">&lt;strong&gt;break_long_words&lt;/strong&gt; &amp;ndash;単語が &lt;code&gt;width&lt;/code&gt; より長い場合は、行をまたいで区切ります。</target>
        </trans-unit>
        <trans-unit id="ba597292aa772c7db9ba61172660e1b429786025" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;break_on_hyphens&lt;/strong&gt; &amp;ndash; If a word contains hyphens, it may be split across lines.</source>
          <target state="translated">&lt;strong&gt;break_on_hyphens&lt;/strong&gt; &amp;ndash;単語にハイフンが含まれている場合、行に分割されることがあります。</target>
        </trans-unit>
        <trans-unit id="55e88d9cea8f38bda18d88d15f4bbe1e3434c8fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash; Treat upper and lower case strings as distinct.</source>
          <target state="translated">&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash;大文字と小文字の文字列を区別して扱います。</target>
        </trans-unit>
        <trans-unit id="d8401dfcfacfcbd08347ef4038835d79b9e7b1fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash; When sorting strings, sort upper and lower case separately.</source>
          <target state="translated">&lt;strong&gt;case_sensitive&lt;/strong&gt; &amp;ndash;文字列を並べ替えるときは、大文字と小文字を別々に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="969f54cb9788a20aabcf05db0943ef5f440bae90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;first&lt;/strong&gt; &amp;ndash; Don&amp;rsquo;t skip indenting the first line.</source>
          <target state="translated">&lt;strong&gt;最初&lt;/strong&gt;&amp;ndash;最初の行のインデントをスキップしないでください。</target>
        </trans-unit>
        <trans-unit id="d3c3cba5080005948ad1f33a0e69c350feee1548" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;invalid&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;invalid&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="1dc1f1b052f7724c31977c1b62793b89ebb3caee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;items&lt;/strong&gt; &amp;ndash; Each positional argument will be yielded in the order given for each cycle.</source>
          <target state="translated">&lt;strong&gt;項目&lt;/strong&gt;&amp;ndash;各位置引数は、各サイクルに指定された順序で生成されます。</target>
        </trans-unit>
        <trans-unit id="983f481c20696a3b70b6e2de25483fd50fc67572" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;logger&lt;/strong&gt; &amp;ndash; the logger to use. If not provided, a default logger is created.</source>
          <target state="translated">&lt;strong&gt;ロガー&lt;/strong&gt;&amp;ndash;使用するロガー。指定しない場合、デフォルトのロガーが作成されます。</target>
        </trans-unit>
        <trans-unit id="a9bbe6c8ad8f766aeec51376780649b73cfb4cb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reverse&lt;/strong&gt; &amp;ndash; Sort descending instead of ascending.</source>
          <target state="translated">&lt;strong&gt;逆&lt;/strong&gt;&amp;ndash;昇順ではなく降順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="5bd3d9377937416db0cd750f2c7474e1c597b20e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; Original text to wrap.</source>
          <target state="translated">&lt;strong&gt;s&lt;/strong&gt; &amp;ndash;折り返す元のテキスト。</target>
        </trans-unit>
        <trans-unit id="7452d1679abb9a37f243ae85ec0bee74320e2c68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;valid&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;valid&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="e12bab4402a7b41c95bf6273400d444ae3a97f19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; Data to quote. A string will be quoted directly. A dict or iterable of &lt;code&gt;(key, value)&lt;/code&gt; pairs will be joined as a query string.</source>
          <target state="translated">&lt;strong&gt;値&lt;/strong&gt;&amp;ndash;引用するデータ。文字列は直接引用されます。dictまたはiterableof &lt;code&gt;(key, value)&lt;/code&gt; ペアは、クエリ文字列として結合されます。</target>
        </trans-unit>
        <trans-unit id="2ea3203f459bf9c32bfe1e7892ab46ffd67a0c4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;width&lt;/strong&gt; &amp;ndash; Maximum length of wrapped lines.</source>
          <target state="translated">&lt;strong&gt;width&lt;/strong&gt; &amp;ndash;折り返されている行の最大長。</target>
        </trans-unit>
        <trans-unit id="84ae91f9bd86c61adfdb5190cf54a798a6ddd835" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;width&lt;/strong&gt; &amp;ndash; Number of spaces to indent by.</source>
          <target state="translated">&lt;strong&gt;width&lt;/strong&gt; &amp;ndash;インデントするスペースの数。</target>
        </trans-unit>
        <trans-unit id="beeceb9f9e52bbcd47316e136ee31a9124f09a51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;wrapstring&lt;/strong&gt; &amp;ndash; String to join each wrapped line. Defaults to &lt;code&gt;Environment.newline_sequence&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;wrapstring&lt;/strong&gt; &amp;ndash;各折り返し行を結合する文字列。デフォルトは &lt;code&gt;Environment.newline_sequence&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d4d0ffeccade92508636f809b82b20ccc4a5776" translate="yes" xml:space="preserve">
          <source>A Jinja template is simply a text file. Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A Jinja template doesn&amp;rsquo;t need to have a specific extension: &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.xml&lt;/code&gt;, or any other extension is just fine.</source>
          <target state="translated">Jinjaテンプレートは単なるテキストファイルです。Jinjaは、任意のテキストベースの形式（HTML、XML、CSV、LaTeXなど）を生成できます。Jinjaテンプレートには、特定の拡張子を &lt;code&gt;.html&lt;/code&gt; 必要はありません。.html、 &lt;code&gt;.xml&lt;/code&gt; 、またはその他の拡張子で十分です。</target>
        </trans-unit>
        <trans-unit id="3af7391ee1599c06390a5909f82e1f7f9b481d1b" translate="yes" xml:space="preserve">
          <source>A bytecode cache that stores bytecode on the filesystem. It accepts two arguments: The directory where the cache items are stored and a pattern string that is used to build the filename.</source>
          <target state="translated">ファイルシステム上にバイトコードを保存するバイトコードキャッシュ。2 つの引数を受け取ります。キャッシュアイテムが格納されているディレクトリと、ファイル名を構築するために使用されるパターン文字列です。</target>
        </trans-unit>
        <trans-unit id="29e9143e026767eb8b3c34b47c65eccf2bb7e6f3" translate="yes" xml:space="preserve">
          <source>A callable that can be used to process the result of a variable expression before it is output. For example one can convert &lt;code&gt;None&lt;/code&gt; implicitly into an empty string here.</source>
          <target state="translated">変数式の結果を出力前に処理するために使用できる呼び出し可能オブジェクト。たとえば、ここでは、 &lt;code&gt;None&lt;/code&gt; を暗黙的に空の文字列に変換できます。</target>
        </trans-unit>
        <trans-unit id="baab44730efc2515b4d79e67f8f95a25efc365b7" translate="yes" xml:space="preserve">
          <source>A child template might look like this:</source>
          <target state="translated">子テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b63d511fdd58bfd709ab7efc54268c43b336093f" translate="yes" xml:space="preserve">
          <source>A conditional expression (inline if expression). (&lt;code&gt;{{
foo if bar else baz }}&lt;/code&gt;)</source>
          <target state="translated">条件式（inline if式）。（ &lt;code&gt;{{ foo if bar else baz }}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="00734acfa28be94c17ed22087663390eada93416" translate="yes" xml:space="preserve">
          <source>A constant template string.</source>
          <target state="translated">定数のテンプレート文字列。</target>
        </trans-unit>
        <trans-unit id="8767ebbc8558a483a75713e52916a3c99184d914" translate="yes" xml:space="preserve">
          <source>A control structure refers to all those things that control the flow of a program - conditionals (i.e. if/elif/else), for-loops, as well as things like macros and blocks. With the default syntax, control structures appear inside &lt;code&gt;{% ... %}&lt;/code&gt; blocks.</source>
          <target state="translated">制御構造とは、プログラムのフローを制御するすべてのものを指します。条件（if / elif / else）、forループ、およびマクロやブロックなどです。デフォルトの構文では、制御構造は &lt;code&gt;{% ... %}&lt;/code&gt; ブロック内に表示されます。</target>
        </trans-unit>
        <trans-unit id="cfe5400ff35558fb285a4e9f2286b0801aefe952" translate="yes" xml:space="preserve">
          <source>A convenient alternative to dict literals. &lt;code&gt;{'foo': 'bar'}&lt;/code&gt; is the same as &lt;code&gt;dict(foo='bar')&lt;/code&gt;.</source>
          <target state="translated">dictリテラルの便利な代替手段。 &lt;code&gt;{'foo': 'bar'}&lt;/code&gt; は &lt;code&gt;dict(foo='bar')&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="1f9f25e4703555d35f89df7abbf46e57ba60f133" translate="yes" xml:space="preserve">
          <source>A dict in Python is a structure that combines keys and values. Keys must be unique and always have exactly one value. Dicts are rarely used in templates; they are useful in some rare cases such as the &lt;a href=&quot;#xmlattr&quot;&gt;&lt;code&gt;xmlattr()&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="translated">Pythonのdictは、キーと値を組み合わせた構造です。キーは一意である必要があり、常に1つの値のみを持つ必要があります。ディクトがテンプレートで使用されることはめったにありません。これらは、&lt;a href=&quot;#xmlattr&quot;&gt; &lt;code&gt;xmlattr()&lt;/code&gt; &lt;/a&gt;フィルターなどのまれなケースで役立ちます。</target>
        </trans-unit>
        <trans-unit id="720ecc99105d300492e8d7cdabe603499d0cad83" translate="yes" xml:space="preserve">
          <source>A dict of block render functions. Each of these functions works exactly like the &lt;a href=&quot;#jinja2.Template.root_render_func&quot;&gt;&lt;code&gt;root_render_func()&lt;/code&gt;&lt;/a&gt; with the same limitations.</source>
          <target state="translated">ブロックレンダリング関数の辞書。これらの各関数は、&lt;a href=&quot;#jinja2.Template.root_render_func&quot;&gt; &lt;code&gt;root_render_func()&lt;/code&gt; &lt;/a&gt;とまったく同じように機能しますが、同じ制限があります。</target>
        </trans-unit>
        <trans-unit id="65d3eaeee024be7a43148c6b2e048f24ff99e8c2" translate="yes" xml:space="preserve">
          <source>A dict of filters for this environment. As long as no template was loaded it&amp;rsquo;s safe to add new filters or remove old. For custom filters see &lt;a href=&quot;#writing-filters&quot;&gt;Custom Filters&lt;/a&gt;. For valid filter names have a look at &lt;a href=&quot;#identifier-naming&quot;&gt;Notes on Identifiers&lt;/a&gt;.</source>
          <target state="translated">この環境のフィルターの指示。テンプレートがロードされていない限り、新しいフィルターを追加したり、古いフィルターを削除したりしても安全です。カスタムフィルタを参照&lt;a href=&quot;#writing-filters&quot;&gt;カスタムフィルタを&lt;/a&gt;。有効なフィルター名については、&lt;a href=&quot;#identifier-naming&quot;&gt;識別子に関する注意事項を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e4831ad20e53ea4ad83ac74551cbd1384deffd15" translate="yes" xml:space="preserve">
          <source>A dict of global variables. These variables are always available in a template. As long as no template was loaded it&amp;rsquo;s safe to modify this dict. For more details see &lt;a href=&quot;#global-namespace&quot;&gt;The Global Namespace&lt;/a&gt;. For valid object names have a look at &lt;a href=&quot;#identifier-naming&quot;&gt;Notes on Identifiers&lt;/a&gt;.</source>
          <target state="translated">グローバル変数の辞書。これらの変数は、テンプレートで常に使用できます。テンプレートがロードされていない限り、このdictを変更しても安全です。詳細については&lt;a href=&quot;#global-namespace&quot;&gt;、グローバル名前空間を&lt;/a&gt;参照してください。有効なオブジェクト名については、&lt;a href=&quot;#identifier-naming&quot;&gt;識別子に関する注意事項を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="930ce7a0c6506611db7ddaadf7131dd948c6b8be" translate="yes" xml:space="preserve">
          <source>A dict of read only, global variables the template looks up. These can either come from another &lt;a href=&quot;#jinja2.runtime.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;, from the &lt;code&gt;Environment.globals&lt;/code&gt; or &lt;code&gt;Template.globals&lt;/code&gt; or points to a dict created by combining the globals with the variables passed to the render function. It must not be altered.</source>
          <target state="translated">テンプレートが検索する読み取り専用のグローバル変数の辞書。これらは、 &lt;code&gt;Environment.globals&lt;/code&gt; または &lt;code&gt;Template.globals&lt;/code&gt; からの別の&lt;a href=&quot;#jinja2.runtime.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;から取得するか、グローバルとレンダリング関数に渡される変数を組み合わせて作成されたdictを指すことができます。変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="bee4e20e5f4bda43addfe43afb1a9d615dfc3fc7" translate="yes" xml:space="preserve">
          <source>A dict of test functions for this environment. As long as no template was loaded it&amp;rsquo;s safe to modify this dict. For custom tests see &lt;a href=&quot;#writing-tests&quot;&gt;Custom Tests&lt;/a&gt;. For valid test names have a look at &lt;a href=&quot;#identifier-naming&quot;&gt;Notes on Identifiers&lt;/a&gt;.</source>
          <target state="translated">この環境のテスト機能の指示。テンプレートがロードされていない限り、このdictを変更しても安全です。カスタムテストについては、&lt;a href=&quot;#writing-tests&quot;&gt;カスタムテストを&lt;/a&gt;参照してください。有効なテスト名については、&lt;a href=&quot;#identifier-naming&quot;&gt;識別子に関する注意事項を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a4b58f729a0f6d6083c08ae18501cc2eb743fdf7" translate="yes" xml:space="preserve">
          <source>A dict with the current mapping of blocks in the template. The keys in this dict are the names of the blocks, and the values a list of blocks registered. The last item in each list is the current active block (latest in the inheritance chain).</source>
          <target state="translated">テンプレート内のブロックの現在のマッピングを持つディクト。このディクトのキーはブロックの名前、値は登録されているブロックのリストです。各リストの最後の項目は現在のアクティブなブロック(継承チェーンの中で最新のもの)です。</target>
        </trans-unit>
        <trans-unit id="a105c2e49cd48e82a03610d0708cb01a255d676b" translate="yes" xml:space="preserve">
          <source>A dictionary with &lt;a href=&quot;#policies&quot;&gt;Policies&lt;/a&gt;. These can be reconfigured to change the runtime behavior or certain template features. Usually these are security related.</source>
          <target state="translated">&lt;a href=&quot;#policies&quot;&gt;ポリシー&lt;/a&gt;付きの辞書。これらを再構成して、ランタイムの動作や特定のテンプレート機能を変更できます。通常、これらはセキュリティに関連しています。</target>
        </trans-unit>
        <trans-unit id="9e0b6acc9708e7dc84a0d2d639f192c87c69e2ac" translate="yes" xml:space="preserve">
          <source>A filter that batches items. It works pretty much like &lt;code&gt;slice&lt;/code&gt; just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example:</source>
          <target state="translated">アイテムをバッチ処理するフィルター。逆に &lt;code&gt;slice&lt;/code&gt; するのとほとんど同じように機能します。指定された数のアイテムを含むリストのリストを返します。2番目のパラメーターを指定すると、これは不足している項目を埋めるために使用されます。この例を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d21fce0fd962298037630903d30a4ed9fc47f40" translate="yes" xml:space="preserve">
          <source>A generic runtime error in the template engine. Under some situations Jinja may raise this exception.</source>
          <target state="translated">テンプレートエンジンの一般的なランタイムエラーです。状況によっては、Jinja がこの例外を発生させることがあります。</target>
        </trans-unit>
        <trans-unit id="0a4aaae57ffe830cac44907693d3a4eae0ef3101" translate="yes" xml:space="preserve">
          <source>A handy helper method that returns a callable that accepts keyword arguments that appear as variables in the expression. If called it returns the result of the expression.</source>
          <target state="translated">式の変数として現れるキーワード引数を受け付ける呼び出し可能なメソッドを返す便利なヘルパーメソッドです。呼び出された場合は、式の結果を返します。</target>
        </trans-unit>
        <trans-unit id="960cdb940e9c6bf9c4ef18d0a622823947f4de48" translate="yes" xml:space="preserve">
          <source>A helper function to cycle between a list of sequences. See the explanation below.</source>
          <target state="translated">シーケンスのリスト間を循環させるヘルパー関数。以下の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="b3e68ddd2af36d4905ac1f4fa1aedafe88cf6ae3" translate="yes" xml:space="preserve">
          <source>A key, value pair for dicts.</source>
          <target state="translated">ディクトのキーと値のペア。</target>
        </trans-unit>
        <trans-unit id="17206cc03587464d5b4ea35a3987ce224d4d2d51" translate="yes" xml:space="preserve">
          <source>A key, value pair for keyword arguments where key is a string.</source>
          <target state="translated">キーワード引数のキーと値のペアで、キーは文字列です。</target>
        </trans-unit>
        <trans-unit id="93bbf1f576f8428b0516bfa993dd21fcd4969929" translate="yes" xml:space="preserve">
          <source>A loader that is passed a dict of loaders where each loader is bound to a prefix. The prefix is delimited from the template by a slash per default, which can be changed by setting the &lt;code&gt;delimiter&lt;/code&gt; argument to something else:</source>
          <target state="translated">各ローダーがプレフィックスにバインドされているローダーのdictが渡されるローダー。プレフィックスは、デフォルトでスラッシュによってテンプレートから区切られます。スラッシュは、 &lt;code&gt;delimiter&lt;/code&gt; 引数を別の値に設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="b6a5261b1d1e6bf07ef3ea0533c7d90900803dce" translate="yes" xml:space="preserve">
          <source>A loader that is passed a function which does the loading. The function receives the name of the template and has to return either an unicode string with the template source, a tuple in the form &lt;code&gt;(source,
filename, uptodatefunc)&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if the template does not exist.</source>
          <target state="translated">ロードを行う関数が渡されるローダー。この関数はテンプレートの名前を受け取り、テンプレートのソースを含むUnicode文字列、形式 &lt;code&gt;(source, filename, uptodatefunc)&lt;/code&gt; タプル、またはテンプレートが存在しない場合は &lt;code&gt;None&lt;/code&gt; のいずれかを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7f4fefcfb10660dfc90ed87f01b1cece598d7b63" translate="yes" xml:space="preserve">
          <source>A macro definition. &lt;code&gt;name&lt;/code&gt; is the name of the macro, &lt;code&gt;args&lt;/code&gt; a list of arguments and &lt;code&gt;defaults&lt;/code&gt; a list of defaults if there are any. &lt;code&gt;body&lt;/code&gt; is a list of nodes for the macro body.</source>
          <target state="translated">マクロ定義。 &lt;code&gt;name&lt;/code&gt; はマクロの名前であり、 &lt;code&gt;args&lt;/code&gt; は引数のリストであり、 &lt;code&gt;defaults&lt;/code&gt; はデフォルトのリストです（存在する場合）。 &lt;code&gt;body&lt;/code&gt; は、マクロ本体のノードのリストです。</target>
        </trans-unit>
        <trans-unit id="3825b47819481fc9d2b3ff7ccc5e9b462469ac62" translate="yes" xml:space="preserve">
          <source>A more advanced version of a filesystem based bytecode cache is part of Jinja.</source>
          <target state="translated">ファイルシステムベースのバイトコードキャッシュをさらに進化させたものがJinjaの一部です。</target>
        </trans-unit>
        <trans-unit id="9e39c4b84d81f334936d3197719ab6ae19f12fb5" translate="yes" xml:space="preserve">
          <source>A node that holds multiple expressions which are then printed out. This is used both for the &lt;code&gt;print&lt;/code&gt; statement and the regular template data.</source>
          <target state="translated">複数の式を保持し、それらが出力されるノード。これは、 &lt;code&gt;print&lt;/code&gt; ステートメントと通常のテンプレートデータの両方に使用されます。</target>
        </trans-unit>
        <trans-unit id="2311463913e80606ff5cf94f208ffbf14111b50a" translate="yes" xml:space="preserve">
          <source>A node that represents a block.</source>
          <target state="translated">ブロックを表すノード。</target>
        </trans-unit>
        <trans-unit id="6f2ed4dc734e55f6d3289d4e6005842e36936659" translate="yes" xml:space="preserve">
          <source>A node that represents the from import tag. It&amp;rsquo;s important to not pass unsafe names to the name attribute. The compiler translates the attribute lookups directly into getattr calls and does &lt;em&gt;not&lt;/em&gt; use the subscript callback of the interface. As exported variables may not start with double underscores (which the parser asserts) this is not a problem for regular Jinja code, but if this node is used in an extension extra care must be taken.</source>
          <target state="translated">fromimportタグを表すノード。安全でない名前をname属性に渡さないことが重要です。コンパイラーは、属性ルックアップを直接getattr呼び出しに変換し、インターフェースの添え字コールバックを使用しませ&lt;em&gt;ん&lt;/em&gt;。エクスポートされた変数は（パーサーが主張する）二重アンダースコアで始まらない可能性があるため、これは通常のJinjaコードでは問題になりませんが、このノードを拡張機能で使用する場合は特に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="04c17ae30c1ed1e8b662fe321bd72797460d5e39" translate="yes" xml:space="preserve">
          <source>A node that represents the import tag.</source>
          <target state="translated">インポートタグを表すノード。</target>
        </trans-unit>
        <trans-unit id="3a68cb02b8fad9a6232897fb3be862c2bb91e8e4" translate="yes" xml:space="preserve">
          <source>A node that represents the include tag.</source>
          <target state="translated">インクルードタグを表すノード。</target>
        </trans-unit>
        <trans-unit id="9572913bdfaa13c668e3d007a417e263586ce121" translate="yes" xml:space="preserve">
          <source>A statement that evaluates an expression and discards the result.</source>
          <target state="translated">式を評価して結果を破棄する文。</target>
        </trans-unit>
        <trans-unit id="fe8dc854c51504101bcda4da866fb85ab89df804" translate="yes" xml:space="preserve">
          <source>A string that defines the items for the &lt;code&gt;rel&lt;/code&gt; attribute of generated links with the &lt;code&gt;urlize&lt;/code&gt; filter. These items are always added. The default is &lt;code&gt;noopener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlize&lt;/code&gt; フィルターを使用して生成されたリンクの &lt;code&gt;rel&lt;/code&gt; 属性の項目を定義する文字列。これらのアイテムは常に追加されます。デフォルトは &lt;code&gt;noopener&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4e6cbef69121802ea63d9627dc73ebafe3137d2a" translate="yes" xml:space="preserve">
          <source>A string that is ready to be safely inserted into an HTML or XML document, either because it was escaped or because it was marked safe.</source>
          <target state="translated">エスケープされているか、安全とマークされているため、HTMLやXML文書に安全に挿入する準備ができている文字列。</target>
        </trans-unit>
        <trans-unit id="8974797b2ee8ffa4a1e50f431e43826afa56ff95" translate="yes" xml:space="preserve">
          <source>A template contains &lt;strong&gt;variables&lt;/strong&gt; and/or &lt;strong&gt;expressions&lt;/strong&gt;, which get replaced with values when a template is &lt;em&gt;rendered&lt;/em&gt;; and &lt;strong&gt;tags&lt;/strong&gt;, which control the logic of the template. The template syntax is heavily inspired by Django and Python.</source>
          <target state="translated">テンプレートには&lt;strong&gt;変数&lt;/strong&gt;や&lt;strong&gt;式&lt;/strong&gt;が含まれており、テンプレートが&lt;em&gt;レンダリングされる&lt;/em&gt;と値に置き換えられ&lt;em&gt;ます&lt;/em&gt;。そして&lt;strong&gt;、タグ&lt;/strong&gt;テンプレートのロジックを制御、。テンプレートの構文は、DjangoとPythonに大きく影響を受けています。</target>
        </trans-unit>
        <trans-unit id="3e0d66291aba4f4a4f2e219bd44d3757ff96c1ce" translate="yes" xml:space="preserve">
          <source>A template designer can then use the test like this:</source>
          <target state="translated">テンプレートデザイナーは、このようなテストを使用することができます。</target>
        </trans-unit>
        <trans-unit id="df9dddad11e8c82f23eb9a7103e426e595316c97" translate="yes" xml:space="preserve">
          <source>A template stream works pretty much like an ordinary python generator but it can buffer multiple items to reduce the number of total iterations. Per default the output is unbuffered which means that for every unbuffered instruction in the template one unicode string is yielded.</source>
          <target state="translated">テンプレートストリームは通常のpythonジェネレータとほぼ同じように動作しますが、複数の項目をバッファリングして総反復回数を減らすことができます。デフォルトでは出力はバッファリングされていませんが、これはテンプレート内のバッファリングされていない命令に対して1つのユニコード文字列が生成されることを意味します。</target>
        </trans-unit>
        <trans-unit id="b8436d363e39d00ac5595621a3ae2a03bee99baf" translate="yes" xml:space="preserve">
          <source>A tiny helper that can be used to &amp;ldquo;join&amp;rdquo; multiple sections. A joiner is passed a string and will return that string every time it&amp;rsquo;s called, except the first time (in which case it returns an empty string). You can use this to join things:</source>
          <target state="translated">複数のセクションを「結合」するために使用できる小さなヘルパー。ジョイナには文字列が渡され、最初のときを除いて、呼び出されるたびにその文字列が返されます（この場合、空の文字列が返されます）。これを使用して、物事に参加できます。</target>
        </trans-unit>
        <trans-unit id="f2a78f96a112605cf0881aa0c490ce199b6196c3" translate="yes" xml:space="preserve">
          <source>A token stream is an iterable that yields &lt;a href=&quot;#jinja2.lexer.Token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt;s. The parser however does not iterate over it but calls &lt;code&gt;next()&lt;/code&gt; to go one token ahead. The current active token is stored as &lt;a href=&quot;#jinja2.lexer.TokenStream.current&quot;&gt;&lt;code&gt;current&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">トークンストリームはもたらし反復可能である&lt;a href=&quot;#jinja2.lexer.Token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt;秒。ただし、パーサーはそれを反復処理せず、 &lt;code&gt;next()&lt;/code&gt; を呼び出して1つのトークンを先に進めます。現在アクティブなトークンは&lt;a href=&quot;#jinja2.lexer.TokenStream.current&quot;&gt; &lt;code&gt;current&lt;/code&gt; &lt;/a&gt;として保存されます。</target>
        </trans-unit>
        <trans-unit id="cd036b5ebeab25906865a14b723c0bd5a9c22f94" translate="yes" xml:space="preserve">
          <source>A tuple of default values.</source>
          <target state="translated">デフォルト値のタプル。</target>
        </trans-unit>
        <trans-unit id="42a86d91850fef266834165add33d935b5cdf85f" translate="yes" xml:space="preserve">
          <source>A tuple of the names of arguments the macro accepts.</source>
          <target state="translated">マクロが受け入れる引数の名前のタプル。</target>
        </trans-unit>
        <trans-unit id="755b7437c0fb8bbb31ec83a1d1e4d073e0cf72a5" translate="yes" xml:space="preserve">
          <source>A very basic bytecode cache that saves the bytecode on the file system:</source>
          <target state="translated">ファイルシステム上にバイトコードを保存する非常に基本的なバイトコードキャッシュです。</target>
        </trans-unit>
        <trans-unit id="e457c669b6ed4cd0ef85b903c7bbdb27f3b5f328" translate="yes" xml:space="preserve">
          <source>A very basic example for a loader that looks up templates on the file system could look like this:</source>
          <target state="translated">ファイルシステム上のテンプレートを検索するローダーの非常に基本的な例は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="438963a0a200e93292e3673a95794ef95d429801" translate="yes" xml:space="preserve">
          <source>AST</source>
          <target state="translated">AST</target>
        </trans-unit>
        <trans-unit id="10d1c8eb8d37f32e31e74e81050a93ce65ff7d94" translate="yes" xml:space="preserve">
          <source>Accessing the parent Loop</source>
          <target state="translated">親ループへのアクセス</target>
        </trans-unit>
        <trans-unit id="856828f9a6580175770c3e9e6147600b26b43e7f" translate="yes" xml:space="preserve">
          <source>Add the items to the instance of the environment if they do not exist yet. This is used by &lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;extensions&lt;/a&gt; to register callbacks and configuration values without breaking inheritance.</source>
          <target state="translated">アイテムがまだ存在しない場合は、環境のインスタンスにアイテムを追加します。これは、継承を壊すことなくコールバックと構成値を登録するために&lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;拡張機能&lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="8d6764802e5afd244e6e52fd31f06d0f0cc7b3f6" translate="yes" xml:space="preserve">
          <source>Add the left to the right node.</source>
          <target state="translated">右のノードに左を追加します。</target>
        </trans-unit>
        <trans-unit id="42a65e84255209cd01fc47699952cf0204909ea8" translate="yes" xml:space="preserve">
          <source>Adding Extensions</source>
          <target state="translated">拡張機能の追加</target>
        </trans-unit>
        <trans-unit id="6720590dbcd34ac99db1d7e4df73556c4c1bff9f" translate="yes" xml:space="preserve">
          <source>Adding two values results in an integer, not a string with a number:</source>
          <target state="translated">2つの値を足した結果は整数になり、数字の入った文字列ではありません。</target>
        </trans-unit>
        <trans-unit id="f8b89de58ac2cebf43e2be74ff3d9cc0f884f2b5" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;{% debug %}&lt;/code&gt; tag to dump the current context as well as the available filters and tests. This is useful to see what&amp;rsquo;s available to use in the template without setting up a debugger.</source>
          <target state="translated">&lt;code&gt;{% debug %}&lt;/code&gt; タグを追加して、現在のコンテキストと使用可能なフィルターおよびテストをダンプします。これは、デバッガーを設定せずにテンプレートで使用できるものを確認するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a9345d2b8f0be83b3128361e8b387e818554cdf8" translate="yes" xml:space="preserve">
          <source>Adds an extension after the environment was created.</source>
          <target state="translated">環境を作成した後に拡張機能を追加します。</target>
        </trans-unit>
        <trans-unit id="b9a5588013d19e18514b965e283c9453841ac895" translate="yes" xml:space="preserve">
          <source>Adds two objects together. Usually the objects are numbers, but if both are strings or lists, you can concatenate them this way. This, however, is not the preferred way to concatenate strings! For string concatenation, have a look-see at the &lt;code&gt;~&lt;/code&gt; operator. &lt;code&gt;{{ 1 + 1 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">2つのオブジェクトを一緒に追加します。通常、オブジェクトは数値ですが、両方が文字列またはリストの場合は、この方法で連結できます。ただし、これは文字列を連結するための推奨される方法ではありません。文字列の連結については、 &lt;code&gt;~&lt;/code&gt; 演算子を参照してください。 &lt;code&gt;{{ 1 + 1 }}&lt;/code&gt; は &lt;code&gt;2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6a899b722751d67b0e6297a3b724ef4eaa29ec29" translate="yes" xml:space="preserve">
          <source>After an &lt;code&gt;endautoescape&lt;/code&gt; the behavior is reverted to what it was before.</source>
          <target state="translated">&lt;code&gt;endautoescape&lt;/code&gt; の後、動作は以前の状態に戻ります。</target>
        </trans-unit>
        <trans-unit id="920825b66f97c8e35d0017bd1699754d67315459" translate="yes" xml:space="preserve">
          <source>After enabling the extension, the environment provides the following additional methods:</source>
          <target state="translated">拡張機能を有効にした後、環境は以下の追加メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="85756c1fdebbceb66a3b788d1143db7933a1f394" translate="yes" xml:space="preserve">
          <source>After enabling, an application has to provide &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;ngettext&lt;/code&gt; functions, either globally or when rendering. A &lt;code&gt;_()&lt;/code&gt; function is added as an alias to the &lt;code&gt;gettext&lt;/code&gt; function.</source>
          <target state="translated">有効にした後、アプリケーションは、グローバルに、またはレンダリング時に、 &lt;code&gt;gettext&lt;/code&gt; および &lt;code&gt;ngettext&lt;/code&gt; 関数を提供する必要があります。 &lt;code&gt;_()&lt;/code&gt; 関数の別名として追加さ &lt;code&gt;gettext&lt;/code&gt; の機能。</target>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="72d60412c6e8ceb6f0dd0e0665935e7a87f6f9d5" translate="yes" xml:space="preserve">
          <source>All constant values. The parser will return this node for simple constants such as &lt;code&gt;42&lt;/code&gt; or &lt;code&gt;&quot;foo&quot;&lt;/code&gt; but it can be used to store more complex values such as lists too. Only constants with a safe representation (objects where &lt;code&gt;eval(repr(x)) == x&lt;/code&gt; is true).</source>
          <target state="translated">すべての定数値。パーサーは、 &lt;code&gt;42&lt;/code&gt; や &lt;code&gt;&quot;foo&quot;&lt;/code&gt; などの単純な定数に対してこのノードを返しますが、リストなどのより複雑な値を格納するためにも使用できます。安全な表現を持つ定数のみ（ &lt;code&gt;eval(repr(x)) == x&lt;/code&gt; がtrueであるオブジェクト）。</target>
        </trans-unit>
        <trans-unit id="439f170d9c8077036f762f56928512a865d7b273" translate="yes" xml:space="preserve">
          <source>All nodes have fields and attributes. Fields may be other nodes, lists, or arbitrary values. Fields are passed to the constructor as regular positional arguments, attributes as keyword arguments. Each node has two attributes: &lt;code&gt;lineno&lt;/code&gt; (the line number of the node) and &lt;code&gt;environment&lt;/code&gt;. The &lt;code&gt;environment&lt;/code&gt; attribute is set at the end of the parsing process for all nodes automatically.</source>
          <target state="translated">すべてのノードにはフィールドと属性があります。フィールドは、他のノード、リスト、または任意の値にすることができます。フィールドは通常の位置引数としてコンストラクターに渡され、属性はキーワード引数として渡されます。各ノードには、 &lt;code&gt;lineno&lt;/code&gt; （ノードの行番号）と &lt;code&gt;environment&lt;/code&gt; の2つの属性があります。 &lt;code&gt;environment&lt;/code&gt; 属性は、自動的にすべてのノードのための解析プロセスの最後に設定されています。</target>
        </trans-unit>
        <trans-unit id="cefb85d6ec59266383872d68be9a3b976cfc0843" translate="yes" xml:space="preserve">
          <source>Also keep in mind that templates may raise runtime or compile time errors, so make sure to catch them.</source>
          <target state="translated">また、テンプレートが実行時エラーやコンパイル時エラーを発生させる可能性があることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="2c03f6e372a0647f85d6ddd6d0cdc3f5094f9445" translate="yes" xml:space="preserve">
          <source>Also the sandbox is only as good as the configuration. We strongly recommend only passing non-shared resources to the template and use some sort of whitelisting for attributes.</source>
          <target state="translated">また、サンドボックスは設定と同じくらいの効果しかありません。非共有リソースのみをテンプレートに渡し、属性にはある種のホワイトリストを使用することを強く推奨します。</target>
        </trans-unit>
        <trans-unit id="53e626b84e33888466958d85ee2cbe54a605542b" translate="yes" xml:space="preserve">
          <source>Alternating Rows</source>
          <target state="translated">交互に行を入れ替える</target>
        </trans-unit>
        <trans-unit id="3d964f53f1e5613e0ac6d9164845362d2ffdc31d" translate="yes" xml:space="preserve">
          <source>Alternatively you can let it invoke a filter by passing the name of the filter and the arguments afterwards. A good example would be applying a text conversion filter on a sequence:</source>
          <target state="translated">あるいは、フィルタの名前と引数を後から渡すことでフィルタを起動させることもできます。良い例は,シーケンスにテキスト変換フィルタを適用することです。</target>
        </trans-unit>
        <trans-unit id="6854f926c0bfcd57db756b5fe8ace6f017fc03ae" translate="yes" xml:space="preserve">
          <source>Alternatively, you can import specific names from a template into the current namespace:</source>
          <target state="translated">また、テンプレートから特定の名前を現在のネームスペースにインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="d510262abbd02579f27cc82352155476ae2f25d6" translate="yes" xml:space="preserve">
          <source>Although you should prefer the &lt;code&gt;.format&lt;/code&gt; method for that case (which is a bit contrived in the context of rendering a template):</source>
          <target state="translated">その場合は &lt;code&gt;.format&lt;/code&gt; メソッドを使用する必要があります（これは、テンプレートのレンダリングのコンテキストで少し工夫されています）。</target>
        </trans-unit>
        <trans-unit id="c054d311d0a9992a113ce5ba587772d48ad0f2f8" translate="yes" xml:space="preserve">
          <source>Always use keyword arguments to &lt;code&gt;format&lt;/code&gt;, as other languages may not use the words in the same order.</source>
          <target state="translated">他の言語では単語を同じ順序で使用できない場合があるため、 &lt;code&gt;format&lt;/code&gt; は常にキーワード引数を使用してください。</target>
        </trans-unit>
        <trans-unit id="104905d4515439359fc3ab70aa97b43a1250d2d3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt;&lt;code&gt;EvalContext&lt;/code&gt;&lt;/a&gt; can be provided, if none is given a default context is created which requires the nodes to have an attached environment.</source>
          <target state="translated">アン&lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt; &lt;code&gt;EvalContext&lt;/code&gt; は&lt;/a&gt;何も接続環境を持っているノードを必要とするデフォルトのコンテキストが作成された指定されていない場合、提供することができます。</target>
        </trans-unit>
        <trans-unit id="698f97ecddb1fd8b928f6644e57ee5d0f8d75bc5" translate="yes" xml:space="preserve">
          <source>An artificial scope.</source>
          <target state="translated">人工的なスコープ。</target>
        </trans-unit>
        <trans-unit id="dd287bf6935d5a379cc4e8ffa82ce18dee99631b" translate="yes" xml:space="preserve">
          <source>An async version of &lt;a href=&quot;#jinja2.Template.generate&quot;&gt;&lt;code&gt;generate()&lt;/code&gt;&lt;/a&gt;. Works very similarly but returns an async iterator instead.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Template.generate&quot;&gt; &lt;code&gt;generate()&lt;/code&gt; &lt;/a&gt;の非同期バージョン。非常によく似た動作をしますが、代わりに非同期イテレータを返します。</target>
        </trans-unit>
        <trans-unit id="06103227798af0913a31bdbe0b263ecebcc93890" translate="yes" xml:space="preserve">
          <source>An environment that renders templates to native Python types.</source>
          <target state="translated">テンプレートをPythonのネイティブ型にレンダリングする環境です。</target>
        </trans-unit>
        <trans-unit id="2cf092d841f2011857f35dc2880b85daef6c8257" translate="yes" xml:space="preserve">
          <source>An important note on scoping here. In Jinja versions before 2.9 the behavior of referencing one variable to another had some unintended consequences. In particular one variable could refer to another defined in the same with block&amp;rsquo;s opening statement. This caused issues with the cleaned up scoping behavior and has since been improved. In particular in newer Jinja versions the following code always refers to the variable &lt;code&gt;a&lt;/code&gt; from outside the &lt;code&gt;with&lt;/code&gt; block:</source>
          <target state="translated">ここでのスコープに関する重要な注意事項。2.9より前のJinjaバージョンでは、ある変数を別の変数に参照する動作は、意図しない結果をもたらしました。特に、ある変数は、ブロックの冒頭陳述と同じように定義された別の変数を参照できます。これにより、クリーンアップされたスコープ動作に問題が発生し、その後改善されました。特に新しいJinjaバージョンでは、次のコードは常に &lt;code&gt;with&lt;/code&gt; ブロックの外側から変数 &lt;code&gt;a&lt;/code&gt; を参照します。</target>
        </trans-unit>
        <trans-unit id="b9095b58285d49706ac6dae23a8e8da04b94ec34" translate="yes" xml:space="preserve">
          <source>An internal name in the compiler. You cannot create these nodes yourself but the parser provides a &lt;a href=&quot;#jinja2.parser.Parser.free_identifier&quot;&gt;&lt;code&gt;free_identifier()&lt;/code&gt;&lt;/a&gt; method that creates a new identifier for you. This identifier is not available from the template and is not threated specially by the compiler.</source>
          <target state="translated">コンパイラーの内部名。これらのノードを自分で作成することはできませんが、パーサーは新しい識別子を作成する&lt;a href=&quot;#jinja2.parser.Parser.free_identifier&quot;&gt; &lt;code&gt;free_identifier()&lt;/code&gt; &lt;/a&gt;メソッドを提供します。この識別子はテンプレートからは利用できず、コンパイラによって特別に脅かされることはありません。</target>
        </trans-unit>
        <trans-unit id="413082684afecae8504236d24e90300968e59401" translate="yes" xml:space="preserve">
          <source>An overlay scope for extensions. This is a largely unoptimized scope that however can be used to introduce completely arbitrary variables into a sub scope from a dictionary or dictionary like object. The &lt;code&gt;context&lt;/code&gt; field has to evaluate to a dictionary object.</source>
          <target state="translated">拡張機能のオーバーレイスコープ。これはほとんど最適化されていないスコープですが、辞書または辞書のようなオブジェクトからサブスコープに完全に任意の変数を導入するために使用できます。 &lt;code&gt;context&lt;/code&gt; フィールドは、辞書オブジェクトに評価することがあります。</target>
        </trans-unit>
        <trans-unit id="3732ba52ac16393276a794d52cf9bfade4aae8a6" translate="yes" xml:space="preserve">
          <source>An undefined that barks on print and iteration as well as boolean tests and all kinds of comparisons. In other words: you can do nothing with it except checking if it&amp;rsquo;s defined using the &lt;code&gt;defined&lt;/code&gt; test.</source>
          <target state="translated">印刷や反復、ブールテストやあらゆる種類の比較に吠える未定義。言い換えると、 &lt;code&gt;defined&lt;/code&gt; テストを使用して定義されているかどうかを確認する以外は、何もできません。</target>
        </trans-unit>
        <trans-unit id="4a515cce2cf63073c9b100ab8d921588e9c51fa9" translate="yes" xml:space="preserve">
          <source>An undefined that is chainable, where both &lt;code&gt;__getattr__&lt;/code&gt; and &lt;code&gt;__getitem__&lt;/code&gt; return itself rather than raising an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ANは、それが連鎖可能であり、ここで、両方の未定義 &lt;code&gt;__getattr__&lt;/code&gt; と &lt;code&gt;__getitem__&lt;/code&gt; 上げるのではなく、それ自体を返す&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a794cda166e81866027a303f2add4e9bd505dd48" translate="yes" xml:space="preserve">
          <source>An undefined that returns the debug info when printed.</source>
          <target state="translated">印刷時にデバッグ情報を返す未定義。</target>
        </trans-unit>
        <trans-unit id="f435fc34da85888508657682b299840137109b09" translate="yes" xml:space="preserve">
          <source>And here is how you use it in an environment:</source>
          <target state="translated">そして、環境での使い方はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="54cd3a1ad6b73989aa1b47a1306dd58a184a2103" translate="yes" xml:space="preserve">
          <source>Another good heuristic for identifying templates is that they are in a &lt;code&gt;templates&lt;/code&gt; folder, regardless of extension. This is a common layout for projects.</source>
          <target state="translated">テンプレートを識別するためのもう1つの優れたヒューリスティックは、拡張子に関係なく、 &lt;code&gt;templates&lt;/code&gt; フォルダーにあることです。これはプロジェクトの一般的なレイアウトです。</target>
        </trans-unit>
        <trans-unit id="ce8e6a492261b0b7b57e16e5bc3a7488a69a2fef" translate="yes" xml:space="preserve">
          <source>Another important thing is how Jinja is handling string literals in templates. A naive implementation would be using Unicode strings for all string literals but it turned out in the past that this is problematic as some libraries are typechecking against &lt;code&gt;str&lt;/code&gt; explicitly. For example &lt;code&gt;datetime.strftime&lt;/code&gt; does not accept Unicode arguments. To not break it completely Jinja is returning &lt;code&gt;str&lt;/code&gt; for strings that fit into ASCII and for everything else &lt;code&gt;unicode&lt;/code&gt;:</source>
          <target state="translated">もう1つの重要なことは、Jinjaがテンプレート内の文字列リテラルをどのように処理しているかです。単純な実装では、すべての文字列リテラルにUnicode文字列を使用しますが、過去には、一部のライブラリが &lt;code&gt;str&lt;/code&gt; に対して明示的に型チェックを行っているため、これには問題があることが判明しました。たとえば、 &lt;code&gt;datetime.strftime&lt;/code&gt; はUnicode引数を受け入れません。それを完全に壊さないために、JinjaはASCIIに適合する文字列と他のすべての &lt;code&gt;unicode&lt;/code&gt; に対して &lt;code&gt;str&lt;/code&gt; を返します：</target>
        </trans-unit>
        <trans-unit id="2f8e776f3941ef86e97cf4c39811d64912eeca32" translate="yes" xml:space="preserve">
          <source>Any dict literal such as &lt;code&gt;{1: 2, 3: 4}&lt;/code&gt;. The items must be a list of &lt;a href=&quot;#jinja2.nodes.Pair&quot;&gt;&lt;code&gt;Pair&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">&lt;code&gt;{1: 2, 3: 4}&lt;/code&gt; などのdictリテラル。アイテムは&lt;a href=&quot;#jinja2.nodes.Pair&quot;&gt; &lt;code&gt;Pair&lt;/code&gt; &lt;/a&gt;リストである必要があります。</target>
        </trans-unit>
        <trans-unit id="f056c974d76dcc70997fea797821c79033c2a666" translate="yes" xml:space="preserve">
          <source>Any list literal such as &lt;code&gt;[1, 2, 3]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[1, 2, 3]&lt;/code&gt; などのリストリテラル</target>
        </trans-unit>
        <trans-unit id="1623ef9ceab9ade7a9879e33ee9637dc22787117" translate="yes" xml:space="preserve">
          <source>Applies a &lt;a href=&quot;#filters&quot;&gt;filter&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#filters&quot;&gt;フィルタを&lt;/a&gt;適用します。</target>
        </trans-unit>
        <trans-unit id="92826860d5c31b7e2b7fb1efe4306fe8407c51d8" translate="yes" xml:space="preserve">
          <source>Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it.</source>
          <target state="translated">一連のオブジェクトに対してフィルタを適用したり、属性を調べたりします。これは、オブジェクトのリストを扱う場合に便利ですが、実際には特定の値にしか興味がない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="ca54cdb263f77ffb911265abeb739b2191366991" translate="yes" xml:space="preserve">
          <source>Applies a test on an expression. &lt;code&gt;name&lt;/code&gt; is the name of the test, the rest of the fields are the same as for &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt;&lt;code&gt;Call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">式にテストを適用します。 &lt;code&gt;name&lt;/code&gt; はテストの名前であり、残りのフィールドは&lt;a href=&quot;#jinja2.nodes.Call&quot;&gt; &lt;code&gt;Call&lt;/code&gt; の場合&lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="fdf0ce4dca1367c1051c1644d59d2d2a5fb950b4" translate="yes" xml:space="preserve">
          <source>Apply the given values to a &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#printf-style-string-formatting&quot;&gt;printf-style&lt;/a&gt; format string, like &lt;code&gt;string % values&lt;/code&gt;.</source>
          <target state="translated">指定された値を、 &lt;code&gt;string % values&lt;/code&gt; などの&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#printf-style-string-formatting&quot;&gt;printfスタイルの&lt;/a&gt;フォーマット文字列に適用します。</target>
        </trans-unit>
        <trans-unit id="62d36beaa2eeed0958a51b87e4412f0439025297" translate="yes" xml:space="preserve">
          <source>Are we at the end of the stream?</source>
          <target state="translated">流れの先にいるのかな?</target>
        </trans-unit>
        <trans-unit id="3de7707578057c22a9ba938d0018fd538618a82f" translate="yes" xml:space="preserve">
          <source>As a shortcut to chaining when the direction is the same for all attributes, pass a comma separate list of attributes.</source>
          <target state="translated">すべての属性で方向が同じである場合のチェーン化のショートカットとして、属性のリストをカンマで区切って渡します。</target>
        </trans-unit>
        <trans-unit id="e6f838b85c8e0b71b7509796a6b06a8dd51e32f5" translate="yes" xml:space="preserve">
          <source>As an alternative to steps 4 you can also do &lt;code&gt;python setup.py develop&lt;/code&gt; which will install the package via &lt;code&gt;distribute&lt;/code&gt; in development mode. This also has the advantage that the C extensions are compiled.</source>
          <target state="translated">手順4の代わりに、開発モードで &lt;code&gt;distribute&lt;/code&gt; を介してパッケージをインストールする &lt;code&gt;python setup.py develop&lt;/code&gt; を実行することもできます。これには、C拡張機能がコンパイルされるという利点もあります。</target>
        </trans-unit>
        <trans-unit id="9e38422988d66e71feeb984cc3517af2c2bc0679" translate="yes" xml:space="preserve">
          <source>As extensions are created by the environment they cannot accept any arguments for configuration. One may want to work around that by using a factory function, but that is not possible as extensions are identified by their import name. The correct way to configure the extension is storing the configuration values on the environment. Because this way the environment ends up acting as central configuration storage the attributes may clash which is why extensions have to ensure that the names they choose for configuration are not too generic. &lt;code&gt;prefix&lt;/code&gt; for example is a terrible name, &lt;code&gt;fragment_cache_prefix&lt;/code&gt; on the other hand is a good name as includes the name of the extension (fragment cache).</source>
          <target state="translated">拡張機能は環境によって作成されるため、構成の引数を受け入れることはできません。ファクトリ関数を使用してこれを回避したい場合がありますが、拡張子はインポート名で識別されるため、それは不可能です。拡張機能を構成する正しい方法は、構成値を環境に保存することです。このように環境が中央構成ストレージとして機能することになるため、属性が衝突する可能性があります。そのため、拡張機能は、構成に選択する名前が一般的すぎないようにする必要があります。たとえば、 &lt;code&gt;prefix&lt;/code&gt; はひどい名前ですが、 &lt;code&gt;fragment_cache_prefix&lt;/code&gt; は拡張機能（フラグメントキャッシュ）の名前を含むので適切な名前です。</target>
        </trans-unit>
        <trans-unit id="159588c177bd31d3856a6e5f4087853d207cb631" translate="yes" xml:space="preserve">
          <source>As of version 2.10 more complex use cases can be handled using namespace objects which allow propagating of changes across scopes:</source>
          <target state="translated">バージョン 2.10 では、名前空間オブジェクトを使用してより複雑なユースケースを処理できるようになり、スコープ間での変更の伝播が可能になりました。</target>
        </trans-unit>
        <trans-unit id="b88981e70c5c4574499a5bb36b6ad665c2ed0dcc" translate="yes" xml:space="preserve">
          <source>As of version 2.7 Jinja depends on the &lt;a href=&quot;https://markupsafe.palletsprojects.com/&quot;&gt;MarkupSafe&lt;/a&gt; module. If you install Jinja via &lt;code&gt;pip&lt;/code&gt; it will be installed automatically for you.</source>
          <target state="translated">バージョン2.7以降、Jinjaは&lt;a href=&quot;https://markupsafe.palletsprojects.com/&quot;&gt;MarkupSafe&lt;/a&gt;モジュールに依存しています。Jinjaを &lt;code&gt;pip&lt;/code&gt; 経由でインストールすると、自動的にインストールされます。</target>
        </trans-unit>
        <trans-unit id="ff04ba89bca36e259da6b77ccd9724075ecc20aa" translate="yes" xml:space="preserve">
          <source>As stated above, any file can be loaded as a template, regardless of file extension. Adding a &lt;code&gt;.jinja&lt;/code&gt; extension, like &lt;code&gt;user.html.jinja&lt;/code&gt; may make it easier for some IDEs or editor plugins, but is not required. Autoescaping, introduced later, can be applied based on file extension, so you&amp;rsquo;ll need to take the extra suffix into account in that case.</source>
          <target state="translated">上記のように、ファイル拡張子に関係なく、任意のファイルをテンプレートとしてロードできます。追加 &lt;code&gt;.jinja&lt;/code&gt; のように、拡張子を &lt;code&gt;user.html.jinja&lt;/code&gt; はいくつかのIDEやエディタのプラグインのため、それを簡単にすることが、必須ではありません。後で紹介する自動エスケープは、ファイル拡張子に基づいて適用できるため、その場合は追加のサフィックスを考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="1ab971904b4bd63102939388467a91d8f5f1e479" translate="yes" xml:space="preserve">
          <source>As variables in templates retain their object properties, it is possible to iterate over containers like &lt;code&gt;dict&lt;/code&gt;:</source>
          <target state="translated">テンプレート内の変数はオブジェクトプロパティを保持しているため、 &lt;code&gt;dict&lt;/code&gt; ：のようにコンテナを反復処理することができます。</target>
        </trans-unit>
        <trans-unit id="99a838a822d812a1dfe2285b2d3d09cab953c588" translate="yes" xml:space="preserve">
          <source>As you can see it automatically prepends a space in front of the item if the filter returned something unless the second parameter is false.</source>
          <target state="translated">ご覧のように、 フィルタが何かを返した場合には、 2 番目のパラメータが false でない限り、 自動的に項目の前にスペースを追加します。</target>
        </trans-unit>
        <trans-unit id="057d58c74d80136578cabbeee1b89206c3250bd4" translate="yes" xml:space="preserve">
          <source>Assignments</source>
          <target state="translated">Assignments</target>
        </trans-unit>
        <trans-unit id="c710cdcf52ba6f6f820a72816ca9ea8cc8f23ac9" translate="yes" xml:space="preserve">
          <source>Assignments use the &lt;code&gt;set&lt;/code&gt; tag and can have multiple targets:</source>
          <target state="translated">割り当ては &lt;code&gt;set&lt;/code&gt; タグを使用し、複数のターゲットを持つことができます。</target>
        </trans-unit>
        <trans-unit id="457c2e7a9e22abbac17a6b266443ad75438fd265" translate="yes" xml:space="preserve">
          <source>Assigns a block to a target.</source>
          <target state="translated">ブロックをターゲットに割り当てます。</target>
        </trans-unit>
        <trans-unit id="c95c6ecfc14902b1d120d655ae0c06652573358c" translate="yes" xml:space="preserve">
          <source>Assigns an expression to a target.</source>
          <target state="translated">式をターゲットに割り当てます。</target>
        </trans-unit>
        <trans-unit id="d7aded35723250d051a02fa65ee95b1f12e8b3e8" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;env&lt;/code&gt; is a &lt;code&gt;SandboxedEnvironment&lt;/code&gt; in the default configuration the following piece of code shows how it works:</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; がデフォルト構成の &lt;code&gt;SandboxedEnvironment&lt;/code&gt; であると仮定すると、次のコードはそれがどのように機能するかを示しています。</target>
        </trans-unit>
        <trans-unit id="baead188ae053930fb512c469516d88d1618f3cf" translate="yes" xml:space="preserve">
          <source>Async Support</source>
          <target state="translated">非同期サポート</target>
        </trans-unit>
        <trans-unit id="ad748b9af221b55902cbe5a7e38dc459a068b08e" translate="yes" xml:space="preserve">
          <source>Autoescape Extension</source>
          <target state="translated">オートスケープ拡張</target>
        </trans-unit>
        <trans-unit id="18de1d070adcdd267df7d53b0d53ef513c18c8cf" translate="yes" xml:space="preserve">
          <source>Autoescape Overrides</source>
          <target state="translated">オートスケープのオーバーライド</target>
        </trans-unit>
        <trans-unit id="7dec128dd1c1d676d1d6523f8fe91ab805d24681" translate="yes" xml:space="preserve">
          <source>Autoescaping</source>
          <target state="translated">Autoescaping</target>
        </trans-unit>
        <trans-unit id="e23a41b7e0664e62ff88ff531b67206d021bcdc7" translate="yes" xml:space="preserve">
          <source>Awaitable objects can be returned from functions in templates and any function call in a template will automatically await the result. The &lt;code&gt;await&lt;/code&gt; you would normally add in Python is implied. For example, you can provide a method that asynchronously loads data from a database, and from the template designer&amp;rsquo;s point of view it can be called like any other function.</source>
          <target state="translated">待機可能なオブジェクトはテンプレート内の関数から返すことができ、テンプレート内の関数呼び出しは自動的に結果を待機します。 &lt;code&gt;await&lt;/code&gt; あなたは、通常のPythonに追加することになりますが暗示されます。たとえば、データベースからデータを非同期的にロードするメソッドを提供できます。テンプレートデザイナーの観点からは、他の関数と同じように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0cfbd7426a01577f048cb45c7edfcaaaec78d190" translate="yes" xml:space="preserve">
          <source>Babel Integration</source>
          <target state="translated">バベル統合</target>
        </trans-unit>
        <trans-unit id="635dad9cdab682202ef019467eedc43b2db6b953" translate="yes" xml:space="preserve">
          <source>Base Template</source>
          <target state="translated">ベーステンプレート</target>
        </trans-unit>
        <trans-unit id="2251f9ed0fe4a93cf01629fb051e9ef9706fb8bf" translate="yes" xml:space="preserve">
          <source>Base node for all statements.</source>
          <target state="translated">すべてのステートメントのベースノード。</target>
        </trans-unit>
        <trans-unit id="cd8358bba3bbd7fa77202c77cc0fde5090cf9e4f" translate="yes" xml:space="preserve">
          <source>Baseclass for all Jinja nodes. There are a number of nodes available of different types. There are four major types:</source>
          <target state="translated">すべてのJinjaノードのベースクラスです。さまざまなタイプのノードが用意されています。大きく分けて4つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="13e62a9cf5b33427b853e406036454d5f97a989c" translate="yes" xml:space="preserve">
          <source>Baseclass for all binary expressions.</source>
          <target state="translated">すべての二項式の基底クラス。</target>
        </trans-unit>
        <trans-unit id="e48873a12ce8deaf4e3bf42a8fbd8295532355c1" translate="yes" xml:space="preserve">
          <source>Baseclass for all expressions.</source>
          <target state="translated">すべての式のベースクラス。</target>
        </trans-unit>
        <trans-unit id="8addc3790d98f4ac6e47134bf85a583a61ae31ca" translate="yes" xml:space="preserve">
          <source>Baseclass for all loaders. Subclass this and override &lt;code&gt;get_source&lt;/code&gt; to implement a custom loading mechanism. The environment provides a &lt;code&gt;get_template&lt;/code&gt; method that calls the loader&amp;rsquo;s &lt;code&gt;load&lt;/code&gt; method to get the &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">すべてのローダーの基本クラス。これをサブクラス化し、 &lt;code&gt;get_source&lt;/code&gt; をオーバーライドして、カスタムロードメカニズムを実装します。この環境は、ローダーの &lt;code&gt;load&lt;/code&gt; メソッドを呼び出して&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;オブジェクトを取得する &lt;code&gt;get_template&lt;/code&gt; メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="513b6e57cdd7f059da2cbb16739d4d53c2e9fc86" translate="yes" xml:space="preserve">
          <source>Baseclass for all template errors.</source>
          <target state="translated">すべてのテンプレートエラーのためのベースクラス。</target>
        </trans-unit>
        <trans-unit id="316c76fb5e056632cb2843309fa5686e3e7e61e9" translate="yes" xml:space="preserve">
          <source>Baseclass for all unary expressions.</source>
          <target state="translated">すべての単項式の基底クラス.</target>
        </trans-unit>
        <trans-unit id="df6cde3d07b0a47f714d633db9dc26ba219530fa" translate="yes" xml:space="preserve">
          <source>Baseclass for literals.</source>
          <target state="translated">リテラルのベースクラス。</target>
        </trans-unit>
        <trans-unit id="a95a93dea4bd76ef1b6385cb96f21a4ab35c02b5" translate="yes" xml:space="preserve">
          <source>Basic API Usage</source>
          <target state="translated">基本的なAPIの使い方</target>
        </trans-unit>
        <trans-unit id="20bb51db1025d5bacad24a4d1a40e0911f761de0" translate="yes" xml:space="preserve">
          <source>Basic wrapper around &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt;&lt;code&gt;urllib.parse.quote()&lt;/code&gt;&lt;/a&gt; when given a string, or &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; for a dict or iterable.</source>
          <target state="translated">文字列が指定された場合は&lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt; &lt;code&gt;urllib.parse.quote()&lt;/code&gt; の&lt;/a&gt;基本ラッパー、dictまたはiterableの場合は&lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="1b1ca912dfcc15091aebc166a17dc46cf49e0e35" translate="yes" xml:space="preserve">
          <source>Because auto reloading is rarely useful this is disabled per default.</source>
          <target state="translated">自動リロードはほとんど役に立たないので、デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="2f93e8fd54af9c37668e42a0ce0d62c278c9f7e2" translate="yes" xml:space="preserve">
          <source>Because it is common to set variables at the beginning of the scope, you can do that within the &lt;code&gt;with&lt;/code&gt; statement. The following two examples are equivalent:</source>
          <target state="translated">スコープの先頭に変数を設定するのが一般的であるため、 &lt;code&gt;with&lt;/code&gt; ステートメント内でそれを行うことができます。次の2つの例は同等です。</target>
        </trans-unit>
        <trans-unit id="8430e917abb43c009e5ec47628fe7046f75627fb" translate="yes" xml:space="preserve">
          <source>Because tuples do not require delimiters and may end in a bogus comma an extra hint is needed that marks the end of a tuple. For example for loops support tuples between &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt;. In that case the &lt;code&gt;extra_end_rules&lt;/code&gt; is set to &lt;code&gt;['name:in']&lt;/code&gt;.</source>
          <target state="translated">タプルは区切り文字を必要とせず、偽のコンマで終わる可能性があるため、タプルの終わりを示す追加のヒントが必要です。たとえば、forループは、 &lt;code&gt;for&lt;/code&gt; と &lt;code&gt;in&lt;/code&gt; の間のタプルをサポートします。その場合、 &lt;code&gt;extra_end_rules&lt;/code&gt; は &lt;code&gt;['name:in']&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="208e5a3a17bda2747037c73c2d2e3cb4837998a4" translate="yes" xml:space="preserve">
          <source>Below is a minimal template that illustrates a few basics using the default Jinja configuration. We will cover the details later in this document:</source>
          <target state="translated">以下は、Jinjaのデフォルト設定を使った基本的なテンプレートです。詳細は後ほど説明します。</target>
        </trans-unit>
        <trans-unit id="6112a6e696f77c86458d53b754e63ef72eb4816d" translate="yes" xml:space="preserve">
          <source>Beside filters, there are also so-called &amp;ldquo;tests&amp;rdquo; available. Tests can be used to test a variable against a common expression. To test a variable or expression, you add &lt;code&gt;is&lt;/code&gt; plus the name of the test after the variable. For example, to find out if a variable is defined, you can do &lt;code&gt;name is defined&lt;/code&gt;, which will then return true or false depending on whether &lt;code&gt;name&lt;/code&gt; is defined in the current template context.</source>
          <target state="translated">フィルタのほかに、いわゆる「テスト」も利用できます。テストは、一般的な式に対して変数をテストするために使用できます。変数または式をテストするに &lt;code&gt;is&lt;/code&gt; 、変数の後にisとテストの名前を追加します。たとえば、変数が定義されているかどうかを調べるために、あなたが行うことができ &lt;code&gt;name is defined&lt;/code&gt; た後かどうかに応じて、trueまたはfalseを返しれる、 &lt;code&gt;name&lt;/code&gt; 現在のテンプレートコンテキストに定義されています。</target>
        </trans-unit>
        <trans-unit id="447463cb68115cfabb41303ba92132edb1aea393" translate="yes" xml:space="preserve">
          <source>Block Assignments</source>
          <target state="translated">ブロックの割り当て</target>
        </trans-unit>
        <trans-unit id="f0df383d4e0feb1807cf6bfd346518081aef6280" translate="yes" xml:space="preserve">
          <source>Block Nesting and Scope</source>
          <target state="translated">ブロックのネスティングとスコープ</target>
        </trans-unit>
        <trans-unit id="54c45c033f5eb914fae27a646cbd9e23d3750d19" translate="yes" xml:space="preserve">
          <source>Blocks</source>
          <target state="translated">Blocks</target>
        </trans-unit>
        <trans-unit id="163d6f0eb763b345c69b6c34da85cdf2b4625b94" translate="yes" xml:space="preserve">
          <source>Blocks are used for inheritance and act as both placeholders and replacements at the same time. They are documented in detail in the &lt;a href=&quot;#template-inheritance&quot;&gt;Template Inheritance&lt;/a&gt; section.</source>
          <target state="translated">ブロックは継承に使用され、プレースホルダーと置換の両方として同時に機能します。これらは、&lt;a href=&quot;#template-inheritance&quot;&gt;テンプレートの継承&lt;/a&gt;セクションに詳細に記載されています。</target>
        </trans-unit>
        <trans-unit id="8f206fc6993b1a619ca6b053e78f9e648252963a" translate="yes" xml:space="preserve">
          <source>Blocks can be nested for more complex layouts. However, per default blocks may not access variables from outer scopes:</source>
          <target state="translated">ブロックは、より複雑なレイアウトのために入れ子にすることができます。しかし、デフォルトでは、ブロックは外部スコープから変数にアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="1c4c37f3e7133f8fe589350b01dff7f0ef70089f" translate="yes" xml:space="preserve">
          <source>Break a loop.</source>
          <target state="translated">ループを壊す。</target>
        </trans-unit>
        <trans-unit id="ac25bca73838cd62efe9709d3ec0b4578d6937bf" translate="yes" xml:space="preserve">
          <source>Buckets are used to store the bytecode for one template. It&amp;rsquo;s created and initialized by the bytecode cache and passed to the loading functions.</source>
          <target state="translated">バケットは、1つのテンプレートのバイトコードを格納するために使用されます。バイトコードキャッシュによって作成および初期化され、ロード関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="f28d5d416866defa72eb2d763a6d804ceb1a1511" translate="yes" xml:space="preserve">
          <source>Builtin bytecode caches:</source>
          <target state="translated">ビルトインバイトコードキャッシュ。</target>
        </trans-unit>
        <trans-unit id="e6714e72e60ca0b56ba927374c9f559014f90002" translate="yes" xml:space="preserve">
          <source>But this behavior can depend on the application embedding Jinja. Note that since the child template doesn&amp;rsquo;t define the &lt;code&gt;footer&lt;/code&gt; block, the value from the parent template is used instead.</source>
          <target state="translated">ただし、この動作は、Jinjaを埋め込むアプリケーションに依存する可能性があります。子テンプレートは &lt;code&gt;footer&lt;/code&gt; ブロックを定義しないため、代わりに親テンプレートの値が使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9fb0019a82a791a00d0e0c5b4910290a7a37d15c" translate="yes" xml:space="preserve">
          <source>But with both &lt;code&gt;trim_blocks&lt;/code&gt; and &lt;code&gt;lstrip_blocks&lt;/code&gt; enabled, the template block lines are removed and other whitespace is preserved:</source>
          <target state="translated">ただし、 &lt;code&gt;trim_blocks&lt;/code&gt; と &lt;code&gt;lstrip_blocks&lt;/code&gt; の両方を有効にすると、テンプレートのブロック行が削除され、他の空白が保持されます。</target>
        </trans-unit>
        <trans-unit id="793c7881dc6324471fed57d2f77e7ad19d481653" translate="yes" xml:space="preserve">
          <source>By creating an instance of &lt;a href=&quot;../api/index#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; you get back a new template object that provides a method called &lt;a href=&quot;../api/index#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; which when called with a dict or keyword arguments expands the template. The dict or keywords arguments passed to the template are the so-called &amp;ldquo;context&amp;rdquo; of the template.</source>
          <target state="translated">&lt;a href=&quot;../api/index#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;のインスタンスを作成することにより、dictまたはkeyword引数を指定して呼び出されたときにテンプレートを展開&lt;a href=&quot;../api/index#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;というメソッドを提供する新しいテンプレートオブジェクトを取得します。テンプレートに渡されるdictまたはkeywords引数は、テンプレートのいわゆる「コンテキスト」です。</target>
        </trans-unit>
        <trans-unit id="fae74660e1275204f6fb4d595003929673e566da" translate="yes" xml:space="preserve">
          <source>By default template compilation errors are ignored. In case a log function is provided, errors are logged. If you want template syntax errors to abort the compilation you can set &lt;code&gt;ignore_errors&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; and you will get an exception on syntax errors.</source>
          <target state="translated">デフォルトでは、テンプレートのコンパイルエラーは無視されます。ログ機能が提供されている場合、エラーがログに記録されます。テンプレート構文エラーでコンパイルを中止する場合は、 &lt;code&gt;ignore_errors&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; に設定すると、構文エラーで例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d033cdb5471e1bb46bbb9f0802304dac54dffc0f" translate="yes" xml:space="preserve">
          <source>By default, Jinja also removes trailing newlines. To keep single trailing newlines, configure Jinja to &lt;code&gt;keep_trailing_newline&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Jinjaは末尾の改行も削除します。末尾の改行を1つ保持するには、Jinjaを &lt;code&gt;keep_trailing_newline&lt;/code&gt; に構成します。</target>
        </trans-unit>
        <trans-unit id="80a7084f562f84c21236b73bf66409fdb58ec4c2" translate="yes" xml:space="preserve">
          <source>By default, async support is disabled. Enabling it will cause the environment to compile different code behind the scenes in order to handle async and sync code in an asyncio event loop. This has the following implications:</source>
          <target state="translated">デフォルトでは、非同期のサポートは無効になっています。これを有効にすると、非同期と同期のコードをasyncioイベントループで処理するために、環境が別のコードを裏でコンパイルするようになります。これは次のような意味合いを持ちます。</target>
        </trans-unit>
        <trans-unit id="39ed7612be7cc888d57e984cf91d0b4e031dcb08" translate="yes" xml:space="preserve">
          <source>By default, included templates are passed the current context and imported templates are not. The reason for this is that imports, unlike includes, are cached; as imports are often used just as a module that holds macros.</source>
          <target state="translated">デフォルトでは、インクルードされたテンプレートには現在のコンテキストが渡され、インポートされたテンプレートには渡されません。これは、インポートはインクルードと違ってキャッシュされるからです。</target>
        </trans-unit>
        <trans-unit id="d93544069e7102d410df089bbd7da30e9928ad39" translate="yes" xml:space="preserve">
          <source>By default, the first variable in a block is used to determine whether to use singular or plural form. If that isn&amp;rsquo;t correct, specify the variable used for pluralizing as a parameter to &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、ブロックの最初の変数は、単数形と複数形のどちらを使用するかを決定するために使用されます。それが正しくない場合は、パラメータとして複数形のために使用する変数を指定 &lt;code&gt;pluralize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69aed97047674550cc53a9d32e3594012191b213" translate="yes" xml:space="preserve">
          <source>By loading &lt;code&gt;'app1/index.html'&lt;/code&gt; the file from the app1 package is loaded, by loading &lt;code&gt;'app2/index.html'&lt;/code&gt; the file from the second.</source>
          <target state="translated">ロードすることにより、 &lt;code&gt;'app1/index.html'&lt;/code&gt; APP1パッケージからファイルをロードすることにより、ロードされている &lt;code&gt;'app2/index.html'&lt;/code&gt; 第二のファイル。</target>
        </trans-unit>
        <trans-unit id="73b30cafbe7ffd835ddd7d892e45232ea0ead87a" translate="yes" xml:space="preserve">
          <source>By writing extensions you can add custom tags to Jinja. This is a non-trivial task and usually not needed as the default tags and expressions cover all common use cases. The i18n extension is a good example of why extensions are useful. Another one would be fragment caching.</source>
          <target state="translated">拡張機能を書くことで、Jinjaにカスタムタグを追加することができます。これは簡単な作業ではありませんが、デフォルトのタグや式が一般的なユースケースをすべてカバーしているので、通常は必要ありません。i18n 拡張機能は、拡張機能がなぜ便利なのかを示す良い例です。もうひとつはフラグメントキャッシングです。</target>
        </trans-unit>
        <trans-unit id="5372ac390c34bd4fed8b2e1d2dfa8dd1ca3097f2" translate="yes" xml:space="preserve">
          <source>Bytecode Cache</source>
          <target state="translated">バイトコードキャッシュ</target>
        </trans-unit>
        <trans-unit id="50338b3b242845e21a0ace9ae9684283d945fb52" translate="yes" xml:space="preserve">
          <source>Cache</source>
          <target state="translated">Cache</target>
        </trans-unit>
        <trans-unit id="311d573459612cfdc24a3902bb228a4b0cccc394" translate="yes" xml:space="preserve">
          <source>Calculate the remainder of an integer division. &lt;code&gt;{{ 11 % 7 }}&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">整数除算の余りを計算します。 &lt;code&gt;{{ 11 % 7 }}&lt;/code&gt; は &lt;code&gt;4&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="291a0a58dfa6c640a90c1d868d2af190775ea219" translate="yes" xml:space="preserve">
          <source>Call</source>
          <target state="translated">Call</target>
        </trans-unit>
        <trans-unit id="3b76bf2126a09d45269b2bc430bfa611e2d6d409" translate="yes" xml:space="preserve">
          <source>Call a callable: &lt;code&gt;{{ post.render() }}&lt;/code&gt;. Inside of the parentheses you can use positional arguments and keyword arguments like in Python:</source>
          <target state="translated">呼び出し可能オブジェクトを呼び出します： &lt;code&gt;{{ post.render() }}&lt;/code&gt; 。括弧内では、Pythonのように位置引数とキーワード引数を使用できます。</target>
        </trans-unit>
        <trans-unit id="c8c5d73825490e79cb63f09216b2d8252e59a934" translate="yes" xml:space="preserve">
          <source>Call a method of the extension. This is a shortcut for &lt;a href=&quot;../templates/index#attr&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; + &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt;&lt;code&gt;jinja2.nodes.Call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">拡張機能のメソッドを呼び出します。これは&lt;a href=&quot;../templates/index#attr&quot;&gt; &lt;code&gt;attr()&lt;/code&gt; &lt;/a&gt; + &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt; &lt;code&gt;jinja2.nodes.Call&lt;/code&gt; の&lt;/a&gt;ショートカットです。</target>
        </trans-unit>
        <trans-unit id="690a80633cf9b3f5c2d4bd8973539215c0cdcf6d" translate="yes" xml:space="preserve">
          <source>Call the callable with the arguments and keyword arguments provided but inject the active context or environment as first argument if the callable is a &lt;code&gt;contextfunction()&lt;/code&gt; or &lt;code&gt;environmentfunction()&lt;/code&gt;.</source>
          <target state="translated">提供された引数とキーワード引数を使用してcallableを呼び出しますが、callableが &lt;code&gt;contextfunction()&lt;/code&gt; または &lt;code&gt;environmentfunction()&lt;/code&gt; の場合は、最初の引数としてアクティブなコンテキストまたは環境を挿入します。</target>
        </trans-unit>
        <trans-unit id="888b2ec46585896971cb4af50fae8d20995ba6e6" translate="yes" xml:space="preserve">
          <source>Calls an expression. &lt;code&gt;args&lt;/code&gt; is a list of arguments, &lt;code&gt;kwargs&lt;/code&gt; a list of keyword arguments (list of &lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt; nodes), and &lt;code&gt;dyn_args&lt;/code&gt; and &lt;code&gt;dyn_kwargs&lt;/code&gt; has to be either &lt;code&gt;None&lt;/code&gt; or a node that is used as node for dynamic positional (&lt;code&gt;*args&lt;/code&gt;) or keyword (&lt;code&gt;**kwargs&lt;/code&gt;) arguments.</source>
          <target state="translated">式を呼び出します。 &lt;code&gt;args&lt;/code&gt; は引数のリスト、 &lt;code&gt;kwargs&lt;/code&gt; はキーワード引数のリスト（&lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;ノードのリスト）であり、 &lt;code&gt;dyn_args&lt;/code&gt; と &lt;code&gt;dyn_kwargs&lt;/code&gt; は、 &lt;code&gt;None&lt;/code&gt; 、または動的定位置（ &lt;code&gt;*args&lt;/code&gt; ）またはキーワード（ &lt;code&gt;**kwargs&lt;/code&gt; ）のノードとして使用されるノードである必要があります。）引数。</target>
        </trans-unit>
        <trans-unit id="ac581ba0f3dd1ff4c585d372871c7da83e579842" translate="yes" xml:space="preserve">
          <source>Capitalize a value. The first character will be uppercase, all others lowercase.</source>
          <target state="translated">値を大文字にします。最初の文字は大文字、それ以外は小文字になります。</target>
        </trans-unit>
        <trans-unit id="698b2aa739a5adac275a1b1c1b14ec3c80549813" translate="yes" xml:space="preserve">
          <source>Centers the value in a field of a given width.</source>
          <target state="translated">指定した幅のフィールド内の値をセンタリングします。</target>
        </trans-unit>
        <trans-unit id="4846b79cdf556dc5006ad7fe63666f414fbc53dc" translate="yes" xml:space="preserve">
          <source>Changed in version 2.10.</source>
          <target state="translated">バージョン2.10で変更。</target>
        </trans-unit>
        <trans-unit id="3397f2b4b36d6f196c5522d8d8be89707e3e0036" translate="yes" xml:space="preserve">
          <source>Changed in version 2.10: Blank lines are not indented by default.</source>
          <target state="translated">バージョン 2.10 で変更:デフォルトでは空行はインデントされません。</target>
        </trans-unit>
        <trans-unit id="7256e767bd6c7fc257cf38e2c41ad126c8b48a4f" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11.0: Added the &lt;code&gt;default&lt;/code&gt; parameter.</source>
          <target state="translated">バージョン2.11.0で変更： &lt;code&gt;default&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="e808c696c9283917aa1a52685f13b884e38b3145" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11.0: The &lt;code&gt;attribute&lt;/code&gt; parameter can be a comma separated list of attributes, e.g. &lt;code&gt;&quot;age,name&quot;&lt;/code&gt;.</source>
          <target state="translated">バージョン2.11.0で変更： &lt;code&gt;attribute&lt;/code&gt; パラメーターは、 &lt;code&gt;&quot;age,name&quot;&lt;/code&gt; などの属性のコンマ区切りリストにすることができます。</target>
        </trans-unit>
        <trans-unit id="55afd0eebb123568cd1caf3eac876fa5f9a03f9a" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: Added the &lt;code&gt;break_on_hyphens&lt;/code&gt; parameter.</source>
          <target state="translated">バージョン2.11で変更： &lt;code&gt;break_on_hyphens&lt;/code&gt; パラメーターが追加されました。</target>
        </trans-unit>
        <trans-unit id="d177ebff949ce4bed7b0d300e0e1099a8760757c" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: Existing newlines are treated as paragraphs wrapped separately.</source>
          <target state="translated">バージョン2.11での変更点:既存の改行は段落として扱われ、別個に折り返されるようになりました。</target>
        </trans-unit>
        <trans-unit id="62d98e6f2b509855ed2a742b692402eb6e94e505" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: If a name in the list of names is &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;, a message about it being undefined is shown rather than the empty string.</source>
          <target state="translated">バージョン2.11で変更されました。名前のリスト内の名前が&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;場合、空の文字列ではなく、未定義であることを示すメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="e42ee2db856a7915eb1f5241e2c235e0ecef3b14" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: If names is &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt; is raised instead. If no templates were found and names contains &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;, the message is more helpful.</source>
          <target state="translated">バージョン2.11で変更されました。名前が&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; の&lt;/a&gt;場合、代わりに&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;が発生します。テンプレートが見つからず、名前に&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;が含まれている場合は、メッセージの方が役立ちます。</target>
        </trans-unit>
        <trans-unit id="b93d2d68fbc6d875f6d6834fce8d7b3a5c5a205f" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: If the given name is &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; and no message was provided, an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">バージョン2.11で変更されました。指定された名前が&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; で&lt;/a&gt;あり、メッセージが提供されなかった場合、&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="3e2800c979d6bb685d6bfc2553912ed23521a4fb" translate="yes" xml:space="preserve">
          <source>Changed in version 2.11: It&amp;rsquo;s now possible to configure the &lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../api/index#jinja2.ChainableUndefined&quot;&gt;&lt;code&gt;ChainableUndefined&lt;/code&gt;&lt;/a&gt; to make the &lt;code&gt;default&lt;/code&gt; filter work on nested elements and attributes that may contain undefined values in the chain without getting an &lt;a href=&quot;../api/index#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン2.11で変更：&lt;a href=&quot;../api/index#jinja2.ChainableUndefined&quot;&gt; &lt;code&gt;ChainableUndefined&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;を構成し、&lt;a href=&quot;../api/index#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;を取得せずに、チェーン内の未定義の値を含む可能性のあるネストされた要素および属性に対して &lt;code&gt;default&lt;/code&gt; フィルターを機能させることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="f3ab0cf1500201dd687e8c635d5a9c7c832c33dc" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4.</source>
          <target state="translated">バージョン2.4で変更。</target>
        </trans-unit>
        <trans-unit id="2a5e679cb3cbedd10771e41cd9eb3fa7eb724b81" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: &lt;code&gt;autoescape&lt;/code&gt; can now be a function</source>
          <target state="translated">バージョン2.4で変更： &lt;code&gt;autoescape&lt;/code&gt; を関数にできるようになりました</target>
        </trans-unit>
        <trans-unit id="20cef282203dedbd8aaffb16fbaf70db1f1f30c6" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If &lt;code&gt;name&lt;/code&gt; is a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object it is returned from the function unchanged.</source>
          <target state="translated">バージョン2.4で変更： &lt;code&gt;name&lt;/code&gt; が&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;オブジェクトの場合、関数から変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="27b130bf4591767d01be4a8ba6165190e388d9b1" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If &lt;code&gt;names&lt;/code&gt; contains a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object it is returned from the function unchanged.</source>
          <target state="translated">バージョン2.4で変更： &lt;code&gt;names&lt;/code&gt; に&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;オブジェクトが含まれている場合、関数から変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="a16e2bf0945db322464fd0beb674b990aa4713df" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If a template object was passed to the template context, you can import from that object.</source>
          <target state="translated">バージョン 2.4 で変更:テンプレートオブジェクトがテンプレートコンテキストに渡された場合、そのオブジェクトからインポートできるようになりました。</target>
        </trans-unit>
        <trans-unit id="f6e702f9fba904e46b51956430d8c553bad3003e" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: If a template object was passed to the template context, you can include that object using &lt;code&gt;include&lt;/code&gt;.</source>
          <target state="translated">バージョン2.4で変更：テンプレートオブジェクトがテンプレートコンテキストに渡された場合、includeを使用してそのオブジェクトを &lt;code&gt;include&lt;/code&gt; ことができます。</target>
        </trans-unit>
        <trans-unit id="0e7c88f1919bd1b01de4a7403ef590cdb345565b" translate="yes" xml:space="preserve">
          <source>Changed in version 2.4: the &lt;code&gt;eval_ctx&lt;/code&gt; parameter was added.</source>
          <target state="translated">バージョン2.4で変更： &lt;code&gt;eval_ctx&lt;/code&gt; パラメーターが追加されました。</target>
        </trans-unit>
        <trans-unit id="76b4f4c9a3c35bbffc4f430c3a7f0f63053dad02" translate="yes" xml:space="preserve">
          <source>Changed in version 2.5: Added new-style gettext support.</source>
          <target state="translated">バージョン 2.5 で変更:新しいスタイルの gettext サポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="f1bf05544b830b967ec87f22b52888aea4ec3f1f" translate="yes" xml:space="preserve">
          <source>Changed in version 2.6: The &lt;code&gt;attribute&lt;/code&gt; parameter was added to allow suming up over attributes. Also the &lt;code&gt;start&lt;/code&gt; parameter was moved on to the right.</source>
          <target state="translated">バージョン2.6で変更： &lt;code&gt;attribute&lt;/code&gt; パラメーターが追加され、属性を合計できるようになりました。また、 &lt;code&gt;start&lt;/code&gt; パラメーターが右に移動されました。</target>
        </trans-unit>
        <trans-unit id="a68ff0313a5e772e2dc086ec8420fb0835215ab9" translate="yes" xml:space="preserve">
          <source>Changed in version 2.6: The &lt;code&gt;attribute&lt;/code&gt; parameter was added.</source>
          <target state="translated">バージョン2.6で変更： &lt;code&gt;attribute&lt;/code&gt; パラメーターが追加されました。</target>
        </trans-unit>
        <trans-unit id="b4f333003fa0d883b83338ac5cc3662b32f3a5c9" translate="yes" xml:space="preserve">
          <source>Changed in version 2.6: The attribute supports dot notation for nested access.</source>
          <target state="translated">バージョン 2.6 で変更:この属性は、入れ子になったアクセスのドット表記をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a38c7607ea4965bd4c984586bcc29650f4ca3e75" translate="yes" xml:space="preserve">
          <source>Changed in version 2.7: Added the &lt;code&gt;wrapstring&lt;/code&gt; parameter.</source>
          <target state="translated">バージョン2.7で変更： &lt;code&gt;wrapstring&lt;/code&gt; パラメーターが追加されました。</target>
        </trans-unit>
        <trans-unit id="bcd4b77c30a79b8cbecbfa51bb28c2a466cf66ac" translate="yes" xml:space="preserve">
          <source>Changed in version 2.8+: The &lt;em&gt;target&lt;/em&gt; parameter was added.</source>
          <target state="translated">バージョン2.8以降で変更：&lt;em&gt;ターゲット&lt;/em&gt;パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="ec488c0d8958e81067093af63e5b682245cb942d" translate="yes" xml:space="preserve">
          <source>Changed in version 2.8: The &lt;code&gt;followlinks&lt;/code&gt; parameter was added.</source>
          <target state="translated">バージョン2.8で変更： &lt;code&gt;followlinks&lt;/code&gt; パラメーターが追加されました。</target>
        </trans-unit>
        <trans-unit id="193d5e0e1071037b1be3157953c3d0214e38c000" translate="yes" xml:space="preserve">
          <source>Changed in version 2.8: The cache size was increased to 400 from a low 50.</source>
          <target state="translated">バージョン 2.8 で変更:キャッシュサイズが 50 から 400 に増加しました。</target>
        </trans-unit>
        <trans-unit id="9f5e44e5b084476f8fc6286b628e89669375c1e3" translate="yes" xml:space="preserve">
          <source>Changed in version 2.9: This extension is now built-in and no longer does anything.</source>
          <target state="translated">バージョン 2.9 で変更されました。この拡張機能はビルトイン化され、何もしなくなりました。</target>
        </trans-unit>
        <trans-unit id="9a525308cf168ae1a288dadcca4112219e759220" translate="yes" xml:space="preserve">
          <source>Changed in version 2.9: This extension was removed and is now built-in. Enabling the extension no longer does anything.</source>
          <target state="translated">バージョン2.9で変更。この拡張機能は削除され、組み込みになりました。拡張機能を有効にしても何もしなくなりました。</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="6da992afd4248fd66ddb1a0ba1bba03e7dc49644" translate="yes" xml:space="preserve">
          <source>Check if a variable is divisible by a number.</source>
          <target state="translated">変数が数値で割り切れるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="841df0a652bb9511461ba6e31662cbb76d9e0f93" translate="yes" xml:space="preserve">
          <source>Check if an object is safely callable. Per default a function is considered safe unless the &lt;code&gt;unsafe_callable&lt;/code&gt; attribute exists and is True. Override this method to alter the behavior, but this won&amp;rsquo;t affect the &lt;code&gt;unsafe&lt;/code&gt; decorator from this module.</source>
          <target state="translated">オブジェクトが安全に呼び出せるかどうかを確認します。デフォルトでは、 &lt;code&gt;unsafe_callable&lt;/code&gt; 属性が存在し、Trueでない限り、関数は安全であると見なされます。このメソッドをオーバーライドして動作を変更しますが、これはこのモジュールの &lt;code&gt;unsafe&lt;/code&gt; デコレータには影響しません。</target>
        </trans-unit>
        <trans-unit id="1a9ab148b5b69756dbdb63be361961e1b145b139" translate="yes" xml:space="preserve">
          <source>Check if an object points to the same memory address than another object:</source>
          <target state="translated">オブジェクトが他のオブジェクトと同じメモリアドレスを指しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="363546d31f2ea9a4d9cb4ba8d9880e6f320bac87" translate="yes" xml:space="preserve">
          <source>Check if it&amp;rsquo;s possible to assign something to this node.</source>
          <target state="translated">このノードに何かを割り当てることができるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="1bda7bd3fa6ef833a5f1fa087086e8f34b293726" translate="yes" xml:space="preserve">
          <source>Check if it&amp;rsquo;s possible to iterate over an object.</source>
          <target state="translated">オブジェクトを反復処理できるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f3ad08bb4b466c0d290b8693d199b7eb866e5968" translate="yes" xml:space="preserve">
          <source>Check if the object passed is undefined. This does nothing more than performing an instance check against &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; but looks nicer. This can be used for custom filters or tests that want to react to undefined variables. For example a custom default filter can look like this:</source>
          <target state="translated">渡されたオブジェクトが未定義かどうかを確認してください。これは、&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;に対してインスタンスチェックを実行するだけですが、見栄えが良くなります。これは、未定義の変数に反応したいカスタムフィルターまたはテストに使用できます。たとえば、カスタムのデフォルトフィルタは次のようになります。</target>
        </trans-unit>
        <trans-unit id="4d5765d2303b3cb25d878b864fa2fa0ac5f5f835" translate="yes" xml:space="preserve">
          <source>Check if the value is escaped.</source>
          <target state="translated">値がエスケープされているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="c0ae3522b0a93adad467a1c484e47da55f31a184" translate="yes" xml:space="preserve">
          <source>Check if value is in seq.</source>
          <target state="translated">値がseqにあるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="996e31f727a5d55f1c2c9ecc6fab3703f07517ac" translate="yes" xml:space="preserve">
          <source>Child Template</source>
          <target state="translated">子テンプレート</target>
        </trans-unit>
        <trans-unit id="a9fc65492e113f5f3fbeb978e529896859996ac4" translate="yes" xml:space="preserve">
          <source>Clears the cache. This method is not used by Jinja but should be implemented to allow applications to clear the bytecode cache used by a particular environment.</source>
          <target state="translated">キャッシュをクリアします。このメソッドはJinjaでは使用しませんが、アプリケーションが特定の環境で使用しているバイトコードキャッシュをクリアできるように実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="55bad9dbf1b0a8f95470d6d98c1a69a5d90a765a" translate="yes" xml:space="preserve">
          <source>Compares an expression with some other expressions. &lt;code&gt;ops&lt;/code&gt; must be a list of &lt;a href=&quot;#jinja2.nodes.Operand&quot;&gt;&lt;code&gt;Operand&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">式を他の式と比較します。 &lt;code&gt;ops&lt;/code&gt; は&lt;a href=&quot;#jinja2.nodes.Operand&quot;&gt; &lt;code&gt;Operand&lt;/code&gt; &lt;/a&gt;のリストである必要があります。</target>
        </trans-unit>
        <trans-unit id="6798dadbab187e5a3f3cf58ab777a36a4683248e" translate="yes" xml:space="preserve">
          <source>Compares two objects for equality.</source>
          <target state="translated">2つの対象物を比較して等しくなるようにします。</target>
        </trans-unit>
        <trans-unit id="e8fb4e6aa43e63ea6e810fef68b470d4f9e9a290" translate="yes" xml:space="preserve">
          <source>Compares two objects for inequality.</source>
          <target state="translated">不等式のために2つのオブジェクトを比較します。</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="22871478dfd8421b5b22b27e4becedea5103b9fe" translate="yes" xml:space="preserve">
          <source>Concatenates the list of expressions provided after converting them to unicode.</source>
          <target state="translated">与えられた式のリストを unicode に変換した後に連結します。</target>
        </trans-unit>
        <trans-unit id="d8d45072305fae18f820f85e7f32f6240b9ebe52" translate="yes" xml:space="preserve">
          <source>Configures the leeway default for the &lt;code&gt;truncate&lt;/code&gt; filter. Leeway as introduced in 2.9 but to restore compatibility with older templates it can be configured to &lt;code&gt;0&lt;/code&gt; to get the old behavior back. The default is &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;truncate&lt;/code&gt; フィルターの余裕のデフォルトを構成します。Leewayは2.9で導入されましたが、古いテンプレートとの互換性を復元するために、 &lt;code&gt;0&lt;/code&gt; に構成して古い動作を取り戻すことができます。デフォルトは &lt;code&gt;5&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e416e43f493dc03bd7f45d55965a398e7052a174" translate="yes" xml:space="preserve">
          <source>Contents:</source>
          <target state="translated">Contents:</target>
        </trans-unit>
        <trans-unit id="adcb150051166bc0a81dc53d6d057bfd0edada64" translate="yes" xml:space="preserve">
          <source>Context filters work the same just that the first argument is the current active &lt;code&gt;Context&lt;/code&gt; rather than the environment.</source>
          <target state="translated">コンテキストフィルターは、最初の引数が環境ではなく現在アクティブな &lt;code&gt;Context&lt;/code&gt; であるという点で同じように機能します。</target>
        </trans-unit>
        <trans-unit id="d3953d7d5ec6cbbe11103484ab3c18eeecfc4b12" translate="yes" xml:space="preserve">
          <source>Context is immutable for the same reason Python&amp;rsquo;s frame locals are immutable inside functions. Both Jinja and Python are not using the context / frame locals as data storage for variables but only as primary data source.</source>
          <target state="translated">Pythonのフレームローカルが関数内で不変であるのと同じ理由で、コンテキストは不変です。JinjaとPythonはどちらも、コンテキスト/フレームローカルを変数のデータストレージとして使用せず、プライマリデータソースとしてのみ使用しています。</target>
        </trans-unit>
        <trans-unit id="44cceaaff447d5d81f1501c9a914fc94ae576f4a" translate="yes" xml:space="preserve">
          <source>Continue a loop.</source>
          <target state="translated">ループを続けます。</target>
        </trans-unit>
        <trans-unit id="5c7a42665e37724dbb7ed414ebeda75114a87f13" translate="yes" xml:space="preserve">
          <source>Convenience method that raises &lt;code&gt;exc&lt;/code&gt; with the message, passed line number or last line number as well as the current name and filename.</source>
          <target state="translated">メッセージ、渡された行番号または最後の行番号、および現在の名前とファイル名で &lt;code&gt;exc&lt;/code&gt; を発生させる便利なメソッド。</target>
        </trans-unit>
        <trans-unit id="0a591f82700800891bf0d5a22d4a614840d215b2" translate="yes" xml:space="preserve">
          <source>Convert a value to lowercase.</source>
          <target state="translated">値を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="452f69bce5bd0acadafe8da2d8dc1f4ca03b6ebf" translate="yes" xml:space="preserve">
          <source>Convert a value to uppercase.</source>
          <target state="translated">値を大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="7a708d5af0cab331869a43d779c1cf37f1e403cd" translate="yes" xml:space="preserve">
          <source>Convert escaped markup back into a text string. This replaces HTML entities with the characters they represent.</source>
          <target state="translated">エスケープされたマークアップをテキスト文字列に変換します。これは HTML エンティティを表す文字に置き換えます。</target>
        </trans-unit>
        <trans-unit id="290425dbe558478e9b2edeb4618bed65fb78985e" translate="yes" xml:space="preserve">
          <source>Convert the characters &amp;amp;, &amp;lt;, &amp;gt;, &amp;lsquo;, and &amp;rdquo; in string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. Marks return value as markup string.</source>
          <target state="translated">文字列sの文字＆、&amp;lt;、&amp;gt;、 '、および&amp;rdquo;をHTMLセーフシーケンスに変換します。HTMLでそのような文字を含む可能性のあるテキストを表示する必要がある場合は、これを使用します。戻り値をマークアップ文字列としてマークします。</target>
        </trans-unit>
        <trans-unit id="10254794b2c85e0cac217281081c2c84022d416a" translate="yes" xml:space="preserve">
          <source>Convert the characters &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, and &lt;code&gt;&quot;&lt;/code&gt; in string &lt;code&gt;s&lt;/code&gt; to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. This function will not escaped objects that do have an HTML representation such as already escaped data.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; の文字 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;'&lt;/code&gt; 、および &lt;code&gt;&quot;&lt;/code&gt; をHTMLセーフシーケンスに変換します。このような文字をHTMLで含む可能性のあるテキストを表示する必要がある場合は、これを使用します。この関数は、HTML表現を持つオブジェクトをエスケープしません。すでにエスケープされたデータなど。</target>
        </trans-unit>
        <trans-unit id="3f0c45e33356de890a10c50be428c1d104bacc9f" translate="yes" xml:space="preserve">
          <source>Convert the value into a floating point number. If the conversion doesn&amp;rsquo;t work it will return &lt;code&gt;0.0&lt;/code&gt;. You can override this default using the first parameter.</source>
          <target state="translated">値を浮動小数点数に変換します。変換が機能しない場合は、 &lt;code&gt;0.0&lt;/code&gt; が返されます。最初のパラメーターを使用して、このデフォルトをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="f4ba92ba4d8c73dbfa8609c79e27d4e405c98c17" translate="yes" xml:space="preserve">
          <source>Convert the value into a list. If it was a string the returned list will be a list of characters.</source>
          <target state="translated">値をリストに変換します。文字列の場合は文字列のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="bfb458c037c50d589927fe6272f18c13caeb43f1" translate="yes" xml:space="preserve">
          <source>Convert the value into an integer. If the conversion doesn&amp;rsquo;t work it will return &lt;code&gt;0&lt;/code&gt;. You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values.</source>
          <target state="translated">値を整数に変換します。変換が機能しない場合は、 &lt;code&gt;0&lt;/code&gt; が返されます。最初のパラメーターを使用して、このデフォルトをオーバーライドできます。2番目のパラメーターのデフォルトの基数（10）をオーバーライドすることもできます。このパラメーターは、基数2、8、および16に対してそれぞれ0b、0o、0xなどの接頭辞を持つ入力を処理します。10進数および文字列以外の値の場合、ベースは無視されます。</target>
        </trans-unit>
        <trans-unit id="01b77dcc108f953e69e77e9dbe135eb070a48dbc" translate="yes" xml:space="preserve">
          <source>Converts URLs in plain text into clickable links.</source>
          <target state="translated">プレーンテキストのURLをクリック可能なリンクに変換します。</target>
        </trans-unit>
        <trans-unit id="ae7edf9a4dd3f9745005ff49227d3a6b7ce83519" translate="yes" xml:space="preserve">
          <source>Converts all operands into strings and concatenates them.</source>
          <target state="translated">すべてのオペランドを文字列に変換して連結します。</target>
        </trans-unit>
        <trans-unit id="b4f6bab33ad727a1b3b52cfdc11a809a6362f231" translate="yes" xml:space="preserve">
          <source>Count the number of newline characters in the string. This is useful for extensions that filter a stream.</source>
          <target state="translated">文字列内の改行文字の数をカウントします。これは、ストリームをフィルタリングする拡張機能に便利です。</target>
        </trans-unit>
        <trans-unit id="c66fdd085a1b2ce4f3adbc607c7725792c960d8e" translate="yes" xml:space="preserve">
          <source>Count the words in that string.</source>
          <target state="translated">その文字列の中の単語を数えます。</target>
        </trans-unit>
        <trans-unit id="21a084ce4d86f03c624a0f38c4da0265ee37810f" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;Context&lt;/code&gt; for this template. The vars provided will be passed to the template. Per default the globals are added to the context. If shared is set to &lt;code&gt;True&lt;/code&gt; the data is passed as is to the context without adding the globals.</source>
          <target state="translated">このテンプレートの新しい &lt;code&gt;Context&lt;/code&gt; を作成します。提供された変数はテンプレートに渡されます。デフォルトでは、グローバルはコンテキストに追加されます。sharedが &lt;code&gt;True&lt;/code&gt; に設定されている場合、データはグローバルを追加せずにそのままコンテキストに渡されます。</target>
        </trans-unit>
        <trans-unit id="b92a067f5b9d8e2cea0211a8528cf959fe7d195a" translate="yes" xml:space="preserve">
          <source>Create a new overlay environment that shares all the data with the current environment except for cache and the overridden attributes. Extensions cannot be removed for an overlayed environment. An overlayed environment automatically gets all the extensions of the environment it is linked to plus optional extra extensions.</source>
          <target state="translated">新しいオーバーレイ環境を作成し、キャッシュとオーバーライドされた属性を除くすべてのデータを現在の環境と共有します。オーバーレイ環境では拡張機能を削除することはできません。オーバーレイ環境は、リンク先の環境のすべての拡張機能に加えて、オプションの追加拡張機能を自動的に取得します。</target>
        </trans-unit>
        <trans-unit id="756d2dbfb63a8bb688b01b91f91bfd9ac7d963d0" translate="yes" xml:space="preserve">
          <source>Create an SGML/XML attribute string based on the items in a dict. All values that are neither &lt;code&gt;none&lt;/code&gt; nor &lt;code&gt;undefined&lt;/code&gt; are automatically escaped:</source>
          <target state="translated">dictの項目に基づいてSGML / XML属性文字列を作成します。 &lt;code&gt;none&lt;/code&gt; でも &lt;code&gt;undefined&lt;/code&gt; でもないすべての値は、自動的にエスケープされます。</target>
        </trans-unit>
        <trans-unit id="f5de186f29e8d491638c9b3f1eae6d8942d2a168" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; object for &lt;code&gt;name&lt;/code&gt;. This is useful for filters or functions that may return undefined objects for some operations. All parameters except of &lt;code&gt;hint&lt;/code&gt; should be provided as keyword parameters for better readability. The &lt;code&gt;hint&lt;/code&gt; is used as error message for the exception if provided, otherwise the error message will be generated from &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; automatically. The exception provided as &lt;code&gt;exc&lt;/code&gt; is raised if something with the generated undefined object is done that the undefined object does not allow. The default exception is &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;. If a &lt;code&gt;hint&lt;/code&gt; is provided the &lt;code&gt;name&lt;/code&gt; may be omitted.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 新しい&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;オブジェクトを作成します。これは、一部の操作で未定義のオブジェクトを返す可能性のあるフィルターまたは関数に役立ちます。 &lt;code&gt;hint&lt;/code&gt; を除くすべてのパラメーターは、読みやすくするためにキーワードパラメーターとして提供する必要があります。 &lt;code&gt;hint&lt;/code&gt; 提供さ、そうでなければ、エラーメッセージから生成される場合は、例外のエラーメッセージとして使用されている &lt;code&gt;obj&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; を自動的。生成された未定義オブジェクトで、未定義オブジェクトが許可しない処理が行われた場合、 &lt;code&gt;exc&lt;/code&gt; として提供される例外が発生します。デフォルトの例外は&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;です。場合は &lt;code&gt;hint&lt;/code&gt; 提供される &lt;code&gt;name&lt;/code&gt; 省略できます。</target>
        </trans-unit>
        <trans-unit id="ccffd1fd350b2f6c07c9853f79cb8b9f5cd5a940" translate="yes" xml:space="preserve">
          <source>Creates a new container that allows attribute assignment using the &lt;code&gt;{% set %}&lt;/code&gt; tag:</source>
          <target state="translated">&lt;code&gt;{% set %}&lt;/code&gt; タグを使用して属性の割り当てを可能にする新しいコンテナを作成します。</target>
        </trans-unit>
        <trans-unit id="6159115c26a8d86ba6b3be05adeda923c2773fb0" translate="yes" xml:space="preserve">
          <source>Creating overlays should happen after the initial environment was set up completely. Not all attributes are truly linked, some are just copied over so modifications on the original environment may not shine through.</source>
          <target state="translated">オーバーレイの作成は、最初の環境が完全に設定された後に行うべきです。すべての属性が本当にリンクされているわけではなく、一部の属性はコピーされているだけなので、元の環境の変更が反映されていない可能性があります。</target>
        </trans-unit>
        <trans-unit id="a38be5241edc52c392cfcfb54d90cd931314c3a1" translate="yes" xml:space="preserve">
          <source>Currently it is only used to enable and disable the automatic escaping but can be used for extensions as well.</source>
          <target state="translated">現在は自動エスケープを有効にしたり無効にしたりするためだけに使われていますが、拡張機能にも使うことができます。</target>
        </trans-unit>
        <trans-unit id="30c3e03bf5eeeddddd25cfc9a3c1058ba1a99bb1" translate="yes" xml:space="preserve">
          <source>Custom Filters</source>
          <target state="translated">カスタムフィルター</target>
        </trans-unit>
        <trans-unit id="25bf742a091a3a8b6df4f38849ad1a3bcff418b4" translate="yes" xml:space="preserve">
          <source>Custom Tests</source>
          <target state="translated">カスタムテスト</target>
        </trans-unit>
        <trans-unit id="59d7cf5f4f6810a50076add50fee2c64dc7b3cd1" translate="yes" xml:space="preserve">
          <source>Custom filters are just regular Python functions that take the left side of the filter as first argument and the arguments passed to the filter as extra arguments or keyword arguments.</source>
          <target state="translated">カスタムフィルタは、フィルタの左側を第一引数とし、フィルタに渡された引数を追加引数やキーワード引数として受け取る通常のPython関数です。</target>
        </trans-unit>
        <trans-unit id="d2a313e76d947c161f2a67ee325a6fab4a3b744f" translate="yes" xml:space="preserve">
          <source>Cycle through values by yielding them one at a time, then restarting once the end is reached.</source>
          <target state="translated">一度に1つずつ値を降伏させて循環させ、最後に到達した時点で再開します。</target>
        </trans-unit>
        <trans-unit id="c65ade120087027f60f7c1d12ef7a54948acfdd3" translate="yes" xml:space="preserve">
          <source>Debug Extension</source>
          <target state="translated">デバッグ拡張</target>
        </trans-unit>
        <trans-unit id="06a1228bc1a2b90a6f69119da7257f1a1ab45207" translate="yes" xml:space="preserve">
          <source>Debug Statement</source>
          <target state="translated">デバッグステートメント</target>
        </trans-unit>
        <trans-unit id="5003b467513b322c0b315d95d51da4dbbf986f45" translate="yes" xml:space="preserve">
          <source>Decorator for marking context dependent filters. The current &lt;code&gt;Context&lt;/code&gt; will be passed as first argument.</source>
          <target state="translated">コンテキスト依存フィルターをマークするためのデコレーター。現在の &lt;code&gt;Context&lt;/code&gt; が最初の引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="0c44268d159f9cdaf432ba8b47f79277bc6bf5c2" translate="yes" xml:space="preserve">
          <source>Decorator for marking environment dependent filters. The current &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; is passed to the filter as first argument.</source>
          <target state="translated">環境に依存するフィルターをマーキングするためのデコレーター。現在の&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;は、最初の引数としてフィルターに渡されます。</target>
        </trans-unit>
        <trans-unit id="09dc554500411d8a9dbcdf94b9173101e58e98fa" translate="yes" xml:space="preserve">
          <source>Decorator for marking eval-context dependent filters. An eval context object is passed as first argument. For more information about the eval context, see &lt;a href=&quot;#eval-context&quot;&gt;Evaluation Context&lt;/a&gt;.</source>
          <target state="translated">eval-context依存フィルターをマークするためのデコレーター。evalコンテキストオブジェクトが最初の引数として渡されます。evalのコンテキストの詳細については、&lt;a href=&quot;#eval-context&quot;&gt;評価コンテキストを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="09818879ea912be67ef1343ccd2f453dac476d2c" translate="yes" xml:space="preserve">
          <source>Disable the output buffering.</source>
          <target state="translated">出力バッファリングを無効にします。</target>
        </trans-unit>
        <trans-unit id="aa8cb07a9d25324aded29662ce09fc2c44fb9618" translate="yes" xml:space="preserve">
          <source>Divide two numbers and return the truncated integer result. &lt;code&gt;{{ 20 // 7 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">2つの数値を除算し、切り捨てられた整数の結果を返します。 &lt;code&gt;{{ 20 // 7 }}&lt;/code&gt; は &lt;code&gt;2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="821ce3584d4ee6a3a66a1d7b38eb048030d2dff6" translate="yes" xml:space="preserve">
          <source>Divide two numbers. The return value will be a floating point number. &lt;code&gt;{{ 1 / 2 }}&lt;/code&gt; is &lt;code&gt;{{ 0.5 }}&lt;/code&gt;.</source>
          <target state="translated">2つの数を割ります。戻り値は浮動小数点数になります。 &lt;code&gt;{{ 1 / 2 }}&lt;/code&gt; は &lt;code&gt;{{ 0.5 }}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c57bf9528b8e986b9d46111ccd2cdf71905d8a3a" translate="yes" xml:space="preserve">
          <source>Divides the left by the right node and truncates conver the result into an integer by truncating.</source>
          <target state="translated">左を右ノードで割って、その結果を切り捨てて整数に変換します。</target>
        </trans-unit>
        <trans-unit id="81a35006578e65dcf9b3f71f3d4ae5e50ce5eb56" translate="yes" xml:space="preserve">
          <source>Divides the left by the right node.</source>
          <target state="translated">左側を右側のノードで分割します。</target>
        </trans-unit>
        <trans-unit id="b6c95e2580609775eb2b7302ad50c369810daef6" translate="yes" xml:space="preserve">
          <source>Django</source>
          <target state="translated">Django</target>
        </trans-unit>
        <trans-unit id="4e3d01f1de1288ed409125614e1df34f7c6c1cbd" translate="yes" xml:space="preserve">
          <source>Does a typecheck and dispatches to &lt;a href=&quot;#jinja2.Environment.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; if an iterable of template names is given, otherwise to &lt;a href=&quot;#jinja2.Environment.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">反復可能なテンプレート名が指定されている場合は&lt;a href=&quot;#jinja2.Environment.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;を実行し、select_template（）にディスパッチします。それ以外の場合は、&lt;a href=&quot;#jinja2.Environment.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; に&lt;/a&gt;ディスパッチします。</target>
        </trans-unit>
        <trans-unit id="bdf9d1feb6e3b49fe3d8e2c87aacc6c725c6f105" translate="yes" xml:space="preserve">
          <source>Dump the bytecode into the file or file like object passed.</source>
          <target state="translated">バイトコードを、渡されたオブジェクトのようにファイルやファイルにダンプします。</target>
        </trans-unit>
        <trans-unit id="4ca40d448f89316162bba2fe2d5973b44a45a36b" translate="yes" xml:space="preserve">
          <source>Dump the complete stream into a file or file-like object. Per default unicode strings are written, if you want to encode before writing specify an &lt;code&gt;encoding&lt;/code&gt;.</source>
          <target state="translated">ストリーム全体をファイルまたはファイルのようなオブジェクトにダンプします。デフォルトでは、Unicode文字列が書き込まれます。書き込む前にエンコードする場合は、 &lt;code&gt;encoding&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="925ed2bb8f5e61faf013850c5f67a1ffc639af1f" translate="yes" xml:space="preserve">
          <source>Dumps a structure to JSON so that it&amp;rsquo;s safe to use in &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. It accepts the same arguments and returns a JSON string. Note that this is available in templates through the &lt;code&gt;|tojson&lt;/code&gt; filter which will also mark the result as safe. Due to how this function escapes certain characters this is safe even if used outside of &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグで安全に使用できるように、構造をJSONにダンプします。同じ引数を受け入れ、JSON文字列を返します。これは、結果を安全としてマークする &lt;code&gt;|tojson&lt;/code&gt; フィルターを介してテンプレートで使用できることに注意してください。この関数が特定の文字をエスケープする方法により、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグの外で使用された場合でも安全です。</target>
        </trans-unit>
        <trans-unit id="7b74ee4afb836191f6495e846debe4cdcbd26d7f" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;None&lt;/code&gt; or an unicode string with the error message for the undefined object.</source>
          <target state="translated">どちらか &lt;code&gt;None&lt;/code&gt; か、未定義のオブジェクトのエラーメッセージを持つUnicode文字列。</target>
        </trans-unit>
        <trans-unit id="98542f6dececcc52bdff58700bfe26e60b8c96a8" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;None&lt;/code&gt; or the owner object that caused the undefined object to be created (for example because an attribute does not exist).</source>
          <target state="translated">いずれかの &lt;code&gt;None&lt;/code&gt; または（属性が存在しないため、例えば）未定義のオブジェクトが作成される原因となった所有者オブジェクト。</target>
        </trans-unit>
        <trans-unit id="5f4c368d3f66f4102699fbfa820d6f85dd228c67" translate="yes" xml:space="preserve">
          <source>Enable buffering. Buffer &lt;code&gt;size&lt;/code&gt; items before yielding them.</source>
          <target state="translated">バッファリングを有効にします。それらを生成する前に &lt;code&gt;size&lt;/code&gt; アイテムをバッファリングします。</target>
        </trans-unit>
        <trans-unit id="6852774d39235701e2bf4c8f944a95ffa9434146" translate="yes" xml:space="preserve">
          <source>Enforce HTML escaping. This will probably double escape variables.</source>
          <target state="translated">HTML のエスケープを強制します。これはおそらくエスケープ変数を二重にすることになるでしょう。</target>
        </trans-unit>
        <trans-unit id="0d41854ba5e6a4280582935029cd18e9992ce5a6" translate="yes" xml:space="preserve">
          <source>Environment Methods</source>
          <target state="translated">環境への取り組み方</target>
        </trans-unit>
        <trans-unit id="d494e3c9df4c70e2d8b8564f86a0350a027c3c32" translate="yes" xml:space="preserve">
          <source>Escape a string. Calls &lt;a href=&quot;../templates/index#escape&quot;&gt;&lt;code&gt;escape()&lt;/code&gt;&lt;/a&gt; and ensures that for subclasses the correct type is returned.</source>
          <target state="translated">文字列をエスケープします。&lt;a href=&quot;../templates/index#escape&quot;&gt; &lt;code&gt;escape()&lt;/code&gt; &lt;/a&gt;を呼び出し、サブクラスに対して正しいタイプが返されるようにします。</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="bdd249af4f2a8c7063833e446277863909fd621b" translate="yes" xml:space="preserve">
          <source>Escaping everything except for safe values will also mean that Jinja is escaping variables known to not include HTML (e.g. numbers, booleans) which can be a huge performance hit.</source>
          <target state="translated">安全な値以外はすべてエスケープしてしまうと、JinjaはHTMLを含まないことがわかっている変数(数字やブール値など)をエスケープしていることになり、パフォーマンスに大きな影響を与えます。</target>
        </trans-unit>
        <trans-unit id="27dc027e6d9f31fb205a71f0909c724d9b19f695" translate="yes" xml:space="preserve">
          <source>Evaluation Context</source>
          <target state="translated">評価文脈</target>
        </trans-unit>
        <trans-unit id="8095cdfeb9bac3f7c6a55a50f6d7a9b4e9914192" translate="yes" xml:space="preserve">
          <source>Every template object has a few methods and members that are guaranteed to exist. However it&amp;rsquo;s important that a template object should be considered immutable. Modifications on the object are not supported.</source>
          <target state="translated">すべてのテンプレートオブジェクトには、存在が保証されているいくつかのメソッドとメンバーがあります。ただし、テンプレートオブジェクトは不変であると見なすことが重要です。オブジェクトの変更はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e0b448024951647165cdec0c460725208f2f5d3a" translate="yes" xml:space="preserve">
          <source>Everything between two brackets is a list. Lists are useful for storing sequential data to be iterated over. For example, you can easily create a list of links using lists and tuples for (and with) a for loop:</source>
          <target state="translated">2 つのカッコの間はすべてリストです。リストは、反復処理するための連続したデータを格納するのに便利です。例えば、リストとタプルを使って for ループのために(そして for ループと一緒に)リンクのリストを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="d36ef865b672bd54f8fba53b608ddf569fd3129e" translate="yes" xml:space="preserve">
          <source>Everything between two double or single quotes is a string. They are useful whenever you need a string in the template (e.g. as arguments to function calls and filters, or just to extend or include a template).</source>
          <target state="translated">2つのダブルクォーテーションやシングルクォーテーションの間はすべて文字列です。これらはテンプレート内で文字列が必要なときに便利です(関数呼び出しやフィルタの引数として、あるいはテンプレートを拡張したりインクルードしたりするときなど)。</target>
        </trans-unit>
        <trans-unit id="b0dd7cccda4409d86c406a79a5b19e7227924138" translate="yes" xml:space="preserve">
          <source>Example Extensions</source>
          <target state="translated">拡張機能の例</target>
        </trans-unit>
        <trans-unit id="81ca082f8ac23dd65c9942e8931265a491d23a70" translate="yes" xml:space="preserve">
          <source>Example configuration to turn it on at all times except if the template ends with &lt;code&gt;.txt&lt;/code&gt;:</source>
          <target state="translated">テンプレートが &lt;code&gt;.txt&lt;/code&gt; で終わる場合を除いて、常にオンにする構成例：</target>
        </trans-unit>
        <trans-unit id="60fb5310cca4479e22eebd97866a669544e5998d" translate="yes" xml:space="preserve">
          <source>Example to change the &lt;code&gt;autoescape&lt;/code&gt; setting:</source>
          <target state="translated">&lt;code&gt;autoescape&lt;/code&gt; 設定を変更する例：</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="4d450dfcf6119b9883ce593a25586d5f15fd4233" translate="yes" xml:space="preserve">
          <source>Expect a given token type and return it. This accepts the same argument as &lt;a href=&quot;#jinja2.lexer.Token.test&quot;&gt;&lt;code&gt;jinja2.lexer.Token.test()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたトークンタイプを期待して返します。これは、&lt;a href=&quot;#jinja2.lexer.Token.test&quot;&gt; &lt;code&gt;jinja2.lexer.Token.test()&lt;/code&gt; &lt;/a&gt;と同じ引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="d9c4f2202566f51697b377f90555653846292193" translate="yes" xml:space="preserve">
          <source>Expression Statement</source>
          <target state="translated">表現ステートメント</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="b6ccdb5c03d058564f43be187c3d3771b90188e4" translate="yes" xml:space="preserve">
          <source>Extends</source>
          <target state="translated">Extends</target>
        </trans-unit>
        <trans-unit id="659087d3ca23db6ae11e0a43579b5f4a260dda11" translate="yes" xml:space="preserve">
          <source>Extension</source>
          <target state="translated">Extension</target>
        </trans-unit>
        <trans-unit id="1c91c335a6e29bf13a2ecd2e1e9e63d118f37df0" translate="yes" xml:space="preserve">
          <source>Extension API</source>
          <target state="translated">拡張API</target>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="translated">Extensions</target>
        </trans-unit>
        <trans-unit id="065374c3efd57706bef9cfbc4847be9b65fb7a67" translate="yes" xml:space="preserve">
          <source>Extensions always have to extend the &lt;a href=&quot;#jinja2.ext.Extension&quot;&gt;&lt;code&gt;jinja2.ext.Extension&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">拡張機能は常に&lt;a href=&quot;#jinja2.ext.Extension&quot;&gt; &lt;code&gt;jinja2.ext.Extension&lt;/code&gt; &lt;/a&gt;クラスを拡張する必要があります。</target>
        </trans-unit>
        <trans-unit id="4cebc336bed84712d6270d06394af02e23948cb4" translate="yes" xml:space="preserve">
          <source>Extensions are added to the Jinja environment at creation time. Once the environment is created additional extensions cannot be added. To add an extension pass a list of extension classes or import paths to the &lt;code&gt;extensions&lt;/code&gt; parameter of the &lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; constructor. The following example creates a Jinja environment with the i18n extension loaded:</source>
          <target state="translated">拡張機能は、作成時にJinja環境に追加されます。環境が作成されると、追加の拡張機能を追加することはできません。拡張機能を追加するには、拡張機能クラスのリストまたはインポートパスを&lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;コンストラクターの &lt;code&gt;extensions&lt;/code&gt; パラメーターに渡します。次の例では、i18n拡張機能がロードされたJinja環境を作成します。</target>
        </trans-unit>
        <trans-unit id="a0598b6d7979675058eb2bb815181d126f0f31d8" translate="yes" xml:space="preserve">
          <source>Extensions can be used to add extra functionality to the Jinja template system at the parser level. Custom extensions are bound to an environment but may not store environment specific data on &lt;code&gt;self&lt;/code&gt;. The reason for this is that an extension can be bound to another environment (for overlays) by creating a copy and reassigning the &lt;code&gt;environment&lt;/code&gt; attribute.</source>
          <target state="translated">拡張機能を使用して、パーサーレベルでJinjaテンプレートシステムに機能を追加できます。カスタム拡張機能は環境にバインドされていますが、環境固有のデータを &lt;code&gt;self&lt;/code&gt; 保存しない場合があります。これは、コピーを作成して &lt;code&gt;environment&lt;/code&gt; 属性を再割り当てすることで、拡張機能を別の環境（オーバーレイ用）にバインドできるためです。</target>
        </trans-unit>
        <trans-unit id="38937ad36038d29e8aa1a22c86ded8a7e7d27224" translate="yes" xml:space="preserve">
          <source>Extract localizable strings from the given template node or source.</source>
          <target state="translated">与えられたテンプレートノードまたはソースからローカライズ可能な文字列を抽出します。</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="b3da45d3f64a4f2c3aa61d7403eb11f811d70a0f" translate="yes" xml:space="preserve">
          <source>Filter sections allow you to apply regular Jinja filters on a block of template data. Just wrap the code in the special &lt;code&gt;filter&lt;/code&gt; section:</source>
          <target state="translated">フィルタセクションを使用すると、テンプレートデータのブロックに通常のJinjaフィルタを適用できます。特別な &lt;code&gt;filter&lt;/code&gt; セクションでコードをラップするだけです。</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="424b01b5d99422a8a55ddbc4872e2e1624c4a68a" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding.</source>
          <target state="translated">各オブジェクトにテストを適用し、テストが成功したオブジェクトのみを選択することで、一連のオブジェクトをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="2e4d9316b65813013de91d45eb73b2b572046a07" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding.</source>
          <target state="translated">各オブジェクトにテストを適用して一連のオブジェクトをフィルタリングし、テストが成功したオブジェクトを拒否します。</target>
        </trans-unit>
        <trans-unit id="02ae4db8da5a07bf3929e8da5c6d3e7d420f0668" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding.</source>
          <target state="translated">各オブジェクトの指定された属性にテストを適用し、テストが成功したオブジェクトのみを選択することで、一連のオブジェクトをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="af943f49170dd8da3448a56b5525dbd5869b7ff2" translate="yes" xml:space="preserve">
          <source>Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding.</source>
          <target state="translated">各オブジェクトの指定された属性にテストを適用して一連のオブジェクトをフィルタリングし、テストが成功したオブジェクトを拒否します。</target>
        </trans-unit>
        <trans-unit id="55b2923dfc10109a43592fa23b746f61f47ee94d" translate="yes" xml:space="preserve">
          <source>Filters and tests are looked up in separate namespaces and have slightly modified identifier syntax. Filters and tests may contain dots to group filters and tests by topic. For example it&amp;rsquo;s perfectly valid to add a function into the filter dict and call it &lt;code&gt;to.unicode&lt;/code&gt;. The regular expression for filter and test identifiers is &lt;code&gt;[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*`&lt;/code&gt;.</source>
          <target state="translated">フィルタとテストは別々の名前空間で検索され、識別子の構文が少し変更されています。フィルタとテストには、フィルタとテストをトピックごとにグループ化するためのドットが含まれる場合があります。たとえば、フィルターdictに関数を追加し、それを &lt;code&gt;to.unicode&lt;/code&gt; と呼ぶことは完全に有効です。フィルタおよびテスト識別子の正規表現は、 &lt;code&gt;[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*`&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="db3eec49d5967ac4578b14a8048d0e8d5d56c3fc" translate="yes" xml:space="preserve">
          <source>Filters can also be passed the current template context or environment. This is useful if a filter wants to return an undefined value or check the current &lt;code&gt;autoescape&lt;/code&gt; setting. For this purpose three decorators exist: &lt;a href=&quot;#jinja2.environmentfilter&quot;&gt;&lt;code&gt;environmentfilter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#jinja2.contextfilter&quot;&gt;&lt;code&gt;contextfilter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt;&lt;code&gt;evalcontextfilter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィルタには、現在のテンプレートコンテキストまたは環境を渡すこともできます。これは、フィルターが未定義の値を返したい場合、または現在の &lt;code&gt;autoescape&lt;/code&gt; 設定を確認したい場合に役立ちます。この目的のために、&lt;a href=&quot;#jinja2.environmentfilter&quot;&gt; &lt;code&gt;environmentfilter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#jinja2.contextfilter&quot;&gt; &lt;code&gt;contextfilter()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt; &lt;code&gt;evalcontextfilter()&lt;/code&gt; の&lt;/a&gt;3つのデコレータが存在します。</target>
        </trans-unit>
        <trans-unit id="adb96eed2687ad6fd0f8ee103c20ed02de48f782" translate="yes" xml:space="preserve">
          <source>Filters that accept arguments have parentheses around the arguments, just like a function call. For example: &lt;code&gt;{{ listx|join(', ') }}&lt;/code&gt; will join a list with commas (&lt;code&gt;str.join(', ', listx)&lt;/code&gt;).</source>
          <target state="translated">引数を受け入れるフィルターには、関数呼び出しと同じように、引数を括弧で囲みます。例： &lt;code&gt;{{ listx|join(', ') }}&lt;/code&gt; は、リストをコンマで結合します（ &lt;code&gt;str.join(', ', listx)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1ef6a0e731e2c2aa9ae0ea013189f658a71a8b08" translate="yes" xml:space="preserve">
          <source>Find all the nodes of a given type. If the type is a tuple, the check is performed for any of the tuple items.</source>
          <target state="translated">指定された型のすべてのノードを検索します。型がタプルの場合は、タプル項目のいずれかをチェックします。</target>
        </trans-unit>
        <trans-unit id="17fa13ae1e1b136f1f877def703a3e1d4d533047" translate="yes" xml:space="preserve">
          <source>Find the first node of a given type. If no such node exists the return value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">指定されたタイプの最初のノードを見つけます。そのようなノードが存在しない場合、戻り値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d986a88110743f7d68976e13475d105fc149cd92" translate="yes" xml:space="preserve">
          <source>Finds all the referenced templates from the AST. This will return an iterator over all the hardcoded template extensions, inclusions and imports. If dynamic inheritance or inclusion is used, &lt;code&gt;None&lt;/code&gt; will be yielded.</source>
          <target state="translated">ASTから参照されているすべてのテンプレートを検索します。これにより、ハードコードされたすべてのテンプレート拡張、インクルード、およびインポートに対するイテレーターが返されます。動的継承または包含が使用されている場合、 &lt;code&gt;None&lt;/code&gt; は生成されません。</target>
        </trans-unit>
        <trans-unit id="01eeb51e06c509afb8298d4df305255595d93606" translate="yes" xml:space="preserve">
          <source>Finds all the templates the loader can find, compiles them and stores them in &lt;code&gt;target&lt;/code&gt;. If &lt;code&gt;zip&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, instead of in a zipfile, the templates will be stored in a directory. By default a deflate zip algorithm is used. To switch to the stored algorithm, &lt;code&gt;zip&lt;/code&gt; can be set to &lt;code&gt;'stored'&lt;/code&gt;.</source>
          <target state="translated">ローダーが検出できるすべてのテンプレートを検索し、それらをコンパイルして、 &lt;code&gt;target&lt;/code&gt; 格納します。 &lt;code&gt;zip&lt;/code&gt; が &lt;code&gt;None&lt;/code&gt; の場合、zipファイルではなく、テンプレートがディレクトリに保存されます。デフォルトでは、deflatezipアルゴリズムが使用されます。保存されたアルゴリズムに切り替えるには、 &lt;code&gt;zip&lt;/code&gt; を &lt;code&gt;'stored'&lt;/code&gt; 設定できます。</target>
        </trans-unit>
        <trans-unit id="51f102f83bdef0f8b3d4c499c720e01ee7ee7f6b" translate="yes" xml:space="preserve">
          <source>Floating point numbers can be written using a &amp;lsquo;.&amp;rsquo; as a decimal mark. They can also be written in scientific notation with an upper or lower case &amp;lsquo;e&amp;rsquo; to indicate the exponent part. The &amp;lsquo;_&amp;rsquo; character can be used to separate groups for legibility, but cannot be used in the exponent part.</source>
          <target state="translated">浮動小数点数は「。」を使用して書き込むことができます。小数点として。また、指数部分を示すために大文字または小文字の「e」を使用して科学的記数法で記述することもできます。'_'文字は、読みやすさのためにグループを区切るために使用できますが、指数部分では使用できません。</target>
        </trans-unit>
        <trans-unit id="f7880600348a091a43e2a84906d6002820643108" translate="yes" xml:space="preserve">
          <source>For</source>
          <target state="translated">For</target>
        </trans-unit>
        <trans-unit id="53930c066f6a1f91e71dcf35d76ec7239b4ef601" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;if&lt;/code&gt; statements, &lt;code&gt;for&lt;/code&gt; filtering, and &lt;code&gt;if&lt;/code&gt; expressions, it can be useful to combine multiple expressions:</source>
          <target state="translated">以下の場合 &lt;code&gt;if&lt;/code&gt; 文、 &lt;code&gt;for&lt;/code&gt; フィルタリング、および &lt;code&gt;if&lt;/code&gt; の表現、複数の式を結合するために有用であることができます。</target>
        </trans-unit>
        <trans-unit id="799545169b43e8a891dcd6c4073699e523937628" translate="yes" xml:space="preserve">
          <source>For a more complex example you can provide a hint. For example the &lt;a href=&quot;../templates/index#first&quot;&gt;&lt;code&gt;first()&lt;/code&gt;&lt;/a&gt; filter creates an undefined object that way:</source>
          <target state="translated">より複雑な例については、ヒントを提供できます。たとえば、&lt;a href=&quot;../templates/index#first&quot;&gt; &lt;code&gt;first()&lt;/code&gt; &lt;/a&gt;フィルタは、次のように未定義のオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="d84a17afaecaa49153228226dbbc3265d59ef08b" translate="yes" xml:space="preserve">
          <source>For a web application that is available in multiple languages but gives all the users the same language (for example, multilingual forum software installed for a French community), the translation may be installed when the environment is created.</source>
          <target state="translated">複数の言語で利用可能でありながら、すべてのユーザーに同じ言語を提供するウェブアプリケーション(例えば、フランスのコミュニティにインストールされた多言語フォーラムソフトウェア)の場合、環境が作成されたときに翻訳がインストールされている可能性があります。</target>
        </trans-unit>
        <trans-unit id="9ded0d9e43d486a6042a313dd1838f7fdf7a4285" translate="yes" xml:space="preserve">
          <source>For bigger sections, it makes sense to mark a block &lt;code&gt;raw&lt;/code&gt;. For example, to include example Jinja syntax in a template, you can use this snippet:</source>
          <target state="translated">より大きなセクションの場合、ブロックを &lt;code&gt;raw&lt;/code&gt; としてマークすることは理にかなっています。たとえば、Jinja構文の例をテンプレートに含めるには、次のスニペットを使用できます。</target>
        </trans-unit>
        <trans-unit id="9d63767b85cf0b30e1a788fa06a403794481c7a3" translate="yes" xml:space="preserve">
          <source>For every string found this function yields a &lt;code&gt;(lineno, function,
message)&lt;/code&gt; tuple, where:</source>
          <target state="translated">見つかったすべての文字列に対して、この関数は &lt;code&gt;(lineno, function, message)&lt;/code&gt; タプルを生成します。ここで：</target>
        </trans-unit>
        <trans-unit id="7525926bda2cd2c4f127dc5496bdce0148100e9b" translate="yes" xml:space="preserve">
          <source>For example in the filter &lt;code&gt;{{ 42|myfilter(23) }}&lt;/code&gt; the function would be called with &lt;code&gt;myfilter(42, 23)&lt;/code&gt;. Here for example a simple filter that can be applied to datetime objects to format them:</source>
          <target state="translated">たとえば、フィルタ &lt;code&gt;{{ 42|myfilter(23) }}&lt;/code&gt; では、関数は &lt;code&gt;myfilter(42, 23)&lt;/code&gt; で呼び出されます。たとえば、日時オブジェクトに適用してフォーマットすることができる単純なフィルターを次に示します。</target>
        </trans-unit>
        <trans-unit id="5637f72e778c9d6d0d37f54af5a0743f844edf87" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;{{ name|striptags|title }}&lt;/code&gt; will remove all HTML Tags from variable &lt;code&gt;name&lt;/code&gt; and title-case the output (&lt;code&gt;title(striptags(name))&lt;/code&gt;).</source>
          <target state="translated">たとえば、 &lt;code&gt;{{ name|striptags|title }}&lt;/code&gt; は、変数 &lt;code&gt;name&lt;/code&gt; とtitle-caseの出力（ &lt;code&gt;title(striptags(name))&lt;/code&gt; ）からすべてのHTMLタグを削除します。</target>
        </trans-unit>
        <trans-unit id="fa0a2c89c1036cfaddd748a84b028ad791f530ad" translate="yes" xml:space="preserve">
          <source>For example, a list of &lt;code&gt;User&lt;/code&gt; objects with a &lt;code&gt;city&lt;/code&gt; attribute can be rendered in groups. In this example, &lt;code&gt;grouper&lt;/code&gt; refers to the &lt;code&gt;city&lt;/code&gt; value of the group.</source>
          <target state="translated">たとえば、 &lt;code&gt;city&lt;/code&gt; 属性を持つ &lt;code&gt;User&lt;/code&gt; オブジェクトのリストをグループでレンダリングできます。この例では、 &lt;code&gt;grouper&lt;/code&gt; はグループの &lt;code&gt;city&lt;/code&gt; 値を参照します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="7a06778b95c2388d01e9527a89467c5a23a2afd8" translate="yes" xml:space="preserve">
          <source>For filtered nodes an expression can be stored as &lt;code&gt;test&lt;/code&gt;, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">フィルタリングされたノードの場合、式は &lt;code&gt;test&lt;/code&gt; として保存できます。それ以外の場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ebc6e49c190bdfedba86090c372c0f2e627a7e2" translate="yes" xml:space="preserve">
          <source>For intercepted binary operator calls (&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_binops&quot;&gt;&lt;code&gt;intercepted_binops()&lt;/code&gt;&lt;/a&gt;) this function is executed instead of the builtin operator. This can be used to fine tune the behavior of certain operators.</source>
          <target state="translated">インターセプトされた二項演算子呼び出し（&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_binops&quot;&gt; &lt;code&gt;intercepted_binops()&lt;/code&gt; &lt;/a&gt;）の場合、この関数は組み込み演算子の代わりに実行されます。これは、特定の演算子の動作を微調整するために使用できます。</target>
        </trans-unit>
        <trans-unit id="3b6a92849a83ee884c1eb677db553af66c728c8a" translate="yes" xml:space="preserve">
          <source>For intercepted unary operator calls (&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_unops&quot;&gt;&lt;code&gt;intercepted_unops()&lt;/code&gt;&lt;/a&gt;) this function is executed instead of the builtin operator. This can be used to fine tune the behavior of certain operators.</source>
          <target state="translated">インターセプトされた単項演算子呼び出し（&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_unops&quot;&gt; &lt;code&gt;intercepted_unops()&lt;/code&gt; &lt;/a&gt;）の場合、この関数は組み込み演算子の代わりに実行されます。これは、特定の演算子の動作を微調整するために使用できます。</target>
        </trans-unit>
        <trans-unit id="eb1475a97627e62303a82185e19a08da4356cda4" translate="yes" xml:space="preserve">
          <source>For loop unpacking and some other things like multiple arguments for subscripts. Like for &lt;a href=&quot;#jinja2.nodes.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;&lt;code&gt;ctx&lt;/code&gt; specifies if the tuple is used for loading the names or storing.</source>
          <target state="translated">forループの解凍、および添え字の複数の引数などの他のいくつかのこと。&lt;a href=&quot;#jinja2.nodes.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;場合と同様に、 &lt;code&gt;ctx&lt;/code&gt; は、タプルを名前のロードまたは保存に使用するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="56a26feae834a727a1430756cf54e09c4c1fc052" translate="yes" xml:space="preserve">
          <source>For maximum performance Jinja will let operators call directly the type specific callback methods. This means that it&amp;rsquo;s not possible to have this intercepted by overriding &lt;code&gt;Environment.call()&lt;/code&gt;. Furthermore a conversion from operator to special method is not always directly possible due to how operators work. For instance for divisions more than one special method exist.</source>
          <target state="translated">最高のパフォーマンスを実現するために、Jinjaではオペレーターがタイプ固有のコールバックメソッドを直接呼び出すことができます。これは、 &lt;code&gt;Environment.call()&lt;/code&gt; をオーバーライドすることによってこれを傍受することは不可能であることを意味します。さらに、演算子の動作方法により、演算子から特別なメソッドへの変換が常に直接可能であるとは限りません。たとえば、分割の場合、複数の特別なメソッドが存在します。</target>
        </trans-unit>
        <trans-unit id="f3c486b95c4399529dc8cc3a06a2afff5d7b5756" translate="yes" xml:space="preserve">
          <source>For more details about Unicode in Python have a look at the excellent &lt;a href=&quot;https://docs.python.org/3/howto/unicode.html&quot;&gt;Unicode documentation&lt;/a&gt;.</source>
          <target state="translated">PythonでのUnicodeの詳細については、優れた&lt;a href=&quot;https://docs.python.org/3/howto/unicode.html&quot;&gt;Unicodeドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d730046373cd8cbc8f8e4532f18ec3f9585cbbfa" translate="yes" xml:space="preserve">
          <source>For more information have a look at the repr of &lt;a href=&quot;../api/index#jinja2.Environment.parse&quot;&gt;&lt;code&gt;jinja2.Environment.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/index#jinja2.Environment.parse&quot;&gt; &lt;code&gt;jinja2.Environment.parse()&lt;/code&gt; の&lt;/a&gt;reprを参照してください。</target>
        </trans-unit>
        <trans-unit id="e2a32a4fb020f2501f7b4dca2074fd6dd3600a40" translate="yes" xml:space="preserve">
          <source>For multiple branches, &lt;code&gt;elif&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; can be used like in Python. You can use more complex &lt;a href=&quot;#expressions&quot;&gt;Expressions&lt;/a&gt; there, too:</source>
          <target state="translated">複数の分岐については、 &lt;code&gt;elif&lt;/code&gt; および &lt;code&gt;else&lt;/code&gt; のPythonのように使用することができます。そこでは、より複雑な&lt;a href=&quot;#expressions&quot;&gt;式&lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="9f9b44a3099f307504920053ee7e3dab1b013eb0" translate="yes" xml:space="preserve">
          <source>For security reasons this function operates case insensitive.</source>
          <target state="translated">セキュリティ上の理由から、この関数は大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="aace115f25b7ff6025792ace367db481125cc893" translate="yes" xml:space="preserve">
          <source>For the sake of convenience, &lt;code&gt;foo.bar&lt;/code&gt; in Jinja does the following things on the Python layer:</source>
          <target state="translated">便宜上、 &lt;code&gt;foo.bar&lt;/code&gt; はPythonレイヤーで次のことを行います。</target>
        </trans-unit>
        <trans-unit id="0646f7935ef319d62908c99b74b3634a22eb095a" translate="yes" xml:space="preserve">
          <source>For very large templates it can be useful to not render the whole template at once but evaluate each statement after another and yield piece for piece. This method basically does exactly that and returns a generator that yields one item after another as unicode strings.</source>
          <target state="translated">非常に大きなテンプレートの場合、テンプレート全体を一度にレンダリングするのではなく、各ステートメントを次から次へと評価して、ピースごとに生成するのが便利です。このメソッドは基本的にはまさにそれを行い、1つの項目の後に1つの項目をユニコード文字列として生成するジェネレータを返します。</target>
        </trans-unit>
        <trans-unit id="28414bc5df98ba0312d57e35af3dee7711c32a64" translate="yes" xml:space="preserve">
          <source>Format the value like a &amp;lsquo;human-readable&amp;rsquo; file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to &lt;code&gt;True&lt;/code&gt; the binary prefixes are used (Mebi, Gibi).</source>
          <target state="translated">「人間が読める」ファイルサイズのように値をフォーマットします（つまり、13 kB、4.1 MB、102バイトなど）。2番目のパラメーターが &lt;code&gt;True&lt;/code&gt; に設定されている場合、デフォルトでは10進プレフィックスが使用され（Mega、Gigaなど）、2進プレフィックスが使用されます（Mebi、Gibi）。</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="aa8d05d5653d441878a69c27426292a9daa82f86" translate="yes" xml:space="preserve">
          <source>From Jinja 2.2 onwards, you can mark an include with &lt;code&gt;ignore missing&lt;/code&gt;; in which case Jinja will ignore the statement if the template to be included does not exist. When combined with &lt;code&gt;with&lt;/code&gt; or &lt;code&gt;without context&lt;/code&gt;, it must be placed &lt;em&gt;before&lt;/em&gt; the context visibility statement. Here are some valid examples:</source>
          <target state="translated">Jinja 2.2以降では、 &lt;code&gt;ignore missing&lt;/code&gt; を無視してインクルードをマークできます。その場合、含まれるテンプレートが存在しない場合、Jinjaはステートメントを無視します。組み合わせること &lt;code&gt;with&lt;/code&gt; 、または &lt;code&gt;without context&lt;/code&gt; 、それが置かれなければならない&lt;em&gt;前に、&lt;/em&gt;コンテキストの可視性声明。いくつかの有効な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="8cea09bc14723f098213d4890d1d9ebff9817e92" translate="yes" xml:space="preserve">
          <source>Generates some lorem ipsum for the template. By default, five paragraphs of HTML are generated with each paragraph between 20 and 100 words. If html is False, regular text is returned. This is useful to generate simple contents for layout testing.</source>
          <target state="translated">テンプレートのためのLorem Iipsumを生成します。デフォルトでは、5つの段落のHTMLが生成され、各段落は20~100ワードです。htmlがFalseの場合、通常のテキストが返されます。これは、レイアウトテストのためのシンプルなコンテンツを生成するのに便利です。</target>
        </trans-unit>
        <trans-unit id="8d9b405e821842b4ac360b96aab2d2b761bf77bd" translate="yes" xml:space="preserve">
          <source>Get a new dict with the exported variables.</source>
          <target state="translated">エクスポートされた変数で新しいディクトを取得します。</target>
        </trans-unit>
        <trans-unit id="85a7897ee786d412fbc2f90c9cb2bac9c5f37414" translate="yes" xml:space="preserve">
          <source>Get an attribute of an object. (See &lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;)</source>
          <target state="translated">オブジェクトの属性を取得します。（&lt;a href=&quot;#variables&quot;&gt;変数を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="f257fe597c2c0aca3221d19531dd033bf911e92d" translate="yes" xml:space="preserve">
          <source>Get an attribute of an object. &lt;code&gt;foo|attr(&quot;bar&quot;)&lt;/code&gt; works like &lt;code&gt;foo.bar&lt;/code&gt; just that always an attribute is returned and items are not looked up.</source>
          <target state="translated">オブジェクトの属性を取得します。 &lt;code&gt;foo|attr(&quot;bar&quot;)&lt;/code&gt; は &lt;code&gt;foo.bar&lt;/code&gt; のように機能しますが、常に属性が返され、アイテムは検索されません。</target>
        </trans-unit>
        <trans-unit id="930bbdd8273732130a8a4b7c9699c60a9f2790c8" translate="yes" xml:space="preserve">
          <source>Get an attribute or item from an expression and prefer the item.</source>
          <target state="translated">式から属性や項目を取得し、その項目を優先します。</target>
        </trans-unit>
        <trans-unit id="c5b065dafb266ec84940e42c26a719d929e42e05" translate="yes" xml:space="preserve">
          <source>Get an attribute or item from an expression that is a ascii-only bytestring and prefer the attribute.</source>
          <target state="translated">アスキーのみのバイト列である式から属性や項目を取得し、属性を優先します。</target>
        </trans-unit>
        <trans-unit id="d6992907aece81beb4fc876dfe8e61555d03d861" translate="yes" xml:space="preserve">
          <source>Get the template source, filename and reload helper for a template. It&amp;rsquo;s passed the environment and template name and has to return a tuple in the form &lt;code&gt;(source, filename, uptodate)&lt;/code&gt; or raise a &lt;code&gt;TemplateNotFound&lt;/code&gt; error if it can&amp;rsquo;t locate the template.</source>
          <target state="translated">テンプレートのソース、ファイル名、およびリロードヘルパーを取得します。環境とテンプレート名が渡され、タプルをフォーム &lt;code&gt;(source, filename, uptodate)&lt;/code&gt; か、 &lt;code&gt;TemplateNotFound&lt;/code&gt; が見つからない場合はTemplateNotFoundエラーを発生させる必要があります。</target>
        </trans-unit>
        <trans-unit id="8e7b940617ac4a931c7b3cb9947a304799085b18" translate="yes" xml:space="preserve">
          <source>Given a logger object this returns a new undefined class that will log certain failures. It will log iterations and printing. If no logger is given a default logger is created.</source>
          <target state="translated">ロガーオブジェクトが与えられると、これは特定の失敗を記録する新しい未定義のクラスを返します。これは反復と印刷を記録します。ロガーが与えられていない場合は、デフォルトのロガーが作成されます。</target>
        </trans-unit>
        <trans-unit id="bf33da4f3044438ea36933bb28078205a2834468" translate="yes" xml:space="preserve">
          <source>Go one token ahead and return the old one.</source>
          <target state="translated">トークンを1つ先に行って、古いものを返してください。</target>
        </trans-unit>
        <trans-unit id="2cd093d50b560982f7b83a977f66098e05329c19" translate="yes" xml:space="preserve">
          <source>Got n tokens ahead.</source>
          <target state="translated">トークンを手に入れた</target>
        </trans-unit>
        <trans-unit id="e36f31e3dfe51cf25186f434ba612910d711b1a7" translate="yes" xml:space="preserve">
          <source>Group a sequence of objects by an attribute using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.groupby&quot;&gt;&lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/a&gt;. The attribute can use dot notation for nested access, like &lt;code&gt;&quot;address.city&quot;&lt;/code&gt;. Unlike Python&amp;rsquo;s &lt;code&gt;groupby&lt;/code&gt;, the values are sorted first so only one group is returned for each unique value.</source>
          <target state="translated">Pythonの&lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.groupby&quot;&gt; &lt;code&gt;itertools.groupby()&lt;/code&gt; &lt;/a&gt;を使用して、オブジェクトのシーケンスを属性でグループ化します。属性は、 &lt;code&gt;&quot;address.city&quot;&lt;/code&gt; ように、ネストされたアクセスにドット表記を使用できます。Pythonの &lt;code&gt;groupby&lt;/code&gt; とは異なり、値は最初にソートされるため、一意の値ごとに1つのグループのみが返されます。</target>
        </trans-unit>
        <trans-unit id="24612093a73d54eb6853f0fcb0bdb396d8b5d87d" translate="yes" xml:space="preserve">
          <source>HTML Escaping</source>
          <target state="translated">HTML エスケーピング</target>
        </trans-unit>
        <trans-unit id="c78f3b979d2d44ce3d83c30dc0c6d69b0b0c1e26" translate="yes" xml:space="preserve">
          <source>Here a list of the builtin loaders Jinja provides:</source>
          <target state="translated">Jinjaが提供するビルトインローダーの一覧です。</target>
        </trans-unit>
        <trans-unit id="4325c8da1ca2d3459b17ebd39a14157af187540f" translate="yes" xml:space="preserve">
          <source>Here a recommended setup that enables autoescaping for templates ending in &lt;code&gt;'.html'&lt;/code&gt;, &lt;code&gt;'.htm'&lt;/code&gt; and &lt;code&gt;'.xml'&lt;/code&gt; and disabling it by default for all other extensions. You can use the &lt;a href=&quot;#jinja2.select_autoescape&quot;&gt;&lt;code&gt;select_autoescape()&lt;/code&gt;&lt;/a&gt; function for this:</source>
          <target state="translated">ここでは、 &lt;code&gt;'.html'&lt;/code&gt; 、 &lt;code&gt;'.htm'&lt;/code&gt; 、 &lt;code&gt;'.xml'&lt;/code&gt; で終わるテンプレートの自動エスケープを有効にし、他のすべての拡張子ではデフォルトで無効にする推奨セットアップを示します。これには&lt;a href=&quot;#jinja2.select_autoescape&quot;&gt; &lt;code&gt;select_autoescape()&lt;/code&gt; &lt;/a&gt;関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="30b6f9525e6a81167851ff19281b4c55e532c4f8" translate="yes" xml:space="preserve">
          <source>Here a simple test that checks if a variable is a prime number:</source>
          <target state="translated">ここでは、変数が素数であるかどうかをチェックする簡単なテストを行います。</target>
        </trans-unit>
        <trans-unit id="f4204383808a92586106a2ceddb4282eb1788d59" translate="yes" xml:space="preserve">
          <source>Here a small example filter that breaks a text into HTML line breaks and paragraphs and marks the return value as safe HTML string if autoescaping is enabled:</source>
          <target state="translated">ここでは、テキストを HTML の改行や段落に分割し、オートエスケープが有効な場合は戻り値を安全な HTML 文字列としてマークする小さな例のフィルタを用意しています。</target>
        </trans-unit>
        <trans-unit id="2cb7bb66b81930c1e440c3b745bedf77c50d351e" translate="yes" xml:space="preserve">
          <source>Here an example that assigns the current template name to a variable named &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">これは、現在のテンプレート名を &lt;code&gt;foo&lt;/code&gt; という名前の変数に割り当てる例です。</target>
        </trans-unit>
        <trans-unit id="8e4c2eb299ddb58f7d0bcc739a08f4370617b58d" translate="yes" xml:space="preserve">
          <source>Here are the possible initialization parameters:</source>
          <target state="translated">可能な初期化パラメータは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="33c4c57c33f32b1bb1520956912fc12f587f9883" translate="yes" xml:space="preserve">
          <source>Here are two examples:</source>
          <target state="translated">ここでは2つの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="612bbb86ce140baa839057e3ff7c44ef2847b00f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a loop that skips every second item:</source>
          <target state="translated">これは、1つおきの項目をスキップするループです。</target>
        </trans-unit>
        <trans-unit id="02d33ece3eee8aa2eaf60ad5ae889e9b597e5055" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a small example of a macro that renders a form element:</source>
          <target state="translated">フォーム要素をレンダリングするマクロの小さな例を次に示します。</target>
        </trans-unit>
        <trans-unit id="d4d0769adb614910de6f3eb9f2058790b95f0c79" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how a call block can be used with arguments:</source>
          <target state="translated">呼び出しブロックを引数とともに使用する方法の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="ffacea127ea574868a776e096fb42f829e075451" translate="yes" xml:space="preserve">
          <source>High Level API</source>
          <target state="translated">ハイレベルAPI</target>
        </trans-unit>
        <trans-unit id="22798d625d5636cfeb1ba1a757325bd8139b8a78" translate="yes" xml:space="preserve">
          <source>Highlighting Active Menu Items</source>
          <target state="translated">アクティブなメニュー項目のハイライト表示</target>
        </trans-unit>
        <trans-unit id="e6629abb17ef5329640d45af3574417e56d0bdd4" translate="yes" xml:space="preserve">
          <source>Holds an operator and an expression. The following operators are available: &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;gteq&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;lteq&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;notin&lt;/code&gt;</source>
          <target state="translated">演算子と式を保持します。次の演算子を使用できます： &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;**&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;//&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;eq&lt;/code&gt; 、 &lt;code&gt;gt&lt;/code&gt; 、 &lt;code&gt;gteq&lt;/code&gt; 、 &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;lt&lt;/code&gt; 、 &lt;code&gt;lteq&lt;/code&gt; 、 &lt;code&gt;ne&lt;/code&gt; 、 &lt;code&gt;not&lt;/code&gt; 、 &lt;code&gt;notin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52d8e64a00524998bcf7d0ffc1bce17e8841e735" translate="yes" xml:space="preserve">
          <source>Holds evaluation time information. Custom attributes can be attached to it in extensions.</source>
          <target state="translated">評価時間情報を保持します。拡張機能でカスタム属性を付けることができます。</target>
        </trans-unit>
        <trans-unit id="4915b23f0b7b08562395a134906617f893361de7" translate="yes" xml:space="preserve">
          <source>How Compatible is Jinja with Django?</source>
          <target state="translated">JinjaとDjangoの相性は?</target>
        </trans-unit>
        <trans-unit id="9530b21a65a13386e6c8b83812038c2f46bd1493" translate="yes" xml:space="preserve">
          <source>How fast is it?</source>
          <target state="translated">どのくらいのスピードで?</target>
        </trans-unit>
        <trans-unit id="a8879592e2064123dee4f679fda7255306c2597f" translate="yes" xml:space="preserve">
          <source>However, the name after the &lt;code&gt;endblock&lt;/code&gt; word must match the block name.</source>
          <target state="translated">ただし、 &lt;code&gt;endblock&lt;/code&gt; ブロックワードの後の名前はブロック名と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="f1798b52cde2e675709684b7da9bac4b34f2d6de" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#line-statements&quot;&gt;Line Statements&lt;/a&gt; are enabled, they strip leading whitespace automatically up to the beginning of the line.</source>
          <target state="translated">&lt;a href=&quot;#line-statements&quot;&gt;行ステートメント&lt;/a&gt;が有効になっている場合、行の先頭まで先頭の空白が自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="dbe80db574a24a0d79070262cf3b1b59f025bd40" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../extensions/index#newstyle-gettext&quot;&gt;New Style Gettext&lt;/a&gt; calls are activated, using placeholders is easier. Formatting is part of the &lt;code&gt;gettext&lt;/code&gt; call instead of using the &lt;code&gt;format&lt;/code&gt; filter.</source>
          <target state="translated">&lt;a href=&quot;../extensions/index#newstyle-gettext&quot;&gt;新しいスタイルのGettext&lt;/a&gt;呼び出しがアクティブになっている場合、プレースホルダーの使用は簡単です。フォーマットは、 &lt;code&gt;format&lt;/code&gt; フィルターを使用する代わりに、 &lt;code&gt;gettext&lt;/code&gt; 呼び出しの一部です。</target>
        </trans-unit>
        <trans-unit id="d36aa6da0fcf9b351cc7aa9853723794d8ad6cdf" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt; is installed, see &lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/integration/#babel-integration&quot;&gt;Babel Integration&lt;/a&gt; to extract the strings.</source>
          <target state="translated">&lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;がインストールされている場合は、&lt;a href=&quot;https://jinja.palletsprojects.com/en/2.11.x/integration/#babel-integration&quot;&gt;BabelIntegrationを&lt;/a&gt;参照して文字列を抽出してください。</target>
        </trans-unit>
        <trans-unit id="ec41d053539c5a19c5e158159239fcbe17bfe49a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;newstyle&lt;/code&gt; is activated, the callables are wrapped to work like newstyle callables. See &lt;a href=&quot;#newstyle-gettext&quot;&gt;New Style Gettext&lt;/a&gt; for more information.</source>
          <target state="translated">場合 &lt;code&gt;newstyle&lt;/code&gt; が活性化され、呼び出し可能オブジェクトはnewstyle呼び出し可能オブジェクトのような仕事に包まれています。詳細については&lt;a href=&quot;#newstyle-gettext&quot;&gt;、新しいスタイルのGettext&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b215c3279071570eeca62d7a0b8aa0f15618e5a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;py_compile&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; .pyc files will be written to the target instead of standard .py files. This flag does not do anything on pypy and Python 3 where pyc files are not picked up by itself and don&amp;rsquo;t give much benefit.</source>
          <target state="translated">&lt;code&gt;py_compile&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; に設定されている場合、.pycファイルは標準の.pyファイルではなくターゲットに書き込まれます。このフラグは、pycファイルがそれ自体で取得されず、あまりメリットがないpypyおよびPython3では何もしません。</target>
        </trans-unit>
        <trans-unit id="343aca3bcc821422f2d9d8367cb28d74ab6938b8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;test&lt;/code&gt; is true, &lt;code&gt;body&lt;/code&gt; is rendered, else &lt;code&gt;else_&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;test&lt;/code&gt; 真である、 &lt;code&gt;body&lt;/code&gt; レンダリングされ、それ以外の &lt;code&gt;else_&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fa40e550e6fad33d3a4b003ba47b6ce77ba11ab" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;target&lt;/em&gt; is specified, the &lt;code&gt;target&lt;/code&gt; attribute will be added to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">場合は&lt;em&gt;、ターゲットが&lt;/em&gt;指定され、 &lt;code&gt;target&lt;/code&gt; 属性が追加され &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; タグ：</target>
        </trans-unit>
        <trans-unit id="61eed3660645882617baf218a091099d9cf2b60b" translate="yes" xml:space="preserve">
          <source>If Expression</source>
          <target state="translated">式の場合</target>
        </trans-unit>
        <trans-unit id="e851919bad92f98f2a7a4f59ec333e869febb9f9" translate="yes" xml:space="preserve">
          <source>If a macro name starts with an underscore, it&amp;rsquo;s not exported and can&amp;rsquo;t be imported.</source>
          <target state="translated">マクロ名がアンダースコアで始まる場合、そのマクロ名はエクスポートされず、インポートできません。</target>
        </trans-unit>
        <trans-unit id="4e80e1dbfcda27aa91a0edf26e47ba019f070328" translate="yes" xml:space="preserve">
          <source>If a string that you marked safe is passed through other Python code that doesn&amp;rsquo;t understand that mark, it may get lost. Be aware of when your data is marked safe and how it is processed before arriving at the template.</source>
          <target state="translated">安全とマークした文字列が、そのマークを理解しない他のPythonコードを通過すると、失われる可能性があります。テンプレートに到達する前に、データが安全であるとマークされたときと、データがどのように処理されるかに注意してください。</target>
        </trans-unit>
        <trans-unit id="ec3b9aa8a6990b3841477caf85d06785b8bc29ed" translate="yes" xml:space="preserve">
          <source>If a template object was passed in the template context, you can extend from that object as well. Assuming the calling code passes a layout template as &lt;code&gt;layout_template&lt;/code&gt; to the environment, this code works:</source>
          <target state="translated">テンプレートオブジェクトがテンプレートコンテキストで渡された場合は、そのオブジェクトから拡張することもできます。呼び出し元のコードがレイアウトテンプレートを &lt;code&gt;layout_template&lt;/code&gt; として環境に渡すと仮定すると、このコードは機能します。</target>
        </trans-unit>
        <trans-unit id="cd0636f75f47b039d96e019ddd55694a1e727b57" translate="yes" xml:space="preserve">
          <source>If a template was created by using the &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; constructor an environment is created automatically. These environments are created as shared environments which means that multiple templates may have the same anonymous environment. For all shared environments this attribute is &lt;code&gt;True&lt;/code&gt;, else &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;コンストラクターを使用してテンプレートが作成された場合、環境は自動的に作成されます。これらの環境は共有環境として作成されます。つまり、複数のテンプレートが同じ匿名環境を持つ場合があります。すべての共有環境で、この属性は &lt;code&gt;True&lt;/code&gt; 、それ以外の場合は &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4f676f09d2304685e2d3ea6b7d182d454f8d54b3" translate="yes" xml:space="preserve">
          <source>If a value has been escaped but is not marked safe, auto-escaping will still take place and result in double-escaped characters. If you know you have data that is already safe but not marked, be sure to wrap it in &lt;code&gt;Markup&lt;/code&gt; or use the &lt;code&gt;|safe&lt;/code&gt; filter.</source>
          <target state="translated">値がエスケープされているが安全とマークされていない場合でも、自動エスケープが実行され、二重エスケープ文字が生成されます。すでに安全であるがマークされていないデータがあることがわかっている場合は、必ず &lt;code&gt;Markup&lt;/code&gt; ラップするか、 &lt;code&gt;|safe&lt;/code&gt; フィルターを使用してください。</target>
        </trans-unit>
        <trans-unit id="9b6e900485635755d2210d918bf607de371eb678" translate="yes" xml:space="preserve">
          <source>If a variable or attribute does not exist, you will get back an undefined value. What you can do with that kind of value depends on the application configuration: the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation.</source>
          <target state="translated">変数や属性が存在しない場合、未定義の値が返されます。そのような値で何ができるかは、アプリケーションの設定に依存します:デフォルトの動作は、印刷された場合や反復処理された場合は空の文字列に評価され、それ以外の操作はすべて失敗します。</target>
        </trans-unit>
        <trans-unit id="e0333565a04b8c2a31552cf9b90085b11ad8b278" translate="yes" xml:space="preserve">
          <source>If all you want to do is check whether some value has changed since the last iteration or will change in the next iteration, you can use &lt;code&gt;previtem&lt;/code&gt; and &lt;code&gt;nextitem&lt;/code&gt;:</source>
          <target state="translated">前回の反復以降に値が変更されたかどうか、または次の反復で変更されるかどうかを確認するだけの場合は、 &lt;code&gt;previtem&lt;/code&gt; と &lt;code&gt;nextitem&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="29a5f58cff42a46823687e9dd9fa2af5271a4dd4" translate="yes" xml:space="preserve">
          <source>If an application configures Jinja to &lt;code&gt;trim_blocks&lt;/code&gt;, the first newline after a template tag is removed automatically (like in PHP). The &lt;code&gt;lstrip_blocks&lt;/code&gt; option can also be set to strip tabs and spaces from the beginning of a line to the start of a block. (Nothing will be stripped if there are other characters before the start of the block.)</source>
          <target state="translated">アプリケーションがJinjaを &lt;code&gt;trim_blocks&lt;/code&gt; に構成する場合、テンプレートタグの後の最初の改行は（PHPのように）自動的に削除されます。 &lt;code&gt;lstrip_blocks&lt;/code&gt; のオプションは、ブロックの先頭に行の先頭からタブとスペースを削除するように設定することができます。（ブロックの開始前に他の文字がある場合、何も削除されません。）</target>
        </trans-unit>
        <trans-unit id="038915cb735aefb89c7e4baa93a07c6d485a0108" translate="yes" xml:space="preserve">
          <source>If an exception in the template code happens the template engine will not rewrite the exception but pass through the original one. As a matter of fact this function should only be called from within a &lt;a href=&quot;#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.generate&quot;&gt;&lt;code&gt;generate()&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.stream&quot;&gt;&lt;code&gt;stream()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">テンプレートコードで例外が発生した場合、テンプレートエンジンは例外を書き換えず、元の例外を通過させます。実際のところ、この関数は、&lt;a href=&quot;#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.generate&quot;&gt; &lt;code&gt;generate()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#jinja2.Template.stream&quot;&gt; &lt;code&gt;stream()&lt;/code&gt; &lt;/a&gt;呼び出し内からのみ呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="4f939b09d812021498a011e771194a4b034ac324" translate="yes" xml:space="preserve">
          <source>If any of the &lt;a href=&quot;#jinja2.ext.Extension.tags&quot;&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/a&gt; matched this method is called with the parser as first argument. The token the parser stream is pointing at is the name token that matched. This method has to return one or a list of multiple nodes.</source>
          <target state="translated">一致する&lt;a href=&quot;#jinja2.ext.Extension.tags&quot;&gt; &lt;code&gt;tags&lt;/code&gt; &lt;/a&gt;いずれかがあれば、このメソッドはパーサーを最初の引数として呼び出されます。パーサーストリームが指しているトークンは、一致した名前トークンです。このメソッドは、1つまたは複数のノードのリストを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8f00ed9bd274ae612833ee61ed456c5c2a76360e" translate="yes" xml:space="preserve">
          <source>If buffering is enabled with a buffer size of 5, five items are combined into a new unicode string. This is mainly useful if you are streaming big templates to a client via WSGI which flushes after each iteration.</source>
          <target state="translated">バッファリングがバッファサイズ5で有効になっている場合、5つの項目が新しいユニコード文字列に結合されます。これは主に、WSGI経由でクライアントに大きなテンプレートをストリーミングしている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f63a24dfab50ef19c75b9d27ea3886a7e74cf5d4" translate="yes" xml:space="preserve">
          <source>If called with an unsupported object (such as unicode) &lt;code&gt;False&lt;/code&gt; is returned.</source>
          <target state="translated">サポートされていないオブジェクト（Unicodeなど）で呼び出された場合、 &lt;code&gt;False&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="652fe5a11ad3942e771cf64f009cd8e441b532cc" translate="yes" xml:space="preserve">
          <source>If can also be used as an &lt;a href=&quot;#if-expression&quot;&gt;inline expression&lt;/a&gt; and for &lt;a href=&quot;#loop-filtering&quot;&gt;loop filtering&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#if-expression&quot;&gt;インライン式&lt;/a&gt;およびfor&lt;a href=&quot;#loop-filtering&quot;&gt;ループフィルタリング&lt;/a&gt;としても使用できる場合。</target>
        </trans-unit>
        <trans-unit id="6d29e99455416258f96b19682e879ee06ca616a6" translate="yes" xml:space="preserve">
          <source>If created with an import name the import name is returned on node access. For example &lt;code&gt;ImportedName('cgi.escape')&lt;/code&gt; returns the &lt;code&gt;escape&lt;/code&gt; function from the cgi module on evaluation. Imports are optimized by the compiler so there is no need to assign them to local variables.</source>
          <target state="translated">インポート名で作成された場合、インポート名はノードアクセス時に返されます。たとえば、 &lt;code&gt;ImportedName('cgi.escape')&lt;/code&gt; は、評価時にcgiモジュールから &lt;code&gt;escape&lt;/code&gt; 関数を返します。インポートはコンパイラによって最適化されるため、ローカル変数に割り当てる必要はありません。</target>
        </trans-unit>
        <trans-unit id="efb2be0d2f96e6bf2721108b191d020ea9fc02ca" translate="yes" xml:space="preserve">
          <source>If given and a string, this will be used as prefix for line based comments. See also &lt;a href=&quot;../templates/index#line-statements&quot;&gt;Line Statements&lt;/a&gt;.</source>
          <target state="translated">文字列が指定されている場合、これは行ベースのコメントのプレフィックスとして使用されます。&lt;a href=&quot;../templates/index#line-statements&quot;&gt;行ステートメント&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="d9e04d40ba59e3e333b744bb6ba4de863fb6d4bf" translate="yes" xml:space="preserve">
          <source>If given and a string, this will be used as prefix for line based statements. See also &lt;a href=&quot;../templates/index#line-statements&quot;&gt;Line Statements&lt;/a&gt;.</source>
          <target state="translated">文字列が指定されている場合、これは行ベースのステートメントのプレフィックスとして使用されます。&lt;a href=&quot;../templates/index#line-statements&quot;&gt;行ステートメント&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9d6fb778aa6f87edcf729155c9b9d982fcc186c7" translate="yes" xml:space="preserve">
          <source>If it the &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;obj&lt;/code&gt; is known (for example because an attribute was accessed) it should be passed to the undefined object, even if a custom &lt;code&gt;hint&lt;/code&gt; is provided. This gives undefined objects the possibility to enhance the error message.</source>
          <target state="translated">その場合は &lt;code&gt;name&lt;/code&gt; や &lt;code&gt;obj&lt;/code&gt; （属性がアクセスされたため、など）には、カスタムの場合でも、未定義のオブジェクトに渡されるべきで知られている &lt;code&gt;hint&lt;/code&gt; 提供されます。これにより、未定義のオブジェクトがエラーメッセージを強調する可能性があります。</target>
        </trans-unit>
        <trans-unit id="498f93ef9ad4c6acabed81817da2d37dad737547" translate="yes" xml:space="preserve">
          <source>If line statements are enabled by the application, it&amp;rsquo;s possible to mark a line as a statement. For example, if the line statement prefix is configured to &lt;code&gt;#&lt;/code&gt;, the following two examples are equivalent:</source>
          <target state="translated">行ステートメントがアプリケーションによって有効になっている場合、行をステートメントとしてマークすることができます。たとえば、行ステートメントのプレフィックスが &lt;code&gt;#&lt;/code&gt; に設定されている場合、次の2つの例は同等です。</target>
        </trans-unit>
        <trans-unit id="09befb1888a7d92dab1f0dec6f657bd73d21a34f" translate="yes" xml:space="preserve">
          <source>If manual escaping is enabled, it&amp;rsquo;s &lt;strong&gt;your&lt;/strong&gt; responsibility to escape variables if needed. What to escape? If you have a variable that &lt;em&gt;may&lt;/em&gt; include any of the following chars (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, or &lt;code&gt;&quot;&lt;/code&gt;) you &lt;strong&gt;SHOULD&lt;/strong&gt; escape it unless the variable contains well-formed and trusted HTML. Escaping works by piping the variable through the &lt;code&gt;|e&lt;/code&gt; filter:</source>
          <target state="translated">手動エスケープが有効になっている場合、必要に応じて変数をエスケープするのは&lt;strong&gt;ユーザーの&lt;/strong&gt;責任です。何を逃れる？あなたは、変数を持っている場合はそれが&lt;em&gt;あり&lt;/em&gt;、次の文字のいずれかを含む（ &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、または &lt;code&gt;&quot;&lt;/code&gt; ）あなたが&lt;strong&gt;すべきである&lt;/strong&gt;変数は、HTMLを整形式含まれており、信頼されない限り、それをエスケープを通じて変数をパイプで作品を脱出。 &lt;code&gt;|e&lt;/code&gt; フィルタ：</target>
        </trans-unit>
        <trans-unit id="873edc0860b087feb66a3bd95dab9b92b00c4011" translate="yes" xml:space="preserve">
          <source>If more positional arguments are passed to the macro than accepted by the macro, they end up in the special &lt;code&gt;varargs&lt;/code&gt; variable as a list of values.</source>
          <target state="translated">マクロで受け入れられるよりも多くの位置引数がマクロに渡されると、それらは値のリストとして特別な &lt;code&gt;varargs&lt;/code&gt; 変数に入れられます。</target>
        </trans-unit>
        <trans-unit id="8e8b8dcc3153729e1fad151cd813d4e5326a788a" translate="yes" xml:space="preserve">
          <source>If no directory is specified a default cache directory is selected. On Windows the user&amp;rsquo;s temp directory is used, on UNIX systems a directory is created for the user in the system temp directory.</source>
          <target state="translated">ディレクトリが指定されていない場合は、デフォルトのキャッシュディレクトリが選択されます。Windowsでは、ユーザーの一時ディレクトリが使用されます。UNIXシステムでは、システムの一時ディレクトリにユーザー用のディレクトリが作成されます。</target>
        </trans-unit>
        <trans-unit id="8ef0b05763d36f99a4dda8920b0f777cbc3f56b9" translate="yes" xml:space="preserve">
          <source>If no iteration took place because the sequence was empty or the filtering removed all the items from the sequence, you can render a default block by using &lt;code&gt;else&lt;/code&gt;:</source>
          <target state="translated">シーケンスが空であるか、フィルタリングによってシーケンスからすべてのアイテムが削除されたために反復が行われなかった場合は、 &lt;code&gt;else&lt;/code&gt; ：を使用してデフォルトのブロックをレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="e3c76a1a45bd22e9b7055d53108f1d2b629ccfb2" translate="yes" xml:space="preserve">
          <source>If no test is specified, each object will be evaluated as a boolean.</source>
          <target state="translated">テストが指定されていない場合、各オブジェクトはブール値として評価されます。</target>
        </trans-unit>
        <trans-unit id="8243d617aeb8cf834d3f4330fc7faff937111e8f" translate="yes" xml:space="preserve">
          <source>If no test is specified, the attribute&amp;rsquo;s value will be evaluated as a boolean.</source>
          <target state="translated">テストが指定されていない場合、属性の値はブール値として評価されます。</target>
        </trans-unit>
        <trans-unit id="918ad3e8425484fcee6662f9b92952e55fc49fff" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt; the XML/HTML autoescaping feature is enabled by default. For more details about autoescaping see &lt;code&gt;Markup&lt;/code&gt;. As of Jinja 2.4 this can also be a callable that is passed the template name and has to return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on autoescape should be enabled by default.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; に設定すると、XML / HTML自動エスケープ機能がデフォルトで有効になります。自動エスケープの詳細については、 &lt;code&gt;Markup&lt;/code&gt; 参照してください。Jinja 2.4以降、これはテンプレート名が渡される呼び出し可能オブジェクトである可能性があり、自動エスケープに応じて &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; を返す必要があります。デフォルトで有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="93c71f3139ba82499f6941aa0d79a29310b475ef" translate="yes" xml:space="preserve">
          <source>If set to a bytecode cache object, this object will provide a cache for the internal Jinja bytecode so that templates don&amp;rsquo;t have to be parsed if they were not changed.</source>
          <target state="translated">バイトコードキャッシュオブジェクトに設定されている場合、このオブジェクトは内部Jinjaバイトコードのキャッシュを提供するため、テンプレートが変更されていない場合に解析する必要はありません。</target>
        </trans-unit>
        <trans-unit id="e6bd6f24c4f0008051d6d039cff2832896ac998d" translate="yes" xml:space="preserve">
          <source>If set to true this enables async template execution which allows you to take advantage of newer Python features. This requires Python 3.6 or later.</source>
          <target state="translated">trueに設定されている場合、これは非同期テンプレートの実行を可能にし、Pythonの新しい機能を利用することができます。これには Python 3.6 以降が必要です。</target>
        </trans-unit>
        <trans-unit id="5c9aff29030026f50854923569ed1b7d44dd1718" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../extensions/index#debug-extension&quot;&gt;Debug Extension&lt;/a&gt; is enabled, a &lt;code&gt;{% debug %}&lt;/code&gt; tag will be available to dump the current context as well as the available filters and tests. This is useful to see what&amp;rsquo;s available to use in the template without setting up a debugger.</source>
          <target state="translated">場合&lt;a href=&quot;../extensions/index#debug-extension&quot;&gt;デバッグ拡張が&lt;/a&gt;有効になっている、 &lt;code&gt;{% debug %}&lt;/code&gt; タグは、利用可能なフィルタ及び試験、ならびに現在のコンテキストをダンプするために利用可能であろう。これは、デバッガーを設定せずにテンプレートで使用できるものを確認するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="abe932d1dbe7fd6bebfe45b7d0c7584f530b201f" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n Extension&lt;/a&gt; is enabled, it&amp;rsquo;s possible to mark text in the template as translatable. To mark a section as translatable, use a &lt;code&gt;trans&lt;/code&gt; block:</source>
          <target state="translated">&lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n拡張機能&lt;/a&gt;が有効になっている場合、テンプレート内のテキストを翻訳可能としてマークすることができます。セクションを翻訳可能としてマークするには、 &lt;code&gt;trans&lt;/code&gt; ブロックを使用します。</target>
        </trans-unit>
        <trans-unit id="3309631c1a537a359c5a8e9d68c061c2623e6394" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;node&lt;/code&gt; of a filter is &lt;code&gt;None&lt;/code&gt; the contents of the last buffer are filtered. Buffers are created by macros and filter blocks.</source>
          <target state="translated">フィルタの &lt;code&gt;node&lt;/code&gt; が &lt;code&gt;None&lt;/code&gt; の場合、最後のバッファの内容がフィルタリングされます。バッファーは、マクロとフィルターブロックによって作成されます。</target>
        </trans-unit>
        <trans-unit id="a5e03b565bfbd63630d2f10f2a7746ee3924db6d" translate="yes" xml:space="preserve">
          <source>If the application enables the &lt;a href=&quot;../extensions/index#loopcontrols-extension&quot;&gt;Loop Controls&lt;/a&gt;, it&amp;rsquo;s possible to use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; in loops. When &lt;code&gt;break&lt;/code&gt; is reached, the loop is terminated; if &lt;code&gt;continue&lt;/code&gt; is reached, the processing is stopped and continues with the next iteration.</source>
          <target state="translated">アプリケーションが&lt;a href=&quot;../extensions/index#loopcontrols-extension&quot;&gt;ループ制御を&lt;/a&gt;有効にしている場合、 &lt;code&gt;break&lt;/code&gt; を使用してループを &lt;code&gt;continue&lt;/code&gt; することができます。ときに &lt;code&gt;break&lt;/code&gt; 到達し、ループが終了されます。場合 &lt;code&gt;continue&lt;/code&gt; に到達すると、処理が停止し、次の反復を続行しています。</target>
        </trans-unit>
        <trans-unit id="cf0ceb0edc052ea49514b544fb57fc23fb50c219" translate="yes" xml:space="preserve">
          <source>If the environment is sandboxed this attribute is &lt;code&gt;True&lt;/code&gt;. For the sandbox mode have a look at the documentation for the &lt;a href=&quot;../sandbox/index#jinja2.sandbox.SandboxedEnvironment&quot;&gt;&lt;code&gt;SandboxedEnvironment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">環境がサンドボックス化されている場合、この属性は &lt;code&gt;True&lt;/code&gt; です。サンドボックスモードについては、&lt;a href=&quot;../sandbox/index#jinja2.sandbox.SandboxedEnvironment&quot;&gt; &lt;code&gt;SandboxedEnvironment&lt;/code&gt; の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="deabd5b07d4a15293097a21b3164961179ee26c6" translate="yes" xml:space="preserve">
          <source>If the expression-statement extension is loaded, a tag called &lt;code&gt;do&lt;/code&gt; is available that works exactly like the regular variable expression (&lt;code&gt;{{ ... }}&lt;/code&gt;); except it doesn&amp;rsquo;t print anything. This can be used to modify lists:</source>
          <target state="translated">式ステートメント拡張がロードされると、通常の変数式（ &lt;code&gt;{{ ... }}&lt;/code&gt; ）とまったく同じように機能する &lt;code&gt;do&lt;/code&gt; というタグが使用可能になります。何も印刷しないことを除いて。これは、リストを変更するために使用できます。</target>
        </trans-unit>
        <trans-unit id="7c8bf833c466bdc5b81f2ed0e43072afb4ea22c6" translate="yes" xml:space="preserve">
          <source>If the extension implements custom tags this is a set of tag names the extension is listening for.</source>
          <target state="translated">拡張機能がカスタムタグを実装している場合、これは拡張機能がリッスンするタグ名のセットです。</target>
        </trans-unit>
        <trans-unit id="73fc2f95a5e4ab4972ffc36c255217be41391b9f" translate="yes" xml:space="preserve">
          <source>If the loader does not support that, a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">ローダーがそれをサポートしていない場合、&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="774ddd4d2b1b6e8e0f07e09842522fdf1178ea80" translate="yes" xml:space="preserve">
          <source>If the macro was called from a &lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt; tag, the caller is stored in this variable as a callable macro.</source>
          <target state="translated">マクロが&lt;a href=&quot;#call&quot;&gt;呼び出し&lt;/a&gt;タグから呼び出された場合、呼び出し元は呼び出し可能マクロとしてこの変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="67221b45b4caeca8b8293a692ac7f1eba2903bc1" translate="yes" xml:space="preserve">
          <source>If the macro was defined in a different template, you have to &lt;a href=&quot;#import&quot;&gt;import&lt;/a&gt; it first.</source>
          <target state="translated">マクロが別のテンプレートで定義されている場合は、最初に&lt;a href=&quot;#import&quot;&gt;インポート&lt;/a&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="4356fe2ed13d62d966ed88f6c76a9e9b6d288262" translate="yes" xml:space="preserve">
          <source>If the package path is not given, &lt;code&gt;'templates'&lt;/code&gt; is assumed.</source>
          <target state="translated">パッケージパスが指定されていない場合、 &lt;code&gt;'templates'&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="ae3ffa297d475a3e6768da347f8211dd197ada8d" translate="yes" xml:space="preserve">
          <source>If the template does not exist a &lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt;&lt;code&gt;TemplateNotFound&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">テンプレートが存在しない場合、&lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt; &lt;code&gt;TemplateNotFound&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a40ff64c77cdda4a646f7adb5f85f8cc6f5ab6f6" translate="yes" xml:space="preserve">
          <source>If the template tries to access insecure code a &lt;a href=&quot;#jinja2.sandbox.SecurityError&quot;&gt;&lt;code&gt;SecurityError&lt;/code&gt;&lt;/a&gt; is raised. However also other exceptions may occur during the rendering so the caller has to ensure that all exceptions are caught.</source>
          <target state="translated">テンプレートが安全でないコードにアクセスしようとすると、&lt;a href=&quot;#jinja2.sandbox.SecurityError&quot;&gt; &lt;code&gt;SecurityError&lt;/code&gt; &lt;/a&gt;が発生します。ただし、レンダリング中に他の例外も発生する可能性があるため、呼び出し元はすべての例外がキャッチされていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="dbb2a698047c651587365d4063bfd9f73ee33b30" translate="yes" xml:space="preserve">
          <source>If the value is undefined it will return the passed default value, otherwise the value of the variable:</source>
          <target state="translated">値が未定義の場合は、渡されたデフォルト値を返し、そうでない場合は変数の値を返します。</target>
        </trans-unit>
        <trans-unit id="8a041f5b595505e5da334fa579e86d08ff093ecd" translate="yes" xml:space="preserve">
          <source>If there are other files in the template folder besides the actual templates, the returned list can be filtered. There are two ways: either &lt;code&gt;extensions&lt;/code&gt; is set to a list of file extensions for templates, or a &lt;code&gt;filter_func&lt;/code&gt; can be provided which is a callable that is passed a template name and should return &lt;code&gt;True&lt;/code&gt; if it should end up in the result list.</source>
          <target state="translated">テンプレートフォルダに実際のテンプレート以外のファイルがある場合は、返されるリストをフィルタリングできます。2つの方法があります。いずれか &lt;code&gt;extensions&lt;/code&gt; テンプレートのファイル拡張子のリストに設定されている、または &lt;code&gt;filter_func&lt;/code&gt; は、テンプレート名を渡され、返す必要があります呼び出し可能で提供することができる &lt;code&gt;True&lt;/code&gt; それが結果リストに終わる必要があります。</target>
        </trans-unit>
        <trans-unit id="a706f98204e68604778087b0481f2792765f55ef" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;True&lt;/code&gt; leading spaces and tabs are stripped from the start of a line to a block. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">これが &lt;code&gt;True&lt;/code&gt; に設定されている場合、先頭のスペースとタブは行の先頭からブロックまで削除されます。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="caae8e57804aef70109fdd9645cf6a2f7d3da508" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;True&lt;/code&gt; the first newline after a block is removed (block, not variable tag!). Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">これが &lt;code&gt;True&lt;/code&gt; に設定されている場合、ブロックが削除された後の最初の改行（変数タグではなくブロック！）。デフォルトは &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="40ee947658e93bda949c9db55667adb3d4eebade" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;{% trans %}&lt;/code&gt; blocks of the &lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n Extension&lt;/a&gt; will always unify linebreaks and surrounding whitespace as if the &lt;code&gt;trimmed&lt;/code&gt; modifier was used.</source>
          <target state="translated">これが &lt;code&gt;True&lt;/code&gt; に設定されている場合、&lt;a href=&quot;../extensions/index#i18n-extension&quot;&gt;i18n拡張機能の&lt;/a&gt; &lt;code&gt;{% trans %}&lt;/code&gt; ブロックは、 &lt;code&gt;trimmed&lt;/code&gt; 修飾子が使用されたかのように、常に改行と周囲の空白を統合します。</target>
        </trans-unit>
        <trans-unit id="80a7105cbb391c91cfbdd5db41e39e6ff3c23c31" translate="yes" xml:space="preserve">
          <source>If this is set to a value other than &lt;code&gt;None&lt;/code&gt; then the &lt;code&gt;tojson&lt;/code&gt; filter will dump with this function instead of the default one. Note that this function should accept arbitrary extra arguments which might be passed in the future from the filter. Currently the only argument that might be passed is &lt;code&gt;indent&lt;/code&gt;. The default dump function is &lt;code&gt;json.dumps&lt;/code&gt;.</source>
          <target state="translated">これが &lt;code&gt;None&lt;/code&gt; 以外の値に設定されている場合、 &lt;code&gt;tojson&lt;/code&gt; フィルターは、デフォルトの関数ではなく、この関数でダンプします。この関数は、将来フィルターから渡される可能性のある任意の追加引数を受け入れる必要があることに注意してください。現在、渡される可能性のある唯一の引数は &lt;code&gt;indent&lt;/code&gt; です。デフォルトのダンプ関数は &lt;code&gt;json.dumps&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ae5d3431247b164fe58088ab45ff480abd4ea727" translate="yes" xml:space="preserve">
          <source>If trimming is enabled globally, the &lt;code&gt;notrimmed&lt;/code&gt; modifier can be used to disable it for a block.</source>
          <target state="translated">トリミングがグローバルに有効になっている場合、 &lt;code&gt;notrimmed&lt;/code&gt; 修飾子を使用してブロックに対してそれを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="b35fa12d74b184552d0789b38a86bd4a2edd55f4" translate="yes" xml:space="preserve">
          <source>If you are &lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;developing Jinja extensions&lt;/a&gt; this gives you a good overview of the node tree generated.</source>
          <target state="translated">&lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;Jinja拡張機能&lt;/a&gt;を開発している場合、これにより、生成されたノードツリーの概要がわかります。</target>
        </trans-unit>
        <trans-unit id="4818a5c56bf96bb61ed74a49d75f4f68e375bf96" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify a method &lt;code&gt;'common'&lt;/code&gt; is used.</source>
          <target state="translated">メソッドを指定しない場合は、 &lt;code&gt;'common'&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="34239d6e7c2daaea9bfa2d5f1bf0ef8ec5b516b5" translate="yes" xml:space="preserve">
          <source>If you have any exposure to other text-based template languages, such as Smarty or Django, you should feel right at home with Jinja. It&amp;rsquo;s both designer and developer friendly by sticking to Python&amp;rsquo;s principles and adding functionality useful for templating environments.</source>
          <target state="translated">SmartyやDjangoなど、他のテキストベースのテンプレート言語に触れている場合は、Jinjaに慣れているはずです。Pythonの原則に固執し、環境のテンプレート化に役立つ機能を追加することで、デザイナーと開発者の両方に優しいです。</target>
        </trans-unit>
        <trans-unit id="01f05b2ac0e9ec8a4194e82a84a84b245820a1f6" translate="yes" xml:space="preserve">
          <source>If you only care whether the value changed at all, using &lt;code&gt;changed&lt;/code&gt; is even easier:</source>
          <target state="translated">あなたが唯一の価値が全く変更されたかどうか気にした場合は、使用して &lt;code&gt;changed&lt;/code&gt; も簡単です。</target>
        </trans-unit>
        <trans-unit id="94017224c959e2cc93f4c35b42e94abed760dc65" translate="yes" xml:space="preserve">
          <source>If you pass it a second argument it&amp;rsquo;s used to fill missing values on the last iteration.</source>
          <target state="translated">2番目の引数を渡すと、最後の反復で欠落している値を埋めるために使用されます。</target>
        </trans-unit>
        <trans-unit id="64169250ac8296711ccc2dbdd8c0dd925276a46b" translate="yes" xml:space="preserve">
          <source>If you pass the filter an additional integer it will shorten the urls to that number. Also a third argument exists that makes the urls &amp;ldquo;nofollow&amp;rdquo;:</source>
          <target state="translated">フィルタに追加の整数を渡すと、URLがその数に短縮されます。また、URLを「nofollow」にする3番目の引数が存在します。</target>
        </trans-unit>
        <trans-unit id="e2200f0a3d1453009b6420e1ba9e3bf8090477be" translate="yes" xml:space="preserve">
          <source>If you want to enable it for all templates created from strings or for all templates with &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.xml&lt;/code&gt; extensions:</source>
          <target state="translated">文字列から作成されたすべてのテンプレート、または拡張子が &lt;code&gt;.html&lt;/code&gt; および &lt;code&gt;.xml&lt;/code&gt; のすべてのテンプレートに対して有効にする場合：</target>
        </trans-unit>
        <trans-unit id="b37ef936225be8369e6c87c358b8fa7403f38fa9" translate="yes" xml:space="preserve">
          <source>If you want to have different styles for each row of a table or list you can use the &lt;code&gt;cycle&lt;/code&gt; method on the &lt;code&gt;loop&lt;/code&gt; object:</source>
          <target state="translated">テーブルまたはリストの行ごとに異なるスタイルが必要な場合は、 &lt;code&gt;loop&lt;/code&gt; オブジェクトで &lt;code&gt;cycle&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="d3359aaffdf15a30a20148b8dcfeab5c9a86d270" translate="yes" xml:space="preserve">
          <source>If you want to print a block multiple times, you can, however, use the special &lt;code&gt;self&lt;/code&gt; variable and call the block with that name:</source>
          <target state="translated">ただし、ブロックを複数回印刷する場合は、特別な &lt;code&gt;self&lt;/code&gt; 変数を使用して、その名前でブロックを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="693fb0990c92b9435ed482664191f788db51c55b" translate="yes" xml:space="preserve">
          <source>If you want you can activate and deactivate the autoescaping from within the templates.</source>
          <target state="translated">あなたがしたい場合は、テンプレート内から自動エスケープを有効にしたり、無効にしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="5c2d1008390fca0dfe0d8ece63f63ffb0f734e24" translate="yes" xml:space="preserve">
          <source>If you wish to use the &lt;a href=&quot;../api/index#jinja2.PackageLoader&quot;&gt;&lt;code&gt;PackageLoader&lt;/code&gt;&lt;/a&gt; class, you will also need &lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;setuptools&lt;/a&gt; or &lt;a href=&quot;https://pypi.org/project/distribute/&quot;&gt;distribute&lt;/a&gt; installed at runtime.</source>
          <target state="translated">&lt;a href=&quot;../api/index#jinja2.PackageLoader&quot;&gt; &lt;code&gt;PackageLoader&lt;/code&gt; &lt;/a&gt;クラスを使用する場合は、実行時に&lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;setuptools&lt;/a&gt;または&lt;a href=&quot;https://pypi.org/project/distribute/&quot;&gt;distributeを&lt;/a&gt;インストールする必要もあります。</target>
        </trans-unit>
        <trans-unit id="f32be784a9fd750f505617b04b2e4df4592177d3" translate="yes" xml:space="preserve">
          <source>Imagine we have a helper module that renders forms (called &lt;code&gt;forms.html&lt;/code&gt;):</source>
          <target state="translated">フォームをレンダリングするヘルパーモジュール（ &lt;code&gt;forms.html&lt;/code&gt; と呼ばれる）があると想像してください。</target>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="translated">Implementation</target>
        </trans-unit>
        <trans-unit id="d6fbc9d2bdd580e18ed0bc5805dc26db323d6f5f" translate="yes" xml:space="preserve">
          <source>Import</source>
          <target state="translated">Import</target>
        </trans-unit>
        <trans-unit id="8c44d87482e0946a781a2efd54baff4fa3c5a4f7" translate="yes" xml:space="preserve">
          <source>Import Context Behavior</source>
          <target state="translated">インポートコンテキスト動作</target>
        </trans-unit>
        <trans-unit id="7e83b3794c038d6f0ca4ef9cc5b9bced8071b8a2" translate="yes" xml:space="preserve">
          <source>In Jinja 2.0, the context that was passed to the included template did not include variables defined in the template. As a matter of fact, this did not work:</source>
          <target state="translated">Jinja 2.0では、インクルードされたテンプレートに渡されるコンテキストには、テンプレートで定義された変数が含まれていませんでした。実はこれがうまくいきませんでした。</target>
        </trans-unit>
        <trans-unit id="b92c630151cffc4c76d815474e16f9d12d9c9955" translate="yes" xml:space="preserve">
          <source>In earlier Jinja versions the &lt;code&gt;b&lt;/code&gt; attribute would refer to the results of the first attribute. If you depend on this behavior you can rewrite it to use the &lt;code&gt;set&lt;/code&gt; tag:</source>
          <target state="translated">以前のJinjaバージョンでは、 &lt;code&gt;b&lt;/code&gt; 属性は最初の属性の結果を参照していました。この動作に依存している場合は、 &lt;code&gt;set&lt;/code&gt; タグを使用するように書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="d5f8b01566bb49ba927a7de154b278ca7f62f21c" translate="yes" xml:space="preserve">
          <source>In future versions of Jinja we might enable autoescaping by default for security reasons. As such you are encouraged to explicitly configure autoescaping now instead of relying on the default.</source>
          <target state="translated">Jinjaの将来のバージョンでは、セキュリティ上の理由からオートエスケープをデフォルトで有効にするかもしれません。そのため、デフォルトに頼るのではなく、明示的にオートエスケープを設定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5987ddaa1ae020326677b08646c0734080e0619f" translate="yes" xml:space="preserve">
          <source>In most cases it should be more convenient and efficient to use the &lt;code&gt;%&lt;/code&gt; operator or &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;%&lt;/code&gt; 演算子または&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt;を使用する方が便利で効率的です。</target>
        </trans-unit>
        <trans-unit id="dbfd97a43a128d3c3010c0d2947e2037d0386e18" translate="yes" xml:space="preserve">
          <source>In new versions you can either use a &lt;a href=&quot;#jinja2.contextfilter&quot;&gt;&lt;code&gt;contextfilter()&lt;/code&gt;&lt;/a&gt; and access the evaluation context from the actual context, or use a &lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt;&lt;code&gt;evalcontextfilter()&lt;/code&gt;&lt;/a&gt; which directly passes the evaluation context to the function:</source>
          <target state="translated">新しいバージョンでは、&lt;a href=&quot;#jinja2.contextfilter&quot;&gt; &lt;code&gt;contextfilter()&lt;/code&gt; &lt;/a&gt;を使用して実際のコンテキストから評価コンテキストにアクセスするか、評価コンテキストを関数に直接渡す&lt;a href=&quot;#jinja2.evalcontextfilter&quot;&gt; &lt;code&gt;evalcontextfilter()&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="d6956e3e95d7d8fae81562918d61e8aef47e9560" translate="yes" xml:space="preserve">
          <source>In older versions of Jinja (before 2.9) it was required to enable this feature with an extension. It&amp;rsquo;s now enabled by default.</source>
          <target state="translated">Jinjaの古いバージョン（2.9より前）では、拡張機能を使用してこの機能を有効にする必要がありました。デフォルトで有効になりました。</target>
        </trans-unit>
        <trans-unit id="158812642ee9cb206d69a4925f27ab30cc6b89f1" translate="yes" xml:space="preserve">
          <source>In previous Jinja versions filters and functions were marked as environment callables in order to check for the autoescape status from the environment. In new versions it&amp;rsquo;s encouraged to check the setting from the evaluation context instead.</source>
          <target state="translated">以前のJinjaバージョンでは、環境からの自動エスケープステータスを確認するために、フィルターと関数が環境呼び出し可能としてマークされていました。新しいバージョンでは、代わりに評価コンテキストから設定を確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3986fde23a0d65176231423a42e62204f552bc3b" translate="yes" xml:space="preserve">
          <source>In some cases it can be useful to pass a macro to another macro. For this purpose, you can use the special &lt;code&gt;call&lt;/code&gt; block. The following example shows a macro that takes advantage of the call functionality and how it can be used:</source>
          <target state="translated">場合によっては、マクロを別のマクロに渡すと便利なことがあります。この目的のために、特別な &lt;code&gt;call&lt;/code&gt; ブロックを使用できます。次の例は、呼び出し機能を利用するマクロとその使用方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ce03e571f14c42d1ac1f447e9c5afa89134b3a49" translate="yes" xml:space="preserve">
          <source>In the case of multiple levels of &lt;code&gt;{% extends %}&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt; references may be chained (as in &lt;code&gt;super.super()&lt;/code&gt;) to skip levels in the inheritance tree.</source>
          <target state="translated">&lt;code&gt;{% extends %}&lt;/code&gt; の複数のレベルの場合、継承ツリーのレベルをスキップするために、 &lt;code&gt;super&lt;/code&gt; 参照がチェーンされる場合があります（ &lt;code&gt;super.super()&lt;/code&gt; のように）。</target>
        </trans-unit>
        <trans-unit id="874391beace4f8faebf0753772b7c892c8c5bdbe" translate="yes" xml:space="preserve">
          <source>In the default configuration:</source>
          <target state="translated">デフォルトの設定では</target>
        </trans-unit>
        <trans-unit id="6c8e722031869aed98be87cee78aab6ed9fdfc52" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;{% block %}&lt;/code&gt; tags define four blocks that child templates can fill in. All the &lt;code&gt;block&lt;/code&gt; tag does is tell the template engine that a child template may override those placeholders in the template.</source>
          <target state="translated">この例では、 &lt;code&gt;{% block %}&lt;/code&gt; タグは、子テンプレートが入力できる4つのブロックを定義します &lt;code&gt;block&lt;/code&gt; タグが行うのは、子テンプレートがテンプレート内のプレースホルダーをオーバーライドできることをテンプレートエンジンに通知することだけです。</target>
        </trans-unit>
        <trans-unit id="11c54a59d8a9668fa20146e40c46116f6e7acc35" translate="yes" xml:space="preserve">
          <source>Include</source>
          <target state="translated">Include</target>
        </trans-unit>
        <trans-unit id="54913ce0c91fc04d842ff4a7a337cfa08ba9dfc4" translate="yes" xml:space="preserve">
          <source>Included templates have access to the variables of the active context by default. For more details about context behavior of imports and includes, see &lt;a href=&quot;#import-visibility&quot;&gt;Import Context Behavior&lt;/a&gt;.</source>
          <target state="translated">含まれているテンプレートは、デフォルトでアクティブコンテキストの変数にアクセスできます。インポートとインクルードのコンテキスト動作の詳細については、「&lt;a href=&quot;#import-visibility&quot;&gt;インポートコンテキスト動作」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="2b939b0c419628121be8230f74f4625ac00782e7" translate="yes" xml:space="preserve">
          <source>Indicates how deep in a recursive loop the rendering currently is. Starts at level 0</source>
          <target state="translated">現在のレンダリングが再帰ループの深さを示します。レベル 0 から始まります。</target>
        </trans-unit>
        <trans-unit id="2a2fcd7f0278e9db375c14581a6eeb83e127b512" translate="yes" xml:space="preserve">
          <source>Indicates how deep in a recursive loop the rendering currently is. Starts at level 1</source>
          <target state="translated">現在のレンダリングが再帰ループの深さを示します。レベル 1 から始まります。</target>
        </trans-unit>
        <trans-unit id="47cc8a57b66bbb12412efc702588ba055f22ee3c" translate="yes" xml:space="preserve">
          <source>Inline &lt;code&gt;gettext&lt;/code&gt;</source>
          <target state="translated">インライン &lt;code&gt;gettext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1cd3fc2367f520dc5e23ea59704dfe84d3f505ba" translate="yes" xml:space="preserve">
          <source>Inside code blocks, you can also assign values to variables. Assignments at top level (outside of blocks, macros or loops) are exported from the template like top level macros and can be imported by other templates.</source>
          <target state="translated">コードブロック内では、変数に値を代入することもできます。トップレベル(ブロック、マクロ、ループの外側)での代入は、トップレベルのマクロのようにテンプレートからエクスポートされ、他のテンプレートからインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="806da5911908820347a992d8df297ae8ef3f45eb" translate="yes" xml:space="preserve">
          <source>Inside macros, you have access to three special variables:</source>
          <target state="translated">マクロの中では、3つの特別な変数にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="6e8ea18378dcea01a3b91757cbf579f87547dd1a" translate="yes" xml:space="preserve">
          <source>Inside of a for-loop block, you can access some special variables:</source>
          <target state="translated">フォアループブロックの内部では、いくつかの特別な変数にアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="c29607e9713ef40c8ba19652379b0e2af0036880" translate="yes" xml:space="preserve">
          <source>Inside the block, no statements are allowed, only text and simple variable tags.</source>
          <target state="translated">ブロック内では、ステートメントは使用できず、テキストと単純な変数タグのみが使用できます。</target>
        </trans-unit>
        <trans-unit id="cbdcc681975c4ca4c0db3e27aec19a10fbcd1328" translate="yes" xml:space="preserve">
          <source>Inside the template it can then be used as follows:</source>
          <target state="translated">テンプレートの中では、次のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="44488b185242a8808c49b6d49a9282ea7a2ce6fe" translate="yes" xml:space="preserve">
          <source>Inside the template it&amp;rsquo;s then possible to mark blocks as cacheable. The following example caches a sidebar for 300 seconds:</source>
          <target state="translated">テンプレート内で、ブロックをキャッシュ可能としてマークすることができます。次の例では、サイドバーを300秒間キャッシュします。</target>
        </trans-unit>
        <trans-unit id="87b0d36d548b833f260ef38cc644797c660c0d0a" translate="yes" xml:space="preserve">
          <source>Inside the templates the behaviour can be temporarily changed by using the &lt;code&gt;autoescape&lt;/code&gt; block (see &lt;a href=&quot;../templates/index#autoescape-overrides&quot;&gt;Autoescape Overrides&lt;/a&gt;).</source>
          <target state="translated">テンプレート内では、 &lt;code&gt;autoescape&lt;/code&gt; ブロックを使用して動作を一時的に変更できます（&lt;a href=&quot;../templates/index#autoescape-overrides&quot;&gt;Autoescape Overridesを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1b40e826a4f00c64730198c686e383201fe610b6" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;をインストールする</target>
        </trans-unit>
        <trans-unit id="efb1fe102132222d3f06ba056e42af5d1d8652fb" translate="yes" xml:space="preserve">
          <source>Install no-op gettext functions. This is useful if you want to prepare the application for internationalization but don&amp;rsquo;t want to implement the full system yet.</source>
          <target state="translated">no-opgettext関数をインストールします。これは、アプリケーションを国際化に向けて準備したいが、まだ完全なシステムを実装したくない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="0b304a614b9ebf981f7c81a5d1836c1d14234585" translate="yes" xml:space="preserve">
          <source>Install the given &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;ngettext&lt;/code&gt; callables into the environment. They should behave exactly like &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.gettext&quot;&gt;&lt;code&gt;gettext.gettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.ngettext&quot;&gt;&lt;code&gt;gettext.ngettext()&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;ugettext&lt;/code&gt; and &lt;code&gt;ungettext&lt;/code&gt; for Python 2).</source>
          <target state="translated">指定された &lt;code&gt;gettext&lt;/code&gt; および &lt;code&gt;ngettext&lt;/code&gt; 呼び出し可能オブジェクトを環境にインストールします。これらは、&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.gettext&quot;&gt; &lt;code&gt;gettext.gettext()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.ngettext&quot;&gt; &lt;code&gt;gettext.ngettext()&lt;/code&gt; &lt;/a&gt;（またはPython 2の場合は &lt;code&gt;ugettext&lt;/code&gt; および &lt;code&gt;ungettext&lt;/code&gt; ）とまったく同じように動作する必要があります。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="c2880c0c7b9f92a492fcc9e1562593a3e93bb68d" translate="yes" xml:space="preserve">
          <source>Installing the development version</source>
          <target state="translated">開発版のインストール</target>
        </trans-unit>
        <trans-unit id="d1e68a1b9ffd66ec1b219bd36ddeb1b290a6266f" translate="yes" xml:space="preserve">
          <source>Installs a translation globally for the environment. The &lt;code&gt;translations&lt;/code&gt; object must implement &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;ngettext&lt;/code&gt; (or &lt;code&gt;ugettext&lt;/code&gt; and &lt;code&gt;ungettext&lt;/code&gt; for Python 2). &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.NullTranslations&quot;&gt;&lt;code&gt;gettext.NullTranslations&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations&quot;&gt;&lt;code&gt;gettext.GNUTranslations&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;s &lt;code&gt;Translations&lt;/code&gt; are supported.</source>
          <target state="translated">環境の翻訳をグローバルにインストールします。 &lt;code&gt;translations&lt;/code&gt; 目的は、実装する必要 &lt;code&gt;gettext&lt;/code&gt; および &lt;code&gt;ngettext&lt;/code&gt; （又は &lt;code&gt;ugettext&lt;/code&gt; と &lt;code&gt;ungettext&lt;/code&gt; パイソン2）。&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.NullTranslations&quot;&gt; &lt;code&gt;gettext.NullTranslations&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations&quot;&gt; &lt;code&gt;gettext.GNUTranslations&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;の &lt;code&gt;Translations&lt;/code&gt; がサポートされています。</target>
        </trans-unit>
        <trans-unit id="60d5c956762845438ccaf9b76c411588687786a3" translate="yes" xml:space="preserve">
          <source>Integers are whole numbers without a decimal part. The &amp;lsquo;_&amp;rsquo; character can be used to separate groups for legibility.</source>
          <target state="translated">整数は、小数部のない整数です。'_'文字は、読みやすくするためにグループを区切るために使用できます。</target>
        </trans-unit>
        <trans-unit id="899e5920ef1372292f1f4f69d3125e5a5f5a1dfb" translate="yes" xml:space="preserve">
          <source>Integration</source>
          <target state="translated">Integration</target>
        </trans-unit>
        <trans-unit id="f584b9fddc3e51e07ba0553faa3cbc6a030e31d8" translate="yes" xml:space="preserve">
          <source>Intelligently sets the initial value of autoescaping based on the filename of the template. This is the recommended way to configure autoescaping if you do not want to write a custom function yourself.</source>
          <target state="translated">テンプレートのファイル名に基づいてオートエスケープの初期値をインテリジェントに設定します。カスタム関数を自分で書きたくない場合に、オートエスケープを設定するのにおすすめの方法です。</target>
        </trans-unit>
        <trans-unit id="eab664b67f2c72e76aab0840d8bfcfb037686d1e" translate="yes" xml:space="preserve">
          <source>Internally the code generator is used for finding undeclared variables. This is good to know because the code generator might raise a &lt;code&gt;TemplateAssertionError&lt;/code&gt; during compilation and as a matter of fact this function can currently raise that exception as well.</source>
          <target state="translated">内部的には、コードジェネレーターは宣言されていない変数を見つけるために使用されます。コードジェネレーターがコンパイル中に &lt;code&gt;TemplateAssertionError&lt;/code&gt; を発生させる可能性があり、実際のところ、この関数は現在その例外も発生させる可能性があるため、これは知っておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="f32f0ff9be2c310ee947f1d66c4deba76dc0ea1e" translate="yes" xml:space="preserve">
          <source>Isn&amp;rsquo;t it a terrible idea to put Logic into Templates?</source>
          <target state="translated">ロジックをテンプレートに入れるのはひどい考えではありませんか？</target>
        </trans-unit>
        <trans-unit id="6290d9789245f7daf40215e1134ad57e27cc626e" translate="yes" xml:space="preserve">
          <source>It accepts the same arguments as &lt;a href=&quot;#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;と同じ引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="d0dc2e6882af612afc6976725a957c012445c3c6" translate="yes" xml:space="preserve">
          <source>It is also possible to join certain attributes of an object:</source>
          <target state="translated">オブジェクトの特定の属性を結合することも可能です。</target>
        </trans-unit>
        <trans-unit id="b033abeb8de2d4626d95e46f18891bdb17125f11" translate="yes" xml:space="preserve">
          <source>It is also possible to sum up only certain attributes:</source>
          <target state="translated">特定の属性のみをまとめることも可能です。</target>
        </trans-unit>
        <trans-unit id="b43993be8c54e2a9d20be450da96a8b9c1b70350" translate="yes" xml:space="preserve">
          <source>It is also possible to use inline &lt;code&gt;if&lt;/code&gt; expressions. These are useful in some situations. For example, you can use this to extend from one template if a variable is defined, otherwise from the default layout template:</source>
          <target state="translated">インライン &lt;code&gt;if&lt;/code&gt; 式を使用することもできます。これらはいくつかの状況で役立ちます。たとえば、これを使用して、変数が定義されている場合は1つのテンプレートから、それ以外の場合はデフォルトのレイアウトテンプレートから拡張できます。</target>
        </trans-unit>
        <trans-unit id="594951f8a785be041e02687f22c950827aa35dd7" translate="yes" xml:space="preserve">
          <source>It is also possible to use loops recursively. This is useful if you are dealing with recursive data such as sitemaps or RDFa. To use loops recursively, you basically have to add the &lt;code&gt;recursive&lt;/code&gt; modifier to the loop definition and call the &lt;code&gt;loop&lt;/code&gt; variable with the new iterable where you want to recurse.</source>
          <target state="translated">ループを再帰的に使用することも可能です。これは、サイトマップやRDFaなどの再帰データを扱う場合に役立ちます。ループを再帰的に使用するには、基本的に、 &lt;code&gt;recursive&lt;/code&gt; 修飾子をループ定義に追加し、再帰する場所で新しいiterableを使用して &lt;code&gt;loop&lt;/code&gt; 変数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="23a8b50987ed659039a7ed77ff50ad4c4d7e4b73" translate="yes" xml:space="preserve">
          <source>It is not possible to use Jinja to process non-Unicode data. The reason for this is that Jinja uses Unicode already on the language level. For example Jinja treats the non-breaking space as valid whitespace inside expressions which requires knowledge of the encoding or operating on an Unicode string.</source>
          <target state="translated">Jinjaを使ってUnicode以外のデータを処理することはできません。その理由は、Jinjaは言語レベルですでにUnicodeを使用しているからです。例えば、Jinjaは式の中では改行しない空白を有効な空白として扱いますが、これにはエンコーディングの知識が必要です。</target>
        </trans-unit>
        <trans-unit id="4d615355d6f0fc54068399597186def7aaad3c93" translate="yes" xml:space="preserve">
          <source>It is not possible with Jinja syntax to do this. Instead use alternative constructs like the loop else block or the special &lt;code&gt;loop&lt;/code&gt; variable:</source>
          <target state="translated">Jinja構文ではこれを行うことはできません。代わりに、loopelseブロックや特別な &lt;code&gt;loop&lt;/code&gt; 変数などの代替構造を使用してください。</target>
        </trans-unit>
        <trans-unit id="f97e8f95cf1fb68001ac5c153ce9fed23bebf2d4" translate="yes" xml:space="preserve">
          <source>It is sometimes desirable &amp;ndash; even necessary &amp;ndash; to have Jinja ignore parts it would otherwise handle as variables or blocks. For example, if, with the default syntax, you want to use &lt;code&gt;{{&lt;/code&gt; as a raw string in a template and not start a variable, you have to use a trick.</source>
          <target state="translated">Jinjaに、変数またはブロックとして処理する部分を無視させることが望ましい場合があります（必要な場合もあります）。たとえば、デフォルトの構文で、変数を開始せずにテンプレートの生の文字列として &lt;code&gt;{{&lt;/code&gt; を使用する場合は、トリックを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7f05715bf9d62354e4de5724655ba1e92bfffe69" translate="yes" xml:space="preserve">
          <source>It requires the i18n extension to be loaded and configured.</source>
          <target state="translated">i18n 拡張モジュールをロードして設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e374a9d409afbf8929739d42aca346d7d8a06a57" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to pass arguments back to the call block. This makes it useful as a replacement for loops. Generally speaking, a call block works exactly like a macro without a name.</source>
          <target state="translated">引数を呼び出しブロックに戻すこともできます。これにより、ループの代わりとして役立ちます。一般的に、呼び出しブロックは名前のないマクロとまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="1a89a86dcb05fc0c5c840186b12e20efc56b95dc" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s important to know that the outer double-curly braces are &lt;em&gt;not&lt;/em&gt; part of the variable, but the print statement. If you access variables inside tags don&amp;rsquo;t put the braces around them.</source>
          <target state="translated">これは、外側の二重中括弧があることを知っておくことが重要です&lt;em&gt;いない&lt;/em&gt;変数の一部が、print文。タグ内の変数にアクセスする場合は、それらを中括弧で囲まないでください。</target>
        </trans-unit>
        <trans-unit id="ed21f49002637c8d1e8b3284b8fdbedfb8e5fa4f" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s passed a &lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt; that can be used to filter tokens returned. This method has to return an iterable of &lt;a href=&quot;#jinja2.lexer.Token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt;s, but it doesn&amp;rsquo;t have to return a &lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返されたトークンをフィルタリングするために使用できる&lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;が渡されます。このメソッドは、反復可能な&lt;a href=&quot;#jinja2.lexer.Token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt;を返す必要がありますが、&lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;を返す必要はありません。</target>
        </trans-unit>
        <trans-unit id="059227de52ad3f3176f97e4d1c9a5d7dd1b03774" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to render the contents of the parent block by calling &lt;code&gt;super()&lt;/code&gt;. This gives back the results of the parent block:</source>
          <target state="translated">&lt;code&gt;super()&lt;/code&gt; を呼び出すことにより、親ブロックの内容をレンダリングすることができます。これにより、親ブロックの結果が返されます。</target>
        </trans-unit>
        <trans-unit id="6c75651bd3c56b12e0bdaeeb79e1aa5f1e543650" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to translate strings in expressions with these functions:</source>
          <target state="translated">これらの関数を使用して、式の文字列を変換することができます。</target>
        </trans-unit>
        <trans-unit id="d87bbe276ab57f2ef5a22ddc7542b9088e101acc" translate="yes" xml:space="preserve">
          <source>Iterates over all direct child nodes of the node. This iterates over all fields and yields the values of they are nodes. If the value of a field is a list all the nodes in that list are returned.</source>
          <target state="translated">ノードのすべての直接子ノードを反復処理します。これは、すべてのフィールドを反復処理し、ノードであるフィールドの値を返します。フィールドの値がリストの場合,そのリスト内のすべてのノードが返されます.</target>
        </trans-unit>
        <trans-unit id="71e668206e64e10b5b29241221c060363b4ea63e" translate="yes" xml:space="preserve">
          <source>Jinja</source>
          <target state="translated">Jinja</target>
        </trans-unit>
        <trans-unit id="f4d5fb632b86cbd4da03f0ce22ffb07486f9aea6" translate="yes" xml:space="preserve">
          <source>Jinja 1</source>
          <target state="translated">ジンジャ1</target>
        </trans-unit>
        <trans-unit id="946407cdb3360b2d934ed21dcc6be30b1527846c" translate="yes" xml:space="preserve">
          <source>Jinja 2.1 and higher support external bytecode caching. Bytecode caches make it possible to store the generated bytecode on the file system or a different location to avoid parsing the templates on first use.</source>
          <target state="translated">Jinja 2.1 以降では、外部バイトコードキャッシュをサポートしています。バイトコードキャッシュを使うと、生成されたバイトコードをファイルシステムや別の場所に保存しておくことができます。</target>
        </trans-unit>
        <trans-unit id="16144f0c07bcda1a02805c1458c435a815402592" translate="yes" xml:space="preserve">
          <source>Jinja allows basic expressions everywhere. These work very similarly to regular Python; even if you&amp;rsquo;re not working with Python you should feel comfortable with it.</source>
          <target state="translated">Jinjaはどこでも基本的な表現を可能にします。これらは通常のPythonと非常によく似ています。Pythonを使用していない場合でも、Pythonに慣れているはずです。</target>
        </trans-unit>
        <trans-unit id="6cb1577ab1f27250d685b8790f71a5fcd783cf29" translate="yes" xml:space="preserve">
          <source>Jinja allows you to calculate with values. This is rarely useful in templates but exists for completeness&amp;rsquo; sake. The following operators are supported:</source>
          <target state="translated">Jinjaでは、値を使用して計算できます。これがテンプレートで役立つことはめったにありませんが、完全を期すために存在します。次の演算子がサポートされています。</target>
        </trans-unit>
        <trans-unit id="d492d25e21fb8a91ac197c7d9d29524af7bc36a7" translate="yes" xml:space="preserve">
          <source>Jinja allows you to put the name of the block after the end tag for better readability:</source>
          <target state="translated">Jinjaでは、エンドタグの後にブロック名を付けることで、より読みやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="7706fc007d928bb3a43d809f87f7c546dcf3f483" translate="yes" xml:space="preserve">
          <source>Jinja functions (macros, &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;self.BLOCKNAME&lt;/code&gt;) always return template data that is marked as safe.</source>
          <target state="translated">Jinja関数（macros、 &lt;code&gt;super&lt;/code&gt; 、 &lt;code&gt;self.BLOCKNAME&lt;/code&gt; ）は、常に安全とマークされたテンプレートデータを返します。</target>
        </trans-unit>
        <trans-unit id="bb3cd5d24d552105564e446dfb76b64aa1c85594" translate="yes" xml:space="preserve">
          <source>Jinja is a modern and designer-friendly templating language for Python, modelled after Django&amp;rsquo;s templates. It is fast, widely used and secure with the optional sandboxed template execution environment:</source>
          <target state="translated">Jinjaは、Djangoのテンプレートをモデルにした、Python用のモダンでデザイナーフレンドリーなテンプレート言語です。オプションのサンドボックステンプレート実行環境を使用すると、高速で広く使用され、安全です。</target>
        </trans-unit>
        <trans-unit id="a45462c996514012f784f6daabd4eef875d57f23" translate="yes" xml:space="preserve">
          <source>Jinja is using Unicode internally which means that you have to pass Unicode objects to the render function or bytestrings that only consist of ASCII characters. Additionally newlines are normalized to one end of line sequence which is per default UNIX style (&lt;code&gt;\n&lt;/code&gt;).</source>
          <target state="translated">Jinjaは内部でUnicodeを使用しています。つまり、Unicodeオブジェクトをrender関数またはASCII文字のみで構成されるバイト文字列に渡す必要があります。さらに、改行は、デフォルトのUNIXスタイル（ &lt;code&gt;\n&lt;/code&gt; ）ごとの行シーケンスの一端に正規化されます。</target>
        </trans-unit>
        <trans-unit id="df30241f2a47bda125983fe2ddb585ba0d55367f" translate="yes" xml:space="preserve">
          <source>Jinja keeps internal caches for environments and lexers. These are used so that Jinja doesn&amp;rsquo;t have to recreate environments and lexers all the time. Normally you don&amp;rsquo;t have to care about that but if you are measuring memory consumption you may want to clean the caches.</source>
          <target state="translated">Jinjaは、環境とレクサーの内部キャッシュを保持します。これらは、Jinjaが環境やレクサーを常に再作成する必要がないようにするために使用されます。通常はそれを気にする必要はありませんが、メモリ消費量を測定している場合は、キャッシュをクリーンアップすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b091e3f3fab7bd114493aaf68be0824638cb5d06" translate="yes" xml:space="preserve">
          <source>Jinja now comes with autoescaping support. As of Jinja 2.9 the autoescape extension is removed and built-in. However autoescaping is not yet enabled by default though this will most likely change in the future. It&amp;rsquo;s recommended to configure a sensible default for autoescaping. This makes it possible to enable and disable autoescaping on a per-template basis (HTML versus text for instance).</source>
          <target state="translated">Jinjaには自動エスケープのサポートが付属しています。Jinja 2.9以降、autoescape拡張機能は削除されて組み込まれています。ただし、自動エスケープはデフォルトではまだ有効になっていませんが、これは将来変更される可能性があります。自動エスケープの適切なデフォルトを構成することをお勧めします。これにより、テンプレートごとに自動エスケープを有効または無効にすることができます（たとえば、HTMLとテキスト）。</target>
        </trans-unit>
        <trans-unit id="a5c8ed7cf314cc737152b5a1c94b6f8e4b0ba624" translate="yes" xml:space="preserve">
          <source>Jinja supports both. What is used depends on the application configuration. The default configuration is no automatic escaping; for various reasons:</source>
          <target state="translated">Jinjaは両方に対応しています。何を使うかはアプリケーションの設定に依存します。デフォルトの設定では、さまざまな理由で自動エスケープを行わないようになっています。</target>
        </trans-unit>
        <trans-unit id="7b89413ad7b09d09dfc316133972295d35e2541f" translate="yes" xml:space="preserve">
          <source>Jinja supports dynamic inheritance and does not distinguish between parent and child template as long as no &lt;code&gt;extends&lt;/code&gt; tag is visited. While this leads to the surprising behavior that everything before the first &lt;code&gt;extends&lt;/code&gt; tag including whitespace is printed out instead of being ignored, it can be used for a neat trick.</source>
          <target state="translated">Jinjaは動的継承をサポートし、 &lt;code&gt;extends&lt;/code&gt; タグにアクセスしない限り、親テンプレートと子テンプレートを区別しません。これは、空白を含む最初の &lt;code&gt;extends&lt;/code&gt; タグの前のすべてが無視されるのではなく出力されるという驚くべき動作につながりますが、巧妙なトリックに使用できます。</target>
        </trans-unit>
        <trans-unit id="4cd59403c24a521ac182d5df5ba724068ebfdb77" translate="yes" xml:space="preserve">
          <source>Jinja supports extensions that can add extra filters, tests, globals or even extend the parser. The main motivation of extensions is to move often used code into a reusable class like adding support for internationalization.</source>
          <target state="translated">Jinjaは拡張機能をサポートしており、フィルタやテスト、グローバルを追加したり、パーサを拡張したりすることができます。拡張機能の主な目的は、国際化のサポートを追加するなど、よく使うコードを再利用可能なクラスに移動させることです。</target>
        </trans-unit>
        <trans-unit id="210c53ed3cecb52c74e70c7a9e20396391cf7b8f" translate="yes" xml:space="preserve">
          <source>Jinja supports putting often used code into macros. These macros can go into different templates and get imported from there. This works similarly to the import statements in Python. It&amp;rsquo;s important to know that imports are cached and imported templates don&amp;rsquo;t have access to the current template variables, just the globals by default. For more details about context behavior of imports and includes, see &lt;a href=&quot;#import-visibility&quot;&gt;Import Context Behavior&lt;/a&gt;.</source>
          <target state="translated">Jinjaは、頻繁に使用されるコードをマクロに入れることをサポートしています。これらのマクロは、さまざまなテンプレートに移動して、そこからインポートできます。これは、Pythonのimportステートメントと同様に機能します。インポートはキャッシュされ、インポートされたテンプレートは現在のテンプレート変数にアクセスできず、デフォルトではグローバルのみにアクセスできることを知っておくことが重要です。インポートとインクルードのコンテキスト動作の詳細については、「&lt;a href=&quot;#import-visibility&quot;&gt;インポートコンテキスト動作」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1bd03626c5d6510b4397d39934233ba17ffaacee" translate="yes" xml:space="preserve">
          <source>Jinja supports the Python &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; syntax. For the template designer, this support (when enabled) is entirely transparent, templates continue to look exactly the same. However, developers should be aware of the implementation as it affects what types of APIs you can use.</source>
          <target state="translated">Jinjaは &lt;code&gt;async&lt;/code&gt; と &lt;code&gt;await&lt;/code&gt; 構文をサポートしています。テンプレートデザイナーの場合、このサポート（有効になっている場合）は完全に透過的であり、テンプレートは引き続きまったく同じように見えます。ただし、使用できるAPIの種類に影響するため、開発者は実装に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed10d37e069c003353d830b01ca17bbad7f83655" translate="yes" xml:space="preserve">
          <source>Jinja uses Python naming rules. Valid identifiers can be any combination of Unicode characters accepted by Python.</source>
          <target state="translated">JinjaはPythonの命名規則を使います。有効な識別子は、Pythonで受け入れられるUnicode文字の組み合わせであれば何でも構いません。</target>
        </trans-unit>
        <trans-unit id="4397ca48f3c20d000d70623f5a529ceb40799d40" translate="yes" xml:space="preserve">
          <source>Jinja uses a central object called the template &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt;. Instances of this class are used to store the configuration and global objects, and are used to load templates from the file system or other locations. Even if you are creating templates from strings by using the constructor of &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; class, an environment is created automatically for you, albeit a shared one.</source>
          <target state="translated">Jinjaは、テンプレート&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;と呼ばれる中心的なオブジェクトを使用します。このクラスのインスタンスは、構成オブジェクトとグローバルオブジェクトを格納するために使用され、ファイルシステムまたは他の場所からテンプレートをロードするために使用されます。&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;クラスのコンストラクターを使用して文字列からテンプレートを作成している場合でも、共有環境であっても、環境は自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="605b2427907134b113ac7a909f0da56a469035b5" translate="yes" xml:space="preserve">
          <source>Jinja works with Python 2.7.x and &amp;gt;= 3.5. If you are using Python 3.2 you can use an older release of Jinja (2.6) as support for Python 3.2 was dropped in Jinja version 2.7. The last release which supported Python 2.6 and 3.3 was Jinja 2.10.</source>
          <target state="translated">JinjaはPython2.7.xおよび&amp;gt; = 3.5で動作します。Python 3.2を使用している場合は、Python 3.2のサポートがJinjaバージョン2.7で削除されたため、古いリリースのJinja（2.6）を使用できます。Python2.6および3.3をサポートした最後のリリースはJinja2.10でした。</target>
        </trans-unit>
        <trans-unit id="8f3b5916d2a4b20eb412327663e682510062465b" translate="yes" xml:space="preserve">
          <source>Join a template with the parent. By default all the lookups are relative to the loader root so this method returns the &lt;code&gt;template&lt;/code&gt; parameter unchanged, but if the paths should be relative to the parent template, this function can be used to calculate the real template name.</source>
          <target state="translated">親と一緒にテンプレートを結合します。デフォルトでは、すべてのルックアップはローダールートに相対的であるため、このメソッドは &lt;code&gt;template&lt;/code&gt; パラメーターを変更せずに返しますが、パスが親テンプレートに相対的である必要がある場合は、この関数を使用して実際のテンプレート名を計算できます。</target>
        </trans-unit>
        <trans-unit id="3530aa156d98d31c3299e4de21cc48be7e08f0f3" translate="yes" xml:space="preserve">
          <source>Keyword arguments to be passed to the dump function. The default is &lt;code&gt;{'sort_keys': True}&lt;/code&gt;.</source>
          <target state="translated">ダンプ関数に渡されるキーワード引数。デフォルトは &lt;code&gt;{'sort_keys': True}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="56acd5dbea97e013d544c6346caa9557af0b12ad" translate="yes" xml:space="preserve">
          <source>Left modulo right.</source>
          <target state="translated">左モデューロ右。</target>
        </trans-unit>
        <trans-unit id="3d68a1e6ef78e572fd827abeb48b352478d8ce1b" translate="yes" xml:space="preserve">
          <source>Left to the power of right.</source>
          <target state="translated">右の力に左。</target>
        </trans-unit>
        <trans-unit id="39142c6b71db5798f9f33d0035e6f2ed4d2ace86" translate="yes" xml:space="preserve">
          <source>Lex the given sourcecode and return a generator that yields tokens as tuples in the form &lt;code&gt;(lineno, token_type, value)&lt;/code&gt;. This can be useful for &lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;extension development&lt;/a&gt; and debugging templates.</source>
          <target state="translated">指定されたソースコードをLexし、トークンをタプルとして &lt;code&gt;(lineno, token_type, value)&lt;/code&gt; 形式で生成するジェネレーターを返します。これは、&lt;a href=&quot;../extensions/index#writing-extensions&quot;&gt;拡張機能の開発&lt;/a&gt;とテンプレートのデバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="51548647bc2bf6a726a9a83a78d8041e65cdd415" translate="yes" xml:space="preserve">
          <source>Libraries compatible with this class:</source>
          <target state="translated">このクラスと互換性のあるライブラリ</target>
        </trans-unit>
        <trans-unit id="9fc9c5a7d8326df046caa8d770d0b0dc0dbc12f4" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD 3-clause License.</source>
          <target state="translated">BSD 3-clause Licenseのもとでライセンスされています。</target>
        </trans-unit>
        <trans-unit id="8151908d5efe395712145d5bbe5ed924288208f5" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#defined&quot;&gt;&lt;code&gt;defined()&lt;/code&gt;&lt;/a&gt; but the other way round.</source>
          <target state="translated">&lt;a href=&quot;#defined&quot;&gt; &lt;code&gt;defined()&lt;/code&gt; &lt;/a&gt;と同様ですが、その逆です。</target>
        </trans-unit>
        <trans-unit id="a8da5d9971ba42611d9c706ff4258e01b6fe2016" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt;&lt;code&gt;TemplateNotFound&lt;/code&gt;&lt;/a&gt; but raised if multiple templates are selected. This is a subclass of &lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt;&lt;code&gt;TemplateNotFound&lt;/code&gt;&lt;/a&gt; exception, so just catching the base exception will catch both.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt; &lt;code&gt;TemplateNotFound&lt;/code&gt; &lt;/a&gt;と同様ですが、複数のテンプレートが選択されている場合に発生します。これは&lt;a href=&quot;#jinja2.TemplateNotFound&quot;&gt; &lt;code&gt;TemplateNotFound&lt;/code&gt; &lt;/a&gt;例外のサブクラスであるため、基本例外をキャッチするだけで両方をキャッチできます。</target>
        </trans-unit>
        <trans-unit id="162e342e34706fd4bdf15b368eef58e7d3950f8a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#jinja2.lexer.TokenStream.next_if&quot;&gt;&lt;code&gt;next_if()&lt;/code&gt;&lt;/a&gt; but only returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.lexer.TokenStream.next_if&quot;&gt; &lt;code&gt;next_if()&lt;/code&gt; &lt;/a&gt;と同様ですが、 &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="993fece9788acd63a14b1869b990f044a7ffa68d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;varargs&lt;/code&gt; but for keyword arguments. All unconsumed keyword arguments are stored in this special variable.</source>
          <target state="translated">&lt;code&gt;varargs&lt;/code&gt; と似ていますが、キーワード引数用です。消費されていないすべてのキーワード引数は、この特別な変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="5303b012364add13c05ee99b17e9cb50cfa22480" translate="yes" xml:space="preserve">
          <source>Like a macro without a name but a call instead. &lt;code&gt;call&lt;/code&gt; is called with the unnamed macro as &lt;code&gt;caller&lt;/code&gt; argument this node holds.</source>
          <target state="translated">名前のないマクロのようですが、代わりに呼び出しです。このノードが保持する &lt;code&gt;caller&lt;/code&gt; 引数として、名前のないマクロを使用して &lt;code&gt;call&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9a0721ad6b848b88db3c17caa1b8005d2b6b9848" translate="yes" xml:space="preserve">
          <source>Like a template syntax error, but covers cases where something in the template caused an error at compile time that wasn&amp;rsquo;t necessarily caused by a syntax error. However it&amp;rsquo;s a direct subclass of &lt;a href=&quot;#jinja2.TemplateSyntaxError&quot;&gt;&lt;code&gt;TemplateSyntaxError&lt;/code&gt;&lt;/a&gt; and has the same attributes.</source>
          <target state="translated">テンプレートの構文エラーに似ていますが、テンプレート内の何かがコンパイル時にエラーを引き起こし、必ずしも構文エラーが原因ではない場合をカバーしています。ただし、これは&lt;a href=&quot;#jinja2.TemplateSyntaxError&quot;&gt; &lt;code&gt;TemplateSyntaxError&lt;/code&gt; の&lt;/a&gt;直接のサブクラスであり、同じ属性を持っています。</target>
        </trans-unit>
        <trans-unit id="21fd602681d11228f1b93e6c213768e7e3e6d70b" translate="yes" xml:space="preserve">
          <source>Likewise, a loop that stops processing after the 10th iteration:</source>
          <target state="translated">同様に、10回目の繰り返しで処理を停止するループ。</target>
        </trans-unit>
        <trans-unit id="8293a155a55761899b92de146d94fa3b701fb150" translate="yes" xml:space="preserve">
          <source>Line Statements</source>
          <target state="translated">ラインステートメント</target>
        </trans-unit>
        <trans-unit id="169ff8674fa8bf2f0bbe544f8d6954d5b2063683" translate="yes" xml:space="preserve">
          <source>Line statements can span multiple lines if there are open parentheses, braces or brackets:</source>
          <target state="translated">行ステートメントは、開いている括弧、中括弧、または括弧がある場合、複数行にまたがることができます。</target>
        </trans-unit>
        <trans-unit id="c071b56a812bba10f41c125c69adecb0e55778b7" translate="yes" xml:space="preserve">
          <source>Linebreaks and surrounding whitespace can be automatically trimmed by enabling the &lt;code&gt;ext.i18n.trimmed&lt;/code&gt;&lt;a href=&quot;../api/index#ext-i18n-trimmed&quot;&gt;policy&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ext.i18n.trimmed&lt;/code&gt; &lt;a href=&quot;../api/index#ext-i18n-trimmed&quot;&gt;ポリシーを&lt;/a&gt;有効にすることで、改行と周囲の空白を自動的にトリミングできます。</target>
        </trans-unit>
        <trans-unit id="2825ac1636672e90c9b4c72971a5d958c8080f86" translate="yes" xml:space="preserve">
          <source>List of Builtin Filters</source>
          <target state="translated">内蔵フィルターの一覧</target>
        </trans-unit>
        <trans-unit id="fb95615c5ddd6dd10ad63f94212c0c9e27d7dc4a" translate="yes" xml:space="preserve">
          <source>List of Builtin Tests</source>
          <target state="translated">内蔵テストの一覧</target>
        </trans-unit>
        <trans-unit id="0f71c673a27566220a3f9fd440f6f51fbfd9d440" translate="yes" xml:space="preserve">
          <source>List of Control Structures</source>
          <target state="translated">制御構造物一覧</target>
        </trans-unit>
        <trans-unit id="e817b7a5327d9273abd9fd5d33db6ef5eb4773fe" translate="yes" xml:space="preserve">
          <source>List of Global Functions</source>
          <target state="translated">グローバル機能一覧</target>
        </trans-unit>
        <trans-unit id="fd3a26d226248ca6380c465173eafa113fa6477a" translate="yes" xml:space="preserve">
          <source>List of Jinja extensions to use. This can either be import paths as strings or extension classes. For more information have a look at &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;the extensions documentation&lt;/a&gt;.</source>
          <target state="translated">使用するJinja拡張機能のリスト。これは、文字列または拡張クラスとしてのインポートパスのいずれかです。詳細については&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;、拡張機能のドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="14a43c7bfa5c296e61aae3f705c49a988618277a" translate="yes" xml:space="preserve">
          <source>Load a template from a string. This parses the source given and returns a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">文字列からテンプレートをロードします。これにより、指定されたソースが解析され、&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="5151584e65de830cbc21f12460190c86035d18dc" translate="yes" xml:space="preserve">
          <source>Load a template from the loader. If a loader is configured this method asks the loader for the template and returns a &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;. If the &lt;code&gt;parent&lt;/code&gt; parameter is not &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#jinja2.Environment.join_path&quot;&gt;&lt;code&gt;join_path()&lt;/code&gt;&lt;/a&gt; is called to get the real template name before loading.</source>
          <target state="translated">ローダーからテンプレートをロードします。ローダが構成されている場合、この方法は、テンプレートのローダーを要求し、返し&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;parent&lt;/code&gt; パラメーターが &lt;code&gt;None&lt;/code&gt; でない場合、&lt;a href=&quot;#jinja2.Environment.join_path&quot;&gt; &lt;code&gt;join_path()&lt;/code&gt; &lt;/a&gt;が呼び出されて、ロードする前に実際のテンプレート名を取得します。</target>
        </trans-unit>
        <trans-unit id="f2f2b3b274fe49be366483ff0345a6ccc6318bc8" translate="yes" xml:space="preserve">
          <source>Load bytecode from a string.</source>
          <target state="translated">文字列からバイトコードを読み込みます。</target>
        </trans-unit>
        <trans-unit id="b24ef66290ab9f67f5342579e32cfb79620aed89" translate="yes" xml:space="preserve">
          <source>Load templates from python eggs or packages. It is constructed with the name of the python package and the path to the templates in that package:</source>
          <target state="translated">python eggs やパッケージからテンプレートを読み込みます。これは python パッケージの名前と、そのパッケージ内のテンプレートへのパスで構成されています。</target>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="b43ac5f1177f8bc0a0466d6b83568cc3543efc35" translate="yes" xml:space="preserve">
          <source>Loaders are responsible for loading templates from a resource such as the file system. The environment will keep the compiled modules in memory like Python&amp;rsquo;s &lt;code&gt;sys.modules&lt;/code&gt;. Unlike &lt;code&gt;sys.modules&lt;/code&gt; however this cache is limited in size by default and templates are automatically reloaded. All loaders are subclasses of &lt;a href=&quot;#jinja2.BaseLoader&quot;&gt;&lt;code&gt;BaseLoader&lt;/code&gt;&lt;/a&gt;. If you want to create your own loader, subclass &lt;a href=&quot;#jinja2.BaseLoader&quot;&gt;&lt;code&gt;BaseLoader&lt;/code&gt;&lt;/a&gt; and override &lt;code&gt;get_source&lt;/code&gt;.</source>
          <target state="translated">ローダーは、ファイルシステムなどのリソースからテンプレートをロードする役割を果たします。環境は、コンパイルされたモジュールをPythonの &lt;code&gt;sys.modules&lt;/code&gt; のようにメモリに保持します。ただし、 &lt;code&gt;sys.modules&lt;/code&gt; とは異なり、このキャッシュはデフォルトでサイズが制限されており、テンプレートは自動的に再ロードされます。すべてのローダーは&lt;a href=&quot;#jinja2.BaseLoader&quot;&gt; &lt;code&gt;BaseLoader&lt;/code&gt; の&lt;/a&gt;サブクラスです。あなた自身のローダ、サブクラスを作成したい場合は&lt;a href=&quot;#jinja2.BaseLoader&quot;&gt; &lt;code&gt;BaseLoader&lt;/code&gt; &lt;/a&gt;とオーバーライド &lt;code&gt;get_source&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a930b383a7cbc3cb0f9a0e8ea6c4a116ea41cffe" translate="yes" xml:space="preserve">
          <source>Loads a template from a python dict. It&amp;rsquo;s passed a dict of unicode strings bound to template names. This loader is useful for unittesting:</source>
          <target state="translated">Pythondictからテンプレートをロードします。テンプレート名にバインドされたUnicode文字列のdictが渡されます。このローダーは、ユニットテストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="639936db3efc1ac9c9ca69d06a43b399c3c2d5a1" translate="yes" xml:space="preserve">
          <source>Loads a template. This method looks up the template in the cache or loads one by calling &lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt;&lt;code&gt;get_source()&lt;/code&gt;&lt;/a&gt;. Subclasses should not override this method as loaders working on collections of other loaders (such as &lt;a href=&quot;#jinja2.PrefixLoader&quot;&gt;&lt;code&gt;PrefixLoader&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#jinja2.ChoiceLoader&quot;&gt;&lt;code&gt;ChoiceLoader&lt;/code&gt;&lt;/a&gt;) will not call this method but &lt;code&gt;get_source&lt;/code&gt; directly.</source>
          <target state="translated">テンプレートをロードします。このメソッドは、キャッシュ内のテンプレートを検索するか、&lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt; &lt;code&gt;get_source()&lt;/code&gt; を&lt;/a&gt;呼び出してテンプレートをロードします。他のローダーのコレクション（&lt;a href=&quot;#jinja2.PrefixLoader&quot;&gt; &lt;code&gt;PrefixLoader&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#jinja2.ChoiceLoader&quot;&gt; &lt;code&gt;ChoiceLoader&lt;/code&gt; など&lt;/a&gt;）で動作するローダーはこのメソッドを呼び出さず、 &lt;code&gt;get_source&lt;/code&gt; を直接呼び出すため、サブクラスはこのメソッドをオーバーライドしないでください。</target>
        </trans-unit>
        <trans-unit id="b04f368eaa8a9e38822006d1776729e07561aa8d" translate="yes" xml:space="preserve">
          <source>Loads an attribute from the environment object. This is useful for extensions that want to call a callback stored on the environment.</source>
          <target state="translated">環境オブジェクトから属性を読み込みます。これは、環境に保存されているコールバックを呼び出したい拡張機能に便利です。</target>
        </trans-unit>
        <trans-unit id="3e85a39ac9a528f1c1f6fd3766041ac8932d2f08" translate="yes" xml:space="preserve">
          <source>Loads bytecode from a file or file like object.</source>
          <target state="translated">ファイルやファイルライクなオブジェクトからバイトコードを読み込みます。</target>
        </trans-unit>
        <trans-unit id="aa2e49c406e8f73f883375928fd698a533aaa5e9" translate="yes" xml:space="preserve">
          <source>Loads templates from the file system. This loader can find templates in folders on the file system and is the preferred way to load them.</source>
          <target state="translated">ファイルシステムからテンプレートを読み込みます。このローダーは、ファイルシステム上のフォルダ内のテンプレートを見つけることができ、テンプレートをロードするのに好ましい方法です。</target>
        </trans-unit>
        <trans-unit id="3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa" translate="yes" xml:space="preserve">
          <source>Logic</source>
          <target state="translated">Logic</target>
        </trans-unit>
        <trans-unit id="4533f9df0b6f09f29ed95bd055867753388884ab" translate="yes" xml:space="preserve">
          <source>Look at the next token.</source>
          <target state="translated">次のトークンを見てください。</target>
        </trans-unit>
        <trans-unit id="fd8f16b6684830088e1c680168692ebe092d894f" translate="yes" xml:space="preserve">
          <source>Looks up a name or stores a value in a name. The &lt;code&gt;ctx&lt;/code&gt; of the node can be one of the following values:</source>
          <target state="translated">名前を検索するか、名前に値を格納します。ノードの &lt;code&gt;ctx&lt;/code&gt; は、次のいずれかの値になります。</target>
        </trans-unit>
        <trans-unit id="6b8d2a680ab11b98e9a1a0c3141081c3bb2d2504" translate="yes" xml:space="preserve">
          <source>Looks up a variable like &lt;code&gt;__getitem__&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; but returns an &lt;code&gt;Undefined&lt;/code&gt; object with the name of the name looked up.</source>
          <target state="translated">&lt;code&gt;__getitem__&lt;/code&gt; または &lt;code&gt;get&lt;/code&gt; のような変数を検索しますが、検索した名前の名前を持つ &lt;code&gt;Undefined&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="340bf0701d40cacdb129bb163405ded4feefb5e5" translate="yes" xml:space="preserve">
          <source>Loop Controls</source>
          <target state="translated">ループコントロール</target>
        </trans-unit>
        <trans-unit id="fee5a14356621b73ac22c3c0edad01021765caac" translate="yes" xml:space="preserve">
          <source>Loop over each item in a sequence. For example, to display a list of users provided in a variable called &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">シーケンス内の各アイテムをループします。たとえば、usersという変数で提供される &lt;code&gt;users&lt;/code&gt; リストを表示するには：</target>
        </trans-unit>
        <trans-unit id="9ca865a8a490fc8810ec3a9fa345a79f608deb03" translate="yes" xml:space="preserve">
          <source>Low Level API</source>
          <target state="translated">低レベルAPI</target>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="ae2e65c933b78817746b1dcc43fe5c7f32d80567" translate="yes" xml:space="preserve">
          <source>Macros also expose some of their internal details. The following attributes are available on a macro object:</source>
          <target state="translated">マクロは、その内部の詳細の一部も公開しています。マクロオブジェクトには以下の属性があります。</target>
        </trans-unit>
        <trans-unit id="df5dc7ea5f42c12118d24ed0274eed2fc826ccf6" translate="yes" xml:space="preserve">
          <source>Macros and variables starting with one or more underscores are private and cannot be imported.</source>
          <target state="translated">1つ以上のアンダースコアで始まるマクロや変数はプライベートであり、インポートすることはできません。</target>
        </trans-unit>
        <trans-unit id="1bdc22e555fa64ff909ae8c47560725b90bc6c2e" translate="yes" xml:space="preserve">
          <source>Macros are comparable with functions in regular programming languages. They are useful to put often used idioms into reusable functions to not repeat yourself (&amp;ldquo;DRY&amp;rdquo;).</source>
          <target state="translated">マクロは、通常のプログラミング言語の関数に匹敵します。これらは、頻繁に使用されるイディオムを再利用可能な関数に入れて、繰り返さないようにするのに役立ちます（「DRY」）。</target>
        </trans-unit>
        <trans-unit id="cd771391564f725523a24e35bdf974f60be4ffee" translate="yes" xml:space="preserve">
          <source>Make a string unicode if it isn&amp;rsquo;t already. That way a markup string is not converted back to unicode.</source>
          <target state="translated">文字列をまだ作成していない場合は、Unicodeにします。そうすれば、マークアップ文字列はユニコードに変換されません。</target>
        </trans-unit>
        <trans-unit id="96c072dda13788eacfe54dbd0cd8b160850e7dc0" translate="yes" xml:space="preserve">
          <source>Make sure to always call into the super method, even if you are not intercepting the call. Jinja might internally call the method to evaluate expressions.</source>
          <target state="translated">呼び出しを傍受していなくても、必ずスーパーメソッドに呼び出すようにしましょう。Jinjaは、式を評価するために内部的にこのメソッドを呼び出すことがあります。</target>
        </trans-unit>
        <trans-unit id="c06666604013d589785c1f742dc6ae14eb425aa1" translate="yes" xml:space="preserve">
          <source>Make the expression negative.</source>
          <target state="translated">表現をネガティブにする。</target>
        </trans-unit>
        <trans-unit id="ff98f55e441ab51baaef3a29bf23c8d22a02823d" translate="yes" xml:space="preserve">
          <source>Make the expression positive (noop for most expressions)</source>
          <target state="translated">表現をポジティブにする(ほとんどの表現ではnoop</target>
        </trans-unit>
        <trans-unit id="1c100318c74842596fa0cc2cc9e28ce716d345b3" translate="yes" xml:space="preserve">
          <source>Mako</source>
          <target state="translated">Mako</target>
        </trans-unit>
        <trans-unit id="95f0d8c19bdd9a47e51e75395e472a31b525228e" translate="yes" xml:space="preserve">
          <source>Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped.</source>
          <target state="translated">自動エスケープが有効な環境では、この変数はエスケープされないことを意味します。</target>
        </trans-unit>
        <trans-unit id="64fa524c83a8d49e751bd6345e5d0748adf5dbcf" translate="yes" xml:space="preserve">
          <source>Mark the wrapped expression as safe (wrap it as &lt;code&gt;Markup&lt;/code&gt;) but only if autoescaping is active.</source>
          <target state="translated">ラップされた式を安全として &lt;code&gt;Markup&lt;/code&gt; します（マークアップとしてラップします）が、自動エスケープがアクティブな場合に限ります。</target>
        </trans-unit>
        <trans-unit id="805e560b1e1b1a7bb445914ae4f4ed9e019cf86c" translate="yes" xml:space="preserve">
          <source>Mark the wrapped expression as safe (wrap it as &lt;code&gt;Markup&lt;/code&gt;).</source>
          <target state="translated">ラップされた式を安全として &lt;code&gt;Markup&lt;/code&gt; します（マークアップとしてラップします）。</target>
        </trans-unit>
        <trans-unit id="bfc8362c4f90e382aca4f9512f42c27dfeb04c0b" translate="yes" xml:space="preserve">
          <source>Marks a function or method as unsafe.</source>
          <target state="translated">関数やメソッドを安全でないものとしてマークします。</target>
        </trans-unit>
        <trans-unit id="fb28bed84acdfef42936eae3c2a14942ba537601" translate="yes" xml:space="preserve">
          <source>MarkupSafe Dependency</source>
          <target state="translated">MarkupSafe の依存関係</target>
        </trans-unit>
        <trans-unit id="3edf0df49942da6d11a1a217e4d3af4a5a8e64f2" translate="yes" xml:space="preserve">
          <source>Math</source>
          <target state="translated">Math</target>
        </trans-unit>
        <trans-unit id="42f2d78f8254066cec6acc4db94e8d330b6e4dfa" translate="yes" xml:space="preserve">
          <source>Minus sign at the end of &lt;code&gt;{% raw -%}&lt;/code&gt; tag cleans all the spaces and newlines preceding the first character of your raw data.</source>
          <target state="translated">&lt;code&gt;{% raw -%}&lt;/code&gt; raw- ％}タグの最後にあるマイナス記号は、生データの最初の文字の前にあるすべてのスペースと改行を消去します。</target>
        </trans-unit>
        <trans-unit id="aad0fd9cd9d6e4281600f50478d3d8f4139bede7" translate="yes" xml:space="preserve">
          <source>Modifies the eval context and reverts it later. Works exactly like &lt;a href=&quot;#jinja2.nodes.EvalContextModifier&quot;&gt;&lt;code&gt;EvalContextModifier&lt;/code&gt;&lt;/a&gt; but will only modify the &lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt;&lt;code&gt;EvalContext&lt;/code&gt;&lt;/a&gt; for nodes in the &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">evalコンテキストを変更し、後で元に戻します。&lt;a href=&quot;#jinja2.nodes.EvalContextModifier&quot;&gt; &lt;code&gt;EvalContextModifier&lt;/code&gt; と&lt;/a&gt;まったく同じように機能しますが、 &lt;code&gt;body&lt;/code&gt; ノードの&lt;a href=&quot;../api/index#jinja2.nodes.EvalContext&quot;&gt; &lt;code&gt;EvalContext&lt;/code&gt; &lt;/a&gt;のみを変更します。</target>
        </trans-unit>
        <trans-unit id="24b3b9baf1c4a126f56e8a9004769461d5a466c7" translate="yes" xml:space="preserve">
          <source>Modifies the eval context. For each option that should be modified, a &lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt; has to be added to the &lt;code&gt;options&lt;/code&gt; list.</source>
          <target state="translated">evalコンテキストを変更します。変更する必要のあるオプションごとに、&lt;a href=&quot;#jinja2.nodes.Keyword&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;options&lt;/code&gt; リストに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c1ebf77859fb14c0675d7cb2a9a0d32adff942e1" translate="yes" xml:space="preserve">
          <source>Most applications will create one &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; object on application initialization and use that to load templates. In some cases however, it&amp;rsquo;s useful to have multiple environments side by side, if different configurations are in use.</source>
          <target state="translated">ほとんどのアプリケーションは、アプリケーションの初期化時に1つの&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;オブジェクトを作成し、それを使用してテンプレートをロードします。ただし、異なる構成が使用されている場合は、複数の環境を並べて配置すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="8fc1b82160516c34bc0424e6bff8eaaa0a745cea" translate="yes" xml:space="preserve">
          <source>Multiplies the left with the right node.</source>
          <target state="translated">左と右のノードを掛け合わせます。</target>
        </trans-unit>
        <trans-unit id="e684424c98860c4dd04db0629091ea16f5b9b70c" translate="yes" xml:space="preserve">
          <source>Multiply the left operand with the right one. &lt;code&gt;{{ 2 * 2 }}&lt;/code&gt; would return &lt;code&gt;4&lt;/code&gt;. This can also be used to repeat a string multiple times. &lt;code&gt;{{ '=' * 80 }}&lt;/code&gt; would print a bar of 80 equal signs.</source>
          <target state="translated">左のオペランドに右のオペランドを掛けます。 &lt;code&gt;{{ 2 * 2 }}&lt;/code&gt; は &lt;code&gt;4&lt;/code&gt; を返します。これは、文字列を複数回繰り返すためにも使用できます。 &lt;code&gt;{{ '=' * 80 }}&lt;/code&gt; は、80の等号のバーを出力します。</target>
        </trans-unit>
        <trans-unit id="14f4a93deca99be69029c8bfd5545e7930dbdd07" translate="yes" xml:space="preserve">
          <source>My Macros are overridden by something</source>
          <target state="translated">私のマクロは何かによってオーバーライドされています</target>
        </trans-unit>
        <trans-unit id="a9fe7346053dfb556979a2bc05d12476bcee6ca4" translate="yes" xml:space="preserve">
          <source>My tracebacks look weird. What&amp;rsquo;s happening?</source>
          <target state="translated">私のトレースバックは奇妙に見えます。何が起こっていますか？</target>
        </trans-unit>
        <trans-unit id="a54f2ccb779f481bea3312bbe38f4dd24beb2f09" translate="yes" xml:space="preserve">
          <source>Named Block End-Tags</source>
          <target state="translated">名前付きブロックエンドタグ</target>
        </trans-unit>
        <trans-unit id="bdf40add81e23132230db9e1a6cb867647c6a6ba" translate="yes" xml:space="preserve">
          <source>Native Python Types</source>
          <target state="translated">ネイティブ Python の型</target>
        </trans-unit>
        <trans-unit id="86777b31e2fd1a2e44d7311251578c13d7bd9f1e" translate="yes" xml:space="preserve">
          <source>Negate the expression.</source>
          <target state="translated">表現を否定する。</target>
        </trans-unit>
        <trans-unit id="8e5e59ac22ed955675832789d9616249e7623080" translate="yes" xml:space="preserve">
          <source>Nesting extends</source>
          <target state="translated">ネスティングは</target>
        </trans-unit>
        <trans-unit id="173ee13c17be98fd0f2337de78f7c18e2d8b0787" translate="yes" xml:space="preserve">
          <source>New Style Gettext</source>
          <target state="translated">ニュースタイル ゲットテキスト</target>
        </trans-unit>
        <trans-unit id="2fefbf12100ae1567172eecac61bb666a6592345" translate="yes" xml:space="preserve">
          <source>New in version 2.1.</source>
          <target state="translated">バージョン2.1の新機能。</target>
        </trans-unit>
        <trans-unit id="520bd699bfd233c6c719e114aeab34db5d9f7d9a" translate="yes" xml:space="preserve">
          <source>New in version 2.10.</source>
          <target state="translated">バージョン2.10の新機能。</target>
        </trans-unit>
        <trans-unit id="af71fb2ec886c27b8d90d5685b1a90bb672e0391" translate="yes" xml:space="preserve">
          <source>New in version 2.10: Added support for namespace objects</source>
          <target state="translated">バージョン 2.10 の新機能:名前空間オブジェクトのサポートの追加</target>
        </trans-unit>
        <trans-unit id="6d15a1f28d7531b36c480eda2510883758ac5c8f" translate="yes" xml:space="preserve">
          <source>New in version 2.10: The &lt;code&gt;trimmed&lt;/code&gt; and &lt;code&gt;notrimmed&lt;/code&gt; modifiers have been added.</source>
          <target state="translated">バージョン2.10の新機能： &lt;code&gt;trimmed&lt;/code&gt; された修飾子とトリミングされてい &lt;code&gt;notrimmed&lt;/code&gt; 修飾子が追加されました。</target>
        </trans-unit>
        <trans-unit id="f3a03d82482c2654633a2377832d14cfc6598d03" translate="yes" xml:space="preserve">
          <source>New in version 2.11.</source>
          <target state="translated">バージョン2.11の新機能。</target>
        </trans-unit>
        <trans-unit id="aee31ea4030343aa786b36a380061ac9f94741b1" translate="yes" xml:space="preserve">
          <source>New in version 2.11.0.</source>
          <target state="translated">バージョン2.11.0の新機能。</target>
        </trans-unit>
        <trans-unit id="5d91c4354ebb3331bc82be50d93db7018afc02b5" translate="yes" xml:space="preserve">
          <source>New in version 2.2.</source>
          <target state="translated">バージョン2.2の新機能。</target>
        </trans-unit>
        <trans-unit id="d774c50c26fa55320ba29a97b10bb11f9f237033" translate="yes" xml:space="preserve">
          <source>New in version 2.3.</source>
          <target state="translated">バージョン2.3の新機能。</target>
        </trans-unit>
        <trans-unit id="3a6dc147e076b2223a7e4286318b8173a0405dbd" translate="yes" xml:space="preserve">
          <source>New in version 2.4.</source>
          <target state="translated">バージョン2.4の新機能。</target>
        </trans-unit>
        <trans-unit id="69fc2029db269706907c075091540534567f6074" translate="yes" xml:space="preserve">
          <source>New in version 2.5.</source>
          <target state="translated">バージョン2.5の新機能。</target>
        </trans-unit>
        <trans-unit id="c18752ced827f64a04accd8e20df21ee74c959b5" translate="yes" xml:space="preserve">
          <source>New in version 2.5: Added new-style gettext support.</source>
          <target state="translated">バージョン 2.5 の新機能:新しいスタイルの gettext サポートを追加。</target>
        </trans-unit>
        <trans-unit id="6e7d0e0358f4bc27c2026edc33ff3b0c0e537d0d" translate="yes" xml:space="preserve">
          <source>New in version 2.6.</source>
          <target state="translated">バージョン2.6の新機能。</target>
        </trans-unit>
        <trans-unit id="8548a135d2e74eda81d22ab7380951c1971f6ecd" translate="yes" xml:space="preserve">
          <source>New in version 2.6: The &lt;code&gt;attribute&lt;/code&gt; parameter was added.</source>
          <target state="translated">バージョン2.6の新機能： &lt;code&gt;attribute&lt;/code&gt; パラメーターが追加されました。</target>
        </trans-unit>
        <trans-unit id="14cba492650591bf79a1d09c61fac7a20227e0a5" translate="yes" xml:space="preserve">
          <source>New in version 2.7.</source>
          <target state="translated">バージョン2.7の新機能。</target>
        </trans-unit>
        <trans-unit id="ecdfe85eece9482685b0c727f9c1c325d365f63b" translate="yes" xml:space="preserve">
          <source>New in version 2.7: Added support for ignoring memcache errors through the &lt;code&gt;ignore_memcache_errors&lt;/code&gt; parameter.</source>
          <target state="translated">バージョン2.7の新機能： &lt;code&gt;ignore_memcache_errors&lt;/code&gt; パラメーターを介してmemcacheエラーを無視するためのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="db0e71df490938f07a1393a5a8216c8d0ab8010d" translate="yes" xml:space="preserve">
          <source>New in version 2.8.</source>
          <target state="translated">バージョン2.8の新機能。</target>
        </trans-unit>
        <trans-unit id="1c6baad30bff85154a95b18f5a49978679bada9c" translate="yes" xml:space="preserve">
          <source>New in version 2.9.</source>
          <target state="translated">バージョン2.9の新機能。</target>
        </trans-unit>
        <trans-unit id="142f3b7f23ab450f7599754632632a250bb70250" translate="yes" xml:space="preserve">
          <source>New in version 2.9.3.</source>
          <target state="translated">バージョン2.9.3の新機能。</target>
        </trans-unit>
        <trans-unit id="789b2d6d7165dabf88260fb752dc78ab6e1b4cca" translate="yes" xml:space="preserve">
          <source>New style &lt;code&gt;gettext&lt;/code&gt; make formatting part of the call, and behind the scenes enforce more consistency.</source>
          <target state="translated">新しいスタイルの &lt;code&gt;gettext&lt;/code&gt; により、フォーマットが呼び出しの一部になり、舞台裏で一貫性が強化されます。</target>
        </trans-unit>
        <trans-unit id="17cd287cea3563886bf548b76eb5ae60c001832a" translate="yes" xml:space="preserve">
          <source>New style gettext calls are less to type, less error prone, and support autoescaping better.</source>
          <target state="translated">新しいスタイルの gettext 呼び出しは、入力の手間が減り、エラーが発生しにくくなり、オートエスケープをより良くサポートします。</target>
        </trans-unit>
        <trans-unit id="78900f3e66f4d15d10990740df3d03b505c04079" translate="yes" xml:space="preserve">
          <source>Node for filter sections.</source>
          <target state="translated">フィルタセクション用のノードです。</target>
        </trans-unit>
        <trans-unit id="9946956d25d5c000d478dc268864588f0be1a3b9" translate="yes" xml:space="preserve">
          <source>Node that represents a template. This must be the outermost node that is passed to the compiler.</source>
          <target state="translated">テンプレートを表すノード。これは、コンパイラに渡される一番外側のノードでなければなりません。</target>
        </trans-unit>
        <trans-unit id="78192847842ebce74f26fb65a02aa408ecf57b4c" translate="yes" xml:space="preserve">
          <source>Node type</source>
          <target state="translated">ノードタイプ</target>
        </trans-unit>
        <trans-unit id="989c58ab69bbaeafb9b7c5438e1f5bbdba3577b0" translate="yes" xml:space="preserve">
          <source>Nodes that exist in a specific context only.</source>
          <target state="translated">特定のコンテキストにのみ存在するノード。</target>
        </trans-unit>
        <trans-unit id="8183ee787a893dcf10e72fcb2e04751125639bb7" translate="yes" xml:space="preserve">
          <source>Normally the template object is generated from an &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; but it also has a constructor that makes it possible to create a template instance directly using the constructor. It takes the same arguments as the environment constructor but it&amp;rsquo;s not possible to specify a loader.</source>
          <target state="translated">通常、テンプレートオブジェクトは&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;から生成されますが、コンストラクターを使用して直接テンプレートインスタンスを作成できるようにするコンストラクターもあります。環境コンストラクターと同じ引数を取りますが、ローダーを指定することはできません。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="86b7cc818ef00507b8451811fa756d292fe7e719" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;loop.index&lt;/code&gt; starts with 1, and &lt;code&gt;loop.index0&lt;/code&gt; starts with 0 (See: &lt;a href=&quot;#for-loop&quot;&gt;For&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;loop.index&lt;/code&gt; は1で始まり、 &lt;code&gt;loop.index0&lt;/code&gt; は0で始まることに注意してください（「&lt;a href=&quot;#for-loop&quot;&gt;For&lt;/a&gt;」を参照）。</target>
        </trans-unit>
        <trans-unit id="a33bc5a4e76f49d8225c34a24b0b915bde40160f" translate="yes" xml:space="preserve">
          <source>Note that classes are callable, as are instances of classes with a __call__() method.</source>
          <target state="translated">クラスは呼び出し可能であり、__call__()メソッドを持つクラスのインスタンスも呼び出し可能であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="62b0c10396f6fa98de468689b62c80247d966bb8" translate="yes" xml:space="preserve">
          <source>Note that even if rounded to 0 precision, a float is returned. If you need a real integer, pipe it through &lt;code&gt;int&lt;/code&gt;:</source>
          <target state="translated">精度が0に丸められた場合でも、floatが返されることに注意してください。実数の整数が必要な場合は、 &lt;code&gt;int&lt;/code&gt; にパイプします。</target>
        </trans-unit>
        <trans-unit id="1d923745fbb2b1176d6309436a7497ce577d6127" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;obj.attr&lt;/code&gt; notation in the &lt;code&gt;set&lt;/code&gt; tag is only allowed for namespace objects; attempting to assign an attribute on any other object will raise an exception.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; タグの &lt;code&gt;obj.attr&lt;/code&gt; 表記は、名前空間オブジェクトに対してのみ許可されることに注意してください。他のオブジェクトに属性を割り当てようとすると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="715bdfc538eef83b9b12b8f94bb7a65d22a6a9eb" translate="yes" xml:space="preserve">
          <source>Note that this filter is for use in HTML contexts only.</source>
          <target state="translated">このフィルタは HTML 文脈でのみ使われることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5fdfc008b1f40a375511a6529c6d38ba7663e2be" translate="yes" xml:space="preserve">
          <source>Note that, in Python, &lt;code&gt;else&lt;/code&gt; blocks are executed whenever the corresponding loop &lt;strong&gt;did not&lt;/strong&gt;&lt;code&gt;break&lt;/code&gt;. Since Jinja loops cannot &lt;code&gt;break&lt;/code&gt; anyway, a slightly different behavior of the &lt;code&gt;else&lt;/code&gt; keyword was chosen.</source>
          <target state="translated">Pythonでは、対応するループ&lt;strong&gt;が&lt;/strong&gt; &lt;code&gt;break&lt;/code&gt; &lt;strong&gt;なかった場合は&lt;/strong&gt;常に、 &lt;code&gt;else&lt;/code&gt; ブロックが実行されることに注意してください。Jinjaループはとにかく &lt;code&gt;break&lt;/code&gt; できないため、 &lt;code&gt;else&lt;/code&gt; キーワードのわずかに異なる動作が選択されました。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a53e7f02e15a7c737c1a16f31d969d2733509a62" translate="yes" xml:space="preserve">
          <source>Note, however, that &lt;strong&gt;Python dicts are not ordered&lt;/strong&gt;; so you might want to either pass a sorted &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;tuple&lt;/code&gt; s &amp;ndash; or a &lt;code&gt;collections.OrderedDict&lt;/code&gt; &amp;ndash; to the template, or use the &lt;code&gt;dictsort&lt;/code&gt; filter.</source>
          <target state="translated">ただし、&lt;strong&gt;Pythondictは順序付けられていない&lt;/strong&gt;ことに注意してください。したがって、 &lt;code&gt;tuple&lt;/code&gt; のソートされた &lt;code&gt;list&lt;/code&gt; （または &lt;code&gt;collections.OrderedDict&lt;/code&gt; ）をテンプレートに &lt;code&gt;dictsort&lt;/code&gt; か、dictsortフィルターを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0e829b418f94a6ecc766d5d7714b5e8b5e6508f0" translate="yes" xml:space="preserve">
          <source>Note: Does not work with generators. You may want to explicitly convert it to a list:</source>
          <target state="translated">注意:ジェネレータでは動作しません。明示的にリストに変換したい場合があります。</target>
        </trans-unit>
        <trans-unit id="9d021d605848f7e1ab0aa6a6cb14e63550dbac74" translate="yes" xml:space="preserve">
          <source>Notes on Autoescaping</source>
          <target state="translated">オートエスケーピングの注意点</target>
        </trans-unit>
        <trans-unit id="a48fd136a8b027fb68ab7b3a8efdc22393d6253e" translate="yes" xml:space="preserve">
          <source>Notes on Identifiers</source>
          <target state="translated">識別子に関する注意事項</target>
        </trans-unit>
        <trans-unit id="ee79286a29ead907309cf0b5b726992693dcdaa0" translate="yes" xml:space="preserve">
          <source>Null-Master Fallback</source>
          <target state="translated">ゼロマスターフォールバック</target>
        </trans-unit>
        <trans-unit id="cc71dae80256280988301531ccd15559074784c1" translate="yes" xml:space="preserve">
          <source>Often you want to have a navigation bar with an active navigation item. This is really simple to achieve. Because assignments outside of &lt;code&gt;block&lt;/code&gt;s in child templates are global and executed before the layout template is evaluated it&amp;rsquo;s possible to define the active menu item in the child template:</source>
          <target state="translated">多くの場合、アクティブなナビゲーションアイテムを備えたナビゲーションバーが必要です。これは本当に簡単に実現できます。子テンプレートの &lt;code&gt;block&lt;/code&gt; 外の割り当てはグローバルであり、レイアウトテンプレートが評価される前に実行されるため、子テンプレートでアクティブなメニュー項目を定義することができます。</target>
        </trans-unit>
        <trans-unit id="0737b426d33dfb3214fe59b9cfa03a0780a9ce86" translate="yes" xml:space="preserve">
          <source>Only named placeholders are allowed. This solves a common problem translators face because positional placeholders can&amp;rsquo;t switch positions meaningfully. Named placeholders always carry semantic information about what value goes where.</source>
          <target state="translated">名前付きプレースホルダーのみが許可されます。これにより、位置プレースホルダーは意味のある位置を切り替えることができないため、翻訳者が直面する一般的な問題が解決されます。名前付きプレースホルダーは、常に、どの値がどこに行くかについてのセマンティック情報を伝達します。</target>
        </trans-unit>
        <trans-unit id="94f18a36fc5575aceb2a6a962a28b4dbe5cd5fe3" translate="yes" xml:space="preserve">
          <source>Operator Intercepting</source>
          <target state="translated">オペレーターの迎撃</target>
        </trans-unit>
        <trans-unit id="3c909e96faf2e0f2d356cbfc91d2cda5fc32ce4a" translate="yes" xml:space="preserve">
          <source>Operator methods also work as expected. For example, &lt;code&gt;%&lt;/code&gt; implements printf-style for strings:</source>
          <target state="translated">演算子メソッドも期待どおりに機能します。たとえば、 &lt;code&gt;%&lt;/code&gt; は文字列のprintfスタイルを実装します。</target>
        </trans-unit>
        <trans-unit id="fd13b94019000aaafc7f679d1d2b13d8082b8dbf" translate="yes" xml:space="preserve">
          <source>Other Operators</source>
          <target state="translated">その他のオペレーター</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="c3ff18a45470574e07662106358ca04b7ff2feec" translate="yes" xml:space="preserve">
          <source>Parentheses group an expression.</source>
          <target state="translated">括弧は式をグループ化します。</target>
        </trans-unit>
        <trans-unit id="a22a4506b5f9507f9a00cd00bf41dfb0d593f059" translate="yes" xml:space="preserve">
          <source>Parse an assignment target. As Jinja allows assignments to tuples, this function can parse all allowed assignment targets. Per default assignments to tuples are parsed, that can be disable however by setting &lt;code&gt;with_tuple&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;. If only assignments to names are wanted &lt;code&gt;name_only&lt;/code&gt; can be set to &lt;code&gt;True&lt;/code&gt;. The &lt;code&gt;extra_end_rules&lt;/code&gt; parameter is forwarded to the tuple parsing function. If &lt;code&gt;with_namespace&lt;/code&gt; is enabled, a namespace assignment may be parsed.</source>
          <target state="translated">割り当てターゲットを解析します。Jinjaはタプルへの割り当てを許可するため、この関数は許可されたすべての割り当てターゲットを解析できます。デフォルトでは、タプルへの割り当てが解析されますが、 &lt;code&gt;with_tuple&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; に設定することで無効にできます。名前への割り当てのみが必要な場合は、 &lt;code&gt;name_only&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定できます。 &lt;code&gt;extra_end_rules&lt;/code&gt; のパラメータは、タプル解析関数に転送されます。場合 &lt;code&gt;with_namespace&lt;/code&gt; が有効になっている、名前空間の割り当てが解析されていてもよいです。</target>
        </trans-unit>
        <trans-unit id="5cbdc24b5a9f6ef2791ffa7ff7ac8598006c6f04" translate="yes" xml:space="preserve">
          <source>Parse an expression. Per default all expressions are parsed, if the optional &lt;code&gt;with_condexpr&lt;/code&gt; parameter is set to &lt;code&gt;False&lt;/code&gt; conditional expressions are not parsed.</source>
          <target state="translated">式を解析します。オプションの &lt;code&gt;with_condexpr&lt;/code&gt; パラメーターが &lt;code&gt;False&lt;/code&gt; に設定されている場合、デフォルトではすべての式が解析されます。条件式は解析されません。</target>
        </trans-unit>
        <trans-unit id="0884b5fb18fcee6a303ceed60721c58f57cc7789" translate="yes" xml:space="preserve">
          <source>Parse multiple statements into a list until one of the end tokens is reached. This is used to parse the body of statements as it also parses template data if appropriate. The parser checks first if the current token is a colon and skips it if there is one. Then it checks for the block end and parses until if one of the &lt;code&gt;end_tokens&lt;/code&gt; is reached. Per default the active token in the stream at the end of the call is the matched end token. If this is not wanted &lt;code&gt;drop_needle&lt;/code&gt; can be set to &lt;code&gt;True&lt;/code&gt; and the end token is removed.</source>
          <target state="translated">終了トークンの1つに到達するまで、複数のステートメントをリストに解析します。これは、必要に応じてテンプレートデータも解析するため、ステートメントの本体を解析するために使用されます。パーサーは、最初に現在のトークンがコロンであるかどうかを確認し、コロンがある場合はスキップします。次に、ブロックの終わりをチェックし、 &lt;code&gt;end_tokens&lt;/code&gt; の1つに到達するまで解析します。デフォルトでは、呼び出しの終了時にストリーム内のアクティブなトークンは、一致した終了トークンです。これが &lt;code&gt;drop_needle&lt;/code&gt; ない場合は、drop_needleを &lt;code&gt;True&lt;/code&gt; に設定して、終了トークンを削除できます。</target>
        </trans-unit>
        <trans-unit id="1573b88ef05cd812f9a97a0bb46e53220c001bd5" translate="yes" xml:space="preserve">
          <source>Parse the sourcecode and return the abstract syntax tree. This tree of nodes is used by the compiler to convert the template into executable source- or bytecode. This is useful for debugging or to extract information from templates.</source>
          <target state="translated">ソースコードを解析して、抽象構文ツリーを返します。このノードのツリーは、テンプレートを実行可能なソースコードまたはバイトコードに変換するためにコンパイラによって使用されます。これは、デバッグやテンプレートから情報を抽出するのに便利です。</target>
        </trans-unit>
        <trans-unit id="1b3cf5033ed01a4fcbff3f2957e66cfe44af45a9" translate="yes" xml:space="preserve">
          <source>Parser</source>
          <target state="translated">Parser</target>
        </trans-unit>
        <trans-unit id="b65d082616b58eb225874685df23e238a384e7af" translate="yes" xml:space="preserve">
          <source>Passing an object to the constructor converts it to text and wraps it to mark it safe without escaping. To escape the text, use the &lt;a href=&quot;../templates/index#escape&quot;&gt;&lt;code&gt;escape()&lt;/code&gt;&lt;/a&gt; class method instead.</source>
          <target state="translated">オブジェクトをコンストラクターに渡すと、オブジェクトがテキストに変換されてラップされ、エスケープせずに安全であるとマークされます。テキストをエスケープするには、代わりに&lt;a href=&quot;../templates/index#escape&quot;&gt; &lt;code&gt;escape()&lt;/code&gt; &lt;/a&gt;クラスメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="218a2dbef36847abf2a65ebdadb37d19c3a25944" translate="yes" xml:space="preserve">
          <source>Per default the return value is converted to &lt;code&gt;None&lt;/code&gt; if the expression returns an undefined value. This can be changed by setting &lt;code&gt;undefined_to_none&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">式が未定義の値を返す場合、デフォルトでは戻り値は &lt;code&gt;None&lt;/code&gt; に変換されます。これは、 &lt;code&gt;undefined_to_none&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; に設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="cf7b42a6124807449be5e1a930a7d065e2215de8" translate="yes" xml:space="preserve">
          <source>Per default the template encoding is &lt;code&gt;'utf-8'&lt;/code&gt; which can be changed by setting the &lt;code&gt;encoding&lt;/code&gt; parameter to something else.</source>
          <target state="translated">デフォルトでは、テンプレートのエンコーディングは &lt;code&gt;'utf-8'&lt;/code&gt; です。これは、 &lt;code&gt;encoding&lt;/code&gt; パラメータを別の値に設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="1ead1ce349d8f6cb58e1d7d062a7d63308e94602" translate="yes" xml:space="preserve">
          <source>Per default the template encoding is &lt;code&gt;'utf-8'&lt;/code&gt; which can be changed by setting the &lt;code&gt;encoding&lt;/code&gt; parameter to something else. Due to the nature of eggs it&amp;rsquo;s only possible to reload templates if the package was loaded from the file system and not a zip file.</source>
          <target state="translated">デフォルトでは、テンプレートのエンコーディングは &lt;code&gt;'utf-8'&lt;/code&gt; です。これは、 &lt;code&gt;encoding&lt;/code&gt; パラメータを別の値に設定することで変更できます。卵の性質上、パッケージがzipファイルではなくファイルシステムからロードされた場合にのみ、テンプレートをリロードできます。</target>
        </trans-unit>
        <trans-unit id="a785b1fa526d836e142bbe87ad65b690bb2a7c61" translate="yes" xml:space="preserve">
          <source>Perform a sequence / mapping containment test. Returns true if the left operand is contained in the right. &lt;code&gt;{{ 1 in [1, 2, 3] }}&lt;/code&gt; would, for example, return true.</source>
          <target state="translated">シーケンス/マッピング封じ込めテストを実行します。左のオペランドが右に含まれている場合はtrueを返します。たとえば、 &lt;code&gt;{{ 1 in [1, 2, 3] }}&lt;/code&gt; はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="86b411e1f788b894d3d20300add3a9c359be0a95" translate="yes" xml:space="preserve">
          <source>Perform the token test and return the token if it matched. Otherwise the return value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">トークンテストを実行し、一致した場合はトークンを返します。それ以外の場合、戻り値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="776c5bf8eb5ca38d0d841af806fffcc8d195ea70" translate="yes" xml:space="preserve">
          <source>Performs a &lt;a href=&quot;#tests&quot;&gt;test&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tests&quot;&gt;テストを&lt;/a&gt;実行します。</target>
        </trans-unit>
        <trans-unit id="318746196e03a0b3e8165aa784a9474b6c56ad5d" translate="yes" xml:space="preserve">
          <source>Please keep in mind that it is not possible to set variables inside a block and have them show up outside of it. This also applies to loops. The only exception to that rule are if statements which do not introduce a scope. As a result the following template is not going to do what you might expect:</source>
          <target state="translated">ブロックの中に変数を設定して、その変数をブロックの外に表示させることはできないことを覚えておいてください。これはループにも当てはまります。このルールの唯一の例外は、スコープを導入しないif文です。その結果、以下のテンプレートは期待通りにはいきません。</target>
        </trans-unit>
        <trans-unit id="4d158d039bf6981984c54da77a8bde34f37dd7a4" translate="yes" xml:space="preserve">
          <source>Please note that assignments in loops will be cleared at the end of the iteration and cannot outlive the loop scope. Older versions of Jinja had a bug where in some circumstances it appeared that assignments would work. This is not supported. See &lt;a href=&quot;#assignments&quot;&gt;Assignments&lt;/a&gt; for more information about how to deal with this.</source>
          <target state="translated">ループ内の割り当ては反復の終了時にクリアされ、ループスコープを超えることはできないことに注意してください。古いバージョンのJinjaにはバグがあり、状況によっては割り当てが機能するように見えました。これはサポートされていません。これに対処する方法の詳細については、&lt;a href=&quot;#assignments&quot;&gt;割り当て&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d61184962dda249c7c096096c40ff46b825f4a7" translate="yes" xml:space="preserve">
          <source>Policies</source>
          <target state="translated">Policies</target>
        </trans-unit>
        <trans-unit id="e4361368bdca1bd58ddf06196a34ab195d9d4746" translate="yes" xml:space="preserve">
          <source>Preprocesses the source with all extensions. This is automatically called for all parsing and compiling methods but &lt;em&gt;not&lt;/em&gt; for &lt;a href=&quot;#jinja2.Environment.lex&quot;&gt;&lt;code&gt;lex()&lt;/code&gt;&lt;/a&gt; because there you usually only want the actual source tokenized.</source>
          <target state="translated">すべての拡張子でソースを前処理します。これは、すべての解析およびコンパイルメソッドに対して自動的に呼び出されますが、&lt;a href=&quot;#jinja2.Environment.lex&quot;&gt; &lt;code&gt;lex()&lt;/code&gt; &lt;/a&gt;に対しては呼び出され&lt;em&gt;ません。&lt;/em&gt;これは、通常、実際のソースのみをトークン化する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="f1373a2c3508abe7f4e1917ec0a2d1a45cd4d82b" translate="yes" xml:space="preserve">
          <source>Preserve the trailing newline when rendering templates. The default is &lt;code&gt;False&lt;/code&gt;, which causes a single newline, if present, to be stripped from the end of the template.</source>
          <target state="translated">テンプレートをレンダリングするときに、末尾の改行を保持します。デフォルトは &lt;code&gt;False&lt;/code&gt; です。これにより、単一の改行が存在する場合は、テンプレートの最後から削除されます。</target>
        </trans-unit>
        <trans-unit id="4dd2eb61aaa0ac04e92aae2007265bebab0f1aaa" translate="yes" xml:space="preserve">
          <source>Pretty print a variable. Useful for debugging.</source>
          <target state="translated">変数をきれいに印刷します。デバッグに便利。</target>
        </trans-unit>
        <trans-unit id="d6a9d7250e18a05474b4fdcdff673449201dedc5" translate="yes" xml:space="preserve">
          <source>Previous versions:</source>
          <target state="translated">以前のバージョン。</target>
        </trans-unit>
        <trans-unit id="983a26c86ab701a43674ac275ec16813d79003f3" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;layout_template&lt;/code&gt; variable had to be a string with the layout template&amp;rsquo;s filename for this to work.</source>
          <target state="translated">以前は、これが &lt;code&gt;layout_template&lt;/code&gt; するためには、layout_template変数がレイアウトテンプレートのファイル名を含む文字列である必要がありました。</target>
        </trans-unit>
        <trans-unit id="7edff5fef55b04568ab220a5567fdc27cf42064b" translate="yes" xml:space="preserve">
          <source>Push a token back to the stream.</source>
          <target state="translated">トークンをストリームに戻します。</target>
        </trans-unit>
        <trans-unit id="9518eb316866b589927be01fa954dce2f32b73fc" translate="yes" xml:space="preserve">
          <source>Pylons</source>
          <target state="translated">Pylons</target>
        </trans-unit>
        <trans-unit id="9be248464a471407fbee9fbcade8fe4db067e18e" translate="yes" xml:space="preserve">
          <source>Python 2.x supports two ways of representing string objects. One is the &lt;code&gt;str&lt;/code&gt; type and the other is the &lt;code&gt;unicode&lt;/code&gt; type, both of which extend a type called &lt;code&gt;basestring&lt;/code&gt;. Unfortunately the default is &lt;code&gt;str&lt;/code&gt; which should not be used to store text based information unless only ASCII characters are used. With Python 2.6 it is possible to make &lt;code&gt;unicode&lt;/code&gt; the default on a per module level and with Python 3 it will be the default.</source>
          <target state="translated">Python 2.xは、文字列オブジェクトを表す2つの方法をサポートしています。1つは &lt;code&gt;str&lt;/code&gt; タイプで、もう1つは &lt;code&gt;unicode&lt;/code&gt; タイプで、どちらも &lt;code&gt;basestring&lt;/code&gt; と呼ばれるタイプを拡張します。残念ながら、デフォルトは &lt;code&gt;str&lt;/code&gt; であり、ASCII文字のみが使用されていない限り、テキストベースの情報を格納するために使用しないでください。Python 2.6では、モジュールごとのレベルで &lt;code&gt;unicode&lt;/code&gt; デフォルトにすることができ、Python3ではそれがデフォルトになります。</target>
        </trans-unit>
        <trans-unit id="f0cf7d69bbc3886aaa48e12a04b5e56ec1179d42" translate="yes" xml:space="preserve">
          <source>Python Methods</source>
          <target state="translated">Python メソッド</target>
        </trans-unit>
        <trans-unit id="796be16da9b6017bce34b3e8e1c72bd6d93087af" translate="yes" xml:space="preserve">
          <source>Quote data for use in a URL path or query using UTF-8.</source>
          <target state="translated">UTF-8を使用したURLのパスやクエリで使用するためのデータを引用します。</target>
        </trans-unit>
        <trans-unit id="73fe0e5682b1aaa840aae765d62f7c446154a97d" translate="yes" xml:space="preserve">
          <source>Raise the left operand to the power of the right operand. &lt;code&gt;{{ 2**3 }}&lt;/code&gt; would return &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">左のオペランドを右のオペランドの累乗にします。 &lt;code&gt;{{ 2**3 }}&lt;/code&gt; は &lt;code&gt;8&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4751bca1c449dcbf3b3839873dc3bd71cc2e4beb" translate="yes" xml:space="preserve">
          <source>Raised if a template does not exist.</source>
          <target state="translated">テンプレートが存在しない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="e9696766b93dc16d1783eb009fad55a6cf8952d9" translate="yes" xml:space="preserve">
          <source>Raised if a template tries to do something insecure if the sandbox is enabled.</source>
          <target state="translated">サンドボックスが有効になっている場合、テンプレートが何か安全でないことをしようとすると発生します。</target>
        </trans-unit>
        <trans-unit id="c471ab96ff847d05b9022bb27956ffe24abd6215" translate="yes" xml:space="preserve">
          <source>Raised if a template tries to operate on &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートが&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;を操作しようとした場合に発生します。</target>
        </trans-unit>
        <trans-unit id="6208a969dc31e9d554cdce19ea8731f9693daa6e" translate="yes" xml:space="preserve">
          <source>Raised if the node could not perform a requested action.</source>
          <target state="translated">ノードが要求されたアクションを実行できなかった場合に発生します。</target>
        </trans-unit>
        <trans-unit id="c2b723fd90d38efceabfbe2eec63c6bb45a5c830" translate="yes" xml:space="preserve">
          <source>Raised to tell the user that there is a problem with the template.</source>
          <target state="translated">テンプレートに問題があることをユーザーに伝えるために発生します。</target>
        </trans-unit>
        <trans-unit id="2382cf55c5bf7d25042bf12553b4ce8744b4f150" translate="yes" xml:space="preserve">
          <source>Reference to a namespace value assignment</source>
          <target state="translated">名前空間の値の割り当てへの参照</target>
        </trans-unit>
        <trans-unit id="a390f86c0e713c4cee3c4cee31810da2d7e36f84" translate="yes" xml:space="preserve">
          <source>Rename the &lt;code&gt;indentfirst&lt;/code&gt; argument to &lt;code&gt;first&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;indentfirst&lt;/code&gt; 引数の名前を &lt;code&gt;first&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="3a69a068906602fc3368a7a6b79be3b84795caa7" translate="yes" xml:space="preserve">
          <source>Render the template to produce a native Python type. If the result is a single node, its value is returned. Otherwise, the nodes are concatenated as strings. If the result can be parsed with &lt;a href=&quot;https://docs.python.org/3/library/ast.html#ast.literal_eval&quot;&gt;&lt;code&gt;ast.literal_eval()&lt;/code&gt;&lt;/a&gt;, the parsed value is returned. Otherwise, the string is returned.</source>
          <target state="translated">テンプレートをレンダリングして、ネイティブPythonタイプを生成します。結果が単一ノードの場合、その値が返されます。それ以外の場合、ノードは文字列として連結されます。結果を&lt;a href=&quot;https://docs.python.org/3/library/ast.html#ast.literal_eval&quot;&gt; &lt;code&gt;ast.literal_eval()&lt;/code&gt; &lt;/a&gt;で解析できる場合は、解析された値が返されます。それ以外の場合は、文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="10108d088c8cac5e1cdc1919fb1cb9259f4bbb98" translate="yes" xml:space="preserve">
          <source>Rendering &lt;code&gt;child.tmpl&lt;/code&gt; will give &lt;code&gt;body: Hi from child. Hi from parent.&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;child.tmpl&lt;/code&gt; をレンダリングすると、 &lt;code&gt;body: Hi from child. Hi from parent.&lt;/code&gt; 生成されます。こんにちは。親からこんにちは。</target>
        </trans-unit>
        <trans-unit id="3ab3623d8a76b9c779c7a2f28624a04faaec8df2" translate="yes" xml:space="preserve">
          <source>Rendering &lt;code&gt;grandchild1.tmpl&lt;/code&gt; will give &lt;code&gt;body: Hi from grandchild1.&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;grandchild1.tmpl&lt;/code&gt; をレンダリングすると、 &lt;code&gt;body: Hi from grandchild1.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1a85fd00cadcd31adefad540943bf51e22c93b7" translate="yes" xml:space="preserve">
          <source>Rendering &lt;code&gt;grandchild2.tmpl&lt;/code&gt; will give &lt;code&gt;body: Hi from grandchild2. Hi from parent.&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;grandchild2.tmpl&lt;/code&gt; をレンダリングすると、 &lt;code&gt;body: Hi from grandchild2. Hi from parent.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1f4b80e9538ea64a31e0b4f63a69f558ba4f64e" translate="yes" xml:space="preserve">
          <source>Rendering a Python object produces that object as long as it is the only node:</source>
          <target state="translated">Pythonオブジェクトをレンダリングすると、それが唯一のノードである限り、そのオブジェクトが生成されます。</target>
        </trans-unit>
        <trans-unit id="a076ede2419dff124d6045f9c0e7bc383aeccebf" translate="yes" xml:space="preserve">
          <source>Rendering list syntax produces a list:</source>
          <target state="translated">リスト構文をレンダリングするとリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="b31a79299f9da15dde5c2df70d7f3bdb493adb10" translate="yes" xml:space="preserve">
          <source>Rendering something that doesn&amp;rsquo;t look like a Python literal produces a string:</source>
          <target state="translated">Pythonリテラルのように見えないものをレンダリングすると、文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="dcec6aefd6a0900e7cdaa399f5f318f582076f7e" translate="yes" xml:space="preserve">
          <source>Represents a slice object. This must only be used as argument for &lt;code&gt;Subscript&lt;/code&gt;.</source>
          <target state="translated">スライスオブジェクトを表します。これは、 &lt;code&gt;Subscript&lt;/code&gt; 引数としてのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca732b365383fa344a3559e354c21ddda67cb7dc" translate="yes" xml:space="preserve">
          <source>Represents an extends statement.</source>
          <target state="translated">extends文を表します。</target>
        </trans-unit>
        <trans-unit id="8acb9f5c1e74fc765941bc25b28aed954d147e42" translate="yes" xml:space="preserve">
          <source>Reset the context of a node and all child nodes. Per default the parser will all generate nodes that have a &amp;lsquo;load&amp;rsquo; context as it&amp;rsquo;s the most common one. This method is used in the parser to set assignment targets and other nodes to a store context.</source>
          <target state="translated">ノードとすべての子ノードのコンテキストをリセットします。デフォルトでは、パーサーはすべて、最も一般的な「ロード」コンテキストを持つノードを生成します。このメソッドは、パーサーで割り当てターゲットと他のノードをストアコンテキストに設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7cc2b4f2d925268ec5101e5400b3a8604f8630a8" translate="yes" xml:space="preserve">
          <source>Resets the bucket (unloads the bytecode).</source>
          <target state="translated">バケットをリセットします(バイトコードをアンロードします)。</target>
        </trans-unit>
        <trans-unit id="64abb49d3b4b495c4d1114b5fb75390df88f0982" translate="yes" xml:space="preserve">
          <source>Resets the current item to the first item.</source>
          <target state="translated">現在の項目を最初の項目にリセットします。</target>
        </trans-unit>
        <trans-unit id="e38484ac6536da11b91f7adbaa38241d5ece21f5" translate="yes" xml:space="preserve">
          <source>Results in something like this:</source>
          <target state="translated">結果はこんな感じ。</target>
        </trans-unit>
        <trans-unit id="236fd5867c43400099496c033ff9e66e55fd9a84" translate="yes" xml:space="preserve">
          <source>Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default.</source>
          <target state="translated">各行が 4 つのスペースでインデントされた文字列のコピーを返します。最初の行と空白行はデフォルトではインデントされません。</target>
        </trans-unit>
        <trans-unit id="f833e2bd53410747d394fff9069e9276fc9ce888" translate="yes" xml:space="preserve">
          <source>Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument &lt;code&gt;count&lt;/code&gt; is given, only the first &lt;code&gt;count&lt;/code&gt; occurrences are replaced:</source>
          <target state="translated">部分文字列のすべての出現箇所が新しいものに置き換えられた値のコピーを返します。最初の引数は置換する必要のある部分文字列であり、2番目の引数は置換文字列です。オプションの3番目の引数 &lt;code&gt;count&lt;/code&gt; が指定されている場合、最初の &lt;code&gt;count&lt;/code&gt; オカレンスのみが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="78b646a04f7dc81f6607db730bfca98eb3d12a82" translate="yes" xml:space="preserve">
          <source>Return a list containing an arithmetic progression of integers. &lt;code&gt;range(i, j)&lt;/code&gt; returns &lt;code&gt;[i, i+1, i+2, ..., j-1]&lt;/code&gt;; start (!) defaults to &lt;code&gt;0&lt;/code&gt;. When step is given, it specifies the increment (or decrement). For example, &lt;code&gt;range(4)&lt;/code&gt; and &lt;code&gt;range(0, 4, 1)&lt;/code&gt; return &lt;code&gt;[0, 1, 2, 3]&lt;/code&gt;. The end point is omitted! These are exactly the valid indices for a list of 4 elements.</source>
          <target state="translated">整数の等差数列を含むリストを返します。 &lt;code&gt;range(i, j)&lt;/code&gt; は &lt;code&gt;[i, i+1, i+2, ..., j-1]&lt;/code&gt; 返します; start（！）のデフォルトは &lt;code&gt;0&lt;/code&gt; です。stepを指定すると、インクリメント（またはデクリメント）が指定されます。たとえば、 &lt;code&gt;range(4)&lt;/code&gt; と &lt;code&gt;range(0, 4, 1)&lt;/code&gt; &lt;code&gt;[0, 1, 2, 3]&lt;/code&gt; 返します。終点は省略！これらは、4つの要素のリストに対して正確に有効なインデックスです。</target>
        </trans-unit>
        <trans-unit id="b328b4a0b87a6043510344b497df2e871d1bd422" translate="yes" xml:space="preserve">
          <source>Return a new free identifier as &lt;a href=&quot;#jinja2.nodes.InternalName&quot;&gt;&lt;code&gt;InternalName&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">新しい無料の識別子を&lt;a href=&quot;#jinja2.nodes.InternalName&quot;&gt; &lt;code&gt;InternalName&lt;/code&gt; &lt;/a&gt;として返します。</target>
        </trans-unit>
        <trans-unit id="fc605183b525ac1a59c75168e409d2779604d26d" translate="yes" xml:space="preserve">
          <source>Return a random item from the sequence.</source>
          <target state="translated">シーケンスからランダムな項目を返します。</target>
        </trans-unit>
        <trans-unit id="f350c2a3ddcec5dab1b2e29440c29228c60a9eb5" translate="yes" xml:space="preserve">
          <source>Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter:</source>
          <target state="translated">シーケンス内の文字列を連結した文字列を返します。要素間の区切り文字はデフォルトでは空の文字列ですが、オプションのパラメータで定義できます。</target>
        </trans-unit>
        <trans-unit id="ba5509c3e061319b79dba156cb557b94d2d8148d" translate="yes" xml:space="preserve">
          <source>Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase.</source>
          <target state="translated">値のタイトルベースのバージョンを返します。つまり、単語は大文字で始まり、残りの文字はすべて小文字になります。</target>
        </trans-unit>
        <trans-unit id="3ab413b32ab56dfb840bf1e4bb7c604788a1d03b" translate="yes" xml:space="preserve">
          <source>Return a truncated copy of the string. The length is specified with the first parameter which defaults to &lt;code&gt;255&lt;/code&gt;. If the second parameter is &lt;code&gt;true&lt;/code&gt; the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign (&lt;code&gt;&quot;...&quot;&lt;/code&gt;). If you want a different ellipsis sign than &lt;code&gt;&quot;...&quot;&lt;/code&gt; you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated.</source>
          <target state="translated">文字列の切り捨てられたコピーを返します。長さは、デフォルトで &lt;code&gt;255&lt;/code&gt; に設定されている最初のパラメーターで指定されます。2番目のパラメーターが &lt;code&gt;true&lt;/code&gt; の場合、フィルターはテキストを長さでカットします。それ以外の場合は、最後の単語が破棄されます。テキストが実際に切り捨てられた場合は、省略記号（ &lt;code&gt;&quot;...&quot;&lt;/code&gt; ）が追加されます。 &lt;code&gt;&quot;...&quot;&lt;/code&gt; とは異なる省略記号が必要な場合は、3番目のパラメーターを使用して指定できます。4番目のパラメーターで指定された許容マージンだけ長さを超える文字列は切り捨てられません。</target>
        </trans-unit>
        <trans-unit id="2142f93ce01f18ba18824831b17b2e83f22e51d4" translate="yes" xml:space="preserve">
          <source>Return an attribute node for the current extension. This is useful to pass constants on extensions to generated template code.</source>
          <target state="translated">現在の拡張子の属性ノードを返します。これは、生成されたテンプレートコードに拡張子の定数を渡すのに便利です。</target>
        </trans-unit>
        <trans-unit id="0f4af466676d95e077ec7d0c0eb365f94b3b64d5" translate="yes" xml:space="preserve">
          <source>Return the absolute value of the argument.</source>
          <target state="translated">引数の絶対値を返します。</target>
        </trans-unit>
        <trans-unit id="6f96bc6d1f1fa056ae5ad44212c0688074b4dd43" translate="yes" xml:space="preserve">
          <source>Return the bytecode as string.</source>
          <target state="translated">バイトコードを文字列で返します。</target>
        </trans-unit>
        <trans-unit id="0dd6724d2accfad64b3619b421baa11215ecf013" translate="yes" xml:space="preserve">
          <source>Return the complete context as dict including the exported variables. For optimizations reasons this might not return an actual copy so be careful with using it.</source>
          <target state="translated">エクスポートした変数を含む完全なコンテキストを dict として返します。最適化のため、これは実際のコピーを返さないかもしれません。</target>
        </trans-unit>
        <trans-unit id="63df33977581347d5613d587060c1d550bba2ece" translate="yes" xml:space="preserve">
          <source>Return the current item, then advance &lt;a href=&quot;#cycler.current&quot;&gt;&lt;code&gt;current&lt;/code&gt;&lt;/a&gt; to the next item.</source>
          <target state="translated">そして、現在のアイテムを返し進め&lt;a href=&quot;#cycler.current&quot;&gt; &lt;code&gt;current&lt;/code&gt; &lt;/a&gt;次の項目に。</target>
        </trans-unit>
        <trans-unit id="3bedaa2d4cd131cd1c589cb6e6a9acdad25360c0" translate="yes" xml:space="preserve">
          <source>Return the current item. Equivalent to the item that will be returned next time &lt;a href=&quot;#cycler.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">現在のアイテムを返します。&lt;a href=&quot;#cycler.next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;が呼び出されたときに返されるアイテムに相当します。</target>
        </trans-unit>
        <trans-unit id="d674d44c0e8a3ad68a3ba50514bf4ca8d060ecbb" translate="yes" xml:space="preserve">
          <source>Return the current template context including locals. Behaves exactly like &lt;a href=&quot;#jinja2.nodes.ContextReference&quot;&gt;&lt;code&gt;ContextReference&lt;/code&gt;&lt;/a&gt;, but includes local variables, such as from a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">ローカルを含む現在のテンプレートコンテキストを返します。&lt;a href=&quot;#jinja2.nodes.ContextReference&quot;&gt; &lt;code&gt;ContextReference&lt;/code&gt; &lt;/a&gt;とまったく同じように動作 &lt;code&gt;for&lt;/code&gt; ますが、forループなどのローカル変数が含まれます。</target>
        </trans-unit>
        <trans-unit id="c099d9b76f12b3d8494645758e181b21a6f54004" translate="yes" xml:space="preserve">
          <source>Return the first item of a sequence.</source>
          <target state="translated">シーケンスの最初の項目を返します。</target>
        </trans-unit>
        <trans-unit id="5ec19a00ba49bed961d020c64a5aa3af7de0cc68" translate="yes" xml:space="preserve">
          <source>Return the largest item from the sequence.</source>
          <target state="translated">シーケンスの中で最大の項目を返します。</target>
        </trans-unit>
        <trans-unit id="017c5d2a23c95aebf8bef74e6a5c274a42cde1b3" translate="yes" xml:space="preserve">
          <source>Return the last item of a sequence.</source>
          <target state="translated">シーケンスの最後の項目を返します。</target>
        </trans-unit>
        <trans-unit id="57eddb6d445ca8c38d55da97a61e68039674f646" translate="yes" xml:space="preserve">
          <source>Return the number of items in a container.</source>
          <target state="translated">コンテナに入っているアイテムの数を返します。</target>
        </trans-unit>
        <trans-unit id="ebf3a909c405ce3848cb5be8de079462b14078b5" translate="yes" xml:space="preserve">
          <source>Return the smallest item from the sequence.</source>
          <target state="translated">シーケンスから最小の項目を返します。</target>
        </trans-unit>
        <trans-unit id="84ff9cc09e61d9237ee5ad4bc958cc1dddbd8409" translate="yes" xml:space="preserve">
          <source>Return the value of the expression as constant or raise &lt;a href=&quot;#jinja2.nodes.Impossible&quot;&gt;&lt;code&gt;Impossible&lt;/code&gt;&lt;/a&gt; if this was not possible.</source>
          <target state="translated">式の値を定数として返すか、これが&lt;a href=&quot;#jinja2.nodes.Impossible&quot;&gt; &lt;code&gt;Impossible&lt;/code&gt; &lt;/a&gt;場合はImpossibleを上げます。</target>
        </trans-unit>
        <trans-unit id="5f238fb379a5c0985a7f5c3edfb70ebad2e62469" translate="yes" xml:space="preserve">
          <source>Return true if the left and the right operand are true.</source>
          <target state="translated">左と右のオペランドが真であれば真を返します。</target>
        </trans-unit>
        <trans-unit id="a3092f9861034c7577f0f3a81d2d82a819fad84b" translate="yes" xml:space="preserve">
          <source>Return true if the left or the right operand are true.</source>
          <target state="translated">左または右のオペランドが真であれば真を返します。</target>
        </trans-unit>
        <trans-unit id="d1e6620625c273160538128efb0ed2601dc83b6e" translate="yes" xml:space="preserve">
          <source>Return true if the object is False.</source>
          <target state="translated">オブジェクトがFalseの場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="0c57a7f460593a32a584672a7c97aff232b6f660" translate="yes" xml:space="preserve">
          <source>Return true if the object is True.</source>
          <target state="translated">オブジェクトがTrueの場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="b68fa1ff4826bf0a2b4d773644e1f706bf8d31ad" translate="yes" xml:space="preserve">
          <source>Return true if the object is a boolean value.</source>
          <target state="translated">オブジェクトがブール値の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="d0add84d8ecfacfe97912cf6633d7e8de761463b" translate="yes" xml:space="preserve">
          <source>Return true if the object is a float.</source>
          <target state="translated">オブジェクトが float の場合は true を返します。</target>
        </trans-unit>
        <trans-unit id="4a7c97ef031ccbb4a101894a502d85db96738579" translate="yes" xml:space="preserve">
          <source>Return true if the object is a mapping (dict etc.).</source>
          <target state="translated">オブジェクトがマッピング(dictなど)であればtrueを返します。</target>
        </trans-unit>
        <trans-unit id="c388b9a7b9ed485cf6afe1a9d78591b33b38d20d" translate="yes" xml:space="preserve">
          <source>Return true if the object is a string.</source>
          <target state="translated">オブジェクトが文字列の場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="395f02796832c3a35ea991d8f215e1016c1e3d4a" translate="yes" xml:space="preserve">
          <source>Return true if the object is an integer.</source>
          <target state="translated">オブジェクトが整数の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="793d0fe0bdec956ca42b66fb022c9e914b4bfa78" translate="yes" xml:space="preserve">
          <source>Return true if the variable is a number.</source>
          <target state="translated">変数が数値の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="52b33c3f69a91af923c6460f110b2604407cbd0c" translate="yes" xml:space="preserve">
          <source>Return true if the variable is a sequence. Sequences are variables that are iterable.</source>
          <target state="translated">変数がシーケンスであれば真を返します。シーケンスは反復可能な変数です。</target>
        </trans-unit>
        <trans-unit id="00696bf78502e96490fe6f1159272be058dbbd5a" translate="yes" xml:space="preserve">
          <source>Return true if the variable is defined:</source>
          <target state="translated">変数が定義されていれば真を返します。</target>
        </trans-unit>
        <trans-unit id="076853a853f6711ea4529b84ad689493f2fc1c2d" translate="yes" xml:space="preserve">
          <source>Return true if the variable is even.</source>
          <target state="translated">変数が偶数の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="c21787bcdb2750cb4ccc476ec79f0566ded0fa1e" translate="yes" xml:space="preserve">
          <source>Return true if the variable is lowercased.</source>
          <target state="translated">変数が小文字になっている場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="c5bdeaaf831a09bb91d8b8f8eda335d9d4e34e60" translate="yes" xml:space="preserve">
          <source>Return true if the variable is none.</source>
          <target state="translated">変数が何もなければ真を返します。</target>
        </trans-unit>
        <trans-unit id="961a890d1b7e28999ac2a160d19a18a3720d0e39" translate="yes" xml:space="preserve">
          <source>Return true if the variable is odd.</source>
          <target state="translated">変数が奇数の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="791c3a23e5fe58f233ecd050699c68f49b91f6fb" translate="yes" xml:space="preserve">
          <source>Return true if the variable is uppercased.</source>
          <target state="translated">変数が大文字になっている場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="e4d5fb7da2928bc1e1b709110af1099d93fcc63e" translate="yes" xml:space="preserve">
          <source>Return whether the object is callable (i.e., some kind of function).</source>
          <target state="translated">オブジェクトが呼び出し可能かどうかを返します(つまり、ある種の関数)。</target>
        </trans-unit>
        <trans-unit id="ab58d75d31b1d00245f7b639078cc3fac4004e3a" translate="yes" xml:space="preserve">
          <source>Returns a list of templates for this environment. This requires that the loader supports the loader&amp;rsquo;s &lt;code&gt;list_templates()&lt;/code&gt; method.</source>
          <target state="translated">この環境のテンプレートのリストを返します。これには、ローダーがローダーの &lt;code&gt;list_templates()&lt;/code&gt; メソッドをサポートしている必要があります。</target>
        </trans-unit>
        <trans-unit id="cd35d11c96a5d0dd112c3b59b81d2f8359f2b2f7" translate="yes" xml:space="preserve">
          <source>Returns a list of unique items from the given iterable.</source>
          <target state="translated">与えられたイテレータブルから一意の項目のリストを返します。</target>
        </trans-unit>
        <trans-unit id="1afbb049cc710ba7ce544f754b31ac128081af25" translate="yes" xml:space="preserve">
          <source>Returns a set of all variables in the AST that will be looked up from the context at runtime. Because at compile time it&amp;rsquo;s not known which variables will be used depending on the path the execution takes at runtime, all variables are returned.</source>
          <target state="translated">実行時にコンテキストから検索されるAST内のすべての変数のセットを返します。コンパイル時には、実行時に実行がたどるパスに応じてどの変数が使用されるかがわからないため、すべての変数が返されます。</target>
        </trans-unit>
        <trans-unit id="2235c2f53752b94d9fbc66ca5713924fcd52d7d5" translate="yes" xml:space="preserve">
          <source>Returns the attribute of an extension bound to the environment. The identifier is the identifier of the &lt;code&gt;Extension&lt;/code&gt;.</source>
          <target state="translated">環境にバインドされた拡張機能の属性を返します。識別子は &lt;code&gt;Extension&lt;/code&gt; の識別子です。</target>
        </trans-unit>
        <trans-unit id="10bc7e12df8c3166bbb344b5709cf962083487f6" translate="yes" xml:space="preserve">
          <source>Returns the current template context. It can be used like a &lt;a href=&quot;#jinja2.nodes.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node, with a &lt;code&gt;'load'&lt;/code&gt; ctx and will return the current &lt;a href=&quot;../api/index#jinja2.runtime.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">現在のテンプレートコンテキストを返します。これは、 &lt;code&gt;'load'&lt;/code&gt; ctxを使用して&lt;a href=&quot;#jinja2.nodes.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;ノードのように使用でき、現在の&lt;a href=&quot;../api/index#jinja2.runtime.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="bae2bf70f13fffb5bc1db749de69285657c712ea" translate="yes" xml:space="preserve">
          <source>Returns the sum of a sequence of numbers plus the value of parameter &amp;lsquo;start&amp;rsquo; (which defaults to 0). When the sequence is empty it returns start.</source>
          <target state="translated">一連の数値とパラメータ「start」の値（デフォルトは0）の合計を返します。シーケンスが空の場合、開始を返します。</target>
        </trans-unit>
        <trans-unit id="02b67cdcf58b283312b00f306fc5484554fd244c" translate="yes" xml:space="preserve">
          <source>Returns the value for the cache key. If the item does not exist in the cache the return value must be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">キャッシュキーの値を返します。アイテムがキャッシュに存在しない場合、戻り値は &lt;code&gt;None&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="58266e5cb01cbdec38382670935c92336b0e9383" translate="yes" xml:space="preserve">
          <source>Reverse the object or return an iterator that iterates over it the other way round.</source>
          <target state="translated">オブジェクトを反転させたり、逆に反復処理するイテレータを返したりします。</target>
        </trans-unit>
        <trans-unit id="190da8acc2f7e9dda5f87c9a299bf318f2c172b7" translate="yes" xml:space="preserve">
          <source>Round the number to a given precision. The first parameter specifies the precision (default is &lt;code&gt;0&lt;/code&gt;), the second the rounding method:</source>
          <target state="translated">数値を指定された精度に丸めます。最初のパラメーターは精度を指定し（デフォルトは &lt;code&gt;0&lt;/code&gt; ）、2番目のパラメーターは丸め方法を指定します。</target>
        </trans-unit>
        <trans-unit id="dd535801ab531f631634dd6d64f55faff6c946ee" translate="yes" xml:space="preserve">
          <source>Same as a != b.</source>
          <target state="translated">a !=bと同じです。</target>
        </trans-unit>
        <trans-unit id="3a7331befde64313a9cbfec5cef1defd40890ae3" translate="yes" xml:space="preserve">
          <source>Same as a &amp;gt; b.</source>
          <target state="translated">&amp;gt; bと同じ。</target>
        </trans-unit>
        <trans-unit id="a93f8b7877d0318dcf0e65702f450f7f27cf73e2" translate="yes" xml:space="preserve">
          <source>Same as a &amp;gt;= b.</source>
          <target state="translated">&amp;gt; = bと同じです。</target>
        </trans-unit>
        <trans-unit id="9626d6154fa1c45a047f1dc2deafe0a5ec0def3e" translate="yes" xml:space="preserve">
          <source>Same as a &amp;lt; b.</source>
          <target state="translated">a &amp;lt;bと同じ。</target>
        </trans-unit>
        <trans-unit id="9819a4a43e3cb225a649fc00846f7c4c26f95f63" translate="yes" xml:space="preserve">
          <source>Same as a &amp;lt;= b.</source>
          <target state="translated">a &amp;lt;= bと同じです。</target>
        </trans-unit>
        <trans-unit id="9093a1278792375be5f92ad321e384b025c0c9a0" translate="yes" xml:space="preserve">
          <source>Same as a == b.</source>
          <target state="translated">a ==bと同じです。</target>
        </trans-unit>
        <trans-unit id="0a771c36be05d64f376a7d57849bb33ee0c53884" translate="yes" xml:space="preserve">
          <source>Sandbox</source>
          <target state="translated">Sandbox</target>
        </trans-unit>
        <trans-unit id="c1c9094b53d991ebf788f3f011fb62b96a813116" translate="yes" xml:space="preserve">
          <source>Scoping Behavior</source>
          <target state="translated">スコーピング動作</target>
        </trans-unit>
        <trans-unit id="43ddf283f03fda4643fe2db02659e6fb64a89999" translate="yes" xml:space="preserve">
          <source>Search Page</source>
          <target state="translated">検索ページ</target>
        </trans-unit>
        <trans-unit id="83c9c2e2a30c460752b7a41213ac06bec63a52b9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#bytecode-cache&quot;&gt;Bytecode Cache&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#bytecode-cache&quot;&gt;バイトコードキャッシュ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="294a93d42216b504ccde38dbacdd55b257f64fe1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#notes-on-subscriptions&quot;&gt;Notes on subscriptions&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については&lt;a href=&quot;#notes-on-subscriptions&quot;&gt;、サブスクリプションに関する注意事項を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="06d93897c2551bb9e898fca4617c3da1bebba563" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#default&quot;&gt;&lt;code&gt;default()&lt;/code&gt;&lt;/a&gt; filter for a simple way to set undefined variables.</source>
          <target state="translated">未定義の変数を設定する簡単な方法については、&lt;a href=&quot;#default&quot;&gt; &lt;code&gt;default()&lt;/code&gt; &lt;/a&gt;フィルターを参照してください。</target>
        </trans-unit>
        <trans-unit id="4a9863d5f8d62a96977b98e7bb29cdeae4b3506c" translate="yes" xml:space="preserve">
          <source>See the section about &lt;a href=&quot;#template-inheritance&quot;&gt;Template Inheritance&lt;/a&gt; above.</source>
          <target state="translated">上記の&lt;a href=&quot;#template-inheritance&quot;&gt;テンプレート継承&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8cb52dd60a1e89ab83f1465e52ad778fe683f768" translate="yes" xml:space="preserve">
          <source>Set the environment for all nodes.</source>
          <target state="translated">すべてのノードの環境を設定します。</target>
        </trans-unit>
        <trans-unit id="e700eba6661befc9f6d798a3ccad149f365abd9f" translate="yes" xml:space="preserve">
          <source>Set the line numbers of the node and children.</source>
          <target state="translated">ノードと子ノードの行番号を設定します。</target>
        </trans-unit>
        <trans-unit id="afb324b0e6260f7ef4981606a16c4f24ee7892df" translate="yes" xml:space="preserve">
          <source>Short circuited AND.</source>
          <target state="translated">短絡的なAND。</target>
        </trans-unit>
        <trans-unit id="a7f5171e5d1781e0ad43d2a2c8bbf56e5f433589" translate="yes" xml:space="preserve">
          <source>Short circuited OR.</source>
          <target state="translated">ショートしたOR。</target>
        </trans-unit>
        <trans-unit id="844b6c9c980df134ce19618d04857c61b18bbd90" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;loop.cycle&lt;/code&gt;, but can be used outside loops or across multiple loops. For example, render a list of folders and files in a list, alternating giving them &amp;ldquo;odd&amp;rdquo; and &amp;ldquo;even&amp;rdquo; classes.</source>
          <target state="translated">&lt;code&gt;loop.cycle&lt;/code&gt; に似ていますが、ループの外側または複数のループにわたって使用できます。たとえば、フォルダとファイルのリストをリストにレンダリングし、交互に「奇数」クラスと「偶数」クラスを指定します。</target>
        </trans-unit>
        <trans-unit id="d44e18ea92915cdbd69eb88b82911bdf9deee170" translate="yes" xml:space="preserve">
          <source>Similar to a generator comprehension such as:</source>
          <target state="translated">などの発電機の理解度に似ています。</target>
        </trans-unit>
        <trans-unit id="fdaaa65da21571955b43ec2c1b986421bdba7cbd" translate="yes" xml:space="preserve">
          <source>Since Jinja 2.1, an extra &lt;code&gt;cycle&lt;/code&gt; helper exists that allows loop-unbound cycling. For more information, have a look at the &lt;a href=&quot;#builtin-globals&quot;&gt;List of Global Functions&lt;/a&gt;.</source>
          <target state="translated">Jinja 2.1以降、ループアンバウンドサイクリングを可能にする追加の &lt;code&gt;cycle&lt;/code&gt; ヘルパーが存在します。詳細について&lt;a href=&quot;#builtin-globals&quot;&gt;は、グローバル関数のリストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c19eebe8e8cf01c55c96a2698899a44e6ab9fc97" translate="yes" xml:space="preserve">
          <source>Since Jinja 2.2, line-based comments are available as well. For example, if the line-comment prefix is configured to be &lt;code&gt;##&lt;/code&gt;, everything from &lt;code&gt;##&lt;/code&gt; to the end of the line is ignored (excluding the newline sign):</source>
          <target state="translated">Jinja 2.2以降、行ベースのコメントも利用できます。たとえば、行コメントプレフィックスが &lt;code&gt;##&lt;/code&gt; になるように構成されている場合、 &lt;code&gt;##&lt;/code&gt; から行末までのすべてが無視されます（改行記号を除く）。</target>
        </trans-unit>
        <trans-unit id="29357c589f31a76c6bc3fef9e02fe73cf07c6c61" translate="yes" xml:space="preserve">
          <source>Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns:</source>
          <target state="translated">イテレータをスライスして、それらの項目を含むリストのリストを返します。列を表す3つのulタグを含むdivを作成したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="bb65389798978a2ccd3b307710a43072f2930bba" translate="yes" xml:space="preserve">
          <source>Some loaders load templates from locations where the template sources may change (ie: file system or database). If &lt;code&gt;auto_reload&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; (default) every time a template is requested the loader checks if the source changed and if yes, it will reload the template. For higher performance it&amp;rsquo;s possible to disable that.</source>
          <target state="translated">一部のローダーは、テンプレートソースが変更される可能性のある場所（ファイルシステムまたはデータベースなど）からテンプレートをロードします。テンプレートが要求されるたびに &lt;code&gt;auto_reload&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; （デフォルト）に設定されている場合、ローダーはソースが変更されたかどうかを確認し、変更された場合はテンプレートを再ロードします。より高いパフォーマンスのために、それを無効にすることが可能です。</target>
        </trans-unit>
        <trans-unit id="75a62f3fd14c5716af8ef6a1d3efa00d5cb7132e" translate="yes" xml:space="preserve">
          <source>Sort a dict and yield (key, value) pairs. Because python dicts are unsorted you may want to use this function to order them by either key or value:</source>
          <target state="translated">ディクトをソートし、(キーと値の)ペアを生成します。pythonの辞書はソートされていないので、この関数を使ってキーか値で並べ替えたい場合があります。</target>
        </trans-unit>
        <trans-unit id="6613f9cd3190048d407db8912b358a2661a97850" translate="yes" xml:space="preserve">
          <source>Sort an iterable using Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/functions.html#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Pythonの&lt;a href=&quot;https://docs.python.org/3/library/functions.html#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;を使用してイテラブルをソートします。</target>
        </trans-unit>
        <trans-unit id="d22360f4eb53e527c0efb166ced558e4cb8014da" translate="yes" xml:space="preserve">
          <source>Sounds complicated but is very basic. It&amp;rsquo;s easiest to understand it by starting with an example.</source>
          <target state="translated">複雑に聞こえますが、非常に基本的です。例から始めることでそれを理解するのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="e382f0d2b6ab8834194da1fc7849c7ad778e12e7" translate="yes" xml:space="preserve">
          <source>Specific node for with statements. In older versions of Jinja the with statement was implemented on the base of the &lt;code&gt;Scope&lt;/code&gt; node instead.</source>
          <target state="translated">withステートメントの特定のノード。Jinjaの古いバージョンでは、withステートメントは代わりに &lt;code&gt;Scope&lt;/code&gt; ノードのベースに実装されていました。</target>
        </trans-unit>
        <trans-unit id="396bbf1a07bce3fa1085dc09b2ce87fd055f711c" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.10, the block assignment supports filters.</source>
          <target state="translated">Jinja 2.10以降、ブロックの割り当てでフィルタが使えるようになりました。</target>
        </trans-unit>
        <trans-unit id="2b89f074899042ae38deb7c42515ec2d40019d74" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.2, you can explicitly specify that variables are available in a block by setting the block to &amp;ldquo;scoped&amp;rdquo; by adding the &lt;code&gt;scoped&lt;/code&gt; modifier to a block declaration:</source>
          <target state="translated">Jinja 2.2以降では、 &lt;code&gt;scoped&lt;/code&gt; 修飾子をブロック宣言に追加してブロックを「スコープ」に設定することにより、変数がブロックで使用可能であることを明示的に指定できます。</target>
        </trans-unit>
        <trans-unit id="1bfe751f84fe5346e496499bb49c233fbadfa5ce" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.8, it&amp;rsquo;s possible to also use block assignments to capture the contents of a block into a variable name. This can be useful in some situations as an alternative for macros. In that case, instead of using an equals sign and a value, you just write the variable name and then everything until &lt;code&gt;{% endset %}&lt;/code&gt; is captured.</source>
          <target state="translated">Jinja 2.8以降では、ブロック割り当てを使用して、ブロックの内容を変数名に取り込むこともできます。これは、マクロの代わりとして、状況によっては役立つ場合があります。その場合、等号と値を使用する代わりに、変数名を書き込むだけで、 &lt;code&gt;{% endset %}&lt;/code&gt; がキャプチャされるまですべてを記述します。</target>
        </trans-unit>
        <trans-unit id="0194d53b94da57c0b99e111103eb27f5ff40eaea" translate="yes" xml:space="preserve">
          <source>Starting with Jinja 2.9 policies can be configured on the environment which can slightly influence how filters and other template constructs behave. They can be configured with the &lt;a href=&quot;#jinja2.Environment.policies&quot;&gt;&lt;code&gt;policies&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">Jinja 2.9以降、環境でポリシーを構成できます。これは、フィルターやその他のテンプレート構造の動作にわずかに影響を与える可能性があります。これらは、&lt;a href=&quot;#jinja2.Environment.policies&quot;&gt; &lt;code&gt;policies&lt;/code&gt; &lt;/a&gt;属性を使用して構成できます。</target>
        </trans-unit>
        <trans-unit id="cafdcaeb4861bbc7c82003a12e6f0283315542a6" translate="yes" xml:space="preserve">
          <source>Stores the bytecode in the cache. &lt;code&gt;value&lt;/code&gt; is a string and &lt;code&gt;timeout&lt;/code&gt; the timeout of the key. If timeout is not provided a default timeout or no timeout should be assumed, if it&amp;rsquo;s provided it&amp;rsquo;s an integer with the number of seconds the cache item should exist.</source>
          <target state="translated">バイトコードをキャッシュに格納します。 &lt;code&gt;value&lt;/code&gt; 文字列とされ &lt;code&gt;timeout&lt;/code&gt; キーのタイムアウト。タイムアウトが指定されていない場合、デフォルトのタイムアウトが指定されていないか、タイムアウトが想定されていない場合、タイムアウトが指定されている場合は、キャッシュアイテムが存在する必要がある秒数の整数です。</target>
        </trans-unit>
        <trans-unit id="3ce18feccb225be1a525b3b955786869abaf8a5c" translate="yes" xml:space="preserve">
          <source>String formatting is used even if no placeholders are used, which makes all strings use a consistent format. Remember to escape any raw percent signs as &lt;code&gt;%%&lt;/code&gt;, such as &lt;code&gt;100%%&lt;/code&gt;.</source>
          <target state="translated">プレースホルダーが使用されていない場合でも文字列フォーマットが使用されるため、すべての文字列で一貫したフォーマットが使用されます。 &lt;code&gt;100%%&lt;/code&gt; など、生のパーセント記号は &lt;code&gt;%%&lt;/code&gt; としてエスケープすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="758651fa6af3dea8d237a2cff958c9d836d1e6a3" translate="yes" xml:space="preserve">
          <source>String literals in templates with automatic escaping are considered unsafe because native Python strings (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;basestring&lt;/code&gt;) are not &lt;code&gt;MarkupSafe.Markup&lt;/code&gt; strings with an &lt;code&gt;__html__&lt;/code&gt; attribute.</source>
          <target state="translated">自動エスケープを使用するテンプレートの文字列リテラルは、ネイティブPython文字列（ &lt;code&gt;str&lt;/code&gt; 、 &lt;code&gt;unicode&lt;/code&gt; 、 &lt;code&gt;basestring&lt;/code&gt; ）が &lt;code&gt;__html__&lt;/code&gt; 属性を持つ &lt;code&gt;MarkupSafe.Markup&lt;/code&gt; 文字列ではないため、安全でないと見なされます。</target>
        </trans-unit>
        <trans-unit id="694cb7c0f7dc6fbad9cdf2eb0aa3e65f3233c47f" translate="yes" xml:space="preserve">
          <source>Strip SGML/XML tags and replace adjacent whitespace by one space.</source>
          <target state="translated">SGML/XMLタグを削除し、隣接する空白を1つのスペースに置き換える。</target>
        </trans-unit>
        <trans-unit id="dd06c47f282d620503c004a10e1cacd18018ce29" translate="yes" xml:space="preserve">
          <source>Strip leading and trailing characters, by default whitespace.</source>
          <target state="translated">先頭と末尾の文字を除去します。</target>
        </trans-unit>
        <trans-unit id="49922701fd34ab645b330fa50f74d87424e231e0" translate="yes" xml:space="preserve">
          <source>Subclasses have to override this method to load bytecode into a bucket. If they are not able to find code in the cache for the bucket, it must not do anything.</source>
          <target state="translated">サブクラスは、バイトコードをバケットにロードするために、このメソッドをオーバーライドしなければなりません。バケットのキャッシュからコードを見つけられない場合は、何もしないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="c95da60387c38394a0036b09026d1e93fe602632" translate="yes" xml:space="preserve">
          <source>Subclasses have to override this method to write the bytecode from a bucket back to the cache. If it unable to do so it must not fail silently but raise an exception.</source>
          <target state="translated">サブクラスは、バケットからキャッシュにバイトコードを書き戻すために、このメソッドをオーバーライドしなければなりません。もしそれができない場合は、黙って失敗するのではなく、例外を発生させなければなりません。</target>
        </trans-unit>
        <trans-unit id="c803b9b336348f54fc64d933f649c3f920595877" translate="yes" xml:space="preserve">
          <source>Subclasses may override this method and implement template path joining here.</source>
          <target state="translated">サブクラスはこのメソッドをオーバーライドして、ここでテンプレートパスの結合を実装することができます。</target>
        </trans-unit>
        <trans-unit id="9c07fe0cfdeb6c136fd708b6a85f82ef8783ee03" translate="yes" xml:space="preserve">
          <source>Subtract the right from the left node.</source>
          <target state="translated">左のノードから右のノードを引きます。</target>
        </trans-unit>
        <trans-unit id="eff7d7ea80d1caec25b0e5a0546bfa2147445510" translate="yes" xml:space="preserve">
          <source>Subtract the second number from the first one. &lt;code&gt;{{ 3 - 2 }}&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">最初の数値から2番目の数値を引きます。 &lt;code&gt;{{ 3 - 2 }}&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3387f86d284c0b43d2ea73ff54d2a7b7a48e489e" translate="yes" xml:space="preserve">
          <source>Super Blocks</source>
          <target state="translated">スーパーブロック</target>
        </trans-unit>
        <trans-unit id="21dffc2fdfe53050af42ded6c28267b1bc220972" translate="yes" xml:space="preserve">
          <source>Switching from other Template Engines</source>
          <target state="translated">他のテンプレートエンジンからの切り替え</target>
        </trans-unit>
        <trans-unit id="71bba7c9cef25d9bd23a9aa321adc18e9fc6cf73" translate="yes" xml:space="preserve">
          <source>Sync methods and filters become wrappers around their corresponding async implementations where needed. For example, &lt;code&gt;render&lt;/code&gt; invokes &lt;code&gt;async_render&lt;/code&gt;, and &lt;code&gt;|map&lt;/code&gt; supports async iterables.</source>
          <target state="translated">同期メソッドとフィルターは、必要に応じて、対応する非同期実装のラッパーになります。たとえば、 &lt;code&gt;render&lt;/code&gt; は &lt;code&gt;async_render&lt;/code&gt; を呼び出し、 &lt;code&gt;|map&lt;/code&gt; は非同期イテラブルをサポートします。</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="281654bbd7441e0f276a381271aea16708759c5a" translate="yes" xml:space="preserve">
          <source>Template Designer Documentation</source>
          <target state="translated">テンプレートデザイナーのドキュメント</target>
        </trans-unit>
        <trans-unit id="9b7e138f2dad79fc18782855615d0479367b56c8" translate="yes" xml:space="preserve">
          <source>Template File Extension</source>
          <target state="translated">テンプレートファイル拡張子</target>
        </trans-unit>
        <trans-unit id="d6b6bb3a1a939adefc8ad08e7880baf39f4c9d7b" translate="yes" xml:space="preserve">
          <source>Template Inheritance</source>
          <target state="translated">テンプレート継承</target>
        </trans-unit>
        <trans-unit id="78c16f64ddfd962c1a4af200be96953360f3c35a" translate="yes" xml:space="preserve">
          <source>Template Objects</source>
          <target state="translated">テンプレートオブジェクト</target>
        </trans-unit>
        <trans-unit id="9f87b7ab70925f64448758502a66ba88da8a9d3a" translate="yes" xml:space="preserve">
          <source>Template objects created from the constructor rather than an environment do have an &lt;code&gt;environment&lt;/code&gt; attribute that points to a temporary environment that is probably shared with other templates created with the constructor and compatible settings.</source>
          <target state="translated">環境ではなくコンストラクターから作成されたテンプレートオブジェクトには、コンストラクターと互換性のある設定で作成された他のテンプレートとおそらく共有される一時的な環境を指す &lt;code&gt;environment&lt;/code&gt; 属性があります。</target>
        </trans-unit>
        <trans-unit id="a7288bb9ab09af6f0b90103ee11424f355ff3676" translate="yes" xml:space="preserve">
          <source>Template rendering requires an event loop to be available to the current thread. &lt;a href=&quot;https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop&quot;&gt;&lt;code&gt;asyncio.get_event_loop()&lt;/code&gt;&lt;/a&gt; must return an event loop.</source>
          <target state="translated">テンプレートレンダリングでは、現在のスレッドでイベントループを使用できるようにする必要があります。&lt;a href=&quot;https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop&quot;&gt; &lt;code&gt;asyncio.get_event_loop()&lt;/code&gt; &lt;/a&gt;はイベントループを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="39d49599f75e22a6d75ba5b9d80545821fe64568" translate="yes" xml:space="preserve">
          <source>Template variables are defined by the context dictionary passed to the template.</source>
          <target state="translated">テンプレート変数は、テンプレートに渡されたコンテキスト辞書によって定義されます。</target>
        </trans-unit>
        <trans-unit id="ba5b258233f91378dd8ccbeefd31f8df72a29e29" translate="yes" xml:space="preserve">
          <source>Templates can be precompiled with &lt;a href=&quot;#jinja2.Environment.compile_templates&quot;&gt;&lt;code&gt;Environment.compile_templates()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートは、&lt;a href=&quot;#jinja2.Environment.compile_templates&quot;&gt; &lt;code&gt;Environment.compile_templates()&lt;/code&gt; を使用して&lt;/a&gt;プリコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="60b1bb86d1e13ba28745be59bd5b9264a89c1729" translate="yes" xml:space="preserve">
          <source>Test a token against a token expression. This can either be a token type or &lt;code&gt;'token_type:token_value'&lt;/code&gt;. This can only test against string values and types.</source>
          <target state="translated">トークン式に対してトークンをテストします。これは、トークンタイプまたは &lt;code&gt;'token_type:token_value'&lt;/code&gt; のいずれかです。これは、文字列の値と型に対してのみテストできます。</target>
        </trans-unit>
        <trans-unit id="4aef60e6d06c141d6bd4556489862e87afb3283f" translate="yes" xml:space="preserve">
          <source>Test against multiple token expressions.</source>
          <target state="translated">複数のトークン式に対してテストします。</target>
        </trans-unit>
        <trans-unit id="85c302de93dc41f4d107ec9495a1b86790286695" translate="yes" xml:space="preserve">
          <source>Test if the attribute given is an internal python attribute. For example this function returns &lt;code&gt;True&lt;/code&gt; for the &lt;code&gt;func_code&lt;/code&gt; attribute of python objects. This is useful if the environment method &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.is_safe_attribute&quot;&gt;&lt;code&gt;is_safe_attribute()&lt;/code&gt;&lt;/a&gt; is overridden.</source>
          <target state="translated">指定された属性が内部python属性であるかどうかをテストします。たとえば、この関数は、Pythonオブジェクトの &lt;code&gt;func_code&lt;/code&gt; 属性に対して &lt;code&gt;True&lt;/code&gt; を返します。これは、環境メソッド&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.is_safe_attribute&quot;&gt; &lt;code&gt;is_safe_attribute()&lt;/code&gt; &lt;/a&gt;がオーバーライドされている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="68fec6564cecec23cfc3dfa54b9bf9ac51738e84" translate="yes" xml:space="preserve">
          <source>Tests can accept arguments, too. If the test only takes one argument, you can leave out the parentheses. For example, the following two expressions do the same thing:</source>
          <target state="translated">テストは引数を受け取ることもできます。テストが1つの引数しか受け取らない場合は、括弧を省くことができます。例えば、以下の2つの式は同じことをしています。</target>
        </trans-unit>
        <trans-unit id="9f7a02abfca4b4a403d8b08c3864152cde4469cd" translate="yes" xml:space="preserve">
          <source>Tests work like filters just that there is no way for a test to get access to the environment or context and that they can&amp;rsquo;t be chained. The return value of a test should be &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. The purpose of a test is to give the template designers the possibility to perform type and conformability checks.</source>
          <target state="translated">テストはフィルターのように機能しますが、テストが環境やコンテキストにアクセスする方法がなく、それらを連鎖させることはできません。テストの戻り値は &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; である必要があります。テストの目的は、テンプレート設計者がタイプと適合性のチェックを実行できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="cb66034b6a518b97ae4eb07cdc2717ab088f1068" translate="yes" xml:space="preserve">
          <source>TextMate</source>
          <target state="translated">TextMate</target>
        </trans-unit>
        <trans-unit id="89d2fafb10ff9782ca22c80514f20be7578870b9" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;do&amp;rdquo; aka expression-statement extension adds a simple &lt;code&gt;do&lt;/code&gt; tag to the template engine that works like a variable expression but ignores the return value.</source>
          <target state="translated">「do」別名式ステートメント拡張機能は、変数式のように機能するが戻り値を無視する単純な &lt;code&gt;do&lt;/code&gt; タグをテンプレートエンジンに追加します。</target>
        </trans-unit>
        <trans-unit id="9d21c6d6134bc0cc71aa1b7a3bad6734d428a9bb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#builtin-filters&quot;&gt;List of Builtin Filters&lt;/a&gt; below describes all the builtin filters.</source>
          <target state="translated">以下の組み込みフィルターの&lt;a href=&quot;#builtin-filters&quot;&gt;リストは、&lt;/a&gt;すべての組み込みフィルターについて説明しています。</target>
        </trans-unit>
        <trans-unit id="26c47c5e3a4eb3183350fe5400257e4239b1726b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#builtin-tests&quot;&gt;List of Builtin Tests&lt;/a&gt; below describes all the builtin tests.</source>
          <target state="translated">以下の組み込みテストの&lt;a href=&quot;#builtin-tests&quot;&gt;リストは、&lt;/a&gt;すべての組み込みテストについて説明しています。</target>
        </trans-unit>
        <trans-unit id="3dd0889fb229de67aaeda1fb66786eafe030fb0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Environment&lt;/code&gt; that created the bucket.</source>
          <target state="translated">&lt;code&gt;Environment&lt;/code&gt; バケットを作成しました。</target>
        </trans-unit>
        <trans-unit id="4e49c4c3d92cccb91008892e6613dedf5821f73c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;else&lt;/code&gt; part is optional. If not provided, the else block implicitly evaluates into an &lt;code&gt;Undefined&lt;/code&gt; object (regardless of what &lt;code&gt;undefined&lt;/code&gt; in the environment is set to):</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; 部分はオプションです。指定しない場合、elseブロックは暗黙的に &lt;code&gt;Undefined&lt;/code&gt; オブジェクトに評価されます（環境で &lt;code&gt;undefined&lt;/code&gt; が何に設定されているかに関係なく）。</target>
        </trans-unit>
        <trans-unit id="17bcb404299aa7a152b80fc3c09624483da811b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enabled_extensions&lt;/code&gt; is an iterable of all the extensions that autoescaping should be enabled for. Likewise &lt;code&gt;disabled_extensions&lt;/code&gt; is a list of all templates it should be disabled for. If a template is loaded from a string then the default from &lt;code&gt;default_for_string&lt;/code&gt; is used. If nothing matches then the initial value of autoescaping is set to the value of &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enabled_extensions&lt;/code&gt; は自動エスケープがために有効にする必要があるすべての拡張機能の反復可能です。同様に、 &lt;code&gt;disabled_extensions&lt;/code&gt; は、無効にする必要があるすべてのテンプレートのリストです。テンプレートが文字列からロードされる場合、 &lt;code&gt;default_for_string&lt;/code&gt; のデフォルトが使用されます。一致するものがない場合、自動エスケープの初期値は &lt;code&gt;default&lt;/code&gt; の値に設定されます。</target>
        </trans-unit>
        <trans-unit id="b8dd9ca7742209b96a8fcb0d5037f87dbb0827b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; tag can be used to extend one template from another. You can have multiple &lt;code&gt;extends&lt;/code&gt; tags in a file, but only one of them may be executed at a time.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; タグは、から別のテンプレートを拡張するために使用することができます。1つのファイルに複数の &lt;code&gt;extends&lt;/code&gt; タグを含めることができますが、一度に実行できるのはそのうちの1つだけです。</target>
        </trans-unit>
        <trans-unit id="4a84343788646aec8a30c760130c5e7402a1a51d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_gettext_translations&lt;/code&gt; function would return the translator for the current configuration, for example by using &lt;code&gt;gettext.find&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get_gettext_translations&lt;/code&gt; の機能を使用することによって、たとえば、現在のコンフィギュレーションのためのトランスレータを返します &lt;code&gt;gettext.find&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="599099681c6ed728ab0bb6cffdb85eacab0a4c6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;globals&lt;/code&gt; parameter can be used to provide template wide globals. These variables are available in the context at render time.</source>
          <target state="translated">&lt;code&gt;globals&lt;/code&gt; パラメータは、テンプレート広いグローバルを提供するために使用することができます。これらの変数は、レンダリング時にコンテキストで使用できます。</target>
        </trans-unit>
        <trans-unit id="5999bdc8136c78bfacf86f9dd0f415b3d2e6b67b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement in Jinja is comparable with the Python if statement. In the simplest form, you can use it to test if a variable is defined, not empty and not false:</source>
          <target state="translated">Jinjaの &lt;code&gt;if&lt;/code&gt; ステートメントはPythonのifステートメントに相当します。最も単純な形式では、これを使用して、変数が定義されているかどうか、空ではないか、falseではないかをテストできます。</target>
        </trans-unit>
        <trans-unit id="366dec165ec08c74d11e49511ae50479b104e71f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; tag is useful to include a template and return the rendered contents of that file into the current namespace:</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; たタグは、テンプレートが含まれており、現在の名前空間に、そのファイルのレンダリングされた内容を返すのに便利です。</target>
        </trans-unit>
        <trans-unit id="b33f0f5d4bf2fc3b14f6e107b8ec032109378905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; operators support negation using an infix notation, too: &lt;code&gt;foo is not bar&lt;/code&gt; and &lt;code&gt;foo not in bar&lt;/code&gt; instead of &lt;code&gt;not foo is bar&lt;/code&gt; and &lt;code&gt;not foo in bar&lt;/code&gt;. All other expressions require a prefix notation: &lt;code&gt;not (foo and bar).&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;is&lt;/code&gt; と &lt;code&gt;in&lt;/code&gt; も、オペレータ支援否定インフィックス表記法を使用して： &lt;code&gt;foo is not bar&lt;/code&gt; と &lt;code&gt;foo not in bar&lt;/code&gt; 代わりの &lt;code&gt;not foo is bar&lt;/code&gt; と &lt;code&gt;not foo in bar&lt;/code&gt; 。他のすべての式には、接頭辞表記が必要です： &lt;code&gt;not (foo and bar).&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d728c8cd0343816fb13d101f097a4e1f25cbb4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loop&lt;/code&gt; variable always refers to the closest (innermost) loop. If we have more than one level of loops, we can rebind the variable &lt;code&gt;loop&lt;/code&gt; by writing &lt;code&gt;{% set outer_loop = loop %}&lt;/code&gt; after the loop that we want to use recursively. Then, we can call it using &lt;code&gt;{{ outer_loop(&amp;hellip;) }}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;loop&lt;/code&gt; 変数は、常に、最も近い（最も内側の）ループを指します。ループのレベルが複数ある場合は、再帰的に使用するループの後に &lt;code&gt;{% set outer_loop = loop %}&lt;/code&gt; 書き込むことで、変数 &lt;code&gt;loop&lt;/code&gt; バインドできます。次に、 &lt;code&gt;{{ outer_loop(&amp;hellip;) }}&lt;/code&gt; を使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ffa20efc672eacd14a2f2adc36cbc34965d9712b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;navigation&lt;/code&gt; variable then contains the navigation HTML source.</source>
          <target state="translated">&lt;code&gt;navigation&lt;/code&gt; 変数は、ナビゲーションHTMLソースが含まれています。</target>
        </trans-unit>
        <trans-unit id="4e6ed810828757cf2dd487f3f6b9806147abe4ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngettext&lt;/code&gt; function&amp;rsquo;s format string automatically receives the count as a &lt;code&gt;num&lt;/code&gt; parameter in addition to the given parameters.</source>
          <target state="translated">&lt;code&gt;ngettext&lt;/code&gt; 関数のフォーマット文字列が自動的として、カウントを受信 &lt;code&gt;num&lt;/code&gt; 指定されたパラメータに加えて、パラメータ。</target>
        </trans-unit>
        <trans-unit id="0302aa60f48cff7cc2c0e880647661d53744883f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select_autoescape()&lt;/code&gt; function returns a function that works roughly like this:</source>
          <target state="translated">&lt;code&gt;select_autoescape()&lt;/code&gt; 関数は、おおよそ次のように動作機能を返します。</target>
        </trans-unit>
        <trans-unit id="b37dbe778de1195f08ba576f1d92197086c49dcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uptodatefunc&lt;/code&gt; is a function that is called if autoreload is enabled and has to return &lt;code&gt;True&lt;/code&gt; if the template is still up to date. For more details have a look at &lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt;&lt;code&gt;BaseLoader.get_source()&lt;/code&gt;&lt;/a&gt; which has the same return value.</source>
          <target state="translated">&lt;code&gt;uptodatefunc&lt;/code&gt; は、自動再が有効になっていて、返すために持っていた場合に呼び出される関数である &lt;code&gt;True&lt;/code&gt; のテンプレートが最新のままの場合。詳細については、同じ戻り値を持つ&lt;a href=&quot;#jinja2.BaseLoader.get_source&quot;&gt; &lt;code&gt;BaseLoader.get_source()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a6d02a71a36a2f87e3183f4d4f4bb5d25f9eb5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% extends %}&lt;/code&gt; tag is the key here. It tells the template engine that this template &amp;ldquo;extends&amp;rdquo; another template. When the template system evaluates this template, it first locates the parent. The extends tag should be the first tag in the template. Everything before it is printed out normally and may cause confusion. For details about this behavior and how to take advantage of it, see &lt;a href=&quot;../tricks/index#null-master-fallback&quot;&gt;Null-Master Fallback&lt;/a&gt;. Also a block will always be filled in regardless of whether the surrounding condition is evaluated to be true or false.</source>
          <target state="translated">&lt;code&gt;{% extends %}&lt;/code&gt; タグはここで重要です。このテンプレートが別のテンプレートを「拡張」することをテンプレートエンジンに通知します。テンプレートシステムがこのテンプレートを評価するとき、最初に親を見つけます。extendsタグは、テンプレートの最初のタグである必要があります。それが正常に印刷される前のすべては、混乱を引き起こす可能性があります。この動作とその利用方法の詳細については、&lt;a href=&quot;../tricks/index#null-master-fallback&quot;&gt;Null-Masterフォールバックを&lt;/a&gt;参照してください。また、周囲の条件が真であるか偽であるかに関わらず、ブロックは常に埋められます。</target>
        </trans-unit>
        <trans-unit id="d913a5da9e77f23f6dcfa3faec1b51cedf1a97a9" translate="yes" xml:space="preserve">
          <source>The AST (Abstract Syntax Tree) is used to represent a template after parsing. It&amp;rsquo;s build of nodes that the compiler then converts into executable Python code objects. Extensions that provide custom statements can return nodes to execute custom Python code.</source>
          <target state="translated">AST（抽象構文木）は、解析後のテンプレートを表すために使用されます。コンパイラが実行可能なPythonコードオブジェクトに変換するのはノードのビルドです。カスタムステートメントを提供する拡張機能は、ノードを返してカスタムPythonコードを実行できます。</target>
        </trans-unit>
        <trans-unit id="26a1adaa03161aa757dfdd7900a0e22880fc1a32" translate="yes" xml:space="preserve">
          <source>The Context</source>
          <target state="translated">文脈</target>
        </trans-unit>
        <trans-unit id="69c42690226db8df149120d42a1f2c5aaa29e776" translate="yes" xml:space="preserve">
          <source>The Global Namespace</source>
          <target state="translated">グローバルネームスペース</target>
        </trans-unit>
        <trans-unit id="f27e721e45fb30d7e4f7dba9bf5ff8a6c84d97fd" translate="yes" xml:space="preserve">
          <source>The Jinja &lt;a href=&quot;#jinja2.Markup&quot;&gt;&lt;code&gt;Markup&lt;/code&gt;&lt;/a&gt; class is compatible with at least Pylons and Genshi. It&amp;rsquo;s expected that more template engines and framework will pick up the &lt;code&gt;__html__&lt;/code&gt; concept soon.</source>
          <target state="translated">Jinja &lt;a href=&quot;#jinja2.Markup&quot;&gt; &lt;code&gt;Markup&lt;/code&gt; &lt;/a&gt;クラスは、少なくともPylonsおよびGenshiと互換性があります。より多くのテンプレートエンジンとフレームワークがまもなく &lt;code&gt;__html__&lt;/code&gt; の概念を採用することが期待されています。</target>
        </trans-unit>
        <trans-unit id="150719ffc85cbf268af559b6a03ed0a69dde0a44" translate="yes" xml:space="preserve">
          <source>The Jinja sandbox alone is no solution for perfect security. Especially for web applications you have to keep in mind that users may create templates with arbitrary HTML in so it&amp;rsquo;s crucial to ensure that (if you are running multiple users on the same server) they can&amp;rsquo;t harm each other via JavaScript insertions and much more.</source>
          <target state="translated">Jinjaサンドボックスだけでは完全なセキュリティのソリューションはありません。特にWebアプリケーションの場合、ユーザーが任意のHTMLを使用してテンプレートを作成する可能性があるため、（同じサーバーで複数のユーザーを実行している場合）JavaScriptの挿入などによって相互に害を及ぼさないようにすることが重要です。 。</target>
        </trans-unit>
        <trans-unit id="1a5d7cf8bbf87a32102267af865dfa4fdcd6e698" translate="yes" xml:space="preserve">
          <source>The Jinja sandbox can be used to evaluate untrusted code. Access to unsafe attributes and methods is prohibited.</source>
          <target state="translated">Jinjaサンドボックスは、信頼されていないコードを評価するために使用することができます。安全でない属性やメソッドへのアクセスは禁止されています。</target>
        </trans-unit>
        <trans-unit id="ed954408c9d4a41c45a4dcaa3a3a3a8718c160f0" translate="yes" xml:space="preserve">
          <source>The Meta API</source>
          <target state="translated">メタAPI</target>
        </trans-unit>
        <trans-unit id="5287a865d4fa94f0799eb0a7da6e2b9b4dd0adb8" translate="yes" xml:space="preserve">
          <source>The advantage is that the special &lt;code&gt;loop&lt;/code&gt; variable will count correctly; thus not counting the users not iterated over.</source>
          <target state="translated">利点は、特別な &lt;code&gt;loop&lt;/code&gt; 変数が正しくカウントされることです。したがって、繰り返されなかったユーザーはカウントされません。</target>
        </trans-unit>
        <trans-unit id="736d2d1721db942946aa8e127b1eb6e7d460273f" translate="yes" xml:space="preserve">
          <source>The advantages of newstyle gettext are:</source>
          <target state="translated">newstyle gettextの利点は</target>
        </trans-unit>
        <trans-unit id="87efc1e54ce1f52a50b83bbd04a521f6901e9b46" translate="yes" xml:space="preserve">
          <source>The basic usage is mapping on an attribute. Imagine you have a list of users but you are only interested in a list of usernames:</source>
          <target state="translated">基本的な使い方は、属性へのマッピングです。ユーザーのリストを持っているが、興味があるのはユーザー名のリストだけだと想像してください。</target>
        </trans-unit>
        <trans-unit id="bff44c963bb3f6873719d8ce14e4ea53977fd956" translate="yes" xml:space="preserve">
          <source>The buckets get an internal checksum from the cache assigned and use this to automatically reject outdated cache material. Individual bytecode cache subclasses don&amp;rsquo;t have to care about cache invalidation.</source>
          <target state="translated">バケットは、割り当てられたキャッシュから内部チェックサムを取得し、これを使用して古いキャッシュマテリアルを自動的に拒否します。個々のバイトコードキャッシュサブクラスは、キャッシュの無効化を気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="a5608d04a270e15af99edf5e181e96ed715fea38" translate="yes" xml:space="preserve">
          <source>The bytecode if it&amp;rsquo;s loaded, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ロードされている場合はバイトコード、それ以外の場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc2df87e0254a4efdaebd038f81bf9c427a285d9" translate="yes" xml:space="preserve">
          <source>The central template object. This class represents a compiled template and is used to evaluate it.</source>
          <target state="translated">中心となるテンプレートオブジェクトです。このクラスはコンパイルされたテンプレートを表し、それを評価するために使用されます。</target>
        </trans-unit>
        <trans-unit id="3b7f3e0dd2560db679b3671c38033127b206e3d9" translate="yes" xml:space="preserve">
          <source>The class used for code generation. This should not be changed in most cases, unless you need to modify the Python code a template compiles to.</source>
          <target state="translated">コード生成に使用されるクラス。テンプレートがコンパイルするPythonコードを変更する必要がない限り、ほとんどの場合、これは変更すべきではありません。</target>
        </trans-unit>
        <trans-unit id="12d066aa7be952b3983b512b482ef48cf851885a" translate="yes" xml:space="preserve">
          <source>The closest to regular Python behavior is the &lt;a href=&quot;#jinja2.StrictUndefined&quot;&gt;&lt;code&gt;StrictUndefined&lt;/code&gt;&lt;/a&gt; which disallows all operations beside testing if it&amp;rsquo;s an undefined object.</source>
          <target state="translated">通常のPythonの動作に最も近いのは、&lt;a href=&quot;#jinja2.StrictUndefined&quot;&gt; &lt;code&gt;StrictUndefined&lt;/code&gt; です。&lt;/a&gt;これは、未定義のオブジェクトである場合、テスト以外のすべての操作を禁止します。</target>
        </trans-unit>
        <trans-unit id="e0f53ba8611e7afc17680ade7ce14f2b65e2de9f" translate="yes" xml:space="preserve">
          <source>The compiled code uses &lt;code&gt;await&lt;/code&gt; for functions and attributes, and uses &lt;code&gt;async for&lt;/code&gt; loops. In order to support using both async and sync functions in this context, a small wrapper is placed around all calls and access, which add overhead compared to purely async code.</source>
          <target state="translated">コンパイルされたコードは、 &lt;code&gt;await&lt;/code&gt; for関数と属性を使用し、 &lt;code&gt;async for&lt;/code&gt; ループを使用します。このコンテキストで非同期関数と同期関数の両方の使用をサポートするために、すべての呼び出しとアクセスの周りに小さなラッパーが配置され、純粋な非同期コードと比較してオーバーヘッドが追加されます。</target>
        </trans-unit>
        <trans-unit id="29b4a98f72533773474b3d39ff1af16f71e06395" translate="yes" xml:space="preserve">
          <source>The context dictionary by the application with &lt;code&gt;markupsafe.Markup&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;markupsafe.Markup&lt;/code&gt; を使用したアプリケーションによるコンテキスト辞書</target>
        </trans-unit>
        <trans-unit id="fb1dec15b0e0384fef7019c2ece8b8f7ed0520b1" translate="yes" xml:space="preserve">
          <source>The context is immutable. Modifications on &lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;must not&lt;/strong&gt; happen and modifications on &lt;a href=&quot;#jinja2.runtime.Context.vars&quot;&gt;&lt;code&gt;vars&lt;/code&gt;&lt;/a&gt; are allowed from generated template code only. Template filters and global functions marked as &lt;code&gt;contextfunction()&lt;/code&gt;s get the active context passed as first argument and are allowed to access the context read-only.</source>
          <target state="translated">コンテキストは不変です。&lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt;変更&lt;strong&gt;は&lt;/strong&gt;発生して&lt;strong&gt;はならず&lt;/strong&gt;、&lt;a href=&quot;#jinja2.runtime.Context.vars&quot;&gt; &lt;code&gt;vars&lt;/code&gt; &lt;/a&gt;変更は生成されたテンプレートコードからのみ許可されます。 &lt;code&gt;contextfunction()&lt;/code&gt; としてマークされたテンプレートフィルターとグローバル関数は、最初の引数として渡されたアクティブコンテキストを取得し、読み取り専用のコンテキストへのアクセスを許可されます。</target>
        </trans-unit>
        <trans-unit id="a6022f899435435b552f81b479ed6b692bef8ba3" translate="yes" xml:space="preserve">
          <source>The context used for templates. This should not be changed in most cases, unless you need to modify internals of how template variables are handled. For details, see &lt;a href=&quot;#jinja2.runtime.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テンプレートに使用されるコンテキスト。テンプレート変数の処理方法の内部を変更する必要がない限り、これはほとんどの場合変更しないでください。詳細については、&lt;a href=&quot;#jinja2.runtime.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8711917870fdd214358e8183652ecbe7d4d65fbe" translate="yes" xml:space="preserve">
          <source>The core component of Jinja is the &lt;code&gt;Environment&lt;/code&gt;. It contains important shared variables like configuration, filters, tests, globals and others. Instances of this class may be modified if they are not shared and if no template was loaded so far. Modifications on environments after the first template was loaded will lead to surprising effects and undefined behavior.</source>
          <target state="translated">Jinjaのコアコンポーネントは &lt;code&gt;Environment&lt;/code&gt; です。これには、構成、フィルター、テスト、グローバルなどの重要な共有変数が含まれています。このクラスのインスタンスは、共有されておらず、これまでにテンプレートがロードされていない場合に変更される可能性があります。最初のテンプレートがロードされた後の環境の変更は、驚くべき効果と未定義の動作につながります。</target>
        </trans-unit>
        <trans-unit id="d371375ef8232715590db451d94334903d523eee" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#eval-context&quot;&gt;Evaluation Context&lt;/a&gt;.</source>
          <target state="translated">現在の&lt;a href=&quot;#eval-context&quot;&gt;評価コンテキスト&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b2ac6a8328ff36b6fb9ed70b6b2a84df36111e3" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#jinja2.lexer.Token&quot;&gt;&lt;code&gt;Token&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の&lt;a href=&quot;#jinja2.lexer.Token&quot;&gt; &lt;code&gt;Token&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e16e18e16514057a777210e2d9f7bd1ee8183de" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt;&lt;code&gt;TokenStream&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">現在の&lt;a href=&quot;#jinja2.lexer.TokenStream&quot;&gt; &lt;code&gt;TokenStream&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b75761bd813f44788ddffff0dbe11c55ec23f29c" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (0 indexed)</source>
          <target state="translated">ループの現在の繰り返し。(0 インデックス付き)</target>
        </trans-unit>
        <trans-unit id="2ae957376dd8bf52f87cded346b35444762a2644" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (1 indexed)</source>
          <target state="translated">ループの現在の繰り返し。(1 インデックス付き)</target>
        </trans-unit>
        <trans-unit id="bf826a43a69849e145d53d3a2f0187acc2191d6b" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; renders templates to strings. With &lt;a href=&quot;#jinja2.nativetypes.NativeEnvironment&quot;&gt;&lt;code&gt;NativeEnvironment&lt;/code&gt;&lt;/a&gt;, rendering a template produces a native Python type. This is useful if you are using Jinja outside the context of creating text files. For example, your code may have an intermediate step where users may use templates to define values that will then be passed to a traditional string environment.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;../api/index#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;は、テンプレートが文字列にレンダリングされます。&lt;a href=&quot;#jinja2.nativetypes.NativeEnvironment&quot;&gt; &lt;code&gt;NativeEnvironment&lt;/code&gt; &lt;/a&gt;、テンプレートをレンダリングすると、ネイティブのPythonの種類を生成します。これは、テキストファイルを作成するコンテキスト外でJinjaを使用している場合に役立ちます。たとえば、コードに中間ステップがあり、ユーザーがテンプレートを使用して値を定義し、それを従来の文字列環境に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b98e2be861d72a1626d76b347260d10eb2ed5a10" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt;&lt;code&gt;SandboxedEnvironment.call_binop&lt;/code&gt;&lt;/a&gt; will use the &lt;code&gt;SandboxedEnvironment.binop_table&lt;/code&gt; to translate operator symbols into callbacks performing the default operator behavior.</source>
          <target state="translated">デフォルトの実装&lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt; &lt;code&gt;SandboxedEnvironment.call_binop&lt;/code&gt; が&lt;/a&gt;使用されます &lt;code&gt;SandboxedEnvironment.binop_table&lt;/code&gt; をデフォルトのオペレータの動作を実行するコールバックにオペレータのシンボルを変換します。</target>
        </trans-unit>
        <trans-unit id="eaa2af89ce4d33da9e1ed01fe5668fe0e9e46b69" translate="yes" xml:space="preserve">
          <source>The default leeway on newer Jinja versions is 5 and was 0 before but can be reconfigured globally.</source>
          <target state="translated">新しいバージョンのJinjaのデフォルトの余裕は5で、以前は0でしたが、グローバルに再設定することができます。</target>
        </trans-unit>
        <trans-unit id="34f35de9ff44f137cbb709b07c36016b7cf34122" translate="yes" xml:space="preserve">
          <source>The default operation form the operator table corresponds to the builtin function. Intercepted calls are always slower than the native operator call, so make sure only to intercept the ones you are interested in.</source>
          <target state="translated">演算子テーブルのデフォルトの操作形式は、組み込み関数に対応しています。傍受された呼び出しは常にネイティブの演算子呼び出しよりも遅いので、興味のあるものだけを傍受するようにしてください。</target>
        </trans-unit>
        <trans-unit id="7f2dd6c876af848c2f5b56e396ee87d98c751a94" translate="yes" xml:space="preserve">
          <source>The default parsing mode is a full tuple. If &lt;code&gt;simplified&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; only names and literals are parsed. The &lt;code&gt;no_condexpr&lt;/code&gt; parameter is forwarded to &lt;a href=&quot;#jinja2.parser.Parser.parse_expression&quot;&gt;&lt;code&gt;parse_expression()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトの解析モードはフルタプルです。場合 &lt;code&gt;simplified&lt;/code&gt; ある &lt;code&gt;True&lt;/code&gt; 名前だけとリテラルが解析されます。 &lt;code&gt;no_condexpr&lt;/code&gt; パラメータが転送され&lt;a href=&quot;#jinja2.parser.Parser.parse_expression&quot;&gt; &lt;code&gt;parse_expression()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ce1d381f32f7864d2c8ccf12ea6df0f659fa1bee" translate="yes" xml:space="preserve">
          <source>The default target that is issued for links from the &lt;code&gt;urlize&lt;/code&gt; filter if no other target is defined by the call explicitly.</source>
          <target state="translated">呼び出しによって他のターゲットが明示的に定義されていない場合に、 &lt;code&gt;urlize&lt;/code&gt; フィルターからのリンクに対して発行されるデフォルトのターゲット。</target>
        </trans-unit>
        <trans-unit id="a7d5e40c3ac1512432712a1722dc16ea7431573a" translate="yes" xml:space="preserve">
          <source>The default undefined type. This undefined type can be printed and iterated over, but every other access will raise an &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">デフォルトの未定義タイプ。この未定義の型は印刷して繰り返すことができますが、他のすべてのアクセスでは&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; が発生し&lt;/a&gt;ます：</target>
        </trans-unit>
        <trans-unit id="d2cd2e2a7a7f1e40090a63c8fdf27ef3e4842693" translate="yes" xml:space="preserve">
          <source>The dict with the globals of that template. It&amp;rsquo;s unsafe to modify this dict as it may be shared with other templates or the environment that loaded the template.</source>
          <target state="translated">そのテンプレートのグローバルを使用した辞書。このdictは、他のテンプレートまたはテンプレートをロードした環境と共有される可能性があるため、変更するのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="68a4a6ed4ea89e348554a61a10fb6f0776725e15" translate="yes" xml:space="preserve">
          <source>The easiest and most flexible way to access a template&amp;rsquo;s variables and macros is to import the whole template module into a variable. That way, you can access the attributes:</source>
          <target state="translated">テンプレートの変数とマクロにアクセスする最も簡単で柔軟な方法は、テンプレートモジュール全体を変数にインポートすることです。このようにして、属性にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3095ccc2433915627c21c05a31a3e27795f5219c" translate="yes" xml:space="preserve">
          <source>The easiest way to output a literal variable delimiter (&lt;code&gt;{{&lt;/code&gt;) is by using a variable expression:</source>
          <target state="translated">リテラル変数区切り文字（ &lt;code&gt;{{&lt;/code&gt; ）を出力する最も簡単な方法は、変数式を使用することです。</target>
        </trans-unit>
        <trans-unit id="8dcd7913c85be80e0a2d9a6175f4f6619317ee14" translate="yes" xml:space="preserve">
          <source>The environment that loaded the template.</source>
          <target state="translated">テンプレートを読み込んだ環境</target>
        </trans-unit>
        <trans-unit id="e7425836628b29faf86a857ad78d9f8bd20fb1f4" translate="yes" xml:space="preserve">
          <source>The error message as utf-8 bytestring.</source>
          <target state="translated">エラーメッセージは utf-8 バイト文字列です。</target>
        </trans-unit>
        <trans-unit id="47ab179d684b86632997e85d2ed9908c54548766" translate="yes" xml:space="preserve">
          <source>The evaluation context (short eval context or eval ctx) is a new object introduced in Jinja 2.4 that makes it possible to activate and deactivate compiled features at runtime.</source>
          <target state="translated">評価コンテキスト(evalコンテキストまたはeval ctx)は、Jinja 2.4で導入された新しいオブジェクトで、実行時にコンパイルされた機能を有効化したり無効化したりすることができます。</target>
        </trans-unit>
        <trans-unit id="69d395cfa78c48a832b8e3e50867b6c3d0dff828" translate="yes" xml:space="preserve">
          <source>The evaluation context must not be modified at runtime. Modifications must only happen with a &lt;a href=&quot;../extensions/index#jinja2.nodes.EvalContextModifier&quot;&gt;&lt;code&gt;nodes.EvalContextModifier&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../extensions/index#jinja2.nodes.ScopedEvalContextModifier&quot;&gt;&lt;code&gt;nodes.ScopedEvalContextModifier&lt;/code&gt;&lt;/a&gt; from an extension, not on the eval context object itself.</source>
          <target state="translated">評価コンテキストは実行時に変更しないでください。変更は、evalコンテキストオブジェクト自体ではなく、拡張機能からの&lt;a href=&quot;../extensions/index#jinja2.nodes.EvalContextModifier&quot;&gt; &lt;code&gt;nodes.EvalContextModifier&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../extensions/index#jinja2.nodes.ScopedEvalContextModifier&quot;&gt; &lt;code&gt;nodes.ScopedEvalContextModifier&lt;/code&gt; で&lt;/a&gt;のみ発生する必要があります。</target>
        </trans-unit>
        <trans-unit id="a7d2ea552d7663092e97f44280401a48722db025" translate="yes" xml:space="preserve">
          <source>The exception that the undefined object wants to raise. This is usually one of &lt;a href=&quot;#jinja2.UndefinedError&quot;&gt;&lt;code&gt;UndefinedError&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;SecurityError&lt;/code&gt;.</source>
          <target state="translated">未定義のオブジェクトが発生させたい例外。これは通常、&lt;a href=&quot;#jinja2.UndefinedError&quot;&gt; &lt;code&gt;UndefinedError&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;SecurityError&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="db7dacdb6ffd39a044254a2959b30d9ff5228c7e" translate="yes" xml:space="preserve">
          <source>The filename of the template depends on the template loader. For example, the &lt;code&gt;FileSystemLoader&lt;/code&gt; allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</source>
          <target state="translated">テンプレートのファイル名は、テンプレートローダーによって異なります。たとえば、 &lt;code&gt;FileSystemLoader&lt;/code&gt; を使用すると、ファイル名を指定して他のテンプレートにアクセスできます。スラッシュを使用してサブディレクトリのテンプレートにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="8cb6f2cd87006e17d7a1ae5d2fa0b46d0348951c" translate="yes" xml:space="preserve">
          <source>The filename of the template on the file system if it was loaded from there. Otherwise this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">そこからロードされた場合のファイルシステム上のテンプレートのファイル名。それ以外の場合、これは &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8081ece21de84a94852da0fdf9db72bcf337583e" translate="yes" xml:space="preserve">
          <source>The filename of the template the parser processes. This is &lt;strong&gt;not&lt;/strong&gt; the load name of the template. For the load name see &lt;a href=&quot;#jinja2.parser.Parser.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. For templates that were not loaded form the file system this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">パーサーが処理するテンプレートのファイル名。これは、テンプレートのロード名ではあり&lt;strong&gt;ません&lt;/strong&gt;。ロード名を参照&lt;a href=&quot;#jinja2.parser.Parser.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;。ファイルシステムからロードされなかったテンプレートの場合、これは「 &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5b15977d905ddb15df267aafa1ab07abfd258177" translate="yes" xml:space="preserve">
          <source>The filename that loaded the template as bytestring in the encoding of the file system (most likely utf-8 or mbcs on Windows systems).</source>
          <target state="translated">テンプレートをファイルシステムのエンコーディングでバイト文字列としてロードしたファイル名(Windowsシステムではutf-8かmbcsが最も多いでしょう)。</target>
        </trans-unit>
        <trans-unit id="2b21c9b1ed5a10d4ce36fceb3c5af486447288ec" translate="yes" xml:space="preserve">
          <source>The following binary operators are interceptable: &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;**&lt;/code&gt;</source>
          <target state="translated">次の二項演算子はインターセプト可能です： &lt;code&gt;//&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、および &lt;code&gt;**&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ade619698ea50e66f7022505f5a5bd23cebdaa1" translate="yes" xml:space="preserve">
          <source>The following characters are escaped in strings:</source>
          <target state="translated">文字列では以下の文字がエスケープされています。</target>
        </trans-unit>
        <trans-unit id="e7ac21448051637aacd6720fe772fb364c4435fb" translate="yes" xml:space="preserve">
          <source>The following example demonstrates using &lt;a href=&quot;#jinja2.ext.Extension.filter_stream&quot;&gt;&lt;code&gt;Extension.filter_stream()&lt;/code&gt;&lt;/a&gt; to parse calls to the &lt;code&gt;_()&lt;/code&gt; gettext function inline with static data without needing Jinja blocks.</source>
          <target state="translated">次の例は、&lt;a href=&quot;#jinja2.ext.Extension.filter_stream&quot;&gt; &lt;code&gt;Extension.filter_stream()&lt;/code&gt; &lt;/a&gt;を使用して、Jinjaブロックを必要とせずに、静的データとインラインで &lt;code&gt;_()&lt;/code&gt; gettext関数への呼び出しを解析する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4a87e51e4522eb4bd9cfaaaeb8e5be6c25842d70" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;cache&lt;/code&gt; tag for Jinja by using the &lt;a href=&quot;https://github.com/pallets/cachelib&quot;&gt;cachelib&lt;/a&gt; library:</source>
          <target state="translated">次の例では、&lt;a href=&quot;https://github.com/pallets/cachelib&quot;&gt;cachelib&lt;/a&gt;ライブラリを使用してJinjaの &lt;code&gt;cache&lt;/code&gt; タグを実装しています。</target>
        </trans-unit>
        <trans-unit id="e996672cb06bdbf22a558a5cc269d9f373baee06" translate="yes" xml:space="preserve">
          <source>The following example implements a sitemap with recursive loops:</source>
          <target state="translated">次の例では、再帰的なループを持つサイトマップを実装しています。</target>
        </trans-unit>
        <trans-unit id="6a58881c27bb7da78f779f675f25c74e20b0110b" translate="yes" xml:space="preserve">
          <source>The following example shows the default configuration settings. An application developer can change the syntax configuration from &lt;code&gt;{% foo %}&lt;/code&gt; to &lt;code&gt;&amp;lt;% foo
%&amp;gt;&lt;/code&gt;, or something similar.</source>
          <target state="translated">次の例は、デフォルトの構成設定を示しています。アプリケーション開発者は、構文構成を &lt;code&gt;{% foo %}&lt;/code&gt; から &lt;code&gt;&amp;lt;% foo %&amp;gt;&lt;/code&gt; などに変更できます。</target>
        </trans-unit>
        <trans-unit id="80c9511ce64968437cf56c0c3d790911e17c0fe8" translate="yes" xml:space="preserve">
          <source>The following functions are available in the global scope by default:</source>
          <target state="translated">グローバルスコープでは、デフォルトで以下の関数が利用可能です。</target>
        </trans-unit>
        <trans-unit id="ccf21e46d858fdf4c8b46bffa2136dba2e0e956b" translate="yes" xml:space="preserve">
          <source>The following lines do the same thing:</source>
          <target state="translated">次のセリフも同じことをしています。</target>
        </trans-unit>
        <trans-unit id="5624ff6e094f4f44a1f06c18b4575617ab7845b0" translate="yes" xml:space="preserve">
          <source>The following operators are very useful but don&amp;rsquo;t fit into any of the other two categories:</source>
          <target state="translated">次の演算子は非常に便利ですが、他の2つのカテゴリのいずれにも当てはまりません。</target>
        </trans-unit>
        <trans-unit id="1eea7fb1654c61ba2a99ec8b871e696e46c6ea82" translate="yes" xml:space="preserve">
          <source>The following sections cover the built-in Jinja extensions that may be enabled by an application. An application could also provide further extensions not covered by this documentation; in which case there should be a separate document explaining said &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;extensions&lt;/a&gt;.</source>
          <target state="translated">次のセクションでは、アプリケーションによって有効になる可能性のある組み込みのJinja拡張機能について説明します。アプリケーションは、このドキュメントでカバーされていない追加の拡張機能を提供することもできます。その場合、上記の&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;拡張機能を&lt;/a&gt;説明する別のドキュメントが必要です。</target>
        </trans-unit>
        <trans-unit id="5c91e09470e7f6f30b48d7143b9a2f2b0b925f07" translate="yes" xml:space="preserve">
          <source>The following unary operators are interceptable: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">次の単項演算子は傍受可能です： &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="670be3658dff2478a5a53108f348b8013fd74c27" translate="yes" xml:space="preserve">
          <source>The for loop. &lt;code&gt;target&lt;/code&gt; is the target for the iteration (usually a &lt;a href=&quot;#jinja2.nodes.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#jinja2.nodes.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;), &lt;code&gt;iter&lt;/code&gt; the iterable. &lt;code&gt;body&lt;/code&gt; is a list of nodes that are used as loop-body, and &lt;code&gt;else_&lt;/code&gt; a list of nodes for the &lt;code&gt;else&lt;/code&gt; block. If no else node exists it has to be an empty list.</source>
          <target state="translated">forループ。 &lt;code&gt;target&lt;/code&gt; 反復（通常のための標的である&lt;a href=&quot;#jinja2.nodes.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#jinja2.nodes.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt;） &lt;code&gt;iter&lt;/code&gt; イテラブル。 &lt;code&gt;body&lt;/code&gt; は、loop-bodyとして使用されるノードのリストであり、 &lt;code&gt;else_&lt;/code&gt; は &lt;code&gt;else&lt;/code&gt; ブロックのノードのリストです。他にノードが存在しない場合は、空のリストである必要があります。</target>
        </trans-unit>
        <trans-unit id="a1400a0ca4193906fc5a452d03ce4cac12168b71" translate="yes" xml:space="preserve">
          <source>The general syntax is &lt;code&gt;&amp;lt;do something&amp;gt; if &amp;lt;something is true&amp;gt; else &amp;lt;do
something else&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">一般的な構文は &lt;code&gt;&amp;lt;do something&amp;gt; if &amp;lt;something is true&amp;gt; else &amp;lt;do something else&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b2417458654d0678657109be19d6d186876f9a27" translate="yes" xml:space="preserve">
          <source>The high-level API is the API you will use in the application to load and render Jinja templates. The &lt;a href=&quot;#low-level-api&quot;&gt;Low Level API&lt;/a&gt; on the other side is only useful if you want to dig deeper into Jinja or &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;develop extensions&lt;/a&gt;.</source>
          <target state="translated">高レベルAPIは、Jinjaテンプレートをロードおよびレンダリングするためにアプリケーションで使用するAPIです。反対側の&lt;a href=&quot;#low-level-api&quot;&gt;低レベルAPI&lt;/a&gt;は、Jinjaをさらに深く掘り下げたり&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;、拡張機能を開発し&lt;/a&gt;たりする場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="0261ad5ed1f1b7cf1658b911505f5e938b570c55" translate="yes" xml:space="preserve">
          <source>The i18n extension can be used in combination with &lt;a href=&quot;https://docs.python.org/3/library/gettext.html&quot;&gt;gettext&lt;/a&gt; or &lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;. When it&amp;rsquo;s enabled, Jinja provides a &lt;code&gt;trans&lt;/code&gt; statement that marks a block as translatable and calls &lt;code&gt;gettext&lt;/code&gt;.</source>
          <target state="translated">i18n拡張機能は、&lt;a href=&quot;https://docs.python.org/3/library/gettext.html&quot;&gt;gettext&lt;/a&gt;または&lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;と組み合わせて使用​​できます。有効にすると、Jinjaは、ブロックを翻訳可能としてマークし、 &lt;code&gt;gettext&lt;/code&gt; を呼び出す &lt;code&gt;trans&lt;/code&gt; ステートメントを提供します。</target>
        </trans-unit>
        <trans-unit id="c98a4fe9e7867cb290ccd82ecd5b2dd7966e0bcc" translate="yes" xml:space="preserve">
          <source>The identifier of the extension. This is always the true import name of the extension class and must not be changed.</source>
          <target state="translated">拡張機能の識別子。これは常に拡張クラスの真のインポート名であり、変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="70c9c9f8270ba3928e4ca1518dc92222068a74df" translate="yes" xml:space="preserve">
          <source>The included template &lt;code&gt;render_box.html&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; able to access &lt;code&gt;box&lt;/code&gt; in Jinja 2.0. As of Jinja 2.1, &lt;code&gt;render_box.html&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; able to do so.</source>
          <target state="translated">含まれているテンプレート &lt;code&gt;render_box.html&lt;/code&gt; は、Jinja2.0の &lt;code&gt;box&lt;/code&gt; にアクセスでき&lt;em&gt;ません&lt;/em&gt;。Jinja 2.1の時点で、 &lt;code&gt;render_box.html&lt;/code&gt; &lt;em&gt;はそうする&lt;/em&gt;こと&lt;em&gt;が&lt;/em&gt;できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="88f195dce518ea4ecbb39ddebc12a094f0be8ccd" translate="yes" xml:space="preserve">
          <source>The indent parameter can be used to enable pretty printing. Set it to the number of spaces that the structures should be indented with.</source>
          <target state="translated">インデントパラメータを使用して、きれいな印刷を可能にすることができます。構造体がインデントされるスペースの数を設定します。</target>
        </trans-unit>
        <trans-unit id="15a2d20b9ebcda593a717193d9d0f4a07597d0f5" translate="yes" xml:space="preserve">
          <source>The information about the safety of a variable is very fragile. It could happen that by coercing safe and unsafe values, the return value is double-escaped HTML.</source>
          <target state="translated">変数の安全性に関する情報は非常に脆弱です。安全な値と安全でない値を強制することで、戻り値がダブルエスケープされたHTMLになってしまうということが起こり得るのです。</target>
        </trans-unit>
        <trans-unit id="95b06f5cb3f330543b41348d11441ab0eb986f63" translate="yes" xml:space="preserve">
          <source>The item from the following iteration of the loop. Undefined during the last iteration.</source>
          <target state="translated">ループの次の反復からの項目。最後の反復の間は未定義。</target>
        </trans-unit>
        <trans-unit id="6f313eb98892b99acece93872cd12684a3c5c99d" translate="yes" xml:space="preserve">
          <source>The item from the previous iteration of the loop. Undefined during the first iteration.</source>
          <target state="translated">ループの前の反復の項目。最初の反復の間は未定義。</target>
        </trans-unit>
        <trans-unit id="659ca721cd45dacdf0ccae1bde53add4ed576c51" translate="yes" xml:space="preserve">
          <source>The last item in the tuple is the &lt;code&gt;uptodate&lt;/code&gt; function. If auto reloading is enabled it&amp;rsquo;s always called to check if the template changed. No arguments are passed so the function must store the old state somewhere (for example in a closure). If it returns &lt;code&gt;False&lt;/code&gt; the template will be reloaded.</source>
          <target state="translated">タプルの最後の項目は、 &lt;code&gt;uptodate&lt;/code&gt; 機能です。自動再読み込みが有効になっている場合は、テンプレートが変更されたかどうかを確認するために常に呼び出されます。引数は渡されないため、関数は古い状態をどこかに（たとえばクロージャに）格納する必要があります。 &lt;code&gt;False&lt;/code&gt; が返された場合、テンプレートが再ロードされます。</target>
        </trans-unit>
        <trans-unit id="47a4de44f584bba3ae597150fb1dd09a89ff6aec" translate="yes" xml:space="preserve">
          <source>The layout template can then access &lt;code&gt;active_page&lt;/code&gt;. Additionally it makes sense to define a default for that variable:</source>
          <target state="translated">その後、レイアウトテンプレートは &lt;code&gt;active_page&lt;/code&gt; にアクセスできます。さらに、その変数のデフォルトを定義することは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="b1755dba3c26e3dc145e01e61d95c10805b9a0a1" translate="yes" xml:space="preserve">
          <source>The line number of the token</source>
          <target state="translated">トークンの行番号</target>
        </trans-unit>
        <trans-unit id="f0678a09bc8b4192ebe0dd659ae3d55642d1d433" translate="yes" xml:space="preserve">
          <source>The line number where the error occurred</source>
          <target state="translated">エラーが発生した行番号</target>
        </trans-unit>
        <trans-unit id="382db9bf871dd58c466bd8de5298c2c0cc1ef91e" translate="yes" xml:space="preserve">
          <source>The line statement prefix can appear anywhere on the line as long as no text precedes it. For better readability, statements that start a block (such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt; etc.) may end with a colon:</source>
          <target state="translated">行ステートメントのプレフィックスは、前にテキストがない限り、行のどこにでも表示できます。読みやすくするために、ブロックを開始するステートメント（ &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;elif&lt;/code&gt; など）はコロンで終了する場合があります。</target>
        </trans-unit>
        <trans-unit id="180ae1d5993d4f9246835f7d809bbd888fcd8bf8" translate="yes" xml:space="preserve">
          <source>The list below describes all nodes that are currently available. The AST may change between Jinja versions but will stay backwards compatible.</source>
          <target state="translated">以下のリストには、現在利用可能なすべてのノードが記載されています。ASTはJinjaのバージョンによって変更されることがありますが、下位互換性は維持されます。</target>
        </trans-unit>
        <trans-unit id="4c5d3e1830ef26bd2cf14c3c785debdac55a9344" translate="yes" xml:space="preserve">
          <source>The list of names may contain tuples if aliases are wanted.</source>
          <target state="translated">エイリアスが必要な場合、名前のリストにはタプルが含まれることがあります。</target>
        </trans-unit>
        <trans-unit id="3d99b5c4b23df9db398cb8ee6d04a6bc3d5a493b" translate="yes" xml:space="preserve">
          <source>The load name for the template as unicode string.</source>
          <target state="translated">テンプレートのロード名をUnicode文字列で指定します。</target>
        </trans-unit>
        <trans-unit id="e1902cd017a5283e81d1b3c21bb76123afbb4b93" translate="yes" xml:space="preserve">
          <source>The load name of the template owning this context.</source>
          <target state="translated">このコンテキストを所有するテンプレートのロード名。</target>
        </trans-unit>
        <trans-unit id="50d706829883b365e1f3c78f6c40ed0c82f2c83d" translate="yes" xml:space="preserve">
          <source>The load name of the template.</source>
          <target state="translated">テンプレートのロード名。</target>
        </trans-unit>
        <trans-unit id="b1ffd4cabf52909285ff93e4d21db2b7cabb22eb" translate="yes" xml:space="preserve">
          <source>The loader takes the path to the templates as string, or if multiple locations are wanted a list of them which is then looked up in the given order:</source>
          <target state="translated">ローダはテンプレートへのパスを文字列として受け取り、複数の場所が必要な場合はそれらのリストを指定した順番で検索します。</target>
        </trans-unit>
        <trans-unit id="b180170f1bf3e7004841c1694c4e54f78a5b9a68" translate="yes" xml:space="preserve">
          <source>The loading name of the template. If the template was loaded from a string this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">テンプレートのロード名。テンプレートが文字列からロードされた場合、これは &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0cfd896bf0217417efeee07bd8af76989a8ae6fd" translate="yes" xml:space="preserve">
          <source>The low level API exposes functionality that can be useful to understand some implementation details, debugging purposes or advanced &lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;extension&lt;/a&gt; techniques. Unless you know exactly what you are doing we don&amp;rsquo;t recommend using any of those.</source>
          <target state="translated">低レベルAPIは、実装の詳細、デバッグの目的、または高度な&lt;a href=&quot;../extensions/index#jinja-extensions&quot;&gt;拡張&lt;/a&gt;技術を理解するのに役立つ機能を公開します。自分が何をしているのかを正確に理解していない限り、これらのいずれかを使用することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="57a60d3aded6b846b7cee51df2f64de9442ca56b" translate="yes" xml:space="preserve">
          <source>The low-level API is fragile. Future Jinja versions will try not to change it in a backwards incompatible way but modifications in the Jinja core may shine through. For example if Jinja introduces a new AST node in later versions that may be returned by &lt;a href=&quot;#jinja2.Environment.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">低レベルのAPIは壊れやすいです。将来のJinjaバージョンは、後方互換性のない方法で変更しないようにしますが、Jinjaコアの変更が透けて見える可能性があります。たとえば、Jinjaが新しいASTノードを新しいバージョンで導入した場合、&lt;a href=&quot;#jinja2.Environment.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt;によって返される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f82f42c3f34314cc429c18c317cbec01e1877920" translate="yes" xml:space="preserve">
          <source>The macro can then be called like a function in the namespace:</source>
          <target state="translated">マクロは、名前空間の関数のように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a90b8a2b7938d2f3e95bcc2b1bb371bcfa924807" translate="yes" xml:space="preserve">
          <source>The main purpose of this is to allow carrying a value from within a loop body to an outer scope. Initial values can be provided as a dict, as keyword arguments, or both (same behavior as Python&amp;rsquo;s &lt;code&gt;dict&lt;/code&gt; constructor):</source>
          <target state="translated">これの主な目的は、ループ本体内から外部スコープに値を運ぶことができるようにすることです。初期値は、dict、キーワード引数、またはその両方として提供できます（Pythonの &lt;code&gt;dict&lt;/code&gt; コンストラクターと同じ動作）。</target>
        </trans-unit>
        <trans-unit id="407ac5e6f92597fb2b9d940d8d1364f8102eaf7a" translate="yes" xml:space="preserve">
          <source>The meta API returns some information about abstract syntax trees that could help applications to implement more advanced template concepts. All the functions of the meta API operate on an abstract syntax tree as returned by the &lt;a href=&quot;#jinja2.Environment.parse&quot;&gt;&lt;code&gt;Environment.parse()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">メタAPIは、アプリケーションがより高度なテンプレートの概念を実装するのに役立つ抽象構文ツリーに関する情報を返します。メタAPIのすべての関数は、&lt;a href=&quot;#jinja2.Environment.parse&quot;&gt; &lt;code&gt;Environment.parse()&lt;/code&gt; &lt;/a&gt;メソッドによって返される抽象構文ツリーで動作します。</target>
        </trans-unit>
        <trans-unit id="8df74a91d97a92e95e6edb7f2ec5561d50b3c81d" translate="yes" xml:space="preserve">
          <source>The minimal interface for the client passed to the constructor is this:</source>
          <target state="translated">コンストラクタに渡されるクライアントの最低限のインターフェイスはこれです。</target>
        </trans-unit>
        <trans-unit id="665041183d686868a8d094b96aa750333e0dd03e" translate="yes" xml:space="preserve">
          <source>The most basic way to create a template and render it is through &lt;a href=&quot;../api/index#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;. This however is not the recommended way to work with it if your templates are not loaded from strings but the file system or another data source:</source>
          <target state="translated">最も基本的な方法は、テンプレートを作成し、それを介して行われ、レンダリングする&lt;a href=&quot;../api/index#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;。ただし、テンプレートが文字列からではなく、ファイルシステムまたは別のデータソースからロードされている場合、これは推奨される方法ではありません。</target>
        </trans-unit>
        <trans-unit id="6e39220a8bf86c15cedfa80cc4294e7bf97ec2cf" translate="yes" xml:space="preserve">
          <source>The most common way to create an undefined object is by providing a name only:</source>
          <target state="translated">未定義のオブジェクトを作成する最も一般的な方法は、名前だけを提供することです。</target>
        </trans-unit>
        <trans-unit id="9831b642b4a7dbda4200272804a99e23253a74b8" translate="yes" xml:space="preserve">
          <source>The most powerful part of Jinja is template inheritance. Template inheritance allows you to build a base &amp;ldquo;skeleton&amp;rdquo; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="translated">Jinjaの最も強力な部分は、テンプレートの継承です。テンプレートの継承により、サイトのすべての一般的な要素を含み、子テンプレートがオーバーライドできる&lt;strong&gt;ブロック&lt;/strong&gt;を定義する基本の「スケルトン」テンプレートを構築できます。</target>
        </trans-unit>
        <trans-unit id="7885a72ddc63602ef6fc68bec1a7c227153eb9af" translate="yes" xml:space="preserve">
          <source>The name for the undefined variable / attribute or just &lt;code&gt;None&lt;/code&gt; if no such information exists.</source>
          <target state="translated">未定義の変数/属性の名前。そのような情報が存在しない場合は &lt;code&gt;None&lt;/code&gt; のみ。</target>
        </trans-unit>
        <trans-unit id="c0581a6ac4bbdb5f0b57512ae9be4a6afd373d90" translate="yes" xml:space="preserve">
          <source>The name of the macro. &lt;code&gt;{{ input.name }}&lt;/code&gt; will print &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="translated">マクロの名前。 &lt;code&gt;{{ input.name }}&lt;/code&gt; は &lt;code&gt;input&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="5dba4add6c1d37baabe1ef27d0031f139f4d5aa6" translate="yes" xml:space="preserve">
          <source>The number of items in the sequence.</source>
          <target state="translated">シーケンスに含まれる項目の数。</target>
        </trans-unit>
        <trans-unit id="f55c0141f00d125146e625b42450cdd91a9bd7e1" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0 indexed)</source>
          <target state="translated">ループの終了からの反復回数(インデックスは0)を指定します。</target>
        </trans-unit>
        <trans-unit id="e4908293726276d229be0d3d16697517841de110" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1 indexed)</source>
          <target state="translated">ループの終了からの反復回数(インデックスは1回</target>
        </trans-unit>
        <trans-unit id="92834281653e0e4d33cd0571d8a3404a0fbd7790" translate="yes" xml:space="preserve">
          <source>The other arguments to the constructor are the prefix for all keys that is added before the actual cache key and the timeout for the bytecode in the cache system. We recommend a high (or no) timeout.</source>
          <target state="translated">コンストラクタへの他の引数は、実際のキャッシュキーの前に追加されるすべてのキーのプレフィックスと、キャッシュシステム内のバイトコードのタイムアウトです。タイムアウトは高い (あるいは高くない)ことを推奨します。</target>
        </trans-unit>
        <trans-unit id="c14045f4a995136c1bd158fb3699af53cb3e2290" translate="yes" xml:space="preserve">
          <source>The parser passed to &lt;a href=&quot;#jinja2.ext.Extension.parse&quot;&gt;&lt;code&gt;Extension.parse()&lt;/code&gt;&lt;/a&gt; provides ways to parse expressions of different types. The following methods may be used by extensions:</source>
          <target state="translated">&lt;a href=&quot;#jinja2.ext.Extension.parse&quot;&gt; &lt;code&gt;Extension.parse()&lt;/code&gt; に&lt;/a&gt;渡されるパーサーは、さまざまなタイプの式を解析する方法を提供します。次のメソッドは、拡張機能で使用できます。</target>
        </trans-unit>
        <trans-unit id="f07a61c40321818a24ba88f508214e9fd567785e" translate="yes" xml:space="preserve">
          <source>The pattern can be used to have multiple separate caches operate on the same directory. The default pattern is &lt;code&gt;'__jinja2_%s.cache'&lt;/code&gt;. &lt;code&gt;%s&lt;/code&gt; is replaced with the cache key.</source>
          <target state="translated">このパターンを使用して、複数の個別のキャッシュを同じディレクトリで動作させることができます。デフォルトのパターンは &lt;code&gt;'__jinja2_%s.cache'&lt;/code&gt; です。 &lt;code&gt;%s&lt;/code&gt; はキャッシュキーに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="cc184aa07016e0d5e3f62c0844e4771037a1f680" translate="yes" xml:space="preserve">
          <source>The reason why the filename and error message are bytestrings and not unicode strings is that Python 2.x is not using unicode for exceptions and tracebacks as well as the compiler. This will change with Python 3.</source>
          <target state="translated">ファイル名とエラーメッセージがユニコード文字列ではなくバイト文字列になっているのは、Python 2.xではコンパイラと同様に例外やトレースバックにユニコードを使用していないからです。これはPython 3で変更されます。</target>
        </trans-unit>
        <trans-unit id="7ee10eb402fd1a487a78dbae621de92a36747d1d" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;a href=&quot;#jinja2.Markup&quot;&gt;&lt;code&gt;Markup&lt;/code&gt;&lt;/a&gt; string.</source>
          <target state="translated">戻り値は&lt;a href=&quot;#jinja2.Markup&quot;&gt; &lt;code&gt;Markup&lt;/code&gt; &lt;/a&gt;文字列です。</target>
        </trans-unit>
        <trans-unit id="9e7d4499fd9d04eaadce2fbaf12399ec553d8eb4" translate="yes" xml:space="preserve">
          <source>The sandboxed environment will call this method to check if the attribute of an object is safe to access. Per default all attributes starting with an underscore are considered private as well as the special attributes of internal python objects as returned by the &lt;a href=&quot;#jinja2.sandbox.is_internal_attribute&quot;&gt;&lt;code&gt;is_internal_attribute()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">サンドボックス環境はこのメソッドを呼び出して、オブジェクトの属性に安全にアクセスできるかどうかを確認します。デフォルトでは、アンダースコアで始まるすべての属性は、&lt;a href=&quot;#jinja2.sandbox.is_internal_attribute&quot;&gt; &lt;code&gt;is_internal_attribute()&lt;/code&gt; &lt;/a&gt;関数によって返される内部pythonオブジェクトの特別な属性と同様にプライベートと見なされます。</target>
        </trans-unit>
        <trans-unit id="d08f3b36c3b490a65b599a971a8f721af153b2ff" translate="yes" xml:space="preserve">
          <source>The sandboxed environment. It works like the regular environment but tells the compiler to generate sandboxed code. Additionally subclasses of this environment may override the methods that tell the runtime what attributes or functions are safe to access.</source>
          <target state="translated">サンドボックス環境です。通常の環境と同じように動作しますが、サンドボックス化されたコードを生成するようにコンパイラに指示します。さらに、この環境のサブクラスは、どの属性や関数が安全にアクセスできるかをランタイムに伝えるメソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="f963363c7042504696b96f85aee3431edbf07352" translate="yes" xml:space="preserve">
          <source>The sequence that starts a newline. Must be one of &lt;code&gt;'\r'&lt;/code&gt;, &lt;code&gt;'\n'&lt;/code&gt; or &lt;code&gt;'\r\n'&lt;/code&gt;. The default is &lt;code&gt;'\n'&lt;/code&gt; which is a useful default for Linux and OS X systems as well as web applications.</source>
          <target state="translated">改行を開始するシーケンス。 &lt;code&gt;'\r'&lt;/code&gt; 、 &lt;code&gt;'\n'&lt;/code&gt; または &lt;code&gt;'\r\n'&lt;/code&gt; いずれかである必要があります。デフォルトは &lt;code&gt;'\n'&lt;/code&gt; これは、LinuxおよびOS Xシステム、およびWebアプリケーションに役立つデフォルトです。</target>
        </trans-unit>
        <trans-unit id="dbbd9d5c8646413ff7426560b628d4485921a365" translate="yes" xml:space="preserve">
          <source>The simplest form of expressions are literals. Literals are representations for Python objects such as strings and numbers. The following literals exist:</source>
          <target state="translated">式の最も単純な形式はリテラルです。リテラルは文字列や数値などのPythonオブジェクトの表現です。以下のリテラルが存在します。</target>
        </trans-unit>
        <trans-unit id="9f6739707afdb3f8613d5044726cb8d4fe4a0315" translate="yes" xml:space="preserve">
          <source>The simplest way to configure Jinja to load templates for your application looks roughly like this:</source>
          <target state="translated">アプリケーションのテンプレートを読み込むようにJinjaを設定する最も簡単な方法は、だいたい次のようなものです。</target>
        </trans-unit>
        <trans-unit id="b8d9f4322900a04b226e4549309e33cdcb24024a" translate="yes" xml:space="preserve">
          <source>The size of the cache. Per default this is &lt;code&gt;400&lt;/code&gt; which means that if more than 400 templates are loaded the loader will clean out the least recently used template. If the cache size is set to &lt;code&gt;0&lt;/code&gt; templates are recompiled all the time, if the cache size is &lt;code&gt;-1&lt;/code&gt; the cache will not be cleaned.</source>
          <target state="translated">キャッシュのサイズ。デフォルトでは、これは &lt;code&gt;400&lt;/code&gt; です。これは、400を超えるテンプレートがロードされた場合、ローダーが最も使用頻度の低いテンプレートをクリーンアップすることを意味します。キャッシュサイズが &lt;code&gt;0&lt;/code&gt; に設定されている場合、テンプレートは常に再コンパイルされます。キャッシュサイズが &lt;code&gt;-1&lt;/code&gt; の場合、キャッシュはクリーンアップされません。</target>
        </trans-unit>
        <trans-unit id="529529f48be9769aa67b2cffb88abfb244515ecd" translate="yes" xml:space="preserve">
          <source>The sort is stable, it does not change the relative order of elements that compare equal. This makes it is possible to chain sorts on different attributes and ordering.</source>
          <target state="translated">ソートは安定しており、同等に比較する要素の相対的な順序を変更しません。これにより、異なる属性や順序でソートを連鎖させることが可能になります。</target>
        </trans-unit>
        <trans-unit id="eccdc8d8f013c336da1d7096bae2725f9bf8c315" translate="yes" xml:space="preserve">
          <source>The source part of the returned tuple must be the source of the template as unicode string or a ASCII bytestring. The filename should be the name of the file on the filesystem if it was loaded from there, otherwise &lt;code&gt;None&lt;/code&gt;. The filename is used by python for the tracebacks if no loader extension is used.</source>
          <target state="translated">返されるタプルのソース部分は、Unicode文字列またはASCIIバイト文字列としてのテンプレートのソースである必要があります。ファイル名は、ファイルシステムからロードされた場合はファイルシステム上のファイルの名前である必要があり、そうでない場合は &lt;code&gt;None&lt;/code&gt; です。ローダー拡張が使用されていない場合、ファイル名はトレースバックのためにpythonによって使用されます。</target>
        </trans-unit>
        <trans-unit id="d7328e35a73ac9ab9fab0d1a148382c4f40db07a" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;loop&lt;/code&gt; variable always points to the innermost loop. If it&amp;rsquo;s desired to have access to an outer loop it&amp;rsquo;s possible to alias it:</source>
          <target state="translated">特別な &lt;code&gt;loop&lt;/code&gt; 変数は常に最も内側のループを指します。外側のループにアクセスしたい場合は、エイリアスを付けることができます。</target>
        </trans-unit>
        <trans-unit id="a46dbe2d8a01880ea137c51f3610c61f14c54699" translate="yes" xml:space="preserve">
          <source>The special constants &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;none&lt;/code&gt; are indeed lowercase. Because that caused confusion in the past, (&lt;code&gt;True&lt;/code&gt; used to expand to an undefined variable that was considered false), all three can now also be written in title case (&lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;). However, for consistency, (all Jinja identifiers are lowercase) you should use the lowercase versions.</source>
          <target state="translated">特別な定数 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、および &lt;code&gt;none&lt;/code&gt; は実際には小文字です。これは過去に混乱を引き起こしたため（ &lt;code&gt;True&lt;/code&gt; はfalseと見なされた未定義の変数に展開されていました）、3つすべてをタイトルケース（ &lt;code&gt;True&lt;/code&gt; 、 &lt;code&gt;False&lt;/code&gt; 、 &lt;code&gt;None&lt;/code&gt; ）で記述できるようになりました。ただし、一貫性を保つために（すべてのJinja識別子は小文字です）、小文字のバージョンを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fbd366d4dbb4024e926d2257b403ea35473851ac" translate="yes" xml:space="preserve">
          <source>The string marking the beginning of a block. Defaults to &lt;code&gt;'{%'&lt;/code&gt;.</source>
          <target state="translated">ブロックの始まりを示す文字列。デフォルトは &lt;code&gt;'{%'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="01c8eff9c76895d2e1b4b1bfcc38a2a4583cd18c" translate="yes" xml:space="preserve">
          <source>The string marking the beginning of a comment. Defaults to &lt;code&gt;'{#'&lt;/code&gt;.</source>
          <target state="translated">コメントの始まりを示す文字列。デフォルトは &lt;code&gt;'{#'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="90b1e1ecb6b5f1297824f0bbedc1de546169dc0f" translate="yes" xml:space="preserve">
          <source>The string marking the beginning of a print statement. Defaults to &lt;code&gt;'{{'&lt;/code&gt;.</source>
          <target state="translated">印刷ステートメントの開始を示す文字列。デフォルトは &lt;code&gt;'{{'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="25911b7fbb10f94888af47337b08d3d4e9d96735" translate="yes" xml:space="preserve">
          <source>The string marking the end of a block. Defaults to &lt;code&gt;'%}'&lt;/code&gt;.</source>
          <target state="translated">ブロックの終わりを示す文字列。デフォルトは &lt;code&gt;'%}'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="638c8eba2b2f44d758a664e8e72d45a13ae48679" translate="yes" xml:space="preserve">
          <source>The string marking the end of a comment. Defaults to &lt;code&gt;'#}'&lt;/code&gt;.</source>
          <target state="translated">コメントの終わりを示す文字列。デフォルトは &lt;code&gt;'#}'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d0c14339264c02b05d63f096425a5baa94c0e6dd" translate="yes" xml:space="preserve">
          <source>The string marking the end of a print statement. Defaults to &lt;code&gt;'}}'&lt;/code&gt;.</source>
          <target state="translated">印刷ステートメントの終わりを示す文字列。デフォルトは &lt;code&gt;'}}'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eecbc0f779504a93af62d2933b66dfada3c7c974" translate="yes" xml:space="preserve">
          <source>The template as module. This is used for imports in the template runtime but is also useful if one wants to access exported template variables from the Python layer:</source>
          <target state="translated">モジュールとしてのテンプレート。これはテンプレートランタイムのインポートに使用されますが、Pythonレイヤーからエクスポートされたテンプレート変数にアクセスしたい場合にも便利です。</target>
        </trans-unit>
        <trans-unit id="998b85d9880721065aaed6cb1627a7ea920bf37d" translate="yes" xml:space="preserve">
          <source>The template context holds the variables of a template. It stores the values passed to the template and also the names the template exports. Creating instances is neither supported nor useful as it&amp;rsquo;s created automatically at various stages of the template evaluation and should not be created by hand.</source>
          <target state="translated">テンプレートコンテキストは、テンプレートの変数を保持します。テンプレートに渡された値と、テンプレートがエクスポートする名前も格納されます。インスタンスの作成は、テンプレート評価のさまざまな段階で自動的に作成されるため、サポートも有用でもありません。手動で作成することはできません。</target>
        </trans-unit>
        <trans-unit id="e4fe80bc97502c503aaf30f09cf825ea351e0fe7" translate="yes" xml:space="preserve">
          <source>The template context supports read only dict operations (&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;items&lt;/code&gt;, &lt;code&gt;iterkeys&lt;/code&gt;, &lt;code&gt;itervalues&lt;/code&gt;, &lt;code&gt;iteritems&lt;/code&gt;, &lt;code&gt;__getitem__&lt;/code&gt;, &lt;code&gt;__contains__&lt;/code&gt;). Additionally there is a &lt;a href=&quot;#jinja2.runtime.Context.resolve&quot;&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/a&gt; method that doesn&amp;rsquo;t fail with a &lt;code&gt;KeyError&lt;/code&gt; but returns an &lt;code&gt;Undefined&lt;/code&gt; object for missing variables.</source>
          <target state="translated">テンプレートコンテキストは、読み取り専用のdict操作（ &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;keys&lt;/code&gt; 、 &lt;code&gt;values&lt;/code&gt; 、 &lt;code&gt;items&lt;/code&gt; 、 &lt;code&gt;iterkeys&lt;/code&gt; 、 &lt;code&gt;itervalues&lt;/code&gt; 、 &lt;code&gt;iteritems&lt;/code&gt; 、 &lt;code&gt;__getitem__&lt;/code&gt; 、 &lt;code&gt;__contains__&lt;/code&gt; ）をサポートします。さらに、 &lt;code&gt;KeyError&lt;/code&gt; で失敗しない&lt;a href=&quot;#jinja2.runtime.Context.resolve&quot;&gt; &lt;code&gt;resolve()&lt;/code&gt; &lt;/a&gt;メソッドがありますが、欠落している変数に対して &lt;code&gt;Undefined&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="aa61c05c217865f09180878c512fb748ed60e7be" translate="yes" xml:space="preserve">
          <source>The template loader for this environment.</source>
          <target state="translated">この環境のテンプレートローダーです。</target>
        </trans-unit>
        <trans-unit id="9c5f63a40af486b2c2eb7dde0c568811ebf8e9e5" translate="yes" xml:space="preserve">
          <source>The template local variables. This list contains environment and context functions from the &lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/a&gt; scope as well as local modifications and exported variables from the template. The template will modify this dict during template evaluation but filters and context functions are not allowed to modify it.</source>
          <target state="translated">テンプレートのローカル変数。このリストには、&lt;a href=&quot;#jinja2.runtime.Context.parent&quot;&gt; &lt;code&gt;parent&lt;/code&gt; &lt;/a&gt;スコープの環境関数とコンテキスト関数、およびテンプレートからのローカル変更とエクスポートされた変数が含まれています。テンプレートは、テンプレートの評価中にこのdictを変更しますが、フィルターとコンテキスト関数はそれを変更できません。</target>
        </trans-unit>
        <trans-unit id="21e5274374c5d00e5bd243f78c09ea18fc1d36b9" translate="yes" xml:space="preserve">
          <source>The template, with the &lt;code&gt;|safe&lt;/code&gt; filter.</source>
          <target state="translated">&lt;code&gt;|safe&lt;/code&gt; フィルターを備えたテンプレート。</target>
        </trans-unit>
        <trans-unit id="ea3c9addf372d52925e1771de634eb4d28bd9674" translate="yes" xml:space="preserve">
          <source>The translated string is marked safe, formatting performs escaping as needed. Mark a parameter as &lt;code&gt;|safe&lt;/code&gt; if it has already been escaped.</source>
          <target state="translated">翻訳された文字列は安全とマークされ、フォーマットは必要に応じてエスケープを実行します。すでにエスケープされている場合は、パラメーターを &lt;code&gt;|safe&lt;/code&gt; としてマークします。</target>
        </trans-unit>
        <trans-unit id="48f17d5cf6cd6a2e52d403eaff15c48644f0b2e0" translate="yes" xml:space="preserve">
          <source>The type of the token. This string is interned so you may compare it with arbitrary strings using the &lt;code&gt;is&lt;/code&gt; operator.</source>
          <target state="translated">トークンのタイプ。この文字列はインターンされているため、 &lt;code&gt;is&lt;/code&gt; 演算子を使用して任意の文字列と比較できます。</target>
        </trans-unit>
        <trans-unit id="7413c111e141c4a809d08587b346bbe115d7cdec" translate="yes" xml:space="preserve">
          <source>The unique cache key for this bucket</source>
          <target state="translated">このバケットの一意のキャッシュキー</target>
        </trans-unit>
        <trans-unit id="6f0d7c30972daa0fcc1036b7e4c10a8f6c56a7ed" translate="yes" xml:space="preserve">
          <source>The unique items are yielded in the same order as their first occurrence in the iterable passed to the filter.</source>
          <target state="translated">一意な項目は、フィルタに渡されたイテレータブルの中で最初に出現したものと同じ順番で生成されます。</target>
        </trans-unit>
        <trans-unit id="812f1c3fc58d1d2bebe1e7827a70deaee3500b45" translate="yes" xml:space="preserve">
          <source>The usage of the &lt;code&gt;i18n&lt;/code&gt; extension for template designers is covered in &lt;a href=&quot;../templates/index#i18n-in-templates&quot;&gt;the template documentation&lt;/a&gt;.</source>
          <target state="translated">テンプレートデザイナでの &lt;code&gt;i18n&lt;/code&gt; 拡張機能の使用法については&lt;a href=&quot;../templates/index#i18n-in-templates&quot;&gt;、テンプレートのドキュメントで説明さ&lt;/a&gt;れています。</target>
        </trans-unit>
        <trans-unit id="470013680eab2539519396a4d684f0c0d7e7a989" translate="yes" xml:space="preserve">
          <source>The value of the token.</source>
          <target state="translated">トークンの値。</target>
        </trans-unit>
        <trans-unit id="2e5a060a6f6b09dac1ba8f3848e9f7b7ac751c88" translate="yes" xml:space="preserve">
          <source>The with statement makes it possible to create a new inner scope. Variables set within this scope are not visible outside of the scope.</source>
          <target state="translated">with文を使用すると、新しい内部スコープを作成することができます。このスコープ内で設定された変数は、スコープの外では見えません。</target>
        </trans-unit>
        <trans-unit id="7baac4b7fafe4459d0a6e525c964491ab64bf899" translate="yes" xml:space="preserve">
          <source>There are a few kinds of delimiters. The default Jinja delimiters are configured as follows:</source>
          <target state="translated">区切り文字にはいくつかの種類があります。デフォルトのJinjaのデリミタは以下のように設定されています。</target>
        </trans-unit>
        <trans-unit id="e56a34b0b25cf99d4df535054184c4ee8ad69d3c" translate="yes" xml:space="preserve">
          <source>There are two ways to import templates. You can import a complete template into a variable or request specific macros / exported variables from it.</source>
          <target state="translated">テンプレートをインポートするには2つの方法があります。完全なテンプレートを変数にインポートするか、特定のマクロ/エクスポートされた変数を変数からリクエストすることができます。</target>
        </trans-unit>
        <trans-unit id="2b81d3981681bea86eae7b06c10dce3f444d5e69" translate="yes" xml:space="preserve">
          <source>There is also a factory function that can decorate undefined objects to implement logging on failures:</source>
          <target state="translated">失敗時のロギングを実装するために、未定義のオブジェクトをデコレーションできるファクトリ関数もあります。</target>
        </trans-unit>
        <trans-unit id="fcb0176dab191732e9f477caae5cd364ad02728c" translate="yes" xml:space="preserve">
          <source>There is also a utility function in the lexer module that can count newline characters in strings:</source>
          <target state="translated">また、文字列中の改行文字を数えることができるユーティリティ関数が lexer モジュールにあります。</target>
        </trans-unit>
        <trans-unit id="05d6a7a66074891d37cce1824bec9bc68a671323" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no separate formatting step, you don&amp;rsquo;t have to remember to use the &lt;code&gt;|format&lt;/code&gt; filter.</source>
          <target state="translated">個別のフォーマット手順はありません。 &lt;code&gt;|format&lt;/code&gt; フィルターを使用することを覚えておく必要はありません。</target>
        </trans-unit>
        <trans-unit id="f6c51ba0377fb1b95cbfdc16ffc8c86dfaf04726" translate="yes" xml:space="preserve">
          <source>These classes can be used as undefined types. The &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; constructor takes an &lt;code&gt;undefined&lt;/code&gt; parameter that can be one of those classes or a custom subclass of &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt;. Whenever the template engine is unable to look up a name or access an attribute one of those objects is created and returned. Some operations on undefined values are then allowed, others fail.</source>
          <target state="translated">これらのクラスは、未定義の型として使用できます。&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;コンストラクタはかかる &lt;code&gt;undefined&lt;/code&gt; これらのクラスやのカスタムサブクラスのいずれかのパラメータ&lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt;。テンプレートエンジンが名前を検索したり属性にアクセスしたりできない場合は常に、それらのオブジェクトの1つが作成されて返されます。その後、未定義の値に対する一部の操作が許可され、その他の操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="c82675be15d70b7188f96b4330b46f46c4f85a6a" translate="yes" xml:space="preserve">
          <source>These helper functions and classes are useful if you add custom filters or functions to a Jinja environment.</source>
          <target state="translated">これらのヘルパー関数やクラスは、Jinja環境にカスタムフィルタや関数を追加するときに便利です。</target>
        </trans-unit>
        <trans-unit id="e04617c543fa11236abb5fd1341b43a459d6e0f8" translate="yes" xml:space="preserve">
          <source>This attribute is &lt;code&gt;False&lt;/code&gt; if there is a newer version of the template available, otherwise &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">新しいバージョンのテンプレートが使用可能な場合、この属性は &lt;code&gt;False&lt;/code&gt; です。それ以外の場合は、 &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b78921fee5e6b73896dcff37e3c3b92855160244" translate="yes" xml:space="preserve">
          <source>This attribute is not available if async mode is enabled.</source>
          <target state="translated">この属性は、非同期モードが有効な場合には使用できません。</target>
        </trans-unit>
        <trans-unit id="1819941a2eb6abaa0c89ccaec4d7f33ed104bbd0" translate="yes" xml:space="preserve">
          <source>This behavior can be changed explicitly: by adding &lt;code&gt;with context&lt;/code&gt; or &lt;code&gt;without context&lt;/code&gt; to the import/include directive, the current context can be passed to the template and caching is disabled automatically.</source>
          <target state="translated">この動作は明示的に変更できます。import/ includeディレクティブに &lt;code&gt;with context&lt;/code&gt; またはコンテキスト &lt;code&gt;without context&lt;/code&gt; 追加することにより、現在のコンテキストをテンプレートに渡すことができ、キャッシュは自動的に無効になります。</target>
        </trans-unit>
        <trans-unit id="0599847dbf5b734c0aaa467c5edcff99181d84b8" translate="yes" xml:space="preserve">
          <source>This boolean controls on Python 2 if Jinja should store ASCII only literals as bytestring instead of unicode strings. This used to be always enabled for Jinja versions below 2.9 and now can be changed. Traditionally it was done this way since some APIs in Python 2 failed badly for unicode strings (for instance the datetime strftime API). Now however sometimes the inverse is true (for instance str.format). If this is set to False then all strings are stored as unicode internally.</source>
          <target state="translated">このブール値は、Python 2上でJinjaがユニコード文字列の代わりにASCIIリテラルのみをバイト文字列として保存するかどうかを制御します。これはJinjaのバージョン2.9以下では常に有効でしたが、現在は変更可能です。伝統的には、Python 2のいくつかのAPIがUnicode文字列に対してひどく失敗していたため、このようにしていました(例えばdatetime strftime API)。しかし今では逆が真になることもあります (例えば str.format など)。これがFalseに設定されている場合、すべての文字列は内部的にunicodeとして保存されます。</target>
        </trans-unit>
        <trans-unit id="731679bfc0637f92db476af45b91b6d629fcccd8" translate="yes" xml:space="preserve">
          <source>This bytecode cache does not support clearing of used items in the cache. The clear method is a no-operation function.</source>
          <target state="translated">このバイトコードキャッシュは、キャッシュ内の使用済みアイテムのクリアをサポートしていません。クリア方法は無操作機能です。</target>
        </trans-unit>
        <trans-unit id="0836dc580d1bbe729d115b1bcd584f2f6cfb6fc9" translate="yes" xml:space="preserve">
          <source>This bytecode cache supports clearing of the cache using the clear method.</source>
          <target state="translated">このバイトコードキャッシュは、クリア方式によるキャッシュのクリアをサポートしています。</target>
        </trans-unit>
        <trans-unit id="51f9ec3acf0152fd0197e852b263fc253d309739" translate="yes" xml:space="preserve">
          <source>This class implements a bytecode cache that uses a memcache cache for storing the information. It does not enforce a specific memcache library (tummy&amp;rsquo;s memcache or cmemcache) but will accept any class that provides the minimal interface required.</source>
          <target state="translated">このクラスは、情報を格納するためにmemcacheキャッシュを使用するバイトコードキャッシュを実装します。特定のmemcacheライブラリ（おなかのmemcacheまたはcmemcache）を強制しませんが、必要な最小限のインターフェイスを提供するすべてのクラスを受け入れます。</target>
        </trans-unit>
        <trans-unit id="89642115e385f7f0efd7cde7a324b444fa1a012e" translate="yes" xml:space="preserve">
          <source>This decorator can be used to mark a function or method as an eval context callable. This is similar to the &lt;a href=&quot;#jinja2.contextfunction&quot;&gt;&lt;code&gt;contextfunction()&lt;/code&gt;&lt;/a&gt; but instead of passing the context, an evaluation context object is passed. For more information about the eval context, see &lt;a href=&quot;#eval-context&quot;&gt;Evaluation Context&lt;/a&gt;.</source>
          <target state="translated">このデコレータは、関数またはメソッドを呼び出し可能な評価コンテキストとしてマークするために使用できます。これは&lt;a href=&quot;#jinja2.contextfunction&quot;&gt; &lt;code&gt;contextfunction()&lt;/code&gt; に&lt;/a&gt;似ていますが、コンテキストを渡す代わりに、評価コンテキストオブジェクトが渡されます。evalのコンテキストの詳細については、&lt;a href=&quot;#eval-context&quot;&gt;評価コンテキストを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e441114eaa419315db3b1deee6b970ea4f3c6ec4" translate="yes" xml:space="preserve">
          <source>This decorator can be used to mark a function or method as environment callable. This decorator works exactly like the &lt;a href=&quot;#jinja2.contextfunction&quot;&gt;&lt;code&gt;contextfunction()&lt;/code&gt;&lt;/a&gt; decorator just that the first argument is the active &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt; and not context.</source>
          <target state="translated">このデコレータは、関数またはメソッドを環境呼び出し可能としてマークするために使用できます。このデコレータは、最初の引数がコンテキストではなくアクティブな&lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt;という点で、&lt;a href=&quot;#jinja2.contextfunction&quot;&gt; &lt;code&gt;contextfunction()&lt;/code&gt; &lt;/a&gt;デコレータとまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="6795f0dc47472d91e26f6f7715728eea53580528" translate="yes" xml:space="preserve">
          <source>This decorator can be used to mark a function or method context callable. A context callable is passed the active &lt;code&gt;Context&lt;/code&gt; as first argument when called from the template. This is useful if a function wants to get access to the context or functions provided on the context object. For example a function that returns a sorted list of template variables the current template exports could look like this:</source>
          <target state="translated">このデコレータは、呼び出し可能な関数またはメソッドのコンテキストをマークするために使用できます。呼び出し可能な &lt;code&gt;Context&lt;/code&gt; は、テンプレートから呼び出されたときに最初の引数としてアクティブなコンテキストに渡されます。これは、関数がコンテキストまたはコンテキストオブジェクトで提供される関数にアクセスしたい場合に役立ちます。たとえば、現在のテンプレートがエクスポートするテンプレート変数のソートされたリストを返す関数は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="650610dc55f3dca0d6dda48f21d0db3f39c68fe4" translate="yes" xml:space="preserve">
          <source>This document describes the API to Jinja and not the template language (for that, see &lt;a href=&quot;../templates/index&quot;&gt;Template Designer Documentation&lt;/a&gt;). It will be most useful as reference to those implementing the template interface to the application and not those who are creating Jinja templates.</source>
          <target state="translated">このドキュメントでは、テンプレート言語ではなく、JinjaへのAPIについて説明します（これについては、&lt;a href=&quot;../templates/index&quot;&gt;テンプレートデザイナのドキュメントを&lt;/a&gt;参照してください）。これは、Jinjaテンプレートを作成している人ではなく、アプリケーションへのテンプレートインターフェイスを実装している人への参照として最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="c6771d7599fbdc7a52c7155b28e08eba890fc6c6" translate="yes" xml:space="preserve">
          <source>This document describes the syntax and semantics of the template engine and will be most useful as reference to those creating Jinja templates. As the template engine is very flexible, the configuration from the application can be slightly different from the code presented here in terms of delimiters and behavior of undefined values.</source>
          <target state="translated">このドキュメントでは、テンプレートエンジンの構文とセマンティクスについて説明します。テンプレートエンジンは非常に柔軟性に富んでいるため、アプリケーションからの設定は、デリミタや未定義値の振る舞いなどの点で、ここで紹介するコードとは若干異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="3603c9e62f0f737eea5419fd316e9a0e79d495a7" translate="yes" xml:space="preserve">
          <source>This does not perform preprocessing. If you want the preprocessing of the extensions to be applied you have to filter source through the &lt;a href=&quot;#jinja2.Environment.preprocess&quot;&gt;&lt;code&gt;preprocess()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これは前処理を実行しません。拡張機能の前処理を適用する場合は、&lt;a href=&quot;#jinja2.Environment.preprocess&quot;&gt; &lt;code&gt;preprocess()&lt;/code&gt; &lt;/a&gt;メソッドを使用してソースをフィルタリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="631f812855101f305cdc896a51dc345c43b177fa" translate="yes" xml:space="preserve">
          <source>This example shows how the power (&lt;code&gt;**&lt;/code&gt;) operator can be disabled in Jinja:</source>
          <target state="translated">この例は、Jinjaで電源（ &lt;code&gt;**&lt;/code&gt; ）演算子を無効にする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="fc0c25b783f9ef030b88b602341c6db5861aa6fb" translate="yes" xml:space="preserve">
          <source>This example would output empty &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; items because &lt;code&gt;item&lt;/code&gt; is unavailable inside the block. The reason for this is that if the block is replaced by a child template, a variable would appear that was not defined in the block or passed to the context.</source>
          <target state="translated">この例では、 &lt;code&gt;item&lt;/code&gt; がブロック内で使用できないため、空の &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; アイテムが出力されます。これは、ブロックが子テンプレートに置き換えられた場合、ブロックで定義されていない、またはコンテキストに渡されていない変数が表示されるためです。</target>
        </trans-unit>
        <trans-unit id="90bae254e5003a436b697654b716c8e87bcc2818" translate="yes" xml:space="preserve">
          <source>This extension adds support for &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; in loops. After enabling, Jinja provides those two keywords which work exactly like in Python.</source>
          <target state="translated">この拡張機能は、ループ内での &lt;code&gt;break&lt;/code&gt; と &lt;code&gt;continue&lt;/code&gt; サポートを追加します。有効にした後、JinjaはPythonとまったく同じように機能する2つのキーワードを提供します。</target>
        </trans-unit>
        <trans-unit id="9efee99147b121c21d84566f896236dac80de684" translate="yes" xml:space="preserve">
          <source>This function checks if an attribute on a builtin mutable object (list, dict, set or deque) would modify it if called. It also supports the &amp;ldquo;user&amp;rdquo;-versions of the objects (&lt;code&gt;sets.Set&lt;/code&gt;, &lt;code&gt;UserDict.*&lt;/code&gt; etc.) and with Python 2.6 onwards the abstract base classes &lt;code&gt;MutableSet&lt;/code&gt;, &lt;code&gt;MutableMapping&lt;/code&gt;, and &lt;code&gt;MutableSequence&lt;/code&gt;.</source>
          <target state="translated">この関数は、組み込みの可変オブジェクト（list、dict、set、またはdeque）の属性が呼び出された場合にそれを変更するかどうかをチェックします。また、オブジェクトの「ユーザー」バージョン（ &lt;code&gt;sets.Set&lt;/code&gt; 、 &lt;code&gt;UserDict.*&lt;/code&gt; など）をサポートし、Python 2.6以降では、抽象基本クラス &lt;code&gt;MutableSet&lt;/code&gt; 、 &lt;code&gt;MutableMapping&lt;/code&gt; 、および &lt;code&gt;MutableSequence&lt;/code&gt; をサポートします。</target>
        </trans-unit>
        <trans-unit id="b70359ddbdc6abae1457a0a521170bb940bf9765" translate="yes" xml:space="preserve">
          <source>This function is useful for dependency tracking. For example if you want to rebuild parts of the website after a layout template has changed.</source>
          <target state="translated">この機能は依存関係の追跡に便利です。例えば、レイアウトテンプレートが変更された後にウェブサイトの一部を再構築したい場合などです。</target>
        </trans-unit>
        <trans-unit id="7117c6a3dcd2866f4c938cbc4ba178ac19db3a23" translate="yes" xml:space="preserve">
          <source>This implements the &lt;code&gt;__html__()&lt;/code&gt; interface that some frameworks use. Passing an object that implements &lt;code&gt;__html__()&lt;/code&gt; will wrap the output of that method, marking it safe.</source>
          <target state="translated">これは、一部のフレームワークが使用する &lt;code&gt;__html__()&lt;/code&gt; インターフェースを実装します。 &lt;code&gt;__html__()&lt;/code&gt; を実装するオブジェクトを渡すと、そのメソッドの出力がラップされ、安全であるとマークされます。</target>
        </trans-unit>
        <trans-unit id="0e554166d849c5a2a308ea299e70d33f0fb4a2a4" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the macro accepts extra keyword arguments (i.e.: accesses the special &lt;code&gt;kwargs&lt;/code&gt; variable).</source>
          <target state="translated">これは、 &lt;code&gt;true&lt;/code&gt; マクロが余分なキーワード引数受け入れる場合（つまり：特殊なアクセス &lt;code&gt;kwargs&lt;/code&gt; からの変数を）。</target>
        </trans-unit>
        <trans-unit id="a8dd89e043f8ffe9ba1759a3a12eddc39e77f51a" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the macro accepts extra positional arguments (i.e.: accesses the special &lt;code&gt;varargs&lt;/code&gt; variable).</source>
          <target state="translated">これは、マクロが追加の位置引数を受け入れる場合（つまり、特別な &lt;code&gt;varargs&lt;/code&gt; 変数にアクセスする場合）に &lt;code&gt;true&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d47f4329656199ba7d288c371b05909e64af9c30" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the macro accesses the special &lt;code&gt;caller&lt;/code&gt; variable and may be called from a &lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt; tag.</source>
          <target state="translated">これは、マクロが特別な &lt;code&gt;caller&lt;/code&gt; 変数にアクセスし、&lt;a href=&quot;#call&quot;&gt;呼び出し&lt;/a&gt;タグから呼び出される可能性が &lt;code&gt;true&lt;/code&gt; 場合に当てはまります。</target>
        </trans-unit>
        <trans-unit id="7d2893e07954b65e2f755bd7e378c7d1ebc3f5c1" translate="yes" xml:space="preserve">
          <source>This is a subclass of the text type (&lt;code&gt;str&lt;/code&gt; in Python 3, &lt;code&gt;unicode&lt;/code&gt; in Python 2). It has the same methods as that type, but all methods escape their arguments and return a &lt;code&gt;Markup&lt;/code&gt; instance.</source>
          <target state="translated">これはテキストタイプのサブクラスです（Python 3では &lt;code&gt;str&lt;/code&gt; 、Python 2では &lt;code&gt;unicode&lt;/code&gt; ）。そのタイプと同じメソッドがありますが、すべてのメソッドは引数をエスケープして &lt;code&gt;Markup&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="97a5353e9e7cb585169e9a0f1dad1ae12b8cd2bc" translate="yes" xml:space="preserve">
          <source>This is basically equivalent to using the &lt;a href=&quot;../api/index#jinja2.contextfunction&quot;&gt;&lt;code&gt;contextfunction()&lt;/code&gt;&lt;/a&gt; decorator when using the high-level API, which causes a reference to the context to be passed as the first argument to a function.</source>
          <target state="translated">これは基本的に、高レベルAPIを使用するときに&lt;a href=&quot;../api/index#jinja2.contextfunction&quot;&gt; &lt;code&gt;contextfunction()&lt;/code&gt; &lt;/a&gt;デコレータを使用することと同じです。これにより、コンテキストへの参照が関数の最初の引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="d53f9356509024595852e271ea875995802635f5" translate="yes" xml:space="preserve">
          <source>This is especially useful if you have a web application that is initialized on the first request and Jinja compiles many templates at once which slows down the application.</source>
          <target state="translated">これは特に、最初のリクエストで初期化されたウェブアプリケーションがあり、Jinjaが一度に多くのテンプレートをコンパイルするとアプリケーションの動作が遅くなる場合に便利です。</target>
        </trans-unit>
        <trans-unit id="68961ab0cd63f0047d4ff6fd9abf8d50e390d10d" translate="yes" xml:space="preserve">
          <source>This is important if an object has an item and attribute with the same name. Additionally, the &lt;a href=&quot;#attr&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; filter only looks up attributes.</source>
          <target state="translated">これは、オブジェクトに同じ名前のアイテムと属性がある場合に重要です。さらに、&lt;a href=&quot;#attr&quot;&gt; &lt;code&gt;attr()&lt;/code&gt; &lt;/a&gt;フィルターは属性のみを検索します。</target>
        </trans-unit>
        <trans-unit id="e0c44f0a06bd25d0af64a21bfe399cc49dfe032b" translate="yes" xml:space="preserve">
          <source>This is the central parsing class Jinja uses. It&amp;rsquo;s passed to extensions and can be used to parse expressions or statements.</source>
          <target state="translated">これは、Jinjaが使用する中心的な解析クラスです。拡張機能に渡され、式またはステートメントの解析に使用できます。</target>
        </trans-unit>
        <trans-unit id="2d9979462d3261eccd6ba909b7649bf68bb3277f" translate="yes" xml:space="preserve">
          <source>This is the documentation for the Jinja general purpose templating language. Jinja is a library for Python that is designed to be flexible, fast and secure.</source>
          <target state="translated">汎用テンプレート言語 Jinja のドキュメントです。Jinja は、柔軟性、高速性、安全性を考慮して設計された Python のためのライブラリです。</target>
        </trans-unit>
        <trans-unit id="c90cad60f9758f90a3461797181a95ce557b2614" translate="yes" xml:space="preserve">
          <source>This is the low level render function. It&amp;rsquo;s passed a &lt;code&gt;Context&lt;/code&gt; that has to be created by &lt;a href=&quot;#jinja2.Template.new_context&quot;&gt;&lt;code&gt;new_context()&lt;/code&gt;&lt;/a&gt; of the same template or a compatible template. This render function is generated by the compiler from the template code and returns a generator that yields unicode strings.</source>
          <target state="translated">これは低レベルのレンダリング機能です。同じテンプレートまたは互換性のあるテンプレートの&lt;a href=&quot;#jinja2.Template.new_context&quot;&gt; &lt;code&gt;new_context()&lt;/code&gt; &lt;/a&gt;によって作成する必要がある &lt;code&gt;Context&lt;/code&gt; が渡されます。このレンダリング関数は、コンパイラによってテンプレートコードから生成され、Unicode文字列を生成するジェネレータを返します。</target>
        </trans-unit>
        <trans-unit id="49a42d5ad9f8e1458a05bb013cb81f0785e98616" translate="yes" xml:space="preserve">
          <source>This is useful if applications want to use the same rules as Jinja in template &amp;ldquo;configuration files&amp;rdquo; or similar situations.</source>
          <target state="translated">これは、アプリケーションがテンプレートの「構成ファイル」または同様の状況でJinjaと同じルールを使用する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5888e5144f43803ef3107fe5376593a037885dc6" translate="yes" xml:space="preserve">
          <source>This is useful if you want to allow users to override builtin templates from a different location.</source>
          <target state="translated">これは、ユーザーが別の場所から組み込みテンプレートをオーバーライドできるようにしたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="6881141df45d5d3f55f9019b83b11c3dbb6a2fbb" translate="yes" xml:space="preserve">
          <source>This is useful to repeat a template block multiple times, e.g. to fill a list. Imagine you have 7 users in the list but you want to render three empty items to enforce a height with CSS:</source>
          <target state="translated">これは、リストを埋めるためなど、テンプレートブロックを複数回繰り返す場合に便利です。リストには7人のユーザーがいるが、CSSで高さを強制するために空の項目を3つレンダリングしたい場合を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="8c1817059bae1bdeaaeec43a297fd0eb0a01c555" translate="yes" xml:space="preserve">
          <source>This loader loads templates from precompiled templates.</source>
          <target state="translated">このローダーは、コンパイル済みのテンプレートからテンプレートをロードします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
