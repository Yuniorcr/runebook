<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="e9372d8280e154ef7bd8cce1cb9067cf0ac6b897" translate="yes" xml:space="preserve">
          <source>The output of each example is checked using the &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s output checker, and the results are formatted by the &lt;code&gt;DocTestRunner.report_*()&lt;/code&gt; methods.</source>
          <target state="translated">各例の出力は&lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt;の出力チェッカーを使用してチェックされ、結果は &lt;code&gt;DocTestRunner.report_*()&lt;/code&gt; メソッドによってフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="585c88899418582ad73321158b0178e16e458068" translate="yes" xml:space="preserve">
          <source>The output of the example should look exactly like for the TCP server example.</source>
          <target state="translated">この例の出力は、TCP サーバの例とまったく同じようになります。</target>
        </trans-unit>
        <trans-unit id="00ef8f2fda1209e9f49161aa09f6645d996d526e" translate="yes" xml:space="preserve">
          <source>The output of the example should look something like this:</source>
          <target state="translated">例の出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="2ddac9a02ca6d6738022c8b8534a979f5593d7ce" translate="yes" xml:space="preserve">
          <source>The output string will &lt;em&gt;not&lt;/em&gt; include time zone information, regardless of whether the input is aware or naive.</source>
          <target state="translated">入力が認識されているかナイーブであるかに関係なく、出力文字列にはタイムゾーン情報は含まれ&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6fc487de6f88b00ecc2f348b90e17727ccc9ccff" translate="yes" xml:space="preserve">
          <source>The output will then be:</source>
          <target state="translated">すると出力されます。</target>
        </trans-unit>
        <trans-unit id="30e8eaae13d1dea954788334f3c9bd5becb2d6c6" translate="yes" xml:space="preserve">
          <source>The overall structure of the email package can be divided into three major components, plus a fourth component that controls the behavior of the other components.</source>
          <target state="translated">メールパッケージの全体的な構造は、3つの主要なコンポーネントと、他のコンポーネントの動作を制御する第4のコンポーネントに分けることができます。</target>
        </trans-unit>
        <trans-unit id="1ce355a2a46493371466043965a6b586867e0a7c" translate="yes" xml:space="preserve">
          <source>The pack() method can be called with keyword-option/value pairs that control where the widget is to appear within its container, and how it is to behave when the main application window is resized. Here are some examples:</source>
          <target state="translated">pack()メソッドは、ウィジェットがコンテナ内のどこに表示されるか、メインアプリケーションウィンドウのサイズが変更されたときにどのように振る舞うかを制御するキーワード-オプション/値のペアで呼び出すことができます。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="43d505e6a2e7c36776ba82d594697f730f5d036e" translate="yes" xml:space="preserve">
          <source>The package contents can be roughly split into four parts: low-level CAB routines, low-level MSI routines, higher-level MSI routines, and standard table structures.</source>
          <target state="translated">パッケージの内容は大きく分けて、低レベルCABルーチン、低レベルMSIルーチン、高レベルMSIルーチン、標準テーブル構造の4つの部分に分けることができます。</target>
        </trans-unit>
        <trans-unit id="b5e085f5fbf738e12557a40f2cfd7aded4c065ac" translate="yes" xml:space="preserve">
          <source>The packer is one of Tk&amp;rsquo;s geometry-management mechanisms. Geometry managers are used to specify the relative positioning of the positioning of widgets within their container - their mutual &lt;em&gt;master&lt;/em&gt;. In contrast to the more cumbersome &lt;em&gt;placer&lt;/em&gt; (which is used less commonly, and we do not cover here), the packer takes qualitative relationship specification - &lt;em&gt;above&lt;/em&gt;, &lt;em&gt;to the left of&lt;/em&gt;, &lt;em&gt;filling&lt;/em&gt;, etc - and works everything out to determine the exact placement coordinates for you.</source>
          <target state="translated">パッカーはTkのジオメトリ管理メカニズムの1つです。ジオメトリマネージャは、コンテナ内のウィジェットの配置の相対的な位置、つまり相互の&lt;em&gt;マスター&lt;/em&gt;を指定するために使用されます。面倒とは対照的に&lt;em&gt;砂金&lt;/em&gt; - （あまり一般的に使用されている、と我々はここでカバーしていない）、パッカーは、定性的な関係の仕様を取る&lt;em&gt;以上&lt;/em&gt;、&lt;em&gt;の左に&lt;/em&gt;、&lt;em&gt;充填&lt;/em&gt;など-と正確な位置座標を決定するために、すべてをうまくいきますあなたのために。</target>
        </trans-unit>
        <trans-unit id="d00bfaddba4b6a311bea1718f0f6923a76662ed2" translate="yes" xml:space="preserve">
          <source>The packer is one of Tk&amp;rsquo;s geometry-management mechanisms. Geometry managers are used to specify the relative positioning of widgets within their container - their mutual &lt;em&gt;master&lt;/em&gt;. In contrast to the more cumbersome &lt;em&gt;placer&lt;/em&gt; (which is used less commonly, and we do not cover here), the packer takes qualitative relationship specification - &lt;em&gt;above&lt;/em&gt;, &lt;em&gt;to the left of&lt;/em&gt;, &lt;em&gt;filling&lt;/em&gt;, etc - and works everything out to determine the exact placement coordinates for you.</source>
          <target state="translated">パッカーは、Tkのジオメトリ管理メカニズムの1つです。ジオメトリマネージャーは、コンテナー内のウィジェットの相対的な位置を指定するために使用されます-相互&lt;em&gt;マスター&lt;/em&gt;。面倒とは対照的に&lt;em&gt;砂金&lt;/em&gt;- （あまり一般的に使用されている、と我々はここでカバーしていない）、パッカーは、定性的な関係の仕様を取る&lt;em&gt;以上&lt;/em&gt;、&lt;em&gt;の左に&lt;/em&gt;、&lt;em&gt;充填&lt;/em&gt;など-と正確な位置座標を決定するために、すべてをうまくいきますあなたのために。</target>
        </trans-unit>
        <trans-unit id="253cb8189b2936e9dc31ecb164b214955e29b52e" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;do_handshake_on_connect&lt;/code&gt; specifies whether to do the SSL handshake automatically after doing a &lt;code&gt;socket.connect()&lt;/code&gt;, or whether the application program will call it explicitly, by invoking the &lt;a href=&quot;#ssl.SSLSocket.do_handshake&quot;&gt;&lt;code&gt;SSLSocket.do_handshake()&lt;/code&gt;&lt;/a&gt; method. Calling &lt;a href=&quot;#ssl.SSLSocket.do_handshake&quot;&gt;&lt;code&gt;SSLSocket.do_handshake()&lt;/code&gt;&lt;/a&gt; explicitly gives the program control over the blocking behavior of the socket I/O involved in the handshake.</source>
          <target state="translated">パラメータ &lt;code&gt;do_handshake_on_connect&lt;/code&gt; は、 &lt;code&gt;socket.connect()&lt;/code&gt; の実行後にSSLハンドシェイクを自動的に実行するか、またはアプリケーションプログラムが&lt;a href=&quot;#ssl.SSLSocket.do_handshake&quot;&gt; &lt;code&gt;SSLSocket.do_handshake()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して明示的に呼び出すかを指定します。&lt;a href=&quot;#ssl.SSLSocket.do_handshake&quot;&gt; &lt;code&gt;SSLSocket.do_handshake()&lt;/code&gt; を&lt;/a&gt;呼び出すと、プログラムは、ハンドシェイクに関連するソケットI / Oのブロック動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="7e2325d973c251eaad6d5fa92d991f2af2611734" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;server_side&lt;/code&gt; is a boolean which identifies whether server-side or client-side behavior is desired from this socket.</source>
          <target state="translated">パラメータ &lt;code&gt;server_side&lt;/code&gt; はブール値で、このソケットからサーバー側またはクライアント側の動作が必要かどうかを識別します。</target>
        </trans-unit>
        <trans-unit id="823e6e4ffdf11c7805d8ae352770d5ed2e9f8a18" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;suppress_ragged_eofs&lt;/code&gt; specifies how the &lt;code&gt;SSLSocket.recv()&lt;/code&gt; method should signal unexpected EOF from the other end of the connection. If specified as &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; (the default), it returns a normal EOF (an empty bytes object) in response to unexpected EOF errors raised from the underlying socket; if &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, it will raise the exceptions back to the caller.</source>
          <target state="translated">パラメータ &lt;code&gt;suppress_ragged_eofs&lt;/code&gt; は、 &lt;code&gt;SSLSocket.recv()&lt;/code&gt; メソッドが接続の反対側から予期しないEOFを通知する方法を指定します。&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;（デフォルト）として指定すると、基になるソケットから発生した予期しないEOFエラーに応答して、通常のEOF（空のバイトオブジェクト）を返します。&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; の&lt;/a&gt;場合、例外が発生して呼び出し元に戻ります。</target>
        </trans-unit>
        <trans-unit id="425f1ffaff5f611531ca4dc03dbc5808560f4199" translate="yes" xml:space="preserve">
          <source>The parameter &lt;em&gt;arg&lt;/em&gt; can be one of an integer, an object supporting the read-only buffer interface (like &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;) or an object supporting the read-write buffer interface (like &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">パラメータ&lt;em&gt;arg&lt;/em&gt;は、整数、読み取り専用バッファインターフェイスをサポートするオブジェクト（&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; など&lt;/a&gt;）、または読み取り/書き込みバッファインターフェイスをサポートするオブジェクト（&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; など&lt;/a&gt;）のいずれかです。</target>
        </trans-unit>
        <trans-unit id="07f0e19bb360bd19a1a80e689ce45296940e8971" translate="yes" xml:space="preserve">
          <source>The parameter &lt;em&gt;reuse_address&lt;/em&gt; is no longer supported, as using &lt;code&gt;SO_REUSEADDR&lt;/code&gt; poses a significant security concern for UDP. Explicitly passing &lt;code&gt;reuse_address=True&lt;/code&gt; will raise an exception.</source>
          <target state="translated">&lt;em&gt;SO_REUSEADDR&lt;/em&gt;を使用するとUDPのセキュリティ上の重大な問題が発生するため、 &lt;code&gt;SO_REUSEADDR&lt;/code&gt; パラメータはサポートされなくなりました。明示的に &lt;code&gt;reuse_address=True&lt;/code&gt; を渡すと、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e3d9bf8f3c1e1166d31d759e64e3dbeea2b50d58" translate="yes" xml:space="preserve">
          <source>The parameter interpretation recognizes local and global variable names, constant values, branch targets, and compare operators.</source>
          <target state="translated">パラメータ解釈では、ローカルおよびグローバル変数名、定数値、分岐ターゲット、比較演算子を認識します。</target>
        </trans-unit>
        <trans-unit id="4364023a096cfc76a5aaccc26d05253c492b0d07" translate="yes" xml:space="preserve">
          <source>The parameters are as for &lt;code&gt;FileHandler&lt;/code&gt;. The attributes are:</source>
          <target state="translated">パラメータは &lt;code&gt;FileHandler&lt;/code&gt; と同じです。属性は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="328fb050a12d6f49d22d231e4d9497b6bf6996e1" translate="yes" xml:space="preserve">
          <source>The parameters to &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt;のパラメーターは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4121375e3f99104ec54ea4f3d41c8050dcbed2d1" translate="yes" xml:space="preserve">
          <source>The parameters to &lt;a href=&quot;#dataclasses.field&quot;&gt;&lt;code&gt;field()&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;#dataclasses.field&quot;&gt; &lt;code&gt;field()&lt;/code&gt; &lt;/a&gt;のパラメーターは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8b0533de393e7b886a40041244b0c1cf85c2921d" translate="yes" xml:space="preserve">
          <source>The parameters to the constructor are the same as those for &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コンストラクターのパラメーターは、&lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; &lt;/a&gt;のパラメーターと同じです。</target>
        </trans-unit>
        <trans-unit id="3db46ab8cdee19add4d74116b81d433cfd3167ac" translate="yes" xml:space="preserve">
          <source>The parent of the current node, or &lt;code&gt;None&lt;/code&gt; for the document node. The value is always a &lt;code&gt;Node&lt;/code&gt; object or &lt;code&gt;None&lt;/code&gt;. For &lt;code&gt;Element&lt;/code&gt; nodes, this will be the parent element, except for the root element, in which case it will be the &lt;code&gt;Document&lt;/code&gt; object. For &lt;code&gt;Attr&lt;/code&gt; nodes, this is always &lt;code&gt;None&lt;/code&gt;. This is a read-only attribute.</source>
          <target state="translated">現在のノードの親、またはドキュメントノードの場合は &lt;code&gt;None&lt;/code&gt; 。値は常に &lt;code&gt;Node&lt;/code&gt; オブジェクトまたは &lt;code&gt;None&lt;/code&gt; です。ための &lt;code&gt;Element&lt;/code&gt; ノード、これは、それがされる場合には、ルート要素を除いて、親要素になり &lt;code&gt;Document&lt;/code&gt; オブジェクト。 &lt;code&gt;Attr&lt;/code&gt; ノード、これは常にではありません &lt;code&gt;None&lt;/code&gt; 。これは読み取り専用属性です。</target>
        </trans-unit>
        <trans-unit id="3a3afdd265cba6fd880178e4866ef40903b31ca4" translate="yes" xml:space="preserve">
          <source>The parent package for the module/package. If the module is top-level then it has a value of the empty string. The &lt;a href=&quot;#importlib.util.module_for_loader&quot;&gt;&lt;code&gt;importlib.util.module_for_loader()&lt;/code&gt;&lt;/a&gt; decorator can handle the details for &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__package__&quot;&gt;&lt;code&gt;__package__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モジュール/パッケージの親パッケージ。モジュールがトップレベルの場合、空の文字列の値を持ちます。&lt;a href=&quot;#importlib.util.module_for_loader&quot;&gt; &lt;code&gt;importlib.util.module_for_loader()&lt;/code&gt; &lt;/a&gt;デコレータは、の詳細処理できる&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__package__&quot;&gt; &lt;code&gt;__package__&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1adae70f45cb1346a91a2a0f4115caab6117d269" translate="yes" xml:space="preserve">
          <source>The parent process starts a fresh python interpreter process. The child process will only inherit those resources necessary to run the process objects &lt;a href=&quot;#multiprocessing.Process.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method. In particular, unnecessary file descriptors and handles from the parent process will not be inherited. Starting a process using this method is rather slow compared to using &lt;em&gt;fork&lt;/em&gt; or &lt;em&gt;forkserver&lt;/em&gt;.</source>
          <target state="translated">親プロセスは、新しいPythonインタープリタープロセスを開始します。子プロセスは、プロセスオブジェクトの&lt;a href=&quot;#multiprocessing.Process.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt;メソッドの実行に必要なリソースのみを継承します。特に、親プロセスからの不要なファイル記述子とハンドルは継承されません。この方法を使用してプロセスを開始することは、&lt;em&gt;fork&lt;/em&gt;または&lt;em&gt;forkserver&lt;/em&gt;を使用する場合に比べてかなり遅く&lt;em&gt;なり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="369b3db27e2ba62379ec6c6f36a1ad6fef163ee0" translate="yes" xml:space="preserve">
          <source>The parent process uses &lt;a href=&quot;os#os.fork&quot;&gt;&lt;code&gt;os.fork()&lt;/code&gt;&lt;/a&gt; to fork the Python interpreter. The child process, when it begins, is effectively identical to the parent process. All resources of the parent are inherited by the child process. Note that safely forking a multithreaded process is problematic.</source>
          <target state="translated">親プロセスは&lt;a href=&quot;os#os.fork&quot;&gt; &lt;code&gt;os.fork()&lt;/code&gt; &lt;/a&gt;を使用してPythonインタープリターをフォークします。開始時の子プロセスは、親プロセスと実質的に同じです。親のすべてのリソースは、子プロセスによって継承されます。マルチスレッドプロセスを安全にフォークすることには問題があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="595e02418163451e1abf531e59bf4de57ad3c4ec" translate="yes" xml:space="preserve">
          <source>The parse_args() method</source>
          <target state="translated">parse_args()メソッド</target>
        </trans-unit>
        <trans-unit id="1370400415985cb2cf13a044f34b42c6fd02cbfa" translate="yes" xml:space="preserve">
          <source>The parser determined that the document was not &amp;ldquo;standalone&amp;rdquo; though it declared itself to be in the XML declaration, and the &lt;code&gt;NotStandaloneHandler&lt;/code&gt; was set and returned &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">パーサーは、ドキュメントがXML宣言内にあることを宣言しているにもかかわらず、ドキュメントが「スタンドアロン」ではないと判断し、 &lt;code&gt;NotStandaloneHandler&lt;/code&gt; が設定されて &lt;code&gt;0&lt;/code&gt; を返しました。</target>
        </trans-unit>
        <trans-unit id="45abc8da4046f26f9e15931202a6cfb3bb8736a5" translate="yes" xml:space="preserve">
          <source>The parser for the binary format raises &lt;code&gt;InvalidFileException&lt;/code&gt; when the file cannot be parsed.</source>
          <target state="translated">バイナリ形式のパーサーは、ファイルを解析できない場合に &lt;code&gt;InvalidFileException&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="315804a5fe161d8d161d75f269b0b17d66a550b3" translate="yes" xml:space="preserve">
          <source>The parser module defines a single exception, but may also pass other built-in exceptions from other portions of the Python runtime environment. See each function for information about the exceptions it can raise.</source>
          <target state="translated">パーサモジュールは単一の例外を定義しますが、Python ランタイム環境の他の部分から他の組み込みの例外を渡すこともできます。例外を発生させることができるかどうかについては、各関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="4451c261ab34fa6d68e139583b9b8883047b5ca2" translate="yes" xml:space="preserve">
          <source>The parser module is deprecated and will be removed in future versions of Python. For the majority of use cases you can leverage the Abstract Syntax Tree (AST) generation and compilation stage, using the &lt;a href=&quot;ast#module-ast&quot;&gt;&lt;code&gt;ast&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">パーサーモジュールは非推奨であり、Pythonの将来のバージョンで削除される予定です。ほとんどのユースケースでは、&lt;a href=&quot;ast#module-ast&quot;&gt; &lt;code&gt;ast&lt;/code&gt; &lt;/a&gt;モジュールを使用して、抽象構文木（AST）の生成およびコンパイル段階を活用できます。</target>
        </trans-unit>
        <trans-unit id="47584cab28c64372ee0a66e9d6a85d1c121c012c" translate="yes" xml:space="preserve">
          <source>The part of the &lt;code&gt;tagName&lt;/code&gt; following the colon if there is one, else the entire &lt;code&gt;tagName&lt;/code&gt;. The value is a string.</source>
          <target state="translated">コロンがある場合はコロンに続く &lt;code&gt;tagName&lt;/code&gt; の部分、それ以外の場合は &lt;code&gt;tagName&lt;/code&gt; 全体。値は文字列です。</target>
        </trans-unit>
        <trans-unit id="775fe3289edf96d060db49b7c4beddb50812e922" translate="yes" xml:space="preserve">
          <source>The part of the &lt;code&gt;tagName&lt;/code&gt; preceding the colon if there is one, else the empty string. The value is a string, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">コロンがある場合はコロンの前の &lt;code&gt;tagName&lt;/code&gt; の部分、ない場合は空の文字列。値は文字列、または &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="301b1af6ca20a6249a998cf35ee08045545a44b5" translate="yes" xml:space="preserve">
          <source>The part of the name following the colon if there is one, else the entire name. This is a read-only attribute.</source>
          <target state="translated">コロンがあれば名前の後に続く部分、なければ名前全体。これは読み取り専用の属性です。</target>
        </trans-unit>
        <trans-unit id="4b6ccf0c7b353e7f2cec6eae5206ddd756cf2a42" translate="yes" xml:space="preserve">
          <source>The part of the name preceding the colon if there is one, else the empty string.</source>
          <target state="translated">コロンがあればその前の名前の部分、なければ空の文字列。</target>
        </trans-unit>
        <trans-unit id="037c9a3ec1e20519c87dbc77e141395c51a490ab" translate="yes" xml:space="preserve">
          <source>The particular order that is returned may depend on the specific order in which the items were inserted in the graph. For example:</source>
          <target state="translated">返される特定の順序は、グラフに項目が挿入された特定の順序に依存する場合があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="62c63b165c6cabcf3fb6d0c615994fd200d6b0b6" translate="yes" xml:space="preserve">
          <source>The particular values &lt;code&gt;sys.hash_info.inf&lt;/code&gt;, &lt;code&gt;-sys.hash_info.inf&lt;/code&gt; and &lt;code&gt;sys.hash_info.nan&lt;/code&gt; are used as hash values for positive infinity, negative infinity, or nans (respectively). (All hashable nans have the same hash value.)</source>
          <target state="translated">特定の値 &lt;code&gt;sys.hash_info.inf&lt;/code&gt; 、 &lt;code&gt;-sys.hash_info.inf&lt;/code&gt; および &lt;code&gt;sys.hash_info.nan&lt;/code&gt; は、正の無限大、負の無限大、またはnans（それぞれ）のハッシュ値として使用されます。（すべてのハッシュ可能なナンは同じハッシュ値を持っています。）</target>
        </trans-unit>
        <trans-unit id="946eb4b10e46d85a90cbba3ce04154b4eb521ecd" translate="yes" xml:space="preserve">
          <source>The passed in callback is returned from the function, allowing this method to be used as a function decorator.</source>
          <target state="translated">渡されたコールバックが関数から返されるので、このメソッドを関数のデコレータとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="5d752ee7919317c8ef5e1cf67a53020b721a4c8d" translate="yes" xml:space="preserve">
          <source>The passed in object is returned from the function, allowing this method to be used as a function decorator.</source>
          <target state="translated">渡されたオブジェクトが関数から返されるので、このメソッドを関数のデコレータとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="80f6bc83b260a46ac7e550138dc8f3532aa793b1" translate="yes" xml:space="preserve">
          <source>The patch decorators are used for patching objects only within the scope of the function they decorate. They automatically handle the unpatching for you, even if exceptions are raised. All of these functions can also be used in with statements or as class decorators.</source>
          <target state="translated">パッチデコレータは、装飾する関数の範囲内でのみオブジェクトをパッチするために使用されます。例外が発生した場合でも、自動的にパッチの解除を処理してくれます。これらの関数はすべて、withステートメントやクラスデコレータとしても使用できます。</target>
        </trans-unit>
        <trans-unit id="e7081c6361ff2f82dac43fc3e7d1619bac7f3e3f" translate="yes" xml:space="preserve">
          <source>The patchers</source>
          <target state="translated">パッカーズ</target>
        </trans-unit>
        <trans-unit id="befdf46d9ff3d7a1dab0edf47f0724094bd9b1cc" translate="yes" xml:space="preserve">
          <source>The path the finder will search in.</source>
          <target state="translated">ファインダーが検索するパス。</target>
        </trans-unit>
        <trans-unit id="74622e717d8bc0ccf71b94541baf057d565c1905" translate="yes" xml:space="preserve">
          <source>The path to the bytecode file.</source>
          <target state="translated">バイトコードファイルのパスです。</target>
        </trans-unit>
        <trans-unit id="35ba4af1a78250ec64c0e2392522fa5eb8e9cfe4" translate="yes" xml:space="preserve">
          <source>The path to the source file.</source>
          <target state="translated">ソースファイルへのパスです。</target>
        </trans-unit>
        <trans-unit id="33a48412e2e67c67c7e92a4715e6b43be0fd6d15" translate="yes" xml:space="preserve">
          <source>The path to where a compiled version of the module is/should be stored (not set when the attribute would be inappropriate).</source>
          <target state="translated">コンパイルされたバージョンのモジュールが格納されている/格納されるべき場所へのパス(属性が不適切な場合は設定されません)。</target>
        </trans-unit>
        <trans-unit id="7a8d3812438de73c08083ea24db7366309aa89e4" translate="yes" xml:space="preserve">
          <source>The path to where the module data is stored (not set for built-in modules).</source>
          <target state="translated">モジュールのデータが保存されている場所へのパス(組み込みモジュールには設定されていません)。</target>
        </trans-unit>
        <trans-unit id="6d3422ae55b1cae3c297fd0d2a7bb36e7dde778d" translate="yes" xml:space="preserve">
          <source>The pattern is deliberately not stored as a loader attribute so that packages can continue discovery themselves. &lt;em&gt;top_level_dir&lt;/em&gt; is stored so &lt;code&gt;load_tests&lt;/code&gt; does not need to pass this argument in to &lt;code&gt;loader.discover()&lt;/code&gt;.</source>
          <target state="translated">パターンはローダーの属性として意図的に格納されないため、パッケージは自身で検出を続行できます。&lt;em&gt;top_level_dir&lt;/em&gt;が格納されるため、 &lt;code&gt;load_tests&lt;/code&gt; はこの引数を &lt;code&gt;loader.discover()&lt;/code&gt; に渡す必要がありません。</target>
        </trans-unit>
        <trans-unit id="7d752d1425dfb41387a9c85ad6aa7411b1b12149" translate="yes" xml:space="preserve">
          <source>The pattern may be a string or a &lt;a href=&quot;#re-objects&quot;&gt;pattern object&lt;/a&gt;.</source>
          <target state="translated">パターンは文字列または&lt;a href=&quot;#re-objects&quot;&gt;パターンオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4198abc6596ed451fcb1e4b11283fe46e47a9bdd" translate="yes" xml:space="preserve">
          <source>The pattern string from which the pattern object was compiled.</source>
          <target state="translated">パターンオブジェクトがコンパイルされたパターン文字列。</target>
        </trans-unit>
        <trans-unit id="ffa1bd1e5a895a32634127debbd4d54e90aadf39" translate="yes" xml:space="preserve">
          <source>The permutation tuples are emitted in lexicographic ordering according to the order of the input &lt;em&gt;iterable&lt;/em&gt;. So, if the input &lt;em&gt;iterable&lt;/em&gt; is sorted, the combination tuples will be produced in sorted order.</source>
          <target state="translated">順列タプルは、入力&lt;em&gt;iterableの&lt;/em&gt;順序に従って辞書式順序で発行されます。したがって、入力&lt;em&gt;反復可能オブジェクト&lt;/em&gt;がソートされている場合、組み合わせタプルはソートされた順序で生成されます。</target>
        </trans-unit>
        <trans-unit id="e0f91ca744d391bb72b78aa2afd81f096934a681" translate="yes" xml:space="preserve">
          <source>The philosophy and structure of the two classes is otherwise the same.</source>
          <target state="translated">2つのクラスの哲学や構造は、そうでなければ同じです。</target>
        </trans-unit>
        <trans-unit id="896181308dbe91750b43d1e225e480bee0e585e6" translate="yes" xml:space="preserve">
          <source>The platform does not provide information on whether the UUID was generated safely or not.</source>
          <target state="translated">プラットフォームは、UUIDが無事に生成されたかどうかの情報を提供していません。</target>
        </trans-unit>
        <trans-unit id="0ebc22381e3d1840239ccd9e5f1d63077ee7dfbb" translate="yes" xml:space="preserve">
          <source>The position of the sign (for positive resp. negative values), see below.</source>
          <target state="translated">符号の位置(正の値と負の値の場合)は、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="59952542e7942305c827d02265033fc6e9dbe5db" translate="yes" xml:space="preserve">
          <source>The positional argument pattern matches that of &lt;a href=&quot;stdtypes#range&quot;&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/a&gt;. Keyword arguments should not be used because the function may use them in unexpected ways.</source>
          <target state="translated">位置引数パターンは&lt;a href=&quot;stdtypes#range&quot;&gt; &lt;code&gt;range()&lt;/code&gt; の&lt;/a&gt;パターンと一致します。関数が予期しない方法でキーワード引数を使用する可能性があるため、キーワード引数は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="112fe2d97f81ed80cec8656f5adddd507c3ca3eb" translate="yes" xml:space="preserve">
          <source>The positional-only arguments &lt;em&gt;path&lt;/em&gt;, &lt;em&gt;args&lt;/em&gt;, and &lt;em&gt;env&lt;/em&gt; are similar to &lt;a href=&quot;#os.execve&quot;&gt;&lt;code&gt;execve()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">位置のみの引数&lt;em&gt;path&lt;/em&gt;、&lt;em&gt;args&lt;/em&gt;、および&lt;em&gt;env&lt;/em&gt;は&lt;a href=&quot;#os.execve&quot;&gt; &lt;code&gt;execve()&lt;/code&gt; に&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="fe3e48c18afdb606d8cb78f91a0899ad96906f15" translate="yes" xml:space="preserve">
          <source>The possible values for &lt;code&gt;'p_sign_posn'&lt;/code&gt; and &lt;code&gt;'n_sign_posn'&lt;/code&gt; are given below.</source>
          <target state="translated">&lt;code&gt;'p_sign_posn'&lt;/code&gt; および &lt;code&gt;'n_sign_posn'&lt;/code&gt; の可能な値を以下に示します。</target>
        </trans-unit>
        <trans-unit id="f6833954936c8ae7c88396b0dc8d3e749d41eb23" translate="yes" xml:space="preserve">
          <source>The precise rules are as follows: suppose that the result formatted with presentation type &lt;code&gt;'e'&lt;/code&gt; and precision &lt;code&gt;p-1&lt;/code&gt; would have exponent &lt;code&gt;exp&lt;/code&gt;. Then, if &lt;code&gt;m &amp;lt;= exp &amp;lt; p&lt;/code&gt;, where &lt;code&gt;m&lt;/code&gt; is -4 for floats and -6 for &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;Decimals&lt;/code&gt;&lt;/a&gt;, the number is formatted with presentation type &lt;code&gt;'f'&lt;/code&gt; and precision &lt;code&gt;p-1-exp&lt;/code&gt;. Otherwise, the number is formatted with presentation type &lt;code&gt;'e'&lt;/code&gt; and precision &lt;code&gt;p-1&lt;/code&gt;. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the &lt;code&gt;'#'&lt;/code&gt; option is used.</source>
          <target state="translated">正確な規則は次のとおりです。表示タイプ &lt;code&gt;'e'&lt;/code&gt; と精度 &lt;code&gt;p-1&lt;/code&gt; でフォーマットされた結果の指数が &lt;code&gt;exp&lt;/code&gt; であるとします。次に、 &lt;code&gt;m &amp;lt;= exp &amp;lt; p&lt;/code&gt; である場合（ &lt;code&gt;m&lt;/code&gt; はfloatの場合は-4、&lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;Decimals&lt;/code&gt; &lt;/a&gt;場合は-6 ）、数値は表示タイプ &lt;code&gt;'f'&lt;/code&gt; および精度 &lt;code&gt;p-1-exp&lt;/code&gt; でフォーマットされます。それ以外の場合、数値は表示タイプ &lt;code&gt;'e'&lt;/code&gt; および精度 &lt;code&gt;p-1&lt;/code&gt; でフォーマットされます。どちらの場合も、意味のない末尾のゼロは仮数から削除され、 &lt;code&gt;'#'&lt;/code&gt; オプションを使用しない限り、その後に数字が残っていない場合は小数点も削除されます。</target>
        </trans-unit>
        <trans-unit id="41fdd41826344d0be40e07a7c74ff491f514c5f0" translate="yes" xml:space="preserve">
          <source>The precision determines the number of digits after the decimal point and defaults to 6.</source>
          <target state="translated">精度は小数点以下の桁数を決定し、デフォルトは6です。</target>
        </trans-unit>
        <trans-unit id="9b79033d293b6c31c75ffa5814aa5c087d000b3d" translate="yes" xml:space="preserve">
          <source>The precision determines the number of significant digits before and after the decimal point and defaults to 6.</source>
          <target state="translated">精度は小数点以下の有効桁数を決定し、デフォルトは6です。</target>
        </trans-unit>
        <trans-unit id="3cd6b8e24856e292a10d35639bc3c6b06da2cd2f" translate="yes" xml:space="preserve">
          <source>The precision of the various real-time functions may be less than suggested by the units in which their value or argument is expressed. E.g. on most Unix systems, the clock &amp;ldquo;ticks&amp;rdquo; only 50 or 100 times a second.</source>
          <target state="translated">さまざまなリアルタイム関数の精度は、それらの値または引数が表現される単位によって示唆されるよりも低い場合があります。たとえば、ほとんどのUnixシステムでは、クロックは1秒に50または100回しか「刻み」ません。</target>
        </trans-unit>
        <trans-unit id="31605b7764d8a03a7877d08fc669e90605f06565" translate="yes" xml:space="preserve">
          <source>The predicate must be a callable which result will be interpreted as a boolean value. The final value is the return value.</source>
          <target state="translated">述語は、結果がブール値として解釈される呼び出し可能なものでなければなりません。最終的な値は戻り値です。</target>
        </trans-unit>
        <trans-unit id="399c6b1dfd67b2c650301b9195aaff4a7832e1a5" translate="yes" xml:space="preserve">
          <source>The preferred way to use a Condition is an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-with&quot;&gt;&lt;code&gt;async with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">条件を使用する好ましい方法は、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-with&quot;&gt; &lt;code&gt;async with&lt;/code&gt; &lt;/a&gt;ステートメントです。</target>
        </trans-unit>
        <trans-unit id="7d88a730e18917a56485cbcfcd85f3d8377fab9c" translate="yes" xml:space="preserve">
          <source>The preferred way to use a Condition is an &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-with&quot;&gt;&lt;code&gt;async with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">条件を使用するための好ましい方法は、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-with&quot;&gt; &lt;code&gt;async with&lt;/code&gt; &lt;/a&gt;ステートメントです。</target>
        </trans-unit>
        <trans-unit id="9ee67a620d44fb1681005258c0c62d822ecd2282" translate="yes" xml:space="preserve">
          <source>The preferred way to use a Lock is an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-with&quot;&gt;&lt;code&gt;async with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">Lockを使用する好ましい方法は、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-with&quot;&gt; &lt;code&gt;async with&lt;/code&gt; &lt;/a&gt;ステートメントです。</target>
        </trans-unit>
        <trans-unit id="72c98823a0ffab256e4ec15370f0e5edc89e30b8" translate="yes" xml:space="preserve">
          <source>The preferred way to use a Lock is an &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-with&quot;&gt;&lt;code&gt;async with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">Lockを使用するための推奨される方法は、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-with&quot;&gt; &lt;code&gt;async with&lt;/code&gt; &lt;/a&gt;ステートメントです。</target>
        </trans-unit>
        <trans-unit id="9bf6315de2d03fd0877883f3226ad7bcb258a563" translate="yes" xml:space="preserve">
          <source>The preferred way to use a Semaphore is an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-with&quot;&gt;&lt;code&gt;async with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">セマフォを使用する好ましい方法は、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-with&quot;&gt; &lt;code&gt;async with&lt;/code&gt; &lt;/a&gt;ステートメントです。</target>
        </trans-unit>
        <trans-unit id="73cfcf54cb5d398dd23695dfb914f4aa72e6e417" translate="yes" xml:space="preserve">
          <source>The preferred way to use a Semaphore is an &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-with&quot;&gt;&lt;code&gt;async with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">セマフォを使用するための好ましい方法は、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-with&quot;&gt; &lt;code&gt;async with&lt;/code&gt; &lt;/a&gt;ステートメントです。</target>
        </trans-unit>
        <trans-unit id="fe4a24206790bdb6dfb50de90139956972f17d56" translate="yes" xml:space="preserve">
          <source>The prefix defines the number of leading bits in an address that are compared to determine whether or not an address is part of a network.</source>
          <target state="translated">プレフィックスは、アドレスがネットワークの一部であるかどうかを判断するために比較されるアドレスの先頭ビット数を定義します。</target>
        </trans-unit>
        <trans-unit id="e953212a6913d9281232d06868614a71454e1b60" translate="yes" xml:space="preserve">
          <source>The prefix(es) to search for may be any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索するプレフィックスは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="2a361ce2a67573642097e5871616b5630b23a5c9" translate="yes" xml:space="preserve">
          <source>The prefix(es) to search for may be any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索するプレフィックスは、任意の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトに&lt;/a&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="7e690cd09d2161493928c7ed836c69440297a338" translate="yes" xml:space="preserve">
          <source>The previous section explains how to read CGI form data using the &lt;code&gt;FieldStorage&lt;/code&gt; class. This section describes a higher level interface which was added to this class to allow one to do it in a more readable and intuitive way. The interface doesn&amp;rsquo;t make the techniques described in previous sections obsolete &amp;mdash; they are still useful to process file uploads efficiently, for example.</source>
          <target state="translated">前のセクションでは、 &lt;code&gt;FieldStorage&lt;/code&gt; クラスを使用してCGIフォームデータを読み取る方法について説明しました。このセクションでは、このクラスに追加された、より読みやすく直感的な方法でそれを実行できるようにする、より高いレベルのインターフェースについて説明します。このインターフェースは、前のセクションで説明した手法を時代遅れにするものではありません。たとえば、ファイルのアップロードを効率的に処理する場合などには依然として役立ちます。</target>
        </trans-unit>
        <trans-unit id="7523173e59a7046859cb60342d5e26f6d306040f" translate="yes" xml:space="preserve">
          <source>The primary API method. It takes a format string and an arbitrary set of positional and keyword arguments. It is just a wrapper that calls &lt;a href=&quot;#string.Formatter.vformat&quot;&gt;&lt;code&gt;vformat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">主要なAPIメソッド。これは、フォーマット文字列と、位置およびキーワード引数の任意のセットを取ります。これは、&lt;a href=&quot;#string.Formatter.vformat&quot;&gt; &lt;code&gt;vformat()&lt;/code&gt; &lt;/a&gt;を呼び出す単なるラッパーです。</target>
        </trans-unit>
        <trans-unit id="4d20207a32c469b27878eb965894ae9e5054d063" translate="yes" xml:space="preserve">
          <source>The primary entry point is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;:</source>
          <target state="translated">主なエントリポイントは&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;ジェネレータ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9632d79faa271090d54fe68aba8e08af8dd702cf" translate="yes" xml:space="preserve">
          <source>The primary entry point is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;:</source>
          <target state="translated">主要なエントリポイントは&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;ジェネレータ&lt;/a&gt;です：</target>
        </trans-unit>
        <trans-unit id="99dba641bcba4143cddc64727faefe6f987cf349" translate="yes" xml:space="preserve">
          <source>The primary information is passed in &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;, which are combined using &lt;code&gt;msg % args&lt;/code&gt; to create the &lt;code&gt;message&lt;/code&gt; field of the record.</source>
          <target state="translated">主な情報は &lt;code&gt;msg&lt;/code&gt; と &lt;code&gt;args&lt;/code&gt; で渡されます。これらは &lt;code&gt;msg % args&lt;/code&gt; を使用して結合され、レコードの &lt;code&gt;message&lt;/code&gt; フィールドを作成します。</target>
        </trans-unit>
        <trans-unit id="7bfbe0efc6318910175e0591c9d489213ef2eebb" translate="yes" xml:space="preserve">
          <source>The primary use case for &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; is the one given in the class documentation: supporting a variable number of context managers and other cleanup operations in a single &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. The variability may come from the number of context managers needed being driven by user input (such as opening a user specified collection of files), or from some of the context managers being optional:</source>
          <target state="translated">&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;の主な使用例は、クラスのドキュメントに記載されているものです。1つの&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントで、可変数のコンテキストマネージャーとその他のクリーンアップ操作をサポートしています。変動性は、ユーザー入力（ユーザーが指定したファイルのコレクションを開くなど）によって駆動される必要のあるコンテキストマネージャーの数、またはオプションのコンテキストマネージャーの一部に起因します。</target>
        </trans-unit>
        <trans-unit id="dbb93a98c46da8ad3ba58b1529253e2426f9275b" translate="yes" xml:space="preserve">
          <source>The primary use case for &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; is the one given in the class documentation: supporting a variable number of context managers and other cleanup operations in a single &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. The variability may come from the number of context managers needed being driven by user input (such as opening a user specified collection of files), or from some of the context managers being optional:</source>
          <target state="translated">&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;の主なユースケースは、クラスのドキュメント&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;記載されているものです。単一のwithステートメントで可変数のコンテキストマネージャーやその他のクリーンアップ操作をサポートします。変動性は、ユーザー入力（ユーザー指定のファイルのコレクションを開くなど）によって駆動される必要のあるコンテキストマネージャーの数、またはオプションのコンテキストマネージャーの一部に起因する場合があります。</target>
        </trans-unit>
        <trans-unit id="29e9483a317900afadce553033a91cd1d47b9bcf" translate="yes" xml:space="preserve">
          <source>The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions.</source>
          <target state="translated">主な組み込み型は、数値、シーケンス、マッピング、クラス、インスタンス、および例外です。</target>
        </trans-unit>
        <trans-unit id="53a56e829c4ee5d3a496f807f49d36341548a22a" translate="yes" xml:space="preserve">
          <source>The printing of warning messages is done by calling &lt;a href=&quot;#warnings.showwarning&quot;&gt;&lt;code&gt;showwarning()&lt;/code&gt;&lt;/a&gt;, which may be overridden; the default implementation of this function formats the message by calling &lt;a href=&quot;#warnings.formatwarning&quot;&gt;&lt;code&gt;formatwarning()&lt;/code&gt;&lt;/a&gt;, which is also available for use by custom implementations.</source>
          <target state="translated">警告メッセージの印刷は、オーバーライドされる可能性がある&lt;a href=&quot;#warnings.showwarning&quot;&gt; &lt;code&gt;showwarning()&lt;/code&gt; を&lt;/a&gt;呼び出すことによって行われます。この関数のデフォルトの実装では、&lt;a href=&quot;#warnings.formatwarning&quot;&gt; &lt;code&gt;formatwarning()&lt;/code&gt; を&lt;/a&gt;呼び出してメッセージをフォーマットします。これは、カスタム実装でも使用できます。</target>
        </trans-unit>
        <trans-unit id="825b7993e09a5012896880aa81ed2189c1fc5fc3" translate="yes" xml:space="preserve">
          <source>The priorities of the binary bitwise operations are all lower than the numeric operations and higher than the comparisons; the unary operation &lt;code&gt;~&lt;/code&gt; has the same priority as the other unary numeric operations (&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt;).</source>
          <target state="translated">バイナリビット演算の優先度は、すべて数値演算より低く、比較より高くなっています。単項演算 &lt;code&gt;~&lt;/code&gt; は、他の単項数値演算（ &lt;code&gt;+&lt;/code&gt; および &lt;code&gt;-&lt;/code&gt; ）と同じ優先順位を持ちます。</target>
        </trans-unit>
        <trans-unit id="5bf0a8ae599a694d8728a80398296f63055fcd91" translate="yes" xml:space="preserve">
          <source>The probability distribution function is:</source>
          <target state="translated">確率分布関数は</target>
        </trans-unit>
        <trans-unit id="6f4b0a33ec009f539e41f7c7861882fe3861eb27" translate="yes" xml:space="preserve">
          <source>The problem is more important with &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt; than with the lower-overhead &lt;a href=&quot;#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt;. For this reason, &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt; provides a means of calibrating itself for a given platform so that this error can be probabilistically (on the average) removed. After the profiler is calibrated, it will be more accurate (in a least square sense), but it will sometimes produce negative numbers (when call counts are exceptionally low, and the gods of probability work against you :-). ) Do &lt;em&gt;not&lt;/em&gt; be alarmed by negative numbers in the profile. They should &lt;em&gt;only&lt;/em&gt; appear if you have calibrated your profiler, and the results are actually better than without calibration.</source>
          <target state="translated">この問題は、オーバーヘッドの低い&lt;a href=&quot;#module-cProfile&quot;&gt; &lt;code&gt;cProfile&lt;/code&gt; &lt;/a&gt;よりも&lt;a href=&quot;#module-profile&quot;&gt; &lt;code&gt;profile&lt;/code&gt; &lt;/a&gt;方が重要です。このため、&lt;a href=&quot;#module-profile&quot;&gt; &lt;code&gt;profile&lt;/code&gt; &lt;/a&gt;は特定のプラットフォーム用にそれ自体を調整する手段を提供するため、このエラーは確率的に（平均して）削除できます。プロファイラーが調整されると、より正確になりますが（最小二乗の意味で）、負の数値が生成される場合があります（コール数が非常に少なく、確率の神があなたに逆らう場合:-)。 ）プロファイル内の負の数に驚か&lt;em&gt;ない&lt;/em&gt;でください。彼らはすべき&lt;em&gt;だけ&lt;/em&gt;、あなたのプロファイラをキャリブレーションしている場合に表示され、その結果が、実際にキャリブレーションなしよりも優れています。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7bf59022d95e063a71d9d155d556fa687e8151c" translate="yes" xml:space="preserve">
          <source>The problem with the code is that you should never expect that a client will provide valid input to your scripts. For example, if a curious user appends another &lt;code&gt;user=foo&lt;/code&gt; pair to the query string, then the script would crash, because in this situation the &lt;code&gt;getvalue(&quot;user&quot;)&lt;/code&gt; method call returns a list instead of a string. Calling the &lt;a href=&quot;stdtypes#str.upper&quot;&gt;&lt;code&gt;upper()&lt;/code&gt;&lt;/a&gt; method on a list is not valid (since lists do not have a method of this name) and results in an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">コードの問題は、クライアントがスクリプトに有効な入力を提供することを決して期待してはならないことです。たとえば、好奇心旺盛なユーザーが別の &lt;code&gt;user=foo&lt;/code&gt; ペアをクエリ文字列に追加すると、この状況では &lt;code&gt;getvalue(&quot;user&quot;)&lt;/code&gt; メソッド呼び出しが文字列ではなくリストを返すため、スクリプトがクラッシュします。リストの&lt;a href=&quot;stdtypes#str.upper&quot;&gt; &lt;code&gt;upper()&lt;/code&gt; &lt;/a&gt;メソッドの呼び出しは無効であり（リストにはこの名前のメソッドがないため）、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="96fdb4e91d747f7b382ca34963ea4e97a833f290" translate="yes" xml:space="preserve">
          <source>The procedural interface provides functions which are derived from the methods of the classes &lt;a href=&quot;#turtle.Screen&quot;&gt;&lt;code&gt;Screen&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#turtle.Turtle&quot;&gt;&lt;code&gt;Turtle&lt;/code&gt;&lt;/a&gt;. They have the same names as the corresponding methods. A screen object is automatically created whenever a function derived from a Screen method is called. An (unnamed) turtle object is automatically created whenever any of the functions derived from a Turtle method is called.</source>
          <target state="translated">手続き型インターフェイスは、クラス&lt;a href=&quot;#turtle.Screen&quot;&gt; &lt;code&gt;Screen&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#turtle.Turtle&quot;&gt; &lt;code&gt;Turtle&lt;/code&gt; の&lt;/a&gt;メソッドから派生した関数を提供します。それらは対応するメソッドと同じ名前を持っています。Screenオブジェクトは、Screenメソッドから派生した関数が呼び出されると自動的に作成されます。Turtleメソッドから派生した関数が呼び出されると、（名前のない）turtleオブジェクトが自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="2e489b4dd7453fa49df07a28774b20b3ff3ca536" translate="yes" xml:space="preserve">
          <source>The process ID of the child process.</source>
          <target state="translated">子プロセスのプロセスID。</target>
        </trans-unit>
        <trans-unit id="150de663b2d1dfe4e98950a0d814ed1d1e220721" translate="yes" xml:space="preserve">
          <source>The process&amp;rsquo;s authentication key (a byte string).</source>
          <target state="translated">プロセスの認証キー（バイト文字列）。</target>
        </trans-unit>
        <trans-unit id="17a501bfd01684f2b434b6e89089168e44514201" translate="yes" xml:space="preserve">
          <source>The process&amp;rsquo;s daemon flag, a Boolean value. This must be set before &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">プロセスのデーモンフラグ。ブール値。これは、&lt;a href=&quot;#multiprocessing.Process.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt;が呼び出される前に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="06c818f8e2a507968c04b9b39e1decda880a5cf5" translate="yes" xml:space="preserve">
          <source>The process&amp;rsquo;s name. The name is a string used for identification purposes only. It has no semantics. Multiple processes may be given the same name.</source>
          <target state="translated">プロセスの名前。名前は、識別目的でのみ使用される文字列です。セマンティクスはありません。複数のプロセスに同じ名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="a9c95a490df7fa30b946fe0f7a64b2a77f6f669a" translate="yes" xml:space="preserve">
          <source>The produced code string will not necessarily be equal to the original code that generated the &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt; object (without any compiler optimizations, such as constant tuples/frozensets).</source>
          <target state="translated">生成されるコード文字列は、&lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt;オブジェクトを生成した元のコードと必ずしも同じではありません（定数タプル/フリーズセットなどのコンパイラーの最適化なし）。</target>
        </trans-unit>
        <trans-unit id="b2ae1e6a3ccabf77f11a716a76fae3c85a9de04b" translate="yes" xml:space="preserve">
          <source>The profiler modules are designed to provide an execution profile for a given program, not for benchmarking purposes (for that, there is &lt;a href=&quot;timeit#module-timeit&quot;&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/a&gt; for reasonably accurate results). This particularly applies to benchmarking Python code against C code: the profilers introduce overhead for Python code, but not for C-level functions, and so the C code would seem faster than any Python one.</source>
          <target state="translated">プロファイラーモジュールは、ベンチマークの目的ではなく、特定のプログラムの実行プロファイルを提供するように設計されています（そのため、かなり正確な結果を&lt;a href=&quot;timeit#module-timeit&quot;&gt; &lt;code&gt;timeit&lt;/code&gt; &lt;/a&gt;ための時間枠があります）。これは特に、Cコードに対するPythonコードのベンチマークに適用されます。プロファイラーはPythonコードにオーバーヘッドを導入しますが、Cレベルの関数には導入しないため、Cコードは他のPythonコードよりも高速に見えます。</target>
        </trans-unit>
        <trans-unit id="1ad274b67435cbea4d0f0022c9cb8f04c789c28d" translate="yes" xml:space="preserve">
          <source>The profiler of the &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt; module subtracts a constant from each event handling time to compensate for the overhead of calling the time function, and socking away the results. By default, the constant is 0. The following procedure can be used to obtain a better constant for a given platform (see &lt;a href=&quot;#profile-limitations&quot;&gt;Limitations&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#module-profile&quot;&gt; &lt;code&gt;profile&lt;/code&gt; &lt;/a&gt;モジュールのプロファイラーは、各イベント処理時間から定数を差し引いて、時間関数を呼び出して結果を取得するオーバーヘッドを補正します。デフォルトでは、定数は0です。次の手順を使用して、特定のプラットフォームに適した定数を取得できます（&lt;a href=&quot;#profile-limitations&quot;&gt;制限&lt;/a&gt;事項を参照）。</target>
        </trans-unit>
        <trans-unit id="c57ccc0f47b6d649d42fac7c15dd4c76568d4399" translate="yes" xml:space="preserve">
          <source>The prompt issued to solicit input.</source>
          <target state="translated">入力を求めるために発行されるプロンプト。</target>
        </trans-unit>
        <trans-unit id="83875c7800a2b76dd59acb9bb82a7881a37ecba4" translate="yes" xml:space="preserve">
          <source>The property list (&lt;code&gt;.plist&lt;/code&gt;) file format is a simple serialization supporting basic object types, like dictionaries, lists, numbers and strings. Usually the top level object is a dictionary.</source>
          <target state="translated">プロパティリスト（ &lt;code&gt;.plist&lt;/code&gt; ）ファイル形式は、辞書、リスト、数値、文字列などの基本的なオブジェクトタイプをサポートする単純なシリアル化です。通常、最上位のオブジェクトは辞書です。</target>
        </trans-unit>
        <trans-unit id="a692e4b23f49571c480a6608de6502020e3e6363" translate="yes" xml:space="preserve">
          <source>The proposal and rationale for this feature, including links to earlier implementations and information about similar features in other languages.</source>
          <target state="translated">以前の実装へのリンクや他の言語での類似機能に関する情報を含む、この機能の提案と根拠。</target>
        </trans-unit>
        <trans-unit id="d3279c37a3d4b93f2763c17e116a163fb04d69c0" translate="yes" xml:space="preserve">
          <source>The proposal which described this feature for inclusion in the Python standard library.</source>
          <target state="translated">Python標準ライブラリへのインクルードのためのこの機能を記述した提案。</target>
        </trans-unit>
        <trans-unit id="6aad5f6edb9228644868ffcfbe2652bf80458149" translate="yes" xml:space="preserve">
          <source>The protocol instance is coupled with the transport by calling its &lt;a href=&quot;asyncio-protocol#asyncio.BaseProtocol.connection_made&quot;&gt;&lt;code&gt;connection_made()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">プロトコルインスタンスは、その&lt;a href=&quot;asyncio-protocol#asyncio.BaseProtocol.connection_made&quot;&gt; &lt;code&gt;connection_made()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによってトランスポートと結合されます。</target>
        </trans-unit>
        <trans-unit id="5bcebb7947c21cec173aaf44168e072aa830c96e" translate="yes" xml:space="preserve">
          <source>The protocol version chosen when constructing the context. This attribute is read-only.</source>
          <target state="translated">コンテキストを構築する際に選択されたプロトコルのバージョン。この属性は読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="4b8e37987302667a8c6a5a30086ea70af54f58fc" translate="yes" xml:space="preserve">
          <source>The protocol version of the pickle is detected automatically, so no protocol argument is needed.</source>
          <target state="translated">ピクルスのプロトコルバージョンは自動的に検出されるので、プロトコル引数は必要ありません。</target>
        </trans-unit>
        <trans-unit id="304bb59bee6afe03568f30f120fa0b442a6c61e2" translate="yes" xml:space="preserve">
          <source>The protocol version of the pickle is detected automatically, so no protocol argument is needed. Bytes past the pickled representation of the object are ignored.</source>
          <target state="translated">ピクルスのプロトコルバージョンは自動的に検出されるので、プロトコル引数は必要ありません。オブジェクトのピクルス表現を超えたバイトは無視されます。</target>
        </trans-unit>
        <trans-unit id="27bd7c4faffc395f3247caddbe9693091c3dd829" translate="yes" xml:space="preserve">
          <source>The protocol, options, cipher and other settings may change to more restrictive values anytime without prior deprecation. The values represent a fair balance between compatibility and security.</source>
          <target state="translated">プロトコル、オプション、サイファー、その他の設定は、事前に非推奨とされることなく、いつでもより制限的な値に変更される可能性があります。この値は互換性とセキュリティの公平なバランスを表しています。</target>
        </trans-unit>
        <trans-unit id="9bb42a552b302f1dbded8b49b736ac990615d6f9" translate="yes" xml:space="preserve">
          <source>The proxy types in &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; do nothing to support comparisons by value. So, for instance, we have:</source>
          <target state="translated">&lt;a href=&quot;#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;のプロキシタイプは、値による比較をサポートするために何もしません。したがって、たとえば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="ef765547ec364b540a8f16063c0fa31ef2bb74cb" translate="yes" xml:space="preserve">
          <source>The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the &lt;a href=&quot;secrets#module-secrets&quot;&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">このモジュールの疑似ランダムジェネレーターは、セキュリティ上の目的で使用しないでください。セキュリティまたは暗号化の使用については、&lt;a href=&quot;secrets#module-secrets&quot;&gt; &lt;code&gt;secrets&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="a7da2517da5604deefcd3b219dc6bc72a5207e5e" translate="yes" xml:space="preserve">
          <source>The public identifier for the external subset of the document type definition. This will be a string or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">文書型定義の外部サブセットの公開識別子。これは文字列または &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4cc24cc4f00882f93419ab13bd6a8c64685b3f66" translate="yes" xml:space="preserve">
          <source>The public methods of the Screen and Turtle classes are documented extensively via docstrings. So these can be used as online-help via the Python help facilities:</source>
          <target state="translated">Screen と Turtle クラスのパブリックメソッドは、docstrings を通じて広範囲にドキュメント化されています。そのため、これらはPythonのヘルプ機能を介してオンラインヘルプとして利用することができます。</target>
        </trans-unit>
        <trans-unit id="2bed0ab16eca2867630c9e7cc4d96b74b1c2265f" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;a href=&quot;#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; package is two-fold. One is to provide the implementation of the &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; statement (and thus, by extension, the &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; function) in Python source code. This provides an implementation of &lt;code&gt;import&lt;/code&gt; which is portable to any Python interpreter. This also provides an implementation which is easier to comprehend than one implemented in a programming language other than Python.</source>
          <target state="translated">&lt;a href=&quot;#module-importlib&quot;&gt; &lt;code&gt;importlib&lt;/code&gt; &lt;/a&gt;パッケージの目的は2つあります。1つは、Pythonソースコードで&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;ステートメント（つまり、拡張によって&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;関数）の実装を提供することです。これにより、Pythonインタープリターに移植可能な &lt;code&gt;import&lt;/code&gt; 実装が提供されます。これは、Python以外のプログラミング言語で実装されたものよりも理解しやすい実装も提供します。</target>
        </trans-unit>
        <trans-unit id="c5af7de07ad25b8b16b26a5eec475ceb8c25175a" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;a href=&quot;#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; package is two-fold. One is to provide the implementation of the &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; statement (and thus, by extension, the &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; function) in Python source code. This provides an implementation of &lt;code&gt;import&lt;/code&gt; which is portable to any Python interpreter. This also provides an implementation which is easier to comprehend than one implemented in a programming language other than Python.</source>
          <target state="translated">&lt;a href=&quot;#module-importlib&quot;&gt; &lt;code&gt;importlib&lt;/code&gt; &lt;/a&gt;パッケージの目的は2つあります。 1つは、Pythonソースコードで&lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;ステートメント（したがって、拡張により&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;関数）の実装を提供することです。これにより、Pythonインタープリターに移植可能な &lt;code&gt;import&lt;/code&gt; 実装が提供されます。これにより、Python以外のプログラミング言語で実装されたものよりも理解しやすい実装も提供されます。</target>
        </trans-unit>
        <trans-unit id="b16dd66cb16f34ace27bac31206afc6d4d2fe723" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;code&gt;find_library()&lt;/code&gt; function is to locate a library in a way similar to what the compiler or runtime loader does (on platforms with several versions of a shared library the most recent should be loaded), while the ctypes library loaders act like when a program is run, and call the runtime loader directly.</source>
          <target state="translated">&lt;code&gt;find_library()&lt;/code&gt; 関数の目的は、ctypesライブラリローダーが次のように機能する一方で、コンパイラーまたはランタイムローダーが行う方法（最新バージョンをロードする必要がある共有ライブラリの複数のバージョンがあるプラットフォーム上）と同様の方法でライブラリを見つけることですプログラムが実行され、ランタイムローダーを直接呼び出すとき。</target>
        </trans-unit>
        <trans-unit id="fa702db0cff6f2f3895045c3752a9fbb38f37c5c" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;em&gt;context&lt;/em&gt; argument is determining what to do if &lt;em&gt;value&lt;/em&gt; is a malformed string. If the context traps &lt;a href=&quot;#decimal.InvalidOperation&quot;&gt;&lt;code&gt;InvalidOperation&lt;/code&gt;&lt;/a&gt;, an exception is raised; otherwise, the constructor returns a new Decimal with the value of &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;コンテキスト&lt;/em&gt;引数の目的は、&lt;em&gt;値&lt;/em&gt;が不正な形式の文字列である場合にどうするかを決定することです。コンテキストが&lt;a href=&quot;#decimal.InvalidOperation&quot;&gt; &lt;code&gt;InvalidOperation&lt;/code&gt; を&lt;/a&gt;トラップすると、例外が発生します。それ以外の場合、コンストラクタは &lt;code&gt;NaN&lt;/code&gt; の値を持つ新しいDecimalを返します。</target>
        </trans-unit>
        <trans-unit id="1d7470421cad5575eb47710dc31f2ce6a15d669a" translate="yes" xml:space="preserve">
          <source>The pysqlite web page &amp;ndash; sqlite3 is developed externally under the name &amp;ldquo;pysqlite&amp;rdquo;.</source>
          <target state="translated">pysqlite Webページ&amp;ndash; sqlite3は、「pysqlite」という名前で外部的に開発されています。</target>
        </trans-unit>
        <trans-unit id="df0d2d334ee13950a07c31e697402c72d3e65e9f" translate="yes" xml:space="preserve">
          <source>The quoting is compatible with UNIX shells and with &lt;a href=&quot;#shlex.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">引用は、UNIXシェルおよび&lt;a href=&quot;#shlex.split&quot;&gt; &lt;code&gt;split()&lt;/code&gt; &lt;/a&gt;と互換性があります。</target>
        </trans-unit>
        <trans-unit id="8ce58c924d511abccc91112f9868301eab2a2623" translate="yes" xml:space="preserve">
          <source>The range really is &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;61&lt;/code&gt;; value &lt;code&gt;60&lt;/code&gt; is valid in timestamps representing &lt;a href=&quot;https://en.wikipedia.org/wiki/Leap_second&quot;&gt;leap seconds&lt;/a&gt; and value &lt;code&gt;61&lt;/code&gt; is supported for historical reasons.</source>
          <target state="translated">範囲は本当にある &lt;code&gt;0&lt;/code&gt; に &lt;code&gt;61&lt;/code&gt; 。値 &lt;code&gt;60&lt;/code&gt; は&lt;a href=&quot;https://en.wikipedia.org/wiki/Leap_second&quot;&gt;うるう秒&lt;/a&gt;を表すタイムスタンプで有効であり、値 &lt;code&gt;61&lt;/code&gt; は歴史的な理由でサポートされています。</target>
        </trans-unit>
        <trans-unit id="8fd421df5dc2685a581e00c1459b24396ed076e6" translate="yes" xml:space="preserve">
          <source>The raw stream API is described in detail in the docs of &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">RawストリームAPIについては、&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;のドキュメントで詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="92473e24fa37abfabba3bd84c199a20643551ee1" translate="yes" xml:space="preserve">
          <source>The raw version number of the OpenSSL library, as a single integer:</source>
          <target state="translated">OpenSSL ライブラリの生のバージョン番号を整数で指定します。</target>
        </trans-unit>
        <trans-unit id="f5f4e5aa79fcae7b1a4aee5bb988c8d392ca329d" translate="yes" xml:space="preserve">
          <source>The reason for defaulting to &lt;code&gt;1&lt;/code&gt; as the starting number and not &lt;code&gt;0&lt;/code&gt; is that &lt;code&gt;0&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; in a boolean sense, but enum members all evaluate to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">デフォルトの理由 &lt;code&gt;1&lt;/code&gt; 開始番号としてではなく &lt;code&gt;0&lt;/code&gt; であることである &lt;code&gt;0&lt;/code&gt; がある &lt;code&gt;False&lt;/code&gt; ブール意味ではなく、列挙型のメンバーは全員に評価する &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b8da247393cb3f901f4c9827fb1c55335da705f" translate="yes" xml:space="preserve">
          <source>The reason for this error. It can be a message string or another exception instance.</source>
          <target state="translated">このエラーの理由。メッセージ文字列か別の例外インスタンスを指定します。</target>
        </trans-unit>
        <trans-unit id="7cdf1c2c1cd73bb92ad5a97181b39bc3deca2b0b" translate="yes" xml:space="preserve">
          <source>The reason the attributes exist is to save you having to subclass - you can use the same callables for instances of &lt;a href=&quot;#logging.handlers.RotatingFileHandler&quot;&gt;&lt;code&gt;RotatingFileHandler&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#logging.handlers.TimedRotatingFileHandler&quot;&gt;&lt;code&gt;TimedRotatingFileHandler&lt;/code&gt;&lt;/a&gt;. If either the namer or rotator callable raises an exception, this will be handled in the same way as any other exception during an &lt;code&gt;emit()&lt;/code&gt; call, i.e. via the &lt;code&gt;handleError()&lt;/code&gt; method of the handler.</source>
          <target state="translated">属性が存在する理由は、あなたがサブクラスを有する保存することです-あなたはのインスタンスに同じ呼び出し可能オブジェクトを使用することができます&lt;a href=&quot;#logging.handlers.RotatingFileHandler&quot;&gt; &lt;code&gt;RotatingFileHandler&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#logging.handlers.TimedRotatingFileHandler&quot;&gt; &lt;code&gt;TimedRotatingFileHandler&lt;/code&gt; &lt;/a&gt;。ナマラーまたはローテーターの呼び出し可能オブジェクトのいずれかが例外を発生させる場合、これは、 &lt;code&gt;emit()&lt;/code&gt; 呼び出し中の他の例外と同じ方法で、つまりハンドラーの &lt;code&gt;handleError()&lt;/code&gt; メソッドを介して処理されます。</target>
        </trans-unit>
        <trans-unit id="3b9780bd4e28d18b6c6eb957a0c871c293f95ffa" translate="yes" xml:space="preserve">
          <source>The recipe is conceptually equivalent to an algorithm that chooses from all the multiples of 2⁻&amp;sup1;⁰⁷⁴ in the range &lt;em&gt;0.0 &amp;le; x &amp;lt; 1.0&lt;/em&gt;. All such numbers are evenly spaced, but most have to be rounded down to the nearest representable Python float. (The value 2⁻&amp;sup1;⁰⁷⁴ is the smallest positive unnormalized float and is equal to &lt;code&gt;math.ulp(0.0)&lt;/code&gt;.)</source>
          <target state="translated">レシピは、0.0&amp;le;x &lt;em&gt;&amp;lt;1.0の&lt;/em&gt;範囲で2⁻&amp;sup1;⁰⁷⁴のすべての倍数から選択するアルゴリズムと概念的に同等です。このような数値はすべて等間隔ですが、ほとんどの場合、最も近い表現可能なPythonフロートに切り捨てる必要があります。（値2⁻&amp;sup1;⁰⁷⁴は最小の正の正規化されていないfloatであり、 &lt;code&gt;math.ulp(0.0)&lt;/code&gt; に等しくなります。）</target>
        </trans-unit>
        <trans-unit id="89d87c844ed2c3d32ca4dbf0d2608b75aaafce69" translate="yes" xml:space="preserve">
          <source>The recommended &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt; installer runs all &lt;code&gt;setup.py&lt;/code&gt; scripts with &lt;code&gt;setuptools&lt;/code&gt;, even if the script itself only imports &lt;code&gt;distutils&lt;/code&gt;. Refer to the &lt;a href=&quot;https://packaging.python.org&quot;&gt;Python Packaging User Guide&lt;/a&gt; for more information.</source>
          <target state="translated">スクリプト自体が &lt;code&gt;distutils&lt;/code&gt; のみをインポートする場合でも、推奨される&lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;インストーラーは &lt;code&gt;setuptools&lt;/code&gt; を使用してすべての &lt;code&gt;setup.py&lt;/code&gt; スクリプトを実行します。詳細については、&lt;a href=&quot;https://packaging.python.org&quot;&gt;Pythonパッケージングユーザーガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e3708eceef9e8fc9b657fbd262aa2dd3c8c9e05c" translate="yes" xml:space="preserve">
          <source>The recommended approach to invoking subprocesses is to use the &lt;a href=&quot;#subprocess.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; function for all use cases it can handle. For more advanced use cases, the underlying &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; interface can be used directly.</source>
          <target state="translated">サブプロセスを呼び出すための推奨アプローチは、処理できるすべてのユースケースで&lt;a href=&quot;#subprocess.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt;関数を使用することです。より高度な使用例では、基礎となる&lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt;インターフェースを直接使用できます。</target>
        </trans-unit>
        <trans-unit id="fd6e5d6a0931f68dfa7a32f3cada332bb112bb51" translate="yes" xml:space="preserve">
          <source>The recommended way to create a custom action is to extend &lt;a href=&quot;#argparse.Action&quot;&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;, overriding the &lt;code&gt;__call__&lt;/code&gt; method and optionally the &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;format_usage&lt;/code&gt; methods.</source>
          <target state="translated">カスタムアクションを作成するための推奨される方法は、拡張することで&lt;a href=&quot;#argparse.Action&quot;&gt; &lt;code&gt;Action&lt;/code&gt; &lt;/a&gt;上書きし、 &lt;code&gt;__call__&lt;/code&gt; の方法と、必要に応じて &lt;code&gt;__init__&lt;/code&gt; と &lt;code&gt;format_usage&lt;/code&gt; 方法を。</target>
        </trans-unit>
        <trans-unit id="ccb4dc482b74e7926d22ef923199ab80c945bb99" translate="yes" xml:space="preserve">
          <source>The recommended way to create array types is by multiplying a data type with a positive integer:</source>
          <target state="translated">配列型を作成するために推奨される方法は、データ型に正の整数を乗算することです。</target>
        </trans-unit>
        <trans-unit id="66efc06bb3809b5e55afbd1288c458d0d954c17a" translate="yes" xml:space="preserve">
          <source>The recommended way to create concrete array types is by multiplying any &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; data type with a positive integer. Alternatively, you can subclass this type and define &lt;a href=&quot;#ctypes.Array._length_&quot;&gt;&lt;code&gt;_length_&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ctypes.Array._type_&quot;&gt;&lt;code&gt;_type_&lt;/code&gt;&lt;/a&gt; class variables. Array elements can be read and written using standard subscript and slice accesses; for slice reads, the resulting object is &lt;em&gt;not&lt;/em&gt; itself an &lt;a href=&quot;#ctypes.Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">具体的な配列型を作成するための推奨される方法は、&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;データ型に正の整数を乗算することです。または、このタイプをサブクラス化して、&lt;a href=&quot;#ctypes.Array._length_&quot;&gt; &lt;code&gt;_length_&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#ctypes.Array._type_&quot;&gt; &lt;code&gt;_type_&lt;/code&gt; &lt;/a&gt;クラス変数を定義できます。配列要素は、標準の添え字アクセスとスライスアクセスを使用して読み書きできます。スライス読み取りの場合、結果のオブジェクト自体は&lt;a href=&quot;#ctypes.Array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; で&lt;/a&gt;はあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="db258e380ae1e9f11acb7ecd11189586c81b75b9" translate="yes" xml:space="preserve">
          <source>The reconstructed script is returned as a single string. The result is guaranteed to tokenize back to match the input so that the conversion is lossless and round-trips are assured. The guarantee applies only to the token type and token string as the spacing between tokens (column positions) may change.</source>
          <target state="translated">再構築されたスクリプトは、単一の文字列として返されます。結果は、入力と一致するようにトークン化されて戻ってくることが保証されているので、変換はロスレスで往復が保証されています。トークン間の間隔(列の位置)が変化する可能性があるため、この保証はトークン型とトークン文字列にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="57acf8c8e12eab6d4b3a3f62dbb9d6a2820d0c9c" translate="yes" xml:space="preserve">
          <source>The reconstructor (the &lt;code&gt;_reconstruct&lt;/code&gt; class method) returns the buffer&amp;rsquo;s providing object if it has the right type. This is an easy way to simulate zero-copy behaviour on this toy example.</source>
          <target state="translated">&lt;code&gt;_reconstruct&lt;/code&gt; （_reconstructクラスメソッド）は、適切なタイプの場合、バッファーの提供オブジェクトを返します。これは、このおもちゃの例でゼロコピー動作をシミュレートする簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="6832c932800d1e21134679897c1c0c648c46cac9" translate="yes" xml:space="preserve">
          <source>The record is formatted, and then sent to the syslog server. If exception information is present, it is &lt;em&gt;not&lt;/em&gt; sent to the server.</source>
          <target state="translated">レコードはフォーマットされ、syslogサーバーに送信されます。例外情報が存在する場合は、サーバーに送信され&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0b70780ad8c59629bb44ba0ecc4d77b4f436096b" translate="yes" xml:space="preserve">
          <source>The record&amp;rsquo;s attribute dictionary is used as the operand to a string formatting operation. Returns the resulting string. Before formatting the dictionary, a couple of preparatory steps are carried out. The &lt;em&gt;message&lt;/em&gt; attribute of the record is computed using &lt;em&gt;msg&lt;/em&gt; % &lt;em&gt;args&lt;/em&gt;. If the formatting string contains &lt;code&gt;'(asctime)'&lt;/code&gt;, &lt;a href=&quot;#logging.Formatter.formatTime&quot;&gt;&lt;code&gt;formatTime()&lt;/code&gt;&lt;/a&gt; is called to format the event time. If there is exception information, it is formatted using &lt;a href=&quot;#logging.Formatter.formatException&quot;&gt;&lt;code&gt;formatException()&lt;/code&gt;&lt;/a&gt; and appended to the message. Note that the formatted exception information is cached in attribute &lt;em&gt;exc_text&lt;/em&gt;. This is useful because the exception information can be pickled and sent across the wire, but you should be careful if you have more than one &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; subclass which customizes the formatting of exception information. In this case, you will have to clear the cached value after a formatter has done its formatting, so that the next formatter to handle the event doesn&amp;rsquo;t use the cached value but recalculates it afresh.</source>
          <target state="translated">レコードの属性ディクショナリは、文字列フォーマット操作のオペランドとして使用されます。結果の文字列を返します。辞書をフォーマットする前に、いくつかの準備手順が実行されます。レコードの&lt;em&gt;メッセージ&lt;/em&gt;属性は、&lt;em&gt;msg&lt;/em&gt;％&lt;em&gt;args&lt;/em&gt;を使用して計算されます。書式設定文字列が含まれている場合 &lt;code&gt;'(asctime)'&lt;/code&gt; 、&lt;a href=&quot;#logging.Formatter.formatTime&quot;&gt; &lt;code&gt;formatTime()&lt;/code&gt; &lt;/a&gt;イベント時間をフォーマットするために呼び出されます。例外情報がある場合は、&lt;a href=&quot;#logging.Formatter.formatException&quot;&gt; &lt;code&gt;formatException()&lt;/code&gt; &lt;/a&gt;を使用してフォーマットされ、メッセージに追加されます。フォーマットされた例外情報は、属性&lt;em&gt;exc_textに&lt;/em&gt;キャッシュされます&lt;em&gt;。&lt;/em&gt;。これは、例外情報をピクルしてネットワーク経由で送信できるため便利ですが、例外情報のフォーマットをカスタマイズする&lt;a href=&quot;#logging.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;サブクラスが複数ある場合は注意が必要です。この場合、フォーマッターがフォーマットを行った後、キャッシュされた値をクリアする必要があります。これにより、イベントを処理する次のフォーマッターは、キャッシュされた値を使用せずに、新たに再計算します。</target>
        </trans-unit>
        <trans-unit id="7b68d4f5f80393667485b695f7d4fbe0d86fa20c" translate="yes" xml:space="preserve">
          <source>The recorder object also has a &lt;code&gt;reset()&lt;/code&gt; method, which clears the warnings list.</source>
          <target state="translated">レコーダーオブジェクトには、警告リストをクリアする &lt;code&gt;reset()&lt;/code&gt; メソッドもあります。</target>
        </trans-unit>
        <trans-unit id="b626a485d54404ebb0e667a8827f0bc2ce4565e1" translate="yes" xml:space="preserve">
          <source>The redundant types are deprecated as of Python 3.9 but no deprecation warnings will be issued by the interpreter. It is expected that type checkers will flag the deprecated types when the checked program targets Python 3.9 or newer.</source>
          <target state="translated">冗長な型は Python 3.9 で非推奨となりますが、インタープリタからは非推奨の警告は出ません。Python 3.9 以降を対象としたプログラムでは、型チェッカーが非推奨型にフラグを立てることが期待されています。</target>
        </trans-unit>
        <trans-unit id="23f5a856010edc6634a1b395d6da029a99f96511" translate="yes" xml:space="preserve">
          <source>The regex matching flags. This is a combination of the flags given to &lt;a href=&quot;#re.compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;, any &lt;code&gt;(?...)&lt;/code&gt; inline flags in the pattern, and implicit flags such as &lt;code&gt;UNICODE&lt;/code&gt; if the pattern is a Unicode string.</source>
          <target state="translated">正規表現一致フラグ。これは、に与えられたフラグの組み合わせで&lt;a href=&quot;#re.compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;、任意の &lt;code&gt;(?...)&lt;/code&gt; のようなパターンのインラインフラグ、及び暗黙フラグ &lt;code&gt;UNICODE&lt;/code&gt; パターンは、Unicode文字列である場合。</target>
        </trans-unit>
        <trans-unit id="4908905268dd161df8905009999a17db351541c3" translate="yes" xml:space="preserve">
          <source>The regular &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; was designed to be very good at mapping operations. Tracking insertion order was secondary.</source>
          <target state="translated">通常の&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;は、マッピング操作が非常に得意となるように設計されています。広告掲載オーダーのトラッキングは二次的なものでした。</target>
        </trans-unit>
        <trans-unit id="7968a2059eb096a9ad928a6d8fa459e62e306418" translate="yes" xml:space="preserve">
          <source>The regular expression pattern.</source>
          <target state="translated">正規表現のパターン。</target>
        </trans-unit>
        <trans-unit id="338a44466ba170ea38b197685c29de265d361a96" translate="yes" xml:space="preserve">
          <source>The relationships among these processing classes are summarized in the following diagram:</source>
          <target state="translated">これらの処理クラス間の関係は、次の図にまとめられています。</target>
        </trans-unit>
        <trans-unit id="93eb7f8ce0f82ca28e08352f3f3171f042ffdf18" translate="yes" xml:space="preserve">
          <source>The relative likelihood is computed as the probability of a sample occurring in a narrow range divided by the width of the range (hence the word &amp;ldquo;density&amp;rdquo;). Since the likelihood is relative to other points, its value can be greater than &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">相対尤度は、狭い範囲でサンプルが発生する確率を範囲の幅で割ったものとして計算されます（したがって、「密度」という単語）。尤度は他のポイントに関連しているため、その値は &lt;code&gt;1.0&lt;/code&gt; より大きくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fe576e550a29800997b9d6a2e646402dca141123" translate="yes" xml:space="preserve">
          <source>The remainder is computed as a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object. (3)</source>
          <target state="translated">残りは&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクトとして計算されます。（3）</target>
        </trans-unit>
        <trans-unit id="0340c584ccb1afc4873c12a1e31a9be1bffa4f35" translate="yes" xml:space="preserve">
          <source>The remaining &lt;a href=&quot;#email.policy.Policy&quot;&gt;&lt;code&gt;Policy&lt;/code&gt;&lt;/a&gt; methods are called by the email package code, and are not intended to be called by an application using the email package. A custom policy must implement all of these methods.</source>
          <target state="translated">残りの&lt;a href=&quot;#email.policy.Policy&quot;&gt; &lt;code&gt;Policy&lt;/code&gt; &lt;/a&gt;メソッドは、電子メールパッケージコードによって呼び出され、電子メールパッケージを使用するアプリケーションによって呼び出されることを意図していません。カスタムポリシーは、これらすべてのメソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="73a6d6e6fac3d7be26a7b43db8daf15d992cd3a7" translate="yes" xml:space="preserve">
          <source>The remaining challenges revolve around finding a pending task and making changes to its priority or removing it entirely. Finding a task can be done with a dictionary pointing to an entry in the queue.</source>
          <target state="translated">残りの課題は、保留中のタスクを見つけ、その優先度を変更したり、完全に削除したりすることです。タスクを見つけるには、キューのエントリを指す辞書を使用します。</target>
        </trans-unit>
        <trans-unit id="e1bc691bd9a1784a04f10810950f779a9ee15eb0" translate="yes" xml:space="preserve">
          <source>The remaining functions are part of the legacy (&lt;code&gt;Compat32&lt;/code&gt;) email API. There is no need to directly use these with the new API, since the parsing and formatting they provide is done automatically by the header parsing machinery of the new API.</source>
          <target state="translated">残りの関数は、レガシー（ &lt;code&gt;Compat32&lt;/code&gt; ）電子メールAPIの一部です。新しいAPIでこれらを直接使用する必要はありません。それらが提供する解析とフォーマットは、新しいAPIのヘッダー解析機構によって自動的に行われるためです。</target>
        </trans-unit>
        <trans-unit id="e9e96d5ad53b78651123f0aa48586b15b8bc8356" translate="yes" xml:space="preserve">
          <source>The remaining methods are specific to audio mixing:</source>
          <target state="translated">残りの方法は、オーディオミキシングに特化したものです。</target>
        </trans-unit>
        <trans-unit id="3bfb848b5ec87a5a815658edfcfabd10bf0be1cc" translate="yes" xml:space="preserve">
          <source>The remaining methods will raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; if called after the &lt;a href=&quot;#chunk.Chunk.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method has been called. Before Python 3.3, they used to raise &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;, now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">残りのメソッドは、&lt;a href=&quot;#chunk.Chunk.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出された後に呼び出された場合、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; を発生&lt;/a&gt;させます。Python 3.3以前は、以前は&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; の&lt;/a&gt;エイリアスであった&lt;a href=&quot;exceptions#IOError&quot;&gt; &lt;code&gt;IOError&lt;/code&gt; &lt;/a&gt;を発生させていました。</target>
        </trans-unit>
        <trans-unit id="ab4081a709186f53a0d01adb9c1f82670e77f305" translate="yes" xml:space="preserve">
          <source>The remaining text in this section is the original documentation of the module.</source>
          <target state="translated">このセクションの残りのテキストは、モジュールのオリジナルのドキュメントです。</target>
        </trans-unit>
        <trans-unit id="df76983d86e7fd3680429e5d80b3f6559c176cdc" translate="yes" xml:space="preserve">
          <source>The representation of bytearray objects uses the bytes literal format (&lt;code&gt;bytearray(b'...')&lt;/code&gt;) since it is often more useful than e.g. &lt;code&gt;bytearray([46, 46, 46])&lt;/code&gt;. You can always convert a bytearray object into a list of integers using &lt;code&gt;list(b)&lt;/code&gt;.</source>
          <target state="translated">bytearrayオブジェクトの表現は、バイトリテラル形式（ &lt;code&gt;bytearray(b'...')&lt;/code&gt; ）を使用します。これは、たとえば、 &lt;code&gt;bytearray([46, 46, 46])&lt;/code&gt; よりも便利なことが多いためです。 &lt;code&gt;list(b)&lt;/code&gt; を使用すると、常にバイト配列オブジェクトを整数のリストに変換できます。</target>
        </trans-unit>
        <trans-unit id="1d120b288aa1f00756fb3a349cf99f1b0ed62ed4" translate="yes" xml:space="preserve">
          <source>The representation of bytes objects uses the literal format (&lt;code&gt;b'...'&lt;/code&gt;) since it is often more useful than e.g. &lt;code&gt;bytes([46, 46, 46])&lt;/code&gt;. You can always convert a bytes object into a list of integers using &lt;code&gt;list(b)&lt;/code&gt;.</source>
          <target state="translated">bytesオブジェクトの表現は、たとえば &lt;code&gt;bytes([46, 46, 46])&lt;/code&gt; よりもしばしば有用であるため、リテラル形式（ &lt;code&gt;b'...'&lt;/code&gt; ）を使用します。 &lt;code&gt;list(b)&lt;/code&gt; を使用して、常にbytesオブジェクトを整数のリストに変換できます。</target>
        </trans-unit>
        <trans-unit id="934e4823813e26310eba11e448f6edb5ad9e263d" translate="yes" xml:space="preserve">
          <source>The request is mapped to a local file by interpreting the request as a path relative to the current working directory.</source>
          <target state="translated">リクエストは、現在の作業ディレクトリからの相対パスとして解釈され、ローカルファイルにマッピングされます。</target>
        </trans-unit>
        <trans-unit id="d1e30ca94027546a99c4c247aa7bc532aac9585a" translate="yes" xml:space="preserve">
          <source>The request will not work as expected if the data object is unable to deliver its content more than once (e.g. a file or an iterable that can produce the content only once) and the request is retried for HTTP redirects or authentication. The &lt;em&gt;data&lt;/em&gt; is sent to the HTTP server right away after the headers. There is no support for a 100-continue expectation in the library.</source>
          <target state="translated">データオブジェクトがコンテンツを2回以上配信できず（たとえば、コンテンツを1回だけ生成できるファイルまたはイテラブル）、HTTPリダイレクトまたは認証のためにリクエストが再試行される場合、リクエストは期待どおりに機能しません。&lt;em&gt;データは、&lt;/em&gt;ヘッダの後にすぐにHTTPサーバに送信されます。ライブラリでは、100継続の期待に対するサポートはありません。</target>
        </trans-unit>
        <trans-unit id="d08fb6e54b0bef7db4806e25ba06216ddf869486" translate="yes" xml:space="preserve">
          <source>The requested operation was made on a parser which was finished parsing input, but isn&amp;rsquo;t allowed. This includes attempts to provide additional input or to stop the parser.</source>
          <target state="translated">要求された操作は、入力の解析が終了したパーサーで行われましたが、許可されていません。これには、追加の入力を提供したり、パーサーを停止したりする試みが含まれます。</target>
        </trans-unit>
        <trans-unit id="6be492a00d95d8c38d0f08df00ba5cd76c54a3e2" translate="yes" xml:space="preserve">
          <source>The requested operation was made on a suspended parser, but isn&amp;rsquo;t allowed. This includes attempts to provide additional input or to stop the parser.</source>
          <target state="translated">要求された操作は中断されたパーサーで行われましたが、許可されていません。これには、追加の入力を提供したり、パーサーを停止したりする試みが含まれます。</target>
        </trans-unit>
        <trans-unit id="e7da8efaff05d5a67bdc583cf83ab65e3004c869" translate="yes" xml:space="preserve">
          <source>The requested read operation did not complete fully.</source>
          <target state="translated">要求された読み取り操作が完全に完了しませんでした。</target>
        </trans-unit>
        <trans-unit id="1f8cfa9ce8db124d500cff91c25e3e50bf494e54" translate="yes" xml:space="preserve">
          <source>The required &lt;em&gt;name&lt;/em&gt; parameter is used for introspection and debug purposes.</source>
          <target state="translated">必須の&lt;em&gt;name&lt;/em&gt;パラメータは、イントロスペクションとデバッグの目的で使用されます。</target>
        </trans-unit>
        <trans-unit id="2c25d69b77c16629632ad85bd39c5b60853e6161" translate="yes" xml:space="preserve">
          <source>The required &lt;em&gt;value&lt;/em&gt; argument is the new value for the context variable.</source>
          <target state="translated">必要な&lt;em&gt;値の&lt;/em&gt;引数は、コンテキスト変数の新しい値です。</target>
        </trans-unit>
        <trans-unit id="902699a10c395c34229cad66f2a25386f0e788eb" translate="yes" xml:space="preserve">
          <source>The reset_mock method resets all the call attributes on a mock object:</source>
          <target state="translated">reset_mockメソッドは、モックオブジェクト上のすべての呼び出し属性をリセットします。</target>
        </trans-unit>
        <trans-unit id="ddf13e446d1b8be7a43739f2d543a173cf27e006" translate="yes" xml:space="preserve">
          <source>The resolution of such persistent IDs is not defined by the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module; it will delegate this resolution to the user-defined methods on the pickler and unpickler, &lt;a href=&quot;#pickle.Pickler.persistent_id&quot;&gt;&lt;code&gt;persistent_id()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt;&lt;code&gt;persistent_load()&lt;/code&gt;&lt;/a&gt; respectively.</source>
          <target state="translated">このような永続IDの解決は、&lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;モジュールでは定義されていません。この解決を、それぞれpicklerおよびunpickler、&lt;a href=&quot;#pickle.Pickler.persistent_id&quot;&gt; &lt;code&gt;persistent_id()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt; &lt;code&gt;persistent_load()&lt;/code&gt; &lt;/a&gt;のユーザー定義メソッドに委任します。</target>
        </trans-unit>
        <trans-unit id="dad2579aacf71b8f66ffcb466c20321d81397aa7" translate="yes" xml:space="preserve">
          <source>The resolution of the monotonic clock on Windows is usually around 15.6 msec. The best resolution is 0.5 msec. The resolution depends on the hardware (availability of &lt;a href=&quot;https://en.wikipedia.org/wiki/High_Precision_Event_Timer&quot;&gt;HPET&lt;/a&gt;) and on the Windows configuration.</source>
          <target state="translated">Windowsの単調時計の分解能は通常、約15.6ミリ秒です。最高の解像度は0.5ミリ秒です。解像度は、ハードウェア（&lt;a href=&quot;https://en.wikipedia.org/wiki/High_Precision_Event_Timer&quot;&gt;HPETの&lt;/a&gt;可用性）とWindows構成によって異なります。</target>
        </trans-unit>
        <trans-unit id="23afb147c8179b8f68c17fd58f357125e59e0db0" translate="yes" xml:space="preserve">
          <source>The response of the server if available, as a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">サーバーの応答（利用可能な場合）&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;オブジェクトとして。</target>
        </trans-unit>
        <trans-unit id="95b4a5945a9d59be88563c27320b9c7635065496" translate="yes" xml:space="preserve">
          <source>The rest of the arguments are passed directly to &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">残りの引数は直接&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="052ba8628ec266d089850d398e2dffdd0e02362b" translate="yes" xml:space="preserve">
          <source>The rest of the arguments are passed directly to &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_server&quot;&gt;&lt;code&gt;loop.create_server()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">残りの引数は直接&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_server&quot;&gt; &lt;code&gt;loop.create_server()&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="9ca5b530f7beb3fc6b574e16895459606aeaf92d" translate="yes" xml:space="preserve">
          <source>The result can be limited to a certain &lt;em&gt;depth&lt;/em&gt; (ellipsis is used for deeper contents):</source>
          <target state="translated">結果は特定の&lt;em&gt;深さに&lt;/em&gt;制限できます（より深い内容には省略記号が使用されます）。</target>
        </trans-unit>
        <trans-unit id="a9012bf262281e6649bca6a62eaca3e50309e056" translate="yes" xml:space="preserve">
          <source>The result has the following attributes:</source>
          <target state="translated">結果は以下の属性を持っています。</target>
        </trans-unit>
        <trans-unit id="d5ea300b3c43932c2e9cb889e33cb6a294bf5718" translate="yes" xml:space="preserve">
          <source>The result is a new handle to the specified key.</source>
          <target state="translated">結果は、指定されたキーの新しいハンドルになります。</target>
        </trans-unit>
        <trans-unit id="9024c97c37bab6f072465e9e7695a1952461ee28" translate="yes" xml:space="preserve">
          <source>The result is a tuple of 2 items:</source>
          <target state="translated">結果は2項目のタプルになります。</target>
        </trans-unit>
        <trans-unit id="1a572ad972b418d4c59e22b81a05b05d111a4914" translate="yes" xml:space="preserve">
          <source>The result is a tuple of 3 items:</source>
          <target state="translated">結果は3つの項目のタプルになります。</target>
        </trans-unit>
        <trans-unit id="f4bcd3a97a994995588bc014bbbc763f7890e121" translate="yes" xml:space="preserve">
          <source>The result is an integer that holds the value of the handle before it is detached. If the handle is already detached or closed, this will return zero.</source>
          <target state="translated">結果は、切り離される前のハンドルの値を保持する整数です。ハンドルが既に切り離されているか閉じられている場合、これはゼロを返します。</target>
        </trans-unit>
        <trans-unit id="bc91a99e93e2fcc5cbfe344c6e0c71fb2ef0bf7a" translate="yes" xml:space="preserve">
          <source>The result is an iterator yielding named tuples, exactly like &lt;a href=&quot;#tokenize.tokenize&quot;&gt;&lt;code&gt;tokenize()&lt;/code&gt;&lt;/a&gt;. It does not yield an &lt;a href=&quot;token#token.ENCODING&quot;&gt;&lt;code&gt;ENCODING&lt;/code&gt;&lt;/a&gt; token.</source>
          <target state="translated">結果は、&lt;a href=&quot;#tokenize.tokenize&quot;&gt; &lt;code&gt;tokenize()&lt;/code&gt; &lt;/a&gt;とまったく同じように、名前付きタプルを生成するイテレータです。&lt;a href=&quot;token#token.ENCODING&quot;&gt; &lt;code&gt;ENCODING&lt;/code&gt; &lt;/a&gt;トークンは生成されません。</target>
        </trans-unit>
        <trans-unit id="3227fd92d80664a7f623acd9fc4b4f80817cf727" translate="yes" xml:space="preserve">
          <source>The result is cached on the &lt;code&gt;os.DirEntry&lt;/code&gt; object, with a separate cache for &lt;em&gt;follow_symlinks&lt;/em&gt;&lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;. Call &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; along with &lt;a href=&quot;stat#stat.S_ISDIR&quot;&gt;&lt;code&gt;stat.S_ISDIR()&lt;/code&gt;&lt;/a&gt; to fetch up-to-date information.</source>
          <target state="translated">結果は &lt;code&gt;os.DirEntry&lt;/code&gt; オブジェクトにキャッシュされ、&lt;em&gt;follow_symlinks &lt;/em&gt; &lt;code&gt;True&lt;/code&gt; と &lt;code&gt;False&lt;/code&gt; の個別のキャッシュが&lt;em&gt;含まれ&lt;/em&gt;ます。コール&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;と一緒に&lt;a href=&quot;stat#stat.S_ISDIR&quot;&gt; &lt;code&gt;stat.S_ISDIR()&lt;/code&gt; &lt;/a&gt;最新の情報を取得します。</target>
        </trans-unit>
        <trans-unit id="4473ea6bd1dfef0f8e5256127ece39f3a793c098" translate="yes" xml:space="preserve">
          <source>The result is cached on the &lt;code&gt;os.DirEntry&lt;/code&gt; object, with a separate cache for &lt;em&gt;follow_symlinks&lt;/em&gt;&lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;. Call &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; to fetch up-to-date information.</source>
          <target state="translated">結果は &lt;code&gt;os.DirEntry&lt;/code&gt; オブジェクトにキャッシュされ、&lt;em&gt;follow_symlinks &lt;/em&gt; &lt;code&gt;True&lt;/code&gt; と &lt;code&gt;False&lt;/code&gt; の個別のキャッシュが&lt;em&gt;含まれ&lt;/em&gt;ます。&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;を呼び出して、最新の情報を取得します。</target>
        </trans-unit>
        <trans-unit id="abbcee36b5dc7353a13842e21fc33ea3c7933bbe" translate="yes" xml:space="preserve">
          <source>The result is cached on the &lt;code&gt;os.DirEntry&lt;/code&gt; object. Caching, system calls made, and exceptions raised are as per &lt;a href=&quot;#os.DirEntry.is_dir&quot;&gt;&lt;code&gt;is_dir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">結果は &lt;code&gt;os.DirEntry&lt;/code&gt; オブジェクトにキャッシュされます。キャッシュ、行われたシステムコール、および発生した例外は、&lt;a href=&quot;#os.DirEntry.is_dir&quot;&gt; &lt;code&gt;is_dir()&lt;/code&gt; の&lt;/a&gt;とおりです。</target>
        </trans-unit>
        <trans-unit id="3192c8c4ca27941d16ad2ca7a7e1edfbad87bea5" translate="yes" xml:space="preserve">
          <source>The result is cached on the &lt;code&gt;os.DirEntry&lt;/code&gt; object. Call &lt;a href=&quot;os.path#os.path.islink&quot;&gt;&lt;code&gt;os.path.islink()&lt;/code&gt;&lt;/a&gt; to fetch up-to-date information.</source>
          <target state="translated">結果は &lt;code&gt;os.DirEntry&lt;/code&gt; オブジェクトにキャッシュされます。&lt;a href=&quot;os.path#os.path.islink&quot;&gt; &lt;code&gt;os.path.islink()&lt;/code&gt; &lt;/a&gt;を呼び出して、最新の情報を取得します。</target>
        </trans-unit>
        <trans-unit id="7ec4d3f1d1936a6194d9445a29e0390f42b8ffe0" translate="yes" xml:space="preserve">
          <source>The result is cached on the &lt;code&gt;os.DirEntry&lt;/code&gt; object. Use &lt;code&gt;os.stat(entry.path, follow_symlinks=False).st_ino&lt;/code&gt; to fetch up-to-date information.</source>
          <target state="translated">結果は &lt;code&gt;os.DirEntry&lt;/code&gt; オブジェクトにキャッシュされます。 &lt;code&gt;os.stat(entry.path, follow_symlinks=False).st_ino&lt;/code&gt; を使用して、最新の情報を取得します。</target>
        </trans-unit>
        <trans-unit id="5690da7531945b23a6747716ed812a15a6963db0" translate="yes" xml:space="preserve">
          <source>The result is sorted from the biggest to the smallest by: &lt;a href=&quot;#tracemalloc.Statistic.size&quot;&gt;&lt;code&gt;Statistic.size&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tracemalloc.Statistic.count&quot;&gt;&lt;code&gt;Statistic.count&lt;/code&gt;&lt;/a&gt; and then by &lt;a href=&quot;#tracemalloc.Statistic.traceback&quot;&gt;&lt;code&gt;Statistic.traceback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">：結果はで最大から最小にソートされ&lt;a href=&quot;#tracemalloc.Statistic.size&quot;&gt; &lt;code&gt;Statistic.size&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tracemalloc.Statistic.count&quot;&gt; &lt;code&gt;Statistic.count&lt;/code&gt; &lt;/a&gt;によって当時と&lt;a href=&quot;#tracemalloc.Statistic.traceback&quot;&gt; &lt;code&gt;Statistic.traceback&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e30839178f92f01b4544ae6c03a099b48de5230b" translate="yes" xml:space="preserve">
          <source>The result is sorted from the biggest to the smallest by: absolute value of &lt;a href=&quot;#tracemalloc.StatisticDiff.size_diff&quot;&gt;&lt;code&gt;StatisticDiff.size_diff&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tracemalloc.StatisticDiff.size&quot;&gt;&lt;code&gt;StatisticDiff.size&lt;/code&gt;&lt;/a&gt;, absolute value of &lt;a href=&quot;#tracemalloc.StatisticDiff.count_diff&quot;&gt;&lt;code&gt;StatisticDiff.count_diff&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tracemalloc.Statistic.count&quot;&gt;&lt;code&gt;Statistic.count&lt;/code&gt;&lt;/a&gt; and then by &lt;a href=&quot;#tracemalloc.StatisticDiff.traceback&quot;&gt;&lt;code&gt;StatisticDiff.traceback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">絶対値：結果をすることにより、最大から最小まで分類されて&lt;a href=&quot;#tracemalloc.StatisticDiff.size_diff&quot;&gt; &lt;code&gt;StatisticDiff.size_diff&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tracemalloc.StatisticDiff.size&quot;&gt; &lt;code&gt;StatisticDiff.size&lt;/code&gt; &lt;/a&gt;の絶対値&lt;a href=&quot;#tracemalloc.StatisticDiff.count_diff&quot;&gt; &lt;code&gt;StatisticDiff.count_diff&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tracemalloc.Statistic.count&quot;&gt; &lt;code&gt;Statistic.count&lt;/code&gt; &lt;/a&gt;、次いでによって&lt;a href=&quot;#tracemalloc.StatisticDiff.traceback&quot;&gt; &lt;code&gt;StatisticDiff.traceback&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50b5cd74dc096919d1c4da6da20c54e0531391ea" translate="yes" xml:space="preserve">
          <source>The result looks like &lt;code&gt;'Sun, 06 Nov 1994 08:49:37 GMT'&lt;/code&gt;.</source>
          <target state="translated">結果は &lt;code&gt;'Sun, 06 Nov 1994 08:49:37 GMT'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ad2b0ea3374869382c5626a60af95e870167d18d" translate="yes" xml:space="preserve">
          <source>The result might look something like:</source>
          <target state="translated">結果は次のようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="2d4f8c61300cb280ac5d234b75011a45b9bc1479" translate="yes" xml:space="preserve">
          <source>The result objects from the &lt;a href=&quot;#urllib.parse.urlparse&quot;&gt;&lt;code&gt;urlparse()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt;&lt;code&gt;urlsplit()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.parse.urldefrag&quot;&gt;&lt;code&gt;urldefrag()&lt;/code&gt;&lt;/a&gt; functions are subclasses of the &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; type. These subclasses add the attributes listed in the documentation for those functions, the encoding and decoding support described in the previous section, as well as an additional method:</source>
          <target state="translated">&lt;a href=&quot;#urllib.parse.urlparse&quot;&gt; &lt;code&gt;urlparse()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt; &lt;code&gt;urlsplit()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#urllib.parse.urldefrag&quot;&gt; &lt;code&gt;urldefrag()&lt;/code&gt; &lt;/a&gt;関数からの結果オブジェクトは、&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;型のサブクラスです。これらのサブクラスは、これらの関数のドキュメントにリストされている属性、前のセクションで説明したエンコードとデコードのサポート、および追加のメソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="9496af6babd167973be214aba8ba07e03e05847c" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;mock()&lt;/code&gt; is an async function which will have the outcome of &lt;code&gt;side_effect&lt;/code&gt; or &lt;code&gt;return_value&lt;/code&gt; after it has been awaited:</source>
          <target state="translated">結果 &lt;code&gt;mock()&lt;/code&gt; の結果があります非同期関数です &lt;code&gt;side_effect&lt;/code&gt; または &lt;code&gt;return_value&lt;/code&gt; それが望まれていた後。</target>
        </trans-unit>
        <trans-unit id="3bc1a9c58cb8683698d580da1969870f58ded608" translate="yes" xml:space="preserve">
          <source>The result of the manipulations is treated as a filename, and returned as the first component of the tuple, with &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; called on it to yield the second component. (Note: this is the reverse of the order of arguments in instance initialization!)</source>
          <target state="translated">操作の結果はファイル名として扱われ、タプルの最初のコンポーネントとして返され、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; が&lt;/a&gt;呼び出されて2番目のコンポーネントが生成されます。（注：これは、インスタンスの初期化における引数の順序の逆です！）</target>
        </trans-unit>
        <trans-unit id="c4e4c6d23f69a76d21bae775427f415590d0980e" translate="yes" xml:space="preserve">
          <source>The result of this method remains unchanged if passed back through the original parsing function:</source>
          <target state="translated">このメソッドの結果は、元の解析関数を経由して戻ってきても変更されません。</target>
        </trans-unit>
        <trans-unit id="b224f9d4a8e2657de972e24ed3a8dcad279caaed" translate="yes" xml:space="preserve">
          <source>The result of this search is cached, see the description of &lt;a href=&quot;#tempfile.tempdir&quot;&gt;&lt;code&gt;tempdir&lt;/code&gt;&lt;/a&gt; below.</source>
          <target state="translated">この検索の結果はキャッシュされます。以下の&lt;a href=&quot;#tempfile.tempdir&quot;&gt; &lt;code&gt;tempdir&lt;/code&gt; &lt;/a&gt;の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="01be55a0c09b1d115faa58cff213ed7e949d0a99" translate="yes" xml:space="preserve">
          <source>The result:</source>
          <target state="translated">結果が出ました。</target>
        </trans-unit>
        <trans-unit id="8adfe478f190ec97428a206efe4a03294cd0ba54" translate="yes" xml:space="preserve">
          <source>The resulting archive contains:</source>
          <target state="translated">結果として得られるアーカイブには、以下のようなものが含まれます。</target>
        </trans-unit>
        <trans-unit id="90e2c6b6dcb04800642e191cd676cfaeabfba943" translate="yes" xml:space="preserve">
          <source>The resulting class has an extra attribute &lt;code&gt;__annotations__&lt;/code&gt; giving a dict that maps the field names to the field types. (The field names are in the &lt;code&gt;_fields&lt;/code&gt; attribute and the default values are in the &lt;code&gt;_field_defaults&lt;/code&gt; attribute both of which are part of the namedtuple API.)</source>
          <target state="translated">結果のクラスには、属性 &lt;code&gt;__annotations__&lt;/code&gt; があり、フィールド名をフィールドタイプにマップする辞書を提供します。（フィールド名は &lt;code&gt;_fields&lt;/code&gt; 属性にあり、デフォルト値は &lt;code&gt;_field_defaults&lt;/code&gt; 属性にあります。どちらもnamedtuple APIの一部です。）</target>
        </trans-unit>
        <trans-unit id="ac591da9469504c2f08a211e0607aa5095412244" translate="yes" xml:space="preserve">
          <source>The resulting file has one additional method, &lt;code&gt;rollover()&lt;/code&gt;, which causes the file to roll over to an on-disk file regardless of its size.</source>
          <target state="translated">結果のファイルには、サイズに関係なく、ファイルがディスク上のファイルにロールオーバーされる、 &lt;code&gt;rollover()&lt;/code&gt; という 1つの追加メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="7a519c498f72663eddb55617af16d07f81874708" translate="yes" xml:space="preserve">
          <source>The resulting launcher uses the &amp;ldquo;Limited ABI&amp;rdquo;, so it will run unchanged with any version of Python 3.x. All it needs is for Python (&lt;code&gt;python3.dll&lt;/code&gt;) to be on the user&amp;rsquo;s &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">結果のランチャーは「Limited ABI」を使用するため、Python 3.xのどのバージョンでも変更なしで実行されます。必要なのは、Python（ &lt;code&gt;python3.dll&lt;/code&gt; ）がユーザーの &lt;code&gt;PATH&lt;/code&gt; 上にあることだけです。</target>
        </trans-unit>
        <trans-unit id="041df9dbd79b18f129d74bcb4f756b61fc62aae3" translate="yes" xml:space="preserve">
          <source>The resulting list is sorted alphabetically. For example:</source>
          <target state="translated">結果のリストはアルファベット順にソートされます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="11ae1369bb9e6629cc72ed8a767763bea61545dd" translate="yes" xml:space="preserve">
          <source>The resulting object can be used as a context manager (see &lt;a href=&quot;#tempfile-examples&quot;&gt;Examples&lt;/a&gt;). On completion of the context or destruction of the file object the temporary file will be removed from the filesystem.</source>
          <target state="translated">結果のオブジェクトは、コンテキストマネージャとして使用できます（&lt;a href=&quot;#tempfile-examples&quot;&gt;例を&lt;/a&gt;参照）。コンテキストが完了するか、ファイルオブジェクトが破棄されると、一時ファイルはファイルシステムから削除されます。</target>
        </trans-unit>
        <trans-unit id="b846db5f32c3790b53bc4bb912c408d3783cc876" translate="yes" xml:space="preserve">
          <source>The resulting profiler will then call &lt;code&gt;your_time_func&lt;/code&gt;. Depending on whether you are using &lt;a href=&quot;#profile.Profile&quot;&gt;&lt;code&gt;profile.Profile&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;cProfile.Profile&lt;/code&gt;, &lt;code&gt;your_time_func&lt;/code&gt;&amp;rsquo;s return value will be interpreted differently:</source>
          <target state="translated">その結果、プロファイラーは &lt;code&gt;your_time_func&lt;/code&gt; を呼び出します。&lt;a href=&quot;#profile.Profile&quot;&gt; &lt;code&gt;profile.Profile&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;cProfile.Profile&lt;/code&gt; のどちらを使用しているかによって、 &lt;code&gt;your_time_func&lt;/code&gt; の戻り値の解釈は異なります。</target>
        </trans-unit>
        <trans-unit id="9db83e41267f4a8fdf365bc69918d1db78163746" translate="yes" xml:space="preserve">
          <source>The resulting string is a series of &lt;code&gt;key=value&lt;/code&gt; pairs separated by &lt;code&gt;'&amp;amp;'&lt;/code&gt; characters, where both &lt;em&gt;key&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt; are quoted using the &lt;em&gt;quote_via&lt;/em&gt; function. By default, &lt;a href=&quot;#urllib.parse.quote_plus&quot;&gt;&lt;code&gt;quote_plus()&lt;/code&gt;&lt;/a&gt; is used to quote the values, which means spaces are quoted as a &lt;code&gt;'+'&lt;/code&gt; character and &amp;lsquo;/&amp;rsquo; characters are encoded as &lt;code&gt;%2F&lt;/code&gt;, which follows the standard for GET requests (&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;). An alternate function that can be passed as &lt;em&gt;quote_via&lt;/em&gt; is &lt;a href=&quot;#urllib.parse.quote&quot;&gt;&lt;code&gt;quote()&lt;/code&gt;&lt;/a&gt;, which will encode spaces as &lt;code&gt;%20&lt;/code&gt; and not encode &amp;lsquo;/&amp;rsquo; characters. For maximum control of what is quoted, use &lt;code&gt;quote&lt;/code&gt; and specify a value for &lt;em&gt;safe&lt;/em&gt;.</source>
          <target state="translated">結果の文字列は、 &lt;code&gt;'&amp;amp;'&lt;/code&gt; 文字で区切られた一連の &lt;code&gt;key=value&lt;/code&gt; ペアであり、&lt;em&gt;key&lt;/em&gt;と&lt;em&gt;valueの&lt;/em&gt;両方が&lt;em&gt;quote_via&lt;/em&gt;関数を使用して引用されます。デフォルトでは、&lt;a href=&quot;#urllib.parse.quote_plus&quot;&gt; &lt;code&gt;quote_plus()&lt;/code&gt; &lt;/a&gt;は値を引用するために使用されます。つまり、スペースは &lt;code&gt;'+'&lt;/code&gt; 文字として引用され、「/」文字は &lt;code&gt;%2F&lt;/code&gt; としてエンコードされます。これは、GETリクエストの標準に従います（ &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; ）。&lt;em&gt;quote_via&lt;/em&gt;として&lt;em&gt;渡す&lt;/em&gt;ことができる代替関数は&lt;a href=&quot;#urllib.parse.quote&quot;&gt; &lt;code&gt;quote()&lt;/code&gt; で&lt;/a&gt;、スペースを &lt;code&gt;%20&lt;/code&gt; としてエンコードします&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;「/」文字はエンコードしません。引用されるものを最大限に制御するには、 &lt;code&gt;quote&lt;/code&gt; を使用して、&lt;em&gt;safeの&lt;/em&gt;値を指定します。</target>
        </trans-unit>
        <trans-unit id="134dbdf4e5b3e8f4c11ac5b7031c7464a782c4b0" translate="yes" xml:space="preserve">
          <source>The results printed are</source>
          <target state="translated">印刷された結果は</target>
        </trans-unit>
        <trans-unit id="40b9c6b5f8f1f52e60312075db0d81f7e179965d" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;#ssl.SSLContext.wrap_bio&quot;&gt;&lt;code&gt;SSLContext.wrap_bio()&lt;/code&gt;&lt;/a&gt;, defaults to &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt;. The attribute can be overridden on instance of class in order to return a custom subclass of &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLContext.wrap_bio&quot;&gt; &lt;code&gt;SSLContext.wrap_bio()&lt;/code&gt; &lt;/a&gt;の戻りタイプは、デフォルトで&lt;a href=&quot;#ssl.SSLObject&quot;&gt; &lt;code&gt;SSLObject&lt;/code&gt; &lt;/a&gt;です。&lt;a href=&quot;#ssl.SSLObject&quot;&gt; &lt;code&gt;SSLObject&lt;/code&gt; の&lt;/a&gt;カスタムサブクラスを返すために、クラスのインスタンスで属性をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="89dd3bf6bf7ac8497c6fbc6d05c26cdd36021e83" translate="yes" xml:space="preserve">
          <source>The return type of &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt;, defaults to &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt;. The attribute can be overridden on instance of class in order to return a custom subclass of &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt; &lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt; &lt;/a&gt;の戻りタイプは、デフォルトで&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; &lt;/a&gt;です。&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; の&lt;/a&gt;カスタムサブクラスを返すために、クラスのインスタンスで属性をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="f9ec2a98ecd14904d5d3e12031555d453b9272e4" translate="yes" xml:space="preserve">
          <source>The return value and side effect of child mocks can be set in the same way, using dotted notation. As you can&amp;rsquo;t use dotted names directly in a call you have to create a dictionary and unpack it using &lt;code&gt;**&lt;/code&gt;:</source>
          <target state="translated">子モックの戻り値と副作用は、ドット表記を使用して同じ方法で設定できます。呼び出しでドット形式の名前を直接使用することはできないため、辞書を作成して &lt;code&gt;**&lt;/code&gt; を使用して展開する必要があります。</target>
        </trans-unit>
        <trans-unit id="cfba5477b25ec732aaec2f8665d9842e6b57be0f" translate="yes" xml:space="preserve">
          <source>The return value can be &lt;code&gt;'fork'&lt;/code&gt;, &lt;code&gt;'spawn'&lt;/code&gt;, &lt;code&gt;'forkserver'&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. &lt;code&gt;'fork'&lt;/code&gt; is the default on Unix, while &lt;code&gt;'spawn'&lt;/code&gt; is the default on Windows.</source>
          <target state="translated">戻り値は、 &lt;code&gt;'fork'&lt;/code&gt; 、 &lt;code&gt;'spawn'&lt;/code&gt; 、 &lt;code&gt;'forkserver'&lt;/code&gt; または &lt;code&gt;None&lt;/code&gt; です。Unixでは &lt;code&gt;'fork'&lt;/code&gt; がデフォルト、Windowsでは &lt;code&gt;'spawn'&lt;/code&gt; がデフォルトです。</target>
        </trans-unit>
        <trans-unit id="223d2d76ad021d8b529310c6405479566a8c8808" translate="yes" xml:space="preserve">
          <source>The return value can be used to decide whether to use &lt;code&gt;sys.ps1&lt;/code&gt; or &lt;code&gt;sys.ps2&lt;/code&gt; to prompt the next line.</source>
          <target state="translated">戻り値は、使用するかどうかを決定するために使用することができ &lt;code&gt;sys.ps1&lt;/code&gt; または &lt;code&gt;sys.ps2&lt;/code&gt; のどちらをプロンプトに次の行を。</target>
        </trans-unit>
        <trans-unit id="82c5f5dea7de57114b406e5a2d10e9c9e968c10c" translate="yes" xml:space="preserve">
          <source>The return value consists of two elements: the first is a list of &lt;code&gt;(option,
value)&lt;/code&gt; pairs; the second is the list of program arguments left after the option list was stripped (this is a trailing slice of &lt;em&gt;args&lt;/em&gt;). Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., &lt;code&gt;'-x'&lt;/code&gt;) or two hyphens for long options (e.g., &lt;code&gt;'--long-option'&lt;/code&gt;), and the option argument as its second element, or an empty string if the option has no argument. The options occur in the list in the same order in which they were found, thus allowing multiple occurrences. Long and short options may be mixed.</source>
          <target state="translated">戻り値は2つの要素で構成されます。最初の要素は &lt;code&gt;(option, value)&lt;/code&gt; ペアのリストです。2番目は、オプションリストが取り除かれた後に残ったプログラム引数のリストです（これは&lt;em&gt;argsの&lt;/em&gt;後続スライスです）。返される各オプションと値のペアには、最初の要素としてオプションがあり、短いオプションのハイフン（例： &lt;code&gt;'-x'&lt;/code&gt; ）または長いオプションのハイフン2つ（例： &lt;code&gt;'--long-option'&lt;/code&gt; ）が付いています。 2番目の要素としてのオプション引数、またはオプションに引数がない場合は空の文字列。オプションは、リスト内でそれらが見つかったのと同じ順序で出現するため、複数出現することができます。長いオプションと短いオプションを混在させることができます。</target>
        </trans-unit>
        <trans-unit id="5b318dc5ec8c485015ebb1f6e03ac8abd47ac343" translate="yes" xml:space="preserve">
          <source>The return value from &lt;a href=&quot;#subprocess.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt;, representing a process that has finished.</source>
          <target state="translated">&lt;a href=&quot;#subprocess.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt;からの戻り値。終了したプロセスを表します。</target>
        </trans-unit>
        <trans-unit id="195dd48fbab413248bb85b38523fd13efbbb7f22" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;True&lt;/code&gt; if the lock is acquired successfully, &lt;code&gt;False&lt;/code&gt; if not (for example if the &lt;em&gt;timeout&lt;/em&gt; expired).</source>
          <target state="translated">戻り値は &lt;code&gt;True&lt;/code&gt; ロックが正常に取得された場合 &lt;code&gt;False&lt;/code&gt; （場合などでない場合は&lt;em&gt;、タイムアウトが&lt;/em&gt;期限切れ）。</target>
        </trans-unit>
        <trans-unit id="eda0a021ff1189c021e62f957666234bdf263951" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;True&lt;/code&gt; if the lock is acquired successfully, &lt;code&gt;False&lt;/code&gt; if not.</source>
          <target state="translated">戻り値は、ロックが正常に取得された場合は &lt;code&gt;True&lt;/code&gt; 、そうでない場合は &lt;code&gt;False&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e8808521af7a00af7e8d52a0e5473a4b0b4e5fac" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;True&lt;/code&gt; unless a given &lt;em&gt;timeout&lt;/em&gt; expired, in which case it is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">指定された&lt;em&gt;タイムアウトの&lt;/em&gt;期限が切れない限り、戻り値は &lt;code&gt;True&lt;/code&gt; です。この場合、 &lt;code&gt;False&lt;/code&gt; になります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e4ae8192eff447288a99dac0e9794231ef6500ec" translate="yes" xml:space="preserve">
          <source>The return value is a 3-tuple: &lt;code&gt;metaclass, namespace, kwds&lt;/code&gt;</source>
          <target state="translated">戻り値は3タプルです： &lt;code&gt;metaclass, namespace, kwds&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b945fb04db6f2dc42f9466e62c23e6c77c03488" translate="yes" xml:space="preserve">
          <source>The return value is a 4-tuple: &lt;code&gt;(data, ancdata, msg_flags,
address)&lt;/code&gt;. The &lt;em&gt;data&lt;/em&gt; item is a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object holding the non-ancillary data received. The &lt;em&gt;ancdata&lt;/em&gt; item is a list of zero or more tuples &lt;code&gt;(cmsg_level, cmsg_type, cmsg_data)&lt;/code&gt; representing the ancillary data (control messages) received: &lt;em&gt;cmsg_level&lt;/em&gt; and &lt;em&gt;cmsg_type&lt;/em&gt; are integers specifying the protocol level and protocol-specific type respectively, and &lt;em&gt;cmsg_data&lt;/em&gt; is a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object holding the associated data. The &lt;em&gt;msg_flags&lt;/em&gt; item is the bitwise OR of various flags indicating conditions on the received message; see your system documentation for details. If the receiving socket is unconnected, &lt;em&gt;address&lt;/em&gt; is the address of the sending socket, if available; otherwise, its value is unspecified.</source>
          <target state="translated">戻り値は4タプル &lt;code&gt;(data, ancdata, msg_flags, address)&lt;/code&gt; です。&lt;em&gt;データ&lt;/em&gt;項目は、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;受信した非補助データを保持するオブジェクト。&lt;em&gt;ancdata&lt;/em&gt;項目は、ゼロ個以上のタプルのリストである &lt;code&gt;(cmsg_level, cmsg_type, cmsg_data)&lt;/code&gt; 補助データ（制御メッセージ）を表す受信：&lt;em&gt;cmsg_levelメンバ&lt;/em&gt;と&lt;em&gt;cmsg_typeは&lt;/em&gt;それぞれ、プロトコルレベルとプロトコル固有のタイプを指定する整数であり、そして&lt;em&gt;CMSG_DATAが&lt;/em&gt;ある&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクト関連データを保持します。&lt;em&gt;msg_flags&lt;/em&gt;itemは、受信したメッセージの状態を示すさまざまなフラグのビット単位のORです。詳細については、システムのドキュメントを参照してください。受信ソケットが接続されていない場合、&lt;em&gt;address&lt;/em&gt;は送信ソケットのアドレスです（使用可能な場合）。それ以外の場合、その値は指定されていません。</target>
        </trans-unit>
        <trans-unit id="ec52b14196aa8b67fb13e7dd77583943a73c711f" translate="yes" xml:space="preserve">
          <source>The return value is a 4-tuple: &lt;code&gt;(nbytes, ancdata, msg_flags,
address)&lt;/code&gt;, where &lt;em&gt;nbytes&lt;/em&gt; is the total number of bytes of non-ancillary data written into the buffers, and &lt;em&gt;ancdata&lt;/em&gt;, &lt;em&gt;msg_flags&lt;/em&gt; and &lt;em&gt;address&lt;/em&gt; are the same as for &lt;a href=&quot;#socket.socket.recvmsg&quot;&gt;&lt;code&gt;recvmsg()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は4タプルです： &lt;code&gt;(nbytes, ancdata, msg_flags, address)&lt;/code&gt; （&lt;em&gt;nbytes&lt;/em&gt;はバッファーに書き込まれた非補助データの合計バイト数、&lt;em&gt;ancdata&lt;/em&gt;、&lt;em&gt;msg_flags&lt;/em&gt;および&lt;em&gt;address&lt;/em&gt;は&lt;a href=&quot;#socket.socket.recvmsg&quot;&gt; &lt;code&gt;recvmsg()&lt;/code&gt; &lt;/a&gt;と同じです） ）。</target>
        </trans-unit>
        <trans-unit id="6a3679d1ebda849b521be84cc43353121c8bf475" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;, its items can be accessed by index or as named attributes:</source>
          <target state="translated">戻り値は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;名前付きタプルであり&lt;/a&gt;、その項目にはインデックスまたは名前付き属性としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a21f880bf0c221fb7bd28fe3925cdefb842fe84c" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;, which means that its items can be accessed by index or as named attributes, which are:</source>
          <target state="translated">戻り値は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;名前付きタプル&lt;/a&gt;です。つまり、その項目には、インデックスまたは名前付き属性としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3dcc2832db4e1520ff1937a113e6ceacec019f27" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;, its items can be accessed by index or as named attributes:</source>
          <target state="translated">戻り値は&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;名前付きタプルであり&lt;/a&gt;、その項目にはインデックスまたは名前付き属性としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f9a675db84959f2871c29882a80f8a41acc95b6f" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;, which means that its items can be accessed by index or as named attributes, which are:</source>
          <target state="translated">戻り値は&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;名前付きタプルです&lt;/a&gt;。これは、そのアイテムにインデックスまたは名前付き属性としてアクセスできることを意味します。</target>
        </trans-unit>
        <trans-unit id="f79bebb781377c88d2426bd2e892f766e40af986" translate="yes" xml:space="preserve">
          <source>The return value is a generator of strings, each ending in a newline and some containing internal newlines. &lt;a href=&quot;#traceback.print_exception&quot;&gt;&lt;code&gt;print_exception()&lt;/code&gt;&lt;/a&gt; is a wrapper around this method which just prints the lines to a file.</source>
          <target state="translated">戻り値は文字列のジェネレータで、それぞれが改行で終わり、一部は内部改行を含みます。&lt;a href=&quot;#traceback.print_exception&quot;&gt; &lt;code&gt;print_exception()&lt;/code&gt; &lt;/a&gt;は、行をファイルに出力するだけのこのメソッドのラッパーです。</target>
        </trans-unit>
        <trans-unit id="a39f9ba7b42bdef3242d2a6379c62a27fc8940a4" translate="yes" xml:space="preserve">
          <source>The return value is a generator of strings, each ending in a newline.</source>
          <target state="translated">戻り値は、改行で終わる文字列のジェネレーターです。</target>
        </trans-unit>
        <trans-unit id="2aa307fb21c6adc415c25262d44c8b663f654493" translate="yes" xml:space="preserve">
          <source>The return value is a string suitable for passing as the &lt;em&gt;salt&lt;/em&gt; argument to &lt;a href=&quot;#module-crypt&quot;&gt;&lt;code&gt;crypt()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は、&lt;a href=&quot;#module-crypt&quot;&gt; &lt;code&gt;crypt()&lt;/code&gt; &lt;/a&gt;への&lt;em&gt;salt&lt;/em&gt;引数として渡すのに適した文字列です。</target>
        </trans-unit>
        <trans-unit id="fb4d092528f9e91105a3ac157c24fdb4bd62ec35" translate="yes" xml:space="preserve">
          <source>The return value is a triple of lists of objects that are ready: subsets of the first three arguments. When the time-out is reached without a file descriptor becoming ready, three empty lists are returned.</source>
          <target state="translated">返り値は、準備ができたオブジェクトのリストのトリプルで、最初の3つの引数のサブセットです。ファイル記述子が準備ができていない状態でタイムアウトに達した場合、3つの空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="b21ee42cf5b7e0115206de0a971aa7059c5ad292" translate="yes" xml:space="preserve">
          <source>The return value is a tuple &lt;code&gt;(type, encoding)&lt;/code&gt; where &lt;em&gt;type&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; if the type can&amp;rsquo;t be guessed (missing or unknown suffix) or a string of the form &lt;code&gt;'type/subtype'&lt;/code&gt;, usable for a MIME &lt;em&gt;content-type&lt;/em&gt; header.</source>
          <target state="translated">戻り値は、タプル &lt;code&gt;(type, encoding)&lt;/code&gt; 。&lt;em&gt;タイプを&lt;/em&gt;推測できない場合（タイプが不明またはサフィックスが不明の場合）、&lt;em&gt;タイプ&lt;/em&gt;は &lt;code&gt;None&lt;/code&gt; であるか、MIME &lt;em&gt;content-type&lt;/em&gt;ヘッダーに使用できる &lt;code&gt;'type/subtype'&lt;/code&gt; 形式の文字列です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f4a573600a626a8f185b96ba9102f89d318696f0" translate="yes" xml:space="preserve">
          <source>The return value is an integer in the range 0 to &lt;em&gt;parties&lt;/em&gt; &amp;ndash; 1, different for each thread. This can be used to select a thread to do some special housekeeping, e.g.:</source>
          <target state="translated">戻り値は0から&lt;em&gt;partys&lt;/em&gt; &amp;ndash; 1の範囲の整数で、スレッドごとに異なります。これは、特別なハウスキーピングを行うスレッドを選択するために使用できます。例：</target>
        </trans-unit>
        <trans-unit id="68775830b95659615877cbf5628aaf0c84b66aa7" translate="yes" xml:space="preserve">
          <source>The return value is an object representing the data contained in the &lt;code&gt;siginfo_t&lt;/code&gt; structure, namely: &lt;code&gt;si_signo&lt;/code&gt;, &lt;code&gt;si_code&lt;/code&gt;, &lt;code&gt;si_errno&lt;/code&gt;, &lt;code&gt;si_pid&lt;/code&gt;, &lt;code&gt;si_uid&lt;/code&gt;, &lt;code&gt;si_status&lt;/code&gt;, &lt;code&gt;si_band&lt;/code&gt;.</source>
          <target state="translated">戻り値は、 &lt;code&gt;siginfo_t&lt;/code&gt; 構造体に含まれるデータを表すオブジェクトです。 &lt;code&gt;si_signo&lt;/code&gt; 、 &lt;code&gt;si_code&lt;/code&gt; 、 &lt;code&gt;si_errno&lt;/code&gt; 、 &lt;code&gt;si_pid&lt;/code&gt; 、 &lt;code&gt;si_uid&lt;/code&gt; 、 &lt;code&gt;si_status&lt;/code&gt; 、 &lt;code&gt;si_band&lt;/code&gt; 、si_bandです。</target>
        </trans-unit>
        <trans-unit id="1dd4f172a531526aa876355a2856ad8c9907382d" translate="yes" xml:space="preserve">
          <source>The return value is the amount of bytes copied. This could be less than the amount requested.</source>
          <target state="translated">返り値はコピーされたバイト数です。これは要求された量よりも少ない可能性があります。</target>
        </trans-unit>
        <trans-unit id="234b77eb5ef9ce8e2fcd0cab178d38c7fe6e2fca" translate="yes" xml:space="preserve">
          <source>The return value is the handle of the opened key. If the function fails, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">戻り値は開いたキーのハンドルです。関数が失敗すると、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="dc2557edef7b13a49741617f01fcdba9c83af0ab" translate="yes" xml:space="preserve">
          <source>The return value is the number of bytes written, which is always equal to the length of &lt;em&gt;buf&lt;/em&gt;.</source>
          <target state="translated">戻り値は書き込まれたバイト数で、常に&lt;em&gt;buf&lt;/em&gt;の長さと等しくなります。</target>
        </trans-unit>
        <trans-unit id="62cbe2d5893b50a026494fd6fee07e88125f71a2" translate="yes" xml:space="preserve">
          <source>The return value is the result of the evaluated expression. Syntax errors are reported as exceptions. Example:</source>
          <target state="translated">戻り値は、評価された式の結果です。構文エラーは例外として報告されます。例を示します。</target>
        </trans-unit>
        <trans-unit id="9b569673d77a40a394325206915c8d678591e80f" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;MagicMock.__iter__()&lt;/code&gt; can be any iterable object and isn&amp;rsquo;t required to be an iterator:</source>
          <target state="translated">&lt;code&gt;MagicMock.__iter__()&lt;/code&gt; の戻り値は、任意の反復可能なオブジェクトにすることができ、反復子である必要はありません。</target>
        </trans-unit>
        <trans-unit id="6d324367f598aa028770dca0838f66177648fed1" translate="yes" xml:space="preserve">
          <source>The return value.</source>
          <target state="translated">戻り値です。</target>
        </trans-unit>
        <trans-unit id="c335b6a081673631849b8c4210800ac50f8d01b4" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; has an additional property named &lt;code&gt;exact_type&lt;/code&gt; that contains the exact operator type for &lt;a href=&quot;token#token.OP&quot;&gt;&lt;code&gt;OP&lt;/code&gt;&lt;/a&gt; tokens. For all other token types &lt;code&gt;exact_type&lt;/code&gt; equals the named tuple &lt;code&gt;type&lt;/code&gt; field.</source>
          <target state="translated">返される&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;名前付きタプルに&lt;/a&gt;は、&lt;a href=&quot;token#token.OP&quot;&gt; &lt;code&gt;OP&lt;/code&gt; &lt;/a&gt;トークンの正確な演算子タイプを含む、 &lt;code&gt;exact_type&lt;/code&gt; という名前の追加プロパティがあります。他のすべてのトークンタイプの場合、 &lt;code&gt;exact_type&lt;/code&gt; は名前付きタプル &lt;code&gt;type&lt;/code&gt; フィールドと同じです。</target>
        </trans-unit>
        <trans-unit id="495f48621e32e7509fedd99ab5f78e8a65d4cf9e" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; has an additional property named &lt;code&gt;exact_type&lt;/code&gt; that contains the exact operator type for &lt;a href=&quot;token#token.OP&quot;&gt;&lt;code&gt;OP&lt;/code&gt;&lt;/a&gt; tokens. For all other token types &lt;code&gt;exact_type&lt;/code&gt; equals the named tuple &lt;code&gt;type&lt;/code&gt; field.</source>
          <target state="translated">返される&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;名前付きタプルに&lt;/a&gt;は、&lt;a href=&quot;token#token.OP&quot;&gt; &lt;code&gt;OP&lt;/code&gt; &lt;/a&gt;トークンの正確な演算子タイプを含む &lt;code&gt;exact_type&lt;/code&gt; という名前の追加プロパティがあります。他のすべてのトークンタイプの場合、 &lt;code&gt;exact_type&lt;/code&gt; は名前付きタプル &lt;code&gt;type&lt;/code&gt; フィールドと同じです。</target>
        </trans-unit>
        <trans-unit id="218f49d63286506033a67a8dba86f5940020dd19" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; is to be run by the unittest framework and runs each doctest in the module. If any of the doctests fail, then the synthesized unit test fails, and a &lt;code&gt;failureException&lt;/code&gt; exception is raised showing the name of the file containing the test and a (sometimes approximate) line number.</source>
          <target state="translated">返さ&lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt; &lt;code&gt;unittest.TestSuite&lt;/code&gt; インスタンスは、&lt;/a&gt; unittestのフレームワークによって実行されるべきであり、モジュール内の各doctestを実行します。doctestのいずれかが失敗すると、合成された単体テストが失敗し、テストを含むファイルの名前と（場合によっては）概算の行番号を示す &lt;code&gt;failureException&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="618fad8d525738d877dbb6063471d43125b8556e" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; is to be run by the unittest framework and runs the interactive examples in each file. If an example in any file fails, then the synthesized unit test fails, and a &lt;code&gt;failureException&lt;/code&gt; exception is raised showing the name of the file containing the test and a (sometimes approximate) line number.</source>
          <target state="translated">返された&lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt; &lt;code&gt;unittest.TestSuite&lt;/code&gt; &lt;/a&gt;はunittestフレームワークによって実行され、各ファイルでインタラクティブな例を実行します。ファイル内の例が失敗すると、合成された単体テストが失敗し、テストを含むファイルの名前と（場合によっては）行番号を示す &lt;code&gt;failureException&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="8b0b6693ed01480a4045d1615145e7f1cf427145" translate="yes" xml:space="preserve">
          <source>The returned &lt;em&gt;reader&lt;/em&gt; and &lt;em&gt;writer&lt;/em&gt; objects are instances of &lt;a href=&quot;#asyncio.StreamReader&quot;&gt;&lt;code&gt;StreamReader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.StreamWriter&quot;&gt;&lt;code&gt;StreamWriter&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">返される&lt;em&gt;リーダー&lt;/em&gt;オブジェクトと&lt;em&gt;ライター&lt;/em&gt;オブジェクトは、&lt;a href=&quot;#asyncio.StreamReader&quot;&gt; &lt;code&gt;StreamReader&lt;/code&gt; &lt;/a&gt;クラスと&lt;a href=&quot;#asyncio.StreamWriter&quot;&gt; &lt;code&gt;StreamWriter&lt;/code&gt; &lt;/a&gt;クラスのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="1f96113d2cc534f7b7ef202bb144452bc5b31520" translate="yes" xml:space="preserve">
          <source>The returned env-builder is an object which has a method, &lt;code&gt;create&lt;/code&gt;:</source>
          <target state="translated">返されるenv-builderは、メソッド &lt;code&gt;create&lt;/code&gt; を持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="9970c84bf057aeac8a4c0b64f98b2bef0c7395a9" translate="yes" xml:space="preserve">
          <source>The returned finder is cached in &lt;a href=&quot;sys#sys.path_importer_cache&quot;&gt;&lt;code&gt;sys.path_importer_cache&lt;/code&gt;&lt;/a&gt; if it was newly created by a path hook.</source>
          <target state="translated">返されたファインダーは、&lt;a href=&quot;sys#sys.path_importer_cache&quot;&gt; &lt;code&gt;sys.path_importer_cache&lt;/code&gt; &lt;/a&gt;によって新しく作成された場合、sys.path_importer_cacheにキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="7674772aaa7c3d69c9b57697d013a9667cfcd482" translate="yes" xml:space="preserve">
          <source>The returned function prototype creates functions that use the Python calling convention. The function will &lt;em&gt;not&lt;/em&gt; release the GIL during the call.</source>
          <target state="translated">返された関数プロトタイプは、Python呼び出し規約を使用する関数を作成します。関数は、呼び出し中にGILを解放し&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="73c626017b30388a1c8db06167f7d17be6ca7ee7" translate="yes" xml:space="preserve">
          <source>The returned function prototype creates functions that use the standard C calling convention. The function will release the GIL during the call. If &lt;em&gt;use_errno&lt;/em&gt; is set to true, the ctypes private copy of the system &lt;a href=&quot;errno#module-errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; variable is exchanged with the real &lt;a href=&quot;errno#module-errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; value before and after the call; &lt;em&gt;use_last_error&lt;/em&gt; does the same for the Windows error code.</source>
          <target state="translated">返された関数プロトタイプは、標準のC呼び出し規約を使用する関数を作成します。関数は、呼び出し中にGILを解放します。場合&lt;em&gt;use_errnoが&lt;/em&gt; trueに設定され、システムのctypesのプライベートコピー&lt;a href=&quot;errno#module-errno&quot;&gt; &lt;code&gt;errno&lt;/code&gt; &lt;/a&gt;変数は、実際に交換され&lt;a href=&quot;errno#module-errno&quot;&gt; &lt;code&gt;errno&lt;/code&gt; &lt;/a&gt;呼び出しの前と後の値。&lt;em&gt;use_last_error&lt;/em&gt;は、Windowsエラーコードに対して同じことを行います。</target>
        </trans-unit>
        <trans-unit id="eb4feb485235fe9256f397550a46a3fa39024fdd" translate="yes" xml:space="preserve">
          <source>The returned group is itself an iterator that shares the underlying iterable with &lt;a href=&quot;#itertools.groupby&quot;&gt;&lt;code&gt;groupby()&lt;/code&gt;&lt;/a&gt;. Because the source is shared, when the &lt;a href=&quot;#itertools.groupby&quot;&gt;&lt;code&gt;groupby()&lt;/code&gt;&lt;/a&gt; object is advanced, the previous group is no longer visible. So, if that data is needed later, it should be stored as a list:</source>
          <target state="translated">返されるグループは、それ自体が&lt;a href=&quot;#itertools.groupby&quot;&gt; &lt;code&gt;groupby()&lt;/code&gt; &lt;/a&gt;と基本の反復可能オブジェクトを共有する反復子です。ソースが共有されているため、&lt;a href=&quot;#itertools.groupby&quot;&gt; &lt;code&gt;groupby()&lt;/code&gt; &lt;/a&gt;オブジェクトが拡張されると、前のグループは表示されなくなります。したがって、そのデータが後で必要になった場合は、リストとして格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="a343865b66bc184e10fbb10b32f697cc0caef5f8" translate="yes" xml:space="preserve">
          <source>The returned insertion point &lt;em&gt;i&lt;/em&gt; partitions the array &lt;em&gt;a&lt;/em&gt; into two halves so that &lt;code&gt;all(val &amp;lt; x for val in a[lo:i])&lt;/code&gt; for the left side and &lt;code&gt;all(val &amp;gt;= x for val in a[i:hi])&lt;/code&gt; for the right side.</source>
          <target state="translated">返された挿入ポイント&lt;em&gt;i&lt;/em&gt;は、配列&lt;em&gt;a&lt;/em&gt;を2つの半分に分割します。これにより、左側の &lt;code&gt;all(val &amp;lt; x for val in a[lo:i])&lt;/code&gt; と &lt;code&gt;all(val &amp;gt;= x for val in a[i:hi])&lt;/code&gt; 右側です。</target>
        </trans-unit>
        <trans-unit id="669ff275cf0c181691c08c67e29ac61182ca5faf" translate="yes" xml:space="preserve">
          <source>The returned insertion point &lt;em&gt;i&lt;/em&gt; partitions the array &lt;em&gt;a&lt;/em&gt; into two halves so that &lt;code&gt;all(val &amp;lt;= x for val in a[lo:i])&lt;/code&gt; for the left side and &lt;code&gt;all(val &amp;gt; x for val in a[i:hi])&lt;/code&gt; for the right side.</source>
          <target state="translated">返された挿入ポイント&lt;em&gt;i&lt;/em&gt;は、配列&lt;em&gt;a&lt;/em&gt;を2つの半分に分割し、左側が &lt;code&gt;all(val &amp;lt;= x for val in a[lo:i])&lt;/code&gt; であり、 &lt;code&gt;all(val &amp;gt; x for val in a[i:hi])&lt;/code&gt; 右側です。</target>
        </trans-unit>
        <trans-unit id="53fe3542ff9fe12d2d3e1cb75fec1f427d2042d1" translate="yes" xml:space="preserve">
          <source>The returned instance is a proxy object with methods that can be used to invoke corresponding RPC calls on the remote server. If the remote server supports the introspection API, the proxy can also be used to query the remote server for the methods it supports (service discovery) and fetch other server-associated metadata.</source>
          <target state="translated">返されるインスタンスは、リモートサーバ上で対応するRPCコールを呼び出すために使用できるメソッドを持つプロキシオブジェクトです。リモートサーバが introspection API をサポートしている場合、プロキシはリモートサーバがサポートしているメソッドを問い合わせたり (サービスディスカバリ)、他のサーバ関連のメタデータを取得したりするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="c7288877f11459f6ab28ff785ec24351c4aa442e" translate="yes" xml:space="preserve">
          <source>The returned iterator raises a &lt;a href=&quot;#concurrent.futures.TimeoutError&quot;&gt;&lt;code&gt;concurrent.futures.TimeoutError&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt;&lt;code&gt;__next__()&lt;/code&gt;&lt;/a&gt; is called and the result isn&amp;rsquo;t available after &lt;em&gt;timeout&lt;/em&gt; seconds from the original call to &lt;a href=&quot;#concurrent.futures.Executor.map&quot;&gt;&lt;code&gt;Executor.map()&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;timeout&lt;/em&gt; can be an int or a float. If &lt;em&gt;timeout&lt;/em&gt; is not specified or &lt;code&gt;None&lt;/code&gt;, there is no limit to the wait time.</source>
          <target state="translated">返されたイテレータは、&lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt; &lt;code&gt;__next__()&lt;/code&gt; &lt;/a&gt;が呼び出され、&lt;a href=&quot;#concurrent.futures.Executor.map&quot;&gt; &lt;code&gt;Executor.map()&lt;/code&gt; &lt;/a&gt;への最初の呼び出しから&lt;em&gt;タイムアウト&lt;/em&gt;秒数が経過すると結果が利用できない場合、&lt;a href=&quot;#concurrent.futures.TimeoutError&quot;&gt; &lt;code&gt;concurrent.futures.TimeoutError&lt;/code&gt; &lt;/a&gt;を発生させます。&lt;em&gt;timeout&lt;/em&gt;は、intまたはfloatにすることができます。&lt;em&gt;タイムアウト&lt;/em&gt;が指定されていないか &lt;code&gt;None&lt;/code&gt; の場合、待機時間に制限はありません。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d24b35f2954c9d4ccee793a3bacdf330b843c26a" translate="yes" xml:space="preserve">
          <source>The returned list will be sorted in the order they appeared in the original header list or were added to this instance, and may contain duplicates. Any fields deleted and re-inserted are always appended to the header list. If no fields exist with the given name, returns an empty list.</source>
          <target state="translated">返されたリストは、元のヘッダリストに現れた順、またはこのインスタンスに追加された順にソートされ、重複を含む場合があります。削除されて再挿入されたフィールドは常にヘッダーリストに追加されます。与えられた名前のフィールドが存在しない場合、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="3cf77cc7d995685ae1853fc00d68172f80697726" translate="yes" xml:space="preserve">
          <source>The returned object can only be used as a foreign function call parameter. It behaves similar to &lt;code&gt;pointer(obj)&lt;/code&gt;, but the construction is a lot faster.</source>
          <target state="translated">返されたオブジェクトは、外部関数呼び出しパラメーターとしてのみ使用できます。これは &lt;code&gt;pointer(obj)&lt;/code&gt; と同様に動作しますが、構築ははるかに高速です。</target>
        </trans-unit>
        <trans-unit id="944d9677c5e06b68735cee6e1214d92d8f721c2f" translate="yes" xml:space="preserve">
          <source>The returned object is a file-like object whose &lt;code&gt;_file&lt;/code&gt; attribute is either an &lt;a href=&quot;io#io.BytesIO&quot;&gt;&lt;code&gt;io.BytesIO&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; object (depending on whether binary or text &lt;em&gt;mode&lt;/em&gt; was specified) or a true file object, depending on whether &lt;code&gt;rollover()&lt;/code&gt; has been called. This file-like object can be used in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, just like a normal file.</source>
          <target state="translated">返されるオブジェクトは、 &lt;code&gt;_file&lt;/code&gt; 属性が&lt;a href=&quot;io#io.BytesIO&quot;&gt; &lt;code&gt;io.BytesIO&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt;オブジェクト（バイナリ&lt;em&gt;モードと&lt;/em&gt;テキスト&lt;em&gt;モードの&lt;/em&gt;どちらが指定されたかに応じて異なります）であるファイルのようなオブジェクト、またはrollover &lt;code&gt;rollover()&lt;/code&gt; が呼び出されたかどうかに応じて実際のファイルオブジェクトです。このファイルのようなオブジェクトは、通常のファイルと同じように&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントで使用できます。</target>
        </trans-unit>
        <trans-unit id="63b21c5c69819c1c91c200a05cc8559e27dc6d81" translate="yes" xml:space="preserve">
          <source>The returned object is a file-like object whose &lt;code&gt;_file&lt;/code&gt; attribute is either an &lt;a href=&quot;io#io.BytesIO&quot;&gt;&lt;code&gt;io.BytesIO&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; object (depending on whether binary or text &lt;em&gt;mode&lt;/em&gt; was specified) or a true file object, depending on whether &lt;code&gt;rollover()&lt;/code&gt; has been called. This file-like object can be used in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, just like a normal file.</source>
          <target state="translated">返されるオブジェクトは、 &lt;code&gt;_file&lt;/code&gt; 属性が&lt;a href=&quot;io#io.BytesIO&quot;&gt; &lt;code&gt;io.BytesIO&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt;オブジェクト（バイナリ&lt;em&gt;モード&lt;/em&gt;またはテキスト&lt;em&gt;モード&lt;/em&gt;が指定されているかどうかに応じて）または実際のファイルオブジェクト（rollover &lt;code&gt;rollover()&lt;/code&gt; が呼び出されているかどうかに応じて）のいずれかであるファイルのようなオブジェクトです。このファイルのようなオブジェクトは、通常のファイルと同じように、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントで使用できます。</target>
        </trans-unit>
        <trans-unit id="8ba4ccce7e74dabed802bdff9234a1122b0c4107" translate="yes" xml:space="preserve">
          <source>The returned object is a true file object on POSIX platforms. On other platforms, it is a file-like object whose &lt;code&gt;file&lt;/code&gt; attribute is the underlying true file object.</source>
          <target state="translated">返されるオブジェクトは、POSIXプラットフォームの真のファイルオブジェクトです。他のプラットフォームでは、それはファイルのようなオブジェクトであり、その &lt;code&gt;file&lt;/code&gt; 属性は基礎となる真のファイルオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="2d61336daabebc08319a6841656673dafcebf7ab" translate="yes" xml:space="preserve">
          <source>The returned property object also has the attributes &lt;code&gt;fget&lt;/code&gt;, &lt;code&gt;fset&lt;/code&gt;, and &lt;code&gt;fdel&lt;/code&gt; corresponding to the constructor arguments.</source>
          <target state="translated">返されるプロパティオブジェクトには、コンストラクターの引数に対応する属性 &lt;code&gt;fget&lt;/code&gt; 、 &lt;code&gt;fset&lt;/code&gt; 、および &lt;code&gt;fdel&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="1078216c97fc2cb54c2f472e356bef009039e6ee" translate="yes" xml:space="preserve">
          <source>The returned string includes the currency symbol if &lt;em&gt;symbol&lt;/em&gt; is true, which is the default. If &lt;em&gt;grouping&lt;/em&gt; is true (which is not the default), grouping is done with the value. If &lt;em&gt;international&lt;/em&gt; is true (which is not the default), the international currency symbol is used.</source>
          <target state="translated">返される文字列には、&lt;em&gt;symbol&lt;/em&gt;がtrue（デフォルト）の場合、通貨記号が含まれます。場合は&lt;em&gt;グループ化は&lt;/em&gt;（デフォルトではありません）trueの場合、グループ化は値で行われます。場合は&lt;em&gt;国際は&lt;/em&gt;（デフォルトではない）真である、国際通貨記号が使用されています。</target>
        </trans-unit>
        <trans-unit id="bfd8c08933483893f75b8b7fdb1a5319adb8fe8b" translate="yes" xml:space="preserve">
          <source>The returned value is shell-escaped to protect against injection vulnerabilities (see &lt;a href=&quot;#shlex.quote&quot;&gt;&lt;code&gt;quote()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">戻り値は、注入の脆弱性から保護するためにシェルエスケープされます（&lt;a href=&quot;#shlex.quote&quot;&gt; &lt;code&gt;quote()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f6e2d49d3bb8bfbea2c5c7323f9693333c6fa08d" translate="yes" xml:space="preserve">
          <source>The returned value will be a copy of the result of the call or a proxy to a new shared object &amp;ndash; see documentation for the &lt;em&gt;method_to_typeid&lt;/em&gt; argument of &lt;a href=&quot;#multiprocessing.managers.BaseManager.register&quot;&gt;&lt;code&gt;BaseManager.register()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は、呼び出しの結果のコピー、または新しい共有オブジェクトへのプロキシに&lt;em&gt;なり&lt;/em&gt;ます&lt;a href=&quot;#multiprocessing.managers.BaseManager.register&quot;&gt; &lt;code&gt;BaseManager.register()&lt;/code&gt; &lt;/a&gt;&lt;em&gt; method_to_typeid&lt;/em&gt;引数のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cb70bf1a9ac2dc854c2a93668773c6b77481b4f9" translate="yes" xml:space="preserve">
          <source>The root item may not be deleted.</source>
          <target state="translated">ルート項目は削除できません。</target>
        </trans-unit>
        <trans-unit id="3890ffaf0a29880883c4c861690ab01939538879" translate="yes" xml:space="preserve">
          <source>The root item may not be detached.</source>
          <target state="translated">ルート項目は切り離せない場合があります。</target>
        </trans-unit>
        <trans-unit id="8724776bb36627ef8324ed2cee8596adf2c111ef" translate="yes" xml:space="preserve">
          <source>The root logger must specify a level and a list of handlers. An example of a root logger section is given below.</source>
          <target state="translated">ルート ロガーは、レベルとハンドラのリストを指定する必要があります。ルート ロガー セクションの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="c8aa0536a231f439ca03f4c8eab15fc8b24452be" translate="yes" xml:space="preserve">
          <source>The root of the numeric hierarchy. If you just want to check if an argument &lt;em&gt;x&lt;/em&gt; is a number, without caring what kind, use &lt;code&gt;isinstance(x, Number)&lt;/code&gt;.</source>
          <target state="translated">数値階層のルート。引数&lt;em&gt;x&lt;/em&gt;が数値かどうかを確認するだけで、種類を気にしない場合は、 &lt;code&gt;isinstance(x, Number)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d9b3ac7015fd4390c4695675d6ffe8261b0a5c14" translate="yes" xml:space="preserve">
          <source>The routine takes time proportional to &lt;code&gt;len(fragment)&lt;/code&gt;.</source>
          <target state="translated">ルーチンは &lt;code&gt;len(fragment)&lt;/code&gt; に比例して時間がかかります。</target>
        </trans-unit>
        <trans-unit id="c458d0b0fe448ae2d0a4d83d7ec4609f7e529b08" translate="yes" xml:space="preserve">
          <source>The rule of thumb is to never expose Future objects in user-facing APIs, and the recommended way to create a Future object is to call &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_future&quot;&gt;&lt;code&gt;loop.create_future()&lt;/code&gt;&lt;/a&gt;. This way alternative event loop implementations can inject their own optimized implementations of a Future object.</source>
          <target state="translated">経験則では、ユーザー向けAPIでFutureオブジェクトを公開しないで&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_future&quot;&gt; &lt;code&gt;loop.create_future()&lt;/code&gt; &lt;/a&gt;オブジェクトを作成するための推奨される方法は、loop.create_future（）を呼び出すことです。このようにして、代替イベントループ実装は、Futureオブジェクトの独自の最適化された実装を注入できます。</target>
        </trans-unit>
        <trans-unit id="b9d329adbb453311cb1f83021747ba8fe74b77e2" translate="yes" xml:space="preserve">
          <source>The rules for what is allowed are as follows: names that start and end with a single underscore are reserved by enum and cannot be used; all other attributes defined within an enumeration will become members of this enumeration, with the exception of special methods (&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__add__&quot;&gt;&lt;code&gt;__add__()&lt;/code&gt;&lt;/a&gt;, etc.), descriptors (methods are also descriptors), and variable names listed in &lt;code&gt;_ignore_&lt;/code&gt;.</source>
          <target state="translated">許可されるルールは次のとおりです。単一のアンダースコアで開始および終了する名前はenumによって予約されており、使用できません。列挙内で定義されている他のすべての属性は、特別なメソッド（&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__str__&quot;&gt; &lt;code&gt;__str__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__add__&quot;&gt; &lt;code&gt;__add__()&lt;/code&gt; &lt;/a&gt;など）、記述子（メソッドも記述子）、および &lt;code&gt;_ignore_&lt;/code&gt; にリストされている変数名を除いて、この列挙のメンバーになります。</target>
        </trans-unit>
        <trans-unit id="ebe703515002487a2b0312a4527a4116966e227c" translate="yes" xml:space="preserve">
          <source>The rules for what is allowed are as follows: names that start and end with a single underscore are reserved by enum and cannot be used; all other attributes defined within an enumeration will become members of this enumeration, with the exception of special methods (&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__add__&quot;&gt;&lt;code&gt;__add__()&lt;/code&gt;&lt;/a&gt;, etc.), descriptors (methods are also descriptors), and variable names listed in &lt;code&gt;_ignore_&lt;/code&gt;.</source>
          <target state="translated">許可されるものの規則は次のとおりです。単一のアンダースコアで開始および終了する名前は列挙型によって予約されており、使用できません。列挙内で定義された他のすべての属性は、特別なメソッド（&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__str__&quot;&gt; &lt;code&gt;__str__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__add__&quot;&gt; &lt;code&gt;__add__()&lt;/code&gt; &lt;/a&gt;など）、記述子（メソッドも記述子）、および &lt;code&gt;_ignore_&lt;/code&gt; にリストされている変数名を除いて、この列挙のメンバーになります。</target>
        </trans-unit>
        <trans-unit id="61698b0a1acd1e3ec12a3341214499d204a64941" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;fallback&lt;/code&gt; argument can be used with the &lt;a href=&quot;#configparser.ConfigParser.getint&quot;&gt;&lt;code&gt;getint()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#configparser.ConfigParser.getfloat&quot;&gt;&lt;code&gt;getfloat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt;&lt;code&gt;getboolean()&lt;/code&gt;&lt;/a&gt; methods, for example:</source>
          <target state="translated">同じ &lt;code&gt;fallback&lt;/code&gt; 引数を&lt;a href=&quot;#configparser.ConfigParser.getint&quot;&gt; &lt;code&gt;getint()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#configparser.ConfigParser.getfloat&quot;&gt; &lt;code&gt;getfloat()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt; &lt;code&gt;getboolean()&lt;/code&gt; &lt;/a&gt;メソッドで使用できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="fe0ad54a153c9c16fc953f6457e2a08391e6ddfd" translate="yes" xml:space="preserve">
          <source>The same applies to writing in something other than the system default encoding: specify the encoding argument when opening the output file.</source>
          <target state="translated">同じことが、システムのデフォルトのエンコーディング以外のもので書き込む場合にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="ee42da4190d9eab8ed782585f2b56ceaaa52fe60" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#email.policy.EmailPolicy.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#email.policy.Policy.cte_type&quot;&gt;&lt;code&gt;cte_type&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;7bit&lt;/code&gt;, except that the returned value is bytes.</source>
          <target state="translated">戻り値がバイトであることを除いて、&lt;a href=&quot;#email.policy.Policy.cte_type&quot;&gt; &lt;code&gt;cte_type&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;7bit&lt;/code&gt; の場合は&lt;a href=&quot;#email.policy.EmailPolicy.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="d0e9d4a97e7a8c08a403fe0b581fce1bbbca7af2" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#email.policy.Policy.fold&quot;&gt;&lt;code&gt;fold()&lt;/code&gt;&lt;/a&gt;, except that the returned value should be a bytes object rather than a string.</source>
          <target state="translated">&lt;a href=&quot;#email.policy.Policy.fold&quot;&gt; &lt;code&gt;fold()&lt;/code&gt; &lt;/a&gt;と同じですが、戻り値は文字列ではなくbytesオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="d6e3c5f083440fe9bbf887c7f88bf5f04da824a4" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#multiprocessing.pool.Pool.imap&quot;&gt;&lt;code&gt;imap()&lt;/code&gt;&lt;/a&gt; except that the ordering of the results from the returned iterator should be considered arbitrary. (Only when there is only one worker process is the order guaranteed to be &amp;ldquo;correct&amp;rdquo;.)</source>
          <target state="translated">返された反復子からの結果の順序が任意であると見なされることを除いて、&lt;a href=&quot;#multiprocessing.pool.Pool.imap&quot;&gt; &lt;code&gt;imap()&lt;/code&gt; &lt;/a&gt;と同じです。（ワーカープロセスが1つしかない場合のみ、順序が「正しい」ことが保証されます。）</target>
        </trans-unit>
        <trans-unit id="4f0e693b02ea181bbef1c28375701342551141cd" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#multiprocessing.sharedctypes.RawArray&quot;&gt;&lt;code&gt;RawArray()&lt;/code&gt;&lt;/a&gt; except that depending on the value of &lt;em&gt;lock&lt;/em&gt; a process-safe synchronization wrapper may be returned instead of a raw ctypes array.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.sharedctypes.RawArray&quot;&gt; &lt;code&gt;RawArray()&lt;/code&gt; &lt;/a&gt;と同じですが、&lt;em&gt;lock&lt;/em&gt;の値によっては、生のctypes配列の代わりにプロセスセーフな同期ラッパーが返される場合があります。</target>
        </trans-unit>
        <trans-unit id="6cfb2c05572cc99d847c223df250f30149473f05" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#multiprocessing.sharedctypes.RawValue&quot;&gt;&lt;code&gt;RawValue()&lt;/code&gt;&lt;/a&gt; except that depending on the value of &lt;em&gt;lock&lt;/em&gt; a process-safe synchronization wrapper may be returned instead of a raw ctypes object.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.sharedctypes.RawValue&quot;&gt; &lt;code&gt;RawValue()&lt;/code&gt; &lt;/a&gt;と同じですが、&lt;em&gt;lock&lt;/em&gt;の値によっては、生のctypesオブジェクトの代わりにプロセスセーフな同期ラッパーが返される場合があります。</target>
        </trans-unit>
        <trans-unit id="f1a01b84361f53398479056f09464345f02bd043" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#urllib.request.HTTPRedirectHandler.http_error_301&quot;&gt;&lt;code&gt;http_error_301()&lt;/code&gt;&lt;/a&gt;, but called for the &amp;lsquo;found&amp;rsquo; response.</source>
          <target state="translated">&lt;a href=&quot;#urllib.request.HTTPRedirectHandler.http_error_301&quot;&gt; &lt;code&gt;http_error_301()&lt;/code&gt; &lt;/a&gt;と同じですが、「found」応答を要求しました。</target>
        </trans-unit>
        <trans-unit id="750e1ad255c0e380db439ef1dab8b7f8f0852e72" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#urllib.request.HTTPRedirectHandler.http_error_301&quot;&gt;&lt;code&gt;http_error_301()&lt;/code&gt;&lt;/a&gt;, but called for the &amp;lsquo;see other&amp;rsquo; response.</source>
          <target state="translated">&lt;a href=&quot;#urllib.request.HTTPRedirectHandler.http_error_301&quot;&gt; &lt;code&gt;http_error_301()&lt;/code&gt; &lt;/a&gt;と同じですが、「他を参照」応答を要求しました。</target>
        </trans-unit>
        <trans-unit id="49feac63317adae6711e747adbff6e95df411957" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#urllib.request.HTTPRedirectHandler.http_error_301&quot;&gt;&lt;code&gt;http_error_301()&lt;/code&gt;&lt;/a&gt;, but called for the &amp;lsquo;temporary redirect&amp;rsquo; response.</source>
          <target state="translated">&lt;a href=&quot;#urllib.request.HTTPRedirectHandler.http_error_301&quot;&gt; &lt;code&gt;http_error_301()&lt;/code&gt; &lt;/a&gt;と同じですが、「一時的なリダイレクト」応答を要求しました。</target>
        </trans-unit>
        <trans-unit id="8230ae470e5c59b6f3c4881b2a39dc38aedffae8" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;'d'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'d'&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="916ed3638cece914ee2fc8b1652dfd07c219904b" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;'s'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'s'&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="829e5aa2fdb08ee46435ea6cf88e99987eb1e392" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;SMTP&lt;/code&gt; except that &lt;a href=&quot;#email.policy.EmailPolicy.utf8&quot;&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;. Useful for serializing messages to a message store without using encoded words in the headers. Should only be used for SMTP transmission if the sender or recipient addresses have non-ASCII characters (the &lt;a href=&quot;smtplib#smtplib.SMTP.send_message&quot;&gt;&lt;code&gt;smtplib.SMTP.send_message()&lt;/code&gt;&lt;/a&gt; method handles this automatically).</source>
          <target state="translated">&lt;a href=&quot;#email.policy.EmailPolicy.utf8&quot;&gt; &lt;code&gt;utf8&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; であることを除いて、 &lt;code&gt;SMTP&lt;/code&gt; と同じです。ヘッダーにエンコードされた単語を使用せずにメッセージをメッセージストアにシリアル化するのに役立ちます。送信者または受信者のアドレスに非ASCII文字が含まれている場合にのみ、SMTP送信に使用する必要があります（&lt;a href=&quot;smtplib#smtplib.SMTP.send_message&quot;&gt; &lt;code&gt;smtplib.SMTP.send_message()&lt;/code&gt; &lt;/a&gt;メソッドがこれを自動的に処理します）。</target>
        </trans-unit>
        <trans-unit id="532039e29cf202190420d4e6121e0b76b86ef2f9" translate="yes" xml:space="preserve">
          <source>The same as the ellipsis literal &amp;ldquo;&lt;code&gt;...&lt;/code&gt;&amp;rdquo;. Special value used mostly in conjunction with extended slicing syntax for user-defined container data types.</source>
          <target state="translated">省略記号リテラル「 &lt;code&gt;...&lt;/code&gt; 」と同じです。主にユーザー定義のコンテナーデータ型の拡張スライス構文と組み合わせて使用​​される特別な値。</target>
        </trans-unit>
        <trans-unit id="b854b52ef7bd2ccfd324aed6049a603fc8fb7751" translate="yes" xml:space="preserve">
          <source>The same can be done using the &lt;a href=&quot;#timeit.Timer&quot;&gt;&lt;code&gt;Timer&lt;/code&gt;&lt;/a&gt; class and its methods:</source>
          <target state="translated">&lt;a href=&quot;#timeit.Timer&quot;&gt; &lt;code&gt;Timer&lt;/code&gt; &lt;/a&gt;クラスとそのメソッドを使用して同じことを行うことができます。</target>
        </trans-unit>
        <trans-unit id="e4760c18be62a9d7dec114efc1c14ea346862762" translate="yes" xml:space="preserve">
          <source>The same can be done using the &lt;a href=&quot;#zipapp.create_archive&quot;&gt;&lt;code&gt;create_archive()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">同じことは&lt;a href=&quot;#zipapp.create_archive&quot;&gt; &lt;code&gt;create_archive()&lt;/code&gt; &lt;/a&gt;関数を使用して行うことができます：</target>
        </trans-unit>
        <trans-unit id="1b0e747134e643ee7b418317f6324c54e529d2a3" translate="yes" xml:space="preserve">
          <source>The same effect may be had by simply calling the &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;インスタンスを呼び出すだけで、同じ効果が得られる場合があります。</target>
        </trans-unit>
        <trans-unit id="7ee95343967fc42163ec543a6a7c5d8e1c5cae20" translate="yes" xml:space="preserve">
          <source>The same example using the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントを使用した同じ例：</target>
        </trans-unit>
        <trans-unit id="3136db70fec32537a20098587fa73ba76fdb2570" translate="yes" xml:space="preserve">
          <source>The same example using the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントを使用した同じ例：</target>
        </trans-unit>
        <trans-unit id="f21bc4fc65a842a8845b57c261870ced2cf68832" translate="yes" xml:space="preserve">
          <source>The same pattern can be used for other similar decorators: &lt;code&gt;staticmethod&lt;/code&gt;, &lt;code&gt;abstractmethod&lt;/code&gt;, and others.</source>
          <target state="translated">同じパターンを他の同様のデコレーター（ &lt;code&gt;staticmethod&lt;/code&gt; 、 &lt;code&gt;abstractmethod&lt;/code&gt; など）に使用できます。</target>
        </trans-unit>
        <trans-unit id="f3dc1e5cb29f2f7aa6277b41a35ebe97be0cfb65" translate="yes" xml:space="preserve">
          <source>The same thing can be achieved in the constructor call to mocks:</source>
          <target state="translated">同じことは、モックのコンストラクタ呼び出しでも実現できます。</target>
        </trans-unit>
        <trans-unit id="9af275e54fe0509a959d2873010a1018b8c67266" translate="yes" xml:space="preserve">
          <source>The same, in reverse, has to be applied when converting from 8 to 16, 24 or 32 bit width samples.</source>
          <target state="translated">同様に、逆に8から16、24、32ビット幅のサンプルに変換する場合にも適用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c88a256e1b82c972fc3255b212954b50fdc69e36" translate="yes" xml:space="preserve">
          <source>The sample mean gives an unbiased estimate of the true population mean, so that when taken on average over all the possible samples, &lt;code&gt;mean(sample)&lt;/code&gt; converges on the true mean of the entire population. If &lt;em&gt;data&lt;/em&gt; represents the entire population rather than a sample, then &lt;code&gt;mean(data)&lt;/code&gt; is equivalent to calculating the true population mean &amp;mu;.</source>
          <target state="translated">標本平均は、真の母集団平均の不偏推定値を提供するため、可能なすべてのサンプルについて &lt;code&gt;mean(sample)&lt;/code&gt; 、mean（sample）は母集団全体の真の平均に収束します。&lt;em&gt;データ&lt;/em&gt;が標本ではなく母集団全体を表す場合、 &lt;code&gt;mean(data)&lt;/code&gt; は真の母集団平均&amp;mu;を計算することと同じです。</target>
        </trans-unit>
        <trans-unit id="1b6d6ef4afe2bb1824ced5480b576fe34f8770f0" translate="yes" xml:space="preserve">
          <source>The scheduling priority for a scheduling policy.</source>
          <target state="translated">スケジューリングポリシーのスケジューリング優先度。</target>
        </trans-unit>
        <trans-unit id="a789b28f90e6a13336b5a43d081ce2c14e0e32bb" translate="yes" xml:space="preserve">
          <source>The schema describes a set of logging objects - loggers, handlers, formatters, filters - which are connected to each other in an object graph. Thus, the schema needs to represent connections between the objects. For example, say that, once configured, a particular logger has attached to it a particular handler. For the purposes of this discussion, we can say that the logger represents the source, and the handler the destination, of a connection between the two. Of course in the configured objects this is represented by the logger holding a reference to the handler. In the configuration dict, this is done by giving each destination object an id which identifies it unambiguously, and then using the id in the source object&amp;rsquo;s configuration to indicate that a connection exists between the source and the destination object with that id.</source>
          <target state="translated">スキーマは、オブジェクトグラフで相互に接続されているロギングオブジェクトのセット（ロガー、ハンドラー、フォーマッター、フィルター）を記述します。したがって、スキーマはオブジェクト間の接続を表す必要があります。たとえば、いったん設定されると、特定のロガーが特定のハンドラーをそれにアタッチしたとします。この説明では、ロガーが2つの接続のソースを表し、ハンドラが宛先を表すと言えます。もちろん、構成されたオブジェクトでは、これは、ハンドラーへの参照を保持するロガーによって表されます。構成辞書では、これは各宛先オブジェクトに明確に識別するIDを与え、ソースオブジェクトの構成でIDを使用して、ソースとそのIDを持つ宛先オブジェクトの間に接続が存在することを示すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="357034175b5af2bba561f08e5abd996027ed8d5a" translate="yes" xml:space="preserve">
          <source>The schema supports user-defined objects for handlers, filters and formatters. (Loggers do not need to have different types for different instances, so there is no support in this configuration schema for user-defined logger classes.)</source>
          <target state="translated">このスキーマは、ハンドラ、フィルタ、およびフォーマッタ用のユーザー定義オブジェクトをサポートします。(ロガーは異なるインスタンスに対して異なるタイプを持つ必要はないので、この構成スキーマではユーザー定義のロガー クラスはサポートされていません)。</target>
        </trans-unit>
        <trans-unit id="f5cf05c8728d612453b8e5fe6be79e83aec4e76a" translate="yes" xml:space="preserve">
          <source>The script &lt;code&gt;Tools/unittestgui/unittestgui.py&lt;/code&gt; in the Python source distribution is a GUI tool for test discovery and execution. This is intended largely for ease of use for those new to unit testing. For production environments it is recommended that tests be driven by a continuous integration system such as &lt;a href=&quot;https://buildbot.net/&quot;&gt;Buildbot&lt;/a&gt;, &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; or &lt;a href=&quot;http://hudson-ci.org/&quot;&gt;Hudson&lt;/a&gt;.</source>
          <target state="translated">Pythonソースディストリビューションのスクリプト &lt;code&gt;Tools/unittestgui/unittestgui.py&lt;/code&gt; は、テストの検出と実行のためのGUIツールです。これは主に、ユニットテストを初めて使用するユーザーが使いやすくするためのものです。本番環境では、&lt;a href=&quot;https://buildbot.net/&quot;&gt;Buildbot&lt;/a&gt;、&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;、&lt;a href=&quot;http://hudson-ci.org/&quot;&gt;Hudson&lt;/a&gt;などの継続的インテグレーションシステムでテストを実行することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c4d31cf92666ad824bb699fb1bd45276cded366b" translate="yes" xml:space="preserve">
          <source>The script &lt;code&gt;Tools/unittestgui/unittestgui.py&lt;/code&gt; in the Python source distribution is a GUI tool for test discovery and execution. This is intended largely for ease of use for those new to unit testing. For production environments it is recommended that tests be driven by a continuous integration system such as &lt;a href=&quot;https://buildbot.net/&quot;&gt;Buildbot&lt;/a&gt;, &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; or &lt;a href=&quot;https://travis-ci.com&quot;&gt;Travis-CI&lt;/a&gt;, or &lt;a href=&quot;https://www.appveyor.com/&quot;&gt;AppVeyor&lt;/a&gt;.</source>
          <target state="translated">Pythonソースディストリビューションのスクリプト &lt;code&gt;Tools/unittestgui/unittestgui.py&lt;/code&gt; は、テストの検出と実行のためのGUIツールです。これは主に、単体テストを初めて使用する人が使いやすいようにすることを目的としています。本番環境では、テストのような継続的な統合システムで駆動することが推奨され&lt;a href=&quot;https://buildbot.net/&quot;&gt;Buildbotの&lt;/a&gt;、&lt;a href=&quot;https://jenkins.io/&quot;&gt;ジェンキンス&lt;/a&gt;や&lt;a href=&quot;https://travis-ci.com&quot;&gt;トラヴィス-CI&lt;/a&gt;、または&lt;a href=&quot;https://www.appveyor.com/&quot;&gt;AppVeyor&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="590472629c42696a37ed0e6a09a2aa0815298d38" translate="yes" xml:space="preserve">
          <source>The script &lt;strong&gt;webbrowser&lt;/strong&gt; can be used as a command-line interface for the module. It accepts a URL as the argument. It accepts the following optional parameters: &lt;code&gt;-n&lt;/code&gt; opens the URL in a new browser window, if possible; &lt;code&gt;-t&lt;/code&gt; opens the URL in a new browser page (&amp;ldquo;tab&amp;rdquo;). The options are, naturally, mutually exclusive. Usage example:</source>
          <target state="translated">スクリプト&lt;strong&gt;Webブラウザー&lt;/strong&gt;は、モジュールのコマンドラインインターフェイスとして使用できます。引数としてURLを受け入れます。次のオプションパラメータを受け入れます。 &lt;code&gt;-n&lt;/code&gt; は、可能であれば、新しいブラウザウィンドウでURLを開きます。 &lt;code&gt;-t&lt;/code&gt; は、新しいブラウザーページ（「タブ」）でURLを開きます。当然、オプションは相互に排他的です。使用例：</target>
        </trans-unit>
        <trans-unit id="09613d977f5c11ceb44df4f71da6d33551c96b71" translate="yes" xml:space="preserve">
          <source>The script does not close the file explicitly. By default, Python does not emit any warning. Example using README.txt, which has 269 lines:</source>
          <target state="translated">スクリプトは明示的にファイルを閉じません。デフォルトでは、Pythonは警告を発しません。269行のREADME.txtを使用した例。</target>
        </trans-unit>
        <trans-unit id="7abc03b295e1e06c729bb0d780860fe53a6dc23c" translate="yes" xml:space="preserve">
          <source>The script that is going to get analyzed later on (bacon.py):</source>
          <target state="translated">後で解析されるスクリプト(bacon.py)。</target>
        </trans-unit>
        <trans-unit id="ee5b7d667b6a893a07a7bd795cbb225c3559dadb" translate="yes" xml:space="preserve">
          <source>The script that will output the report of bacon.py:</source>
          <target state="translated">bacon.pyのレポートを出力するスクリプトです。</target>
        </trans-unit>
        <trans-unit id="5c61673a55b5a1642add6c59c9e42d35514177fa" translate="yes" xml:space="preserve">
          <source>The script&amp;rsquo;s input is connected to the client too, and sometimes the form data is read this way; at other times the form data is passed via the &amp;ldquo;query string&amp;rdquo; part of the URL. This module is intended to take care of the different cases and provide a simpler interface to the Python script. It also provides a number of utilities that help in debugging scripts, and the latest addition is support for file uploads from a form (if your browser supports it).</source>
          <target state="translated">スクリプトの入力もクライアントに接続されており、フォームデータがこのように読み込まれることもあります。それ以外の場合、フォームデータはURLの「クエリ文字列」部分を介して渡されます。このモジュールは、さまざまなケースを処理し、Pythonスクリプトへのより単純なインターフェースを提供することを目的としています。また、スクリプトのデバッグに役立つ多数のユーティリティが提供され、最新の追加機能は、フォームからのファイルアップロードのサポートです（ブラウザーがサポートしている場合）。</target>
        </trans-unit>
        <trans-unit id="441a890d73099fc8af230e1050ed5b9319ec7466" translate="yes" xml:space="preserve">
          <source>The scroll bar widget.</source>
          <target state="translated">スクロールバーウィジェットです。</target>
        </trans-unit>
        <trans-unit id="0b2bbe283f6190e08707f30471c6201f3310ca5a" translate="yes" xml:space="preserve">
          <source>The second argument is the &lt;em&gt;source&lt;/em&gt; of enumeration member names. It can be a whitespace-separated string of names, a sequence of names, a sequence of 2-tuples with key/value pairs, or a mapping (e.g. dictionary) of names to values. The last two options enable assigning arbitrary values to enumerations; the others auto-assign increasing integers starting with 1 (use the &lt;code&gt;start&lt;/code&gt; parameter to specify a different starting value). A new class derived from &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; is returned. In other words, the above assignment to &lt;code&gt;Animal&lt;/code&gt; is equivalent to:</source>
          <target state="translated">2番目の引数は、列挙型メンバー名の&lt;em&gt;ソース&lt;/em&gt;です。空白で区切られた名前の文字列、名前のシーケンス、キーと値のペアを持つ2タプルのシーケンス、または名前から値へのマッピング（辞書など）を使用できます。最後の2つのオプションでは、列挙に任意の値を割り当てることができます。その他は、1から始まる増加する整数を自動的に割り当てます（別の開始値を指定するには、 &lt;code&gt;start&lt;/code&gt; パラメーターを使用します）。&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;から派生した新しいクラスが返されます。言い換えれば、上記の &lt;code&gt;Animal&lt;/code&gt; への割り当ては以下と同等です。</target>
        </trans-unit>
        <trans-unit id="3efff11fbd76f900b41de117b028cbaa28815d1e" translate="yes" xml:space="preserve">
          <source>The second argument, if present, specifies the file location to copy to (if absent, the location will be a tempfile with a generated name). The third argument, if present, is a callable that will be called once on establishment of the network connection and once after each block read thereafter. The callable will be passed three arguments; a count of blocks transferred so far, a block size in bytes, and the total size of the file. The third argument may be &lt;code&gt;-1&lt;/code&gt; on older FTP servers which do not return a file size in response to a retrieval request.</source>
          <target state="translated">2番目の引数が存在する場合は、コピー先のファイルの場所を指定します（存在しない場合、場所は生成された名前の一時ファイルになります）。 3番目の引数は、存在する場合、ネットワーク接続の確立時に1回、その後に各ブロックが読み取られた後に1回呼び出される呼び出し可能オブジェクトです。呼び出し可能オブジェクトには3つの引数が渡されます。これまでに転送されたブロックの数、バイト単位のブロックサイズ、およびファイルの合計サイズ。検索要求に応答してファイルサイズを返さない古いFTPサーバーでは、3番目の引数が &lt;code&gt;-1&lt;/code&gt; になる場合があります。</target>
        </trans-unit>
        <trans-unit id="cc342d27fa2c9d42507affce95a9a6a6d772b584" translate="yes" xml:space="preserve">
          <source>The second case may be used on Mac OS X and FreeBSD where &lt;em&gt;headers&lt;/em&gt; and &lt;em&gt;trailers&lt;/em&gt; are arbitrary sequences of buffers that are written before and after the data from &lt;em&gt;in&lt;/em&gt; is written. It returns the same as the first case.</source>
          <target state="translated">2番目のケースはMac OS XとFreeBSDで使用できます。&lt;em&gt;ヘッダー&lt;/em&gt;と&lt;em&gt;トレーラー&lt;/em&gt;は、&lt;em&gt;in&lt;/em&gt;からのデータが書き込まれる前後に書き込まれる任意のバッファーシーケンスです。最初のケースと同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="dc9ed3bf0e51e74a14ebf33737b710029623e678" translate="yes" xml:space="preserve">
          <source>The second case may be used on Mac OS X and FreeBSD where &lt;em&gt;headers&lt;/em&gt; and &lt;em&gt;trailers&lt;/em&gt; are arbitrary sequences of buffers that are written before and after the data from &lt;em&gt;in_fd&lt;/em&gt; is written. It returns the same as the first case.</source>
          <target state="translated">2番目のケースは、Mac OS XおよびFreeBSDで使用できます。&lt;em&gt;ヘッダー&lt;/em&gt;と&lt;em&gt;トレーラー&lt;/em&gt;は、&lt;em&gt;in_fd&lt;/em&gt;からのデータが書き込まれる前後に書き込まれるバッファーの任意のシーケンスです。最初の場合と同じように返されます。</target>
        </trans-unit>
        <trans-unit id="f15a93322f7f76be0339398712074ec97be438ed" translate="yes" xml:space="preserve">
          <source>The second form of the constructor sets the corresponding attributes, described below. The attributes default to &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if not specified. For backwards compatibility, if three arguments are passed, the &lt;a href=&quot;#BaseException.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; attribute contains only a 2-tuple of the first two constructor arguments.</source>
          <target state="translated">コンストラクターの2番目の形式は、以下で説明するように、対応する属性を設定します。指定し&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;場合、属性のデフォルトはNoneです。下位互換性のために、3つの引数が渡された場合、&lt;a href=&quot;#BaseException.args&quot;&gt; &lt;code&gt;args&lt;/code&gt; &lt;/a&gt;属性には最初の2つのコンストラクター引数の2タプルのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="34296b7537391f3024117b10f7c3a5ff4dd5b9d8" translate="yes" xml:space="preserve">
          <source>The second group of options controls how test failures are reported:</source>
          <target state="translated">オプションの第2グループは、テストの失敗がどのように報告されるかを制御します。</target>
        </trans-unit>
        <trans-unit id="a82684db899d668b167ed8174dc94a018b1dcbae" translate="yes" xml:space="preserve">
          <source>The second issue is more general to mocking. If you refactor some of your code, rename members and so on, any tests for code that is still using the &lt;em&gt;old api&lt;/em&gt; but uses mocks instead of the real objects will still pass. This means your tests can all pass even though your code is broken.</source>
          <target state="translated">2番目の問題は、モッキングに対してより一般的です。コードの一部をリファクタリングしたり、メンバーの名前を変更したりすると、&lt;em&gt;古いAPIを&lt;/em&gt;使用しているが、実際のオブジェクトではなくモックを使用するコードのテストはすべて成功します。これは、コードが壊れていても、テストはすべて成功することを意味します。</target>
        </trans-unit>
        <trans-unit id="8e61c328cb69d5d01b94c637cb52d86809c1a81f" translate="yes" xml:space="preserve">
          <source>The second optional keyword argument is &lt;em&gt;stack_info&lt;/em&gt;, which defaults to &lt;code&gt;False&lt;/code&gt;. If true, stack information is added to the logging message, including the actual logging call. Note that this is not the same stack information as that displayed through specifying &lt;em&gt;exc_info&lt;/em&gt;: The former is stack frames from the bottom of the stack up to the logging call in the current thread, whereas the latter is information about stack frames which have been unwound, following an exception, while searching for exception handlers.</source>
          <target state="translated">2番目のオプションのキーワード引数は&lt;em&gt;stack_infoで&lt;/em&gt;、デフォルトは &lt;code&gt;False&lt;/code&gt; です。 trueの場合、実際のロギング呼び出しを含むスタック情報がロギングメッセージに追加されます。これは、&lt;em&gt;exc_info&lt;/em&gt;を指定して表示されるものと同じスタック情報ではないことに注意してください。前者はスタックの一番下から現在のスレッドのロギング呼び出しまでのスタックフレームですが、後者は巻き戻されたスタックフレームに関する情報です。例外ハンドラーを検索しながら、例外を追跡します。</target>
        </trans-unit>
        <trans-unit id="2e4c730e515ea8c7e6ed22283aa940b7c170b41b" translate="yes" xml:space="preserve">
          <source>The second problem is that it &amp;ldquo;takes a while&amp;rdquo; from when an event is dispatched until the profiler&amp;rsquo;s call to get the time actually &lt;em&gt;gets&lt;/em&gt; the state of the clock. Similarly, there is a certain lag when exiting the profiler event handler from the time that the clock&amp;rsquo;s value was obtained (and then squirreled away), until the user&amp;rsquo;s code is once again executing. As a result, functions that are called many times, or call many functions, will typically accumulate this error. The error that accumulates in this fashion is typically less than the accuracy of the clock (less than one clock tick), but it &lt;em&gt;can&lt;/em&gt; accumulate and become very significant.</source>
          <target state="translated">2番目の問題は、イベントがディスパッチされてから、時間を取得するためのプロファイラーの呼び出しが実際&lt;em&gt;に&lt;/em&gt;クロックの状態を取得するまでに「時間がかかる」ことです。同様に、プロファイラーイベントハンドラーを終了するときに、クロックの値が取得された（そしてリスが削除された）時点から、ユーザーのコードが再度実行されるまで、一定の遅延があります。その結果、何度も呼び出される関数、または多くの関数を呼び出す関数は、通常、このエラーを蓄積します。この方法で蓄積するエラーは通常、クロックの精度よりも低く（1クロック未満）、蓄積して非常に重大になる&lt;em&gt;可能性&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="d32a81f75e96772b4383da9bf4edd54a00fffcf6" translate="yes" xml:space="preserve">
          <source>The second section is usually HTML, which allows the client software to display nicely formatted text with header, in-line images, etc. Here&amp;rsquo;s Python code that prints a simple piece of HTML:</source>
          <target state="translated">2番目のセクションは通常HTMLです。これにより、クライアントソフトウェアは、ヘッダーやインライン画像などを含む適切にフォーマットされたテキストを表示できます。以下は、簡単なHTMLを出力するPythonコードです。</target>
        </trans-unit>
        <trans-unit id="3983ca9591946a2e35ceee565ce274efeaded338" translate="yes" xml:space="preserve">
          <source>The second subclass allows for connections created by a child process:</source>
          <target state="translated">2 番目のサブクラスでは、子プロセスによって作成されたコネクションを使用することができます。</target>
        </trans-unit>
        <trans-unit id="5434750abc7b69faf1ffb090ae9381c4aab45452" translate="yes" xml:space="preserve">
          <source>The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement &amp;ldquo;diamond diagrams&amp;rdquo; where multiple base classes implement the same method. Good design dictates that this method have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime).</source>
          <target state="translated">2番目の使用例は、動的実行環境で協調的な多重継承をサポートすることです。この使用例はPythonに固有のものであり、静的にコンパイルされた言語や単一継承のみをサポートする言語にはありません。これにより、複数の基本クラスが同じメソッドを実装する「ダイアモンドダイアグラム」を実装できます。優れた設計では、このメソッドはすべてのケースで同じ呼び出しシグネチャを使用する必要があります（呼び出しの順序は実行時に決定されるため、その順序はクラス階層の変更に適応し、その順序には実行前は不明な兄弟クラスが含まれる可能性があるためです。 ）。</target>
        </trans-unit>
        <trans-unit id="817bae41c43a2fdb49bd2ccee3ff54cd1276a64e" translate="yes" xml:space="preserve">
          <source>The sections below first document the header base classes and their attributes, followed by the API for modifying the behavior of &lt;a href=&quot;#email.headerregistry.HeaderRegistry&quot;&gt;&lt;code&gt;HeaderRegistry&lt;/code&gt;&lt;/a&gt;, and finally the support classes used to represent the data parsed from structured headers.</source>
          <target state="translated">以下のセクションでは、最初にヘッダーの基本クラスとその属性について説明し、続いて&lt;a href=&quot;#email.headerregistry.HeaderRegistry&quot;&gt; &lt;code&gt;HeaderRegistry&lt;/code&gt; &lt;/a&gt;の動作を変更するためのAPI 、最後に構造化ヘッダーから解析されたデータを表すために使用されるサポートクラスについて説明します。</target>
        </trans-unit>
        <trans-unit id="fb511a5d628d8dbbb4b6bf34bfa204b91e9c7783" translate="yes" xml:space="preserve">
          <source>The semantics of this API resemble &lt;a href=&quot;collections#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/a&gt;. The first argument of the call to &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; is the name of the enumeration.</source>
          <target state="translated">このAPIのセマンティクスは、&lt;a href=&quot;collections#collections.namedtuple&quot;&gt; &lt;code&gt;namedtuple&lt;/code&gt; に&lt;/a&gt;似ています。&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;の呼び出しの最初の引数は、列挙の名前です。</target>
        </trans-unit>
        <trans-unit id="070609838b02b470a8593f64b9dca1e4232bafbd" translate="yes" xml:space="preserve">
          <source>The separator to search for may be any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索するセパレータは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7a1f8c4e94dd9abb089388f1b1ab583d5c673046" translate="yes" xml:space="preserve">
          <source>The separator to search for may be any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索する区切り文字は、任意の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="2a15dc4df39babea8600cb0111121e4e21f2adba" translate="yes" xml:space="preserve">
          <source>The sequence</source>
          <target state="translated">シーケンス</target>
        </trans-unit>
        <trans-unit id="82ce3ee65d071578dc915ee005e2223c40e5f9b4" translate="yes" xml:space="preserve">
          <source>The sequence has an undefined order. Use the &lt;a href=&quot;#tracemalloc.Snapshot.statistics&quot;&gt;&lt;code&gt;Snapshot.statistics()&lt;/code&gt;&lt;/a&gt; method to get a sorted list of statistics.</source>
          <target state="translated">シーケンスの順序は未定義です。&lt;a href=&quot;#tracemalloc.Snapshot.statistics&quot;&gt; &lt;code&gt;Snapshot.statistics()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、ソートされた統計のリストを取得します。</target>
        </trans-unit>
        <trans-unit id="1e213b00d5ff7dbdcab5c0f7b3a984b54b08ecc6" translate="yes" xml:space="preserve">
          <source>The server classes support the following class variables:</source>
          <target state="translated">サーバクラスは以下のクラス変数をサポートしています。</target>
        </trans-unit>
        <trans-unit id="2786e902b7d48dcd206d583f8d5ed7f8b2845e8e" translate="yes" xml:space="preserve">
          <source>The server didn&amp;rsquo;t accept the &lt;em&gt;from_addr&lt;/em&gt;.</source>
          <target state="translated">サーバーは&lt;em&gt;from_addrを&lt;/em&gt;受け入れません&lt;em&gt;でした&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="56dd79533db4c4efca4e68373ada164e963dde44" translate="yes" xml:space="preserve">
          <source>The server didn&amp;rsquo;t accept the username/password combination.</source>
          <target state="translated">サーバーはユーザー名とパスワードの組み合わせを受け入れませんでした。</target>
        </trans-unit>
        <trans-unit id="4911a0a87661df881e8634adaa418fd9f284c0c2" translate="yes" xml:space="preserve">
          <source>The server didn&amp;rsquo;t reply properly to the &lt;code&gt;HELO&lt;/code&gt; greeting.</source>
          <target state="translated">サーバーが &lt;code&gt;HELO&lt;/code&gt; グリーティングに適切に応答しませんでした。</target>
        </trans-unit>
        <trans-unit id="5e0a6b36ffd22e5731e4b5053ab3b1d2dd12a232" translate="yes" xml:space="preserve">
          <source>The server does not support the STARTTLS extension.</source>
          <target state="translated">サーバーはSTARTTLS拡張子をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="69216622a0765e77ffc28455a50eaf3e224cceab" translate="yes" xml:space="preserve">
          <source>The server is closed asynchronously, use the &lt;a href=&quot;#asyncio.Server.wait_closed&quot;&gt;&lt;code&gt;wait_closed()&lt;/code&gt;&lt;/a&gt; coroutine to wait until the server is closed.</source>
          <target state="translated">サーバーは非同期に閉じられます。サーバーが閉じるまで待機するには、&lt;a href=&quot;#asyncio.Server.wait_closed&quot;&gt; &lt;code&gt;wait_closed()&lt;/code&gt; &lt;/a&gt;コルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="24fe7057b721b26d1b1fa4ea7e7e689979456761" translate="yes" xml:space="preserve">
          <source>The server refused our &lt;code&gt;HELO&lt;/code&gt; message.</source>
          <target state="translated">サーバーは &lt;code&gt;HELO&lt;/code&gt; メッセージを拒否しました。</target>
        </trans-unit>
        <trans-unit id="fa1ff148e95189ffe6cc323c779c0d739606eede" translate="yes" xml:space="preserve">
          <source>The server replied with an unexpected error code (other than a refusal of a recipient).</source>
          <target state="translated">サーバーから予期せぬエラーコード(受信拒否以外)で返信がありました。</target>
        </trans-unit>
        <trans-unit id="34d989e84ddbda8dd5a139555512942415e2023b" translate="yes" xml:space="preserve">
          <source>The set of &lt;em&gt;accessible&lt;/em&gt; functions depends on what modules have been imported into the user process, including those imported by Idle itself, and what definitions have been run, all since the last restart.</source>
          <target state="translated">&lt;em&gt;アクセス可能な&lt;/em&gt;関数のセットは、Idle自体によってインポートされたものを含め、ユーザープロセスにインポートされたモジュール、および最後の再起動以降に実行された定義によって異なります。</target>
        </trans-unit>
        <trans-unit id="48c2643a6d821c9e78c60b17ecf9140e016a1333" translate="yes" xml:space="preserve">
          <source>The set of all exceptions (as a tuple) that methods of &lt;a href=&quot;#ftplib.FTP&quot;&gt;&lt;code&gt;FTP&lt;/code&gt;&lt;/a&gt; instances may raise as a result of problems with the FTP connection (as opposed to programming errors made by the caller). This set includes the four exceptions listed above as well as &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ftplib.FTP&quot;&gt; &lt;code&gt;FTP&lt;/code&gt; &lt;/a&gt;インスタンスのメソッドが（呼び出し元によるプログラミングエラーではなく）FTP接続の問題の結果として発生する可能性のあるすべての例外のセット（タプルとして）。このセットには、上記の4つの例外と&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; が&lt;/a&gt;含まれます。</target>
        </trans-unit>
        <trans-unit id="081bb73a699c6efaecd1c8a3d733213e189df822" translate="yes" xml:space="preserve">
          <source>The set of allowed values can be extended by registering a new named error handler:</source>
          <target state="translated">新しい名前のエラーハンドラを登録することで、許可される値のセットを拡張することができます。</target>
        </trans-unit>
        <trans-unit id="5bdaaae3a7f0eacb814dd25f88847cfdd23e3933" translate="yes" xml:space="preserve">
          <source>The set of allowed values for the &lt;em&gt;errors&lt;/em&gt; argument can be extended with &lt;a href=&quot;#codecs.register_error&quot;&gt;&lt;code&gt;register_error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;errors&lt;/em&gt;引数に許可される値のセットは、&lt;a href=&quot;#codecs.register_error&quot;&gt; &lt;code&gt;register_error()&lt;/code&gt; で&lt;/a&gt;拡張できます。</target>
        </trans-unit>
        <trans-unit id="e65a0797dbedaa6af76d1a9826a2a818a37cd72e" translate="yes" xml:space="preserve">
          <source>The settings are: &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ssl.OP_NO_SSLv2&quot;&gt;&lt;code&gt;OP_NO_SSLv2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ssl.OP_NO_SSLv3&quot;&gt;&lt;code&gt;OP_NO_SSLv3&lt;/code&gt;&lt;/a&gt; with high encryption cipher suites without RC4 and without unauthenticated cipher suites. Passing &lt;a href=&quot;#ssl.Purpose.SERVER_AUTH&quot;&gt;&lt;code&gt;SERVER_AUTH&lt;/code&gt;&lt;/a&gt; as &lt;em&gt;purpose&lt;/em&gt; sets &lt;a href=&quot;#ssl.SSLContext.verify_mode&quot;&gt;&lt;code&gt;verify_mode&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt; and either loads CA certificates (when at least one of &lt;em&gt;cafile&lt;/em&gt;, &lt;em&gt;capath&lt;/em&gt; or &lt;em&gt;cadata&lt;/em&gt; is given) or uses &lt;a href=&quot;#ssl.SSLContext.load_default_certs&quot;&gt;&lt;code&gt;SSLContext.load_default_certs()&lt;/code&gt;&lt;/a&gt; to load default CA certificates.</source>
          <target state="translated">設定は次のとおりです。&lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt; &lt;code&gt;PROTOCOL_TLS&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ssl.OP_NO_SSLv2&quot;&gt; &lt;code&gt;OP_NO_SSLv2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#ssl.OP_NO_SSLv3&quot;&gt; &lt;code&gt;OP_NO_SSLv3&lt;/code&gt; &lt;/a&gt;高い暗号化暗号スイートとRC4がなく、認証されていない暗号スイートなし。通過&lt;a href=&quot;#ssl.Purpose.SERVER_AUTH&quot;&gt; &lt;code&gt;SERVER_AUTH&lt;/code&gt; の&lt;/a&gt;ように&lt;em&gt;目的の&lt;/em&gt;セットは&lt;a href=&quot;#ssl.SSLContext.verify_mode&quot;&gt; &lt;code&gt;verify_mode&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt; &lt;code&gt;CERT_REQUIRED&lt;/code&gt; &lt;/a&gt;と負荷CA証明書（の少なくとも一つで場合のいずれか&lt;em&gt;cafile&lt;/em&gt;、&lt;em&gt;capath&lt;/em&gt;または&lt;em&gt;cadataが&lt;/em&gt;与えられる）、又は使用の&lt;a href=&quot;#ssl.SSLContext.load_default_certs&quot;&gt; &lt;code&gt;SSLContext.load_default_certs()&lt;/code&gt; &lt;/a&gt;デフォルトCA証明書をロードします。</target>
        </trans-unit>
        <trans-unit id="5cb18ec6e44e05a517a8cfdcf1bf458112bc1e30" translate="yes" xml:space="preserve">
          <source>The short form of the address representation, with leading zeroes in groups omitted and the longest sequence of groups consisting entirely of zeroes collapsed to a single empty group.</source>
          <target state="translated">アドレス表現の短縮形で、グループ内の先頭のゼロが省略され、ゼロのみで構成されるグループの最も長いシーケンスが1つの空のグループに折りたたまれています。</target>
        </trans-unit>
        <trans-unit id="f805bdc410d66fc8341d2186ebae9680f77ff29d" translate="yes" xml:space="preserve">
          <source>The sign of the result, if non-zero, is the same as that of the original dividend.</source>
          <target state="translated">結果の符号は、ゼロでない場合は、元の配当金と同じです。</target>
        </trans-unit>
        <trans-unit id="ab3c6eb2972d1f89e19cb7d944ab96116d4e6c57" translate="yes" xml:space="preserve">
          <source>The sign should follow the value and currency symbol.</source>
          <target state="translated">符号は、値と通貨記号に従ってください。</target>
        </trans-unit>
        <trans-unit id="70ec6f78774cba196da7610b04897fe7592363d5" translate="yes" xml:space="preserve">
          <source>The sign should immediately follow the value.</source>
          <target state="translated">符号は値のすぐ後につけてください。</target>
        </trans-unit>
        <trans-unit id="919da334d12a2fc5f18dd4ceab7e1aada7a25231" translate="yes" xml:space="preserve">
          <source>The sign should immediately precede the value.</source>
          <target state="translated">符号は値のすぐ前に付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="1ee0667d587bb1414e44874e7413805eb554c41c" translate="yes" xml:space="preserve">
          <source>The sign should precede the value and currency symbol.</source>
          <target state="translated">符号は、値と通貨記号の前に付けてください。</target>
        </trans-unit>
        <trans-unit id="7ea136642c5a17d8b5d39f8f1b4e4126da0bc289" translate="yes" xml:space="preserve">
          <source>The signal corresponding to the</source>
          <target state="translated">に対応した信号である。</target>
        </trans-unit>
        <trans-unit id="fafae547732d3513c2c8c57b95879cfa52d4ca03" translate="yes" xml:space="preserve">
          <source>The signature of this function is dependent on what it calls. For example, the default binding (e.g. &lt;code&gt;pdb.set_trace()&lt;/code&gt;) expects no arguments, but you might bind it to a function that expects additional arguments (positional and/or keyword). The built-in &lt;code&gt;breakpoint()&lt;/code&gt; function passes its &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kws&lt;/code&gt; straight through. Whatever &lt;code&gt;breakpointhooks()&lt;/code&gt; returns is returned from &lt;code&gt;breakpoint()&lt;/code&gt;.</source>
          <target state="translated">この関数のシグネチャは、呼び出す関数によって異なります。たとえば、デフォルトのバインディング（例： &lt;code&gt;pdb.set_trace()&lt;/code&gt; ）は引数を想定していませんが、追加の引数（位置および/またはキーワード）を想定する関数にバインドする場合があります。組み込みの &lt;code&gt;breakpoint()&lt;/code&gt; 関数は、 &lt;code&gt;*args&lt;/code&gt; と &lt;code&gt;**kws&lt;/code&gt; をそのまま渡します。どのような &lt;code&gt;breakpointhooks()&lt;/code&gt; を返すから返される &lt;code&gt;breakpoint()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a5369a3811941d7b19f88daec4a5ed4519eb65c" translate="yes" xml:space="preserve">
          <source>The signed zeros can result from calculations that underflow. They keep the sign that would have resulted if the calculation had been carried out to greater precision. Since their magnitude is zero, both positive and negative zeros are treated as equal and their sign is informational.</source>
          <target state="translated">符号付きゼロは、アンダーフローする計算から生じることがあります。符号付きゼロは、計算がより高い精度で行われていた場合に生じるであろう符号を保持します。それらの大きさはゼロなので、正のゼロも負のゼロも等しいものとして扱われ、それらの符号は情報的なものです。</target>
        </trans-unit>
        <trans-unit id="b5a379b2046ce18280ecfda42b964c9631b600d9" translate="yes" xml:space="preserve">
          <source>The significance of a new Decimal is determined solely by the number of digits input. Context precision and rounding only come into play during arithmetic operations.</source>
          <target state="translated">新しい十進数の意味は、入力された桁数によってのみ決定されます。コンテキスト精度と丸めは、算術演算の際にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="5c480e405fd8149079611892ee8838388cee67f5" translate="yes" xml:space="preserve">
          <source>The simplest &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; subclass will simply implement a test method (i.e. a method whose name starts with &lt;code&gt;test&lt;/code&gt;) in order to perform specific testing code:</source>
          <target state="translated">最も単純な&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;サブクラスは、特定のテストコードを実行するために、テストメソッド（つまり、名前が &lt;code&gt;test&lt;/code&gt; で始まるメソッド）を実装するだけです。</target>
        </trans-unit>
        <trans-unit id="6ef8da768f5e2727f7736cc3454383ef6bb831f4" translate="yes" xml:space="preserve">
          <source>The simplest example of reading a CSV file:</source>
          <target state="translated">CSVファイルを読み込む最も簡単な例です。</target>
        </trans-unit>
        <trans-unit id="9b3118dc14604e79ea95cac54e20a71a059c73c8" translate="yes" xml:space="preserve">
          <source>The simplest possible invocation is:</source>
          <target state="translated">最も単純な呼び出しは</target>
        </trans-unit>
        <trans-unit id="a713cae0a63f36592c0cdcb2740d27248af6066e" translate="yes" xml:space="preserve">
          <source>The simplest text encoding (called &lt;code&gt;'latin-1'&lt;/code&gt; or &lt;code&gt;'iso-8859-1'&lt;/code&gt;) maps the code points 0&amp;ndash;255 to the bytes &lt;code&gt;0x0&lt;/code&gt;&amp;ndash;&lt;code&gt;0xff&lt;/code&gt;, which means that a string object that contains code points above &lt;code&gt;U+00FF&lt;/code&gt; can&amp;rsquo;t be encoded with this codec. Doing so will raise a &lt;a href=&quot;exceptions#UnicodeEncodeError&quot;&gt;&lt;code&gt;UnicodeEncodeError&lt;/code&gt;&lt;/a&gt; that looks like the following (although the details of the error message may differ): &lt;code&gt;UnicodeEncodeError: 'latin-1' codec can't encode character '\u1234' in
position 3: ordinal not in range(256)&lt;/code&gt;.</source>
          <target state="translated">最も単純なテキストエンコーディング（ &lt;code&gt;'latin-1'&lt;/code&gt; または &lt;code&gt;'iso-8859-1'&lt;/code&gt; と呼ばれます）は、コードポイント0&amp;ndash;255をバイト &lt;code&gt;0x0&lt;/code&gt; &amp;ndash; &lt;code&gt;0xff&lt;/code&gt; にマップします。これは、 &lt;code&gt;U+00FF&lt;/code&gt; より上のコードポイントを含む文字列オブジェクトができることを意味します 'このコーデックでエンコードする。そうすると、次のような&lt;a href=&quot;exceptions#UnicodeEncodeError&quot;&gt; &lt;code&gt;UnicodeEncodeError&lt;/code&gt; &lt;/a&gt;が発生します（ただし、エラーメッセージの詳細は異なる場合があります） &lt;code&gt;UnicodeEncodeError: 'latin-1' codec can't encode character '\u1234' in position 3: ordinal not in range(256)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1521438669cce749a2e881659e485a36336dd6cd" translate="yes" xml:space="preserve">
          <source>The simplest way to make a mock raise an exception when called is to make &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; an exception class or instance:</source>
          <target state="translated">モックを呼び出したときに例外を発生させる最も簡単な方法は、&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;を例外クラスまたはインスタンスにすることです。</target>
        </trans-unit>
        <trans-unit id="881f0a260df9ba8efbf5efc927ddd30e7cae61c4" translate="yes" xml:space="preserve">
          <source>The simplest way to start using doctest (but not necessarily the way you&amp;rsquo;ll continue to do it) is to end each module &lt;code&gt;M&lt;/code&gt; with:</source>
          <target state="translated">doctestの使用を開始する最も簡単な方法（ただし、必ずしも継続する方法とは限りません）は、各モジュール &lt;code&gt;M&lt;/code&gt; を次のように終了することです：</target>
        </trans-unit>
        <trans-unit id="8b54b057c8ffc4d06da8fb7b215fbfa86896bff1" translate="yes" xml:space="preserve">
          <source>The single address encoded by the header value. If the header value actually contains more than one address (which would be a violation of the RFC under the default &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt;), accessing this attribute will result in a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ヘッダー値によってエンコードされた単一のアドレス。ヘッダー値に実際に複数のアドレスが含まれている場合（デフォルトの&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;ではRFCに違反します）、この属性にアクセスすると&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="509bf276c918b44de715498fbc395a90c417d509" translate="yes" xml:space="preserve">
          <source>The size field (a 32-bit value, encoded using big-endian byte order) gives the size of the chunk data, not including the 8-byte header.</source>
          <target state="translated">サイズフィールド(ビッグエンディアンのバイトオーダーでエンコードされた32ビットの値)は、8バイトのヘッダを含まないチャンクデータのサイズを示します。</target>
        </trans-unit>
        <trans-unit id="6e201cfab01f0ab4e9096a6984beacdf66e54219" translate="yes" xml:space="preserve">
          <source>The size in bytes of each element of the memoryview:</source>
          <target state="translated">メモリビューの各要素のサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="266d615bc372b351e64c4e77ca0efca9ec569184" translate="yes" xml:space="preserve">
          <source>The size of any &lt;em&gt;master&lt;/em&gt; widget is determined by the size of the &amp;ldquo;slave widgets&amp;rdquo; inside. The packer is used to control where slave widgets appear inside the master into which they are packed. You can pack widgets into frames, and frames into other frames, in order to achieve the kind of layout you desire. Additionally, the arrangement is dynamically adjusted to accommodate incremental changes to the configuration, once it is packed.</source>
          <target state="translated">任意のサイズ&lt;em&gt;マスター&lt;/em&gt;「スレーブウィジェット」内部の大きさによって決定されるウィジェット。パッカーは、スレーブウィジェットがパックされるマスター内のどこに表示されるかを制御するために使用されます。ウィジェットをフレームにパックしたり、フレームを他のフレームにパックしたりして、希望する種類のレイアウトを実現できます。さらに、配置は動的に調整され、一度パックされると、構成に対する増分変更に対応します。</target>
        </trans-unit>
        <trans-unit id="0ffb029747b436ca658b1039a56350ec7fac8bf4" translate="yes" xml:space="preserve">
          <source>The size of the buffer used when &lt;a href=&quot;#xml.parsers.expat.xmlparser.buffer_text&quot;&gt;&lt;code&gt;buffer_text&lt;/code&gt;&lt;/a&gt; is true. A new buffer size can be set by assigning a new integer value to this attribute. When the size is changed, the buffer will be flushed.</source>
          <target state="translated">&lt;a href=&quot;#xml.parsers.expat.xmlparser.buffer_text&quot;&gt; &lt;code&gt;buffer_text&lt;/code&gt; &lt;/a&gt;がtrueの場合に使用されるバッファーのサイズ。この属性に新しい整数値を割り当てることにより、新しいバッファサイズを設定できます。サイズが変更されると、バッファーはフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="ae18b13f964bb5f503e73d7da58605cb96240f81" translate="yes" xml:space="preserve">
          <source>The size of the request queue. If it takes a long time to process a single request, any requests that arrive while the server is busy are placed into a queue, up to &lt;a href=&quot;#socketserver.BaseServer.request_queue_size&quot;&gt;&lt;code&gt;request_queue_size&lt;/code&gt;&lt;/a&gt; requests. Once the queue is full, further requests from clients will get a &amp;ldquo;Connection denied&amp;rdquo; error. The default value is usually 5, but this can be overridden by subclasses.</source>
          <target state="translated">要求キューのサイズ。単一のリクエストの処理に時間がかかる場合、サーバーがビジーな間に到着したリクエストは、最大&lt;a href=&quot;#socketserver.BaseServer.request_queue_size&quot;&gt; &lt;code&gt;request_queue_size&lt;/code&gt; &lt;/a&gt;リクエストまでキューに入れられます。キューがいっぱいになると、クライアントからのそれ以降の要求には「接続拒否」エラーが発生します。デフォルト値は通常5ですが、これはサブクラスによってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="afeaf7758b49b0bcc1c2c4a7eb27cb9ef94f1147" translate="yes" xml:space="preserve">
          <source>The size of the resulting HMAC digest in bytes.</source>
          <target state="translated">結果として得られるHMACダイジェストのサイズをバイト単位で表します。</target>
        </trans-unit>
        <trans-unit id="13040a9b4dff3237ab2d730c7d05724f985824ba" translate="yes" xml:space="preserve">
          <source>The size of the resulting hash in bytes.</source>
          <target state="translated">結果として得られるハッシュのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="b22005a99782de0058b087c6cd11f9d2f0afc9c5" translate="yes" xml:space="preserve">
          <source>The slash operator helps create child paths, similarly to &lt;a href=&quot;os.path#os.path.join&quot;&gt;&lt;code&gt;os.path.join()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">スラッシュ演算子は、&lt;a href=&quot;os.path#os.path.join&quot;&gt; &lt;code&gt;os.path.join()&lt;/code&gt; &lt;/a&gt;と同様に、子パスの作成に役立ちます。</target>
        </trans-unit>
        <trans-unit id="57467a0e7d5bab9bfe84eafe9f1864e336216635" translate="yes" xml:space="preserve">
          <source>The slice of &lt;em&gt;s&lt;/em&gt; from &lt;em&gt;i&lt;/em&gt; to &lt;em&gt;j&lt;/em&gt; is defined as the sequence of items with index &lt;em&gt;k&lt;/em&gt; such that &lt;code&gt;i &amp;lt;= k &amp;lt; j&lt;/code&gt;. If &lt;em&gt;i&lt;/em&gt; or &lt;em&gt;j&lt;/em&gt; is greater than &lt;code&gt;len(s)&lt;/code&gt;, use &lt;code&gt;len(s)&lt;/code&gt;. If &lt;em&gt;i&lt;/em&gt; is omitted or &lt;code&gt;None&lt;/code&gt;, use &lt;code&gt;0&lt;/code&gt;. If &lt;em&gt;j&lt;/em&gt; is omitted or &lt;code&gt;None&lt;/code&gt;, use &lt;code&gt;len(s)&lt;/code&gt;. If &lt;em&gt;i&lt;/em&gt; is greater than or equal to &lt;em&gt;j&lt;/em&gt;, the slice is empty.</source>
          <target state="translated">&lt;em&gt;sの&lt;/em&gt;&lt;em&gt;i&lt;/em&gt;から&lt;em&gt;j&lt;/em&gt;までのスライスは、 &lt;code&gt;i &amp;lt;= k &amp;lt; j&lt;/code&gt; ようなインデックス&lt;em&gt;kを&lt;/em&gt;持つアイテムのシーケンスとして定義されます。場合&lt;em&gt;I&lt;/em&gt;または&lt;em&gt;jが&lt;/em&gt;より大きい &lt;code&gt;len(s)&lt;/code&gt; 、使用 &lt;code&gt;len(s)&lt;/code&gt; 。場合&lt;em&gt;、私は&lt;/em&gt;省略していないか、され &lt;code&gt;None&lt;/code&gt; 、使用 &lt;code&gt;0&lt;/code&gt; 。&lt;em&gt;j&lt;/em&gt;が省略されるか &lt;code&gt;None&lt;/code&gt; の場合、 &lt;code&gt;len(s)&lt;/code&gt; を使用します。&lt;em&gt;i&lt;/em&gt;が&lt;em&gt;j&lt;/em&gt;以上の場合、スライスは空です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db14a0b504a58a7eab89d8facc7e4bc4aeddf239" translate="yes" xml:space="preserve">
          <source>The slice of &lt;em&gt;s&lt;/em&gt; from &lt;em&gt;i&lt;/em&gt; to &lt;em&gt;j&lt;/em&gt; with step &lt;em&gt;k&lt;/em&gt; is defined as the sequence of items with index &lt;code&gt;x = i + n*k&lt;/code&gt; such that &lt;code&gt;0 &amp;lt;= n &amp;lt; (j-i)/k&lt;/code&gt;. In other words, the indices are &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;i+k&lt;/code&gt;, &lt;code&gt;i+2*k&lt;/code&gt;, &lt;code&gt;i+3*k&lt;/code&gt; and so on, stopping when &lt;em&gt;j&lt;/em&gt; is reached (but never including &lt;em&gt;j&lt;/em&gt;). When &lt;em&gt;k&lt;/em&gt; is positive, &lt;em&gt;i&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; are reduced to &lt;code&gt;len(s)&lt;/code&gt; if they are greater. When &lt;em&gt;k&lt;/em&gt; is negative, &lt;em&gt;i&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; are reduced to &lt;code&gt;len(s) - 1&lt;/code&gt; if they are greater. If &lt;em&gt;i&lt;/em&gt; or &lt;em&gt;j&lt;/em&gt; are omitted or &lt;code&gt;None&lt;/code&gt;, they become &amp;ldquo;end&amp;rdquo; values (which end depends on the sign of &lt;em&gt;k&lt;/em&gt;). Note, &lt;em&gt;k&lt;/em&gt; cannot be zero. If &lt;em&gt;k&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, it is treated like &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">スライス&lt;em&gt;S&lt;/em&gt;から&lt;em&gt;I&lt;/em&gt;へ&lt;em&gt;J&lt;/em&gt;ステップと&lt;em&gt;kは&lt;/em&gt;、インデックス付きアイテムのシーケンスとして定義される。 &lt;code&gt;x = i + n*k&lt;/code&gt; ように &lt;code&gt;0 &amp;lt;= n &amp;lt; (j-i)/k&lt;/code&gt; 。換言すれば、指数は &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;i+k&lt;/code&gt; 、 &lt;code&gt;i+2*k&lt;/code&gt; 、 &lt;code&gt;i+3*k&lt;/code&gt; とするときように、停止&lt;em&gt;jが&lt;/em&gt;達成される（しかし決して含まない&lt;em&gt;J&lt;/em&gt;）。&lt;em&gt;k&lt;/em&gt;が正の場合、&lt;em&gt;i&lt;/em&gt;と&lt;em&gt;j&lt;/em&gt;は、大きい場合は &lt;code&gt;len(s)&lt;/code&gt; に削減されます。&lt;em&gt;kが&lt;/em&gt;負であり、&lt;em&gt;I&lt;/em&gt;及び&lt;em&gt;J&lt;/em&gt; &lt;code&gt;len(s) - 1&lt;/code&gt; 大きい場合は1に削減されます。場合は&lt;em&gt;、私&lt;/em&gt;や&lt;em&gt;jが&lt;/em&gt;省略されていないか、 &lt;code&gt;None&lt;/code&gt; 、彼らは「終わり」の値（の符号に依存するエンドになっ&lt;em&gt;K&lt;/em&gt;）。ノートでは、&lt;em&gt;kは&lt;/em&gt;ゼロにすることはできません。&lt;em&gt;k&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、 &lt;code&gt;1&lt;/code&gt; のように扱われます。</target>
        </trans-unit>
        <trans-unit id="afdb447ab4240dc7c528e0d82c283987648888fa" translate="yes" xml:space="preserve">
          <source>The smallest possible difference between non-equal &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects, &lt;code&gt;timedelta(microseconds=1)&lt;/code&gt;.</source>
          <target state="translated">等しくない&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクト間の可能な最小の差、 &lt;code&gt;timedelta(microseconds=1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="90720b6f330c793f876d3bf1fd81961094e9877c" translate="yes" xml:space="preserve">
          <source>The smallest possible difference between non-equal &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects, &lt;code&gt;timedelta(microseconds=1)&lt;/code&gt;, although note that arithmetic on &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects is not supported.</source>
          <target state="translated">等しくないとの間の最小の差&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクト &lt;code&gt;timedelta(microseconds=1)&lt;/code&gt; に演算ことに留意されたいが、&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;サポートされていないオブジェクト。</target>
        </trans-unit>
        <trans-unit id="afa9031721d8fc24f5ec4d17be75903371aa9acc" translate="yes" xml:space="preserve">
          <source>The smallest possible difference between non-equal &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; objects, &lt;code&gt;timedelta(microseconds=1)&lt;/code&gt;.</source>
          <target state="translated">等しくない&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクト間の可能な最小の差、 &lt;code&gt;timedelta(microseconds=1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8b267b31e001c792ef50cc23ab663368acac284" translate="yes" xml:space="preserve">
          <source>The smallest possible difference between non-equal date objects, &lt;code&gt;timedelta(days=1)&lt;/code&gt;.</source>
          <target state="translated">等しくない日付オブジェクト間で可能な最小の差、 &lt;code&gt;timedelta(days=1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0564cff39070c9ab1eb076afb4a73ed5e6110583" translate="yes" xml:space="preserve">
          <source>The smallest year number allowed in a &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object. &lt;a href=&quot;#datetime.MINYEAR&quot;&gt;&lt;code&gt;MINYEAR&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトで許可される最小の年数。&lt;a href=&quot;#datetime.MINYEAR&quot;&gt; &lt;code&gt;MINYEAR&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ac827978185abe9e1d5f1031d46773536abfd304" translate="yes" xml:space="preserve">
          <source>The snapshot does not include memory blocks allocated before the &lt;a href=&quot;#module-tracemalloc&quot;&gt;&lt;code&gt;tracemalloc&lt;/code&gt;&lt;/a&gt; module started to trace memory allocations.</source>
          <target state="translated">スナップショットには、&lt;a href=&quot;#module-tracemalloc&quot;&gt; &lt;code&gt;tracemalloc&lt;/code&gt; &lt;/a&gt;モジュールがメモリ割り当てのトレースを開始する前に割り当てられたメモリブロックは含まれません。</target>
        </trans-unit>
        <trans-unit id="3518947197e510fbdae4f25cd9160d2281238301" translate="yes" xml:space="preserve">
          <source>The so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases. CSV format was used for many years prior to attempts to describe the format in a standardized way in &lt;a href=&quot;https://tools.ietf.org/html/rfc4180.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 4180&lt;/strong&gt;&lt;/a&gt;. The lack of a well-defined standard means that subtle differences often exist in the data produced and consumed by different applications. These differences can make it annoying to process CSV files from multiple sources. Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer.</source>
          <target state="translated">いわゆるCSV（カンマ区切り値）形式は、スプレッドシートおよびデータベースの最も一般的なインポートおよびエクスポート形式です。 CSV形式は、&lt;a href=&quot;https://tools.ietf.org/html/rfc4180.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 4180で&lt;/strong&gt;&lt;/a&gt;標準化された方法で形式を記述しようとする以前から、長年にわたって使用されていました。明確に定義された標準がないことは、さまざまなアプリケーションによって生成および消費されるデータに微妙な違いがしばしば存在することを意味します。これらの違いにより、複数のソースからのCSVファイルを処理するのが面倒になる場合があります。それでも、区切り文字と引用文字は異なりますが、全体的な形式は十分に似ているため、そのようなデータを効率的に操作できる単一のモジュールを作成して、プログラマーからのデータの読み取りと書き込みの詳細を隠すことができます。</target>
        </trans-unit>
        <trans-unit id="b36cc9ba1945c3f902c1340bc4df70ac928ebe63" translate="yes" xml:space="preserve">
          <source>The socket always appears &amp;lsquo;ready&amp;rsquo; and excess packets are dropped. An &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;errno&lt;/code&gt; set to &lt;a href=&quot;errno#errno.ENOBUFS&quot;&gt;&lt;code&gt;errno.ENOBUFS&lt;/code&gt;&lt;/a&gt; may or may not be raised; if it is raised, it will be reported to &lt;a href=&quot;#asyncio.DatagramProtocol.error_received&quot;&gt;&lt;code&gt;DatagramProtocol.error_received()&lt;/code&gt;&lt;/a&gt; but otherwise ignored.</source>
          <target state="translated">ソケットは常に「準備完了」と表示され、余分なパケットはドロップされます。&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; の&lt;/a&gt;で &lt;code&gt;errno&lt;/code&gt; にセット&lt;a href=&quot;errno#errno.ENOBUFS&quot;&gt; &lt;code&gt;errno.ENOBUFS&lt;/code&gt; は、&lt;/a&gt;または提起してもしなくてもよいです。発生した場合、&lt;a href=&quot;#asyncio.DatagramProtocol.error_received&quot;&gt; &lt;code&gt;DatagramProtocol.error_received()&lt;/code&gt; に&lt;/a&gt;報告されますが、それ以外の場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="580375be802eccfa86b27c314a834daee2716ca5" translate="yes" xml:space="preserve">
          <source>The socket family can be either &lt;a href=&quot;socket#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;socket#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt; depending on &lt;em&gt;host&lt;/em&gt; (or the &lt;em&gt;family&lt;/em&gt; argument, if provided).</source>
          <target state="translated">ソケットファミリーは、いずれかになります&lt;a href=&quot;socket#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;socket#socket.AF_INET6&quot;&gt; &lt;code&gt;AF_INET6&lt;/code&gt; &lt;/a&gt;に応じて、&lt;em&gt;ホスト&lt;/em&gt;（または&lt;em&gt;家族&lt;/em&gt;提供されている場合、引数）。</target>
        </trans-unit>
        <trans-unit id="fb23c07f91f47b0410aeac381022de5cc7bbffa6" translate="yes" xml:space="preserve">
          <source>The socket family can be either &lt;a href=&quot;socket#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;socket#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;socket#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt;, depending on &lt;em&gt;host&lt;/em&gt; (or the &lt;em&gt;family&lt;/em&gt; argument, if provided).</source>
          <target state="translated">ソケットファミリーは、いずれかになります&lt;a href=&quot;socket#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;socket#socket.AF_INET6&quot;&gt; &lt;code&gt;AF_INET6&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;socket#socket.AF_UNIX&quot;&gt; &lt;code&gt;AF_UNIX&lt;/code&gt; &lt;/a&gt;に応じて、&lt;em&gt;ホスト&lt;/em&gt;（または&lt;em&gt;家族&lt;/em&gt;提供されている場合、引数）。</target>
        </trans-unit>
        <trans-unit id="07fedf17c5be40a26d98bb4e876e8380b9555b75" translate="yes" xml:space="preserve">
          <source>The socket family will be &lt;a href=&quot;socket#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt;; socket type will be &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ソケットファミリは&lt;a href=&quot;socket#socket.AF_UNIX&quot;&gt; &lt;code&gt;AF_UNIX&lt;/code&gt; になり&lt;/a&gt;ます。ソケットタイプは&lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt; &lt;code&gt;SOCK_STREAM&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b011b1d05810914e76faef6742cb676cbb631c4d" translate="yes" xml:space="preserve">
          <source>The socket family.</source>
          <target state="translated">ソケットファミリー。</target>
        </trans-unit>
        <trans-unit id="9d7aba26239da54cf438e8cc238babf966b10025" translate="yes" xml:space="preserve">
          <source>The socket must be bound to an address and listening for connections. The return value is a pair &lt;code&gt;(conn, address)&lt;/code&gt; where &lt;em&gt;conn&lt;/em&gt; is a &lt;em&gt;new&lt;/em&gt; socket object usable to send and receive data on the connection, and &lt;em&gt;address&lt;/em&gt; is the address bound to the socket on the other end of the connection.</source>
          <target state="translated">ソケットはアドレスにバインドされ、接続を待機する必要があります。戻り値はペア &lt;code&gt;(conn, address)&lt;/code&gt; ここで、&lt;em&gt;conn&lt;/em&gt;は接続でデータを送受信するために使用できる&lt;em&gt;新しい&lt;/em&gt;ソケットオブジェクトで、&lt;em&gt;address&lt;/em&gt;は接続の反対側のソケットにバインドされたアドレスです。</target>
        </trans-unit>
        <trans-unit id="638e4e32be2380339f29cabd9e12ac1b0fe0dcf2" translate="yes" xml:space="preserve">
          <source>The socket must be in blocking mode; it can have a timeout, but the file object&amp;rsquo;s internal buffer may end up in an inconsistent state if a timeout occurs.</source>
          <target state="translated">ソケットはブロッキングモードでなければなりません。タイムアウトが発生する可能性がありますが、タイムアウトが発生すると、ファイルオブジェクトの内部バッファが一貫性のない状態になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1d9b4b9003d10f23e4489c6bcfd88b97fc92ec67" translate="yes" xml:space="preserve">
          <source>The socket object on which the server will listen for incoming requests.</source>
          <target state="translated">サーバが受信リクエストをリッスンするソケットオブジェクト。</target>
        </trans-unit>
        <trans-unit id="26023ee861897f5dc0dfc453c9dcce20c871b174" translate="yes" xml:space="preserve">
          <source>The socket protocol.</source>
          <target state="translated">ソケットプロトコル。</target>
        </trans-unit>
        <trans-unit id="e2c94f7721fba4bae8a8259834b5d12fe4ec41fc" translate="yes" xml:space="preserve">
          <source>The socket type will be &lt;a href=&quot;socket#socket.SOCK_DGRAM&quot;&gt;&lt;code&gt;SOCK_DGRAM&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ソケットタイプは&lt;a href=&quot;socket#socket.SOCK_DGRAM&quot;&gt; &lt;code&gt;SOCK_DGRAM&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4389e8f1de40e8b0d84b0639d44300ab08f5992c" translate="yes" xml:space="preserve">
          <source>The socket type will be &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ソケットタイプは&lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt; &lt;code&gt;SOCK_STREAM&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="76aee9ff5ed1acb81a710cf6c05b57b815c4d8f6" translate="yes" xml:space="preserve">
          <source>The socket type.</source>
          <target state="translated">ソケットの種類です。</target>
        </trans-unit>
        <trans-unit id="887f45826cd1154d00bb13afc1d5d24e35e6e8ea" translate="yes" xml:space="preserve">
          <source>The sockets that represent existing incoming client connections are left open.</source>
          <target state="translated">既存の着信クライアント接続を表すソケットはオープンのままになります。</target>
        </trans-unit>
        <trans-unit id="0fa5477e7dba26b484b00fa654ca357c05ecf60e" translate="yes" xml:space="preserve">
          <source>The sole value of the type &lt;code&gt;NoneType&lt;/code&gt;. &lt;code&gt;None&lt;/code&gt; is frequently used to represent the absence of a value, as when default arguments are not passed to a function. Assignments to &lt;code&gt;None&lt;/code&gt; are illegal and raise a &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;NoneType&lt;/code&gt; 型の唯一の値。 &lt;code&gt;None&lt;/code&gt; は、デフォルトの引数が関数に渡されない場合など、値がないことを表すために頻繁に使用されます。 &lt;code&gt;None&lt;/code&gt; への代入は違法であり、&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; を送出し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="85af829c0490dff673d58821b4d8b8d4f6478909" translate="yes" xml:space="preserve">
          <source>The solution is either to increase precision or to force rounding of inputs using the unary plus operation:</source>
          <target state="translated">解決策は、精度を上げるか、単項プラス演算を使って入力を強制的に丸めてしまうかのどちらかです。</target>
        </trans-unit>
        <trans-unit id="07e7971104c97772932547de9d78450a15b11c66" translate="yes" xml:space="preserve">
          <source>The solution is safe but it has a significant overhead when handling a big number of processes (&lt;em&gt;O(n)&lt;/em&gt; each time a &lt;code&gt;SIGCHLD&lt;/code&gt; is received).</source>
          <target state="translated">ソリューションは安全ですが、多数のプロセス（ &lt;code&gt;SIGCHLD&lt;/code&gt; を受信するたびに&lt;em&gt;O（n））&lt;/em&gt;を処理する場合、かなりのオーバーヘッドがあります。</target>
        </trans-unit>
        <trans-unit id="d4ae167e2456ec13e75cf55d1b00b0bdde55b895" translate="yes" xml:space="preserve">
          <source>The solution is to use Python&amp;rsquo;s raw string notation for regular expression patterns; backslashes are not handled in any special way in a string literal prefixed with &lt;code&gt;'r'&lt;/code&gt;. So &lt;code&gt;r&quot;\n&quot;&lt;/code&gt; is a two-character string containing &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt;, while &lt;code&gt;&quot;\n&quot;&lt;/code&gt; is a one-character string containing a newline. Usually patterns will be expressed in Python code using this raw string notation.</source>
          <target state="translated">解決策は、正規表現パターンにPythonの生の文字列表記を使用することです。 &lt;code&gt;'r'&lt;/code&gt; が前に付いた文字列リテラルでは、円記号は特別な方法で処理されません。したがって、 &lt;code&gt;r&quot;\n&quot;&lt;/code&gt; は &lt;code&gt;'\'&lt;/code&gt; と &lt;code&gt;'n'&lt;/code&gt; を含む2文字の文字列であり、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; は改行を含む1文字の文字列です。通常、パターンはこの生の文字列表記を使用してPythonコードで表現されます。</target>
        </trans-unit>
        <trans-unit id="630211a218ed284023e80ddd9d174a4ffb85cd53" translate="yes" xml:space="preserve">
          <source>The source code for &lt;code&gt;asyncio.run()&lt;/code&gt; can be found in &lt;a href=&quot;https://github.com/python/cpython/tree/3.8/Lib/asyncio/runners.py&quot;&gt;Lib/asyncio/runners.py&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;asyncio.run()&lt;/code&gt; のソースコードは&lt;a href=&quot;https://github.com/python/cpython/tree/3.8/Lib/asyncio/runners.py&quot;&gt;Lib / asyncio / runners.pyにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="20ad04c27726a886512a55970c3c9a2ccf70d8b8" translate="yes" xml:space="preserve">
          <source>The source code for &lt;code&gt;asyncio.run()&lt;/code&gt; can be found in &lt;a href=&quot;https://github.com/python/cpython/tree/3.9/Lib/asyncio/runners.py&quot;&gt;Lib/asyncio/runners.py&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;asyncio.run()&lt;/code&gt; のソースコードは、&lt;a href=&quot;https://github.com/python/cpython/tree/3.9/Lib/asyncio/runners.py&quot;&gt;Lib / asyncio /runners.pyにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b7c7008356b1938d975233f6572bb32b9d0c6037" translate="yes" xml:space="preserve">
          <source>The source code for asyncio can be found in &lt;a href=&quot;https://github.com/python/cpython/tree/3.8/Lib/asyncio/&quot;&gt;Lib/asyncio/&lt;/a&gt;.</source>
          <target state="translated">asyncioのソースコードは&lt;a href=&quot;https://github.com/python/cpython/tree/3.8/Lib/asyncio/&quot;&gt;Lib / asyncio /にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cfde801a2f8277858a1333b9a5702f14671cb49a" translate="yes" xml:space="preserve">
          <source>The source code for asyncio can be found in &lt;a href=&quot;https://github.com/python/cpython/tree/3.9/Lib/asyncio/&quot;&gt;Lib/asyncio/&lt;/a&gt;.</source>
          <target state="translated">asyncioのソースコードは&lt;a href=&quot;https://github.com/python/cpython/tree/3.9/Lib/asyncio/&quot;&gt;Lib / asyncio /にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4afea0ea275bb3d4fffc9ec00b2df6d074be239a" translate="yes" xml:space="preserve">
          <source>The sp_namp and sp_pwdp items are strings, all others are integers. &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised if the entry asked for cannot be found.</source>
          <target state="translated">sp_nampとsp_pwdpの項目は文字列で、他のすべては整数です。要求されたエントリが見つからない場合、&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="3d8373511020db5acc21c29f54afacf07efb1307" translate="yes" xml:space="preserve">
          <source>The spec also applies to instantiated classes (i.e. the return value of specced mocks):</source>
          <target state="translated">spec はインスタンス化されたクラスにも適用されます (つまり spec されたモックの戻り値)。</target>
        </trans-unit>
        <trans-unit id="958f1bbb6de4a402e06c21a9ae860adbb3f32eb3" translate="yes" xml:space="preserve">
          <source>The spec only applies to the mock itself, so we still have the same issue with any methods on the mock:</source>
          <target state="translated">仕様はモック自体にしか適用されないので、モック上のどのメソッドを使っても同じ問題を抱えています。</target>
        </trans-unit>
        <trans-unit id="b10e3e2928198f4f7fc663290ec0cccc17419f3f" translate="yes" xml:space="preserve">
          <source>The special attribute &lt;code&gt;__members__&lt;/code&gt; is a read-only ordered mapping of names to members. It includes all names defined in the enumeration, including the aliases:</source>
          <target state="translated">特別な属性 &lt;code&gt;__members__&lt;/code&gt; は、名前からメンバーへの読み取り専用の順序付きマッピングです。これには、エイリアスを含め、列挙で定義されたすべての名前が含まれます。</target>
        </trans-unit>
        <trans-unit id="e8125b61331573562956037df84be471f1f84f34" translate="yes" xml:space="preserve">
          <source>The special behaviour of the console can be overridden by setting the environment variable PYTHONLEGACYWINDOWSSTDIO before starting Python. In that case, the console codepages are used as for any other character device.</source>
          <target state="translated">コンソールの特殊な挙動は、Python を起動する前に環境変数 PYTHONLEGACYWINDOWSSTDIO を設定することで上書きすることができます。その場合、コンソールのコードページは他の文字デバイスと同様に使用されます。</target>
        </trans-unit>
        <trans-unit id="d6872f052fa8d0d34b453f09198a77148fe33e51" translate="yes" xml:space="preserve">
          <source>The special characters are:</source>
          <target state="translated">特殊なキャラクターが登場します。</target>
        </trans-unit>
        <trans-unit id="7a5ee27573a32396d3ae3dc89046e9d91aa80669" translate="yes" xml:space="preserve">
          <source>The special global variables &lt;code&gt;__name__&lt;/code&gt;, &lt;code&gt;__spec__&lt;/code&gt;, &lt;code&gt;__file__&lt;/code&gt;, &lt;code&gt;__cached__&lt;/code&gt;, &lt;code&gt;__loader__&lt;/code&gt; and &lt;code&gt;__package__&lt;/code&gt; are set in the globals dictionary before the module code is executed (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail).</source>
          <target state="translated">特別なグローバル変数 &lt;code&gt;__name__&lt;/code&gt; 、 &lt;code&gt;__spec__&lt;/code&gt; 、 &lt;code&gt;__file__&lt;/code&gt; 、 &lt;code&gt;__cached__&lt;/code&gt; 、 &lt;code&gt;__loader__&lt;/code&gt; と &lt;code&gt;__package__&lt;/code&gt; モジュールコードが実行される前にグローバルに設定されているが（ -他の変数は、インタプリタ実装の詳細として暗黙的に設定することができる、これは、変数の最小セットであることに注意）辞書。</target>
        </trans-unit>
        <trans-unit id="9467123089d6aa38d3e2e72ebf08b05d73247208" translate="yes" xml:space="preserve">
          <source>The special sequences consist of &lt;code&gt;'\'&lt;/code&gt; and a character from the list below. If the ordinary character is not an ASCII digit or an ASCII letter, then the resulting RE will match the second character. For example, &lt;code&gt;\$&lt;/code&gt; matches the character &lt;code&gt;'$'&lt;/code&gt;.</source>
          <target state="translated">特殊なシーケンスは、 &lt;code&gt;'\'&lt;/code&gt; と以下のリストの文字で構成されます。通常の文字がASCII数字またはASCII文字でない場合、結果のREは2番目の文字と一致します。たとえば、 &lt;code&gt;\$&lt;/code&gt; は文字 &lt;code&gt;'$'&lt;/code&gt; と一致します。</target>
        </trans-unit>
        <trans-unit id="1dcbe5116b95cd6dc7867c87774d04cf7173a3e1" translate="yes" xml:space="preserve">
          <source>The specific resources that can be limited are system dependent. They are described in the &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/getrlimit(2)&quot;&gt;getrlimit(2)&lt;/a&gt;&lt;/em&gt; man page. The resources listed below are supported when the underlying operating system supports them; resources which cannot be checked or controlled by the operating system are not defined in this module for those platforms.</source>
          <target state="translated">制限できる特定のリソースはシステムに依存します。これらについては、&lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/getrlimit(2)&quot;&gt;getrlimit（2）の&lt;/a&gt;&lt;/em&gt;マニュアルページで説明しています。以下のリソースは、基盤となるオペレーティングシステムがサポートしている場合にサポートされます。オペレーティングシステムによってチェックまたは制御できないリソースは、これらのプラットフォームのこのモジュールでは定義されていません。</target>
        </trans-unit>
        <trans-unit id="679e621b066d4106ebdb3517733d1d8a6e844edc" translate="yes" xml:space="preserve">
          <source>The specification of the original Netscape cookie protocol. Though this is still the dominant protocol, the &amp;lsquo;Netscape cookie protocol&amp;rsquo; implemented by all the major browsers (and &lt;a href=&quot;#module-http.cookiejar&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt;) only bears a passing resemblance to the one sketched out in &lt;code&gt;cookie_spec.html&lt;/code&gt;.</source>
          <target state="translated">オリジナルのNetscape Cookieプロトコルの仕様。これは依然として主要なプロトコルですが、すべての主要なブラウザー（および&lt;a href=&quot;#module-http.cookiejar&quot;&gt; &lt;code&gt;http.cookiejar&lt;/code&gt; &lt;/a&gt;）によって実装された「Netscape cookieプロトコル」は、 &lt;code&gt;cookie_spec.html&lt;/code&gt; でスケッチされたものとおおまかに似ているだけです。</target>
        </trans-unit>
        <trans-unit id="c8a5ef525a4f38d6c8baa2c8948ff2da032e2bfc" translate="yes" xml:space="preserve">
          <source>The specification provided by the W3C defines the DOM API for Java, ECMAScript, and OMG IDL. The Python mapping defined here is based in large part on the IDL version of the specification, but strict compliance is not required (though implementations are free to support the strict mapping from IDL). See section &lt;a href=&quot;#dom-conformance&quot;&gt;Conformance&lt;/a&gt; for a detailed discussion of mapping requirements.</source>
          <target state="translated">W3Cが提供する仕様は、Java、ECMAScript、およびOMG IDL用のDOM APIを定義しています。ここで定義されているPythonマッピングは、主に仕様のIDLバージョンに基づいていますが、厳密な準拠は必要ありません（実装はIDLからの厳密なマッピングを自由にサポートできます）。マッピング要件の詳細については、「&lt;a href=&quot;#dom-conformance&quot;&gt;適合性&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="a5a54865c96e9fc0cf2ce3bd609a52643dbb3a5d" translate="yes" xml:space="preserve">
          <source>The specification, background, and examples for the Python &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">Python &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの仕様、背景、および例。</target>
        </trans-unit>
        <trans-unit id="0dbc88255d5b29447d25f2517106794b852b1e4a" translate="yes" xml:space="preserve">
          <source>The specification, background, and examples for the Python &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">Python &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの仕様、背景、および例。</target>
        </trans-unit>
        <trans-unit id="d53ba21dee295896d8c0fc9de128483f4c1f4d26" translate="yes" xml:space="preserve">
          <source>The specified loggers will be configured according to the level, propagation, filters and handlers specified.</source>
          <target state="translated">指定されたロガーは、指定されたレベル、伝搬、フィルタ、ハンドラに応じて設定されます。</target>
        </trans-unit>
        <trans-unit id="e0612ec14e7221d85b8658075b6926be56ede2bc" translate="yes" xml:space="preserve">
          <source>The specifier &lt;em&gt;name&lt;/em&gt; is a &amp;ldquo;dotted name&amp;rdquo; that may resolve either to a module, a test case class, a test method within a test case class, a &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; instance, or a callable object which returns a &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; instance. These checks are applied in the order listed here; that is, a method on a possible test case class will be picked up as &amp;ldquo;a test method within a test case class&amp;rdquo;, rather than &amp;ldquo;a callable object&amp;rdquo;.</source>
          <target state="translated">指定子&lt;em&gt;名&lt;/em&gt;は、モジュール、テストケースクラス、テストケースクラス内のテストメソッド、&lt;a href=&quot;#unittest.TestSuite&quot;&gt; &lt;code&gt;TestSuite&lt;/code&gt; &lt;/a&gt;インスタンス、または&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#unittest.TestSuite&quot;&gt; &lt;code&gt;TestSuite&lt;/code&gt; &lt;/a&gt;インスタンスを返す呼び出し可能なオブジェクトのいずれかに解決される可能性がある「ドット表記名」です。これらのチェックは、ここにリストされている順序で適用されます。つまり、可能なテストケースクラスのメソッドは、「呼び出し可能なオブジェクト」ではなく、「テストケースクラス内のテストメソッド」として取得されます。</target>
        </trans-unit>
        <trans-unit id="8327e74724788e9fd23faafae57d70e63b944955" translate="yes" xml:space="preserve">
          <source>The spinbox widget generates an &lt;strong&gt;&amp;lt;&amp;lt;Increment&amp;gt;&amp;gt;&lt;/strong&gt; virtual event when the user presses &amp;lt;Up&amp;gt;, and a &lt;strong&gt;&amp;lt;&amp;lt;Decrement&amp;gt;&amp;gt;&lt;/strong&gt; virtual event when the user presses &amp;lt;Down&amp;gt;.</source>
          <target state="translated">スピンボックスウィジェットは、ユーザーが&amp;lt;Up&amp;gt;を押すと&lt;strong&gt;&amp;lt;&amp;lt; Increment &amp;gt;&amp;gt;&lt;/strong&gt;仮想イベントを生成し、ユーザーが&amp;lt;Down&amp;gt;を押すと&lt;strong&gt;&amp;lt;&amp;lt; Decrement &amp;gt;&amp;gt;&lt;/strong&gt;仮想イベントを生成します。</target>
        </trans-unit>
        <trans-unit id="51a445c74beda03ed7a0326a9352f92f1dd4d706" translate="yes" xml:space="preserve">
          <source>The sqlite3 module is not built with loadable extension support by default, because some platforms (notably Mac OS X) have SQLite libraries which are compiled without this feature. To get loadable extension support, you must pass &amp;ndash;enable-loadable-sqlite-extensions to configure.</source>
          <target state="translated">一部のプラットフォーム（特にMac OS X）には、この機能なしでコンパイルされるSQLiteライブラリーがあるため、sqlite3モジュールはデフォルトでロード可能な拡張機能サポートでビルドされません。ロード可能な拡張機能のサポートを取得するには、&amp;ndash;enable-loadable-sqlite-extensionsを渡して構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c357cdf2607bac2f5dbe1953aebb35c44af932e" translate="yes" xml:space="preserve">
          <source>The sqlite3 module was written by Gerhard H&amp;auml;ring. It provides a SQL interface compliant with the DB-API 2.0 specification described by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">sqlite3モジュールはGerhardH&amp;auml;ringによって書かれました。&lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249で&lt;/strong&gt;&lt;/a&gt;説明されているDB-API 2.0仕様に準拠したSQLインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="bac169ab637e97d8d04b333be4d5b9e88d67748b" translate="yes" xml:space="preserve">
          <source>The standalone backport of this module provides more information on &lt;a href=&quot;http://importlib-resources.readthedocs.io/en/latest/using.html&quot;&gt;using importlib.resources&lt;/a&gt; and &lt;a href=&quot;http://importlib-resources.readthedocs.io/en/latest/migration.html&quot;&gt;migrating from pkg_resources to importlib.resources&lt;/a&gt;.</source>
          <target state="translated">このモジュールのスタンドアロンバックポートは、&lt;a href=&quot;http://importlib-resources.readthedocs.io/en/latest/using.html&quot;&gt;importlib.resourcesの使用&lt;/a&gt;と&lt;a href=&quot;http://importlib-resources.readthedocs.io/en/latest/migration.html&quot;&gt;pkg_resourcesからimportlib.resourcesへの移行&lt;/a&gt;に関する詳細情報を提供します。</target>
        </trans-unit>
        <trans-unit id="b77674a95bf51acfb62957a46af0656c170047b7" translate="yes" xml:space="preserve">
          <source>The standard Python IMAP module.</source>
          <target state="translated">Pythonの標準的なIMAPモジュールです。</target>
        </trans-unit>
        <trans-unit id="68889788aae8ae70cfc40e3231e1f8e78cb10352" translate="yes" xml:space="preserve">
          <source>The standard X cursor names from &lt;code&gt;cursorfont.h&lt;/code&gt; can be used, without the &lt;code&gt;XC_&lt;/code&gt; prefix. For example to get a hand cursor (&lt;code&gt;XC_hand2&lt;/code&gt;), use the string &lt;code&gt;&quot;hand2&quot;&lt;/code&gt;. You can also specify a bitmap and mask file of your own. See page 179 of Ousterhout&amp;rsquo;s book.</source>
          <target state="translated">&lt;code&gt;XC_&lt;/code&gt; 接頭辞なしで、cursorfont.hからの標準Xカーソル名を &lt;code&gt;cursorfont.h&lt;/code&gt; できます。たとえば、ハンドカーソル（ &lt;code&gt;XC_hand2&lt;/code&gt; ）を取得するには、文字列 &lt;code&gt;&quot;hand2&quot;&lt;/code&gt; を使用します。独自のビットマップおよびマスクファイルを指定することもできます。Ousterhoutの本の179ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="48c570e26b992a39c9c6ac01d765d07ba873d695" translate="yes" xml:space="preserve">
          <source>The standard error device. Initially, this is the active console screen buffer, &lt;code&gt;CONOUT$&lt;/code&gt;.</source>
          <target state="translated">標準エラーデバイス。最初は、これはアクティブなコンソール画面バッファー &lt;code&gt;CONOUT$&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="838902f3ab46b04d98965c4728b7b35218852253" translate="yes" xml:space="preserve">
          <source>The standard format of the &lt;code id=&quot;index-17&quot;&gt;TZ&lt;/code&gt; environment variable is (whitespace added for clarity):</source>
          <target state="translated">&lt;code id=&quot;index-17&quot;&gt;TZ&lt;/code&gt; 環境変数の標準形式は（明確にするために空白が追加されています）：</target>
        </trans-unit>
        <trans-unit id="cb7f906caa68565a322b0c38155c9958a70af129" translate="yes" xml:space="preserve">
          <source>The standard input device. Initially, this is the console input buffer, &lt;code&gt;CONIN$&lt;/code&gt;.</source>
          <target state="translated">標準入力デバイス。最初は、これはコンソール入力バッファー &lt;code&gt;CONIN$&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e9fe9bf76be36079397d2cae51a3b2aece1a0ca0" translate="yes" xml:space="preserve">
          <source>The standard module &lt;a href=&quot;stat#module-stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; defines functions and constants that are useful for extracting information from a &lt;code&gt;stat&lt;/code&gt; structure. (On Windows, some items are filled with dummy values.)</source>
          <target state="translated">標準モジュール&lt;a href=&quot;stat#module-stat&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;stat&lt;/code&gt; 構造から情報を抽出するのに役立つ関数と定数を定義します。（Windowsでは、一部の項目はダミー値で埋められます。）</target>
        </trans-unit>
        <trans-unit id="6cdc8bfcbf49383bc1e73500c1b4de14a0e0fed5" translate="yes" xml:space="preserve">
          <source>The standard output and standard error streams are buffered during the test run. Output during a passing test is discarded. Output is echoed normally on test fail or error and is added to the failure messages.</source>
          <target state="translated">標準出力と標準エラーストリームは、テスト実行中にバッファリングされます。合格したテスト中の出力は破棄されます。出力は、テストの失敗またはエラー時に正常にエコーされ、失敗メッセージに追加されます。</target>
        </trans-unit>
        <trans-unit id="eb7cf066e8af540cf727db7cac24accf30ce076f" translate="yes" xml:space="preserve">
          <source>The standard output device. Initially, this is the active console screen buffer, &lt;code&gt;CONOUT$&lt;/code&gt;.</source>
          <target state="translated">標準出力デバイス。最初は、これはアクティブなコンソール画面バッファー &lt;code&gt;CONOUT$&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bedde387bc6937840daa67ab375a6cae23a47eb7" translate="yes" xml:space="preserve">
          <source>The standard way to exit is &lt;code&gt;sys.exit(n)&lt;/code&gt;. &lt;a href=&quot;#os._exit&quot;&gt;&lt;code&gt;_exit()&lt;/code&gt;&lt;/a&gt; should normally only be used in the child process after a &lt;a href=&quot;#os.fork&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">終了する標準的な方法は &lt;code&gt;sys.exit(n)&lt;/code&gt; です。&lt;a href=&quot;#os._exit&quot;&gt; &lt;code&gt;_exit()&lt;/code&gt; &lt;/a&gt;は通常、&lt;a href=&quot;#os.fork&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; の&lt;/a&gt;後の子プロセスでのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3ee6195d1060ec2a3f2616df734ae62aafdf49e" translate="yes" xml:space="preserve">
          <source>The standard way to open files for reading and writing with Python.</source>
          <target state="translated">Pythonでファイルを読み書きするための標準的なファイルの開き方です。</target>
        </trans-unit>
        <trans-unit id="68d5384e54c19f936c634b6d988aedf31c295bf3" translate="yes" xml:space="preserve">
          <source>The start index of &lt;em&gt;doc&lt;/em&gt; where parsing failed.</source>
          <target state="translated">解析に失敗した&lt;em&gt;ドキュメント&lt;/em&gt;の開始インデックス。</target>
        </trans-unit>
        <trans-unit id="85b13200690d7aa62326c7849f57cc6925206c71" translate="yes" xml:space="preserve">
          <source>The starting column doesn&amp;rsquo;t matter:</source>
          <target state="translated">開始列は関係ありません。</target>
        </trans-unit>
        <trans-unit id="de2b727684bc631a4d8eca489abadd7633848760" translate="yes" xml:space="preserve">
          <source>The stateless encoding and decoding functions. These must be functions or methods which have the same interface as the &lt;a href=&quot;#codecs.Codec.encode&quot;&gt;&lt;code&gt;encode()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#codecs.Codec.decode&quot;&gt;&lt;code&gt;decode()&lt;/code&gt;&lt;/a&gt; methods of Codec instances (see &lt;a href=&quot;#codec-objects&quot;&gt;Codec Interface&lt;/a&gt;). The functions or methods are expected to work in a stateless mode.</source>
          <target state="translated">ステートレスなエンコ​​ードおよびデコード機能。これらは、コーデックインスタンスの&lt;a href=&quot;#codecs.Codec.encode&quot;&gt; &lt;code&gt;encode()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#codecs.Codec.decode&quot;&gt; &lt;code&gt;decode()&lt;/code&gt; &lt;/a&gt;メソッドと同じインターフェイスを持つ関数またはメソッドである必要があります（&lt;a href=&quot;#codec-objects&quot;&gt;コーデックインターフェイスを&lt;/a&gt;参照）。関数またはメソッドは、ステートレスモードで動作することが期待されています。</target>
        </trans-unit>
        <trans-unit id="fc37fae53ad3d2cf8bbbb3fbc6970158d324b500" translate="yes" xml:space="preserve">
          <source>The statement &lt;code&gt;import spam.ham&lt;/code&gt; results in this call:</source>
          <target state="translated">ステートメント &lt;code&gt;import spam.ham&lt;/code&gt; をインポートすると、次の呼び出しが行われます。</target>
        </trans-unit>
        <trans-unit id="57343ca400818c99d89cc954bac7f25bd563f12b" translate="yes" xml:space="preserve">
          <source>The statement:</source>
          <target state="translated">声明。</target>
        </trans-unit>
        <trans-unit id="5f7f5bd7cdc067527c840f51d511b9f3a881789d" translate="yes" xml:space="preserve">
          <source>The static type checker will treat the new type as if it were a subclass of the original type. This is useful in helping catch logical errors:</source>
          <target state="translated">静的型チェッカは、新しい型を元の型のサブクラスであるかのように扱います。これは論理的なエラーをキャッチするのに便利です。</target>
        </trans-unit>
        <trans-unit id="acb7f81b54e59ac66887405065b4bf032855f1db" translate="yes" xml:space="preserve">
          <source>The stdlib implementation is based on &lt;a href=&quot;https://pythonhosted.org/pyblake2/&quot;&gt;pyblake2&lt;/a&gt; module. It was written by &lt;em&gt;Dmitry Chestnykh&lt;/em&gt; based on C implementation written by &lt;em&gt;Samuel Neves&lt;/em&gt;. The documentation was copied from &lt;a href=&quot;https://pythonhosted.org/pyblake2/&quot;&gt;pyblake2&lt;/a&gt; and written by &lt;em&gt;Dmitry Chestnykh&lt;/em&gt;.</source>
          <target state="translated">stdlib実装は&lt;a href=&quot;https://pythonhosted.org/pyblake2/&quot;&gt;pyblake2&lt;/a&gt;モジュールに基づいています。それは&lt;em&gt;サミュエル・ネベス&lt;/em&gt;によって書かれたCの実装に基づいて&lt;em&gt;Dmitry Chestnykh&lt;/em&gt;によって書かれました。ドキュメントは&lt;a href=&quot;https://pythonhosted.org/pyblake2/&quot;&gt;pyblake2&lt;/a&gt;からコピーされ、&lt;em&gt;Dmitry Chestnykh&lt;/em&gt;によって書かれ&lt;em&gt;ました&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a6771d7c766fdf223fc75b578682b8b43ecb7225" translate="yes" xml:space="preserve">
          <source>The steps to create a standalone archive are as follows:</source>
          <target state="translated">スタンドアロンアーカイブを作成する手順は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b08826ba03bafb388c1bd5be0f5d0ef0f9774b35" translate="yes" xml:space="preserve">
          <source>The straightforward translation into ctypes code would be this, but it does not work:</source>
          <target state="translated">ctypesコードへの直訳はこれになりますが、うまくいきません。</target>
        </trans-unit>
        <trans-unit id="3bbd18af7e807a1ecde8e654eeae316aad16083d" translate="yes" xml:space="preserve">
          <source>The strange invariant above is meant to be an efficient memory representation for a tournament. The numbers below are &lt;em&gt;k&lt;/em&gt;, not &lt;code&gt;a[k]&lt;/code&gt;:</source>
          <target state="translated">上記の奇妙な不変条件は、トーナメントの効率的なメモリ表現であることを意図しています。以下の数値は&lt;em&gt;k&lt;/em&gt;であり &lt;code&gt;a[k]&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="4f3f83287161100c9dc848427c687a8403242c4e" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'01234567'&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;'01234567'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="081b65b640d4fd9a1348073d2be076165e5d402b" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'0123456789'&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;'0123456789'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4dc062e91d1dfe0b46d43e731a7d26c8429acd1c" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'0123456789abcdefABCDEF'&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;'0123456789abcdefABCDEF'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e169e91e10e1724d8d6b7fcde6b5762907d6051" translate="yes" xml:space="preserve">
          <source>The string &lt;em&gt;hash_name&lt;/em&gt; is the desired name of the hash digest algorithm for HMAC, e.g. &amp;lsquo;sha1&amp;rsquo; or &amp;lsquo;sha256&amp;rsquo;. &lt;em&gt;password&lt;/em&gt; and &lt;em&gt;salt&lt;/em&gt; are interpreted as buffers of bytes. Applications and libraries should limit &lt;em&gt;password&lt;/em&gt; to a sensible length (e.g. 1024). &lt;em&gt;salt&lt;/em&gt; should be about 16 or more bytes from a proper source, e.g. &lt;a href=&quot;os#os.urandom&quot;&gt;&lt;code&gt;os.urandom()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列&lt;em&gt;hash_name&lt;/em&gt;は、HMACのハッシュダイジェストアルゴリズムの目的の名前です（例： 'sha1'または 'sha256'）。&lt;em&gt;パスワード&lt;/em&gt;と&lt;em&gt;ソルト&lt;/em&gt;はバイトのバッファとして解釈されます。アプリケーションとライブラリは、&lt;em&gt;パスワード&lt;/em&gt;を適切な長さに制限&lt;em&gt;する&lt;/em&gt;必要があり&lt;em&gt;ます&lt;/em&gt;（例：1024）。&lt;em&gt;salt&lt;/em&gt;は、適切なソース&lt;a href=&quot;os#os.urandom&quot;&gt; &lt;code&gt;os.urandom()&lt;/code&gt; &lt;/a&gt;から約16バイト以上である必要があります。</target>
        </trans-unit>
        <trans-unit id="974fbe45930e6c9f7ed0ba945f3ca1dfc34eddbd" translate="yes" xml:space="preserve">
          <source>The string of characters accepted for the command prefix.</source>
          <target state="translated">コマンドのプレフィックスに使用できる文字列。</target>
        </trans-unit>
        <trans-unit id="218df02f3b43ffd3271f33dc44503b415fe71878" translate="yes" xml:space="preserve">
          <source>The string of characters that are recognized as comment beginners. All characters from the comment beginner to end of line are ignored. Includes just &lt;code&gt;'#'&lt;/code&gt; by default.</source>
          <target state="translated">コメントの初心者として認識される文字列。コメントの初心者から行末までのすべての文字は無視されます。デフォルトでは &lt;code&gt;'#'&lt;/code&gt; のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="08ac626721e1a485bd3af4b431e4c2809aea979e" translate="yes" xml:space="preserve">
          <source>The string of characters that will accumulate into multi-character tokens. By default, includes all ASCII alphanumerics and underscore. In POSIX mode, the accented characters in the Latin-1 set are also included. If &lt;a href=&quot;#shlex.shlex.punctuation_chars&quot;&gt;&lt;code&gt;punctuation_chars&lt;/code&gt;&lt;/a&gt; is not empty, the characters &lt;code&gt;~-./*?=&lt;/code&gt;, which can appear in filename specifications and command line parameters, will also be included in this attribute, and any characters which appear in &lt;code&gt;punctuation_chars&lt;/code&gt; will be removed from &lt;code&gt;wordchars&lt;/code&gt; if they are present there. If &lt;a href=&quot;#shlex.shlex.whitespace_split&quot;&gt;&lt;code&gt;whitespace_split&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, this will have no effect.</source>
          <target state="translated">複数文字のトークンに蓄積される文字列。デフォルトでは、すべてのASCII英数字とアンダースコアが含まれます。POSIXモードでは、Latin-1セットのアクセント付き文字も含まれます。&lt;a href=&quot;#shlex.shlex.punctuation_chars&quot;&gt; &lt;code&gt;punctuation_chars&lt;/code&gt; &lt;/a&gt;が空でない場合、ファイル名の指定およびコマンドラインパラメータに表示される可能性がある文字 &lt;code&gt;~-./*?=&lt;/code&gt; もこの属性に含まれ、 &lt;code&gt;punctuation_chars&lt;/code&gt; に表示されるすべての文字は、 &lt;code&gt;wordchars&lt;/code&gt; から削除されますそこに存在します。&lt;a href=&quot;#shlex.shlex.whitespace_split&quot;&gt; &lt;code&gt;whitespace_split&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合、これは効果がありません。</target>
        </trans-unit>
        <trans-unit id="4659a50925d6df425ac6596dfc8a23084e3a4010" translate="yes" xml:space="preserve">
          <source>The string passed to &lt;a href=&quot;#re.Pattern.match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#re.Pattern.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#re.Pattern.match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#re.Pattern.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; に&lt;/a&gt;渡される文字列。</target>
        </trans-unit>
        <trans-unit id="5d5d7729b640e49a8b83a3c394f3b0662bfab3da" translate="yes" xml:space="preserve">
          <source>The string representation in dotted decimal notation. Leading zeroes are never included in the representation.</source>
          <target state="translated">ドット10進数表記の文字列表現。先頭のゼロは表現に含まれません。</target>
        </trans-unit>
        <trans-unit id="36dad8efe406905d6d09a273705ad1e8e58e3f5c" translate="yes" xml:space="preserve">
          <source>The string representation of a path is the raw filesystem path itself (in native form, e.g. with backslashes under Windows), which you can pass to any function taking a file path as a string:</source>
          <target state="translated">パスの文字列表現は、ファイルシステムの生のパスそのもの (Windows の場合はバックスラッシュ付きなどのネイティブ形式)であり、ファイルパスを文字列として受け取る任意の関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="323edf4f9c5d0894188d9673d9f925fd1eae3209" translate="yes" xml:space="preserve">
          <source>The string representation returned when calling &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; on a &lt;a href=&quot;#zoneinfo.ZoneInfo&quot;&gt;&lt;code&gt;ZoneInfo&lt;/code&gt;&lt;/a&gt; object defaults to using the &lt;a href=&quot;#zoneinfo.ZoneInfo.key&quot;&gt;&lt;code&gt;ZoneInfo.key&lt;/code&gt;&lt;/a&gt; attribute (see the note on usage in the attribute documentation):</source>
          <target state="translated">&lt;a href=&quot;#zoneinfo.ZoneInfo&quot;&gt; &lt;code&gt;ZoneInfo&lt;/code&gt; &lt;/a&gt;オブジェクトで&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;を呼び出すときに返される文字列表現は、デフォルトで&lt;a href=&quot;#zoneinfo.ZoneInfo.key&quot;&gt; &lt;code&gt;ZoneInfo.key&lt;/code&gt; &lt;/a&gt;属性を使用します（属性ドキュメントの使用法に関する注記を参照）。</target>
        </trans-unit>
        <trans-unit id="e2c60d280d907f21f86f32a46a5575681700d147" translate="yes" xml:space="preserve">
          <source>The string that the test was extracted from, or &lt;code&gt;None&lt;/code&gt; if the string is unavailable, or if the test was not extracted from a string.</source>
          <target state="translated">テストが抽出された文字列、または文字列が利用できない場合、またはテストが文字列から抽出されなかった場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3d2b7a50a86f575f6fd45d43bbe5cf13d19875c" translate="yes" xml:space="preserve">
          <source>The string to be used to terminate lines in serialized output. The default is &lt;code&gt;\n&lt;/code&gt; because that&amp;rsquo;s the internal end-of-line discipline used by Python, though &lt;code&gt;\r\n&lt;/code&gt; is required by the RFCs.</source>
          <target state="translated">シリアル化された出力の行を終了するために使用される文字列。デフォルトは &lt;code&gt;\n&lt;/code&gt; です。これは、Pythonが使用する内部の行末規則であるためです。ただし、RFC では &lt;code&gt;\r\n&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="0a2ea49d3d095e008ddabf5c5d79618ebc583572" translate="yes" xml:space="preserve">
          <source>The string used to separate (or, rather, terminate) lines on the current platform. This may be a single character, such as &lt;code&gt;'\n'&lt;/code&gt; for POSIX, or multiple characters, for example, &lt;code&gt;'\r\n'&lt;/code&gt; for Windows. Do not use &lt;em&gt;os.linesep&lt;/em&gt; as a line terminator when writing files opened in text mode (the default); use a single &lt;code&gt;'\n'&lt;/code&gt; instead, on all platforms.</source>
          <target state="translated">現在のプラットフォームで行を区切る（または、終端する）ために使用される文字列。これは、POSIXの &lt;code&gt;'\n'&lt;/code&gt; は「\ n」などの単一文字、Windowsの場合は &lt;code&gt;'\r\n'&lt;/code&gt; などの複数の文字です。テキストモード（デフォルト）で開いたファイルを書き込むときは、&lt;em&gt;os.linesepを行末記号&lt;/em&gt;として使用しないでください。すべてのプラットフォームで、代わりに単一の &lt;code&gt;'\n'&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="8ea85089ca50f62fa2ade25bca0d6a593de3d007" translate="yes" xml:space="preserve">
          <source>The string used to terminate lines produced by the &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt;. It defaults to &lt;code&gt;'\r\n'&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#csv.writer&quot;&gt; &lt;code&gt;writer&lt;/code&gt; &lt;/a&gt;によって生成された行を終了するために使用される文字列。デフォルトは &lt;code&gt;'\r\n'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9cf8db53ba3ecf1804cef93b7a3f29860b461c29" translate="yes" xml:space="preserve">
          <source>The structure of INI files is described &lt;a href=&quot;#supported-ini-file-structure&quot;&gt;in the following section&lt;/a&gt;. Essentially, the file consists of sections, each of which contains keys with values. &lt;a href=&quot;#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt; classes can read and write such files. Let&amp;rsquo;s start by creating the above configuration file programmatically.</source>
          <target state="translated">INIファイルの構造について&lt;a href=&quot;#supported-ini-file-structure&quot;&gt;は、次のセクションで&lt;/a&gt;説明します。基本的に、ファイルはセクションで構成され、各セクションには値を持つキーが含まれています。&lt;a href=&quot;#module-configparser&quot;&gt; &lt;code&gt;configparser&lt;/code&gt; &lt;/a&gt;クラスは、そのようなファイルを読み書きできます。プログラムで上記の構成ファイルを作成することから始めましょう。</target>
        </trans-unit>
        <trans-unit id="57ac7e21799c7f677af76b9cfb1a314919d92910" translate="yes" xml:space="preserve">
          <source>The subclass shown above sets &lt;code&gt;__slots__&lt;/code&gt; to an empty tuple. This helps keep memory requirements low by preventing the creation of instance dictionaries.</source>
          <target state="translated">上記のサブクラスは、 &lt;code&gt;__slots__&lt;/code&gt; を空のタプルに設定します。これにより、インスタンスディクショナリの作成が防止され、メモリ要件を低く抑えることができます。</target>
        </trans-unit>
        <trans-unit id="1049894083da3d6136643ae40107b301d4f0a75b" translate="yes" xml:space="preserve">
          <source>The subnets that join to make the current network definition, depending on the argument values. &lt;em&gt;prefixlen_diff&lt;/em&gt; is the amount our prefix length should be increased by. &lt;em&gt;new_prefix&lt;/em&gt; is the desired new prefix of the subnets; it must be larger than our prefix. One and only one of &lt;em&gt;prefixlen_diff&lt;/em&gt; and &lt;em&gt;new_prefix&lt;/em&gt; must be set. Returns an iterator of network objects.</source>
          <target state="translated">引数の値に応じて、現在のネットワーク定義を作成するために参加するサブネット。&lt;em&gt;prefixlen_diff&lt;/em&gt;は、プレフィックス長を増やす必要がある量です。&lt;em&gt;new_prefix&lt;/em&gt;は、必要なサブネットの新しいプレフィックスです。プレフィックスより大きくなければなりません。&lt;em&gt;prefixlen_diff&lt;/em&gt;と&lt;em&gt;new_prefixの&lt;/em&gt; 1つだけを設定する必要があります。ネットワークオブジェクトのイテレータを返します。</target>
        </trans-unit>
        <trans-unit id="9437b122f21ab7e79496b92a68b7f9e5eeaac2be" translate="yes" xml:space="preserve">
          <source>The subpath within the ZIP file where modules are searched. This is the empty string for zipimporter objects which point to the root of the ZIP file.</source>
          <target state="translated">モジュールが検索される ZIP ファイル内のサブパス。これは、ZIP ファイルのルートを指す zipimporter オブジェクトの空文字列です。</target>
        </trans-unit>
        <trans-unit id="326ec51a05e2c8d6e7c26dd0d96fea0857cfc5e7" translate="yes" xml:space="preserve">
          <source>The subprocess is created by th &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">サブプロセスは、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt; &lt;code&gt;loop.subprocess_exec()&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="830a5ed8adcd9cd5ec5ebf36f7cf9f4fb4e3e294" translate="yes" xml:space="preserve">
          <source>The subprocess is created by the &lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">サブプロセスは&lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;関数によって作成されます。</target>
        </trans-unit>
        <trans-unit id="8ea72797f0c5407f3306ccc7a80e8f6b73c93b68" translate="yes" xml:space="preserve">
          <source>The subprocess is created by the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">サブプロセスは、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt; &lt;code&gt;loop.subprocess_exec()&lt;/code&gt; &lt;/a&gt;メソッドによって作成されます。</target>
        </trans-unit>
        <trans-unit id="195b42e9196a41c00a54c69540f8c3689b081015" translate="yes" xml:space="preserve">
          <source>The subscription syntax must always be used with exactly two values: the argument list and the return type. The argument list must be a list of types or an ellipsis; the return type must be a single type.</source>
          <target state="translated">サブスクリプション構文は、常に 2 つの値を正確に使用しなければなりません。引数リストは型のリストまたは省略形でなければなりません。</target>
        </trans-unit>
        <trans-unit id="6a7c51bccf2dda395b8edfb0931dfbbc3947a4fd" translate="yes" xml:space="preserve">
          <source>The subsequence to search for and its replacement may be any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索するサブシーケンスとその置換は、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e98c3e1145a59f2632009395f0542a0deeafc636" translate="yes" xml:space="preserve">
          <source>The subsequence to search for and its replacement may be any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索するサブシーケンスとその置換は、任意の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトに&lt;/a&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="f20be2f3a12314bdd168b8b8dc36ec5a219e64be" translate="yes" xml:space="preserve">
          <source>The subsequence to search for may be any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or an integer in the range 0 to 255.</source>
          <target state="translated">検索するサブシーケンスは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;または0〜255の範囲の整数です。</target>
        </trans-unit>
        <trans-unit id="e4f0f61cfe406164bd2b1bc218bfd4e6e5b9b5cc" translate="yes" xml:space="preserve">
          <source>The subsequence to search for may be any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or an integer in the range 0 to 255.</source>
          <target state="translated">検索するサブシーケンスは、任意の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;または0〜255の範囲の整数です。</target>
        </trans-unit>
        <trans-unit id="733f0146d975374d445236d55e27c28b82ab24a4" translate="yes" xml:space="preserve">
          <source>The subset and equality comparisons do not generalize to a total ordering function. For example, any two nonempty disjoint sets are not equal and are not subsets of each other, so &lt;em&gt;all&lt;/em&gt; of the following return &lt;code&gt;False&lt;/code&gt;: &lt;code&gt;a&amp;lt;b&lt;/code&gt;, &lt;code&gt;a==b&lt;/code&gt;, or &lt;code&gt;a&amp;gt;b&lt;/code&gt;.</source>
          <target state="translated">サブセットと等値比較は、全体の順序付け関数に一般化されません。たとえば、空でない2つの互いに素なセットは等しくなく、互いにサブセットではないため、次の&lt;em&gt;すべて&lt;/em&gt;が &lt;code&gt;False&lt;/code&gt; を返します： &lt;code&gt;a&amp;lt;b&lt;/code&gt; 、 &lt;code&gt;a==b&lt;/code&gt; 、または &lt;code&gt;a&amp;gt;b&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d313acbcf2f63dafe9fec9edee3d8cece85e3a5f" translate="yes" xml:space="preserve">
          <source>The suffix(es) to search for may be any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索するサフィックスは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d6b552f61d9fa84179bef81d55a59ca4effe2dd9" translate="yes" xml:space="preserve">
          <source>The suffix(es) to search for may be any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="translated">検索するサフィックスは、任意の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトに&lt;/a&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="dc8de5ade168ce8d52e288779f29cce661700e1e" translate="yes" xml:space="preserve">
          <source>The suggested launcher above uses the Python embedding API. This means that in your application, &lt;code&gt;sys.executable&lt;/code&gt; will be your application, and &lt;em&gt;not&lt;/em&gt; a conventional Python interpreter. Your code and its dependencies need to be prepared for this possibility. For example, if your application uses the &lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; module, it will need to call &lt;a href=&quot;multiprocessing#multiprocessing.set_executable&quot;&gt;&lt;code&gt;multiprocessing.set_executable()&lt;/code&gt;&lt;/a&gt; to let the module know where to find the standard Python interpreter.</source>
          <target state="translated">上記の推奨ランチャーは、Python埋め込みAPIを使用しています。つまり、アプリケーションでは、 &lt;code&gt;sys.executable&lt;/code&gt; がアプリケーションであり、従来のPythonインタープリターではあり&lt;em&gt;ません&lt;/em&gt;。この可能性に備えて、コードとその依存関係を準備する必要があります。たとえば、アプリケーションで&lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;モジュールを使用している場合は、multiprocessing.set_executable &lt;a href=&quot;multiprocessing#multiprocessing.set_executable&quot;&gt; &lt;code&gt;multiprocessing.set_executable()&lt;/code&gt; &lt;/a&gt;を呼び出して、モジュールに標準のPythonインタープリターの場所を知らせる必要があります。</target>
        </trans-unit>
        <trans-unit id="4ca94cda6ea6ac6e5a70ea1ff1f1c7c7cd83fb8d" translate="yes" xml:space="preserve">
          <source>The supernet containing this network definition, depending on the argument values. &lt;em&gt;prefixlen_diff&lt;/em&gt; is the amount our prefix length should be decreased by. &lt;em&gt;new_prefix&lt;/em&gt; is the desired new prefix of the supernet; it must be smaller than our prefix. One and only one of &lt;em&gt;prefixlen_diff&lt;/em&gt; and &lt;em&gt;new_prefix&lt;/em&gt; must be set. Returns a single network object.</source>
          <target state="translated">引数の値に応じて、このネットワーク定義を含むスーパーネット。&lt;em&gt;prefixlen_diff&lt;/em&gt;は、接頭辞の長さを減らす量です。&lt;em&gt;new_prefix&lt;/em&gt;は、スーパーネットに必要な新しいプレフィックスです。プレフィックスよりも小さくなければなりません。&lt;em&gt;prefixlen_diff&lt;/em&gt;と&lt;em&gt;new_prefixの&lt;/em&gt; 1つだけを設定する必要があります。単一のネットワークオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="652b878f95e736a80f9fc3181efc0a97692d08cf" translate="yes" xml:space="preserve">
          <source>The symbol module is deprecated and will be removed in future versions of Python.</source>
          <target state="translated">symbol モジュールは非推奨であり、将来の Python のバージョンでは削除される予定です。</target>
        </trans-unit>
        <trans-unit id="1d3a132475eefbff651be1e9f60f5a01256ac706" translate="yes" xml:space="preserve">
          <source>The symbolic &lt;code&gt;LOG_&lt;/code&gt; values are defined in &lt;a href=&quot;#logging.handlers.SysLogHandler&quot;&gt;&lt;code&gt;SysLogHandler&lt;/code&gt;&lt;/a&gt; and mirror the values defined in the &lt;code&gt;sys/syslog.h&lt;/code&gt; header file.</source>
          <target state="translated">シンボリック &lt;code&gt;LOG_&lt;/code&gt; 値は&lt;a href=&quot;#logging.handlers.SysLogHandler&quot;&gt; &lt;code&gt;SysLogHandler&lt;/code&gt; &lt;/a&gt;で定義され、 &lt;code&gt;sys/syslog.h&lt;/code&gt; ヘッダーファイルで定義された値を反映します。</target>
        </trans-unit>
        <trans-unit id="2855402ac7e633af0e756490916e4b0509c9ee96" translate="yes" xml:space="preserve">
          <source>The symbolic constants for the telnet commands are: IAC, DONT, DO, WONT, WILL, SE (Subnegotiation End), NOP (No Operation), DM (Data Mark), BRK (Break), IP (Interrupt process), AO (Abort output), AYT (Are You There), EC (Erase Character), EL (Erase Line), GA (Go Ahead), SB (Subnegotiation Begin).</source>
          <target state="translated">telnet コマンドのシンボリック定数は以下の通りです。IAC、DONT、DO、WONT、WILL、SE(サブネゴシエーション終了)、NOP(操作なし)、DM(データマーク)、BRK(ブレーク)、IP(割り込み処理)、AO(アボート出力)、AYT(Are You There)、EC(文字消去)、EL(ライン消去)、GA(Go Ahead)、SB(サブネゴシエーション開始)です。</target>
        </trans-unit>
        <trans-unit id="f8ce1d87c905659a0bf890b9cf481e55b1edc39a" translate="yes" xml:space="preserve">
          <source>The system handle used to access the library.</source>
          <target state="translated">ライブラリへのアクセスに使用されるシステムハンドルです。</target>
        </trans-unit>
        <trans-unit id="6fc6b22d1825c9f09c313587868ef00b4493d95a" translate="yes" xml:space="preserve">
          <source>The system identifier for the external subset of the document type definition. This will be a URI as a string, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">文書型定義の外部サブセットのシステム識別子。これは、文字列としてのURIまたは &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="44d450cf187b52bfa50e049a62fae0de2e42ee87" translate="yes" xml:space="preserve">
          <source>The system is a domain controller.</source>
          <target state="translated">システムはドメインコントローラです。</target>
        </trans-unit>
        <trans-unit id="40e3a3638774f49e1f39d0e71a7abdae17b2e149" translate="yes" xml:space="preserve">
          <source>The system is a server, but not a domain controller.</source>
          <target state="translated">システムはサーバーですが、ドメインコントローラーではありません。</target>
        </trans-unit>
        <trans-unit id="7c73a5e107d91be1df5f93f12cd8765ccebb12ce" translate="yes" xml:space="preserve">
          <source>The system is a workstation.</source>
          <target state="translated">システムはワークステーションです。</target>
        </trans-unit>
        <trans-unit id="f71c2f2dbbdfd4c5e6a5631f52c2bebfb1487e55" translate="yes" xml:space="preserve">
          <source>The system must have a current leap second table in order for this to give the correct answer. PTP or NTP software can maintain a leap second table.</source>
          <target state="translated">これが正しい答えを出すためには、システムが現在のうるう秒テーブルを持っている必要があります。PTPまたはNTPソフトウェアは、うるう秒テーブルを維持することができます。</target>
        </trans-unit>
        <trans-unit id="55ae6ebbe2e07465f0616803ac45ed0fa6855ad1" translate="yes" xml:space="preserve">
          <source>The system will save old log files by appending extensions to the filename. The extensions are date-and-time based, using the strftime format &lt;code&gt;%Y-%m-%d_%H-%M-%S&lt;/code&gt; or a leading portion thereof, depending on the rollover interval.</source>
          <target state="translated">システムは、ファイル名に拡張子を追加することにより、古いログファイルを保存します。拡張は日時ベースであり、ロールオーバー間隔に応じて、strftime形式 &lt;code&gt;%Y-%m-%d_%H-%M-%S&lt;/code&gt; またはその先行部分を使用します。</target>
        </trans-unit>
        <trans-unit id="179fc435688f8e8cc38d18cd776581a529b4d5f3" translate="yes" xml:space="preserve">
          <source>The tab will not be displayed, but the associated window remains managed by the notebook and its configuration remembered. Hidden tabs may be restored with the &lt;a href=&quot;#tkinter.ttk.Notebook.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">タブは表示されませんが、関連するウィンドウはノートブックによって管理されたままで、その構成は記憶されています。非表示のタブは、&lt;a href=&quot;#tkinter.ttk.Notebook.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;コマンドで復元できます。</target>
        </trans-unit>
        <trans-unit id="2b061342e7fcb41c80cbeeac10798ba4a35c7df9" translate="yes" xml:space="preserve">
          <source>The tab_id present in several methods of &lt;code&gt;ttk.Notebook&lt;/code&gt; may take any of the following forms:</source>
          <target state="translated">ttk.Notebookのいくつかのメソッドに &lt;code&gt;ttk.Notebook&lt;/code&gt; するtab_idは、次のいずれかの形式を取ります。</target>
        </trans-unit>
        <trans-unit id="2d522d8935e08991d14cdfc081478c07442e166b" translate="yes" xml:space="preserve">
          <source>The table below compares the syntax for creating shared ctypes objects from shared memory with the normal ctypes syntax. (In the table &lt;code&gt;MyStruct&lt;/code&gt; is some subclass of &lt;a href=&quot;ctypes#ctypes.Structure&quot;&gt;&lt;code&gt;ctypes.Structure&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">次の表は、共有メモリから共有ctypesオブジェクトを作成するための構文と通常のctypes構文を比較しています。（表の &lt;code&gt;MyStruct&lt;/code&gt; は&lt;a href=&quot;ctypes#ctypes.Structure&quot;&gt; &lt;code&gt;ctypes.Structure&lt;/code&gt; の&lt;/a&gt;サブクラスです。）</target>
        </trans-unit>
        <trans-unit id="7bccc06bc889ee84856fdd46b401f47559a82ae4" translate="yes" xml:space="preserve">
          <source>The table below provides a high-level comparison of &lt;code&gt;strftime()&lt;/code&gt; versus &lt;code&gt;strptime()&lt;/code&gt;:</source>
          <target state="translated">次の表は、 &lt;code&gt;strftime()&lt;/code&gt; と &lt;code&gt;strptime()&lt;/code&gt; の高レベルの比較を示しています。</target>
        </trans-unit>
        <trans-unit id="e3dbc221607127a001cdb67dd95041333051b2e0" translate="yes" xml:space="preserve">
          <source>The tar format was originally conceived to make backups on tape drives with the main focus on preserving file system information. Nowadays tar archives are commonly used for file distribution and exchanging archives over networks. One problem of the original format (which is the basis of all other formats) is that there is no concept of supporting different character encodings. For example, an ordinary tar archive created on a &lt;em&gt;UTF-8&lt;/em&gt; system cannot be read correctly on a &lt;em&gt;Latin-1&lt;/em&gt; system if it contains non-&lt;em&gt;ASCII&lt;/em&gt; characters. Textual metadata (like filenames, linknames, user/group names) will appear damaged. Unfortunately, there is no way to autodetect the encoding of an archive. The pax format was designed to solve this problem. It stores non-ASCII metadata using the universal character encoding &lt;em&gt;UTF-8&lt;/em&gt;.</source>
          <target state="translated">tar形式はもともと、ファイルシステム情報の保存に主眼を置いてテープドライブにバックアップを作成するために考案されました。現在、tarアーカイブは、ファイルの配布やネットワークを介したアーカイブの交換に一般的に使用されています。元の形式（他のすべての形式の基礎となる）の1つの問題は、異なる文字エンコーディングをサポートするという概念がないことです。たとえば、&lt;em&gt;UTF-8&lt;/em&gt;システムで作成された通常のtarアーカイブは、&lt;em&gt;ASCII&lt;/em&gt;以外が含まれていると、&lt;em&gt;Latin-1&lt;/em&gt;システムで正しく読み取ることができません。&lt;em&gt;&lt;/em&gt;文字。テキストメタデータ（ファイル名、リンク名、ユーザー/グループ名など）が破損しているように見えます。残念ながら、アーカイブのエンコーディングを自動検出する方法はありません。paxフォーマットは、この問題を解決するために設計されました。ユニバーサル文字エンコーディング&lt;em&gt;UTF-8&lt;/em&gt;を使用して非ASCIIメタデータを保存します。</target>
        </trans-unit>
        <trans-unit id="613dcaffb8c0009159e594bde38781dfcc7c3d20" translate="yes" xml:space="preserve">
          <source>The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, &lt;em&gt;not&lt;/em&gt; the directory of the Path object.</source>
          <target state="translated">ターゲットパスは絶対パスでも相対パスでもかまいません。相対パスは、Pathオブジェクトのディレクトリでは&lt;em&gt;なく&lt;/em&gt;、現在の作業ディレクトリを基準にして解釈されます。</target>
        </trans-unit>
        <trans-unit id="39109a83b1e6877b05cef869c019b4e8c66ec92a" translate="yes" xml:space="preserve">
          <source>The task is executed in the loop returned by &lt;a href=&quot;asyncio-eventloop#asyncio.get_running_loop&quot;&gt;&lt;code&gt;get_running_loop()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised if there is no running loop in current thread.</source>
          <target state="translated">タスクは&lt;a href=&quot;asyncio-eventloop#asyncio.get_running_loop&quot;&gt; &lt;code&gt;get_running_loop()&lt;/code&gt; &lt;/a&gt;によって返されたループで実行され、現在のスレッドに実行中のループがない場合、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="6cd178d789e9c72b2db2b532b1e1730e28430479" translate="yes" xml:space="preserve">
          <source>The term &amp;lsquo;delegation to the parent&amp;rsquo; means that if a logger has a level of NOTSET, its chain of ancestor loggers is traversed until either an ancestor with a level other than NOTSET is found, or the root is reached.</source>
          <target state="translated">「親への委任」という用語は、ロガーのレベルがNOTSETの場合、その祖先ロガーのチェーンは、NOTSET以外のレベルの祖先が見つかるか、ルートに到達するまでトラバースされることを意味します。</target>
        </trans-unit>
        <trans-unit id="146eafd5f201d9458991952860d529510a852604" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;seconds since the epoch&lt;/em&gt; refers to the total number of elapsed seconds since the epoch, typically excluding &lt;a href=&quot;https://en.wikipedia.org/wiki/Leap_second&quot;&gt;leap seconds&lt;/a&gt;. Leap seconds are excluded from this total on all POSIX-compliant platforms.</source>
          <target state="translated">&lt;em&gt;エポックからの秒数&lt;/em&gt;という用語&lt;em&gt;は、エポックから&lt;/em&gt;の経過秒数の合計を指し、通常は&lt;a href=&quot;https://en.wikipedia.org/wiki/Leap_second&quot;&gt;うるう秒&lt;/a&gt;を除外しています。うるう秒は、すべてのPOSIX準拠プラットフォームでこの合計から除外されます。</target>
        </trans-unit>
        <trans-unit id="e94bbf67fcc1b6bd4b3967baa1ebc9ad25d9c0c5" translate="yes" xml:space="preserve">
          <source>The test code can more easily be separated from shipped code.</source>
          <target state="translated">テストコードと出荷コードをより簡単に分離することができます。</target>
        </trans-unit>
        <trans-unit id="de4938c1a0bc8d676536f4fba441042877342846" translate="yes" xml:space="preserve">
          <source>The test function should return a string describing the image type if the test succeeded, or &lt;code&gt;None&lt;/code&gt; if it failed.</source>
          <target state="translated">テスト関数は、テストが成功した場合はイメージタイプを説明する文字列を返し、失敗した場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="401d59c5ffb4d3b57f5880747f129772c3d55bd5" translate="yes" xml:space="preserve">
          <source>The test module can be run standalone from the command line.</source>
          <target state="translated">テストモジュールは、コマンドラインからスタンドアロンで実行することができます。</target>
        </trans-unit>
        <trans-unit id="060a6930386a9d1574b1aa1b3c3bc2d33784e7a8" translate="yes" xml:space="preserve">
          <source>The test passes if at least one message emitted inside the &lt;code&gt;with&lt;/code&gt; block matches the &lt;em&gt;logger&lt;/em&gt; and &lt;em&gt;level&lt;/em&gt; conditions, otherwise it fails.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; ブロック内で&lt;em&gt;発行&lt;/em&gt;された少なくとも1つのメッセージが&lt;em&gt;ロガー&lt;/em&gt;および&lt;em&gt;レベルの&lt;/em&gt;条件に一致する場合、テストは合格です。それ以外の場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="0c1c8392f06e470e9763ff342c0bf458700b10d0" translate="yes" xml:space="preserve">
          <source>The test runner&amp;rsquo;s display output can be controlled in two ways. First, an output function can be passed to &lt;code&gt;TestRunner.run()&lt;/code&gt;; this function will be called with strings that should be displayed. It defaults to &lt;code&gt;sys.stdout.write&lt;/code&gt;. If capturing the output is not sufficient, then the display output can be also customized by subclassing DocTestRunner, and overriding the methods &lt;a href=&quot;#doctest.DocTestRunner.report_start&quot;&gt;&lt;code&gt;report_start()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#doctest.DocTestRunner.report_success&quot;&gt;&lt;code&gt;report_success()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#doctest.DocTestRunner.report_unexpected_exception&quot;&gt;&lt;code&gt;report_unexpected_exception()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#doctest.DocTestRunner.report_failure&quot;&gt;&lt;code&gt;report_failure()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストランナーの表示出力は、2つの方法で制御できます。最初に、出力関数を &lt;code&gt;TestRunner.run()&lt;/code&gt; に渡すことができます。この関数は、表示されるはずの文字列で呼び出されます。デフォルトは &lt;code&gt;sys.stdout.write&lt;/code&gt; です。出力をキャプチャするだけでは不十分な場合は、DocTestRunnerをサブクラス化し、メソッド&lt;a href=&quot;#doctest.DocTestRunner.report_start&quot;&gt; &lt;code&gt;report_start()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#doctest.DocTestRunner.report_success&quot;&gt; &lt;code&gt;report_success()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#doctest.DocTestRunner.report_unexpected_exception&quot;&gt; &lt;code&gt;report_unexpected_exception()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#doctest.DocTestRunner.report_failure&quot;&gt; &lt;code&gt;report_failure()&lt;/code&gt; &lt;/a&gt;をオーバーライドして、表示出力をカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="fb4a3424a4f1dda3e01eea1f89d1c0f58bff9865" translate="yes" xml:space="preserve">
          <source>The testing code of a &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instance should be entirely self contained, such that it can be run either in isolation or in arbitrary combination with any number of other test cases.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;インスタンスのテストコードは完全に自己完結型である必要があり、単独で実行することも、他の任意の数のテストケースと任意に組み合わせて実行することもできます。</target>
        </trans-unit>
        <trans-unit id="4ae3f29483e2ee3ea0f7163c30937acfdb9d4b25" translate="yes" xml:space="preserve">
          <source>The testing suite should exercise all classes, functions, and constants. This includes not just the external API that is to be presented to the outside world but also &amp;ldquo;private&amp;rdquo; code.</source>
          <target state="translated">テストスイートは、すべてのクラス、関数、および定数を実行する必要があります。これには、外部に提示される外部APIだけでなく、「プライベート」コードも含まれます。</target>
        </trans-unit>
        <trans-unit id="daaa85794b2e5ea58362f9c215438cdd2e5ff243" translate="yes" xml:space="preserve">
          <source>The text and background colors for the context pane can be configured under the Highlights tab in the Configure IDLE dialog.</source>
          <target state="translated">コンテキスト ペインのテキストと背景色は、[IDLE の設定]ダイアログの [ハイライト]タブで設定できます。</target>
        </trans-unit>
        <trans-unit id="4008857746bcc56c1a0c2edaedf3abb5a9bbbdd4" translate="yes" xml:space="preserve">
          <source>The text buffer is discarded when the &lt;a href=&quot;#io.IOBase.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">&lt;a href=&quot;#io.IOBase.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されると、テキストバッファは破棄されます。</target>
        </trans-unit>
        <trans-unit id="be2ad191eeb4d0bbf960c378232847d949f175e9" translate="yes" xml:space="preserve">
          <source>The text categories are specified with regular expressions. The technique is to combine those into a single master regular expression and to loop over successive matches:</source>
          <target state="translated">テキストのカテゴリは正規表現で指定されます。そのテクニックは、それらを一つのマスター正規表現に結合し、連続したマッチをループさせることです。</target>
        </trans-unit>
        <trans-unit id="6d833b1a3893c5d6101423fd99ed50cd0a6703e5" translate="yes" xml:space="preserve">
          <source>The text stream API is described in detail in the documentation of &lt;a href=&quot;#io.TextIOBase&quot;&gt;&lt;code&gt;TextIOBase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テキストストリームAPIについては、&lt;a href=&quot;#io.TextIOBase&quot;&gt; &lt;code&gt;TextIOBase&lt;/code&gt; &lt;/a&gt;のドキュメントで詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="c6f2c2cd14f223c08b886437c2b9c2073b05f038" translate="yes" xml:space="preserve">
          <source>The text to display in the column heading.</source>
          <target state="translated">列の見出しに表示するテキスト。</target>
        </trans-unit>
        <trans-unit id="624bc91f26efa2f3c6b7ab6d643f9eaaecd49465" translate="yes" xml:space="preserve">
          <source>The text value of the attribute. This is a synonym for the &lt;code&gt;nodeValue&lt;/code&gt; attribute.</source>
          <target state="translated">属性のテキスト値。これは、 &lt;code&gt;nodeValue&lt;/code&gt; 属性の同義語です。</target>
        </trans-unit>
        <trans-unit id="b95c1297303c1f21bf34292066165290d2d2c55f" translate="yes" xml:space="preserve">
          <source>The text widget and scrollbar are packed together in a &lt;code&gt;Frame&lt;/code&gt;, and the methods of the &lt;code&gt;Grid&lt;/code&gt; and &lt;code&gt;Pack&lt;/code&gt; geometry managers are acquired from the &lt;code&gt;Frame&lt;/code&gt; object. This allows the &lt;a href=&quot;#tkinter.scrolledtext.ScrolledText&quot;&gt;&lt;code&gt;ScrolledText&lt;/code&gt;&lt;/a&gt; widget to be used directly to achieve most normal geometry management behavior.</source>
          <target state="translated">テキストウィジェットとスクロールバーは &lt;code&gt;Frame&lt;/code&gt; に一緒にパックされ、 &lt;code&gt;Grid&lt;/code&gt; および &lt;code&gt;Pack&lt;/code&gt; ジオメトリマネージャーのメソッドは &lt;code&gt;Frame&lt;/code&gt; オブジェクトから取得されます。これにより、&lt;a href=&quot;#tkinter.scrolledtext.ScrolledText&quot;&gt; &lt;code&gt;ScrolledText&lt;/code&gt; &lt;/a&gt;ウィジェットを直接使用して、ほとんどの通常のジオメトリ管理動作を実現できます。</target>
        </trans-unit>
        <trans-unit id="d1d2cdc643f2142769f11e3bf3f5f6639f0d087f" translate="yes" xml:space="preserve">
          <source>The text widget and scrollbar are packed together in a &lt;code&gt;Frame&lt;/code&gt;, and the methods of the &lt;code&gt;Grid&lt;/code&gt; and &lt;code&gt;Pack&lt;/code&gt; geometry managers are acquired from the &lt;code&gt;Frame&lt;/code&gt; object. This allows the &lt;code&gt;ScrolledText&lt;/code&gt; widget to be used directly to achieve most normal geometry management behavior.</source>
          <target state="translated">テキストウィジェットとスクロールバーは &lt;code&gt;Frame&lt;/code&gt; に一緒にパックされ、 &lt;code&gt;Grid&lt;/code&gt; および &lt;code&gt;Pack&lt;/code&gt; ジオメトリマネージャーのメソッドは &lt;code&gt;Frame&lt;/code&gt; オブジェクトから取得されます。これにより、 &lt;code&gt;ScrolledText&lt;/code&gt; ウィジェットを直接使用して、ほとんどの通常のジオメトリ管理動作を実現できます。</target>
        </trans-unit>
        <trans-unit id="781fd46cb32fb2d772f49135a740a4dd6122fbb5" translate="yes" xml:space="preserve">
          <source>The textual label to display for the item.</source>
          <target state="translated">アイテムに表示するテキストラベル。</target>
        </trans-unit>
        <trans-unit id="7e98aa474e18722e2a15841579721066227b8523" translate="yes" xml:space="preserve">
          <source>The third optional keyword argument is &lt;em&gt;extra&lt;/em&gt; which can be used to pass a dictionary which is used to populate the __dict__ of the LogRecord created for the logging event with user-defined attributes. These custom attributes can then be used as you like. For example, they could be incorporated into logged messages. For example:</source>
          <target state="translated">3番目のオプションのキーワード引数は&lt;em&gt;追加で&lt;/em&gt;あり、これを使用して、ユーザー定義の属性でロギングイベント用に作成されたLogRecordの__dict__を生成するために使用される辞書を渡すことができます。これらのカスタム属性は、必要に応じて使用できます。たとえば、ログに記録されたメッセージに組み込むことができます。例えば：</target>
        </trans-unit>
        <trans-unit id="665f31530d18339b9c188c1b9103b2b958ccad7e" translate="yes" xml:space="preserve">
          <source>The third optional keyword argument is &lt;em&gt;stacklevel&lt;/em&gt;, which defaults to &lt;code&gt;1&lt;/code&gt;. If greater than 1, the corresponding number of stack frames are skipped when computing the line number and function name set in the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; created for the logging event. This can be used in logging helpers so that the function name, filename and line number recorded are not the information for the helper function/method, but rather its caller. The name of this parameter mirrors the equivalent one in the &lt;a href=&quot;warnings#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">3番目のオプションのキーワード引数は&lt;em&gt;stacklevelで&lt;/em&gt;、デフォルトは &lt;code&gt;1&lt;/code&gt; です。1より大きい場合、ロギングイベント用に作成された&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; に&lt;/a&gt;設定された行番号と関数名を計算するときに、対応するスタックフレームの数はスキップされます。これはロギングヘルパーで使用できるため、記録された関数名、ファイル名、行番号はヘルパー関数/メソッドの情報ではなく、呼び出し元の情報になります。このパラメーターの名前は、&lt;a href=&quot;warnings#module-warnings&quot;&gt; &lt;code&gt;warnings&lt;/code&gt; &lt;/a&gt;モジュールの同等の名前を反映しています。</target>
        </trans-unit>
        <trans-unit id="8eb0c095fa10852ea09d13926b5914515b40f06b" translate="yes" xml:space="preserve">
          <source>The third-party &lt;a href=&quot;https://pypi.org/project/regex/&quot;&gt;regex&lt;/a&gt; module, which has an API compatible with the standard library &lt;a href=&quot;#module-re&quot;&gt;&lt;code&gt;re&lt;/code&gt;&lt;/a&gt; module, but offers additional functionality and a more thorough Unicode support.</source>
          <target state="translated">サードパーティの&lt;a href=&quot;https://pypi.org/project/regex/&quot;&gt;regex&lt;/a&gt;モジュール。これは、標準ライブラリ&lt;a href=&quot;#module-re&quot;&gt; &lt;code&gt;re&lt;/code&gt; &lt;/a&gt;モジュールと互換性のあるAPIを備えていますが、追加の機能とより完全なUnicodeサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="afb06b3287857cf9d40f49ddb415dd4aae4a33b0" translate="yes" xml:space="preserve">
          <source>The three methods that return the ratio of matching to total characters can give different results due to differing levels of approximation, although &lt;code&gt;quick_ratio()&lt;/code&gt; and &lt;code&gt;real_quick_ratio()&lt;/code&gt; are always at least as large as &lt;code&gt;ratio()&lt;/code&gt;:</source>
          <target state="translated">総文字数に対するマッチングの比率を返す3つのメソッドは、近似のレベルが異なるため、異なる結果をもたらす可能性がありますが、 &lt;code&gt;quick_ratio()&lt;/code&gt; および &lt;code&gt;real_quick_ratio()&lt;/code&gt; は常に少なくとも &lt;code&gt;ratio()&lt;/code&gt; と同じ大きさです。</target>
        </trans-unit>
        <trans-unit id="702f3b2e21f5e77bbf53b54dae40e50493de58c9" translate="yes" xml:space="preserve">
          <source>The time and date of the last modification to the archive member. This is a tuple of six values:</source>
          <target state="translated">アーカイブ・メンバーへの最後の変更が行われた日時。これは6つの値のタプルです。</target>
        </trans-unit>
        <trans-unit id="973cda5cc6748314dfb6fc94d1ded91647c97ce5" translate="yes" xml:space="preserve">
          <source>The time is an absolute timestamp, using the same time reference as &lt;a href=&quot;#asyncio.loop.time&quot;&gt;&lt;code&gt;loop.time()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">時間は、&lt;a href=&quot;#asyncio.loop.time&quot;&gt; &lt;code&gt;loop.time()&lt;/code&gt; &lt;/a&gt;と同じ時間参照を使用する絶対タイムスタンプです。</target>
        </trans-unit>
        <trans-unit id="a0676e756a3ab92c3f906666f0e732cf57a4078c" translate="yes" xml:space="preserve">
          <source>The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.</source>
          <target state="translated">リアルタイムスケジューリングの下で、プロセスがブロッキングsyscallを行わずに過ごすことができるCPU時間の制限時間(マイクロ秒単位)。</target>
        </trans-unit>
        <trans-unit id="f49b9982b8903d085f6ab35fedbabd6bf7292265" translate="yes" xml:space="preserve">
          <source>The time taken by this routine is proportional to &lt;code&gt;len(fragment)&lt;/code&gt;.</source>
          <target state="translated">このルーチンにかかる時間は &lt;code&gt;len(fragment)&lt;/code&gt; に比例します。</target>
        </trans-unit>
        <trans-unit id="f9aa5984100afffa888154716c5fc64965cd814c" translate="yes" xml:space="preserve">
          <source>The time value as returned by &lt;a href=&quot;#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt;, and accepted by &lt;a href=&quot;#time.asctime&quot;&gt;&lt;code&gt;asctime()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.mktime&quot;&gt;&lt;code&gt;mktime()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt;, is a sequence of 9 integers. The return values of &lt;a href=&quot;#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; also offer attribute names for individual fields.</source>
          <target state="translated">&lt;a href=&quot;#time.gmtime&quot;&gt; &lt;code&gt;gmtime()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt;によって&lt;a href=&quot;#time.asctime&quot;&gt; &lt;code&gt;asctime()&lt;/code&gt; &lt;/a&gt;れ、asctime（）、&lt;a href=&quot;#time.mktime&quot;&gt; &lt;code&gt;mktime()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt;によって受け入れられる時間値は、9つの整数のシーケンスです。&lt;a href=&quot;#time.gmtime&quot;&gt; &lt;code&gt;gmtime()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt;の戻り値は、個々のフィールドの属性名も提供します。</target>
        </trans-unit>
        <trans-unit id="144ea8db2e1df67dd3e6bba4613f86171460dbd9" translate="yes" xml:space="preserve">
          <source>The timeout is long enough to prevent test failure: it takes into account that the client and the server can run in different threads or even different processes.</source>
          <target state="translated">タイムアウトはテストの失敗を防ぐのに十分な長さです。クライアントとサーバが異なるスレッドや異なるプロセスで動作することを考慮しています。</target>
        </trans-unit>
        <trans-unit id="ec99df5e279a279e7cacd8a5f4eb9d1cd8f983fa" translate="yes" xml:space="preserve">
          <source>The timeout is short enough to prevent a test to wait for too long if the Internet request is blocked for whatever reason.</source>
          <target state="translated">タイムアウトは、インターネットのリクエストが何らかの理由でブロックされた場合に、テストが長すぎて待たされることを防ぐために十分に短いです。</target>
        </trans-unit>
        <trans-unit id="fa7943289bae9e7d567106c49f45467d0b1f6837" translate="yes" xml:space="preserve">
          <source>The timeout should be long enough for &lt;a href=&quot;socket#socket.socket.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;socket#socket.socket.recv&quot;&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;socket#socket.socket.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; methods of &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket.socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タイムアウトは、&lt;a href=&quot;socket#socket.socket&quot;&gt; &lt;code&gt;socket.socket&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;socket#socket.socket.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;socket#socket.socket.recv&quot;&gt; &lt;code&gt;recv()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;socket#socket.socket.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt;メソッドに十分な長さである必要があります。</target>
        </trans-unit>
        <trans-unit id="ab441716da6934485838efd0cc96e45a465e34ee" translate="yes" xml:space="preserve">
          <source>The timeout value depends on the regrtest &lt;code&gt;--timeout&lt;/code&gt; command line option.</source>
          <target state="translated">タイムアウト値はregrtestに依存 &lt;code&gt;--timeout&lt;/code&gt; コマンドラインオプション。</target>
        </trans-unit>
        <trans-unit id="383501791bf73fad29eacbd1434a825d90dcda3d" translate="yes" xml:space="preserve">
          <source>The title bar contains the name of the file, the full path, and the version of Python and IDLE running the window. The status bar contains the line number (&amp;lsquo;Ln&amp;rsquo;) and column number (&amp;lsquo;Col&amp;rsquo;). Line numbers start with 1; column numbers with 0.</source>
          <target state="translated">タイトルバーには、ファイルの名前、絶対パス、ウィンドウを実行しているPythonとIDLEのバージョンが含まれています。ステータスバーには、行番号（ 'Ln'）と列番号（ 'Col'）が含まれています。行番号は1から始まります。0の列番号。</target>
        </trans-unit>
        <trans-unit id="eb0ed541e548fb76d9c95f3b320418110775e844" translate="yes" xml:space="preserve">
          <source>The token buffer. It may be useful to examine this when catching exceptions.</source>
          <target state="translated">トークンバッファです。例外をキャッチする際に調べると便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="af5684156d0632efbb688be764db6d9de4886083" translate="yes" xml:space="preserve">
          <source>The token constants are:</source>
          <target state="translated">トークン定数は</target>
        </trans-unit>
        <trans-unit id="6369db38b3c0c1619322ec307a8d31c67ea8b3e6" translate="yes" xml:space="preserve">
          <source>The token is an opaque object (that supports equality testing) identifying the current version of the abstract base class cache for virtual subclasses. The token changes with every call to &lt;a href=&quot;#abc.ABCMeta.register&quot;&gt;&lt;code&gt;ABCMeta.register()&lt;/code&gt;&lt;/a&gt; on any ABC.</source>
          <target state="translated">トークンは、仮想サブクラスの抽象基本クラスキャッシュの現在のバージョンを識別する（等価テストをサポートする）不透明なオブジェクトです。トークンは、ABCで&lt;a href=&quot;#abc.ABCMeta.register&quot;&gt; &lt;code&gt;ABCMeta.register()&lt;/code&gt; &lt;/a&gt;を呼び出すたびに変化します。</target>
        </trans-unit>
        <trans-unit id="39df4a005bd76c17fb119282afd8e40603dd44b7" translate="yes" xml:space="preserve">
          <source>The tokenizer produces the following output:</source>
          <target state="translated">トークナイザーは以下の出力を生成します。</target>
        </trans-unit>
        <trans-unit id="2e1221339de21aeb616c4d21ccf9328f0f362ac4" translate="yes" xml:space="preserve">
          <source>The total number (&lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;) of expected bytes.</source>
          <target state="translated">予想されるバイトの総数（&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="43f447355b23a2390fda8e4efbaeb61ee2a32abe" translate="yes" xml:space="preserve">
          <source>The total number of addresses in the network.</source>
          <target state="translated">ネットワーク内のアドレスの総数。</target>
        </trans-unit>
        <trans-unit id="533c0b6ab55091223e2fa983b0fc2fb594c66022" translate="yes" xml:space="preserve">
          <source>The total number of bits in the address representation for this version: &lt;code&gt;32&lt;/code&gt; for IPv4, &lt;code&gt;128&lt;/code&gt; for IPv6.</source>
          <target state="translated">このバージョンのアドレス表現の合計ビット数：IPv4の場合は &lt;code&gt;32&lt;/code&gt; 、IPv6の場合は &lt;code&gt;128&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fa2435ac265900a21416de414ab6af83ae21237" translate="yes" xml:space="preserve">
          <source>The total number of tests run so far.</source>
          <target state="translated">これまでに実行されたテストの総数。</target>
        </trans-unit>
        <trans-unit id="e85ca4d6aa52bdeda7f809afceddc2f2528db8a5" translate="yes" xml:space="preserve">
          <source>The total number of to be consumed bytes.</source>
          <target state="translated">消費されるバイト数の合計。</target>
        </trans-unit>
        <trans-unit id="ffa71222143917a1eb6464750e264a1c1dc0389a" translate="yes" xml:space="preserve">
          <source>The trace function is invoked (with &lt;em&gt;event&lt;/em&gt; set to &lt;code&gt;'call'&lt;/code&gt;) whenever a new local scope is entered; it should return a reference to a local trace function to be used for the new scope, or &lt;code&gt;None&lt;/code&gt; if the scope shouldn&amp;rsquo;t be traced.</source>
          <target state="translated">trace関数は、新しいローカルスコープに入るたびに（&lt;em&gt;イベント&lt;/em&gt;が &lt;code&gt;'call'&lt;/code&gt; に設定されて）呼び出されます。新しいスコープに使用するローカルトレース関数への参照を返すか、スコープをトレースしない場合は &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b0276db0e37cffd313334d18dfb0ebfdd11f2c19" translate="yes" xml:space="preserve">
          <source>The traceback header is followed by an optional traceback stack, whose contents are ignored by doctest. The traceback stack is typically omitted, or copied verbatim from an interactive session.</source>
          <target state="translated">トレースバックヘッダの後には、オプションのトレースバックスタックが続き、その内容は doctest によって無視されます。トレースバックスタックは通常、省略されるか、対話型セッションから逐語的にコピーされます。</target>
        </trans-unit>
        <trans-unit id="2d935d9b67ec8b6f96388a84f36cbe32492b44c2" translate="yes" xml:space="preserve">
          <source>The traceback stack is followed by the most interesting part: the line(s) containing the exception type and detail. This is usually the last line of a traceback, but can extend across multiple lines if the exception has a multi-line detail:</source>
          <target state="translated">トレースバックスタックの後には、最も興味深い部分である例外の種類と詳細を含む行が続きます。これは通常トレースバックの最後の行ですが、例外の詳細が複数行に渡る場合は複数行に渡ることもあります。</target>
        </trans-unit>
        <trans-unit id="16b1db494b134e9c8220a976eba1115a13e23b7c" translate="yes" xml:space="preserve">
          <source>The tracemalloc module is a debug tool to trace memory blocks allocated by Python. It provides the following information:</source>
          <target state="translated">tracemallocモジュールは、Pythonによって割り当てられたメモリブロックをトレースするためのデバッグツールです。以下の情報を提供します。</target>
        </trans-unit>
        <trans-unit id="31a9ce8a876ac0217c1463774c12a24481761b30" translate="yes" xml:space="preserve">
          <source>The traditional method with a 2 character salt and 13 characters of hash. This is the weakest method.</source>
          <target state="translated">2文字のソルトと13文字のハッシュを使った伝統的な方法です。これが一番弱い方法です。</target>
        </trans-unit>
        <trans-unit id="16acab894e31876506303b91db879f68d418dbb4" translate="yes" xml:space="preserve">
          <source>The transport classes are &lt;a href=&quot;asyncio-dev#asyncio-multithreading&quot;&gt;not thread safe&lt;/a&gt;.</source>
          <target state="translated">トランスポートクラスは&lt;a href=&quot;asyncio-dev#asyncio-multithreading&quot;&gt;スレッドセーフで&lt;/a&gt;はありません。</target>
        </trans-unit>
        <trans-unit id="a1d4addb81580c66d88e12e490015db638f34f42" translate="yes" xml:space="preserve">
          <source>The tree area.</source>
          <target state="translated">木の部分。</target>
        </trans-unit>
        <trans-unit id="63c5e92c4fd607dfc132dae25b1bde5801ce3c8a" translate="yes" xml:space="preserve">
          <source>The tree column has ID #0.</source>
          <target state="translated">ツリーの列にはID #0があります。</target>
        </trans-unit>
        <trans-unit id="a7f4322c232ab22c451a4f904178e963f0c2b60b" translate="yes" xml:space="preserve">
          <source>The true value of the &lt;a href=&quot;functions#bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt; type. Assignments to &lt;code&gt;True&lt;/code&gt; are illegal and raise a &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions#bool&quot;&gt; &lt;code&gt;bool&lt;/code&gt; &lt;/a&gt;型の真の値。 &lt;code&gt;True&lt;/code&gt; への代入は違法であり、&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; を送出し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f1385bf813f5ebaee50787de55cade7aa2ad93e9" translate="yes" xml:space="preserve">
          <source>The tuple of arguments given to the exception constructor. Some built-in exceptions (like &lt;a href=&quot;#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;) expect a certain number of arguments and assign a special meaning to the elements of this tuple, while others are usually called only with a single string giving an error message.</source>
          <target state="translated">例外コンストラクターに渡される引数のタプル。一部の組み込み例外（&lt;a href=&quot;#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; など&lt;/a&gt;）は、特定の数の引数を予期し、このタプルの要素に特別な意味を割り当てますが、他の例外は通常、エラーメッセージを示す単一の文字列でのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="539f38dbbfed03502ac81a27a897e9fba44d57ad" translate="yes" xml:space="preserve">
          <source>The tuple of arguments merged into &lt;code&gt;msg&lt;/code&gt; to produce &lt;code&gt;message&lt;/code&gt;, or a dict whose values are used for the merge (when there is only one argument, and it is a dictionary).</source>
          <target state="translated">引数のタプルは &lt;code&gt;msg&lt;/code&gt; にマージされて &lt;code&gt;message&lt;/code&gt; 、またはマージに値が使用されるdict を生成します（引数が1つしかなく、それが辞書である場合）。</target>
        </trans-unit>
        <trans-unit id="a56707db067b73f69f1d7eabd20ac87c56e218eb" translate="yes" xml:space="preserve">
          <source>The tuple of base classes of a class object.</source>
          <target state="translated">クラスオブジェクトの基底クラスのタプル。</target>
        </trans-unit>
        <trans-unit id="39d9df05b4cf019ab0db7e17a8ec1ef2c24c1ad6" translate="yes" xml:space="preserve">
          <source>The turtle module provides turtle graphics primitives, in both object-oriented and procedure-oriented ways. Because it uses &lt;a href=&quot;tkinter#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; for the underlying graphics, it needs a version of Python installed with Tk support.</source>
          <target state="translated">turtleモジュールは、オブジェクト指向とプロシージャ指向の両方の方法で、タートルグラフィックプリミティブを提供します。基盤となるグラフィックに&lt;a href=&quot;tkinter#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;を使用しているため、TkサポートとともにインストールされたバージョンのPythonが必要です。</target>
        </trans-unit>
        <trans-unit id="a905845d53cd321a94fdd9df15627053d06b84e2" translate="yes" xml:space="preserve">
          <source>The two connection objects returned by &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt;&lt;code&gt;Pipe()&lt;/code&gt;&lt;/a&gt; represent the two ends of the pipe. Each connection object has &lt;code&gt;send()&lt;/code&gt; and &lt;code&gt;recv()&lt;/code&gt; methods (among others). Note that data in a pipe may become corrupted if two processes (or threads) try to read from or write to the &lt;em&gt;same&lt;/em&gt; end of the pipe at the same time. Of course there is no risk of corruption from processes using different ends of the pipe at the same time.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.Pipe&quot;&gt; &lt;code&gt;Pipe()&lt;/code&gt; &lt;/a&gt;によって返される2つの接続オブジェクトは、パイプの両端を表します。各接続オブジェクトが有する &lt;code&gt;send()&lt;/code&gt; および &lt;code&gt;recv()&lt;/code&gt; （とりわけ）の方法。2つのプロセス（またはスレッド）がパイプの&lt;em&gt;同じ&lt;/em&gt;端から&lt;em&gt;同時に&lt;/em&gt;読み取りまたは書き込みを試みると、パイプ内のデータが破損する可能性があることに注意してください。もちろん、パイプの異なる端を同時に使用するプロセスによる破損のリスクはありません。</target>
        </trans-unit>
        <trans-unit id="33638c8f9ee12ee7ff74956b792e2571ed375108" translate="yes" xml:space="preserve">
          <source>The two equality methods, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ne__&quot;&gt;&lt;code&gt;__ne__()&lt;/code&gt;&lt;/a&gt;, are special. They do the default equality comparison on identity, using the &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; attribute, unless you change their return value to return something else:</source>
          <target state="translated">2つの等価メソッド&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ne__&quot;&gt; &lt;code&gt;__ne__()&lt;/code&gt; &lt;/a&gt;は特別です。他の値を返すように戻り値を変更しない限り、&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;属性を使用して、IDのデフォルトの等価比較を行います。</target>
        </trans-unit>
        <trans-unit id="a0872f8b41c8731e6a21444642be7996b3a7fda9" translate="yes" xml:space="preserve">
          <source>The two equality methods, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ne__&quot;&gt;&lt;code&gt;__ne__()&lt;/code&gt;&lt;/a&gt;, are special. They do the default equality comparison on identity, using the &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; attribute, unless you change their return value to return something else:</source>
          <target state="translated">2つの等式メソッド&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ne__&quot;&gt; &lt;code&gt;__ne__()&lt;/code&gt; &lt;/a&gt;は特別です。戻り値を変更して別のものを返す場合を除いて、&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;属性を使用して、IDに対してデフォルトの等価比較を実行します。</target>
        </trans-unit>
        <trans-unit id="272ded31de2db6b1c275e8c03cf46f61287b0fca" translate="yes" xml:space="preserve">
          <source>The two following opening hooks are provided by this module:</source>
          <target state="translated">このモジュールでは、以下の2つのオープニングフックが提供されています。</target>
        </trans-unit>
        <trans-unit id="aead13a3bf658785dba6c96c3877cce7bfdcf9ab" translate="yes" xml:space="preserve">
          <source>The type &lt;code&gt;DOMString&lt;/code&gt; maps to Python strings. &lt;a href=&quot;#module-xml.dom.minidom&quot;&gt;&lt;code&gt;xml.dom.minidom&lt;/code&gt;&lt;/a&gt; supports either bytes or strings, but will normally produce strings. Values of type &lt;code&gt;DOMString&lt;/code&gt; may also be &lt;code&gt;None&lt;/code&gt; where allowed to have the IDL &lt;code&gt;null&lt;/code&gt; value by the DOM specification from the W3C.</source>
          <target state="translated">&lt;code&gt;DOMString&lt;/code&gt; 型はPython文字列にマップされます。&lt;a href=&quot;#module-xml.dom.minidom&quot;&gt; &lt;code&gt;xml.dom.minidom&lt;/code&gt; &lt;/a&gt;はバイトまたは文字列をサポートしますが、通常は文字列を生成します。 &lt;code&gt;DOMString&lt;/code&gt; 型の値は、W3CからのDOM仕様によってIDL &lt;code&gt;null&lt;/code&gt; 値を許可されている場合は &lt;code&gt;None&lt;/code&gt; になることもあります。</target>
        </trans-unit>
        <trans-unit id="c595e9e60344120fd8650e635fb09cc7f554fb8e" translate="yes" xml:space="preserve">
          <source>The type for cell objects: such objects are used as containers for a function&amp;rsquo;s free variables.</source>
          <target state="translated">セルオブジェクトのタイプ：このようなオブジェクトは、関数の自由変数のコンテナーとして使用されます。</target>
        </trans-unit>
        <trans-unit id="71d15bb94ba8cba5ce52cb311ed2945413c1e6a5" translate="yes" xml:space="preserve">
          <source>The type for code objects such as returned by &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;によって返されるようなコードオブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="92c00f883941b35d8d88ec760276dd05ae566ab3" translate="yes" xml:space="preserve">
          <source>The type info for introspection can be accessed via &lt;code&gt;Point2D.__annotations__&lt;/code&gt; and &lt;code&gt;Point2D.__total__&lt;/code&gt;. To allow using this feature with older versions of Python that do not support &lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;TypedDict&lt;/code&gt; supports two additional equivalent syntactic forms:</source>
          <target state="translated">イントロスペクションのタイプ情報には、 &lt;code&gt;Point2D.__annotations__&lt;/code&gt; および &lt;code&gt;Point2D.__total__&lt;/code&gt; 介してアクセスできます。&lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 526を&lt;/strong&gt;&lt;/a&gt;サポートしない古いバージョンのPythonでこの機能を使用できるようにするために、 &lt;code&gt;TypedDict&lt;/code&gt; は2つの追加の同等の構文形式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="6883894e6bd2bb4b3e1642682cba68f7b9cb4b42" translate="yes" xml:space="preserve">
          <source>The type info for introspection can be accessed via &lt;code&gt;Point2D.__annotations__&lt;/code&gt; and &lt;code&gt;Point2D.__total__&lt;/code&gt;. To allow using this feature with older versions of Python that do not support &lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;TypedDict&lt;/code&gt; supports two additional equivalent syntactic forms:</source>
          <target state="translated">イントロスペクションのタイプ情報には、 &lt;code&gt;Point2D.__annotations__&lt;/code&gt; および &lt;code&gt;Point2D.__total__&lt;/code&gt; 介してアクセスできます。&lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;PEP 526を&lt;/strong&gt;&lt;/a&gt;サポートしない古いバージョンのPythonでこの機能を使用できるようにするために、 &lt;code&gt;TypedDict&lt;/code&gt; は2つの同等の構文形式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="bd18bd83b257d2f4e8efd82d8c82ff0e7639a2fe" translate="yes" xml:space="preserve">
          <source>The type is roughly equivalent to the following code:</source>
          <target state="translated">型は大体次のようなコードに相当します。</target>
        </trans-unit>
        <trans-unit id="207228c87acec3636f2d576ab4dc507cd348293d" translate="yes" xml:space="preserve">
          <source>The type object for proxies of callable objects.</source>
          <target state="translated">呼び出し可能なオブジェクトのプロキシ用の型オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="e2b65c714818fb9af6dfc2060e17b6ec9e44a466" translate="yes" xml:space="preserve">
          <source>The type object for proxies of objects which are not callable.</source>
          <target state="translated">呼び出し可能ではないオブジェクトのプロキシ用の型オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="2f87adab9b428d0dbbf82d7c97420fce2530fdb4" translate="yes" xml:space="preserve">
          <source>The type object for weak references objects.</source>
          <target state="translated">弱い参照オブジェクトの型オブジェクト。</target>
        </trans-unit>
        <trans-unit id="aa5558fddf17c823ad3cef9043343cc8848a5e60" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-generator&quot;&gt;asynchronous generator&lt;/a&gt;-iterator objects, created by asynchronous generator functions.</source>
          <target state="translated">種類&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-generator&quot;&gt;非同期発電機&lt;/a&gt;の非同期発電機能によって作成されたオブジェクト-iterator、。</target>
        </trans-unit>
        <trans-unit id="fb3f39049fd95688f70b6d2f5803012a23c782f4" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt; objects, created by &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt; &lt;code&gt;async def&lt;/code&gt; &lt;/a&gt;関数によって作成された&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;コルーチン&lt;/a&gt;オブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="c085b6d1256e66aba3e73f22eb8afbb70e8ef9d0" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; returned by the &lt;a href=&quot;#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function depends on the mode. When &lt;a href=&quot;#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; is used to open a file in a text mode (&lt;code&gt;'w'&lt;/code&gt;, &lt;code&gt;'r'&lt;/code&gt;, &lt;code&gt;'wt'&lt;/code&gt;, &lt;code&gt;'rt'&lt;/code&gt;, etc.), it returns a subclass of &lt;a href=&quot;io#io.TextIOBase&quot;&gt;&lt;code&gt;io.TextIOBase&lt;/code&gt;&lt;/a&gt; (specifically &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt;). When used to open a file in a binary mode with buffering, the returned class is a subclass of &lt;a href=&quot;io#io.BufferedIOBase&quot;&gt;&lt;code&gt;io.BufferedIOBase&lt;/code&gt;&lt;/a&gt;. The exact class varies: in read binary mode, it returns an &lt;a href=&quot;io#io.BufferedReader&quot;&gt;&lt;code&gt;io.BufferedReader&lt;/code&gt;&lt;/a&gt;; in write binary and append binary modes, it returns an &lt;a href=&quot;io#io.BufferedWriter&quot;&gt;&lt;code&gt;io.BufferedWriter&lt;/code&gt;&lt;/a&gt;, and in read/write mode, it returns an &lt;a href=&quot;io#io.BufferedRandom&quot;&gt;&lt;code&gt;io.BufferedRandom&lt;/code&gt;&lt;/a&gt;. When buffering is disabled, the raw stream, a subclass of &lt;a href=&quot;io#io.RawIOBase&quot;&gt;&lt;code&gt;io.RawIOBase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#io.FileIO&quot;&gt;&lt;code&gt;io.FileIO&lt;/code&gt;&lt;/a&gt;, is returned.</source>
          <target state="translated">&lt;a href=&quot;#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;関数によって返される&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;のタイプは、モードによって異なります。場合&lt;a href=&quot;#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;テキストモードでファイルを開くために使用されている（ &lt;code&gt;'w'&lt;/code&gt; 、 &lt;code&gt;'r'&lt;/code&gt; 、 &lt;code&gt;'wt'&lt;/code&gt; 、 &lt;code&gt;'rt'&lt;/code&gt; 、等）、それのサブクラスを返し&lt;a href=&quot;io#io.TextIOBase&quot;&gt; &lt;code&gt;io.TextIOBase&lt;/code&gt; &lt;/a&gt;（具体&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; を&lt;/a&gt;）。バッファリング付きのバイナリモードでファイルを開くために使用される場合、返されるクラスは&lt;a href=&quot;io#io.BufferedIOBase&quot;&gt; &lt;code&gt;io.BufferedIOBase&lt;/code&gt; の&lt;/a&gt;サブクラスです。正確なクラスは異なります。バイナリ読み取りモードでは、&lt;a href=&quot;io#io.BufferedReader&quot;&gt; &lt;code&gt;io.BufferedReader&lt;/code&gt; を&lt;/a&gt;返します。バイナリ書き込みモードとバイナリ追加モードでは、&lt;a href=&quot;io#io.BufferedWriter&quot;&gt; &lt;code&gt;io.BufferedWriter&lt;/code&gt; を&lt;/a&gt;返し、読み取り/書き込みモードでは、&lt;a href=&quot;io#io.BufferedRandom&quot;&gt; &lt;code&gt;io.BufferedRandom&lt;/code&gt; &lt;/a&gt;。バッファリングを無効にすると、生のストリームは、サブクラスの&lt;a href=&quot;io#io.RawIOBase&quot;&gt; &lt;code&gt;io.RawIOBase&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;io#io.FileIO&quot;&gt; &lt;code&gt;io.FileIO&lt;/code&gt; は&lt;/a&gt;、返されます。</target>
        </trans-unit>
        <trans-unit id="9137c1f6ce5bd7c384224288ce23eb4e33c57845" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;-iterator objects, created by generator functions.</source>
          <target state="translated">タイプの&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;発電機&lt;/a&gt;発電機機能によって作成されたオブジェクト-iterator、。</target>
        </trans-unit>
        <trans-unit id="51c3737cac091c710a9cdbbb1a2fd03113a51fe7" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module&quot;&gt;modules&lt;/a&gt;. Constructor takes the name of the module to be created and optionally its &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-docstring&quot;&gt;docstring&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module&quot;&gt;モジュール&lt;/a&gt;のタイプ。コンストラクターは、作成するモジュールの名前と、オプションでその&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-docstring&quot;&gt;docstringを&lt;/a&gt;取ります。</target>
        </trans-unit>
        <trans-unit id="291d37e4c9887ae702120f0529a3e97ebb306fbd" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-generator&quot;&gt;asynchronous generator&lt;/a&gt;-iterator objects, created by asynchronous generator functions.</source>
          <target state="translated">種類&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-generator&quot;&gt;非同期発電機&lt;/a&gt;の非同期発電機能によって作成されたオブジェクト-iterator、。</target>
        </trans-unit>
        <trans-unit id="20b5b7b182a49432d464ffdc625a8f750463126a" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt; objects, created by &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">種類&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-coroutine&quot;&gt;コルーチン&lt;/a&gt;によって作成されたオブジェクト、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-def&quot;&gt; &lt;code&gt;async def&lt;/code&gt; &lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="0962ea0fff94bd2389dc9ecff0d9c99235c182c1" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; returned by the &lt;a href=&quot;#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function depends on the mode. When &lt;a href=&quot;#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; is used to open a file in a text mode (&lt;code&gt;'w'&lt;/code&gt;, &lt;code&gt;'r'&lt;/code&gt;, &lt;code&gt;'wt'&lt;/code&gt;, &lt;code&gt;'rt'&lt;/code&gt;, etc.), it returns a subclass of &lt;a href=&quot;io#io.TextIOBase&quot;&gt;&lt;code&gt;io.TextIOBase&lt;/code&gt;&lt;/a&gt; (specifically &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt;). When used to open a file in a binary mode with buffering, the returned class is a subclass of &lt;a href=&quot;io#io.BufferedIOBase&quot;&gt;&lt;code&gt;io.BufferedIOBase&lt;/code&gt;&lt;/a&gt;. The exact class varies: in read binary mode, it returns an &lt;a href=&quot;io#io.BufferedReader&quot;&gt;&lt;code&gt;io.BufferedReader&lt;/code&gt;&lt;/a&gt;; in write binary and append binary modes, it returns an &lt;a href=&quot;io#io.BufferedWriter&quot;&gt;&lt;code&gt;io.BufferedWriter&lt;/code&gt;&lt;/a&gt;, and in read/write mode, it returns an &lt;a href=&quot;io#io.BufferedRandom&quot;&gt;&lt;code&gt;io.BufferedRandom&lt;/code&gt;&lt;/a&gt;. When buffering is disabled, the raw stream, a subclass of &lt;a href=&quot;io#io.RawIOBase&quot;&gt;&lt;code&gt;io.RawIOBase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#io.FileIO&quot;&gt;&lt;code&gt;io.FileIO&lt;/code&gt;&lt;/a&gt;, is returned.</source>
          <target state="translated">&lt;a href=&quot;#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;関数によって返される&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;のタイプは、モードによって異なります。場合&lt;a href=&quot;#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;テキストモードでファイルを開くために使用されている（ &lt;code&gt;'w'&lt;/code&gt; 、 &lt;code&gt;'r'&lt;/code&gt; 、 &lt;code&gt;'wt'&lt;/code&gt; 、 &lt;code&gt;'rt'&lt;/code&gt; 、等）、それのサブクラスを返し&lt;a href=&quot;io#io.TextIOBase&quot;&gt; &lt;code&gt;io.TextIOBase&lt;/code&gt; &lt;/a&gt;（具体&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; を&lt;/a&gt;）。バッファリングを使用してバイナリモードでファイルを開くために使用される場合、返されるクラスは&lt;a href=&quot;io#io.BufferedIOBase&quot;&gt; &lt;code&gt;io.BufferedIOBase&lt;/code&gt; の&lt;/a&gt;サブクラスです。正確なクラスは異なります。読み取りバイナリモードでは、&lt;a href=&quot;io#io.BufferedReader&quot;&gt; &lt;code&gt;io.BufferedReader&lt;/code&gt; を&lt;/a&gt;返します。書き込みバイナリモードと追加バイナリモードでは、&lt;a href=&quot;io#io.BufferedWriter&quot;&gt; &lt;code&gt;io.BufferedWriter&lt;/code&gt; を&lt;/a&gt;返し、読み取り/書き込みモードでは、&lt;a href=&quot;io#io.BufferedRandom&quot;&gt; &lt;code&gt;io.BufferedRandom&lt;/code&gt; &lt;/a&gt;。バッファリングを無効にすると、生のストリームは、サブクラスの&lt;a href=&quot;io#io.RawIOBase&quot;&gt; &lt;code&gt;io.RawIOBase&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;io#io.FileIO&quot;&gt; &lt;code&gt;io.FileIO&lt;/code&gt; は&lt;/a&gt;、返されます。</target>
        </trans-unit>
        <trans-unit id="f02c8a5211cfd9d6991973dae5c80b19e6a1c2d8" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;-iterator objects, created by generator functions.</source>
          <target state="translated">タイプの&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;発電機&lt;/a&gt;発電機機能によって作成されたオブジェクト-iterator、。</target>
        </trans-unit>
        <trans-unit id="ce115de470364ff83b5336167e2e5b10f9e8447a" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module&quot;&gt;modules&lt;/a&gt;. Constructor takes the name of the module to be created and optionally its &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-docstring&quot;&gt;docstring&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module&quot;&gt;モジュール&lt;/a&gt;のタイプ。コンストラクターは、作成するモジュールの名前と、オプションでその&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-docstring&quot;&gt;docstringを&lt;/a&gt;取ります。</target>
        </trans-unit>
        <trans-unit id="80ad83c0160d0aa864e6656bf7e1de1027e52421" translate="yes" xml:space="preserve">
          <source>The type of &lt;a href=&quot;stdtypes#types-genericalias&quot;&gt;parameterized generics&lt;/a&gt; such as &lt;code&gt;list[int]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list[int]&lt;/code&gt; などの&lt;a href=&quot;stdtypes#types-genericalias&quot;&gt;パラメーター化されたジェネリック&lt;/a&gt;のタイプ。</target>
        </trans-unit>
        <trans-unit id="851dfab6c777918e2e97801375bfa3600e1be478" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;self.request&lt;/code&gt; is different for datagram or stream services. For stream services, &lt;code&gt;self.request&lt;/code&gt; is a socket object; for datagram services, &lt;code&gt;self.request&lt;/code&gt; is a pair of string and socket.</source>
          <target state="translated">&lt;code&gt;self.request&lt;/code&gt; のタイプは、データグラムまたはストリームサービスによって異なります。ストリームサービスの場合、 &lt;code&gt;self.request&lt;/code&gt; はソケットオブジェクトです。データグラムサービスの場合、 &lt;code&gt;self.request&lt;/code&gt; は文字列とソケットのペアです。</target>
        </trans-unit>
        <trans-unit id="39ace067e7b8a07177cd07450cb98fd890c32fb2" translate="yes" xml:space="preserve">
          <source>The type of &lt;em&gt;bound&lt;/em&gt; methods of some built-in data types and base classes. For example it is the type of &lt;code&gt;object().__str__&lt;/code&gt;.</source>
          <target state="translated">一部の組み込みデータ型および基本クラスの&lt;em&gt;バインドされた&lt;/em&gt;メソッドのタイプ。たとえば、 &lt;code&gt;object().__str__&lt;/code&gt; のタイプです。</target>
        </trans-unit>
        <trans-unit id="054ec7ace9d8f1f81933bf82d68367c2b78aad15" translate="yes" xml:space="preserve">
          <source>The type of &lt;em&gt;unbound&lt;/em&gt; class methods of some built-in data types such as &lt;code&gt;dict.__dict__['fromkeys']&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dict.__dict__['fromkeys']&lt;/code&gt; などの一部の組み込みデータ型の&lt;em&gt;バインドされていない&lt;/em&gt;クラスメソッドのタイプ。</target>
        </trans-unit>
        <trans-unit id="edc6b284de88d85c6dcdc7c5fb2de19cafa4c532" translate="yes" xml:space="preserve">
          <source>The type of built-in functions like &lt;a href=&quot;functions#len&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sys#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt;, and methods of built-in classes. (Here, the term &amp;ldquo;built-in&amp;rdquo; means &amp;ldquo;written in C&amp;rdquo;.)</source>
          <target state="translated">&lt;a href=&quot;functions#len&quot;&gt; &lt;code&gt;len()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;sys#sys.exit&quot;&gt; &lt;code&gt;sys.exit()&lt;/code&gt; &lt;/a&gt;などの組み込み関数のタイプ、および組み込みクラスのメソッド。（ここで、「組み込み」という用語は「Cで書かれた」という意味です。）</target>
        </trans-unit>
        <trans-unit id="e7a3e7e227b15d7de2c5d33d406e0fdb0848b0ef" translate="yes" xml:space="preserve">
          <source>The type of encoding (base64 or quoted-printable) will be based on the &lt;em&gt;body_encoding&lt;/em&gt; attribute.</source>
          <target state="translated">エンコーディングのタイプ（base64またはquoted-printable）は、&lt;em&gt;body_encoding&lt;/em&gt;属性に&lt;em&gt;基づき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="daa919876c8026bbd456f4980d7d66ce3c1e4e34" translate="yes" xml:space="preserve">
          <source>The type of encoding (base64 or quoted-printable) will be based on the &lt;em&gt;header_encoding&lt;/em&gt; attribute.</source>
          <target state="translated">エンコーディングのタイプ（base64またはquoted-printable）は、&lt;em&gt;header_encoding&lt;/em&gt;属性に&lt;em&gt;基づき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5f3fdc1f795bc115fa25d9a7ee9f014076d623a1" translate="yes" xml:space="preserve">
          <source>The type of file objects supported depends on the platform: on Windows, sockets are supported, but not pipes, whereas on Unix, both are supported (some other types may be supported as well, such as fifos or special file devices).</source>
          <target state="translated">Windows ではソケットはサポートされていますがパイプはサポートされていませんが、Unix では両方ともサポートされています (fifos や特殊なファイルデバイスのような他のタイプもサポートされているかもしれません)。</target>
        </trans-unit>
        <trans-unit id="3596a6e3c65ed88cc1d8e8b7d814d3dabfd3476a" translate="yes" xml:space="preserve">
          <source>The type of frame objects such as found in &lt;code&gt;tb.tb_frame&lt;/code&gt; if &lt;code&gt;tb&lt;/code&gt; is a traceback object.</source>
          <target state="translated">&lt;code&gt;tb&lt;/code&gt; がトレースバックオブジェクトの場合、 &lt;code&gt;tb.tb_frame&lt;/code&gt; にあるようなフレームオブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="75460e66c894ac26297c70dd2c59bf341c1ac5d4" translate="yes" xml:space="preserve">
          <source>The type of methods of some built-in data types and base classes such as &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;object.__init__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;object.__lt__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一部の組み込みデータ型および基本クラス&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;object.__init__()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;object.__lt__()&lt;/code&gt; &lt;/a&gt;のメソッドのタイプ。</target>
        </trans-unit>
        <trans-unit id="006cc434974d0c712e82a1fc52ff84f562270642" translate="yes" xml:space="preserve">
          <source>The type of methods of some built-in data types and base classes such as &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;object.__init__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;object.__lt__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;object.__init__()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;object.__lt__()&lt;/code&gt; &lt;/a&gt;などの一部の組み込みデータ型および基本クラスのメソッドの型。</target>
        </trans-unit>
        <trans-unit id="802b8bb24f2cee63ab7e9a26db85ba1e69bde6fb" translate="yes" xml:space="preserve">
          <source>The type of methods of some built-in data types such as &lt;a href=&quot;stdtypes#str.join&quot;&gt;&lt;code&gt;str.join()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdtypes#str.join&quot;&gt; &lt;code&gt;str.join()&lt;/code&gt; &lt;/a&gt;などの一部の組み込みデータ型のメソッドのタイプ。</target>
        </trans-unit>
        <trans-unit id="3d0fea4bd572efbc49d1a1be2c36df840b937e1d" translate="yes" xml:space="preserve">
          <source>The type of methods of user-defined class instances.</source>
          <target state="translated">ユーザー定義クラスインスタンスのメソッドの型。</target>
        </trans-unit>
        <trans-unit id="d85b5663cf70afd56961d534baa36aa27fa3f1e2" translate="yes" xml:space="preserve">
          <source>The type of objects defined in extension modules with &lt;code&gt;PyGetSetDef&lt;/code&gt;, such as &lt;code&gt;FrameType.f_locals&lt;/code&gt; or &lt;code&gt;array.array.typecode&lt;/code&gt;. This type is used as descriptor for object attributes; it has the same purpose as the &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property&lt;/code&gt;&lt;/a&gt; type, but for classes defined in extension modules.</source>
          <target state="translated">&lt;code&gt;FrameType.f_locals&lt;/code&gt; や &lt;code&gt;array.array.typecode&lt;/code&gt; など、PyGetSetDefを &lt;code&gt;PyGetSetDef&lt;/code&gt; して拡張モジュールで定義されたオブジェクトのタイプ。このタイプは、オブジェクト属性の記述子として使用されます。&lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property&lt;/code&gt; &lt;/a&gt;タイプと同じ目的を持っていますが、拡張モジュールで定義されたクラス用です。</target>
        </trans-unit>
        <trans-unit id="65d9791079f3a5f0479b8fc1fe7de9de776be32e" translate="yes" xml:space="preserve">
          <source>The type of objects defined in extension modules with &lt;code&gt;PyMemberDef&lt;/code&gt;, such as &lt;code&gt;datetime.timedelta.days&lt;/code&gt;. This type is used as descriptor for simple C data members which use standard conversion functions; it has the same purpose as the &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property&lt;/code&gt;&lt;/a&gt; type, but for classes defined in extension modules.</source>
          <target state="translated">&lt;code&gt;datetime.timedelta.days&lt;/code&gt; など、 &lt;code&gt;PyMemberDef&lt;/code&gt; を使用して拡張モジュールで定義されたオブジェクトのタイプ。この型は、標準の変換関数を使用する単純なCデータメンバーの記述子として使用されます。&lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property&lt;/code&gt; &lt;/a&gt;タイプと同じ目的を持っていますが、拡張モジュールで定義されたクラス用です。</target>
        </trans-unit>
        <trans-unit id="af9c2c83b8c60dabd2c034b33bbb7fdb10e6d512" translate="yes" xml:space="preserve">
          <source>The type of socket used by the server; &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;socket.SOCK_STREAM&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;socket#socket.SOCK_DGRAM&quot;&gt;&lt;code&gt;socket.SOCK_DGRAM&lt;/code&gt;&lt;/a&gt; are two common values.</source>
          <target state="translated">サーバーが使用するソケットのタイプ。&lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt; &lt;code&gt;socket.SOCK_STREAM&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;socket#socket.SOCK_DGRAM&quot;&gt; &lt;code&gt;socket.SOCK_DGRAM&lt;/code&gt; &lt;/a&gt;は、2つの一般的な値です。</target>
        </trans-unit>
        <trans-unit id="be204b93125e9374a47e9c0607ad154bb8bb9d7d" translate="yes" xml:space="preserve">
          <source>The type of the connection is determined by &lt;em&gt;family&lt;/em&gt; argument, but this can generally be omitted since it can usually be inferred from the format of &lt;em&gt;address&lt;/em&gt;. (See &lt;a href=&quot;#multiprocessing-address-formats&quot;&gt;Address Formats&lt;/a&gt;)</source>
          <target state="translated">接続のタイプは、&lt;em&gt;ファミリー&lt;/em&gt;引数によって決定されますが、通常は&lt;em&gt;address&lt;/em&gt;のフォーマットから推測できるため、これは通常省略でき&lt;em&gt;ます&lt;/em&gt;。（&lt;a href=&quot;#multiprocessing-address-formats&quot;&gt;アドレス形式を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="bd30a5963bbcf91e157911dfc75bf91da7146bda" translate="yes" xml:space="preserve">
          <source>The type of the objects returned by &lt;a href=&quot;#parser.expr&quot;&gt;&lt;code&gt;expr()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#parser.suite&quot;&gt;&lt;code&gt;suite()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#parser.sequence2st&quot;&gt;&lt;code&gt;sequence2st()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#parser.expr&quot;&gt; &lt;code&gt;expr()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#parser.suite&quot;&gt; &lt;code&gt;suite()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#parser.sequence2st&quot;&gt; &lt;code&gt;sequence2st()&lt;/code&gt; &lt;/a&gt;によって返されるオブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="2415aa71d53e852131b074eb25a6c6db74a53fb6" translate="yes" xml:space="preserve">
          <source>The type of the return values from the &lt;a href=&quot;#xml.parsers.expat.ParserCreate&quot;&gt;&lt;code&gt;ParserCreate()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;#xml.parsers.expat.ParserCreate&quot;&gt; &lt;code&gt;ParserCreate()&lt;/code&gt; &lt;/a&gt;関数からの戻り値のタイプ。</target>
        </trans-unit>
        <trans-unit id="f1e00a1edd876419fe2ebe3767b0aed891735220" translate="yes" xml:space="preserve">
          <source>The type of the time value sequence returned by &lt;a href=&quot;#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt;. It is an object with a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; interface: values can be accessed by index and by attribute name. The following values are present:</source>
          <target state="translated">&lt;a href=&quot;#time.gmtime&quot;&gt; &lt;code&gt;gmtime()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt;によって返される時間値シーケンスのタイプ。これは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;名前付きタプル&lt;/a&gt;インターフェイスを持つオブジェクトです。値には、インデックスおよび属性名でアクセスできます。次の値が存在します。</target>
        </trans-unit>
        <trans-unit id="053a7afe80b04d32a06bfff90db5eb35bc914e6d" translate="yes" xml:space="preserve">
          <source>The type of the time value sequence returned by &lt;a href=&quot;#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt;. It is an object with a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; interface: values can be accessed by index and by attribute name. The following values are present:</source>
          <target state="translated">&lt;a href=&quot;#time.gmtime&quot;&gt; &lt;code&gt;gmtime()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt;によって返される時間値シーケンスのタイプ。これは、&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;名前付きタプル&lt;/a&gt;インターフェイスを持つオブジェクトです。値には、インデックスと属性名でアクセスできます。次の値があります。</target>
        </trans-unit>
        <trans-unit id="17a09ba982dc1f24bfd7bfea4ab6a3ce49113c82" translate="yes" xml:space="preserve">
          <source>The type of traceback objects such as found in &lt;code&gt;sys.exc_info()[2]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sys.exc_info()[2]&lt;/code&gt; にあるようなトレースバックオブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="14fb1882a83121d6512420b73ddf7c6df4b29e08" translate="yes" xml:space="preserve">
          <source>The type of user-defined functions and functions created by &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#lambda&quot;&gt;&lt;code&gt;lambda&lt;/code&gt;&lt;/a&gt; expressions.</source>
          <target state="translated">ユーザー定義関数と&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#lambda&quot;&gt; &lt;code&gt;lambda&lt;/code&gt; &lt;/a&gt;式によって作成された関数のタイプ。</target>
        </trans-unit>
        <trans-unit id="fdf47ff25ed233afa798ad63a4c3d489b4b155fe" translate="yes" xml:space="preserve">
          <source>The type of user-defined functions and functions created by &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#lambda&quot;&gt;&lt;code&gt;lambda&lt;/code&gt;&lt;/a&gt; expressions.</source>
          <target state="translated">ユーザー定義関数のタイプと&lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#lambda&quot;&gt; &lt;code&gt;lambda&lt;/code&gt; &lt;/a&gt;式によって作成された関数。</target>
        </trans-unit>
        <trans-unit id="845e42910aebf464f039df10da42d715e332ff1d" translate="yes" xml:space="preserve">
          <source>The type system of the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module is extensible in two ways: you can store additional Python types in a SQLite database via object adaptation, and you can let the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module convert SQLite types to different Python types via converters.</source>
          <target state="translated">&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールの型システムは、2つの方法で拡張可能です。オブジェクト適応を介してSQLiteデータベースに追加のPython型を保存すること、およびコンバーターを介して&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールにSQLite型を別のPython型に変換させることができます。</target>
        </trans-unit>
        <trans-unit id="f3a6af98017fdeff071bf353e1479e07931b4d2f" translate="yes" xml:space="preserve">
          <source>The typecode character used to create the array.</source>
          <target state="translated">配列を作成するために使用されるタイプコード文字。</target>
        </trans-unit>
        <trans-unit id="0c959abb200e6f216cd6c46680afae3d3493423d" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;short int&lt;/code&gt;, &lt;code&gt;unsigned int&lt;/code&gt;, &lt;code&gt;unsigned long long&lt;/code&gt;, and &lt;code&gt;boolean&lt;/code&gt; all map to Python integer objects.</source>
          <target state="translated">タイプ &lt;code&gt;short int&lt;/code&gt; 、 &lt;code&gt;unsigned int&lt;/code&gt; 、 &lt;code&gt;unsigned long long&lt;/code&gt; 、および &lt;code&gt;boolean&lt;/code&gt; はすべてPython整数オブジェクトにマップされます。</target>
        </trans-unit>
        <trans-unit id="4d560d8f900eca6af7a86605d169b14ce3732718" translate="yes" xml:space="preserve">
          <source>The typical programming style using condition variables uses the lock to synchronize access to some shared state; threads that are interested in a particular change of state call &lt;a href=&quot;#threading.Condition.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; repeatedly until they see the desired state, while threads that modify the state call &lt;a href=&quot;#threading.Condition.notify&quot;&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#threading.Condition.notify_all&quot;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt; when they change the state in such a way that it could possibly be a desired state for one of the waiters. For example, the following code is a generic producer-consumer situation with unlimited buffer capacity:</source>
          <target state="translated">条件変数を使用する一般的なプログラミングスタイルでは、ロックを使用して、共有状態へのアクセスを同期します。特定の状態の変化に関心のあるスレッドは、目的の状態が&lt;a href=&quot;#threading.Condition.notify_all&quot;&gt; &lt;code&gt;notify_all()&lt;/code&gt; &lt;/a&gt;まで&lt;a href=&quot;#threading.Condition.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; を&lt;/a&gt;繰り返し呼び出します。一方、状態を変更するスレッドは、状態が変化する可能性のある方法で状態が変化したときに&lt;a href=&quot;#threading.Condition.notify&quot;&gt; &lt;code&gt;notify()&lt;/code&gt; &lt;/a&gt;またはnotify_all（）を呼び出します。ウェイターの1つの望ましい状態。たとえば、次のコードは、無制限のバッファー容量を備えた一般的なプロデューサー/コンシューマーの状況です。</target>
        </trans-unit>
        <trans-unit id="6cce4ca16ef59a2c9a6e26b00995455dbe5b43db" translate="yes" xml:space="preserve">
          <source>The typical usage to break into the debugger from a running program is to insert</source>
          <target state="translated">実行中のプログラムからデバッガに侵入するための典型的な使用法は</target>
        </trans-unit>
        <trans-unit id="312b8c5e06e9b508c2dc3394df6f8c328dcdd28f" translate="yes" xml:space="preserve">
          <source>The typical usage to inspect a crashed program is:</source>
          <target state="translated">クラッシュされたプログラムを検査するための典型的な使用法です。</target>
        </trans-unit>
        <trans-unit id="19aaa16d46a9088205f8b111d28555cd6514b9f9" translate="yes" xml:space="preserve">
          <source>The typical use is:</source>
          <target state="translated">典型的な使い方です。</target>
        </trans-unit>
        <trans-unit id="3f88d8816221987271260ee8ea49f5b5d7cf3e10" translate="yes" xml:space="preserve">
          <source>The uid and gid items are integers, all others are strings. &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised if the entry asked for cannot be found.</source>
          <target state="translated">uidとgidの項目は整数で、その他はすべて文字列です。要求されたエントリが見つからない場合、&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="1f5c1273b1d4b80fefb18a2d5748785e0ad812ac" translate="yes" xml:space="preserve">
          <source>The underlying &lt;code&gt;sqlite3&lt;/code&gt; library operates in &lt;code&gt;autocommit&lt;/code&gt; mode by default, but the Python &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module by default does not.</source>
          <target state="translated">基盤となる &lt;code&gt;sqlite3&lt;/code&gt; ライブラリはデフォルトで &lt;code&gt;autocommit&lt;/code&gt; モードで動作しますが、Python &lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールはデフォルトでは動作しません。</target>
        </trans-unit>
        <trans-unit id="692c81225394c94ff32b84438ec4aa9ac22b33ab" translate="yes" xml:space="preserve">
          <source>The underlying Readline library API may be implemented by the &lt;code&gt;libedit&lt;/code&gt; library instead of GNU readline. On macOS the &lt;a href=&quot;#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; module detects which library is being used at run time.</source>
          <target state="translated">基になるReadlineライブラリAPIは、GNU readlineではなく &lt;code&gt;libedit&lt;/code&gt; ライブラリによって実装される場合があります。macOSでは、&lt;a href=&quot;#module-readline&quot;&gt; &lt;code&gt;readline&lt;/code&gt; &lt;/a&gt;モジュールが実行時に使用されているライブラリを検出します。</target>
        </trans-unit>
        <trans-unit id="cbd3a217e06ecf1e9ba395c9d3b83ea44a75be37" translate="yes" xml:space="preserve">
          <source>The underlying binary buffer (a &lt;a href=&quot;#io.BufferedIOBase&quot;&gt;&lt;code&gt;BufferedIOBase&lt;/code&gt;&lt;/a&gt; instance) that &lt;a href=&quot;#io.TextIOBase&quot;&gt;&lt;code&gt;TextIOBase&lt;/code&gt;&lt;/a&gt; deals with. This is not part of the &lt;a href=&quot;#io.TextIOBase&quot;&gt;&lt;code&gt;TextIOBase&lt;/code&gt;&lt;/a&gt; API and may not exist in some implementations.</source>
          <target state="translated">&lt;a href=&quot;#io.TextIOBase&quot;&gt; &lt;code&gt;TextIOBase&lt;/code&gt; が&lt;/a&gt;扱う基になるバイナリバッファー（&lt;a href=&quot;#io.BufferedIOBase&quot;&gt; &lt;code&gt;BufferedIOBase&lt;/code&gt; &lt;/a&gt;インスタンス）。これは&lt;a href=&quot;#io.TextIOBase&quot;&gt; &lt;code&gt;TextIOBase&lt;/code&gt; &lt;/a&gt; APIの一部ではなく、一部の実装では存在しない場合があります。</target>
        </trans-unit>
        <trans-unit id="c099cf6d6c9538690a044409fa62678eb6541891" translate="yes" xml:space="preserve">
          <source>The underlying mappings are stored in a list. That list is public and can be accessed or updated using the &lt;em&gt;maps&lt;/em&gt; attribute. There is no other state.</source>
          <target state="translated">基になるマッピングはリストに格納されます。そのリストは公開されており、&lt;em&gt;maps&lt;/em&gt;属性を使用してアクセスまたは更新できます。他の状態はありません。</target>
        </trans-unit>
        <trans-unit id="c8ed57a843f0b2c56ec32e93f7034f9d564cc770" translate="yes" xml:space="preserve">
          <source>The underlying object of the memoryview:</source>
          <target state="translated">メモリビューの基礎となるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="74ffc7561de47c1ca7be4db22d58088aa8da9469" translate="yes" xml:space="preserve">
          <source>The underlying process creation and management in this module is handled by the &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; class. It offers a lot of flexibility so that developers are able to handle the less common cases not covered by the convenience functions.</source>
          <target state="translated">このモジュールの基になるプロセスの作成と管理は、&lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt;クラスによって処理されます。これは、開発者が便利な関数ではカバーされない、あまり一般的でないケースを処理できるように、多くの柔軟性を提供します。</target>
        </trans-unit>
        <trans-unit id="ba3e655d8ac47240c2d2f5980db91a3ca2ecc86b" translate="yes" xml:space="preserve">
          <source>The underlying raw stream (a &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt; instance) that &lt;a href=&quot;#io.BufferedIOBase&quot;&gt;&lt;code&gt;BufferedIOBase&lt;/code&gt;&lt;/a&gt; deals with. This is not part of the &lt;a href=&quot;#io.BufferedIOBase&quot;&gt;&lt;code&gt;BufferedIOBase&lt;/code&gt;&lt;/a&gt; API and may not exist on some implementations.</source>
          <target state="translated">&lt;a href=&quot;#io.BufferedIOBase&quot;&gt; &lt;code&gt;BufferedIOBase&lt;/code&gt; が&lt;/a&gt;処理する基になるrawストリーム（&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;インスタンス）。これは&lt;a href=&quot;#io.BufferedIOBase&quot;&gt; &lt;code&gt;BufferedIOBase&lt;/code&gt; &lt;/a&gt; APIの一部ではなく、一部の実装では存在しない場合があります。</target>
        </trans-unit>
        <trans-unit id="d1573d571c13d16324a3c741bed96fa34d92b283" translate="yes" xml:space="preserve">
          <source>The unformatted error message.</source>
          <target state="translated">フォーマットされていないエラーメッセージ。</target>
        </trans-unit>
        <trans-unit id="05f3ae582f0c0636a61039860a85ef0508aa13e0" translate="yes" xml:space="preserve">
          <source>The unittest module can be used from the command line to run tests from modules, classes or even individual test methods:</source>
          <target state="translated">unittest モジュールは、コマンドラインからモジュール、クラス、または個々のテストメソッドからテストを実行するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="6dde9ab65dc4b9f7975e19a23a1127cf92b2b035" translate="yes" xml:space="preserve">
          <source>The uppercase letters &lt;code&gt;'ABCDEFGHIJKLMNOPQRSTUVWXYZ'&lt;/code&gt;. This value is not locale-dependent and will not change.</source>
          <target state="translated">大文字の &lt;code&gt;'ABCDEFGHIJKLMNOPQRSTUVWXYZ'&lt;/code&gt; 。この値はロケールに依存せず、変更されません。</target>
        </trans-unit>
        <trans-unit id="0854cdf9ca6554793143fab76b0e342cda85438d" translate="yes" xml:space="preserve">
          <source>The uppercasing algorithm used is described in section 3.13 of the Unicode Standard.</source>
          <target state="translated">使用されている大文字化アルゴリズムは、Unicode 標準の 3.13 節に記述されています。</target>
        </trans-unit>
        <trans-unit id="f9b9af9c2a1fd50996417214bffd38cd04caabd4" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;%Z&lt;/code&gt; is now deprecated, but the &lt;code&gt;%z&lt;/code&gt; escape that expands to the preferred hour/minute offset is not supported by all ANSI C libraries. Also, a strict reading of the original 1982 &lt;a href=&quot;https://tools.ietf.org/html/rfc822.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 822&lt;/strong&gt;&lt;/a&gt; standard calls for a two-digit year (%y rather than %Y), but practice moved to 4-digit years long before the year 2000. After that, &lt;a href=&quot;https://tools.ietf.org/html/rfc822.html&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;RFC 822&lt;/strong&gt;&lt;/a&gt; became obsolete and the 4-digit year has been first recommended by &lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;RFC 1123&lt;/strong&gt;&lt;/a&gt; and then mandated by &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;%Z&lt;/code&gt; の使用は非推奨になりましたが、希望の時間/分のオフセットに拡張する &lt;code&gt;%z&lt;/code&gt; エスケープは、すべてのANSI Cライブラリでサポートされているわけではありません。また、元の1982 &lt;a href=&quot;https://tools.ietf.org/html/rfc822.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 822&lt;/strong&gt;&lt;/a&gt;標準を厳密に読むと、2桁の年（％Yではなく％y）が必要ですが、慣例は2000年よりずっと前の4桁の年に移行しました。その後、&lt;a href=&quot;https://tools.ietf.org/html/rfc822.html&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;RFC 822&lt;/strong&gt;&lt;/a&gt;は廃止され、 4桁の年は、&lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;RFC 1123で&lt;/strong&gt;&lt;/a&gt;最初に推奨され、次に&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;RFC 2822で&lt;/strong&gt;&lt;/a&gt;義務付けられてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="818e1de1ee279a3d12fd00fd42609c4b0aa39222" translate="yes" xml:space="preserve">
          <source>The use of a &lt;code&gt;CDATASection&lt;/code&gt; node does not indicate that the node represents a complete CDATA marked section, only that the content of the node was part of a CDATA section. A single CDATA section may be represented by more than one node in the document tree. There is no way to determine whether two adjacent &lt;code&gt;CDATASection&lt;/code&gt; nodes represent different CDATA marked sections.</source>
          <target state="translated">&lt;code&gt;CDATASection&lt;/code&gt; ノードの使用は、ノードが完全なCDATAマーク付きセクションを表すことを示すのではなく、ノードのコンテンツがCDATAセクションの一部であることのみを示します。単一のCDATAセクションは、ドキュメントツリーの複数のノードで表すことができます。2つの隣接する &lt;code&gt;CDATASection&lt;/code&gt; ノードが異なるCDATAマーク付きセクションを表すかどうかを判断する方法はありません。</target>
        </trans-unit>
        <trans-unit id="e59fb5d1424421341c7c08cd960ce1c43d8cae74" translate="yes" xml:space="preserve">
          <source>The use of a bounded semaphore reduces the chance that a programming error which causes the semaphore to be released more than it&amp;rsquo;s acquired will go undetected.</source>
          <target state="translated">制限付きセマフォを使用すると、セマフォが解放されるよりも多く解放されるプログラミングエラーが検出されなくなる可能性が低くなります。</target>
        </trans-unit>
        <trans-unit id="503e039e7a7945e22e53e684cd41c8ddeb2296c8" translate="yes" xml:space="preserve">
          <source>The use of decimal floating point eliminates decimal representation error (making it possible to represent &lt;code&gt;0.1&lt;/code&gt; exactly); however, some operations can still incur round-off error when non-zero digits exceed the fixed precision.</source>
          <target state="translated">10進浮動小数点を使用すると、10進表記のエラーがなくなります（ &lt;code&gt;0.1&lt;/code&gt; を正確に表すことが可能になります）。ただし、一部の演算では、ゼロ以外の桁が固定精度を超えた場合でも丸めエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ef05d3a555addffe6383bb0c2ceb5c3b10ece3a4" translate="yes" xml:space="preserve">
          <source>The use of dynamic dispatching by &lt;a href=&quot;#reprlib.Repr.repr1&quot;&gt;&lt;code&gt;Repr.repr1()&lt;/code&gt;&lt;/a&gt; allows subclasses of &lt;a href=&quot;#reprlib.Repr&quot;&gt;&lt;code&gt;Repr&lt;/code&gt;&lt;/a&gt; to add support for additional built-in object types or to modify the handling of types already supported. This example shows how special support for file objects could be added:</source>
          <target state="translated">&lt;a href=&quot;#reprlib.Repr.repr1&quot;&gt; &lt;code&gt;Repr.repr1()&lt;/code&gt; &lt;/a&gt;による動的ディスパッチの使用により、&lt;a href=&quot;#reprlib.Repr&quot;&gt; &lt;code&gt;Repr&lt;/code&gt; の&lt;/a&gt;サブクラスは、追加の組み込みオブジェクトタイプのサポートを追加したり、すでにサポートされているタイプの処理を変更したりできます。この例は、ファイルオブジェクトの特別なサポートを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="52d05a35e93648db761f9430668b0f890705b58d" translate="yes" xml:space="preserve">
          <source>The useful mapping keys in a &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; are given in the section on &lt;a href=&quot;#logrecord-attributes&quot;&gt;LogRecord attributes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; &lt;/a&gt;の有用なマッピングキーについては、&lt;a href=&quot;#logrecord-attributes&quot;&gt;LogRecord属性の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="61191e6c79c749cd7aba4196b38f6b9a262afba8" translate="yes" xml:space="preserve">
          <source>The user does not instantiate a transport directly; they call a utility function, passing it a protocol factory and other information necessary to create the transport and protocol.</source>
          <target state="translated">ユーザーは、トランスポートを直接インスタンス化するのではなく、ユーティリティ関数を呼び出し、プロトコルファクトリーやトランスポートやプロトコルを作成するために必要なその他の情報を渡します。</target>
        </trans-unit>
        <trans-unit id="799492a2bc4f8c18e914c5fd6750e59de66fb8b8" translate="yes" xml:space="preserve">
          <source>The user of &lt;a href=&quot;#tempfile.mkdtemp&quot;&gt;&lt;code&gt;mkdtemp()&lt;/code&gt;&lt;/a&gt; is responsible for deleting the temporary directory and its contents when done with it.</source>
          <target state="translated">&lt;a href=&quot;#tempfile.mkdtemp&quot;&gt; &lt;code&gt;mkdtemp()&lt;/code&gt; &lt;/a&gt;のユーザーは、一時ディレクトリとその内容を削除したときに、その内容を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="50e266ba92d8277d2b2353b0363957a1543b30c2" translate="yes" xml:space="preserve">
          <source>The user-exposed type for the &lt;code&gt;GenericAlias&lt;/code&gt; object can be accessed from &lt;a href=&quot;types#types.GenericAlias&quot;&gt;&lt;code&gt;types.GenericAlias&lt;/code&gt;&lt;/a&gt; and used for &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; checks. It can also be used to create &lt;code&gt;GenericAlias&lt;/code&gt; objects directly.</source>
          <target state="translated">ユーザー露出型 &lt;code&gt;GenericAlias&lt;/code&gt; のオブジェクトからアクセス可能&lt;a href=&quot;types#types.GenericAlias&quot;&gt; &lt;code&gt;types.GenericAlias&lt;/code&gt; &lt;/a&gt;とのために使用さ&lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt;をチェックします。 &lt;code&gt;GenericAlias&lt;/code&gt; オブジェクトを直接作成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="ee129ab0f90820dc953cf701d4d07af6a6196607" translate="yes" xml:space="preserve">
          <source>The user-provided request handler class; an instance of this class is created for each request.</source>
          <target state="translated">ユーザーが提供するリクエストハンドラクラス。</target>
        </trans-unit>
        <trans-unit id="72b7902f1383f94a27baa827eb01bca89cc62cbc" translate="yes" xml:space="preserve">
          <source>The usual &lt;a href=&quot;queue#queue.Empty&quot;&gt;&lt;code&gt;queue.Empty&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;queue#queue.Full&quot;&gt;&lt;code&gt;queue.Full&lt;/code&gt;&lt;/a&gt; exceptions from the standard library&amp;rsquo;s &lt;a href=&quot;queue#module-queue&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/a&gt; module are raised to signal timeouts.</source>
          <target state="translated">標準ライブラリの&lt;a href=&quot;queue#module-queue&quot;&gt; &lt;code&gt;queue&lt;/code&gt; &lt;/a&gt;モジュールからの通常の&lt;a href=&quot;queue#queue.Empty&quot;&gt; &lt;code&gt;queue.Empty&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;queue#queue.Full&quot;&gt; &lt;code&gt;queue.Full&lt;/code&gt; &lt;/a&gt;例外は、タイムアウトを通知するために発生します。</target>
        </trans-unit>
        <trans-unit id="4fb214e67950bddad6409524a77147f01c797d75" translate="yes" xml:space="preserve">
          <source>The usual approach to working with decimals is to create &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; instances and then apply arithmetic operations which take place within the current context for the active thread. An alternative approach is to use context methods for calculating within a specific context. The methods are similar to those for the &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; class and are only briefly recounted here.</source>
          <target state="translated">&lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt;を扱う通常のアプローチは、Decimalインスタンスを作成してから、アクティブスレッドの現在のコンテキスト内で行われる算術演算を適用することです。別のアプローチは、特定のコンテキスト内で計算するためにコンテキストメソッドを使用することです。メソッドは&lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt;クラスのメソッドと似ており、ここでは簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="7e0cd4e412d5835966f4133590beac72566aa7f2" translate="yes" xml:space="preserve">
          <source>The usual dictionary methods are available for &lt;a href=&quot;#collections.Counter&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt; objects except for two which work differently for counters.</source>
          <target state="translated">通常のディクショナリメソッドは、&lt;a href=&quot;#collections.Counter&quot;&gt; &lt;code&gt;Counter&lt;/code&gt; &lt;/a&gt;に対して異なる動作をする2つを除いて、カウンターオブジェクトに対して使用できます。</target>
        </trans-unit>
        <trans-unit id="fc3dad1947c78cee7834b38256f73aa158a2e66a" translate="yes" xml:space="preserve">
          <source>The usual fix is to either await the coroutine or call the &lt;a href=&quot;asyncio-task#asyncio.create_task&quot;&gt;&lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">通常の修正は、コルーチンを待つか、&lt;a href=&quot;asyncio-task#asyncio.create_task&quot;&gt; &lt;code&gt;asyncio.create_task()&lt;/code&gt; &lt;/a&gt;関数を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="ab66de48e5569d8b04e6ed1de85c17b699cb8d3c" translate="yes" xml:space="preserve">
          <source>The usual restrictions for pickling apply: picklable enums must be defined in the top level of a module, since unpickling requires them to be importable from that module.</source>
          <target state="translated">ピックリングには通常の制限が適用されます:picklable enums はモジュールのトップレベルで定義されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="e12393a3161a5ffd9c52bf6911f34c236e2c9953" translate="yes" xml:space="preserve">
          <source>The usual start to using decimals is importing the module, viewing the current context with &lt;a href=&quot;#decimal.getcontext&quot;&gt;&lt;code&gt;getcontext()&lt;/code&gt;&lt;/a&gt; and, if necessary, setting new values for precision, rounding, or enabled traps:</source>
          <target state="translated">通常、10進数の使用を開始するには、モジュールをインポートし、&lt;a href=&quot;#decimal.getcontext&quot;&gt; &lt;code&gt;getcontext()&lt;/code&gt; &lt;/a&gt;を使用して現在のコンテキストを表示し、必要に応じて、精度、丸め、または有効なトラップに新しい値を設定します。</target>
        </trans-unit>
        <trans-unit id="2008881e3db430ce4e534a59aaba96d96406f254" translate="yes" xml:space="preserve">
          <source>The valid options/values are:</source>
          <target state="translated">有効なオプション/値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="833f8e1091d762b7c244ed494067360a08b6e65e" translate="yes" xml:space="preserve">
          <source>The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16). &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised if &lt;em&gt;i&lt;/em&gt; is outside that range.</source>
          <target state="translated">引数の有効な範囲は0から1,114,111（16進数では0x10FFFF）です。&lt;em&gt;i&lt;/em&gt;がその範囲外の場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c3f14b8f02287106623bf0b009141cb29a66c076" translate="yes" xml:space="preserve">
          <source>The value &lt;em&gt;n&lt;/em&gt; is an integer, or an object implementing &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;. Zero and negative values of &lt;em&gt;n&lt;/em&gt; clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for &lt;code&gt;s * n&lt;/code&gt; under &lt;a href=&quot;#typesseq-common&quot;&gt;Common Sequence Operations&lt;/a&gt;.</source>
          <target state="translated">値&lt;em&gt;n&lt;/em&gt;は整数、または&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt;実装するオブジェクトです。&lt;em&gt;nの&lt;/em&gt;ゼロおよび負の値は、シーケンスをクリアします。シーケンス内のアイテムはコピーされません。&lt;a href=&quot;#typesseq-common&quot;&gt;Common Sequence Operations &lt;/a&gt; &lt;code&gt;s * n&lt;/code&gt; で説明されているように、それらは複数回参照されます。</target>
        </trans-unit>
        <trans-unit id="1ba1cd83c4ea949f698df2968249e46ad9293fd5" translate="yes" xml:space="preserve">
          <source>The value &lt;em&gt;n&lt;/em&gt; is an integer, or an object implementing &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;. Zero and negative values of &lt;em&gt;n&lt;/em&gt; clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for &lt;code&gt;s * n&lt;/code&gt; under &lt;a href=&quot;#typesseq-common&quot;&gt;Common Sequence Operations&lt;/a&gt;.</source>
          <target state="translated">値&lt;em&gt;n&lt;/em&gt;は整数、または&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt;実装するオブジェクトです。&lt;em&gt;nの&lt;/em&gt;ゼロ値と負の値は、シーケンスをクリアします。シーケンス内のアイテムはコピーされません。&lt;a href=&quot;#typesseq-common&quot;&gt;Common SequenceOperations&lt;/a&gt; &lt;code&gt;s * n&lt;/code&gt; で説明されているように、これらは複数回参照されます。</target>
        </trans-unit>
        <trans-unit id="9f91839dd752530537b6fc14cfb59cfb821e2678" translate="yes" xml:space="preserve">
          <source>The value conversion will use the &amp;ldquo;alternate form&amp;rdquo; (where defined below).</source>
          <target state="translated">値の変換には、「代替形式」（以下で定義されている場合）を使用します。</target>
        </trans-unit>
        <trans-unit id="a2668d51d3a069a8b17be6a5bdb69b22691876de" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;True&lt;/code&gt;. Deprecated, because Python now always has threads.</source>
          <target state="translated">値は &lt;code&gt;True&lt;/code&gt; です。Pythonには常にスレッドがあるため、非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="dfd7f69b5373d9254a89d97b317bed89c36400a6" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;endpos&lt;/em&gt; which was passed to the &lt;a href=&quot;#re.Pattern.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#re.Pattern.match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;#re-objects&quot;&gt;regex object&lt;/a&gt;. This is the index into the string beyond which the RE engine will not go.</source>
          <target state="translated">&lt;a href=&quot;#re-objects&quot;&gt;正規表現オブジェクト&lt;/a&gt;の&lt;a href=&quot;#re.Pattern.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#re.Pattern.match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt;メソッドに渡された&lt;em&gt;endpos&lt;/em&gt;の値。これは、REエンジンが通過しない文字列へのインデックスです。</target>
        </trans-unit>
        <trans-unit id="4d524ce944ce6faac364cea7cad2143666016939" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;pos&lt;/em&gt; which was passed to the &lt;a href=&quot;#re.Pattern.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#re.Pattern.match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; method of a &lt;a href=&quot;#re-objects&quot;&gt;regex object&lt;/a&gt;. This is the index into the string at which the RE engine started looking for a match.</source>
          <target state="translated">&lt;a href=&quot;#re-objects&quot;&gt;正規表現オブジェクト&lt;/a&gt;の&lt;a href=&quot;#re.Pattern.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#re.Pattern.match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt;メソッドに渡された&lt;em&gt;pos&lt;/em&gt;の値。これは、REエンジンが一致の検索を開始した文字列へのインデックスです。</target>
        </trans-unit>
        <trans-unit id="2e998dbaff3bb1395e14cf6d02ecba7f97ecf5de" translate="yes" xml:space="preserve">
          <source>The value of each item is either a string, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if not present.</source>
          <target state="translated">各項目の値は文字列か、存在しない場合は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="894da0d8a1deaf4025187c213b697678d4d8eea2" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; reporting flags in effect before the function was called is returned by the function.</source>
          <target state="translated">関数が呼び出される前に有効だった&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;レポートフラグの値は、関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="f4b6f6af5fd914e4e1977bd8812ad275e173d35e" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;start&lt;/em&gt; parameter (or &lt;code&gt;0&lt;/code&gt; if the parameter was not supplied)</source>
          <target state="translated">値&lt;em&gt;開始&lt;/em&gt;パラメータ（又は &lt;code&gt;0&lt;/code&gt; パラメータが供給されなかった場合）</target>
        </trans-unit>
        <trans-unit id="9ee46e1de13205f2274d5b605d7f91d5eb44066d" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;step&lt;/em&gt; parameter (or &lt;code&gt;1&lt;/code&gt; if the parameter was not supplied)</source>
          <target state="translated">値は&lt;em&gt;、ステップ&lt;/em&gt;（またはパラメータ &lt;code&gt;1&lt;/code&gt; 、パラメータが指定されなかった場合）</target>
        </trans-unit>
        <trans-unit id="3effb996f3fdf8925f1c3f71f6aef7653bb530e1" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;stop&lt;/em&gt; parameter</source>
          <target state="translated">値は&lt;em&gt;、停止&lt;/em&gt;パラメータ</target>
        </trans-unit>
        <trans-unit id="b6df41c014faa1a95a93823c98dc9147024275f4" translate="yes" xml:space="preserve">
          <source>The value of the cookie.</source>
          <target state="translated">クッキーの値。</target>
        </trans-unit>
        <trans-unit id="c946fe7e22930d8d97dd543837147d8b1bce64ca" translate="yes" xml:space="preserve">
          <source>The value of the registry item.</source>
          <target state="translated">レジストリ項目の値。</target>
        </trans-unit>
        <trans-unit id="88e44b4995d1d06c008be0ccf6fee3422ea4e070" translate="yes" xml:space="preserve">
          <source>The value of this variable can be changed before calling &lt;a href=&quot;#xml.dom.pulldom.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; and the new value will take effect.</source>
          <target state="translated">この変数の値は、&lt;a href=&quot;#xml.dom.pulldom.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt;を呼び出す前に変更でき、新しい値が有効になります。</target>
        </trans-unit>
        <trans-unit id="bde8c85afabd3e8125721b1ff7d5b17f9d9dee96" translate="yes" xml:space="preserve">
          <source>The value resulting from &lt;code&gt;Context.power(x, y, modulo)&lt;/code&gt; is equal to the value that would be obtained by computing &lt;code&gt;(x**y)
% modulo&lt;/code&gt; with unbounded precision, but is computed more efficiently. The exponent of the result is zero, regardless of the exponents of &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;modulo&lt;/code&gt;. The result is always exact.</source>
          <target state="translated">&lt;code&gt;Context.power(x, y, modulo)&lt;/code&gt; 結果の値は、 &lt;code&gt;(x**y) % modulo&lt;/code&gt; を無制限の精度で計算することによって得られる値に等しくなりますが、より効率的に計算されます。結果の指数は、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、および &lt;code&gt;modulo&lt;/code&gt; の指数に関係なく、ゼロです。結果は常に正確です。</target>
        </trans-unit>
        <trans-unit id="c59b0eb2c27f951fa0cace7c837f6202b755a295" translate="yes" xml:space="preserve">
          <source>The value returned is a named tuple of type &lt;a href=&quot;os#os.terminal_size&quot;&gt;&lt;code&gt;os.terminal_size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返される値は、タイプ&lt;a href=&quot;os#os.terminal_size&quot;&gt; &lt;code&gt;os.terminal_size&lt;/code&gt; の&lt;/a&gt;名前付きタプルです。</target>
        </trans-unit>
        <trans-unit id="7bc5693e6a9c72e20f0575057dd4ee5bc74f98db" translate="yes" xml:space="preserve">
          <source>The value returned may be larger than the &lt;em&gt;item&lt;/em&gt; added. If that isn&amp;rsquo;t desired, consider using &lt;a href=&quot;#heapq.heappushpop&quot;&gt;&lt;code&gt;heappushpop()&lt;/code&gt;&lt;/a&gt; instead. Its push/pop combination returns the smaller of the two values, leaving the larger value on the heap.</source>
          <target state="translated">返される値は、追加された&lt;em&gt;アイテム&lt;/em&gt;よりも大きい場合があり&lt;em&gt;ます&lt;/em&gt;。それが望ましくない場合は、代わりに&lt;a href=&quot;#heapq.heappushpop&quot;&gt; &lt;code&gt;heappushpop()&lt;/code&gt; の&lt;/a&gt;使用を検討してください。そのプッシュ/ポップの組み合わせは、2つの値のうち小さい方を返し、大きい方の値をヒープに残します。</target>
        </trans-unit>
        <trans-unit id="d795005d4b340675bfb305f1568f0d0d9ec61967" translate="yes" xml:space="preserve">
          <source>The value to be used for the &lt;code&gt;wsgi.multiprocess&lt;/code&gt; environment variable. It defaults to true in &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt;, but may have a different default (or be set by the constructor) in the other subclasses.</source>
          <target state="translated">&lt;code&gt;wsgi.multiprocess&lt;/code&gt; 環境変数に使用される値。&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt;ではデフォルトはtrue ですが、他のサブクラスでは別のデフォルト（またはコンストラクターによって設定）を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="a90b6e14952af2c1c7e8dc26e1fb8bc2a1a91cdc" translate="yes" xml:space="preserve">
          <source>The value to be used for the &lt;code&gt;wsgi.multithread&lt;/code&gt; environment variable. It defaults to true in &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt;, but may have a different default (or be set by the constructor) in the other subclasses.</source>
          <target state="translated">&lt;code&gt;wsgi.multithread&lt;/code&gt; 環境変数に使用される値。&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt;ではデフォルトはtrue ですが、他のサブクラスでは別のデフォルト（またはコンストラクターによって設定）を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="16e4c0519d360e3b8f5f9b274c196a4c6f3d4db2" translate="yes" xml:space="preserve">
          <source>The value to be used for the &lt;code&gt;wsgi.run_once&lt;/code&gt; environment variable. It defaults to false in &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt;, but &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt;&lt;code&gt;CGIHandler&lt;/code&gt;&lt;/a&gt; sets it to true by default.</source>
          <target state="translated">&lt;code&gt;wsgi.run_once&lt;/code&gt; 環境変数に使用される値。&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt;ではデフォルトでfalseになっていますが、&lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt; &lt;code&gt;CGIHandler&lt;/code&gt; &lt;/a&gt;ではデフォルトでtrueに設定されています。</target>
        </trans-unit>
        <trans-unit id="78bd89035d6220ea534538c62645a0424951cebd" translate="yes" xml:space="preserve">
          <source>The value used to indicate that no namespace is associated with a node in the DOM. This is typically found as the &lt;code&gt;namespaceURI&lt;/code&gt; of a node, or used as the &lt;em&gt;namespaceURI&lt;/em&gt; parameter to a namespaces-specific method.</source>
          <target state="translated">DOM内のノードに関連付けられている名前空間がないことを示すために使用される値。これは通常、ノードの &lt;code&gt;namespaceURI&lt;/code&gt; として検出されるか、名前空間固有のメソッドの名前空間&lt;em&gt;URI&lt;/em&gt;パラメーターとして使用され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="64a84954e88a246f210c2cf21b6b1dd5abec1148" translate="yes" xml:space="preserve">
          <source>The values are chosen by &lt;code&gt;_generate_next_value_()&lt;/code&gt;, which can be overridden:</source>
          <target state="translated">値は &lt;code&gt;_generate_next_value_()&lt;/code&gt; によって選択され、オーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="9db8f1c845539b8dab56c95400b090e5768cb33d" translate="yes" xml:space="preserve">
          <source>The values in the tuple conceptually represent a span of literal text followed by a single replacement field. If there is no literal text (which can happen if two replacement fields occur consecutively), then &lt;em&gt;literal_text&lt;/em&gt; will be a zero-length string. If there is no replacement field, then the values of &lt;em&gt;field_name&lt;/em&gt;, &lt;em&gt;format_spec&lt;/em&gt; and &lt;em&gt;conversion&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">タプルの値は、概念的にはリテラルテキストの範囲を表し、その後に単一の置換フィールドが続きます。リテラルテキストがない場合（2つの置換フィールドが連続して発生する場合に発生する可能性があります）、&lt;em&gt;literal_text&lt;/em&gt;は長さ0の文字列になります。代替はありません。フィールドが存在しない場合は、値の&lt;em&gt;FIELD_NAME&lt;/em&gt;、&lt;em&gt;format_spec&lt;/em&gt;と&lt;em&gt;変換が&lt;/em&gt;できなくなります &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d52d8d3fc67f68d8f2426d8c8de4306ccc1f8e09" translate="yes" xml:space="preserve">
          <source>The values of the first two fields are constants defined in the &lt;a href=&quot;#module-xml.parsers.expat.model&quot;&gt;&lt;code&gt;xml.parsers.expat.model&lt;/code&gt;&lt;/a&gt; module. These constants can be collected in two groups: the model type group and the quantifier group.</source>
          <target state="translated">最初の2つのフィールドの値は、&lt;a href=&quot;#module-xml.parsers.expat.model&quot;&gt; &lt;code&gt;xml.parsers.expat.model&lt;/code&gt; &lt;/a&gt;モジュールで定義された定数です。これらの定数は、モデルタイプグループと数量詞グループの2つのグループに収集できます。</target>
        </trans-unit>
        <trans-unit id="5e1cd2108af5c3d292a414e185f45717815413a4" translate="yes" xml:space="preserve">
          <source>The variables below define the flags used in the &lt;a href=&quot;#stat.ST_MODE&quot;&gt;&lt;code&gt;ST_MODE&lt;/code&gt;&lt;/a&gt; field.</source>
          <target state="translated">以下の変数は、&lt;a href=&quot;#stat.ST_MODE&quot;&gt; &lt;code&gt;ST_MODE&lt;/code&gt; &lt;/a&gt;フィールドで使用されるフラグを定義します。</target>
        </trans-unit>
        <trans-unit id="570a00c886bbaa011554650d24fe55f6f0971a79" translate="yes" xml:space="preserve">
          <source>The variables defined in the &lt;a href=&quot;#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; module are:</source>
          <target state="translated">&lt;a href=&quot;#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt;モジュールで定義されている変数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ee64058d781eef751c586d91741d6ad13c91889d" translate="yes" xml:space="preserve">
          <source>The variants which include a &amp;ldquo;p&amp;rdquo; near the end (&lt;a href=&quot;#os.execlp&quot;&gt;&lt;code&gt;execlp()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execlpe&quot;&gt;&lt;code&gt;execlpe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execvp&quot;&gt;&lt;code&gt;execvp()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.execvpe&quot;&gt;&lt;code&gt;execvpe()&lt;/code&gt;&lt;/a&gt;) will use the &lt;code id=&quot;index-26&quot;&gt;PATH&lt;/code&gt; environment variable to locate the program &lt;em&gt;file&lt;/em&gt;. When the environment is being replaced (using one of the &lt;a href=&quot;#os.execl&quot;&gt;&lt;code&gt;exec*e&lt;/code&gt;&lt;/a&gt; variants, discussed in the next paragraph), the new environment is used as the source of the &lt;code id=&quot;index-27&quot;&gt;PATH&lt;/code&gt; variable. The other variants, &lt;a href=&quot;#os.execl&quot;&gt;&lt;code&gt;execl()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execle&quot;&gt;&lt;code&gt;execle()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execv&quot;&gt;&lt;code&gt;execv()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.execve&quot;&gt;&lt;code&gt;execve()&lt;/code&gt;&lt;/a&gt;, will not use the &lt;code id=&quot;index-28&quot;&gt;PATH&lt;/code&gt; variable to locate the executable; &lt;em&gt;path&lt;/em&gt; must contain an appropriate absolute or relative path.</source>
          <target state="translated">末尾に「p」を含むバリアント（&lt;a href=&quot;#os.execlp&quot;&gt; &lt;code&gt;execlp()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execlpe&quot;&gt; &lt;code&gt;execlpe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execvp&quot;&gt; &lt;code&gt;execvp()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.execvpe&quot;&gt; &lt;code&gt;execvpe()&lt;/code&gt; &lt;/a&gt;）は、 &lt;code id=&quot;index-26&quot;&gt;PATH&lt;/code&gt; 環境変数を使用してプログラム&lt;em&gt;ファイル&lt;/em&gt;を見つけ&lt;em&gt;ます&lt;/em&gt;。環境が置き換えられるとき（次の段落で説明する&lt;a href=&quot;#os.execl&quot;&gt; &lt;code&gt;exec*e&lt;/code&gt; &lt;/a&gt;バリアントの1つを使用）、新しい環境が &lt;code id=&quot;index-27&quot;&gt;PATH&lt;/code&gt; 変数のソースとして使用されます。他のバリアント、&lt;a href=&quot;#os.execl&quot;&gt; &lt;code&gt;execl()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execle&quot;&gt; &lt;code&gt;execle()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execv&quot;&gt; &lt;code&gt;execv()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.execve&quot;&gt; &lt;code&gt;execve()&lt;/code&gt; &lt;/a&gt;は、実行可能ファイルを見つけるために &lt;code id=&quot;index-28&quot;&gt;PATH&lt;/code&gt; 変数を使用しません。&lt;em&gt;道&lt;/em&gt; 適切な絶対パスまたは相対パスを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="055f633c5b8ba910989ddc0879461a87b09eb587" translate="yes" xml:space="preserve">
          <source>The variants which include a &amp;ldquo;p&amp;rdquo; near the end (&lt;a href=&quot;#os.execlp&quot;&gt;&lt;code&gt;execlp()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execlpe&quot;&gt;&lt;code&gt;execlpe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execvp&quot;&gt;&lt;code&gt;execvp()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.execvpe&quot;&gt;&lt;code&gt;execvpe()&lt;/code&gt;&lt;/a&gt;) will use the &lt;code id=&quot;index-28&quot;&gt;PATH&lt;/code&gt; environment variable to locate the program &lt;em&gt;file&lt;/em&gt;. When the environment is being replaced (using one of the &lt;a href=&quot;#os.execl&quot;&gt;&lt;code&gt;exec*e&lt;/code&gt;&lt;/a&gt; variants, discussed in the next paragraph), the new environment is used as the source of the &lt;code id=&quot;index-29&quot;&gt;PATH&lt;/code&gt; variable. The other variants, &lt;a href=&quot;#os.execl&quot;&gt;&lt;code&gt;execl()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execle&quot;&gt;&lt;code&gt;execle()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execv&quot;&gt;&lt;code&gt;execv()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.execve&quot;&gt;&lt;code&gt;execve()&lt;/code&gt;&lt;/a&gt;, will not use the &lt;code id=&quot;index-30&quot;&gt;PATH&lt;/code&gt; variable to locate the executable; &lt;em&gt;path&lt;/em&gt; must contain an appropriate absolute or relative path.</source>
          <target state="translated">末尾に「p」が含まれるバリアント（&lt;a href=&quot;#os.execlp&quot;&gt; &lt;code&gt;execlp()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execlpe&quot;&gt; &lt;code&gt;execlpe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execvp&quot;&gt; &lt;code&gt;execvp()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.execvpe&quot;&gt; &lt;code&gt;execvpe()&lt;/code&gt; &lt;/a&gt;）は、 &lt;code id=&quot;index-28&quot;&gt;PATH&lt;/code&gt; 環境変数を使用してプログラム&lt;em&gt;ファイル&lt;/em&gt;を検索し&lt;em&gt;ます&lt;/em&gt;。環境が置き換えられるとき（次の段落で説明する&lt;a href=&quot;#os.execl&quot;&gt; &lt;code&gt;exec*e&lt;/code&gt; &lt;/a&gt;バリアントの1つを使用）、新しい環境が &lt;code id=&quot;index-29&quot;&gt;PATH&lt;/code&gt; 変数のソースとして使用されます。他のバリアントである&lt;a href=&quot;#os.execl&quot;&gt; &lt;code&gt;execl()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execle&quot;&gt; &lt;code&gt;execle()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execv&quot;&gt; &lt;code&gt;execv()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.execve&quot;&gt; &lt;code&gt;execve()&lt;/code&gt; &lt;/a&gt;は、実行可能ファイルを見つけるために &lt;code id=&quot;index-30&quot;&gt;PATH&lt;/code&gt; 変数を使用しません。&lt;em&gt;道&lt;/em&gt; 適切な絶対パスまたは相対パスが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="9193f1ef76fbd673e45f1225a537e38ac8bf4170" translate="yes" xml:space="preserve">
          <source>The variants which include a second &amp;ldquo;p&amp;rdquo; near the end (&lt;a href=&quot;#os.spawnlp&quot;&gt;&lt;code&gt;spawnlp()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnlpe&quot;&gt;&lt;code&gt;spawnlpe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnvp&quot;&gt;&lt;code&gt;spawnvp()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.spawnvpe&quot;&gt;&lt;code&gt;spawnvpe()&lt;/code&gt;&lt;/a&gt;) will use the &lt;code id=&quot;index-32&quot;&gt;PATH&lt;/code&gt; environment variable to locate the program &lt;em&gt;file&lt;/em&gt;. When the environment is being replaced (using one of the &lt;a href=&quot;#os.spawnl&quot;&gt;&lt;code&gt;spawn*e&lt;/code&gt;&lt;/a&gt; variants, discussed in the next paragraph), the new environment is used as the source of the &lt;code id=&quot;index-33&quot;&gt;PATH&lt;/code&gt; variable. The other variants, &lt;a href=&quot;#os.spawnl&quot;&gt;&lt;code&gt;spawnl()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnle&quot;&gt;&lt;code&gt;spawnle()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnv&quot;&gt;&lt;code&gt;spawnv()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.spawnve&quot;&gt;&lt;code&gt;spawnve()&lt;/code&gt;&lt;/a&gt;, will not use the &lt;code id=&quot;index-34&quot;&gt;PATH&lt;/code&gt; variable to locate the executable; &lt;em&gt;path&lt;/em&gt; must contain an appropriate absolute or relative path.</source>
          <target state="translated">末尾近くに2番目の「p」を含むバリアント（&lt;a href=&quot;#os.spawnlp&quot;&gt; &lt;code&gt;spawnlp()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnlpe&quot;&gt; &lt;code&gt;spawnlpe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnvp&quot;&gt; &lt;code&gt;spawnvp()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.spawnvpe&quot;&gt; &lt;code&gt;spawnvpe()&lt;/code&gt; &lt;/a&gt;）は、 &lt;code id=&quot;index-32&quot;&gt;PATH&lt;/code&gt; 環境変数を使用してプログラム&lt;em&gt;ファイル&lt;/em&gt;を見つけ&lt;em&gt;ます&lt;/em&gt;。（次の段落で説明&lt;a href=&quot;#os.spawnl&quot;&gt; &lt;code&gt;spawn*e&lt;/code&gt; &lt;/a&gt;バリアントの1つを使用して）環境が置き換えられると、新しい環境が &lt;code id=&quot;index-33&quot;&gt;PATH&lt;/code&gt; 変数のソースとして使用されます。他のバリアント&lt;a href=&quot;#os.spawnl&quot;&gt; &lt;code&gt;spawnl()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnle&quot;&gt; &lt;code&gt;spawnle()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnv&quot;&gt; &lt;code&gt;spawnv()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.spawnve&quot;&gt; &lt;code&gt;spawnve()&lt;/code&gt; &lt;/a&gt;は、 &lt;code id=&quot;index-34&quot;&gt;PATH&lt;/code&gt; 変数を使用して実行可能ファイルを見つけません。&lt;em&gt;道&lt;/em&gt; 適切な絶対パスまたは相対パスを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="6d6d9fa3e86467cc65004fa718f6f51be22a4063" translate="yes" xml:space="preserve">
          <source>The variants which include a second &amp;ldquo;p&amp;rdquo; near the end (&lt;a href=&quot;#os.spawnlp&quot;&gt;&lt;code&gt;spawnlp()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnlpe&quot;&gt;&lt;code&gt;spawnlpe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnvp&quot;&gt;&lt;code&gt;spawnvp()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.spawnvpe&quot;&gt;&lt;code&gt;spawnvpe()&lt;/code&gt;&lt;/a&gt;) will use the &lt;code id=&quot;index-34&quot;&gt;PATH&lt;/code&gt; environment variable to locate the program &lt;em&gt;file&lt;/em&gt;. When the environment is being replaced (using one of the &lt;a href=&quot;#os.spawnl&quot;&gt;&lt;code&gt;spawn*e&lt;/code&gt;&lt;/a&gt; variants, discussed in the next paragraph), the new environment is used as the source of the &lt;code id=&quot;index-35&quot;&gt;PATH&lt;/code&gt; variable. The other variants, &lt;a href=&quot;#os.spawnl&quot;&gt;&lt;code&gt;spawnl()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnle&quot;&gt;&lt;code&gt;spawnle()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnv&quot;&gt;&lt;code&gt;spawnv()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.spawnve&quot;&gt;&lt;code&gt;spawnve()&lt;/code&gt;&lt;/a&gt;, will not use the &lt;code id=&quot;index-36&quot;&gt;PATH&lt;/code&gt; variable to locate the executable; &lt;em&gt;path&lt;/em&gt; must contain an appropriate absolute or relative path.</source>
          <target state="translated">末尾近くに2番目の「p」を含むバリアント（&lt;a href=&quot;#os.spawnlp&quot;&gt; &lt;code&gt;spawnlp()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnlpe&quot;&gt; &lt;code&gt;spawnlpe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnvp&quot;&gt; &lt;code&gt;spawnvp()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.spawnvpe&quot;&gt; &lt;code&gt;spawnvpe()&lt;/code&gt; &lt;/a&gt;）は、 &lt;code id=&quot;index-34&quot;&gt;PATH&lt;/code&gt; 環境変数を使用してプログラム&lt;em&gt;ファイル&lt;/em&gt;を検索し&lt;em&gt;ます&lt;/em&gt;。環境が置き換えられるとき（次の段落で説明&lt;a href=&quot;#os.spawnl&quot;&gt; &lt;code&gt;spawn*e&lt;/code&gt; &lt;/a&gt;バリアントの1つを使用）、新しい環境が &lt;code id=&quot;index-35&quot;&gt;PATH&lt;/code&gt; 変数のソースとして使用されます。他のバリアント、&lt;a href=&quot;#os.spawnl&quot;&gt; &lt;code&gt;spawnl()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnle&quot;&gt; &lt;code&gt;spawnle()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnv&quot;&gt; &lt;code&gt;spawnv()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.spawnve&quot;&gt; &lt;code&gt;spawnve()&lt;/code&gt; &lt;/a&gt;は、実行可能ファイルを見つけるために &lt;code id=&quot;index-36&quot;&gt;PATH&lt;/code&gt; 変数を使用しません。&lt;em&gt;道&lt;/em&gt; 適切な絶対パスまたは相対パスが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="f460136362370229598b52a9bcbe0209c61fd006" translate="yes" xml:space="preserve">
          <source>The various &lt;a href=&quot;#os.execl&quot;&gt;&lt;code&gt;exec*&lt;/code&gt;&lt;/a&gt; functions take a list of arguments for the new program loaded into the process. In each case, the first of these arguments is passed to the new program as its own name rather than as an argument a user may have typed on a command line. For the C programmer, this is the &lt;code&gt;argv[0]&lt;/code&gt; passed to a program&amp;rsquo;s &lt;code&gt;main()&lt;/code&gt;. For example, &lt;code&gt;os.execv('/bin/echo',
['foo', 'bar'])&lt;/code&gt; will only print &lt;code&gt;bar&lt;/code&gt; on standard output; &lt;code&gt;foo&lt;/code&gt; will seem to be ignored.</source>
          <target state="translated">さまざまな&lt;a href=&quot;#os.execl&quot;&gt; &lt;code&gt;exec*&lt;/code&gt; &lt;/a&gt;関数は、プロセスにロードされた新しいプログラムの引数のリストを受け取ります。いずれの場合も、これらの引数の最初の引数は、ユーザーがコマンドラインで入力した引数ではなく、独自の名前として新しいプログラムに渡されます。 Cプログラマの場合、これはプログラムの &lt;code&gt;main()&lt;/code&gt; に渡される &lt;code&gt;argv[0]&lt;/code&gt; です。たとえば、 &lt;code&gt;os.execv('/bin/echo', ['foo', 'bar'])&lt;/code&gt; は、標準出力に &lt;code&gt;bar&lt;/code&gt; のみを出力します。 &lt;code&gt;foo&lt;/code&gt; は無視されるようです。</target>
        </trans-unit>
        <trans-unit id="39516d842ad2ebf0ccc0148be3b60ceb8e23f56b" translate="yes" xml:space="preserve">
          <source>The various named parameters found in &lt;em&gt;Set-Cookie&lt;/em&gt; and &lt;em&gt;Set-Cookie2&lt;/em&gt; headers (eg. &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;expires&lt;/code&gt;) are conventionally referred to as &lt;em&gt;attributes&lt;/em&gt;. To distinguish them from Python attributes, the documentation for this module uses the term &lt;em&gt;cookie-attribute&lt;/em&gt; instead.</source>
          <target state="translated">様々な名前のパラメータがで見つかった&lt;em&gt;のSet-Cookie&lt;/em&gt;と&lt;em&gt;セットCookie2&lt;/em&gt;ヘッダ（例えば &lt;code&gt;domain&lt;/code&gt; および &lt;code&gt;expires&lt;/code&gt; ）は、従来と呼ばれている&lt;em&gt;属性&lt;/em&gt;。それらをPython属性と区別するために、このモジュールのドキュメントでは代わりに&lt;em&gt;cookie-attribute&lt;/em&gt;という用語を使用してい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a9102cf75be9fce05b52770c18e9074f93ffc76b" translate="yes" xml:space="preserve">
          <source>The version number as a string, with any whitespace and/or comments removed.</source>
          <target state="translated">バージョン番号は文字列で、空白やコメントは削除されます。</target>
        </trans-unit>
        <trans-unit id="609eb97fd5216df593e456b08820fbdecce59af0" translate="yes" xml:space="preserve">
          <source>The version number encoded as a single integer. This is guaranteed to increase with each version, including proper support for non-production releases. For example, to test that the Python interpreter is at least version 1.5.2, use:</source>
          <target state="translated">1 つの整数でエンコードされたバージョン番号。これは、非プロダクションリリースの適切なサポートを含めて、バージョンごとに増加することが保証されています。例えば、Python インタプリタが少なくともバージョン 1.5.2 であることをテストするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d8b4cf55cc9ba4af98dcfd2188bb39d0808a2000" translate="yes" xml:space="preserve">
          <source>The version number of the run-time SQLite library, as a string.</source>
          <target state="translated">実行時の SQLite ライブラリのバージョン番号を文字列で指定します。</target>
        </trans-unit>
        <trans-unit id="83cfbef62783b9adbc5d82cbd03374d9ffac04a3" translate="yes" xml:space="preserve">
          <source>The version number of the run-time SQLite library, as a tuple of integers.</source>
          <target state="translated">ランタイム SQLite ライブラリのバージョン番号を整数のタプルで指定します。</target>
        </trans-unit>
        <trans-unit id="82ad32d0ec3913612c3c798f838cb1d4b90e0ca4" translate="yes" xml:space="preserve">
          <source>The version number of this module, as a string. This is not the version of the SQLite library.</source>
          <target state="translated">このモジュールのバージョン番号を文字列で指定します。これは SQLite ライブラリのバージョンではありません。</target>
        </trans-unit>
        <trans-unit id="b2bf9e254a8f2ed1bc7d1d04b5316dcc3367de2d" translate="yes" xml:space="preserve">
          <source>The version number of this module, as a tuple of integers. This is not the version of the SQLite library.</source>
          <target state="translated">このモジュールのバージョン番号を整数のタプルで指定します。これは SQLite ライブラリのバージョンではありません。</target>
        </trans-unit>
        <trans-unit id="6e547ed29557b93784e133bf96efb332e811697d" translate="yes" xml:space="preserve">
          <source>The version number used to form registry keys on Windows platforms. This is stored as string resource 1000 in the Python DLL. The value is normally the first three characters of &lt;a href=&quot;#sys.version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt;. It is provided in the &lt;a href=&quot;#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; module for informational purposes; modifying this value has no effect on the registry keys used by Python.</source>
          <target state="translated">Windowsプラットフォームでレジストリキーを形成するために使用されるバージョン番号。これは、Python DLLに文字列リソース1000として格納されます。通常、値は&lt;a href=&quot;#sys.version&quot;&gt; &lt;code&gt;version&lt;/code&gt; の&lt;/a&gt;最初の3文字です。これは、情報提供を目的として&lt;a href=&quot;#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; &lt;/a&gt;モジュールで提供されています。この値を変更しても、Pythonで使用されるレジストリキーには影響しません。</target>
        </trans-unit>
        <trans-unit id="fd9dddc1a822657d560f74f81863263cdf639a3e" translate="yes" xml:space="preserve">
          <source>The version of &lt;a href=&quot;#opcode-BUILD_MAP&quot;&gt;&lt;code&gt;BUILD_MAP&lt;/code&gt;&lt;/a&gt; specialized for constant keys. &lt;em&gt;count&lt;/em&gt; values are consumed from the stack. The top element on the stack contains a tuple of keys.</source>
          <target state="translated">定数キーに特化した&lt;a href=&quot;#opcode-BUILD_MAP&quot;&gt; &lt;code&gt;BUILD_MAP&lt;/code&gt; &lt;/a&gt;のバージョン。&lt;em&gt;カウント&lt;/em&gt;値はスタックから消費されます。スタックの一番上の要素には、キーのタプルが含まれています。</target>
        </trans-unit>
        <trans-unit id="7e5971513ba2095f033e5bb93d0a5852c2eeb055" translate="yes" xml:space="preserve">
          <source>The version of &lt;a href=&quot;#opcode-BUILD_MAP&quot;&gt;&lt;code&gt;BUILD_MAP&lt;/code&gt;&lt;/a&gt; specialized for constant keys. Pops the top element on the stack which contains a tuple of keys, then starting from &lt;code&gt;TOS1&lt;/code&gt;, pops &lt;em&gt;count&lt;/em&gt; values to form values in the built dictionary.</source>
          <target state="translated">定数キーに特化した&lt;a href=&quot;#opcode-BUILD_MAP&quot;&gt; &lt;code&gt;BUILD_MAP&lt;/code&gt; &lt;/a&gt;のバージョン。キーのタプルを含むスタックの最上位要素をポップし、 &lt;code&gt;TOS1&lt;/code&gt; から開始して、&lt;em&gt;カウント&lt;/em&gt;値をポップして、構築されたディクショナリの値を形成します。</target>
        </trans-unit>
        <trans-unit id="5bb4e85c9ec212eecd8d18482a8624ea4b9d922a" translate="yes" xml:space="preserve">
          <source>The version of the Unicode database used in this module.</source>
          <target state="translated">このモジュールで使用されているUnicodeデータベースのバージョン。</target>
        </trans-unit>
        <trans-unit id="056761a5a01ae0e3f3f5bb2776ef234db9b6782e" translate="yes" xml:space="preserve">
          <source>The version string of the OpenSSL library loaded by the interpreter:</source>
          <target state="translated">インタープリタがロードした OpenSSL ライブラリのバージョン文字列。</target>
        </trans-unit>
        <trans-unit id="68f2bb2ab063964d03cb7301ec9bedfef871e189" translate="yes" xml:space="preserve">
          <source>The version string of the zlib library actually loaded by the interpreter.</source>
          <target state="translated">インタープリタが実際に読み込んだ zlib ライブラリのバージョン文字列。</target>
        </trans-unit>
        <trans-unit id="66895485e5b6e2239606f9c0e8f020dc482fd6aa" translate="yes" xml:space="preserve">
          <source>The version string of the zlib library that was used for building the module. This may be different from the zlib library actually used at runtime, which is available as &lt;a href=&quot;#zlib.ZLIB_RUNTIME_VERSION&quot;&gt;&lt;code&gt;ZLIB_RUNTIME_VERSION&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モジュールの構築に使用されたzlibライブラリのバージョン文字列。これは、実行時に実際に使用されるzlibライブラリとは異なる場合があります。これは、&lt;a href=&quot;#zlib.ZLIB_RUNTIME_VERSION&quot;&gt; &lt;code&gt;ZLIB_RUNTIME_VERSION&lt;/code&gt; &lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="4a928dd1d5b35bf2574f665823c8388fc665c61e" translate="yes" xml:space="preserve">
          <source>The virtual screen may be updated by a &lt;a href=&quot;#curses.window.noutrefresh&quot;&gt;&lt;code&gt;noutrefresh()&lt;/code&gt;&lt;/a&gt; call after write operations such as &lt;a href=&quot;#curses.window.addstr&quot;&gt;&lt;code&gt;addstr()&lt;/code&gt;&lt;/a&gt; have been performed on a window. The normal &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt; call is simply &lt;code&gt;noutrefresh()&lt;/code&gt; followed by &lt;code&gt;doupdate()&lt;/code&gt;; if you have to update multiple windows, you can speed performance and perhaps reduce screen flicker by issuing &lt;code&gt;noutrefresh()&lt;/code&gt; calls on all windows, followed by a single &lt;code&gt;doupdate()&lt;/code&gt;.</source>
          <target state="translated">仮想画面は、ウィンドウで&lt;a href=&quot;#curses.window.addstr&quot;&gt; &lt;code&gt;addstr()&lt;/code&gt; &lt;/a&gt;などの書き込み操作が実行された後に、&lt;a href=&quot;#curses.window.noutrefresh&quot;&gt; &lt;code&gt;noutrefresh()&lt;/code&gt; &lt;/a&gt;呼び出しによって更新される場合があります。通常の&lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt;呼び出しは、単に &lt;code&gt;noutrefresh()&lt;/code&gt; に続いて &lt;code&gt;doupdate()&lt;/code&gt; です。複数のウィンドウを更新する必要がある場合は、すべてのウィンドウで &lt;code&gt;noutrefresh()&lt;/code&gt; 呼び出しを発行し、その後に単一の &lt;code&gt;doupdate()&lt;/code&gt; を発行することで、パフォーマンスを向上させ、画面のちらつきを減らすことができます。</target>
        </trans-unit>
        <trans-unit id="fe10e8128cec2a8b853d046a9f0502bfff7b4b2b" translate="yes" xml:space="preserve">
          <source>The warnings filter controls whether warnings are ignored, displayed, or turned into errors (raising an exception).</source>
          <target state="translated">warnings フィルタは、警告を無視するか、表示するか、エラーにするか (例外を発生させる)を制御します。</target>
        </trans-unit>
        <trans-unit id="81d6c008939066a9c786b974f1a35df744af57e8" translate="yes" xml:space="preserve">
          <source>The warnings filter is initialized by &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; options passed to the Python interpreter command line and the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable. The interpreter saves the arguments for all supplied entries without interpretation in &lt;a href=&quot;sys#sys.warnoptions&quot;&gt;&lt;code&gt;sys.warnoptions&lt;/code&gt;&lt;/a&gt;; the &lt;a href=&quot;#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; module parses these when it is first imported (invalid options are ignored, after printing a message to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">警告フィルターは、Pythonインタープリターコマンドラインに渡される&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;オプションと&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt;環境変数によって初期化されます。インタープリターは、&lt;a href=&quot;sys#sys.warnoptions&quot;&gt; &lt;code&gt;sys.warnoptions&lt;/code&gt; に&lt;/a&gt;解釈せずに、提供されたすべてのエントリーの引数を保存します。&lt;a href=&quot;#module-warnings&quot;&gt; &lt;code&gt;warnings&lt;/code&gt; &lt;/a&gt;、それが最初にインポートされたときにモジュールは、（無効なオプションがにメッセージを印刷した後、無視されているこれらを解析&lt;a href=&quot;sys#sys.stderr&quot;&gt; &lt;code&gt;sys.stderr&lt;/code&gt; を持ち&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="68eed415d9086a5dea30cb8df62a2a15e9f46d08" translate="yes" xml:space="preserve">
          <source>The warnings filter is initialized by &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; options passed to the Python interpreter command line and the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable. The interpreter saves the arguments for all supplied entries without interpretation in &lt;a href=&quot;sys#sys.warnoptions&quot;&gt;&lt;code&gt;sys.warnoptions&lt;/code&gt;&lt;/a&gt;; the &lt;a href=&quot;#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; module parses these when it is first imported (invalid options are ignored, after printing a message to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">警告フィルターは、Pythonインタープリターコマンドラインに渡される&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;オプションと&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt;環境変数によって初期化されます。インタプリタは、提供されたすべてのエントリの引数を、&lt;a href=&quot;sys#sys.warnoptions&quot;&gt; &lt;code&gt;sys.warnoptions&lt;/code&gt; に&lt;/a&gt;解釈せずに保存します。&lt;a href=&quot;#module-warnings&quot;&gt; &lt;code&gt;warnings&lt;/code&gt; &lt;/a&gt;、それが最初にインポートされたときにモジュールは、（無効なオプションがにメッセージを印刷した後、無視されているこれらを解析&lt;a href=&quot;sys#sys.stderr&quot;&gt; &lt;code&gt;sys.stderr&lt;/code&gt; を持ち&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f2742895327f8f1c5d2fcfda5a226fa7f537c878" translate="yes" xml:space="preserve">
          <source>The watcher avoids disrupting other code spawning processes by polling every process explicitly on a &lt;code&gt;SIGCHLD&lt;/code&gt; signal.</source>
          <target state="translated">ウォッチャーは、 &lt;code&gt;SIGCHLD&lt;/code&gt; シグナルですべてのプロセスを明示的にポーリングすることにより、他のコード生成プロセスの混乱を回避します。</target>
        </trans-unit>
        <trans-unit id="10a8f59f5f02b63085e6b7ff709cd3f0f1ce5558" translate="yes" xml:space="preserve">
          <source>The way &lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt;&lt;code&gt;mock_calls&lt;/code&gt;&lt;/a&gt; are recorded means that where nested calls are made, the parameters of ancestor calls are not recorded and so will always compare equal:</source>
          <target state="translated">道の&lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt; &lt;code&gt;mock_calls&lt;/code&gt; は&lt;/a&gt;、ネストされたコールが行われた場合は、祖先の呼び出しのパラメータが記録されていないことを意味し記録されているので、常に等しいとなります。</target>
        </trans-unit>
        <trans-unit id="07fd27b7e683afd9d6a2777d2e2bc0e02e57826f" translate="yes" xml:space="preserve">
          <source>The widget state is a bitmap of independent state flags.</source>
          <target state="translated">ウィジェットの状態は、独立した状態フラグのビットマップです。</target>
        </trans-unit>
        <trans-unit id="ad9e57f84a79be5923c4fad7f02f67bfce0d0138" translate="yes" xml:space="preserve">
          <source>The widget&amp;rsquo;s value is invalid</source>
          <target state="translated">ウィジェットの値が無効です</target>
        </trans-unit>
        <trans-unit id="7a5decf7ad4f9356a33597c56799bfaaba97e9ea" translate="yes" xml:space="preserve">
          <source>The width of the column in pixels.</source>
          <target state="translated">列の幅をピクセル単位で指定します。</target>
        </trans-unit>
        <trans-unit id="4be2057a0cedbaf57fa943fdd00e63d3ccac6ee5" translate="yes" xml:space="preserve">
          <source>The wrapped function is instrumented with a &lt;code&gt;cache_parameters()&lt;/code&gt; function that returns a new &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; showing the values for &lt;em&gt;maxsize&lt;/em&gt; and &lt;em&gt;typed&lt;/em&gt;. This is for information purposes only. Mutating the values has no effect.</source>
          <target state="translated">ラップされた関数には、&lt;em&gt;maxsize&lt;/em&gt;と&lt;em&gt;typedの&lt;/em&gt;値を示す新しい&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;を返す &lt;code&gt;cache_parameters()&lt;/code&gt; 関数が組み込ま&lt;em&gt;れてい&lt;/em&gt;ます。これは情報提供のみを目的としています。値を変更しても効果はありません。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f13a55fc25371355d16c8ccfbb2ea8fb626f5b8b" translate="yes" xml:space="preserve">
          <source>The zero-based Julian day (0 &amp;lt;= &lt;em&gt;n&lt;/em&gt; &amp;lt;= 365). Leap days are counted, and it is possible to refer to February 29.</source>
          <target state="translated">ゼロベースのユリウス日（0 &amp;lt;= &lt;em&gt;n&lt;/em&gt; &amp;lt;= 365）。うるう日をカウントし、2月29日を参照することが可能です。</target>
        </trans-unit>
        <trans-unit id="38a94f537c497bc41758e7de7dc18b5dc9e5aa4b" translate="yes" xml:space="preserve">
          <source>The zip file format allows arbitrary data to be prepended to a zip file. The zip application format uses this ability to prepend a standard POSIX &amp;ldquo;shebang&amp;rdquo; line to the file (&lt;code&gt;#!/path/to/interpreter&lt;/code&gt;).</source>
          <target state="translated">zipファイル形式では、zipファイルの前に任意のデータを追加できます。zipアプリケーション形式は、この機能を使用して、ファイルに標準POSIX「shebang」行を付加します（ &lt;code&gt;#!/path/to/interpreter&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5e0f5450f31911228fbdcb1860dad56d3814c81e" translate="yes" xml:space="preserve">
          <source>The zlib library home page.</source>
          <target state="translated">zlib ライブラリのホームページです。</target>
        </trans-unit>
        <trans-unit id="8affd2d9f0cad819c09a176405cd6b5206cef756" translate="yes" xml:space="preserve">
          <source>The zlib manual explains the semantics and usage of the library&amp;rsquo;s many functions.</source>
          <target state="translated">zlibマニュアルは、ライブラリの多くの関数のセマンティクスと使用法を説明しています。</target>
        </trans-unit>
        <trans-unit id="190b6a003d5b9ea453b301c3e6ce588721c176be" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;B&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__radd__&quot;&gt;&lt;code&gt;__radd__()&lt;/code&gt;&lt;/a&gt; gets a chance. If it accepts &lt;code&gt;a&lt;/code&gt;, all is well.</source>
          <target state="translated">次に、 &lt;code&gt;B&lt;/code&gt; の&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__radd__&quot;&gt; &lt;code&gt;__radd__()&lt;/code&gt; &lt;/a&gt;がチャンスを得ます。それが受け入れた場合、すべてが順調です。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f1e41ec37276bd4db3f77340d349801df4b385c" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;B&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__radd__&quot;&gt;&lt;code&gt;__radd__()&lt;/code&gt;&lt;/a&gt; gets a chance. If it accepts &lt;code&gt;a&lt;/code&gt;, all is well.</source>
          <target state="translated">次に、 &lt;code&gt;B&lt;/code&gt; の&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__radd__&quot;&gt; &lt;code&gt;__radd__()&lt;/code&gt; &lt;/a&gt;にチャンスがあります。それが受け入れた場合、すべてが順調です。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58f3cfe2af54d2f5c805181fe58a7558eae8452c" translate="yes" xml:space="preserve">
          <source>Then an interactive Python session may look like this:</source>
          <target state="translated">そうすると、対話型のPythonセッションは次のようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c575aa8053687837f8a56e8486b23babe4c92cdd" translate="yes" xml:space="preserve">
          <source>Then follows a blank line signifying the end of the headers, and then the contents of the file are output. If the file&amp;rsquo;s MIME type starts with &lt;code&gt;text/&lt;/code&gt; the file is opened in text mode; otherwise binary mode is used.</source>
          <target state="translated">次に、ヘッダーの終わりを示す空白行が続き、ファイルの内容が出力されます。ファイルのMIMEタイプが &lt;code&gt;text/&lt;/code&gt; 始まる場合、ファイルはテキストモードで開かれます。それ以外の場合は、バイナリモードが使用されます。</target>
        </trans-unit>
        <trans-unit id="e0f553f569d6ec90354bbb3b909858d32b9e9096" translate="yes" xml:space="preserve">
          <source>Then the following version-specific directories are added to &lt;code&gt;sys.path&lt;/code&gt;, in this order:</source>
          <target state="translated">次に、次のバージョン固有のディレクトリが &lt;code&gt;sys.path&lt;/code&gt; にこの順序で追加されます。</target>
        </trans-unit>
        <trans-unit id="82f978014fab5239e5ba8297d9634d6b6d533b89" translate="yes" xml:space="preserve">
          <source>Then use &lt;em&gt;code&lt;/em&gt; as the encoding for &lt;a href=&quot;stdtypes#str.encode&quot;&gt;&lt;code&gt;str.encode()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="translated">次に、&lt;a href=&quot;stdtypes#str.encode&quot;&gt; &lt;code&gt;str.encode()&lt;/code&gt; &lt;/a&gt;呼び出しのエンコーディングとして&lt;em&gt;コード&lt;/em&gt;を使用し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9e9915c4a4ddc41d5c5b32ca75771fe219177f58" translate="yes" xml:space="preserve">
          <source>Then when you inherit from &lt;code&gt;AutoNumber&lt;/code&gt; you can write your own &lt;code&gt;__init__&lt;/code&gt; to handle any extra arguments:</source>
          <target state="translated">次に、 &lt;code&gt;AutoNumber&lt;/code&gt; から継承するときに、独自の &lt;code&gt;__init__&lt;/code&gt; を記述して、追加の引数を処理できます。</target>
        </trans-unit>
        <trans-unit id="e5799d48128610654dfc6147c53f4b2206c78fb2" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll read data from the &lt;code&gt;connstream&lt;/code&gt; and do something with it till you are finished with the client (or the client is finished with you):</source>
          <target state="translated">次に、 &lt;code&gt;connstream&lt;/code&gt; からデータを読み取り、クライアントが終了するまで（またはクライアントが終了するまで）何かを行います。</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="5b1e898fc07d61e53c63f3002ef704c95490010b" translate="yes" xml:space="preserve">
          <source>Theory</source>
          <target state="translated">Theory</target>
        </trans-unit>
        <trans-unit id="7fa259f892d2f161a72fca4bf8158be9adf1787b" translate="yes" xml:space="preserve">
          <source>There are 5 different cases for a mixed-type operation on subclasses of &lt;a href=&quot;#numbers.Complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt;. I&amp;rsquo;ll refer to all of the above code that doesn&amp;rsquo;t refer to &lt;code&gt;MyIntegral&lt;/code&gt; and &lt;code&gt;OtherTypeIKnowAbout&lt;/code&gt; as &amp;ldquo;boilerplate&amp;rdquo;. &lt;code&gt;a&lt;/code&gt; will be an instance of &lt;code&gt;A&lt;/code&gt;, which is a subtype of &lt;a href=&quot;#numbers.Complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;a : A &amp;lt;: Complex&lt;/code&gt;), and &lt;code&gt;b : B &amp;lt;:
Complex&lt;/code&gt;. I&amp;rsquo;ll consider &lt;code&gt;a + b&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#numbers.Complex&quot;&gt; &lt;code&gt;Complex&lt;/code&gt; の&lt;/a&gt;サブクラスでの混合型操作には、5つの異なるケースがあります。 &lt;code&gt;MyIntegral&lt;/code&gt; および &lt;code&gt;OtherTypeIKnowAbout&lt;/code&gt; を参照しない上記のすべてのコードを「ボイラープレート」と呼びます。 &lt;code&gt;a&lt;/code&gt; は&lt;a href=&quot;#numbers.Complex&quot;&gt; &lt;code&gt;Complex&lt;/code&gt; の&lt;/a&gt;サブタイプである &lt;code&gt;A&lt;/code&gt; のインスタンス（ &lt;code&gt;a : A &amp;lt;: Complex&lt;/code&gt; ）、および &lt;code&gt;b : B &amp;lt;: Complex&lt;/code&gt; です。私は &lt;code&gt;a + b&lt;/code&gt; 考えます：</target>
        </trans-unit>
        <trans-unit id="3f8916b69856c2223ef6abca8e6fa0e94754e630" translate="yes" xml:space="preserve">
          <source>There are a couple of useful utilities provided in the &lt;a href=&quot;#module-email.utils&quot;&gt;&lt;code&gt;email.utils&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">&lt;a href=&quot;#module-email.utils&quot;&gt; &lt;code&gt;email.utils&lt;/code&gt; &lt;/a&gt;モジュールには、便利なユーティリティがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="db73f983c1ef412f0f0bf991d5c7b1526f785874" translate="yes" xml:space="preserve">
          <source>There are a few different ways of resolving this problem. The easiest, but not necessarily the least annoying, way is to simply set the required attributes on the mock after creation. Just because &lt;em&gt;autospec&lt;/em&gt; doesn&amp;rsquo;t allow you to fetch attributes that don&amp;rsquo;t exist on the spec it doesn&amp;rsquo;t prevent you setting them:</source>
          <target state="translated">この問題を解決する方法はいくつかあります。最も簡単ですが、必ずしも面倒ではありませんが、作成後にモックに必要な属性を設定するだけです。理由だけで&lt;em&gt;autospecは、&lt;/em&gt;あなたがそれはあなたがそれらを設定防ぐことはできませんスペック上に存在しない属性を取得することはできません。</target>
        </trans-unit>
        <trans-unit id="d3aeadae92ca7f5170f43648b0bf091b7291fb4d" translate="yes" xml:space="preserve">
          <source>There are a few extra restriction which don&amp;rsquo;t apply to the &lt;em&gt;fork&lt;/em&gt; start method.</source>
          <target state="translated">&lt;em&gt;fork&lt;/em&gt; startメソッドに適用されないいくつかの追加の制限があります。</target>
        </trans-unit>
        <trans-unit id="d38135d96a58a5ba6397af560568ea76e6c5aa3e" translate="yes" xml:space="preserve">
          <source>There are a few things to note about this module which are important to making use of the data structures created. This is not a tutorial on editing the parse trees for Python code, but some examples of using the &lt;a href=&quot;#module-parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; module are presented.</source>
          <target state="translated">作成されたデータ構造を利用するために重要な、このモジュールについて注意すべきことがいくつかあります。これはPythonコードの解析ツリーの編集に関するチュートリアルではありませんが、&lt;a href=&quot;#module-parser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt;モジュールの使用例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="6a6fd0b5587b688c222bcb3323758db69747ea41" translate="yes" xml:space="preserve">
          <source>There are a few tools to extract the strings meant for translation. The original GNU &lt;strong&gt;gettext&lt;/strong&gt; only supported C or C++ source code but its extended version &lt;strong&gt;xgettext&lt;/strong&gt; scans code written in a number of languages, including Python, to find strings marked as translatable. &lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt; is a Python internationalization library that includes a &lt;code&gt;pybabel&lt;/code&gt; script to extract and compile message catalogs. Fran&amp;ccedil;ois Pinard&amp;rsquo;s program called &lt;strong&gt;xpot&lt;/strong&gt; does a similar job and is available as part of his &lt;a href=&quot;https://github.com/pinard/po-utils&quot;&gt;po-utils package&lt;/a&gt;.</source>
          <target state="translated">翻訳用の文字列を抽出するためのツールがいくつかあります。元のGNU &lt;strong&gt;gettext&lt;/strong&gt;はCまたはC ++ソースコードのみをサポートしていましたが、拡張バージョンの&lt;strong&gt;xgettext&lt;/strong&gt;は、Pythonを含む多数の言語で記述されたコードをスキャンして、翻訳可能とマークされた文字列を検索します。&lt;a href=&quot;http://babel.pocoo.org/&quot;&gt;Babel&lt;/a&gt;は、メッセージカタログを抽出してコンパイルする &lt;code&gt;pybabel&lt;/code&gt; スクリプトを含むPython国際化ライブラリです。&lt;strong&gt;xpot&lt;/strong&gt;と呼ばれるFran&amp;ccedil;oisPinardのプログラムは同様の仕事をし、彼の&lt;a href=&quot;https://github.com/pinard/po-utils&quot;&gt;po-utilsパッケージの&lt;/a&gt;一部として利用可能です。</target>
        </trans-unit>
        <trans-unit id="26f97faaa25467594fb9160eb8740b560db6b4f9" translate="yes" xml:space="preserve">
          <source>There are a few utility functions for framework authors to enable control-c handling functionality within test frameworks.</source>
          <target state="translated">フレームワークの作者がテストフレームワーク内でコントロールcを扱う機能を有効にするための、いくつかのユーティリティ関数があります。</target>
        </trans-unit>
        <trans-unit id="c0bb7e25ceb0ffba66ad1c049f198424ce2c3808" translate="yes" xml:space="preserve">
          <source>There are a number of built-in exceptions that represent warning categories. This categorization is useful to be able to filter out groups of warnings.</source>
          <target state="translated">警告のカテゴリを表す組み込みの例外がいくつかあります。この分類は、警告のグループをフィルタリングするのに便利です。</target>
        </trans-unit>
        <trans-unit id="ab4deb2b4c65697178a9e91e651f82ce32bff537" translate="yes" xml:space="preserve">
          <source>There are a number of other caveats:</source>
          <target state="translated">他にもいくつかの注意点があります。</target>
        </trans-unit>
        <trans-unit id="740a6e1a370e644b8acad66b626c4251477d08b6" translate="yes" xml:space="preserve">
          <source>There are a number of uses for the &lt;em&gt;func&lt;/em&gt; argument. It can be set to &lt;a href=&quot;functions#min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt; for a running minimum, &lt;a href=&quot;functions#max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; for a running maximum, or &lt;a href=&quot;operator#operator.mul&quot;&gt;&lt;code&gt;operator.mul()&lt;/code&gt;&lt;/a&gt; for a running product. Amortization tables can be built by accumulating interest and applying payments. First-order &lt;a href=&quot;https://en.wikipedia.org/wiki/Recurrence_relation&quot;&gt;recurrence relations&lt;/a&gt; can be modeled by supplying the initial value in the iterable and using only the accumulated total in &lt;em&gt;func&lt;/em&gt; argument:</source>
          <target state="translated">&lt;em&gt;func&lt;/em&gt;引数には多くの用途があります。これは、に設定することができる&lt;a href=&quot;functions#min&quot;&gt; &lt;code&gt;min()&lt;/code&gt; &lt;/a&gt;、ランニング最低&lt;a href=&quot;functions#max&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt;実行最大、又はため&lt;a href=&quot;operator#operator.mul&quot;&gt; &lt;code&gt;operator.mul()&lt;/code&gt; &lt;/a&gt;実行して製品の。償却表は、利息を累積して支払いを適用することにより作成できます。 1次の&lt;a href=&quot;https://en.wikipedia.org/wiki/Recurrence_relation&quot;&gt;反復関係&lt;/a&gt;は、イテラブルで初期値を指定し、&lt;em&gt;func&lt;/em&gt;引数の累積合計のみを使用してモデル化できます。</target>
        </trans-unit>
        <trans-unit id="6d2c1754d16fc36acf6343a01e5a606d44c91330" translate="yes" xml:space="preserve">
          <source>There are actually two parser interfaces available for use, the &lt;a href=&quot;#email.parser.Parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt; API and the incremental &lt;a href=&quot;#email.parser.FeedParser&quot;&gt;&lt;code&gt;FeedParser&lt;/code&gt;&lt;/a&gt; API. The &lt;a href=&quot;#email.parser.Parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt; API is most useful if you have the entire text of the message in memory, or if the entire message lives in a file on the file system. &lt;a href=&quot;#email.parser.FeedParser&quot;&gt;&lt;code&gt;FeedParser&lt;/code&gt;&lt;/a&gt; is more appropriate when you are reading the message from a stream which might block waiting for more input (such as reading an email message from a socket). The &lt;a href=&quot;#email.parser.FeedParser&quot;&gt;&lt;code&gt;FeedParser&lt;/code&gt;&lt;/a&gt; can consume and parse the message incrementally, and only returns the root object when you close the parser.</source>
          <target state="translated">実際には、&lt;a href=&quot;#email.parser.Parser&quot;&gt; &lt;code&gt;Parser&lt;/code&gt; &lt;/a&gt; APIとインクリメンタル&lt;a href=&quot;#email.parser.FeedParser&quot;&gt; &lt;code&gt;FeedParser&lt;/code&gt; &lt;/a&gt; APIの2つのパーサーインターフェイスを使用できます。&lt;a href=&quot;#email.parser.Parser&quot;&gt; &lt;code&gt;Parser&lt;/code&gt; &lt;/a&gt; APIを使用すると、メモリ内のメッセージのテキスト全体を持っている場合、最も有用である、またはファイルシステム上のファイルにメッセージ全体の生活であれば。&lt;a href=&quot;#email.parser.FeedParser&quot;&gt; &lt;code&gt;FeedParser&lt;/code&gt; &lt;/a&gt;は、より多くの入力の待機をブロックする可能性のあるストリームからメッセージを読み取る場合（ソケットからの電子メールメッセージの読み取りなど）に適しています。&lt;a href=&quot;#email.parser.FeedParser&quot;&gt; &lt;code&gt;FeedParser&lt;/code&gt; は&lt;/a&gt;消費し、インクリメンタルにメッセージを解析し、あなたはパーサを閉じたときにのみ、ルートオブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="039266eeef2dff97e5e5130bed399d4f0600c2da" translate="yes" xml:space="preserve">
          <source>There are all kinds of additional metadata available on the &lt;code&gt;Distribution&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;Distribution&lt;/code&gt; インスタンスでは、あらゆる種類の追加のメタデータを利用できます。</target>
        </trans-unit>
        <trans-unit id="ddebb36a5d0bbfeddcd3da60a21d96401142db63" translate="yes" xml:space="preserve">
          <source>There are also experimental methods that give this class more mapping behavior. You can use them or you can use the standardized &lt;code&gt;getAttribute*()&lt;/code&gt; family of methods on the &lt;code&gt;Element&lt;/code&gt; objects.</source>
          <target state="translated">このクラスにより多くのマッピング動作を提供する実験的なメソッドもあります。それらを使用するか、 &lt;code&gt;Element&lt;/code&gt; オブジェクトでメソッドの標準化された &lt;code&gt;getAttribute*()&lt;/code&gt; ファミリーを使用できます。</target>
        </trans-unit>
        <trans-unit id="1bc97db34ca865c4f6e13f984f32b85cf0430a9c" translate="yes" xml:space="preserve">
          <source>There are also other methods used to perform more specific checks, such as:</source>
          <target state="translated">他にも、以下のようなより具体的なチェックを行うために使用される方法があります。</target>
        </trans-unit>
        <trans-unit id="dd66bff89abb178647e31e8d7b36f2b277e325f3" translate="yes" xml:space="preserve">
          <source>There are also several readonly attributes available:</source>
          <target state="translated">リードオンリー属性もいくつか用意されています。</target>
        </trans-unit>
        <trans-unit id="4dbe98b62c6ac402e4adf807336479d380787150" translate="yes" xml:space="preserve">
          <source>There are also specific options for tabs:</source>
          <target state="translated">タブには具体的なオプションもあります。</target>
        </trans-unit>
        <trans-unit id="64b4683225cbfb5d8247369d9cbda217bda79fc7" translate="yes" xml:space="preserve">
          <source>There are also variants of these methods that simply return a string instead of printing it:</source>
          <target state="translated">これらのメソッドには、単に文字列を印刷する代わりに文字列を返すだけのものもあります。</target>
        </trans-unit>
        <trans-unit id="c959f4df3c12c67509677745222747e6ef2cf83a" translate="yes" xml:space="preserve">
          <source>There are cases, however, when applications need to use prefixes in character data or in attribute values, where they cannot safely be expanded automatically; the &lt;a href=&quot;#xml.sax.handler.ContentHandler.startPrefixMapping&quot;&gt;&lt;code&gt;startPrefixMapping()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#xml.sax.handler.ContentHandler.endPrefixMapping&quot;&gt;&lt;code&gt;endPrefixMapping()&lt;/code&gt;&lt;/a&gt; events supply the information to the application to expand prefixes in those contexts itself, if necessary.</source>
          <target state="translated">ただし、アプリケーションが文字データまたは属性値で接頭辞を使用する必要がある場合は、安全に自動的に拡張することができません。&lt;a href=&quot;#xml.sax.handler.ContentHandler.startPrefixMapping&quot;&gt; &lt;code&gt;startPrefixMapping()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#xml.sax.handler.ContentHandler.endPrefixMapping&quot;&gt; &lt;code&gt;endPrefixMapping()&lt;/code&gt; &lt;/a&gt;イベントは、必要に応じて、これらの状況で自分自身をプレフィックスを拡大するアプリケーションに情報を提供します。</target>
        </trans-unit>
        <trans-unit id="8ba631db31ee48915b3b121db2e36c181d8ccc00" translate="yes" xml:space="preserve">
          <source>There are certain guidelines and idioms which should be adhered to when using &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;を使用する際に従うべき特定のガイドラインとイディオムがあります。</target>
        </trans-unit>
        <trans-unit id="827dd66505bcf022799f1772f83bac7872cd90a3" translate="yes" xml:space="preserve">
          <source>There are currently 6 different protocols which can be used for pickling. The higher the protocol used, the more recent the version of Python needed to read the pickle produced.</source>
          <target state="translated">現在、ピクルスに使用できるプロトコルは6種類あります。使用されているプロトコルが高ければ高いほど、生成されたピクルスを読むために必要なPythonの最新バージョンが必要になります。</target>
        </trans-unit>
        <trans-unit id="ead616e7256dcb5719abe40d028e6090d64aa306" translate="yes" xml:space="preserve">
          <source>There are currently two built-in set types, &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; type is mutable &amp;mdash; the contents can be changed using methods like &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;remove()&lt;/code&gt;. Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; type is immutable and &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt; &amp;mdash; its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set.</source>
          <target state="translated">現在、&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; の&lt;/a&gt; 2つの組み込みセットタイプがあります。&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;タイプは変更可能であり、 -コンテンツのような方法を使用して変更することができる &lt;code&gt;add()&lt;/code&gt; および &lt;code&gt;remove()&lt;/code&gt; 変更可能であるため、ハッシュ値がなく、辞書キーとしても別のセットの要素としても使用できません。&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; のの&lt;/a&gt;タイプは不変となる&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;ハッシュ可能&lt;/a&gt; -それが作成された後、その内容を変更することはできません。したがって、辞書キーまたは別のセットの要素として使用できます。</target>
        </trans-unit>
        <trans-unit id="25dd1db02d57c5f3fcb570b27f1ec4c898afb3f1" translate="yes" xml:space="preserve">
          <source>There are currently two built-in set types, &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; type is mutable &amp;mdash; the contents can be changed using methods like &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;remove()&lt;/code&gt;. Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; type is immutable and &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt; &amp;mdash; its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set.</source>
          <target state="translated">現在、&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; の&lt;/a&gt;2つの組み込みセットタイプがあります。&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;タイプは変更可能であり、 -コンテンツのような方法を使用して変更することができる &lt;code&gt;add()&lt;/code&gt; および &lt;code&gt;remove()&lt;/code&gt; 変更可能であるため、ハッシュ値がなく、辞書キーまたは別のセットの要素として使用することはできません。&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; のの&lt;/a&gt;タイプは不変となる&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-hashable&quot;&gt;ハッシュ可能&lt;/a&gt;-それが作成された後、その内容を変更することはできません。したがって、辞書キーとして、または別のセットの要素として使用できます。</target>
        </trans-unit>
        <trans-unit id="d7e48ec5af476b663fb0695c8e11aa6c35b465db" translate="yes" xml:space="preserve">
          <source>There are default adapters for the date and datetime types in the datetime module. They will be sent as ISO dates/ISO timestamps to SQLite.</source>
          <target state="translated">datetimeモジュールには、dateとdatetimeの型に対応したデフォルトのアダプタがあります。これらはISOの日付/ISOのタイムスタンプとしてSQLiteに送信されます。</target>
        </trans-unit>
        <trans-unit id="c9f000a68af366a9a5eefed22b9b119e2b234e96" translate="yes" xml:space="preserve">
          <source>There are eight built-in, named bitmaps: &lt;code&gt;'error'&lt;/code&gt;, &lt;code&gt;'gray25'&lt;/code&gt;, &lt;code&gt;'gray50'&lt;/code&gt;, &lt;code&gt;'hourglass'&lt;/code&gt;, &lt;code&gt;'info'&lt;/code&gt;, &lt;code&gt;'questhead'&lt;/code&gt;, &lt;code&gt;'question'&lt;/code&gt;, &lt;code&gt;'warning'&lt;/code&gt;. To specify an X bitmap filename, give the full path to the file, preceded with an &lt;code&gt;@&lt;/code&gt;, as in &lt;code&gt;&quot;@/usr/contrib/bitmap/gumby.bit&quot;&lt;/code&gt;.</source>
          <target state="translated">8つの組み込みの名前付きビットマップがあります： &lt;code&gt;'error'&lt;/code&gt; 、 &lt;code&gt;'gray25'&lt;/code&gt; 、 &lt;code&gt;'gray50'&lt;/code&gt; 、 &lt;code&gt;'hourglass'&lt;/code&gt; 、 &lt;code&gt;'info'&lt;/code&gt; 、 &lt;code&gt;'questhead'&lt;/code&gt; 、 &lt;code&gt;'question'&lt;/code&gt; 、 &lt;code&gt;'warning'&lt;/code&gt; 。 Xビットマップファイル名を指定するには、 &lt;code&gt;&quot;@/usr/contrib/bitmap/gumby.bit&quot;&lt;/code&gt; ように、 &lt;code&gt;@&lt;/code&gt; を前に付けてファイルのフルパスを指定します。</target>
        </trans-unit>
        <trans-unit id="cdfda48041a9be25615bc1e181ea720f1ed03d01" translate="yes" xml:space="preserve">
          <source>There are eight comparison operations in Python. They all have the same priority (which is higher than that of the Boolean operations). Comparisons can be chained arbitrarily; for example, &lt;code&gt;x &amp;lt; y &amp;lt;= z&lt;/code&gt; is equivalent to &lt;code&gt;x &amp;lt; y and
y &amp;lt;= z&lt;/code&gt;, except that &lt;em&gt;y&lt;/em&gt; is evaluated only once (but in both cases &lt;em&gt;z&lt;/em&gt; is not evaluated at all when &lt;code&gt;x &amp;lt; y&lt;/code&gt; is found to be false).</source>
          <target state="translated">Pythonには8つの比較演算があります。それらはすべて同じ優先順位（ブール演算の優先順位より高い）を持っています。比較は任意に連鎖できます。たとえば、 &lt;code&gt;x &amp;lt; y &amp;lt;= z&lt;/code&gt; は、 &lt;code&gt;x &amp;lt; y and y &amp;lt;= z&lt;/code&gt; 同等ですが、&lt;em&gt;y&lt;/em&gt;は1回だけ評価されます（ただし、 &lt;code&gt;x &amp;lt; y&lt;/code&gt; がfalseであると判明した場合、&lt;em&gt;z&lt;/em&gt;はまったく評価されません）。</target>
        </trans-unit>
        <trans-unit id="6ba9237bbf2789014dc169fd8c3d198b4953c139" translate="yes" xml:space="preserve">
          <source>There are five classes in an inheritance diagram, four of which represent synchronous servers of four types:</source>
          <target state="translated">継承図には5つのクラスがあり、そのうち4つは4種類の同期サーバを表しています。</target>
        </trans-unit>
        <trans-unit id="121f7346d52a69a5317d8485ce670ca978d629c2" translate="yes" xml:space="preserve">
          <source>There are four basic concrete server classes:</source>
          <target state="translated">基本的な具体的なサーバクラスは4つあります。</target>
        </trans-unit>
        <trans-unit id="28d84994e74ad89bc8bd10dab4568463a23f06e4" translate="yes" xml:space="preserve">
          <source>There are four keyword arguments in &lt;em&gt;kwargs&lt;/em&gt; which are inspected: &lt;em&gt;exc_info&lt;/em&gt;, &lt;em&gt;stack_info&lt;/em&gt;, &lt;em&gt;stacklevel&lt;/em&gt; and &lt;em&gt;extra&lt;/em&gt;.</source>
          <target state="translated">4つのキーワード引数があります&lt;em&gt;kwargsから&lt;/em&gt;：検査され&lt;em&gt;exc_info&lt;/em&gt;、&lt;em&gt;stack_info&lt;/em&gt;、&lt;em&gt;stacklevel&lt;/em&gt;と&lt;em&gt;余分は&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c8904775f6163564a009e440caf9e4700413f210" translate="yes" xml:space="preserve">
          <source>There are four main kinds of services provided by this module: type checking, getting source code, inspecting classes and functions, and examining the interpreter stack.</source>
          <target state="translated">このモジュールが提供するサービスには、型チェック、ソースコードの取得、クラスや関数の検査、インタプリタスタックの検査の4つの主な種類があります。</target>
        </trans-unit>
        <trans-unit id="607a56c6d25a7712202e05cdfe56d0f4635a21c9" translate="yes" xml:space="preserve">
          <source>There are functions that read/write files as well as functions operating on bytes-like objects.</source>
          <target state="translated">ファイルを読み書きする関数と、バイトライクなオブジェクトを操作する関数があります。</target>
        </trans-unit>
        <trans-unit id="3aa3669afb266251babb0404fcc0d929459102f0" translate="yes" xml:space="preserve">
          <source>There are fundamental differences between the pickle protocols and &lt;a href=&quot;http://json.org&quot;&gt;JSON (JavaScript Object Notation)&lt;/a&gt;:</source>
          <target state="translated">pickleプロトコルと&lt;a href=&quot;http://json.org&quot;&gt;JSON（JavaScript Object Notation）の&lt;/a&gt;間には基本的な違いがあります。</target>
        </trans-unit>
        <trans-unit id="eff3e0b7d4ac0260b5fcec0fd569b30b6694a180" translate="yes" xml:space="preserve">
          <source>There are many useful subclasses of Variable already defined: &lt;code&gt;StringVar&lt;/code&gt;, &lt;code&gt;IntVar&lt;/code&gt;, &lt;code&gt;DoubleVar&lt;/code&gt;, and &lt;code&gt;BooleanVar&lt;/code&gt;. To read the current value of such a variable, call the &lt;code&gt;get()&lt;/code&gt; method on it, and to change its value you call the &lt;code&gt;set()&lt;/code&gt; method. If you follow this protocol, the widget will always track the value of the variable, with no further intervention on your part.</source>
          <target state="translated">：すでに定義された変数の多くの有用なサブクラスがあり &lt;code&gt;StringVar&lt;/code&gt; 、 &lt;code&gt;IntVar&lt;/code&gt; 、 &lt;code&gt;DoubleVar&lt;/code&gt; 、および &lt;code&gt;BooleanVar&lt;/code&gt; は。そのような変数の現在の値を読み取るには、その変数の &lt;code&gt;get()&lt;/code&gt; メソッドを呼び出し、その値を変更するには、 &lt;code&gt;set()&lt;/code&gt; メソッドを呼び出します。このプロトコルに従うと、ウィジェットは常に変数の値を追跡し、ユーザーの介入はありません。</target>
        </trans-unit>
        <trans-unit id="bf2f9d53cf6bf41d410d3108dd0294a79a931d55" translate="yes" xml:space="preserve">
          <source>There are nearly as many INI format variants as there are applications using it. &lt;a href=&quot;#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt; goes a long way to provide support for the largest sensible set of INI styles available. The default functionality is mainly dictated by historical background and it&amp;rsquo;s very likely that you will want to customize some of the features.</source>
          <target state="translated">INI形式のバリアントは、それを使用するアプリケーションの数とほぼ同じです。&lt;a href=&quot;#module-configparser&quot;&gt; &lt;code&gt;configparser&lt;/code&gt; &lt;/a&gt;は、利用可能なINIスタイルの最大の実用的なセットのサポートを提供する長い道のりを進んでいます。デフォルトの機能は、主に歴史的背景によって決定され、一部の機能をカスタマイズする可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="3265267da2983bf14017aa5df9e7283accfab3d4" translate="yes" xml:space="preserve">
          <source>There are only two ways to have a program on a single processor do &amp;ldquo;more than one thing at a time.&amp;rdquo; Multi-threaded programming is the simplest and most popular way to do it, but there is another very different technique, that lets you have nearly all the advantages of multi-threading, without actually using multiple threads. It&amp;rsquo;s really only practical if your program is largely I/O bound. If your program is processor bound, then pre-emptive scheduled threads are probably what you really need. Network servers are rarely processor bound, however.</source>
          <target state="translated">シングルプロセッサ上のプログラムで「一度に複数のこと」を実行するには、2つの方法しかありません。マルチスレッドプログラミングは最も簡単で最も一般的な方法ですが、実際には複数のスレッドを使用せずにマルチスレッドのほとんどすべての利点を利用できる、非常に異なる手法もあります。プログラムが大部分がI / Oバウンドである場合にのみ、実際に実用的です。プログラムがプロセッサにバインドされている場合、プリエンプティブなスケジュールされたスレッドがおそらく本当に必要なものです。ただし、ネットワークサーバーがプロセッサにバインドされることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="634f390469439c342320f71f9c406a991d40d6d4" translate="yes" xml:space="preserve">
          <source>There are others, but you get the idea.</source>
          <target state="translated">他にもありますが、お察しください。</target>
        </trans-unit>
        <trans-unit id="1134b66828043dd74bbedfe812d93fef9cb20d28" translate="yes" xml:space="preserve">
          <source>There are really two flavors of function objects: built-in functions and user-defined functions. Both support the same operation (to call the function), but the implementation is different, hence the different object types.</source>
          <target state="translated">関数オブジェクトには、組み込み関数とユーザー定義関数の2種類があります。どちらも同じ操作(関数を呼び出す)をサポートしていますが、実装は異なります。</target>
        </trans-unit>
        <trans-unit id="c6e44b629dc613ba239924b475b903b7f82838d4" translate="yes" xml:space="preserve">
          <source>There are several equivalent ways to specify IP network masks. A &lt;em&gt;prefix&lt;/em&gt;&lt;code&gt;/&amp;lt;nbits&amp;gt;&lt;/code&gt; is a notation that denotes how many high-order bits are set in the network mask. A &lt;em&gt;net mask&lt;/em&gt; is an IP address with some number of high-order bits set. Thus the prefix &lt;code&gt;/24&lt;/code&gt; is equivalent to the net mask &lt;code&gt;255.255.255.0&lt;/code&gt; in IPv4, or &lt;code&gt;ffff:ff00::&lt;/code&gt; in IPv6. In addition, a &lt;em&gt;host mask&lt;/em&gt; is the logical inverse of a &lt;em&gt;net mask&lt;/em&gt;, and is sometimes used (for example in Cisco access control lists) to denote a network mask. The host mask equivalent to &lt;code&gt;/24&lt;/code&gt; in IPv4 is &lt;code&gt;0.0.0.255&lt;/code&gt;.</source>
          <target state="translated">IPネットワークマスクを指定するには、同等の方法がいくつかあります。 A &lt;em&gt;接頭辞&lt;/em&gt; &lt;code&gt;/&amp;lt;nbits&amp;gt;&lt;/code&gt; 意味は、多くの上位ビットがネットワークマスクに設定されているどのように表記です。&lt;em&gt;ネットマスクは、&lt;/em&gt;上位ビットセットのいくつかの数のIPアドレスです。したがって、接頭辞 &lt;code&gt;/24&lt;/code&gt; は、IPv4のネットマスク &lt;code&gt;255.255.255.0&lt;/code&gt; 、またはIPv6の &lt;code&gt;ffff:ff00::&lt;/code&gt; と同等です。さらに、&lt;em&gt;ホストマスク&lt;/em&gt;は&lt;em&gt;ネットマスクの&lt;/em&gt;論理的な逆であり、ネットワークマスクを表すために（たとえば、Ciscoアクセスコントロールリストで）使用されることがあります。IPv4の &lt;code&gt;/24&lt;/code&gt; に相当するホストマスクは &lt;code&gt;0.0.0.255&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3033320704915eae39fe9125e77acd8933f72624" translate="yes" xml:space="preserve">
          <source>There are several ways to enable asyncio debug mode:</source>
          <target state="translated">asyncio のデバッグモードを有効にする方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="dd3b8d5ccd917cf795ff7b17c62847945d840d34" translate="yes" xml:space="preserve">
          <source>There are several ways to load shared libraries into the Python process. One way is to instantiate one of the following classes:</source>
          <target state="translated">Pythonのプロセスに共有ライブラリをロードする方法はいくつかあります。1つの方法は、以下のクラスのいずれかをインスタンス化することです。</target>
        </trans-unit>
        <trans-unit id="3558a0588ae9ae9394f53aa612b4c8aa871ac418" translate="yes" xml:space="preserve">
          <source>There are some edges in &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; where you might expect something other than what actually happens.</source>
          <target state="translated">&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;には、実際に発生するもの以外のものが予期される可能性のあるエッジがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="672b298f2b28f05dcbc4d251f921b55fca7bb3d1" translate="yes" xml:space="preserve">
          <source>There are some limitations to the process of bundling your application into a single file. In most, if not all, cases they can be addressed without needing major changes to your application.</source>
          <target state="translated">アプリケーションを単一のファイルにバンドルするプロセスにはいくつかの制限があります。すべてではないにしても、ほとんどの場合、アプリケーションに大きな変更を加えることなく対応することができます。</target>
        </trans-unit>
        <trans-unit id="f8efcbf8ecf4671c1e1fcda5c45fbcf4a0ffec20" translate="yes" xml:space="preserve">
          <source>There are some more variants of the tar format which can be read, but not created:</source>
          <target state="translated">tar フォーマットには、読むことはできても、作成することができないものがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="14e72aad41ffed86193f1ed0cab701906fad72ac" translate="yes" xml:space="preserve">
          <source>There are some small differences between arithmetic on Decimal objects and arithmetic on integers and floats. When the remainder operator &lt;code&gt;%&lt;/code&gt; is applied to Decimal objects, the sign of the result is the sign of the &lt;em&gt;dividend&lt;/em&gt; rather than the sign of the divisor:</source>
          <target state="translated">Decimalオブジェクトの演算と、整数および浮動小数点の演算には、いくつかの小さな違いがあります。剰余演算子 &lt;code&gt;%&lt;/code&gt; がDecimalオブジェクトに適用される場合、結果の符号は除数の符号ではなく&lt;em&gt;被除数&lt;/em&gt;の符号になります。</target>
        </trans-unit>
        <trans-unit id="b9b322cbdf6ae8c9c74fcf1ab35d16b9dd8646b3" translate="yes" xml:space="preserve">
          <source>There are three basic sequence types: lists, tuples, and range objects. Additional sequence types tailored for processing of &lt;a href=&quot;#binaryseq&quot;&gt;binary data&lt;/a&gt; and &lt;a href=&quot;#textseq&quot;&gt;text strings&lt;/a&gt; are described in dedicated sections.</source>
          <target state="translated">リスト、タプル、および範囲オブジェクトの3つの基本的なシーケンスタイプがあります。&lt;a href=&quot;#binaryseq&quot;&gt;バイナリデータ&lt;/a&gt;と&lt;a href=&quot;#textseq&quot;&gt;テキスト文字列の&lt;/a&gt;処理用に調整された追加のシーケンスタイプについては、専用のセクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="b817f8bcc6d4362e55e4611c3d0e8efda6956674" translate="yes" xml:space="preserve">
          <source>There are three different ways to call this function:</source>
          <target state="translated">この関数を呼び出すには3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="1b0c875a78b7f62cbc06fe3fdf0cb3be83425f3f" translate="yes" xml:space="preserve">
          <source>There are three distinct numeric types: &lt;em&gt;integers&lt;/em&gt;, &lt;em&gt;floating point numbers&lt;/em&gt;, and &lt;em&gt;complex numbers&lt;/em&gt;. In addition, Booleans are a subtype of integers. Integers have unlimited precision. Floating point numbers are usually implemented using &lt;code&gt;double&lt;/code&gt; in C; information about the precision and internal representation of floating point numbers for the machine on which your program is running is available in &lt;a href=&quot;sys#sys.float_info&quot;&gt;&lt;code&gt;sys.float_info&lt;/code&gt;&lt;/a&gt;. Complex numbers have a real and imaginary part, which are each a floating point number. To extract these parts from a complex number &lt;em&gt;z&lt;/em&gt;, use &lt;code&gt;z.real&lt;/code&gt; and &lt;code&gt;z.imag&lt;/code&gt;. (The standard library includes the additional numeric types &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt;, for rationals, and &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt;, for floating-point numbers with user-definable precision.)</source>
          <target state="translated">数値型には、&lt;em&gt;整数&lt;/em&gt;、&lt;em&gt;浮動小数点数&lt;/em&gt;、&lt;em&gt;複素数の&lt;/em&gt; 3種類があり&lt;em&gt;ます&lt;/em&gt;。さらに、ブール値は整数のサブタイプです。整数の精度は無制限です。浮動小数点数は通常、C では &lt;code&gt;double&lt;/code&gt; を使用して実装されます。プログラムが実行されているマシンの浮動小数点数の精度と内部表現に関する情報は、&lt;a href=&quot;sys#sys.float_info&quot;&gt; &lt;code&gt;sys.float_info&lt;/code&gt; にあり&lt;/a&gt;ます。複素数には実数部と虚数部があり、それぞれ浮動小数点数です。これらの部分を複素数&lt;em&gt;z&lt;/em&gt;から抽出するには、 &lt;code&gt;z.real&lt;/code&gt; および &lt;code&gt;z.imag&lt;/code&gt; を使用します。 （標準ライブラリには、追加の数値タイプが含まれています&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;有理数の場合は fractions.Fraction、ユーザー定義可能な精度の浮動小数点数の場合は&lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="333c521b638ab05e83b6cf3986fc6b02269383b6" translate="yes" xml:space="preserve">
          <source>There are three keyword arguments in &lt;em&gt;kwargs&lt;/em&gt; which are inspected: &lt;em&gt;exc_info&lt;/em&gt; which, if it does not evaluate as false, causes exception information to be added to the logging message. If an exception tuple (in the format returned by &lt;a href=&quot;sys#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;) or an exception instance is provided, it is used; otherwise, &lt;a href=&quot;sys#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt; is called to get the exception information.</source>
          <target state="translated">中3つのキーワード引数があり&lt;em&gt;kwargsから&lt;/em&gt;：検査さ&lt;em&gt;exc_info&lt;/em&gt;それは偽として評価されていない場合、例外情報をログメッセージに追加されます。例外タプル（&lt;a href=&quot;sys#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt;によって返される形式）または例外インスタンスが提供されている場合は、それが使用されます。それ以外の場合は、&lt;a href=&quot;sys#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt;を呼び出して例外情報を取得します。</target>
        </trans-unit>
        <trans-unit id="0d04821ea3634b3338603d35f9ecfca678dbd808" translate="yes" xml:space="preserve">
          <source>There are three main types of &lt;em&gt;awaitable&lt;/em&gt; objects: &lt;strong&gt;coroutines&lt;/strong&gt;, &lt;strong&gt;Tasks&lt;/strong&gt;, and &lt;strong&gt;Futures&lt;/strong&gt;.</source>
          <target state="translated">&lt;em&gt;待機可能な&lt;/em&gt;オブジェクトには、&lt;strong&gt;コルーチン&lt;/strong&gt;、&lt;strong&gt;タスク&lt;/strong&gt;、&lt;strong&gt;フューチャーの&lt;/strong&gt; 3つの主要なタイプが&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9fe52cdc5c5e174e3a2732474be4c6eb0d0cd83e" translate="yes" xml:space="preserve">
          <source>There are three tar formats that can be created with the &lt;a href=&quot;#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">&lt;a href=&quot;#module-tarfile&quot;&gt; &lt;code&gt;tarfile&lt;/code&gt; &lt;/a&gt;モジュールで作成できる3つのtar形式があります。</target>
        </trans-unit>
        <trans-unit id="9f8a6f9ebe421ba57fcfb4b59357400f94e96a60" translate="yes" xml:space="preserve">
          <source>There are times where a configuration needs to refer to objects external to the configuration, for example &lt;code&gt;sys.stderr&lt;/code&gt;. If the configuration dict is constructed using Python code, this is straightforward, but a problem arises when the configuration is provided via a text file (e.g. JSON, YAML). In a text file, there is no standard way to distinguish &lt;code&gt;sys.stderr&lt;/code&gt; from the literal string &lt;code&gt;'sys.stderr'&lt;/code&gt;. To facilitate this distinction, the configuration system looks for certain special prefixes in string values and treat them specially. For example, if the literal string &lt;code&gt;'ext://sys.stderr'&lt;/code&gt; is provided as a value in the configuration, then the &lt;code&gt;ext://&lt;/code&gt; will be stripped off and the remainder of the value processed using normal import mechanisms.</source>
          <target state="translated">構成が、構成の外部にあるオブジェクト（ &lt;code&gt;sys.stderr&lt;/code&gt; など）を参照する必要がある場合があります。構成辞書がPythonコードを使用して構築されている場合、これは簡単ですが、構成がテキストファイル（JSON、YAMLなど）を介して提供されると問題が発生します。テキストファイルでは、 &lt;code&gt;sys.stderr&lt;/code&gt; をリテラル文字列 &lt;code&gt;'sys.stderr'&lt;/code&gt; から区別する標準的な方法はありません。この区別を容易にするために、設定システムは文字列値で特定の特別なプレフィックスを探し、それらを特別に扱います。たとえば、リテラル文字列 &lt;code&gt;'ext://sys.stderr'&lt;/code&gt; が構成の値として提供されている場合、 &lt;code&gt;ext://&lt;/code&gt; 取り除かれ、残りの値は通常のインポートメカニズムを使用して処理されます。</target>
        </trans-unit>
        <trans-unit id="b952a5fd1b6e29bf7f14c99f1285b4bf5b966ccf" translate="yes" xml:space="preserve">
          <source>There are two &lt;code&gt;MagicMock&lt;/code&gt; variants: &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.NonCallableMagicMock&quot;&gt;&lt;code&gt;NonCallableMagicMock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2があり &lt;code&gt;MagicMock&lt;/code&gt; は：バリアント&lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#unittest.mock.NonCallableMagicMock&quot;&gt; &lt;code&gt;NonCallableMagicMock&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1e5423c30972002ca80c24e40aa5624a40bd0af" translate="yes" xml:space="preserve">
          <source>There are two common ways to use this function. In both approaches, you use the fd to wake up when a signal arrives, but then they differ in how they determine &lt;em&gt;which&lt;/em&gt; signal or signals have arrived.</source>
          <target state="translated">この関数を使用する一般的な方法は2つあります。両方のアプローチでは、信号が到着したときに目を覚ますためにFDを使用しますが、その後、彼らはどのように決定するかで異なって&lt;em&gt;いる&lt;/em&gt;到着した信号または信号。</target>
        </trans-unit>
        <trans-unit id="9a9936ddf454d83f25fcc05dfb55a4648a3db888" translate="yes" xml:space="preserve">
          <source>There are two exceptions that may be raised by &lt;a href=&quot;#doctest.DebugRunner&quot;&gt;&lt;code&gt;DebugRunner&lt;/code&gt;&lt;/a&gt; instances:</source>
          <target state="translated">&lt;a href=&quot;#doctest.DebugRunner&quot;&gt; &lt;code&gt;DebugRunner&lt;/code&gt; &lt;/a&gt;インスタンスによって発生する可能性のある2つの例外があります。</target>
        </trans-unit>
        <trans-unit id="5d6e02d2cfc3072839fb97bd9bedd2f8db9ebdbd" translate="yes" xml:space="preserve">
          <source>There are two interfaces provided by this module. The modern interface supports encoding &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; to ASCII &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, and decoding &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; or strings containing ASCII to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;. Both base-64 alphabets defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc3548.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3548&lt;/strong&gt;&lt;/a&gt; (normal, and URL- and filesystem-safe) are supported.</source>
          <target state="translated">このモジュールによって提供される2つのインターフェースがあります。最新のインターフェースは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトの&lt;/a&gt; ASCII &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;へのエンコード、および&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;またはASCIIを含む文字列のバイトへのデコードをサポートしてい&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;https://tools.ietf.org/html/rfc3548.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3548で&lt;/strong&gt;&lt;/a&gt;定義された両方のbase-64アルファベット（通常、およびURLおよびファイルシステムセーフ）がサポートされています。</target>
        </trans-unit>
        <trans-unit id="2f66a95e6684310c68284ed5fc12fb871f267fa3" translate="yes" xml:space="preserve">
          <source>There are two interfaces provided by this module. The modern interface supports encoding &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; to ASCII &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, and decoding &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; or strings containing ASCII to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;. Both base-64 alphabets defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc3548.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3548&lt;/strong&gt;&lt;/a&gt; (normal, and URL- and filesystem-safe) are supported.</source>
          <target state="translated">このモジュールによって提供される2つのインターフェースがあります。最新のインターフェースは、&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトの&lt;/a&gt;ASCII&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;へのエンコード、および&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;またはASCIIを含む文字列のバイトへのデコードをサポートしてい&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;https://tools.ietf.org/html/rfc3548.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3548で&lt;/strong&gt;&lt;/a&gt;定義され&lt;strong&gt;ている&lt;/strong&gt;base-64アルファベット（通常、URLおよびファイルシステムセーフ）の両方がサポートされています。</target>
        </trans-unit>
        <trans-unit id="fa8ad7fa0c084245a8ddab7ad38f2502a86776e1" translate="yes" xml:space="preserve">
          <source>There are two main functions for creating &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; instances from text files and modules with doctests:</source>
          <target state="translated">テキストファイルとdoctestを含むモジュールから&lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt; &lt;code&gt;unittest.TestSuite&lt;/code&gt; &lt;/a&gt;インスタンスを作成するための2つの主要な関数があります。</target>
        </trans-unit>
        <trans-unit id="e0fdb9b9b06f75f219fccefe4c88b64af94e44fb" translate="yes" xml:space="preserve">
          <source>There are two optional keyword-only arguments. The &lt;em&gt;key&lt;/em&gt; argument specifies a one-argument ordering function like that used for &lt;a href=&quot;stdtypes#list.sort&quot;&gt;&lt;code&gt;list.sort()&lt;/code&gt;&lt;/a&gt;. The &lt;em&gt;default&lt;/em&gt; argument specifies an object to return if the provided iterable is empty. If the iterable is empty and &lt;em&gt;default&lt;/em&gt; is not provided, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">2つのオプションのキーワードのみの引数があります。&lt;em&gt;キー&lt;/em&gt;引数が1引数の順序付け関数のために使用されるように指定&lt;a href=&quot;stdtypes#list.sort&quot;&gt; &lt;code&gt;list.sort()&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;デフォルトの&lt;/em&gt;引数は、反復可能が空で提供する場合に返されるオブジェクトを指定します。イテラブルが空で&lt;em&gt;デフォルト&lt;/em&gt;が&lt;em&gt;指定され&lt;/em&gt;ていない場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="40e73167bc2dd539e8cb18681323426ef95edb7e" translate="yes" xml:space="preserve">
          <source>There are two parts to this job:</source>
          <target state="translated">この仕事には2つのパートがあります。</target>
        </trans-unit>
        <trans-unit id="9f617732163ef9ffd09291d0e0a3a8c64bfdd701" translate="yes" xml:space="preserve">
          <source>There are two stages in warning control: first, each time a warning is issued, a determination is made whether a message should be issued or not; next, if a message is to be issued, it is formatted and printed using a user-settable hook.</source>
          <target state="translated">警告制御には2つの段階があります:まず、警告が発行されるたびに、メッセージを発行すべきかどうかの判断が行われます。</target>
        </trans-unit>
        <trans-unit id="bcfdafc8223a5b68a92a7d9394d696f0c5a9a642" translate="yes" xml:space="preserve">
          <source>There are two typical use cases for &lt;em&gt;super&lt;/em&gt;. In a class hierarchy with single inheritance, &lt;em&gt;super&lt;/em&gt; can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of &lt;em&gt;super&lt;/em&gt; in other programming languages.</source>
          <target state="translated">&lt;em&gt;superの&lt;/em&gt;一般的な使用例は2つあります。単一継承のクラス階層では、&lt;em&gt;super&lt;/em&gt;を使用して明示的に名前を付けずに親クラスを参照できるため、コードの保守が容易になります。この使用法は、他のプログラミング言語での&lt;em&gt;super&lt;/em&gt;の使用法とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="00afd891065ebece62243a2dd46e14fbe49e11f8" translate="yes" xml:space="preserve">
          <source>There are two ways to enable the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module to adapt a custom Python type to one of the supported ones.</source>
          <target state="translated">&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールがカスタムPythonタイプをサポートされているものの1つに適応させるには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="f0dd5354b3d81e371357acf3a005a58e85ee468a" translate="yes" xml:space="preserve">
          <source>There are various server methods that can be overridden by subclasses of base server classes like &lt;a href=&quot;#socketserver.TCPServer&quot;&gt;&lt;code&gt;TCPServer&lt;/code&gt;&lt;/a&gt;; these methods aren&amp;rsquo;t useful to external users of the server object.</source>
          <target state="translated">&lt;a href=&quot;#socketserver.TCPServer&quot;&gt; &lt;code&gt;TCPServer&lt;/code&gt; の&lt;/a&gt;ような基本サーバークラスのサブクラスによってオーバーライドできるさまざまなサーバーメソッドがあります。これらのメソッドは、サーバーオブジェクトの外部ユーザーには役立ちません。</target>
        </trans-unit>
        <trans-unit id="4b102f0e1bd4efb4a95d03bb36b1a10aab39e47d" translate="yes" xml:space="preserve">
          <source>There are, however, enough ways to crash Python with &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;, so you should be careful anyway. The &lt;a href=&quot;faulthandler#module-faulthandler&quot;&gt;&lt;code&gt;faulthandler&lt;/code&gt;&lt;/a&gt; module can be helpful in debugging crashes (e.g. from segmentation faults produced by erroneous C library calls).</source>
          <target state="translated">ただし、&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;でPythonをクラッシュさせる方法は十分にあるので、とにかく注意する必要があります。&lt;a href=&quot;faulthandler#module-faulthandler&quot;&gt; &lt;code&gt;faulthandler&lt;/code&gt; &lt;/a&gt;モジュールがクラッシュをデバッグするのに役立つことができる（例えば、誤ったCライブラリの呼び出しによって生成されるセグメンテーション障害から）。</target>
        </trans-unit>
        <trans-unit id="60e879387c2e07da69183eca12d6268a65a716b3" translate="yes" xml:space="preserve">
          <source>There are, of course, more possible ABCs for numbers, and this would be a poor hierarchy if it precluded the possibility of adding those. You can add &lt;code&gt;MyFoo&lt;/code&gt; between &lt;a href=&quot;#numbers.Complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#numbers.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt; with:</source>
          <target state="translated">もちろん、数字にはより多くのABCがあり、それらを追加する可能性を排除すると、これは貧弱な階層になります。 &lt;code&gt;MyFoo&lt;/code&gt; を&lt;a href=&quot;#numbers.Complex&quot;&gt; &lt;code&gt;Complex&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#numbers.Real&quot;&gt; &lt;code&gt;Real&lt;/code&gt; の&lt;/a&gt;間に追加するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7e142c652134bf8d6bf541d434c33320b8252989" translate="yes" xml:space="preserve">
          <source>There can be a &lt;code&gt;turtle.cfg&lt;/code&gt; file in the directory where &lt;a href=&quot;#module-turtle&quot;&gt;&lt;code&gt;turtle&lt;/code&gt;&lt;/a&gt; is stored and an additional one in the current working directory. The latter will override the settings of the first one.</source>
          <target state="translated">&lt;a href=&quot;#module-turtle&quot;&gt; &lt;code&gt;turtle&lt;/code&gt; &lt;/a&gt;が保存されているディレクトリに &lt;code&gt;turtle.cfg&lt;/code&gt; ファイルがあり、現在の作業ディレクトリに追加のファイルがある場合があります。後者は最初の設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="1a4413a268d4ebd32ee4dba0e329af575a824d1b" translate="yes" xml:space="preserve">
          <source>There is a &amp;ldquo;main thread&amp;rdquo; object; this corresponds to the initial thread of control in the Python program. It is not a daemon thread.</source>
          <target state="translated">「メインスレッド」オブジェクトがあります。これは、Pythonプログラムの初期制御スレッドに対応します。デーモンスレッドではありません。</target>
        </trans-unit>
        <trans-unit id="1e29d6e10b2c6956c33cb943f01fb5492ba9c5d5" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; flag to set, in order to prevent this, &lt;code&gt;socket.SO_REUSEADDR&lt;/code&gt;:</source>
          <target state="translated">これを防ぐために設定する&lt;a href=&quot;#module-socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;フラグがあり、 &lt;code&gt;socket.SO_REUSEADDR&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e47e83e62ae2ee4ea0b5b657d1278fc1527f7e36" translate="yes" xml:space="preserve">
          <source>There is a backport of &lt;a href=&quot;#module-unittest.mock&quot;&gt;&lt;code&gt;unittest.mock&lt;/code&gt;&lt;/a&gt; for earlier versions of Python, available as &lt;a href=&quot;https://pypi.org/project/mock&quot;&gt;mock on PyPI&lt;/a&gt;.</source>
          <target state="translated">以前のバージョンのPython用の&lt;a href=&quot;#module-unittest.mock&quot;&gt; &lt;code&gt;unittest.mock&lt;/code&gt; の&lt;/a&gt;バックポートがあり&lt;a href=&quot;https://pypi.org/project/mock&quot;&gt;、PyPIのモック&lt;/a&gt;として利用できます。</target>
        </trans-unit>
        <trans-unit id="ab37ed1de9956ad2db535992c1cb4eab9ce74122" translate="yes" xml:space="preserve">
          <source>There is a certain baseline overhead associated with executing a pass statement. The code here doesn&amp;rsquo;t try to hide it, but you should be aware of it. The baseline overhead can be measured by invoking the program without arguments, and it might differ between Python versions.</source>
          <target state="translated">passステートメントの実行に関連する特定のベースラインオーバーヘッドがあります。ここのコードはそれを隠そうとはしていませんが、あなたはそれを知っておくべきです。ベースラインオーバーヘッドは、引数なしでプログラムを呼び出すことで測定でき、Pythonのバージョンによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="482dc1fc316fb8aa025fb46e7933e55a2e4fe842" translate="yes" xml:space="preserve">
          <source>There is a default policy used by all classes in the email package. For all of the &lt;a href=&quot;email.parser#module-email.parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; classes and the related convenience functions, and for the &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; class, this is the &lt;a href=&quot;#email.policy.Compat32&quot;&gt;&lt;code&gt;Compat32&lt;/code&gt;&lt;/a&gt; policy, via its corresponding pre-defined instance &lt;a href=&quot;#email.policy.compat32&quot;&gt;&lt;code&gt;compat32&lt;/code&gt;&lt;/a&gt;. This policy provides for complete backward compatibility (in some cases, including bug compatibility) with the pre-Python3.3 version of the email package.</source>
          <target state="translated">電子メールパッケージのすべてのクラスで使用されるデフォルトのポリシーがあります。すべての&lt;a href=&quot;email.parser#module-email.parser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt;クラスと関連する便利な関数、および&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;クラスの場合、これは、対応する事前定義されたインスタンス&lt;a href=&quot;#email.policy.compat32&quot;&gt; &lt;code&gt;compat32&lt;/code&gt; を&lt;/a&gt;介した&lt;a href=&quot;#email.policy.Compat32&quot;&gt; &lt;code&gt;Compat32&lt;/code&gt; &lt;/a&gt;ポリシーです。このポリシーは、Python3.3より前のバージョンの電子メールパッケージとの完全な下位互換性（場合によっては、バグ互換性を含む）を提供します。</target>
        </trans-unit>
        <trans-unit id="55d1a9e95df13365d139013a6923e69a48124ab1" translate="yes" xml:space="preserve">
          <source>There is a more aggressive version of both &lt;em&gt;spec&lt;/em&gt; and &lt;em&gt;autospec&lt;/em&gt; that &lt;em&gt;does&lt;/em&gt; prevent you setting non-existent attributes. This is useful if you want to ensure your code only &lt;em&gt;sets&lt;/em&gt; valid attributes too, but obviously it prevents this particular scenario:</source>
          <target state="translated">両方のより積極的なバージョンがある&lt;em&gt;スペック&lt;/em&gt;と&lt;em&gt;autospec &lt;/em&gt;&lt;em&gt;ん&lt;/em&gt;、存在しない属性を設定できないことが。これは、コード&lt;em&gt;が&lt;/em&gt;有効な属性のみを&lt;em&gt;設定&lt;/em&gt;するようにしたい場合に役立ちますが、明らかにこの特定のシナリオを防ぎます。</target>
        </trans-unit>
        <trans-unit id="1beb9533846807b3cddb163730145908edcba46e" translate="yes" xml:space="preserve">
          <source>There is a tiny performance penalty when using &lt;code&gt;frozen=True&lt;/code&gt;: &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; cannot use simple assignment to initialize fields, and must use &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;object.__setattr__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用している場合、小さなパフォーマンスの低下があり &lt;code&gt;frozen=True&lt;/code&gt; ：&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;フィールドを初期化するために、単純な割り当てを使用することはできませんし、使用しなければならない&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;object.__setattr__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49fbe885a03f63d401b2b0a3ffbb2939e259105a" translate="yes" xml:space="preserve">
          <source>There is a tiny performance penalty when using &lt;code&gt;frozen=True&lt;/code&gt;: &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; cannot use simple assignment to initialize fields, and must use &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;object.__setattr__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用している場合、小さなパフォーマンスの低下があり &lt;code&gt;frozen=True&lt;/code&gt; ：&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;フィールドを初期化するために、単純な割り当てを使用することはできませんし、使用しなければならない&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;object.__setattr__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45b27f43395afb40755c882e8f8377026ef5693d" translate="yes" xml:space="preserve">
          <source>There is a utility to create a dictionary the keys of which are the method names and the values of which are the docstrings of the public methods of the classes Screen and Turtle.</source>
          <target state="translated">Screen と Turtle クラスのパブリック・メソッドの docstring をキーとしたメソッド名と値を持つ辞書を作成するユーティリティがあります。</target>
        </trans-unit>
        <trans-unit id="e7eae78a69e9371dbae0111468f3b5d1fc309bfa" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;#unittest.mock.patch.dict&quot;&gt;&lt;code&gt;patch.dict()&lt;/code&gt;&lt;/a&gt; for setting values in a dictionary just during a scope and restoring the dictionary to its original state when the test ends:</source>
          <target state="translated">スコープの最中にディクショナリの値を設定し、テストが終了したときにディクショナリを元の状態に戻すための&lt;a href=&quot;#unittest.mock.patch.dict&quot;&gt; &lt;code&gt;patch.dict()&lt;/code&gt; &lt;/a&gt;もあります。</target>
        </trans-unit>
        <trans-unit id="e684d0160793e96041b51aa12fbbadc464d12889" translate="yes" xml:space="preserve">
          <source>There is also a command line shortcut for running &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt;. You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the file name(s) on the command line:</source>
          <target state="translated">&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;を実行するためのコマンドラインショートカットもあります。標準ライブラリから直接doctestモジュールを実行し、コマンドラインでファイル名を渡すようにPythonインタープリターに指示できます。</target>
        </trans-unit>
        <trans-unit id="d111a6794d7726b882e407d115339caecd4e6077" translate="yes" xml:space="preserve">
          <source>There is also a command line shortcut for running &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;. You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the module name(s) on the command line:</source>
          <target state="translated">&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt;を実行するためのコマンドラインショートカットもあります。Pythonインタープリターに、標準ライブラリから直接doctestモジュールを実行し、コマンドラインでモジュール名を渡すように指示できます。</target>
        </trans-unit>
        <trans-unit id="d79a9d980254c0558deebdb3ff6a0c81b5f4f60f" translate="yes" xml:space="preserve">
          <source>There is also a module-level convenience function:</source>
          <target state="translated">モジュールレベルの便利機能もあります。</target>
        </trans-unit>
        <trans-unit id="eb180552aa6e02363503fb5c4bb76b55eebe73da" translate="yes" xml:space="preserve">
          <source>There is also a way to register new option flag names, though this isn&amp;rsquo;t useful unless you intend to extend &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; internals via subclassing:</source>
          <target state="translated">新しいオプションフラグ名を登録する方法もありますが、サブクラス化によって&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;内部を拡張するつもりでない限り、これは役に立ちません。</target>
        </trans-unit>
        <trans-unit id="2907b710c13ff58245f3fab419cf0626710f8bc4" translate="yes" xml:space="preserve">
          <source>There is also no mutable string type, but &lt;a href=&quot;#str.join&quot;&gt;&lt;code&gt;str.join()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;io#io.StringIO&quot;&gt;&lt;code&gt;io.StringIO&lt;/code&gt;&lt;/a&gt; can be used to efficiently construct strings from multiple fragments.</source>
          <target state="translated">変更可能な文字列型もありませんが、&lt;a href=&quot;#str.join&quot;&gt; &lt;code&gt;str.join()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;io#io.StringIO&quot;&gt; &lt;code&gt;io.StringIO&lt;/code&gt; &lt;/a&gt;を使用して、複数のフラグメントから文字列を効率的に構築できます。</target>
        </trans-unit>
        <trans-unit id="d67e4f42d4de885a7414466b8f08bd4f8bc181d8" translate="yes" xml:space="preserve">
          <source>There is always a 1:1 relationship between transport and protocol objects: the protocol calls transport methods to send data, while the transport calls protocol methods to pass it data that has been received.</source>
          <target state="translated">トランスポートとプロトコルオブジェクトの間には、常に1:1の関係があります:プロトコルはデータを送信するためにトランスポートメソッドを呼び出し、トランスポートは受信したデータを渡すためにプロトコルメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="3e56625ac1cadac7545d7b1c51dea55a42570abf" translate="yes" xml:space="preserve">
          <source>There is an additional mode character permitted, &lt;code&gt;'U'&lt;/code&gt;, which no longer has any effect, and is considered deprecated. It previously enabled &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt; in text mode, which became the default behaviour in Python 3.0. Refer to the documentation of the &lt;a href=&quot;#open-newline-parameter&quot;&gt;newline&lt;/a&gt; parameter for further details.</source>
          <target state="translated">追加のモード文字 &lt;code&gt;'U'&lt;/code&gt; が許可されていますが、これは効果がなく、非推奨と見なされます。以前はテキストモードで&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;ユニバーサル改行&lt;/a&gt;を有効にしていましたが、これはPython 3.0のデフォルトの動作になりました。詳細については、&lt;a href=&quot;#open-newline-parameter&quot;&gt;改行&lt;/a&gt;パラメータのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a887f026af45aa30903a5f15ed3395bf260ebab8" translate="yes" xml:space="preserve">
          <source>There is an additional mode character permitted, &lt;code&gt;'U'&lt;/code&gt;, which no longer has any effect, and is considered deprecated. It previously enabled &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt; in text mode, which became the default behaviour in Python 3.0. Refer to the documentation of the &lt;a href=&quot;#open-newline-parameter&quot;&gt;newline&lt;/a&gt; parameter for further details.</source>
          <target state="translated">許可されている追加のモード文字 &lt;code&gt;'U'&lt;/code&gt; がありますが、これはもはや効果がなく、非推奨と見なされます。以前はテキストモードで&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-universal-newlines&quot;&gt;ユニバーサル改行&lt;/a&gt;を有効にしていましたが、これがPython3.0のデフォルトの動作になりました。詳細については、&lt;a href=&quot;#open-newline-parameter&quot;&gt;改行&lt;/a&gt;パラメータのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="935265d6d70dd5bf2f00c18ebafbd01ee2301fae" translate="yes" xml:space="preserve">
          <source>There is an alternative, more powerful interface to the coder and decoder, see the source for details.</source>
          <target state="translated">コーダーとデコーダーには、代替のより強力なインターフェースがあり、詳細はソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="74c4518e8428116ce41d38c6760bba0be948a71b" translate="yes" xml:space="preserve">
          <source>There is an obsolete function &lt;code&gt;warn&lt;/code&gt; which is functionally identical to &lt;code&gt;warning&lt;/code&gt;. As &lt;code&gt;warn&lt;/code&gt; is deprecated, please do not use it - use &lt;code&gt;warning&lt;/code&gt; instead.</source>
          <target state="translated">廃止された機能があります &lt;code&gt;warn&lt;/code&gt; と機能的に同一である &lt;code&gt;warning&lt;/code&gt; 。 &lt;code&gt;warn&lt;/code&gt; 廃止されて、それを使用しないでください-使用は &lt;code&gt;warning&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="c9565a2b6830f7e297c9c91221ecf38feac62a37" translate="yes" xml:space="preserve">
          <source>There is an obsolete method &lt;code&gt;warn&lt;/code&gt; which is functionally identical to &lt;code&gt;warning&lt;/code&gt;. As &lt;code&gt;warn&lt;/code&gt; is deprecated, please do not use it - use &lt;code&gt;warning&lt;/code&gt; instead.</source>
          <target state="translated">廃止された方法がある &lt;code&gt;warn&lt;/code&gt; と機能的に同一である &lt;code&gt;warning&lt;/code&gt; 。 &lt;code&gt;warn&lt;/code&gt; 廃止されて、それを使用しないでください-使用は &lt;code&gt;warning&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="0c04d008df0b3902a3f5080424926193dc66981f" translate="yes" xml:space="preserve">
          <source>There is currently no way to schedule coroutines or callbacks directly from a different process (such as one started with &lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt;). The &lt;a href=&quot;asyncio-eventloop#asyncio-event-loop&quot;&gt;Event Loop Methods&lt;/a&gt; section lists APIs that can read from pipes and watch file descriptors without blocking the event loop. In addition, asyncio&amp;rsquo;s &lt;a href=&quot;asyncio-subprocess#asyncio-subprocess&quot;&gt;Subprocess&lt;/a&gt; APIs provide a way to start a process and communicate with it from the event loop. Lastly, the aforementioned &lt;a href=&quot;asyncio-eventloop#asyncio.loop.run_in_executor&quot;&gt;&lt;code&gt;loop.run_in_executor()&lt;/code&gt;&lt;/a&gt; method can also be used with a &lt;a href=&quot;concurrent.futures#concurrent.futures.ProcessPoolExecutor&quot;&gt;&lt;code&gt;concurrent.futures.ProcessPoolExecutor&lt;/code&gt;&lt;/a&gt; to execute code in a different process.</source>
          <target state="translated">現在、別のプロセス（&lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;開始されたプロセスなど）から直接コルーチンまたはコールバックをスケジュールする方法はありません。「&lt;a href=&quot;asyncio-eventloop#asyncio-event-loop&quot;&gt;イベントループメソッド」&lt;/a&gt;セクションには、イベントループをブロックせずにパイプから読み取り、ファイル記述子を監視できるAPIがリストされています。さらに、asyncioの&lt;a href=&quot;asyncio-subprocess#asyncio-subprocess&quot;&gt;サブプロセス&lt;/a&gt;APIは、プロセスを開始し、イベントループからプロセスと通信する方法を提供します。最後に、前述の&lt;a href=&quot;asyncio-eventloop#asyncio.loop.run_in_executor&quot;&gt; &lt;code&gt;loop.run_in_executor()&lt;/code&gt; &lt;/a&gt;メソッドを&lt;a href=&quot;concurrent.futures#concurrent.futures.ProcessPoolExecutor&quot;&gt; &lt;code&gt;concurrent.futures.ProcessPoolExecutor&lt;/code&gt; &lt;/a&gt;と一緒に使用して、別のプロセスでコードを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="a894765372946cbd728f24442f80a275c531295d" translate="yes" xml:space="preserve">
          <source>There is data to read</source>
          <target state="translated">読み取るデータがあります</target>
        </trans-unit>
        <trans-unit id="e75c6cbe07532d2502dde4b485373249588d95da" translate="yes" xml:space="preserve">
          <source>There is less temptation to change test code to fit the code it tests without a good reason.</source>
          <target state="translated">正当な理由なくテストするコードに合わせてテストコードを変更する誘惑が少なくなります。</target>
        </trans-unit>
        <trans-unit id="4bd88caba77eb2e0f96b475391a639aa16965d22" translate="yes" xml:space="preserve">
          <source>There is no &lt;em&gt;do_handshake_on_connect&lt;/em&gt; machinery. You must always manually call &lt;a href=&quot;#ssl.SSLSocket.do_handshake&quot;&gt;&lt;code&gt;do_handshake()&lt;/code&gt;&lt;/a&gt; to start the handshake.</source>
          <target state="translated">&lt;em&gt;do_handshake_on_connect&lt;/em&gt;機構はありません。ハンドシェークを開始するには、常に手動で&lt;a href=&quot;#ssl.SSLSocket.do_handshake&quot;&gt; &lt;code&gt;do_handshake()&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="17646ebf84b2cc6d3d2aa087f8fe20aa0ea84904" translate="yes" xml:space="preserve">
          <source>There is no command-line option to control the optimization level used by the &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; function, because the Python interpreter itself already provides the option: &lt;strong&gt;python -O -m compileall&lt;/strong&gt;.</source>
          <target state="translated">Pythonインタープリター自体がすでにオプション&lt;strong&gt;python -O -m compileallを&lt;/strong&gt;提供しているため、&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;関数で使用される最適化レベルを制御するコマンドラインオプションはありません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a339402e2c08e68357d4607ca200a87f81869499" translate="yes" xml:space="preserve">
          <source>There is no dedicated literal syntax for bytearray objects, instead they are always created by calling the constructor:</source>
          <target state="translated">バイト配列オブジェクトには専用のリテラル構文はなく、コンストラクタを呼び出すことで常に作成されます。</target>
        </trans-unit>
        <trans-unit id="ab1e290a57c9a8c7c0ca47e3789793780590484a" translate="yes" xml:space="preserve">
          <source>There is no default implementation</source>
          <target state="translated">デフォルトの実装はありません。</target>
        </trans-unit>
        <trans-unit id="4cfcfdb7a55717a78c7053ebb53cb164835e6d05" translate="yes" xml:space="preserve">
          <source>There is no handling of &lt;em&gt;suppress_ragged_eofs&lt;/em&gt;. All end-of-file conditions that are in violation of the protocol are reported via the &lt;a href=&quot;#ssl.SSLEOFError&quot;&gt;&lt;code&gt;SSLEOFError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">&lt;em&gt;suppress_ragged_eofs&lt;/em&gt;の処理はありません。プロトコルに違反するすべてのファイル終了条件は、&lt;a href=&quot;#ssl.SSLEOFError&quot;&gt; &lt;code&gt;SSLEOFError&lt;/code&gt; &lt;/a&gt;例外を介して報告されます。</target>
        </trans-unit>
        <trans-unit id="354d47c9f2be30d4225e6edd3dac13f743ff4c56" translate="yes" xml:space="preserve">
          <source>There is no limitation for running subprocesses from different threads once the watcher is installed.</source>
          <target state="translated">ウォッチャーをインストールしてしまえば、異なるスレッドからサブプロセスを実行することに制限はありません。</target>
        </trans-unit>
        <trans-unit id="78052c50fd1ad0400209b2cf6aa7fbfab4c2eea6" translate="yes" xml:space="preserve">
          <source>There is no method to obtain the POSIX timestamp directly from a naive &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instance representing UTC time. If your application uses this convention and your system timezone is not set to UTC, you can obtain the POSIX timestamp by supplying &lt;code&gt;tzinfo=timezone.utc&lt;/code&gt;:</source>
          <target state="translated">UTC時間を表す単純な&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;インスタンスから直接POSIXタイムスタンプを取得する方法はありません。アプリケーションがこの規則を使用していて、システムのタイムゾーンがUTCに設定されていない場合は、 &lt;code&gt;tzinfo=timezone.utc&lt;/code&gt; を指定することにより、POSIXタイムスタンプを取得できます。</target>
        </trans-unit>
        <trans-unit id="3ccc659c3dddb17a0d08925d775d9c79df47ca5e" translate="yes" xml:space="preserve">
          <source>There is no module-level &lt;code&gt;wrap_bio()&lt;/code&gt; call like there is for &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;wrap_socket()&lt;/code&gt;&lt;/a&gt;. An &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt; is always created via an &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">何のモジュールレベルはありません &lt;code&gt;wrap_bio()&lt;/code&gt; のためにそこにあるように、コールが&lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt; &lt;code&gt;wrap_socket()&lt;/code&gt; &lt;/a&gt;。アン&lt;a href=&quot;#ssl.SSLObject&quot;&gt; &lt;code&gt;SSLObject&lt;/code&gt; &lt;/a&gt;常に経由して作成され&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="979783c6e7664e6582aa3da703198e886d977840" translate="yes" xml:space="preserve">
          <source>There is no need to install the default policy manually. asyncio is configured to use the default policy automatically.</source>
          <target state="translated">デフォルトポリシーを手動でインストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="84f726f27659d6fc6e9b60e5ca57b5dfa4b12f91" translate="yes" xml:space="preserve">
          <source>There is no noticeable overhead when handling a big number of children (&lt;em&gt;O(1)&lt;/em&gt; each time a child terminates), but stating a thread per process requires extra memory.</source>
          <target state="translated">多数の子（子が終了するたびに&lt;em&gt;O（1））を&lt;/em&gt;処理するときに顕著なオーバーヘッドはありませんが、プロセスごとにスレッドを指定すると追加のメモリが必要になります。</target>
        </trans-unit>
        <trans-unit id="eb98ad1710a337cd30d3185a62ee9740d3de4bde" translate="yes" xml:space="preserve">
          <source>There is no noticeable overhead when handling a big number of children (&lt;em&gt;O(1)&lt;/em&gt; each time a child terminates).</source>
          <target state="translated">多数の子（子が終了するたびに&lt;em&gt;O（1））を&lt;/em&gt;処理するときに、顕著なオーバーヘッドはありません。</target>
        </trans-unit>
        <trans-unit id="7ea5b79c20fda2d876e2837855af83a60a9f3d1e" translate="yes" xml:space="preserve">
          <source>There is no requirement that &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; instances be used to represent messages retrieved using &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; instances. In some situations, the time and memory required to generate &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; representations might not be acceptable. For such situations, &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; instances also offer string and file-like representations, and a custom message factory may be specified when a &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; instance is initialized.</source>
          <target state="translated">&lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt;インスタンスを使用して取得したメッセージを表すために&lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;インスタンスを使用する必要はありません。状況によっては、&lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;表現の生成に必要な時間とメモリが許容できない場合があります。このような状況では、&lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt;インスタンスは文字列やファイルのような表現も提供し、&lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt;インスタンスの初期化時にカスタムメッセージファクトリを指定できます。</target>
        </trans-unit>
        <trans-unit id="b3ae3451c579ac5b5dbb261bd25097c72e8278dd" translate="yes" xml:space="preserve">
          <source>There is no requirement that the tools in this module are used to create application archives - the module is a convenience, but archives in the above format created by any means are acceptable to Python.</source>
          <target state="translated">このモジュールのツールがアプリケーションのアーカイブを作成するために使用されるという要件はありません-このモジュールは便宜上のものですが、どのような手段で作成された上記の形式のアーカイブであっても、Pythonであれば許容されます。</target>
        </trans-unit>
        <trans-unit id="f4cb2262ca8f74431c7529f7caba934501312915" translate="yes" xml:space="preserve">
          <source>There is no return value.</source>
          <target state="translated">戻り値はありません。</target>
        </trans-unit>
        <trans-unit id="626b4419124dc05c7ee6eecb962399deb2c5e434" translate="yes" xml:space="preserve">
          <source>There is no runtime checking of these properties. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;PEP 591&lt;/strong&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">これらのプロパティの実行時チェックはありません。詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;PEP591を&lt;/strong&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6755c18f7a4a50204cd008eb3d1159aadb9e5a90" translate="yes" xml:space="preserve">
          <source>There is no runtime checking of these properties. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;PEP 591&lt;/strong&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">これらのプロパティの実行時チェックはありません。詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;PEP 591&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="59014a17300c50cea45a4a6358e449e5248694af" translate="yes" xml:space="preserve">
          <source>There is no runtime checking of these properties. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;PEP 591&lt;/strong&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">これらのプロパティの実行時チェックはありません。詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;PEP 591&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b8a967536096b023a787a204a97de48dac9e487" translate="yes" xml:space="preserve">
          <source>There is no runtime checking of these properties. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-62&quot;&gt;&lt;strong&gt;PEP 591&lt;/strong&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">これらのプロパティの実行時チェックはありません。詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0591&quot; id=&quot;index-62&quot;&gt;&lt;strong&gt;PEP591を&lt;/strong&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="93d266ba42289c7350fb4e3a1db7c80f501f09db" translate="yes" xml:space="preserve">
          <source>There is no syntax to indicate optional or keyword arguments; such function types are rarely used as callback types. &lt;code&gt;Callable[..., ReturnType]&lt;/code&gt; (literal ellipsis) can be used to type hint a callable taking any number of arguments and returning &lt;code&gt;ReturnType&lt;/code&gt;. A plain &lt;a href=&quot;#typing.Callable&quot;&gt;&lt;code&gt;Callable&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;code&gt;Callable[..., Any]&lt;/code&gt;, and in turn to &lt;a href=&quot;collections.abc#collections.abc.Callable&quot;&gt;&lt;code&gt;collections.abc.Callable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプションの引数またはキーワード引数を示す構文はありません。このような関数型がコールバック型として使用されることはほとんどありません。 &lt;code&gt;Callable[..., ReturnType]&lt;/code&gt; （リテラルの省略）を使用すると、任意の数の引数を取り、 &lt;code&gt;ReturnType&lt;/code&gt; を返す呼び出し可能オブジェクトの型ヒントを使用できます。プレーンな&lt;a href=&quot;#typing.Callable&quot;&gt; &lt;code&gt;Callable&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;Callable[..., Any]&lt;/code&gt; と同等であり、&lt;a href=&quot;collections.abc#collections.abc.Callable&quot;&gt; &lt;code&gt;collections.abc.Callable&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="3b473b64f202d7735b92adfb4667a5ab7ed7dcc5" translate="yes" xml:space="preserve">
          <source>There is no way for CGI code to tell whether the option was set, so a separate handler class is provided. It is used in the same way as &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt;&lt;code&gt;CGIHandler&lt;/code&gt;&lt;/a&gt;, i.e., by calling &lt;code&gt;IISCGIHandler().run(app)&lt;/code&gt;, where &lt;code&gt;app&lt;/code&gt; is the WSGI application object you wish to invoke.</source>
          <target state="translated">CGIコードがオプションが設定されたかどうかを判断する方法がないため、別のハンドラークラスが提供されます。これは、&lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt; &lt;code&gt;CGIHandler&lt;/code&gt; &lt;/a&gt;と同じ方法で使用され &lt;code&gt;IISCGIHandler().run(app)&lt;/code&gt; つまり、IISCGIHandler（）。run（app）を呼び出すことによって使用されます。ここで、 &lt;code&gt;app&lt;/code&gt; は、呼び出すWSGIアプリケーションオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="d0fe2afc95bd9dd12af3411b4ecc87fbcc97df95" translate="yes" xml:space="preserve">
          <source>There is no way to indicate non-native byte order (force byte-swapping); use the appropriate choice of &lt;code&gt;'&amp;lt;'&lt;/code&gt; or &lt;code&gt;'&amp;gt;'&lt;/code&gt;.</source>
          <target state="translated">非ネイティブのバイトオーダーを示す方法はありません（バイトスワップを強制します）。 &lt;code&gt;'&amp;lt;'&lt;/code&gt; または &lt;code&gt;'&amp;gt;'&lt;/code&gt; の適切な選択を使用します。</target>
        </trans-unit>
        <trans-unit id="d70cda3946eb643babc8c8abe059a00b30a0a0e3" translate="yes" xml:space="preserve">
          <source>There is no way to perform case conversions and character classifications according to the locale. For (Unicode) text strings these are done according to the character value only, while for byte strings, the conversions and classifications are done according to the ASCII value of the byte, and bytes whose high bit is set (i.e., non-ASCII bytes) are never converted or considered part of a character class such as letter or whitespace.</source>
          <target state="translated">ロケールに応じた大文字小文字の変換や文字分類を行う方法はありません。(Unicode)テキスト文字列の場合、これらは文字値のみに基づいて行われますが、バイト文字列の場合、変換と分類はバイトのASCII値に基づいて行われ、ハイビットが設定されているバイト(すなわち非ASCIIバイト)は変換されず、文字や空白などの文字クラスの一部とはみなされません。</target>
        </trans-unit>
        <trans-unit id="5b9cc71dc4ff206cec212895ed53756aab2a7764" translate="yes" xml:space="preserve">
          <source>There is no way to say &amp;ldquo;python X.Y or later&amp;rdquo;, so be careful of using an exact version like &amp;ldquo;/usr/bin/env python3.4&amp;rdquo; as you will need to change your shebang line for users of Python 3.5, for example.</source>
          <target state="translated">「python XY以降」と言うことはできないため、「/ usr / bin / env python3.4」のような正確なバージョンを使用するように注意してください。たとえば、Python 3.5のユーザーのシバン行を変更する必要があります。 。</target>
        </trans-unit>
        <trans-unit id="d2369966e324eb7a0bb66ca53d7e0b8023f09ca6" translate="yes" xml:space="preserve">
          <source>There is no way to unregister a function.</source>
          <target state="translated">関数の登録を解除する方法はありません。</target>
        </trans-unit>
        <trans-unit id="59f1410dd1d1d6d9c22b365f413457bba1605111" translate="yes" xml:space="preserve">
          <source>There is one class defined for each left-hand side symbol in the abstract grammar (for example, &lt;code&gt;ast.stmt&lt;/code&gt; or &lt;code&gt;ast.expr&lt;/code&gt;). In addition, there is one class defined for each constructor on the right-hand side; these classes inherit from the classes for the left-hand side trees. For example, &lt;a href=&quot;#ast.BinOp&quot;&gt;&lt;code&gt;ast.BinOp&lt;/code&gt;&lt;/a&gt; inherits from &lt;code&gt;ast.expr&lt;/code&gt;. For production rules with alternatives (aka &amp;ldquo;sums&amp;rdquo;), the left-hand side class is abstract: only instances of specific constructor nodes are ever created.</source>
          <target state="translated">抽象文法の左側の記号ごとに1つのクラスが定義されています（たとえば、 &lt;code&gt;ast.stmt&lt;/code&gt; または &lt;code&gt;ast.expr&lt;/code&gt; ）。さらに、右側のコンストラクターごとに1つのクラスが定義されています。これらのクラスは、左側のツリーのクラスを継承します。たとえば、&lt;a href=&quot;#ast.BinOp&quot;&gt; &lt;code&gt;ast.BinOp&lt;/code&gt; はast.exprを&lt;/a&gt;継承し &lt;code&gt;ast.expr&lt;/code&gt; 。代替（別名「合計」）のあるプロダクションルールの場合、左側のクラスは抽象的です。特定のコンストラクターノードのインスタンスのみが作成されます。</target>
        </trans-unit>
        <trans-unit id="3dd0e13bda3ae598cc30ece116faadf286e65f28" translate="yes" xml:space="preserve">
          <source>There is one class defined for each left-hand side symbol in the abstract grammar (for example, &lt;code&gt;ast.stmt&lt;/code&gt; or &lt;code&gt;ast.expr&lt;/code&gt;). In addition, there is one class defined for each constructor on the right-hand side; these classes inherit from the classes for the left-hand side trees. For example, &lt;code&gt;ast.BinOp&lt;/code&gt; inherits from &lt;code&gt;ast.expr&lt;/code&gt;. For production rules with alternatives (aka &amp;ldquo;sums&amp;rdquo;), the left-hand side class is abstract: only instances of specific constructor nodes are ever created.</source>
          <target state="translated">抽象文法の左側のシンボルごとに1つのクラスが定義されています（たとえば、 &lt;code&gt;ast.stmt&lt;/code&gt; または &lt;code&gt;ast.expr&lt;/code&gt; ）。さらに、右側のコンストラクタごとに1つのクラスが定義されています。これらのクラスは、左側のツリーのクラスを継承します。たとえば、 &lt;code&gt;ast.BinOp&lt;/code&gt; はast.exprから継承し &lt;code&gt;ast.expr&lt;/code&gt; 。代替（別名「合計」）を持つプロダクションルールの場合、左側のクラスは抽象的です。特定のコンストラクタノードのインスタンスのみが作成されます。</target>
        </trans-unit>
        <trans-unit id="8aabd37fa9d78fbac35e4cc9ca691f0871edeeca" translate="yes" xml:space="preserve">
          <source>There is one classmethod to make a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; instance for a filesystem file:</source>
          <target state="translated">ファイルシステムファイルの&lt;a href=&quot;#zipfile.ZipInfo&quot;&gt; &lt;code&gt;ZipInfo&lt;/code&gt; &lt;/a&gt;インスタンスを作成するクラスメソッドが1つあります。</target>
        </trans-unit>
        <trans-unit id="0412fae0e9a520771b5fcb2cddecf67855d8aff1" translate="yes" xml:space="preserve">
          <source>There is one constructor method named for each type of &lt;em&gt;hash&lt;/em&gt;. All return a hash object with the same simple interface. For example: use &lt;code&gt;sha256()&lt;/code&gt; to create a SHA-256 hash object. You can now feed this object with &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; (normally &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;) using the &lt;code&gt;update()&lt;/code&gt; method. At any point you can ask it for the &lt;em&gt;digest&lt;/em&gt; of the concatenation of the data fed to it so far using the &lt;code&gt;digest()&lt;/code&gt; or &lt;code&gt;hexdigest()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;em&gt;ハッシュの&lt;/em&gt;タイプごとに名前が付けられたコンストラクタメソッドが1つあります。すべてが同じシンプルなインターフェースを持つハッシュオブジェクトを返します。たとえば、 &lt;code&gt;sha256()&lt;/code&gt; を使用してSHA-256ハッシュオブジェクトを作成します。 &lt;code&gt;update()&lt;/code&gt; メソッドを使用して、このオブジェクトに&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;（通常は&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;）をフィードできます。いつでも、 &lt;code&gt;digest()&lt;/code&gt; または &lt;code&gt;hexdigest()&lt;/code&gt; メソッドを使用して、これまでに供給されたデータの連結の&lt;em&gt;ダイジェスト&lt;/em&gt;を要求できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3117c0dab3215247b68ccd2e04cecc535a1ca1b6" translate="yes" xml:space="preserve">
          <source>There is one constructor method named for each type of &lt;em&gt;hash&lt;/em&gt;. All return a hash object with the same simple interface. For example: use &lt;code&gt;sha256()&lt;/code&gt; to create a SHA-256 hash object. You can now feed this object with &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; (normally &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;) using the &lt;code&gt;update()&lt;/code&gt; method. At any point you can ask it for the &lt;em&gt;digest&lt;/em&gt; of the concatenation of the data fed to it so far using the &lt;code&gt;digest()&lt;/code&gt; or &lt;code&gt;hexdigest()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;em&gt;ハッシュの&lt;/em&gt;タイプごとに名前が付けられたコンストラクターメソッドが1つあります。すべてが同じ単純なインターフェースを持つハッシュオブジェクトを返します。例： &lt;code&gt;sha256()&lt;/code&gt; を使用してSHA-256ハッシュオブジェクトを作成します。 &lt;code&gt;update()&lt;/code&gt; メソッドを使用して、このオブジェクトに&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;（通常は&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;）をフィードできるようになりました。いつでも、 &lt;code&gt;digest()&lt;/code&gt; または &lt;code&gt;hexdigest()&lt;/code&gt; メソッドを使用して、これまでにフィードされたデータの連結の&lt;em&gt;ダイジェスト&lt;/em&gt;を要求できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8120f8e5075cd93d0d190c702aaa96797cb5168" translate="yes" xml:space="preserve">
          <source>There is one more &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; method that a subclass may wish to override:</source>
          <target state="translated">サブクラスがオーバーライドしたい&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;メソッドがもう1つあります。</target>
        </trans-unit>
        <trans-unit id="fe629198154ae18d59378c3ddd10ff8afbe6fa19" translate="yes" xml:space="preserve">
          <source>There is really only one valid value for the &lt;em&gt;MIME-Version&lt;/em&gt; header, and that is &lt;code&gt;1.0&lt;/code&gt;. For future proofing, this header class supports other valid version numbers. If a version number has a valid value per &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt;, then the header object will have non-&lt;code&gt;None&lt;/code&gt; values for the following attributes:</source>
          <target state="translated">実際には&lt;em&gt;MIME-Version&lt;/em&gt;ヘッダーに有効な値は1つだけで、それは &lt;code&gt;1.0&lt;/code&gt; です。今後の校正のために、このヘッダークラ​​スは他の有効なバージョン番号をサポートします。&lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt;に従ってバージョン番号に有効な値がある場合、ヘッダーオブジェクトには次の属性の &lt;code&gt;None&lt;/code&gt; 以外の値が含まれます。</target>
        </trans-unit>
        <trans-unit id="453b4f6d9769fd9f210579ed35f0b45ec2a4f635" translate="yes" xml:space="preserve">
          <source>There is the possibility that &amp;ldquo;dummy thread objects&amp;rdquo; are created. These are thread objects corresponding to &amp;ldquo;alien threads&amp;rdquo;, which are threads of control started outside the threading module, such as directly from C code. Dummy thread objects have limited functionality; they are always considered alive and daemonic, and cannot be &lt;a href=&quot;#threading.Thread.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;ed. They are never deleted, since it is impossible to detect the termination of alien threads.</source>
          <target state="translated">「ダミースレッドオブジェクト」が作成される可能性があります。これらは、「エイリアンスレッド」に対応するスレッドオブジェクトであり、Cコードから直接など、スレッド化モジュールの外部で開始される制御のスレッドです。ダミースレッドオブジェクトの機能は制限されています。それらは常に生きていてデーモン的であると考えられており、&lt;a href=&quot;#threading.Thread.join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; する&lt;/a&gt;ことはできません。エイリアンスレッドの終了を検出することは不可能であるため、削除されることはありません。</target>
        </trans-unit>
        <trans-unit id="29a71b710bb3b88050806003b5991d9687cac929" translate="yes" xml:space="preserve">
          <source>There is urgent data to read</source>
          <target state="translated">緊急に読むべきデータがある</target>
        </trans-unit>
        <trans-unit id="268075deb39485d79f07bf18d036ea245830ce43" translate="yes" xml:space="preserve">
          <source>There should be a function to query whether a particular URL is in the cache.</source>
          <target state="translated">特定のURLがキャッシュにあるかどうかを問い合わせる機能が必要です。</target>
        </trans-unit>
        <trans-unit id="e6e797c6f8f25641f56be38527a8196278af7bbb" translate="yes" xml:space="preserve">
          <source>There was an error parsing a text declaration in an external entity.</source>
          <target state="translated">外部エンティティ内のテキスト宣言の解析にエラーがありました。</target>
        </trans-unit>
        <trans-unit id="d17e4f0895a59fce0176b492223bf84fc53d1057" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a subclass for secure connections:</source>
          <target state="translated">安全な接続のためのサブクラスもあります：</target>
        </trans-unit>
        <trans-unit id="04529db9fc59784d175f6c070f6a41e39f0d9ba0" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another encoding that is able to encoding the full range of Unicode characters: UTF-8. UTF-8 is an 8-bit encoding, which means there are no issues with byte order in UTF-8. Each byte in a UTF-8 byte sequence consists of two parts: marker bits (the most significant bits) and payload bits. The marker bits are a sequence of zero to four &lt;code&gt;1&lt;/code&gt; bits followed by a &lt;code&gt;0&lt;/code&gt; bit. Unicode characters are encoded like this (with x being payload bits, which when concatenated give the Unicode character):</source>
          <target state="translated">Unicode文字の全範囲をエンコードできる別のエンコードがあります。UTF-8です。UTF-8は8ビットエンコーディングです。つまり、UTF-8のバイトオーダーに問題はありません。UTF-8バイトシーケンスの各バイトは、マーカービット（最上位ビット）とペイロードビットの2つの部分で構成されます。マーカービットは &lt;code&gt;0&lt;/code&gt; 〜4の &lt;code&gt;1&lt;/code&gt; ビットのシーケンスで、その後に0ビットが続きます。Unicode文字は次のようにエンコードされます（xはペイロードビットで、連結するとUnicode文字になります）。</target>
        </trans-unit>
        <trans-unit id="0bacbeb7a867039aeb31684676f8649929ec6809" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another group of encodings (the so called charmap encodings) that choose a different subset of all Unicode code points and how these code points are mapped to the bytes &lt;code&gt;0x0&lt;/code&gt;&amp;ndash;&lt;code&gt;0xff&lt;/code&gt;. To see how this is done simply open e.g. &lt;code&gt;encodings/cp1252.py&lt;/code&gt; (which is an encoding that is used primarily on Windows). There&amp;rsquo;s a string constant with 256 characters that shows you which character is mapped to which byte value.</source>
          <target state="translated">すべてのUnicodeコードポイントの異なるサブセットを選択し、これらのコードポイントがバイト &lt;code&gt;0x0&lt;/code&gt; &amp;ndash; &lt;code&gt;0xff&lt;/code&gt; にどのようにマップされるかを示す別のエンコーディンググループ（いわゆるcharmapエンコーディング）があります。これがどのように行われるかを確認するには、たとえば &lt;code&gt;encodings/cp1252.py&lt;/code&gt; （これは主にWindowsで使用されるエンコーディングです）を開きます。どの文字がどのバイト値にマップされているかを示す256文字の文字列定数があります。</target>
        </trans-unit>
        <trans-unit id="d17e73f60746e10f8033ef47e930f87715709ed8" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no output! That&amp;rsquo;s normal, and it means all the examples worked. Pass &lt;code&gt;-v&lt;/code&gt; to the script, and &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; prints a detailed log of what it&amp;rsquo;s trying, and prints a summary at the end:</source>
          <target state="translated">出力はありません！それは正常であり、すべての例が機能したことを意味します。スクリプトに &lt;code&gt;-v&lt;/code&gt; を渡すと、&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;は実行中の詳細なログを出力し、最後に要約を出力します。</target>
        </trans-unit>
        <trans-unit id="5107e764cbcf99be3db8a02a597dc9e0dfb5249e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one important rule: if you invoke an external program (via the &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt; functions. or others with similar functionality), make very sure you don&amp;rsquo;t pass arbitrary strings received from the client to the shell. This is a well-known security hole whereby clever hackers anywhere on the Web can exploit a gullible CGI script to invoke arbitrary shell commands. Even parts of the URL or field names cannot be trusted, since the request doesn&amp;rsquo;t have to come from your form!</source>
          <target state="translated">重要なルールが1つあります。&lt;a href=&quot;os#os.popen&quot;&gt; &lt;code&gt;os.popen()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt;またはos.popen（）関数、または同様の機能を持つ他のプログラムを介して）外部プログラムを呼び出す場合は、クライアントから受け取った任意の文字列をクライアントに渡さないようにしてください。シェル。これはよく知られたセキュリティホールであり、Web上の巧妙なハッカーがだまされやすいCGIスクリプトを悪用して任意のシェルコマンドを呼び出すことができます。リクエストはフォームから送信される必要がないため、URLやフィールド名の一部でも信頼できません。</target>
        </trans-unit>
        <trans-unit id="465b85dd3cb1dcf881030f6e1facbd759bc882ac" translate="yes" xml:space="preserve">
          <source>Therefore it is probably best to only consider using &lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt;&lt;code&gt;Process.terminate&lt;/code&gt;&lt;/a&gt; on processes which never use any shared resources.</source>
          <target state="translated">したがって、おそらく共有リソースを使用しないプロセスでのみ&lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt; &lt;code&gt;Process.terminate&lt;/code&gt; &lt;/a&gt;を使用することを検討するのが最善です。</target>
        </trans-unit>
        <trans-unit id="6d7ac873aab905d0d19416bd5a2e507b4093a46a" translate="yes" xml:space="preserve">
          <source>Therefore, the appropriate way to read form data values was to always use the code which checks whether the obtained value is a single value or a list of values. That&amp;rsquo;s annoying and leads to less readable scripts.</source>
          <target state="translated">したがって、フォームデータ値を読み取る適切な方法は、取得した値が単一の値か値のリストかをチェックするコードを常に使用することでした。これは煩わしく、読みにくいスクリプトにつながります。</target>
        </trans-unit>
        <trans-unit id="ee0e8bc4ddad651cd810b740467094854c86f22f" translate="yes" xml:space="preserve">
          <source>Therefore, the same rules apply as with &lt;a href=&quot;#threading.Condition.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;: The lock must be held when called and is re-acquired on return. The predicate is evaluated with the lock held.</source>
          <target state="translated">したがって、&lt;a href=&quot;#threading.Condition.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt;と同じルールが適用されます。ロックは、呼び出されたときに保持され、戻り時に再取得されます。述語はロックが保持された状態で評価されます。</target>
        </trans-unit>
        <trans-unit id="7837e5032c97f9de99277b75a2524a30220ac2b0" translate="yes" xml:space="preserve">
          <source>Therefore, unless the connection object was produced using &lt;code&gt;Pipe()&lt;/code&gt; you should only use the &lt;a href=&quot;#multiprocessing.connection.Connection.recv&quot;&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#multiprocessing.connection.Connection.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; methods after performing some sort of authentication. See &lt;a href=&quot;#multiprocessing-auth-keys&quot;&gt;Authentication keys&lt;/a&gt;.</source>
          <target state="translated">したがって、接続オブジェクトが &lt;code&gt;Pipe()&lt;/code&gt; を使用して作成された場合を除き、&lt;a href=&quot;#multiprocessing.connection.Connection.recv&quot;&gt; &lt;code&gt;recv()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#multiprocessing.connection.Connection.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt;メソッドとsend（）メソッドは、なんらかの認証を実行した後でのみ使用する必要があります。&lt;a href=&quot;#multiprocessing-auth-keys&quot;&gt;認証キーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="96533ee7558cd28344275b7b6faa62d8e6b52b05" translate="yes" xml:space="preserve">
          <source>These &lt;a href=&quot;#socketserver.BaseRequestHandler&quot;&gt;&lt;code&gt;BaseRequestHandler&lt;/code&gt;&lt;/a&gt; subclasses override the &lt;a href=&quot;#socketserver.BaseRequestHandler.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socketserver.BaseRequestHandler.finish&quot;&gt;&lt;code&gt;finish()&lt;/code&gt;&lt;/a&gt; methods, and provide &lt;code&gt;self.rfile&lt;/code&gt; and &lt;code&gt;self.wfile&lt;/code&gt; attributes. The &lt;code&gt;self.rfile&lt;/code&gt; and &lt;code&gt;self.wfile&lt;/code&gt; attributes can be read or written, respectively, to get the request data or return data to the client.</source>
          <target state="translated">これらの&lt;a href=&quot;#socketserver.BaseRequestHandler&quot;&gt; &lt;code&gt;BaseRequestHandler&lt;/code&gt; &lt;/a&gt;サブクラスは、&lt;a href=&quot;#socketserver.BaseRequestHandler.setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#socketserver.BaseRequestHandler.finish&quot;&gt; &lt;code&gt;finish()&lt;/code&gt; &lt;/a&gt;メソッドをオーバーライドし、 &lt;code&gt;self.rfile&lt;/code&gt; および &lt;code&gt;self.wfile&lt;/code&gt; 属性を提供します。 &lt;code&gt;self.rfile&lt;/code&gt; と &lt;code&gt;self.wfile&lt;/code&gt; 属性は、クライアントに要求データまたは戻りデータを取得するには、それぞれ、読み書きができます。</target>
        </trans-unit>
        <trans-unit id="43420a1e7f2d338a26313b513562211f7c319bad" translate="yes" xml:space="preserve">
          <source>These ABCs allow us to ask classes or instances if they provide particular functionality, for example:</source>
          <target state="translated">これらのABCは、例えば特定の機能を提供するかどうかをクラスやインスタンスに尋ねることを可能にします。</target>
        </trans-unit>
        <trans-unit id="79eb154c9b38c333e433efadc74ad44c819279e7" translate="yes" xml:space="preserve">
          <source>These RFCs together define a protocol to support non-ASCII characters in domain names. A domain name containing non-ASCII characters (such as &lt;code&gt;www.Alliancefran&amp;ccedil;aise.nu&lt;/code&gt;) is converted into an ASCII-compatible encoding (ACE, such as &lt;code&gt;www.xn--alliancefranaise-npb.nu&lt;/code&gt;). The ACE form of the domain name is then used in all places where arbitrary characters are not allowed by the protocol, such as DNS queries, HTTP &lt;em&gt;Host&lt;/em&gt; fields, and so on. This conversion is carried out in the application; if possible invisible to the user: The application should transparently convert Unicode domain labels to IDNA on the wire, and convert back ACE labels to Unicode before presenting them to the user.</source>
          <target state="translated">これらのRFCは共に、ドメイン名で非ASCII文字をサポートするプロトコルを定義します。非ASCII文字を含むドメイン名（例えば、 &lt;code&gt;www.Alliancefran&amp;ccedil;aise.nu&lt;/code&gt; ）ASCIIコンパチブルエンコーディング（ACEなど、に変換される &lt;code&gt;www.xn--alliancefranaise-npb.nu&lt;/code&gt; ）。ドメイン名のACE形式は、DNSクエリ、HTTP &lt;em&gt;ホスト&lt;/em&gt;フィールドなど、プロトコルで任意の文字が許可されていないすべての場所で使用されます。この変換はアプリケーションで実行されます。ユーザーに見えない場合：アプリケーションは、Unicodeドメインラベルをネットワーク上のIDNAに透過的に変換し、ACEラベルをユーザーに提示する前にUnicodeに変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="ae0960be459bc3a6043cacd2025edb486fd19f0b" translate="yes" xml:space="preserve">
          <source>These are available only after &lt;a href=&quot;#curses.initscr&quot;&gt;&lt;code&gt;initscr()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">これらは、&lt;a href=&quot;#curses.initscr&quot;&gt; &lt;code&gt;initscr()&lt;/code&gt; &lt;/a&gt;が呼び出された後にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="8865173ab02152cd75e5e2adf536e021d990b831" translate="yes" xml:space="preserve">
          <source>These are not used in annotations. They are building blocks for creating generic types.</source>
          <target state="translated">これらはアノテーションでは使用されません。これらは汎用型を作成するためのビルディングブロックです。</target>
        </trans-unit>
        <trans-unit id="8bbbc79b314368b7b552cdbf5c2628b93b45f0a7" translate="yes" xml:space="preserve">
          <source>These are not used in annotations. They are building blocks for declaring types.</source>
          <target state="translated">これらはアノテーションでは使用されません。これらは型を宣言するためのビルディングブロックです。</target>
        </trans-unit>
        <trans-unit id="4f5c32d3a29bd1ff89416b3ae09cf4c6ae4a7c9d" translate="yes" xml:space="preserve">
          <source>These are string constants containing Bluetooth addresses with special meanings. For example, &lt;a href=&quot;#socket.BDADDR_ANY&quot;&gt;&lt;code&gt;BDADDR_ANY&lt;/code&gt;&lt;/a&gt; can be used to indicate any address when specifying the binding socket with &lt;code&gt;BTPROTO_RFCOMM&lt;/code&gt;.</source>
          <target state="translated">これらは、特別な意味を持つBluetoothアドレスを含む文字列定数です。例えば、&lt;a href=&quot;#socket.BDADDR_ANY&quot;&gt; &lt;code&gt;BDADDR_ANY&lt;/code&gt; を&lt;/a&gt;有する結合ソケット指定するとき、任意のアドレスを示すために使用することができる &lt;code&gt;BTPROTO_RFCOMM&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="6e329deebb0b200060e6eef68196fa813fcd6a7c" translate="yes" xml:space="preserve">
          <source>These are the Boolean operations, ordered by ascending priority:</source>
          <target state="translated">これらは、優先度の高い順に並べられたブール演算です。</target>
        </trans-unit>
        <trans-unit id="257015f45893c1795d9d847c44cd903ea49c2017" translate="yes" xml:space="preserve">
          <source>These are the fundamental ctypes data types:</source>
          <target state="translated">これらは基本的なctypesデータ型です。</target>
        </trans-unit>
        <trans-unit id="26144cb516a5e752da5774e85f8525ae1b490465" translate="yes" xml:space="preserve">
          <source>These are the operations that dictionaries support (and therefore, custom mapping types should support too):</source>
          <target state="translated">これらは辞書がサポートしている操作です(したがって、カスタムマッピングタイプもサポートしているはずです)。</target>
        </trans-unit>
        <trans-unit id="6e52dbf7f9d96621e5053b5b96e01b2cb4d2ddd1" translate="yes" xml:space="preserve">
          <source>These are the possible values for &lt;code&gt;si_code&lt;/code&gt; in the result returned by &lt;a href=&quot;#os.waitid&quot;&gt;&lt;code&gt;waitid()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらは、&lt;a href=&quot;#os.waitid&quot;&gt; &lt;code&gt;waitid()&lt;/code&gt; &lt;/a&gt;によって返された結果の &lt;code&gt;si_code&lt;/code&gt; の可能な値です。</target>
        </trans-unit>
        <trans-unit id="33d6686360d4d96617294fd588956382c26c1e0b" translate="yes" xml:space="preserve">
          <source>These are the possible values for &lt;em&gt;idtype&lt;/em&gt; in &lt;a href=&quot;#os.waitid&quot;&gt;&lt;code&gt;waitid()&lt;/code&gt;&lt;/a&gt;. They affect how &lt;em&gt;id&lt;/em&gt; is interpreted.</source>
          <target state="translated">これらは、&lt;a href=&quot;#os.waitid&quot;&gt; &lt;code&gt;waitid()&lt;/code&gt; の&lt;/a&gt;&lt;em&gt; idtype&lt;/em&gt;に可能な値です。それらは&lt;em&gt;idの&lt;/em&gt;解釈方法に影響します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="869f56b514f44bafe3fe22e39f703595a56c9bf4" translate="yes" xml:space="preserve">
          <source>These are useful if you want more control, or if you want to employ some of the algorithms implemented in this module in other circumstances.</source>
          <target state="translated">これらは、より多くの制御が必要な場合や、このモジュールで実装されているアルゴリズムの一部を他の状況で使用したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="01bf0efec17a4834e0a6b4b11da2c6d1b42d7b04" translate="yes" xml:space="preserve">
          <source>These attribute is true for the network as a whole if it is true for both the network address and the broadcast address.</source>
          <target state="translated">これらの属性は、ネットワークアドレスとブロードキャストアドレスの両方で真であれば、ネットワーク全体で真である。</target>
        </trans-unit>
        <trans-unit id="181a67606af87af42c5d3ffd8630c69cbabfe1e4" translate="yes" xml:space="preserve">
          <source>These attributes are deleted at the context manager exit.</source>
          <target state="translated">これらの属性は、コンテキストマネージャの終了時に削除されます。</target>
        </trans-unit>
        <trans-unit id="6e7b417bf2efa43f13fc4f3e2f96d7bb14f2e3d8" translate="yes" xml:space="preserve">
          <source>These attributes are true for the network as a whole if they are true for both the network address and the broadcast address.</source>
          <target state="translated">これらの属性は、ネットワークアドレスとブロードキャストアドレスの両方で真であれば、ネットワーク全体で真である。</target>
        </trans-unit>
        <trans-unit id="2fe7aee32b05e735896ae2f06ad4b1db866432e5" translate="yes" xml:space="preserve">
          <source>These attributes can be used to hold additional data associated with the element. Their values are usually strings but may be any application-specific object. If the element is created from an XML file, the &lt;em&gt;text&lt;/em&gt; attribute holds either the text between the element&amp;rsquo;s start tag and its first child or end tag, or &lt;code&gt;None&lt;/code&gt;, and the &lt;em&gt;tail&lt;/em&gt; attribute holds either the text between the element&amp;rsquo;s end tag and the next tag, or &lt;code&gt;None&lt;/code&gt;. For the XML data</source>
          <target state="translated">これらの属性を使用して、要素に関連付けられた追加データを保持できます。それらの値は通常文字列ですが、アプリケーション固有のオブジェクトの場合もあります。要素がXMLファイルから作成された場合、&lt;em&gt;text&lt;/em&gt;属性は要素の開始タグとその最初の子タグまたは終了タグの間のテキスト、または &lt;code&gt;None&lt;/code&gt; を保持し、&lt;em&gt;tail&lt;/em&gt;属性は要素の終了タグと次のタグの間のテキストを保持します、また &lt;code&gt;None&lt;/code&gt; 。XMLデータの場合</target>
        </trans-unit>
        <trans-unit id="6fd5033e1290cc940ad7cf71f9886488f34ab1aa" translate="yes" xml:space="preserve">
          <source>These bytes can be used to seed user-space random number generators or for cryptographic purposes.</source>
          <target state="translated">これらのバイトは、ユーザ空間の乱数発生器のシードに使用したり、暗号化の目的で使用することができます。</target>
        </trans-unit>
        <trans-unit id="44ca4afebbdb6d250b9740f34fbdbf566762d631" translate="yes" xml:space="preserve">
          <source>These calls are only made if control is expected to return to the Python interpreter. A typical &lt;a href=&quot;subprocess#module-subprocess&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; launch will not trigger them as the child is not going to re-enter the interpreter.</source>
          <target state="translated">これらの呼び出しは、制御がPythonインタープリターに戻ることが期待される場合にのみ行われます。子がインタプリタに再入する予定がないため、通常の&lt;a href=&quot;subprocess#module-subprocess&quot;&gt; &lt;code&gt;subprocess&lt;/code&gt; &lt;/a&gt;起動はそれらをトリガーしません。</target>
        </trans-unit>
        <trans-unit id="864edae1c9ec3018b8088f575c6cbd03c733ee84" translate="yes" xml:space="preserve">
          <source>These can be used as types in annotations and do not support &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">これらは注釈の型として使用でき、 &lt;code&gt;[]&lt;/code&gt; をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="6d3cd0fdf581abcbc624a1353cfbd4046417caef" translate="yes" xml:space="preserve">
          <source>These can be used as types in annotations using &lt;code&gt;[]&lt;/code&gt;, each having a unique syntax.</source>
          <target state="translated">これらは、 &lt;code&gt;[]&lt;/code&gt; を使用して注釈の型として使用でき、それぞれに固有の構文があります。</target>
        </trans-unit>
        <trans-unit id="853ef506dfaaa56fab906e6007dbe61b8f184b47" translate="yes" xml:space="preserve">
          <source>These classes are pre-defined using the mix-in classes.</source>
          <target state="translated">これらのクラスは、ミックスインクラスを使ってあらかじめ定義されています。</target>
        </trans-unit>
        <trans-unit id="429a7cf26e573ef062098c538c098cd4acba2cab" translate="yes" xml:space="preserve">
          <source>These classes are provided for the purposes of organizing certain functions under one namespace. They aren&amp;rsquo;t meant to be instantiated independently.</source>
          <target state="translated">これらのクラスは、特定の機能を1つの名前空間にまとめるために提供されています。これらは独立してインスタンス化されることを意図していません。</target>
        </trans-unit>
        <trans-unit id="ae47495c57f5eaa0f0f8df13652cd694013c4578" translate="yes" xml:space="preserve">
          <source>These classes extend the above classes to serve HTML documentation in response to HTTP GET requests. Servers can either be free standing, using &lt;a href=&quot;#xmlrpc.server.DocXMLRPCServer&quot;&gt;&lt;code&gt;DocXMLRPCServer&lt;/code&gt;&lt;/a&gt;, or embedded in a CGI environment, using &lt;a href=&quot;#xmlrpc.server.DocCGIXMLRPCRequestHandler&quot;&gt;&lt;code&gt;DocCGIXMLRPCRequestHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのクラスは、上記のクラスを拡張して、HTTP GET要求に応答してHTMLドキュメントを提供します。サーバはいずれかを使用して、自立することができ&lt;a href=&quot;#xmlrpc.server.DocXMLRPCServer&quot;&gt; &lt;code&gt;DocXMLRPCServer&lt;/code&gt; を&lt;/a&gt;使用して、またはCGI環境に埋め込まれ&lt;a href=&quot;#xmlrpc.server.DocCGIXMLRPCRequestHandler&quot;&gt; &lt;code&gt;DocCGIXMLRPCRequestHandler&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="771117257d089fde13c49bce5d82474423521fb2" translate="yes" xml:space="preserve">
          <source>These collections are provided for automatic introspection of bytecode instructions:</source>
          <target state="translated">これらのコレクションは、バイトコード命令の自動イントロスペクションのために提供されています。</target>
        </trans-unit>
        <trans-unit id="bb46852d445b6630c8fabc91fcd9b4c4b7f185c5" translate="yes" xml:space="preserve">
          <source>These commands and their arguments will be passed to a C function in the &lt;code&gt;_tkinter&lt;/code&gt; - note the underscore - extension module.</source>
          <target state="translated">これらのコマンドと引数は、 &lt;code&gt;_tkinter&lt;/code&gt; の C関数に渡されます-下線に注意してください-拡張モジュール。</target>
        </trans-unit>
        <trans-unit id="7cc8a232ffec17a0509c73cdc3cc5da82cc0c3b0" translate="yes" xml:space="preserve">
          <source>These constants are used as parameters for &lt;a href=&quot;#time.clock_getres&quot;&gt;&lt;code&gt;clock_getres()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#time.clock_gettime&quot;&gt;&lt;code&gt;clock_gettime()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの定数は、&lt;a href=&quot;#time.clock_getres&quot;&gt; &lt;code&gt;clock_getres()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#time.clock_gettime&quot;&gt; &lt;code&gt;clock_gettime()&lt;/code&gt; の&lt;/a&gt;パラメーターとして使用されます。</target>
        </trans-unit>
        <trans-unit id="8f706a07e280b246aec2eb24a7a6cf4e80c4fad0" translate="yes" xml:space="preserve">
          <source>These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings. They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature. &lt;a href=&quot;#codecs.BOM_UTF16&quot;&gt;&lt;code&gt;BOM_UTF16&lt;/code&gt;&lt;/a&gt; is either &lt;a href=&quot;#codecs.BOM_UTF16_BE&quot;&gt;&lt;code&gt;BOM_UTF16_BE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#codecs.BOM_UTF16_LE&quot;&gt;&lt;code&gt;BOM_UTF16_LE&lt;/code&gt;&lt;/a&gt; depending on the platform&amp;rsquo;s native byte order, &lt;a href=&quot;#codecs.BOM&quot;&gt;&lt;code&gt;BOM&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;#codecs.BOM_UTF16&quot;&gt;&lt;code&gt;BOM_UTF16&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#codecs.BOM_LE&quot;&gt;&lt;code&gt;BOM_LE&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;#codecs.BOM_UTF16_LE&quot;&gt;&lt;code&gt;BOM_UTF16_LE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#codecs.BOM_BE&quot;&gt;&lt;code&gt;BOM_BE&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;#codecs.BOM_UTF16_BE&quot;&gt;&lt;code&gt;BOM_UTF16_BE&lt;/code&gt;&lt;/a&gt;. The others represent the BOM in UTF-8 and UTF-32 encodings.</source>
          <target state="translated">これらの定数は、いくつかのエンコーディングのUnicodeバイトオーダーマーク（BOM）であるさまざまなバイトシーケンスを定義します。これらは、UTF-16およびUTF-32データストリームで使用されるバイトオーダーを示し、UTF-8ではUnicode署名として使用されます。&lt;a href=&quot;#codecs.BOM_UTF16&quot;&gt; &lt;code&gt;BOM_UTF16&lt;/code&gt; は&lt;/a&gt;どちらかである&lt;a href=&quot;#codecs.BOM_UTF16_BE&quot;&gt; &lt;code&gt;BOM_UTF16_BE&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#codecs.BOM_UTF16_LE&quot;&gt; &lt;code&gt;BOM_UTF16_LE&lt;/code&gt; は、&lt;/a&gt;プラットフォームのネイティブバイトオーダに応じて、&lt;a href=&quot;#codecs.BOM&quot;&gt; &lt;code&gt;BOM&lt;/code&gt; は&lt;/a&gt;の別名です&lt;a href=&quot;#codecs.BOM_UTF16&quot;&gt; &lt;code&gt;BOM_UTF16&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#codecs.BOM_LE&quot;&gt; &lt;code&gt;BOM_LE&lt;/code&gt; &lt;/a&gt;ため&lt;a href=&quot;#codecs.BOM_UTF16_LE&quot;&gt; &lt;code&gt;BOM_UTF16_LE&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#codecs.BOM_BE&quot;&gt; &lt;code&gt;BOM_BE&lt;/code&gt; &lt;/a&gt;ため&lt;a href=&quot;#codecs.BOM_UTF16_BE&quot;&gt; &lt;code&gt;BOM_UTF16_BE&lt;/code&gt; &lt;/a&gt;。その他は、BOMをUTF-8およびUTF-32エンコーディングで表します。</target>
        </trans-unit>
        <trans-unit id="11075a028b89f1287b800e88d2a70525b45b0b3e" translate="yes" xml:space="preserve">
          <source>These constants represent the address (and protocol) families, used for the first argument to &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt;. If the &lt;a href=&quot;#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt; constant is not defined then this protocol is unsupported. More constants may be available depending on the system.</source>
          <target state="translated">これらの定数は、&lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; の&lt;/a&gt;最初の引数に使用されるアドレス（およびプロトコル）ファミリーを表します。&lt;a href=&quot;#socket.AF_UNIX&quot;&gt; &lt;code&gt;AF_UNIX&lt;/code&gt; &lt;/a&gt;定数が定義されていない場合、このプロトコルはサポートされません。システムによっては、さらに多くの定数を使用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="3636a3cbc66bf8adda778cce9b23ca921f64aa56" translate="yes" xml:space="preserve">
          <source>These constants represent the socket types, used for the second argument to &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt;. More constants may be available depending on the system. (Only &lt;a href=&quot;#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socket.SOCK_DGRAM&quot;&gt;&lt;code&gt;SOCK_DGRAM&lt;/code&gt;&lt;/a&gt; appear to be generally useful.)</source>
          <target state="translated">これらの定数はソケットタイプを表し、&lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; の&lt;/a&gt; 2番目の引数に使用されます。システムによっては、さらに多くの定数を使用できる場合があります。（&lt;a href=&quot;#socket.SOCK_STREAM&quot;&gt; &lt;code&gt;SOCK_STREAM&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#socket.SOCK_DGRAM&quot;&gt; &lt;code&gt;SOCK_DGRAM&lt;/code&gt; &lt;/a&gt;のみが一般的に役立つようです。）</target>
        </trans-unit>
        <trans-unit id="3850a5b66faf07220246584613141a4ed6ecd46e" translate="yes" xml:space="preserve">
          <source>These context managers may suppress exceptions just as they normally would if used directly as part of a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">これらのコンテキストマネージャは、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの一部として直接使用される場合と同じように、例外を抑制できます。</target>
        </trans-unit>
        <trans-unit id="c5b59d1f5bf42fa2ad941913b587997df815979c" translate="yes" xml:space="preserve">
          <source>These context managers may suppress exceptions just as they normally would if used directly as part of a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">これらのコンテキストマネージャーは、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの一部として直接使用される場合と同じように、例外を抑制することができます。</target>
        </trans-unit>
        <trans-unit id="2dd856ad1addbac2083c18edada1fee2ecb93a1c" translate="yes" xml:space="preserve">
          <source>These flags can be passed to &lt;a href=&quot;#os.memfd_create&quot;&gt;&lt;code&gt;memfd_create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのフラグは&lt;a href=&quot;#os.memfd_create&quot;&gt; &lt;code&gt;memfd_create()&lt;/code&gt; に&lt;/a&gt;渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8d893a5018493b1ad1f01b4884c32e1257195fdf" translate="yes" xml:space="preserve">
          <source>These four classes process requests &lt;em&gt;synchronously&lt;/em&gt;; each request must be completed before the next request can be started. This isn&amp;rsquo;t suitable if each request takes a long time to complete, because it requires a lot of computation, or because it returns a lot of data which the client is slow to process. The solution is to create a separate process or thread to handle each request; the &lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt;&lt;code&gt;ForkingMixIn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; mix-in classes can be used to support asynchronous behaviour.</source>
          <target state="translated">これらの4つのクラスは、リクエストを&lt;em&gt;同期的に&lt;/em&gt;処理します。各要求は、次の要求を開始する前に完了する必要があります。これは、多くの計算を必要とするか、クライアントが処理するのが遅い大量のデータを返すため、各リクエストの完了に長い時間がかかる場合には適していません。解決策は、各リクエストを処理する個別のプロセスまたはスレッドを作成することです。&lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt; &lt;code&gt;ForkingMixIn&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt; &lt;code&gt;ThreadingMixIn&lt;/code&gt; は&lt;/a&gt;ミックスインクラスの非同期動作をサポートするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="72acb5b09128de39b246ae899d12597305851702" translate="yes" xml:space="preserve">
          <source>These functions accept either integers or single-character strings; when the argument is a string, it is first converted using the built-in function &lt;a href=&quot;functions#ord&quot;&gt;&lt;code&gt;ord()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの関数は、整数または1文字の文字列を受け入れます。引数が文字列の場合、最初に組み込み関数&lt;a href=&quot;functions#ord&quot;&gt; &lt;code&gt;ord()&lt;/code&gt; &lt;/a&gt;を使用して変換されます。</target>
        </trans-unit>
        <trans-unit id="15117243b94d605b572f5691b43a112efe192336" translate="yes" xml:space="preserve">
          <source>These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="translated">これらの関数はすべて、現在のプロセスを置き換えて新しいプログラムを実行します。彼らは戻りません。Unixでは、新しい実行可能ファイルは現在のプロセスにロードされ、呼び出し元と同じプロセスIDを持ちます。エラーは&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;例外として報告されます。</target>
        </trans-unit>
        <trans-unit id="5b6139927d660d5e1dad5ec0f32107d8c628a1f2" translate="yes" xml:space="preserve">
          <source>These functions and data items provide information and operate on the current process and user.</source>
          <target state="translated">これらの機能やデータ項目は、現在のプロセスやユーザーに対して情報を提供し、操作を行います。</target>
        </trans-unit>
        <trans-unit id="65b2f130f9e56bca14a7379055f6e9bfc0f55b6b" translate="yes" xml:space="preserve">
          <source>These functions are all available on Linux only.</source>
          <target state="translated">これらの機能はすべてLinuxのみで利用可能です。</target>
        </trans-unit>
        <trans-unit id="4b7ea423186e1ad3686c673479b4eab2cfb592f4" translate="yes" xml:space="preserve">
          <source>These functions are described in &lt;a href=&quot;#os-file-dir&quot;&gt;Files and Directories&lt;/a&gt;.</source>
          <target state="translated">これらの関数については、&lt;a href=&quot;#os-file-dir&quot;&gt;ファイルとディレクトリで&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="0b95d0027dd729f2509f2876394ae457eb98ec95" translate="yes" xml:space="preserve">
          <source>These functions are used to retrieve resource usage information:</source>
          <target state="translated">これらの関数は、リソースの利用情報を取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="13a1f4f79e7d240a9400f9b84efbdcb7fe5617a9" translate="yes" xml:space="preserve">
          <source>These functions calculate a measure of how much the population or sample tends to deviate from the typical or average values.</source>
          <target state="translated">これらの関数は、母集団やサンプルが典型値や平均値からどれだけ乖離しているかの指標を計算します。</target>
        </trans-unit>
        <trans-unit id="c7e658bb4b32599c516696e577ad91941fcdf933" translate="yes" xml:space="preserve">
          <source>These functions calculate an average or typical value from a population or sample.</source>
          <target state="translated">これらの関数は、母集団または標本から平均値または典型値を計算します。</target>
        </trans-unit>
        <trans-unit id="a0ae98a3415f470fd255b1fc3b22d36ac3e83e02" translate="yes" xml:space="preserve">
          <source>These functions cannot be used with complex numbers; use the functions of the same name from the &lt;a href=&quot;cmath#module-cmath&quot;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt; module if you require support for complex numbers. The distinction between functions which support complex numbers and those which don&amp;rsquo;t is made since most users do not want to learn quite as much mathematics as required to understand complex numbers. Receiving an exception instead of a complex result allows earlier detection of the unexpected complex number used as a parameter, so that the programmer can determine how and why it was generated in the first place.</source>
          <target state="translated">これらの関数は複素数では使用できません。複素数のサポートが必要な場合は、&lt;a href=&quot;cmath#module-cmath&quot;&gt; &lt;code&gt;cmath&lt;/code&gt; &lt;/a&gt;モジュールの同じ名前の関数を使用してください。ほとんどのユーザーは、複素数を理解するために必要なほど多くの数学を学びたくないので、複素数をサポートする関数とサポートしない関数を区別しています。複雑な結果の代わりに例外を受け取ると、パラメーターとして使用されている予期しない複素数を早期に検出できるため、プログラマーは最初にそれがどのように、なぜ生成されたのかを判別できます。</target>
        </trans-unit>
        <trans-unit id="54bc89086a46bb862ee0519c0f004dabc70edbc5" translate="yes" xml:space="preserve">
          <source>These functions control how a process is allocated CPU time by the operating system. They are only available on some Unix platforms. For more detailed information, consult your Unix manpages.</source>
          <target state="translated">これらの機能は、オペレーティングシステムがプロセスにどのように CPU 時間を割り当てるかを制御します。これらの機能は一部の Unix プラットフォームでのみ利用可能です。詳細な情報については、Unix のマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="f9d98b250a452db69c03659fe4d2049d567fb07a" translate="yes" xml:space="preserve">
          <source>These functions create new &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt;. (See also &lt;a href=&quot;#os.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; for opening file descriptors.)</source>
          <target state="translated">これらの関数は、新しい&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクトを&lt;/a&gt;作成します。（ファイル記述子を&lt;a href=&quot;#os.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="8f604f19cecd1ba0c9a46f93d4cd24e19f43a25f" translate="yes" xml:space="preserve">
          <source>These functions create new &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt;. (See also &lt;a href=&quot;#os.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; for opening file descriptors.)</source>
          <target state="translated">これらの関数は、新しい&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;ファイルオブジェクトを&lt;/a&gt;作成します。（ファイル記述子を&lt;a href=&quot;#os.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="a9b3e1b34cce84fdb913bf10862151ad4e21d563" translate="yes" xml:space="preserve">
          <source>These functions expose the Windows registry API to Python. Instead of using an integer as the registry handle, a &lt;a href=&quot;#handle-object&quot;&gt;handle object&lt;/a&gt; is used to ensure that the handles are closed correctly, even if the programmer neglects to explicitly close them.</source>
          <target state="translated">これらの関数は、WindowsレジストリAPIをPythonに公開します。レジストリハンドルとして整数を使用する代わりに、&lt;a href=&quot;#handle-object&quot;&gt;ハンドルオブジェクト&lt;/a&gt;を使用して、プログラマーがハンドルを明示的に閉じなかった場合でも、ハンドルが正しく閉じられるようにします。</target>
        </trans-unit>
        <trans-unit id="64ca6341c263d0eee46813e38f713dafca73d87a" translate="yes" xml:space="preserve">
          <source>These functions may be used to create and manage processes.</source>
          <target state="translated">これらの機能は、プロセスの作成と管理に使用することができます。</target>
        </trans-unit>
        <trans-unit id="65e8df50f0bf89eb9f4d3f60786c6448bf4847aa" translate="yes" xml:space="preserve">
          <source>These functions operate on I/O streams referenced using file descriptors.</source>
          <target state="translated">これらの関数は、ファイルディスクリプタを使用して参照されるI/Oストリームに対して動作します。</target>
        </trans-unit>
        <trans-unit id="62bfedde268bc00986bbe311ebb5f0786bf6963c" translate="yes" xml:space="preserve">
          <source>These functions provide access to some useful capabilities on Windows platforms. Some higher-level modules use these functions to build the Windows implementations of their services. For example, the &lt;a href=&quot;getpass#module-getpass&quot;&gt;&lt;code&gt;getpass&lt;/code&gt;&lt;/a&gt; module uses this in the implementation of the &lt;a href=&quot;getpass#module-getpass&quot;&gt;&lt;code&gt;getpass()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">これらの関数は、Windowsプラットフォームのいくつかの便利な機能へのアクセスを提供します。一部の高レベルモジュールは、これらの関数を使用して、サービスのWindows実装を構築します。たとえば、&lt;a href=&quot;getpass#module-getpass&quot;&gt; &lt;code&gt;getpass&lt;/code&gt; &lt;/a&gt;モジュールは&lt;a href=&quot;getpass#module-getpass&quot;&gt; &lt;code&gt;getpass()&lt;/code&gt; &lt;/a&gt;関数の実装でこれを使用します。</target>
        </trans-unit>
        <trans-unit id="0280d48461c7d32aa95410598911229c46dae797" translate="yes" xml:space="preserve">
          <source>These functions return the corresponding hash objects for calculating BLAKE2b or BLAKE2s. They optionally take these general parameters:</source>
          <target state="translated">これらの関数は、BLAKE2b または BLAKE2s を計算するための対応するハッシュオブジェクトを返します。これらの関数は、オプションでこれらの一般的なパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="228f30ca6935d93886c690db3fc546e4320724bb" translate="yes" xml:space="preserve">
          <source>These functions should be avoided in Python 3, because they return encoded bytes. It&amp;rsquo;s much better to use alternatives which return Unicode strings instead, since most Python applications will want to manipulate human readable text as strings instead of bytes. Further, it&amp;rsquo;s possible that you may get unexpected Unicode-related exceptions if there are encoding problems with the translated strings.</source>
          <target state="translated">これらの関数はエンコードされたバイトを返すため、Python 3では使用しないでください。ほとんどのPythonアプリケーションは人間が読めるテキストをバイトではなく文字列として操作するため、代わりにUnicode文字列を返す代替手段を使用する方がはるかに優れています。さらに、翻訳された文字列にエンコーディングの問題がある場合、予期しないUnicode関連の例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="152b061e5d33249f6e76f6fd12669c7d70fbc3d2" translate="yes" xml:space="preserve">
          <source>These interfaces extend the &lt;code&gt;Node&lt;/code&gt; interface. They cannot have child nodes.</source>
          <target state="translated">これらのインターフェースは &lt;code&gt;Node&lt;/code&gt; インターフェースを拡張します。子ノードを持つことはできません。</target>
        </trans-unit>
        <trans-unit id="799c1f5dbfcbd19d6e5bb337ef29e540c95dfa79" translate="yes" xml:space="preserve">
          <source>These junk-filtering functions speed up matching to find differences and do not cause any differing lines or characters to be ignored. Read the description of the &lt;a href=&quot;#difflib.SequenceMatcher.find_longest_match&quot;&gt;&lt;code&gt;find_longest_match()&lt;/code&gt;&lt;/a&gt; method&amp;rsquo;s &lt;em&gt;isjunk&lt;/em&gt; parameter for an explanation.</source>
          <target state="translated">これらのジャンクフィルタリング関数は、一致を高速化して相違点を見つけ、相違する行や文字を無視しません。説明については、&lt;a href=&quot;#difflib.SequenceMatcher.find_longest_match&quot;&gt; &lt;code&gt;find_longest_match()&lt;/code&gt; &lt;/a&gt;メソッドの&lt;em&gt;isjunk&lt;/em&gt;パラメータの説明を&lt;em&gt;参照して&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="364d64d52986eda4fa8d78b737587ffa8380e1f3" translate="yes" xml:space="preserve">
          <source>These may not be available on all platforms when used with the &lt;code&gt;strftime()&lt;/code&gt; method. The ISO 8601 year and ISO 8601 week directives are not interchangeable with the year and week number directives above. Calling &lt;code&gt;strptime()&lt;/code&gt; with incomplete or ambiguous ISO 8601 directives will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらは、 &lt;code&gt;strftime()&lt;/code&gt; メソッドで使用した場合、すべてのプラットフォームで使用できるとは限りません。ISO 8601年およびISO 8601週ディレクティブは、上記の年および週番号ディレクティブと互換性がありません。不完全またはあいまいなISO 8601ディレクティブを使用して &lt;code&gt;strptime()&lt;/code&gt; を呼び出すと、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2cefa5663c6968d98cda435b00eb0b38f51c7e77" translate="yes" xml:space="preserve">
          <source>These methods are available on &lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt;&lt;code&gt;HTTPPasswordMgr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt;&lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">これらのメソッドは、&lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt; &lt;code&gt;HTTPPasswordMgr&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt; &lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt; &lt;/a&gt;オブジェクトで使用できます。</target>
        </trans-unit>
        <trans-unit id="5911df52a37a2f5a8a67b79ea06a439077506bd9" translate="yes" xml:space="preserve">
          <source>These methods are called by a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object, in response to their methods of the same names. A &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object passes itself as the argument, and a &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object passes &lt;code&gt;None&lt;/code&gt; as the argument. A &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass&amp;rsquo;s methods should therefore be prepared to accept a &lt;em&gt;dt&lt;/em&gt; argument of &lt;code&gt;None&lt;/code&gt;, or of class &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのメソッドは、同じ名前のメソッドに応答して、&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトまたは&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトによって呼び出されます。&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトを引数として自身を通過し、&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトが通過しない &lt;code&gt;None&lt;/code&gt; 引数として。&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; の&lt;/a&gt;サブクラスのメソッドは、したがって、受け入れるように準備しなければならない&lt;em&gt;DT&lt;/em&gt;の引数 &lt;code&gt;None&lt;/code&gt; 、またはクラスの&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="18aea1bbbb44bf54322bd21581fcc7fef2dcc544" translate="yes" xml:space="preserve">
          <source>These methods generate unique file names based upon the current process ID. When using multiple threads, undetected name clashes may occur and cause corruption of the mailbox unless threads are coordinated to avoid using these methods to manipulate the same mailbox simultaneously.</source>
          <target state="translated">これらのメソッドは、現在のプロセス ID に基づいて一意のファイル名を生成します。複数のスレッドを使用している場合、これらのメソッドを使用して同じメールボックスを同時に操作しないようにスレッドを調整しない限り、検出されない名前の衝突が発生し、メールボックスの破損を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="a460e54883612c01c96877b5d32c7a52f41e8cec" translate="yes" xml:space="preserve">
          <source>These methods immediately delete the message. The MH convention of marking a message for deletion by prepending a comma to its name is not used.</source>
          <target state="translated">これらの方法は直ちにメッセージを削除する。メッセージの名前の前にカンマを付けて削除するという MH の慣習は使われていません。</target>
        </trans-unit>
        <trans-unit id="5940fc3a6f4d0793d0ba67cd0795eb41381f9f36" translate="yes" xml:space="preserve">
          <source>These methods should be avoided in Python 3. See the warning for the &lt;a href=&quot;#gettext.lgettext&quot;&gt;&lt;code&gt;lgettext()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">これらのメソッドはPython 3では避けてください&lt;a href=&quot;#gettext.lgettext&quot;&gt; &lt;code&gt;lgettext()&lt;/code&gt; &lt;/a&gt;関数の警告を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b48daa7e8c1e0cff066d2e0a4920c8cbfbcd31c" translate="yes" xml:space="preserve">
          <source>These modified docstrings are created automatically together with the function definitions that are derived from the methods at import time.</source>
          <target state="translated">これらの修正されたdocstringは、インポート時にメソッドから派生した関数定義と一緒に自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="37a911174119b81cc68b901672ebc6a9480f0a44" translate="yes" xml:space="preserve">
          <source>These more infrequently used classes are similar to the TCP and UDP classes, but use Unix domain sockets; they&amp;rsquo;re not available on non-Unix platforms. The parameters are the same as for &lt;a href=&quot;#socketserver.TCPServer&quot;&gt;&lt;code&gt;TCPServer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの使用頻度の低いクラスは、TCPおよびUDPクラスに似ていますが、Unixドメインソケットを使用します。非UNIXプラットフォームでは使用できません。パラメータは&lt;a href=&quot;#socketserver.TCPServer&quot;&gt; &lt;code&gt;TCPServer&lt;/code&gt; &lt;/a&gt;の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="1a0feedd3b398644d890b41707a8d3ab57269dc3" translate="yes" xml:space="preserve">
          <source>These must be implemented as class methods:</source>
          <target state="translated">これらはクラスメソッドとして実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="7cbdf0b741bfed107869c8df02810045e53d52c4" translate="yes" xml:space="preserve">
          <source>These objects also support being used in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, which will automatically close them when done.</source>
          <target state="translated">これらのオブジェクトは、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントでの使用もサポートしており、完了時に自動的に閉じます。</target>
        </trans-unit>
        <trans-unit id="4e722b3425b184238de0635b8e8dcc0ea887357b" translate="yes" xml:space="preserve">
          <source>These objects also support being used in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, which will automatically close them when done.</source>
          <target state="translated">これらのオブジェクトは、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントでの使用もサポートしており、完了すると自動的に閉じます。</target>
        </trans-unit>
        <trans-unit id="7ad08a7358df1d2a66eb1de7e37514f52255da7a" translate="yes" xml:space="preserve">
          <source>These objects contain the original values of &lt;code&gt;breakpointhook&lt;/code&gt;, &lt;code&gt;displayhook&lt;/code&gt;, &lt;code&gt;excepthook&lt;/code&gt;, and &lt;code&gt;unraisablehook&lt;/code&gt; at the start of the program. They are saved so that &lt;code&gt;breakpointhook&lt;/code&gt;, &lt;code&gt;displayhook&lt;/code&gt; and &lt;code&gt;excepthook&lt;/code&gt;, &lt;code&gt;unraisablehook&lt;/code&gt; can be restored in case they happen to get replaced with broken or alternative objects.</source>
          <target state="translated">これらのオブジェクトは、元の値が含まれてい &lt;code&gt;breakpointhook&lt;/code&gt; 、 &lt;code&gt;displayhook&lt;/code&gt; 、 &lt;code&gt;excepthook&lt;/code&gt; 、および &lt;code&gt;unraisablehook&lt;/code&gt; をプログラムの開始時に。彼らはそうすることを保存している &lt;code&gt;breakpointhook&lt;/code&gt; 、 &lt;code&gt;displayhook&lt;/code&gt; と &lt;code&gt;excepthook&lt;/code&gt; 、 &lt;code&gt;unraisablehook&lt;/code&gt; は、彼らが壊れたり、代替オブジェクトに置き換えしてしまった場合に復元することができます。</target>
        </trans-unit>
        <trans-unit id="6ca96d692b02c7b885bfcd6a1ee8049c02cbf749" translate="yes" xml:space="preserve">
          <source>These objects contain the original values of &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; at the start of the program. They are used during finalization, and could be useful to print to the actual standard stream no matter if the &lt;code&gt;sys.std*&lt;/code&gt; object has been redirected.</source>
          <target state="translated">これらのオブジェクトには、プログラムの開始時の &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; および &lt;code&gt;stdout&lt;/code&gt; の元の値が含まれています。これらはファイナライズ中に使用され、 &lt;code&gt;sys.std*&lt;/code&gt; オブジェクトがリダイレクトされているかどうかに関係なく、実際の標準ストリームに出力するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c79b4fd295e293df8d67f19b3b67a6719463f333" translate="yes" xml:space="preserve">
          <source>These options can be passed to &lt;a href=&quot;#mmap.mmap.madvise&quot;&gt;&lt;code&gt;mmap.madvise()&lt;/code&gt;&lt;/a&gt;. Not every option will be present on every system.</source>
          <target state="translated">これらのオプションは&lt;a href=&quot;#mmap.mmap.madvise&quot;&gt; &lt;code&gt;mmap.madvise()&lt;/code&gt; に&lt;/a&gt;渡すことができます。すべてのオプションがすべてのシステムに存在するわけではありません。</target>
        </trans-unit>
        <trans-unit id="9926e9592428ba78a5e1b23082749828067c3a4d" translate="yes" xml:space="preserve">
          <source>These options may be repeated multiple times.</source>
          <target state="translated">これらのオプションは複数回繰り返すことができます。</target>
        </trans-unit>
        <trans-unit id="4d457330f80a34e6080d306cadcb1e3ad2dc2766" translate="yes" xml:space="preserve">
          <source>These options, along with all of the other options, are described in more detail in the &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; constructor documentation.</source>
          <target state="translated">これらのオプションは、他のすべてのオプションとともに、&lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt;コンストラクターのドキュメントで詳細に説明されています。</target>
        </trans-unit>
        <trans-unit id="1dc76ffa679003835a09fce6bfd595ccfec9bd93" translate="yes" xml:space="preserve">
          <source>These parsers do not support all the argparse features, and will raise exceptions if unsupported features are used. In particular, subparsers, &lt;code&gt;argparse.REMAINDER&lt;/code&gt;, and mutually exclusive groups that include both optionals and positionals are not supported.</source>
          <target state="translated">これらのパーサーはすべてのargparse機能をサポートしているわけではなく、サポートされていない機能が使用されている場合は例外が発生します。特に、サブパーサー &lt;code&gt;argparse.REMAINDER&lt;/code&gt; 、およびオプションと定位置の両方を含む相互に排他的なグループはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="22dba5743cf8255132f82cfb61a9e3e78ed086d7" translate="yes" xml:space="preserve">
          <source>These prefabricated library loaders are available:</source>
          <target state="translated">これらのプレハブのライブラリローダーが利用できます。</target>
        </trans-unit>
        <trans-unit id="4e92aef4b27a0b69320cf0a2f7f9c5efc2f4fd1c" translate="yes" xml:space="preserve">
          <source>These protocols are decorated with &lt;a href=&quot;#typing.runtime_checkable&quot;&gt;&lt;code&gt;runtime_checkable()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのプロトコルは&lt;a href=&quot;#typing.runtime_checkable&quot;&gt; &lt;code&gt;runtime_checkable()&lt;/code&gt; で&lt;/a&gt;装飾されています。</target>
        </trans-unit>
        <trans-unit id="eef266eadbe60582ab001bde9ad9c46caee2dc9f" translate="yes" xml:space="preserve">
          <source>These restrictions are why picklable functions and classes must be defined in the top level of a module.</source>
          <target state="translated">このような制約があるため、ピック可能な関数やクラスはモジュールの最上位レベルで定義しなければなりません。</target>
        </trans-unit>
        <trans-unit id="35bc8bcd8d7bb38d5e825c33344aa3d246936c4a" translate="yes" xml:space="preserve">
          <source>These semantic differences are intentional and are biased toward convenience in the most common use cases.</source>
          <target state="translated">これらの意味的な違いは意図的なものであり、最も一般的なユースケースでは利便性に偏っています。</target>
        </trans-unit>
        <trans-unit id="2e9d492a24219c745ba294aeae2b21be77edbc2b" translate="yes" xml:space="preserve">
          <source>These semantic differences are intentional and are biased toward maximal convenience.</source>
          <target state="translated">これらの意味的な違いは意図的なものであり、利便性を最大化する方向に偏っている。</target>
        </trans-unit>
        <trans-unit id="390560ef8845b8bdb712a7c8bf8f16cdd1ae320d" translate="yes" xml:space="preserve">
          <source>These should be implemented as functions:</source>
          <target state="translated">これらは関数として実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="ceca439cc106eb947129c153f66b43d43dadf38e" translate="yes" xml:space="preserve">
          <source>These sizes are available as module &lt;a href=&quot;#constants&quot;&gt;constants&lt;/a&gt; described below.</source>
          <target state="translated">これらのサイズは、以下で説明するモジュール&lt;a href=&quot;#constants&quot;&gt;定数&lt;/a&gt;として利用できます。</target>
        </trans-unit>
        <trans-unit id="48b7b72381b7aee41373544eef3f010c5c76d709" translate="yes" xml:space="preserve">
          <source>These standard library collections support parameterized generics.</source>
          <target state="translated">これらの標準ライブラリコレクションは、パラメータ化されたジェネリックをサポートしています。</target>
        </trans-unit>
        <trans-unit id="2800725d5ea46f65c695489e6472f9a85853adeb" translate="yes" xml:space="preserve">
          <source>These streams are regular &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-file&quot;&gt;text files&lt;/a&gt; like those returned by the &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function. Their parameters are chosen as follows:</source>
          <target state="translated">これらのストリームは、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;関数によって返されるような通常の&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-file&quot;&gt;テキストファイルです&lt;/a&gt;。それらのパラメーターは次のように選択されます。</target>
        </trans-unit>
        <trans-unit id="85b6d6a6d2d948a358037771f7c838becde52be5" translate="yes" xml:space="preserve">
          <source>These streams are regular &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-file&quot;&gt;text files&lt;/a&gt; like those returned by the &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function. Their parameters are chosen as follows:</source>
          <target state="translated">これらのストリームは、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;関数によって返されるような通常の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-file&quot;&gt;テキストファイルです&lt;/a&gt;。それらのパラメータは次のように選択されます。</target>
        </trans-unit>
        <trans-unit id="e34d0790d235872a36ccb0f116d30f629c65d5a7" translate="yes" xml:space="preserve">
          <source>These symbols define resources whose consumption can be controlled using the &lt;a href=&quot;#resource.setrlimit&quot;&gt;&lt;code&gt;setrlimit()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#resource.getrlimit&quot;&gt;&lt;code&gt;getrlimit()&lt;/code&gt;&lt;/a&gt; functions described below. The values of these symbols are exactly the constants used by C programs.</source>
          <target state="translated">これらのシンボルは、以下で説明する&lt;a href=&quot;#resource.setrlimit&quot;&gt; &lt;code&gt;setrlimit()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#resource.getrlimit&quot;&gt; &lt;code&gt;getrlimit()&lt;/code&gt; &lt;/a&gt;関数を使用して消費を制御できるリソースを定義します。これらのシンボルの値は、Cプログラムで使用される定数とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="32d519f5749336b639a376599af558d7266a105d" translate="yes" xml:space="preserve">
          <source>These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback. Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error. (Typical use is &lt;code&gt;import pdb; pdb.pm()&lt;/code&gt; to enter the post-mortem debugger; see &lt;a href=&quot;pdb#module-pdb&quot;&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt; module for more information.)</source>
          <target state="translated">これらの3つの変数は常に定義されているわけではありません。これらは、例外が処理されず、インタープリターがエラーメッセージとスタックトレースバックを出力するときに設定されます。それらの使用目的は、対話型ユーザーがデバッガモジュールをインポートして、エラーの原因となったコマンドを再実行する必要なく死後デバッグに従事できるようにすることです。（典型的な使用法は &lt;code&gt;import pdb; pdb.pm()&lt;/code&gt; は事後分析デバッガに入ります。詳細については、&lt;a href=&quot;pdb#module-pdb&quot;&gt; &lt;code&gt;pdb&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。）</target>
        </trans-unit>
        <trans-unit id="19392b851464bd02aa15e872a0539674c54e509e" translate="yes" xml:space="preserve">
          <source>These time zones also support the &lt;a href=&quot;datetime#datetime.datetime.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; attribute introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0495&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 495&lt;/strong&gt;&lt;/a&gt;. During offset transitions which induce ambiguous times (such as a daylight saving time to standard time transition), the offset from &lt;em&gt;before&lt;/em&gt; the transition is used when &lt;code&gt;fold=0&lt;/code&gt;, and the offset &lt;em&gt;after&lt;/em&gt; the transition is used when &lt;code&gt;fold=1&lt;/code&gt;, for example:</source>
          <target state="translated">これらのタイムゾーンは、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0495&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP495で&lt;/strong&gt;&lt;/a&gt;導入された&lt;a href=&quot;datetime#datetime.datetime.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt;属性もサポートしています。あいまいな時間を誘発するオフセット遷移（夏時間から標準時間への遷移など）では、遷移&lt;em&gt;前&lt;/em&gt;からのオフセットは &lt;code&gt;fold=0&lt;/code&gt; の場合に使用さ&lt;em&gt;れ&lt;/em&gt;、遷移&lt;em&gt;後&lt;/em&gt;のオフセットは &lt;code&gt;fold=1&lt;/code&gt; の場合に使用されます。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b700f59257d82022d76d6670b95dd0556a5db8f6" translate="yes" xml:space="preserve">
          <source>These tools and their built-in counterparts also work well with the high-speed functions in the &lt;a href=&quot;operator#module-operator&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt; module. For example, the multiplication operator can be mapped across two vectors to form an efficient dot-product: &lt;code&gt;sum(map(operator.mul, vector1, vector2))&lt;/code&gt;.</source>
          <target state="translated">これらのツールとその組み込みツールも、&lt;a href=&quot;operator#module-operator&quot;&gt; &lt;code&gt;operator&lt;/code&gt; &lt;/a&gt;モジュールの高速機能とうまく連動します。たとえば、乗算演算子を2つのベクトルにマッピングして、効率的な内積を形成できます &lt;code&gt;sum(map(operator.mul, vector1, vector2))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e77fbc4d220030bbcd6181d10d369921bab3851a" translate="yes" xml:space="preserve">
          <source>These tuples correspond to the C library &lt;code&gt;posix_spawn_file_actions_addopen()&lt;/code&gt;, &lt;code&gt;posix_spawn_file_actions_addclose()&lt;/code&gt;, and &lt;code&gt;posix_spawn_file_actions_adddup2()&lt;/code&gt; API calls used to prepare for the &lt;code&gt;posix_spawn()&lt;/code&gt; call itself.</source>
          <target state="translated">これらのタプルは、Cライブラリ &lt;code&gt;posix_spawn_file_actions_addopen()&lt;/code&gt; 、 &lt;code&gt;posix_spawn_file_actions_addclose()&lt;/code&gt; 、および &lt;code&gt;posix_spawn_file_actions_adddup2()&lt;/code&gt; API呼び出しに対応し、 &lt;code&gt;posix_spawn()&lt;/code&gt; 呼び出し自体の準備に使用されます。</target>
        </trans-unit>
        <trans-unit id="dbf6e0e647e0d38489bb73abd84ff4677afacaad" translate="yes" xml:space="preserve">
          <source>These two approaches both output:</source>
          <target state="translated">この2つのアプローチはどちらも出力します。</target>
        </trans-unit>
        <trans-unit id="7c080ba8814228ce441c13011c88627af47951fe" translate="yes" xml:space="preserve">
          <source>These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).</source>
          <target state="translated">これら2つの定数が定義されていれば、ソケット型と組み合わせて、いくつかのフラグをアトミックに設定することができます(これにより、競合状態になる可能性や個別の呼び出しを避けることができます)。</target>
        </trans-unit>
        <trans-unit id="3a39e6e21e19b9d8817c24d832895a8746655153" translate="yes" xml:space="preserve">
          <source>These two make it possible to view the heap as a regular Python list without surprises: &lt;code&gt;heap[0]&lt;/code&gt; is the smallest item, and &lt;code&gt;heap.sort()&lt;/code&gt; maintains the heap invariant!</source>
          <target state="translated">これら2つにより、ヒープを通常のPythonリストとして驚きなく表示することが可能になります &lt;code&gt;heap.sort()&lt;/code&gt; &lt;code&gt;heap[0]&lt;/code&gt; は最小の項目であり、heap.sort（）はヒープを不変に維持します。</target>
        </trans-unit>
        <trans-unit id="164431ebbd6018da434ddafc8673fa593bda252e" translate="yes" xml:space="preserve">
          <source>These two values (measured in number of bytes) control when the protocol&amp;rsquo;s &lt;a href=&quot;#asyncio.BaseProtocol.pause_writing&quot;&gt;&lt;code&gt;protocol.pause_writing()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.BaseProtocol.resume_writing&quot;&gt;&lt;code&gt;protocol.resume_writing()&lt;/code&gt;&lt;/a&gt; methods are called. If specified, the low watermark must be less than or equal to the high watermark. Neither &lt;em&gt;high&lt;/em&gt; nor &lt;em&gt;low&lt;/em&gt; can be negative.</source>
          <target state="translated">これら2つの値（バイト数で測定&lt;a href=&quot;#asyncio.BaseProtocol.pause_writing&quot;&gt; &lt;code&gt;protocol.pause_writing()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#asyncio.BaseProtocol.resume_writing&quot;&gt; &lt;code&gt;protocol.resume_writing()&lt;/code&gt; &lt;/a&gt;メソッドとprotocol.resume_writing（）メソッドが呼び出されるタイミングを制御します。指定する場合、最低水準点は最高水準点以下でなければなりません。&lt;em&gt;高値&lt;/em&gt;も&lt;em&gt;低&lt;/em&gt;値も負になることはありません。</target>
        </trans-unit>
        <trans-unit id="574630dc61934cf9f92e574ac1641bd851cae54b" translate="yes" xml:space="preserve">
          <source>These type aliases correspond to the return types from &lt;a href=&quot;re#re.compile&quot;&gt;&lt;code&gt;re.compile()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;re#re.match&quot;&gt;&lt;code&gt;re.match()&lt;/code&gt;&lt;/a&gt;. These types (and the corresponding functions) are generic in &lt;code&gt;AnyStr&lt;/code&gt; and can be made specific by writing &lt;code&gt;Pattern[str]&lt;/code&gt;, &lt;code&gt;Pattern[bytes]&lt;/code&gt;, &lt;code&gt;Match[str]&lt;/code&gt;, or &lt;code&gt;Match[bytes]&lt;/code&gt;.</source>
          <target state="translated">これらの型エイリアスは、&lt;a href=&quot;re#re.compile&quot;&gt; &lt;code&gt;re.compile()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;re#re.match&quot;&gt; &lt;code&gt;re.match()&lt;/code&gt; &lt;/a&gt;からの戻り型に対応しています。これらのタイプ（および対応する関数）は &lt;code&gt;AnyStr&lt;/code&gt; でジェネリックであり、 &lt;code&gt;Pattern[str]&lt;/code&gt; 、 &lt;code&gt;Pattern[bytes]&lt;/code&gt; 、 &lt;code&gt;Match[str]&lt;/code&gt; 、または &lt;code&gt;Match[bytes]&lt;/code&gt; 記述することによって特定にすることができます。</target>
        </trans-unit>
        <trans-unit id="6c8845c2683fe62464e3412e8c25d2712718fdbe" translate="yes" xml:space="preserve">
          <source>These type aliases correspond to the return types from &lt;a href=&quot;re#re.compile&quot;&gt;&lt;code&gt;re.compile()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;re#re.match&quot;&gt;&lt;code&gt;re.match()&lt;/code&gt;&lt;/a&gt;. These types (and the corresponding functions) are generic in &lt;code&gt;AnyStr&lt;/code&gt; and can be made specific by writing &lt;code&gt;Pattern[str]&lt;/code&gt;, &lt;code&gt;Pattern[bytes]&lt;/code&gt;, &lt;code&gt;Match[str]&lt;/code&gt;, or &lt;code&gt;Match[bytes]&lt;/code&gt;. These types are also in the &lt;code&gt;typing.re&lt;/code&gt; namespace.</source>
          <target state="translated">これらの型エイリアスは、&lt;a href=&quot;re#re.compile&quot;&gt; &lt;code&gt;re.compile()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;re#re.match&quot;&gt; &lt;code&gt;re.match()&lt;/code&gt; &lt;/a&gt;からの戻り値の型に対応します。これらのタイプ（および対応する関数）は &lt;code&gt;AnyStr&lt;/code&gt; で一般的であり、 &lt;code&gt;Pattern[str]&lt;/code&gt; 、 &lt;code&gt;Pattern[bytes]&lt;/code&gt; 、 &lt;code&gt;Match[str]&lt;/code&gt; 、または &lt;code&gt;Match[bytes]&lt;/code&gt; 記述することで特定できます。これらのタイプは、 &lt;code&gt;typing.re&lt;/code&gt; 名前空間にもあります。</target>
        </trans-unit>
        <trans-unit id="c1dff30429da744e3abeb83ca67b97f13e80951a" translate="yes" xml:space="preserve">
          <source>These uses have different requirements, and it is important to distinguish them. In particular, filling your docstrings with obscure test cases makes for bad documentation.</source>
          <target state="translated">これらの用途には異なる要件があり、区別することが重要です。特に、不明瞭なテストケースで docstring を埋めることは、悪いドキュメントになります。</target>
        </trans-unit>
        <trans-unit id="77174f1e7631bf4075a0d95eafd9f3a93f86cee8" translate="yes" xml:space="preserve">
          <source>These values are not designed to be exposed to end-users; for user facing elements, applications should use something like CLDR (the Unicode Common Locale Data Repository) to get more user-friendly strings. See also the cautionary note on &lt;a href=&quot;#zoneinfo.ZoneInfo.key&quot;&gt;&lt;code&gt;ZoneInfo.key&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの値は、エンドユーザーに公開されるようには設計されていません。ユーザー向けの要素の場合、アプリケーションはCLDR（Unicode Common Locale Data Repository）などを使用して、よりユーザーフレンドリーな文字列を取得する必要があります。&lt;a href=&quot;#zoneinfo.ZoneInfo.key&quot;&gt; &lt;code&gt;ZoneInfo.key&lt;/code&gt; &lt;/a&gt;の注意事項も参照してください。</target>
        </trans-unit>
        <trans-unit id="04f38c67d7afb9e3ad667bc8f7a956cfa60d4f17" translate="yes" xml:space="preserve">
          <source>They are written as &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;, respectively.</source>
          <target state="translated">それらは、それぞれ &lt;code&gt;False&lt;/code&gt; および &lt;code&gt;True&lt;/code&gt; と記述されています。</target>
        </trans-unit>
        <trans-unit id="90b1fe661130f08bec50f79a318e33e031b7d747" translate="yes" xml:space="preserve">
          <source>They must have since the parser can&amp;rsquo;t tell the type of the operands.</source>
          <target state="translated">パーサーはオペランドのタイプを判別できないため、それらは必要です。</target>
        </trans-unit>
        <trans-unit id="560fa1e47346eab1954f144c298efe7129116f9d" translate="yes" xml:space="preserve">
          <source>Third-party event loops can use their own subclass of &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; for interoperability. In this case, the result type is a subclass of &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">サードパーティのイベントループは、相互運用性のために&lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; の&lt;/a&gt;独自のサブクラスを使用できます。この場合、結果のタイプは&lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="6885413c3edcf4b3482d003002d40466d1c7529c" translate="yes" xml:space="preserve">
          <source>Third-party event loops implementations might not support custom child watchers. For such event loops, using &lt;a href=&quot;#asyncio.set_child_watcher&quot;&gt;&lt;code&gt;set_child_watcher()&lt;/code&gt;&lt;/a&gt; might be prohibited or have no effect.</source>
          <target state="translated">サードパーティのイベントループ実装は、カスタムの子ウォッチャーをサポートしない場合があります。このようなイベントループでは、&lt;a href=&quot;#asyncio.set_child_watcher&quot;&gt; &lt;code&gt;set_child_watcher()&lt;/code&gt; の&lt;/a&gt;使用が禁止されているか、効果がない可能性があります。</target>
        </trans-unit>
        <trans-unit id="d6d33edc8f37f7925e4e4194d0d68db3b29628f3" translate="yes" xml:space="preserve">
          <source>Third-party library with expanded time zone and parsing support.</source>
          <target state="translated">拡張されたタイムゾーンとパースのサポートを持つサードパーティ製ライブラリ。</target>
        </trans-unit>
        <trans-unit id="537a50311943cfeb994000528b2810d2698fd99b" translate="yes" xml:space="preserve">
          <source>Third-party unittest framework with a lighter-weight syntax for writing tests. For example, &lt;code&gt;assert func(10) == 42&lt;/code&gt;.</source>
          <target state="translated">テストを作成するためのより軽量な構文を備えたサードパーティのユニットテストフレームワーク。たとえば、 &lt;code&gt;assert func(10) == 42&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c3b9ee4043cb6de20c067db3fc4ab5a88de0e0da" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; class method returns bytearray object, decoding the given string object. The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored.</source>
          <target state="translated">この&lt;a href=&quot;#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;クラスのメソッドは、バイト配列オブジェクトを返し、指定された文字列オブジェクトをデコードします。文字列には、バイトごとに2桁の16進数が含まれている必要があり、ASCIIの空白は無視されます。</target>
        </trans-unit>
        <trans-unit id="9f39db7a12ab223e5060700f28e89f71e712b838" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; class method returns a bytes object, decoding the given string object. The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored.</source>
          <target state="translated">この&lt;a href=&quot;#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;クラスメソッドは、バイトオブジェクトを返し、指定された文字列オブジェクトをデコードします。文字列には、バイトごとに2桁の16進数が含まれている必要があり、ASCIIの空白は無視されます。</target>
        </trans-unit>
        <trans-unit id="25c5a3603bbf6dde0a60e8a1166341e81b90d9ce" translate="yes" xml:space="preserve">
          <source>This C function is able to make calls into other C modules, including the C functions that make up the Tk library. Tk is implemented in C and some Tcl. The Tcl part of the Tk widgets is used to bind certain default behaviors to widgets, and is executed once at the point where the Python &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; package is imported. (The user never sees this stage).</source>
          <target state="translated">このC関数は、Tkライブラリを構成するC関数を含む他のCモジュールを呼び出すことができます。TkはCおよび一部のTclで実装されています。TkウィジェットのTcl部分は、特定のデフォルト動作をウィジェットにバインドするために使用され、Python &lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;パッケージがインポートされた時点で1回実行されます。（ユーザーはこの段階を見ることはありません）。</target>
        </trans-unit>
        <trans-unit id="1d6579a392f5cf7ff657ccc443a5878443ad506e" translate="yes" xml:space="preserve">
          <source>This ExampleService demo can be invoked from the command line:</source>
          <target state="translated">この ExampleService デモは、コマンドラインから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="66603e0f2e17db55d8047fa37dc46cc24b89b2cc" translate="yes" xml:space="preserve">
          <source>This Life Preserver was written by Matt Conway at the University of Virginia.</source>
          <target state="translated">このライフ・プリザーバーは、バージニア大学のマット・コンウェイによって書かれたものです。</target>
        </trans-unit>
        <trans-unit id="ff67911a0956c12902ae446cfb25b06222d6404b" translate="yes" xml:space="preserve">
          <source>This RFC defined the encoding of data which was XDR at the time this module was originally written. It has apparently been obsoleted by &lt;a href=&quot;https://tools.ietf.org/html/rfc1832.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 1832&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">このRFCは、このモジュールが最初に作成されたときにXDRであったデータのエンコードを定義しました。&lt;a href=&quot;https://tools.ietf.org/html/rfc1832.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 1832&lt;/strong&gt;&lt;/a&gt;によって廃止されたようです。</target>
        </trans-unit>
        <trans-unit id="842c2f73983d293e723e4d1bf4e9d2c64a72c57e" translate="yes" xml:space="preserve">
          <source>This Request For Comments includes the rules for joining an absolute and a relative URL, including a fair number of &amp;ldquo;Abnormal Examples&amp;rdquo; which govern the treatment of border cases.</source>
          <target state="translated">このコメント要求には、絶対および相対URLに参加するためのルールが含まれています。これには、国境事件の扱いを規定する「異常な例」のかなりの数が含まれます。</target>
        </trans-unit>
        <trans-unit id="135088776289217c28423276fa3c4b5d93458f2e" translate="yes" xml:space="preserve">
          <source>This TurtleScreen method is available as a global function only under the name &lt;code&gt;clearscreen&lt;/code&gt;. The global function &lt;code&gt;clear&lt;/code&gt; is a different one derived from the Turtle method &lt;code&gt;clear&lt;/code&gt;.</source>
          <target state="translated">このTurtleScreenメソッドは、 &lt;code&gt;clearscreen&lt;/code&gt; という名前でのみグローバル関数として使用できます。グローバル関数 &lt;code&gt;clear&lt;/code&gt; は、Turtleメソッド &lt;code&gt;clear&lt;/code&gt; から派生したものとは異なります。</target>
        </trans-unit>
        <trans-unit id="9a5c7fbfb12e64e80a50cd253b77207e3f8d1c22" translate="yes" xml:space="preserve">
          <source>This TurtleScreen method is available as a global function only under the name &lt;code&gt;onscreenclick&lt;/code&gt;. The global function &lt;code&gt;onclick&lt;/code&gt; is another one derived from the Turtle method &lt;code&gt;onclick&lt;/code&gt;.</source>
          <target state="translated">このTurtleScreenメソッドは、 &lt;code&gt;onscreenclick&lt;/code&gt; という名前でのみグローバル関数として使用できます。グローバル関数 &lt;code&gt;onclick&lt;/code&gt; は、タートルメソッド &lt;code&gt;onclick&lt;/code&gt; から派生したもう1つの関数です。</target>
        </trans-unit>
        <trans-unit id="cbcf70844f55515130094216c6263e62345d52b8" translate="yes" xml:space="preserve">
          <source>This TurtleScreen method is available as a global function only under the name &lt;code&gt;resetscreen&lt;/code&gt;. The global function &lt;code&gt;reset&lt;/code&gt; is another one derived from the Turtle method &lt;code&gt;reset&lt;/code&gt;.</source>
          <target state="translated">このTurtleScreenメソッドは、 &lt;code&gt;resetscreen&lt;/code&gt; という名前でのみグローバル関数として使用できます。グローバル関数の &lt;code&gt;reset&lt;/code&gt; は、タートルメソッドの &lt;code&gt;reset&lt;/code&gt; から派生したもう1つの関数です。</target>
        </trans-unit>
        <trans-unit id="4f4aceb05d95d7a494f76ab4488a09282ba3d5bb" translate="yes" xml:space="preserve">
          <source>This activates a special exception handler that will display detailed reports in the Web browser if any errors occur. If you&amp;rsquo;d rather not show the guts of your program to users of your script, you can have the reports saved to files instead, with code like this:</source>
          <target state="translated">これにより、エラーが発生した場合にWebブラウザーに詳細レポートを表示する特別な例外ハンドラーがアクティブになります。プログラムの要点をスクリプトのユーザーに見せたくない場合は、次のようなコードを使用して、代わりにレポートをファイルに保存できます。</target>
        </trans-unit>
        <trans-unit id="943d36d8edb0b61bc7c78f04ba488758674799cf" translate="yes" xml:space="preserve">
          <source>This affects &lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt;&lt;code&gt;getTestCaseNames()&lt;/code&gt;&lt;/a&gt; and all the &lt;code&gt;loadTestsFrom*()&lt;/code&gt; methods.</source>
          <target state="translated">これは、&lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt; &lt;code&gt;getTestCaseNames()&lt;/code&gt; &lt;/a&gt;およびすべての &lt;code&gt;loadTestsFrom*()&lt;/code&gt; メソッドに影響します。</target>
        </trans-unit>
        <trans-unit id="4c629e7d2eb45c1763b440d04e7b2f6f6d1af0f0" translate="yes" xml:space="preserve">
          <source>This affects all the &lt;code&gt;loadTestsFrom*()&lt;/code&gt; methods.</source>
          <target state="translated">これは、すべての &lt;code&gt;loadTestsFrom*()&lt;/code&gt; メソッドに影響します。</target>
        </trans-unit>
        <trans-unit id="7e1a9d70f32008ed3c96c0e9a74a6e82daf6f746" translate="yes" xml:space="preserve">
          <source>This allows applications to get a suspend-aware monotonic clock without having to deal with the complications of &lt;a href=&quot;#time.CLOCK_REALTIME&quot;&gt;&lt;code&gt;CLOCK_REALTIME&lt;/code&gt;&lt;/a&gt;, which may have discontinuities if the time is changed using &lt;code&gt;settimeofday()&lt;/code&gt; or similar.</source>
          <target state="translated">これにより、アプリケーションは&lt;a href=&quot;#time.CLOCK_REALTIME&quot;&gt; &lt;code&gt;CLOCK_REALTIME&lt;/code&gt; &lt;/a&gt;の複雑さに対処することなく、サスペンド対応の単調クロックを取得できます。これは、 &lt;code&gt;settimeofday()&lt;/code&gt; などを使用して時刻が変更された場合に不連続になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="019306589ee6acae06fdeea2a2650ea3f4d68bd9" translate="yes" xml:space="preserve">
          <source>This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see &lt;a href=&quot;enum#enum.Enum&quot;&gt;&lt;code&gt;enum.Enum&lt;/code&gt;&lt;/a&gt; for an example).</source>
          <target state="translated">これにより、インスタンスでアクティブなプロパティを持ち、同じ名前のクラスで仮想属性を持つことができます（例については&lt;a href=&quot;enum#enum.Enum&quot;&gt; &lt;code&gt;enum.Enum&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="5dc2bd0016562761a167a94107ea18ecde7bcee3" translate="yes" xml:space="preserve">
          <source>This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see Enum for an example).</source>
          <target state="translated">これにより、インスタンス上でプロパティをアクティブにし、同じ名前のクラス上で仮想属性を持つことができます (例は Enum を参照してください)。</target>
        </trans-unit>
        <trans-unit id="f35eea3e328469bbb9e12d321786f404340c6df4" translate="yes" xml:space="preserve">
          <source>This allows the intended cleanup up behaviour to be made explicit up front, rather than requiring a separate flag variable.</source>
          <target state="translated">これにより、別のフラグ変数を必要とするのではなく、クリーンアップの動作を前もって明示することができます。</target>
        </trans-unit>
        <trans-unit id="fca28bc4acec436ecfcdadf8513fc13af190b783" translate="yes" xml:space="preserve">
          <source>This allows the newly spawned Python interpreter to safely import the module and then run the module&amp;rsquo;s &lt;code&gt;foo()&lt;/code&gt; function.</source>
          <target state="translated">これにより、新しく生成されたPythonインタープリターがモジュールを安全にインポートし、モジュールの &lt;code&gt;foo()&lt;/code&gt; 関数を実行できます。</target>
        </trans-unit>
        <trans-unit id="57868094fc52a1cd6c9af993bb993a3e5544da0a" translate="yes" xml:space="preserve">
          <source>This allows you to use the shell filename completion to specify the test module. The file specified must still be importable as a module. The path is converted to a module name by removing the &amp;lsquo;.py&amp;rsquo; and converting path separators into &amp;lsquo;.&amp;rsquo;. If you want to execute a test file that isn&amp;rsquo;t importable as a module you should execute the file directly instead.</source>
          <target state="translated">これにより、シェルファイル名の補完機能を使用して、テストモジュールを指定できます。指定されたファイルは、モジュールとしてインポートできる必要があります。パスは、「。py」を削除し、パス区切り文字を「。」に変換することにより、モジュール名に変換されます。モジュールとしてインポートできないテストファイルを実行する場合は、代わりにファイルを直接実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="38d1a626d9c7a8c9eaba4801730692cd5ed50152" translate="yes" xml:space="preserve">
          <source>This also means that it is not possible to create a subtype of &lt;code&gt;Derived&lt;/code&gt; since it is an identity function at runtime, not an actual type:</source>
          <target state="translated">これはまた、 &lt;code&gt;Derived&lt;/code&gt; のサブタイプを作成することができないことを意味します。これは、それが実行時に識別関数であり、実際のタイプではないためです。</target>
        </trans-unit>
        <trans-unit id="80557a359ae07843f1afe80a27523489463324a4" translate="yes" xml:space="preserve">
          <source>This applies to &lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt;&lt;code&gt;assert_called_with()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt;&lt;code&gt;assert_called_once_with()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.mock.Mock.assert_has_calls&quot;&gt;&lt;code&gt;assert_has_calls()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.assert_any_call&quot;&gt;&lt;code&gt;assert_any_call()&lt;/code&gt;&lt;/a&gt;. When &lt;a href=&quot;#auto-speccing&quot;&gt;Autospeccing&lt;/a&gt;, it will also apply to method calls on the mock object.</source>
          <target state="translated">これは、&lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt; &lt;code&gt;assert_called_with()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt; &lt;code&gt;assert_called_once_with()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#unittest.mock.Mock.assert_has_calls&quot;&gt; &lt;code&gt;assert_has_calls()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#unittest.mock.Mock.assert_any_call&quot;&gt; &lt;code&gt;assert_any_call()&lt;/code&gt; に適用され&lt;/a&gt;ます。&lt;a href=&quot;#auto-speccing&quot;&gt;Autospeccingの&lt;/a&gt;場合、モックオブジェクトのメソッド呼び出しにも適用されます。</target>
        </trans-unit>
        <trans-unit id="537b430af62b891eeb9751af6b5c80e259818d26" translate="yes" xml:space="preserve">
          <source>This approach has been first presented in &lt;a href=&quot;https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader%241208?mode=topic&quot;&gt;a discussion on xmlrpc.com&lt;/a&gt;.</source>
          <target state="translated">このアプローチは&lt;a href=&quot;https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader%241208?mode=topic&quot;&gt;、xmlrpc.comに関する議論で&lt;/a&gt;最初に提示されました。</target>
        </trans-unit>
        <trans-unit id="fb8573037230d3969561b2945452190c58711f18" translate="yes" xml:space="preserve">
          <source>This approach is perhaps less convenient than employing nested &lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy Objects&lt;/a&gt; for most use cases but also demonstrates a level of control over the synchronization.</source>
          <target state="translated">このアプローチは、ほとんどのユースケースでネストされた&lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;プロキシオブジェクト&lt;/a&gt;を使用するよりもおそらく便利ではありませんが、同期の制御レベルも示します。</target>
        </trans-unit>
        <trans-unit id="a12a4abb0591cce4c8aa99900d108da46a55a5b6" translate="yes" xml:space="preserve">
          <source>This arranges for a &lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt;&lt;code&gt;CancelledError&lt;/code&gt;&lt;/a&gt; exception to be thrown into the wrapped coroutine on the next cycle of the event loop.</source>
          <target state="translated">これにより、&lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt; &lt;code&gt;CancelledError&lt;/code&gt; &lt;/a&gt;例外がイベントループの次のサイクルでラップされたコルーチンにスローされるようになります。</target>
        </trans-unit>
        <trans-unit id="e81de60ddc5e6cb663061f6459f34a67618bb9be" translate="yes" xml:space="preserve">
          <source>This asks the thread to terminate, and then waits for it to do so. Note that if you don&amp;rsquo;t call this before your application exits, there may be some records still left on the queue, which won&amp;rsquo;t be processed.</source>
          <target state="translated">これは、スレッドに終了を要求し、終了するまで待機します。アプリケーションが終了する前にこれを呼び出さない場合、キューに残っているレコードが残っている可能性があり、処理されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d862b47fe45aa6e17de78d8754a167b3ff452f1d" translate="yes" xml:space="preserve">
          <source>This attribute contains a mapping of error code integers to two-element tuples containing a short and long message. For example, &lt;code&gt;{code: (shortmessage,
longmessage)}&lt;/code&gt;. The &lt;em&gt;shortmessage&lt;/em&gt; is usually used as the &lt;em&gt;message&lt;/em&gt; key in an error response, and &lt;em&gt;longmessage&lt;/em&gt; as the &lt;em&gt;explain&lt;/em&gt; key. It is used by &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_response_only&quot;&gt;&lt;code&gt;send_response_only()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_error&quot;&gt;&lt;code&gt;send_error()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">この属性には、短いコードと長いメッセージを含む2要素のタプルへのエラーコード整数のマッピングが含まれています。たとえば、 &lt;code&gt;{code: (shortmessage, longmessage)}&lt;/code&gt; ます。&lt;em&gt;ShortMessageには、&lt;/em&gt;通常のように使用される&lt;em&gt;メッセージ&lt;/em&gt;、エラー応答で鍵、及び&lt;em&gt;longmessageは&lt;/em&gt;として&lt;em&gt;説明&lt;/em&gt;キー。&lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_response_only&quot;&gt; &lt;code&gt;send_response_only()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_error&quot;&gt; &lt;code&gt;send_error()&lt;/code&gt; &lt;/a&gt;メソッドで使用されます。</target>
        </trans-unit>
        <trans-unit id="3265ec6de83e09f5a858d9d1321fb30470037593" translate="yes" xml:space="preserve">
          <source>This attribute contains the actual value of the instance. For integer and pointer types, it is an integer, for character types, it is a single character bytes object or string, for character pointer types it is a Python bytes object or string.</source>
          <target state="translated">この属性には、インスタンスの実際の値が含まれます。整数型やポインタ型の場合は整数、文字型の場合は1文字のバイトオブジェクトか文字列、文字ポインタ型の場合はPythonのバイトオブジェクトか文字列です。</target>
        </trans-unit>
        <trans-unit id="ce1d216ac33ce7f92dd6899eec472d3df9018600" translate="yes" xml:space="preserve">
          <source>This attribute controls the maximum length of diffs output by assert methods that report diffs on failure. It defaults to 80*8 characters. Assert methods affected by this attribute are &lt;a href=&quot;#unittest.TestCase.assertSequenceEqual&quot;&gt;&lt;code&gt;assertSequenceEqual()&lt;/code&gt;&lt;/a&gt; (including all the sequence comparison methods that delegate to it), &lt;a href=&quot;#unittest.TestCase.assertDictEqual&quot;&gt;&lt;code&gt;assertDictEqual()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.TestCase.assertMultiLineEqual&quot;&gt;&lt;code&gt;assertMultiLineEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この属性は、失敗時の差分を報告するassertメソッドが出力する差分の最大長を制御します。デフォルトは80 * 8文字です。この属性の影響を受けるAssertメソッドは、&lt;a href=&quot;#unittest.TestCase.assertSequenceEqual&quot;&gt; &lt;code&gt;assertSequenceEqual()&lt;/code&gt; &lt;/a&gt;（それに委譲するすべてのシーケンス比較メソッドを含む）、&lt;a href=&quot;#unittest.TestCase.assertDictEqual&quot;&gt; &lt;code&gt;assertDictEqual()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#unittest.TestCase.assertMultiLineEqual&quot;&gt; &lt;code&gt;assertMultiLineEqual()&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7b756a9463a6c4c6c113805675dfcd1ed425d592" translate="yes" xml:space="preserve">
          <source>This attribute has no effect if the traceback limit is &lt;code&gt;1&lt;/code&gt;. See the &lt;a href=&quot;#tracemalloc.get_traceback_limit&quot;&gt;&lt;code&gt;get_traceback_limit()&lt;/code&gt;&lt;/a&gt; function and &lt;a href=&quot;#tracemalloc.Snapshot.traceback_limit&quot;&gt;&lt;code&gt;Snapshot.traceback_limit&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">トレースバック制限が &lt;code&gt;1&lt;/code&gt; の場合、この属性は効果がありません。&lt;a href=&quot;#tracemalloc.get_traceback_limit&quot;&gt; &lt;code&gt;get_traceback_limit()&lt;/code&gt; &lt;/a&gt;関数と&lt;a href=&quot;#tracemalloc.Snapshot.traceback_limit&quot;&gt; &lt;code&gt;Snapshot.traceback_limit&lt;/code&gt; &lt;/a&gt;属性を参照してください。</target>
        </trans-unit>
        <trans-unit id="efb0d29d4166e46dd3615e90c15f7c9725a59567" translate="yes" xml:space="preserve">
          <source>This attribute is &lt;code&gt;None&lt;/code&gt; by default. If you assign a string to it, that string will be recognized as a lexical-level inclusion request similar to the &lt;code&gt;source&lt;/code&gt; keyword in various shells. That is, the immediately following token will be opened as a filename and input will be taken from that stream until EOF, at which point the &lt;a href=&quot;io#io.IOBase.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method of that stream will be called and the input source will again become the original input stream. Source requests may be stacked any number of levels deep.</source>
          <target state="translated">この属性はデフォルトでは &lt;code&gt;None&lt;/code&gt; です。文字列を割り当てると、その文字列は、さまざまなシェルの &lt;code&gt;source&lt;/code&gt; キーワードと同様に、字句レベルの包含リクエストとして認識されます。つまり、直後のトークンがファイル名として開かれ、そのストリームからEOFまで入力が取得されます。その時点で、そのストリームの&lt;a href=&quot;io#io.IOBase.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出され、入力ソースが再び元の入力ストリームになります。ソースリクエストは、任意の数のレベルにスタックできます。</target>
        </trans-unit>
        <trans-unit id="e56bfc00c2caadc75dfd2a7c48b1a839469727cd" translate="yes" xml:space="preserve">
          <source>This attribute is a &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; (possibly of length 1) of generic types passed to the original &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt;&lt;code&gt;__class_getitem__()&lt;/code&gt;&lt;/a&gt; of the generic container:</source>
          <target state="translated">この属性は、ジェネリックコンテナの元の&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt; &lt;code&gt;__class_getitem__()&lt;/code&gt; &lt;/a&gt;に渡されるジェネリック型の&lt;a href=&quot;#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;（おそらく長さ1）です。</target>
        </trans-unit>
        <trans-unit id="2994dd43b52b07e7e69d05397ea676fc07397b4c" translate="yes" xml:space="preserve">
          <source>This attribute is a flag which controls the interpretation of blanks in the window. When it is on, trailing blanks on each line are ignored; any cursor motion that would land the cursor on a trailing blank goes to the end of that line instead, and trailing blanks are stripped when the window contents are gathered.</source>
          <target state="translated">この属性は、ウィンドウ内の空白の解釈を制御するフラグです。これがオンの場合、各行の後続の空白は無視されます。後続の空白の上にカーソルを置くようなカーソルの動きは、その代わりにその行の最後に置かれ、ウィンドウの内容が収集された時に後続の空白は取り除かれます。</target>
        </trans-unit>
        <trans-unit id="8ea2adbc6d1d9d5676b59f71f289e2286049808c" translate="yes" xml:space="preserve">
          <source>This attribute is a lazily computed tuple (possibly empty) of unique type variables found in &lt;code&gt;__args__&lt;/code&gt;:</source>
          <target state="translated">この属性は、 &lt;code&gt;__args__&lt;/code&gt; で見つかった一意の型変数の遅延計算されたタプル（おそらく空）です。</target>
        </trans-unit>
        <trans-unit id="df0657bd69ee21a9f9148b59c9e8f837030cf6e4" translate="yes" xml:space="preserve">
          <source>This attribute is a tuple of classes that are considered when looking for base classes during method resolution.</source>
          <target state="translated">この属性は、メソッド解決時に基底クラスを探す際に考慮されるクラスのタプルです。</target>
        </trans-unit>
        <trans-unit id="78c2006f554cfe40d6509a13774214ddca5bbec4" translate="yes" xml:space="preserve">
          <source>This attribute is not available unless the ssl module is compiled with OpenSSL 1.1.0g or newer.</source>
          <target state="translated">この属性は、ssl モジュールが OpenSSL 1.1.1.0g またはそれ以降でコンパイルされていない限り、利用できません。</target>
        </trans-unit>
        <trans-unit id="166affef6e28f80e71c9ea85c86be9204124b32a" translate="yes" xml:space="preserve">
          <source>This attribute is not available unless the ssl module is compiled with OpenSSL 1.1.1 or newer.</source>
          <target state="translated">この属性は、ssl モジュールが OpenSSL 1.1.1.1 以降でコンパイルされていない限り使用できません。</target>
        </trans-unit>
        <trans-unit id="d549f5791df423d3f994ffbd043feb8576e017c0" translate="yes" xml:space="preserve">
          <source>This attribute is used by the &lt;a href=&quot;#collections.defaultdict.__missing__&quot;&gt;&lt;code&gt;__missing__()&lt;/code&gt;&lt;/a&gt; method; it is initialized from the first argument to the constructor, if present, or to &lt;code&gt;None&lt;/code&gt;, if absent.</source>
          <target state="translated">この属性は&lt;a href=&quot;#collections.defaultdict.__missing__&quot;&gt; &lt;code&gt;__missing__()&lt;/code&gt; &lt;/a&gt;メソッドで使用されます。最初の引数からコンストラクター（存在する場合）、または存在しない場合は &lt;code&gt;None&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="d4130011af63fce83b7e1131abe74fced7d57bfb" translate="yes" xml:space="preserve">
          <source>This attribute points at the non-parameterized generic class:</source>
          <target state="translated">この属性は、パラメータ化されていない汎用クラスを指します。</target>
        </trans-unit>
        <trans-unit id="779ab2149480aad2f6fe229a1b14fecb93369fd5" translate="yes" xml:space="preserve">
          <source>This attribute should be set to a true value if the handler&amp;rsquo;s &lt;a href=&quot;#wsgiref.handlers.BaseHandler._write&quot;&gt;&lt;code&gt;_write()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#wsgiref.handlers.BaseHandler._flush&quot;&gt;&lt;code&gt;_flush()&lt;/code&gt;&lt;/a&gt; are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special &lt;code&gt;Status:&lt;/code&gt; header.</source>
          <target state="translated">ハンドラーの&lt;a href=&quot;#wsgiref.handlers.BaseHandler._write&quot;&gt; &lt;code&gt;_write()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#wsgiref.handlers.BaseHandler._flush&quot;&gt; &lt;code&gt;_flush()&lt;/code&gt; &lt;/a&gt;を使用して、特別な &lt;code&gt;Status:&lt;/code&gt; ヘッダーでHTTPステータスを必要とするCGIのようなゲートウェイプロトコル経由ではなく、クライアントと直接通信する場合は、この属性をtrueに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="81e7c664cabc787942b1a455028793b2341024c0" translate="yes" xml:space="preserve">
          <source>This attribute&amp;rsquo;s default value is true in &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt;, but false in &lt;a href=&quot;#wsgiref.handlers.BaseCGIHandler&quot;&gt;&lt;code&gt;BaseCGIHandler&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt;&lt;code&gt;CGIHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この属性のデフォルト値は、&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt;ではtrueですが、&lt;a href=&quot;#wsgiref.handlers.BaseCGIHandler&quot;&gt; &lt;code&gt;BaseCGIHandler&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt; &lt;code&gt;CGIHandler&lt;/code&gt; では&lt;/a&gt; false です。</target>
        </trans-unit>
        <trans-unit id="f563e489bccd3156ff8203cb8818c4bd46df456e" translate="yes" xml:space="preserve">
          <source>This base class defines the following read-only properties:</source>
          <target state="translated">この基底クラスは、以下の読み取り専用のプロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="5540e595f1d0ce1ff248b688c117efa9d0c46875" translate="yes" xml:space="preserve">
          <source>This base class raises &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;. Subclasses may leave this method unimplemented.</source>
          <target state="translated">この基本クラスは&lt;a href=&quot;exceptions#NotImplementedError&quot;&gt; &lt;code&gt;NotImplementedError&lt;/code&gt; &lt;/a&gt;を発生させます。サブクラスは、このメソッドを実装しないままにする場合があります。</target>
        </trans-unit>
        <trans-unit id="63a8a8b933d05fd353efb75eb303a3e9a79cadd5" translate="yes" xml:space="preserve">
          <source>This behaves exactly like &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt;, except that it yields a 4-tuple &lt;code&gt;(dirpath, dirnames, filenames, dirfd)&lt;/code&gt;, and it supports &lt;code&gt;dir_fd&lt;/code&gt;.</source>
          <target state="translated">これは、4タプル &lt;code&gt;(dirpath, dirnames, filenames, dirfd)&lt;/code&gt; サポートすることを除いて、&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; &lt;/a&gt;とまったく同じように動作し &lt;code&gt;dir_fd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f89ee084a5c3fb6a9b18d5de21c78508c481f569" translate="yes" xml:space="preserve">
          <source>This behavior allows &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; to be used as an &lt;em&gt;escape hatch&lt;/em&gt; when you need to mix dynamically and statically typed code.</source>
          <target state="translated">この動作により、動的に型付けされたコードと静的に型付けされたコードを混在させる必要&lt;em&gt;がある&lt;/em&gt;場合、&lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt;を&lt;em&gt;エスケープハッチ&lt;/em&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="3b455e95c88343559228644a42667890d61597cf" translate="yes" xml:space="preserve">
          <source>This behavior can be customized by assigning to special attributes of the foreign function object.</source>
          <target state="translated">この動作は、外部関数オブジェクトの特別な属性に割り当てることでカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="a7379b341b2ba41615597b4e4d0b80854cab35ed" translate="yes" xml:space="preserve">
          <source>This behaviour is controlled by the following handler attributes:</source>
          <target state="translated">この動作は、以下のハンドラ属性によって制御されます。</target>
        </trans-unit>
        <trans-unit id="957754b3567b9946eb2150398bc70e91ad0ce381" translate="yes" xml:space="preserve">
          <source>This behaviour may be overridden by setting &lt;em&gt;text&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt;, or &lt;em&gt;universal_newlines&lt;/em&gt; to &lt;code&gt;True&lt;/code&gt; as described in &lt;a href=&quot;#frequently-used-arguments&quot;&gt;Frequently Used Arguments&lt;/a&gt; and &lt;a href=&quot;#subprocess.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この動作は、&lt;a href=&quot;#frequently-used-arguments&quot;&gt;よく使用される引数&lt;/a&gt;と&lt;a href=&quot;#subprocess.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; で&lt;/a&gt;説明されているように、&lt;em&gt;テキスト&lt;/em&gt;、&lt;em&gt;エンコーディング&lt;/em&gt;、&lt;em&gt;エラー&lt;/em&gt;、または&lt;em&gt;universal_newlines&lt;/em&gt;を &lt;code&gt;True&lt;/code&gt; に設定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="3e39c78a1690e05498b30b508c8ee358893459e4" translate="yes" xml:space="preserve">
          <source>This brings up another issue. It is relatively common to provide a default value of &lt;code&gt;None&lt;/code&gt; for members that will later be an object of a different type. &lt;code&gt;None&lt;/code&gt; would be useless as a spec because it wouldn&amp;rsquo;t let you access &lt;em&gt;any&lt;/em&gt; attributes or methods on it. As &lt;code&gt;None&lt;/code&gt; is &lt;em&gt;never&lt;/em&gt; going to be useful as a spec, and probably indicates a member that will normally of some other type, autospec doesn&amp;rsquo;t use a spec for members that are set to &lt;code&gt;None&lt;/code&gt;. These will just be ordinary mocks (well - MagicMocks):</source>
          <target state="translated">これは別の問題を引き起こします。後で別のタイプのオブジェクトになるメンバーにデフォルト値の &lt;code&gt;None&lt;/code&gt; を指定することは比較的一般的です。 &lt;code&gt;None&lt;/code&gt; 、それはあなたがアクセスできないのでスペックとして役に立たないだろう&lt;em&gt;任意の&lt;/em&gt;それに属性やメソッドを。以下のよう &lt;code&gt;None&lt;/code&gt; ている&lt;em&gt;決して&lt;/em&gt;スペックとして有用であることを行っていない、そしておそらく通常は他のいくつかのタイプの、autospecがに設定されているメンバーのために仕様を使用していないだろうメンバーを示し &lt;code&gt;None&lt;/code&gt; 。これらは通常のモックです（まあ-MagicMocks）：</target>
        </trans-unit>
        <trans-unit id="a01ade15639ca8f0fb9908b5bc15eb94fe21614a" translate="yes" xml:space="preserve">
          <source>This call (say, for example, creating a button widget), is implemented in the &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; package, which is written in Python. This Python function will parse the commands and the arguments and convert them into a form that makes them look as if they had come from a Tk script instead of a Python script.</source>
          <target state="translated">この呼び出し（ボタンウィジェットの作成など）は、Pythonで記述された&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;パッケージに実装されています。このPython関数は、コマンドと引数を解析して、PythonスクリプトではなくTkスクリプトから取得されたかのように見える形式に変換します。</target>
        </trans-unit>
        <trans-unit id="2a3932daa8300dd15eb1238ca7766ace7be0b25b" translate="yes" xml:space="preserve">
          <source>This call decodes uuencoded file &lt;em&gt;in_file&lt;/em&gt; placing the result on file &lt;em&gt;out_file&lt;/em&gt;. If &lt;em&gt;out_file&lt;/em&gt; is a pathname, &lt;em&gt;mode&lt;/em&gt; is used to set the permission bits if the file must be created. Defaults for &lt;em&gt;out_file&lt;/em&gt; and &lt;em&gt;mode&lt;/em&gt; are taken from the uuencode header. However, if the file specified in the header already exists, a &lt;a href=&quot;#uu.Error&quot;&gt;&lt;code&gt;uu.Error&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">この呼び出しは、uuencodeされたファイル&lt;em&gt;in_file&lt;/em&gt;をデコードし、結果をファイル&lt;em&gt;out_fileに&lt;/em&gt;配置します。場合&lt;em&gt;out_fileパラは&lt;/em&gt;パス名で、&lt;em&gt;モードは、&lt;/em&gt;ファイルを作成しなければならない場合は、許可ビットを設定するために使用されます。&lt;em&gt;out_file&lt;/em&gt;および&lt;em&gt;モードの&lt;/em&gt;デフォルトは、uuencodeヘッダーから取得され&lt;em&gt;ます&lt;/em&gt;。ただし、ヘッダーで指定されたファイルがすでに存在する場合は、&lt;a href=&quot;#uu.Error&quot;&gt; &lt;code&gt;uu.Error&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="c674f16cfd26246b43950a59f15b8c54770ceded" translate="yes" xml:space="preserve">
          <source>This call will print in the standard output the information returned by &lt;a href=&quot;#sysconfig.get_platform&quot;&gt;&lt;code&gt;get_platform()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#sysconfig.get_python_version&quot;&gt;&lt;code&gt;get_python_version()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#sysconfig.get_path&quot;&gt;&lt;code&gt;get_path()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#sysconfig.get_config_vars&quot;&gt;&lt;code&gt;get_config_vars()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この呼び出しは、&lt;a href=&quot;#sysconfig.get_platform&quot;&gt; &lt;code&gt;get_platform()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#sysconfig.get_python_version&quot;&gt; &lt;code&gt;get_python_version()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#sysconfig.get_path&quot;&gt; &lt;code&gt;get_path()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#sysconfig.get_config_vars&quot;&gt; &lt;code&gt;get_config_vars()&lt;/code&gt; &lt;/a&gt;によって返された情報を標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="a6469546206837a94e51f0f2845bca660667742c" translate="yes" xml:space="preserve">
          <source>This can be achieved from the &lt;a href=&quot;#python-interface&quot;&gt;Python Interface&lt;/a&gt; with:</source>
          <target state="translated">これは、&lt;a href=&quot;#python-interface&quot;&gt;Pythonインターフェース&lt;/a&gt;から次のようにして実現できます。</target>
        </trans-unit>
        <trans-unit id="9d1d697fe2b31a15d36e206e65de28f58571ea8c" translate="yes" xml:space="preserve">
          <source>This can be called multiple times.</source>
          <target state="translated">これを複数回呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2b67e671a1c54666dadf6cd890333be68c8592ef" translate="yes" xml:space="preserve">
          <source>This can be especially problematic for the user to see if she&amp;rsquo;s using a proportional font to edit the file. That is why when your application does not need values with empty lines, you should consider disallowing them. This will make empty lines split keys every time. In the example above, it would produce two keys, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">これは、ユーザーがプロポーショナルフォントを使用してファイルを編集しているかどうかをユーザーが確認する場合に特に問題になります。そのため、アプリケーションで空行のある値が必要ない場合は、値を許可しないことを検討する必要があります。これにより、空の行で毎回キーが分割されます。上記の例では、 &lt;code&gt;key&lt;/code&gt; と &lt;code&gt;this&lt;/code&gt; の 2つのキーが生成されます。</target>
        </trans-unit>
        <trans-unit id="a82ddd14e1f001ea8311d0bd0c24af21a7865d61" translate="yes" xml:space="preserve">
          <source>This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself. It is not capable of evaluating arbitrarily complex expressions, for example involving operators or indexing.</source>
          <target state="translated">これは、信頼されていないソースからのPythonの値を含む文字列を、自分で値を解析することなく安全に評価するために使用することができます。演算子やインデックスなどを含む任意の複雑な式を評価することはできません。</target>
        </trans-unit>
        <trans-unit id="a97c97150e89825c650323ea068e2c86fe1ae6b9" translate="yes" xml:space="preserve">
          <source>This can be used to build a shell for SQLite, as in the following example:</source>
          <target state="translated">これを利用して、以下の例のようにSQLite用のシェルを構築することができます。</target>
        </trans-unit>
        <trans-unit id="b9fd3ddc0879e99d9c02d07c898720ba4d93e0c4" translate="yes" xml:space="preserve">
          <source>This can be used to decode a JSON document from a string that may have extraneous data at the end.</source>
          <target state="translated">これは、最後に余計なデータが含まれている可能性のある文字列からJSON文書をデコードするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="0497025141b27c807ca46930213e57d7c9800435" translate="yes" xml:space="preserve">
          <source>This can be used to make triple-quoted strings line up with the left edge of the display, while still presenting them in the source code in indented form.</source>
          <target state="translated">これを使用すると、トリプルクォートされた文字列をディスプレイの左端に並べることができますが、ソースコードではインデント形式で表示されます。</target>
        </trans-unit>
        <trans-unit id="62fbb7012806d21eb05599eae86ce39d18cddf93" translate="yes" xml:space="preserve">
          <source>This can be useful where you want to make a series of assertions that reuse the same object. Note that &lt;a href=&quot;#unittest.mock.Mock.reset_mock&quot;&gt;&lt;code&gt;reset_mock()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; clear the return value, &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; or any child attributes you have set using normal assignment by default. In case you want to reset &lt;em&gt;return_value&lt;/em&gt; or &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt;, then pass the corresponding parameter as &lt;code&gt;True&lt;/code&gt;. Child mocks and the return value mock (if any) are reset as well.</source>
          <target state="translated">これは、同じオブジェクトを再利用する一連のアサーションを作成する場合に役立ちます。ことを注意&lt;a href=&quot;#unittest.mock.Mock.reset_mock&quot;&gt; &lt;code&gt;reset_mock()&lt;/code&gt; は&lt;/a&gt;&lt;em&gt;しない&lt;/em&gt;戻り値、クリア&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;またはデフォルトで通常の割り当てを使用して設定した任意の子属性を。&lt;em&gt;return_value&lt;/em&gt;または&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;をリセットする場合は、対応するパラメーターを &lt;code&gt;True&lt;/code&gt; として渡します。子モックと戻り値モック（存在する場合）もリセットされます。</target>
        </trans-unit>
        <trans-unit id="fc685bbf811c69a67bb2bc60d0369711e84128df" translate="yes" xml:space="preserve">
          <source>This can either be a function to be called when the mock is called, an iterable or an exception (class or instance) to be raised.</source>
          <target state="translated">これは、モックが呼ばれたときに呼び出される関数、イテレート可能なもの、または例外(クラスやインスタンス)を発生させることができます。</target>
        </trans-unit>
        <trans-unit id="66804a317957a21867ce8e32ff07c321923752e6" translate="yes" xml:space="preserve">
          <source>This causes the module to behave as it does when initially imported. For example, &lt;a href=&quot;#syslog.openlog&quot;&gt;&lt;code&gt;openlog()&lt;/code&gt;&lt;/a&gt; will be called on the first &lt;a href=&quot;#module-syslog&quot;&gt;&lt;code&gt;syslog()&lt;/code&gt;&lt;/a&gt; call (if &lt;a href=&quot;#syslog.openlog&quot;&gt;&lt;code&gt;openlog()&lt;/code&gt;&lt;/a&gt; hasn&amp;rsquo;t already been called), and &lt;em&gt;ident&lt;/em&gt; and other &lt;a href=&quot;#syslog.openlog&quot;&gt;&lt;code&gt;openlog()&lt;/code&gt;&lt;/a&gt; parameters are reset to defaults.</source>
          <target state="translated">これにより、モジュールは最初にインポートされたときと同じように動作します。たとえば、&lt;a href=&quot;#syslog.openlog&quot;&gt; &lt;code&gt;openlog()&lt;/code&gt; &lt;/a&gt;は最初の&lt;a href=&quot;#module-syslog&quot;&gt; &lt;code&gt;syslog()&lt;/code&gt; &lt;/a&gt;呼び出しで呼び出され（&lt;a href=&quot;#syslog.openlog&quot;&gt; &lt;code&gt;openlog()&lt;/code&gt; &lt;/a&gt;がまだ呼び出されていない場合）、&lt;em&gt;ident&lt;/em&gt;および他の&lt;a href=&quot;#syslog.openlog&quot;&gt; &lt;code&gt;openlog()&lt;/code&gt; &lt;/a&gt;パラメータはデフォルトにリセットされます。</target>
        </trans-unit>
        <trans-unit id="17a078e1ca7ba133e471917a29a6b9a67bd6369b" translate="yes" xml:space="preserve">
          <source>This change is just syntactic sugar for any construct of the following form:</source>
          <target state="translated">この変更は、以下の形式の任意の構成要素のための構文上の砂糖に過ぎません。</target>
        </trans-unit>
        <trans-unit id="20f0e4e7771296269c67abcb6e85f794dfe25cba" translate="yes" xml:space="preserve">
          <source>This class &lt;strong&gt;only&lt;/strong&gt; works with loaders that define &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; as control over what module type is used for the module is required. For those same reasons, the loader&amp;rsquo;s &lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt;&lt;code&gt;create_module()&lt;/code&gt;&lt;/a&gt; method must return &lt;code&gt;None&lt;/code&gt; or a type for which its &lt;code&gt;__class__&lt;/code&gt; attribute can be mutated along with not using &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-slots&quot;&gt;slots&lt;/a&gt;. Finally, modules which substitute the object placed into &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; will not work as there is no way to properly replace the module references throughout the interpreter safely; &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised if such a substitution is detected.</source>
          <target state="translated">このクラスは、モジュールに使用されるモジュールタイプの制御が必要なため、&lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt; &lt;code&gt;exec_module()&lt;/code&gt; &lt;/a&gt;を定義するローダーで&lt;strong&gt;のみ&lt;/strong&gt;機能します。同じ理由で、ローダーの&lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt; &lt;code&gt;create_module()&lt;/code&gt; &lt;/a&gt;メソッドは &lt;code&gt;None&lt;/code&gt; を返すか、その &lt;code&gt;__class__&lt;/code&gt; 属性を&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-slots&quot;&gt;スロット&lt;/a&gt;を使用せずに変更できる型を返す必要があります。最後に、&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; に&lt;/a&gt;配置されたオブジェクトを置き換えるモジュールは機能しません。インタープリター全体でモジュール参照を安全に適切に置き換える方法がないためです。そのような置換が検出された場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="ac439cfa9809ee47c3e7d79677f27b5eb953b22d" translate="yes" xml:space="preserve">
          <source>This class &lt;strong&gt;only&lt;/strong&gt; works with loaders that define &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; as control over what module type is used for the module is required. For those same reasons, the loader&amp;rsquo;s &lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt;&lt;code&gt;create_module()&lt;/code&gt;&lt;/a&gt; method must return &lt;code&gt;None&lt;/code&gt; or a type for which its &lt;code&gt;__class__&lt;/code&gt; attribute can be mutated along with not using &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-slots&quot;&gt;slots&lt;/a&gt;. Finally, modules which substitute the object placed into &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; will not work as there is no way to properly replace the module references throughout the interpreter safely; &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised if such a substitution is detected.</source>
          <target state="translated">このクラスは、モジュールに使用されるモジュールタイプを制御するために&lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt; &lt;code&gt;exec_module()&lt;/code&gt; &lt;/a&gt;を定義するローダーで&lt;strong&gt;のみ&lt;/strong&gt;機能します。同じ理由で、ローダーの&lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt; &lt;code&gt;create_module()&lt;/code&gt; &lt;/a&gt;メソッドは、 &lt;code&gt;None&lt;/code&gt; を返すか、&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-slots&quot;&gt;スロット&lt;/a&gt;を使用せずに &lt;code&gt;__class__&lt;/code&gt; 属性を変更できるタイプを返す必要があります。最後に、&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; に&lt;/a&gt;配置されたオブジェクトを置き換えるモジュールは、インタープリター全体でモジュール参照を安全に適切に置き換える方法がないため、機能しません。このような置換が検出されると、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="e680d4b2bbf72f285c1df68c923cf072d3a40f63" translate="yes" xml:space="preserve">
          <source>This class acts as a wrapper around list objects. It is a useful base class for your own list-like classes which can inherit from them and override existing methods or add new ones. In this way, one can add new behaviors to lists.</source>
          <target state="translated">このクラスはリストオブジェクトのラッパーとして動作します。独自のリストライクなクラスを継承し、既存のメソッドをオーバーライドしたり新しいメソッドを追加したりすることができる便利な基底クラスです。このようにして、リストに新しい振る舞いを追加することができます。</target>
        </trans-unit>
        <trans-unit id="1370cfdacaa0f9c4d0d1e1fcd0d6c3556803396d" translate="yes" xml:space="preserve">
          <source>This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails. &lt;code&gt;True&lt;/code&gt; is the default value. In this case, the custom message is appended to the end of the standard failure message. When set to &lt;code&gt;False&lt;/code&gt;, the custom message replaces the standard message.</source>
          <target state="translated">このクラス属性は、カスタムの失敗メッセージが、失敗したassertXYY呼び出しにmsg引数として渡されたときに何が起こるかを決定します。 &lt;code&gt;True&lt;/code&gt; がデフォルト値です。この場合、カスタムメッセージは標準の失敗メッセージの最後に追加されます。 &lt;code&gt;False&lt;/code&gt; に設定すると、カスタムメッセージが標準メッセージを置き換えます。</target>
        </trans-unit>
        <trans-unit id="3288c0e4b6772fb834239a23818e745ac39e3d7b" translate="yes" xml:space="preserve">
          <source>This class attribute gives the exception raised by the test method. If a test framework needs to use a specialized exception, possibly to carry additional information, it must subclass this exception in order to &amp;ldquo;play fair&amp;rdquo; with the framework. The initial value of this attribute is &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラス属性は、テストメソッドによって発生した例外を提供します。テストフレームワークが特別な例外を使用する必要がある場合、おそらく追加情報を伝達する必要がある場合、フレームワークと「公平に機能する」ために、この例外をサブクラス化する必要があります。この属性の初期値は&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="786df7dd07465af2e7bc8b322a7dd7be2995de77" translate="yes" xml:space="preserve">
          <source>This class builds on the &lt;a href=&quot;socketserver#socketserver.TCPServer&quot;&gt;&lt;code&gt;TCPServer&lt;/code&gt;&lt;/a&gt; class by storing the server address as instance variables named &lt;code&gt;server_name&lt;/code&gt; and &lt;code&gt;server_port&lt;/code&gt;. The server is accessible by the handler, typically through the handler&amp;rsquo;s &lt;code&gt;server&lt;/code&gt; instance variable.</source>
          <target state="translated">このクラスは、サーバーアドレスを &lt;code&gt;server_name&lt;/code&gt; および &lt;code&gt;server_port&lt;/code&gt; という名前のインスタンス変数として格納することにより、&lt;a href=&quot;socketserver#socketserver.TCPServer&quot;&gt; &lt;code&gt;TCPServer&lt;/code&gt; &lt;/a&gt;クラスに基づいて構築されます。サーバーは、ハンドラーによって、通常はハンドラーの &lt;code&gt;server&lt;/code&gt; インスタンス変数を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a61b50fa9056bcc99d4dfaa7d5cc4c9f738f3886" translate="yes" xml:space="preserve">
          <source>This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights. The table can be generated in either full or contextual difference mode.</source>
          <target state="translated">このクラスは、行間および行内の変更ハイライトを含むテキストの横並び、行ごとの比較を示すHTML表(またはその表を含む完全なHTMLファイル)を作成するために使用することができます。この表は、完全差分モードまたは文脈差分モードで生成することができます。</target>
        </trans-unit>
        <trans-unit id="1a485c6be944a5121095f4313a2ac49f87922ce2" translate="yes" xml:space="preserve">
          <source>This class can be used to generate HTML calendars.</source>
          <target state="translated">このクラスは、HTMLカレンダーを生成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="24117e29e79a5bae324849b9f5e3b8f11a5140c9" translate="yes" xml:space="preserve">
          <source>This class can be used to generate plain text calendars.</source>
          <target state="translated">このクラスは、プレーンテキストのカレンダーを生成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="a69c7233ae85db1ae66cdbf46d18176f63d3a972" translate="yes" xml:space="preserve">
          <source>This class can then be used as follows:</source>
          <target state="translated">そして、このクラスは次のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="11039fec5c3d2704158aa1016ef70969433af2d0" translate="yes" xml:space="preserve">
          <source>This class constructor creates an instance of a &amp;ldquo;statistics object&amp;rdquo; from a &lt;em&gt;filename&lt;/em&gt; (or list of filenames) or from a &lt;code&gt;Profile&lt;/code&gt; instance. Output will be printed to the stream specified by &lt;em&gt;stream&lt;/em&gt;.</source>
          <target state="translated">このクラスコンストラクターは、&lt;em&gt;ファイル名&lt;/em&gt;（またはファイル名のリスト）または &lt;code&gt;Profile&lt;/code&gt; インスタンスから「統計オブジェクト」のインスタンスを作成します。出力は、streamで指定された&lt;em&gt;ストリームに&lt;/em&gt;出力され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="997df475040ccebecaae3cb4fcd72a5ae6e0b056" translate="yes" xml:space="preserve">
          <source>This class deals with parsing and interpreter state (the user&amp;rsquo;s namespace); it does not deal with input buffering or prompting or input file naming (the filename is always passed in explicitly). The optional &lt;em&gt;locals&lt;/em&gt; argument specifies the dictionary in which code will be executed; it defaults to a newly created dictionary with key &lt;code&gt;'__name__'&lt;/code&gt; set to &lt;code&gt;'__console__'&lt;/code&gt; and key &lt;code&gt;'__doc__'&lt;/code&gt; set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">このクラスは、解析とインタプリタの状態（ユーザーの名前空間）を扱います。入力バッファリング、プロンプト、または入力ファイルの命名は扱いません（ファイル名は常に明示的に渡されます）。オプションの&lt;em&gt;locals&lt;/em&gt;引数は、コードが実行される辞書を指定します。デフォルトでは、キー &lt;code&gt;'__name__'&lt;/code&gt; が &lt;code&gt;'__console__'&lt;/code&gt; に設定され、キー &lt;code&gt;'__doc__'&lt;/code&gt; が &lt;code&gt;None&lt;/code&gt; に設定された、新しく作成された辞書になります。</target>
        </trans-unit>
        <trans-unit id="ea6ff78f901f2fc6ecc7723c952f97db4d6143dc" translate="yes" xml:space="preserve">
          <source>This class defines the following properties, and thus values for the following may be passed in the constructor of any policy class:</source>
          <target state="translated">このクラスは以下のプロパティを定義していますので、任意のポリシークラスのコンストラクタに以下の値を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="62521481dfb6022d4e3553654487427b9e7ec310" translate="yes" xml:space="preserve">
          <source>This class derives from &lt;a href=&quot;#http.cookies.BaseCookie&quot;&gt;&lt;code&gt;BaseCookie&lt;/code&gt;&lt;/a&gt; and overrides &lt;code&gt;value_decode()&lt;/code&gt; and &lt;code&gt;value_encode()&lt;/code&gt;. SimpleCookie supports strings as cookie values. When setting the value, SimpleCookie calls the builtin &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; to convert the value to a string. Values received from HTTP are kept as strings.</source>
          <target state="translated">このクラスは&lt;a href=&quot;#http.cookies.BaseCookie&quot;&gt; &lt;code&gt;BaseCookie&lt;/code&gt; &lt;/a&gt;から派生し、value_decode &lt;code&gt;value_decode()&lt;/code&gt; および &lt;code&gt;value_encode()&lt;/code&gt; をオーバーライドします。SimpleCookieは、文字列をCookie値としてサポートします。値を設定するとき、SimpleCookieは組み込みの&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt;を呼び出して、値を文字列に変換します。HTTPから受け取った値は文字列として保持されます。</target>
        </trans-unit>
        <trans-unit id="31f80205c6eb10e35876f4bf787d88c5b1b59257" translate="yes" xml:space="preserve">
          <source>This class does not transparently handle inputs containing multiple compressed streams, unlike &lt;a href=&quot;#bz2.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt;. If you need to decompress a multi-stream input with &lt;a href=&quot;#bz2.BZ2Decompressor&quot;&gt;&lt;code&gt;BZ2Decompressor&lt;/code&gt;&lt;/a&gt;, you must use a new decompressor for each stream.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;#bz2.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#bz2.BZ2File&quot;&gt; &lt;code&gt;BZ2File&lt;/code&gt; &lt;/a&gt;とは異なり、複数の圧縮ストリームを含む入力を透過的に処理しません。&lt;a href=&quot;#bz2.BZ2Decompressor&quot;&gt; &lt;code&gt;BZ2Decompressor&lt;/code&gt; を&lt;/a&gt;使用してマルチストリーム入力を圧縮解除する必要がある場合は、ストリームごとに新しい圧縮解除プログラムを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd0facb251a427869a35ff99157b4dc88e7a7c37" translate="yes" xml:space="preserve">
          <source>This class does not transparently handle inputs containing multiple compressed streams, unlike &lt;a href=&quot;#lzma.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt;. To decompress a multi-stream input with &lt;a href=&quot;#lzma.LZMADecompressor&quot;&gt;&lt;code&gt;LZMADecompressor&lt;/code&gt;&lt;/a&gt;, you must create a new decompressor for each stream.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;#lzma.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; &lt;/a&gt;とは異なり、複数の圧縮ストリームを含む入力を透過的に処理しません。&lt;a href=&quot;#lzma.LZMADecompressor&quot;&gt; &lt;code&gt;LZMADecompressor&lt;/code&gt; を使用し&lt;/a&gt;てマルチストリーム入力を解凍するには、ストリームごとに新しい解凍プログラムを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="874f644bbcdf96eb234234a971de4328d832635e" translate="yes" xml:space="preserve">
          <source>This class has custom assertion methods for inspecting bytecode.</source>
          <target state="translated">このクラスには、バイトコードを検査するためのカスタムアサーションメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="aa75e4118b76769ba47ad4be121a41b62ae457bf" translate="yes" xml:space="preserve">
          <source>This class has many &lt;code&gt;read_*()&lt;/code&gt; methods. Note that some of them raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; when the end of the connection is read, because they can return an empty string for other reasons. See the individual descriptions below.</source>
          <target state="translated">このクラスには、多くの &lt;code&gt;read_*()&lt;/code&gt; メソッドがあります。それらのいくつかは、他の理由で空の文字列を返す可能性があるため、接続の終了が読み取られたときに&lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; を&lt;/a&gt;発生させることに注意してください。以下の個々の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="80f48affba28f3bca43510cbebf5f583a8d03e11" translate="yes" xml:space="preserve">
          <source>This class has no public constructor. An &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt; instance must be created using the &lt;a href=&quot;#ssl.SSLContext.wrap_bio&quot;&gt;&lt;code&gt;wrap_bio()&lt;/code&gt;&lt;/a&gt; method. This method will create the &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt; instance and bind it to a pair of BIOs. The &lt;em&gt;incoming&lt;/em&gt; BIO is used to pass data from Python to the SSL protocol instance, while the &lt;em&gt;outgoing&lt;/em&gt; BIO is used to pass data the other way around.</source>
          <target state="translated">このクラスにはパブリックコンストラクターがありません。&lt;a href=&quot;#ssl.SSLObject&quot;&gt; &lt;code&gt;SSLObject&lt;/code&gt; &lt;/a&gt;インスタンスを使用して作成する必要があり&lt;a href=&quot;#ssl.SSLContext.wrap_bio&quot;&gt; &lt;code&gt;wrap_bio()&lt;/code&gt; &lt;/a&gt;メソッドを。このメソッドは、&lt;a href=&quot;#ssl.SSLObject&quot;&gt; &lt;code&gt;SSLObject&lt;/code&gt; &lt;/a&gt;インスタンスを作成し、BIOのペアにバインドします。&lt;em&gt;着信&lt;/em&gt;ながらBIOは、SSLプロトコルのインスタンスへのPythonからデータを渡すために使用される&lt;em&gt;送信&lt;/em&gt; BIOは、データを他の方法の周りを渡すために使用されます。</target>
        </trans-unit>
        <trans-unit id="d597fa762f6194a350ab0c738e09d5a34ddc0834" translate="yes" xml:space="preserve">
          <source>This class implements an interface on top of a low-level SSL object as implemented by OpenSSL. This object captures the state of an SSL connection but does not provide any network IO itself. IO needs to be performed through separate &amp;ldquo;BIO&amp;rdquo; objects which are OpenSSL&amp;rsquo;s IO abstraction layer.</source>
          <target state="translated">このクラスは、OpenSSLによって実装される低レベルSSLオブジェクトの上にインターフェースを実装します。このオブジェクトはSSL接続の状態をキャプチャしますが、ネットワークIO自体は提供しません。IOは、OpenSSLのIO抽象化レイヤーである個別の「BIO」オブジェクトを通じて実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="914712e8832275f17564086e782d3f6685437de0" translate="yes" xml:space="preserve">
          <source>This class implements condition variable objects. A condition variable allows one or more threads to wait until they are notified by another thread.</source>
          <target state="translated">このクラスは条件変数オブジェクトを実装しています。条件変数は、1つ以上のスレッドが他のスレッドから通知を受けるまで待つことを可能にします。</target>
        </trans-unit>
        <trans-unit id="878bdcd121b4b294dea82e17949c61b8c083f5ce" translate="yes" xml:space="preserve">
          <source>This class implements reentrant lock objects. A reentrant lock must be released by the thread that acquired it. Once a thread has acquired a reentrant lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it.</source>
          <target state="translated">このクラスは、リエントラントロックオブジェクトを実装しています。リエントラントロックは、それを取得したスレッドによって解放されなければなりません。スレッドが一度リエントラントロックを取得すると、同じスレッドはブロックせずに再度取得することができます。</target>
        </trans-unit>
        <trans-unit id="f24265f6cb6b6c3d8739448c1ec326c1945fc991" translate="yes" xml:space="preserve">
          <source>This class implements semaphore objects. A semaphore manages an atomic counter representing the number of &lt;a href=&quot;#threading.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; calls minus the number of &lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; calls, plus an initial value. The &lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; method blocks if necessary until it can return without making the counter negative. If not given, &lt;em&gt;value&lt;/em&gt; defaults to 1.</source>
          <target state="translated">このクラスはセマフォオブジェクトを実装します。セマフォは、&lt;a href=&quot;#threading.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt;呼び出しの数から、&lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt;呼び出しの数と初期値を加えたものを表すアトミックカウンターを管理します。&lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt;メソッドブロックはカウンタ負せずに返すことができるまで、必要に応じ。指定しない場合、&lt;em&gt;値の&lt;/em&gt;デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="06f375996fb5283c367303d6d557ff26404aa722" translate="yes" xml:space="preserve">
          <source>This class implements temporary breakpoints, ignore counts, disabling and (re-)enabling, and conditionals.</source>
          <target state="translated">このクラスは、一時的なブレークポイント、カウントの無視、無効化と(再)有効化、条件式を実装しています。</target>
        </trans-unit>
        <trans-unit id="ef8ab9b1f017689b8221855e12ddfb98f5fab5ae" translate="yes" xml:space="preserve">
          <source>This class implements the &lt;a href=&quot;xml.sax.handler#xml.sax.handler.ContentHandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; interface by writing SAX events back into an XML document. In other words, using an &lt;a href=&quot;#xml.sax.saxutils.XMLGenerator&quot;&gt;&lt;code&gt;XMLGenerator&lt;/code&gt;&lt;/a&gt; as the content handler will reproduce the original document being parsed. &lt;em&gt;out&lt;/em&gt; should be a file-like object which will default to &lt;em&gt;sys.stdout&lt;/em&gt;. &lt;em&gt;encoding&lt;/em&gt; is the encoding of the output stream which defaults to &lt;code&gt;'iso-8859-1'&lt;/code&gt;. &lt;em&gt;short_empty_elements&lt;/em&gt; controls the formatting of elements that contain no content: if &lt;code&gt;False&lt;/code&gt; (the default) they are emitted as a pair of start/end tags, if set to &lt;code&gt;True&lt;/code&gt; they are emitted as a single self-closed tag.</source>
          <target state="translated">このクラスは、SAXイベントをXMLドキュメントに書き戻すことにより、&lt;a href=&quot;xml.sax.handler#xml.sax.handler.ContentHandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt;インターフェイスを実装します。つまり、コンテンツハンドラーとして&lt;a href=&quot;#xml.sax.saxutils.XMLGenerator&quot;&gt; &lt;code&gt;XMLGenerator&lt;/code&gt; &lt;/a&gt;を使用すると、解析される元のドキュメントが再現されます。&lt;em&gt;out&lt;/em&gt;はファイルのようなオブジェクトで、デフォルトでは&lt;em&gt;sys.stdoutに&lt;/em&gt;なります。&lt;em&gt;encoding&lt;/em&gt;は出力ストリームのエンコーディングで、デフォルトは &lt;code&gt;'iso-8859-1'&lt;/code&gt; です。&lt;em&gt;short_empty_elementsの&lt;/em&gt;コントロールはコンテンツが含まれていない要素の書式設定は、次の場合 &lt;code&gt;False&lt;/code&gt; に設定すると（デフォルト）、彼らは、開始/終了タグのペアとして放出される &lt;code&gt;True&lt;/code&gt; 彼らは、単一の自己閉じタグとして放出されます。</target>
        </trans-unit>
        <trans-unit id="c98a08502c61e88276fa107a306b9bc8b9b51f82" translate="yes" xml:space="preserve">
          <source>This class implements the actual IMAP4 protocol. The connection is created and protocol version (IMAP4 or IMAP4rev1) is determined when the instance is initialized. If &lt;em&gt;host&lt;/em&gt; is not specified, &lt;code&gt;''&lt;/code&gt; (the local host) is used. If &lt;em&gt;port&lt;/em&gt; is omitted, the standard IMAP4 port (143) is used.</source>
          <target state="translated">このクラスは、実際のIMAP4プロトコルを実装します。接続が作成され、インスタンスが初期化されるときにプロトコルバージョン（IMAP4またはIMAP4rev1）が決定されます。&lt;em&gt;host&lt;/em&gt;が指定されていない場合は、 &lt;code&gt;''&lt;/code&gt; （ローカルホスト）が使用されます。場合は&lt;em&gt;ポートが&lt;/em&gt;省略され、標準のIMAP4ポート（143）が使用されています。</target>
        </trans-unit>
        <trans-unit id="2f061eb8879697c7b6070feb82741ebb04708bc3" translate="yes" xml:space="preserve">
          <source>This class implements the actual IMAP4 protocol. The connection is created and protocol version (IMAP4 or IMAP4rev1) is determined when the instance is initialized. If &lt;em&gt;host&lt;/em&gt; is not specified, &lt;code&gt;''&lt;/code&gt; (the local host) is used. If &lt;em&gt;port&lt;/em&gt; is omitted, the standard IMAP4 port (143) is used. The optional &lt;em&gt;timeout&lt;/em&gt; parameter specifies a timeout in seconds for the connection attempt. If timeout is not given or is None, the global default socket timeout is used.</source>
          <target state="translated">このクラスは、実際のIMAP4プロトコルを実装します。インスタンスが初期化されると、接続が作成され、プロトコルバージョン（IMAP4またはIMAP4rev1）が決定されます。&lt;em&gt;ホスト&lt;/em&gt;が指定されていない場合は、 &lt;code&gt;''&lt;/code&gt; （ローカルホスト）が使用されます。場合は&lt;em&gt;ポートが&lt;/em&gt;省略され、標準のIMAP4ポート（143）が使用されています。オプションの&lt;em&gt;timeout&lt;/em&gt;パラメーターは、接続試行のタイムアウトを秒単位で指定します。タイムアウトが指定されていないか、Noneの場合、グローバルなデフォルトのソケットタイムアウトが使用されます。</target>
        </trans-unit>
        <trans-unit id="0180b25a093580d58646f91f83b8f7e9cbab599d" translate="yes" xml:space="preserve">
          <source>This class implements the actual POP3 protocol. The connection is created when the instance is initialized. If &lt;em&gt;port&lt;/em&gt; is omitted, the standard POP3 port (110) is used. The optional &lt;em&gt;timeout&lt;/em&gt; parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used).</source>
          <target state="translated">このクラスは、実際のP​​OP3プロトコルを実装します。接続は、インスタンスが初期化されるときに作成されます。場合&lt;em&gt;ポートが&lt;/em&gt;省略され、標準のPOP3ポート（110）が使用されます。オプションの&lt;em&gt;タイムアウト&lt;/em&gt;パラメータは、接続試行のタイムアウトを秒単位で指定します（指定しない場合、グローバルなデフォルトのタイムアウト設定が使用されます）。</target>
        </trans-unit>
        <trans-unit id="3a79142561e96a9c93e4a6f25d9a885ccc0ed19a" translate="yes" xml:space="preserve">
          <source>This class implements the portion of the &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; interface which allows the test runner to drive the test, but does not provide the methods which test code can use to check and report errors. This is used to create test cases using legacy test code, allowing it to be integrated into a &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;-based test framework.</source>
          <target state="translated">このクラスは、テストランナーがテストを実行できるようにする&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;インターフェイスの一部を実装しますが、テストコードがエラーのチェックとレポートに使用できるメソッドを提供しません。これは、レガシーテストコードを使用してテストケースを作成するために使用され、&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;テストベースのテストフレームワークに統合できます。</target>
        </trans-unit>
        <trans-unit id="1b5d0a87fabd812ddac703c4acba87065679d185" translate="yes" xml:space="preserve">
          <source>This class is &lt;a href=&quot;asyncio-dev#asyncio-multithreading&quot;&gt;not thread safe&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;asyncio-dev#asyncio-multithreading&quot;&gt;スレッドセーフで&lt;/a&gt;はありません。</target>
        </trans-unit>
        <trans-unit id="99bb71c8691256ec79b26eef0240bf9f20850bd6" translate="yes" xml:space="preserve">
          <source>This class is a dictionary-like object whose keys are strings and whose values are &lt;a href=&quot;#http.cookies.Morsel&quot;&gt;&lt;code&gt;Morsel&lt;/code&gt;&lt;/a&gt; instances. Note that upon setting a key to a value, the value is first converted to a &lt;a href=&quot;#http.cookies.Morsel&quot;&gt;&lt;code&gt;Morsel&lt;/code&gt;&lt;/a&gt; containing the key and the value.</source>
          <target state="translated">このクラスは、キーが文字列で値が&lt;a href=&quot;#http.cookies.Morsel&quot;&gt; &lt;code&gt;Morsel&lt;/code&gt; &lt;/a&gt;インスタンスである辞書のようなオブジェクトです。キーを値に設定すると、値は最初にキーと値を含む&lt;a href=&quot;#http.cookies.Morsel&quot;&gt; &lt;code&gt;Morsel&lt;/code&gt; &lt;/a&gt;変換されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c0ca616b29a0013c8896bdb2f5eebfbd623fd044" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;a href=&quot;#asyncio.Handle&quot;&gt;&lt;code&gt;Handle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;#asyncio.Handle&quot;&gt; &lt;code&gt;Handle&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="bc1a4fba51c4143a764de9b3702c6dad4e57616d" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;a href=&quot;#wsgiref.handlers.BaseCGIHandler&quot;&gt;&lt;code&gt;BaseCGIHandler&lt;/code&gt;&lt;/a&gt; that sets &lt;code&gt;wsgi.run_once&lt;/code&gt; to true, &lt;code&gt;wsgi.multithread&lt;/code&gt; to false, and &lt;code&gt;wsgi.multiprocess&lt;/code&gt; to true, and always uses &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;os#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; to obtain the necessary CGI streams and environment.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;#wsgiref.handlers.BaseCGIHandler&quot;&gt; &lt;code&gt;BaseCGIHandler&lt;/code&gt; の&lt;/a&gt;サブクラスであり、 &lt;code&gt;wsgi.run_once&lt;/code&gt; をtrue、 &lt;code&gt;wsgi.multithread&lt;/code&gt; をfalse、 &lt;code&gt;wsgi.multiprocess&lt;/code&gt; をtrueに設定し、常に&lt;a href=&quot;sys#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;os#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;を使用して必要なCGIストリームと環境を取得します。</target>
        </trans-unit>
        <trans-unit id="8380c0b548cc2e264460ea64612afb578b6a25a2" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt;. It overrides the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;get_stdin()&lt;/code&gt;, &lt;code&gt;get_stderr()&lt;/code&gt;, &lt;code&gt;add_cgi_vars()&lt;/code&gt;, &lt;code&gt;_write()&lt;/code&gt;, and &lt;code&gt;_flush()&lt;/code&gt; methods to support explicitly setting the environment and streams via the constructor. The supplied environment and streams are stored in the &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, and &lt;code&gt;environ&lt;/code&gt; attributes.</source>
          <target state="translated">このクラスは&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; の&lt;/a&gt;サブクラスです。それは上書きされます&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;get_stdin()&lt;/code&gt; 、 &lt;code&gt;get_stderr()&lt;/code&gt; 、 &lt;code&gt;add_cgi_vars()&lt;/code&gt; 、 &lt;code&gt;_write()&lt;/code&gt; 、および &lt;code&gt;_flush()&lt;/code&gt; 明示的に環境を設定し、コンストラクタを介してストリームをサポートするための方法。提供される環境とストリームは、 &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; 、および &lt;code&gt;environ&lt;/code&gt; 属性に格納されます。</target>
        </trans-unit>
        <trans-unit id="e1548ced0e2c22f69a3171c551d6503b32f508fd" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt;. It overrides the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;get_stdin()&lt;/code&gt;, &lt;code&gt;get_stderr()&lt;/code&gt;, &lt;code&gt;add_cgi_vars()&lt;/code&gt;, &lt;code&gt;_write()&lt;/code&gt;, and &lt;code&gt;_flush()&lt;/code&gt; methods to support explicitly setting the environment and streams via the constructor. The supplied environment and streams are stored in the &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, and &lt;code&gt;environ&lt;/code&gt; attributes.</source>
          <target state="translated">このクラスは&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; の&lt;/a&gt;サブクラスです。それは上書きされます&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;get_stdin()&lt;/code&gt; 、 &lt;code&gt;get_stderr()&lt;/code&gt; 、 &lt;code&gt;add_cgi_vars()&lt;/code&gt; 、 &lt;code&gt;_write()&lt;/code&gt; 、および &lt;code&gt;_flush()&lt;/code&gt; 明示的に環境を設定し、コンストラクタを介してストリームをサポートするための方法。提供された環境とストリームは、 &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; 、および &lt;code&gt;environ&lt;/code&gt; 属性に格納されます。</target>
        </trans-unit>
        <trans-unit id="9e951623508bbecd101c96001b60f6dffab7df5d" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;a href=&quot;#wsgiref.handlers.SimpleHandler&quot;&gt;&lt;code&gt;SimpleHandler&lt;/code&gt;&lt;/a&gt; intended for use with software other than HTTP &amp;ldquo;origin servers&amp;rdquo;. If you are writing a gateway protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a &lt;code&gt;Status:&lt;/code&gt; header to send an HTTP status, you probably want to subclass this instead of &lt;a href=&quot;#wsgiref.handlers.SimpleHandler&quot;&gt;&lt;code&gt;SimpleHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは、HTTP「オリジンサーバー」以外のソフトウェアでの使用を目的とした&lt;a href=&quot;#wsgiref.handlers.SimpleHandler&quot;&gt; &lt;code&gt;SimpleHandler&lt;/code&gt; の&lt;/a&gt;サブクラスです。 &lt;code&gt;Status:&lt;/code&gt; ヘッダーを使用してHTTPステータスを送信するゲートウェイプロトコル実装（CGI、FastCGI、SCGIなど）を作成している場合は、&lt;a href=&quot;#wsgiref.handlers.SimpleHandler&quot;&gt; &lt;code&gt;SimpleHandler&lt;/code&gt; の&lt;/a&gt;代わりにこれをサブクラス化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c92ecd5d85f70cf680d95261e8d2ae49751975a2" translate="yes" xml:space="preserve">
          <source>This class is an abstract subclass of &lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt;&lt;code&gt;asyncore.dispatcher&lt;/code&gt;&lt;/a&gt;. To make practical use of the code you must subclass &lt;a href=&quot;#asynchat.async_chat&quot;&gt;&lt;code&gt;async_chat&lt;/code&gt;&lt;/a&gt;, providing meaningful &lt;a href=&quot;#asynchat.async_chat.collect_incoming_data&quot;&gt;&lt;code&gt;collect_incoming_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt;&lt;code&gt;found_terminator()&lt;/code&gt;&lt;/a&gt; methods. The &lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt;&lt;code&gt;asyncore.dispatcher&lt;/code&gt;&lt;/a&gt; methods can be used, although not all make sense in a message/response context.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt; &lt;code&gt;asyncore.dispatcher&lt;/code&gt; の&lt;/a&gt;抽象サブクラスです。コードを実際に使用するには、&lt;a href=&quot;#asynchat.async_chat&quot;&gt; &lt;code&gt;async_chat&lt;/code&gt; を&lt;/a&gt;サブクラス化して、意味のある&lt;a href=&quot;#asynchat.async_chat.collect_incoming_data&quot;&gt; &lt;code&gt;collect_incoming_data()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt; &lt;code&gt;found_terminator()&lt;/code&gt; &lt;/a&gt;メソッドを提供する必要があります。&lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt; &lt;code&gt;asyncore.dispatcher&lt;/code&gt; からの&lt;/a&gt;メッセージ/応答コンテキストではないすべてのメイクセンスものの方法は、使用することができます。</target>
        </trans-unit>
        <trans-unit id="087906235606c3c8fcaffe0693c559a88547f320" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a URL request.</source>
          <target state="translated">このクラスはURLリクエストの抽象化です。</target>
        </trans-unit>
        <trans-unit id="0c6a034b6a98360f469f65a28d42a14f807ea562" translate="yes" xml:space="preserve">
          <source>This class is deliberately simple, just an &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; subclass with a readable string representation. If you prefer to have dict-like view of the attributes, you can use the standard Python idiom, &lt;a href=&quot;functions#vars&quot;&gt;&lt;code&gt;vars()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">このクラスは意図的に単純で、読み取り可能な文字列表現を持つ&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;サブクラスです。属性のdictのようなビューが必要な場合は、標準のPythonイディオム&lt;a href=&quot;functions#vars&quot;&gt; &lt;code&gt;vars()&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="a5fcd1581caf40e9e0df5f205f111b1168737d46" translate="yes" xml:space="preserve">
          <source>This class is designed to have a similar API to the &lt;a href=&quot;subprocess#subprocess.Popen&quot;&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt;&lt;/a&gt; class, but there are some notable differences:</source>
          <target state="translated">このクラスは、&lt;a href=&quot;subprocess#subprocess.Popen&quot;&gt; &lt;code&gt;subprocess.Popen&lt;/code&gt; &lt;/a&gt;クラスと同様のAPIを持つように設計されていますが、いくつかの顕著な違いがあります。</target>
        </trans-unit>
        <trans-unit id="548e5fba14e42ef23c63d6ed78e4af70b26ae4c7" translate="yes" xml:space="preserve">
          <source>This class is designed to sit between an &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt; and the client application&amp;rsquo;s event handlers. By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt; &lt;code&gt;XMLReader&lt;/code&gt; &lt;/a&gt;とクライアントアプリケーションのイベントハンドラーの間に位置するように設計されています。デフォルトでは、リクエストはリーダーに渡され、イベントは変更されずにハンドラーに渡されますが、サブクラスは特定のメソッドをオーバーライドして、通過するイベントストリームまたは構成リクエストを変更できます。</target>
        </trans-unit>
        <trans-unit id="efbe53f191c0337a6044ecda5cb8ff2affeb594f" translate="yes" xml:space="preserve">
          <source>This class is identical to HTTPServer but uses threads to handle requests by using the &lt;a href=&quot;socketserver#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt;. This is useful to handle web browsers pre-opening sockets, on which &lt;a href=&quot;#http.server.HTTPServer&quot;&gt;&lt;code&gt;HTTPServer&lt;/code&gt;&lt;/a&gt; would wait indefinitely.</source>
          <target state="translated">このクラスはHTTPServerと同じですが、&lt;a href=&quot;socketserver#socketserver.ThreadingMixIn&quot;&gt; &lt;code&gt;ThreadingMixIn&lt;/code&gt; &lt;/a&gt;を使用してスレッドを使用してリクエストを処理します。これは、&lt;a href=&quot;#http.server.HTTPServer&quot;&gt; &lt;code&gt;HTTPServer&lt;/code&gt; &lt;/a&gt;が無期限に待機するソケットを事前に開くWebブラウザを処理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="782b34777524d6fe446584f87d0601af4116f199" translate="yes" xml:space="preserve">
          <source>This class is meant to be subclassed, with the subclass adding visitor methods.</source>
          <target state="translated">このクラスはサブクラス化されることを意図しており、サブクラスに訪問者メソッドが追加されます。</target>
        </trans-unit>
        <trans-unit id="f0df1f01557aa8ffb4f27cded6abda03c3defe24" translate="yes" xml:space="preserve">
          <source>This class is normally only used if more precise control over profiling is needed than what the &lt;code&gt;cProfile.run()&lt;/code&gt; function provides.</source>
          <target state="translated">このクラスは通常、 &lt;code&gt;cProfile.run()&lt;/code&gt; 関数が提供するものよりもプロファイリングをより正確に制御する必要がある場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="dedbc6f4178266f9137c0a6e0806aaa414d428e9" translate="yes" xml:space="preserve">
          <source>This class is parallel to &lt;a href=&quot;#email.parser.BytesParser&quot;&gt;&lt;code&gt;BytesParser&lt;/code&gt;&lt;/a&gt;, but handles string input.</source>
          <target state="translated">このクラスは&lt;a href=&quot;#email.parser.BytesParser&quot;&gt; &lt;code&gt;BytesParser&lt;/code&gt; に似て&lt;/a&gt;いますが、文字列入力を処理します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
