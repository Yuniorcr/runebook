<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="4fd668988fb53bd9a053b46077c87d876ac3dd0c" translate="yes" xml:space="preserve">
          <source>EHLO</source>
          <target state="translated">EHLO</target>
        </trans-unit>
        <trans-unit id="b5f455d3e9fdf793b9ed474569d144a430f4fed1" translate="yes" xml:space="preserve">
          <source>EOF is signaled with a &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; value;</source>
          <target state="translated">EOFは&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;値で通知されます。</target>
        </trans-unit>
        <trans-unit id="4c49f83b052d9fd32537298873b9355036344465" translate="yes" xml:space="preserve">
          <source>EOF is signaled with an empty string (&lt;code&gt;''&lt;/code&gt;);</source>
          <target state="translated">EOFは空の文字列（ &lt;code&gt;''&lt;/code&gt; ）で通知されます。</target>
        </trans-unit>
        <trans-unit id="7b9e6e531c95a34720d1a8d1d5a2c5f1c560afeb" translate="yes" xml:space="preserve">
          <source>EOFError</source>
          <target state="translated">EOFError</target>
        </trans-unit>
        <trans-unit id="8664dc00e7190b6b4bc1b4c25bf22f56acbe19cd" translate="yes" xml:space="preserve">
          <source>EXPN</source>
          <target state="translated">EXPN</target>
        </trans-unit>
        <trans-unit id="3f257ef4deeb38d39d7c23f398e671c79834f42f" translate="yes" xml:space="preserve">
          <source>Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. Example:</source>
          <target state="translated">各クラスは、直属のサブクラスへの弱い参照のリストを保持しています。このメソッドは、まだ生きているすべての参照のリストを返します。例を示します。</target>
        </trans-unit>
        <trans-unit id="49b3d8c715909f41cc320395540e3e23f0c84cef" translate="yes" xml:space="preserve">
          <source>Each codec has to define four interfaces to make it usable as codec in Python: stateless encoder, stateless decoder, stream reader and stream writer. The stream reader and writers typically reuse the stateless encoder/decoder to implement the file protocols. Codec authors also need to define how the codec will handle encoding and decoding errors.</source>
          <target state="translated">各コーデックは、Pythonでコーデックとして使えるようにするために、ステートレスエンコーダ、ステートレスデコーダ、ストリームリーダ、ストリームライタの4つのインタフェースを定義しなければなりません。ストリームリーダとライタは通常、ファイルプロトコルを実装するためにステートレスエンコーダ/デコーダを再利用します。コーデックの作者はまた、コーデックがエンコーディングやデコーディングのエラーをどのように処理するかを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="282f17f731792f16d9273e6a347f472556b09b25" translate="yes" xml:space="preserve">
          <source>Each command returns a tuple: &lt;code&gt;(type, [data, ...])&lt;/code&gt; where &lt;em&gt;type&lt;/em&gt; is usually &lt;code&gt;'OK'&lt;/code&gt; or &lt;code&gt;'NO'&lt;/code&gt;, and &lt;em&gt;data&lt;/em&gt; is either the text from the command response, or mandated results from the command. Each &lt;em&gt;data&lt;/em&gt; is either a string, or a tuple. If a tuple, then the first part is the header of the response, and the second part contains the data (ie: &amp;lsquo;literal&amp;rsquo; value).</source>
          <target state="translated">各コマンドはタプルを返します： &lt;code&gt;(type, [data, ...])&lt;/code&gt; ここで、&lt;em&gt;type&lt;/em&gt;は通常 &lt;code&gt;'OK'&lt;/code&gt; または &lt;code&gt;'NO'&lt;/code&gt; であり、&lt;em&gt;data&lt;/em&gt;はコマンド応答からのテキスト、またはコマンドからの必須の結果です。各&lt;em&gt;データ&lt;/em&gt;は文字列またはタプルです。タプルの場合、最初の部分は応答のヘッダーであり、2番目の部分はデータ（つまり、「リテラル」値）を含みます。</target>
        </trans-unit>
        <trans-unit id="b1fc694bb45d480ca1940a2e1064ce8c21ebc647" translate="yes" xml:space="preserve">
          <source>Each concrete class has an attribute &lt;a href=&quot;#ast.AST._fields&quot;&gt;&lt;code&gt;_fields&lt;/code&gt;&lt;/a&gt; which gives the names of all child nodes.</source>
          <target state="translated">各具象クラスには、すべての子ノードの名前を&lt;a href=&quot;#ast.AST._fields&quot;&gt; &lt;code&gt;_fields&lt;/code&gt; &lt;/a&gt;属性があります。</target>
        </trans-unit>
        <trans-unit id="68a50347d1587b9181be5b21c8a4401ebdc590f5" translate="yes" xml:space="preserve">
          <source>Each element of &lt;em&gt;pathsegments&lt;/em&gt; can be either a string representing a path segment, an object implementing the &lt;a href=&quot;os#os.PathLike&quot;&gt;&lt;code&gt;os.PathLike&lt;/code&gt;&lt;/a&gt; interface which returns a string, or another path object:</source>
          <target state="translated">各要素&lt;em&gt;pathsegmentsは&lt;/em&gt;経路セグメント、実装するオブジェクトを表す文字列のいずれかとすることができる&lt;a href=&quot;os#os.PathLike&quot;&gt; &lt;code&gt;os.PathLike&lt;/code&gt; の&lt;/a&gt;文字列を返すインターフェース、または別のパスオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7d47bd7e76e37961a2c232d0d7b5ad58b1d23e40" translate="yes" xml:space="preserve">
          <source>Each element of the sequences returned by &lt;a href=&quot;#parser.st2list&quot;&gt;&lt;code&gt;st2list()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#parser.st2tuple&quot;&gt;&lt;code&gt;st2tuple()&lt;/code&gt;&lt;/a&gt; has a simple form. Sequences representing non-terminal elements in the grammar always have a length greater than one. The first element is an integer which identifies a production in the grammar. These integers are given symbolic names in the C header file &lt;code&gt;Include/graminit.h&lt;/code&gt; and the Python module &lt;a href=&quot;symbol#module-symbol&quot;&gt;&lt;code&gt;symbol&lt;/code&gt;&lt;/a&gt;. Each additional element of the sequence represents a component of the production as recognized in the input string: these are always sequences which have the same form as the parent. An important aspect of this structure which should be noted is that keywords used to identify the parent node type, such as the keyword &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; in an &lt;code&gt;if_stmt&lt;/code&gt;, are included in the node tree without any special treatment. For example, the &lt;code&gt;if&lt;/code&gt; keyword is represented by the tuple &lt;code&gt;(1, 'if')&lt;/code&gt;, where &lt;code&gt;1&lt;/code&gt; is the numeric value associated with all &lt;code&gt;NAME&lt;/code&gt; tokens, including variable and function names defined by the user. In an alternate form returned when line number information is requested, the same token might be represented as &lt;code&gt;(1, 'if', 12)&lt;/code&gt;, where the &lt;code&gt;12&lt;/code&gt; represents the line number at which the terminal symbol was found.</source>
          <target state="translated">&lt;a href=&quot;#parser.st2list&quot;&gt; &lt;code&gt;st2list()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#parser.st2tuple&quot;&gt; &lt;code&gt;st2tuple()&lt;/code&gt; &lt;/a&gt;によって返されるシーケンスの各要素には、単純な形式があります。文法の非終端要素を表すシーケンスは、常に1より大きい長さを持っています。最初の要素は、文法内のプロダクションを識別する整数です。これらの整数には、Cヘッダーファイル &lt;code&gt;Include/graminit.h&lt;/code&gt; およびPythonモジュール&lt;a href=&quot;symbol#module-symbol&quot;&gt; &lt;code&gt;symbol&lt;/code&gt; &lt;/a&gt;シンボリック名が付けられています。シーケンスの追加の各要素は、入力文字列で認識されたプロダクションのコンポーネントを表します。これらは常に親と同じ形式のシーケンスです。注意すべきこの構造の重要な側面は、キーワードが親ノードのタイプを識別するために使用されること&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;if_stmt&lt;/code&gt; は、特別な処理をせずにノードツリーに含まれます。たとえば、 &lt;code&gt;if&lt;/code&gt; キーワードはタプル &lt;code&gt;(1, 'if')&lt;/code&gt; で表されます &lt;code&gt;1&lt;/code&gt; は、ユーザーが定義した変数名や関数名など、すべての &lt;code&gt;NAME&lt;/code&gt; トークンに関連付けられた数値です。行番号情報が要求されたときに返される代替形式では、同じトークンが &lt;code&gt;(1, 'if', 12)&lt;/code&gt; として表される場合があります。ここで、 &lt;code&gt;12&lt;/code&gt; は、終端記号が見つかった行番号を表します。</target>
        </trans-unit>
        <trans-unit id="fbbb92dbc3b8b3f3d23474fa6aec35d50a033430" translate="yes" xml:space="preserve">
          <source>Each instance maintains a stack of registered callbacks that are called in reverse order when the instance is closed (either explicitly or implicitly at the end of a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement). Note that callbacks are &lt;em&gt;not&lt;/em&gt; invoked implicitly when the context stack instance is garbage collected.</source>
          <target state="translated">各インスタンスは、インスタンスが閉じられるときに逆の順序で呼び出される登録済みコールバックのスタックを維持します（&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの最後で明示的または暗黙的に）。コンテキストスタックインスタンスがガベージコレクションされている場合、コールバックは暗黙的に呼び出され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8de95ec9ac0b515be6306a38072974d2399457c5" translate="yes" xml:space="preserve">
          <source>Each instance of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; will run a single base method: the method named &lt;em&gt;methodName&lt;/em&gt;. In most uses of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;, you will neither change the &lt;em&gt;methodName&lt;/em&gt; nor reimplement the default &lt;code&gt;runTest()&lt;/code&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; の&lt;/a&gt;各インスタンスは、単一の基本メソッド（&lt;em&gt;methodName&lt;/em&gt;という名前のメソッド）を実行します。&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; の&lt;/a&gt;ほとんどの使用では、&lt;em&gt;methodNameを&lt;/em&gt;変更することも、デフォルトの &lt;code&gt;runTest()&lt;/code&gt; メソッドを再実装することもあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d4adfaccfd02783f72f1bf5a8a740336421c2115" translate="yes" xml:space="preserve">
          <source>Each instance of a concrete class has one attribute for each child node, of the type as defined in the grammar. For example, &lt;code&gt;ast.BinOp&lt;/code&gt; instances have an attribute &lt;code&gt;left&lt;/code&gt; of type &lt;code&gt;ast.expr&lt;/code&gt;.</source>
          <target state="translated">具象クラスの各インスタンスには、文法で定義されているタイプの子ノードごとに1つの属性があります。たとえば、 &lt;code&gt;ast.BinOp&lt;/code&gt; インスタンスには、型 &lt;code&gt;ast.expr&lt;/code&gt; の &lt;code&gt;left&lt;/code&gt; 属性があります。</target>
        </trans-unit>
        <trans-unit id="13ea0b080ba9b453721cead18f47d5cd873c0211" translate="yes" xml:space="preserve">
          <source>Each item also has a list of tags, which can be used to associate event bindings with individual items and control the appearance of the item.</source>
          <target state="translated">各アイテムにはタグのリストもあり、イベントバインディングを個々のアイテムに関連づけたり、アイテムの外観をコントロールしたりするために使用できます。</target>
        </trans-unit>
        <trans-unit id="e44e01ec262fcc06e2c821c79bd1b985a39335e0" translate="yes" xml:space="preserve">
          <source>Each item in the list will be a string which is the value of the &lt;code&gt;charset&lt;/code&gt; parameter in the &lt;em&gt;Content-Type&lt;/em&gt; header for the represented subpart. However, if the subpart has no &lt;em&gt;Content-Type&lt;/em&gt; header, no &lt;code&gt;charset&lt;/code&gt; parameter, or is not of the &lt;em&gt;text&lt;/em&gt; main MIME type, then that item in the returned list will be &lt;em&gt;failobj&lt;/em&gt;.</source>
          <target state="translated">リスト内の各項目は、表現されたサブパートの&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーの &lt;code&gt;charset&lt;/code&gt; パラメータの値である文字列になります。ただし、サブパートに&lt;em&gt;Content-Type&lt;/em&gt;ヘッダー、 &lt;code&gt;charset&lt;/code&gt; パラメーターがない場合、または&lt;em&gt;テキストの&lt;/em&gt;メインMIMEタイプでない場合、返されるリストのそのアイテムは&lt;em&gt;failobjになり&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf9f8e6f669080eee75ae9dc5a75b7bbd4c47d81" translate="yes" xml:space="preserve">
          <source>Each item in the list will be a string which is the value of the &lt;code&gt;charset&lt;/code&gt; parameter in the &lt;em&gt;Content-Type&lt;/em&gt; header for the represented subpart. If the subpart has no &lt;em&gt;Content-Type&lt;/em&gt; header, no &lt;code&gt;charset&lt;/code&gt; parameter, or is not of the &lt;em&gt;text&lt;/em&gt; main MIME type, then that item in the returned list will be &lt;em&gt;failobj&lt;/em&gt;.</source>
          <target state="translated">リスト内の各項目は、表現されたサブパートの&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーの &lt;code&gt;charset&lt;/code&gt; パラメータの値である文字列になります。サブパートに&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーがないか、 &lt;code&gt;charset&lt;/code&gt; パラメーターがない場合、または&lt;em&gt;テキストの&lt;/em&gt;メインMIMEタイプでない場合、返されるリストのその項目は&lt;em&gt;failobjになり&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="da0ee9fd3f992367055d3f5837dcc4a138a402ce" translate="yes" xml:space="preserve">
          <source>Each item in this tuple contains further information about a parameter, it must be a tuple containing one, two, or three items.</source>
          <target state="translated">このタプルの各項目には、パラメータに関する詳細な情報が含まれており、1つ、2つ、または3つの項目を含むタプルでなければなりません。</target>
        </trans-unit>
        <trans-unit id="77e53c8c02a8a57ebc4ed20d807d943b6ff96866" translate="yes" xml:space="preserve">
          <source>Each item is identified by a unique name. The widget will generate item IDs if they are not supplied by the caller. There is a distinguished root item, named &lt;code&gt;{}&lt;/code&gt;. The root item itself is not displayed; its children appear at the top level of the hierarchy.</source>
          <target state="translated">各アイテムは一意の名前で識別されます。ウィジェットは、呼び出し元によって提供されない場合、アイテムIDを生成します。 &lt;code&gt;{}&lt;/code&gt; という名前の区別されたルートアイテムがあります。ルートアイテム自体は表示されません。その子は階層の最上位に表示されます。</target>
        </trans-unit>
        <trans-unit id="4bce3597203de7edee0f57b19d4a2d5cbffdf95e" translate="yes" xml:space="preserve">
          <source>Each item should have the same number of values as the widget option columns. If there are fewer values than columns, the remaining values are assumed empty. If there are more values than columns, the extra values are ignored.</source>
          <target state="translated">各項目は、ウィジェットオプションの列と同じ数の値を持つ必要があります。値がカラムより少ない場合、残りの値は空とみなされます。カラムよりも多くの値がある場合、余分な値は無視されます。</target>
        </trans-unit>
        <trans-unit id="e78be99b38a7a6e8f05f339ced460b87f7c2eaf4" translate="yes" xml:space="preserve">
          <source>Each iteration yields a tuple as specified by the format string.</source>
          <target state="translated">各反復は、フォーマット文字列で指定されたタプルを生成します。</target>
        </trans-unit>
        <trans-unit id="2f826346b31818133756fc3c73c82e215e0c9cf5" translate="yes" xml:space="preserve">
          <source>Each key in &lt;em&gt;kw&lt;/em&gt; is an option and each value is a string identifying the value for that option.</source>
          <target state="translated">&lt;em&gt;kwの&lt;/em&gt;各キーはオプションであり、各値はそのオプションの値を識別する文字列です。</target>
        </trans-unit>
        <trans-unit id="39b11157702a1c985e2f006a001b5fee4627520f" translate="yes" xml:space="preserve">
          <source>Each key in &lt;em&gt;kw&lt;/em&gt; is an option and each value should be a list or a tuple (usually) containing statespecs grouped in tuples, lists, or some other preference. A statespec is a compound of one or more states and then a value.</source>
          <target state="translated">&lt;em&gt;kwの&lt;/em&gt;各キーはオプションであり、各値はタプル、リスト、またはその他の設定でグループ化された状態仕様を含むリストまたはタプル（通常）である必要があります。statespecは、1つ以上の状態と値の複合です。</target>
        </trans-unit>
        <trans-unit id="3e8597bf6453e280e6bc0fb06128abdc83d25df7" translate="yes" xml:space="preserve">
          <source>Each key in &lt;em&gt;settings&lt;/em&gt; is a style and each value may contain the keys &amp;lsquo;configure&amp;rsquo;, &amp;lsquo;map&amp;rsquo;, &amp;lsquo;layout&amp;rsquo; and &amp;lsquo;element create&amp;rsquo; and they are expected to have the same format as specified by the methods &lt;a href=&quot;#tkinter.ttk.Style.configure&quot;&gt;&lt;code&gt;Style.configure()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Style.map&quot;&gt;&lt;code&gt;Style.map()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Style.layout&quot;&gt;&lt;code&gt;Style.layout()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.ttk.Style.element_create&quot;&gt;&lt;code&gt;Style.element_create()&lt;/code&gt;&lt;/a&gt; respectively.</source>
          <target state="translated">&lt;em&gt;設定の&lt;/em&gt;各キーはスタイルであり、各値にはキー「configure」、「map」、「layout」、「element create」を含めることができ、それらはメソッド&lt;a href=&quot;#tkinter.ttk.Style.configure&quot;&gt; &lt;code&gt;Style.configure()&lt;/code&gt; &lt;/a&gt;で指定されたものと同じ形式であることが期待されます。&lt;a href=&quot;#tkinter.ttk.Style.map&quot;&gt; &lt;code&gt;Style.map()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tkinter.ttk.Style.layout&quot;&gt; &lt;code&gt;Style.layout()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#tkinter.ttk.Style.element_create&quot;&gt; &lt;code&gt;Style.element_create()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="87388fd6d132977913179af099110ca3324339a0" translate="yes" xml:space="preserve">
          <source>Each line of a &lt;a href=&quot;#difflib.Differ&quot;&gt;&lt;code&gt;Differ&lt;/code&gt;&lt;/a&gt; delta begins with a two-letter code:</source>
          <target state="translated">&lt;a href=&quot;#difflib.Differ&quot;&gt; &lt;code&gt;Differ&lt;/code&gt; &lt;/a&gt;デルタの各行は、2文字のコードで始まります。</target>
        </trans-unit>
        <trans-unit id="e42a08c19ff6f318b0b306e48a39eabc2c06f3ef" translate="yes" xml:space="preserve">
          <source>Each line of the traceback stack (if present) must be indented further than the first line of the example, &lt;em&gt;or&lt;/em&gt; start with a non-alphanumeric character. The first line following the traceback header indented the same and starting with an alphanumeric is taken to be the start of the exception detail. Of course this does the right thing for genuine tracebacks.</source>
          <target state="translated">トレースバックスタックの各行（存在する場合）は、例の最初の行よりもインデントする&lt;em&gt;か&lt;/em&gt;、英数字以外の文字で開始する必要があります。同じようにインデントされ、英数字で始まるトレースバックヘッダーに続く最初の行が、例外の詳細の始まりと見なされます。もちろん、これは本物のトレースバックには正しいことです。</target>
        </trans-unit>
        <trans-unit id="966983a00fbe34b47c3c999bd9e9a31fd05e66a8" translate="yes" xml:space="preserve">
          <source>Each module in the &lt;a href=&quot;#module-test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; package whose name starts with &lt;code&gt;test_&lt;/code&gt; is a testing suite for a specific module or feature. All new tests should be written using the &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;doctest#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; module. Some older tests are written using a &amp;ldquo;traditional&amp;rdquo; testing style that compares output printed to &lt;code&gt;sys.stdout&lt;/code&gt;; this style of test is considered deprecated.</source>
          <target state="translated">名前が &lt;code&gt;test_&lt;/code&gt; で始まる&lt;a href=&quot;#module-test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;パッケージ内の各モジュールは、特定のモジュールまたは機能のテストスイートです。すべての新しいテストを使用して記述する必要があります&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;doctest#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; の&lt;/a&gt;モジュールを。古いテストの一部は、出力された出力を &lt;code&gt;sys.stdout&lt;/code&gt; と比較する「従来の」テストスタイルを使用して記述されています。このスタイルのテストは非推奨と見なされます。</target>
        </trans-unit>
        <trans-unit id="570d43e41fd016220171b8d9766922e2767c092c" translate="yes" xml:space="preserve">
          <source>Each of the authentication methods supported by &lt;a href=&quot;#module-smtplib&quot;&gt;&lt;code&gt;smtplib&lt;/code&gt;&lt;/a&gt; are tried in turn if they are advertised as supported by the server. See &lt;a href=&quot;#smtplib.SMTP.auth&quot;&gt;&lt;code&gt;auth()&lt;/code&gt;&lt;/a&gt; for a list of supported authentication methods. &lt;em&gt;initial_response_ok&lt;/em&gt; is passed through to &lt;a href=&quot;#smtplib.SMTP.auth&quot;&gt;&lt;code&gt;auth()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#module-smtplib&quot;&gt; &lt;code&gt;smtplib&lt;/code&gt; で&lt;/a&gt;サポートされている各認証方法は、サーバーでサポートされているものとしてアドバタイズされている場合、順番に試行されます。サポートされている認証方法のリストについては、&lt;a href=&quot;#smtplib.SMTP.auth&quot;&gt; &lt;code&gt;auth()&lt;/code&gt; &lt;/a&gt;を参照してください。&lt;em&gt;initial_response_ok&lt;/em&gt;は&lt;a href=&quot;#smtplib.SMTP.auth&quot;&gt; &lt;code&gt;auth()&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="a0be42f64114c87525015606161dd516884beee6" translate="yes" xml:space="preserve">
          <source>Each of the following constants defines a tar archive format that the &lt;a href=&quot;#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; module is able to create. See section &lt;a href=&quot;#tar-formats&quot;&gt;Supported tar formats&lt;/a&gt; for details.</source>
          <target state="translated">以下の各定数は、&lt;a href=&quot;#module-tarfile&quot;&gt; &lt;code&gt;tarfile&lt;/code&gt; &lt;/a&gt;モジュールが作成できるtarアーカイブ形式を定義します。詳細については、&lt;a href=&quot;#tar-formats&quot;&gt;サポートされているtar形式&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c8eacfcf105bb64fff8fabb452ae84f33e7ee8ec" translate="yes" xml:space="preserve">
          <source>Each of the methods &lt;a href=&quot;#venv.EnvBuilder.ensure_directories&quot;&gt;&lt;code&gt;ensure_directories()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#venv.EnvBuilder.create_configuration&quot;&gt;&lt;code&gt;create_configuration()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#venv.EnvBuilder.setup_python&quot;&gt;&lt;code&gt;setup_python()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#venv.EnvBuilder.setup_scripts&quot;&gt;&lt;code&gt;setup_scripts()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#venv.EnvBuilder.post_setup&quot;&gt;&lt;code&gt;post_setup()&lt;/code&gt;&lt;/a&gt; can be overridden.</source>
          <target state="translated">&lt;a href=&quot;#venv.EnvBuilder.ensure_directories&quot;&gt; &lt;code&gt;ensure_directories()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#venv.EnvBuilder.create_configuration&quot;&gt; &lt;code&gt;create_configuration()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#venv.EnvBuilder.setup_python&quot;&gt; &lt;code&gt;setup_python()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#venv.EnvBuilder.setup_scripts&quot;&gt; &lt;code&gt;setup_scripts()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#venv.EnvBuilder.post_setup&quot;&gt; &lt;code&gt;post_setup()&lt;/code&gt; の&lt;/a&gt;各メソッドはオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="7dc6ae0f9750e9fa2a785125e5f9d0d801c4c29a" translate="yes" xml:space="preserve">
          <source>Each row read from the csv file is returned as a list of strings. No automatic data type conversion is performed unless the &lt;code&gt;QUOTE_NONNUMERIC&lt;/code&gt; format option is specified (in which case unquoted fields are transformed into floats).</source>
          <target state="translated">csvファイルから読み取られた各行は、文字列のリストとして返されます。 &lt;code&gt;QUOTE_NONNUMERIC&lt;/code&gt; 形式オプションが指定されていない限り、自動データ型変換は実行されません（この場合、引用符で囲まれていないフィールドは浮動小数点に変換されます）。</target>
        </trans-unit>
        <trans-unit id="39af9c24f6267667f16c1f8937c3f68cebb65cc8" translate="yes" xml:space="preserve">
          <source>Each scheme is itself composed of a series of paths and each path has a unique identifier. Python currently uses eight paths:</source>
          <target state="translated">各スキームはそれ自体が一連のパスで構成されており、各パスは一意の識別子を持っています。Pythonは現在8つのパスを使用しています。</target>
        </trans-unit>
        <trans-unit id="d6be844de18e8ac1c0c125847ea509ec8672f2af" translate="yes" xml:space="preserve">
          <source>Each sequence must contain individual single-line strings ending with newlines. Such sequences can be obtained from the &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;readlines()&lt;/code&gt;&lt;/a&gt; method of file-like objects. The delta generated also consists of newline-terminated strings, ready to be printed as-is via the &lt;a href=&quot;io#io.IOBase.writelines&quot;&gt;&lt;code&gt;writelines()&lt;/code&gt;&lt;/a&gt; method of a file-like object.</source>
          <target state="translated">各シーケンスには、改行で終わる個々の単一行の文字列が含まれている必要があります。このようなシーケンスは、ファイルのようなオブジェクトの&lt;a href=&quot;io#io.IOBase.readlines&quot;&gt; &lt;code&gt;readlines()&lt;/code&gt; &lt;/a&gt;メソッドから取得できます。生成されるデルタも改行で終了する文字列で構成され、ファイルのようなオブジェクトの&lt;a href=&quot;io#io.IOBase.writelines&quot;&gt; &lt;code&gt;writelines()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、そのまま印刷できます。</target>
        </trans-unit>
        <trans-unit id="f6fea372c2e6910286f3770084c74f69f7479d39" translate="yes" xml:space="preserve">
          <source>Each statement in &lt;code&gt;__future__.py&lt;/code&gt; is of the form:</source>
          <target state="translated">&lt;code&gt;__future__.py&lt;/code&gt; の各ステートメントは次の形式です。</target>
        </trans-unit>
        <trans-unit id="9e29db3d8e94a8e1eddfab4dff35fd962a74e06a" translate="yes" xml:space="preserve">
          <source>Each string is limited to 500 characters.</source>
          <target state="translated">各文字列は500文字に制限されています。</target>
        </trans-unit>
        <trans-unit id="170cfb863712b473cc75fb950f928a5a8285210f" translate="yes" xml:space="preserve">
          <source>Each thread has its own current context which is accessed or changed using the &lt;a href=&quot;#decimal.getcontext&quot;&gt;&lt;code&gt;getcontext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decimal.setcontext&quot;&gt;&lt;code&gt;setcontext()&lt;/code&gt;&lt;/a&gt; functions:</source>
          <target state="translated">各スレッドには、&lt;a href=&quot;#decimal.getcontext&quot;&gt; &lt;code&gt;getcontext()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#decimal.setcontext&quot;&gt; &lt;code&gt;setcontext()&lt;/code&gt; &lt;/a&gt;関数を使用してアクセスまたは変更される独自の現在のコンテキストがあります。</target>
        </trans-unit>
        <trans-unit id="4d777ac10aa65cebbc73a8b54c83325611989663" translate="yes" xml:space="preserve">
          <source>Each time a telnet option is read on the input flow, this &lt;em&gt;callback&lt;/em&gt; (if set) is called with the following parameters: callback(telnet socket, command (DO/DONT/WILL/WONT), option). No other action is done afterwards by telnetlib.</source>
          <target state="translated">入力フローでtelnetオプションが読み取られるたびに、この&lt;em&gt;コールバック&lt;/em&gt;（設定されている場合）は次のパラメーターで呼び出されます：callback（telnetソケット、コマンド（DO / DONT / WILL / WONT）、オプション）。その後、telnetlibによって他のアクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="bfad8ccc8a211d61d36409d0bf2f14aa35ee256d" translate="yes" xml:space="preserve">
          <source>Each type variable argument to &lt;a href=&quot;#typing.Generic&quot;&gt;&lt;code&gt;Generic&lt;/code&gt;&lt;/a&gt; must be distinct. This is thus invalid:</source>
          <target state="translated">&lt;a href=&quot;#typing.Generic&quot;&gt; &lt;code&gt;Generic&lt;/code&gt; &lt;/a&gt;への各型変数引数は異なる必要があります。したがって、これは無効です。</target>
        </trans-unit>
        <trans-unit id="c84331c7ef4d85ab05cce6fed746ac676d4e101d" translate="yes" xml:space="preserve">
          <source>Each widget in &lt;code&gt;ttk&lt;/code&gt; is assigned a style, which specifies the set of elements making up the widget and how they are arranged, along with dynamic and default settings for element options. By default the style name is the same as the widget&amp;rsquo;s class name, but it may be overridden by the widget&amp;rsquo;s style option. If you don&amp;rsquo;t know the class name of a widget, use the method &lt;code&gt;Misc.winfo_class()&lt;/code&gt; (somewidget.winfo_class()).</source>
          <target state="translated">&lt;code&gt;ttk&lt;/code&gt; の各ウィジェットにはスタイルが割り当てられます。スタイルは、ウィジェットを構成する要素のセットとそれらの配置方法を、要素オプションの動的およびデフォルト設定とともに指定します。デフォルトでは、スタイル名はウィジェットのクラス名と同じですが、ウィジェットのスタイルオプションによってオーバーライドされる場合があります。ウィジェットのクラス名がわからない場合は、メソッド &lt;code&gt;Misc.winfo_class()&lt;/code&gt; （somewidget.winfo_class（））を使用してください。</target>
        </trans-unit>
        <trans-unit id="ac6958e8c84c43dc505ed0bc0da9c2ae587471df" translate="yes" xml:space="preserve">
          <source>Edge and Level Trigger Polling (epoll) Objects</source>
          <target state="translated">エッジおよびレベルトリガーポーリング(epoll)オブジェクト</target>
        </trans-unit>
        <trans-unit id="5583cdff4d4a6580ea0a38b30db66be0866f671a" translate="yes" xml:space="preserve">
          <source>Edit menu (Shell and Editor)</source>
          <target state="translated">編集メニュー(シェルとエディタ</target>
        </trans-unit>
        <trans-unit id="185ea171b3d3bde051ea325fee7b199751c8574b" translate="yes" xml:space="preserve">
          <source>Editable text widget for curses supporting &lt;strong&gt;Emacs&lt;/strong&gt;-like bindings.</source>
          <target state="translated">&lt;strong&gt;Emacsの&lt;/strong&gt;ようなバインディングをサポートするcursesの編集可能なテキストウィジェット。</target>
        </trans-unit>
        <trans-unit id="938a52ac689dd4874b63cf940ebb77391725c7d1" translate="yes" xml:space="preserve">
          <source>Editing and navigation</source>
          <target state="translated">編集とナビゲーション</target>
        </trans-unit>
        <trans-unit id="90f14ba0b6909fa15eb3284afbcd0982f6764f14" translate="yes" xml:space="preserve">
          <source>Editor windows</source>
          <target state="translated">エディタウィンドウ</target>
        </trans-unit>
        <trans-unit id="0efd6762e1cf2a894e742725c6e1de2bd3237193" translate="yes" xml:space="preserve">
          <source>Editor windows also have breakpoint functions. Lines with a breakpoint set are specially marked. Breakpoints only have an effect when running under the debugger. Breakpoints for a file are saved in the user&amp;rsquo;s &lt;code&gt;.idlerc&lt;/code&gt; directory.</source>
          <target state="translated">エディタウィンドウには、ブレークポイント機能もあります。ブレークポイントが設定された行には特別なマークが付けられます。ブレークポイントは、デバッガーの下で実行している場合にのみ効果があります。ファイルのブレークポイントは、ユーザーの &lt;code&gt;.idlerc&lt;/code&gt; ディレクトリに保存されます。</target>
        </trans-unit>
        <trans-unit id="8a9ba193ecdd6f264d6c16c5e8ae467c10e10059" translate="yes" xml:space="preserve">
          <source>Either &amp;ldquo;normal&amp;rdquo;, &amp;ldquo;disabled&amp;rdquo; or &amp;ldquo;hidden&amp;rdquo;. If &amp;ldquo;disabled&amp;rdquo;, then the tab is not selectable. If &amp;ldquo;hidden&amp;rdquo;, then the tab is not shown.</source>
          <target state="translated">「通常」、「無効」、「非表示」のいずれか。「無効」の場合、タブは選択できません。「非表示」の場合、タブは表示されません。</target>
        </trans-unit>
        <trans-unit id="abd9d70a96769f378e601ed03a344c72fddacf4f" translate="yes" xml:space="preserve">
          <source>Either &lt;em&gt;action&lt;/em&gt; or &lt;em&gt;delayfunc&lt;/em&gt; can raise an exception. In either case, the scheduler will maintain a consistent state and propagate the exception. If an exception is raised by &lt;em&gt;action&lt;/em&gt;, the event will not be attempted in future calls to &lt;a href=&quot;#sched.scheduler.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;action&lt;/em&gt;または&lt;em&gt;delayfuncの&lt;/em&gt;いずれかで例外が発生する可能性があります。どちらの場合でも、スケジューラーは一貫した状態を維持し、例外を伝搬します。&lt;em&gt;action&lt;/em&gt;によって例外が発生し&lt;em&gt;た&lt;/em&gt;場合、イベントは&lt;a href=&quot;#sched.scheduler.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt;への今後の呼び出しでは試行されません。</target>
        </trans-unit>
        <trans-unit id="85c84f61f57bea218ff74b0e009533443082981e" translate="yes" xml:space="preserve">
          <source>Either escapes special characters (permitting you to match characters like &lt;code&gt;'*'&lt;/code&gt;, &lt;code&gt;'?'&lt;/code&gt;, and so forth), or signals a special sequence; special sequences are discussed below.</source>
          <target state="translated">特殊文字をエスケープする（ &lt;code&gt;'*'&lt;/code&gt; や &lt;code&gt;'?'&lt;/code&gt; などの文字を照合できるようにする）か、特殊なシーケンスを通知します。特別なシーケンスについては、以下で説明します。</target>
        </trans-unit>
        <trans-unit id="6eee7c7fedc41829e794e6532414686d341b604b" translate="yes" xml:space="preserve">
          <source>Either this method or &lt;a href=&quot;#test.support.bind_port&quot;&gt;&lt;code&gt;bind_port()&lt;/code&gt;&lt;/a&gt; should be used for any tests where a server socket needs to be bound to a particular port for the duration of the test. Which one to use depends on whether the calling code is creating a Python socket, or if an unused port needs to be provided in a constructor or passed to an external program (i.e. the &lt;code&gt;-accept&lt;/code&gt; argument to openssl&amp;rsquo;s s_server mode). Always prefer &lt;a href=&quot;#test.support.bind_port&quot;&gt;&lt;code&gt;bind_port()&lt;/code&gt;&lt;/a&gt; over &lt;a href=&quot;#test.support.find_unused_port&quot;&gt;&lt;code&gt;find_unused_port()&lt;/code&gt;&lt;/a&gt; where possible. Using a hard coded port is discouraged since it can make multiple instances of the test impossible to run simultaneously, which is a problem for buildbots.</source>
          <target state="translated">テスト中にサーバーソケットを特定のポートにバインドする必要があるテストでは、このメソッドまたは&lt;a href=&quot;#test.support.bind_port&quot;&gt; &lt;code&gt;bind_port()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。使用するかを呼び出すコードはPythonのソケットを作成し、または未使用のポートのニーズはコンストラクタで提供または外部プログラム（すなわちに渡される場合されているかどうかに依存し &lt;code&gt;-accept&lt;/code&gt; のopensslのs_serverモードへの引数）。常に好む&lt;a href=&quot;#test.support.bind_port&quot;&gt; &lt;code&gt;bind_port()&lt;/code&gt; &lt;/a&gt;オーバー&lt;a href=&quot;#test.support.find_unused_port&quot;&gt; &lt;code&gt;find_unused_port()&lt;/code&gt; &lt;/a&gt;可能な場合。ハードコードされたポートを使用すると、テストの複数のインスタンスを同時に実行できなくなる可能性があるため、お勧めしません。これは、ビルドボットの問題です。</target>
        </trans-unit>
        <trans-unit id="595af9f0b2bd2f1aad5e8a611a6b67dcd9fdb296" translate="yes" xml:space="preserve">
          <source>Either type of image is created through either the &lt;code&gt;file&lt;/code&gt; or the &lt;code&gt;data&lt;/code&gt; option (other options are available as well).</source>
          <target state="translated">どちらのタイプのイメージも、 &lt;code&gt;file&lt;/code&gt; または &lt;code&gt;data&lt;/code&gt; オプションのいずれかで作成されます（他のオプションも使用できます）。</target>
        </trans-unit>
        <trans-unit id="359218794b7e55476802d4e7b22031fcdc11a904" translate="yes" xml:space="preserve">
          <source>Element Objects</source>
          <target state="translated">要素オブジェクト</target>
        </trans-unit>
        <trans-unit id="49534abd221be130bf26afdaca69c9d22709f868" translate="yes" xml:space="preserve">
          <source>Element class. This class defines the Element interface, and provides a reference implementation of this interface.</source>
          <target state="translated">Element クラスです。このクラスは Element インターフェースを定義し、このインターフェースの参照実装を提供します。</target>
        </trans-unit>
        <trans-unit id="ef0b2c7a0b2591de8486cfbe012dd3bf013c9430" translate="yes" xml:space="preserve">
          <source>Element nodes in the document hierarchy.</source>
          <target state="translated">文書階層内の要素ノード。</target>
        </trans-unit>
        <trans-unit id="f4648a38161abf7ec412ca53076e6858990db678" translate="yes" xml:space="preserve">
          <source>ElementTree Objects</source>
          <target state="translated">要素ツリーオブジェクト</target>
        </trans-unit>
        <trans-unit id="4f2ce384320f7363ad9b94cc0a546bdae1eab4d4" translate="yes" xml:space="preserve">
          <source>ElementTree wrapper class. This class represents an entire element hierarchy, and adds some extra support for serialization to and from standard XML.</source>
          <target state="translated">ElementTree ラッパークラス。このクラスは要素階層全体を表現し、標準 XML との間でのシリアライズや標準 XML からのシリアライズをサポートします。</target>
        </trans-unit>
        <trans-unit id="e24a4bf20d22559c7e5a0526dfebb54f5104a66b" translate="yes" xml:space="preserve">
          <source>Elements are counted from an &lt;em&gt;iterable&lt;/em&gt; or added-in from another &lt;em&gt;mapping&lt;/em&gt; (or counter). Like &lt;a href=&quot;stdtypes#dict.update&quot;&gt;&lt;code&gt;dict.update()&lt;/code&gt;&lt;/a&gt; but adds counts instead of replacing them. Also, the &lt;em&gt;iterable&lt;/em&gt; is expected to be a sequence of elements, not a sequence of &lt;code&gt;(key, value)&lt;/code&gt; pairs.</source>
          <target state="translated">要素は、別の&lt;em&gt;マッピング&lt;/em&gt;（またはカウンター）からの&lt;em&gt;反復可能&lt;/em&gt;または&lt;em&gt;アドイン&lt;/em&gt;からカウントされます。&lt;a href=&quot;stdtypes#dict.update&quot;&gt; &lt;code&gt;dict.update()&lt;/code&gt; に&lt;/a&gt;似ていますが、カウントを置き換える代わりにカウントを追加します。また、&lt;em&gt;反復可能オブジェクト&lt;/em&gt;は、一連の &lt;code&gt;(key, value)&lt;/code&gt; ペアではなく、一連の要素であることが期待されます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e5957fa1f33f3be4329508a3d81ddf845cff5498" translate="yes" xml:space="preserve">
          <source>Elements are counted from an &lt;em&gt;iterable&lt;/em&gt; or initialized from another &lt;em&gt;mapping&lt;/em&gt; (or counter):</source>
          <target state="translated">要素は、&lt;em&gt;イテラブル&lt;/em&gt;からカウントされるか、別の&lt;em&gt;マッピング&lt;/em&gt;（またはカウンター）から初期化されます。</target>
        </trans-unit>
        <trans-unit id="e16188e6c59f02f989fa3685c7fd0fc9c19161c4" translate="yes" xml:space="preserve">
          <source>Elements are subtracted from an &lt;em&gt;iterable&lt;/em&gt; or from another &lt;em&gt;mapping&lt;/em&gt; (or counter). Like &lt;a href=&quot;stdtypes#dict.update&quot;&gt;&lt;code&gt;dict.update()&lt;/code&gt;&lt;/a&gt; but subtracts counts instead of replacing them. Both inputs and outputs may be zero or negative.</source>
          <target state="translated">要素は、&lt;em&gt;イテラブル&lt;/em&gt;または別の&lt;em&gt;マッピング&lt;/em&gt;（またはカウンター）から差し引かれます。&lt;a href=&quot;stdtypes#dict.update&quot;&gt; &lt;code&gt;dict.update()&lt;/code&gt; &lt;/a&gt;と似ていますが、カウントを置き換えるのではなく、減算します。入力と出力の両方がゼロまたは負の場合があります。</target>
        </trans-unit>
        <trans-unit id="0143fc64324e3d8e5c44dbc294959eb5a7104759" translate="yes" xml:space="preserve">
          <source>Elements are treated as unique based on their position, not on their value. So if the input elements are unique, the generated combinations will also be unique.</source>
          <target state="translated">要素は、その値ではなく、その位置に基づいて一意として扱われます。そのため、入力要素が一意であれば、生成される組み合わせも一意になります。</target>
        </trans-unit>
        <trans-unit id="11dcc2ac3f506948cc124bda3adca41a062af817" translate="yes" xml:space="preserve">
          <source>Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat values in each combination.</source>
          <target state="translated">要素はその値ではなく、その位置に基づいて一意として扱われます。そのため、入力された要素が一意であれば、それぞれの組み合わせにおいて繰り返し値は存在しません。</target>
        </trans-unit>
        <trans-unit id="a7b6e8e82fdfd17809cefa633bda0e009bcc17f5" translate="yes" xml:space="preserve">
          <source>Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no repeat values in each permutation.</source>
          <target state="translated">要素はその値ではなく、その位置に基づいて一意として扱われます。そのため、入力要素が一意であれば、各並べ替えにおいて繰り返し値は存在しません。</target>
        </trans-unit>
        <trans-unit id="34a8d1deb6f308a56f56218b6f5d343ef934119f" translate="yes" xml:space="preserve">
          <source>Elements which are declared to be &lt;code&gt;EMPTY&lt;/code&gt; have this model type.</source>
          <target state="translated">&lt;code&gt;EMPTY&lt;/code&gt; と宣言されている要素は、このモデルタイプを持っています。</target>
        </trans-unit>
        <trans-unit id="10f74c250875f4d100fff5cde5ff0835190404c1" translate="yes" xml:space="preserve">
          <source>Elimination of PYO files</source>
          <target state="translated">PYOファイルの廃止</target>
        </trans-unit>
        <trans-unit id="6ff0f4a868ef59be803181103a0f8dacda1099dd" translate="yes" xml:space="preserve">
          <source>Ellipsis</source>
          <target state="translated">Ellipsis</target>
        </trans-unit>
        <trans-unit id="ed17628a4f82dc8f7f14625d39bd363df62db888" translate="yes" xml:space="preserve">
          <source>Else &lt;em&gt;MandatoryRelease&lt;/em&gt; records when the feature became part of the language; in releases at or after that, modules no longer need a future statement to use the feature in question, but may continue to use such imports.</source>
          <target state="translated">Else &lt;em&gt;MandatoryRelease&lt;/em&gt;は、機能が言語の一部になったときを記録します。それ以降のリリースでは、モジュールは問題の機能を使用するためにfutureステートメントを必要としなくなりましたが、そのようなインポートを引き続き使用する可能性があります。</target>
        </trans-unit>
        <trans-unit id="84add5b2952787581cb9a8851eef63d1ec75d22b" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="translated">Email</target>
        </trans-unit>
        <trans-unit id="da824744005afe1d0c34eee098eaf67872e3d742" translate="yes" xml:space="preserve">
          <source>Emit a short attention sound.</source>
          <target state="translated">短い注意音を発します。</target>
        </trans-unit>
        <trans-unit id="712fe37c31ba2210e87e7f7f3b1bf5e14d866d27" translate="yes" xml:space="preserve">
          <source>Empties the cell contained in slot &lt;em&gt;i&lt;/em&gt; of the cell and free variable storage. Used by the &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">セルのスロット&lt;em&gt;i&lt;/em&gt;に含まれるセルを空にし、変数ストレージを解放します。&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#del&quot;&gt; &lt;code&gt;del&lt;/code&gt; &lt;/a&gt;ステートメントで使用されます。</target>
        </trans-unit>
        <trans-unit id="6f66f8ef5d271d13742c0b875e964787e7b320e6" translate="yes" xml:space="preserve">
          <source>Empty files are opened and immediately closed; the only time their presence in the list of filenames is noticeable at all is when the last file opened is empty.</source>
          <target state="translated">空のファイルは開かれてすぐに閉じられます。ファイル名リストの中に空のファイルが存在することは、最後に開いたファイルが空の場合にのみ顕著です。</target>
        </trans-unit>
        <trans-unit id="96fc58d87dcfa6680714e0fc0a204c20e1bc2122" translate="yes" xml:space="preserve">
          <source>Empty matches for the pattern split the string only when not adjacent to a previous empty match.</source>
          <target state="translated">パターンの空マッチは、以前の空マッチに隣接していない場合にのみ文字列を分割します。</target>
        </trans-unit>
        <trans-unit id="6eb0779fd09c16502ebd15fb0795bd1835ade77f" translate="yes" xml:space="preserve">
          <source>Empty sequences are allowed, but acceptance of three empty sequences is platform-dependent. (It is known to work on Unix but not on Windows.) The optional &lt;em&gt;timeout&lt;/em&gt; argument specifies a time-out as a floating point number in seconds. When the &lt;em&gt;timeout&lt;/em&gt; argument is omitted the function blocks until at least one file descriptor is ready. A time-out value of zero specifies a poll and never blocks.</source>
          <target state="translated">空のシーケンスは許可されますが、3つの空のシーケンスの受け入れはプラットフォームに依存します。（Unixでは機能することがわかっていますが、Windowsでは機能しません。）オプションの&lt;em&gt;タイムアウト&lt;/em&gt;引数は、&lt;em&gt;タイムアウト&lt;/em&gt;を秒単位の浮動小数点数として指定します。ときに&lt;em&gt;タイムアウト&lt;/em&gt;引数は、機能ブロックを省略している少なくとも1つのファイルディスクリプタは準備ができるまで。ゼロのタイムアウト値はポーリングを指定し、ブロックすることはありません。</target>
        </trans-unit>
        <trans-unit id="f9ca147c86f3511f63e922200d892933735a3ce7" translate="yes" xml:space="preserve">
          <source>Enable &amp;ldquo;passive&amp;rdquo; mode if &lt;em&gt;val&lt;/em&gt; is true, otherwise disable passive mode. Passive mode is on by default.</source>
          <target state="translated">&lt;em&gt;val&lt;/em&gt;がtrueの場合は「パッシブ」モードを有効にし、そうでない場合はパッシブモードを無効にします。パッシブモードはデフォルトでオンになっています。</target>
        </trans-unit>
        <trans-unit id="1a1830a9ad6b230d4772920b444e77e892a7b2c0" translate="yes" xml:space="preserve">
          <source>Enable &lt;em&gt;capability&lt;/em&gt; (see &lt;a href=&quot;https://tools.ietf.org/html/rfc5161.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 5161&lt;/strong&gt;&lt;/a&gt;). Most capabilities do not need to be enabled. Currently only the &lt;code&gt;UTF8=ACCEPT&lt;/code&gt; capability is supported (see &lt;a href=&quot;https://tools.ietf.org/html/rfc6855.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 6855&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;機能を&lt;/em&gt;有効にし&lt;em&gt;ます&lt;/em&gt;（&lt;a href=&quot;https://tools.ietf.org/html/rfc5161.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 5161を&lt;/strong&gt;&lt;/a&gt;参照）。ほとんどの機能を有効にする必要はありません。現在サポートされているのは &lt;code&gt;UTF8=ACCEPT&lt;/code&gt; 機能のみです（&lt;a href=&quot;https://tools.ietf.org/html/rfc6855.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 6855を&lt;/strong&gt;&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e64969c2a478b0193d345f61f0278bb04e5a5c3d" translate="yes" xml:space="preserve">
          <source>Enable TLS 1.3 post-handshake client authentication. Post-handshake auth is disabled by default and a server can only request a TLS client certificate during the initial handshake. When enabled, a server may request a TLS client certificate at any time after the handshake.</source>
          <target state="translated">TLS 1.3 ポストハンドシェイククライアント認証を有効にします。ハンドシェイク後認証はデフォルトでは無効になっており、サーバは最初のハンドシェイク中にのみ TLS クライアント証明書を要求することができます。有効にすると、ハンドシェイク後はいつでも TLS クライアント証明書を要求できます。</target>
        </trans-unit>
        <trans-unit id="5b01e8ffd8306cea3683a91d93d4207b25a77ccd" translate="yes" xml:space="preserve">
          <source>Enable a server to accept connections. If &lt;em&gt;backlog&lt;/em&gt; is specified, it must be at least 0 (if it is lower, it is set to 0); it specifies the number of unaccepted connections that the system will allow before refusing new connections. If not specified, a default reasonable value is chosen.</source>
          <target state="translated">サーバーが接続を受け入れることができるようにします。&lt;em&gt;バックログ&lt;/em&gt;が指定されている場合、それは少なくとも0でなければなりません（それより低い場合、0に設定されます）。新しい接続を拒否する前にシステムが許可する、受け入れられない接続の数を指定します。指定しない場合、デフォルトの妥当な値が選択されます。</target>
        </trans-unit>
        <trans-unit id="971896ffb7e3ebd15d517c1f88efeb1e585f6fb1" translate="yes" xml:space="preserve">
          <source>Enable automatic garbage collection.</source>
          <target state="translated">自動ゴミ収集を有効にします。</target>
        </trans-unit>
        <trans-unit id="eacc85becdea9d34a7f0f87cf3c7f4659f303bdb" translate="yes" xml:space="preserve">
          <source>Enable keyboard traversal for a toplevel window containing this notebook.</source>
          <target state="translated">このノートブックを含むトップレベル ウィンドウのキーボード トラバーサルを有効にします。</target>
        </trans-unit>
        <trans-unit id="eeb17b55c47c064f0c885ac6edcfc504029b5711" translate="yes" xml:space="preserve">
          <source>Enable or disable automatic calls to &lt;code&gt;add_history()&lt;/code&gt; when reading input via readline. The &lt;em&gt;enabled&lt;/em&gt; argument should be a Boolean value that when true, enables auto history, and that when false, disables auto history.</source>
          <target state="translated">readlineを介して入力を読み取るときの &lt;code&gt;add_history()&lt;/code&gt; の自動呼び出しを有効または無効にします。&lt;em&gt;有効な&lt;/em&gt;引数がtrueの場合、自動履歴を可能にすることをブール値であること、および偽が、自動履歴を無効にしたときにすることをすべきです。</target>
        </trans-unit>
        <trans-unit id="26a73bd72aa4da39ed18ebf87aa69760fe6a344f" translate="yes" xml:space="preserve">
          <source>Enable or disable the debug mode.</source>
          <target state="translated">デバッグモードを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="befd2646a620e600335d49ff83a819d286b6b876" translate="yes" xml:space="preserve">
          <source>Enable stricter semantics for mixing floats and Decimals.</source>
          <target state="translated">浮動小数点と小数を混合するためのより厳格なセマンティクスを有効にします。</target>
        </trans-unit>
        <trans-unit id="f9377cf43de0047335652dca6650eb8fd8f870ef" translate="yes" xml:space="preserve">
          <source>Enable the breakpoints specified.</source>
          <target state="translated">指定したブレークポイントを有効にします。</target>
        </trans-unit>
        <trans-unit id="78484a7c1326bcc3e5583395ac67b8a7c9642313" translate="yes" xml:space="preserve">
          <source>Enable the fault handler: install handlers for the &lt;code&gt;SIGSEGV&lt;/code&gt;, &lt;code&gt;SIGFPE&lt;/code&gt;, &lt;code&gt;SIGABRT&lt;/code&gt;, &lt;code&gt;SIGBUS&lt;/code&gt; and &lt;code&gt;SIGILL&lt;/code&gt; signals to dump the Python traceback. If &lt;em&gt;all_threads&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, produce tracebacks for every running thread. Otherwise, dump only the current thread.</source>
          <target state="translated">ハンドラをインストール：障害ハンドラを有効に &lt;code&gt;SIGSEGV&lt;/code&gt; 、 &lt;code&gt;SIGFPE&lt;/code&gt; 、 &lt;code&gt;SIGABRT&lt;/code&gt; 、 &lt;code&gt;SIGBUS&lt;/code&gt; および &lt;code&gt;SIGILL&lt;/code&gt; は、 Pythonのトレースバックをダンプするための信号を。&lt;em&gt;all_threads&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; の場合、実行中のすべてのスレッドに対してトレースバックを生成します。それ以外の場合は、現在のスレッドのみをダンプします。</target>
        </trans-unit>
        <trans-unit id="00219e9a1b9ff26ad0b40fd3c6c39fe8683fdcc9" translate="yes" xml:space="preserve">
          <source>Enables CAN FD support in a CAN_RAW socket. This is disabled by default. This allows your application to send both CAN and CAN FD frames; however, you must accept both CAN and CAN FD frames when reading from the socket.</source>
          <target state="translated">CAN_RAW ソケットでの CAN FD サポートを有効にします。デフォルトでは無効になっています。これにより、アプリケーションはCANとCAN FDの両方のフレームを送信することができますが、ソケットから読み出す際には、CANとCAN FDの両方のフレームを受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="b48d635867970782604405e57297e025f0d6a89c" translate="yes" xml:space="preserve">
          <source>Enables workarounds for various bugs present in other SSL implementations. This option is set by default. It does not necessarily set the same flags as OpenSSL&amp;rsquo;s &lt;code&gt;SSL_OP_ALL&lt;/code&gt; constant.</source>
          <target state="translated">他のSSL実装に存在するさまざまなバグの回避策を有効にします。このオプションはデフォルトで設定されています。OpenSSLの &lt;code&gt;SSL_OP_ALL&lt;/code&gt; 定数と同じフラグを設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1cdca8499ba0f0ffddfe7036f37fdfd9bd58cea9" translate="yes" xml:space="preserve">
          <source>Enabling debug mode</source>
          <target state="translated">デバッグモードを有効にする</target>
        </trans-unit>
        <trans-unit id="07af2f6e3bb3a4e462e895058fcbc45334a604b2" translate="yes" xml:space="preserve">
          <source>Enabling the &lt;em&gt;allow_dotted_names&lt;/em&gt; option allows intruders to access your module&amp;rsquo;s global variables and may allow intruders to execute arbitrary code on your machine. Only use this example only within a secure, closed network.</source>
          <target state="translated">&lt;em&gt;allow_dotted_names&lt;/em&gt;オプションを有効にすると、侵入者がモジュールのグローバル変数にアクセスできるようになり、侵入者がマシン上で任意のコードを実行できるようになる可能性があります。この例は、安全な閉じたネットワーク内でのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="c7b1af61e74fb0fcb6656cb2909de6d3c9f228d8" translate="yes" xml:space="preserve">
          <source>Enabling the &lt;em&gt;allow_dotted_names&lt;/em&gt; option allows intruders to access your module&amp;rsquo;s global variables and may allow intruders to execute arbitrary code on your machine. Only use this option on a secure, closed network.</source>
          <target state="translated">&lt;em&gt;allow_dotted_names&lt;/em&gt;オプションを有効にすると、侵入者がモジュールのグローバル変数にアクセスできるようになり、侵入者がマシン上で任意のコードを実行できるようになる可能性があります。このオプションは、安全な閉じたネットワークでのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="a19099a826dd8a9592dea4c03d95ca189ffd83fd" translate="yes" xml:space="preserve">
          <source>Encapsulate an XML error or warning. This class can contain basic error or warning information from either the XML parser or the application: it can be subclassed to provide additional functionality or to add localization. Note that although the handlers defined in the &lt;a href=&quot;xml.sax.handler#xml.sax.handler.ErrorHandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; interface receive instances of this exception, it is not required to actually raise the exception &amp;mdash; it is also useful as a container for information.</source>
          <target state="translated">XMLエラーまたは警告をカプセル化します。このクラスには、XMLパーサーまたはアプリケーションからの基本的なエラーまたは警告情報を含めることができます。サブクラス化して、追加の機能を提供したり、ローカリゼーションを追加したりできます。&lt;a href=&quot;xml.sax.handler#xml.sax.handler.ErrorHandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt;インターフェースで定義されたハンドラーはこの例外のインスタンスを受け取りますが、実際に例外を発生させる必要はありません&amp;mdash;情報のコンテナーとしても役立つことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7b89d059b48fe1d6ce07ae4ebf8b9b1f65d5439b" translate="yes" xml:space="preserve">
          <source>Encapsulates the asynchronous execution of a callable. &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; instances are created by &lt;a href=&quot;#concurrent.futures.Executor.submit&quot;&gt;&lt;code&gt;Executor.submit()&lt;/code&gt;&lt;/a&gt; and should not be created directly except for testing.</source>
          <target state="translated">呼び出し可能オブジェクトの非同期実行をカプセル化します。&lt;a href=&quot;#concurrent.futures.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;インスタンスは&lt;a href=&quot;#concurrent.futures.Executor.submit&quot;&gt; &lt;code&gt;Executor.submit()&lt;/code&gt; &lt;/a&gt;によって作成され、テストを除いて直接作成しないでください。</target>
        </trans-unit>
        <trans-unit id="3fc3b238ce3cff3109f5fca3d21d66f397859fba" translate="yes" xml:space="preserve">
          <source>Encapsulation of the information needed by the &lt;a href=&quot;#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt; to read entities.</source>
          <target state="translated">&lt;a href=&quot;#xml.sax.xmlreader.XMLReader&quot;&gt; &lt;code&gt;XMLReader&lt;/code&gt; &lt;/a&gt;がエンティティを読み取るために必要な情報のカプセル化。</target>
        </trans-unit>
        <trans-unit id="14f77877197d80a81f16a011d2af74a80b57468e" translate="yes" xml:space="preserve">
          <source>Enclosing characters in quotes preserve the literal value of all characters within the quotes;</source>
          <target state="translated">引用符で囲んだ文字は、引用符内のすべての文字のリテラル値を保持します。</target>
        </trans-unit>
        <trans-unit id="88ad97909485c7dd6989f04a4e8fcd2dc6f0fac1" translate="yes" xml:space="preserve">
          <source>Enclosing characters in quotes which are not part of &lt;a href=&quot;#shlex.shlex.escapedquotes&quot;&gt;&lt;code&gt;escapedquotes&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;&quot;'&quot;&lt;/code&gt;) preserve the literal value of all characters within the quotes;</source>
          <target state="translated">&lt;a href=&quot;#shlex.shlex.escapedquotes&quot;&gt; &lt;code&gt;escapedquotes&lt;/code&gt; &lt;/a&gt;れた引用符の一部ではない引用符で文字を囲む（例： &lt;code&gt;&quot;'&quot;&lt;/code&gt; ）と、引用符内のすべての文字のリテラル値が保持されます。</target>
        </trans-unit>
        <trans-unit id="d4821252d35584af9326a6e7f60f1d73b77d48c3" translate="yes" xml:space="preserve">
          <source>Enclosing characters in quotes which are part of &lt;a href=&quot;#shlex.shlex.escapedquotes&quot;&gt;&lt;code&gt;escapedquotes&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;'&quot;'&lt;/code&gt;) preserves the literal value of all characters within the quotes, with the exception of the characters mentioned in &lt;a href=&quot;#shlex.shlex.escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt;. The escape characters retain its special meaning only when followed by the quote in use, or the escape character itself. Otherwise the escape character will be considered a normal character.</source>
          <target state="translated">&lt;a href=&quot;#shlex.shlex.escapedquotes&quot;&gt; &lt;code&gt;escapedquotes&lt;/code&gt; &lt;/a&gt;れた引用符の一部である引用符で文字を囲む（例： &lt;code&gt;'&quot;'&lt;/code&gt; ）は、&lt;a href=&quot;#shlex.shlex.escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; で&lt;/a&gt;言及されている文字を除いて、引用符内のすべての文字のリテラル値を保持します。エスケープ文字は、使用、またはエスケープ文字自体。それ以外の場合、エスケープ文字は通常の文字と見なされます。</target>
        </trans-unit>
        <trans-unit id="8e3ef7fb5bbf1067d36ca7d114791bb1ecfe2094" translate="yes" xml:space="preserve">
          <source>Encode &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;s&lt;/em&gt; using the URL- and filesystem-safe alphabet, which substitutes &lt;code&gt;-&lt;/code&gt; instead of &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; instead of &lt;code&gt;/&lt;/code&gt; in the standard Base64 alphabet, and return the encoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;. The result can still contain &lt;code&gt;=&lt;/code&gt;.</source>
          <target state="translated">エンコード&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイト状物体&lt;/a&gt;&lt;em&gt;Sは&lt;/em&gt;、URL-とファイルシステム安全なアルファベットを使用している代替 &lt;code&gt;-&lt;/code&gt; の代わりに &lt;code&gt;+&lt;/code&gt; と &lt;code&gt;_&lt;/code&gt; の代わりに &lt;code&gt;/&lt;/code&gt; 標準のBase64アルファベットに、符号化された戻り&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。結果には依然として &lt;code&gt;=&lt;/code&gt; が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bfbd8dc1abad46fd0071384996480ac840443421" translate="yes" xml:space="preserve">
          <source>Encode &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;s&lt;/em&gt; using the standard Base64 alphabet and return the encoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エンコードは、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;オブジェクトのようにバイト&lt;/a&gt;&lt;em&gt;の&lt;/em&gt;標準のBase64アルファベットを使用して符号化された戻り&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="84e671106e5fd09bcba9090332501ac45ae84724" translate="yes" xml:space="preserve">
          <source>Encode &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like&lt;/a&gt;&lt;em&gt;filename&lt;/em&gt; to the filesystem encoding with &lt;code&gt;'surrogateescape'&lt;/code&gt; error handler, or &lt;code&gt;'strict'&lt;/code&gt; on Windows; return &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; unchanged.</source>
          <target state="translated">エンコード&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;パスのような&lt;/a&gt;&lt;em&gt;ファイル名&lt;/em&gt;を持つファイルシステムエンコーディングに &lt;code&gt;'surrogateescape'&lt;/code&gt; エラーハンドラ、または &lt;code&gt;'strict'&lt;/code&gt; Windows上で。変更されていない&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="ffdf7198a76c3276541a5db4c0b0209534929dca" translate="yes" xml:space="preserve">
          <source>Encode &lt;em&gt;s&lt;/em&gt; using the &lt;code&gt;ASCII&lt;/code&gt; codec and the &lt;code&gt;surrogateescape&lt;/code&gt; error handler, and pass it to the &lt;em&gt;write&lt;/em&gt; method of the &lt;em&gt;outfp&lt;/em&gt; passed to the &lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s constructor.</source>
          <target state="translated">エンコード&lt;em&gt;の&lt;/em&gt;使用 &lt;code&gt;ASCII&lt;/code&gt; のコーデックと &lt;code&gt;surrogateescape&lt;/code&gt; のエラーハンドラを、そしてそれを渡す&lt;em&gt;書き込み&lt;/em&gt;の方法&lt;em&gt;outfp&lt;/em&gt;に渡さ&lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; &lt;/a&gt;のコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="6e685faa81657b0e3f36d4d3a4f45234790e538f" translate="yes" xml:space="preserve">
          <source>Encode a message header into an RFC-compliant format, possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings.</source>
          <target state="translated">メッセージヘッダをRFCに準拠したフォーマットにエンコードし、長い行をラップして、ASCII以外の部分をbase64または引用符で印刷可能なエンコーディングにカプセル化することもあります。</target>
        </trans-unit>
        <trans-unit id="ba9ada320fca1e8cb2142e1346d247f9f806f542" translate="yes" xml:space="preserve">
          <source>Encode and decode MIME base64 data</source>
          <target state="translated">MIME base64 データのエンコードとデコード</target>
        </trans-unit>
        <trans-unit id="7ab581d597f3bf448a02f8351b29151a923e6e6f" translate="yes" xml:space="preserve">
          <source>Encode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;b&lt;/em&gt; using Ascii85 and return the encoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Ascii85を使用して&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;&lt;em&gt;b&lt;/em&gt;をエンコードし、エンコードされたバイトを返し&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d11216cbf678c1763da91fd2fb9b0f745134c5fd" translate="yes" xml:space="preserve">
          <source>Encode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;b&lt;/em&gt; using base85 (as used in e.g. git-style binary diffs) and return the encoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">base85を使用して&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトライクなオブジェクト&lt;/a&gt;&lt;em&gt;b&lt;/em&gt;（例：gitスタイルのバイナリdiffで使用される）をエンコードし、エンコードされた&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="bf1fdba47a42f7a6afd6ab89d4bca80118d00ef3" translate="yes" xml:space="preserve">
          <source>Encode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;s&lt;/em&gt; using Base16 and return the encoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">符号化&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;オブジェクトのようにバイト&lt;/a&gt;&lt;em&gt;の&lt;/em&gt; Base16を使用して符号化された戻り&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d56aa77069a6187dbe9ae10ef72b7abeab315a8e" translate="yes" xml:space="preserve">
          <source>Encode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;s&lt;/em&gt; using Base32 and return the encoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">符号化&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;オブジェクトのようにバイト&lt;/a&gt;&lt;em&gt;の&lt;/em&gt; Base32を使用して符号化された戻り&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="635ad9b339c141c690488f6ac82847a524ee904f" translate="yes" xml:space="preserve">
          <source>Encode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;s&lt;/em&gt; using Base64 and return the encoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">符号化&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;オブジェクトのようにバイト&lt;/a&gt;&lt;em&gt;の&lt;/em&gt; Base64でを使用して符号化された戻り&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83850d70b6021bfeec0e6a1e79a7dc069defb565" translate="yes" xml:space="preserve">
          <source>Encode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;s&lt;/em&gt;, which can contain arbitrary binary data, and return &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; containing the base64-encoded data, with newlines (&lt;code&gt;b'\n'&lt;/code&gt;) inserted after every 76 bytes of output, and ensuring that there is a trailing newline, as per &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt; (MIME).</source>
          <target state="translated">任意のバイナリデータを含むことができる&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object &lt;/a&gt;&lt;em&gt;sを&lt;/em&gt;エンコードし、base64でエンコードされたデータを含む&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;を返します。出力の76バイトごとに改行（ &lt;code&gt;b'\n'&lt;/code&gt; ）が挿入され、末尾に改行があることを確認します、&lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt;（MIME）に従って。</target>
        </trans-unit>
        <trans-unit id="ae13ec2bd5725d886fbbd75e44ed1df1c2ae02ed" translate="yes" xml:space="preserve">
          <source>Encode the contents of the &lt;em&gt;input&lt;/em&gt; file and write the resulting quoted-printable data to the &lt;em&gt;output&lt;/em&gt; file. &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; must be &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;binary file objects&lt;/a&gt;. &lt;em&gt;quotetabs&lt;/em&gt;, a non-optional flag which controls whether to encode embedded spaces and tabs; when true it encodes such embedded whitespace, and when false it leaves them unencoded. Note that spaces and tabs appearing at the end of lines are always encoded, as per &lt;a href=&quot;https://tools.ietf.org/html/rfc1521.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 1521&lt;/strong&gt;&lt;/a&gt;. &lt;em&gt;header&lt;/em&gt; is a flag which controls if spaces are encoded as underscores as per &lt;a href=&quot;https://tools.ietf.org/html/rfc1522.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1522&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;入力&lt;/em&gt;ファイルの内容をエンコードし、結果のquoted-printableデータを&lt;em&gt;出力&lt;/em&gt;ファイルに書き込みます。&lt;em&gt;入力&lt;/em&gt;と&lt;em&gt;出力&lt;/em&gt;は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;バイナリファイルオブジェクトで&lt;/a&gt;なければなりません。&lt;em&gt;quotetabs&lt;/em&gt;は、埋め込まれたスペースとタブをエンコードするかどうかを制御するオプションのフラグです。 trueの場合、そのような埋め込まれた空白をエンコードし、falseの場合、エンコードされないままにします。&lt;a href=&quot;https://tools.ietf.org/html/rfc1521.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 1521&lt;/strong&gt;&lt;/a&gt;に従って、行末に表示されるスペースとタブは常にエンコードされることに注意してください。&lt;em&gt;header&lt;/em&gt;は、&lt;a href=&quot;https://tools.ietf.org/html/rfc1522.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1522&lt;/strong&gt;&lt;/a&gt;に従ってスペースがアンダースコアとしてエンコードされるかどうかを制御するフラグです。</target>
        </trans-unit>
        <trans-unit id="6b1af585911b3e2c2490aef5a95b4109bcbec15d" translate="yes" xml:space="preserve">
          <source>Encode the contents of the binary &lt;em&gt;input&lt;/em&gt; file and write the resulting base64 encoded data to the &lt;em&gt;output&lt;/em&gt; file. &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; must be &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt;. &lt;em&gt;input&lt;/em&gt; will be read until &lt;code&gt;input.read()&lt;/code&gt; returns an empty bytes object. &lt;a href=&quot;#base64.encode&quot;&gt;&lt;code&gt;encode()&lt;/code&gt;&lt;/a&gt; inserts a newline character (&lt;code&gt;b'\n'&lt;/code&gt;) after every 76 bytes of the output, as well as ensuring that the output always ends with a newline, as per &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt; (MIME).</source>
          <target state="translated">バイナリ&lt;em&gt;入力&lt;/em&gt;ファイルの内容をエンコードし、結果のbase64エンコードデータを&lt;em&gt;出力&lt;/em&gt;ファイルに書き込みます。&lt;em&gt;入力&lt;/em&gt;と&lt;em&gt;出力&lt;/em&gt;は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクトで&lt;/a&gt;なければなりません。&lt;em&gt;input&lt;/em&gt;は、 &lt;code&gt;input.read()&lt;/code&gt; が空のbytesオブジェクトを返すまで読み込まれます。&lt;a href=&quot;#base64.encode&quot;&gt; &lt;code&gt;encode()&lt;/code&gt; &lt;/a&gt;は、出力の76バイトごとに改行文字（ &lt;code&gt;b'\n'&lt;/code&gt; ）を挿入し、&lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt;（MIME）に従って、出力が常に改行で終了するようにします。</target>
        </trans-unit>
        <trans-unit id="5ece4908e842d1a57462d3e13321736479cca5fc" translate="yes" xml:space="preserve">
          <source>Encode the given object, &lt;em&gt;o&lt;/em&gt;, and yield each string representation as available. For example:</source>
          <target state="translated">指定されたオブジェクト&lt;em&gt;oを&lt;/em&gt;エンコードし、利用可能な各文字列表現を生成します。例えば：</target>
        </trans-unit>
        <trans-unit id="4edd62a7f69a53a1d9591005cca6ad7e417e11cf" translate="yes" xml:space="preserve">
          <source>Encode the string &lt;em&gt;s&lt;/em&gt; according to &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;. Optional &lt;em&gt;charset&lt;/em&gt; and &lt;em&gt;language&lt;/em&gt;, if given is the character set name and language name to use. If neither is given, &lt;em&gt;s&lt;/em&gt; is returned as-is. If &lt;em&gt;charset&lt;/em&gt; is given but &lt;em&gt;language&lt;/em&gt; is not, the string is encoded using the empty string for &lt;em&gt;language&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;に従って文字列&lt;em&gt;sを&lt;/em&gt;エンコードします。オプションの&lt;em&gt;文字セット&lt;/em&gt;と&lt;em&gt;言語&lt;/em&gt;（指定されている場合）は、使用する文字セット名と言語名です。どちらも指定されていない場合、&lt;em&gt;s&lt;/em&gt;はそのまま返されます。場合は&lt;em&gt;文字セットが&lt;/em&gt;与えられているが、&lt;em&gt;言語が&lt;/em&gt;ない場合、文字列は空の文字列を使用して符号化され&lt;em&gt;た言語を&lt;/em&gt;。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8df3651ff60e834a39b4df93aa682f9e7023628" translate="yes" xml:space="preserve">
          <source>Encoder / decoder</source>
          <target state="translated">エンコーダ/デコーダ</target>
        </trans-unit>
        <trans-unit id="0b2560b8670c5d6b00522cd4ae4b4d4307d0b2be" translate="yes" xml:space="preserve">
          <source>Encoders and Decoders</source>
          <target state="translated">エンコーダーとデコーダー</target>
        </trans-unit>
        <trans-unit id="d71cfe7f4cafe8422a37c04504b23989f4687ef0" translate="yes" xml:space="preserve">
          <source>Encodes &lt;em&gt;obj&lt;/em&gt; using the codec registered for &lt;em&gt;encoding&lt;/em&gt;.</source>
          <target state="translated">エンコード&lt;em&gt;OBJ&lt;/em&gt; codecに登録使用して&lt;em&gt;エンコーディングを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5a0794f1f14ae2870d08446eefc407ddf1f0233a" translate="yes" xml:space="preserve">
          <source>Encodes &lt;em&gt;object&lt;/em&gt; (taking the current state of the encoder into account) and returns the resulting encoded object. If this is the last call to &lt;a href=&quot;#codecs.encode&quot;&gt;&lt;code&gt;encode()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;final&lt;/em&gt; must be true (the default is false).</source>
          <target state="translated">&lt;em&gt;オブジェクトを&lt;/em&gt;エンコードし（エンコーダーの現在の状態を考慮に入れて）、結果のエンコードされたオブジェクトを返します。これが&lt;a href=&quot;#codecs.encode&quot;&gt; &lt;code&gt;encode()&lt;/code&gt; の&lt;/a&gt;最後の呼び出しである場合、&lt;em&gt;final&lt;/em&gt;はtrueでなければなりません（デフォルトはfalseです）。</target>
        </trans-unit>
        <trans-unit id="43b6fc9174410620829b5e6f78b9b2c8513e41c1" translate="yes" xml:space="preserve">
          <source>Encodes the facility and priority into an integer. You can pass in strings or integers - if strings are passed, internal mapping dictionaries are used to convert them to integers.</source>
          <target state="translated">ファシリティと優先度を整数にエンコードします。文字列または整数を渡すことができます-文字列を渡した場合は、内部のマッピング辞書を使用して整数に変換します。</target>
        </trans-unit>
        <trans-unit id="378f8c352c46252bbb75391a25357f76d573bd74" translate="yes" xml:space="preserve">
          <source>Encodes the object &lt;em&gt;input&lt;/em&gt; and returns a tuple (output object, length consumed). For instance, &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encoding&lt;/a&gt; converts a string object to a bytes object using a particular character set encoding (e.g., &lt;code&gt;cp1252&lt;/code&gt; or &lt;code&gt;iso-8859-1&lt;/code&gt;).</source>
          <target state="translated">オブジェクト&lt;em&gt;入力&lt;/em&gt;をエンコードし、タプル（出力オブジェクト、消費された長さ）を返します。たとえば、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;テキストエンコーディングは&lt;/a&gt;、特定の文字セットエンコーディング（たとえば、 &lt;code&gt;cp1252&lt;/code&gt; または &lt;code&gt;iso-8859-1&lt;/code&gt; ）を使用して、文字列オブジェクトをバイトオブジェクトに変換します。</target>
        </trans-unit>
        <trans-unit id="fc1b7b9683d09c85651ce4de2401dc8d304b150a" translate="yes" xml:space="preserve">
          <source>Encodes the payload into base64 form and sets the &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header to &lt;code&gt;base64&lt;/code&gt;. This is a good encoding to use when most of your payload is unprintable data since it is a more compact form than quoted-printable. The drawback of base64 encoding is that it renders the text non-human readable.</source>
          <target state="translated">ペイロードをbase64形式にエンコードし、&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;ヘッダーを &lt;code&gt;base64&lt;/code&gt; に設定します。これは、quoted-printableよりもコンパクトな形式であるため、ペイロードのほとんどが印刷不可能なデータである場合に使用するのに適したエンコーディングです。base64エンコーディングの欠点は、テキストが人間が読めないようにすることです。</target>
        </trans-unit>
        <trans-unit id="95c8e0549c3213a2dda1d9312f81c01e867a1e92" translate="yes" xml:space="preserve">
          <source>Encodes the payload into quoted-printable form and sets the &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header to &lt;code&gt;quoted-printable&lt;/code&gt;&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. This is a good encoding to use when most of your payload is normal printable data, but contains a few unprintable characters.</source>
          <target state="translated">ペイロードをquoted-printable形式にエンコードし、&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;ヘッダーを &lt;code&gt;quoted-printable&lt;/code&gt; &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1に設定し&lt;/a&gt;ます。これは、ペイロードのほとんどが通常の印刷可能なデータであるが、印刷できない文字がいくつか含まれている場合に使用するのに適したエンコーディングです。</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="596bb52694c422af5f31e595be194a5b80ef5824" translate="yes" xml:space="preserve">
          <source>Encoding basic Python object hierarchies:</source>
          <target state="translated">Pythonの基本的なオブジェクト階層をエンコードします。</target>
        </trans-unit>
        <trans-unit id="e01623560da289b520db5d6a7d88c0bbc24861ce" translate="yes" xml:space="preserve">
          <source>Encoding of PalmOS 3.5.</source>
          <target state="translated">PalmOS 3.5のエンコード。</target>
        </trans-unit>
        <trans-unit id="b04bd66c21e22fbff9114ec0c6134bbca1a0b6a8" translate="yes" xml:space="preserve">
          <source>Encoding suitable as the contents of a Unicode literal in ASCII-encoded Python source code, except that quotes are not escaped. Decode from Latin-1 source code. Beware that Python source code actually uses UTF-8 by default.</source>
          <target state="translated">引用符がエスケープされないことを除いて、ASCIIエンコードされたPythonソースコードのUnicodeリテラルの内容に適したエンコード。Latin-1のソースコードからデコードします。Python のソースコードはデフォルトで UTF-8 を使用しているので注意してください。</target>
        </trans-unit>
        <trans-unit id="7aec5e156e6be9b6aed99321306edff96823d8f5" translate="yes" xml:space="preserve">
          <source>Encoding used to encode method arguments (Unicode strings and characters). The encoding attribute is inherited from the parent window when a subwindow is created, for example with &lt;a href=&quot;#curses.window.subwin&quot;&gt;&lt;code&gt;window.subwin()&lt;/code&gt;&lt;/a&gt;. By default, the locale encoding is used (see &lt;a href=&quot;locale#locale.getpreferredencoding&quot;&gt;&lt;code&gt;locale.getpreferredencoding()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">メソッドの引数（Unicode文字列と文字）のエンコードに使用されるエンコード。エンコーディング属性は、たとえば&lt;a href=&quot;#curses.window.subwin&quot;&gt; &lt;code&gt;window.subwin()&lt;/code&gt; を使用&lt;/a&gt;してサブウィンドウが作成されるときに、親ウィンドウから継承されます。デフォルトでは、ロケールエンコーディングが使用されます（&lt;a href=&quot;locale#locale.getpreferredencoding&quot;&gt; &lt;code&gt;locale.getpreferredencoding()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1a47ec39576a907fb4fc37fec210dc585edad95c" translate="yes" xml:space="preserve">
          <source>Encodings and Unicode</source>
          <target state="translated">エンコーディングとユニコード</target>
        </trans-unit>
        <trans-unit id="edf16238133674f34dc062d2161f4e728de8384b" translate="yes" xml:space="preserve">
          <source>Encodings are first looked up in the registry&amp;rsquo;s cache. If not found, the list of registered search functions is scanned. If no &lt;a href=&quot;#codecs.CodecInfo&quot;&gt;&lt;code&gt;CodecInfo&lt;/code&gt;&lt;/a&gt; object is found, a &lt;a href=&quot;exceptions#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; is raised. Otherwise, the &lt;a href=&quot;#codecs.CodecInfo&quot;&gt;&lt;code&gt;CodecInfo&lt;/code&gt;&lt;/a&gt; object is stored in the cache and returned to the caller.</source>
          <target state="translated">エンコーディングは、最初にレジストリのキャッシュで検索されます。見つからない場合は、登録されている検索機能のリストがスキャンされます。&lt;a href=&quot;#codecs.CodecInfo&quot;&gt; &lt;code&gt;CodecInfo&lt;/code&gt; &lt;/a&gt;オブジェクトが見つからない場合、&lt;a href=&quot;exceptions#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; &lt;/a&gt;が発生します。それ以外の場合、&lt;a href=&quot;#codecs.CodecInfo&quot;&gt; &lt;code&gt;CodecInfo&lt;/code&gt; &lt;/a&gt;オブジェクトはキャッシュに格納され、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="630b425d9a00bb04751b2932f13d862908b045cf" translate="yes" xml:space="preserve">
          <source>Encrypted password</source>
          <target state="translated">暗号化されたパスワード</target>
        </trans-unit>
        <trans-unit id="a2bb9d34b8a1a79665858d354585cf147e0dee4e" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">End</target>
        </trans-unit>
        <trans-unit id="1922f8549c83f9841a0a3a96665a811403626eb9" translate="yes" xml:space="preserve">
          <source>End of medium</source>
          <target state="translated">媒体の終わり</target>
        </trans-unit>
        <trans-unit id="4de459b167bc17b3a0e6bbfc5dba938d1d966746" translate="yes" xml:space="preserve">
          <source>End of text</source>
          <target state="translated">テキストの終わり</target>
        </trans-unit>
        <trans-unit id="8c7f307345f3f9f062b9e039589289044820b04a" translate="yes" xml:space="preserve">
          <source>End of transmission</source>
          <target state="translated">送信終了</target>
        </trans-unit>
        <trans-unit id="b750001d7ab130d7ac487cd2ca42bd5cd9f92224" translate="yes" xml:space="preserve">
          <source>End the scope of a prefix-URI mapping.</source>
          <target state="translated">prefix-URIマッピングのスコープを終了します。</target>
        </trans-unit>
        <trans-unit id="96a5fa3659b07bd3bd2f4d5beb5509f96a53c4a4" translate="yes" xml:space="preserve">
          <source>End transmission block</source>
          <target state="translated">エンドトランスミッションブロック</target>
        </trans-unit>
        <trans-unit id="e7a088c0208f7d8311fb5b3d1e0349a153b3d9ab" translate="yes" xml:space="preserve">
          <source>Engineering notation has an exponent which is a multiple of 3. This can leave up to 3 digits to the left of the decimal place and may require the addition of either one or two trailing zeros.</source>
          <target state="translated">工学表記では、指数は3の倍数になります。 これは小数点の左に最大3桁の数字を残すことができ、1つまたは2つの末尾のゼロを追加する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="649df08a448ee3fa90f3746baaf6b0907df42c91" translate="yes" xml:space="preserve">
          <source>English</source>
          <target state="translated">English</target>
        </trans-unit>
        <trans-unit id="dcb1a009593a59322d64d1a3b6206a794460cc47" translate="yes" xml:space="preserve">
          <source>Enqueues the record on the queue using &lt;code&gt;put_nowait()&lt;/code&gt;; you may want to override this if you want to use blocking behaviour, or a timeout, or a customized queue implementation.</source>
          <target state="translated">put_nowait &lt;code&gt;put_nowait()&lt;/code&gt; を使用して、キューにレコードをエンキューします。ブロッキング動作、タイムアウト、またはカスタマイズされたキューの実装を使用する場合は、これをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="2888af4186691fc661359ab6d5971e729720db66" translate="yes" xml:space="preserve">
          <source>Enqueues the result of preparing the LogRecord. Should an exception occur (e.g. because a bounded queue has filled up), the &lt;a href=&quot;logging#logging.Handler.handleError&quot;&gt;&lt;code&gt;handleError()&lt;/code&gt;&lt;/a&gt; method is called to handle the error. This can result in the record silently being dropped (if &lt;code&gt;logging.raiseExceptions&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;) or a message printed to &lt;code&gt;sys.stderr&lt;/code&gt; (if &lt;code&gt;logging.raiseExceptions&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;).</source>
          <target state="translated">LogRecordの準備の結果をエンキューします。例外が発生した場合（たとえば、境界キューがいっぱいになったため）、エラーを処理するために&lt;a href=&quot;logging#logging.Handler.handleError&quot;&gt; &lt;code&gt;handleError()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されます。これにより、レコードがサイレントに削除される（ &lt;code&gt;logging.raiseExceptions&lt;/code&gt; が &lt;code&gt;False&lt;/code&gt; の場合）か、 &lt;code&gt;sys.stderr&lt;/code&gt; に出力されるメッセージ（ &lt;code&gt;logging.raiseExceptions&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合）になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="aa2754429737b3533e1ef0357b5a96fb4a6836c9" translate="yes" xml:space="preserve">
          <source>Enquiry, goes with &lt;code&gt;ACK&lt;/code&gt; flow control</source>
          <target state="translated">問い合わせ、 &lt;code&gt;ACK&lt;/code&gt; フロー制御に対応</target>
        </trans-unit>
        <trans-unit id="ae5b77717b5f7a8d678dfc4e7f6ca1d4b33f96da" translate="yes" xml:space="preserve">
          <source>Ensure all logging output has been flushed. This version does nothing and is intended to be implemented by subclasses.</source>
          <target state="translated">すべてのロギング出力がフラッシュされたことを確認します。このバージョンは何もせず、サブクラスによって実装されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="97cf15e5a9cea6dea99ae04c2ca52a01855adc4b" translate="yes" xml:space="preserve">
          <source>Ensure that &lt;em&gt;item&lt;/em&gt; is visible.</source>
          <target state="translated">&lt;em&gt;アイテム&lt;/em&gt;が表示されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="9aa26e76cdc98319b44465edafcf37d57d6abbaa" translate="yes" xml:space="preserve">
          <source>Ensure that all arguments to &lt;code&gt;Process.__init__()&lt;/code&gt; are picklable. Also, if you subclass &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; then make sure that instances will be picklable when the &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;Process.start&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">&lt;code&gt;Process.__init__()&lt;/code&gt; へのすべての引数がピクル可能であることを確認してください。また、&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;をサブクラス化する場合は、&lt;a href=&quot;#multiprocessing.Process.start&quot;&gt; &lt;code&gt;Process.start&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されたときにインスタンスがピクル可能になることを確認してください。</target>
        </trans-unit>
        <trans-unit id="b3c36c2f4b34cceda516e9a8a5706327c94c9ce7" translate="yes" xml:space="preserve">
          <source>Ensure that the arguments to the methods of proxies are picklable.</source>
          <target state="translated">プロキシのメソッドの引数がピック可能であることを確認します。</target>
        </trans-unit>
        <trans-unit id="762ec42796d5195f94b6f19b0a871c17688f7448" translate="yes" xml:space="preserve">
          <source>Ensures that enough disk space is allocated for the file specified by &lt;em&gt;fd&lt;/em&gt; starting from &lt;em&gt;offset&lt;/em&gt; and continuing for &lt;em&gt;len&lt;/em&gt; bytes.</source>
          <target state="translated">十分なディスク容量は、で指定したファイルに割り当てられていることを保証し&lt;em&gt;、FD&lt;/em&gt;から開始&lt;em&gt;オフセット&lt;/em&gt;との継続的&lt;em&gt;LEN&lt;/em&gt;バイト。</target>
        </trans-unit>
        <trans-unit id="b7eb63354554772150750f9cedad21f70a5cb44a" translate="yes" xml:space="preserve">
          <source>Ensuring unique enumeration values</source>
          <target state="translated">列挙値の一意性の確保</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="8fa2a05b9d6104dc8feb95f4c534efae63c8fab5" translate="yes" xml:space="preserve">
          <source>Enter &lt;em&gt;string&lt;/em&gt; in the table of &amp;ldquo;interned&amp;rdquo; strings and return the interned string &amp;ndash; which is &lt;em&gt;string&lt;/em&gt; itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup &amp;ndash; if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare. Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.</source>
          <target state="translated">「インターン」文字列のテーブルに&lt;em&gt;文字列&lt;/em&gt;を入力し、インターンされた文字列を返します。これは&lt;em&gt;文字列&lt;/em&gt;自体またはコピーです。文字列のインターンは、辞書ルックアップのパフォーマンスを少し向上させるのに役立ちます。ディクショナリーのキーがインターンされ、ルックアップキーがインターンされている場合、キー比較（ハッシュ後）は、文字列比較の代わりにポインター比較で実行できます。通常、Pythonプログラムで使用される名前は自動的にインターンされ、モジュール、クラス、またはインスタンスの属性を保持するために使用される辞書には、インターンされたキーがあります。</target>
        </trans-unit>
        <trans-unit id="b663cf4347cd84e7bc69f1115cc575cfd52e6845" translate="yes" xml:space="preserve">
          <source>Enter a polling loop that terminates after count passes or all open channels have been closed. All arguments are optional. The &lt;em&gt;count&lt;/em&gt; parameter defaults to &lt;code&gt;None&lt;/code&gt;, resulting in the loop terminating only when all channels have been closed. The &lt;em&gt;timeout&lt;/em&gt; argument sets the timeout parameter for the appropriate &lt;a href=&quot;select#select.select&quot;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;select#select.poll&quot;&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/a&gt; call, measured in seconds; the default is 30 seconds. The &lt;em&gt;use_poll&lt;/em&gt; parameter, if true, indicates that &lt;a href=&quot;select#select.poll&quot;&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/a&gt; should be used in preference to &lt;a href=&quot;select#select.select&quot;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; (the default is &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">カウントが経過した後、または開いているすべてのチャネルが閉じられた後に終了するポーリングループに入ります。すべての引数はオプションです。&lt;em&gt;数&lt;/em&gt;デフォルトパラメータ &lt;code&gt;None&lt;/code&gt; 、すべてのチャネルがクローズされた場合にのみ、ループ終了になります。&lt;em&gt;タイムアウト&lt;/em&gt;引数は適切なのタイムアウトパラメータが設定されます&lt;a href=&quot;select#select.select&quot;&gt; &lt;code&gt;select()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;select#select.poll&quot;&gt; &lt;code&gt;poll()&lt;/code&gt; &lt;/a&gt;秒単位で測定されたコール、。デフォルトは30秒です。&lt;em&gt;use_pollの&lt;/em&gt;パラメータは、trueの場合、それを示す&lt;a href=&quot;select#select.poll&quot;&gt; &lt;code&gt;poll()&lt;/code&gt; &lt;/a&gt;に優先して使用する必要があります&lt;a href=&quot;select#select.select&quot;&gt; &lt;code&gt;select()&lt;/code&gt; &lt;/a&gt;ます（デフォルトは &lt;code&gt;False&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bf6ee635905c79fc10776a891aacc8f8db536c1a" translate="yes" xml:space="preserve">
          <source>Enter a recursive debugger that steps through the code argument (which is an arbitrary expression or statement to be executed in the current environment).</source>
          <target state="translated">コード引数 (現在の環境で実行される任意の式またはステートメント)をステップスルーする再帰的デバッガーを入力します。</target>
        </trans-unit>
        <trans-unit id="06cda8081b0c699a9ae8156111f134ffc77e8bf8" translate="yes" xml:space="preserve">
          <source>Enter cbreak mode. In cbreak mode (sometimes called &amp;ldquo;rare&amp;rdquo; mode) normal tty line buffering is turned off and characters are available to be read one by one. However, unlike raw mode, special characters (interrupt, quit, suspend, and flow control) retain their effects on the tty driver and calling program. Calling first &lt;a href=&quot;#curses.raw&quot;&gt;&lt;code&gt;raw()&lt;/code&gt;&lt;/a&gt; then &lt;a href=&quot;#curses.cbreak&quot;&gt;&lt;code&gt;cbreak()&lt;/code&gt;&lt;/a&gt; leaves the terminal in cbreak mode.</source>
          <target state="translated">cbreakモードに入ります。cbreakモード（「レア」モードと呼ばれることもあります）では、通常のttyラインバッファリングがオフになり、文字を1つずつ読み取ることができます。ただし、rawモードとは異なり、特殊文字（割り込み、終了、一時停止、およびフロー制御）は、ttyドライバーと呼び出しプログラムへの影響を保持します。最初に&lt;a href=&quot;#curses.raw&quot;&gt; &lt;code&gt;raw()&lt;/code&gt; を&lt;/a&gt;呼び出し、次に&lt;a href=&quot;#curses.cbreak&quot;&gt; &lt;code&gt;cbreak()&lt;/code&gt; を&lt;/a&gt;呼び出すと、端末はcbreakモードのままになります。</target>
        </trans-unit>
        <trans-unit id="f8cea7d09a31360054e9f869e3c5d795b0458192" translate="yes" xml:space="preserve">
          <source>Enter converters.</source>
          <target state="translated">コンバーターを入力してください。</target>
        </trans-unit>
        <trans-unit id="602385ef4a72988bf782bf33f06a8f646ad69432" translate="yes" xml:space="preserve">
          <source>Enter echo mode. In echo mode, each character input is echoed to the screen as it is entered.</source>
          <target state="translated">エコーモードに入ります。エコーモードでは、入力された文字が入力されるたびに画面にエコーがかかります。</target>
        </trans-unit>
        <trans-unit id="429905251e2a3e543f489797d59b5a24f9ef97db" translate="yes" xml:space="preserve">
          <source>Enter newline mode. This mode translates the return key into newline on input, and translates newline into return and line-feed on output. Newline mode is initially on.</source>
          <target state="translated">改行モードに入ります。このモードは、入力時にリターンキーを改行に変換し、出力時に改行をリターンと改行に変換します。改行モードは初期状態ではオンになっています。</target>
        </trans-unit>
        <trans-unit id="31b90800a714a8a3e0ab43e272c0b938df50c7db" translate="yes" xml:space="preserve">
          <source>Enter or send (unreliable)</source>
          <target state="translated">入力または送信(信頼できない</target>
        </trans-unit>
        <trans-unit id="7b32a1a4ed5b14160b995b3b5225adbecd8b0343" translate="yes" xml:space="preserve">
          <source>Enter post-mortem debugging of the given &lt;em&gt;traceback&lt;/em&gt; object. If no &lt;em&gt;traceback&lt;/em&gt; is given, it uses the one of the exception that is currently being handled (an exception must be being handled if the default is to be used).</source>
          <target state="translated">指定された&lt;em&gt;トレースバック&lt;/em&gt;オブジェクトの事後デバッグを開始します。&lt;em&gt;トレースバック&lt;/em&gt;が指定されていない場合は、現在処理されている例外の1つを使用します（デフォルトを使用する場合は、例外を処理する必要があります）。</target>
        </trans-unit>
        <trans-unit id="f097b04746b05b7586d964276b16901fd65c113d" translate="yes" xml:space="preserve">
          <source>Enter post-mortem debugging of the traceback found in &lt;a href=&quot;sys#sys.last_traceback&quot;&gt;&lt;code&gt;sys.last_traceback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sys#sys.last_traceback&quot;&gt; &lt;code&gt;sys.last_traceback&lt;/code&gt; &lt;/a&gt;にあるトレースバックの事後デバッグを開始します。</target>
        </trans-unit>
        <trans-unit id="7ccc9469aa0d39ac8b4ae0c50a90919c84871d0d" translate="yes" xml:space="preserve">
          <source>Enter raw mode. In raw mode, normal line buffering and processing of interrupt, quit, suspend, and flow control keys are turned off; characters are presented to curses input functions one by one.</source>
          <target state="translated">raw モードに入ります。rawモードでは、通常のラインバッファリングや割り込みキー、終了キー、サスペンドキー、フローコントロールキーの処理がOFFになり、入力機能を呪うように1つ1つ文字が提示されます。</target>
        </trans-unit>
        <trans-unit id="a0dbd0b641f4836b322a1ad352c0e6127776e34d" translate="yes" xml:space="preserve">
          <source>Enter the debugger at the calling stack frame. This is useful to hard-code a breakpoint at a given point in a program, even if the code is not otherwise being debugged (e.g. when an assertion fails). If given, &lt;em&gt;header&lt;/em&gt; is printed to the console just before debugging begins.</source>
          <target state="translated">呼び出しスタックフレームでデバッガーに入ります。これは、コードが別の方法でデバッグされていない場合でも（たとえば、アサーションが失敗した場合など）、プログラムの特定のポイントにブレークポイントをハードコードするのに役立ちます。指定すると、デバッグが始まる直前に&lt;em&gt;ヘッダー&lt;/em&gt;がコンソールに出力されます。</target>
        </trans-unit>
        <trans-unit id="c2390d15b9f37ee098a11e644788934b4602939e" translate="yes" xml:space="preserve">
          <source>Enter the runtime context and return either this object or another object related to the runtime context. The value returned by this method is bound to the identifier in the &lt;code&gt;as&lt;/code&gt; clause of &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements using this context manager.</source>
          <target state="translated">ランタイムコンテキストを入力し、このオブジェクトまたはランタイムコンテキストに関連する別のオブジェクトを返します。このメソッドによって返される値は、このコンテキストマネージャを使用する&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの &lt;code&gt;as&lt;/code&gt; 句の識別子にバインドされます。</target>
        </trans-unit>
        <trans-unit id="8a3ea35903eb24e2439f6a0e520d488eeda6c731" translate="yes" xml:space="preserve">
          <source>Entering a blank line repeats the last command entered. Exception: if the last command was a &lt;a href=&quot;#pdbcommand-list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; command, the next 11 lines are listed.</source>
          <target state="translated">空白行を入力すると、最後に入力したコマンドが繰り返されます。例外：最後のコマンドが&lt;a href=&quot;#pdbcommand-list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;コマンドの場合、次の11行がリストされます。</target>
        </trans-unit>
        <trans-unit id="611a51f214fed567158739312e45abb78fbe33de" translate="yes" xml:space="preserve">
          <source>Enters a new context manager and adds its &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method to the callback stack. The return value is the result of the context manager&amp;rsquo;s own &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">新しいコンテキストマネージャに入り、その&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;メソッドをコールバックスタックに追加します。戻り値は、コンテキストマネージャ独自の&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;メソッドの結果です。</target>
        </trans-unit>
        <trans-unit id="bd5d52ebfda30bf0319952ff2a299cea17d4e30d" translate="yes" xml:space="preserve">
          <source>Entity declarations can contain more than just text for replacement. They can also point to external resources or local files. The XML parser accesses the resource and embeds the content into the XML document.</source>
          <target state="translated">エンティティ宣言には、置換のためのテキストだけではありません。また、外部リソースやローカルファイルを指すこともできます。XML パーサーはリソースにアクセスし、その内容を XML ドキュメントに埋め込みます。</target>
        </trans-unit>
        <trans-unit id="2dbd6d3f83290ba9348b436b12d8b7daf2635aa9" translate="yes" xml:space="preserve">
          <source>EntityResolver Objects</source>
          <target state="translated">EntityResolver オブジェクト</target>
        </trans-unit>
        <trans-unit id="953bd861b8d839338c4a580a2b0b5c9b37af0e5f" translate="yes" xml:space="preserve">
          <source>Entries are typically tuples of the form &lt;code&gt;(priority_number, data)&lt;/code&gt;.</source>
          <target state="translated">エントリは通常、 &lt;code&gt;(priority_number, data)&lt;/code&gt; という形式のタプルです。</target>
        </trans-unit>
        <trans-unit id="087b9e0aeb254cf0e900ba213fa1da3a8e9d24f1" translate="yes" xml:space="preserve">
          <source>Entries which cannot be determined are set to &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">決定できないエントリは &lt;code&gt;''&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="53705f2e3b68f3633d75ceaf05413bb3ba654a56" translate="yes" xml:space="preserve">
          <source>Entries which cannot be determined are set to &lt;code&gt;''&lt;/code&gt;. All tuple entries are strings.</source>
          <target state="translated">決定できないエントリは &lt;code&gt;''&lt;/code&gt; に設定されます。すべてのタプルエントリは文字列です。</target>
        </trans-unit>
        <trans-unit id="18f73528d44427047489bb703aa3ca755342dbbb" translate="yes" xml:space="preserve">
          <source>Entry points</source>
          <target state="translated">エントリーポイント</target>
        </trans-unit>
        <trans-unit id="d4d3e8a2c230f83aa0e684d966714d49817aea3f" translate="yes" xml:space="preserve">
          <source>Entry widget indexes (index, view index, etc.)</source>
          <target state="translated">エントリーウィジェットのインデックス(インデックス、ビューインデックスなど</target>
        </trans-unit>
        <trans-unit id="ef8f90b6c36e96a8f3138956ecec46b1d2f89b29" translate="yes" xml:space="preserve">
          <source>Entry widgets have options that refer to character positions in the text being displayed. You can use these &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; functions to access these special points in text widgets:</source>
          <target state="translated">入力ウィジェットには、表示されているテキストの文字位置を参照するオプションがあります。これらの&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;関数を使用して、テキストウィジェットのこれらの特別なポイントにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="35748b339b75707aa86eccdc826e9c484f210273" translate="yes" xml:space="preserve">
          <source>Enum Classes</source>
          <target state="translated">列挙クラス</target>
        </trans-unit>
        <trans-unit id="bd214812f74614a175b9a557097bf69a0bea623e" translate="yes" xml:space="preserve">
          <source>Enum Members (aka instances)</source>
          <target state="translated">列挙メンバー (インスタンス)</target>
        </trans-unit>
        <trans-unit id="5b06633b47e3b3d368410e3fcb03bd07f5b3d58c" translate="yes" xml:space="preserve">
          <source>Enum Name</source>
          <target state="translated">列挙名</target>
        </trans-unit>
        <trans-unit id="74cee2f76b2f08d1d822a0ac94ba9d489a4bdb9e" translate="yes" xml:space="preserve">
          <source>Enum class decorator that ensures only one name is bound to any one value.</source>
          <target state="translated">1つの名前だけが任意の1つの値にバインドされることを保証するEnumクラスデコレータ。</target>
        </trans-unit>
        <trans-unit id="4a5bc6fdb389a921b77691f1ae62efd63242c0e2" translate="yes" xml:space="preserve">
          <source>Enum member values</source>
          <target state="translated">列挙メンバの値</target>
        </trans-unit>
        <trans-unit id="3d0a2cd7fcbb6a833c1876f5c6fae7bafe7f2441" translate="yes" xml:space="preserve">
          <source>Enum members also have a property that contains just their item name:</source>
          <target state="translated">Enum メンバには、項目名だけを含むプロパティもあります。</target>
        </trans-unit>
        <trans-unit id="ac8abe6035a83a26f86fc58e8f94b33a048f67de" translate="yes" xml:space="preserve">
          <source>Enumerate the children of the current directory.</source>
          <target state="translated">カレントディレクトリの子を列挙します。</target>
        </trans-unit>
        <trans-unit id="d908e41face2db6aa2e63d82a5d94ab42f2201db" translate="yes" xml:space="preserve">
          <source>Enumerates subkeys of an open registry key, returning a string.</source>
          <target state="translated">オープンされているレジストリキーのサブキーを列挙し、文字列を返します。</target>
        </trans-unit>
        <trans-unit id="672127fd3527f8fc48242253b35034acf2091efe" translate="yes" xml:space="preserve">
          <source>Enumerates values of an open registry key, returning a tuple.</source>
          <target state="translated">オープンされているレジストリキーの値を列挙し、タプルを返します。</target>
        </trans-unit>
        <trans-unit id="3fb14da66a56415bff0ad761c36d594d42bedbae" translate="yes" xml:space="preserve">
          <source>Enumeration members are compared by identity:</source>
          <target state="translated">列挙メンバは、アイデンティティによって比較されます。</target>
        </trans-unit>
        <trans-unit id="1178a57aa7859712c54c6114945255e34205b1e4" translate="yes" xml:space="preserve">
          <source>Enumeration members are hashable, so they can be used in dictionaries and sets:</source>
          <target state="translated">列挙メンバはハッシュ化可能なので、辞書やセットで使用することができます。</target>
        </trans-unit>
        <trans-unit id="e472257922d05bccf3578137ac9fc6b17ee1a5f2" translate="yes" xml:space="preserve">
          <source>Enumeration members have human readable string representations:</source>
          <target state="translated">列挙メンバは、人間が読める文字列表現を持っています。</target>
        </trans-unit>
        <trans-unit id="dd0a466f4da4a792ee601c1958443d6ace0821a6" translate="yes" xml:space="preserve">
          <source>Enumerations are Python classes, and can have methods and special methods as usual. If we have this enumeration:</source>
          <target state="translated">列挙はPythonのクラスで、通常のようにメソッドや特殊なメソッドを持つことができます。この列挙子を持っていれば</target>
        </trans-unit>
        <trans-unit id="40f561f88b2257b63cb2fb13e1fe24beff58df37" translate="yes" xml:space="preserve">
          <source>Enumerations are created using the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#class&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt; syntax, which makes them easy to read and write. An alternative creation method is described in &lt;a href=&quot;#functional-api&quot;&gt;Functional API&lt;/a&gt;. To define an enumeration, subclass &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="translated">列挙型は、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#class&quot;&gt; &lt;code&gt;class&lt;/code&gt; &lt;/a&gt;構文を使用して作成されるため、読み書きが容易になります。代替の作成方法は、&lt;a href=&quot;#functional-api&quot;&gt;Functional APIで&lt;/a&gt;説明されています。列挙を定義するには、次のように&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;をサブクラス化します。</target>
        </trans-unit>
        <trans-unit id="916080f51e0a1e47a17a417292d676be5cdcc6c5" translate="yes" xml:space="preserve">
          <source>Enumerations can be pickled and unpickled:</source>
          <target state="translated">列挙は、漬けても漬けなくてもOKです。</target>
        </trans-unit>
        <trans-unit id="afa830c866023673c4f9348a0f95ab021df8ef05" translate="yes" xml:space="preserve">
          <source>Enumerations support iteration, in definition order:</source>
          <target state="translated">列挙子は定義順に反復をサポートしています。</target>
        </trans-unit>
        <trans-unit id="922ed09b766daccfca53d5df49778614ae54ae66" translate="yes" xml:space="preserve">
          <source>Enums have a custom metaclass that affects many aspects of both derived Enum classes and their instances (members).</source>
          <target state="translated">Enumには、派生Enumクラスとそのインスタンス(メンバー)の両方の多くの側面に影響を与えるカスタムメタクラスがあります。</target>
        </trans-unit>
        <trans-unit id="52290975d27191c5718cc3c19935ef179fd55b88" translate="yes" xml:space="preserve">
          <source>Environment example:</source>
          <target state="translated">環境の例。</target>
        </trans-unit>
        <trans-unit id="7acfb9859940856ef732a50aabb8e6e5a634d65f" translate="yes" xml:space="preserve">
          <source>EnvironmentError</source>
          <target state="translated">EnvironmentError</target>
        </trans-unit>
        <trans-unit id="7a9900d84e1403f9c455cfd34c5bb3f62971e633" translate="yes" xml:space="preserve">
          <source>Equality</source>
          <target state="translated">Equality</target>
        </trans-unit>
        <trans-unit id="0ea9631890f3c3ddadbb49be5feb1a38c4f675ab" translate="yes" xml:space="preserve">
          <source>Equality comparisons are defined though:</source>
          <target state="translated">平等比較は定義されているけどね。</target>
        </trans-unit>
        <trans-unit id="bd00d2fa4ce7f9b3799e9324d37d66327650eef7" translate="yes" xml:space="preserve">
          <source>Equality tests between &lt;a href=&quot;#collections.OrderedDict&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt; objects are order-sensitive and are implemented as &lt;code&gt;list(od1.items())==list(od2.items())&lt;/code&gt;. Equality tests between &lt;a href=&quot;#collections.OrderedDict&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt; objects and other &lt;a href=&quot;collections.abc#collections.abc.Mapping&quot;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/a&gt; objects are order-insensitive like regular dictionaries. This allows &lt;a href=&quot;#collections.OrderedDict&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt; objects to be substituted anywhere a regular dictionary is used.</source>
          <target state="translated">&lt;a href=&quot;#collections.OrderedDict&quot;&gt; &lt;code&gt;OrderedDict&lt;/code&gt; &lt;/a&gt;オブジェクト間の同等性テストは順序に依存し、 &lt;code&gt;list(od1.items())==list(od2.items())&lt;/code&gt; として実装されます。&lt;a href=&quot;#collections.OrderedDict&quot;&gt; &lt;code&gt;OrderedDict&lt;/code&gt; &lt;/a&gt;オブジェクトと他の&lt;a href=&quot;collections.abc#collections.abc.Mapping&quot;&gt; &lt;code&gt;Mapping&lt;/code&gt; &lt;/a&gt;オブジェクト間の同等性テストは、通常の辞書のように順序に依存しません。これにより、&lt;a href=&quot;#collections.OrderedDict&quot;&gt; &lt;code&gt;OrderedDict&lt;/code&gt; &lt;/a&gt;オブジェクトを、通常の辞書が使用されている任意の場所で置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="61ce4cfe7855e867407978f9c2806aa92588f0fa" translate="yes" xml:space="preserve">
          <source>Equivalent to 0 (ie. all of the above Netscape domain strictness flags switched off).</source>
          <target state="translated">0に相当します (つまり、上記の Netscape ドメイン厳格化フラグはすべてオフになっています)。</target>
        </trans-unit>
        <trans-unit id="3e1a831f3885fcf01724787c32f8ff7381b26db1" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#email.message.EmailMessage.as_bytes&quot;&gt;&lt;code&gt;as_bytes()&lt;/code&gt;&lt;/a&gt;. Allows &lt;code&gt;bytes(msg)&lt;/code&gt; to produce a bytes object containing the serialized message.</source>
          <target state="translated">&lt;a href=&quot;#email.message.EmailMessage.as_bytes&quot;&gt; &lt;code&gt;as_bytes()&lt;/code&gt; と&lt;/a&gt;同等です。 &lt;code&gt;bytes(msg)&lt;/code&gt; がシリアライズされたメッセージを含むbytesオブジェクトを生成できるようにします。</target>
        </trans-unit>
        <trans-unit id="d9cce4bbb04162f7733d5750ecd4d39c58ff074b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#email.message.Message.as_bytes&quot;&gt;&lt;code&gt;as_bytes()&lt;/code&gt;&lt;/a&gt;. Allows &lt;code&gt;bytes(msg)&lt;/code&gt; to produce a bytes object containing the formatted message.</source>
          <target state="translated">&lt;a href=&quot;#email.message.Message.as_bytes&quot;&gt; &lt;code&gt;as_bytes()&lt;/code&gt; と&lt;/a&gt;同等です。 &lt;code&gt;bytes(msg)&lt;/code&gt; が、フォーマットされたメッセージを含むbytesオブジェクトを生成できるようにします。</target>
        </trans-unit>
        <trans-unit id="59158a5ff65138652445ed251a27dc21a6e9150e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#email.message.Message.as_string&quot;&gt;&lt;code&gt;as_string()&lt;/code&gt;&lt;/a&gt;. Allows &lt;code&gt;str(msg)&lt;/code&gt; to produce a string containing the formatted message.</source>
          <target state="translated">&lt;a href=&quot;#email.message.Message.as_string&quot;&gt; &lt;code&gt;as_string()&lt;/code&gt; と&lt;/a&gt;同等です。 &lt;code&gt;str(msg)&lt;/code&gt; がフォーマットされたメッセージを含む文字列を生成できるようにします。</target>
        </trans-unit>
        <trans-unit id="8f56c313d1897cc5bd915d14d383918de3b15796" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#gettext.GNUTranslations.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#gettext.GNUTranslations.ngettext&quot;&gt;&lt;code&gt;ngettext()&lt;/code&gt;&lt;/a&gt;, but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with &lt;a href=&quot;#gettext.NullTranslations.set_output_charset&quot;&gt;&lt;code&gt;set_output_charset()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">等価&lt;a href=&quot;#gettext.GNUTranslations.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#gettext.GNUTranslations.ngettext&quot;&gt; &lt;code&gt;ngettext()&lt;/code&gt; &lt;/a&gt;が、全く符号化を明示的に用いて設定されていない場合、翻訳は、好ましいシステムエンコーディングでエンコードされたバイト列として返され&lt;a href=&quot;#gettext.NullTranslations.set_output_charset&quot;&gt; &lt;code&gt;set_output_charset()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b929dcdf93e833942100bcfd2521eb537f4575c4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#gettext.NullTranslations.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#gettext.NullTranslations.ngettext&quot;&gt;&lt;code&gt;ngettext()&lt;/code&gt;&lt;/a&gt;, but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with &lt;a href=&quot;#gettext.NullTranslations.set_output_charset&quot;&gt;&lt;code&gt;set_output_charset()&lt;/code&gt;&lt;/a&gt;. Overridden in derived classes.</source>
          <target state="translated">等価&lt;a href=&quot;#gettext.NullTranslations.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#gettext.NullTranslations.ngettext&quot;&gt; &lt;code&gt;ngettext()&lt;/code&gt; &lt;/a&gt;が、全く符号化を明示的に用いて設定されていない場合、翻訳は、好ましいシステムエンコーディングでエンコードされたバイト列として返され&lt;a href=&quot;#gettext.NullTranslations.set_output_charset&quot;&gt; &lt;code&gt;set_output_charset()&lt;/code&gt; &lt;/a&gt;。派生クラスでオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="02563697a0fa57e5ce1168a5733d29d5e6f44a1a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#winreg.KEY_READ&quot;&gt;&lt;code&gt;KEY_READ&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#winreg.KEY_READ&quot;&gt; &lt;code&gt;KEY_READ&lt;/code&gt; と&lt;/a&gt;同等です。</target>
        </trans-unit>
        <trans-unit id="69dff8b0d9537ee5a976ee7fb9f22df6af014657" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;'grouping'&lt;/code&gt;, used for monetary values.</source>
          <target state="translated">金額に使用される &lt;code&gt;'grouping'&lt;/code&gt; 相当します。</target>
        </trans-unit>
        <trans-unit id="6fd5ba978072c7d2a6ca1194f41377f2f6c02509" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;DomainStrictNoDots|DomainStrictNonDomain&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DomainStrictNoDots|DomainStrictNonDomain&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="d9577878c711c65c19c4d1a6b45fc26fa77f1b8c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;EPOLLIN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;EPOLLIN&lt;/code&gt; に相当</target>
        </trans-unit>
        <trans-unit id="2443801768eb95d9756d03d866b00db3da79813a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;EPOLLOUT&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;EPOLLOUT&lt;/code&gt; と同等</target>
        </trans-unit>
        <trans-unit id="5c75de4891c94ac80ca2797e5676efa9d38daabd" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;as_string(policy=self.policy.clone(utf8=True))&lt;/code&gt;. Allows &lt;code&gt;str(msg)&lt;/code&gt; to produce a string containing the serialized message in a readable format.</source>
          <target state="translated">&lt;code&gt;as_string(policy=self.policy.clone(utf8=True))&lt;/code&gt; と同等です。可能 &lt;code&gt;str(msg)&lt;/code&gt; 読み取り可能なフォーマットでシリアル化メッセージを含む文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="498f574627ce47a8c97257efb3e593bf179bd84b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;get(False)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get(False)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="882d9b2b409ad6b7450f6c950c6fa3b50fddd662" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;not key in d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;not key in d&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="1411dd558ed3d5c3b0e3e1943566fb197cdb665f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;pencolor(colorstring1)&lt;/code&gt; and &lt;code&gt;fillcolor(colorstring2)&lt;/code&gt; and analogously if the other input format is used.</source>
          <target state="translated">相当 &lt;code&gt;pencolor(colorstring1)&lt;/code&gt; および &lt;code&gt;fillcolor(colorstring2)&lt;/code&gt; と同様に他の入力フォーマットが使用される場合。</target>
        </trans-unit>
        <trans-unit id="d3e0663e7f56bca65438c71c5ecf53a3ac03e471" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;put(item)&lt;/code&gt;, provided for compatibility with &lt;a href=&quot;#queue.Queue.put_nowait&quot;&gt;&lt;code&gt;Queue.put_nowait()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;put(item)&lt;/code&gt; と同等で、&lt;a href=&quot;#queue.Queue.put_nowait&quot;&gt; &lt;code&gt;Queue.put_nowait()&lt;/code&gt; &lt;/a&gt;との互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="4cf151630145678e1c1abceeac6eb7289eb99e6b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;put(item, False)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;put(item, False)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="ba2c64df04b46764b2b3b68b2579acfafb0a714f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;put(obj, False)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;put(obj, False)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="fa7377fb4a7fcc696f633b01dc35eb725c5ff01c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;tputs(str, 1, putchar)&lt;/code&gt;; emit the value of a specified terminfo capability for the current terminal. Note that the output of &lt;a href=&quot;#curses.putp&quot;&gt;&lt;code&gt;putp()&lt;/code&gt;&lt;/a&gt; always goes to standard output.</source>
          <target state="translated">&lt;code&gt;tputs(str, 1, putchar)&lt;/code&gt; と同じです。現在の端末に指定されたterminfo機能の値を出力します。&lt;a href=&quot;#curses.putp&quot;&gt; &lt;code&gt;putp()&lt;/code&gt; の&lt;/a&gt;出力は常に標準出力に送られることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1e63fcd5fb787d4a3c6b9d9ed88dfe3dca78e6d4" translate="yes" xml:space="preserve">
          <source>Equivalent to the corresponding functions without the &lt;code&gt;l&lt;/code&gt; prefix (&lt;a href=&quot;#gettext.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.dgettext&quot;&gt;&lt;code&gt;dgettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.ngettext&quot;&gt;&lt;code&gt;ngettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#gettext.dngettext&quot;&gt;&lt;code&gt;dngettext()&lt;/code&gt;&lt;/a&gt;), but the translation is returned as a byte string encoded in the preferred system encoding if no other encoding was explicitly set with &lt;a href=&quot;#gettext.bind_textdomain_codeset&quot;&gt;&lt;code&gt;bind_textdomain_codeset()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; 接頭辞なしの対応する関数（&lt;a href=&quot;#gettext.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#gettext.dgettext&quot;&gt; &lt;code&gt;dgettext()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#gettext.ngettext&quot;&gt; &lt;code&gt;ngettext()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#gettext.dngettext&quot;&gt; &lt;code&gt;dngettext()&lt;/code&gt; &lt;/a&gt;）と同等ですが、他のエンコーディングが明示的に設定されていない場合、変換は優先システムエンコーディングでエンコードされたバイト文字列として返されます。&lt;a href=&quot;#gettext.bind_textdomain_codeset&quot;&gt; &lt;code&gt;bind_textdomain_codeset()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d371f28bfea1e852f448381bb4f0bdfccaa7149e" translate="yes" xml:space="preserve">
          <source>Equivalent to:</source>
          <target state="translated">同等です。</target>
        </trans-unit>
        <trans-unit id="315728e0990367d75d40e64feff3d637283509e1" translate="yes" xml:space="preserve">
          <source>Erase from cursor to the end of the line.</source>
          <target state="translated">カーソルから行末までを消去します。</target>
        </trans-unit>
        <trans-unit id="4619259d1590500b34cdd053102b2bb5cb08a27d" translate="yes" xml:space="preserve">
          <source>Erase from cursor to the end of the window: all lines below the cursor are deleted, and then the equivalent of &lt;a href=&quot;#curses.window.clrtoeol&quot;&gt;&lt;code&gt;clrtoeol()&lt;/code&gt;&lt;/a&gt; is performed.</source>
          <target state="translated">カーソルからウィンドウの最後まで消去します。カーソルの下のすべての行が削除され、次に&lt;a href=&quot;#curses.window.clrtoeol&quot;&gt; &lt;code&gt;clrtoeol()&lt;/code&gt; &lt;/a&gt;と同等の処理が実行されます。</target>
        </trans-unit>
        <trans-unit id="d3e856491e1bc6fd30d79529b1024eb08ed1e4e9" translate="yes" xml:space="preserve">
          <source>Error Handlers</source>
          <target state="translated">エラーハンドラ</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="4c6986de1c86cf9ac917927e4adfec8f6bfe5614" translate="yes" xml:space="preserve">
          <source>Error Handling API</source>
          <target state="translated">エラー処理API</target>
        </trans-unit>
        <trans-unit id="9e8a18bdf1224aba7c5640dca2752cb0f27bda94" translate="yes" xml:space="preserve">
          <source>Error condition happened on the assoc. fd</source>
          <target state="translated">Assoc.fdでエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="c06a4667ab2007b00a3679ad01f2c2deae43bffe" translate="yes" xml:space="preserve">
          <source>Error condition of some sort</source>
          <target state="translated">ある種のエラー条件</target>
        </trans-unit>
        <trans-unit id="e4a425fe29ba88e41be9834c2976e81cdd62ab0e" translate="yes" xml:space="preserve">
          <source>Error handling is done in the same way as defined for the stream readers and writers.</source>
          <target state="translated">エラー処理は、ストリームのリーダとライタで定義されているのと同じ方法で行われます。</target>
        </trans-unit>
        <trans-unit id="0ce0e9091d4c585a750b4f74ffd57e53b22799a3" translate="yes" xml:space="preserve">
          <source>Error occurred during establishment of a connection with the server.</source>
          <target state="translated">サーバーとの接続確立中にエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="2aad66e5d2aeba2dd907b4c02fdd7536e059af24" translate="yes" xml:space="preserve">
          <source>Error raised when an unpicklable object is encountered by &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt;. It inherits &lt;a href=&quot;#pickle.PickleError&quot;&gt;&lt;code&gt;PickleError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;が取得できないオブジェクトに遭遇したときに発生するエラー。&lt;a href=&quot;#pickle.PickleError&quot;&gt; &lt;code&gt;PickleError&lt;/code&gt; を&lt;/a&gt;継承しています。</target>
        </trans-unit>
        <trans-unit id="700cc5c8bc3311f1f7de53ead5e890a4d6df4103" translate="yes" xml:space="preserve">
          <source>Error raised when there is a problem unpickling an object, such as a data corruption or a security violation. It inherits &lt;a href=&quot;#pickle.PickleError&quot;&gt;&lt;code&gt;PickleError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データの破損やセキュリティ違反など、オブジェクトのunpickle化に問題がある場合に発生するエラー。&lt;a href=&quot;#pickle.PickleError&quot;&gt; &lt;code&gt;PickleError&lt;/code&gt; を&lt;/a&gt;継承しています。</target>
        </trans-unit>
        <trans-unit id="1bd7165001d6a8de56949614e8427bb6f024f601" translate="yes" xml:space="preserve">
          <source>ErrorHandler Objects</source>
          <target state="translated">ErrorHandler オブジェクト</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="9777fd6046fd2b79471201c70d64c950708d6028" translate="yes" xml:space="preserve">
          <source>Errors are reported as exceptions; the usual exceptions are given for type errors, while errors reported by the system calls raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーは例外として報告されます。通常の例外はタイプエラーに対して与えられますが、システムコールによって報告されたエラーは&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; を送出し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="a3ca63fcb126584c7cbc69cb44097bc0a98431f5" translate="yes" xml:space="preserve">
          <source>Escape &lt;code&gt;'&amp;amp;'&lt;/code&gt;, &lt;code&gt;'&amp;lt;'&lt;/code&gt;, and &lt;code&gt;'&amp;gt;'&lt;/code&gt; in a string of data.</source>
          <target state="translated">データの文字列で &lt;code&gt;'&amp;amp;'&lt;/code&gt; 、 &lt;code&gt;'&amp;lt;'&lt;/code&gt; 、 &lt;code&gt;'&amp;gt;'&lt;/code&gt; をエスケープします。</target>
        </trans-unit>
        <trans-unit id="87b0bd467ee85b7f8847d9eb3649852161ccbc0c" translate="yes" xml:space="preserve">
          <source>Escape all special characters (&lt;code&gt;'?'&lt;/code&gt;, &lt;code&gt;'*'&lt;/code&gt; and &lt;code&gt;'['&lt;/code&gt;). This is useful if you want to match an arbitrary literal string that may have special characters in it. Special characters in drive/UNC sharepoints are not escaped, e.g. on Windows &lt;code&gt;escape('//?/c:/Quo vadis?.txt')&lt;/code&gt; returns &lt;code&gt;'//?/c:/Quo vadis[?].txt'&lt;/code&gt;.</source>
          <target state="translated">すべての特殊文字（ &lt;code&gt;'?'&lt;/code&gt; 、 &lt;code&gt;'*'&lt;/code&gt; および &lt;code&gt;'['&lt;/code&gt; ）をエスケープします。これは、特殊文字が含まれている可能性のある任意のリテラル文字列を照合する場合に便利です。ドライブ/ UNC共有ポイント内の特殊文字は &lt;code&gt;escape('//?/c:/Quo vadis?.txt')&lt;/code&gt; れません。たとえば、Windowsでは、escape（ '//？/ c：/ Quo vadis？.txt'）は &lt;code&gt;'//?/c:/Quo vadis[?].txt'&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="645fe693ac8b623ab59ba5a913fa56e06ea5cf34" translate="yes" xml:space="preserve">
          <source>Escape characters are not recognized;</source>
          <target state="translated">エスケープ文字は認識されません。</target>
        </trans-unit>
        <trans-unit id="1c8ea8bc4f65d5bfd8546e074c6c3ed1833a24b0" translate="yes" xml:space="preserve">
          <source>Escape special characters in &lt;em&gt;pattern&lt;/em&gt;. This is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it. For example:</source>
          <target state="translated">&lt;em&gt;パターン&lt;/em&gt;内の特殊文字をエスケープし&lt;em&gt;ます&lt;/em&gt;。これは、正規表現のメタ文字が含まれている可能性のある任意のリテラル文字列を照合する場合に便利です。例えば：</target>
        </trans-unit>
        <trans-unit id="1d0a36d2b4f6f39c281a11428ee518d9f087808c" translate="yes" xml:space="preserve">
          <source>Esperanto, Maltese</source>
          <target state="translated">エスペラント語,マルタ語</target>
        </trans-unit>
        <trans-unit id="b9603ee7bcecaa495cbf6687553a3756c705570d" translate="yes" xml:space="preserve">
          <source>Essentially, transports and protocols should only be used in libraries and frameworks and never in high-level asyncio applications.</source>
          <target state="translated">基本的に、トランスポートやプロトコルはライブラリやフレームワークでのみ使用し、高レベルのasyncioアプリケーションでは決して使用しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="0946aa68f0bba7f1fbe4c3793c30db49bbee67bd" translate="yes" xml:space="preserve">
          <source>Establish a TCP connection.</source>
          <target state="translated">TCP接続を確立します。</target>
        </trans-unit>
        <trans-unit id="d2d166fb4f8060af809ab3750f0779c96f2c2772" translate="yes" xml:space="preserve">
          <source>Establish a Unix socket connection and return a pair of &lt;code&gt;(reader, writer)&lt;/code&gt;.</source>
          <target state="translated">Unixソケット接続を確立し、 &lt;code&gt;(reader, writer)&lt;/code&gt; ペアを返します。</target>
        </trans-unit>
        <trans-unit id="8f41b06a3c2e0f7210c8c5ea4a7a815d0f61f476" translate="yes" xml:space="preserve">
          <source>Establish a Unix socket connection.</source>
          <target state="translated">Unix ソケット接続を確立します。</target>
        </trans-unit>
        <trans-unit id="27ddc90aba864b61e63ca9fcab375d32046e5f68" translate="yes" xml:space="preserve">
          <source>Establish a network connection and return a pair of &lt;code&gt;(reader, writer)&lt;/code&gt; objects.</source>
          <target state="translated">ネットワーク接続を確立し、 &lt;code&gt;(reader, writer)&lt;/code&gt; オブジェクトのペアを返します。</target>
        </trans-unit>
        <trans-unit id="b33dfb090a73f3e7fa9ec19387939863ce9a9697" translate="yes" xml:space="preserve">
          <source>Establishes a connection to a predefined registry handle on another computer, and returns a &lt;a href=&quot;#handle-object&quot;&gt;handle object&lt;/a&gt;.</source>
          <target state="translated">別のコンピューター上の定義済みのレジストリハンドルへの接続を確立し、&lt;a href=&quot;#handle-object&quot;&gt;ハンドルオブジェクト&lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="46eac8641b41a554c4af978ac95022766230c363" translate="yes" xml:space="preserve">
          <source>Establishes an arbitrary timer</source>
          <target state="translated">任意のタイマーを設定します。</target>
        </trans-unit>
        <trans-unit id="387507d9043a48f9895cfaa2673836fe0752cb7a" translate="yes" xml:space="preserve">
          <source>Evaluate the &lt;em&gt;expression&lt;/em&gt; (given as a string or a code object) under debugger control. When &lt;a href=&quot;#pdb.runeval&quot;&gt;&lt;code&gt;runeval()&lt;/code&gt;&lt;/a&gt; returns, it returns the value of the expression. Otherwise this function is similar to &lt;a href=&quot;#pdb.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デバッガーの制御下で&lt;em&gt;式&lt;/em&gt;（文字列またはコードオブジェクトとして指定）を評価します。&lt;a href=&quot;#pdb.runeval&quot;&gt; &lt;code&gt;runeval()&lt;/code&gt; &lt;/a&gt;戻り、それは式の値を返します。その他の点では、この関数は&lt;a href=&quot;#pdb.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; に&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="bbd8f1d5e5391f6492fcec6625b513a0bb874fcf" translate="yes" xml:space="preserve">
          <source>Evaluate the &lt;em&gt;expression&lt;/em&gt; in the current context and print its value.</source>
          <target state="translated">現在のコンテキストで&lt;em&gt;式&lt;/em&gt;を評価し、その値を出力します。</target>
        </trans-unit>
        <trans-unit id="2e025428974165b15278efafd9c9b0d22a029d83" translate="yes" xml:space="preserve">
          <source>Evaluates to &lt;code&gt;n! / (k! * (n - k)!)&lt;/code&gt; when &lt;code&gt;k &amp;lt;= n&lt;/code&gt; and evaluates to zero when &lt;code&gt;k &amp;gt; n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n! / (k! * (n - k)!)&lt;/code&gt; 評価されます！/（K *（N！ - K）！） &lt;code&gt;k &amp;lt;= n&lt;/code&gt; と評価さゼロに &lt;code&gt;k &amp;gt; n&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db06d1f9400c9b6f59b6bcb16845f15ee0707af4" translate="yes" xml:space="preserve">
          <source>Evaluates to &lt;code&gt;n! / (n - k)!&lt;/code&gt; when &lt;code&gt;k &amp;lt;= n&lt;/code&gt; and evaluates to zero when &lt;code&gt;k &amp;gt; n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n! / (n - k)!&lt;/code&gt; 評価されます！/（n-k）！場合 &lt;code&gt;k &amp;lt;= n&lt;/code&gt; ゼロと評価さ &lt;code&gt;k &amp;gt; n&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b97d45e2e76a4e66439f778565d0ee17e1fde472" translate="yes" xml:space="preserve">
          <source>Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn&amp;rsquo;t, they may not compare equal.</source>
          <target state="translated">2つのUnicode文字列が正規化され、人間の読者には同じに見えても、一方に結合文字があり、もう一方にない場合、それらは等しく比較されない場合があります。</target>
        </trans-unit>
        <trans-unit id="c2371ef0b3d2525f10074eb1b01da734606274be" translate="yes" xml:space="preserve">
          <source>Even the higher-level file copying functions (&lt;a href=&quot;#shutil.copy&quot;&gt;&lt;code&gt;shutil.copy()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#shutil.copy2&quot;&gt;&lt;code&gt;shutil.copy2()&lt;/code&gt;&lt;/a&gt;) cannot copy all file metadata.</source>
          <target state="translated">より高レベルのファイルコピー関数（&lt;a href=&quot;#shutil.copy&quot;&gt; &lt;code&gt;shutil.copy()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#shutil.copy2&quot;&gt; &lt;code&gt;shutil.copy2()&lt;/code&gt; &lt;/a&gt;）でも、すべてのファイルメタデータをコピーすることはできません。</target>
        </trans-unit>
        <trans-unit id="499bbe4b0828963aced093b14a412aa05bcf8a05" translate="yes" xml:space="preserve">
          <source>Even though &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt; does not declare &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt; because their signatures will vary, implementations and clients should consider those methods part of the interface. Also, implementations may raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#io.UnsupportedOperation&quot;&gt;&lt;code&gt;UnsupportedOperation&lt;/code&gt;&lt;/a&gt;) when operations they do not support are called.</source>
          <target state="translated">にもかかわらず&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;宣言されていない &lt;code&gt;read()&lt;/code&gt; または &lt;code&gt;write()&lt;/code&gt; 自分の署名が異なりますので、実装とクライアントは、インターフェイスのこれらのメソッドの一部を考慮する必要があります。また、実装では、&lt;a href=&quot;#io.UnsupportedOperation&quot;&gt; &lt;code&gt;UnsupportedOperation&lt;/code&gt; &lt;/a&gt;していない操作が呼び出されたときに&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;（またはUnsupportedOperation）が発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="c7263b2f6cfc43f8cba961ab3031692280b00432" translate="yes" xml:space="preserve">
          <source>Even though &lt;a href=&quot;#unittest.FunctionTestCase&quot;&gt;&lt;code&gt;FunctionTestCase&lt;/code&gt;&lt;/a&gt; can be used to quickly convert an existing test base over to a &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;-based system, this approach is not recommended. Taking the time to set up proper &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; subclasses will make future test refactorings infinitely easier.</source>
          <target state="translated">にもかかわらず、&lt;a href=&quot;#unittest.FunctionTestCase&quot;&gt; &lt;code&gt;FunctionTestCase&lt;/code&gt; &lt;/a&gt;迅速に上の既存のテストベースを変換するために使用することができます&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; の&lt;/a&gt;ベースのシステム、このアプローチは推奨されません。時間をかけて適切な&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;サブクラスを設定すると、将来のテストリファクタリングが非常に簡単になります。</target>
        </trans-unit>
        <trans-unit id="ff19b36ae0ff27e7c6b431a5884cd7d3d669658d" translate="yes" xml:space="preserve">
          <source>Even though there&amp;rsquo;s a native keyed hashing mode, BLAKE2 can, of course, be used in HMAC construction with &lt;a href=&quot;hmac#module-hmac&quot;&gt;&lt;code&gt;hmac&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">ネイティブのキー付きハッシュモードがありますが、BLAKE2はもちろん、&lt;a href=&quot;hmac#module-hmac&quot;&gt; &lt;code&gt;hmac&lt;/code&gt; &lt;/a&gt;モジュールを使用したHMAC構築で使用できます。</target>
        </trans-unit>
        <trans-unit id="d7f036ced6014aec397327a4880396286c4f3e4e" translate="yes" xml:space="preserve">
          <source>Even though we use the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#class&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt; syntax to create Enums, Enums are not normal Python classes. See &lt;a href=&quot;#how-are-enums-different&quot;&gt;How are Enums different?&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#class&quot;&gt; &lt;code&gt;class&lt;/code&gt; &lt;/a&gt;構文を使用してEnumを作成しますが、Enumは通常のPythonクラスではありません。&lt;a href=&quot;#how-are-enums-different&quot;&gt;Enumの違いを&lt;/a&gt;参照してください。詳細については。</target>
        </trans-unit>
        <trans-unit id="ad8919ace091b14011c6439cfd5e1707b58f5abd" translate="yes" xml:space="preserve">
          <source>Event</source>
          <target state="translated">Event</target>
        </trans-unit>
        <trans-unit id="16cdaf23858a23440a22c418d4c6b612df6fdb46" translate="yes" xml:space="preserve">
          <source>Event Loop</source>
          <target state="translated">イベントループ</target>
        </trans-unit>
        <trans-unit id="5576dbff159fec8a46dbd0a52a25671fa3b9372e" translate="yes" xml:space="preserve">
          <source>Event Loop Implementations</source>
          <target state="translated">イベントループの実装</target>
        </trans-unit>
        <trans-unit id="77a9a7549edf389a9cb37745d2e54aceacf3da51" translate="yes" xml:space="preserve">
          <source>Event Loop Methods</source>
          <target state="translated">イベントループメソッド</target>
        </trans-unit>
        <trans-unit id="a67706b3e7508f740414461219436fc9a73e214a" translate="yes" xml:space="preserve">
          <source>Event Loop Policies</source>
          <target state="translated">イベントループポリシー</target>
        </trans-unit>
        <trans-unit id="6c2ed30703b4deb10039f26a41c46d82ade3869e" translate="yes" xml:space="preserve">
          <source>Event Objects</source>
          <target state="translated">イベントオブジェクト</target>
        </trans-unit>
        <trans-unit id="440fcc4d594dae931e312babd2de1b9b3d2a28fc" translate="yes" xml:space="preserve">
          <source>Event loop provides mechanisms to schedule callback functions to be called at some point in the future. Event loop uses monotonic clocks to track time.</source>
          <target state="translated">イベントループは、将来のある時点で呼び出されるコールバック関数をスケジュールする仕組みを提供します。イベントループは、時間を追跡するために単調時計を使用します。</target>
        </trans-unit>
        <trans-unit id="62e71e6548032c1c325d64816dbf74d764e0c929" translate="yes" xml:space="preserve">
          <source>Event loops have &lt;strong&gt;low-level&lt;/strong&gt; APIs for the following:</source>
          <target state="translated">イベントループには、以下の&lt;strong&gt;低レベル&lt;/strong&gt; APIがあります。</target>
        </trans-unit>
        <trans-unit id="517d8715e77155c962befa306539460c53898616" translate="yes" xml:space="preserve">
          <source>Event loops use cooperative scheduling: an event loop runs one Task at a time. While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations.</source>
          <target state="translated">イベントループは協調スケジューリングを使用します。タスクが未来の完了を待っている間、イベントループは他のタスク、コールバック、または IO 操作を実行します。</target>
        </trans-unit>
        <trans-unit id="ced38f1f5acc3782ecfa5e0a5049aac2064b7102" translate="yes" xml:space="preserve">
          <source>Event methods, such as &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_server&quot;&gt;&lt;code&gt;loop.create_server()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_server&quot;&gt;&lt;code&gt;loop.create_unix_server()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt;&lt;code&gt;loop.create_unix_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_accepted_socket&quot;&gt;&lt;code&gt;loop.connect_accepted_socket()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt;&lt;code&gt;loop.connect_read_pipe()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;loop.connect_write_pipe()&lt;/code&gt;&lt;/a&gt; accept factories that return streaming protocols.</source>
          <target state="translated">イベントなどの方法、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_server&quot;&gt; &lt;code&gt;loop.create_server()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_server&quot;&gt; &lt;code&gt;loop.create_unix_server()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt; &lt;code&gt;loop.create_unix_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_accepted_socket&quot;&gt; &lt;code&gt;loop.connect_accepted_socket()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt; &lt;code&gt;loop.connect_read_pipe()&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt; &lt;code&gt;loop.connect_write_pipe()&lt;/code&gt; は&lt;/a&gt;その工場を受け入れますストリーミングプロトコルを返します。</target>
        </trans-unit>
        <trans-unit id="d2666c7b871ccb15924b349d18cdc53f00b1b05d" translate="yes" xml:space="preserve">
          <source>Event port.</source>
          <target state="translated">イベントポート。</target>
        </trans-unit>
        <trans-unit id="c09e1c6446bbff501e408ad68773effacce68f7c" translate="yes" xml:space="preserve">
          <source>Events provided in a previous call to &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser.read_events&quot;&gt;&lt;code&gt;read_events()&lt;/code&gt;&lt;/a&gt; will not be yielded again. Events are consumed from the internal queue only when they are retrieved from the iterator, so multiple readers iterating in parallel over iterators obtained from &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser.read_events&quot;&gt;&lt;code&gt;read_events()&lt;/code&gt;&lt;/a&gt; will have unpredictable results.</source>
          <target state="translated">以前の&lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser.read_events&quot;&gt; &lt;code&gt;read_events()&lt;/code&gt; の&lt;/a&gt;呼び出しで提供されたイベントは、再度生成されません。イベントは、イテレーターから取得されたときにのみ内部キューから消費されるため、&lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser.read_events&quot;&gt; &lt;code&gt;read_events()&lt;/code&gt; &lt;/a&gt;から取得されたイテレーターに対して並列に反復する複数のリーダーは、予期しない結果になります。</target>
        </trans-unit>
        <trans-unit id="87f71e1dc2cd3d8c17bb5319ed639fa3a8cf8f61" translate="yes" xml:space="preserve">
          <source>Events that must be waited for on this file object.</source>
          <target state="translated">このファイルオブジェクトで待機しなければならないイベント。</target>
        </trans-unit>
        <trans-unit id="adeeb9efa131202d0465b43c1ad89c9661314fa7" translate="yes" xml:space="preserve">
          <source>Ever since the SSL module was introduced in Python 2.6, the &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; class has provided two related but distinct areas of functionality:</source>
          <target state="translated">SSLモジュールがPython 2.6で導入されて以来、&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; &lt;/a&gt;クラスは2つの関連するが異なる機能の領域を提供しています。</target>
        </trans-unit>
        <trans-unit id="3c376cc3b04f0eda118d988e7f66f6dd0fa1fb91" translate="yes" xml:space="preserve">
          <source>Every distribution includes some metadata, which you can extract using the &lt;code&gt;metadata()&lt;/code&gt; function:</source>
          <target state="translated">すべてのディストリビューションにはメタデータが含まれており、 &lt;code&gt;metadata()&lt;/code&gt; 関数を使用して抽出できます。</target>
        </trans-unit>
        <trans-unit id="5790b30b90561d5789c25e94ba42cf2105a4a907" translate="yes" xml:space="preserve">
          <source>Every handler with a method named like &lt;code&gt;&amp;lt;protocol&amp;gt;_request()&lt;/code&gt; has that method called to pre-process the request.</source>
          <target state="translated">&lt;code&gt;&amp;lt;protocol&amp;gt;_request()&lt;/code&gt; のような名前のメソッドを持つすべてのハンドラーには、リクエストを前処理するために呼び出されるメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="87dd6abe2d83be9ac05336f5766d67cec0efbdc0" translate="yes" xml:space="preserve">
          <source>Every handler with a method named like &lt;code&gt;&amp;lt;protocol&amp;gt;_response()&lt;/code&gt; has that method called to post-process the response.</source>
          <target state="translated">&lt;code&gt;&amp;lt;protocol&amp;gt;_response()&lt;/code&gt; のような名前のメソッドを持つすべてのハンドラーには、応答を後処理するために呼び出されるメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="023f8d53f12bb3daad0277efc4c3662d502e1d1f" translate="yes" xml:space="preserve">
          <source>Every new component that is installed using &lt;a href=&quot;distutils#module-distutils&quot;&gt;&lt;code&gt;distutils&lt;/code&gt;&lt;/a&gt; or a Distutils-based system will follow the same scheme to copy its file in the right places.</source>
          <target state="translated">&lt;a href=&quot;distutils#module-distutils&quot;&gt; &lt;code&gt;distutils&lt;/code&gt; &lt;/a&gt;またはDistutilsベースのシステムを使用してインストールされるすべての新しいコンポーネントは、同じスキームに従ってファイルを正しい場所にコピーします。</target>
        </trans-unit>
        <trans-unit id="986fbc42665dc91f40f77aea3b95a8ca43c093c4" translate="yes" xml:space="preserve">
          <source>Every type is compatible with &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのタイプは&lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt;と互換性があります。</target>
        </trans-unit>
        <trans-unit id="53b7884e98183ceb9b4cfd1d011ac92d5357e2a0" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#email.parser.BytesParser&quot;&gt;&lt;code&gt;BytesParser&lt;/code&gt;&lt;/a&gt;, except that &lt;em&gt;headersonly&lt;/em&gt; defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">まったく同じ&lt;a href=&quot;#email.parser.BytesParser&quot;&gt; &lt;code&gt;BytesParser&lt;/code&gt; &lt;/a&gt;、ことを除いて&lt;em&gt;headersonly&lt;/em&gt;デフォルト &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46f25aeba7b5a83d7186802db481749d4e234b64" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#email.parser.Parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt;, except that &lt;em&gt;headersonly&lt;/em&gt; defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#email.parser.Parser&quot;&gt; &lt;code&gt;Parser&lt;/code&gt; &lt;/a&gt;とまったく同じですが、&lt;em&gt;headersonlyの&lt;/em&gt;デフォルトは &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="efd3fcb68660d6ddc801f3d5fff097ef21ad1001" translate="yes" xml:space="preserve">
          <source>Exactly one of &lt;em&gt;hex&lt;/em&gt;, &lt;em&gt;bytes&lt;/em&gt;, &lt;em&gt;bytes_le&lt;/em&gt;, &lt;em&gt;fields&lt;/em&gt;, or &lt;em&gt;int&lt;/em&gt; must be given. The &lt;em&gt;version&lt;/em&gt; argument is optional; if given, the resulting UUID will have its variant and version number set according to &lt;a href=&quot;https://tools.ietf.org/html/rfc4122.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 4122&lt;/strong&gt;&lt;/a&gt;, overriding bits in the given &lt;em&gt;hex&lt;/em&gt;, &lt;em&gt;bytes&lt;/em&gt;, &lt;em&gt;bytes_le&lt;/em&gt;, &lt;em&gt;fields&lt;/em&gt;, or &lt;em&gt;int&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;hex&lt;/em&gt;、&lt;em&gt;bytes&lt;/em&gt;、&lt;em&gt;bytes_le&lt;/em&gt;、&lt;em&gt;fields&lt;/em&gt;、または&lt;em&gt;intの&lt;/em&gt;いずれかを正確に指定する必要があります。&lt;em&gt;バージョン&lt;/em&gt;引数はオプションです。指定した場合、結果のUUIDには、&lt;a href=&quot;https://tools.ietf.org/html/rfc4122.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 4122&lt;/strong&gt;&lt;/a&gt;に従ってバリアントとバージョン番号が設定され、指定された&lt;em&gt;hex&lt;/em&gt;、&lt;em&gt;bytes&lt;/em&gt;、&lt;em&gt;bytes_le&lt;/em&gt;、&lt;em&gt;fields&lt;/em&gt;、または&lt;em&gt;intの&lt;/em&gt;ビットが上書きされ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="065d263ca721579032051461d0f85c251cda8d94" translate="yes" xml:space="preserve">
          <source>Examine the set of signals that are pending for delivery to the calling thread (i.e., the signals which have been raised while blocked). Return the set of the pending signals.</source>
          <target state="translated">呼び出し側スレッドへの配信が保留されているシグナルのセット(つまり、ブロックされている間に発生したシグナル)を調べます。保留中のシグナルのセットを返す。</target>
        </trans-unit>
        <trans-unit id="8140c9559ead396556a69cb7c13870d100e23e12" translate="yes" xml:space="preserve">
          <source>Examining Symbol Tables</source>
          <target state="translated">シンボルテーブルの検討</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="ba64059d54ecf2e4f58095e4ffbe78024c708b65" translate="yes" xml:space="preserve">
          <source>Example 1, copy an existing database into another:</source>
          <target state="translated">例1、既存のデータベースを別のデータベースにコピーします。</target>
        </trans-unit>
        <trans-unit id="137645e6411b45ecbf0303ef253386e5ec8dcb85" translate="yes" xml:space="preserve">
          <source>Example 2, copy an existing database into a transient copy:</source>
          <target state="translated">例2、既存のデータベースを過渡的なコピーにコピーします。</target>
        </trans-unit>
        <trans-unit id="c37bc538c5bc9675c11e37a0307e34b3f0c1f015" translate="yes" xml:space="preserve">
          <source>Example HTML Parser Application</source>
          <target state="translated">HTMLパーサーアプリケーションの例</target>
        </trans-unit>
        <trans-unit id="0debb52aa0d853532835e594e85ae883978d8199" translate="yes" xml:space="preserve">
          <source>Example Objects</source>
          <target state="translated">オブジェクトの例</target>
        </trans-unit>
        <trans-unit id="d73338318be14a2ee00fe61b468ee7e6b4519df6" translate="yes" xml:space="preserve">
          <source>Example call to enable tracing with &lt;em&gt;skip&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;skipを使用して&lt;/em&gt;トレースを有効にする呼び出しの例：</target>
        </trans-unit>
        <trans-unit id="a6887178fdbaf756ad1659904ae754f41804ae6d" translate="yes" xml:space="preserve">
          <source>Example for a TurtleScreen instance named &lt;code&gt;screen&lt;/code&gt; and a Turtle instance named turtle:</source>
          <target state="translated">&lt;code&gt;screen&lt;/code&gt; という名前のTurtleScreen インスタンスとturtleという名前のTurtleインスタンスの例：</target>
        </trans-unit>
        <trans-unit id="865e4a8d44043cfd9cf400e7ea38cc03278129a8" translate="yes" xml:space="preserve">
          <source>Example for a context with one CA cert and one other cert:</source>
          <target state="translated">1 つの CA 証明書ともう 1 つの証明書を持つコンテキストの例。</target>
        </trans-unit>
        <trans-unit id="fef9a506f6a96368c854bbe7b4f86e06f07d8682" translate="yes" xml:space="preserve">
          <source>Example of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bootstrapping_(statistics)&quot;&gt;statistical bootstrapping&lt;/a&gt; using resampling with replacement to estimate a confidence interval for the mean of a sample of size five:</source>
          <target state="translated">サイズ5のサンプルの平均の信頼区間を推定するために、置換を伴うリサンプリングを使用した&lt;a href=&quot;https://en.wikipedia.org/wiki/Bootstrapping_(statistics)&quot;&gt;統計ブートストラップの&lt;/a&gt;例：</target>
        </trans-unit>
        <trans-unit id="86c7e42216c745a3820b86e8839c09c2adbf656f" translate="yes" xml:space="preserve">
          <source>Example of &lt;code&gt;ContextDecorator&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ContextDecorator&lt;/code&gt; の例：</target>
        </trans-unit>
        <trans-unit id="8357286354d7663d68a111084817ddfbcaa5aee9" translate="yes" xml:space="preserve">
          <source>Example of Client Usage</source>
          <target state="translated">クライアントの使用例</target>
        </trans-unit>
        <trans-unit id="5440db91bbed4c909b616c48187fbe4347314229" translate="yes" xml:space="preserve">
          <source>Example of Client and Server Usage</source>
          <target state="translated">クライアントとサーバーの使用例</target>
        </trans-unit>
        <trans-unit id="8c2d5ec44c12d9ff6754b9395d719e20a220c4a2" translate="yes" xml:space="preserve">
          <source>Example of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests&quot;&gt;resampling permutation test&lt;/a&gt; to determine the statistical significance or &lt;a href=&quot;https://en.wikipedia.org/wiki/P-value&quot;&gt;p-value&lt;/a&gt; of an observed difference between the effects of a drug versus a placebo:</source>
          <target state="translated">薬物とプラセボの効果の間に観察された差の統計的有意性または&lt;a href=&quot;https://en.wikipedia.org/wiki/P-value&quot;&gt;p値&lt;/a&gt;を決定するための&lt;a href=&quot;https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests&quot;&gt;リサンプリング順列検定の&lt;/a&gt;例：</target>
        </trans-unit>
        <trans-unit id="f554a16636435edbf30d67f304f055459fe1f648" translate="yes" xml:space="preserve">
          <source>Example of a WSGI application serving the current directory, accept optional directory and port number (default: 8000) on the command line:</source>
          <target state="translated">現在のディレクトリにサービスを提供するWSGIアプリケーションの例、コマンドラインで任意のディレクトリとポート番号(デフォルトは8000)を受け入れます。</target>
        </trans-unit>
        <trans-unit id="b39c929319837464183a66a188d5a4b74c358856" translate="yes" xml:space="preserve">
          <source>Example of a script rewriter that transforms float literals into Decimal objects:</source>
          <target state="translated">浮動小数点リテラルを10進数オブジェクトに変換するスクリプトリライタの例。</target>
        </trans-unit>
        <trans-unit id="3df4e542b42fe51861f15425bec08c9e581be4f2" translate="yes" xml:space="preserve">
          <source>Example of a segmentation fault on Linux with and without enabling the fault handler:</source>
          <target state="translated">フォルトハンドラを有効にした場合としない場合の Linux でのセグメンテーションフォルトの例。</target>
        </trans-unit>
        <trans-unit id="8494eb293c63909857aec1796f431b7a0bcbfea9" translate="yes" xml:space="preserve">
          <source>Example of an LRU cache for static web content:</source>
          <target state="translated">静的なWebコンテンツのためのLRUキャッシュの例。</target>
        </trans-unit>
        <trans-unit id="34595c8b7423a2763fbbca8c42af8ea2cc5eda5c" translate="yes" xml:space="preserve">
          <source>Example of an unhandled exception:</source>
          <target state="translated">ハンドリングされていない例外の例。</target>
        </trans-unit>
        <trans-unit id="a3bc5b7aba328df1e407aaf62166c8f472d2c871" translate="yes" xml:space="preserve">
          <source>Example of changing the attribute &amp;ldquo;target&amp;rdquo; of every link in first paragraph:</source>
          <target state="translated">最初の段落のすべてのリンクの属性「ターゲット」を変更する例：</target>
        </trans-unit>
        <trans-unit id="c8cc5adbc6bda92d954c23713e40bb147c821ac5" translate="yes" xml:space="preserve">
          <source>Example of coroutine displaying the current date every second for 5 seconds:</source>
          <target state="translated">現在の日付を1秒ごとに5秒間表示するコルーチンの例</target>
        </trans-unit>
        <trans-unit id="ace7964881fa427c9b955e08733877f771e2256c" translate="yes" xml:space="preserve">
          <source>Example of counting days to an event:</source>
          <target state="translated">イベントまでの日数をカウントする例</target>
        </trans-unit>
        <trans-unit id="36b3976e8dd6454c66e771264b482ca8db8300d9" translate="yes" xml:space="preserve">
          <source>Example of efficiently computing &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci numbers&lt;/a&gt; using a cache to implement a &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;dynamic programming&lt;/a&gt; technique:</source>
          <target state="translated">キャッシュを使用して&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;動的プログラミング&lt;/a&gt;手法を実装する&lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;フィボナッチ数&lt;/a&gt;を効率的に計算する例：</target>
        </trans-unit>
        <trans-unit id="92e63a15b16a1e3592e498eb90ae1c50fad07a68" translate="yes" xml:space="preserve">
          <source>Example of how to GZIP compress a binary string:</source>
          <target state="translated">GZIPでバイナリ文字列を圧縮する方法の例。</target>
        </trans-unit>
        <trans-unit id="1474ae500b5a001a9b1d649894b172c8f216da9b" translate="yes" xml:space="preserve">
          <source>Example of how to GZIP compress an existing file:</source>
          <target state="translated">既存のファイルをGZIPで圧縮する方法の例。</target>
        </trans-unit>
        <trans-unit id="85dc75b483cd6ca6d07c566852cffb63738c9c78" translate="yes" xml:space="preserve">
          <source>Example of how to create a compressed GZIP file:</source>
          <target state="translated">圧縮されたGZIPファイルを作成する方法の例。</target>
        </trans-unit>
        <trans-unit id="4dd12dcc603cf2780656fa2a8bb16e8d59559b18" translate="yes" xml:space="preserve">
          <source>Example of how to read a compressed file:</source>
          <target state="translated">圧縮ファイルを読み込む方法の例</target>
        </trans-unit>
        <trans-unit id="6f2cfef200873444a0503cb83516d7f97f10d111" translate="yes" xml:space="preserve">
          <source>Example of how to wait for enqueued tasks to be completed:</source>
          <target state="translated">エンキューされたタスクが完了するまで待つ方法の例</target>
        </trans-unit>
        <trans-unit id="279156ed9b71d7424658bef303f91a5f62b81e6a" translate="yes" xml:space="preserve">
          <source>Example of letting user specified command-line arguments take precedence over environment variables which in turn take precedence over default values:</source>
          <target state="translated">ユーザが指定したコマンドライン引数を環境変数よりも優先させる例。</target>
        </trans-unit>
        <trans-unit id="626096412640de8c129ec606e725bbd326ee4695" translate="yes" xml:space="preserve">
          <source>Example of output before/after running some tests of the Python test suite:</source>
          <target state="translated">Pythonテストスイートのいくつかのテストを実行する前後の出力例</target>
        </trans-unit>
        <trans-unit id="c591df6074ed0fe5e6bf8dc7b32c667a8e5dba71" translate="yes" xml:space="preserve">
          <source>Example of output of the Python test suite (traceback limited to 25 frames):</source>
          <target state="translated">Pythonテストスイートの出力例(トレースバックは25フレームに限定)。</target>
        </trans-unit>
        <trans-unit id="baf8308b40270c8e949acaa0e52904b087b78869" translate="yes" xml:space="preserve">
          <source>Example of output of the Python test suite:</source>
          <target state="translated">Pythonテストスイートの出力例です。</target>
        </trans-unit>
        <trans-unit id="41696aeac4c168c952d61557ba52d98acdc47f3b" translate="yes" xml:space="preserve">
          <source>Example of simulating Python&amp;rsquo;s internal lookup chain:</source>
          <target state="translated">Pythonの内部ルックアップチェーンのシミュレーションの例：</target>
        </trans-unit>
        <trans-unit id="d13f5ff947b45e47e249594d1bd333d3fdd19f37" translate="yes" xml:space="preserve">
          <source>Example of tokenizing from the command line. The script:</source>
          <target state="translated">コマンドラインからのトークン化の例。スクリプトです。</target>
        </trans-unit>
        <trans-unit id="ec1136270e452edec85ece96cdcd819465f02495" translate="yes" xml:space="preserve">
          <source>Example of usage:</source>
          <target state="translated">使用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="ff254b80ff4deddde105df533b4ecf09cb09b4b9" translate="yes" xml:space="preserve">
          <source>Example of using &lt;a href=&quot;#operator.itemgetter&quot;&gt;&lt;code&gt;itemgetter()&lt;/code&gt;&lt;/a&gt; to retrieve specific fields from a tuple record:</source>
          <target state="translated">&lt;a href=&quot;#operator.itemgetter&quot;&gt; &lt;code&gt;itemgetter()&lt;/code&gt; &lt;/a&gt;を使用してタプルレコードから特定のフィールドを取得する例：</target>
        </trans-unit>
        <trans-unit id="1f16a763880498f7b430c362f22c1b3f123bbad9" translate="yes" xml:space="preserve">
          <source>Example patterns for using the &lt;a href=&quot;#collections.ChainMap&quot;&gt;&lt;code&gt;ChainMap&lt;/code&gt;&lt;/a&gt; class to simulate nested contexts:</source>
          <target state="translated">&lt;a href=&quot;#collections.ChainMap&quot;&gt; &lt;code&gt;ChainMap&lt;/code&gt; &lt;/a&gt;クラスを使用してネストされたコンテキストをシミュレートするパターンの例：</target>
        </trans-unit>
        <trans-unit id="b57fbbce3024226f494b8c9f6b74c9e0f9482dfe" translate="yes" xml:space="preserve">
          <source>Example usage of ModuleFinder</source>
          <target state="translated">ModuleFinderの使用例</target>
        </trans-unit>
        <trans-unit id="97e958b379493045126047344a14c53561a623ed" translate="yes" xml:space="preserve">
          <source>Example usage of some of the methods of &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; の&lt;/a&gt;いくつかのメソッドの使用例：</target>
        </trans-unit>
        <trans-unit id="60f284f90e62dd3c3da0a06cd83c63a0a2636e6f" translate="yes" xml:space="preserve">
          <source>Example usage of the binary objects. We&amp;rsquo;re going to transfer an image over XMLRPC:</source>
          <target state="translated">バイナリオブジェクトの使用例。XMLRPCを介して画像を転送します。</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="c7a9f6edde5b90563dc590480ce2c19b3ceb8c4c" translate="yes" xml:space="preserve">
          <source>Example use with input stream:</source>
          <target state="translated">入力ストリームでの使用例</target>
        </trans-unit>
        <trans-unit id="40207c8cfe3dfb26f745fedfb1e280021e268b08" translate="yes" xml:space="preserve">
          <source>Example use with output streams:</source>
          <target state="translated">出力ストリームでの使用例。</target>
        </trans-unit>
        <trans-unit id="23f9d603e16f8ef16b61cb7dd71733745d6dc774" translate="yes" xml:space="preserve">
          <source>Example use:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="a53066aab3018c902feba5bb8428b1e0c0ca3f41" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;Tuple[T1, T2]&lt;/code&gt; is a tuple of two elements corresponding to type variables T1 and T2. &lt;code&gt;Tuple[int, float, str]&lt;/code&gt; is a tuple of an int, a float and a string.</source>
          <target state="translated">例： &lt;code&gt;Tuple[T1, T2]&lt;/code&gt; は、型変数T1およびT2に対応する2つの要素のタプルです。 &lt;code&gt;Tuple[int, float, str]&lt;/code&gt; は、int、float、およびstringのタプルです。</target>
        </trans-unit>
        <trans-unit id="d5ff9b1ca76cd267a4d86feb025b24f6e8e44e83" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;http.client.responses[http.client.NOT_FOUND]&lt;/code&gt; is &lt;code&gt;'Not Found'&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;http.client.responses[http.client.NOT_FOUND]&lt;/code&gt; is &lt;code&gt;'Not Found'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3bac6bf28038e84740e2a40be66e3c0eab528c1a" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;quote('/El Ni&amp;ntilde;o/')&lt;/code&gt; yields &lt;code&gt;'/El%20Ni%C3%B1o/'&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;quote('/El Ni&amp;ntilde;o/')&lt;/code&gt; は &lt;code&gt;'/El%20Ni%C3%B1o/'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="11fef01fb5ea38d0eca370802e6deeb2a2aace34" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;quote_from_bytes(b'a&amp;amp;\xef')&lt;/code&gt; yields &lt;code&gt;'a%26%EF'&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;quote_from_bytes(b'a&amp;amp;\xef')&lt;/code&gt; は &lt;code&gt;'a%26%EF'&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="51cdde3985a7fb4acf75fc1fdc43cf98aa4d7fb8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;quote_plus('/El Ni&amp;ntilde;o/')&lt;/code&gt; yields &lt;code&gt;'%2FEl+Ni%C3%B1o%2F'&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;quote_plus('/El Ni&amp;ntilde;o/')&lt;/code&gt; は &lt;code&gt;'%2FEl+Ni%C3%B1o%2F'&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b8c50fbefe3d09e28519b8ae7c691cb75894a1fd" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;unquote('/El%20Ni%C3%B1o/')&lt;/code&gt; yields &lt;code&gt;'/El Ni&amp;ntilde;o/'&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;unquote('/El%20Ni%C3%B1o/')&lt;/code&gt; は &lt;code&gt;'/El Ni&amp;ntilde;o/'&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b8d066e789bc4b0e4ff9e3d86d53595cc3ee6e29" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;unquote_plus('/El+Ni%C3%B1o/')&lt;/code&gt; yields &lt;code&gt;'/El Ni&amp;ntilde;o/'&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;unquote_plus('/El+Ni%C3%B1o/')&lt;/code&gt; は &lt;code&gt;'/El Ni&amp;ntilde;o/'&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="9e1ac2893d1259af6f482135918cb008646b0886" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;unquote_to_bytes('a%26%EF')&lt;/code&gt; yields &lt;code&gt;b'a&amp;amp;\xef'&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;unquote_to_bytes('a%26%EF')&lt;/code&gt; は &lt;code&gt;b'a&amp;amp;\xef'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8c3aa7e06017e8ff98680df27fbdea1b412f07ad" translate="yes" xml:space="preserve">
          <source>Example: Emulation of compile()</source>
          <target state="translated">例。compile()のエミュレーション</target>
        </trans-unit>
        <trans-unit id="b26c82a6a778161b5bdbdbe192421089f6e5017f" translate="yes" xml:space="preserve">
          <source>Example: Given the function &lt;code&gt;myfunc()&lt;/code&gt;:</source>
          <target state="translated">例：関数 &lt;code&gt;myfunc()&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="0fa10e8510aad6feea266e052f24f7f689f84c23" translate="yes" xml:space="preserve">
          <source>Example: print all descriptions of arguments:</source>
          <target state="translated">例:引数のすべての説明を表示します。</target>
        </trans-unit>
        <trans-unit id="70c3542949a842ba3f647de478464545ff410014" translate="yes" xml:space="preserve">
          <source>Example: print all keyword-only arguments without default values:</source>
          <target state="translated">例:デフォルト値なしでキーワードのみの引数をすべて表示します。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="6d082aaac0220b28f2b8c187674d4fc1ad5d01c2" translate="yes" xml:space="preserve">
          <source>Examples (all on a SVR4 compliant system):</source>
          <target state="translated">例(すべてSVR4準拠のシステム上で)。</target>
        </trans-unit>
        <trans-unit id="ba7cb01919ec9e725d24d29be0234801f58640ba" translate="yes" xml:space="preserve">
          <source>Examples and Recipes</source>
          <target state="translated">事例とレシピ</target>
        </trans-unit>
        <trans-unit id="a361faee4c8e9d15d95654bf795e643a84fc895c" translate="yes" xml:space="preserve">
          <source>Examples containing both expected output and an exception are not supported. Trying to guess where one ends and the other begins is too error-prone, and that also makes for a confusing test.</source>
          <target state="translated">期待される出力と例外の両方を含む例はサポートされていません。片方がどこで終わり、もう片方がどこで始まるかを推測しようとするのはエラーが発生しやすく、テストを混乱させる原因にもなります。</target>
        </trans-unit>
        <trans-unit id="86ce654eab3bc677fad0231965f3321413be76f0" translate="yes" xml:space="preserve">
          <source>Examples of &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; arithmetic:</source>
          <target state="translated">&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;演算の例：</target>
        </trans-unit>
        <trans-unit id="a9cb2f8191f0236461789853c793fe43887124be" translate="yes" xml:space="preserve">
          <source>Examples of Usage: &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用例：&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f53aa95370601fa81bc3dadc1f65b4708e63a4cd" translate="yes" xml:space="preserve">
          <source>Examples of Usage: &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用例：&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ec3db14421f66f5032b9ec5cc4a9289b18017179" translate="yes" xml:space="preserve">
          <source>Examples of Usage: &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用例：&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="217609f8d539d8fd74dde985eae19ac4f03520a8" translate="yes" xml:space="preserve">
          <source>Examples of returned values:</source>
          <target state="translated">返される値の例。</target>
        </trans-unit>
        <trans-unit id="259aa5fcfc60a59c500052a700193e18835bd2e4" translate="yes" xml:space="preserve">
          <source>Examples of these sections in the file are given below.</source>
          <target state="translated">ファイル内のこれらのセクションの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="6854cb6d7461f271239ae6431fef4bbfb9d0849f" translate="yes" xml:space="preserve">
          <source>Examples of usage</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="91fc4c486785c00452b26ce872ca765962ee129b" translate="yes" xml:space="preserve">
          <source>Examples of usage: &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">使用例：&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7140845a3bb12ad8574343147a832baa55c8d7e8" translate="yes" xml:space="preserve">
          <source>Examples of working with &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトの操作の例：</target>
        </trans-unit>
        <trans-unit id="f129f0c85e501b41344120925f5197433ede1e8c" translate="yes" xml:space="preserve">
          <source>Examples of working with a &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトの使用例：</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="cc3ff6324e8eebbf50e9554bcdd2e7c7a2cbc65b" translate="yes" xml:space="preserve">
          <source>Exceeding limitations on different file systems can cause decompression failed. Such as allowable characters in the directory entries, length of the file name, length of the pathname, size of a single file, and number of files, etc.</source>
          <target state="translated">異なるファイルシステムの制限を超えると、解凍に失敗することがあります。ディレクトリエントリの許容文字数、ファイル名の長さ、パス名の長さ、1つのファイルのサイズ、ファイルの数など。</target>
        </trans-unit>
        <trans-unit id="1f7913834e700496b52dad8f01ac19616ff774c6" translate="yes" xml:space="preserve">
          <source>Except for the code &lt;code&gt;'C'&lt;/code&gt;, the language code corresponds to &lt;a href=&quot;https://tools.ietf.org/html/rfc1766.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1766&lt;/strong&gt;&lt;/a&gt;. &lt;em&gt;language code&lt;/em&gt; and &lt;em&gt;encoding&lt;/em&gt; may be &lt;code&gt;None&lt;/code&gt; if their values cannot be determined.</source>
          <target state="translated">コード &lt;code&gt;'C'&lt;/code&gt; 除いて、言語コードは&lt;a href=&quot;https://tools.ietf.org/html/rfc1766.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1766に&lt;/strong&gt;&lt;/a&gt;対応してい&lt;strong&gt;ます&lt;/strong&gt;。&lt;em&gt;言語コード&lt;/em&gt;と&lt;em&gt;エンコーディング&lt;/em&gt;は、それらの値を決定できない場合は &lt;code&gt;None&lt;/code&gt; になることがあります。</target>
        </trans-unit>
        <trans-unit id="80904ba25a9e3243ed632e1ff1cc6a03a8d1747e" translate="yes" xml:space="preserve">
          <source>Except for the code &lt;code&gt;'C'&lt;/code&gt;, the language code corresponds to &lt;a href=&quot;https://tools.ietf.org/html/rfc1766.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 1766&lt;/strong&gt;&lt;/a&gt;. &lt;em&gt;language code&lt;/em&gt; and &lt;em&gt;encoding&lt;/em&gt; may be &lt;code&gt;None&lt;/code&gt; if their values cannot be determined.</source>
          <target state="translated">コード &lt;code&gt;'C'&lt;/code&gt; 除いて、言語コードは&lt;a href=&quot;https://tools.ietf.org/html/rfc1766.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 1766に&lt;/strong&gt;&lt;/a&gt;対応してい&lt;strong&gt;ます&lt;/strong&gt;。&lt;em&gt;言語コード&lt;/em&gt;と&lt;em&gt;エンコーディング&lt;/em&gt;は、それらの値を決定できない場合は &lt;code&gt;None&lt;/code&gt; になることがあります。</target>
        </trans-unit>
        <trans-unit id="20049bc069b0a04404c23d571b5e0b56f0660c02" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="translated">Exception</target>
        </trans-unit>
        <trans-unit id="0748cd739094a93fe7da05e30469096aa55c80e4" translate="yes" xml:space="preserve">
          <source>Exception classes</source>
          <target state="translated">例外クラス</target>
        </trans-unit>
        <trans-unit id="312428d3e8acfd1d42aeb467b6b1c11802d7c8c2" translate="yes" xml:space="preserve">
          <source>Exception failing because of &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; invalidity: incorrect attributes, incorrect &lt;em&gt;Set-Cookie&lt;/em&gt; header, etc.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2109が&lt;/strong&gt;&lt;/a&gt;無効であるために失敗した例外：不正な属性、不正な&lt;em&gt;Set-Cookie&lt;/em&gt;ヘッダーなど</target>
        </trans-unit>
        <trans-unit id="209011554fcfc911dcec7eb38e42eca35be08388" translate="yes" xml:space="preserve">
          <source>Exception hierarchy</source>
          <target state="translated">例外階層</target>
        </trans-unit>
        <trans-unit id="8b676f0d2de85f0abc2af15f19b9c6a83a75d753" translate="yes" xml:space="preserve">
          <source>Exception raised by &lt;code&gt;Connection.recv_bytes_into()&lt;/code&gt; when the supplied buffer object is too small for the message read.</source>
          <target state="translated">指定されたバッファーオブジェクトが小さすぎてメッセージを読み取れない場合に、 &lt;code&gt;Connection.recv_bytes_into()&lt;/code&gt; によって発生する例外。</target>
        </trans-unit>
        <trans-unit id="8e9814d47307c441f0f179379aabd00fa81be39a" translate="yes" xml:space="preserve">
          <source>Exception raised by strict parsers if a single option appears twice during reading from a single file, string or dictionary. This catches misspellings and case sensitivity-related errors, e.g. a dictionary may have two keys representing the same case-insensitive configuration key.</source>
          <target state="translated">一つのファイル、文字列、辞書からの読み込み中に、一つのオプションが二度現れると、 厳密なパーサによって例外が発生します。これはスペルミスや大文字小文字の区別に関連したエラーを捕捉します。</target>
        </trans-unit>
        <trans-unit id="0be211047c69b5d08f64a29ebebc88eb78862e7f" translate="yes" xml:space="preserve">
          <source>Exception raised by the &lt;a href=&quot;#bdb.Bdb&quot;&gt;&lt;code&gt;Bdb&lt;/code&gt;&lt;/a&gt; class for quitting the debugger.</source>
          <target state="translated">デバッガーを終了するために&lt;a href=&quot;#bdb.Bdb&quot;&gt; &lt;code&gt;Bdb&lt;/code&gt; &lt;/a&gt;クラスによって発生した例外。</target>
        </trans-unit>
        <trans-unit id="f74f98c16d92d1f665535f7524cabfe2c83a8b61" translate="yes" xml:space="preserve">
          <source>Exception raised by the &lt;a href=&quot;#netrc.netrc&quot;&gt;&lt;code&gt;netrc&lt;/code&gt;&lt;/a&gt; class when syntactical errors are encountered in source text. Instances of this exception provide three interesting attributes: &lt;code&gt;msg&lt;/code&gt; is a textual explanation of the error, &lt;code&gt;filename&lt;/code&gt; is the name of the source file, and &lt;code&gt;lineno&lt;/code&gt; gives the line number on which the error was found.</source>
          <target state="translated">ソーステキストで構文エラーが発生した場合に&lt;a href=&quot;#netrc.netrc&quot;&gt; &lt;code&gt;netrc&lt;/code&gt; &lt;/a&gt;クラスによって発生する例外。この例外のインスタンスには、3つの興味深い属性があります &lt;code&gt;msg&lt;/code&gt; はエラーのテキストによる説明、 &lt;code&gt;filename&lt;/code&gt; はソースファイルの名前、 &lt;code&gt;lineno&lt;/code&gt; はエラーが検出された行番号を示します。</target>
        </trans-unit>
        <trans-unit id="72225b97067acb514db053e3737009c2206a61fb" translate="yes" xml:space="preserve">
          <source>Exception raised by zipimporter objects. It&amp;rsquo;s a subclass of &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt;, so it can be caught as &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt;, too.</source>
          <target state="translated">zipimporterオブジェクトによって発生した例外。それはのサブクラスだ&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;、それは次のようにキャッチすることができますので、&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;も。</target>
        </trans-unit>
        <trans-unit id="326de5ee01a9691f56ba64beec39fbde19b7e2b8" translate="yes" xml:space="preserve">
          <source>Exception raised for errors that are related to the database&amp;rsquo;s operation and not necessarily under the control of the programmer, e.g. an unexpected disconnect occurs, the data source name is not found, a transaction could not be processed, etc. It is a subclass of &lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">予期しない切断が発生した、データソース名が見つからなかった、トランザクションを処理できなかったなど、データベースの操作に関連し、必ずしもプログラマーの制御下にないエラーに対して発生した例外。これは&lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt; &lt;code&gt;DatabaseError&lt;/code&gt; の&lt;/a&gt;サブクラスです。。</target>
        </trans-unit>
        <trans-unit id="ee960a200e08a9cd1318594ffd8b99e35250caec" translate="yes" xml:space="preserve">
          <source>Exception raised for errors that are related to the database.</source>
          <target state="translated">データベースに関連するエラーに対して例外が発生しました。</target>
        </trans-unit>
        <trans-unit id="01200d3d284b1e6dc53e60c9884b2ad8119aa369" translate="yes" xml:space="preserve">
          <source>Exception raised for programming errors, e.g. table not found or already exists, syntax error in the SQL statement, wrong number of parameters specified, etc. It is a subclass of &lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プログラミングエラー、たとえばテーブルが見つからない、または既に存在する、SQLステートメントの構文エラー、指定されたパラメーターの数が間違っているなどの例外が発生しました。これは&lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt; &lt;code&gt;DatabaseError&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="4271bf7a06917b05a5d1384e0893d9d319bbe0ab" translate="yes" xml:space="preserve">
          <source>Exception raised if &lt;code&gt;add_section()&lt;/code&gt; is called with the name of a section that is already present or in strict parsers when a section if found more than once in a single input file, string or dictionary.</source>
          <target state="translated">すでに存在するセクションの名前で &lt;code&gt;add_section()&lt;/code&gt; が呼び出された場合、またはセクションが単一の入力ファイル、文字列、または辞書で複数回検出されたときに厳密なパーサーで呼び出された場合に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="057a471983601bd66f25f0c5286e874cf7e33a0b" translate="yes" xml:space="preserve">
          <source>Exception raised in case a method or database API was used which is not supported by the database, e.g. calling the &lt;a href=&quot;#sqlite3.Connection.rollback&quot;&gt;&lt;code&gt;rollback()&lt;/code&gt;&lt;/a&gt; method on a connection that does not support transaction or has transactions turned off. It is a subclass of &lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データベースでサポートされていないメソッドまたはデータベースAPIが使用された場合に例外が発生します。たとえば、トランザクションをサポートしていない、またはトランザクションがオフになっている接続で&lt;a href=&quot;#sqlite3.Connection.rollback&quot;&gt; &lt;code&gt;rollback()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。これは&lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt; &lt;code&gt;DatabaseError&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="d060797ed8d4ae3223972050fa472e9e83ba86d6" translate="yes" xml:space="preserve">
          <source>Exception raised on any errors from this module (errors from &lt;a href=&quot;socket#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; module are not caught). The reason for the exception is passed to the constructor as a string.</source>
          <target state="translated">このモジュールからのエラーで発生した例外（&lt;a href=&quot;socket#module-socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;モジュールからのエラーはキャッチされません）。例外の理由は文字列としてコンストラクタに渡されます。</target>
        </trans-unit>
        <trans-unit id="bd190d9d0aef112603ae20aa4d23969762ddd09b" translate="yes" xml:space="preserve">
          <source>Exception raised on any errors. The reason for the exception is passed to the constructor as a string.</source>
          <target state="translated">エラーが発生すると例外が発生します。例外の理由は文字列としてコンストラクタに渡されます。</target>
        </trans-unit>
        <trans-unit id="add7af7e43c5821985246901960320352b13632a" translate="yes" xml:space="preserve">
          <source>Exception raised on compression and decompression errors.</source>
          <target state="translated">圧縮および解凍エラーで例外が発生しました。</target>
        </trans-unit>
        <trans-unit id="83582aafa9421ade9e11a1c6e9ada45e9240c08e" translate="yes" xml:space="preserve">
          <source>Exception raised on errors. These are usually programming errors.</source>
          <target state="translated">エラー時に発生する例外。これらは通常、プログラミングエラーです。</target>
        </trans-unit>
        <trans-unit id="d89247aeb60c7b476bf711d788fdd3b23f45a545" translate="yes" xml:space="preserve">
          <source>Exception raised on incomplete data. These are usually not programming errors, but may be handled by reading a little more data and trying again.</source>
          <target state="translated">不完全なデータに対して発生した例外。これらは通常はプログラミングエラーではありませんが、もう少しデータを読み込んで再度試すことで対処できるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ee06e8cdc58ec38aa06821b5c570c6ead19e78bf" translate="yes" xml:space="preserve">
          <source>Exception raised on various occasions; argument is a string describing what is wrong.</source>
          <target state="translated">引数には何が問題なのかを記述した文字列を指定します。</target>
        </trans-unit>
        <trans-unit id="8aea2f4d93f31bf28c13b84df0443c26570db178" translate="yes" xml:space="preserve">
          <source>Exception raised when a browser control error occurs.</source>
          <target state="translated">ブラウザの制御エラーが発生した場合に発生する例外</target>
        </trans-unit>
        <trans-unit id="d49e7c6044bf1d82135e97b494b41e584ec919ed" translate="yes" xml:space="preserve">
          <source>Exception raised when a curses library function returns an error.</source>
          <target state="translated">curses ライブラリ関数がエラーを返すと例外が発生します。</target>
        </trans-unit>
        <trans-unit id="73bd4d3b3c0dbde6b337c936d8c4ddb67a2f15f9" translate="yes" xml:space="preserve">
          <source>Exception raised when a failure occurs within the parser module. This is generally produced for validation failures rather than the built-in &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; raised during normal parsing. The exception argument is either a string describing the reason of the failure or a tuple containing a sequence causing the failure from a parse tree passed to &lt;a href=&quot;#parser.sequence2st&quot;&gt;&lt;code&gt;sequence2st()&lt;/code&gt;&lt;/a&gt; and an explanatory string. Calls to &lt;a href=&quot;#parser.sequence2st&quot;&gt;&lt;code&gt;sequence2st()&lt;/code&gt;&lt;/a&gt; need to be able to handle either type of exception, while calls to other functions in the module will only need to be aware of the simple string values.</source>
          <target state="translated">パーサーモジュール内で障害が発生した場合に発生する例外。通常、これは、通常の解析中に発生する組み込みの&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;ではなく、検証の失敗に対して生成されます。例外の引数は、失敗の理由を説明する文字列か、&lt;a href=&quot;#parser.sequence2st&quot;&gt; &lt;code&gt;sequence2st()&lt;/code&gt; に&lt;/a&gt;渡された解析ツリーからの失敗の原因となったシーケンスと説明文字列を含むタプルです。通話&lt;a href=&quot;#parser.sequence2st&quot;&gt; &lt;code&gt;sequence2st()&lt;/code&gt; &lt;/a&gt;例外のいずれかのタイプを処理できる必要があり、モジュール内の他の関数への呼び出しは、単純な文字列値を認識する必要がありますながら。</target>
        </trans-unit>
        <trans-unit id="0cb1412863f6feab0709a71cd7908436a470d95a" translate="yes" xml:space="preserve">
          <source>Exception raised when a proxy object is used but the underlying object has been collected. This is the same as the standard &lt;a href=&quot;exceptions#ReferenceError&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">プロキシオブジェクトが使用されているが、基になるオブジェクトが収集されている場合に発生する例外。これは、標準の&lt;a href=&quot;exceptions#ReferenceError&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt;例外と同じです。</target>
        </trans-unit>
        <trans-unit id="e3633dc111c05817710e4593aa78a11ceb9920e4" translate="yes" xml:space="preserve">
          <source>Exception raised when a reply is received from the server that does not begin with a digit in the range 1&amp;ndash;5.</source>
          <target state="translated">1から5の範囲の数字で始まらない応答をサーバーから受信すると例外が発生します。</target>
        </trans-unit>
        <trans-unit id="8b175a0377a3f39fe7da494c1e660375102c528d" translate="yes" xml:space="preserve">
          <source>Exception raised when a reply is received from the server that does not fit the response specifications of the File Transfer Protocol, i.e. begin with a digit in the range 1&amp;ndash;5.</source>
          <target state="translated">ファイル転送プロトコルの応答仕様に適合しない、つまり1から5の範囲の数字で始まる応答がサーバーから受信された場合に発生する例外。</target>
        </trans-unit>
        <trans-unit id="178c3d0791275ff5c898f9c8e23a3262f4890471" translate="yes" xml:space="preserve">
          <source>Exception raised when a response code in the range 400&amp;ndash;499 is received.</source>
          <target state="translated">400〜499の範囲の応答コードを受信すると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="4313ff412f1b54328f22236a36a88ad719a8f052" translate="yes" xml:space="preserve">
          <source>Exception raised when a response code in the range 500&amp;ndash;599 is received.</source>
          <target state="translated">500〜599の範囲の応答コードを受信すると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="b310113af08754064dafc82caa63d5845c17c234" translate="yes" xml:space="preserve">
          <source>Exception raised when a specified option is not found in the specified section.</source>
          <target state="translated">指定されたセクションで指定されたオプションが見つからない場合に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="1004e9f4741227620239abe10c19ae1f580a13e0" translate="yes" xml:space="preserve">
          <source>Exception raised when a specified section is not found.</source>
          <target state="translated">指定されたセクションが見つからない場合に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d170cc3be4359bff0d1bd6c483fb6593917ddd92" translate="yes" xml:space="preserve">
          <source>Exception raised when a string passed to one of the functions here is not a valid regular expression (for example, it might contain unmatched parentheses) or when some other error occurs during compilation or matching. It is never an error if a string contains no match for a pattern. The error instance has the following additional attributes:</source>
          <target state="translated">ここで関数のいずれかに渡された文字列が有効な正規表現ではない場合(例えば、マッチしない括弧が含まれている場合など)、あるいはコンパイルやマッチングの際にその他のエラーが発生した場合に例外が発生します。文字列にパターンにマッチしないものが含まれていても、エラーになることはありません。エラーインスタンスは、以下の追加属性を持っています。</target>
        </trans-unit>
        <trans-unit id="fa4e1d32e4e5cc4617660d479d0e6e738f91e3aa" translate="yes" xml:space="preserve">
          <source>Exception raised when an error code signifying a permanent error (response codes in the range 500&amp;ndash;599) is received.</source>
          <target state="translated">永続的なエラーを示すエラーコード（500〜599の範囲の応答コード）を受信すると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="bebdf5cfc60e6b3b7fe1aaa5a65b62566a2f3963" translate="yes" xml:space="preserve">
          <source>Exception raised when an error code signifying a temporary error (response codes in the range 400&amp;ndash;499) is received.</source>
          <target state="translated">一時的なエラーを示すエラーコード（400〜499の範囲の応答コード）を受信すると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a5694a429c5b81e9ff0998944dfdfe1bb38edae7" translate="yes" xml:space="preserve">
          <source>Exception raised when an error occurs while attempting to compile the file.</source>
          <target state="translated">ファイルをコンパイルしようとしたときにエラーが発生すると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="7d2745077fcab3e366892be2556894fde814c021" translate="yes" xml:space="preserve">
          <source>Exception raised when an option referenced from a value does not exist. Subclass of &lt;a href=&quot;#configparser.InterpolationError&quot;&gt;&lt;code&gt;InterpolationError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値から参照されるオプションが存在しない場合に発生する例外。&lt;a href=&quot;#configparser.InterpolationError&quot;&gt; &lt;code&gt;InterpolationError&lt;/code&gt; の&lt;/a&gt;サブクラス。</target>
        </trans-unit>
        <trans-unit id="1b7880563336914d732cc4888dbfc1750c2e27d3" translate="yes" xml:space="preserve">
          <source>Exception raised when an unexpected reply is received from the server.</source>
          <target state="translated">サーバーから予期しない応答を受信した場合に例外が発生しました。</target>
        </trans-unit>
        <trans-unit id="f4b8fc254e42ccc6740f5732866846a4a570ce88" translate="yes" xml:space="preserve">
          <source>Exception raised when attempting to parse a file which has no section headers.</source>
          <target state="translated">セクションヘッダのないファイルを解析しようとすると、例外が発生しました。</target>
        </trans-unit>
        <trans-unit id="c79f27b9a9e561a4cfaa3a6453eb34419222db51" translate="yes" xml:space="preserve">
          <source>Exception raised when errors occur attempting to parse a file.</source>
          <target state="translated">ファイルをパースしようとするとエラーが発生した場合に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="631784ac2fbe83dd79545eb9ccb32e5e4637a3f2" translate="yes" xml:space="preserve">
          <source>Exception raised when non-blocking &lt;a href=&quot;#queue.Queue.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#queue.Queue.get_nowait&quot;&gt;&lt;code&gt;get_nowait()&lt;/code&gt;&lt;/a&gt;) is called on a &lt;a href=&quot;#queue.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; object which is empty.</source>
          <target state="translated">空の&lt;a href=&quot;#queue.Queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt;オブジェクトで非ブロッキング&lt;a href=&quot;#queue.Queue.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#queue.Queue.get_nowait&quot;&gt; &lt;code&gt;get_nowait()&lt;/code&gt; &lt;/a&gt;）が呼び出されると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="46b915457295e62b46f8751e8312793a4805b076" translate="yes" xml:space="preserve">
          <source>Exception raised when non-blocking &lt;a href=&quot;#queue.Queue.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#queue.Queue.put_nowait&quot;&gt;&lt;code&gt;put_nowait()&lt;/code&gt;&lt;/a&gt;) is called on a &lt;a href=&quot;#queue.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; object which is full.</source>
          <target state="translated">満杯の&lt;a href=&quot;#queue.Queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt;オブジェクトで非ブロッキング&lt;a href=&quot;#queue.Queue.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#queue.Queue.put_nowait&quot;&gt; &lt;code&gt;put_nowait()&lt;/code&gt; &lt;/a&gt;）が呼び出されると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="c1b955eb00c6914a5e6e63306f665ace77961838" translate="yes" xml:space="preserve">
          <source>Exception raised when something can&amp;rsquo;t be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data.</source>
          <target state="translated">binhex形式を使用して何かをエンコードできない場合（たとえば、ファイル名が長すぎてファイル名フィールドに収まらない場合）、または入力が適切にエンコードされたbinhexデータでない場合に発生する例外。</target>
        </trans-unit>
        <trans-unit id="c563209ae42fb0b135aae77ecc57a734af366ac5" translate="yes" xml:space="preserve">
          <source>Exception raised when string interpolation cannot be completed because the number of iterations exceeds &lt;a href=&quot;#configparser.MAX_INTERPOLATION_DEPTH&quot;&gt;&lt;code&gt;MAX_INTERPOLATION_DEPTH&lt;/code&gt;&lt;/a&gt;. Subclass of &lt;a href=&quot;#configparser.InterpolationError&quot;&gt;&lt;code&gt;InterpolationError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">反復数が&lt;a href=&quot;#configparser.MAX_INTERPOLATION_DEPTH&quot;&gt; &lt;code&gt;MAX_INTERPOLATION_DEPTH&lt;/code&gt; &lt;/a&gt;を超えているために文字列補間を完了できない場合に発生する例外。&lt;a href=&quot;#configparser.InterpolationError&quot;&gt; &lt;code&gt;InterpolationError&lt;/code&gt; の&lt;/a&gt;サブクラス。</target>
        </trans-unit>
        <trans-unit id="df8889c1d3d172d311451a8a2ec6064de60c1810" translate="yes" xml:space="preserve">
          <source>Exception raised when the &lt;a href=&quot;#asyncio.Queue.put_nowait&quot;&gt;&lt;code&gt;put_nowait()&lt;/code&gt;&lt;/a&gt; method is called on a queue that has reached its &lt;em&gt;maxsize&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;maxsizeに&lt;/em&gt;達したキューで&lt;a href=&quot;#asyncio.Queue.put_nowait&quot;&gt; &lt;code&gt;put_nowait()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されると、例外が発生します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ba8897a682d567138428408ab9df581f4594f8ab" translate="yes" xml:space="preserve">
          <source>Exception raised when the locale passed to &lt;a href=&quot;#locale.setlocale&quot;&gt;&lt;code&gt;setlocale()&lt;/code&gt;&lt;/a&gt; is not recognized.</source>
          <target state="translated">&lt;a href=&quot;#locale.setlocale&quot;&gt; &lt;code&gt;setlocale()&lt;/code&gt; に&lt;/a&gt;渡されたロケールが認識されない場合に発生する例外。</target>
        </trans-unit>
        <trans-unit id="bb3faee804f53ff4db6f433e551c2d08c0c32915" translate="yes" xml:space="preserve">
          <source>Exception raised when the relational integrity of the database is affected, e.g. a foreign key check fails. It is a subclass of &lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データベースのリレーショナル整合性が影響を受ける場合に発生する例外。たとえば、外部キーのチェックが失敗する。これは&lt;a href=&quot;#sqlite3.DatabaseError&quot;&gt; &lt;code&gt;DatabaseError&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="04bb87f4130b4180b1ba156d3a51be1dea3bdb9b" translate="yes" xml:space="preserve">
          <source>Exception raised when the source text into which substitutions are made does not conform to the required syntax. Subclass of &lt;a href=&quot;#configparser.InterpolationError&quot;&gt;&lt;code&gt;InterpolationError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">置換が行われるソーステキストが必要な構文に準拠していない場合に発生する例外。&lt;a href=&quot;#configparser.InterpolationError&quot;&gt; &lt;code&gt;InterpolationError&lt;/code&gt; の&lt;/a&gt;サブクラス。</target>
        </trans-unit>
        <trans-unit id="532ac37a2d888c287b65abc3fd3680b66b2ca974" translate="yes" xml:space="preserve">
          <source>Exception raised when there is some error in the response data.</source>
          <target state="translated">レスポンスデータに何らかのエラーがあった場合に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="224d233b1223bd5e534e4c92fba78ccc504d48bd" translate="yes" xml:space="preserve">
          <source>Exception to be raised when a test fails. This is deprecated in favor of &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;-based tests and &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s assertion methods.</source>
          <target state="translated">テストが失敗したときに発生する例外。&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;ベースのテストと&lt;a href=&quot;unittest#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;のアサーションメソッドのため、これは非推奨です。</target>
        </trans-unit>
        <trans-unit id="6f961bbc4f35e8d30c38075dc27127e8e39cb1ef" translate="yes" xml:space="preserve">
          <source>Exception tuple (&amp;agrave; la &lt;code&gt;sys.exc_info&lt;/code&gt;) or, if no exception has occurred, &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">例外タプル（ &lt;code&gt;sys.exc_info&lt;/code&gt; ）、または例外が発生しなかった場合は &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e151058274b1944e593ebbb920057fb138f7f000" translate="yes" xml:space="preserve">
          <source>Exception when a node does not exist in the referenced context. For example, &lt;code&gt;NamedNodeMap.removeNamedItem()&lt;/code&gt; will raise this if the node passed in does not exist in the map.</source>
          <target state="translated">参照されたコンテキストにノードが存在しない場合の例外。たとえば、渡されたノードがマップに存在しない場合、 &lt;code&gt;NamedNodeMap.removeNamedItem()&lt;/code&gt; はこれを発生させます。</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="369b35fc723492a4b2012ba48db7d24ca448035c" translate="yes" xml:space="preserve">
          <source>Exceptions and Error Handling</source>
          <target state="translated">例外とエラー処理</target>
        </trans-unit>
        <trans-unit id="df71308e3d32ab453e4717e512971ad84660cee6" translate="yes" xml:space="preserve">
          <source>Exceptions defined in this module all inherit from &lt;a href=&quot;#subprocess.SubprocessError&quot;&gt;&lt;code&gt;SubprocessError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべての継承このモジュールで定義された例外&lt;a href=&quot;#subprocess.SubprocessError&quot;&gt; &lt;code&gt;SubprocessError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="befafc060d7dd8ad7d50727f39e2bf81a426267d" translate="yes" xml:space="preserve">
          <source>Exceptions in this module are coded as class instances:</source>
          <target state="translated">このモジュールの例外は、クラス・インスタンスとしてコード化されています。</target>
        </trans-unit>
        <trans-unit id="a249548d6691d3290bc9485f451db6dd6febec8a" translate="yes" xml:space="preserve">
          <source>Exceptions raised by finalizer callbacks during garbage collection will be shown on the standard error output, but cannot be propagated. They are handled in the same way as exceptions raised from an object&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__del__&quot;&gt;&lt;code&gt;__del__()&lt;/code&gt;&lt;/a&gt; method or a weak reference&amp;rsquo;s callback.</source>
          <target state="translated">ガベージコレクション中にファイナライザーコールバックによって発生した例外は、標準エラー出力に表示されますが、伝播できません。これらは、オブジェクトの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__del__&quot;&gt; &lt;code&gt;__del__()&lt;/code&gt; &lt;/a&gt;メソッドまたは弱参照のコールバックから発生した例外と同じ方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="a8f3eecca356dbdba89502d5f4b7f7be1cd1bf0d" translate="yes" xml:space="preserve">
          <source>Exceptions raised by the callback will be noted on the standard error output, but cannot be propagated; they are handled in exactly the same way as exceptions raised from an object&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__del__&quot;&gt;&lt;code&gt;__del__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">コールバックによって発生した例外は、標準エラー出力に示されますが、伝搬することはできません。これらは、オブジェクトの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__del__&quot;&gt; &lt;code&gt;__del__()&lt;/code&gt; &lt;/a&gt;メソッドから発生した例外とまったく同じ方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="602a17b7f1d4f59e242e69ecf8bb008f79200e74" translate="yes" xml:space="preserve">
          <source>Exceptions raised in the child process, before the new program has started to execute, will be re-raised in the parent.</source>
          <target state="translated">新しいプログラムが実行を開始する前の子プロセスで発生した例外は、親プロセスで再度発生します。</target>
        </trans-unit>
        <trans-unit id="0a861a497465e6d5e961800a373ccee2f73c3c64" translate="yes" xml:space="preserve">
          <source>Exchange full</source>
          <target state="translated">フル交換</target>
        </trans-unit>
        <trans-unit id="40111bff621e73a44959a0a4b3c7a85b2711035e" translate="yes" xml:space="preserve">
          <source>Exchanging objects between processes</source>
          <target state="translated">プロセス間でのオブジェクトの交換</target>
        </trans-unit>
        <trans-unit id="c31466ffb66056cc1102e73d3e7736f02ea55d33" translate="yes" xml:space="preserve">
          <source>Exclamation</source>
          <target state="translated">Exclamation</target>
        </trans-unit>
        <trans-unit id="08b88e08cae7b5bb1e4110d2f9f58f64e8ddb558" translate="yes" xml:space="preserve">
          <source>Excluded time components are truncated, not rounded.</source>
          <target state="translated">除外された時間成分は切り捨てられており、四捨五入されていません。</target>
        </trans-unit>
        <trans-unit id="b63162a783524a1ec5efa41e95fe5121b9b98b72" translate="yes" xml:space="preserve">
          <source>Exec format error</source>
          <target state="translated">実行フォーマットエラー</target>
        </trans-unit>
        <trans-unit id="61e507592e1b0d9543a474be7a1e6119f6855048" translate="yes" xml:space="preserve">
          <source>Executable documentation / literate testing.</source>
          <target state="translated">実行可能なドキュメント/リテラルテスト。</target>
        </trans-unit>
        <trans-unit id="05733ba7a5338b29357c9f188c1b0ffe46bb2809" translate="yes" xml:space="preserve">
          <source>Executables named here without a full path will be searched in the directories given in the &lt;code id=&quot;index-3&quot;&gt;PATH&lt;/code&gt; environment variable.</source>
          <target state="translated">フルパスなしでここで指定された実行可能ファイルは、 &lt;code id=&quot;index-3&quot;&gt;PATH&lt;/code&gt; 環境変数で指定されたディレクトリで検索されます。</target>
        </trans-unit>
        <trans-unit id="286f2d3129a2b679620ae0bdaa405b24e672bf6a" translate="yes" xml:space="preserve">
          <source>Execute &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; subclasses passed to the function. The function scans the classes for methods starting with the prefix &lt;code&gt;test_&lt;/code&gt; and executes the tests individually.</source>
          <target state="translated">関数に渡された&lt;a href=&quot;unittest#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;サブクラスを実行します。関数は、接頭辞 &lt;code&gt;test_&lt;/code&gt; で始まるメソッドのクラスをスキャンし、テストを個別に実行します。</target>
        </trans-unit>
        <trans-unit id="a241e75b43251ba0271bd81025aacaae9b72202b" translate="yes" xml:space="preserve">
          <source>Execute &lt;code&gt;callable(*args, **kwargs)&lt;/code&gt; code in the context object the &lt;em&gt;run&lt;/em&gt; method is called on. Return the result of the execution or propagate an exception if one occurred.</source>
          <target state="translated">実行 &lt;code&gt;callable(*args, **kwargs)&lt;/code&gt; コンテキストオブジェクトでコードを&lt;em&gt;実行する&lt;/em&gt;メソッドがコールされます。実行の結果を返すか、例外が発生した場合はそれを伝播します。</target>
        </trans-unit>
        <trans-unit id="69ed63c879a440dcfb6d968855ae91e33bf18942" translate="yes" xml:space="preserve">
          <source>Execute a child program in a new process. On POSIX, the class uses &lt;a href=&quot;os#os.execvp&quot;&gt;&lt;code&gt;os.execvp()&lt;/code&gt;&lt;/a&gt;-like behavior to execute the child program. On Windows, the class uses the Windows &lt;code&gt;CreateProcess()&lt;/code&gt; function. The arguments to &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; are as follows.</source>
          <target state="translated">新しいプロセスで子プログラムを実行します。POSIXでは、クラスは&lt;a href=&quot;os#os.execvp&quot;&gt; &lt;code&gt;os.execvp()&lt;/code&gt; の&lt;/a&gt;ような動作を使用して子プログラムを実行します。Windowsでは、クラスはWindows &lt;code&gt;CreateProcess()&lt;/code&gt; 関数を使用します。&lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt;の引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e6a91ef61eaa929da297d5aebf9277979dbd795f" translate="yes" xml:space="preserve">
          <source>Execute a code object. When an exception occurs, &lt;a href=&quot;#code.InteractiveInterpreter.showtraceback&quot;&gt;&lt;code&gt;showtraceback()&lt;/code&gt;&lt;/a&gt; is called to display a traceback. All exceptions are caught except &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt;, which is allowed to propagate.</source>
          <target state="translated">コードオブジェクトを実行します。例外が発生すると、トレースバックを表示するために&lt;a href=&quot;#code.InteractiveInterpreter.showtraceback&quot;&gt; &lt;code&gt;showtraceback()&lt;/code&gt; &lt;/a&gt;が呼び出されます。伝播が許可されている&lt;a href=&quot;exceptions#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;/a&gt;を除くすべての例外がキャッチされます。</target>
        </trans-unit>
        <trans-unit id="7e81ce564d602b517c838c91c8da9ba683c00772" translate="yes" xml:space="preserve">
          <source>Execute a readline initialization file. The default filename is the last filename used. This calls &lt;code&gt;rl_read_init_file()&lt;/code&gt; in the underlying library.</source>
          <target state="translated">readline初期化ファイルを実行します。デフォルトのファイル名は、最後に使用されたファイル名です。これは、基礎となるライブラリの &lt;code&gt;rl_read_init_file()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ba07fbeef18083f616ae510801b11d8066bf6eb3" translate="yes" xml:space="preserve">
          <source>Execute command args with messages identified by UID, rather than message number. Returns response appropriate to command. At least one argument must be supplied; if none are provided, the server will return an error and an exception will be raised.</source>
          <target state="translated">メッセージ番号ではなく、UIDで識別されるメッセージを持つコマンド引数を実行します。コマンドに応じたレスポンスを返します。少なくとも一つの引数を与えなければなりません。 何も与えられなかった場合、サーバはエラーを返し、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="31b06121b9ec4fe8849d3894f93b635bf18f224d" translate="yes" xml:space="preserve">
          <source>Execute the (one-line) &lt;em&gt;statement&lt;/em&gt; in the context of the current stack frame. The exclamation point can be omitted unless the first word of the statement resembles a debugger command. To set a global variable, you can prefix the assignment command with a &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; statement on the same line, e.g.:</source>
          <target state="translated">現在のスタックフレームのコンテキストで（1行の）&lt;em&gt;ステートメント&lt;/em&gt;を実行します。感嘆符は、ステートメントの最初の単語がデバッガーコマンドに似ていない限り、省略できます。グローバル変数を設定するには、同じ行に&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt;ステートメントを割り当てコマンドの前に付けることができます。例：</target>
        </trans-unit>
        <trans-unit id="826334beb56840bb5c7db5683c5e7ca7ddf91968" translate="yes" xml:space="preserve">
          <source>Execute the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt;&lt;em&gt;coro&lt;/em&gt; and return the result.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;コルーチン&lt;/a&gt;&lt;em&gt;coro&lt;/em&gt;を実行して結果を返します。</target>
        </trans-unit>
        <trans-unit id="993f7355e3e5a673bcbcdb78e35376ca7db42fbf" translate="yes" xml:space="preserve">
          <source>Execute the &lt;em&gt;statement&lt;/em&gt; (given as a string or a code object) under debugger control. The debugger prompt appears before any code is executed; you can set breakpoints and type &lt;a href=&quot;#pdbcommand-continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt;, or you can step through the statement using &lt;a href=&quot;#pdbcommand-step&quot;&gt;&lt;code&gt;step&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pdbcommand-next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; (all these commands are explained below). The optional &lt;em&gt;globals&lt;/em&gt; and &lt;em&gt;locals&lt;/em&gt; arguments specify the environment in which the code is executed; by default the dictionary of the module &lt;a href=&quot;__main__#module-__main__&quot;&gt;&lt;code&gt;__main__&lt;/code&gt;&lt;/a&gt; is used. (See the explanation of the built-in &lt;a href=&quot;functions#exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; functions.)</source>
          <target state="translated">デバッガーの制御下で（文字列またはコードオブジェクトとして指定された）&lt;em&gt;ステートメントを&lt;/em&gt;実行します。デバッガーのプロンプトは、コードが実行される前に表示されます。ブレークポイントを設定して&lt;a href=&quot;#pdbcommand-continue&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;と入力するか、&lt;a href=&quot;#pdbcommand-step&quot;&gt; &lt;code&gt;step&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#pdbcommand-next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;を使用してステートメントをステップ実行できます（これらのすべてのコマンドについては以下で説明します）。オプションの&lt;em&gt;グローバル&lt;/em&gt;引数と&lt;em&gt;ローカル&lt;/em&gt;引数は、コードが実行される環境を指定します。デフォルトでは、モジュール&lt;a href=&quot;__main__#module-__main__&quot;&gt; &lt;code&gt;__main__&lt;/code&gt; の&lt;/a&gt;辞書が使用されます。 （組み込みの&lt;a href=&quot;functions#exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;functions#eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt;関数の説明を参照してください。）</target>
        </trans-unit>
        <trans-unit id="957c0a46c8c5eae402bb66fc52f1f0746167605d" translate="yes" xml:space="preserve">
          <source>Execute the SQL query of the view, through &lt;code&gt;MSIViewExecute()&lt;/code&gt;. If &lt;em&gt;params&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, it is a record describing actual values of the parameter tokens in the query.</source>
          <target state="translated">&lt;code&gt;MSIViewExecute()&lt;/code&gt; を使用して、ビューのSQLクエリを実行します。&lt;em&gt;params&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; でない場合、それはクエリ内のパラメータートークンの実際の値を説明するレコードです。</target>
        </trans-unit>
        <trans-unit id="3d06b0236831d9b4a24c24c13a620443b6325555" translate="yes" xml:space="preserve">
          <source>Execute the code at the named filesystem location and return the resulting module globals dictionary. As with a script name supplied to the CPython command line, the supplied path may refer to a Python source file, a compiled bytecode file or a valid sys.path entry containing a &lt;code&gt;__main__&lt;/code&gt; module (e.g. a zipfile containing a top-level &lt;code&gt;__main__.py&lt;/code&gt; file).</source>
          <target state="translated">指定されたファイルシステムの場所でコードを実行し、結果のモジュールグローバルディクショナリを返します。CPythonコマンドラインに指定されたスクリプト名と同様に、指定されたパスは、Pythonソースファイル、コンパイルされたバイトコードファイル、または &lt;code&gt;__main__&lt;/code&gt; モジュールを含む有効なsys.pathエントリ（例：最上位の__main__.pyを含むzipファイル）を参照できます &lt;code&gt;__main__.py&lt;/code&gt; ファイル）。</target>
        </trans-unit>
        <trans-unit id="793598dfa7dcb5d5d2f8a7449ed34dd13e3bc919" translate="yes" xml:space="preserve">
          <source>Execute the code of the specified module and return the resulting module globals dictionary. The module&amp;rsquo;s code is first located using the standard import mechanism (refer to &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; for details) and then executed in a fresh module namespace.</source>
          <target state="translated">指定されたモジュールのコードを実行し、結果のモジュールグローバルディクショナリを返します。モジュールのコードは、最初に標準のインポートメカニズムを使用して配置され（詳細は&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;を参照）、次に新しいモジュールの名前空間で実行されます。</target>
        </trans-unit>
        <trans-unit id="9e21a77bd94392e4d0027b41d97cf1fc40ff6a2e" translate="yes" xml:space="preserve">
          <source>Execute the command (a string) in a subshell. This is implemented by calling the Standard C function &lt;code&gt;system()&lt;/code&gt;, and has the same limitations. Changes to &lt;a href=&quot;sys#sys.stdin&quot;&gt;&lt;code&gt;sys.stdin&lt;/code&gt;&lt;/a&gt;, etc. are not reflected in the environment of the executed command. If &lt;em&gt;command&lt;/em&gt; generates any output, it will be sent to the interpreter standard output stream.</source>
          <target state="translated">サブシェルでコマンド（文字列）を実行します。これは、標準C関数 &lt;code&gt;system()&lt;/code&gt; を呼び出すことによって実装され、同じ制限があります。&lt;a href=&quot;sys#sys.stdin&quot;&gt; &lt;code&gt;sys.stdin&lt;/code&gt; &lt;/a&gt;などの変更は、実行したコマンドの環境には反映されません。場合は&lt;em&gt;、コマンドが&lt;/em&gt;任意の出力を生成し、それはインタプリタ標準出力ストリームに送信されます。</target>
        </trans-unit>
        <trans-unit id="2aedf6c540cf5d6012a301638f91c6d689e3a5db" translate="yes" xml:space="preserve">
          <source>Execute the command and gather statistics from the execution with the current tracing parameters, in the defined global and local environments. If not defined, &lt;em&gt;globals&lt;/em&gt; and &lt;em&gt;locals&lt;/em&gt; default to empty dictionaries.</source>
          <target state="translated">コマンドを実行し、定義されたグローバル環境とローカル環境で、現在のトレースパラメーターを使用して実行から統計を収集します。定義されていない場合、&lt;em&gt;グローバル&lt;/em&gt;と&lt;em&gt;ローカルは&lt;/em&gt;デフォルトで空の辞書になります。</target>
        </trans-unit>
        <trans-unit id="80a05e02bcf359c90586f52db20dad5469639bd2" translate="yes" xml:space="preserve">
          <source>Execute the command and gather statistics from the execution with the current tracing parameters. &lt;em&gt;cmd&lt;/em&gt; must be a string or code object, suitable for passing into &lt;a href=&quot;functions#exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コマンドを実行し、現在のトレースパラメータを使用して実行から統計を収集します。&lt;em&gt;cmd&lt;/em&gt;は、&lt;a href=&quot;functions#exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; に&lt;/a&gt;渡すのに適した文字列またはコードオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="734e46faf8e21459ae0c946eb0235e32ee99537b" translate="yes" xml:space="preserve">
          <source>Execute the current line, stop at the first possible occasion (either in a function that is called or on the next line in the current function).</source>
          <target state="translated">現在の行を実行し、最初の可能性のある機会に停止します(呼び出された関数の中か、現在の関数の次の行のいずれか)。</target>
        </trans-unit>
        <trans-unit id="b63fd92562c30795dffe275ecbc6d69bedc43beb" translate="yes" xml:space="preserve">
          <source>Execute the init line provided in the &lt;em&gt;string&lt;/em&gt; argument. This calls &lt;code&gt;rl_parse_and_bind()&lt;/code&gt; in the underlying library.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;引数で指定された初期化行を実行します。これは、基礎となるライブラリの &lt;code&gt;rl_parse_and_bind()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a9a25ececa2495c95f119e64a7b4b8eb079e7b80" translate="yes" xml:space="preserve">
          <source>Execute the program &lt;em&gt;path&lt;/em&gt; in a new process.</source>
          <target state="translated">新しいプロセスでプログラム&lt;em&gt;パス&lt;/em&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="e4fc211867504f03ecbc0ba4699cf8ff7d3f11f2" translate="yes" xml:space="preserve">
          <source>Execute the string &lt;em&gt;cmd&lt;/em&gt; in a shell with &lt;code&gt;Popen.check_output()&lt;/code&gt; and return a 2-tuple &lt;code&gt;(exitcode, output)&lt;/code&gt;. The locale encoding is used; see the notes on &lt;a href=&quot;#frequently-used-arguments&quot;&gt;Frequently Used Arguments&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;Popen.check_output()&lt;/code&gt; を使用してシェルで文字列&lt;em&gt;cmd&lt;/em&gt;を実行し、2タプル &lt;code&gt;(exitcode, output)&lt;/code&gt; 。ロケールエンコーディングが使用されます。詳細については、&lt;a href=&quot;#frequently-used-arguments&quot;&gt;よく使用される引数&lt;/a&gt;に関する注記を参照してください。</target>
        </trans-unit>
        <trans-unit id="3e7484258f8f0d962a52cb295082cfc4486e5526" translate="yes" xml:space="preserve">
          <source>Executes an SQL command against all parameter sequences or mappings found in the sequence &lt;em&gt;seq_of_parameters&lt;/em&gt;. The &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module also allows using an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt; yielding parameters instead of a sequence.</source>
          <target state="translated">シーケンス&lt;em&gt;seq_of_parametersにある&lt;/em&gt;すべてのパラメーターシーケンスまたはマッピングに対してSQLコマンドを実行します。&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; のの&lt;/a&gt;モジュールも使用可能&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;イテレータ&lt;/a&gt;代わりシーケンスのパラメータを得ています。</target>
        </trans-unit>
        <trans-unit id="5fed61f794b123d4df64a51baba8f0490dd462f4" translate="yes" xml:space="preserve">
          <source>Executes an SQL statement. The SQL statement may be parameterized (i. e. placeholders instead of SQL literals). The &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module supports two kinds of placeholders: question marks (qmark style) and named placeholders (named style).</source>
          <target state="translated">SQLステートメントを実行します。SQLステートメントはパラメーター化できます（つまり、SQLリテラルの代わりにプレースホルダー）。&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; のの&lt;/a&gt;疑問符（qmarkスタイル）と命名プレースホルダ（命名スタイル）：モジュールは、2つのプレースホルダの種類をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c49ddd797cbb0588fd381fc136bcc980a935ae82" translate="yes" xml:space="preserve">
          <source>Executing code in thread or process pools</source>
          <target state="translated">スレッドプールまたはプロセスプールでのコードの実行</target>
        </trans-unit>
        <trans-unit id="de93521cc9f60a060ec9a4429e441b99ed1e28ff" translate="yes" xml:space="preserve">
          <source>Executing the event means executing &lt;code&gt;action(*argument, **kwargs)&lt;/code&gt;. &lt;em&gt;argument&lt;/em&gt; is a sequence holding the positional arguments for &lt;em&gt;action&lt;/em&gt;. &lt;em&gt;kwargs&lt;/em&gt; is a dictionary holding the keyword arguments for &lt;em&gt;action&lt;/em&gt;.</source>
          <target state="translated">イベントを実行するとは、 &lt;code&gt;action(*argument, **kwargs)&lt;/code&gt; 実行することを意味します。&lt;em&gt;argument&lt;/em&gt;は、&lt;em&gt;action&lt;/em&gt;の位置引数を保持するシーケンスです。&lt;em&gt;kwargs&lt;/em&gt;は、&lt;em&gt;action&lt;/em&gt;のキーワード引数を保持する辞書です。</target>
        </trans-unit>
        <trans-unit id="b44827a87c41a75678cdd5f76bd61447a3fc10f5" translate="yes" xml:space="preserve">
          <source>Execution of Python signal handlers</source>
          <target state="translated">Pythonのシグナルハンドラの実行</target>
        </trans-unit>
        <trans-unit id="ed3931e45d9bc3ce577741dbd125810e45a2b826" translate="yes" xml:space="preserve">
          <source>Executor Objects</source>
          <target state="translated">エグゼキュータオブジェクト</target>
        </trans-unit>
        <trans-unit id="211c10fefffd8e3b3e355bf1edcb1832fad0f9ca" translate="yes" xml:space="preserve">
          <source>Exhaust as many code paths as possible. Test where branching occurs and thus tailor input to make sure as many different paths through the code are taken.</source>
          <target state="translated">可能な限り多くのコードパスを排除します。分岐が発生する場所をテストして、コードを通る多くの異なるパスが取られることを確認するために入力を調整します。</target>
        </trans-unit>
        <trans-unit id="222f4735cc04fbb94d3f36bb2ec690b85bf1cebb" translate="yes" xml:space="preserve">
          <source>Existing context managers that already have a base class can be extended by using &lt;code&gt;ContextDecorator&lt;/code&gt; as a mixin class:</source>
          <target state="translated">すでに基本クラスがある既存のコンテキストマネージャーは、 &lt;code&gt;ContextDecorator&lt;/code&gt; をミックスインクラスとして使用することで拡張できます。</target>
        </trans-unit>
        <trans-unit id="f83b6fe3aebf13744e866019556d9129cd7a55be" translate="yes" xml:space="preserve">
          <source>Exit</source>
          <target state="translated">Exit</target>
        </trans-unit>
        <trans-unit id="8dc762b6cd999e9e7c339e2a9ffd275e4e6e9d6b" translate="yes" xml:space="preserve">
          <source>Exit Windows</source>
          <target state="translated">Windowsの終了</target>
        </trans-unit>
        <trans-unit id="0eb6852fe58ab846e7bbe411d7c5e62bb4d27841" translate="yes" xml:space="preserve">
          <source>Exit code that means a specified host did not exist.</source>
          <target state="translated">指定したホストが存在しなかったことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="7a22f8343aa29394ba70bf5dc7afa73c08926734" translate="yes" xml:space="preserve">
          <source>Exit code that means a specified user did not exist.</source>
          <target state="translated">指定したユーザが存在しなかったことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="1e96d47cca855bf6edef7796cdce40087e984555" translate="yes" xml:space="preserve">
          <source>Exit code that means a temporary failure occurred. This indicates something that may not really be an error, such as a network connection that couldn&amp;rsquo;t be made during a retryable operation.</source>
          <target state="translated">一時的な障害が発生したことを示す終了コード。これは、再試行可能な操作中にネットワーク接続を確立できなかったなど、実際にはエラーではない可能性があることを示しています。</target>
        </trans-unit>
        <trans-unit id="130b0662bd564bed3b370b021be7c79e675673ec" translate="yes" xml:space="preserve">
          <source>Exit code that means a user specified output file could not be created.</source>
          <target state="translated">ユーザーが指定した出力ファイルを作成できなかったことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="ee6998f7707f8890d572b71f35265321e03105a3" translate="yes" xml:space="preserve">
          <source>Exit code that means an input file did not exist or was not readable.</source>
          <target state="translated">入力ファイルが存在しないか、読み込めなかったことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="9105cdf46e59b903bc936574e1e7533cdf138f82" translate="yes" xml:space="preserve">
          <source>Exit code that means an internal software error was detected.</source>
          <target state="translated">内部ソフトウェアのエラーが検出されたことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="1d74434dbdfc578d821f4318fe90a51b17a17cd4" translate="yes" xml:space="preserve">
          <source>Exit code that means an operating system error was detected, such as the inability to fork or create a pipe.</source>
          <target state="translated">フォークやパイプの作成ができないなど、オペレーティングシステムのエラーが検出されたことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="05d48920a0aebcc6b3c4c2390c6c09782f77ea3e" translate="yes" xml:space="preserve">
          <source>Exit code that means no error occurred.</source>
          <target state="translated">エラーが発生しなかったことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="0f7bc1803a4a72d74f632ceb8f951a754f403608" translate="yes" xml:space="preserve">
          <source>Exit code that means some system file did not exist, could not be opened, or had some other kind of error.</source>
          <target state="translated">システムファイルが存在しない、開けない、または他の種類のエラーが発生したことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="873b690550da75d449939d35005ee675abb600c4" translate="yes" xml:space="preserve">
          <source>Exit code that means something like &amp;ldquo;an entry was not found&amp;rdquo;.</source>
          <target state="translated">「エントリが見つかりませんでした」などを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="ae632ba3b2d0e464ffc16d4e6f9467aeab63b17f" translate="yes" xml:space="preserve">
          <source>Exit code that means that a protocol exchange was illegal, invalid, or not understood.</source>
          <target state="translated">プロトコルの交換が不正、無効、または理解されなかったことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="2236398f4560c2c3270ca6afed0572a5a292e10b" translate="yes" xml:space="preserve">
          <source>Exit code that means that a required service is unavailable.</source>
          <target state="translated">必要なサービスが利用できないことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="2769a4e9e329eedb10d1c8259f8c1431a9d913e1" translate="yes" xml:space="preserve">
          <source>Exit code that means that an error occurred while doing I/O on some file.</source>
          <target state="translated">いくつかのファイルでI/Oを行っている間にエラーが発生したことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="18fe8007ea03054c8698943a4e0e8de37594ec1d" translate="yes" xml:space="preserve">
          <source>Exit code that means that some kind of configuration error occurred.</source>
          <target state="translated">何らかの設定エラーが発生したことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="c7fbf7f46a8ce37387db819583c55d99b5c0a745" translate="yes" xml:space="preserve">
          <source>Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems).</source>
          <target state="translated">操作を実行するための権限が不十分であったことを意味する終了コード(ただし、ファイルシステムの問題を意図したものではありません)。</target>
        </trans-unit>
        <trans-unit id="0045f24ba4cbea5891945395b979e9d9cf52329e" translate="yes" xml:space="preserve">
          <source>Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given.</source>
          <target state="translated">間違った数の引数が与えられた場合など、コマンドが間違って使用されたことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="0ab31a146165c6ef2fb3014ef6aa6d6dab33309d" translate="yes" xml:space="preserve">
          <source>Exit code that means the input data was incorrect.</source>
          <target state="translated">入力データが間違っていたことを意味する終了コード。</target>
        </trans-unit>
        <trans-unit id="29749cfb9382cb00c435991190794173c3a641de" translate="yes" xml:space="preserve">
          <source>Exit from Python. This is implemented by raising the &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt; exception, so cleanup actions specified by finally clauses of &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; statements are honored, and it is possible to intercept the exit attempt at an outer level.</source>
          <target state="translated">Pythonを終了します。これは、&lt;a href=&quot;exceptions#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;/a&gt;例外を発生させることで実装されるため、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt;ステートメントのfinally節で指定されたクリーンアップアクションが尊重され、外部レベルでの終了試行をインターセプトすることが可能です。</target>
        </trans-unit>
        <trans-unit id="ccb0d6a92730bf5e1a73f3bfc4f253e7d84022d0" translate="yes" xml:space="preserve">
          <source>Exit insert char mode</source>
          <target state="translated">挿入文字モードを終了します。</target>
        </trans-unit>
        <trans-unit id="031fa31cf206c2ec1cd22ca183b8e96c3c9872e8" translate="yes" xml:space="preserve">
          <source>Exit status of the child process. If the process exited due to a signal, this will be the negative signal number.</source>
          <target state="translated">子プロセスの終了ステータス。シグナルが原因でプロセスが終了した場合、これは負のシグナル番号になります。</target>
        </trans-unit>
        <trans-unit id="19adb7c9c5eaa16417045df4e6323c37b803665c" translate="yes" xml:space="preserve">
          <source>Exit status of the child process. Typically, an exit status of 0 indicates that it ran successfully.</source>
          <target state="translated">子プロセスの終了ステータス。通常、0 の終了ステータスは正常に実行されたことを示します。</target>
        </trans-unit>
        <trans-unit id="782552048b669f3e29d23655320f5c5ec4a69c8d" translate="yes" xml:space="preserve">
          <source>Exit the process with status &lt;em&gt;n&lt;/em&gt;, without calling cleanup handlers, flushing stdio buffers, etc.</source>
          <target state="translated">クリーンアップハンドラーを呼び出したり、stdioバッファーをフラッシュしたりせずに、ステータス&lt;em&gt;n&lt;/em&gt;でプロセスを終了します。</target>
        </trans-unit>
        <trans-unit id="e568f5a9fa1a0a52b3de44fc53325fcc76e97cc0" translate="yes" xml:space="preserve">
          <source>Exit the runtime context and return a Boolean flag indicating if any exception that occurred should be suppressed. If an exception occurred while executing the body of the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, the arguments contain the exception type, value and traceback information. Otherwise, all three arguments are &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ランタイムコンテキストを終了し、発生した例外を抑制すべきかどうかを示すブールフラグを返します。&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの本体の実行中に例外が発生した場合、引数には例外のタイプ、値、およびトレースバック情報が含まれます。それ以外の場合、3つの引数はすべて &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="813d6a80ed490c32c14fd6b15893f76ab9515615" translate="yes" xml:space="preserve">
          <source>Exiting methods</source>
          <target state="translated">終了方法</target>
        </trans-unit>
        <trans-unit id="f0545bde9ddc8fa1efb4f51bf8ddc1930ca8a6aa" translate="yes" xml:space="preserve">
          <source>Exiting the context manager cleans up any temporary file created when the resource needs to be extracted from e.g. a zip file.</source>
          <target state="translated">コンテキスト マネージャを終了すると、リソースを zip ファイルなどから抽出する必要がある場合に作成されたテンポラリファイルがクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="705912607514938d70ecf589927512f5012e6eed" translate="yes" xml:space="preserve">
          <source>Expand Word</source>
          <target state="translated">拡張ワード</target>
        </trans-unit>
        <trans-unit id="4b0fc2127b40c104cccfbdb5737f0aa1b76fc944" translate="yes" xml:space="preserve">
          <source>Expand a prefix you have typed to match a full word in the same window; repeat to get a different expansion.</source>
          <target state="translated">入力した接頭語を展開して、同じウィンドウ内の完全な単語にマッチするようにします。</target>
        </trans-unit>
        <trans-unit id="af74b0c485a7e9735a00ba13b8e6543ff0acd03a" translate="yes" xml:space="preserve">
          <source>Expands all children of &lt;em&gt;node&lt;/em&gt; into &lt;em&gt;node&lt;/em&gt;. Example:</source>
          <target state="translated">&lt;em&gt;nodeの&lt;/em&gt;すべての子を&lt;em&gt;node&lt;/em&gt;に展開し&lt;em&gt;ます&lt;/em&gt;。例：</target>
        </trans-unit>
        <trans-unit id="b6235ec6054cdf78ee69907b788f865a06567cfe" translate="yes" xml:space="preserve">
          <source>Expands environment variable placeholders &lt;code&gt;%NAME%&lt;/code&gt; in strings like &lt;a href=&quot;#winreg.REG_EXPAND_SZ&quot;&gt;&lt;code&gt;REG_EXPAND_SZ&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#winreg.REG_EXPAND_SZ&quot;&gt; &lt;code&gt;REG_EXPAND_SZ&lt;/code&gt; の&lt;/a&gt;ような文字列の環境変数プレースホルダー &lt;code&gt;%NAME%&lt;/code&gt; を展開します。</target>
        </trans-unit>
        <trans-unit id="1fd1d786684facabead378e367b48b5f9bad65fb" translate="yes" xml:space="preserve">
          <source>Expansion field data. The &lt;a href=&quot;https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT&quot;&gt;PKZIP Application Note&lt;/a&gt; contains some comments on the internal structure of the data contained in this &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">拡張フィールドデータ。&lt;a href=&quot;https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT&quot;&gt;PKZIPアプリケーションノートは&lt;/a&gt;、この中に含まれるデータの内部構造にいくつかのコメントが含まれている&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="59e2311798f2ce925a5a5bcf558e82fd2f02f1be" translate="yes" xml:space="preserve">
          <source>Expat can optionally do XML namespace processing for you, enabled by providing a value for &lt;em&gt;namespace_separator&lt;/em&gt;. The value must be a one-character string; a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised if the string has an illegal length (&lt;code&gt;None&lt;/code&gt; is considered the same as omission). When namespace processing is enabled, element type names and attribute names that belong to a namespace will be expanded. The element name passed to the element handlers &lt;code&gt;StartElementHandler&lt;/code&gt; and &lt;code&gt;EndElementHandler&lt;/code&gt; will be the concatenation of the namespace URI, the namespace separator character, and the local part of the name. If the namespace separator is a zero byte (&lt;code&gt;chr(0)&lt;/code&gt;) then the namespace URI and the local part will be concatenated without any separator.</source>
          <target state="translated">ExpatはオプションでXML名前空間処理を実行でき&lt;em&gt;ます&lt;/em&gt;。これは、&lt;em&gt;namespace_separatorの&lt;/em&gt;値を提供することで可能になり&lt;em&gt;ます&lt;/em&gt;。値は1文字の文字列でなければなりません。文字列の長さが不正な場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が送出されます（ &lt;code&gt;None&lt;/code&gt; は省略と同じと見なされます）。名前空間処理が有効な場合、名前空間に属する要素タイプ名と属性名が展開されます。要素ハンドラー &lt;code&gt;StartElementHandler&lt;/code&gt; および &lt;code&gt;EndElementHandler&lt;/code&gt; に渡される要素名は、名前空間URI、名前空間の区切り文字、および名前のローカル部分の連結になります。名前空間セパレータがゼロバイトの場合（ &lt;code&gt;chr(0)&lt;/code&gt; ）次に、名前空間URIとローカル部分がセパレータなしで連結されます。</target>
        </trans-unit>
        <trans-unit id="da8abdeaaae5e01377deae8fb1c50c19174a8ea8" translate="yes" xml:space="preserve">
          <source>Expat error constants</source>
          <target state="translated">エクスパットエラー定数</target>
        </trans-unit>
        <trans-unit id="08105ec54ec812c08ae7f829e3d2d086acf47b22" translate="yes" xml:space="preserve">
          <source>Expat was not able to allocate memory internally.</source>
          <target state="translated">Expatは内部的にメモリを割り当てることができませんでした。</target>
        </trans-unit>
        <trans-unit id="ae83915ff1e542a4aa9b192c227278e059870679" translate="yes" xml:space="preserve">
          <source>Expat&amp;rsquo;s internal error number for the specific error. The &lt;a href=&quot;#xml.parsers.expat.errors.messages&quot;&gt;&lt;code&gt;errors.messages&lt;/code&gt;&lt;/a&gt; dictionary maps these error numbers to Expat&amp;rsquo;s error messages. For example:</source>
          <target state="translated">特定のエラーに対するExpatの内部エラー番号。&lt;a href=&quot;#xml.parsers.expat.errors.messages&quot;&gt; &lt;code&gt;errors.messages&lt;/code&gt; の&lt;/a&gt;辞書は進出のエラーメッセージにこれらのエラー番号をマッピングします。例えば：</target>
        </trans-unit>
        <trans-unit id="49b412a0f51820f38bfe44b5bc6f73f29177ee5e" translate="yes" xml:space="preserve">
          <source>ExpatError Exceptions</source>
          <target state="translated">ExpatError 例外</target>
        </trans-unit>
        <trans-unit id="247dde85da683c7c073b9190b1453ace6096f3d3" translate="yes" xml:space="preserve">
          <source>Expected failures use the &lt;a href=&quot;#unittest.expectedFailure&quot;&gt;&lt;code&gt;expectedFailure()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="translated">予想される失敗は、&lt;a href=&quot;#unittest.expectedFailure&quot;&gt; &lt;code&gt;expectedFailure()&lt;/code&gt; &lt;/a&gt;デコレータを使用します。</target>
        </trans-unit>
        <trans-unit id="78647db73123cd8372fb4f4bbcc9f2105592afba" translate="yes" xml:space="preserve">
          <source>Expected output cannot contain an all-whitespace line, since such a line is taken to signal the end of expected output. If expected output does contain a blank line, put &lt;code&gt;&amp;lt;BLANKLINE&amp;gt;&lt;/code&gt; in your doctest example each place a blank line is expected.</source>
          <target state="translated">期待される出力には、すべて空白の行を含めることはできません。そのような行は、期待される出力の終わりを示すために使用されるためです。予想される出力に空白行が含まれる場合は、空白行が予想される場所ごとに &lt;code&gt;&amp;lt;BLANKLINE&amp;gt;&lt;/code&gt; をdoctestの例に入れます。</target>
        </trans-unit>
        <trans-unit id="93617b006b3706f8adecd6a3c8aad6df6b3318d3" translate="yes" xml:space="preserve">
          <source>Expected output:</source>
          <target state="translated">期待される出力。</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="4521cb9e86ffb37d381aebe8d8ce8956c54915a1" translate="yes" xml:space="preserve">
          <source>Explicitly close the audio device. When you are done writing to or reading from an audio device, you should explicitly close it. A closed device cannot be used again.</source>
          <target state="translated">オーディオデバイスを明示的に閉じる オーディオデバイスへの書き込みや読み込みが終わったら、明示的に閉じてください。閉じたデバイスは二度と使用できません。</target>
        </trans-unit>
        <trans-unit id="4bbffebc70065656746756e2001956fe84cdef41" translate="yes" xml:space="preserve">
          <source>Explicitly pass resources to child processes</source>
          <target state="translated">子プロセスにリソースを明示的に渡す</target>
        </trans-unit>
        <trans-unit id="6c8f65243d9f006f8c6c4439bd8b8a6b5dfac7c9" translate="yes" xml:space="preserve">
          <source>Explicitly via the column name</source>
          <target state="translated">カラム名を介して明示的に</target>
        </trans-unit>
        <trans-unit id="8a330a9c7957095585f0e465fcc1e74ca875851e" translate="yes" xml:space="preserve">
          <source>Exponent notation. Prints the number in scientific notation using the letter &amp;lsquo;e&amp;rsquo; to indicate the exponent. The default precision is &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">指数表記。指数を示す文字「e」を使用して、科学表記法で数値を出力します。デフォルトの精度は &lt;code&gt;6&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="13a4114eb5527628350c89f4e332e24a8b6adaf7" translate="yes" xml:space="preserve">
          <source>Exponent notation. Same as &lt;code&gt;'e'&lt;/code&gt; except it uses an upper case &amp;lsquo;E&amp;rsquo; as the separator character.</source>
          <target state="translated">指数表記。区切り文字として大文字の「E」を使用することを除いて、 &lt;code&gt;'e'&lt;/code&gt; 同じです。</target>
        </trans-unit>
        <trans-unit id="3237bbd0fba00be230671cc5c9f06d02aebed723" translate="yes" xml:space="preserve">
          <source>Exponent was lower than &lt;code&gt;Emin&lt;/code&gt; prior to rounding.</source>
          <target state="translated">丸め前の指数は &lt;code&gt;Emin&lt;/code&gt; よりも低かった。</target>
        </trans-unit>
        <trans-unit id="dbc59c1ddea13a6824ca57d6407a1a5c5633bc43" translate="yes" xml:space="preserve">
          <source>Exponential distribution. &lt;em&gt;lambd&lt;/em&gt; is 1.0 divided by the desired mean. It should be nonzero. (The parameter would be called &amp;ldquo;lambda&amp;rdquo;, but that is a reserved word in Python.) Returned values range from 0 to positive infinity if &lt;em&gt;lambd&lt;/em&gt; is positive, and from negative infinity to 0 if &lt;em&gt;lambd&lt;/em&gt; is negative.</source>
          <target state="translated">指数分布。&lt;em&gt;lambd&lt;/em&gt;は、1.0を目的の平均で割ったものです。ゼロ以外でなければなりません。（パラメーターは「lambda」と呼ばれますが、Pythonでは予約語です。）戻り値の範囲は、&lt;em&gt;lambd&lt;/em&gt;が正の場合は0から正の無限大、&lt;em&gt;lambd&lt;/em&gt;が負の場合は負の無限大から0です。</target>
        </trans-unit>
        <trans-unit id="d165ee97f26b031b938fc12621899c47ca3e7175" translate="yes" xml:space="preserve">
          <source>Exponentiation</source>
          <target state="translated">Exponentiation</target>
        </trans-unit>
        <trans-unit id="ffae2a0dbff1d55c82d5123af3372ea49a2b14bb" translate="yes" xml:space="preserve">
          <source>Expressing a percentage:</source>
          <target state="translated">パーセンテージを表現すること。</target>
        </trans-unit>
        <trans-unit id="be18dee812522c6b5b7a76e5832b6a8e4ca2b812" translate="yes" xml:space="preserve">
          <source>Extend the left side of the deque by appending elements from &lt;em&gt;iterable&lt;/em&gt;. Note, the series of left appends results in reversing the order of elements in the iterable argument.</source>
          <target state="translated">&lt;em&gt;iterable&lt;/em&gt;から要素を追加して、両端キューの左側を拡張します。一連の左追加により、反復可能引数の要素の順序が逆になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f6c82ec936c20f92c0eaa0ffe5c71b79d6e553a1" translate="yes" xml:space="preserve">
          <source>Extend the right side of the deque by appending elements from the iterable argument.</source>
          <target state="translated">iterable引数から要素を追加してdequeの右辺を拡張します。</target>
        </trans-unit>
        <trans-unit id="ffb6a2c58a4241d2ba27231ce784eb5eb15764da" translate="yes" xml:space="preserve">
          <source>Extend the search path for the modules which comprise a package. Intended use is to place the following code in a package&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt;:</source>
          <target state="translated">パッケージを構成するモジュールの検索パスを拡張します。使用目的は、パッケージの &lt;code&gt;__init__.py&lt;/code&gt; に次のコードを配置することです。</target>
        </trans-unit>
        <trans-unit id="8d3082bbd7153cdb35672556257cd022495b60e6" translate="yes" xml:space="preserve">
          <source>Extended header setting. This method is similar to &lt;a href=&quot;#email.message.EmailMessage.__setitem__&quot;&gt;&lt;code&gt;__setitem__()&lt;/code&gt;&lt;/a&gt; except that additional header parameters can be provided as keyword arguments. &lt;em&gt;_name&lt;/em&gt; is the header field to add and &lt;em&gt;_value&lt;/em&gt; is the &lt;em&gt;primary&lt;/em&gt; value for the header.</source>
          <target state="translated">拡張ヘッダー設定。このメソッドは、追加のヘッダーパラメータをキーワード引数として提供できることを除いて、&lt;a href=&quot;#email.message.EmailMessage.__setitem__&quot;&gt; &lt;code&gt;__setitem__()&lt;/code&gt; &lt;/a&gt;似ています。&lt;em&gt;_name&lt;/em&gt;は追加するヘッダーフィールドで、&lt;em&gt;_value&lt;/em&gt;はヘッダーの&lt;em&gt;主要な&lt;/em&gt;値です。</target>
        </trans-unit>
        <trans-unit id="a223abaf54dc8e1ab3eeaa89f4cd896ed498bd79" translate="yes" xml:space="preserve">
          <source>Extended header setting. This method is similar to &lt;a href=&quot;#email.message.Message.__setitem__&quot;&gt;&lt;code&gt;__setitem__()&lt;/code&gt;&lt;/a&gt; except that additional header parameters can be provided as keyword arguments. &lt;em&gt;_name&lt;/em&gt; is the header field to add and &lt;em&gt;_value&lt;/em&gt; is the &lt;em&gt;primary&lt;/em&gt; value for the header.</source>
          <target state="translated">拡張ヘッダー設定。このメソッドは、追加のヘッダーパラメータをキーワード引数として提供できることを除いて、&lt;a href=&quot;#email.message.Message.__setitem__&quot;&gt; &lt;code&gt;__setitem__()&lt;/code&gt; &lt;/a&gt;似ています。&lt;em&gt;_name&lt;/em&gt;は追加するヘッダーフィールドで、&lt;em&gt;_value&lt;/em&gt;はヘッダーの&lt;em&gt;主要な&lt;/em&gt;値です。</target>
        </trans-unit>
        <trans-unit id="8e0502094d27643a7e46ac113e2ec9103e1bc071" translate="yes" xml:space="preserve">
          <source>Extending &lt;a href=&quot;#json.JSONEncoder&quot;&gt;&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#json.JSONEncoder&quot;&gt; &lt;code&gt;JSONEncoder&lt;/code&gt; の&lt;/a&gt;拡張：</target>
        </trans-unit>
        <trans-unit id="3afaf5c09876f5a31aa15d2a3378f3f6a609a66e" translate="yes" xml:space="preserve">
          <source>Extending the search algorithm</source>
          <target state="translated">検索アルゴリズムの拡張</target>
        </trans-unit>
        <trans-unit id="d14fa83017c01db06e1c086ad2b398b643736e71" translate="yes" xml:space="preserve">
          <source>Extends this array with data from the given unicode string. The array must be a type &lt;code&gt;'u'&lt;/code&gt; array; otherwise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. Use &lt;code&gt;array.frombytes(unicodestring.encode(enc))&lt;/code&gt; to append Unicode data to an array of some other type.</source>
          <target state="translated">この配列を、指定されたUnicode文字列のデータで拡張します。配列はタイプ &lt;code&gt;'u'&lt;/code&gt; 配列でなければなりません。それ以外の&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;は、ValueErrorが発生します。使用 &lt;code&gt;array.frombytes(unicodestring.encode(enc))&lt;/code&gt; いくつかの他のタイプのアレイにUnicodeデータを追加します。</target>
        </trans-unit>
        <trans-unit id="d17e683a4537ea32b7744d3fc9435748a13093cb" translate="yes" xml:space="preserve">
          <source>Extensible JSON encoder for Python data structures.</source>
          <target state="translated">Python のデータ構造のための拡張可能な JSON エンコーダ。</target>
        </trans-unit>
        <trans-unit id="4c367fb4974a67cae0c760962b58c3b9529d4ac9" translate="yes" xml:space="preserve">
          <source>Extension modules should never call &lt;a href=&quot;#locale.setlocale&quot;&gt;&lt;code&gt;setlocale()&lt;/code&gt;&lt;/a&gt;, except to find out what the current locale is. But since the return value can only be used portably to restore it, that is not very useful (except perhaps to find out whether or not the locale is &lt;code&gt;C&lt;/code&gt;).</source>
          <target state="translated">拡張モジュールは、現在のロケールが何であるかを調べる場合を除いて、&lt;a href=&quot;#locale.setlocale&quot;&gt; &lt;code&gt;setlocale()&lt;/code&gt; を&lt;/a&gt;呼び出すべきではありません。しかし、戻り値はそれを復元するために移植性のある方法でしか使用できないので、あまり有用ではありません（おそらくロケールが &lt;code&gt;C&lt;/code&gt; であるかどうかを調べることを除いて）。</target>
        </trans-unit>
        <trans-unit id="ba4c6b9afff6a08f053cba5afe9f2c4f782f677a" translate="yes" xml:space="preserve">
          <source>Extension types can easily be made to support weak references; see &lt;a href=&quot;https://docs.python.org/3.8/extending/newtypes.html#weakref-support&quot;&gt;Weak Reference Support&lt;/a&gt;.</source>
          <target state="translated">拡張タイプは、弱い参照をサポートするように簡単に作成できます。&lt;a href=&quot;https://docs.python.org/3.8/extending/newtypes.html#weakref-support&quot;&gt;弱参照のサポートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="translated">Extensions</target>
        </trans-unit>
        <trans-unit id="6c4a75205736caa4d532e632bbb923d90e882d92" translate="yes" xml:space="preserve">
          <source>Extensions peculiar to a particular operating system are also available through the &lt;a href=&quot;#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; module, but using them is of course a threat to portability.</source>
          <target state="translated">特定のオペレーティングシステムに固有の拡張機能は&lt;a href=&quot;#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;モジュールからも利用できますが、それらを使用することはもちろん移植性に対する脅威です。</target>
        </trans-unit>
        <trans-unit id="59a8e4193969041eb8a334bce8673971dd5ac36d" translate="yes" xml:space="preserve">
          <source>Extensive tutorial plus friendlier widget pages for some of the widgets.</source>
          <target state="translated">広範なチュートリアルと、いくつかのウィジェットのためのより親しみやすいウィジェットページ。</target>
        </trans-unit>
        <trans-unit id="c970654c58357168192acf4ccb045a4ec563e56d" translate="yes" xml:space="preserve">
          <source>External file attributes.</source>
          <target state="translated">外部ファイルの属性。</target>
        </trans-unit>
        <trans-unit id="2dfc8906bc4cd8f73d660501349acb60a736207e" translate="yes" xml:space="preserve">
          <source>Extract a member from the archive as a file object. &lt;em&gt;member&lt;/em&gt; may be a filename or a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object. If &lt;em&gt;member&lt;/em&gt; is a regular file or a link, an &lt;a href=&quot;io#io.BufferedReader&quot;&gt;&lt;code&gt;io.BufferedReader&lt;/code&gt;&lt;/a&gt; object is returned. Otherwise, &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">アーカイブからメンバーをファイルオブジェクトとして抽出します。&lt;em&gt;member&lt;/em&gt;は、ファイル名または&lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt;オブジェクトです。場合は&lt;em&gt;メンバーが&lt;/em&gt;通常のファイルまたはリンクされ、&lt;a href=&quot;io#io.BufferedReader&quot;&gt; &lt;code&gt;io.BufferedReader&lt;/code&gt; の&lt;/a&gt;オブジェクトが返されます。それ以外の場合は、&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="7153d56eaff624dd418e50a12f92bf3a17f36bf7" translate="yes" xml:space="preserve">
          <source>Extract a member from the archive to the current working directory, using its full name. Its file information is extracted as accurately as possible. &lt;em&gt;member&lt;/em&gt; may be a filename or a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object. You can specify a different directory using &lt;em&gt;path&lt;/em&gt;. &lt;em&gt;path&lt;/em&gt; may be a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;. File attributes (owner, mtime, mode) are set unless &lt;em&gt;set_attrs&lt;/em&gt; is false.</source>
          <target state="translated">完全な名前を使用して、アーカイブから現在の作業ディレクトリにメンバーを抽出します。そのファイル情報は可能な限り正確に抽出されます。&lt;em&gt;member&lt;/em&gt;は、ファイル名または&lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt;オブジェクトです。&lt;em&gt;path&lt;/em&gt;を使用して別のディレクトリを指定できます。&lt;em&gt;path&lt;/em&gt;は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;パスのようなオブジェクト&lt;/a&gt;です。&lt;em&gt;set_attrs&lt;/em&gt;がfalseでない限り、ファイル属性（所有者、mtime、モード）が設定されます。</target>
        </trans-unit>
        <trans-unit id="49bf42b59323ef5711d695a532178f9f50306eed" translate="yes" xml:space="preserve">
          <source>Extract a member from the archive to the current working directory; &lt;em&gt;member&lt;/em&gt; must be its full name or a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; object. Its file information is extracted as accurately as possible. &lt;em&gt;path&lt;/em&gt; specifies a different directory to extract to. &lt;em&gt;member&lt;/em&gt; can be a filename or a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; object. &lt;em&gt;pwd&lt;/em&gt; is the password used for encrypted files.</source>
          <target state="translated">アーカイブから現在の作業ディレクトリにメンバーを抽出します。&lt;em&gt;メンバー&lt;/em&gt;は、フルネームまたは&lt;a href=&quot;#zipfile.ZipInfo&quot;&gt; &lt;code&gt;ZipInfo&lt;/code&gt; &lt;/a&gt;オブジェクトである必要があります。そのファイル情報は可能な限り正確に抽出されます。&lt;em&gt;path&lt;/em&gt;は、抽出する別のディレクトリを指定します。&lt;em&gt;member&lt;/em&gt;は、ファイル名または&lt;a href=&quot;#zipfile.ZipInfo&quot;&gt; &lt;code&gt;ZipInfo&lt;/code&gt; &lt;/a&gt;オブジェクトにすることができます。&lt;em&gt;pwd&lt;/em&gt;は、暗号化されたファイルに使用されるパスワードです。</target>
        </trans-unit>
        <trans-unit id="544c78afc0b0d1b40f8be394b534ce094d439335" translate="yes" xml:space="preserve">
          <source>Extract all doctest examples from the given string, and collect them into a &lt;a href=&quot;#doctest.DocTest&quot;&gt;&lt;code&gt;DocTest&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">指定された文字列からすべてのdoctestの例を抽出し、それらを&lt;a href=&quot;#doctest.DocTest&quot;&gt; &lt;code&gt;DocTest&lt;/code&gt; &lt;/a&gt;オブジェクトに収集します。</target>
        </trans-unit>
        <trans-unit id="cce34faeb7495a0b53c8fa130ee26d2cc6aa07f2" translate="yes" xml:space="preserve">
          <source>Extract all doctest examples from the given string, and return them as a list of &lt;a href=&quot;#doctest.Example&quot;&gt;&lt;code&gt;Example&lt;/code&gt;&lt;/a&gt; objects. Line numbers are 0-based. The optional argument &lt;em&gt;name&lt;/em&gt; is a name identifying this string, and is only used for error messages.</source>
          <target state="translated">指定された文字列からすべてのdoctestサンプルを抽出し、それらを&lt;a href=&quot;#doctest.Example&quot;&gt; &lt;code&gt;Example&lt;/code&gt; &lt;/a&gt;オブジェクトのリストとして返します。行番号は0ベースです。オプションの引数&lt;em&gt;name&lt;/em&gt;は、この文字列を識別する&lt;em&gt;名前で&lt;/em&gt;あり、エラーメッセージにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="6c9c93f9c15436e53bdd54ee82b7378dd38a0185" translate="yes" xml:space="preserve">
          <source>Extract all members from the archive to the current working directory or directory &lt;em&gt;path&lt;/em&gt;. If optional &lt;em&gt;members&lt;/em&gt; is given, it must be a subset of the list returned by &lt;a href=&quot;#tarfile.TarFile.getmembers&quot;&gt;&lt;code&gt;getmembers()&lt;/code&gt;&lt;/a&gt;. Directory information like owner, modification time and permissions are set after all members have been extracted. This is done to work around two problems: A directory&amp;rsquo;s modification time is reset each time a file is created in it. And, if a directory&amp;rsquo;s permissions do not allow writing, extracting files to it will fail.</source>
          <target state="translated">すべてのメンバーをアーカイブから現在の作業ディレクトリまたはディレクトリ&lt;em&gt;パスに&lt;/em&gt;抽出し&lt;em&gt;ます&lt;/em&gt;。オプションの&lt;em&gt;メンバー&lt;/em&gt;を指定する場合、それは&lt;a href=&quot;#tarfile.TarFile.getmembers&quot;&gt; &lt;code&gt;getmembers()&lt;/code&gt; &lt;/a&gt;によって返されるリストのサブセットでなければなりません。所有者、変更時刻、権限などのディレクトリ情報は、すべてのメンバーが抽出された後に設定されます。これは、2つの問題を回避するために行われます。ファイルが作成されるたびに、ディレクトリの変更時刻がリセットされます。また、ディレクトリの権限で書き込みが許可されていない場合、ディレクトリへのファイルの抽出は失敗します。</target>
        </trans-unit>
        <trans-unit id="ae6c5957177f81679444f51641f06f6286ee4707" translate="yes" xml:space="preserve">
          <source>Extract all members from the archive to the current working directory. &lt;em&gt;path&lt;/em&gt; specifies a different directory to extract to. &lt;em&gt;members&lt;/em&gt; is optional and must be a subset of the list returned by &lt;a href=&quot;#zipfile.ZipFile.namelist&quot;&gt;&lt;code&gt;namelist()&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;pwd&lt;/em&gt; is the password used for encrypted files.</source>
          <target state="translated">すべてのメンバーをアーカイブから現在の作業ディレクトリに抽出します。&lt;em&gt;path&lt;/em&gt;は、抽出する別のディレクトリを指定します。&lt;em&gt;メンバー&lt;/em&gt;はオプションであり、&lt;a href=&quot;#zipfile.ZipFile.namelist&quot;&gt; &lt;code&gt;namelist()&lt;/code&gt; &lt;/a&gt;によって返されるリストのサブセットでなければなりません。&lt;em&gt;pwd&lt;/em&gt;は、暗号化されたファイルに使用されるパスワードです。</target>
        </trans-unit>
        <trans-unit id="10ff4d347f866ccd5f2a70db8425173e5abbb3e1" translate="yes" xml:space="preserve">
          <source>Extract cookies from HTTP &lt;em&gt;response&lt;/em&gt; and store them in the &lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt;&lt;code&gt;CookieJar&lt;/code&gt;&lt;/a&gt;, where allowed by policy.</source>
          <target state="translated">HTTP &lt;em&gt;応答&lt;/em&gt;からCookieを抽出し、ポリシーで許可されている場合は&lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt; &lt;code&gt;CookieJar&lt;/code&gt; に&lt;/a&gt;保存します。</target>
        </trans-unit>
        <trans-unit id="7762c8d14b070a61912e484ba2fc6db8aad38059" translate="yes" xml:space="preserve">
          <source>Extract tarfile into the current directory if &lt;em&gt;output_dir&lt;/em&gt; is not specified.</source>
          <target state="translated">&lt;em&gt;output_dir&lt;/em&gt;が指定されていない場合は、tarfileを現在のディレクトリに抽出します。</target>
        </trans-unit>
        <trans-unit id="ee747f17d62300fd6c830b297f78009d8493b4da" translate="yes" xml:space="preserve">
          <source>Extract the device major number from a raw device number (usually the &lt;code&gt;st_dev&lt;/code&gt; or &lt;code&gt;st_rdev&lt;/code&gt; field from &lt;code&gt;stat&lt;/code&gt;).</source>
          <target state="translated">rawデバイス番号からデバイスのメジャー番号を抽出します（通常は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;st_dev&lt;/code&gt; または &lt;code&gt;st_rdev&lt;/code&gt; フィールド）。</target>
        </trans-unit>
        <trans-unit id="5de253fc01d8caa12b19702c93bce330b8060401" translate="yes" xml:space="preserve">
          <source>Extract the device minor number from a raw device number (usually the &lt;code&gt;st_dev&lt;/code&gt; or &lt;code&gt;st_rdev&lt;/code&gt; field from &lt;code&gt;stat&lt;/code&gt;).</source>
          <target state="translated">rawデバイス番号からデバイスのマイナー番号を抽出します（通常は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;st_dev&lt;/code&gt; または &lt;code&gt;st_rdev&lt;/code&gt; フィールド）。</target>
        </trans-unit>
        <trans-unit id="3546e06d76818c1a64fd63ff46d39da1c08c38e7" translate="yes" xml:space="preserve">
          <source>Extract the raw traceback from the current stack frame. The return value has the same format as for &lt;a href=&quot;#traceback.extract_tb&quot;&gt;&lt;code&gt;extract_tb()&lt;/code&gt;&lt;/a&gt;. The optional &lt;em&gt;f&lt;/em&gt; and &lt;em&gt;limit&lt;/em&gt; arguments have the same meaning as for &lt;a href=&quot;#traceback.print_stack&quot;&gt;&lt;code&gt;print_stack()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のスタックフレームから生のトレースバックを抽出します。戻り値の形式は、&lt;a href=&quot;#traceback.extract_tb&quot;&gt; &lt;code&gt;extract_tb()&lt;/code&gt; &lt;/a&gt;と同じです。オプションの&lt;em&gt;f&lt;/em&gt;および&lt;em&gt;limit&lt;/em&gt;引数は、&lt;a href=&quot;#traceback.print_stack&quot;&gt; &lt;code&gt;print_stack()&lt;/code&gt; &lt;/a&gt;の場合と同じ意味を持っています。</target>
        </trans-unit>
        <trans-unit id="e90fa4052b0c2e280e5fd99db0fbdd283520863d" translate="yes" xml:space="preserve">
          <source>Extract the url from a wrapped URL (that is, a string formatted as &lt;code&gt;&amp;lt;URL:scheme://host/path&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;scheme://host/path&amp;gt;&lt;/code&gt;, &lt;code&gt;URL:scheme://host/path&lt;/code&gt; or &lt;code&gt;scheme://host/path&lt;/code&gt;). If &lt;em&gt;url&lt;/em&gt; is not a wrapped URL, it is returned without changes.</source>
          <target state="translated">ラップされたURL（つまり、 &lt;code&gt;&amp;lt;URL:scheme://host/path&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;scheme://host/path&amp;gt;&lt;/code&gt; 、 &lt;code&gt;URL:scheme://host/path&lt;/code&gt; または &lt;code&gt;scheme://host/path&lt;/code&gt; としてフォーマットされた文字列）からURLを抽出します/ host / path）。&lt;em&gt;url&lt;/em&gt;がラップされたURLでない場合、変更なしで返されます。</target>
        </trans-unit>
        <trans-unit id="80f14583713f04ef76e155d25c0906636fb553b4" translate="yes" xml:space="preserve">
          <source>Extract zipfile into target directory.</source>
          <target state="translated">zipfileをターゲットディレクトリに展開します。</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="7a127fcb19d14c22958f0b2767119f711a5ee7e4" translate="yes" xml:space="preserve">
          <source>F flag</source>
          <target state="translated">エフフラグ</target>
        </trans-unit>
        <trans-unit id="07c257b16606b468b4287bbfd069963fcb6c04a5" translate="yes" xml:space="preserve">
          <source>FIFO</source>
          <target state="translated">FIFO</target>
        </trans-unit>
        <trans-unit id="0e2b10e415755511239c761ec49ff29c9352b3b0" translate="yes" xml:space="preserve">
          <source>FIFO.</source>
          <target state="translated">FIFO.</target>
        </trans-unit>
        <trans-unit id="e47e8f6fd115bffcf60d2af9abb109a1fa0925c8" translate="yes" xml:space="preserve">
          <source>FIFOs are pipes that can be accessed like regular files. FIFOs exist until they are deleted (for example with &lt;a href=&quot;#os.unlink&quot;&gt;&lt;code&gt;os.unlink()&lt;/code&gt;&lt;/a&gt;). Generally, FIFOs are used as rendezvous between &amp;ldquo;client&amp;rdquo; and &amp;ldquo;server&amp;rdquo; type processes: the server opens the FIFO for reading, and the client opens it for writing. Note that &lt;a href=&quot;#os.mkfifo&quot;&gt;&lt;code&gt;mkfifo()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t open the FIFO &amp;mdash; it just creates the rendezvous point.</source>
          <target state="translated">FIFOは、通常のファイルのようにアクセスできるパイプです。FIFOは削除されるまで存在し&lt;a href=&quot;#os.unlink&quot;&gt; &lt;code&gt;os.unlink()&lt;/code&gt; &lt;/a&gt;たとえば、os.unlink（）を使用）。一般に、FIFOは「クライアント」と「サーバー」タイプのプロセス間のランデブーとして使用されます。サーバーは読み取り用にFIFOを開き、クライアントは書き込み用にFIFOを開きます。&lt;a href=&quot;#os.mkfifo&quot;&gt; &lt;code&gt;mkfifo()&lt;/code&gt; &lt;/a&gt;はFIFOを開かないことに注意してください&amp;mdash;ランデブーポイントを作成するだけです。</target>
        </trans-unit>
        <trans-unit id="73792fb55d9abc9e92d1d3ebcd41bd7ba0f108d2" translate="yes" xml:space="preserve">
          <source>FILTER_DIR</source>
          <target state="translated">FILTER_DIR</target>
        </trans-unit>
        <trans-unit id="3d8d38284d7c48984126ae4544c8465c506ee097" translate="yes" xml:space="preserve">
          <source>FLT_RADIX</source>
          <target state="translated">FLT_RADIX</target>
        </trans-unit>
        <trans-unit id="234dca4e2a0e92e5608ec0464e330e76723ea1d3" translate="yes" xml:space="preserve">
          <source>FLT_ROUNDS</source>
          <target state="translated">FLT_ROUNDS</target>
        </trans-unit>
        <trans-unit id="fff53c283733fcf57487666af2c11072c9f49c9f" translate="yes" xml:space="preserve">
          <source>FTP Objects</source>
          <target state="translated">FTP オブジェクト</target>
        </trans-unit>
        <trans-unit id="d290164b6f9f0f0391591dd5f84256b1aa55a88a" translate="yes" xml:space="preserve">
          <source>FTPHandler Objects</source>
          <target state="translated">FTPHandler オブジェクト</target>
        </trans-unit>
        <trans-unit id="aa3185ffb8ddcb7e8518130ce5be3ff6a65da6ca" translate="yes" xml:space="preserve">
          <source>FTP_TLS Objects</source>
          <target state="translated">FTP_TLS オブジェクト</target>
        </trans-unit>
        <trans-unit id="a1c787ee1263352ed63b1407e8cc20b772ec3981" translate="yes" xml:space="preserve">
          <source>Facilities:</source>
          <target state="translated">Facilities:</target>
        </trans-unit>
        <trans-unit id="6f7d036abe80e350d83c5c2ef79b8d3dffb2724d" translate="yes" xml:space="preserve">
          <source>Fails if either of &lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; does not have a &lt;code&gt;set.difference()&lt;/code&gt; method.</source>
          <target state="translated">&lt;em&gt;1番目&lt;/em&gt;または&lt;em&gt;2番目の&lt;/em&gt;いずれかに &lt;code&gt;set.difference()&lt;/code&gt; メソッドがない場合、失敗します。</target>
        </trans-unit>
        <trans-unit id="e8dee02f91d0dedd9886f02de920cf9df2f8dc44" translate="yes" xml:space="preserve">
          <source>Fairly portable uname interface. Returns a &lt;a href=&quot;collections#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple()&lt;/code&gt;&lt;/a&gt; containing six attributes: &lt;a href=&quot;#platform.system&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#platform.node&quot;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#platform.release&quot;&gt;&lt;code&gt;release&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#platform.version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#platform.machine&quot;&gt;&lt;code&gt;machine&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#platform.processor&quot;&gt;&lt;code&gt;processor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">かなりポータブルなunameインターフェース。&lt;a href=&quot;#platform.system&quot;&gt; &lt;code&gt;system&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#platform.node&quot;&gt; &lt;code&gt;node&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#platform.release&quot;&gt; &lt;code&gt;release&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#platform.version&quot;&gt; &lt;code&gt;version&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#platform.machine&quot;&gt; &lt;code&gt;machine&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#platform.processor&quot;&gt; &lt;code&gt;processor&lt;/code&gt; の&lt;/a&gt; 6つの属性を含む&lt;a href=&quot;collections#collections.namedtuple&quot;&gt; &lt;code&gt;namedtuple()&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="294d81f34aa607f6b9a4fa9aa3bd6b4ade4054e3" translate="yes" xml:space="preserve">
          <source>Fallback Values</source>
          <target state="translated">フォールバック値</target>
        </trans-unit>
        <trans-unit id="97cdbdc7feff827efb082a6b6dd2727237cd49fd" translate="yes" xml:space="preserve">
          <source>False</source>
          <target state="translated">False</target>
        </trans-unit>
        <trans-unit id="ac137ed5a5d51689e8820aa48b3c1f650954ec51" translate="yes" xml:space="preserve">
          <source>Fast, floating point arithmetic mean.</source>
          <target state="translated">高速、浮動小数点演算平均。</target>
        </trans-unit>
        <trans-unit id="c85baec0392432a2c74935a26751b47a0c953558" translate="yes" xml:space="preserve">
          <source>Fault Objects</source>
          <target state="translated">フォルトオブジェクト</target>
        </trans-unit>
        <trans-unit id="91f8cc8b15d01ea4c886759792d8b779dea3eea4" translate="yes" xml:space="preserve">
          <source>Fault handler state</source>
          <target state="translated">故障ハンドラの状態</target>
        </trans-unit>
        <trans-unit id="4d5f2566e2cbc8bd29a99af73a71daeccdfbc018" translate="yes" xml:space="preserve">
          <source>Feature Table</source>
          <target state="translated">フィーチャーテーブル</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="12c5a78b3238d1421e12eecf4ddf3ff8b1e448d5" translate="yes" xml:space="preserve">
          <source>Feed some text to the parser. It is processed insofar as it consists of complete elements; incomplete data is buffered until more data is fed or &lt;a href=&quot;#html.parser.HTMLParser.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; is called. &lt;em&gt;data&lt;/em&gt; must be &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パーサーにテキストを送ります。完全な要素で構成されている限り、処理されます。不完全なデータは、さらにデータが供給されるか、&lt;a href=&quot;#html.parser.HTMLParser.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;が呼び出されるまでバッファリングされます。&lt;em&gt;データ&lt;/em&gt;は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; で&lt;/a&gt;なければなりません。</target>
        </trans-unit>
        <trans-unit id="2f6658ca774a02313850f8d0282b532ca38865c5" translate="yes" xml:space="preserve">
          <source>Feed the given bytes data to the parser.</source>
          <target state="translated">与えられたバイトデータをパーサに送ります。</target>
        </trans-unit>
        <trans-unit id="387b29142d787ced69aeae549492449687987c43" translate="yes" xml:space="preserve">
          <source>Feed the parser some more data. &lt;em&gt;data&lt;/em&gt; should be a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; containing one or more lines. The lines can be partial and the parser will stitch such partial lines together properly. The lines can have any of the three common line endings: carriage return, newline, or carriage return and newline (they can even be mixed).</source>
          <target state="translated">パーサーにさらにデータを供給します。&lt;em&gt;data&lt;/em&gt;は、1行以上の行を含む&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトで&lt;/a&gt;なければなりません。行は部分的である可能性があり、パーサーはそのような部分的行を適切にステッチします。行には、キャリッジリターン、改行、またはキャリッジリターンと改行の3つの一般的な行末があります（これらを混在させることもできます）。</target>
        </trans-unit>
        <trans-unit id="a50061ac9428ad8cb79bfb2c8ac329810e31e666" translate="yes" xml:space="preserve">
          <source>FeedParser API</source>
          <target state="translated">フィードパーサ API</target>
        </trans-unit>
        <trans-unit id="4b2cf2461de886a6ab48362af6c696c99b94d007" translate="yes" xml:space="preserve">
          <source>Feeding incomplete chunks to &lt;a href=&quot;#html.parser.HTMLParser.feed&quot;&gt;&lt;code&gt;feed()&lt;/code&gt;&lt;/a&gt; works, but &lt;a href=&quot;#html.parser.HTMLParser.handle_data&quot;&gt;&lt;code&gt;handle_data()&lt;/code&gt;&lt;/a&gt; might be called more than once (unless &lt;em&gt;convert_charrefs&lt;/em&gt; is set to &lt;code&gt;True&lt;/code&gt;):</source>
          <target state="translated">不完全なチャンクを&lt;a href=&quot;#html.parser.HTMLParser.feed&quot;&gt; &lt;code&gt;feed()&lt;/code&gt; &lt;/a&gt;にフィードすることはできますが、&lt;a href=&quot;#html.parser.HTMLParser.handle_data&quot;&gt; &lt;code&gt;handle_data()&lt;/code&gt; &lt;/a&gt;が複数回呼び出される可能性があり&lt;em&gt;ます&lt;/em&gt;（&lt;em&gt;convert_charrefs&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; に設定されている場合を除く）：</target>
        </trans-unit>
        <trans-unit id="8c798e0422da17ca64b8b53da08c916bb2d4dba5" translate="yes" xml:space="preserve">
          <source>Feeding string objects into &lt;code&gt;update()&lt;/code&gt; is not supported, as hashes work on bytes, not on characters.</source>
          <target state="translated">文字列オブジェクトを &lt;code&gt;update()&lt;/code&gt; にフィードすることはサポートされていません。ハッシュは文字ではなくバイトで機能するためです。</target>
        </trans-unit>
        <trans-unit id="b3cb49dc70c7bb4c8ba2aa9114340fbd11566992" translate="yes" xml:space="preserve">
          <source>Feeds data to the parser. &lt;em&gt;data&lt;/em&gt; is encoded data.</source>
          <target state="translated">データをパーサーにフィードします。&lt;em&gt;データ&lt;/em&gt;はエンコードされたデータです。</target>
        </trans-unit>
        <trans-unit id="63da3e374ffa9eea709999e80cff37c228002165" translate="yes" xml:space="preserve">
          <source>Fetch (parts of) messages. &lt;em&gt;message_parts&lt;/em&gt; should be a string of message part names enclosed within parentheses, eg: &lt;code&gt;&quot;(UID BODY[TEXT])&quot;&lt;/code&gt;. Returned data are tuples of message part envelope and data.</source>
          <target state="translated">メッセージ（の一部）を取得します。&lt;em&gt;message_parts&lt;/em&gt;は、括弧で囲まれたメッセージパーツ名の文字列である必要があります &lt;code&gt;&quot;(UID BODY[TEXT])&quot;&lt;/code&gt; 例：&quot;（UID BODY [TEXT]）&quot;）。返されるデータは、メッセージパーツのエンベロープとデータのタプルです。</target>
        </trans-unit>
        <trans-unit id="a353d7de52e3d80c0d9c5a4d72ac4dc117b1a277" translate="yes" xml:space="preserve">
          <source>Fetch and/or change the signal mask of the calling thread. The signal mask is the set of signals whose delivery is currently blocked for the caller. Return the old signal mask as a set of signals.</source>
          <target state="translated">呼び出し元のスレッドのシグナルマスクを取得および/または変更します。シグナルマスクは、発信者にとって現在配信がブロックされているシグナルのセットです。古いシグナルマスクをシグナルのセットとして返します。</target>
        </trans-unit>
        <trans-unit id="cc3b211a4b23d07ed59e5660c59a281f7c520d6e" translate="yes" xml:space="preserve">
          <source>Fetch truncated part of a message. Returned data is a tuple of message part envelope and data.</source>
          <target state="translated">メッセージの切り捨てられた部分を取得します。返されるデータは、メッセージ部分のエンベロープとデータのタプルです。</target>
        </trans-unit>
        <trans-unit id="41a014822c374f4dc32ed7c3bb8b27a133b416fe" translate="yes" xml:space="preserve">
          <source>Fetches all (remaining) rows of a query result, returning a list. Note that the cursor&amp;rsquo;s arraysize attribute can affect the performance of this operation. An empty list is returned when no rows are available.</source>
          <target state="translated">クエリ結果のすべての（残りの）行をフェッチし、リストを返します。カーソルのarraysize属性は、この操作のパフォーマンスに影響を与える可能性があることに注意してください。使用可能な行がない場合、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="b5c8387f5e5b6662fa105e9b5dc36427bb6cda63" translate="yes" xml:space="preserve">
          <source>Fetches the next row of a query result set, returning a single sequence, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; when no more data is available.</source>
          <target state="translated">クエリ結果セットの次の行をフェッチして単一のシーケンスを返すか、使用できるデータがない場合は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="e2a8b384625d9b783eb012a6161ee49d504b3ea1" translate="yes" xml:space="preserve">
          <source>Fetches the next set of rows of a query result, returning a list. An empty list is returned when no more rows are available.</source>
          <target state="translated">クエリ結果の次の行のセットを取得し、リストを返します。これ以上の行がない場合は、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="82d6a64de9a0838fcf2235d8ad49a6d8855b7d1d" translate="yes" xml:space="preserve">
          <source>Fetching a &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt;&lt;code&gt;PropertyMock&lt;/code&gt;&lt;/a&gt; instance from an object calls the mock, with no args. Setting it calls the mock with the value being set.</source>
          <target state="translated">オブジェクトから&lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt; &lt;code&gt;PropertyMock&lt;/code&gt; &lt;/a&gt;インスタンスをフェッチすると、引数なしでモックが呼び出されます。設定すると、設定されている値でモックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d54dbc3819945e4ef1e4f3d81c00a574445b7866" translate="yes" xml:space="preserve">
          <source>Fetching a header value from a &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; results in that header being parsed and a header object created and returned.</source>
          <target state="translated">&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;からヘッダー値をフェッチすると、そのヘッダーが解析され、ヘッダーオブジェクトが作成されて返されます。</target>
        </trans-unit>
        <trans-unit id="7fdf343dc9e81798f45e8297c11c3eb775196edb" translate="yes" xml:space="preserve">
          <source>Fetching attributes statically</source>
          <target state="translated">属性を静的に取得する</target>
        </trans-unit>
        <trans-unit id="c326a4660b674d2f6ea82687a1e1abae2337541f" translate="yes" xml:space="preserve">
          <source>Field</source>
          <target state="translated">Field</target>
        </trans-unit>
        <trans-unit id="2dc913c8c6f4ce49af0f66f51e4ef93d71f78ea2" translate="yes" xml:space="preserve">
          <source>Field &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-descriptor&quot;&gt;descriptor&lt;/a&gt;s can be retrieved from the &lt;em&gt;class&lt;/em&gt;, they are useful for debugging because they can provide useful information:</source>
          <target state="translated">フィールド&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-descriptor&quot;&gt;記述子&lt;/a&gt;は&lt;em&gt;クラス&lt;/em&gt;から取得できます。これらは有用な情報を提供できるため、デバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a9ad8121718f3a086e20f1b811bdb35613fea58f" translate="yes" xml:space="preserve">
          <source>Field names must be unique within one structure or union. This is not checked, only one field can be accessed when names are repeated.</source>
          <target state="translated">フィールド名は、1つの構造体またはユニオン内で一意でなければなりません。これはチェックされておらず、名前が繰り返されると1つのフィールドにしかアクセスできません。</target>
        </trans-unit>
        <trans-unit id="1aebfd4803965d0fd4af25c185165627060d49d6" translate="yes" xml:space="preserve">
          <source>Field values can be ints, strings, or instances of the Binary class.</source>
          <target state="translated">フィールドの値は、イント、文字列、またはバイナリクラスのインスタンスのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="5c2529071dd608545d05e8531aeb3706a1791075" translate="yes" xml:space="preserve">
          <source>Fields with a default value must come after any fields without a default.</source>
          <target state="translated">デフォルト値を持つフィールドは、デフォルト値のないフィールドの後に来る必要があります。</target>
        </trans-unit>
        <trans-unit id="d19959803c490a8117d9f8eafb258f26113cfeed" translate="yes" xml:space="preserve">
          <source>File &amp;amp; Directory Access</source>
          <target state="translated">ファイルとディレクトリへのアクセス</target>
        </trans-unit>
        <trans-unit id="d63d873dbd7f480c6ba1f630266ff8116e6cfb7e" translate="yes" xml:space="preserve">
          <source>File Descriptor Operations</source>
          <target state="translated">ファイル記述子操作</target>
        </trans-unit>
        <trans-unit id="0d12a3f0ea99ebe85fe967431fc2aa6a3e0fd02b" translate="yes" xml:space="preserve">
          <source>File Formats</source>
          <target state="translated">ファイル形式</target>
        </trans-unit>
        <trans-unit id="4bade3d77b57056d9a51c2d50dd4f03f30abeec7" translate="yes" xml:space="preserve">
          <source>File Handlers</source>
          <target state="translated">ファイルハンドラ</target>
        </trans-unit>
        <trans-unit id="e6e2940ee51b2dfd01e2af1d2390a9c616642912" translate="yes" xml:space="preserve">
          <source>File Names, Command Line Arguments, and Environment Variables</source>
          <target state="translated">ファイル名、コマンドライン引数、環境変数</target>
        </trans-unit>
        <trans-unit id="6dec3d0c4b79541a012c7baa6831c7a5ed83666c" translate="yes" xml:space="preserve">
          <source>File Object Creation</source>
          <target state="translated">ファイルオブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="a726cab0d7c518573e2f7003375fc21599153b1b" translate="yes" xml:space="preserve">
          <source>File Operations</source>
          <target state="translated">ファイル操作</target>
        </trans-unit>
        <trans-unit id="fb6199fbca045175a16aa44e72c21f07a4b53d94" translate="yes" xml:space="preserve">
          <source>File Selectors</source>
          <target state="translated">ファイルセレクタ</target>
        </trans-unit>
        <trans-unit id="14692faa66db9ad4f6b25ac054c61284fcee9f47" translate="yes" xml:space="preserve">
          <source>File Separator</source>
          <target state="translated">ファイルセパレータ</target>
        </trans-unit>
        <trans-unit id="65d2775d2856db4e2072563cba39b4d84c4b88b1" translate="yes" xml:space="preserve">
          <source>File System limitations</source>
          <target state="translated">ファイルシステムの制限</target>
        </trans-unit>
        <trans-unit id="ba50e3ff10f69bbcd78d2b51aa445f4bc91949b8" translate="yes" xml:space="preserve">
          <source>File and Directory Access</source>
          <target state="translated">ファイルとディレクトリへのアクセス</target>
        </trans-unit>
        <trans-unit id="f706e474058c3454a43a75c49c2b8118348979e4" translate="yes" xml:space="preserve">
          <source>File descriptor in bad state</source>
          <target state="translated">状態の悪いファイルディスクリプタ</target>
        </trans-unit>
        <trans-unit id="a95112fa18cc4f2138e56a1ce528b00f3ae2af02" translate="yes" xml:space="preserve">
          <source>File descriptors are small integers corresponding to a file that has been opened by the current process. For example, standard input is usually file descriptor 0, standard output is 1, and standard error is 2. Further files opened by a process will then be assigned 3, 4, 5, and so forth. The name &amp;ldquo;file descriptor&amp;rdquo; is slightly deceptive; on Unix platforms, sockets and pipes are also referenced by file descriptors.</source>
          <target state="translated">ファイル記述子は、現在のプロセスによって開かれたファイルに対応する小さな整数です。たとえば、標準入力は通常ファイル記述子0、標準出力は1、標準エラーは2です。プロセスによって開かれたファイルには、3、4、5などが割り当てられます。「ファイル記述子」という名前は少し紛らわしいです。Unixプラットフォームでは、ソケットとパイプもファイル記述子によって参照されます。</target>
        </trans-unit>
        <trans-unit id="e4abf36a5ea54ec41cce22ec0fe706639aba0b93" translate="yes" xml:space="preserve">
          <source>File exists</source>
          <target state="translated">ファイルが存在する</target>
        </trans-unit>
        <trans-unit id="cb5afff2713b6247dbc93cc5a2a8350787630318" translate="yes" xml:space="preserve">
          <source>File generation number.</source>
          <target state="translated">ファイル生成番号。</target>
        </trans-unit>
        <trans-unit id="3e8a264d601e926718226415b8aea5f39c39c77a" translate="yes" xml:space="preserve">
          <source>File locking deadlock error</source>
          <target state="translated">ファイルロックデッドロックエラー</target>
        </trans-unit>
        <trans-unit id="a753126c02a7cdcf2329de8b6f0184b625a67089" translate="yes" xml:space="preserve">
          <source>File menu (Shell and Editor)</source>
          <target state="translated">ファイルメニュー(シェルとエディタ</target>
        </trans-unit>
        <trans-unit id="6ec4b4ae68331f38e8eb79a30a03536a294a8f5c" translate="yes" xml:space="preserve">
          <source>File mode: file type and file mode bits (permissions).</source>
          <target state="translated">ファイルモード:ファイルタイプとファイルモードビット(パーミッション)。</target>
        </trans-unit>
        <trans-unit id="8a87b64cae5a39a0265ada62f19e089c25fa123c" translate="yes" xml:space="preserve">
          <source>File name too long</source>
          <target state="translated">ファイル名が長すぎる</target>
        </trans-unit>
        <trans-unit id="42f4b294f545a51be6ba48389e180aadbe58f642" translate="yes" xml:space="preserve">
          <source>File object registered.</source>
          <target state="translated">ファイルオブジェクトを登録しました。</target>
        </trans-unit>
        <trans-unit id="b8840fb4bc3b477275dcdcfe4e561235b1db91f8" translate="yes" xml:space="preserve">
          <source>File objects on Windows are not acceptable, but sockets are. On Windows, the underlying &lt;code&gt;select()&lt;/code&gt; function is provided by the WinSock library, and does not handle file descriptors that don&amp;rsquo;t originate from WinSock.</source>
          <target state="translated">Windows上のファイルオブジェクトは受け入れられませんが、ソケットは受け入れられます。Windowsでは、基になる &lt;code&gt;select()&lt;/code&gt; 関数はWinSockライブラリによって提供され、WinSockに由来しないファイル記述子を処理しません。</target>
        </trans-unit>
        <trans-unit id="600941bc483d702b3e6700aa5c9df8eaacfc769f" translate="yes" xml:space="preserve">
          <source>File separator</source>
          <target state="translated">ファイルセパレータ</target>
        </trans-unit>
        <trans-unit id="f61db49fc791da76e7a4fae457554297e80648e3" translate="yes" xml:space="preserve">
          <source>File system calls on reserved paths can fail mysteriously or have unintended effects.</source>
          <target state="translated">予約されたパス上でのファイルシステムコールは、不思議なことに失敗したり、意図しない影響を与えたりすることがあります。</target>
        </trans-unit>
        <trans-unit id="78c59929bfdd3ce1a14ecda0c9b3a704ea61f8d0" translate="yes" xml:space="preserve">
          <source>File system path representation: &lt;code&gt;__fspath__&lt;/code&gt;</source>
          <target state="translated">ファイルシステムパス表現： &lt;code&gt;__fspath__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bca9e4b99c52f14bead7db3f4a025c74ea71611" translate="yes" xml:space="preserve">
          <source>File table overflow</source>
          <target state="translated">ファイルテーブルのオーバーフロー</target>
        </trans-unit>
        <trans-unit id="a0704a4eaa055ab08e3766911e446737f4f2a445" translate="yes" xml:space="preserve">
          <source>File too large</source>
          <target state="translated">ファイルが大きすぎる</target>
        </trans-unit>
        <trans-unit id="51583aa4b17cb383a15403102b60604e1ffe68c3" translate="yes" xml:space="preserve">
          <source>File type.</source>
          <target state="translated">ファイルの種類。</target>
        </trans-unit>
        <trans-unit id="e0343558dc440a496930dadd39dd8387c3ef8a09" translate="yes" xml:space="preserve">
          <source>File type. &lt;em&gt;type&lt;/em&gt; is usually one of these constants: &lt;code&gt;REGTYPE&lt;/code&gt;, &lt;code&gt;AREGTYPE&lt;/code&gt;, &lt;code&gt;LNKTYPE&lt;/code&gt;, &lt;code&gt;SYMTYPE&lt;/code&gt;, &lt;code&gt;DIRTYPE&lt;/code&gt;, &lt;code&gt;FIFOTYPE&lt;/code&gt;, &lt;code&gt;CONTTYPE&lt;/code&gt;, &lt;code&gt;CHRTYPE&lt;/code&gt;, &lt;code&gt;BLKTYPE&lt;/code&gt;, &lt;code&gt;GNUTYPE_SPARSE&lt;/code&gt;. To determine the type of a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object more conveniently, use the &lt;code&gt;is*()&lt;/code&gt; methods below.</source>
          <target state="translated">ファイルタイプ。&lt;em&gt;タイプは、&lt;/em&gt;通常、これらの定数のいずれかです。 &lt;code&gt;REGTYPE&lt;/code&gt; 、 &lt;code&gt;AREGTYPE&lt;/code&gt; 、 &lt;code&gt;LNKTYPE&lt;/code&gt; 、 &lt;code&gt;SYMTYPE&lt;/code&gt; 、 &lt;code&gt;DIRTYPE&lt;/code&gt; 、 &lt;code&gt;FIFOTYPE&lt;/code&gt; 、 &lt;code&gt;CONTTYPE&lt;/code&gt; 、 &lt;code&gt;CHRTYPE&lt;/code&gt; 、 &lt;code&gt;BLKTYPE&lt;/code&gt; 、 &lt;code&gt;GNUTYPE_SPARSE&lt;/code&gt; 。&lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt;オブジェクトのタイプをより簡単に判別するには、以下の &lt;code&gt;is*()&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="fc6610cbbc8b48db2b32dc4cea18d4eb726c9792" translate="yes" xml:space="preserve">
          <source>FileCookieJar subclasses and co-operation with web browsers</source>
          <target state="translated">FileCookieJar のサブクラスとウェブブラウザとの連携</target>
        </trans-unit>
        <trans-unit id="f383b8e9b99251c23741b31d5cc53abb63e20cdc" translate="yes" xml:space="preserve">
          <source>FileExistsError</source>
          <target state="translated">FileExistsError</target>
        </trans-unit>
        <trans-unit id="0ac6dbee4d8f540761408e72685ba06c2b71eae5" translate="yes" xml:space="preserve">
          <source>FileHandler</source>
          <target state="translated">FileHandler</target>
        </trans-unit>
        <trans-unit id="badf54288fb507d144cec214315538aa33ce8145" translate="yes" xml:space="preserve">
          <source>FileHandler Objects</source>
          <target state="translated">FileHandler オブジェクト</target>
        </trans-unit>
        <trans-unit id="58c4fa0a0ae8dd1958950cee046cf91990f7447f" translate="yes" xml:space="preserve">
          <source>FileNotFoundError</source>
          <target state="translated">FileNotFoundError</target>
        </trans-unit>
        <trans-unit id="08f576d210cb57554632ff4a6560f019db2aebb7" translate="yes" xml:space="preserve">
          <source>FileType objects</source>
          <target state="translated">ファイルタイプオブジェクト</target>
        </trans-unit>
        <trans-unit id="1327b5f2d09eccc6cf4ed8241ec999e6fd23b758" translate="yes" xml:space="preserve">
          <source>FileType objects understand the pseudo-argument &lt;code&gt;'-'&lt;/code&gt; and automatically convert this into &lt;code&gt;sys.stdin&lt;/code&gt; for readable &lt;a href=&quot;#argparse.FileType&quot;&gt;&lt;code&gt;FileType&lt;/code&gt;&lt;/a&gt; objects and &lt;code&gt;sys.stdout&lt;/code&gt; for writable &lt;a href=&quot;#argparse.FileType&quot;&gt;&lt;code&gt;FileType&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">ファイルタイプのオブジェクトは、擬似引数を理解する &lt;code&gt;'-'&lt;/code&gt; と、自動的にこれを変換する &lt;code&gt;sys.stdin&lt;/code&gt; を読めるのための&lt;a href=&quot;#argparse.FileType&quot;&gt; &lt;code&gt;FileType&lt;/code&gt; &lt;/a&gt;のオブジェクトおよび &lt;code&gt;sys.stdout&lt;/code&gt; の書き込み可能&lt;a href=&quot;#argparse.FileType&quot;&gt; &lt;code&gt;FileType&lt;/code&gt; &lt;/a&gt;のオブジェクト：</target>
        </trans-unit>
        <trans-unit id="40393ad111e27bcc683ee72e707bba890145c9d7" translate="yes" xml:space="preserve">
          <source>Filename (&lt;code&gt;str&lt;/code&gt;).</source>
          <target state="translated">ファイル名（ &lt;code&gt;str&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="87a4cc2de20c7671ca65638a2d02e9365422f798" translate="yes" xml:space="preserve">
          <source>Filename of default file in which to keep cookies. This attribute may be assigned to.</source>
          <target state="translated">クッキーを保存するデフォルトファイルのファイル名。この属性を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="52c43544dfb2a45f1802d1c763e2a6dc8daaa754" translate="yes" xml:space="preserve">
          <source>Filename pattern of the filter (&lt;code&gt;str&lt;/code&gt;). Read-only property.</source>
          <target state="translated">フィルターのファイル名パターン（ &lt;code&gt;str&lt;/code&gt; ）。読み取り専用プロパティ。</target>
        </trans-unit>
        <trans-unit id="68d63bdb6592b17bfb046f862f466553bd3f6720" translate="yes" xml:space="preserve">
          <source>Filename portion of &lt;code&gt;pathname&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; 名のファイル名部分。</target>
        </trans-unit>
        <trans-unit id="003505cb00a80d1f2f5ea93d0f9242196378636c" translate="yes" xml:space="preserve">
          <source>Files and Directories</source>
          <target state="translated">ファイルとディレクトリ</target>
        </trans-unit>
        <trans-unit id="759a6920d195b7ce8672f19ab41d440633e44c8b" translate="yes" xml:space="preserve">
          <source>Files and subdirectories in &lt;em&gt;a&lt;/em&gt;, filtered by &lt;em&gt;hide&lt;/em&gt; and &lt;em&gt;ignore&lt;/em&gt;.</source>
          <target state="translated">内のファイルやサブディレクトリ、によってフィルタリング&lt;em&gt;非表示に&lt;/em&gt;し、&lt;em&gt;無視します&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3a3936a42ac96b8925399b319d5a7d796d3d8db8" translate="yes" xml:space="preserve">
          <source>Files and subdirectories in &lt;em&gt;b&lt;/em&gt;, filtered by &lt;em&gt;hide&lt;/em&gt; and &lt;em&gt;ignore&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;bの&lt;/em&gt;ファイルとサブディレクトリ。&lt;em&gt;非表示&lt;/em&gt;と&lt;em&gt;無視&lt;/em&gt;でフィルタリングされます。</target>
        </trans-unit>
        <trans-unit id="a8b6fbc3a2273d1bb7466dae95464866701031f5" translate="yes" xml:space="preserve">
          <source>Files and subdirectories in both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bの&lt;/em&gt;両方に&lt;em&gt;ある&lt;/em&gt;ファイルとサブディレクトリ。</target>
        </trans-unit>
        <trans-unit id="ed0be31e2bc597af493e72f4f33679b95df48ed6" translate="yes" xml:space="preserve">
          <source>Files and subdirectories only in &lt;em&gt;a&lt;/em&gt;.</source>
          <target state="translated">ファイルだけでサブディレクトリ。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ac464055e749e1e5b207f242390a2ba0bfdade9" translate="yes" xml:space="preserve">
          <source>Files and subdirectories only in &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;b&lt;/em&gt;のみのファイルとサブディレクトリ。</target>
        </trans-unit>
        <trans-unit id="a4ae626010c4822a53276953b22090762c22ac3e" translate="yes" xml:space="preserve">
          <source>Files are an example of effectively single use context managers, since the first &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement will close the file, preventing any further IO operations using that file object.</source>
          <target state="translated">最初の&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントはファイルを閉じ、そのファイルオブジェクトを使用した以降のIO操作を防止するため、ファイルは効果的に使い捨てのコンテキストマネージャーの例です。</target>
        </trans-unit>
        <trans-unit id="4cd878bcefca3ec6e629466dc58bb31702253a22" translate="yes" xml:space="preserve">
          <source>Files in both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bの&lt;/em&gt;両方に&lt;em&gt;ある&lt;/em&gt;ファイル。</target>
        </trans-unit>
        <trans-unit id="ea2f41f1c05642d27cd04535fc0e6f3df0c5954b" translate="yes" xml:space="preserve">
          <source>Files which are identical in both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, using the class&amp;rsquo;s file comparison operator.</source>
          <target state="translated">クラスのファイル比較演算子を使用し&lt;em&gt;た&lt;/em&gt;、&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bの&lt;/em&gt;両方で同一のファイル。</target>
        </trans-unit>
        <trans-unit id="749d478161c9a248300f584a3f2f59df027d8b21" translate="yes" xml:space="preserve">
          <source>Files which are in both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, but could not be compared.</source>
          <target state="translated">&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bの&lt;/em&gt;両方にあるが、比較できなかったファイル。</target>
        </trans-unit>
        <trans-unit id="633f984cfb9a0ec3e74e412efec54a2603e5069c" translate="yes" xml:space="preserve">
          <source>Files which are in both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, whose contents differ according to the class&amp;rsquo;s file comparison operator.</source>
          <target state="translated">&lt;em&gt;a&lt;/em&gt;と&lt;em&gt;bの&lt;/em&gt;両方に&lt;em&gt;ある&lt;/em&gt;ファイルで、クラスのファイル比較演算子によって内容が異なります。</target>
        </trans-unit>
        <trans-unit id="3d1ee9e004d27605af6eb217be8809442c35a541" translate="yes" xml:space="preserve">
          <source>Fill the shape drawn after the last call to &lt;a href=&quot;#turtle.begin_fill&quot;&gt;&lt;code&gt;begin_fill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#turtle.begin_fill&quot;&gt; &lt;code&gt;begin_fill()&lt;/code&gt; &lt;/a&gt;への最後の呼び出しの後に描画された形状を塗りつぶします。</target>
        </trans-unit>
        <trans-unit id="98325be45e57b01ea42841fb2dc63e31875877c1" translate="yes" xml:space="preserve">
          <source>Filling</source>
          <target state="translated">Filling</target>
        </trans-unit>
        <trans-unit id="3310f43302c999c8492a42df42ea6b5b288e9557" translate="yes" xml:space="preserve">
          <source>Filling an &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; with information about program arguments is done by making calls to the &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; method. Generally, these calls tell the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; how to take the strings on the command line and turn them into objects. This information is stored and used when &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; is called. For example:</source>
          <target state="translated">充填&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;に呼び出して実行されるプログラムの引数に関する情報を&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt;メソッドを。一般に、これらの呼び出しは&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; に&lt;/a&gt;コマンドラインで文字列を取得してオブジェクトに変換する方法を伝えます。この情報は、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;が呼び出されたときに保存および使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="a912d88c08a6e2310110ffbd20aa2b37095a730a" translate="yes" xml:space="preserve">
          <source>Filter Objects</source>
          <target state="translated">フィルタオブジェクト</target>
        </trans-unit>
        <trans-unit id="a2d118fb1199e7aba611e82fb161d544d1eac75d" translate="yes" xml:space="preserve">
          <source>Filter action.</source>
          <target state="translated">フィルターアクション。</target>
        </trans-unit>
        <trans-unit id="40f168dc65ac13c1d458eb61d8d66634ac1a3375" translate="yes" xml:space="preserve">
          <source>Filter on traces of memory blocks.</source>
          <target state="translated">メモリブロックの痕跡にフィルタをかけます。</target>
        </trans-unit>
        <trans-unit id="46599895c7cc0e31d2f5baffff2b94f7c4930832" translate="yes" xml:space="preserve">
          <source>Filter specific EOF condition</source>
          <target state="translated">フィルタ固有のEOF条件</target>
        </trans-unit>
        <trans-unit id="46c8bfb7a3178cfafcd4b07b975d5792a4676ea6" translate="yes" xml:space="preserve">
          <source>Filter specific data.</source>
          <target state="translated">特定のデータをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="9ac71d86bc0dc3c87565de360f8c150dfeaa3a12" translate="yes" xml:space="preserve">
          <source>Filter specific flags.</source>
          <target state="translated">特定のフラグをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="f615ce4691db8194f5e5c00719b0315f74011927" translate="yes" xml:space="preserve">
          <source>Filter traces of memory blocks by their address space (domain).</source>
          <target state="translated">メモリブロックのトレースをアドレス空間(ドメイン)でフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="2353cd812767e6ab918c30790318afb782c94439" translate="yes" xml:space="preserve">
          <source>Filters provide a finer grained facility for determining which log records to output.</source>
          <target state="translated">フィルタは、出力するログレコードを決定するための、より細かな機能を提供します。</target>
        </trans-unit>
        <trans-unit id="91234c54704fa45cc1c28452be237689e3afdac5" translate="yes" xml:space="preserve">
          <source>Finalizer Objects</source>
          <target state="translated">ファイナライザオブジェクト</target>
        </trans-unit>
        <trans-unit id="b4a9f27a229332b0ddb9b525d8627f1feae36bc7" translate="yes" xml:space="preserve">
          <source>Finally send the headers to the output stream and flush the internal headers buffer.</source>
          <target state="translated">最後にヘッダを出力ストリームに送り、内部ヘッダバッファをフラッシュします。</target>
        </trans-unit>
        <trans-unit id="5340045eb569806018888d3e6ca8151bb31425b6" translate="yes" xml:space="preserve">
          <source>Finally the &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; provides the following methods and attributes:</source>
          <target state="translated">最後に、&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;は次のメソッドと属性を提供します。</target>
        </trans-unit>
        <trans-unit id="ac7a70a71bee49fd5902a24b61b093fc56eeefe4" translate="yes" xml:space="preserve">
          <source>Finally, developers of interactive shells that run user code in a namespace other than &lt;code&gt;__main__&lt;/code&gt; are advised to ensure that &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt; messages are made visible by default, using code like the following (where &lt;code&gt;user_ns&lt;/code&gt; is the module used to execute code entered interactively):</source>
          <target state="translated">以外の名前空間で対話型シェルその実行のユーザーコードの最後に、開発者 &lt;code&gt;__main__&lt;/code&gt; があることを保証することをお勧めします&lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt; &lt;code&gt;DeprecationWarning&lt;/code&gt; &lt;/a&gt;メッセージは、以下の（どこのようなコードを使用して、デフォルトで可視化され &lt;code&gt;user_ns&lt;/code&gt; が対話的に入力したコードを実行するモジュール使用されます）：</target>
        </trans-unit>
        <trans-unit id="54483631603508ccb6eef71317df3b382f7a7d0f" translate="yes" xml:space="preserve">
          <source>Finally, it provides some additional type-related utility classes and functions that are not fundamental enough to be builtins.</source>
          <target state="translated">最後に、型に関連したユーティリティクラスや関数をいくつか追加で提供していますが、ビルドインとしては十分に基本的なものではありません。</target>
        </trans-unit>
        <trans-unit id="4cc1441649b921d6fdae0ab41c8bf613ba751dc2" translate="yes" xml:space="preserve">
          <source>Finally, split each entry into a list with first name, last name, telephone number, and address. We use the &lt;code&gt;maxsplit&lt;/code&gt; parameter of &lt;a href=&quot;#re.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; because the address has spaces, our splitting pattern, in it:</source>
          <target state="translated">最後に、各エントリを名、姓、電話番号、住所のリストに分割します。アドレスにはスペース（分割パターン&lt;a href=&quot;#re.split&quot;&gt; &lt;code&gt;split()&lt;/code&gt; &lt;/a&gt;ため、split（）の &lt;code&gt;maxsplit&lt;/code&gt; パラメーターを使用します。</target>
        </trans-unit>
        <trans-unit id="ca29ccfc698632fd34f8bef6c54a4c7594301bca" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;em&gt;type&lt;/em&gt; determines how the data should be presented.</source>
          <target state="translated">最後に、&lt;em&gt;タイプ&lt;/em&gt;はデータの表示方法を決定します。</target>
        </trans-unit>
        <trans-unit id="6e412b4e5a4b243814ad83cb939463fbbfcd9073" translate="yes" xml:space="preserve">
          <source>Finally, the last line makes &lt;code&gt;Foo&lt;/code&gt; a virtual subclass of &lt;code&gt;MyIterable&lt;/code&gt;, even though it does not define an &lt;a href=&quot;stdtypes#iterator.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; method (it uses the old-style iterable protocol, defined in terms of &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt;). Note that this will not make &lt;code&gt;get_iterator&lt;/code&gt; available as a method of &lt;code&gt;Foo&lt;/code&gt;, so it is provided separately.</source>
          <target state="translated">最後に、最後の行は &lt;code&gt;Foo&lt;/code&gt; を &lt;code&gt;MyIterable&lt;/code&gt; の仮想サブクラスにしますが、それは&lt;a href=&quot;stdtypes#iterator.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt;メソッドを定義していません（これは、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;に関して定義された古いスタイルの反復可能なプロトコルを使用しています）。これは &lt;code&gt;get_iterator&lt;/code&gt; を &lt;code&gt;Foo&lt;/code&gt; のメソッドとして利用可能にするわけではないので、別に提供されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="90e60f8d4aa2795892376f060e02bfac6967dbef" translate="yes" xml:space="preserve">
          <source>Finally, the module defines the following functions:</source>
          <target state="translated">最後に、モジュールは以下の関数を定義しています。</target>
        </trans-unit>
        <trans-unit id="4802b5d7cd86363b824fd0ca9a616c0d0c5ad299" translate="yes" xml:space="preserve">
          <source>Finally, we compare the two:</source>
          <target state="translated">最後に比較してみます。</target>
        </trans-unit>
        <trans-unit id="df251b06eefdaa932e97b54fbe9a74d3e606fa61" translate="yes" xml:space="preserve">
          <source>Find</source>
          <target state="translated">Find</target>
        </trans-unit>
        <trans-unit id="e22d01c9a1cff7d8d85bf94c081d389c7cb45c44" translate="yes" xml:space="preserve">
          <source>Find Again</source>
          <target state="translated">再検索</target>
        </trans-unit>
        <trans-unit id="fee9d437c96f424d55cbaea346f0b4c8fcac6cb5" translate="yes" xml:space="preserve">
          <source>Find Selection</source>
          <target state="translated">選択範囲の検索</target>
        </trans-unit>
        <trans-unit id="ef1f9108191ec94e03062bd8ad91db6782be5303" translate="yes" xml:space="preserve">
          <source>Find all the test modules by recursing into subdirectories from the specified start directory, and return a TestSuite object containing them. Only test files that match &lt;em&gt;pattern&lt;/em&gt; will be loaded. (Using shell style pattern matching.) Only module names that are importable (i.e. are valid Python identifiers) will be loaded.</source>
          <target state="translated">指定された開始ディレクトリからサブディレクトリに再帰してすべてのテストモジュールを検索し、それらを含むTestSuiteオブジェクトを返します。&lt;em&gt;パターン&lt;/em&gt;に一致するテストファイルのみが読み込まれます。（シェルスタイルのパターンマッチングを使用します。）インポート可能なモジュール名（つまり、有効なPython識別子）のみが読み込まれます。</target>
        </trans-unit>
        <trans-unit id="5c62bc8f6363fb9566dfbefc3e5e304573710820" translate="yes" xml:space="preserve">
          <source>Find in Files&amp;hellip;</source>
          <target state="translated">ファイル内を検索&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="e1a3407ce9c645e9293a18e98df208634d5b0fd6" translate="yes" xml:space="preserve">
          <source>Find longest matching block in &lt;code&gt;a[alo:ahi]&lt;/code&gt; and &lt;code&gt;b[blo:bhi]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a[alo:ahi]&lt;/code&gt; と &lt;code&gt;b[blo:bhi]&lt;/code&gt; 最長一致ブロックを見つけます。</target>
        </trans-unit>
        <trans-unit id="88973852d34b548cba7442351fe7931983f58261" translate="yes" xml:space="preserve">
          <source>Find the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for a module, optionally relative to the specified &lt;strong&gt;package&lt;/strong&gt; name. If the module is in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;sys.modules[name].__spec__&lt;/code&gt; is returned (unless the spec would be &lt;code&gt;None&lt;/code&gt; or is not set, in which case &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised). Otherwise a search using &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; is done. &lt;code&gt;None&lt;/code&gt; is returned if no spec is found.</source>
          <target state="translated">モジュールの&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;仕様&lt;/a&gt;を検索します。オプションで、指定された&lt;strong&gt;パッケージ&lt;/strong&gt;名に関連しています。モジュールが&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; にある&lt;/a&gt;場合、 &lt;code&gt;sys.modules[name].__spec__&lt;/code&gt; が返されます（仕様が &lt;code&gt;None&lt;/code&gt; であるか、設定されていない&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;は、ValueErrorが発生します）。それ以外の場合は、&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;を使用した検索が行われます。仕様が見つからない場合は、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="bb323e03785be602bcba83db798ce16c9bf59cc4" translate="yes" xml:space="preserve">
          <source>Find the &lt;a href=&quot;https://en.wikipedia.org/wiki/Quartile&quot;&gt;quartiles&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Decile&quot;&gt;deciles&lt;/a&gt; for the SAT scores:</source>
          <target state="translated">SATスコアの&lt;a href=&quot;https://en.wikipedia.org/wiki/Quartile&quot;&gt;四分位数&lt;/a&gt;と&lt;a href=&quot;https://en.wikipedia.org/wiki/Decile&quot;&gt;十分&lt;/a&gt;位数を見つけます。</target>
        </trans-unit>
        <trans-unit id="54727e2ae4fbfa9a1379603de62399cc1ea08e5c" translate="yes" xml:space="preserve">
          <source>Find the loader for a module, optionally within the specified &lt;em&gt;path&lt;/em&gt;. If the module is in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;sys.modules[name].__loader__&lt;/code&gt; is returned (unless the loader would be &lt;code&gt;None&lt;/code&gt; or is not set, in which case &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised). Otherwise a search using &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; is done. &lt;code&gt;None&lt;/code&gt; is returned if no loader is found.</source>
          <target state="translated">オプションで指定された&lt;em&gt;パス&lt;/em&gt;内で、モジュールのローダーを検索し&lt;em&gt;ます&lt;/em&gt;。モジュールが&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; にある&lt;/a&gt;場合、 &lt;code&gt;sys.modules[name].__loader__&lt;/code&gt; が返されます（ローダーが &lt;code&gt;None&lt;/code&gt; であるか、設定されていない&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;は、ValueErrorが発生します）。それ以外の場合は、&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;を使用した検索が行われます。 &lt;code&gt;None&lt;/code&gt; なしローダーが見つからない場合に返されません。</target>
        </trans-unit>
        <trans-unit id="466bd9c283ada3a2104411c5b7cd20bcb47f3b3e" translate="yes" xml:space="preserve">
          <source>Find&amp;hellip;</source>
          <target state="translated">Find&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="cf4be453d54751062a87b79b8d32be07d8baa9ca" translate="yes" xml:space="preserve">
          <source>Finding all Adverbs</source>
          <target state="translated">すべての副詞を探す</target>
        </trans-unit>
        <trans-unit id="b721c6da8e2db8fb2ef1a1be90eac8dd41d6f9e7" translate="yes" xml:space="preserve">
          <source>Finding all Adverbs and their Positions</source>
          <target state="translated">すべての副詞とその位置を見つける</target>
        </trans-unit>
        <trans-unit id="0a2099ef6eb29e011a3b48632c5a2afdec3ee58e" translate="yes" xml:space="preserve">
          <source>Finding interesting elements</source>
          <target state="translated">面白い要素を探す</target>
        </trans-unit>
        <trans-unit id="f7bb5e00680fccf4dcccd7c41b77a19932915851" translate="yes" xml:space="preserve">
          <source>Finding shared libraries</source>
          <target state="translated">共有ライブラリの検索</target>
        </trans-unit>
        <trans-unit id="8e54a9c2cec2bb117d48536f67fc88db48ee2cec" translate="yes" xml:space="preserve">
          <source>Finds all matching subelements, by tag name or &lt;a href=&quot;#elementtree-xpath&quot;&gt;path&lt;/a&gt;. Returns a list containing all matching elements in document order. &lt;em&gt;namespaces&lt;/em&gt; is an optional mapping from namespace prefix to full name. Pass &lt;code&gt;''&lt;/code&gt; as prefix to move all unprefixed tag names in the expression into the given namespace.</source>
          <target state="translated">タグ名または&lt;a href=&quot;#elementtree-xpath&quot;&gt;パスで&lt;/a&gt;、一致するすべてのサブ要素を検索します。ドキュメント順にすべての一致する要素を含むリストを返します。&lt;em&gt;名前空間&lt;/em&gt;は、名前空間接頭辞からフルネームへのオプションのマッピングです。パス &lt;code&gt;''&lt;/code&gt; 指定された名前空間に式のすべての接頭辞タグ名を移動するための接頭辞として。</target>
        </trans-unit>
        <trans-unit id="d859b654af5ed61880223a7226d7e7e1d3483231" translate="yes" xml:space="preserve">
          <source>Finds all matching subelements, by tag name or &lt;a href=&quot;#elementtree-xpath&quot;&gt;path&lt;/a&gt;. Returns an iterable yielding all matching elements in document order. &lt;em&gt;namespaces&lt;/em&gt; is an optional mapping from namespace prefix to full name.</source>
          <target state="translated">タグ名または&lt;a href=&quot;#elementtree-xpath&quot;&gt;パスで&lt;/a&gt;、一致するすべてのサブ要素を検索します。ドキュメントの順序で一致するすべての要素を生成する反復可能オブジェクトを返します。&lt;em&gt;名前空間&lt;/em&gt;は、名前空間接頭辞からフルネームへのオプションのマッピングです。</target>
        </trans-unit>
        <trans-unit id="5b27a1b5e4d00faec99659152610aca79a1d8fdf" translate="yes" xml:space="preserve">
          <source>Finds and returns the closest &lt;a href=&quot;#fractions.Fraction&quot;&gt;&lt;code&gt;Fraction&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;self&lt;/code&gt; that has denominator at most max_denominator. This method is useful for finding rational approximations to a given floating-point number:</source>
          <target state="translated">分母が最大max_denominatorである、 &lt;code&gt;self&lt;/code&gt; 最も近い&lt;a href=&quot;#fractions.Fraction&quot;&gt; &lt;code&gt;Fraction&lt;/code&gt; &lt;/a&gt;を検索して返します。このメソッドは、指定された浮動小数点数の有理近似を見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d10a60a0eaf8db436783842ebe25ff70039b0d06" translate="yes" xml:space="preserve">
          <source>Finds text for the first subelement matching &lt;em&gt;match&lt;/em&gt;. &lt;em&gt;match&lt;/em&gt; may be a tag name or a &lt;a href=&quot;#elementtree-xpath&quot;&gt;path&lt;/a&gt;. Returns the text content of the first matching element, or &lt;em&gt;default&lt;/em&gt; if no element was found. Note that if the matching element has no text content an empty string is returned. &lt;em&gt;namespaces&lt;/em&gt; is an optional mapping from namespace prefix to full name. Pass &lt;code&gt;''&lt;/code&gt; as prefix to move all unprefixed tag names in the expression into the given namespace.</source>
          <target state="translated">&lt;em&gt;matchに&lt;/em&gt;一致する最初のサブエレメントのテキストを検索します。&lt;em&gt;match&lt;/em&gt;はタグ名または&lt;a href=&quot;#elementtree-xpath&quot;&gt;パス&lt;/a&gt;です。最初に一致した要素のテキストコンテンツ、または要素が見つからなかった場合の&lt;em&gt;デフォルトを&lt;/em&gt;返します。一致する要素にテキストコンテンツがない場合は、空の文字列が返されることに注意してください。&lt;em&gt;名前空間&lt;/em&gt;は、名前空間接頭辞からフルネームへのオプションのマッピングです。パス &lt;code&gt;''&lt;/code&gt; 指定された名前空間に式のすべての接頭辞タグ名を移動するための接頭辞として。</target>
        </trans-unit>
        <trans-unit id="da452c485a924a8c6950daa3d141c59442b42e7b" translate="yes" xml:space="preserve">
          <source>Finds the caller&amp;rsquo;s source filename and line number. Returns the filename, line number, function name and stack information as a 4-element tuple. The stack information is returned as &lt;code&gt;None&lt;/code&gt; unless &lt;em&gt;stack_info&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">呼び出し元のソースファイル名と行番号を検索します。ファイル名、行番号、関数名、スタック情報を4要素のタプルとして返します。&lt;em&gt;stack_info&lt;/em&gt;が &lt;code&gt;True&lt;/code&gt; でない限り、スタック情報は &lt;code&gt;None&lt;/code&gt; として返されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ef05bb45a66bea7421c281f5a43ff7fb8a6ea316" translate="yes" xml:space="preserve">
          <source>Finds the first subelement matching &lt;em&gt;match&lt;/em&gt;. &lt;em&gt;match&lt;/em&gt; may be a tag name or a &lt;a href=&quot;#elementtree-xpath&quot;&gt;path&lt;/a&gt;. Returns an element instance or &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;namespaces&lt;/em&gt; is an optional mapping from namespace prefix to full name. Pass &lt;code&gt;''&lt;/code&gt; as prefix to move all unprefixed tag names in the expression into the given namespace.</source>
          <target state="translated">&lt;em&gt;matchに&lt;/em&gt;一致する最初のサブエレメントを検索します。&lt;em&gt;match&lt;/em&gt;はタグ名または&lt;a href=&quot;#elementtree-xpath&quot;&gt;パス&lt;/a&gt;です。要素インスタンスまたは &lt;code&gt;None&lt;/code&gt; を返します。&lt;em&gt;名前空間&lt;/em&gt;は、名前空間接頭辞からフルネームへのオプションのマッピングです。パス &lt;code&gt;''&lt;/code&gt; 指定された名前空間に式のすべての接頭辞タグ名を移動するための接頭辞として。</target>
        </trans-unit>
        <trans-unit id="383b6f69481b14ce56e9a9c5c3e3db37deae4310" translate="yes" xml:space="preserve">
          <source>Finds the value &lt;em&gt;x&lt;/em&gt; of the random variable &lt;em&gt;X&lt;/em&gt; such that the probability of the variable being less than or equal to that value equals the given probability &lt;em&gt;p&lt;/em&gt;.</source>
          <target state="translated">確率変数&lt;em&gt;X&lt;/em&gt;の値&lt;em&gt;x&lt;/em&gt;を見つけ、変数がその値以下である確率が指定された確率&lt;em&gt;p&lt;/em&gt;と等しくなるようにします。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="04d5bbaf630e544c5dc9e758ee6e372783543ff0" translate="yes" xml:space="preserve">
          <source>Finer Points</source>
          <target state="translated">細かい点</target>
        </trans-unit>
        <trans-unit id="432bdfa8572e3f54d5ae893d2654804bc7796b03" translate="yes" xml:space="preserve">
          <source>Finish the compression process, returning a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object containing any data stored in the compressor&amp;rsquo;s internal buffers.</source>
          <target state="translated">圧縮プロセスを終了し、コンプレッサーの内部バッファーに格納されているデータを含む&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="baed4062148e238b2036d98ee1192d5e5bac6f1c" translate="yes" xml:space="preserve">
          <source>Finish the compression process. Returns the compressed data left in internal buffers.</source>
          <target state="translated">圧縮処理を終了します。内部バッファに残っている圧縮データを返します。</target>
        </trans-unit>
        <trans-unit id="a6b9354378ed8f6903d12116f4cc1f005f0095a5" translate="yes" xml:space="preserve">
          <source>Finishes cleaning up the stack when a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement block exits.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントブロックが終了すると、スタックのクリーンアップが終了します。</target>
        </trans-unit>
        <trans-unit id="321b3d472ac84279a6e6dbb1bf70264bbbfa42e3" translate="yes" xml:space="preserve">
          <source>Finishes feeding data to the parser. Returns the result of calling the &lt;code&gt;close()&lt;/code&gt; method of the &lt;em&gt;target&lt;/em&gt; passed during construction; by default, this is the toplevel document element.</source>
          <target state="translated">パーサーへのデータの供給を終了します。構築中に渡された&lt;em&gt;ターゲットの&lt;/em&gt; &lt;code&gt;close()&lt;/code&gt; メソッドを呼び出した結果を返します。デフォルトでは、これはトップレベルのドキュメント要素です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="41b7c3042f5a197e5d2450646a9d85e745f8b93c" translate="yes" xml:space="preserve">
          <source>First of all, check for trivial installation errors &amp;mdash; reading the section above on installing your CGI script carefully can save you a lot of time. If you wonder whether you have understood the installation procedure correctly, try installing a copy of this module file (&lt;code&gt;cgi.py&lt;/code&gt;) as a CGI script. When invoked as a script, the file will dump its environment and the contents of the form in HTML form. Give it the right mode etc, and send it a request. If it&amp;rsquo;s installed in the standard &lt;code&gt;cgi-bin&lt;/code&gt; directory, it should be possible to send it a request by entering a URL into your browser of the form:</source>
          <target state="translated">まず、些細なインストールエラーがないか確認します。CGIスクリプトのインストールに関する上記のセクションを注意深く読むと、時間を大幅に節約できます。インストール手順を正しく理解したかどうか疑問に思う場合は、このモジュールファイル（ &lt;code&gt;cgi.py&lt;/code&gt; ）のコピーをCGIスクリプトとしてインストールしてみてください。スクリプトとして呼び出されると、ファイルはその環境とフォームの内容をHTML形式でダンプします。適切なモードなどを指定して、リクエストを送信します。標準の &lt;code&gt;cgi-bin&lt;/code&gt; ディレクトリにインストールされている場合は、次の形式でブラウザにURLを入力することで、リクエストを送信できるはずです。</target>
        </trans-unit>
        <trans-unit id="ebb675d8053ea8a8ebe83ac6094160e6e0071a71" translate="yes" xml:space="preserve">
          <source>First the problem specific to &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt; has two assert methods that are extremely handy: &lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt;&lt;code&gt;assert_called_with()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt;&lt;code&gt;assert_called_once_with()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">まず、&lt;a href=&quot;#unittest.mock.Mock&quot;&gt; &lt;code&gt;Mock&lt;/code&gt; &lt;/a&gt;固有の問題です。&lt;a href=&quot;#unittest.mock.Mock&quot;&gt; &lt;code&gt;Mock&lt;/code&gt; に&lt;/a&gt;は、&lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt; &lt;code&gt;assert_called_with()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt; &lt;code&gt;assert_called_once_with()&lt;/code&gt; &lt;/a&gt;という非常に便利な2つのassertメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="98a58557fac74f7c207b0b17436f5fa6565e938f" translate="yes" xml:space="preserve">
          <source>First the whitespace in &lt;em&gt;text&lt;/em&gt; is collapsed (all whitespace is replaced by single spaces). If the result fits in the &lt;em&gt;width&lt;/em&gt;, it is returned. Otherwise, enough words are dropped from the end so that the remaining words plus the &lt;code&gt;placeholder&lt;/code&gt; fit within &lt;code&gt;width&lt;/code&gt;:</source>
          <target state="translated">最初に、&lt;em&gt;テキスト&lt;/em&gt;の空白が折りたたまれ&lt;em&gt;ます&lt;/em&gt;（すべての空白は単一のスペースに置き換えられます）。結果が&lt;em&gt;width&lt;/em&gt;に収まる場合は、それが返されます。そうでない場合は、残りの単語と &lt;code&gt;placeholder&lt;/code&gt; が &lt;code&gt;width&lt;/code&gt; 内に収まるように、十分な単語が最後から削除されます。</target>
        </trans-unit>
        <trans-unit id="60176e770782809052d5a4eae68bdf54ef2f18da" translate="yes" xml:space="preserve">
          <source>First, here is the input. Normally it may come from a file, here we are using triple-quoted string syntax</source>
          <target state="translated">まず、ここに入力があります。通常はファイルからの入力ですが、ここではトリプルクォートの文字列構文を使用しています。</target>
        </trans-unit>
        <trans-unit id="8ac8683471df447adf6eda69155e038372dd0b95" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s see how to create and send a simple text message (both the text content and the addresses may contain unicode characters):</source>
          <target state="translated">最初に、簡単なテキストメッセージを作成して送信する方法を見てみましょう（テキストコンテンツとアドレスの両方にUnicode文字が含まれている場合があります）。</target>
        </trans-unit>
        <trans-unit id="4920efe102a0e3e17da7a48214b1bdd90e8c1783" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll define a converter function that accepts the string as a parameter and constructs a &lt;code&gt;Point&lt;/code&gt; object from it.</source>
          <target state="translated">最初に、文字列をパラメーターとして受け取り、そこから &lt;code&gt;Point&lt;/code&gt; オブジェクトを構築するコンバーター関数を定義します。</target>
        </trans-unit>
        <trans-unit id="93012090d3ab01bc45208ed0ff57920fc70eb692" translate="yes" xml:space="preserve">
          <source>First, you must create a class for the callback function. The class knows the calling convention, the return type, and the number and types of arguments this function will receive.</source>
          <target state="translated">まず、コールバック関数のクラスを作成する必要があります。このクラスは、呼び出し規約、戻り値の型、この関数が受け取る引数の数と型を知っています。</target>
        </trans-unit>
        <trans-unit id="7d07384c1c8d9575109c37bcf20f13d8dfa38fc1" translate="yes" xml:space="preserve">
          <source>Firstly, the syntax for bytes literals is largely the same as that for string literals, except that a &lt;code&gt;b&lt;/code&gt; prefix is added:</source>
          <target state="translated">まず、バイトリテラルの構文は、 &lt;code&gt;b&lt;/code&gt; 接頭辞が追加されていることを除いて、文字列リテラルの構文とほとんど同じです。</target>
        </trans-unit>
        <trans-unit id="cae6d93dfa09be89bb26051b385df24aec65afc3" translate="yes" xml:space="preserve">
          <source>Fixed-point notation. Displays the number as a fixed-point number. The default precision is &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">固定小数点表記。数値を固定小数点数として表示します。デフォルトの精度は &lt;code&gt;6&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="33dac53d2b4a4305f7f3bd7b3790965764d3b777" translate="yes" xml:space="preserve">
          <source>Fixed-point notation. Same as &lt;code&gt;'f'&lt;/code&gt;, but converts &lt;code&gt;nan&lt;/code&gt; to &lt;code&gt;NAN&lt;/code&gt; and &lt;code&gt;inf&lt;/code&gt; to &lt;code&gt;INF&lt;/code&gt;.</source>
          <target state="translated">固定小数点表記。 &lt;code&gt;'f'&lt;/code&gt; と同じですが、 &lt;code&gt;nan&lt;/code&gt; を &lt;code&gt;NAN&lt;/code&gt; に、 &lt;code&gt;inf&lt;/code&gt; を &lt;code&gt;INF&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="53c31b9a84b3e76a8d130dc88d836771394313f6" translate="yes" xml:space="preserve">
          <source>Fixers</source>
          <target state="translated">Fixers</target>
        </trans-unit>
        <trans-unit id="a774409a00c21de377cf8ed5c6a56b8547973042" translate="yes" xml:space="preserve">
          <source>Flag</source>
          <target state="translated">Flag</target>
        </trans-unit>
        <trans-unit id="7c9da9ff0cbbea2040b17e92a80753515d34a4d1" translate="yes" xml:space="preserve">
          <source>Flag indicating whether or not the global data structures have been initialized. This is set to &lt;code&gt;True&lt;/code&gt; by &lt;a href=&quot;#mimetypes.init&quot;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">グローバルデータ構造が初期化されているかどうかを示すフラグ。これは&lt;a href=&quot;#mimetypes.init&quot;&gt; &lt;code&gt;init()&lt;/code&gt; &lt;/a&gt;によって &lt;code&gt;True&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="c927012d2c39be22f56b1f50daa3abb8534258b8" translate="yes" xml:space="preserve">
          <source>Flag indicating whether to print only the filenames of files containing whitespace related problems. This is set to true by the &lt;code&gt;-q&lt;/code&gt; option if called as a script.</source>
          <target state="translated">空白に関連する問題を含むファイルのファイル名のみを印刷するかどうかを示すフラグ。これは、スクリプトとして呼び出された場合、 &lt;code&gt;-q&lt;/code&gt; オプションによってtrueに設定されます。</target>
        </trans-unit>
        <trans-unit id="040ef0b73190ae184815b93c35518c7d638c9bfa" translate="yes" xml:space="preserve">
          <source>Flag indicating whether to print verbose messages. This is incremented by the &lt;code&gt;-v&lt;/code&gt; option if called as a script.</source>
          <target state="translated">詳細メッセージを出力するかどうかを示すフラグ。これは、スクリプトとして呼び出されると、 &lt;code&gt;-v&lt;/code&gt; オプションによって増分されます。</target>
        </trans-unit>
        <trans-unit id="b827eb1ab4608b80fa780507f686619a8640bde9" translate="yes" xml:space="preserve">
          <source>Flag message number &lt;em&gt;which&lt;/em&gt; for deletion. On most servers deletions are not actually performed until QUIT (the major exception is Eudora QPOP, which deliberately violates the RFCs by doing pending deletes on any disconnect).</source>
          <target state="translated">旗のメッセージ番号削除のため。ほとんどのサーバーでは、削除は実際にはQUITまで実行されません（主要な例外はEudora QPOPで、切断時に保留中の削除を行うことにより意図的にRFCに違反します）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b2c7e2cd1de9bde763ad0040d719d08ce2bcd792" translate="yes" xml:space="preserve">
          <source>Flag showing the status of the user site-packages directory. &lt;code&gt;True&lt;/code&gt; means that it is enabled and was added to &lt;code&gt;sys.path&lt;/code&gt;. &lt;code&gt;False&lt;/code&gt; means that it was disabled by user request (with &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-s&quot;&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONNOUSERSITE&quot; id=&quot;index-8&quot;&gt;&lt;code&gt;PYTHONNOUSERSITE&lt;/code&gt;&lt;/a&gt;). &lt;code&gt;None&lt;/code&gt; means it was disabled for security reasons (mismatch between user or group id and effective id) or by an administrator.</source>
          <target state="translated">ユーザーのサイトパッケージディレクトリのステータスを示すフラグ。 &lt;code&gt;True&lt;/code&gt; は、それが有効になっていて、 &lt;code&gt;sys.path&lt;/code&gt; に追加されたことを意味します。 &lt;code&gt;False&lt;/code&gt; は、ユーザー要求（&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-s&quot;&gt; &lt;code&gt;-s&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONNOUSERSITE&quot; id=&quot;index-8&quot;&gt; &lt;code&gt;PYTHONNOUSERSITE&lt;/code&gt; を使用&lt;/a&gt;）によって無効にされたことを意味します。 &lt;code&gt;None&lt;/code&gt; は、セキュリティ上の理由（ユーザーIDまたはグループIDと実効IDの不一致）または管理者によって無効にされたことを意味します。</target>
        </trans-unit>
        <trans-unit id="250420fa54c4474c1a02e4a0675c7b67e4859b14" translate="yes" xml:space="preserve">
          <source>Flag to use as &lt;em&gt;mode&lt;/em&gt; parameter. On platforms where this flag is not available, it is defined as the integer zero.</source>
          <target state="translated">&lt;em&gt;モード&lt;/em&gt;パラメータとして使用するフラグ。このフラグが使用できないプラットフォームでは、整数ゼロとして定義されます。</target>
        </trans-unit>
        <trans-unit id="27da8f9d92b7abf1907ea7a26ca4441a58763537" translate="yes" xml:space="preserve">
          <source>Flag to use as &lt;em&gt;mode&lt;/em&gt; parameter. On platforms where this is not available, it is the same as &lt;em&gt;RTLD_GLOBAL&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;モード&lt;/em&gt;パラメータとして使用するフラグ。これが利用できないプラットフォームでは、&lt;em&gt;RTLD_GLOBAL&lt;/em&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="f8db8a172be6fab179a39aa7dee85e1f7afcbd56" translate="yes" xml:space="preserve">
          <source>Flagged</source>
          <target state="translated">Flagged</target>
        </trans-unit>
        <trans-unit id="1f07acd047ff4da9984807d5f9663de56e86b6b0" translate="yes" xml:space="preserve">
          <source>Flags for use with the &lt;a href=&quot;sys#sys.setdlopenflags&quot;&gt;&lt;code&gt;setdlopenflags()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sys#sys.getdlopenflags&quot;&gt;&lt;code&gt;getdlopenflags()&lt;/code&gt;&lt;/a&gt; functions. See the Unix manual page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/dlopen(3)&quot;&gt;dlopen(3)&lt;/a&gt;&lt;/em&gt; for what the different flags mean.</source>
          <target state="translated">&lt;a href=&quot;sys#sys.setdlopenflags&quot;&gt; &lt;code&gt;setdlopenflags()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;sys#sys.getdlopenflags&quot;&gt; &lt;code&gt;getdlopenflags()&lt;/code&gt; &lt;/a&gt;関数で使用するフラグ。異なるフラグの意味については、Unixのマニュアルページの&lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/dlopen(3)&quot;&gt;dlopen（3）&lt;/a&gt;&lt;/em&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cd24040b0de304246d5aae1e83cfc89a9def0cfd" translate="yes" xml:space="preserve">
          <source>Flags indicating how strict to be with domain-matching rules for Netscape cookies. See below for acceptable values.</source>
          <target state="translated">Netscapeクッキーのドメインマッチングルールをどの程度厳密にするかを示すフラグです。許容できる値は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="c56c51fdb9503b6e8d9353fdc1a8910b2b26f96b" translate="yes" xml:space="preserve">
          <source>Flags that can be used in &lt;em&gt;advice&lt;/em&gt; in &lt;a href=&quot;#os.posix_fadvise&quot;&gt;&lt;code&gt;posix_fadvise()&lt;/code&gt;&lt;/a&gt; that specify the access pattern that is likely to be used.</source>
          <target state="translated">&lt;a href=&quot;#os.posix_fadvise&quot;&gt; &lt;code&gt;posix_fadvise()&lt;/code&gt; の&lt;/a&gt;&lt;em&gt;アドバイス&lt;/em&gt;で使用できるフラグで、使用される可能性が高いアクセスパターンを指定します。</target>
        </trans-unit>
        <trans-unit id="4b29537980e35e6955e907c0423783c7fd5421c9" translate="yes" xml:space="preserve">
          <source>Flags that can be used in &lt;em&gt;options&lt;/em&gt; in &lt;a href=&quot;#os.waitid&quot;&gt;&lt;code&gt;waitid()&lt;/code&gt;&lt;/a&gt; that specify what child signal to wait for.</source>
          <target state="translated">待機する子シグナルを指定する&lt;a href=&quot;#os.waitid&quot;&gt; &lt;code&gt;waitid()&lt;/code&gt; の&lt;/a&gt;&lt;em&gt;オプション&lt;/em&gt;で使用できるフラグ。</target>
        </trans-unit>
        <trans-unit id="be03f41ac820d005e351ffd4e5eca83d99f28dd1" translate="yes" xml:space="preserve">
          <source>Flags that specify what action &lt;a href=&quot;#os.lockf&quot;&gt;&lt;code&gt;lockf()&lt;/code&gt;&lt;/a&gt; will take.</source>
          <target state="translated">&lt;a href=&quot;#os.lockf&quot;&gt; &lt;code&gt;lockf()&lt;/code&gt; &lt;/a&gt;が実行するアクションを指定するフラグ。</target>
        </trans-unit>
        <trans-unit id="6b378e0209f751bf8ed04ced4462379afd4e9bee" translate="yes" xml:space="preserve">
          <source>Flash the screen. That is, change it to reverse-video and then change it back in a short interval. Some people prefer such as &amp;lsquo;visible bell&amp;rsquo; to the audible attention signal produced by &lt;a href=&quot;#curses.beep&quot;&gt;&lt;code&gt;beep()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">画面を点滅させます。つまり、それを反転ビデオに変更してから、短い間隔で元に戻します。一部の人々は、&lt;a href=&quot;#curses.beep&quot;&gt; &lt;code&gt;beep()&lt;/code&gt; &lt;/a&gt;によって生成される可聴注意信号よりも「可視ベル」などを好みます。</target>
        </trans-unit>
        <trans-unit id="0ef0237069aeed94495fee21d06b8dfebec5e725" translate="yes" xml:space="preserve">
          <source>Flattening the message may trigger changes to the &lt;a href=&quot;#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; if defaults need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified).</source>
          <target state="translated">文字列への変換を完了するためにデフォルトを入力する必要がある場合（たとえば、MIME境界が生成または変更される場合）、メッセージをフラット化すると、&lt;a href=&quot;#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;への変更がトリガーされる場合があります。</target>
        </trans-unit>
        <trans-unit id="6338fe9d3c497dd27f17da5bf52b9bad1bcb9779" translate="yes" xml:space="preserve">
          <source>Flattening the message may trigger changes to the &lt;a href=&quot;#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; if defaults need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified).</source>
          <target state="translated">文字列への変換を完了するためにデフォルトを入力する必要がある場合（たとえば、MIME境界が生成または変更される場合）、メッセージをフラット化すると、&lt;a href=&quot;#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;変更がトリガーされることがあります。</target>
        </trans-unit>
        <trans-unit id="683dbea5f7e1b5080e1ef7590ab4063b4f6510c0" translate="yes" xml:space="preserve">
          <source>Float value. If set, this is the maximum value to which the increment button will increment.</source>
          <target state="translated">フロート値。設定されている場合、これはインクリメントボタンがインクリメントする最大値です。</target>
        </trans-unit>
        <trans-unit id="7afaf725c9b3acf299192e4694d4dfeb71640eb3" translate="yes" xml:space="preserve">
          <source>Float value. If set, this is the minimum value to which the decrement button will decrement. Must be spelled as &lt;code&gt;from_&lt;/code&gt; when used as an argument, since &lt;code&gt;from&lt;/code&gt; is a Python keyword.</source>
          <target state="translated">フロート値。設定されている場合、これは減少ボタンが減少する最小値です。 &lt;code&gt;from&lt;/code&gt; はPythonキーワードであるため、引数として使用する場合は &lt;code&gt;from_&lt;/code&gt; とスペルする必要があります。</target>
        </trans-unit>
        <trans-unit id="33b570f9eefd74d9957d763fc0f22770675a13a7" translate="yes" xml:space="preserve">
          <source>Float value. Specifies the amount which the increment/decrement buttons change the value. Defaults to 1.0.</source>
          <target state="translated">フロート値。増分/減分ボタンで値が変化する量を指定します。デフォルトは1.0です。</target>
        </trans-unit>
        <trans-unit id="1e1efdbc9f8f5ce44c24fc5643ba097cac8e6daf" translate="yes" xml:space="preserve">
          <source>Floating Point Notes</source>
          <target state="translated">浮動小数点ノート</target>
        </trans-unit>
        <trans-unit id="73d93d27d9be83ac0e1af6809845bb8b3e09dbf0" translate="yes" xml:space="preserve">
          <source>Floating point decimal format.</source>
          <target state="translated">浮動小数点10進数形式。</target>
        </trans-unit>
        <trans-unit id="2b8008eef2f18bcf702847524bbc3d7f4c157eeb" translate="yes" xml:space="preserve">
          <source>Floating point exponential format (lowercase).</source>
          <target state="translated">浮動小数点指数形式(小文字)。</target>
        </trans-unit>
        <trans-unit id="3c529f15e6525e1ea8a92bc5c4f6df6089d52413" translate="yes" xml:space="preserve">
          <source>Floating point exponential format (uppercase).</source>
          <target state="translated">浮動小数点指数形式(大文字)。</target>
        </trans-unit>
        <trans-unit id="da386ed9df0e1a298956f76f008527bba636b22b" translate="yes" xml:space="preserve">
          <source>Floating point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.</source>
          <target state="translated">浮動小数点形式。指数が-4以下または精度以下の場合は小文字の指数形式を使用し、それ以外の場合は10進数形式を使用します。</target>
        </trans-unit>
        <trans-unit id="ef7899b795de9435e853c0f84ac89f21e7eb5224" translate="yes" xml:space="preserve">
          <source>Floating point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.</source>
          <target state="translated">浮動小数点形式。指数が-4以下または精度以下の場合は大文字の指数形式を使用し、それ以外の場合は10進数形式を使用します。</target>
        </trans-unit>
        <trans-unit id="394f073446cec66b8aa90a4344a4ceaf8429ec3d" translate="yes" xml:space="preserve">
          <source>Floating-point numbers are also subject to small output variations across platforms, because Python defers to the platform C library for float formatting, and C libraries vary widely in quality here.</source>
          <target state="translated">浮動小数点数はまた、Pythonが浮動小数点フォーマットのためにプラットフォームのCライブラリに依存し、Cライブラリの品質はここでは大きく異なるため、プラットフォームによって出力のばらつきが大きくなります。</target>
        </trans-unit>
        <trans-unit id="9f798cc28676aec8b10ead1c825d53504590834d" translate="yes" xml:space="preserve">
          <source>Floating-point positive infinity. Equivalent to &lt;code&gt;float('inf')&lt;/code&gt;.</source>
          <target state="translated">浮動小数点正の無限大。 &lt;code&gt;float('inf')&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="5e9add85e668caad4a6328b8f15ea6541b73c6c7" translate="yes" xml:space="preserve">
          <source>FloatingPointError</source>
          <target state="translated">FloatingPointError</target>
        </trans-unit>
        <trans-unit id="0693c8a5c8ecb50a7a38a20549795a6f793dc1be" translate="yes" xml:space="preserve">
          <source>Flow Control Callbacks</source>
          <target state="translated">フロー制御コールバック</target>
        </trans-unit>
        <trans-unit id="71ba0aeeee03560a33571599cba3282543b48123" translate="yes" xml:space="preserve">
          <source>Flow control callbacks can be called by transports to pause or resume writing performed by the protocol.</source>
          <target state="translated">フロー制御コールバックは、プロトコルによって実行される書き込みを一時停止または再開する ために、トランスポートから呼び出すことができる。</target>
        </trans-unit>
        <trans-unit id="4ecb5d4d4053c9b879e8913cfbedf4f7978220bc" translate="yes" xml:space="preserve">
          <source>Flush all input buffers. This throws away any typeahead that has been typed by the user and has not yet been processed by the program.</source>
          <target state="translated">すべての入力バッファをフラッシュします。これは、ユーザによってタイプされ、プログラムによってまだ処理されていないtypeaheadをすべて捨てます。</target>
        </trans-unit>
        <trans-unit id="39b8d0deff165745e1650b86238a87db9a3d861a" translate="yes" xml:space="preserve">
          <source>Flush and close this stream. This method has no effect if the file is already closed. Once the file is closed, any operation on the file (e.g. reading or writing) will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このストリームをフラッシュして閉じます。ファイルがすでに閉じている場合、このメソッドは効果がありません。ファイルが閉じられると、ファイルの操作（読み取りや書き込みなど）によって&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f25b943d17f0a4cc96966f6ad97127f3bd8ce97b" translate="yes" xml:space="preserve">
          <source>Flush the mailbox, unlock it if necessary, and close any open files. For some &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; subclasses, this method does nothing.</source>
          <target state="translated">メールボックスをフラッシュし、必要に応じてロックを解除して、開いているファイルをすべて閉じます。一部の&lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt;サブクラスでは、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="f0a42975d0bcde8b733a94ac57ae99d81da7fcc2" translate="yes" xml:space="preserve">
          <source>Flush the write buffers of the stream if applicable. This does nothing for read-only and non-blocking streams.</source>
          <target state="translated">該当する場合は、ストリームの書き込みバッファをフラッシュします。これは、読み取り専用およびノンブロッキングストリームに対しては何もしません。</target>
        </trans-unit>
        <trans-unit id="4039231f6971b19f5762909fe4049214cea03da4" translate="yes" xml:space="preserve">
          <source>Flushes and resets the codec buffers used for keeping state.</source>
          <target state="translated">状態を保持するために使用されるコーデックバッファをフラッシュしてリセットします。</target>
        </trans-unit>
        <trans-unit id="78c377fb030c4de02734cba213327ba32b5fd57a" translate="yes" xml:space="preserve">
          <source>Flushes changes made to the in-memory copy of a file back to disk. Without use of this call there is no guarantee that changes are written back before the object is destroyed. If &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;size&lt;/em&gt; are specified, only changes to the given range of bytes will be flushed to disk; otherwise, the whole extent of the mapping is flushed. &lt;em&gt;offset&lt;/em&gt; must be a multiple of the &lt;code&gt;PAGESIZE&lt;/code&gt; or &lt;code&gt;ALLOCATIONGRANULARITY&lt;/code&gt;.</source>
          <target state="translated">ファイルのメモリ内コピーに加えられた変更をディスクにフラッシュします。この呼び出しを使用しない場合、オブジェクトが破棄される前に変更が書き戻される保証はありません。&lt;em&gt;オフセット&lt;/em&gt;と&lt;em&gt;サイズ&lt;/em&gt;が指定されている場合、指定されたバイト範囲への変更のみがディスクにフラッシュされます。それ以外の場合、マッピングの全範囲がフラッシュされます。&lt;em&gt;オフセット&lt;/em&gt;は &lt;code&gt;PAGESIZE&lt;/code&gt; または &lt;code&gt;ALLOCATIONGRANULARITY&lt;/code&gt; の倍数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="41986902b98edde6379cd94cf6c7f023e70d0fe6" translate="yes" xml:space="preserve">
          <source>Flushes the builder buffers, and returns the toplevel document element. Returns an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">ビルダーバッファーをフラッシュし、トップレベルのドキュメント要素を返します。&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="dc210bf30127cac653beb084658fda0da6f45889" translate="yes" xml:space="preserve">
          <source>Flushes the stream by calling its &lt;a href=&quot;#logging.StreamHandler.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; method. Note that the &lt;code&gt;close()&lt;/code&gt; method is inherited from &lt;a href=&quot;logging#logging.Handler&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; and so does no output, so an explicit &lt;a href=&quot;#logging.StreamHandler.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; call may be needed at times.</source>
          <target state="translated">&lt;a href=&quot;#logging.StreamHandler.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出してストリームをフラッシュします。そのノート &lt;code&gt;close()&lt;/code&gt; メソッドから継承され&lt;a href=&quot;logging#logging.Handler&quot;&gt; &lt;code&gt;Handler&lt;/code&gt; &lt;/a&gt;ので、何も出力しないので、明示的な&lt;a href=&quot;#logging.StreamHandler.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;コールは時間に必要とされるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f4020d665d9a15a4d0ab442217ea3d38ffe31911" translate="yes" xml:space="preserve">
          <source>Folders of the style introduced by the Courier mail transfer agent are also supported. Any subdirectory of the main mailbox is considered a folder if &lt;code&gt;'.'&lt;/code&gt; is the first character in its name. Folder names are represented by &lt;a href=&quot;#mailbox.Maildir&quot;&gt;&lt;code&gt;Maildir&lt;/code&gt;&lt;/a&gt; without the leading &lt;code&gt;'.'&lt;/code&gt;. Each folder is itself a Maildir mailbox but should not contain other folders. Instead, a logical nesting is indicated using &lt;code&gt;'.'&lt;/code&gt; to delimit levels, e.g., &amp;ldquo;Archived.2005.07&amp;rdquo;.</source>
          <target state="translated">Courierメール転送エージェントによって導入されたスタイルのフォルダーもサポートされています。メインメールボックスのサブディレクトリは、 &lt;code&gt;'.'&lt;/code&gt; 場合、フォルダと見なされます。その名前の最初の文字です。フォルダー名は、先頭に &lt;code&gt;'.'&lt;/code&gt; ずに&lt;a href=&quot;#mailbox.Maildir&quot;&gt; &lt;code&gt;Maildir&lt;/code&gt; で&lt;/a&gt;表されます。。各フォルダーはそれ自体がMaildirメールボックスですが、他のフォルダーを含めることはできません。代わりに、論理的な入れ子は &lt;code&gt;'.'&lt;/code&gt; を使用して示されます。レベルを区切るには、たとえば、「Archived.2005.07」のようにします。</target>
        </trans-unit>
        <trans-unit id="e0afbb547de77db1371251680e81a10a8521c254" translate="yes" xml:space="preserve">
          <source>Follow &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site). If this is false, cookies are &lt;em&gt;never&lt;/em&gt; blocked on the basis of verifiability</source>
          <target state="translated">検証不可能なトランザクションに関する&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;RFC 2965の&lt;/strong&gt;&lt;/a&gt;規則に従い&lt;strong&gt;ます&lt;/strong&gt;（通常、検証不可能なトランザクションは、リダイレクトまたは別のサイトでホストされているイメージの要求から生じるトランザクションです）。これがfalseの場合、検証可能性に基づいてCookieがブロックされる&lt;em&gt;こと&lt;/em&gt;はあり&lt;em&gt;ません&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="46a2e0da6005d5c7eddb823accb719141d484e5c" translate="yes" xml:space="preserve">
          <source>Following the syntax specifications in &lt;a href=&quot;https://tools.ietf.org/html/rfc1808.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 1808&lt;/strong&gt;&lt;/a&gt;, urlparse recognizes a netloc only if it is properly introduced by &amp;lsquo;//&amp;rsquo;. Otherwise the input is presumed to be a relative URL and thus to start with a path component.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc1808.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 1808の&lt;/strong&gt;&lt;/a&gt;構文仕様に従い、urlparseは '//'によって適切に導入された場合にのみnetlocを認識します。それ以外の場合、入力は相対URLであると想定されるため、パスコンポーネントで始まります。</target>
        </trans-unit>
        <trans-unit id="f67ed379569ddcc92ff738fa2c112d30bd25f249" translate="yes" xml:space="preserve">
          <source>Following those is a set of examples of using the fundamental parts of the APIs covered in the preceding sections.</source>
          <target state="translated">それに続いて、前節で紹介したAPIの基本的な部分の使用例を紹介します。</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="e52f0c6de209dfb773b81a5673b25d8bbc8e41eb" translate="yes" xml:space="preserve">
          <source>For 200 error codes, the response object is returned immediately.</source>
          <target state="translated">200個のエラーコードの場合、レスポンスオブジェクトが直ちに返されます。</target>
        </trans-unit>
        <trans-unit id="86ecf6649b6cf50b465714b6d4be9d666f6c9256" translate="yes" xml:space="preserve">
          <source>For 8-bit (bytes) patterns:</source>
          <target state="translated">8ビット(バイト)パターンの場合。</target>
        </trans-unit>
        <trans-unit id="364fc032d2ac2d86022ecf240a005c499b0e698c" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; objects, the format codes for hours, minutes, seconds, and microseconds should not be used, as &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; objects have no such values. If they&amp;rsquo;re used anyway, &lt;code&gt;0&lt;/code&gt; is substituted for them.</source>
          <target state="translated">以下のために&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;などのオブジェクト、時間、分、秒、およびマイクロ秒のフォーマットコードは、使用すべきではない&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;オブジェクトはそのような値を持っていません。とにかく使用した場合は、 &lt;code&gt;0&lt;/code&gt; に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="21d045e0f9184298bfc8cd53780d2b8799a0cad1" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects, the format codes for year, month, and day should not be used, as &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects have no such values. If they&amp;rsquo;re used anyway, &lt;code&gt;1900&lt;/code&gt; is substituted for the year, and &lt;code&gt;1&lt;/code&gt; for the month and day.</source>
          <target state="translated">以下のための&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;としてオブジェクト、年、月、日の書式コードは、使用すべきではない&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトはそのような値を持っていません。とにかく使用した場合、 &lt;code&gt;1900&lt;/code&gt; は1900に、月と日は &lt;code&gt;1&lt;/code&gt; に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="7908bd03afc2ba909165e823ebd06ea57784d13a" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; operands &lt;em&gt;base&lt;/em&gt; and &lt;em&gt;exp&lt;/em&gt;, if &lt;em&gt;mod&lt;/em&gt; is present, &lt;em&gt;mod&lt;/em&gt; must also be of integer type and &lt;em&gt;mod&lt;/em&gt; must be nonzero. If &lt;em&gt;mod&lt;/em&gt; is present and &lt;em&gt;exp&lt;/em&gt; is negative, &lt;em&gt;base&lt;/em&gt; must be relatively prime to &lt;em&gt;mod&lt;/em&gt;. In that case, &lt;code&gt;pow(inv_base, -exp, mod)&lt;/code&gt; is returned, where &lt;em&gt;inv_base&lt;/em&gt; is an inverse to &lt;em&gt;base&lt;/em&gt; modulo &lt;em&gt;mod&lt;/em&gt;.</source>
          <target state="translated">以下のため&lt;a href=&quot;#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;オペランド&lt;em&gt;ベース&lt;/em&gt;と&lt;em&gt;EXP&lt;/em&gt;場合、&lt;em&gt;modは&lt;/em&gt;存在し、&lt;em&gt;MODは&lt;/em&gt;また、整数型でなければならず、&lt;em&gt;MODは&lt;/em&gt;非ゼロでなければなりません。場合&lt;em&gt;modは&lt;/em&gt;存在し、&lt;em&gt;expが&lt;/em&gt;負の場合、&lt;em&gt;ベースは&lt;/em&gt;と互いに素でなければならない&lt;em&gt;のmod&lt;/em&gt;。その場合、 &lt;code&gt;pow(inv_base, -exp, mod)&lt;/code&gt; が返されます。ここで、&lt;em&gt;inv_base&lt;/em&gt;は&lt;em&gt;modを&lt;/em&gt;法とする&lt;em&gt;ベースの&lt;/em&gt;逆です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="704b75eae7e4709ca3714d6d7d487a58699927fc" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#os.execle&quot;&gt;&lt;code&gt;execle()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execlpe&quot;&gt;&lt;code&gt;execlpe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execve&quot;&gt;&lt;code&gt;execve()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.execvpe&quot;&gt;&lt;code&gt;execvpe()&lt;/code&gt;&lt;/a&gt; (note that these all end in &amp;ldquo;e&amp;rdquo;), the &lt;em&gt;env&lt;/em&gt; parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process&amp;rsquo; environment); the functions &lt;a href=&quot;#os.execl&quot;&gt;&lt;code&gt;execl()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execlp&quot;&gt;&lt;code&gt;execlp()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.execv&quot;&gt;&lt;code&gt;execv()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.execvp&quot;&gt;&lt;code&gt;execvp()&lt;/code&gt;&lt;/a&gt; all cause the new process to inherit the environment of the current process.</source>
          <target state="translated">用&lt;a href=&quot;#os.execle&quot;&gt; &lt;code&gt;execle()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execlpe&quot;&gt; &lt;code&gt;execlpe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execve&quot;&gt; &lt;code&gt;execve()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.execvpe&quot;&gt; &lt;code&gt;execvpe()&lt;/code&gt; &lt;/a&gt;、（「E」でこれらのすべてのエンドがあることに注意してください）&lt;em&gt;のenv&lt;/em&gt;パラメータは、新しいプロセスの環境変数を定義するために使用されるマッピングをする必要があります（これらの現在のプロセスの環境の代わりに使用されます）;関数&lt;a href=&quot;#os.execl&quot;&gt; &lt;code&gt;execl()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execlp&quot;&gt; &lt;code&gt;execlp()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.execv&quot;&gt; &lt;code&gt;execv()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.execvp&quot;&gt; &lt;code&gt;execvp()&lt;/code&gt; は&lt;/a&gt;すべて、新しいプロセスに現在のプロセスの環境を継承させます。</target>
        </trans-unit>
        <trans-unit id="51157755c0e076cf72d6ba4f3983e0a2ccf80593" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#os.execve&quot;&gt;&lt;code&gt;execve()&lt;/code&gt;&lt;/a&gt; on some platforms, &lt;em&gt;path&lt;/em&gt; may also be specified as an open file descriptor. This functionality may not be supported on your platform; you can check whether or not it is available using &lt;a href=&quot;#os.supports_fd&quot;&gt;&lt;code&gt;os.supports_fd&lt;/code&gt;&lt;/a&gt;. If it is unavailable, using it will raise a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#os.execve&quot;&gt; &lt;code&gt;execve()&lt;/code&gt; &lt;/a&gt;いくつかのプラットフォームでは、&lt;em&gt;パスは&lt;/em&gt;、オープンファイル記述子として指定することができます。この機能はご使用のプラットフォームでサポートされていない場合があります。&lt;a href=&quot;#os.supports_fd&quot;&gt; &lt;code&gt;os.supports_fd&lt;/code&gt; を&lt;/a&gt;使用して、それが使用可能かどうかを確認できます。使用できない場合は、使用すると&lt;a href=&quot;exceptions#NotImplementedError&quot;&gt; &lt;code&gt;NotImplementedError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1d87b8bebbe6ef625c185669fd69bb1d18a46801" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#os.spawnle&quot;&gt;&lt;code&gt;spawnle()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnlpe&quot;&gt;&lt;code&gt;spawnlpe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnve&quot;&gt;&lt;code&gt;spawnve()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.spawnvpe&quot;&gt;&lt;code&gt;spawnvpe()&lt;/code&gt;&lt;/a&gt; (note that these all end in &amp;ldquo;e&amp;rdquo;), the &lt;em&gt;env&lt;/em&gt; parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process&amp;rsquo; environment); the functions &lt;a href=&quot;#os.spawnl&quot;&gt;&lt;code&gt;spawnl()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnlp&quot;&gt;&lt;code&gt;spawnlp()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.spawnv&quot;&gt;&lt;code&gt;spawnv()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.spawnvp&quot;&gt;&lt;code&gt;spawnvp()&lt;/code&gt;&lt;/a&gt; all cause the new process to inherit the environment of the current process. Note that keys and values in the &lt;em&gt;env&lt;/em&gt; dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of &lt;code&gt;127&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#os.spawnle&quot;&gt; &lt;code&gt;spawnle()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnlpe&quot;&gt; &lt;code&gt;spawnlpe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnve&quot;&gt; &lt;code&gt;spawnve()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.spawnvpe&quot;&gt; &lt;code&gt;spawnvpe()&lt;/code&gt; &lt;/a&gt;（ノート「E」でこれらのすべてのエンドという）、&lt;em&gt;のenv&lt;/em&gt;パラメータは、新しいプロセスの環境変数を定義するために使用されたマッピングでなければなりません（彼ら現在のプロセスの環境の代わりに使用されます）;関数&lt;a href=&quot;#os.spawnl&quot;&gt; &lt;code&gt;spawnl()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnlp&quot;&gt; &lt;code&gt;spawnlp()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.spawnv&quot;&gt; &lt;code&gt;spawnv()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.spawnvp&quot;&gt; &lt;code&gt;spawnvp()&lt;/code&gt; は&lt;/a&gt;すべて、新しいプロセスに現在のプロセスの環境を継承させます。&lt;em&gt;env&lt;/em&gt;辞書のキーと値は文字列でなければならないことに注意してください。キーまたは値が無効な場合、関数は失敗し、戻り値は &lt;code&gt;127&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="746248eefab63f81cdbec88cd9be8cc5d5b23761" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt; address family, a four-tuple &lt;code&gt;(host, port, flowinfo,
scopeid)&lt;/code&gt; is used, where &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scopeid&lt;/em&gt; represent the &lt;code&gt;sin6_flowinfo&lt;/code&gt; and &lt;code&gt;sin6_scope_id&lt;/code&gt; members in &lt;code&gt;struct sockaddr_in6&lt;/code&gt; in C. For &lt;a href=&quot;#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; module methods, &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scopeid&lt;/em&gt; can be omitted just for backward compatibility. Note, however, omission of &lt;em&gt;scopeid&lt;/em&gt; can cause problems in manipulating scoped IPv6 addresses.</source>
          <target state="translated">ため&lt;a href=&quot;#socket.AF_INET6&quot;&gt; &lt;code&gt;AF_INET6&lt;/code&gt; の&lt;/a&gt;アドレスファミリーは、4つのタプル &lt;code&gt;(host, port, flowinfo, scopeid)&lt;/code&gt; 使用され、ここで&lt;em&gt;flowinfo&lt;/em&gt;と&lt;em&gt;scopeid&lt;/em&gt;表し &lt;code&gt;sin6_flowinfo&lt;/code&gt; 及び &lt;code&gt;sin6_scope_id&lt;/code&gt; にメンバーを &lt;code&gt;struct sockaddr_in6&lt;/code&gt; ためにCで&lt;a href=&quot;#module-socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;モジュール方式、&lt;em&gt;flowinfo&lt;/em&gt;と&lt;em&gt;scopeidの&lt;/em&gt;ためだけ省略することができます下位互換性。ただし、&lt;em&gt;scopeID&lt;/em&gt;を省略すると、スコープIPv6アドレスの操作で問題が発生する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b9da99637d2b1c64e4ed1882a40516fbe0a31c50" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#sqlite3.Cursor.executemany&quot;&gt;&lt;code&gt;executemany()&lt;/code&gt;&lt;/a&gt; statements, the number of modifications are summed up into &lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt;&lt;code&gt;rowcount&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ため&lt;a href=&quot;#sqlite3.Cursor.executemany&quot;&gt; &lt;code&gt;executemany()&lt;/code&gt; &lt;/a&gt;ステートメント、変更の数はに合計される&lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt; &lt;code&gt;rowcount&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="044a69c03975985c860eaab5b4db37d8f0049429" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#tarfile.PAX_FORMAT&quot;&gt;&lt;code&gt;PAX_FORMAT&lt;/code&gt;&lt;/a&gt; archives (the default), &lt;em&gt;encoding&lt;/em&gt; is generally not needed because all the metadata is stored using &lt;em&gt;UTF-8&lt;/em&gt;. &lt;em&gt;encoding&lt;/em&gt; is only used in the rare cases when binary pax headers are decoded or when strings with surrogate characters are stored.</source>
          <target state="translated">&lt;a href=&quot;#tarfile.PAX_FORMAT&quot;&gt; &lt;code&gt;PAX_FORMAT&lt;/code&gt; の&lt;/a&gt;アーカイブ（デフォルト）、&lt;em&gt;エンコーディングは&lt;/em&gt;、すべてのメタデータを使用して格納されているため、一般的に必要とされていない&lt;em&gt;UTF-8を&lt;/em&gt;。&lt;em&gt;エンコーディング&lt;/em&gt;は、バイナリpaxヘッダーがデコードされるか、サロゲート文字を含む文字列が格納されるまれなケースでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="c741a7a338bdc3db896807bbb8de8af96ed97b6e" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instances, this will always be an instance of &lt;a href=&quot;#unittest.TestResult&quot;&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt;; subclasses of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; should override this as necessary.</source>
          <target state="translated">以下のため&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;インスタンス、これは常にのインスタンスになります&lt;a href=&quot;#unittest.TestResult&quot;&gt; &lt;code&gt;TestResult&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; の&lt;/a&gt;サブクラスは、必要に応じてこれをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="96b39f0e4ba7d9beef69677abc38d33b84b3af65" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#urllib.parse.urldefrag&quot;&gt;&lt;code&gt;urldefrag()&lt;/code&gt;&lt;/a&gt; results, only empty fragment identifiers will be removed. For &lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt;&lt;code&gt;urlsplit()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.parse.urlparse&quot;&gt;&lt;code&gt;urlparse()&lt;/code&gt;&lt;/a&gt; results, all noted changes will be made to the URL returned by this method.</source>
          <target state="translated">ため&lt;a href=&quot;#urllib.parse.urldefrag&quot;&gt; &lt;code&gt;urldefrag()&lt;/code&gt; &lt;/a&gt;の結果は、唯一の空のフラグメント識別子が削除されます。&lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt; &lt;code&gt;urlsplit()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#urllib.parse.urlparse&quot;&gt; &lt;code&gt;urlparse()&lt;/code&gt; &lt;/a&gt;の結果、すべての注意の変更は、このメソッドによって返されたURLに行われます。</target>
        </trans-unit>
        <trans-unit id="52c94526432badb979362f78eb056d0acef67e5b" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt;&lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt;&lt;/a&gt; objects, the realm &lt;code&gt;None&lt;/code&gt; will be searched if the given &lt;em&gt;realm&lt;/em&gt; has no matching user/password.</source>
          <target state="translated">&lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt; &lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt; &lt;/a&gt;オブジェクト、レルム &lt;code&gt;None&lt;/code&gt; 与えられた場合に検索されません&lt;em&gt;レルムが&lt;/em&gt;一致するユーザ名/パスワードを持っていません。</target>
        </trans-unit>
        <trans-unit id="7066446b04ee84f2ee63e0715496c2416b380408" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects, set the maintype to &lt;code&gt;message&lt;/code&gt;, and set the subtype to &lt;em&gt;subtype&lt;/em&gt; if it is specified or &lt;code&gt;rfc822&lt;/code&gt; if it is not. If &lt;em&gt;subtype&lt;/em&gt; is &lt;code&gt;partial&lt;/code&gt;, raise an error (&lt;code&gt;bytes&lt;/code&gt; objects must be used to construct &lt;code&gt;message/partial&lt;/code&gt; parts).</source>
          <target state="translated">ため&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; の&lt;/a&gt;にmaintypeを設定し、オブジェクト &lt;code&gt;message&lt;/code&gt; 、及びにサブタイプを設定する&lt;em&gt;サブタイプ&lt;/em&gt;が指定されている場合や &lt;code&gt;rfc822&lt;/code&gt; そうでない場合。&lt;em&gt;subtype&lt;/em&gt;が &lt;code&gt;partial&lt;/code&gt; の場合は、エラーを発生させます（ &lt;code&gt;message/partial&lt;/code&gt; を構築するには、 &lt;code&gt;bytes&lt;/code&gt; オブジェクトを使用する必要があります）。</target>
        </trans-unit>
        <trans-unit id="cd93e3e6c8c66a14f077add7bc3e55825954f4f2" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt;, per &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046&lt;/strong&gt;&lt;/a&gt;, raise an error if a &lt;em&gt;cte&lt;/em&gt; of &lt;code&gt;quoted-printable&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt; is requested for &lt;em&gt;subtype&lt;/em&gt;&lt;code&gt;rfc822&lt;/code&gt;, and for any &lt;em&gt;cte&lt;/em&gt; other than &lt;code&gt;7bit&lt;/code&gt; for &lt;em&gt;subtype&lt;/em&gt;&lt;code&gt;external-body&lt;/code&gt;. For &lt;code&gt;message/rfc822&lt;/code&gt;, use &lt;code&gt;8bit&lt;/code&gt; if &lt;em&gt;cte&lt;/em&gt; is not specified. For all other values of &lt;em&gt;subtype&lt;/em&gt;, use &lt;code&gt;7bit&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; の&lt;/a&gt;、あたりの&lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046&lt;/strong&gt;&lt;/a&gt;、場合エラーを発生させる&lt;em&gt;CTE&lt;/em&gt;の &lt;code&gt;quoted-printable&lt;/code&gt; 形式または &lt;code&gt;base64&lt;/code&gt; 要求され&lt;em&gt;、サブタイプ&lt;/em&gt; &lt;code&gt;rfc822&lt;/code&gt; 、および任意のための&lt;em&gt;CTE&lt;/em&gt;以外の &lt;code&gt;7bit&lt;/code&gt; 用&lt;em&gt;のサブタイプ&lt;/em&gt; &lt;code&gt;external-body&lt;/code&gt; 。以下のための &lt;code&gt;message/rfc822&lt;/code&gt; 、使用の &lt;code&gt;8bit&lt;/code&gt; あれば&lt;em&gt;、CTEが&lt;/em&gt;指定されていません。&lt;em&gt;サブタイプの&lt;/em&gt;他のすべての値には、7 &lt;code&gt;7bit&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="e398629d7cbca4cecc106052af8eb8c0b30b221f" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;bytes&lt;/code&gt;, use the specified &lt;em&gt;maintype&lt;/em&gt; and &lt;em&gt;subtype&lt;/em&gt;, or raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are not specified.</source>
          <target state="translated">以下のために &lt;code&gt;bytes&lt;/code&gt; 、指定された使用&lt;em&gt;maintype&lt;/em&gt;と&lt;em&gt;サブタイプを&lt;/em&gt;、または上げる&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;彼らが指定されていない場合。</target>
        </trans-unit>
        <trans-unit id="e1f46e2291fcafabd14f10bb29e1002c75bd19e3" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;str&lt;/code&gt; objects, if &lt;em&gt;cte&lt;/em&gt; is not set use heuristics to determine the most compact encoding.</source>
          <target state="translated">以下のための &lt;code&gt;str&lt;/code&gt; オブジェクト、場合&lt;em&gt;CTEが&lt;/em&gt;最もコンパクトな符号化を決定するために使用するヒューリスティックに設定されていません。</target>
        </trans-unit>
        <trans-unit id="18c573f79e1045ebe735b20b3288da0ea510cc71" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;str&lt;/code&gt;, set the MIME &lt;code&gt;maintype&lt;/code&gt; to &lt;code&gt;text&lt;/code&gt;, and set the subtype to &lt;em&gt;subtype&lt;/em&gt; if it is specified, or &lt;code&gt;plain&lt;/code&gt; if it is not.</source>
          <target state="translated">以下のために &lt;code&gt;str&lt;/code&gt; 、MIMEの設定 &lt;code&gt;maintype&lt;/code&gt; に &lt;code&gt;text&lt;/code&gt; 、とするサブタイプ設定&lt;em&gt;サブタイプを&lt;/em&gt;、それが指定されている場合、または &lt;code&gt;plain&lt;/code&gt; そうでない場合。</target>
        </trans-unit>
        <trans-unit id="d35d91a13b57ac41755a8fa618e750f4c5244931" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;stdin&lt;/em&gt;, line ending characters &lt;code&gt;'\n'&lt;/code&gt; in the input will be converted to the default line separator &lt;a href=&quot;os#os.linesep&quot;&gt;&lt;code&gt;os.linesep&lt;/code&gt;&lt;/a&gt;. For &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt;, all line endings in the output will be converted to &lt;code&gt;'\n'&lt;/code&gt;. For more information see the documentation of the &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; class when the &lt;em&gt;newline&lt;/em&gt; argument to its constructor is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;STDIN&lt;/em&gt;、文字を行末 &lt;code&gt;'\n'&lt;/code&gt; 入力では、デフォルトの行区切りに変換されます&lt;a href=&quot;os#os.linesep&quot;&gt; &lt;code&gt;os.linesep&lt;/code&gt; &lt;/a&gt;。以下のために&lt;em&gt;標準出力&lt;/em&gt;と&lt;em&gt;標準エラー&lt;/em&gt;出力のすべての行末はに変換されます &lt;code&gt;'\n'&lt;/code&gt; 。詳細については、&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt;の&lt;em&gt;改行&lt;/em&gt;引数が &lt;code&gt;None&lt;/code&gt; の場合のio.TextIOWrapperクラスのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="aefa0554df66d0c278cf83b6f6f16cd31c184d5a" translate="yes" xml:space="preserve">
          <source>For &lt;strong&gt;client use&lt;/strong&gt;, if you don&amp;rsquo;t have any special requirements for your security policy, it is highly recommended that you use the &lt;a href=&quot;#ssl.create_default_context&quot;&gt;&lt;code&gt;create_default_context()&lt;/code&gt;&lt;/a&gt; function to create your SSL context. It will load the system&amp;rsquo;s trusted CA certificates, enable certificate validation and hostname checking, and try to choose reasonably secure protocol and cipher settings.</source>
          <target state="translated">以下のために&lt;strong&gt;、クライアントの使用&lt;/strong&gt;あなたはセキュリティポリシーのための特別な要件を持っていない場合、非常にあなたが使用することをお勧めし&lt;a href=&quot;#ssl.create_default_context&quot;&gt; &lt;code&gt;create_default_context()&lt;/code&gt; &lt;/a&gt;あなたのSSLコンテキストを作成する機能を。システムの信頼されたCA証明書を読み込み、証明書の検証とホスト名のチェックを有効にし、適度に安全なプロトコルと暗号の設定を選択しようとします。</target>
        </trans-unit>
        <trans-unit id="8c2e9f6d535c3b5a4230508df199bceaf128b328" translate="yes" xml:space="preserve">
          <source>For FTP, file, and data URLs and requests explicitly handled by legacy &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt; classes, this function returns a &lt;code&gt;urllib.response.addinfourl&lt;/code&gt; object.</source>
          <target state="translated">FTP、ファイル、データのURLと、レガシー&lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt; &lt;code&gt;FancyURLopener&lt;/code&gt; &lt;/a&gt;クラスによって明示的に処理されたリクエストの場合、この関数は &lt;code&gt;urllib.response.addinfourl&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="c7aa24779d0a082d5416d92f04e7e88d8105145b" translate="yes" xml:space="preserve">
          <source>For HTTP and HTTPS URLs, this function returns a &lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt;&lt;code&gt;http.client.HTTPResponse&lt;/code&gt;&lt;/a&gt; object slightly modified. In addition to the three new methods above, the msg attribute contains the same information as the &lt;a href=&quot;http.client#http.client.HTTPResponse.reason&quot;&gt;&lt;code&gt;reason&lt;/code&gt;&lt;/a&gt; attribute &amp;mdash; the reason phrase returned by server &amp;mdash; instead of the response headers as it is specified in the documentation for &lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">HTTPおよびHTTPS URLの場合、この関数は少し変更された&lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt; &lt;code&gt;http.client.HTTPResponse&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。上記の3つの新しいメソッドに加えて、msg属性には、&lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt; &lt;code&gt;HTTPResponse&lt;/code&gt; &lt;/a&gt;のドキュメントで指定されている応答ヘッダーの代わりに、&lt;a href=&quot;http.client#http.client.HTTPResponse.reason&quot;&gt; &lt;code&gt;reason&lt;/code&gt; &lt;/a&gt;属性と同じ情報（サーバーから返されるreasonフレーズ）が含まれます。</target>
        </trans-unit>
        <trans-unit id="1bc75bf88ecf83b55f007797a7a4602b34f12e08" translate="yes" xml:space="preserve">
          <source>For IPv4 addresses, two special forms are accepted instead of a host address: &lt;code&gt;''&lt;/code&gt; represents &lt;code&gt;INADDR_ANY&lt;/code&gt;, which is used to bind to all interfaces, and the string &lt;code&gt;'&amp;lt;broadcast&amp;gt;'&lt;/code&gt; represents &lt;code&gt;INADDR_BROADCAST&lt;/code&gt;. This behavior is not compatible with IPv6, therefore, you may want to avoid these if you intend to support IPv6 with your Python programs.</source>
          <target state="translated">IPv4アドレスの場合、ホストアドレスの代わりに2つの特別な形式が受け入れられます。 &lt;code&gt;''&lt;/code&gt; はすべてのインターフェイスにバインドするために使用される &lt;code&gt;INADDR_ANY&lt;/code&gt; を表し、文字列 &lt;code&gt;'&amp;lt;broadcast&amp;gt;'&lt;/code&gt; は &lt;code&gt;INADDR_BROADCAST&lt;/code&gt; を表します。この動作はIPv6と互換性がありません。そのため、PythonプログラムでIPv6をサポートする場合は、これらの動作を回避することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8cd76cf073a90da47328543f5df73c1501f64885" translate="yes" xml:space="preserve">
          <source>For IPv6 addresses, &lt;code&gt;%scope&lt;/code&gt; is appended to the host part if &lt;em&gt;sockaddr&lt;/em&gt; contains meaningful &lt;em&gt;scopeid&lt;/em&gt;. Usually this happens for multicast addresses.</source>
          <target state="translated">IPv6アドレスの場合、&lt;em&gt;sockaddr&lt;/em&gt;に意味のある&lt;em&gt;scopeid&lt;/em&gt;が含まれていると、 &lt;code&gt;%scope&lt;/code&gt; がホスト部分に追加されます。通常、これはマルチキャストアドレスで発生します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6f84204498b40046cf3d5c8d670e1b6f64404196" translate="yes" xml:space="preserve">
          <source>For Python 2.x users: In the Python 2.x series, a variety of implicit conversions between 8-bit strings (the closest thing 2.x offers to a built-in binary data type) and Unicode strings were permitted. This was a backwards compatibility workaround to account for the fact that Python originally only supported 8-bit text, and Unicode text was a later addition. In Python 3.x, those implicit conversions are gone - conversions between 8-bit binary data and Unicode text must be explicit, and bytes and string objects will always compare unequal.</source>
          <target state="translated">Python 2.xユーザ向け。Python 2.xシリーズでは、8ビット文字列(2.xが提供する中で最もバイナリデータ型に近いもの)とUnicode文字列の間の様々な暗黙の変換が許可されていました。これは、Pythonが元々8ビットテキストしかサポートしておらず、Unicodeテキストは後から追加されたという事実を考慮した下位互換性の回避策でした。Python 3.xでは、これらの暗黙の変換はなくなりました-8ビットのバイナリデータとUnicodeテキストの間の変換は明示的でなければならず、バイトと文字列オブジェクトは常に不等号を比較します。</target>
        </trans-unit>
        <trans-unit id="07a7aa5b50fd70b489ae7356b6020b2730b425a6" translate="yes" xml:space="preserve">
          <source>For SyntaxError tracebacks, the normal &amp;lsquo;^&amp;rsquo; marking where the error was detected is replaced by coloring the text with an error highlight. When code run from a file causes other exceptions, one may right click on a traceback line to jump to the corresponding line in an IDLE editor. The file will be opened if necessary.</source>
          <target state="translated">SyntaxErrorトレースバックの場合、エラーが検出された通常の '^'マークは、テキストをエラーハイライトで色付けすることで置き換えられます。ファイルから実行されたコードが他の例外を引き起こす場合、トレースバック行を右クリックして、IDLEエディターの対応する行にジャンプできます。必要に応じてファイルが開かれます。</target>
        </trans-unit>
        <trans-unit id="b334d98feb81f2472f7fcf772413a175e76a7be9" translate="yes" xml:space="preserve">
          <source>For Unicode (str) patterns:</source>
          <target state="translated">Unicode (str)パターンの場合。</target>
        </trans-unit>
        <trans-unit id="cc5ee7549356196b75a26243082dbc16cceea4e1" translate="yes" xml:space="preserve">
          <source>For Unix systems, except on Linux and AIX, this is the lowercased OS name as returned by &lt;code&gt;uname -s&lt;/code&gt; with the first part of the version as returned by &lt;code&gt;uname -r&lt;/code&gt; appended, e.g. &lt;code&gt;'sunos5'&lt;/code&gt; or &lt;code&gt;'freebsd8'&lt;/code&gt;, &lt;em&gt;at the time when Python was built&lt;/em&gt;. Unless you want to test for a specific system version, it is therefore recommended to use the following idiom:</source>
          <target state="translated">で返されるのUnixシステムでは、LinuxおよびAIX上を除いて、これは小文字OS名で &lt;code&gt;uname -s&lt;/code&gt; で返されるバージョンの最初の部分で &lt;code&gt;uname -r&lt;/code&gt; 付加し、例えば &lt;code&gt;'sunos5'&lt;/code&gt; または &lt;code&gt;'freebsd8'&lt;/code&gt; 、&lt;em&gt;た時点で、 Pythonが構築されました&lt;/em&gt;。したがって、特定のシステムバージョンをテストする場合を除き、次のイディオムを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1b3f52ba18e9bb6bfd8b64d0e44b233de339b632" translate="yes" xml:space="preserve">
          <source>For XML with namespaces, use the usual qualified &lt;code&gt;{namespace}tag&lt;/code&gt; notation:</source>
          <target state="translated">名前空間のあるXMLの場合は、通常の修飾された &lt;code&gt;{namespace}tag&lt;/code&gt; 表記を使用します。</target>
        </trans-unit>
        <trans-unit id="386bae46469352b3dcedf77c3f3e3e04ed9b6a94" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instance &lt;em&gt;d&lt;/em&gt;, &lt;code&gt;str(d)&lt;/code&gt; is equivalent to &lt;code&gt;d.isoformat(' ')&lt;/code&gt;.</source>
          <target state="translated">ため&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;インスタンス&lt;em&gt;D&lt;/em&gt;、 &lt;code&gt;str(d)&lt;/code&gt; と等価である &lt;code&gt;d.isoformat(' ')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32f810518819bb3ad019a20e713df5e193f8f9b1" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;#logging.handlers.MemoryHandler&quot;&gt;&lt;code&gt;MemoryHandler&lt;/code&gt;&lt;/a&gt;, flushing means just sending the buffered records to the target, if there is one. The buffer is also cleared when this happens. Override if you want different behavior.</source>
          <target state="translated">&lt;a href=&quot;#logging.handlers.MemoryHandler&quot;&gt; &lt;code&gt;MemoryHandler&lt;/code&gt; の&lt;/a&gt;があれば、フラッシュする手段は、単に、ターゲットに緩衝レコードを送信します。これが発生すると、バッファもクリアされます。別の動作が必要な場合はオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1dff9931aa7d0ed5d45d70af53cd2aed0fd4dfb1" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;functions#complex&quot;&gt;&lt;code&gt;complex&lt;/code&gt;&lt;/a&gt; number &lt;code&gt;z&lt;/code&gt;, the hash values of the real and imaginary parts are combined by computing &lt;code&gt;hash(z.real) +
sys.hash_info.imag * hash(z.imag)&lt;/code&gt;, reduced modulo &lt;code&gt;2**sys.hash_info.width&lt;/code&gt; so that it lies in &lt;code&gt;range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width -
1))&lt;/code&gt;. Again, if the result is &lt;code&gt;-1&lt;/code&gt;, it&amp;rsquo;s replaced with &lt;code&gt;-2&lt;/code&gt;.</source>
          <target state="translated">以下のための&lt;a href=&quot;functions#complex&quot;&gt; &lt;code&gt;complex&lt;/code&gt; &lt;/a&gt;数 &lt;code&gt;z&lt;/code&gt; 、実部と虚部のハッシュ値を計算することによって合成される &lt;code&gt;hash(z.real) + sys.hash_info.imag * hash(z.imag)&lt;/code&gt; 低減モジュロ &lt;code&gt;2**sys.hash_info.width&lt;/code&gt; そうそれはであること &lt;code&gt;range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - 1))&lt;/code&gt; 。繰り返しますが、結果が &lt;code&gt;-1&lt;/code&gt; の場合、 &lt;code&gt;-2&lt;/code&gt; に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="115b45a6292b21abd1fa97a5ef3ba9bc8ab15b01" translate="yes" xml:space="preserve">
          <source>For a call object that represents multiple calls, &lt;a href=&quot;#unittest.mock.call.call_list&quot;&gt;&lt;code&gt;call_list()&lt;/code&gt;&lt;/a&gt; returns a list of all the intermediate calls as well as the final call.</source>
          <target state="translated">複数の呼び出しを表す呼び出しオブジェクトの場合、&lt;a href=&quot;#unittest.mock.call.call_list&quot;&gt; &lt;code&gt;call_list()&lt;/code&gt; &lt;/a&gt;は、すべての中間呼び出しと最終呼び出しのリストを返します。</target>
        </trans-unit>
        <trans-unit id="4712f20402a7ed1bfb0c0d4a6cfbb07523688d8c" translate="yes" xml:space="preserve">
          <source>For a complete explanation of a given option and its behavior, see the Tk man pages for the widget in question.</source>
          <target state="translated">与えられたオプションとその動作の完全な説明は、問題のウィジェットのTkマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="8e3266049648ef06aea068c545a02b2015f4133b" translate="yes" xml:space="preserve">
          <source>For a date &lt;em&gt;d&lt;/em&gt;, &lt;code&gt;str(d)&lt;/code&gt; is equivalent to &lt;code&gt;d.isoformat()&lt;/code&gt;.</source>
          <target state="translated">日付&lt;em&gt;dの&lt;/em&gt;場合、 &lt;code&gt;str(d)&lt;/code&gt; は &lt;code&gt;d.isoformat()&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="4f58bc806b154de327f318c6ac5ff546bf7bd2fe" translate="yes" xml:space="preserve">
          <source>For a demonstration of these concepts, look at this example ABC definition:</source>
          <target state="translated">これらの概念のデモンストレーションのために、この例のABCの定義を見てください。</target>
        </trans-unit>
        <trans-unit id="8f0dc2746ae7c369836b36523343036355346489" translate="yes" xml:space="preserve">
          <source>For a description of the flag and mode values, see the C run-time documentation; flag constants (like &lt;a href=&quot;#os.O_RDONLY&quot;&gt;&lt;code&gt;O_RDONLY&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.O_WRONLY&quot;&gt;&lt;code&gt;O_WRONLY&lt;/code&gt;&lt;/a&gt;) are defined in the &lt;a href=&quot;#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; module. In particular, on Windows adding &lt;a href=&quot;#os.O_BINARY&quot;&gt;&lt;code&gt;O_BINARY&lt;/code&gt;&lt;/a&gt; is needed to open files in binary mode.</source>
          <target state="translated">フラグとモード値の説明については、Cランタイムのドキュメントを参照してください。フラグ定数（&lt;a href=&quot;#os.O_RDONLY&quot;&gt; &lt;code&gt;O_RDONLY&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#os.O_WRONLY&quot;&gt; &lt;code&gt;O_WRONLY&lt;/code&gt; など&lt;/a&gt;）は&lt;a href=&quot;#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;モジュールで定義されています。特に、Windowsでは、バイナリモードでファイルを開くために&lt;a href=&quot;#os.O_BINARY&quot;&gt; &lt;code&gt;O_BINARY&lt;/code&gt; を&lt;/a&gt;追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="00fd7a5300104795ce153d199d268c66cb6aaf56" translate="yes" xml:space="preserve">
          <source>For a detailed example, see &lt;a href=&quot;#reducer-override&quot;&gt;Custom Reduction for Types, Functions, and Other Objects&lt;/a&gt;.</source>
          <target state="translated">詳細な例については、「&lt;a href=&quot;#reducer-override&quot;&gt;型、関数、およびその他のオブジェクトのカスタム縮約」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3db5c5c5b4bd614cce7d0ac3fee3e85c0cd62de9" translate="yes" xml:space="preserve">
          <source>For a full table of logging levels, see the &lt;a href=&quot;logging#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">ロギングレベルの完全な表については、&lt;a href=&quot;logging#module-logging&quot;&gt; &lt;code&gt;logging&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="65c24ec47684ed26cbc7c9636834c71915522b1e" translate="yes" xml:space="preserve">
          <source>For a fully standalone distribution, you can distribute the launcher with your application appended, bundled with the Python &amp;ldquo;embedded&amp;rdquo; distribution. This will run on any PC with the appropriate architecture (32 bit or 64 bit).</source>
          <target state="translated">完全にスタンドアロンのディストリビューションの場合、Pythonの「組み込み」ディストリビューションにバンドルされたアプリケーションが追加されたランチャーを配布できます。これは、適切なアーキテクチャ（32ビットまたは64ビット）を備えたすべてのPCで動作します。</target>
        </trans-unit>
        <trans-unit id="aa126f00739d88b9aa90e6f3e2a802cb5c763327" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;round&lt;/code&gt; delegates to &lt;code&gt;number.__round__&lt;/code&gt;.</source>
          <target state="translated">一般的なPythonオブジェクトのための &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;round&lt;/code&gt; に委譲 &lt;code&gt;number.__round__&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a28d39399a4b667034ddd93b313ca4ada834489a" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;complex(x)&lt;/code&gt; delegates to &lt;code&gt;x.__complex__()&lt;/code&gt;. If &lt;code&gt;__complex__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__float__&quot;&gt;&lt;code&gt;__float__()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一般的なPythonオブジェクト &lt;code&gt;x&lt;/code&gt; の場合、 &lt;code&gt;complex(x)&lt;/code&gt; は &lt;code&gt;x.__complex__()&lt;/code&gt; 委任します。場合 &lt;code&gt;__complex__()&lt;/code&gt; 定義されていない、それは背面に落ちる&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__float__&quot;&gt; &lt;code&gt;__float__()&lt;/code&gt; &lt;/a&gt;。場合 &lt;code&gt;__float__()&lt;/code&gt; 定義されていない、それは背面に落ちる&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fdf496741ae444039bcbd0cff2de28e69e24051c" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;float(x)&lt;/code&gt; delegates to &lt;code&gt;x.__float__()&lt;/code&gt;. If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一般的なPythonオブジェクト &lt;code&gt;x&lt;/code&gt; の場合、 &lt;code&gt;float(x)&lt;/code&gt; は &lt;code&gt;x.__float__()&lt;/code&gt; 委任します。場合 &lt;code&gt;__float__()&lt;/code&gt; 定義されていない、それは背面に落ちる&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b71ded6b644e163ed5a22c84a52332ed36162733" translate="yes" xml:space="preserve">
          <source>For a given seed, the &lt;a href=&quot;#random.choices&quot;&gt;&lt;code&gt;choices()&lt;/code&gt;&lt;/a&gt; function with equal weighting typically produces a different sequence than repeated calls to &lt;a href=&quot;#random.choice&quot;&gt;&lt;code&gt;choice()&lt;/code&gt;&lt;/a&gt;. The algorithm used by &lt;a href=&quot;#random.choices&quot;&gt;&lt;code&gt;choices()&lt;/code&gt;&lt;/a&gt; uses floating point arithmetic for internal consistency and speed. The algorithm used by &lt;a href=&quot;#random.choice&quot;&gt;&lt;code&gt;choice()&lt;/code&gt;&lt;/a&gt; defaults to integer arithmetic with repeated selections to avoid small biases from round-off error.</source>
          <target state="translated">指定されたシードに対して、同じ重み付けの&lt;a href=&quot;#random.choices&quot;&gt; &lt;code&gt;choices()&lt;/code&gt; &lt;/a&gt;関数は、通常、&lt;a href=&quot;#random.choice&quot;&gt; &lt;code&gt;choice()&lt;/code&gt; の&lt;/a&gt;繰り返し呼び出しとは異なるシーケンスを生成します。&lt;a href=&quot;#random.choices&quot;&gt; &lt;code&gt;choices()&lt;/code&gt; で&lt;/a&gt;使用されるアルゴリズムは、内部整合性と速度のために浮動小数点演算を使用します。&lt;a href=&quot;#random.choice&quot;&gt; &lt;code&gt;choice()&lt;/code&gt; &lt;/a&gt;が使用するアルゴリズムのデフォルトは、四捨五入エラーによる小さなバイアスを回避するために、選択が繰り返される整数演算です。</target>
        </trans-unit>
        <trans-unit id="05f7b184da73f1934bbc9129b218aedbb998c7d7" translate="yes" xml:space="preserve">
          <source>For a higher-level wrapper of &lt;a href=&quot;#os.sendfile&quot;&gt;&lt;code&gt;sendfile()&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt;&lt;code&gt;socket.socket.sendfile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#os.sendfile&quot;&gt; &lt;code&gt;sendfile()&lt;/code&gt; の&lt;/a&gt;上位レベルのラッパーについては、&lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt; &lt;code&gt;socket.socket.sendfile()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d0d6c126a57019cfaa59c16f6bbb2a1d78c4228c" translate="yes" xml:space="preserve">
          <source>For a list of all the command-line options:</source>
          <target state="translated">すべてのコマンドラインオプションのリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="87fd2a57950af3c9c3165d392564b7fc19902f06" translate="yes" xml:space="preserve">
          <source>For a list of handlers included as standard, see &lt;a href=&quot;logging.handlers#module-logging.handlers&quot;&gt;&lt;code&gt;logging.handlers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">標準で含まれているハンドラーのリストについては、&lt;a href=&quot;logging.handlers#module-logging.handlers&quot;&gt; &lt;code&gt;logging.handlers&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c623ac8e2dbdb44b77f887d6638659eaf4c8074e" translate="yes" xml:space="preserve">
          <source>For a list of the files in a ZIP archive, use the &lt;a href=&quot;#cmdoption-zipfile-l&quot;&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">ZIPアーカイブ内のファイルのリストを表示するには、&lt;a href=&quot;#cmdoption-zipfile-l&quot;&gt; &lt;code&gt;-l&lt;/code&gt; &lt;/a&gt;オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="ce33415db4c123c62bd6366476d7eb3fd7814ac8" translate="yes" xml:space="preserve">
          <source>For a list of the files in a tar archive, use the &lt;a href=&quot;#cmdoption-tarfile-l&quot;&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">tarアーカイブ内のファイルのリストを表示するには、&lt;a href=&quot;#cmdoption-tarfile-l&quot;&gt; &lt;code&gt;-l&lt;/code&gt; &lt;/a&gt;オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="4f31a2e7a2b7ef74a465b4d5322ee2c30d359d16" translate="yes" xml:space="preserve">
          <source>For a literal match, wrap the meta-characters in brackets. For example, &lt;code&gt;'[?]'&lt;/code&gt; matches the character &lt;code&gt;'?'&lt;/code&gt;.</source>
          <target state="translated">リテラル一致の場合、メタ文字を角括弧で囲みます。たとえば、 &lt;code&gt;'[?]'&lt;/code&gt; は文字 &lt;code&gt;'?'&lt;/code&gt; 一致します 。</target>
        </trans-unit>
        <trans-unit id="c21d07a4b7809c16f34f5ad89fa8da95d75a44e6" translate="yes" xml:space="preserve">
          <source>For a match &lt;em&gt;m&lt;/em&gt;, return the 2-tuple &lt;code&gt;(m.start(group), m.end(group))&lt;/code&gt;. Note that if &lt;em&gt;group&lt;/em&gt; did not contribute to the match, this is &lt;code&gt;(-1, -1)&lt;/code&gt;. &lt;em&gt;group&lt;/em&gt; defaults to zero, the entire match.</source>
          <target state="translated">一致&lt;em&gt;mの&lt;/em&gt;場合、2タプル &lt;code&gt;(m.start(group), m.end(group))&lt;/code&gt; ます。&lt;em&gt;グループ&lt;/em&gt;が一致に貢献しなかった場合、これは &lt;code&gt;(-1, -1)&lt;/code&gt; ことに注意してください。&lt;em&gt;groupの&lt;/em&gt;デフォルトはゼロで、全体が一致します。</target>
        </trans-unit>
        <trans-unit id="666246b0e205cb965fefc705620932f2b5673bdc" translate="yes" xml:space="preserve">
          <source>For a more convenient way of compressing a single chunk of data, see &lt;a href=&quot;#lzma.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データの単一のチャンクを圧縮するより便利な方法については、&lt;a href=&quot;#lzma.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="43d8561201f10a9aece268d98ecf18b08da3fa5d" translate="yes" xml:space="preserve">
          <source>For a more convenient way of decompressing an entire compressed stream at once, see &lt;a href=&quot;#lzma.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">圧縮されたストリーム全体を一度に解凍するより便利な方法については、&lt;a href=&quot;#lzma.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca9cb8f02ce650a16c34e931a114a4f3a4fa00e0" translate="yes" xml:space="preserve">
          <source>For a naive object, the &lt;code&gt;%z&lt;/code&gt; and &lt;code&gt;%Z&lt;/code&gt; format codes are replaced by empty strings.</source>
          <target state="translated">ナイーブオブジェクトの場合、 &lt;code&gt;%z&lt;/code&gt; および &lt;code&gt;%Z&lt;/code&gt; 形式コードは空の文字列に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="30621260251d8be3cc3042163396cd1230567f5d" translate="yes" xml:space="preserve">
          <source>For a negative &lt;em&gt;step&lt;/em&gt;, the contents of the range are still determined by the formula &lt;code&gt;r[i] = start + step*i&lt;/code&gt;, but the constraints are &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;r[i] &amp;gt; stop&lt;/code&gt;.</source>
          <target state="translated">負の&lt;em&gt;ステップの&lt;/em&gt;場合でも、範囲の内容は式 &lt;code&gt;r[i] = start + step*i&lt;/code&gt; によって決定されますが、制約は &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; および &lt;code&gt;r[i] &amp;gt; stop&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8b78e93c1f5bc6ada550d464265f45c45e160b33" translate="yes" xml:space="preserve">
          <source>For a nonzero number, return the adjusted exponent of its operand as a &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; instance. If the operand is a zero then &lt;code&gt;Decimal('-Infinity')&lt;/code&gt; is returned and the &lt;a href=&quot;#decimal.DivisionByZero&quot;&gt;&lt;code&gt;DivisionByZero&lt;/code&gt;&lt;/a&gt; flag is raised. If the operand is an infinity then &lt;code&gt;Decimal('Infinity')&lt;/code&gt; is returned.</source>
          <target state="translated">ゼロ以外の数値の場合、そのオペランドの調整された指数を&lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt;インスタンスとして返します。オペランドがゼロの場合、 &lt;code&gt;Decimal('-Infinity')&lt;/code&gt; が返され、&lt;a href=&quot;#decimal.DivisionByZero&quot;&gt; &lt;code&gt;DivisionByZero&lt;/code&gt; &lt;/a&gt;フラグが立てられます。オペランドが無限大の場合、 &lt;code&gt;Decimal('Infinity')&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8d50bedea444e5cc9430e30600bab5cd97f24f9c" translate="yes" xml:space="preserve">
          <source>For a package, the same effect can be achieved by including a &lt;code&gt;__main__.py&lt;/code&gt; module, the contents of which will be executed when the module is run with &lt;code&gt;-m&lt;/code&gt;.</source>
          <target state="translated">パッケージの場合、 &lt;code&gt;__main__.py&lt;/code&gt; モジュールを含めることで同じ効果を得ることができます。その内容は、モジュールが &lt;code&gt;-m&lt;/code&gt; で実行されたときに実行されます。</target>
        </trans-unit>
        <trans-unit id="8bcd8e2e8d9e09e1932e1712a87977c634a4d946" translate="yes" xml:space="preserve">
          <source>For a positive &lt;em&gt;step&lt;/em&gt;, the contents of a range &lt;code&gt;r&lt;/code&gt; are determined by the formula &lt;code&gt;r[i] = start + step*i&lt;/code&gt; where &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;r[i] &amp;lt; stop&lt;/code&gt;.</source>
          <target state="translated">正の&lt;em&gt;ステップの&lt;/em&gt;場合、範囲 &lt;code&gt;r&lt;/code&gt; の内容は、式 &lt;code&gt;r[i] = start + step*i&lt;/code&gt; によって決定されます。ここで、 &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; および &lt;code&gt;r[i] &amp;lt; stop&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bf3aa39c7cc3dda44d966630b1c09cfb3205e2ce" translate="yes" xml:space="preserve">
          <source>For a simple script, the specified code is simply executed in a fresh module namespace. For a valid sys.path entry (typically a zipfile or directory), the entry is first added to the beginning of &lt;code&gt;sys.path&lt;/code&gt;. The function then looks for and executes a &lt;a href=&quot;__main__#module-__main__&quot;&gt;&lt;code&gt;__main__&lt;/code&gt;&lt;/a&gt; module using the updated path. Note that there is no special protection against invoking an existing &lt;a href=&quot;__main__#module-__main__&quot;&gt;&lt;code&gt;__main__&lt;/code&gt;&lt;/a&gt; entry located elsewhere on &lt;code&gt;sys.path&lt;/code&gt; if there is no such module at the specified location.</source>
          <target state="translated">単純なスクリプトの場合、指定されたコードは単純に新しいモジュールの名前空間で実行されます。有効なsys.pathエントリ（通常はzipfileまたはディレクトリ）の場合、エントリは最初に &lt;code&gt;sys.path&lt;/code&gt; の先頭に追加されます。次に、関数は更新されたパスを使用して&lt;a href=&quot;__main__#module-__main__&quot;&gt; &lt;code&gt;__main__&lt;/code&gt; &lt;/a&gt;モジュールを探して実行します。指定された場所にそのようなモジュールがない場合、 &lt;code&gt;sys.path&lt;/code&gt; の他の場所にある既存の&lt;a href=&quot;__main__#module-__main__&quot;&gt; &lt;code&gt;__main__&lt;/code&gt; &lt;/a&gt;エントリーを呼び出すことに対する特別な保護はないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6baeee723ea1f301c86883b2af994d3639d55d54" translate="yes" xml:space="preserve">
          <source>For a time &lt;em&gt;t&lt;/em&gt;, &lt;code&gt;str(t)&lt;/code&gt; is equivalent to &lt;code&gt;t.isoformat()&lt;/code&gt;.</source>
          <target state="translated">時間&lt;em&gt;tの&lt;/em&gt;場合、 &lt;code&gt;str(t)&lt;/code&gt; は &lt;code&gt;t.isoformat()&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="1e518769f3b680be2e2b473fb9aff3c8ff0902ac" translate="yes" xml:space="preserve">
          <source>For a two dimensional point &lt;code&gt;(x, y)&lt;/code&gt;, this is equivalent to computing the hypotenuse of a right triangle using the Pythagorean theorem, &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt;.</source>
          <target state="translated">2次元の点 &lt;code&gt;(x, y)&lt;/code&gt; 場合、これはピタゴラスの定理 &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt; を使用して直角三角形の斜辺を計算することと同じです。</target>
        </trans-unit>
        <trans-unit id="df6335500739b50d131f2bfca3e93aa377a0b672" translate="yes" xml:space="preserve">
          <source>For a typing object of the form &lt;code&gt;X[Y, Z, ...]&lt;/code&gt; these functions return &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;(Y, Z, ...)&lt;/code&gt;. If &lt;code&gt;X&lt;/code&gt; is a generic alias for a builtin or &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; class, it gets normalized to the original class. For unsupported objects return &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; correspondingly. Examples:</source>
          <target state="translated">&lt;code&gt;X[Y, Z, ...]&lt;/code&gt; 形式のタイピングオブジェクトの場合、これらの関数は &lt;code&gt;X&lt;/code&gt; および &lt;code&gt;(Y, Z, ...)&lt;/code&gt; 返します。 &lt;code&gt;X&lt;/code&gt; が組み込みクラスまたは&lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;クラスの汎用エイリアスである場合、Xは元のクラスに正規化されます。サポートされていないオブジェクトの場合、対応して &lt;code&gt;None&lt;/code&gt; および &lt;code&gt;()&lt;/code&gt; を返します。例：</target>
        </trans-unit>
        <trans-unit id="1ee64b9ff441d0b6a5cef41090e49445fc0a5d11" translate="yes" xml:space="preserve">
          <source>For accessing the C Python api directly, a ready-to-use Python shared library object is available:</source>
          <target state="translated">CのPython apiに直接アクセスするために、すぐに使えるPython共有ライブラリオブジェクトが用意されています。</target>
        </trans-unit>
        <trans-unit id="0d7a1f81d73cb959d5e3b45930e44df60ee064e1" translate="yes" xml:space="preserve">
          <source>For additional numeric operations see the &lt;a href=&quot;math#module-math&quot;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cmath#module-cmath&quot;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">その他の数値演算については、&lt;a href=&quot;math#module-math&quot;&gt; &lt;code&gt;math&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;cmath#module-cmath&quot;&gt; &lt;code&gt;cmath&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ec4af7df109ce92f9ea30f1681eaa99c7fccae1" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be 6to4 addresses (starting with &lt;code&gt;2002::/16&lt;/code&gt;) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc3056.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 3056&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded IPv4 address. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc3056.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 3056&lt;/strong&gt;&lt;/a&gt;で定義されている6to4アドレス（ &lt;code&gt;2002::/16&lt;/code&gt; 始まる）のように見えるアドレスの場合、このプロパティは埋め込みIPv4アドレスを報告します。その他のアドレスの場合、このプロパティは &lt;code&gt;None&lt;/code&gt; になります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f900a30d92e1d3f296841c46ad25d2efeb2f007" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be IPv4 mapped addresses (starting with &lt;code&gt;::FFFF/96&lt;/code&gt;), this property will report the embedded IPv4 address. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">IPv4マッピングアドレス（ &lt;code&gt;::FFFF/96&lt;/code&gt; で始まる）のように見えるアドレスの場合、このプロパティは埋め込みIPv4アドレスを報告します。その他のアドレスの場合、このプロパティは &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a6a8569f2aecd3660a5a2055585eeda04864338d" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be Teredo addresses (starting with &lt;code&gt;2001::/32&lt;/code&gt;) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4380.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 4380&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded &lt;code&gt;(server, client)&lt;/code&gt; IP address pair. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc4380.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 4380&lt;/strong&gt;&lt;/a&gt;で定義されているTeredoアドレス（ &lt;code&gt;2001::/32&lt;/code&gt; 始まる）のように見えるアドレスの場合、このプロパティは埋め込み &lt;code&gt;(server, client)&lt;/code&gt; IPアドレスのペアを報告します。その他のアドレスの場合、このプロパティは &lt;code&gt;None&lt;/code&gt; になります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="caebc9e5ce8fd833a18841ee1d3aa8ceb3472904" translate="yes" xml:space="preserve">
          <source>For all of the &lt;a href=&quot;#opcode-SET_ADD&quot;&gt;&lt;code&gt;SET_ADD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#opcode-LIST_APPEND&quot;&gt;&lt;code&gt;LIST_APPEND&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#opcode-MAP_ADD&quot;&gt;&lt;code&gt;MAP_ADD&lt;/code&gt;&lt;/a&gt; instructions, while the added value or key/value pair is popped off, the container object remains on the stack so that it is available for further iterations of the loop.</source>
          <target state="translated">すべての&lt;a href=&quot;#opcode-SET_ADD&quot;&gt; &lt;code&gt;SET_ADD&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#opcode-LIST_APPEND&quot;&gt; &lt;code&gt;LIST_APPEND&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#opcode-MAP_ADD&quot;&gt; &lt;code&gt;MAP_ADD&lt;/code&gt; &lt;/a&gt;命令について、追加された値またはキー/値のペアがポップオフされている間、コンテナオブジェクトはスタックに残り、ループのさらなる反復に使用できます。</target>
        </trans-unit>
        <trans-unit id="17bb1e02a3a8c9756702891333f2fa0f4afa3d16" translate="yes" xml:space="preserve">
          <source>For all other comparisons (such as &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;), when a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object is compared to an object of a different type, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised:</source>
          <target state="translated">他のすべての比較（ &lt;code&gt;&amp;lt;&lt;/code&gt; や &lt;code&gt;&amp;gt;&lt;/code&gt; など）では、&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクトが別のタイプのオブジェクトと比較されると、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="b0f58f3dbfd004ab8257354adb01c260a0fe1222" translate="yes" xml:space="preserve">
          <source>For all other response codes, the method &lt;code&gt;http_error_default()&lt;/code&gt; is called which you can override in subclasses to handle the error appropriately.</source>
          <target state="translated">他のすべての応答コードでは、エラーを適切に処理するためにサブクラスでオーバーライドできるメソッド &lt;code&gt;http_error_default()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a0b17df6417af18c05b98134b149d8706f2d0a67" translate="yes" xml:space="preserve">
          <source>For almost all applications &lt;a href=&quot;os#os.urandom&quot;&gt;&lt;code&gt;os.urandom()&lt;/code&gt;&lt;/a&gt; is preferable.</source>
          <target state="translated">ほとんどすべてのアプリケーションでは、&lt;a href=&quot;os#os.urandom&quot;&gt; &lt;code&gt;os.urandom()&lt;/code&gt; &lt;/a&gt;が推奨されます。</target>
        </trans-unit>
        <trans-unit id="d1688519c95e30c3a0fdf1a44a0c337b8e5d237f" translate="yes" xml:space="preserve">
          <source>For an HTTP POST request method, &lt;em&gt;data&lt;/em&gt; should be a buffer in the standard &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; format. The &lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function takes a mapping or sequence of 2-tuples and returns an ASCII string in this format. It should be encoded to bytes before being used as the &lt;em&gt;data&lt;/em&gt; parameter.</source>
          <target state="translated">HTTP POSTリクエストメソッドの場合、&lt;em&gt;データ&lt;/em&gt;は標準の&lt;em&gt;application / x-www-form-urlencoded&lt;/em&gt;形式のバッファである必要があります。&lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt;関数は、2タプルのマッピングまたは配列を受け取り、この形式のASCII文字列を返します。&lt;em&gt;データ&lt;/em&gt;パラメータとして使用する前に、バイトにエンコードする必要があります。</target>
        </trans-unit>
        <trans-unit id="321d130154df7221dd2710f2b1317833db709e42" translate="yes" xml:space="preserve">
          <source>For an aware object:</source>
          <target state="translated">意識している対象に対して</target>
        </trans-unit>
        <trans-unit id="a17d72681c41e653cbffdc470a5ce38780a11b46" translate="yes" xml:space="preserve">
          <source>For an example of the usage of queues for interprocess communication see &lt;a href=&quot;#multiprocessing-examples&quot;&gt;Examples&lt;/a&gt;.</source>
          <target state="translated">プロセス間通信を参照するためのキューの使用の例については&lt;a href=&quot;#multiprocessing-examples&quot;&gt;例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0b68182f78976cfa947bfc7e82fd8771f13f5a0" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;a href=&quot;https://docs.python.org/3.8/howto/logging-cookbook.html#cookbook-rotator-namer&quot;&gt;Using a rotator and namer to customize log rotation processing&lt;/a&gt;.</source>
          <target state="translated">例については&lt;a href=&quot;https://docs.python.org/3.8/howto/logging-cookbook.html#cookbook-rotator-namer&quot;&gt;、ローテーターとネーマーを使用したログローテーション処理のカスタマイズを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="465235f896ee45a5706af0e616381fac9cdc77a3" translate="yes" xml:space="preserve">
          <source>For an explanation of why the &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; part is necessary, see &lt;a href=&quot;#multiprocessing-programming&quot;&gt;Programming guidelines&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 部分が必要な理由については、&lt;a href=&quot;#multiprocessing-programming&quot;&gt;プログラミングのガイドラインを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4d87221a5f8993883fc9acf9eba35bccbcbdbcf3" translate="yes" xml:space="preserve">
          <source>For an introduction to socket programming (in C), see the following papers:</source>
          <target state="translated">ソケットプログラミング(C言語)の入門書については、以下の論文を参照してください。</target>
        </trans-unit>
        <trans-unit id="4537c0799d30818387a1778e0690fa078b4b7e06" translate="yes" xml:space="preserve">
          <source>For any &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object &lt;em&gt;d&lt;/em&gt;, &lt;code&gt;d == datetime.combine(d.date(), d.time(), d.tzinfo)&lt;/code&gt;. If date is a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object, its time components and &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attributes are ignored.</source>
          <target state="translated">任意の&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクト&lt;em&gt;dの&lt;/em&gt;場合、 &lt;code&gt;d == datetime.combine(d.date(), d.time(), d.tzinfo)&lt;/code&gt; 。 dateが&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトの場合、その時間コンポーネントと&lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="b37d67d8e0a8eb8e77a72044792b8805d3ba57e4" translate="yes" xml:space="preserve">
          <source>For any of methods of this class, a &lt;em&gt;resource&lt;/em&gt; argument is expected to be a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt; which represents conceptually just a file name. This means that no subdirectory paths should be included in the &lt;em&gt;resource&lt;/em&gt; argument. This is because the location of the package the reader is for, acts as the &amp;ldquo;directory&amp;rdquo;. Hence the metaphor for directories and file names is packages and resources, respectively. This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).</source>
          <target state="translated">このクラスのどのメソッドでも、&lt;em&gt;リソース&lt;/em&gt;引数は、概念的にはファイル名のみを表す&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;パスのようなオブジェクトで&lt;/a&gt;あることが期待されます。つまり、&lt;em&gt;リソース&lt;/em&gt;引数にサブディレクトリパスを含めないでください。これは、リーダーが置かれているパッケージの場所が「ディレクトリ」として機能するためです。したがって、ディレクトリとファイル名のメタファーは、それぞれパッケージとリソースです。これは、このクラスのインスタンスが特定のパッケージに直接相関することが期待される理由でもあります（複数のパッケージまたはモジュールを表す可能性はありません）。</target>
        </trans-unit>
        <trans-unit id="a1460d090c4d9e2f5c93e1dbae17ba143ffe2103" translate="yes" xml:space="preserve">
          <source>For applications requiring aware objects, &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects have an optional time zone information attribute, &lt;code&gt;tzinfo&lt;/code&gt;, that can be set to an instance of a subclass of the abstract &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; class. These &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; objects capture information about the offset from UTC time, the time zone name, and whether daylight saving time is in effect.</source>
          <target state="translated">認識オブジェクトを必要とするアプリケーションの場合、&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトと&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトにはオプションのタイムゾーン情報属性 &lt;code&gt;tzinfo&lt;/code&gt; があり、これは抽象&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;クラスのサブクラスのインスタンスに設定できます。これらの&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;オブジェクトは、UTC時間からのオフセット、タイムゾーン名、および夏時間が有効かどうかに関する情報をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="7075e97b30b77fd32e75248fdd1404e81f84a7b9" translate="yes" xml:space="preserve">
          <source>For applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at &lt;a href=&quot;http://www.zlib.net&quot;&gt;http://www.zlib.net&lt;/a&gt;. There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a security vulnerability, so we recommend using 1.1.4 or later.</source>
          <target state="translated">データ圧縮を必要とするアプリケーションの場合、このモジュールの関数では、zlibライブラリを使用して圧縮と解凍を行うことができます。zlibライブラリには、&lt;a href=&quot;http://www.zlib.net&quot;&gt;http：&lt;/a&gt; //www.zlib.netに独自のホームページがあります。Pythonモジュールと1.1.3より前のzlibライブラリのバージョンの間には、既知の非互換性があります。1.1.3にはセキュリティ上の脆弱性があるため、1.1.4以降を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ff1b3bfa6942db35ceecc9803ef62bbeadf15677" translate="yes" xml:space="preserve">
          <source>For aware &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instances, the return value is computed as:</source>
          <target state="translated">認識される&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;インスタンスの場合、戻り値は次のように計算されます。</target>
        </trans-unit>
        <trans-unit id="69e80030e91a06f7b29e8bec9734b8962acbb95f" translate="yes" xml:space="preserve">
          <source>For backward compatibility, a &lt;a href=&quot;#os.stat_result&quot;&gt;&lt;code&gt;stat_result&lt;/code&gt;&lt;/a&gt; instance is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the &lt;code&gt;stat&lt;/code&gt; structure, in the order &lt;a href=&quot;#os.stat_result.st_mode&quot;&gt;&lt;code&gt;st_mode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_ino&quot;&gt;&lt;code&gt;st_ino&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_dev&quot;&gt;&lt;code&gt;st_dev&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_nlink&quot;&gt;&lt;code&gt;st_nlink&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_uid&quot;&gt;&lt;code&gt;st_uid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_gid&quot;&gt;&lt;code&gt;st_gid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_size&quot;&gt;&lt;code&gt;st_size&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;. More items may be added at the end by some implementations. For compatibility with older Python versions, accessing &lt;a href=&quot;#os.stat_result&quot;&gt;&lt;code&gt;stat_result&lt;/code&gt;&lt;/a&gt; as a tuple always returns integers.</source>
          <target state="translated">下位互換性のために、&lt;a href=&quot;#os.stat_result&quot;&gt; &lt;code&gt;stat_result&lt;/code&gt; にの&lt;/a&gt;インスタンスもの最も重要な（ポータブル）メンバー与え少なくとも10個の整数のタプルとしてアクセス可能である &lt;code&gt;stat&lt;/code&gt; 順序で、構造を&lt;a href=&quot;#os.stat_result.st_mode&quot;&gt; &lt;code&gt;st_mode&lt;/code&gt; の&lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_ino&quot;&gt; &lt;code&gt;st_ino&lt;/code&gt; の&lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_dev&quot;&gt; &lt;code&gt;st_dev&lt;/code&gt; フィールド&lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_nlink&quot;&gt; &lt;code&gt;st_nlink&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_uid&quot;&gt; &lt;code&gt;st_uid&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_gid&quot;&gt; &lt;code&gt;st_gid&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_size&quot;&gt; &lt;code&gt;st_size&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; を&lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.stat_result.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt;。実装によっては、最後にさらに項目が追加される場合があります。古いバージョンのPythonとの互換性のため、タプルとして&lt;a href=&quot;#os.stat_result&quot;&gt; &lt;code&gt;stat_result&lt;/code&gt; &lt;/a&gt;にアクセスすると常に整数が返されます。</target>
        </trans-unit>
        <trans-unit id="94838bf3b4aae58e91441f1c91f1f6be8d90eaa0" translate="yes" xml:space="preserve">
          <source>For backward compatibility, if a URL appears to point to a local file but the file can&amp;rsquo;t be opened, the URL is re-interpreted using the FTP protocol. This can sometimes cause confusing error messages.</source>
          <target state="translated">下位互換性のために、URLがローカルファイルを指しているように見えてもファイルを開くことができない場合、FTPプロトコルを使用してURLが再解釈されます。これにより、混乱を招くエラーメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="ca7f0d29acf08384be36faa207c5e9370c618e6b" translate="yes" xml:space="preserve">
          <source>For backward compatibility, the return value is also accessible as a tuple of 16 elements.</source>
          <target state="translated">後方互換性のために、戻り値は16個の要素のタプルとしてもアクセス可能です。</target>
        </trans-unit>
        <trans-unit id="1a38050f0e441305ea9ba925711dc3533b5ef150" translate="yes" xml:space="preserve">
          <source>For backward-compatibility reasons, the numeric arguments &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;2&lt;/code&gt; are permitted. They are interpreted as &lt;code&gt;'stdname'&lt;/code&gt;, &lt;code&gt;'calls'&lt;/code&gt;, &lt;code&gt;'time'&lt;/code&gt;, and &lt;code&gt;'cumulative'&lt;/code&gt; respectively. If this old style format (numeric) is used, only one sort key (the numeric key) will be used, and additional arguments will be silently ignored.</source>
          <target state="translated">下位互換性の理由から、数値引数 &lt;code&gt;-1&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 、及び &lt;code&gt;2&lt;/code&gt; を許可されています。これらはそれぞれ &lt;code&gt;'stdname'&lt;/code&gt; 、 &lt;code&gt;'calls'&lt;/code&gt; 、 &lt;code&gt;'time'&lt;/code&gt; 、および &lt;code&gt;'cumulative'&lt;/code&gt; として解釈されます。この古いスタイルのフォーマット（数値）が使用されている場合、1つのソートキー（数値キー）のみが使用され、追加の引数は暗黙的に無視されます。</target>
        </trans-unit>
        <trans-unit id="9e0c7787dd6bfccda7252bf5bc8abe1b1d20c558" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, this object also behaves like a five-tuple containing &lt;code&gt;user&lt;/code&gt;, &lt;a href=&quot;#os.system&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;children_user&lt;/code&gt;, &lt;code&gt;children_system&lt;/code&gt;, and &lt;code&gt;elapsed&lt;/code&gt; in that order.</source>
          <target state="translated">下位互換性のために、このオブジェクトは、 &lt;code&gt;user&lt;/code&gt; 、&lt;a href=&quot;#os.system&quot;&gt; &lt;code&gt;system&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;children_user&lt;/code&gt; 、 &lt;code&gt;children_system&lt;/code&gt; 、および &lt;code&gt;elapsed&lt;/code&gt; がこの順序で含まれる5つのタプルのようにも動作します。</target>
        </trans-unit>
        <trans-unit id="e6d662f7f0e619f7fd899a33a726a33b3d3aa333" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, this object is also iterable, behaving like a five-tuple containing &lt;code&gt;sysname&lt;/code&gt;, &lt;code&gt;nodename&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, and &lt;code&gt;machine&lt;/code&gt; in that order.</source>
          <target state="translated">下位互換性のために、このオブジェクトも反復可能であり、 &lt;code&gt;sysname&lt;/code&gt; 、 &lt;code&gt;nodename&lt;/code&gt; 、 &lt;code&gt;release&lt;/code&gt; 、 &lt;code&gt;version&lt;/code&gt; 、 &lt;code&gt;machine&lt;/code&gt; の順に含まれる5つのタプルのように動作します。</target>
        </trans-unit>
        <trans-unit id="c076823bfb846c5c4fa30837cd3e7ee0ac98b02c" translate="yes" xml:space="preserve">
          <source>For backwards compatibility. Calls the &lt;a href=&quot;#bdb.Bdb.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">後方互換性のため。&lt;a href=&quot;#bdb.Bdb.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="4d4b7c1d4649a90bdbfd3d547d5116f1c45cbb20" translate="yes" xml:space="preserve">
          <source>For best effect, &lt;code&gt;punctuation_chars&lt;/code&gt; should be set in conjunction with &lt;code&gt;posix=True&lt;/code&gt;. (Note that &lt;code&gt;posix=False&lt;/code&gt; is the default for &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">最良の効果を得るには、 &lt;code&gt;punctuation_chars&lt;/code&gt; を &lt;code&gt;posix=True&lt;/code&gt; と組み合わせて設定する必要があります。（ &lt;code&gt;posix=False&lt;/code&gt; が&lt;a href=&quot;#shlex.shlex&quot;&gt; &lt;code&gt;shlex&lt;/code&gt; &lt;/a&gt;のデフォルトであることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="09a68d06773736017bdeccd7f26b271b58e54a95" translate="yes" xml:space="preserve">
          <source>For best match with hardware and network realities, the value of &lt;em&gt;bufsize&lt;/em&gt; should be a relatively small power of 2, for example, 4096.</source>
          <target state="translated">ハードウェアとネットワークの現実との最適な一致を得るには、&lt;em&gt;bufsize&lt;/em&gt;の値を2の比較的小さいべき乗、たとえば4096にする必要があります。</target>
        </trans-unit>
        <trans-unit id="06927785954ec46b795462603c00974a450a299b" translate="yes" xml:space="preserve">
          <source>For better multithreading performance, the Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-gil&quot;&gt;GIL&lt;/a&gt; is released for data larger than 2047 bytes at object creation or on update.</source>
          <target state="translated">マルチスレッドのパフォーマンスを向上させるため、オブジェクトの作成時または更新時に、2047バイトを超えるデータ用にPython &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-gil&quot;&gt;GIL&lt;/a&gt;がリリースされています。</target>
        </trans-unit>
        <trans-unit id="da8cc65e7c52fba0eeb0fc711cfc59557d96bb18" translate="yes" xml:space="preserve">
          <source>For binary mode, this function is equivalent to the &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;BZ2File(filename, mode, compresslevel=compresslevel)&lt;/code&gt;. In this case, the &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;newline&lt;/em&gt; arguments must not be provided.</source>
          <target state="translated">バイナリモードの場合、この関数は&lt;a href=&quot;#bz2.BZ2File&quot;&gt; &lt;code&gt;BZ2File&lt;/code&gt; &lt;/a&gt;コンストラクターと同等です： &lt;code&gt;BZ2File(filename, mode, compresslevel=compresslevel)&lt;/code&gt; 。この場合、&lt;em&gt;エンコーディング&lt;/em&gt;、&lt;em&gt;エラー&lt;/em&gt;、および&lt;em&gt;改行&lt;/em&gt;引数を指定しないでください。</target>
        </trans-unit>
        <trans-unit id="016717dd0da4a662468b6aa33cb19230e658d853" translate="yes" xml:space="preserve">
          <source>For binary mode, this function is equivalent to the &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;GzipFile(filename, mode, compresslevel)&lt;/code&gt;. In this case, the &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;newline&lt;/em&gt; arguments must not be provided.</source>
          <target state="translated">バイナリモードの場合、この関数は&lt;a href=&quot;#gzip.GzipFile&quot;&gt; &lt;code&gt;GzipFile&lt;/code&gt; &lt;/a&gt;コンストラクタと同等です： &lt;code&gt;GzipFile(filename, mode, compresslevel)&lt;/code&gt; 。この場合、&lt;em&gt;エンコーディング&lt;/em&gt;、&lt;em&gt;エラー&lt;/em&gt;、および&lt;em&gt;改行&lt;/em&gt;引数を指定しないでください。</target>
        </trans-unit>
        <trans-unit id="7ae5d93f3434b21f6c2561db832de52706b4ce5b" translate="yes" xml:space="preserve">
          <source>For binary mode, this function is equivalent to the &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;LZMAFile(filename, mode, ...)&lt;/code&gt;. In this case, the &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;newline&lt;/em&gt; arguments must not be provided.</source>
          <target state="translated">バイナリモードでは、この機能は同等です&lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; の&lt;/a&gt;コンストラクタ： &lt;code&gt;LZMAFile(filename, mode, ...)&lt;/code&gt; 。この場合、&lt;em&gt;エンコーディング&lt;/em&gt;、&lt;em&gt;エラー&lt;/em&gt;、および&lt;em&gt;改行&lt;/em&gt;引数を指定しないでください。</target>
        </trans-unit>
        <trans-unit id="7469b7ce9347b3ee71427a4976aa9d8f229bd748" translate="yes" xml:space="preserve">
          <source>For both Unix and Windows, an object can appear in &lt;em&gt;object_list&lt;/em&gt; if it is</source>
          <target state="translated">UnixとWindowsの両方で、オブジェクトが&lt;em&gt;object_listに&lt;/em&gt;表示さ&lt;em&gt;れる&lt;/em&gt;場合は、</target>
        </trans-unit>
        <trans-unit id="d29f254f6cf3b4106b5e9b4c01fbfa8691dcc3d4" translate="yes" xml:space="preserve">
          <source>For both the Unix and Windows versions of the constructor, &lt;em&gt;access&lt;/em&gt; may be specified as an optional keyword parameter. &lt;em&gt;access&lt;/em&gt; accepts one of four values: &lt;code&gt;ACCESS_READ&lt;/code&gt;, &lt;code&gt;ACCESS_WRITE&lt;/code&gt;, or &lt;code&gt;ACCESS_COPY&lt;/code&gt; to specify read-only, write-through or copy-on-write memory respectively, or &lt;code&gt;ACCESS_DEFAULT&lt;/code&gt; to defer to &lt;em&gt;prot&lt;/em&gt;. &lt;em&gt;access&lt;/em&gt; can be used on both Unix and Windows. If &lt;em&gt;access&lt;/em&gt; is not specified, Windows mmap returns a write-through mapping. The initial memory values for all three access types are taken from the specified file. Assignment to an &lt;code&gt;ACCESS_READ&lt;/code&gt; memory map raises a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception. Assignment to an &lt;code&gt;ACCESS_WRITE&lt;/code&gt; memory map affects both memory and the underlying file. Assignment to an &lt;code&gt;ACCESS_COPY&lt;/code&gt; memory map affects memory but does not update the underlying file.</source>
          <target state="translated">コンストラクタのUnixバージョンとWindowsバージョンの両方で、オプションのキーワードパラメータとして&lt;em&gt;アクセス&lt;/em&gt;を指定できます。&lt;em&gt;アクセス&lt;/em&gt;：4つの値の1つを受け入れ &lt;code&gt;ACCESS_READ&lt;/code&gt; 、 &lt;code&gt;ACCESS_WRITE&lt;/code&gt; 、または &lt;code&gt;ACCESS_COPY&lt;/code&gt; を読み取り専用に、それぞれまたはコピー・オン・ライトメモリによる書き込み、または指定する &lt;code&gt;ACCESS_DEFAULT&lt;/code&gt; に延期する&lt;em&gt;のprotを&lt;/em&gt;。&lt;em&gt;アクセス&lt;/em&gt;は、UnixとWindowsの両方で使用できます。&lt;em&gt;アクセス&lt;/em&gt;が指定されていない場合、Windows mmapはライトスルーマッピングを返します。 3つのアクセスタイプすべての初期メモリ値は、指定されたファイルから取得されます。 &lt;code&gt;ACCESS_READ&lt;/code&gt; メモリマップへの割り当てにより&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生する&lt;/a&gt;例外。 &lt;code&gt;ACCESS_WRITE&lt;/code&gt; メモリマップへの割り当ては、メモリと基になるファイルの両方に影響します。 &lt;code&gt;ACCESS_COPY&lt;/code&gt; メモリマップへの割り当てはメモリに影響しますが、基になるファイルは更新されません。</target>
        </trans-unit>
        <trans-unit id="9b791b625837852700bed40630b7e80160696da6" translate="yes" xml:space="preserve">
          <source>For both use cases, a typical superclass call looks like this:</source>
          <target state="translated">どちらのユースケースでも、典型的なスーパークラスの呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1d3e6b2d087066e748150284d960b4cd1ce9e119" translate="yes" xml:space="preserve">
          <source>For cases where you want passive introspection, like documentation tools, this can be inconvenient. &lt;a href=&quot;#inspect.getattr_static&quot;&gt;&lt;code&gt;getattr_static()&lt;/code&gt;&lt;/a&gt; has the same signature as &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; but avoids executing code when it fetches attributes.</source>
          <target state="translated">ドキュメンテーションツールのようにパッシブイントロスペクションが必要な場合、これは不便です。&lt;a href=&quot;#inspect.getattr_static&quot;&gt; &lt;code&gt;getattr_static()&lt;/code&gt; &lt;/a&gt;と同じシグネチャを有している&lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt;それは属性をフェッチするときにコードを実行することが回避されます。</target>
        </trans-unit>
        <trans-unit id="8ddc27817b8adbae140b3bfe11bf584c974a746a" translate="yes" xml:space="preserve">
          <source>For client-side sockets, the context construction is lazy; if the underlying socket isn&amp;rsquo;t connected yet, the context construction will be performed after &lt;code&gt;connect()&lt;/code&gt; is called on the socket. For server-side sockets, if the socket has no remote peer, it is assumed to be a listening socket, and the server-side SSL wrapping is automatically performed on client connections accepted via the &lt;code&gt;accept()&lt;/code&gt; method. The method may raise &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">クライアント側のソケットの場合、コンテキストの構築は遅延します。基礎となるソケットがまだ接続されていない場合は、ソケットで &lt;code&gt;connect()&lt;/code&gt; が呼び出された後にコンテキスト構築が実行されます。サーバー側のソケットの場合、ソケットにリモートピアがない場合、ソケットはリスニングソケットであると見なされ、サーバー側のSSLラッピングは、 &lt;code&gt;accept()&lt;/code&gt; メソッドを介して受け入れられたクライアント接続で自動的に実行されます。このメソッドは&lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; を送出&lt;/a&gt;する場合があります。</target>
        </trans-unit>
        <trans-unit id="85865a7d79dbbf1d365d44b34b62ed727d6e7547" translate="yes" xml:space="preserve">
          <source>For code which doesn&amp;rsquo;t use type annotations, the appropriate type argument can be passed explicitly to the decorator itself:</source>
          <target state="translated">型注釈を使用しないコードの場合、適切な型引数をデコレーター自体に明示的に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6bfd91557db31a101da93b9f75a0634e810c53a1" translate="yes" xml:space="preserve">
          <source>For common and simple use cases, no other functionality is required. There are, however, some dataclass features that require additional per-field information. To satisfy this need for additional information, you can replace the default field value with a call to the provided &lt;a href=&quot;#dataclasses.field&quot;&gt;&lt;code&gt;field()&lt;/code&gt;&lt;/a&gt; function. For example:</source>
          <target state="translated">一般的で単純な使用例の場合、他の機能は必要ありません。ただし、追加のフィールドごとの情報を必要とするいくつかのデータクラス機能があります。この追加情報の必要性を満たすために、デフォルトのフィールド値を、提供された&lt;a href=&quot;#dataclasses.field&quot;&gt; &lt;code&gt;field()&lt;/code&gt; &lt;/a&gt;関数の呼び出しに置き換えることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="87705f106118f19bf390f2a77a7cb271a9b8c917" translate="yes" xml:space="preserve">
          <source>For comparison, &lt;code&gt;split('\n')&lt;/code&gt; gives:</source>
          <target state="translated">比較のために、 &lt;code&gt;split('\n')&lt;/code&gt; は以下を与えます：</target>
        </trans-unit>
        <trans-unit id="f0cff29498c4ef122a86c33568b064156568a59a" translate="yes" xml:space="preserve">
          <source>For compatibility with this older module, the function &lt;code&gt;Catalog()&lt;/code&gt; is an alias for the &lt;a href=&quot;#gettext.translation&quot;&gt;&lt;code&gt;translation()&lt;/code&gt;&lt;/a&gt; function described above.</source>
          <target state="translated">この古いモジュールとの互換性のために、 &lt;code&gt;Catalog()&lt;/code&gt; &lt;a href=&quot;#gettext.translation&quot;&gt; &lt;code&gt;translation()&lt;/code&gt; &lt;/a&gt;関数は、上記のtranslation（）関数のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="8dd5c7731e7c03d28553d024eb738419b5d7feec" translate="yes" xml:space="preserve">
          <source>For compound field names, these functions are only called for the first component of the field name; subsequent components are handled through normal attribute and indexing operations.</source>
          <target state="translated">複合フィールド名の場合、これらの関数はフィールド名の最初のコンポーネントに対してのみ呼び出され、それ以降のコンポーネントは通常の属性操作とインデックス操作によって処理されます。</target>
        </trans-unit>
        <trans-unit id="1c274cab06d9630687c3dabb1a223e791637c64c" translate="yes" xml:space="preserve">
          <source>For convenience, if the &lt;em&gt;value&lt;/em&gt; passed to &lt;a href=&quot;#email.utils.collapse_rfc2231_value&quot;&gt;&lt;code&gt;collapse_rfc2231_value()&lt;/code&gt;&lt;/a&gt; is not a tuple, it should be a string and it is returned unquoted.</source>
          <target state="translated">便宜上、&lt;a href=&quot;#email.utils.collapse_rfc2231_value&quot;&gt; &lt;code&gt;collapse_rfc2231_value()&lt;/code&gt; に&lt;/a&gt;渡された&lt;em&gt;値&lt;/em&gt;がタプルではない場合、それは文字列である必要があり、引用符なしで返されます。</target>
        </trans-unit>
        <trans-unit id="de926a3a0ae98ea1fe4e0f3b5685a3731bae1603" translate="yes" xml:space="preserve">
          <source>For convenience, you want the &lt;code&gt;_()&lt;/code&gt; function to be installed in Python&amp;rsquo;s builtins namespace, so it is easily accessible in all modules of your application.</source>
          <target state="translated">便宜上、 &lt;code&gt;_()&lt;/code&gt; 関数をPythonの組み込みネームスペースにインストールして、アプリケーションのすべてのモジュールで簡単にアクセスできるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="210ca2c9386211164bf808be67ab50aac45b5cfd" translate="yes" xml:space="preserve">
          <source>For deep customizations of import, you typically want to implement an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;. This means managing both the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; side of things. For finders there are two flavours to choose from depending on your needs: a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt; or a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-finder&quot;&gt;path entry finder&lt;/a&gt;. The former is what you would put on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; while the latter is what you create using a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-hook&quot;&gt;path entry hook&lt;/a&gt; on &lt;a href=&quot;sys#sys.path_hooks&quot;&gt;&lt;code&gt;sys.path_hooks&lt;/code&gt;&lt;/a&gt; which works with &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; entries to potentially create a finder. This example will show you how to register your own importers so that import will use them (for creating an importer for yourself, read the documentation for the appropriate classes defined within this package):</source>
          <target state="translated">インポートを詳細にカスタマイズするには、通常、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;インポーター&lt;/a&gt;を実装します。これは、物事の&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;ファインダー&lt;/a&gt;側と&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;ローダー&lt;/a&gt;側の両方を管理することを意味します。ファインダーには、ニーズに応じて2つのフレーバーから選択できます。&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;メタパスファインダー&lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-finder&quot;&gt;パスエントリーファインダー&lt;/a&gt;です。前者は&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; に&lt;/a&gt;配置するものであり、後者は&lt;a href=&quot;sys#sys.path_hooks&quot;&gt; &lt;code&gt;sys.path_hooks&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-hook&quot;&gt;パスエントリフック&lt;/a&gt;を使用して作成するもので、sys.pathで機能し&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;ファインダーを作成する可能性のあるエントリ。この例では、インポートがそれらを使用するように独自のインポーターを登録する方法を示します（自分用のインポーターを作成するには、このパッケージ内で定義されている適切なクラスのドキュメントを読んでください）。</target>
        </trans-unit>
        <trans-unit id="0c7f0d88ba41bf3eb9635ed30d7c7babf6caf663" translate="yes" xml:space="preserve">
          <source>For each argument, if the value is not found, return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">各引数について、値が見つからない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ac0a10e6ce55d9d18d13c0fc23d96ba811fa6c93" translate="yes" xml:space="preserve">
          <source>For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again.</source>
          <target state="translated">各文字については、正規形Cと正規形Dの2つの正規形があり、正規形D(NFD)は、正準分解とも呼ばれ、各文字をその分解された形に変換する。通常形態C(NFC)は、最初に正準分解を適用し、その後、再び結合前の文字を合成する。</target>
        </trans-unit>
        <trans-unit id="5fd45e0da93f8a3a502662f383317adb8f1a3088" translate="yes" xml:space="preserve">
          <source>For each item in the keyword argument dictionary &lt;em&gt;_params&lt;/em&gt;, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers). Normally, the parameter will be added as &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; unless the value is &lt;code&gt;None&lt;/code&gt;, in which case only the key will be added.</source>
          <target state="translated">キーワード引数ディクショナリ&lt;em&gt;_paramsの&lt;/em&gt;各アイテムについて、キーはパラメーター名として使用され、アンダースコアはダッシュに変換されます（ダッシュはPythonの識別子では無効であるため）。値が &lt;code&gt;None&lt;/code&gt; でない限り、通常、パラメーターは &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; として追加されます。この場合、キーのみが追加されます。</target>
        </trans-unit>
        <trans-unit id="d736bcd37b51fd426b74cb1fc89bc382bb0f2684" translate="yes" xml:space="preserve">
          <source>For each item in the keyword argument dictionary &lt;em&gt;_params&lt;/em&gt;, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers). Normally, the parameter will be added as &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; unless the value is &lt;code&gt;None&lt;/code&gt;, in which case only the key will be added. If the value contains non-ASCII characters, it can be specified as a three tuple in the format &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt;, where &lt;code&gt;CHARSET&lt;/code&gt; is a string naming the charset to be used to encode the value, &lt;code&gt;LANGUAGE&lt;/code&gt; can usually be set to &lt;code&gt;None&lt;/code&gt; or the empty string (see &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; for other possibilities), and &lt;code&gt;VALUE&lt;/code&gt; is the string value containing non-ASCII code points. If a three tuple is not passed and the value contains non-ASCII characters, it is automatically encoded in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; format using a &lt;code&gt;CHARSET&lt;/code&gt; of &lt;code&gt;utf-8&lt;/code&gt; and a &lt;code&gt;LANGUAGE&lt;/code&gt; of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">キーワード引数ディクショナリ&lt;em&gt;_paramsの&lt;/em&gt;各アイテムでは、キーがパラメーター名として使用され、アンダースコアがダッシュに変換されます（ダッシュはPythonの識別子では無効であるため）。通常、値が &lt;code&gt;None&lt;/code&gt; でない限り、パラメーターは &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; として追加されます。この場合、キーのみが追加されます。値は非ASCII文字が含まれている場合、それは形式三組として指定することができる &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt; 、 &lt;code&gt;CHARSET&lt;/code&gt; 値をエンコードするために使用される文字セットを命名する文字列であり、 &lt;code&gt;LANGUAGE&lt;/code&gt; は通常に設定することができます &lt;code&gt;None&lt;/code&gt; または空の文字列（他の可能性については&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;を参照）、および &lt;code&gt;VALUE&lt;/code&gt; &lt;strong&gt;&lt;/strong&gt;非ASCIIコードポイントを含む文字列値です。3組が渡され、値が非ASCII文字が含まれていない場合は、自動的にエンコードされている&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;使ってフォーマット &lt;code&gt;CHARSET&lt;/code&gt; の &lt;code&gt;utf-8&lt;/code&gt; と &lt;code&gt;LANGUAGE&lt;/code&gt; の &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="056b6b17fe21a908443c2aef27973cb1a8a225e3" translate="yes" xml:space="preserve">
          <source>For each of the two dimensions, the environment variable, &lt;code&gt;COLUMNS&lt;/code&gt; and &lt;code&gt;LINES&lt;/code&gt; respectively, is checked. If the variable is defined and the value is a positive integer, it is used.</source>
          <target state="translated">2つの次元のそれぞれについて、環境変数 &lt;code&gt;COLUMNS&lt;/code&gt; および &lt;code&gt;LINES&lt;/code&gt; がそれぞれチェックされます。変数が定義されていて、値が正の整数の場合、それが使用されます。</target>
        </trans-unit>
        <trans-unit id="322ab30d52718f1547b8e17f1897a238688c4ba6" translate="yes" xml:space="preserve">
          <source>For each signal there is a flag and a trap enabler. When a signal is encountered, its flag is set to one, then, if the trap enabler is set to one, an exception is raised. Flags are sticky, so the user needs to reset them before monitoring a calculation.</source>
          <target state="translated">各シグナルにはフラグとトラップ・イネーブラがあります。シグナルに遭遇した場合、フラグが1に設定され、トラップ・イネーブラが1に設定されている場合は例外が発生します。フラグは粘着性があるので、ユーザーは計算を監視する前にリセットする必要があります。</target>
        </trans-unit>
        <trans-unit id="06f9e39145b4348109479e7f9f896d505ac8e519" translate="yes" xml:space="preserve">
          <source>For encoding, &lt;em&gt;error_handler&lt;/em&gt; will be called with a &lt;a href=&quot;exceptions#UnicodeEncodeError&quot;&gt;&lt;code&gt;UnicodeEncodeError&lt;/code&gt;&lt;/a&gt; instance, which contains information about the location of the error. The error handler must either raise this or a different exception, or return a tuple with a replacement for the unencodable part of the input and a position where encoding should continue. The replacement may be either &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;. If the replacement is bytes, the encoder will simply copy them into the output buffer. If the replacement is a string, the encoder will encode the replacement. Encoding continues on original input at the specified position. Negative position values will be treated as being relative to the end of the input string. If the resulting position is out of bound an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">エンコーディングの場合、&lt;em&gt;error_handler&lt;/em&gt;は、エラーの場所に関する情報を含む&lt;a href=&quot;exceptions#UnicodeEncodeError&quot;&gt; &lt;code&gt;UnicodeEncodeError&lt;/code&gt; &lt;/a&gt;インスタンスで呼び出されます。エラーハンドラーは、この例外または別の例外を発生させるか、入力のエンコード不可の部分を置き換えたタプルと、エンコードを続行する位置を返す必要があります。置換は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; の&lt;/a&gt;いずれかです。置換がバイトの場合、エンコーダーはそれらを単に出力バッファーにコピーします。置換が文字列の場合、エンコーダは置換をエンコードします。エンコードは、元の入力の指定された位置で続行されます。負の位置の値は、入力文字列の末尾を基準にして扱われます。結果の位置が範囲外の場合、&lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="21600918467446226ee8a32f480178bbdbb3fcd4" translate="yes" xml:space="preserve">
          <source>For ensuring that the mock objects in your tests have the same api as the objects they are replacing, you can use &lt;a href=&quot;#auto-speccing&quot;&gt;auto-speccing&lt;/a&gt;. Auto-speccing can be done through the &lt;em&gt;autospec&lt;/em&gt; argument to patch, or the &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; function. Auto-speccing creates mock objects that have the same attributes and methods as the objects they are replacing, and any functions and methods (including constructors) have the same call signature as the real object.</source>
          <target state="translated">テスト内のモックオブジェクトが、置き換えるオブジェクトと同じAPIを持っていることを確認するには、&lt;a href=&quot;#auto-speccing&quot;&gt;自動指定&lt;/a&gt;を使用できます。自動指定は、patchへの&lt;em&gt;autospec&lt;/em&gt;引数、または&lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt; &lt;code&gt;create_autospec()&lt;/code&gt; &lt;/a&gt;関数を介して実行できます。自動指定では、置換するオブジェクトと同じ属性とメソッドを持つモックオブジェクトが作成され、関数とメソッド（コンストラクターを含む）は、実際のオブジェクトと同じ呼び出しシグネチャを持ちます。</target>
        </trans-unit>
        <trans-unit id="15fc0d7566d96f6001912c52d120cbb3c0026454" translate="yes" xml:space="preserve">
          <source>For equality comparison (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;), both the IP address and network must be the same for the objects to be equal. An interface will not compare equal to any address or network object.</source>
          <target state="translated">等価比較（ &lt;code&gt;==&lt;/code&gt; と &lt;code&gt;!=&lt;/code&gt; ）では、オブジェクトが等しいためには、IPアドレスとネットワークの両方が同じである必要があります。インターフェイスは、どのアドレスまたはネットワークオブジェクトとも同等ではありません。</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="9f92850155d4633eac2a36ebb33b8f03c14d5123" translate="yes" xml:space="preserve">
          <source>For example usage, see the implementation of the &lt;a href=&quot;test#module-test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; function invocation in the &lt;a href=&quot;#module-http.server&quot;&gt;&lt;code&gt;http.server&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">使用例については、&lt;a href=&quot;#module-http.server&quot;&gt; &lt;code&gt;http.server&lt;/code&gt; &lt;/a&gt;モジュールの&lt;a href=&quot;test#module-test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt;関数呼び出しの実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="6cd51af621b973c244416c286e704a84b26141f1" translate="yes" xml:space="preserve">
          <source>For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004:</source>
          <target state="translated">例えば、2004年は木曜日から始まるので、ISO2004年の第1週は2003年12月29日(月)から始まり、2004年1月4日(日)までとなります。</target>
        </trans-unit>
        <trans-unit id="399622d81e44a5a0690710d1c52927972596121e" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;-k foo&lt;/code&gt; matches &lt;code&gt;foo_tests.SomeTest.test_something&lt;/code&gt;, &lt;code&gt;bar_tests.SomeTest.test_foo&lt;/code&gt;, but not &lt;code&gt;bar_tests.FooTest.test_something&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;-k foo&lt;/code&gt; は &lt;code&gt;foo_tests.SomeTest.test_something&lt;/code&gt; 、 &lt;code&gt;bar_tests.SomeTest.test_foo&lt;/code&gt; と一致しますが、bar_tests.FooTest.test_somethingとは一致しませ &lt;code&gt;bar_tests.FooTest.test_something&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d14f109212981d9e9018a7e899a21c38af527e7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;cmpfiles('a', 'b', ['c', 'd/e'])&lt;/code&gt; will compare &lt;code&gt;a/c&lt;/code&gt; with &lt;code&gt;b/c&lt;/code&gt; and &lt;code&gt;a/d/e&lt;/code&gt; with &lt;code&gt;b/d/e&lt;/code&gt;. &lt;code&gt;'c'&lt;/code&gt; and &lt;code&gt;'d/e'&lt;/code&gt; will each be in one of the three returned lists.</source>
          <target state="translated">たとえば、 &lt;code&gt;cmpfiles('a', 'b', ['c', 'd/e'])&lt;/code&gt; は、 &lt;code&gt;a/c&lt;/code&gt; を &lt;code&gt;b/c&lt;/code&gt; と比較し、a &lt;code&gt;a/d/e&lt;/code&gt; を &lt;code&gt;b/d/e&lt;/code&gt; と比較します。 &lt;code&gt;'c'&lt;/code&gt; と &lt;code&gt;'d/e'&lt;/code&gt; は、返された3つのリストのいずれかにあります。</target>
        </trans-unit>
        <trans-unit id="a95470c1be0b3663fdee2e3d3b9777cc1e0d9fa2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;signal.pthread_sigmask(signal.SIG_BLOCK, [])&lt;/code&gt; reads the signal mask of the calling thread.</source>
          <target state="translated">たとえば、 &lt;code&gt;signal.pthread_sigmask(signal.SIG_BLOCK, [])&lt;/code&gt; は、呼び出しスレッドのシグナルマスクを読み取ります。</target>
        </trans-unit>
        <trans-unit id="f0f5080e6265a4c4411bd9b24c300325fec45e78" translate="yes" xml:space="preserve">
          <source>For example, CD quality audio has a sample size of two bytes (16 bits), uses two channels (stereo) and has a frame rate of 44,100 frames/second. This gives a frame size of 4 bytes (2*2), and a second&amp;rsquo;s worth occupies 2*2*44100 bytes (176,400 bytes).</source>
          <target state="translated">たとえば、CD品質のオーディオのサンプルサイズは2バイト（16ビット）、2つのチャネル（ステレオ）を使用し、フレームレートは44,100フレーム/秒です。これにより、フレームサイズは4バイト（2 * 2）になり、1秒のサイズは2 * 2 * 44100バイト（176,400バイト）になります。</target>
        </trans-unit>
        <trans-unit id="5704afb176cb5333d5bd0ec1e89e920326a56e42" translate="yes" xml:space="preserve">
          <source>For example, a group of files can be opened as an &amp;ldquo;all or nothing&amp;rdquo; operation as follows:</source>
          <target state="translated">たとえば、ファイルのグループは、次のように「オールオアナッシング」操作として開くことができます。</target>
        </trans-unit>
        <trans-unit id="68e2f1b9586e1e059827e751c317d7ee5e2879b3" translate="yes" xml:space="preserve">
          <source>For example, a set of files may easily be handled in a single with statement as follows:</source>
          <target state="translated">例えば、ファイルのセットは、以下のように単一のwith文で簡単に扱うことができます。</target>
        </trans-unit>
        <trans-unit id="70d481802ecd969c892c69fa7f05b8bba9e4b621" translate="yes" xml:space="preserve">
          <source>For example, a subclass of &lt;code&gt;DictConfigurator&lt;/code&gt; could call &lt;code&gt;DictConfigurator.__init__()&lt;/code&gt; in its own &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt;, then set up custom prefixes which would be usable in the subsequent &lt;code&gt;configure()&lt;/code&gt; call. &lt;code&gt;dictConfigClass&lt;/code&gt; would be bound to this new subclass, and then &lt;a href=&quot;#logging.config.dictConfig&quot;&gt;&lt;code&gt;dictConfig()&lt;/code&gt;&lt;/a&gt; could be called exactly as in the default, uncustomized state.</source>
          <target state="translated">例えば、サブクラスの &lt;code&gt;DictConfigurator&lt;/code&gt; を呼び出すことができます &lt;code&gt;DictConfigurator.__init__()&lt;/code&gt; 、自身の中に&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;、その後のに使えるだろうカスタムプレフィックス設定 &lt;code&gt;configure()&lt;/code&gt; の呼び出しを。 &lt;code&gt;dictConfigClass&lt;/code&gt; はこの新しいサブクラスにバインドされ、次に&lt;a href=&quot;#logging.config.dictConfig&quot;&gt; &lt;code&gt;dictConfig()&lt;/code&gt; &lt;/a&gt;がデフォルトのカスタマイズされていない状態とまったく同じように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f511873d3631a9f41e0087f05beaf56c5c7a1720" translate="yes" xml:space="preserve">
          <source>For example, consider a directory containing the following files: &lt;code&gt;1.gif&lt;/code&gt;, &lt;code&gt;2.txt&lt;/code&gt;, &lt;code&gt;card.gif&lt;/code&gt; and a subdirectory &lt;code&gt;sub&lt;/code&gt; which contains only the file &lt;code&gt;3.txt&lt;/code&gt;. &lt;a href=&quot;#module-glob&quot;&gt;&lt;code&gt;glob()&lt;/code&gt;&lt;/a&gt; will produce the following results. Notice how any leading components of the path are preserved.</source>
          <target state="translated">たとえば、 &lt;code&gt;1.gif&lt;/code&gt; 、 &lt;code&gt;2.txt&lt;/code&gt; 、 &lt;code&gt;card.gif&lt;/code&gt; 、およびファイル &lt;code&gt;3.txt&lt;/code&gt; のみを含むサブディレクトリ &lt;code&gt;sub&lt;/code&gt; を含むディレクトリを考えます。&lt;a href=&quot;#module-glob&quot;&gt; &lt;code&gt;glob()&lt;/code&gt; &lt;/a&gt;は次の結果を生成します。パスの先頭のコンポーネントがどのように保持されるかに注意してください。</target>
        </trans-unit>
        <trans-unit id="a8116b8e84beaa829f95a74354e47e686f4f65c2" translate="yes" xml:space="preserve">
          <source>For example, given &lt;a href=&quot;https://blog.prepscholar.com/sat-standard-deviation&quot;&gt;historical data for SAT exams&lt;/a&gt; showing that scores are normally distributed with a mean of 1060 and a standard deviation of 192, determine the percentage of students with test scores between 1100 and 1200, after rounding to the nearest whole number:</source>
          <target state="translated">例えば、与えられた&lt;a href=&quot;https://blog.prepscholar.com/sat-standard-deviation&quot;&gt;SAT試験の履歴データ&lt;/a&gt;スコアが正常1060の平均と192の標準偏差で分布していることを示し、1100,1200の間の試験スコアを持つ学生の割合を決定し、最も近い整数に丸めた後：</target>
        </trans-unit>
        <trans-unit id="f059697aa8708c124c5ca5ed69598445d650d373" translate="yes" xml:space="preserve">
          <source>For example, here is how you would use the &lt;a href=&quot;smtplib#smtplib.SMTP&quot;&gt;&lt;code&gt;smtplib.SMTP&lt;/code&gt;&lt;/a&gt; class to create a trusted, secure connection to a SMTP server:</source>
          <target state="translated">たとえば、&lt;a href=&quot;smtplib#smtplib.SMTP&quot;&gt; &lt;code&gt;smtplib.SMTP&lt;/code&gt; &lt;/a&gt;クラスを使用して、SMTPサーバーへの信頼できる安全な接続を作成する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="4cd64048d86f14def679c676cd5c8b195e60a3d7" translate="yes" xml:space="preserve">
          <source>For example, if &lt;a href=&quot;stdtypes#class.__mro__&quot;&gt;&lt;code&gt;__mro__&lt;/code&gt;&lt;/a&gt; of &lt;em&gt;object-or-type&lt;/em&gt; is &lt;code&gt;D -&amp;gt; B -&amp;gt; C -&amp;gt; A -&amp;gt; object&lt;/code&gt; and the value of &lt;em&gt;type&lt;/em&gt; is &lt;code&gt;B&lt;/code&gt;, then &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; searches &lt;code&gt;C -&amp;gt; A -&amp;gt; object&lt;/code&gt;.</source>
          <target state="translated">たとえば、&lt;em&gt;object-or-typeの&lt;/em&gt;&lt;a href=&quot;stdtypes#class.__mro__&quot;&gt; &lt;code&gt;__mro__&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;D -&amp;gt; B -&amp;gt; C -&amp;gt; A -&amp;gt; object&lt;/code&gt; あり、&lt;em&gt;type&lt;/em&gt;の値が &lt;code&gt;B&lt;/code&gt; である場合、&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;C -&amp;gt; A -&amp;gt; object&lt;/code&gt; 検索します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc7ebb76fef1bf5301bb1689de9385336d50d062" translate="yes" xml:space="preserve">
          <source>For example, if &lt;em&gt;namespace_separator&lt;/em&gt; is set to a space character (&lt;code&gt;' '&lt;/code&gt;) and the following document is parsed:</source>
          <target state="translated">たとえば、&lt;em&gt;namespace_separator&lt;/em&gt;が空白文字（ &lt;code&gt;' '&lt;/code&gt; ）に設定されており、次のドキュメントが解析される場合：</target>
        </trans-unit>
        <trans-unit id="61bccf6891322558e7f0a44662ff24780b7e5f8f" translate="yes" xml:space="preserve">
          <source>For example, if you have a module &lt;code&gt;SampleTests&lt;/code&gt; containing a &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;-derived class &lt;code&gt;SampleTestCase&lt;/code&gt; with three test methods (&lt;code&gt;test_one()&lt;/code&gt;, &lt;code&gt;test_two()&lt;/code&gt;, and &lt;code&gt;test_three()&lt;/code&gt;), the specifier &lt;code&gt;'SampleTests.SampleTestCase'&lt;/code&gt; would cause this method to return a suite which will run all three test methods. Using the specifier &lt;code&gt;'SampleTests.SampleTestCase.test_two'&lt;/code&gt; would cause it to return a test suite which will run only the &lt;code&gt;test_two()&lt;/code&gt; test method. The specifier can refer to modules and packages which have not been imported; they will be imported as a side-effect.</source>
          <target state="translated">たとえば、3つのテストメソッド（ &lt;code&gt;test_one()&lt;/code&gt; 、 &lt;code&gt;test_two()&lt;/code&gt; 、および &lt;code&gt;test_three()&lt;/code&gt; ）を持つ&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; &lt;code&gt;SampleTestCase&lt;/code&gt; クラスSampleTestCaseを含む &lt;code&gt;SampleTests&lt;/code&gt; がある場合、指定子 &lt;code&gt;'SampleTests.SampleTestCase'&lt;/code&gt; により、このメソッドはスイートを返します。 3つのテストメソッドすべてが実行されます。指定子 &lt;code&gt;'SampleTests.SampleTestCase.test_two'&lt;/code&gt; を使用すると、 &lt;code&gt;test_two()&lt;/code&gt; テストメソッドのみを実行するテストスイートが返されます。指定子は、インポートされていないモジュールとパッケージを参照できます。それらは副作用としてインポートされます。</target>
        </trans-unit>
        <trans-unit id="d96a9ad58f887553f3d83a9670b407c13d2d7fee" translate="yes" xml:space="preserve">
          <source>For example, if you have a number of large binary image objects, you may wish to associate a name with each. If you used a Python dictionary to map names to images, or images to names, the image objects would remain alive just because they appeared as values or keys in the dictionaries. The &lt;a href=&quot;#weakref.WeakKeyDictionary&quot;&gt;&lt;code&gt;WeakKeyDictionary&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt;&lt;code&gt;WeakValueDictionary&lt;/code&gt;&lt;/a&gt; classes supplied by the &lt;a href=&quot;#module-weakref&quot;&gt;&lt;code&gt;weakref&lt;/code&gt;&lt;/a&gt; module are an alternative, using weak references to construct mappings that don&amp;rsquo;t keep objects alive solely because they appear in the mapping objects. If, for example, an image object is a value in a &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt;&lt;code&gt;WeakValueDictionary&lt;/code&gt;&lt;/a&gt;, then when the last remaining references to that image object are the weak references held by weak mappings, garbage collection can reclaim the object, and its corresponding entries in weak mappings are simply deleted.</source>
          <target state="translated">たとえば、大きなバイナリイメージオブジェクトが多数ある場合は、それぞれに名前を関連付けることができます。 Pythonディクショナリを使用して名前をイメージに、またはイメージを名前にマッピングした場合、イメージオブジェクトは、ディクショナリの値またはキーとして表示されただけで存続します。&lt;a href=&quot;#weakref.WeakKeyDictionary&quot;&gt; &lt;code&gt;WeakKeyDictionary&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt; &lt;code&gt;WeakValueDictionary&lt;/code&gt; &lt;/a&gt;から供給されるクラス&lt;a href=&quot;#module-weakref&quot;&gt; &lt;code&gt;weakref&lt;/code&gt; &lt;/a&gt;モジュールは、生きているだけで、彼らがマッピングオブジェクトに表示されるので、オブジェクトを保持していないマッピングを構築するために弱参照を使用して、代替されています。たとえば、画像オブジェクトが&lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt; &lt;code&gt;WeakValueDictionary&lt;/code&gt; の&lt;/a&gt;値である場合次に、そのイメージオブジェクトへの最後の残りの参照が弱いマッピングによって保持されている弱い参照である場合、ガベージコレクションはオブジェクトを再利用でき、弱いマッピングの対応するエントリは単に削除されます。</target>
        </trans-unit>
        <trans-unit id="f8ddfc4247d70e8198d393848e8a880bb9e365df" translate="yes" xml:space="preserve">
          <source>For example, if you want to pass several items to the constructor, but only want one of them to be the value:</source>
          <target state="translated">たとえば、複数の項目をコンストラクタに渡したいが、そのうちの 1 つだけを値にしたい場合などです。</target>
        </trans-unit>
        <trans-unit id="f2d533d473fe1f989a25757c7b31086d2cd9c1ac" translate="yes" xml:space="preserve">
          <source>For example, it is sometimes useful to wrap functions or groups of statements with a logger that can track the time of entry and time of exit. Rather than writing both a function decorator and a context manager for the task, inheriting from &lt;a href=&quot;#contextlib.ContextDecorator&quot;&gt;&lt;code&gt;ContextDecorator&lt;/code&gt;&lt;/a&gt; provides both capabilities in a single definition:</source>
          <target state="translated">たとえば、関数またはステートメントのグループを、開始時刻と終了時刻を追跡できるロガーでラップすると便利な場合があります。関数のデコレーターとタスクのコンテキストマネージャーの両方を記述するのではなく、&lt;a href=&quot;#contextlib.ContextDecorator&quot;&gt; &lt;code&gt;ContextDecorator&lt;/code&gt; &lt;/a&gt;から継承すると、1つの定義で両方の機能が提供されます。</target>
        </trans-unit>
        <trans-unit id="66a503d37db3c1946c897c9a00ca7f6c3c4c2802" translate="yes" xml:space="preserve">
          <source>For example, restart the Shell and enter &lt;code&gt;itertools.count(&lt;/code&gt;. A calltip appears because Idle imports itertools into the user process for its own use. (This could change.) Enter &lt;code&gt;turtle.write(&lt;/code&gt; and nothing appears. Idle does not import turtle. The menu or shortcut do nothing either. Enter &lt;code&gt;import turtle&lt;/code&gt; and then &lt;code&gt;turtle.write(&lt;/code&gt; will work.</source>
          <target state="translated">たとえば、シェルを再起動して &lt;code&gt;itertools.count(&lt;/code&gt; と入力します。Idleはitertoolsを独自に使用するためにユーザープロセスにインポートするため、コールチップが表示されます（これは変更される可能性があります。） &lt;code&gt;turtle.write(&lt;/code&gt; と入力すると何も表示されません。メニューまたはいずれか何もしないショートカット。入力 &lt;code&gt;import turtle&lt;/code&gt; してから &lt;code&gt;turtle.write(&lt;/code&gt; 動作します。</target>
        </trans-unit>
        <trans-unit id="a2f3276b5fec797554722a3f1fcfe9772ea5689b" translate="yes" xml:space="preserve">
          <source>For example, suppose &lt;code&gt;sys.prefix&lt;/code&gt; and &lt;code&gt;sys.exec_prefix&lt;/code&gt; are set to &lt;code&gt;/usr/local&lt;/code&gt;. The Python X.Y library is then installed in &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt;. Suppose this has a subdirectory &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;/site-packages&lt;/code&gt; with three subsubdirectories, &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;spam&lt;/code&gt;, and two path configuration files, &lt;code&gt;foo.pth&lt;/code&gt; and &lt;code&gt;bar.pth&lt;/code&gt;. Assume &lt;code&gt;foo.pth&lt;/code&gt; contains the following:</source>
          <target state="translated">たとえば、 &lt;code&gt;sys.prefix&lt;/code&gt; と &lt;code&gt;sys.exec_prefix&lt;/code&gt; が &lt;code&gt;/usr/local&lt;/code&gt; に設定されているとします。次に、Python XYライブラリが &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt; インストールされます。これに &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;/site-packages&lt;/code&gt; というサブディレクトリがあり、 &lt;code&gt;foo&lt;/code&gt; 、 &lt;code&gt;bar&lt;/code&gt; 、 &lt;code&gt;spam&lt;/code&gt; の 3つのサブディレクトリと、 &lt;code&gt;foo.pth&lt;/code&gt; と &lt;code&gt;bar.pth&lt;/code&gt; の 2つのパス構成ファイルがあるとします。 &lt;code&gt;foo.pth&lt;/code&gt; に以下が含まれていると仮定します。</target>
        </trans-unit>
        <trans-unit id="160f54e15b188263020cd678b4cbe6d3dca29d19" translate="yes" xml:space="preserve">
          <source>For example, suppose a field will be initialized from a database, if a value is not provided when creating the class:</source>
          <target state="translated">例えば、クラス作成時に値を指定しなかった場合、データベースからフィールドが初期化されるとします。</target>
        </trans-unit>
        <trans-unit id="2a51dc8b68006b3628c501bc888381f13603f3d6" translate="yes" xml:space="preserve">
          <source>For example, the comment &lt;code&gt;&amp;lt;!-- comment --&amp;gt;&lt;/code&gt; will cause this method to be called with the argument &lt;code&gt;' comment '&lt;/code&gt;.</source>
          <target state="translated">たとえば、コメント &lt;code&gt;&amp;lt;!-- comment --&amp;gt;&lt;/code&gt; すると、このメソッドは引数 &lt;code&gt;' comment '&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="276a7355d8a4db76578148be24d829dc758d2a8b" translate="yes" xml:space="preserve">
          <source>For example, the configuration specified above with basic interpolation, would look like this with extended interpolation:</source>
          <target state="translated">例えば、上記で指定した基本補間を用いた構成は、拡張補間を用いると次のようになります。</target>
        </trans-unit>
        <trans-unit id="01938a5c60c9e8969e85c6eb8d12360855033dd2" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;em&gt;address&lt;/em&gt; specifications are equivalent: &lt;code&gt;192.168.1.0/24&lt;/code&gt;, &lt;code&gt;192.168.1.0/255.255.255.0&lt;/code&gt; and &lt;code&gt;192.168.1.0/0.0.0.255&lt;/code&gt;.</source>
          <target state="translated">たとえば、次の&lt;em&gt;アドレス&lt;/em&gt;指定は同等です： &lt;code&gt;192.168.1.0/24&lt;/code&gt; 、192.168.1.0 / &lt;code&gt;192.168.1.0/255.255.255.0&lt;/code&gt; および &lt;code&gt;192.168.1.0/0.0.0.255&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ffd76d4d6a2b6fecddb9a2b16cb189c0703deb8" translate="yes" xml:space="preserve">
          <source>For example, the following calls all create instances that connect to the server at the same host and port:</source>
          <target state="translated">例えば、以下の呼び出しは、すべて同じホストとポートでサーバに接続するインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="6485b8e2ead7470cce6b6fb9ebac6270d6c44f71" translate="yes" xml:space="preserve">
          <source>For example, the following code attempts to get the underlying socket object of the transport:</source>
          <target state="translated">例えば、以下のコードは、トランスポートの基礎となるソケットオブジェクトを取得しようとします。</target>
        </trans-unit>
        <trans-unit id="926dd3d39286ea9ea8589b6ed6457274558a4a7f" translate="yes" xml:space="preserve">
          <source>For example, the following code sets the current decimal precision to 42 places, performs a calculation, and then automatically restores the previous context:</source>
          <target state="translated">例えば、以下のコードは、現在の10進数の精度を42桁に設定し、計算を行い、前のコンテキストを自動的に復元します。</target>
        </trans-unit>
        <trans-unit id="a2a9900581cad4336c270134295c4643fc13d30c" translate="yes" xml:space="preserve">
          <source>For example, the following test:</source>
          <target state="translated">例えば、次のようなテストです。</target>
        </trans-unit>
        <trans-unit id="f57d48010d7b1e551e32df4d311a231a6c7759da" translate="yes" xml:space="preserve">
          <source>For example, the output of &lt;a href=&quot;functions#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt; normally is sent to &lt;em&gt;sys.stdout&lt;/em&gt;. You can capture that output in a string by redirecting the output to an &lt;a href=&quot;io#io.StringIO&quot;&gt;&lt;code&gt;io.StringIO&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">たとえば、&lt;a href=&quot;functions#help&quot;&gt; &lt;code&gt;help()&lt;/code&gt; の&lt;/a&gt;出力は通常&lt;em&gt;sys.stdoutに&lt;/em&gt;送信されます。出力を&lt;a href=&quot;io#io.StringIO&quot;&gt; &lt;code&gt;io.StringIO&lt;/code&gt; &lt;/a&gt;オブジェクトにリダイレクトすることで、その出力を文字列にキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="afad8674d1b9f21e340e687b0cc6f14661e4f3de" translate="yes" xml:space="preserve">
          <source>For example, the statement &lt;code&gt;import spam&lt;/code&gt; results in bytecode resembling the following code:</source>
          <target state="translated">たとえば、ステートメント &lt;code&gt;import spam&lt;/code&gt; の結果、バイトコードは次のコードのようになります。</target>
        </trans-unit>
        <trans-unit id="9d664aefd1120a74c2a2186e509cdcbbe1065acb" translate="yes" xml:space="preserve">
          <source>For example, this converts &lt;code&gt;Decimal('123E+1')&lt;/code&gt; to &lt;code&gt;Decimal('1.23E+3')&lt;/code&gt;.</source>
          <target state="translated">たとえば、これは &lt;code&gt;Decimal('123E+1')&lt;/code&gt; を &lt;code&gt;Decimal('1.23E+3')&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="03dfeb0eabcdcb6bb3dc21ab58b033a4c633e25f" translate="yes" xml:space="preserve">
          <source>For example, this feature is used by the &lt;a href=&quot;#unittest.TextTestRunner&quot;&gt;&lt;code&gt;TextTestRunner&lt;/code&gt;&lt;/a&gt; class to stop the test framework when the user signals an interrupt from the keyboard. Interactive tools which provide &lt;code&gt;TestRunner&lt;/code&gt; implementations can use this in a similar manner.</source>
          <target state="translated">たとえば、この機能は、ユーザーがキーボードから割り込みを&lt;a href=&quot;#unittest.TextTestRunner&quot;&gt; &lt;code&gt;TextTestRunner&lt;/code&gt; &lt;/a&gt;ときにテストフレームワークを停止するためにTextTestRunnerクラスによって使用されます。 &lt;code&gt;TestRunner&lt;/code&gt; 実装を提供する対話型ツールは、これを同様の方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="444e569164443b54baf03a91490c78b883818c99" translate="yes" xml:space="preserve">
          <source>For example, this test passes:</source>
          <target state="translated">例えば、このテストは合格です。</target>
        </trans-unit>
        <trans-unit id="a8b68f8307ec7291b449dc75f9eea0977aaefaaa" translate="yes" xml:space="preserve">
          <source>For example, to change every default button to be a flat button with some padding and a different background color:</source>
          <target state="translated">たとえば、すべてのデフォルトボタンを、いくつかのパディングと異なる背景色を持つフラットボタンに変更するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="01e96359683d8998b2f48987f38d7a5a0c7de1ba" translate="yes" xml:space="preserve">
          <source>For example, to create and populate an &lt;code&gt;ast.UnaryOp&lt;/code&gt; node, you could use</source>
          <target state="translated">たとえば、 &lt;code&gt;ast.UnaryOp&lt;/code&gt; ノードを作成して入力するには、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="5a38ad6a815b7c3a6d5e35ad360441c5a233d74d" translate="yes" xml:space="preserve">
          <source>For example, to obtain the digest of the byte string &lt;code&gt;b'Nobody inspects the
spammish repetition'&lt;/code&gt;:</source>
          <target state="translated">たとえば、バイト文字列 &lt;code&gt;b'Nobody inspects the spammish repetition'&lt;/code&gt; ダイジェストを取得するには、スパムの繰り返しを検査します '：</target>
        </trans-unit>
        <trans-unit id="48a28f5d3517c11de3bb06bb6b263ccb6b5647c5" translate="yes" xml:space="preserve">
          <source>For example, to pack a list of integers, the code might appear like this:</source>
          <target state="translated">例えば、整数のリストをパックするには、次のようなコードが表示されます。</target>
        </trans-unit>
        <trans-unit id="a50f637ca45f01bd80a886a7d8d9112bcffe4464" translate="yes" xml:space="preserve">
          <source>For example, to set the delete flag on all messages:</source>
          <target state="translated">例えば、すべてのメッセージに削除フラグを設定する。</target>
        </trans-unit>
        <trans-unit id="b93ac1384be7b98f164f6c81fd59de15e924427b" translate="yes" xml:space="preserve">
          <source>For example, to support arbitrary iterators, you could implement default like this:</source>
          <target state="translated">例えば、任意のイテレータをサポートするために、以下のようなデフォルトの実装を行うことができます。</target>
        </trans-unit>
        <trans-unit id="0951e83479d161eaed251abaa06a68585eb3120d" translate="yes" xml:space="preserve">
          <source>For example, to tunnel through a HTTPS proxy server running locally on port 8080, we would pass the address of the proxy to the &lt;a href=&quot;#http.client.HTTPSConnection&quot;&gt;&lt;code&gt;HTTPSConnection&lt;/code&gt;&lt;/a&gt; constructor, and the address of the host that we eventually want to reach to the &lt;a href=&quot;#http.client.HTTPConnection.set_tunnel&quot;&gt;&lt;code&gt;set_tunnel()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">たとえば、ポート8080でローカルに実行されているHTTPSプロキシサーバーをトンネリングするには、プロキシのアドレスを&lt;a href=&quot;#http.client.HTTPSConnection&quot;&gt; &lt;code&gt;HTTPSConnection&lt;/code&gt; &lt;/a&gt;コンストラクターに渡し、最終的に到達するホストのアドレスを&lt;a href=&quot;#http.client.HTTPConnection.set_tunnel&quot;&gt; &lt;code&gt;set_tunnel()&lt;/code&gt; &lt;/a&gt;メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="7b3b978bfbe527f2a3a323f97ed4b69e27575629" translate="yes" xml:space="preserve">
          <source>For example, using the &lt;em&gt;spawn&lt;/em&gt; or &lt;em&gt;forkserver&lt;/em&gt; start method running the following module would fail with a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">たとえば、次のモジュールを実行&lt;em&gt;するspawn&lt;/em&gt;または&lt;em&gt;forkserver&lt;/em&gt; startメソッドを使用すると、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; で&lt;/a&gt;失敗します。</target>
        </trans-unit>
        <trans-unit id="df42ad7c32da867212db01c727dfc03b20284141" translate="yes" xml:space="preserve">
          <source>For example, with a tuple &lt;code&gt;(1, 2)&lt;/code&gt; pickled in file &lt;code&gt;x.pickle&lt;/code&gt;:</source>
          <target state="translated">たとえば、タプル &lt;code&gt;(1, 2)&lt;/code&gt; &lt;code&gt;x.pickle&lt;/code&gt; ファイルにピクルされた場合：</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="f5d290d09e8b8601522cec0c016dec6107bd8c07" translate="yes" xml:space="preserve">
          <source>For exceptions that involve a file system path (such as &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.unlink&quot;&gt;&lt;code&gt;os.unlink()&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;#OSError.filename&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/a&gt; is the file name passed to the function. For functions that involve two file system paths (such as &lt;a href=&quot;os#os.rename&quot;&gt;&lt;code&gt;os.rename()&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;#OSError.filename2&quot;&gt;&lt;code&gt;filename2&lt;/code&gt;&lt;/a&gt; corresponds to the second file name passed to the function.</source>
          <target state="translated">ファイルシステムパス（&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;os#os.unlink&quot;&gt; &lt;code&gt;os.unlink()&lt;/code&gt; など&lt;/a&gt;）を含む例外の場合、&lt;a href=&quot;#OSError.filename&quot;&gt; &lt;code&gt;filename&lt;/code&gt; &lt;/a&gt;は関数に渡されるファイル名です。2つのファイルシステムパスを含む関数（&lt;a href=&quot;os#os.rename&quot;&gt; &lt;code&gt;os.rename()&lt;/code&gt; など&lt;/a&gt;）の場合、&lt;a href=&quot;#OSError.filename2&quot;&gt; &lt;code&gt;filename2&lt;/code&gt; &lt;/a&gt;は関数に渡される2番目のファイル名に対応します。</target>
        </trans-unit>
        <trans-unit id="986e94f272815e62ab45e31fc596a0bf2e5dba42" translate="yes" xml:space="preserve">
          <source>For existing code calling &lt;a href=&quot;#configparser.ConfigParser.readfp&quot;&gt;&lt;code&gt;readfp()&lt;/code&gt;&lt;/a&gt; with arguments which don&amp;rsquo;t support iteration, the following generator may be used as a wrapper around the file-like object:</source>
          <target state="translated">反復をサポートしない引数で&lt;a href=&quot;#configparser.ConfigParser.readfp&quot;&gt; &lt;code&gt;readfp()&lt;/code&gt; &lt;/a&gt;を呼び出す既存のコードの場合、次のジェネレーターをファイルのようなオブジェクトのラッパーとして使用できます。</target>
        </trans-unit>
        <trans-unit id="8b79f9eae26ef65a2afacf2f54b2b0b95f4250af" translate="yes" xml:space="preserve">
          <source>For extension writers and programs that embed Python</source>
          <target state="translated">Pythonを埋め込む拡張機能のライターやプログラムのために</target>
        </trans-unit>
        <trans-unit id="49236a3024681c0e3e5df13b1f0ff226ce5765af" translate="yes" xml:space="preserve">
          <source>For external entities to be parsed, this handler must be implemented. It is responsible for creating the sub-parser using &lt;code&gt;ExternalEntityParserCreate(context)&lt;/code&gt;, initializing it with the appropriate callbacks, and parsing the entity. This handler should return an integer; if it returns &lt;code&gt;0&lt;/code&gt;, the parser will raise an &lt;code&gt;XML_ERROR_EXTERNAL_ENTITY_HANDLING&lt;/code&gt; error, otherwise parsing will continue.</source>
          <target state="translated">外部エンティティーを解析するには、このハンドラーを実装する必要があります。 &lt;code&gt;ExternalEntityParserCreate(context)&lt;/code&gt; を使用してサブパーサーを作成し、適切なコールバックで初期化し、エンティティを解析します。このハンドラは整数を返す必要があります。 &lt;code&gt;0&lt;/code&gt; を返す場合、パーサーは &lt;code&gt;XML_ERROR_EXTERNAL_ENTITY_HANDLING&lt;/code&gt; エラーを発生させます。それ以外の場合、解析は続行されます。</target>
        </trans-unit>
        <trans-unit id="b4e2ea4728652ede8436b63008dcbd2ab29b3396" translate="yes" xml:space="preserve">
          <source>For further discussion and two alternative approaches, see the &lt;a href=&quot;https://code.activestate.com/recipes/393090/&quot;&gt;ASPN cookbook recipes for accurate floating point summation&lt;/a&gt;.</source>
          <target state="translated">詳細な説明と2つの代替アプローチについては&lt;a href=&quot;https://code.activestate.com/recipes/393090/&quot;&gt;、正確な浮動小数点加算のため&lt;/a&gt;のASPNクックブックのレシピをご覧ください。</target>
        </trans-unit>
        <trans-unit id="e6522f23e1fead3deb4b5395a57a64fa42ca1cdb" translate="yes" xml:space="preserve">
          <source>For further information, please consult the &lt;a href=&quot;#socket-timeouts&quot;&gt;notes on socket timeouts&lt;/a&gt;.</source>
          <target state="translated">詳細について&lt;a href=&quot;#socket-timeouts&quot;&gt;は、ソケットタイムアウトに関するメモ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aece9ac1b71ac6c335d8931e16fc332fda8d8599" translate="yes" xml:space="preserve">
          <source>For heterogeneous collections of data where access by name is clearer than access by index, &lt;a href=&quot;collections#collections.namedtuple&quot;&gt;&lt;code&gt;collections.namedtuple()&lt;/code&gt;&lt;/a&gt; may be a more appropriate choice than a simple tuple object.</source>
          <target state="translated">名前によるアクセスがインデックスによるアクセスよりも明確である異種のデータのコレクションの場合、&lt;a href=&quot;collections#collections.namedtuple&quot;&gt; &lt;code&gt;collections.namedtuple()&lt;/code&gt; &lt;/a&gt;は、単純なタプルオブジェクトよりも適切な選択です。</target>
        </trans-unit>
        <trans-unit id="359d6faefa3d11791af43a44d2be377ce987f362" translate="yes" xml:space="preserve">
          <source>For historical reasons, some of the &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; methods had one or more aliases that are now deprecated. The following table lists the correct names along with their deprecated aliases:</source>
          <target state="translated">歴史的な理由により、一部の&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;メソッドには、現在廃止されている1つ以上のエイリアスがありました。次の表に、非推奨のエイリアスとともに正しい名前を示します。</target>
        </trans-unit>
        <trans-unit id="70e949f6da3f1a592f5b2a48629e000e95eccb0b" translate="yes" xml:space="preserve">
          <source>For immutable targets such as strings, numbers, and tuples, the updated value is computed, but not assigned back to the input variable:</source>
          <target state="translated">文字列、数値、タプルなどの不変のターゲットの場合、更新された値は計算されますが、入力変数には代入されません。</target>
        </trans-unit>
        <trans-unit id="cd5568fb042e52612b4e07795a6d976a99da1fd0" translate="yes" xml:space="preserve">
          <source>For in-place operations such as &lt;code&gt;c[key] += 1&lt;/code&gt;, the value type need only support addition and subtraction. So fractions, floats, and decimals would work and negative values are supported. The same is also true for &lt;a href=&quot;#collections.Counter.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#collections.Counter.subtract&quot;&gt;&lt;code&gt;subtract()&lt;/code&gt;&lt;/a&gt; which allow negative and zero values for both inputs and outputs.</source>
          <target state="translated">&lt;code&gt;c[key] += 1&lt;/code&gt; などのインプレース演算の場合、値の型は加算と減算のみをサポートする必要があります。したがって、分数、浮動小数点数、および小数が機能し、負の値がサポートされます。同じことが、入力と出力の両方に負の値とゼロの値を許可する&lt;a href=&quot;#collections.Counter.update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#collections.Counter.subtract&quot;&gt; &lt;code&gt;subtract()&lt;/code&gt; に&lt;/a&gt;も当てはまります。</target>
        </trans-unit>
        <trans-unit id="c430cecf18c6228ad80e21ff36d9ceb073b9e28e" translate="yes" xml:space="preserve">
          <source>For incremental compression, use a &lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt;&lt;code&gt;BZ2Compressor&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">増分圧縮の場合は、代わりに&lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt; &lt;code&gt;BZ2Compressor&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="a21755ab38d63f0daf62822c3d38c163c737dea4" translate="yes" xml:space="preserve">
          <source>For incremental decompression, use a &lt;a href=&quot;#bz2.BZ2Decompressor&quot;&gt;&lt;code&gt;BZ2Decompressor&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">増分解凍の場合は、代わりに&lt;a href=&quot;#bz2.BZ2Decompressor&quot;&gt; &lt;code&gt;BZ2Decompressor&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="cbff89a2f5f52c2e55ca2c9d27010a14badd978f" translate="yes" xml:space="preserve">
          <source>For information about the constructor parameters and methods, see the documentation for &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; in section &lt;a href=&quot;#doctest-advanced-api&quot;&gt;Advanced API&lt;/a&gt;.</source>
          <target state="translated">コンストラクターのパラメーターとメソッドについては、セクション&lt;a href=&quot;#doctest-advanced-api&quot;&gt;Advanced APIの&lt;/a&gt;&lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ccc3814ef62ef3e032cafe9cf247e4c042f7bd05" translate="yes" xml:space="preserve">
          <source>For inputs that do not have trailing newlines, set the &lt;em&gt;lineterm&lt;/em&gt; argument to &lt;code&gt;&quot;&quot;&lt;/code&gt; so that the output will be uniformly newline free.</source>
          <target state="translated">末尾に改行がない入力の場合は、&lt;em&gt;lineterm&lt;/em&gt;引数を &lt;code&gt;&quot;&quot;&lt;/code&gt; に設定して、出力に改行がないようにします。</target>
        </trans-unit>
        <trans-unit id="963201ecdae08f04bf36171e54bffac97056f991" translate="yes" xml:space="preserve">
          <source>For instance, SML provides a tabulation tool: &lt;code&gt;tabulate(f)&lt;/code&gt; which produces a sequence &lt;code&gt;f(0), f(1), ...&lt;/code&gt;. The same effect can be achieved in Python by combining &lt;a href=&quot;functions#map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#itertools.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; to form &lt;code&gt;map(f, count())&lt;/code&gt;.</source>
          <target state="translated">たとえば、SMLは集計ツールを提供します：シーケンス &lt;code&gt;f(0), f(1), ...&lt;/code&gt; を生成する &lt;code&gt;tabulate(f)&lt;/code&gt; 。同じ効果は、&lt;a href=&quot;functions#map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#itertools.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt;を組み合わせて &lt;code&gt;map(f, count())&lt;/code&gt; を作成することにより、Pythonでも実現できます。</target>
        </trans-unit>
        <trans-unit id="45242015fdb9fb952b9daa1d8d086e0f23b3b509" translate="yes" xml:space="preserve">
          <source>For instance, Shell never throws away output. A program that sends unlimited output to Shell will eventually fill memory, resulting in a memory error. In contrast, some system text windows only keep the last n lines of output. A Windows console, for instance, keeps a user-settable 1 to 9999 lines, with 300 the default.</source>
          <target state="translated">例えば、Shellは出力を捨てることはありません。無制限の出力をシェルに送るプログラムは、最終的にはメモリが一杯になり、メモリエラーが発生します。対照的に、システムのテキストウィンドウの中には、出力の最後のn行だけを保持するものがあります。例えば、Windows コンソールは、ユーザが設定可能な 1 行から 9999 行までを保持しますが、デフォルトは 300 行です。</target>
        </trans-unit>
        <trans-unit id="a68abe1e9fe976d53a8a6657db86db9f80bc6ae9" translate="yes" xml:space="preserve">
          <source>For instance, for the tag &lt;code&gt;&amp;lt;A HREF=&quot;https://www.cwi.nl/&quot;&amp;gt;&lt;/code&gt;, this method would be called as &lt;code&gt;handle_starttag('a', [('href', 'https://www.cwi.nl/')])&lt;/code&gt;.</source>
          <target state="translated">たとえば、タグ &lt;code&gt;&amp;lt;A HREF=&quot;https://www.cwi.nl/&quot;&amp;gt;&lt;/code&gt; の場合、このメソッドは &lt;code&gt;handle_starttag('a', [('href', 'https://www.cwi.nl/')])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="826a7a4eb1b82ca394e40c781115bfce3bd511a6" translate="yes" xml:space="preserve">
          <source>For instance, the following code (which assumes that the &lt;em&gt;Content-Type&lt;/em&gt; header and blank line have already been printed) checks that the fields &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;addr&lt;/code&gt; are both set to a non-empty string:</source>
          <target state="translated">たとえば、次のコード（&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーと空白行が既に印刷されていることを前提としています）は、フィールド &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;addr&lt;/code&gt; の両方が空でない文字列に設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="2fa125984e38d3e02a7f0fb70915cc3d02caa868" translate="yes" xml:space="preserve">
          <source>For integer type fields like &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt;, a third optional item can be given. It must be a small positive integer defining the bit width of the field.</source>
          <target state="translated">&lt;a href=&quot;#ctypes.c_int&quot;&gt; &lt;code&gt;c_int&lt;/code&gt; &lt;/a&gt;などの整数型フィールドの場合、3番目のオプション項目を指定できます。フィールドのビット幅を定義する小さな正の整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f7503225ff38260dec07fdc637319dd83d951773" translate="yes" xml:space="preserve">
          <source>For integers, there is uniform selection from a range. For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.</source>
          <target state="translated">整数の場合、範囲からの一様選択があります。数列については、ランダム要素の一様選択、リストの乱数順列をその場で生成する関数、置換を行わずにランダムサンプリングする関数があります。</target>
        </trans-unit>
        <trans-unit id="4eff0fdcbc3569990bbd16db9fa5a5df5aae7685" translate="yes" xml:space="preserve">
          <source>For loggers other than the root logger, some additional information is required. This is illustrated by the following example.</source>
          <target state="translated">ルート ロガー以外のロガーの場合、いくつかの追加情報が必要です。これは、次の例で説明します。</target>
        </trans-unit>
        <trans-unit id="fca00032925597b5dc8a9f16bf3a7909732bbcbb" translate="yes" xml:space="preserve">
          <source>For long options (options with names longer than a single character), the option and value can also be passed as a single command-line argument, using &lt;code&gt;=&lt;/code&gt; to separate them:</source>
          <target state="translated">長いオプション（名前が1文字より長いオプション）の場合、オプションと値は、 &lt;code&gt;=&lt;/code&gt; を使用してそれらを区切るために、1つのコマンドライン引数として渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="99265f8edbfb9e7d7b596dec842776023c0a9e56" translate="yes" xml:space="preserve">
          <source>For long sequences of the same frame and line, the first few repetitions are shown, followed by a summary line stating the exact number of further repetitions.</source>
          <target state="translated">同じフレームとラインの長いシーケンスの場合は、最初の数回の繰り返しが表示され、その後、さらに繰り返しの正確な回数を示すサマリーラインが続きます。</target>
        </trans-unit>
        <trans-unit id="2e50576c0df1f3411e96df78baa4b95f76497c46" translate="yes" xml:space="preserve">
          <source>For low-level path manipulation on strings, you can also use the &lt;a href=&quot;os.path#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">文字列の低レベルのパス操作では、&lt;a href=&quot;os.path#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt;モジュールを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="780e353ee5e0eadf57f7fb0b0eb414afc840b40c" translate="yes" xml:space="preserve">
          <source>For mathematical operations on multisets and their use cases, see &lt;em&gt;Knuth, Donald. The Art of Computer Programming Volume II, Section 4.6.3, Exercise 19&lt;/em&gt;.</source>
          <target state="translated">マルチセットの数学演算とその使用例については、&lt;em&gt;Knuth、Donaldを&lt;/em&gt;参照してください&lt;em&gt;。&lt;/em&gt;&lt;em&gt;Art of Computer Programming Volume II、セクション4.6.3、Exercise 19&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="bcc82cf68a5234571647cda5636a95aca3c77d15" translate="yes" xml:space="preserve">
          <source>For modes &lt;code&gt;'w:gz'&lt;/code&gt;, &lt;code&gt;'r:gz'&lt;/code&gt;, &lt;code&gt;'w:bz2'&lt;/code&gt;, &lt;code&gt;'r:bz2'&lt;/code&gt;, &lt;code&gt;'x:gz'&lt;/code&gt;, &lt;code&gt;'x:bz2'&lt;/code&gt;, &lt;a href=&quot;#tarfile.open&quot;&gt;&lt;code&gt;tarfile.open()&lt;/code&gt;&lt;/a&gt; accepts the keyword argument &lt;em&gt;compresslevel&lt;/em&gt; (default &lt;code&gt;9&lt;/code&gt;) to specify the compression level of the file.</source>
          <target state="translated">モード &lt;code&gt;'w:gz'&lt;/code&gt; 、 &lt;code&gt;'r:gz'&lt;/code&gt; 、 &lt;code&gt;'w:bz2'&lt;/code&gt; 、 &lt;code&gt;'r:bz2'&lt;/code&gt; 、 &lt;code&gt;'x:gz'&lt;/code&gt; 、 &lt;code&gt;'x:bz2'&lt;/code&gt; 、&lt;a href=&quot;#tarfile.open&quot;&gt; &lt;code&gt;tarfile.open()&lt;/code&gt; &lt;/a&gt;はキーワード引数&lt;em&gt;compresslevel&lt;/em&gt;（デフォルト &lt;code&gt;9&lt;/code&gt; ）ファイルの圧縮レベルを指定します。</target>
        </trans-unit>
        <trans-unit id="f7d85143367eaddc8853c2ec6704f9eb4b357718" translate="yes" xml:space="preserve">
          <source>For modules, classes, functions and methods, the displayed documentation is derived from the docstring (i.e. the &lt;code&gt;__doc__&lt;/code&gt; attribute) of the object, and recursively of its documentable members. If there is no docstring, &lt;a href=&quot;#module-pydoc&quot;&gt;&lt;code&gt;pydoc&lt;/code&gt;&lt;/a&gt; tries to obtain a description from the block of comment lines just above the definition of the class, function or method in the source file, or at the top of the module (see &lt;a href=&quot;inspect#inspect.getcomments&quot;&gt;&lt;code&gt;inspect.getcomments()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">モジュール、クラス、関数、およびメソッドの場合、表示されるドキュメントは、オブジェクトのdocstring（つまり、 &lt;code&gt;__doc__&lt;/code&gt; 属性）から派生し、そのドキュメント化可能なメンバーから再帰的に派生します。docstringがない場合、&lt;a href=&quot;#module-pydoc&quot;&gt; &lt;code&gt;pydoc&lt;/code&gt; &lt;/a&gt;は、ソースファイルのクラス、関数、またはメソッドの定義のすぐ上、またはモジュールの最上部にあるコメント行のブロックから説明を取得しようとします（&lt;a href=&quot;inspect#inspect.getcomments&quot;&gt; &lt;code&gt;inspect.getcomments()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="03e6b008c4cde03e3eae01629d439fc517c4dfe9" translate="yes" xml:space="preserve">
          <source>For more about ABCs, see the &lt;a href=&quot;abc#module-abc&quot;&gt;&lt;code&gt;abc&lt;/code&gt;&lt;/a&gt; module and &lt;a href=&quot;https://www.python.org/dev/peps/pep-3119&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;PEP 3119&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">ABCの詳細については、&lt;a href=&quot;abc#module-abc&quot;&gt; &lt;code&gt;abc&lt;/code&gt; &lt;/a&gt;モジュールおよび&lt;a href=&quot;https://www.python.org/dev/peps/pep-3119&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;PEP 3119を&lt;/strong&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="46cae48518bcb3647b4683abb1424d2693286675" translate="yes" xml:space="preserve">
          <source>For more advanced work, it may be useful to create alternate contexts using the Context() constructor. To make an alternate active, use the &lt;a href=&quot;#decimal.setcontext&quot;&gt;&lt;code&gt;setcontext()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">より高度な作業では、Context（）コンストラクターを使用して代替コンテキストを作成すると便利な場合があります。代替をアクティブにするには、&lt;a href=&quot;#decimal.setcontext&quot;&gt; &lt;code&gt;setcontext()&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0fcc19ca4e316c086f420b1620de5c145c142b6d" translate="yes" xml:space="preserve">
          <source>For more details and extensive examples, see the documentation string of the &lt;code&gt;_threading_local&lt;/code&gt; module.</source>
          <target state="translated">詳細と広範な例については、 &lt;code&gt;_threading_local&lt;/code&gt; モジュールのドキュメント文字列を参照してください。</target>
        </trans-unit>
        <trans-unit id="597d156c6f9b5c546f4c30195be33c24a39b20e0" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;#argparse.Action&quot;&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#argparse.Action&quot;&gt; &lt;code&gt;Action&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="36d676c3906f278c209bbc351453c41061805da0" translate="yes" xml:space="preserve">
          <source>For more explicit control of source stacking, use the &lt;a href=&quot;#shlex.shlex.push_source&quot;&gt;&lt;code&gt;push_source()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#shlex.shlex.pop_source&quot;&gt;&lt;code&gt;pop_source()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">ソーススタッキングをより明示的に制御するには、&lt;a href=&quot;#shlex.shlex.push_source&quot;&gt; &lt;code&gt;push_source()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#shlex.shlex.pop_source&quot;&gt; &lt;code&gt;pop_source()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="dd9913577d878271afdd61232f1fa2cb21697adb" translate="yes" xml:space="preserve">
          <source>For more extensive information on the packer and the options that it can take, see the man pages and page 183 of John Ousterhout&amp;rsquo;s book.</source>
          <target state="translated">パッカーとパッカーが利用できるオプションの詳細については、John Ousterhoutの本のmanページと183ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8f07e394f58518334837c27b85d4ab9f5730274" translate="yes" xml:space="preserve">
          <source>For more fine-grained usage, it&amp;rsquo;s possible to set a trace function by assigning &lt;code&gt;frame.f_trace = tracefunc&lt;/code&gt; explicitly, rather than relying on it being set indirectly via the return value from an already installed trace function. This is also required for activating the trace function on the current frame, which &lt;a href=&quot;#sys.settrace&quot;&gt;&lt;code&gt;settrace()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t do. Note that in order for this to work, a global tracing function must have been installed with &lt;a href=&quot;#sys.settrace&quot;&gt;&lt;code&gt;settrace()&lt;/code&gt;&lt;/a&gt; in order to enable the runtime tracing machinery, but it doesn&amp;rsquo;t need to be the same tracing function (e.g. it could be a low overhead tracing function that simply returns &lt;code&gt;None&lt;/code&gt; to disable itself immediately on each frame).</source>
          <target state="translated">よりきめ細かい使用法については、 &lt;code&gt;frame.f_trace = tracefunc&lt;/code&gt; 明示的に割り当てることにより、すでにインストールされているトレース関数からの戻り値を介して間接的に設定されることに頼るのではなく、トレース関数を設定することが可能です。これは、現在のフレームでトレース機能をアクティブにするためにも必要ですが、&lt;a href=&quot;#sys.settrace&quot;&gt; &lt;code&gt;settrace()&lt;/code&gt; &lt;/a&gt;はこれを行いません。これが機能するためには、ランタイムトレース機構を有効にするために、グローバルトレース関数が&lt;a href=&quot;#sys.settrace&quot;&gt; &lt;code&gt;settrace()&lt;/code&gt; &lt;/a&gt;でインストールされている必要がありますが、同じトレース関数である必要はありません（たとえば、オーバーヘッドが小さい可能性があります）。各フレームですぐに無効になるように &lt;code&gt;None&lt;/code&gt; を返すトレース関数）。</target>
        </trans-unit>
        <trans-unit id="b72782cbc8c0b6cf00d613d39cc13696514eeb6e" translate="yes" xml:space="preserve">
          <source>For more flexibility in using shared memory one can use the &lt;a href=&quot;#module-multiprocessing.sharedctypes&quot;&gt;&lt;code&gt;multiprocessing.sharedctypes&lt;/code&gt;&lt;/a&gt; module which supports the creation of arbitrary ctypes objects allocated from shared memory.</source>
          <target state="translated">共有メモリをより柔軟に使用するために、共有メモリから割り当てられた任意のctypesオブジェクトの作成をサポートする&lt;a href=&quot;#module-multiprocessing.sharedctypes&quot;&gt; &lt;code&gt;multiprocessing.sharedctypes&lt;/code&gt; &lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="df7e50f9236ec25120197854c2f0993b8af2a486" translate="yes" xml:space="preserve">
          <source>For more information about &lt;a href=&quot;#ttkstyling&quot;&gt;TtkStyling&lt;/a&gt;, see the &lt;a href=&quot;#tkinter.ttk.Style&quot;&gt;&lt;code&gt;Style&lt;/code&gt;&lt;/a&gt; class documentation.</source>
          <target state="translated">詳細については&lt;a href=&quot;#ttkstyling&quot;&gt;TtkStyling&lt;/a&gt;、参照&lt;a href=&quot;#tkinter.ttk.Style&quot;&gt; &lt;code&gt;Style&lt;/code&gt; &lt;/a&gt;クラスのドキュメントを。</target>
        </trans-unit>
        <trans-unit id="db5ca74113cecdf8bd9218769597c1431aee8777" translate="yes" xml:space="preserve">
          <source>For more information about &lt;em&gt;flags&lt;/em&gt; you can consult &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/getnameinfo(3)&quot;&gt;getnameinfo(3)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;フラグの&lt;/em&gt;詳細については、&lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/getnameinfo(3)&quot;&gt;getnameinfo（3）を&lt;/a&gt;&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="38c9342c817e5011acb54d4ee258a06117119635" translate="yes" xml:space="preserve">
          <source>For more information on &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt;, see section &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt;.</source>
          <target state="translated">詳細については&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;、節参照&lt;a href=&quot;#doctest-basic-api&quot;&gt;基本的なAPIを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8992739fc0a61b0b25882180db6cdfa7a3570bbd" translate="yes" xml:space="preserve">
          <source>For more information on &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;, see section &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt;.</source>
          <target state="translated">詳細については&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt;、節参照&lt;a href=&quot;#doctest-basic-api&quot;&gt;基本的なAPIを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2f4e87cc73e3a41721af3d1c000891584dd27800" translate="yes" xml:space="preserve">
          <source>For more information on class methods, see &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">クラスメソッドの詳細については、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;「標準の型階層&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="bedf2aa9231c7c1fecdcdb39b3fcf4e879dfae1c" translate="yes" xml:space="preserve">
          <source>For more information on code and frame objects, refer to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">コードおよびフレームオブジェクトの詳細については、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;「標準型階層」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4d078607c47fbb41c24940ef7055eb18a9b3d415" translate="yes" xml:space="preserve">
          <source>For more information on static methods, see &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">静的メソッドの詳細については、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;「標準の型階層&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="421bf46ac523c580b6d6d6d7806d5f9f6b50d224" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;str&lt;/code&gt; class and its methods, see &lt;a href=&quot;#textseq&quot;&gt;Text Sequence Type &amp;mdash; str&lt;/a&gt; and the &lt;a href=&quot;#string-methods&quot;&gt;String Methods&lt;/a&gt; section below. To output formatted strings, see the &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#f-strings&quot;&gt;Formatted string literals&lt;/a&gt; and &lt;a href=&quot;string#formatstrings&quot;&gt;Format String Syntax&lt;/a&gt; sections. In addition, see the &lt;a href=&quot;text#stringservices&quot;&gt;Text Processing Services&lt;/a&gt; section.</source>
          <target state="translated">詳細については &lt;code&gt;str&lt;/code&gt; クラスとそのメソッドを参照してください&lt;a href=&quot;#textseq&quot;&gt;STR -テキストシーケンス型&lt;/a&gt;と&lt;a href=&quot;#string-methods&quot;&gt;文字列メソッド&lt;/a&gt;以下のセクションを。書式設定された文字列を出力するには、「書式設定された文字&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#f-strings&quot;&gt;列リテラル」&lt;/a&gt;および「&lt;a href=&quot;string#formatstrings&quot;&gt;書式文字列構文」&lt;/a&gt;セクションを参照してください。さらに、&lt;a href=&quot;text#stringservices&quot;&gt;テキスト処理サービスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2d85a9650ef90a538c7b9637ea250afe03d69723" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://bugs.python.org/issue5155&quot;&gt;bpo-5155&lt;/a&gt;, &lt;a href=&quot;https://bugs.python.org/issue5313&quot;&gt;bpo-5313&lt;/a&gt; and &lt;a href=&quot;https://bugs.python.org/issue5331&quot;&gt;bpo-5331&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://bugs.python.org/issue5155&quot;&gt;bpo-5155&lt;/a&gt;、&lt;a href=&quot;https://bugs.python.org/issue5313&quot;&gt;bpo-5313&lt;/a&gt;および&lt;a href=&quot;https://bugs.python.org/issue5331&quot;&gt;bpo-5331を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="ad749c484a050c2c7bf1710222fa340076db122c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx&quot;&gt;Accessing an Alternate Registry View&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx&quot;&gt;代替レジストリビューへのアクセス&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="119c6fa14fdb5ff135f608e174a237a8d39259df" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx&quot;&gt;Registry Key Security and Access&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx&quot;&gt;レジストリキーのセキュリティとアクセス&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="77fb0351c334f2e98ca82931de22cb7d2c602dca" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724884%28v=VS.85%29.aspx&quot;&gt;Registry Value Types&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724884%28v=VS.85%29.aspx&quot;&gt;レジストリ値のタイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5798480c6aa43603ded3d7efeddc544e90f897ab" translate="yes" xml:space="preserve">
          <source>For more sophisticated applications, the &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt; class helps manage settings and certificates, which can then be inherited by SSL sockets created through the &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">より洗練されたアプリケーションの場合、&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;ssl.SSLContext&lt;/code&gt; &lt;/a&gt;クラスは設定と証明書の管理に役立ち、&lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt; &lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt; &lt;/a&gt;メソッドを介して作成されたSSLソケットによって継承できます。</target>
        </trans-unit>
        <trans-unit id="8bde3739aadce3c7f820930e05b3c8e453753978" translate="yes" xml:space="preserve">
          <source>For most purposes, the &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; (master volume) and &lt;code&gt;SOUND_MIXER_PCM&lt;/code&gt; controls should suffice&amp;mdash;but code that uses the mixer should be flexible when it comes to choosing mixer controls. On the Gravis Ultrasound, for example, &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; does not exist.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; （マスターボリューム）および &lt;code&gt;SOUND_MIXER_PCM&lt;/code&gt; コントロールで十分ですが、ミキサーコントロールを選択する場合、ミキサーを使用するコードは柔軟でなければなりません。たとえば、Gravis Ultrasoundでは、 &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; は存在しません。</target>
        </trans-unit>
        <trans-unit id="81a00f17049a5e9a02f7312cb25779d4bb6c5941" translate="yes" xml:space="preserve">
          <source>For mutable targets such as lists and dictionaries, the in-place method will perform the update, so no subsequent assignment is necessary:</source>
          <target state="translated">リストや辞書のような変異可能なターゲットの場合、インプレース・メソッドが更新を実行するので、それ以降の代入は必要ありません。</target>
        </trans-unit>
        <trans-unit id="77fbb059375aa28aa73354116772b577d2a77cf7" translate="yes" xml:space="preserve">
          <source>For nodes that were part of a collection of statements (that applies to all statement nodes), the visitor may also return a list of nodes rather than just a single node.</source>
          <target state="translated">ステートメントのコレクションの一部であるノード(すべてのステートメント・ノードに適用されます)については、訪問者は単一のノードだけではなく、ノードのリストを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="d250f7a529a8d3c64d6bc6040f6513ae55826602" translate="yes" xml:space="preserve">
          <source>For non-200 error codes, this simply passes the job on to the &lt;code&gt;http_error_&amp;lt;type&amp;gt;()&lt;/code&gt; handler methods, via &lt;a href=&quot;#urllib.request.OpenerDirector.error&quot;&gt;&lt;code&gt;OpenerDirector.error()&lt;/code&gt;&lt;/a&gt;. Eventually, &lt;a href=&quot;#urllib.request.HTTPDefaultErrorHandler&quot;&gt;&lt;code&gt;HTTPDefaultErrorHandler&lt;/code&gt;&lt;/a&gt; will raise an &lt;a href=&quot;urllib.error#urllib.error.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; if no other handler handles the error.</source>
          <target state="translated">200以外のエラーコードの場合、これはジョブを&lt;a href=&quot;#urllib.request.OpenerDirector.error&quot;&gt; &lt;code&gt;OpenerDirector.error()&lt;/code&gt; &lt;/a&gt;経由で &lt;code&gt;http_error_&amp;lt;type&amp;gt;()&lt;/code&gt; ハンドラーメソッドに渡すだけです。結局、&lt;a href=&quot;#urllib.request.HTTPDefaultErrorHandler&quot;&gt; &lt;code&gt;HTTPDefaultErrorHandler&lt;/code&gt; が&lt;/a&gt;発生します&lt;a href=&quot;urllib.error#urllib.error.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; を&lt;/a&gt;他のハンドラがエラーを処理しない場合。</target>
        </trans-unit>
        <trans-unit id="f5517c546993b6b7847fcd0c391c423f3a488157" translate="yes" xml:space="preserve">
          <source>For non-Unix platforms, or when a remote browser is available on Unix, the controlling process will not wait for the user to finish with the browser, but allow the remote browser to maintain its own windows on the display. If remote browsers are not available on Unix, the controlling process will launch a new browser and wait.</source>
          <target state="translated">非Unixプラットフォームの場合、またはUnix上でリモートブラウザが利用可能な場合、制御プロセスはユーザがブラウザを終了するのを待たずに、リモートブラウザがディスプレイ上で自分のウィンドウを維持することを許可する。Unix上でリモートブラウザが利用できない場合、制御プロセスは新しいブラウザを起動して待ちます。</target>
        </trans-unit>
        <trans-unit id="9b772393e90f36112fe4debf3cd114a12b09518c" translate="yes" xml:space="preserve">
          <source>For non-callable mocks the callable variant will be used (rather than any custom subclass).</source>
          <target state="translated">呼び出し不可能なモックには、呼び出し可能なバリアントが使用されます (カスタムサブクラスではなく)。</target>
        </trans-unit>
        <trans-unit id="b691e793be115140f38b348f5cebba832f0c4591" translate="yes" xml:space="preserve">
          <source>For non-contiguous arrays the result is equal to the flattened list representation with all elements converted to bytes. &lt;a href=&quot;#memoryview.tobytes&quot;&gt;&lt;code&gt;tobytes()&lt;/code&gt;&lt;/a&gt; supports all format strings, including those that are not in &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; module syntax.</source>
          <target state="translated">連続しない配列の場合、結果は、すべての要素がバイトに変換されたフラット化されたリスト表現と等しくなります。&lt;a href=&quot;#memoryview.tobytes&quot;&gt; &lt;code&gt;tobytes()&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;struct#module-struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt;モジュール構文にないものも含め、すべてのフォーマット文字列をサポートします。</target>
        </trans-unit>
        <trans-unit id="cb6a6ca72e2265be79779f9a6b802b866e0158e9" translate="yes" xml:space="preserve">
          <source>For normal use, you should only require the initialization/connect, &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;sendmail()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#smtplib.SMTP.quit&quot;&gt;&lt;code&gt;SMTP.quit()&lt;/code&gt;&lt;/a&gt; methods. An example is included below.</source>
          <target state="translated">通常の使用では、初期化/接続、&lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt; &lt;code&gt;sendmail()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#smtplib.SMTP.quit&quot;&gt; &lt;code&gt;SMTP.quit()&lt;/code&gt; &lt;/a&gt;メソッドのみが必要です。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="19877769490ea36879f858c9d17af7a4020bd5a5" translate="yes" xml:space="preserve">
          <source>For numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, possibly of different types, it&amp;rsquo;s a requirement that &lt;code&gt;hash(x) == hash(y)&lt;/code&gt; whenever &lt;code&gt;x == y&lt;/code&gt; (see the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt;) Python&amp;rsquo;s hash for numeric types is based on a single mathematical function that&amp;rsquo;s defined for any rational number, and hence applies to all instances of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt;, and all finite instances of &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt;. Essentially, this function is given by reduction modulo &lt;code&gt;P&lt;/code&gt; for a fixed prime &lt;code&gt;P&lt;/code&gt;. The value of &lt;code&gt;P&lt;/code&gt; is made available to Python as the &lt;code&gt;modulus&lt;/code&gt; attribute of &lt;a href=&quot;sys#sys.hash_info&quot;&gt;&lt;code&gt;sys.hash_info&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">数値 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; 、おそらく異なる型の場合、 &lt;code&gt;x == y&lt;/code&gt; 常に &lt;code&gt;hash(x) == hash(y)&lt;/code&gt; ある必要があります（詳細については、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;メソッドのドキュメントを参照してください）。さまざまな数値型（&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;を含む）全体での実装と効率を容易にするために、数値型のPythonハッシュは、任意の有理数に対して定義されている単一の数学関数に基づいているため、すべてに適用されます&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; の&lt;/a&gt;インスタンス、および&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt;。基本的に、この関数は、固定素数 &lt;code&gt;P&lt;/code&gt; の &lt;code&gt;P&lt;/code&gt; を法とする縮約によって与えられます。 &lt;code&gt;P&lt;/code&gt; の値は、&lt;a href=&quot;sys#sys.hash_info&quot;&gt; &lt;code&gt;sys.hash_info&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;modulus&lt;/code&gt; 属性としてPythonで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="37098851ccc8634e113e32e8099ef7a2d3579db1" translate="yes" xml:space="preserve">
          <source>For objects with custom &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; methods, note that &lt;a href=&quot;#hash&quot;&gt;&lt;code&gt;hash()&lt;/code&gt;&lt;/a&gt; truncates the return value based on the bit width of the host machine. See &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">カスタムを持つオブジェクトの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;メソッド、ノートその&lt;a href=&quot;#hash&quot;&gt; &lt;code&gt;hash()&lt;/code&gt; &lt;/a&gt;ホスト・マシンのビット幅に基づいて、戻り値を切り捨てます。詳細については、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="30462903d9f2f468f46f7edb480c29e83e9dfb0b" translate="yes" xml:space="preserve">
          <source>For optional argument actions, the value of &lt;code&gt;dest&lt;/code&gt; is normally inferred from the option strings. &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; generates the value of &lt;code&gt;dest&lt;/code&gt; by taking the first long option string and stripping away the initial &lt;code&gt;--&lt;/code&gt; string. If no long option strings were supplied, &lt;code&gt;dest&lt;/code&gt; will be derived from the first short option string by stripping the initial &lt;code&gt;-&lt;/code&gt; character. Any internal &lt;code&gt;-&lt;/code&gt; characters will be converted to &lt;code&gt;_&lt;/code&gt; characters to make sure the string is a valid attribute name. The examples below illustrate this behavior:</source>
          <target state="translated">オプションの引数アクションの場合、 &lt;code&gt;dest&lt;/code&gt; の値は通常、オプション文字列から推測されます。&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; は、&lt;/a&gt;の値を生成 &lt;code&gt;dest&lt;/code&gt; 最初に長いオプション文字列を取り、最初の剥ぎ取ることで &lt;code&gt;--&lt;/code&gt; 文字列を。長いオプション文字列が指定されていない場合、 &lt;code&gt;dest&lt;/code&gt; は最初の &lt;code&gt;-&lt;/code&gt; 文字を削除することにより、最初の短いオプション文字列から派生します。文字列が有効な属性名であることを確認するために、内部の &lt;code&gt;-&lt;/code&gt; 文字は &lt;code&gt;_&lt;/code&gt; 文字に変換されます。以下の例は、この動作を示しています。</target>
        </trans-unit>
        <trans-unit id="0f2d0f71428756b986ebaa5435a895c9fa85f213" translate="yes" xml:space="preserve">
          <source>For ordering (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, etc) the rules are different. Interface and address objects with the same IP version can be compared, and the address objects will always sort before the interface objects. Two interface objects are first compared by their networks and, if those are the same, then by their IP addresses.</source>
          <target state="translated">順序付け（ &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; など）の場合、ルールは異なります。同じIPバージョンのインターフェイスオブジェクトとアドレスオブジェクトを比較でき、アドレスオブジェクトは常にインターフェイスオブジェクトの前にソートされます。2つのインターフェースオブジェクトは、まずネットワークによって比較され、それらが同じである場合は、IPアドレスによって比較されます。</target>
        </trans-unit>
        <trans-unit id="1a78e5fc164b6225aab0e8520457ff6f179c8031" translate="yes" xml:space="preserve">
          <source>For other containers see the built-in &lt;a href=&quot;stdtypes#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; classes, as well as the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">その他のコンテナーについては、組み込みの&lt;a href=&quot;stdtypes#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;クラス、および&lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd75d884bb310e831015ffaf69d74418b45d2e9b" translate="yes" xml:space="preserve">
          <source>For other containers see the built-in &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; classes, as well as the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">他のコンテナについては、組み込みの&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;クラス、および&lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;モジュールをご覧ください。</target>
        </trans-unit>
        <trans-unit id="806eb52bec9293c5c5e9f3e57a2e9b6409b111da" translate="yes" xml:space="preserve">
          <source>For other containers see the built-in &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; classes, as well as the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">その他のコンテナーについては、組み込みの&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;クラス、および&lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="3e3b71d8294ed183632143849e0c5e2186ee11c5" translate="yes" xml:space="preserve">
          <source>For other non-POSIX platforms, currently just returns &lt;a href=&quot;sys#sys.platform&quot;&gt;&lt;code&gt;sys.platform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">他の非POSIXプラットフォームの場合、現在は&lt;a href=&quot;sys#sys.platform&quot;&gt; &lt;code&gt;sys.platform&lt;/code&gt; を&lt;/a&gt;返すだけです。</target>
        </trans-unit>
        <trans-unit id="43510e47adddfe2347126cf63725f54b5b8386f0" translate="yes" xml:space="preserve">
          <source>For other systems, the values are:</source>
          <target state="translated">他のシステムの場合、値は</target>
        </trans-unit>
        <trans-unit id="80bfe13e7a83c037584f2ad34a471b944fb57186" translate="yes" xml:space="preserve">
          <source>For packages located in the filesystem, which have already been imported, this is the rough equivalent of:</source>
          <target state="translated">ファイルシステムにあるパッケージで、すでにインポート済みのものについては、これが大まかな意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="5a76a860e58a82ab240c54a9335a87b67ecb80d9" translate="yes" xml:space="preserve">
          <source>For passing messages one can use &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt;&lt;code&gt;Pipe()&lt;/code&gt;&lt;/a&gt; (for a connection between two processes) or a queue (which allows multiple producers and consumers).</source>
          <target state="translated">メッセージを渡すには、&lt;a href=&quot;#multiprocessing.Pipe&quot;&gt; &lt;code&gt;Pipe()&lt;/code&gt; &lt;/a&gt;（2つのプロセス間の接続の場合）またはキュー（複数のプロデューサーとコンシューマーを許可する）を使用できます。</target>
        </trans-unit>
        <trans-unit id="501f766e72b164e7c677bd88bbc6c17ac2be5b93" translate="yes" xml:space="preserve">
          <source>For performance reasons, &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt;&lt;code&gt;reducer_override()&lt;/code&gt;&lt;/a&gt; may not be called for the following objects: &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and exact instances of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パフォーマンス上の理由から、次のオブジェクトに対して&lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt; &lt;code&gt;reducer_override()&lt;/code&gt; を呼び出す&lt;/a&gt;ことはできません： &lt;code&gt;None&lt;/code&gt; 、 &lt;code&gt;True&lt;/code&gt; 、 &lt;code&gt;False&lt;/code&gt; 、および&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; の&lt;/a&gt;正確なインスタンス。</target>
        </trans-unit>
        <trans-unit id="7dc577194da823efb388a7e912288fbb2216f9ea" translate="yes" xml:space="preserve">
          <source>For positional arguments with &lt;a href=&quot;#nargs&quot;&gt;nargs&lt;/a&gt; equal to &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;, the &lt;code&gt;default&lt;/code&gt; value is used when no command-line argument was present:</source>
          <target state="translated">&lt;a href=&quot;#nargs&quot;&gt;nargs&lt;/a&gt;が &lt;code&gt;?&lt;/code&gt; に等しい位置引数の場合 または &lt;code&gt;*&lt;/code&gt; 、コマンドライン引数が存在しない場合は &lt;code&gt;default&lt;/code&gt; 値が使用されます。</target>
        </trans-unit>
        <trans-unit id="8b4a550eec3b311ec7c0b5c122c8cd1aa045b2d0" translate="yes" xml:space="preserve">
          <source>For practical suggestions on how to design cooperative classes using &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;guide to using super()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;を使用して協調クラスを設計する方法に関する実際的な提案については、&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;super（）の使用ガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f6b9cd2e27090d9128abe570d2d9cdaa38c3b4f0" translate="yes" xml:space="preserve">
          <source>For projects where startup time is critical, this class allows for potentially minimizing the cost of loading a module if it is never used. For projects where startup time is not essential then use of this class is &lt;strong&gt;heavily&lt;/strong&gt; discouraged due to error messages created during loading being postponed and thus occurring out of context.</source>
          <target state="translated">起動時間が重要なプロジェクトの場合、このクラスを使用すると、モジュールが使用されない場合にモジュールをロードするコストを最小限に抑えることができます。起動時間が重要でないプロジェクトの場合、ロード中に作成されたエラーメッセージが延期され、コンテキスト外で発生するため、このクラスの使用は&lt;strong&gt;大幅に&lt;/strong&gt;推奨されません。</target>
        </trans-unit>
        <trans-unit id="78750474069e0c64d5febba081125312d17b6e79" translate="yes" xml:space="preserve">
          <source>For reading and writing &lt;code&gt;.gz&lt;/code&gt; files see the &lt;a href=&quot;gzip#module-gzip&quot;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;.gz&lt;/code&gt; ファイルの読み取りと書き込みについては、&lt;a href=&quot;gzip#module-gzip&quot;&gt; &lt;code&gt;gzip&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="51794c9a03db663b665c1244d6fcc6729a11742e" translate="yes" xml:space="preserve">
          <source>For seekable output streams, the &lt;code&gt;wave&lt;/code&gt; header will automatically be updated to reflect the number of frames actually written. For unseekable streams, the &lt;em&gt;nframes&lt;/em&gt; value must be accurate when the first frame data is written. An accurate &lt;em&gt;nframes&lt;/em&gt; value can be achieved either by calling &lt;a href=&quot;#wave.Wave_write.setnframes&quot;&gt;&lt;code&gt;setnframes()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#wave.Wave_write.setparams&quot;&gt;&lt;code&gt;setparams()&lt;/code&gt;&lt;/a&gt; with the number of frames that will be written before &lt;a href=&quot;#wave.Wave_write.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; is called and then using &lt;a href=&quot;#wave.Wave_write.writeframesraw&quot;&gt;&lt;code&gt;writeframesraw()&lt;/code&gt;&lt;/a&gt; to write the frame data, or by calling &lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt;&lt;code&gt;writeframes()&lt;/code&gt;&lt;/a&gt; with all of the frame data to be written. In the latter case &lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt;&lt;code&gt;writeframes()&lt;/code&gt;&lt;/a&gt; will calculate the number of frames in the data and set &lt;em&gt;nframes&lt;/em&gt; accordingly before writing the frame data.</source>
          <target state="translated">シーク可能な出力ストリームの場合、実際に書き込まれたフレームの数を反映するように &lt;code&gt;wave&lt;/code&gt; ヘッダーが自動的に更新されます。シークできないストリームの場合、最初のフレームデータが書き込まれるとき、&lt;em&gt;nframes&lt;/em&gt;値は正確でなければなりません。正確な&lt;em&gt;nframes&lt;/em&gt;値は、&lt;a href=&quot;#wave.Wave_write.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;が呼び出される前に書き込まれるフレームの数を指定して&lt;a href=&quot;#wave.Wave_write.setnframes&quot;&gt; &lt;code&gt;setnframes()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#wave.Wave_write.setparams&quot;&gt; &lt;code&gt;setparams()&lt;/code&gt; &lt;/a&gt;を呼び出し、次に&lt;a href=&quot;#wave.Wave_write.writeframesraw&quot;&gt; &lt;code&gt;writeframesraw()&lt;/code&gt; &lt;/a&gt;を使用してフレームデータを書き込むか、&lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt; &lt;code&gt;writeframes()&lt;/code&gt; を&lt;/a&gt;呼び出すことによって実現できます。すべてのフレームデータが書き込まれます。後者の場合、&lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt; &lt;code&gt;writeframes()&lt;/code&gt; &lt;/a&gt;はデータのフレーム数を計算して設定します&lt;em&gt;&lt;/em&gt;フレームデータを書き込む前に、それに応じて&lt;em&gt;nframes&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="04adcba5227396c66c494ff68cad07039f1493f6" translate="yes" xml:space="preserve">
          <source>For server operation, typically you&amp;rsquo;ll need to have a server certificate, and private key, each in a file. You&amp;rsquo;ll first create a context holding the key and the certificate, so that clients can check your authenticity. Then you&amp;rsquo;ll open a socket, bind it to a port, call &lt;code&gt;listen()&lt;/code&gt; on it, and start waiting for clients to connect:</source>
          <target state="translated">サーバーの操作では、通常、サーバー証明書と秘密キーがそれぞれファイルに含まれている必要があります。最初に、キーと証明書を保持するコンテキストを作成して、クライアントがあなたの信憑性をチェックできるようにします。次に、ソケットを開いてポートにバインドし、 &lt;code&gt;listen()&lt;/code&gt; を呼び出して、クライアントの接続を待機します。</target>
        </trans-unit>
        <trans-unit id="93d8949164ba6462cf8fdab9836ce0f2c519f424" translate="yes" xml:space="preserve">
          <source>For short options (options only one character long), the option and its value can be concatenated:</source>
          <target state="translated">短いオプシ ョ ン (オプシ ョ ンの長 さ が 1 文字のみの場合)では、 オプシ ョ ン と その値を連結す る こ と がで き ます。</target>
        </trans-unit>
        <trans-unit id="8894fe625e330e22f451e4d7a6fe84725760ab62" translate="yes" xml:space="preserve">
          <source>For simple text calendars this module provides the following functions.</source>
          <target state="translated">シンプルなテキストカレンダーのために、このモジュールは以下の関数を提供します。</target>
        </trans-unit>
        <trans-unit id="f002790c6797d5ebea652915cb6f6647fee569f5" translate="yes" xml:space="preserve">
          <source>For some &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;s, Python displays the character position of the syntax error, using a &lt;code&gt;^&lt;/code&gt; marker:</source>
          <target state="translated">一部の&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;の場合、Pythonは &lt;code&gt;^&lt;/code&gt; マーカーを使用して構文エラーの文字位置を表示します。</target>
        </trans-unit>
        <trans-unit id="2a42a868523cbc58a8db9f025c08ecb1cde2a8d5" translate="yes" xml:space="preserve">
          <source>For some applications, it may be more convenient to have the least integer &lt;em&gt;a&lt;/em&gt; such that &lt;em&gt;n&lt;/em&gt; &amp;le; &lt;em&gt;a&lt;/em&gt;&amp;sup2;, or in other words the ceiling of the exact square root of &lt;em&gt;n&lt;/em&gt;. For positive &lt;em&gt;n&lt;/em&gt;, this can be computed using &lt;code&gt;a = 1 + isqrt(n - 1)&lt;/code&gt;.</source>
          <target state="translated">いくつかの用途では、整数以上を有することがより便利であるように&lt;em&gt;、N&lt;/em&gt; &amp;le; の正確な平方根の&amp;sup2;、すなわち天井&lt;em&gt;N&lt;/em&gt;。正の&lt;em&gt;nの場合&lt;/em&gt;、これは &lt;code&gt;a = 1 + isqrt(n - 1)&lt;/code&gt; を使用して計算できます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="648573c91e5f02118dab0f39da9d75637b36572a" translate="yes" xml:space="preserve">
          <source>For some use cases, there are good alternatives to &lt;a href=&quot;#sum&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;. The preferred, fast way to concatenate a sequence of strings is by calling &lt;code&gt;''.join(sequence)&lt;/code&gt;. To add floating point values with extended precision, see &lt;a href=&quot;math#math.fsum&quot;&gt;&lt;code&gt;math.fsum()&lt;/code&gt;&lt;/a&gt;. To concatenate a series of iterables, consider using &lt;a href=&quot;itertools#itertools.chain&quot;&gt;&lt;code&gt;itertools.chain()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">いくつかのユースケースでは、&lt;a href=&quot;#sum&quot;&gt; &lt;code&gt;sum()&lt;/code&gt; に&lt;/a&gt;代わる優れた方法があります。文字列のシーケンスを連結するための推奨される高速な方法は、 &lt;code&gt;''.join(sequence)&lt;/code&gt; 呼び出すことです。拡張精度で浮動小数点値を追加するには、&lt;a href=&quot;math#math.fsum&quot;&gt; &lt;code&gt;math.fsum()&lt;/code&gt; を&lt;/a&gt;参照してください。一連の反復可能&lt;a href=&quot;itertools#itertools.chain&quot;&gt; &lt;code&gt;itertools.chain()&lt;/code&gt; &lt;/a&gt;を連結するには、itertools.chain（）の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="96785c718078e7660a88cdec515cc89c2714da8a" translate="yes" xml:space="preserve">
          <source>For sorting examples and a brief sorting tutorial, see &lt;a href=&quot;https://docs.python.org/3.8/howto/sorting.html#sortinghowto&quot;&gt;Sorting HOW TO&lt;/a&gt;.</source>
          <target state="translated">並べ替えの例と簡単な並べ替えのチュートリアルについては、「&lt;a href=&quot;https://docs.python.org/3.8/howto/sorting.html#sortinghowto&quot;&gt;並べ替えの方法&lt;/a&gt;」をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c2029c5ee892a94642125539a40e6d42df89f30e" translate="yes" xml:space="preserve">
          <source>For special purposes, there is a second format for &lt;em&gt;mode&lt;/em&gt;: &lt;code&gt;'filemode|[compression]'&lt;/code&gt;. &lt;a href=&quot;#tarfile.open&quot;&gt;&lt;code&gt;tarfile.open()&lt;/code&gt;&lt;/a&gt; will return a &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; object that processes its data as a stream of blocks. No random seeking will be done on the file. If given, &lt;em&gt;fileobj&lt;/em&gt; may be any object that has a &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt; method (depending on the &lt;em&gt;mode&lt;/em&gt;). &lt;em&gt;bufsize&lt;/em&gt; specifies the blocksize and defaults to &lt;code&gt;20 * 512&lt;/code&gt; bytes. Use this variant in combination with e.g. &lt;code&gt;sys.stdin&lt;/code&gt;, a socket &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; or a tape device. However, such a &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; object is limited in that it does not allow random access, see &lt;a href=&quot;#tar-examples&quot;&gt;Examples&lt;/a&gt;. The currently possible modes:</source>
          <target state="translated">特別な目的のために、&lt;em&gt;モード&lt;/em&gt;には2番目の形式があり&lt;em&gt;ます&lt;/em&gt;： &lt;code&gt;'filemode|[compression]'&lt;/code&gt; 。&lt;a href=&quot;#tarfile.open&quot;&gt; &lt;code&gt;tarfile.open()&lt;/code&gt; &lt;/a&gt;は、データをブロックのストリームとして処理する&lt;a href=&quot;#tarfile.TarFile&quot;&gt; &lt;code&gt;TarFile&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。ファイルのランダムシークは行われません。指定する場合、&lt;em&gt;fileobj&lt;/em&gt;は、 &lt;code&gt;read()&lt;/code&gt; &lt;em&gt;モードに&lt;/em&gt;応じて &lt;code&gt;write()&lt;/code&gt; read（）またはwrite（）メソッドを持つ任意のオブジェクトにすることができます。&lt;em&gt;bufsize&lt;/em&gt;はブロックサイズを指定し、デフォルトは &lt;code&gt;20 * 512&lt;/code&gt; バイトです。このバリアントは、たとえば &lt;code&gt;sys.stdin&lt;/code&gt; 、ソケット&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト、&lt;/a&gt;またはテープデバイスと組み合わせて使用​​します。ただし、このような&lt;a href=&quot;#tarfile.TarFile&quot;&gt; &lt;code&gt;TarFile&lt;/code&gt; &lt;/a&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;オブジェクトはランダムアクセスを許可しないという制限があります。&lt;a href=&quot;#tar-examples&quot;&gt;例を&lt;/a&gt;参照してください。現在可能なモード：</target>
        </trans-unit>
        <trans-unit id="9e724cc7dd34b70754120633fc82a51404b0a117" translate="yes" xml:space="preserve">
          <source>For supported platforms, &lt;em&gt;reuse_port&lt;/em&gt; can be used as a replacement for similar functionality. With &lt;em&gt;reuse_port&lt;/em&gt;, &lt;code&gt;SO_REUSEPORT&lt;/code&gt; is used instead, which specifically prevents processes with differing UIDs from assigning sockets to the same socket address.</source>
          <target state="translated">サポートされているプラ​​ットフォームでは、&lt;em&gt;reuse_port&lt;/em&gt;を同様の機能の代替として使用できます。&lt;em&gt;reuse_port&lt;/em&gt;、 &lt;code&gt;SO_REUSEPORT&lt;/code&gt; は、具体的に同一のソケットアドレスにソケットを割り当てるからのUIDが異なるプロセスを防止する、代わりに使用されています。</target>
        </trans-unit>
        <trans-unit id="5159af1687415ddd28bfc2a1995bd20e96f9261b" translate="yes" xml:space="preserve">
          <source>For syntax errors - the compiler error message.</source>
          <target state="translated">構文エラーの場合-コンパイラのエラー・メッセージ。</target>
        </trans-unit>
        <trans-unit id="b24d7db1fe29e271ea208c62a0cee2d863f7cfbe" translate="yes" xml:space="preserve">
          <source>For syntax errors - the file name where the error occurred.</source>
          <target state="translated">構文エラーの場合-エラーが発生したファイル名。</target>
        </trans-unit>
        <trans-unit id="fb118c31346734709d1426db6d074b4207011e55" translate="yes" xml:space="preserve">
          <source>For syntax errors - the line number where the error occurred.</source>
          <target state="translated">構文エラーの場合-エラーが発生した行番号。</target>
        </trans-unit>
        <trans-unit id="6b624e7edfb4d519a13cd70f09d17bbd81f6bbd3" translate="yes" xml:space="preserve">
          <source>For syntax errors - the offset into the text where the error occurred.</source>
          <target state="translated">構文エラーの場合-エラーが発生したテキストへのオフセット。</target>
        </trans-unit>
        <trans-unit id="c9aff1846aa222da04f164ff51a044fe126a6c43" translate="yes" xml:space="preserve">
          <source>For syntax errors - the text where the error occurred.</source>
          <target state="translated">構文エラーの場合-エラーが発生したテキスト。</target>
        </trans-unit>
        <trans-unit id="16bafc4e77e27d861636281e2b19c7e7fd37650e" translate="yes" xml:space="preserve">
          <source>For testcase &lt;em&gt;test&lt;/em&gt;, assert that the &lt;code&gt;sys.getsizeof&lt;/code&gt; for &lt;em&gt;o&lt;/em&gt; plus the GC header size equals &lt;em&gt;size&lt;/em&gt;.</source>
          <target state="translated">テストケース&lt;em&gt;テストの&lt;/em&gt;場合、&lt;em&gt;o&lt;/em&gt;の &lt;code&gt;sys.getsizeof&lt;/code&gt; とGCヘッダーサイズの合計がsizeと等しいことをアサートし&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eedb78895083bc4249b703fbfb11d74b4c08f51f" translate="yes" xml:space="preserve">
          <source>For text encodings and bytes-to-bytes codecs, &lt;em&gt;input&lt;/em&gt; must be a bytes object or one which provides the read-only buffer interface &amp;ndash; for example, buffer objects and memory mapped files.</source>
          <target state="translated">テキストエンコーディングとバイトツーバイトコーデックの場合、&lt;em&gt;入力&lt;/em&gt;はバイトオブジェクトか、読み取り専用のバッファーインターフェイスを提供するもの（バッファーオブジェクトやメモリマップファイルなど）でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4ede7b9bd3827048a9fc41eb186f8c2ae84f6480" translate="yes" xml:space="preserve">
          <source>For text mode, a &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt; object is created, and wrapped in an &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; instance with the specified encoding, error handling behavior, and line ending(s).</source>
          <target state="translated">テキストモードの場合、&lt;a href=&quot;#bz2.BZ2File&quot;&gt; &lt;code&gt;BZ2File&lt;/code&gt; &lt;/a&gt;オブジェクトが作成され、指定されたエンコーディング、エラー処理動作、&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt;インスタンスにラップされます。</target>
        </trans-unit>
        <trans-unit id="f2fd028679f350a23785663a8ce425b5391b8814" translate="yes" xml:space="preserve">
          <source>For text mode, a &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt; object is created, and wrapped in an &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; instance with the specified encoding, error handling behavior, and line ending(s).</source>
          <target state="translated">テキストモードの場合、&lt;a href=&quot;#gzip.GzipFile&quot;&gt; &lt;code&gt;GzipFile&lt;/code&gt; &lt;/a&gt;オブジェクトが作成され、指定されたエンコーディング、エラー処理動作、および&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt;インスタンスにラップされます。</target>
        </trans-unit>
        <trans-unit id="5c05c8db2bd0aaaf25d15dba3e01523970a643f1" translate="yes" xml:space="preserve">
          <source>For text mode, a &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; object is created, and wrapped in an &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; instance with the specified encoding, error handling behavior, and line ending(s).</source>
          <target state="translated">テキストモードの場合、&lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; &lt;/a&gt;オブジェクトが作成され、指定されたエンコーディング、エラー処理動作、&lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt;インスタンスにラップされます。</target>
        </trans-unit>
        <trans-unit id="7deee04b6bb5f78a5dbf6565cdba6d3b455b142f" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;#datetime.datetime.strptime&quot;&gt;&lt;code&gt;datetime.strptime()&lt;/code&gt;&lt;/a&gt; class method, the default value is &lt;code&gt;1900-01-01T00:00:00.000&lt;/code&gt;: any components not specified in the format string will be pulled from the default value. &lt;a href=&quot;#id8&quot; id=&quot;id4&quot;&gt;4&lt;/a&gt;</source>
          <target state="translated">ため&lt;a href=&quot;#datetime.datetime.strptime&quot;&gt; &lt;code&gt;datetime.strptime()&lt;/code&gt; &lt;/a&gt;クラスメソッド、デフォルト値は &lt;code&gt;1900-01-01T00:00:00.000&lt;/code&gt; ：書式文字列で指定されていない任意の成分は、デフォルト値から引かれます。&lt;a href=&quot;#id8&quot; id=&quot;id4&quot;&gt;4&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2bb5071a479f35cf824cac2d9cf3dc01818e29a8" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;#math.ceil&quot;&gt;&lt;code&gt;ceil()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#math.floor&quot;&gt;&lt;code&gt;floor()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#math.modf&quot;&gt;&lt;code&gt;modf()&lt;/code&gt;&lt;/a&gt; functions, note that &lt;em&gt;all&lt;/em&gt; floating-point numbers of sufficiently large magnitude are exact integers. Python floats typically carry no more than 53 bits of precision (the same as the platform C double type), in which case any float &lt;em&gt;x&lt;/em&gt; with &lt;code&gt;abs(x) &amp;gt;= 2**52&lt;/code&gt; necessarily has no fractional bits.</source>
          <target state="translated">ため&lt;a href=&quot;#math.ceil&quot;&gt; &lt;code&gt;ceil()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#math.floor&quot;&gt; &lt;code&gt;floor()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#math.modf&quot;&gt; &lt;code&gt;modf()&lt;/code&gt; &lt;/a&gt;関数、なお、&lt;em&gt;全て&lt;/em&gt;十分に大きな大きさの浮動小数点数は、正確な整数です。Python floatは通常、53ビット以下の精度（プラットフォームCのdouble型と同じ &lt;code&gt;abs(x) &amp;gt;= 2**52&lt;/code&gt; 持ちます。この場合、abs（x）&amp;gt; = 2 ** 52の float &lt;em&gt;x&lt;/em&gt;は必ずしも小数ビットを持ちません。</target>
        </trans-unit>
        <trans-unit id="52f764e70635b353f2ccd83e7d601c4b5abba3dd" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;'?'&lt;/code&gt; format character, the return value is either &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;. When packing, the truth value of the argument object is used. Either 0 or 1 in the native or standard bool representation will be packed, and any non-zero value will be &lt;code&gt;True&lt;/code&gt; when unpacking.</source>
          <target state="translated">以下のための &lt;code&gt;'?'&lt;/code&gt; 形式文字の場合、戻り値は&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;です。パッキング時には、引数オブジェクトの真理値が使用されます。ネイティブまたは標準のブール表現の0または1のいずれかがパックされ、ゼロ以外の値はアンパック時に &lt;code&gt;True&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="611001d6738e1356ca1e9161015c1526eb451d76" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'d'&lt;/code&gt; and &lt;code&gt;'e'&lt;/code&gt; conversion codes, the packed representation uses the IEEE 754 binary32, binary64 or binary16 format (for &lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'d'&lt;/code&gt; or &lt;code&gt;'e'&lt;/code&gt; respectively), regardless of the floating-point format used by the platform.</source>
          <target state="translated">ための &lt;code&gt;'f'&lt;/code&gt; 、 &lt;code&gt;'d'&lt;/code&gt; および &lt;code&gt;'e'&lt;/code&gt; 変換コード、パックされた表現は、IEEE 754 binary32使用し、binary64又はbinary16フォーマット（のための &lt;code&gt;'f'&lt;/code&gt; 、 &lt;code&gt;'d'&lt;/code&gt; または &lt;code&gt;'e'&lt;/code&gt; に関係なく浮動のそれぞれ）プラットフォームで使用されるポイント形式。</target>
        </trans-unit>
        <trans-unit id="7f192f51888cd6acd09ccae9c792d0d145d044ae" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;'s'&lt;/code&gt; format character, the count is interpreted as the length of the bytes, not a repeat count like for the other format characters; for example, &lt;code&gt;'10s'&lt;/code&gt; means a single 10-byte string, while &lt;code&gt;'10c'&lt;/code&gt; means 10 characters. If a count is not given, it defaults to 1. For packing, the string is truncated or padded with null bytes as appropriate to make it fit. For unpacking, the resulting bytes object always has exactly the specified number of bytes. As a special case, &lt;code&gt;'0s'&lt;/code&gt; means a single, empty string (while &lt;code&gt;'0c'&lt;/code&gt; means 0 characters).</source>
          <target state="translated">以下のために &lt;code&gt;'s'&lt;/code&gt; フォーマット文字、カウントはバイトの長さではなく、他の形式の文字のような繰り返し回数として解釈されます。たとえば、 &lt;code&gt;'10s'&lt;/code&gt; は単一の10バイト文字列を意味し、 &lt;code&gt;'10c'&lt;/code&gt; は10文字を意味します。カウントが指定されていない場合、デフォルトは1です。パッキングの場合、文字列は、適切になるように切り捨てられるか、nullバイトが埋め込まれます。アンパックの場合、結果のbytesオブジェクトは常に指定されたバイト数になります。特殊なケースとして、 &lt;code&gt;'0s'&lt;/code&gt; は単一の空の文字列を意味します（ &lt;code&gt;'0c'&lt;/code&gt; は0文字を意味します）。</target>
        </trans-unit>
        <trans-unit id="7a57bec2e014081dae4b27453586de233679ac55" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;Document&lt;/code&gt; node, an additional keyword argument &lt;em&gt;encoding&lt;/em&gt; can be used to specify the encoding field of the XML header.</source>
          <target state="translated">以下のために &lt;code&gt;Document&lt;/code&gt; ノード、追加のキーワード引数の&lt;em&gt;符号化は、&lt;/em&gt; XMLヘッダの符号化フィールドを指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e765b069ab6f4fd670732d7dd9f9ae6b12c9e58d" translate="yes" xml:space="preserve">
          <source>For the &lt;em&gt;isolation_level&lt;/em&gt; parameter, please see the &lt;a href=&quot;#sqlite3.Connection.isolation_level&quot;&gt;&lt;code&gt;isolation_level&lt;/code&gt;&lt;/a&gt; property of &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">&lt;em&gt;ISOLATION_LEVEL&lt;/em&gt;パラメータは、以下を参照してください&lt;a href=&quot;#sqlite3.Connection.isolation_level&quot;&gt; &lt;code&gt;isolation_level&lt;/code&gt; &lt;/a&gt;の財産&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="a8ffbaaffc9a1867b68ff05863b8b09074fd8418" translate="yes" xml:space="preserve">
          <source>For the &lt;em&gt;names&lt;/em&gt; parameter, please see the description of the translation object&amp;rsquo;s &lt;a href=&quot;#gettext.NullTranslations.install&quot;&gt;&lt;code&gt;install()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">以下のために&lt;em&gt;名前の&lt;/em&gt;パラメータ、翻訳オブジェクトのの説明を参照してください&lt;a href=&quot;#gettext.NullTranslations.install&quot;&gt; &lt;code&gt;install()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="b4c0224e26f9eea1c70ca73fc7698daec9161151" translate="yes" xml:space="preserve">
          <source>For the Python events, specialized functions (see below) are called. For the C events, no action is taken.</source>
          <target state="translated">Python のイベントでは、専用の関数(下記参照)が呼び出されます。C イベントについては、何もしません。</target>
        </trans-unit>
        <trans-unit id="13289039e0f8416eb74312f3daa07466ee8be0ee" translate="yes" xml:space="preserve">
          <source>For the above Timezone constants (&lt;a href=&quot;#time.altzone&quot;&gt;&lt;code&gt;altzone&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.daylight&quot;&gt;&lt;code&gt;daylight&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#time.tzname&quot;&gt;&lt;code&gt;tzname&lt;/code&gt;&lt;/a&gt;), the value is determined by the timezone rules in effect at module load time or the last time &lt;a href=&quot;#time.tzset&quot;&gt;&lt;code&gt;tzset()&lt;/code&gt;&lt;/a&gt; is called and may be incorrect for times in the past. It is recommended to use the &lt;code&gt;tm_gmtoff&lt;/code&gt; and &lt;code&gt;tm_zone&lt;/code&gt; results from &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to obtain timezone information.</source>
          <target state="translated">上記のタイムゾーン定数（&lt;a href=&quot;#time.altzone&quot;&gt; &lt;code&gt;altzone&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#time.daylight&quot;&gt; &lt;code&gt;daylight&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#time.timezone&quot;&gt; &lt;code&gt;timezone&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#time.tzname&quot;&gt; &lt;code&gt;tzname&lt;/code&gt; &lt;/a&gt;）の場合、値はモジュールのロード時に有効なタイムゾーンルールによって決定されるか、最後に&lt;a href=&quot;#time.tzset&quot;&gt; &lt;code&gt;tzset()&lt;/code&gt; &lt;/a&gt;が呼び出されたときに決定され、過去の時間については正しくない可能性があります。タイムゾーン情報を取得するには、&lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;からの &lt;code&gt;tm_gmtoff&lt;/code&gt; および &lt;code&gt;tm_zone&lt;/code&gt; の結果を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7b9a64815701e952e36b227a62e8302ec1c91dee" translate="yes" xml:space="preserve">
          <source>For the benefit of object persistence, the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module supports the notion of a reference to an object outside the pickled data stream. Such objects are referenced by a persistent ID, which should be either a string of alphanumeric characters (for protocol 0) &lt;a href=&quot;#id11&quot; id=&quot;id6&quot;&gt;5&lt;/a&gt; or just an arbitrary object (for any newer protocol).</source>
          <target state="translated">オブジェクトの永続性のために、&lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;モジュールは、ピクルされたデータストリームの外部にあるオブジェクトへの参照の概念をサポートしています。このようなオブジェクトは、永続IDによって参照されます。永続IDは、英数字の文字列（プロトコル0の場合）&lt;a href=&quot;#id11&quot; id=&quot;id6&quot;&gt;5&lt;/a&gt;または任意のオブジェクト（新しいプロトコルの場合）のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b045188bbc955a84058e3770ed7a3666adb42d3f" translate="yes" xml:space="preserve">
          <source>For the benefits of packaging tool authors and users seeking a deeper understanding of the details of the current packaging and distribution system, the legacy &lt;a href=&quot;#module-distutils&quot;&gt;&lt;code&gt;distutils&lt;/code&gt;&lt;/a&gt; based user documentation and API reference remain available:</source>
          <target state="translated">現在のパッケージングおよび配布システムの詳細をより深く理解しようとしているパッケージングツールの作成者とユーザーのために、従来の&lt;a href=&quot;#module-distutils&quot;&gt; &lt;code&gt;distutils&lt;/code&gt; &lt;/a&gt;ベースのユーザードキュメントとAPIリファレンスを引き続き利用できます。</target>
        </trans-unit>
        <trans-unit id="1462943ac090bb5ad3073f88b1c8562ef1b6a082" translate="yes" xml:space="preserve">
          <source>For the built-in types supporting &lt;a href=&quot;#round&quot;&gt;&lt;code&gt;round()&lt;/code&gt;&lt;/a&gt;, values are rounded to the closest multiple of 10 to the power minus &lt;em&gt;ndigits&lt;/em&gt;; if two multiples are equally close, rounding is done toward the even choice (so, for example, both &lt;code&gt;round(0.5)&lt;/code&gt; and &lt;code&gt;round(-0.5)&lt;/code&gt; are &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;round(1.5)&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;). Any integer value is valid for &lt;em&gt;ndigits&lt;/em&gt; (positive, zero, or negative). The return value is an integer if &lt;em&gt;ndigits&lt;/em&gt; is omitted or &lt;code&gt;None&lt;/code&gt;. Otherwise the return value has the same type as &lt;em&gt;number&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#round&quot;&gt; &lt;code&gt;round()&lt;/code&gt; を&lt;/a&gt;サポートする組み込み型の場合、値は10の累乗から&lt;em&gt;ndigits&lt;/em&gt;を引いた最も近い倍数に丸められます。2つの倍数が等しく近い場合、丸めは偶数の選択に向かって行われます（たとえば、 &lt;code&gt;round(0.5)&lt;/code&gt; と &lt;code&gt;round(-0.5)&lt;/code&gt; は両方とも &lt;code&gt;0&lt;/code&gt; であり、 &lt;code&gt;round(1.5)&lt;/code&gt; は &lt;code&gt;2&lt;/code&gt; です）。任意の整数値が&lt;em&gt;n桁&lt;/em&gt;（正、ゼロ、または負）に有効です。&lt;em&gt;ndigits&lt;/em&gt;が省略されている場合、または &lt;code&gt;None&lt;/code&gt; の場合、戻り値は整数です。それ以外の場合、戻り値の型は&lt;em&gt;number&lt;/em&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="73a23e456670e90cd6606464d13a857da8671966" translate="yes" xml:space="preserve">
          <source>For the following attributes, see the corresponding documentation of the &lt;a href=&quot;#ipaddress.IPv4Address&quot;&gt;&lt;code&gt;IPv4Address&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">以下の属性については、&lt;a href=&quot;#ipaddress.IPv4Address&quot;&gt; &lt;code&gt;IPv4Address&lt;/code&gt; &lt;/a&gt;クラスの対応するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e2be20c20d73d48c96e4a903fa7ca4c398ed3e7e" translate="yes" xml:space="preserve">
          <source>For the majority of new code, &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; are strongly recommended, since &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; break some semantic promises of an enumeration (by being comparable to integers, and thus by transitivity to other unrelated enumerations). &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; should be used only in cases where &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; will not do; for example, when integer constants are replaced with enumerations, or for interoperability with other systems.</source>
          <target state="translated">新しいコードの大部分では、&lt;a href=&quot;#enum.IntEnum&quot;&gt; &lt;code&gt;IntEnum&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; が&lt;/a&gt;列挙型のいくつかのセマンティックな約束を破るので（整数に匹敵することにより、したがって他の無関係な列挙型への推移性により）、&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#enum.Flag&quot;&gt; &lt;code&gt;Flag&lt;/code&gt; &lt;/a&gt;を強くお勧めします。&lt;a href=&quot;#enum.IntEnum&quot;&gt; &lt;code&gt;IntEnum&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#enum.Flag&quot;&gt; &lt;code&gt;Flag&lt;/code&gt; &lt;/a&gt;が機能しない場合にのみ使用してください。たとえば、整数定数が列挙型に置き換えられたとき、または他のシステムとの相互運用性のために。</target>
        </trans-unit>
        <trans-unit id="71b157ee65429737704fc6d86dc2ce45635ad80d" translate="yes" xml:space="preserve">
          <source>For the same reason, handling of format strings containing Unicode code points that can&amp;rsquo;t be represented in the charset of the current locale is also platform-dependent. On some platforms such code points are preserved intact in the output, while on others &lt;code&gt;strftime&lt;/code&gt; may raise &lt;a href=&quot;exceptions#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt; or return an empty string instead.</source>
          <target state="translated">同じ理由で、現在のロケールの文字セットでは表現できないUnicodeコードポイントを含むフォーマット文字列の処理もプラットフォームに依存します。一部のプラットフォームでは、このようなコードポイントはそのまま出力に保持されますが、他のプラットフォームでは、 &lt;code&gt;strftime&lt;/code&gt; が&lt;a href=&quot;exceptions#UnicodeError&quot;&gt; &lt;code&gt;UnicodeError&lt;/code&gt; を発生さ&lt;/a&gt;せるか、代わりに空の文字列を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="1a73815f89f761330d046832365445a6b98cdffe" translate="yes" xml:space="preserve">
          <source>For the simplest code, use the &lt;a href=&quot;#pickle.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pickle.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">最も単純なコードでは、&lt;a href=&quot;#pickle.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#pickle.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;関数とload（）関数を使用します。</target>
        </trans-unit>
        <trans-unit id="f1e544ac7100874cff048477249bb3ab3c46c877" translate="yes" xml:space="preserve">
          <source>For the string argument, abbreviations can be used for any key names, as long as the abbreviation is unambiguous.</source>
          <target state="translated">文字列引数では、省略形が曖昧でない限り、任意のキー名に省略形を使用することができます。</target>
        </trans-unit>
        <trans-unit id="58f6887a34bff030cddfd82bd93f8fa6b82b32ef" translate="yes" xml:space="preserve">
          <source>For the subset of &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; format strings currently supported by &lt;a href=&quot;#memoryview.tolist&quot;&gt;&lt;code&gt;tolist()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;w&lt;/code&gt; are equal if &lt;code&gt;v.tolist() == w.tolist()&lt;/code&gt;:</source>
          <target state="translated">現在&lt;a href=&quot;#memoryview.tolist&quot;&gt; &lt;code&gt;tolist()&lt;/code&gt; &lt;/a&gt;でサポートされている&lt;a href=&quot;struct#module-struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt;フォーマット文字列のサブセットでは、 &lt;code&gt;v.tolist() == w.tolist()&lt;/code&gt; 場合、 &lt;code&gt;v&lt;/code&gt; と &lt;code&gt;w&lt;/code&gt; は等しくなります。</target>
        </trans-unit>
        <trans-unit id="e73a0afbcd4ef09c3f17e9fa247b96c32dcb9705" translate="yes" xml:space="preserve">
          <source>For the time being this module is intended to be called as a script. However it is possible to import it into an IDE and use the function &lt;a href=&quot;#tabnanny.check&quot;&gt;&lt;code&gt;check()&lt;/code&gt;&lt;/a&gt; described below.</source>
          <target state="translated">当分の間、このモジュールはスクリプトとして呼び出されることを意図しています。ただし、それをIDEにインポートして、以下で説明する関数&lt;a href=&quot;#tabnanny.check&quot;&gt; &lt;code&gt;check()&lt;/code&gt; &lt;/a&gt;を使用することは可能です。</target>
        </trans-unit>
        <trans-unit id="3ca2089e1b1b8df1c2f032b1f3536ad34cfdfa0f" translate="yes" xml:space="preserve">
          <source>For these cases, the &lt;a href=&quot;#ctypes.cast&quot;&gt;&lt;code&gt;cast()&lt;/code&gt;&lt;/a&gt; function is handy.</source>
          <target state="translated">これらのケースでは、&lt;a href=&quot;#ctypes.cast&quot;&gt; &lt;code&gt;cast()&lt;/code&gt; &lt;/a&gt;関数が便利です。</target>
        </trans-unit>
        <trans-unit id="38474aedf079e8a0abf4fea4dc3de7267bfeb1eb" translate="yes" xml:space="preserve">
          <source>For these objects, only the interfaces are relevant; they are normally not instantiated by the application itself. Since Python does not have an explicit notion of interface, they are formally introduced as classes, but applications may use implementations which do not inherit from the provided classes. The &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.Locator&quot;&gt;&lt;code&gt;Locator&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;AttributesNS&lt;/code&gt;, and &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt; interfaces are defined in the module &lt;a href=&quot;xml.sax.reader#module-xml.sax.xmlreader&quot;&gt;&lt;code&gt;xml.sax.xmlreader&lt;/code&gt;&lt;/a&gt;. The handler interfaces are defined in &lt;a href=&quot;xml.sax.handler#module-xml.sax.handler&quot;&gt;&lt;code&gt;xml.sax.handler&lt;/code&gt;&lt;/a&gt;. For convenience, &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt; (which is often instantiated directly) and the handler classes are also available from &lt;a href=&quot;#module-xml.sax&quot;&gt;&lt;code&gt;xml.sax&lt;/code&gt;&lt;/a&gt;. These interfaces are described below.</source>
          <target state="translated">これらのオブジェクトでは、インターフェースのみが関連します。通常、アプリケーション自体によってインスタンス化されることはありません。Pythonにはインターフェースの明示的な概念がないため、正式にはクラスとして導入されますが、アプリケーションでは、提供されたクラスを継承しない実装を使用できます。&lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt; &lt;code&gt;InputSource&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.Locator&quot;&gt; &lt;code&gt;Locator&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Attributes&lt;/code&gt; 、 &lt;code&gt;AttributesNS&lt;/code&gt; 、及び&lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt; &lt;code&gt;XMLReader&lt;/code&gt; の&lt;/a&gt;インターフェイスは、モジュールで定義されて&lt;a href=&quot;xml.sax.reader#module-xml.sax.xmlreader&quot;&gt; &lt;code&gt;xml.sax.xmlreader&lt;/code&gt; &lt;/a&gt;。ハンドラーインターフェースは&lt;a href=&quot;xml.sax.handler#module-xml.sax.handler&quot;&gt; &lt;code&gt;xml.sax.handler&lt;/code&gt; で&lt;/a&gt;定義されています。便宜上、&lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt; &lt;code&gt;InputSource&lt;/code&gt; &lt;/a&gt;（多くの場合、直接インスタンス化されます）とハンドラークラスは&lt;a href=&quot;#module-xml.sax&quot;&gt; &lt;code&gt;xml.sax&lt;/code&gt; &lt;/a&gt;からも利用できます。。これらのインターフェースについて、以下で説明します。</target>
        </trans-unit>
        <trans-unit id="ee46acf978b898ca00a8f81ccc140323b27a7cf5" translate="yes" xml:space="preserve">
          <source>For this reason, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; also supports a notion of &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; reporting flags specific to &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; support, via this function:</source>
          <target state="translated">このため、&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; のは&lt;/a&gt;またの概念をサポート&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; の&lt;/a&gt;に報告フラグの特定の&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;この機能によって、サポートを：</target>
        </trans-unit>
        <trans-unit id="c13f2c1afd203047a3facf9de7c005252d73b85c" translate="yes" xml:space="preserve">
          <source>For this reason, &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; provides a &lt;a href=&quot;#unittest.FunctionTestCase&quot;&gt;&lt;code&gt;FunctionTestCase&lt;/code&gt;&lt;/a&gt; class. This subclass of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; can be used to wrap an existing test function. Set-up and tear-down functions can also be provided.</source>
          <target state="translated">このため、&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; に&lt;/a&gt;は&lt;a href=&quot;#unittest.FunctionTestCase&quot;&gt; &lt;code&gt;FunctionTestCase&lt;/code&gt; &lt;/a&gt;クラスが用意されています。&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; の&lt;/a&gt;このサブクラスは、既存のテスト関数をラップするために使用できます。セットアップおよびティアダウン機能も提供できます。</target>
        </trans-unit>
        <trans-unit id="65a7e5d1693de8c1b6156055b18a67eb702cc5ca" translate="yes" xml:space="preserve">
          <source>For this reason, you may want to control what gets unpickled by customizing &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt;&lt;code&gt;Unpickler.find_class()&lt;/code&gt;&lt;/a&gt;. Unlike its name suggests, &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt;&lt;code&gt;Unpickler.find_class()&lt;/code&gt;&lt;/a&gt; is called whenever a global (i.e., a class or a function) is requested. Thus it is possible to either completely forbid globals or restrict them to a safe subset.</source>
          <target state="translated">このため、&lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt; &lt;code&gt;Unpickler.find_class()&lt;/code&gt; を&lt;/a&gt;カスタマイズして、何がunpickされるかを制御したい場合があります。その名前が示すのとは異なり、&lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt; &lt;code&gt;Unpickler.find_class()&lt;/code&gt; &lt;/a&gt;は、グローバル（つまり、クラスまたは関数）が要求されるたびに呼び出されます。したがって、グローバルを完全に禁止するか、グローバルを安全なサブセットに制限することができます。</target>
        </trans-unit>
        <trans-unit id="e17084e55d94584dbb25c342418d6aac7734b582" translate="yes" xml:space="preserve">
          <source>For those cases, it is possible to subclass from the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; class and implement a &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt;&lt;code&gt;reducer_override()&lt;/code&gt;&lt;/a&gt; method. This method can return an arbitrary reduction tuple (see &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt;). It can alternatively return &lt;code&gt;NotImplemented&lt;/code&gt; to fallback to the traditional behavior.</source>
          <target state="translated">これらの場合、&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;クラスからサブクラス化し、&lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt; &lt;code&gt;reducer_override()&lt;/code&gt; &lt;/a&gt;メソッドを実装することが可能です。このメソッドは、任意の縮&lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt;タプルを返すことができます（__reduce __（）を参照）。あるいは、 &lt;code&gt;NotImplemented&lt;/code&gt; を返して、従来の動作にフォールバックすることもできます。</target>
        </trans-unit>
        <trans-unit id="c6d2305fa8501efef901d74c92da8478ba9fafef" translate="yes" xml:space="preserve">
          <source>For those who want to manage their own token length, you can explicitly specify how much randomness is used for tokens by giving an &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; argument to the various &lt;code&gt;token_*&lt;/code&gt; functions. That argument is taken as the number of bytes of randomness to use.</source>
          <target state="translated">独自のトークン長を管理したい場合は、さまざまな &lt;code&gt;token_*&lt;/code&gt; 関数に&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;引数を与えることにより、トークンに使用するランダム性の量を明示的に指定できます。その引数は、使用するランダム性のバイト数と見なされます。</target>
        </trans-unit>
        <trans-unit id="bab28f84b72c604f4046046ab996c3eb0c3e68fd" translate="yes" xml:space="preserve">
          <source>For top-level classes, None. For nested classes, the parent.</source>
          <target state="translated">トップレベル・クラスの場合は、None。入れ子になったクラスの場合は、親。</target>
        </trans-unit>
        <trans-unit id="d182afd5a541d26e3f1ed845af8ddb203dc4413e" translate="yes" xml:space="preserve">
          <source>For top-level functions, None. For nested functions, the parent.</source>
          <target state="translated">トップレベルの関数の場合は、None。入れ子になった関数の場合は、親。</target>
        </trans-unit>
        <trans-unit id="6a78b493fd8c37102ee3eff14bfd254085325210" translate="yes" xml:space="preserve">
          <source>For use with &lt;code&gt;BTPROTO_HCI&lt;/code&gt;. &lt;a href=&quot;#socket.HCI_FILTER&quot;&gt;&lt;code&gt;HCI_FILTER&lt;/code&gt;&lt;/a&gt; is not available for NetBSD or DragonFlyBSD. &lt;a href=&quot;#socket.HCI_TIME_STAMP&quot;&gt;&lt;code&gt;HCI_TIME_STAMP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socket.HCI_DATA_DIR&quot;&gt;&lt;code&gt;HCI_DATA_DIR&lt;/code&gt;&lt;/a&gt; are not available for FreeBSD, NetBSD, or DragonFlyBSD.</source>
          <target state="translated">&lt;code&gt;BTPROTO_HCI&lt;/code&gt; で使用します。&lt;a href=&quot;#socket.HCI_FILTER&quot;&gt; &lt;code&gt;HCI_FILTER&lt;/code&gt; &lt;/a&gt;は、NetBSDまたはDragonFlyBSDでは使用できません。&lt;a href=&quot;#socket.HCI_TIME_STAMP&quot;&gt; &lt;code&gt;HCI_TIME_STAMP&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#socket.HCI_DATA_DIR&quot;&gt; &lt;code&gt;HCI_DATA_DIR&lt;/code&gt; &lt;/a&gt;は、FreeBSD、NetBSD、またはDragonFlyBSDでは使用できません。</target>
        </trans-unit>
        <trans-unit id="ed2b5ac8be7dacc4312f352c9b986cd446f431b3" translate="yes" xml:space="preserve">
          <source>For variable-keyword arguments (&lt;code&gt;**kwargs&lt;/code&gt;) the default is an empty dict.</source>
          <target state="translated">可変キーワード引数（ &lt;code&gt;**kwargs&lt;/code&gt; ）の場合、デフォルトは空の辞書です。</target>
        </trans-unit>
        <trans-unit id="3dc4384699ee9666f410852cc46018f94c9db172" translate="yes" xml:space="preserve">
          <source>For variable-positional arguments (&lt;code&gt;*args&lt;/code&gt;) the default is an empty tuple.</source>
          <target state="translated">可変位置引数（ &lt;code&gt;*args&lt;/code&gt; ）の場合、デフォルトは空のタプルです。</target>
        </trans-unit>
        <trans-unit id="b7c7653bbef7bfc03abec2d286867e64e19e8e90" translate="yes" xml:space="preserve">
          <source>For whole format strings, use &lt;a href=&quot;#locale.format_string&quot;&gt;&lt;code&gt;format_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">書式文字列全体については、&lt;a href=&quot;#locale.format_string&quot;&gt; &lt;code&gt;format_string()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="04d9e9125490dc0b44c13e9f2f792a0f9450932b" translate="yes" xml:space="preserve">
          <source>Force as many objects as possible to be collected. This is needed because timely deallocation is not guaranteed by the garbage collector. This means that &lt;code&gt;__del__&lt;/code&gt; methods may be called later than expected and weakrefs may remain alive for longer than expected.</source>
          <target state="translated">できるだけ多くのオブジェクトを強制的に収集します。これは、ガベージコレクタによってタイムリーな割り当て解除が保証されないために必要です。つまり、 &lt;code&gt;__del__&lt;/code&gt; メソッドが予想よりも遅く呼び出され、weakrefが予想よりも長く存続する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6a939f545eb3ce830f616a1a28bc1a63e0fe5ed3" translate="yes" xml:space="preserve">
          <source>Force buffered data to be transmitted to the client. It&amp;rsquo;s okay if this method is a no-op (i.e., if &lt;a href=&quot;#wsgiref.handlers.BaseHandler._write&quot;&gt;&lt;code&gt;_write()&lt;/code&gt;&lt;/a&gt; actually sends the data).</source>
          <target state="translated">バッファリングされたデータを強制的にクライアントに送信します。このメソッドが何もしない場合（つまり、&lt;a href=&quot;#wsgiref.handlers.BaseHandler._write&quot;&gt; &lt;code&gt;_write()&lt;/code&gt; が&lt;/a&gt;実際にデータを送信する場合）は問題ありません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
