<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="d7ea75922f47bd0999a4871991963c1f8c3f0ce1" translate="yes" xml:space="preserve">
          <source>This support allows immutable sequences, such as &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; instances, to be used as &lt;a href=&quot;#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; keys and stored in &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">この支持体のような、不変配列を可能にする&lt;a href=&quot;#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;として使用する、インスタンス&lt;a href=&quot;#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;キーとに格納されている&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; の&lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="1e24218daa333721903c467af431435be2cb4830" translate="yes" xml:space="preserve">
          <source>This table contains all events raised by &lt;a href=&quot;sys#sys.audit&quot;&gt;&lt;code&gt;sys.audit()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PySys_Audit&quot;&gt;&lt;code&gt;PySys_Audit()&lt;/code&gt;&lt;/a&gt; calls throughout the CPython runtime and the standard library. These calls were added in 3.8.0 or later.</source>
          <target state="translated">このテーブルには、CPythonランタイムおよび標準ライブラリ全体で&lt;a href=&quot;sys#sys.audit&quot;&gt; &lt;code&gt;sys.audit()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PySys_Audit&quot;&gt; &lt;code&gt;PySys_Audit()&lt;/code&gt; &lt;/a&gt;呼び出しによって発生したすべてのイベントが含まれています。これらの呼び出しは3.8.0以降で追加されました。</target>
        </trans-unit>
        <trans-unit id="f02611c8b86086918f9b0d8d6fba08360ccbf3bd" translate="yes" xml:space="preserve">
          <source>This table contains all events raised by &lt;a href=&quot;sys#sys.audit&quot;&gt;&lt;code&gt;sys.audit()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/c-api/sys.html#c.PySys_Audit&quot;&gt;&lt;code&gt;PySys_Audit()&lt;/code&gt;&lt;/a&gt; calls throughout the CPython runtime and the standard library. These calls were added in 3.8.0 or later.</source>
          <target state="translated">このテーブルには、CPythonランタイムおよび標準ライブラリ全体で&lt;a href=&quot;sys#sys.audit&quot;&gt; &lt;code&gt;sys.audit()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.9/c-api/sys.html#c.PySys_Audit&quot;&gt; &lt;code&gt;PySys_Audit()&lt;/code&gt; &lt;/a&gt;呼び出しによって発生したすべてのイベントが含まれています。これらの呼び出しは3.8.0以降で追加されました。</target>
        </trans-unit>
        <trans-unit id="8ff575b6bfca960b011d17b2cb16cbed1b2362fb" translate="yes" xml:space="preserve">
          <source>This table lists the bitwise operations sorted in ascending priority:</source>
          <target state="translated">この表は、優先度の高い順にソートされたビット演算の一覧です。</target>
        </trans-unit>
        <trans-unit id="ad37e36bc7aa1e48e2a868ce67d705d178a74a99" translate="yes" xml:space="preserve">
          <source>This table lists the sequence operations sorted in ascending priority. In the table, &lt;em&gt;s&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt; are sequences of the same type, &lt;em&gt;n&lt;/em&gt;, &lt;em&gt;i&lt;/em&gt;, &lt;em&gt;j&lt;/em&gt; and &lt;em&gt;k&lt;/em&gt; are integers and &lt;em&gt;x&lt;/em&gt; is an arbitrary object that meets any type and value restrictions imposed by &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">この表は、昇順でソートされたシーケンス操作を示しています。この表では、&lt;em&gt;s&lt;/em&gt;と&lt;em&gt;t&lt;/em&gt;は同じタイプのシーケンスであり、&lt;em&gt;n&lt;/em&gt;、&lt;em&gt;i&lt;/em&gt;、&lt;em&gt;j&lt;/em&gt;、および&lt;em&gt;k&lt;/em&gt;は整数であり、&lt;em&gt;x&lt;/em&gt;は&lt;em&gt;s&lt;/em&gt;によって課されるすべてのタイプと値の制限を満たす任意のオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="a2aefacd102c9e6656a62a4fcbeeefcf37daf49c" translate="yes" xml:space="preserve">
          <source>This table shows how abstract operations correspond to operator symbols in the Python syntax and the functions in the &lt;a href=&quot;#module-operator&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">この表は、抽象演算がPython構文の演算子記号と&lt;a href=&quot;#module-operator&quot;&gt; &lt;code&gt;operator&lt;/code&gt; &lt;/a&gt;モジュールの関数にどのように対応するかを示しています。</target>
        </trans-unit>
        <trans-unit id="b1dd58529875498466717de342c9a860fc1ad5df" translate="yes" xml:space="preserve">
          <source>This table summarizes the comparison operations:</source>
          <target state="translated">この表は、比較操作をまとめたものです。</target>
        </trans-unit>
        <trans-unit id="0b8f0910cff485b75d8a8a9bb0bef70a5b8fa95c" translate="yes" xml:space="preserve">
          <source>This takes a binary file for reading a pickle data stream.</source>
          <target state="translated">これは、ピクルスのデータストリームを読み込むためのバイナリファイルを取ります。</target>
        </trans-unit>
        <trans-unit id="900a01a65ca258d685a4183dcedf4ab95f1befd2" translate="yes" xml:space="preserve">
          <source>This takes a binary file for writing a pickle data stream.</source>
          <target state="translated">これは、ピクルスのデータストリームを書き込むためのバイナリファイルを取ります。</target>
        </trans-unit>
        <trans-unit id="86e66be62941acf0508da30f994af1c9b7a508e7" translate="yes" xml:space="preserve">
          <source>This tool adds flexibility to existing functions or classes whose output is hardwired to stdout.</source>
          <target state="translated">このツールは、出力が標準出力にハードワイヤードされている既存の関数やクラスに柔軟性を追加します。</target>
        </trans-unit>
        <trans-unit id="0a41260cd31015b90715324793e49b3b05f1940e" translate="yes" xml:space="preserve">
          <source>This type can be used as follows:</source>
          <target state="translated">このタイプは以下のように使用できます。</target>
        </trans-unit>
        <trans-unit id="4ee65f84be1d10480bc08fe90f21eed2ddbba4bd" translate="yes" xml:space="preserve">
          <source>This type describes the resource names passed into the various functions in this package. This is defined as &lt;code&gt;Union[str, os.PathLike]&lt;/code&gt;.</source>
          <target state="translated">このタイプは、このパッケージのさまざまな関数に渡されるリソース名を示します。これは &lt;code&gt;Union[str, os.PathLike]&lt;/code&gt; として定義されています。</target>
        </trans-unit>
        <trans-unit id="9a19b7eb98d6488f6aac8865d83dc8ae338e23ad" translate="yes" xml:space="preserve">
          <source>This type may be used as follows:</source>
          <target state="translated">このタイプは以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="b973b124bff356b4f78d8fc39b8c99c1b87b5238" translate="yes" xml:space="preserve">
          <source>This type represents the types &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt; of byte sequences.</source>
          <target state="translated">このタイプは、バイトシーケンスのタイプ&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;stdtypes#memoryview&quot;&gt; &lt;code&gt;memoryview&lt;/code&gt; を表し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cc3a76bb6dedb7cdbe1024f060da03de3f0dba7d" translate="yes" xml:space="preserve">
          <source>This type represents the types &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このタイプは、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;、バイト&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;stdtypes#memoryview&quot;&gt; &lt;code&gt;memoryview&lt;/code&gt; &lt;/a&gt;ビューのタイプを表します。</target>
        </trans-unit>
        <trans-unit id="e4ac703cec9ee3e03481b97675e769369d5ba849" translate="yes" xml:space="preserve">
          <source>This uses datagrams, which are discrete packets of information that may arrive out of order or be lost while in transit. The parameters are the same as for &lt;a href=&quot;#socketserver.TCPServer&quot;&gt;&lt;code&gt;TCPServer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、データグラムを使用します。データグラムは、順不同で到着したり、転送中に失われたりする可能性がある情報の個別のパケットです。パラメータは&lt;a href=&quot;#socketserver.TCPServer&quot;&gt; &lt;code&gt;TCPServer&lt;/code&gt; &lt;/a&gt;の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="56aa8f5d34f966fb99b842edc763ce5f7f477da2" translate="yes" xml:space="preserve">
          <source>This uses the Internet TCP protocol, which provides for continuous streams of data between the client and server. If &lt;em&gt;bind_and_activate&lt;/em&gt; is true, the constructor automatically attempts to invoke &lt;a href=&quot;#socketserver.BaseServer.server_bind&quot;&gt;&lt;code&gt;server_bind()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socketserver.BaseServer.server_activate&quot;&gt;&lt;code&gt;server_activate()&lt;/code&gt;&lt;/a&gt;. The other parameters are passed to the &lt;a href=&quot;#socketserver.BaseServer&quot;&gt;&lt;code&gt;BaseServer&lt;/code&gt;&lt;/a&gt; base class.</source>
          <target state="translated">これは、クライアントとサーバー間のデータの連続的なストリームを提供するインターネットTCPプロトコルを使用します。場合&lt;em&gt;bind_and_activateが&lt;/em&gt;真である、コンストラクタは自動的に起動しようとする&lt;a href=&quot;#socketserver.BaseServer.server_bind&quot;&gt; &lt;code&gt;server_bind()&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;#socketserver.BaseServer.server_activate&quot;&gt; &lt;code&gt;server_activate()&lt;/code&gt; &lt;/a&gt;。その他のパラメーターは、&lt;a href=&quot;#socketserver.BaseServer&quot;&gt; &lt;code&gt;BaseServer&lt;/code&gt; &lt;/a&gt;基本クラスに渡されます。</target>
        </trans-unit>
        <trans-unit id="28cf12232e0ad7f17ee9f0ae6d9c93eb3395bad0" translate="yes" xml:space="preserve">
          <source>This uses the entry&amp;rsquo;s name: directories should always end with &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">これはエントリの名前を使用します。ディレクトリは常に &lt;code&gt;/&lt;/code&gt; で終わる必要があります。</target>
        </trans-unit>
        <trans-unit id="a1b2decf1b76038b0a4989697f74a8b441227dc0" translate="yes" xml:space="preserve">
          <source>This utility method may call &lt;a href=&quot;#threading.Condition.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; repeatedly until the predicate is satisfied, or until a timeout occurs. The return value is the last return value of the predicate and will evaluate to &lt;code&gt;False&lt;/code&gt; if the method timed out.</source>
          <target state="translated">このユーティリティメソッドは、述語が満たされるまで、またはタイムアウトが発生するまで、繰り返し&lt;a href=&quot;#threading.Condition.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt;を呼び出すことができます。戻り値は述語の最後の戻り値であり、メソッドがタイムアウトした場合は &lt;code&gt;False&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="3dba7730209902073e9f1027bf8339c611419fa6" translate="yes" xml:space="preserve">
          <source>This value is guaranteed by POSIX to be at least 512.</source>
          <target state="translated">この値はPOSIXで512以上であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="461cfb21d5f19ff778807be8dac3274bf7b6a8f6" translate="yes" xml:space="preserve">
          <source>This value is initially set based on the value of the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;pycache_prefix=PATH&lt;/code&gt; command-line option or the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt;&lt;/a&gt; environment variable (command-line takes precedence). If neither are set, it is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">この値は、最初は&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;pycache_prefix=PATH&lt;/code&gt; コマンドラインオプションまたは&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt; &lt;/a&gt;環境変数の値に基づいて設定されます（コマンドラインが優先されます）。どちらも設定されていない場合は、 &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9e7b218744870e9be21539cb53c8232f7dfdecba" translate="yes" xml:space="preserve">
          <source>This value is initially set based on the value of the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;pycache_prefix=PATH&lt;/code&gt; command-line option or the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-7&quot;&gt;&lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt;&lt;/a&gt; environment variable (command-line takes precedence). If neither are set, it is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">この値は、最初は&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;pycache_prefix=PATH&lt;/code&gt; コマンドラインオプションまたは&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-7&quot;&gt; &lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt; &lt;/a&gt;環境変数の値に基づいて設定されます（コマンドラインが優先されます）。どちらも設定されていない場合は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c5cb6aae01c156404e71b59a7cc16a2897739ebe" translate="yes" xml:space="preserve">
          <source>This visitor calls &lt;a href=&quot;#ast.NodeVisitor.visit&quot;&gt;&lt;code&gt;visit()&lt;/code&gt;&lt;/a&gt; on all children of the node.</source>
          <target state="translated">このビジターは、ノードのすべての子で&lt;a href=&quot;#ast.NodeVisitor.visit&quot;&gt; &lt;code&gt;visit()&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="48d16e3abf4349547e65c79bfe2cd30b3ecca80f" translate="yes" xml:space="preserve">
          <source>This watcher is used by default.</source>
          <target state="translated">このウォッチャーはデフォルトで使用されています。</target>
        </trans-unit>
        <trans-unit id="c18d35e8fcbe18d32af66e12f7c871cec83985e6" translate="yes" xml:space="preserve">
          <source>This way, you can let &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; do the job of calling the appropriate function after argument parsing is complete. Associating functions with actions like this is typically the easiest way to handle the different actions for each of your subparsers. However, if it is necessary to check the name of the subparser that was invoked, the &lt;code&gt;dest&lt;/code&gt; keyword argument to the &lt;a href=&quot;#argparse.ArgumentParser.add_subparsers&quot;&gt;&lt;code&gt;add_subparsers()&lt;/code&gt;&lt;/a&gt; call will work:</source>
          <target state="translated">このようにして、引数の解析が完了した後で、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;に適切な関数を呼び出させることができます。このようなアクションに関数を関連付けることは、通常、各サブパーサーのさまざまなアクションを処理する最も簡単な方法です。ただし、呼び出されたサブパーサーの名前を確認する必要がある場合は、&lt;a href=&quot;#argparse.ArgumentParser.add_subparsers&quot;&gt; &lt;code&gt;add_subparsers()&lt;/code&gt; &lt;/a&gt;呼び出しの &lt;code&gt;dest&lt;/code&gt; キーワード引数が機能します。</target>
        </trans-unit>
        <trans-unit id="e4e3194f441141c309638c96c8e53e0bd92fa3ad" translate="yes" xml:space="preserve">
          <source>This way, you can use date/timestamps from Python without any additional fiddling in most cases. The format of the adapters is also compatible with the experimental SQLite date/time functions.</source>
          <target state="translated">この方法では、ほとんどの場合、Pythonからの日付/時刻スタンプを追加でいじることなく使用することができます。アダプタのフォーマットは、実験的な SQLite の日付/時刻関数と互換性があります。</target>
        </trans-unit>
        <trans-unit id="5630aa81c7c661cc3164234f583e1b2ab4ae528a" translate="yes" xml:space="preserve">
          <source>This widget accepts the following specific option:</source>
          <target state="translated">このウィジェットは、以下の特定のオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="b7516b8e7c43a47e302154f3f68de21c415616f8" translate="yes" xml:space="preserve">
          <source>This widget accepts the following specific options:</source>
          <target state="translated">このウィジェットは、以下の特定のオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="52f8a705e29799639a562bd8ad8470b5b2529355" translate="yes" xml:space="preserve">
          <source>This widget generates a &lt;strong&gt;&amp;lt;&amp;lt;NotebookTabChanged&amp;gt;&amp;gt;&lt;/strong&gt; virtual event after a new tab is selected.</source>
          <target state="translated">このウィジェットは、新しいタブが選択された後に&lt;strong&gt;&amp;lt;&amp;lt; NotebookTabChanged &amp;gt;&amp;gt;&lt;/strong&gt;仮想イベントを生成します。</target>
        </trans-unit>
        <trans-unit id="583cc459c26656b6f5fa15adcf419a55eb1a8ea4" translate="yes" xml:space="preserve">
          <source>This widget has neither specific options nor specific methods, besides the ones inherited from &lt;code&gt;ttk.Widget&lt;/code&gt;.</source>
          <target state="translated">このウィジェットには、 &lt;code&gt;ttk.Widget&lt;/code&gt; から継承されたもの以外に、特定のオプションも特定のメソッドもありません。</target>
        </trans-unit>
        <trans-unit id="cc6727990ae2f38c8adc40d38ee32c2f9a8cccff" translate="yes" xml:space="preserve">
          <source>This widget supports only &amp;ldquo;southeast&amp;rdquo; resizing.</source>
          <target state="translated">このウィジェットは、「南東」のサイズ変更のみをサポートします。</target>
        </trans-unit>
        <trans-unit id="893091dadd2289a375b8c02352c7b0621886804a" translate="yes" xml:space="preserve">
          <source>This will add a header that looks like</source>
          <target state="translated">これにより、次のようなヘッダーが追加されます。</target>
        </trans-unit>
        <trans-unit id="f14e86fc21e10a9d916560d64ebdcc9da48c2735" translate="yes" xml:space="preserve">
          <source>This will add to the package&amp;rsquo;s &lt;code&gt;__path__&lt;/code&gt; all subdirectories of directories on &lt;code&gt;sys.path&lt;/code&gt; named after the package. This is useful if one wants to distribute different parts of a single logical package as multiple directories.</source>
          <target state="translated">これにより、パッケージの &lt;code&gt;__path__&lt;/code&gt; に、パッケージにちなんで名付けられた &lt;code&gt;sys.path&lt;/code&gt; 上のディレクトリのすべてのサブディレクトリが追加されます。これは、単一の論理パッケージのさまざまな部分を複数のディレクトリとして配布する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fb6d4ec5dcc38b1ced4593b66a2139b238f95cf3" translate="yes" xml:space="preserve">
          <source>This will be &lt;code&gt;&quot;SimpleHTTP/&quot; + __version__&lt;/code&gt;, where &lt;code&gt;__version__&lt;/code&gt; is defined at the module level.</source>
          <target state="translated">これは &lt;code&gt;&quot;SimpleHTTP/&quot; + __version__&lt;/code&gt; 、ここで &lt;code&gt;__version__&lt;/code&gt; はモジュールレベルで定義されます。</target>
        </trans-unit>
        <trans-unit id="7a74e2ffba13721aff2e34d74a03a08eb350d82d" translate="yes" xml:space="preserve">
          <source>This will copy everything except &lt;code&gt;.pyc&lt;/code&gt; files and files or directories whose name starts with &lt;code&gt;tmp&lt;/code&gt;.</source>
          <target state="translated">これは、名前が &lt;code&gt;tmp&lt;/code&gt; で始まる &lt;code&gt;.pyc&lt;/code&gt; ファイルおよびファイルまたはディレクトリを除くすべてをコピーします。</target>
        </trans-unit>
        <trans-unit id="56e49294b1d7ce21a415dcf1693ab79057f7c8de" translate="yes" xml:space="preserve">
          <source>This will deadlock when using &lt;code&gt;stdout=PIPE&lt;/code&gt; or &lt;code&gt;stderr=PIPE&lt;/code&gt; and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt;&lt;code&gt;Popen.communicate()&lt;/code&gt;&lt;/a&gt; when using pipes to avoid that.</source>
          <target state="translated">&lt;code&gt;stdout=PIPE&lt;/code&gt; または &lt;code&gt;stderr=PIPE&lt;/code&gt; を使用すると、これによりデッドロックが発生し、子プロセスが十分な出力をパイプに生成するため、OSパイプバッファーが追加のデータを受け入れるのをブロックします。使用&lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt; &lt;code&gt;Popen.communicate()&lt;/code&gt; &lt;/a&gt;それを避けるためにパイプを使用。</target>
        </trans-unit>
        <trans-unit id="f66e79b5854a58b1ad3c1f14c288974b4d8104d8" translate="yes" xml:space="preserve">
          <source>This will extend the bindings for the toplevel window containing the notebook as follows:</source>
          <target state="translated">これにより、ノートブックを含むトップレベルウィンドウのバインディングが次のように拡張されます。</target>
        </trans-unit>
        <trans-unit id="5d9c8b968447210c764e73083a7543273f082164" translate="yes" xml:space="preserve">
          <source>This will import &lt;code&gt;example.py&lt;/code&gt; as a standalone module and run &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt; on it. Note that this may not work correctly if the file is part of a package and imports other submodules from that package.</source>
          <target state="translated">これにより、 &lt;code&gt;example.py&lt;/code&gt; がスタンドアロンモジュールとしてインポートされ、&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; が&lt;/a&gt;実行されます。ファイルがパッケージの一部であり、そのパッケージから他のサブモジュールをインポートする場合、これは正しく機能しない可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="39490d2477cc24388e4a798bb86272c054747d2f" translate="yes" xml:space="preserve">
          <source>This will produce a standalone executable, which can be run on any machine with the appropriate interpreter available. See &lt;a href=&quot;#zipapp-specifying-the-interpreter&quot;&gt;Specifying the Interpreter&lt;/a&gt; for details. It can be shipped to users as a single file.</source>
          <target state="translated">これにより、スタンドアロンの実行可能ファイルが生成され、適切なインタープリターが利用可能な任意のマシンで実行できます。詳細について&lt;a href=&quot;#zipapp-specifying-the-interpreter&quot;&gt;は、インタープリターの指定&lt;/a&gt;を参照してください。1つのファイルとしてユーザーに出荷できます。</target>
        </trans-unit>
        <trans-unit id="97484c013cbe0659d7256e11582bf0a3ad503821" translate="yes" xml:space="preserve">
          <source>This will run all tests defined in the named module.</source>
          <target state="translated">これは、指定されたモジュールで定義されたすべてのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="2094ced9ee584cde74f455b9491be9e83a991dc2" translate="yes" xml:space="preserve">
          <source>This will send a request to the server using the HTTP request method &lt;em&gt;method&lt;/em&gt; and the selector &lt;em&gt;url&lt;/em&gt;.</source>
          <target state="translated">これにより、HTTPリクエストメソッド&lt;em&gt;メソッド&lt;/em&gt;とセレクター&lt;em&gt;url&lt;/em&gt;を使用してリクエストがサーバーに送信されます。</target>
        </trans-unit>
        <trans-unit id="23b91a0f0ff42f96fa95a59986f06ac3f48f2a85" translate="yes" xml:space="preserve">
          <source>This will set &lt;code&gt;obj.attr&lt;/code&gt; to 5 for the duration of the &lt;code&gt;with&lt;/code&gt; block, restoring the old value at the end of the block. If &lt;code&gt;attr&lt;/code&gt; doesn&amp;rsquo;t exist on &lt;code&gt;obj&lt;/code&gt;, it will be created and then deleted at the end of the block.</source>
          <target state="translated">これにより、 &lt;code&gt;with&lt;/code&gt; ブロックの期間中は &lt;code&gt;obj.attr&lt;/code&gt; が5に設定され、ブロックの最後の古い値が復元されます。場合 &lt;code&gt;attr&lt;/code&gt; が上に存在しない &lt;code&gt;obj&lt;/code&gt; 、それが作成され、ブロックの終了時に削除されます。</target>
        </trans-unit>
        <trans-unit id="de375732b809a212afe6d4f9378da4dcd4108925" translate="yes" xml:space="preserve">
          <source>This will set &lt;code&gt;obj[&quot;item&quot;]&lt;/code&gt; to 5 for the duration of the &lt;code&gt;with&lt;/code&gt; block, restoring the old value at the end of the block. If &lt;code&gt;item&lt;/code&gt; doesn&amp;rsquo;t exist on &lt;code&gt;obj&lt;/code&gt;, it will be created and then deleted at the end of the block.</source>
          <target state="translated">これにより、 &lt;code&gt;with&lt;/code&gt; ブロックの期間中、 &lt;code&gt;obj[&quot;item&quot;]&lt;/code&gt; が5に設定され、ブロックの最後の古い値が復元されます。場合は &lt;code&gt;item&lt;/code&gt; 上に存在しない &lt;code&gt;obj&lt;/code&gt; 、それが作成され、ブロックの終了時に削除されます。</target>
        </trans-unit>
        <trans-unit id="f075685c6e10f2c3bfffdc256e8855b5f859c7c1" translate="yes" xml:space="preserve">
          <source>This will sort all the statistics by file name, and then print out statistics for only the class init methods (since they are spelled with &lt;code&gt;__init__&lt;/code&gt; in them). As one final example, you could try:</source>
          <target state="translated">これにより、すべての統計情報がファイル名でソートされ、クラスのinitメソッドのみの統計情報が出力されます（それらには &lt;code&gt;__init__&lt;/code&gt; が含まれているため）。最後の例として、次のことを試すことができます。</target>
        </trans-unit>
        <trans-unit id="8ccb8cdb74cd1cd8b07da082d3d59c7892819a38" translate="yes" xml:space="preserve">
          <source>This won&amp;rsquo;t display anything unless an example fails, in which case the failing example(s) and the cause(s) of the failure(s) are printed to stdout, and the final line of output is &lt;code&gt;***Test Failed*** N failures.&lt;/code&gt;, where &lt;em&gt;N&lt;/em&gt; is the number of examples that failed.</source>
          <target state="translated">例が失敗しない限り、これは何も表示しません。その場合、失敗した例と失敗の原因はstdoutに出力され、出力の最終行は &lt;code&gt;***Test Failed*** N failures.&lt;/code&gt; ここで、&lt;em&gt;N&lt;/em&gt;は失敗した例の数です。</target>
        </trans-unit>
        <trans-unit id="45e4d25dd4f52913e8043d67497db894d9ad0b86" translate="yes" xml:space="preserve">
          <source>This works as class or function &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;. With a class, it applies recursively to all methods defined in that class (but not to methods defined in its superclasses or subclasses).</source>
          <target state="translated">これは、クラスまたは関数の&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;デコレータ&lt;/a&gt;として機能します。クラスを使用すると、そのクラスで定義されているすべてのメソッドに再帰的に適用されます（スーパークラスまたはサブクラスで定義されているメソッドには適用されません）。</target>
        </trans-unit>
        <trans-unit id="5c886fb4204cedba7ca0634a4e0a0e9ee1736739" translate="yes" xml:space="preserve">
          <source>This works as class or function &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;. With a class, it applies recursively to all methods defined in that class (but not to methods defined in its superclasses or subclasses).</source>
          <target state="translated">これは、クラスまたは関数の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;デコレータ&lt;/a&gt;として機能します。クラスを使用すると、そのクラスで定義されているすべてのメソッドに再帰的に適用されます（ただし、そのスーパークラスまたはサブクラスで定義されているメソッドには適用されません）。</target>
        </trans-unit>
        <trans-unit id="22b71cd883b8cced346581da93f8ff4e43210206" translate="yes" xml:space="preserve">
          <source>This works because the dummy definition of &lt;code&gt;_()&lt;/code&gt; simply returns the string unchanged. And this dummy definition will temporarily override any definition of &lt;code&gt;_()&lt;/code&gt; in the built-in namespace (until the &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt; command). Take care, though if you have a previous definition of &lt;code&gt;_()&lt;/code&gt; in the local namespace.</source>
          <target state="translated">これは、 &lt;code&gt;_()&lt;/code&gt; のダミー定義が文字列を変更せずに返すだけなので機能します。そして、このダミーの定義は、組み込みの名前空間の &lt;code&gt;_()&lt;/code&gt; の定義を一時的に上書きします（&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#del&quot;&gt; &lt;code&gt;del&lt;/code&gt; &lt;/a&gt;コマンドまで）。ただし、ローカルネームスペースに &lt;code&gt;_()&lt;/code&gt; の以前の定義がある場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="53dfd42c2a2e865ad36bac73aed2be7faf9d1083" translate="yes" xml:space="preserve">
          <source>This works because the dummy definition of &lt;code&gt;_()&lt;/code&gt; simply returns the string unchanged. And this dummy definition will temporarily override any definition of &lt;code&gt;_()&lt;/code&gt; in the built-in namespace (until the &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt; command). Take care, though if you have a previous definition of &lt;code&gt;_()&lt;/code&gt; in the local namespace.</source>
          <target state="translated">This works because the dummy definition of &lt;code&gt;_()&lt;/code&gt; simply returns the string unchanged. And this dummy definition will temporarily override any definition of &lt;code&gt;_()&lt;/code&gt; in the built-in namespace (until the &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#del&quot;&gt; &lt;code&gt;del&lt;/code&gt; &lt;/a&gt; command). Take care, though if you have a previous definition of &lt;code&gt;_()&lt;/code&gt; in the local namespace.</target>
        </trans-unit>
        <trans-unit id="28e244347ead2b1ee157031a5e28d94349b74b67" translate="yes" xml:space="preserve">
          <source>This wrapper may also generate output using the &lt;a href=&quot;warnings#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; module to indicate behaviors that are questionable but which may not actually be prohibited by &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;. Unless they are suppressed using Python command-line options or the &lt;a href=&quot;warnings#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; API, any such warnings will be written to &lt;code&gt;sys.stderr&lt;/code&gt; (&lt;em&gt;not&lt;/em&gt;&lt;code&gt;wsgi.errors&lt;/code&gt;, unless they happen to be the same object).</source>
          <target state="translated">このラッパーは、&lt;a href=&quot;warnings#module-warnings&quot;&gt; &lt;code&gt;warnings&lt;/code&gt; &lt;/a&gt;モジュールを使用して出力を生成し、疑わしい動作を示しますが、実際には&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;で禁止されていない場合があります。Pythonコマンドラインオプションまたは&lt;a href=&quot;warnings#module-warnings&quot;&gt; &lt;code&gt;warnings&lt;/code&gt; &lt;/a&gt; API を使用して抑制されない限り、そのような警告は &lt;code&gt;sys.stderr&lt;/code&gt; に書き込まれます（同じオブジェクトでない場合は、 &lt;code&gt;wsgi.errors&lt;/code&gt; で&lt;em&gt;はありません&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="150bcb2beea81f0a936d8bb788c5d0ed814a30b2" translate="yes" xml:space="preserve">
          <source>This wraps the decorator with something that wraps the decorated function in &lt;a href=&quot;#typing.no_type_check&quot;&gt;&lt;code&gt;no_type_check()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは装飾された関数を&lt;a href=&quot;#typing.no_type_check&quot;&gt; &lt;code&gt;no_type_check()&lt;/code&gt; &lt;/a&gt;でラップするものでデコレータをラップします。</target>
        </trans-unit>
        <trans-unit id="1d67963b381a87c27dbbc7cb706dcb0aa012e09c" translate="yes" xml:space="preserve">
          <source>This, for example, is true of &lt;code&gt;int.__add__&lt;/code&gt;. An object passing this test has a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__get__&quot;&gt;&lt;code&gt;__get__()&lt;/code&gt;&lt;/a&gt; method but not a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__set__&quot;&gt;&lt;code&gt;__set__()&lt;/code&gt;&lt;/a&gt; method, but beyond that the set of attributes varies. A &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt; attribute is usually sensible, and &lt;code&gt;__doc__&lt;/code&gt; often is.</source>
          <target state="translated">たとえば、これは &lt;code&gt;int.__add__&lt;/code&gt; ます。このテストに合格オブジェクトが持っている&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__get__&quot;&gt; &lt;code&gt;__get__()&lt;/code&gt; &lt;/a&gt;メソッドではなく&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__set__&quot;&gt; &lt;code&gt;__set__()&lt;/code&gt; &lt;/a&gt;メソッドを、しかし、一連の属性が変化することを超えました。&lt;a href=&quot;stdtypes#definition.__name__&quot;&gt; &lt;code&gt;__name__&lt;/code&gt; &lt;/a&gt;属性は、通常は賢明である、と &lt;code&gt;__doc__&lt;/code&gt; がしばしばあります。</target>
        </trans-unit>
        <trans-unit id="be2b1c03b6a9574d468f089d2e0f324a5fec7c63" translate="yes" xml:space="preserve">
          <source>This, for example, is true of &lt;code&gt;int.__add__&lt;/code&gt;. An object passing this test has a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__get__&quot;&gt;&lt;code&gt;__get__()&lt;/code&gt;&lt;/a&gt; method but not a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__set__&quot;&gt;&lt;code&gt;__set__()&lt;/code&gt;&lt;/a&gt; method, but beyond that the set of attributes varies. A &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt; attribute is usually sensible, and &lt;code&gt;__doc__&lt;/code&gt; often is.</source>
          <target state="translated">This, for example, is true of &lt;code&gt;int.__add__&lt;/code&gt; . An object passing this test has a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__get__&quot;&gt; &lt;code&gt;__get__()&lt;/code&gt; &lt;/a&gt; method but not a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__set__&quot;&gt; &lt;code&gt;__set__()&lt;/code&gt; &lt;/a&gt; method, but beyond that the set of attributes varies. A &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt; &lt;code&gt;__name__&lt;/code&gt; &lt;/a&gt; attribute is usually sensible, and &lt;code&gt;__doc__&lt;/code&gt; often is.</target>
        </trans-unit>
        <trans-unit id="778e46a17402881cd5c7f2ae7c1daa725c393ac4" translate="yes" xml:space="preserve">
          <source>Though &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for &lt;code&gt;pop(0)&lt;/code&gt; and &lt;code&gt;insert(0, v)&lt;/code&gt; operations which change both the size and position of the underlying data representation.</source>
          <target state="translated">にもかかわらず&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;オブジェクトは同様の操作をサポートし、それらは高速固定長操作と被るO（n）のメモリ移動のコストのために最適化された &lt;code&gt;pop(0)&lt;/code&gt; と &lt;code&gt;insert(0, v)&lt;/code&gt; 、基礎となるデータ表現の動作変更サイズと位置の両方。</target>
        </trans-unit>
        <trans-unit id="faed24ed478ce5898f638da7d1d34a4be16100bc" translate="yes" xml:space="preserve">
          <source>Though being an exception (a subclass of &lt;a href=&quot;#urllib.error.URLError&quot;&gt;&lt;code&gt;URLError&lt;/code&gt;&lt;/a&gt;), an &lt;a href=&quot;#urllib.error.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; can also function as a non-exceptional file-like return value (the same thing that &lt;a href=&quot;urllib.request#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt; returns). This is useful when handling exotic HTTP errors, such as requests for authentication.</source>
          <target state="translated">例外（のサブクラスであることけれども&lt;a href=&quot;#urllib.error.URLError&quot;&gt; &lt;code&gt;URLError&lt;/code&gt; &lt;/a&gt;、）&lt;a href=&quot;#urllib.error.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt;非例外ファイルのような戻り値（同じものとすることができ、関数&lt;a href=&quot;urllib.request#urllib.request.urlopen&quot;&gt; &lt;code&gt;urlopen()&lt;/code&gt; &lt;/a&gt;を返します）。これは、認証要求などのエキゾチックなHTTPエラーを処理するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="37862647125cefc1069254a47f843e7cb021912f" translate="yes" xml:space="preserve">
          <source>Though less common than in the past, an antivirus or firewall program may stop the connection. If the program cannot be taught to allow the connection, then it must be turned off for IDLE to work. It is safe to allow this internal connection because no data is visible on external ports. A similar problem is a network mis-configuration that blocks connections.</source>
          <target state="translated">以前ほどではありませんが、アンチウイルスやファイアウォールプログラムが接続を停止することがあります。接続を許可するようにプログラムが教えられない場合は、IDLE を動作させるためにはプログラムをオフにしなければなりません。この内部接続を許可すると、外部ポートにはデータが見えないので安全です。同様の問題として、ネットワークの設定ミスで接続がブロックされることがあります。</target>
        </trans-unit>
        <trans-unit id="2289f1cd884268a19420d727637bb78981c8aef8" translate="yes" xml:space="preserve">
          <source>Though not often needed, this function can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code.</source>
          <target state="translated">頻繁に必要とされるわけではありませんが、共有利用のためにモジュールをインストールする場合、特にソースコードを含むディレクトリにバイトコードキャッシュファイルの書き込み権限を持っていないユーザがいる場合には、この関数は便利です。</target>
        </trans-unit>
        <trans-unit id="23b26ebf82d42c0319c71cda81eb0f398c8fe706" translate="yes" xml:space="preserve">
          <source>Though the cycle detector will catch these, destruction of the frames (and local variables) can be made deterministic by removing the cycle in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; clause. This is also important if the cycle detector was disabled when Python was compiled or using &lt;a href=&quot;gc#gc.disable&quot;&gt;&lt;code&gt;gc.disable()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">サイクル検出器はこれらをキャッチしますが、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt;句でサイクルを削除することにより、フレーム（およびローカル変数）の破壊を確定的にすることができます。これは、Pythonのコンパイル時または&lt;a href=&quot;gc#gc.disable&quot;&gt; &lt;code&gt;gc.disable()&lt;/code&gt; の&lt;/a&gt;使用時にサイクル検出器が無効になっている場合にも重要です。例えば：</target>
        </trans-unit>
        <trans-unit id="cf7e1c66c6ada18069caf896cccc97ab158d2d18" translate="yes" xml:space="preserve">
          <source>Though the cycle detector will catch these, destruction of the frames (and local variables) can be made deterministic by removing the cycle in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; clause. This is also important if the cycle detector was disabled when Python was compiled or using &lt;a href=&quot;gc#gc.disable&quot;&gt;&lt;code&gt;gc.disable()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">Though the cycle detector will catch these, destruction of the frames (and local variables) can be made deterministic by removing the cycle in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt; clause. This is also important if the cycle detector was disabled when Python was compiled or using &lt;a href=&quot;gc#gc.disable&quot;&gt; &lt;code&gt;gc.disable()&lt;/code&gt; &lt;/a&gt;. For example:</target>
        </trans-unit>
        <trans-unit id="cf42dd33cbcf5b9ff936c0cccb336c422f5ed971" translate="yes" xml:space="preserve">
          <source>Thread ID (if available).</source>
          <target state="translated">スレッドID(あれば)。</target>
        </trans-unit>
        <trans-unit id="938645778639684fb490a1e1f85f069cfc3de40c" translate="yes" xml:space="preserve">
          <source>Thread Objects</source>
          <target state="translated">スレッドオブジェクト</target>
        </trans-unit>
        <trans-unit id="b66b6cbe04365929e922b75680e179e46127f3a3" translate="yes" xml:space="preserve">
          <source>Thread Safety</source>
          <target state="translated">スレッドの安全性</target>
        </trans-unit>
        <trans-unit id="2b65dfc26516296f295014a75cea6189d943e440" translate="yes" xml:space="preserve">
          <source>Thread has two arguments before the &lt;em&gt;search_criterion&lt;/em&gt; argument(s); a &lt;em&gt;threading_algorithm&lt;/em&gt;, and the searching &lt;em&gt;charset&lt;/em&gt;. Note that unlike &lt;code&gt;search&lt;/code&gt;, the searching &lt;em&gt;charset&lt;/em&gt; argument is mandatory. There is also a &lt;code&gt;uid thread&lt;/code&gt; command which corresponds to &lt;code&gt;thread&lt;/code&gt; the way that &lt;code&gt;uid
search&lt;/code&gt; corresponds to &lt;code&gt;search&lt;/code&gt;. The &lt;code&gt;thread&lt;/code&gt; command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria. It then returns the matching messages threaded according to the specified threading algorithm.</source>
          <target state="translated">スレッドには、&lt;em&gt;search_criterion&lt;/em&gt;引数の前に2つの引数があります。&lt;em&gt;threading_algorithm&lt;/em&gt;、および検索&lt;em&gt;文字セット&lt;/em&gt;。 &lt;code&gt;search&lt;/code&gt; とは異なり、searching &lt;em&gt;charset&lt;/em&gt;引数は必須です。 &lt;code&gt;uid search&lt;/code&gt; 対応する方法で &lt;code&gt;thread&lt;/code&gt; に対応する &lt;code&gt;uid thread&lt;/code&gt; コマンドもあり &lt;code&gt;search&lt;/code&gt; 。 &lt;code&gt;thread&lt;/code&gt; コマンドは、最初に検索し、検索条件の文字列の解釈のためのcharset引数を使用して、指定された検索条件に一致するメッセージのためのメールボックスを。次に、指定されたスレッド化アルゴリズムに従ってスレッド化された一致するメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="b0c8f67df305f12d7329c3e923eae3a187448dc1" translate="yes" xml:space="preserve">
          <source>Thread members consist of zero or more messages numbers, delimited by spaces, indicating successive parent and child.</source>
          <target state="translated">スレッドメンバーは、スペースで区切られた0個以上のメッセージ番号で構成され、連続した親子を示します。</target>
        </trans-unit>
        <trans-unit id="2b72f7882340b8b87302b6a71686a5d8011d1cb7" translate="yes" xml:space="preserve">
          <source>Thread name (if available).</source>
          <target state="translated">スレッド名(あれば)。</target>
        </trans-unit>
        <trans-unit id="bede3e862826945fddf6112e7c769b9a3aeb8189" translate="yes" xml:space="preserve">
          <source>Thread safety of proxies</source>
          <target state="translated">プロキシのスレッド安全性</target>
        </trans-unit>
        <trans-unit id="b335fb76cc5d7a0a38d14693a22dd2234bea40d3" translate="yes" xml:space="preserve">
          <source>Thread-Local Data</source>
          <target state="translated">スレッドローカルデータ</target>
        </trans-unit>
        <trans-unit id="179f9004b4c06ae6f5f6ff596023c3d673097c0e" translate="yes" xml:space="preserve">
          <source>Thread-local data is data whose values are thread specific. To manage thread-local data, just create an instance of &lt;a href=&quot;#threading.local&quot;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt; (or a subclass) and store attributes on it:</source>
          <target state="translated">スレッドローカルデータは、値がスレッド固有のデータです。スレッドローカルデータを管理するには、&lt;a href=&quot;#threading.local&quot;&gt; &lt;code&gt;local&lt;/code&gt; &lt;/a&gt;（またはサブクラス）のインスタンスを作成し、それに属性を格納します。</target>
        </trans-unit>
        <trans-unit id="8ff556a54faf6fae983bf1ab3aff7d6d5d26751b" translate="yes" xml:space="preserve">
          <source>Thread-specific CPU-time clock.</source>
          <target state="translated">スレッド固有のCPU時間クロック。</target>
        </trans-unit>
        <trans-unit id="08db9139992ea95ca14b3bce8c69ce7fca532f88" translate="yes" xml:space="preserve">
          <source>Thread/Process Pool</source>
          <target state="translated">スレッド/プロセスプール</target>
        </trans-unit>
        <trans-unit id="f4ccad88952fdcd6a1fc61663ba8a6b67b062047" translate="yes" xml:space="preserve">
          <source>ThreadPoolExecutor</source>
          <target state="translated">ThreadPoolExecutor</target>
        </trans-unit>
        <trans-unit id="1fe04156ec5ffd3ad976e6549621d5b8412d5037" translate="yes" xml:space="preserve">
          <source>ThreadPoolExecutor Example</source>
          <target state="translated">ThreadPoolExecutor の例</target>
        </trans-unit>
        <trans-unit id="e18220b1afceba219a85fd8b489ed2e3a72478ca" translate="yes" xml:space="preserve">
          <source>ThreadPoolExecutor now reuses idle worker threads before starting &lt;em&gt;max_workers&lt;/em&gt; worker threads too.</source>
          <target state="translated">ThreadPoolExecutorは、&lt;em&gt;max_workers&lt;/em&gt;ワーカースレッドも開始する前に、アイドルワーカースレッドを再利用するようになりました。</target>
        </trans-unit>
        <trans-unit id="61d127f225cf326a27d514f202864103d01109cd" translate="yes" xml:space="preserve">
          <source>Threading-like synchronization primitives that can be used in Tasks.</source>
          <target state="translated">Tasks で使用できるスレッドライクな同期プリミティブ。</target>
        </trans-unit>
        <trans-unit id="da12000dd2decc4919042e0d96f21afbb897e6e5" translate="yes" xml:space="preserve">
          <source>Threads interact strangely with interrupts: the &lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt;&lt;code&gt;KeyboardInterrupt&lt;/code&gt;&lt;/a&gt; exception will be received by an arbitrary thread. (When the &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; module is available, interrupts always go to the main thread.)</source>
          <target state="translated">スレッドは割り込みと奇妙な相互作用をし：&lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt; &lt;code&gt;KeyboardInterrupt&lt;/code&gt; &lt;/a&gt;例外は任意のスレッドによって受信されます。（&lt;a href=&quot;signal#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt;モジュールが利用可能な場合、割り込みは常にメインスレッドに送られます。）</target>
        </trans-unit>
        <trans-unit id="53c7f0ab74cff52794e9a24116f9afa5b47c92b2" translate="yes" xml:space="preserve">
          <source>Three classes are provided by the &lt;a href=&quot;#module-imaplib&quot;&gt;&lt;code&gt;imaplib&lt;/code&gt;&lt;/a&gt; module, &lt;a href=&quot;#imaplib.IMAP4&quot;&gt;&lt;code&gt;IMAP4&lt;/code&gt;&lt;/a&gt; is the base class:</source>
          <target state="translated">3つのクラスが&lt;a href=&quot;#module-imaplib&quot;&gt; &lt;code&gt;imaplib&lt;/code&gt; &lt;/a&gt;モジュールによって提供され、&lt;a href=&quot;#imaplib.IMAP4&quot;&gt; &lt;code&gt;IMAP4&lt;/code&gt; &lt;/a&gt;が基本クラスです。</target>
        </trans-unit>
        <trans-unit id="e709dbe2f34341a73307670a231b6cadb5fc57d7" translate="yes" xml:space="preserve">
          <source>Three conversion flags are currently supported: &lt;code&gt;'!s'&lt;/code&gt; which calls &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; on the value, &lt;code&gt;'!r'&lt;/code&gt; which calls &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'!a'&lt;/code&gt; which calls &lt;a href=&quot;functions#ascii&quot;&gt;&lt;code&gt;ascii()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在サポートされている変換フラグは、値に対して&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt;を呼び出す &lt;code&gt;'!s'&lt;/code&gt; 、&lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;を呼び出す &lt;code&gt;'!r'&lt;/code&gt; 、および&lt;a href=&quot;functions#ascii&quot;&gt; &lt;code&gt;ascii()&lt;/code&gt; &lt;/a&gt;を呼び出す &lt;code&gt;'!a'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5d0ca76daa80652b92bb2e247e6f8c4265a8798c" translate="yes" xml:space="preserve">
          <source>Three exceptions are defined as attributes of the &lt;a href=&quot;#imaplib.IMAP4&quot;&gt;&lt;code&gt;IMAP4&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">3つの例外が&lt;a href=&quot;#imaplib.IMAP4&quot;&gt; &lt;code&gt;IMAP4&lt;/code&gt; &lt;/a&gt;クラスの属性として定義されています。</target>
        </trans-unit>
        <trans-unit id="2f64dfe21491c30d5d1a7eadfd5dd3fae4531abe" translate="yes" xml:space="preserve">
          <source>Three locking mechanisms are used&amp;mdash;dot locking and, if available, the &lt;code&gt;flock()&lt;/code&gt; and &lt;code&gt;lockf()&lt;/code&gt; system calls.</source>
          <target state="translated">3つのロックメカニズムが使用されます。ドットロックと、可能であれば &lt;code&gt;flock()&lt;/code&gt; および &lt;code&gt;lockf()&lt;/code&gt; システムコールです。</target>
        </trans-unit>
        <trans-unit id="e50506efbf25f33d49dafed0e71ca3b1a26feb7c" translate="yes" xml:space="preserve">
          <source>Three locking mechanisms are used&amp;mdash;dot locking and, if available, the &lt;code&gt;flock()&lt;/code&gt; and &lt;code&gt;lockf()&lt;/code&gt; system calls. For MH mailboxes, locking the mailbox means locking the &lt;code&gt;.mh_sequences&lt;/code&gt; file and, only for the duration of any operations that affect them, locking individual message files.</source>
          <target state="translated">3つのロックメカニズムが使用されます。ドットロックと、可能であれば &lt;code&gt;flock()&lt;/code&gt; および &lt;code&gt;lockf()&lt;/code&gt; システムコールです。MHメールボックスの場合、メールボックスをロックすることは、 &lt;code&gt;.mh_sequences&lt;/code&gt; ファイルをロックすることを意味し、それらに影響を与える操作の期間中のみ、個々のメッセージファイルをロックします。</target>
        </trans-unit>
        <trans-unit id="0e1bc8847535475eab42cce197ae5be27e727ae7" translate="yes" xml:space="preserve">
          <source>Three or more alphanumerics giving the timezone abbreviations. These will be propagated into time.tzname</source>
          <target state="translated">タイムゾーンの省略形を表す3つ以上の英数字。これらはtime.tznameに伝搬されます。</target>
        </trans-unit>
        <trans-unit id="3e70d460192969efb710a023585a04b40999ef18" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;opname&lt;/em&gt; is found.</source>
          <target state="translated">Throws &lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt; if &lt;em&gt;opname&lt;/em&gt; is found.</target>
        </trans-unit>
        <trans-unit id="9ef9926e86eae8834900c13e52e1577c082afc28" translate="yes" xml:space="preserve">
          <source>Thus, an alternative way to get the version number is through the &lt;code&gt;Distribution&lt;/code&gt; instance:</source>
          <target state="translated">したがって、バージョン番号を取得する別の方法は、 &lt;code&gt;Distribution&lt;/code&gt; インスタンスを使用することです。</target>
        </trans-unit>
        <trans-unit id="1a3ede7623f4e752d108f2c9edace3b95a9d7fcf" translate="yes" xml:space="preserve">
          <source>Thus, by default &lt;a href=&quot;#email.iterators.typed_subpart_iterator&quot;&gt;&lt;code&gt;typed_subpart_iterator()&lt;/code&gt;&lt;/a&gt; returns each subpart that has a MIME type of &lt;em&gt;text/*&lt;/em&gt;.</source>
          <target state="translated">したがって、デフォルトでは、&lt;a href=&quot;#email.iterators.typed_subpart_iterator&quot;&gt; &lt;code&gt;typed_subpart_iterator()&lt;/code&gt; &lt;/a&gt;はMIMEタイプが&lt;em&gt;text / *&lt;/em&gt;である各サブパートを返します。</target>
        </trans-unit>
        <trans-unit id="d36d700dcdbb23ba6f79231791253efb769470c2" translate="yes" xml:space="preserve">
          <source>Thus, the set of channel events is larger than the basic socket events. The full set of methods that can be overridden in your subclass follows:</source>
          <target state="translated">このように、チャンネルイベントのセットは基本的なソケットイベントよりも大きくなります。サブクラスでオーバーライドできるメソッドの完全なセットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="439af098feeff071c8e795106894bf846b6f7af0" translate="yes" xml:space="preserve">
          <source>Thus, this is only useful to call Python C api functions directly.</source>
          <target state="translated">このように、Python C の api 関数を直接呼び出す場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="205b4cecce0161369a95283ab9503c6dc691808a" translate="yes" xml:space="preserve">
          <source>Thus, when the &lt;code&gt;incremental&lt;/code&gt; key of a configuration dict is present and is &lt;code&gt;True&lt;/code&gt;, the system will completely ignore any &lt;code&gt;formatters&lt;/code&gt; and &lt;code&gt;filters&lt;/code&gt; entries, and process only the &lt;code&gt;level&lt;/code&gt; settings in the &lt;code&gt;handlers&lt;/code&gt; entries, and the &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;propagate&lt;/code&gt; settings in the &lt;code&gt;loggers&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; entries.</source>
          <target state="translated">ときにこのように、 &lt;code&gt;incremental&lt;/code&gt; 構成辞書のキーが存在している &lt;code&gt;True&lt;/code&gt; 、システムは、完全に任意無視する &lt;code&gt;formatters&lt;/code&gt; と &lt;code&gt;filters&lt;/code&gt; エントリを、そしてプロセスは、 &lt;code&gt;level&lt;/code&gt; の設定 &lt;code&gt;handlers&lt;/code&gt; エントリ、および &lt;code&gt;level&lt;/code&gt; および &lt;code&gt;propagate&lt;/code&gt; の設定 &lt;code&gt;loggers&lt;/code&gt; と &lt;code&gt;root&lt;/code&gt; エントリ。</target>
        </trans-unit>
        <trans-unit id="e488ae72b0720c1cf599c3f8e575a2ab8f87d840" translate="yes" xml:space="preserve">
          <source>Tidy up any resources used by the handler. This version does no output but removes the handler from an internal list of handlers which is closed when &lt;a href=&quot;#logging.shutdown&quot;&gt;&lt;code&gt;shutdown()&lt;/code&gt;&lt;/a&gt; is called. Subclasses should ensure that this gets called from overridden &lt;a href=&quot;#logging.Handler.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">ハンドラーが使用するリソースを整理します。このバージョンは出力を行いませんが、&lt;a href=&quot;#logging.shutdown&quot;&gt; &lt;code&gt;shutdown()&lt;/code&gt; &lt;/a&gt;が呼び出されたときに閉じられるハンドラーの内部リストからハンドラーを削除します。サブクラスは、これがオーバーライドされた&lt;a href=&quot;#logging.Handler.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;メソッドから呼び出されるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="f88f6e9627dc95497340bc4623c37e38fe730a30" translate="yes" xml:space="preserve">
          <source>Time &lt;em&gt;number&lt;/em&gt; executions of the main statement. This executes the setup statement once, and then returns the time it takes to execute the main statement a number of times, measured in seconds as a float. The argument is the number of times through the loop, defaulting to one million. The main statement, the setup statement and the timer function to be used are passed to the constructor.</source>
          <target state="translated">時間&lt;em&gt;数の&lt;/em&gt;メイン文の実行。これは、セットアップステートメントを1回実行してから、メインステートメントを実行するのにかかる時間を秒単位で浮動小数点数として返します。引数はループの回数で、デフォルトは100万です。使用されるメインステートメント、セットアップステートメント、およびタイマー関数がコンストラクターに渡されます。</target>
        </trans-unit>
        <trans-unit id="c8b70bcd70c5d7f90b7b14b7ade5bf89ef3ddfba" translate="yes" xml:space="preserve">
          <source>Time access and conversions.</source>
          <target state="translated">タイムアクセスとコンバージョン。</target>
        </trans-unit>
        <trans-unit id="52eae1cacab4ca0975e99ce3b040b93af31bb3d3" translate="yes" xml:space="preserve">
          <source>Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.</source>
          <target state="translated">LogRecord が作成された時間は、ロギングモジュールがロードされた時間を基準にミリ秒単位で表示されます。</target>
        </trans-unit>
        <trans-unit id="f1ad4dba9062b623c7954b6e7744f90380675e5e" translate="yes" xml:space="preserve">
          <source>Time of file creation.</source>
          <target state="translated">ファイルの作成時期。</target>
        </trans-unit>
        <trans-unit id="bf5b7ea4cfe40f929342452c57b6445e307ff98f" translate="yes" xml:space="preserve">
          <source>Time of last access.</source>
          <target state="translated">最後にアクセスした時間。</target>
        </trans-unit>
        <trans-unit id="d3ed1832d868c8126249a2fb407fc69507dfb189" translate="yes" xml:space="preserve">
          <source>Time of last modification.</source>
          <target state="translated">最終更新時刻。</target>
        </trans-unit>
        <trans-unit id="06be3d8bc306bea5d95f138ab46fafcf17e3ac5c" translate="yes" xml:space="preserve">
          <source>Time of most recent access expressed in nanoseconds as an integer.</source>
          <target state="translated">直近のアクセスの時刻をナノ秒単位で整数で表示します。</target>
        </trans-unit>
        <trans-unit id="a91619cf232ee7d5db5c8c4a6764e8af43c69992" translate="yes" xml:space="preserve">
          <source>Time of most recent access expressed in seconds.</source>
          <target state="translated">直近のアクセス時間を秒単位で表示しています。</target>
        </trans-unit>
        <trans-unit id="65e24f26ea5afb8877a5f8b52e25e32bd4b54487" translate="yes" xml:space="preserve">
          <source>Time of most recent content modification expressed in nanoseconds as an integer.</source>
          <target state="translated">ナノ秒単位で整数で表現した最新の内容変更の時間。</target>
        </trans-unit>
        <trans-unit id="1841767b9a4fbb8ae7c08bde8eb680a307282894" translate="yes" xml:space="preserve">
          <source>Time of most recent content modification expressed in seconds.</source>
          <target state="translated">最新のコンテンツが変更された時間を秒単位で表示しています。</target>
        </trans-unit>
        <trans-unit id="4c626f3136dcc7541eda5dfb73988281d101ad42" translate="yes" xml:space="preserve">
          <source>Time when the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; was created (as returned by &lt;a href=&quot;time#time.time&quot;&gt;&lt;code&gt;time.time()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">時間&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; &lt;/a&gt;作成されました（で返される&lt;a href=&quot;time#time.time&quot;&gt; &lt;code&gt;time.time()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6debd785c2cf241c1ce1926887a0186d4daccd0e" translate="yes" xml:space="preserve">
          <source>Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.</source>
          <target state="translated">絶対値がシステムが稼働していて中断していない時間である時間で、絶対値と間隔の両方で正確な稼働時間の測定を提供します。</target>
        </trans-unit>
        <trans-unit id="0374b215fe391453f39d42861a7e9596d4318c9a" translate="yes" xml:space="preserve">
          <source>Time zone name (empty string if the object is naive).</source>
          <target state="translated">タイムゾーン名(オブジェクトがナイーブな場合は空文字列)。</target>
        </trans-unit>
        <trans-unit id="ee8f614d144ab47b670e20f7522453fc38517d98" translate="yes" xml:space="preserve">
          <source>Time zone name (no characters if no time zone exists).</source>
          <target state="translated">タイムゾーン名(タイムゾーンが存在しない場合は文字なし)。</target>
        </trans-unit>
        <trans-unit id="c0a6ab1356e2277d077fbe00d29afd20e33697b8" translate="yes" xml:space="preserve">
          <source>Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59].</source>
          <target state="translated">UTC/GMTとの正または負の時差を示すタイムゾーンオフセットは、+HHHMMまたは-HHHMMの形式で、ここでHは10進数の時間桁を、Mは10進数の分桁[-23:59,+23:59]を表します。</target>
        </trans-unit>
        <trans-unit id="0f2b93745cd2c3c48a46f80e6d71e4bf3caf8d57" translate="yes" xml:space="preserve">
          <source>TimePeriod</source>
          <target state="translated">TimePeriod</target>
        </trans-unit>
        <trans-unit id="5c415f11b847d7f607026be69aa759761b622f69" translate="yes" xml:space="preserve">
          <source>TimedRotatingFileHandler</source>
          <target state="translated">TimedRotatingFileHandler</target>
        </trans-unit>
        <trans-unit id="ef4cedb55c675ccac18ae381902542c90951f8e7" translate="yes" xml:space="preserve">
          <source>Timeout duration, measured in seconds, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if no timeout is desired. If &lt;a href=&quot;#socketserver.BaseServer.handle_request&quot;&gt;&lt;code&gt;handle_request()&lt;/code&gt;&lt;/a&gt; receives no incoming requests within the timeout period, the &lt;a href=&quot;#socketserver.BaseServer.handle_timeout&quot;&gt;&lt;code&gt;handle_timeout()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">秒単位で測定されるタイムアウト期間、またはタイムアウトが必要ない場合は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。場合&lt;a href=&quot;#socketserver.BaseServer.handle_request&quot;&gt; &lt;code&gt;handle_request()&lt;/code&gt; &lt;/a&gt;タイムアウト期間内に着信要求を受信しない、&lt;a href=&quot;#socketserver.BaseServer.handle_timeout&quot;&gt; &lt;code&gt;handle_timeout()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="07b0e9b677614df40c96ed5c03037d21c2ed7656" translate="yes" xml:space="preserve">
          <source>Timeout in seconds for network requests going to the Internet.</source>
          <target state="translated">インターネットへのネットワーク要求のタイムアウト時間を秒単位で指定します。</target>
        </trans-unit>
        <trans-unit id="130d46192a8b7232c53a533ef412e1247760e214" translate="yes" xml:space="preserve">
          <source>Timeout in seconds for tests using a network server listening on the network local loopback interface like &lt;code&gt;127.0.0.1&lt;/code&gt;.</source>
          <target state="translated">Timeout in seconds for tests using a network server listening on the network local loopback interface like &lt;code&gt;127.0.0.1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a2345456807fdaf84e00252cabb595f9279bbea" translate="yes" xml:space="preserve">
          <source>Timeout in seconds to detect when a test hangs.</source>
          <target state="translated">テストがハングしたことを検出するためのタイムアウト時間を秒単位で指定します。</target>
        </trans-unit>
        <trans-unit id="93ea4bea7de09278df65a41998484bea21720b1c" translate="yes" xml:space="preserve">
          <source>Timeout in seconds to mark a test as failed if the test takes &amp;ldquo;too long&amp;rdquo;.</source>
          <target state="translated">Timeout in seconds to mark a test as failed if the test takes &amp;ldquo;too long&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="62b298628f356f1c619e3be00ab4ff94e5bcd4d8" translate="yes" xml:space="preserve">
          <source>Timeout in seconds.</source>
          <target state="translated">秒単位のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="22a4ad2c60d9b1a4a4ab47810c732e12faec00b0" translate="yes" xml:space="preserve">
          <source>TimeoutError</source>
          <target state="translated">TimeoutError</target>
        </trans-unit>
        <trans-unit id="27a4f2c5a6aa7d957af2668e0ec53e32944aba26" translate="yes" xml:space="preserve">
          <source>Timeouts</source>
          <target state="translated">Timeouts</target>
        </trans-unit>
        <trans-unit id="0c4d8969a977fe6296c7be7be0d35706e4b5dae6" translate="yes" xml:space="preserve">
          <source>Timeouts and the &lt;code&gt;accept&lt;/code&gt; method</source>
          <target state="translated">タイムアウトと &lt;code&gt;accept&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="18be0279503ee7ac0781f0c9d62872c701d2ba10" translate="yes" xml:space="preserve">
          <source>Timeouts and the &lt;code&gt;connect&lt;/code&gt; method</source>
          <target state="translated">タイムアウトと &lt;code&gt;connect&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="10d608010dbfc49424751fd4de41b0163424a0ca" translate="yes" xml:space="preserve">
          <source>Timer Objects</source>
          <target state="translated">タイマーオブジェクト</target>
        </trans-unit>
        <trans-unit id="9cfb3d400f6dd144e8358401419c34c90ce26960" translate="yes" xml:space="preserve">
          <source>Timer expired</source>
          <target state="translated">タイマー切れ</target>
        </trans-unit>
        <trans-unit id="72b74f80a56c06d5f082e3b0803cdaf543886ab5" translate="yes" xml:space="preserve">
          <source>Timer signal from &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/alarm(2)&quot;&gt;alarm(2)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Timer signal from &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/alarm(2)&quot;&gt;alarm(2)&lt;/a&gt;&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="3207535b8ec3c551c140c60e1b7a5b653785fe05" translate="yes" xml:space="preserve">
          <source>Timers are started, as with threads, by calling their &lt;code&gt;start()&lt;/code&gt; method. The timer can be stopped (before its action has begun) by calling the &lt;a href=&quot;#threading.Timer.cancel&quot;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt; method. The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user.</source>
          <target state="translated">タイマーは、スレッドと同様に、 &lt;code&gt;start()&lt;/code&gt; メソッドを呼び出すことによって開始されます。タイマーは、&lt;a href=&quot;#threading.Timer.cancel&quot;&gt; &lt;code&gt;cancel()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより（アクションが開始する前に）停止できます。タイマーがアクションを実行する前に待機する間隔は、ユーザーが指定した間隔と正確に同じではない場合があります。</target>
        </trans-unit>
        <trans-unit id="29a8e31d470212c9df5fdd31f48fc0b710230ac9" translate="yes" xml:space="preserve">
          <source>Timestamps:</source>
          <target state="translated">Timestamps:</target>
        </trans-unit>
        <trans-unit id="0fd467e1a208fce272fd82f9bdf44518884e63c1" translate="yes" xml:space="preserve">
          <source>Timezone Constants</source>
          <target state="translated">タイムゾーン定数</target>
        </trans-unit>
        <trans-unit id="4a652adeb3e347a238e20df919ff0ab254549331" translate="yes" xml:space="preserve">
          <source>Tix Commands</source>
          <target state="translated">ティックスコマンド</target>
        </trans-unit>
        <trans-unit id="96b7c5068376e645877a22b7d58d1ed12ad0e604" translate="yes" xml:space="preserve">
          <source>Tix Development Applications</source>
          <target state="translated">ティックス開発アプリケーション</target>
        </trans-unit>
        <trans-unit id="faefa845bbb0a4cb46a5b93beb369c79040a72c9" translate="yes" xml:space="preserve">
          <source>Tix Homepage</source>
          <target state="translated">ティックスホームページ</target>
        </trans-unit>
        <trans-unit id="4d60340b76e67777555c745a3f74999b7294f26b" translate="yes" xml:space="preserve">
          <source>Tix Man Pages</source>
          <target state="translated">ティックスマンページ</target>
        </trans-unit>
        <trans-unit id="21b1387290c95ae82430ce78110fe98b586bc58e" translate="yes" xml:space="preserve">
          <source>Tix Programming Guide</source>
          <target state="translated">ティックスプログラミングガイド</target>
        </trans-unit>
        <trans-unit id="a19554031210fa636ae40e5156d263fd0b198f94" translate="yes" xml:space="preserve">
          <source>Tix Widgets</source>
          <target state="translated">ウィジェット</target>
        </trans-unit>
        <trans-unit id="acd857e62f1a6ec2d1a38841f59d2e3c13b47c92" translate="yes" xml:space="preserve">
          <source>Tix applications for development of Tix and Tkinter programs. Tide applications work under Tk or Tkinter, and include &lt;strong&gt;TixInspect&lt;/strong&gt;, an inspector to remotely modify and debug Tix/Tk/Tkinter applications.</source>
          <target state="translated">TixおよびTkinterプログラムの開発用のTixアプリケーション。TideアプリケーションはTkまたはTkinterで&lt;strong&gt;動作し&lt;/strong&gt;、Tix / Tk / Tkinterアプリケーションをリモートで変更およびデバッグするためのインスペクターである&lt;strong&gt;TixInspect&lt;/strong&gt;を含みます。</target>
        </trans-unit>
        <trans-unit id="82a910b990158307c49830b03ec2b10728632a22" translate="yes" xml:space="preserve">
          <source>Tix maintains a list of directories under which the &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt;&lt;code&gt;tix_getimage()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt;&lt;code&gt;tix_getbitmap()&lt;/code&gt;&lt;/a&gt; methods will search for image files. The standard bitmap directory is &lt;code&gt;$TIX_LIBRARY/bitmaps&lt;/code&gt;. The &lt;a href=&quot;#tkinter.tix.tixCommand.tix_addbitmapdir&quot;&gt;&lt;code&gt;tix_addbitmapdir()&lt;/code&gt;&lt;/a&gt; method adds &lt;em&gt;directory&lt;/em&gt; into this list. By using this method, the image files of an applications can also be located using the &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt;&lt;code&gt;tix_getimage()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt;&lt;code&gt;tix_getbitmap()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Tixは、&lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt; &lt;code&gt;tix_getimage()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt; &lt;code&gt;tix_getbitmap()&lt;/code&gt; &lt;/a&gt;メソッドが画像ファイルを検索するディレクトリのリストを保持しています。標準のビットマップディレクトリは &lt;code&gt;$TIX_LIBRARY/bitmaps&lt;/code&gt; です。&lt;a href=&quot;#tkinter.tix.tixCommand.tix_addbitmapdir&quot;&gt; &lt;code&gt;tix_addbitmapdir()&lt;/code&gt; &lt;/a&gt;メソッドが追加され&lt;em&gt;たディレクトリを&lt;/em&gt;、このリストの中に。このメソッドを使用すると、&lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt; &lt;code&gt;tix_getimage()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt; &lt;code&gt;tix_getbitmap()&lt;/code&gt; &lt;/a&gt;メソッドを使用してアプリケーションの画像ファイルを見つけることもできます。</target>
        </trans-unit>
        <trans-unit id="eb5cc0f84fc345c602dd1accf23180e03ce108cd" translate="yes" xml:space="preserve">
          <source>Tk</source>
          <target state="translated">Tk</target>
        </trans-unit>
        <trans-unit id="c0bdbcbd85b143d1bbb028bb2fa4b753ca6134ed" translate="yes" xml:space="preserve">
          <source>Tk (C)</source>
          <target state="translated">Tk (C)</target>
        </trans-unit>
        <trans-unit id="f509dfaac06925adf03162aba9fd793afe243fc6" translate="yes" xml:space="preserve">
          <source>Tk Option Data Types</source>
          <target state="translated">Tk オプションデータ型</target>
        </trans-unit>
        <trans-unit id="c53a361a926e329bf6ffb89e220c7fec5f066070" translate="yes" xml:space="preserve">
          <source>Tk Widget Styling Support</source>
          <target state="translated">Tkウィジェットのスタイリングサポート</target>
        </trans-unit>
        <trans-unit id="af7fb30a52b23b5f1a4ce655dbbf5d8f1a0c77d6" translate="yes" xml:space="preserve">
          <source>Tk Widgets (C and Tcl)</source>
          <target state="translated">Tk ウィジェット (C と Tcl)</target>
        </trans-unit>
        <trans-unit id="72cfa7078e79e3f8fa74407e53e2484711fe9f52" translate="yes" xml:space="preserve">
          <source>Tk allows you to register and unregister a callback function which will be called from the Tk mainloop when I/O is possible on a file descriptor. Only one handler may be registered per file descriptor. Example code:</source>
          <target state="translated">Tkでは、ファイルディスクリプタ上でI/Oが可能な場合にTkのメインループから呼び出されるコールバック関数を登録したり、登録解除したりすることができます。登録できるハンドラはファイルディスクリプタごとに1つだけです。コード例</target>
        </trans-unit>
        <trans-unit id="f9c74172242e29fa205d5a14dd18143d03ec1b82" translate="yes" xml:space="preserve">
          <source>Tk code:</source>
          <target state="translated">Tkコード。</target>
        </trans-unit>
        <trans-unit id="db9c46d3406df20ff79ee0d05fc1e0523161511a" translate="yes" xml:space="preserve">
          <source>Tk commands</source>
          <target state="translated">Tkコマンド</target>
        </trans-unit>
        <trans-unit id="9ab67afb1158f1675f3559e0d1e76cc6b3ded22f" translate="yes" xml:space="preserve">
          <source>Tk scripts are Tcl programs. Like all Tcl programs, Tk scripts are just lists of tokens separated by spaces. A Tk widget is just its &lt;em&gt;class&lt;/em&gt;, the &lt;em&gt;options&lt;/em&gt; that help configure it, and the &lt;em&gt;actions&lt;/em&gt; that make it do useful things.</source>
          <target state="translated">TkスクリプトはTclプログラムです。すべてのTclプログラムと同様に、Tkスクリプトはスペースで区切られたトークンの単なるリストです。Tkウィジェットは、その&lt;em&gt;クラス&lt;/em&gt;、ウィジェットの構成に役立つ&lt;em&gt;オプション&lt;/em&gt;、およびウィジェットを有用なものにする&lt;em&gt;アクション&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="c3b5d25f755fd5c2e9a68aade852dda180798ca5" translate="yes" xml:space="preserve">
          <source>Tk uses a list font name format, such as &lt;code&gt;{courier 10 bold}&lt;/code&gt;. Font sizes with positive numbers are measured in points; sizes with negative numbers are measured in pixels.</source>
          <target state="translated">Tkは、 &lt;code&gt;{courier 10 bold}&lt;/code&gt; などのリストフォント名形式を使用します。正の数のフォントサイズはポイントで測定されます。負の数のサイズはピクセル単位で測定されます。</target>
        </trans-unit>
        <trans-unit id="cb67a9e7545ab841eae0703e7e11ff4949e8a6ee" translate="yes" xml:space="preserve">
          <source>Tk was written by John Ousterhout while at Berkeley.</source>
          <target state="translated">Tkはバークレー在学中にJohn Ousterhoutが書いたものです。</target>
        </trans-unit>
        <trans-unit id="06adfc0de33394d65018332de578e6cb394c00e1" translate="yes" xml:space="preserve">
          <source>Tkinter 8.5 reference: a GUI for Python</source>
          <target state="translated">Tkinter 8.5 リファレンス:Python の GUI</target>
        </trans-unit>
        <trans-unit id="c043cdde636e2a3943dc76b169fd5e748c94f38e" translate="yes" xml:space="preserve">
          <source>Tkinter Dialogs</source>
          <target state="translated">トキンターダイアログ</target>
        </trans-unit>
        <trans-unit id="6ec43006272d1fcfb847df256c67b8a2a6239c06" translate="yes" xml:space="preserve">
          <source>Tkinter Event Field</source>
          <target state="translated">Tkinterイベントフィールド</target>
        </trans-unit>
        <trans-unit id="0fbf57570a8e11effb5b92aa3ee08d4bf37542b4" translate="yes" xml:space="preserve">
          <source>Tkinter Life Preserver</source>
          <target state="translated">トキンターライフプリザーバー</target>
        </trans-unit>
        <trans-unit id="9fa021c29a03731a173c392e3231b31c2bd9095b" translate="yes" xml:space="preserve">
          <source>Tkinter Modules</source>
          <target state="translated">Tkinterモジュール</target>
        </trans-unit>
        <trans-unit id="b5e71015433233c51b605020e48525d57df3c1e7" translate="yes" xml:space="preserve">
          <source>Tkinter docs from effbot</source>
          <target state="translated">effbotからのTkinterドキュメント</target>
        </trans-unit>
        <trans-unit id="06a7380bcaaa1bbf89848533bffc7cff78689da8" translate="yes" xml:space="preserve">
          <source>Tkinter documentation:</source>
          <target state="translated">Tkinterのドキュメント。</target>
        </trans-unit>
        <trans-unit id="9e17c9f8fb8d293677aac656ba3e78bca997570a" translate="yes" xml:space="preserve">
          <source>Tkinter standard dialog module</source>
          <target state="translated">Tkinter 標準ダイアログモジュール</target>
        </trans-unit>
        <trans-unit id="2fec54ef5f25c7f02d2146e6f287430766b4fc73" translate="yes" xml:space="preserve">
          <source>Tkinter was written by Steen Lumholt and Guido van Rossum.</source>
          <target state="translated">Tkinterはステーン・ルムホルツとグイド・ファン・ロッサムが書いた。</target>
        </trans-unit>
        <trans-unit id="ae79ea1e9c6391a9ed83a2e18a031b835feec0c9" translate="yes" xml:space="preserve">
          <source>To</source>
          <target state="translated">To</target>
        </trans-unit>
        <trans-unit id="879c4af9add81e668a804e6ea9a1c5883dd416eb" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#numbers.Complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numbers.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt; adds the operations that work on real numbers.</source>
          <target state="translated">&lt;a href=&quot;#numbers.Complex&quot;&gt; &lt;code&gt;Complex&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#numbers.Real&quot;&gt; &lt;code&gt;Real&lt;/code&gt; &lt;/a&gt;実数上での操作その仕事を追加します。</target>
        </trans-unit>
        <trans-unit id="3bd521cceedef31b3760ed9bdf91114918bc9e2e" translate="yes" xml:space="preserve">
          <source>To access all registered implementations, use the read-only &lt;code&gt;registry&lt;/code&gt; attribute:</source>
          <target state="translated">登録されているすべての実装にアクセスするには、読み取り専用の &lt;code&gt;registry&lt;/code&gt; 属性を使用します。</target>
        </trans-unit>
        <trans-unit id="971e053b3ed2cc0c24e71a6572574d038bc6457b" translate="yes" xml:space="preserve">
          <source>To access an XML-RPC server through a HTTP proxy, you need to define a custom transport. The following example shows how:</source>
          <target state="translated">HTTP プロキシを使用して XML-RPC サーバーにアクセスするには、カスタム トランスポートを定義する必要があります。次の例はその方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e8d808ebfcaa2c8f47d64d028fa1df61739005e6" translate="yes" xml:space="preserve">
          <source>To access the individual &amp;ldquo;parts&amp;rdquo; (components) of a path, use the following property:</source>
          <target state="translated">パスの個々の「パーツ」（コンポーネント）にアクセスするには、次のプロパティを使用します：</target>
        </trans-unit>
        <trans-unit id="8a1f25391bef338f3d0259b12755749577aa4d1e" translate="yes" xml:space="preserve">
          <source>To accommodate reproducible processing of SMIME-signed messages &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; disables header folding for message parts of type &lt;code&gt;multipart/signed&lt;/code&gt; and all subparts.</source>
          <target state="translated">SMIME署名付きメッセージの再現可能な処理に対応するために、&lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;はタイプ &lt;code&gt;multipart/signed&lt;/code&gt; のメッセージパーツとすべてのサブパーツのヘッダーフォールディングを無効にします。</target>
        </trans-unit>
        <trans-unit id="a9a65729549bdc5d764fa4370cbc185392d0a035" translate="yes" xml:space="preserve">
          <source>To achieve this, &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; supports some important concepts in an object-oriented way:</source>
          <target state="translated">これを実現するために、&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;はオブジェクト指向の方法でいくつかの重要な概念をサポートしています。</target>
        </trans-unit>
        <trans-unit id="f7545737cb159edd448e66fa7291368d57e7a6c9" translate="yes" xml:space="preserve">
          <source>To actually run a coroutine, asyncio provides three main mechanisms:</source>
          <target state="translated">実際にコアーチンを実行するために、asyncioは3つの主要なメカニズムを提供しています。</target>
        </trans-unit>
        <trans-unit id="528b73f2343087db111a62659169143d06137936" translate="yes" xml:space="preserve">
          <source>To add cleanup code that must be run even in the case of an exception, use &lt;code&gt;addModuleCleanup&lt;/code&gt;:</source>
          <target state="translated">例外が発生した場合でも実行する必要があるクリーンアップコードを追加するには、 &lt;code&gt;addModuleCleanup&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c8af2ff6b8a2161b58de4c051f7dc4e1c09233ad" translate="yes" xml:space="preserve">
          <source>To add overloaded implementations to the function, use the &lt;code&gt;register()&lt;/code&gt; attribute of the generic function. It is a decorator. For functions annotated with types, the decorator will infer the type of the first argument automatically:</source>
          <target state="translated">オーバーロードされた実装を関数に追加するには、ジェネリック関数の &lt;code&gt;register()&lt;/code&gt; 属性を使用します。デコレータです。型で注釈が付けられた関数の場合、デコレータは最初の引数の型を自動的に推測します：</target>
        </trans-unit>
        <trans-unit id="2f52605c001c2892c529e8e6e5591f7c13dce1a1" translate="yes" xml:space="preserve">
          <source>To align the end of a structure to the alignment requirement of a particular type, end the format with the code for that type with a repeat count of zero. See &lt;a href=&quot;#struct-examples&quot;&gt;Examples&lt;/a&gt;.</source>
          <target state="translated">構造体の終わりを特定の型の整列要件に揃えるには、繰り返し型がゼロのその型のコードでフォーマットを終了します。&lt;a href=&quot;#struct-examples&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="50a21e33352bea2bc96629d7a87f8894180a870a" translate="yes" xml:space="preserve">
          <source>To allow access to the original function for introspection and other purposes (e.g. bypassing a caching decorator such as &lt;a href=&quot;#functools.lru_cache&quot;&gt;&lt;code&gt;lru_cache()&lt;/code&gt;&lt;/a&gt;), this function automatically adds a &lt;code&gt;__wrapped__&lt;/code&gt; attribute to the wrapper that refers to the function being wrapped.</source>
          <target state="translated">イントロスペクションやその他の目的（&lt;a href=&quot;#functools.lru_cache&quot;&gt; &lt;code&gt;lru_cache()&lt;/code&gt; &lt;/a&gt;などのキャッシュデコレータをバイパスするなど）で元の関数へのアクセスを許可するために、この関数は、 &lt;code&gt;__wrapped__&lt;/code&gt; される関数を参照するラッパーに__wrapped__属性を自動的に追加します。</target>
        </trans-unit>
        <trans-unit id="d7e3f6ae6bebf84a668a5d330c26e9a9f0e8c8ca" translate="yes" xml:space="preserve">
          <source>To also capture standard error in the result, use &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt;:</source>
          <target state="translated">結果の標準エラーもキャプチャするには、 &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b40c02aa20e39d67b9f645180128720b8df1859c" translate="yes" xml:space="preserve">
          <source>To avoid confusing existing tools that analyze import statements and expect to find the modules they&amp;rsquo;re importing.</source>
          <target state="translated">インポート文を分析し、それらがインポートしているモジュールを見つけることを期待する既存のツールの混乱を避けるため。</target>
        </trans-unit>
        <trans-unit id="6fcd2ea1ec6b9fcb7a6ad1afd985d7ecdf73f53a" translate="yes" xml:space="preserve">
          <source>To avoid the task &lt;a href=&quot;#asyncio.Task.cancel&quot;&gt;&lt;code&gt;cancellation&lt;/code&gt;&lt;/a&gt;, wrap it in &lt;a href=&quot;#asyncio.shield&quot;&gt;&lt;code&gt;shield()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タスクの&lt;a href=&quot;#asyncio.Task.cancel&quot;&gt; &lt;code&gt;cancellation&lt;/code&gt; &lt;/a&gt;を回避するには、それを&lt;a href=&quot;#asyncio.shield&quot;&gt; &lt;code&gt;shield()&lt;/code&gt; &lt;/a&gt;でラップします。</target>
        </trans-unit>
        <trans-unit id="cb7ed6c5f7af9fa2f11429ad240931ae400cd1a3" translate="yes" xml:space="preserve">
          <source>To be called just before drawing a shape to be filled.</source>
          <target state="translated">塗りつぶす図形を描く直前に呼び出されること。</target>
        </trans-unit>
        <trans-unit id="64d8c5cc57d55c3231722a4a870d260dd19d6c3e" translate="yes" xml:space="preserve">
          <source>To be directly usable as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;, &lt;code&gt;os.DirEntry&lt;/code&gt; implements the &lt;a href=&quot;#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;パスのようなオブジェクト&lt;/a&gt;として直接使用できるように、 &lt;code&gt;os.DirEntry&lt;/code&gt; は&lt;a href=&quot;#os.PathLike&quot;&gt; &lt;code&gt;PathLike&lt;/code&gt; &lt;/a&gt;インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="53d877d48e3eeb459e4ec2e50eab07db6370a32d" translate="yes" xml:space="preserve">
          <source>To be directly usable as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;, &lt;code&gt;os.DirEntry&lt;/code&gt; implements the &lt;a href=&quot;#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">To be directly usable as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;, &lt;code&gt;os.DirEntry&lt;/code&gt; implements the &lt;a href=&quot;#os.PathLike&quot;&gt; &lt;code&gt;PathLike&lt;/code&gt; &lt;/a&gt; interface.</target>
        </trans-unit>
        <trans-unit id="2aca75b7a1203ce8695faba0b01214c1fb557382" translate="yes" xml:space="preserve">
          <source>To be on the safe side, if you must pass a string gotten from a form to a shell command, you should make sure the string contains only alphanumeric characters, dashes, underscores, and periods.</source>
          <target state="translated">安全のために、フォームから取得した文字列をシェルコマンドに渡さなければならない場合は、文字列に英数字、ダッシュ、アンダースコア、ピリオドのみが含まれていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="1c9976abfa62062ca46d0102679c057214fc0d8e" translate="yes" xml:space="preserve">
          <source>To be secure against &lt;a href=&quot;https://en.wikipedia.org/wiki/Brute-force_attack&quot;&gt;brute-force attacks&lt;/a&gt;, tokens need to have sufficient randomness. Unfortunately, what is considered sufficient will necessarily increase as computers get more powerful and able to make more guesses in a shorter period. As of 2015, it is believed that 32 bytes (256 bits) of randomness is sufficient for the typical use-case expected for the &lt;a href=&quot;#module-secrets&quot;&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Brute-force_attack&quot;&gt;ブルートフォース攻撃&lt;/a&gt;から保護するには、トークンに十分なランダム性が必要です。残念ながら、コンピュータがより強力になり、より短い期間でより多くの推測を行うことができるようになると、十分と見なされるものが必然的に増加します。2015年の時点では、32バイト（256ビット）のランダム性で、&lt;a href=&quot;#module-secrets&quot;&gt; &lt;code&gt;secrets&lt;/code&gt; &lt;/a&gt;モジュールに期待される典型的なユースケースには十分であると考えられています。</target>
        </trans-unit>
        <trans-unit id="f7b8e37c3ead7bb7e82354e263d6bbb12e469ece" translate="yes" xml:space="preserve">
          <source>To build a functioning &lt;a href=&quot;#asynchat.async_chat&quot;&gt;&lt;code&gt;async_chat&lt;/code&gt;&lt;/a&gt; subclass your input methods &lt;a href=&quot;#asynchat.async_chat.collect_incoming_data&quot;&gt;&lt;code&gt;collect_incoming_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt;&lt;code&gt;found_terminator()&lt;/code&gt;&lt;/a&gt; must handle the data that the channel receives asynchronously. The methods are described below.</source>
          <target state="translated">機能する&lt;a href=&quot;#asynchat.async_chat&quot;&gt; &lt;code&gt;async_chat&lt;/code&gt; &lt;/a&gt;サブクラスを構築するには、インプットメソッド&lt;a href=&quot;#asynchat.async_chat.collect_incoming_data&quot;&gt; &lt;code&gt;collect_incoming_data()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt; &lt;code&gt;found_terminator()&lt;/code&gt; &lt;/a&gt;が、チャネルが非同期に受信するデータを処理する必要があります。以下にその方法を示します。</target>
        </trans-unit>
        <trans-unit id="45163f5e6e9d3d755a0aa4e4a2cad96a7b22f1a9" translate="yes" xml:space="preserve">
          <source>To build asynchronous handlers, use the &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt;&lt;code&gt;ForkingMixIn&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">非同期ハンドラーを構築するには、&lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt; &lt;code&gt;ThreadingMixIn&lt;/code&gt; &lt;/a&gt;クラスと&lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt; &lt;code&gt;ForkingMixIn&lt;/code&gt; &lt;/a&gt;クラスを使用します。</target>
        </trans-unit>
        <trans-unit id="c0f3473b7a087f24c025a3a486b154bb9e21ac1a" translate="yes" xml:space="preserve">
          <source>To calculate hash of some data, you should first construct a hash object by calling the appropriate constructor function (&lt;a href=&quot;#hashlib.blake2b&quot;&gt;&lt;code&gt;blake2b()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#hashlib.blake2s&quot;&gt;&lt;code&gt;blake2s()&lt;/code&gt;&lt;/a&gt;), then update it with the data by calling &lt;code&gt;update()&lt;/code&gt; on the object, and, finally, get the digest out of the object by calling &lt;code&gt;digest()&lt;/code&gt; (or &lt;code&gt;hexdigest()&lt;/code&gt; for hex-encoded string).</source>
          <target state="translated">一部のデータのハッシュを計算するには、まず適切なコンストラクター関数（&lt;a href=&quot;#hashlib.blake2b&quot;&gt; &lt;code&gt;blake2b()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#hashlib.blake2s&quot;&gt; &lt;code&gt;blake2s()&lt;/code&gt; &lt;/a&gt;）を呼び出してハッシュオブジェクトを作成し、次にオブジェクトに対して &lt;code&gt;update()&lt;/code&gt; を呼び出してデータで更新し、最後に取得する必要があります。 &lt;code&gt;digest()&lt;/code&gt; （または16進エンコードされた文字列の場合は &lt;code&gt;hexdigest()&lt;/code&gt; )を呼び出して、オブジェクトからダイジェストを取り出します。</target>
        </trans-unit>
        <trans-unit id="8c8e11f7a995dea282995d88782e0aabb4b1ae1b" translate="yes" xml:space="preserve">
          <source>To cancel a running Task use the &lt;a href=&quot;#asyncio.Task.cancel&quot;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt; method. Calling it will cause the Task to throw a &lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt;&lt;code&gt;CancelledError&lt;/code&gt;&lt;/a&gt; exception into the wrapped coroutine. If a coroutine is awaiting on a Future object during cancellation, the Future object will be cancelled.</source>
          <target state="translated">実行中のタスクをキャンセルするには、&lt;a href=&quot;#asyncio.Task.cancel&quot;&gt; &lt;code&gt;cancel()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。これを呼び出すと、タスクはラップされたコルーチンに&lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt; &lt;code&gt;CancelledError&lt;/code&gt; &lt;/a&gt;例外をスローします。キャンセル中にコルーチンがFutureオブジェクトで待機している場合、Futureオブジェクトはキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="8e63c10e490c41b2c85c5886452a96e3ecc37d68" translate="yes" xml:space="preserve">
          <source>To change this default behavior, another value can be supplied using the &lt;code&gt;prog=&lt;/code&gt; argument to &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">このデフォルトの動作を変更するには、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;prog=&lt;/code&gt; 引数を使用して別の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="b6e34501a464650fe6316c88682b19ff1b8ffe1a" translate="yes" xml:space="preserve">
          <source>To check that a module&amp;rsquo;s docstrings are up-to-date by verifying that all interactive examples still work as documented.</source>
          <target state="translated">モジュールのドキュメント文字列が最新であることを確認するには、すべてのインタラクティブな例がドキュメントどおりに機能することを確認します。</target>
        </trans-unit>
        <trans-unit id="203e5ed47bfbabd7adfd3c9726f43e77f390c583" translate="yes" xml:space="preserve">
          <source>To check what font a Button uses by default:</source>
          <target state="translated">ボタンがデフォルトで使用しているフォントを確認します。</target>
        </trans-unit>
        <trans-unit id="b839a91668c3944755e3b7d093c803d5bfd881aa" translate="yes" xml:space="preserve">
          <source>To check whether a particular function accepts &lt;code&gt;False&lt;/code&gt; for its &lt;em&gt;follow_symlinks&lt;/em&gt; parameter, use the &lt;code&gt;in&lt;/code&gt; operator on &lt;code&gt;supports_follow_symlinks&lt;/code&gt;. As an example, this expression evaluates to &lt;code&gt;True&lt;/code&gt; if you may specify &lt;code&gt;follow_symlinks=False&lt;/code&gt; when calling &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; on the local platform:</source>
          <target state="translated">特定の関数が&lt;em&gt;follow_symlinks&lt;/em&gt;パラメーターに &lt;code&gt;False&lt;/code&gt; を受け入れるかどうかを確認するには、&lt;em&gt;supports_follow_symlinks &lt;/em&gt; &lt;code&gt;in&lt;/code&gt; 演算子を使用し &lt;code&gt;supports_follow_symlinks&lt;/code&gt; 。例として、ローカルプラットフォームで&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;を呼び出すときに &lt;code&gt;follow_symlinks=False&lt;/code&gt; を指定できる場合、この式は &lt;code&gt;True&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="6a19f8267a804bed2cc6e4cb5709e33adda2cd86" translate="yes" xml:space="preserve">
          <source>To check whether a particular function accepts an open file descriptor for its &lt;em&gt;dir_fd&lt;/em&gt; parameter, use the &lt;code&gt;in&lt;/code&gt; operator on &lt;code&gt;supports_dir_fd&lt;/code&gt;. As an example, this expression evaluates to &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; accepts open file descriptors for &lt;em&gt;dir_fd&lt;/em&gt; on the local platform:</source>
          <target state="translated">特定の関数が&lt;em&gt;dir_fd&lt;/em&gt;パラメーターのオープンファイル記述子を受け入れるかどうかを確認するには、&lt;em&gt;supports_dir_fd &lt;/em&gt; &lt;code&gt;in&lt;/code&gt; 演算子を使用し &lt;code&gt;supports_dir_fd&lt;/code&gt; 。例として、&lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;がローカルプラットフォーム上の&lt;em&gt;dir_fdの&lt;/em&gt;オープンファイル記述子を受け入れる場合、この式は &lt;code&gt;True&lt;/code&gt; と評価されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9a5093ea51a15238b4b1605167c69ad6fd7b7468" translate="yes" xml:space="preserve">
          <source>To check which implementation will the generic function choose for a given type, use the &lt;code&gt;dispatch()&lt;/code&gt; attribute:</source>
          <target state="translated">特定の型に対してジェネリック関数がどの実装を選択するかを確認するには、 &lt;code&gt;dispatch()&lt;/code&gt; 属性を使用します。</target>
        </trans-unit>
        <trans-unit id="cffbae74923f0c8f4bcee465ec4c25d8823c6b00" translate="yes" xml:space="preserve">
          <source>To choose a sample from a range of integers, use a &lt;a href=&quot;stdtypes#range&quot;&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/a&gt; object as an argument. This is especially fast and space efficient for sampling from a large population: &lt;code&gt;sample(range(10000000), k=60)&lt;/code&gt;.</source>
          <target state="translated">整数の範囲からサンプルを選択するには、引数として&lt;a href=&quot;stdtypes#range&quot;&gt; &lt;code&gt;range()&lt;/code&gt; &lt;/a&gt;オブジェクトを使用します。これは、大規模な母集団からのサンプリングに特に高速でスペース効率が良いです： &lt;code&gt;sample(range(10000000), k=60)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b7dd8c80cfe20bb2e14df7147ef117b8925618f" translate="yes" xml:space="preserve">
          <source>To choose between &lt;a href=&quot;#threading.Condition.notify&quot;&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#threading.Condition.notify_all&quot;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt;, consider whether one state change can be interesting for only one or several waiting threads. E.g. in a typical producer-consumer situation, adding one item to the buffer only needs to wake up one consumer thread.</source>
          <target state="translated">&lt;a href=&quot;#threading.Condition.notify&quot;&gt; &lt;code&gt;notify()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#threading.Condition.notify_all&quot;&gt; &lt;code&gt;notify_all()&lt;/code&gt; の&lt;/a&gt;どちらかを選択するには、1つの状態変更が1つまたは複数の待機中のスレッドのみに関係するかどうかを検討してください。たとえば、一般的なプロデューサー/コンシューマーの状況では、1つのアイテムをバッファーに追加するときに必要なのは、1つのコンシューマースレッドを起動することだけです。</target>
        </trans-unit>
        <trans-unit id="41195aa7846cfb32030566deca5632cd7690db94" translate="yes" xml:space="preserve">
          <source>To clarify the above rules, here&amp;rsquo;s some example Python code, equivalent to the built-in hash, for computing the hash of a rational number, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;functions#complex&quot;&gt;&lt;code&gt;complex&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">上記のルールを明確にするために、有理数、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;数、または&lt;a href=&quot;functions#complex&quot;&gt; &lt;code&gt;complex&lt;/code&gt; &lt;/a&gt;のハッシュを計算するための組み込みハッシュに相当するPythonコードの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="5b14bc137208bc1c60d307e4cf65b6dfa3f703a0" translate="yes" xml:space="preserve">
          <source>To collect the inner text of an element, see &lt;a href=&quot;#xml.etree.ElementTree.Element.itertext&quot;&gt;&lt;code&gt;itertext()&lt;/code&gt;&lt;/a&gt;, for example &lt;code&gt;&quot;&quot;.join(element.itertext())&lt;/code&gt;.</source>
          <target state="translated">要素の内部テキストを収集するには、 &lt;code&gt;&quot;&quot;.join(element.itertext())&lt;/code&gt; などの&lt;a href=&quot;#xml.etree.ElementTree.Element.itertext&quot;&gt; &lt;code&gt;itertext()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="90f8874e7ddc4712ffa50b77f81e993f131bedbd" translate="yes" xml:space="preserve">
          <source>To compile the executable, you can either just use the standard MSVC command line tools, or you can take advantage of the fact that distutils knows how to compile Python source:</source>
          <target state="translated">実行ファイルをコンパイルするには、標準の MSVC コマンドラインツールを使うか、distutils が Python ソースのコンパイル方法を知っているという事実を利用するかのどちらかです。</target>
        </trans-unit>
        <trans-unit id="f05187baf6012be5553f969aef8548cf6b88338a" translate="yes" xml:space="preserve">
          <source>To compute the product of an iterable with itself, specify the number of repetitions with the optional &lt;em&gt;repeat&lt;/em&gt; keyword argument. For example, &lt;code&gt;product(A, repeat=4)&lt;/code&gt; means the same as &lt;code&gt;product(A, A, A, A)&lt;/code&gt;.</source>
          <target state="translated">反復可能オブジェクトとそれ自体の積を計算するには、オプションの&lt;em&gt;repeat&lt;/em&gt;キーワード引数を使用して反復回数を指定します。たとえば、 &lt;code&gt;product(A, repeat=4)&lt;/code&gt; は、 &lt;code&gt;product(A, A, A, A)&lt;/code&gt; と同じことを意味します。</target>
        </trans-unit>
        <trans-unit id="7e49a1c57330c177b754abd74b01b2d48765dccf" translate="yes" xml:space="preserve">
          <source>To configure return values on methods of &lt;em&gt;instances&lt;/em&gt; on the patched class you must do this on the &lt;code&gt;return_value&lt;/code&gt;. For example:</source>
          <target state="translated">パッチを適用したクラスの&lt;em&gt;インスタンスの&lt;/em&gt;メソッドで戻り値を構成するには、 &lt;code&gt;return_value&lt;/code&gt; でこれを行う必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="eaae56af4b61d6444086b8fd2c7dd4d70db5a251" translate="yes" xml:space="preserve">
          <source>To configure the tree column heading, call this with column = &amp;ldquo;#0&amp;rdquo;.</source>
          <target state="translated">ツリーの列見出しを構成するには、column =&amp;ldquo;＃0&amp;rdquo;でこれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="40e519f199f0660c1da27aa291b04f750c9d1934" translate="yes" xml:space="preserve">
          <source>To configure the tree column, call this with column = &amp;ldquo;#0&amp;rdquo;</source>
          <target state="translated">ツリー列を構成するには、これをcolumn =&amp;ldquo;＃0&amp;rdquo;で呼び出します。</target>
        </trans-unit>
        <trans-unit id="22dec9507a65d01d963843a88d1fb9139886cc92" translate="yes" xml:space="preserve">
          <source>To convert a dictionary to a named tuple, use the double-star-operator (as described in &lt;a href=&quot;https://docs.python.org/3.8/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;Unpacking Argument Lists&lt;/a&gt;):</source>
          <target state="translated">辞書を名前付きタプルに変換するには、double-star-operatorを使用します（&lt;a href=&quot;https://docs.python.org/3.8/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;引数リストの解凍で&lt;/a&gt;説明されています）。</target>
        </trans-unit>
        <trans-unit id="9edc33eaf040525095ed5a4c96668d2991bae3d7" translate="yes" xml:space="preserve">
          <source>To convert a dictionary to a named tuple, use the double-star-operator (as described in &lt;a href=&quot;https://docs.python.org/3.9/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;Unpacking Argument Lists&lt;/a&gt;):</source>
          <target state="translated">To convert a dictionary to a named tuple, use the double-star-operator (as described in &lt;a href=&quot;https://docs.python.org/3.9/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;Unpacking Argument Lists&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="aca86a0be8c48cdfd48ca2728336953279aaed88" translate="yes" xml:space="preserve">
          <source>To copy all mail from a Babyl mailbox to an MH mailbox, converting all of the format-specific information that can be converted:</source>
          <target state="translated">バビルのメールボックスからMHのメールボックスに全てのメールをコピーするために、変換できるフォーマット固有の情報を全て変換します。</target>
        </trans-unit>
        <trans-unit id="a7a4d66aac534d7a89b1d842a9b4699051775cbd" translate="yes" xml:space="preserve">
          <source>To create a heap, use a list initialized to &lt;code&gt;[]&lt;/code&gt;, or you can transform a populated list into a heap via function &lt;a href=&quot;#heapq.heapify&quot;&gt;&lt;code&gt;heapify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ヒープを作成するには、 &lt;code&gt;[]&lt;/code&gt; に初期化されたリストを使用するか、関数&lt;a href=&quot;#heapq.heapify&quot;&gt; &lt;code&gt;heapify()&lt;/code&gt; &lt;/a&gt;を使用して、入力されたリストをヒープに変換できます。</target>
        </trans-unit>
        <trans-unit id="a67c0ed9117c7f46c3f4e7b0dc05a0ed833eaec5" translate="yes" xml:space="preserve">
          <source>To create one&amp;rsquo;s own manager, one creates a subclass of &lt;a href=&quot;#multiprocessing.managers.BaseManager&quot;&gt;&lt;code&gt;BaseManager&lt;/code&gt;&lt;/a&gt; and uses the &lt;a href=&quot;#multiprocessing.managers.BaseManager.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt; classmethod to register new types or callables with the manager class. For example:</source>
          <target state="translated">独自のマネージャーを作成するには、&lt;a href=&quot;#multiprocessing.managers.BaseManager&quot;&gt; &lt;code&gt;BaseManager&lt;/code&gt; の&lt;/a&gt;サブクラスを作成し、&lt;a href=&quot;#multiprocessing.managers.BaseManager.register&quot;&gt; &lt;code&gt;register()&lt;/code&gt; &lt;/a&gt;クラスメソッドを使用して、マネージャークラスに新しいタイプまたは呼び出し可能オブジェクトを登録します。例えば：</target>
        </trans-unit>
        <trans-unit id="def08ca7414daf6c9ffb9d1b7d48a4054a6f3646" translate="yes" xml:space="preserve">
          <source>To define a generic function, decorate it with the &lt;code&gt;@singledispatch&lt;/code&gt; decorator. Note that the dispatch happens on the type of the first argument, create your function accordingly:</source>
          <target state="translated">ジェネリック関数を定義するには、 &lt;code&gt;@singledispatch&lt;/code&gt; デコレーターで修飾します。ディスパッチは最初の引数のタイプで行われることに注意してください。それに応じて関数を作成します。</target>
        </trans-unit>
        <trans-unit id="ec0a2fc9637c4cdce9a5093c1c6fc720d969cd66" translate="yes" xml:space="preserve">
          <source>To define a generic method, decorate it with the &lt;code&gt;@singledispatchmethod&lt;/code&gt; decorator. Note that the dispatch happens on the type of the first non-self or non-cls argument, create your function accordingly:</source>
          <target state="translated">ジェネリックメソッドを定義するには、 &lt;code&gt;@singledispatchmethod&lt;/code&gt; デコレーターでデコレートします。ディスパッチは最初のnon-selfまたはnon-cls引数のタイプで発生することに注意してください。それに応じて関数を作成します。</target>
        </trans-unit>
        <trans-unit id="53e197460df6a7ae10480906b29b24cc193de048" translate="yes" xml:space="preserve">
          <source>To define a union, use e.g. &lt;code&gt;Union[int, str]&lt;/code&gt;. Details:</source>
          <target state="translated">共用体を定義するには、例えば &lt;code&gt;Union[int, str]&lt;/code&gt; 使用します。詳細：</target>
        </trans-unit>
        <trans-unit id="c3927e01fc5b5632db956bd430c64a9a003d5d89" translate="yes" xml:space="preserve">
          <source>To demonstrate several uses of the &lt;a href=&quot;#module-pprint&quot;&gt;&lt;code&gt;pprint()&lt;/code&gt;&lt;/a&gt; function and its parameters, let&amp;rsquo;s fetch information about a project from &lt;a href=&quot;https://pypi.org&quot;&gt;PyPI&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#module-pprint&quot;&gt; &lt;code&gt;pprint()&lt;/code&gt; &lt;/a&gt;関数とそのパラメーターのいくつかの使用法を示すために、プロジェクトに関する情報を&lt;a href=&quot;https://pypi.org&quot;&gt;PyPI&lt;/a&gt;からフェッチします。</target>
        </trans-unit>
        <trans-unit id="424ceed038a8907eb2e5c3e3261ed2cb0006ff29" translate="yes" xml:space="preserve">
          <source>To determine whether a particular function permits specifying an open file descriptor for its &lt;em&gt;path&lt;/em&gt; parameter, use the &lt;code&gt;in&lt;/code&gt; operator on &lt;code&gt;supports_fd&lt;/code&gt;. As an example, this expression evaluates to &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#os.chdir&quot;&gt;&lt;code&gt;os.chdir()&lt;/code&gt;&lt;/a&gt; accepts open file descriptors for &lt;em&gt;path&lt;/em&gt; on your local platform:</source>
          <target state="translated">特定の関数がその&lt;em&gt;path&lt;/em&gt;パラメーターにオープンファイル記述子を指定できるかどうかを判断するには、 &lt;code&gt;supports_fd&lt;/code&gt; &lt;code&gt;in&lt;/code&gt; 演算子を使用します。例として、&lt;a href=&quot;#os.chdir&quot;&gt; &lt;code&gt;os.chdir()&lt;/code&gt; が&lt;/a&gt;ローカルプラットフォーム上の&lt;em&gt;パスの&lt;/em&gt;オープンファイル記述子を受け入れる場合、この式は &lt;code&gt;True&lt;/code&gt; と評価されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1054223eda970969071e95bb7d866ebfd8c752ad" translate="yes" xml:space="preserve">
          <source>To disable autodetected proxy pass an empty dictionary.</source>
          <target state="translated">自動検出プロキシを無効にするには、空の辞書を渡します。</target>
        </trans-unit>
        <trans-unit id="f9cab41974091422ee9f72c252520e5936e0afb6" translate="yes" xml:space="preserve">
          <source>To do just the former:</source>
          <target state="translated">前者だけをやること。</target>
        </trans-unit>
        <trans-unit id="c80beb2d9874cb37ef475b5e1a40bd3aa13b619d" translate="yes" xml:space="preserve">
          <source>To document when incompatible changes were introduced, and when they will be &amp;mdash; or were &amp;mdash; made mandatory. This is a form of executable documentation, and can be inspected programmatically via importing &lt;a href=&quot;#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; and examining its contents.</source>
          <target state="translated">互換性のない変更がいつ導入されたか、およびそれらがいつ義務付けられるか、あるいは義務付けられたかを文書化する。これは実行可能なドキュメントの形式であり、&lt;a href=&quot;#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt;をインポートしてその内容を調べることにより、プログラムで検査できます。</target>
        </trans-unit>
        <trans-unit id="2bebf05987b55dff22afd0eef3267ff60584d0ea" translate="yes" xml:space="preserve">
          <source>To ease the use of various types of files, the argparse module provides the factory FileType which takes the &lt;code&gt;mode=&lt;/code&gt;, &lt;code&gt;bufsize=&lt;/code&gt;, &lt;code&gt;encoding=&lt;/code&gt; and &lt;code&gt;errors=&lt;/code&gt; arguments of the &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function. For example, &lt;code&gt;FileType('w')&lt;/code&gt; can be used to create a writable file:</source>
          <target state="translated">さまざまなタイプのファイルの使用を容易にするために、argparseモジュールは、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;関数の &lt;code&gt;mode=&lt;/code&gt; 、 &lt;code&gt;bufsize=&lt;/code&gt; 、 &lt;code&gt;encoding=&lt;/code&gt; 、および &lt;code&gt;errors=&lt;/code&gt; 引数を取るファクトリーFileTypeを提供します。たとえば、 &lt;code&gt;FileType('w')&lt;/code&gt; を使用して、書き込み可能なファイルを作成できます。</target>
        </trans-unit>
        <trans-unit id="7c54845e78ca91a3d466e12c51c7e58cd7c952c9" translate="yes" xml:space="preserve">
          <source>To enable easier handling of syslog messages in the face of all these differing daemon behaviours, the appending of the NUL byte has been made configurable, through the use of a class-level attribute, &lt;code&gt;append_nul&lt;/code&gt;. This defaults to &lt;code&gt;True&lt;/code&gt; (preserving the existing behaviour) but can be set to &lt;code&gt;False&lt;/code&gt; on a &lt;code&gt;SysLogHandler&lt;/code&gt; instance in order for that instance to &lt;em&gt;not&lt;/em&gt; append the NUL terminator.</source>
          <target state="translated">これらの異なるデーモンの動作すべてに直面してsyslogメッセージをより簡単に処理できるようにするために、クラスレベルの属性 &lt;code&gt;append_nul&lt;/code&gt; を使用することにより、NULバイトの追加が構成可能になっています。これはデフォルトで &lt;code&gt;True&lt;/code&gt; （既存の動作を維持）ですが、 &lt;code&gt;SysLogHandler&lt;/code&gt; インスタンスでNULターミネーターを追加し&lt;em&gt;ない&lt;/em&gt;ように、 &lt;code&gt;False&lt;/code&gt; に設定できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cc49076076cfe4da08bd1523950aa22f8527f645" translate="yes" xml:space="preserve">
          <source>To enable registering lambdas and pre-existing functions, the &lt;code&gt;register()&lt;/code&gt; attribute can be used in a functional form:</source>
          <target state="translated">ラムダと既存の関数の登録を有効にするには、 &lt;code&gt;register()&lt;/code&gt; 属性を関数形式で使用できます。</target>
        </trans-unit>
        <trans-unit id="c127349c822a4f335881123ec8ddf1bf0af08254" translate="yes" xml:space="preserve">
          <source>To enable the Python Development Mode without installing debug hooks on memory allocators, set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONMALLOC&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">To enable the Python Development Mode without installing debug hooks on memory allocators, set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONMALLOC&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONMALLOC&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e6d29707b8a46ad95075a2f46ea912153c6feb3e" translate="yes" xml:space="preserve">
          <source>To enable this feature, simply add this to the top of your CGI script:</source>
          <target state="translated">この機能を有効にするには、これを CGI スクリプトの先頭に追加します。</target>
        </trans-unit>
        <trans-unit id="83bc49702d610686bdeda107bfc7569cda15cc78" translate="yes" xml:space="preserve">
          <source>To enable, pass a &lt;em&gt;depth&lt;/em&gt; value greater than zero; this sets the number of frames whose information will be captured. To disable, pass set &lt;em&gt;depth&lt;/em&gt; to zero.</source>
          <target state="translated">有効にするには、ゼロより大きい&lt;em&gt;深度&lt;/em&gt;値を渡します。これは、情報がキャプチャされるフレームの数を設定します。無効にするには、&lt;em&gt;深度&lt;/em&gt;をゼロに設定します。</target>
        </trans-unit>
        <trans-unit id="668347bab37e711c30026491f866da05c6606f00" translate="yes" xml:space="preserve">
          <source>To encode &lt;code&gt;str&lt;/code&gt; filenames to &lt;code&gt;bytes&lt;/code&gt;, use &lt;a href=&quot;#os.fsencode&quot;&gt;&lt;code&gt;fsencode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; ファイル名を &lt;code&gt;bytes&lt;/code&gt; エンコードするには、&lt;a href=&quot;#os.fsencode&quot;&gt; &lt;code&gt;fsencode()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="9ce50989ce66ad69407e9680bd28212c88a6fa36" translate="yes" xml:space="preserve">
          <source>To ensure that &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#future&quot;&gt;future statements&lt;/a&gt; run under releases prior to 2.1 at least yield runtime exceptions (the import of &lt;a href=&quot;#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; will fail, because there was no module of that name prior to 2.1).</source>
          <target state="translated">2.1より前のリリースで&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#future&quot;&gt;将来のステートメントが&lt;/a&gt;実行されるようにするには、少なくともランタイム例外が発生します（2.1より前のその名前のモジュールがなかったため、&lt;a href=&quot;#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt;のインポートは失敗します）。</target>
        </trans-unit>
        <trans-unit id="08b2c8e368b6b95903d3fe48002c97fc7e6f09aa" translate="yes" xml:space="preserve">
          <source>To ensure that &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#future&quot;&gt;future statements&lt;/a&gt; run under releases prior to 2.1 at least yield runtime exceptions (the import of &lt;a href=&quot;#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; will fail, because there was no module of that name prior to 2.1).</source>
          <target state="translated">To ensure that &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#future&quot;&gt;future statements&lt;/a&gt; run under releases prior to 2.1 at least yield runtime exceptions (the import of &lt;a href=&quot;#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt; will fail, because there was no module of that name prior to 2.1).</target>
        </trans-unit>
        <trans-unit id="ad4b05251097cbcad85d3ec00b6a8d792705b9f3" translate="yes" xml:space="preserve">
          <source>To ensure validity of the created memory mapping the file specified by the descriptor &lt;em&gt;fileno&lt;/em&gt; is internally automatically synchronized with physical backing store on Mac OS X and OpenVMS.</source>
          <target state="translated">作成されたメモリマッピングの有効性を保証するために、記述子&lt;em&gt;filenoで&lt;/em&gt;指定されたファイルは、Mac OS XおよびOpenVMS上の物理バッキングストアと内部で自動的に同期されます。</target>
        </trans-unit>
        <trans-unit id="ec99a7a8d8cca50de20982646e9d30ebc48118e8" translate="yes" xml:space="preserve">
          <source>To enumerate all distinct multisets of a given size over a given set of elements, see &lt;a href=&quot;itertools#itertools.combinations_with_replacement&quot;&gt;&lt;code&gt;itertools.combinations_with_replacement()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">要素の特定のセットに対する特定のサイズのすべての異なるマルチセットを列挙するには、&lt;a href=&quot;itertools#itertools.combinations_with_replacement&quot;&gt; &lt;code&gt;itertools.combinations_with_replacement()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="898a56a1cfb92055d38cc5a56c7cdec6b0701f08" translate="yes" xml:space="preserve">
          <source>To estimate the distribution for a model than isn&amp;rsquo;t easy to solve analytically, &lt;a href=&quot;#statistics.NormalDist&quot;&gt;&lt;code&gt;NormalDist&lt;/code&gt;&lt;/a&gt; can generate input samples for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo simulation&lt;/a&gt;:</source>
          <target state="translated">解析的に解決するのが&lt;a href=&quot;#statistics.NormalDist&quot;&gt; &lt;code&gt;NormalDist&lt;/code&gt; &lt;/a&gt;モデルの分布を推定するために、NormalDistは&lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;モンテカルロシミュレーションの&lt;/a&gt;入力サンプルを生成できます。</target>
        </trans-unit>
        <trans-unit id="2437b05ca67db6b8d2019788d70624cc8482ee86" translate="yes" xml:space="preserve">
          <source>To extend this to recognize other objects, subclass and implement a &lt;a href=&quot;#json.JSONEncoder.default&quot;&gt;&lt;code&gt;default()&lt;/code&gt;&lt;/a&gt; method with another method that returns a serializable object for &lt;code&gt;o&lt;/code&gt; if possible, otherwise it should call the superclass implementation (to raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">これを拡張して他のオブジェクトを認識するには、可能な場合は &lt;code&gt;o&lt;/code&gt; の直列化可能オブジェクトを返す別のメソッドで&lt;a href=&quot;#json.JSONEncoder.default&quot;&gt; &lt;code&gt;default()&lt;/code&gt; &lt;/a&gt;メソッドをサブクラス化して実装します。そうでない場合は、スーパークラス実装を呼び出します（&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を発生&lt;/a&gt;させるため）。</target>
        </trans-unit>
        <trans-unit id="0b9e1f981c214898a9d71b2ad2be102d9cb21352" translate="yes" xml:space="preserve">
          <source>To extract the filename and numbers from a string like</source>
          <target state="translated">のような文字列からファイル名と数字を抽出するには</target>
        </trans-unit>
        <trans-unit id="64c57258a9a2df67300aa5e1b50e7550f07b07d6" translate="yes" xml:space="preserve">
          <source>To fill in &lt;em&gt;fmt&lt;/em&gt;, execute &lt;code&gt;fmt % part_info&lt;/code&gt;, where &lt;code&gt;part_info&lt;/code&gt; is a dictionary composed of the following keys and values:</source>
          <target state="translated">埋めるために&lt;em&gt;、FMT&lt;/em&gt;、実行 &lt;code&gt;fmt % part_info&lt;/code&gt; 、ここ &lt;code&gt;part_info&lt;/code&gt; は以下のキーと値からなる辞書です。</target>
        </trans-unit>
        <trans-unit id="7958039c320a93b4dae438db3d31f1e69c695544" translate="yes" xml:space="preserve">
          <source>To find out the correct calling convention you have to look into the C header file or the documentation for the function you want to call.</source>
          <target state="translated">正しい呼び出し規則を知るためには、Cのヘッダファイルや呼び出したい関数のドキュメントを調べなければなりません。</target>
        </trans-unit>
        <trans-unit id="b76d7e840b24dc0f55fd8a37a5d7e8f61bf8991d" translate="yes" xml:space="preserve">
          <source>To find out what card the pair consists of, one could use the &lt;a href=&quot;#re.Match.group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; method of the match object in the following manner:</source>
          <target state="translated">ペアがどのカードで構成されているかを調べるには、次の方法で、一致オブジェクトの&lt;a href=&quot;#re.Match.group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="cba99c69fa84b2f2263e7863f73140aabcbd1b17" translate="yes" xml:space="preserve">
          <source>To find the handler, look for the following keys in the registry, stopping with the first one found:</source>
          <target state="translated">ハンドラを見つけるには、レジストリ内の以下のキーを探し、最初に見つかったキーで停止します。</target>
        </trans-unit>
        <trans-unit id="a06e17885d0bbc13034b00f92ad215110abd6ebf" translate="yes" xml:space="preserve">
          <source>To find the handler, obtain the type of &lt;em&gt;obj&lt;/em&gt; (&lt;code&gt;typ = type(obj)&lt;/code&gt;), and look for the following keys in the registry, stopping with the first one found:</source>
          <target state="translated">ハンドラを見つけるには、&lt;em&gt;obj&lt;/em&gt;のタイプ（ &lt;code&gt;typ = type(obj)&lt;/code&gt; ）を取得し、レジストリで次のキーを探します。最初に見つかったキーで停止します。</target>
        </trans-unit>
        <trans-unit id="fa5f6e01845faa817f7bbcccd8a26a392e5b5f5b" translate="yes" xml:space="preserve">
          <source>To find the name of the file containing the object.</source>
          <target state="translated">オブジェクトを含むファイルの名前を検索します。</target>
        </trans-unit>
        <trans-unit id="7ba93089e99aaca64717295e4916acb713510642" translate="yes" xml:space="preserve">
          <source>To force a recompile of all the &lt;code&gt;.py&lt;/code&gt; files in the &lt;code&gt;Lib/&lt;/code&gt; subdirectory and all its subdirectories:</source>
          <target state="translated">&lt;code&gt;Lib/&lt;/code&gt; サブディレクトリとそのすべてのサブディレクトリにあるすべての &lt;code&gt;.py&lt;/code&gt; ファイルを強制的に再コンパイルするには：</target>
        </trans-unit>
        <trans-unit id="35bebc28881a876ed876e6f04e3b4c2f536762a9" translate="yes" xml:space="preserve">
          <source>To format only a tuple you should therefore provide a singleton tuple whose only element is the tuple to be formatted.</source>
          <target state="translated">タプルのみをフォーマットするには、そのため、フォーマットされるタプルの要素のみを持つシングルトンタプルを提供しなければなりません。</target>
        </trans-unit>
        <trans-unit id="332786b03f1a7ce007ac7b10bd4b080b17a03a5c" translate="yes" xml:space="preserve">
          <source>To generate a hash of a password using the strongest available method and check it against the original:</source>
          <target state="translated">利用可能な最も強力な方法を使用してパスワードのハッシュを生成し、それを元のものと照合する。</target>
        </trans-unit>
        <trans-unit id="06c31764bc0616e4052301f18b4bda631b48f9b9" translate="yes" xml:space="preserve">
          <source>To get an aware &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object, call &lt;a href=&quot;#datetime.datetime.fromtimestamp&quot;&gt;&lt;code&gt;fromtimestamp()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">認識される&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトを取得するには、&lt;a href=&quot;#datetime.datetime.fromtimestamp&quot;&gt; &lt;code&gt;fromtimestamp()&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="f6536929738b6302b242f75ab30f3360374015a5" translate="yes" xml:space="preserve">
          <source>To get at submitted form data, use the &lt;code&gt;FieldStorage&lt;/code&gt; class. If the form contains non-ASCII characters, use the &lt;em&gt;encoding&lt;/em&gt; keyword parameter set to the value of the encoding defined for the document. It is usually contained in the META tag in the HEAD section of the HTML document or by the &lt;em&gt;Content-Type&lt;/em&gt; header). This reads the form contents from the standard input or the environment (depending on the value of various environment variables set according to the CGI standard). Since it may consume standard input, it should be instantiated only once.</source>
          <target state="translated">送信されたフォームデータを取得するには、 &lt;code&gt;FieldStorage&lt;/code&gt; クラスを使用します。フォームに非ASCII文字が含まれている場合は、ドキュメントに定義されているエンコーディングの値に設定された&lt;em&gt;encoding&lt;/em&gt;キーワードパラメータを使用します。通常は、HTMLドキュメントのHEADセクションのMETAタグに含まれるか、&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーに含まれます。これは、標準入力または環境からフォームの内容を読み取ります（CGI標準に従って設定されたさまざまな環境変数の値によって異なります）。標準入力を消費する可能性があるため、インスタンス化は1回だけにする必要があります。</target>
        </trans-unit>
        <trans-unit id="ab0473a669281e7d941bb9f45175bd85a5a4f97c" translate="yes" xml:space="preserve">
          <source>To get at the &amp;ldquo;64-bitness&amp;rdquo; of the current interpreter, it is more reliable to query the &lt;a href=&quot;sys#sys.maxsize&quot;&gt;&lt;code&gt;sys.maxsize&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">現在のインタプリタの「64ビット」を取得するには、&lt;a href=&quot;sys#sys.maxsize&quot;&gt; &lt;code&gt;sys.maxsize&lt;/code&gt; &lt;/a&gt;属性をクエリする方が信頼性が高くなります。</target>
        </trans-unit>
        <trans-unit id="cbc6bb2323f202cb1f1a72bf35bb7dcec42b3136" translate="yes" xml:space="preserve">
          <source>To get at the toplevel window that contains a given widget, you can often just refer to the widget&amp;rsquo;s master. Of course if the widget has been packed inside of a frame, the master won&amp;rsquo;t represent a toplevel window. To get at the toplevel window that contains an arbitrary widget, you can call the &lt;code&gt;_root()&lt;/code&gt; method. This method begins with an underscore to denote the fact that this function is part of the implementation, and not an interface to Tk functionality.</source>
          <target state="translated">特定のウィジェットを含むトップレベルウィンドウを表示するには、多くの場合、ウィジェットのマスターを参照するだけです。もちろん、ウィジェットがフレーム内にパックされている場合、マスターはトップレベルウィンドウを表しません。任意のウィジェットを含むトップレベルウィンドウにアクセスするには、 &lt;code&gt;_root()&lt;/code&gt; メソッドを呼び出します。このメソッドはアンダースコアで始まり、この関数は実装の一部であり、Tk機能へのインターフェースではないことを示しています。</target>
        </trans-unit>
        <trans-unit id="7cbd4a63827073f5739e1664d7bb9679b9a9e8fa" translate="yes" xml:space="preserve">
          <source>To get fine-grained control over the copied region, the second form of &lt;a href=&quot;#curses.window.overlay&quot;&gt;&lt;code&gt;overlay()&lt;/code&gt;&lt;/a&gt; can be used. &lt;em&gt;sminrow&lt;/em&gt; and &lt;em&gt;smincol&lt;/em&gt; are the upper-left coordinates of the source window, and the other variables mark a rectangle in the destination window.</source>
          <target state="translated">コピーされた領域をきめ細かく制御するには、&lt;a href=&quot;#curses.window.overlay&quot;&gt; &lt;code&gt;overlay()&lt;/code&gt; の&lt;/a&gt; 2番目の形式を使用できます。&lt;em&gt;sminrow&lt;/em&gt;と&lt;em&gt;smincol&lt;/em&gt;はソースウィンドウの左上座標であり、他の変数は宛先ウィンドウの長方形を示します。</target>
        </trans-unit>
        <trans-unit id="b1f50e6db25d673b2592cd594d33fefebf9e6b13" translate="yes" xml:space="preserve">
          <source>To get fine-grained control over the copied region, the second form of &lt;a href=&quot;#curses.window.overwrite&quot;&gt;&lt;code&gt;overwrite()&lt;/code&gt;&lt;/a&gt; can be used. &lt;em&gt;sminrow&lt;/em&gt; and &lt;em&gt;smincol&lt;/em&gt; are the upper-left coordinates of the source window, the other variables mark a rectangle in the destination window.</source>
          <target state="translated">コピーされた領域をきめ細かく制御するには、&lt;a href=&quot;#curses.window.overwrite&quot;&gt; &lt;code&gt;overwrite()&lt;/code&gt; の&lt;/a&gt; 2番目の形式を使用できます。&lt;em&gt;sminrow&lt;/em&gt;と&lt;em&gt;smincol&lt;/em&gt;はソースウィンドウの左上座標であり、他の変数は宛先ウィンドウの長方形を示します。</target>
        </trans-unit>
        <trans-unit id="28c7761539a23e6461abc6d90290b5c162e222dd" translate="yes" xml:space="preserve">
          <source>To get interpolation, use &lt;a href=&quot;#configparser.ConfigParser&quot;&gt;&lt;code&gt;ConfigParser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">補間を取得するには、&lt;a href=&quot;#configparser.ConfigParser&quot;&gt; &lt;code&gt;ConfigParser&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="897f9f1483241234fc1680d5c01aaac400825b5f" translate="yes" xml:space="preserve">
          <source>To get started, here is a simple callback that shows the values it gets passed:</source>
          <target state="translated">まずは、渡される値を示すシンプルなコールバックを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="9a15fb1b51bc74d10a0368adfb2541b410554600" translate="yes" xml:space="preserve">
          <source>To get the full set of requirements for a distribution, use the &lt;code&gt;requires()&lt;/code&gt; function:</source>
          <target state="translated">ディストリビューションのすべての要件を取得するには、 &lt;code&gt;requires()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="ac4c75c92e6f6f900761b506c028a1a4ab5d16ff" translate="yes" xml:space="preserve">
          <source>To give a field a default value, you can assign to it in the class body:</source>
          <target state="translated">フィールドにデフォルト値を与えるには、クラス本体でそれに代入することができます。</target>
        </trans-unit>
        <trans-unit id="ec8970880073f2a4193628e073a34bef2505adc6" translate="yes" xml:space="preserve">
          <source>To give a widget to the packer (geometry manager), you call pack with optional arguments. In Tkinter, the Pack class holds all this functionality, and the various forms of the pack command are implemented as methods. All widgets in &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; are subclassed from the Packer, and so inherit all the packing methods. See the &lt;a href=&quot;tkinter.tix#module-tkinter.tix&quot;&gt;&lt;code&gt;tkinter.tix&lt;/code&gt;&lt;/a&gt; module documentation for additional information on the Form geometry manager.</source>
          <target state="translated">ウィジェットをパッカー（ジオメトリマネージャー）に渡すには、オプションの引数を指定してpackを呼び出します。Tkinterでは、Packクラスがこのすべての機能を保持し、さまざまな形式のpackコマンドがメソッドとして実装されています。&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; の&lt;/a&gt;すべてのウィジェットはPackerからサブクラス化されているため、すべてのパッキングメソッドを継承します。フォームジオメトリマネージャの詳細については、&lt;a href=&quot;tkinter.tix#module-tkinter.tix&quot;&gt; &lt;code&gt;tkinter.tix&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="15b1f3430d82190dc49a1cc998bb829e9af91209" translate="yes" xml:space="preserve">
          <source>To give the &lt;a href=&quot;#module-timeit&quot;&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/a&gt; module access to functions you define, you can pass a &lt;em&gt;setup&lt;/em&gt; parameter which contains an import statement:</source>
          <target state="translated">定義した関数へのアクセスを&lt;a href=&quot;#module-timeit&quot;&gt; &lt;code&gt;timeit&lt;/code&gt; &lt;/a&gt;モジュールに与えるために、インポートステートメントを含む&lt;em&gt;セットアップ&lt;/em&gt;パラメーターを渡すことができ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="da2a8f38b351487cbd3ba16c13bda7764e126ce4" translate="yes" xml:space="preserve">
          <source>To handle signals and to execute subprocesses, the event loop must be run in the main thread.</source>
          <target state="translated">シグナルを処理し、サブプロセスを実行するためには、メインスレッドでイベントループを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="685b9a90ebbf94251071857ab67987648cbe32d1" translate="yes" xml:space="preserve">
          <source>To help find the line number of the object within its file.</source>
          <target state="translated">ファイル内のオブジェクトの行番号を見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1e7a15938006fe056a0713c11808a9df9019ee29" translate="yes" xml:space="preserve">
          <source>To help keep Python 2 / Python 3 code in sync an &lt;code&gt;_order_&lt;/code&gt; attribute can be provided. It will be checked against the actual order of the enumeration and raise an error if the two do not match:</source>
          <target state="translated">Python 2 / Python 3コードの同期を維持するために、 &lt;code&gt;_order_&lt;/code&gt; 属性を指定できます。列挙の実際の順序に対してチェックされ、2つが一致しない場合はエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="eec8921c87539961c80aa82a8464e7801a7c0417" translate="yes" xml:space="preserve">
          <source>To help measure the effectiveness of the cache and tune the &lt;em&gt;maxsize&lt;/em&gt; parameter, the wrapped function is instrumented with a &lt;code&gt;cache_info()&lt;/code&gt; function that returns a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; showing &lt;em&gt;hits&lt;/em&gt;, &lt;em&gt;misses&lt;/em&gt;, &lt;em&gt;maxsize&lt;/em&gt; and &lt;em&gt;currsize&lt;/em&gt;. In a multi-threaded environment, the hits and misses are approximate.</source>
          <target state="translated">キャッシュとチューニングの効果測定を助けるために&lt;em&gt;MAXSIZEの&lt;/em&gt;パラメータを、ラップ機能がで計測され &lt;code&gt;cache_info()&lt;/code&gt; 関数でそれを返す&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;という名前のタプル&lt;/a&gt;を示す&lt;em&gt;ヒット&lt;/em&gt;、&lt;em&gt;ミス&lt;/em&gt;、&lt;em&gt;MAXSIZE&lt;/em&gt;と&lt;em&gt;currsizeを&lt;/em&gt;。マルチスレッド環境では、ヒットとミスは概算です。</target>
        </trans-unit>
        <trans-unit id="c340b25ec6098ae69fa3b09838bf2442ac5dfcf2" translate="yes" xml:space="preserve">
          <source>To help measure the effectiveness of the cache and tune the &lt;em&gt;maxsize&lt;/em&gt; parameter, the wrapped function is instrumented with a &lt;code&gt;cache_info()&lt;/code&gt; function that returns a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; showing &lt;em&gt;hits&lt;/em&gt;, &lt;em&gt;misses&lt;/em&gt;, &lt;em&gt;maxsize&lt;/em&gt; and &lt;em&gt;currsize&lt;/em&gt;. In a multi-threaded environment, the hits and misses are approximate.</source>
          <target state="translated">To help measure the effectiveness of the cache and tune the &lt;em&gt;maxsize&lt;/em&gt; parameter, the wrapped function is instrumented with a &lt;code&gt;cache_info()&lt;/code&gt; function that returns a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; showing &lt;em&gt;hits&lt;/em&gt;, &lt;em&gt;misses&lt;/em&gt;, &lt;em&gt;maxsize&lt;/em&gt; and &lt;em&gt;currsize&lt;/em&gt;. In a multi-threaded environment, the hits and misses are approximate.</target>
        </trans-unit>
        <trans-unit id="3e3fadbfda6fb4b04ad37db994c48401a0680ed3" translate="yes" xml:space="preserve">
          <source>To ignore certain arguments you can pass in objects that compare equal to &lt;em&gt;everything&lt;/em&gt;. Calls to &lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt;&lt;code&gt;assert_called_with()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt;&lt;code&gt;assert_called_once_with()&lt;/code&gt;&lt;/a&gt; will then succeed no matter what was passed in.</source>
          <target state="translated">特定の引数を無視するには、&lt;em&gt;すべてに&lt;/em&gt;等しいオブジェクトを渡すことができ&lt;em&gt;ます&lt;/em&gt;。その後、&lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt; &lt;code&gt;assert_called_with()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt; &lt;code&gt;assert_called_once_with()&lt;/code&gt; の&lt;/a&gt;呼び出しは、何が渡されても成功します。</target>
        </trans-unit>
        <trans-unit id="ed0a50ba92595cd542bd7bee7fb484c8f05170bb" translate="yes" xml:space="preserve">
          <source>To illustrate, the following examples all return a dictionary equal to &lt;code&gt;{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}&lt;/code&gt;:</source>
          <target state="translated">説明のために、以下の例はすべて &lt;code&gt;{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}&lt;/code&gt; 等しいディクショナリを返します。</target>
        </trans-unit>
        <trans-unit id="478307dcfca982cb8b33f10a2361f937679e0acd" translate="yes" xml:space="preserve">
          <source>To implement &lt;a href=&quot;#collections.deque&quot;&gt;&lt;code&gt;deque&lt;/code&gt;&lt;/a&gt; slicing, use a similar approach applying &lt;a href=&quot;#collections.deque.rotate&quot;&gt;&lt;code&gt;rotate()&lt;/code&gt;&lt;/a&gt; to bring a target element to the left side of the deque. Remove old entries with &lt;a href=&quot;#collections.deque.popleft&quot;&gt;&lt;code&gt;popleft()&lt;/code&gt;&lt;/a&gt;, add new entries with &lt;a href=&quot;#collections.deque.extend&quot;&gt;&lt;code&gt;extend()&lt;/code&gt;&lt;/a&gt;, and then reverse the rotation. With minor variations on that approach, it is easy to implement Forth style stack manipulations such as &lt;code&gt;dup&lt;/code&gt;, &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;swap&lt;/code&gt;, &lt;code&gt;over&lt;/code&gt;, &lt;code&gt;pick&lt;/code&gt;, &lt;code&gt;rot&lt;/code&gt;, and &lt;code&gt;roll&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#collections.deque&quot;&gt; &lt;code&gt;deque&lt;/code&gt; &lt;/a&gt;スライスを実装するには、同様のアプローチを使用して、&lt;a href=&quot;#collections.deque.rotate&quot;&gt; &lt;code&gt;rotate()&lt;/code&gt; &lt;/a&gt;を適用し、ターゲット要素を両端キューの左側に移動します。古いエントリを削除し&lt;a href=&quot;#collections.deque.popleft&quot;&gt; &lt;code&gt;popleft()&lt;/code&gt; &lt;/a&gt;、との新しいエントリを追加&lt;a href=&quot;#collections.deque.extend&quot;&gt; &lt;code&gt;extend()&lt;/code&gt; &lt;/a&gt;し、その後逆転。そのアプローチにわずかなバリエーションがあれば、 &lt;code&gt;dup&lt;/code&gt; 、 &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;swap&lt;/code&gt; 、 &lt;code&gt;over&lt;/code&gt; 、 &lt;code&gt;pick&lt;/code&gt; 、 &lt;code&gt;rot&lt;/code&gt; 、 &lt;code&gt;roll&lt;/code&gt; などのForthスタイルのスタック操作を簡単に実装できます。</target>
        </trans-unit>
        <trans-unit id="2168141fc28490c67d1b6910596eb2e7720cb5bd" translate="yes" xml:space="preserve">
          <source>To implement a new event loop policy, it is recommended to subclass &lt;a href=&quot;#asyncio.DefaultEventLoopPolicy&quot;&gt;&lt;code&gt;DefaultEventLoopPolicy&lt;/code&gt;&lt;/a&gt; and override the methods for which custom behavior is wanted, e.g.:</source>
          <target state="translated">新しいイベントループポリシーを実装するには、&lt;a href=&quot;#asyncio.DefaultEventLoopPolicy&quot;&gt; &lt;code&gt;DefaultEventLoopPolicy&lt;/code&gt; &lt;/a&gt;をサブクラス化し、カスタム動作が必要なメソッドをオーバーライドすることをお勧めします。例：</target>
        </trans-unit>
        <trans-unit id="cefc74e4478b86927f72685a3f4bbbb20664083e" translate="yes" xml:space="preserve">
          <source>To implement a service, you must derive a class from &lt;a href=&quot;#socketserver.BaseRequestHandler&quot;&gt;&lt;code&gt;BaseRequestHandler&lt;/code&gt;&lt;/a&gt; and redefine its &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method. You can then run various versions of the service by combining one of the server classes with your request handler class. The request handler class must be different for datagram or stream services. This can be hidden by using the handler subclasses &lt;a href=&quot;#socketserver.StreamRequestHandler&quot;&gt;&lt;code&gt;StreamRequestHandler&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#socketserver.DatagramRequestHandler&quot;&gt;&lt;code&gt;DatagramRequestHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">サービスを実装するには、&lt;a href=&quot;#socketserver.BaseRequestHandler&quot;&gt; &lt;code&gt;BaseRequestHandler&lt;/code&gt; &lt;/a&gt;からクラスを派生させ、その&lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt;メソッドを再定義する必要があります。その後、サーバークラスの1つと要求ハンドラクラスを組み合わせることで、さまざまなバージョンのサービスを実行できます。要求ハンドラクラスは、データグラムサービスまたはストリームサービスで異なる必要があります。これは、ハンドラサブクラス&lt;a href=&quot;#socketserver.StreamRequestHandler&quot;&gt; &lt;code&gt;StreamRequestHandler&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#socketserver.DatagramRequestHandler&quot;&gt; &lt;code&gt;DatagramRequestHandler&lt;/code&gt; &lt;/a&gt;を使用して非表示にできます。</target>
        </trans-unit>
        <trans-unit id="1785768c210239642eb9d634452c652d2df3cf43" translate="yes" xml:space="preserve">
          <source>To import a Python source file directly, use the following recipe (Python 3.5 and newer only):</source>
          <target state="translated">Pythonのソースファイルを直接インポートするには、以下のレシピを使用します(Python 3.5以降のみ)。</target>
        </trans-unit>
        <trans-unit id="0a158457267508cf938f916c4c196f27b6dc6670" translate="yes" xml:space="preserve">
          <source>To include a text document, use the &lt;code&gt;{http://www.w3.org/2001/XInclude}include&lt;/code&gt; element, and set the &lt;strong&gt;parse&lt;/strong&gt; attribute to &amp;ldquo;text&amp;rdquo;:</source>
          <target state="translated">テキストドキュメントを含めるには、 &lt;code&gt;{http://www.w3.org/2001/XInclude}include&lt;/code&gt; include 要素を使用して、&lt;strong&gt;parse&lt;/strong&gt;属性を「text」に設定します。</target>
        </trans-unit>
        <trans-unit id="103c745176746075c187f9dacccc25564fca2bc7" translate="yes" xml:space="preserve">
          <source>To interoperate with networking interfaces such as the socket module, addresses must be converted to strings or integers. This is handled using the &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/a&gt; builtin functions:</source>
          <target state="translated">ソケットモジュールなどのネットワークインターフェイスと相互運用するには、アドレスを文字列または整数に変換する必要があります。これは、組み込み関数&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int()&lt;/code&gt; &lt;/a&gt;を使用して処理されます。</target>
        </trans-unit>
        <trans-unit id="66bda8be924c407f66490a684c3b21482c6ac623" translate="yes" xml:space="preserve">
          <source>To lock the lock, a thread calls its &lt;a href=&quot;#threading.RLock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; method; this returns once the thread owns the lock. To unlock the lock, a thread calls its &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; method. &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; call pairs may be nested; only the final &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; (the &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; of the outermost pair) resets the lock to unlocked and allows another thread blocked in &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; to proceed.</source>
          <target state="translated">ロックをロックするために、スレッドは、&lt;a href=&quot;#threading.RLock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。これは、スレッドがロックを所有すると戻ります。ロックを解除するために、スレッドは&lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。&lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; の&lt;/a&gt;呼び出しペアはネストできます。唯一の最終&lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt;最も外側のペアの）がアンロックにロックをリセットし、別のスレッドがでブロックでき&lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt;に進行します。</target>
        </trans-unit>
        <trans-unit id="b784db9baba0395d4c3539a334c8993acd6900c8" translate="yes" xml:space="preserve">
          <source>To loop over the standard input, or the list of files given on the command line, see the &lt;a href=&quot;fileinput#module-fileinput&quot;&gt;&lt;code&gt;fileinput&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">標準入力またはコマンドラインで指定されたファイルのリストをループするには、&lt;a href=&quot;fileinput#module-fileinput&quot;&gt; &lt;code&gt;fileinput&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="98a046cb12aaa67ff00dce659507a1d1bdf50a19" translate="yes" xml:space="preserve">
          <source>To maintain compatibility with other platforms, not only the &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; variable is tested, but a list of variables given as envvars parameter. The first found to be defined will be used. &lt;em&gt;envvars&lt;/em&gt; defaults to the search path used in GNU gettext; it must always contain the variable name &lt;code&gt;'LANG'&lt;/code&gt;. The GNU gettext search path contains &lt;code&gt;'LC_ALL'&lt;/code&gt;, &lt;code&gt;'LC_CTYPE'&lt;/code&gt;, &lt;code&gt;'LANG'&lt;/code&gt; and &lt;code&gt;'LANGUAGE'&lt;/code&gt;, in that order.</source>
          <target state="translated">他のプラットフォームとの互換性を維持するために、 &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; 変数だけでなく、envvarsパラメーターとして指定された変数のリストもテストされます。定義されている最初に見つかったものが使用されます。&lt;em&gt;envvarsの&lt;/em&gt;デフォルトは、GNU gettextで使用される検索パスです。常に変数名 &lt;code&gt;'LANG'&lt;/code&gt; が含まれている必要があります。GNU gettext検索パスには、 &lt;code&gt;'LC_ALL'&lt;/code&gt; 、 &lt;code&gt;'LC_CTYPE'&lt;/code&gt; 、 &lt;code&gt;'LANG'&lt;/code&gt; 、および &lt;code&gt;'LANGUAGE'&lt;/code&gt; がこの順序で含まれています。</target>
        </trans-unit>
        <trans-unit id="221a715c7e9bbc3c8f73812058613b8e009601f2" translate="yes" xml:space="preserve">
          <source>To make a more general purpose &lt;code&gt;AutoNumber&lt;/code&gt;, add &lt;code&gt;*args&lt;/code&gt; to the signature:</source>
          <target state="translated">To make a more general purpose &lt;code&gt;AutoNumber&lt;/code&gt; , add &lt;code&gt;*args&lt;/code&gt; to the signature:</target>
        </trans-unit>
        <trans-unit id="1c14afdac812af227b88c86198941007cf0dd14f" translate="yes" xml:space="preserve">
          <source>To make a widget in Tk, the command is always of the form:</source>
          <target state="translated">Tkでウィジェットを作るには、コマンドは常にこの形式になります。</target>
        </trans-unit>
        <trans-unit id="417627c112a69f8b699c74dadfa73e7deb1493a2" translate="yes" xml:space="preserve">
          <source>To make it easier to specify the format of input and output records, specific formatting parameters are grouped together into dialects. A dialect is a subclass of the &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; class having a set of specific methods and a single &lt;code&gt;validate()&lt;/code&gt; method. When creating &lt;a href=&quot;#csv.reader&quot;&gt;&lt;code&gt;reader&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt; objects, the programmer can specify a string or a subclass of the &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; class as the dialect parameter. In addition to, or instead of, the &lt;em&gt;dialect&lt;/em&gt; parameter, the programmer can also specify individual formatting parameters, which have the same names as the attributes defined below for the &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">入力レコードと出力レコードのフォーマットを指定しやすくするために、特定のフォーマットパラメータが方言にグループ化されています。方言は、特定のメソッドのセットと単一の &lt;code&gt;validate()&lt;/code&gt; メソッドを持つ&lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt;クラスのサブクラスです。&lt;a href=&quot;#csv.reader&quot;&gt; &lt;code&gt;reader&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#csv.writer&quot;&gt; &lt;code&gt;writer&lt;/code&gt; &lt;/a&gt;オブジェクトを作成するとき、プログラマーは方言パラメーターとして&lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt;クラスの文字列またはサブクラスを指定できます。&lt;em&gt;方言&lt;/em&gt;パラメーターに加えて、またはその代わりに、プログラマーは、以下で&lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt;クラスに対して定義されている属性と同じ名前を持つ個々のフォーマットパラメーターを指定することもできます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb0b20d767110eb1725af8275114eae06d1e185d" translate="yes" xml:space="preserve">
          <source>To make the application directly executable on POSIX, specify an interpreter to use.</source>
          <target state="translated">POSIX上でアプリケーションを直接実行可能にするには、使用するインタプリタを指定します。</target>
        </trans-unit>
        <trans-unit id="3fca3ce87f48e2116a1eb0698d70c15c55057dc4" translate="yes" xml:space="preserve">
          <source>To make use of this reference material, there will be times when you will need to know how to read short passages of Tk and how to identify the various parts of a Tk command. (See section &lt;a href=&quot;#tkinter-basic-mapping&quot;&gt;Mapping Basic Tk into Tkinter&lt;/a&gt; for the &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; equivalents of what&amp;rsquo;s below.)</source>
          <target state="translated">この参照資料を利用するために、Tkの短い部分を読み取る方法とTkコマンドのさまざまな部分を識別する方法を知る必要がある場合があります。（以下の対応する&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;については、「&lt;a href=&quot;#tkinter-basic-mapping&quot;&gt;基本的なTkをTkinterにマッピングする&lt;/a&gt;」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="484e44f760bfbe435b83b25b84c0b182802fc132" translate="yes" xml:space="preserve">
          <source>To map anonymous memory, -1 should be passed as the fileno along with the length.</source>
          <target state="translated">匿名メモリをマッピングするには、長さと一緒に-1をfilenoとして渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="e2e1faf71792fd171bb7d18670aacf92d65ddab9" translate="yes" xml:space="preserve">
          <source>To match a literal &lt;code&gt;']'&lt;/code&gt; inside a set, precede it with a backslash, or place it at the beginning of the set. For example, both &lt;code&gt;[()[\]{}]&lt;/code&gt; and &lt;code&gt;[]()[{}]&lt;/code&gt; will both match a parenthesis.</source>
          <target state="translated">セット内のリテラル &lt;code&gt;']'&lt;/code&gt; を一致させるには、その前にバックスラッシュを付けるか、セットの先頭に置きます。たとえば、 &lt;code&gt;[()[\]{}]&lt;/code&gt; と &lt;code&gt;[]()[{}]&lt;/code&gt; はどちらも括弧に一致します。</target>
        </trans-unit>
        <trans-unit id="618708a8fc1d746e948f62210d44b1f5af8f8644" translate="yes" xml:space="preserve">
          <source>To measure the execution time of the first statement, use the &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;#timeit.Timer.repeat&quot;&gt;&lt;code&gt;repeat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#timeit.Timer.autorange&quot;&gt;&lt;code&gt;autorange()&lt;/code&gt;&lt;/a&gt; methods are convenience methods to call &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; multiple times.</source>
          <target state="translated">最初のステートメントの実行時間を測定するには、&lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。&lt;a href=&quot;#timeit.Timer.repeat&quot;&gt; &lt;code&gt;repeat()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#timeit.Timer.autorange&quot;&gt; &lt;code&gt;autorange()&lt;/code&gt; &lt;/a&gt;メソッドがコールに便利なメソッドです&lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt;を複数回。</target>
        </trans-unit>
        <trans-unit id="1877606d3808c148650a0894f86dec786878b4b9" translate="yes" xml:space="preserve">
          <source>To obtain a hexadecimal string representation for a float, use the &lt;a href=&quot;stdtypes#float.hex&quot;&gt;&lt;code&gt;float.hex()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">floatの16進文字列表現を取得するには、&lt;a href=&quot;stdtypes#float.hex&quot;&gt; &lt;code&gt;float.hex()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="61455195f543a7d8dd71efcc31b21d9861f799c4" translate="yes" xml:space="preserve">
          <source>To open the key, use the &lt;a href=&quot;#winreg.CreateKey&quot;&gt;&lt;code&gt;CreateKey()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#winreg.OpenKey&quot;&gt;&lt;code&gt;OpenKey()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">キーを開くには、&lt;a href=&quot;#winreg.CreateKey&quot;&gt; &lt;code&gt;CreateKey()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#winreg.OpenKey&quot;&gt; &lt;code&gt;OpenKey()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="f456a6710b9e6585a204a095080c291aedbb463b" translate="yes" xml:space="preserve">
          <source>To override the basic Tk widgets, the import should follow the Tk import:</source>
          <target state="translated">基本的なTkウィジェットを上書きするには、Tkのインポートに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="bf838250004c5e59d72bbbdebbb5c5977c45e02d" translate="yes" xml:space="preserve">
          <source>To override the comparisons (presumably for speed, as the semantics are fixed), redefine &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt;&lt;code&gt;__le__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt;&lt;code&gt;__ge__()&lt;/code&gt;&lt;/a&gt;, then the other operations will automatically follow suit.</source>
          <target state="translated">比較をオーバーライドするには（おそらくセマンティクスが固定されているため、速度を上げるため）、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt; &lt;code&gt;__le__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt; &lt;code&gt;__ge__()&lt;/code&gt; &lt;/a&gt;再定義すると、他の操作が自動的に実行されます。</target>
        </trans-unit>
        <trans-unit id="26c57cc65cd485fdca61260fb6b91eb1f51ff39b" translate="yes" xml:space="preserve">
          <source>To override the comparisons (presumably for speed, as the semantics are fixed), redefine &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__le__&quot;&gt;&lt;code&gt;__le__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ge__&quot;&gt;&lt;code&gt;__ge__()&lt;/code&gt;&lt;/a&gt;, then the other operations will automatically follow suit.</source>
          <target state="translated">To override the comparisons (presumably for speed, as the semantics are fixed), redefine &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__le__&quot;&gt; &lt;code&gt;__le__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ge__&quot;&gt; &lt;code&gt;__ge__()&lt;/code&gt; &lt;/a&gt;, then the other operations will automatically follow suit.</target>
        </trans-unit>
        <trans-unit id="e1904b2c6725763e667f2f07e78ab2eded89803e" translate="yes" xml:space="preserve">
          <source>To perform regression testing by verifying that interactive examples from a test file or a test object work as expected.</source>
          <target state="translated">テストファイルやテストオブジェクトのインタラクティブな例が期待通りに動作するかどうかを検証することで、リグレッションテストを実行する。</target>
        </trans-unit>
        <trans-unit id="b46749e5ac61308154978bbff6f9776b88f8bb48" translate="yes" xml:space="preserve">
          <source>To pickle objects that have an external persistent ID, the pickler must have a custom &lt;a href=&quot;#pickle.Pickler.persistent_id&quot;&gt;&lt;code&gt;persistent_id()&lt;/code&gt;&lt;/a&gt; method that takes an object as an argument and returns either &lt;code&gt;None&lt;/code&gt; or the persistent ID for that object. When &lt;code&gt;None&lt;/code&gt; is returned, the pickler simply pickles the object as normal. When a persistent ID string is returned, the pickler will pickle that object, along with a marker so that the unpickler will recognize it as a persistent ID.</source>
          <target state="translated">外部永続IDを持つオブジェクトをピクルするには、ピッカーにオブジェクトを引数として受け取り、 &lt;code&gt;None&lt;/code&gt; またはそのオブジェクトの永続IDを返すカスタムの&lt;a href=&quot;#pickle.Pickler.persistent_id&quot;&gt; &lt;code&gt;persistent_id()&lt;/code&gt; &lt;/a&gt;メソッドが必要です。とき &lt;code&gt;None&lt;/code&gt; 返されていない、Picklerさんは、単にオブジェクトを通常のようにpickle化。永続的なID文字列が返されると、ピッカーはそのオブジェクトとマーカーをピクルして、アンピッカーが永続的なIDとして認識できるようにします。</target>
        </trans-unit>
        <trans-unit id="464cddfc71cabb999b36dc4463a388c3b896939d" translate="yes" xml:space="preserve">
          <source>To post an article from a binary file (this assumes that the article has valid headers, and that you have right to post on the particular newsgroup):</source>
          <target state="translated">バイナリファイルから記事を投稿するには (記事に有効なヘッダがあり、特定のニュースグループに投稿する権利があることを前提としています)。</target>
        </trans-unit>
        <trans-unit id="3ea7701325362cf111507ae07ad956de8d76b901" translate="yes" xml:space="preserve">
          <source>To prevent the DocTestFinder from extracting DocTests from objects that are imported from other modules. (Contained objects with modules other than &lt;em&gt;module&lt;/em&gt; are ignored.)</source>
          <target state="translated">DocTestFinderが他のモジュールからインポートされたオブジェクトからDocTestを抽出しないようにするため。（以外のモジュールと含まれるオブジェクト&lt;em&gt;モジュールが&lt;/em&gt;無視されます。）</target>
        </trans-unit>
        <trans-unit id="75ce79c23ae1627c624827192c59627f01d4d32c" translate="yes" xml:space="preserve">
          <source>To process this file, load it as usual, and pass the root element to the &lt;a href=&quot;#module-xml.etree.ElementTree&quot;&gt;&lt;code&gt;xml.etree.ElementTree&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">このファイルを処理するには、通常どおりロードし、ルート要素を&lt;a href=&quot;#module-xml.etree.ElementTree&quot;&gt; &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; &lt;/a&gt;モジュールに渡します。</target>
        </trans-unit>
        <trans-unit id="0378c517bb3f44a4de23c24714950e30345fceb7" translate="yes" xml:space="preserve">
          <source>To profile a function that takes a single argument, you can do:</source>
          <target state="translated">1つの引数を取る関数をプロファイルするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="5449841f06bad5a2670dfafc51300c84788e53c9" translate="yes" xml:space="preserve">
          <source>To programmatically import a module, use &lt;a href=&quot;#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プログラムでモジュールをインポートするには、&lt;a href=&quot;#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="235b35cc854fb6c40fcb5bc32127ed15360a7207" translate="yes" xml:space="preserve">
          <source>To reduce interpreter startup overhead, the Win32 &lt;code&gt;ShellExecute()&lt;/code&gt; function is not resolved until this function is first called. If the function cannot be resolved, &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">インタープリターの起動オーバーヘッドを減らすために、Win32 &lt;code&gt;ShellExecute()&lt;/code&gt; 関数は、この関数が最初に呼び出されるまで解決されません。関数を解決できない場合、&lt;a href=&quot;exceptions#NotImplementedError&quot;&gt; &lt;code&gt;NotImplementedError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="3f671170832a277ad19c6673cec3b9e9d7f73479" translate="yes" xml:space="preserve">
          <source>To remove a &lt;code&gt;side_effect&lt;/code&gt;, and return to the default behaviour, set the &lt;code&gt;side_effect&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;side_effect&lt;/code&gt; を削除してデフォルトの動作に戻すには、 &lt;code&gt;side_effect&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="c0a6df24f5dba94f71f5eb8abe853277fe5f8b69" translate="yes" xml:space="preserve">
          <source>To remove a collation, call &lt;code&gt;create_collation&lt;/code&gt; with &lt;code&gt;None&lt;/code&gt; as callable:</source>
          <target state="translated">照合順序を削除するには、呼び出し可能として &lt;code&gt;None&lt;/code&gt; を &lt;code&gt;create_collation&lt;/code&gt; してcreate_collat​​ionを呼び出します。</target>
        </trans-unit>
        <trans-unit id="deb986b44a469cfc418c4db889efbebd3d498e8b" translate="yes" xml:space="preserve">
          <source>To remove all commands from a breakpoint, type &lt;code&gt;commands&lt;/code&gt; and follow it immediately with &lt;code&gt;end&lt;/code&gt;; that is, give no commands.</source>
          <target state="translated">ブレークポイントからすべてのコマンドを削除するには、コマンドを入力し、その直後に &lt;code&gt;end&lt;/code&gt; を続け &lt;code&gt;commands&lt;/code&gt; 。つまり、コマンドを与えません。</target>
        </trans-unit>
        <trans-unit id="d3e77a28a57d567fcb960445b706ccb578026b25" translate="yes" xml:space="preserve">
          <source>To replace the shebang line on an existing archive, create a modified archive using the &lt;a href=&quot;#zipapp.create_archive&quot;&gt;&lt;code&gt;create_archive()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">既存のアーカイブのシバン行を置き換えるには、&lt;a href=&quot;#zipapp.create_archive&quot;&gt; &lt;code&gt;create_archive()&lt;/code&gt; &lt;/a&gt;関数を使用して変更されたアーカイブを作成します。</target>
        </trans-unit>
        <trans-unit id="a0fb9eb465366c5feaf1e2c7608a6a11085a2ed6" translate="yes" xml:space="preserve">
          <source>To retrieve a field whose name is stored in a string, use the &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">名前が文字列に格納されているフィールドを取得するには、&lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0f5192f40799a0b5249f8f65a07b092775843f9c" translate="yes" xml:space="preserve">
          <source>To retrieve data after executing a SELECT statement, you can either treat the cursor as an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;, call the cursor&amp;rsquo;s &lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt;&lt;code&gt;fetchone()&lt;/code&gt;&lt;/a&gt; method to retrieve a single matching row, or call &lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt;&lt;code&gt;fetchall()&lt;/code&gt;&lt;/a&gt; to get a list of the matching rows.</source>
          <target state="translated">SELECTステートメントの実行後にデータを取得するには、カーソルを&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;イテレータ&lt;/a&gt;として扱うか、カーソルの&lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt; &lt;code&gt;fetchone()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して一致する単一の行を取得するか、&lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt; &lt;code&gt;fetchall()&lt;/code&gt; &lt;/a&gt;を呼び出して一致する行のリストを取得します。</target>
        </trans-unit>
        <trans-unit id="6c1ea8cf4d7e5a8411a92698b71e9192fbc3224c" translate="yes" xml:space="preserve">
          <source>To retrieve data after executing a SELECT statement, you can either treat the cursor as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;, call the cursor&amp;rsquo;s &lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt;&lt;code&gt;fetchone()&lt;/code&gt;&lt;/a&gt; method to retrieve a single matching row, or call &lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt;&lt;code&gt;fetchall()&lt;/code&gt;&lt;/a&gt; to get a list of the matching rows.</source>
          <target state="translated">To retrieve data after executing a SELECT statement, you can either treat the cursor as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;, call the cursor&amp;rsquo;s &lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt; &lt;code&gt;fetchone()&lt;/code&gt; &lt;/a&gt; method to retrieve a single matching row, or call &lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt; &lt;code&gt;fetchall()&lt;/code&gt; &lt;/a&gt; to get a list of the matching rows.</target>
        </trans-unit>
        <trans-unit id="fa0d39041d8f8095fbf0fa33c3d912798a2630dc" translate="yes" xml:space="preserve">
          <source>To reverse this encoding process, &lt;a href=&quot;#urllib.parse.parse_qs&quot;&gt;&lt;code&gt;parse_qs()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.parse.parse_qsl&quot;&gt;&lt;code&gt;parse_qsl()&lt;/code&gt;&lt;/a&gt; are provided in this module to parse query strings into Python data structures.</source>
          <target state="translated">このエンコードプロセスを逆にするために、このモジュールでは&lt;a href=&quot;#urllib.parse.parse_qs&quot;&gt; &lt;code&gt;parse_qs()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#urllib.parse.parse_qsl&quot;&gt; &lt;code&gt;parse_qsl()&lt;/code&gt; &lt;/a&gt;が提供され、クエリ文字列をPythonデータ構造に解析します。</target>
        </trans-unit>
        <trans-unit id="95afd35e46114bc381b797d3696a69c9479e1723" translate="yes" xml:space="preserve">
          <source>To schedule a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-callback&quot;&gt;callback&lt;/a&gt; from another OS thread, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt;&lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt;&lt;/a&gt; method should be used. Example:</source>
          <target state="translated">To schedule a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-callback&quot;&gt;callback&lt;/a&gt; from another OS thread, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt; &lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt; &lt;/a&gt; method should be used. Example:</target>
        </trans-unit>
        <trans-unit id="46f1ad4c5c8298c7c978bfa9952bc941076ec95b" translate="yes" xml:space="preserve">
          <source>To schedule a callback from a different OS thread, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt;&lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt;&lt;/a&gt; method should be used. Example:</source>
          <target state="translated">別のOSスレッドからのコールバックをスケジュールするには、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt; &lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。例：</target>
        </trans-unit>
        <trans-unit id="8f0884ec1f5594a6a040aa5eeeff821ee386f563" translate="yes" xml:space="preserve">
          <source>To schedule a coroutine object from a different OS thread, the &lt;a href=&quot;asyncio-task#asyncio.run_coroutine_threadsafe&quot;&gt;&lt;code&gt;run_coroutine_threadsafe()&lt;/code&gt;&lt;/a&gt; function should be used. It returns a &lt;a href=&quot;concurrent.futures#concurrent.futures.Future&quot;&gt;&lt;code&gt;concurrent.futures.Future&lt;/code&gt;&lt;/a&gt; to access the result:</source>
          <target state="translated">別のOSスレッドからコルーチンオブジェクトをスケジュールするには、&lt;a href=&quot;asyncio-task#asyncio.run_coroutine_threadsafe&quot;&gt; &lt;code&gt;run_coroutine_threadsafe()&lt;/code&gt; &lt;/a&gt;関数を使用する必要があります。結果にアクセスするために&lt;a href=&quot;concurrent.futures#concurrent.futures.Future&quot;&gt; &lt;code&gt;concurrent.futures.Future&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="1f6627de8dbbc9c12a86f34fd1b5fe034f34a62d" translate="yes" xml:space="preserve">
          <source>To see if a given string is a valid hand, one could do the following:</source>
          <target state="translated">与えられた文字列が有効な手であるかどうかを確認するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="e0943fae7c35b5498e405be59003cb18933c3cc3" translate="yes" xml:space="preserve">
          <source>To select a start method you use the &lt;a href=&quot;#multiprocessing.set_start_method&quot;&gt;&lt;code&gt;set_start_method()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; clause of the main module. For example:</source>
          <target state="translated">startメソッドを選択するには、使用&lt;a href=&quot;#multiprocessing.set_start_method&quot;&gt; &lt;code&gt;set_start_method()&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; メインモジュールの句。例えば：</target>
        </trans-unit>
        <trans-unit id="7b599b4912ffb321a32eeeee3be0d641b6372a13" translate="yes" xml:space="preserve">
          <source>To send a configuration to the socket, read in the configuration file and send it to the socket as a sequence of bytes preceded by a four-byte length string packed in binary using &lt;code&gt;struct.pack('&amp;gt;L', n)&lt;/code&gt;.</source>
          <target state="translated">構成をソケットに送信するには、構成ファイルを読み取り、 &lt;code&gt;struct.pack('&amp;gt;L', n)&lt;/code&gt; を使用してバイナリでパックされた4バイト長の文字列が前に付いたバイトシーケンスとしてソケットに送信します。</target>
        </trans-unit>
        <trans-unit id="10c9c2df671deeca1fe90d00e167dfed20eaa838" translate="yes" xml:space="preserve">
          <source>To send the output of &lt;a href=&quot;functions#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt; to &lt;em&gt;sys.stderr&lt;/em&gt;:</source>
          <target state="translated">&lt;a href=&quot;functions#help&quot;&gt; &lt;code&gt;help()&lt;/code&gt; の&lt;/a&gt;&lt;em&gt;出力&lt;/em&gt;を&lt;em&gt;sys.stderrに&lt;/em&gt;送信するには：</target>
        </trans-unit>
        <trans-unit id="368af95afe3dde84ad97245ab11827291359580c" translate="yes" xml:space="preserve">
          <source>To send the output of &lt;a href=&quot;functions#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt; to a file on disk, redirect the output to a regular file:</source>
          <target state="translated">&lt;a href=&quot;functions#help&quot;&gt; &lt;code&gt;help()&lt;/code&gt; &lt;/a&gt;の出力をディスク上のファイルに送信するには、出力を通常のファイルにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="760c34de5354bcacaf1f6c0b875ba4fca40a85c7" translate="yes" xml:space="preserve">
          <source>To serialize an object hierarchy, you simply call the &lt;a href=&quot;#pickle.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; function. Similarly, to de-serialize a data stream, you call the &lt;a href=&quot;#pickle.loads&quot;&gt;&lt;code&gt;loads()&lt;/code&gt;&lt;/a&gt; function. However, if you want more control over serialization and de-serialization, you can create a &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;#pickle.Unpickler&quot;&gt;&lt;code&gt;Unpickler&lt;/code&gt;&lt;/a&gt; object, respectively.</source>
          <target state="translated">オブジェクト階層をシリアル化するには、単に&lt;a href=&quot;#pickle.dumps&quot;&gt; &lt;code&gt;dumps()&lt;/code&gt; &lt;/a&gt;関数を呼び出します。同様に、データストリームを逆シリアル化するには、&lt;a href=&quot;#pickle.loads&quot;&gt; &lt;code&gt;loads()&lt;/code&gt; &lt;/a&gt;関数を呼び出します。ただし、シリアライゼーションとデシリアライゼーションをより詳細に制御したい場合は、それぞれ&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;オブジェクトまたは&lt;a href=&quot;#pickle.Unpickler&quot;&gt; &lt;code&gt;Unpickler&lt;/code&gt; &lt;/a&gt;オブジェクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="a02536d7456d8606cd89506bca4a517540363eb4" translate="yes" xml:space="preserve">
          <source>To set a POINTER type field to &lt;code&gt;NULL&lt;/code&gt;, you can assign &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">POINTERタイプのフィールドを &lt;code&gt;NULL&lt;/code&gt; に設定するには、 &lt;code&gt;None&lt;/code&gt; を割り当てます。</target>
        </trans-unit>
        <trans-unit id="096472e03fc776b0c758257a75507213a0525c42" translate="yes" xml:space="preserve">
          <source>To set the system to ignore the system data and use the tzdata package instead, set &lt;code&gt;PYTHONTZPATH=&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">To set the system to ignore the system data and use the tzdata package instead, set &lt;code&gt;PYTHONTZPATH=&quot;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94089b856a9740ad3b8dc05c41cca98f65149300" translate="yes" xml:space="preserve">
          <source>To show the individual process IDs involved, here is an expanded example:</source>
          <target state="translated">関係する個々のプロセスIDを示すために、ここでは拡大した例を示します。</target>
        </trans-unit>
        <trans-unit id="0c86f19a38fdf4f3f2888e7254bd241904a08f10" translate="yes" xml:space="preserve">
          <source>To shuffle an immutable sequence and return a new shuffled list, use &lt;code&gt;sample(x, k=len(x))&lt;/code&gt; instead.</source>
          <target state="translated">不変シーケンスをシャッフルして新しいシャッフルリストを返すには、代わりに &lt;code&gt;sample(x, k=len(x))&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="ad3933308c92befa869f265838a9e8cdec721d4d" translate="yes" xml:space="preserve">
          <source>To simplify access to the various codec components, the module provides these additional functions which use &lt;a href=&quot;#codecs.lookup&quot;&gt;&lt;code&gt;lookup()&lt;/code&gt;&lt;/a&gt; for the codec lookup:</source>
          <target state="translated">さまざまなコーデックコンポーネントへのアクセスを簡略化するために、モジュールは、コーデックルックアップに&lt;a href=&quot;#codecs.lookup&quot;&gt; &lt;code&gt;lookup()&lt;/code&gt; &lt;/a&gt;を使用する次の追加関数を提供します。</target>
        </trans-unit>
        <trans-unit id="7aabdf8b0670313243d3ad3253be2cbd8d7f5c13" translate="yes" xml:space="preserve">
          <source>To simplify and standardize error handling, codecs may implement different error handling schemes by accepting the &lt;em&gt;errors&lt;/em&gt; string argument. The following string values are defined and implemented by all standard Python codecs:</source>
          <target state="translated">エラー処理を簡素化および標準化するために、コーデックは、&lt;em&gt;エラー&lt;/em&gt;文字列引数を受け入れることにより、さまざまなエラー処理スキームを実装&lt;em&gt;でき&lt;/em&gt;ます。次の文字列値は、すべての標準Pythonコーデックによって定義および実装されています。</target>
        </trans-unit>
        <trans-unit id="0a8769fc8be4940cb808b1153502d24a60ed8f26" translate="yes" xml:space="preserve">
          <source>To simplify token stream handling, all &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#operators&quot;&gt;operator&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#delimiters&quot;&gt;delimiter&lt;/a&gt; tokens and &lt;a href=&quot;constants#Ellipsis&quot;&gt;&lt;code&gt;Ellipsis&lt;/code&gt;&lt;/a&gt; are returned using the generic &lt;a href=&quot;token#token.OP&quot;&gt;&lt;code&gt;OP&lt;/code&gt;&lt;/a&gt; token type. The exact type can be determined by checking the &lt;code&gt;exact_type&lt;/code&gt; property on the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; returned from &lt;a href=&quot;#tokenize.tokenize&quot;&gt;&lt;code&gt;tokenize.tokenize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">トークンストリームの処理を簡素化するために、すべての&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#operators&quot;&gt;オペレータ&lt;/a&gt;と&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#delimiters&quot;&gt;区切り&lt;/a&gt;トークンと&lt;a href=&quot;constants#Ellipsis&quot;&gt; &lt;code&gt;Ellipsis&lt;/code&gt; &lt;/a&gt;、一般的な使用して返された&lt;a href=&quot;token#token.OP&quot;&gt; &lt;code&gt;OP&lt;/code&gt; &lt;/a&gt;トークンタイプを。正確なタイプは、&lt;a href=&quot;#tokenize.tokenize&quot;&gt; &lt;code&gt;tokenize.tokenize()&lt;/code&gt; &lt;/a&gt;から返された&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;名前付きタプルの&lt;/a&gt; &lt;code&gt;exact_type&lt;/code&gt; プロパティをチェックすることで決定できます。</target>
        </trans-unit>
        <trans-unit id="ea672bbb45b01e2318383dead50026a12f2d14f6" translate="yes" xml:space="preserve">
          <source>To simplify token stream handling, all &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#operators&quot;&gt;operator&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#delimiters&quot;&gt;delimiter&lt;/a&gt; tokens and &lt;a href=&quot;constants#Ellipsis&quot;&gt;&lt;code&gt;Ellipsis&lt;/code&gt;&lt;/a&gt; are returned using the generic &lt;a href=&quot;token#token.OP&quot;&gt;&lt;code&gt;OP&lt;/code&gt;&lt;/a&gt; token type. The exact type can be determined by checking the &lt;code&gt;exact_type&lt;/code&gt; property on the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; returned from &lt;a href=&quot;#tokenize.tokenize&quot;&gt;&lt;code&gt;tokenize.tokenize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">To simplify token stream handling, all &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#operators&quot;&gt;operator&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#delimiters&quot;&gt;delimiter&lt;/a&gt; tokens and &lt;a href=&quot;constants#Ellipsis&quot;&gt; &lt;code&gt;Ellipsis&lt;/code&gt; &lt;/a&gt; are returned using the generic &lt;a href=&quot;token#token.OP&quot;&gt; &lt;code&gt;OP&lt;/code&gt; &lt;/a&gt; token type. The exact type can be determined by checking the &lt;code&gt;exact_type&lt;/code&gt; property on the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; returned from &lt;a href=&quot;#tokenize.tokenize&quot;&gt; &lt;code&gt;tokenize.tokenize()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c99360216ba373c1bc65a90076c1777659e276a7" translate="yes" xml:space="preserve">
          <source>To specify a variable-length tuple of homogeneous type, use literal ellipsis, e.g. &lt;code&gt;Tuple[int, ...]&lt;/code&gt;. A plain &lt;a href=&quot;#typing.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;code&gt;Tuple[Any, ...]&lt;/code&gt;, and in turn to &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同種型の可変長タプルを指定するには、リテラル省略記号を使用します（例： &lt;code&gt;Tuple[int, ...]&lt;/code&gt; 。平野&lt;a href=&quot;#typing.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt;同等です &lt;code&gt;Tuple[Any, ...]&lt;/code&gt; 、ひいてはへの&lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b814a7a26e755324d50e482a1e951755b0c61cc2" translate="yes" xml:space="preserve">
          <source>To specify the use of a secure protocol (TLS), pass in a tuple to the &lt;em&gt;secure&lt;/em&gt; argument. This will only be used when authentication credentials are supplied. The tuple should be either an empty tuple, or a single-value tuple with the name of a keyfile, or a 2-value tuple with the names of the keyfile and certificate file. (This tuple is passed to the &lt;a href=&quot;smtplib#smtplib.SMTP.starttls&quot;&gt;&lt;code&gt;smtplib.SMTP.starttls()&lt;/code&gt;&lt;/a&gt; method.)</source>
          <target state="translated">セキュアプロトコル（TLS）の使用を指定するには、タプルを&lt;em&gt;セキュア&lt;/em&gt;引数に渡します。これは、認証資格情報が提供されている場合にのみ使用されます。タプルは、空のタプルか、キーファイルの名前を持つ単一値のタプルか、キーファイルと証明書ファイルの名前を持つ2値のタプルのいずれかである必要があります。（このタプルは&lt;a href=&quot;smtplib#smtplib.SMTP.starttls&quot;&gt; &lt;code&gt;smtplib.SMTP.starttls()&lt;/code&gt; &lt;/a&gt;メソッドに渡されます。）</target>
        </trans-unit>
        <trans-unit id="d5b3104139b01eeac04cf9e042a54bbc4242a857" translate="yes" xml:space="preserve">
          <source>To start using Ttk, import its module:</source>
          <target state="translated">Ttk の使用を開始するには、そのモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="51c216987f5aa2dbd2061c95ac950a3b4802975d" translate="yes" xml:space="preserve">
          <source>To summarize the interface (&lt;code&gt;key&lt;/code&gt; is a string, &lt;code&gt;data&lt;/code&gt; is an arbitrary object):</source>
          <target state="translated">インターフェースを要約すると（ &lt;code&gt;key&lt;/code&gt; は文字列、 &lt;code&gt;data&lt;/code&gt; は任意のオブジェクトです）：</target>
        </trans-unit>
        <trans-unit id="00362506e0ca02815d8f1fdbc1235c68ab4941ab" translate="yes" xml:space="preserve">
          <source>To support SMTP (&lt;a href=&quot;https://tools.ietf.org/html/rfc5321.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 5321&lt;/strong&gt;&lt;/a&gt;), &lt;code&gt;Address&lt;/code&gt; handles one special case: if &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;domain&lt;/code&gt; are both the empty string (or &lt;code&gt;None&lt;/code&gt;), then the string value of the &lt;code&gt;Address&lt;/code&gt; is &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">SMTP（&lt;a href=&quot;https://tools.ietf.org/html/rfc5321.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 5321&lt;/strong&gt;&lt;/a&gt;）をサポートするために、 &lt;code&gt;Address&lt;/code&gt; は1つの特殊なケースを処理し &lt;code&gt;username&lt;/code&gt; と &lt;code&gt;domain&lt;/code&gt; が両方とも空の文字列（または &lt;code&gt;None&lt;/code&gt; ）の場合、 &lt;code&gt;Address&lt;/code&gt; 文字列値は &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c4d801175c02a7134e5a67b972b015f82efd457d" translate="yes" xml:space="preserve">
          <source>To support a wide variety of use cases, the &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; constructor (and the convenience functions) accept a large number of optional arguments. For most typical use cases, many of these arguments can be safely left at their default values. The arguments that are most commonly needed are:</source>
          <target state="translated">さまざまなユースケースをサポートするために、&lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt;コンストラクター（および便利な関数）は、多数のオプションの引数を受け入れます。ほとんどの一般的な使用例では、これらの引数の多くはデフォルト値のままで問題ありません。最も一般的に必要な引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7b9ef99554dda06486dfe4f9aad3a9b5884ad664" translate="yes" xml:space="preserve">
          <source>To support easier conversion of result objects between &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, all return values from URL parsing functions provide either an &lt;code&gt;encode()&lt;/code&gt; method (when the result contains &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; data) or a &lt;code&gt;decode()&lt;/code&gt; method (when the result contains &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; data). The signatures of these methods match those of the corresponding &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; methods (except that the default encoding is &lt;code&gt;'ascii'&lt;/code&gt; rather than &lt;code&gt;'utf-8'&lt;/code&gt;). Each produces a value of a corresponding type that contains either &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; data (for &lt;code&gt;encode()&lt;/code&gt; methods) or &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; data (for &lt;code&gt;decode()&lt;/code&gt; methods).</source>
          <target state="translated">&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; の&lt;/a&gt;間の結果オブジェクトの変換を容易にするために、URL解析関数からのすべての戻り値は、 &lt;code&gt;encode()&lt;/code&gt; メソッド（結果に&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;データが含まれる場合）または &lt;code&gt;decode()&lt;/code&gt; メソッド（結果に&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;データが含まれる場合）のいずれかを提供します。これらのメソッドのシグネチャは、対応する&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;メソッドのシグネチャと一致します（デフォルトのエンコーディングが &lt;code&gt;'utf-8'&lt;/code&gt; ではなく &lt;code&gt;'ascii'&lt;/code&gt; である場合を除きます）。それぞれが、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;データ（ &lt;code&gt;encode()&lt;/code&gt; メソッド用）または&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; の&lt;/a&gt;いずれかを含む対応する型の値を生成します。データ（ &lt;code&gt;decode()&lt;/code&gt; メソッド用）。</target>
        </trans-unit>
        <trans-unit id="8faa414aa237c45d91492c0790eb5c1446c7200f" translate="yes" xml:space="preserve">
          <source>To support more specific error reporting from class constructors, the module defines the following exceptions:</source>
          <target state="translated">クラスのコンストラクタからのより具体的なエラー報告をサポートするために、モジュールは以下の例外を定義しています。</target>
        </trans-unit>
        <trans-unit id="c16d8b4d0edbd20bc5f883f1830e6a64819d7f59" translate="yes" xml:space="preserve">
          <source>To suppress stdout or stderr, supply a value of &lt;a href=&quot;#subprocess.DEVNULL&quot;&gt;&lt;code&gt;DEVNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">stdoutまたはstderrを抑制するには、値&lt;a href=&quot;#subprocess.DEVNULL&quot;&gt; &lt;code&gt;DEVNULL&lt;/code&gt; を指定し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="93fe155fd74b1d1e9076d9feef1c801042fda3b0" translate="yes" xml:space="preserve">
          <source>To test for the presence of SSL support in a Python installation, user code should use the following idiom:</source>
          <target state="translated">PythonのインストールでSSLがサポートされているかどうかをテストするには、ユーザーコードは以下のイディオムを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ad05b0e475f3d0aee3f7e6301c1f32c33536da4a" translate="yes" xml:space="preserve">
          <source>To test warnings raised by code, use the &lt;a href=&quot;#warnings.catch_warnings&quot;&gt;&lt;code&gt;catch_warnings&lt;/code&gt;&lt;/a&gt; context manager. With it you can temporarily mutate the warnings filter to facilitate your testing. For instance, do the following to capture all raised warnings to check:</source>
          <target state="translated">コードによって生成された警告をテストするには、&lt;a href=&quot;#warnings.catch_warnings&quot;&gt; &lt;code&gt;catch_warnings&lt;/code&gt; &lt;/a&gt;コンテキストマネージャを使用します。これを使用すると、警告フィルターを一時的に変更して、テストを容易にすることができます。たとえば、次のようにして、発生したすべての警告をキャプチャして確認します。</target>
        </trans-unit>
        <trans-unit id="10561bf3f9f3d0097e11aeeaa24a8823dff2df5a" translate="yes" xml:space="preserve">
          <source>To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.</source>
          <target state="translated">本ソフトウェアの著作権および関連する隣接する権利は、法律の下で可能な範囲内で、作成者が全世界のパブリックドメインに捧げています。本ソフトウェアは、いかなる保証もなく配布されます。</target>
        </trans-unit>
        <trans-unit id="b957c8b22524d7f45637f1438f30d19ffc30d3b7" translate="yes" xml:space="preserve">
          <source>To trace most memory blocks allocated by Python, the module should be started as early as possible by setting the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt;, or by using &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc&lt;/code&gt; command line option. The &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;tracemalloc.start()&lt;/code&gt;&lt;/a&gt; function can be called at runtime to start tracing Python memory allocations.</source>
          <target state="translated">Pythonによって割り当てられたほとんどのメモリブロックをトレースするには、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt;環境変数を &lt;code&gt;1&lt;/code&gt; に設定するか、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc&lt;/code&gt; コマンドラインオプションを使用して、モジュールをできるだけ早く開始する必要があります。&lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;tracemalloc.start()&lt;/code&gt; &lt;/a&gt;関数は、Pythonのメモリ割り当てのトレースを開始するために、実行時に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="400cf417dbbda3fb20aee227a05f8104ab61b0ba" translate="yes" xml:space="preserve">
          <source>To trace most memory blocks allocated by Python, the module should be started as early as possible by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt;, or by using &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc&lt;/code&gt; command line option. The &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;tracemalloc.start()&lt;/code&gt;&lt;/a&gt; function can be called at runtime to start tracing Python memory allocations.</source>
          <target state="translated">To trace most memory blocks allocated by Python, the module should be started as early as possible by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt; , or by using &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc&lt;/code&gt; command line option. The &lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;tracemalloc.start()&lt;/code&gt; &lt;/a&gt; function can be called at runtime to start tracing Python memory allocations.</target>
        </trans-unit>
        <trans-unit id="ff0166cdb02b5e12ebef3a005fdba865bacd0e2c" translate="yes" xml:space="preserve">
          <source>To translate a numeric error code to an error message, use &lt;a href=&quot;os#os.strerror&quot;&gt;&lt;code&gt;os.strerror()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">数値エラーコードをエラーメッセージに変換するには、&lt;a href=&quot;os#os.strerror&quot;&gt; &lt;code&gt;os.strerror()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="edd9ff074077e2c43f498ff1fbd6b93370923415" translate="yes" xml:space="preserve">
          <source>To understand the format, see the following example (it is not intended to do anything useful):</source>
          <target state="translated">フォーマットを理解するには、以下の例を参照してください(何か役に立つことを目的としたものではありません)。</target>
        </trans-unit>
        <trans-unit id="2ee0a4c14f5a2b2eff92e0263151ad18d468b505" translate="yes" xml:space="preserve">
          <source>To unpickle external objects, the unpickler must have a custom &lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt;&lt;code&gt;persistent_load()&lt;/code&gt;&lt;/a&gt; method that takes a persistent ID object and returns the referenced object.</source>
          <target state="translated">外部オブジェクトをアンピックルするには、unpicklerに、永続IDオブジェクトを取得して参照オブジェクトを返すカスタムの&lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt; &lt;code&gt;persistent_load()&lt;/code&gt; &lt;/a&gt;メソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="a889b3e0dad6034036148442c4d89cb44da6c12c" translate="yes" xml:space="preserve">
          <source>To update the file in place, do the replacement in memory using a &lt;code&gt;BytesIO&lt;/code&gt; object, and then overwrite the source afterwards. Note that there is a risk when overwriting a file in place that an error will result in the loss of the original file. This code does not protect against such errors, but production code should do so. Also, this method will only work if the archive fits in memory:</source>
          <target state="translated">ファイルを &lt;code&gt;BytesIO&lt;/code&gt; 更新するには、BytesIOオブジェクトを使用してメモリ内で置換を行い、その後ソースを上書きします。ファイルを上書きすると、エラーが発生して元のファイルが失われるおそれがあることに注意してください。このコードはそのようなエラーから保護しませんが、製品コードは保護する必要があります。また、この方法は、アーカイブがメモリに収まる場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="20049dbc724846c3441fcf908b5e5814f37f9291" translate="yes" xml:space="preserve">
          <source>To use &lt;a href=&quot;#module-tkinter.tix&quot;&gt;&lt;code&gt;tkinter.tix&lt;/code&gt;&lt;/a&gt;, you must have the Tix widgets installed, usually alongside your installation of the Tk widgets. To test your installation, try the following:</source>
          <target state="translated">&lt;a href=&quot;#module-tkinter.tix&quot;&gt; &lt;code&gt;tkinter.tix&lt;/code&gt; &lt;/a&gt;を使用するには、通常Tkウィジェットのインストールと並んで、Tixウィジェットがインストールされている必要があります。インストールをテストするには、次のことを試してください。</target>
        </trans-unit>
        <trans-unit id="c80b24bc87319ccdb03a02574403ef35e2701467" translate="yes" xml:space="preserve">
          <source>To use a custom &lt;a href=&quot;#json.JSONDecoder&quot;&gt;&lt;code&gt;JSONDecoder&lt;/code&gt;&lt;/a&gt; subclass, specify it with the &lt;code&gt;cls&lt;/code&gt; kwarg; otherwise &lt;a href=&quot;#json.JSONDecoder&quot;&gt;&lt;code&gt;JSONDecoder&lt;/code&gt;&lt;/a&gt; is used. Additional keyword arguments will be passed to the constructor of the class.</source>
          <target state="translated">カスタム&lt;a href=&quot;#json.JSONDecoder&quot;&gt; &lt;code&gt;JSONDecoder&lt;/code&gt; &lt;/a&gt;サブクラスを使用するには、 &lt;code&gt;cls&lt;/code&gt; kwarg で指定します。それ以外の場合は、&lt;a href=&quot;#json.JSONDecoder&quot;&gt; &lt;code&gt;JSONDecoder&lt;/code&gt; &lt;/a&gt;が使用されます。追加のキーワード引数がクラスのコンストラクターに渡されます。</target>
        </trans-unit>
        <trans-unit id="a97a53a9d579579b044ea3cdec56452a32f4bec6" translate="yes" xml:space="preserve">
          <source>To use a custom &lt;a href=&quot;#json.JSONEncoder&quot;&gt;&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/a&gt; subclass (e.g. one that overrides the &lt;code&gt;default()&lt;/code&gt; method to serialize additional types), specify it with the &lt;em&gt;cls&lt;/em&gt; kwarg; otherwise &lt;a href=&quot;#json.JSONEncoder&quot;&gt;&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">カスタム&lt;a href=&quot;#json.JSONEncoder&quot;&gt; &lt;code&gt;JSONEncoder&lt;/code&gt; &lt;/a&gt;サブクラス（たとえば、 &lt;code&gt;default()&lt;/code&gt; メソッドをオーバーライドして追加の型をシリアル化するサブクラス）を使用するには、&lt;em&gt;cls&lt;/em&gt; kwargでそれを指定します。それ以外の場合は、&lt;a href=&quot;#json.JSONEncoder&quot;&gt; &lt;code&gt;JSONEncoder&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="38ce15cd49858ae2aef9bf6dd093452e9c81953e" translate="yes" xml:space="preserve">
          <source>To use a custom SMTPChannel implementation you need to override the &lt;a href=&quot;#smtpd.SMTPServer.channel_class&quot;&gt;&lt;code&gt;SMTPServer.channel_class&lt;/code&gt;&lt;/a&gt; of your &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt;&lt;code&gt;SMTPServer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタムSMTPChannel実装を使用するには、オーバーライドする必要があり&lt;a href=&quot;#smtpd.SMTPServer.channel_class&quot;&gt; &lt;code&gt;SMTPServer.channel_class&lt;/code&gt; &lt;/a&gt;あなたの&lt;a href=&quot;#smtpd.SMTPServer&quot;&gt; &lt;code&gt;SMTPServer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d50f707cfc603f844f47e754486a7e1138485664" translate="yes" xml:space="preserve">
          <source>To use compound turtle shapes, which consist of several polygons of different color, you must use the helper class &lt;a href=&quot;#turtle.Shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; explicitly as described below:</source>
          <target state="translated">異なる色の複数のポリゴンで構成される複合タートルシェイプを使用するには、以下で説明するように、ヘルパークラス&lt;a href=&quot;#turtle.Shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; を&lt;/a&gt;明示的に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c1ba519887a8ab65c40b47b31ca3ead5d8a9aff8" translate="yes" xml:space="preserve">
          <source>To use multiple turtles on a screen one has to use the object-oriented interface.</source>
          <target state="translated">画面上で複数のカメを使用するには、オブジェクト指向のインターフェースを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b992ab6d688ed006c9a1f3c48e6d6442838b0dd7" translate="yes" xml:space="preserve">
          <source>To use the module, you must first create a &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object that represents the database. Here the data will be stored in the &lt;code&gt;example.db&lt;/code&gt; file:</source>
          <target state="translated">モジュールを使用するには、最初にデータベースを表す&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;オブジェクトを作成する必要があります。ここで、データは &lt;code&gt;example.db&lt;/code&gt; ファイルに保存されます。</target>
        </trans-unit>
        <trans-unit id="135aae4c52ce4b15c7c009fef1b0ca569c8aa602" translate="yes" xml:space="preserve">
          <source>To use them call &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt;&lt;code&gt;patch.object()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.mock.patch.dict&quot;&gt;&lt;code&gt;patch.dict()&lt;/code&gt;&lt;/a&gt; as normal and keep a reference to the returned &lt;code&gt;patcher&lt;/code&gt; object. You can then call &lt;code&gt;start()&lt;/code&gt; to put the patch in place and &lt;code&gt;stop()&lt;/code&gt; to undo it.</source>
          <target state="translated">それらを使用するには、&lt;a href=&quot;#unittest.mock.patch.object&quot;&gt; &lt;code&gt;patch.object()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;、patch.object（）または&lt;a href=&quot;#unittest.mock.patch.dict&quot;&gt; &lt;code&gt;patch.dict()&lt;/code&gt; &lt;/a&gt;を呼び出し、返さ &lt;code&gt;patcher&lt;/code&gt; オブジェクトへの参照を保持します。次に、 &lt;code&gt;start()&lt;/code&gt; を呼び出してパッチを配置し、 &lt;code&gt;stop()&lt;/code&gt; を呼び出して元に戻します。</target>
        </trans-unit>
        <trans-unit id="a04d85e7d8581cce27cdcbf35c1285f6123cef95" translate="yes" xml:space="preserve">
          <source>To validate a certificate for a particular service, you can use the &lt;a href=&quot;#ssl.match_hostname&quot;&gt;&lt;code&gt;match_hostname()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">特定のサービスの証明書を検証するには、&lt;a href=&quot;#ssl.match_hostname&quot;&gt; &lt;code&gt;match_hostname()&lt;/code&gt; &lt;/a&gt;関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="6d5b36de85176d50bc616ddcb26662c16f18cfb1" translate="yes" xml:space="preserve">
          <source>To view the current settings, the common usage is:</source>
          <target state="translated">現在の設定を表示するには、一般的な使い方です。</target>
        </trans-unit>
        <trans-unit id="25c39d00c5f33d8ae92f80d44fd42daec3d39b6c" translate="yes" xml:space="preserve">
          <source>To work with plist data in bytes objects, use &lt;a href=&quot;#plistlib.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#plistlib.loads&quot;&gt;&lt;code&gt;loads()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バイトオブジェクトのplistデータを操作するには、&lt;a href=&quot;#plistlib.dumps&quot;&gt; &lt;code&gt;dumps()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#plistlib.loads&quot;&gt; &lt;code&gt;loads()&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="297905026d890e2e8243355af0ec2cc27371102f" translate="yes" xml:space="preserve">
          <source>To write or read binary data from/to the standard streams, use the underlying binary &lt;a href=&quot;io#io.TextIOBase.buffer&quot;&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/a&gt; object. For example, to write bytes to &lt;a href=&quot;#sys.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, use &lt;code&gt;sys.stdout.buffer.write(b'abc')&lt;/code&gt;.</source>
          <target state="translated">標準ストリームとの間でバイナリデータを読み書きするには、基になるバイナリ&lt;a href=&quot;io#io.TextIOBase.buffer&quot;&gt; &lt;code&gt;buffer&lt;/code&gt; &lt;/a&gt;オブジェクトを使用します。たとえば、バイトを&lt;a href=&quot;#sys.stdout&quot;&gt; &lt;code&gt;stdout&lt;/code&gt; &lt;/a&gt;に書き込むには、 &lt;code&gt;sys.stdout.buffer.write(b'abc')&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="bb59b39ce1834db13694efdf0cd6ff6ff02425e2" translate="yes" xml:space="preserve">
          <source>To write out and to parse a plist file, use the &lt;a href=&quot;#plistlib.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#plistlib.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">plistファイルを書き出して解析するには、&lt;a href=&quot;#plistlib.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#plistlib.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;関数とload（）関数を使用します。</target>
        </trans-unit>
        <trans-unit id="1745bc6607fc215c3c7c61823c82138e48f4028e" translate="yes" xml:space="preserve">
          <source>To write tutorial documentation for a package, liberally illustrated with input-output examples. Depending on whether the examples or the expository text are emphasized, this has the flavor of &amp;ldquo;literate testing&amp;rdquo; or &amp;ldquo;executable documentation&amp;rdquo;.</source>
          <target state="translated">パッケージのチュートリアルドキュメントを作成するには、入出力の例を自由に示します。例と説明文のどちらが強調されているかに応じて、これは「読み書きのテスト」または「実行可能なドキュメント」のフレーバーを持っています。</target>
        </trans-unit>
        <trans-unit id="d25dd12b45e6a81f010b0a56a4dc0f0982041292" translate="yes" xml:space="preserve">
          <source>Toggle Tabs</source>
          <target state="translated">トグルタブ</target>
        </trans-unit>
        <trans-unit id="49eebd44a0b7cae07bba108684454fac421ae217" translate="yes" xml:space="preserve">
          <source>Toggle automatically opening the stack viewer on an unhandled exception.</source>
          <target state="translated">ハンドリングされていない例外でスタックビューアを自動的に開くかどうかをトグルします。</target>
        </trans-unit>
        <trans-unit id="709be1c4e06ce937ce109134ee51b54aed0e03b8" translate="yes" xml:space="preserve">
          <source>Toggle the selection state of each item in &lt;em&gt;items&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;items&lt;/em&gt;内の各アイテムの選択状態を切り替え&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="caebd5b8cbddc4475c405e61e04e4190e27500f7" translate="yes" xml:space="preserve">
          <source>Toggles the window between normal size and maximum height. The initial size defaults to 40 lines by 80 chars unless changed on the General tab of the Configure IDLE dialog. The maximum height for a screen is determined by momentarily maximizing a window the first time one is zoomed on the screen. Changing screen settings may invalidate the saved height. This toggle has no effect when a window is maximized.</source>
          <target state="translated">ウィンドウを通常のサイズと最大の高さの間で切り替えます。初期サイズのデフォルトは 40 行×80 文字です。画面の最大高さは、画面を最初にズームしたときにウィンドウを瞬間的に最大化することで決定される。画面設定を変更すると、保存された高さが無効になることがあります。このトグルはウィンドウが最大化されているときには何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="9646975b29962e37360aeb91034e6c068784a045" translate="yes" xml:space="preserve">
          <source>Token used to determine end of file. This will be set to the empty string (&lt;code&gt;''&lt;/code&gt;), in non-POSIX mode, and to &lt;code&gt;None&lt;/code&gt; in POSIX mode.</source>
          <target state="translated">ファイルの終わりを決定するために使用されるトークン。これは、非POSIXモードでは空の文字列（ &lt;code&gt;''&lt;/code&gt; ）に設定され、POSIXモードでは &lt;code&gt;None&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="16cae5602b3caafdaf94aff5138d6f4e7306ce60" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;!=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;!=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="b86dac8050e2e0fe59bbfbb856d1dab55acb93ce" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;%&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;%&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="cbfdb248d8cd19bbbcc877609c920721d1ea70a1" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;%=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;%=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="5fad4c655b643193212ddd54e05c2200a0585d87" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="09ea8c1d8139ee92700420a6e9d9a1fe6f2d7a7d" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;amp;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;amp;=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="7577e9265009c87a3fbed49dfd6cc843a2b2cbf6" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="6a1c7e1c71d9be05a6b8a4e4b94f866389399156" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="51c75daa104193ecf006b0fcd0aadf86d0bb470d" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;&amp;gt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;&amp;gt;=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="975cfb9e99e1b1719af82b61c50c79dbf15855c2" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="e3b1a1065dcde8b9a95d5840358ce973e13029e6" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="27117e7427212a73cef9306bfd8d32904b077760" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;&amp;lt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;lt;&amp;lt;&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="37f9fe9280b0caf0120b0d333b0582b40ed8e8d7" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;&amp;lt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;lt;&amp;lt;=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="096dbca2d8035996074e27220e8dbd83ef780dba" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;lt;=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="d5c708b45d8f39bd617325c25f4812de96617673" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;(&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;(&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="18327d5eff01310d0a4402b710af59731824b495" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;)&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="9c76b270805b1a4fa9b7663756b8fc11eb6237ae" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;*&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;*&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="be3fb52143c54c07d78aef84da8b6ce63c06b07c" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;**&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;**&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="8ea8a289233c29e8390a3cba1410ef72f6df77a7" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;**=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;**=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="f7bb9643b98a9563af63301ae2f5eb1e0c81c1e3" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;*=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;*=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="85b32e10c19b5c0b632e41089d8b9ef29c3c0408" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;+&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;+&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="461a49ce243ba233541ce7431045e91176eb3c59" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;+=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;+=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="888610ba8dd07985852c6773f5fdd60c98169a40" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;,&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;,&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="d65b027b57b9b44eb9e73b20963ab437d175e245" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;-&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;-&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="48d463c1e62f59c507e1b5f21ca75187a7778fe0" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;-&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;-&amp;gt;&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="aba8dee4771b2b55437288b8c0addbf948bf04ef" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;-=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;-=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="1e4dade593aea62b538b7b875cba862f012392de" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;.&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;.&quot;&lt;/code&gt; トークン値 。</target>
        </trans-unit>
        <trans-unit id="d422d21de323ce3dd3f982de5e81088eac87e43e" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;...&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="87e36640edaae52f4602e5ec159d6a25665979d3" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;/&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;/&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="66a85deaaa8f44db29f357d74508240dac8dc497" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;//&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;//&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="6ba39f80bb6b9c1266313b252b2ede42343eef14" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;//=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;//=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="f91c0679dbf2b6feb2d90e59560fb27b78fb5cb0" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;/=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;/=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="27fb4ca487ea2d2acd87d0144dc37e9417b0e6b5" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;:&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;:&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="e9b88acce02e2c44cfc438ec17a090e8b03f750b" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;:=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;:=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="176ba72e65d2cc2ac3a0ef119f5ee7765b2a7859" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;;&quot;&lt;/code&gt; トークン値 。</target>
        </trans-unit>
        <trans-unit id="0e2e7402f6cb7fba9d35c8cf4b7b59a836554560" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;=&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="83b85c1df0e5fa0d285d34b19a3f75ae2d068e4b" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;==&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;==&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="21ebe9b60a4cd36259d42529870d893bf45d707f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;@&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;@&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="562d37d12791923832dab094f3c882df283ae94f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;@=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;@=&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="04694683cab263b7e5328a88ef1cdfb9a7206b7e" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;[&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;[&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="171228101c615a61a16687264fc8b959bfa3898f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;]&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;]&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="b96129d765f2fc721f957ea503b8f940483e945a" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;^&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;^&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="98dd6ae68dc4fc9f5ac457b18e21de6926cb5f6f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;^=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;^=&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="a719a03c56326a85b3001ccfd9ce0f5734172538" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;{&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;{&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="9a5f9e1fed1309f30c9042e1ad1355103d6fa147" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;|&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;|&quot;&lt;/code&gt; トークン値 。</target>
        </trans-unit>
        <trans-unit id="342f63c931b36b96537e06cc7417b755a05e7fd5" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;|=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;|=&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="f773a07b06f7fd17273f93d0ffb58f47f64e4626" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;}&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;}&quot;&lt;/code&gt; のトークン値。</target>
        </trans-unit>
        <trans-unit id="f8f4c1b4ddcdb8a2fd9b6e54c8fec3a038ecb05a" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;~&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;~&quot;&lt;/code&gt; トークン値。</target>
        </trans-unit>
        <trans-unit id="6c65b7769f5f6a2e3a25c7cb7dd686f45caf915a" translate="yes" xml:space="preserve">
          <source>Token value indicating that a type comment was recognized. Such tokens are only produced when &lt;a href=&quot;ast#ast.parse&quot;&gt;&lt;code&gt;ast.parse()&lt;/code&gt;&lt;/a&gt; is invoked with &lt;code&gt;type_comments=True&lt;/code&gt;.</source>
          <target state="translated">タイプコメントが認識されたことを示すトークン値。このようなトークンは、&lt;a href=&quot;ast#ast.parse&quot;&gt; &lt;code&gt;ast.parse()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;type_comments=True&lt;/code&gt; で呼び出された場合にのみ生成されます。</target>
        </trans-unit>
        <trans-unit id="ccbde560ca6e91456cf2373616b13efcf7e6c048" translate="yes" xml:space="preserve">
          <source>Token value that indicates the encoding used to decode the source bytes into text. The first token returned by &lt;a href=&quot;tokenize#tokenize.tokenize&quot;&gt;&lt;code&gt;tokenize.tokenize()&lt;/code&gt;&lt;/a&gt; will always be an &lt;code&gt;ENCODING&lt;/code&gt; token.</source>
          <target state="translated">ソースバイトをテキストにデコードするために使用されるエンコーディングを示すトークン値。&lt;a href=&quot;tokenize#tokenize.tokenize&quot;&gt; &lt;code&gt;tokenize.tokenize()&lt;/code&gt; &lt;/a&gt;によって返される最初のトークンは、常に &lt;code&gt;ENCODING&lt;/code&gt; トークンになります。</target>
        </trans-unit>
        <trans-unit id="4f82464b470b42b75fa84935a9a5e610016164d1" translate="yes" xml:space="preserve">
          <source>Token value used to indicate a comment.</source>
          <target state="translated">コメントを示すために使用されるトークンの値。</target>
        </trans-unit>
        <trans-unit id="78d296a14bd59029382660ecee684a6365dfd786" translate="yes" xml:space="preserve">
          <source>Token value used to indicate a non-terminating newline. The &lt;a href=&quot;#token.NEWLINE&quot;&gt;&lt;code&gt;NEWLINE&lt;/code&gt;&lt;/a&gt; token indicates the end of a logical line of Python code; &lt;code&gt;NL&lt;/code&gt; tokens are generated when a logical line of code is continued over multiple physical lines.</source>
          <target state="translated">終了しない改行を示すために使用されるトークン値。&lt;a href=&quot;#token.NEWLINE&quot;&gt; &lt;code&gt;NEWLINE&lt;/code&gt; &lt;/a&gt; Pythonコードの論理行の終わりを示すトークン。 &lt;code&gt;NL&lt;/code&gt; トークンは、コードの論理行が複数の物理行に続く場合に生成されます。</target>
        </trans-unit>
        <trans-unit id="abd739ad8bf24203062992f9c33379060ce2b2cd" translate="yes" xml:space="preserve">
          <source>Tokenize a source reading unicode strings instead of bytes.</source>
          <target state="translated">バイトではなくユニコード文字列を読むソースをトークン化します。</target>
        </trans-unit>
        <trans-unit id="ba1bab500a51a619a214fb93843a992431974a3a" translate="yes" xml:space="preserve">
          <source>Tokenizing Input</source>
          <target state="translated">入力のトークン化</target>
        </trans-unit>
        <trans-unit id="4113b4c9ebd053469430304ab17dc16ea1d01df9" translate="yes" xml:space="preserve">
          <source>Too many links</source>
          <target state="translated">リンクが多すぎる</target>
        </trans-unit>
        <trans-unit id="c8452b0c049e050b8a8d8e298315154b410bb14f" translate="yes" xml:space="preserve">
          <source>Too many open files</source>
          <target state="translated">開いているファイルが多すぎる</target>
        </trans-unit>
        <trans-unit id="81e6c84235179bef6a424ade0379cdb4a2f8f2b6" translate="yes" xml:space="preserve">
          <source>Too many references: cannot splice</source>
          <target state="translated">参照先が多すぎる:スプライスできない</target>
        </trans-unit>
        <trans-unit id="9370b2a9a4016e2eac0b29188fd6198e7257fcbe" translate="yes" xml:space="preserve">
          <source>Too many symbolic links encountered</source>
          <target state="translated">シンボリックリンクが多すぎる</target>
        </trans-unit>
        <trans-unit id="21b53b1f02559d44a4e57d2971766159ebf6282f" translate="yes" xml:space="preserve">
          <source>Too many users</source>
          <target state="translated">ユーザーが多すぎる</target>
        </trans-unit>
        <trans-unit id="f26fcae8618d0de222fcbf33470328838b85c473" translate="yes" xml:space="preserve">
          <source>Tools for creating, reading, and managing collections of messages on disk using a variety standard formats.</source>
          <target state="translated">さまざまな標準フォーマットを使用して、ディスク上のメッセージのコレクションを作成、読み取り、管理するためのツール。</target>
        </trans-unit>
        <trans-unit id="e69f8935b44be8243365f3e9e267b01513883107" translate="yes" xml:space="preserve">
          <source>Tools for working with and analyzing pickled data.</source>
          <target state="translated">漬け物データの作業や分析を行うためのツールです。</target>
        </trans-unit>
        <trans-unit id="cae0435c41e816c24f0838fdf4e76c044c8b4e00" translate="yes" xml:space="preserve">
          <source>Top</source>
          <target state="translated">Top</target>
        </trans-unit>
        <trans-unit id="30836d81384a3e0017ea997c2799917650592d98" translate="yes" xml:space="preserve">
          <source>Top highlight</source>
          <target state="translated">トップハイライト</target>
        </trans-unit>
        <trans-unit id="64deb39c4d87a95e799339a7c956a3d522c74200" translate="yes" xml:space="preserve">
          <source>Top level directory of project (defaults to start directory)</source>
          <target state="translated">プロジェクトのトップレベルのディレクトリ (デフォルトはスタートディレクトリ)</target>
        </trans-unit>
        <trans-unit id="b163017dd0043c42725ceb7fbdb1aa05a5ece865" translate="yes" xml:space="preserve">
          <source>Top-down search of area under mouse for target widget</source>
          <target state="translated">対象ウィジェットのマウス下領域のトップダウン検索</target>
        </trans-unit>
        <trans-unit id="42508320b4ccd94890ce331a9785cdd5bc246821" translate="yes" xml:space="preserve">
          <source>Top-level Non-Object, Non-Array Values</source>
          <target state="translated">トップレベルの非オブジェクト、非配列値</target>
        </trans-unit>
        <trans-unit id="1dfe8eaa64f9cad312ff5671ef0af2ab7a99ff2a" translate="yes" xml:space="preserve">
          <source>Toplevel widget of Tix which represents mostly the main window of an application. It has an associated Tcl interpreter.</source>
          <target state="translated">主にアプリケーションのメインウィンドウを表す Tix の Toplevel ウィジェット。これには、関連する Tcl インタプリタがあります。</target>
        </trans-unit>
        <trans-unit id="05837bfda0ec899c7721328f0212d46820110de7" translate="yes" xml:space="preserve">
          <source>Total number of frames that composed the traceback before truncation. This attribute can be set to &lt;code&gt;None&lt;/code&gt; if the information is not available.</source>
          <target state="translated">Total number of frames that composed the traceback before truncation. This attribute can be set to &lt;code&gt;None&lt;/code&gt; if the information is not available.</target>
        </trans-unit>
        <trans-unit id="bec97d5be9912db81f4f9ca403f9d466e4c61a3d" translate="yes" xml:space="preserve">
          <source>Total size of memory blocks in bytes (&lt;code&gt;int&lt;/code&gt;).</source>
          <target state="translated">バイト単位のメモリブロックの合計サイズ（ &lt;code&gt;int&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="75a7a310270ee5111fd87b87c27f5254e87ed4ed" translate="yes" xml:space="preserve">
          <source>Total size of memory blocks in bytes in the new snapshot (&lt;code&gt;int&lt;/code&gt;): &lt;code&gt;0&lt;/code&gt; if the memory blocks have been released in the new snapshot.</source>
          <target state="translated">新しいスナップショットのメモリブロックの合計サイズ（バイト）（ &lt;code&gt;int&lt;/code&gt; ）：新しいスナップショットでメモリブロックが解放されている場合は &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59b7ba7c881f0eee6a7d633e606139640e9a2656" translate="yes" xml:space="preserve">
          <source>Touch all locations in ancestors of the window that have been changed in the window.</source>
          <target state="translated">ウィンドウ内で変更されたウィンドウの祖先にあるすべての場所をタッチします。</target>
        </trans-unit>
        <trans-unit id="fc109642a782197e3f6c4d5776543cdb3ce34fc1" translate="yes" xml:space="preserve">
          <source>Touch each location in the window that has been touched in any of its ancestor windows. This routine is called by &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt;, so it should almost never be necessary to call it manually.</source>
          <target state="translated">先祖ウィンドウのいずれかでタッチされたウィンドウ内の各場所をタッチします。このルーチンは&lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt;によって呼び出されるため、手動で呼び出す必要はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="dc2fd1e096e6ef9ba0534d8c7883f9f02b4d25c0" translate="yes" xml:space="preserve">
          <source>Touch the entire window, causing it to be completely redrawn on the next &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">ウィンドウ全体をタッチすると、次の&lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt;呼び出しでウィンドウが完全に再描画されます。</target>
        </trans-unit>
        <trans-unit id="86581fcb8efd9c5b78a214474ef387ed93f67805" translate="yes" xml:space="preserve">
          <source>Towers of Hanoi</source>
          <target state="translated">ハノイの塔</target>
        </trans-unit>
        <trans-unit id="2f38169a712e499b917900e244feafc980a814f4" translate="yes" xml:space="preserve">
          <source>Trace</source>
          <target state="translated">Trace</target>
        </trans-unit>
        <trans-unit id="729d0a3affdedff054a2ee5841a6ac39141fe3f0" translate="yes" xml:space="preserve">
          <source>Trace functions should have three arguments: &lt;em&gt;frame&lt;/em&gt;, &lt;em&gt;event&lt;/em&gt;, and &lt;em&gt;arg&lt;/em&gt;. &lt;em&gt;frame&lt;/em&gt; is the current stack frame. &lt;em&gt;event&lt;/em&gt; is a string: &lt;code&gt;'call'&lt;/code&gt;, &lt;code&gt;'line'&lt;/code&gt;, &lt;code&gt;'return'&lt;/code&gt;, &lt;code&gt;'exception'&lt;/code&gt; or &lt;code&gt;'opcode'&lt;/code&gt;. &lt;em&gt;arg&lt;/em&gt; depends on the event type.</source>
          <target state="translated">トレース関数には、&lt;em&gt;frame&lt;/em&gt;、&lt;em&gt;event&lt;/em&gt;、および&lt;em&gt;argの&lt;/em&gt; 3つの引数が必要です。&lt;em&gt;frame&lt;/em&gt;は現在のスタックフレームです。&lt;em&gt;event&lt;/em&gt;は文字列です： &lt;code&gt;'call'&lt;/code&gt; 、 &lt;code&gt;'line'&lt;/code&gt; 、 &lt;code&gt;'return'&lt;/code&gt; 、 &lt;code&gt;'exception'&lt;/code&gt; または &lt;code&gt;'opcode'&lt;/code&gt; 。&lt;em&gt;arg&lt;/em&gt;はイベントタイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="cca95e549ae0599cf6045d07c596c4b7642f3723" translate="yes" xml:space="preserve">
          <source>Trace of a memory block.</source>
          <target state="translated">メモリブロックのトレース。</target>
        </trans-unit>
        <trans-unit id="73df02b52d2db987ebcc21c2fe2978cd599e8c7e" translate="yes" xml:space="preserve">
          <source>Traceback</source>
          <target state="translated">Traceback</target>
        </trans-unit>
        <trans-unit id="1a915c9c47f65dc32b432643b8b0acf75347e53a" translate="yes" xml:space="preserve">
          <source>Traceback Examples</source>
          <target state="translated">トレースバックの例</target>
        </trans-unit>
        <trans-unit id="ce11c2ebf77907c8459174d3b9b1486ef8e6b046" translate="yes" xml:space="preserve">
          <source>Traceback where an object was allocated</source>
          <target state="translated">オブジェクトが割り当てられた場所をトレースバック</target>
        </trans-unit>
        <trans-unit id="f97c295c1a3039941729feab98e098409fe68202" translate="yes" xml:space="preserve">
          <source>Traceback where the memory block was allocated, &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt;&lt;code&gt;Traceback&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">メモリブロックが割り当てられた&lt;a href=&quot;#tracemalloc.Traceback&quot;&gt; &lt;code&gt;Traceback&lt;/code&gt; &lt;/a&gt;、トレースバックインスタンス。</target>
        </trans-unit>
        <trans-unit id="215f86e5666b2b6438b7dcad21a57321b228f03b" translate="yes" xml:space="preserve">
          <source>Traceback where the memory blocks were allocated, &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt;&lt;code&gt;Traceback&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">メモリブロックが割り当てられた&lt;a href=&quot;#tracemalloc.Traceback&quot;&gt; &lt;code&gt;Traceback&lt;/code&gt; &lt;/a&gt;、トレースバックインスタンス。</target>
        </trans-unit>
        <trans-unit id="ddf046523d04587bec23897cf0fd9f9c5d47f3d5" translate="yes" xml:space="preserve">
          <source>TracebackException Objects</source>
          <target state="translated">TracebackException オブジェクト</target>
        </trans-unit>
        <trans-unit id="a74a9e1b5688ce3aa1134bcee9d6faead806e5df" translate="yes" xml:space="preserve">
          <source>Tracebacks of traces are limited to &lt;a href=&quot;#tracemalloc.get_traceback_limit&quot;&gt;&lt;code&gt;get_traceback_limit()&lt;/code&gt;&lt;/a&gt; frames. Use the &lt;em&gt;nframe&lt;/em&gt; parameter of the &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; function to store more frames.</source>
          <target state="translated">トレースのトレースバックは&lt;a href=&quot;#tracemalloc.get_traceback_limit&quot;&gt; &lt;code&gt;get_traceback_limit()&lt;/code&gt; &lt;/a&gt;フレームに制限されています。&lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt;関数の&lt;em&gt;nframe&lt;/em&gt;パラメータを使用して、より多くのフレームを保存します。</target>
        </trans-unit>
        <trans-unit id="20d9eefaebb02bf1f35e2c2af8f942a78a015d4e" translate="yes" xml:space="preserve">
          <source>Traces of all memory blocks allocated by Python: sequence of &lt;a href=&quot;#tracemalloc.Trace&quot;&gt;&lt;code&gt;Trace&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">Pythonによって割り当てられたすべてのメモリブロックの&lt;a href=&quot;#tracemalloc.Trace&quot;&gt; &lt;code&gt;Trace&lt;/code&gt; &lt;/a&gt;：Traceインスタンスのシーケンス。</target>
        </trans-unit>
        <trans-unit id="7bf75e7c8b0f02ab018d760d1e9e5211c51a7a30" translate="yes" xml:space="preserve">
          <source>Tracking all Calls</source>
          <target state="translated">すべての通話を追跡する</target>
        </trans-unit>
        <trans-unit id="e1e96da1294b28f1d2a1b0c918ca3c4901dc294f" translate="yes" xml:space="preserve">
          <source>Tracking order of calls and less verbose call assertions</source>
          <target state="translated">呼の順序を追跡し、より冗長な呼のアサーションを減らす</target>
        </trans-unit>
        <trans-unit id="3b612e72ed8b42ec172f3e6dbff27929a0f89575" translate="yes" xml:space="preserve">
          <source>Traditional Chinese</source>
          <target state="translated">伝統的な中国語</target>
        </trans-unit>
        <trans-unit id="3a41258116450da3b7bae163878df53968a02aa3" translate="yes" xml:space="preserve">
          <source>Transcode CGI variables from &lt;code&gt;os.environ&lt;/code&gt; to &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt; &amp;ldquo;bytes in unicode&amp;rdquo; strings, returning a new dictionary. This function is used by &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt;&lt;code&gt;CGIHandler&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#wsgiref.handlers.IISCGIHandler&quot;&gt;&lt;code&gt;IISCGIHandler&lt;/code&gt;&lt;/a&gt; in place of directly using &lt;code&gt;os.environ&lt;/code&gt;, which is not necessarily WSGI-compliant on all platforms and web servers using Python 3 &amp;ndash; specifically, ones where the OS&amp;rsquo;s actual environment is Unicode (i.e. Windows), or ones where the environment is bytes, but the system encoding used by Python to decode it is anything other than ISO-8859-1 (e.g. Unix systems using UTF-8).</source>
          <target state="translated">CGI変数を &lt;code&gt;os.environ&lt;/code&gt; から&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;PEP 3333の&lt;/strong&gt;&lt;/a&gt;「Unicodeのバイト」文字列にトランスコードし、新しい辞書を返します。この関数は、 &lt;code&gt;os.environ&lt;/code&gt; を直接使用する代わりに&lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt; &lt;code&gt;CGIHandler&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#wsgiref.handlers.IISCGIHandler&quot;&gt; &lt;code&gt;IISCGIHandler&lt;/code&gt; &lt;/a&gt;によって使用されます。これは、Python 3を使用するすべてのプラットフォームおよびWebサーバー、特にOSの実際の環境がUnicode（つまりWindows）である場合、必ずしもWSGIに準拠しているとは限りません。環境がバイトであるが、Pythonがそれをデコードするために使用するシステムエンコーディングがISO-8859-1以外のもの（たとえば、UTF-8を使用するUnixシステム）。</target>
        </trans-unit>
        <trans-unit id="3494f1691e673629d7c793b2bb30afd3bb7d7eac" translate="yes" xml:space="preserve">
          <source>Transferring files</source>
          <target state="translated">ファイルの転送</target>
        </trans-unit>
        <trans-unit id="2cff264a027be4797d3845ae78c3ed06983f0e0b" translate="yes" xml:space="preserve">
          <source>Transfers the callback stack to a fresh &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; instance and returns it. No callbacks are invoked by this operation - instead, they will now be invoked when the new stack is closed (either explicitly or implicitly at the end of a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement).</source>
          <target state="translated">コールバックスタックを新しい&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;インスタンスに転送して返します。この操作ではコールバックは呼び出されません。代わりに、新しいスタックが閉じられたときに（&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントの最後で明示的または暗黙的に）コールバックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3b0300f14835699f5ce3da82f440a599b15cea8e" translate="yes" xml:space="preserve">
          <source>Transfers the callback stack to a fresh &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; instance and returns it. No callbacks are invoked by this operation - instead, they will now be invoked when the new stack is closed (either explicitly or implicitly at the end of a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement).</source>
          <target state="translated">Transfers the callback stack to a fresh &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; instance and returns it. No callbacks are invoked by this operation - instead, they will now be invoked when the new stack is closed (either explicitly or implicitly at the end of a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; statement).</target>
        </trans-unit>
        <trans-unit id="f6cc813676e43d2fcd0dd59a95a03fc47ef50a4a" translate="yes" xml:space="preserve">
          <source>Transform a function into a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">関数を&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;単一ディスパッチの&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;汎用関数に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="68d7c454c7c648a0031f942af1d9bdcc4f0f15d5" translate="yes" xml:space="preserve">
          <source>Transform a function into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">Transform a function into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="29e2be1612d0aa8942c71595cd96e42d73362205" translate="yes" xml:space="preserve">
          <source>Transform a method into a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">メソッドを&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;単一ディスパッチの&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;汎用関数に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="d0eebf3498068208b85ef1cb74b1a9703b5aedc5" translate="yes" xml:space="preserve">
          <source>Transform a method into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">Transform a method into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="77d6e14d23f99b7595d3a17519773f7c518841e6" translate="yes" xml:space="preserve">
          <source>Transform a method into a class method.</source>
          <target state="translated">メソッドをクラスメソッドに変換します。</target>
        </trans-unit>
        <trans-unit id="bd552dd114347d110fdd0f27b833906c1a1deaeb" translate="yes" xml:space="preserve">
          <source>Transform a method into a static method.</source>
          <target state="translated">メソッドを静的メソッドに変換します。</target>
        </trans-unit>
        <trans-unit id="57af29cae6b948bcecd8e9b79ac28cd65f1862f9" translate="yes" xml:space="preserve">
          <source>Transform a method of a class into a property whose value is computed once and then cached as a normal attribute for the life of the instance. Similar to &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property()&lt;/code&gt;&lt;/a&gt;, with the addition of caching. Useful for expensive computed properties of instances that are otherwise effectively immutable.</source>
          <target state="translated">クラスのメソッドをプロパティに変換します。その値は1回計算され、インスタンスの有効期間中は通常の属性としてキャッシュされます。&lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property()&lt;/code&gt; に&lt;/a&gt;似ていますが、キャッシングが追加されています。他の方法では効果的に不変である、インスタンスの高価な計算プロパティに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f2245bfdf04797ba4ad3df2d8c1aa548c557eab0" translate="yes" xml:space="preserve">
          <source>Transform an old-style comparison function to a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-key-function&quot;&gt;key function&lt;/a&gt;. Used with tools that accept key functions (such as &lt;a href=&quot;functions#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nlargest&quot;&gt;&lt;code&gt;heapq.nlargest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt;&lt;code&gt;heapq.nsmallest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;itertools#itertools.groupby&quot;&gt;&lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/a&gt;). This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.</source>
          <target state="translated">古いスタイルの比較関数を&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-key-function&quot;&gt;キー関数に変換します&lt;/a&gt;。キー関数を受け入れるツール（&lt;a href=&quot;functions#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#min&quot;&gt; &lt;code&gt;min()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#max&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;heapq#heapq.nlargest&quot;&gt; &lt;code&gt;heapq.nlargest()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt; &lt;code&gt;heapq.nsmallest()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;itertools#itertools.groupby&quot;&gt; &lt;code&gt;itertools.groupby()&lt;/code&gt; など&lt;/a&gt;）で使用されます。この関数は、比較関数の使用をサポートするPython 2から変換されるプログラムの移行ツールとして主に使用されます。</target>
        </trans-unit>
        <trans-unit id="beb4930deb71e66b49c0181768fce3a666b0b731" translate="yes" xml:space="preserve">
          <source>Transform an old-style comparison function to a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-key-function&quot;&gt;key function&lt;/a&gt;. Used with tools that accept key functions (such as &lt;a href=&quot;functions#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nlargest&quot;&gt;&lt;code&gt;heapq.nlargest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt;&lt;code&gt;heapq.nsmallest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;itertools#itertools.groupby&quot;&gt;&lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/a&gt;). This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.</source>
          <target state="translated">Transform an old-style comparison function to a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-key-function&quot;&gt;key function&lt;/a&gt;. Used with tools that accept key functions (such as &lt;a href=&quot;functions#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;functions#min&quot;&gt; &lt;code&gt;min()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;functions#max&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nlargest&quot;&gt; &lt;code&gt;heapq.nlargest()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt; &lt;code&gt;heapq.nsmallest()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;itertools#itertools.groupby&quot;&gt; &lt;code&gt;itertools.groupby()&lt;/code&gt; &lt;/a&gt;). This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.</target>
        </trans-unit>
        <trans-unit id="0d475eafab57f0600a394b645fd9f36b3327943b" translate="yes" xml:space="preserve">
          <source>Transform list &lt;em&gt;x&lt;/em&gt; into a heap, in-place, in linear time.</source>
          <target state="translated">リスト&lt;em&gt;x&lt;/em&gt;を、線形時間でインプレースのヒープに変換します。</target>
        </trans-unit>
        <trans-unit id="6fe84a1868be82491d31f1d9d8079682b81776df" translate="yes" xml:space="preserve">
          <source>Transforms a string to one that can be used in locale-aware comparisons. For example, &lt;code&gt;strxfrm(s1) &amp;lt; strxfrm(s2)&lt;/code&gt; is equivalent to &lt;code&gt;strcoll(s1, s2) &amp;lt; 0&lt;/code&gt;. This function can be used when the same string is compared repeatedly, e.g. when collating a sequence of strings.</source>
          <target state="translated">文字列を、ロケール対応の比較で使用できるものに変換します。たとえば、 &lt;code&gt;strxfrm(s1) &amp;lt; strxfrm(s2)&lt;/code&gt; は &lt;code&gt;strcoll(s1, s2) &amp;lt; 0&lt;/code&gt; と同等です。この関数は、文字列のシーケンスを照合する場合など、同じ文字列が繰り返し比較される場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="59eb997dbc4748a8f708bc6652221a97c4a5cc52" translate="yes" xml:space="preserve">
          <source>Transforms the option name &lt;em&gt;option&lt;/em&gt; as found in an input file or as passed in by client code to the form that should be used in the internal structures. The default implementation returns a lower-case version of &lt;em&gt;option&lt;/em&gt;; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior.</source>
          <target state="translated">入力ファイルにあるか、クライアントコードによって内部構造で使用されるフォームに渡されるように、オプション名&lt;em&gt;オプション&lt;/em&gt;を変換します。デフォルトの実装は、小文字のバージョンの&lt;em&gt;オプションを&lt;/em&gt;返し&lt;em&gt;ます&lt;/em&gt;。サブクラスでこれをオーバーライドするか、クライアントコードでインスタンスにこの名前の属性を設定して、この動作に影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="7a83d63b28fa4225a56bc0566e8e33c1cf91e595" translate="yes" xml:space="preserve">
          <source>Translate a host name to IPv4 address format, extended interface. Return a triple &lt;code&gt;(hostname, aliaslist, ipaddrlist)&lt;/code&gt; where &lt;em&gt;hostname&lt;/em&gt; is the primary host name responding to the given &lt;em&gt;ip_address&lt;/em&gt;, &lt;em&gt;aliaslist&lt;/em&gt; is a (possibly empty) list of alternative host names for the same address, and &lt;em&gt;ipaddrlist&lt;/em&gt; is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt;&lt;code&gt;gethostbyname_ex()&lt;/code&gt;&lt;/a&gt; does not support IPv6 name resolution, and &lt;a href=&quot;#socket.getaddrinfo&quot;&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt;&lt;/a&gt; should be used instead for IPv4/v6 dual stack support.</source>
          <target state="translated">ホスト名をIPv4アドレス形式、拡張インターフェースに変換します。トリプル &lt;code&gt;(hostname, aliaslist, ipaddrlist)&lt;/code&gt; 返します。ここで、&lt;em&gt;hostname&lt;/em&gt;は&lt;em&gt;指定さ&lt;/em&gt;れた&lt;em&gt;ip_addressに&lt;/em&gt;応答するプライマリホスト名、&lt;em&gt;aliaslist&lt;/em&gt;は同じアドレスの代替ホスト名のリスト（空の場合もある）、&lt;em&gt;ipaddrlist&lt;/em&gt;はIPv4アドレスのリストです同じホスト上の同じインターフェース（多くの場合、必ずしも単一のアドレスではありません）。&lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt; &lt;code&gt;gethostbyname_ex()&lt;/code&gt; &lt;/a&gt;はIPv6の名前解決をサポートしていません&lt;a href=&quot;#socket.getaddrinfo&quot;&gt; &lt;code&gt;getaddrinfo()&lt;/code&gt; &lt;/a&gt; / v6デュアルスタックをサポートするには、代わりにgetaddrinfo（）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="70d07b15ee9a4f6a42ff4435887b259bd202d514" translate="yes" xml:space="preserve">
          <source>Translate a host name to IPv4 address format. The IPv4 address is returned as a string, such as &lt;code&gt;'100.50.200.5'&lt;/code&gt;. If the host name is an IPv4 address itself it is returned unchanged. See &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt;&lt;code&gt;gethostbyname_ex()&lt;/code&gt;&lt;/a&gt; for a more complete interface. &lt;a href=&quot;#socket.gethostbyname&quot;&gt;&lt;code&gt;gethostbyname()&lt;/code&gt;&lt;/a&gt; does not support IPv6 name resolution, and &lt;a href=&quot;#socket.getaddrinfo&quot;&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt;&lt;/a&gt; should be used instead for IPv4/v6 dual stack support.</source>
          <target state="translated">ホスト名をIPv4アドレス形式に変換します。IPv4アドレスは、 &lt;code&gt;'100.50.200.5'&lt;/code&gt; などの文字列として返されます。ホスト名がIPv4アドレス自体の場合は、変更されずに返されます。より完全なインターフェースについては&lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt; &lt;code&gt;gethostbyname_ex()&lt;/code&gt; &lt;/a&gt;を参照してください。&lt;a href=&quot;#socket.gethostbyname&quot;&gt; &lt;code&gt;gethostbyname()&lt;/code&gt; &lt;/a&gt;はIPv6の名前解決をサポートしていません&lt;a href=&quot;#socket.getaddrinfo&quot;&gt; &lt;code&gt;getaddrinfo()&lt;/code&gt; &lt;/a&gt; / v6デュアルスタックをサポートするには、代わりにgetaddrinfo（）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e008d42be736fc0c81a4d9b6b6bedd2f1699d3e4" translate="yes" xml:space="preserve">
          <source>Translate a socket address &lt;em&gt;sockaddr&lt;/em&gt; into a 2-tuple &lt;code&gt;(host, port)&lt;/code&gt;. Depending on the settings of &lt;em&gt;flags&lt;/em&gt;, the result can contain a fully-qualified domain name or numeric address representation in &lt;em&gt;host&lt;/em&gt;. Similarly, &lt;em&gt;port&lt;/em&gt; can contain a string port name or a numeric port number.</source>
          <target state="translated">ソケットアドレス&lt;em&gt;sockaddr&lt;/em&gt;を2タプル &lt;code&gt;(host, port)&lt;/code&gt; 変換します。&lt;em&gt;フラグ&lt;/em&gt;の設定に応じて、結果には&lt;em&gt;hostの&lt;/em&gt;完全修飾ドメイン名または数値アドレス表現が含まれる可能性があり&lt;em&gt;ます&lt;/em&gt;。同様に、&lt;em&gt;portに&lt;/em&gt;は文字列のポート名または数値のポート番号を含めることができます。</target>
        </trans-unit>
        <trans-unit id="043a7fd2528ceea779160e39be4de88da98043fe" translate="yes" xml:space="preserve">
          <source>Translate an Internet port number and protocol name to a service name for that service. The optional protocol name, if given, should be &lt;code&gt;'tcp'&lt;/code&gt; or &lt;code&gt;'udp'&lt;/code&gt;, otherwise any protocol will match.</source>
          <target state="translated">インターネットポート番号とプロトコル名をそのサービスのサービス名に変換します。オプションのプロトコル名を指定する場合は、 &lt;code&gt;'tcp'&lt;/code&gt; または &lt;code&gt;'udp'&lt;/code&gt; にする必要があります。そうでない場合は、すべてのプロトコルが一致します。</target>
        </trans-unit>
        <trans-unit id="9c6347fecd97c9239fbe8e190539881f5b00aaad" translate="yes" xml:space="preserve">
          <source>Translate an Internet protocol name (for example, &lt;code&gt;'icmp'&lt;/code&gt;) to a constant suitable for passing as the (optional) third argument to the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function. This is usually only needed for sockets opened in &amp;ldquo;raw&amp;rdquo; mode (&lt;a href=&quot;#socket.SOCK_RAW&quot;&gt;&lt;code&gt;SOCK_RAW&lt;/code&gt;&lt;/a&gt;); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.</source>
          <target state="translated">インターネットプロトコル名（たとえば、 &lt;code&gt;'icmp'&lt;/code&gt; ）を（オプションの）3番目の引数として&lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt;関数に渡すのに適した定数に変換します。これは通常、「raw」モード（&lt;a href=&quot;#socket.SOCK_RAW&quot;&gt; &lt;code&gt;SOCK_RAW&lt;/code&gt; &lt;/a&gt;）で開かれたソケットにのみ必要です。通常のソケットモードでは、プロトコルが省略されているかゼロの場合、正しいプロトコルが自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="2c2ac3cca9292668377fba4ee4623c03c2cd3d27" translate="yes" xml:space="preserve">
          <source>Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be &lt;code&gt;'tcp'&lt;/code&gt; or &lt;code&gt;'udp'&lt;/code&gt;, otherwise any protocol will match.</source>
          <target state="translated">インターネットサービス名とプロトコル名をそのサービスのポート番号に変換します。オプションのプロトコル名を指定する場合は、 &lt;code&gt;'tcp'&lt;/code&gt; または &lt;code&gt;'udp'&lt;/code&gt; にする必要があります。そうでない場合、すべてのプロトコルが一致します。</target>
        </trans-unit>
        <trans-unit id="c6167576bbe6424a770750fda6b310cd33b5754d" translate="yes" xml:space="preserve">
          <source>Translate the &lt;em&gt;host&lt;/em&gt;/&lt;em&gt;port&lt;/em&gt; argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. &lt;em&gt;host&lt;/em&gt; is a domain name, a string representation of an IPv4/v6 address or &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;port&lt;/em&gt; is a string service name such as &lt;code&gt;'http'&lt;/code&gt;, a numeric port number or &lt;code&gt;None&lt;/code&gt;. By passing &lt;code&gt;None&lt;/code&gt; as the value of &lt;em&gt;host&lt;/em&gt; and &lt;em&gt;port&lt;/em&gt;, you can pass &lt;code&gt;NULL&lt;/code&gt; to the underlying C API.</source>
          <target state="translated">翻訳&lt;em&gt;ホスト&lt;/em&gt; / &lt;em&gt;ポート&lt;/em&gt;引数はそのサービスに接続されたソケットを作成するために必要なすべての引数を含む5タプルのシーケンスに。&lt;em&gt;host&lt;/em&gt;はドメイン名、IPv4 / v6アドレスの文字列表現、または &lt;code&gt;None&lt;/code&gt; です。&lt;em&gt;port&lt;/em&gt;は、 &lt;code&gt;'http'&lt;/code&gt; 、数値のポート番号、または &lt;code&gt;None&lt;/code&gt; などの文字列サービス名です。&lt;em&gt;host&lt;/em&gt;と&lt;em&gt;portの&lt;/em&gt;値として &lt;code&gt;None&lt;/code&gt; を渡すことにより、基礎となるC APIに &lt;code&gt;NULL&lt;/code&gt; を渡すことができます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57cc23b1ca1f4bdb359fda45a6c0cfa2bf20d929" translate="yes" xml:space="preserve">
          <source>Translation classes are what actually implement the translation of original source file message strings to translated message strings. The base class used by all translation classes is &lt;a href=&quot;#gettext.NullTranslations&quot;&gt;&lt;code&gt;NullTranslations&lt;/code&gt;&lt;/a&gt;; this provides the basic interface you can use to write your own specialized translation classes. Here are the methods of &lt;code&gt;NullTranslations&lt;/code&gt;:</source>
          <target state="translated">翻訳クラスは、元のソースファイルメッセージ文字列から翻訳されたメッセージ文字列への翻訳を実際に実装するクラスです。すべての変換クラスで使用される基本クラスは&lt;a href=&quot;#gettext.NullTranslations&quot;&gt; &lt;code&gt;NullTranslations&lt;/code&gt; &lt;/a&gt;です。これは、独自の特殊な翻訳クラスを作成するために使用できる基本的なインターフェースを提供します。 &lt;code&gt;NullTranslations&lt;/code&gt; のメソッドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a38cacbb1ca124ad8f23834d55a6a98f51f54e09" translate="yes" xml:space="preserve">
          <source>Translation of docstrings into different languages</source>
          <target state="translated">ドクストリングの異なる言語への翻訳</target>
        </trans-unit>
        <trans-unit id="5819361fc7a2ef298014871c32b98dcda96e637b" translate="yes" xml:space="preserve">
          <source>Transparent Content Negotiation in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-55&quot;&gt;&lt;strong&gt;RFC 2295&lt;/strong&gt;&lt;/a&gt;, Section 8.1 (Experimental)</source>
          <target state="translated">HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-55&quot;&gt;&lt;strong&gt;RFC 2295の&lt;/strong&gt;&lt;/a&gt;透過的なコンテンツネゴシエーション、セクション8.1（試験的）</target>
        </trans-unit>
        <trans-unit id="75c3fa4a53fd401b2229a7f0ebc604eeac4ea1cb" translate="yes" xml:space="preserve">
          <source>Transparent Content Negotiation in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-58&quot;&gt;&lt;strong&gt;RFC 2295&lt;/strong&gt;&lt;/a&gt;, Section 8.1 (Experimental)</source>
          <target state="translated">Transparent Content Negotiation in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-58&quot;&gt;&lt;strong&gt;RFC 2295&lt;/strong&gt;&lt;/a&gt;, Section 8.1 (Experimental)</target>
        </trans-unit>
        <trans-unit id="013dfe5673d630bea0c413d2532e94026706f073" translate="yes" xml:space="preserve">
          <source>Transparently opens files compressed with gzip and bzip2 (recognized by the extensions &lt;code&gt;'.gz'&lt;/code&gt; and &lt;code&gt;'.bz2'&lt;/code&gt;) using the &lt;a href=&quot;gzip#module-gzip&quot;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;bz2#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt; modules. If the filename extension is not &lt;code&gt;'.gz'&lt;/code&gt; or &lt;code&gt;'.bz2'&lt;/code&gt;, the file is opened normally (ie, using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; without any decompression).</source>
          <target state="translated">&lt;a href=&quot;gzip#module-gzip&quot;&gt; &lt;code&gt;gzip&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;bz2#module-bz2&quot;&gt; &lt;code&gt;bz2&lt;/code&gt; &lt;/a&gt;モジュールを使用して、gzipおよびbzip2（拡張子 &lt;code&gt;'.gz'&lt;/code&gt; および &lt;code&gt;'.bz2'&lt;/code&gt; で認識）で圧縮されたファイルを透過的に開きます。ファイル名の拡張子が &lt;code&gt;'.gz'&lt;/code&gt; または &lt;code&gt;'.bz2'&lt;/code&gt; でない場合、ファイルは通常どおりに開かれます（つまり、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;を使用して解凍せずに）。</target>
        </trans-unit>
        <trans-unit id="8ba05920f9cac3c752bf58531bc3aff23fb4f8d5" translate="yes" xml:space="preserve">
          <source>Transport endpoint is already connected</source>
          <target state="translated">トランスポートエンドポイントが既に接続されている</target>
        </trans-unit>
        <trans-unit id="42b6cb1e2709a84c628f001deda5c6f4c66e6e2f" translate="yes" xml:space="preserve">
          <source>Transport endpoint is not connected</source>
          <target state="translated">トランスポートエンドポイントが接続されていない</target>
        </trans-unit>
        <trans-unit id="fe569542c10e401dbb4be544f1e89297055140e3" translate="yes" xml:space="preserve">
          <source>Transport objects are always instantiated by an &lt;a href=&quot;asyncio-eventloop#asyncio-event-loop&quot;&gt;asyncio event loop&lt;/a&gt;.</source>
          <target state="translated">トランスポートオブジェクトは、常に&lt;a href=&quot;asyncio-eventloop#asyncio-event-loop&quot;&gt;asyncioイベントループ&lt;/a&gt;によってインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="fbd2edc0da02a266d5cdec2e57c47c688da6fda8" translate="yes" xml:space="preserve">
          <source>Transports</source>
          <target state="translated">Transports</target>
        </trans-unit>
        <trans-unit id="4761cb167f0448d6e20290552ca05bb90b3bb24d" translate="yes" xml:space="preserve">
          <source>Transports Hierarchy</source>
          <target state="translated">交通機関の階層</target>
        </trans-unit>
        <trans-unit id="c1d7e246eaa462ae433bf46e7c1126b7c1acd3ea" translate="yes" xml:space="preserve">
          <source>Transports and Protocols</source>
          <target state="translated">トランスポートとプロトコル</target>
        </trans-unit>
        <trans-unit id="264cb105f9be5010db06f954d5f74816deacc8c2" translate="yes" xml:space="preserve">
          <source>Transports and Protocols are used by the &lt;strong&gt;low-level&lt;/strong&gt; event loop APIs such as &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;. They use callback-based programming style and enable high-performance implementations of network or IPC protocols (e.g. HTTP).</source>
          <target state="translated">トランスポートとプロトコルは、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt;などの&lt;strong&gt;低レベルの&lt;/strong&gt;イベントループAPI によって使用されます。コールバックベースのプログラミングスタイルを使用し、ネットワークまたはIPCプロトコル（HTTPなど）の高性能な実装を可能にします。</target>
        </trans-unit>
        <trans-unit id="a77987d2d7a6956f8a337ae29fb7fb8773743f16" translate="yes" xml:space="preserve">
          <source>Transports are classes provided by &lt;a href=&quot;asyncio#module-asyncio&quot;&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt; in order to abstract various kinds of communication channels.</source>
          <target state="translated">トランスポートは、さまざまな種類の通信チャネルを抽象化するために&lt;a href=&quot;asyncio#module-asyncio&quot;&gt; &lt;code&gt;asyncio&lt;/code&gt; &lt;/a&gt;によって提供されるクラスです。</target>
        </trans-unit>
        <trans-unit id="303f4351f2c69150d0eddec52cfeb625b2371c1e" translate="yes" xml:space="preserve">
          <source>Transports returned by &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_datagram_endpoint&quot;&gt;&lt;code&gt;loop.create_datagram_endpoint()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_datagram_endpoint&quot;&gt; &lt;code&gt;loop.create_datagram_endpoint()&lt;/code&gt; &lt;/a&gt;によって返されるトランスポート：</target>
        </trans-unit>
        <trans-unit id="d9873fba572493e3eaa82cea5f269402afce8d20" translate="yes" xml:space="preserve">
          <source>Transports that can Send data (TCP and Unix connections, pipes, etc). Returned from methods like &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt;&lt;code&gt;loop.create_unix_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;loop.connect_write_pipe()&lt;/code&gt;&lt;/a&gt;, etc:</source>
          <target state="translated">データを送信できるトランスポート（TCPおよびUnix接続、パイプなど）。&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt; &lt;code&gt;loop.create_unix_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt; &lt;code&gt;loop.connect_write_pipe()&lt;/code&gt; &lt;/a&gt;などのメソッドから返されます。</target>
        </trans-unit>
        <trans-unit id="a051bdcbc525919b993b381956fc20546b16e4a1" translate="yes" xml:space="preserve">
          <source>Transports that can receive data (TCP and Unix connections, pipes, etc). Returned from methods like &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt;&lt;code&gt;loop.create_unix_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt;&lt;code&gt;loop.connect_read_pipe()&lt;/code&gt;&lt;/a&gt;, etc:</source>
          <target state="translated">データを受信できるトランスポート（TCPおよびUnix接続、パイプなど）。&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt; &lt;code&gt;loop.create_unix_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt; &lt;code&gt;loop.connect_read_pipe()&lt;/code&gt; &lt;/a&gt;などのメソッドから返されます。</target>
        </trans-unit>
        <trans-unit id="509f851ebb0250fc3a0869d4049ba708e0505ba6" translate="yes" xml:space="preserve">
          <source>Trashed</source>
          <target state="translated">Trashed</target>
        </trans-unit>
        <trans-unit id="e28f72c47fa3b5ed393703d102760467590a1188" translate="yes" xml:space="preserve">
          <source>Tree heading area.</source>
          <target state="translated">ツリーヘディングエリア。</target>
        </trans-unit>
        <trans-unit id="6881932baff27b84638af452003fe7547ebad2f3" translate="yes" xml:space="preserve">
          <source>Tree mode</source>
          <target state="translated">ツリーモード</target>
        </trans-unit>
        <trans-unit id="baf786d49c14bdaf0256d96340c5f4e28abb53d2" translate="yes" xml:space="preserve">
          <source>TreeBuilder Objects</source>
          <target state="translated">TreeBuilder オブジェクト</target>
        </trans-unit>
        <trans-unit id="d78dca84fb22f51e97d39c20a021d39026e0b47d" translate="yes" xml:space="preserve">
          <source>Treeview</source>
          <target state="translated">Treeview</target>
        </trans-unit>
        <trans-unit id="cd6a940383f49ad00c6557c201e300253f2a02b1" translate="yes" xml:space="preserve">
          <source>Tries to compile &lt;em&gt;source&lt;/em&gt;, which should be a string of Python code and return a code object if &lt;em&gt;source&lt;/em&gt; is valid Python code. In that case, the filename attribute of the code object will be &lt;em&gt;filename&lt;/em&gt;, which defaults to &lt;code&gt;'&amp;lt;input&amp;gt;'&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if &lt;em&gt;source&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; valid Python code, but is a prefix of valid Python code.</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt;をコンパイルしようとします。これはPythonコードの文字列である必要があり、&lt;em&gt;source&lt;/em&gt;が有効なPythonコードの場合はコードオブジェクトを返します。その場合、コードオブジェクトのfilename属性は&lt;em&gt;filenameで&lt;/em&gt;、デフォルトは &lt;code&gt;'&amp;lt;input&amp;gt;'&lt;/code&gt; です。戻り値 &lt;code&gt;None&lt;/code&gt; もし&lt;em&gt;ソースが&lt;/em&gt;ある&lt;em&gt;ではない&lt;/em&gt;有効なPythonのコードが、有効なPythonコードの接頭辞です。</target>
        </trans-unit>
        <trans-unit id="54f73f8dd5429f4a01f4af96bdf0dbb59c9d9b9f" translate="yes" xml:space="preserve">
          <source>Tries to create a socket; on failure, uses an exponential back-off algorithm. On initial failure, the handler will drop the message it was trying to send. When subsequent messages are handled by the same instance, it will not try connecting until some time has passed. The default parameters are such that the initial delay is one second, and if after that delay the connection still can&amp;rsquo;t be made, the handler will double the delay each time up to a maximum of 30 seconds.</source>
          <target state="translated">ソケットを作成しようとします。失敗時には、指数バックオフアルゴリズムを使用します。最初の失敗時に、ハンドラーは送信しようとしたメッセージをドロップします。後続のメッセージが同じインスタンスによって処理される場合、しばらく時間が経過するまで接続は試行されません。デフォルトのパラメーターは、初期遅延が1秒であり、その後も接続を確立できない場合、ハンドラーは毎回最大30秒まで遅延を2倍にします。</target>
        </trans-unit>
        <trans-unit id="723b7551d8d8f217ec734b051a205c9a9d64447b" translate="yes" xml:space="preserve">
          <source>Tries to determine the default locale settings and returns them as a tuple of the form &lt;code&gt;(language code, encoding)&lt;/code&gt;.</source>
          <target state="translated">デフォルトのロケール設定の決定を試み、それらを &lt;code&gt;(language code, encoding)&lt;/code&gt; という形式のタプルとして返します。</target>
        </trans-unit>
        <trans-unit id="f6e122f407603681d635913886b1cca45552154d" translate="yes" xml:space="preserve">
          <source>Tries to determine the libc version against which the file executable (defaults to the Python interpreter) is linked. Returns a tuple of strings &lt;code&gt;(lib,
version)&lt;/code&gt; which default to the given parameters in case the lookup fails.</source>
          <target state="translated">実行可能ファイル（デフォルトではPythonインタープリター）がリンクされているlibcバージョンを判別しようとします。文字列 &lt;code&gt;(lib, version)&lt;/code&gt; タプルを返します。これは、検索が失敗した場合にデフォルトで指定されたパラメーターになります。</target>
        </trans-unit>
        <trans-unit id="db9365ac0a5ac052a881974fe2bdebad1f76b2bc" translate="yes" xml:space="preserve">
          <source>Trigger the termination of the dialog window.</source>
          <target state="translated">ダイアログウィンドウの終了をトリガーにします。</target>
        </trans-unit>
        <trans-unit id="b9e4c026492c440bf32166e0789393487d03b254" translate="yes" xml:space="preserve">
          <source>Trigonometric functions</source>
          <target state="translated">三角関数</target>
        </trans-unit>
        <trans-unit id="94503f7ff8b00ca0e33985b5db4eb1f04f5842aa" translate="yes" xml:space="preserve">
          <source>Triple quoted strings may span multiple lines - all associated whitespace will be included in the string literal.</source>
          <target state="translated">トリプルクォートされた文字列は複数行に渡ることがあります-関連する空白はすべて文字列リテラルに含まれます。</target>
        </trans-unit>
        <trans-unit id="ce93d3947ad07eda86b0f4a04d88b4fde0c3e713" translate="yes" xml:space="preserve">
          <source>Triple quoted: &lt;code&gt;'''Three single quotes'''&lt;/code&gt;, &lt;code&gt;&quot;&quot;&quot;Three double quotes&quot;&quot;&quot;&lt;/code&gt;</source>
          <target state="translated">三重引用符： &lt;code&gt;'''Three single quotes'''&lt;/code&gt; 、 &lt;code&gt;&quot;&quot;&quot;Three double quotes&quot;&quot;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4e3160154fa07738c0749f5a1674876dac0991b9" translate="yes" xml:space="preserve">
          <source>Triple quoted: &lt;code&gt;b'''3 single quotes'''&lt;/code&gt;, &lt;code&gt;b&quot;&quot;&quot;3 double quotes&quot;&quot;&quot;&lt;/code&gt;</source>
          <target state="translated">三重引用符： &lt;code&gt;b'''3 single quotes'''&lt;/code&gt; 、 &lt;code&gt;b&quot;&quot;&quot;3 double quotes&quot;&quot;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88b33e4e12f75ac8bf792aebde41f1a090f3a612" translate="yes" xml:space="preserve">
          <source>True</source>
          <target state="translated">True</target>
        </trans-unit>
        <trans-unit id="9799c2f01a14841243adfd69d6831aa48fd1922c" translate="yes" xml:space="preserve">
          <source>Truncate the file corresponding to &lt;em&gt;path&lt;/em&gt;, so that it is at most &lt;em&gt;length&lt;/em&gt; bytes in size.</source>
          <target state="translated">&lt;em&gt;path&lt;/em&gt;に対応するファイルを切り捨て、サイズが最大で&lt;em&gt;length&lt;/em&gt;バイトになるようにします。</target>
        </trans-unit>
        <trans-unit id="af680e38ac0cf3f9223497dde47b36e539f5b3b2" translate="yes" xml:space="preserve">
          <source>Truncate the file corresponding to file descriptor &lt;em&gt;fd&lt;/em&gt;, so that it is at most &lt;em&gt;length&lt;/em&gt; bytes in size. As of Python 3.3, this is equivalent to &lt;code&gt;os.truncate(fd, length)&lt;/code&gt;.</source>
          <target state="translated">ファイル記述子&lt;em&gt;fdに&lt;/em&gt;対応するファイルを切り捨てて、サイズが最大で&lt;em&gt;length&lt;/em&gt;バイトになるようにします。Python 3.3以降、これは &lt;code&gt;os.truncate(fd, length)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="bf21e5053e591409eb8326bfa9935e23594fdb97" translate="yes" xml:space="preserve">
          <source>Truth Test</source>
          <target state="translated">真実のテスト</target>
        </trans-unit>
        <trans-unit id="f768c2b1817c6d2e7da4fa131e14ada17a4413ca" translate="yes" xml:space="preserve">
          <source>Truth Value Testing</source>
          <target state="translated">真理値テスト</target>
        </trans-unit>
        <trans-unit id="042c862e4467d7d057cced262e6869dd75c22b7d" translate="yes" xml:space="preserve">
          <source>Try again</source>
          <target state="translated">もう一度試してみてください。</target>
        </trans-unit>
        <trans-unit id="65e343170835a746169f1c7b9ad30abe19ddd1b7" translate="yes" xml:space="preserve">
          <source>Try to find a library and return a pathname. &lt;em&gt;name&lt;/em&gt; is the library name without any prefix like &lt;code&gt;lib&lt;/code&gt;, suffix like &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.dylib&lt;/code&gt; or version number (this is the form used for the posix linker option &lt;code&gt;-l&lt;/code&gt;). If no library can be found, returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ライブラリを見つけてパス名を返すようにしてください。&lt;em&gt;name&lt;/em&gt;は、 &lt;code&gt;lib&lt;/code&gt; のような接頭辞、 &lt;code&gt;.so&lt;/code&gt; 、 &lt;code&gt;.dylib&lt;/code&gt; のような接尾辞、またはバージョン番号のないライブラリー&lt;em&gt;名&lt;/em&gt;です（これは、posixリンカーオプション &lt;code&gt;-l&lt;/code&gt; で使用される形式です）。ライブラリが見つからない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a562fe84656e778191318907a6802010662517ce" translate="yes" xml:space="preserve">
          <source>Try to find a library and return a pathname. &lt;em&gt;name&lt;/em&gt; is the library name without any prefix like &lt;em&gt;lib&lt;/em&gt;, suffix like &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.dylib&lt;/code&gt; or version number (this is the form used for the posix linker option &lt;code&gt;-l&lt;/code&gt;). If no library can be found, returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ライブラリを見つけてパス名を返すようにしてください。&lt;em&gt;name&lt;/em&gt;は、&lt;em&gt;libの&lt;/em&gt;ような接頭辞、 &lt;code&gt;.so&lt;/code&gt; 、 &lt;code&gt;.dylib&lt;/code&gt; のような接尾辞、またはバージョン番号のないライブラリー&lt;em&gt;名&lt;/em&gt;です（これは、posixリンカーオプション &lt;code&gt;-l&lt;/code&gt; で使用される形式です）。ライブラリが見つからない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ed2c04bc7d24d737144826a2ba71c94163776043" translate="yes" xml:space="preserve">
          <source>Try to get source code for the given object and display it.</source>
          <target state="translated">与えられたオブジェクトのソースコードを取得して表示してみます。</target>
        </trans-unit>
        <trans-unit id="2516887d302ab812a8c194feed3c558ddefb62c8" translate="yes" xml:space="preserve">
          <source>Try to guess which module an object was defined in.</source>
          <target state="translated">オブジェクトがどのモジュールで定義されているかを推測してみてください。</target>
        </trans-unit>
        <trans-unit id="ebd1d1f612e596ce7c3de763a40fa459d5004d6e" translate="yes" xml:space="preserve">
          <source>Try to match &lt;em&gt;reference&lt;/em&gt; as well as possible to a portion of &lt;em&gt;fragment&lt;/em&gt; (which should be the longer fragment). This is (conceptually) done by taking slices out of &lt;em&gt;fragment&lt;/em&gt;, using &lt;a href=&quot;#audioop.findfactor&quot;&gt;&lt;code&gt;findfactor()&lt;/code&gt;&lt;/a&gt; to compute the best match, and minimizing the result. The fragments should both contain 2-byte samples. Return a tuple &lt;code&gt;(offset, factor)&lt;/code&gt; where &lt;em&gt;offset&lt;/em&gt; is the (integer) offset into &lt;em&gt;fragment&lt;/em&gt; where the optimal match started and &lt;em&gt;factor&lt;/em&gt; is the (floating-point) factor as per &lt;a href=&quot;#audioop.findfactor&quot;&gt;&lt;code&gt;findfactor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;参照&lt;/em&gt;をできるだけ&lt;em&gt;フラグメントの一部&lt;/em&gt;（より長いフラグメントである必要があります）に一致させるようにしてください。これは（概念的に）&lt;em&gt;fragment&lt;/em&gt;からスライスを取り出し、&lt;a href=&quot;#audioop.findfactor&quot;&gt; &lt;code&gt;findfactor()&lt;/code&gt; &lt;/a&gt;を使用して最適な一致を計算し、結果を最小化することによって行われます。フラグメントには両方とも2バイトのサンプルが含まれている必要があります。タプル &lt;code&gt;(offset, factor)&lt;/code&gt; 返します。&lt;em&gt;オフセット&lt;/em&gt;は、&lt;em&gt;フラグメント&lt;/em&gt;への（整数）オフセットで、最適なマッチングが開始され、&lt;em&gt;ファクター&lt;/em&gt;は&lt;a href=&quot;#audioop.findfactor&quot;&gt; &lt;code&gt;findfactor()&lt;/code&gt; の&lt;/a&gt;ように（浮動小数点）ファクターです。</target>
        </trans-unit>
        <trans-unit id="9ac78d12a16aa80098bb54153e110d21246ae88e" translate="yes" xml:space="preserve">
          <source>Try to match a single dict with the supplied arguments.</source>
          <target state="translated">与えられた引数に単一のディクトをマッチさせようとします。</target>
        </trans-unit>
        <trans-unit id="b42726f25482d59cf0996a89fcd7e965117f2de5" translate="yes" xml:space="preserve">
          <source>Try to match a single stored value (&lt;em&gt;dv&lt;/em&gt;) with a supplied value (&lt;em&gt;v&lt;/em&gt;).</source>
          <target state="translated">単一の格納された値（&lt;em&gt;dv&lt;/em&gt;）を提供された値（&lt;em&gt;v&lt;/em&gt;）と一致させます。</target>
        </trans-unit>
        <trans-unit id="d185a34ec17e724666e5fcb4d5595d842b8d7712" translate="yes" xml:space="preserve">
          <source>Try to maximize code reuse. On occasion, tests will vary by something as small as what type of input is used. Minimize code duplication by subclassing a basic test class with a class that specifies the input:</source>
          <target state="translated">コードの再利用を最大化するようにしてください。時には、どのような入力タイプが使用されるかというような小さなことでテストが変わることもあります。基本的なテストクラスを入力を指定するクラスでサブクラス化することで、コードの重複を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="24c4d4b0384c5e8113577a77c50cd02909ab1752" translate="yes" xml:space="preserve">
          <source>Try to set the audio sampling rate to &lt;em&gt;samplerate&lt;/em&gt; samples per second. Returns the rate actually set. Most sound devices don&amp;rsquo;t support arbitrary sampling rates. Common rates are:</source>
          <target state="translated">オーディオサンプリングレートを設定するようにしてください&lt;em&gt;サンプルレート&lt;/em&gt;秒あたりのサンプル。実際に設定されたレートを返します。ほとんどのサウンドデバイスは、任意のサンプリングレートをサポートしていません。一般的な料金は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="dfd9bba471282a5364090df5e871704f1989384f" translate="yes" xml:space="preserve">
          <source>Try to set the current audio format to &lt;em&gt;format&lt;/em&gt;&amp;mdash;see &lt;a href=&quot;#ossaudiodev.oss_audio_device.getfmts&quot;&gt;&lt;code&gt;getfmts()&lt;/code&gt;&lt;/a&gt; for a list. Returns the audio format that the device was set to, which may not be the requested format. May also be used to return the current audio format&amp;mdash;do this by passing an &amp;ldquo;audio format&amp;rdquo; of &lt;code&gt;AFMT_QUERY&lt;/code&gt;.</source>
          <target state="translated">するために、現在のオーディオ形式を設定してみ&lt;em&gt;フォーマット&lt;/em&gt; -see &lt;a href=&quot;#ossaudiodev.oss_audio_device.getfmts&quot;&gt; &lt;code&gt;getfmts()&lt;/code&gt; &lt;/a&gt;リストするために。デバイスが設定されたオーディオ形式を返します。要求された形式ではない可能性があります。現在のオーディオ形式を返すために使用することもできます。これを行うには、 &lt;code&gt;AFMT_QUERY&lt;/code&gt; の「オーディオ形式」を渡します。</target>
        </trans-unit>
        <trans-unit id="01dc1292ce86f3caf0848ae2f322f3751399a279" translate="yes" xml:space="preserve">
          <source>Try to switch to UTF-8 mode. Returns the server response if successful, raises &lt;a href=&quot;#poplib.error_proto&quot;&gt;&lt;code&gt;error_proto&lt;/code&gt;&lt;/a&gt; if not. Specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc6856.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 6856&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">UTF-8モードに切り替えてみてください。成功した場合はサーバーの応答を返し、&lt;a href=&quot;#poplib.error_proto&quot;&gt; &lt;code&gt;error_proto&lt;/code&gt; &lt;/a&gt;場合はerror_protoを発生させます。&lt;a href=&quot;https://tools.ietf.org/html/rfc6856.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 6856で&lt;/strong&gt;&lt;/a&gt;指定されてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f88c14e9f4900c12d35e50c8cd7af56fcc2bdc2e" translate="yes" xml:space="preserve">
          <source>Trying to unparse a highly complex expression would result with &lt;a href=&quot;exceptions#RecursionError&quot;&gt;&lt;code&gt;RecursionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Trying to unparse a highly complex expression would result with &lt;a href=&quot;exceptions#RecursionError&quot;&gt; &lt;code&gt;RecursionError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5f09fbf303e9d03d520306ba22518da9d405b4d0" translate="yes" xml:space="preserve">
          <source>Ttk Notebook widget manages a collection of windows and displays a single one at a time. Each child window is associated with a tab, which the user may select to change the currently-displayed window.</source>
          <target state="translated">Ttk Notebook ウィジェットはウィンドウのコレクションを管理し、一度に一つのウィンドウを表示します。各子ウィンドウはタブに関連付けられており、ユーザは現在表示されているウィンドウを変更するために選択することができます。</target>
        </trans-unit>
        <trans-unit id="0c1d99a87ace6521e39f8ca7d4263b05f86c18f3" translate="yes" xml:space="preserve">
          <source>Ttk Styling</source>
          <target state="translated">Ttk スタイリング</target>
        </trans-unit>
        <trans-unit id="a8b856639e268ec85b1013167342e759670b03a1" translate="yes" xml:space="preserve">
          <source>Ttk Widgets</source>
          <target state="translated">Ttk ウィジェット</target>
        </trans-unit>
        <trans-unit id="f3f01ae23b415dd491c9f60cdd3716bbb3432178" translate="yes" xml:space="preserve">
          <source>Ttk code:</source>
          <target state="translated">Ttkコードです。</target>
        </trans-unit>
        <trans-unit id="3b50c205ffc8d2593d73a3ea0a223ad651b40604" translate="yes" xml:space="preserve">
          <source>Ttk comes with 18 widgets, twelve of which already existed in tkinter: &lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Checkbutton&lt;/code&gt;, &lt;code&gt;Entry&lt;/code&gt;, &lt;code&gt;Frame&lt;/code&gt;, &lt;code&gt;Label&lt;/code&gt;, &lt;code&gt;LabelFrame&lt;/code&gt;, &lt;code&gt;Menubutton&lt;/code&gt;, &lt;code&gt;PanedWindow&lt;/code&gt;, &lt;code&gt;Radiobutton&lt;/code&gt;, &lt;code&gt;Scale&lt;/code&gt;, &lt;code&gt;Scrollbar&lt;/code&gt;, and &lt;a href=&quot;#tkinter.ttk.Spinbox&quot;&gt;&lt;code&gt;Spinbox&lt;/code&gt;&lt;/a&gt;. The other six are new: &lt;a href=&quot;#tkinter.ttk.Combobox&quot;&gt;&lt;code&gt;Combobox&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Notebook&quot;&gt;&lt;code&gt;Notebook&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Progressbar&quot;&gt;&lt;code&gt;Progressbar&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Separator&lt;/code&gt;, &lt;code&gt;Sizegrip&lt;/code&gt; and &lt;a href=&quot;#tkinter.ttk.Treeview&quot;&gt;&lt;code&gt;Treeview&lt;/code&gt;&lt;/a&gt;. And all them are subclasses of &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Ttkには18個のウィジェットがあり、そのうち12個はすでに &lt;code&gt;Checkbutton&lt;/code&gt; に存在しています： &lt;code&gt;Button&lt;/code&gt; 、Checkbutton、 &lt;code&gt;Entry&lt;/code&gt; 、 &lt;code&gt;Frame&lt;/code&gt; 、 &lt;code&gt;Label&lt;/code&gt; 、 &lt;code&gt;LabelFrame&lt;/code&gt; 、 &lt;code&gt;Menubutton&lt;/code&gt; 、 &lt;code&gt;PanedWindow&lt;/code&gt; 、 &lt;code&gt;Radiobutton&lt;/code&gt; 、 &lt;code&gt;Scale&lt;/code&gt; 、 &lt;code&gt;Scrollbar&lt;/code&gt; 、および&lt;a href=&quot;#tkinter.ttk.Spinbox&quot;&gt; &lt;code&gt;Spinbox&lt;/code&gt; &lt;/a&gt;。他の6つは新しいもの：&lt;a href=&quot;#tkinter.ttk.Combobox&quot;&gt; &lt;code&gt;Combobox&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tkinter.ttk.Notebook&quot;&gt; &lt;code&gt;Notebook&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tkinter.ttk.Progressbar&quot;&gt; &lt;code&gt;Progressbar&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;Separator&lt;/code&gt; 、 &lt;code&gt;Sizegrip&lt;/code&gt; と&lt;a href=&quot;#tkinter.ttk.Treeview&quot;&gt; &lt;code&gt;Treeview&lt;/code&gt; &lt;/a&gt;。そしてそれらはすべて&lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt; &lt;code&gt;Widget&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="62d5887076eeffca16e822f085d3a6fac34dfe1c" translate="yes" xml:space="preserve">
          <source>Tuple comparison breaks for (priority, task) pairs if the priorities are equal and the tasks do not have a default comparison order.</source>
          <target state="translated">優先度が等しく、タスクがデフォルトの比較順序を持っていない場合、(優先度、タスク)ペアのタプル比較は中断されます。</target>
        </trans-unit>
        <trans-unit id="576f22e6784b810efe039380014c1113e2fb6f11" translate="yes" xml:space="preserve">
          <source>Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by &lt;a href=&quot;#mimetypes.common_types&quot;&gt;&lt;code&gt;common_types&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mimetypes.types_map&quot;&gt;&lt;code&gt;types_map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2つのディクショナリを含むタプル。MIMEタイプをファイル名拡張子のリストにマッピングします。最初のディクショナリは非標準タイプ用で、2番目のディクショナリは標準タイプ用です。それらは&lt;a href=&quot;#mimetypes.common_types&quot;&gt; &lt;code&gt;common_types&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#mimetypes.types_map&quot;&gt; &lt;code&gt;types_map&lt;/code&gt; &lt;/a&gt;によって初期化されます。</target>
        </trans-unit>
        <trans-unit id="35d389092135e415451df1c6a4fe91d613237182" translate="yes" xml:space="preserve">
          <source>Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by &lt;a href=&quot;#mimetypes.common_types&quot;&gt;&lt;code&gt;common_types&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mimetypes.types_map&quot;&gt;&lt;code&gt;types_map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2つのディクショナリを含むタプル。ファイル名拡張子をMIMEタイプにマッピングします。最初のディクショナリは非標準タイプ用で、2番目のディクショナリは標準タイプ用です。それらは&lt;a href=&quot;#mimetypes.common_types&quot;&gt; &lt;code&gt;common_types&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#mimetypes.types_map&quot;&gt; &lt;code&gt;types_map&lt;/code&gt; &lt;/a&gt;によって初期化されます。</target>
        </trans-unit>
        <trans-unit id="d3c38138d37b7093520517627a140d12972e280c" translate="yes" xml:space="preserve">
          <source>Tuple of strings listing the field names. Useful for introspection and for creating new named tuple types from existing named tuples.</source>
          <target state="translated">フィールド名をリストアップした文字列のタプル。イントロスペクションや、既存の名前付きタプルから新しい名前付きタプル型を作成するのに便利です。</target>
        </trans-unit>
        <trans-unit id="f79c109bcba03e38eac40e1e4bcb6c02a02072c0" translate="yes" xml:space="preserve">
          <source>Tuple type; &lt;code&gt;Tuple[X, Y]&lt;/code&gt; is the type of a tuple of two items with the first item of type X and the second of type Y. The type of the empty tuple can be written as &lt;code&gt;Tuple[()]&lt;/code&gt;.</source>
          <target state="translated">タプルタイプ。 &lt;code&gt;Tuple[X, Y]&lt;/code&gt; は、最初の項目がタイプXで、​​2番目の項目がタイプYの2つの項目のタプルのタイプです。空のタプルのタイプは、 &lt;code&gt;Tuple[()]&lt;/code&gt; と書くことができます。</target>
        </trans-unit>
        <trans-unit id="538a8ce3fbdcaee00a14353bd57bcf3600c6e0d0" translate="yes" xml:space="preserve">
          <source>Tuples</source>
          <target state="translated">Tuples</target>
        </trans-unit>
        <trans-unit id="48434af86ae5af781700a355a8ecb54f31e4d982" translate="yes" xml:space="preserve">
          <source>Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the &lt;a href=&quot;functions#enumerate&quot;&gt;&lt;code&gt;enumerate()&lt;/code&gt;&lt;/a&gt; built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; instance).</source>
          <target state="translated">タプルは不変のシーケンスであり、通常は異種データのコレクション（&lt;a href=&quot;functions#enumerate&quot;&gt; &lt;code&gt;enumerate()&lt;/code&gt; &lt;/a&gt;組み込みによって生成される2タプルなど）を格納するために使用されます。タプルは、同種のデータの不変のシーケンスが必要な場合にも使用されます（&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;インスタンスに格納できるようにするなど）。</target>
        </trans-unit>
        <trans-unit id="0b386e8529fb736e9c4bd36aeb1f72fafbe39613" translate="yes" xml:space="preserve">
          <source>Tuples implement all of the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations.</source>
          <target state="translated">タプルは、すべての&lt;a href=&quot;#typesseq-common&quot;&gt;一般的な&lt;/a&gt;シーケンス操作を実装します。</target>
        </trans-unit>
        <trans-unit id="820108fe4042aed941be834adbd58d5bd8b622c9" translate="yes" xml:space="preserve">
          <source>Tuples may be constructed in a number of ways:</source>
          <target state="translated">タプルはいくつかの方法で構築することができます。</target>
        </trans-unit>
        <trans-unit id="ab650a1a4b8fdf3a4053ce8d277d335dd82e5447" translate="yes" xml:space="preserve">
          <source>Turkish</source>
          <target state="translated">Turkish</target>
        </trans-unit>
        <trans-unit id="bfddc6585154e8980d7d9f2464ddd6bcffde4f0c" translate="yes" xml:space="preserve">
          <source>Turn &lt;em&gt;all&lt;/em&gt; tabs into the correct number of spaces.</source>
          <target state="translated">ターン&lt;em&gt;すべて&lt;/em&gt;のスペースの正確な数にタブを。</target>
        </trans-unit>
        <trans-unit id="d432c331d5bf77692c8000616daf70b03f0e4997" translate="yes" xml:space="preserve">
          <source>Turn &lt;em&gt;leading&lt;/em&gt; stretches of spaces into tabs. (Note: We recommend using 4 space blocks to indent Python code.)</source>
          <target state="translated">ターン&lt;em&gt;有数&lt;/em&gt;のタブに空白のストレッチを。（注：4つのスペースブロックを使用してPythonコードをインデントすることをお勧めします。）</target>
        </trans-unit>
        <trans-unit id="81f0849860783f08e07acdaa613f08c3820b9ee6" translate="yes" xml:space="preserve">
          <source>Turn a 10-tuple as returned by &lt;a href=&quot;#email.utils.parsedate_tz&quot;&gt;&lt;code&gt;parsedate_tz()&lt;/code&gt;&lt;/a&gt; into a UTC timestamp (seconds since the Epoch). If the timezone item in the tuple is &lt;code&gt;None&lt;/code&gt;, assume local time.</source>
          <target state="translated">&lt;a href=&quot;#email.utils.parsedate_tz&quot;&gt; &lt;code&gt;parsedate_tz()&lt;/code&gt; &lt;/a&gt;によって返される10タプルをUTCタイムスタンプ（エポックからの秒数）に変換します。タプルのタイムゾーン項目が &lt;code&gt;None&lt;/code&gt; の場合は、現地時間と見なされます。</target>
        </trans-unit>
        <trans-unit id="cb07ad334e657f4211d17464bcc2a73ca9e67cdd" translate="yes" xml:space="preserve">
          <source>Turn off the standout attribute. On some terminals this has the side effect of turning off all attributes.</source>
          <target state="translated">目立つ属性をオフにします。いくつかのターミナルでは、これはすべての属性をオフにするという副作用があります。</target>
        </trans-unit>
        <trans-unit id="e0db49dc317a6c62e6f369a19109f78316e0ad8d" translate="yes" xml:space="preserve">
          <source>Turn on attribute &lt;em&gt;A_STANDOUT&lt;/em&gt;.</source>
          <target state="translated">属性&lt;em&gt;A_STANDOUTを&lt;/em&gt;オンにします。</target>
        </trans-unit>
        <trans-unit id="4d2f56812568c7f5b2fa977fd2479da08dd9b77d" translate="yes" xml:space="preserve">
          <source>Turn turtle animation on/off and set delay for update drawings. If &lt;em&gt;n&lt;/em&gt; is given, only each n-th regular screen update is really performed. (Can be used to accelerate the drawing of complex graphics.) When called without arguments, returns the currently stored value of n. Second argument sets delay value (see &lt;a href=&quot;#turtle.delay&quot;&gt;&lt;code&gt;delay()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">カメのアニメーションをオン/オフにし、図面の更新の遅延を設定します。&lt;em&gt;n&lt;/em&gt;が指定されている場合、実際に実行されるのは、n番目の定期的な画面更新のみです。（複雑なグラフィックスの描画を高速化するために使用できます。）引数なしで呼び出されると、現在格納されているnの値を返します。2番目の引数は遅延値を設定します（&lt;a href=&quot;#turtle.delay&quot;&gt; &lt;code&gt;delay()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f3940b4ff2adb1c60ab4ae7e097adb391cb0745c" translate="yes" xml:space="preserve">
          <source>Turn turtle left by &lt;em&gt;angle&lt;/em&gt; units. (Units are by default degrees, but can be set via the &lt;a href=&quot;#turtle.degrees&quot;&gt;&lt;code&gt;degrees()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#turtle.radians&quot;&gt;&lt;code&gt;radians()&lt;/code&gt;&lt;/a&gt; functions.) Angle orientation depends on the turtle mode, see &lt;a href=&quot;#turtle.mode&quot;&gt;&lt;code&gt;mode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;角度&lt;/em&gt;単位でカメを左に向けます。（単位はデフォルト度であるが、を介して設定することができる&lt;a href=&quot;#turtle.degrees&quot;&gt; &lt;code&gt;degrees()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#turtle.radians&quot;&gt; &lt;code&gt;radians()&lt;/code&gt; &lt;/a&gt;関数）角度配向は、参照、カメモードに依存する&lt;a href=&quot;#turtle.mode&quot;&gt; &lt;code&gt;mode()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="292661246e0c70041c546baddc46aed04e518e00" translate="yes" xml:space="preserve">
          <source>Turn turtle right by &lt;em&gt;angle&lt;/em&gt; units. (Units are by default degrees, but can be set via the &lt;a href=&quot;#turtle.degrees&quot;&gt;&lt;code&gt;degrees()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#turtle.radians&quot;&gt;&lt;code&gt;radians()&lt;/code&gt;&lt;/a&gt; functions.) Angle orientation depends on the turtle mode, see &lt;a href=&quot;#turtle.mode&quot;&gt;&lt;code&gt;mode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">亀を&lt;em&gt;角度&lt;/em&gt;単位で右に向けます。（単位はデフォルト度であるが、を介して設定することができる&lt;a href=&quot;#turtle.degrees&quot;&gt; &lt;code&gt;degrees()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#turtle.radians&quot;&gt; &lt;code&gt;radians()&lt;/code&gt; &lt;/a&gt;関数）角度配向は、参照、カメモードに依存する&lt;a href=&quot;#turtle.mode&quot;&gt; &lt;code&gt;mode()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d9d856f25af2d9e07b1ef5aad4d012d7376ee596" translate="yes" xml:space="preserve">
          <source>Turtle Demo</source>
          <target state="translated">タートルデモ</target>
        </trans-unit>
        <trans-unit id="a0f41b1533a18c5574ab4500b21ca24174591f8f" translate="yes" xml:space="preserve">
          <source>Turtle can draw intricate shapes using programs that repeat simple moves.</source>
          <target state="translated">タートルは、単純な動きを繰り返すプログラムを使って複雑な形を描くことができます。</target>
        </trans-unit>
        <trans-unit id="2a24632f3c5d3eafd2990df1fdd275b46a5d8158" translate="yes" xml:space="preserve">
          <source>Turtle graphics in a Tk window.</source>
          <target state="translated">Tkウィンドウでの亀のグラフィック。</target>
        </trans-unit>
        <trans-unit id="9a1e38be75dff4a2c0ae0ad9aea10e788d28916e" translate="yes" xml:space="preserve">
          <source>Turtle graphics is a popular way for introducing programming to kids. It was part of the original Logo programming language developed by Wally Feurzeig, Seymour Papert and Cynthia Solomon in 1967.</source>
          <target state="translated">タートルグラフィックスは、子供たちにプログラミングを紹介するための人気のある方法です。それは1967年にウォーリーFeurzeig、シーモアPapertとシンシアソロモンによって開発されたオリジナルのロゴプログラミング言語の一部でした。</target>
        </trans-unit>
        <trans-unit id="1ff814f0448dd7def11d04fd02e9cec44e3bbdd3" translate="yes" xml:space="preserve">
          <source>Turtle methods</source>
          <target state="translated">タートルメソッド</target>
        </trans-unit>
        <trans-unit id="96e24697788c1f2b6cc2700df67b60ac33f0a382" translate="yes" xml:space="preserve">
          <source>Turtle motion</source>
          <target state="translated">タートルモーション</target>
        </trans-unit>
        <trans-unit id="8796c60dd399ec39ec33b95027adedef2da97f8e" translate="yes" xml:space="preserve">
          <source>Turtle star</source>
          <target state="translated">亀の星</target>
        </trans-unit>
        <trans-unit id="9c0710f6fc26113ca313f375ee77130470a4e349" translate="yes" xml:space="preserve">
          <source>Turtle state</source>
          <target state="translated">タートルステート</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="3a397d7ece111012b516d309689206d97d75d9f3" translate="yes" xml:space="preserve">
          <source>Tutorial material on using curses with Python, by Andrew Kuchling and Eric Raymond.</source>
          <target state="translated">Andrew KuchlingとEric RaymondによるPythonでの呪いの使い方のチュートリアル資料です。</target>
        </trans-unit>
        <trans-unit id="4e8be26c995d9e54216ed6645e9836123debd695" translate="yes" xml:space="preserve">
          <source>Tutorial, reference and examples for learning SQL syntax.</source>
          <target state="translated">SQL構文を学習するためのチュートリアル、リファレンス、例題。</target>
        </trans-unit>
        <trans-unit id="d05acac61e27dac1572bffb3b8de9b3cf7fd0e3b" translate="yes" xml:space="preserve">
          <source>Two additional functions are defined for more general manipulation of the file&amp;rsquo;s mode:</source>
          <target state="translated">ファイルのモードのより一般的な操作のために、2つの追加の関数が定義されています。</target>
        </trans-unit>
        <trans-unit id="f5778fbfb9d58d541f9dff34e99f07ac44ecd72a" translate="yes" xml:space="preserve">
          <source>Two additional methods are supported:</source>
          <target state="translated">追加で2つの方法に対応しています。</target>
        </trans-unit>
        <trans-unit id="74fbbe6b7f586a0aa1c11ad358017225d3404209" translate="yes" xml:space="preserve">
          <source>Two auditing events are raised because the underlying API consists of two calls, each of which must raise its own event.</source>
          <target state="translated">基礎となるAPIは2つの呼び出しで構成されているため、2つの監査イベントが発生し、それぞれが独自のイベントを発生させなければなりません。</target>
        </trans-unit>
        <trans-unit id="8e33dd2ef0fd579bfd7e4e16fef3331e9ee5d62c" translate="yes" xml:space="preserve">
          <source>Two class attributes can be modified, to improve performance, or possibly even to conserve memory.</source>
          <target state="translated">2つのクラス属性を変更することで、パフォーマンスを向上させたり、メモリを節約したりすることができます。</target>
        </trans-unit>
        <trans-unit id="aca3088aa647ffc33767d19b51e8acc79673c470" translate="yes" xml:space="preserve">
          <source>Two example scripts &lt;code&gt;tdemo_nim.py&lt;/code&gt; and &lt;code&gt;tdemo_round_dance.py&lt;/code&gt; have been added to the &lt;code&gt;Lib/turtledemo&lt;/code&gt; directory.</source>
          <target state="translated">2つのサンプルスクリプト &lt;code&gt;tdemo_nim.py&lt;/code&gt; および &lt;code&gt;tdemo_round_dance.py&lt;/code&gt; が &lt;code&gt;Lib/turtledemo&lt;/code&gt; ディレクトリに追加されました。</target>
        </trans-unit>
        <trans-unit id="3215c5c671bb59cb7f259dffd760947f8afd0e5e" translate="yes" xml:space="preserve">
          <source>Two functions are provided which allow an application to determine if an ST was created as an expression or a suite. Neither of these functions can be used to determine if an ST was created from source code via &lt;a href=&quot;#parser.expr&quot;&gt;&lt;code&gt;expr()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#parser.suite&quot;&gt;&lt;code&gt;suite()&lt;/code&gt;&lt;/a&gt; or from a parse tree via &lt;a href=&quot;#parser.sequence2st&quot;&gt;&lt;code&gt;sequence2st()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">STが式またはスイートとして作成されたかどうかをアプリケーションが判断できるようにする2つの関数が提供されます。これらの関数はどちらも、STが&lt;a href=&quot;#parser.expr&quot;&gt; &lt;code&gt;expr()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#parser.suite&quot;&gt; &lt;code&gt;suite()&lt;/code&gt; &lt;/a&gt;を介してソースコードから作成されたか、または&lt;a href=&quot;#parser.sequence2st&quot;&gt; &lt;code&gt;sequence2st()&lt;/code&gt; を&lt;/a&gt;介して解析ツリーから作成されたかを判断するために使用できません。</target>
        </trans-unit>
        <trans-unit id="63ba6e77a40ef9371295e90d99cc0d1db0adadfd" translate="yes" xml:space="preserve">
          <source>Two input methods has been added &lt;code&gt;Screen.textinput()&lt;/code&gt; and &lt;code&gt;Screen.numinput()&lt;/code&gt;. These popup input dialogs and return strings and numbers respectively.</source>
          <target state="translated">&lt;code&gt;Screen.textinput()&lt;/code&gt; と &lt;code&gt;Screen.numinput()&lt;/code&gt; の 2つの入力メソッドが追加されました。これらのポップアップ入力ダイアログは、それぞれ文字列と数値を返します。</target>
        </trans-unit>
        <trans-unit id="8a4d24f36d4d5b93fc0a050914dae06ceeb82597" translate="yes" xml:space="preserve">
          <source>Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads.</source>
          <target state="translated">エンキューされたタスクがデーモンのコンシューマ・スレッドによって完全に処理されたかどうかを追跡するために、2つの方法が提供されています。</target>
        </trans-unit>
        <trans-unit id="bd3d5af48f3448d7859d083f308cded341e694d8" translate="yes" xml:space="preserve">
          <source>Two methods support conversion to and from hexadecimal strings. Since Python&amp;rsquo;s floats are stored internally as binary numbers, converting a float to or from a &lt;em&gt;decimal&lt;/em&gt; string usually involves a small rounding error. In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers. This can be useful when debugging, and in numerical work.</source>
          <target state="translated">2つのメソッドは、16進文字列との間の変換をサポートしています。Pythonの浮動小数点数は内部的に2進数として格納されるため、浮動&lt;em&gt;小数点数を10進数&lt;/em&gt;文字列に変換したり、&lt;em&gt;10進数&lt;/em&gt;文字列から変換したりすると、通常、小さな丸め誤差が発生します。対照的に、16進数の文字列では、浮動小数点数を正確に表現および指定できます。これはデバッグ時や数値計算で役立ちます。</target>
        </trans-unit>
        <trans-unit id="872eb4299a16afe1171ea96869c4a6a12570000d" translate="yes" xml:space="preserve">
          <source>Two module-level constants are defined for the &lt;code&gt;f_flag&lt;/code&gt; attribute&amp;rsquo;s bit-flags: if &lt;code&gt;ST_RDONLY&lt;/code&gt; is set, the filesystem is mounted read-only, and if &lt;code&gt;ST_NOSUID&lt;/code&gt; is set, the semantics of setuid/setgid bits are disabled or not supported.</source>
          <target state="translated">&lt;code&gt;f_flag&lt;/code&gt; 属性のビットフラグには、2つのモジュールレベルの定数が定義されています &lt;code&gt;ST_RDONLY&lt;/code&gt; が設定されている場合、ファイルシステムは読み取り専用でマウントされ、 &lt;code&gt;ST_NOSUID&lt;/code&gt; が設定されている場合、setuid / setgidビットのセマンティクスは無効またはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="be1b45cb0ecebb3689d6d197233fac8a8c5b7cdb" translate="yes" xml:space="preserve">
          <source>Two more operations with the same syntactic priority, &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#not-in&quot;&gt;&lt;code&gt;not in&lt;/code&gt;&lt;/a&gt;, are supported by types that are &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; or implement the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">同じ構文の優先順位を持つ2つの以上の操作は、&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;して&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#not-in&quot;&gt; &lt;code&gt;not in&lt;/code&gt; &lt;/a&gt;、あるタイプでサポートされている&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;反復可能なの&lt;/a&gt;か、実装&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="57484ab1c96de366c7659613da4a7a19820bbb45" translate="yes" xml:space="preserve">
          <source>Two more operations with the same syntactic priority, &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#not-in&quot;&gt;&lt;code&gt;not in&lt;/code&gt;&lt;/a&gt;, are supported by types that are &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; or implement the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Two more operations with the same syntactic priority, &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#not-in&quot;&gt; &lt;code&gt;not in&lt;/code&gt; &lt;/a&gt;, are supported by types that are &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; or implement the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="fdf7de28689c34cb727db34c6fd3d72b113d5340" translate="yes" xml:space="preserve">
          <source>Two problems often exist with deep copy operations that don&amp;rsquo;t exist with shallow copy operations:</source>
          <target state="translated">深いコピー操作には、浅いコピー操作にはない2つの問題がよくあります。</target>
        </trans-unit>
        <trans-unit id="b2b86a9fb4ed899789b8e540b927de2494814ac0" translate="yes" xml:space="preserve">
          <source>Two, the components to implement &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; are exposed in this package, making it easier for users to create their own custom objects (known generically as an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;) to participate in the import process.</source>
          <target state="translated">2つ目は、&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;を実装するコンポーネントがこのパッケージで公開されているため、ユーザーが独自のカスタムオブジェクト（一般に&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;インポーターと&lt;/a&gt;呼ばれる）を作成してインポートプロセスに参加するのが簡単になります。</target>
        </trans-unit>
        <trans-unit id="4baa17858ab79243a22b590fac0cb9c8e0e73f55" translate="yes" xml:space="preserve">
          <source>Two, the components to implement &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; are exposed in this package, making it easier for users to create their own custom objects (known generically as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;) to participate in the import process.</source>
          <target state="translated">Two, the components to implement &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; are exposed in this package, making it easier for users to create their own custom objects (known generically as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;) to participate in the import process.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="fb42e6da9092ad24cf8712d8f033b482720c8ba7" translate="yes" xml:space="preserve">
          <source>Type Mapping</source>
          <target state="translated">タイプマッピング</target>
        </trans-unit>
        <trans-unit id="f14b280e5383b1f17a84d6b572438fadbd026be6" translate="yes" xml:space="preserve">
          <source>Type Name</source>
          <target state="translated">タイプ名</target>
        </trans-unit>
        <trans-unit id="d2f9a9762f1f9c0b60540d7712d38a39e49c34fd" translate="yes" xml:space="preserve">
          <source>Type Objects</source>
          <target state="translated">タイプオブジェクト</target>
        </trans-unit>
        <trans-unit id="58cf557846d7f65d34e8a92739eef2665164fad4" translate="yes" xml:space="preserve">
          <source>Type aliases</source>
          <target state="translated">タイプエイリアス</target>
        </trans-unit>
        <trans-unit id="3904b98c101001c9fda3dac293772c6839673461" translate="yes" xml:space="preserve">
          <source>Type aliases are useful for simplifying complex type signatures. For example:</source>
          <target state="translated">型エイリアスは複雑な型のシグネチャを単純化するのに便利です。例えば</target>
        </trans-unit>
        <trans-unit id="fe2526f8a28470f60a37f388a8f0ef0c6f6542f1" translate="yes" xml:space="preserve">
          <source>Type code</source>
          <target state="translated">タイプコード</target>
        </trans-unit>
        <trans-unit id="08d7f20ec3a1f2c32685f21a24578ef7bfd33afb" translate="yes" xml:space="preserve">
          <source>Type conversions</source>
          <target state="translated">型変換</target>
        </trans-unit>
        <trans-unit id="adcfc2aff0b9f03c65af390bc572e32e3fde7685" translate="yes" xml:space="preserve">
          <source>Type objects represent the various object types. An object&amp;rsquo;s type is accessed by the built-in function &lt;a href=&quot;functions#type&quot;&gt;&lt;code&gt;type()&lt;/code&gt;&lt;/a&gt;. There are no special operations on types. The standard module &lt;a href=&quot;types#module-types&quot;&gt;&lt;code&gt;types&lt;/code&gt;&lt;/a&gt; defines names for all standard built-in types.</source>
          <target state="translated">タイプオブジェクトは、さまざまなオブジェクトタイプを表します。オブジェクトのタイプは、組み込み関数&lt;a href=&quot;functions#type&quot;&gt; &lt;code&gt;type()&lt;/code&gt; &lt;/a&gt;によってアクセスされます。タイプには特別な操作はありません。標準モジュール&lt;a href=&quot;types#module-types&quot;&gt; &lt;code&gt;types&lt;/code&gt; &lt;/a&gt;は、すべての標準組み込みタイプの名前を定義します。</target>
        </trans-unit>
        <trans-unit id="aa32bfc1d6a5fce412d12cc5f6131574b940d465" translate="yes" xml:space="preserve">
          <source>Type of &lt;em&gt;section&lt;/em&gt; is not checked which lets users create non-string named sections. This behaviour is unsupported and may cause internal errors.</source>
          <target state="translated">&lt;em&gt;セクションの&lt;/em&gt;タイプはチェックされないため、ユーザーは文字列以外の名前付きセクションを作成できます。この動作はサポートされておらず、内部エラーを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="8f8b3b37475e6f3fa8cee7c6299d976516072c02" translate="yes" xml:space="preserve">
          <source>Type of compression for the archive member.</source>
          <target state="translated">アーカイブメンバーの圧縮の種類。</target>
        </trans-unit>
        <trans-unit id="b02de00fc7c13da0d493703834670f2d1b7600d4" translate="yes" xml:space="preserve">
          <source>Type of device if an inode device.</source>
          <target state="translated">inodeデバイスの場合はデバイスの種類。</target>
        </trans-unit>
        <trans-unit id="11d984e097d6ee06063e87e1e2de5c09652bbf3c" translate="yes" xml:space="preserve">
          <source>Type of interval</source>
          <target state="translated">インターバルの種類</target>
        </trans-unit>
        <trans-unit id="294a0ffbd46fd4e89c9826ea69865fc9375f0653" translate="yes" xml:space="preserve">
          <source>Type of method</source>
          <target state="translated">メソッドの種類</target>
        </trans-unit>
        <trans-unit id="6ddf33ad1a33d0bab4a03b93d6faf8800f5bf097" translate="yes" xml:space="preserve">
          <source>Type variable.</source>
          <target state="translated">タイプ変数。</target>
        </trans-unit>
        <trans-unit id="24577861cc8fef54c83c65aaf45d45975c7ced44" translate="yes" xml:space="preserve">
          <source>Type variables exist primarily for the benefit of static type checkers. They serve as the parameters for generic types as well as for generic function definitions. See &lt;a href=&quot;#typing.Generic&quot;&gt;&lt;code&gt;Generic&lt;/code&gt;&lt;/a&gt; for more information on generic types. Generic functions work as follows:</source>
          <target state="translated">Type variables exist primarily for the benefit of static type checkers. They serve as the parameters for generic types as well as for generic function definitions. See &lt;a href=&quot;#typing.Generic&quot;&gt; &lt;code&gt;Generic&lt;/code&gt; &lt;/a&gt; for more information on generic types. Generic functions work as follows:</target>
        </trans-unit>
        <trans-unit id="baf680aae15157638dae127ad7434adccbdefecc" translate="yes" xml:space="preserve">
          <source>Type variables exist primarily for the benefit of static type checkers. They serve as the parameters for generic types as well as for generic function definitions. See class Generic for more information on generic types. Generic functions work as follows:</source>
          <target state="translated">型変数は、主に静的型チェッカーのために存在します。これらの変数は、汎用型や汎用関数定義のパラメータとして機能します。ジェネリック型の詳細については、クラス Generic を参照してください。ジェネリック関数は以下のように動作します。</target>
        </trans-unit>
        <trans-unit id="abd88df25ccb148cda7f9f5350705633e0c6805c" translate="yes" xml:space="preserve">
          <source>Type variables may be marked covariant or contravariant by passing &lt;code&gt;covariant=True&lt;/code&gt; or &lt;code&gt;contravariant=True&lt;/code&gt;. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; for more details. By default type variables are invariant. Alternatively, a type variable may specify an upper bound using &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt;. This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">型変数は、 &lt;code&gt;covariant=True&lt;/code&gt; または &lt;code&gt;contravariant=True&lt;/code&gt; を渡すことにより、共変または反変とマークできます。詳細については、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;を参照してください。デフォルトでは、タイプ変数は不変です。代わりに、型変数は &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt; を使用して上限を指定できます。つまり、型変数の代わりに（明示的または暗黙的に）置換される実際の型は、境界型のサブクラスでなければなりません&lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;。PEP484を&lt;/strong&gt;&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5fe184b1e7c4b63f5282ac233036dbefeef8903a" translate="yes" xml:space="preserve">
          <source>Type variables may be marked covariant or contravariant by passing &lt;code&gt;covariant=True&lt;/code&gt; or &lt;code&gt;contravariant=True&lt;/code&gt;. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; for more details. By default type variables are invariant. Alternatively, a type variable may specify an upper bound using &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt;. This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Type variables may be marked covariant or contravariant by passing &lt;code&gt;covariant=True&lt;/code&gt; or &lt;code&gt;contravariant=True&lt;/code&gt; . See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; for more details. By default type variables are invariant. Alternatively, a type variable may specify an upper bound using &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt; . This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="a6be1034d703cbdf5582dfd0bbf7526f130e553d" translate="yes" xml:space="preserve">
          <source>Typed version of &lt;a href=&quot;collections#collections.namedtuple&quot;&gt;&lt;code&gt;collections.namedtuple()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">型指定された&lt;a href=&quot;collections#collections.namedtuple&quot;&gt; &lt;code&gt;collections.namedtuple()&lt;/code&gt; の&lt;/a&gt;バージョン。</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="e2e596d43ca753aabf829e5d2f7b47881bc072ed" translate="yes" xml:space="preserve">
          <source>Types and members</source>
          <target state="translated">種類とメンバー</target>
        </trans-unit>
        <trans-unit id="df88a44cd87ff57172e226ab3e76d8e0cb3d63d4" translate="yes" xml:space="preserve">
          <source>Types are written like this: &lt;code&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">型は次のように記述されます： &lt;code&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d5e7cdf61e73f46e18d9cee2a01332da9df6522" translate="yes" xml:space="preserve">
          <source>Types that are conformable (e.g. that can be marshalled through XML), include the following (and except where noted, they are unmarshalled as the same Python type):</source>
          <target state="translated">準拠可能な型(例えばXMLでマーシャリングできる型)には、以下のようなものがあります(注意されている場合を除いて、同じPython型としてマーシャリングされていません)。</target>
        </trans-unit>
        <trans-unit id="ffa096628994d74c4f106032627242fbdd4a6146" translate="yes" xml:space="preserve">
          <source>Typical use of these names is for &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; checks.</source>
          <target state="translated">これらの名前の一般的な用途は、&lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;functions#issubclass&quot;&gt; &lt;code&gt;issubclass()&lt;/code&gt; の&lt;/a&gt;チェックです。</target>
        </trans-unit>
        <trans-unit id="a453b951365e1cf38b6e3dbd7827785d21193262" translate="yes" xml:space="preserve">
          <source>Typical use:</source>
          <target state="translated">典型的な使い方。</target>
        </trans-unit>
        <trans-unit id="edcc18ac436a03bd44d6ef6223e83024174e89fd" translate="yes" xml:space="preserve">
          <source>Typical uses:</source>
          <target state="translated">代表的な用途。</target>
        </trans-unit>
        <trans-unit id="ac8bd79c1f65ce75577f89953181b5836814ced2" translate="yes" xml:space="preserve">
          <source>Typically Futures are used to enable low-level callback-based code (e.g. in protocols implemented using asyncio &lt;a href=&quot;asyncio-protocol#asyncio-transports-protocols&quot;&gt;transports&lt;/a&gt;) to interoperate with high-level async/await code.</source>
          <target state="translated">通常、Futureは、低レベルのコールバックベースのコード（asyncio &lt;a href=&quot;asyncio-protocol#asyncio-transports-protocols&quot;&gt;トランスポート&lt;/a&gt;を使用して実装されたプロトコルなど）が高レベルの非同期/ 待機コードと相互運用できるようにするために使用されます。</target>
        </trans-unit>
        <trans-unit id="aa0d8913086c02de73375f9a037bf2d54a4d4b86" translate="yes" xml:space="preserve">
          <source>Typically, &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; is a list of directory names as strings. This module also allows an item of &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; to be a string naming a ZIP file archive. The ZIP archive can contain a subdirectory structure to support package imports, and a path within the archive can be specified to only import from a subdirectory. For example, the path &lt;code&gt;example.zip/lib/&lt;/code&gt; would only import from the &lt;code&gt;lib/&lt;/code&gt; subdirectory within the archive.</source>
          <target state="translated">通常、&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;は文字列としてのディレクトリ名のリストです。このモジュールでは、&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; の&lt;/a&gt;項目を、ZIPファイルアーカイブを指定する文字列にすることもできます。ZIPアーカイブには、パッケージのインポートをサポートするサブディレクトリ構造を含めることができ、アーカイブ内のパスは、サブディレクトリからのみインポートするように指定できます。たとえば、パス &lt;code&gt;example.zip/lib/&lt;/code&gt; は、アーカイブ内の &lt;code&gt;lib/&lt;/code&gt; サブディレクトリからのみインポートされます。</target>
        </trans-unit>
        <trans-unit id="307c90d60f24c34409c0cbbb907e2ebee94f9501" translate="yes" xml:space="preserve">
          <source>Typically, a mail user agent application moves all of the messages in the &lt;code&gt;new&lt;/code&gt; subdirectory to the &lt;code&gt;cur&lt;/code&gt; subdirectory after the first time the user opens and closes the mailbox, recording that the messages are old whether or not they&amp;rsquo;ve actually been read. Each message in &lt;code&gt;cur&lt;/code&gt; has an &amp;ldquo;info&amp;rdquo; section added to its file name to store information about its state. (Some mail readers may also add an &amp;ldquo;info&amp;rdquo; section to messages in &lt;code&gt;new&lt;/code&gt;.) The &amp;ldquo;info&amp;rdquo; section may take one of two forms: it may contain &amp;ldquo;2,&amp;rdquo; followed by a list of standardized flags (e.g., &amp;ldquo;2,FR&amp;rdquo;) or it may contain &amp;ldquo;1,&amp;rdquo; followed by so-called experimental information. Standard flags for Maildir messages are as follows:</source>
          <target state="translated">通常、メールユーザーエージェントアプリケーションは、ユーザーが初めてメールボックスを開いて閉じた後に、 &lt;code&gt;new&lt;/code&gt; サブディレクトリ内のすべてのメッセージを &lt;code&gt;cur&lt;/code&gt; サブディレクトリに移動し、実際にメッセージが読み取られたかどうかに関係なく、メッセージが古いことを記録します。 &lt;code&gt;cur&lt;/code&gt; の各メッセージには、その状態に関する情報を格納するために、ファイル名に「info」セクションが追加されています。 （一部のメールリーダーは、 &lt;code&gt;new&lt;/code&gt; のメッセージに「info」セクションを追加する場合もあります。）「info」セクションは、2つの形式のいずれかを取ります。「2」を含み、その後に標準化されたフラグのリストが続きます（たとえば、「2、 FR」）または「1」が含まれる場合があり、その後にいわゆる実験情報が続きます。 Maildirメッセージの標準フラグは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c9569066be942f47eac360ee7e9604e189cacf75" translate="yes" xml:space="preserve">
          <source>Typically, clamping occurs when an exponent falls outside the context&amp;rsquo;s &lt;code&gt;Emin&lt;/code&gt; and &lt;code&gt;Emax&lt;/code&gt; limits. If possible, the exponent is reduced to fit by adding zeros to the coefficient.</source>
          <target state="translated">通常、クランプは、指数がコンテキストの &lt;code&gt;Emin&lt;/code&gt; と &lt;code&gt;Emax&lt;/code&gt; の範囲外になると発生します。可能であれば、係数にゼロを追加することにより、指数が減少してフィットします。</target>
        </trans-unit>
        <trans-unit id="16226deec705b103a976d79100c8b31ccbd60936" translate="yes" xml:space="preserve">
          <source>Typically, this routine is used to process each portion of a request URI path, for example to treat the path as a series of dictionary keys. This routine modifies the passed-in environment to make it suitable for invoking another WSGI application that is located at the target URI. For example, if there is a WSGI application at &lt;code&gt;/foo&lt;/code&gt;, and the request URI path is &lt;code&gt;/foo/bar/baz&lt;/code&gt;, and the WSGI application at &lt;code&gt;/foo&lt;/code&gt; calls &lt;a href=&quot;#wsgiref.util.shift_path_info&quot;&gt;&lt;code&gt;shift_path_info()&lt;/code&gt;&lt;/a&gt;, it will receive the string &amp;ldquo;bar&amp;rdquo;, and the environment will be updated to be suitable for passing to a WSGI application at &lt;code&gt;/foo/bar&lt;/code&gt;. That is, &lt;code&gt;SCRIPT_NAME&lt;/code&gt; will change from &lt;code&gt;/foo&lt;/code&gt; to &lt;code&gt;/foo/bar&lt;/code&gt;, and &lt;code&gt;PATH_INFO&lt;/code&gt; will change from &lt;code&gt;/bar/baz&lt;/code&gt; to &lt;code&gt;/baz&lt;/code&gt;.</source>
          <target state="translated">通常、このルーチンは、リクエストURIパスの各部分を処理するために使用されます。たとえば、パスを一連の辞書キーとして扱うためです。このルーチンは、渡された環境を変更して、ターゲットURIにある別のWSGIアプリケーションを呼び出すのに適した環境にします。たとえば、 &lt;code&gt;/foo&lt;/code&gt; に WSGIアプリケーションがあり、リクエストURIパスが &lt;code&gt;/foo/bar/baz&lt;/code&gt; であり、 &lt;code&gt;/foo&lt;/code&gt; の WSGIアプリケーションが&lt;a href=&quot;#wsgiref.util.shift_path_info&quot;&gt; &lt;code&gt;shift_path_info()&lt;/code&gt; を&lt;/a&gt;呼び出す場合、文字列「bar」を受け取り、環境 &lt;code&gt;/foo/bar&lt;/code&gt; でWSGIアプリケーションに渡すのに適するように更新されます。つまり、 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; は &lt;code&gt;/foo&lt;/code&gt; から &lt;code&gt;/foo/bar&lt;/code&gt; に変更され、 &lt;code&gt;PATH_INFO&lt;/code&gt; は &lt;code&gt;/bar/baz&lt;/code&gt; から &lt;code&gt;/baz&lt;/code&gt; に変更されます。</target>
        </trans-unit>
        <trans-unit id="4c25227e4d8caebe673fedb75cae4fb249b96c0f" translate="yes" xml:space="preserve">
          <source>Typically, you should use an &amp;ldquo;/usr/bin/env python2&amp;rdquo; or &amp;ldquo;/usr/bin/env python3&amp;rdquo;, depending on whether your code is written for Python 2 or 3.</source>
          <target state="translated">通常、コードがPython 2または3のどちらで記述されているかに応じて、「/ usr / bin / env python2」または「/ usr / bin / env python3」を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e713da74eea6cd17134e526d4f4bfa85ea29e095" translate="yes" xml:space="preserve">
          <source>U16, utf16</source>
          <target state="translated">U16,utf16</target>
        </trans-unit>
        <trans-unit id="c72fcac268773b2862516cee4a159e76b48faf49" translate="yes" xml:space="preserve">
          <source>U32, utf32</source>
          <target state="translated">U32,utf32</target>
        </trans-unit>
        <trans-unit id="f11edf3411c63e0f8d0db9d99f22c6d068007f5f" translate="yes" xml:space="preserve">
          <source>U7, unicode-1-1-utf-7</source>
          <target state="translated">U7、ユニコード1-1-utf-7</target>
        </trans-unit>
        <trans-unit id="d24ccdbf9775e02769365300203e1554ee400e3d" translate="yes" xml:space="preserve">
          <source>U8, UTF, utf8, cp65001</source>
          <target state="translated">U8、UTF、utf8、cp65001</target>
        </trans-unit>
        <trans-unit id="6acf01764f7a6626f0891a32f61a073dc0762d8b" translate="yes" xml:space="preserve">
          <source>UDP Echo Client</source>
          <target state="translated">UDPエコークライアント</target>
        </trans-unit>
        <trans-unit id="343e5cce60ceccd79ae37a898828ecb0fca0950a" translate="yes" xml:space="preserve">
          <source>UDP Echo Server</source>
          <target state="translated">UDPエコーサーバ</target>
        </trans-unit>
        <trans-unit id="ba2e61c0219a993878c029ea5544b89e5fd3ae93" translate="yes" xml:space="preserve">
          <source>ULP stands for &amp;ldquo;Unit in the Last Place&amp;rdquo;.</source>
          <target state="translated">ULP stands for &amp;ldquo;Unit in the Last Place&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="7d0bd1a5584aa8e277199b8bce0be0eebe6eae7c" translate="yes" xml:space="preserve">
          <source>UNC drive names are not considered:</source>
          <target state="translated">UNCドライブ名は考慮されません。</target>
        </trans-unit>
        <trans-unit id="0d532d59e790c855bac6f2fd3a3d63a663ac152d" translate="yes" xml:space="preserve">
          <source>UNC shares always have a root:</source>
          <target state="translated">UNCの株は常にルートを持っています。</target>
        </trans-unit>
        <trans-unit id="1754f7546fc5579a80084a7fbd2c4dbd78786101" translate="yes" xml:space="preserve">
          <source>UNC shares are also considered drives:</source>
          <target state="translated">UNCの株もドライブと考えられています。</target>
        </trans-unit>
        <trans-unit id="46423b62f1108237d6637f21aa348b01ed444951" translate="yes" xml:space="preserve">
          <source>URL Parsing</source>
          <target state="translated">URL 解析</target>
        </trans-unit>
        <trans-unit id="ac79cb4725903fc4cbc65532def1e7734288ed43" translate="yes" xml:space="preserve">
          <source>URL Quoting</source>
          <target state="translated">URL引用</target>
        </trans-unit>
        <trans-unit id="c4b7ac1e2711f01d24c210e143cb9a34515550f7" translate="yes" xml:space="preserve">
          <source>URL linking to a comment from the server explaining the function of this cookie, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このCookieの機能を説明するサーバーからのコメントにリンクするURL、または&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39ca3350b8900002d53d7c65c147fe5c8b6f43b0" translate="yes" xml:space="preserve">
          <source>URL of the resource retrieved, commonly used to determine if a redirect was followed.</source>
          <target state="translated">リダイレクトされたかどうかを判断するためによく使われる、取得したリソースの URL。</target>
        </trans-unit>
        <trans-unit id="8681bd94130610c53bd7f38805813627eb6cdf42" translate="yes" xml:space="preserve">
          <source>URL opening with automatic cookie handling.</source>
          <target state="translated">クッキーの自動処理でURLを開く</target>
        </trans-unit>
        <trans-unit id="8c6ff6209d4df1bcf1d35de653b99ca192c7aa0c" translate="yes" xml:space="preserve">
          <source>URL scheme specifier</source>
          <target state="translated">URLスキーム指定子</target>
        </trans-unit>
        <trans-unit id="8fedebad85ba6d8c62697769bc62126e584a5f4b" translate="yes" xml:space="preserve">
          <source>URL with no fragment</source>
          <target state="translated">フラグメントのないURL</target>
        </trans-unit>
        <trans-unit id="5575b942a5f6d8077af646b856fee8b432912c99" translate="yes" xml:space="preserve">
          <source>UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or GMT). The acronym UTC is not a mistake but a compromise between English and French.</source>
          <target state="translated">UTCは調整された普遍的な時間(前にグリニッジの平均時、またはGMTとして知られている)である。頭字語UTCは間違いではないが、英語とフランス語の間の妥協である。</target>
        </trans-unit>
        <trans-unit id="7bd3d96c46d2e3221efb69d9b12e15082127b8e4" translate="yes" xml:space="preserve">
          <source>UTC offset in the form &lt;code&gt;&amp;plusmn;HHMM[SS[.ffffff]]&lt;/code&gt; (empty string if the object is naive).</source>
          <target state="translated">&lt;code&gt;&amp;plusmn;HHMM[SS[.ffffff]]&lt;/code&gt; という形式のUTCオフセット（オブジェクトがナイーブの場合は空の文字列）。</target>
        </trans-unit>
        <trans-unit id="de4a45e716017695cfee4bc84f1a4e0c8e1e9b9a" translate="yes" xml:space="preserve">
          <source>UTF-16BE</source>
          <target state="translated">UTF-16BE</target>
        </trans-unit>
        <trans-unit id="6af12beb19d40aa853839c482e864ce703f4d2a9" translate="yes" xml:space="preserve">
          <source>UTF-16LE</source>
          <target state="translated">UTF-16LE</target>
        </trans-unit>
        <trans-unit id="9e4d8d4f017185a065b570c771eb332a1c842bec" translate="yes" xml:space="preserve">
          <source>UTF-32BE</source>
          <target state="translated">UTF-32BE</target>
        </trans-unit>
        <trans-unit id="35cabe85c31dfe3f6b86974de33fef51a0f7276a" translate="yes" xml:space="preserve">
          <source>UTF-32LE</source>
          <target state="translated">UTF-32LE</target>
        </trans-unit>
        <trans-unit id="715c491a11c1b08bfcd9854613597d9d8b9e6f02" translate="yes" xml:space="preserve">
          <source>UUID: &lt;code&gt;{FB605B73-AAC2-49A6-9A2F-25416AEA0573}&lt;/code&gt;</source>
          <target state="translated">UUID: &lt;code&gt;{FB605B73-AAC2-49A6-9A2F-25416AEA0573}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="515451058797b204e188dd70f8d20f32dacca327" translate="yes" xml:space="preserve">
          <source>Ukrainian</source>
          <target state="translated">Ukrainian</target>
        </trans-unit>
        <trans-unit id="180209844089ebe0890b16d2a26e4bdbe691991b" translate="yes" xml:space="preserve">
          <source>Ultimately, the responsibility of how to interpret the annotations (if at all) is the responsibility of the tool or library encountering the &lt;code&gt;Annotated&lt;/code&gt; type. A tool or library encountering an &lt;code&gt;Annotated&lt;/code&gt; type can scan through the annotations to determine if they are of interest (e.g., using &lt;code&gt;isinstance()&lt;/code&gt;).</source>
          <target state="translated">Ultimately, the responsibility of how to interpret the annotations (if at all) is the responsibility of the tool or library encountering the &lt;code&gt;Annotated&lt;/code&gt; type. A tool or library encountering an &lt;code&gt;Annotated&lt;/code&gt; type can scan through the annotations to determine if they are of interest (e.g., using &lt;code&gt;isinstance()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21c390ed919f285d1fbd2bc30ead55ffc59b9262" translate="yes" xml:space="preserve">
          <source>Unary addition and subtraction are shortcuts for adding an empty counter or subtracting from an empty counter.</source>
          <target state="translated">単項加算と単項減算は、空のカウンタの加算や空のカウンタからの減算のショートカットです。</target>
        </trans-unit>
        <trans-unit id="76f4685e58374089d5c55b4161cd981dc6132724" translate="yes" xml:space="preserve">
          <source>Unary numeric methods: &lt;code&gt;__neg__&lt;/code&gt;, &lt;code&gt;__pos__&lt;/code&gt; and &lt;code&gt;__invert__&lt;/code&gt;</source>
          <target state="translated">単項数値メソッド： &lt;code&gt;__neg__&lt;/code&gt; 、 &lt;code&gt;__pos__&lt;/code&gt; および &lt;code&gt;__invert__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ec04384d60dde2abd489f1b93a17f46f88408ec" translate="yes" xml:space="preserve">
          <source>Unary operations take the top of the stack, apply the operation, and push the result back on the stack.</source>
          <target state="translated">単項演算はスタックの先頭を取り、演算を適用し、その結果をスタックに押し戻す。</target>
        </trans-unit>
        <trans-unit id="4a4dc37257d5fdb377e941ad74421dd9833ea063" translate="yes" xml:space="preserve">
          <source>Unary operator tokens. &lt;a href=&quot;#ast.Not&quot;&gt;&lt;code&gt;Not&lt;/code&gt;&lt;/a&gt; is the &lt;code&gt;not&lt;/code&gt; keyword, &lt;a href=&quot;#ast.Invert&quot;&gt;&lt;code&gt;Invert&lt;/code&gt;&lt;/a&gt; is the &lt;code&gt;~&lt;/code&gt; operator.</source>
          <target state="translated">Unary operator tokens. &lt;a href=&quot;#ast.Not&quot;&gt; &lt;code&gt;Not&lt;/code&gt; &lt;/a&gt; is the &lt;code&gt;not&lt;/code&gt; keyword, &lt;a href=&quot;#ast.Invert&quot;&gt; &lt;code&gt;Invert&lt;/code&gt; &lt;/a&gt; is the &lt;code&gt;~&lt;/code&gt; operator.</target>
        </trans-unit>
        <trans-unit id="af724c9a541ce2ab11909206f58df607bfbac91b" translate="yes" xml:space="preserve">
          <source>UnboundLocalError</source>
          <target state="translated">UnboundLocalError</target>
        </trans-unit>
        <trans-unit id="0bbb24dbe913bf1acad1b3813b19242195efde3d" translate="yes" xml:space="preserve">
          <source>Uncomment Region</source>
          <target state="translated">コメントなしの地域</target>
        </trans-unit>
        <trans-unit id="09163dc46bc3ebc70b19a70c153e7b0ff2a536a0" translate="yes" xml:space="preserve">
          <source>Unconditionally skip the decorated test. &lt;em&gt;reason&lt;/em&gt; should describe why the test is being skipped.</source>
          <target state="translated">装飾されたテストを無条件にスキップします。&lt;em&gt;reason&lt;/em&gt;は、テストがスキップされる&lt;em&gt;理由&lt;/em&gt;を説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="b33dbdee390d46cbc4b2f0c8d71034b96e387e3a" translate="yes" xml:space="preserve">
          <source>Under System Preferences: Dock, one can set &amp;ldquo;Prefer tabs when opening documents&amp;rdquo; to &amp;ldquo;Always&amp;rdquo;. This setting is not compatible with the tk/tkinter GUI framework used by IDLE, and it breaks a few IDLE features.</source>
          <target state="translated">[システム環境設定：ドック]で、[ドキュメントを開くときにタブを優先する]を[常に]に設定できます。この設定は、IDLEが使用するtk / tkinter GUIフレームワークと互換性がなく、いくつかのIDLE機能を壊します。</target>
        </trans-unit>
        <trans-unit id="09ff4fd5fd078f6a770a49eda709711308d815f4" translate="yes" xml:space="preserve">
          <source>Under Unix, graphical browsers are preferred under X11, but text-mode browsers will be used if graphical browsers are not available or an X11 display isn&amp;rsquo;t available. If text-mode browsers are used, the calling process will block until the user exits the browser.</source>
          <target state="translated">Unixでは、X11でグラフィカルブラウザが推奨されますが、グラフィカルブラウザが利用できない場合やX11ディスプレイが利用できない場合は、テキストモードのブラウザが使用されます。テキストモードのブラウザが使用されている場合、呼び出しプロセスは、ユーザーがブラウザを終了するまでブロックされます。</target>
        </trans-unit>
        <trans-unit id="cc774a2bad012898ce4ca44d59cd0ee58a92ba80" translate="yes" xml:space="preserve">
          <source>Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as &lt;a href=&quot;os#os.fdopen&quot;&gt;&lt;code&gt;os.fdopen()&lt;/code&gt;&lt;/a&gt;). Unix does not have this limitation.</source>
          <target state="translated">Windowsでは、このメソッドによって返される小さな整数は、ファイル記述子を使用できる&lt;a href=&quot;os#os.fdopen&quot;&gt; &lt;code&gt;os.fdopen()&lt;/code&gt; &lt;/a&gt;など）では使用できません。Unixにはこの制限はありません。</target>
        </trans-unit>
        <trans-unit id="43487233aaa2dc1293a621ac76f9af16f9598bae" translate="yes" xml:space="preserve">
          <source>Under Windows, if the &lt;em&gt;winerror&lt;/em&gt; constructor argument is an integer, the &lt;a href=&quot;#OSError.errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; attribute is determined from the Windows error code, and the &lt;em&gt;errno&lt;/em&gt; argument is ignored. On other platforms, the &lt;em&gt;winerror&lt;/em&gt; argument is ignored, and the &lt;a href=&quot;#OSError.winerror&quot;&gt;&lt;code&gt;winerror&lt;/code&gt;&lt;/a&gt; attribute does not exist.</source>
          <target state="translated">Windowsでは、&lt;em&gt;winerror&lt;/em&gt;コンストラクター引数が整数の場合、&lt;a href=&quot;#OSError.errno&quot;&gt; &lt;code&gt;errno&lt;/code&gt; &lt;/a&gt;属性はWindowsエラーコードから決定され、&lt;em&gt;errno&lt;/em&gt;引数は無視されます。他のプラットフォームでは、&lt;em&gt;winerror&lt;/em&gt;引数は無視され、&lt;a href=&quot;#OSError.winerror&quot;&gt; &lt;code&gt;winerror&lt;/code&gt; &lt;/a&gt;属性は存在しません。</target>
        </trans-unit>
        <trans-unit id="122a25820ac6c0450f8cdb99f851d87ee3865318" translate="yes" xml:space="preserve">
          <source>Under Windows, this gives you the native Windows error code. The &lt;a href=&quot;#OSError.errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; attribute is then an approximate translation, in POSIX terms, of that native error code.</source>
          <target state="translated">Windowsでは、これによりネイティブのWindowsエラーコードが表示されます。&lt;a href=&quot;#OSError.errno&quot;&gt; &lt;code&gt;errno&lt;/code&gt; &lt;/a&gt;属性は、そのネイティブ・エラー・コードのPOSIX用語でおおよその翻訳、、です。</target>
        </trans-unit>
        <trans-unit id="84a4f0c399ddd6228df271cff58e6d0b91d19d11" translate="yes" xml:space="preserve">
          <source>Under all platforms, you can override the character encoding by setting the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-32&quot;&gt;&lt;code&gt;PYTHONIOENCODING&lt;/code&gt;&lt;/a&gt; environment variable before starting Python or by using the new &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;utf8&lt;/code&gt; command line option and &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-33&quot;&gt;&lt;code&gt;PYTHONUTF8&lt;/code&gt;&lt;/a&gt; environment variable. However, for the Windows console, this only applies when &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-34&quot;&gt;&lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt;&lt;/a&gt; is also set.</source>
          <target state="translated">すべてのプラットフォームで、Pythonを起動する前に&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-32&quot;&gt; &lt;code&gt;PYTHONIOENCODING&lt;/code&gt; &lt;/a&gt;環境変数を設定するか、新しい&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;utf8&lt;/code&gt; コマンドラインオプションと&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-33&quot;&gt; &lt;code&gt;PYTHONUTF8&lt;/code&gt; &lt;/a&gt;環境変数を使用して、文字エンコーディングをオーバーライドできます。ただし、Windowsコンソールの場合、これは&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-34&quot;&gt; &lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt; &lt;/a&gt;も設定されている場合にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="2046c226117f68ba6beddec1fe7aaa2a0f58d806" translate="yes" xml:space="preserve">
          <source>Under all platforms, you can override the character encoding by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-33&quot;&gt;&lt;code&gt;PYTHONIOENCODING&lt;/code&gt;&lt;/a&gt; environment variable before starting Python or by using the new &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;utf8&lt;/code&gt; command line option and &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-34&quot;&gt;&lt;code&gt;PYTHONUTF8&lt;/code&gt;&lt;/a&gt; environment variable. However, for the Windows console, this only applies when &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-35&quot;&gt;&lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt;&lt;/a&gt; is also set.</source>
          <target state="translated">Under all platforms, you can override the character encoding by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-33&quot;&gt; &lt;code&gt;PYTHONIOENCODING&lt;/code&gt; &lt;/a&gt; environment variable before starting Python or by using the new &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;utf8&lt;/code&gt; command line option and &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-34&quot;&gt; &lt;code&gt;PYTHONUTF8&lt;/code&gt; &lt;/a&gt; environment variable. However, for the Windows console, this only applies when &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-35&quot;&gt; &lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt; &lt;/a&gt; is also set.</target>
        </trans-unit>
        <trans-unit id="86c529a5c56c8e1acf4f20d73e1f5a6a05aad70c" translate="yes" xml:space="preserve">
          <source>Under composition</source>
          <target state="translated">アンダーコンポジション</target>
        </trans-unit>
        <trans-unit id="3bb49fa79f069f1e503b56cda42fc86a007f633b" translate="yes" xml:space="preserve">
          <source>Under some conditions &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; as well as the original values &lt;code&gt;__stdin__&lt;/code&gt;, &lt;code&gt;__stdout__&lt;/code&gt; and &lt;code&gt;__stderr__&lt;/code&gt; can be &lt;code&gt;None&lt;/code&gt;. It is usually the case for Windows GUI apps that aren&amp;rsquo;t connected to a console and Python apps started with &lt;strong&gt;pythonw&lt;/strong&gt;.</source>
          <target state="translated">状況によっては、 &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; 、および元の値 &lt;code&gt;__stdin__&lt;/code&gt; 、 &lt;code&gt;__stdout__&lt;/code&gt; 、および &lt;code&gt;__stderr__&lt;/code&gt; が &lt;code&gt;None&lt;/code&gt; になる場合があります。通常、コンソールに接続されていないWindows GUIアプリと、&lt;strong&gt;pythonwで&lt;/strong&gt;始まるPythonアプリが&lt;strong&gt;該当し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="793bf299721caabec9e054ab03d026686481a8fa" translate="yes" xml:space="preserve">
          <source>Under the covers, &lt;a href=&quot;#doctest.DocTestSuite&quot;&gt;&lt;code&gt;DocTestSuite()&lt;/code&gt;&lt;/a&gt; creates a &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; out of &lt;code&gt;doctest.DocTestCase&lt;/code&gt; instances, and &lt;code&gt;DocTestCase&lt;/code&gt; is a subclass of &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;DocTestCase&lt;/code&gt; isn&amp;rsquo;t documented here (it&amp;rsquo;s an internal detail), but studying its code can answer questions about the exact details of &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; integration.</source>
          <target state="translated">カバーの下に、&lt;a href=&quot;#doctest.DocTestSuite&quot;&gt; &lt;code&gt;DocTestSuite()&lt;/code&gt; &lt;/a&gt;を作成&lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt; &lt;code&gt;unittest.TestSuite&lt;/code&gt; インスタンスを&lt;/a&gt;外 &lt;code&gt;doctest.DocTestCase&lt;/code&gt; のインスタンス、および &lt;code&gt;DocTestCase&lt;/code&gt; については、のサブクラスである&lt;a href=&quot;unittest#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;DocTestCase&lt;/code&gt; については、ここで（それは内部の詳細です）文書化されていませんが、そのコードを勉強することの正確な詳細についての質問に答えることができます&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; の&lt;/a&gt;統合を。</target>
        </trans-unit>
        <trans-unit id="f37c5cd1f45c987d07df9e3363045593abcab226" translate="yes" xml:space="preserve">
          <source>Underline mode</source>
          <target state="translated">下線モード</target>
        </trans-unit>
        <trans-unit id="cdc95b3422722b03a214a7379a614933ad297732" translate="yes" xml:space="preserve">
          <source>Underlying encoded files are always opened in binary mode. No automatic conversion of &lt;code&gt;'\n'&lt;/code&gt; is done on reading and writing. The &lt;em&gt;mode&lt;/em&gt; argument may be any binary mode acceptable to the built-in &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function; the &lt;code&gt;'b'&lt;/code&gt; is automatically added.</source>
          <target state="translated">基礎となるエンコードされたファイルは常にバイナリモードで開かれます。読み取りおよび書き込み時に &lt;code&gt;'\n'&lt;/code&gt; 自動変換は行われません。&lt;em&gt;モード&lt;/em&gt;引数が内蔵に許容される任意のバイナリモードであってもよい&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;関数。 &lt;code&gt;'b'&lt;/code&gt; 自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="1c426c5d3245f89c66b8d44eb9a7418a57214883" translate="yes" xml:space="preserve">
          <source>Underlying file descriptor.</source>
          <target state="translated">ベースとなるファイル記述子。</target>
        </trans-unit>
        <trans-unit id="39fc72124884d6573e4f9f89585f071ed0782696" translate="yes" xml:space="preserve">
          <source>Undo</source>
          <target state="translated">Undo</target>
        </trans-unit>
        <trans-unit id="facdf490605511ac7953e25b9d58432a61076c4e" translate="yes" xml:space="preserve">
          <source>Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer.</source>
          <target state="translated">最後のタートルアクションを元に戻します (繰り返し)。利用可能なアンドゥアクションの数は、アンドゥバッファのサイズによって決まります。</target>
        </trans-unit>
        <trans-unit id="12ffa2fcbfc6a89513586da0ea5253ed26d4950d" translate="yes" xml:space="preserve">
          <source>Undo the last change to the current window. A maximum of 1000 changes may be undone.</source>
          <target state="translated">現在のウィンドウの最後の変更を元に戻します。最大1000回の変更を元に戻すことができます。</target>
        </trans-unit>
        <trans-unit id="5173f55ca599f2baa4e8cf060601f130743f6e5c" translate="yes" xml:space="preserve">
          <source>Undocumented Modules</source>
          <target state="translated">ドキュメント化されていないモジュール</target>
        </trans-unit>
        <trans-unit id="7afa636f1dcd288a19ebf51b051831aa190255a4" translate="yes" xml:space="preserve">
          <source>Unescape &lt;code&gt;'&amp;amp;amp;'&lt;/code&gt;, &lt;code&gt;'&amp;amp;lt;'&lt;/code&gt;, and &lt;code&gt;'&amp;amp;gt;'&lt;/code&gt; in a string of data.</source>
          <target state="translated">&lt;code&gt;'&amp;amp;amp;'&lt;/code&gt; エスケープ解除 、 &lt;code&gt;'&amp;amp;lt;'&lt;/code&gt; 、および &lt;code&gt;'&amp;amp;gt;'&lt;/code&gt; データの文字列。</target>
        </trans-unit>
        <trans-unit id="1ae07519eb339aa0a6d65a7ecc51b6a9a2141e8c" translate="yes" xml:space="preserve">
          <source>Unfinished errata to &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2965の&lt;/strong&gt;&lt;/a&gt;未完成の正誤表。</target>
        </trans-unit>
        <trans-unit id="760f925ad5f161e1f96d23cf3994740c822322b1" translate="yes" xml:space="preserve">
          <source>Unfortunately, a CGI script will generally not run when you try it from the command line, and a script that works perfectly from the command line may fail mysteriously when run from the server. There&amp;rsquo;s one reason why you should still test your script from the command line: if it contains a syntax error, the Python interpreter won&amp;rsquo;t execute it at all, and the HTTP server will most likely send a cryptic error to the client.</source>
          <target state="translated">残念ながら、CGIスクリプトは通常、コマンドラインから実行すると実行されません。また、コマンドラインから完全に機能するスクリプトは、サーバーから実行すると不思議なことに失敗する場合があります。コマンドラインからスクリプトを引き続きテストする必要がある理由は1つあります。スクリプトに構文エラーが含まれている場合、Pythonインタープリターはスクリプトをまったく実行せず、HTTPサーバーがクライアントに暗号エラーを送信する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4cb76619273a40dbd3b69446939d186f550fa921" translate="yes" xml:space="preserve">
          <source>Unfortunately, in the current implementation of &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; it is not possible to hand over an arbitrary Python variable to a widget through a &lt;code&gt;variable&lt;/code&gt; or &lt;code&gt;textvariable&lt;/code&gt; option. The only kinds of variables for which this works are variables that are subclassed from a class called Variable, defined in &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">残念ながら、現在の実装で&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;を通じてウィジェットに任意のPython変数を引き渡すことはできない &lt;code&gt;variable&lt;/code&gt; や &lt;code&gt;textvariable&lt;/code&gt; オプション。これが機能する唯一の種類の変数は、&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;で定義されたVariableというクラスからサブクラス化された変数です。</target>
        </trans-unit>
        <trans-unit id="6c4109db22111ac0157ddd1a1b60ab5ea903954f" translate="yes" xml:space="preserve">
          <source>Unfreeze the objects in the permanent generation, put them back into the oldest generation.</source>
          <target state="translated">永久世代のオブジェクトをアンフリーズして、古い世代に戻します。</target>
        </trans-unit>
        <trans-unit id="e7fc7822d3ca51d28bdd7a9ee19f9336a4230d3b" translate="yes" xml:space="preserve">
          <source>Unicode character</source>
          <target state="translated">ユニコードもじ</target>
        </trans-unit>
        <trans-unit id="9e8265bf80e6bc5985b5427e35abc3cdd9d7da17" translate="yes" xml:space="preserve">
          <source>Unicode issues</source>
          <target state="translated">ユニコード問題</target>
        </trans-unit>
        <trans-unit id="b5b526768b1969cfa8a08fe014a311e1718f9ed9" translate="yes" xml:space="preserve">
          <source>UnicodeDecodeError</source>
          <target state="translated">UnicodeDecodeError</target>
        </trans-unit>
        <trans-unit id="f9973e2691d99be91e5b5ef9ad2cbe53ffe3fadc" translate="yes" xml:space="preserve">
          <source>UnicodeEncodeError</source>
          <target state="translated">UnicodeEncodeError</target>
        </trans-unit>
        <trans-unit id="58283ecfa32971a53446570a674574fdd0222dda" translate="yes" xml:space="preserve">
          <source>UnicodeError</source>
          <target state="translated">UnicodeError</target>
        </trans-unit>
        <trans-unit id="f1716ad72e62babae0b6ebd36034174f931ab674" translate="yes" xml:space="preserve">
          <source>UnicodeError.encoding</source>
          <target state="translated">UnicodeError.encoding</target>
        </trans-unit>
        <trans-unit id="fe9d3d97c338283ce266f47d2b1d395c73fb7f1d" translate="yes" xml:space="preserve">
          <source>UnicodeError.end</source>
          <target state="translated">UnicodeError.end</target>
        </trans-unit>
        <trans-unit id="656ba97916742be36d330b15af168cbc79f8a2ab" translate="yes" xml:space="preserve">
          <source>UnicodeError.object</source>
          <target state="translated">UnicodeError.object</target>
        </trans-unit>
        <trans-unit id="14cca87e64dbb585003f7df820b8f5a57f0aab80" translate="yes" xml:space="preserve">
          <source>UnicodeError.reason</source>
          <target state="translated">UnicodeError.reason</target>
        </trans-unit>
        <trans-unit id="3b8f61fae443c3cca69d6e573eb7e4f82cd7d379" translate="yes" xml:space="preserve">
          <source>UnicodeError.start</source>
          <target state="translated">UnicodeError.start</target>
        </trans-unit>
        <trans-unit id="86ef62e8ac070df397f526dd95d38ffc3c15aeee" translate="yes" xml:space="preserve">
          <source>UnicodeTranslateError</source>
          <target state="translated">UnicodeTranslateError</target>
        </trans-unit>
        <trans-unit id="b71d2cc5fd619eca3b73d5c3091b18067741280b" translate="yes" xml:space="preserve">
          <source>UnicodeWarning</source>
          <target state="translated">UnicodeWarning</target>
        </trans-unit>
        <trans-unit id="23e60ae32a7af57bd10051941d5faa9269e1cbba" translate="yes" xml:space="preserve">
          <source>Unified Chinese</source>
          <target state="translated">統一中国語</target>
        </trans-unit>
        <trans-unit id="48bf340eb1af34013d116721a6b365f7bd850c4d" translate="yes" xml:space="preserve">
          <source>Unified diffs are a compact way of showing just the lines that have changed plus a few lines of context. The changes are shown in an inline style (instead of separate before/after blocks). The number of context lines is set by &lt;em&gt;n&lt;/em&gt; which defaults to three.</source>
          <target state="translated">Unified diffは、変更された行と数行のコンテキストのみを表示するコンパクトな方法です。変更はインラインスタイルで表示されます（個別の前/後ブロックではなく）。コンテキスト行の数は&lt;em&gt;n&lt;/em&gt;によって設定され、デフォルトは3です。</target>
        </trans-unit>
        <trans-unit id="b23a036b5a5fc3d186211fcee99032ae543b0068" translate="yes" xml:space="preserve">
          <source>Union type; &lt;code&gt;Union[X, Y]&lt;/code&gt; means either X or Y.</source>
          <target state="translated">ユニオンタイプ。 &lt;code&gt;Union[X, Y]&lt;/code&gt; はXまたはYを意味します。</target>
        </trans-unit>
        <trans-unit id="0eb559f7d253f052b5fc0c24eb1006d8b21bb4e2" translate="yes" xml:space="preserve">
          <source>Unions of a single argument vanish, e.g.:</source>
          <target state="translated">単一の引数のユニオンが消滅する。</target>
        </trans-unit>
        <trans-unit id="e074348d912505b595223b5c9df37529adad25df" translate="yes" xml:space="preserve">
          <source>Unions of unions are flattened, e.g.:</source>
          <target state="translated">組合の組合はフラットになっています。</target>
        </trans-unit>
        <trans-unit id="a6013fd2beb609fb6c408bc5428b39a0ba92fa33" translate="yes" xml:space="preserve">
          <source>UniqueAddressHeader</source>
          <target state="translated">UniqueAddressHeader</target>
        </trans-unit>
        <trans-unit id="8cadb2b420289f9e588a18d9273812d40cde290f" translate="yes" xml:space="preserve">
          <source>UniqueDateHeader</source>
          <target state="translated">UniqueDateHeader</target>
        </trans-unit>
        <trans-unit id="f6e35626af402641832362022f7bb51f7666a5d5" translate="yes" xml:space="preserve">
          <source>UniqueSingleAddressHeader</source>
          <target state="translated">UniqueSingleAddressHeader</target>
        </trans-unit>
        <trans-unit id="5e5b15a19084f3693eb1aaa731c3bfb0eff4150a" translate="yes" xml:space="preserve">
          <source>UniqueUnstructuredHeader</source>
          <target state="translated">UniqueUnstructuredHeader</target>
        </trans-unit>
        <trans-unit id="3db9bdfab0f022f13a4bb48d254cae9da8cb6639" translate="yes" xml:space="preserve">
          <source>Unit separator</source>
          <target state="translated">ユニットセパレータ</target>
        </trans-unit>
        <trans-unit id="dc4f2bd7bfcffb7a6d6e83447eac85d3afa07920" translate="yes" xml:space="preserve">
          <source>Unittest API</source>
          <target state="translated">ユニテストエーピーアイ</target>
        </trans-unit>
        <trans-unit id="e675c3dd2d602712e85f0cdbca3a0feb954afda6" translate="yes" xml:space="preserve">
          <source>Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-modules&quot;&gt;modules&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-packages&quot;&gt;packages&lt;/a&gt; (including &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;) importable from the top-level directory of the project (this means that their filenames must be valid &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#identifiers&quot;&gt;identifiers&lt;/a&gt;).</source>
          <target state="translated">Unittestは簡単なテスト検出をサポートしています。テスト検出と互換性を持たせるには、すべてのテストファイルが、プロジェクトの最上位ディレクトリからインポート可能な&lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-modules&quot;&gt;モジュール&lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-packages&quot;&gt;パッケージ&lt;/a&gt;（&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;名前空間パッケージ&lt;/a&gt;を含む）である必要があります（つまり、ファイル名は有効な&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#identifiers&quot;&gt;識別子で&lt;/a&gt;なければなりません）。</target>
        </trans-unit>
        <trans-unit id="cda17c4e2fe131b144d141e5a91058b9f4de3b1a" translate="yes" xml:space="preserve">
          <source>Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-modules&quot;&gt;modules&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-packages&quot;&gt;packages&lt;/a&gt; (including &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;) importable from the top-level directory of the project (this means that their filenames must be valid &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#identifiers&quot;&gt;identifiers&lt;/a&gt;).</source>
          <target state="translated">Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-modules&quot;&gt;modules&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-packages&quot;&gt;packages&lt;/a&gt; (including &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;) importable from the top-level directory of the project (this means that their filenames must be valid &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#identifiers&quot;&gt;identifiers&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="6f5a7f4e3781a69dbf9bc8bde34477a22943eb3a" translate="yes" xml:space="preserve">
          <source>Unittest supports skipping individual test methods and even whole classes of tests. In addition, it supports marking a test as an &amp;ldquo;expected failure,&amp;rdquo; a test that is broken and will fail, but shouldn&amp;rsquo;t be counted as a failure on a &lt;a href=&quot;#unittest.TestResult&quot;&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Unittestは、個々のテストメソッドのスキップ、さらにはテストのクラス全体のスキップをサポートしています。さらに、テストを「予想される失敗」としてマーク付けすることもできます。テストは壊れており、失敗しますが、&lt;a href=&quot;#unittest.TestResult&quot;&gt; &lt;code&gt;TestResult&lt;/code&gt; での&lt;/a&gt;失敗としてカウントされません。</target>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="61269b47d1912b3422eba3f73aece2ef97a5b744" translate="yes" xml:space="preserve">
          <source>Unix Platforms</source>
          <target state="translated">ユニックスプラットフォーム</target>
        </trans-unit>
        <trans-unit id="0e13810f1a14b62c949e081b6a7b9339dcbb5a03" translate="yes" xml:space="preserve">
          <source>Unix Signals</source>
          <target state="translated">Unix シグナル</target>
        </trans-unit>
        <trans-unit id="6816141193a0e3dc3b48a84b10bea2489b164992" translate="yes" xml:space="preserve">
          <source>Unix Sockets</source>
          <target state="translated">ユニックスソケット</target>
        </trans-unit>
        <trans-unit id="1bdb0064b2fcd2fcd102a38464d440d9eff8fea9" translate="yes" xml:space="preserve">
          <source>Unix Specific Services</source>
          <target state="translated">ユニックス専用サービス</target>
        </trans-unit>
        <trans-unit id="847c5fad076a68d49660f9eb9a8817b853479991" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IRUSR&quot;&gt;&lt;code&gt;S_IRUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stat.S_IRUSR&quot;&gt; &lt;code&gt;S_IRUSR&lt;/code&gt; の&lt;/a&gt; Unix V7シノニム。</target>
        </trans-unit>
        <trans-unit id="5c559c0bd7b52c6d5fcd6c4cdfa0164567d71c81" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IWUSR&quot;&gt;&lt;code&gt;S_IWUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stat.S_IWUSR&quot;&gt; &lt;code&gt;S_IWUSR&lt;/code&gt; の&lt;/a&gt; Unix V7シノニム。</target>
        </trans-unit>
        <trans-unit id="46b7a407dbe01720c5581466e65e5d6766b08dcd" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IXUSR&quot;&gt;&lt;code&gt;S_IXUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stat.S_IXUSR&quot;&gt; &lt;code&gt;S_IXUSR&lt;/code&gt; の&lt;/a&gt; Unix V7シノニム。</target>
        </trans-unit>
        <trans-unit id="082c2a1389c9c2ea8c60ebb7f7c8a999f936e231" translate="yes" xml:space="preserve">
          <source>Unix shell-style path expansion.</source>
          <target state="translated">Unix シェルスタイルのパス展開。</target>
        </trans-unit>
        <trans-unit id="32e32465c877196c71d88374d755b3b7baedfc11" translate="yes" xml:space="preserve">
          <source>Unix signals</source>
          <target state="translated">ユニックス信号</target>
        </trans-unit>
        <trans-unit id="5e4a3d86de027e8272c31e5a7f66ec8b0b49bbef" translate="yes" xml:space="preserve">
          <source>UnknownHandler Objects</source>
          <target state="translated">UnknownHandler オブジェクト</target>
        </trans-unit>
        <trans-unit id="4cd89cfc1a4e26f640c99600149f2caa1d397d8a" translate="yes" xml:space="preserve">
          <source>Unless explicitly noted, these functions support &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;Fraction&lt;/code&gt;&lt;/a&gt;. Behaviour with other types (whether in the numeric tower or not) is currently unsupported. Collections with a mix of types are also undefined and implementation-dependent. If your input data consists of mixed types, you may be able to use &lt;a href=&quot;functions#map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; to ensure a consistent result, for example: &lt;code&gt;map(float, input_data)&lt;/code&gt;.</source>
          <target state="translated">特に明記されていない限り、これらの関数は&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;Fraction&lt;/code&gt; を&lt;/a&gt;サポートしています。他のタイプの動作（数値塔内かどうかに関係なく）は、現在サポートされていません。タイプが混在するコレクションも定義されておらず、実装に依存します。入力データが混合タイプで構成されている場合、 &lt;code&gt;map(float, input_data)&lt;/code&gt; ように、一貫した結果を保証するために&lt;a href=&quot;functions#map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt;を使用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="9b245a8781f57e2ee32cd0bd7e365277ad5f0b91" translate="yes" xml:space="preserve">
          <source>Unless intentionally delayed, login is normally performed during the &lt;a href=&quot;#nntplib.NNTP&quot;&gt;&lt;code&gt;NNTP&lt;/code&gt;&lt;/a&gt; object initialization and separately calling this function is unnecessary. To force authentication to be delayed, you must not set &lt;em&gt;user&lt;/em&gt; or &lt;em&gt;password&lt;/em&gt; when creating the object, and must set &lt;em&gt;usenetrc&lt;/em&gt; to False.</source>
          <target state="translated">意図的に遅延させない限り、ログインは通常&lt;a href=&quot;#nntplib.NNTP&quot;&gt; &lt;code&gt;NNTP&lt;/code&gt; &lt;/a&gt;オブジェクトの初期化中に実行され、この関数を個別に呼び出す必要はありません。認証を強制的に遅延させるには、オブジェクトの作成時に&lt;em&gt;ユーザー&lt;/em&gt;または&lt;em&gt;パスワードを&lt;/em&gt;設定せず、&lt;em&gt;usenetrc&lt;/em&gt;をFalseに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d7daaf11df16b200f419dc320e67a326ec4d10c2" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, the connection will be open even after an exception is raised.</source>
          <target state="translated">特に断りのない限り、例外が発生しても接続はオープンになります。</target>
        </trans-unit>
        <trans-unit id="7339f074fcb0ea2ac52be61a728102c0e5798d94" translate="yes" xml:space="preserve">
          <source>Unless stated otherwise, all network methods accepting other network/address objects will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the argument&amp;rsquo;s IP version is incompatible to &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">特に明記しない限り、引数のIPバージョンが &lt;code&gt;self&lt;/code&gt; と互換性がない場合、他のネットワーク/アドレスオブジェクトを受け入れるすべてのネットワークメソッドは&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を発生さ&lt;/a&gt;せます。</target>
        </trans-unit>
        <trans-unit id="993ab4594b8b02fc5860d357a6b3b9b2b3ab001e" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;--without-pip&lt;/code&gt; option is given, &lt;a href=&quot;ensurepip#module-ensurepip&quot;&gt;&lt;code&gt;ensurepip&lt;/code&gt;&lt;/a&gt; will be invoked to bootstrap &lt;code&gt;pip&lt;/code&gt; into the virtual environment.</source>
          <target state="translated">ない限り &lt;code&gt;--without-pip&lt;/code&gt; オプションが与えられ、&lt;a href=&quot;ensurepip#module-ensurepip&quot;&gt; &lt;code&gt;ensurepip&lt;/code&gt; は、&lt;/a&gt;ブートストラップに呼び出されます &lt;code&gt;pip&lt;/code&gt; 仮想環境に。</target>
        </trans-unit>
        <trans-unit id="c4a782d6fa682b46e8e886c88894b4beb34c1b11" translate="yes" xml:space="preserve">
          <source>Unless the &lt;em&gt;_charset&lt;/em&gt; argument is explicitly set to &lt;code&gt;None&lt;/code&gt;, the MIMEText object created will have both a &lt;em&gt;Content-Type&lt;/em&gt; header with a &lt;code&gt;charset&lt;/code&gt; parameter, and a &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header. This means that a subsequent &lt;code&gt;set_payload&lt;/code&gt; call will not result in an encoded payload, even if a charset is passed in the &lt;code&gt;set_payload&lt;/code&gt; command. You can &amp;ldquo;reset&amp;rdquo; this behavior by deleting the &lt;code&gt;Content-Transfer-Encoding&lt;/code&gt; header, after which a &lt;code&gt;set_payload&lt;/code&gt; call will automatically encode the new payload (and add a new &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header).</source>
          <target state="translated">&lt;em&gt;_charset&lt;/em&gt;引数が明示的に &lt;code&gt;None&lt;/code&gt; に設定されていない限り、作成されたMIMETextオブジェクトには、 &lt;code&gt;charset&lt;/code&gt; パラメーターを持つ&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーと&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;ヘッダーの両方が含まれます。つまり、 &lt;code&gt;set_payload&lt;/code&gt; コマンドで文字セットが渡された場合でも、後続の &lt;code&gt;set_payload&lt;/code&gt; 呼び出しでは、エンコードされたペイロードは生成されません。この動作を「リセット」するには、 &lt;code&gt;Content-Transfer-Encoding&lt;/code&gt; ヘッダーを削除します。その後、 &lt;code&gt;set_payload&lt;/code&gt; 呼び出しが新しいペイロードを自動的にエンコードします（そして新しい&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;ヘッダーを追加します）。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="41468c42a8b09a43651139d245a1d58ff2225ad6" translate="yes" xml:space="preserve">
          <source>Unless you set the &lt;a href=&quot;#weakref.finalize.atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; attribute to &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, a finalizer will be called when the program exits if it is still alive. For instance</source>
          <target state="translated">&lt;a href=&quot;#weakref.finalize.atexit&quot;&gt; &lt;code&gt;atexit&lt;/code&gt; &lt;/a&gt;属性を&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; に&lt;/a&gt;設定しない限り、ファイナライザは、プログラムがまだ生きている場合、プログラムが終了するときに呼び出されます。例えば</target>
        </trans-unit>
        <trans-unit id="8ac92788612719ddd5c97ea10f0326dfc1c7c844" translate="yes" xml:space="preserve">
          <source>Unless you wish to use &lt;a href=&quot;#smtplib.SMTP.has_extn&quot;&gt;&lt;code&gt;has_extn()&lt;/code&gt;&lt;/a&gt; before sending mail, it should not be necessary to call this method explicitly. It will be implicitly called by &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;sendmail()&lt;/code&gt;&lt;/a&gt; when necessary.</source>
          <target state="translated">メールを送信する前に&lt;a href=&quot;#smtplib.SMTP.has_extn&quot;&gt; &lt;code&gt;has_extn()&lt;/code&gt; &lt;/a&gt;を使用したい場合を除き、このメソッドを明示的に呼び出す必要はありません。必要に応じて&lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt; &lt;code&gt;sendmail()&lt;/code&gt; &lt;/a&gt;によって暗黙的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9e0c258f7bb0ea2dfce26a7399ef9cf54157425d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#asyncio.BoundedSemaphore&quot;&gt;&lt;code&gt;BoundedSemaphore&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt; allows making more &lt;code&gt;release()&lt;/code&gt; calls than &lt;code&gt;acquire()&lt;/code&gt; calls.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.BoundedSemaphore&quot;&gt; &lt;code&gt;BoundedSemaphore&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#asyncio.Semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt;では、 &lt;code&gt;acquire()&lt;/code&gt; 呼び出しよりも多くの &lt;code&gt;release()&lt;/code&gt; 呼び出しを行うことができます。</target>
        </trans-unit>
        <trans-unit id="33618204c6228bb2f08249a4999150db6c1a3c5a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#asyncio.wait_for&quot;&gt;&lt;code&gt;wait_for()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;wait()&lt;/code&gt; does not cancel the futures when a timeout occurs.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.wait_for&quot;&gt; &lt;code&gt;wait_for()&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;wait()&lt;/code&gt; は、タイムアウトが発生しても先物をキャンセルしません。</target>
        </trans-unit>
        <trans-unit id="67e1ebd0e3d2c8e2ee24effe1aafb7d36dfc4f44" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#bytes.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; when a delimiter string &lt;em&gt;sep&lt;/em&gt; is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</source>
          <target state="translated">区切り文字列&lt;em&gt;sep&lt;/em&gt;が指定された場合の&lt;a href=&quot;#bytes.split&quot;&gt; &lt;code&gt;split()&lt;/code&gt; &lt;/a&gt;とは異なり、このメソッドは空の文字列に対して空のリストを返し、端末の改行は余分な行にはなりません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca1293cddc7f4a5a7d63761eedfd744e93178c07" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#str.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; when a delimiter string &lt;em&gt;sep&lt;/em&gt; is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</source>
          <target state="translated">区切り文字列&lt;em&gt;sep&lt;/em&gt;が指定された場合の&lt;a href=&quot;#str.split&quot;&gt; &lt;code&gt;split()&lt;/code&gt; &lt;/a&gt;とは異なり、このメソッドは空の文字列に対して空のリストを返し、端末の改行は余分な行にはなりません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3e82dc45fec18fee8381940667b7739fe395eba" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#str.swapcase&quot;&gt;&lt;code&gt;str.swapcase()&lt;/code&gt;&lt;/a&gt;, it is always the case that &lt;code&gt;bin.swapcase().swapcase() == bin&lt;/code&gt; for the binary versions. Case conversions are symmetrical in ASCII, even though that is not generally true for arbitrary Unicode code points.</source>
          <target state="translated">&lt;a href=&quot;#str.swapcase&quot;&gt; &lt;code&gt;str.swapcase()&lt;/code&gt; &lt;/a&gt;とは異なり、バイナリバージョンの場合は常に &lt;code&gt;bin.swapcase().swapcase() == bin&lt;/code&gt; です。大文字と小文字の変換はASCIIでは対称的ですが、任意のUnicodeコードポイントでは一般的にそうではありません。</target>
        </trans-unit>
        <trans-unit id="0c95a6d7a10d383afd78d9c0e2a9a3a25e57da5e" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#tempfile.TemporaryFile&quot;&gt;&lt;code&gt;TemporaryFile()&lt;/code&gt;&lt;/a&gt;, the user of &lt;a href=&quot;#tempfile.mkstemp&quot;&gt;&lt;code&gt;mkstemp()&lt;/code&gt;&lt;/a&gt; is responsible for deleting the temporary file when done with it.</source>
          <target state="translated">&lt;a href=&quot;#tempfile.TemporaryFile&quot;&gt; &lt;code&gt;TemporaryFile()&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#tempfile.mkstemp&quot;&gt; &lt;code&gt;mkstemp()&lt;/code&gt; の&lt;/a&gt;ユーザーは、一時ファイルを使い終わったら削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="d713f1bbd5fe8d9d3ef65d626ba711d216ccc024" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt;&lt;code&gt;asyncore.dispatcher&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asynchat.async_chat&quot;&gt;&lt;code&gt;async_chat&lt;/code&gt;&lt;/a&gt; allows you to define a</source>
          <target state="translated">&lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt; &lt;code&gt;asyncore.dispatcher&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#asynchat.async_chat&quot;&gt; &lt;code&gt;async_chat&lt;/code&gt; &lt;/a&gt;では、</target>
        </trans-unit>
        <trans-unit id="5c886da08a6499e65a78a1b5c0d1665bb125f558" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;, with &lt;code&gt;SimpleNamespace&lt;/code&gt; you can add and remove attributes. If a &lt;code&gt;SimpleNamespace&lt;/code&gt; object is initialized with keyword arguments, those are directly added to the underlying namespace.</source>
          <target state="translated">&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;SimpleNamespace&lt;/code&gt; では属性を追加および削除できます。場合 &lt;code&gt;SimpleNamespace&lt;/code&gt; のオブジェクトはキーワード引数で初期化され、それらは直接根底にある名前空間に追加されます。</target>
        </trans-unit>
        <trans-unit id="596d48dc2d054d385685290e71d4024b5251eff2" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marshal#module-marshal&quot;&gt;&lt;code&gt;marshal&lt;/code&gt;&lt;/a&gt;, JSON is not a framed protocol, so trying to serialize multiple objects with repeated calls to &lt;a href=&quot;#json.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; using the same &lt;em&gt;fp&lt;/em&gt; will result in an invalid JSON file.</source>
          <target state="translated">&lt;a href=&quot;pickle#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;marshal#module-marshal&quot;&gt; &lt;code&gt;marshal&lt;/code&gt; &lt;/a&gt;とは異なり、JSONはフレームプロトコルではないため、同じ&lt;em&gt;fp&lt;/em&gt;を使用して&lt;a href=&quot;#json.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt;を繰り返し呼び出して複数のオブジェクトをシリアル化しようとすると、無効なJSONファイルが生成されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="75c3001ddb5896b3f0beaf0cf2b3057b6d86a8ca" translate="yes" xml:space="preserve">
          <source>Unlike GNU &lt;code&gt;getopt()&lt;/code&gt;, after a non-option argument, all further arguments are considered also non-options. This is similar to the way non-GNU Unix systems work.</source>
          <target state="translated">GNU &lt;code&gt;getopt()&lt;/code&gt; とは異なり、非オプション引数の後、それ以降のすべての引数も非オプションと見なされます。これは、GNU以外のUnixシステムの動作に似ています。</target>
        </trans-unit>
        <trans-unit id="1dec49b182e8d7603947a0985b2ecf4c1b9d6835" translate="yes" xml:space="preserve">
          <source>Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the &lt;a href=&quot;functions#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; mechanism from the class that overrides it. This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance.</source>
          <target state="translated">Java抽象メソッドとは異なり、これらの抽象メソッドには実装がある場合があります。この実装は、それをオーバーライドするクラスから&lt;a href=&quot;functions#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;メカニズムを介して呼び出すことができます。これは、協調的多重継承を使用するフレームワークでのスーパーコールのエンドポイントとして役立ちます。</target>
        </trans-unit>
        <trans-unit id="5f16780c200014deeda946367354cdafa913c303" translate="yes" xml:space="preserve">
          <source>Unlike a dictionary, &lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; objects do not raise an error when you try to get or delete a key that isn&amp;rsquo;t in the wrapped header list. Getting a nonexistent header just returns &lt;code&gt;None&lt;/code&gt;, and deleting a nonexistent header does nothing.</source>
          <target state="translated">辞書とは異なり、&lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt; &lt;code&gt;Headers&lt;/code&gt; &lt;/a&gt;オブジェクトは、ラップされたヘッダーリストにないキーを取得または削除しようとしたときにエラーを発生させません。存在しないヘッダーを取得しても &lt;code&gt;None&lt;/code&gt; が返されるだけで、存在しないヘッダーを削除しても何も起こりません。</target>
        </trans-unit>
        <trans-unit id="1c6f6aee98d471465b243d4e2fd41bf6e3854779" translate="yes" xml:space="preserve">
          <source>Unlike a unix shell, Python does not do any &lt;em&gt;automatic&lt;/em&gt; path expansions. Functions such as &lt;a href=&quot;#os.path.expanduser&quot;&gt;&lt;code&gt;expanduser()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.path.expandvars&quot;&gt;&lt;code&gt;expandvars()&lt;/code&gt;&lt;/a&gt; can be invoked explicitly when an application desires shell-like path expansion. (See also the &lt;a href=&quot;glob#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; module.)</source>
          <target state="translated">UNIXシェルとは異なり、Pythonは&lt;em&gt;自動&lt;/em&gt;パス展開を行いません。&lt;a href=&quot;#os.path.expanduser&quot;&gt; &lt;code&gt;expanduser()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#os.path.expandvars&quot;&gt; &lt;code&gt;expandvars()&lt;/code&gt; &lt;/a&gt;などの関数は、アプリケーションがシェルのようなパス展開を希望するときに明示的に呼び出すことができます。（&lt;a href=&quot;glob#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;モジュールも参照してください。）</target>
        </trans-unit>
        <trans-unit id="e7bd162bae41d85a4f9b40addad75b0dfc5f8ca4" translate="yes" xml:space="preserve">
          <source>Unlike hardware based binary floating point, the decimal module has a user alterable precision (defaulting to 28 places) which can be as large as needed for a given problem:</source>
          <target state="translated">ハードウェアベースのバイナリ浮動小数点とは異なり、10進モジュールにはユーザーが変更可能な精度(デフォルトでは28桁)があり、与えられた問題に対して必要なだけ大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="3ed2b66476f9ed547b34b80c9bc1ba9db01e1b4b" translate="yes" xml:space="preserve">
          <source>Unlike normal generators, async generators cannot return a value, so there is no &lt;code&gt;ReturnType&lt;/code&gt; type parameter. As with &lt;a href=&quot;#typing.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;SendType&lt;/code&gt; behaves contravariantly.</source>
          <target state="translated">通常のジェネレーターとは異なり、非同期ジェネレーターは値を返すことができないため、 &lt;code&gt;ReturnType&lt;/code&gt; 型パラメーターはありません。同様に&lt;a href=&quot;#typing.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;SendType&lt;/code&gt; は contravariantly動作します。</target>
        </trans-unit>
        <trans-unit id="02e5049358a9b6f903a818d8a1d172b104aa9a7e" translate="yes" xml:space="preserve">
          <source>Unlike other asyncio functions this function requires the &lt;em&gt;loop&lt;/em&gt; argument to be passed explicitly.</source>
          <target state="translated">他のasyncio関数とは異なり、この関数では&lt;em&gt;ループ&lt;/em&gt;引数を明示的に渡す必要があり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="daabe887cf8afd0ee7dd85b067f7ffc7a6ff2139" translate="yes" xml:space="preserve">
          <source>Unlike other operations, if the length of the coefficient after the quantize operation would be greater than precision, then an &lt;a href=&quot;#decimal.InvalidOperation&quot;&gt;&lt;code&gt;InvalidOperation&lt;/code&gt;&lt;/a&gt; is signaled. This guarantees that, unless there is an error condition, the quantized exponent is always equal to that of the right-hand operand.</source>
          <target state="translated">他の演算とは異なり、量子化演算後の係数の長さが精度よりも長い場合、&lt;a href=&quot;#decimal.InvalidOperation&quot;&gt; &lt;code&gt;InvalidOperation&lt;/code&gt; &lt;/a&gt;が通知されます。これは、エラー条件がない限り、量子化された指数が常に右側のオペランドの指数と等しいことを保証します。</target>
        </trans-unit>
        <trans-unit id="f8eddae08f6656a48c18c114d2d80555ac88cc50" translate="yes" xml:space="preserve">
          <source>Unlike other representations of messages, file-like representations are not necessarily independent of the &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; instance that created them or of the underlying mailbox. More specific documentation is provided by each subclass.</source>
          <target state="translated">メッセージの他の表現とは異なり、ファイルのような表現は、メッセージを作成した&lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt;インスタンスまたは基になるメールボックスから必ずしも独立しているとは限りません。より具体的なドキュメントは、各サブクラスによって提供されます。</target>
        </trans-unit>
        <trans-unit id="1729cdad2c6448823f2a52f8dea629abf34cbd9d" translate="yes" xml:space="preserve">
          <source>Unlike pickle, deserializing untrusted JSON does not in itself create an arbitrary code execution vulnerability.</source>
          <target state="translated">pickleとは異なり、信頼されていないJSONをデシリアライズすること自体が任意のコード実行の脆弱性を生み出すわけではありません。</target>
        </trans-unit>
        <trans-unit id="c027bbb86d577787589ae4a2296400dfbc620f5d" translate="yes" xml:space="preserve">
          <source>Unlike some other popen functions, this implementation will never implicitly call a system shell. This means that all characters, including shell metacharacters, can safely be passed to child processes. If the shell is invoked explicitly, via &lt;code&gt;shell=True&lt;/code&gt;, it is the application&amp;rsquo;s responsibility to ensure that all whitespace and metacharacters are quoted appropriately to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;shell injection&lt;/a&gt; vulnerabilities.</source>
          <target state="translated">他の一部のpopen関数とは異なり、この実装はシステムシェルを暗黙的に呼び出すことはありません。これは、シェルのメタ文字を含むすべての文字が安全に子プロセスに渡されることを意味します。 &lt;code&gt;shell=True&lt;/code&gt; を介してシェルが明示的に呼び出された場合、すべての空白とメタ文字が適切に引用され、&lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;シェルインジェクションの&lt;/a&gt;脆弱性を回避することは、アプリケーションの責任です。</target>
        </trans-unit>
        <trans-unit id="326e5cb29ac1685ac6b6540756008303df0cd9e9" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;functions#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt; function, it does not make sense for the &lt;a href=&quot;#module-bisect&quot;&gt;&lt;code&gt;bisect()&lt;/code&gt;&lt;/a&gt; functions to have &lt;em&gt;key&lt;/em&gt; or &lt;em&gt;reversed&lt;/em&gt; arguments because that would lead to an inefficient design (successive calls to bisect functions would not &amp;ldquo;remember&amp;rdquo; all of the previous key lookups).</source>
          <target state="translated">&lt;a href=&quot;functions#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;関数とは異なり、&lt;a href=&quot;#module-bisect&quot;&gt; &lt;code&gt;bisect()&lt;/code&gt; &lt;/a&gt;関数が&lt;em&gt;キー&lt;/em&gt;または&lt;em&gt;逆&lt;/em&gt;引き数を持つことは、設計が非効率になるため、意味がありません（bisect関数を連続して呼び出すと、以前のキー検索のすべてが「記憶」されるわけではありません）。 。</target>
        </trans-unit>
        <trans-unit id="3793d0204514f0cecb268eaedd5865f0bf82163f" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module, the &lt;a href=&quot;#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module does not support leap seconds.</source>
          <target state="translated">&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;モジュールとは異なり、&lt;a href=&quot;#module-datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;モジュールはうるう秒をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="b6e58a4913f53cdae8b1ea35f09013530b7aa1c4" translate="yes" xml:space="preserve">
          <source>Unlike the C function of the same name, &lt;a href=&quot;#time.asctime&quot;&gt;&lt;code&gt;asctime()&lt;/code&gt;&lt;/a&gt; does not add a trailing newline.</source>
          <target state="translated">同じ名前のC関数とは異なり、&lt;a href=&quot;#time.asctime&quot;&gt; &lt;code&gt;asctime()&lt;/code&gt; &lt;/a&gt;は末尾の改行を追加しません。</target>
        </trans-unit>
        <trans-unit id="f224bbef952cee89d776f9978fc11e4d77aacd93" translate="yes" xml:space="preserve">
          <source>Unlike the built-in &lt;code&gt;**&lt;/code&gt; operator, &lt;a href=&quot;#math.pow&quot;&gt;&lt;code&gt;math.pow()&lt;/code&gt;&lt;/a&gt; converts both its arguments to type &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;**&lt;/code&gt; or the built-in &lt;a href=&quot;functions#pow&quot;&gt;&lt;code&gt;pow()&lt;/code&gt;&lt;/a&gt; function for computing exact integer powers.</source>
          <target state="translated">組み込みの &lt;code&gt;**&lt;/code&gt; 演算子とは異なり、&lt;a href=&quot;#math.pow&quot;&gt; &lt;code&gt;math.pow()&lt;/code&gt; は&lt;/a&gt;両方の引数を&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;型に変換します。使用 &lt;code&gt;**&lt;/code&gt; または内蔵&lt;a href=&quot;functions#pow&quot;&gt; &lt;code&gt;pow()&lt;/code&gt; &lt;/a&gt;正確な整数の累乗を計算する関数。</target>
        </trans-unit>
        <trans-unit id="41e1fdb4abd6dd67c502fc5584b98310de24db38" translate="yes" xml:space="preserve">
          <source>Unlike the other methods, callbacks added this way cannot suppress exceptions (as they are never passed the exception details).</source>
          <target state="translated">他のメソッドとは異なり、この方法で追加されたコールバックは例外を抑制することができません(例外の詳細が渡されることはありません)。</target>
        </trans-unit>
        <trans-unit id="200b8c21994a17a42d1321647abef543d47f7741" translate="yes" xml:space="preserve">
          <source>Unlike the standard library threading &lt;a href=&quot;queue#module-queue&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/a&gt;, the size of the queue is always known and can be returned by calling the &lt;a href=&quot;#asyncio.Queue.qsize&quot;&gt;&lt;code&gt;qsize()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">標準ライブラリのスレッド化&lt;a href=&quot;queue#module-queue&quot;&gt; &lt;code&gt;queue&lt;/code&gt; &lt;/a&gt;とは異なり、キューのサイズは常にわかっており、&lt;a href=&quot;#asyncio.Queue.qsize&quot;&gt; &lt;code&gt;qsize()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって返すことができます。</target>
        </trans-unit>
        <trans-unit id="99e8b687ce1472cf64f559941f128998de28a367" translate="yes" xml:space="preserve">
          <source>Unlike with dictionaries, keyword arguments are not supported.</source>
          <target state="translated">辞書とは異なり、キーワード引数はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="b295b1626651c0f81546df6b37a5a08b3d17b159" translate="yes" xml:space="preserve">
          <source>Unlinks all of the specified &lt;em&gt;items&lt;/em&gt; from the tree.</source>
          <target state="translated">指定されたすべての&lt;em&gt;アイテム&lt;/em&gt;をツリーからリンク解除します。</target>
        </trans-unit>
        <trans-unit id="228d085fb175c515aa2497f02a042daa9633e64b" translate="yes" xml:space="preserve">
          <source>Unlocks the specified bytes, which must have been previously locked.</source>
          <target state="translated">指定したバイトのロックを解除します。</target>
        </trans-unit>
        <trans-unit id="048eced2fb1660f6cbfc326ec3236a428f12a1cc" translate="yes" xml:space="preserve">
          <source>Unmatched square brackets in the &lt;code&gt;netloc&lt;/code&gt; attribute will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;netloc&lt;/code&gt; 属性で一致しない角括弧は、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; を発生させ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c4b43c42ceb925094a8a1fcebdac4099acaace32" translate="yes" xml:space="preserve">
          <source>Unofficial XML-RPC Errata</source>
          <target state="translated">非公式な XML-RPC の正誤表</target>
        </trans-unit>
        <trans-unit id="e180d436cafe3018c8820226a888ae5caa7011f1" translate="yes" xml:space="preserve">
          <source>Unpack an archive. &lt;em&gt;filename&lt;/em&gt; is the full path of the archive.</source>
          <target state="translated">アーカイブを解凍します。&lt;em&gt;filename&lt;/em&gt;はアーカイブの完全パスです。</target>
        </trans-unit>
        <trans-unit id="d093e02eacf25883f9dd3d7f93c744854d7c18ee" translate="yes" xml:space="preserve">
          <source>Unpack from &lt;em&gt;buffer&lt;/em&gt; starting at position &lt;em&gt;offset&lt;/em&gt;, according to the format string &lt;em&gt;format&lt;/em&gt;. The result is a tuple even if it contains exactly one item. The buffer&amp;rsquo;s size in bytes, starting at position &lt;em&gt;offset&lt;/em&gt;, must be at least the size required by the format, as reflected by &lt;a href=&quot;#struct.calcsize&quot;&gt;&lt;code&gt;calcsize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フォーマット文字列&lt;em&gt;format&lt;/em&gt;に従って、&lt;em&gt;オフセット&lt;/em&gt;位置から&lt;em&gt;バッファ&lt;/em&gt;からアンパックし&lt;em&gt;ます&lt;/em&gt;。項目が1つだけ含まれていても、結果はタプルになります。位置&lt;em&gt;offset&lt;/em&gt;から始まるバッファーのサイズ（バイト単位）は、少なくとも&lt;a href=&quot;#struct.calcsize&quot;&gt; &lt;code&gt;calcsize()&lt;/code&gt; で&lt;/a&gt;反映されるように、フォーマットで必要なサイズでなければなりません。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2fa5bd12750940524bd0d1cfbac26ffee31f5657" translate="yes" xml:space="preserve">
          <source>Unpack from the buffer &lt;em&gt;buffer&lt;/em&gt; (presumably packed by &lt;code&gt;pack(format, ...)&lt;/code&gt;) according to the format string &lt;em&gt;format&lt;/em&gt;. The result is a tuple even if it contains exactly one item. The buffer&amp;rsquo;s size in bytes must match the size required by the format, as reflected by &lt;a href=&quot;#struct.calcsize&quot;&gt;&lt;code&gt;calcsize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フォーマット文字列&lt;em&gt;format&lt;/em&gt;に従って、バッファ&lt;em&gt;buffer&lt;/em&gt;からアンパックし &lt;code&gt;pack(format, ...)&lt;/code&gt; （おそらくpack（format、...）によってパックされます）。項目が1つだけ含まれていても、結果はタプルになります。バッファのサイズ（バイト単位&lt;a href=&quot;#struct.calcsize&quot;&gt; &lt;code&gt;calcsize()&lt;/code&gt; &lt;/a&gt;、calcsize（）で反映されるように、フォーマットで必要なサイズと一致している必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2adde7706bee77bb5b34b7f4130eb67fec002267" translate="yes" xml:space="preserve">
          <source>Unpacked fields can be named by assigning them to variables or by wrapping the result in a named tuple:</source>
          <target state="translated">アンパックされたフィールドは、変数に代入したり、名前付きタプルで結果をラップしたりすることで名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="4d79ef8abbb1d3bae278d963c12afbc654d35da6" translate="yes" xml:space="preserve">
          <source>Unpacker Objects</source>
          <target state="translated">アンパッカーオブジェクト</target>
        </trans-unit>
        <trans-unit id="0861b7332a50e0249c0fdf3780673bf2dce97c44" translate="yes" xml:space="preserve">
          <source>Unpacks TOS into &lt;em&gt;count&lt;/em&gt; individual values, which are put onto the stack right-to-left.</source>
          <target state="translated">TOSを個別の&lt;em&gt;カウント&lt;/em&gt;値にアンパックして、右から左にスタックに配置します。</target>
        </trans-unit>
        <trans-unit id="b02e0fc33103f5359830c43333262a8e84c26205" translate="yes" xml:space="preserve">
          <source>Unpacks a double-precision floating point number, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_float&quot;&gt;&lt;code&gt;unpack_float()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">unpack_float &lt;a href=&quot;#xdrlib.Unpacker.unpack_float&quot;&gt; &lt;code&gt;unpack_float()&lt;/code&gt; &lt;/a&gt;と同様に、倍精度浮動小数点数をアンパックします。</target>
        </trans-unit>
        <trans-unit id="8df6c980c62c8f14de2fd87d0d289322eb884d40" translate="yes" xml:space="preserve">
          <source>Unpacks a single-precision floating point number.</source>
          <target state="translated">単精度浮動小数点数をアンパックします。</target>
        </trans-unit>
        <trans-unit id="4b95c1bc4e94907b6abeef024e6d5b6bf5bb8a71" translate="yes" xml:space="preserve">
          <source>Unpacks and returns (as a list) a fixed length array of homogeneous items. &lt;em&gt;n&lt;/em&gt; is number of list elements to expect in the buffer. As above, &lt;em&gt;unpack_item&lt;/em&gt; is the function used to unpack each element.</source>
          <target state="translated">同種アイテムの固定長配列を（リストとして）解凍して返します。&lt;em&gt;n&lt;/em&gt;は、バッファーで予期されるリスト要素の数です。上記のように、&lt;em&gt;unpack_item&lt;/em&gt;は各要素をアンパックするために使用される関数です。</target>
        </trans-unit>
        <trans-unit id="c2c5b548d5976f90964462cd30f8809920479b37" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a fixed length opaque data stream, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt;&lt;code&gt;unpack_fstring()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">unpack_fstring &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt; &lt;code&gt;unpack_fstring()&lt;/code&gt; &lt;/a&gt;と同様に、固定長の不透明なデータストリームを解凍して返します。</target>
        </trans-unit>
        <trans-unit id="2df57ac4a973e9ba3f6bd5eaedcc74a144ce664b" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a fixed length string. &lt;em&gt;n&lt;/em&gt; is the number of characters expected. Padding with null bytes to guaranteed 4 byte alignment is assumed.</source>
          <target state="translated">固定長の文字列をアンパックして返します。&lt;em&gt;n&lt;/em&gt;は、予期される文字数です。保証された4バイトアライメントへのnullバイトのパディングが想定されます。</target>
        </trans-unit>
        <trans-unit id="73c5115d1baf6a3ec3a1fff4ab85bc77008c5914" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a list of homogeneous items. The list is unpacked one element at a time by first unpacking an unsigned integer flag. If the flag is &lt;code&gt;1&lt;/code&gt;, then the item is unpacked and appended to the list. A flag of &lt;code&gt;0&lt;/code&gt; indicates the end of the list. &lt;em&gt;unpack_item&lt;/em&gt; is the function that is called to unpack the items.</source>
          <target state="translated">同種アイテムのリストを解凍して返します。リストは、最初に符号なし整数フラグをアンパックすることにより、一度に1つの要素をアンパックします。フラグが &lt;code&gt;1&lt;/code&gt; の場合、アイテムは解凍され、リストに追加されます。フラグ &lt;code&gt;0&lt;/code&gt; はリストの終わりを示します。&lt;em&gt;unpack_item&lt;/em&gt;は、アイテムを解凍するために呼び出される関数です。</target>
        </trans-unit>
        <trans-unit id="6cc4a7d8ee8262fa9d412c53ecbce94d54254aba" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length &lt;em&gt;list&lt;/em&gt; of homogeneous items. First, the length of the list is unpacked as an unsigned integer, then each element is unpacked as in &lt;a href=&quot;#xdrlib.Unpacker.unpack_farray&quot;&gt;&lt;code&gt;unpack_farray()&lt;/code&gt;&lt;/a&gt; above.</source>
          <target state="translated">同種アイテムの可変長&lt;em&gt;リスト&lt;/em&gt;をアンパックして返します。まず、リストの長さが符号なし整数としてアンパックされ、次に各要素が上記の&lt;a href=&quot;#xdrlib.Unpacker.unpack_farray&quot;&gt; &lt;code&gt;unpack_farray()&lt;/code&gt; の&lt;/a&gt;ようにアンパックされます。</target>
        </trans-unit>
        <trans-unit id="a7799cee99003d765f6427b7c1ace2dfb316c858" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length byte stream, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt;&lt;code&gt;unpack_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">unpack_string &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt; &lt;code&gt;unpack_string()&lt;/code&gt; &lt;/a&gt;と同様に、可変長バイトストリームをアンパックして返します。</target>
        </trans-unit>
        <trans-unit id="34766fddbfbc6bc1488290d0daec6b714af30a9b" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length opaque data string, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt;&lt;code&gt;unpack_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">unpack_string &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt; &lt;code&gt;unpack_string()&lt;/code&gt; &lt;/a&gt;と同様に、可変長の不透明なデータ文字列をアンパックして返します。</target>
        </trans-unit>
        <trans-unit id="ba0b788676d3b41a1c5127c92dde79d487ede145" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length string. The length of the string is first unpacked as an unsigned integer, then the string data is unpacked with &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt;&lt;code&gt;unpack_fstring()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可変長文字列をアンパックして返します。文字列の長さは最初に符号なし整数としてアンパックされ、次に文字列データが&lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt; &lt;code&gt;unpack_fstring()&lt;/code&gt; で&lt;/a&gt;アンパックされます。</target>
        </trans-unit>
        <trans-unit id="c49374747ec36dbc7532cb94438254109ce2de2f" translate="yes" xml:space="preserve">
          <source>Unparse an &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt; object and generate a string with code that would produce an equivalent &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt; object if parsed back with &lt;a href=&quot;#ast.parse&quot;&gt;&lt;code&gt;ast.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Unparse an &lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt; object and generate a string with code that would produce an equivalent &lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt; object if parsed back with &lt;a href=&quot;#ast.parse&quot;&gt; &lt;code&gt;ast.parse()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c3ee08b55fbca7f6d37e79386552db63d6525e57" translate="yes" xml:space="preserve">
          <source>Unregister a file object from selection, removing it from monitoring. A file object shall be unregistered prior to being closed.</source>
          <target state="translated">選択からファイルオブジェクトの登録を解除し、監視から削除します。ファイルオブジェクトは、クローズする前に登録を解除しなければならない。</target>
        </trans-unit>
        <trans-unit id="84737bad5fde4cf5467cba5b10bfa3fac33dbc22" translate="yes" xml:space="preserve">
          <source>Unregister a user signal: uninstall the handler of the &lt;em&gt;signum&lt;/em&gt; signal installed by &lt;a href=&quot;#faulthandler.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt;. Return &lt;code&gt;True&lt;/code&gt; if the signal was registered, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">ユーザーシグナルの登録を解除します：&lt;a href=&quot;#faulthandler.register&quot;&gt; &lt;code&gt;register()&lt;/code&gt; &lt;/a&gt;によってインストールされた&lt;em&gt;signum&lt;/em&gt;シグナルのハンドラーをアンインストールします。シグナルが登録されていれば &lt;code&gt;True&lt;/code&gt; を、そうでなければ &lt;code&gt;False&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0eeb11afbb54691f5e0783b93bd21e3897e4d244" translate="yes" xml:space="preserve">
          <source>Unregister an unpack format. &lt;em&gt;name&lt;/em&gt; is the name of the format.</source>
          <target state="translated">アンパック形式の登録を解除します。&lt;em&gt;name&lt;/em&gt;はフォーマットの名前です。</target>
        </trans-unit>
        <trans-unit id="b7b92c7cba3823febabcbe4aaa8633bbc550444a" translate="yes" xml:space="preserve">
          <source>Unregisters a file handler.</source>
          <target state="translated">ファイルハンドラの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="74697c9d7cd4ab04d68ab2fdf2b669960bc37a75" translate="yes" xml:space="preserve">
          <source>Unsafe usage of the GIL</source>
          <target state="translated">GILの安全でない使い方</target>
        </trans-unit>
        <trans-unit id="fe99f3a697d86fd74d01d0ec29562a573d784a93" translate="yes" xml:space="preserve">
          <source>Unset (delete) the environment variable named &lt;em&gt;key&lt;/em&gt;. Such changes to the environment affect subprocesses started with &lt;a href=&quot;#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.popen&quot;&gt;&lt;code&gt;popen()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.fork&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.execv&quot;&gt;&lt;code&gt;execv()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;key&lt;/em&gt;という名前の環境変数を設定解除（削除）します。環境に対するこのような変更は、&lt;a href=&quot;#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.popen&quot;&gt; &lt;code&gt;popen()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#os.fork&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#os.execv&quot;&gt; &lt;code&gt;execv()&lt;/code&gt; で&lt;/a&gt;開始されたサブプロセスに影響します。</target>
        </trans-unit>
        <trans-unit id="8f11e903da2827da2ff494dc45518a52073a6deb" translate="yes" xml:space="preserve">
          <source>Unset the flag(s) specified by &lt;em&gt;flag&lt;/em&gt; without changing other flags. To remove more than one flag at a time, &lt;em&gt;flag&lt;/em&gt; maybe a string of more than one character.</source>
          <target state="translated">他のフラグを変更せずに、&lt;em&gt;flagで&lt;/em&gt;指定された&lt;em&gt;フラグの設定&lt;/em&gt;を解除します。一度に複数のフラグを削除するには、&lt;em&gt;フラグ&lt;/em&gt;に複数の文字の文字列を含めることができます。</target>
        </trans-unit>
        <trans-unit id="c9423b5564c4d3ab497eed5796bde589630c032b" translate="yes" xml:space="preserve">
          <source>Unset the flag(s) specified by &lt;em&gt;flag&lt;/em&gt; without changing other flags. To remove more than one flag at a time, &lt;em&gt;flag&lt;/em&gt; maybe a string of more than one character. If &amp;ldquo;info&amp;rdquo; contains experimental information rather than flags, the current &amp;ldquo;info&amp;rdquo; is not modified.</source>
          <target state="translated">他のフラグを変更せずに、&lt;em&gt;flagで&lt;/em&gt;指定された&lt;em&gt;フラグの設定&lt;/em&gt;を解除します。一度に複数のフラグを削除するには、&lt;em&gt;フラグ&lt;/em&gt;に複数の文字の文字列を含めることができます。「info」にフラグではなく実験的な情報が含まれている場合、現在の「info」は変更されません。</target>
        </trans-unit>
        <trans-unit id="8b5ce3b0587e5dfc574c05a997b77253d37b5a96" translate="yes" xml:space="preserve">
          <source>Unsigned, 16-bit big-endian audio</source>
          <target state="translated">未署名、16ビット・ビッグエンディアン・オーディオ</target>
        </trans-unit>
        <trans-unit id="3cf888094dce0dff5dc88fdc3a8fdf414a7518f5" translate="yes" xml:space="preserve">
          <source>Unsigned, 16-bit little-endian audio</source>
          <target state="translated">符号なし、16ビットリトルエンディアンオーディオ</target>
        </trans-unit>
        <trans-unit id="3a6c3f57facb20b402f0b1be0b10f27489e6c0cc" translate="yes" xml:space="preserve">
          <source>Unsigned, 8-bit audio</source>
          <target state="translated">無署名、8ビットオーディオ</target>
        </trans-unit>
        <trans-unit id="0eebb997e8491e1bc2700306d597290b18c9bdb9" translate="yes" xml:space="preserve">
          <source>Unsubscribe from old mailbox.</source>
          <target state="translated">古いメールボックスからの配信を解除します。</target>
        </trans-unit>
        <trans-unit id="d4c4c55a3d374ba63645f299181454728fde4b94" translate="yes" xml:space="preserve">
          <source>Untabify Region</source>
          <target state="translated">地域をアンタビファイ</target>
        </trans-unit>
        <trans-unit id="6124f32fdf4ba4b9425841e4026583849d20ed0f" translate="yes" xml:space="preserve">
          <source>Until Python 3.8, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; lacked a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Python 3.8まで、&lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;には&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt;メソッドがありませんでした。</target>
        </trans-unit>
        <trans-unit id="dfe20dc7f16ab68a7c4453b184c25a263736c687" translate="yes" xml:space="preserve">
          <source>Until Python 3.8, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; lacked a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Until Python 3.8, &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; lacked a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="2038bdec9210202d0d9d74839e3925ff0cd91ba1" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="translated">Up</target>
        </trans-unit>
        <trans-unit id="3b0b27ec87edd9e5b151e783684c3250b5138da3" translate="yes" xml:space="preserve">
          <source>Up to the prompt, the output from the above is:</source>
          <target state="translated">プロンプトまでは、上記の出力です。</target>
        </trans-unit>
        <trans-unit id="5c35290c06ff39f7f8240e3f8c98ffb7469e01ce" translate="yes" xml:space="preserve">
          <source>Up-arrow</source>
          <target state="translated">Up-arrow</target>
        </trans-unit>
        <trans-unit id="0a4cd8f9b0c49335833b73322f5129a273d0a57f" translate="yes" xml:space="preserve">
          <source>Update &lt;code id=&quot;index-3&quot;&gt;LINES&lt;/code&gt; and &lt;code id=&quot;index-4&quot;&gt;COLS&lt;/code&gt;. Useful for detecting manual screen resize.</source>
          <target state="translated">&lt;code id=&quot;index-3&quot;&gt;LINES&lt;/code&gt; と &lt;code id=&quot;index-4&quot;&gt;COLS&lt;/code&gt; を更新します。手動の画面サイズ変更を検出するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="6cc3833644a8b3574bfb4234d0fb0ff4bb3d0c1b" translate="yes" xml:space="preserve">
          <source>Update &lt;em&gt;environ&lt;/em&gt; with trivial defaults for testing purposes.</source>
          <target state="translated">テストのために、簡単なデフォルトで&lt;em&gt;環境&lt;/em&gt;を更新します。</target>
        </trans-unit>
        <trans-unit id="7d43ded4f21a448758ca9de774778892a8573fef" translate="yes" xml:space="preserve">
          <source>Update a &lt;em&gt;wrapper&lt;/em&gt; function to look like the &lt;em&gt;wrapped&lt;/em&gt; function. The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants &lt;code&gt;WRAPPER_ASSIGNMENTS&lt;/code&gt; (which assigns to the wrapper function&amp;rsquo;s &lt;code&gt;__module__&lt;/code&gt;, &lt;code&gt;__name__&lt;/code&gt;, &lt;code&gt;__qualname__&lt;/code&gt;, &lt;code&gt;__annotations__&lt;/code&gt; and &lt;code&gt;__doc__&lt;/code&gt;, the documentation string) and &lt;code&gt;WRAPPER_UPDATES&lt;/code&gt; (which updates the wrapper function&amp;rsquo;s &lt;code&gt;__dict__&lt;/code&gt;, i.e. the instance dictionary).</source>
          <target state="translated">&lt;em&gt;ラップされた&lt;/em&gt;関数のように見えるように&lt;em&gt;ラッパー&lt;/em&gt;関数を更新し&lt;em&gt;ます&lt;/em&gt;。オプションの引数は、元の関数のどの属性がラッパー関数の一致する属性に直接割り当てられ、ラッパー関数のどの属性が元の関数の対応する属性で更新されるかを指定するタプルです。これらの引数のデフォルト値は、モジュールレベルの定数です &lt;code&gt;WRAPPER_ASSIGNMENTS&lt;/code&gt; （ラッパー関数のに割り当てる &lt;code&gt;__module__&lt;/code&gt; 、 &lt;code&gt;__name__&lt;/code&gt; 、 &lt;code&gt;__qualname__&lt;/code&gt; 、 &lt;code&gt;__annotations__&lt;/code&gt; と &lt;code&gt;__doc__&lt;/code&gt; 、ドキュメンテーション文字列）と &lt;code&gt;WRAPPER_UPDATES&lt;/code&gt; &lt;em&gt;&lt;/em&gt;（ラッパー関数の &lt;code&gt;__dict__&lt;/code&gt; 、つまりインスタンスディクショナリを更新します）。</target>
        </trans-unit>
        <trans-unit id="c8eaa3caae0035d8d2b93d9ea5157036f5e890f4" translate="yes" xml:space="preserve">
          <source>Update and return a dictionary representing the current local symbol table. Free variables are returned by &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; when it is called in function blocks, but not in class blocks. Note that at the module level, &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; are the same dictionary.</source>
          <target state="translated">現在のローカルシンボルテーブルを表すディクショナリを更新して返します。自由変数は、関数ブロックで呼び出されたときに&lt;a href=&quot;#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt;によって返されますが、クラスブロックでは呼び出されません。モジュールレベルでは、&lt;a href=&quot;#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt;は同じ辞書です。</target>
        </trans-unit>
        <trans-unit id="6e881f9b576f8d197b4c916699604917c6bea3ff" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;is_authenticated&lt;/code&gt; flag for the given &lt;em&gt;uri&lt;/em&gt; or list of URIs.</source>
          <target state="translated">指定された&lt;em&gt;URI&lt;/em&gt;またはURIのリストの &lt;code&gt;is_authenticated&lt;/code&gt; フラグを更新します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="676722049af84191150c39b99ccf011847f430a6" translate="yes" xml:space="preserve">
          <source>Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window.</source>
          <target state="translated">ウィンドウのすべての祖先の現在のカーソル位置を更新して、ウィンドウの現在のカーソル位置を反映させます。</target>
        </trans-unit>
        <trans-unit id="6c67b9370f6773373a2ad4a9d82d3d4b78ed6025" translate="yes" xml:space="preserve">
          <source>Update the current file selection to &lt;em&gt;file&lt;/em&gt;.</source>
          <target state="translated">Update the current file selection to &lt;em&gt;file&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="919dc08005fb86feaa413a4235e9bce2c6e74486" translate="yes" xml:space="preserve">
          <source>Update the dictionary &lt;em&gt;d&lt;/em&gt; with keys and values from &lt;em&gt;other&lt;/em&gt;, which may be either a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; or an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of key/value pairs. The values of &lt;em&gt;other&lt;/em&gt; take priority when &lt;em&gt;d&lt;/em&gt; and &lt;em&gt;other&lt;/em&gt; share keys.</source>
          <target state="translated">Update the dictionary &lt;em&gt;d&lt;/em&gt; with keys and values from &lt;em&gt;other&lt;/em&gt;, which may be either a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; or an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of key/value pairs. The values of &lt;em&gt;other&lt;/em&gt; take priority when &lt;em&gt;d&lt;/em&gt; and &lt;em&gt;other&lt;/em&gt; share keys.</target>
        </trans-unit>
        <trans-unit id="7f52facdafd3c7b416be3ca2987e689c01a20aeb" translate="yes" xml:space="preserve">
          <source>Update the dictionary with the key/value pairs from &lt;em&gt;other&lt;/em&gt;, overwriting existing keys. Return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;他のの&lt;/em&gt;キーと値のペアで辞書を更新し、既存のキーを上書きします。 &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="844dd4fa8e5519fd020d3adb913a31ce577cec8e" translate="yes" xml:space="preserve">
          <source>Update the display immediately (sync actual screen with previous drawing/deleting methods).</source>
          <target state="translated">すぐに表示を更新する(実際の画面を前回の描画/削除方法と同期させる)。</target>
        </trans-unit>
        <trans-unit id="c72f3ad02a5bd1086e31aa55dc65f7726c021bb9" translate="yes" xml:space="preserve">
          <source>Update the hash object with the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a+b)&lt;/code&gt;.</source>
          <target state="translated">ハッシュオブジェクトを&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;で更新します。繰り返される呼び出しは、すべての引数を連結した単一の呼び出しと同等です &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; は &lt;code&gt;m.update(a+b)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="b9534f94ddfcd737e337a0d4a5d2e9412c424077" translate="yes" xml:space="preserve">
          <source>Update the hash object with the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a+b)&lt;/code&gt;.</source>
          <target state="translated">Update the hash object with the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a+b)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64c77d232184003c8e5ef8dfe4a062a6ffc29da4" translate="yes" xml:space="preserve">
          <source>Update the hmac object with &lt;em&gt;msg&lt;/em&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a + b)&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;msgで&lt;/em&gt; hmacオブジェクトを更新します。繰り返される呼び出しは、すべての引数を連結した単一の呼び出しと同等です &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; は &lt;code&gt;m.update(a + b)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="49fcb28da96252d3143add7d524b059fc11f4dbf" translate="yes" xml:space="preserve">
          <source>Update the physical screen. The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state. The &lt;a href=&quot;#curses.doupdate&quot;&gt;&lt;code&gt;doupdate()&lt;/code&gt;&lt;/a&gt; ground updates the physical screen to match the virtual screen.</source>
          <target state="translated">物理画面を更新します。cursesライブラリーは2つのデータ構造を保持します。1つは現在の物理画面の内容を表し、1つは望ましい次の状態を表す仮想画面を表します。&lt;a href=&quot;#curses.doupdate&quot;&gt; &lt;code&gt;doupdate()&lt;/code&gt; &lt;/a&gt;地面には、仮想画面に一致するように物理的な画面を更新します。</target>
        </trans-unit>
        <trans-unit id="916502e64e45e8917403b3f7e2e4cb9240ec037b" translate="yes" xml:space="preserve">
          <source>Update the set, adding elements from all others.</source>
          <target state="translated">他のすべての要素を追加して、セットを更新します。</target>
        </trans-unit>
        <trans-unit id="ac6527f15e4975da015ccaa43d3d4bfa51b09597" translate="yes" xml:space="preserve">
          <source>Update the set, keeping only elements found in either set, but not in both.</source>
          <target state="translated">セットを更新し、どちらか一方のセットで見つかった要素だけを保持しますが、両方では見つかりません。</target>
        </trans-unit>
        <trans-unit id="1efb006f7c16e37178e13286e3116f97a446042c" translate="yes" xml:space="preserve">
          <source>Update the set, keeping only elements found in it and all others.</source>
          <target state="translated">セットを更新し、その中で見つかった要素だけを保持し、他のすべての要素を保持します。</target>
        </trans-unit>
        <trans-unit id="e5f938e1032dfc279fd2d4c9bbde2ed0d316e18d" translate="yes" xml:space="preserve">
          <source>Update the set, removing elements found in others.</source>
          <target state="translated">セットを更新し、他の人に見つかった要素を削除します。</target>
        </trans-unit>
        <trans-unit id="8f6ad5a4c112a979bb39e0daf27f6f78eab18230" translate="yes" xml:space="preserve">
          <source>Update the values in the Morsel dictionary with the values in the dictionary &lt;em&gt;values&lt;/em&gt;. Raise an error if any of the keys in the &lt;em&gt;values&lt;/em&gt; dict is not a valid &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">Morselディクショナリの値をディクショナリ値の値で更新し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;値&lt;/em&gt;辞書のキーのいずれかが有効な&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt;属性ではない場合、エラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="403f8c83e34150e4e050e7802c9ae3b5c02baa0b" translate="yes" xml:space="preserve">
          <source>Updates the virtual screen after changes in the panel stack. This does not call &lt;a href=&quot;curses#curses.doupdate&quot;&gt;&lt;code&gt;curses.doupdate()&lt;/code&gt;&lt;/a&gt;, so you&amp;rsquo;ll have to do this yourself.</source>
          <target state="translated">パネルスタックの変更後に仮想画面を更新します。これは&lt;a href=&quot;curses#curses.doupdate&quot;&gt; &lt;code&gt;curses.doupdate()&lt;/code&gt; を&lt;/a&gt;呼び出さないので、自分で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="5fbbdb84597aa8a194e7826194c031e681da3e5b" translate="yes" xml:space="preserve">
          <source>Updating Code For New Versions of Dependencies</source>
          <target state="translated">新しいバージョンの依存関係のコードを更新する</target>
        </trans-unit>
        <trans-unit id="6cfc0fe1e7552b2208957be5568c4b831410776d" translate="yes" xml:space="preserve">
          <source>Upgrade an existing connection to TLS.</source>
          <target state="translated">既存の接続をTLSにアップグレードします。</target>
        </trans-unit>
        <trans-unit id="c033cfa69d72d0506f0739c3dd946dac4f60d820" translate="yes" xml:space="preserve">
          <source>Upgrade an existing transport-based connection to TLS.</source>
          <target state="translated">既存のトランスポートベースの接続をTLSにアップグレードします。</target>
        </trans-unit>
        <trans-unit id="8e7085c36826f39b955d3407ed1c8e8be7dce597" translate="yes" xml:space="preserve">
          <source>Upgrades the core venv dependency packages (currently &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt;) in the environment. This is done by shelling out to the &lt;code&gt;pip&lt;/code&gt; executable in the environment.</source>
          <target state="translated">Upgrades the core venv dependency packages (currently &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt; ) in the environment. This is done by shelling out to the &lt;code&gt;pip&lt;/code&gt; executable in the environment.</target>
        </trans-unit>
        <trans-unit id="93c2d8026e88b79d364deb29293028e59014ecd4" translate="yes" xml:space="preserve">
          <source>Upgrading optparse code</source>
          <target state="translated">optparseコードのアップグレード</target>
        </trans-unit>
        <trans-unit id="6885989b161691127084226c65d60813ef15d1e3" translate="yes" xml:space="preserve">
          <source>Upon startup with the &lt;code&gt;-s&lt;/code&gt; option, IDLE will execute the file referenced by the environment variables &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt;. IDLE first checks for &lt;code&gt;IDLESTARTUP&lt;/code&gt;; if &lt;code&gt;IDLESTARTUP&lt;/code&gt; is present the file referenced is run. If &lt;code&gt;IDLESTARTUP&lt;/code&gt; is not present, IDLE checks for &lt;code&gt;PYTHONSTARTUP&lt;/code&gt;. Files referenced by these environment variables are convenient places to store functions that are used frequently from the IDLE shell, or for executing import statements to import common modules.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; オプションを指定して起動すると、IDLEは環境変数 &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; または&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; &lt;/a&gt;によって参照されるファイルを実行します。 IDLEは最初に &lt;code&gt;IDLESTARTUP&lt;/code&gt; をチェックします。 &lt;code&gt;IDLESTARTUP&lt;/code&gt; が存在する場合、参照されているファイルが実行されます。場合 &lt;code&gt;IDLESTARTUP&lt;/code&gt; がために存在していない、IDLEチェック &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; 。これらの環境変数によって参照されるファイルは、IDLEシェルから頻繁に使用される関数を格納したり、インポートステートメントを実行して共通モジュールをインポートしたりするのに便利な場所です。</target>
        </trans-unit>
        <trans-unit id="d3381a97387d24f932c2e625415ecf85f4dee6af" translate="yes" xml:space="preserve">
          <source>Upon startup with the &lt;code&gt;-s&lt;/code&gt; option, IDLE will execute the file referenced by the environment variables &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt;. IDLE first checks for &lt;code&gt;IDLESTARTUP&lt;/code&gt;; if &lt;code&gt;IDLESTARTUP&lt;/code&gt; is present the file referenced is run. If &lt;code&gt;IDLESTARTUP&lt;/code&gt; is not present, IDLE checks for &lt;code&gt;PYTHONSTARTUP&lt;/code&gt;. Files referenced by these environment variables are convenient places to store functions that are used frequently from the IDLE shell, or for executing import statements to import common modules.</source>
          <target state="translated">Upon startup with the &lt;code&gt;-s&lt;/code&gt; option, IDLE will execute the file referenced by the environment variables &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; &lt;/a&gt;. IDLE first checks for &lt;code&gt;IDLESTARTUP&lt;/code&gt; ; if &lt;code&gt;IDLESTARTUP&lt;/code&gt; is present the file referenced is run. If &lt;code&gt;IDLESTARTUP&lt;/code&gt; is not present, IDLE checks for &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; . Files referenced by these environment variables are convenient places to store functions that are used frequently from the IDLE shell, or for executing import statements to import common modules.</target>
        </trans-unit>
        <trans-unit id="ceeef23b43f204cd4fc87f8a0c602258f435ad5b" translate="yes" xml:space="preserve">
          <source>Upon unpickling, if the class defines &lt;a href=&quot;#object.__setstate__&quot;&gt;&lt;code&gt;__setstate__()&lt;/code&gt;&lt;/a&gt;, it is called with the unpickled state. In that case, there is no requirement for the state object to be a dictionary. Otherwise, the pickled state must be a dictionary and its items are assigned to the new instance&amp;rsquo;s dictionary.</source>
          <target state="translated">&lt;a href=&quot;#object.__setstate__&quot;&gt; &lt;code&gt;__setstate__()&lt;/code&gt; &lt;/a&gt;時に、クラスが__setstate __（）を定義している場合、アンピックル状態で呼び出されます。その場合、状態オブジェクトが辞書である必要はありません。それ以外の場合、ピクル状態はディクショナリである必要があり、そのアイテムは新しいインスタンスのディクショナリに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="442c0ca432bba7bb5e9fddb35000be1fc0080e00" translate="yes" xml:space="preserve">
          <source>Upper left of keypad</source>
          <target state="translated">キーパッドの左上</target>
        </trans-unit>
        <trans-unit id="26be040f98d4f92519d4f55adbafdaf27d0bf91c" translate="yes" xml:space="preserve">
          <source>Upper right of keypad</source>
          <target state="translated">キーパッドの右上</target>
        </trans-unit>
        <trans-unit id="5d6984e58af99ef5098428fe251573a59542bd1a" translate="yes" xml:space="preserve">
          <source>Upper-left corner</source>
          <target state="translated">左上隅</target>
        </trans-unit>
        <trans-unit id="f899c21125a124680149002a215b010390a14035" translate="yes" xml:space="preserve">
          <source>Upper-right corner</source>
          <target state="translated">右上隅</target>
        </trans-unit>
        <trans-unit id="412e31909b8ad1417c4a39495653fdeba58cd034" translate="yes" xml:space="preserve">
          <source>Urdu</source>
          <target state="translated">Urdu</target>
        </trans-unit>
        <trans-unit id="6c0f6c90b039eb2f8ccf225a7eea7326a1231177" translate="yes" xml:space="preserve">
          <source>Urgent data for read</source>
          <target state="translated">読み込み用の緊急データ</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="c54d06d3411c536072cc47249dd128a605cc382d" translate="yes" xml:space="preserve">
          <source>Usage as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;デコレータ&lt;/a&gt;としての使い方：</target>
        </trans-unit>
        <trans-unit id="d47d72011e547326fb4d40672ef000db79836cb3" translate="yes" xml:space="preserve">
          <source>Usage as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</source>
          <target state="translated">Usage as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="8e06c218123ecda4e08d6b8f0a242dd0c07ffde1" translate="yes" xml:space="preserve">
          <source>Usage example: &lt;code&gt;fi =
fileinput.FileInput(openhook=fileinput.hook_encoded(&quot;utf-8&quot;,
&quot;surrogateescape&quot;))&lt;/code&gt;</source>
          <target state="translated">使用例： &lt;code&gt;fi = fileinput.FileInput(openhook=fileinput.hook_encoded(&quot;utf-8&quot;, &quot;surrogateescape&quot;))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23a84570fc52dfd991c6774587f13dbfa3c6b304" translate="yes" xml:space="preserve">
          <source>Usage example: &lt;code&gt;fi = fileinput.FileInput(openhook=fileinput.hook_compressed)&lt;/code&gt;</source>
          <target state="translated">使用例： &lt;code&gt;fi = fileinput.FileInput(openhook=fileinput.hook_compressed)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30417f716d6267476ad9fad028a2fc6e463880c9" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;KabulTz&lt;/code&gt; from above:</source>
          <target state="translated">上からの &lt;code&gt;KabulTz&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="fd2184f1d367ba383d26c0e300960fadb0d8272b" translate="yes" xml:space="preserve">
          <source>Usage of the DOM interface in Python is straight-forward. The following mapping rules apply:</source>
          <target state="translated">Python での DOM インタフェースの使用法は簡単です。以下のマッピングルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="4b1f7ccf5dd79f8ee16571bf32c1e6c4007733ce" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#asyncio.WriteTransport.get_write_buffer_limits&quot;&gt;&lt;code&gt;get_write_buffer_limits()&lt;/code&gt;&lt;/a&gt; to get the limits.</source>
          <target state="translated">制限を取得するには、&lt;a href=&quot;#asyncio.WriteTransport.get_write_buffer_limits&quot;&gt; &lt;code&gt;get_write_buffer_limits()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="0bcdd77ca18769c76d2f648e31dbca518354ce9b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#asyncio.WriteTransport.set_write_buffer_limits&quot;&gt;&lt;code&gt;set_write_buffer_limits()&lt;/code&gt;&lt;/a&gt; to set the limits.</source>
          <target state="translated">制限を設定するには、&lt;a href=&quot;#asyncio.WriteTransport.set_write_buffer_limits&quot;&gt; &lt;code&gt;set_write_buffer_limits()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="5ff19ffa16005ed393bb50a2fc301ae7c8434921" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt;&lt;code&gt;communicate()&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;#subprocess.Popen.stdin&quot;&gt;&lt;code&gt;.stdin.write&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#subprocess.Popen.stdout&quot;&gt;&lt;code&gt;.stdout.read&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#subprocess.Popen.stderr&quot;&gt;&lt;code&gt;.stderr.read&lt;/code&gt;&lt;/a&gt; to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process.</source>
          <target state="translated">&lt;a href=&quot;#subprocess.Popen.stdin&quot;&gt; &lt;code&gt;.stdin.write&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#subprocess.Popen.stdout&quot;&gt; &lt;code&gt;.stdout.read&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#subprocess.Popen.stderr&quot;&gt; &lt;code&gt;.stderr.read&lt;/code&gt; &lt;/a&gt;ではなく、&lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt; &lt;code&gt;communicate()&lt;/code&gt; &lt;/a&gt;使用して、他のOSパイプバッファーがいっぱいになり、子プロセスがブロックされることによるデッドロックを回避します。</target>
        </trans-unit>
        <trans-unit id="dd81adbbc79cd205fc1bc2737ce1e2085e7810fe" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#tokenize.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to open Python source files: it uses &lt;a href=&quot;#tokenize.detect_encoding&quot;&gt;&lt;code&gt;detect_encoding()&lt;/code&gt;&lt;/a&gt; to detect the file encoding.</source>
          <target state="translated">&lt;a href=&quot;#tokenize.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;を使用してPythonソースファイルを開きます。これは、&lt;a href=&quot;#tokenize.detect_encoding&quot;&gt; &lt;code&gt;detect_encoding()&lt;/code&gt; &lt;/a&gt;を使用してファイルのエンコーディングを検出します。</target>
        </trans-unit>
        <trans-unit id="b5b266fadd2e7245f37c616a8922563663fb3b4d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; to reload the snapshot.</source>
          <target state="translated">&lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;を使用してスナップショットを再ロードします。</target>
        </trans-unit>
        <trans-unit id="5773877b49b43db6bf7c94187009bb8144711130" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; as the value if you want &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; to create mocks for you. In this case the created mocks are passed into a decorated function by keyword, and a dictionary is returned when &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; is used as a context manager.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; で&lt;/a&gt;モックを作成する場合は、値として&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;を使用します。この場合、作成されたモックはキーワードによって修飾された関数に渡され、&lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; &lt;/a&gt;がコンテキストマネージャーとして使用されると、ディクショナリが返されます。</target>
        </trans-unit>
        <trans-unit id="801ec70715ed39b5c5c242a01eb2e137022a3645" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; to indicate that a value could be any type in a typesafe manner. Use &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; to indicate that a value is dynamically typed.</source>
          <target state="translated">&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;を使用して、値がタイプセーフな方法で任意のタイプになることを示します。&lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt;を使用して、値が動的に型指定されることを示します。</target>
        </trans-unit>
        <trans-unit id="4d55b6e9ca90a032f6af3085cee74e97a5a82792" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.cmp_to_key&quot;&gt;&lt;code&gt;functools.cmp_to_key()&lt;/code&gt;&lt;/a&gt; to convert an old-style &lt;em&gt;cmp&lt;/em&gt; function to a &lt;em&gt;key&lt;/em&gt; function.</source>
          <target state="translated">使用&lt;a href=&quot;functools#functools.cmp_to_key&quot;&gt; &lt;code&gt;functools.cmp_to_key()&lt;/code&gt; &lt;/a&gt;古いスタイルの変換するため&lt;em&gt;のCMP&lt;/em&gt;に関数を&lt;em&gt;キー&lt;/em&gt;機能。</target>
        </trans-unit>
        <trans-unit id="0ae804c4e2566a021e2b7df1cb5f86d33af4f596" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;to pass keyword arguments&lt;/a&gt; to &lt;em&gt;callback&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;functools#functools.partial&quot;&gt; &lt;code&gt;functools.partial()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;を&lt;/a&gt;使用して、キーワード引数を&lt;em&gt;callback &lt;/em&gt;に渡し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7faa606e98b27a2cbd434b59751dcf554bb80399" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;to pass keyword arguments&lt;/a&gt; to &lt;em&gt;func&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;functools#functools.partial&quot;&gt; &lt;code&gt;functools.partial()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;を&lt;/a&gt;使用して、キーワード引数を&lt;em&gt;func &lt;/em&gt;に渡します。</target>
        </trans-unit>
        <trans-unit id="caa6b6a91146066a6ab2e2391258412526412a60" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;importlib#importlib.util.module_from_spec&quot;&gt;&lt;code&gt;importlib.util.module_from_spec()&lt;/code&gt;&lt;/a&gt; to create a new module if you wish to set the various import-controlled attributes.</source>
          <target state="translated">使用&lt;a href=&quot;importlib#importlib.util.module_from_spec&quot;&gt; &lt;code&gt;importlib.util.module_from_spec()&lt;/code&gt; &lt;/a&gt;あなたは、様々な輸入制御の属性を設定したい場合は、新しいモジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="6be4f4ccdec4c24fadfe09779a33e3199c2a99e4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;math#math.ulp&quot;&gt;&lt;code&gt;math.ulp(0.0)&lt;/code&gt;&lt;/a&gt; to get the smallest positive &lt;em&gt;denormalized&lt;/em&gt; representable float.</source>
          <target state="translated">Use &lt;a href=&quot;math#math.ulp&quot;&gt; &lt;code&gt;math.ulp(0.0)&lt;/code&gt; &lt;/a&gt; to get the smallest positive &lt;em&gt;denormalized&lt;/em&gt; representable float.</target>
        </trans-unit>
        <trans-unit id="92571159e076392f54e9a058f2068114f55f5d84" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;pickletools#pickletools.optimize&quot;&gt;&lt;code&gt;pickletools.optimize()&lt;/code&gt;&lt;/a&gt; if you need more compact pickles.</source>
          <target state="translated">よりコンパクトな&lt;a href=&quot;pickletools#pickletools.optimize&quot;&gt; &lt;code&gt;pickletools.optimize()&lt;/code&gt; &lt;/a&gt;が必要な場合は、pickletools.optimize（）を使用してください。</target>
        </trans-unit>
        <trans-unit id="977759ccf7fc3d35b1728ab61d457345039786ef" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;threading#threading.get_ident&quot;&gt;&lt;code&gt;threading.get_ident()&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;threading#threading.Thread.ident&quot;&gt;&lt;code&gt;ident&lt;/code&gt;&lt;/a&gt; attribute of &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt; objects to get a suitable value for &lt;em&gt;thread_id&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;threading#threading.get_ident&quot;&gt; &lt;code&gt;threading.get_ident()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;threading#threading.Thread&quot;&gt; &lt;code&gt;threading.Thread&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;threading#threading.Thread.ident&quot;&gt; &lt;code&gt;ident&lt;/code&gt; &lt;/a&gt;属性を使用して、&lt;em&gt;thread_idの&lt;/em&gt;適切な値を&lt;em&gt;取得し&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4f310326200524afa7764d68027ab6eeaeafc777" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Text&lt;/code&gt; to indicate that a value must contain a unicode string in a manner that is compatible with both Python 2 and Python 3:</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; を使用して、Python 2とPython 3の両方と互換性のある方法でUnicode文字列を値に含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="fea35a235eec9b227adb5fcb0a0c00435b41bfcb" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;N&lt;/em&gt; workers to compile the files within the given directory. If &lt;code&gt;0&lt;/code&gt; is used, then the result of &lt;a href=&quot;os#os.cpu_count&quot;&gt;&lt;code&gt;os.cpu_count()&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">&lt;em&gt;N個の&lt;/em&gt;ワーカーを使用して、指定されたディレクトリ内のファイルをコンパイルします。場合 &lt;code&gt;0&lt;/code&gt; が使用され、その後の結果&lt;a href=&quot;os#os.cpu_count&quot;&gt; &lt;code&gt;os.cpu_count()&lt;/code&gt; が&lt;/a&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="495d495d7facfbe6f23a76a082fc3a5f0950c5d6" translate="yes" xml:space="preserve">
          <source>Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.</source>
          <target state="translated">POP3サーバにログインするにはRPOP認証(UNIXのrコマンドに似ています)を使用します。</target>
        </trans-unit>
        <trans-unit id="f4e7f3e06376e3f4d8475ec58362eb2b2060abb3" translate="yes" xml:space="preserve">
          <source>Use a comma-separated list of &lt;code&gt;key: value&lt;/code&gt; pairs within braces: &lt;code&gt;{'jack': 4098, 'sjoerd': 4127}&lt;/code&gt; or &lt;code&gt;{4098: 'jack', 4127: 'sjoerd'}&lt;/code&gt;</source>
          <target state="translated">Use a comma-separated list of &lt;code&gt;key: value&lt;/code&gt; pairs within braces: &lt;code&gt;{'jack': 4098, 'sjoerd': 4127}&lt;/code&gt; or &lt;code&gt;{4098: 'jack', 4127: 'sjoerd'}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a14a9c5d9439258788566c63ffdb820f13b119c1" translate="yes" xml:space="preserve">
          <source>Use a comma-separated list of elements within braces: &lt;code&gt;{'jack', 'sjoerd'}&lt;/code&gt;</source>
          <target state="translated">Use a comma-separated list of elements within braces: &lt;code&gt;{'jack', 'sjoerd'}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ca50d93aa7b66037fe8330b7c294589afa919be" translate="yes" xml:space="preserve">
          <source>Use a dict comprehension: &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;{x: x ** 2 for x in range(10)}&lt;/code&gt;</source>
          <target state="translated">Use a dict comprehension: &lt;code&gt;{}&lt;/code&gt; , &lt;code&gt;{x: x ** 2 for x in range(10)}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a5be9a59141dd9bb7d182b14d93b2b1bd339016" translate="yes" xml:space="preserve">
          <source>Use a set comprehension: &lt;code&gt;{c for c in 'abracadabra' if c not in 'abc'}&lt;/code&gt;</source>
          <target state="translated">Use a set comprehension: &lt;code&gt;{c for c in 'abracadabra' if c not in 'abc'}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38ed25f85936d5ec93f7f6baaff0782bf76ef725" translate="yes" xml:space="preserve">
          <source>Use and behaviors of the &lt;em&gt;timeout&lt;/em&gt; argument are the same as in &lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt;&lt;code&gt;Lock.acquire()&lt;/code&gt;&lt;/a&gt;. Note that some of these behaviors of &lt;em&gt;timeout&lt;/em&gt; differ from the implemented behaviors in &lt;a href=&quot;threading#threading.RLock.acquire&quot;&gt;&lt;code&gt;threading.RLock.acquire()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;timeout&lt;/em&gt;引数の使用法と動作は、&lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt; &lt;code&gt;Lock.acquire()&lt;/code&gt; &lt;/a&gt;と同じです。これらの&lt;em&gt;タイムアウトの&lt;/em&gt;動作の一部は、&lt;a href=&quot;threading#threading.RLock.acquire&quot;&gt; &lt;code&gt;threading.RLock.acquire()&lt;/code&gt; に&lt;/a&gt;実装されている動作とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b8f6b7836c3c9781322ac632c3472944cbf5882e" translate="yes" xml:space="preserve">
          <source>Use of Basic HTTP Authentication:</source>
          <target state="translated">基本的なHTTP認証の利用</target>
        </trans-unit>
        <trans-unit id="06b1cfba601081732eb4d25b9f84434e8e55c28d" translate="yes" xml:space="preserve">
          <source>Use of a configuration file where logging configuration is just part of the overall application configuration.</source>
          <target state="translated">ロギング設定がアプリケーション全体の設定の一部である設定ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="a7aa6e5161d91c7285f5b1ed3868d5a6211a2320" translate="yes" xml:space="preserve">
          <source>Use of a configuration read from a file, and then modified by the using application (e.g. based on command-line parameters or other aspects of the runtime environment) before being passed to &lt;code&gt;fileConfig&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileConfig&lt;/code&gt; に渡される前に、ファイルから読み取られ、使用中のアプリケーションによって（たとえば、コマンドラインパラメーターまたはランタイム環境の他の側面に基づいて）変更された構成の使用。</target>
        </trans-unit>
        <trans-unit id="28af66b770f56fa6175a1ed4bd8aca50a0212688" translate="yes" xml:space="preserve">
          <source>Use of the &lt;em&gt;requote&lt;/em&gt; parameter with &lt;a href=&quot;#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects is deprecated.</source>
          <target state="translated">使用&lt;em&gt;requoteを&lt;/em&gt;持つパラメータ&lt;a href=&quot;#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のは&lt;/a&gt;推奨されませんオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f8807a8f268cd5a3fec930a6e701e4eec1a5a268" translate="yes" xml:space="preserve">
          <source>Use of the functions above is more portable than use of the first set of flags:</source>
          <target state="translated">上記機能の使用は、最初のフラグのセットを使用するよりも移植性が高い。</target>
        </trans-unit>
        <trans-unit id="0ee11de24afff11a85727ddbffb864bb44227fcd" translate="yes" xml:space="preserve">
          <source>Use of this function may introduce a security hole in your program. By the time you get around to doing anything with the file name it returns, someone else may have beaten you to the punch. &lt;a href=&quot;#tempfile.mktemp&quot;&gt;&lt;code&gt;mktemp()&lt;/code&gt;&lt;/a&gt; usage can be replaced easily with &lt;a href=&quot;#tempfile.NamedTemporaryFile&quot;&gt;&lt;code&gt;NamedTemporaryFile()&lt;/code&gt;&lt;/a&gt;, passing it the &lt;code&gt;delete=False&lt;/code&gt; parameter:</source>
          <target state="translated">この関数を使用すると、プログラムにセキュリティホールが生じる可能性があります。返されたファイル名を使って何でもできるようになるまでに、他の誰かがあなたを殴り倒したのかもしれません。&lt;a href=&quot;#tempfile.mktemp&quot;&gt; &lt;code&gt;mktemp()&lt;/code&gt; の&lt;/a&gt;使用法は、&lt;a href=&quot;#tempfile.NamedTemporaryFile&quot;&gt; &lt;code&gt;NamedTemporaryFile()&lt;/code&gt; に&lt;/a&gt;簡単に置き換えることができ、それに &lt;code&gt;delete=False&lt;/code&gt; パラメーターを渡します。</target>
        </trans-unit>
        <trans-unit id="f802f95d5b72b7e3d461f9294f782b8fe070b88f" translate="yes" xml:space="preserve">
          <source>Use of this setting requires a valid set of CA certificates to be passed, either to &lt;a href=&quot;#ssl.SSLContext.load_verify_locations&quot;&gt;&lt;code&gt;SSLContext.load_verify_locations()&lt;/code&gt;&lt;/a&gt; or as a value of the &lt;code&gt;ca_certs&lt;/code&gt; parameter to &lt;a href=&quot;#ssl.wrap_socket&quot;&gt;&lt;code&gt;wrap_socket()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この設定の使用のいずれかに、渡されるCA証明書の有効なセットを必要とする&lt;a href=&quot;#ssl.SSLContext.load_verify_locations&quot;&gt; &lt;code&gt;SSLContext.load_verify_locations()&lt;/code&gt; &lt;/a&gt;またはの値として &lt;code&gt;ca_certs&lt;/code&gt; のにパラメータ&lt;a href=&quot;#ssl.wrap_socket&quot;&gt; &lt;code&gt;wrap_socket()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="086661bc0d18c4e4d7976acf67e710dca98ca570" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.communicate&quot;&gt;&lt;code&gt;communicate()&lt;/code&gt;&lt;/a&gt; method rather than &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdin&quot;&gt;&lt;code&gt;process.stdin.write()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdout&quot;&gt;&lt;code&gt;await process.stdout.read()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stderr&quot;&gt;&lt;code&gt;await process.stderr.read&lt;/code&gt;&lt;/a&gt;. This avoids deadlocks due to streams pausing reading or writing and blocking the child process.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdin&quot;&gt; &lt;code&gt;process.stdin.write()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdout&quot;&gt; &lt;code&gt;await process.stdout.read()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stderr&quot;&gt; &lt;code&gt;await process.stderr.read&lt;/code&gt; &lt;/a&gt;ではなく、&lt;a href=&quot;#asyncio.asyncio.subprocess.Process.communicate&quot;&gt; &lt;code&gt;communicate()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。これにより、読み取りまたは書き込みを一時停止し、子プロセスをブロックするストリームによるデッドロックが回避されます。</target>
        </trans-unit>
        <trans-unit id="15cd98149cc9f937cb92cf3ef933c1d25a1d0470" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#typing.NewType&quot;&gt;&lt;code&gt;NewType()&lt;/code&gt;&lt;/a&gt; helper function to create distinct types:</source>
          <target state="translated">&lt;a href=&quot;#typing.NewType&quot;&gt; &lt;code&gt;NewType()&lt;/code&gt; &lt;/a&gt;ヘルパー関数を使用して、特殊タイプを作成します。</target>
        </trans-unit>
        <trans-unit id="fa0f4760d676107d72f2532d197197a7035768be" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function (with the &lt;code&gt;doseq&lt;/code&gt; parameter set to &lt;code&gt;True&lt;/code&gt;) to convert such dictionaries into query strings.</source>
          <target state="translated">&lt;a href=&quot;#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt;関数を使用して（ &lt;code&gt;doseq&lt;/code&gt; パラメーターを &lt;code&gt;True&lt;/code&gt; に設定して）、このような辞書をクエリ文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="e77864b913c6ed2d3f7946296e1c4dd7eaea83b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function to convert such lists of pairs into query strings.</source>
          <target state="translated">&lt;a href=&quot;#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt;関数を使用して、このようなペアのリストをクエリ文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="624745c3dc94a2bef660c402897876197714f9db" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W error&lt;/code&gt;&lt;/a&gt; command line option or set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;error&lt;/code&gt; to treat warnings as errors.</source>
          <target state="translated">Use the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W error&lt;/code&gt; &lt;/a&gt; command line option or set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;error&lt;/code&gt; to treat warnings as errors.</target>
        </trans-unit>
        <trans-unit id="ebe5f8c7c68a5eb4c363855f9e618e8fc09e455f" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;headers&lt;/em&gt; argument to the &lt;a href=&quot;#urllib.request.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; constructor, or:</source>
          <target state="translated">&lt;a href=&quot;#urllib.request.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;コンストラクターに&lt;em&gt;headers&lt;/em&gt;引数を使用するか、または：</target>
        </trans-unit>
        <trans-unit id="397b1bdc25c901492de8340e267b2d32924dd46a" translate="yes" xml:space="preserve">
          <source>Use the config() method to update multiple attrs subsequent to object creation</source>
          <target state="translated">config()メソッドを使用して、オブジェクト作成後に複数の attr を更新します。</target>
        </trans-unit>
        <trans-unit id="269f723392451288e2d733a8ac1b951a0f732cfc" translate="yes" xml:space="preserve">
          <source>Use the following functions to convert between time representations:</source>
          <target state="translated">時間表現間の変換には、以下の関数を使用します。</target>
        </trans-unit>
        <trans-unit id="8b0e3f6f824fb870d980396594c6ee74a24533bb" translate="yes" xml:space="preserve">
          <source>Use the high median when your data are discrete and you prefer the median to be an actual data point rather than interpolated.</source>
          <target state="translated">データが離散的で、中央値が補間ではなく実際のデータポイントであることを好む場合は、高い中央値を使用します。</target>
        </trans-unit>
        <trans-unit id="cc76d8aaa9d87f83107351e712614efa5b9a4366" translate="yes" xml:space="preserve">
          <source>Use the high-level &lt;a href=&quot;#asyncio.create_task&quot;&gt;&lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/a&gt; function to create Tasks, or the low-level &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_task&quot;&gt;&lt;code&gt;loop.create_task()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-future#asyncio.ensure_future&quot;&gt;&lt;code&gt;ensure_future()&lt;/code&gt;&lt;/a&gt; functions. Manual instantiation of Tasks is discouraged.</source>
          <target state="translated">高レベルの使用&lt;a href=&quot;#asyncio.create_task&quot;&gt; &lt;code&gt;asyncio.create_task()&lt;/code&gt; &lt;/a&gt;タスク、または低レベル作成する機能を&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_task&quot;&gt; &lt;code&gt;loop.create_task()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-future#asyncio.ensure_future&quot;&gt; &lt;code&gt;ensure_future()&lt;/code&gt; &lt;/a&gt;関数を。タスクを手動でインスタンス化することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="ac8913b6579e52d49bb894464f33a8f70139a5e9" translate="yes" xml:space="preserve">
          <source>Use the low median when your data are discrete and you prefer the median to be an actual data point rather than interpolated.</source>
          <target state="translated">データが離散的で、中央値が補間ではなく実際のデータポイントであることを好む場合は、低い中央値を使用します。</target>
        </trans-unit>
        <trans-unit id="38fc6d08600772eccde5630b8b2095c84488dee1" translate="yes" xml:space="preserve">
          <source>Use the more secure APOP authentication to log into the POP3 server.</source>
          <target state="translated">POP3サーバにログインするには、より安全なAPOP認証を使用します。</target>
        </trans-unit>
        <trans-unit id="0c2845b8ec29e4c6963ceba130325e617d9cc8d5" translate="yes" xml:space="preserve">
          <source>Use the real uid/gid to test for access to &lt;em&gt;path&lt;/em&gt;. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to &lt;em&gt;path&lt;/em&gt;. &lt;em&gt;mode&lt;/em&gt; should be &lt;a href=&quot;#os.F_OK&quot;&gt;&lt;code&gt;F_OK&lt;/code&gt;&lt;/a&gt; to test the existence of &lt;em&gt;path&lt;/em&gt;, or it can be the inclusive OR of one or more of &lt;a href=&quot;#os.R_OK&quot;&gt;&lt;code&gt;R_OK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.W_OK&quot;&gt;&lt;code&gt;W_OK&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.X_OK&quot;&gt;&lt;code&gt;X_OK&lt;/code&gt;&lt;/a&gt; to test permissions. Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if access is allowed, &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; if not. See the Unix man page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/access(2)&quot;&gt;access(2)&lt;/a&gt;&lt;/em&gt; for more information.</source>
          <target state="translated">実際のuid / gidを使用して、&lt;em&gt;パス&lt;/em&gt;へのアクセスをテストします。ほとんどの操作は有効なuid / gidを使用するため、このルーチンをsuid / sgid環境で使用して、呼び出し側のユーザーが&lt;em&gt;path&lt;/em&gt;への指定されたアクセス権を持っているかどうかをテストでき&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;mode&lt;/em&gt;は、&lt;em&gt;path&lt;/em&gt;の存在をテストする場合は&lt;a href=&quot;#os.F_OK&quot;&gt; &lt;code&gt;F_OK&lt;/code&gt; に&lt;/a&gt;する必要があり&lt;em&gt;ます&lt;/em&gt;。または、権限をテストする場合は、&lt;a href=&quot;#os.R_OK&quot;&gt; &lt;code&gt;R_OK&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.W_OK&quot;&gt; &lt;code&gt;W_OK&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#os.X_OK&quot;&gt; &lt;code&gt;X_OK&lt;/code&gt; &lt;/a&gt;の1つ以上の包含ORにすることができます。アクセスが許可されている場合は&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; を&lt;/a&gt;、許可されていない場合は&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; を&lt;/a&gt;返します。詳細については、Unixのmanページ&lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/access(2)&quot;&gt;access（2）&lt;/a&gt;&lt;/em&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="62d360059b352a3db9e680b1043a8ec5f3406a4a" translate="yes" xml:space="preserve">
          <source>Use the server&amp;rsquo;s cipher ordering preference, rather than the client&amp;rsquo;s. This option has no effect on client sockets and SSLv2 server sockets.</source>
          <target state="translated">クライアントではなく、サーバーの暗号の順序設定を使用します。このオプションは、クライアントソケットとSSLv2サーバーソケットには影響しません。</target>
        </trans-unit>
        <trans-unit id="8de5b3b768e02c520630dfc4e4662871b8e86cb2" translate="yes" xml:space="preserve">
          <source>Use the specified date/time format, as accepted by &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; で&lt;/a&gt;受け入れられる、指定された日付/時刻形式を使用します。</target>
        </trans-unit>
        <trans-unit id="c2201f34bb8cca334db23ea9d46313e59f85d0d4" translate="yes" xml:space="preserve">
          <source>Use the specified format string for the handler.</source>
          <target state="translated">ハンドラには指定されたフォーマット文字列を使用します。</target>
        </trans-unit>
        <trans-unit id="213c03b10565262fbdcced639b5887e0adcb2562" translate="yes" xml:space="preserve">
          <source>Use the specified stream to initialize the StreamHandler. Note that this argument is incompatible with &lt;em&gt;filename&lt;/em&gt; - if both are present, a &lt;code&gt;ValueError&lt;/code&gt; is raised.</source>
          <target state="translated">指定されたストリームを使用して、StreamHandlerを初期化します。この引数は&lt;em&gt;ファイル名&lt;/em&gt;と互換性がないことに注意してください-両方が存在する &lt;code&gt;ValueError&lt;/code&gt; 、ValueErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="26bb8fc2a3dadbf252bc5cf4692acd775945e4ab" translate="yes" xml:space="preserve">
          <source>Use the type constructor: &lt;code&gt;dict()&lt;/code&gt;, &lt;code&gt;dict([('foo', 100), ('bar', 200)])&lt;/code&gt;, &lt;code&gt;dict(foo=100, bar=200)&lt;/code&gt;</source>
          <target state="translated">Use the type constructor: &lt;code&gt;dict()&lt;/code&gt; , &lt;code&gt;dict([('foo', 100), ('bar', 200)])&lt;/code&gt; , &lt;code&gt;dict(foo=100, bar=200)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46d5843d57501d9dc62ef5d4dbfa23e57389ac53" translate="yes" xml:space="preserve">
          <source>Use the type constructor: &lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;set('foobar')&lt;/code&gt;, &lt;code&gt;set(['a', 'b', 'foo'])&lt;/code&gt;</source>
          <target state="translated">Use the type constructor: &lt;code&gt;set()&lt;/code&gt; , &lt;code&gt;set('foobar')&lt;/code&gt; , &lt;code&gt;set(['a', 'b', 'foo'])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2fd056e5e1d4febf6b91464a41740d353dee2ec" translate="yes" xml:space="preserve">
          <source>Use this at the end of &lt;code&gt;test_main&lt;/code&gt; whenever sub-processes are started. This will help ensure that no extra children (zombies) stick around to hog resources and create problems when looking for refleaks.</source>
          <target state="translated">サブプロセスが開始されるときはいつでも、 &lt;code&gt;test_main&lt;/code&gt; の最後にこれを使用します。これにより、余分な子（ゾンビ）がリソースを独り占めするのを防ぎ、再リークを探すときに問題が発生しないようにします。</target>
        </trans-unit>
        <trans-unit id="286f91c9a880de7bf2bb606d7ce509a86af31f09" translate="yes" xml:space="preserve">
          <source>Use this check to guard CPython&amp;rsquo;s implementation-specific tests or to run them only on the implementations guarded by the arguments:</source>
          <target state="translated">このチェックを使用して、CPythonの実装固有のテストを保護するか、引数で保護された実装でのみテストを実行します。</target>
        </trans-unit>
        <trans-unit id="ce127e7831cfc938739483bdfbe497d108a0f467" translate="yes" xml:space="preserve">
          <source>Use this function to calculate the variance from the entire population. To estimate the variance from a sample, the &lt;a href=&quot;#statistics.variance&quot;&gt;&lt;code&gt;variance()&lt;/code&gt;&lt;/a&gt; function is usually a better choice.</source>
          <target state="translated">この関数を使用して、母集団全体から分散を計算します。サンプルから分散を推定するには、通常、&lt;a href=&quot;#statistics.variance&quot;&gt; &lt;code&gt;variance()&lt;/code&gt; &lt;/a&gt;関数の方が適しています。</target>
        </trans-unit>
        <trans-unit id="113c4cd7a277e177b4ab8b221b14cfbf88cf5706" translate="yes" xml:space="preserve">
          <source>Use this function when your data is a sample from a population. To calculate the variance from the entire population, see &lt;a href=&quot;#statistics.pvariance&quot;&gt;&lt;code&gt;pvariance()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データが母集団からのサンプルである場合、この関数を使用します。母集団全体から分散を計算するには、&lt;a href=&quot;#statistics.pvariance&quot;&gt; &lt;code&gt;pvariance()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1722f7fbf19d23d96b7db6a746432471393e9f3d" translate="yes" xml:space="preserve">
          <source>Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as &amp;ldquo;virtual subclasses&amp;rdquo; &amp;ndash; these and their descendants will be considered subclasses of the registering ABC by the built-in &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; function, but the registering ABC won&amp;rsquo;t show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via &lt;a href=&quot;functions#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;). &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">このメタクラスを使用してABCを作成します。ABCを直接サブクラス化して、ミックスインクラスとして機能させることができます。また、無関係の具象クラス（組み込みクラスも含む）と関係のないABCを「仮想サブクラス」として登録することもできます。これらとその子孫は、組み込みの&lt;a href=&quot;functions#issubclass&quot;&gt; &lt;code&gt;issubclass()&lt;/code&gt; &lt;/a&gt;関数によって登録ABCのサブクラスと見なされますが、登録ABCは勝ちましたそれらのMRO（メソッド解決順序）に表示されず、登録ABCによって定義されたメソッド実装が呼び出し可能になることもありません&lt;a href=&quot;functions#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;介しても）。&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3bdab79877c9aff2232b3c33a22d6693c69abec8" translate="yes" xml:space="preserve">
          <source>Used as the return value of the callback function in &lt;a href=&quot;#ssl.SSLContext.set_servername_callback&quot;&gt;&lt;code&gt;SSLContext.set_servername_callback()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLContext.set_servername_callback&quot;&gt; &lt;code&gt;SSLContext.set_servername_callback()&lt;/code&gt; の&lt;/a&gt;コールバック関数の戻り値として使用されます。</target>
        </trans-unit>
        <trans-unit id="f82127a2c2d7d75bf1de72d48006249872b07dda" translate="yes" xml:space="preserve">
          <source>Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles.</source>
          <target state="translated">このようにして自動的にカメの遊び場としてScrolledCanvasを提供するクラスScreenによって使用されます。</target>
        </trans-unit>
        <trans-unit id="1e979fe09b6bd0f001f9f5432c729b3ccb465bc9" translate="yes" xml:space="preserve">
          <source>Used by queue consumers. For each &lt;a href=&quot;#asyncio.Queue.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; used to fetch a task, a subsequent call to &lt;a href=&quot;#asyncio.Queue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; tells the queue that the processing on the task is complete.</source>
          <target state="translated">キューコンシューマによって使用されます。タスクをフェッチするために使用される&lt;a href=&quot;#asyncio.Queue.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;ごとに、後続の&lt;a href=&quot;#asyncio.Queue.task_done&quot;&gt; &lt;code&gt;task_done()&lt;/code&gt; の&lt;/a&gt;呼び出しは、タスクの処理が完了したことをキューに通知します。</target>
        </trans-unit>
        <trans-unit id="7a8582ae1f2665fbf84f38cb456084728c223988" translate="yes" xml:space="preserve">
          <source>Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for &lt;em&gt;tenths&lt;/em&gt; tenths of seconds, raise an exception if nothing has been typed. The value of &lt;em&gt;tenths&lt;/em&gt; must be a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt;. Use &lt;a href=&quot;#curses.nocbreak&quot;&gt;&lt;code&gt;nocbreak()&lt;/code&gt;&lt;/a&gt; to leave half-delay mode.</source>
          <target state="translated">ユーザーが入力した文字をプログラムですぐに使用できるという点でcbreakモードに似ている半遅延モードに使用されます。ただし、1/ &lt;em&gt;10秒の&lt;/em&gt;間ブロックした後、何も入力されていない場合は例外を発生させます。&lt;em&gt;10分の1&lt;/em&gt;の値は、 &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;255&lt;/code&gt; までの数値でなければなりません。&lt;a href=&quot;#curses.nocbreak&quot;&gt; &lt;code&gt;nocbreak()&lt;/code&gt; &lt;/a&gt;を使用して、半遅延モードを終了します。</target>
        </trans-unit>
        <trans-unit id="f06f022628c2d1b93ae2cc8948d4d0af4d5ae00a" translate="yes" xml:space="preserve">
          <source>Used for implementing formatted literal strings (f-strings). Pops an optional &lt;em&gt;fmt_spec&lt;/em&gt; from the stack, then a required &lt;em&gt;value&lt;/em&gt;. &lt;em&gt;flags&lt;/em&gt; is interpreted as follows:</source>
          <target state="translated">書式付きリテラル文字列（f文字列）の実装に使用されます。スタックからオプションの&lt;em&gt;fmt_spec&lt;/em&gt;をポップし、次に必要な&lt;em&gt;値を&lt;/em&gt;ポップし&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;フラグ&lt;/em&gt;は次のように解釈されます。</target>
        </trans-unit>
        <trans-unit id="fcc54f6a9aa92d7a088351515d65a7c819a35b89" translate="yes" xml:space="preserve">
          <source>Used internally for PIL-style arrays. The value is informational only.</source>
          <target state="translated">PIL スタイルの配列で内部的に使用されます。この値は情報提供のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="6491331167a81c53e5c33555dd1c8389a48d8445" translate="yes" xml:space="preserve">
          <source>Used to communicate with horizontal scrollbars.</source>
          <target state="translated">横スクロールバーとの通信に使用します。</target>
        </trans-unit>
        <trans-unit id="c64f9f83dce5dde840388bdaecc8458dccd14e03" translate="yes" xml:space="preserve">
          <source>Used to communicate with vertical scrollbars. For some more information, see above.</source>
          <target state="translated">縦スクロールバーとの通信に使用します。いくつかの詳細については、上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="bf4ad9ddaa5df0e2aafe056836983124424bd313" translate="yes" xml:space="preserve">
          <source>Used to compare</source>
          <target state="translated">比較するために使用される</target>
        </trans-unit>
        <trans-unit id="91a1d8f2678510dd75c3aa4dbdec84d9816a43ed" translate="yes" xml:space="preserve">
          <source>Used to compute initial rollover time</source>
          <target state="translated">初期ロールオーバー時間の計算に使用します。</target>
        </trans-unit>
        <trans-unit id="08a327ec030bd193b20ca54e75819675f7371b1c" translate="yes" xml:space="preserve">
          <source>Used to indicate a set of characters. In a set:</source>
          <target state="translated">文字のセットを示すのに使用します。セットの中で。</target>
        </trans-unit>
        <trans-unit id="f0e9f07f7d6a756d8e0d078a5e0fe1a3f6b1b536" translate="yes" xml:space="preserve">
          <source>Useful constants representing internal nodes of the parse tree.</source>
          <target state="translated">パースツリーの内部ノードを表す便利な定数です。</target>
        </trans-unit>
        <trans-unit id="87be7f67261e2f0fefc8a90dca21ae95816dbf29" translate="yes" xml:space="preserve">
          <source>Useful constants representing leaf nodes of the parse tree and functions for testing node values.</source>
          <target state="translated">パースツリーのリーフノードを表す便利な定数と,ノードの値をテストするための関数.</target>
        </trans-unit>
        <trans-unit id="ba015f21c7d53068a8d1713a783f9a4aa518b47d" translate="yes" xml:space="preserve">
          <source>Useful example of &lt;a href=&quot;#module-atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; to read and write &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; history files.</source>
          <target state="translated">&lt;a href=&quot;readline#module-readline&quot;&gt; &lt;code&gt;readline&lt;/code&gt; &lt;/a&gt;履歴ファイルの読み書きに役立つ&lt;a href=&quot;#module-atexit&quot;&gt; &lt;code&gt;atexit&lt;/code&gt; の&lt;/a&gt;例。</target>
        </trans-unit>
        <trans-unit id="819cd88d697fb04114357734d0a4953e1648cc70" translate="yes" xml:space="preserve">
          <source>Useful handlers included with the logging module.</source>
          <target state="translated">ロギングモジュールに含まれる便利なハンドラ。</target>
        </trans-unit>
        <trans-unit id="bffb7bde8fb1030560f8c81be752d28554cebade" translate="yes" xml:space="preserve">
          <source>User ID of the user who originally stored this member.</source>
          <target state="translated">このメンバーを元々保存していたユーザーのユーザーID。</target>
        </trans-unit>
        <trans-unit id="f30e1fe7c0b6acd8745b10a765a7f4fb5c5ee0d0" translate="yes" xml:space="preserve">
          <source>User code can define additional warning categories by subclassing one of the standard warning categories. A warning category must always be a subclass of the &lt;a href=&quot;exceptions#Warning&quot;&gt;&lt;code&gt;Warning&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">ユーザーコードは、標準の警告カテゴリの1つをサブクラス化することにより、追加の警告カテゴリを定義できます。警告カテゴリは常に&lt;a href=&quot;exceptions#Warning&quot;&gt; &lt;code&gt;Warning&lt;/code&gt; &lt;/a&gt;クラスのサブクラスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="dd76a6ef01344dc63fffbe020875acc447df8daf" translate="yes" xml:space="preserve">
          <source>User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition &amp;ldquo;just like&amp;rdquo; the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.</source>
          <target state="translated">ユーザーコードは組み込みの例外を発生させる可能性があります。これを使用して、例外ハンドラをテストしたり、インタプリタが同じ例外を発生させる状況と「ちょうど同じ」エラー条件を報告したりできます。ただし、ユーザーコードが不適切なエラーを発生させないようにするための手段がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9f14b6f0b236ede7621ba0fdd6909e518df52703" translate="yes" xml:space="preserve">
          <source>User code does not normally need to call &lt;code&gt;auth&lt;/code&gt; directly, but can instead call the &lt;a href=&quot;#smtplib.SMTP.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; method, which will try each of the above mechanisms in turn, in the order listed. &lt;code&gt;auth&lt;/code&gt; is exposed to facilitate the implementation of authentication methods not (or not yet) supported directly by &lt;a href=&quot;#module-smtplib&quot;&gt;&lt;code&gt;smtplib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、ユーザーコードは &lt;code&gt;auth&lt;/code&gt; を直接呼び出す必要はありませんが、代わりに&lt;a href=&quot;#smtplib.SMTP.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことができます。 &lt;code&gt;auth&lt;/code&gt; は、&lt;a href=&quot;#module-smtplib&quot;&gt; &lt;code&gt;smtplib&lt;/code&gt; で&lt;/a&gt;直接サポートされていない（またはまだサポートされていない）認証方法の実装を容易にするために公開されています。</target>
        </trans-unit>
        <trans-unit id="84a81fa60a53fd3f70212f8a883a1173635ab4b0" translate="yes" xml:space="preserve">
          <source>User command interpreter</source>
          <target state="translated">ユーザコマンドインタプリタ</target>
        </trans-unit>
        <trans-unit id="e5adf91ece726624b104dd2485c2a839a6328d16" translate="yes" xml:space="preserve">
          <source>User defined flags for file.</source>
          <target state="translated">ファイルのユーザ定義フラグ。</target>
        </trans-unit>
        <trans-unit id="837ac2f806f11ca580d1c3781163b0e72e002397" translate="yes" xml:space="preserve">
          <source>User defined generic type aliases are also supported. Examples:</source>
          <target state="translated">ユーザー定義の汎用型エイリアスもサポートされています。例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="b74dd2344f56ad9942272568c160da474cef5e98" translate="yes" xml:space="preserve">
          <source>User defined value.</source>
          <target state="translated">ユーザー定義値。</target>
        </trans-unit>
        <trans-unit id="dae4b56a599d30541843d6111db279c8f6e56e71" translate="yes" xml:space="preserve">
          <source>User home directory</source>
          <target state="translated">ユーザーホームディレクトリ</target>
        </trans-unit>
        <trans-unit id="050950cdf0452013f4526d6003822fc72d925c74" translate="yes" xml:space="preserve">
          <source>User id of the owner.</source>
          <target state="translated">オーナーのユーザーID。</target>
        </trans-unit>
        <trans-unit id="e1f63eb061937021f51dba01e97a48c55059e9c6" translate="yes" xml:space="preserve">
          <source>User identifier of the file owner.</source>
          <target state="translated">ファイルの所有者のユーザ識別子。</target>
        </trans-unit>
        <trans-unit id="542fc71480dec743e60c20434ec6dd5838fc4b52" translate="yes" xml:space="preserve">
          <source>User name</source>
          <target state="translated">ユーザー名</target>
        </trans-unit>
        <trans-unit id="1e3704b9f36dfd77d888c25db447d4825601916a" translate="yes" xml:space="preserve">
          <source>User name or comment field</source>
          <target state="translated">ユーザー名またはコメント欄</target>
        </trans-unit>
        <trans-unit id="10ef42a45644103797c878bfd194ec705ff80ac2" translate="yes" xml:space="preserve">
          <source>User name.</source>
          <target state="translated">ユーザー名です。</target>
        </trans-unit>
        <trans-unit id="1c40247837db435c6ac2d3e4807fdb9eaa3fcfec" translate="yes" xml:space="preserve">
          <source>User output in Shell</source>
          <target state="translated">シェルでのユーザ出力</target>
        </trans-unit>
        <trans-unit id="1fa0023bf437bb34f21239d1a3a528a2484c4b30" translate="yes" xml:space="preserve">
          <source>User-defined generic types</source>
          <target state="translated">ユーザー定義の汎用タイプ</target>
        </trans-unit>
        <trans-unit id="096a2210b655aeab11edc5d2a988883921409748" translate="yes" xml:space="preserve">
          <source>User-defined objects</source>
          <target state="translated">ユーザー定義オブジェクト</target>
        </trans-unit>
        <trans-unit id="9c3179efdafa77e4e40bdd02934bf184434188e0" translate="yes" xml:space="preserve">
          <source>User-defined signal 1.</source>
          <target state="translated">ユーザー定義信号 1.</target>
        </trans-unit>
        <trans-unit id="8377c5e3ae0d4764e95e0051fad273030d085fc1" translate="yes" xml:space="preserve">
          <source>User-defined signal 2.</source>
          <target state="translated">ユーザー定義信号 2.</target>
        </trans-unit>
        <trans-unit id="d237d99366c12cd2bbf976603224da547f3ec351" translate="yes" xml:space="preserve">
          <source>UserDict objects</source>
          <target state="translated">ユーザーディクトオブジェクト</target>
        </trans-unit>
        <trans-unit id="43496013c3e57310ccf58d32810be25b59dbdc0f" translate="yes" xml:space="preserve">
          <source>UserList objects</source>
          <target state="translated">ユーザリストオブジェクト</target>
        </trans-unit>
        <trans-unit id="fdbfc8c4e254851301cd44b01a7f822ceaae5ea4" translate="yes" xml:space="preserve">
          <source>UserString objects</source>
          <target state="translated">ユーザー文字列オブジェクト</target>
        </trans-unit>
        <trans-unit id="d7c41484c828a997d0c616496cb5a9ba5f11a17d" translate="yes" xml:space="preserve">
          <source>UserWarning</source>
          <target state="translated">UserWarning</target>
        </trans-unit>
        <trans-unit id="a53964d7702a603f5cc33f3432206f51279cc2ec" translate="yes" xml:space="preserve">
          <source>Users are expected to subclass &lt;a href=&quot;#xml.sax.handler.ContentHandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; to support their application. The following methods are called by the parser on the appropriate events in the input document:</source>
          <target state="translated">ユーザーは、アプリケーションをサポートするために&lt;a href=&quot;#xml.sax.handler.ContentHandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt;をサブクラス化する必要があります。次のメソッドは、入力ドキュメントの適切なイベントでパーサーによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="45a5cf6473d9786c93e12f2179a5a34390bce117" translate="yes" xml:space="preserve">
          <source>Uses an incremental decoder to iteratively decode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental decoder.</source>
          <target state="translated">インクリメンタルデコーダーを使用して、&lt;em&gt;iteratorが&lt;/em&gt;提供する入力を繰り返しデコードし&lt;em&gt;ます&lt;/em&gt;。この関数は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;ジェネレータ&lt;/a&gt;です。&lt;em&gt;エラー&lt;/em&gt;引数（ならびに他の任意のキーワード引数）が増分デコーダに渡されます。</target>
        </trans-unit>
        <trans-unit id="f2afb048c0c5ee80a6cab60018630eb3a6a62b53" translate="yes" xml:space="preserve">
          <source>Uses an incremental decoder to iteratively decode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental decoder.</source>
          <target state="translated">Uses an incremental decoder to iteratively decode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental decoder.</target>
        </trans-unit>
        <trans-unit id="97ee2b4b00c59db46e2110ba3dfbbe7fc0fb5b55" translate="yes" xml:space="preserve">
          <source>Uses an incremental encoder to iteratively encode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental encoder.</source>
          <target state="translated">インクリメンタルエンコーダーを使用して、&lt;em&gt;iteratorが&lt;/em&gt;提供する入力を繰り返しエンコードし&lt;em&gt;ます&lt;/em&gt;。この関数は&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;ジェネレータ&lt;/a&gt;です。&lt;em&gt;エラー&lt;/em&gt;引数（ならびに他の任意のキーワード引数）は、インクリメンタルエンコーダに渡されます。</target>
        </trans-unit>
        <trans-unit id="3c7c1bda0c9869e5a64dd786b5c0e23a68919047" translate="yes" xml:space="preserve">
          <source>Uses an incremental encoder to iteratively encode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental encoder.</source>
          <target state="translated">Uses an incremental encoder to iteratively encode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental encoder.</target>
        </trans-unit>
        <trans-unit id="1796fd07c3abc6b437c002199b8dec150da9d3ce" translate="yes" xml:space="preserve">
          <source>Uses the most efficient &lt;em&gt;selector&lt;/em&gt; available for the given platform. It is also possible to manually configure the exact selector implementation to be used:</source>
          <target state="translated">指定されたプラットフォームで利用可能な最も効率的な&lt;em&gt;セレクタを&lt;/em&gt;使用します。使用するセレクターの正確な実装を手動で構成することもできます。</target>
        </trans-unit>
        <trans-unit id="f0e598218cf75820dbb2cd3bea919913cabb5e7e" translate="yes" xml:space="preserve">
          <source>Using 2to3</source>
          <target state="translated">2to3を使用して</target>
        </trans-unit>
        <trans-unit id="b22ccfadca9ffaf0ddcc4fc0358c97c924012086" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt;&lt;code&gt;BZ2Compressor&lt;/code&gt;&lt;/a&gt; for incremental compression:</source>
          <target state="translated">&lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt; &lt;code&gt;BZ2Compressor&lt;/code&gt; &lt;/a&gt;を使用した増分圧縮：</target>
        </trans-unit>
        <trans-unit id="7eebc61ad3858b05e62f7bd808af37d63075ffd3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#bz2.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bz2.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; to demonstrate round-trip compression:</source>
          <target state="translated">&lt;a href=&quot;#bz2.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#bz2.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt;を使用して往復圧縮をデモンストレーションします。</target>
        </trans-unit>
        <trans-unit id="2029fedc2458a13f77c1f9a3bf4c5809903fcd63" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#enum.auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#enum.auto&quot;&gt; &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt;を使用する</target>
        </trans-unit>
        <trans-unit id="43d26a426ee79b95bc796073c23282baef718e71" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#enum.auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">&lt;a href=&quot;#enum.auto&quot;&gt; &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt;を使用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="3332153ff30b7216dceddba7970328bb03f8b0c5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#hashlib.new&quot;&gt;&lt;code&gt;new()&lt;/code&gt;&lt;/a&gt; with an algorithm provided by OpenSSL:</source>
          <target state="translated">使用する&lt;a href=&quot;#hashlib.new&quot;&gt; &lt;code&gt;new()&lt;/code&gt; &lt;/a&gt; OpenSSLのが提供するアルゴリズムで：</target>
        </trans-unit>
        <trans-unit id="ad62c774eb93ab84a6850c05f0ec364f019a5e7b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#module-json.tool&quot;&gt;&lt;code&gt;json.tool&lt;/code&gt;&lt;/a&gt; from the shell to validate and pretty-print:</source>
          <target state="translated">シェルから&lt;a href=&quot;#module-json.tool&quot;&gt; &lt;code&gt;json.tool&lt;/code&gt; &lt;/a&gt;を使用して検証し、プリティプリントする：</target>
        </trans-unit>
        <trans-unit id="d464f393105084bac6303efd2c33e015be5fe683" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt;&lt;code&gt;Pool&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt; &lt;code&gt;Pool&lt;/code&gt; &lt;/a&gt;使用：</target>
        </trans-unit>
        <trans-unit id="4e7ad4acf32468f4df31858e1a7c38b2a8027571" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.access&quot;&gt;&lt;code&gt;access()&lt;/code&gt;&lt;/a&gt; to check if a user is authorized to e.g. open a file before actually doing so using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&amp;rsquo;s preferable to use &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; techniques. For example:</source>
          <target state="translated">ユーザーが実際にファイルを&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;前に&lt;a href=&quot;#os.access&quot;&gt; &lt;code&gt;access()&lt;/code&gt; &lt;/a&gt;を使用してファイルを開く権限があるかどうかを確認する前にopen（）を使用すると、セキュリティホールが発生します。これは、ユーザーがファイルを確認してから開くまでの短い時間間隔を利用して操作するためです。&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt;手法を使用することをお勧めします。例えば：</target>
        </trans-unit>
        <trans-unit id="63d8dc5be3ecbd899690945c88764160cbddb011" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.access&quot;&gt;&lt;code&gt;access()&lt;/code&gt;&lt;/a&gt; to check if a user is authorized to e.g. open a file before actually doing so using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&amp;rsquo;s preferable to use &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; techniques. For example:</source>
          <target state="translated">Using &lt;a href=&quot;#os.access&quot;&gt; &lt;code&gt;access()&lt;/code&gt; &lt;/a&gt; to check if a user is authorized to e.g. open a file before actually doing so using &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&amp;rsquo;s preferable to use &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; techniques. For example:</target>
        </trans-unit>
        <trans-unit id="05e46086069a4eb6aba79398aaeef75e0337d56c" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#os.listdir&quot;&gt;&lt;code&gt;listdir()&lt;/code&gt;&lt;/a&gt; can significantly increase the performance of code that also needs file type or file attribute information, because &lt;a href=&quot;#os.DirEntry&quot;&gt;&lt;code&gt;os.DirEntry&lt;/code&gt;&lt;/a&gt; objects expose this information if the operating system provides it when scanning a directory. All &lt;a href=&quot;#os.DirEntry&quot;&gt;&lt;code&gt;os.DirEntry&lt;/code&gt;&lt;/a&gt; methods may perform a system call, but &lt;a href=&quot;#os.DirEntry.is_dir&quot;&gt;&lt;code&gt;is_dir()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.DirEntry.is_file&quot;&gt;&lt;code&gt;is_file()&lt;/code&gt;&lt;/a&gt; usually only require a system call for symbolic links; &lt;a href=&quot;#os.DirEntry.stat&quot;&gt;&lt;code&gt;os.DirEntry.stat()&lt;/code&gt;&lt;/a&gt; always requires a system call on Unix but only requires one for symbolic links on Windows.</source>
          <target state="translated">使用&lt;a href=&quot;#os.scandir&quot;&gt; &lt;code&gt;scandir()&lt;/code&gt; &lt;/a&gt;の代わりに、&lt;a href=&quot;#os.listdir&quot;&gt; &lt;code&gt;listdir()&lt;/code&gt; &lt;/a&gt;ので、大幅に、また、ファイルの種類やファイルの属性情報を必要とするコードのパフォーマンスを向上させることができ&lt;a href=&quot;#os.DirEntry&quot;&gt; &lt;code&gt;os.DirEntry&lt;/code&gt; は、&lt;/a&gt;ディレクトリをスキャンするときに、オペレーティング・システムがそれを提供する場合、この情報を公開するオブジェクト。すべての&lt;a href=&quot;#os.DirEntry&quot;&gt; &lt;code&gt;os.DirEntry&lt;/code&gt; &lt;/a&gt;メソッドはシステムコールを実行できますが、&lt;a href=&quot;#os.DirEntry.is_dir&quot;&gt; &lt;code&gt;is_dir()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#os.DirEntry.is_file&quot;&gt; &lt;code&gt;is_file()&lt;/code&gt; &lt;/a&gt;は通常、シンボリックリンクのシステムコールのみを必要とします。&lt;a href=&quot;#os.DirEntry.stat&quot;&gt; &lt;code&gt;os.DirEntry.stat()&lt;/code&gt; &lt;/a&gt;は、Unixでは常にシステムコールを必要としますが、Windowsではシンボリックリンクに対してのみ必要です。</target>
        </trans-unit>
        <trans-unit id="43f15eefbfb3d963e7a0530dd61833be3ae7e150" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt;&lt;code&gt;reset_peak()&lt;/code&gt;&lt;/a&gt; ensured we could accurately record the peak during the computation of &lt;code&gt;small_sum&lt;/code&gt;, even though it is much smaller than the overall peak size of memory blocks since the &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; call. Without the call to &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt;&lt;code&gt;reset_peak()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;second_peak&lt;/code&gt; would still be the peak from the computation &lt;code&gt;large_sum&lt;/code&gt; (that is, equal to &lt;code&gt;first_peak&lt;/code&gt;). In this case, both peaks are much higher than the final memory usage, and which suggests we could optimise (by removing the unnecessary call to &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, and writing &lt;code&gt;sum(range(...))&lt;/code&gt;).</source>
          <target state="translated">Using &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt; &lt;code&gt;reset_peak()&lt;/code&gt; &lt;/a&gt; ensured we could accurately record the peak during the computation of &lt;code&gt;small_sum&lt;/code&gt; , even though it is much smaller than the overall peak size of memory blocks since the &lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt; call. Without the call to &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt; &lt;code&gt;reset_peak()&lt;/code&gt; &lt;/a&gt;, &lt;code&gt;second_peak&lt;/code&gt; would still be the peak from the computation &lt;code&gt;large_sum&lt;/code&gt; (that is, equal to &lt;code&gt;first_peak&lt;/code&gt; ). In this case, both peaks are much higher than the final memory usage, and which suggests we could optimise (by removing the unnecessary call to &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;, and writing &lt;code&gt;sum(range(...))&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3883f28289ce4c7d604b31aff5ba0b408a5bf2f7" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; to return a sequence of values:</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;を使用して一連の値を返す：</target>
        </trans-unit>
        <trans-unit id="ea0de95702cc7230baa48c3cfd3852b48dab7f01" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;使用</target>
        </trans-unit>
        <trans-unit id="1e3aeddb8fef1ed2a7cff5e13174b13353739c23" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;を使用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="2689ab8940d02d7de1ca68e6a4b43fe67530d0bc" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; as a context manager is a great way to ensure your file handles are closed properly and is becoming common:</source>
          <target state="translated">&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;をコンテキストマネージャとして使用することは、ファイルハンドルが適切に閉じられ、一般的になりつつあることを確認する優れた方法です。</target>
        </trans-unit>
        <trans-unit id="75ece5db0a196d8368913a7d8ebe30c4301fe19a" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; as the &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt;, it is easy to group a sequence of key-value pairs into a dictionary of lists:</source>
          <target state="translated">&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt; &lt;code&gt;default_factory&lt;/code&gt; &lt;/a&gt;として使用すると、一連のキーと値のペアをリストの辞書に簡単にグループ化できます。</target>
        </trans-unit>
        <trans-unit id="0fff5ca8530b544b1b162b66bc324c7e008c1fcb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ZoneInfo&lt;/code&gt;</source>
          <target state="translated">Using &lt;code&gt;ZoneInfo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6ff2511d6a7f0fa504c9e9bb252e706108d932f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt; is equivalent to:</source>
          <target state="translated">&lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt; を使用することは、次と同等です。</target>
        </trans-unit>
        <trans-unit id="65a8720d7908df41079a6d71b6ca8cbf5c0d7f39" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;importlib.metadata&lt;/code&gt;</source>
          <target state="translated">Using &lt;code&gt;importlib.metadata&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa1c396214dc747fc568a18547cde7d0930db839" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;loop.create_connection()&lt;/code&gt; to &lt;a href=&quot;asyncio-protocol#asyncio-example-create-connection&quot;&gt;connect a socket&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;loop.create_connection()&lt;/code&gt; する&lt;a href=&quot;asyncio-protocol#asyncio-example-create-connection&quot;&gt;ソケットを接続します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ce11a3954da4ad24f2eda9c45c6a6a5ff16cff8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;loop.create_connection()&lt;/code&gt; to implement &lt;a href=&quot;asyncio-protocol#asyncio-example-tcp-echo-client-protocol&quot;&gt;an echo-client&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;loop.create_connection()&lt;/code&gt; を使用し&lt;a href=&quot;asyncio-protocol#asyncio-example-tcp-echo-client-protocol&quot;&gt;てecho-client&lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="7a0274be181e65043a1f3ce90fd4b35a6ce24d25" translate="yes" xml:space="preserve">
          <source>Using Early Data in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc8470.html&quot; id=&quot;index-46&quot;&gt;&lt;strong&gt;RFC 8470&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Using Early Data in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc8470.html&quot; id=&quot;index-46&quot;&gt;&lt;strong&gt;RFC 8470&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8e73e77844e32168a133432fdc484125ad1e928e" translate="yes" xml:space="preserve">
          <source>Using Mock</source>
          <target state="translated">モックを使って</target>
        </trans-unit>
        <trans-unit id="988ffa6cf84925a7e2f11a2d4da93941ab8db1b3" translate="yes" xml:space="preserve">
          <source>Using Tix</source>
          <target state="translated">ティックスの使用</target>
        </trans-unit>
        <trans-unit id="a3b39b06fc36d238ca9fd0e34aa3702c74df4872" translate="yes" xml:space="preserve">
          <source>Using Ttk</source>
          <target state="translated">Ttkを使用して</target>
        </trans-unit>
        <trans-unit id="6f2bfcfa7f0c89ae800d87806ee91ffdff6c2390" translate="yes" xml:space="preserve">
          <source>Using UTF-8 as the Default Source Encoding</source>
          <target state="translated">デフォルトのソースエンコーディングとして UTF-8 を使用する</target>
        </trans-unit>
        <trans-unit id="7b4dafbddf83b4c5d5c51b21c48f00b8d136bed2" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;cumulative distribution function (cdf)&lt;/a&gt;, compute the probability that a random variable &lt;em&gt;X&lt;/em&gt; will be less than or equal to &lt;em&gt;x&lt;/em&gt;. Mathematically, it is written &lt;code&gt;P(X &amp;lt;= x)&lt;/code&gt;.</source>
          <target state="translated">用いた&lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;累積分布関数（CDF）を&lt;/a&gt;、確率変数の確率計算&lt;em&gt;Xは&lt;/em&gt;以下であるかに等しくなる&lt;em&gt;Xを&lt;/em&gt;。数学的には、 &lt;code&gt;P(X &amp;lt;= x)&lt;/code&gt; と書かれています。</target>
        </trans-unit>
        <trans-unit id="ba910e1ce5f13f1f4ea2ed92206f282bf3b88194" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;probability density function (pdf)&lt;/a&gt;, compute the relative likelihood that a random variable &lt;em&gt;X&lt;/em&gt; will be near the given value &lt;em&gt;x&lt;/em&gt;. Mathematically, it is the limit of the ratio &lt;code&gt;P(x &amp;lt;=
X &amp;lt; x+dx) / dx&lt;/code&gt; as &lt;em&gt;dx&lt;/em&gt; approaches zero.</source>
          <target state="translated">使用した&lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;確率密度関数（pdf）を&lt;/a&gt;、確率変数のこと相対尤度を計算&lt;em&gt;Xが&lt;/em&gt;所定値に近くなります&lt;em&gt;X&lt;/em&gt;。数学的に、それは比の限界である &lt;code&gt;P(x &amp;lt;= X &amp;lt; x+dx) / dx&lt;/code&gt; として&lt;em&gt;dxは&lt;/em&gt;ゼロに近づきます。</target>
        </trans-unit>
        <trans-unit id="50e9189c5263c54e966ddb0c0fcbf7b491be40a3" translate="yes" xml:space="preserve">
          <source>Using a callable:</source>
          <target state="translated">callableを使用しています。</target>
        </trans-unit>
        <trans-unit id="75220b874a1b14dcc1d9274c28e10a2768d28bff" translate="yes" xml:space="preserve">
          <source>Using a context manager as a function decorator</source>
          <target state="translated">コンテキストマネージャを関数デコレータとして使用する</target>
        </trans-unit>
        <trans-unit id="4d5214967f9aa69db8719e748debbab68f82aea5" translate="yes" xml:space="preserve">
          <source>Using a custom &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">カスタム&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fde5f9719816f30ae38224d7025284ea600fd7a7" translate="yes" xml:space="preserve">
          <source>Using a custom &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Using a custom &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de60096a210691c18ae3d3da4e5e7f7f31853253" translate="yes" xml:space="preserve">
          <source>Using a custom timer</source>
          <target state="translated">カスタムタイマーの使用</target>
        </trans-unit>
        <trans-unit id="9ca12f2496ddb81117cd62c302718c441b5e7172" translate="yes" xml:space="preserve">
          <source>Using a descriptive string</source>
          <target state="translated">記述的な文字列を使用する</target>
        </trans-unit>
        <trans-unit id="afb7c939cdae700f3a6eb60d7fb5128652ab012f" translate="yes" xml:space="preserve">
          <source>Using a generic class without specifying type parameters assumes &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; for each position. In the following example, &lt;code&gt;MyIterable&lt;/code&gt; is not generic but implicitly inherits from &lt;code&gt;Iterable[Any]&lt;/code&gt;:</source>
          <target state="translated">タイプパラメータを指定せずにジェネリッククラスを使用すると、各位置に&lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt;が想定されます。次の例では、 &lt;code&gt;MyIterable&lt;/code&gt; はジェネリックではありませんが、 &lt;code&gt;Iterable[Any]&lt;/code&gt; から暗黙的に継承しています。</target>
        </trans-unit>
        <trans-unit id="d307c55b385e0819ab9d20174ffebefe22e8b6b6" translate="yes" xml:space="preserve">
          <source>Using a list comprehension: &lt;code&gt;[x for x in iterable]&lt;/code&gt;</source>
          <target state="translated">リスト内包表記の使用： &lt;code&gt;[x for x in iterable]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9615543c2d928cf50040f980706115431fc8728d" translate="yes" xml:space="preserve">
          <source>Using a pair of parentheses to denote the empty tuple: &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">一対の括弧を使用して空のタプルを示す：（ &lt;code&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bc851502c6676f542b9ab198cbf3f862b23400c" translate="yes" xml:space="preserve">
          <source>Using a pair of square brackets to denote the empty list: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">角括弧のペアを使用して空のリストを示す： &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f5a75250125304baf8a8f8d2739eb842d37fc846" translate="yes" xml:space="preserve">
          <source>Using a pool of workers</source>
          <target state="translated">労働者のプールを使用して</target>
        </trans-unit>
        <trans-unit id="8383415a2a10a3f8f1036870f131e3fe6f99e151" translate="yes" xml:space="preserve">
          <source>Using a remote manager</source>
          <target state="translated">リモートマネージャーの使用</target>
        </trans-unit>
        <trans-unit id="f23700feacc3a477143f8b09438dc2426f25eecd" translate="yes" xml:space="preserve">
          <source>Using a separate test for &amp;ldquo;liveness&amp;rdquo; creates race conditions in threaded applications; another thread can cause a weak reference to become invalidated before the weak reference is called; the idiom shown above is safe in threaded applications as well as single-threaded applications.</source>
          <target state="translated">「活性」の個別のテストを使用すると、スレッド化されたアプリケーションで競合状態が発生します。別のスレッドにより、弱参照が呼び出される前に弱参照が無効になる可能性があります。上記のイディオムは、シングルスレッドアプリケーションだけでなく、スレッドアプリケーションでも安全です。</target>
        </trans-unit>
        <trans-unit id="38537e54bac1a305fb2ceea706898c0b3eab781f" translate="yes" xml:space="preserve">
          <source>Using a string as the value would look like:</source>
          <target state="translated">文字列を値として使用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="a0514595eb268ee9e74173dda1049b389b853d97" translate="yes" xml:space="preserve">
          <source>Using a trailing comma for a singleton tuple: &lt;code&gt;a,&lt;/code&gt; or &lt;code&gt;(a,)&lt;/code&gt;</source>
          <target state="translated">シングルトンタプルの末尾のコンマの使用： &lt;code&gt;a,&lt;/code&gt; または &lt;code&gt;(a,)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac783cf466229eb8f1ea0637db6e6bae53f92af8" translate="yes" xml:space="preserve">
          <source>Using a value in the configuration dict lets configurations to be sent over the wire as pickled dicts to a socket listener. Thus, the logging verbosity of a long-running application can be altered over time with no need to stop and restart the application.</source>
          <target state="translated">設定ディクトで値を使用することで、設定をソケットリスナーに pickled dict としてワイヤ上で送信することができます。このようにして、長時間稼働しているアプリケーションのロギングの冗長性を、アプリケーションを停止したり再起動したりすることなく、時間の経過とともに変更することができます。</target>
        </trans-unit>
        <trans-unit id="2f653044b0deb519381cad92e86f64dbb241a7b3" translate="yes" xml:space="preserve">
          <source>Using adapters to store additional Python types in SQLite databases</source>
          <target state="translated">SQLite データベースに追加の Python 型を保存するためのアダプタの使用</target>
        </trans-unit>
        <trans-unit id="8ed960171bb00be50b6cf25e8e3d2d57ed5e8c5b" translate="yes" xml:space="preserve">
          <source>Using an auto-numbering &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">自動番号付け&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;を使用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="65a99d80248d09ce12fe7957e9d28ac5caabeb35" translate="yes" xml:space="preserve">
          <source>Using an auto-numbering &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">Using an auto-numbering &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt; would look like:</target>
        </trans-unit>
        <trans-unit id="d9684f34bd96b132133b1597608ee067cffce7c3" translate="yes" xml:space="preserve">
          <source>Using any of these methods signifies to the user that these values are not important, and also enables one to add, remove, or reorder members without having to renumber the remaining members.</source>
          <target state="translated">これらのメソッドのいずれかを使用すると、これらの値が重要ではないことをユーザーに示し、残りのメンバーの番号を変更することなく、メンバーの追加、削除、または並べ替えを行うことができます。</target>
        </trans-unit>
        <trans-unit id="6ef4f4199027402c151a50d927a41c2996ff8f9f" translate="yes" xml:space="preserve">
          <source>Using automatic values</source>
          <target state="translated">自動値の使用</target>
        </trans-unit>
        <trans-unit id="8e18b23aa8166ee94001b3c568e708c504704e7c" translate="yes" xml:space="preserve">
          <source>Using dataclasses, &lt;em&gt;if&lt;/em&gt; this code was valid:</source>
          <target state="translated">このコードが有効な&lt;em&gt;場合は&lt;/em&gt;、データクラスを使用します。</target>
        </trans-unit>
        <trans-unit id="121ccf7d7533afb43d6d034aec33aed44552426e" translate="yes" xml:space="preserve">
          <source>Using default factory functions is a way to create new instances of mutable types as default values for fields:</source>
          <target state="translated">デフォルトのファクトリ関数を使用することで、フィールドのデフォルト値としてミュータブル型の新しいインスタンスを作成する方法です。</target>
        </trans-unit>
        <trans-unit id="8e6559d2f6f048a1637ae00fb7cb017f563475f7" translate="yes" xml:space="preserve">
          <source>Using different digest sizes</source>
          <target state="translated">ダイジェストサイズを使い分ける</target>
        </trans-unit>
        <trans-unit id="255ce6190840fec731e885d587707ae723af9b80" translate="yes" xml:space="preserve">
          <source>Using events</source>
          <target state="translated">イベントの使用</target>
        </trans-unit>
        <trans-unit id="de77a822ff9b97844fd2f5eef17f93a224452770" translate="yes" xml:space="preserve">
          <source>Using importlib.metadata</source>
          <target state="translated">importlib.metadataを使う</target>
        </trans-unit>
        <trans-unit id="94dd17d3eee91a6f460b34718a819c2ee9b54b47" translate="yes" xml:space="preserve">
          <source>Using locks, conditions, and semaphores in the &lt;code&gt;with&lt;/code&gt; statement</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; ステートメントでのロック、条件、セマフォの使用</target>
        </trans-unit>
        <trans-unit id="72adde2953e72ee1f91517e883fc94f79d9bef65" translate="yes" xml:space="preserve">
          <source>Using long option names is equally easy:</source>
          <target state="translated">長いオプション名の使用も同様に簡単です。</target>
        </trans-unit>
        <trans-unit id="f99afb1c0580e5c9200f58e2effc9e111e841402" translate="yes" xml:space="preserve">
          <source>Using maildir format</source>
          <target state="translated">maildir形式の使用</target>
        </trans-unit>
        <trans-unit id="c3e9900bea0722fcf9bc91bc0b782f7afce3e773" translate="yes" xml:space="preserve">
          <source>Using partial objects is usually more convenient than using lambdas, as asyncio can render partial objects better in debug and error messages.</source>
          <target state="translated">部分オブジェクトを使用することは、通常、ラムダを使用するよりも便利です。</target>
        </trans-unit>
        <trans-unit id="799ae737f71621b7f1a5b1c9102fbd2295987f9d" translate="yes" xml:space="preserve">
          <source>Using screen events</source>
          <target state="translated">画面イベントの使用</target>
        </trans-unit>
        <trans-unit id="c0f796650a131fcb2aa652625b99a9658f346ae5" translate="yes" xml:space="preserve">
          <source>Using separate &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; instances instead of reusing a single instance avoids that problem:</source>
          <target state="translated">単一のインスタンスを再利用するのではなく、個別の&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;インスタンスを使用すると、その問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="3442d5c13fd47976c3bf0ec76271111a44909d9e" translate="yes" xml:space="preserve">
          <source>Using shortcut methods</source>
          <target state="translated">ショートカットメソッドを使う</target>
        </trans-unit>
        <trans-unit id="c2d8da51afc83980ac89c6ca94ec45396b00f1ac" translate="yes" xml:space="preserve">
          <source>Using sqlite3 efficiently</source>
          <target state="translated">sqlite3を効率よく使う</target>
        </trans-unit>
        <trans-unit id="320599014228e813440efb4020e5b50ef5441b66" translate="yes" xml:space="preserve">
          <source>Using square brackets, separating items with commas: &lt;code&gt;[a]&lt;/code&gt;, &lt;code&gt;[a, b, c]&lt;/code&gt;</source>
          <target state="translated">角かっこを使用して、項目をコンマで区切ります： &lt;code&gt;[a]&lt;/code&gt; 、 &lt;code&gt;[a, b, c]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d8c6027625bc1e5d809004bd3a7dfcd28685592" translate="yes" xml:space="preserve">
          <source>Using sysconfig as a script</source>
          <target state="translated">sysconfigをスクリプトとして使用する</target>
        </trans-unit>
        <trans-unit id="c598912622c37d39a35330e55608828824a76ad7" translate="yes" xml:space="preserve">
          <source>Using the &amp;ldquo;&lt;code&gt;**&lt;/code&gt;&amp;rdquo; pattern in large directory trees may consume an inordinate amount of time.</source>
          <target state="translated">大きなディレクトリツリーで「 &lt;code&gt;**&lt;/code&gt; 」パターンを使用すると、非常に長い時間がかかる場合があります。</target>
        </trans-unit>
        <trans-unit id="20b1a4d90df2ea292b0302f5e727d9dd477ac602" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#module-zipapp&quot;&gt;&lt;code&gt;zipapp&lt;/code&gt;&lt;/a&gt; module, it is possible to create self-contained Python programs, which can be distributed to end users who only need to have a suitable version of Python installed on their system. The key to doing this is to bundle all of the application&amp;rsquo;s dependencies into the archive, along with the application code.</source>
          <target state="translated">&lt;a href=&quot;#module-zipapp&quot;&gt; &lt;code&gt;zipapp&lt;/code&gt; &lt;/a&gt;モジュールを使用すると、自己完結型のPythonプログラムを作成できます。これは、適切なバージョンのPythonをシステムにインストールするだけでよいエンドユーザーに配布できます。これを行うための鍵は、アプリケーションのすべての依存関係をアプリケーションコードとともにアーカイブにバンドルすることです。</target>
        </trans-unit>
        <trans-unit id="7864597e7acea55d09dd94985971ff805ed9a8a0" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt;&lt;code&gt;Process.terminate&lt;/code&gt;&lt;/a&gt; method to stop a process is liable to cause any shared resources (such as locks, semaphores, pipes and queues) currently being used by the process to become broken or unavailable to other processes.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt; &lt;code&gt;Process.terminate&lt;/code&gt; &lt;/a&gt;メソッドを使用してプロセスを停止すると、そのプロセスで現在使用されている共有リソース（ロック、セマフォ、パイプ、キューなど）が破損したり、他のプロセスで使用できなくなったりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="b726411759353a962ae614ca51a43d068731b30e" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple()&lt;/code&gt;&lt;/a&gt; built-in: &lt;code&gt;tuple()&lt;/code&gt; or &lt;code&gt;tuple(iterable)&lt;/code&gt;</source>
          <target state="translated">組み込みの&lt;a href=&quot;#tuple&quot;&gt; &lt;code&gt;tuple()&lt;/code&gt; の&lt;/a&gt;使用： &lt;code&gt;tuple()&lt;/code&gt; または &lt;code&gt;tuple(iterable)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0ec3b2c78661be37f08ee0e348df3f3bf59e0b9" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;.</source>
          <target state="translated">Using the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8b90745245f4a0f18b1bf49ea4cccb202e2b1025" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;dev&lt;/code&gt; Python command line option.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;dev&lt;/code&gt; Pythonコマンドラインオプションを使用する。</target>
        </trans-unit>
        <trans-unit id="0fd2d05a10558a5e6e11eb83de43bd2b9e3020b5" translate="yes" xml:space="preserve">
          <source>Using the Ttk widgets gives the application an improved look and feel. As discussed above, there are differences in how the styling is coded.</source>
          <target state="translated">Ttk ウィジェットを使うことで、アプリケーションのルックアンドフィールが向上します。上で説明したように、スタイリングがどのようにコード化されているかに違いがあります。</target>
        </trans-unit>
        <trans-unit id="a8b1f1cc65fb2aeb01222b99772f21a79b8f9f1c" translate="yes" xml:space="preserve">
          <source>Using the cgi module</source>
          <target state="translated">cgi モジュールの使用</target>
        </trans-unit>
        <trans-unit id="414513cd2ccd5f659d92ac7be558ff20be654791" translate="yes" xml:space="preserve">
          <source>Using the comma as a thousands separator:</source>
          <target state="translated">カンマを千の区切り文字として使用します。</target>
        </trans-unit>
        <trans-unit id="4be88d9241472398fa24fa0cf31272713a8b4373" translate="yes" xml:space="preserve">
          <source>Using the connection as a context manager</source>
          <target state="translated">接続をコンテキストマネージャーとして使用する</target>
        </trans-unit>
        <trans-unit id="3f82472d95e0faa8f20343f14d65c9d0b7f0391e" translate="yes" xml:space="preserve">
          <source>Using the file after calling &lt;code&gt;flush()&lt;/code&gt; or &lt;code&gt;close()&lt;/code&gt; on the &lt;a href=&quot;#mailbox.MMDF&quot;&gt;&lt;code&gt;MMDF&lt;/code&gt;&lt;/a&gt; instance may yield unpredictable results or raise an exception.</source>
          <target state="translated">&lt;a href=&quot;#mailbox.MMDF&quot;&gt; &lt;code&gt;MMDF&lt;/code&gt; &lt;/a&gt;インスタンスで &lt;code&gt;flush()&lt;/code&gt; または &lt;code&gt;close()&lt;/code&gt; を呼び出した後にファイルを使用すると、予期しない結果が生じるか、例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="99db02a945df11fe3bf69aa645bc3e8c058040d1" translate="yes" xml:space="preserve">
          <source>Using the file after calling &lt;code&gt;flush()&lt;/code&gt; or &lt;code&gt;close()&lt;/code&gt; on the &lt;a href=&quot;#mailbox.mbox&quot;&gt;&lt;code&gt;mbox&lt;/code&gt;&lt;/a&gt; instance may yield unpredictable results or raise an exception.</source>
          <target state="translated">&lt;a href=&quot;#mailbox.mbox&quot;&gt; &lt;code&gt;mbox&lt;/code&gt; &lt;/a&gt;インスタンスで &lt;code&gt;flush()&lt;/code&gt; または &lt;code&gt;close()&lt;/code&gt; を呼び出した後にファイルを使用すると、予期しない結果が生じるか、例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="657776931d7a6faef6a4a5155f927f48b4e36008" translate="yes" xml:space="preserve">
          <source>Using the nonstandard &lt;code&gt;execute()&lt;/code&gt;, &lt;code&gt;executemany()&lt;/code&gt; and &lt;code&gt;executescript()&lt;/code&gt; methods of the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object, your code can be written more concisely because you don&amp;rsquo;t have to create the (often superfluous) &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; objects explicitly. Instead, the &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; objects are created implicitly and these shortcut methods return the cursor objects. This way, you can execute a &lt;code&gt;SELECT&lt;/code&gt; statement and iterate over it directly using only a single call on the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;オブジェクトの非標準の &lt;code&gt;execute()&lt;/code&gt; 、 &lt;code&gt;executemany()&lt;/code&gt; 、および &lt;code&gt;executescript()&lt;/code&gt; メソッドを使用すると、（しばしば余分な）&lt;a href=&quot;#sqlite3.Cursor&quot;&gt; &lt;code&gt;Cursor&lt;/code&gt; &lt;/a&gt;オブジェクトを明示的に作成する必要がないため、コードをより簡潔に記述できます。代わりに、&lt;a href=&quot;#sqlite3.Cursor&quot;&gt; &lt;code&gt;Cursor&lt;/code&gt; &lt;/a&gt;オブジェクトは暗黙的に作成され、これらのショートカットメソッドはカーソルオブジェクトを返します。このようにして、 &lt;code&gt;SELECT&lt;/code&gt; ステートメントを実行し、&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;オブジェクトに対する単一の呼び出しのみを使用して、そのステートメントを直接反復できます。</target>
        </trans-unit>
        <trans-unit id="47aee112b6935fb523810f9a1f409db0f6fb290a" translate="yes" xml:space="preserve">
          <source>Using the standard (non-&lt;code&gt;compat32&lt;/code&gt;) policies, the returned value is an instance of a subclass of &lt;a href=&quot;email.headerregistry#email.headerregistry.BaseHeader&quot;&gt;&lt;code&gt;email.headerregistry.BaseHeader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">標準（非 &lt;code&gt;compat32&lt;/code&gt; ）ポリシーを使用すると、戻り値は&lt;a href=&quot;email.headerregistry#email.headerregistry.BaseHeader&quot;&gt; &lt;code&gt;email.headerregistry.BaseHeader&lt;/code&gt; の&lt;/a&gt;サブクラスのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="fc3fe35d196e1ad26b58992b8e30d0a618b3d15e" translate="yes" xml:space="preserve">
          <source>Using the subprocess Module</source>
          <target state="translated">サブプロセスモジュールの使用</target>
        </trans-unit>
        <trans-unit id="05aa4e92daaabfec4cab2e49b437833277ca4e0d" translate="yes" xml:space="preserve">
          <source>Using the type constructor: &lt;code&gt;list()&lt;/code&gt; or &lt;code&gt;list(iterable)&lt;/code&gt;</source>
          <target state="translated">型コンストラクターの使用： &lt;code&gt;list()&lt;/code&gt; または &lt;code&gt;list(iterable)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3dcc39a1df1cb3105fe567a435d77e0613cb83af" translate="yes" xml:space="preserve">
          <source>Using these ASCII based operations to manipulate binary data that is not stored in an ASCII based format may lead to data corruption.</source>
          <target state="translated">これらのASCIIベースの操作を使用して、ASCIIベースのフォーマットに保存されていないバイナリデータを操作すると、データが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="10ffcc30a6ebac687ec14a0dec9c03c4874f525e" translate="yes" xml:space="preserve">
          <source>Using these methods you can write nice compact code:</source>
          <target state="translated">これらのメソッドを使えば、コンパクトなコードを書くことができます。</target>
        </trans-unit>
        <trans-unit id="c82a820d85f9921e73994a56e494b8359a6094ae" translate="yes" xml:space="preserve">
          <source>Using this attribute you can control what objects are returned for the &lt;code&gt;TEXT&lt;/code&gt; data type. By default, this attribute is set to &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module will return Unicode objects for &lt;code&gt;TEXT&lt;/code&gt;. If you want to return bytestrings instead, you can set it to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この属性を使用して、 &lt;code&gt;TEXT&lt;/code&gt; データ型に対して返されるオブジェクトを制御できます。デフォルトでは、この属性は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; に&lt;/a&gt;設定されており、&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールは &lt;code&gt;TEXT&lt;/code&gt; の Unicodeオブジェクトを返します。代わりに&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;文字列を返したい場合は、それをbytesに設定できます。</target>
        </trans-unit>
        <trans-unit id="ca1b9a713e833be9fa7e8044191db6abaec6fbce" translate="yes" xml:space="preserve">
          <source>Using this constructor may change the semantics of your datetimes in surprising ways, only use it if you know that you need to.</source>
          <target state="translated">このコンストラクタを使用すると、意外な方法で datetimes のセマンティクスが変わるかもしれません。</target>
        </trans-unit>
        <trans-unit id="88d5a4c73559123ffb06df00d967f9cd0b062c9f" translate="yes" xml:space="preserve">
          <source>Using this decorator requires that the class&amp;rsquo;s metaclass is &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt; or is derived from it. A class that has a metaclass derived from &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt; cannot be instantiated unless all of its abstract methods and properties are overridden. The abstract methods can be called using any of the normal &amp;lsquo;super&amp;rsquo; call mechanisms. &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt; may be used to declare abstract methods for properties and descriptors.</source>
          <target state="translated">このデコレーターを使用するには、クラスのメタクラスが&lt;a href=&quot;#abc.ABCMeta&quot;&gt; &lt;code&gt;ABCMeta&lt;/code&gt; である&lt;/a&gt;か、それから派生している必要があります。&lt;a href=&quot;#abc.ABCMeta&quot;&gt; &lt;code&gt;ABCMeta&lt;/code&gt; &lt;/a&gt;から派生したメタクラスを持つクラスは、そのすべての抽象メソッドとプロパティがオーバーライドされない限りインスタンス化できません。抽象メソッドは、通常の「スーパー」コールメカニズムを使用して呼び出すことができます。&lt;a href=&quot;#abc.abstractmethod&quot;&gt; &lt;code&gt;abstractmethod()&lt;/code&gt; &lt;/a&gt;を使用して、プロパティと記述子の抽象メソッドを宣言できます。</target>
        </trans-unit>
        <trans-unit id="04978a627ce1975c2d08d1fe862ff2c396639ee3" translate="yes" xml:space="preserve">
          <source>Using type-specific formatting:</source>
          <target state="translated">タイプ固有の書式を使用しています。</target>
        </trans-unit>
        <trans-unit id="6a192d773066b752e8add03087aaa95e9d5840fd" translate="yes" xml:space="preserve">
          <source>Usually an IFF-type file consists of one or more chunks. The proposed usage of the &lt;a href=&quot;#chunk.Chunk&quot;&gt;&lt;code&gt;Chunk&lt;/code&gt;&lt;/a&gt; class defined here is to instantiate an instance at the start of each chunk and read from the instance until it reaches the end, after which a new instance can be instantiated. At the end of the file, creating a new instance will fail with an &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">通常、IFFタイプのファイルは1つ以上のチャンクで構成されます。ここで定義されている&lt;a href=&quot;#chunk.Chunk&quot;&gt; &lt;code&gt;Chunk&lt;/code&gt; &lt;/a&gt;クラスの推奨される使用法は、各チャンクの開始時にインスタンスをインスタンス化し、インスタンスが最後に到達するまでインスタンスから読み取り、その後、新しいインスタンスをインスタンス化できるようにすることです。ファイルの最後で、新しいインスタンスの作成は&lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; &lt;/a&gt;例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="42f0c83d353a2c88d75349acfedbc55986b5c477" translate="yes" xml:space="preserve">
          <source>Usually message passing between processes is done using queues or by using &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; objects returned by &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt;&lt;code&gt;Pipe()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、プロセス間のメッセージの受け渡しは、キューを使用するか、&lt;a href=&quot;#multiprocessing.Pipe&quot;&gt; &lt;code&gt;Pipe()&lt;/code&gt; &lt;/a&gt;によって返される&lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;オブジェクトを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="55c3035b6a0c2c422567b7b94ec5c3d81b6f4353" translate="yes" xml:space="preserve">
          <source>Usually this option consists of the method &lt;code&gt;Scrollbar.set()&lt;/code&gt; of some scrollbar. This will cause the scrollbar to be updated whenever the view in the window changes.</source>
          <target state="translated">通常、このオプションは、 &lt;code&gt;Scrollbar.set()&lt;/code&gt; メソッドで構成されています。これにより、ウィンドウのビューが変更されるたびにスクロールバーが更新されます。</target>
        </trans-unit>
        <trans-unit id="948448f0d7e18600e63d50ac1f18a1bd083aad1f" translate="yes" xml:space="preserve">
          <source>Usually you can use &lt;a href=&quot;#unittest.TestCase.skipTest&quot;&gt;&lt;code&gt;TestCase.skipTest()&lt;/code&gt;&lt;/a&gt; or one of the skipping decorators instead of raising this directly.</source>
          <target state="translated">通常、これを直接発生させる代わりに、&lt;a href=&quot;#unittest.TestCase.skipTest&quot;&gt; &lt;code&gt;TestCase.skipTest()&lt;/code&gt; &lt;/a&gt;またはスキップデコレータの1つを使用できます。</target>
        </trans-unit>
        <trans-unit id="7159aa4ebaad10cbad60df9f2f47fdab12006d8d" translate="yes" xml:space="preserve">
          <source>Usually you use the transformer like this:</source>
          <target state="translated">普通はこんな感じでトランスを使いますよね。</target>
        </trans-unit>
        <trans-unit id="3c8bb6feca38dd5baf6726db91fee35d699471bf" translate="yes" xml:space="preserve">
          <source>Usually your SQL operations will need to use values from Python variables. You shouldn&amp;rsquo;t assemble your query using Python&amp;rsquo;s string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack (see &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt; for humorous example of what can go wrong).</source>
          <target state="translated">通常、SQL操作ではPython変数の値を使用する必要があります。安全ではないため、Pythonの文字列操作を使用してクエリをアセンブルしないでください。これにより、プログラムがSQLインジェクション攻撃に対して脆弱になります（問題が発生する可能性のあるユーモラスな例については、&lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https：//xkcd.com/327/&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="1e88facb0b543dc9f14acbae6cf0f5ff030076b1" translate="yes" xml:space="preserve">
          <source>Usually, a timeout using &lt;a href=&quot;#test.support.INTERNET_TIMEOUT&quot;&gt;&lt;code&gt;INTERNET_TIMEOUT&lt;/code&gt;&lt;/a&gt; should not mark a test as failed, but skip the test instead: see &lt;a href=&quot;#test.support.socket_helper.transient_internet&quot;&gt;&lt;code&gt;transient_internet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Usually, a timeout using &lt;a href=&quot;#test.support.INTERNET_TIMEOUT&quot;&gt; &lt;code&gt;INTERNET_TIMEOUT&lt;/code&gt; &lt;/a&gt; should not mark a test as failed, but skip the test instead: see &lt;a href=&quot;#test.support.socket_helper.transient_internet&quot;&gt; &lt;code&gt;transient_internet()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="18aef760d202fd986f9f4b8de779ecd32a97e992" translate="yes" xml:space="preserve">
          <source>Usually, ctypes does strict type checking. This means, if you have &lt;code&gt;POINTER(c_int)&lt;/code&gt; in the &lt;code&gt;argtypes&lt;/code&gt; list of a function or as the type of a member field in a structure definition, only instances of exactly the same type are accepted. There are some exceptions to this rule, where ctypes accepts other objects. For example, you can pass compatible array instances instead of pointer types. So, for &lt;code&gt;POINTER(c_int)&lt;/code&gt;, ctypes accepts an array of c_int:</source>
          <target state="translated">通常、ctypesは厳密な型チェックを行います。あなたが持っている場合は、この手段は、 &lt;code&gt;POINTER(c_int)&lt;/code&gt; に &lt;code&gt;argtypes&lt;/code&gt; 機能のリストまたは構造体定義におけるメンバーフィールドのタイプと、まったく同じタイプのインスタンスのみが受け入れられます。この規則にはいくつかの例外があり、ctypesは他のオブジェクトを受け入れます。たとえば、ポインター型の代わりに互換性のある配列インスタンスを渡すことができます。したがって、 &lt;code&gt;POINTER(c_int)&lt;/code&gt; の場合、ctypesはc_intの配列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="4d36432a5729065510c52d7569f55dee8f7e78b0" translate="yes" xml:space="preserve">
          <source>Usually, the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#subscriptions&quot;&gt;subscription&lt;/a&gt; of container objects calls the method &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; of the object. However, the subscription of some containers&amp;rsquo; classes may call the classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt;&lt;code&gt;__class_getitem__()&lt;/code&gt;&lt;/a&gt; of the class instead. The classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt;&lt;code&gt;__class_getitem__()&lt;/code&gt;&lt;/a&gt; should return a &lt;code&gt;GenericAlias&lt;/code&gt; object.</source>
          <target state="translated">Usually, the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#subscriptions&quot;&gt;subscription&lt;/a&gt; of container objects calls the method &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt; of the object. However, the subscription of some containers&amp;rsquo; classes may call the classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt; &lt;code&gt;__class_getitem__()&lt;/code&gt; &lt;/a&gt; of the class instead. The classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt; &lt;code&gt;__class_getitem__()&lt;/code&gt; &lt;/a&gt; should return a &lt;code&gt;GenericAlias&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="46defc487dd609e5e11afede6e42ed7efb746478" translate="yes" xml:space="preserve">
          <source>Usually, the number of elements output matches the input iterable. However, if the keyword argument &lt;em&gt;initial&lt;/em&gt; is provided, the accumulation leads off with the &lt;em&gt;initial&lt;/em&gt; value so that the output has one more element than the input iterable.</source>
          <target state="translated">通常、出力される要素の数は、反復可能な入力と一致します。ただし、キーワード引数&lt;em&gt;initial&lt;/em&gt;が指定されている場合、累積は&lt;em&gt;初期&lt;/em&gt;値で&lt;em&gt;開始さ&lt;/em&gt;れるため、出力には入力反復可能要素よりも1つ多い要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="fdb7e6fac588b967be8115ae1239c9f13b01bc33" translate="yes" xml:space="preserve">
          <source>Utilities for working with ASCII characters, regardless of your locale settings.</source>
          <target state="translated">ロケールの設定に関係なく、ASCII 文字を扱うためのユーティリティ。</target>
        </trans-unit>
        <trans-unit id="102dc7d3bf538e66387889d7daeeb05e53a870a4" translate="yes" xml:space="preserve">
          <source>Utilities to compile all Python source files in a directory tree.</source>
          <target state="translated">ディレクトリツリー内のすべての Python ソースファイルをコンパイルするユーティリティ。</target>
        </trans-unit>
        <trans-unit id="894c08b4d341d3181d652622edf583cdb792b50d" translate="yes" xml:space="preserve">
          <source>Utilities to help work with fonts.</source>
          <target state="translated">フォントを扱うのに役立つユーティリティ。</target>
        </trans-unit>
        <trans-unit id="9b5439bb171dd02403cd4a0162c5e608f757fe9b" translate="yes" xml:space="preserve">
          <source>Utilities to run asyncio programs, create Tasks, and await on multiple things with timeouts.</source>
          <target state="translated">asyncio プログラムを実行したり、タスクを作成したり、タイムアウトで複数のものを待つためのユーティリティ。</target>
        </trans-unit>
        <trans-unit id="4fafea3320bd24aef44e569f108bcf7bb663fa8f" translate="yes" xml:space="preserve">
          <source>Utilities to spawn subprocesses and run shell commands.</source>
          <target state="translated">サブプロセスを起動したり、シェルコマンドを実行したりするためのユーティリティ。</target>
        </trans-unit>
        <trans-unit id="f16cdccb3faaa5e67faa6fdb65caa5cf29d51cbb" translate="yes" xml:space="preserve">
          <source>Utility functions</source>
          <target state="translated">ユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="6e7be9dc79ed50d8c704d7f221a2758927ee65a3" translate="yes" xml:space="preserve">
          <source>Uuencode file &lt;em&gt;in_file&lt;/em&gt; into file &lt;em&gt;out_file&lt;/em&gt;. The uuencoded file will have the header specifying &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;mode&lt;/em&gt; as the defaults for the results of decoding the file. The default defaults are taken from &lt;em&gt;in_file&lt;/em&gt;, or &lt;code&gt;'-'&lt;/code&gt; and &lt;code&gt;0o666&lt;/code&gt; respectively. If &lt;em&gt;backtick&lt;/em&gt; is true, zeros are represented by &lt;code&gt;'`'&lt;/code&gt; instead of spaces.</source>
          <target state="translated">ファイル&lt;em&gt;in_file&lt;/em&gt;をファイル&lt;em&gt;out_fileに&lt;/em&gt;&lt;em&gt;Uuencode&lt;/em&gt;します。uuencodeされたファイルには、ファイルのデコード結果のデフォルトとして&lt;em&gt;名前&lt;/em&gt;と&lt;em&gt;モード&lt;/em&gt;を指定するヘッダーがあります。デフォルトのデフォルトは、&lt;em&gt;in_file&lt;/em&gt;、またはそれぞれ &lt;code&gt;'-'&lt;/code&gt; と &lt;code&gt;0o666&lt;/code&gt; から取得されます。場合は&lt;em&gt;バッククォートが&lt;/em&gt;真である、ゼロが表され &lt;code&gt;'`'&lt;/code&gt; スペースの代わりに。</target>
        </trans-unit>
        <trans-unit id="51920a4103a076cddaea8c5320e3e3d41f0fe359" translate="yes" xml:space="preserve">
          <source>VRFY</source>
          <target state="translated">VRFY</target>
        </trans-unit>
        <trans-unit id="6ef9fae42b29329a1ed8c77701fe1700d757002f" translate="yes" xml:space="preserve">
          <source>Valid String Arg</source>
          <target state="translated">有効な文字列引数</target>
        </trans-unit>
        <trans-unit id="ae9f1d564485db39fcd34520a7886185a9f3d9bb" translate="yes" xml:space="preserve">
          <source>Valid enum Arg</source>
          <target state="translated">有効な enum Arg</target>
        </trans-unit>
        <trans-unit id="d11dea5084c554faaf9051f680e8d26ff170b6ad" translate="yes" xml:space="preserve">
          <source>Valid values are &lt;code&gt;7bit&lt;/code&gt;, &lt;code&gt;8bit&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, and &lt;code&gt;quoted-printable&lt;/code&gt;. See &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">有効な値は &lt;code&gt;7bit&lt;/code&gt; 、 &lt;code&gt;8bit&lt;/code&gt; 、 &lt;code&gt;base64&lt;/code&gt; 、 &lt;code&gt;quoted-printable&lt;/code&gt; です。詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4ed34a07f3d8b83630e9e822f76c6734a7177025" translate="yes" xml:space="preserve">
          <source>Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models.</source>
          <target state="translated">Validating Parsersは、このメソッドを使って、無視可能な空白の各チャンクを報告する必要があります(W3C XML 1.0勧告、2.10項参照)。</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="0701d51e2238471096af133360d47b98e784ca3c" translate="yes" xml:space="preserve">
          <source>Value Types</source>
          <target state="translated">値の種類</target>
        </trans-unit>
        <trans-unit id="2ee2c05664be5bc3b7425a3cd5c2eaeb9af87ebe" translate="yes" xml:space="preserve">
          <source>Value if not present</source>
          <target state="translated">存在しない場合の値</target>
        </trans-unit>
        <trans-unit id="7dd7eb81edd524ab9b2cc8166a90a72809941195" translate="yes" xml:space="preserve">
          <source>Value lengths are limited by available memory. Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry. This helps the registry perform efficiently.</source>
          <target state="translated">値の長さは使用可能なメモリによって制限されます。長い値(2048バイト以上)は、設定レジストリに保存されているファイル名でファイルとして保存する必要があります。これにより、レジストリが効率的に動作するようになります。</target>
        </trans-unit>
        <trans-unit id="ff4442e3ee6e85b03ce0d04c09a9f9afc7926b83" translate="yes" xml:space="preserve">
          <source>Value may be supplied as either a keyword or positional argument (this is the standard binding behaviour for functions implemented in Python.)</source>
          <target state="translated">値はキーワードまたは位置引数として与えられます(これはPythonで実装された関数の標準的なバインディング動作です)。</target>
        </trans-unit>
        <trans-unit id="e606eb6146ca90bd2780303c47db18287309d201" translate="yes" xml:space="preserve">
          <source>Value must be supplied as a keyword argument. Keyword only parameters are those which appear after a &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;*args&lt;/code&gt; entry in a Python function definition.</source>
          <target state="translated">値はキーワード引数として指定する必要があります。キーワードのみのパラメータは、Python関数定義の &lt;code&gt;*&lt;/code&gt; または &lt;code&gt;*args&lt;/code&gt; エントリの後に表示されるパラメータです。</target>
        </trans-unit>
        <trans-unit id="f281af900c7055431a7ba9336e9f5b33972ace2e" translate="yes" xml:space="preserve">
          <source>Value must be supplied as a positional argument. Positional only parameters are those which appear before a &lt;code&gt;/&lt;/code&gt; entry (if present) in a Python function definition.</source>
          <target state="translated">位置引数として値を指定する必要があります。位置のみのパラメーターは、Python関数定義の &lt;code&gt;/&lt;/code&gt; エントリ（存在する場合）の前にあるパラメーターです。</target>
        </trans-unit>
        <trans-unit id="86d356e451eb275892ab84a0a8cabfd82d894744" translate="yes" xml:space="preserve">
          <source>Value of function key &lt;em&gt;n&lt;/em&gt;</source>
          <target state="translated">ファンクションキー&lt;em&gt;nの&lt;/em&gt;値&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
